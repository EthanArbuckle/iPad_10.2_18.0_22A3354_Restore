void sub_20E8F3504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DReconSlamMetadataCreateFromSlamStateAndAnchorUpdate(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _QWORD *v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *v12;
  CFTypeRef v13;
  unint64_t *p_shared_owners;
  char *v15;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    v4 = *(_QWORD **)(a1 + 8);
    if (v4 && *v4)
    {
      if (a2)
        return sub_20E8F2D1C(a1, (uint64_t *)(a2 + 8), a3);
      HIBYTE(__p[2]) = 21;
      strcpy((char *)__p, "Anchor update is NULL");
      v6 = (char *)operator new(0x80uLL);
      v15 = v6;
      strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRecon/CV3DReconSlamInterop.cpp");
      if (a3)
      {
        *(_QWORD *)&v19.__val_ = 22;
        v19.__cat_ = std::generic_category();
        sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v13 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v13;
        v8 = v18;
        if (!v18)
          goto LABEL_25;
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
LABEL_23:
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
LABEL_25:
        v6 = v15;
      }
    }
    else
    {
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DBF70;
      strcpy((char *)__p[0], "Slam state is missing metadata");
      v6 = (char *)operator new(0x80uLL);
      v15 = v6;
      strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRecon/CV3DReconSlamInterop.cpp");
      if (a3)
      {
        *(_QWORD *)&v19.__val_ = 22;
        v19.__cat_ = std::generic_category();
        sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v7 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v7;
        v8 = v18;
        if (!v18)
          goto LABEL_25;
        v9 = (unint64_t *)&v18->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        goto LABEL_23;
      }
    }
  }
  else
  {
    HIBYTE(__p[2]) = 18;
    strcpy((char *)__p, "Slam state is NULL");
    v6 = (char *)operator new(0x80uLL);
    v15 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DRecon/CV3DReconSlamInterop.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v8 = v18;
      if (!v18)
        goto LABEL_25;
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v12);
      while (__stlxr(v10 - 1, v12));
      goto LABEL_23;
    }
  }
  operator delete(v6);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8F38EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPosePredictorStateIsInitFinished(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (!a2)
    return 2;
  result = 0;
  *a2 = *(_BYTE *)(a1 + 610);
  return result;
}

uint64_t CV3DPosePredictorStateNumReinit(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (!a2)
    return 2;
  result = 0;
  *a2 = *(_DWORD *)(a1 + 600);
  return result;
}

uint64_t CV3DPosePredictorStateNumReinitRecoveries(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (!a2)
    return 2;
  result = 0;
  *a2 = *(_DWORD *)(a1 + 604);
  return result;
}

uint64_t CV3DPosePredictorStateCopyLatestInertialState(uint64_t a1, uint64_t a2, uint64_t a3, void *__dst, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (!a1)
    return 1;
  result = 2;
  if (a2 && a3 && __dst && a5)
  {
    if (a6)
    {
      memmove(__dst, (const void *)(a1 + 24), 0x48uLL);
      result = 0;
      v12 = *(_OWORD *)(a1 + 96);
      *(_QWORD *)(a6 + 16) = *(_QWORD *)(a1 + 112);
      *(_OWORD *)a6 = v12;
      v13 = *(_OWORD *)(a1 + 120);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 136);
      *(_OWORD *)a3 = v13;
      v14 = *(_OWORD *)(a1 + 144);
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(a1 + 160);
      *(_OWORD *)a5 = v14;
      v15 = *(_OWORD *)(a1 + 168);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 184);
      *(_OWORD *)a2 = v15;
    }
  }
  return result;
}

uint64_t CV3DPosePredictorStateGetSessionID(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (!a2)
    return 2;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 928);
  return result;
}

uint64_t CV3DPosePredictionPushIMU(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1)
    return 1;
  if (sub_20EBD0B18((std::recursive_mutex *)(a1 + 8), a2, a3))
    return 0;
  return 2;
}

uint64_t CV3DPosePredictionPushPredictorMetadata(uint64_t a1, _BYTE *a2, CFTypeRef *a3)
{
  void *__p;
  __int128 v6;

  if (a1)
    return sub_20EBD065C(a1 + 8, a2, a3);
  __p = operator new(0x48uLL);
  v6 = xmmword_2102DC240;
  strcpy((char *)__p, "Trying to push the push the predictor metadata to a invalid predictor");
  sub_20E8ECD2C(a3, 0x16u, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E8F3B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DPosePredictionUpdateTimeSyncValues(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  void *__p;
  __int128 v10;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 2908))
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 8));
      *(_QWORD *)(a1 + 3344) = a2;
      *(_QWORD *)(a1 + 3352) = a3;
      std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 8));
    }
    else
    {
      *(_QWORD *)(a1 + 3344) = a2;
      *(_QWORD *)(a1 + 3352) = a3;
    }
  }
  else
  {
    __p = operator new(0x40uLL);
    v10 = xmmword_2102DBBD0;
    strcpy((char *)__p, "Pose predictor hdl is null when setting time sync values");
    sub_20E8ECD2C(a4, 0x16u, (uint64_t)&__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E8F3C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DPosePredictionGetPoseForUseCase(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (!*(_QWORD *)(a1 + 3360) || !*(_QWORD *)(a1 + 3368))
    return 3;
  if (a4 < 0.0)
    return 4;
  result = 2;
  if (a2 <= 1 && a3)
  {
    if (sub_20EBCF1F0((std::recursive_mutex *)(a1 + 8), a3, a2, a4))
      return 0;
    else
      return 6;
  }
  return result;
}

uint64_t CV3DPosePredictionGetPoseWithDeltas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  if (!a1)
    return 1;
  if (sub_20EBCF414((std::recursive_mutex *)(a1 + 8), a2, a3, a4, a5, a6, a7))
    return 0;
  return 6;
}

char *CV3DSLAMAnchorCreate(const void *a1, const __CFUUID *a2, CFTypeRef *a3, int8x16_t a4, int8x16_t a5, __n128 a6, __n128 a7)
{
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  char *result;
  char *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  if (a2)
  {
    v9 = (std::__shared_weak_count_vtbl *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
    sub_20E8F3E5C(&v19, v9, 0);
    a2 = (const __CFUUID *)v19;
    v10 = v20;
    v21 = v19;
    v22 = v20;
  }
  else
  {
    v10 = 0;
  }
  result = sub_20E8F3F64(a1, a2, a3, 1, a4, a5, a6, a7);
  v12 = result;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v12;
    }
  }
  return result;
}

void sub_20E8F3E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_20E8F3E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_20E8F3E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 48);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20E8F3E5C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E8F6870(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0050;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20E8F3F38(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8F3F50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *sub_20E8F3F64(const void *a1, void *a2, CFTypeRef *a3, char a4, int8x16_t a5, int8x16_t a6, __n128 a7, __n128 a8)
{
  char v8;
  void *v10;
  char *v12;
  const void *v13;
  std::__shared_weak_count *cat;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  unint64_t *v18;
  CFTypeID v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v25;
  const std::error_category *v26;
  const void *v27;
  unint64_t *v28;
  char *v29;
  int v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  float64x2_t v36;
  float64x2_t v38;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const std::error_category *v47;
  CFErrorRef v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  float64x2_t v52;
  unsigned int *v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  uint64_t v65;
  BOOL v66;
  char v67;
  float64x2_t v69;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  unsigned int v75;
  std::error_condition cf;
  char v81;
  _BYTE __p[32];
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  _BYTE v86[24];
  _DWORD v87[2];
  CFErrorRef v88;
  std::__shared_weak_count *v89;
  std::error_condition v90;
  _BYTE __dst[24];
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    __p[23] = 17;
    strcpy(__p, "Anchor id is NULL");
    v12 = (char *)operator new(0x78uLL);
    *(_QWORD *)__dst = v12;
    *(_OWORD *)&__dst[8] = xmmword_2102DC270;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a3)
    {
      *(_QWORD *)v86 = 22;
      *(_QWORD *)&v86[8] = std::generic_category();
      sub_20EA67538((const std::error_condition *)v86, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v17 = *(const void **)&cf.__val_;
      if (*(_QWORD *)&cf.__val_)
        CFRetain(*(CFTypeRef *)&cf.__val_);
      *a3 = v17;
      cat = (std::__shared_weak_count *)cf.__cat_;
      if (!cf.__cat_)
        goto LABEL_44;
      v18 = (unint64_t *)&cf.__cat_[1];
      do
        v16 = __ldaxr(v18);
      while (__stlxr(v16 - 1, v18));
LABEL_43:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_47;
LABEL_45:
        v12 = *(char **)__dst;
        goto LABEL_46;
      }
LABEL_44:
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_47:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        return 0;
      }
      goto LABEL_45;
    }
LABEL_46:
    operator delete(v12);
    goto LABEL_47;
  }
  v10 = a2;
  if (!a2 && (a4 & 1) == 0)
  {
    __p[23] = 16;
    strcpy(__p, "Group id is NULL");
    v12 = (char *)operator new(0x78uLL);
    *(_QWORD *)__dst = v12;
    *(_OWORD *)&__dst[8] = xmmword_2102DC270;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a3)
    {
      *(_QWORD *)v86 = 22;
      *(_QWORD *)&v86[8] = std::generic_category();
      sub_20EA67538((const std::error_condition *)v86, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v13 = *(const void **)&cf.__val_;
      if (*(_QWORD *)&cf.__val_)
        CFRetain(*(CFTypeRef *)&cf.__val_);
      *a3 = v13;
      cat = (std::__shared_weak_count *)cf.__cat_;
      if (!cf.__cat_)
        goto LABEL_44;
      v15 = (unint64_t *)&cf.__cat_[1];
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  v19 = CFUUIDGetTypeID();
  if (CFGetTypeID(a1) != v19)
  {
    LOBYTE(v93) = 0;
    v95 = 0;
    goto LABEL_35;
  }
  *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
  v20 = sub_20EA68D10((uint64_t)__p);
  v21 = 0;
  v93 = v20;
  v94 = v22;
  v95 = 1;
  do
  {
    v23 = *((unsigned __int8 *)&v93 + v21);
    if (*((_BYTE *)&v93 + v21))
      _ZF = 1;
    else
      _ZF = v21 == 15;
    ++v21;
  }
  while (!_ZF);
  if (!v23)
  {
LABEL_35:
    __p[23] = 20;
    strcpy(__p, "Anchor id is invalid");
    v12 = (char *)operator new(0x78uLL);
    *(_QWORD *)__dst = v12;
    *(_OWORD *)&__dst[8] = xmmword_2102DC270;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a3)
    {
      v26 = std::generic_category();
      *(_QWORD *)v86 = 22;
      *(_QWORD *)&v86[8] = v26;
      sub_20EA67538((const std::error_condition *)v86, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v27 = *(const void **)&cf.__val_;
      if (*(_QWORD *)&cf.__val_)
        CFRetain(*(CFTypeRef *)&cf.__val_);
      *a3 = v27;
      cat = (std::__shared_weak_count *)cf.__cat_;
      if (!cf.__cat_)
        goto LABEL_44;
      v28 = (unint64_t *)&cf.__cat_[1];
      do
        v16 = __ldaxr(v28);
      while (__stlxr(v16 - 1, v28));
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  if (!v10)
  {
    v31 = 0;
    goto LABEL_72;
  }
  sub_20EA5E5C4((CFIndex)v10, (std::string *)__p);
  v25 = __p[24];
  if (__p[24])
  {
    if ((__p[23] & 0x80000000) != 0)
    {
      sub_20E860C04(__dst, *(void **)__p, *(unint64_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__p;
      *(_QWORD *)&__dst[16] = *(_QWORD *)&__p[16];
    }
    v10 = *(void **)__dst;
    v19 = *(_QWORD *)&__dst[8];
    v87[0] = *(_DWORD *)&__dst[16];
    *(_DWORD *)((char *)v87 + 3) = *(_DWORD *)&__dst[19];
    v8 = __dst[23];
    v31 = 1;
    goto LABEL_68;
  }
  __dst[23] = 19;
  strcpy(__dst, "Group id is invalid");
  v32 = (char *)operator new(0x78uLL);
  *(_QWORD *)v86 = v32;
  *(_OWORD *)&v86[8] = xmmword_2102DC270;
  strcpy(v32, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
  if (a3)
  {
    *(_QWORD *)&cf.__val_ = 22;
    cf.__cat_ = std::generic_category();
    sub_20EA67538(&cf, (uint64_t)__dst, (CFErrorRef *)&v90);
    sub_20EA66CF0((const void **)&v90, a3);
    v33 = (std::__shared_weak_count *)v90.__cat_;
    if (v90.__cat_)
    {
      v34 = (unint64_t *)&v90.__cat_[1];
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if ((v86[23] & 0x80000000) == 0)
      goto LABEL_63;
    v32 = *(char **)v86;
  }
  operator delete(v32);
LABEL_63:
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v31 = 0;
  v10 = 0;
LABEL_68:
  if (__p[24] && (__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v25)
    goto LABEL_174;
LABEL_72:
  *(double *)__p = *(float *)a5.i32;
  *(double *)&__p[8] = *(float *)a6.i32;
  *(float64x2_t *)&__p[16] = vcvtq_f64_f32((float32x2_t)__PAIR64__(a5.u32[1], a7.n128_u32[0]));
  v83 = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a6.i8, (int32x2_t)a7.n128_u64[0]));
  v36 = (float64x2_t)vextq_s8(a5, a5, 8uLL);
  v84 = vcvtq_f64_f32((float32x2_t)vzip1_s32(*(int32x2_t *)&v36.f64[0], (int32x2_t)*(_OWORD *)&vextq_s8(a6, a6, 8uLL)));
  v36.f64[0] = a7.n128_f32[2];
  v85 = a7.n128_f32[2];
  *(float64x2_t *)v86 = vcvtq_f64_f32((float32x2_t)a8.n128_u64[0]);
  *(double *)&v86[16] = a8.n128_f32[2];
  _V4.D[1] = *(float *)a6.i32;
  v38 = (float64x2_t)vextq_s8((int8x16_t)v84, (int8x16_t)v36, 8uLL);
  v36.f64[1] = v84.f64[0];
  _D2 = vmlsq_f64(vmulq_f64(v83, v36), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v83, *(int64x2_t *)(__p + 16)), v38).f64[1];
  __asm { FMLA            D1, D2, V4.D[1] }
  if (fabs(vmlad_n_f64(_D1, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)&__p[16], v84), 1), v83, v84).f64[0], *(double *)&__p[16])+ -1.0) > 0.0015)
  {
    v92 = 0;
    sub_20E8F6670(__dst, "rotation is invalid: ");
    sub_20E8F6238((uint64_t)&v90, (uint64_t)__dst, (double *)__p);
    sub_20E8F6520((uint64_t)&v88, (uint64_t)__dst, (double *)v86);
    if (v92 == -1)
      sub_20E877AB8();
    *(_QWORD *)&v90.__val_ = &v88;
    ((void (*)(std::error_condition *__return_ptr, std::error_condition *, _BYTE *))off_24C9B0028[v92])(&cf, &v90, __dst);
    if (v92 != -1)
      ((void (*)(std::error_condition *, _BYTE *))off_24C9AFFF8[v92])(&v90, __dst);
    v46 = (char *)operator new(0x78uLL);
    *(_QWORD *)__dst = v46;
    *(_OWORD *)&__dst[8] = xmmword_2102DC270;
    strcpy(v46, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a3)
    {
      v47 = std::generic_category();
      *(_QWORD *)&v90.__val_ = 22;
      v90.__cat_ = v47;
      sub_20EA67538(&v90, (uint64_t)&cf, &v88);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v48 = v88;
      if (v88)
        CFRetain(v88);
      *a3 = v48;
      v49 = v89;
      if (v89)
      {
        p_shared_owners = (unint64_t *)&v89->__shared_owners_;
        do
          v51 = __ldaxr(p_shared_owners);
        while (__stlxr(v51 - 1, p_shared_owners));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_93;
      v46 = *(char **)__dst;
    }
    operator delete(v46);
LABEL_93:
    if (v81 < 0)
      operator delete(*(void **)&cf.__val_);
    goto LABEL_174;
  }
  v29 = (char *)operator new(0x158uLL, MEMORY[0x24BEDB6B8]);
  if (!v29)
    goto LABEL_175;
  v44 = v93;
  v45 = v94;
  __dst[0] = 0;
  LOBYTE(v92) = 0;
  if (v31)
  {
    if (v8 < 0)
    {
      sub_20E860C04(__dst, v10, v19);
    }
    else
    {
      *(_QWORD *)__dst = v10;
      *(_QWORD *)&__dst[8] = v19;
      *(_DWORD *)&__dst[16] = v87[0];
      *(_DWORD *)&__dst[19] = *(_DWORD *)((char *)v87 + 3);
      __dst[23] = v8;
    }
    LOBYTE(v92) = 1;
  }
  sub_20EAAD408((uint64_t)(v29 + 8), v44, v45, (__int128 *)__dst, (uint64_t)__p, (__int128 *)v86, 0);
  if ((_BYTE)v92 && (__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v53 = (unsigned int *)(v29 + 336);
  *((_DWORD *)v29 + 84) = 1;
  *(_QWORD *)v29 = off_24C9C3740;
  v54 = 56;
  do
  {
    v55 = *(double *)&v29[v54] != 0.0
       && ((*(_QWORD *)&v29[v54] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    v56 = v55;
    if (v55)
      break;
    _ZF = v54 == 120;
    v54 += 8;
  }
  while (!_ZF);
  if ((v56 & 1) == 0)
  {
    v57 = *((double *)v29 + 16) != 0.0
       && ((*((_QWORD *)v29 + 16) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    v58 = v57;
    if (!v57)
    {
      v59 = *((double *)v29 + 17) != 0.0
         && ((*((_QWORD *)v29 + 17) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      v58 = v59;
      if (!v59)
        v58 = *((double *)v29 + 18) != 0.0
           && ((*((_QWORD *)v29 + 18) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    }
    if (!v58)
    {
      if (!v29[280])
        goto LABEL_181;
      v61 = *((double *)v29 + 32) != 0.0
         && ((*((_QWORD *)v29 + 32) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      v62 = v61;
      if (!v61)
      {
        v63 = *((double *)v29 + 33) != 0.0
           && ((*((_QWORD *)v29 + 33) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
        v62 = v63;
        if (!v63)
          v62 = *((double *)v29 + 34) != 0.0
             && ((*((_QWORD *)v29 + 34) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      }
      if (!v62)
      {
LABEL_181:
        if (!v29[248])
          goto LABEL_175;
        v65 = 176;
        do
        {
          v66 = *(double *)&v29[v65] != 0.0
             && ((*(_QWORD *)&v29[v65] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
          v67 = v66;
          if (v66)
            break;
          _ZF = v65 == 240;
          v65 += 8;
        }
        while (!_ZF);
        if ((v67 & 1) == 0)
        {
          v52.f64[0] = *((float64_t *)v29 + 30);
          _Q1 = *((_OWORD *)v29 + 11);
          v69 = *((float64x2_t *)v29 + 12);
          _Q3 = *((float64x2_t *)v29 + 13);
          v71 = *((float64x2_t *)v29 + 14);
          v72 = (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v52, 8uLL);
          v52.f64[1] = *((float64_t *)v29 + 28);
          *(_QWORD *)&v73 = *(_OWORD *)&vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(v69, v71), 1), _Q3, v71);
          _D0 = vmlsq_f64(vmulq_f64(_Q3, v52), (float64x2_t)vzip2q_s64(*(int64x2_t *)&_Q3, *(int64x2_t *)&v69), v72).f64[1];
          __asm { FMLA            D3, D0, V1.D[1] }
          if (fabs(vmlad_n_f64(_Q3.f64[0], v73, v69.f64[0]) + -1.0) <= 0.0015)
            goto LABEL_175;
        }
      }
    }
  }
  sub_20E8F6120((uint64_t)__dst, (double *)__p, (double *)v86);
  sub_20E8610C0(&cf, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
  sub_20E8EAB0C(a3, 0x16u, (uint64_t)__dst);
  if (v81 < 0)
    operator delete(*(void **)&cf.__val_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  do
    v75 = __ldaxr(v53);
  while (__stlxr(v75 - 1, v53));
  if (v75 == 1)
    (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
LABEL_174:
  v29 = 0;
LABEL_175:
  if (v31 && v8 < 0)
    operator delete(v10);
  return v29;
}

void sub_20E8F4A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (a2)
  {
    if (*(_BYTE *)(v31 - 136) && *(char *)(v31 - 137) < 0)
      operator delete(*(void **)(v31 - 160));
    MEMORY[0x212BC6380](v30, MEMORY[0x24BEDB6B8]);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x20E8F4A28);
  }
  _Unwind_Resume(exception_object);
}

char *CV3DSLAMAnchorCreateWithGroupIDString(const void *a1, void *a2, CFTypeRef *a3, int8x16_t a4, int8x16_t a5, __n128 a6, __n128 a7)
{
  return sub_20E8F3F64(a1, a2, a3, 0, a4, a5, a6, a7);
}

uint64_t CV3DSLAMAnchorRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 336);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMAnchorRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 336);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DSLAMAnchorSetUserID(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v25;
  CFTypeRef v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  CFTypeRef v30;
  unint64_t *p_shared_owners;
  CFTypeRef v32;
  unint64_t *v33;
  __int128 uuid;
  char *v35;
  CFTypeRef cf;
  std::__shared_weak_count *v37;
  std::error_condition v38;
  _BYTE v39[24];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (!a2)
    {
      v39[23] = 15;
      strcpy(v39, "User id is NULL");
      v25 = (char *)operator new(0x78uLL);
      v35 = v25;
      strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
      if (a3)
      {
        *(_QWORD *)&v38.__val_ = 22;
        v38.__cat_ = std::generic_category();
        sub_20EA67538(&v38, (uint64_t)v39, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v30 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v30;
        v27 = v37;
        if (!v37)
          goto LABEL_62;
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        goto LABEL_60;
      }
      goto LABEL_63;
    }
    sub_20EA68E24(v39, a2);
    v5 = *(_QWORD *)v39;
    uuid = *(_OWORD *)v39;
    if (*(_QWORD *)&v39[8])
    {
      v6 = (unint64_t *)(*(_QWORD *)&v39[8] + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = *(std::__shared_weak_count **)&v39[8];
      if (!*(_QWORD *)&v39[8])
        goto LABEL_10;
      v9 = (unint64_t *)(*(_QWORD *)&v39[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        v11 = (std::__shared_weak_count *)*((_QWORD *)&uuid + 1);
        v5 = uuid;
        if (!*((_QWORD *)&uuid + 1))
          goto LABEL_15;
      }
      else
      {
LABEL_10:
        v11 = (std::__shared_weak_count *)*((_QWORD *)&uuid + 1);
        v5 = uuid;
        if (!*((_QWORD *)&uuid + 1))
          goto LABEL_15;
      }
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v5)
          goto LABEL_17;
LABEL_16:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EC5A, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
LABEL_17:
        *(CFUUIDBytes *)v39 = CFUUIDGetUUIDBytes((CFUUIDRef)uuid);
        v15 = sub_20EA68D10((uint64_t)v39);
        v16 = 0;
        *(_QWORD *)v39 = v15;
        *(_QWORD *)&v39[8] = v17;
        do
        {
          v18 = v39[v16];
          if (v39[v16])
            v19 = 1;
          else
            v19 = v16 == 15;
          ++v16;
        }
        while (!v19);
        if (v18 && (v20 = *(unsigned __int8 *)(a1 + 168), *(_OWORD *)(a1 + 152) = *(_OWORD *)v39, !v20))
        {
          *(_BYTE *)(a1 + 168) = 1;
          v21 = (std::__shared_weak_count *)*((_QWORD *)&uuid + 1);
          if (!*((_QWORD *)&uuid + 1))
            goto LABEL_29;
        }
        else
        {
          v21 = (std::__shared_weak_count *)*((_QWORD *)&uuid + 1);
          if (!*((_QWORD *)&uuid + 1))
            goto LABEL_29;
        }
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          if (v18)
            return 1;
          goto LABEL_52;
        }
LABEL_29:
        if (v18)
          return 1;
LABEL_52:
        v39[23] = 18;
        strcpy(v39, "User id is invalid");
        v25 = (char *)operator new(0x78uLL);
        v35 = v25;
        strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
        if (a3)
        {
          *(_QWORD *)&v38.__val_ = 22;
          v38.__cat_ = std::generic_category();
          sub_20EA67538(&v38, (uint64_t)v39, (CFErrorRef *)&cf);
          if (*a3)
            CFRelease(*a3);
          *a3 = 0;
          v32 = cf;
          if (cf)
            CFRetain(cf);
          *a3 = v32;
          v27 = v37;
          if (!v37)
            goto LABEL_62;
          v33 = (unint64_t *)&v37->__shared_owners_;
          do
            v29 = __ldaxr(v33);
          while (__stlxr(v29 - 1, v33));
LABEL_60:
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
LABEL_62:
          v25 = v35;
          goto LABEL_63;
        }
        goto LABEL_63;
      }
    }
LABEL_15:
    if (v5)
      goto LABEL_17;
    goto LABEL_16;
  }
  *(_QWORD *)v39 = operator new(0x20uLL);
  *(_OWORD *)&v39[8] = xmmword_2102DBFB0;
  strcpy(*(char **)v39, "The given anchor is NULL");
  v25 = (char *)operator new(0x78uLL);
  v35 = v25;
  strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
  if (a3)
  {
    *(_QWORD *)&v38.__val_ = 22;
    v38.__cat_ = std::generic_category();
    sub_20EA67538(&v38, (uint64_t)v39, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v26 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v26;
    v27 = v37;
    if (!v37)
      goto LABEL_62;
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    goto LABEL_60;
  }
LABEL_63:
  operator delete(v25);
  if ((v39[23] & 0x80000000) != 0)
    operator delete(*(void **)v39);
  return 0;
}

void sub_20E8F513C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;

  operator delete(v15);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E8F519C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMAnchorSetSLAMState(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  unint64_t *v19;
  char *v20;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    if (a2)
    {
      v5 = *(_QWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 16);
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = *(unsigned __int8 *)(a1 + 304);
      *(_QWORD *)(a1 + 288) = v5;
      if (v8)
      {
        v9 = *(std::__shared_weak_count **)(a1 + 296);
        *(_QWORD *)(a1 + 296) = v4;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        return 1;
      }
      else
      {
        *(_QWORD *)(a1 + 296) = v4;
        *(_BYTE *)(a1 + 304) = 1;
        return 1;
      }
    }
    __p[23] = 13;
    strcpy(__p, "State is NULL");
    v13 = (char *)operator new(0x78uLL);
    v20 = v13;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v18;
      v15 = v23;
      if (!v23)
        goto LABEL_32;
      v19 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v19);
      while (__stlxr(v17 - 1, v19));
LABEL_30:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_32:
      v13 = v20;
    }
  }
  else
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DBFB0;
    strcpy(*(char **)__p, "The given anchor is NULL");
    v13 = (char *)operator new(0x78uLL);
    v20 = v13;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v15 = v23;
      if (!v23)
        goto LABEL_32;
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_30;
    }
  }
  operator delete(v13);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8F54A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DSLAMAnchorCopySessionID(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  char *v6;
  char *v7;
  const void *v8;
  std::__shared_weak_count *cat;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  CFTypeRef v25;
  std::__shared_weak_count *v26;
  std::error_condition cf;
  char *v28;
  __int128 v29;
  _QWORD *v30;

  if (!a1)
  {
    v28 = (char *)operator new(0x20uLL);
    v29 = xmmword_2102DBFB0;
    strcpy(v28, "The given anchor is NULL");
    v7 = (char *)operator new(0x78uLL);
    v23 = v7;
    v24 = xmmword_2102DC270;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a2)
    {
      v21 = 22;
      *(_QWORD *)&v22 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v21, (uint64_t)&v28, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = *(const void **)&cf.__val_;
      if (*(_QWORD *)&cf.__val_)
        CFRetain(*(CFTypeRef *)&cf.__val_);
      *a2 = v8;
      cat = (std::__shared_weak_count *)cf.__cat_;
      if (cf.__cat_)
      {
        v10 = (unint64_t *)&cf.__cat_[1];
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
          std::__shared_weak_count::__release_weak(cat);
        }
      }
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_20;
      v7 = v23;
    }
    operator delete(v7);
LABEL_20:
    if (SHIBYTE(v29) < 0)
      operator delete(v28);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 328))
  {
    LOBYTE(v23) = 0;
    BYTE8(v24) = 0;
    v28 = (char *)operator new(0x28uLL);
    v29 = xmmword_2102DC280;
    strcpy(v28, "Anchor has no session identifier");
    v14 = (char *)operator new(0x78uLL);
    v21 = (uint64_t)v14;
    v22 = xmmword_2102DC270;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a2)
    {
      *(_QWORD *)&cf.__val_ = 22;
      cf.__cat_ = std::generic_category();
      sub_20EA67538(&cf, (uint64_t)&v28, (CFErrorRef *)&v25);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v15 = v25;
      if (v25)
        CFRetain(v25);
      *a2 = v15;
      v16 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v29) & 0x80000000) == 0)
          goto LABEL_36;
        goto LABEL_42;
      }
      v14 = (char *)v21;
    }
    operator delete(v14);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_36:
      v6 = 0;
      v12 = 0;
      if (!BYTE8(v24))
        return v12;
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v28);
    v6 = 0;
    v12 = 0;
    if (!BYTE8(v24))
      return v12;
    goto LABEL_43;
  }
  v3 = *(_QWORD *)(a1 + 312);
  LOBYTE(v28) = 3;
  v4 = operator new(8uLL);
  *(_QWORD *)&v29 = v4;
  *v4 = v3;
  *((_QWORD *)&v29 + 1) = v4 + 1;
  v30 = v4 + 1;
  sub_20EA67BE0((uint64_t)&v21, (uint64_t)&v28);
  v6 = (char *)v21;
  v5 = (std::__shared_weak_count *)v22;
  if ((_QWORD)v29)
  {
    *((_QWORD *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
  v23 = v6;
  *(_QWORD *)&v24 = v5;
  BYTE8(v24) = 1;
  if (v6)
  {
    CFRetain(v6);
LABEL_43:
    v5 = (std::__shared_weak_count *)v24;
    v12 = v6;
    if ((_QWORD)v24)
      goto LABEL_44;
    return v12;
  }
  v12 = 0;
  if (!v5)
    return v12;
LABEL_44:
  v19 = (unint64_t *)&v5->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return v12;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v12;
}

void sub_20E8F5870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;

  operator delete(v15);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    sub_20E869AA8((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20E869AA8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20E8F58D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20E8F58E0);
}

void sub_20E8F5900()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 56);
  if (v1)
  {
    *(_QWORD *)(v0 - 48) = v1;
    JUMPOUT(0x20E8F5910);
  }
  JUMPOUT(0x20E8F5914);
}

CFTypeRef CV3DSLAMAnchorCopyAnchorID(uint64_t a1, CFTypeRef *a2)
{
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CFTypeRef cf;
  __int128 v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    Default = CFAllocatorGetDefault();
    v4 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)(a1 + 8));
    sub_20EA68D1C((std::__shared_weak_count_vtbl **)&cf, v4, 0);
    v5 = cf;
    if (cf)
      CFRetain(cf);
    v6 = (std::__shared_weak_count *)v17;
    if (!(_QWORD)v17)
      return v5;
    v7 = (unint64_t *)(v17 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v5;
    }
    else
    {
      return v5;
    }
  }
  else
  {
    cf = operator new(0x20uLL);
    v17 = xmmword_2102DBFB0;
    strcpy((char *)cf, "The given anchor is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)&cf, (CFErrorRef *)&v18);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = v18;
      if (v18)
        CFRetain(v18);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)cf);
    return 0;
  }
}

void sub_20E8F5B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef CV3DSLAMAnchorCopyGroupIDString(uint64_t a1, CFTypeRef *a2)
{
  char *v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef v8;
  std::__shared_weak_count *v10;
  char *v11;
  const std::error_category *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;
  _BYTE __dst[24];

  if (!a1)
  {
    *(_QWORD *)__dst = operator new(0x20uLL);
    *(_OWORD *)&__dst[8] = xmmword_2102DBFB0;
    strcpy(*(char **)__dst, "The given anchor is NULL");
    v3 = (char *)operator new(0x78uLL);
    v21 = v3;
    v22 = xmmword_2102DC270;
    strcpy(v3, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a2)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_20EA67538(&v25, (uint64_t)__dst, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v4 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v4;
      v5 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_18;
      v3 = v21;
    }
    operator delete(v3);
LABEL_18:
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_29;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    sub_20E860C04(__dst, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 24);
    *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 40);
  }
  sub_20EA5E4B8((uint64_t)__dst, (CFStringRef *)&v19);
  if ((__dst[23] & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
      goto LABEL_26;
LABEL_29:
    __dst[23] = 17;
    strcpy(__dst, "Group ID is empty");
    v11 = (char *)operator new(0x78uLL);
    v21 = v11;
    v22 = xmmword_2102DC270;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
    if (a2)
    {
      v12 = std::generic_category();
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = v12;
      sub_20EA67538(&v25, (uint64_t)__dst, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v13;
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
LABEL_42:
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        v8 = v19;
        v10 = v20;
        if (!v20)
          return v8;
        goto LABEL_45;
      }
      v11 = v21;
    }
    operator delete(v11);
    goto LABEL_42;
  }
  operator delete(*(void **)__dst);
  v8 = v19;
  if (!v19)
    goto LABEL_29;
LABEL_26:
  CFRetain(v8);
  v10 = v20;
  if (!v20)
    return v8;
LABEL_45:
  v17 = (unint64_t *)&v10->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return v8;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return v8;
}

void sub_20E8F5EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;

  operator delete(v15);
  if (*(char *)(v16 - 41) < 0)
    operator delete(*(void **)(v16 - 64));
  sub_20E86665C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMAnchorCopyPose(uint64_t a1, _OWORD *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAAD820(a1 + 8, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2102DBFB0;
  strcpy((char *)__p, "The given anchor is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchor.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E8F60E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8F6120(uint64_t a1, double *a2, double *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  char v8;
  char *v9;

  v7 = 0;
  sub_20E8ECB20(v6, "Pose is invalid: ");
  sub_20E8F6238((uint64_t)&v9, (uint64_t)v6, a2);
  sub_20E8F6520((uint64_t)&v8, (uint64_t)v6, a3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  result = ((uint64_t (*)(char **, _DWORD *))off_24C9B0028[v7])(&v9, v6);
  if (v7 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24C9AFFF8[v7])(&v9, v6);
  return result;
}

void sub_20E8F61E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8F61FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8F6210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E8F6224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8F6238(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t *v21;

  v16 = a2;
  v17 = "{";
  v18 = a2;
  v19 = "{";
  v20 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **))off_24C9B0010[v3])(&v21);
  sub_20E87876C((uint64_t)&v16, a2, a3);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v6])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 1);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v7])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 2);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v8])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 3);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v9])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 4);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v10])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 5);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v11])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 6);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v12 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v12 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v12])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 7);
  v16 = a2;
  v17 = ",";
  v18 = a2;
  v19 = ",";
  v20 = ",";
  v13 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v13 == -1)
    goto LABEL_12;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v13])(&v21, a2);
  sub_20E87876C((uint64_t)&v16, a2, a3 + 8);
  v16 = a2;
  v17 = "}";
  v18 = a2;
  v19 = "}";
  v20 = "}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
LABEL_12:
    sub_20E877AB8();
  v21 = &v16;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C9B0010[v14])(&v21, a2);
}

uint64_t sub_20E8F6520(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;

  v10 = a2;
  v11 = "{";
  v12 = a2;
  v13 = "{";
  v14 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **))off_24C9B0010[v3])(&v15);
  sub_20E87876C((uint64_t)&v10, a2, a3);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v6])(&v15, a2);
  sub_20E87876C((uint64_t)&v10, a2, a3 + 1);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C9B0010[v7])(&v15, a2);
  sub_20E87876C((uint64_t)&v10, a2, a3 + 2);
  v10 = a2;
  v11 = "}";
  v12 = a2;
  v13 = "}";
  v14 = "}";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
LABEL_6:
    sub_20E877AB8();
  v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C9B0010[v8])(&v15, a2);
}

_DWORD *sub_20E8F6670(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9AFFF8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20E8F6760(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 304))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 296);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20E8F67E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 304))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 296);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E8F6870(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B0050;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E8F68D0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8F68E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8F6900(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E8F6924(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E8F6944(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_OWORD *CV3DSLAMAnchorGroupListCreate(const __CFArray *a1, CFTypeRef *a2)
{
  CFIndex Count;
  CFIndex v5;
  __int128 v6;
  void *v7;
  const void *ValueAtIndex;
  CFTypeID v9;
  const void *v10;
  CFUUIDRef v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  CFTypeID v21;
  const void *v22;
  _OWORD *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  CFUUIDRef v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  CFUUIDRef v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  const std::error_category *v36;
  CFTypeRef v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  std::__shared_weak_count *v46;
  const std::error_category *v47;
  CFTypeRef v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  void *v61;
  void *v63;
  char *v64;
  unint64_t v65;
  void *__p[4];
  CFUUIDRef uuid;
  std::__shared_weak_count *v68;
  CFTypeRef cf;
  std::__shared_weak_count *v70;
  std::error_condition v71;
  __int128 v72;
  char v73;
  __int128 v74;
  _BYTE v75[32];
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v59 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v57 = v59;
    if (v59)
    {
      v59[1] = 0u;
      v59[2] = 0u;
      *((_QWORD *)v59 + 6) = 0;
      *v59 = 0u;
      *((_DWORD *)v59 + 10) = 1065353216;
      *((_DWORD *)v59 + 12) = 1;
      *(_QWORD *)v59 = off_24C9C35F8;
    }
    return v57;
  }
  v63 = 0;
  v64 = 0;
  v65 = 0;
  Count = CFArrayGetCount(a1);
  if (Count)
  {
    v5 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
      v9 = CFGetTypeID(ValueAtIndex);
      if (v9 == CFUUIDGetTypeID())
        break;
      v21 = CFGetTypeID(ValueAtIndex);
      if (v21 == CFStringGetTypeID())
      {
        v22 = CFArrayGetValueAtIndex(a1, v5);
        sub_20E8F721C((std::string *)v75, v22, a2);
        if (!v75[24])
          goto LABEL_101;
        if ((v75[23] & 0x80000000) != 0)
        {
          sub_20E860C04(__p, *(void **)v75, *(unint64_t *)&v75[8]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v75;
          __p[2] = *(void **)&v75[16];
        }
        v23 = v64;
        if ((unint64_t)v64 >= v65)
        {
          v64 = sub_20E8F7CF0(&v63, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v24 = *(_OWORD *)__p;
          *((void **)v64 + 2) = __p[2];
          *v23 = v24;
          v64 = (char *)v23 + 24;
        }
        if (v75[24] && (v75[23] & 0x80000000) != 0)
        {
          v7 = *(void **)v75;
LABEL_6:
          operator delete(v7);
        }
      }
      if (++v5 == Count)
        goto LABEL_95;
    }
    v10 = CFArrayGetValueAtIndex(a1, v5);
    sub_20EA68E24(v75, v10);
    v11 = *(CFUUIDRef *)v75;
    uuid = *(CFUUIDRef *)v75;
    v68 = *(std::__shared_weak_count **)&v75[8];
    if (*(_QWORD *)&v75[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v14 = *(std::__shared_weak_count **)&v75[8];
      if (!*(_QWORD *)&v75[8])
        goto LABEL_16;
      v15 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v11 = uuid;
        v17 = v68;
        if (!v68)
          goto LABEL_35;
      }
      else
      {
LABEL_16:
        v11 = uuid;
        v17 = v68;
        if (!v68)
          goto LABEL_35;
      }
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
LABEL_35:
    if (v11)
    {
      v26 = uuid;
      v25 = v68;
      if (!v68)
        goto LABEL_41;
      v27 = (unint64_t *)&v68->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        if (v26)
          goto LABEL_42;
      }
      else
      {
LABEL_41:
        if (v26)
        {
LABEL_42:
          v31 = uuid;
          v30 = v68;
          if (!v68)
            goto LABEL_47;
          v32 = (unint64_t *)&v68->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
            if (v31)
              goto LABEL_62;
          }
          else
          {
LABEL_47:
            if (v31)
              goto LABEL_62;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EC5A, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
LABEL_62:
          *(CFUUIDBytes *)v75 = CFUUIDGetUUIDBytes(uuid);
          v41 = sub_20EA68D10((uint64_t)v75);
          v42 = 0;
          *(_QWORD *)&v74 = v41;
          *((_QWORD *)&v74 + 1) = v43;
          do
          {
            v44 = v75[v42 - 16];
            if (v75[v42 - 16])
              v45 = 1;
            else
              v45 = v42 == 15;
            ++v42;
          }
          while (!v45);
          if (v44)
          {
            v72 = v74;
            v73 = 1;
            v46 = v68;
            if (!v68)
              goto LABEL_91;
            goto LABEL_87;
          }
          v75[23] = 21;
          strcpy(v75, "Given uuid is invalid");
          v35 = operator new(0x80uLL);
          __p[0] = v35;
          *(_OWORD *)&__p[1] = xmmword_2102DC3A0;
          strcpy((char *)v35, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchorGroup.cpp");
          if (!a2)
            goto LABEL_85;
          v47 = std::generic_category();
          *(_QWORD *)&v71.__val_ = 22;
          v71.__cat_ = v47;
          sub_20EA67538(&v71, (uint64_t)v75, (CFErrorRef *)&cf);
          if (*a2)
            CFRelease(*a2);
          *a2 = 0;
          v48 = cf;
          if (cf)
            CFRetain(cf);
          *a2 = v48;
          v38 = v70;
          if (!v70)
            goto LABEL_80;
          v49 = (unint64_t *)&v70->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (v50)
          {
LABEL_80:
            if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            {
              if ((v75[23] & 0x80000000) == 0)
                goto LABEL_82;
              goto LABEL_86;
            }
            v35 = __p[0];
LABEL_85:
            operator delete(v35);
            if ((v75[23] & 0x80000000) == 0)
            {
LABEL_82:
              LOBYTE(v72) = 0;
              v73 = 0;
              v46 = v68;
              if (!v68)
                goto LABEL_91;
              goto LABEL_87;
            }
LABEL_86:
            operator delete(*(void **)v75);
            LOBYTE(v72) = 0;
            v73 = 0;
            v46 = v68;
            if (!v68)
            {
LABEL_91:
              if (!v73)
              {
LABEL_101:
                v57 = 0;
                v58 = (char *)v63;
                if (v63)
                  goto LABEL_102;
                return v57;
              }
              sub_2102323F4((unsigned __int8 *)&v72, v75);
              v53 = operator new(0x28uLL);
              v54 = *(_OWORD *)&v75[16];
              *v53 = *(_OWORD *)v75;
              v53[1] = v54;
              *((_DWORD *)v53 + 8) = v76;
              *((_BYTE *)v53 + 36) = 0;
              sub_20E860C04(__p, v53, 0x24uLL);
              v55 = v64;
              if ((unint64_t)v64 < v65)
              {
                v6 = *(_OWORD *)__p;
                *((void **)v64 + 2) = __p[2];
                *v55 = v6;
                memset(__p, 0, 24);
                v64 = (char *)v55 + 24;
              }
              else
              {
                v64 = sub_20E8F7CF0(&v63, (uint64_t)__p);
                if (SHIBYTE(__p[2]) < 0)
                  operator delete(__p[0]);
              }
              v7 = v53;
              goto LABEL_6;
            }
LABEL_87:
            v51 = (unint64_t *)&v46->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
            goto LABEL_91;
          }
LABEL_60:
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
          goto LABEL_80;
        }
      }
    }
    v75[23] = 18;
    strcpy(v75, "Given uuid is NULL");
    v35 = operator new(0x80uLL);
    __p[0] = v35;
    *(_OWORD *)&__p[1] = xmmword_2102DC3A0;
    strcpy((char *)v35, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchorGroup.cpp");
    if (!a2)
      goto LABEL_85;
    v36 = std::generic_category();
    *(_QWORD *)&v71.__val_ = 22;
    v71.__cat_ = v36;
    sub_20EA67538(&v71, (uint64_t)v75, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v37 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v37;
    v38 = v70;
    if (!v70)
      goto LABEL_80;
    v39 = (unint64_t *)&v70->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (v40)
      goto LABEL_80;
    goto LABEL_60;
  }
LABEL_95:
  v56 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  v57 = v56;
  if (v56)
  {
    sub_20EAA8414((uint64_t)v56 + 8, (__int128 **)&v63);
    *((_DWORD *)v57 + 12) = 1;
    *(_QWORD *)v57 = off_24C9C35F8;
  }
  v58 = (char *)v63;
  if (v63)
  {
LABEL_102:
    v60 = v64;
    v61 = v58;
    if (v64 != v58)
    {
      do
      {
        if (*(v60 - 1) < 0)
          operator delete(*((void **)v60 - 3));
        v60 -= 24;
      }
      while (v60 != v58);
      v61 = v63;
    }
    v64 = v58;
    operator delete(v61);
  }
  return v57;
}

void sub_20E8F7128(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20E8F7138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t v25;

  operator delete(v24);
  if (*(char *)(v25 - 121) < 0)
    operator delete(*(void **)(v25 - 144));
  sub_20E86665C((uint64_t)&a22);
  sub_20E8F74DC(&a12);
  JUMPOUT(0x20E8F7214);
}

void sub_20E8F721C(std::string *a1, const void *a2, CFTypeRef *a3)
{
  CFIndex v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  char *v16;
  const std::error_category *v17;
  CFErrorRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char __p[21];
  char v25;
  CFIndex v26;
  std::__shared_weak_count *v27;
  CFErrorRef v28;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  sub_20E8F6870(__p, a2);
  v5 = *(_QWORD *)__p;
  v26 = *(_QWORD *)__p;
  v27 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_14;
  v6 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v5 = v26;
  v11 = v27;
  if (!v27)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v5)
    {
LABEL_15:
      sub_20EA5E5C4(v26, a1);
      v15 = v27;
      if (!v27)
        return;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_14:
    if (v5)
      goto LABEL_15;
  }
  v25 = 20;
  strcpy(__p, "Given string is NULL");
  v16 = (char *)operator new(0x80uLL);
  strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchorGroup.cpp");
  if (a3)
  {
    v17 = std::generic_category();
    *(_QWORD *)&v30.__val_ = 22;
    v30.__cat_ = v17;
    sub_20EA67538(&v30, (uint64_t)__p, &v28);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v18 = v28;
    if (v28)
      CFRetain(v28);
    *a3 = v18;
    v19 = v29;
    if (v29)
    {
      v20 = (unint64_t *)&v29->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  operator delete(v16);
  if (v25 < 0)
    operator delete(*(void **)__p);
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  v15 = v27;
  if (v27)
  {
LABEL_31:
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20E8F7484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void **sub_20E8F74DC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t CV3DSLAMAnchorGroupListRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMAnchorGroupListRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DSLAMAnchorGroupListAddGroupIDString(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  _BOOL8 v5;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string __p;
  char v13;
  std::string __dst;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (!a1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102DBF70;
    strcpy(__p.__r_.__value_.__l.__data_, "The given anchor group is NULL");
    v6 = (char *)operator new(0x80uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_2102DC3A0;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchorGroup.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      v6 = (char *)__dst.__r_.__value_.__r.__words[0];
    }
    operator delete(v6);
LABEL_18:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  sub_20E8F721C(&__p, a2, a3);
  v5 = v13 != 0;
  if (!v13)
    return v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  sub_20E9093E4(a1 + 8, (uint64_t)&__dst, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!v13 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v5;
  operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20E8F7790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CV3DSLAMAnchorGroupListRemoveGroupIDString(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  _BOOL8 v5;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  std::string v15;
  std::string __p;
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  char *v20;
  __int128 v21;

  if (!a1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102DBF70;
    strcpy(__p.__r_.__value_.__l.__data_, "The given anchor group is NULL");
    v6 = (char *)operator new(0x80uLL);
    v20 = v6;
    v21 = xmmword_2102DC3A0;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchorGroup.cpp");
    if (a3)
    {
      v15.__r_.__value_.__r.__words[0] = 22;
      v15.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      sub_20EA67538((const std::error_condition *)&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_18;
      v6 = v20;
    }
    operator delete(v6);
LABEL_18:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  sub_20E8F721C(&__p, a2, a3);
  v5 = v17 != 0;
  if (!v17)
    return v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v15 = __p;
  v12 = (_QWORD *)(a1 + 8);
  v13 = sub_20EAA8F0C(v12, (uint64_t)&v15);
  if (v13)
  {
    sub_20E8D2CE8(v12, v13, (uint64_t)&v20);
    v14 = v20;
    v20 = 0;
    if (v14)
    {
      if (BYTE8(v21) && v14[39] < 0)
        operator delete(*((void **)v14 + 2));
      operator delete(v14);
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (!v17 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v5;
  operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20E8F7A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CV3DSLAMAnchorGroupListContainsGroup(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BOOL8 v10;
  std::string __p;
  char v13;
  std::string __dst;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (!a1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102DBF70;
    strcpy(__p.__r_.__value_.__l.__data_, "The given anchor group is NULL");
    v5 = (char *)operator new(0x80uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_2102DC3A0;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMAnchorGroup.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      v5 = (char *)__dst.__r_.__value_.__r.__words[0];
    }
    operator delete(v5);
LABEL_18:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  sub_20E8F721C(&__p, a2, a3);
  if (!v13)
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  v10 = sub_20EAA8B88((_QWORD *)(a1 + 8), (uint64_t)&__dst) != 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!v13 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v10;
  operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_20E8F7C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20E8F7CF0(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t sub_20E8F7E44(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 0x78)
    return 112;
  else
    return dword_2102DC3B0[v1];
}

uint64_t sub_20E8F7E68(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 0x6F)
    return 0xFFFFFFFFLL;
  else
    return dword_2102DC594[v1];
}

uint64_t CV3DSLAMCameraVideoModeWidth(unsigned int a1)
{
  if (a1 > 0xC)
    return 0;
  else
    return dword_2102DC754[a1];
}

uint64_t CV3DSLAMCameraVideoModeHeight(unsigned int a1)
{
  if (a1 > 0xC)
    return 0;
  else
    return dword_2102DC788[a1];
}

const char *CV3DSLAMCameraVideoModeGetDescription(unsigned int a1)
{
  if (a1 > 0xC)
    return "Unknown";
  else
    return off_24C9B00E8[a1];
}

uint64_t CV3DSLAMCameraVideoModeIsSuperWide(unsigned int a1)
{
  return (a1 < 0xD) & (0xF60u >> a1);
}

uint64_t CV3DSLAMCameraVideoModeIsWide(unsigned int a1)
{
  return (a1 < 0xD) & (0x109Fu >> a1);
}

_QWORD *CV3DSLAMCameraFrameCreate(unsigned int a1, unsigned int a2, std::__shared_weak_count_vtbl *cf, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, CFTypeRef *a8, double a9)
{
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v29[2];
  std::__shared_weak_count *v30;
  unint64_t v31;

  v31 = __PAIR64__(a2, a1);
  if (a1 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a2 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_21015D058(v29, cf, 1, 0);
  if ((sub_20EAAAB28((uint64_t)&v31, (uint64_t)v29, a8, a9) & 1) != 0)
  {
    v17 = operator new(0x120uLL, MEMORY[0x24BEDB6B8]);
    v18 = v17;
    if (v17)
    {
      v17[1] = v31;
      v19 = operator new(0x30uLL);
      v19[1] = 0;
      v19[2] = 0;
      *v19 = &off_24CA18420;
      v19[3] = &off_24CA1A9A0;
      v20 = v30;
      v19[4] = v29[1];
      v19[5] = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      *((_BYTE *)v18 + 120) = 0;
      v18[2] = v19 + 3;
      v18[3] = v19;
      *((double *)v18 + 4) = a9;
      *((_BYTE *)v18 + 40) = 0;
      *((_BYTE *)v18 + 48) = 0;
      *((_BYTE *)v18 + 56) = 0;
      *((_BYTE *)v18 + 64) = 0;
      *((_BYTE *)v18 + 72) = 0;
      *((_BYTE *)v18 + 80) = 0;
      *((_BYTE *)v18 + 88) = 0;
      *((_BYTE *)v18 + 96) = 0;
      *((_BYTE *)v18 + 192) = 0;
      *((_BYTE *)v18 + 200) = 0;
      *((_BYTE *)v18 + 208) = 0;
      *((_BYTE *)v18 + 216) = 0;
      *((_BYTE *)v18 + 224) = 0;
      v18[13] = 0;
      v18[14] = 0;
      *((_BYTE *)v18 + 232) = 0;
      *((_BYTE *)v18 + 240) = 0;
      *((_BYTE *)v18 + 248) = 0;
      *((_BYTE *)v18 + 256) = 0;
      *((_BYTE *)v18 + 264) = 0;
      *((_BYTE *)v18 + 272) = 0;
      if (a4)
      {
        v18[5] = *a4;
        *((_BYTE *)v18 + 48) = 1;
      }
      if (a5)
      {
        v18[7] = *a5;
        *((_BYTE *)v18 + 64) = 1;
      }
      if (a6)
      {
        v18[9] = *a6;
        *((_BYTE *)v18 + 80) = 1;
      }
      if (a7)
      {
        v23 = *(_OWORD *)(a7 + 48);
        *(_OWORD *)(v18 + 19) = *(_OWORD *)(a7 + 32);
        *(_OWORD *)(v18 + 21) = v23;
        v18[23] = *(_QWORD *)(a7 + 64);
        v24 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)(v18 + 15) = *(_OWORD *)a7;
        *(_OWORD *)(v18 + 17) = v24;
        *((_BYTE *)v18 + 192) = 1;
      }
      *((_DWORD *)v18 + 70) = 1;
      *v18 = &off_24C9C3668;
    }
  }
  else
  {
    v18 = 0;
  }
  v29[0] = &off_24CA1A9A0;
  v25 = v30;
  if (v30)
  {
    v26 = (unint64_t *)&v30->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v18;
}

void sub_20E8F81D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21015D41C(&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCameraFrameAddHWFP(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t result;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    sub_21015D058(&__p, a2, 1, 0);
    result = sub_20EAAB344(a1 + 8, (uint64_t)&__p, a3);
    v6 = result;
    __p = &off_24CA1A9A0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        return v6;
      }
    }
  }
  else
  {
    __p = operator new(0x38uLL);
    v16 = xmmword_2102DC7C0;
    strcpy((char *)__p, "The camera frame cannot be NULL when adding hwfp.");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMCameraFrame.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_20E8F83EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCameraFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 280);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DSLAMIsFatalError(unsigned int a1, CFTypeRef *a2)
{
  char *v5;
  const std::error_category *v6;
  std::string::size_type v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  char v12;
  std::error_condition v13;
  int v14;
  std::string v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string *v19;
  std::string **v20;

  if (a1 - 1 < 0x20)
    return a1 == 6;
  v14 = 0;
  sub_20E8F8738(&v13, "Expected a valid error code, got ");
  std::to_string(&v15, a1);
  v16 = (std::string *)&v13;
  *(_QWORD *)&v17 = &v15;
  *((_QWORD *)&v17 + 1) = &v13;
  v18 = &v15;
  v19 = &v15;
  if (v14 == -1)
    sub_20E877AB8();
  v20 = &v16;
  ((void (*)(std::string ***, std::error_condition *))off_24C9B0168[v14])(&v20, &v13);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v14 == -1)
    sub_20E877AB8();
  v16 = &v15;
  ((void (*)(void **__return_ptr, std::string **, std::error_condition *))off_24C9B0180[v14])(__p, &v16, &v13);
  if (v14 != -1)
    ((void (*)(std::string **, std::error_condition *))off_24C9B0150[v14])(&v16, &v13);
  v5 = (char *)operator new(0x78uLL);
  v16 = (std::string *)v5;
  v17 = xmmword_2102DC7D0;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMError.cpp");
  if (!a2)
    goto LABEL_20;
  v6 = std::generic_category();
  *(_QWORD *)&v13.__val_ = 22;
  v13.__cat_ = v6;
  sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&v15);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v7 = v15.__r_.__value_.__r.__words[0];
  if (v15.__r_.__value_.__r.__words[0])
    CFRetain(v15.__r_.__value_.__l.__data_);
  *a2 = (CFTypeRef)v7;
  size = (std::__shared_weak_count *)v15.__r_.__value_.__l.__size_;
  if (v15.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(v15.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if ((SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  if (SHIBYTE(v17) < 0)
  {
LABEL_19:
    v5 = (char *)v16;
LABEL_20:
    operator delete(v5);
  }
LABEL_21:
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8F86B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;

  operator delete(v19);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8F86F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8F8714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20E8F8704);
}

_DWORD *sub_20E8F8738(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B0150[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_QWORD *CV3DSLAMLocationCreate()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  _QWORD *result;
  _QWORD *v3;
  unint64_t v4;

  v0 = (std::__shared_weak_count *)operator new(0x70uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B01A8;
  v0[1].std::__shared_count = 0u;
  *(_OWORD *)&v0[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v0[2].__shared_owners_ = 0u;
  v0[3].std::__shared_count = 0u;
  *(_OWORD *)&v0[3].__shared_weak_owners_ = 0u;
  v0[4].__shared_owners_ = 0;
  v0[1].__shared_weak_owners_ = 1;
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v3 = result;
  if (result)
  {
    result[1] = v0 + 1;
    result[2] = v0;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24C9C3858;
  }
  else
  {
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
      return v3;
    }
  }
  return result;
}

uint64_t CV3DSLAMLocationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DSLAMLocationSetSessionCount(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  char __p[17];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamLocation.cpp", 39, (uint64_t)"location_info", 13, (uint64_t)"LocationInfo is NULL.", 21, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v5 = *(_QWORD *)(a1 + 8);
    }
    *(_QWORD *)(v5 + 16) = a2;
  }
  else
  {
    v15 = 16;
    strcpy(__p, "Location is NULL");
    v7 = (char *)operator new(0x78uLL);
    v13 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMLocation.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v7 = v13;
    }
    operator delete(v7);
    if (v15 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_20E8F8ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMLocationSetLocation(uint64_t a1, _QWORD *a2, _DWORD *a3, CFTypeRef *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  CFTypeRef v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v33;
  char *v34;
  char __p[17];
  char v36;
  CFTypeRef cf;
  std::__shared_weak_count *v38;
  std::error_condition v39;

  if (a1)
  {
    if (a2)
    {
      v17 = *a2 & 0xFFFFFFFFFFFFFF00;
      v18 = *a2;
      v19 = 1;
      if (a3)
        goto LABEL_4;
    }
    else
    {
      v18 = 0;
      v17 = 0;
      v19 = 0;
      if (a3)
      {
LABEL_4:
        v20 = *a3 & 0xFFFFFF00;
        v21 = *a3;
        v22 = 0x100000000;
        v23 = *(_QWORD *)(a1 + 8);
        if (v23)
          goto LABEL_5;
        goto LABEL_24;
      }
    }
    v22 = 0;
    v21 = 0;
    v20 = 0;
    v23 = *(_QWORD *)(a1 + 8);
    if (v23)
    {
LABEL_5:
      *(_QWORD *)v23 = v17 | v18;
      *(_BYTE *)(v23 + 8) = v19;
      v24 = *(_QWORD *)(a1 + 8);
      if (v24)
        goto LABEL_6;
      goto LABEL_26;
    }
LABEL_24:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamLocation.cpp", 34, (uint64_t)"location_info", 13, (uint64_t)"LocationInfo is NULL.", 21, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_29;
    }
    v33 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v33 = v17 | v18;
    *(_BYTE *)(v33 + 8) = v19;
    v24 = *(_QWORD *)(a1 + 8);
    if (v24)
    {
LABEL_6:
      v25 = v22 | v20 | v21;
      if (*(_BYTE *)(v24 + 80))
      {
LABEL_7:
        *(double *)(v24 + 24) = a5;
        *(double *)(v24 + 32) = a6;
        *(double *)(v24 + 40) = a7;
        *(double *)(v24 + 48) = a8;
        *(double *)(v24 + 56) = a9;
        *(double *)(v24 + 64) = a10;
        *(_DWORD *)(v24 + 72) = v25;
        *(_BYTE *)(v24 + 76) = BYTE4(v25);
        return a1 != 0;
      }
LABEL_28:
      *(_BYTE *)(v24 + 72) = 0;
      *(_OWORD *)(v24 + 56) = 0u;
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 24) = 0u;
      *(_BYTE *)(v24 + 76) = 0;
      *(_BYTE *)(v24 + 80) = 1;
      v24 = *(_QWORD *)(a1 + 8);
      goto LABEL_7;
    }
LABEL_26:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/src/SlamLocation.cpp", 46, (uint64_t)"location_info", 13, (uint64_t)"LocationInfo is NULL.", 21, (void (*)(void **))sub_21023DDB0))
    {
      v24 = *(_QWORD *)(a1 + 8);
      v25 = v22 | v20 | v21;
      if (*(_BYTE *)(v24 + 80))
        goto LABEL_7;
      goto LABEL_28;
    }
LABEL_29:
    abort();
  }
  v36 = 16;
  strcpy(__p, "Location is NULL");
  v27 = (char *)operator new(0x78uLL);
  v34 = v27;
  strcpy(v27, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMLocation.cpp");
  if (a4)
  {
    *(_QWORD *)&v39.__val_ = 22;
    v39.__cat_ = std::generic_category();
    sub_20EA67538(&v39, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v28 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v28;
    v29 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v27 = v34;
  }
  operator delete(v27);
  if (v36 < 0)
    operator delete(*(void **)__p);
  return a1 != 0;
}

void sub_20E8F8DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMLocationRequestGetRequestID(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  BOOL v3;
  uint64_t v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    *a2 = *(_QWORD *)(a1 + 8);
    return v4;
  }
  __p = operator new(0x20uLL);
  v13 = xmmword_2102DBFB0;
  strcpy((char *)__p, "Location request is NULL");
  v7 = (char *)operator new(0x78uLL);
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMLocation.cpp");
  if (a3)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_20EA67538(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  operator delete(v7);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
    return v4;
  operator delete(__p);
  return v4;
}

void sub_20E8F8FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMLocationRequestGetSessionCount(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2)
    {
      *a2 = *(_QWORD *)(a1 + 16);
      return 1;
    }
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Session count is NULL");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMLocation.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFB0;
    strcpy((char *)__p[0], "Location request is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMLocation.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E8F92E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8F9330(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B01A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E8F9340(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B01A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

CFTypeRef CV3DSLAMCreatePointsFromMap(CFTypeRef cf, CFTypeRef *a2)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  CFTypeRef v15;
  void *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const __CFData *v25;
  std::__shared_weak_count *v26;
  CFTypeRef cfa;
  __int128 v28;
  void *__p;
  __int128 v30;
  CFTypeRef v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;

  if (!cf)
  {
    __p = operator new(0x30uLL);
    v30 = xmmword_2102DC8D0;
    strcpy((char *)__p, "Can not create 3d points from a NULL map");
    v16 = operator new(0x80uLL);
    cfa = v16;
    v28 = xmmword_2102DBF80;
    strcpy((char *)v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
    if (a2)
    {
      *(_QWORD *)&v33.__val_ = 22;
      v33.__cat_ = std::generic_category();
      sub_20EA67538(&v33, (uint64_t)&__p, (CFErrorRef *)&v31);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v17 = v31;
      if (v31)
        CFRetain(v31);
      *a2 = v17;
      v18 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if ((SHIBYTE(v28) & 0x80000000) == 0)
        goto LABEL_35;
      v16 = (void *)cfa;
    }
    operator delete(v16);
LABEL_35:
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
    return 0;
  }
  sub_20E8E2770(&__p, cf);
  v25 = (const __CFData *)__p;
  v26 = (std::__shared_weak_count *)v30;
  if ((_QWORD)v30)
  {
    v3 = (unint64_t *)(v30 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    v5 = (std::__shared_weak_count *)v30;
    if ((_QWORD)v30)
    {
      v6 = (unint64_t *)(v30 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  sub_20E9738E8(&v25, a2, &cfa);
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (cfa)
        goto LABEL_15;
LABEL_40:
      v15 = 0;
      goto LABEL_41;
    }
  }
  if (!cfa)
    goto LABEL_40;
LABEL_15:
  v11 = (std::__shared_weak_count *)v28;
  if ((_QWORD)v28)
  {
    v12 = (unint64_t *)(v28 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v15 = cfa;
      if (!cfa)
        goto LABEL_41;
      goto LABEL_21;
    }
  }
  v15 = cfa;
  if (cfa)
LABEL_21:
    CFRetain(v15);
LABEL_41:
  v22 = (std::__shared_weak_count *)v28;
  if (!(_QWORD)v28)
    return v15;
  v23 = (unint64_t *)(v28 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
    return v15;
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  return v15;
}

void sub_20E8F9654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMCreateKeyframesFromMap(const __CFData *a1, _QWORD *a2, uint64_t *a3, CFTypeRef *a4)
{
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  _BOOL8 v12;
  char *v13;
  uint64_t v14;
  const std::nothrow_t *v15;
  int32x4_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const float *v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  const float *v37;
  unsigned __int128 v38;
  unsigned __int128 v39;
  int8x16_t v40;
  int8x16_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int8x16_t v44;
  int64x2_t v45;
  uint64_t v46;
  size_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 *v54;
  __int128 *v55;
  BOOL v56;
  char *v57;
  CFTypeRef v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  const std::error_category *v63;
  CFTypeRef v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  int8x16_t v75;
  CFTypeRef cf;
  __int128 v77;
  void *__p;
  __int128 v79;
  char *v80;
  __int128 v81;
  CFTypeRef v82;
  std::__shared_weak_count *v83;
  std::error_condition v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char v92;

  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    sub_20E8E8A78((uint64_t *)&v80);
    v85 = (char *)&v86;
    v86 = 0uLL;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0;
    v92 = 3;
    v8 = sub_20E9DA7E0(a1, (uint64_t)&v85);
    if (v8 <= 1)
      sub_20FCD9BAC(&v85, (uint64_t *)&v80);
    sub_20E8FB5B8((uint64_t)&v85);
    if ((sub_20E8F9E24(v8, a4) & 1) == 0)
    {
      v12 = 0;
LABEL_76:
      sub_20E8E95B0((uint64_t *)&v80);
      return v12;
    }
    v86 = 0uLL;
    v85 = (char *)&v86;
    v87 = 0u;
    v88 = 0u;
    LODWORD(v89) = 1065353216;
    sub_20EDB9F70((uint64_t)&v85, &v80);
    v9 = *((_QWORD *)&v86 + 1);
    *a2 = *((_QWORD *)&v86 + 1);
    if (is_mul_ok(v9, 0xB8uLL))
      v10 = 184 * v9;
    else
      v10 = -1;
    v11 = operator new[](v10, MEMORY[0x24BEDB6B8]);
    *a3 = (uint64_t)v11;
    v12 = v11 != 0;
    if (v11)
    {
      v13 = v85;
      if (v85 != (char *)&v86)
      {
        v14 = 0;
        v15 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
        v16.i64[0] = -1;
        v16.i64[1] = -1;
        v17 = (int8x16_t)vdupq_n_s64(1uLL);
        v75 = v17;
        do
        {
          v18 = *a3 + 184 * v14;
          v19 = *((_QWORD *)v13 + 5);
          *(_QWORD *)v18 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 16);
          *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 24);
          *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 40);
          *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 48);
          *(_QWORD *)(v18 + 40) = *(_QWORD *)(v19 + 56);
          *(_QWORD *)(v18 + 48) = *(_QWORD *)(v19 + 72);
          *(_QWORD *)(v18 + 56) = *(_QWORD *)(v19 + 80);
          *(_QWORD *)(v18 + 64) = *(_QWORD *)(v19 + 88);
          *(_QWORD *)(v18 + 72) = *(_QWORD *)(v19 + 32);
          *(_QWORD *)(v18 + 80) = *(_QWORD *)(v19 + 64);
          *(_QWORD *)(v18 + 88) = *(_QWORD *)(v19 + 96);
          *(_OWORD *)(v18 + 96) = *(_OWORD *)(v19 + 104);
          v20 = *(_OWORD *)(v19 + 120);
          v21 = *(_OWORD *)(v19 + 136);
          v22 = *(_OWORD *)(v19 + 152);
          *(_QWORD *)(v18 + 160) = *(_QWORD *)(v19 + 168);
          *(_OWORD *)(v18 + 128) = v21;
          *(_OWORD *)(v18 + 144) = v22;
          *(_OWORD *)(v18 + 112) = v20;
          *(_QWORD *)(*a3 + 184 * v14 + 176) = 0;
          v23 = *((_QWORD *)v13 + 5);
          v25 = *(_QWORD *)(v23 + 176);
          v24 = *(_QWORD *)(v23 + 184);
          if (v25 == v24)
          {
            *(_QWORD *)(*a3 + 184 * v14 + 168) = 0;
          }
          else
          {
            v26 = v24 - v25 - 12;
            if (v26 >= 0x60)
            {
              v29 = v26 / 0xC + 1;
              v30 = v29 & 7;
              if ((v29 & 7) == 0)
                v30 = 8;
              v31 = v29 - v30;
              v28 = v25 + 12 * v31;
              v32 = (const float *)(v25 + 56);
              v33 = 0uLL;
              v34 = 0uLL;
              v35 = 0uLL;
              v36 = 0uLL;
              do
              {
                v37 = v32 - 12;
                v38 = (unsigned __int128)vld3q_f32(v37);
                v39 = (unsigned __int128)vld3q_f32(v32);
                v40 = vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v38, v16));
                v41.i64[0] = v40.u32[0];
                v41.i64[1] = v40.u32[1];
                v42 = (int64x2_t)vandq_s8(v41, v17);
                v41.i64[0] = v40.u32[2];
                v41.i64[1] = v40.u32[3];
                v43 = (int64x2_t)vandq_s8(v41, v17);
                v44 = vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v39, v16));
                v41.i64[0] = v44.u32[0];
                v41.i64[1] = v44.u32[1];
                v45 = (int64x2_t)vandq_s8(v41, v17);
                v41.i64[0] = v44.u32[2];
                v41.i64[1] = v44.u32[3];
                v34 = vaddq_s64(v34, v43);
                v33 = vaddq_s64(v33, v42);
                v36 = vaddq_s64(v36, (int64x2_t)vandq_s8(v41, v17));
                v35 = vaddq_s64(v35, v45);
                v32 += 24;
                v31 -= 8;
              }
              while (v31);
              v27 = vaddvq_s64(vaddq_s64(vaddq_s64(v35, v33), vaddq_s64(v36, v34)));
            }
            else
            {
              v27 = 0;
              v28 = v25;
            }
            do
            {
              if (*(_DWORD *)(v28 + 8) != -1)
                ++v27;
              v28 += 12;
            }
            while (v28 != v24);
            v46 = *a3;
            *(_QWORD *)(*a3 + 184 * v14 + 168) = v27;
            if (v27)
            {
              v47 = v27 >> 62 ? -1 : 4 * v27;
              v48 = operator new[](v47, v15);
              v17 = v75;
              v16.i64[0] = -1;
              v16.i64[1] = -1;
              *(_QWORD *)(v46 + 184 * v14 + 176) = v48;
              v49 = *((_QWORD *)v13 + 5);
              v50 = *(_QWORD *)(v49 + 176);
              v51 = *(_QWORD *)(v49 + 184);
              if (v50 != v51)
              {
                v52 = 0;
                do
                {
                  v53 = *(_DWORD *)(v50 + 8);
                  if (v53 != -1)
                    *(_DWORD *)(*(_QWORD *)(*a3 + 184 * v14 + 176) + 4 * v52++) = v53;
                  v50 += 12;
                }
                while (v50 != v51);
              }
            }
          }
          v54 = (__int128 *)*((_QWORD *)v13 + 1);
          if (v54)
          {
            do
            {
              v55 = v54;
              v54 = *(__int128 **)v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              v55 = (__int128 *)*((_QWORD *)v13 + 2);
              v56 = *(_QWORD *)v55 == (_QWORD)v13;
              v13 = (char *)v55;
            }
            while (!v56);
          }
          ++v14;
          v13 = (char *)v55;
        }
        while (v55 != &v86);
      }
LABEL_72:
      v68 = (_QWORD *)v88;
      while (v68)
      {
        v71 = v68;
        v68 = (_QWORD *)*v68;
        v72 = (std::__shared_weak_count *)v71[4];
        if (v72)
        {
          p_shared_owners = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldaxr(p_shared_owners);
          while (__stlxr(v74 - 1, p_shared_owners));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        operator delete(v71);
      }
      v69 = (void *)v87;
      *(_QWORD *)&v87 = 0;
      if (v69)
        operator delete(v69);
      sub_20E8D03C0((uint64_t)&v85, (_QWORD *)v86);
      goto LABEL_76;
    }
    __p = operator new(0x30uLL);
    v79 = xmmword_2102DC8E0;
    strcpy((char *)__p, "Unable to allocate memory for the keyframes");
    v62 = operator new(0x80uLL);
    cf = v62;
    v77 = xmmword_2102DBF80;
    strcpy((char *)v62, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
    if (a4)
    {
      v63 = std::generic_category();
      *(_QWORD *)&v84.__val_ = 12;
      v84.__cat_ = v63;
      sub_20EA67538(&v84, (uint64_t)&__p, (CFErrorRef *)&v82);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v64 = v82;
      if (v82)
        CFRetain(v82);
      *a4 = v64;
      v65 = v83;
      if (v83)
      {
        v66 = (unint64_t *)&v83->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      if ((SHIBYTE(v77) & 0x80000000) == 0)
        goto LABEL_70;
      v62 = (void *)cf;
    }
    operator delete(v62);
LABEL_70:
    if (SHIBYTE(v79) < 0)
      operator delete(__p);
    goto LABEL_72;
  }
  v85 = (char *)operator new(0x28uLL);
  v86 = xmmword_2102DC8F0;
  strcpy(v85, "Input arguments can not be nullptr");
  v57 = (char *)operator new(0x80uLL);
  v80 = v57;
  v81 = xmmword_2102DBF80;
  strcpy(v57, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
  if (!a4)
    goto LABEL_52;
  __p = (void *)22;
  *(_QWORD *)&v79 = std::generic_category();
  sub_20EA67538((const std::error_condition *)&__p, (uint64_t)&v85, (CFErrorRef *)&cf);
  if (*a4)
    CFRelease(*a4);
  *a4 = 0;
  v58 = cf;
  if (cf)
    CFRetain(cf);
  *a4 = v58;
  v59 = (std::__shared_weak_count *)v77;
  if ((_QWORD)v77)
  {
    v60 = (unint64_t *)(v77 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_51;
    }
  }
  if (SHIBYTE(v81) < 0)
  {
LABEL_51:
    v57 = v80;
LABEL_52:
    operator delete(v57);
  }
LABEL_53:
  if (SHIBYTE(v86) < 0)
    operator delete(v85);
  return 0;
}

void sub_20E8F9D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  uint64_t v35;

  operator delete(v34);
  if (a20 < 0)
    operator delete(__p);
  sub_20E8FA108(v35 - 192);
  sub_20E8E95B0(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8F9E24(unsigned int a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  unint64_t *v11;
  char *v12;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1 < 2)
    return 1;
  if (a1 == 2)
  {
    __p = operator new(0x38uLL);
    v14 = xmmword_2102DC7C0;
    strcpy((char *)__p, "Error deserializing map, SerializationLoadFailure");
    v4 = (char *)operator new(0x80uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v16;
      if (!v16)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      goto LABEL_22;
    }
  }
  else
  {
    __p = operator new(0x19uLL);
    v14 = xmmword_2102DAFD0;
    strcpy((char *)__p, "Error deserializing map");
    v9 = (char *)operator new(0x80uLL);
    v4 = v9;
    v12 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v6 = v16;
      if (!v16)
        goto LABEL_26;
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v8 = __ldaxr(v11);
      while (__stlxr(v8 - 1, v11));
LABEL_22:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_26:
      v4 = v12;
    }
  }
  operator delete(v4);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E8FA0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8FA108(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 40);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    operator delete(v3);
  sub_20E8D03C0(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t CV3DSLAMKeyframeWithPointsRelease(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = result;
    if (result)
    {
      v3 = (_QWORD *)(a2 + 176);
      do
      {
        if (*v3)
          MEMORY[0x212BC6368](*v3, 0x1000C8052888210);
        v3 += 23;
        --v2;
      }
      while (v2);
    }
    JUMPOUT(0x212BC6368);
  }
  return result;
}

void CV3DSLAMGetMapBounds(const __CFData *a1@<X0>, CFTypeRef *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v11;
  void *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  unint64_t *v19;
  unsigned int v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  unsigned __int128 *v35;
  uint64_t v36;
  unint64_t v37;
  const double *v38;
  const double *v39;
  unsigned __int128 v40;
  unsigned __int128 v41;
  void *v42;
  const std::error_category *v43;
  CFErrorRef v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  double *v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  double *v61;
  double *v62;
  double *v63;
  double *v64;
  double *v65;
  CFTypeRef cf;
  __int128 v67;
  std::error_condition v68[2];
  void *__p;
  _OWORD v70[5];
  uint64_t v71;
  char v72;
  void *v73;
  __int128 v74;
  CFErrorRef v75;
  std::__shared_weak_count *v76;
  std::error_condition v77;

  if (a1)
  {
    v11 = a4;
    if (a4 < 0.0 || a4 >= 0.5)
    {
      __p = operator new(0x30uLL);
      v70[0] = xmmword_2102DC900;
      strcpy((char *)__p, "ignoreOutliersQuantile must be >= 0 and < .5");
      v13 = operator new(0x80uLL);
      v73 = v13;
      v74 = xmmword_2102DBF80;
      strcpy((char *)v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
      if (a2)
      {
        *(_QWORD *)&v68[0].__val_ = 22;
        v68[0].__cat_ = std::generic_category();
        sub_20EA67538(v68, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v14;
        v15 = (std::__shared_weak_count *)v67;
        if (!(_QWORD)v67)
          goto LABEL_24;
        v16 = (unint64_t *)(v67 + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        goto LABEL_23;
      }
LABEL_26:
      operator delete(v13);
      goto LABEL_27;
    }
    memset(v70, 0, sizeof(v70));
    __p = v70;
    v71 = 0;
    v72 = 3;
    v20 = sub_20E9DA7E0(a1, (uint64_t)&__p);
    if ((sub_20E8F9E24(v20, a2) & 1) == 0)
    {
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      goto LABEL_93;
    }
    sub_20E9DDD4C((uint64_t)&__p, &v73);
    v21 = (double *)v73;
    if (v73 != (void *)v74)
    {
      v22 = ((_QWORD)v74 - (_QWORD)v73) / 24;
      v23 = (((int)v74 - (int)v73) / 24);
      v24 = 8 * v23 + 31;
      v25 = (double)(v22 - 1);
      v26 = (unint64_t)(v25 * v11);
      v27 = v24 & 0xFFFFFFFE0;
      v28 = (unint64_t)((1.0 - v11) * v25);
      if ((_DWORD)v22)
      {
        v29 = (double *)operator new(v24 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v30 = v29;
        if (v23 > 0xA && (v29 < &v21[3 * v23 - 2] ? (v31 = v21 >= &v29[v23]) : (v31 = 1), v31))
        {
          v32 = v22 & 3;
          if ((v22 & 3) == 0)
            v32 = 4;
          v33 = v23 - v32;
          v34 = &v29[v23 - v32];
          v35 = (unsigned __int128 *)(v29 + 2);
          v36 = 6;
          v37 = v33;
          do
          {
            v38 = &v21[((_DWORD)v36 - 6) & 0xFFFFFFFC];
            v39 = &v21[v36 & 0xFFFFFFFE];
            v40 = (unsigned __int128)vld3q_f64(v38);
            v41 = (unsigned __int128)vld3q_f64(v39);
            *(v35 - 1) = v40;
            *v35 = v41;
            v36 += 12;
            v35 += 2;
            v37 -= 4;
          }
          while (v37);
        }
        else
        {
          v33 = 0;
          v34 = v29;
        }
        v49 = v23 - v33;
        v50 = 3 * v33;
        do
        {
          *v34++ = v21[v50];
          v50 += 3;
          --v49;
        }
        while (v49);
        if (v23 != v26)
          sub_20E8FB210(v29, &v29[v26], &v29[v23]);
        v4 = v30[v26];
        if (v23 != v28)
          sub_20E8FB210(v30, &v30[v28], &v30[v23]);
        v11 = v30[v28];
        MEMORY[0x212BC6368](v30, 0x1000C8000313F17);
        v51 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
        v52 = v51;
        v53 = 0;
        v54 = 1;
        do
        {
          v51[v53++] = v21[v54];
          v54 += 3;
        }
        while (v23 != v53);
        if (v23 != v26)
          sub_20E8FB210(v51, &v51[v26], &v51[v23]);
        v6 = v52[v26];
        if (v23 != v28)
          sub_20E8FB210(v52, &v52[v28], &v52[v23]);
        v5 = v52[v28];
        MEMORY[0x212BC6368](v52, 0x1000C8000313F17);
        v55 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
        v56 = v55;
        v57 = 0;
        v58 = 2;
        do
        {
          v55[v57++] = v21[v58];
          v58 += 3;
        }
        while (v23 != v57);
        if (v23 != v26)
          sub_20E8FB210(v55, &v55[v26], &v55[v23]);
        v7 = v56[v26];
        if (v23 == v28)
          goto LABEL_90;
      }
      else
      {
        if (v23 == v28)
        {
          if (v23 == v26)
          {
            v59 = operator new(v24 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
            MEMORY[0x212BC6368](v59, 0x1000C8000313F17);
            v60 = operator new(v27, (std::align_val_t)0x20uLL);
            MEMORY[0x212BC6368](v60, 0x1000C8000313F17);
            v56 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
            goto LABEL_91;
          }
          v63 = (double *)operator new(v24 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          sub_20E8FB210(v63, &v63[v26], &v63[v23]);
          v4 = v63[v26];
          v11 = v63[v28];
          MEMORY[0x212BC6368](v63, 0x1000C8000313F17);
          v64 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
          sub_20E8FB210(v64, &v64[v26], &v64[v23]);
          v6 = v64[v26];
          v5 = v64[v28];
          MEMORY[0x212BC6368](v64, 0x1000C8000313F17);
          v56 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
          sub_20E8FB210(v56, &v56[v26], &v56[v23]);
          v7 = v56[v26];
LABEL_90:
          v8 = v56[v28];
LABEL_91:
          MEMORY[0x212BC6368](v56, 0x1000C8000313F17);
          *(double *)a3 = v4;
          *(double *)(a3 + 8) = v6;
          *(double *)(a3 + 16) = v7;
          *(double *)(a3 + 24) = v11;
          *(double *)(a3 + 32) = v5;
          *(double *)(a3 + 40) = v8;
          v48 = v73;
          if (v73)
          {
LABEL_92:
            *(_QWORD *)&v74 = v48;
            operator delete(v48);
          }
LABEL_93:
          sub_20E8FB5B8((uint64_t)&__p);
          return;
        }
        v61 = (double *)operator new(v24 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        if (v23 == v26)
        {
          sub_20E8FB210(v61, &v61[v28], &v61[v23]);
          v11 = v61[v28];
          MEMORY[0x212BC6368](v61, 0x1000C8000313F17);
          v62 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
          sub_20E8FB210(v62, &v62[v28], &v62[v23]);
          v5 = v62[v28];
          MEMORY[0x212BC6368](v62, 0x1000C8000313F17);
          v56 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
        }
        else
        {
          sub_20E8FB210(v61, &v61[v26], &v61[v23]);
          v4 = v61[v26];
          sub_20E8FB210(v61, &v61[v28], &v61[v23]);
          v11 = v61[v28];
          MEMORY[0x212BC6368](v61, 0x1000C8000313F17);
          v65 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
          sub_20E8FB210(v65, &v65[v26], &v65[v23]);
          v6 = v65[v26];
          sub_20E8FB210(v65, &v65[v28], &v65[v23]);
          v5 = v65[v28];
          MEMORY[0x212BC6368](v65, 0x1000C8000313F17);
          v56 = (double *)operator new(v27, (std::align_val_t)0x20uLL);
          sub_20E8FB210(v56, &v56[v26], &v56[v23]);
          v7 = v56[v26];
        }
      }
      sub_20E8FB210(v56, &v56[v28], &v56[v23]);
      goto LABEL_90;
    }
    strcpy((char *)v68, "Map contains no points");
    *((_BYTE *)&v68[1].__val_ + 7) = 22;
    v42 = operator new(0x80uLL);
    cf = v42;
    v67 = xmmword_2102DBF80;
    strcpy((char *)v42, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
    if (a2)
    {
      v43 = std::generic_category();
      *(_QWORD *)&v77.__val_ = 22;
      v77.__cat_ = v43;
      sub_20EA67538(&v77, (uint64_t)v68, &v75);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v44 = v75;
      if (v75)
        CFRetain(v75);
      *a2 = v44;
      v45 = v76;
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if ((SHIBYTE(v67) & 0x80000000) == 0)
      {
LABEL_60:
        if (*((char *)&v68[1].__val_ + 7) < 0)
          operator delete(*(void **)&v68[0].__val_);
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        v48 = v73;
        if (!v73)
          goto LABEL_93;
        goto LABEL_92;
      }
      v42 = (void *)cf;
    }
    operator delete(v42);
    goto LABEL_60;
  }
  __p = operator new(0x28uLL);
  v70[0] = xmmword_2102DC910;
  strcpy((char *)__p, "Cannot get the bounds from a null map");
  v13 = operator new(0x80uLL);
  v73 = v13;
  v74 = xmmword_2102DBF80;
  strcpy((char *)v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
  if (!a2)
    goto LABEL_26;
  *(_QWORD *)&v68[0].__val_ = 22;
  v68[0].__cat_ = std::generic_category();
  sub_20EA67538(v68, (uint64_t)&__p, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v18 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v18;
  v15 = (std::__shared_weak_count *)v67;
  if (!(_QWORD)v67)
    goto LABEL_24;
  v19 = (unint64_t *)(v67 + 8);
  do
    v17 = __ldaxr(v19);
  while (__stlxr(v17 - 1, v19));
LABEL_23:
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((SHIBYTE(v74) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_24:
  if (SHIBYTE(v74) < 0)
  {
LABEL_25:
    v13 = v73;
    goto LABEL_26;
  }
LABEL_27:
  if (SHIBYTE(v70[0]) < 0)
    operator delete(__p);
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
}

void sub_20E8FABAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20E8FB5B8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMExtractObjectMap(const __CFData *a1, uint64_t a2, float64x2_t *a3, uint64_t a4, CFTypeRef *a5)
{
  unsigned int v9;
  unint64_t v10;
  void *v11;
  const std::error_category *v12;
  CFErrorRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *Mutable;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  CFTypeRef cf;
  __int128 v30;
  char __p[20];
  char v32;
  char *v33;
  __int128 v34;
  void *v35;
  _OWORD v36[5];
  uint64_t v37;
  char v38;
  CFErrorRef v39;
  std::__shared_weak_count *v40;
  std::error_condition v41;

  if (a1)
  {
    v35 = v36;
    memset(v36, 0, sizeof(v36));
    v37 = 0;
    v38 = 3;
    v9 = sub_20E9DA7E0(a1, (uint64_t)&v35);
    if ((sub_20E8F9E24(v9, a5) & 1) == 0)
    {
      v17 = 0;
LABEL_49:
      sub_20E8FB5B8((uint64_t)&v35);
      return v17;
    }
    sub_20E9DABD8((int64x2_t **)&v35, a4, (uint64_t *)(a4 + 24), a2, a3, 0, (uint64_t)&v33);
    sub_20E9DDD4C((uint64_t)&v33, __p);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if (v10 > 7)
    {
      Mutable = (std::__shared_weak_count_vtbl *)CFDataCreateMutable(0, 0);
      sub_20EA5F1A4((std::__shared_weak_count_vtbl **)__p, Mutable, 0);
      v24 = sub_20E9DAA74(*(__CFData **)__p, (uint64_t)&v33);
      if ((sub_20E8F9E24(v24, a5) & 1) != 0)
      {
        v17 = *(_QWORD *)__p;
        if (*(_QWORD *)__p)
          CFRetain(*(CFTypeRef *)__p);
      }
      else
      {
        v17 = 0;
      }
      v25 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v26 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      goto LABEL_48;
    }
    v32 = 19;
    strcpy(__p, "Not enough features");
    v11 = operator new(0x80uLL);
    cf = v11;
    v30 = xmmword_2102DBF80;
    strcpy((char *)v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
    if (a5)
    {
      v12 = std::generic_category();
      *(_QWORD *)&v41.__val_ = 22;
      v41.__cat_ = v12;
      sub_20EA67538(&v41, (uint64_t)__p, &v39);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v13 = v39;
      if (v39)
        CFRetain(v39);
      *a5 = v13;
      v14 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_19;
      v11 = (void *)cf;
    }
    operator delete(v11);
LABEL_19:
    if (v32 < 0)
      operator delete(*(void **)__p);
    v17 = 0;
LABEL_48:
    sub_20E8FB5B8((uint64_t)&v33);
    goto LABEL_49;
  }
  v35 = operator new(0x30uLL);
  v36[0] = xmmword_2102DBF00;
  strcpy((char *)v35, "Can not extract the object map from a null map");
  v18 = (char *)operator new(0x80uLL);
  v33 = v18;
  v34 = xmmword_2102DBF80;
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMMapEditInterface.cpp");
  if (a5)
  {
    *(_QWORD *)__p = 22;
    *(_QWORD *)&__p[8] = std::generic_category();
    sub_20EA67538((const std::error_condition *)__p, (uint64_t)&v35, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v19;
    v20 = (std::__shared_weak_count *)v30;
    if ((_QWORD)v30)
    {
      v21 = (unint64_t *)(v30 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_35;
    v18 = v33;
  }
  operator delete(v18);
LABEL_35:
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35);
  return 0;
}

void sub_20E8FB078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  operator delete(v38);
  if (a18 < 0)
    operator delete(__p);
  sub_20E8FB5B8((uint64_t)&a20);
  sub_20E8FB5B8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20E8FB128(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 168)
  {
    v5 = *(void **)(i - 24);
    if (v5)
    {
      *(_QWORD *)(i - 16) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 48);
    if (v6)
    {
      *(_QWORD *)(i - 40) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(i - 80);
    if (v7)
    {
      *(_QWORD *)(i - 72) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(i - 112);
    if (v8)
    {
      *(_QWORD *)(i - 104) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(i - 136);
    if (v9)
    {
      *(_QWORD *)(i - 128) = v9;
      operator delete(v9);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20E8FB1C0(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_20E8FB1C0(a1, *a2);
    sub_20E8FB1C0(a1, a2[1]);
    v4 = (void *)a2[18];
    if (v4)
    {
      a2[19] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

double *sub_20E8FB210(double *result, double *a2, double *a3)
{
  unint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 > a2)
        a3 = v18;
      else
        result = v18 + 1;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

uint64_t sub_20E8FB5B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v3 -= 176;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    sub_20E8FB128(a1 + 48, v6);
    operator delete(*(void **)(a1 + 48));
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 24);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 56);
        if (v10)
        {
          *(_QWORD *)(v8 - 48) = v10;
          operator delete(v10);
        }
        v8 -= 800;
      }
      while (v8 != v7);
      v9 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v9);
  }
  sub_20E8FB1C0(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

BOOL CV3DSLAMPersistenceSaveReport(const __CFString *a1, const __CFString *a2, CFTypeRef *a3)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  size_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  void **p_dst;
  void **v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  unint64_t *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex v23;
  CFIndex v24;
  size_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  void *p_cf;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  char *v33;
  const std::error_category *v34;
  CFErrorRef v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v40;
  __int128 v41;
  CFTypeRef cf;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::error_condition v45;
  char *v46;
  void **__dst;
  __int128 v48;
  void *__p[4];
  CFErrorRef v50;
  std::__shared_weak_count *v51;
  std::error_condition v52;

  if (a1)
  {
    if (a2)
    {
      memset(__p, 0, 24);
      Length = CFStringGetLength(a1);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      if (MaximumSizeForEncoding <= -2)
        sub_20E867F44();
      v8 = MaximumSizeForEncoding + 1;
      v9 = (char *)operator new(MaximumSizeForEncoding + 1);
      bzero(v9, v8);
      __p[0] = v9;
      __p[1] = &v9[v8];
      __p[2] = &v9[v8];
      CFStringGetCString(a1, v9, v8, 0x8000100u);
      v10 = strlen(v9);
      if (v10 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v11 = v10;
      if (v10 >= 0x17)
      {
        v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v21 = v10 | 7;
        v22 = v21 + 1;
        p_dst = (void **)operator new(v21 + 1);
        *(_QWORD *)&v48 = v11;
        *((_QWORD *)&v48 + 1) = v22 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v48) = v10;
        p_dst = (void **)&__dst;
        if (!v10)
        {
LABEL_36:
          *((_BYTE *)p_dst + v11) = 0;
          *(_QWORD *)&v45.__val_ = 0;
          v45.__cat_ = 0;
          v46 = 0;
          v23 = CFStringGetLength(a2);
          v24 = CFStringGetMaximumSizeForEncoding(v23, 0x8000100u);
          if (v24 <= -2)
            sub_20E867F44();
          v25 = v24 + 1;
          v26 = (char *)operator new(v24 + 1);
          bzero(v26, v25);
          *(_QWORD *)&v45.__val_ = v26;
          v45.__cat_ = (const std::error_category *)&v26[v25];
          v46 = &v26[v25];
          CFStringGetCString(a2, v26, v25, 0x8000100u);
          v27 = strlen(v26);
          if (v27 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v28 = v27;
          if (v27 >= 0x17)
          {
            v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v30 = v27 | 7;
            v31 = v30 + 1;
            p_cf = operator new(v30 + 1);
            v43 = (std::__shared_weak_count *)v28;
            v44 = v31 | 0x8000000000000000;
            cf = p_cf;
          }
          else
          {
            HIBYTE(v44) = v27;
            p_cf = &cf;
            if (!v27)
              goto LABEL_45;
          }
          memcpy(p_cf, v26, v28);
LABEL_45:
          *((_BYTE *)p_cf + v28) = 0;
          v32 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
          if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
          {
            __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE08);
          }
          v20 = sub_20EB8E6EC((uint64_t)&__dst, (uint64_t)&cf, (uint64_t)&off_254A5A4B8);
          if (v20)
            goto LABEL_58;
          v40 = operator new(0x28uLL);
          v41 = xmmword_2102DBA80;
          strcpy((char *)v40, "Failed to save persistence report");
          v33 = (char *)operator new(0x80uLL);
          strcpy(v33, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMPersistence.cpp");
          if (a3)
          {
            v34 = std::generic_category();
            *(_QWORD *)&v52.__val_ = 22;
            v52.__cat_ = v34;
            sub_20EA67538(&v52, (uint64_t)&v40, &v50);
            if (*a3)
              CFRelease(*a3);
            *a3 = 0;
            v35 = v50;
            if (v50)
              CFRetain(v50);
            *a3 = v35;
            v36 = v51;
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
          }
          operator delete(v33);
          if (SHIBYTE(v41) < 0)
          {
            operator delete(v40);
            if ((SHIBYTE(v44) & 0x80000000) == 0)
              goto LABEL_60;
          }
          else
          {
LABEL_58:
            if ((SHIBYTE(v44) & 0x80000000) == 0)
            {
LABEL_60:
              if (*(_QWORD *)&v45.__val_)
                operator delete(*(void **)&v45.__val_);
              if (SHIBYTE(v48) < 0)
                operator delete(__dst);
              if (__p[0])
                operator delete(__p[0]);
              return v20;
            }
          }
          operator delete((void *)cf);
          goto LABEL_60;
        }
      }
      memcpy(p_dst, v9, v11);
      goto LABEL_36;
    }
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "Output path is NULL");
    v13 = (void **)operator new(0x80uLL);
    __dst = v13;
    v48 = xmmword_2102DC3A0;
    strcpy((char *)v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMPersistence.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v45.__val_ = 22;
    v45.__cat_ = std::generic_category();
    sub_20EA67538(&v45, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v18 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v18;
    v15 = v43;
    if (!v43)
      goto LABEL_26;
    v19 = (unint64_t *)&v43->__shared_owners_;
    do
      v17 = __ldaxr(v19);
    while (__stlxr(v17 - 1, v19));
  }
  else
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFB0;
    strcpy((char *)__p[0], "Persistence path is NULL");
    v13 = (void **)operator new(0x80uLL);
    __dst = v13;
    v48 = xmmword_2102DC3A0;
    strcpy((char *)v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMPersistence.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v13);
      goto LABEL_29;
    }
    *(_QWORD *)&v45.__val_ = 22;
    v45.__cat_ = std::generic_category();
    sub_20EA67538(&v45, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v14 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v14;
    v15 = v43;
    if (!v43)
      goto LABEL_26;
    v16 = (unint64_t *)&v43->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
  }
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v48) < 0)
  {
LABEL_27:
    v13 = __dst;
    goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8FBCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v41;

  operator delete(v39);
  if (a18 < 0)
  {
    operator delete(__p);
    if (a24 < 0)
    {
LABEL_5:
      operator delete(a19);
      v41 = a25;
      if (!a25)
      {
LABEL_9:
        if (a33 < 0)
          operator delete(a28);
        if (a34)
          operator delete(a34);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(v41);
      goto LABEL_9;
    }
  }
  else if (a24 < 0)
  {
    goto LABEL_5;
  }
  v41 = a25;
  if (!a25)
    goto LABEL_9;
  goto LABEL_8;
}

_QWORD *CV3DSLAMSemanticsFrameCreate(std::__shared_weak_count_vtbl *cf, std::__shared_weak_count_vtbl *a2, std::__shared_weak_count_vtbl *a3, __n128 a4, int8x16_t a5, int8x16_t a6, double a7, uint64_t a8, uint64_t a9, CFTypeRef *a10)
{
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  const std::error_category *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  char *v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  const std::error_category *v29;
  const void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  char *v35;
  const void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t *v41;
  unint64_t v42;
  char *v44;
  const void *v45;
  std::__shared_weak_count *cat;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  char *v50;
  const std::error_category *v51;
  const void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  const std::error_category *v57;
  const void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 v68;
  _QWORD *v69;
  _BYTE v73[32];
  unsigned __int32 v74;
  _BYTE __p[36];
  __int128 v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  std::error_condition cfa;
  std::__shared_weak_count *v81;
  std::error_condition v82;
  std::__shared_weak_count *v83;
  std::error_condition v84;
  std::__shared_weak_count *v85;
  double v86;
  const void *v87;
  std::__shared_weak_count *v88;
  std::error_condition v89;

  v86 = a7;
  if (cf)
  {
    v14 = sub_21015D058(&v84, cf, 1, 0);
    if (sub_21015BE44((uint64_t)v14) == 1278226488)
    {
      if (a2)
      {
        v15 = sub_21015D058(&v82, a2, 1, 0);
        if (sub_21015BE44((uint64_t)v15) == 1278226536
          || sub_21015BE44((uint64_t)&v82) == 1278226534)
        {
          if (a3)
          {
            sub_21015D058(&cfa, a3, 1, 0);
            if (sub_21015BE44((uint64_t)&cfa) == 1278226488)
            {
              if (a7 >= 0.0)
              {
                *(_OWORD *)&__p[20] = 0u;
                v76 = 0u;
                v77 = 0;
                *(_OWORD *)&__p[4] = 0u;
                *(_DWORD *)__p = 1065353216;
                *(_DWORD *)&__p[20] = 1065353216;
                DWORD1(v76) = 1065353216;
                v78 = 1065353216;
                v68 = a4;
                v68.n128_u32[3] = a5.i32[0];
                *(__n128 *)v73 = v68;
                *(int8x16_t *)&v73[16] = vextq_s8(vextq_s8(a5, a5, 0xCuLL), a6, 8uLL);
                v74 = a6.u32[2];
                v69 = operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
                v27 = v69;
                if (v69)
                {
                  sub_20E8FD588((uint64_t)v69, (uint64_t)v84.__cat_, v85, (uint64_t)&v82, (uint64_t)&cfa, (__int128 *)v73, (__int128 *)__p, (uint64_t *)&v86);
                  *v27 = &off_24CA18660;
                }
                goto LABEL_132;
              }
              *(_QWORD *)__p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_2102DC970;
              strcpy(*(char **)__p, "Timestamp must be greater than or equal to zero");
              v16 = (char *)operator new(0x80uLL);
              *(_QWORD *)v73 = v16;
              *(_OWORD *)&v73[8] = xmmword_2102DC950;
              strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
              if (a10)
              {
                v17 = std::generic_category();
                *(_QWORD *)&v89.__val_ = 22;
                v89.__cat_ = v17;
                sub_20EA67538(&v89, (uint64_t)__p, (CFErrorRef *)&v87);
                sub_20EA66CF0(&v87, a10);
                v18 = v88;
                if (v88)
                {
                  p_shared_owners = (unint64_t *)&v88->__shared_owners_;
                  do
                    v20 = __ldaxr(p_shared_owners);
                  while (__stlxr(v20 - 1, p_shared_owners));
                  if (!v20)
                  {
                    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                    std::__shared_weak_count::__release_weak(v18);
                  }
                }
                if ((v73[23] & 0x80000000) == 0)
                {
LABEL_18:
                  if ((__p[23] & 0x80000000) != 0)
                  {
                    v21 = *(void **)__p;
LABEL_130:
                    operator delete(v21);
                    goto LABEL_131;
                  }
                  goto LABEL_131;
                }
                v16 = *(char **)v73;
              }
              operator delete(v16);
              goto LABEL_18;
            }
            v79 = sub_21015BE44((uint64_t)&cfa);
            *(_DWORD *)&__p[24] = 0;
            sub_20E8FD498(__p, "Materails must be in the format of kCVPixelFormatType_OneComponent8 but instead are ");
            sub_20E8FD1F4((uint64_t)&v89, (uint64_t)__p, &v79);
            if (*(_DWORD *)&__p[24] == -1)
              sub_20E877AB8();
            *(_QWORD *)&v89.__val_ = &v87;
            ((void (*)(_BYTE *__return_ptr, std::error_condition *, _BYTE *))off_24C9B0218[*(unsigned int *)&__p[24]])(v73, &v89, __p);
            if (*(_DWORD *)&__p[24] != -1)
              ((void (*)(std::error_condition *, _BYTE *))off_24C9B01E8[*(unsigned int *)&__p[24]])(&v89, __p);
            v56 = (char *)operator new(0x80uLL);
            *(_QWORD *)__p = v56;
            *(_OWORD *)&__p[8] = xmmword_2102DC950;
            strcpy(v56, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
            if (a10)
            {
              v57 = std::generic_category();
              *(_QWORD *)&v89.__val_ = 22;
              v89.__cat_ = v57;
              sub_20EA67538(&v89, (uint64_t)v73, (CFErrorRef *)&v87);
              if (*a10)
                CFRelease(*a10);
              *a10 = 0;
              v58 = v87;
              if (v87)
                CFRetain(v87);
              *a10 = v58;
              v59 = v88;
              if (v88)
              {
                v60 = (unint64_t *)&v88->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              if ((__p[23] & 0x80000000) == 0)
              {
LABEL_128:
                if ((v73[23] & 0x80000000) != 0)
                {
                  v21 = *(void **)v73;
                  goto LABEL_130;
                }
LABEL_131:
                v27 = 0;
LABEL_132:
                *(_QWORD *)&cfa.__val_ = &off_24CA1A9A0;
                v62 = v81;
                if (v81)
                {
                  v63 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                goto LABEL_137;
              }
              v56 = *(char **)__p;
            }
            operator delete(v56);
            goto LABEL_128;
          }
          __p[23] = 18;
          strcpy(__p, "Materials are NULL");
          v44 = (char *)operator new(0x80uLL);
          *(_QWORD *)v73 = v44;
          *(_OWORD *)&v73[8] = xmmword_2102DC950;
          strcpy(v44, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
          if (a10)
          {
            *(_QWORD *)&cfa.__val_ = 22;
            cfa.__cat_ = std::generic_category();
            sub_20EA67538(&cfa, (uint64_t)__p, (CFErrorRef *)&v89);
            if (*a10)
              CFRelease(*a10);
            *a10 = 0;
            v45 = *(const void **)&v89.__val_;
            if (*(_QWORD *)&v89.__val_)
              CFRetain(*(CFTypeRef *)&v89.__val_);
            *a10 = v45;
            cat = (std::__shared_weak_count *)v89.__cat_;
            if (v89.__cat_)
            {
              v47 = (unint64_t *)&v89.__cat_[1];
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
                std::__shared_weak_count::__release_weak(cat);
              }
            }
            if ((v73[23] & 0x80000000) == 0)
            {
LABEL_90:
              if ((__p[23] & 0x80000000) != 0)
              {
                v49 = *(void **)__p;
LABEL_110:
                operator delete(v49);
                goto LABEL_111;
              }
              goto LABEL_111;
            }
            v44 = *(char **)v73;
          }
          operator delete(v44);
          goto LABEL_90;
        }
        LODWORD(v87) = sub_21015BE44((uint64_t)&v82);
        *(_DWORD *)&__p[24] = -1;
        *(_QWORD *)__p = operator new(0x88uLL);
        *(_OWORD *)&__p[8] = xmmword_2102DC960;
        strcpy(*(char **)__p, "Confidences must be in the format of kCVPixelFormatType_OneComponent16Half or kCVPixelFormatType_OneComponent32Float, but instead are ");
        *(_DWORD *)&__p[24] = 1;
        sub_20E8FD1F4((uint64_t)&cfa, (uint64_t)__p, (unsigned int *)&v87);
        if (*(_DWORD *)&__p[24] == -1)
          sub_20E877AB8();
        *(_QWORD *)&cfa.__val_ = &v89;
        ((void (*)(_BYTE *__return_ptr, std::error_condition *, _BYTE *))off_24C9B0218[*(unsigned int *)&__p[24]])(v73, &cfa, __p);
        if (*(_DWORD *)&__p[24] != -1)
          ((void (*)(std::error_condition *, _BYTE *))off_24C9B01E8[*(unsigned int *)&__p[24]])(&cfa, __p);
        v50 = (char *)operator new(0x80uLL);
        *(_QWORD *)__p = v50;
        *(_OWORD *)&__p[8] = xmmword_2102DC950;
        strcpy(v50, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
        if (a10)
        {
          v51 = std::generic_category();
          *(_QWORD *)&cfa.__val_ = 22;
          cfa.__cat_ = v51;
          sub_20EA67538(&cfa, (uint64_t)v73, (CFErrorRef *)&v89);
          if (*a10)
            CFRelease(*a10);
          *a10 = 0;
          v52 = *(const void **)&v89.__val_;
          if (*(_QWORD *)&v89.__val_)
            CFRetain(*(CFTypeRef *)&v89.__val_);
          *a10 = v52;
          v53 = (std::__shared_weak_count *)v89.__cat_;
          if (v89.__cat_)
          {
            v54 = (unint64_t *)&v89.__cat_[1];
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          if ((__p[23] & 0x80000000) == 0)
          {
LABEL_108:
            if ((v73[23] & 0x80000000) != 0)
            {
              v49 = *(void **)v73;
              goto LABEL_110;
            }
LABEL_111:
            v27 = 0;
LABEL_137:
            *(_QWORD *)&v82.__val_ = &off_24CA1A9A0;
            v65 = v83;
            if (v83)
            {
              v66 = (unint64_t *)&v83->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            goto LABEL_71;
          }
          v50 = *(char **)__p;
        }
        operator delete(v50);
        goto LABEL_108;
      }
      __p[23] = 20;
      strcpy(__p, "Confidences are NULL");
      v35 = (char *)operator new(0x80uLL);
      *(_QWORD *)v73 = v35;
      *(_OWORD *)&v73[8] = xmmword_2102DC950;
      strcpy(v35, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
      if (a10)
      {
        *(_QWORD *)&v82.__val_ = 22;
        v82.__cat_ = std::generic_category();
        sub_20EA67538(&v82, (uint64_t)__p, (CFErrorRef *)&cfa);
        if (*a10)
          CFRelease(*a10);
        *a10 = 0;
        v36 = *(const void **)&cfa.__val_;
        if (*(_QWORD *)&cfa.__val_)
          CFRetain(*(CFTypeRef *)&cfa.__val_);
        *a10 = v36;
        v37 = (std::__shared_weak_count *)cfa.__cat_;
        if (cfa.__cat_)
        {
          v38 = (unint64_t *)&cfa.__cat_[1];
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        if ((v73[23] & 0x80000000) == 0)
        {
LABEL_67:
          if ((__p[23] & 0x80000000) != 0)
          {
            v34 = *(void **)__p;
            goto LABEL_69;
          }
          goto LABEL_70;
        }
        v35 = *(char **)v73;
      }
      operator delete(v35);
      goto LABEL_67;
    }
    v89.__val_ = sub_21015BE44((uint64_t)&v84);
    *(_DWORD *)&__p[24] = 0;
    sub_20E8FD498(__p, "Semantics must be in the format of kCVPixelFormatType_OneComponent8 but instead are ");
    sub_20E8FD1F4((uint64_t)&v82, (uint64_t)__p, (unsigned int *)&v89);
    if (*(_DWORD *)&__p[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)&v82.__val_ = &cfa;
    ((void (*)(_BYTE *__return_ptr, std::error_condition *, _BYTE *))off_24C9B0218[*(unsigned int *)&__p[24]])(v73, &v82, __p);
    if (*(_DWORD *)&__p[24] != -1)
      ((void (*)(std::error_condition *, _BYTE *))off_24C9B01E8[*(unsigned int *)&__p[24]])(&v82, __p);
    v28 = (char *)operator new(0x80uLL);
    *(_QWORD *)__p = v28;
    *(_OWORD *)&__p[8] = xmmword_2102DC950;
    strcpy(v28, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
    if (a10)
    {
      v29 = std::generic_category();
      *(_QWORD *)&v82.__val_ = 22;
      v82.__cat_ = v29;
      sub_20EA67538(&v82, (uint64_t)v73, (CFErrorRef *)&cfa);
      if (*a10)
        CFRelease(*a10);
      *a10 = 0;
      v30 = *(const void **)&cfa.__val_;
      if (*(_QWORD *)&cfa.__val_)
        CFRetain(*(CFTypeRef *)&cfa.__val_);
      *a10 = v30;
      v31 = (std::__shared_weak_count *)cfa.__cat_;
      if (cfa.__cat_)
      {
        v32 = (unint64_t *)&cfa.__cat_[1];
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_52:
        if ((v73[23] & 0x80000000) != 0)
        {
          v34 = *(void **)v73;
LABEL_69:
          operator delete(v34);
        }
LABEL_70:
        v27 = 0;
LABEL_71:
        *(_QWORD *)&v84.__val_ = &off_24CA1A9A0;
        v40 = v85;
        if (v85)
        {
          v41 = &v85->__shared_owners_;
          do
            v42 = __ldaxr((unint64_t *)v41);
          while (__stlxr(v42 - 1, (unint64_t *)v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        return v27;
      }
      v28 = *(char **)__p;
    }
    operator delete(v28);
    goto LABEL_52;
  }
  __p[23] = 18;
  strcpy(__p, "Semantics are NULL");
  v22 = (char *)operator new(0x80uLL);
  *(_QWORD *)v73 = v22;
  *(_OWORD *)&v73[8] = xmmword_2102DC950;
  strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
  if (a10)
  {
    *(_QWORD *)&v84.__val_ = 22;
    v84.__cat_ = std::generic_category();
    sub_20EA67538(&v84, (uint64_t)__p, (CFErrorRef *)&v82);
    if (*a10)
      CFRelease(*a10);
    *a10 = 0;
    v23 = *(const void **)&v82.__val_;
    if (*(_QWORD *)&v82.__val_)
      CFRetain(*(CFTypeRef *)&v82.__val_);
    *a10 = v23;
    v24 = (std::__shared_weak_count *)v82.__cat_;
    if (v82.__cat_)
    {
      v25 = (unint64_t *)&v82.__cat_[1];
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if ((v73[23] & 0x80000000) == 0)
      goto LABEL_33;
    v22 = *(char **)v73;
  }
  operator delete(v22);
LABEL_33:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8FC978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void *v37;
  uint64_t v38;

  sub_20E86665C(v38 - 96);
  operator delete(v37);
  if (a29 < 0)
    operator delete(__p);
  sub_21015D41C(&a37);
  sub_21015D41C((_QWORD *)(v38 - 152));
  sub_21015D41C((_QWORD *)(v38 - 128));
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSemanticsFrameRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 268);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMSemanticsFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 268);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DSLAMSemanticsFrameSetPose(__n128 *a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  int v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    v7 = a1[16].n128_u8[0];
    a1[12] = a3;
    a1[13] = a4;
    a1[14] = a5;
    a1[15] = a6;
    if (!v7)
      a1[16].n128_u8[0] = 1;
  }
  else
  {
    __p = operator new(0x19uLL);
    v16 = xmmword_2102DAFD0;
    strcpy((char *)__p, "Semantics frame is NULL");
    v9 = (char *)operator new(0x80uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E8FCD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DSLAMSemanticsCameraCalibrationCreate(unsigned int a1, unsigned int a2, uint64_t a3, int64x2_t *a4, CFTypeRef *a5)
{
  _DWORD *v10;
  _DWORD *v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  char *v23;
  CFTypeRef v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  CFTypeRef v28;
  unint64_t *p_shared_owners;
  char *v31;
  void *__p;
  __int128 v33;
  CFTypeRef cf;
  std::__shared_weak_count *v35;
  std::error_condition v36;

  if (a3)
  {
    if (a4)
    {
      v10 = operator new(0x98uLL, MEMORY[0x24BEDB6B8]);
      v11 = v10;
      if (v10)
      {
        v10[2] = a1;
        v10[3] = a2;
        if (a1 >= 0x10000
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a2 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v12 = a4[3];
        v13 = *a4;
        v14 = a4[1];
        v15 = a4[1].u64[0];
        v16 = a4[2].u64[1];
        v17 = vzip1q_s64(vdupq_laneq_s64(v14, 1), a4[2]);
        v14.i64[0] = a4[4].i64[0];
        __asm { FMOV            V5.2D, #1.0 }
        *(_QWORD *)&_Q5 = *(_QWORD *)(a3 + 16);
        *((_OWORD *)v11 + 7) = *(_OWORD *)a3;
        *((_OWORD *)v11 + 8) = _Q5;
        *((int64x2_t *)v11 + 5) = v12;
        *((int64x2_t *)v11 + 6) = v14;
        *((int64x2_t *)v11 + 1) = v13;
        *((_OWORD *)v11 + 2) = v15;
        *((int64x2_t *)v11 + 3) = v17;
        *((_OWORD *)v11 + 4) = v16;
        v11[36] = 1;
        *(_QWORD *)v11 = &off_24CA18698;
      }
      return v11;
    }
    __p = operator new(0x20uLL);
    v33 = xmmword_2102DBFB0;
    strcpy((char *)__p, "R_I_to_C can not be null");
    v23 = (char *)operator new(0x80uLL);
    v31 = v23;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
    if (a5)
    {
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = std::generic_category();
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v28 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v28;
      v25 = v35;
      if (!v35)
        goto LABEL_28;
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
LABEL_26:
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
LABEL_28:
      v23 = v31;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v33 = xmmword_2102DBFB0;
    strcpy((char *)__p, "t_C_to_I can not be null");
    v23 = (char *)operator new(0x80uLL);
    v31 = v23;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSemanticsFrame.cpp");
    if (a5)
    {
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = std::generic_category();
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v24 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v24;
      v25 = v35;
      if (!v35)
        goto LABEL_28;
      v26 = (unint64_t *)&v35->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      goto LABEL_26;
    }
  }
  operator delete(v23);
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E8FD13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E8FD184(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20E8FD0F0);
}

uint64_t CV3DSLAMSemanticsCameraCalibrationRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 144);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMSemanticsCameraCalibrationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 144);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20E8FD1F4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_210206D50((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C9B0200[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20E8FD444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20E8FD468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8FD484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E8FD498(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B01E8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20E8FD588(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, uint64_t *a8)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(std::__shared_weak_count **)(a4 + 16);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(_QWORD *)(a5 + 8);
  v17 = *(std::__shared_weak_count **)(a5 + 16);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *a8;
  *(_QWORD *)(a1 + 8) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  if (a3)
  {
    v21 = (unint64_t *)&a3->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(a1 + 32) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  if (v13)
  {
    v23 = (unint64_t *)&v13->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(a1 + 56) = &off_24CA1A9A0;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *a6;
  v28 = a6[1];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a6 + 8);
  *(_OWORD *)(a1 + 80) = v27;
  *(_OWORD *)(a1 + 96) = v28;
  v29 = *a7;
  v30 = a7[1];
  v31 = a7[2];
  *(_OWORD *)(a1 + 164) = a7[3];
  *(_OWORD *)(a1 + 148) = v31;
  *(_OWORD *)(a1 + 132) = v30;
  *(_OWORD *)(a1 + 116) = v29;
  *(_QWORD *)(a1 + 184) = v20;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (!v17)
    goto LABEL_23;
  v32 = (unint64_t *)&v17->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v13)
      goto LABEL_29;
  }
  else
  {
LABEL_23:
    if (!v13)
      goto LABEL_29;
  }
  v34 = (unint64_t *)&v13->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_29:
  if (a3)
  {
    v36 = (unint64_t *)&a3->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_24C9B0240;
  *(_DWORD *)(a1 + 268) = 1;
  return a1;
}

_QWORD *sub_20E8FD764(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[7] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[1] = &off_24CA1A9A0;
  v8 = (std::__shared_weak_count *)a1[3];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20E8FD86C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[7] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[1] = &off_24CA1A9A0;
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x212BC6398);
}

_DWORD *CV3DSLAMSessionCreate()
{
  uint64_t v0;
  uint64_t v1;
  CFTypeRef *v2;
  CFTypeRef *v3;
  uint64_t v4;
  uint64_t v5;
  __int32 *v6;
  __int32 *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  CFTypeRef v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  const std::error_category *v34;
  CFTypeRef v35;
  unint64_t *v36;
  CFTypeRef v37;
  unint64_t *v38;
  char *v40;
  const std::error_category *v41;
  CFTypeRef v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const std::error_category *v46;
  CFTypeRef v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  __int128 v62;
  CFTypeRef cf;
  __int128 v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  int64x2_t v67;
  int64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  void **p_p;
  __int128 v76;
  void *v77;
  char v78;
  CFTypeRef v79;
  std::__shared_weak_count *v80;
  std::error_condition v81;
  void *__p;
  __int128 v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v91 = *MEMORY[0x24BDAC8D0];
  if (!v0)
  {
    __p = operator new(0x28uLL);
    v83 = xmmword_2102DBA80;
    strcpy((char *)__p, "Input session calibration is NULL");
    v29 = (void **)operator new(0x78uLL);
    p_p = v29;
    v76 = xmmword_2102DBBE0;
    strcpy((char *)v29, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (v3)
    {
      v67.i64[0] = 22;
      v67.i64[1] = (uint64_t)std::generic_category();
      sub_20EA67538((const std::error_condition *)&v67, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*v3)
        CFRelease(*v3);
      *v3 = 0;
      v30 = cf;
      if (cf)
        CFRetain(cf);
      *v3 = v30;
      v31 = (std::__shared_weak_count *)v64;
      if (!(_QWORD)v64)
        goto LABEL_63;
      v32 = (unint64_t *)(v64 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      goto LABEL_62;
    }
    goto LABEL_65;
  }
  v4 = v1;
  if (!v1)
  {
    __p = operator new(0x28uLL);
    v83 = xmmword_2102DCA10;
    strcpy((char *)__p, "Input session configuration is NULL");
    v29 = (void **)operator new(0x78uLL);
    p_p = v29;
    v76 = xmmword_2102DBBE0;
    strcpy((char *)v29, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (v3)
    {
      v67.i64[0] = 22;
      v67.i64[1] = (uint64_t)std::generic_category();
      sub_20EA67538((const std::error_condition *)&v67, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*v3)
        CFRelease(*v3);
      *v3 = 0;
      v37 = cf;
      if (cf)
        CFRetain(cf);
      *v3 = v37;
      v31 = (std::__shared_weak_count *)v64;
      if (!(_QWORD)v64)
        goto LABEL_63;
      v38 = (unint64_t *)(v64 + 8);
      do
        v33 = __ldaxr(v38);
      while (__stlxr(v33 - 1, v38));
      goto LABEL_62;
    }
LABEL_65:
    operator delete(v29);
    goto LABEL_66;
  }
  v5 = v0;
  v83 = 0uLL;
  __p = 0;
  v6 = *(__int32 **)v0;
  v7 = *(__int32 **)(v0 + 8);
  p_p = &__p;
  if (v6 != v7)
  {
    do
    {
      v67.i32[0] = *v6;
      sub_20EA9AB98((uint64_t *)&p_p, &v67);
      v6 += 272;
    }
    while (v6 != v7);
    v8 = __p;
    v9 = (void *)v83;
    if (__p)
    {
      *(_QWORD *)&v83 = __p;
      operator delete(__p);
    }
    if (v8 != v9)
    {
      sub_20E909008((uint64_t)&__p, v4);
      sub_20E864994((uint64_t)&__p);
      sub_20E973D84(v5, (uint64_t)&__p, (uint64_t *)&p_p);
      sub_20E975D0C((uint64_t)&__p);
      v10 = (std::__shared_weak_count *)operator new(0x28uLL);
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B04B8;
      v10[1].__shared_owners_ = 0;
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07120;
      v73 = v10 + 1;
      v74 = v10;
      v11 = (std::__shared_weak_count *)operator new(0xA0uLL);
      sub_20E909C5C(v11, (uint64_t)&v84, (uint64_t *)&v73);
      v71 = v11 + 1;
      v72 = v11;
      v65 = v11 + 1;
      v66 = v11;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      sub_20E97A074();
      if (v66)
      {
        v14 = &v66->__shared_owners_;
        do
          v15 = __ldaxr((unint64_t *)v14);
        while (__stlxr(v15 - 1, (unint64_t *)v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v67), (int32x4_t)vceqzq_s64(v68)))) & 1) == 0
        && v69
        && v70)
      {
        v16 = operator new(0x1140uLL, MEMORY[0x24BEDB6B8]);
        if (v16)
        {
          v17 = v16;
          v18 = (uint64_t)(v16 + 2);
          cf = v73;
          *(_QWORD *)&v64 = v74;
          if (v74)
          {
            v19 = (unint64_t *)&v74->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v61 = (char *)v71;
          *(_QWORD *)&v62 = v72;
          if (v72)
          {
            v21 = (unint64_t *)&v72->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          sub_20E865F44(v18, &v67, (uint64_t)&__p, (uint64_t)&p_p, &cf, &v61);
          v23 = (std::__shared_weak_count *)v62;
          if ((_QWORD)v62)
          {
            v24 = (unint64_t *)(v62 + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v26 = (std::__shared_weak_count *)v64;
          if ((_QWORD)v64)
          {
            v27 = (unint64_t *)(v64 + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v17[1102] = 1;
          *(_QWORD *)v17 = &off_24C9B3D08;
LABEL_97:
          v49 = v70;
          v70 = 0;
          if (v49)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
          v50 = v69;
          v69 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          v51 = v68.i64[1];
          v68.i64[1] = 0;
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          v52 = v68.i64[0];
          v68.i64[0] = 0;
          if (v52)
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
          v53 = v67.i64[1];
          v67.i64[1] = 0;
          if (v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          v54 = v67.i64[0];
          v67.i64[0] = 0;
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
          v55 = v72;
          if (v72)
          {
            v56 = (unint64_t *)&v72->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v58 = v74;
          if (v74)
          {
            v59 = (unint64_t *)&v74->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if (v78 < 0)
            operator delete(v77);
          sub_20E86A810((uint64_t)&p_p);
          if (v90)
            MEMORY[0x212BC6368](v90, 0x1000C8000313F17);
          if (v89)
            MEMORY[0x212BC6368](v89, 0x1000C8000313F17);
          if (v88)
            MEMORY[0x212BC6368](v88, 0x1000C8000313F17);
          if (v87)
            MEMORY[0x212BC6368](v87, 0x1000C8000313F17);
          if (v85)
          {
            v86 = v85;
            operator delete(v85);
          }
          sub_20E869418((uint64_t)&v83);
          return v17;
        }
        cf = operator new(0x30uLL);
        v64 = xmmword_2102DCA00;
        strcpy((char *)cf, "Unable to allocate memory for the session");
        v40 = (char *)operator new(0x78uLL);
        v61 = v40;
        v62 = xmmword_2102DBBE0;
        strcpy(v40, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
        if (!v3)
          goto LABEL_93;
        v46 = std::generic_category();
        *(_QWORD *)&v81.__val_ = 12;
        v81.__cat_ = v46;
        sub_20EA67538(&v81, (uint64_t)&cf, (CFErrorRef *)&v79);
        if (*v3)
          CFRelease(*v3);
        *v3 = 0;
        v47 = v79;
        if (v79)
          CFRetain(v79);
        *v3 = v47;
        v43 = v80;
        if (!v80)
          goto LABEL_91;
        v48 = (unint64_t *)&v80->__shared_owners_;
        do
          v45 = __ldaxr(v48);
        while (__stlxr(v45 - 1, v48));
      }
      else
      {
        cf = operator new(0x30uLL);
        v64 = xmmword_2102DCA00;
        strcpy((char *)cf, "Unable to allocate memory for the session");
        v40 = (char *)operator new(0x78uLL);
        v61 = v40;
        v62 = xmmword_2102DBBE0;
        strcpy(v40, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
        if (!v3)
          goto LABEL_93;
        v41 = std::generic_category();
        *(_QWORD *)&v81.__val_ = 12;
        v81.__cat_ = v41;
        sub_20EA67538(&v81, (uint64_t)&cf, (CFErrorRef *)&v79);
        if (*v3)
          CFRelease(*v3);
        *v3 = 0;
        v42 = v79;
        if (v79)
          CFRetain(v79);
        *v3 = v42;
        v43 = v80;
        if (!v80)
        {
LABEL_91:
          if ((SHIBYTE(v62) & 0x80000000) == 0)
          {
LABEL_94:
            if (SHIBYTE(v64) < 0)
              operator delete((void *)cf);
            v17 = 0;
            goto LABEL_97;
          }
          v40 = v61;
LABEL_93:
          operator delete(v40);
          goto LABEL_94;
        }
        v44 = (unint64_t *)&v80->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
      }
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      goto LABEL_91;
    }
  }
  __p = operator new(0x28uLL);
  v83 = xmmword_2102DCA10;
  strcpy((char *)__p, "Input calibration has no camera ids");
  v29 = (void **)operator new(0x78uLL);
  p_p = v29;
  v76 = xmmword_2102DBBE0;
  strcpy((char *)v29, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (!v3)
    goto LABEL_65;
  v34 = std::generic_category();
  v67.i64[0] = 22;
  v67.i64[1] = (uint64_t)v34;
  sub_20EA67538((const std::error_condition *)&v67, (uint64_t)&__p, (CFErrorRef *)&cf);
  if (*v3)
    CFRelease(*v3);
  *v3 = 0;
  v35 = cf;
  if (cf)
    CFRetain(cf);
  *v3 = v35;
  v31 = (std::__shared_weak_count *)v64;
  if (!(_QWORD)v64)
    goto LABEL_63;
  v36 = (unint64_t *)(v64 + 8);
  do
    v33 = __ldaxr(v36);
  while (__stlxr(v33 - 1, v36));
LABEL_62:
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_64;
  }
LABEL_63:
  if (SHIBYTE(v76) < 0)
  {
LABEL_64:
    v29 = p_p;
    goto LABEL_65;
  }
LABEL_66:
  if (SHIBYTE(v83) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E8FE388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;

  operator delete(v31);
  if (a18 < 0)
    operator delete(__p);
  sub_20E8666C4(&a21);
  sub_20E86665C((uint64_t)&a27);
  sub_20E86665C((uint64_t)&a29);
  sub_20E8FE4F0((uint64_t)&a31);
  sub_20E8FE530(&STACK[0xA50]);
  _Unwind_Resume(a1);
}

void sub_20E8FE434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E8FE4F0((uint64_t)&a28);
  sub_20E8FE530(&STACK[0xA50]);
  _Unwind_Resume(a1);
}

void sub_20E8FE454(_Unwind_Exception *a1)
{
  sub_20E8FE530(&STACK[0xA50]);
  _Unwind_Resume(a1);
}

void sub_20E8FE468(_Unwind_Exception *a1)
{
  sub_20E8FE530(&STACK[0xA50]);
  _Unwind_Resume(a1);
}

void sub_20E8FE494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20E8FE4A0);
}

void sub_20E8FE4CC(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0xA50];
  if (!STACK[0xA50])
    JUMPOUT(0x20E8FE4D8);
  STACK[0xA58] = (unint64_t)v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8FE4F0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (*(char *)(a1 + 2455) < 0)
  {
    operator delete(*(void **)(a1 + 2432));
    a1 = v1;
  }
  return sub_20E86A810(a1);
}

_QWORD *sub_20E8FE530(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a1[1602];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[1599];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[1595];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1592];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = (void *)a1[1545];
  if (v6)
  {
    a1[1546] = v6;
    operator delete(v6);
  }
  sub_20E869418((uint64_t)(a1 + 1));
  return a1;
}

uint64_t CV3DSLAMSessionRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 4408);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMSessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 4408);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DSLAMSessionWait(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[21];
  char v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3601))
      return 1;
    else
      return sub_20E97D8A0((uint64_t *)(a1 + 8), a2);
  }
  else
  {
    v10 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v10 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E8FE7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSetNewStateBlock(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E97DB00((uint64_t *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DC8E0;
    strcpy((char *)__p[0], "Blocks are not supported when using writers");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 102;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_25:
      v4 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8FEA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionRegisterNewStateBlock(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E97DDAC((uint64_t *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DC8E0;
    strcpy((char *)__p[0], "Blocks are not supported when using writers");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 102;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_25:
      v4 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8FED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionDeregisterNewStateBlock(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E97E060((uint64_t *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DC8E0;
    strcpy((char *)__p[0], "Blocks are not supported when using writers");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 102;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_25:
      v4 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E8FF04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSetErrorBlock(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  char __p[21];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (a2)
      return sub_20E97E27C((uint64_t *)(a1 + 8), a2, a3);
    v14 = 13;
    strcpy(__p, "Block is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    v14 = 20;
    strcpy(__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (v14 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8FF310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSetAnchorAddedBlock(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_20E97E81C(a1 + 8, a2, a3);
  v12 = 20;
  strcpy(__p, "SLAM session is NULL");
  v5 = (char *)operator new(0x78uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8FF4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSetLocationRequestBlock(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_20E97ED64((_QWORD *)(a1 + 8), a2, a3);
  v12 = 20;
  strcpy(__p, "SLAM session is NULL");
  v5 = (char *)operator new(0x78uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E8FF6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMVisualLoggerInitializeNetworkLogger(const char *a1, unsigned __int16 a2)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  void *__dst[2];
  unint64_t v12;

  v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, a1, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = sub_20EAE0538((uint64_t)__dst, a2, 0);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  return v9;
}

void sub_20E8FF7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DSLAMVisualLoggerInitializeFileLogger(std::string *__src)
{
  std::string *v1;
  int v2;
  unsigned __int8 v3;
  _BOOL8 result;
  _BOOL8 v5;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v1 = (std::string *)((char *)__src - 1);
  do
  {
    v2 = v1->__r_.__value_.__s.__data_[1];
    v1 = (std::string *)((char *)v1 + 1);
  }
  while (v2);
  sub_20E8A9678(&__p, __src, v1);
  v3 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  result = sub_20EAE1F60((uint64_t)&__p, (uint64_t)&off_254A5A4B8);
  v5 = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return v5;
  }
  return result;
}

void sub_20E8FF8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMVisualLoggerEnable(const char *a1)
{
  _QWORD *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_20FF3F5E8();
  v3 = strlen(a1);
  v4 = (*(uint64_t (**)(_QWORD *, const char *, size_t))(v2[1] + 48))(v2 + 1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, 1);
  return 1;
}

uint64_t CV3DSLAMVisualLoggerDisable()
{
  _QWORD *v0;
  char *v1;
  char *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p;
  char *v9;
  uint64_t v10;

  v0 = sub_20FF3F5E8();
  __p = 0;
  v9 = 0;
  v10 = 0;
  sub_20FF4054C((uint64_t)v0, (uint64_t **)&__p);
  v1 = (char *)__p;
  if (__p)
  {
    v2 = v9;
    v3 = __p;
    if (v9 != __p)
    {
      do
      {
        v4 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        v2 -= 16;
      }
      while (v2 != v1);
      v3 = __p;
    }
    v9 = v1;
    operator delete(v3);
  }
  return 1;
}

void sub_20E8FF9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11)
{
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void CV3DSLAMInitializeVisualLoggerFromString(uint64_t a1)
{
  unsigned __int8 v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v1 & 1) == 0)
  {
    v4 = a1;
    v3 = __cxa_guard_acquire(&qword_254A6DE08);
    a1 = v4;
    if (v3)
    {
      __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE08);
      a1 = v4;
    }
  }
  if (a1)
    v2 = (_BYTE *)(a1 + 8);
  else
    v2 = 0;
  sub_20EAE35D0(v2, (uint64_t)&off_254A5A4B8, 0);
}

uint64_t CV3DSLAMSessionPushCamera(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _QWORD *v4;
  unsigned int *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char __p[21];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v4 = (_QWORD *)(a1 + 8);
    if (a2)
      v5 = (unsigned int *)(a2 + 8);
    else
      v5 = 0;
    return sub_20E97F1AC(v4, v5, a3, 0);
  }
  else
  {
    v13 = 20;
    strcpy(__p, "SLAM session is NULL");
    v7 = (char *)operator new(0x78uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (v13 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E8FFC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushMagnetometer(uint64_t a1, CFTypeRef *a2, float a3, float a4, float a5, double a6, float a7)
{
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    __p[0] = *(void **)&a6;
    __p[1] = (void *)__PAIR64__(LODWORD(a4), LODWORD(a3));
    __p[2] = (void *)__PAIR64__(LODWORD(a7), LODWORD(a5));
    return sub_20E980550((char **)(a1 + 8), (double *)__p, a2);
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v9 = (char *)operator new(0x78uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_20E8FFE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushGyro(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char __p[21];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
    return sub_20E980980((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6);
  v14 = 20;
  strcpy(__p, "SLAM session is NULL");
  v8 = (char *)operator new(0x78uLL);
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v17.__val_ = 22;
    v17.__cat_ = std::generic_category();
    sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v9;
    v10 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  operator delete(v8);
  if (v14 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E900024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushAccel(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char __p[21];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
    return sub_20E980D90((double *)(a1 + 8), a2, a3, a4, a5, a6);
  v14 = 20;
  strcpy(__p, "SLAM session is NULL");
  v8 = (char *)operator new(0x78uLL);
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v17.__val_ = 22;
    v17.__cat_ = std::generic_category();
    sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v9;
    v10 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  operator delete(v8);
  if (v14 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9001F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushJasperPointCloud(uint64_t a1, uint64_t a2, CFTypeRef *a3, double a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_20E98119C((_QWORD *)(a1 + 8), a2, a3, a4);
  v12 = 20;
  strcpy(__p, "SLAM session is NULL");
  v6 = (char *)operator new(0x78uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9003BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushLocation(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (!a1)
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v7 = (char *)operator new(0x78uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_20EA67538(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_35;
  }
  if (!a2)
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "SLAM location is null");
    v12 = (char *)operator new(0x78uLL);
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_20EA67538(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v13;
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    operator delete(v12);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
LABEL_35:
    operator delete(__p[0]);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 3601))
    return sub_20E981890((_QWORD *)(a1 + 8), a2, a3);
  result = sub_20E87A684(a1 + 3600, a2, a3);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 3640))
    {
      LOBYTE(__p[0]) = 0;
      v6 = *(_QWORD *)(a1 + 3632);
      if (!v6)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p);
      return 1;
    }
    else
    {
      __p[0] = operator new(0x28uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DC8F0;
      strcpy((char *)__p[0], "Unable to trigger mapping io graph");
      v17 = (char *)operator new(0x78uLL);
      strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
      if (a3)
      {
        *(_QWORD *)&v25.__val_ = 22;
        v25.__cat_ = std::generic_category();
        sub_20EA67538(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v18 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v18;
        v19 = v24;
        if (v24)
        {
          v20 = (unint64_t *)&v24->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      operator delete(v17);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  return result;
}

void sub_20E90085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushSemantics(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
    {
      if (*(_BYTE *)(a1 + 3601))
        return sub_20E87A838(a1 + 3600, a2, a3);
      else
        return sub_20E9822BC((_QWORD *)(a1 + 8), a2, a3);
    }
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DAFD0;
    strcpy((char *)__p[0], "Semantics frame is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_27;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_22:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_27:
      v5 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_27;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_22;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E900B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CV3DSLAMSessionSerializeMap(uint64_t a1, __CFData *a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    sub_20E982668((uint64_t *)(a1 + 8), a2, a3);
  }
  else
  {
    v11 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v9 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v9;
    }
    operator delete(v4);
    if (v11 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_20E900D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionClearMap(uint64_t a1, CFTypeRef *a2)
{
  char *v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef v8;
  unint64_t *v9;
  char *v11;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E982C70((uint64_t *)(a1 + 8), a2);
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DCA20;
    strcpy((char *)__p[0], "Cannot clear the map when using writers");
    v3 = (char *)operator new(0x78uLL);
    v11 = v3;
    strcpy(v3, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v4 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v4;
      v5 = v14;
      if (!v14)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
LABEL_20:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
LABEL_25:
      v3 = v11;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v3 = (char *)operator new(0x78uLL);
    v11 = v3;
    strcpy(v3, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v5 = v14;
      if (!v14)
        goto LABEL_25;
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v7 = __ldaxr(v9);
      while (__stlxr(v7 - 1, v9));
      goto LABEL_20;
    }
  }
  operator delete(v3);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E901004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSaveMap(uint64_t a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    kdebug_trace();
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87B0BC(a1 + 3600, (uint64_t)__p, a2);
    else
      return sub_20E982EA0((_QWORD *)(a1 + 8), a2);
  }
  else
  {
    v11 = 20;
    strcpy(__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v11 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E901220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionResetMappingMode(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[21];
  char v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3601))
    {
      __p[0] = 1;
      return sub_20E87A31C(a1 + 3600, (uint64_t)__p, a2);
    }
    else
    {
      return sub_20E983130((uint64_t *)(a1 + 8), a2);
    }
  }
  else
  {
    v10 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v10 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E90141C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionFilesystemAccessGranted(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3601))
    {
      return sub_20E87B270(a1 + 3600, (uint64_t)__p, a2);
    }
    else
    {
      v9 = (_QWORD *)(a1 + 8);
      v10 = sub_20E983790((_QWORD *)(a1 + 8), a2);
      return v10 & sub_20E984F90(v9, a2);
    }
  }
  else
  {
    v12 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E901628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSaveAllSubmaps(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[21];
  char v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3601))
    {
      __p[0] = 2;
      return sub_20E87A31C(a1 + 3600, (uint64_t)__p, a2);
    }
    else
    {
      return sub_20E983350((uint64_t *)(a1 + 8), a2);
    }
  }
  else
  {
    v10 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v10 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E901820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSaveAllSubmapsHardBlocking(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20E983570((uint64_t *)(a1 + 8), a2);
  v11 = 20;
  strcpy(__p, "SLAM session is NULL");
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9019EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionAddAnchor(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3, int8x16_t a4, int8x16_t a5, __n128 a6, __n128 a7)
{
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef v13;
  unint64_t *v14;
  char *v16;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E984370((_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7);
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DCA30;
    strcpy((char *)__p[0], "Anchors must be added with a state when using writers");
    v8 = (char *)operator new(0x78uLL);
    v16 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v10 = v19;
      if (!v19)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
LABEL_20:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_25:
      v8 = v16;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v8 = (char *)operator new(0x78uLL);
    v16 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v13;
      v10 = v19;
      if (!v19)
        goto LABEL_25;
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(v14);
      while (__stlxr(v12 - 1, v14));
      goto LABEL_20;
    }
  }
  operator delete(v8);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E901CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSetActiveAnchorGroupList(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  CFErrorRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v16;
  void **v17;
  char __p[21];
  char v19;
  void *v20;
  void *v21[6];
  CFErrorRef v22;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (!a1)
  {
    v19 = 20;
    strcpy(__p, "SLAM session is NULL");
    v10 = operator new(0x78uLL);
    v21[0] = v10;
    *(_OWORD *)&v21[1] = xmmword_2102DBBE0;
    strcpy((char *)v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_20EA67538(&v24, (uint64_t)__p, &v22);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = v22;
      if (v22)
        CFRetain(v22);
      *a3 = v11;
      v12 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
        goto LABEL_25;
      v10 = v21[0];
    }
    operator delete(v10);
LABEL_25:
    if (v19 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
  if (a2)
  {
    sub_20E9092A4((uint64_t)v21, a2 + 8);
    if (*(_BYTE *)(a1 + 3601))
      goto LABEL_4;
LABEL_30:
    v5 = sub_20E984AF4((_QWORD *)(a1 + 8), (uint64_t)v21, a3);
    v8 = (void **)v21[2];
    if (!v21[2])
      goto LABEL_31;
    goto LABEL_34;
  }
  memset(v21, 0, 32);
  v21[4] = (void *)1065353216;
  if (!*(_BYTE *)(a1 + 3601))
    goto LABEL_30;
LABEL_4:
  *(_QWORD *)__p = *(_QWORD *)(a1 + 2520);
  sub_20E9092A4((uint64_t)&__p[8], (uint64_t)v21);
  v5 = sub_20E87C378(a1 + 3600, (uint64_t)__p, 0, a3);
  v6 = (void **)v20;
  if (v20)
  {
    do
    {
      v9 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v9;
    }
    while (v9);
  }
  v7 = *(void **)&__p[8];
  *(_QWORD *)&__p[8] = 0;
  if (v7)
    operator delete(v7);
  v8 = (void **)v21[2];
  if (v21[2])
  {
    do
    {
LABEL_34:
      v17 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v17;
    }
    while (v17);
  }
LABEL_31:
  v16 = v21[0];
  v21[0] = 0;
  if (!v16)
    return v5;
  operator delete(v16);
  return v5;
}

void sub_20E901F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_20E8CEB24((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20E901FE4(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t CV3DSLAMSessionDeleteAnchorGroupList(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return CV3DSLAMSessionDeleteAnchorGroupsWithRequest(a1, a2, 0, a3);
}

uint64_t CV3DSLAMSessionDeleteAnchorGroupsWithRequest(uint64_t a1, uint64_t a2, const __CFUUID *a3, CFTypeRef *a4)
{
  unint64_t v8;
  CFUUIDBytes *i;
  CFTypeID v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  CFUUIDBytes v20;
  std::error_category *cat;
  char *v22;
  CFTypeRef v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  CFTypeRef v27;
  unint64_t *v28;
  char *v29;
  const std::error_category *v30;
  CFTypeRef v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void **v35;
  void **v36;
  void **v37;
  std::error_condition v39[2];
  CFTypeRef v40;
  std::__shared_weak_count *v41;
  std::error_condition v42;
  CFUUIDBytes __p[3];
  char v44;
  CFTypeRef cf[2];
  char v46;
  _BYTE v47[24];
  CFUUIDBytes v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    __p[1].byte7 = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v22 = (char *)operator new(0x78uLL);
    *(_QWORD *)v47 = v22;
    *(_OWORD *)&v47[8] = xmmword_2102DBBE0;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v39[0].__val_ = 22;
      v39[0].__cat_ = std::generic_category();
      sub_20EA67538(v39, (uint64_t)__p, (CFErrorRef *)cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v23 = cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      *a4 = v23;
      v24 = (std::__shared_weak_count *)cf[1];
      if (!cf[1])
        goto LABEL_48;
      v25 = (unint64_t *)((char *)cf[1] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
LABEL_47:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if ((v47[23] & 0x80000000) == 0)
          goto LABEL_51;
LABEL_49:
        v22 = *(char **)v47;
        goto LABEL_50;
      }
LABEL_48:
      if ((v47[23] & 0x80000000) == 0)
      {
LABEL_51:
        if ((char)__p[1].byte7 < 0)
          operator delete(*(void **)&__p[0].byte0);
        return 0;
      }
      goto LABEL_49;
    }
LABEL_50:
    operator delete(v22);
    goto LABEL_51;
  }
  if (!a2)
  {
    *(_QWORD *)&__p[0].byte0 = operator new(0x28uLL);
    *(_OWORD *)&__p[0].byte8 = xmmword_2102DB450;
    strcpy(*(char **)&__p[0].byte0, "Cannot delete a null anchor group list");
    v22 = (char *)operator new(0x78uLL);
    *(_QWORD *)v47 = v22;
    *(_OWORD *)&v47[8] = xmmword_2102DBBE0;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v39[0].__val_ = 22;
      v39[0].__cat_ = std::generic_category();
      sub_20EA67538(v39, (uint64_t)__p, (CFErrorRef *)cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v27 = cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      *a4 = v27;
      v24 = (std::__shared_weak_count *)cf[1];
      if (!cf[1])
        goto LABEL_48;
      v28 = (unint64_t *)((char *)cf[1] + 8);
      do
        v26 = __ldaxr(v28);
      while (__stlxr(v26 - 1, v28));
      goto LABEL_47;
    }
    goto LABEL_50;
  }
  v8 = *(_QWORD *)(a2 + 32);
  memset(v39, 0, 24);
  sub_20E9099B8((uint64_t)v39, v8);
  for (i = *(CFUUIDBytes **)(a2 + 24); i; i = *(CFUUIDBytes **)&i->byte0)
  {
    if ((char)i[2].byte7 < 0)
    {
      sub_20E860C04(__p, *(void **)&i[1].byte0, *(_QWORD *)&i[1].byte8);
    }
    else
    {
      __p[0] = i[1];
      *(_QWORD *)&__p[1].byte0 = *(_QWORD *)&i[2].byte0;
    }
    cat = (std::error_category *)v39[0].__cat_;
    if (v39[0].__cat_ < (const std::error_category *)*(_QWORD *)&v39[1].__val_)
    {
      v20 = __p[0];
      v39[0].__cat_[2].__vftable = *(std::error_category_vtbl **)&__p[1].byte0;
      *(CFUUIDBytes *)&cat->__vftable = v20;
      v39[0].__cat_ = cat + 3;
    }
    else
    {
      v39[0].__cat_ = (const std::error_category *)sub_20E8F7CF0((void **)v39, (uint64_t)__p);
      if ((char)__p[1].byte7 < 0)
        operator delete(*(void **)&__p[0].byte0);
    }
  }
  *(std::error_condition *)v47 = v39[0];
  *(_QWORD *)&v47[16] = *(_QWORD *)&v39[1].__val_;
  v48.byte0 = 0;
  v49 = 0;
  if (!a3)
  {
LABEL_15:
    if (*(_BYTE *)(a1 + 3601))
    {
      *(_QWORD *)&__p[0].byte0 = *(_QWORD *)(a1 + 2520);
      memset(&__p[0].byte8, 0, 24);
      sub_20E909ADC((char *)&__p[0].byte8, *(uint64_t *)v47, *(uint64_t *)&v47[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v47[8] - *(_QWORD *)v47) >> 3));
      __p[2] = v48;
      v44 = v49;
      v16 = sub_20E87BE5C(a1 + 3600, (uint64_t)__p, a4);
      v17 = *(_QWORD *)&__p[0].byte8;
      if (*(_QWORD *)&__p[0].byte8)
      {
        v18 = *(_QWORD *)&__p[1].byte0;
        v19 = *(void **)&__p[0].byte8;
        if (*(_QWORD *)&__p[1].byte0 != *(_QWORD *)&__p[0].byte8)
        {
          do
          {
            if (*(char *)(v18 - 1) < 0)
              operator delete(*(void **)(v18 - 24));
            v18 -= 24;
          }
          while (v18 != v17);
          v19 = *(void **)&__p[0].byte8;
        }
        *(_QWORD *)&__p[1].byte0 = v17;
        operator delete(v19);
        v35 = *(void ***)v47;
        if (!*(_QWORD *)v47)
          return v16;
LABEL_76:
        v36 = *(void ***)&v47[8];
        v37 = v35;
        if (*(void ***)&v47[8] != v35)
        {
          do
          {
            if (*((char *)v36 - 1) < 0)
              operator delete(*(v36 - 3));
            v36 -= 3;
          }
          while (v36 != v35);
          v37 = *(void ***)v47;
        }
        *(_QWORD *)&v47[8] = v35;
        operator delete(v37);
        return v16;
      }
    }
    else
    {
      v16 = sub_20E98542C((_QWORD *)(a1 + 8), (uint64_t)v47, a4);
    }
    v35 = *(void ***)v47;
    if (!*(_QWORD *)v47)
      return v16;
    goto LABEL_76;
  }
  v10 = CFUUIDGetTypeID();
  if (CFGetTypeID(a3) == v10)
  {
    __p[0] = CFUUIDGetUUIDBytes(a3);
    v11 = (const void *)sub_20EA68D10((uint64_t)__p);
    v12 = 0;
    cf[0] = v11;
    cf[1] = v13;
    v46 = 1;
    do
    {
      v14 = *((unsigned __int8 *)cf + v12);
      if (*((_BYTE *)cf + v12))
        v15 = 1;
      else
        v15 = v12 == 15;
      ++v12;
    }
    while (!v15);
    if (v14)
    {
      v48 = *(CFUUIDBytes *)cf;
      if (!v49)
        v49 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    LOBYTE(cf[0]) = 0;
    v46 = 0;
  }
  *(_QWORD *)&__p[0].byte0 = operator new(0x28uLL);
  *(_OWORD *)&__p[0].byte8 = xmmword_2102DC910;
  strcpy(*(char **)&__p[0].byte0, "Request ID can not be an invalid UUID");
  v29 = (char *)operator new(0x78uLL);
  *(_QWORD *)&v39[0].__val_ = v29;
  *(_OWORD *)&v39[0].__cat_ = xmmword_2102DBBE0;
  strcpy(v29, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (!a4)
    goto LABEL_67;
  v30 = std::generic_category();
  *(_QWORD *)&v42.__val_ = 22;
  v42.__cat_ = v30;
  sub_20EA67538(&v42, (uint64_t)__p, (CFErrorRef *)&v40);
  if (*a4)
    CFRelease(*a4);
  *a4 = 0;
  v31 = v40;
  if (v40)
    CFRetain(v40);
  *a4 = v31;
  v32 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (*((char *)&v39[1].__val_ + 7) < 0)
  {
    v29 = *(char **)&v39[0].__val_;
LABEL_67:
    operator delete(v29);
  }
  if ((char)__p[1].byte7 < 0)
    operator delete(*(void **)&__p[0].byte0);
  v16 = 0;
  v35 = *(void ***)v47;
  if (*(_QWORD *)v47)
    goto LABEL_76;
  return v16;
}

void sub_20E902670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E8F74DC((void **)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_20E90274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E8F74DC(&a9);
  _Unwind_Resume(a1);
}

void sub_20E902760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  sub_20E8F74DC((void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E902784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t CV3DSLAMSessionRequestAnchors(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return CV3DSLAMSessionRequestAnchorsFromGroups(a1, a2, 0, a3);
}

uint64_t CV3DSLAMSessionRequestAnchorsFromGroups(uint64_t a1, uint64_t a2, const __CFUUID *a3, CFTypeRef *a4)
{
  unint64_t v8;
  CFUUIDBytes *i;
  CFTypeID v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  CFUUIDBytes v20;
  std::error_category *cat;
  char *v22;
  CFTypeRef v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  CFTypeRef v27;
  unint64_t *v28;
  char *v29;
  const std::error_category *v30;
  CFTypeRef v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void **v35;
  void **v36;
  void **v37;
  std::error_condition v39[2];
  CFTypeRef v40;
  std::__shared_weak_count *v41;
  std::error_condition v42;
  CFUUIDBytes __p[3];
  char v44;
  CFTypeRef cf[2];
  char v46;
  _BYTE v47[24];
  CFUUIDBytes v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    __p[1].byte7 = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v22 = (char *)operator new(0x78uLL);
    *(_QWORD *)v47 = v22;
    *(_OWORD *)&v47[8] = xmmword_2102DBBE0;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v39[0].__val_ = 22;
      v39[0].__cat_ = std::generic_category();
      sub_20EA67538(v39, (uint64_t)__p, (CFErrorRef *)cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v23 = cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      *a4 = v23;
      v24 = (std::__shared_weak_count *)cf[1];
      if (!cf[1])
        goto LABEL_48;
      v25 = (unint64_t *)((char *)cf[1] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
LABEL_47:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if ((v47[23] & 0x80000000) == 0)
          goto LABEL_51;
LABEL_49:
        v22 = *(char **)v47;
        goto LABEL_50;
      }
LABEL_48:
      if ((v47[23] & 0x80000000) == 0)
      {
LABEL_51:
        if ((char)__p[1].byte7 < 0)
          operator delete(*(void **)&__p[0].byte0);
        return 0;
      }
      goto LABEL_49;
    }
LABEL_50:
    operator delete(v22);
    goto LABEL_51;
  }
  if (!a2)
  {
    *(_QWORD *)&__p[0].byte0 = operator new(0x30uLL);
    *(_OWORD *)&__p[0].byte8 = xmmword_2102DC900;
    strcpy(*(char **)&__p[0].byte0, "Cannot request anchors when the list is NULL");
    v22 = (char *)operator new(0x78uLL);
    *(_QWORD *)v47 = v22;
    *(_OWORD *)&v47[8] = xmmword_2102DBBE0;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v39[0].__val_ = 22;
      v39[0].__cat_ = std::generic_category();
      sub_20EA67538(v39, (uint64_t)__p, (CFErrorRef *)cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v27 = cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      *a4 = v27;
      v24 = (std::__shared_weak_count *)cf[1];
      if (!cf[1])
        goto LABEL_48;
      v28 = (unint64_t *)((char *)cf[1] + 8);
      do
        v26 = __ldaxr(v28);
      while (__stlxr(v26 - 1, v28));
      goto LABEL_47;
    }
    goto LABEL_50;
  }
  v8 = *(_QWORD *)(a2 + 32);
  memset(v39, 0, 24);
  sub_20E9099B8((uint64_t)v39, v8);
  for (i = *(CFUUIDBytes **)(a2 + 24); i; i = *(CFUUIDBytes **)&i->byte0)
  {
    if ((char)i[2].byte7 < 0)
    {
      sub_20E860C04(__p, *(void **)&i[1].byte0, *(_QWORD *)&i[1].byte8);
    }
    else
    {
      __p[0] = i[1];
      *(_QWORD *)&__p[1].byte0 = *(_QWORD *)&i[2].byte0;
    }
    cat = (std::error_category *)v39[0].__cat_;
    if (v39[0].__cat_ < (const std::error_category *)*(_QWORD *)&v39[1].__val_)
    {
      v20 = __p[0];
      v39[0].__cat_[2].__vftable = *(std::error_category_vtbl **)&__p[1].byte0;
      *(CFUUIDBytes *)&cat->__vftable = v20;
      v39[0].__cat_ = cat + 3;
    }
    else
    {
      v39[0].__cat_ = (const std::error_category *)sub_20E8F7CF0((void **)v39, (uint64_t)__p);
      if ((char)__p[1].byte7 < 0)
        operator delete(*(void **)&__p[0].byte0);
    }
  }
  *(std::error_condition *)v47 = v39[0];
  *(_QWORD *)&v47[16] = *(_QWORD *)&v39[1].__val_;
  v48.byte0 = 0;
  v49 = 0;
  if (!a3)
  {
LABEL_15:
    if (*(_BYTE *)(a1 + 3601))
    {
      *(_QWORD *)&__p[0].byte0 = *(_QWORD *)(a1 + 2520);
      memset(&__p[0].byte8, 0, 24);
      sub_20E909ADC((char *)&__p[0].byte8, *(uint64_t *)v47, *(uint64_t *)&v47[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v47[8] - *(_QWORD *)v47) >> 3));
      __p[2] = v48;
      v44 = v49;
      v16 = sub_20E87BCA8(a1 + 3600, (uint64_t)__p, a4);
      v17 = *(_QWORD *)&__p[0].byte8;
      if (*(_QWORD *)&__p[0].byte8)
      {
        v18 = *(_QWORD *)&__p[1].byte0;
        v19 = *(void **)&__p[0].byte8;
        if (*(_QWORD *)&__p[1].byte0 != *(_QWORD *)&__p[0].byte8)
        {
          do
          {
            if (*(char *)(v18 - 1) < 0)
              operator delete(*(void **)(v18 - 24));
            v18 -= 24;
          }
          while (v18 != v17);
          v19 = *(void **)&__p[0].byte8;
        }
        *(_QWORD *)&__p[1].byte0 = v17;
        operator delete(v19);
        v35 = *(void ***)v47;
        if (!*(_QWORD *)v47)
          return v16;
LABEL_76:
        v36 = *(void ***)&v47[8];
        v37 = v35;
        if (*(void ***)&v47[8] != v35)
        {
          do
          {
            if (*((char *)v36 - 1) < 0)
              operator delete(*(v36 - 3));
            v36 -= 3;
          }
          while (v36 != v35);
          v37 = *(void ***)v47;
        }
        *(_QWORD *)&v47[8] = v35;
        operator delete(v37);
        return v16;
      }
    }
    else
    {
      v16 = sub_20E9858C8((_QWORD *)(a1 + 8), (uint64_t)v47, a4);
    }
    v35 = *(void ***)v47;
    if (!*(_QWORD *)v47)
      return v16;
    goto LABEL_76;
  }
  v10 = CFUUIDGetTypeID();
  if (CFGetTypeID(a3) == v10)
  {
    __p[0] = CFUUIDGetUUIDBytes(a3);
    v11 = (const void *)sub_20EA68D10((uint64_t)__p);
    v12 = 0;
    cf[0] = v11;
    cf[1] = v13;
    v46 = 1;
    do
    {
      v14 = *((unsigned __int8 *)cf + v12);
      if (*((_BYTE *)cf + v12))
        v15 = 1;
      else
        v15 = v12 == 15;
      ++v12;
    }
    while (!v15);
    if (v14)
    {
      v48 = *(CFUUIDBytes *)cf;
      if (!v49)
        v49 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    LOBYTE(cf[0]) = 0;
    v46 = 0;
  }
  *(_QWORD *)&__p[0].byte0 = operator new(0x28uLL);
  *(_OWORD *)&__p[0].byte8 = xmmword_2102DC910;
  strcpy(*(char **)&__p[0].byte0, "Request ID can not be an invalid UUID");
  v29 = (char *)operator new(0x78uLL);
  *(_QWORD *)&v39[0].__val_ = v29;
  *(_OWORD *)&v39[0].__cat_ = xmmword_2102DBBE0;
  strcpy(v29, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (!a4)
    goto LABEL_67;
  v30 = std::generic_category();
  *(_QWORD *)&v42.__val_ = 22;
  v42.__cat_ = v30;
  sub_20EA67538(&v42, (uint64_t)__p, (CFErrorRef *)&v40);
  if (*a4)
    CFRelease(*a4);
  *a4 = 0;
  v31 = v40;
  if (v40)
    CFRetain(v40);
  *a4 = v31;
  v32 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (*((char *)&v39[1].__val_ + 7) < 0)
  {
    v29 = *(char **)&v39[0].__val_;
LABEL_67:
    operator delete(v29);
  }
  if ((char)__p[1].byte7 < 0)
    operator delete(*(void **)&__p[0].byte0);
  v16 = 0;
  v35 = *(void ***)v47;
  if (*(_QWORD *)v47)
    goto LABEL_76;
  return v16;
}

void sub_20E902E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E8F74DC((void **)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_20E902EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E8F74DC(&a9);
  _Unwind_Resume(a1);
}

void sub_20E902F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  sub_20E8F74DC((void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionRemove3DOFAnchors(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  const std::error_category *v9;
  int v10;
  BOOL v11;
  char *v13;
  const void *v14;
  std::__shared_weak_count *cat;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t *v19;
  CFTypeRef v20;
  unint64_t *p_shared_owners;
  CFTypeRef v22;
  std::__shared_weak_count *v23;
  std::error_condition cf;
  std::error_condition v25;
  char v26;
  _BYTE v27[24];
  _BYTE v28[24];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v28[23] = 20;
    strcpy(v28, "SLAM session is NULL");
    v13 = (char *)operator new(0x78uLL);
    *(_QWORD *)v27 = v13;
    *(_OWORD *)&v27[8] = xmmword_2102DBBE0;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_20EA67538(&v25, (uint64_t)v28, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = *(const void **)&cf.__val_;
      if (*(_QWORD *)&cf.__val_)
        CFRetain(*(CFTypeRef *)&cf.__val_);
      *a3 = v14;
      cat = (std::__shared_weak_count *)cf.__cat_;
      if (!cf.__cat_)
        goto LABEL_41;
      v16 = (unint64_t *)&cf.__cat_[1];
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_40;
    }
    goto LABEL_43;
  }
  if (!a2)
  {
    *(_QWORD *)v28 = operator new(0x20uLL);
    *(_OWORD *)&v28[8] = xmmword_2102DC000;
    strcpy(*(char **)v28, "Request ID can not be nullptr");
    v13 = (char *)operator new(0x78uLL);
    *(_QWORD *)v27 = v13;
    *(_OWORD *)&v27[8] = xmmword_2102DBBE0;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_20EA67538(&v25, (uint64_t)v28, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v18 = *(const void **)&cf.__val_;
      if (*(_QWORD *)&cf.__val_)
        CFRetain(*(CFTypeRef *)&cf.__val_);
      *a3 = v18;
      cat = (std::__shared_weak_count *)cf.__cat_;
      if (!cf.__cat_)
        goto LABEL_41;
      v19 = (unint64_t *)&cf.__cat_[1];
      do
        v17 = __ldaxr(v19);
      while (__stlxr(v17 - 1, v19));
      goto LABEL_40;
    }
LABEL_43:
    operator delete(v13);
    goto LABEL_44;
  }
  v6 = CFUUIDGetTypeID();
  if (CFGetTypeID(a2) == v6)
  {
    *(CFUUIDBytes *)v28 = CFUUIDGetUUIDBytes(a2);
    v7 = sub_20EA68D10((uint64_t)v28);
    v8 = 0;
    *(_QWORD *)&v25.__val_ = v7;
    v25.__cat_ = v9;
    v26 = 1;
    do
    {
      v10 = *((unsigned __int8 *)&v25.__val_ + v8);
      if (*((_BYTE *)&v25.__val_ + v8))
        v11 = 1;
      else
        v11 = v8 == 15;
      ++v8;
    }
    while (!v11);
    if (v10)
    {
      *(std::error_condition *)v27 = v25;
      if (!*(_BYTE *)(a1 + 3601))
        return sub_20E985D64((_QWORD *)(a1 + 8), (uint64_t)v27, a3);
      *(_QWORD *)v28 = *(_QWORD *)(a1 + 2520);
      *(std::error_condition *)&v28[8] = v25;
      return sub_20E87C010(a1 + 3600, (uint64_t)v28, a3);
    }
  }
  else
  {
    LOBYTE(v25.__val_) = 0;
    v26 = 0;
  }
  *(_QWORD *)v28 = operator new(0x28uLL);
  *(_OWORD *)&v28[8] = xmmword_2102DC910;
  strcpy(*(char **)v28, "Request ID can not be an invalid UUID");
  v13 = (char *)operator new(0x78uLL);
  *(_QWORD *)v27 = v13;
  *(_OWORD *)&v27[8] = xmmword_2102DBBE0;
  strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (!a3)
    goto LABEL_43;
  *(_QWORD *)&cf.__val_ = 22;
  cf.__cat_ = std::generic_category();
  sub_20EA67538(&cf, (uint64_t)v28, (CFErrorRef *)&v22);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v20 = v22;
  if (v22)
    CFRetain(v22);
  *a3 = v20;
  cat = v23;
  if (!v23)
    goto LABEL_41;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
LABEL_40:
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
    std::__shared_weak_count::__release_weak(cat);
    if ((v27[23] & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_42;
  }
LABEL_41:
  if ((v27[23] & 0x80000000) != 0)
  {
LABEL_42:
    v13 = *(char **)v27;
    goto LABEL_43;
  }
LABEL_44:
  if ((v28[23] & 0x80000000) != 0)
    operator delete(*(void **)v28);
  return 0;
}

void sub_20E90334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  void *v12;
  uint64_t v13;

  operator delete(v12);
  if (*(char *)(v13 - 41) < 0)
  {
    operator delete(*(void **)(v13 - 64));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionAddAnchorWithState(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  CFTypeRef cf;
  std::__shared_weak_count *v31;
  std::error_condition v32;
  _BYTE __p[32];
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    __p[23] = 20;
    strcpy(__p, "SLAM session is NULL");
    v7 = (char *)operator new(0x78uLL);
    v29 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (!a4)
      goto LABEL_28;
    *(_QWORD *)&v32.__val_ = 22;
    v32.__cat_ = std::generic_category();
    sub_20EA67538(&v32, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v8;
    v9 = v31;
    if (!v31)
      goto LABEL_27;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    goto LABEL_25;
  }
  if (!a2)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DBFE0;
    strcpy(*(char **)__p, "Can not add a null anchor");
    v7 = (char *)operator new(0x78uLL);
    v29 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (!a4)
      goto LABEL_28;
    *(_QWORD *)&v32.__val_ = 22;
    v32.__cat_ = std::generic_category();
    sub_20EA67538(&v32, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v12 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v12;
    v9 = v31;
    if (!v31)
    {
LABEL_27:
      v7 = v29;
LABEL_28:
      operator delete(v7);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      return 0;
    }
    v13 = (unint64_t *)&v31->__shared_owners_;
    do
      v11 = __ldaxr(v13);
    while (__stlxr(v11 - 1, v13));
LABEL_25:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_27;
  }
  if (*(_BYTE *)(a1 + 3601))
  {
    if (CV3DSLAMAnchorSetSLAMState(a2, a3, a4))
    {
      *(_QWORD *)__p = *(_QWORD *)(a1 + 2520);
      *(_OWORD *)&__p[16] = *(_OWORD *)(a2 + 8);
      LOBYTE(v34) = 0;
      v36 = 0;
      if (*(_BYTE *)(a2 + 48))
      {
        if (*(char *)(a2 + 47) < 0)
        {
          sub_20E860C04(&v34, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          v34 = *(_OWORD *)(a2 + 24);
          v35 = *(_QWORD *)(a2 + 40);
        }
        v36 = 1;
      }
      v16 = *(_OWORD *)(a2 + 248);
      v48 = *(_OWORD *)(a2 + 232);
      v49 = v16;
      v51 = *(_BYTE *)(a2 + 280);
      v17 = *(_OWORD *)(a2 + 184);
      v44 = *(_OWORD *)(a2 + 168);
      v45 = v17;
      v18 = *(_OWORD *)(a2 + 216);
      v46 = *(_OWORD *)(a2 + 200);
      v47 = v18;
      v19 = *(_OWORD *)(a2 + 120);
      v40 = *(_OWORD *)(a2 + 104);
      v41 = v19;
      v20 = *(_OWORD *)(a2 + 152);
      v42 = *(_OWORD *)(a2 + 136);
      v43 = v20;
      v37 = *(_OWORD *)(a2 + 56);
      v21 = *(_OWORD *)(a2 + 88);
      v38 = *(_OWORD *)(a2 + 72);
      v39 = v21;
      v50 = *(_OWORD *)(a2 + 264);
      LOBYTE(v52) = 0;
      v54 = 0;
      if (*(_BYTE *)(a2 + 304))
      {
        v22 = *(std::__shared_weak_count **)(a2 + 296);
        v52 = *(_QWORD *)(a2 + 288);
        v53 = v22;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v54 = 1;
      }
      v25 = *(_QWORD *)(a2 + 328);
      v55 = *(_OWORD *)(a2 + 312);
      v57 = 1;
      v56 = v25;
      *(_QWORD *)&__p[8] = off_24C9C3740;
      v14 = sub_20E879FB4(a1 + 3600, (uint64_t)__p, a4);
      if (v54)
      {
        v26 = v53;
        if (v53)
        {
          v27 = (unint64_t *)&v53->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      if (v36)
      {
        if (SHIBYTE(v35) < 0)
          operator delete((void *)v34);
      }
      return v14;
    }
    return 0;
  }
  return sub_20E986200(a1 + 8, a2, a3, a4);
}

void sub_20E903834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30)
  {
    if (a29 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMSessionRemoveAnchor(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3)
{
  return sub_20E9038B8(a1, a2, 0, a3);
}

uint64_t sub_20E9038B8(uint64_t a1, const __CFUUID *a2, CFIndex a3, CFTypeRef *a4)
{
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  char *v15;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  unint64_t *v21;
  CFTypeRef v22;
  unint64_t *p_shared_owners;
  uint64_t v24;
  int v26;
  std::string v27;
  unsigned __int8 v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  std::string __p;
  __int128 v32;
  uint64_t v33;
  char v34;
  _BYTE v35[40];
  unsigned __int8 v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&__p, "SLAM session is NULL");
    v15 = (char *)operator new(0x78uLL);
    *(_QWORD *)v35 = v15;
    *(_OWORD *)&v35[8] = xmmword_2102DBBE0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      v27.__r_.__value_.__r.__words[0] = 22;
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      sub_20EA67538((const std::error_condition *)&v27, (uint64_t)&__p, (CFErrorRef *)&v37);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v16 = (const void *)v37;
      if ((_QWORD)v37)
        CFRetain((CFTypeRef)v37);
      *a4 = v16;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (!*((_QWORD *)&v37 + 1))
        goto LABEL_42;
      v18 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_41;
    }
    goto LABEL_44;
  }
  if (!a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102DCA30;
    strcpy(__p.__r_.__value_.__l.__data_, "Trying to remove an anchor from SLAM with a NULL UUID");
    v15 = (char *)operator new(0x78uLL);
    *(_QWORD *)v35 = v15;
    *(_OWORD *)&v35[8] = xmmword_2102DBBE0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      v27.__r_.__value_.__r.__words[0] = 22;
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      sub_20EA67538((const std::error_condition *)&v27, (uint64_t)&__p, (CFErrorRef *)&v37);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v20 = (const void *)v37;
      if ((_QWORD)v37)
        CFRetain((CFTypeRef)v37);
      *a4 = v20;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (!*((_QWORD *)&v37 + 1))
        goto LABEL_42;
      v21 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v19 = __ldaxr(v21);
      while (__stlxr(v19 - 1, v21));
      goto LABEL_41;
    }
LABEL_44:
    operator delete(v15);
    goto LABEL_45;
  }
  v8 = CFUUIDGetTypeID();
  if (CFGetTypeID(a2) == v8)
  {
    *(CFUUIDBytes *)&__p.__r_.__value_.__l.__data_ = CFUUIDGetUUIDBytes(a2);
    v9 = sub_20EA68D10((uint64_t)&__p);
    v10 = 0;
    *(_QWORD *)&v37 = v9;
    *((_QWORD *)&v37 + 1) = v11;
    v38 = 1;
    do
    {
      v12 = *((unsigned __int8 *)&v37 + v10);
      if (*((_BYTE *)&v37 + v10))
        v13 = 1;
      else
        v13 = v10 == 15;
      ++v10;
    }
    while (!v13);
    if (v12)
    {
      sub_20EA5E5C4(a3, &v27);
      *(_OWORD *)v35 = v37;
      v35[16] = 0;
      v36 = 0;
      v14 = v28;
      if (v28)
      {
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
        else
          __p = v27;
        *(std::string *)&v35[16] = __p;
        v26 = 1;
        v36 = 1;
        if (*(_BYTE *)(a1 + 3601))
          goto LABEL_55;
      }
      else
      {
        v26 = 0;
        if (*(_BYTE *)(a1 + 3601))
        {
LABEL_55:
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 2520);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v35;
          LOBYTE(v32) = 0;
          v34 = 0;
          if (v14)
          {
            if ((v35[39] & 0x80000000) != 0)
            {
              sub_20E860C04(&v32, *(void **)&v35[16], *(unint64_t *)&v35[24]);
            }
            else
            {
              v32 = *(_OWORD *)&v35[16];
              v33 = *(_QWORD *)&v35[32];
            }
            v34 = 1;
          }
          v24 = sub_20E87A168(a1 + 3600, (uint64_t)&__p, a4);
          if (v34 && SHIBYTE(v33) < 0)
            operator delete((void *)v32);
          goto LABEL_63;
        }
      }
      v24 = sub_20E9872F0((_QWORD *)(a1 + 8), (uint64_t)v35, a4);
      v26 = v36;
LABEL_63:
      if (v26 && (v35[39] & 0x80000000) != 0)
        operator delete(*(void **)&v35[16]);
      if (v28 && SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      return v24;
    }
  }
  else
  {
    LOBYTE(v37) = 0;
    v38 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102D7440;
  strcpy(__p.__r_.__value_.__l.__data_, "Trying to remove an anchor from SLAM with an invalid UUID");
  v15 = (char *)operator new(0x78uLL);
  *(_QWORD *)v35 = v15;
  *(_OWORD *)&v35[8] = xmmword_2102DBBE0;
  strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (!a4)
    goto LABEL_44;
  v27.__r_.__value_.__r.__words[0] = 22;
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
  sub_20EA67538((const std::error_condition *)&v27, (uint64_t)&__p, (CFErrorRef *)&cf);
  if (*a4)
    CFRelease(*a4);
  *a4 = 0;
  v22 = cf;
  if (cf)
    CFRetain(cf);
  *a4 = v22;
  v17 = v30;
  if (!v30)
    goto LABEL_42;
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
LABEL_41:
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((v35[23] & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_43;
  }
LABEL_42:
  if ((v35[23] & 0x80000000) != 0)
  {
LABEL_43:
    v15 = *(char **)v35;
    goto LABEL_44;
  }
LABEL_45:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20E903DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  int v43;

  if (a33 && a32 < 0)
    operator delete(__p);
  if (v43 && a42 < 0)
    operator delete(a37);
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(a9);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMSessionRemoveAnchorFromGroup(uint64_t a1, const __CFUUID *a2, CFIndex a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a3)
    return sub_20E9038B8(a1, a2, a3, a4);
  __p = operator new(0x38uLL);
  v12 = xmmword_2102DBF10;
  strcpy((char *)__p, "The group ID can not be null when removing an anchor");
  v6 = (char *)operator new(0x78uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E90406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DSLAMListAnchorGroups(CFIndex a1, CFTypeRef *a2)
{
  std::string::size_type size;
  std::string *v4;
  unsigned __int8 v5;
  CFTypeRef v6;
  void **v7;
  void **v8;
  void *v10;
  const void *v11;
  std::__shared_weak_count *cat;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  const std::error_category *v16;
  CFErrorRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string __p;
  std::string v22;
  char v23;
  void *v24;
  __int128 v25;
  CFErrorRef v26;
  std::__shared_weak_count *v27;
  std::error_condition v28;

  if (!a1)
  {
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v22.__r_.__value_.__r.__words[1] = xmmword_2102DBFF0;
    strcpy(v22.__r_.__value_.__l.__data_, "The mapping_dir can not be NULL");
    v10 = operator new(0x78uLL);
    v24 = v10;
    v25 = xmmword_2102DBBE0;
    strcpy((char *)v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      __p.__r_.__value_.__r.__words[0] = 22;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      sub_20EA67538((const std::error_condition *)&__p, (uint64_t)&v22, (CFErrorRef *)&v28);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = *(const void **)&v28.__val_;
      if (*(_QWORD *)&v28.__val_)
        CFRetain(*(CFTypeRef *)&v28.__val_);
      *a2 = v11;
      cat = (std::__shared_weak_count *)v28.__cat_;
      if (v28.__cat_)
      {
        v13 = (unint64_t *)&v28.__cat_[1];
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
          std::__shared_weak_count::__release_weak(cat);
        }
      }
      if ((SHIBYTE(v25) & 0x80000000) == 0)
        goto LABEL_31;
      v10 = v24;
    }
    operator delete(v10);
LABEL_31:
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    return 0;
  }
  sub_20EA5E5C4(a1, &v22);
  if (!v23)
  {
    v24 = operator new(0x20uLL);
    v25 = xmmword_2102DB480;
    strcpy((char *)v24, "The mapping_dir is invalid");
    v15 = (char *)operator new(0x78uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102DBBE0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      v16 = std::generic_category();
      *(_QWORD *)&v28.__val_ = 22;
      v28.__cat_ = v16;
      sub_20EA67538(&v28, (uint64_t)&v24, &v26);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v17 = v26;
      if (v26)
        CFRetain(v26);
      *a2 = v17;
      v18 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
      v15 = (char *)__p.__r_.__value_.__r.__words[0];
    }
    operator delete(v15);
LABEL_47:
    if (SHIBYTE(v25) < 0)
      operator delete(v24);
    v6 = 0;
    goto LABEL_50;
  }
  memset(&__p, 0, sizeof(__p));
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v22;
  else
    v4 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v22.__r_.__value_.__l.__size_;
  sub_20E8A9678(&__p, v4, (std::string *)((char *)v4 + size));
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  sub_20EE26C70((uint64_t)&__p, (uint64_t)&off_254A5A4B8, (uint64_t)&v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = sub_210123C0C((uint64_t *)&v24);
  v7 = (void **)v24;
  if (v24)
  {
    v8 = (void **)v25;
    if ((void *)v25 == v24)
    {
      *(_QWORD *)&v25 = v24;
      operator delete(v24);
      if (!v23)
        return v6;
    }
    else
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      *(_QWORD *)&v25 = v7;
      operator delete(v24);
      if (!v23)
        return v6;
    }
    goto LABEL_51;
  }
LABEL_50:
  if (!v23)
    return v6;
LABEL_51:
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v6;
  operator delete(v22.__r_.__value_.__l.__data_);
  return v6;
}

void sub_20E9044A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a27 < 0)
    operator delete(__p);
  if (a21)
  {
    if (a20 < 0)
      operator delete(a15);
  }
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMSessionSetLineEnablementPolicy(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E98B0DC((uint64_t *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x40uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBBD0;
    strcpy((char *)__p[0], "Cannot set the line enablement policy when using writers");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_25:
      v4 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E9047E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionGetSessionID(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E987904((_QWORD *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x78uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DC860;
    strcpy((char *)__p[0], "Cannot get the session id when using writers. This should be called once at construction before the writers are created");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_25:
      v4 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E904AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSetCMDataBlock(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_20E987C5C((_QWORD *)(a1 + 8), a2, a3);
  v12 = 20;
  strcpy(__p, "SLAM session is NULL");
  v5 = (char *)operator new(0x78uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E904CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushCMData(uint64_t a1, unsigned int a2, const void *a3, CFTypeRef *a4)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *v11;
  char *v13;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E9881BC((_QWORD *)(a1 + 8), a2, a3, a4);
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DCA10;
    strcpy((char *)__p[0], "CM not supported when using writers");
    v5 = (char *)operator new(0x78uLL);
    v13 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v17.__val_ = 102;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v6;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_20:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v13;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    v13 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v10;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v11);
      while (__stlxr(v9 - 1, v11));
      goto LABEL_20;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E904F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushSLAMCMData(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
    {
      if (*(_BYTE *)(a1 + 3601))
        return sub_20E87B5D8(a1 + 3600, a2, a3);
      else
        return sub_20E988B80((_QWORD *)(a1 + 8), a2 + 8, a3);
    }
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DC900;
    strcpy((char *)__p[0], "Trying to push CM Data when the data is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_27;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_22:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_27:
      v5 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_27;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_22;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E905278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMSessionCreateCMPoseAnchorData(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, CFDataRef *a5, CFTypeRef *a6, double a7)
{
  CFTypeID v14;
  uint64_t v15;
  __int128 v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  CFTypeRef v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  std::__shared_weak_count *cat;
  unint64_t *v33;
  unint64_t v34;
  const void *v35;
  unint64_t *v36;
  const void *v37;
  unint64_t *v38;
  uint64_t v40;
  __int128 v41;
  char *v42;
  __int128 v43;
  CFTypeRef cf;
  std::__shared_weak_count *v45;
  std::error_condition v46;
  _BYTE __p[24];
  double v48;
  int64x2_t v49;
  __int128 v50;
  int64x2_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    __p[23] = 20;
    strcpy(__p, "SLAM session is NULL");
    v30 = (char *)operator new(0x78uLL);
    v42 = v30;
    v43 = xmmword_2102DBBE0;
    strcpy(v30, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a6)
    {
      v40 = 22;
      *(_QWORD *)&v41 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v40, (uint64_t)__p, (CFErrorRef *)&v46);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v31 = *(const void **)&v46.__val_;
      if (*(_QWORD *)&v46.__val_)
        CFRetain(*(CFTypeRef *)&v46.__val_);
      *a6 = v31;
      cat = (std::__shared_weak_count *)v46.__cat_;
      if (!v46.__cat_)
        goto LABEL_49;
      v33 = (unint64_t *)&v46.__cat_[1];
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
LABEL_48:
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v43) & 0x80000000) == 0)
        {
LABEL_52:
          if ((__p[23] & 0x80000000) != 0)
          {
            v29 = *(char **)__p;
            goto LABEL_54;
          }
          return 0;
        }
        goto LABEL_50;
      }
LABEL_49:
      if ((SHIBYTE(v43) & 0x80000000) == 0)
        goto LABEL_52;
LABEL_50:
      v30 = v42;
    }
LABEL_51:
    operator delete(v30);
    goto LABEL_52;
  }
  if (!a3 || !a4)
  {
    *(_QWORD *)__p = operator new(0x40uLL);
    *(_OWORD *)&__p[8] = xmmword_2102D7440;
    strcpy(*(char **)__p, "Trying to push create a pose anchor with NULL parameters.");
    v30 = (char *)operator new(0x78uLL);
    v42 = v30;
    v43 = xmmword_2102DBBE0;
    strcpy(v30, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a6)
    {
      v40 = 22;
      *(_QWORD *)&v41 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v40, (uint64_t)__p, (CFErrorRef *)&v46);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v35 = *(const void **)&v46.__val_;
      if (*(_QWORD *)&v46.__val_)
        CFRetain(*(CFTypeRef *)&v46.__val_);
      *a6 = v35;
      cat = (std::__shared_weak_count *)v46.__cat_;
      if (!v46.__cat_)
        goto LABEL_49;
      v36 = (unint64_t *)&v46.__cat_[1];
      do
        v34 = __ldaxr(v36);
      while (__stlxr(v34 - 1, v36));
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  if (!a2 || (v14 = CFUUIDGetTypeID(), CFGetTypeID(a2) != v14))
  {
    *(_QWORD *)__p = operator new(0x40uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DBC30;
    strcpy(*(char **)__p, "Trying to push create a pose anchor with an invalid anchor id.");
    v30 = (char *)operator new(0x78uLL);
    v42 = v30;
    v43 = xmmword_2102DBBE0;
    strcpy(v30, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a6)
    {
      v40 = 22;
      *(_QWORD *)&v41 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v40, (uint64_t)__p, (CFErrorRef *)&v46);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v37 = *(const void **)&v46.__val_;
      if (*(_QWORD *)&v46.__val_)
        CFRetain(*(CFTypeRef *)&v46.__val_);
      *a6 = v37;
      cat = (std::__shared_weak_count *)v46.__cat_;
      if (!v46.__cat_)
        goto LABEL_49;
      v38 = (unint64_t *)&v46.__cat_[1];
      do
        v34 = __ldaxr(v38);
      while (__stlxr(v34 - 1, v38));
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes((CFUUIDRef)a2);
  v15 = sub_20EA68D10((uint64_t)__p);
  *(_QWORD *)&v16 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&v16 + 1) = *(_QWORD *)(a3 + 40);
  v17 = *(int64x2_t *)a3;
  v18 = *(int64x2_t *)(a3 + 24);
  v19 = vzip2q_s64(*(int64x2_t *)a3, v18);
  v53 = xmmword_2102DCAB8;
  v54 = unk_2102DCAC8;
  v55 = xmmword_2102DCAD8;
  v56 = unk_2102DCAE8;
  v49 = (int64x2_t)xmmword_2102DCA78;
  v50 = unk_2102DCA88;
  v51 = v19;
  v52 = unk_2102DCAA8;
  *(_QWORD *)&__p[8] = v15;
  *(_QWORD *)&__p[16] = v20;
  v48 = a7;
  v21 = *(_QWORD *)(a3 + 64);
  v22 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)&v50 = *(_QWORD *)(a3 + 48);
  v49 = vzip1q_s64(v17, v18);
  *(_QWORD *)&v52 = *((_QWORD *)&v22 + 1);
  *(_QWORD *)&v54 = v21;
  v53 = v16;
  v23 = *(_OWORD *)a4;
  *(_QWORD *)&v56 = *(_QWORD *)(a4 + 16);
  v55 = v23;
  if (*(_BYTE *)(a1 + 3601))
  {
    v42 = (char *)operator new(0x28uLL);
    v43 = xmmword_2102DCA10;
    strcpy(v42, "CM not supported when using writers");
    v24 = (char *)operator new(0x78uLL);
    v40 = (uint64_t)v24;
    v41 = xmmword_2102DBBE0;
    strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a6)
    {
      *(_QWORD *)&v46.__val_ = 102;
      v46.__cat_ = std::generic_category();
      sub_20EA67538(&v46, (uint64_t)&v42, (CFErrorRef *)&cf);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v25 = cf;
      if (cf)
        CFRetain(cf);
      *a6 = v25;
      v26 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if ((SHIBYTE(v41) & 0x80000000) == 0)
      {
LABEL_20:
        if (SHIBYTE(v43) < 0)
        {
          v29 = v42;
LABEL_54:
          operator delete(v29);
          return 0;
        }
        return 0;
      }
      v24 = (char *)v40;
    }
    operator delete(v24);
    goto LABEL_20;
  }
  return sub_20E9890E4((uint64_t *)(a1 + 8), (uint64_t)__p, a5, a6);
}

void sub_20E905878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMSessionGetCMPoseAnchorTransformation(uint64_t a1, CFDataRef theData, _OWORD *a3, void **a4, uint64_t a5, uint64_t a6, CFTypeRef *a7)
{
  CFIndex Length;
  size_t v15;
  UInt8 *BytePtr;
  void *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *v22;
  void *v23;
  CFTypeRef v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  CFTypeRef v28;
  unint64_t *v29;
  CFTypeRef v30;
  unint64_t *v31;
  CFTypeRef v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  CFTypeRef cf;
  std::__shared_weak_count *v38;
  std::error_condition v39;
  void *__p;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    HIBYTE(v51[2]) = 20;
    strcpy((char *)v51, "SLAM session is NULL");
    v23 = operator new(0x78uLL);
    __p = v23;
    v41 = xmmword_2102DBBE0;
    strcpy((char *)v23, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a7)
    {
      v35 = 22;
      *(_QWORD *)&v36 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v35, (uint64_t)v51, (CFErrorRef *)&v33);
      if (*a7)
        CFRelease(*a7);
      *a7 = 0;
      v24 = v33;
      if (v33)
        CFRetain(v33);
      *a7 = v24;
      v25 = (std::__shared_weak_count *)v34;
      if (!(_QWORD)v34)
        goto LABEL_49;
      v26 = (unint64_t *)(v34 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
LABEL_48:
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        if ((SHIBYTE(v41) & 0x80000000) == 0)
        {
LABEL_52:
          if (SHIBYTE(v51[2]) < 0)
          {
            v22 = v51[0];
            goto LABEL_54;
          }
          return 0;
        }
        goto LABEL_50;
      }
LABEL_49:
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_52;
LABEL_50:
      v23 = __p;
    }
LABEL_51:
    operator delete(v23);
    goto LABEL_52;
  }
  if (!theData)
  {
    v51[0] = (char *)operator new(0x40uLL);
    *(_OWORD *)&v51[1] = xmmword_2102DBBD0;
    strcpy(v51[0], "Trying to get pose anchor metadata with NULL parameters.");
    v23 = operator new(0x78uLL);
    __p = v23;
    v41 = xmmword_2102DBBE0;
    strcpy((char *)v23, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a7)
    {
      v35 = 22;
      *(_QWORD *)&v36 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v35, (uint64_t)v51, (CFErrorRef *)&v33);
      if (*a7)
        CFRelease(*a7);
      *a7 = 0;
      v28 = v33;
      if (v33)
        CFRetain(v33);
      *a7 = v28;
      v25 = (std::__shared_weak_count *)v34;
      if (!(_QWORD)v34)
        goto LABEL_49;
      v29 = (unint64_t *)(v34 + 8);
      do
        v27 = __ldaxr(v29);
      while (__stlxr(v27 - 1, v29));
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  Length = CFDataGetLength(theData);
  if (!Length)
  {
    HIBYTE(v51[2]) = 16;
    strcpy((char *)v51, "Empty data blob.");
    v23 = operator new(0x78uLL);
    __p = v23;
    v41 = xmmword_2102DBBE0;
    strcpy((char *)v23, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a7)
    {
      v35 = 22;
      *(_QWORD *)&v36 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v35, (uint64_t)v51, (CFErrorRef *)&v33);
      if (*a7)
        CFRelease(*a7);
      *a7 = 0;
      v30 = v33;
      if (v33)
        CFRetain(v33);
      *a7 = v30;
      v25 = (std::__shared_weak_count *)v34;
      if (!(_QWORD)v34)
        goto LABEL_49;
      v31 = (unint64_t *)(v34 + 8);
      do
        v27 = __ldaxr(v31);
      while (__stlxr(v27 - 1, v31));
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  v15 = Length;
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  __p = 0;
  v41 = 0uLL;
  sub_20E9061AC(BytePtr, v15, (uint64_t)v51, (unsigned __int8 *)&__p, v15);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  __p = v51[0];
  v41 = *(_OWORD *)&v51[1];
  v49 = v58;
  v50 = v59;
  v47 = v56;
  v48 = v57;
  v45 = v54;
  v46 = v55;
  v43 = v52;
  v44 = v53;
  v42 = v60;
  if (*(_BYTE *)(a1 + 3601))
  {
    v35 = (uint64_t)operator new(0x28uLL);
    v36 = xmmword_2102DCA10;
    strcpy((char *)v35, "CM not supported when using writers");
    v17 = operator new(0x78uLL);
    v33 = v17;
    v34 = xmmword_2102DBBE0;
    strcpy((char *)v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a7)
    {
      *(_QWORD *)&v39.__val_ = 102;
      v39.__cat_ = std::generic_category();
      sub_20EA67538(&v39, (uint64_t)&v35, (CFErrorRef *)&cf);
      if (*a7)
        CFRelease(*a7);
      *a7 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a7 = v18;
      v19 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if ((SHIBYTE(v34) & 0x80000000) == 0)
      {
LABEL_20:
        if (SHIBYTE(v36) < 0)
        {
          v22 = (char *)v35;
LABEL_54:
          operator delete(v22);
          return 0;
        }
        return 0;
      }
      v17 = (void *)v33;
    }
    operator delete(v17);
    goto LABEL_20;
  }
  return sub_20E98A548((uint64_t *)(a1 + 8), (uint64_t)&__p, a3, a4, a5, a6, a7);
}

void sub_20E905EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  _Unwind_Resume(a1);
}

void sub_20E9061AC(void *__src, size_t __n, uint64_t a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::ios_base::failure *exception;
  std::error_code v24;
  std::string __msg;
  std::string __p;
  uint64_t (**v27)();
  void (**v28)();
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[12];
  char v33;
  uint64_t v34;
  __int128 __dst;
  unint64_t v36;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v36 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v36) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v32, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(&v27, (uint64_t *)&__p, (uint64_t)v32, a5);
  v27 = &off_24C9B0298;
  v28 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v31, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_38;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v24.__val_ = 1;
      v24.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v24);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  sub_20E9EDADC(v31, &__p);
  sub_20E9EDE6C(v31, (_QWORD *)a3);
  v20 = v31;
  sub_20E9ED7B4(v31, (_BYTE *)(a3 + 8));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 9));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 10));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 11));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 12));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 13));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 14));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 15));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 16));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 17));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 18));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 19));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 20));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 21));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 22));
  sub_20E9ED7B4(v20, (_BYTE *)(a3 + 23));
  v21 = v31;
  sub_20E9EE078(v31, (double *)(a3 + 24));
  sub_20E9EE078(v21, (double *)(a3 + 32));
  sub_20E9EE078(v21, (double *)(a3 + 40));
  sub_20E9EE078(v21, (double *)(a3 + 48));
  sub_20E9EE078(v21, (double *)(a3 + 56));
  sub_20E9EE078(v21, (double *)(a3 + 64));
  sub_20E9EE078(v21, (double *)(a3 + 72));
  sub_20E9EE078(v21, (double *)(a3 + 80));
  sub_20E9EE078(v21, (double *)(a3 + 88));
  sub_20E9EE078(v21, (double *)(a3 + 96));
  sub_20E9EE078(v21, (double *)(a3 + 104));
  sub_20E9EE078(v21, (double *)(a3 + 112));
  sub_20E9EE078(v21, (double *)(a3 + 120));
  sub_20E9EE078(v21, (double *)(a3 + 128));
  sub_20E9EE078(v21, (double *)(a3 + 136));
  sub_20E9EE078(v21, (double *)(a3 + 144));
  sub_20E9EE078(v31, (double *)(a3 + 152));
  v27 = &off_24C9B71C0;
  v28 = (void (**)())&unk_24C9B7308;
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    sub_20E9EF740((_QWORD *)(v22 + 8));
    MEMORY[0x212BC6398](v22, 0x10F2C40853B94B7);
  }
  v28 = off_24C9B7428;
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  v32[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v32[2] = MEMORY[0x24BEDB848] + 16;
  if (v33 < 0)
    operator delete((void *)v32[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v34);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)__dst);
}

void sub_20E906638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionEnableCM(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  __int128 v11;
  char __p[21];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    LOBYTE(v10) = a2;
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E98ABFC((uint64_t *)(a1 + 8), (uint64_t)&v10, a3);
    *(_QWORD *)__p = *(_QWORD *)(a1 + 2520);
    __p[8] = a2;
    return sub_20E87B424(a1 + 3600, (uint64_t)__p, a3);
  }
  v13 = 20;
  strcpy(__p, "SLAM session is NULL");
  v5 = (char *)operator new(0x78uLL);
  v10 = v5;
  v11 = xmmword_2102DBBE0;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      goto LABEL_17;
    v5 = v10;
  }
  operator delete(v5);
LABEL_17:
  if (v13 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E906898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSetSemanticsCameraCalibration(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E98B478((_QWORD *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x90uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DCA40;
    strcpy((char *)__p[0], "Cannot set the semantics camera calibration when using writers. This should be called once at construction before the writers are created");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_25:
      v4 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E906B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionForce3DOFTracking(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3601))
    {
      v3 = a1 + 3600;
      *(_QWORD *)__p = sub_210215600(2);
      return sub_20E87B78C(v3, (uint64_t)__p, a2);
    }
    else
    {
      return sub_20E98B878((uint64_t *)(a1 + 8), a2);
    }
  }
  else
  {
    v11 = 20;
    strcpy(__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v11 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E906D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionForce6DOFTracking(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3601))
    {
      v3 = a1 + 3600;
      *(_QWORD *)__p = sub_210215600(2);
      return sub_20E87B940(v3, (uint64_t)__p, a2);
    }
    else
    {
      return sub_20E98BA98((uint64_t *)(a1 + 8), a2);
    }
  }
  else
  {
    v11 = 20;
    strcpy(__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v11 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E906F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSet3DOFNeckModel(uint64_t a1, uint64_t a2, __int128 *a3, CFTypeRef *a4)
{
  __int128 v5;
  __int128 v6;
  char *v8;
  CFErrorRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE __p[32];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  CFErrorRef v21;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  if (a1)
  {
    v5 = *(_OWORD *)(a2 + 48);
    v14 = *(_OWORD *)(a2 + 32);
    v15 = v5;
    v16 = *(_QWORD *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)__p = *(_OWORD *)a2;
    *(_OWORD *)&__p[16] = v6;
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87BAF4(a1 + 3600, (uint64_t)__p, a4);
    else
      return sub_20E98BCB8((uint64_t *)(a1 + 8), (uint64_t)__p, a4);
  }
  __p[23] = 20;
  strcpy(__p, "SLAM session is NULL");
  v8 = (char *)operator new(0x78uLL);
  v19 = v8;
  v20 = xmmword_2102DBBE0;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a4)
  {
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_20EA67538(&v23, (uint64_t)__p, &v21);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v9 = v21;
    if (v21)
      CFRetain(v21);
    *a4 = v9;
    v10 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_17;
    v8 = v19;
  }
  operator delete(v8);
LABEL_17:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9071A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionReset3DOFPosition(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3601))
    {
      v3 = a1 + 3600;
      *(_QWORD *)__p = sub_210215600(2);
      return sub_20E87C1C4(v3, (uint64_t)__p, a2);
    }
    else
    {
      return sub_20E98BED8((uint64_t *)(a1 + 8), a2);
    }
  }
  else
  {
    v11 = 20;
    strcpy(__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v11 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E9073A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionSetOutputMapPoints(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E98C0F8((uint64_t *)(a1 + 8), a2, a3);
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DCA50;
    strcpy((char *)__p[0], "Cannot set output map points when using writers.");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_25:
      v4 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    v12 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_25;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E907674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionGlobalOptimizeMapAndTrajectory(uint64_t a1, __CFData *a2, __CFDictionary *a3, __CFData *a4, CFTypeRef *a5)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *v12;
  char *v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 3601))
      return sub_20E98C330((uint64_t *)(a1 + 8), a2, a3, a4, a5);
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DCA60;
    strcpy((char *)__p[0], "Cannot global optimize the map when using writers.");
    v6 = (char *)operator new(0x78uLL);
    v14 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a5)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v7;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_20:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v14;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v6 = (char *)operator new(0x78uLL);
    v14 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a5)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v11;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v12);
      while (__stlxr(v10 - 1, v12));
      goto LABEL_20;
    }
  }
  operator delete(v6);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E907954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionFillDebugHandle(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  char *v13;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (a2)
      return sub_20E98CB10((uint64_t *)(a1 + 8), a2 + 8, a3, a4);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFE0;
    strcpy((char *)__p[0], "CV3DSLAMDebugRef is NULL.");
    v6 = (char *)operator new(0x78uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v11;
      v8 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v13;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v6 = (char *)operator new(0x78uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v7;
      v8 = v16;
      if (!v16)
        goto LABEL_25;
      v9 = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E907C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPushMetricDepth(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a2 + 8);
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFF0;
    strcpy((char *)__p[0], "CV3DMetricDepthDataRef is NULL.");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E907F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionCreateCameraCalibration(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  char cf[21];
  char v19;
  CFTypeRef v20;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  if (!a1)
  {
    v19 = 20;
    strcpy(cf, "SLAM session is NULL");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_20EA67538(&v22, (uint64_t)cf, (CFErrorRef *)&v20);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = v20;
      if (v20)
        CFRetain(v20);
      *a2 = v11;
      v12 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if (v19 < 0)
      operator delete(*(void **)cf);
    return 0;
  }
  sub_20E98D294((_QWORD *)(a1 + 8), a2, cf);
  v4 = *(_QWORD *)cf;
  v3 = *(std::__shared_weak_count **)&cf[8];
  if (!*(_QWORD *)&cf[8])
    goto LABEL_7;
  v5 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 - 1, v5));
  if (v7)
  {
LABEL_7:
    if (v4)
      goto LABEL_8;
LABEL_26:
    v8 = 0;
    v9 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      return v8;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v4)
    goto LABEL_26;
LABEL_8:
  v8 = *(_QWORD *)cf;
  if (*(_QWORD *)cf)
    CFRetain(*(CFTypeRef *)cf);
  v9 = *(std::__shared_weak_count **)&cf[8];
  if (!*(_QWORD *)&cf[8])
    return v8;
LABEL_27:
  v16 = (unint64_t *)&v9->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return v8;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return v8;
}

void sub_20E9081E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionCopyJasperCameraCalibration(uint64_t a1, void *a2, _DWORD *a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_20E98D9E8(a1 + 8, a2, a3, a4);
  v12 = 20;
  strcpy(__p, "SLAM session is NULL");
  v6 = (char *)operator new(0x78uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9083C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPauseMappingIO(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[21];
  char v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    __p[0] = 1;
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87A4D0(a1 + 3600, (uint64_t)__p, a2);
    else
      return sub_20E98DE30((_QWORD *)(a1 + 8), (uint64_t)__p, a2);
  }
  else
  {
    v10 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v10 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E9085C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionResumeMappingIO(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[21];
  char v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    __p[0] = 0;
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87A4D0(a1 + 3600, (uint64_t)__p, a2);
    else
      return sub_20E98DE30((_QWORD *)(a1 + 8), (uint64_t)__p, a2);
  }
  else
  {
    v10 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v10 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E9087BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionForceVisualSLAMHint(uint64_t a1, CFTypeRef *a2)
{
  return CV3DSLAMSessionRequestTravelModeHintWithPlatformType(a1, 0, a2);
}

uint64_t CV3DSLAMSessionRequestTravelModeHintWithPlatformType(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    __p[0] = a2;
    *(_QWORD *)&__p[8] = *(_QWORD *)(a1 + 2520);
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87ABA0(a1 + 3600, (uint64_t)__p, a3);
    else
      return sub_20E983AB8((uint64_t *)(a1 + 8), (uint64_t)__p, a3);
  }
  else
  {
    v11 = 20;
    strcpy(__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v11 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E9089CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionEnableTravelModeAlertIn3DoF(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[21];
  char v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    __p[0] = 0;
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87AD54(a1 + 3600, (uint64_t)__p, a2);
    else
      return sub_20E983CEC((uint64_t *)(a1 + 8), (uint64_t)__p, a2);
  }
  else
  {
    v10 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v10 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E908BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionForceVisualSLAMRecentering(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[21];
  char v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    __p[0] = 0;
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87AF08(a1 + 3600, (uint64_t)__p, a2);
    else
      return sub_20E983F20((uint64_t *)(a1 + 8), (uint64_t)__p, a2);
  }
  else
  {
    v10 = 20;
    strcpy(__p, "SLAM session is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v10 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E908DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMSessionPauseAndResume(uint64_t a1, unsigned __int8 a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    *(_WORD *)__p = a2;
    if (*(_BYTE *)(a1 + 3601))
      return sub_20E87A9EC(a1 + 3600, (uint64_t)__p, a3);
    else
      return sub_20E984154((uint64_t *)(a1 + 8), (uint64_t)__p, a3);
  }
  else
  {
    v11 = 20;
    strcpy(__p, "SLAM session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAM/CV3DSLAMSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v11 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E908FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E909008(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_20E86AC88(a1 + 8, a2 + 8);
  memcpy((void *)(a1 + 11432), (const void *)(a2 + 11432), 0x356uLL);
  *(_OWORD *)(a1 + 12288) = *(_OWORD *)(a2 + 12288);
  v4 = *(_OWORD *)(a2 + 12304);
  v5 = *(_OWORD *)(a2 + 12320);
  v6 = *(_OWORD *)(a2 + 12336);
  *(_QWORD *)(a1 + 12352) = *(_QWORD *)(a2 + 12352);
  *(_OWORD *)(a1 + 12336) = v6;
  *(_OWORD *)(a1 + 12320) = v5;
  *(_OWORD *)(a1 + 12304) = v4;
  *(_QWORD *)(a1 + 12360) = 0;
  *(_QWORD *)(a1 + 12376) = 0;
  *(_QWORD *)(a1 + 12368) = 0;
  v7 = *(char **)(a2 + 12360);
  v8 = *(char **)(a2 + 12368);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v10 = (char *)operator new(v8 - v7);
    *(_QWORD *)(a1 + 12360) = v10;
    *(_QWORD *)(a1 + 12368) = v10;
    *(_QWORD *)(a1 + 12376) = &v10[8 * (v9 >> 3)];
    if ((unint64_t)(v9 - 24) >= 0x108
      && ((v11 = (v9 - 24) / 0x18uLL, v12 = 24 * v11 + 24, v10 < &v7[v12]) ? (v13 = v7 >= &v10[v12]) : (v13 = 1), v13))
    {
      v14 = v11 + 1;
      v15 = (v11 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v16 = &v7[24 * v15];
      v17 = &v10[24 * v15];
      v18 = v15;
      do
      {
        v19 = *((_OWORD *)v7 + 1);
        v21 = *((_OWORD *)v7 + 4);
        v20 = *((_OWORD *)v7 + 5);
        v22 = *((_OWORD *)v7 + 2);
        v23 = *((_OWORD *)v7 + 3);
        *(_OWORD *)v10 = *(_OWORD *)v7;
        *((_OWORD *)v10 + 1) = v19;
        *((_OWORD *)v10 + 2) = v22;
        *((_OWORD *)v10 + 3) = v23;
        *((_OWORD *)v10 + 4) = v21;
        *((_OWORD *)v10 + 5) = v20;
        v10 += 96;
        v7 += 96;
        v18 -= 4;
      }
      while (v18);
      if (v14 == v15)
        goto LABEL_15;
    }
    else
    {
      v16 = v7;
      v17 = v10;
    }
    do
    {
      *(_QWORD *)v17 = *(_QWORD *)v16;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v16 + 1);
      *((_QWORD *)v17 + 2) = *((_QWORD *)v16 + 2);
      v17 += 24;
      v16 += 24;
    }
    while (v16 != v8);
LABEL_15:
    *(_QWORD *)(a1 + 12368) = v17;
  }
  v24 = *(_OWORD *)(a2 + 12384);
  v25 = *(_OWORD *)(a2 + 12400);
  v26 = *(_OWORD *)(a2 + 12416);
  *(_OWORD *)(a1 + 12432) = *(_OWORD *)(a2 + 12432);
  *(_OWORD *)(a1 + 12416) = v26;
  *(_OWORD *)(a1 + 12400) = v25;
  *(_OWORD *)(a1 + 12384) = v24;
  v27 = *(_OWORD *)(a2 + 12528);
  v28 = *(_OWORD *)(a2 + 12544);
  v29 = *(_OWORD *)(a2 + 12560);
  *(_OWORD *)(a1 + 12512) = *(_OWORD *)(a2 + 12512);
  *(_OWORD *)(a1 + 12560) = v29;
  *(_OWORD *)(a1 + 12544) = v28;
  *(_OWORD *)(a1 + 12528) = v27;
  v30 = *(_OWORD *)(a2 + 12592);
  v31 = *(_OWORD *)(a2 + 12608);
  v32 = *(_OWORD *)(a2 + 12624);
  *(_OWORD *)(a1 + 12576) = *(_OWORD *)(a2 + 12576);
  *(_OWORD *)(a1 + 12624) = v32;
  *(_OWORD *)(a1 + 12608) = v31;
  *(_OWORD *)(a1 + 12592) = v30;
  v33 = *(_OWORD *)(a2 + 12448);
  v34 = *(_OWORD *)(a2 + 12464);
  v35 = *(_OWORD *)(a2 + 12480);
  *(_OWORD *)(a1 + 12496) = *(_OWORD *)(a2 + 12496);
  *(_OWORD *)(a1 + 12480) = v35;
  *(_OWORD *)(a1 + 12464) = v34;
  *(_OWORD *)(a1 + 12448) = v33;
  sub_20E86F7FC(a1 + 12640, a2 + 12640);
  *(_BYTE *)(a1 + 12848) = *(_BYTE *)(a2 + 12848);
  v36 = *(_OWORD *)(a2 + 12856);
  v37 = *(_OWORD *)(a2 + 12888);
  *(_OWORD *)(a1 + 12872) = *(_OWORD *)(a2 + 12872);
  *(_OWORD *)(a1 + 12888) = v37;
  *(_OWORD *)(a1 + 12856) = v36;
  return a1;
}

void sub_20E90927C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 12368) = v5;
    operator delete(v5);
  }
  sub_20E869418(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9092A4(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20E9093E4(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_20E9093BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8CEB24(v1);
  _Unwind_Resume(a1);
}

void sub_20E9093D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8CEB24(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E9093E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  float v46;
  _QWORD *v47;
  _QWORD *v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  size_t prime;
  int8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD v60[2];
  char v61;

  v5 = (unsigned __int8 *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v60, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v11 - 1;
        v16 = *((_QWORD *)v5 + 1);
        if ((v5[23] & 0x80u) == 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if ((v5[23] & 0x80) != 0)
        {
          v26 = *(const void **)v5;
          if (v12.u32[0] < 2uLL)
          {
            while (1)
            {
              v27 = v14[1];
              if (v27 == v10)
              {
                v28 = *((unsigned __int8 *)v14 + 39);
                v29 = (char)v28;
                if ((v28 & 0x80u) != 0)
                  v28 = v14[3];
                if (v17 == v28)
                {
                  v30 = v29 >= 0 ? v14 + 2 : (uint64_t *)v14[2];
                  if (!memcmp(v26, v30, v16))
                    return v14;
                }
              }
              else if ((v27 & v15) != v3)
              {
                goto LABEL_91;
              }
              v14 = (uint64_t *)*v14;
              if (!v14)
                goto LABEL_91;
            }
          }
          while (1)
          {
            v31 = v14[1];
            if (v31 == v10)
            {
              v32 = *((unsigned __int8 *)v14 + 39);
              v33 = (char)v32;
              if ((v32 & 0x80u) != 0)
                v32 = v14[3];
              if (v17 == v32)
              {
                v34 = v33 >= 0 ? v14 + 2 : (uint64_t *)v14[2];
                if (!memcmp(v26, v34, v16))
                  return v14;
              }
            }
            else
            {
              if (v31 >= v11)
                v31 %= v11;
              if (v31 != v3)
                goto LABEL_91;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_91;
          }
        }
        if (v12.u32[0] > 1uLL)
        {
          if (!v5[23])
          {
            while (1)
            {
              v35 = v14[1];
              if (v35 == v9)
              {
                v36 = *((unsigned __int8 *)v14 + 39);
                if ((v36 & 0x80u) != 0)
                  v36 = v14[3];
                if (v17 == v36)
                  return v14;
              }
              else
              {
                if (v35 >= v11)
                  v35 %= v11;
                if (v35 != v3)
                  goto LABEL_91;
              }
              v14 = (uint64_t *)*v14;
              if (!v14)
                goto LABEL_91;
            }
          }
          while (1)
          {
            v37 = v14[1];
            if (v37 == v9)
            {
              v38 = *((unsigned __int8 *)v14 + 39);
              v39 = (char)v38;
              if ((v38 & 0x80u) != 0)
                v38 = v14[3];
              if (v17 == v38)
              {
                if (v39 >= 0)
                  v40 = (unsigned __int8 *)(v14 + 2);
                else
                  v40 = (unsigned __int8 *)v14[2];
                v41 = v5;
                v42 = v5[23];
                while (*v41 == *v40)
                {
                  ++v41;
                  ++v40;
                  if (!--v42)
                    return v14;
                }
              }
            }
            else
            {
              if (v37 >= v11)
                v37 %= v11;
              if (v37 != v3)
                goto LABEL_91;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_91;
          }
        }
        if (!v5[23])
        {
          while (1)
          {
            v18 = v14[1];
            if (v18 == v9)
            {
              v19 = *((unsigned __int8 *)v14 + 39);
              if ((v19 & 0x80u) != 0)
                v19 = v14[3];
              if (v17 == v19)
                return v14;
            }
            else if ((v18 & v15) != v3)
            {
              goto LABEL_91;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_91;
          }
        }
        do
        {
          v20 = v14[1];
          if (v20 == v9)
          {
            v21 = *((unsigned __int8 *)v14 + 39);
            v22 = (char)v21;
            if ((v21 & 0x80u) != 0)
              v21 = v14[3];
            if (v17 == v21)
            {
              if (v22 >= 0)
                v23 = (unsigned __int8 *)(v14 + 2);
              else
                v23 = (unsigned __int8 *)v14[2];
              v24 = v5;
              v25 = v5[23];
              while (*v24 == *v23)
              {
                ++v24;
                ++v23;
                if (!--v25)
                  return v14;
              }
            }
          }
          else if ((v20 & v15) != v3)
          {
            break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_91:
  v43 = operator new(0x28uLL);
  v60[0] = v43;
  v60[1] = a1 + 16;
  v61 = 0;
  *v43 = 0;
  v43[1] = v10;
  v44 = v43 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(v44, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v44 = *(_OWORD *)a3;
    v44[2] = *(_QWORD *)(a3 + 16);
  }
  v61 = 1;
  v45 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v46 = *(float *)(a1 + 32);
  if (!v11 || (float)(v46 * (float)v11) < v45)
  {
    v49 = 1;
    if (v11 >= 3)
      v49 = (v11 & (v11 - 1)) != 0;
    v50 = v49 | (2 * v11);
    v51 = vcvtps_u32_f32(v45 / v46);
    if (v50 <= v51)
      prime = v51;
    else
      prime = v50;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v53 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v53)
      goto LABEL_108;
    if (prime < *(_QWORD *)&v53)
    {
      v54 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v53 < 3uLL || (v55 = (uint8x8_t)vcnt_s8(v53), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
      {
        v54 = std::__next_prime(v54);
      }
      else
      {
        v56 = 1 << -(char)__clz(v54 - 1);
        if (v54 >= 2)
          v54 = v56;
      }
      if (prime <= v54)
        prime = v54;
      if (prime < *(_QWORD *)&v53)
LABEL_108:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v57 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v48 = (_QWORD *)v60[0];
        if (v47)
          goto LABEL_97;
      }
      else
      {
        v3 = v10;
        v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v48 = (_QWORD *)v60[0];
        if (v47)
          goto LABEL_97;
      }
    }
    else
    {
      v3 = v57 & v10;
      v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v57 & v10));
      v48 = (_QWORD *)v60[0];
      if (v47)
        goto LABEL_97;
    }
LABEL_121:
    *v48 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v60[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v60[0])
    {
      v58 = *(_QWORD *)(*(_QWORD *)v60[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v58 >= v11)
          v58 %= v11;
      }
      else
      {
        v58 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v58) = v60[0];
    }
    goto LABEL_132;
  }
  v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v48 = (_QWORD *)v60[0];
  if (!v47)
    goto LABEL_121;
LABEL_97:
  *v48 = *v47;
  *v47 = v60[0];
LABEL_132:
  v14 = (uint64_t *)v60[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E90998C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E9099A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8D7B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E9099B8(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v4 = *(void ***)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 3);
        *((_QWORD *)v9 - 1) = *(v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *(v4 - 2) = 0;
        *(v4 - 1) = 0;
        *(v4 - 3) = 0;
        v4 -= 3;
      }
      while (v4 != v2);
      v2 = *(void ***)a1;
      v11 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20E909ADC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_20E860C04(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20E909BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E877DA8(&a9);
  _Unwind_Resume(a1);
}

void sub_20E909BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E877DA8(&a9);
  _Unwind_Resume(a1);
}

void sub_20E909C0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B04B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E909C1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B04B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E909C4C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20E909C5C(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24C9B0458;
  v4 = (uint64_t)(a1 + 3);
  v5 = (std::__shared_weak_count *)a3[1];
  v12 = *a3;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20FDBC538(v4, a2, (uint64_t)&v12);
  v8 = v13;
  if (!v13)
    return a1;
  v9 = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20E909D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void sub_20E909D60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E909D70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E909DA0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_6;
  }
  else if (!*(_BYTE *)(a1 + 120))
  {
    goto LABEL_6;
  }
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    v2 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v2)
      goto LABEL_12;
    goto LABEL_7;
  }
LABEL_6:
  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v2)
    goto LABEL_12;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_12:
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t sub_20E909E50(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  __int128 v13;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BEDB868] + 64;
  v8 = a1 + 16;
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 16));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v6 + 24;
  *(_QWORD *)(a1 + 120) = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 16) = v12 + 16;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = a3 | 8;
  if ((__int128 *)(a1 + 80) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20E867BF8((_QWORD *)(a1 + 80), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 80) = v13;
    }
  }
  sub_20E8B469C(v8);
  return a1;
}

void sub_20E909F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E909FB8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B71C0;
  a1[2] = &unk_24C9B7308;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C9B7428;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20E90A034(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B71C0;
  a1[2] = &unk_24C9B7308;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C9B7428;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E90A0C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16);
}

uint64_t sub_20E90A0CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
}

void sub_20E90A0D8(uint64_t a1, _BYTE *a2)
{
  sub_20E9EE1A4(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A0E0(uint64_t a1, _BYTE *a2)
{
  sub_20E9ED654(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A0E8(uint64_t a1, _WORD *a2)
{
  sub_20E9ED898(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A0F0(uint64_t a1, _DWORD *a2)
{
  sub_20E9EDA2C(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A0F8(uint64_t a1, _QWORD *a2)
{
  sub_20E9EDBC0(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A100(uint64_t a1, _QWORD *a2)
{
  sub_20E9EDD84(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A108(uint64_t a1, _BYTE *a2)
{
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A110(uint64_t a1, _BYTE *a2)
{
  sub_20E9ED704(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A118(uint64_t a1, _WORD *a2)
{
  sub_20E9ED948(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A120(uint64_t a1, _DWORD *a2)
{
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A128(uint64_t a1, _QWORD *a2)
{
  sub_20E9EDCA8(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A130(uint64_t a1, _QWORD *a2)
{
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A138(uint64_t a1, float *a2)
{
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A140(uint64_t a1, double *a2)
{
  sub_20E9EE078(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A148(uint64_t a1, std::string *a2)
{
  sub_20E9EE280(*(_QWORD *)(a1 + 48), a2);
}

void sub_20E90A150(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20E9EE1A4(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20E90A198(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20E9ED654(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20E90A1E0(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 2 * a2;
    do
    {
      sub_20E9ED898(v4, a3++);
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_20E90A228(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 4 * a2;
    do
    {
      sub_20E9EDA2C(v4, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20E90A270(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20E9EDBC0(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20E90A2B8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20E9EDD84(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20E90A300(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20E9ED7B4(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20E90A348(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20E9ED704(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20E90A390(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 2 * a2;
    do
    {
      sub_20E9ED948(v4, a3++);
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_20E90A3D8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 4 * a2;
    do
    {
      sub_20E9EDADC(v4, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20E90A420(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20E9EDCA8(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20E90A468(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20E9EDE6C(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20E90A4B0(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 4 * a2;
    do
    {
      sub_20E9EDF48(v4, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20E90A4F8(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20E9EE078(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20E90A540(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 24 * a2;
    do
    {
      sub_20E9EE280(v4, a3++);
      v5 -= 24;
    }
    while (v5);
  }
}

void *sub_20E90A58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::bad_cast *exception;
  std::bad_cast *v6;
  size_t __n;
  void *__src;

  v3 = *(_QWORD *)(a1 + 48);
  LODWORD(__n) = 0;
  __src = 0;
  sub_20E9EE5A4(v3, (uint64_t)&__n);
  if (*(_QWORD *)a2 != __n)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v6 = sub_20E9EE684(exception);
    __cxa_throw(v6, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  return memcpy(*(void **)(a2 + 8), __src, __n);
}

void sub_20E90A60C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C9B71C0;
  *a1 = &unk_24C9B7308;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C9B7428;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_20E90A684(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C9B71C0;
  *a1 = &unk_24C9B7308;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C9B7428;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20E90A71C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;

  v16 = 0;
  sub_20E9EDE6C(a1[4], &v16);
  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v3 = v2;
  v4 = v16;
  v6 = (uint64_t *)a1[2];
  v5 = a1[3];
  if ((unint64_t)v6 < v5)
  {
    *v6 = v2;
    v6[1] = v4;
    v7 = (uint64_t)(v6 + 2);
    goto LABEL_18;
  }
  v8 = (uint64_t *)a1[1];
  v9 = ((char *)v6 - (char *)v8) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_20E90A8BC();
  v11 = v5 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_20E877A38();
    v13 = (char *)operator new(16 * v12);
    v14 = (uint64_t *)&v13[16 * v9];
    v15 = &v13[16 * v12];
    *v14 = v3;
    v14[1] = v4;
    v7 = (uint64_t)(v14 + 2);
    if (v6 == v8)
      goto LABEL_16;
    goto LABEL_14;
  }
  v14 = (uint64_t *)(16 * v9);
  v15 = 0;
  *v14 = v2;
  v14[1] = v4;
  v7 = 16 * v9 + 16;
  if (v6 != v8)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
      v14 -= 2;
      v6 -= 2;
    }
    while (v6 != v8);
    v6 = (uint64_t *)a1[1];
  }
LABEL_16:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_18:
  a1[2] = v7;
}

uint64_t sub_20E90A864(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1[2];
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v4 = *(_QWORD *)(v2 - 16) - result + *(_QWORD *)(v2 - 8);
  if (v4)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v4);
  a1[2] -= 16;
  return result;
}

void sub_20E90A8BC()
{
  sub_20E860B90("vector");
}

double CV3DSLAMCalibrationCreateFromCameraModel(int a1, uint64_t a2, CFTypeRef *a3)
{
  int v4;
  char *v5;
  const std::error_category *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double result;
  int v12;
  _OWORD *v13;
  void *__p;
  __int128 v20;
  int v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  v21 = a1;
  v4 = sub_20E8F7E44(&v21);
  if (v4 == 112)
  {
    __p = operator new(0x20uLL);
    v20 = xmmword_2102DBFE0;
    strcpy((char *)__p, "Unknown camera model type");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a3)
    {
      v6 = std::generic_category();
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = v6;
      sub_20EA67538(&v24, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
  }
  else
  {
    v12 = v4;
    v13 = operator new(0x998uLL, MEMORY[0x24BEDB6B8]);
    if (v13)
    {
      result = 0.0;
      v13[4] = 0u;
      v13[5] = 0u;
      v13[2] = 0u;
      v13[3] = 0u;
      *v13 = 0u;
      v13[1] = 0u;
      *((_QWORD *)v13 + 12) = 0x7FEFFFFFFFFFFFFFLL;
      *((_BYTE *)v13 + 104) = 0;
      *((_BYTE *)v13 + 112) = 0;
      *((_QWORD *)v13 + 23) = 0x3FF0000000000000;
      *(_OWORD *)((char *)v13 + 120) = xmmword_2102DCCA0;
      *(_OWORD *)((char *)v13 + 136) = *(_OWORD *)algn_2102DCCB0;
      *(_OWORD *)((char *)v13 + 152) = xmmword_2102DCCC0;
      *(_OWORD *)((char *)v13 + 168) = unk_2102DCCD0;
      *((_QWORD *)v13 + 32) = 0x3FF0000000000000;
      v13[12] = xmmword_2102DCCA0;
      v13[13] = *(_OWORD *)algn_2102DCCB0;
      v13[14] = xmmword_2102DCCC0;
      v13[15] = unk_2102DCCD0;
      *((_QWORD *)v13 + 41) = 0x3FF0000000000000;
      *(_OWORD *)((char *)v13 + 264) = xmmword_2102DCCA0;
      *(_OWORD *)((char *)v13 + 280) = *(_OWORD *)algn_2102DCCB0;
      *(_OWORD *)((char *)v13 + 296) = xmmword_2102DCCC0;
      *(_OWORD *)((char *)v13 + 312) = unk_2102DCCD0;
      *((_QWORD *)v13 + 50) = 0x3FF0000000000000;
      v13[21] = xmmword_2102DCCA0;
      v13[22] = *(_OWORD *)algn_2102DCCB0;
      v13[23] = xmmword_2102DCCC0;
      v13[24] = unk_2102DCCD0;
      *((_QWORD *)v13 + 59) = 0x3FF0000000000000;
      *(_OWORD *)((char *)v13 + 440) = xmmword_2102DCCC0;
      *(_OWORD *)((char *)v13 + 456) = unk_2102DCCD0;
      *(_OWORD *)((char *)v13 + 408) = xmmword_2102DCCA0;
      *(_OWORD *)((char *)v13 + 424) = *(_OWORD *)algn_2102DCCB0;
      *((_QWORD *)v13 + 68) = 0x3FF0000000000000;
      v13[32] = xmmword_2102DCCC0;
      v13[33] = unk_2102DCCD0;
      v13[30] = xmmword_2102DCCA0;
      v13[31] = *(_OWORD *)algn_2102DCCB0;
      v13[35] = 0u;
      v13[36] = 0u;
      v13[37] = 0u;
      *((_QWORD *)v13 + 76) = 0;
      *((_QWORD *)v13 + 69) = 0x3FF0000000000000;
      *((_QWORD *)v13 + 73) = 0x3FF0000000000000;
      *((_QWORD *)v13 + 77) = 0x3FF0000000000000;
      __asm { FMOV            V1.2D, #1.0 }
      v13[39] = _Q1;
      v13[40] = _Q1;
      *((_WORD *)v13 + 360) = 0;
      v13[43] = 0u;
      v13[44] = 0u;
      v13[41] = _Q1;
      v13[42] = 0u;
      *((_BYTE *)v13 + 728) = 0;
      *((_BYTE *)v13 + 1136) = 0;
      *((_BYTE *)v13 + 1144) = 0;
      *((_BYTE *)v13 + 2232) = 0;
      *((_BYTE *)v13 + 2240) = 0;
      *((_BYTE *)v13 + 2280) = 0;
      *((_DWORD *)v13 + 572) = v12;
      *((_BYTE *)v13 + 2292) = 1;
      *((_BYTE *)v13 + 2296) = 0;
      *((_BYTE *)v13 + 2424) = 0;
      *((_QWORD *)v13 + 306) = 0;
      v13[152] = 0u;
    }
  }
  return result;
}

void sub_20E90AB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMCalibrationUpdateWithSnapshot(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2102DCC80;
    strcpy((char *)__p, "Calibration can not be null");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E90ACFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCalibrationRelease(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 5;
  if (*(char *)(a1 + 2455) < 0)
    operator delete(*(void **)(a1 + 2432));
  v2 = sub_20E86A810(a1);
  MEMORY[0x212BC6398](v2, 0x10B2C40D1A0D69FLL);
  return 0;
}

char *CV3DSLAMCalibrationCreate()
{
  char *v0;
  char *v1;

  v0 = (char *)operator new(0x998uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    bzero(v0, 0x980uLL);
    *((_QWORD *)v1 + 12) = 0x7FEFFFFFFFFFFFFFLL;
    *((_QWORD *)v1 + 23) = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 120) = xmmword_2102DCCA0;
    *(_OWORD *)(v1 + 136) = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)(v1 + 152) = xmmword_2102DCCC0;
    *(_OWORD *)(v1 + 168) = unk_2102DCCD0;
    *((_QWORD *)v1 + 32) = 0x3FF0000000000000;
    *((_OWORD *)v1 + 12) = xmmword_2102DCCA0;
    *((_OWORD *)v1 + 13) = *(_OWORD *)algn_2102DCCB0;
    *((_OWORD *)v1 + 14) = xmmword_2102DCCC0;
    *((_OWORD *)v1 + 15) = unk_2102DCCD0;
    *((_QWORD *)v1 + 41) = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 264) = xmmword_2102DCCA0;
    *(_OWORD *)(v1 + 280) = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)(v1 + 296) = xmmword_2102DCCC0;
    *(_OWORD *)(v1 + 312) = unk_2102DCCD0;
    *((_QWORD *)v1 + 50) = 0x3FF0000000000000;
    *((_OWORD *)v1 + 21) = xmmword_2102DCCA0;
    *((_OWORD *)v1 + 22) = *(_OWORD *)algn_2102DCCB0;
    *((_OWORD *)v1 + 23) = xmmword_2102DCCC0;
    *((_OWORD *)v1 + 24) = unk_2102DCCD0;
    *((_QWORD *)v1 + 59) = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 408) = xmmword_2102DCCA0;
    *(_OWORD *)(v1 + 424) = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)(v1 + 440) = xmmword_2102DCCC0;
    *(_OWORD *)(v1 + 456) = unk_2102DCCD0;
    *((_QWORD *)v1 + 68) = 0x3FF0000000000000;
    *((_OWORD *)v1 + 32) = xmmword_2102DCCC0;
    *((_OWORD *)v1 + 33) = unk_2102DCCD0;
    *((_OWORD *)v1 + 30) = xmmword_2102DCCA0;
    *((_OWORD *)v1 + 31) = *(_OWORD *)algn_2102DCCB0;
    *((_QWORD *)v1 + 76) = 0;
    *((_OWORD *)v1 + 36) = 0u;
    *((_OWORD *)v1 + 37) = 0u;
    *((_OWORD *)v1 + 35) = 0u;
    *((_QWORD *)v1 + 69) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 73) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 77) = 0x3FF0000000000000;
    __asm { FMOV            V1.2D, #1.0 }
    *((_OWORD *)v1 + 39) = _Q1;
    *((_OWORD *)v1 + 40) = _Q1;
    *((_WORD *)v1 + 360) = 0;
    *((_OWORD *)v1 + 41) = _Q1;
    *((_OWORD *)v1 + 42) = 0u;
    *((_OWORD *)v1 + 43) = 0u;
    *((_OWORD *)v1 + 44) = 0u;
    v1[2232] = 0;
    v1[2292] = 0;
    *((_OWORD *)v1 + 152) = 0u;
    *((_QWORD *)v1 + 306) = 0;
  }
  return v1;
}

uint64_t CV3DSLAMCalibrationCreateFromSnapshot(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  int v13;
  void *v14;
  void *v15;
  _OWORD *v16;
  void *__p;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  CV3DSLAMCalibrationCreateFromCameraModel(a2, a2, a4);
  v5 = v4;
  if (v4)
  {
    *(_WORD *)(v4 + 720) = 256;
    v6 = operator new(0x20uLL);
    *v6 = 0u;
    v6[1] = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v46 = 0uLL;
    v51 = 0x3FF0000000000000;
    v50 = unk_2102DCCD0;
    v49 = xmmword_2102DCCC0;
    v48 = *(_OWORD *)algn_2102DCCB0;
    v47 = xmmword_2102DCCA0;
    v42 = 0;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v12 = 0;
    v13 = 6;
    v14 = v6;
    v15 = v6 + 2;
    v16 = v6 + 2;
    __p = 0;
    v18 = 0;
    v19 = 0;
    v27 = 0;
    v28 = 0;
    v34 = unk_2102DCCD0;
    v31 = xmmword_2102DCCA0;
    v30 = 0uLL;
    v29 = 0;
    v35 = 0x3FF0000000000000;
    v33 = xmmword_2102DCCC0;
    v32 = *(_OWORD *)algn_2102DCCB0;
    v43 = 0;
    v44 = 0;
    v45 = 1;
    v7 = sub_20E90D9F0(v5 + 728, &v12);
    if (v45)
    {
      v8 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
    }
  }
  return v5;
}

uint64_t CV3DSLAMCalibrationUseVaryingCameraIntrinsics(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (!a1)
    return 5;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = a2 ^ 1;
    do
    {
      *(_BYTE *)(v2 + 409) = v4;
      if (*(_DWORD *)(v2 + 4) == 2)
        *(_BYTE *)(v2 + 937) = v4;
      v2 += 1088;
    }
    while (v2 != v3);
  }
  return 0;
}

uint64_t CV3DSLAMCalibrationForceToUsePerFrameCameraIntrinsics(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 5;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      *(_BYTE *)(v2 + 464) = a2;
      if (*(_DWORD *)(v2 + 4) == 2)
        *(_BYTE *)(v2 + 992) = a2;
      v2 += 1088;
    }
    while (v2 != v3);
  }
  return 0;
}

uint64_t CV3DSLAMCalibrationSetTemperatureModelParameters(uint64_t *a1, unsigned int a2, unsigned int a3, double a4, double a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  void *v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  void *__p;

  if (!a1)
    return 5;
  v12 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    while (*(_DWORD *)v12 != a2)
    {
      v12 += 1088;
      if (v12 == v11)
        goto LABEL_5;
    }
  }
  if (v12 == v11)
  {
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested camera id not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  sub_20EA93AE4(a1, &__p);
  v14 = __p;
  if (*((_DWORD *)__p + a2) <= a3)
  {
    v17 = 5;
  }
  else
  {
    if (sub_20EA8F2E8(*(_DWORD *)(v12 + 4), a3))
    {
      v15 = *(unsigned __int8 *)(v12 + 440);
      *(double *)(v12 + 416) = a4;
      *(double *)(v12 + 424) = a5;
      *(double *)(v12 + 432) = a6;
      if (!v15)
      {
        v16 = (_BYTE *)(v12 + 440);
LABEL_16:
        v17 = 0;
        *v16 = 1;
        goto LABEL_17;
      }
    }
    else if (*(_DWORD *)(v12 + 4) == 2)
    {
      v18 = *(unsigned __int8 *)(v12 + 968);
      *(double *)(v12 + 944) = a4;
      *(double *)(v12 + 952) = a5;
      *(double *)(v12 + 960) = a6;
      if (!v18)
      {
        v16 = (_BYTE *)(v12 + 968);
        goto LABEL_16;
      }
    }
    v17 = 0;
  }
LABEL_17:
  operator delete(v14);
  return v17;
}

uint64_t SetDefaultCameraCalibrationData(uint64_t *a1, int a2, unsigned int a3, int a4, int a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::logic_error *exception;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  char v32;
  int v33;

  v33 = a2;
  if (!a1)
    return 5;
  v11 = sub_20E8F7E44(&v33);
  if ((_DWORD)v11 == 112)
    return 2;
  if (a3 > 0xC)
    v13 = 13;
  else
    v13 = dword_2102DCCE8[a3];
  if (a4)
    v14 = 2 * (a4 == 1);
  else
    v14 = 1;
  sub_20EA7A0A4(v11, v13);
  if (!v32)
    return 3;
  sub_20EA938D4((uint64_t)a1, a5);
  v16 = *a1;
  v15 = a1[1];
  if (*a1 != v15)
  {
    while (*(_DWORD *)v16 != a5)
    {
      v16 += 1088;
      if (v16 == v15)
        goto LABEL_16;
    }
  }
  if (v16 == v15)
  {
LABEL_16:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested camera id not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  *(_DWORD *)(v16 + 4) = v14;
  *(_QWORD *)(v16 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v16 + 1056) = 0x3FF0000000000000;
  if (sub_20EA8F2E8(v14, a6))
  {
    v18 = v16 + 8;
  }
  else
  {
    if (*(_DWORD *)(v16 + 4) != 2)
      goto LABEL_24;
    v18 = v16 + 536;
  }
  sub_20E92D63C(v18, &v25);
LABEL_24:
  if (!v32)
    return 0;
  v19 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  result = (uint64_t)v26;
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
    return 0;
  }
  return result;
}

void sub_20E90B4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E90DCE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E90B4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_20E90DCE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20E90B4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E90DCE4((uint64_t)va);
  _Unwind_Resume(a1);
}

double SetDefaultImuCalibrationData(uint64_t a1, int a2)
{
  int v3;
  double result;
  _BYTE v5[624];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BYTE __dst[528];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v19 = a2;
  if (a1)
  {
    v3 = sub_20E8F7E44(&v19);
    if (v3 != 112)
    {
      sub_20EA798F4(v3, (uint64_t)v5);
      memcpy(__dst, v5, sizeof(__dst));
      v13 = v6;
      v14 = v7;
      v15 = v8;
      v16 = v9;
      v17 = v10;
      v18 = v11;
      memcpy((void *)(a1 + 24), __dst, 0x210uLL);
      *(_OWORD *)(a1 + 648) = v13;
      *(_QWORD *)(a1 + 664) = v14;
      *(_OWORD *)(a1 + 672) = v15;
      *(_QWORD *)(a1 + 688) = v16;
      result = *(double *)&v17;
      *(_OWORD *)(a1 + 696) = v17;
      *(_QWORD *)(a1 + 712) = v18;
    }
  }
  return result;
}

double SetDefaultRangingSensorCalibrationData(_OWORD *a1, int a2)
{
  uint64_t v3;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  int v8;

  v8 = a2;
  if (a1)
  {
    v3 = sub_20E8F7E44(&v8);
    if ((_DWORD)v3 != 112)
    {
      sub_20EA7BF18(v3, (uint64_t)&v6);
      v5 = v7[0];
      a1[140] = v6;
      a1[141] = v5;
      result = *(double *)((char *)v7 + 9);
      *(_OWORD *)((char *)a1 + 2265) = *(_OWORD *)((char *)v7 + 9);
    }
  }
  return result;
}

uint64_t CV3DSLAMCalibrationAddIMUParameters(uint64_t a1, __int128 *a2, _OWORD *a3, void *__src, void *a5, double a6)
{
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v18[2];
  _BYTE v19[79];

  v6 = 5;
  if (a1 && a2 && a3)
  {
    v8 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v19[71] = 0x3FF0000000000000;
    *(_OWORD *)&v19[7] = xmmword_2102DCCA0;
    *(_OWORD *)&v19[23] = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)&v19[39] = xmmword_2102DCCC0;
    *(_OWORD *)&v19[55] = unk_2102DCCD0;
    memset(v18, 0, 24);
    v9 = a3[1];
    v10 = *a2;
    *(_OWORD *)(a1 + 24) = *a3;
    v11 = a1 + 24;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 72) = v8;
    *(double *)(a1 + 80) = a6;
    *(_OWORD *)(a1 + 88) = xmmword_2102DCC90;
    *(_BYTE *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 113) = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 176) = *(_OWORD *)&v19[63];
    *(_OWORD *)(a1 + 161) = *(_OWORD *)&v19[48];
    *(_OWORD *)(a1 + 145) = *(_OWORD *)&v19[32];
    *(_OWORD *)(a1 + 129) = *(_OWORD *)&v19[16];
    *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 192) = xmmword_2102DCCA0;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)(a1 + 224) = xmmword_2102DCCC0;
    *(_OWORD *)(a1 + 240) = unk_2102DCCD0;
    *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 296) = xmmword_2102DCCC0;
    *(_OWORD *)(a1 + 312) = unk_2102DCCD0;
    *(_OWORD *)(a1 + 264) = xmmword_2102DCCA0;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)algn_2102DCCB0;
    *(_QWORD *)(a1 + 400) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 384) = unk_2102DCCD0;
    *(_OWORD *)(a1 + 368) = xmmword_2102DCCC0;
    *(_OWORD *)(a1 + 352) = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)(a1 + 336) = xmmword_2102DCCA0;
    *(_QWORD *)(a1 + 472) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 408) = xmmword_2102DCCA0;
    *(_OWORD *)(a1 + 424) = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)(a1 + 440) = xmmword_2102DCCC0;
    *(_OWORD *)(a1 + 456) = unk_2102DCCD0;
    *(_QWORD *)(a1 + 544) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 528) = unk_2102DCCD0;
    *(_OWORD *)(a1 + 512) = xmmword_2102DCCC0;
    *(_OWORD *)(a1 + 496) = *(_OWORD *)algn_2102DCCB0;
    *(_OWORD *)(a1 + 480) = xmmword_2102DCCA0;
    *(_QWORD *)(a1 + 552) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 576) = 0;
    *(_OWORD *)(a1 + 560) = 0u;
    *(_QWORD *)(a1 + 584) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 608) = 0;
    *(_OWORD *)(a1 + 592) = 0u;
    *(_QWORD *)(a1 + 616) = 0x3FF0000000000000;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 624) = _Q0;
    *(_OWORD *)(a1 + 640) = _Q0;
    *(_OWORD *)(a1 + 656) = _Q0;
    *(_QWORD *)(a1 + 688) = 0;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_QWORD *)(a1 + 712) = 0;
    *(_OWORD *)(a1 + 696) = *(_OWORD *)((char *)v18 + 8);
    *(_WORD *)(a1 + 720) = 0;
    if (__src)
      memmove((void *)(a1 + 120), __src, 0x48uLL);
    if (a5)
      memmove((void *)(v11 + 168), a5, 0x48uLL);
    return 0;
  }
  return v6;
}

uint64_t CV3DSLAMCalibrationSetIMUParameters(uint64_t a1, int a2, const void *a3, const void *a4)
{
  int v7;
  _BYTE v9[624];
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE __dst[528];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v23 = a2;
  if (!a1)
    return 5;
  v7 = sub_20E8F7E44(&v23);
  if (v7 == 112)
    return 2;
  sub_20EA798F4(v7, (uint64_t)v9);
  memcpy(__dst, v9, sizeof(__dst));
  v17 = v10;
  v18 = v11;
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v22 = v15;
  memcpy((void *)(a1 + 24), __dst, 0x210uLL);
  *(_OWORD *)(a1 + 648) = v17;
  *(_QWORD *)(a1 + 664) = v18;
  *(_OWORD *)(a1 + 672) = v19;
  *(_QWORD *)(a1 + 688) = v20;
  *(_OWORD *)(a1 + 696) = v21;
  *(_QWORD *)(a1 + 712) = v22;
  if (a3)
    memmove((void *)(a1 + 120), a3, 0x48uLL);
  if (a4)
    memmove((void *)(a1 + 192), a4, 0x48uLL);
  return 0;
}

uint64_t CV3DSLAMCalibrationAddCameraParameters2(uint64_t *a1, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, _OWORD *a7, __int128 *a8, double a9, double a10, double a11, double a12, double a13, double a14, __int128 *a15, __int128 *a16, unsigned int a17, char a18)
{
  uint64_t result;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  std::logic_error *exception;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  void *v49;
  void *v50;
  _OWORD *v51;
  void *__p;
  void *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  double v81;
  double v82;
  char v83;
  char v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  char v91;
  int v92;
  uint64_t v93;
  std::__shared_weak_count *v94;

  result = 5;
  if (!a1 || !a7 || !a8 || !a15 || !a16)
    return result;
  if (a17 >= 4)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp", 74, (uint64_t)"", 0, (uint64_t)"Unexpected LensDistortionModel value", 36, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v47 = __PAIR64__(a6, a5);
  v48 = 2 * a17;
  v31 = operator new(0x20uLL);
  v51 = v31 + 2;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v55 = *a8;
  v56 = 0u;
  v57 = 0u;
  v58 = a9;
  v59 = 0;
  v60 = a11;
  v61 = 0;
  v62 = a10;
  v63 = a12;
  v64 = 0;
  v65 = 0;
  v68 = 0u;
  v67 = 0u;
  v72 = unk_2102DCCD0;
  v66 = 0x3FF0000000000000;
  v73 = 0x3FF0000000000000;
  v69 = xmmword_2102DCCA0;
  v70 = *(_OWORD *)algn_2102DCCB0;
  v71 = xmmword_2102DCCC0;
  v32 = a7[1];
  *v31 = *a7;
  v31[1] = v32;
  v49 = v31;
  v50 = v31 + 2;
  v33 = *((_QWORD *)a15 + 2);
  v74 = *a15;
  v75 = v33;
  v34 = a16[3];
  v78 = a16[2];
  v79 = v34;
  v35 = a16[1];
  v76 = *a16;
  v77 = v35;
  v80 = *((_QWORD *)a16 + 8);
  v81 = a13;
  v82 = a14;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0x3FF0000000000000;
  v88 = 0x3F847AE147AE147BLL;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v83 = a18;
  sub_20EA938D4((uint64_t)a1, a3);
  v37 = *a1;
  v36 = a1[1];
  if (*a1 != v36)
  {
    while (*(_DWORD *)v37 != a3)
    {
      v37 += 1088;
      if (v37 == v36)
        goto LABEL_10;
    }
  }
  if (v37 == v36)
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested camera id not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (a2)
    v39 = 2 * (a2 == 1);
  else
    v39 = 1;
  *(_DWORD *)(v37 + 4) = v39;
  *(_QWORD *)(v37 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v37 + 1056) = 0x3FF0000000000000;
  if (sub_20EA8F2E8(v39, a4))
  {
    v40 = v37 + 8;
  }
  else
  {
    if (*(_DWORD *)(v37 + 4) != 2)
      goto LABEL_20;
    v40 = v37 + 536;
  }
  sub_20E92D63C(v40, (uint64_t *)&v47);
LABEL_20:
  v41 = v94;
  if (v94)
  {
    p_shared_owners = (unint64_t *)&v94->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  return 0;
}

void sub_20E90BD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20E90BD50(&a9);
  _Unwind_Resume(a1);
}

void sub_20E90BD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E90BD50(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E90BD50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;

  v2 = (std::__shared_weak_count *)a1[64];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[24];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (void *)a1[5];
  if (v8)
  {
    a1[6] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t CV3DSLAMCalibrationEnableMultiCameraStereo(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t result;
  _DWORD *v11;
  _DWORD *v12;
  std::logic_error *exception;

  v4 = *(_DWORD **)a1;
  v5 = *(_DWORD **)(a1 + 8);
  if (0xF0F0F0F0F0F0F0F1 * (((uint64_t)v5 - *(_QWORD *)a1) >> 6) <= a2)
    return 5;
  if (v4 == v5)
    goto LABEL_18;
  while (*v4 != a2)
  {
    v4 += 272;
    if (v4 == v5)
      goto LABEL_18;
  }
  if (v4 == v5)
    goto LABEL_18;
  result = 5;
  if (a3 >= a2 || v4[1] != 1)
    return result;
  if (a3 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a4 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *(_DWORD **)a1;
  v12 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v12)
  {
    while (*v11 != a2)
    {
      v11 += 272;
      if (v11 == v12)
        goto LABEL_18;
    }
  }
  if (v11 == v12)
  {
LABEL_18:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (!*((_BYTE *)v11 + 1080))
    *((_BYTE *)v11 + 1080) = 1;
  result = 0;
  *((_QWORD *)v11 + 134) = a3 | (unint64_t)(a4 << 32);
  return result;
}

void sub_20E90BFDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E90BFF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t SetDefaultJasperCalibrationData(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];
  void *v13;
  void *v14;
  void *__p;
  void *v16;
  std::__shared_weak_count *v17;
  char v18;
  _BYTE v19[16];
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  char v25;
  int v26;

  v26 = a2;
  if (!a1)
    return 5;
  v3 = sub_20E8F7E44(&v26);
  if (v3 == 112)
    return 2;
  sub_20EA7B964(v3, (uint64_t)v19);
  if (!v25)
    return 6;
  sub_20E8A2514((uint64_t)v12, (uint64_t)v19);
  v5 = sub_20E90D9F0(a1 + 728, v12);
  if (v18)
  {
    v6 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
  if (!v25)
    return 0;
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v5);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  result = (uint64_t)v20;
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
    return 0;
  }
  return result;
}

void sub_20E90C16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_20E8A1388((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCalibrationSetDistortionCenter(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, CFTypeRef *a5)
{
  _DWORD *v6;
  _DWORD *v7;
  std::logic_error *exception;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFTypeRef v14;
  unint64_t *v15;
  const std::error_category *v16;
  CFTypeRef v17;
  unint64_t *p_shared_owners;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  void *__p;
  __int128 v25;
  unsigned int v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  v26 = a3;
  if (a1)
  {
    if (a2)
    {
      v7 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
      if (0xF0F0F0F0F0F0F0F1 * (((uint64_t)v6 - *(_QWORD *)a1) >> 6) > a3)
      {
        if (v7 == v6)
          goto LABEL_7;
        while (*v7 != a3)
        {
          v7 += 272;
          if (v7 == v6)
            goto LABEL_7;
        }
        if (v7 == v6)
        {
LABEL_7:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E92751C(exception, "Requested camera id not found.");
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        v20 = *a2;
        v21 = a2[1];
        if (sub_20EA8F2E8(v7[1], a4))
        {
          v22 = v7 + 52;
        }
        else
        {
          if (v7[1] != 2)
            return 1;
          v22 = v7 + 184;
        }
        *v22 = v20;
        v22[1] = v21;
        return 1;
      }
      sub_20E8EB8DC("Invalid camera id ", &v26);
      v9 = (char *)operator new(0x78uLL);
      v23 = v9;
      strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
      if (a5)
      {
        v16 = std::generic_category();
        *(_QWORD *)&v29.__val_ = 22;
        v29.__cat_ = v16;
        sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a5)
          CFRelease(*a5);
        *a5 = 0;
        v17 = cf;
        if (cf)
          CFRetain(cf);
        *a5 = v17;
        v11 = v28;
        if (!v28)
          goto LABEL_36;
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
LABEL_34:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
LABEL_36:
        v9 = v23;
      }
    }
    else
    {
      __p = operator new(0x28uLL);
      v25 = xmmword_2102DBA80;
      strcpy((char *)__p, "distortion_center can not be null");
      v9 = (char *)operator new(0x78uLL);
      v23 = v9;
      strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
      if (a5)
      {
        *(_QWORD *)&v29.__val_ = 22;
        v29.__cat_ = std::generic_category();
        sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a5)
          CFRelease(*a5);
        *a5 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a5 = v14;
        v11 = v28;
        if (!v28)
          goto LABEL_36;
        v15 = (unint64_t *)&v28->__shared_owners_;
        do
          v13 = __ldaxr(v15);
        while (__stlxr(v13 - 1, v15));
        goto LABEL_34;
      }
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v25 = xmmword_2102DCC80;
    strcpy((char *)__p, "Calibration can not be null");
    v9 = (char *)operator new(0x78uLL);
    v23 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a5)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v10;
      v11 = v28;
      if (!v28)
        goto LABEL_36;
      v12 = (unint64_t *)&v28->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_34;
    }
  }
  operator delete(v9);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E90C570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCalibrationSetCameraToExternalLensRotation(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, CFTypeRef *a5)
{
  _DWORD *v6;
  _DWORD *v7;
  std::logic_error *exception;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFTypeRef v14;
  unint64_t *v15;
  const std::error_category *v16;
  CFTypeRef v17;
  unint64_t *p_shared_owners;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;
  char *v23;
  unsigned int v24;
  CFTypeRef cf;
  std::__shared_weak_count *v26;
  std::error_condition v27;
  _BYTE __p[32];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v24 = a3;
  if (a1)
  {
    if (a2)
    {
      v7 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
      if (0xF0F0F0F0F0F0F0F1 * (((uint64_t)v6 - *(_QWORD *)a1) >> 6) > a3)
      {
        if (v7 == v6)
          goto LABEL_7;
        while (*v7 != a3)
        {
          v7 += 272;
          if (v7 == v6)
            goto LABEL_7;
        }
        if (v7 == v6)
        {
LABEL_7:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E92751C(exception, "Requested camera id not found.");
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        v20 = *(_OWORD *)(a2 + 48);
        v29 = *(_OWORD *)(a2 + 32);
        v30 = v20;
        v31 = *(_QWORD *)(a2 + 64);
        v21 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)__p = *(_OWORD *)a2;
        *(_OWORD *)&__p[16] = v21;
        if (sub_20EA8F2E8(v7[1], a4))
        {
          v22 = v7 + 56;
        }
        else
        {
          if (v7[1] != 2)
            return 1;
          v22 = v7 + 188;
        }
        *((_OWORD *)v22 + 1) = *(_OWORD *)&__p[16];
        *((_OWORD *)v22 + 2) = v29;
        *((_OWORD *)v22 + 3) = v30;
        *((_QWORD *)v22 + 8) = v31;
        *(_OWORD *)v22 = *(_OWORD *)__p;
        return 1;
      }
      sub_20E8EB8DC("Invalid camera id ", &v24);
      v9 = (char *)operator new(0x78uLL);
      v23 = v9;
      strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
      if (a5)
      {
        v16 = std::generic_category();
        *(_QWORD *)&v27.__val_ = 22;
        v27.__cat_ = v16;
        sub_20EA67538(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a5)
          CFRelease(*a5);
        *a5 = 0;
        v17 = cf;
        if (cf)
          CFRetain(cf);
        *a5 = v17;
        v11 = v26;
        if (!v26)
          goto LABEL_36;
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
LABEL_34:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
LABEL_36:
        v9 = v23;
      }
    }
    else
    {
      *(_QWORD *)__p = operator new(0x30uLL);
      *(_OWORD *)&__p[8] = xmmword_2102DCA00;
      strcpy(*(char **)__p, "R_camera_to_external_lens can not be null");
      v9 = (char *)operator new(0x78uLL);
      v23 = v9;
      strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
      if (a5)
      {
        *(_QWORD *)&v27.__val_ = 22;
        v27.__cat_ = std::generic_category();
        sub_20EA67538(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a5)
          CFRelease(*a5);
        *a5 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a5 = v14;
        v11 = v26;
        if (!v26)
          goto LABEL_36;
        v15 = (unint64_t *)&v26->__shared_owners_;
        do
          v13 = __ldaxr(v15);
        while (__stlxr(v13 - 1, v15));
        goto LABEL_34;
      }
    }
  }
  else
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DCC80;
    strcpy(*(char **)__p, "Calibration can not be null");
    v9 = (char *)operator new(0x78uLL);
    v23 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a5)
    {
      *(_QWORD *)&v27.__val_ = 22;
      v27.__cat_ = std::generic_category();
      sub_20EA67538(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v10;
      v11 = v26;
      if (!v26)
        goto LABEL_36;
      v12 = (unint64_t *)&v26->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_34;
    }
  }
  operator delete(v9);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E90CA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E90CA80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCalibrationDetectRuntimeHardware()
{
  unint64_t v0;
  void **v1;
  int v2;
  uint64_t (**v4)();
  void *__p[2];
  unsigned __int8 v6;
  _QWORD v7[2];

  v4 = &off_24C9B6C08;
  sub_20E9E60C8((uint64_t)&v4, (char *)__p);
  v0 = v6;
  if ((v6 & 0x80u) == 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  if ((v6 & 0x80u) != 0)
    v0 = (unint64_t)__p[1];
  v7[0] = v1;
  v7[1] = v0;
  v2 = sub_20EA8E754((uint64_t)v7);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v2;
  return sub_20E8F7E68((int *)__p);
}

void sub_20E90CB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DSLAMCalibrationCameraVideoModeIsSupported(int a1, unsigned int a2)
{
  uint64_t v3;
  int v5;

  v5 = a1;
  v3 = sub_20E8F7E44(&v5);
  if (a2 > 0xC)
    return sub_20EA7BFF0(v3, 13);
  else
    return sub_20EA7BFF0(v3, dword_2102DCCE8[a2]);
}

uint64_t CV3DSLAMCalibrationGetCameraModelType(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 2288);
  if ((v2 & 0xFF00000000) != 0)
    return sub_20E8F7E68((int *)&v2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t CV3DSLAMCameraModelTypeFromString(const char *a1)
{
  size_t v2;
  size_t v3;
  void **p_dst;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void **v10;
  _QWORD v11[2];
  int v12;
  void **__dst;
  size_t v14;
  int64_t v15;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v7 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v7 = v2 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v14 = v3;
    v15 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v15) = v2;
  p_dst = (void **)&__dst;
  if (v2)
LABEL_11:
    memcpy(p_dst, a1, v3);
  *((_BYTE *)p_dst + v3) = 0;
  v9 = HIBYTE(v15);
  v10 = (void **)&__dst;
  if (v15 < 0)
  {
    v10 = __dst;
    v9 = v14;
  }
  v11[0] = v10;
  v11[1] = v9;
  v12 = sub_20EA8E754((uint64_t)v11);
  v5 = sub_20E8F7E68(&v12);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
    return v5;
  operator delete(__dst);
  return v5;
}

void sub_20E90CCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMCameraVideoModeFromString(const char *a1)
{
  size_t v2;
  size_t v3;
  _QWORD *p_dst;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  _QWORD *v10;
  size_t v11;
  char **v12;
  unint64_t v13;
  unint64_t v14;
  char **v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  _QWORD *__dst;
  size_t v22;
  int64_t v23;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    p_dst = operator new(v6 + 1);
    v22 = v3;
    v23 = v7 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v23) = v2;
    p_dst = &__dst;
    if (!v2)
      goto LABEL_11;
  }
  memcpy(p_dst, a1, v3);
LABEL_11:
  *((_BYTE *)p_dst + v3) = 0;
  v8 = SHIBYTE(v23);
  v9 = __dst;
  if (v23 >= 0)
    v10 = &__dst;
  else
    v10 = __dst;
  if (v23 >= 0)
    v11 = HIBYTE(v23);
  else
    v11 = v22;
  v12 = &off_24C9C16D0;
  v13 = 16;
  do
  {
    v14 = v13 >> 1;
    v15 = &v12[3 * (v13 >> 1)];
    v16 = (size_t)v15[1];
    if (v11 >= v16)
      v17 = (size_t)v15[1];
    else
      v17 = v11;
    v18 = memcmp(*v15, v10, v17);
    if (v18)
    {
      if (v18 < 0)
        goto LABEL_18;
    }
    else if (v16 < v11)
    {
LABEL_18:
      v12 = v15 + 3;
      v14 = v13 + ~v14;
    }
    v13 = v14;
  }
  while (v14);
  if (v12 != &off_24C9C1850
    && v12[1] == (char *)v11
    && !memcmp(*v12, v10, v11)
    && (v19 = *((int *)v12 + 4), v19 <= 0xC))
  {
    v5 = dword_2102DCD1C[v19];
    if (v8 < 0)
LABEL_35:
      operator delete(v9);
  }
  else
  {
    v5 = 0xFFFFFFFFLL;
    if (v8 < 0)
      goto LABEL_35;
  }
  return v5;
}

double *CV3DSLAMFFADescriptorCreate(int a1, int a2, int a3, int a4, double a5)
{
  double *result;

  result = (double *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = a5;
    *((_DWORD *)result + 4) = a1;
    *((_DWORD *)result + 5) = a2;
    *((_DWORD *)result + 6) = a3;
    *((_DWORD *)result + 7) = a4;
    *((_QWORD *)result + 4) = 0x100000001;
    *(_QWORD *)result = &off_24C9C1410;
  }
  return result;
}

double *CV3DSLAMFFADescriptorCreateV2(int a1, int a2, int a3, int a4, unsigned int a5, double a6)
{
  uint64_t v11;
  int v12;
  double *result;

  v11 = sub_20EB1A6BC(a5);
  if ((v11 & 0xFF00000000) == 0)
    return 0;
  v12 = v11;
  result = (double *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = a6;
    *((_DWORD *)result + 4) = a1;
    *((_DWORD *)result + 5) = a2;
    *((_DWORD *)result + 6) = a3;
    *((_DWORD *)result + 7) = a4;
    *((_DWORD *)result + 8) = v12;
    *((_DWORD *)result + 9) = 1;
    *(_QWORD *)result = &off_24C9C1410;
  }
  return result;
}

uint64_t CV3DSLAMFFADescriptorRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 36);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

char *CV3DSLAMFFAViewCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, CFTypeRef *a7)
{
  char *result;
  int v15;
  int v16;
  char *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CFTypeRef v22;
  unint64_t *v23;
  CFTypeRef v24;
  unint64_t *v25;
  CFTypeRef v26;
  unint64_t *p_shared_owners;
  char *v28;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v31;
  std::error_condition v32;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          result = (char *)operator new(0x68uLL, MEMORY[0x24BEDB6B8]);
          if (result)
          {
            *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
            v15 = *(_DWORD *)(a1 + 16);
            *((_QWORD *)result + 5) = *(unsigned int *)(a1 + 20);
            *((_QWORD *)result + 6) = a2;
            v16 = *(_DWORD *)(a1 + 28);
            *((_QWORD *)result + 7) = *(unsigned int *)(a1 + 24);
            *((_QWORD *)result + 8) = a3;
            *((_QWORD *)result + 9) = (v15 * v16);
            *((_QWORD *)result + 10) = a4;
            *((_DWORD *)result + 22) = a5;
            *((_DWORD *)result + 23) = a6;
            *((_DWORD *)result + 24) = 1;
            *(_QWORD *)result = &off_24C9C1480;
          }
          return result;
        }
        __p[0] = operator new(0x20uLL);
        *(_OWORD *)&__p[1] = xmmword_2102DC000;
        strcpy((char *)__p[0], "ControlPoints can not be null");
        v17 = (char *)operator new(0x78uLL);
        v28 = v17;
        strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
        if (a7)
        {
          *(_QWORD *)&v32.__val_ = 22;
          v32.__cat_ = std::generic_category();
          sub_20EA67538(&v32, (uint64_t)__p, (CFErrorRef *)&cf);
          if (*a7)
            CFRelease(*a7);
          *a7 = 0;
          v26 = cf;
          if (cf)
            CFRetain(cf);
          *a7 = v26;
          v19 = v31;
          if (!v31)
            goto LABEL_44;
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
LABEL_42:
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
LABEL_44:
          v17 = v28;
        }
      }
      else
      {
        strcpy((char *)__p, "knotsV can not be null");
        HIBYTE(__p[2]) = 22;
        v17 = (char *)operator new(0x78uLL);
        v28 = v17;
        strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
        if (a7)
        {
          *(_QWORD *)&v32.__val_ = 22;
          v32.__cat_ = std::generic_category();
          sub_20EA67538(&v32, (uint64_t)__p, (CFErrorRef *)&cf);
          if (*a7)
            CFRelease(*a7);
          *a7 = 0;
          v24 = cf;
          if (cf)
            CFRetain(cf);
          *a7 = v24;
          v19 = v31;
          if (!v31)
            goto LABEL_44;
          v25 = (unint64_t *)&v31->__shared_owners_;
          do
            v21 = __ldaxr(v25);
          while (__stlxr(v21 - 1, v25));
          goto LABEL_42;
        }
      }
    }
    else
    {
      strcpy((char *)__p, "knotsU can not be null");
      HIBYTE(__p[2]) = 22;
      v17 = (char *)operator new(0x78uLL);
      v28 = v17;
      strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
      if (a7)
      {
        *(_QWORD *)&v32.__val_ = 22;
        v32.__cat_ = std::generic_category();
        sub_20EA67538(&v32, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a7)
          CFRelease(*a7);
        *a7 = 0;
        v22 = cf;
        if (cf)
          CFRetain(cf);
        *a7 = v22;
        v19 = v31;
        if (!v31)
          goto LABEL_44;
        v23 = (unint64_t *)&v31->__shared_owners_;
        do
          v21 = __ldaxr(v23);
        while (__stlxr(v21 - 1, v23));
        goto LABEL_42;
      }
    }
  }
  else
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DB480;
    strcpy((char *)__p[0], "Descriptor can not be null");
    v17 = (char *)operator new(0x78uLL);
    v28 = v17;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a7)
    {
      *(_QWORD *)&v32.__val_ = 22;
      v32.__cat_ = std::generic_category();
      sub_20EA67538(&v32, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a7)
        CFRelease(*a7);
      *a7 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a7 = v18;
      v19 = v31;
      if (!v31)
        goto LABEL_44;
      v20 = (unint64_t *)&v31->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_42;
    }
  }
  operator delete(v17);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E90D484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMFFAViewRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 96);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DSLAMCalibrationSetFFACalibration(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  CFTypeRef v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DCC80;
    strcpy((char *)__p[0], "Calibration can not be null");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_20EA67538(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_46;
  }
  if (!a2)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFB0;
    strcpy((char *)__p[0], "FFA view can not be null");
    v16 = (char *)operator new(0x78uLL);
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_20EA67538(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v17;
      v18 = v28;
      if (v28)
      {
        v19 = (unint64_t *)&v28->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    operator delete(v16);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
LABEL_46:
    operator delete(__p[0]);
    return 0;
  }
  if ((sub_20EA8FC90(a1, a2 + 8) & 1) == 0)
  {
    HIBYTE(__p[2]) = 17;
    strcpy((char *)__p, "Failed to set FFA");
    v21 = (char *)operator new(0x78uLL);
    strcpy(v21, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCalibration.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_20EA67538(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v22 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v22;
      v23 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    operator delete(v21);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_46;
  }
  v6 = sub_20EA93A0C((uint64_t)a1, *(_DWORD *)(a2 + 88), *(_DWORD *)(a2 + 92));
  *((_QWORD *)v6 + 55) = 0x3FF0000000000000;
  *((_QWORD *)v6 + 56) = 0x3F847AE147AE147BLL;
  v6[124] = 3;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 64);
  *((_QWORD *)v6 + 63) = 0;
  *((_QWORD *)v6 + 64) = 0;
  if (!v7)
    return 1;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return 1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return 1;
}

void sub_20E90D99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_20E90D9F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  if (*(unsigned __int8 *)(a1 + 408) == *((unsigned __int8 *)a2 + 408))
  {
    if (*(_BYTE *)(a1 + 408))
    {
      v4 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)a1 = v4;
      v6 = (_QWORD *)(a1 + 16);
      v5 = *(void **)(a1 + 16);
      v7 = a2 + 2;
      if (v5)
      {
        *(_QWORD *)(a1 + 24) = v5;
        operator delete(v5);
        *v6 = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 32) = a2[4];
      *v7 = 0;
      a2[3] = 0;
      a2[4] = 0;
      v8 = *(void **)(a1 + 40);
      if (v8)
      {
        *(_QWORD *)(a1 + 48) = v8;
        operator delete(v8);
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(a1 + 56) = a2[7];
      a2[6] = 0;
      a2[7] = 0;
      a2[5] = 0;
      v10 = *((_OWORD *)a2 + 9);
      v9 = *((_OWORD *)a2 + 10);
      v11 = *((_OWORD *)a2 + 8);
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_OWORD *)(a1 + 144) = v10;
      *(_OWORD *)(a1 + 160) = v9;
      *(_OWORD *)(a1 + 128) = v11;
      v12 = *((_OWORD *)a2 + 4);
      v13 = *((_OWORD *)a2 + 5);
      v14 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v14;
      *(_OWORD *)(a1 + 64) = v12;
      *(_OWORD *)(a1 + 80) = v13;
      v15 = *(_OWORD *)(a2 + 23);
      a2[23] = 0;
      a2[24] = 0;
      v16 = *(std::__shared_weak_count **)(a1 + 192);
      *(_OWORD *)(a1 + 184) = v15;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = *(_OWORD *)(a2 + 25);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
      *(_OWORD *)(a1 + 200) = v19;
      v20 = *(_OWORD *)(a2 + 29);
      v21 = *(_OWORD *)(a2 + 31);
      v22 = *(_OWORD *)(a2 + 33);
      *(_QWORD *)(a1 + 280) = a2[35];
      *(_OWORD *)(a1 + 264) = v22;
      *(_OWORD *)(a1 + 248) = v21;
      *(_OWORD *)(a1 + 232) = v20;
      v24 = *((_OWORD *)a2 + 23);
      v23 = *((_OWORD *)a2 + 24);
      v25 = *((_OWORD *)a2 + 22);
      *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
      *(_OWORD *)(a1 + 368) = v24;
      *(_OWORD *)(a1 + 384) = v23;
      *(_OWORD *)(a1 + 352) = v25;
      result = *((__n128 *)a2 + 18);
      v27 = *((_OWORD *)a2 + 19);
      v28 = *((_OWORD *)a2 + 21);
      *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
      *(_OWORD *)(a1 + 336) = v28;
      *(__n128 *)(a1 + 288) = result;
      *(_OWORD *)(a1 + 304) = v27;
    }
  }
  else if (*(_BYTE *)(a1 + 408))
  {
    v29 = *(std::__shared_weak_count **)(a1 + 192);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(void **)(a1 + 40);
    if (v32)
    {
      *(_QWORD *)(a1 + 48) = v32;
      operator delete(v32);
    }
    v33 = *(void **)(a1 + 16);
    if (v33)
    {
      *(_QWORD *)(a1 + 24) = v33;
      operator delete(v33);
    }
    *(_BYTE *)(a1 + 408) = 0;
  }
  else
  {
    v34 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    a2[2] = 0;
    a2[3] = 0;
    a2[4] = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    a2[6] = 0;
    a2[7] = 0;
    a2[5] = 0;
    v36 = *((_OWORD *)a2 + 9);
    v35 = *((_OWORD *)a2 + 10);
    v37 = *((_OWORD *)a2 + 8);
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_OWORD *)(a1 + 144) = v36;
    *(_OWORD *)(a1 + 160) = v35;
    *(_OWORD *)(a1 + 128) = v37;
    v38 = *((_OWORD *)a2 + 4);
    v39 = *((_OWORD *)a2 + 5);
    v40 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v40;
    *(_OWORD *)(a1 + 64) = v38;
    *(_OWORD *)(a1 + 80) = v39;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
    a2[23] = 0;
    a2[24] = 0;
    v41 = *(_OWORD *)(a2 + 31);
    v42 = *(_OWORD *)(a2 + 33);
    v43 = a2[35];
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_QWORD *)(a1 + 280) = v43;
    *(_OWORD *)(a1 + 264) = v42;
    *(_OWORD *)(a1 + 248) = v41;
    v44 = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = v44;
    v45 = *((_OWORD *)a2 + 21);
    v47 = *((_OWORD *)a2 + 18);
    v46 = *((_OWORD *)a2 + 19);
    *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 336) = v45;
    *(_OWORD *)(a1 + 288) = v47;
    *(_OWORD *)(a1 + 304) = v46;
    result = *((__n128 *)a2 + 22);
    v48 = *((_OWORD *)a2 + 23);
    v49 = *((_OWORD *)a2 + 24);
    *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
    *(_OWORD *)(a1 + 368) = v48;
    *(_OWORD *)(a1 + 384) = v49;
    *(__n128 *)(a1 + 352) = result;
    *(_BYTE *)(a1 + 408) = 1;
  }
  return result;
}

uint64_t sub_20E90DCE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(a1 + 520))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 512);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 192);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(void **)(a1 + 40);
    if (v8)
    {
      *(_QWORD *)(a1 + 48) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(a1 + 16);
    if (v9)
    {
      *(_QWORD *)(a1 + 24) = v9;
      operator delete(v9);
    }
  }
  return a1;
}

char *CV3DSLAMCMDataCreate(CFTypeRef cf, unsigned int a2, CFTypeRef *a3)
{
  char v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CFTypeRef v20;
  unint64_t *p_shared_owners;
  char *v22;
  __int128 v23;
  _BYTE __p[24];
  CFTypeRef cfa;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  if (cf)
  {
    v4 = a2;
    if (a2 <= 9 && a2 != 6)
    {
      sub_20E8E2770(__p, cf);
      v22 = *(char **)__p;
      *(_QWORD *)&v23 = *(_QWORD *)&__p[8];
      if (!*(_QWORD *)&__p[8])
        goto LABEL_11;
      v5 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      v7 = *(std::__shared_weak_count **)&__p[8];
      if (!*(_QWORD *)&__p[8])
        goto LABEL_11;
      v8 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v10 = (char *)operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
        if (!v10)
          goto LABEL_13;
      }
      else
      {
LABEL_11:
        v10 = (char *)operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
        if (!v10)
        {
LABEL_13:
          v11 = (std::__shared_weak_count *)v23;
          if (!(_QWORD)v23)
            return v10;
          v12 = (unint64_t *)(v23 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (v13)
            return v10;
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          return v10;
        }
      }
      sub_20E90EE08(__p, (uint64_t)&v22);
      *(_OWORD *)(v10 + 8) = *(_OWORD *)__p;
      v10[24] = v4;
      v10[80] = 0;
      *((_QWORD *)v10 + 5) = 0;
      *((_QWORD *)v10 + 6) = 0;
      *((_QWORD *)v10 + 4) = 0;
      v10[56] = 0;
      *((_DWORD *)v10 + 22) = 1;
      *(_QWORD *)v10 = off_24C9FBE90;
      goto LABEL_13;
    }
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DCA20;
    strcpy(*(char **)__p, "Invalid value for the slam cm data type");
    v15 = (char *)operator new(0x80uLL);
    v22 = v15;
    v23 = xmmword_2102DC3A0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
    if (!a3)
      goto LABEL_30;
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_20EA67538(&v27, (uint64_t)__p, (CFErrorRef *)&cfa);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v20 = cfa;
    if (cfa)
      CFRetain(cfa);
    *a3 = v20;
    v17 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      goto LABEL_26;
    }
  }
  else
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DBFE0;
    strcpy(*(char **)__p, "The given CM data is NULL");
    v15 = (char *)operator new(0x80uLL);
    v22 = v15;
    v23 = xmmword_2102DC3A0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
    if (!a3)
    {
LABEL_30:
      operator delete(v15);
      goto LABEL_31;
    }
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_20EA67538(&v27, (uint64_t)__p, (CFErrorRef *)&cfa);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v16 = cfa;
    if (cfa)
      CFRetain(cfa);
    *a3 = v16;
    v17 = v26;
    if (v26)
    {
      v18 = (unint64_t *)&v26->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_26:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (SHIBYTE(v23) < 0)
  {
    v15 = v22;
    goto LABEL_30;
  }
LABEL_31:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E90E140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCMDataRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMCMDataRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DSLAMCMDataGetData(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_QWORD *)(a1 + 8);
  __p = operator new(0x20uLL);
  v10 = xmmword_2102DBFE0;
  strcpy((char *)__p, "The given CM data is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E90E38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCMDataGetType(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v3;
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    v3 = *(unsigned __int8 *)(a1 + 24);
    if (v3 < 0xA && ((0x3BFu >> v3) & 1) != 0)
    {
      return byte_2102DCD5A[(char)v3];
    }
    else
    {
      __p = operator new(0x28uLL);
      v16 = xmmword_2102DCA20;
      strcpy((char *)__p, "Invalid value for the slam cm data type");
      v4 = (char *)operator new(0x80uLL);
      strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
      if (a2)
      {
        *(_QWORD *)&v19.__val_ = 22;
        v19.__cat_ = std::generic_category();
        sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v5 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v5;
        v6 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      operator delete(v4);
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      return 255;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2102DBFE0;
    strcpy((char *)__p, "The given CM data is NULL");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v12 = v18;
      if (v18)
      {
        v13 = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 255;
  }
}

void sub_20E90E6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMCMDataGetMetadata(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40))
      return 0;
    else
      return *(_QWORD *)(a1 + 32);
  }
  else
  {
    __p = operator new(0x20uLL);
    v10 = xmmword_2102DBFE0;
    strcpy((char *)__p, "The given CM data is NULL");
    v4 = (char *)operator new(0x80uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E90E8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMCMDataSetGroupIDString(uint64_t a1, CFIndex a2, CFTypeRef *a3)
{
  _BOOL8 v5;
  char *v6;
  const void *v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  const void *v11;
  unint64_t *v12;
  char *v14;
  const std::error_category *v15;
  CFErrorRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  __int128 v22;
  std::string __p;
  char v24;
  std::string __dst;
  CFErrorRef v26;
  std::__shared_weak_count *v27;
  std::error_condition v28;

  if (!a1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102DBFE0;
    strcpy(__p.__r_.__value_.__l.__data_, "The given CM data is NULL");
    v6 = (char *)operator new(0x80uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_2102DC3A0;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
    if (a3)
    {
      v21 = 22;
      *(_QWORD *)&v22 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v21, (uint64_t)&__p, (CFErrorRef *)&v28);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = *(const void **)&v28.__val_;
      if (*(_QWORD *)&v28.__val_)
        CFRetain(*(CFTypeRef *)&v28.__val_);
      *a3 = v7;
      cat = (std::__shared_weak_count *)v28.__cat_;
      if (!v28.__cat_)
        goto LABEL_24;
      v9 = (unint64_t *)&v28.__cat_[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
LABEL_23:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
LABEL_25:
        v6 = (char *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_26;
      }
LABEL_24:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_27:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return 0;
      }
      goto LABEL_25;
    }
LABEL_26:
    operator delete(v6);
    goto LABEL_27;
  }
  if (!a2)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&__p, "The group id is null");
    v6 = (char *)operator new(0x80uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_2102DC3A0;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
    if (a3)
    {
      v21 = 22;
      *(_QWORD *)&v22 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v21, (uint64_t)&__p, (CFErrorRef *)&v28);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = *(const void **)&v28.__val_;
      if (*(_QWORD *)&v28.__val_)
        CFRetain(*(CFTypeRef *)&v28.__val_);
      *a3 = v11;
      cat = (std::__shared_weak_count *)v28.__cat_;
      if (!v28.__cat_)
        goto LABEL_24;
      v12 = (unint64_t *)&v28.__cat_[1];
      do
        v10 = __ldaxr(v12);
      while (__stlxr(v10 - 1, v12));
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  sub_20EA5E5C4(a2, &__p);
  v5 = v24 != 0;
  if (v24)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    v20 = (void **)(a1 + 56);
    if (*(_BYTE *)(a1 + 80))
    {
      if (*(char *)(a1 + 79) < 0)
        operator delete(*v20);
      *(_OWORD *)v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 72) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      if (!v24)
        return v5;
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 72) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      *(_BYTE *)(a1 + 80) = 1;
      if (!v24)
        return v5;
    }
    goto LABEL_58;
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_2102DBFE0;
  strcpy(__dst.__r_.__value_.__l.__data_, "The group id is not valid");
  v14 = (char *)operator new(0x80uLL);
  v21 = (uint64_t)v14;
  v22 = xmmword_2102DC3A0;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMCollaborativeMapping.cpp");
  if (a3)
  {
    v15 = std::generic_category();
    *(_QWORD *)&v28.__val_ = 22;
    v28.__cat_ = v15;
    sub_20EA67538(&v28, (uint64_t)&__dst, &v26);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v16 = v26;
    if (v26)
      CFRetain(v26);
    *a3 = v16;
    v17 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_57;
    }
    v14 = (char *)v21;
  }
  operator delete(v14);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if (!v24)
      return v5;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (!v24)
    return v5;
LABEL_58:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v5;
  operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20E90ED74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E90EE08(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8E2770(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20E90EF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMConfigAsString(uint64_t a1, char **a2)
{
  uint64_t v2;
  char **v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  uint64_t v13;
  __int128 *p_p;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  char *v25;
  char *v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const void *v34;
  size_t v35;
  char *p_s1;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char **v43;
  void *__dst[2];
  int64_t v45;
  __int128 __p;
  uint64_t v47;
  char *__s1;
  char *v49;
  unint64_t v50;
  _QWORD v51[2];
  _QWORD v52[3];
  const void *v53;
  uint64_t v54;
  const void *v55;
  unint64_t v56;
  void *v57;
  char v58;
  unint64_t v59;
  int v60;
  uint64_t v61;

  v2 = 4;
  if (!a1)
    return v2;
  v3 = a2;
  if (!a2)
    return v2;
  sub_20E863438((uint64_t)v51);
  sub_20EAADBB8();
  v5 = __s1;
  v4 = v49;
  if (0xAAAAAAAAAAAAAAABLL * ((v49 - __s1) >> 4) < 2)
    goto LABEL_30;
  v43 = v3;
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = &v5[v6];
    if (v5[v6 + 23] < 0)
    {
      sub_20E860C04(__dst, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      v45 = *((_QWORD *)v8 + 2);
      *(_OWORD *)__dst = v9;
    }
    v10 = (void **)&v5[v6 + 24];
    if (v5[v6 + 47] < 0)
    {
      sub_20E860C04(&__p, *v10, *(_QWORD *)&v5[v6 + 32]);
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v47 = *(_QWORD *)&v5[v6 + 40];
      __p = v11;
    }
    if (v45 >= 0)
      v12 = __dst;
    else
      v12 = (void **)__dst[0];
    if (v45 >= 0)
      v13 = HIBYTE(v45);
    else
      v13 = (uint64_t)__dst[1];
    sub_20E86A980(v52, (uint64_t)v12, v13);
    sub_20E86A980(v52, (uint64_t)": ", 2);
    if (v47 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if (v47 >= 0)
      v15 = HIBYTE(v47);
    else
      v15 = *((_QWORD *)&__p + 1);
    sub_20E86A980(v52, (uint64_t)p_p, v15);
    sub_20E86A980(v52, (uint64_t)", ", 2);
    if (SHIBYTE(v47) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v45) & 0x80000000) == 0)
        goto LABEL_5;
    }
    else if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(__dst[0]);
LABEL_5:
    ++v7;
    v5 = __s1;
    v4 = v49;
    v6 += 48;
  }
  while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v49 - __s1) >> 4));
  v3 = v43;
LABEL_30:
  if (*(v4 - 25) < 0)
  {
    sub_20E860C04(__dst, *((void **)v4 - 6), *((_QWORD *)v4 - 5));
  }
  else
  {
    v16 = *((_OWORD *)v4 - 3);
    v45 = *((_QWORD *)v4 - 4);
    *(_OWORD *)__dst = v16;
  }
  if (*(v4 - 1) < 0)
  {
    sub_20E860C04(&__p, *((void **)v4 - 3), *((_QWORD *)v4 - 2));
  }
  else
  {
    v17 = *(_OWORD *)(v4 - 24);
    v47 = *((_QWORD *)v4 - 1);
    __p = v17;
  }
  if (v45 >= 0)
    v18 = __dst;
  else
    v18 = (void **)__dst[0];
  if (v45 >= 0)
    v19 = HIBYTE(v45);
  else
    v19 = (uint64_t)__dst[1];
  sub_20E86A980(v52, (uint64_t)v18, v19);
  sub_20E86A980(v52, (uint64_t)": ", 2);
  if (v47 >= 0)
    v20 = &__p;
  else
    v20 = (__int128 *)__p;
  if (v47 >= 0)
    v21 = HIBYTE(v47);
  else
    v21 = *((_QWORD *)&__p + 1);
  sub_20E86A980(v52, (uint64_t)v20, v21);
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)__p);
    if (SHIBYTE(v45) < 0)
      goto LABEL_56;
LABEL_50:
    v22 = __s1;
    if (!__s1)
      goto LABEL_51;
LABEL_57:
    v25 = v49;
    v26 = v22;
    if (v49 == v22)
    {
LABEL_66:
      v49 = v22;
      operator delete(v26);
      v23 = v60;
      if ((v60 & 0x10) == 0)
        goto LABEL_52;
LABEL_67:
      v27 = v59;
      if (v59 < v56)
      {
        v59 = v56;
        v27 = v56;
      }
      v28 = v55;
      v29 = v27 - (_QWORD)v55;
      if (v27 - (unint64_t)v55 > 0x7FFFFFFFFFFFFFF7)
LABEL_98:
        sub_20E860B7C();
LABEL_70:
      if (v29 >= 0x17)
      {
        v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v31 = v29 | 7;
        v32 = v31 + 1;
        v30 = operator new(v31 + 1);
        __dst[1] = (void *)v29;
        v45 = v32 | 0x8000000000000000;
        __dst[0] = v30;
      }
      else
      {
        HIBYTE(v45) = v29;
        v30 = __dst;
        if (!v29)
        {
          LOBYTE(__dst[0]) = 0;
          v24 = v60;
          if ((v60 & 0x10) != 0)
            goto LABEL_79;
          goto LABEL_73;
        }
      }
      memmove(v30, v28, v29);
      *((_BYTE *)v30 + v29) = 0;
      v24 = v60;
      if ((v60 & 0x10) != 0)
        goto LABEL_79;
      goto LABEL_73;
    }
    while (1)
    {
      if (*(v25 - 1) < 0)
      {
        operator delete(*((void **)v25 - 3));
        if (*(v25 - 25) < 0)
LABEL_64:
          operator delete(*((void **)v25 - 6));
      }
      else if (*(v25 - 25) < 0)
      {
        goto LABEL_64;
      }
      v25 -= 48;
      if (v25 == v22)
      {
        v26 = __s1;
        goto LABEL_66;
      }
    }
  }
  if ((SHIBYTE(v45) & 0x80000000) == 0)
    goto LABEL_50;
LABEL_56:
  operator delete(__dst[0]);
  v22 = __s1;
  if (__s1)
    goto LABEL_57;
LABEL_51:
  v23 = v60;
  if ((v60 & 0x10) != 0)
    goto LABEL_67;
LABEL_52:
  if ((v23 & 8) != 0)
  {
    v28 = v53;
    v29 = v54 - (_QWORD)v53;
    if ((unint64_t)(v54 - (_QWORD)v53) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_98;
    goto LABEL_70;
  }
  HIBYTE(v45) = 0;
  LOBYTE(__dst[0]) = 0;
  v24 = v60;
  if ((v60 & 0x10) == 0)
  {
LABEL_73:
    if ((v24 & 8) == 0)
    {
      HIBYTE(v50) = 0;
      LOBYTE(__s1) = 0;
      goto LABEL_85;
    }
    v34 = v53;
    v35 = v54 - (_QWORD)v53;
    if ((unint64_t)(v54 - (_QWORD)v53) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_82;
LABEL_100:
    sub_20E860B7C();
  }
LABEL_79:
  v33 = v59;
  if (v59 < v56)
  {
    v59 = v56;
    v33 = v56;
  }
  v34 = v55;
  v35 = v33 - (_QWORD)v55;
  if (v33 - (unint64_t)v55 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_100;
LABEL_82:
  if (v35 >= 0x17)
  {
    v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v40 = v35 | 7;
    v41 = v40 + 1;
    p_s1 = (char *)operator new(v40 + 1);
    v49 = (char *)v35;
    v50 = v41 | 0x8000000000000000;
    __s1 = p_s1;
  }
  else
  {
    HIBYTE(v50) = v35;
    p_s1 = (char *)&__s1;
    if (!v35)
    {
      LOBYTE(__s1) = 0;
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_95:
      v42 = __s1;
      *v3 = strdup(__s1);
      operator delete(v42);
      v2 = *v3 == 0;
      if (SHIBYTE(v45) < 0)
        goto LABEL_86;
      goto LABEL_87;
    }
  }
  memmove(p_s1, v34, v35);
  p_s1[v35] = 0;
  if (SHIBYTE(v50) < 0)
    goto LABEL_95;
LABEL_85:
  v37 = strdup((const char *)&__s1);
  *v3 = v37;
  v2 = v37 == 0;
  if (SHIBYTE(v45) < 0)
LABEL_86:
    operator delete(__dst[0]);
LABEL_87:
  v51[0] = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v51 + *(_QWORD *)(v51[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v52[0] = v38;
  v52[1] = MEMORY[0x24BEDB848] + 16;
  if (v58 < 0)
    operator delete(v57);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v61);
  return v2;
}

void sub_20E90F4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20E90F568(&a21);
  sub_20E863784((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void **sub_20E90F568(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t CV3DSLAMConfigEnablePlaneDebug(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 10764) = 1;
  return result;
}

uint64_t CV3DSLAMConfigEnableVfusionDebug(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 10761) = 1;
  return result;
}

uint64_t CV3DSLAMConfigEnableSmoothing(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 12288) = 1;
  return result;
}

uint64_t CV3DSLAMConfigDisableSmoothing(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 12288) = 0;
  return result;
}

uint64_t CV3DSLAMConfigSetFrameSelectorBurstModeFrameRate(uint64_t a1, int a2)
{
  uint64_t result;

  result = 4;
  if (a1)
  {
    if (a2 >= 1)
    {
      result = 0;
      *(_DWORD *)(a1 + 12856) = a2;
    }
  }
  return result;
}

uint64_t CV3DSLAMConfigSetFrameSelectorNormalModeFrameRate(uint64_t a1, float a2)
{
  uint64_t result;

  result = 4;
  if (a1)
  {
    if (a2 > 0.0)
    {
      result = 0;
      *(float *)(a1 + 12864) = a2;
    }
  }
  return result;
}

uint64_t CV3DSLAMConfigSetFeatureSelectorBurstModeFrameRate()
{
  return 0;
}

uint64_t CV3DSLAMConfigSetFeatureSelectorNormalModeFrameRate()
{
  return 0;
}

uint64_t CV3DSLAMConfigEnableExplicitPriorityForAll(uint64_t a1, int a2)
{
  uint64_t result;

  result = 4;
  if (a1)
  {
    if ((a2 - 94) >= 0xFFFFFFA3)
    {
      result = 0;
      *(_DWORD *)(a1 + 12884) = a2;
      *(_BYTE *)(a1 + 12888) = 1;
    }
  }
  return result;
}

uint64_t CV3DSLAMConfigEnableLocatedMapping(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 8944) = 1;
  return result;
}

uint64_t CV3DSLAMConfigDisableLocatedMapping(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 8944) = 0;
  return result;
}

uint64_t CV3DSLAMConfigEnableTransformToExternalSubmap(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 8705) = a2;
  return result;
}

uint64_t CV3DSLAMConfigEnableReinitialization(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 464) = 1;
  return result;
}

uint64_t CV3DSLAMConfigEnableMultiSubmapImageRetrieval(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;

  if (!a1)
    return 4;
  result = 0;
  if (a2)
    v4 = 5;
  else
    v4 = 1;
  *(_BYTE *)(a1 + 7120) = a2;
  *(_DWORD *)(a1 + 8668) = v4;
  return result;
}

uint64_t CV3DSLAMConfigEnableMapDebug(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  if (!a1)
    return 4;
  v1 = a1;
  result = 0;
  v1 += 8679;
  *(_WORD *)(v1 + 2083) = 257;
  *(_BYTE *)v1 = 1;
  return result;
}

uint64_t CV3DSLAMConfigSetDataVerificationFrameParams(double *a1, double a2, double a3, double a4, double a5)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  a1[751] = a2;
  a1[752] = a3;
  a1[753] = a4;
  a1[754] = a5;
  return result;
}

uint64_t CV3DSLAMConfigSetDataVerificationSignificantDataDropInterval(uint64_t a1, double a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(double *)(a1 + 6040) = a2;
  return result;
}

uint64_t CV3DSLAMConfigEnableDataVerificationLatencyCheck(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 6056) = a2;
  return result;
}

uint64_t sub_20E90F850()
{
  _DWORD *v0;
  _BYTE *v1;
  _BYTE *v2;
  unsigned __int8 v3;
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char v8;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15[4];
  int64x2_t v16;
  char v17;
  __int16 v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int64x2_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  int32x2_t v42;
  __int16 v43;
  __int16 v44;
  char v45;
  int64x2_t v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  char v63;
  char v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int16 v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  __int16 v87;
  char v88;
  char v89;
  int v90;
  char v91;
  char v92;
  char v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  __int16 v97;
  char v98;
  char v99;
  __int16 v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  __int128 v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  uint64_t v125;
  char v126;
  char v127;
  __int16 v128;
  char v129;
  char v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char v140;
  _BYTE *v141;
  uint64_t v142;
  char v143;
  _BYTE *v144;
  uint64_t v145;
  char v146;
  _BYTE *v147;
  uint64_t v148;
  char v149;
  char v150;
  _BYTE *v151;
  uint64_t v152;
  char v153;
  int32x2_t v154;
  _QWORD v155[747];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  __int16 v170;
  char v171;
  __int16 v172;
  uint64_t v173;
  char v174;
  char v175;
  __int16 v176;
  uint64_t (***v177)();
  uint64_t v178;

  v0 = (_DWORD *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v178 = *MEMORY[0x24BDAC8D0];
  v154 = vdup_n_s32(0x140u);
  sub_20EE7D5CC((uint64_t)v155);
  sub_20E8EC534((uint64_t)&v161);
  v168 = 10;
  v169 = 0x4120000040400000;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0x100000000;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  v177 = &off_254A5A4B8;
  sub_20EE7F420((uint64_t)&v119);
  v4 = 1;
  switch(*v0)
  {
    case 1:
      sub_20EE7D5CC((uint64_t)&v16);
      sub_20EE7EBDC((uint64_t)&v16);
      v51 = 0x4014000000000000;
      v28 = 4;
      v79 = 40;
      v80 = 0x3FE6666666666666;
      v35 = 1;
      v46 = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
      v47 = 0x3F1A36E2EB1C432DLL;
      v86 = 1;
      v53 = 12;
      v22 = 400;
      v61 = 1000;
      goto LABEL_41;
    case 2:
      sub_20EE7D5CC((uint64_t)&v16);
      sub_20EE7F2B4(&v16);
      v92 = 1;
      v62 = 0x3FD999999999999ALL;
      v74 = 200;
      v93 = 1;
      v94 = 257;
      v87 = 0;
      v89 = 1;
      v91 = 0;
      v90 = 4;
      v76 = 0x4000000000000000;
      v88 = 1;
      v19 = 0;
      v26 = 0;
      v64 = 1;
      v95 = 500;
      v118 = 1;
      v49 = 0;
      v67 = xmmword_2102DCDE0;
      v69 = xmmword_2102DCDF0;
      v66 = xmmword_2102DCE00;
      v68 = xmmword_2102DCE80;
      v70 = 0;
      goto LABEL_41;
    case 3:
      sub_20EE7F7FC((uint64_t)&v16);
      goto LABEL_41;
    case 4:
      sub_20EE7F920((uint64_t)&v16);
      goto LABEL_41;
    case 5:
      sub_20EE7FA30((uint64_t)&v16);
      goto LABEL_41;
    case 6:
      sub_20EE7D5CC((uint64_t)&v16);
      sub_20EE7F2B4(&v16);
      v92 = 1;
      v62 = 0x3FD999999999999ALL;
      v74 = 200;
      v93 = 1;
      v94 = 257;
      v87 = 0;
      v89 = 1;
      v91 = 0;
      v90 = 4;
      v76 = 0x4000000000000000;
      v88 = 1;
      v19 = 0;
      v26 = 0;
      v64 = 1;
      v95 = 500;
      v118 = 1;
      v49 = 0;
      v67 = xmmword_2102DCDE0;
      v69 = xmmword_2102DCDF0;
      v66 = xmmword_2102DCE00;
      v68 = xmmword_2102DCE80;
      v70 = 0;
      v35 = 1;
      v38 = 1;
      goto LABEL_41;
    case 7:
      sub_20EE7FA30((uint64_t)&v16);
      v82 = 1;
      *(_QWORD *)&v72 = 1000;
      *((_QWORD *)&v72 + 1) = v112;
      LOBYTE(v97) = 0;
      v100 = 257;
      *(_QWORD *)&v103 = 10;
      v96 = 257;
      v42 = vdup_n_s32(0x3E8u);
      v114 = 1;
      v115 = 1;
      v116 = 1;
      goto LABEL_41;
    case 8:
      sub_20EE7FA30((uint64_t)&v16);
      v72 = xmmword_2102DCE70;
      v81 = 0x47EFFFFFE0000000;
      v21 = 0;
      v85 = 0;
      v18 = 257;
      goto LABEL_41;
    case 9:
      v140 = 0;
      v130 = 0;
      v123 = 0;
      v120 = 1;
      v135 = 0uLL;
      v119 = xmmword_2102DCDC0;
      if (v153 < 0)
      {
        v152 = 0;
        v5 = v151;
      }
      else
      {
        v5 = &v151;
        v153 = 0;
      }
      *v5 = 0;
      if (v143 < 0)
      {
        v142 = 0;
        v10 = v141;
      }
      else
      {
        v143 = 0;
        v10 = &v141;
      }
      *v10 = 0;
      if (v146 < 0)
      {
        v145 = 0;
        v12 = v144;
      }
      else
      {
        v12 = &v144;
        v146 = 0;
      }
      *v12 = 0;
      if (v149 < 0)
      {
        v148 = 0;
        *v147 = 0;
      }
      else
      {
        v149 = 0;
        LOBYTE(v147) = 0;
      }
      goto LABEL_42;
    case 0xA:
      v140 = 0;
      v130 = 0;
      v123 = 0;
      v120 = 1;
      v135 = 0uLL;
      v119 = xmmword_2102DCDC0;
      if (v153 < 0)
      {
        v152 = 0;
        v6 = v151;
      }
      else
      {
        v6 = &v151;
        v153 = 0;
      }
      *v6 = 0;
      if (v143 < 0)
      {
        v142 = 0;
        v11 = v141;
      }
      else
      {
        v143 = 0;
        v11 = &v141;
      }
      *v11 = 0;
      if (v146 < 0)
      {
        v145 = 0;
        v13 = v144;
      }
      else
      {
        v13 = &v144;
        v146 = 0;
      }
      *v13 = 0;
      if (v149 < 0)
      {
        v148 = 0;
        v14 = v147;
      }
      else
      {
        v14 = &v147;
        v149 = 0;
      }
      *v14 = 0;
      v125 = 0;
      goto LABEL_42;
    case 0xB:
      goto LABEL_16;
    case 0xC:
      v4 = 0;
LABEL_16:
      v132 = 5000;
      v133 = 0x3FC999999999999ALL;
      v131 = 1;
      v127 = 0;
      v124 = 0;
      v130 = 1;
      v123 = 1;
      v135 = xmmword_2102DCDB0;
      v121 = 1;
      v137 = 0;
      v138 = 0;
      v150 = v4;
      goto LABEL_42;
    case 0xD:
      sub_20EE8012C((uint64_t)&v16);
      goto LABEL_41;
    case 0xF:
      v134 = 0;
      v139 = 1;
      v136 = 0x3FC3333333333333;
      goto LABEL_42;
    case 0x10:
      sub_20EE7FA30((uint64_t)&v16);
      v112 = 0;
      v82 = 1;
      v72 = xmmword_2102DBC70;
      LOBYTE(v97) = 0;
      v100 = 257;
      v96 = 257;
      v42 = vdup_n_s32(0x3E8u);
      v77 = 0x3FA999999999999ALL;
      v78 = 0x4014000000000000;
      v79 = 1000;
      v80 = 0x3FEE666666666666;
      v111 = 256;
      v108 = 40;
      v109 = 0x4052C00000000000;
      v110 = xmmword_2102DCE40;
      *((_QWORD *)&v105 + 1) = 0x4038000000000000;
      v103 = xmmword_2102DCE60;
      goto LABEL_41;
    case 0x11:
      HIBYTE(v15[2]) = 20;
      strcpy((char *)v15, "CollaborativeMapping");
      sub_20EE80934((char *)v15, (uint64_t)&v16);
      goto LABEL_22;
    case 0x12:
      v15[0] = (char *)operator new(0x30uLL);
      *(_OWORD *)&v15[1] = xmmword_2102DC8E0;
      strcpy(v15[0], "CollaborativeMapping_Range_use_kf_to_kf_cov");
      sub_20EE80934((char *)v15, (uint64_t)&v16);
LABEL_22:
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      if (SHIBYTE(v15[2]) < 0)
        operator delete(v15[0]);
      goto LABEL_42;
    case 0x13:
      sub_20EE7FA30((uint64_t)&v16);
      v112 = 10;
      v82 = 1;
      v72 = xmmword_2102DCE20;
      v96 = 1;
      v42 = vdup_n_s32(0x3E8u);
      v37 = 0;
      v78 = 0x4014000000000000;
      v77 = 0x3FA47D5ED06FEF7CLL;
      v79 = 1000;
      v80 = 0x3FEE666666666666;
      v75 = 1;
      v111 = 1;
      v102 = 5;
      LOBYTE(v97) = 1;
      v100 = 0;
      v103 = xmmword_2102DCE30;
      v108 = 40;
      v109 = 0x4052C00000000000;
      v110 = xmmword_2102DCE40;
      v106 = 5;
      v107 = 0x3FB999999999999ALL;
      v105 = xmmword_2102DCE50;
      LOBYTE(v113) = 1;
      goto LABEL_41;
    case 0x15:
      sub_20EE7FA30((uint64_t)&v16);
      v82 = 1;
      v71 = 1;
      v50 = 1;
      *(_QWORD *)&v103 = 0;
      v102 = 5;
      v96 = 0;
      v113 = 257;
      v98 = 1;
      v99 = 0;
      v101 = 1;
      v104 = 2;
      v97 = 257;
      v100 = 1;
      goto LABEL_41;
    case 0x16:
      sub_20EE7F420((uint64_t)&v16);
      v82 = 1;
      *(_QWORD *)&v72 = 1000;
      *((_QWORD *)&v72 + 1) = v112;
      LOBYTE(v97) = 0;
      v100 = 257;
      *(_QWORD *)&v103 = 10;
      v96 = 257;
      v42 = vdup_n_s32(0x3E8u);
      goto LABEL_41;
    case 0x17:
      sub_20EE802D8((uint64_t)&v16);
      goto LABEL_57;
    case 0x18:
      sub_20EE7F420((uint64_t)&v16);
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      v126 = 1;
      v122 = 0;
      goto LABEL_42;
    case 0x19:
      sub_20EE7FA30((uint64_t)&v16);
      v25 = 0x3F7A36E2EB1C432DLL;
      v67 = xmmword_2102DCDE0;
      v69 = xmmword_2102DCDF0;
      v66 = xmmword_2102DCE00;
      v68 = xmmword_2102DCE10;
      v70 = 0;
      goto LABEL_41;
    case 0x1A:
      sub_20EE7F420((uint64_t)&v16);
      goto LABEL_41;
    case 0x1B:
      sub_20EE7FA30((uint64_t)&v16);
      v117 = 1;
      goto LABEL_41;
    case 0x1C:
      sub_20EE7F420((uint64_t)&v16);
      v62 = 0x3FD999999999999ALL;
      v83 = 0x4020000000000000;
      v84 = 0x4020000000000000;
      v7 = 0xFFFFFFFFLL;
      goto LABEL_36;
    case 0x1D:
      sub_20EE7FA30((uint64_t)&v16);
      v30 = xmmword_210385830;
      v17 = 1;
      v63 = 1;
      v29 = 1;
      v24 = 1;
      HIBYTE(v40) = 1;
      v31 = unk_210385840;
      v32 = xmmword_2102DCDD0;
      v23 = 0x4010000000000000;
      v33 = vdupq_n_s64(0x408F400000000000uLL);
      v54 = 2;
      v55 = 0x3FF0000000000000;
      v56 = 0;
      v57 = 0x4049000000000000;
      v52 = 1;
      v65 = 1;
      v60 = 0;
      sub_20EE7F158((uint64_t)&v16);
      v118 = 0;
      v39 = 0x3F7424E592967019;
      goto LABEL_41;
    case 0x1E:
      sub_20EE7F420((uint64_t)&v16);
      v48 = 800;
      v43 = 257;
      v44 = 1;
      v40 = 1;
      v45 = 1;
      v36 = 0;
      v34 = 0;
      goto LABEL_41;
    case 0x1F:
      sub_20EE7F420((uint64_t)&v16);
      v62 = 0x3FD999999999999ALL;
      v83 = 0x4020000000000000;
      v84 = 0x4020000000000000;
      v7 = 500;
LABEL_36:
      *(_QWORD *)&v72 = v7;
      v73 = v7;
      goto LABEL_41;
    case 0x20:
      sub_20EE7F420((uint64_t)&v16);
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      v120 = 1;
      goto LABEL_42;
    case 0x21:
      sub_20EE7F420((uint64_t)&v16);
      v48 = 800;
      v43 = 257;
      v44 = 1;
      v40 = 1;
      v45 = 1;
      v36 = 0;
      v34 = 0;
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      v120 = 1;
      goto LABEL_42;
    case 0x23:
      sub_20EE7F420((uint64_t)&v16);
      v48 = 800;
      v43 = 257;
      v44 = 1;
      v40 = 1;
      v45 = 1;
      v36 = 0;
      v34 = 0;
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      v129 = 1;
      v128 = 0;
      goto LABEL_42;
    case 0x24:
      sub_20EE7F420((uint64_t)&v16);
      v48 = 800;
      v43 = 257;
      v44 = 1;
      v40 = 1;
      v45 = 1;
      v36 = 0;
      v34 = 0;
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      v129 = 1;
      v128 = 1;
      goto LABEL_42;
    case 0x25:
      sub_20EE7F420((uint64_t)&v16);
      v62 = 0x3FD999999999999ALL;
      v83 = 0x4020000000000000;
      v84 = 0x4020000000000000;
      *(_QWORD *)&v72 = 500;
      v73 = 500;
      v41 = 0;
LABEL_41:
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      goto LABEL_42;
    case 0x26:
      sub_20EE7F420((uint64_t)&v16);
      v48 = 800;
      v43 = 257;
      v44 = 1;
      v40 = 1;
      v45 = 1;
      v36 = 0;
      v34 = 0;
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      v129 = 1;
      v128 = 257;
      goto LABEL_42;
    case 0x27:
      sub_20EE802D8((uint64_t)&v16);
      v20 = 1;
      v58 = 0;
      v59 = 0x3E99999A3CF5C28FLL;
      v27 = 0x4072C00000000000;
LABEL_57:
      sub_20E9107DC((uint64_t)&v119, (uint64_t)&v16);
      sub_20E869418((uint64_t)&v16);
      HIDWORD(v169) = 1106247680;
      v168 = 30;
      v159 = 0x3FB999999999999ALL;
      v156 = xmmword_2102DCD80;
      v155[746] = 0x3F543A2730ABEE4DLL;
      v158 = xmmword_2102DCD90;
      v157 = xmmword_2102DCDA0;
      v160 = 0;
LABEL_42:
      sub_20E862C24((uint64_t)v155, &v119);
      sub_20E909008((uint64_t)v2, (uint64_t)&v154);
      v8 = 1;
      break;
    default:
      v8 = 0;
      *v2 = 0;
      break;
  }
  v2[12904] = v8;
  sub_20E869418((uint64_t)&v119);
  if (v167)
    MEMORY[0x212BC6368](v167, 0x1000C8000313F17);
  if (v166)
    MEMORY[0x212BC6368](v166, 0x1000C8000313F17);
  if (v165)
    MEMORY[0x212BC6368](v165, 0x1000C8000313F17);
  if (v164)
    MEMORY[0x212BC6368](v164, 0x1000C8000313F17);
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  return sub_20E869418((uint64_t)v155);
}

void sub_20E9106D8(_Unwind_Exception *a1)
{
  sub_20E869418((uint64_t)&STACK[0x2CC0]);
  sub_20E8FE530(&STACK[0x5960]);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9107DC(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void **v25;
  __int128 *v26;
  __int128 v27;
  int v28;
  void *v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void **v40;
  __int128 v41;
  void **v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  void **v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  void **v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v4 = (__int128 *)(a2 + 8864);
  v5 = (char *)(a1 + 8887);
  memcpy((void *)a1, (const void *)a2, 0x10AuLL);
  sub_20E914AE8(a1 + 272, (__int128 *)(a2 + 272));
  sub_20E914D8C(a1 + 5016, (__int128 *)(a2 + 5016));
  v6 = *(_OWORD *)(a2 + 5984);
  *(_OWORD *)(a1 + 5968) = *(_OWORD *)(a2 + 5968);
  *(_OWORD *)(a1 + 5984) = v6;
  v7 = *(_OWORD *)(a2 + 6016);
  v8 = *(_OWORD *)(a2 + 6032);
  v9 = *(_WORD *)(a2 + 6048);
  *(_OWORD *)(a1 + 6000) = *(_OWORD *)(a2 + 6000);
  *(_WORD *)(a1 + 6048) = v9;
  *(_OWORD *)(a1 + 6032) = v8;
  *(_OWORD *)(a1 + 6016) = v7;
  sub_20E914FE0(a1 + 6056, a2 + 6056);
  v10 = (void **)(a1 + 8864);
  if (*v5 < 0)
    operator delete(*v10);
  v11 = *v4;
  *(_QWORD *)(a1 + 8880) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v10 = v11;
  *((_BYTE *)v4 + 23) = 0;
  *(_BYTE *)v4 = 0;
  v12 = (void **)(a1 + 8888);
  if (v5[24] < 0)
    operator delete(*v12);
  v13 = *(__int128 *)((char *)v4 + 24);
  *(_QWORD *)(a1 + 8904) = *((_QWORD *)v4 + 5);
  *(_OWORD *)v12 = v13;
  *((_BYTE *)v4 + 47) = 0;
  v14 = *(_OWORD *)(a2 + 8953);
  *((_BYTE *)v4 + 24) = 0;
  v15 = *(_OWORD *)(a2 + 8944);
  v16 = *(_OWORD *)(a2 + 8928);
  v17 = *(_OWORD *)(a2 + 8912);
  *(_OWORD *)(a1 + 8953) = v14;
  *(_OWORD *)(a1 + 8912) = v17;
  *(_OWORD *)(a1 + 8928) = v16;
  *(_OWORD *)(a1 + 8944) = v15;
  v18 = (void **)(a1 + 8976);
  if (v5[112] < 0)
    operator delete(*v18);
  v19 = v4[7];
  *(_QWORD *)(a1 + 8992) = *((_QWORD *)v4 + 16);
  *(_OWORD *)v18 = v19;
  *((_BYTE *)v4 + 135) = 0;
  *((_BYTE *)v4 + 112) = 0;
  v20 = *(_OWORD *)(a2 + 9000);
  v21 = *(_OWORD *)(a2 + 9016);
  v22 = *(_OWORD *)(a2 + 9032);
  *(_QWORD *)(a1 + 9048) = *(_QWORD *)(a2 + 9048);
  *(_OWORD *)(a1 + 9032) = v22;
  *(_OWORD *)(a1 + 9016) = v21;
  *(_OWORD *)(a1 + 9000) = v20;
  v23 = *(_OWORD *)(a2 + 9056);
  *(_QWORD *)(a1 + 9072) = *(_QWORD *)(a2 + 9072);
  *(_OWORD *)(a1 + 9056) = v23;
  v24 = *(_QWORD *)(a2 + 9096);
  *(_OWORD *)(a1 + 9080) = *(_OWORD *)(a2 + 9080);
  *(_QWORD *)(a1 + 9096) = v24;
  v25 = (void **)(a1 + 9104);
  if (v5[240] < 0)
    operator delete(*v25);
  v26 = (__int128 *)(a2 + 9384);
  v27 = v4[15];
  *(_QWORD *)(a1 + 9120) = *((_QWORD *)v4 + 32);
  *(_OWORD *)v25 = v27;
  *((_BYTE *)v4 + 263) = 0;
  *((_BYTE *)v4 + 240) = 0;
  v5[241] = *((_BYTE *)v4 + 264);
  v28 = *(_DWORD *)(a2 + 9144);
  *(_QWORD *)(a1 + 9136) = *(_QWORD *)(a2 + 9136);
  *(_DWORD *)(a1 + 9144) = v28;
  v29 = *(void **)(a1 + 9152);
  if (v29)
  {
    *(_QWORD *)(a1 + 9160) = v29;
    operator delete(v29);
    *(_QWORD *)(a1 + 9152) = 0;
    *(_QWORD *)(a1 + 9160) = 0;
    *(_QWORD *)(a1 + 9168) = 0;
  }
  *(_OWORD *)(a1 + 9152) = *(_OWORD *)(a2 + 9152);
  *(_QWORD *)(a1 + 9168) = *(_QWORD *)(a2 + 9168);
  *(_QWORD *)(a2 + 9160) = 0;
  *(_QWORD *)(a2 + 9152) = 0;
  *(_QWORD *)(a2 + 9168) = 0;
  *(_QWORD *)(a1 + 9176) = *(_QWORD *)(a2 + 9176);
  v30 = *(_OWORD *)(a2 + 9184);
  *(_BYTE *)(a1 + 9200) = *(_BYTE *)(a2 + 9200);
  v31 = (__int128 *)(a2 + 10656);
  *(_OWORD *)(a1 + 9184) = v30;
  v32 = *(_OWORD *)(a2 + 9304);
  v34 = *(_OWORD *)(a2 + 9256);
  v33 = *(_OWORD *)(a2 + 9272);
  *(_OWORD *)(a1 + 9288) = *(_OWORD *)(a2 + 9288);
  *(_OWORD *)(a1 + 9304) = v32;
  *(_OWORD *)(a1 + 9256) = v34;
  *(_OWORD *)(a1 + 9272) = v33;
  v36 = *(_OWORD *)(a2 + 9336);
  v35 = *(_OWORD *)(a2 + 9352);
  v37 = *(_OWORD *)(a2 + 9320);
  *(_OWORD *)(a1 + 9361) = *(_OWORD *)(a2 + 9361);
  *(_OWORD *)(a1 + 9336) = v36;
  *(_OWORD *)(a1 + 9352) = v35;
  *(_OWORD *)(a1 + 9320) = v37;
  v38 = *(_OWORD *)(a2 + 9208);
  v39 = *(_OWORD *)(a2 + 9240);
  *(_OWORD *)(a1 + 9224) = *(_OWORD *)(a2 + 9224);
  *(_OWORD *)(a1 + 9240) = v39;
  *(_OWORD *)(a1 + 9208) = v38;
  v40 = (void **)(a1 + 9384);
  if (v5[520] < 0)
    operator delete(*v40);
  v41 = *v26;
  *(_QWORD *)(a1 + 9400) = *(_QWORD *)(a2 + 9400);
  *(_OWORD *)v40 = v41;
  *(_BYTE *)(a2 + 9407) = 0;
  *(_BYTE *)v26 = 0;
  *(_QWORD *)(a1 + 9408) = *(_QWORD *)(a2 + 9408);
  *(_WORD *)(a1 + 9416) = *(_WORD *)(a2 + 9416);
  v42 = (void **)(a1 + 9424);
  if (*(char *)(a1 + 9447) < 0)
    operator delete(*v42);
  v43 = *(_OWORD *)(a2 + 9424);
  *(_QWORD *)(a1 + 9440) = *(_QWORD *)(a2 + 9440);
  *(_OWORD *)v42 = v43;
  *(_BYTE *)(a2 + 9447) = 0;
  *(_BYTE *)(a2 + 9424) = 0;
  v44 = *(_QWORD *)(a2 + 9464);
  *(_OWORD *)(a1 + 9448) = *(_OWORD *)(a2 + 9448);
  *(_QWORD *)(a1 + 9464) = v44;
  v45 = *(_OWORD *)(a2 + 9472);
  *(_BYTE *)(a1 + 9488) = *(_BYTE *)(a2 + 9488);
  *(_OWORD *)(a1 + 9472) = v45;
  sub_20E914D8C(a1 + 9496, (__int128 *)(a2 + 9496));
  v46 = *(_OWORD *)(a2 + 10464);
  *(_OWORD *)(a1 + 10448) = *(_OWORD *)(a2 + 10448);
  *(_OWORD *)(a1 + 10464) = v46;
  v47 = *(_OWORD *)(a2 + 10496);
  v48 = *(_OWORD *)(a2 + 10512);
  v49 = *(_OWORD *)(a2 + 10528);
  *(_OWORD *)(a1 + 10480) = *(_OWORD *)(a2 + 10480);
  *(_OWORD *)(a1 + 10528) = v49;
  *(_OWORD *)(a1 + 10512) = v48;
  *(_OWORD *)(a1 + 10496) = v47;
  v50 = *(_OWORD *)(a2 + 10588);
  v51 = *(_OWORD *)(a2 + 10560);
  v52 = *(_OWORD *)(a2 + 10576);
  *(_OWORD *)(a1 + 10544) = *(_OWORD *)(a2 + 10544);
  *(_OWORD *)(a1 + 10588) = v50;
  *(_OWORD *)(a1 + 10576) = v52;
  *(_OWORD *)(a1 + 10560) = v51;
  v53 = *(_DWORD *)(a2 + 10615);
  *(_QWORD *)(a1 + 10608) = *(_QWORD *)(a2 + 10608);
  *(_DWORD *)(a1 + 10615) = v53;
  v54 = *(_OWORD *)(a2 + 10640);
  *(_OWORD *)(a1 + 10624) = *(_OWORD *)(a2 + 10624);
  *(_OWORD *)(a1 + 10640) = v54;
  v55 = (void **)(a1 + 10656);
  if (*(unsigned __int8 *)(a1 + 10680) == *(unsigned __int8 *)(a2 + 10680))
  {
    if (*(_BYTE *)(a1 + 10680))
    {
      if (*(char *)(a1 + 10679) < 0)
        operator delete(*v55);
      v56 = *v31;
      *(_QWORD *)(a1 + 10672) = *(_QWORD *)(a2 + 10672);
      *(_OWORD *)v55 = v56;
      *(_BYTE *)(a2 + 10679) = 0;
      *(_BYTE *)v31 = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 10680))
  {
    if (*(char *)(a1 + 10679) < 0)
      operator delete(*v55);
    *(_BYTE *)(a1 + 10680) = 0;
  }
  else
  {
    v57 = *v31;
    *(_QWORD *)(a1 + 10672) = *(_QWORD *)(a2 + 10672);
    *(_OWORD *)v55 = v57;
    *(_QWORD *)(a2 + 10664) = 0;
    *(_QWORD *)(a2 + 10672) = 0;
    *(_QWORD *)v31 = 0;
    *(_BYTE *)(a1 + 10680) = 1;
  }
  *(_WORD *)(a1 + 10688) = *(_WORD *)(a2 + 10688);
  v58 = *(void **)(a1 + 10696);
  if (v58)
  {
    *(_QWORD *)(a1 + 10704) = v58;
    operator delete(v58);
    *(_QWORD *)(a1 + 10696) = 0;
    *(_QWORD *)(a1 + 10704) = 0;
    *(_QWORD *)(a1 + 10712) = 0;
  }
  *(_QWORD *)(a1 + 10696) = *(_QWORD *)(a2 + 10696);
  *(_QWORD *)(a1 + 10704) = *(_QWORD *)(a2 + 10704);
  *(_QWORD *)(a1 + 10712) = *(_QWORD *)(a2 + 10712);
  *(_QWORD *)(a2 + 10696) = 0;
  *(_QWORD *)(a2 + 10704) = 0;
  *(_QWORD *)(a2 + 10712) = 0;
  v59 = *(void **)(a1 + 10720);
  if (v59)
  {
    *(_QWORD *)(a1 + 10728) = v59;
    operator delete(v59);
    *(_QWORD *)(a1 + 10720) = 0;
    *(_QWORD *)(a1 + 10728) = 0;
    *(_QWORD *)(a1 + 10736) = 0;
  }
  *(_OWORD *)(a1 + 10720) = *(_OWORD *)(a2 + 10720);
  *(_QWORD *)(a1 + 10736) = *(_QWORD *)(a2 + 10736);
  *(_QWORD *)(a2 + 10720) = 0;
  *(_QWORD *)(a2 + 10728) = 0;
  *(_QWORD *)(a2 + 10736) = 0;
  v60 = *(_QWORD *)(a2 + 10744);
  *(_QWORD *)(a1 + 10749) = *(_QWORD *)(a2 + 10749);
  *(_QWORD *)(a1 + 10744) = v60;
  *(_QWORD *)(a1 + 10760) = *(_QWORD *)(a2 + 10760);
  v61 = *(_OWORD *)(a2 + 10768);
  v62 = *(_OWORD *)(a2 + 10784);
  v63 = *(_OWORD *)(a2 + 10800);
  *(_OWORD *)(a1 + 10816) = *(_OWORD *)(a2 + 10816);
  *(_OWORD *)(a1 + 10800) = v63;
  *(_OWORD *)(a1 + 10784) = v62;
  *(_OWORD *)(a1 + 10768) = v61;
  v64 = *(_OWORD *)(a2 + 10832);
  v65 = *(_OWORD *)(a2 + 10848);
  v66 = *(_OWORD *)(a2 + 10864);
  *(_OWORD *)(a1 + 10880) = *(_OWORD *)(a2 + 10880);
  *(_OWORD *)(a1 + 10864) = v66;
  *(_OWORD *)(a1 + 10848) = v65;
  *(_OWORD *)(a1 + 10832) = v64;
  v67 = *(_OWORD *)(a2 + 10896);
  v68 = *(_OWORD *)(a2 + 10912);
  v69 = *(_OWORD *)(a2 + 10928);
  *(_QWORD *)(a1 + 10944) = *(_QWORD *)(a2 + 10944);
  *(_OWORD *)(a1 + 10928) = v69;
  *(_OWORD *)(a1 + 10912) = v68;
  *(_OWORD *)(a1 + 10896) = v67;
  v70 = *(_OWORD *)(a2 + 10952);
  v71 = *(_OWORD *)(a2 + 10984);
  *(_OWORD *)(a1 + 10968) = *(_OWORD *)(a2 + 10968);
  *(_OWORD *)(a1 + 10984) = v71;
  *(_OWORD *)(a1 + 10952) = v70;
  v72 = *(_OWORD *)(a2 + 11000);
  *(_QWORD *)(a1 + 11016) = *(_QWORD *)(a2 + 11016);
  *(_OWORD *)(a1 + 11000) = v72;
  v73 = *(_OWORD *)(a2 + 11056);
  v74 = *(_OWORD *)(a2 + 11072);
  v75 = *(_QWORD *)(a2 + 11088);
  *(_OWORD *)(a1 + 11040) = *(_OWORD *)(a2 + 11040);
  *(_QWORD *)(a1 + 11088) = v75;
  *(_OWORD *)(a1 + 11072) = v74;
  *(_OWORD *)(a1 + 11056) = v73;
  *(_OWORD *)(a1 + 11024) = *(_OWORD *)(a2 + 11024);
  *(_BYTE *)(a1 + 11096) = *(_BYTE *)(a2 + 11096);
  v76 = (void **)(a1 + 11104);
  if (*(char *)(a1 + 11127) < 0)
    operator delete(*v76);
  v77 = *(_OWORD *)(a2 + 11104);
  *(_QWORD *)(a1 + 11120) = *(_QWORD *)(a2 + 11120);
  *(_OWORD *)v76 = v77;
  *(_BYTE *)(a2 + 11127) = 0;
  *(_BYTE *)(a2 + 11104) = 0;
  v78 = *(_OWORD *)(a2 + 11128);
  v79 = *(_OWORD *)(a2 + 11160);
  *(_OWORD *)(a1 + 11144) = *(_OWORD *)(a2 + 11144);
  *(_OWORD *)(a1 + 11160) = v79;
  *(_OWORD *)(a1 + 11128) = v78;
  v81 = *(_OWORD *)(a2 + 11208);
  v80 = *(_OWORD *)(a2 + 11224);
  v82 = *(_OWORD *)(a2 + 11192);
  *(_QWORD *)(a1 + 11240) = *(_QWORD *)(a2 + 11240);
  *(_OWORD *)(a1 + 11208) = v81;
  *(_OWORD *)(a1 + 11224) = v80;
  *(_OWORD *)(a1 + 11192) = v82;
  *(_OWORD *)(a1 + 11176) = *(_OWORD *)(a2 + 11176);
  v83 = *(_OWORD *)(a2 + 11312);
  v84 = *(_OWORD *)(a2 + 11328);
  v85 = *(_OWORD *)(a2 + 11344);
  *(_OWORD *)(a1 + 11296) = *(_OWORD *)(a2 + 11296);
  *(_OWORD *)(a1 + 11344) = v85;
  *(_OWORD *)(a1 + 11328) = v84;
  *(_OWORD *)(a1 + 11312) = v83;
  v86 = *(_OWORD *)(a2 + 11376);
  v87 = *(_OWORD *)(a2 + 11392);
  v88 = *(_OWORD *)(a2 + 11408);
  *(_OWORD *)(a1 + 11360) = *(_OWORD *)(a2 + 11360);
  *(_OWORD *)(a1 + 11408) = v88;
  *(_OWORD *)(a1 + 11392) = v87;
  *(_OWORD *)(a1 + 11376) = v86;
  v89 = *(_OWORD *)(a2 + 11248);
  v90 = *(_OWORD *)(a2 + 11264);
  *(_OWORD *)(a1 + 11280) = *(_OWORD *)(a2 + 11280);
  *(_OWORD *)(a1 + 11264) = v90;
  *(_OWORD *)(a1 + 11248) = v89;
  return a1;
}

char *CV3DSLAMConfigCreateFromCameraModel()
{
  unsigned int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  char *v9;
  BOOL *v10;
  unsigned __int8 v11;
  __int128 v12;
  double v13;
  char v14;
  float v15;
  unsigned __int16 v16;
  int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  BOOL v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  int v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  int v37;
  int v39;
  uint64_t v40;
  uint64_t v41[1428];
  _BYTE v42[854];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48[2];
  int v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[216];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v71 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x3268uLL, MEMORY[0x24BEDB6B8]);
  v9 = v8;
  if (v8)
  {
    bzero(v8, 0x3268uLL);
    *(int32x2_t *)v9 = vdup_n_s32(0x140u);
    sub_20EE7D5CC((uint64_t)(v9 + 8));
    sub_20E8EC534((uint64_t)(v9 + 11432));
    v10 = (BOOL *)(v9 + 10624);
    *((_DWORD *)v9 + 3214) = 10;
    *(_QWORD *)(v9 + 12860) = 0x4120000040400000;
    *((_WORD *)v9 + 6434) = 0;
    v9[12870] = 0;
    *((_WORD *)v9 + 6436) = 0;
    *(_QWORD *)(v9 + 12876) = 0x100000000;
    v9[12884] = 0;
    v9[12888] = 0;
    *((_WORD *)v9 + 6446) = 0;
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
    {
      __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE08);
    }
    *((_QWORD *)v9 + 1612) = &off_254A5A4B8;
    sub_20E90F850();
    if (!v70)
    {
      v9 = 0;
LABEL_62:
      sub_20E915DB8((uint64_t)&v40);
      return v9;
    }
    *(_QWORD *)v9 = v40;
    sub_20E862C24((uint64_t)(v9 + 8), v41);
    memcpy(v9 + 11432, v42, 0x356uLL);
    *((_OWORD *)v9 + 769) = v44;
    *((_OWORD *)v9 + 770) = v45;
    *((_OWORD *)v9 + 771) = v46;
    *((_QWORD *)v9 + 1544) = v47;
    *((_OWORD *)v9 + 768) = v43;
    sub_20E86A1AC((uint64_t)(v9 + 12360), *(char **)v48, *(char **)v49, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v49 - *(_QWORD *)v48) >> 3));
    *((_OWORD *)v9 + 774) = v50;
    *((_OWORD *)v9 + 775) = v51;
    *((_OWORD *)v9 + 776) = v52;
    *((_OWORD *)v9 + 777) = v53;
    *((_OWORD *)v9 + 786) = v62;
    *((_OWORD *)v9 + 787) = v63;
    *((_OWORD *)v9 + 788) = v64;
    *((_OWORD *)v9 + 789) = v65;
    *((_OWORD *)v9 + 782) = v58;
    *((_OWORD *)v9 + 783) = v59;
    *((_OWORD *)v9 + 784) = v60;
    *((_OWORD *)v9 + 785) = v61;
    *((_OWORD *)v9 + 778) = v54;
    *((_OWORD *)v9 + 779) = v55;
    *((_OWORD *)v9 + 780) = v56;
    *((_OWORD *)v9 + 781) = v57;
    sub_20E869F44((uint64_t)(v9 + 12640), (uint64_t)v66);
    v9[12848] = v66[208];
    v12 = v68;
    *(_OWORD *)(v9 + 12856) = v67;
    *(_OWORD *)(v9 + 12872) = v12;
    *(_OWORD *)(v9 + 12888) = v69;
    if (v6 >= 0x169)
      v9[5128] = 1;
    *(_DWORD *)v9 = v6;
    *((_DWORD *)v9 + 1) = v4;
    if (v7 <= 0x27 && ((1 << v7) & 0x802AA801FCLL) != 0)
    {
      *((_DWORD *)v9 + 3219) = 3;
      if (!v9[280] && *((_DWORD *)v9 + 1280) <= v6)
      {
        *(_QWORD *)(v9 + 5548) = 0x25800000000;
        *((_QWORD *)v9 + 536) = 3;
      }
      v9[12893] = 1;
    }
    v13 = COERCE_DOUBLE(sub_20E8714BC("com.apple.applecv3d.slam.feature_detection_feature_selection_framerate", 0x46uLL));
    if (v14)
    {
      if ((int)v13 >= 1)
        *((_DWORD *)v9 + 3214) = (int)v13;
      v15 = v13;
      if (v15 > 0.0)
        *((float *)v9 + 3216) = v15;
    }
    v16 = sub_20E8746F0("com.apple.applecv3d.slam.enable_camera_switching", 0x30uLL);
    if (v16 >= 0x100u)
    {
      v17 = *((_DWORD *)v9 + 3219);
      if ((_BYTE)v16)
      {
        if (v17 != 3)
        {
          *((_DWORD *)v9 + 3219) = 0;
          goto LABEL_25;
        }
      }
      else if (v17 != 3)
      {
        *((_DWORD *)v9 + 3219) = 1;
        goto LABEL_25;
      }
      *v10 = 0;
    }
LABEL_25:
    v18 = sub_20E8746F0("com.apple.applecv3d.slam.enable_relocalization_debug_logging", 0x3CuLL);
    if (v18 >= 0x100u)
    {
      v9[8679] = v18;
      v9[10762] = v18;
    }
    v19 = sub_20E8746F0("com.apple.applecv3d.slam.enable_camera_allocation", 0x31uLL);
    if (v19 >= 0x100u)
    {
      v20 = v19 != 0;
      v9[5536] = v20;
      *v10 = v20;
    }
    v21 = sub_20E8746F0("com.apple.applecv3d.slam.save_frame_bundle_to_metadata", 0x36uLL);
    if (v21 >= 0x100u)
      v9[10696] = v21;
    v22 = sub_20E8746F0("com.apple.applecv3d.slam.enable_body_cropping", 0x2DuLL);
    if (v22 >= 0x100u)
      v9[5784] = v22;
    v23 = sub_20E8746F0("com.apple.applecv3d.slam.convert_coordinate_convention_from_pixel_centered_to_topleft_based", 0x5BuLL);
    if (v23 >= 0x100u)
      v9[5564] = v23;
    v24 = sub_20E8746F0("com.apple.applecv3d.slam.use_preintegrated_imu_factor", 0x35uLL);
    if (v24 >= 0x100u)
      v9[2562] = v24;
    v25 = sub_20E8746F0("com.apple.applecv3d.slam.use_triangulation_error_based_calibration_change_detector", 0x52uLL);
    if (v25 >= 0x100u)
    {
      if ((_BYTE)v25)
        v26 = 2;
      else
        v26 = 1;
      *((_DWORD *)v9 + 1132) = v26;
    }
    v27 = sub_20E8746F0("com.apple.applecv3d.slam.defer_calibration_change_detection_until_convergence_of_all_cameras", 0x5CuLL);
    if (v27 >= 0x100u)
      v9[4544] = v27;
    v28 = sub_20E8746F0("com.apple.applecv3d.slam.estimate_gyro_scale_in_slam", 0x34uLL);
    if (v28 >= 0x100u)
      v9[2447] = v28;
    v29 = sub_20E8746F0("com.apple.applecv3d.slam.output_cm_statistics", 0x2DuLL);
    if (v29 >= 0x100u)
      v9[8560] = v29 != 0;
    v30 = sub_20E8746F0("com.apple.applecv3d.slam.enable_map_debug_dir", 0x2DuLL);
    if (v30 >= 0x100u)
      v9[9048] = v30;
    v31 = sub_20E872ECC("com.apple.applecv3d.slam.max_num_point_feature_large_laplacian_after_scale", 0x4AuLL);
    if ((v31 & 0xFF00000000) != 0)
      *((_DWORD *)v9 + 1388) = v31;
    v32 = sub_20E8714BC("com.apple.applecv3d.slam.point_feature_ratio_in_low_light", 0x39uLL);
    if (v33)
      *((_QWORD *)v9 + 715) = v32;
    v34 = sub_20E8746F0("com.apple.applecv3d.slam.enable_moving_platform_hint", 0x34uLL);
    if (v34 >= 0x100u)
      v9[4801] = v34;
    v35 = sub_20E8746F0("com.apple.applecv3d.slam.enable_movable_platform_classification", 0x3FuLL);
    if (v35 >= 0x100u)
      v9[4816] = v35;
    v36 = sub_20E8746F0("com.apple.applecv3d.slam.enable_stationary_vision_high_texture_drift_detection", 0x4EuLL);
    if (v36 >= 0x100u)
      v9[3904] = v36;
    v39 = v2;
    v37 = sub_20E8F7E44(&v39);
    if (sub_20EA8E71C(v37))
      *((_QWORD *)v9 + 686) = 0x400000004;
    goto LABEL_62;
  }
  return v9;
}

void sub_20E911544(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20E9114E4);
}

void sub_20E911554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E915DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *CV3DSLAMConfigCreate()
{
  CV3DSLAMCalibrationDetectRuntimeHardware();
  return CV3DSLAMConfigCreateFromCameraModel();
}

char *CV3DSLAMConfigCreate2()
{
  CV3DSLAMCalibrationDetectRuntimeHardware();
  return CV3DSLAMConfigCreateFromCameraModel();
}

uint64_t CV3DSLAMConfigRelease(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (!a1)
    return 4;
  v2 = a1[1602];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[1599];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[1595];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1592];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = (void *)a1[1545];
  if (v6)
  {
    a1[1546] = v6;
    operator delete(v6);
  }
  sub_20E869418((uint64_t)(a1 + 1));
  MEMORY[0x212BC6398](a1, 0x10B2C403D7F8595);
  return 0;
}

uint64_t CV3DSLAMConfigEnableCollaborativeMapping(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 260) = 1;
  return result;
}

uint64_t CV3DSLAMConfigCalcFeaturePointDetectionResolution(unsigned int a1, int a2, int a3, int a4)
{
  char v5;
  uint64_t result;
  int v9;

  v5 = a3;
  if (a3
    && a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfig.cpp", 554, (uint64_t)"!(use_hw_feature_points && use_sw_proxy_feature_points)", 55, (uint64_t)"Cannot enable both hw feature points and sw proxy at the same time!", 67, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  result = 640;
  if (a2 != 5 && a2 != 8)
  {
    if (a2 == 6)
      return 480;
    if (a1 > 0x27)
      goto LABEL_23;
    if (((1 << a1) & 0x20008002) != 0)
      goto LABEL_18;
    if (((1 << a1) & 0x8000800020) == 0)
    {
LABEL_23:
      result = 320;
      if ((v5 & 1) == 0)
      {
LABEL_19:
        if (!a4)
          return result;
      }
LABEL_20:
      v9 = a2 - 1;
      if ((a2 - 1) <= 0xB && ((0x94Fu >> v9) & 1) != 0)
        return dword_2102DCF58[v9];
      return result;
    }
    if ((v5 & 1) != 0)
    {
      if (a2 != -1)
      {
        result = 320;
        goto LABEL_20;
      }
    }
    else
    {
      result = 320;
      if (a2 != -1 || (a4 & 1) == 0)
      {
LABEL_18:
        if ((v5 & 1) == 0)
          goto LABEL_19;
        goto LABEL_20;
      }
    }
    result = 640;
    goto LABEL_18;
  }
  return result;
}

uint64_t CV3DSLAMConfigCalcFeaturePointDetectionResolution2(unsigned int a1, int a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3 == 2)
  {
    result = 640;
    if (a2 == 5 || a2 == 8)
      return result;
    if (a2 == 6)
      return 480;
    if (a1 > 0x27)
      goto LABEL_32;
    if (((1 << a1) & 0x20008002) != 0)
      goto LABEL_33;
    if (((1 << a1) & 0x8000800020) == 0)
    {
LABEL_32:
      result = 320;
      goto LABEL_33;
    }
    if (a2 == -1)
      result = 640;
    else
      result = 320;
  }
  else
  {
    if (a3 != 1)
    {
      if (a3)
      {
        if (a3 == 3)
          return 640;
        else
          return 320;
      }
      else
      {
        result = 640;
        if (a2 != 5 && a2 != 8)
        {
          if (a2 == 6)
          {
            return 480;
          }
          else if (a1 > 0x27 || ((1 << a1) & 0x20008002) == 0)
          {
            return 320;
          }
        }
      }
      return result;
    }
    result = 640;
    if (a2 == 5 || a2 == 8)
      return result;
    if (a2 == 6)
      return 480;
    if (a1 > 0x27 || ((1 << a1) & 0x20008002) == 0 && (((1 << a1) & 0x8000800020) == 0 || a2 != -1))
      goto LABEL_32;
  }
LABEL_33:
  v5 = a2 - 1;
  if ((a2 - 1) < 0xC && ((0x94Fu >> v5) & 1) != 0)
    return dword_2102DCF58[v5];
  return result;
}

uint64_t CV3DSLAMConfigCalcLineDetectionResolution(uint64_t result)
{
  if ((int)result >= 320)
    return 320;
  else
    return result;
}

uint64_t CV3DSLAMConfigUseDeterministicMode(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_DWORD *)(a1 + 12880) = a2 ^ 1;
  return result;
}

uint64_t CV3DSLAMConfigUseSWProxyFeaturePoints(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 5125) = a2;
  return result;
}

uint64_t CV3DSLAMConfigUseSWProxyDesgenFeaturePoints(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  *(_BYTE *)(a1 + 5129) = a2;
  result = 0;
  if (a2)
    *(_QWORD *)(a1 + 5240) = 0xB400000100;
  return result;
}

uint64_t CV3DSLAMConfigUseHWFeaturePoints(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 12892) = a2;
  return result;
}

uint64_t CV3DSLAMConfigEnableLacc(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 4;
  v2 = 1;
  if (MEMORY[0x212BC533C]())
  {
    *(_DWORD *)(a1 + 3204) = 800;
    *(_WORD *)(a1 + 2808) = 257;
    *(_WORD *)(a1 + 2811) = 1;
    *(_WORD *)(a1 + 2561) = 1;
    *(_BYTE *)(a1 + 2818) = 1;
    *(_BYTE *)(a1 + 2447) = 0;
    *(_BYTE *)(a1 + 2384) = 0;
    return 0;
  }
  return v2;
}

uint64_t CV3DSLAMConfigSetMapFromCFData(uint64_t a1, CFDataRef theData)
{
  uint64_t result;
  CFIndex Length;
  size_t v6;
  _QWORD *v7;
  char *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFRange v13;

  result = 4;
  if (a1 && theData)
  {
    Length = CFDataGetLength(theData);
    if (Length)
    {
      v6 = Length;
      v7 = operator new(0x30uLL);
      v7[3] = 0;
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &unk_24C9B0508;
      v7[4] = 0;
      v7[5] = 0;
      if ((v6 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v8 = (char *)operator new(v6);
      v7[3] = v8;
      v7[5] = &v8[v6];
      bzero(v8, v6);
      v7[4] = &v8[v6];
      v13.location = 0;
      v13.length = v6;
      CFDataGetBytes(theData, v13, (UInt8 *)v8);
      v9 = *(unsigned __int8 *)(a1 + 8528);
      *(_QWORD *)(a1 + 8512) = v7 + 3;
      if (v9)
      {
        v10 = *(std::__shared_weak_count **)(a1 + 8520);
        *(_QWORD *)(a1 + 8520) = v7;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        return 0;
      }
      else
      {
        result = 0;
        *(_QWORD *)(a1 + 8520) = v7;
        *(_BYTE *)(a1 + 8528) = 1;
      }
    }
    else
    {
      return 4;
    }
  }
  return result;
}

void sub_20E911C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E911C2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMConfigSetRelocalizationEnabled(_BYTE *a1, int a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t result;

  if (!a1)
    return 4;
  v2 = a1 + 6624;
  v3 = a1 + 4144;
  a1[272] = a2;
  if (a1[8563])
  {
    result = 0;
    if (a2)
    {
      *v3 = 1;
      *v2 = 1;
    }
    else
    {
      *v3 = 0;
      *v2 = 0;
    }
  }
  else
  {
    result = 0;
    *v3 = a2;
  }
  return result;
}

uint64_t CV3DSLAMConfigDisableLineTracking(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_WORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  return result;
}

uint64_t CV3DSLAMConfigEnableLineTracking(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_WORD *)(a1 + 256) = 1;
  *(_BYTE *)(a1 + 1600) = 1;
  return result;
}

uint64_t CV3DSLAMConfigEnableLineTrackingAlways(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_WORD *)(a1 + 256) = 256;
  *(_BYTE *)(a1 + 1600) = 1;
  return result;
}

BOOL CV3DSLAMConfigEnableAnalytics(_BYTE *a1, int a2, CFTypeRef *a3)
{
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  char *v16;
  void *__p[2];
  char v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1)
  {
    v4 = a2;
    a1[9424] = a2;
    if (a2)
    {
      sub_20E896804(__p);
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]);
      v5 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v6 = (unint64_t *)((char *)__p[1] + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        goto LABEL_23;
      }
    }
    else
    {
      sub_20E896804(__p);
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]);
      v5 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v14 = (unint64_t *)((char *)__p[1] + 8);
        do
          v7 = __ldaxr(v14);
        while (__stlxr(v7 - 1, v14));
LABEL_23:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    a1[9425] = v4;
    a1[8680] = v4;
    return a1 != 0;
  }
  v18 = 14;
  strcpy((char *)__p, "Config is null");
  v9 = (char *)operator new(0x70uLL);
  v16 = v9;
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfig.cpp");
  if (a3)
  {
    *(_QWORD *)&v21.__val_ = 22;
    v21.__cat_ = std::generic_category();
    sub_20EA67538(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v10;
    v11 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = v16;
  }
  operator delete(v9);
  if (v18 < 0)
    operator delete(__p[0]);
  return a1 != 0;
}

void sub_20E911F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMConfigSetMappingDirectory(uint64_t a1, std::string *a2)
{
  uint64_t result;
  std::string *v4;
  std::string *v5;
  int v6;

  result = 4;
  if (a1 && a2)
  {
    v4 = (std::string *)(a1 + 8872);
    if (*(char *)(a1 + 8895) < 0)
    {
      **(_BYTE **)(a1 + 8872) = 0;
      *(_QWORD *)(a1 + 8880) = 0;
    }
    else
    {
      v4->__r_.__value_.__s.__data_[0] = 0;
      *(_BYTE *)(a1 + 8895) = 0;
    }
    v5 = (std::string *)((char *)a2 - 1);
    do
    {
      v6 = v5->__r_.__value_.__s.__data_[1];
      v5 = (std::string *)((char *)v5 + 1);
    }
    while (v6);
    sub_20E8A9678(v4, a2, v5);
    return 0;
  }
  return result;
}

uint64_t CV3DSLAMConfigEnablePlaneTracking(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 258) = 1;
  return result;
}

uint64_t CV3DSLAMConfigDisablePlaneTracking(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 258) = 0;
  return result;
}

uint64_t CV3DSLAMConfigEnableCameraSwitching(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (*(_DWORD *)(a1 + 12876) == 3)
  {
    result = 0;
    *(_BYTE *)(a1 + 10624) = 0;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 12876) = 0;
  }
  return result;
}

uint64_t CV3DSLAMConfigDisableCameraSwitching(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (*(_DWORD *)(a1 + 12876) == 3)
  {
    result = 0;
    *(_BYTE *)(a1 + 10624) = 0;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 12876) = 1;
  }
  return result;
}

uint64_t CV3DSLAMConfigDisableCameraSwitchingAndUsePrimaryCamera(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_DWORD *)(a1 + 12876) = 1;
  return result;
}

uint64_t CV3DSLAMConfigEnableCameraAllocation(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 5536) = a2;
  *(_BYTE *)(a1 + 10624) = a2;
  return 0;
}

BOOL CV3DSLAMConfigEnablePassAllStreams(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    *(_BYTE *)(a1 + 10624) = 1;
  }
  else
  {
    __p = operator new(0x38uLL);
    v11 = xmmword_2102DCEA0;
    strcpy((char *)__p, "Config is NULL when trying to enable using all streams");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_20EA67538(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E912224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMConfigIsMLRelocalizationSupported()
{
  _BOOL8 v0;
  void *__p[2];
  char v3;
  char v4;

  sub_20E87C900(__p);
  v0 = sub_20EA70228((uint64_t)__p, 0xEu);
  if (v4 && v3 < 0)
    operator delete(__p[0]);
  return v0;
}

void sub_20E9122B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMConfigEnableMLRelocalization(uint64_t a1)
{
  uint64_t result;

  result = 4;
  if (a1)
  {
    *(_BYTE *)(a1 + 8564) = 1;
    *(_BYTE *)(a1 + 8665) = 0;
    *(_DWORD *)(a1 + 8648) = 4;
    *(_QWORD *)(a1 + 6192) = 0x4000000000000000;
    *(_BYTE *)(a1 + 7289) = 1;
    return 0;
  }
  return result;
}

uint64_t CV3DSLAMConfigDisableMLRelocalization(uint64_t a1)
{
  if (!a1)
    return 4;
  sub_20EE7F158(a1 + 8);
  return 0;
}

uint64_t CV3DSLAMConfigOutputCollaborativeMappingStatistics(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_BYTE *)(a1 + 8560) = a2;
  return result;
}

uint64_t CV3DSLAMConfigOverrideSessionID(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_QWORD *)(a1 + 264) = a2;
  return result;
}

CFTypeRef CV3DSLAMConfigCreateAVCaptureConfig(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _DWORD *v5;
  _DWORD *v6;
  std::logic_error *exception;
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  double v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  float v18;
  int v19;
  double v20;
  int v21;
  int v22;
  CFTypeRef v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  CFTypeRef v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  CFTypeRef v33;
  unint64_t *v34;
  CFTypeRef v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  CFTypeRef v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  int v49;
  char v50;
  char v51;
  double v52;
  double v53;
  double v54;
  CFTypeRef v55;
  __int128 v56;
  CFTypeRef cf[3];
  void *__p;
  __int128 v59;
  std::error_condition v60;

  if (!a1)
  {
    __p = operator new(0x48uLL);
    v59 = xmmword_2102DCEB0;
    strcpy((char *)__p, "Can not create an AV Capture config with a NULL CV3DSLAMConfigRef");
    v28 = operator new(0x70uLL);
    v55 = v28;
    v56 = xmmword_2102DCE90;
    strcpy((char *)v28, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v60.__val_ = 22;
      v60.__cat_ = std::generic_category();
      sub_20EA67538(&v60, (uint64_t)&__p, (CFErrorRef *)cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v29 = cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      *a3 = v29;
      v30 = (std::__shared_weak_count *)cf[1];
      if (!cf[1])
        goto LABEL_47;
      v31 = (unint64_t *)((char *)cf[1] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
LABEL_46:
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        if ((SHIBYTE(v56) & 0x80000000) == 0)
          goto LABEL_50;
LABEL_48:
        v28 = (void *)v55;
        goto LABEL_49;
      }
LABEL_47:
      if ((SHIBYTE(v56) & 0x80000000) == 0)
      {
LABEL_50:
        if (SHIBYTE(v59) < 0)
          operator delete(__p);
        return 0;
      }
      goto LABEL_48;
    }
LABEL_49:
    operator delete(v28);
    goto LABEL_50;
  }
  if (!a2)
  {
    __p = operator new(0x48uLL);
    v59 = xmmword_2102DBC20;
    strcpy((char *)__p, "Can not create an AV Capture config with a NULL CV3DSLAMCalibrationRef");
    v28 = operator new(0x70uLL);
    v55 = v28;
    v56 = xmmword_2102DCE90;
    strcpy((char *)v28, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v60.__val_ = 22;
      v60.__cat_ = std::generic_category();
      sub_20EA67538(&v60, (uint64_t)&__p, (CFErrorRef *)cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v33 = cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      *a3 = v33;
      v30 = (std::__shared_weak_count *)cf[1];
      if (!cf[1])
        goto LABEL_47;
      v34 = (unint64_t *)((char *)cf[1] + 8);
      do
        v32 = __ldaxr(v34);
      while (__stlxr(v32 - 1, v34));
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  v5 = *(_DWORD **)(a2 + 8);
  v6 = *(_DWORD **)a2;
  if (*(_DWORD **)a2 != v5)
  {
    while (*v6)
    {
      v6 += 272;
      if (v6 == v5)
        goto LABEL_6;
    }
  }
  if (v6 == v5)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v9 = v6[3];
  v8 = v6[4];
  v10 = v6[2];
  v11 = (_DWORD *)((char *)v5 - *(_QWORD *)a2) != (_DWORD *)2176 || (v8 - 1) >= 3;
  v12 = 0.0333333333;
  if (!v11)
    v12 = 0.1;
  v54 = v12;
  sub_20EAAFD3C(v10, v9, v8, (uint64_t)&v55);
  if (BYTE8(v56))
  {
    v13 = a1 + 5127;
    v14 = v55;
    v15 = v10 / v55;
    v16 = v9 / v55;
    v17 = (int)fmaxf(log2f((float)v15 / 28.0) + 1.0, 0.0);
    v18 = log2f((float)v16 / 28.0);
    v51 = *(_BYTE *)(a1 + 5127);
    v19 = (int)fmaxf(v18 + 1.0, 0.0);
    v20 = 1.0 / *(float *)(a1 + 12864);
    v52 = *(float *)(a1 + 12860);
    v53 = v20;
    v21 = *(_DWORD *)(a1 + 5044);
    v50 = *(_BYTE *)(v13 + 110);
    v49 = 1110704128;
    v46 = 9;
    v47 = 2;
    v48 = 1;
    v45 = 1;
    v43 = 1101004800;
    v44 = 1;
    if (v17 < v19)
      v19 = v17;
    if (v19 >= 6)
      v22 = 6;
    else
      v22 = v19;
    v41 = 1045220557;
    v42 = 1056964608;
    v40 = 180;
    v39 = 0;
    v59 = 0uLL;
    __p = &v59;
    sub_20EA65D20(&__p, &v60);
    *(std::error_condition *)cf = v60;
    sub_20E866BE0((uint64_t)&__p, (char *)v59);
    sub_20E912AF8((uint64_t)cf, CFSTR("AVCaptureMinFrameDuration"), &v53);
    sub_20E912AF8((uint64_t)cf, CFSTR("AVCaptureMinBurstFrameDuration"), &v54);
    sub_20E912AF8((uint64_t)cf, CFSTR("AVCaptureMaxBurstDuration"), &v52);
    LODWORD(__p) = v22;
    sub_20E912C70((uint64_t)cf, CFSTR("AVCaptureGuassianPyramidOctaveCount"), (int *)&__p);
    *(float *)&__p = (float)v14;
    sub_20E912DE8((uint64_t)cf, CFSTR("AVCaptureGuassianPyramidOctaveDownscaleFactor"), &__p);
    LODWORD(__p) = v21;
    sub_20E912C70((uint64_t)cf, CFSTR("AVCaptureMaxKeypointCount"), (int *)&__p);
    sub_20E8E223C((uint64_t)cf, CFSTR("AVCaptureFeatureBinningEnabled"), &v51);
    sub_20E8E223C((uint64_t)cf, CFSTR("AVCaptureFeatureOrientationAssignmentEnabled"), &v50);
    sub_20E912DE8((uint64_t)cf, CFSTR("AVCaptureFeatureDetectionThreshold"), &v49);
    sub_20E8E223C((uint64_t)cf, CFSTR("AVCaptureDynamicThresholdingEnabled"), &v48);
    sub_20E912F5C((uint64_t)cf, CFSTR("AVCaptureFeatureDetectionFlowType"), &v47);
    sub_20E912F5C((uint64_t)cf, CFSTR("AVCaptureSubPixelThreshold"), &v46);
    sub_20E8E223C((uint64_t)cf, CFSTR("AVCaptureFeatureMatchingEnabled"), &v45);
    sub_20E912F5C((uint64_t)cf, CFSTR("AVCaptureFeatureMatchingDescriptorSize"), &v44);
    sub_20E912DE8((uint64_t)cf, CFSTR("AVCaptureOrientationDistanceThreshold"), &v43);
    sub_20E912DE8((uint64_t)cf, CFSTR("AVCaptureSigmaDistanceThreshold"), &v42);
    sub_20E912DE8((uint64_t)cf, CFSTR("AVCaptureSquareDistanceDisparityFraction"), &v41);
    sub_20E912F5C((uint64_t)cf, CFSTR("AVCaptureHammingDistanceThreshold"), &v40);
    sub_20E9130D4((uint64_t)cf, CFSTR("AVCaptureLaccConfigAndMetadata"), &v39);
    v23 = cf[0];
    if (cf[0])
      CFRetain(cf[0]);
    v24 = (std::__shared_weak_count *)cf[1];
    if (cf[1])
    {
      v25 = (unint64_t *)((char *)cf[1] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (BYTE8(v56))
      return v23;
    v27 = (std::__shared_weak_count *)v56;
    if (!(_QWORD)v56)
      return v23;
    goto LABEL_64;
  }
  if (!a3)
  {
    v23 = 0;
    v27 = (std::__shared_weak_count *)v56;
    if (!(_QWORD)v56)
      return v23;
    goto LABEL_64;
  }
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v36 = v55;
  if (v55)
    CFRetain(v55);
  v23 = 0;
  *a3 = v36;
  v27 = (std::__shared_weak_count *)v56;
  if ((_QWORD)v56)
  {
LABEL_64:
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v23;
}

void sub_20E912A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20E913294((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL sub_20E912AF8(uint64_t a1, void *key, void *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20EA5E260(a3, (CFNumberRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_20E912C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E912C70(uint64_t a1, void *key, int *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20EA5DB5C(a3, (CFNumberRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_20E912DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E912DE8(uint64_t a1, void *key, void *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  sub_20EA5E174(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_16;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_16:
    if (!v12)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_17:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_18:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20E912F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E912F5C(uint64_t a1, void *key, unsigned int *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20EA5DE68(a3, (CFNumberRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_20E9130C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E9130D4(uint64_t a1, void *key, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *value;
  std::__shared_weak_count *v25;
  void *v26;
  std::__shared_weak_count *v27;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20E8E2770(&v26, *a3);
  v13 = v26;
  value = v26;
  v25 = v27;
  if (v27)
  {
    v14 = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = v27;
    if (v27)
    {
      v17 = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v13 = value;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v11 = v13 != 0;
  if (v13)
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v11;
}

void sub_20E913280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E913294(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (!*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t CV3DSLAMConfigAnchorStrategy(uint64_t a1, unsigned __int8 a2, int a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 0;
  *(_DWORD *)(a1 + 8772) = a2 | 0x1100 | (16 * a3) & 0x1FF0;
  return result;
}

BOOL CV3DSLAMConfigEnableAnchorTranslationLayer(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 8687) = a2;
  }
  else
  {
    __p = operator new(0x48uLL);
    v12 = xmmword_2102DCEB0;
    strcpy((char *)__p, "Config is NULL when trying to enable the anchor translation layer");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E9134A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMConfigSetMaxAnchorsPerGroup(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_QWORD *)(a1 + 8688) = a2;
  }
  else
  {
    __p = operator new(0x40uLL);
    v12 = xmmword_2102DBC10;
    strcpy((char *)__p, "Config is NULL when trying to set the max anchors per group");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E913654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMConfigPresetFromString(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_p;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  std::string::size_type size;
  std::string::value_type v12;
  std::string::value_type v13;
  std::string::value_type v14;
  std::string::value_type v15;
  std::string::value_type v16;
  std::string::value_type v17;
  std::string::value_type v18;
  std::string::value_type v19;
  std::string::value_type v20;
  std::string::value_type v21;
  std::string::value_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  int v25;
  std::string *v26;
  uint64_t v27;
  std::string *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  char v34;
  BOOL v35;
  std::string::value_type v36;
  std::string::value_type v37;
  std::string::value_type v38;
  std::string::value_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  int v42;
  std::string *v43;
  uint64_t v44;
  std::string *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char v50;
  BOOL v51;
  std::string::value_type v52;
  std::string::value_type v53;
  std::string::value_type v54;
  std::string::value_type v55;
  std::string::value_type v56;
  std::string::value_type v57;
  std::string::value_type v58;
  std::string::value_type v59;
  std::string::value_type v60;
  std::string::value_type v61;
  std::string::value_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  int v65;
  std::string *v66;
  uint64_t v67;
  std::string *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  char v73;
  BOOL v74;
  std::string::value_type v75;
  std::string::value_type v76;
  std::string::value_type v77;
  std::string::value_type v78;
  std::string::value_type v79;
  std::string::value_type v80;
  std::string::value_type v81;
  std::string::value_type v82;
  std::string::value_type v83;
  std::string::value_type v84;
  std::string::value_type v85;
  std::string::size_type v86;
  std::string::size_type v87;
  int v88;
  std::string *v89;
  uint64_t v90;
  std::string *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  BOOL v97;
  char *v98;
  std::string::value_type v99;
  std::string::value_type v100;
  std::string::value_type v101;
  std::string::value_type v102;
  std::string::value_type v103;
  std::string::value_type v104;
  std::string::value_type v105;
  std::string::value_type v106;
  std::string::value_type v107;
  std::string::value_type v108;
  std::string::value_type v109;
  std::string::value_type v110;
  std::string::value_type v111;
  std::string::value_type v112;
  std::string::value_type v113;
  std::string::value_type v114;
  std::string::value_type v115;
  std::string::value_type v116;
  std::string::value_type v117;
  std::string::value_type v118;
  std::string::value_type v119;
  std::string::value_type v120;
  std::string::value_type v121;
  std::string::value_type v122;
  std::string::value_type v123;
  std::string::value_type v124;
  std::string::size_type v125;
  std::string::size_type v126;
  int v127;
  std::string *v128;
  uint64_t v129;
  std::string *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  BOOL v163;
  BOOL v164;
  BOOL v165;
  BOOL v166;
  _BOOL4 v167;
  std::string __p;
  std::string v169;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v7 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v7 = v2 | 7;
    v8 = v7 + 1;
    p_p = (std::string *)operator new(v7 + 1);
    __p.__r_.__value_.__l.__size_ = v3;
    __p.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_11;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v2;
  p_p = &__p;
  if (v2)
LABEL_11:
    memcpy(p_p, a1, v3);
  p_p->__r_.__value_.__s.__data_[v3] = 0;
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  memset(&v169, 0, sizeof(v169));
  std::string::reserve(&v169, size);
  if (v9 >= 0)
    v10 = &__p;
  for (; size; --size)
  {
    v12 = __tolower(v10->__r_.__value_.__s.__data_[0]);
    std::string::push_back(&v169, v12);
    v10 = (std::string *)((char *)v10 + 1);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v169;
  memset(&v169, 0, sizeof(v169));
  std::string::reserve(&v169, 0xAuLL);
  v13 = __tolower(77);
  std::string::push_back(&v169, v13);
  v14 = __tolower(101);
  std::string::push_back(&v169, v14);
  v15 = __tolower(97);
  std::string::push_back(&v169, v15);
  v16 = __tolower(115);
  std::string::push_back(&v169, v16);
  v17 = __tolower(117);
  std::string::push_back(&v169, v17);
  v18 = __tolower(114);
  std::string::push_back(&v169, v18);
  v19 = __tolower(101);
  std::string::push_back(&v169, v19);
  v20 = __tolower(65);
  std::string::push_back(&v169, v20);
  v21 = __tolower(112);
  std::string::push_back(&v169, v21);
  v22 = __tolower(112);
  std::string::push_back(&v169, v22);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  v24 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
  v25 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = v169.__r_.__value_.__l.__size_;
  if (v23 != v24)
  {
    v35 = 0;
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_46;
  }
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v169;
  else
    v26 = (std::string *)v169.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v35 = memcmp(__p.__r_.__value_.__l.__data_, v26, __p.__r_.__value_.__l.__size_) == 0;
    goto LABEL_42;
  }
  if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    v28 = &__p;
    do
    {
      v30 = v28->__r_.__value_.__s.__data_[0];
      v28 = (std::string *)((char *)v28 + 1);
      v29 = v30;
      v32 = v26->__r_.__value_.__s.__data_[0];
      v26 = (std::string *)((char *)v26 + 1);
      v31 = v32;
      v33 = v27-- != 0;
      v34 = v33;
      v35 = v29 == v31;
    }
    while (v29 == v31 && (v34 & 1) != 0);
LABEL_42:
    if ((v25 & 0x80000000) == 0)
      goto LABEL_43;
LABEL_46:
    operator delete(v169.__r_.__value_.__l.__data_);
    if (v35)
      goto LABEL_44;
    goto LABEL_47;
  }
  v35 = 1;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_46;
LABEL_43:
  if (v35)
  {
LABEL_44:
    v5 = 1;
    goto LABEL_275;
  }
LABEL_47:
  memset(&v169, 0, sizeof(v169));
  std::string::reserve(&v169, 4uLL);
  v36 = __tolower(83);
  std::string::push_back(&v169, v36);
  v37 = __tolower(76);
  std::string::push_back(&v169, v37);
  v38 = __tolower(65);
  std::string::push_back(&v169, v38);
  v39 = __tolower(77);
  std::string::push_back(&v169, v39);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v40 = __p.__r_.__value_.__l.__size_;
  v41 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
  v42 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = v169.__r_.__value_.__l.__size_;
  if (v40 != v41)
  {
    v51 = 0;
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_72;
  }
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v169;
  else
    v43 = (std::string *)v169.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v51 = memcmp(__p.__r_.__value_.__l.__data_, v43, __p.__r_.__value_.__l.__size_) == 0;
    goto LABEL_68;
  }
  if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    v45 = &__p;
    do
    {
      v47 = v45->__r_.__value_.__s.__data_[0];
      v45 = (std::string *)((char *)v45 + 1);
      v46 = v47;
      v49 = v43->__r_.__value_.__s.__data_[0];
      v43 = (std::string *)((char *)v43 + 1);
      v48 = v49;
      v33 = v44-- != 0;
      v50 = v33;
      v51 = v46 == v48;
    }
    while (v46 == v48 && (v50 & 1) != 0);
LABEL_68:
    if ((v42 & 0x80000000) == 0)
      goto LABEL_69;
LABEL_72:
    operator delete(v169.__r_.__value_.__l.__data_);
    if (v51)
      goto LABEL_70;
    goto LABEL_73;
  }
  v51 = 1;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_72;
LABEL_69:
  if (v51)
  {
LABEL_70:
    v5 = 2;
    goto LABEL_275;
  }
LABEL_73:
  memset(&v169, 0, sizeof(v169));
  std::string::reserve(&v169, 0xBuLL);
  v52 = __tolower(77);
  std::string::push_back(&v169, v52);
  v53 = __tolower(97);
  std::string::push_back(&v169, v53);
  v54 = __tolower(112);
  std::string::push_back(&v169, v54);
  v55 = __tolower(66);
  std::string::push_back(&v169, v55);
  v56 = __tolower(117);
  std::string::push_back(&v169, v56);
  v57 = __tolower(105);
  std::string::push_back(&v169, v57);
  v58 = __tolower(108);
  std::string::push_back(&v169, v58);
  v59 = __tolower(100);
  std::string::push_back(&v169, v59);
  v60 = __tolower(105);
  std::string::push_back(&v169, v60);
  v61 = __tolower(110);
  std::string::push_back(&v169, v61);
  v62 = __tolower(103);
  std::string::push_back(&v169, v62);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v63 = __p.__r_.__value_.__l.__size_;
  v64 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
  v65 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v64 = v169.__r_.__value_.__l.__size_;
  if (v63 != v64)
  {
    v74 = 0;
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_95;
    goto LABEL_98;
  }
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = &v169;
  else
    v66 = (std::string *)v169.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v74 = memcmp(__p.__r_.__value_.__l.__data_, v66, __p.__r_.__value_.__l.__size_) == 0;
    goto LABEL_94;
  }
  if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    v68 = &__p;
    do
    {
      v70 = v68->__r_.__value_.__s.__data_[0];
      v68 = (std::string *)((char *)v68 + 1);
      v69 = v70;
      v72 = v66->__r_.__value_.__s.__data_[0];
      v66 = (std::string *)((char *)v66 + 1);
      v71 = v72;
      v33 = v67-- != 0;
      v73 = v33;
      v74 = v69 == v71;
    }
    while (v69 == v71 && (v73 & 1) != 0);
LABEL_94:
    if ((v65 & 0x80000000) == 0)
      goto LABEL_95;
LABEL_98:
    operator delete(v169.__r_.__value_.__l.__data_);
    if (v74)
      goto LABEL_96;
    goto LABEL_99;
  }
  v74 = 1;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_98;
LABEL_95:
  if (v74)
  {
LABEL_96:
    v5 = 3;
    goto LABEL_275;
  }
LABEL_99:
  memset(&v169, 0, sizeof(v169));
  std::string::reserve(&v169, 0xBuLL);
  v75 = __tolower(77);
  std::string::push_back(&v169, v75);
  v76 = __tolower(97);
  std::string::push_back(&v169, v76);
  v77 = __tolower(112);
  std::string::push_back(&v169, v77);
  v78 = __tolower(84);
  std::string::push_back(&v169, v78);
  v79 = __tolower(114);
  std::string::push_back(&v169, v79);
  v80 = __tolower(97);
  std::string::push_back(&v169, v80);
  v81 = __tolower(99);
  std::string::push_back(&v169, v81);
  v82 = __tolower(107);
  std::string::push_back(&v169, v82);
  v83 = __tolower(105);
  std::string::push_back(&v169, v83);
  v84 = __tolower(110);
  std::string::push_back(&v169, v84);
  v85 = __tolower(103);
  std::string::push_back(&v169, v85);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v86 = __p.__r_.__value_.__l.__size_;
  v87 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
  v88 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v87 = v169.__r_.__value_.__l.__size_;
  if (v86 == v87)
  {
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v89 = &v169;
    else
      v89 = (std::string *)v169.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v97 = memcmp(__p.__r_.__value_.__l.__data_, v89, __p.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v90 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      v91 = &__p;
      do
      {
        v93 = v91->__r_.__value_.__s.__data_[0];
        v91 = (std::string *)((char *)v91 + 1);
        v92 = v93;
        v95 = v89->__r_.__value_.__s.__data_[0];
        v89 = (std::string *)((char *)v89 + 1);
        v94 = v95;
        v33 = v90-- != 0;
        v96 = v33;
        v97 = v92 == v94;
      }
      while (v92 == v94 && (v96 & 1) != 0);
    }
    else
    {
      v97 = 1;
    }
  }
  else
  {
    v97 = 0;
  }
  if (v88 < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v97)
  {
    v5 = 4;
  }
  else
  {
    v98 = (char *)operator new(0x20uLL);
    strcpy(v98, "ObjectDetectionMapBuilding");
    memset(&v169, 0, sizeof(v169));
    std::string::reserve(&v169, 0x1AuLL);
    v99 = __tolower(*v98);
    std::string::push_back(&v169, v99);
    v100 = __tolower(v98[1]);
    std::string::push_back(&v169, v100);
    v101 = __tolower(v98[2]);
    std::string::push_back(&v169, v101);
    v102 = __tolower(v98[3]);
    std::string::push_back(&v169, v102);
    v103 = __tolower(v98[4]);
    std::string::push_back(&v169, v103);
    v104 = __tolower(v98[5]);
    std::string::push_back(&v169, v104);
    v105 = __tolower(v98[6]);
    std::string::push_back(&v169, v105);
    v106 = __tolower(v98[7]);
    std::string::push_back(&v169, v106);
    v107 = __tolower(v98[8]);
    std::string::push_back(&v169, v107);
    v108 = __tolower(v98[9]);
    std::string::push_back(&v169, v108);
    v109 = __tolower(v98[10]);
    std::string::push_back(&v169, v109);
    v110 = __tolower(v98[11]);
    std::string::push_back(&v169, v110);
    v111 = __tolower(v98[12]);
    std::string::push_back(&v169, v111);
    v112 = __tolower(v98[13]);
    std::string::push_back(&v169, v112);
    v113 = __tolower(v98[14]);
    std::string::push_back(&v169, v113);
    v114 = __tolower(v98[15]);
    std::string::push_back(&v169, v114);
    v115 = __tolower(v98[16]);
    std::string::push_back(&v169, v115);
    v116 = __tolower(v98[17]);
    std::string::push_back(&v169, v116);
    v117 = __tolower(v98[18]);
    std::string::push_back(&v169, v117);
    v118 = __tolower(v98[19]);
    std::string::push_back(&v169, v118);
    v119 = __tolower(v98[20]);
    std::string::push_back(&v169, v119);
    v120 = __tolower(v98[21]);
    std::string::push_back(&v169, v120);
    v121 = __tolower(v98[22]);
    std::string::push_back(&v169, v121);
    v122 = __tolower(v98[23]);
    std::string::push_back(&v169, v122);
    v123 = __tolower(v98[24]);
    std::string::push_back(&v169, v123);
    v124 = __tolower(v98[25]);
    std::string::push_back(&v169, v124);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v125 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v125 = __p.__r_.__value_.__l.__size_;
    v126 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    v127 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v126 = v169.__r_.__value_.__l.__size_;
    if (v125 == v126)
    {
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = &v169;
      else
        v128 = (std::string *)v169.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v136 = memcmp(__p.__r_.__value_.__l.__data_, v128, __p.__r_.__value_.__l.__size_) == 0;
      }
      else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        v129 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        v130 = &__p;
        do
        {
          v132 = v130->__r_.__value_.__s.__data_[0];
          v130 = (std::string *)((char *)v130 + 1);
          v131 = v132;
          v134 = v128->__r_.__value_.__s.__data_[0];
          v128 = (std::string *)((char *)v128 + 1);
          v133 = v134;
          v33 = v129-- != 0;
          v135 = v33;
          v136 = v131 == v133;
        }
        while (v131 == v133 && (v135 & 1) != 0);
      }
      else
      {
        v136 = 1;
      }
    }
    else
    {
      v136 = 0;
    }
    if (v127 < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    operator delete(v98);
    if (v136)
    {
      v5 = 15;
    }
    else
    {
      sub_20E8610C0(&v169, "OnlineCalibrationSLAM");
      v137 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      if (v137)
      {
        v5 = 5;
      }
      else
      {
        sub_20E8610C0(&v169, "FGTimeOffsetExtrinsicsOnlineCalibration");
        v138 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        if (v138)
        {
          v5 = 6;
        }
        else
        {
          sub_20E8610C0(&v169, "OnlineCalibrationMapBuilding");
          v139 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v169.__r_.__value_.__l.__data_);
          if (v139)
          {
            v5 = 7;
          }
          else
          {
            sub_20E8610C0(&v169, "OnlineCalibrationMapTracking");
            v140 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v169.__r_.__value_.__l.__data_);
            if (v140)
            {
              v5 = 8;
            }
            else
            {
              sub_20E8610C0(&v169, "OnlineCalibration30fpsVIO");
              v141 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v169.__r_.__value_.__l.__data_);
              if (v141)
              {
                v5 = 25;
              }
              else
              {
                sub_20E8610C0(&v169, "MultiMonoOnlineCalibration");
                v142 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v169.__r_.__value_.__l.__data_);
                if (v142)
                {
                  v5 = 27;
                }
                else
                {
                  sub_20E8610C0(&v169, "AccuracyOptimizedOnlineCalibrationVIO");
                  v143 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v169.__r_.__value_.__l.__data_);
                  if (v143)
                  {
                    v5 = 29;
                  }
                  else
                  {
                    sub_20E8610C0(&v169, "Masolino");
                    v144 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v169.__r_.__value_.__l.__data_);
                    if (v144)
                    {
                      v5 = 16;
                    }
                    else
                    {
                      sub_20E8610C0(&v169, "Masolino2");
                      v145 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v169.__r_.__value_.__l.__data_);
                      if (v145)
                      {
                        v5 = 19;
                      }
                      else
                      {
                        sub_20E8610C0(&v169, "OnlineCalibrationOnlineMapBA");
                        v146 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v169.__r_.__value_.__l.__data_);
                        if (v146)
                        {
                          v5 = 21;
                        }
                        else
                        {
                          sub_20E8610C0(&v169, "ARKitiOSOfflineMapBA");
                          v147 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v169.__r_.__value_.__l.__data_);
                          if (v147)
                          {
                            v5 = 22;
                          }
                          else
                          {
                            sub_20E8610C0(&v169, "OdometryOnly");
                            v148 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v169.__r_.__value_.__l.__data_);
                            if (v148)
                            {
                              v5 = 9;
                            }
                            else
                            {
                              sub_20E8610C0(&v169, "Headless");
                              v149 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v169.__r_.__value_.__l.__data_);
                              if (v149)
                              {
                                v5 = 10;
                              }
                              else
                              {
                                sub_20E8610C0(&v169, "BatchTriangulation");
                                v150 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v169.__r_.__value_.__l.__data_);
                                if (v150)
                                {
                                  v5 = 11;
                                }
                                else
                                {
                                  sub_20E8610C0(&v169, "IncrementalTriangulation");
                                  v151 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v169.__r_.__value_.__l.__data_);
                                  if (v151)
                                  {
                                    v5 = 12;
                                  }
                                  else
                                  {
                                    sub_20E8610C0(&v169, "CoreLocationIntegration");
                                    v152 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v169.__r_.__value_.__l.__data_);
                                    if (v152)
                                    {
                                      v5 = 13;
                                    }
                                    else
                                    {
                                      sub_20E8610C0(&v169, "CollaborativeMapping");
                                      v153 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(v169.__r_.__value_.__l.__data_);
                                      if (v153)
                                      {
                                        v5 = 17;
                                      }
                                      else
                                      {
                                        sub_20E8610C0(&v169, "CollaborativeMappingRanging");
                                        v154 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v169.__r_.__value_.__l.__data_);
                                        if (v154)
                                        {
                                          v5 = 18;
                                        }
                                        else
                                        {
                                          sub_20E8610C0(&v169, "VisualSLAM");
                                          v155 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(v169.__r_.__value_.__l.__data_);
                                          if (v155)
                                          {
                                            v5 = 23;
                                          }
                                          else
                                          {
                                            sub_20E8610C0(&v169, "GeneralVisualSLAM");
                                            v156 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v169.__r_.__value_.__l.__data_);
                                            if (v156)
                                            {
                                              v5 = 39;
                                            }
                                            else
                                            {
                                              sub_20E8610C0(&v169, "ARKitiOSAdaptiveKeyframing");
                                              v157 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                operator delete(v169.__r_.__value_.__l.__data_);
                                              if (v157)
                                              {
                                                v5 = 24;
                                              }
                                              else
                                              {
                                                sub_20E8610C0(&v169, "ARKitiOS");
                                                v158 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(v169.__r_.__value_.__l.__data_);
                                                if (v158)
                                                {
                                                  v5 = 26;
                                                }
                                                else
                                                {
                                                  sub_20E8610C0(&v169, "ARKitiOSLarge");
                                                  v159 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                    operator delete(v169.__r_.__value_.__l.__data_);
                                                  if (v159)
                                                  {
                                                    v5 = 31;
                                                  }
                                                  else
                                                  {
                                                    sub_20E8610C0(&v169, "ARKitiOSUnlimited");
                                                    v160 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(v169.__r_.__value_.__l.__data_);
                                                    if (v160)
                                                    {
                                                      v5 = 28;
                                                    }
                                                    else
                                                    {
                                                      sub_20E8610C0(&v169, "ARKitiOSLaccBA");
                                                      v161 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                        operator delete(v169.__r_.__value_.__l.__data_);
                                                      if (v161)
                                                      {
                                                        v5 = 30;
                                                      }
                                                      else
                                                      {
                                                        sub_20E8610C0(&v169, "ARKitiOSOdometryOnly");
                                                        v162 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                          operator delete(v169.__r_.__value_.__l.__data_);
                                                        if (v162)
                                                        {
                                                          v5 = 32;
                                                        }
                                                        else
                                                        {
                                                          sub_20E8610C0(&v169, "ARKitiOSLaccBAOdometryOnly");
                                                          v163 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                            operator delete(v169.__r_.__value_.__l.__data_);
                                                          if (v163)
                                                          {
                                                            v5 = 33;
                                                          }
                                                          else
                                                          {
                                                            sub_20E8610C0(&v169, "ARKitiOSObjectCapture");
                                                            v164 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                              operator delete(v169.__r_.__value_.__l.__data_);
                                                            if (v164)
                                                            {
                                                              v5 = 37;
                                                            }
                                                            else
                                                            {
                                                              sub_20E8610C0(&v169, "ARKitiOSLaccBAOnSWMasked");
                                                              v165 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                                operator delete(v169.__r_.__value_.__l.__data_);
                                                              if (v165)
                                                              {
                                                                v5 = 35;
                                                              }
                                                              else
                                                              {
                                                                sub_20E8610C0(&v169, "ARKitiOSLaccBAOffSWMasked");
                                                                v166 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                                if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                                  operator delete(v169.__r_.__value_.__l.__data_);
                                                                if (v166)
                                                                {
                                                                  v5 = 36;
                                                                }
                                                                else
                                                                {
                                                                  sub_20E8610C0(&v169, "ARKitiOSLaccBANoCallOffSWMasked");
                                                                  v167 = sub_20E914994((unsigned __int8 *)&__p, (unsigned __int8 *)&v169);
                                                                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                                                    operator delete(v169.__r_.__value_.__l.__data_);
                                                                  if (v167)
                                                                    v5 = 38;
                                                                  else
                                                                    v5 = 0xFFFFFFFFLL;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_275:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v5;
  operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20E914800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL sub_20E914994(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  unsigned __int8 *v5;
  std::string::size_type v6;
  std::string::value_type v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  int v11;
  std::string *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  _BOOL8 v20;
  std::string v22;

  v2 = a2;
  v4 = (char)a2[23];
  v5 = *(unsigned __int8 **)a2;
  if (v4 >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  memset(&v22, 0, sizeof(v22));
  std::string::reserve(&v22, v6);
  if (v4 < 0)
    v2 = v5;
  for (; v6; --v6)
  {
    v7 = __tolower(*v2);
    std::string::push_back(&v22, v7);
    ++v2;
  }
  v8 = a1[23];
  if ((v8 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v22.__r_.__value_.__l.__size_;
  if (v9 == size)
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v22;
    else
      v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if ((v8 & 0x80) != 0)
    {
      v20 = memcmp(*(const void **)a1, v12, *((_QWORD *)a1 + 1)) == 0;
    }
    else
    {
      if (!a1[23])
      {
        v20 = 1;
        if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v20;
        goto LABEL_30;
      }
      v13 = v8 - 1;
      do
      {
        v15 = *a1++;
        v14 = v15;
        v17 = v12->__r_.__value_.__s.__data_[0];
        v12 = (std::string *)((char *)v12 + 1);
        v16 = v17;
        v19 = v13-- != 0;
        v20 = v14 == v16;
      }
      while (v14 == v16 && v19);
    }
    if (v11 < 0)
LABEL_30:
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_30;
  }
  return v20;
}

void sub_20E914AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E914AE8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[8];
  v11 = a2[9];
  v12 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = a2[12];
  v14 = a2[13];
  v15 = a2[14];
  *(_OWORD *)(a1 + 237) = *(__int128 *)((char *)a2 + 237);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 192) = v13;
  sub_20E915370(a1 + 256, (uint64_t)(a2 + 16));
  memcpy((void *)(a1 + 736), a2 + 46, 0x230uLL);
  v16 = (void **)(a1 + 1296);
  if (*(char *)(a1 + 1319) < 0)
    operator delete(*v16);
  v17 = a2[81];
  *(_QWORD *)(a1 + 1312) = *((_QWORD *)a2 + 164);
  *(_OWORD *)v16 = v17;
  *((_BYTE *)a2 + 1319) = 0;
  *((_BYTE *)a2 + 1296) = 0;
  v18 = *(__int128 *)((char *)a2 + 1320);
  v19 = *(__int128 *)((char *)a2 + 1352);
  *(_OWORD *)(a1 + 1336) = *(__int128 *)((char *)a2 + 1336);
  *(_OWORD *)(a1 + 1352) = v19;
  *(_OWORD *)(a1 + 1320) = v18;
  v21 = *(__int128 *)((char *)a2 + 1432);
  v20 = *(__int128 *)((char *)a2 + 1448);
  v22 = *(__int128 *)((char *)a2 + 1416);
  *(_BYTE *)(a1 + 1464) = *((_BYTE *)a2 + 1464);
  *(_OWORD *)(a1 + 1432) = v21;
  *(_OWORD *)(a1 + 1448) = v20;
  *(_OWORD *)(a1 + 1416) = v22;
  v23 = *(__int128 *)((char *)a2 + 1368);
  v24 = *(__int128 *)((char *)a2 + 1400);
  *(_OWORD *)(a1 + 1384) = *(__int128 *)((char *)a2 + 1384);
  *(_OWORD *)(a1 + 1400) = v24;
  *(_OWORD *)(a1 + 1368) = v23;
  sub_20E9155A4(a1 + 1472, (uint64_t)(a2 + 92));
  memcpy((void *)(a1 + 3248), a2 + 203, 0x2F8uLL);
  v26 = *(__int128 *)((char *)a2 + 4024);
  v25 = *(__int128 *)((char *)a2 + 4040);
  *(_OWORD *)(a1 + 4008) = *(__int128 *)((char *)a2 + 4008);
  *(_OWORD *)(a1 + 4024) = v26;
  *(_OWORD *)(a1 + 4040) = v25;
  v27 = *(void **)(a1 + 4056);
  if (v27)
  {
    *(_QWORD *)(a1 + 4064) = v27;
    operator delete(v27);
    *(_QWORD *)(a1 + 4056) = 0;
    *(_QWORD *)(a1 + 4064) = 0;
    *(_QWORD *)(a1 + 4072) = 0;
  }
  *(_QWORD *)(a1 + 4056) = *((_QWORD *)a2 + 507);
  *(_QWORD *)(a1 + 4064) = *((_QWORD *)a2 + 508);
  *(_QWORD *)(a1 + 4072) = *((_QWORD *)a2 + 509);
  *((_QWORD *)a2 + 507) = 0;
  *((_QWORD *)a2 + 508) = 0;
  *((_QWORD *)a2 + 509) = 0;
  v28 = *(void **)(a1 + 4080);
  if (v28)
  {
    *(_QWORD *)(a1 + 4088) = v28;
    operator delete(v28);
    *(_QWORD *)(a1 + 4080) = 0;
    *(_QWORD *)(a1 + 4088) = 0;
    *(_QWORD *)(a1 + 4096) = 0;
  }
  *(_OWORD *)(a1 + 4080) = a2[255];
  *(_QWORD *)(a1 + 4096) = *((_QWORD *)a2 + 512);
  *((_QWORD *)a2 + 512) = 0;
  *((_QWORD *)a2 + 511) = 0;
  *((_QWORD *)a2 + 510) = 0;
  v30 = *(__int128 *)((char *)a2 + 4152);
  v29 = *(__int128 *)((char *)a2 + 4168);
  v31 = *(__int128 *)((char *)a2 + 4136);
  *(_WORD *)(a1 + 4184) = *((_WORD *)a2 + 2092);
  *(_OWORD *)(a1 + 4152) = v30;
  *(_OWORD *)(a1 + 4168) = v29;
  *(_OWORD *)(a1 + 4136) = v31;
  v32 = *(__int128 *)((char *)a2 + 4120);
  *(_OWORD *)(a1 + 4104) = *(__int128 *)((char *)a2 + 4104);
  *(_OWORD *)(a1 + 4120) = v32;
  memcpy((void *)(a1 + 4192), a2 + 262, 0x1B0uLL);
  v33 = *(_DWORD *)((char *)a2 + 4627);
  *(_DWORD *)(a1 + 4624) = *((_DWORD *)a2 + 1156);
  *(_DWORD *)(a1 + 4627) = v33;
  v34 = a1 + 4640;
  sub_20E86872C(a1 + 4632, *(_QWORD **)(a1 + 4640));
  *(_QWORD *)(a1 + 4632) = *((_QWORD *)a2 + 579);
  v35 = *((_QWORD *)a2 + 580);
  *(_QWORD *)(a1 + 4640) = v35;
  v36 = *((_QWORD *)a2 + 581);
  *(_QWORD *)(a1 + 4648) = v36;
  if (v36)
  {
    *(_QWORD *)(v35 + 16) = v34;
    *((_QWORD *)a2 + 579) = a2 + 290;
    *((_QWORD *)a2 + 580) = 0;
    *((_QWORD *)a2 + 581) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 4632) = v34;
  }
  *(_OWORD *)(a1 + 4656) = a2[291];
  v37 = a2[292];
  v38 = a2[293];
  v39 = a2[294];
  *(_OWORD *)(a1 + 4720) = a2[295];
  *(_OWORD *)(a1 + 4704) = v39;
  *(_OWORD *)(a1 + 4688) = v38;
  *(_OWORD *)(a1 + 4672) = v37;
  v40 = *((_DWORD *)a2 + 1184);
  *(_BYTE *)(a1 + 4740) = *((_BYTE *)a2 + 4740);
  *(_DWORD *)(a1 + 4736) = v40;
  return a1;
}

uint64_t sub_20E914D8C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  __int128 v32;
  void **v33;
  __int128 v34;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  v11 = (_QWORD *)(a1 + 128);
  v10 = *(void **)(a1 + 128);
  v12 = a2 + 8;
  if (v10)
  {
    *(_QWORD *)(a1 + 136) = v10;
    operator delete(v10);
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
  }
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *v12 = 0;
  v12[1] = 0;
  v12[2] = 0;
  v13 = *(void **)(a1 + 160);
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  if (v13)
  {
    *(_QWORD *)(a1 + 168) = v13;
    operator delete(v13);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 20) = 0;
  v14 = *(__int128 *)((char *)a2 + 184);
  v15 = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 184) = v14;
  v16 = (void **)(a1 + 224);
  if (*(char *)(a1 + 247) < 0)
    operator delete(*v16);
  v17 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)v16 = v17;
  *((_BYTE *)a2 + 247) = 0;
  *((_BYTE *)a2 + 224) = 0;
  v19 = *(__int128 *)((char *)a2 + 296);
  v18 = *(__int128 *)((char *)a2 + 312);
  v20 = *(__int128 *)((char *)a2 + 280);
  *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
  *(_OWORD *)(a1 + 280) = v20;
  *(_OWORD *)(a1 + 296) = v19;
  *(_OWORD *)(a1 + 312) = v18;
  *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
  v21 = *(__int128 *)((char *)a2 + 328);
  v22 = *(__int128 *)((char *)a2 + 344);
  v23 = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 369) = *(__int128 *)((char *)a2 + 369);
  *(_OWORD *)(a1 + 344) = v22;
  *(_OWORD *)(a1 + 360) = v23;
  *(_OWORD *)(a1 + 328) = v21;
  *(_OWORD *)(a1 + 392) = *(__int128 *)((char *)a2 + 392);
  v24 = *(__int128 *)((char *)a2 + 408);
  v25 = *(__int128 *)((char *)a2 + 424);
  v26 = *(__int128 *)((char *)a2 + 456);
  *(_OWORD *)(a1 + 440) = *(__int128 *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 456) = v26;
  *(_OWORD *)(a1 + 408) = v24;
  *(_OWORD *)(a1 + 424) = v25;
  v27 = *(void **)(a1 + 472);
  if (v27)
  {
    *(_QWORD *)(a1 + 480) = v27;
    operator delete(v27);
    *(_QWORD *)(a1 + 472) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
  }
  v28 = *((_QWORD *)a2 + 60);
  *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
  *(_QWORD *)(a1 + 480) = v28;
  *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
  *((_QWORD *)a2 + 59) = 0;
  *((_QWORD *)a2 + 60) = 0;
  *((_QWORD *)a2 + 61) = 0;
  memcpy((void *)(a1 + 496), a2 + 31, 0x139uLL);
  v29 = *(__int128 *)((char *)a2 + 844);
  v30 = a2[52];
  *(_OWORD *)(a1 + 816) = a2[51];
  *(_OWORD *)(a1 + 832) = v30;
  *(_OWORD *)(a1 + 844) = v29;
  v31 = *(void **)(a1 + 864);
  if (v31)
  {
    *(_QWORD *)(a1 + 872) = v31;
    operator delete(v31);
    *(_QWORD *)(a1 + 864) = 0;
    *(_QWORD *)(a1 + 872) = 0;
    *(_QWORD *)(a1 + 880) = 0;
  }
  *(_OWORD *)(a1 + 864) = a2[54];
  *(_QWORD *)(a1 + 880) = *((_QWORD *)a2 + 110);
  *((_QWORD *)a2 + 109) = 0;
  *((_QWORD *)a2 + 110) = 0;
  *((_QWORD *)a2 + 108) = 0;
  v32 = *(__int128 *)((char *)a2 + 888);
  *(_QWORD *)(a1 + 904) = *((_QWORD *)a2 + 113);
  *(_OWORD *)(a1 + 888) = v32;
  v33 = (void **)(a1 + 912);
  if (*(char *)(a1 + 935) < 0)
    operator delete(*v33);
  v34 = a2[57];
  *(_QWORD *)(a1 + 928) = *((_QWORD *)a2 + 116);
  *(_OWORD *)v33 = v34;
  *((_BYTE *)a2 + 935) = 0;
  *((_BYTE *)a2 + 912) = 0;
  *(_BYTE *)(a1 + 936) = *((_BYTE *)a2 + 936);
  *(_DWORD *)(a1 + 944) = *((_DWORD *)a2 + 236);
  return a1;
}

uint64_t sub_20E914FE0(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  __int128 v31;
  void **v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  memcpy((void *)a1, (const void *)a2, 0x3E9uLL);
  sub_20E915808(a1 + 1008, a2 + 1008);
  sub_20E915C20(a1 + 1872, (__int128 *)(a2 + 1872));
  memcpy((void *)(a1 + 2064), (const void *)(a2 + 2064), 0x120uLL);
  v4 = (void **)(a1 + 2352);
  if (*(char *)(a1 + 2375) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 2352);
  *(_QWORD *)(a1 + 2368) = *(_QWORD *)(a2 + 2368);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 2375) = 0;
  *(_BYTE *)(a2 + 2352) = 0;
  v6 = (void **)(a1 + 2376);
  if (*(char *)(a1 + 2399) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 2376);
  *(_QWORD *)(a1 + 2392) = *(_QWORD *)(a2 + 2392);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 2399) = 0;
  *(_BYTE *)(a2 + 2376) = 0;
  v8 = (void **)(a1 + 2400);
  if (*(char *)(a1 + 2423) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 2400);
  *(_QWORD *)(a1 + 2416) = *(_QWORD *)(a2 + 2416);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 2423) = 0;
  *(_BYTE *)(a2 + 2400) = 0;
  v10 = (void **)(a1 + 2424);
  if (*(char *)(a1 + 2447) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 2424);
  *(_QWORD *)(a1 + 2440) = *(_QWORD *)(a2 + 2440);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 2447) = 0;
  *(_BYTE *)(a2 + 2424) = 0;
  v12 = (_OWORD *)(a2 + 2448);
  if (*(unsigned __int8 *)(a1 + 2464) != *(unsigned __int8 *)(a2 + 2464))
  {
    if (!*(_BYTE *)(a1 + 2464))
    {
      *(_OWORD *)(a1 + 2448) = *v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(a2 + 2456) = 0;
      *(_BYTE *)(a1 + 2464) = 1;
      v17 = (_QWORD *)(a2 + 2472);
      v18 = *(unsigned __int8 *)(a1 + 2488);
      if (v18 != *(unsigned __int8 *)(a2 + 2488))
        goto LABEL_32;
      goto LABEL_25;
    }
    v19 = *(std::__shared_weak_count **)(a1 + 2456);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *(_BYTE *)(a1 + 2464) = 0;
LABEL_24:
    v17 = (_QWORD *)(a2 + 2472);
    v18 = *(unsigned __int8 *)(a1 + 2488);
    if (v18 != *(unsigned __int8 *)(a2 + 2488))
      goto LABEL_32;
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a1 + 2464))
    goto LABEL_24;
  v13 = *v12;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(a2 + 2456) = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 2456);
  *(_OWORD *)(a1 + 2448) = v13;
  if (!v14)
    goto LABEL_24;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    goto LABEL_24;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  v17 = (_QWORD *)(a2 + 2472);
  v18 = *(unsigned __int8 *)(a1 + 2488);
  if (v18 != *(unsigned __int8 *)(a2 + 2488))
  {
LABEL_32:
    if (v18)
    {
      v26 = *(std::__shared_weak_count **)(a1 + 2480);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      *(_BYTE *)(a1 + 2488) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a2 + 2472);
      *(_QWORD *)(a1 + 2480) = *(_QWORD *)(a2 + 2480);
      *v17 = 0;
      v17[1] = 0;
      *(_BYTE *)(a1 + 2488) = 1;
    }
    goto LABEL_40;
  }
LABEL_25:
  if (v18)
  {
    v22 = *(_OWORD *)v17;
    *v17 = 0;
    v17[1] = 0;
    v23 = *(std::__shared_weak_count **)(a1 + 2480);
    *(_OWORD *)(a1 + 2472) = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
LABEL_40:
  v29 = *(_QWORD *)(a2 + 2496);
  *(_DWORD *)(a1 + 2504) = *(_DWORD *)(a2 + 2504);
  *(_QWORD *)(a1 + 2496) = v29;
  *(_WORD *)(a1 + 2512) = *(_WORD *)(a2 + 2512);
  v30 = (void **)(a1 + 2520);
  if (*(char *)(a1 + 2543) < 0)
    operator delete(*v30);
  v31 = *(_OWORD *)(a2 + 2520);
  *(_QWORD *)(a1 + 2536) = *(_QWORD *)(a2 + 2536);
  *(_OWORD *)v30 = v31;
  *(_BYTE *)(a2 + 2543) = 0;
  *(_BYTE *)(a2 + 2520) = 0;
  *(_BYTE *)(a1 + 2544) = *(_BYTE *)(a2 + 2544);
  v32 = (void **)(a1 + 2552);
  if (*(char *)(a1 + 2575) < 0)
    operator delete(*v32);
  v33 = *(_OWORD *)(a2 + 2552);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a2 + 2568);
  *(_OWORD *)v32 = v33;
  *(_BYTE *)(a2 + 2575) = 0;
  *(_BYTE *)(a2 + 2552) = 0;
  v34 = *(_OWORD *)(a2 + 2576);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a2 + 2592);
  *(_OWORD *)(a1 + 2576) = v34;
  v35 = *(_OWORD *)(a2 + 2664);
  v37 = *(_OWORD *)(a2 + 2616);
  v36 = *(_OWORD *)(a2 + 2632);
  *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a2 + 2648);
  *(_OWORD *)(a1 + 2664) = v35;
  *(_OWORD *)(a1 + 2616) = v37;
  *(_OWORD *)(a1 + 2632) = v36;
  v38 = *(_OWORD *)(a2 + 2728);
  v40 = *(_OWORD *)(a2 + 2680);
  v39 = *(_OWORD *)(a2 + 2696);
  *(_OWORD *)(a1 + 2712) = *(_OWORD *)(a2 + 2712);
  *(_OWORD *)(a1 + 2728) = v38;
  *(_OWORD *)(a1 + 2680) = v40;
  *(_OWORD *)(a1 + 2696) = v39;
  v41 = *(_OWORD *)(a2 + 2792);
  v43 = *(_OWORD *)(a2 + 2744);
  v42 = *(_OWORD *)(a2 + 2760);
  *(_OWORD *)(a1 + 2776) = *(_OWORD *)(a2 + 2776);
  *(_OWORD *)(a1 + 2792) = v41;
  *(_OWORD *)(a1 + 2744) = v43;
  *(_OWORD *)(a1 + 2760) = v42;
  *(_OWORD *)(a1 + 2600) = *(_OWORD *)(a2 + 2600);
  return a1;
}

uint64_t sub_20E915370(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  v6 = (_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 32);
  v7 = (_QWORD *)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v5);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 79) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 103) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  v12 = *(void **)(a1 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 120) = v12;
    operator delete(v12);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v13 = *(_OWORD *)(a2 + 168);
  v14 = *(_OWORD *)(a2 + 184);
  v15 = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v16 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v16;
  v17 = *(_OWORD *)(a2 + 248);
  v18 = *(_OWORD *)(a2 + 264);
  v19 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v19;
  *(_OWORD *)(a1 + 264) = v18;
  *(_OWORD *)(a1 + 248) = v17;
  v20 = *(void **)(a1 + 312);
  if (v20)
  {
    *(_QWORD *)(a1 + 320) = v20;
    operator delete(v20);
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  v21 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v21;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  v22 = *(void **)(a1 + 336);
  if (v22)
  {
    *(_QWORD *)(a1 + 344) = v22;
    operator delete(v22);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = 0;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  v23 = *(void **)(a1 + 360);
  if (v23)
  {
    *(_QWORD *)(a1 + 368) = v23;
    operator delete(v23);
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
  }
  v24 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v24;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  v25 = *(_OWORD *)(a2 + 464);
  v27 = *(_OWORD *)(a2 + 416);
  v26 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v25;
  *(_OWORD *)(a1 + 416) = v27;
  *(_OWORD *)(a1 + 432) = v26;
  v28 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v28;
  return a1;
}

uint64_t sub_20E9155A4(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void **v25;
  __int128 v26;
  void **v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void **v37;
  __int128 v38;

  memcpy((void *)a1, (const void *)a2, 0x109uLL);
  memcpy((void *)(a1 + 272), (const void *)(a2 + 272), 0x21DuLL);
  v4 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 839) = 0;
  *(_BYTE *)(a2 + 816) = 0;
  v6 = (void **)(a1 + 840);
  if (*(char *)(a1 + 863) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 840);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 863) = 0;
  *(_BYTE *)(a2 + 840) = 0;
  v8 = (void **)(a1 + 864);
  if (*(char *)(a1 + 887) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 887) = 0;
  *(_BYTE *)(a2 + 864) = 0;
  v11 = *(_OWORD *)(a2 + 1016);
  v10 = *(_OWORD *)(a2 + 1032);
  v12 = *(_OWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 984) = *(_OWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 1000) = v12;
  *(_OWORD *)(a1 + 1016) = v11;
  *(_OWORD *)(a1 + 1032) = v10;
  v14 = *(_OWORD *)(a2 + 952);
  v13 = *(_OWORD *)(a2 + 968);
  v15 = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 920) = *(_OWORD *)(a2 + 920);
  *(_OWORD *)(a1 + 936) = v15;
  *(_OWORD *)(a1 + 952) = v14;
  *(_OWORD *)(a1 + 968) = v13;
  v16 = *(_OWORD *)(a2 + 904);
  *(_OWORD *)(a1 + 888) = *(_OWORD *)(a2 + 888);
  *(_OWORD *)(a1 + 904) = v16;
  v17 = *(_OWORD *)(a2 + 1048);
  v18 = *(_OWORD *)(a2 + 1064);
  v19 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1096) = v19;
  *(_OWORD *)(a1 + 1048) = v17;
  *(_OWORD *)(a1 + 1064) = v18;
  v20 = *(_OWORD *)(a2 + 1112);
  v21 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v21;
  *(_OWORD *)(a1 + 1112) = v20;
  v22 = *(_OWORD *)(a2 + 1160);
  v23 = *(_OWORD *)(a2 + 1176);
  v24 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v24;
  *(_OWORD *)(a1 + 1160) = v22;
  *(_OWORD *)(a1 + 1176) = v23;
  v25 = (void **)(a1 + 1224);
  if (*(char *)(a1 + 1247) < 0)
    operator delete(*v25);
  v26 = *(_OWORD *)(a2 + 1224);
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
  *(_OWORD *)v25 = v26;
  *(_BYTE *)(a2 + 1247) = 0;
  *(_BYTE *)(a2 + 1224) = 0;
  v27 = (void **)(a1 + 1248);
  if (*(char *)(a1 + 1271) < 0)
    operator delete(*v27);
  v28 = *(_OWORD *)(a2 + 1248);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_OWORD *)v27 = v28;
  *(_BYTE *)(a2 + 1271) = 0;
  *(_BYTE *)(a2 + 1248) = 0;
  v30 = *(_OWORD *)(a2 + 1288);
  v29 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1288) = v30;
  *(_OWORD *)(a1 + 1304) = v29;
  v31 = *(void **)(a1 + 1320);
  if (v31)
  {
    *(_QWORD *)(a1 + 1328) = v31;
    operator delete(v31);
    *(_QWORD *)(a1 + 1320) = 0;
    *(_QWORD *)(a1 + 1328) = 0;
    *(_QWORD *)(a1 + 1336) = 0;
  }
  *(_QWORD *)(a1 + 1320) = *(_QWORD *)(a2 + 1320);
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a2 + 1336);
  *(_QWORD *)(a2 + 1328) = 0;
  *(_QWORD *)(a2 + 1336) = 0;
  *(_QWORD *)(a2 + 1320) = 0;
  v32 = *(_OWORD *)(a2 + 1344);
  v33 = *(_OWORD *)(a2 + 1360);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1360) = v33;
  v34 = *(_OWORD *)(a2 + 1408);
  v35 = *(_OWORD *)(a2 + 1424);
  v36 = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1440) = v36;
  *(_OWORD *)(a1 + 1424) = v35;
  *(_OWORD *)(a1 + 1408) = v34;
  *(_OWORD *)(a1 + 1344) = v32;
  v37 = (void **)(a1 + 1456);
  if (*(char *)(a1 + 1479) < 0)
    operator delete(*v37);
  v38 = *(_OWORD *)(a2 + 1456);
  *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a2 + 1472);
  *(_OWORD *)v37 = v38;
  *(_BYTE *)(a2 + 1479) = 0;
  *(_BYTE *)(a2 + 1456) = 0;
  memcpy((void *)(a1 + 1480), (const void *)(a2 + 1480), 0x128uLL);
  return a1;
}

uint64_t sub_20E915808(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  void **v17;
  __int128 v18;
  char v19;
  void **v20;
  __int128 v21;
  void **v22;
  __int128 v23;
  void **v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  v8 = a1 + 96;
  v9 = (__int128 *)(a2 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)v8);
  v10 = *v9;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v8 = v10;
  *(_BYTE *)(a2 + 119) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  v11 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v11);
  v12 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)v11 = v12;
  *(_BYTE *)(a2 + 143) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  v13 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v13);
  v14 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a2 + 167) = 0;
  *(_BYTE *)(a2 + 144) = 0;
  v15 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v15);
  v16 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)v15 = v16;
  *(_BYTE *)(a2 + 191) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  v17 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v17);
  v18 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)v17 = v18;
  *(_BYTE *)(a2 + 215) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  v19 = *(_BYTE *)(a2 + 218);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = v19;
  v20 = (void **)(a1 + 224);
  if (*(char *)(a1 + 247) < 0)
    operator delete(*v20);
  v21 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)v20 = v21;
  *(_BYTE *)(a2 + 247) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  v22 = (void **)(a1 + 248);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*v22);
  v23 = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)v22 = v23;
  *(_BYTE *)(a2 + 271) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  v24 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
    operator delete(*v24);
  v25 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)v24 = v25;
  *(_BYTE *)(a2 + 295) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  sub_20E915AE0(a1 + 304, a2 + 304);
  v26 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v26;
  v28 = *(_OWORD *)(a2 + 632);
  v27 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = v28;
  *(_OWORD *)(a1 + 648) = v27;
  v29 = *(void **)(a1 + 664);
  if (v29)
  {
    *(_QWORD *)(a1 + 672) = v29;
    operator delete(v29);
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 672) = 0;
    *(_QWORD *)(a1 + 680) = 0;
  }
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a2 + 664) = 0;
  *(_QWORD *)(a2 + 672) = 0;
  *(_QWORD *)(a2 + 680) = 0;
  v30 = *(void **)(a1 + 688);
  if (v30)
  {
    *(_QWORD *)(a1 + 696) = v30;
    operator delete(v30);
    *(_QWORD *)(a1 + 688) = 0;
    *(_QWORD *)(a1 + 696) = 0;
    *(_QWORD *)(a1 + 704) = 0;
  }
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a2 + 704) = 0;
  *(_QWORD *)(a2 + 696) = 0;
  *(_QWORD *)(a2 + 688) = 0;
  v32 = *(_OWORD *)(a2 + 760);
  v31 = *(_OWORD *)(a2 + 776);
  v33 = *(_OWORD *)(a2 + 744);
  *(_WORD *)(a1 + 792) = *(_WORD *)(a2 + 792);
  *(_OWORD *)(a1 + 760) = v32;
  *(_OWORD *)(a1 + 776) = v31;
  *(_OWORD *)(a1 + 744) = v33;
  v34 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v34;
  v35 = *(_OWORD *)(a2 + 800);
  v36 = *(_OWORD *)(a2 + 816);
  v37 = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 844) = *(_OWORD *)(a2 + 844);
  *(_OWORD *)(a1 + 816) = v36;
  *(_OWORD *)(a1 + 832) = v37;
  *(_OWORD *)(a1 + 800) = v35;
  return a1;
}

uint64_t sub_20E915AE0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(void **)(a1 + 144);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v6;
  v10 = *(_OWORD *)(a2 + 112);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v9;
  if (v8)
  {
    *(_QWORD *)(a1 + 152) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v11 = *(void **)(a1 + 168);
  if (v11)
  {
    *(_QWORD *)(a1 + 176) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v13 = *(_OWORD *)(a2 + 240);
  v12 = *(_OWORD *)(a2 + 256);
  v14 = *(_OWORD *)(a2 + 224);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 224) = v14;
  v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v15;
  return a1;
}

__n128 sub_20E915C20(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*(unsigned __int8 *)(a1 + 184) == *((unsigned __int8 *)a2 + 184))
  {
    if (*(_BYTE *)(a1 + 184))
    {
      v4 = *a2;
      v5 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      v7 = (_QWORD *)(a1 + 48);
      v6 = *(void **)(a1 + 48);
      v8 = a2 + 3;
      if (v6)
      {
        *(_QWORD *)(a1 + 56) = v6;
        operator delete(v6);
        *v7 = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      *(_OWORD *)(a1 + 48) = a2[3];
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *v8 = 0;
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      v9 = *(void **)(a1 + 72);
      if (v9)
      {
        *(_QWORD *)(a1 + 80) = v9;
        operator delete(v9);
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
      }
      *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      *((_QWORD *)a2 + 9) = 0;
      v11 = a2[9];
      v10 = a2[10];
      v12 = a2[8];
      *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 160) = v10;
      *(_OWORD *)(a1 + 128) = v12;
      result = (__n128)a2[6];
      v14 = a2[7];
      *(__n128 *)(a1 + 96) = result;
      *(_OWORD *)(a1 + 112) = v14;
    }
  }
  else if (*(_BYTE *)(a1 + 184))
  {
    v15 = *(void **)(a1 + 72);
    if (v15)
    {
      *(_QWORD *)(a1 + 80) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(a1 + 48);
    if (v16)
    {
      *(_QWORD *)(a1 + 56) = v16;
      operator delete(v16);
    }
    *(_BYTE *)(a1 + 184) = 0;
  }
  else
  {
    v17 = *a2;
    v18 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v18;
    *(_OWORD *)a1 = v17;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)a2 + 9) = 0;
    v19 = a2[7];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v19;
    result = (__n128)a2[8];
    v20 = a2[9];
    v21 = a2[10];
    *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 160) = v21;
    *(__n128 *)(a1 + 128) = result;
    *(_BYTE *)(a1 + 184) = 1;
  }
  return result;
}

uint64_t sub_20E915DB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (*(_BYTE *)(a1 + 12904))
  {
    v2 = *(_QWORD *)(a1 + 12816);
    if (v2)
      MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
    v3 = *(_QWORD *)(a1 + 12792);
    if (v3)
      MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
    v4 = *(_QWORD *)(a1 + 12760);
    if (v4)
      MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
    v5 = *(_QWORD *)(a1 + 12736);
    if (v5)
      MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
    v6 = *(void **)(a1 + 12360);
    if (v6)
    {
      *(_QWORD *)(a1 + 12368) = v6;
      operator delete(v6);
    }
    sub_20E869418(a1 + 8);
  }
  return a1;
}

void sub_20E915E6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B0508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E915E80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B0508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E915EB4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t CV3DVisualSLAMPresetFromMovablePlatformType(int a1)
{
  uint64_t result;

  if ((a1 - 1) < 2)
    return 23;
  if ((a1 - 3) < 3)
    return 39;
  result = 23;
  if (a1 && a1 != 6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfigDefault.cpp", 53, (uint64_t)"false", 5, (uint64_t)"Unsupported movable platform type", 33, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CV3DVisualSLAMPresetFromVSPlatformType(int a1)
{
  uint64_t result;

  if ((a1 - 1) < 2)
    return 23;
  if ((a1 - 3) < 3)
    return 39;
  result = 23;
  if (a1 && a1 != 6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMConfigDefault.cpp", 53, (uint64_t)"false", 5, (uint64_t)"Unsupported movable platform type", 33, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CV3DSLAMCreate(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  int *v4;

  if (!a1)
    return 4;
  v2 = operator new(0x1140uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (v2)
  {
    bzero(v2, 0x1140uLL);
    sub_20E86628C((uint64_t)(v3 + 2));
    v3[1102] = 1;
    *(_QWORD *)v3 = &off_24C9B3D08;
  }
  *a1 = v3;
  v4 = &kCV3DSLAMReturnNoError;
  if (!v3)
    v4 = &kCV3DSLAMReturnInsufficientMemory;
  return *v4;
}

void sub_20E916094(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20E916048);
}

uint64_t CV3DSLAMInitialize(uint64_t a1)
{
  if (a1)
    return sub_20E975EFC();
  else
    return 3;
}

void CV3DSLAMSetErrorBlock(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v11;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (!a1)
  {
    *(_QWORD *)__p = operator new(0x68uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DCFA0;
    strcpy(*(char **)__p, "The session has not been initialized. You need to call. CV3DSLAMInitialize before calling this method");
    v4 = (char *)operator new(0x70uLL);
    v11 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMInterface.cpp");
    if (!a3)
      goto LABEL_26;
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v5;
    v6 = v14;
    if (!v14)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    goto LABEL_21;
  }
  if (a2)
  {
    sub_20E97E27C((uint64_t *)(a1 + 8), a2, a3);
    return;
  }
  __p[23] = 13;
  strcpy(__p, "Block is NULL");
  v4 = (char *)operator new(0x70uLL);
  v11 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMInterface.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v9;
    v6 = v14;
    if (!v14)
      goto LABEL_25;
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v10);
    while (__stlxr(v8 - 1, v10));
LABEL_21:
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
LABEL_25:
    v4 = v11;
  }
LABEL_26:
  operator delete(v4);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_20E916354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMRelease(uint64_t *a1)
{
  unsigned int *v2;
  unsigned int v3;

  if (!a1)
    return 3;
  sub_20E97D8A0(a1 + 1, 0);
  v2 = (unsigned int *)(a1 + 551);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (v3 == 1)
    (*(void (**)(uint64_t *))(*a1 + 8))(a1);
  return 0;
}

void *CV3DSLAMJasperPointCloudCreate(uint64_t a1)
{
  void *v2;
  void *v3;

  if (!a1)
    return 0;
  v2 = operator new(0x200uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (v2)
    sub_20E861170((uint64_t)v2, a1);
  return v3;
}

uint64_t CV3DSLAMJasperPointCloudRelease(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    v1 = a1 + 126;
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  }
  return 0;
}

uint64_t CV3DSLAMJasperPointCloudSetProjectorMode(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (a2 > 3)
    return 2;
  result = 0;
  *(_BYTE *)(a1 + 124) = a2;
  return result;
}

BOOL CV3DSLAMJasperPointCloudSetPose(__n128 *a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  int v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v15;
  char __p[23];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v7 = a1[12].n128_u8[0];
    a1[8] = a3;
    a1[9] = a4;
    a1[10] = a5;
    a1[11] = a6;
    if (!v7)
      a1[12].n128_u8[0] = 1;
  }
  else
  {
    strcpy(__p, "Point cloud is nullptr");
    v17 = 22;
    v9 = (char *)operator new(0x78uLL);
    v15 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMJasperPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 = v15;
    }
    operator delete(v9);
    if (v17 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_20E91668C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMStateRelease(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    v1 = a1 + 6;
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  }
  return 0;
}

void CV3DSLAMStateReset(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  if (a1)
  {
    v1 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v1)
    {
      p_shared_owners = (unint64_t *)&v1->__shared_owners_;
      do
        v3 = __ldaxr(p_shared_owners);
      while (__stlxr(v3 - 1, p_shared_owners));
      if (!v3)
      {
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
      }
    }
  }
}

CFTypeRef CV3DSLAMStateSerializeToData(uint64_t a1)
{
  CFTypeRef v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v9;

  if (a1)
  {
    sub_20EAB186C((char ***)(a1 + 8), &cf);
    v1 = cf;
    if (cf)
      CFRetain(cf);
    v2 = v9;
    if (!v9)
      return v1;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
      return v1;
  }
  else
  {
    sub_20EA5EE78(0, 0, &cf);
    v1 = cf;
    if (cf)
      CFRetain(cf);
    v2 = v9;
    if (!v9)
      return v1;
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7)
      return v1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20E91684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E916864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *CV3DSLAMStateCreateFromData(const __CFData *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!a1)
    return 0;
  v2 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (v2)
  {
    sub_20EAB1304(v2 + 1, a1);
    *((_DWORD *)v3 + 6) = 1;
    *v3 = &off_24C9C3B88;
  }
  return v3;
}

double CV3DSLAMStateGetRotation(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  double *v6;
  _QWORD *v7;
  double result;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2)
    {
      if (a2)
      {
        v3 = (_QWORD *)v2[4];
        if (v3)
        {
          *a2 = v3[1];
          a2[1] = v3[2];
          a2[2] = v3[3];
          a2[3] = v3[4];
          a2[4] = v3[5];
          a2[5] = v3[6];
          v4 = v3 + 7;
          v5 = v3 + 8;
          v6 = (double *)(v3 + 9);
        }
        else
        {
          v7 = (_QWORD *)*v2;
          *a2 = *(_QWORD *)(*v2 + 48);
          a2[1] = v7[7];
          a2[2] = v7[8];
          a2[3] = v7[9];
          a2[4] = v7[10];
          a2[5] = v7[11];
          v4 = v7 + 12;
          v5 = v7 + 13;
          v6 = (double *)(v7 + 14);
        }
        a2[6] = *v4;
        a2[7] = *v5;
        result = *v6;
        a2[8] = *(_QWORD *)v6;
      }
    }
  }
  return result;
}

double CV3DSLAMStateGetTranslation(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  double *v6;
  uint64_t v7;
  double result;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2)
    {
      if (a2)
      {
        v3 = v2[4];
        if (v3)
        {
          v4 = (_QWORD *)(v3 + 80);
          v5 = (_QWORD *)(v3 + 88);
          v6 = (double *)(v3 + 96);
        }
        else
        {
          v7 = *v2;
          v4 = (_QWORD *)(*v2 + 192);
          v5 = (_QWORD *)(v7 + 200);
          v6 = (double *)(v7 + 208);
        }
        *a2 = *v4;
        a2[1] = *v5;
        result = *v6;
        a2[2] = *(_QWORD *)v6;
      }
    }
  }
  return result;
}

uint64_t CV3DSLAMStateGetPoseInIMUFrame(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  float64x2_t **v3;
  float64x2_t *v4;
  uint64_t result;
  float64x2_t *v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64_t *v9;
  float64x2_t *v11;
  float64_t *v12;
  double v13;
  int64x2_t v16;
  float64_t v17;
  int64x2_t v18;
  double v19;
  float64x2_t v21;
  float64x2_t v22;

  if (!a1)
    return 3;
  v3 = *(float64x2_t ***)(a1 + 8);
  if (!v3)
    return 3;
  v4 = *v3;
  if (!*v3)
    return 3;
  result = 4;
  if (a2 && a3)
  {
    result = 0;
    v6 = v3[4];
    v7 = v4 + 3;
    v8 = v4 + 12;
    v9 = &v6->f64[1];
    _ZF = v6 == 0;
    v11 = v6 + 5;
    if (_ZF)
    {
      v11 = v8;
      v12 = (float64_t *)v7;
    }
    else
    {
      v12 = v9;
    }
    v13 = v11[1].f64[0];
    _Q1 = *v11;
    _Q2.f64[0] = v12[2];
    v16 = *(int64x2_t *)v12;
    v17 = v12[5];
    v18 = *(int64x2_t *)(v12 + 3);
    v19 = v12[8];
    _Q7 = *((_OWORD *)v12 + 3);
    v21 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v12, v18), v11->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v12, v18), *v11, 1);
    *(float64_t *)(a2 + 16) = _Q2.f64[0];
    _Q2.f64[1] = v17;
    v22 = vmlaq_n_f64(v21, _Q2, v13);
    _Q1.f64[0] = _Q1.f64[1];
    __asm { FMLA            D2, D1, V7.D[1] }
    *(int64x2_t *)a2 = v16;
    *(int64x2_t *)(a2 + 24) = v18;
    *(float64_t *)(a2 + 40) = v17;
    *(_OWORD *)(a2 + 48) = _Q7;
    *(double *)(a2 + 64) = v19;
    *a3 = vnegq_f64(v22);
    a3[1].f64[0] = -(_Q2.f64[0] + v19 * v13);
  }
  return result;
}

uint64_t CV3DSLAMStateGetPoseInCameraFrame(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;

  if (!a1)
    return 3;
  LODWORD(result) = sub_20EAB3D4C((uint64_t **)(a1 + 8), a2, a3, a4, a5);
  if (result >= 6)
    return 1;
  else
    return result;
}

uint64_t CV3DSLAMStateConvertPoseToCameraFrame(uint64_t a1, uint64_t a2, float64x2_t *a3, unsigned int a4, unsigned int a5, uint64_t a6, double *a7)
{
  uint64_t result;

  if (!a1)
    return 3;
  LODWORD(result) = sub_20EAB3E48((uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7);
  if (result >= 6)
    return 1;
  else
    return result;
}

uint64_t CV3DSLAMStateGetIMUtoCameraPose(uint64_t a1, unsigned int a2, unsigned int a3, __int128 *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v20;
  uint64_t v21;

  if (!a1)
    return 3;
  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    return 3;
  v5 = *v4;
  if (!v5)
    return 3;
  if (!a4)
    return 4;
  v6 = *(_QWORD *)(v5 + 784);
  v7 = *(_QWORD *)(v5 + 776);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) <= a2)
    return 4;
  v9 = (uint64_t *)(v7 + 24 * a2);
  v8 = *v9;
  if (0x84BDA12F684BDA13 * ((v9[1] - *v9) >> 3) <= a3)
    return 4;
  result = 0;
  v11 = v8 + 216 * a3;
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 40);
  v17 = *(double *)(v11 + 48);
  v18 = *(double *)(v11 + 56);
  _D16 = *(_QWORD *)(v11 + 80);
  v20 = *(double *)(v11 + 88);
  v21 = *(_QWORD *)(v11 + 64);
  *(_QWORD *)a4 = *(_QWORD *)v11;
  *((_QWORD *)a4 + 1) = v14;
  *((_QWORD *)a4 + 4) = v12;
  *((_QWORD *)a4 + 5) = v15;
  *((_QWORD *)a4 + 8) = v13;
  *((_QWORD *)a4 + 9) = v16;
  *((_QWORD *)a4 + 10) = v21;
  _Q0 = *a4;
  __asm { FMLA            D1, D16, V0.D[1] }
  *((double *)a4 + 2) = v17;
  *((double *)a4 + 3) = -(_D1 + v17 * v20);
  _Q0 = a4[2];
  __asm { FMLA            D1, D16, V0.D[1] }
  *((double *)a4 + 6) = v18;
  *((double *)a4 + 7) = -(_D1 + v18 * v20);
  _Q1 = a4[4];
  __asm { FMLA            D2, D16, V1.D[1] }
  *((double *)a4 + 11) = -(_D2 + *((double *)a4 + 10) * v20);
  return result;
}

uint64_t CV3DSLAMStateGetCameraToIMURotation(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  uint64_t result;

  if (!a1)
    return 3;
  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    return 3;
  if (!a4)
    return 4;
  v5 = *v4;
  v6 = *(_QWORD *)(v5 + 784);
  v7 = *(_QWORD *)(v5 + 776);
  v8 = 0uLL;
  v9 = 0;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) <= a2)
  {
    result = 0;
    *(_OWORD *)a4 = 0uLL;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_QWORD *)(a4 + 64) = 0;
  }
  else
  {
    v11 = (uint64_t *)(v7 + 24 * a2);
    v10 = *v11;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    if (0x84BDA12F684BDA13 * ((v11[1] - *v11) >> 3) > a3)
    {
      v15 = (__int128 *)(v10 + 216 * a3);
      v8 = *v15;
      v12 = v15[1];
      v13 = v15[2];
      v14 = v15[3];
      v9 = *((_QWORD *)v15 + 8);
    }
    result = 0;
    *(_OWORD *)a4 = v8;
    *(_OWORD *)(a4 + 16) = v12;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)(a4 + 48) = v14;
    *(_QWORD *)(a4 + 64) = v9;
  }
  return result;
}

uint64_t CV3DSLAMStateGetCameraToIMUTranslation(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;

  if (!a1)
    return 3;
  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    return 3;
  if (!a4)
    return 4;
  v5 = *v4;
  v6 = *(_QWORD *)(v5 + 784);
  v7 = *(_QWORD *)(v5 + 776);
  v8 = 0uLL;
  v9 = 0;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > a2)
  {
    v11 = (uint64_t *)(v7 + 24 * a2);
    v10 = *v11;
    if (0x84BDA12F684BDA13 * ((v11[1] - *v11) >> 3) > a3)
    {
      v12 = v10 + 216 * a3;
      v8 = *(_OWORD *)(v12 + 72);
      v9 = *(_QWORD *)(v12 + 88);
    }
  }
  result = 0;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

uint64_t CV3DSLAMStateGetTimestamp(uint64_t a1, double *a2)
{
  uint64_t *v3;
  uint64_t v4;
  double *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  int v10;
  uint64_t result;
  unint64_t *v12;
  unint64_t v13;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return 3;
  v4 = *v3;
  v5 = (double *)v3[4];
  v6 = (std::__shared_weak_count *)v3[5];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5)
  {
    v9 = *v5;
    if (*v5 < *(double *)(v4 + 40))
    {
      v10 = 0;
      v9 = 0.0;
      if (!v6)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    v9 = *(double *)(v4 + 32);
  }
  v10 = 1;
  if (!v6)
    goto LABEL_18;
LABEL_15:
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v10)
      goto LABEL_19;
    return 3;
  }
LABEL_18:
  if (v10)
  {
LABEL_19:
    result = 0;
    *a2 = v9;
    return result;
  }
  return 3;
}

uint64_t CV3DSLAMStateGetMapSize(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      result = 0;
      *a2 = *(_DWORD *)(*(_QWORD *)v2 + 4120);
      return result;
    }
    return 3;
  }
  return 4;
}

double CV3DSLAMStateGetCameraTemperature(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_20EAB4060((uint64_t **)(a1 + 8), a2, a3, a4);
  __p = operator new(0x48uLL);
  v12 = xmmword_2102DCEB0;
  strcpy((char *)__p, "The given state is NULL when trying to get the camera temperature");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return -1.0;
}

void sub_20E9170A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetUpdatedAnchors(uint64_t a1, __CFArray *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  LODWORD(result) = sub_20EAB5680((uint64_t **)(a1 + 8), a2);
  if (result >= 6)
    return 1;
  else
    return result;
}

uint64_t CV3DSLAMStateGetNewAnchors(uint64_t a1, __CFArray *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  LODWORD(result) = sub_20EAB57AC((uint64_t **)(a1 + 8), a2);
  if (result >= 6)
    return 1;
  else
    return result;
}

__CFArray *CV3DSLAMStateCopyUpdatedAnchors(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_20EAB58D8((uint64_t **)(a1 + 8), a2);
  __p = operator new(0x40uLL);
  v10 = xmmword_2102DBC10;
  strcpy((char *)__p, "The given state is NULL when trying to copy updated anchors");
  v4 = (char *)operator new(0x70uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E9172D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateCopyNewAnchors(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_20EAB5BF4((uint64_t **)(a1 + 8), a2);
  __p = operator new(0x38uLL);
  v10 = xmmword_2102DBEE0;
  strcpy((char *)__p, "The given state is NULL when trying to copy new anchors");
  v4 = (char *)operator new(0x70uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E9174A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateCopyRemovedAnchors(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_20EAB5DD8((uint64_t **)(a1 + 8), a2);
  __p = operator new(0x40uLL);
  v10 = xmmword_2102DBC10;
  strcpy((char *)__p, "The given state is NULL when trying to copy removed anchors");
  v4 = (char *)operator new(0x70uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E917680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateGetExternalAnchorNames(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_20EAB5FBC((uint64_t **)(a1 + 8), a2);
  __p = operator new(0x48uLL);
  v10 = xmmword_2102DAFE0;
  strcpy((char *)__p, "The given state is NULL when trying to get external anchor names");
  v4 = (char *)operator new(0x70uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E917850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateCopyNearDistanceAnchorNames(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_20EAB62B4((uint64_t **)(a1 + 8), a2);
  __p = operator new(0x48uLL);
  v10 = xmmword_2102DBC20;
  strcpy((char *)__p, "The given state is NULL when trying to copy near distance anchor names");
  v4 = (char *)operator new(0x70uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E917A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateWasTrackingMap(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      result = 0;
      *a2 = *(_BYTE *)(*(_QWORD *)v2 + 400);
      return result;
    }
    return 3;
  }
  return 4;
}

uint64_t CV3DSLAMStateRelocalizationEvent(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      result = 0;
      *a2 = *(_BYTE *)(*(_QWORD *)v2 + 3832);
      return result;
    }
    return 3;
  }
  return 4;
}

uint64_t CV3DSLAMStateGetRelocalizationTimestamp(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
    return 3;
  v3 = *v2;
  if (!*(_BYTE *)(v3 + 3832))
    return 1;
  result = 0;
  *a2 = *(_QWORD *)(v3 + 3808);
  return result;
}

BOOL CV3DSLAMStateHasLoadedMaps(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB4894((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E917C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFMutableArrayRef CV3DSLAMStateCopyLoadedMapTimestamps(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB4A64((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E917E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateIsGlobalRelocalization(uint64_t a1, _BYTE *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
    return 3;
  v3 = *v2;
  if (!*(_BYTE *)(v3 + 3832))
    return 1;
  result = 0;
  *a2 = *(_BYTE *)(v3 + 3816);
  return result;
}

uint64_t CV3DSLAMStateRelocalizationSucceeded(uint64_t a1, _BYTE *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
    return 3;
  v3 = *v2;
  if (!*(_BYTE *)(v3 + 3832))
    return 1;
  result = 0;
  *a2 = *(_BYTE *)(v3 + 3817);
  return result;
}

uint64_t CV3DSLAMStateIsInitFinished(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      result = 0;
      *a2 = *(_BYTE *)(*(_QWORD *)v2 + 17);
      return result;
    }
    return 3;
  }
  return 4;
}

uint64_t CV3DSLAMStateIsPoseLocked(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  BOOL v6;
  char v7;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
    return 3;
  result = 0;
  v4 = *v2;
  v6 = *(_BYTE *)(v4 + 16) == 0;
  v5 = *(unsigned __int8 *)(v4 + 5035);
  v6 = !v6 || v5 == 0;
  v7 = !v6;
  *a2 = v7;
  return result;
}

uint64_t CV3DSLAMStateNumReinit(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      result = 0;
      *a2 = *(_DWORD *)(*(_QWORD *)v2 + 20);
      return result;
    }
    return 3;
  }
  return 4;
}

uint64_t CV3DSLAMStateGetMapKeyFrameQuality(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      result = 0;
      *a2 = *(_DWORD *)(*(_QWORD *)v2 + 768);
      return result;
    }
    return 3;
  }
  return 4;
}

uint64_t CV3DSLAMStateGetMapMergeStats(uint64_t a1, __CFArray *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  LODWORD(result) = sub_20EAB662C((uint64_t **)(a1 + 8), a2);
  if (result >= 6)
    return 1;
  else
    return result;
}

uint64_t CV3DSLAMStateGetCameraSwitchingStatistics(uint64_t a1, __CFData *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  LODWORD(result) = sub_20EAB6730((_QWORD *)(a1 + 8), a2);
  if (result >= 6)
    return 1;
  else
    return result;
}

uint64_t CV3DSLAMStateGetOldestStateCovarianceMatrices(uint64_t a1, _OWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t result;

  if (!a1)
    return 3;
  sub_20EAB4DB8((uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7);
  if (result >= 6)
    return 1;
  else
    return result;
}

uint64_t CV3DSLAMStateCopyLatestInertialState(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (!a1)
    return 3;
  LODWORD(result) = sub_20EAB51D0((_QWORD **)(a1 + 8), a2, a3, a4, a5, a6);
  if (result >= 6)
    return 1;
  else
    return result;
}

double CV3DSLAMStateCopyMCAMLux(uint64_t a1, CFTypeRef *a2)
{
  char __p[19];
  char v4;

  if (a1)
    return sub_20EAB694C((uint64_t **)(a1 + 8), a2);
  v4 = 18;
  strcpy(__p, "SLAM state is NULL");
  sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
  if (v4 < 0)
    operator delete(*(void **)__p);
  return -1.0;
}

void sub_20E918140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateGetIMUtoDepthSensorExtrinsics(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  int64x2_t v16;
  double v17;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v27;

  if (!a1)
    return 3;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    return 3;
  result = 4;
  if (a2 && a3)
  {
    v11 = *(_QWORD *)(v9 + 16);
    if (*(_BYTE *)(v11 + 16))
    {
      v12 = *(uint64_t **)v11;
      if (v12)
      {
        v13 = *v12;
        if (v13)
        {
          v14 = v13 + 4600;
          if (*(_BYTE *)(v14 + 96))
          {
            result = 0;
            v15.f64[0] = *(float64_t *)(v14 + 16);
            v15.f64[1] = *(float64_t *)(v14 + 40);
            v16 = *(int64x2_t *)(v14 + 24);
            v17 = *(double *)(v14 + 64);
            _Q4 = *(_OWORD *)(v14 + 48);
            a9.f64[0] = *(float64_t *)(v14 + 88);
            v19 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v14, v16);
            v20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, *(double *)(v14 + 72)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v14, v16), *(float64x2_t *)(v14 + 72), 1), v15, a9.f64[0]);
            _D6 = *(_QWORD *)(v14 + 80);
            __asm { FMLA            D17, D6, V4.D[1] }
            a9.f64[0] = _D17 + v17 * a9.f64[0];
            v27 = vzip2q_s64(v16, (int64x2_t)v15);
            v15.f64[1] = v19.f64[1];
            *(_OWORD *)a2 = *(_OWORD *)v14;
            *(float64x2_t *)(a2 + 16) = v15;
            *(int64x2_t *)(a2 + 32) = v27;
            *(_OWORD *)(a2 + 48) = _Q4;
            *(double *)(a2 + 64) = v17;
            *(float64x2_t *)a3 = vnegq_f64(v20);
            *(_QWORD *)(a3 + 16) = *(_OWORD *)&vnegq_f64(a9);
            return result;
          }
        }
      }
    }
    return 3;
  }
  return result;
}

uint64_t CV3DSLAMStateGetIsLatestStateStationary(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 3;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      result = 0;
      *a2 = *(_BYTE *)(*(_QWORD *)v2 + 401);
      return result;
    }
    return 3;
  }
  return 4;
}

uint64_t CV3DSLAMStateGetNumRemainingMapOptimization(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char __p[19];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      if (v4)
        return *(unsigned int *)(v4 + 4520);
    }
    v17 = 18;
    strcpy(__p, "SLAM state is NULL");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v17 = 18;
    strcpy(__p, "SLAM state is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        v14 = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E918514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateCopySessionID(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  char __p[19];
  char v5;

  if (a1)
    return sub_20EAB6830((uint64_t **)(a1 + 8), a2, a3);
  v5 = 18;
  strcpy(__p, "SLAM state is NULL");
  sub_20E8ECD2C(a3, 0x16u, (uint64_t)__p);
  if (v5 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9185F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateCopyStateID(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  char __p[19];
  char v5;

  if (a1)
    return sub_20EAB6A58((uint64_t **)(a1 + 8), a2, a3);
  v5 = 18;
  strcpy(__p, "SLAM state is NULL");
  sub_20E8ECD2C(a3, 0x16u, (uint64_t)__p);
  if (v5 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9186B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateCopyRelocalizationResult(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  char __p[19];
  char v8;

  if (a1)
    return sub_20EAB6B74((uint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
  v8 = 18;
  strcpy(__p, "SLAM state is NULL");
  sub_20E8ECD2C(a6, 0x16u, (uint64_t)__p);
  if (v8 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E918760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateCopyLatestCameraMatrix(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  __int128 v16;
  float64x2_t v17;

  if (!a1)
    return 3;
  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    return 3;
  if (!a4)
    return 4;
  v5 = *v4;
  v6 = *(_QWORD *)(v5 + 776);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 784) - v6) >> 3) <= a2)
    return 1;
  v7 = *(_QWORD *)(v6 + 24 * a2);
  if (0x84BDA12F684BDA13 * ((*(_QWORD *)(v6 + 24 * a2 + 8) - v7) >> 3) <= a3)
    return 1;
  result = 0;
  v9 = v7 + 216 * a3;
  v10 = *(_QWORD *)(v9 + 120);
  v11 = *(_QWORD *)(v9 + 136);
  v12 = *(_QWORD *)(v9 + 176);
  v13 = *(double *)(v9 + 184);
  v14 = *(double *)(v9 + 112) * v13;
  v15 = *(double *)(v9 + 128) * v13;
  v16 = *(_OWORD *)(v9 + 160);
  v17 = vmulq_n_f64(*(float64x2_t *)(v9 + 144), v13);
  *(double *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v15;
  *(_QWORD *)(a4 + 24) = v11;
  *(float64x2_t *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v16;
  *(_QWORD *)(a4 + 64) = v12;
  return result;
}

BOOL CV3DSLAMStateSignificantCameraCalibrationUpdate(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_20EAB5304((uint64_t **)(a1 + 8), a2, a3, a4);
  v12 = 18;
  strcpy(__p, "SLAM state is NULL");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_20EA67538(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9189C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetStatus(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  if (!a1)
    return 3;
  if (!a2)
    return 4;
  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
    return 4;
  v3 = *v2;
  v4 = *(unsigned __int8 *)(*v2 + 368);
  if (!*(_BYTE *)(v3 + 5035))
  {
    v8 = v4 - 3;
    if (v8 < 0xF)
    {
      *a2 = dword_2102DD4E4[(char)v8];
      return 0;
    }
    goto LABEL_12;
  }
  if (*(_BYTE *)(v3 + 16))
  {
LABEL_12:
    *a2 = 0;
    return 0;
  }
  v5 = v4 - 3;
  if (v5 > 0xE)
    v6 = 0;
  else
    v6 = dword_2102DD4E4[(char)v5];
  if (v6 <= 1)
    v6 = 1;
  *a2 = v6;
  return 0;
}

uint64_t CV3DSLAMStateGetPointCloud(uint64_t a1, __CFData *a2)
{
  _QWORD *v2;
  const __CFData *v4;
  int Length;
  const UInt8 *BytePtr;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const __CFData *v11;
  std::__shared_weak_count *v12;

  if (!a1)
    return 3;
  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 3;
  if (!a2)
    return 4;
  sub_20E95BCE4(*v2 + 552, &v11);
  v4 = v11;
  CFDataSetLength(a2, 0);
  if (v4)
  {
    Length = CFDataGetLength(v4);
    BytePtr = CFDataGetBytePtr(v4);
    CFDataAppendBytes(a2, BytePtr, Length);
  }
  v7 = v12;
  if (!v12)
    return 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return 0;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return 0;
}

void sub_20E918BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetLineCloud(uint64_t a1, __CFData *a2)
{
  _QWORD *v2;
  const __CFData *v4;
  int Length;
  const UInt8 *BytePtr;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const __CFData *v11;
  std::__shared_weak_count *v12;

  if (!a1)
    return 3;
  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 3;
  if (!a2)
    return 4;
  sub_20E95BFA0(*v2 + 632, &v11);
  v4 = v11;
  CFDataSetLength(a2, 0);
  if (v4)
  {
    Length = CFDataGetLength(v4);
    BytePtr = CFDataGetBytePtr(v4);
    CFDataAppendBytes(a2, BytePtr, Length);
  }
  v7 = v12;
  if (!v12)
    return 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return 0;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return 0;
}

void sub_20E918CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetCollaborativeMapStatistics(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  if (!a1)
    return 3;
  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    return 3;
  v5 = *v4;
  if (!*v4 || !*(_BYTE *)(v5 + 4264))
    return 3;
  v7 = &kCV3DSLAMReturnInvalidParameter;
  if (!a2 || !a3)
    return *v7;
  v8 = *(_QWORD *)(v5 + 4248);
  v9 = *(_QWORD *)(v5 + 4240);
  v10 = (v8 - v9) / 40;
  *a3 = v10;
  v11 = (char *)malloc_type_malloc(v8 - v9, 0x100004074F221ECuLL);
  *a2 = v11;
  if (!v11)
    return 2;
  if (v8 != v9)
  {
    v12 = 0;
    v13 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 4240);
    v7 = &kCV3DSLAMReturnNoError;
    do
    {
      v14 = &v11[v12];
      *(_QWORD *)v14 = *(_QWORD *)(v13 + v12);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + v12 + 8);
      *((_QWORD *)v14 + 3) = *(_QWORD *)(v13 + v12 + 24);
      v14[32] = *(_BYTE *)(v13 + v12 + 32);
      v12 += 40;
      --v10;
    }
    while (v10);
    return *v7;
  }
  return 0;
}

BOOL CV3DSLAMStateIsMappingIOPaused(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char __p[19];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      if (v4)
        return *(_BYTE *)(v4 + 4488) != 0;
    }
    v17 = 16;
    strcpy(__p, "Empty slam state");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v17 = 18;
    strcpy(__p, "SLAM state is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        v14 = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E91912C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetMappingIOMode()
{
  return 2;
}

BOOL CV3DSLAMStateIsLatestFrameAKeyframeInFrontEnd(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char __p[19];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      if (v4)
        return *(_BYTE *)(v4 + 772) != 0;
    }
    v17 = 16;
    strcpy(__p, "Empty slam state");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v17 = 18;
    strcpy(__p, "SLAM state is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        v14 = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E919440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMStateGetSmudgeInfo(uint64_t a1, _BYTE *a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, CFTypeRef *a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  _BOOL8 result;
  char v13;
  int v14;
  uint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  CFTypeRef v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  CFTypeRef v26;
  unint64_t *v27;
  CFTypeRef v28;
  unint64_t *v29;
  char *v30;
  char *v31;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v34;
  std::error_condition v35;

  if (!a1)
  {
    HIBYTE(__p[2]) = 18;
    strcpy((char *)__p, "SLAM state is NULL");
    v21 = (char *)operator new(0x70uLL);
    v31 = v21;
    strcpy(v21, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (!a6)
      goto LABEL_47;
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_20EA67538(&v35, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a6)
      CFRelease(*a6);
    *a6 = 0;
    v22 = cf;
    if (cf)
      CFRetain(cf);
    *a6 = v22;
    v23 = v34;
    if (!v34)
      goto LABEL_46;
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    goto LABEL_33;
  }
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7 || (v8 = *v7) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Empty slam state");
    v16 = (char *)operator new(0x70uLL);
    v30 = v16;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (!a6)
      goto LABEL_59;
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_20EA67538(&v35, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a6)
      CFRelease(*a6);
    *a6 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a6 = v17;
    v18 = v34;
    if (!v34)
      goto LABEL_58;
    v19 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(v8 + 5456);
  v10 = *(_QWORD *)(v8 + 5464);
  if (v9 == v10)
  {
    HIBYTE(__p[2]) = 14;
    strcpy((char *)__p, "No smudge data");
    v21 = (char *)operator new(0x70uLL);
    v31 = v21;
    strcpy(v21, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (!a6)
      goto LABEL_47;
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_20EA67538(&v35, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a6)
      CFRelease(*a6);
    *a6 = 0;
    v26 = cf;
    if (cf)
      CFRetain(cf);
    *a6 = v26;
    v23 = v34;
    if (!v34)
    {
LABEL_46:
      v21 = v31;
LABEL_47:
      operator delete(v21);
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_60;
      return 0;
    }
    v27 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v27);
    while (__stlxr(v25 - 1, v27));
LABEL_33:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_46;
  }
  if (!a2 || !a3 || !a4 || !a5)
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBA80;
    strcpy((char *)__p[0], "Smudge parameters not initialized");
    v16 = (char *)operator new(0x70uLL);
    v30 = v16;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (!a6)
      goto LABEL_59;
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_20EA67538(&v35, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a6)
      CFRelease(*a6);
    *a6 = 0;
    v28 = cf;
    if (cf)
      CFRetain(cf);
    *a6 = v28;
    v18 = v34;
    if (!v34)
    {
LABEL_58:
      v16 = v30;
LABEL_59:
      operator delete(v16);
      if (SHIBYTE(__p[2]) < 0)
      {
LABEL_60:
        operator delete(__p[0]);
        return 0;
      }
      return 0;
    }
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(v29);
    while (__stlxr(v20 - 1, v29));
LABEL_23:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_58;
  }
  for (i = v9 + 32; i != v10; i += 32)
  {
    if (*(double *)(v9 + 16) < *(double *)(i + 16))
      v9 = i;
  }
  result = v9 != v10;
  if (v9 == v10)
  {
    v13 = 0;
    v14 = 0;
    *a4 = 0;
    v15 = 0;
  }
  else
  {
    v13 = *(_BYTE *)(v9 + 12);
    v14 = *(_DWORD *)(v9 + 8);
    *a4 = *(_QWORD *)(v9 + 16);
    v15 = *(_QWORD *)(v9 + 24);
  }
  *a2 = v13;
  *a3 = v14;
  *a5 = v15;
  return result;
}

void sub_20E919984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateCopyRelocalizationIsFromML(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFTypeRef v16;
  unint64_t *v17;
  CFTypeRef v18;
  unint64_t *p_shared_owners;
  CFTypeRef v20;
  unint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v25;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v30[0] = &off_24C9B0558;
  v31 = v30;
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 40) && *(_QWORD *)(v5 + 24))
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
          v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 24);
          v8 = *(_QWORD *)(v7 + 152);
          v9 = *(_QWORD *)(v7 + 160);
          while (v8 != v9)
          {
            if (*(_BYTE *)(v8 + 9))
            {
              *(_QWORD *)__p = *(_QWORD *)v8;
              if (!v31)
                sub_20E86D37C();
              v10 = (const void *)(*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*v31 + 48))(v31, __p, v8 + 8);
              CFArrayAppendValue(Mutable, v10);
              CFRelease(v10);
            }
            v8 += 176;
          }
          goto LABEL_53;
        }
        __p[23] = 12;
        strcpy(__p, "No map debug");
        v11 = (char *)operator new(0x70uLL);
        v25 = v11;
        strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
        if (a2)
        {
          *(_QWORD *)&v29.__val_ = 22;
          v29.__cat_ = std::generic_category();
          sub_20EA67538(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
          if (*a2)
            CFRelease(*a2);
          *a2 = 0;
          v18 = cf;
          if (cf)
            CFRetain(cf);
          *a2 = v18;
          v13 = v28;
          if (!v28)
            goto LABEL_49;
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
LABEL_47:
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
LABEL_49:
          v11 = v25;
        }
      }
      else
      {
        *(_QWORD *)__p = operator new(0x40uLL);
        *(_OWORD *)&__p[8] = xmmword_2102D7440;
        strcpy(*(char **)__p, "Empty debug metadata, did you enable the map debug object");
        v11 = (char *)operator new(0x70uLL);
        v25 = v11;
        strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
        if (a2)
        {
          *(_QWORD *)&v29.__val_ = 22;
          v29.__cat_ = std::generic_category();
          sub_20EA67538(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
          if (*a2)
            CFRelease(*a2);
          *a2 = 0;
          v20 = cf;
          if (cf)
            CFRetain(cf);
          *a2 = v20;
          v13 = v28;
          if (!v28)
            goto LABEL_49;
          v21 = (unint64_t *)&v28->__shared_owners_;
          do
            v15 = __ldaxr(v21);
          while (__stlxr(v15 - 1, v21));
          goto LABEL_47;
        }
      }
    }
    else
    {
      __p[23] = 15;
      strcpy(__p, "Empty slam sate");
      v11 = (char *)operator new(0x70uLL);
      v25 = v11;
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
      if (a2)
      {
        *(_QWORD *)&v29.__val_ = 22;
        v29.__cat_ = std::generic_category();
        sub_20EA67538(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v16 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v16;
        v13 = v28;
        if (!v28)
          goto LABEL_49;
        v17 = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(v17);
        while (__stlxr(v15 - 1, v17));
        goto LABEL_47;
      }
    }
  }
  else
  {
    __p[23] = 18;
    strcpy(__p, "SLAM state is NULL");
    v11 = (char *)operator new(0x70uLL);
    v25 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_20EA67538(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (!v28)
        goto LABEL_49;
      v14 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_47;
    }
  }
  operator delete(v11);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  Mutable = 0;
LABEL_53:
  v22 = v31;
  if (v31 == v30)
  {
    v23 = 4;
    v22 = v30;
    goto LABEL_57;
  }
  if (v31)
  {
    v23 = 5;
LABEL_57:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  return Mutable;
}

void sub_20E919F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;

  operator delete(v19);
  if (a18 < 0)
    operator delete(__p);
  v22 = *(_QWORD **)(v20 - 48);
  if (v22 == (_QWORD *)(v20 - 72))
  {
    v23 = 4;
    v22 = (_QWORD *)(v20 - 72);
  }
  else
  {
    if (!v22)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_8:
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateCopyRelocalizationSubmapIds(uint64_t a1, CFTypeRef *a2)
{
  __CFArray *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C9B05E8;
  v7 = v6;
  v2 = sub_20E91A078(a1, (uint64_t)v6, a2);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_20E91A040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *sub_20E91A078(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  __CFArray *Mutable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef v19;
  unint64_t *v20;
  CFTypeRef v21;
  unint64_t *p_shared_owners;
  CFTypeRef v23;
  unint64_t *v24;
  char *v26;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 40) && *(_QWORD *)(v6 + 24))
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 24);
          v10 = *(_QWORD *)(v9 + 152);
          v11 = *(_QWORD *)(v9 + 160);
          while (v10 != v11)
          {
            if (*(_BYTE *)(v10 + 9))
            {
              __p[0] = *(void **)v10;
              v13 = *(_QWORD *)(a2 + 24);
              if (!v13)
                sub_20E86D37C();
              v12 = (const void *)(*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v13 + 48))(v13, __p, v10 + 8);
              CFArrayAppendValue(Mutable, v12);
              CFRelease(v12);
            }
            v10 += 176;
          }
          return Mutable;
        }
        HIBYTE(__p[2]) = 12;
        strcpy((char *)__p, "No map debug");
        v14 = (char *)operator new(0x70uLL);
        v26 = v14;
        strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
        if (a3)
        {
          *(_QWORD *)&v30.__val_ = 22;
          v30.__cat_ = std::generic_category();
          sub_20EA67538(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
          if (*a3)
            CFRelease(*a3);
          *a3 = 0;
          v21 = cf;
          if (cf)
            CFRetain(cf);
          *a3 = v21;
          v16 = v29;
          if (!v29)
            goto LABEL_50;
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
LABEL_48:
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
LABEL_50:
          v14 = v26;
        }
      }
      else
      {
        __p[0] = operator new(0x40uLL);
        *(_OWORD *)&__p[1] = xmmword_2102D7440;
        strcpy((char *)__p[0], "Empty debug metadata, did you enable the map debug object");
        v14 = (char *)operator new(0x70uLL);
        v26 = v14;
        strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
        if (a3)
        {
          *(_QWORD *)&v30.__val_ = 22;
          v30.__cat_ = std::generic_category();
          sub_20EA67538(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
          if (*a3)
            CFRelease(*a3);
          *a3 = 0;
          v23 = cf;
          if (cf)
            CFRetain(cf);
          *a3 = v23;
          v16 = v29;
          if (!v29)
            goto LABEL_50;
          v24 = (unint64_t *)&v29->__shared_owners_;
          do
            v18 = __ldaxr(v24);
          while (__stlxr(v18 - 1, v24));
          goto LABEL_48;
        }
      }
    }
    else
    {
      HIBYTE(__p[2]) = 15;
      strcpy((char *)__p, "Empty slam sate");
      v14 = (char *)operator new(0x70uLL);
      v26 = v14;
      strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
      if (a3)
      {
        *(_QWORD *)&v30.__val_ = 22;
        v30.__cat_ = std::generic_category();
        sub_20EA67538(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v19 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v19;
        v16 = v29;
        if (!v29)
          goto LABEL_50;
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v18 = __ldaxr(v20);
        while (__stlxr(v18 - 1, v20));
        goto LABEL_48;
      }
    }
  }
  else
  {
    HIBYTE(__p[2]) = 18;
    strcpy((char *)__p, "SLAM state is NULL");
    v14 = (char *)operator new(0x70uLL);
    v26 = v14;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v15;
      v16 = v29;
      if (!v29)
        goto LABEL_50;
      v17 = (unint64_t *)&v29->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      goto LABEL_48;
    }
  }
  operator delete(v14);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E91A52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateCopyRelocalizationTimestamps(uint64_t a1, CFTypeRef *a2)
{
  __CFArray *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C9B0678;
  v7 = v6;
  v2 = sub_20E91A078(a1, (uint64_t)v6, a2);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_20E91A62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *CV3DSLAMStateCopyRelocalizationCameraIds(uint64_t a1, CFTypeRef *a2)
{
  __CFArray *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C9B06F8;
  v7 = v6;
  v2 = sub_20E91A078(a1, (uint64_t)v6, a2);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_20E91A704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *CV3DSLAMStateCopyRelocalizationStreamIds(uint64_t a1, CFTypeRef *a2)
{
  __CFArray *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C9B0778;
  v7 = v6;
  v2 = sub_20E91A078(a1, (uint64_t)v6, a2);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_20E91A7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateRelocalizationMapSize(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      if (*(_BYTE *)(v4 + 3832))
        return *(unsigned int *)(v4 + 3820);
      __p[0] = operator new(0x19uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DAFD0;
      strcpy((char *)__p[0], "No relocalization event");
      v16 = (char *)operator new(0x70uLL);
      strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
      if (a2)
      {
        *(_QWORD *)&v24.__val_ = 22;
        v24.__cat_ = std::generic_category();
        sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v17 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v17;
        v18 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      operator delete(v16);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return 0;
    }
    else
    {
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "Empty slam state");
      v11 = (char *)operator new(0x70uLL);
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
      if (a2)
      {
        *(_QWORD *)&v24.__val_ = 22;
        v24.__cat_ = std::generic_category();
        sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v13 = v23;
        if (v23)
        {
          v14 = (unint64_t *)&v23->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      operator delete(v11);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return 0;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 18;
    strcpy((char *)__p, "SLAM state is NULL");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v23;
      if (v23)
      {
        v9 = (unint64_t *)&v23->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E91ABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateRelocalizationMLMapSize(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      if (*(_BYTE *)(v4 + 3832))
        return *(unsigned int *)(v4 + 3824);
      __p[0] = operator new(0x19uLL);
      *(_OWORD *)&__p[1] = xmmword_2102DAFD0;
      strcpy((char *)__p[0], "No relocalization event");
      v16 = (char *)operator new(0x70uLL);
      strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
      if (a2)
      {
        *(_QWORD *)&v24.__val_ = 22;
        v24.__cat_ = std::generic_category();
        sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v17 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v17;
        v18 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      operator delete(v16);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return 0;
    }
    else
    {
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "Empty slam state");
      v11 = (char *)operator new(0x70uLL);
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
      if (a2)
      {
        *(_QWORD *)&v24.__val_ = 22;
        v24.__cat_ = std::generic_category();
        sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v13 = v23;
        if (v23)
        {
          v14 = (unint64_t *)&v23->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      operator delete(v11);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return 0;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 18;
    strcpy((char *)__p, "SLAM state is NULL");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_20EA67538(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v23;
      if (v23)
      {
        v9 = (unint64_t *)&v23->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_20E91B038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateCopyCurrentTrackingCameraIds(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB7E28((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91B210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFMutableArrayRef CV3DSLAMStateCopyCameraFrameRates(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB824C(a1 + 8, a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91B3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateGetDetectedFeatureRatios(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB84C8((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91B590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateGetCameraTrackRatiosPerCamera(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB8A88((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91B750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *CV3DSLAMStateGetCameraAllocationPerCamera(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB8A88((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91B910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMStateShouldUseVisualSLAM(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB78BC((unsigned __int8 ***)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91BAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMStateIsGeneralVisualSLAMEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB7A88((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91BC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMStateIsPauseFinished(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB7C58((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91BE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMStateIs3DOF(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char __p[19];
  char v6;

  if (a1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    if (v2)
    {
      v3 = *v2;
      if (v3)
        return *(_BYTE *)(v3 + 216) != 0;
    }
    v6 = 16;
    strcpy(__p, "Empty slam state");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if ((v6 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v6 = 18;
    strcpy(__p, "SLAM state is NULL");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if ((v6 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E91BF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DSLAMStateIs3DOFTrackingInitialized(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char __p[19];
  char v6;

  if (a1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    if (v2)
    {
      v3 = *v2;
      if (v3)
        return *(_BYTE *)(v3 + 352) != 0;
    }
    v6 = 16;
    strcpy(__p, "Empty slam state");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if ((v6 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v6 = 18;
    strcpy(__p, "SLAM state is NULL");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if ((v6 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E91C094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DSLAMStateIs3DOFPositionReset(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char __p[19];
  char v6;

  if (a1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    if (v2)
    {
      v3 = *v2;
      if (v3)
        return *(_BYTE *)(v3 + 362) != 0;
    }
    v6 = 16;
    strcpy(__p, "Empty slam state");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if ((v6 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v6 = 18;
    strcpy(__p, "SLAM state is NULL");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if ((v6 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_20E91C1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFTypeRef CV3DSLAMStateCreateDictionaryFromState(uint64_t a1)
{
  uint64_t *v1;
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFTypeRef cf;
  std::__shared_weak_count *v8;

  if (!a1)
    return 0;
  v1 = *(uint64_t **)(a1 + 8);
  if (!v1)
    return 0;
  sub_20E95C27C(*v1, &cf);
  CFRetain(cf);
  v2 = cf;
  v3 = v8;
  if (!v8)
    return v2;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v2;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v2;
}

void sub_20E91C270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetSLAMMode(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char __p[19];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v3 = sub_20EAB6D0C((uint64_t **)(a1 + 8), a2);
    if (v3 >= 3)
      v4 = 0;
    else
      v4 = v3;
    if (v3 >= 3
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp", 948, (uint64_t)"capi_return.has_value()", 23, (uint64_t)"Failed to get VisualSLAMMode Mapping", 36, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    return v4;
  }
  else
  {
    v13 = 18;
    strcpy(__p, "SLAM state is NULL");
    v6 = (char *)operator new(0x70uLL);
    v11 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = v11;
    }
    operator delete(v6);
    if (v13 < 0)
      operator delete(*(void **)__p);
    return 2;
  }
}

void sub_20E91C438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetMovablePlatformType(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char __p[19];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v3 = sub_20EAB6F28((uint64_t **)(a1 + 8), a2);
    if (v3 >= 7)
      v4 = 0;
    else
      v4 = v3;
    if (v3 >= 7
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp", 962, (uint64_t)"capi_return.has_value()", 23, (uint64_t)"Failed to get platform type", 27, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    return v4;
  }
  else
  {
    v13 = 18;
    strcpy(__p, "SLAM state is NULL");
    v6 = (char *)operator new(0x70uLL);
    v11 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = v11;
    }
    operator delete(v6);
    if (v13 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E91C628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetVisualSLAMState(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char __p[19];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v3 = sub_20EAB70EC((uint64_t **)(a1 + 8), a2);
    if (v3 >= 4)
      v4 = 0;
    else
      v4 = v3;
    if (v3 >= 4
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp", 979, (uint64_t)"capi_return.has_value()", 23, (uint64_t)"Failed to get VisualSLAMState Mapping", 37, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    return v4;
  }
  else
  {
    v13 = 18;
    strcpy(__p, "SLAM state is NULL");
    v6 = (char *)operator new(0x70uLL);
    v11 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = v11;
    }
    operator delete(v6);
    if (v13 < 0)
      operator delete(*(void **)__p);
    return 3;
  }
}

void sub_20E91C81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateGetNumberOfVOToVIOStateTransitions(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB73E8((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0xFFFFFFFFLL;
}

void sub_20E91C9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMStateGetInertialInformationValidity(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_20EAB76E0((uint64_t **)(a1 + 8), a2);
  v11 = 18;
  strcpy(__p, "SLAM state is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMState.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91CB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E91CBDC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E91CBF0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B0558;
  return result;
}

void sub_20E91CC14(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B0558;
}

uint64_t sub_20E91CC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_DWORD *)(a3 + 4) == 2)
    v3 = MEMORY[0x24BDBD270];
  else
    v3 = MEMORY[0x24BDBD268];
  return *(_QWORD *)v3;
}

uint64_t sub_20E91CC50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39CV3DSLAMStateCopyRelocalizationIsFromMLE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39CV3DSLAMStateCopyRelocalizationIsFromMLE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39CV3DSLAMStateCopyRelocalizationIsFromMLE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39CV3DSLAMStateCopyRelocalizationIsFromMLE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E91CCBC()
{
  return &unk_24C9B05C8;
}

void sub_20E91CCCC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E91CCE0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B05E8;
  return result;
}

void sub_20E91CD04(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B05E8;
}

CFTypeRef sub_20E91CD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CFTypeRef cf;
  std::__shared_weak_count *v9;

  sub_20EA5E070((uint64_t *)(a3 + 32), (CFNumberRef *)&cf);
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v4 = v9;
  if (!v9)
    return v3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v3;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

void sub_20E91CDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E91CDEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40CV3DSLAMStateCopyRelocalizationSubmapIdsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40CV3DSLAMStateCopyRelocalizationSubmapIdsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40CV3DSLAMStateCopyRelocalizationSubmapIdsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40CV3DSLAMStateCopyRelocalizationSubmapIdsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E91CE58()
{
  return &unk_24C9B0658;
}

void sub_20E91CE68()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E91CE7C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B0678;
  return result;
}

void sub_20E91CEA0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B0678;
}

CFTypeRef sub_20E91CEB8(uint64_t a1, uint64_t *a2)
{
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFTypeRef cf;
  std::__shared_weak_count *v8;
  uint64_t valuePtr;

  valuePtr = *a2;
  sub_20EA5E260(&valuePtr, (CFNumberRef *)&cf);
  v2 = cf;
  if (cf)
    CFRetain(cf);
  v3 = v8;
  if (!v8)
    return v2;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v2;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v2;
}

void sub_20E91CF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E91CF90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z41CV3DSLAMStateCopyRelocalizationTimestampsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z41CV3DSLAMStateCopyRelocalizationTimestampsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41CV3DSLAMStateCopyRelocalizationTimestampsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41CV3DSLAMStateCopyRelocalizationTimestampsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E91CFFC()
{
  return &unk_24C9B06D8;
}

void sub_20E91D00C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E91D020()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B06F8;
  return result;
}

void sub_20E91D044(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B06F8;
}

CFTypeRef sub_20E91D05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CFTypeRef cf;
  std::__shared_weak_count *v9;
  unint64_t v10;

  v10 = ((unint64_t)*(unsigned int *)(a3 + 24) >> 16) | ((unint64_t)(unsigned __int16)*(_DWORD *)(a3 + 24) << 32);
  sub_20EA5DE68((unsigned int *)&v10, (CFNumberRef *)&cf);
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v4 = v9;
  if (!v9)
    return v3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v3;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

void sub_20E91D0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E91D140(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40CV3DSLAMStateCopyRelocalizationCameraIdsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40CV3DSLAMStateCopyRelocalizationCameraIdsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40CV3DSLAMStateCopyRelocalizationCameraIdsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40CV3DSLAMStateCopyRelocalizationCameraIdsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E91D1AC()
{
  return &unk_24C9B0758;
}

void sub_20E91D1BC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E91D1D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B0778;
  return result;
}

void sub_20E91D1F4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B0778;
}

CFTypeRef sub_20E91D20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CFTypeRef cf;
  std::__shared_weak_count *v9;
  unint64_t v10;

  v10 = ((unint64_t)*(unsigned int *)(a3 + 24) >> 16) | ((unint64_t)(unsigned __int16)*(_DWORD *)(a3 + 24) << 32);
  sub_20EA5DE68((unsigned int *)&v10 + 1, (CFNumberRef *)&cf);
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v4 = v9;
  if (!v9)
    return v3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v3;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

void sub_20E91D2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E91D2F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40CV3DSLAMStateCopyRelocalizationStreamIdsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40CV3DSLAMStateCopyRelocalizationStreamIdsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40CV3DSLAMStateCopyRelocalizationStreamIdsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40CV3DSLAMStateCopyRelocalizationStreamIdsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E91D360()
{
  return &unk_24C9B07D8;
}

double *CV3DSLAMStateSnapshotCreateWithTimestamp(double a1)
{
  double *v2;
  double *v3;

  v2 = (double *)operator new(0x4D0uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (v2)
  {
    bzero(v2, 0x4D0uLL);
    *((_DWORD *)v3 + 307) = 1;
    *(_QWORD *)v3 = off_24C9C3BA8;
    v3[150] = a1;
  }
  return v3;
}

uint64_t CV3DSLAMStateSnapshotSetSLAMStateTimestamp(uint64_t a1, double a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;

  if (!a1)
    return 3;
  sub_20E91D5BC((uint64_t)&v23, a1);
  v4 = v23;
  *(double *)(v23 + 32) = a2;
  v5 = (char *)operator new(0x50uLL);
  v6 = v5;
  v7 = v26;
  *(_OWORD *)(v5 + 40) = v25;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C9B0848;
  *((_QWORD *)v5 + 3) = v4;
  v8 = v5 + 24;
  *((_QWORD *)v5 + 4) = v24;
  v23 = 0;
  v24 = 0;
  v25 = 0uLL;
  *(_OWORD *)(v5 + 56) = v7;
  v26 = 0uLL;
  v5[72] = v27;
  v9 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v9 != -1)
  {
    if (!(_DWORD)v9)
    {
      v10 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v5;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      goto LABEL_12;
    }
    ((void (*)(char *, uint64_t))off_24C9B0888[v9])(&v28, a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 1088) = 0;
LABEL_12:
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return 0;
}

void sub_20E91D5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

void sub_20E91D5BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  char v29;

  v4 = (uint64_t *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 1088);
  if (v5 != 1)
  {
    if (v5)
      goto LABEL_32;
    v6 = *v4;
    if (*v4)
      goto LABEL_22;
  }
  v7 = (std::__shared_weak_count *)operator new(0x1580uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B07F8;
  bzero(&v7[1], 0x1568uLL);
  sub_20E91E37C((uint64_t)&v7[1]);
  v28 = v7;
  v9 = (char *)operator new(0x50uLL);
  v10 = v9;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C9B0848;
  *((_QWORD *)v9 + 3) = v7 + 1;
  v11 = v9 + 24;
  *((_QWORD *)v9 + 4) = v7;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v9[72] = 0;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  v13 = *(unsigned int *)(a2 + 1088);
  if ((_DWORD)v13 == -1)
    goto LABEL_14;
  if ((_DWORD)v13)
  {
    ((void (*)(char *, uint64_t *))off_24C9B0888[v13])(&v29, v4);
LABEL_14:
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 1088) = 0;
    goto LABEL_15;
  }
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v9;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_15:
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (*(_DWORD *)(a2 + 1088))
LABEL_32:
    sub_20E877AB8();
  v6 = *v4;
LABEL_22:
  v19 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v6;
  *(_QWORD *)(a1 + 8) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(a1 + 24) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(a1 + 40) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v6 + 48);
}

void sub_20E91D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

void sub_20E91D858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

void sub_20E91D878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E91D88C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t CV3DSLAMStateSnapshotSetMapParameters(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  __int128 v30;
  char v31;
  char v32;

  if (!a1)
    return 3;
  sub_20E91D5BC((uint64_t)&v27, a1);
  v8 = v27;
  *(_BYTE *)(v27 + 400) = a4;
  *(_DWORD *)(v8 + 4120) = a2;
  *(_DWORD *)(v8 + 768) = a3;
  v9 = (char *)operator new(0x50uLL);
  v10 = v9;
  v11 = v30;
  *(_OWORD *)(v9 + 40) = v29;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C9B0848;
  *((_QWORD *)v9 + 3) = v8;
  v12 = v9 + 24;
  *((_QWORD *)v9 + 4) = v28;
  v27 = 0;
  v28 = 0;
  v29 = 0uLL;
  *(_OWORD *)(v9 + 56) = v11;
  v30 = 0uLL;
  v9[72] = v31;
  v13 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v13 != -1)
  {
    if (!(_DWORD)v13)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = v9;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      goto LABEL_12;
    }
    ((void (*)(char *, uint64_t))off_24C9B0888[v13])(&v32, a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 1088) = 0;
LABEL_12:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v28;
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return 0;
}

void sub_20E91DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateSnapshotSetRelocalizationParameters(uint64_t a1, char a2, char a3, double a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  __int128 v30;
  char v31;
  char v32;

  if (!a1)
    return 3;
  sub_20E91D5BC((uint64_t)&v27, a1);
  v8 = v27;
  if (!*(_BYTE *)(v27 + 3832))
  {
    *(_QWORD *)(v27 + 3808) = 0;
    *(_QWORD *)(v8 + 3816) = 0;
    *(_QWORD *)(v8 + 3824) = 0;
    *(_BYTE *)(v8 + 3832) = 1;
  }
  *(_BYTE *)(v8 + 3816) = a2;
  *(_BYTE *)(v8 + 3817) = a3;
  *(double *)(v8 + 3808) = a4;
  v9 = (char *)operator new(0x50uLL);
  v10 = v9;
  v11 = v30;
  *(_OWORD *)(v9 + 40) = v29;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C9B0848;
  *((_QWORD *)v9 + 3) = v8;
  v12 = v9 + 24;
  *((_QWORD *)v9 + 4) = v28;
  v27 = 0;
  v28 = 0;
  v29 = 0uLL;
  *(_OWORD *)(v9 + 56) = v11;
  v30 = 0uLL;
  v9[72] = v31;
  v13 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v13 != -1)
  {
    if (!(_DWORD)v13)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = v9;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      goto LABEL_14;
    }
    ((void (*)(char *, uint64_t))off_24C9B0888[v13])(&v32, a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 1088) = 0;
LABEL_14:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v28;
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return 0;
}

void sub_20E91DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateSnapshotSetTrackingState(uint64_t a1, int a2)
{
  char v4;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  char v28;
  char v29;

  if (!a1)
    return 3;
  sub_20E91D5BC((uint64_t)&v24, a1);
  if ((a2 - 1) > 0xD)
    v4 = 2;
  else
    v4 = byte_2102DD635[a2 - 1];
  v6 = v24;
  *(_BYTE *)(v24 + 368) = v4;
  v7 = (char *)operator new(0x50uLL);
  v8 = v7;
  v9 = v27;
  *(_OWORD *)(v7 + 40) = v26;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_24C9B0848;
  *((_QWORD *)v7 + 3) = v6;
  v10 = v7 + 24;
  *((_QWORD *)v7 + 4) = v25;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  *(_OWORD *)(v7 + 56) = v9;
  v27 = 0uLL;
  v7[72] = v28;
  v11 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v11 != -1)
  {
    if (!(_DWORD)v11)
    {
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v7;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      goto LABEL_15;
    }
    ((void (*)(char *, uint64_t))off_24C9B0888[v11])(&v29, a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 1088) = 0;
LABEL_15:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v25;
  if (!v25)
    return 0;
  v22 = (unint64_t *)&v25->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return 0;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return 0;
}

void sub_20E91DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateSnapshotSetCameraToIMUPose(uint64_t a1, unsigned int a2, int a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  char v41;
  char v42;

  if (!a1)
    return 3;
  result = 5;
  if (a4 && a5)
  {
    sub_20E91D5BC((uint64_t)&v37, a1);
    v11 = v37;
    v12 = *(_QWORD *)(v37 + 776);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v37 + 784) - v12) >> 3);
    v14 = a2 + 1;
    if (v14 > v13)
    {
      sub_20E91ED28(v37 + 776, v14 - v13);
      v12 = *(_QWORD *)(v11 + 776);
    }
    v15 = (void **)(v12 + 24 * a2);
    v16 = (char *)*v15;
    v17 = 0x84BDA12F684BDA13 * (((_BYTE *)v15[1] - (_BYTE *)*v15) >> 3);
    v18 = (a3 + 1);
    if (v18 > v17)
    {
      sub_20E91EF14(v15, v18 - v17);
      v11 = v37;
      v16 = *(char **)(*(_QWORD *)(v37 + 776) + 24 * a2);
    }
    v19 = &v16[216 * a3];
    *(_QWORD *)v19 = *a4;
    *((_QWORD *)v19 + 1) = a4[1];
    *((_QWORD *)v19 + 2) = a4[2];
    *((_QWORD *)v19 + 3) = a4[3];
    *((_QWORD *)v19 + 4) = a4[4];
    *((_QWORD *)v19 + 5) = a4[5];
    *((_QWORD *)v19 + 6) = a4[6];
    *((_QWORD *)v19 + 7) = a4[7];
    *((_QWORD *)v19 + 8) = a4[8];
    *((_QWORD *)v19 + 9) = *a5;
    *((_QWORD *)v19 + 10) = a5[1];
    *((_QWORD *)v19 + 11) = a5[2];
    v20 = (char *)operator new(0x50uLL);
    v21 = v20;
    v22 = v40;
    *(_OWORD *)(v20 + 40) = v39;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_24C9B0848;
    *((_QWORD *)v20 + 3) = v11;
    v23 = v20 + 24;
    *((_QWORD *)v20 + 4) = v38;
    v37 = 0;
    v38 = 0;
    v39 = 0uLL;
    *(_OWORD *)(v20 + 56) = v22;
    v40 = 0uLL;
    v20[72] = v41;
    v24 = *(unsigned int *)(a1 + 1088);
    if ((_DWORD)v24 != -1)
    {
      if (!(_DWORD)v24)
      {
        v25 = *(std::__shared_weak_count **)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v23;
        *(_QWORD *)(a1 + 16) = v20;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        goto LABEL_18;
      }
      ((void (*)(char *, uint64_t))off_24C9B0888[v24])(&v42, a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = v21;
    *(_DWORD *)(a1 + 1088) = 0;
LABEL_18:
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v38;
    if (v38)
    {
      v35 = (unint64_t *)&v38->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    return 0;
  }
  return result;
}

void sub_20E91E260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

void sub_20E91E274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E91D88C(&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateSnapshotSetPose(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  if (!a1)
    return 3;
  v3 = 5;
  if (a2 && a3)
  {
    if (!*(_BYTE *)(a1 + 1192))
    {
      *(_OWORD *)(a1 + 1160) = 0u;
      *(_OWORD *)(a1 + 1176) = 0u;
      *(_OWORD *)(a1 + 1128) = 0u;
      *(_OWORD *)(a1 + 1144) = 0u;
      *(_OWORD *)(a1 + 1096) = 0u;
      *(_OWORD *)(a1 + 1112) = 0u;
      *(_BYTE *)(a1 + 1192) = 1;
    }
    v3 = 0;
    *(_QWORD *)(a1 + 1096) = *a2;
    *(_QWORD *)(a1 + 1104) = a2[1];
    *(_QWORD *)(a1 + 1112) = a2[2];
    *(_QWORD *)(a1 + 1120) = a2[3];
    *(_QWORD *)(a1 + 1128) = a2[4];
    *(_QWORD *)(a1 + 1136) = a2[5];
    *(_QWORD *)(a1 + 1144) = a2[6];
    *(_QWORD *)(a1 + 1152) = a2[7];
    *(_QWORD *)(a1 + 1160) = a2[8];
    *(_QWORD *)(a1 + 1168) = *a3;
    *(_QWORD *)(a1 + 1176) = a3[1];
    *(_QWORD *)(a1 + 1184) = a3[2];
  }
  return v3;
}

void sub_20E91E330(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B07F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E91E340(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B07F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E91E370(uint64_t a1)
{
  return sub_20E91EB44((_QWORD *)(a1 + 24));
}

double sub_20E91E37C(uint64_t a1)
{
  double result;
  int64x2_t v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  result = 1.0;
  *(_OWORD *)(a1 + 296) = unk_2102DD5C0;
  *(_OWORD *)(a1 + 248) = xmmword_2102DD590;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a1 + 224) = 0;
  *(int64x2_t *)(a1 + 5152) = v2;
  *(int64x2_t *)(a1 + 5168) = v2;
  *(int64x2_t *)(a1 + 5184) = v2;
  *(_OWORD *)(a1 + 5200) = xmmword_2102DD520;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 5216) = _Q2;
  *(_OWORD *)(a1 + 5264) = _Q2;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_QWORD *)(a1 + 312) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 362) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_BYTE *)(a1 + 368) = 2;
  *(_WORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_BYTE *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 772) = 0;
  *(_BYTE *)(a1 + 2776) = 0;
  *(_BYTE *)(a1 + 2784) = 0;
  *(_BYTE *)(a1 + 3680) = 0;
  *(_BYTE *)(a1 + 3688) = 0;
  *(_BYTE *)(a1 + 3704) = 0;
  *(_WORD *)(a1 + 3712) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 3720) = -1;
  *(_QWORD *)(a1 + 3728) = -1;
  *(_DWORD *)(a1 + 3768) = 1065353216;
  *(_DWORD *)(a1 + 3776) = 0;
  *(_BYTE *)(a1 + 3780) = 1;
  *(_DWORD *)(a1 + 3912) = -1;
  *(_DWORD *)(a1 + 3936) = -1;
  *(_DWORD *)(a1 + 3960) = -1;
  *(_DWORD *)(a1 + 3984) = -1;
  *(_DWORD *)(a1 + 4008) = -1;
  *(_DWORD *)(a1 + 4032) = -1;
  *(_DWORD *)(a1 + 4056) = -1;
  *(_DWORD *)(a1 + 4080) = -1;
  *(_DWORD *)(a1 + 5032) = 65792;
  *(_QWORD *)(a1 + 3784) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 3792) = 0;
  *(_BYTE *)(a1 + 3796) = 0;
  *(_BYTE *)(a1 + 3800) = 0;
  *(_BYTE *)(a1 + 3804) = 0;
  *(_BYTE *)(a1 + 3808) = 0;
  *(_BYTE *)(a1 + 3832) = 0;
  *(_QWORD *)(a1 + 5040) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 4104) = 0;
  *(_BYTE *)(a1 + 3872) = 0;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_QWORD *)(a1 + 3920) = 0;
  *(_BYTE *)(a1 + 3928) = 0;
  *(_QWORD *)(a1 + 3944) = 0;
  *(_BYTE *)(a1 + 3952) = 0;
  *(_QWORD *)(a1 + 3968) = 0;
  *(_BYTE *)(a1 + 3976) = 0;
  *(_QWORD *)(a1 + 3992) = 0;
  *(_BYTE *)(a1 + 4000) = 0;
  *(_QWORD *)(a1 + 4016) = 0;
  *(_BYTE *)(a1 + 4024) = 0;
  *(_QWORD *)(a1 + 4040) = 0;
  *(_BYTE *)(a1 + 4048) = 0;
  *(_QWORD *)(a1 + 4064) = 0;
  *(_BYTE *)(a1 + 4072) = 0;
  *(_QWORD *)(a1 + 4088) = 0;
  *(_WORD *)(a1 + 4112) = 0;
  *(_QWORD *)(a1 + 5144) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 5256) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_OWORD *)(a1 + 5328) = 0u;
  *(_QWORD *)(a1 + 5304) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5336) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5368) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_QWORD *)(a1 + 5376) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5408) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5440) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 4488) = 0;
  *(_OWORD *)(a1 + 4448) = 0u;
  *(_OWORD *)(a1 + 4432) = 0u;
  *(_OWORD *)(a1 + 4416) = 0u;
  *(_OWORD *)(a1 + 4400) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4288) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_DWORD *)(a1 + 4520) = 0;
  *(_QWORD *)(a1 + 4512) = 0;
  *(_OWORD *)(a1 + 4496) = 0u;
  *(_QWORD *)(a1 + 4544) = 0;
  *(_OWORD *)(a1 + 4528) = 0u;
  *(_WORD *)(a1 + 5048) = 1;
  *(_WORD *)(a1 + 5104) = 0;
  *(_QWORD *)(a1 + 5248) = 0;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_OWORD *)(a1 + 5280) = 0u;
  *(_OWORD *)(a1 + 5312) = 0u;
  *(_OWORD *)(a1 + 5344) = 0u;
  *(_QWORD *)(a1 + 5360) = 0;
  *(_QWORD *)(a1 + 5432) = 0;
  *(_QWORD *)(a1 + 5448) = -1;
  *(_QWORD *)(a1 + 5472) = 0;
  *(_OWORD *)(a1 + 5456) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_2102DD5B0;
  *(_OWORD *)(a1 + 264) = unk_2102DD5A0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_BYTE *)(a1 + 4096) = 0;
  *(_BYTE *)(a1 + 4114) = 0;
  *(_BYTE *)(a1 + 4264) = 0;
  *(_BYTE *)(a1 + 4480) = 0;
  *(_BYTE *)(a1 + 5024) = 0;
  *(_OWORD *)(a1 + 4161) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_BYTE *)(a1 + 4464) = 0;
  *(_BYTE *)(a1 + 4552) = 0;
  *(_BYTE *)(a1 + 5036) = 1;
  *(_BYTE *)(a1 + 5056) = 0;
  *(_BYTE *)(a1 + 5096) = 0;
  *(_BYTE *)(a1 + 5112) = 0;
  *(_BYTE *)(a1 + 5120) = 0;
  *(_BYTE *)(a1 + 5128) = 0;
  *(_BYTE *)(a1 + 5136) = 0;
  *(_OWORD *)(a1 + 5384) = 0u;
  return result;
}

uint64_t sub_20E91E690(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(a1 + 208))
  {
    v2 = *(void **)(a1 + 184);
    if (v2)
    {
      *(_QWORD *)(a1 + 192) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 160);
    if (v3)
    {
      *(_QWORD *)(a1 + 168) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)(a1 + 136) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 104);
    if (v5)
    {
      *(_QWORD *)(a1 + 112) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 80);
    if (v6)
    {
      *(_QWORD *)(a1 + 88) = v6;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(void **)(a1 + 48);
    if (v7)
    {
      *(_QWORD *)(a1 + 56) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(a1 + 24);
    if (v8)
    {
      *(_QWORD *)(a1 + 32) = v8;
      operator delete(v8);
    }
    v9 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v9);
    }
  }
  return a1;
}

_QWORD *sub_20E91E748(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v2 = (_QWORD *)a1[18];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[16];
  a1[16] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[13];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[11];
  a1[11] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[7];
  if (v8)
  {
    do
    {
      v11 = (_QWORD *)*v8;
      v12 = (_QWORD *)v8[6];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = (void *)v8[4];
      v8[4] = 0;
      if (v14)
        operator delete(v14);
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  v9 = (void *)a1[5];
  a1[5] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

uint64_t sub_20E91E818(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 320);
  if (v4)
  {
    *(_QWORD *)(a1 + 328) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 296);
  if (v5)
  {
    *(_QWORD *)(a1 + 304) = v5;
    operator delete(v5);
  }
  sub_20E91E8B8((void **)(a1 + 152));
  if (*(_BYTE *)(a1 + 144))
  {
    v6 = *(void **)(a1 + 120);
    if (v6)
    {
      *(_QWORD *)(a1 + 128) = v6;
      operator delete(v6);
    }
  }
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

void **sub_20E91E8B8(void **a1)
{
  void *v2;
  void *v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  void **v14;
  void *v15;

  v2 = a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = (void **)a1[9];
  if (v4)
  {
    v5 = (void **)a1[10];
    v6 = a1[9];
    if (v5 != v4)
    {
      do
      {
        if (*((_BYTE *)v5 - 8) && *((char *)v5 - 9) < 0)
          operator delete(*(v5 - 4));
        v5 -= 6;
      }
      while (v5 != v4);
      v6 = a1[9];
    }
    a1[10] = v4;
    operator delete(v6);
  }
  v7 = (void **)a1[6];
  if (v7)
  {
    v8 = (void **)a1[7];
    v9 = a1[6];
    if (v8 != v7)
    {
      do
      {
        if (*((_BYTE *)v8 - 8) && *((char *)v8 - 9) < 0)
          operator delete(*(v8 - 4));
        v8 -= 52;
      }
      while (v8 != v7);
      v9 = a1[6];
    }
    a1[7] = v7;
    operator delete(v9);
  }
  v10 = (void **)a1[3];
  if (v10)
  {
    v11 = (void **)a1[4];
    v12 = a1[3];
    if (v11 != v10)
    {
      do
      {
        if (*((_BYTE *)v11 - 8) && *((char *)v11 - 9) < 0)
          operator delete(*(v11 - 4));
        v11 -= 52;
      }
      while (v11 != v10);
      v12 = a1[3];
    }
    a1[4] = v10;
    operator delete(v12);
  }
  v13 = (void **)*a1;
  if (*a1)
  {
    v14 = (void **)a1[1];
    v15 = *a1;
    if (v14 != v13)
    {
      do
      {
        if (*((_BYTE *)v14 - 8) && *((char *)v14 - 9) < 0)
          operator delete(*(v14 - 4));
        v14 -= 52;
      }
      while (v14 != v13);
      v15 = *a1;
    }
    a1[1] = v13;
    operator delete(v15);
  }
  return a1;
}

uint64_t sub_20E91EA40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v2 = *(_QWORD **)(a1 + 3720);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 3704);
  *(_QWORD *)(a1 + 3704) = 0;
  if (v4)
    operator delete(v4);
  if (*(_BYTE *)(a1 + 3672))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 3664);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 3648))
  {
    v8 = *(void **)(a1 + 3496);
    if (v8)
    {
      *(_QWORD *)(a1 + 3504) = v8;
      operator delete(v8);
    }
  }
  v9 = *(_QWORD *)(a1 + 744);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 752);
    v11 = *(void **)(a1 + 744);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(a1 + 752);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 744);
    }
    *(_QWORD *)(a1 + 752) = v9;
    operator delete(v11);
  }
  sub_20E91E690(a1 + 520);
  sub_20E91E748((_QWORD *)(a1 + 344));
  return a1;
}

uint64_t sub_20E91EB44(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;

  v2 = (void *)a1[682];
  if (v2)
  {
    a1[683] = v2;
    operator delete(v2);
  }
  sub_20E91E818((uint64_t)(a1 + 515));
  v3 = (std::__shared_weak_count *)a1[488];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[486];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[486];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (void *)a1[480];
  if (v9)
  {
    a1[481] = v9;
    operator delete(v9);
  }
  return sub_20E91EA40((uint64_t)(a1 + 4));
}

void sub_20E91EC0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E91EC1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E91EC4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20E91ED28(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E91EF00();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20E91EF00()
{
  sub_20E860B90("vector");
}

void sub_20E91EF14(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x84BDA12F684BDA13 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[216 * a2];
      do
      {
        *((_QWORD *)v5 + 26) = 0;
        *((_OWORD *)v5 + 11) = 0uLL;
        *((_OWORD *)v5 + 12) = 0uLL;
        *((_OWORD *)v5 + 9) = 0uLL;
        *((_OWORD *)v5 + 10) = 0uLL;
        *((_OWORD *)v5 + 7) = 0uLL;
        *((_OWORD *)v5 + 8) = 0uLL;
        *((_OWORD *)v5 + 5) = 0uLL;
        *((_OWORD *)v5 + 6) = 0uLL;
        *((_OWORD *)v5 + 3) = 0uLL;
        *((_OWORD *)v5 + 4) = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_OWORD *)v5 + 2) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *((_QWORD *)v5 + 23) = 0x3FF0000000000000;
        v5 += 216;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x84BDA12F684BDA13 * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x12F684BDA12F684)
      sub_20E91EF00();
    v8 = 0x84BDA12F684BDA13 * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x97B425ED097B42)
      v9 = 0x12F684BDA12F684;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x12F684BDA12F684)
        sub_20E877A38();
      v10 = (char *)operator new(216 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[216 * v6];
    v13 = &v12[216 * a2];
    v14 = v12;
    do
    {
      *((_QWORD *)v14 + 26) = 0;
      *((_OWORD *)v14 + 11) = 0uLL;
      *((_OWORD *)v14 + 12) = 0uLL;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 10) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_QWORD *)v14 + 23) = 0x3FF0000000000000;
      v14 += 216;
    }
    while (v14 != v13);
    v15 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 216);
        *(_OWORD *)(v12 - 200) = *(_OWORD *)(v5 - 200);
        *(_OWORD *)(v12 - 216) = v16;
        v17 = *(_OWORD *)(v5 - 184);
        v18 = *(_OWORD *)(v5 - 168);
        v19 = *(_OWORD *)(v5 - 152);
        *(_OWORD *)(v12 - 136) = *(_OWORD *)(v5 - 136);
        *(_OWORD *)(v12 - 152) = v19;
        *(_OWORD *)(v12 - 168) = v18;
        *(_OWORD *)(v12 - 184) = v17;
        v20 = *(_OWORD *)(v5 - 120);
        v21 = *(_OWORD *)(v5 - 104);
        v22 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v12 - 88) = v22;
        *(_OWORD *)(v12 - 104) = v21;
        *(_OWORD *)(v12 - 120) = v20;
        v23 = *(_OWORD *)(v5 - 56);
        v24 = *(_OWORD *)(v5 - 40);
        v25 = *(_OWORD *)(v5 - 24);
        *(v12 - 8) = *(v5 - 8);
        *(_OWORD *)(v12 - 24) = v25;
        *(_OWORD *)(v12 - 40) = v24;
        *(_OWORD *)(v12 - 56) = v23;
        v12 -= 216;
        v5 -= 216;
      }
      while (v5 != v15);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[216 * v9];
    if (v5)
      operator delete(v5);
  }
}

void sub_20E91F160(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_DWORD *CV3DSLAMStateSnapshotCreate()
{
  _DWORD *v0;
  _DWORD *v1;

  v0 = operator new(0x4D0uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    bzero(v0, 0x4D0uLL);
    v1[307] = 1;
    *(_QWORD *)v1 = off_24C9C3BA8;
  }
  return v1;
}

double CV3DSLAMStateSnapshotCreateRealtime()
{
  char *v0;
  double result;

  v0 = (char *)operator new(0x4D0uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    result = 0.0;
    *((_OWORD *)v0 + 76) = 0u;
    *((_OWORD *)v0 + 75) = 0u;
    *((_OWORD *)v0 + 74) = 0u;
    *((_OWORD *)v0 + 73) = 0u;
    *((_OWORD *)v0 + 72) = 0u;
    *((_OWORD *)v0 + 71) = 0u;
    *((_OWORD *)v0 + 70) = 0u;
    *((_OWORD *)v0 + 69) = 0u;
    *((_OWORD *)v0 + 68) = 0u;
    *((_DWORD *)v0 + 307) = 1;
    *(_QWORD *)v0 = off_24C9C3BA8;
    *(_OWORD *)(v0 + 24) = 0u;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 104) = 0u;
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
    *(_OWORD *)(v0 + 184) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 8) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
    *(_OWORD *)(v0 + 264) = 0u;
    *(_OWORD *)(v0 + 280) = 0u;
    *(_OWORD *)(v0 + 296) = 0u;
    *(_OWORD *)(v0 + 312) = 0u;
    *(_OWORD *)(v0 + 328) = 0u;
    *(_OWORD *)(v0 + 344) = 0u;
    *(_OWORD *)(v0 + 360) = 0u;
    *(_OWORD *)(v0 + 376) = 0u;
    *(_OWORD *)(v0 + 392) = 0u;
    *(_OWORD *)(v0 + 401) = 0u;
    *(_DWORD *)(v0 + 417) = 16777473;
    *(_WORD *)(v0 + 421) = 0;
    v0[423] = 0;
    *((_QWORD *)v0 + 53) = 0xBFF0000000000000;
    v0[432] = 1;
    *(_OWORD *)(v0 + 433) = 0u;
    *(_OWORD *)(v0 + 449) = 0u;
    *(_OWORD *)(v0 + 465) = 0u;
    *(_OWORD *)(v0 + 481) = 0u;
    *(_OWORD *)(v0 + 497) = 0u;
    *(_OWORD *)(v0 + 513) = 0u;
    *(_OWORD *)(v0 + 529) = 0u;
    *(_OWORD *)(v0 + 545) = 0u;
    *(_OWORD *)(v0 + 561) = 0u;
    *(_OWORD *)(v0 + 577) = 0u;
    *((_OWORD *)v0 + 37) = 0u;
    v0[608] = 2;
    *(_OWORD *)(v0 + 609) = 0u;
    *(_OWORD *)(v0 + 625) = 0u;
    *(_OWORD *)(v0 + 641) = 0u;
    *(_OWORD *)(v0 + 657) = 0u;
    *(_OWORD *)(v0 + 673) = 0u;
    *(_OWORD *)(v0 + 689) = 0u;
    *(_OWORD *)(v0 + 705) = 0u;
    *(_OWORD *)(v0 + 721) = 0u;
    *(_OWORD *)(v0 + 737) = 0u;
    *(_OWORD *)(v0 + 753) = 0u;
    *(_OWORD *)(v0 + 769) = 0u;
    *(_OWORD *)(v0 + 785) = 0u;
    *(_OWORD *)(v0 + 801) = 0u;
    *(_OWORD *)(v0 + 817) = 0u;
    *(_OWORD *)(v0 + 833) = 0u;
    *(_OWORD *)(v0 + 849) = 0u;
    *(_OWORD *)(v0 + 865) = 0u;
    *(_OWORD *)(v0 + 881) = 0u;
    *(_OWORD *)(v0 + 897) = 0u;
    *((_OWORD *)v0 + 57) = 0u;
    *((_QWORD *)v0 + 116) = -1;
    *(_OWORD *)(v0 + 936) = 0u;
    *(_OWORD *)(v0 + 952) = 0u;
    *((_QWORD *)v0 + 129) = 0x3FF0000000000000;
    *(_OWORD *)(v0 + 968) = xmmword_2102DD6A0;
    *(_OWORD *)(v0 + 984) = *(_OWORD *)algn_2102DD6B0;
    *(_OWORD *)(v0 + 1000) = xmmword_2102DD6C0;
    *(_OWORD *)(v0 + 1016) = unk_2102DD6D0;
    *((_OWORD *)v0 + 65) = 0u;
    *((_OWORD *)v0 + 66) = 0u;
    *((_OWORD *)v0 + 67) = 0u;
    *((_DWORD *)v0 + 272) = 1;
  }
  return result;
}

_QWORD *CV3DSLAMStateSnapshotCreateSLAMState(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (result)
  {
    v1 = result;
    if (*((_DWORD *)result + 272))
    {
      return 0;
    }
    else
    {
      result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
      if (result)
      {
        v2 = v1[1];
        v3 = v1[2];
        if (v3)
        {
          v4 = (unint64_t *)(v3 + 8);
          do
            v5 = __ldxr(v4);
          while (__stxr(v5 + 1, v4));
        }
        result[1] = v2;
        result[2] = v3;
        *((_DWORD *)result + 6) = 1;
        *result = &off_24C9C3B88;
      }
    }
  }
  return result;
}

uint64_t CV3DSLAMStateSnapshotPopulateSLAMState(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  CFTypeRef cf;
  std::__shared_weak_count *v35;
  std::error_condition v36;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v33 = xmmword_2102DB480;
    strcpy((char *)__p, "The given snapshot is NULL");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
    if (a3)
    {
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = std::generic_category();
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return 0;
    goto LABEL_55;
  }
  if (!a2)
  {
    __p = operator new(0x19uLL);
    v33 = xmmword_2102DAFD0;
    strcpy((char *)__p, "The given state is NULL");
    v15 = (char *)operator new(0x78uLL);
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
    if (a3)
    {
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = std::generic_category();
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v16;
      v17 = v35;
      if (v35)
      {
        v18 = (unint64_t *)&v35->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    operator delete(v15);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return 0;
LABEL_55:
    operator delete(__p);
    return 0;
  }
  if (*(_QWORD *)(a2 + 8))
  {
    __p = operator new(0x40uLL);
    v33 = xmmword_2102DBC30;
    strcpy((char *)__p, "The given state must be empty, did you call CV3DSLAMStateReset");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
    if (a3)
    {
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = std::generic_category();
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v35;
      if (v35)
      {
        v7 = (unint64_t *)&v35->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    return 0;
  }
  if (*(_DWORD *)(a1 + 1088))
  {
    __p = operator new(0x30uLL);
    v33 = xmmword_2102DC8E0;
    strcpy((char *)__p, "The given snapshot does not contain a state");
    v20 = (char *)operator new(0x78uLL);
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
    if (a3)
    {
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = std::generic_category();
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v21 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v21;
      v22 = v35;
      if (v35)
      {
        v23 = (unint64_t *)&v35->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    operator delete(v20);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return 0;
    goto LABEL_55;
  }
  v26 = *(_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
  {
    v27 = (unint64_t *)(v25 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v25;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return 1;
}

void sub_20E91F9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DSLAMStateSnapshotRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 1228);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMStateSnapshotRelease(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    v1 = a1 + 307;
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  }
  return 0;
}

double CV3DSLAMStateSnapshotReset(uint64_t a1)
{
  uint64_t v2;
  double result;
  char v4;
  char *v5;

  if (a1)
  {
    v2 = *(unsigned int *)(a1 + 1088);
    if ((_DWORD)v2 == -1)
      sub_20E877AB8();
    v5 = &v4;
    ((void (*)(char **, uint64_t))*(&off_24C9C4760 + v2))(&v5, a1 + 8);
    if (*(_BYTE *)(a1 + 1192))
      *(_BYTE *)(a1 + 1192) = 0;
    *(_QWORD *)(a1 + 1216) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 1200) = 0u;
  }
  return result;
}

uint64_t CV3DSLAMStateSnapshotGetPose(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (!a1)
    return 3;
  result = 5;
  if (a2 && a3)
  {
    if (*(_BYTE *)(a1 + 1192))
    {
      result = 0;
      *a2 = *(_QWORD *)(a1 + 1096);
      a2[1] = *(_QWORD *)(a1 + 1104);
      a2[2] = *(_QWORD *)(a1 + 1112);
      a2[3] = *(_QWORD *)(a1 + 1120);
      a2[4] = *(_QWORD *)(a1 + 1128);
      a2[5] = *(_QWORD *)(a1 + 1136);
      a2[6] = *(_QWORD *)(a1 + 1144);
      a2[7] = *(_QWORD *)(a1 + 1152);
      a2[8] = *(_QWORD *)(a1 + 1160);
      *a3 = *(_QWORD *)(a1 + 1168);
      a3[1] = *(_QWORD *)(a1 + 1176);
      a3[2] = *(_QWORD *)(a1 + 1184);
      return result;
    }
    return 3;
  }
  return result;
}

uint64_t CV3DSLAMStateSnapshotGetPoseTimestamp(uint64_t a1, double *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 5;
  result = 0;
  *a2 = *(double *)(a1 + 1200) + *(double *)(a1 + 1208);
  return result;
}

uint64_t CV3DSLAMStateSnapshotGetOriginalPoseTimestamp(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 5;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 1200);
  return result;
}

uint64_t CV3DSLAMStateSnapshotGetLastIMUTimestamp(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 3;
  if (!a2)
    return 5;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 1216);
  return result;
}

uint64_t CV3DSLAMStateSnapshotGetCurrentStateTimestamp(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  char v8;
  char *v9;

  if (!a1)
    return 3;
  if (!a2)
    return 5;
  v3 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v3 == -1)
    sub_20E877AB8();
  v9 = &v8;
  v4 = ((uint64_t (*)(char **, uint64_t))off_24C9C4770[v3])(&v9, a1 + 8);
  v5 = v4;
  if (v6)
  {
    result = 0;
    *a2 = v5;
  }
  else if ((v4 - 1) > 2)
  {
    return 0;
  }
  else
  {
    return (2 * ((_DWORD)v4 - 1)) | 1u;
  }
  return result;
}

uint64_t CV3DSLAMStateSnapshotIs3DOF(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char __p[21];
  char v5;
  char v6;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 1224))
    {
      return 1;
    }
    else
    {
      v3 = *(unsigned int *)(a1 + 1088);
      if ((_DWORD)v3 == -1)
        sub_20E877AB8();
      *(_QWORD *)__p = &v6;
      return ((uint64_t (*)(char *, uint64_t))off_24C9C4780[v3])(__p, a1 + 8);
    }
  }
  else
  {
    v5 = 20;
    strcpy(__p, "The snapshot is null");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if (v5 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E91FDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DSLAMStateSnapshotIsLegacy3DOF(uint64_t a1, CFTypeRef *a2)
{
  char __p[21];
  char v4;

  if (a1)
    return *(_BYTE *)(a1 + 1224) != 0;
  v4 = 20;
  strcpy(__p, "The snapshot is null");
  sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
  if (v4 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E91FEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateSnapshotShouldUseVisualSLAM(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  char __p[21];
  char v5;
  char v6;

  if (a1)
  {
    v2 = *(unsigned int *)(a1 + 1088);
    if ((_DWORD)v2 == -1)
      sub_20E877AB8();
    *(_QWORD *)__p = &v6;
    return ((uint64_t (*)(char *, uint64_t))off_24C9C47A0[v2])(__p, a1 + 8);
  }
  else
  {
    v5 = 20;
    strcpy(__p, "The snapshot is null");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if (v5 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E91FF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateSnapshotIsGeneralVisualSLAMEnabled(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  char __p[21];
  char v5;
  char v6;

  if (a1)
  {
    v2 = *(unsigned int *)(a1 + 1088);
    if ((_DWORD)v2 == -1)
      sub_20E877AB8();
    *(_QWORD *)__p = &v6;
    return ((uint64_t (*)(char *, uint64_t))off_24C9C47B0[v2])(__p, a1 + 8);
  }
  else
  {
    v5 = 20;
    strcpy(__p, "The snapshot is null");
    sub_20E8ECD2C(a2, 0x16u, (uint64_t)__p);
    if (v5 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_20E920068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateSnapshotGet3DOFNeckModel(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *__p[5];
  void **v10;

  if (!a1)
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "The snapshot is null");
    sub_20E8ECD2C(a4, 0x16u, (uint64_t)__p);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
LABEL_10:
    operator delete(__p[0]);
    return 0;
  }
  if (!a2 || !a3)
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DB450;
    strcpy((char *)__p[0], "The R_Neck_to_I or t_Neck_to_I is null");
    sub_20E8ECD2C(a4, 0x16u, (uint64_t)__p);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_10;
  }
  v7 = a3;
  v8 = a2;
  __p[0] = &v8;
  __p[1] = &v7;
  __p[2] = &v8;
  __p[3] = &v7;
  v5 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v5 == -1)
    sub_20E877AB8();
  v10 = __p;
  ((void (*)(void ***, uint64_t))off_24C9C4790[v5])(&v10, a1 + 8);
  return 1;
}

void sub_20E9201CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateSnapshotConvertPoseToCameraFrame(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t v8;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[13];
  void **v18;

  if (a1)
  {
    v15 = a3;
    v16 = a2;
    v13 = a5;
    v14 = a4;
    v11 = a7;
    v12 = a6;
    v10 = a8;
    __p[0] = &v10;
    __p[1] = &v16;
    __p[2] = &v15;
    __p[3] = &v14;
    __p[4] = &v13;
    __p[5] = &v12;
    __p[6] = &v11;
    __p[7] = &v10;
    __p[8] = &v16;
    __p[9] = &v15;
    __p[10] = &v12;
    __p[11] = &v11;
    v8 = *(unsigned int *)(a1 + 1088);
    if ((_DWORD)v8 == -1)
      sub_20E877AB8();
    v18 = __p;
    return ((uint64_t (*)(void ***, uint64_t))off_24C9B0898[v8])(&v18, a1 + 8);
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "The snapshot is null");
    sub_20E8ECD2C(a8, 0x16u, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_20E9202F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DSLAMStateSnapshotCopyIMUtoCameraPose(uint64_t a1, int a2, int a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void **v13;
  __int128 v14;
  CFTypeRef *v15;
  uint64_t v16;
  int v17;
  int v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;
  void *__p[8];

  v17 = a3;
  v18 = a2;
  v15 = a5;
  v16 = a4;
  if (a1)
  {
    __p[0] = &v15;
    __p[1] = &v18;
    __p[2] = &v17;
    __p[3] = &v16;
    __p[4] = &v15;
    __p[5] = &v18;
    __p[6] = &v17;
    __p[7] = &v16;
    v5 = *(unsigned int *)(a1 + 1088);
    if ((_DWORD)v5 == -1)
      sub_20E877AB8();
    v13 = __p;
    return ((uint64_t (*)(void ***, uint64_t))off_24C9B08F0[v5])(&v13, a1 + 8);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "The snapshot is null");
  v8 = (char *)operator new(0x78uLL);
  v13 = (void **)v8;
  v14 = xmmword_2102DD650;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
  if (a5)
  {
    *(_QWORD *)&v21.__val_ = 22;
    v21.__cat_ = std::generic_category();
    sub_20EA67538(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v9;
    v10 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      goto LABEL_17;
    v8 = (char *)v13;
  }
  operator delete(v8);
LABEL_17:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E9204EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  operator delete(v24);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20E920528(CFTypeRef ****a1, uint64_t a2)
{
  CFTypeRef ***v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL8 v7;
  CFTypeRef *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef *v13;
  void *__p[2];
  char v15;
  int v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  void *v19;
  __int128 v20;
  int v21;
  char v22;
  _QWORD v23[2];

  v2 = *a1;
  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v17 = v3;
    v18 = v4;
    v16 = sub_20EAB3E48(&v17, (uint64_t)*v2[1], (float64x2_t *)*v2[2], *(_DWORD *)v2[3], *(_DWORD *)v2[4], (uint64_t)*v2[5], (double *)*v2[6]);
    v7 = v16 == 0;
    if (v16)
    {
      v8 = **v2;
      v21 = 0;
      sub_20E920D00(&v19, "Failed to convert the pose to the camera frame with error ");
      sub_20E920A5C((uint64_t)v23, (uint64_t)&v19, &v16);
      if (v21 == -1)
        sub_20E877AB8();
      v23[0] = &v22;
      ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C9B08D8[v21])(__p, v23, &v19);
      if (v21 != -1)
        ((void (*)(_QWORD *, void **))off_24C9B08A8[v21])(v23, &v19);
      sub_20E8ECD2C(v8, 0x16u, (uint64_t)__p);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    v9 = v18;
    if (!v18)
      return v7;
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      return v7;
    }
    else
    {
      return v7;
    }
  }
  else
  {
    v13 = **v2;
    v19 = operator new(0x50uLL);
    v20 = xmmword_2102DD660;
    strcpy((char *)v19, "The snapshot must have a state in order to covert the pose to the camera frame.");
    sub_20E8ECD2C(v13, 0x16u, (uint64_t)&v19);
    if (SHIBYTE(v20) < 0)
      operator delete(v19);
    return 0;
  }
}

void sub_20E920740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20E9207F0(_QWORD *a1, uint64_t a2)
{
  _QWORD **v2;
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  float64x2_t *v20;
  double v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v28;
  float64x2_t v37;
  uint64_t v38;
  double *v39;
  CFTypeRef *v41;
  void *__p;
  __int128 v43;

  v2 = (_QWORD **)*a1;
  v3 = *(unsigned __int8 *)(a2 + 400);
  if (*(_BYTE *)(a2 + 400))
  {
    v5 = *(double *)(a2 + 184);
    v4 = *(double *)(a2 + 192);
    v6 = *(double *)(a2 + 200);
    v7 = *(double *)(a2 + 208);
    v9 = *(double *)(a2 + 216);
    v8 = *(double *)(a2 + 224);
    v11 = *(double *)(a2 + 232);
    v10 = *(double *)(a2 + 240);
    v12 = *(double *)(a2 + 248);
    v13 = *(double *)(a2 + 256);
    v14 = *(double *)(a2 + 264);
    v15 = *(double *)(a2 + 272);
    v16 = -(v5 * v13 + v7 * v14 + v11 * v15);
    v17 = -(v4 * v13 + v9 * v14 + v10 * v15);
    v18 = -(v6 * v13 + v8 * v14 + v12 * v15);
    v19 = *v2[8];
    v20 = (float64x2_t *)*v2[9];
    v21 = v20[1].f64[0];
    _Q27 = *v20;
    v23.f64[0] = *(float64_t *)(v19 + 16);
    v24 = *(float64x2_t *)v19;
    _D23 = *(double *)(v19 + 40);
    v26 = *(float64x2_t *)(v19 + 24);
    _D24 = *(double *)(v19 + 64);
    v28 = *(float64x2_t *)(v19 + 48);
    _Q28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v19, v20->f64[0]), v26, *v20, 1), v28, v21);
    __asm { FMLA            D29, D23, V27.D[1] }
    _D26 = _D29 + _D24 * v21;
    _D30 = *(_QWORD *)(v19 + 56);
    __asm { FMLS            D27, D30, V28.D[1] }
    v23.f64[1] = _D23;
    v37 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v19, (int64x2_t)v26), vnegq_f64(_Q28).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v19, (int64x2_t)v26), _Q28, 1), v23, _D26, 0);
    v38 = *v2[10];
    v39 = (double *)*v2[11];
    __asm { FMLS            D27, D24, V26.D[0] }
    *(float64x2_t *)v38 = vaddq_f64(vmulq_n_f64(v28, v11), vaddq_f64(vmulq_n_f64(v24, v5), vmulq_n_f64(v26, v7)));
    *(double *)(v38 + 16) = v7 * _D23 + v5 * v23.f64[0] + v11 * _D24;
    *(float64x2_t *)(v38 + 24) = vaddq_f64(vmulq_n_f64(v28, v10), vaddq_f64(vmulq_n_f64(v24, v4), vmulq_n_f64(v26, v9)));
    *(double *)(v38 + 40) = v9 * _D23 + v4 * v23.f64[0] + v10 * _D24;
    *(float64x2_t *)(v38 + 48) = vaddq_f64(vmulq_n_f64(v26, v8), vaddq_f64(vmulq_n_f64(v24, v6), vmulq_n_f64(v28, v12)));
    *(double *)(v38 + 64) = v8 * _D23 + v6 * v23.f64[0] + v12 * _D24;
    *v39 = v16 - v5 * v37.f64[0] - v11 * _Q27.f64[0] - vmuld_lane_f64(v7, v37, 1);
    v39[1] = v17 - v4 * v37.f64[0] - v10 * _Q27.f64[0] - vmuld_lane_f64(v9, v37, 1);
    v39[2] = v18 - v12 * _Q27.f64[0] - v6 * v37.f64[0] - vmuld_lane_f64(v8, v37, 1);
    return v3 != 0;
  }
  v41 = (CFTypeRef *)*v2[7];
  __p = operator new(0x68uLL);
  v43 = xmmword_2102DD670;
  strcpy((char *)__p, "The snapshot must have valid camera calibration parameters to covert the pose to the camera frame.");
  sub_20E8ECD2C(v41, 0x16u, (uint64_t)&__p);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
    return v3 != 0;
  operator delete(__p);
  return v3 != 0;
}

void sub_20E920A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E920A5C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20EAB1050((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C9B08C0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20E920CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20E920CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E920CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E920D00(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B08A8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20E920DF0(CFTypeRef ****a1, uint64_t a2)
{
  CFTypeRef ***v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v23;
  uint64_t v24;
  uint64_t v35;
  CFTypeRef *v37;
  void *v38;
  CFErrorRef v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  int v43;
  CFTypeRef *v44;
  void *v45;
  const std::error_category *v46;
  CFErrorRef v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  void *__p;
  __int128 v55;
  void *v56;
  __int128 v57;
  int v58;
  char v59;
  CFErrorRef v60;
  std::__shared_weak_count *v61;
  std::error_condition v62;

  v2 = *a1;
  v3 = *(uint64_t **)a2;
  if (!*(_QWORD *)a2)
  {
    v37 = **v2;
    v56 = operator new(0x48uLL);
    v57 = xmmword_2102DD680;
    strcpy((char *)v56, "The snapshot must have a state in order to copy the imu to camera pose.");
    v38 = operator new(0x78uLL);
    __p = v38;
    v55 = xmmword_2102DD650;
    strcpy((char *)v38, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
    if (v37)
    {
      *(_QWORD *)&v62.__val_ = 22;
      v62.__cat_ = std::generic_category();
      sub_20EA67538(&v62, (uint64_t)&v56, &v60);
      if (*v37)
        CFRelease(*v37);
      *v37 = 0;
      v39 = v60;
      if (v60)
        CFRetain(v60);
      *v37 = v39;
      v40 = v61;
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if ((SHIBYTE(v55) & 0x80000000) == 0)
        goto LABEL_24;
      v38 = __p;
    }
    operator delete(v38);
LABEL_24:
    if (SHIBYTE(v57) < 0)
      operator delete(v56);
    return 0;
  }
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v53 = 0;
  v7 = *v3;
  if (*v3)
  {
    v8 = (__int128 *)*v2[3];
    if (v8)
    {
      v9 = *(unsigned int *)v2[1];
      v10 = *(_QWORD *)(v7 + 776);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 784) - v10) >> 3) > v9)
      {
        v11 = *(unsigned int *)v2[2];
        v13 = (uint64_t *)(v10 + 24 * v9);
        v12 = *v13;
        if (0x84BDA12F684BDA13 * ((v13[1] - *v13) >> 3) > v11)
        {
          v14 = v12 + 216 * v11;
          v15 = *(_QWORD *)(v14 + 8);
          v16 = *(_QWORD *)(v14 + 16);
          v17 = *(_QWORD *)(v14 + 24);
          v18 = *(_QWORD *)(v14 + 32);
          v19 = *(_QWORD *)(v14 + 40);
          v20 = *(double *)(v14 + 48);
          v21 = *(double *)(v14 + 56);
          _D16 = *(_QWORD *)(v14 + 80);
          v23 = *(double *)(v14 + 88);
          v24 = *(_QWORD *)(v14 + 64);
          *(_QWORD *)v8 = *(_QWORD *)v14;
          *((_QWORD *)v8 + 1) = v17;
          *((_QWORD *)v8 + 4) = v15;
          *((_QWORD *)v8 + 5) = v18;
          *((_QWORD *)v8 + 8) = v16;
          *((_QWORD *)v8 + 9) = v19;
          *((_QWORD *)v8 + 10) = v24;
          _Q0 = *v8;
          __asm { FMLA            D1, D16, V0.D[1] }
          *((double *)v8 + 2) = v20;
          *((double *)v8 + 3) = -(_D1 + v20 * v23);
          _Q0 = v8[2];
          __asm { FMLA            D1, D16, V0.D[1] }
          *((double *)v8 + 6) = v21;
          *((double *)v8 + 7) = -(_D1 + v21 * v23);
          _Q1 = v8[4];
          __asm { FMLA            D2, D16, V1.D[1] }
          *((double *)v8 + 11) = -(_D2 + *((double *)v8 + 10) * v23);
          v35 = 1;
          if (!v4)
            return v35;
          goto LABEL_47;
        }
      }
    }
    v43 = 4;
  }
  else
  {
    v43 = 3;
  }
  v53 = v43;
  v44 = **v2;
  v58 = 0;
  sub_20E921800(&v56, "Failed to copy the imu to camera pose with error ");
  sub_20E920A5C((uint64_t)&v62, (uint64_t)&v56, &v53);
  if (v58 == -1)
    sub_20E877AB8();
  *(_QWORD *)&v62.__val_ = &v59;
  ((void (*)(void **__return_ptr, std::error_condition *, void **))off_24C9B08D8[v58])(&__p, &v62, &v56);
  if (v58 != -1)
    ((void (*)(std::error_condition *, void **))off_24C9B08A8[v58])(&v62, &v56);
  v45 = operator new(0x78uLL);
  v56 = v45;
  v57 = xmmword_2102DD650;
  strcpy((char *)v45, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
  if (!v44)
    goto LABEL_43;
  v46 = std::generic_category();
  *(_QWORD *)&v62.__val_ = 22;
  v62.__cat_ = v46;
  sub_20EA67538(&v62, (uint64_t)&__p, &v60);
  if (*v44)
    CFRelease(*v44);
  *v44 = 0;
  v47 = v60;
  if (v60)
    CFRetain(v60);
  *v44 = v47;
  v48 = v61;
  if (!v61)
    goto LABEL_41;
  v49 = (unint64_t *)&v61->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
LABEL_41:
    if ((SHIBYTE(v57) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
  std::__shared_weak_count::__release_weak(v48);
  if (SHIBYTE(v57) < 0)
  {
LABEL_42:
    v45 = v56;
LABEL_43:
    operator delete(v45);
  }
LABEL_44:
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
  v35 = 0;
  if (!v4)
    return v35;
LABEL_47:
  v51 = (unint64_t *)&v4->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
    return v35;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v35;
}

void sub_20E921274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,int a23)
{
  operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9213CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  CFTypeRef *v3;
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  CFTypeRef *v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  char *__p;
  char *__pa;
  void *v39;
  __int128 v40;
  CFTypeRef cf;
  std::__shared_weak_count *v42;
  std::error_condition v43;

  v2 = *a1;
  if (!*(_BYTE *)(a2 + 400))
  {
    v10 = **(CFTypeRef ***)(v2 + 32);
    v39 = operator new(0x60uLL);
    v40 = xmmword_2102DD690;
    strcpy((char *)v39, "The snapshot must have valid camera calibration parameters to copy the imu to camera pose.");
    v11 = (char *)operator new(0x78uLL);
    __pa = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
    if (v10)
    {
      *(_QWORD *)&v43.__val_ = 22;
      v43.__cat_ = std::generic_category();
      sub_20EA67538(&v43, (uint64_t)&v39, (CFErrorRef *)&cf);
      if (*v10)
        CFRelease(*v10);
      *v10 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *v10 = v12;
      v13 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v11 = __pa;
    }
    operator delete(v11);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      return 0;
LABEL_29:
    operator delete(v39);
    return 0;
  }
  if (**(_DWORD **)(v2 + 40) || **(_DWORD **)(v2 + 48))
  {
    v3 = **(CFTypeRef ***)(v2 + 32);
    v39 = operator new(0x28uLL);
    v40 = xmmword_2102DBA80;
    strcpy((char *)v39, "Camera id and stream id must be 0");
    v4 = (char *)operator new(0x78uLL);
    __p = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DSLAMStateSnapshot.cpp");
    if (v3)
    {
      *(_QWORD *)&v43.__val_ = 22;
      v43.__cat_ = std::generic_category();
      sub_20EA67538(&v43, (uint64_t)&v39, (CFErrorRef *)&cf);
      if (*v3)
        CFRelease(*v3);
      *v3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *v3 = v5;
      v6 = v42;
      if (v42)
      {
        v7 = (unint64_t *)&v42->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = __p;
    }
    operator delete(v4);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      return 0;
    goto LABEL_29;
  }
  v16 = **(__int128 ***)(v2 + 56);
  v17 = *(_QWORD *)(a2 + 192);
  v18 = *(_QWORD *)(a2 + 200);
  v19 = *(_QWORD *)(a2 + 208);
  v20 = *(_QWORD *)(a2 + 216);
  v21 = *(_QWORD *)(a2 + 224);
  v22 = *(double *)(a2 + 232);
  v23 = *(_QWORD *)(a2 + 240);
  v24 = *(_QWORD *)(a2 + 248);
  _D18 = *(_QWORD *)(a2 + 264);
  v26 = *(double *)(a2 + 272);
  *(_QWORD *)v16 = *(_QWORD *)(a2 + 184);
  *((_QWORD *)v16 + 1) = v19;
  *((_QWORD *)v16 + 4) = v17;
  *((_QWORD *)v16 + 5) = v20;
  *((_QWORD *)v16 + 6) = v23;
  *((_QWORD *)v16 + 9) = v21;
  *((_QWORD *)v16 + 10) = v24;
  _Q0 = *v16;
  __asm { FMLA            D1, D18, V0.D[1] }
  *((double *)v16 + 2) = v22;
  *((double *)v16 + 3) = -(_D1 + v22 * v26);
  _Q1 = v16[2];
  __asm { FMLA            D3, D18, V1.D[1] }
  *((double *)v16 + 7) = -(_D3 + *((double *)v16 + 6) * v26);
  *((_QWORD *)v16 + 8) = v18;
  _Q1 = v16[4];
  __asm { FMLA            D2, D18, V1.D[1] }
  *((double *)v16 + 11) = -(_D2 + *((double *)v16 + 10) * v26);
  return 1;
}

void sub_20E92173C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  operator delete(__p);
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_20E9217F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x20E9217E0);
  JUMPOUT(0x20E9217D0);
}

_DWORD *sub_20E921800(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B08A8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_QWORD *CV3DSurfaceDetectionResultRelease(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  if (result)
  {
    v1 = result;
    v3 = (_QWORD *)*result;
    v2 = result[1];
    if (v2)
    {
      v4 = &v3[33 * v2];
      do
      {
        v5 = (const void *)v3[27];
        if (v5)
          CFRelease(v5);
        v6 = v3[23];
        if (v6)
        {
          MEMORY[0x212BC6398](v6, 0x1000C40E0EAB150);
          v3[23] = 0;
        }
        v7 = v3[24];
        if (v7)
        {
          MEMORY[0x212BC6398](v7, 0x1000C40FA0F61DDLL);
          v3[24] = 0;
        }
        v8 = (_QWORD *)v3[25];
        if (v8)
        {
          if (!*v8 || (MEMORY[0x212BC6368](*v8, 0x1000C80451B5BE8), *v8 = 0, (v8 = (_QWORD *)v3[25]) != 0))
          {
            MEMORY[0x212BC6398](v8, 0x1020C40EDED9539);
            v3[25] = 0;
          }
        }
        v9 = (_QWORD *)v3[26];
        if (v9)
        {
          if (!*v9 || (MEMORY[0x212BC6368](*v9, 0x1000C80E0EAB150), *v9 = 0, (v9 = (_QWORD *)v3[26]) != 0))
          {
            MEMORY[0x212BC6398](v9, 0x1020C40EDED9539);
            v3[26] = 0;
          }
        }
        v11 = (const void **)v3[29];
        v10 = v3[30];
        if (v10)
        {
          v12 = 8 * v10;
          do
          {
            v13 = *v11++;
            CFRelease(v13);
            v12 -= 8;
          }
          while (v12);
          v11 = (const void **)v3[29];
        }
        if (v11)
        {
          MEMORY[0x212BC6368](v11, 0x60C8044C4A2DFLL);
          v3[29] = 0;
        }
        v14 = v3[32];
        if (v14)
        {
          MEMORY[0x212BC6398](v14, 0x1000C407488EC78);
          v3[32] = 0;
        }
        v3 += 33;
      }
      while (v3 != v4);
      v3 = (_QWORD *)*v1;
    }
    if (v3)
    {
      MEMORY[0x212BC6368](v3, 0x10E0C8017FEEA21);
      *v1 = 0;
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *CV3DSurfaceDetectionSingleShotPlanesRelease(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  _QWORD *v12;

  if (result)
  {
    v1 = result;
    v3 = (_QWORD *)*result;
    v2 = result[1];
    if (v2)
    {
      v4 = &v3[27 * v2];
      do
      {
        v5 = (_QWORD *)v3[24];
        if (v5)
        {
          v6 = v5[1];
          if (v6)
          {
            v7 = 0;
            do
            {
              v8 = (uint64_t *)v3[24];
              v9 = *v8;
              v10 = *(_QWORD *)(*v8 + v7);
              if (v10)
              {
                MEMORY[0x212BC6368](v10, 0x1000C80451B5BE8);
                *(_QWORD *)(v9 + v7) = 0;
              }
              v7 += 16;
              --v6;
            }
            while (v6);
            v5 = (_QWORD *)v3[24];
          }
          if (!*v5 || (MEMORY[0x212BC6368](*v5, 0x1020C80EDED9539), *v5 = 0, (v5 = (_QWORD *)v3[24]) != 0))
          {
            MEMORY[0x212BC6398](v5, 0x1020C40EDED9539);
            v3[24] = 0;
          }
        }
        v11 = (const void *)v3[25];
        if (v11)
          CFRelease(v11);
        v12 = (_QWORD *)v3[26];
        if (v12)
        {
          if (!*v12 || (MEMORY[0x212BC6368](*v12, 0x1000C807488EC78), *v12 = 0, (v12 = (_QWORD *)v3[26]) != 0))
          {
            MEMORY[0x212BC6398](v12, 0x1020C40EDED9539);
            v3[26] = 0;
          }
        }
        v3 += 27;
      }
      while (v3 != v4);
      v3 = (_QWORD *)*v1;
    }
    if (v3)
    {
      MEMORY[0x212BC6368](v3, 0x1060C808560B7F5);
      *v1 = 0;
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t CV3DSurfaceDetectionDefaultParameters()
{
  return 0xA00000003;
}

uint64_t CV3DSurfaceDetectionCreateWithArgs(uint64_t **a1, unint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v15;
  void **p_dst;
  int v17;
  unint64_t v18;
  unint64_t v19;
  size_t v21;
  void **v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  const void *v29;
  unint64_t v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  size_t v53;
  size_t v54;
  _QWORD *v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  size_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  size_t v78;
  size_t v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  char *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  _QWORD *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  const void **v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  const char *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  const char *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  void **v187;
  uint64_t v188;
  const char *v189;
  size_t v190;
  unsigned __int8 v191;
  const char *v192;
  size_t v193;
  _BYTE *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  const char *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  NSObject *v203;
  size_t v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  size_t v207;
  size_t v208;
  _QWORD *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char v214;
  _QWORD *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  char *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  _QWORD *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  const char *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  const char *v263;
  unint64_t v264;
  const char *v265;
  const char *v266;
  uint64_t *v267;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v269;
  int v270;
  const char *v271;
  int v272;
  const char *v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  void **__dst;
  size_t v277;
  int64_t v278;
  unint64_t v279;
  unsigned int v280;
  char v281;
  _BYTE v282[20];
  __int128 v283;
  _BYTE v284[23];
  unint64_t v285;
  void *__p;
  char v287;
  unint64_t v288;
  int v289;
  _BYTE v290[152];
  uint64_t v291;
  __int128 v292;
  std::__shared_weak_count *v293;
  char *v294;
  std::__shared_weak_count *v295;
  _QWORD *v296;
  __int128 v297;
  _BYTE v298[55];
  _BYTE v299[24];
  __int128 v300;
  char *v301;
  size_t v302;
  unint64_t v303;
  char v304;
  _QWORD v305[5];

  v305[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&v298[7] = xmmword_21038A3E0;
  *(_OWORD *)&v298[23] = unk_21038A3F0;
  *(_OWORD *)&v298[39] = xmmword_21038A400;
  if (!a1)
  {
    sub_20E923D94(&v291);
    if (**(int **)(v291 + 56) > 5)
      return 2;
    v11 = *(unsigned __int8 *)(v291 + 72);
    v12 = sub_20E8C31DC(v291, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (!v11 && v12 == 0)
      return 2;
    sub_20E863438((uint64_t)&v279);
    sub_20E86A980(&v282[3], (uint64_t)"Invalid handle", 14);
    if ((v289 & 0x10) != 0)
    {
      v28 = v288;
      if (v288 < v285)
      {
        v288 = v285;
        v28 = v285;
      }
      v29 = *(const void **)&v284[15];
      v15 = v28 - *(_QWORD *)&v284[15];
      if (v28 - *(_QWORD *)&v284[15] > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_88;
    }
    else
    {
      if ((v289 & 8) == 0)
      {
        v15 = 0;
        HIBYTE(v278) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_43;
      }
      v29 = *(const void **)((char *)&v283 + 7);
      v15 = *(_QWORD *)&v284[7] - *(_QWORD *)((char *)&v283 + 7);
      if (*(_QWORD *)&v284[7] - *(_QWORD *)((char *)&v283 + 7) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_88:
        sub_20E860B7C();
    }
    if (v15 >= 0x17)
    {
      v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v32 = v15 | 7;
      v33 = v32 + 1;
      p_dst = (void **)operator new(v32 + 1);
      v277 = v15;
      v278 = v33 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v278) = v15;
      p_dst = (void **)&__dst;
      if (!v15)
      {
LABEL_43:
        *((_BYTE *)p_dst + v15) = 0;
        v267 = &v291;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v269 = std::chrono::system_clock::now().__d_.__rep_;
        v270 = 5;
        v271 = "unknown file";
        v272 = 137;
        v274 = 0;
        v275 = 0;
        v273 = "unknown function";
        if (v278 >= 0)
          v34 = (const char *)&__dst;
        else
          v34 = (const char *)__dst;
        v35 = *v267;
        v36 = (const char *)(*v267 + 16);
        v261 = *v267;
        v265 = v36;
        if (*(char *)(*v267 + 39) < 0)
        {
          v36 = *(const char **)(v35 + 16);
          v37 = *(_QWORD *)(v35 + 24);
          v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v39 & 1) != 0)
            goto LABEL_50;
        }
        else
        {
          v37 = *(unsigned __int8 *)(*v267 + 39);
          v38 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v38 & 1) != 0)
            goto LABEL_50;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v299);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v299);
          if ((_BYTE)v300 && (v299[23] & 0x80000000) != 0)
            operator delete(*(void **)v299);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_50:
        if (byte_254A4A4F8[23] >= 0)
          v40 = byte_254A4A4F8;
        else
          v40 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v41 = byte_254A4A4F8[23];
        else
          v41 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v299 = os_log_create(v40, v36);
        v42 = &v299[8];
        if (v41 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v41 >= 0x17)
        {
          v43 = v11;
          v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v44 = v41 | 7;
          v45 = v44 + 1;
          v42 = operator new(v44 + 1);
          *(_QWORD *)&v299[16] = v41;
          *(_QWORD *)&v300 = v45 | 0x8000000000000000;
          *(_QWORD *)&v299[8] = v42;
          v11 = v43;
        }
        else
        {
          BYTE7(v300) = v41;
          if (!v41)
          {
LABEL_64:
            v42[v41] = 0;
            BYTE8(v300) = 1;
            v46 = (char *)&v301;
            if (v37 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v37 >= 0x17)
            {
              v47 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v47 = v37 | 7;
              v48 = v47 + 1;
              v46 = (char *)operator new(v47 + 1);
              v302 = v37;
              v303 = v48 | 0x8000000000000000;
              v301 = v46;
            }
            else
            {
              HIBYTE(v303) = v37;
              if (!v37)
              {
LABEL_72:
                v46[v37] = 0;
                v304 = 1;
                v49 = *(NSObject **)v299;
                if (SHIBYTE(v303) < 0)
                  operator delete(v301);
                if (BYTE8(v300) && SBYTE7(v300) < 0)
                  operator delete(*(void **)&v299[8]);
                if (*(_QWORD *)v299)
                  os_release(*(void **)v299);
                if (!v13 || !*(_QWORD *)(v13 + 24))
                {
                  os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v299 = 136315138;
                  *(_QWORD *)&v299[4] = v34;
                  v56 = (void *)_os_log_send_and_compose_impl();
                  if (v56)
                    free(v56);
                  goto LABEL_227;
                }
                v50 = _os_log_pack_size();
                v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
                v52 = (std::__shared_weak_count *)operator new();
                v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v52->__shared_owners_ = 0;
                v52->__shared_weak_owners_ = 0;
                v52[1].__vftable = v51;
                *(_QWORD *)&v292 = v51;
                *((_QWORD *)&v292 + 1) = v51;
                v294 = 0;
                v295 = 0;
                v293 = v52;
                v53 = strlen(v34);
                if (v53 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v54 = v53;
                if (v53 >= 0x17)
                {
                  v82 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v53 | 7) != 0x17)
                    v82 = v53 | 7;
                  v83 = v82 + 1;
                  v55 = operator new(v82 + 1);
                  *(_QWORD *)&v297 = v54;
                  *((_QWORD *)&v297 + 1) = v83 | 0x8000000000000000;
                  v296 = v55;
                }
                else
                {
                  HIBYTE(v297) = v53;
                  v55 = &v296;
                  if (!v53)
                  {
LABEL_146:
                    *((_BYTE *)v55 + v54) = 0;
                    v84 = v296;
                    v305[0] = v297;
                    *(_QWORD *)((char *)v305 + 7) = *(_QWORD *)((char *)&v297 + 7);
                    v85 = HIBYTE(v297);
                    v86 = operator new(0x38uLL);
                    v86[1] = 0;
                    v86[2] = 0;
                    v86[3] = off_24C9ABC20;
                    *v86 = &off_24C9ABBD0;
                    v87 = v305[0];
                    v86[4] = v84;
                    v86[5] = v87;
                    *(_QWORD *)((char *)v86 + 47) = *(_QWORD *)((char *)v305 + 7);
                    *((_BYTE *)v86 + 55) = v85;
                    v305[0] = 0;
                    *(_QWORD *)((char *)v305 + 7) = 0;
                    v88 = v295;
                    v294 = (char *)(v86 + 3);
                    v295 = (std::__shared_weak_count *)v86;
                    if (v88)
                    {
                      p_shared_owners = (unint64_t *)&v88->__shared_owners_;
                      do
                        v90 = __ldaxr(p_shared_owners);
                      while (__stlxr(v90 - 1, p_shared_owners));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                    *(_OWORD *)v299 = v292;
                    v91 = v294;
                    *(_QWORD *)&v299[16] = v293;
                    if (v293)
                    {
                      v92 = (unint64_t *)&v293->__shared_owners_;
                      do
                        v93 = __ldxr(v92);
                      while (__stxr(v93 + 1, v92));
                    }
                    v94 = v295;
                    *(_QWORD *)&v300 = v91;
                    *((_QWORD *)&v300 + 1) = v295;
                    if (v295)
                    {
                      v95 = (unint64_t *)&v295->__shared_owners_;
                      do
                        v96 = __ldxr(v95);
                      while (__stxr(v96 + 1, v95));
                      v301 = v91;
                      do
                        v97 = __ldaxr(v95);
                      while (__stlxr(v97 - 1, v95));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                    }
                    else
                    {
                      v301 = v91;
                    }
                    v116 = v293;
                    if (v293)
                    {
                      v117 = (unint64_t *)&v293->__shared_owners_;
                      do
                        v118 = __ldaxr(v117);
                      while (__stlxr(v118 - 1, v117));
                      if (!v118)
                      {
                        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                        std::__shared_weak_count::__release_weak(v116);
                      }
                    }
                    v119 = *(_QWORD *)v299;
                    if (v301[31] >= 0)
                      v120 = v301 + 8;
                    else
                      v120 = (char *)*((_QWORD *)v301 + 1);
                    v121 = _os_log_pack_fill();
                    *(_DWORD *)v121 = 136315138;
                    *(_QWORD *)(v121 + 4) = v120;
                    v122 = operator new();
                    v123 = *(unsigned __int8 *)(v261 + 39);
                    v124 = v265;
                    if ((v123 & 0x80u) != 0)
                    {
                      v124 = *(const char **)(v261 + 16);
                      v123 = *(_QWORD *)(v261 + 24);
                    }
                    *(_QWORD *)v122 = v119;
                    *(_OWORD *)(v122 + 8) = *(_OWORD *)&v299[8];
                    *(_QWORD *)&v299[8] = 0;
                    *(_QWORD *)&v299[16] = 0;
                    *(_OWORD *)(v122 + 24) = v300;
                    v300 = 0uLL;
                    *(_QWORD *)(v122 + 40) = v124;
                    *(_QWORD *)(v122 + 48) = v123;
                    *(_BYTE *)(v122 + 56) = 16;
                    v296 = 0;
                    *(_QWORD *)&v292 = v122;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &v292);
                    v125 = v292;
                    *(_QWORD *)&v292 = 0;
                    if (v125)
                    {
                      v126 = *(std::__shared_weak_count **)(v125 + 32);
                      if (v126)
                      {
                        v127 = (unint64_t *)&v126->__shared_owners_;
                        do
                          v128 = __ldaxr(v127);
                        while (__stlxr(v128 - 1, v127));
                        if (!v128)
                        {
                          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                          std::__shared_weak_count::__release_weak(v126);
                        }
                      }
                      v129 = *(std::__shared_weak_count **)(v125 + 16);
                      if (v129)
                      {
                        v130 = (unint64_t *)&v129->__shared_owners_;
                        do
                          v131 = __ldaxr(v130);
                        while (__stlxr(v131 - 1, v130));
                        if (!v131)
                        {
                          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                          std::__shared_weak_count::__release_weak(v129);
                        }
                      }
                      MEMORY[0x212BC6398](v125, 0x10F0C40B62ED6C6);
                      v132 = v296;
                      v296 = 0;
                      if (v132)
                      {
                        v133 = (std::__shared_weak_count *)v132[4];
                        if (v133)
                        {
                          v134 = (unint64_t *)&v133->__shared_owners_;
                          do
                            v135 = __ldaxr(v134);
                          while (__stlxr(v135 - 1, v134));
                          if (!v135)
                          {
                            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                            std::__shared_weak_count::__release_weak(v133);
                          }
                        }
                        v136 = (std::__shared_weak_count *)v132[2];
                        if (v136)
                        {
                          v137 = (unint64_t *)&v136->__shared_owners_;
                          do
                            v138 = __ldaxr(v137);
                          while (__stlxr(v138 - 1, v137));
                          if (!v138)
                          {
                            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                            std::__shared_weak_count::__release_weak(v136);
                          }
                        }
                        MEMORY[0x212BC6398](v132, 0x10F0C40B62ED6C6);
                      }
                    }
                    v139 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                    if (*((_QWORD *)&v300 + 1))
                    {
                      v140 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                      do
                        v141 = __ldaxr(v140);
                      while (__stlxr(v141 - 1, v140));
                      if (!v141)
                      {
                        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                        std::__shared_weak_count::__release_weak(v139);
                      }
                    }
                    v142 = *(std::__shared_weak_count **)&v299[16];
                    if (*(_QWORD *)&v299[16])
                    {
                      v143 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                      do
                        v144 = __ldaxr(v143);
                      while (__stlxr(v144 - 1, v143));
                      if (!v144)
                      {
                        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                        std::__shared_weak_count::__release_weak(v142);
                      }
                    }
LABEL_227:
                    if (v11)
                    {
                      v145 = (const char *)&__dst;
                      if (v278 < 0)
                        v145 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v267, "%s", v145);
                      sub_20E863570((uint64_t)&v267);
                    }
                    sub_20E863570((uint64_t)&v267);
                    v146 = v275;
                    if (v275)
                    {
                      v147 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v148 = __ldaxr(v147);
                      while (__stlxr(v148 - 1, v147));
                      if (!v148)
                      {
                        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                        std::__shared_weak_count::__release_weak(v146);
                      }
                    }
                    if (SHIBYTE(v278) < 0)
                      operator delete(__dst);
                    v279 = *MEMORY[0x24BEDB7F0];
                    v149 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(unint64_t *)((char *)&v279 + *(_QWORD *)(v279 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                              + 64);
                    *(_QWORD *)&v282[3] = v149;
                    *(_QWORD *)&v282[11] = MEMORY[0x24BEDB848] + 16;
                    if (v287 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v290);
                    return 2;
                  }
                }
                memcpy(v55, v34, v54);
                goto LABEL_146;
              }
            }
            memmove(v46, v36, v37);
            goto LABEL_72;
          }
        }
        memmove(v42, v40, v41);
        goto LABEL_64;
      }
    }
    memmove(p_dst, v29, v15);
    goto LABEL_43;
  }
  v3 = a2;
  if ((a2 - 1) > 4 || (v5 = HIDWORD(a2), HIDWORD(a2) < 3) || a3 <= 2)
  {
    *a1 = 0;
    sub_20E923D94(&v291);
    if (**(int **)(v291 + 56) > 5)
      return 2;
    v17 = *(unsigned __int8 *)(v291 + 72);
    v18 = sub_20E8C31DC(v291, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (!v17 && v18 == 0)
      return 2;
    sub_20E863438((uint64_t)&v279);
    sub_20E86A980(&v282[3], (uint64_t)"Invalid arguments", 17);
    if ((v289 & 0x10) != 0)
    {
      v30 = v288;
      if (v288 < v285)
      {
        v288 = v285;
        v30 = v285;
      }
      v31 = (const void **)&v284[15];
    }
    else
    {
      if ((v289 & 8) == 0)
      {
        v21 = 0;
        HIBYTE(v278) = 0;
        v22 = (void **)&__dst;
        goto LABEL_98;
      }
      v31 = (const void **)((char *)&v283 + 7);
      v30 = *(_QWORD *)&v284[7];
    }
    v57 = *v31;
    v21 = v30 - (_QWORD)*v31;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v21 >= 0x17)
    {
      v58 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v58 = v21 | 7;
      v59 = v58 + 1;
      v22 = (void **)operator new(v58 + 1);
      v277 = v21;
      v278 = v59 | 0x8000000000000000;
      __dst = v22;
    }
    else
    {
      HIBYTE(v278) = v30 - *(_BYTE *)v31;
      v22 = (void **)&__dst;
      if (!v21)
      {
LABEL_98:
        *((_BYTE *)v22 + v21) = 0;
        v267 = &v291;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v269 = std::chrono::system_clock::now().__d_.__rep_;
        v270 = 5;
        v271 = "unknown file";
        v272 = 143;
        v274 = 0;
        v275 = 0;
        v273 = "unknown function";
        if (v278 >= 0)
          v60 = (const char *)&__dst;
        else
          v60 = (const char *)__dst;
        v61 = *v267;
        v62 = (const char *)(*v267 + 16);
        v262 = *v267;
        v266 = v62;
        if (*(char *)(*v267 + 39) < 0)
        {
          v62 = *(const char **)(v61 + 16);
          v63 = *(_QWORD *)(v61 + 24);
        }
        else
        {
          v63 = *(unsigned __int8 *)(*v267 + 39);
        }
        v64 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v299);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v299);
          if ((_BYTE)v300 && (v299[23] & 0x80000000) != 0)
            operator delete(*(void **)v299);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v65 = byte_254A4A4F8;
        else
          v65 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v66 = byte_254A4A4F8[23];
        else
          v66 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v299 = os_log_create(v65, v62);
        v67 = &v299[8];
        if (v66 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v66 >= 0x17)
        {
          v68 = v17;
          v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v66 | 7) != 0x17)
            v69 = v66 | 7;
          v70 = v69 + 1;
          v67 = operator new(v69 + 1);
          *(_QWORD *)&v299[16] = v66;
          *(_QWORD *)&v300 = v70 | 0x8000000000000000;
          *(_QWORD *)&v299[8] = v67;
          v17 = v68;
        }
        else
        {
          BYTE7(v300) = v66;
          if (!v66)
          {
LABEL_119:
            v67[v66] = 0;
            BYTE8(v300) = 1;
            v71 = (char *)&v301;
            if (v63 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v63 >= 0x17)
            {
              v72 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v63 | 7) != 0x17)
                v72 = v63 | 7;
              v73 = v72 + 1;
              v71 = (char *)operator new(v72 + 1);
              v302 = v63;
              v303 = v73 | 0x8000000000000000;
              v301 = v71;
            }
            else
            {
              HIBYTE(v303) = v63;
              if (!v63)
              {
LABEL_127:
                v71[v63] = 0;
                v304 = 1;
                v74 = *(NSObject **)v299;
                if (SHIBYTE(v303) < 0)
                  operator delete(v301);
                if (BYTE8(v300) && SBYTE7(v300) < 0)
                  operator delete(*(void **)&v299[8]);
                if (*(_QWORD *)v299)
                  os_release(*(void **)v299);
                if (!v19 || !*(_QWORD *)(v19 + 24))
                {
                  os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v299 = 136315138;
                  *(_QWORD *)&v299[4] = v60;
                  v81 = (void *)_os_log_send_and_compose_impl();
                  if (v81)
                    free(v81);
                  goto LABEL_286;
                }
                v75 = _os_log_pack_size();
                v76 = (std::__shared_weak_count_vtbl *)operator new(v75, (std::align_val_t)8uLL);
                v77 = (std::__shared_weak_count *)operator new();
                v77->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v77->__shared_owners_ = 0;
                v77->__shared_weak_owners_ = 0;
                v77[1].__vftable = v76;
                *(_QWORD *)&v292 = v76;
                *((_QWORD *)&v292 + 1) = v76;
                v294 = 0;
                v295 = 0;
                v293 = v77;
                v78 = strlen(v60);
                if (v78 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v79 = v78;
                if (v78 >= 0x17)
                {
                  v98 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v78 | 7) != 0x17)
                    v98 = v78 | 7;
                  v99 = v98 + 1;
                  v80 = operator new(v98 + 1);
                  *(_QWORD *)&v297 = v79;
                  *((_QWORD *)&v297 + 1) = v99 | 0x8000000000000000;
                  v296 = v80;
                }
                else
                {
                  HIBYTE(v297) = v78;
                  v80 = &v296;
                  if (!v78)
                  {
LABEL_165:
                    *((_BYTE *)v80 + v79) = 0;
                    v100 = v296;
                    v305[0] = v297;
                    *(_QWORD *)((char *)v305 + 7) = *(_QWORD *)((char *)&v297 + 7);
                    v101 = HIBYTE(v297);
                    v102 = operator new(0x38uLL);
                    v102[1] = 0;
                    v102[2] = 0;
                    v102[3] = off_24C9ABC20;
                    *v102 = &off_24C9ABBD0;
                    v103 = v305[0];
                    v102[4] = v100;
                    v102[5] = v103;
                    *(_QWORD *)((char *)v102 + 47) = *(_QWORD *)((char *)v305 + 7);
                    *((_BYTE *)v102 + 55) = v101;
                    v305[0] = 0;
                    *(_QWORD *)((char *)v305 + 7) = 0;
                    v104 = v295;
                    v294 = (char *)(v102 + 3);
                    v295 = (std::__shared_weak_count *)v102;
                    if (v104)
                    {
                      v105 = (unint64_t *)&v104->__shared_owners_;
                      do
                        v106 = __ldaxr(v105);
                      while (__stlxr(v106 - 1, v105));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
                    *(_OWORD *)v299 = v292;
                    v107 = v294;
                    *(_QWORD *)&v299[16] = v293;
                    if (v293)
                    {
                      v108 = (unint64_t *)&v293->__shared_owners_;
                      do
                        v109 = __ldxr(v108);
                      while (__stxr(v109 + 1, v108));
                    }
                    v110 = v295;
                    *(_QWORD *)&v300 = v107;
                    *((_QWORD *)&v300 + 1) = v295;
                    if (v295)
                    {
                      v111 = (unint64_t *)&v295->__shared_owners_;
                      do
                        v112 = __ldxr(v111);
                      while (__stxr(v112 + 1, v111));
                      v301 = v107;
                      do
                        v113 = __ldaxr(v111);
                      while (__stlxr(v113 - 1, v111));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                        std::__shared_weak_count::__release_weak(v110);
                      }
                    }
                    else
                    {
                      v301 = v107;
                    }
                    v150 = v293;
                    if (v293)
                    {
                      v151 = (unint64_t *)&v293->__shared_owners_;
                      do
                        v152 = __ldaxr(v151);
                      while (__stlxr(v152 - 1, v151));
                      if (!v152)
                      {
                        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                        std::__shared_weak_count::__release_weak(v150);
                      }
                    }
                    v153 = *(_QWORD *)v299;
                    if (v301[31] >= 0)
                      v154 = v301 + 8;
                    else
                      v154 = (char *)*((_QWORD *)v301 + 1);
                    v155 = _os_log_pack_fill();
                    *(_DWORD *)v155 = 136315138;
                    *(_QWORD *)(v155 + 4) = v154;
                    v156 = operator new();
                    v157 = *(unsigned __int8 *)(v262 + 39);
                    v158 = v266;
                    if ((v157 & 0x80u) != 0)
                    {
                      v158 = *(const char **)(v262 + 16);
                      v157 = *(_QWORD *)(v262 + 24);
                    }
                    *(_QWORD *)v156 = v153;
                    *(_OWORD *)(v156 + 8) = *(_OWORD *)&v299[8];
                    *(_QWORD *)&v299[8] = 0;
                    *(_QWORD *)&v299[16] = 0;
                    *(_OWORD *)(v156 + 24) = v300;
                    v300 = 0uLL;
                    *(_QWORD *)(v156 + 40) = v158;
                    *(_QWORD *)(v156 + 48) = v157;
                    *(_BYTE *)(v156 + 56) = 16;
                    v296 = 0;
                    *(_QWORD *)&v292 = v156;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v292);
                    v159 = v292;
                    *(_QWORD *)&v292 = 0;
                    if (v159)
                    {
                      v160 = *(std::__shared_weak_count **)(v159 + 32);
                      if (v160)
                      {
                        v161 = (unint64_t *)&v160->__shared_owners_;
                        do
                          v162 = __ldaxr(v161);
                        while (__stlxr(v162 - 1, v161));
                        if (!v162)
                        {
                          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                          std::__shared_weak_count::__release_weak(v160);
                        }
                      }
                      v163 = *(std::__shared_weak_count **)(v159 + 16);
                      if (v163)
                      {
                        v164 = (unint64_t *)&v163->__shared_owners_;
                        do
                          v165 = __ldaxr(v164);
                        while (__stlxr(v165 - 1, v164));
                        if (!v165)
                        {
                          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                          std::__shared_weak_count::__release_weak(v163);
                        }
                      }
                      MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                      v166 = v296;
                      v296 = 0;
                      if (v166)
                      {
                        v167 = (std::__shared_weak_count *)v166[4];
                        if (v167)
                        {
                          v168 = (unint64_t *)&v167->__shared_owners_;
                          do
                            v169 = __ldaxr(v168);
                          while (__stlxr(v169 - 1, v168));
                          if (!v169)
                          {
                            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                            std::__shared_weak_count::__release_weak(v167);
                          }
                        }
                        v170 = (std::__shared_weak_count *)v166[2];
                        if (v170)
                        {
                          v171 = (unint64_t *)&v170->__shared_owners_;
                          do
                            v172 = __ldaxr(v171);
                          while (__stlxr(v172 - 1, v171));
                          if (!v172)
                          {
                            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                            std::__shared_weak_count::__release_weak(v170);
                          }
                        }
                        MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                      }
                    }
                    v173 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                    if (*((_QWORD *)&v300 + 1))
                    {
                      v174 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                      do
                        v175 = __ldaxr(v174);
                      while (__stlxr(v175 - 1, v174));
                      if (!v175)
                      {
                        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                        std::__shared_weak_count::__release_weak(v173);
                      }
                    }
                    v176 = *(std::__shared_weak_count **)&v299[16];
                    if (*(_QWORD *)&v299[16])
                    {
                      v177 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                      do
                        v178 = __ldaxr(v177);
                      while (__stlxr(v178 - 1, v177));
                      if (!v178)
                      {
                        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                        std::__shared_weak_count::__release_weak(v176);
                      }
                    }
LABEL_286:
                    if (v17)
                    {
                      v179 = (const char *)&__dst;
                      if (v278 < 0)
                        v179 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v267, "%s", v179);
                      sub_20E863570((uint64_t)&v267);
                    }
                    sub_20E863570((uint64_t)&v267);
                    v180 = v275;
                    if (v275)
                    {
                      v181 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v182 = __ldaxr(v181);
                      while (__stlxr(v182 - 1, v181));
                      if (!v182)
                      {
                        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                        std::__shared_weak_count::__release_weak(v180);
                      }
                    }
                    if (SHIBYTE(v278) < 0)
                      operator delete(__dst);
                    v279 = *MEMORY[0x24BEDB7F0];
                    v183 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(unint64_t *)((char *)&v279 + *(_QWORD *)(v279 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                              + 64);
                    *(_QWORD *)&v282[3] = v183;
                    *(_QWORD *)&v282[11] = MEMORY[0x24BEDB848] + 16;
                    if (v287 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v290);
                    return 2;
                  }
                }
                memcpy(v80, v60, v79);
                goto LABEL_165;
              }
            }
            memmove(v71, v62, v63);
            goto LABEL_127;
          }
        }
        memmove(v67, v65, v66);
        goto LABEL_119;
      }
    }
    memmove(v22, v57, v21);
    goto LABEL_98;
  }
  v7 = (uint64_t *)operator new(8uLL, MEMORY[0x24BEDB6B8]);
  if (!v7)
  {
    *a1 = 0;
    sub_20E923D94(&v291);
    if (**(int **)(v291 + 56) > 5)
      return 1;
    v23 = *(unsigned __int8 *)(v291 + 72);
    v24 = sub_20E8C31DC(v291, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && !v24)
      return 1;
    sub_20E863438((uint64_t)&v279);
    sub_20E86A980(&v282[3], (uint64_t)"Could not create context", 24);
    v264 = v25;
    if ((v289 & 0x10) != 0)
    {
      v114 = v288;
      if (v288 < v285)
      {
        v288 = v285;
        v114 = v285;
      }
      v115 = (const void **)&v284[15];
    }
    else
    {
      if ((v289 & 8) == 0)
      {
        v26 = 0;
        HIBYTE(v278) = 0;
        v27 = (void **)&__dst;
        goto LABEL_311;
      }
      v115 = (const void **)((char *)&v283 + 7);
      v114 = *(_QWORD *)&v284[7];
    }
    v184 = *v115;
    v26 = v114 - (_QWORD)*v115;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v26 >= 0x17)
    {
      v185 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v185 = v26 | 7;
      v186 = v185 + 1;
      v27 = (void **)operator new(v185 + 1);
      v277 = v26;
      v278 = v186 | 0x8000000000000000;
      __dst = v27;
    }
    else
    {
      HIBYTE(v278) = v114 - *(_BYTE *)v115;
      v27 = (void **)&__dst;
      if (!v26)
      {
LABEL_311:
        *((_BYTE *)v27 + v26) = 0;
        v267 = &v291;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v269 = std::chrono::system_clock::now().__d_.__rep_;
        v270 = 5;
        v271 = "unknown file";
        v272 = 149;
        v274 = 0;
        v275 = 0;
        v273 = "unknown function";
        if (v278 >= 0)
          v187 = (void **)&__dst;
        else
          v187 = __dst;
        v188 = *v267;
        v189 = (const char *)(*v267 + 16);
        v263 = v189;
        if (*(char *)(*v267 + 39) < 0)
        {
          v189 = *(const char **)(v188 + 16);
          v190 = *(_QWORD *)(v188 + 24);
        }
        else
        {
          v190 = *(unsigned __int8 *)(*v267 + 39);
        }
        v191 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v299);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v299);
          if ((_BYTE)v300 && (v299[23] & 0x80000000) != 0)
            operator delete(*(void **)v299);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v192 = byte_254A4A4F8;
        else
          v192 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v193 = byte_254A4A4F8[23];
        else
          v193 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v299 = os_log_create(v192, v189);
        v194 = &v299[8];
        if (v193 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v193 >= 0x17)
        {
          v195 = v23;
          v196 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v193 | 7) != 0x17)
            v196 = v193 | 7;
          v197 = v196 + 1;
          v194 = operator new(v196 + 1);
          *(_QWORD *)&v299[16] = v193;
          *(_QWORD *)&v300 = v197 | 0x8000000000000000;
          *(_QWORD *)&v299[8] = v194;
          v23 = v195;
        }
        else
        {
          BYTE7(v300) = v193;
          if (!v193)
          {
LABEL_332:
            v194[v193] = 0;
            BYTE8(v300) = 1;
            v198 = (char *)&v301;
            if (v190 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v199 = (const char *)v187;
            if (v190 >= 0x17)
            {
              v201 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v190 | 7) != 0x17)
                v201 = v190 | 7;
              v202 = v201 + 1;
              v200 = v264;
              v198 = (char *)operator new(v201 + 1);
              v302 = v190;
              v303 = v202 | 0x8000000000000000;
              v301 = v198;
            }
            else
            {
              HIBYTE(v303) = v190;
              v200 = v264;
              if (!v190)
              {
LABEL_340:
                v198[v190] = 0;
                v304 = 1;
                v203 = *(NSObject **)v299;
                if (SHIBYTE(v303) < 0)
                  operator delete(v301);
                if (BYTE8(v300) && SBYTE7(v300) < 0)
                  operator delete(*(void **)&v299[8]);
                if (*(_QWORD *)v299)
                  os_release(*(void **)v299);
                if (!v200 || !*(_QWORD *)(v200 + 24))
                {
                  os_log_type_enabled(v203, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v299 = 136315138;
                  *(_QWORD *)&v299[4] = v199;
                  v210 = (void *)_os_log_send_and_compose_impl();
                  if (v210)
                    free(v210);
                  goto LABEL_418;
                }
                v204 = _os_log_pack_size();
                v205 = (std::__shared_weak_count_vtbl *)operator new(v204, (std::align_val_t)8uLL);
                v206 = (std::__shared_weak_count *)operator new();
                v206->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v206->__shared_owners_ = 0;
                v206->__shared_weak_owners_ = 0;
                v206[1].__vftable = v205;
                *(_QWORD *)&v292 = v205;
                *((_QWORD *)&v292 + 1) = v205;
                v294 = 0;
                v295 = 0;
                v293 = v206;
                v207 = strlen(v199);
                if (v207 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v208 = v207;
                if (v207 >= 0x17)
                {
                  v211 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v207 | 7) != 0x17)
                    v211 = v207 | 7;
                  v212 = v211 + 1;
                  v209 = operator new(v211 + 1);
                  *(_QWORD *)&v297 = v208;
                  *((_QWORD *)&v297 + 1) = v212 | 0x8000000000000000;
                  v296 = v209;
                }
                else
                {
                  HIBYTE(v297) = v207;
                  v209 = &v296;
                  if (!v207)
                  {
LABEL_359:
                    *((_BYTE *)v209 + v208) = 0;
                    v213 = v296;
                    v305[0] = v297;
                    *(_QWORD *)((char *)v305 + 7) = *(_QWORD *)((char *)&v297 + 7);
                    v214 = HIBYTE(v297);
                    v215 = operator new(0x38uLL);
                    v215[1] = 0;
                    v215[2] = 0;
                    v215[3] = off_24C9ABC20;
                    *v215 = &off_24C9ABBD0;
                    v216 = v305[0];
                    v215[4] = v213;
                    v215[5] = v216;
                    *(_QWORD *)((char *)v215 + 47) = *(_QWORD *)((char *)v305 + 7);
                    *((_BYTE *)v215 + 55) = v214;
                    v305[0] = 0;
                    *(_QWORD *)((char *)v305 + 7) = 0;
                    v217 = v295;
                    v294 = (char *)(v215 + 3);
                    v295 = (std::__shared_weak_count *)v215;
                    if (v217)
                    {
                      v218 = (unint64_t *)&v217->__shared_owners_;
                      do
                        v219 = __ldaxr(v218);
                      while (__stlxr(v219 - 1, v218));
                      if (!v219)
                      {
                        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                        std::__shared_weak_count::__release_weak(v217);
                      }
                    }
                    *(_OWORD *)v299 = v292;
                    v220 = v294;
                    *(_QWORD *)&v299[16] = v293;
                    if (v293)
                    {
                      v221 = (unint64_t *)&v293->__shared_owners_;
                      do
                        v222 = __ldxr(v221);
                      while (__stxr(v222 + 1, v221));
                    }
                    v223 = v295;
                    *(_QWORD *)&v300 = v220;
                    *((_QWORD *)&v300 + 1) = v295;
                    if (v295)
                    {
                      v224 = (unint64_t *)&v295->__shared_owners_;
                      do
                        v225 = __ldxr(v224);
                      while (__stxr(v225 + 1, v224));
                      v301 = v220;
                      do
                        v226 = __ldaxr(v224);
                      while (__stlxr(v226 - 1, v224));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                        std::__shared_weak_count::__release_weak(v223);
                      }
                    }
                    else
                    {
                      v301 = v220;
                    }
                    v227 = v293;
                    if (v293)
                    {
                      v228 = (unint64_t *)&v293->__shared_owners_;
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                        std::__shared_weak_count::__release_weak(v227);
                      }
                    }
                    v230 = *(_QWORD *)v299;
                    if (v301[31] >= 0)
                      v231 = v301 + 8;
                    else
                      v231 = (char *)*((_QWORD *)v301 + 1);
                    v232 = _os_log_pack_fill();
                    *(_DWORD *)v232 = 136315138;
                    *(_QWORD *)(v232 + 4) = v231;
                    v233 = operator new();
                    v234 = *(unsigned __int8 *)(v188 + 39);
                    v235 = v263;
                    if ((v234 & 0x80u) != 0)
                    {
                      v235 = *(const char **)(v188 + 16);
                      v234 = *(_QWORD *)(v188 + 24);
                    }
                    *(_QWORD *)v233 = v230;
                    *(_OWORD *)(v233 + 8) = *(_OWORD *)&v299[8];
                    *(_QWORD *)&v299[8] = 0;
                    *(_QWORD *)&v299[16] = 0;
                    *(_OWORD *)(v233 + 24) = v300;
                    v300 = 0uLL;
                    *(_QWORD *)(v233 + 40) = v235;
                    *(_QWORD *)(v233 + 48) = v234;
                    *(_BYTE *)(v233 + 56) = 16;
                    v296 = 0;
                    *(_QWORD *)&v292 = v233;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v200 + 24) + 40))(*(_QWORD *)(v200 + 24), &v292);
                    v236 = v292;
                    *(_QWORD *)&v292 = 0;
                    if (v236)
                    {
                      v237 = *(std::__shared_weak_count **)(v236 + 32);
                      if (v237)
                      {
                        v238 = (unint64_t *)&v237->__shared_owners_;
                        do
                          v239 = __ldaxr(v238);
                        while (__stlxr(v239 - 1, v238));
                        if (!v239)
                        {
                          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                          std::__shared_weak_count::__release_weak(v237);
                        }
                      }
                      v240 = *(std::__shared_weak_count **)(v236 + 16);
                      if (v240)
                      {
                        v241 = (unint64_t *)&v240->__shared_owners_;
                        do
                          v242 = __ldaxr(v241);
                        while (__stlxr(v242 - 1, v241));
                        if (!v242)
                        {
                          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                          std::__shared_weak_count::__release_weak(v240);
                        }
                      }
                      MEMORY[0x212BC6398](v236, 0x10F0C40B62ED6C6);
                      v243 = v296;
                      v296 = 0;
                      if (v243)
                      {
                        v244 = (std::__shared_weak_count *)v243[4];
                        if (v244)
                        {
                          v245 = (unint64_t *)&v244->__shared_owners_;
                          do
                            v246 = __ldaxr(v245);
                          while (__stlxr(v246 - 1, v245));
                          if (!v246)
                          {
                            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                            std::__shared_weak_count::__release_weak(v244);
                          }
                        }
                        v247 = (std::__shared_weak_count *)v243[2];
                        if (v247)
                        {
                          v248 = (unint64_t *)&v247->__shared_owners_;
                          do
                            v249 = __ldaxr(v248);
                          while (__stlxr(v249 - 1, v248));
                          if (!v249)
                          {
                            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                            std::__shared_weak_count::__release_weak(v247);
                          }
                        }
                        MEMORY[0x212BC6398](v243, 0x10F0C40B62ED6C6);
                      }
                    }
                    v250 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                    if (*((_QWORD *)&v300 + 1))
                    {
                      v251 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                      do
                        v252 = __ldaxr(v251);
                      while (__stlxr(v252 - 1, v251));
                      if (!v252)
                      {
                        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                        std::__shared_weak_count::__release_weak(v250);
                      }
                    }
                    v253 = *(std::__shared_weak_count **)&v299[16];
                    if (*(_QWORD *)&v299[16])
                    {
                      v254 = (unint64_t *)(*(_QWORD *)&v299[16] + 8);
                      do
                        v255 = __ldaxr(v254);
                      while (__stlxr(v255 - 1, v254));
                      if (!v255)
                      {
                        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                        std::__shared_weak_count::__release_weak(v253);
                      }
                    }
LABEL_418:
                    if (v23)
                    {
                      v256 = (const char *)&__dst;
                      if (v278 < 0)
                        v256 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v267, "%s", v256);
                      sub_20E863570((uint64_t)&v267);
                    }
                    sub_20E863570((uint64_t)&v267);
                    v257 = v275;
                    if (v275)
                    {
                      v258 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v259 = __ldaxr(v258);
                      while (__stlxr(v259 - 1, v258));
                      if (!v259)
                      {
                        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                        std::__shared_weak_count::__release_weak(v257);
                      }
                    }
                    if (SHIBYTE(v278) < 0)
                      operator delete(__dst);
                    v279 = *MEMORY[0x24BEDB7F0];
                    v260 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(unint64_t *)((char *)&v279 + *(_QWORD *)(v279 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                              + 64);
                    *(_QWORD *)&v282[3] = v260;
                    *(_QWORD *)&v282[11] = MEMORY[0x24BEDB848] + 16;
                    if (v287 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v290);
                    return 1;
                  }
                }
                memcpy(v209, v199, v208);
                goto LABEL_359;
              }
            }
            memmove(v198, v189, v190);
            goto LABEL_340;
          }
        }
        memmove(v194, v192, v193);
        goto LABEL_332;
      }
    }
    memmove(v27, v184, v26);
    goto LABEL_311;
  }
  *v7 = 0;
  *a1 = v7;
  v8 = operator new();
  v279 = __PAIR64__(v5, v3);
  v280 = a3;
  v281 = 1;
  *(_DWORD *)v282 = 0;
  *(_OWORD *)&v282[4] = *(_OWORD *)v298;
  v283 = *(_OWORD *)&v298[16];
  *(_OWORD *)v284 = *(_OWORD *)&v298[32];
  *(_QWORD *)&v284[15] = *(_QWORD *)&v298[47];
  sub_20EF22B10(v8, (unsigned int *)&v279, 0, 0);
  result = **a1;
  **a1 = v8;
  if (result)
  {
    v10 = sub_20EF224A8(result);
    MEMORY[0x212BC6398](v10, 0x10A0C401B04D127);
    return 0;
  }
  return result;
}

void sub_20E923ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  if (*(_BYTE *)(v5 - 168) && *(char *)(v5 - 169) < 0)
    operator delete(*(void **)(v5 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20E923D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A0C401B04D127);
  _Unwind_Resume(a1);
}

void sub_20E923D88(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20E923D94(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC10))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.applecv3d");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC08);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC10);
  }
  *a1 = qword_254A5AC08;
}

void sub_20E923E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC10);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E923E88@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = result[30];
  if ((v3 & 0x10) != 0)
  {
    v4 = *((_QWORD *)result + 14);
    v5 = *((_QWORD *)result + 9);
    if (v4 < v5)
    {
      *((_QWORD *)result + 14) = v5;
      v4 = v5;
    }
    v6 = (const void *)*((_QWORD *)result + 8);
    v7 = v4 - (_QWORD)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    v6 = (const void *)*((_QWORD *)result + 5);
    v7 = *((_QWORD *)result + 7) - (_QWORD)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v8 = v7 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *((_QWORD *)a2 + 1) = v7;
    *((_QWORD *)a2 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a2 = v10;
    a2 = v10;
  }
  else
  {
    a2[23] = v7;
    if (!v7)
      goto LABEL_4;
  }
  result = memmove(a2, v6, v7);
  a2[v7] = 0;
  return result;
}

uint64_t *CV3DSurfaceDetectionRelease(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
    {
      v3 = sub_20EF224A8(v2);
      MEMORY[0x212BC6398](v3, 0x10A0C401B04D127);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *CV3DSurfaceDetectionSingleShotSurfaces(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  float64x2_t *v3;
  uint64_t *v4;
  unint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  int32x2_t v10;
  float v11;
  float v12;
  float32x4_t v13;
  double v14;
  float v15;
  int v17;
  unint64_t v18;
  unint64_t v19;
  size_t v21;
  void **p_dst;
  int v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  __int128 *v27;
  unsigned int v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  float32x2_t v33;
  float v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x2_t *v49;
  float64x2_t v50;
  float64x2_t *v51;
  float32x4_t v52;
  float32x2_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  float32x2_t *v59;
  uint64_t v60;
  __int32 v61;
  float32x2_t *v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  float32x2_t *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  __int128 *v72;
  float64_t v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  const char *v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  const char *v84;
  size_t v85;
  void **v86;
  unint64_t v87;
  uint64_t v88;
  void **v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  size_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  size_t v101;
  size_t v102;
  _BYTE *v103;
  void *v104;
  unint64_t v105;
  void **v106;
  unint64_t v107;
  void **v108;
  unint64_t v109;
  __int128 v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t *v113;
  _DWORD *v114;
  int32x2_t v115;
  int8x16_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  __int128 v132;
  float32x2_t v133;
  __int128 v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  _QWORD *v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  _QWORD *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *p_shared_owners;
  unint64_t v153;
  void *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  float32x2_t v161;
  double *v162;
  _DWORD *v163;
  int32x2_t v164;
  int8x16_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float v170;
  float v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  __int128 v180;
  __int128 v181;
  float32x2_t v182;
  __int128 v183;
  _QWORD *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  const char *v198;
  size_t v199;
  unint64_t v200;
  uint64_t v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  size_t v214;
  void *v215;
  _QWORD *v216;
  size_t v217;
  size_t v218;
  void **v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  size_t v227;
  const char *v228;
  unsigned __int8 v229;
  const char *v230;
  size_t v231;
  _BYTE *v232;
  uint64_t v233;
  unint64_t v234;
  const char *v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  NSObject *v243;
  size_t v244;
  void *v245;
  _QWORD *v246;
  size_t v247;
  size_t v248;
  void **v249;
  void *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  void *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  const char *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  void **v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void **v288;
  char v289;
  _QWORD *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void **v302;
  char v303;
  _QWORD *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  const void *v314;
  int v315;
  uint64_t v316;
  __int128 v317;
  unint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  const char *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  void **v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  const char *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  void *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  int v354;
  uint64_t v355;
  _QWORD *v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  void **v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  const char *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  void *v389;
  std::logic_error *exception;
  void *v392;
  uint64_t v393;
  uint64_t *v394;
  float64x2_t v395;
  float32x2_t *v396;
  float32x2_t *v397;
  float64x2_t v398;
  __int128 v399;
  __int128 v400;
  const char *v401;
  float64x2_t v402;
  unint64_t v403;
  int v404;
  __int128 v405;
  __int128 v406;
  char *__s[2];
  char *__sa[2];
  const char *__sb;
  char *__sc[2];
  char *__sd[2];
  const char *__se;
  const char *__sf;
  _QWORD v414[29];
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  char v419;
  void *v420;
  void *v421;
  void *v422;
  void *v423;
  char v424;
  _QWORD v425[2];
  __int128 v426;
  __int128 v427;
  __int128 v428;
  const void *v429;
  double v430[2];
  __int128 v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  void *v440;
  void *v441;
  void *v442;
  void *v443;
  void *v444;
  uint64_t v445;
  char v446;
  void *v447;
  void *v448;
  void *v449;
  void *v450;
  char v451;
  char v452;
  _BYTE v453[48];
  float32x2_t v454;
  float32x2_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  std::__shared_weak_count *v459;
  __int128 v460;
  std::__shared_weak_count *rep;
  char *v462;
  const char *v463;
  int v464;
  const char *v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  void **__dst;
  __int128 v469;
  __int128 v470;
  int64_t v471;
  void *__p[3];
  __int128 v473;
  void *v474[2];
  unint64_t v475;
  char v476;
  unint64_t v477;
  void *v478;
  char v479;
  unint64_t v480;
  int v481;
  uint64_t v482;
  uint64_t v483[2];
  _BYTE v484[24];
  __int128 v485;
  char *v486;
  const char *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  uint64_t v490;

  v490 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    sub_20E923D94(v483);
    if (**(int **)(v483[0] + 56) > 5)
      return 0;
    v17 = *(unsigned __int8 *)(v483[0] + 72);
    v18 = sub_20E8C31DC(v483[0], "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (!v17 && v18 == 0)
      return 0;
    sub_20E863438((uint64_t)v425);
    sub_20E86A980(&v426, (uint64_t)"Invalid handle or surface detector not created", 46);
    if ((LOBYTE(v433.f64[0]) & 0x10) != 0)
    {
      v73 = v432.f64[1];
      if (*(_QWORD *)&v432.f64[1] < *(_QWORD *)&v430[0])
      {
        v432.f64[1] = v430[0];
        v73 = v430[0];
      }
      v74 = v429;
      v21 = *(_QWORD *)&v73 - (_QWORD)v429;
      if (*(_QWORD *)&v73 - (_QWORD)v429 > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_149;
    }
    else
    {
      if ((LOBYTE(v433.f64[0]) & 8) == 0)
      {
        v21 = 0;
        HIBYTE(v469) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_75;
      }
      v74 = (const void *)*((_QWORD *)&v427 + 1);
      v21 = *((_QWORD *)&v428 + 1) - *((_QWORD *)&v427 + 1);
      if (*((_QWORD *)&v428 + 1) - *((_QWORD *)&v427 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_149:
        sub_20E860B7C();
    }
    if (v21 >= 0x17)
    {
      v75 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v75 = v21 | 7;
      v76 = v75 + 1;
      p_dst = (void **)operator new(v75 + 1);
      *((_QWORD *)&v469 + 1) = v76 | 0x8000000000000000;
      __dst = p_dst;
      *(_QWORD *)&v469 = v21;
    }
    else
    {
      HIBYTE(v469) = v21;
      p_dst = (void **)&__dst;
      if (!v21)
      {
LABEL_75:
        *((_BYTE *)p_dst + v21) = 0;
        *(_QWORD *)v484 = v483;
        *(std::chrono::steady_clock::time_point *)&v484[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v484[16] = std::chrono::system_clock::now();
        LODWORD(v485) = 5;
        *((_QWORD *)&v485 + 1) = "unknown file";
        LODWORD(v486) = 231;
        v488 = 0;
        v489 = 0;
        v487 = "unknown function";
        if (v469 >= 0)
          v77 = (void **)&__dst;
        else
          v77 = __dst;
        v78 = **(_QWORD **)v484;
        v79 = **(_QWORD **)v484 + 16;
        if (*(char *)(**(_QWORD **)v484 + 39) < 0)
        {
          v81 = *(const char **)(v78 + 16);
          v80 = *(_QWORD *)(v78 + 24);
          v83 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v83 & 1) != 0)
            goto LABEL_82;
        }
        else
        {
          v80 = *(unsigned __int8 *)(**(_QWORD **)v484 + 39);
          v81 = (const char *)(v78 + 16);
          v82 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v82 & 1) != 0)
            goto LABEL_82;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
          if ((_BYTE)v473 && SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_82:
        if (byte_254A4A4F8[23] >= 0)
          v84 = byte_254A4A4F8;
        else
          v84 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v85 = byte_254A4A4F8[23];
        else
          v85 = *(_QWORD *)&byte_254A4A4F8[8];
        __p[0] = os_log_create(v84, v81);
        v86 = &__p[1];
        if (v85 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v85 >= 0x17)
        {
          __sb = v81;
          v87 = v19;
          v88 = v78;
          v89 = v77;
          v90 = v17;
          v91 = v79;
          v92 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v85 | 7) != 0x17)
            v92 = v85 | 7;
          v93 = v92 + 1;
          v86 = (void **)operator new(v92 + 1);
          *(_QWORD *)&v473 = v93 | 0x8000000000000000;
          __p[1] = v86;
          __p[2] = (void *)v85;
          v79 = v91;
          v17 = v90;
          v77 = v89;
          v78 = v88;
          v19 = v87;
          v81 = __sb;
        }
        else
        {
          BYTE7(v473) = v85;
          if (!v85)
          {
LABEL_96:
            *((_BYTE *)v86 + v85) = 0;
            BYTE8(v473) = 1;
            v94 = v474;
            if (v80 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v80 >= 0x17)
            {
              v95 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v80 | 7) != 0x17)
                v95 = v80 | 7;
              v96 = v95 + 1;
              v94 = operator new(v95 + 1);
              v475 = v96 | 0x8000000000000000;
              v474[0] = v94;
              v474[1] = (void *)v80;
            }
            else
            {
              HIBYTE(v475) = v80;
              if (!v80)
              {
LABEL_104:
                *((_BYTE *)v94 + v80) = 0;
                v476 = 1;
                v97 = __p[0];
                if (SHIBYTE(v475) < 0)
                  operator delete(v474[0]);
                if (BYTE8(v473) && SBYTE7(v473) < 0)
                  operator delete(__p[1]);
                if (__p[0])
                  os_release(__p[0]);
                if (!v19 || !*(_QWORD *)(v19 + 24))
                {
                  os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
                  LODWORD(__p[0]) = 136315138;
                  *(void **)((char *)__p + 4) = v77;
                  v104 = (void *)_os_log_send_and_compose_impl();
                  if (v104)
                    free(v104);
                  goto LABEL_349;
                }
                v98 = _os_log_pack_size();
                v99 = (std::__shared_weak_count_vtbl *)operator new(v98, (std::align_val_t)8uLL);
                v100 = (std::__shared_weak_count *)operator new();
                v100->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v100->__shared_owners_ = 0;
                v100->__shared_weak_owners_ = 0;
                v100[1].__vftable = v99;
                *(_QWORD *)&v460 = v99;
                *((_QWORD *)&v460 + 1) = v99;
                v463 = 0;
                rep = v100;
                v462 = 0;
                v101 = strlen((const char *)v77);
                if (v101 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v102 = v101;
                if (v101 >= 0x17)
                {
                  v145 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v101 | 7) != 0x17)
                    v145 = v101 | 7;
                  v146 = v145 + 1;
                  v103 = operator new(v145 + 1);
                  *(_QWORD *)&v453[16] = v146 | 0x8000000000000000;
                  *(_QWORD *)v453 = v103;
                  *(_QWORD *)&v453[8] = v102;
                }
                else
                {
                  v453[23] = v101;
                  v103 = v453;
                  if (!v101)
                  {
LABEL_154:
                    v103[v102] = 0;
                    *(_QWORD *)&v470 = *(_QWORD *)&v453[8];
                    v147 = *(_QWORD *)v453;
                    *(_QWORD *)((char *)&v470 + 7) = *(_QWORD *)&v453[15];
                    v148 = v453[23];
                    v149 = operator new(0x38uLL);
                    v149[1] = 0;
                    v149[2] = 0;
                    v149[3] = off_24C9ABC20;
                    *v149 = &off_24C9ABBD0;
                    v150 = v470;
                    v149[4] = v147;
                    v149[5] = v150;
                    *(_QWORD *)((char *)v149 + 47) = *(_QWORD *)((char *)&v470 + 7);
                    *((_BYTE *)v149 + 55) = v148;
                    *(_QWORD *)&v470 = 0;
                    *(_QWORD *)((char *)&v470 + 7) = 0;
                    v151 = (std::__shared_weak_count *)v463;
                    v462 = (char *)(v149 + 3);
                    v463 = (const char *)v149;
                    if (v151)
                    {
                      p_shared_owners = (unint64_t *)&v151->__shared_owners_;
                      do
                        v153 = __ldaxr(p_shared_owners);
                      while (__stlxr(v153 - 1, p_shared_owners));
                      if (!v153)
                      {
                        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                        std::__shared_weak_count::__release_weak(v151);
                      }
                    }
                    *(_OWORD *)__p = v460;
                    v154 = v462;
                    __p[2] = rep;
                    if (rep)
                    {
                      v155 = (unint64_t *)&rep->__shared_owners_;
                      do
                        v156 = __ldxr(v155);
                      while (__stxr(v156 + 1, v155));
                    }
                    v157 = (std::__shared_weak_count *)v463;
                    *(_QWORD *)&v473 = v154;
                    *((_QWORD *)&v473 + 1) = v463;
                    if (v463)
                    {
                      v158 = (unint64_t *)(v463 + 8);
                      do
                        v159 = __ldxr(v158);
                      while (__stxr(v159 + 1, v158));
                      v474[0] = v154;
                      do
                        v160 = __ldaxr(v158);
                      while (__stlxr(v160 - 1, v158));
                      if (!v160)
                      {
                        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                        std::__shared_weak_count::__release_weak(v157);
                      }
                    }
                    else
                    {
                      v474[0] = v154;
                    }
                    v251 = rep;
                    if (rep)
                    {
                      v252 = (unint64_t *)&rep->__shared_owners_;
                      do
                        v253 = __ldaxr(v252);
                      while (__stlxr(v253 - 1, v252));
                      if (!v253)
                      {
                        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                        std::__shared_weak_count::__release_weak(v251);
                      }
                    }
                    v254 = __p[0];
                    if (*((char *)v474[0] + 31) >= 0)
                      v255 = (char *)v474[0] + 8;
                    else
                      v255 = (char *)*((_QWORD *)v474[0] + 1);
                    v256 = _os_log_pack_fill();
                    *(_DWORD *)v256 = 136315138;
                    *(_QWORD *)(v256 + 4) = v255;
                    v257 = operator new();
                    v258 = *(unsigned __int8 *)(v78 + 39);
                    if ((v258 & 0x80u) == 0)
                      v259 = v79;
                    else
                      v259 = *(_QWORD *)(v78 + 16);
                    if ((v258 & 0x80u) != 0)
                      v258 = *(_QWORD *)(v78 + 24);
                    *(_QWORD *)v257 = v254;
                    *(_OWORD *)(v257 + 8) = *(_OWORD *)&__p[1];
                    __p[1] = 0;
                    __p[2] = 0;
                    *(_OWORD *)(v257 + 24) = v473;
                    v473 = 0uLL;
                    *(_QWORD *)(v257 + 40) = v259;
                    *(_QWORD *)(v257 + 48) = v258;
                    *(_BYTE *)(v257 + 56) = 16;
                    *(_QWORD *)v453 = 0;
                    *(_QWORD *)&v460 = v257;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v460);
                    v260 = v460;
                    *(_QWORD *)&v460 = 0;
                    if (v260)
                    {
                      v261 = *(std::__shared_weak_count **)(v260 + 32);
                      if (v261)
                      {
                        v262 = (unint64_t *)&v261->__shared_owners_;
                        do
                          v263 = __ldaxr(v262);
                        while (__stlxr(v263 - 1, v262));
                        if (!v263)
                        {
                          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                          std::__shared_weak_count::__release_weak(v261);
                        }
                      }
                      v264 = *(std::__shared_weak_count **)(v260 + 16);
                      if (v264)
                      {
                        v265 = (unint64_t *)&v264->__shared_owners_;
                        do
                          v266 = __ldaxr(v265);
                        while (__stlxr(v266 - 1, v265));
                        if (!v266)
                        {
                          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                          std::__shared_weak_count::__release_weak(v264);
                        }
                      }
                      MEMORY[0x212BC6398](v260, 0x10F0C40B62ED6C6);
                      v267 = *(_QWORD *)v453;
                      *(_QWORD *)v453 = 0;
                      if (v267)
                      {
                        v268 = *(std::__shared_weak_count **)(v267 + 32);
                        if (v268)
                        {
                          v269 = (unint64_t *)&v268->__shared_owners_;
                          do
                            v270 = __ldaxr(v269);
                          while (__stlxr(v270 - 1, v269));
                          if (!v270)
                          {
                            ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                            std::__shared_weak_count::__release_weak(v268);
                          }
                        }
                        v271 = *(std::__shared_weak_count **)(v267 + 16);
                        if (v271)
                        {
                          v272 = (unint64_t *)&v271->__shared_owners_;
                          do
                            v273 = __ldaxr(v272);
                          while (__stlxr(v273 - 1, v272));
                          if (!v273)
                          {
                            ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                            std::__shared_weak_count::__release_weak(v271);
                          }
                        }
                        MEMORY[0x212BC6398](v267, 0x10F0C40B62ED6C6);
                      }
                    }
                    v274 = (std::__shared_weak_count *)*((_QWORD *)&v473 + 1);
                    if (*((_QWORD *)&v473 + 1))
                    {
                      v275 = (unint64_t *)(*((_QWORD *)&v473 + 1) + 8);
                      do
                        v276 = __ldaxr(v275);
                      while (__stlxr(v276 - 1, v275));
                      if (!v276)
                      {
                        ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                        std::__shared_weak_count::__release_weak(v274);
                      }
                    }
                    v277 = (std::__shared_weak_count *)__p[2];
                    if (__p[2])
                    {
                      v278 = (unint64_t *)((char *)__p[2] + 8);
                      do
                        v279 = __ldaxr(v278);
                      while (__stlxr(v279 - 1, v278));
                      if (!v279)
                      {
                        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                        std::__shared_weak_count::__release_weak(v277);
                      }
                    }
LABEL_349:
                    if (v17)
                    {
                      v280 = (const char *)&__dst;
                      if (v469 < 0)
                        v280 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)v484, "%s", v280);
                      sub_20E863570((uint64_t)v484);
                    }
                    sub_20E863570((uint64_t)v484);
                    v281 = v489;
                    if (v489)
                    {
                      v282 = (unint64_t *)&v489->__shared_owners_;
                      do
                        v283 = __ldaxr(v282);
                      while (__stlxr(v283 - 1, v282));
                      if (!v283)
                      {
                        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                        std::__shared_weak_count::__release_weak(v281);
                      }
                    }
                    if (SHIBYTE(v469) < 0)
                      operator delete(__dst);
                    v425[0] = *MEMORY[0x24BEDB7F0];
                    v284 = (void **)v425;
                    v285 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v425 + *(_QWORD *)(v425[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&v426 = v285;
                    *((_QWORD *)&v426 + 1) = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(v432.f64[0]) < 0)
                      operator delete((void *)v431);
                    std::streambuf::~streambuf();
                    goto LABEL_553;
                  }
                }
                memcpy(v103, v77, v102);
                goto LABEL_154;
              }
            }
            memmove(v94, v81, v80);
            goto LABEL_104;
          }
        }
        memmove(v86, v84, v85);
        goto LABEL_96;
      }
    }
    memmove(p_dst, v74, v21);
    goto LABEL_75;
  }
  v2 = a2;
  v3 = *(float64x2_t **)a2;
  if (!*(_QWORD *)a2)
  {
    sub_20E923D94(&v458);
    if (**(int **)(v458 + 56) > 5)
      return 0;
    v23 = *(unsigned __int8 *)(v458 + 72);
    v24 = sub_20E8C31DC(v458, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && !v24)
      return 0;
    sub_20E863438((uint64_t)__p);
    sub_20E86A980(&__p[2], (uint64_t)"Invalid parameters. Require a valid point cloud.", 48);
    if ((v481 & 0x10) != 0)
    {
      v107 = v480;
      if (v480 < v477)
      {
        v480 = v477;
        v107 = v477;
      }
      v108 = (void **)&v476;
    }
    else
    {
      if ((v481 & 8) == 0)
      {
        v26 = 0;
        HIBYTE(v471) = 0;
        v27 = &v470;
        goto LABEL_258;
      }
      v108 = v474;
      v107 = v475;
    }
    v221 = *v108;
    v26 = v107 - (_QWORD)*v108;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v26 >= 0x17)
    {
      v222 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v222 = v26 | 7;
      v223 = v222 + 1;
      v27 = (__int128 *)operator new(v222 + 1);
      v471 = v223 | 0x8000000000000000;
      *(_QWORD *)&v470 = v27;
      *((_QWORD *)&v470 + 1) = v26;
    }
    else
    {
      HIBYTE(v471) = v107 - *(_BYTE *)v108;
      v27 = &v470;
      if (!v26)
      {
LABEL_258:
        *((_BYTE *)v27 + v26) = 0;
        *(_QWORD *)&v460 = &v458;
        *((std::chrono::steady_clock::time_point *)&v460 + 1) = std::chrono::steady_clock::now();
        rep = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v462) = 5;
        v463 = "unknown file";
        v464 = 174;
        v467 = 0;
        v465 = "unknown function";
        v466 = 0;
        if (v471 >= 0)
          v224 = (const char *)&v470;
        else
          v224 = (const char *)v470;
        v225 = *(_QWORD *)v460;
        v226 = *(_QWORD *)v460 + 16;
        if (*(char *)(*(_QWORD *)v460 + 39) < 0)
        {
          v228 = *(const char **)(v225 + 16);
          v227 = *(_QWORD *)(v225 + 24);
        }
        else
        {
          v227 = *(unsigned __int8 *)(*(_QWORD *)v460 + 39);
          v228 = (const char *)(*(_QWORD *)v460 + 16);
        }
        v229 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v229 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v484);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v484);
          if ((_BYTE)v485 && (v484[23] & 0x80000000) != 0)
            operator delete(*(void **)v484);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v230 = byte_254A4A4F8;
        else
          v230 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v231 = byte_254A4A4F8[23];
        else
          v231 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v484 = os_log_create(v230, v228);
        v232 = &v484[8];
        if (v231 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v231 >= 0x17)
        {
          __sf = v228;
          v233 = v225;
          v234 = v25;
          v235 = v224;
          v236 = v23;
          v237 = v226;
          v238 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v231 | 7) != 0x17)
            v238 = v231 | 7;
          v239 = v238 + 1;
          v232 = operator new(v238 + 1);
          *(_QWORD *)&v484[16] = v231;
          *(_QWORD *)&v485 = v239 | 0x8000000000000000;
          *(_QWORD *)&v484[8] = v232;
          v226 = v237;
          v23 = v236;
          v224 = v235;
          v25 = v234;
          v225 = v233;
          v228 = __sf;
        }
        else
        {
          BYTE7(v485) = v231;
          if (!v231)
          {
LABEL_279:
            v232[v231] = 0;
            BYTE8(v485) = 1;
            v240 = (char *)&v486;
            if (v227 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v227 >= 0x17)
            {
              v241 = (v227 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v227 | 7) != 0x17)
                v241 = v227 | 7;
              v242 = v241 + 1;
              v240 = (char *)operator new(v241 + 1);
              v487 = (const char *)v227;
              v488 = v242 | 0x8000000000000000;
              v486 = v240;
            }
            else
            {
              HIBYTE(v488) = v227;
              if (!v227)
              {
LABEL_287:
                v240[v227] = 0;
                LOBYTE(v489) = 1;
                v243 = *(NSObject **)v484;
                if (SHIBYTE(v488) < 0)
                  operator delete(v486);
                if (BYTE8(v485) && SBYTE7(v485) < 0)
                  operator delete(*(void **)&v484[8]);
                if (*(_QWORD *)v484)
                  os_release(*(void **)v484);
                if (!v25 || !*(_QWORD *)(v25 + 24))
                {
                  os_log_type_enabled(v243, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v484 = 136315138;
                  *(_QWORD *)&v484[4] = v224;
                  v250 = (void *)_os_log_send_and_compose_impl();
                  if (v250)
                    free(v250);
                  goto LABEL_539;
                }
                v244 = _os_log_pack_size();
                v245 = operator new(v244, (std::align_val_t)8uLL);
                v246 = (_QWORD *)operator new();
                *v246 = &off_24C9ABB80;
                v246[1] = 0;
                v246[2] = 0;
                v246[3] = v245;
                *(_QWORD *)v453 = v245;
                *(_QWORD *)&v453[8] = v245;
                *(_QWORD *)&v453[32] = 0;
                *(_OWORD *)&v453[16] = (unint64_t)v246;
                v247 = strlen(v224);
                if (v247 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v248 = v247;
                if (v247 >= 0x17)
                {
                  v300 = (v247 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v247 | 7) != 0x17)
                    v300 = v247 | 7;
                  v301 = v300 + 1;
                  v249 = (void **)operator new(v300 + 1);
                  *((_QWORD *)&v469 + 1) = v301 | 0x8000000000000000;
                  __dst = v249;
                  *(_QWORD *)&v469 = v248;
                }
                else
                {
                  HIBYTE(v469) = v247;
                  v249 = (void **)&__dst;
                  if (!v247)
                  {
LABEL_386:
                    *((_BYTE *)v249 + v248) = 0;
                    v302 = __dst;
                    v483[0] = v469;
                    *(uint64_t *)((char *)v483 + 7) = *(_QWORD *)((char *)&v469 + 7);
                    v303 = HIBYTE(v469);
                    v304 = operator new(0x38uLL);
                    v304[1] = 0;
                    v304[2] = 0;
                    v304[3] = off_24C9ABC20;
                    *v304 = &off_24C9ABBD0;
                    v305 = v483[0];
                    v304[4] = v302;
                    v304[5] = v305;
                    *(_QWORD *)((char *)v304 + 47) = *(uint64_t *)((char *)v483 + 7);
                    *((_BYTE *)v304 + 55) = v303;
                    memset(v483, 0, 15);
                    v306 = *(std::__shared_weak_count **)&v453[32];
                    *(_QWORD *)&v453[24] = v304 + 3;
                    *(_QWORD *)&v453[32] = v304;
                    if (v306)
                    {
                      v307 = (unint64_t *)&v306->__shared_owners_;
                      do
                        v308 = __ldaxr(v307);
                      while (__stlxr(v308 - 1, v307));
                      if (!v308)
                      {
                        ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                        std::__shared_weak_count::__release_weak(v306);
                      }
                    }
                    *(_OWORD *)v484 = *(_OWORD *)v453;
                    *(_QWORD *)&v484[16] = *(_QWORD *)&v453[16];
                    if (*(_QWORD *)&v453[16])
                    {
                      v309 = (unint64_t *)(*(_QWORD *)&v453[16] + 8);
                      do
                        v310 = __ldxr(v309);
                      while (__stxr(v310 + 1, v309));
                    }
                    v485 = *(_OWORD *)&v453[24];
                    if (*(_QWORD *)&v453[32])
                    {
                      v311 = (unint64_t *)(*(_QWORD *)&v453[32] + 8);
                      do
                        v312 = __ldxr(v311);
                      while (__stxr(v312 + 1, v311));
                      v486 = *(char **)&v453[24];
                      do
                        v313 = __ldaxr(v311);
                      while (__stlxr(v313 - 1, v311));
                      if (!v313)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)&v453[32] + 16))(*(_QWORD *)&v453[32]);
                        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v453[32]);
                      }
                    }
                    else
                    {
                      v486 = *(char **)&v453[24];
                    }
                    if (*(_QWORD *)&v453[16])
                    {
                      v357 = (unint64_t *)(*(_QWORD *)&v453[16] + 8);
                      do
                        v358 = __ldaxr(v357);
                      while (__stlxr(v358 - 1, v357));
                      if (!v358)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)&v453[16] + 16))(*(_QWORD *)&v453[16]);
                        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v453[16]);
                      }
                    }
                    v359 = *(_QWORD *)v484;
                    if (v486[31] >= 0)
                      v360 = v486 + 8;
                    else
                      v360 = (char *)*((_QWORD *)v486 + 1);
                    v361 = _os_log_pack_fill();
                    *(_DWORD *)v361 = 136315138;
                    *(_QWORD *)(v361 + 4) = v360;
                    v362 = operator new();
                    v363 = *(unsigned __int8 *)(v225 + 39);
                    if ((v363 & 0x80u) == 0)
                      v364 = v226;
                    else
                      v364 = *(_QWORD *)(v225 + 16);
                    if ((v363 & 0x80u) != 0)
                      v363 = *(_QWORD *)(v225 + 24);
                    *(_QWORD *)v362 = v359;
                    *(_OWORD *)(v362 + 8) = *(_OWORD *)&v484[8];
                    *(_QWORD *)&v484[8] = 0;
                    *(_QWORD *)&v484[16] = 0;
                    *(_OWORD *)(v362 + 24) = v485;
                    v485 = 0uLL;
                    *(_QWORD *)(v362 + 40) = v364;
                    *(_QWORD *)(v362 + 48) = v363;
                    *(_BYTE *)(v362 + 56) = 16;
                    __dst = 0;
                    *(_QWORD *)v453 = v362;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), v453);
                    v365 = *(_QWORD *)v453;
                    *(_QWORD *)v453 = 0;
                    if (v365)
                    {
                      v366 = *(std::__shared_weak_count **)(v365 + 32);
                      if (v366)
                      {
                        v367 = (unint64_t *)&v366->__shared_owners_;
                        do
                          v368 = __ldaxr(v367);
                        while (__stlxr(v368 - 1, v367));
                        if (!v368)
                        {
                          ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                          std::__shared_weak_count::__release_weak(v366);
                        }
                      }
                      v369 = *(std::__shared_weak_count **)(v365 + 16);
                      if (v369)
                      {
                        v370 = (unint64_t *)&v369->__shared_owners_;
                        do
                          v371 = __ldaxr(v370);
                        while (__stlxr(v371 - 1, v370));
                        if (!v371)
                        {
                          ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                          std::__shared_weak_count::__release_weak(v369);
                        }
                      }
                      MEMORY[0x212BC6398](v365, 0x10F0C40B62ED6C6);
                      v372 = __dst;
                      __dst = 0;
                      if (v372)
                      {
                        v373 = (std::__shared_weak_count *)v372[4];
                        if (v373)
                        {
                          v374 = (unint64_t *)&v373->__shared_owners_;
                          do
                            v375 = __ldaxr(v374);
                          while (__stlxr(v375 - 1, v374));
                          if (!v375)
                          {
                            ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
                            std::__shared_weak_count::__release_weak(v373);
                          }
                        }
                        v376 = (std::__shared_weak_count *)v372[2];
                        if (v376)
                        {
                          v377 = (unint64_t *)&v376->__shared_owners_;
                          do
                            v378 = __ldaxr(v377);
                          while (__stlxr(v378 - 1, v377));
                          if (!v378)
                          {
                            ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                            std::__shared_weak_count::__release_weak(v376);
                          }
                        }
                        MEMORY[0x212BC6398](v372, 0x10F0C40B62ED6C6);
                      }
                    }
                    v379 = (std::__shared_weak_count *)*((_QWORD *)&v485 + 1);
                    if (*((_QWORD *)&v485 + 1))
                    {
                      v380 = (unint64_t *)(*((_QWORD *)&v485 + 1) + 8);
                      do
                        v381 = __ldaxr(v380);
                      while (__stlxr(v381 - 1, v380));
                      if (!v381)
                      {
                        ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                        std::__shared_weak_count::__release_weak(v379);
                      }
                    }
                    v382 = *(std::__shared_weak_count **)&v484[16];
                    if (*(_QWORD *)&v484[16])
                    {
                      v383 = (unint64_t *)(*(_QWORD *)&v484[16] + 8);
                      do
                        v384 = __ldaxr(v383);
                      while (__stlxr(v384 - 1, v383));
                      if (!v384)
                      {
                        ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                        std::__shared_weak_count::__release_weak(v382);
                      }
                    }
LABEL_539:
                    if (v23)
                    {
                      v385 = (const char *)&v470;
                      if (v471 < 0)
                        v385 = (const char *)v470;
                      sub_20E8C003C((uint64_t)&v460, "%s", v385);
                      sub_20E863570((uint64_t)&v460);
                    }
                    sub_20E863570((uint64_t)&v460);
                    v386 = v467;
                    if (v467)
                    {
                      v387 = (unint64_t *)&v467->__shared_owners_;
                      do
                        v388 = __ldaxr(v387);
                      while (__stlxr(v388 - 1, v387));
                      if (!v388)
                      {
                        ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                        std::__shared_weak_count::__release_weak(v386);
                      }
                    }
                    if (SHIBYTE(v471) < 0)
                      operator delete((void *)v470);
                    __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                    v284 = __p;
                    v389 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    __p[2] = v389;
                    *(_QWORD *)&v473 = MEMORY[0x24BEDB848] + 16;
                    if (v479 < 0)
                      operator delete(v478);
                    std::streambuf::~streambuf();
LABEL_553:
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v284 + 16);
                    return 0;
                  }
                }
                memcpy(v249, v224, v248);
                goto LABEL_386;
              }
            }
            memmove(v240, v228, v227);
            goto LABEL_287;
          }
        }
        memmove(v232, v230, v231);
        goto LABEL_279;
      }
    }
    memmove(v27, v221, v26);
    goto LABEL_258;
  }
  v4 = a1;
  v6 = *(double **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(double *)(a2 + 88);
  v395 = *(float64x2_t *)(a2 + 72);
  v398 = *(float64x2_t *)(a2 + 96);
  v8 = *(double *)(a2 + 112);
  v9 = *(double *)(a2 + 136);
  v402 = *(float64x2_t *)(a2 + 120);
  *(_OWORD *)__s = *(_OWORD *)(a2 + 144);
  v10 = (int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 24));
  v11 = fabsf(*(float *)v10.i32);
  v12 = *(float *)&v10.i32[1];
  v13 = vcvt_hight_f32_f64(v10, *(float64x2_t *)(a2 + 40));
  v14 = *(double *)(a2 + 160);
  v457 = *(_QWORD *)(a2 + 56);
  *(float32x4_t *)__p = v13;
  v15 = fabsf(v12);
  if (v11 < 0.00000011921 || v15 < 0.00000011921)
  {
    v459 = 0;
    v458 = 0;
    goto LABEL_57;
  }
  sub_20EF4B1AC((__int128 *)__p, &v457, &v458);
  if (!v458)
  {
LABEL_57:
    sub_20E923D94(&v456);
    if (**(int **)(v456 + 56) > 5
      || (v68 = *(unsigned __int8 *)(v456 + 72),
          v69 = sub_20E8C31DC(v456, "OSLogSurrogateAppender", 1, 0),
          v70 = v69,
          !v68)
      && !v69)
    {
LABEL_461:
      LOBYTE(v425[0]) = 0;
      v452 = 0;
      goto LABEL_462;
    }
    sub_20E863438((uint64_t)__p);
    sub_20E86A980(&__p[2], (uint64_t)"Invalid camera parameters, returning no surfaces", 48);
    v404 = v68;
    if ((v481 & 0x10) != 0)
    {
      v105 = v480;
      if (v480 < v477)
      {
        v480 = v477;
        v105 = v477;
      }
      v106 = (void **)&v476;
    }
    else
    {
      if ((v481 & 8) == 0)
      {
        v71 = 0;
        HIBYTE(v471) = 0;
        v72 = &v470;
        goto LABEL_206;
      }
      v106 = v474;
      v105 = v475;
    }
    v193 = *v106;
    v71 = v105 - (_QWORD)*v106;
    if (v71 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v71 >= 0x17)
    {
      v194 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v71 | 7) != 0x17)
        v194 = v71 | 7;
      v195 = v194 + 1;
      v72 = (__int128 *)operator new(v194 + 1);
      v471 = v195 | 0x8000000000000000;
      *(_QWORD *)&v470 = v72;
      *((_QWORD *)&v470 + 1) = v71;
    }
    else
    {
      HIBYTE(v471) = v105 - *(_BYTE *)v106;
      v72 = &v470;
      if (!v71)
      {
LABEL_206:
        *((_BYTE *)v72 + v71) = 0;
        *(_QWORD *)&v460 = &v456;
        *((std::chrono::steady_clock::time_point *)&v460 + 1) = std::chrono::steady_clock::now();
        rep = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v462) = 5;
        v463 = "unknown file";
        v464 = 184;
        v467 = 0;
        v465 = "unknown function";
        v466 = 0;
        v196 = (const char *)v470;
        if (v471 >= 0)
          v196 = (const char *)&v470;
        v197 = *(_QWORD *)v460;
        v198 = (const char *)(*(_QWORD *)v460 + 16);
        v401 = v198;
        __se = v196;
        if (*(char *)(*(_QWORD *)v460 + 39) < 0)
        {
          v198 = *(const char **)(v197 + 16);
          v199 = *(_QWORD *)(v197 + 24);
        }
        else
        {
          v199 = *(unsigned __int8 *)(*(_QWORD *)v460 + 39);
        }
        v200 = v70;
        v201 = v2;
        v202 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v484);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v484);
          if ((_BYTE)v485 && (v484[23] & 0x80000000) != 0)
            operator delete(*(void **)v484);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v203 = byte_254A4A4F8;
        else
          v203 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v204 = byte_254A4A4F8[23];
        else
          v204 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v484 = os_log_create(v203, v198);
        v205 = &v484[8];
        if (v204 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v204 >= 0x17)
        {
          v206 = v4;
          v207 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v204 | 7) != 0x17)
            v207 = v204 | 7;
          v208 = v207 + 1;
          v205 = operator new(v207 + 1);
          *(_QWORD *)&v484[16] = v204;
          *(_QWORD *)&v485 = v208 | 0x8000000000000000;
          *(_QWORD *)&v484[8] = v205;
          v4 = v206;
        }
        else
        {
          BYTE7(v485) = v204;
          if (!v204)
          {
LABEL_226:
            v205[v204] = 0;
            BYTE8(v485) = 1;
            v209 = (char *)&v486;
            if (v199 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v2 = v201;
            if (v199 >= 0x17)
            {
              v211 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v199 | 7) != 0x17)
                v211 = v199 | 7;
              v212 = v211 + 1;
              v209 = (char *)operator new(v211 + 1);
              v487 = (const char *)v199;
              v488 = v212 | 0x8000000000000000;
              v486 = v209;
              v210 = v200;
            }
            else
            {
              HIBYTE(v488) = v199;
              v210 = v200;
              if (!v199)
              {
LABEL_234:
                v209[v199] = 0;
                LOBYTE(v489) = 1;
                v213 = *(NSObject **)v484;
                if (SHIBYTE(v488) < 0)
                  operator delete(v486);
                if (BYTE8(v485) && SBYTE7(v485) < 0)
                  operator delete(*(void **)&v484[8]);
                if (*(_QWORD *)v484)
                  os_release(*(void **)v484);
                if (!v210 || !*(_QWORD *)(v210 + 24))
                {
                  os_log_type_enabled(v213, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v484 = 136315138;
                  *(_QWORD *)&v484[4] = __se;
                  v220 = (void *)_os_log_send_and_compose_impl();
                  if (v220)
                    free(v220);
                  goto LABEL_447;
                }
                v214 = _os_log_pack_size();
                v215 = operator new(v214, (std::align_val_t)8uLL);
                v216 = (_QWORD *)operator new();
                *v216 = &off_24C9ABB80;
                v216[1] = 0;
                v216[2] = 0;
                v216[3] = v215;
                *(_QWORD *)v453 = v215;
                *(_QWORD *)&v453[8] = v215;
                *(_QWORD *)&v453[32] = 0;
                *(_OWORD *)&v453[16] = (unint64_t)v216;
                v217 = strlen(__se);
                if (v217 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v218 = v217;
                if (v217 >= 0x17)
                {
                  v286 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v217 | 7) != 0x17)
                    v286 = v217 | 7;
                  v287 = v286 + 1;
                  v219 = (void **)operator new(v286 + 1);
                  *((_QWORD *)&v469 + 1) = v287 | 0x8000000000000000;
                  __dst = v219;
                  *(_QWORD *)&v469 = v218;
                  v210 = v200;
                }
                else
                {
                  HIBYTE(v469) = v217;
                  v219 = (void **)&__dst;
                  if (!v217)
                  {
LABEL_367:
                    *((_BYTE *)v219 + v218) = 0;
                    v288 = __dst;
                    v483[0] = v469;
                    *(uint64_t *)((char *)v483 + 7) = *(_QWORD *)((char *)&v469 + 7);
                    v289 = HIBYTE(v469);
                    v290 = operator new(0x38uLL);
                    v290[1] = 0;
                    v290[2] = 0;
                    v290[3] = off_24C9ABC20;
                    *v290 = &off_24C9ABBD0;
                    v291 = v483[0];
                    v290[4] = v288;
                    v290[5] = v291;
                    *(_QWORD *)((char *)v290 + 47) = *(uint64_t *)((char *)v483 + 7);
                    *((_BYTE *)v290 + 55) = v289;
                    memset(v483, 0, 15);
                    v292 = *(std::__shared_weak_count **)&v453[32];
                    *(_QWORD *)&v453[24] = v290 + 3;
                    *(_QWORD *)&v453[32] = v290;
                    if (v292)
                    {
                      v293 = (unint64_t *)&v292->__shared_owners_;
                      do
                        v294 = __ldaxr(v293);
                      while (__stlxr(v294 - 1, v293));
                      if (!v294)
                      {
                        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                        std::__shared_weak_count::__release_weak(v292);
                      }
                    }
                    *(_OWORD *)v484 = *(_OWORD *)v453;
                    *(_QWORD *)&v484[16] = *(_QWORD *)&v453[16];
                    if (*(_QWORD *)&v453[16])
                    {
                      v295 = (unint64_t *)(*(_QWORD *)&v453[16] + 8);
                      do
                        v296 = __ldxr(v295);
                      while (__stxr(v296 + 1, v295));
                    }
                    v485 = *(_OWORD *)&v453[24];
                    if (*(_QWORD *)&v453[32])
                    {
                      v297 = (unint64_t *)(*(_QWORD *)&v453[32] + 8);
                      do
                        v298 = __ldxr(v297);
                      while (__stxr(v298 + 1, v297));
                      v486 = *(char **)&v453[24];
                      do
                        v299 = __ldaxr(v297);
                      while (__stlxr(v299 - 1, v297));
                      if (!v299)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)&v453[32] + 16))(*(_QWORD *)&v453[32]);
                        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v453[32]);
                      }
                    }
                    else
                    {
                      v486 = *(char **)&v453[24];
                    }
                    if (*(_QWORD *)&v453[16])
                    {
                      v318 = (unint64_t *)(*(_QWORD *)&v453[16] + 8);
                      do
                        v319 = __ldaxr(v318);
                      while (__stlxr(v319 - 1, v318));
                      if (!v319)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)&v453[16] + 16))(*(_QWORD *)&v453[16]);
                        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v453[16]);
                      }
                    }
                    v320 = *(_QWORD *)v484;
                    if (v486[31] >= 0)
                      v321 = v486 + 8;
                    else
                      v321 = (char *)*((_QWORD *)v486 + 1);
                    v322 = _os_log_pack_fill();
                    *(_DWORD *)v322 = 136315138;
                    *(_QWORD *)(v322 + 4) = v321;
                    v323 = operator new();
                    v324 = *(unsigned __int8 *)(v197 + 39);
                    v325 = v401;
                    if ((v324 & 0x80u) != 0)
                    {
                      v325 = *(const char **)(v197 + 16);
                      v324 = *(_QWORD *)(v197 + 24);
                    }
                    *(_QWORD *)v323 = v320;
                    *(_OWORD *)(v323 + 8) = *(_OWORD *)&v484[8];
                    *(_QWORD *)&v484[8] = 0;
                    *(_QWORD *)&v484[16] = 0;
                    *(_OWORD *)(v323 + 24) = v485;
                    v485 = 0uLL;
                    *(_QWORD *)(v323 + 40) = v325;
                    *(_QWORD *)(v323 + 48) = v324;
                    *(_BYTE *)(v323 + 56) = 16;
                    __dst = 0;
                    *(_QWORD *)v453 = v323;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v210 + 24) + 40))(*(_QWORD *)(v210 + 24), v453);
                    v326 = *(_QWORD *)v453;
                    *(_QWORD *)v453 = 0;
                    if (v326)
                    {
                      v327 = *(std::__shared_weak_count **)(v326 + 32);
                      if (v327)
                      {
                        v328 = (unint64_t *)&v327->__shared_owners_;
                        do
                          v329 = __ldaxr(v328);
                        while (__stlxr(v329 - 1, v328));
                        if (!v329)
                        {
                          ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                          std::__shared_weak_count::__release_weak(v327);
                        }
                      }
                      v330 = *(std::__shared_weak_count **)(v326 + 16);
                      if (v330)
                      {
                        v331 = (unint64_t *)&v330->__shared_owners_;
                        do
                          v332 = __ldaxr(v331);
                        while (__stlxr(v332 - 1, v331));
                        if (!v332)
                        {
                          ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                          std::__shared_weak_count::__release_weak(v330);
                        }
                      }
                      MEMORY[0x212BC6398](v326, 0x10F0C40B62ED6C6);
                      v333 = __dst;
                      __dst = 0;
                      if (v333)
                      {
                        v334 = (std::__shared_weak_count *)v333[4];
                        if (v334)
                        {
                          v335 = (unint64_t *)&v334->__shared_owners_;
                          do
                            v336 = __ldaxr(v335);
                          while (__stlxr(v336 - 1, v335));
                          if (!v336)
                          {
                            ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                            std::__shared_weak_count::__release_weak(v334);
                          }
                        }
                        v337 = (std::__shared_weak_count *)v333[2];
                        if (v337)
                        {
                          v338 = (unint64_t *)&v337->__shared_owners_;
                          do
                            v339 = __ldaxr(v338);
                          while (__stlxr(v339 - 1, v338));
                          if (!v339)
                          {
                            ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                            std::__shared_weak_count::__release_weak(v337);
                          }
                        }
                        MEMORY[0x212BC6398](v333, 0x10F0C40B62ED6C6);
                      }
                    }
                    v340 = (std::__shared_weak_count *)*((_QWORD *)&v485 + 1);
                    if (*((_QWORD *)&v485 + 1))
                    {
                      v341 = (unint64_t *)(*((_QWORD *)&v485 + 1) + 8);
                      do
                        v342 = __ldaxr(v341);
                      while (__stlxr(v342 - 1, v341));
                      if (!v342)
                      {
                        ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                        std::__shared_weak_count::__release_weak(v340);
                      }
                    }
                    v343 = *(std::__shared_weak_count **)&v484[16];
                    if (*(_QWORD *)&v484[16])
                    {
                      v344 = (unint64_t *)(*(_QWORD *)&v484[16] + 8);
                      do
                        v345 = __ldaxr(v344);
                      while (__stlxr(v345 - 1, v344));
                      if (!v345)
                      {
                        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                        std::__shared_weak_count::__release_weak(v343);
                      }
                    }
LABEL_447:
                    if (v404)
                    {
                      v346 = (const char *)&v470;
                      if (v471 < 0)
                        v346 = (const char *)v470;
                      sub_20E8C003C((uint64_t)&v460, "%s", v346);
                      sub_20E863570((uint64_t)&v460);
                    }
                    sub_20E863570((uint64_t)&v460);
                    v347 = v467;
                    if (v467)
                    {
                      v348 = (unint64_t *)&v467->__shared_owners_;
                      do
                        v349 = __ldaxr(v348);
                      while (__stlxr(v349 - 1, v348));
                      if (!v349)
                      {
                        ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                        std::__shared_weak_count::__release_weak(v347);
                      }
                    }
                    if (SHIBYTE(v471) < 0)
                      operator delete((void *)v470);
                    __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                    v350 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    __p[2] = v350;
                    *(_QWORD *)&v473 = MEMORY[0x24BEDB848] + 16;
                    if (v479 < 0)
                      operator delete(v478);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v482);
                    goto LABEL_461;
                  }
                }
                memcpy(v219, __se, v218);
                goto LABEL_367;
              }
            }
            memmove(v209, v198, v199);
            goto LABEL_234;
          }
        }
        memmove(v205, v203, v204);
        goto LABEL_226;
      }
    }
    memmove(v72, v193, v71);
    goto LABEL_206;
  }
  *(_DWORD *)&v453[28] = unk_2102DD73C;
  *(float32x2_t *)v453 = vcvt_f32_f64(v395);
  *(float *)&v28 = v7;
  *(_QWORD *)&v453[8] = v28;
  *(float32x2_t *)&v453[16] = vcvt_f32_f64(v398);
  v29 = v8;
  *(float *)&v453[24] = v29;
  *(float32x2_t *)&v453[32] = vcvt_f32_f64(v402);
  *(float *)&v30 = v9;
  *(_QWORD *)&v453[40] = v30;
  v454 = vcvt_f32_f64(*(float64x2_t *)__s);
  *(float *)&v31 = v14;
  v455 = (float32x2_t)__PAIR64__(unk_2102DD75C, v31);
  v32 = sub_20E8BE32C((uint64_t)v453);
  if (v32 != 1.0)
  {
    v34 = v32 >= 1.0 ? v32 + -1.0 : 1.0 - v32;
    if (v34 > 0.00001)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "extrinsicTransform must have determinant 1.");
LABEL_587:
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
  }
  v35 = *(int8x16_t *)&v453[32];
  v36 = (float32x2_t)vzip1_s32(*(int32x2_t *)v453, *(int32x2_t *)&v453[16]);
  v37 = (float32x2_t)vzip2_s32(*(int32x2_t *)v453, *(int32x2_t *)&v453[16]);
  v38 = (float32x2_t)vzip2q_s32(*(int32x4_t *)v453, *(int32x4_t *)&v453[16]).u64[0];
  *(float32x2_t *)v39.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v36, *(float *)v453), v37, *(float32x2_t *)v453, 1), v38, *(float32x4_t *)v453, 2);
  v40 = (float32x2_t)vextq_s8(v35, v35, 8uLL).u64[0];
  *(float32x2_t *)&v39.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v453[32], *(float32x2_t *)v453), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v453, 1), *(float32x2_t *)&v453[32], 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v453, *(int8x16_t *)v453, 8uLL), v40);
  *(float32x2_t *)v41.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v36, *(float *)&v453[16]), v37, *(float32x2_t *)&v453[16], 1), v38, *(float32x4_t *)&v453[16], 2);
  *(float32x2_t *)&v41.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v453[32], *(float32x2_t *)&v453[16]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v453[16], 1), *(float32x2_t *)&v453[32], 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v453[16], *(int8x16_t *)&v453[16], 8uLL), v40);
  *(float32x2_t *)v42.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v36, *(float *)&v453[32]), v37, *(float32x2_t *)&v453[32], 1), v38, *(float32x4_t *)&v453[32], 2);
  v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v453[32], 1), *(float32x2_t *)&v453[32], 1), v40, v40);
  *(float32x2_t *)&v42.u32[2] = v43;
  v44 = vaddq_f32(v39, (float32x4_t)xmmword_2102DD6F0);
  v45 = (int8x16_t)vaddq_f32(v41, (float32x4_t)xmmword_2102DD700);
  v44.i32[3] = v45.i32[0];
  v46 = (int32x4_t)vaddq_f32(v42, (float32x4_t)xmmword_2102DD710);
  v47 = (int32x4_t)vabsq_f32(v44);
  v42.i64[0] = vrev64q_s32(v47).u64[0];
  v42.i64[1] = v47.i64[1];
  v48 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v48, v42), (int16x8_t)vcgeq_f32(v48, vabsq_f32((float32x4_t)vextq_s8(vextq_s8(v45, v45, 0xCuLL), (int8x16_t)v46, 8uLL))))))) & 1) != 0|| vabsq_f32((float32x4_t)vdupq_laneq_s32(v46, 2)).f32[0] > 0.00001)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "extrinsicTransform must be orthogonal.");
    goto LABEL_587;
  }
  memset(__p, 0, sizeof(__p));
  v393 = v2;
  v394 = v4;
  if (!v5)
  {
    v63 = 0;
    v49 = 0;
    v67 = 0;
    v64 = 0;
    v66 = 0;
    if (v6)
    {
      memset(__p, 0, sizeof(__p));
      goto LABEL_170;
    }
    v144 = 0;
    goto LABEL_402;
  }
  if (v5 > 0x1555555555555555)
    sub_20E867F44();
  v49 = (float32x2_t *)operator new(12 * v5);
  __p[0] = v49;
  __p[1] = v49;
  __p[2] = (char *)v49 + 12 * v5;
  v403 = v5;
  v51 = (float64x2_t *)((char *)v3 + 24 * v5);
  do
  {
    while (1)
    {
      while (1)
      {
        v50.f64[0] = v3[1].f64[0];
        v52 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v3), v50);
        if (v49 >= __p[2])
          break;
        v49[1].i32[0] = v52.i32[2];
        *v49 = *(float32x2_t *)v52.f32;
        v49 = (float32x2_t *)((char *)v49 + 12);
        __p[1] = v49;
        v3 = (float64x2_t *)((char *)v3 + 24);
        if (v3 == v51)
          goto LABEL_53;
      }
      v53 = (float32x2_t *)__p[0];
      v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)__p[0]) >> 2);
      v55 = v54 + 1;
      if (v54 + 1 > 0x1555555555555555)
        sub_20E867F44();
      if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 2) > v55)
        v55 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v56 = 0x1555555555555555;
      else
        v56 = v55;
      if (v56)
      {
        *(float32x4_t *)__sa = v52;
        if (v56 > 0x1555555555555555)
          sub_20E877A38();
        v57 = (char *)operator new(12 * v56);
        v52 = *(float32x4_t *)__sa;
      }
      else
      {
        v57 = 0;
      }
      v58 = &v57[12 * v54];
      *(_QWORD *)v58 = v52.i64[0];
      *((_DWORD *)v58 + 2) = v52.i32[2];
      v59 = (float32x2_t *)(v58 + 12);
      if (v49 == v53)
      {
        __p[0] = v58;
        __p[1] = v58 + 12;
        __p[2] = &v57[12 * v56];
        break;
      }
      do
      {
        v60 = *(uint64_t *)((char *)&v49[-2] + 4);
        v49 = (float32x2_t *)((char *)v49 - 12);
        v61 = v49[1].i32[0];
        *(_QWORD *)(v58 - 12) = v60;
        v58 -= 12;
        *((_DWORD *)v58 + 2) = v61;
      }
      while (v49 != v53);
      v49 = (float32x2_t *)__p[0];
      __p[0] = v58;
      __p[1] = v59;
      __p[2] = &v57[12 * v56];
      if (v49)
        break;
      v49 = v59;
      __p[1] = v59;
      v3 = (float64x2_t *)((char *)v3 + 24);
      if (v3 == v51)
        goto LABEL_53;
    }
    operator delete(v49);
    v49 = v59;
    __p[1] = v59;
    v3 = (float64x2_t *)((char *)v3 + 24);
  }
  while (v3 != v51);
LABEL_53:
  v62 = (float32x2_t *)__p[0];
  v63 = __p[2];
  v2 = v393;
  if (v6)
  {
    memset(__p, 0, sizeof(__p));
    v64 = (char *)v62 - (char *)v49;
    if (v62 == v49)
    {
      v66 = 0;
      v67 = v49;
      v5 = v403;
    }
    else
    {
      v396 = v62;
      v65 = 0x5555555555555555 * (v64 >> 2);
      v5 = v403;
      if (v65 > 0x71C71C71C71C71CLL)
        sub_20E867F44();
      v66 = operator new(-12 * (v64 >> 2));
      v64 = (uint64_t)v66 + 36 * v65;
      __p[0] = v66;
      __p[1] = v66;
      __p[2] = (void *)v64;
      v67 = v396;
    }
LABEL_170:
    if (v67 == v49 && !v5)
    {
      v144 = v66;
      goto LABEL_402;
    }
    v392 = v63;
    v161 = (float32x2_t)vdup_n_s32(0x358637BDu);
    v397 = v67;
    v162 = &v6[v5];
    while (2)
    {
      while (2)
      {
        v43.f32[0] = *v6;
        v38.i32[0] = v67[1].i32[0];
        v164 = (int32x2_t)vtrn2q_s32(*(int32x4_t *)v453, *(int32x4_t *)&v453[16]).u64[0];
        v165 = *(int8x16_t *)v453;
        v165.i32[3] = *(_DWORD *)&v453[24];
        v166 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(v164, 0), (int8x16_t)vdupq_lane_s32(v164, 1), 0xCuLL).u64[0];
        v167 = (float32x2_t)vextq_s8(*(int8x16_t *)v453, *(int8x16_t *)v453, 8uLL).u64[0];
        v168 = (float32x2_t)vextq_s8(*(int8x16_t *)&v453[16], *(int8x16_t *)&v453[16], 8uLL).u64[0];
        v169 = (float32x2_t)vextq_s8(*(int8x16_t *)&v453[32], *(int8x16_t *)&v453[32], 8uLL).u64[0];
        v170 = vmla_f32(vmla_lane_f32(vmul_f32(v167, *v67), v168, *v67, 1), v38, v169).f32[0] + v455.f32[0];
        v171 = sqrtf(1.0 - (float)(v43.f32[0] * v43.f32[0]));
        v43.f32[0] = (float)((float)(v170 / (float)(v171 / v43.f32[0])) * 0.0027273)
                   * (float)((float)(v170 / (float)(v171 / v43.f32[0])) * 0.0027273);
        v172 = (float32x2_t)vzip1_s32(*(int32x2_t *)v453, *(int32x2_t *)&v453[16]);
        v165.i64[0] = vextq_s8(v165, v165, 8uLL).u64[0];
        v173 = vmla_f32(vmla_f32(vmul_f32(v172, v161), 0, v166), 0, *(float32x2_t *)v165.i8);
        v33.i32[0] = 897988541;
        v174 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v453[32], v33), 0, *(float32x2_t *)&v453[32], 1), 0, v169);
        v175 = vmul_f32(v172, 0);
        v176 = vmla_f32(vmla_f32(v175, v161, v166), 0, *(float32x2_t *)v165.i8);
        v177 = vmul_f32(*(float32x2_t *)&v453[32], 0);
        v178 = vmla_f32(vmla_lane_f32(v177, v33, *(float32x2_t *)&v453[32], 1), 0, v169);
        v38 = vmla_n_f32(vmla_f32(v175, 0, v166), *(float32x2_t *)v165.i8, v43.f32[0]);
        v179 = vmla_f32(vmla_lane_f32(v177, 0, *(float32x2_t *)&v453[32], 1), v43, v169);
        *(float32x2_t *)&v180 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v173, *(float *)v453), v176, *(float32x2_t *)v453, 1), v38, *(float32x4_t *)v453, 2);
        v43 = vmla_f32(vmla_lane_f32(vmul_f32(v174, *(float32x2_t *)v453), v178, *(float32x2_t *)v453, 1), v167, v179);
        *((float32x2_t *)&v180 + 1) = v43;
        *(float32x2_t *)&v181 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v173, *(float *)&v453[16]), v176, *(float32x2_t *)&v453[16], 1), v38, *(float32x4_t *)&v453[16], 2);
        *((float32x2_t *)&v181 + 1) = vmla_f32(vmla_lane_f32(vmul_f32(v174, *(float32x2_t *)&v453[16]), v178, *(float32x2_t *)&v453[16], 1), v168, v179);
        *(float32x2_t *)&v183 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v173, *(float *)&v453[32]), v176, *(float32x2_t *)&v453[32], 1), v38, *(float32x4_t *)&v453[32], 2);
        v182 = vmla_f32(vmla_lane_f32(vmul_f32(v174, *(float32x2_t *)&v453[32]), v178, *(float32x2_t *)&v453[32], 1), v169, v179);
        *((float32x2_t *)&v183 + 1) = v182;
        if (v66 < __p[2])
        {
          *((_DWORD *)v66 + 2) = v43.i32[0];
          *v66 = v180;
          *((_DWORD *)v66 + 5) = DWORD2(v181);
          *(_QWORD *)((char *)v66 + 12) = v181;
          v163 = v66 + 4;
          v66[3] = v183;
          v66 = (_QWORD *)((char *)v66 + 36);
          *v163 = v182.i32[0];
          __p[1] = v66;
          v67 = (float32x2_t *)((char *)v67 + 12);
          ++v6;
          if (v67 != v49)
            continue;
        }
        else
        {
          v184 = __p[0];
          v185 = 0x8E38E38E38E38E39 * (((char *)v66 - (char *)__p[0]) >> 2);
          v186 = v185 + 1;
          if (v185 + 1 > 0x71C71C71C71C71CLL)
            sub_20E867F44();
          if (0x1C71C71C71C71C72 * (((char *)__p[2] - (char *)__p[0]) >> 2) > v186)
            v186 = 0x1C71C71C71C71C72 * (((char *)__p[2] - (char *)__p[0]) >> 2);
          if (0x8E38E38E38E38E39 * (((char *)__p[2] - (char *)__p[0]) >> 2) >= 0x38E38E38E38E38ELL)
            v187 = 0x71C71C71C71C71CLL;
          else
            v187 = v186;
          if (v187)
          {
            v400 = v183;
            v406 = v181;
            *(_OWORD *)__sd = v180;
            if (v187 > 0x71C71C71C71C71CLL)
              sub_20E877A38();
            v188 = (char *)operator new(36 * v187);
            v181 = v406;
            v180 = *(_OWORD *)__sd;
            v183 = v400;
          }
          else
          {
            v188 = 0;
          }
          v189 = &v188[36 * v185];
          *(_QWORD *)v189 = v180;
          *((_DWORD *)v189 + 2) = DWORD2(v180);
          *((_DWORD *)v189 + 5) = DWORD2(v181);
          *(_QWORD *)(v189 + 12) = v181;
          *((_QWORD *)v189 + 3) = v183;
          *((_DWORD *)v189 + 8) = DWORD2(v183);
          if (v66 == v184)
          {
            v184 = v66;
            v66 = v189 + 36;
            __p[0] = &v188[36 * v185];
            __p[1] = v189 + 36;
            __p[2] = &v188[36 * v187];
            if (v184)
              goto LABEL_191;
          }
          else
          {
            v190 = &v188[36 * v185];
            do
            {
              v191 = *(_OWORD *)((char *)v66 - 36);
              v192 = *(_OWORD *)((char *)v66 - 20);
              *((_DWORD *)v190 - 1) = *((_DWORD *)v66 - 1);
              *(_OWORD *)(v190 - 20) = v192;
              *(_OWORD *)(v190 - 36) = v191;
              v190 -= 36;
              v66 = (_QWORD *)((char *)v66 - 36);
            }
            while (v66 != v184);
            v66 = v189 + 36;
            __p[0] = v190;
            __p[1] = v189 + 36;
            __p[2] = &v188[36 * v187];
            if (v184)
LABEL_191:
              operator delete(v184);
          }
          __p[1] = v66;
          v67 = (float32x2_t *)((char *)v67 + 12);
          ++v6;
          if (v67 != v49)
            continue;
        }
        break;
      }
      if (v6 == v162)
        goto LABEL_147;
      continue;
    }
  }
  memset(__p, 0, sizeof(__p));
  v64 = (char *)v49 - (char *)v62;
  if (v49 != v62)
  {
    v397 = v62;
    v109 = 0xAAAAAAAAAAAAAAABLL * (v64 >> 2);
    if (v109 > 0x71C71C71C71C71CLL)
      sub_20E867F44();
    v392 = v63;
    v66 = operator new(12 * (v64 >> 2));
    __p[0] = v66;
    __p[1] = v66;
    __p[2] = (char *)v66 + 36 * v109;
    v112 = (float32x2_t)vdup_n_s32(0x358637BDu);
    v113 = v397;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v115 = (int32x2_t)vtrn2q_s32(*(int32x4_t *)v453, *(int32x4_t *)&v453[16]).u64[0];
          v116 = *(int8x16_t *)v453;
          v116.i32[3] = *(_DWORD *)&v453[24];
          LODWORD(v110) = v113[1].i32[0];
          v117 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(v115, 0), (int8x16_t)vdupq_lane_s32(v115, 1), 0xCuLL).u64[0];
          v118 = (float32x2_t)vextq_s8(*(int8x16_t *)v453, *(int8x16_t *)v453, 8uLL).u64[0];
          v119 = (float32x2_t)vextq_s8(*(int8x16_t *)&v453[16], *(int8x16_t *)&v453[16], 8uLL).u64[0];
          v120 = (float32x2_t)vextq_s8(*(int8x16_t *)&v453[32], *(int8x16_t *)&v453[32], 8uLL).u64[0];
          v121 = vmla_f32(vmla_lane_f32(vmul_f32(v118, *v113), v119, *v113, 1), *(float32x2_t *)&v110, v120).f32[0];
          *(float *)&v110 = (float)((float)(v121 + v455.f32[0]) * 0.0027273)
                          * (float)((float)(v121 + v455.f32[0]) * 0.0027273);
          v122 = (float32x2_t)vzip1_s32(*(int32x2_t *)v453, *(int32x2_t *)&v453[16]);
          v116.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          v123 = vmla_f32(vmla_f32(vmul_f32(v122, v112), 0, v117), 0, *(float32x2_t *)v116.i8);
          v111.i32[0] = 897988541;
          v124 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v453[32], v111), 0, *(float32x2_t *)&v453[32], 1), 0, v120);
          v125 = vmul_f32(v122, 0);
          v126 = vmla_f32(vmla_f32(v125, v112, v117), 0, *(float32x2_t *)v116.i8);
          v127 = vmul_f32(*(float32x2_t *)&v453[32], 0);
          v128 = vmla_f32(vmla_lane_f32(v127, v111, *(float32x2_t *)&v453[32], 1), 0, v120);
          v129 = vmla_n_f32(vmla_f32(v125, 0, v117), *(float32x2_t *)v116.i8, *(float *)&v110);
          v130 = vmla_f32(vmla_lane_f32(v127, 0, *(float32x2_t *)&v453[32], 1), *(float32x2_t *)&v110, v120);
          *(float32x2_t *)&v110 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v123, *(float *)v453), v126, *(float32x2_t *)v453, 1), v129, *(float32x4_t *)v453, 2);
          v131 = vmla_f32(vmla_lane_f32(vmul_f32(v124, *(float32x2_t *)v453), v128, *(float32x2_t *)v453, 1), v118, v130);
          *((float32x2_t *)&v110 + 1) = v131;
          *(float32x2_t *)&v132 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v123, *(float *)&v453[16]), v126, *(float32x2_t *)&v453[16], 1), v129, *(float32x4_t *)&v453[16], 2);
          *((float32x2_t *)&v132 + 1) = vmla_f32(vmla_lane_f32(vmul_f32(v124, *(float32x2_t *)&v453[16]), v128, *(float32x2_t *)&v453[16], 1), v119, v130);
          *(float32x2_t *)&v134 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v123, *(float *)&v453[32]), v126, *(float32x2_t *)&v453[32], 1), v129, *(float32x4_t *)&v453[32], 2);
          v133 = vmla_f32(vmla_lane_f32(vmul_f32(v124, *(float32x2_t *)&v453[32]), v128, *(float32x2_t *)&v453[32], 1), v120, v130);
          *((float32x2_t *)&v134 + 1) = v133;
          if (v66 >= __p[2])
            break;
          *((_DWORD *)v66 + 2) = v131.i32[0];
          *v66 = v110;
          *((_DWORD *)v66 + 5) = DWORD2(v132);
          *(_QWORD *)((char *)v66 + 12) = v132;
          v114 = v66 + 4;
          v66[3] = v134;
          v66 = (_QWORD *)((char *)v66 + 36);
          *v114 = v133.i32[0];
          __p[1] = v66;
          v113 = (float32x2_t *)((char *)v113 + 12);
          if (v113 == v49)
            goto LABEL_147;
        }
        v135 = __p[0];
        v136 = 0x8E38E38E38E38E39 * (((char *)v66 - (char *)__p[0]) >> 2);
        v137 = v136 + 1;
        if (v136 + 1 > 0x71C71C71C71C71CLL)
          sub_20E867F44();
        if (0x1C71C71C71C71C72 * (((char *)__p[2] - (char *)__p[0]) >> 2) > v137)
          v137 = 0x1C71C71C71C71C72 * (((char *)__p[2] - (char *)__p[0]) >> 2);
        v138 = 0x8E38E38E38E38E39 * (((char *)__p[2] - (char *)__p[0]) >> 2) >= 0x38E38E38E38E38ELL
             ? 0x71C71C71C71C71CLL
             : v137;
        if (v138)
        {
          v399 = v134;
          v405 = v132;
          *(_OWORD *)__sc = v110;
          if (v138 > 0x71C71C71C71C71CLL)
            sub_20E877A38();
          v139 = (char *)operator new(36 * v138);
          v132 = v405;
          v110 = *(_OWORD *)__sc;
          v134 = v399;
        }
        else
        {
          v139 = 0;
        }
        v140 = &v139[36 * v136];
        *((_DWORD *)v140 + 2) = DWORD2(v110);
        *(_QWORD *)v140 = v110;
        *(_QWORD *)(v140 + 12) = v132;
        *((_DWORD *)v140 + 5) = DWORD2(v132);
        *((_QWORD *)v140 + 3) = v134;
        *((_DWORD *)v140 + 8) = DWORD2(v134);
        v141 = v140 + 36;
        if (v66 != v135)
          break;
        __p[0] = v140;
        __p[1] = v140 + 36;
        v135 = v66;
        __p[2] = &v139[36 * v138];
LABEL_146:
        operator delete(v135);
        v66 = v141;
        __p[1] = v141;
        v113 = (float32x2_t *)((char *)v113 + 12);
        if (v113 == v49)
        {
LABEL_147:
          v144 = __p[0];
          v64 = (uint64_t)__p[2];
          v2 = v393;
          v4 = v394;
          v67 = v397;
          v63 = v392;
          goto LABEL_402;
        }
      }
      do
      {
        v142 = *(_OWORD *)((char *)v66 - 36);
        v143 = *(_OWORD *)((char *)v66 - 20);
        *((_DWORD *)v140 - 1) = *((_DWORD *)v66 - 1);
        *(_OWORD *)(v140 - 20) = v143;
        *(_OWORD *)(v140 - 36) = v142;
        v140 -= 36;
        v66 = (_QWORD *)((char *)v66 - 36);
      }
      while (v66 != v135);
      __p[0] = v140;
      __p[1] = v141;
      __p[2] = &v139[36 * v138];
      if (v135)
        goto LABEL_146;
      v66 = v141;
      __p[1] = v141;
      v113 = (float32x2_t *)((char *)v113 + 12);
      if (v113 == v49)
        goto LABEL_147;
    }
  }
  v66 = 0;
  v144 = 0;
  v67 = v49;
LABEL_402:
  v314 = *(const void **)(v458 + 64);
  v315 = *(_DWORD *)(v458 + 72);
  v316 = *(_QWORD *)(v458 + 76);
  v425[0] = &off_24C9F15F0;
  v425[1] = &off_24C9F1578;
  v317 = *(_OWORD *)(v458 + 32);
  v426 = *(_OWORD *)(v458 + 16);
  v427 = v317;
  v428 = *(_OWORD *)(v458 + 48);
  v429 = v314;
  LODWORD(v430[0]) = v315;
  *(_QWORD *)((char *)v430 + 4) = v316;
  v431 = *(_OWORD *)(v458 + 88);
  v432 = vcvtq_f64_f32(*(float32x2_t *)v453);
  v433 = vcvtq_f64_f32(*(float32x2_t *)&v453[8]);
  v434 = vcvtq_f64_f32(*(float32x2_t *)&v453[16]);
  v435 = vcvtq_f64_f32(*(float32x2_t *)&v453[24]);
  v436 = vcvtq_f64_f32(*(float32x2_t *)&v453[32]);
  v437 = vcvtq_f64_f32(*(float32x2_t *)&v453[40]);
  v438 = vcvtq_f64_f32(v454);
  v439 = vcvtq_f64_f32(v455);
  v440 = v67;
  v441 = v49;
  v442 = v63;
  v443 = v144;
  v444 = v66;
  v445 = v64;
  v446 = 1;
  LOBYTE(v447) = 0;
  v451 = 0;
  v452 = 1;
LABEL_462:
  v351 = v459;
  if (!v459)
    goto LABEL_466;
  v352 = (unint64_t *)&v459->__shared_owners_;
  do
    v353 = __ldaxr(v352);
  while (__stlxr(v353 - 1, v352));
  if (!v353)
  {
    ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
    std::__shared_weak_count::__release_weak(v351);
    if (!v452)
      return 0;
LABEL_467:
    v354 = *(_DWORD *)(v2 + 64);
    v355 = *v4;
    sub_20E927B44((uint64_t)v414, (uint64_t)v425);
    sub_20EF256C8(v355, (uint64_t)v414, v354, (char **)__p);
    if (v424)
    {
      if (v422)
      {
        v423 = v422;
        operator delete(v422);
      }
      if (v420)
      {
        v421 = v420;
        operator delete(v420);
      }
    }
    if (v419)
    {
      if (v417)
      {
        v418 = v417;
        operator delete(v417);
      }
      if (v415)
      {
        v416 = v415;
        operator delete(v415);
      }
    }
    v414[0] = &off_24C9F15F0;
    v356 = sub_20E9D4120((uint64_t *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v452)
    {
      if (v451)
      {
        if (v449)
        {
          v450 = v449;
          operator delete(v449);
        }
        if (v447)
        {
          v448 = v447;
          operator delete(v447);
        }
      }
      if (v446)
      {
        if (v443)
        {
          v444 = v443;
          operator delete(v443);
        }
        if (v440)
        {
          v441 = v440;
          operator delete(v440);
        }
      }
    }
  }
  else
  {
LABEL_466:
    if (v452)
      goto LABEL_467;
    return 0;
  }
  return v356;
}

void sub_20E926BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 184) && *(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x390]);
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  sub_20E863784((uint64_t)&STACK[0x410]);
  _Unwind_Resume(a1);
}

void sub_20E926F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  sub_20E863784((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void sub_20E926F28(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 - 176) && *(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  v3 = *(void **)(v1 - 208);
  if (v3)
    os_release(v3);
  sub_20E863714((uint64_t)&STACK[0x390]);
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  sub_20E863784((uint64_t)&STACK[0x410]);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20E926F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  sub_20E863784((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void sub_20E926FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t v66;

  sub_20E863714(v66 - 208);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  sub_20E863784(&a66);
  _Unwind_Resume(a1);
}

void sub_20E926FAC(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20E926FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t v66;

  if (LOBYTE(STACK[0x430]) && SLOBYTE(STACK[0x42F]) < 0)
    operator delete((void *)STACK[0x418]);
  if (STACK[0x410])
    os_release((void *)STACK[0x410]);
  sub_20E863714(v66 - 208);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  sub_20E863784((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void sub_20E927018(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20E927448);
}

void sub_20E927028(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20E86665C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20E92703C()
{
  unint64_t v0;

  if (v0)
  {
    STACK[0x418] = v0;
    JUMPOUT(0x20E927464);
  }
  JUMPOUT(0x20E927468);
}

void sub_20E92704C()
{
  JUMPOUT(0x20E927054);
}

void sub_20E9272EC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 - 184) && *(char *)(v0 - 185) < 0)
    operator delete(*(void **)(v0 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x390]);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  sub_20E863784((uint64_t)&STACK[0x410]);
  __cxa_end_catch();
  JUMPOUT(0x20E927490);
}

void sub_20E9273BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  void *v67;

  v67 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v67;
    operator delete(v67);
    sub_20E928058((uint64_t)&a66);
    _Unwind_Resume(a1);
  }
  sub_20E928058((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void sub_20E927410(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20E927424()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20E92745CLL);
  JUMPOUT(0x20E927468);
}

void sub_20E92742C()
{
  if (STACK[0x410])
  {
    STACK[0x418] = STACK[0x410];
    JUMPOUT(0x20E927464);
  }
  JUMPOUT(0x20E927468);
}

void sub_20E92743C()
{
  unint64_t v0;

  if (v0)
  {
    STACK[0x418] = v0;
    JUMPOUT(0x20E92748CLL);
  }
  JUMPOUT(0x20E927490);
}

void sub_20E927444(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20E927450()
{
  JUMPOUT(0x20E927458);
}

void sub_20E927478()
{
  JUMPOUT(0x20E927480);
}

uint64_t sub_20E9274A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 336))
  {
    v2 = *(void **)(a1 + 312);
    if (v2)
    {
      *(_QWORD *)(a1 + 320) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 288);
    if (v3)
    {
      *(_QWORD *)(a1 + 296) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 280))
  {
    v4 = *(void **)(a1 + 256);
    if (v4)
    {
      *(_QWORD *)(a1 + 264) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 232);
    if (v5)
    {
      *(_QWORD *)(a1 + 240) = v5;
      operator delete(v5);
    }
  }
  *(_QWORD *)a1 = &off_24C9F15F0;
  return a1;
}

std::logic_error *sub_20E92751C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

void sub_20E927540(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20E927AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E927AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E927AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20E927B44(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = &off_24C9F15F0;
  *(_QWORD *)(a1 + 8) = &off_24C9F1578;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 168);
  v5 = *(_OWORD *)(a2 + 184);
  v6 = *(_OWORD *)(a2 + 200);
  v7 = *(_OWORD *)(a2 + 216);
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 200) = v6;
  *(_OWORD *)(a1 + 216) = v7;
  *(_OWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 184) = v5;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    sub_20E927D0C((_QWORD *)(a1 + 232), a2 + 232);
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    sub_20E927EAC((_QWORD *)(a1 + 288), (uint64_t *)(a2 + 288));
    *(_BYTE *)(a1 + 336) = 1;
  }
  return a1;
}

void sub_20E927C4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v6;
  void *v7;

  if (*(_BYTE *)(v1 + 336))
  {
    v6 = *(void **)(v1 + 312);
    if (v6)
    {
      *(_QWORD *)(v1 + 320) = v6;
      operator delete(v6);
    }
    v7 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 296) = v7;
      operator delete(v7);
    }
  }
  sub_20E927CC4(v2);
  *(_QWORD *)v1 = v4;
  _Unwind_Resume(a1);
}

void sub_20E927C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;
  void *v6;

  if (*(_BYTE *)(v1 + 280))
  {
    v5 = *(void **)(v1 + 256);
    if (v5)
    {
      *(_QWORD *)(v1 + 264) = v5;
      operator delete(v5);
    }
    v6 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 240) = v6;
      operator delete(v6);
    }
  }
  *(_QWORD *)v1 = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E927CC4(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

_QWORD *sub_20E927D0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  size_t v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556)
      sub_20E867F44();
    v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * (v6 >> 2)];
    v8 = 12 * ((v6 - 12) / 0xCuLL) + 12;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0x8E38E38E38E38E39 * (v11 >> 2) >= 0x71C71C71C71C71DLL)
      sub_20E867F44();
    v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[4 * (v11 >> 2)];
    v13 = 36 * ((v11 - 36) / 0x24uLL) + 36;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  return a1;
}

void sub_20E927E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E927EAC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  size_t v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      v12 = *(_QWORD *)(v4 + v9);
      *((_DWORD *)v11 + 2) = *(_DWORD *)(v4 + v9 + 8);
      *(_QWORD *)v11 = v12;
      v13 = *(_QWORD *)(v4 + v9 + 12);
      *((_DWORD *)v11 + 5) = *(_DWORD *)(v4 + v9 + 20);
      *(_QWORD *)(v11 + 12) = v13;
      v9 += 24;
    }
    while (v10 + 24 != v5);
    a1[1] = &v8[v9];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v15 = (_BYTE *)a2[3];
  v14 = (_BYTE *)a2[4];
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (0x8E38E38E38E38E39 * (v16 >> 2) >= 0x71C71C71C71C71DLL)
      sub_20E867F44();
    v17 = (char *)operator new(v16);
    a1[3] = v17;
    a1[4] = v17;
    a1[5] = &v17[4 * (v16 >> 2)];
    v18 = 36 * ((v16 - 36) / 0x24uLL) + 36;
    memcpy(v17, v15, v18);
    a1[4] = &v17[v18];
  }
  return a1;
}

void sub_20E928024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E928058(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 344))
  {
    if (*(_BYTE *)(a1 + 336))
    {
      v2 = *(void **)(a1 + 312);
      if (v2)
      {
        *(_QWORD *)(a1 + 320) = v2;
        operator delete(v2);
      }
      v3 = *(void **)(a1 + 288);
      if (v3)
      {
        *(_QWORD *)(a1 + 296) = v3;
        operator delete(v3);
      }
    }
    if (*(_BYTE *)(a1 + 280))
    {
      v4 = *(void **)(a1 + 256);
      if (v4)
      {
        *(_QWORD *)(a1 + 264) = v4;
        operator delete(v4);
      }
      v5 = *(void **)(a1 + 232);
      if (v5)
      {
        *(_QWORD *)(a1 + 240) = v5;
        operator delete(v5);
      }
    }
    *(_QWORD *)a1 = &off_24C9F15F0;
  }
  return a1;
}

uint64_t CV3DVIOAddCameraCalibrationToDictionary(const void *a1, unsigned int a2, unsigned int a3, __int128 *a4, uint64_t *a5, char *a6, char *a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  char v13[16];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = *a4;
  v15 = *((_QWORD *)a4 + 2);
  v16 = 0;
  strcpy(v13, "Perspective");
  return CV3DVIOAddCameraCalibrationToDictionaryV2_0(a1, a2, a3, (double *)&v14, a5, a6, a7, v13, a8, a9, a10, a11, a12);
}

uint64_t CV3DVIOCreate(_QWORD *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  const void *v11;
  size_t v12;
  size_t v13;
  __int128 *p_dst;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  _BYTE *p_p;
  uint64_t v28;
  uint64_t v29;
  __int128 __p;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  __int128 __dst;
  unint64_t v35;

  if (!a1)
    return 5;
  v2 = (char *)operator new(0x3E48uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (v2)
  {
    bzero(v2, 0x3E48uLL);
    sub_21021A874((uint64_t *)v3);
    sub_210218568("APICallback", 0, 0, -10, 1, 0, (uint64_t *)&v32);
    v4 = v32;
    *(_QWORD *)&__dst = &off_24CA1E2F8;
    *((_QWORD *)&__dst + 1) = v32;
    *((_QWORD *)v3 + 2) = &off_24C9B1898;
    v5 = (_QWORD *)operator new();
    *((_QWORD *)v3 + 4) = 0;
    *v5 = &off_24CA1E2F8;
    v5[1] = v4;
    *((_QWORD *)v3 + 5) = 0;
    *((_QWORD *)v3 + 3) = v5;
    v3[48] = 0;
    v3[13160] = 0;
    *((_OWORD *)v3 + 823) = 0u;
    *((_OWORD *)v3 + 824) = 0u;
    *((_OWORD *)v3 + 825) = 0u;
    *((_OWORD *)v3 + 826) = 0u;
    *((_OWORD *)v3 + 827) = 0u;
    *((_OWORD *)v3 + 828) = 0u;
    *((_OWORD *)v3 + 829) = 0u;
    *((_OWORD *)v3 + 830) = 0u;
    *((_OWORD *)v3 + 831) = 0u;
    *((_OWORD *)v3 + 832) = 0u;
    *((_OWORD *)v3 + 833) = 0u;
    *((_OWORD *)v3 + 834) = 0u;
    *((_OWORD *)v3 + 835) = 0u;
    *((_OWORD *)v3 + 836) = 0u;
    *((_QWORD *)v3 + 1674) = 0x7FEFFFFFFFFFFFFFLL;
    v3[13400] = 0;
    v3[13408] = 0;
    *((_QWORD *)v3 + 1685) = 0x3FF0000000000000;
    *(_OWORD *)(v3 + 13416) = xmmword_2102DD7A8;
    *(_OWORD *)(v3 + 13432) = unk_2102DD7B8;
    *(_OWORD *)(v3 + 13448) = xmmword_2102DD7C8;
    *(_OWORD *)(v3 + 13464) = unk_2102DD7D8;
    *((_QWORD *)v3 + 1694) = 0x3FF0000000000000;
    *((_OWORD *)v3 + 843) = xmmword_2102DD7A8;
    *((_OWORD *)v3 + 846) = unk_2102DD7D8;
    *((_OWORD *)v3 + 845) = xmmword_2102DD7C8;
    *((_OWORD *)v3 + 844) = unk_2102DD7B8;
    *((_QWORD *)v3 + 1703) = 0x3FF0000000000000;
    *(_OWORD *)(v3 + 13592) = xmmword_2102DD7C8;
    *(_OWORD *)(v3 + 13608) = unk_2102DD7D8;
    *(_OWORD *)(v3 + 13560) = xmmword_2102DD7A8;
    *(_OWORD *)(v3 + 13576) = unk_2102DD7B8;
    *((_QWORD *)v3 + 1712) = 0x3FF0000000000000;
    *((_OWORD *)v3 + 855) = unk_2102DD7D8;
    *((_OWORD *)v3 + 854) = xmmword_2102DD7C8;
    *((_OWORD *)v3 + 853) = unk_2102DD7B8;
    *((_OWORD *)v3 + 852) = xmmword_2102DD7A8;
    *((_QWORD *)v3 + 1721) = 0x3FF0000000000000;
    *(_OWORD *)(v3 + 13704) = xmmword_2102DD7A8;
    *(_OWORD *)(v3 + 13720) = unk_2102DD7B8;
    *(_OWORD *)(v3 + 13736) = xmmword_2102DD7C8;
    *(_OWORD *)(v3 + 13752) = unk_2102DD7D8;
    *((_QWORD *)v3 + 1730) = 0x3FF0000000000000;
    *((_OWORD *)v3 + 864) = unk_2102DD7D8;
    *((_OWORD *)v3 + 863) = xmmword_2102DD7C8;
    *((_OWORD *)v3 + 862) = unk_2102DD7B8;
    *((_OWORD *)v3 + 861) = xmmword_2102DD7A8;
    *((_QWORD *)v3 + 1738) = 0;
    *((_OWORD *)v3 + 868) = 0u;
    *((_OWORD *)v3 + 867) = 0u;
    *((_OWORD *)v3 + 866) = 0u;
    *((_QWORD *)v3 + 1731) = 0x3FF0000000000000;
    *((_QWORD *)v3 + 1735) = 0x3FF0000000000000;
    *((_QWORD *)v3 + 1739) = 0x3FF0000000000000;
    __asm { FMOV            V1.2D, #1.0 }
    *((_OWORD *)v3 + 870) = _Q1;
    *((_OWORD *)v3 + 871) = _Q1;
    *((_OWORD *)v3 + 872) = _Q1;
    *((_WORD *)v3 + 7008) = 0;
    *((_OWORD *)v3 + 875) = 0u;
    *((_OWORD *)v3 + 874) = 0u;
    *((_OWORD *)v3 + 873) = 0u;
    v3[14024] = 0;
    v3[14432] = 0;
    v3[14440] = 0;
    v3[15528] = 0;
    v3[15536] = 0;
    v3[15576] = 0;
    v3[15584] = 0;
    v3[15588] = 0;
    v3[15592] = 0;
    v3[15720] = 0;
    v11 = (const void *)qword_254A592A8;
    v12 = strlen((const char *)qword_254A592A8);
    if (v12 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v13 = v12;
    if (v12 >= 0x17)
    {
      v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v16 = v12 | 7;
      v17 = v16 + 1;
      p_dst = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&__dst + 1) = v13;
      v35 = v17 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v35) = v12;
      p_dst = &__dst;
      if (!v12)
      {
LABEL_13:
        *((_BYTE *)p_dst + v13) = 0;
        v18 = (const void *)qword_254A592B0;
        v19 = strlen((const char *)qword_254A592B0);
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v20 = v19;
        if (v19 >= 0x17)
        {
          v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v22 = v19 | 7;
          v23 = v22 + 1;
          v21 = operator new(v22 + 1);
          *((_QWORD *)&v32 + 1) = v20;
          v33 = v23 | 0x8000000000000000;
          *(_QWORD *)&v32 = v21;
        }
        else
        {
          HIBYTE(v33) = v19;
          v21 = &v32;
          if (!v19)
          {
LABEL_21:
            v21[v20] = 0;
            v24 = (const void *)qword_254A592B8;
            v25 = strlen((const char *)qword_254A592B8);
            if (v25 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v26 = v25;
            if (v25 >= 0x17)
            {
              v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v28 = v25 | 7;
              v29 = v28 + 1;
              p_p = operator new(v28 + 1);
              *((_QWORD *)&__p + 1) = v26;
              v31 = v29 | 0x8000000000000000;
              *(_QWORD *)&__p = p_p;
            }
            else
            {
              HIBYTE(v31) = v25;
              p_p = &__p;
              if (!v25)
              {
LABEL_29:
                p_p[v26] = 0;
                sub_210108228(v3 + 15728, &__dst, &v32, &__p);
                if (SHIBYTE(v31) < 0)
                {
                  operator delete((void *)__p);
                  if ((SHIBYTE(v33) & 0x80000000) == 0)
                  {
LABEL_31:
                    if ((SHIBYTE(v35) & 0x80000000) == 0)
                    {
LABEL_32:
                      result = 0;
                      *((_DWORD *)v3 + 3980) = 0;
                      *(_OWORD *)(v3 + 15928) = 0u;
                      goto LABEL_33;
                    }
LABEL_36:
                    operator delete((void *)__dst);
                    goto LABEL_32;
                  }
                }
                else if ((SHIBYTE(v33) & 0x80000000) == 0)
                {
                  goto LABEL_31;
                }
                operator delete((void *)v32);
                if ((SHIBYTE(v35) & 0x80000000) == 0)
                  goto LABEL_32;
                goto LABEL_36;
              }
            }
            memmove(p_p, v24, v26);
            goto LABEL_29;
          }
        }
        memmove(v21, v18, v20);
        goto LABEL_21;
      }
    }
    memmove(p_dst, v11, v13);
    goto LABEL_13;
  }
  result = 3;
LABEL_33:
  *a1 = v3;
  return result;
}

void sub_20E9285D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v34;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a29 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_4:
    sub_20E86A810(v32);
    if (!*v31)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(a24);
  sub_20E86A810(v32);
  if (!*v31)
  {
LABEL_6:
    sub_20E92C794(a10);
    sub_20E92C7D8(v30);
    sub_20E92C868(a11);
    v34 = sub_21021A3F8(v29);
    MEMORY[0x212BC6380](v34, MEMORY[0x24BEDB6B8]);
    _Unwind_Resume(a1);
  }
LABEL_5:
  sub_20E937AF4(a9);
  goto LABEL_6;
}

void sub_20E9286CC()
{
  _BYTE *v0;
  uint64_t v1;

  sub_20E86A810(v1);
  if (!*v0)
    JUMPOUT(0x20E928608);
  JUMPOUT(0x20E928600);
}

uint64_t CV3DVIOSetPointCloudCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (!a2)
    return 5;
  result = 0;
  *(_QWORD *)(a1 + 13168) = a2;
  *(_QWORD *)(a1 + 13176) = a3;
  return result;
}

uint64_t CV3DVIOSetLineCloudCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (!a2)
    return 5;
  result = 0;
  *(_QWORD *)(a1 + 13184) = a2;
  *(_QWORD *)(a1 + 13192) = a3;
  return result;
}

uint64_t CV3DVIOSetPoseCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (!a2)
    return 5;
  result = 0;
  *(_QWORD *)(a1 + 13200) = a2;
  *(_QWORD *)(a1 + 13208) = a3;
  return result;
}

uint64_t CV3DVIOSetPoseCallback2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (!a2)
    return 5;
  result = 0;
  *(_QWORD *)(a1 + 13216) = a2;
  *(_QWORD *)(a1 + 13224) = a3;
  return result;
}

uint64_t CV3DVIOSetVIOErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (!a2)
    return 5;
  result = 0;
  *(_QWORD *)(a1 + 13248) = a2;
  *(_QWORD *)(a1 + 13256) = a3;
  return result;
}

uint64_t CV3DVIOSetSignificantEventsCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (!a2)
    return 5;
  result = 0;
  *(_QWORD *)(a1 + 13264) = a2;
  *(_QWORD *)(a1 + 13272) = a3;
  return result;
}

uint64_t CV3DVIOInitialize()
{
  uint64_t v0;
  const void *v1;
  const void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v18;
  char *v19;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33[2];
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  std::__shared_weak_count *v38;
  char v39;
  __int128 v40;
  void *v41[2];
  _OWORD *v42;
  void *v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  int v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  int v78;
  _QWORD v79[136];
  char *v80;
  char *v81;
  char *v82;
  _BYTE v83[528];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int16 v97;
  _BYTE v98[1704];
  char v99[16];
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  std::__shared_weak_count *v104;
  char v105;
  _OWORD v106[33];
  _OWORD v107[2];
  _BYTE v108[32];
  _BYTE v109[32];
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  _QWORD v113[4];
  __int16 v114;
  uint64_t v115;
  int v116;
  void *v117;
  void *v118;
  _OWORD *v119;
  __int128 __p;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  __int16 v144;
  char v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  char v151;
  int v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  _BYTE v155[13112];
  char v156;
  _QWORD v157[139];

  v0 = MEMORY[0x24BDAC7A8]();
  v157[136] = *MEMORY[0x24BDAC8D0];
  if (!v0)
    return 4;
  v2 = v1;
  v3 = v0;
  v115 = 0;
  v116 = -1;
  v4 = operator new(0x20uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v117 = v4;
  v118 = v4 + 2;
  __p = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v134 = unk_2102DD7D8;
  v119 = v4 + 2;
  v135 = 0x3FF0000000000000;
  v133 = xmmword_2102DD7C8;
  v132 = unk_2102DD7B8;
  v131 = xmmword_2102DD7A8;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = 0;
  v143 = 0xBFF0000000000000;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0x3FF0000000000000;
  v148 = 0x3F847AE147AE147BLL;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  memset(v106, 0, 72);
  *((_QWORD *)&v106[4] + 1) = 0x7FEFFFFFFFFFFFFFLL;
  LOBYTE(v106[5]) = 0;
  BYTE8(v106[5]) = 0;
  v106[6] = xmmword_2102DD7A8;
  v106[7] = unk_2102DD7B8;
  v106[8] = xmmword_2102DD7C8;
  v106[9] = unk_2102DD7D8;
  *(_QWORD *)&v106[10] = 0x3FF0000000000000;
  *((_QWORD *)&v106[14] + 1) = 0x3FF0000000000000;
  *(_OWORD *)((char *)&v106[13] + 8) = unk_2102DD7D8;
  *(_OWORD *)((char *)&v106[12] + 8) = xmmword_2102DD7C8;
  *(_OWORD *)((char *)&v106[11] + 8) = unk_2102DD7B8;
  *(_OWORD *)((char *)&v106[10] + 8) = xmmword_2102DD7A8;
  v106[18] = unk_2102DD7D8;
  v106[17] = xmmword_2102DD7C8;
  v106[16] = unk_2102DD7B8;
  v106[15] = xmmword_2102DD7A8;
  *(_OWORD *)((char *)&v106[21] + 8) = xmmword_2102DD7C8;
  *(_OWORD *)((char *)&v106[22] + 8) = unk_2102DD7D8;
  *(_OWORD *)((char *)&v106[19] + 8) = xmmword_2102DD7A8;
  *(_OWORD *)((char *)&v106[20] + 8) = unk_2102DD7B8;
  *(_QWORD *)&v106[19] = 0x3FF0000000000000;
  *((_QWORD *)&v106[23] + 1) = 0x3FF0000000000000;
  v106[27] = unk_2102DD7D8;
  v106[26] = xmmword_2102DD7C8;
  v106[25] = unk_2102DD7B8;
  v106[24] = xmmword_2102DD7A8;
  *(_OWORD *)((char *)&v106[30] + 8) = xmmword_2102DD7C8;
  *(_OWORD *)((char *)&v106[31] + 8) = unk_2102DD7D8;
  *(_OWORD *)((char *)&v106[28] + 8) = xmmword_2102DD7A8;
  *(_OWORD *)((char *)&v106[29] + 8) = unk_2102DD7B8;
  *(_QWORD *)&v106[28] = 0x3FF0000000000000;
  *((_QWORD *)&v106[32] + 1) = 0x3FF0000000000000;
  memset(&v108[8], 0, 24);
  *((_QWORD *)&v107[1] + 1) = 0;
  *(_OWORD *)((char *)v107 + 8) = 0u;
  *(_QWORD *)&v107[0] = 0x3FF0000000000000;
  *(_QWORD *)v108 = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)v109 = _Q1;
  *(_OWORD *)&v109[16] = _Q1;
  v110 = _Q1;
  v111 = 0x3FF0000000000000;
  memset(v113, 0, sizeof(v113));
  v112 = 0u;
  v114 = 0;
  v10 = sub_20E9D8684(v2, (uint64_t)&v115, (uint64_t)v106, v3 + 15728);
  if (!(_DWORD)v10)
  {
    v99[0] = 0;
    v105 = 0;
    sub_20E9C91A0();
    if (v156)
    {
      v78 = 1;
      v75 = 0;
      v72 = 0u;
      v73 = 0u;
      v69 = 0;
      v71 = 0u;
      v67 = 0u;
      v68 = 0u;
      v40 = 0u;
      DWORD2(v40) = -1;
      v18 = operator new(0x20uLL);
      *v18 = 0u;
      v18[1] = 0u;
      v41[0] = v18;
      v41[1] = v18 + 2;
      *(_OWORD *)v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v57 = unk_2102DD7D8;
      v42 = v18 + 2;
      v58 = 0x3FF0000000000000;
      v56 = xmmword_2102DD7C8;
      v55 = unk_2102DD7B8;
      v54 = xmmword_2102DD7A8;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v65 = 0;
      v66 = 0xBFF0000000000000;
      LOWORD(v67) = 0;
      BYTE8(v67) = 0;
      LOBYTE(v69) = 0;
      v70 = 0x3FF0000000000000;
      *(_QWORD *)&v71 = 0x3F847AE147AE147BLL;
      BYTE8(v71) = 0;
      LOBYTE(v72) = 0;
      BYTE8(v73) = 0;
      v74 = 0;
      v76 = 0;
      v77 = 0;
      sub_20E92C968((uint64_t)v79, 0, &v78, (uint64_t)&v115, (uint64_t)&v40);
      sub_20E8A2514((uint64_t)v33, (uint64_t)v99);
      sub_20E89E038((uint64_t)v157, (uint64_t)v79);
      v81 = 0;
      v80 = 0;
      v82 = 0;
      v80 = (char *)operator new(0x440uLL);
      v81 = v80;
      v19 = v80 + 1088;
      v82 = v80 + 1088;
      sub_20E89E038((uint64_t)v80, (uint64_t)v157);
      v81 = v19;
      sub_20E86A6B8(v157);
      memcpy(v83, v106, sizeof(v83));
      v86 = *(_OWORD *)v108;
      v87 = *(_OWORD *)&v108[16];
      v84 = v107[0];
      v85 = v107[1];
      v88 = *(_QWORD *)v109;
      v89 = *(_OWORD *)&v109[8];
      v90 = *(_QWORD *)&v109[24];
      v91 = v110;
      v92 = v111;
      v93 = v112;
      v94 = v113[0];
      v95 = *(_OWORD *)&v113[1];
      v96 = v113[3];
      v97 = v114;
      v98[0] = 0;
      v98[408] = 0;
      v98[416] = 0;
      v98[1504] = 0;
      v98[1512] = 0;
      v98[1552] = 0;
      v98[1560] = 0;
      v98[1564] = 0;
      v98[1568] = 0;
      v98[1696] = 0;
      v20 = sub_20E90D9F0((uint64_t)v98, v33);
      if (v39)
      {
        v21 = v38;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        if (v34)
        {
          v35 = v34;
          operator delete(v34);
        }
      }
      sub_20E86A6B8(v79);
      v24 = v77;
      if (v77)
      {
        v25 = (unint64_t *)&v77->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      v10 = sub_20E929058(v3, (uint64_t)v155, (uint64_t)&v80, 0);
      sub_20E86A810((uint64_t)&v80);
      if (v156)
        sub_20E937AF4((uint64_t)v155);
      if (v105)
      {
        v30 = v104;
        if (v104)
        {
          v31 = (unint64_t *)&v104->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        if (v102)
        {
          v103 = v102;
          operator delete(v102);
        }
        if (v100)
        {
          v101 = v100;
          operator delete(v100);
        }
      }
    }
    else
    {
      v10 = 5;
    }
  }
  v11 = v154;
  if (v154)
  {
    v12 = (unint64_t *)&v154->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  return v10;
}

void sub_20E928F4C(_Unwind_Exception *a1)
{
  _BYTE *v1;

  sub_20E86A810((uint64_t)&STACK[0x830]);
  if (*v1)
    sub_20E937AF4((uint64_t)&STACK[0x1818]);
  sub_20E8A1388((uint64_t)&STACK[0x11B0]);
  sub_20E90BD50(&STACK[0x1610]);
  _Unwind_Resume(a1);
}

uint64_t sub_20E929058(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t (***v55)();
  uint64_t v56;
  int v57;
  unsigned int v58;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t (**v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v8 = (_BYTE *)(a1 + 12944);
  v9 = (uint64_t *)(a1 + 48);
  if (*(_BYTE *)(a1 + 13160))
  {
    v10 = *(_QWORD *)a2;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 8);
    *v9 = v10;
    sub_20E869118(a1 + 64, (_QWORD *)(a2 + 16));
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 48);
    sub_20E862C24(a1 + 104, (_QWORD *)(a2 + 56));
    memcpy((void *)(a1 + 11528), (const void *)(a2 + 11480), 0x356uLL);
    *(_OWORD *)(a1 + 12384) = *(_OWORD *)(a2 + 12336);
    v11 = *(_OWORD *)(a2 + 12368);
    v12 = *(_OWORD *)(a2 + 12384);
    v13 = *(_QWORD *)(a2 + 12400);
    *(_OWORD *)(a1 + 12400) = *(_OWORD *)(a2 + 12352);
    *(_QWORD *)(a1 + 12448) = v13;
    *(_OWORD *)(a1 + 12432) = v12;
    *(_OWORD *)(a1 + 12416) = v11;
    if (v9 != (uint64_t *)a2)
      sub_20E86A1AC(a1 + 12456, *(char **)(a2 + 12408), *(char **)(a2 + 12416), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 12416) - *(_QWORD *)(a2 + 12408)) >> 3));
    v14 = *(_OWORD *)(a2 + 12432);
    v15 = *(_OWORD *)(a2 + 12448);
    v16 = *(_OWORD *)(a2 + 12464);
    *(_OWORD *)(a1 + 12528) = *(_OWORD *)(a2 + 12480);
    *(_OWORD *)(a1 + 12512) = v16;
    *(_OWORD *)(a1 + 12496) = v15;
    *(_OWORD *)(a1 + 12480) = v14;
    v17 = *(_OWORD *)(a2 + 12576);
    v18 = *(_OWORD *)(a2 + 12592);
    v19 = *(_OWORD *)(a2 + 12608);
    *(_OWORD *)(a1 + 12608) = *(_OWORD *)(a2 + 12560);
    *(_OWORD *)(a1 + 12656) = v19;
    *(_OWORD *)(a1 + 12640) = v18;
    *(_OWORD *)(a1 + 12624) = v17;
    v20 = *(_OWORD *)(a2 + 12640);
    v21 = *(_OWORD *)(a2 + 12656);
    v22 = *(_OWORD *)(a2 + 12672);
    *(_OWORD *)(a1 + 12672) = *(_OWORD *)(a2 + 12624);
    *(_OWORD *)(a1 + 12720) = v22;
    *(_OWORD *)(a1 + 12704) = v21;
    *(_OWORD *)(a1 + 12688) = v20;
    v23 = *(_OWORD *)(a2 + 12496);
    v24 = *(_OWORD *)(a2 + 12512);
    v25 = *(_OWORD *)(a2 + 12528);
    *(_OWORD *)(a1 + 12592) = *(_OWORD *)(a2 + 12544);
    *(_OWORD *)(a1 + 12576) = v25;
    *(_OWORD *)(a1 + 12560) = v24;
    *(_OWORD *)(a1 + 12544) = v23;
    sub_20E869F44(a1 + 12736, a2 + 12688);
    *v8 = *(_BYTE *)(a2 + 12896);
    v26 = *(_QWORD *)(a2 + 12904);
    *(_QWORD *)(a1 + 12959) = *(_QWORD *)(a2 + 12911);
    *(_QWORD *)(a1 + 12952) = v26;
    if (v9 != (uint64_t *)a2)
    {
      sub_20E92CD94((_QWORD *)(a1 + 12968), *(char **)(a2 + 12920), *(char **)(a2 + 12928), (uint64_t)(*(_QWORD *)(a2 + 12928) - *(_QWORD *)(a2 + 12920)) >> 3);
      sub_20E92CD94((_QWORD *)(a1 + 12992), *(char **)(a2 + 12944), *(char **)(a2 + 12952), (uint64_t)(*(_QWORD *)(a2 + 12952) - *(_QWORD *)(a2 + 12944)) >> 3);
    }
    *(_OWORD *)(a1 + 13016) = *(_OWORD *)(a2 + 12968);
    v27 = *(_OWORD *)(a2 + 12984);
    v28 = *(_OWORD *)(a2 + 13000);
    v29 = *(_OWORD *)(a2 + 13032);
    *(_OWORD *)(a1 + 13064) = *(_OWORD *)(a2 + 13016);
    *(_OWORD *)(a1 + 13080) = v29;
    *(_OWORD *)(a1 + 13032) = v27;
    *(_OWORD *)(a1 + 13048) = v28;
    v30 = *(_OWORD *)(a2 + 13048);
    v31 = *(_OWORD *)(a2 + 13064);
    v32 = *(_OWORD *)(a2 + 13096);
    *(_OWORD *)(a1 + 13128) = *(_OWORD *)(a2 + 13080);
    *(_OWORD *)(a1 + 13144) = v32;
    *(_OWORD *)(a1 + 13096) = v30;
    *(_OWORD *)(a1 + 13112) = v31;
  }
  else
  {
    sub_20E92CEEC(a1 + 48, (uint64_t *)a2);
    v8[216] = 1;
  }
  sub_20E92CB74(a1 + 13296, a3);
  *(_DWORD *)(a1 + 15920) = a4;
  v33 = operator new();
  v74 = 0;
  v75 = 0;
  v76 = 0;
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 8) = v33 + 16;
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 24) = 0;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  sub_21021781C(v33, (uint64_t *)&v74);
  v34 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v33;
  if (v34)
  {
    v35 = *(std::__shared_weak_count **)(v34 + 40);
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    sub_20E8D1F68(v34 + 8, *(_QWORD *)(v34 + 16));
    MEMORY[0x212BC6398](v34, 0x1020C401722722ELL);
    v33 = *(_QWORD *)(a1 + 32);
  }
  v74 = &off_24C9B0910;
  v75 = a1;
  v77 = (uint64_t *)&v74;
  v72[0] = &off_24C9B0AB0;
  v72[1] = a1;
  v73 = v72;
  v70[0] = &off_24C9B0BC0;
  v70[1] = a1;
  v71 = v70;
  v68[0] = &off_24C9B0CC0;
  v68[1] = a1;
  v69 = v68;
  v66[0] = &off_24C9B0D50;
  v66[1] = a1;
  v67 = v66;
  v64[0] = &off_24C9B0E60;
  v64[1] = a1;
  v65 = v64;
  v62[0] = &off_24C9B0F60;
  v62[1] = a1;
  v63 = v62;
  v60[0] = &off_24C9B1070;
  v60[1] = a1;
  v61 = v60;
  v38 = operator new();
  sub_20E9A7290(v38, (uint64_t)v9, a1 + 13296, (uint64_t)&v74, (uint64_t)v72, (uint64_t)v70, (uint64_t)v68, (uint64_t)v66, (uint64_t)v64, (uint64_t)v62, (uint64_t)v60, v33);
  v39 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v38;
  if (v39)
  {
    v40 = sub_20E9A6DF4(v39);
    MEMORY[0x212BC6398](v40, 0x10B2C4007DABD58);
  }
  v41 = v61;
  if (v61 == v60)
  {
    v42 = 4;
    v41 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_22;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_22:
  v43 = v63;
  if (v63 == v62)
  {
    v44 = 4;
    v43 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_27;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_27:
  v45 = v65;
  if (v65 == v64)
  {
    v46 = 4;
    v45 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_32;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_32:
  v47 = v67;
  if (v67 == v66)
  {
    v48 = 4;
    v47 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_37;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_37:
  v49 = v69;
  if (v69 == v68)
  {
    v50 = 4;
    v49 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_42;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_42:
  v51 = v71;
  if (v71 == v70)
  {
    v52 = 4;
    v51 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_47;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_47:
  v53 = v73;
  if (v73 == v72)
  {
    v54 = 4;
    v53 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_52;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_52:
  v55 = (uint64_t (***)())v77;
  if (v77 == (uint64_t *)&v74)
  {
    v56 = 4;
    v55 = &v74;
  }
  else
  {
    if (!v77)
      goto LABEL_57;
    v56 = 5;
  }
  (*v55)[v56]();
LABEL_57:
  v57 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 13496);
  if (v57 == 1)
    v58 = 10;
  else
    v58 = 1;
  if (v57)
    return v58;
  else
    return 0;
}

uint64_t CV3DVIOInitialize2()
{
  uint64_t v0;
  int **v1;
  uint64_t v2;
  int **v3;
  uint64_t v4;
  int *v5;
  int *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int *v10;
  int *v11;
  int v12;
  void **v14;
  void **v15;
  uint64_t v16;
  int v17;
  void **v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v0 = MEMORY[0x24BDAC7A8]();
  v23 = *MEMORY[0x24BDAC8D0];
  if (!v0)
    return 4;
  v3 = v1;
  v4 = 5;
  if (v1 && v2)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v5 = *v1;
    v6 = v1[1];
    v14 = &v19;
    if (v5 == v6)
      return 5;
    v7 = v0;
    do
    {
      LODWORD(v18) = *v5;
      sub_20EA9AB98((uint64_t *)&v14, &v18);
      v5 += 272;
    }
    while (v5 != v6);
    v8 = v19;
    v9 = v20;
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v8 == v9)
      return 5;
    sub_20E9D0A20();
    if (!v22)
    {
      return 5;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v10 = *v3;
      v11 = v3[1];
      v18 = (void **)&v14;
      if (v10 == v11)
      {
        v12 = MEMORY[0xFFFFFFFFFFFFFFFC];
      }
      else
      {
        do
        {
          v17 = *v10;
          sub_20EA9AB98((uint64_t *)&v18, &v17);
          v10 += 272;
        }
        while (v10 != v11);
        v12 = *((_DWORD *)v15 - 1);
        if (v14)
        {
          v15 = v14;
          operator delete(v14);
        }
      }
      v4 = sub_20E929058(v7, (uint64_t)&v19, (uint64_t)v3, v12);
      if (v22)
        sub_20E937AF4((uint64_t)&v19);
    }
  }
  return v4;
}

void sub_20E929A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  _BYTE *v15;

  if (*v15)
  {
    sub_20E937AF4((uint64_t)&a14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DVIOPushFrame(uint64_t a1, __CVBuffer *a2, CFTypeRef cf, double a4)
{
  std::__shared_weak_count *v8;
  const __CFDictionary *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  CFDictionaryRef v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  const __CFNumber *v24;
  CFTypeID TypeID;
  std::__shared_weak_count *v26;
  CFDictionaryRef v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  CFTypeID v32;
  const __CFDictionary *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  const __CFDictionary **p_valuePtr;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const __CFDictionary *valuePtr;
  std::__shared_weak_count *v44;
  char v45;
  void *value[2];
  const __CFDictionary *v47;
  uint64_t v48;
  CFDictionaryRef v49;
  std::__shared_weak_count *v50;
  void *v51;

  sub_20E9DA754(&valuePtr, cf);
  v9 = valuePtr;
  v8 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = v44;
    if (v44)
    {
      v13 = (unint64_t *)&v44->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v49 = v9;
    v50 = v8;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    v20 = v49;
    v19 = v50;
    if (!v50)
      goto LABEL_23;
    v21 = (unint64_t *)&v50->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (!v20)
        goto LABEL_34;
    }
    else
    {
LABEL_23:
      if (!v20)
        goto LABEL_34;
    }
  }
  else
  {
    v49 = valuePtr;
    v50 = 0;
    if (!valuePtr)
      goto LABEL_34;
  }
  value[0] = 0;
  if (!CFSTR("CameraISOValue") || !CFDictionaryGetValueIfPresent(v49, CFSTR("CameraISOValue"), (const void **)value))
  {
LABEL_34:
    v47 = 0;
    v48 = 0;
    v27 = v49;
    v26 = v50;
    if (!v50)
      goto LABEL_39;
    goto LABEL_35;
  }
  v24 = (const __CFNumber *)value[0];
  if (value[0] && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v24) == TypeID))
  {
    valuePtr = 0;
    CFNumberGetValue(v24, kCFNumberDoubleType, &valuePtr);
    v47 = valuePtr;
    v48 = 1;
    v27 = v49;
    v26 = v50;
    if (!v50)
      goto LABEL_39;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v27 = v49;
    v26 = v50;
    if (!v50)
      goto LABEL_39;
  }
LABEL_35:
  v28 = (unint64_t *)&v26->__shared_owners_;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  do
    v30 = __ldaxr(v28);
  while (__stlxr(v30 - 1, v28));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (v27)
      goto LABEL_40;
LABEL_46:
    v34 = 0;
    v31 = 0;
    LOBYTE(v33) = 0;
    goto LABEL_52;
  }
LABEL_39:
  if (!v27)
    goto LABEL_46;
LABEL_40:
  v51 = 0;
  if (!CFSTR("CameraIntegrationTime")
    || !CFDictionaryGetValueIfPresent(v49, CFSTR("CameraIntegrationTime"), (const void **)&v51))
  {
    goto LABEL_46;
  }
  v31 = (uint64_t)v51;
  if (!v51)
  {
LABEL_50:
    v33 = 0;
    goto LABEL_51;
  }
  v32 = CFNumberGetTypeID();
  if (CFGetTypeID((CFTypeRef)v31) != v32)
  {
    v31 = 0;
    goto LABEL_50;
  }
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v31, kCFNumberDoubleType, &valuePtr);
  v33 = valuePtr;
  v31 = 1;
LABEL_51:
  v34 = (unint64_t)v33 & 0xFFFFFFFFFFFFFF00;
LABEL_52:
  value[0] = (void *)(v34 & 0xFFFFFFFFFFFFFF00 | v33);
  value[1] = (void *)v31;
  sub_20E9D4A18(cf, (uint64_t)&valuePtr);
  if ((_BYTE)v48)
    v35 = (uint64_t *)&v47;
  else
    v35 = 0;
  if (v31)
    v36 = (uint64_t *)value;
  else
    v36 = 0;
  if (v45)
    p_valuePtr = &valuePtr;
  else
    p_valuePtr = 0;
  v38 = CV3DVIOPushFrameWithMetadata(a1, 0, 0, a2, 0, v35, v36, (uint64_t)p_valuePtr, a4);
  v39 = v50;
  if (v50)
  {
    v40 = (unint64_t *)&v50->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v38;
}

void sub_20E929E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_20E929E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_20E929E60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOPushFrameWithMetadata(uint64_t a1, unsigned int a2, uint64_t a3, CVPixelBufferRef pixelBuffer, std::__shared_weak_count_vtbl *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  std::logic_error *exception;
  _DWORD *v25;
  _DWORD *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  int v33;
  __int128 *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  _DWORD *v53;
  int WidthOfPlane;
  int HeightOfPlane;
  int BytesPerRowOfPlane;
  OSType PixelFormatType;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *cf;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[2];
  __int128 v103;
  __int128 v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  __int128 v111;
  __int128 v112;
  double v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  double v119;
  double v120;
  __int128 v121;
  double v122;
  double v123;
  uint64_t v124;
  double v125;
  uint64_t v126;
  double v127;
  double v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  _BYTE v137[64];
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 40))
    return 4;
  v11 = 5;
  if (a3 <= 1 && pixelBuffer && a9 >= 0.0)
  {
    v16 = 0;
    if (a6)
    {
      v17 = *a6;
      v18 = 1;
      cf = a5;
      if (a7)
        goto LABEL_8;
    }
    else
    {
      v18 = 0;
      v17 = 0;
      cf = a5;
      if (a7)
      {
LABEL_8:
        v16 = *a7;
        v19 = 1;
        if (*(_BYTE *)(a1 + 13160))
          goto LABEL_15;
LABEL_14:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOInterface.cpp", 272, (uint64_t)"hdl->runtime_config_", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_137;
        }
LABEL_15:
        v21 = *(_DWORD **)(a1 + 13296);
        v22 = *(_DWORD **)(a1 + 13304);
        v23 = v21;
        if (v21 != v22)
        {
          v23 = *(_DWORD **)(a1 + 13296);
          while (*v23 != a2)
          {
            v23 += 272;
            if (v23 == v22)
              goto LABEL_19;
          }
        }
        if (v23 == v22)
        {
LABEL_19:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E92751C(exception, "Requested camera id not found.");
          goto LABEL_61;
        }
        v95 = v17;
        v25 = v23 + 2;
        v26 = v23 + 134;
        if (!(_DWORD)a3)
          v26 = v25;
        v27 = *((double *)v26 + 14);
        v28 = *((_QWORD *)v26 + 15);
        v30 = *((double *)v26 + 16);
        v29 = *((_QWORD *)v26 + 17);
        v31 = *((double *)v26 + 18);
        v32 = *((double *)v26 + 19);
        v107 = *((_OWORD *)v26 + 10);
        v96 = *((double *)v26 + 22);
        if (*((_BYTE *)v26 + 401))
        {
          v33 = 0;
          v34 = &v107;
LABEL_57:
          v140 = *v34;
          v139 = 0uLL;
          if (v21 != v22)
          {
            while (*v21 != a2)
            {
              v21 += 272;
              if (v21 == v22)
                goto LABEL_60;
            }
          }
          if (v21 != v22)
          {
            v92 = v33;
            v93 = v19;
            v94 = v18;
            if ((_DWORD)a3)
              v52 = 134;
            else
              v52 = 2;
            if ((_DWORD)a3)
              v53 = v21 + 134;
            else
              v53 = v21 + 2;
            WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
            BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            if ((WidthOfPlane
               || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOInterface.cpp", 106, (uint64_t)"img_width != 0", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (HeightOfPlane|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOInterface.cpp", 107, (uint64_t)"img_height != 0", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (BytesPerRowOfPlane|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOInterface.cpp",
                     108,
                     (uint64_t)"stride != 0",
                     11,
                     (uint64_t)"",
                     0,
                     (void (*)(void **))sub_21023DDB0)))
            {
              v11 = 6;
              if (v21[v52] != WidthOfPlane || v53[1] != HeightOfPlane)
                return v11;
              PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
              if (PixelFormatType != 875704422 && PixelFormatType != 1278226488 && PixelFormatType != 875704438)
                return 7;
              sub_21015D058(&v107, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
              v58 = (std::__shared_weak_count *)operator new(0x30uLL);
              v58->__shared_owners_ = 0;
              v58->__shared_weak_owners_ = 0;
              v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA18420;
              v58[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1A9A0;
              v59 = v108;
              v58[1].__shared_owners_ = *((_QWORD *)&v107 + 1);
              v58[1].__shared_weak_owners_ = v59;
              if (v59)
              {
                v60 = (unint64_t *)(v59 + 8);
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
                v62 = (std::__shared_weak_count *)v108;
                v105 = &v58[1].__vftable;
                v106 = v58;
                *(_QWORD *)&v107 = &off_24CA1A9A0;
                if ((_QWORD)v108)
                {
                  v63 = (unint64_t *)(v108 + 8);
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
              }
              else
              {
                v105 = &v58[1].__vftable;
                v106 = v58;
              }
              sub_210107D4C((uint64_t *)&v105, 1, (uint64_t)&v99);
              if (a2 >= 0x10000
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v109 = v101;
              v110[0] = v102[0];
              *(_OWORD *)((char *)v110 + 9) = *(_OWORD *)((char *)v102 + 9);
              v107 = v99;
              v108 = v100;
              v65 = v103;
              v103 = 0uLL;
              v111 = v65;
              v112 = v104;
              v113 = a9;
              v114 = 0;
              v115 = v27;
              v116 = v28;
              v117 = v30;
              v118 = v29;
              v119 = v31;
              v120 = v32;
              v121 = v140;
              v122 = v96;
              v123 = v27;
              v124 = v28;
              v125 = v30;
              v126 = v29;
              v127 = v31;
              v128 = v32;
              v129 = v139;
              v130 = 0x3FF0000000000000;
              v131 = 1;
              v132 = v95;
              v133 = v94;
              v134 = v16;
              v136 = 0u;
              memset(v137, 0, 28);
              memset(&v137[32], 0, 32);
              v135 = v93;
              v138 = a2 | (unint64_t)(a3 << 32);
              if (*(_BYTE *)(a1 + 57))
              {
                if (cf)
                {
                  sub_21015D058(&v99, cf, 1, 0);
                  v66 = (std::__shared_weak_count *)operator new(0x30uLL);
                  v66->__shared_owners_ = 0;
                  v66->__shared_weak_owners_ = 0;
                  v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA18420;
                  v66[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1A9A0;
                  v67 = v100;
                  v66[1].__shared_owners_ = *((_QWORD *)&v99 + 1);
                  v66[1].__shared_weak_owners_ = v67;
                  if (v67)
                  {
                    v68 = (unint64_t *)(v67 + 8);
                    do
                      v69 = __ldxr(v68);
                    while (__stxr(v69 + 1, v68));
                    v70 = (std::__shared_weak_count *)v100;
                    v97 = &v66[1].__vftable;
                    v98 = v66;
                    *(_QWORD *)&v99 = &off_24CA1A9A0;
                    if ((_QWORD)v100)
                    {
                      v71 = (unint64_t *)(v100 + 8);
                      do
                        v72 = __ldaxr(v71);
                      while (__stlxr(v72 - 1, v71));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                      if (!v97)
                      {
                        v11 = 17;
                        goto LABEL_117;
                      }
                    }
                  }
                  else
                  {
                    v97 = &v66[1].__vftable;
                    v98 = v66;
                  }
                  if (sub_20E9AAF94(*(_QWORD *)(a1 + 40), &v107, (uint64_t *)&v97))
                    v11 = v92;
                  else
                    v11 = 2;
LABEL_117:
                  v79 = v98;
                  if (v98)
                  {
                    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
                    do
                      v81 = __ldaxr(p_shared_owners);
                    while (__stlxr(v81 - 1, p_shared_owners));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  goto LABEL_122;
                }
                v78 = *(_QWORD *)(a1 + 40);
                v99 = 0uLL;
                v74 = sub_20E9AAF94(v78, &v107, (uint64_t *)&v99);
                sub_20E86665C((uint64_t)&v99);
              }
              else
              {
                v73 = *(_QWORD *)(a1 + 40);
                v99 = 0uLL;
                v74 = sub_20E9AAF94(v73, &v107, (uint64_t *)&v99);
                v75 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
                if (*((_QWORD *)&v99 + 1))
                {
                  v76 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 - 1, v76));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                    std::__shared_weak_count::__release_weak(v75);
                  }
                }
              }
              if (v74)
                v11 = v92;
              else
                v11 = 2;
LABEL_122:
              v82 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
              if (*((_QWORD *)&v112 + 1))
              {
                v83 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
              v85 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
              if (*((_QWORD *)&v111 + 1))
              {
                v86 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              v88 = v106;
              if (v106)
              {
                v89 = (unint64_t *)&v106->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
              }
              return v11;
            }
LABEL_137:
            abort();
          }
LABEL_60:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E92751C(exception, "Requested camera id not found.");
LABEL_61:
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        v34 = (__int128 *)(v26 + 40);
        if (!a8)
        {
          v33 = 0;
          goto LABEL_57;
        }
        v35 = *(double *)a8;
        if (v27 == 0.0)
        {
          if (v35 != 0.0)
            goto LABEL_56;
        }
        else
        {
          if (v35 == 0.0)
            goto LABEL_56;
          v40 = vabdd_f64(v27, v35);
          v41 = fabs(v27);
          v42 = fabs(v35);
          if (v42 < v41)
            v41 = v42;
          if (v40 / v41 >= 0.1)
            goto LABEL_56;
        }
        v36 = *(double *)(a8 + 32);
        if (v31 == 0.0)
        {
          if (v36 != 0.0)
            goto LABEL_56;
        }
        else
        {
          if (v36 == 0.0)
            goto LABEL_56;
          v43 = vabdd_f64(v31, v36);
          v44 = fabs(v31);
          v45 = fabs(v36);
          if (v45 < v44)
            v44 = v45;
          if (v43 / v44 >= 0.1)
            goto LABEL_56;
        }
        v37 = *(double *)(a8 + 16);
        if (v30 == 0.0)
        {
          if (v37 != 0.0)
            goto LABEL_56;
        }
        else
        {
          if (v37 == 0.0)
            goto LABEL_56;
          v46 = vabdd_f64(v30, v37);
          v47 = fabs(v30);
          v48 = fabs(v37);
          if (v48 < v47)
            v47 = v48;
          if (v46 / v47 >= 0.1)
            goto LABEL_56;
        }
        v38 = *(double *)(a8 + 40);
        if (v32 == 0.0)
        {
          if (v38 != 0.0)
            goto LABEL_56;
        }
        else
        {
          if (v38 == 0.0)
            goto LABEL_56;
          v49 = vabdd_f64(v32, v38);
          v50 = fabs(v32);
          v51 = fabs(v38);
          if (v51 < v50)
            v50 = v51;
          if (v49 / v50 >= 0.1)
            goto LABEL_56;
        }
        v39 = *(double *)(a8 + 64);
        if (v96 == v39)
        {
          v33 = 0;
          v28 = *(_QWORD *)(a8 + 8);
          v29 = *(_QWORD *)(a8 + 24);
          v34 = &v107;
          v30 = *(double *)(a8 + 16);
          v107 = *(_OWORD *)(a8 + 48);
          v31 = v36;
          v32 = v38;
          v96 = v39;
          v27 = v35;
          goto LABEL_57;
        }
LABEL_56:
        v33 = 15;
        goto LABEL_57;
      }
    }
    v19 = 0;
    if (*(_BYTE *)(a1 + 13160))
      goto LABEL_15;
    goto LABEL_14;
  }
  return v11;
}

void sub_20E92A774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  sub_20E86665C((uint64_t)&a17);
  sub_20E8E5AE4((uint64_t)&a33);
  sub_20E86665C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E92A7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  sub_21015D41C(&a17);
  sub_20E8E5AE4((uint64_t)&a33);
  sub_20E86665C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E92A7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  sub_20E8E5AE4((uint64_t)&a33);
  sub_20E86665C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E92A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E8E5AE4((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E92A81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E86665C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E92A830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_21015D41C(&a33);
  _Unwind_Resume(a1);
}

void sub_20E92A848(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E92A85C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOPushJasperPointCloud()
{
  return 0;
}

uint64_t CV3DVIOPushGyro(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;

  if (!a1)
    return 4;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return 4;
  if (a5 < 0.0)
    return 5;
  if (sub_20E9AAA84(v5, a2, a3, a4, a5))
    return 0;
  return 2;
}

uint64_t CV3DVIOPushAccel(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;

  if (!a1)
    return 4;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return 4;
  if (a5 < 0.0)
    return 5;
  if (sub_20E9AAD0C(v5, a2, a3, a4, a5))
    return 0;
  return 2;
}

uint64_t CV3DVIOPushFeaturePoints()
{
  return 0;
}

uint64_t CV3DVIOAddAnchor(uint64_t a1, const __CFUUID *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  CFTypeID v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  int8x16_t v18;
  double v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  double v25;
  _QWORD v26[2];
  char v27;
  void *__p[2];
  __int128 v29;
  float64x2_t v30;
  double v31;
  uint64_t v32;
  float64x2_t v33;
  double v34;
  uint64_t v35;
  float64x2_t v36;
  double v37;
  uint64_t v38;
  float64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 40))
    return 4;
  result = 5;
  if (a2 && a3 && a4)
  {
    v21 = *(double *)(a3 + 16);
    v23 = *(double *)(a3 + 40);
    v22 = *(float64x2_t *)(a3 + 24);
    v25 = *(double *)(a3 + 64);
    v24 = *(float64x2_t *)(a3 + 48);
    v19 = *(double *)(a4 + 16);
    v20 = *(float64x2_t *)a3;
    v18 = *(int8x16_t *)a4;
    v7 = CFUUIDGetTypeID();
    if (CFGetTypeID(a2) == v7)
    {
      *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes(a2);
      v26[0] = sub_20EA68D10((uint64_t)__p);
      v26[1] = v8;
      v27 = 1;
      v9 = *(_QWORD *)(a1 + 40);
      sub_2102323F4((unsigned __int8 *)v26, __p);
      v10 = operator new(0x28uLL);
      v11 = v29;
      *v10 = *(_OWORD *)__p;
      v10[1] = v11;
      *((_DWORD *)v10 + 8) = LODWORD(v30.f64[0]);
      *((_BYTE *)v10 + 36) = 0;
      v12 = *(_QWORD *)(v9 + 13112);
      sub_20E860C04(__p, v10, 0x24uLL);
      v13 = v20;
      v14 = v22;
      v15 = (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL);
      v16 = v24;
      *(_QWORD *)&v16.f64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
      v17 = *(double *)vextq_s8(v18, v18, 8uLL).i64;
      v14.f64[1] = v15.f64[0];
      *(_QWORD *)&v13.f64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      *((_QWORD *)&v29 + 1) = 0xBFF0000000000000;
      v31 = v21;
      v30 = v13;
      v32 = 0;
      v34 = v23;
      v15.f64[0] = v21 * *(double *)v18.i64 + v23 * v17 + v25 * v19;
      v33 = v14;
      v35 = 0;
      v37 = v25;
      v36 = v16;
      v38 = 0;
      v39 = vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, *(double *)v18.i64), v14, v17), v16, v19));
      v40 = *(_OWORD *)&vnegq_f64(v15);
      v41 = 0x3FF0000000000000;
      v42 = v12;
      sub_20E9C5D60(v12 + 104, (uint64_t)__p);
      if (SBYTE7(v29) < 0)
        operator delete(__p[0]);
      if (*(_BYTE *)(v9 + 8))
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v9 + 13112) + 112));
      operator delete(v10);
      return 0;
    }
    else
    {
      return 5;
    }
  }
  return result;
}

void sub_20E92AB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  if (a34 < 0)
  {
    operator delete(__p);
    operator delete(v34);
    _Unwind_Resume(a1);
  }
  operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIORemoveAnchor(uint64_t a1, const void *a2)
{
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  void *__p[2];
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 40))
    return 4;
  if (!a2)
    return 5;
  v4 = CFUUIDGetTypeID();
  if (CFGetTypeID(a2) != v4)
    return 5;
  *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes((CFUUIDRef)a2);
  v11[0] = sub_20EA68D10((uint64_t)__p);
  v11[1] = v5;
  v12 = 1;
  v6 = *(_QWORD *)(a1 + 40);
  sub_2102323F4((unsigned __int8 *)v11, __p);
  v7 = operator new(0x28uLL);
  v8 = v14;
  *v7 = *(_OWORD *)__p;
  v7[1] = v8;
  *((_DWORD *)v7 + 8) = v15;
  *((_BYTE *)v7 + 36) = 0;
  v9 = *(_QWORD *)(v6 + 13112);
  sub_20E860C04(__p, v7, 0x24uLL);
  *((_QWORD *)&v14 + 1) = v9;
  sub_20E9C6268(v9 + 104, (uint64_t)__p);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(v6 + 8))
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 13112) + 112));
  operator delete(v7);
  return 0;
}

void sub_20E92AD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    operator delete(v18);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOGetPose(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  uint64_t v4;
  uint64_t result;

  if (!a1)
    return 4;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 4;
  result = 5;
  if (a2 && a3)
  {
    if (sub_20E9AB678(v4, a2, a3, a4))
      return 12;
    else
      return 0;
  }
  return result;
}

uint64_t CV3DVIOGetSnapshot(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;
  uint64_t v5;

  if (!a1)
    return 4;
  result = 4;
  if (a2)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      if (sub_20E9AB980(v5, a2 + 8, a3))
        return 12;
      else
        return 0;
    }
  }
  return result;
}

uint64_t CV3DVIOWait(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 4;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if (!*(_QWORD *)(v2 + 13112)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 889, (uint64_t)"engine_node_", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 13160) + 24))(*(_QWORD *)(v2 + 13160));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 13112) + 112));
    v3 = *(_QWORD *)(v2 + 16048);
    if (v3)
      sub_20E96C5C4((_QWORD *)(v3 + 24));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 15808) + 24))(*(_QWORD *)(a1 + 15808));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t CV3DVIOSaveMap(uint64_t a1, char *a2)
{
  std::ios_base::iostate v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  void (**v11)();
  _QWORD v12[51];
  std::ios_base v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4;
  if (!a2)
    return 5;
  v10[1] = 0;
  v13.__vftable = (std::ios_base_vtbl *)&unk_24C9B12E0;
  std::ios_base::init(&v13, v12);
  v15 = -1;
  v14 = 0;
  v13.__vftable = (std::ios_base_vtbl *)&unk_24C9B11C8;
  v10[0] = &off_24C9B1178;
  v11 = off_24C9B11A0;
  MEMORY[0x212BC5B40](v12);
  if (std::filebuf::open())
    v4 = 0;
  else
    v4 = v13.__rdstate_ | 4;
  std::ios_base::clear(&v13, v4);
  if (v12[15])
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v10 + *(_QWORD *)(v10[0] - 24)), *(_DWORD *)((char *)&v12[1] + *(_QWORD *)(v10[0] - 24)) | 4);
    v13.__vftable = (std::ios_base_vtbl *)&unk_24C9B11C8;
    v10[0] = &off_24C9B1178;
    v11 = off_24C9B11A0;
    MEMORY[0x212BC5B4C](v12);
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v13);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(v6 + 13112);
    if (!v7)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 730, (uint64_t)"engine_node_", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = *(_QWORD *)(v6 + 13112);
    }
    sub_20E9ABCD8(v7, a2);
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      if (!*(_QWORD *)(v8 + 13112)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 889, (uint64_t)"engine_node_", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 13160) + 24))(*(_QWORD *)(v8 + 13160));
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v8 + 13112) + 112));
      v9 = *(_QWORD *)(v8 + 16048);
      if (v9)
      {
        v10[0] = *(_QWORD *)(v8 + 16048);
        sub_20E96C5C4((_QWORD *)(v9 + 24));
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 15808) + 24))(*(_QWORD *)(a1 + 15808));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
    return 0;
  }
  else
  {
    v13.__vftable = (std::ios_base_vtbl *)&unk_24C9B11C8;
    v10[0] = &off_24C9B1178;
    v11 = off_24C9B11A0;
    MEMORY[0x212BC5B4C](v12);
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v13);
    return 13;
  }
}

void sub_20E92B1CC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v2);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20E92B19CLL);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20E92B230(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C9B1178;
  v2 = a1 + 54;
  a1[54] = &unk_24C9B11C8;
  a1[2] = off_24C9B11A0;
  MEMORY[0x212BC5B4C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v2);
  return a1;
}

uint64_t CV3DVIOClearMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 4;
  sub_20E9ABF90(*(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if (!*(_QWORD *)(v2 + 13112)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 889, (uint64_t)"engine_node_", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 13160) + 24))(*(_QWORD *)(v2 + 13160));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 13112) + 112));
    v3 = *(_QWORD *)(v2 + 16048);
    if (v3)
      sub_20E96C5C4((_QWORD *)(v3 + 24));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 15808) + 24))(*(_QWORD *)(a1 + 15808));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t CV3DVIOSerializeMap(uint64_t a1, __CFData *a2)
{
  uint64_t v2;

  if (!a1)
    return 4;
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return 4;
  if (!a2)
    return 5;
  sub_20E9AC0F4(v2, a2);
  return 0;
}

uint64_t CV3DVIOSerializeMapAndMLDescriptors(uint64_t a1, __CFData *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  if (!a1)
    return 4;
  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
    return 4;
  result = 5;
  if (a2)
  {
    if (a3)
    {
      sub_20E9AC0F4(v3, a2);
      return 0;
    }
  }
  return result;
}

uint64_t CV3DVIORelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    return 4;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if (!*(_QWORD *)(v2 + 13112)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 889, (uint64_t)"engine_node_", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 13160) + 24))(*(_QWORD *)(v2 + 13160));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 13112) + 112));
    v3 = *(_QWORD *)(v2 + 16048);
    if (v3)
      sub_20E96C5C4((_QWORD *)(v3 + 24));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 15808) + 24))(*(_QWORD *)(a1 + 15808));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  v4 = (_BYTE *)(a1 + 13160);
  v5 = *(_QWORD *)(a1 + 15808);
  *(_QWORD *)(a1 + 15808) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)(a1 + 15808);
    *(_QWORD *)(a1 + 15808) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*(char *)(a1 + 15799) < 0)
  {
    operator delete(*(void **)(a1 + 15776));
    if ((*(char *)(a1 + 15775) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*(char *)(a1 + 15751) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_31:
      operator delete(*(void **)(a1 + 15728));
      sub_20E86A810(a1 + 13296);
      if (!*v4)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 15775) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 15752));
  if (*(char *)(a1 + 15751) < 0)
    goto LABEL_31;
LABEL_13:
  sub_20E86A810(a1 + 13296);
  if (*v4)
LABEL_14:
    sub_20E937AF4(a1 + 48);
LABEL_15:
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
  {
    v8 = sub_20E9A6DF4(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4007DABD58);
  }
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    v10 = *(std::__shared_weak_count **)(v9 + 40);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    sub_20E8D1F68(v9 + 8, *(_QWORD *)(v9 + 16));
    MEMORY[0x212BC6398](v9, 0x1020C401722722ELL);
  }
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = sub_21021A3F8(a1);
  MEMORY[0x212BC6398](v15, 0x10B2C40AFFC0DD6);
  return 0;
}

uint64_t CV3DVIOGetCameraCalibration(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  std::logic_error *exception;

  if (!a1 || !*(_QWORD *)(a1 + 40))
    return 4;
  if (a2)
  {
    v2 = *(_DWORD **)(a1 + 13296);
    v3 = *(_DWORD **)(a1 + 13304);
    if (v2 != v3)
    {
      while (*v2 != *(_DWORD *)(a1 + 15920))
      {
        v2 += 272;
        if (v2 == v3)
          goto LABEL_7;
      }
    }
    if (v2 != v3)
      __asm { BR              X11 }
LABEL_7:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return 5;
}

uint64_t sub_20E92B784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  char v6;

  v3 = CV3DVIOAddCameraCalibrationToDictionaryV2_0(a2, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 12), *(_QWORD *)(v2 + 24), v2 + 72, v2 + 296, v2 + 320, &v5, *(double *)(v2 + 120), *(double *)(v2 + 152), *(double *)(v2 + 136), *(double *)(v2 + 160), *(double *)(v2 + 392));
  if ((v6 & 0x80000000) == 0)
    JUMPOUT(0x20E92B708);
  operator delete(v5);
  return v3;
}

void sub_20E92B888()
{
  JUMPOUT(0x20E92B8A4);
}

uint64_t sub_20E92B8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  char v6;

  v3 = CV3DVIOAddCameraCalibrationToDictionaryV2_0(a2, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 12), *(_QWORD *)(v2 + 24), v2 + 72, v2 + 296, v2 + 320, &v5, *(double *)(v2 + 120), *(double *)(v2 + 152), *(double *)(v2 + 136), *(double *)(v2 + 160), *(double *)(v2 + 392));
  if ((v6 & 0x80000000) == 0)
    JUMPOUT(0x20E92B708);
  operator delete(v5);
  return v3;
}

uint64_t sub_20E92B8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  char v6;

  v3 = CV3DVIOAddCameraCalibrationToDictionaryV2_0(a2, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 12), *(_QWORD *)(v2 + 24), v2 + 72, v2 + 296, v2 + 320, &v5, *(double *)(v2 + 120), *(double *)(v2 + 152), *(double *)(v2 + 136), *(double *)(v2 + 160), *(double *)(v2 + 392));
  if ((v6 & 0x80000000) == 0)
    JUMPOUT(0x20E92B708);
  operator delete(v5);
  return v3;
}

void sub_20E92B8F4()
{
  JUMPOUT(0x20E92B910);
}

void sub_20E92B920()
{
  JUMPOUT(0x20E92B944);
}

void sub_20E92B9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E92B9BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOIsVideoModeSupported(int a1)
{
  int v1;
  uint64_t v2;
  int v4;

  switch(a1)
  {
    case 0:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 1;
      break;
    case 1:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 4;
      break;
    case 2:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 6;
      break;
    case 3:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 2;
      break;
    case 4:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 11;
      break;
    case 5:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 5;
      break;
    case 6:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 12;
      break;
    case 7:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 9;
      break;
    case 8:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 8;
      break;
    case 9:
      v1 = 0;
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      break;
    case 10:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 3;
      break;
    case 11:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 7;
      break;
    default:
      v4 = CV3DSLAMCalibrationDetectRuntimeHardware();
      v1 = 13;
      break;
  }
  v2 = sub_20E8F7E44(&v4);
  if (sub_20EA7BFF0(v2, v1))
    return 0;
  else
    return 11;
}

uint64_t CV3DVIOGetSession(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t result;

  if (!a1)
    return 4;
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return 14;
  if (!a2)
    return 5;
  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 13112) + 120) + 280))(*(_QWORD *)(*(_QWORD *)(v2 + 13112) + 120));
  result = 0;
  *a2 = *v4;
  return result;
}

uint64_t CV3DVIOSetCMDataCallback(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4;
  v3 = a1[5];
  if (!v3)
    return 14;
  if (!a2)
    return 5;
  a1[1660] = a2;
  a1[1661] = a3;
  v4 = *(_QWORD *)(v3 + 13112);
  v8[0] = &off_24C9B6930;
  v8[1] = v4;
  v9 = v8;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v4 + 104) + 40))(v4 + 104, v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_11;
  }
  if (v9)
  {
    v6 = 5;
LABEL_11:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  if (*(_BYTE *)(v3 + 8))
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v3 + 13112) + 112));
  return 0;
}

void sub_20E92BC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a13 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t CV3DVIOPushCMData(uint64_t a1, char a2, const __CFData *a3)
{
  unsigned int Length;
  uint64_t v7;
  const UInt8 *BytePtr;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4;
  if (!*(_QWORD *)(a1 + 40))
    return 14;
  if (!a3)
    return 5;
  kdebug_trace();
  Length = CFDataGetLength(a3);
  v7 = 5;
  BytePtr = CFDataGetBytePtr(a3);
  switch(a2)
  {
    case 0:
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(v9 + 13112);
      v11 = Length;
      if (Length)
      {
        v12 = (char *)operator new(Length);
        v13 = &v12[Length];
        memcpy(v12, BytePtr, v11);
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      v42 = operator new(0x28uLL);
      *v42 = &off_24C9B1368;
      v42[1] = v10;
      v42[2] = v12;
      v42[3] = v13;
      v42[4] = v13;
      v58 = v42;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v10 + 104) + 40))(v10 + 104, v57);
      goto LABEL_40;
    case 1:
      v9 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(v9 + 13112);
      v15 = Length;
      if (Length)
      {
        v16 = (char *)operator new(Length);
        v17 = &v16[Length];
        memcpy(v16, BytePtr, v15);
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v47 = operator new(0x28uLL);
      *v47 = &off_24C9B14A8;
      v47[1] = v14;
      v47[2] = v16;
      v47[3] = v17;
      v47[4] = v17;
      v58 = v47;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v14 + 104) + 40))(v14 + 104, v57);
      goto LABEL_40;
    case 2:
      v9 = *(_QWORD *)(a1 + 40);
      v18 = *(_QWORD *)(v9 + 13112);
      v19 = Length;
      if (Length)
      {
        v20 = (char *)operator new(Length);
        v21 = &v20[Length];
        memcpy(v20, BytePtr, v19);
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v48 = operator new(0x28uLL);
      *v48 = &off_24C9B1528;
      v48[1] = v18;
      v48[2] = v20;
      v48[3] = v21;
      v48[4] = v21;
      v58 = v48;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v18 + 104) + 40))(v18 + 104, v57);
      goto LABEL_40;
    case 3:
      v9 = *(_QWORD *)(a1 + 40);
      v22 = *(_QWORD *)(v9 + 13112);
      v23 = Length;
      if (Length)
      {
        v24 = (char *)operator new(Length);
        v25 = &v24[Length];
        memcpy(v24, BytePtr, v23);
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v49 = operator new(0x28uLL);
      *v49 = &off_24C9B15A8;
      v49[1] = v22;
      v49[2] = v24;
      v49[3] = v25;
      v49[4] = v25;
      v58 = v49;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v22 + 104) + 40))(v22 + 104, v57);
      goto LABEL_40;
    case 4:
      v9 = *(_QWORD *)(a1 + 40);
      v38 = *(_QWORD *)(v9 + 13112);
      v39 = Length;
      if (Length)
      {
        v40 = (char *)operator new(Length);
        v41 = &v40[Length];
        memcpy(v40, BytePtr, v39);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      v53 = operator new(0x28uLL);
      *v53 = &off_24C9B1628;
      v53[1] = v38;
      v53[2] = v40;
      v53[3] = v41;
      v53[4] = v41;
      v58 = v53;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v38 + 104) + 40))(v38 + 104, v57);
      goto LABEL_40;
    case 5:
      v9 = *(_QWORD *)(a1 + 40);
      v26 = *(_QWORD *)(v9 + 13112);
      v27 = Length;
      if (Length)
      {
        v28 = (char *)operator new(Length);
        v29 = &v28[Length];
        memcpy(v28, BytePtr, v27);
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
      v50 = operator new(0x28uLL);
      *v50 = &off_24C9B16A8;
      v50[1] = v26;
      v50[2] = v28;
      v50[3] = v29;
      v50[4] = v29;
      v58 = v50;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v26 + 104) + 40))(v26 + 104, v57);
      goto LABEL_40;
    case 8:
      v9 = *(_QWORD *)(a1 + 40);
      v30 = *(_QWORD *)(v9 + 13112);
      v31 = Length;
      if (Length)
      {
        v32 = (char *)operator new(Length);
        v33 = &v32[Length];
        memcpy(v32, BytePtr, v31);
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
      v51 = operator new(0x28uLL);
      *v51 = &off_24C9B1728;
      v51[1] = v30;
      v51[2] = v32;
      v51[3] = v33;
      v51[4] = v33;
      v58 = v51;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v30 + 104) + 40))(v30 + 104, v57);
      goto LABEL_40;
    case 9:
      v9 = *(_QWORD *)(a1 + 40);
      v34 = *(_QWORD *)(v9 + 13112);
      v35 = Length;
      if (Length)
      {
        v36 = (char *)operator new(Length);
        v37 = &v36[Length];
        memcpy(v36, BytePtr, v35);
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
      v52 = operator new(0x28uLL);
      *v52 = &off_24C9B17A8;
      v52[1] = v34;
      v52[2] = v36;
      v52[3] = v37;
      v52[4] = v37;
      v58 = v52;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v34 + 104) + 40))(v34 + 104, v57);
LABEL_40:
      v54 = v58;
      if (v58 == v57)
      {
        v55 = 4;
        v54 = v57;
      }
      else
      {
        if (!v58)
          goto LABEL_45;
        v55 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v54 + 8 * v55))(v54, v43, v44, v45, v46);
LABEL_45:
      if (*(_BYTE *)(v9 + 8))
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(v9 + 13112) + 112));
      v7 = 0;
LABEL_48:
      kdebug_trace();
      break;
    default:
      goto LABEL_48;
  }
  return v7;
}

void sub_20E92C1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOGetCMOjbectAnchorMetadataV2(uint64_t a1, int a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = 5;
  if (a2 == 1)
  {
    if (CV3DSLAMSessionGetCMOjbectAnchorMetadata_0(a1, a3, a4, 0))
      return 0;
    else
      return 5;
  }
  return v4;
}

uint64_t CV3DVIOCreateCMPoseAnchorData(uint64_t a1, const __CFUUID *a2, uint64_t a3, uint64_t a4, _DWORD *a5, CFDataRef *a6, double a7)
{
  uint64_t v9;
  CFTypeID v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  __int128 v24;
  int64x2_t v25;
  int64x2_t v26;
  __int128 v27;
  _BYTE *v28;
  void *__p;
  _BYTE *v31;
  CFUUIDBytes v32;
  uint64_t v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4;
  if (!*(_QWORD *)(a1 + 40))
    return 14;
  v9 = 5;
  if (a2 && a3 && a4 && a5 && a6 && !*a6)
  {
    v15 = CFUUIDGetTypeID();
    if (CFGetTypeID(a2) == v15)
    {
      v32 = CFUUIDGetUUIDBytes(a2);
      v16 = sub_20EA68D10((uint64_t)&v32);
      v18 = v17;
      v41 = xmmword_2102E0660;
      v42 = unk_2102E0670;
      v40 = unk_2102E0650;
      v39 = xmmword_2102E0640;
      v35 = xmmword_2102E0600;
      v36 = *(_OWORD *)algn_2102E0610;
      v37 = xmmword_2102E0620;
      v38 = unk_2102E0630;
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 13112) + 120);
      v20 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 280))(v19);
      *(_QWORD *)&v32.byte8 = v16;
      *(_QWORD *)&v32.byte0 = v20;
      v33 = v18;
      v34 = a7;
      *(_QWORD *)&v21 = *(_QWORD *)(a3 + 16);
      v22 = *(int64x2_t *)(a3 + 24);
      v23 = *(_QWORD *)(a3 + 64);
      v24 = *(_OWORD *)(a3 + 48);
      v25 = vzip1q_s64(*(int64x2_t *)a3, v22);
      v26 = vzip2q_s64(*(int64x2_t *)a3, v22);
      *((_QWORD *)&v21 + 1) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)&v36 = *(_QWORD *)(a3 + 48);
      v35 = (__int128)v25;
      *(_QWORD *)&v38 = *((_QWORD *)&v24 + 1);
      v37 = (__int128)v26;
      v39 = v21;
      v27 = *(_OWORD *)a4;
      v26.i64[0] = *(_QWORD *)(a4 + 16);
      *(_QWORD *)&v40 = v23;
      *(_QWORD *)&v42 = v26.i64[0];
      v41 = v27;
      sub_20E9AC33C(*(_QWORD *)(a1 + 40), (uint64_t)&v32, &__p);
      v28 = __p;
      if (__p == v31)
      {
        v9 = 30;
      }
      else
      {
        v9 = 0;
        *a6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)__p, v31 - (_BYTE *)__p);
        *a5 = 7;
        v28 = __p;
      }
      if (v28)
      {
        v31 = v28;
        operator delete(v28);
      }
    }
    else
    {
      return 5;
    }
  }
  return v9;
}

void sub_20E92C558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DVIOGetCMPoseAnchorTransformationV2(uint64_t a1, int a2, CFDataRef theData, _OWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  size_t Length;
  UInt8 *BytePtr;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  _BYTE v21[24];
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4;
  if (!*(_QWORD *)(a1 + 40))
    return 14;
  result = 5;
  if (a2 == 7 && theData && a5 && a4 && a6 && a7)
  {
    Length = CFDataGetLength(theData);
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    sub_20E9AC52C(BytePtr, Length, *(_QWORD *)(a1 + 40), (uint64_t)v21);
    if (v32)
    {
      result = 0;
      *a4 = *(_OWORD *)&v21[8];
      *a5 = v22;
      *(_QWORD *)&v16 = v24;
      v17 = v29;
      v18 = v28;
      v19 = vzip1q_s64(v23, v25);
      v20 = vzip2q_s64(v23, v25);
      *((_QWORD *)&v16 + 1) = v26;
      *(_QWORD *)(a6 + 16) = v27;
      *(int64x2_t *)a6 = v19;
      *(_QWORD *)(a6 + 40) = v18;
      *(int64x2_t *)(a6 + 24) = v20;
      *(_QWORD *)(a6 + 64) = v17;
      *(_OWORD *)(a6 + 48) = v16;
      *(_QWORD *)&v16 = v31;
      *(_OWORD *)a7 = v30;
      *(_QWORD *)(a7 + 16) = v16;
    }
    else
    {
      return 30;
    }
  }
  return result;
}

uint64_t CV3DVIOSetLineEnablementPolicy(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  if (!a1)
    return 4;
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return 4;
  if (a2 > 2)
    return 5;
  v5 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 13176) + 72) + 424;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, &v5);
  return 0;
}

uint64_t *sub_20E92C794(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E9A6DF4(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4007DABD58);
  }
  return a1;
}

uint64_t *sub_20E92C7D8(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    sub_20E8D1F68(v2 + 8, *(_QWORD *)(v2 + 16));
    MEMORY[0x212BC6398](v2, 0x1020C401722722ELL);
  }
  return a1;
}

uint64_t sub_20E92C868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void sub_20E92C8B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E92C918(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E92C928(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E92C938(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E92C948(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E92C958(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E92C968(uint64_t a1, int a2, int *a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  v8 = *a3;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = v8;
  v9 = a1 + 8;
  sub_20E89E538(a1 + 8, (uint64_t *)a4);
  v10 = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(v9 + 288) = *(_OWORD *)(a4 + 288);
  *(_OWORD *)(v9 + 304) = v10;
  v11 = *(_OWORD *)(a4 + 320);
  v12 = *(_OWORD *)(a4 + 336);
  v13 = *(_OWORD *)(a4 + 368);
  *(_OWORD *)(v9 + 352) = *(_OWORD *)(a4 + 352);
  *(_OWORD *)(v9 + 368) = v13;
  *(_OWORD *)(v9 + 320) = v11;
  *(_OWORD *)(v9 + 336) = v12;
  v14 = *(_OWORD *)(a4 + 384);
  v15 = *(_OWORD *)(a4 + 400);
  v16 = *(_OWORD *)(a4 + 432);
  *(_OWORD *)(v9 + 416) = *(_OWORD *)(a4 + 416);
  *(_OWORD *)(v9 + 432) = v16;
  *(_OWORD *)(v9 + 384) = v14;
  *(_OWORD *)(v9 + 400) = v15;
  v17 = *(_OWORD *)(a4 + 448);
  v18 = *(_OWORD *)(a4 + 464);
  v19 = *(_OWORD *)(a4 + 480);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a4 + 496);
  *(_OWORD *)(v9 + 464) = v18;
  *(_OWORD *)(v9 + 480) = v19;
  *(_OWORD *)(v9 + 448) = v17;
  v20 = *(_QWORD *)(a4 + 512);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a4 + 504);
  *(_QWORD *)(a1 + 520) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(a1 + 528) = 0x3FF0000000000000;
  sub_20E89E538(a1 + 536, (uint64_t *)a5);
  v23 = *(_OWORD *)(a5 + 304);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a5 + 288);
  *(_OWORD *)(a1 + 840) = v23;
  v24 = *(_OWORD *)(a5 + 320);
  v25 = *(_OWORD *)(a5 + 336);
  v26 = *(_OWORD *)(a5 + 368);
  *(_OWORD *)(a1 + 888) = *(_OWORD *)(a5 + 352);
  *(_OWORD *)(a1 + 904) = v26;
  *(_OWORD *)(a1 + 856) = v24;
  *(_OWORD *)(a1 + 872) = v25;
  v27 = *(_OWORD *)(a5 + 384);
  v28 = *(_OWORD *)(a5 + 400);
  v29 = *(_OWORD *)(a5 + 432);
  *(_OWORD *)(a1 + 952) = *(_OWORD *)(a5 + 416);
  *(_OWORD *)(a1 + 968) = v29;
  *(_OWORD *)(a1 + 920) = v27;
  *(_OWORD *)(a1 + 936) = v28;
  v30 = *(_OWORD *)(a5 + 448);
  v31 = *(_OWORD *)(a5 + 464);
  v32 = *(_OWORD *)(a5 + 480);
  *(_DWORD *)(a1 + 1032) = *(_DWORD *)(a5 + 496);
  *(_OWORD *)(a1 + 1000) = v31;
  *(_OWORD *)(a1 + 1016) = v32;
  *(_OWORD *)(a1 + 984) = v30;
  v33 = *(_QWORD *)(a5 + 512);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a5 + 504);
  *(_QWORD *)(a1 + 1048) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_QWORD *)(a1 + 1056) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1068) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1080) = 0;
  if (*(_DWORD *)(a1 + 4) == 2
    && (*(_DWORD *)v9 != *(_DWORD *)(a1 + 536)
     && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/HardwareParams.h", 73, (uint64_t)"primary.image_width_ == secondary.image_width_", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(a1 + 12) != *(_DWORD *)(a1 + 540)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/HardwareParams.h", 74, (uint64_t)"primary.image_height_ == secondary.image_height_", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  return a1;
}

void sub_20E92CB44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_20E90BD50(v2);
  sub_20E90BD50(v1);
  _Unwind_Resume(a1);
}

void sub_20E92CB60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E90BD50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E92CB74(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (a1 != a2)
    sub_20E92D350((uint64_t *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6));
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x220uLL);
  v4 = *(_OWORD *)(a2 + 568);
  v5 = *(_OWORD *)(a2 + 584);
  v6 = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 584) = v5;
  *(_OWORD *)(a1 + 600) = v6;
  *(_OWORD *)(a1 + 568) = v4;
  v7 = *(_OWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v7;
  v8 = *(_QWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 664) = v8;
  v9 = *(_QWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 688) = v9;
  v10 = *(_QWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 712) = v10;
  *(_WORD *)(a1 + 720) = *(_WORD *)(a2 + 720);
  sub_20E92D80C(a1 + 728, a2 + 728);
  if (*(unsigned __int8 *)(a1 + 2232) == *(unsigned __int8 *)(a2 + 2232))
  {
    if (*(_BYTE *)(a1 + 2232))
    {
      *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
      sub_20E92D63C(a1 + 1152, (uint64_t *)(a2 + 1152));
      *(_QWORD *)(a1 + 1672) = *(_QWORD *)(a2 + 1672);
      sub_20E92D63C(a1 + 1680, (uint64_t *)(a2 + 1680));
      v11 = *(_OWORD *)(a2 + 2209);
      *(_OWORD *)(a1 + 2200) = *(_OWORD *)(a2 + 2200);
      *(_OWORD *)(a1 + 2209) = v11;
    }
  }
  else
  {
    v12 = (_QWORD *)(a1 + 1144);
    if (*(_BYTE *)(a1 + 2232))
    {
      sub_20E86A6B8(v12);
      *(_BYTE *)(a1 + 2232) = 0;
    }
    else
    {
      sub_20E89E038((uint64_t)v12, a2 + 1144);
      *(_BYTE *)(a1 + 2232) = 1;
    }
  }
  v13 = *(_OWORD *)(a2 + 2240);
  v14 = *(_OWORD *)(a2 + 2256);
  v15 = *(_OWORD *)(a2 + 2272);
  *(_QWORD *)(a1 + 2285) = *(_QWORD *)(a2 + 2285);
  *(_OWORD *)(a1 + 2272) = v15;
  *(_OWORD *)(a1 + 2256) = v14;
  *(_OWORD *)(a1 + 2240) = v13;
  v16 = (_OWORD *)(a1 + 2296);
  v17 = (__int128 *)(a2 + 2296);
  if (*(unsigned __int8 *)(a1 + 2424) == *(unsigned __int8 *)(a2 + 2424))
  {
    if (*(_BYTE *)(a1 + 2424))
    {
      v18 = *v17;
      v19 = *(_OWORD *)(a2 + 2312);
      v20 = *(_OWORD *)(a2 + 2344);
      *(_OWORD *)(a1 + 2328) = *(_OWORD *)(a2 + 2328);
      *(_OWORD *)(a1 + 2344) = v20;
      *v16 = v18;
      *(_OWORD *)(a1 + 2312) = v19;
      v21 = *(_OWORD *)(a2 + 2360);
      v22 = *(_OWORD *)(a2 + 2376);
      v23 = *(_OWORD *)(a2 + 2408);
      *(_OWORD *)(a1 + 2392) = *(_OWORD *)(a2 + 2392);
      *(_OWORD *)(a1 + 2408) = v23;
      *(_OWORD *)(a1 + 2360) = v21;
      *(_OWORD *)(a1 + 2376) = v22;
    }
    return a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 2424))
    {
      *(_BYTE *)(a1 + 2424) = 0;
    }
    else
    {
      v25 = *v17;
      v26 = *(_OWORD *)(a2 + 2312);
      v27 = *(_OWORD *)(a2 + 2344);
      *(_OWORD *)(a1 + 2328) = *(_OWORD *)(a2 + 2328);
      *(_OWORD *)(a1 + 2344) = v27;
      *v16 = v25;
      *(_OWORD *)(a1 + 2312) = v26;
      v28 = *(_OWORD *)(a2 + 2360);
      v29 = *(_OWORD *)(a2 + 2376);
      v30 = *(_OWORD *)(a2 + 2408);
      *(_OWORD *)(a1 + 2392) = *(_OWORD *)(a2 + 2392);
      *(_OWORD *)(a1 + 2408) = v30;
      *(_OWORD *)(a1 + 2360) = v28;
      *(_OWORD *)(a1 + 2376) = v29;
      *(_BYTE *)(a1 + 2424) = 1;
    }
    return a1;
  }
}

_QWORD *sub_20E92CD94(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_20E92CED8();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20E92CED8()
{
  sub_20E860B90("vector");
}

uint64_t sub_20E92CEEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
    }
    else
    {
      v5 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_OWORD *)(a1 + 16) = v5;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  sub_20E86AC88(a1 + 56, (uint64_t)(a2 + 7));
  memcpy((void *)(a1 + 11480), a2 + 1435, 0x356uLL);
  *(_OWORD *)(a1 + 12336) = *((_OWORD *)a2 + 771);
  v6 = *((_OWORD *)a2 + 772);
  v7 = *((_OWORD *)a2 + 773);
  v8 = *((_OWORD *)a2 + 774);
  *(_QWORD *)(a1 + 12400) = a2[1550];
  *(_OWORD *)(a1 + 12384) = v8;
  *(_OWORD *)(a1 + 12368) = v7;
  *(_OWORD *)(a1 + 12352) = v6;
  *(_QWORD *)(a1 + 12408) = 0;
  *(_QWORD *)(a1 + 12424) = 0;
  *(_QWORD *)(a1 + 12416) = 0;
  v9 = (char *)a2[1551];
  v10 = (char *)a2[1552];
  v11 = v10 - v9;
  if (v10 != v9)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v12 = (char *)operator new(v10 - v9);
    *(_QWORD *)(a1 + 12408) = v12;
    *(_QWORD *)(a1 + 12416) = v12;
    *(_QWORD *)(a1 + 12424) = &v12[8 * (v11 >> 3)];
    if ((unint64_t)(v11 - 24) >= 0x108
      && ((v13 = (v11 - 24) / 0x18uLL, v14 = 24 * v13 + 24, v12 < &v9[v14]) ? (v15 = v9 >= &v12[v14]) : (v15 = 1), v15))
    {
      v16 = v13 + 1;
      v17 = (v13 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v18 = &v9[24 * v17];
      v19 = &v12[24 * v17];
      v20 = v17;
      do
      {
        v21 = *((_OWORD *)v9 + 1);
        v23 = *((_OWORD *)v9 + 4);
        v22 = *((_OWORD *)v9 + 5);
        v24 = *((_OWORD *)v9 + 2);
        v25 = *((_OWORD *)v9 + 3);
        *(_OWORD *)v12 = *(_OWORD *)v9;
        *((_OWORD *)v12 + 1) = v21;
        *((_OWORD *)v12 + 2) = v24;
        *((_OWORD *)v12 + 3) = v25;
        *((_OWORD *)v12 + 4) = v23;
        *((_OWORD *)v12 + 5) = v22;
        v12 += 96;
        v9 += 96;
        v20 -= 4;
      }
      while (v20);
      if (v16 == v17)
        goto LABEL_20;
    }
    else
    {
      v18 = v9;
      v19 = v12;
    }
    do
    {
      *(_QWORD *)v19 = *(_QWORD *)v18;
      *((_QWORD *)v19 + 1) = *((_QWORD *)v18 + 1);
      *((_QWORD *)v19 + 2) = *((_QWORD *)v18 + 2);
      v19 += 24;
      v18 += 24;
    }
    while (v18 != v10);
LABEL_20:
    *(_QWORD *)(a1 + 12416) = v19;
  }
  v26 = *((_OWORD *)a2 + 777);
  v27 = *((_OWORD *)a2 + 778);
  v28 = *((_OWORD *)a2 + 779);
  *(_OWORD *)(a1 + 12480) = *((_OWORD *)a2 + 780);
  *(_OWORD *)(a1 + 12464) = v28;
  *(_OWORD *)(a1 + 12448) = v27;
  *(_OWORD *)(a1 + 12432) = v26;
  v29 = *((_OWORD *)a2 + 786);
  v30 = *((_OWORD *)a2 + 787);
  v31 = *((_OWORD *)a2 + 788);
  *(_OWORD *)(a1 + 12560) = *((_OWORD *)a2 + 785);
  *(_OWORD *)(a1 + 12608) = v31;
  *(_OWORD *)(a1 + 12592) = v30;
  *(_OWORD *)(a1 + 12576) = v29;
  v32 = *((_OWORD *)a2 + 790);
  v33 = *((_OWORD *)a2 + 791);
  v34 = *((_OWORD *)a2 + 792);
  *(_OWORD *)(a1 + 12624) = *((_OWORD *)a2 + 789);
  *(_OWORD *)(a1 + 12672) = v34;
  *(_OWORD *)(a1 + 12656) = v33;
  *(_OWORD *)(a1 + 12640) = v32;
  v35 = *((_OWORD *)a2 + 781);
  v36 = *((_OWORD *)a2 + 782);
  v37 = *((_OWORD *)a2 + 783);
  *(_OWORD *)(a1 + 12544) = *((_OWORD *)a2 + 784);
  *(_OWORD *)(a1 + 12528) = v37;
  *(_OWORD *)(a1 + 12512) = v36;
  *(_OWORD *)(a1 + 12496) = v35;
  sub_20E86F7FC(a1 + 12688, (uint64_t)(a2 + 1586));
  *(_BYTE *)(a1 + 12896) = *((_BYTE *)a2 + 12896);
  *(_OWORD *)(a1 + 12904) = *(_OWORD *)(a2 + 1613);
  sub_20E92D224(a1 + 12920, (uint64_t)(a2 + 1615));
  return a1;
}

void sub_20E92D1C8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 40))
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E92D224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E92CED8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_20E92CED8();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v16;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v15;
  v17 = *(_OWORD *)(a2 + 128);
  v18 = *(_OWORD *)(a2 + 144);
  v19 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v19;
  *(_OWORD *)(a1 + 128) = v17;
  *(_OWORD *)(a1 + 144) = v18;
  return a1;
}

void sub_20E92D31C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E92D350(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;

  v6 = a2;
  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (0xF0F0F0F0F0F0F0F1 * ((v8 - *a1) >> 6) < a4)
  {
    if (v9)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v9;
      if (v10 != v9)
      {
        do
          v10 = sub_20E86A6B8(v10 - 136);
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = (uint64_t)v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x3C3C3C3C3C3C3CLL)
      goto LABEL_35;
    v12 = 0xF0F0F0F0F0F0F0F1 * (v8 >> 6);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x1E1E1E1E1E1E1ELL ? 0x3C3C3C3C3C3C3CLL : v13;
    if (v14 > 0x3C3C3C3C3C3C3CLL)
LABEL_35:
      sub_20E867F44();
    v15 = 1088 * v14;
    result = (uint64_t)operator new(1088 * v14);
    v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        result = sub_20E89E038(v17 + v18, v6 + v18);
        v18 += 1088;
      }
      while (v6 + v18 != a3);
      a1[1] = v17 + v18;
      return result;
    }
LABEL_34:
    a1[1] = v17;
    return result;
  }
  result = a1[1];
  if (0xF0F0F0F0F0F0F0F1 * ((result - (uint64_t)v9) >> 6) >= a4)
  {
    if (a2 == a3)
    {
      v17 = (uint64_t)v9;
    }
    else
    {
      v17 = (uint64_t)v9;
      do
      {
        *v9 = *(_QWORD *)v6;
        sub_20E92D63C((uint64_t)(v9 + 1), (uint64_t *)(v6 + 8));
        v9[66] = *(_QWORD *)(v6 + 528);
        sub_20E92D63C((uint64_t)(v9 + 67), (uint64_t *)(v6 + 536));
        v23 = *(_OWORD *)(v6 + 1065);
        *((_OWORD *)v9 + 66) = *(_OWORD *)(v6 + 1056);
        *(_OWORD *)((char *)v9 + 1065) = v23;
        v17 += 1088;
        v6 += 1088;
        v9 += 136;
      }
      while (v6 != a3);
      result = a1[1];
    }
    while (result != v17)
      result = (uint64_t)sub_20E86A6B8((_QWORD *)(result - 1088));
    goto LABEL_34;
  }
  v19 = a2 + ((result - (uint64_t)v9) >> 6 << 6);
  if ((_QWORD *)result != v9)
  {
    do
    {
      *v9 = *(_QWORD *)v6;
      sub_20E92D63C((uint64_t)(v9 + 1), (uint64_t *)(v6 + 8));
      v9[66] = *(_QWORD *)(v6 + 528);
      result = sub_20E92D63C((uint64_t)(v9 + 67), (uint64_t *)(v6 + 536));
      v20 = *(_OWORD *)(v6 + 1065);
      *((_OWORD *)v9 + 66) = *(_OWORD *)(v6 + 1056);
      *(_OWORD *)((char *)v9 + 1065) = v20;
      v6 += 1088;
      v9 += 136;
    }
    while (v6 != v19);
    v9 = (_QWORD *)a1[1];
  }
  v21 = v9;
  if (v19 != a3)
  {
    v22 = 0;
    do
    {
      result = sub_20E89E038((uint64_t)&v9[v22], v19 + v22 * 8);
      v22 += 136;
    }
    while (v19 + v22 * 8 != a3);
    v21 = &v9[v22];
  }
  a1[1] = (uint64_t)v21;
  return result;
}

void sub_20E92D614(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 1088)
    sub_20E86A6B8((_QWORD *)(v2 - 1088 + v3));
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E92D63C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if ((uint64_t *)a1 != a2)
  {
    sub_20E86811C((_QWORD *)(a1 + 16), (char *)a2[2], (char *)a2[3], (a2[3] - a2[2]) >> 3);
    sub_20E86811C((_QWORD *)(a1 + 40), (char *)a2[5], (char *)a2[6], (a2[6] - a2[5]) >> 3);
  }
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = *((_OWORD *)a2 + 8);
  v9 = *((_OWORD *)a2 + 9);
  v10 = *((_OWORD *)a2 + 10);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  v12 = a2[23];
  v11 = a2[24];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a1 + 192) = v11;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v18;
  v19 = *(_OWORD *)(a2 + 29);
  v20 = *(_OWORD *)(a2 + 31);
  v21 = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_OWORD *)(a1 + 264) = v21;
  *(_OWORD *)(a1 + 248) = v20;
  *(_OWORD *)(a1 + 232) = v19;
  v22 = *((_OWORD *)a2 + 23);
  v24 = *((_OWORD *)a2 + 20);
  v23 = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v22;
  *(_OWORD *)(a1 + 320) = v24;
  *(_OWORD *)(a1 + 336) = v23;
  v25 = *((_OWORD *)a2 + 27);
  v27 = *((_OWORD *)a2 + 24);
  v26 = *((_OWORD *)a2 + 25);
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  *(_OWORD *)(a1 + 432) = v25;
  *(_OWORD *)(a1 + 384) = v27;
  *(_OWORD *)(a1 + 400) = v26;
  v29 = *((_OWORD *)a2 + 29);
  v28 = *((_OWORD *)a2 + 30);
  v30 = *((_OWORD *)a2 + 28);
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  *(_OWORD *)(a1 + 464) = v29;
  *(_OWORD *)(a1 + 480) = v28;
  *(_OWORD *)(a1 + 448) = v30;
  v31 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 304) = v31;
  v33 = a2[63];
  v32 = a2[64];
  if (v32)
  {
    v34 = (unint64_t *)(v32 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(std::__shared_weak_count **)(a1 + 512);
  *(_QWORD *)(a1 + 504) = v33;
  *(_QWORD *)(a1 + 512) = v32;
  if (!v36)
    return a1;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
    return a1;
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  return a1;
}

__n128 sub_20E92D80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  if (*(unsigned __int8 *)(a1 + 408) == *(unsigned __int8 *)(a2 + 408))
  {
    if (*(_BYTE *)(a1 + 408))
    {
      v4 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)a1 = v4;
      if (a1 != a2)
      {
        sub_20E86811C((_QWORD *)(a1 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
        sub_20E86811C((_QWORD *)(a1 + 40), *(char **)(a2 + 40), *(char **)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
      }
      v5 = *(_OWORD *)(a2 + 64);
      v6 = *(_OWORD *)(a2 + 80);
      v7 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v7;
      *(_OWORD *)(a1 + 64) = v5;
      *(_OWORD *)(a1 + 80) = v6;
      v8 = *(_OWORD *)(a2 + 128);
      v9 = *(_OWORD *)(a2 + 144);
      v10 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 144) = v9;
      *(_OWORD *)(a1 + 160) = v10;
      *(_OWORD *)(a1 + 128) = v8;
      v12 = *(_QWORD *)(a2 + 184);
      v11 = *(_QWORD *)(a2 + 192);
      if (v11)
      {
        v13 = (unint64_t *)(v11 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(std::__shared_weak_count **)(a1 + 192);
      *(_QWORD *)(a1 + 184) = v12;
      *(_QWORD *)(a1 + 192) = v11;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v18;
      v19 = *(_OWORD *)(a2 + 232);
      v20 = *(_OWORD *)(a2 + 248);
      v21 = *(_OWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = v21;
      *(_OWORD *)(a1 + 248) = v20;
      *(_OWORD *)(a1 + 232) = v19;
      v23 = *(_OWORD *)(a2 + 368);
      v22 = *(_OWORD *)(a2 + 384);
      v24 = *(_OWORD *)(a2 + 352);
      *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
      *(_OWORD *)(a1 + 368) = v23;
      *(_OWORD *)(a1 + 384) = v22;
      *(_OWORD *)(a1 + 352) = v24;
      result = *(__n128 *)(a2 + 288);
      v26 = *(_OWORD *)(a2 + 304);
      v27 = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = v27;
      *(__n128 *)(a1 + 288) = result;
      *(_OWORD *)(a1 + 304) = v26;
    }
  }
  else if (*(_BYTE *)(a1 + 408))
  {
    v28 = *(std::__shared_weak_count **)(a1 + 192);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(void **)(a1 + 40);
    if (v31)
    {
      *(_QWORD *)(a1 + 48) = v31;
      operator delete(v31);
    }
    v32 = *(void **)(a1 + 16);
    if (v32)
    {
      *(_QWORD *)(a1 + 24) = v32;
      operator delete(v32);
    }
    *(_BYTE *)(a1 + 408) = 0;
  }
  else
  {
    sub_20E89E538(a1, (uint64_t *)a2);
    v33 = *(_OWORD *)(a2 + 288);
    v34 = *(_OWORD *)(a2 + 304);
    v35 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v35;
    *(_OWORD *)(a1 + 288) = v33;
    *(_OWORD *)(a1 + 304) = v34;
    result = *(__n128 *)(a2 + 352);
    v36 = *(_OWORD *)(a2 + 368);
    v37 = *(_OWORD *)(a2 + 384);
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
    *(_OWORD *)(a1 + 368) = v36;
    *(_OWORD *)(a1 + 384) = v37;
    *(__n128 *)(a1 + 352) = result;
    *(_BYTE *)(a1 + 408) = 1;
  }
  return result;
}

void **sub_20E92DA24(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0)
          operator delete(*(v3 - 5));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20E92DA98()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E92DAAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B0910;
  result[1] = v3;
  return result;
}

uint64_t sub_20E92DAE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B0910;
  a2[1] = v2;
  return result;
}

void sub_20E92DAFC(uint64_t a1, __int128 *a2, __int128 *a3, _OWORD *a4, __int128 *a5, _OWORD *a6, uint64_t a7, uint64_t *a8)
{
  std::__shared_weak_count *v8;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  void **p_dst;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t **v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t **v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  size_t v125;
  void **v126;
  uint64_t v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  const char *v133;
  size_t v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  const char *v137;
  size_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  size_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  size_t v152;
  size_t v153;
  _BYTE *v154;
  int v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  char *v164;
  char *shared_owners;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  const char *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const void **v187;
  const void *v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  const char *v193;
  size_t v194;
  unsigned __int8 v195;
  const char *v196;
  size_t v197;
  _BYTE *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  void **v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  size_t v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  size_t v211;
  size_t v212;
  _BYTE *v213;
  std::__shared_weak_count_vtbl *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  _QWORD *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  char *v223;
  char *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  const char *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  char *__s;
  char *__sa;
  int __sb;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  unint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  int v270;
  _BYTE v271[32];
  __int128 v272;
  __int128 v273;
  __int128 v274;
  _BYTE v275[32];
  _BYTE v276[32];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  _BYTE v280[32];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  void **__dst;
  size_t v285;
  int64_t v286;
  uint64_t v287;
  _BYTE object[32];
  void *__p[2];
  _BYTE v290[32];
  _BYTE v291[32];
  __int128 v292;
  __int128 v293;
  _BYTE v294[23];
  uint64_t *v295;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v297;
  uint64_t **v298;
  const char *v299;
  int v300;
  const char *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  _BYTE v304[128];
  __int128 v305;
  _OWORD v306[8];
  _QWORD v307[5];

  v10 = a1;
  v307[2] = *MEMORY[0x24BDAC8D0];
  v282 = *a2;
  v283 = a2[1];
  v11 = *((_QWORD *)a2 + 4);
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 7);
  v259 = *((_QWORD *)a2 + 6);
  v261 = v11;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *(_OWORD *)&v280[16] = a3[4];
  v281 = a2[4];
  v279 = a3[2];
  *(_OWORD *)v280 = a3[3];
  v277 = *a3;
  v278 = a3[1];
  *(_OWORD *)v276 = *a4;
  *(_OWORD *)&v276[16] = a4[1];
  *(_OWORD *)v275 = a5[3];
  *(_OWORD *)&v275[16] = a5[4];
  v273 = a5[1];
  v274 = a5[2];
  *(_OWORD *)&v271[16] = a6[1];
  v272 = *a5;
  *(_OWORD *)v271 = *a6;
  v270 = *((unsigned __int8 *)a8 + 56);
  if (*((_BYTE *)a8 + 56))
  {
    v14 = (std::__shared_weak_count *)a8[1];
    v263 = *a8;
    *a8 = 0;
    a8[1] = 0;
    v15 = a8[2];
    v8 = (std::__shared_weak_count *)a8[3];
    a8[2] = 0;
    a8[3] = 0;
    v256 = a8[4];
    v257 = v15;
    v267 = (std::__shared_weak_count *)a8[5];
    v268 = v14;
    a8[4] = 0;
    a8[5] = 0;
    v255 = *((_BYTE *)a8 + 48);
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(v16 + 13200);
    v265 = v12;
    v266 = v13;
    v269 = v8;
    if (v17)
      goto LABEL_3;
  }
  else
  {
    v263 = 0;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(v16 + 13200);
    v265 = v12;
    v266 = v13;
    v269 = v8;
    if (v17)
    {
LABEL_3:
      v18 = *(_QWORD *)(v16 + 13208);
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v20 = __ldxr(p_shared_weak_owners);
        while (__stxr(v20 + 1, p_shared_weak_owners));
      }
      if (v13)
      {
        v21 = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      *(_OWORD *)__p = v279;
      *(_OWORD *)v290 = *(_OWORD *)v280;
      *(_OWORD *)&v290[9] = *(_OWORD *)&v280[9];
      *(_OWORD *)object = v277;
      *(_OWORD *)&object[16] = v278;
      *(_OWORD *)v291 = *(_OWORD *)v276;
      *(_OWORD *)&v291[9] = *(_OWORD *)&v276[9];
      if (v270)
      {
        if (v268)
        {
          p_shared_owners = (unint64_t *)&v268->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        if (v8)
        {
          v25 = (unint64_t *)&v8->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = a1;
        if (v267)
        {
          v28 = (unint64_t *)&v267->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        __s = 0;
        v252 = 0;
        v30 = 0;
        *(_OWORD *)&v304[23] = v273;
        *(_OWORD *)&v304[39] = v274;
        *(_OWORD *)&v304[55] = *(_OWORD *)v275;
        v31 = *(_OWORD *)&v275[9];
        *(_OWORD *)&v304[7] = v272;
        *(_OWORD *)&v304[87] = *(_OWORD *)v271;
        v32 = *(_OWORD *)&v271[9];
        v33 = v263;
      }
      else
      {
        v27 = a1;
        v33 = 0;
        *(_OWORD *)&v304[23] = v273;
        *(_OWORD *)&v304[39] = v274;
        *(_OWORD *)&v304[55] = *(_OWORD *)v275;
        v31 = *(_OWORD *)&v275[9];
        *(_OWORD *)&v304[7] = v272;
        *(_OWORD *)&v304[87] = *(_OWORD *)v271;
        v32 = *(_OWORD *)&v271[9];
        __s = (char *)v8;
        v252 = v268;
        v30 = v267;
      }
      *(_OWORD *)&v304[64] = v31;
      *(_OWORD *)&v304[96] = v32;
      v298 = 0;
      v39 = (char *)operator new(0x188uLL);
      *(_OWORD *)(v39 + 8) = v282;
      *(_OWORD *)(v39 + 24) = v283;
      *(_OWORD *)(v39 + 72) = v281;
      v40 = *(_OWORD *)__p;
      *(_OWORD *)(v39 + 136) = *(_OWORD *)v290;
      v41 = *(_OWORD *)v291;
      *(_OWORD *)(v39 + 152) = *(_OWORD *)&v290[16];
      *(_OWORD *)(v39 + 168) = v41;
      *(_OWORD *)(v39 + 177) = *(_OWORD *)&v291[9];
      v42 = *(_OWORD *)&object[16];
      *(_OWORD *)(v39 + 88) = *(_OWORD *)object;
      *(_OWORD *)(v39 + 104) = v42;
      v43 = v16 + 16;
      *(_QWORD *)v39 = &off_24C9B0990;
      *((_QWORD *)v39 + 5) = v261;
      *((_QWORD *)v39 + 6) = v12;
      *((_QWORD *)v39 + 7) = v259;
      *((_QWORD *)v39 + 8) = v266;
      *(_OWORD *)(v39 + 120) = v40;
      v39[200] = 0;
      v44 = v267;
      v45 = v269;
      v46 = v268;
      v39[256] = 0;
      if (v270)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *((_QWORD *)v39 + 25) = v33;
        *((_QWORD *)v39 + 26) = v268;
        *((_QWORD *)v39 + 27) = v257;
        *((_QWORD *)v39 + 28) = v269;
        *((_QWORD *)v39 + 29) = v256;
        *((_QWORD *)v39 + 30) = v267;
        v39[248] = v255;
        v39[256] = 1;
      }
      v47 = *(_OWORD *)&v304[87];
      *(_OWORD *)(v39 + 328) = *(_OWORD *)&v304[71];
      *(_OWORD *)(v39 + 344) = v47;
      *(_OWORD *)(v39 + 360) = *(_OWORD *)&v304[103];
      v48 = *(_OWORD *)&v304[23];
      *(_OWORD *)(v39 + 264) = *(_OWORD *)&v304[7];
      *(_OWORD *)(v39 + 280) = v48;
      v49 = *(_OWORD *)&v304[55];
      *(_OWORD *)(v39 + 296) = *(_OWORD *)&v304[39];
      *(_OWORD *)(v39 + 312) = v49;
      *((_QWORD *)v39 + 47) = v17;
      *((_QWORD *)v39 + 48) = v18;
      v298 = (uint64_t **)v39;
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v43 + 40))(v43, &v295);
      v50 = v298;
      v13 = v266;
      v10 = v27;
      if (v298 == &v295)
      {
        v51 = 4;
        v50 = &v295;
      }
      else
      {
        if (!v298)
          goto LABEL_35;
        v51 = 5;
      }
      ((void (*)(void))(*v50)[v51])();
LABEL_35:
      if (v270)
      {
        if (v44)
        {
          v52 = (unint64_t *)&v44->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v12 = v265;
        if (v45)
        {
          v54 = (unint64_t *)&v45->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (v46)
        {
          v56 = (unint64_t *)&v46->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (v30)
        {
          v58 = (unint64_t *)&v30->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        if (!__s)
          goto LABEL_60;
        v60 = (unint64_t *)(__s + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          (*(void (**)(char *))(*(_QWORD *)__s + 16))(__s);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__s);
          v8 = v269;
          if (v252)
            goto LABEL_61;
        }
        else
        {
LABEL_60:
          v8 = v269;
          if (v252)
          {
LABEL_61:
            v62 = (unint64_t *)&v252->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
              std::__shared_weak_count::__release_weak(v252);
              v64 = *(_QWORD **)(v27 + 8);
              v65 = v64[1652];
              if (v65)
                goto LABEL_69;
              goto LABEL_68;
            }
          }
        }
      }
      else
      {
        v12 = v265;
        v8 = v269;
      }
LABEL_67:
      v64 = *(_QWORD **)(v10 + 8);
      v65 = v64[1652];
      if (v65)
        goto LABEL_69;
      goto LABEL_68;
    }
  }
  sub_20E930080(&v287);
  if (**(int **)(v287 + 56) > 2)
    goto LABEL_67;
  v34 = *(unsigned __int8 *)(v287 + 72);
  v35 = sub_20E8C31DC(v287, "OSLogSurrogateAppender", 1, 0);
  v36 = v35;
  if (!v34 && !v35)
    goto LABEL_67;
  sub_20E863438((uint64_t)v304);
  sub_20E86A980(&v304[16], (uint64_t)"attempt to invoke pose callback, but has not been defined", 57);
  if ((v304[120] & 0x10) != 0)
  {
    v127 = *(_QWORD *)&v304[112];
    if (*(_QWORD *)&v304[112] < *(_QWORD *)&v304[72])
    {
      *(_QWORD *)&v304[112] = *(_QWORD *)&v304[72];
      v127 = *(_QWORD *)&v304[72];
    }
    v128 = *(const void **)&v304[64];
    v37 = v127 - *(_QWORD *)&v304[64];
    if ((unint64_t)(v127 - *(_QWORD *)&v304[64]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_227;
  }
  else
  {
    if ((v304[120] & 8) == 0)
    {
      v37 = 0;
      HIBYTE(v286) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_182;
    }
    v128 = *(const void **)&v304[40];
    v37 = *(_QWORD *)&v304[56] - *(_QWORD *)&v304[40];
    if (*(_QWORD *)&v304[56] - *(_QWORD *)&v304[40] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_227:
      sub_20E860B7C();
  }
  if (v37 >= 0x17)
  {
    v129 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v129 = v37 | 7;
    v130 = v129 + 1;
    p_dst = (void **)operator new(v129 + 1);
    v285 = v37;
    v286 = v130 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_181;
  }
  HIBYTE(v286) = v37;
  p_dst = (void **)&__dst;
  if (v37)
LABEL_181:
    memmove(p_dst, v128, v37);
LABEL_182:
  *((_BYTE *)p_dst + v37) = 0;
  v295 = &v287;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v297 = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v298) = 2;
  v299 = "unknown file";
  v300 = 499;
  v303 = 0;
  v301 = "unknown function";
  v302 = 0;
  if (v286 >= 0)
    v131 = (void **)&__dst;
  else
    v131 = __dst;
  v132 = *v295;
  v133 = (const char *)(*v295 + 16);
  v248 = *v295;
  __sa = (char *)v131;
  v247 = v133;
  if (*(char *)(*v295 + 39) < 0)
  {
    v133 = *(const char **)(v132 + 16);
    v134 = *(_QWORD *)(v132 + 24);
    v254 = v36;
    v136 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v136 & 1) != 0)
      goto LABEL_189;
  }
  else
  {
    v134 = *(unsigned __int8 *)(*v295 + 39);
    v254 = v36;
    v135 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v135 & 1) != 0)
      goto LABEL_189;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if (object[24])
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
    v13 = v266;
  }
LABEL_189:
  if (byte_254A4A4F8[23] >= 0)
    v137 = byte_254A4A4F8;
  else
    v137 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v138 = byte_254A4A4F8[23];
  else
    v138 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v137, v133);
  v139 = &object[8];
  if (v138 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v138 >= 0x17)
  {
    v140 = v10;
    v141 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v138 | 7) != 0x17)
      v141 = v138 | 7;
    v142 = v141 + 1;
    v139 = operator new(v141 + 1);
    *(_QWORD *)&object[16] = v138;
    *(_QWORD *)&object[24] = v142 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v139;
    v10 = v140;
    goto LABEL_202;
  }
  object[31] = v138;
  if (v138)
LABEL_202:
    memmove(v139, v137, v138);
  v139[v138] = 0;
  LOBYTE(__p[0]) = 1;
  v143 = &__p[1];
  if (v134 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v8 = v269;
  if (v134 >= 0x17)
  {
    v144 = v10;
    v145 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v134 | 7) != 0x17)
      v145 = v134 | 7;
    v146 = v145 + 1;
    v143 = (void **)operator new(v145 + 1);
    *(_QWORD *)&v290[8] = v146 | 0x8000000000000000;
    __p[1] = v143;
    *(_QWORD *)v290 = v134;
    v10 = v144;
    goto LABEL_210;
  }
  v290[15] = v134;
  if (v134)
LABEL_210:
    memmove(v143, v133, v134);
  *((_BYTE *)v143 + v134) = 0;
  v290[16] = 1;
  v147 = *(NSObject **)object;
  if ((v290[15] & 0x80000000) != 0)
    operator delete(__p[1]);
  v12 = v265;
  if (LOBYTE(__p[0]) && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v254 && *(_QWORD *)(v254 + 24))
  {
    v148 = _os_log_pack_size();
    v149 = (std::__shared_weak_count_vtbl *)operator new(v148, (std::align_val_t)8uLL);
    v150 = (std::__shared_weak_count *)operator new();
    v150->__shared_owners_ = 0;
    v151 = (unint64_t *)&v150->__shared_owners_;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v149;
    v152 = strlen(__sa);
    if (v152 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v153 = v152;
    v246 = v10;
    if (v152 >= 0x17)
    {
      v157 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v152 | 7) != 0x17)
        v157 = v152 | 7;
      v158 = v157 + 1;
      v154 = operator new(v157 + 1);
      *(_QWORD *)&object[8] = v153;
      *(_QWORD *)&object[16] = v158 | 0x8000000000000000;
      *(_QWORD *)object = v154;
    }
    else
    {
      object[23] = v152;
      v154 = object;
      if (!v152)
      {
LABEL_232:
        __sb = v34;
        v154[v153] = 0;
        v159 = *(_QWORD *)object;
        v307[0] = *(_QWORD *)&object[8];
        *(_QWORD *)((char *)v307 + 7) = *(_QWORD *)&object[15];
        v160 = object[23];
        v161 = operator new(0x38uLL);
        v162 = (std::__shared_weak_count *)v161;
        v161[1] = 0;
        v163 = v161 + 1;
        v161[3] = off_24C9ABC20;
        v164 = (char *)(v161 + 3);
        v161[2] = 0;
        v161[4] = v159;
        shared_owners = (char *)(v161 + 4);
        *v161 = &off_24C9ABBD0;
        v161[5] = v307[0];
        *(_QWORD *)((char *)v161 + 47) = *(_QWORD *)((char *)v307 + 7);
        *((_BYTE *)v161 + 55) = v160;
        do
          v166 = __ldxr(v151);
        while (__stxr(v166 + 1, v151));
        v8 = v269;
        v10 = v246;
        do
          v167 = __ldxr(v163);
        while (__stxr(v167 + 1, v163));
        do
          v168 = __ldaxr(v163);
        while (__stlxr(v168 - 1, v163));
        if (!v168)
        {
          (*(void (**)(_QWORD *))(*v161 + 16))(v161);
          std::__shared_weak_count::__release_weak(v162);
        }
        do
          v169 = __ldaxr(v151);
        while (__stlxr(v169 - 1, v151));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
        if (SHIBYTE(v162[2].__vftable) < 0)
          shared_owners = (char *)v162[1].__shared_owners_;
        v170 = _os_log_pack_fill();
        *(_DWORD *)v170 = 136315138;
        *(_QWORD *)(v170 + 4) = shared_owners;
        v171 = operator new();
        v172 = *(unsigned __int8 *)(v248 + 39);
        v173 = v247;
        if ((v172 & 0x80u) != 0)
        {
          v173 = *(const char **)(v248 + 16);
          v172 = *(_QWORD *)(v248 + 24);
        }
        *(_QWORD *)v171 = v149;
        *(_QWORD *)(v171 + 8) = v149;
        *(_QWORD *)(v171 + 16) = v150;
        *(_QWORD *)(v171 + 24) = v164;
        *(_QWORD *)(v171 + 32) = v162;
        *(_QWORD *)(v171 + 40) = v173;
        *(_QWORD *)(v171 + 48) = v172;
        *(_BYTE *)(v171 + 56) = 2;
        *(_QWORD *)object = v171;
        v13 = v266;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v254 + 24) + 40))(*(_QWORD *)(v254 + 24), object);
        v174 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        v12 = v265;
        v155 = __sb;
        if (v174)
        {
          v175 = *(std::__shared_weak_count **)(v174 + 32);
          if (v175)
          {
            v176 = (unint64_t *)&v175->__shared_owners_;
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          v178 = *(std::__shared_weak_count **)(v174 + 16);
          if (v178)
          {
            v179 = (unint64_t *)&v178->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
          MEMORY[0x212BC6398](v174, 0x10F0C40B62ED6C6);
        }
        goto LABEL_258;
      }
    }
    memcpy(v154, __sa, v153);
    goto LABEL_232;
  }
  os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG);
  v155 = v34;
  *(_DWORD *)object = 136315138;
  *(_QWORD *)&object[4] = __sa;
  v156 = (void *)_os_log_send_and_compose_impl();
  if (v156)
    free(v156);
LABEL_258:
  if (v155)
  {
    v181 = (const char *)&__dst;
    if (v286 < 0)
      v181 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v295, "%s", v181);
    sub_20E863570((uint64_t)&v295);
  }
  sub_20E863570((uint64_t)&v295);
  v182 = v303;
  if (v303)
  {
    v183 = (unint64_t *)&v303->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  if (SHIBYTE(v286) < 0)
    operator delete(__dst);
  *(_QWORD *)v304 = *MEMORY[0x24BEDB7F0];
  v185 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&v304[*(_QWORD *)(*(_QWORD *)v304 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v304[16] = v185;
  *(_QWORD *)&v304[24] = MEMORY[0x24BEDB848] + 16;
  if ((v304[111] & 0x80000000) != 0)
    operator delete(*(void **)&v304[88]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v305);
  v64 = *(_QWORD **)(v10 + 8);
  v65 = v64[1652];
  if (v65)
  {
LABEL_69:
    v66 = v64[1653];
    if (v12)
    {
      v67 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    if (v13)
    {
      v69 = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = *(unsigned __int8 *)(a7 + 168);
    if (*(_BYTE *)(a7 + 168))
    {
      v72 = *(_BYTE *)a7;
      v73 = *(_OWORD *)(a7 + 113);
      v74 = *(_OWORD *)(a7 + 145);
      v293 = *(_OWORD *)(a7 + 129);
      *(_OWORD *)v294 = v74;
      *(_QWORD *)&v294[15] = *(_QWORD *)(a7 + 160);
      v75 = *(_OWORD *)(a7 + 49);
      v76 = *(_OWORD *)(a7 + 81);
      *(_OWORD *)&v290[16] = *(_OWORD *)(a7 + 65);
      *(_OWORD *)v291 = v76;
      *(_OWORD *)&v291[16] = *(_OWORD *)(a7 + 97);
      v292 = v73;
      v77 = *(_OWORD *)(a7 + 17);
      *(_OWORD *)object = *(_OWORD *)(a7 + 1);
      *(_OWORD *)&object[16] = v77;
      *(_OWORD *)__p = *(_OWORD *)(a7 + 33);
      *(_OWORD *)v290 = v75;
      if (v270)
        goto LABEL_77;
    }
    else
    {
      v72 = 0;
      if (v270)
      {
LABEL_77:
        if (v268)
        {
          v78 = (unint64_t *)&v268->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        if (v8)
        {
          v80 = (unint64_t *)&v8->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v82 = v267;
        if (v267)
        {
          v83 = (unint64_t *)&v267->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        if (v71)
          goto LABEL_87;
        goto LABEL_90;
      }
    }
    v263 = 0;
    v82 = v267;
    if (v71)
    {
LABEL_87:
      v305 = v293;
      v306[0] = *(_OWORD *)v294;
      *(_QWORD *)((char *)v306 + 15) = *(_QWORD *)&v294[15];
      *(_OWORD *)&v304[64] = *(_OWORD *)&v290[16];
      *(_OWORD *)&v304[80] = *(_OWORD *)v291;
      *(_OWORD *)&v304[96] = *(_OWORD *)&v291[16];
      *(_OWORD *)&v304[112] = v292;
      *(_OWORD *)v304 = *(_OWORD *)object;
      *(_OWORD *)&v304[16] = *(_OWORD *)&object[16];
      *(_OWORD *)&v304[32] = *(_OWORD *)__p;
      *(_OWORD *)&v304[48] = *(_OWORD *)v290;
      goto LABEL_91;
    }
LABEL_90:
    v72 = 0;
LABEL_91:
    v85 = *(_QWORD *)(v10 + 8);
    if (v270)
      v86 = 0;
    else
      v86 = v82;
    if (v270)
      v87 = 0;
    else
      v87 = v269;
    v88 = v268;
    if (v270)
      v88 = 0;
    v253 = v88;
    if (v270)
      v89 = v263;
    else
      v89 = 0;
    v298 = 0;
    v90 = (char *)operator new(0x160uLL);
    *(_QWORD *)v90 = &off_24C9B0A10;
    *(_OWORD *)(v90 + 8) = v282;
    *(_OWORD *)(v90 + 24) = v283;
    *((_QWORD *)v90 + 5) = v261;
    *((_QWORD *)v90 + 6) = v265;
    *((_QWORD *)v90 + 7) = v259;
    *((_QWORD *)v90 + 8) = v266;
    *(_OWORD *)(v90 + 72) = v281;
    v90[88] = 0;
    v90[256] = 0;
    if (v71)
    {
      v91 = *(_OWORD *)&v304[96];
      *(_OWORD *)(v90 + 201) = *(_OWORD *)&v304[112];
      v92 = v306[0];
      *(_OWORD *)(v90 + 217) = v305;
      *(_OWORD *)(v90 + 233) = v92;
      v93 = *(_OWORD *)&v304[32];
      *(_OWORD *)(v90 + 137) = *(_OWORD *)&v304[48];
      v94 = *(_OWORD *)&v304[80];
      *(_OWORD *)(v90 + 153) = *(_OWORD *)&v304[64];
      *(_OWORD *)(v90 + 169) = v94;
      *(_OWORD *)(v90 + 185) = v91;
      v95 = *(_OWORD *)&v304[16];
      *(_OWORD *)(v90 + 89) = *(_OWORD *)v304;
      *(_OWORD *)(v90 + 105) = v95;
      v90[88] = v72;
      *((_QWORD *)v90 + 31) = *(_QWORD *)((char *)v306 + 15);
      *(_OWORD *)(v90 + 121) = v93;
      v90[256] = 1;
    }
    v96 = v64 + 2;
    v90[264] = 0;
    v90[320] = 0;
    v97 = v268;
    v98 = v267;
    v99 = v269;
    v100 = v268;
    if (v270)
    {
      v98 = 0;
      v99 = 0;
      v100 = 0;
      *((_QWORD *)v90 + 33) = v89;
      *((_QWORD *)v90 + 34) = v268;
      *((_QWORD *)v90 + 35) = v257;
      *((_QWORD *)v90 + 36) = v269;
      *((_QWORD *)v90 + 37) = v256;
      *((_QWORD *)v90 + 38) = v267;
      v90[312] = v255;
      v90[320] = 1;
    }
    *((_QWORD *)v90 + 41) = v85;
    *((_QWORD *)v90 + 42) = v65;
    *((_QWORD *)v90 + 43) = v66;
    v298 = (uint64_t **)v90;
    (*(void (**)(_QWORD *, uint64_t **))(*v96 + 40))(v96, &v295);
    v102 = v298;
    v13 = v266;
    if (v298 == &v295)
    {
      v103 = 4;
      v102 = &v295;
    }
    else
    {
      if (!v298)
        goto LABEL_111;
      v103 = 5;
    }
    ((void (*)(uint64_t **, uint64_t))(*v102)[v103])(v102, v101);
LABEL_111:
    if (v270)
    {
      if (v98)
      {
        v104 = (unint64_t *)&v98->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v12 = v265;
      if (v99)
      {
        v106 = (unint64_t *)&v99->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      if (v100)
      {
        v108 = (unint64_t *)&v100->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      if (v86)
      {
        v110 = (unint64_t *)&v86->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v8 = v269;
      if (v87)
      {
        v112 = (unint64_t *)&v87->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (v253)
      {
        v114 = (unint64_t *)&v253->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
    }
    else
    {
      v12 = v265;
      v8 = v269;
    }
    goto LABEL_143;
  }
LABEL_68:
  if (v64[1654])
    goto LABEL_69;
  sub_20E930080(&v287);
  v97 = v268;
  if (**(int **)(v287 + 56) > 2)
    goto LABEL_143;
  v122 = *(unsigned __int8 *)(v287 + 72);
  v123 = sub_20E8C31DC(v287, "OSLogSurrogateAppender", 1, 0);
  v124 = v123;
  if (!v122 && !v123)
    goto LABEL_143;
  sub_20E863438((uint64_t)v304);
  sub_20E86A980(&v304[16], (uint64_t)"attempt to invoke pose callback 2, but has not been defined", 59);
  if ((v304[120] & 0x10) != 0)
  {
    v186 = *(_QWORD *)&v304[112];
    if (*(_QWORD *)&v304[112] < *(_QWORD *)&v304[72])
    {
      *(_QWORD *)&v304[112] = *(_QWORD *)&v304[72];
      v186 = *(_QWORD *)&v304[72];
    }
    v187 = (const void **)&v304[64];
  }
  else
  {
    if ((v304[120] & 8) == 0)
    {
      v125 = 0;
      HIBYTE(v286) = 0;
      v126 = (void **)&__dst;
      goto LABEL_285;
    }
    v187 = (const void **)&v304[40];
    v186 = *(_QWORD *)&v304[56];
  }
  v188 = *v187;
  v125 = v186 - (_QWORD)*v187;
  if (v125 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v125 >= 0x17)
  {
    v189 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v125 | 7) != 0x17)
      v189 = v125 | 7;
    v190 = v189 + 1;
    v126 = (void **)operator new(v189 + 1);
    v285 = v125;
    v286 = v190 | 0x8000000000000000;
    __dst = v126;
    goto LABEL_284;
  }
  HIBYTE(v286) = v186 - *(_BYTE *)v187;
  v126 = (void **)&__dst;
  if (v125)
LABEL_284:
    memmove(v126, v188, v125);
LABEL_285:
  *((_BYTE *)v126 + v125) = 0;
  v295 = &v287;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v297 = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v298) = 2;
  v299 = "unknown file";
  v300 = 532;
  v303 = 0;
  v301 = "unknown function";
  v302 = 0;
  if (v286 >= 0)
    v191 = (const char *)&__dst;
  else
    v191 = (const char *)__dst;
  v192 = *v295;
  v193 = (const char *)(*v295 + 16);
  v262 = v193;
  if (*(char *)(*v295 + 39) < 0)
  {
    v193 = *(const char **)(v192 + 16);
    v194 = *(_QWORD *)(v192 + 24);
  }
  else
  {
    v194 = *(unsigned __int8 *)(*v295 + 39);
  }
  v264 = v124;
  v195 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v195 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if (object[24])
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v196 = byte_254A4A4F8;
  else
    v196 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v197 = byte_254A4A4F8[23];
  else
    v197 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v196, v193);
  v198 = &object[8];
  if (v197 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v197 >= 0x17)
  {
    v199 = v122;
    v200 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v197 | 7) != 0x17)
      v200 = v197 | 7;
    v201 = v200 + 1;
    v198 = operator new(v200 + 1);
    *(_QWORD *)&object[16] = v197;
    *(_QWORD *)&object[24] = v201 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v198;
    v122 = v199;
    goto LABEL_305;
  }
  object[31] = v197;
  if (v197)
LABEL_305:
    memmove(v198, v196, v197);
  v198[v197] = 0;
  LOBYTE(__p[0]) = 1;
  v202 = &__p[1];
  if (v194 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v8 = v269;
  if (v194 >= 0x17)
  {
    v204 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v194 | 7) != 0x17)
      v204 = v194 | 7;
    v205 = v204 + 1;
    v202 = (void **)operator new(v204 + 1);
    *(_QWORD *)&v290[8] = v205 | 0x8000000000000000;
    __p[1] = v202;
    *(_QWORD *)v290 = v194;
    v203 = v264;
    goto LABEL_313;
  }
  v290[15] = v194;
  v203 = v264;
  if (v194)
LABEL_313:
    memmove(v202, v193, v194);
  *((_BYTE *)v202 + v194) = 0;
  v290[16] = 1;
  v206 = *(NSObject **)object;
  if ((v290[15] & 0x80000000) != 0)
    operator delete(__p[1]);
  v12 = v265;
  if (LOBYTE(__p[0]) && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v203 || !*(_QWORD *)(v203 + 24))
  {
    os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v191;
    v215 = (void *)_os_log_send_and_compose_impl();
    v13 = v266;
    if (v215)
      free(v215);
    goto LABEL_360;
  }
  v207 = _os_log_pack_size();
  v208 = (std::__shared_weak_count_vtbl *)operator new(v207, (std::align_val_t)8uLL);
  v209 = (std::__shared_weak_count *)operator new();
  v209->__shared_owners_ = 0;
  v210 = (unint64_t *)&v209->__shared_owners_;
  v209->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v209->__shared_weak_owners_ = 0;
  v209[1].__vftable = v208;
  v211 = strlen(v191);
  v260 = v209;
  if (v211 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v212 = v211;
  v258 = v122;
  if (v211 >= 0x17)
  {
    v216 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v211 | 7) != 0x17)
      v216 = v211 | 7;
    v217 = v216 + 1;
    v213 = operator new(v216 + 1);
    *(_QWORD *)&object[8] = v212;
    *(_QWORD *)&object[16] = v217 | 0x8000000000000000;
    *(_QWORD *)object = v213;
  }
  else
  {
    object[23] = v211;
    v213 = object;
    if (!v211)
    {
      v214 = v208;
      goto LABEL_333;
    }
  }
  v214 = v208;
  memcpy(v213, v191, v212);
LABEL_333:
  v213[v212] = 0;
  v218 = *(_QWORD *)object;
  v307[0] = *(_QWORD *)&object[8];
  *(_QWORD *)((char *)v307 + 7) = *(_QWORD *)&object[15];
  v219 = object[23];
  v220 = operator new(0x38uLL);
  v221 = (std::__shared_weak_count *)v220;
  v220[1] = 0;
  v222 = v220 + 1;
  v220[3] = off_24C9ABC20;
  v223 = (char *)(v220 + 3);
  v220[2] = 0;
  v220[4] = v218;
  v224 = (char *)(v220 + 4);
  *v220 = &off_24C9ABBD0;
  v220[5] = v307[0];
  *(_QWORD *)((char *)v220 + 47) = *(_QWORD *)((char *)v307 + 7);
  *((_BYTE *)v220 + 55) = v219;
  do
    v225 = __ldxr(v210);
  while (__stxr(v225 + 1, v210));
  v122 = v258;
  do
    v226 = __ldxr(v222);
  while (__stxr(v226 + 1, v222));
  do
    v227 = __ldaxr(v222);
  while (__stlxr(v227 - 1, v222));
  if (!v227)
  {
    (*(void (**)(_QWORD *))(*v220 + 16))(v220);
    std::__shared_weak_count::__release_weak(v221);
  }
  do
    v228 = __ldaxr(v210);
  while (__stlxr(v228 - 1, v210));
  if (!v228)
  {
    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
    std::__shared_weak_count::__release_weak(v260);
  }
  if (SHIBYTE(v221[2].__vftable) >= 0)
    v229 = v224;
  else
    v229 = (char *)v221[1].__shared_owners_;
  v230 = _os_log_pack_fill();
  *(_DWORD *)v230 = 136315138;
  *(_QWORD *)(v230 + 4) = v229;
  v231 = operator new();
  v232 = *(unsigned __int8 *)(v192 + 39);
  v233 = v262;
  if ((v232 & 0x80u) != 0)
  {
    v233 = *(const char **)(v192 + 16);
    v232 = *(_QWORD *)(v192 + 24);
  }
  *(_QWORD *)v231 = v214;
  *(_QWORD *)(v231 + 8) = v214;
  *(_QWORD *)(v231 + 16) = v260;
  *(_QWORD *)(v231 + 24) = v223;
  *(_QWORD *)(v231 + 32) = v221;
  *(_QWORD *)(v231 + 40) = v233;
  *(_QWORD *)(v231 + 48) = v232;
  *(_BYTE *)(v231 + 56) = 2;
  *(_QWORD *)object = v231;
  v8 = v269;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v264 + 24) + 40))(*(_QWORD *)(v264 + 24), object);
  v234 = *(_QWORD *)object;
  *(_QWORD *)object = 0;
  v12 = v265;
  v13 = v266;
  if (v234)
  {
    v235 = *(std::__shared_weak_count **)(v234 + 32);
    if (v235)
    {
      v236 = (unint64_t *)&v235->__shared_owners_;
      do
        v237 = __ldaxr(v236);
      while (__stlxr(v237 - 1, v236));
      if (!v237)
      {
        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
        std::__shared_weak_count::__release_weak(v235);
      }
    }
    v238 = *(std::__shared_weak_count **)(v234 + 16);
    if (v238)
    {
      v239 = (unint64_t *)&v238->__shared_owners_;
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    MEMORY[0x212BC6398](v234, 0x10F0C40B62ED6C6);
  }
LABEL_360:
  if (v122)
  {
    v241 = (const char *)&__dst;
    if (v286 < 0)
      v241 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v295, "%s", v241);
    sub_20E863570((uint64_t)&v295);
  }
  sub_20E863570((uint64_t)&v295);
  v242 = v303;
  if (v303)
  {
    v243 = (unint64_t *)&v303->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  if (SHIBYTE(v286) < 0)
    operator delete(__dst);
  *(_QWORD *)v304 = *MEMORY[0x24BEDB7F0];
  v245 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&v304[*(_QWORD *)(*(_QWORD *)v304 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v304[16] = v245;
  *(_QWORD *)&v304[24] = MEMORY[0x24BEDB848] + 16;
  if ((v304[111] & 0x80000000) != 0)
    operator delete(*(void **)&v304[88]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v305);
  v97 = v268;
LABEL_143:
  if (v270)
  {
    if (v267)
    {
      v116 = (unint64_t *)&v267->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
      }
    }
    if (v8)
    {
      v118 = (unint64_t *)&v8->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v97)
    {
      v120 = (unint64_t *)&v97->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

void sub_20E92F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_objecta,std::__shared_weak_count *a23,std::__shared_weak_count *a24,std::__shared_weak_count *a25,std::__shared_weak_count *a26,std::__shared_weak_count *a27,int a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&STACK[0x278]);
  v69 = (std::__shared_weak_count *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (a69 < 0)
    operator delete(__p);
  v72 = MEMORY[0x24BEDB7F0];
  v73 = *MEMORY[0x24BEDB7F0];
  STACK[0x2C0] = *MEMORY[0x24BEDB7F0];
  v74 = *(_QWORD *)(v72 + 72);
  *(unint64_t *)((char *)&STACK[0x2C0] + *(_QWORD *)(v73 - 24)) = *(_QWORD *)(v72 + 64);
  v75 = MEMORY[0x24BEDB848] + 16;
  STACK[0x2D0] = v74;
  STACK[0x2D8] = v75;
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&STACK[0x340]);
  if (a29)
  {
    if (a25)
    {
      v76 = (unint64_t *)&a25->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
        std::__shared_weak_count::__release_weak(a25);
      }
    }
    if (a27)
    {
      v78 = (unint64_t *)&a27->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
        std::__shared_weak_count::__release_weak(a27);
      }
    }
    if (a26)
    {
      v80 = (unint64_t *)&a26->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
        std::__shared_weak_count::__release_weak(a26);
      }
    }
  }
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  _Unwind_Resume(a1);
}

uint64_t sub_20E92FF20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E92FF8C()
{
  return &unk_24C9B0A90;
}

uint64_t sub_20E92FF98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;

  if (*(_BYTE *)(a1 + 248))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 232);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 216);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 200);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 56);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 40);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20E930080(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC20))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.applecv3d");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC18);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC20);
  }
  *a1 = qword_254A5AC18;
}

void sub_20E93011C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC20);
  _Unwind_Resume(a1);
}

uint64_t sub_20E930174(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;

  if (*(_BYTE *)(a1 + 312))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 296);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 280);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 264);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 56);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 40);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  return a1;
}

_QWORD *sub_20E93025C(_QWORD *a1)
{
  *a1 = &off_24C9B0990;
  sub_20E92FF98((uint64_t)(a1 + 1));
  return a1;
}

void sub_20E93028C(_QWORD *a1)
{
  *a1 = &off_24C9B0990;
  sub_20E92FF98((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9302CC(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  __int128 v22;

  v2 = (char *)operator new(0x188uLL);
  *(_QWORD *)v2 = &off_24C9B0990;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v2 + 6) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 177) = *(_OWORD *)(a1 + 177);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  v2[200] = 0;
  v2[256] = 0;
  if (*(_BYTE *)(a1 + 256))
  {
    v9 = *(_QWORD *)(a1 + 208);
    *((_QWORD *)v2 + 25) = *(_QWORD *)(a1 + 200);
    *((_QWORD *)v2 + 26) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(_QWORD *)(a1 + 224);
    *((_QWORD *)v2 + 27) = *(_QWORD *)(a1 + 216);
    *((_QWORD *)v2 + 28) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(_QWORD *)(a1 + 240);
    *((_QWORD *)v2 + 29) = *(_QWORD *)(a1 + 232);
    *((_QWORD *)v2 + 30) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v2[248] = *(_BYTE *)(a1 + 248);
    v2[256] = 1;
  }
  v18 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(v2 + 328) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(v2 + 344) = v18;
  v19 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(v2 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(v2 + 376) = v19;
  v20 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v2 + 280) = v20;
  result = *(__n128 *)(a1 + 296);
  v22 = *(_OWORD *)(a1 + 312);
  *(__n128 *)(v2 + 296) = result;
  *(_OWORD *)(v2 + 312) = v22;
  return result;
}

__n128 sub_20E930434(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  __int128 v27;
  __int128 v28;

  *(_QWORD *)a2 = &off_24C9B0990;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  v9 = *(_OWORD *)(a1 + 104);
  v10 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 120) = v10;
  *(_OWORD *)(a2 + 104) = v9;
  v11 = *(_OWORD *)(a1 + 136);
  v12 = *(_OWORD *)(a1 + 152);
  v13 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 177) = *(_OWORD *)(a1 + 177);
  *(_OWORD *)(a2 + 168) = v13;
  *(_OWORD *)(a2 + 152) = v12;
  *(_OWORD *)(a2 + 136) = v11;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  if (*(_BYTE *)(a1 + 256))
  {
    v14 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a2 + 200) = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a2 + 208) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a2 + 216) = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a2 + 224) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a2 + 232) = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a2 + 240) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_BYTE *)(a2 + 248) = *(_BYTE *)(a1 + 248);
    *(_BYTE *)(a2 + 256) = 1;
  }
  v23 = *(_OWORD *)(a1 + 264);
  v24 = *(_OWORD *)(a1 + 280);
  v25 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 296) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 312) = v25;
  *(_OWORD *)(a2 + 264) = v23;
  *(_OWORD *)(a2 + 280) = v24;
  result = *(__n128 *)(a1 + 328);
  v27 = *(_OWORD *)(a1 + 344);
  v28 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a2 + 376) = v28;
  *(__n128 *)(a2 + 328) = result;
  *(_OWORD *)(a2 + 344) = v27;
  return result;
}

uint64_t sub_20E93057C(uint64_t a1)
{
  return sub_20E92FF98(a1 + 8);
}

void sub_20E930584(void *a1)
{
  sub_20E92FF98((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20E9305AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CFDictionaryRef v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  CFDictionaryRef v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  CFDictionaryRef v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  const __CFDictionary *v65;
  std::__shared_weak_count *v66;
  CFDictionaryRef theDict;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *value;
  std::__shared_weak_count *v72;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v69 = *(_QWORD *)(a1 + 56);
    v70 = v3;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = 0;
  }
  else
  {
    v4 = 0;
    v69 = 0;
    v70 = 0;
    v7 = 1;
  }
  v8 = sub_210106EC8(&v69);
  v9 = v70;
  if (v70)
  {
    v10 = (unint64_t *)&v70->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*(_BYTE *)(a1 + 160))
    v12 = *(_BYTE *)(a1 + 192) == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = (std::__shared_weak_count *)(a1 + 88);
  if (v12)
    v14 = 0;
  else
    v14 = a1 + 168;
  if (!*(_BYTE *)(a1 + 256))
  {
    v33 = 0;
    v34 = 0;
LABEL_56:
    v35 = 1;
    goto LABEL_100;
  }
  sub_20E95C27C(*(_QWORD *)(a1 + 200), &value);
  theDict = (CFDictionaryRef)value;
  v68 = v72;
  if (v72)
  {
    v15 = (unint64_t *)&v72->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = v72;
    if (v72)
    {
      v18 = (unint64_t *)&v72->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (!sub_20E912C70((uint64_t)&theDict, CFSTR("VIOReinitializationAttempts"), (int *)(*(_QWORD *)(a1 + 200) + 20)))
    sub_20E930C7C((uint64_t)&theDict, CFSTR("VIOReinitializationAttempts"), (int *)(*(_QWORD *)(a1 + 200) + 20));
  if (!sub_20E912C70((uint64_t)&theDict, CFSTR("VIOReinitializationRecoveries"), (int *)(*(_QWORD *)(a1 + 200) + 24)))
    sub_20E930C7C((uint64_t)&theDict, CFSTR("VIOReinitializationRecoveries"), (int *)(*(_QWORD *)(a1 + 200) + 24));
  if (!sub_20E930DF0((uint64_t)&theDict, CFSTR("VIOInertialStateRotation"), a1 + 264))
  {
    v20 = theDict;
    v21 = v68;
    if (!v68)
      goto LABEL_40;
    v22 = (unint64_t *)&v68->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v20)
        goto LABEL_58;
    }
    else
    {
LABEL_40:
      if (!v20)
        goto LABEL_58;
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("VIOInertialStateRotation")))
    {
      sub_20E9310E0(a1 + 264, (CFMutableArrayRef *)&value);
      v25 = value;
      v26 = v72;
      if (v72)
      {
        v27 = (unint64_t *)&v72->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v25)
        CFDictionaryReplaceValue(theDict, CFSTR("VIOInertialStateRotation"), value);
      v30 = v72;
      if (v72)
      {
        v31 = (unint64_t *)&v72->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
LABEL_58:
  if (!sub_20E930F68((uint64_t)&theDict, CFSTR("VIOInertialStateTranslation"), a1 + 344))
  {
    v36 = theDict;
    v37 = v68;
    if (!v68)
      goto LABEL_64;
    v38 = (unint64_t *)&v68->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    do
      v40 = __ldaxr(v38);
    while (__stlxr(v40 - 1, v38));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if (!v36)
        goto LABEL_80;
    }
    else
    {
LABEL_64:
      if (!v36)
        goto LABEL_80;
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("VIOInertialStateTranslation")))
    {
      sub_20E931340(a1 + 344, (CFMutableArrayRef *)&value);
      v41 = value;
      v42 = v72;
      if (v72)
      {
        v43 = (unint64_t *)&v72->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 - 1, v43));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v41)
        CFDictionaryReplaceValue(theDict, CFSTR("VIOInertialStateTranslation"), value);
      v46 = v72;
      if (v72)
      {
        v47 = (unint64_t *)&v72->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
    }
  }
LABEL_80:
  v49 = v14;
  v66 = v4;
  v4 = v13;
  v14 = v8;
  LOBYTE(v13) = v7;
  v50 = *(unsigned __int8 **)(a1 + 200);
  v51 = v50[368];
  v52 = v50[16];
  v53 = v50[5035];
  v33 = theDict;
  v34 = v68;
  if (!v68)
    goto LABEL_87;
  v54 = (unint64_t *)&v68->__shared_owners_;
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  v56 = v68;
  if (!v68)
    goto LABEL_87;
  v57 = (unint64_t *)&v68->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    v65 = v33;
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    v33 = v65;
    if (v53)
      goto LABEL_88;
  }
  else
  {
LABEL_87:
    if (v53)
    {
LABEL_88:
      if (v52)
      {
LABEL_89:
        v35 = 0;
        v7 = (char)v13;
        v8 = v14;
      }
      else
      {
        if ((v51 - 3) > 0xE)
          v59 = 0;
        else
          v59 = dword_2102E08C0[(char)(v51 - 3)];
        v7 = (char)v13;
        v8 = v14;
        if (v59 <= 1)
          v35 = 1;
        else
          v35 = v59;
      }
      v13 = v4;
      v4 = v66;
      v14 = v49;
      goto LABEL_100;
    }
  }
  v60 = v51 - 3;
  v7 = (char)v13;
  v8 = v14;
  v13 = v4;
  v4 = v66;
  v14 = v49;
  switch(v60)
  {
    case 0:
      goto LABEL_56;
    case 1:
      v35 = 2;
      break;
    case 2:
    case 4:
      v35 = 3;
      break;
    case 3:
      v35 = 4;
      break;
    case 5:
      v35 = 5;
      break;
    case 6:
      v35 = 6;
      break;
    case 7:
      v35 = 7;
      break;
    case 8:
      v35 = 8;
      break;
    case 9:
      v35 = 9;
      break;
    case 10:
      v35 = 10;
      break;
    case 11:
      v35 = 11;
      break;
    case 12:
      v35 = 12;
      break;
    case 13:
      v35 = 13;
      break;
    case 14:
      v35 = 14;
      break;
    default:
      goto LABEL_89;
  }
LABEL_100:
  (*(void (**)(_QWORD, uint64_t, std::__shared_weak_count *, uint64_t, uint64_t, CFDictionaryRef, double))(a1 + 376))(*(_QWORD *)(a1 + 384), v8, v13, v14, v35, v33, *(double *)(a1 + 80) + *(double *)(a1 + 72));
  if (!v34)
    goto LABEL_104;
  v61 = (unint64_t *)&v34->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if ((v7 & 1) != 0)
      return;
  }
  else
  {
LABEL_104:
    if ((v7 & 1) != 0)
      return;
  }
  v63 = (unint64_t *)&v4->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20E930BD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  sub_20E860DA4(a1);
}

void sub_20E930BEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  sub_20E860DA4(a1);
}

uint64_t sub_20E930C04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3__18optionalINSF_5array"
                     "IdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj9EEEEENSG_INS6_15odometry_engine1"
                     "1VIOMetadataEEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3_"
                                "_18optionalINSF_5arrayIdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj"
                                "9EEEEENSG_INS6_15odometry_engine11VIOMetadataEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3__18optionalINSF_5arrayIdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj9EEEEENSG_INS6_15odometry_engine11VIOMetadataEEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3__18optionalINSF_5arrayIdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj9EEEEENSG_INS6_15odometry_engine11VIOMetadataEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E930C70()
{
  return &unk_24C9B09F0;
}

void sub_20E930C7C(uint64_t a1, void *key, int *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  sub_20EA5DB5C(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_13;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_13:
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_14:
    CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_15:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20E930DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E930DF0(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20E9310E0(a3, (CFMutableArrayRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_20E930F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E930F68(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20E931340(a3, (CFMutableArrayRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_20E9310CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9310E0(uint64_t a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *value;
  std::__shared_weak_count *v23;
  CFMutableArrayRef theArray[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v6 = theArray[0];
  v5 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v7 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        goto LABEL_26;
      goto LABEL_7;
    }
  }
  if (v6)
  {
LABEL_7:
    v10 = 0;
    while (1)
    {
      sub_20EA5E260((void *)(a1 + 8 * v10), (CFNumberRef *)&value);
      v12 = value;
      v11 = v23;
      if (!v23)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v12)
        {
LABEL_14:
          CFArrayAppendValue(theArray[0], value);
          v16 = v23;
          if (v23)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      else
      {
LABEL_13:
        if (v12)
          goto LABEL_14;
      }
      *a2 = 0;
      a2[1] = 0;
      v16 = v23;
      if (v23)
      {
LABEL_18:
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
LABEL_22:
      if (!v12)
        goto LABEL_27;
      if (++v10 == 9)
      {
        *(_OWORD *)a2 = *(_OWORD *)theArray;
        a2 = theArray;
        break;
      }
    }
  }
LABEL_26:
  *a2 = 0;
  a2[1] = 0;
LABEL_27:
  v19 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v20 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20E9312BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20E931340(uint64_t a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *value;
  std::__shared_weak_count *v38;
  CFMutableArrayRef theArray[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v6 = theArray[0];
  v5 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v7 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_7;
LABEL_57:
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_58;
    }
  }
  if (!v6)
    goto LABEL_57;
LABEL_7:
  sub_20EA5E260((void *)a1, (CFNumberRef *)&value);
  v11 = value;
  v10 = v38;
  if (!v38)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_12:
    if (v11)
      goto LABEL_13;
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    v15 = v38;
    if (!v38)
      goto LABEL_22;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v11)
    goto LABEL_18;
LABEL_13:
  CFArrayAppendValue(theArray[0], value);
  v15 = v38;
  if (!v38)
    goto LABEL_22;
LABEL_19:
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_22:
    if (!v11)
      goto LABEL_58;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!v11)
    goto LABEL_58;
LABEL_23:
  sub_20EA5E260((void *)(a1 + 8), (CFNumberRef *)&value);
  v19 = value;
  v18 = v38;
  if (!v38)
    goto LABEL_28;
  v20 = (unint64_t *)&v38->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v19)
    {
LABEL_29:
      CFArrayAppendValue(theArray[0], value);
      v23 = v38;
      if (!v38)
        goto LABEL_38;
      goto LABEL_35;
    }
  }
  else
  {
LABEL_28:
    if (v19)
      goto LABEL_29;
  }
  *a2 = 0;
  a2[1] = 0;
  v23 = v38;
  if (!v38)
    goto LABEL_38;
LABEL_35:
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_38:
    if (!v19)
      goto LABEL_58;
LABEL_39:
    sub_20EA5E260((void *)(a1 + 16), (CFNumberRef *)&value);
    v27 = value;
    v26 = v38;
    if (!v38)
      goto LABEL_44;
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (v27)
      {
LABEL_45:
        CFArrayAppendValue(theArray[0], value);
        v31 = v38;
        if (!v38)
          goto LABEL_55;
        goto LABEL_51;
      }
    }
    else
    {
LABEL_44:
      if (v27)
        goto LABEL_45;
    }
    *a2 = 0;
    a2[1] = 0;
    v31 = v38;
    if (!v38)
    {
LABEL_55:
      if (!v27)
        goto LABEL_58;
      *(_OWORD *)a2 = *(_OWORD *)theArray;
      a2 = theArray;
      goto LABEL_57;
    }
LABEL_51:
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (v19)
    goto LABEL_39;
LABEL_58:
  v34 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v35 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20E931678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E9316FC(_QWORD *a1)
{
  *a1 = &off_24C9B0A10;
  sub_20E930174((uint64_t)(a1 + 1));
  return a1;
}

void sub_20E93172C(_QWORD *a1)
{
  *a1 = &off_24C9B0A10;
  sub_20E930174((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E93176C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 result;

  v2 = (char *)operator new(0x160uLL);
  *(_QWORD *)v2 = &off_24C9B0A10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v2 + 6) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_OWORD *)(a1 + 72);
  v2[88] = 0;
  *(_OWORD *)(v2 + 72) = v9;
  v2[256] = 0;
  if (*(_BYTE *)(a1 + 256))
  {
    v10 = *(_OWORD *)(a1 + 200);
    v11 = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(v2 + 232) = v11;
    *((_QWORD *)v2 + 31) = *(_QWORD *)(a1 + 248);
    v12 = *(_OWORD *)(a1 + 136);
    v13 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(v2 + 168) = v13;
    *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(v2 + 200) = v10;
    v14 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v2 + 104) = v14;
    *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v2 + 136) = v12;
    v2[256] = 1;
  }
  v2[264] = 0;
  v2[320] = 0;
  if (*(_BYTE *)(a1 + 320))
  {
    v15 = *(_QWORD *)(a1 + 272);
    *((_QWORD *)v2 + 33) = *(_QWORD *)(a1 + 264);
    *((_QWORD *)v2 + 34) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(_QWORD *)(a1 + 288);
    *((_QWORD *)v2 + 35) = *(_QWORD *)(a1 + 280);
    *((_QWORD *)v2 + 36) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(_QWORD *)(a1 + 304);
    *((_QWORD *)v2 + 37) = *(_QWORD *)(a1 + 296);
    *((_QWORD *)v2 + 38) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v2[312] = *(_BYTE *)(a1 + 312);
    v2[320] = 1;
  }
  *((_QWORD *)v2 + 43) = *(_QWORD *)(a1 + 344);
  result = *(__n128 *)(a1 + 328);
  *(__n128 *)(v2 + 328) = result;
  return result;
}

__n128 sub_20E9318EC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B0A10;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_OWORD *)(a1 + 72);
  *(_BYTE *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = v9;
  *(_BYTE *)(a2 + 256) = 0;
  if (*(_BYTE *)(a1 + 256))
  {
    v10 = *(_OWORD *)(a1 + 88);
    v11 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 120) = v11;
    *(_OWORD *)(a2 + 88) = v10;
    v12 = *(_OWORD *)(a1 + 136);
    v13 = *(_OWORD *)(a1 + 152);
    v14 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a2 + 184) = v14;
    *(_OWORD *)(a2 + 136) = v12;
    *(_OWORD *)(a2 + 152) = v13;
    v15 = *(_OWORD *)(a1 + 200);
    v16 = *(_OWORD *)(a1 + 216);
    v17 = *(_OWORD *)(a1 + 232);
    *(_QWORD *)(a2 + 248) = *(_QWORD *)(a1 + 248);
    *(_OWORD *)(a2 + 216) = v16;
    *(_OWORD *)(a2 + 232) = v17;
    *(_OWORD *)(a2 + 200) = v15;
    *(_BYTE *)(a2 + 256) = 1;
  }
  *(_BYTE *)(a2 + 264) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  if (*(_BYTE *)(a1 + 320))
  {
    v18 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a2 + 264) = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a2 + 272) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a2 + 280) = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a2 + 288) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(_QWORD *)(a1 + 304);
    *(_QWORD *)(a2 + 296) = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a2 + 304) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    *(_BYTE *)(a2 + 312) = *(_BYTE *)(a1 + 312);
    *(_BYTE *)(a2 + 320) = 1;
  }
  result = *(__n128 *)(a1 + 328);
  *(_QWORD *)(a2 + 344) = *(_QWORD *)(a1 + 344);
  *(__n128 *)(a2 + 328) = result;
  return result;
}

uint64_t sub_20E931A50(uint64_t a1)
{
  return sub_20E930174(a1 + 8);
}

void sub_20E931A58(void *a1)
{
  sub_20E930174((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20E931A80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const double *v12;
  __int128 v13;
  float64x2_t v16;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  void (*v37)(_QWORD, uint64_t, uint64_t (***)());
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  char v42;
  uint64_t (**v43)();
  char *v44;
  std::__shared_weak_count *v45;
  int v46;
  _OWORD v47[3];
  __int128 v48;
  double v49;
  float64x2_t v50;
  double v51;
  char v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  float64x2x3_t v56;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v40 = *(_QWORD *)(a1 + 56);
    v41 = v3;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = 0;
  }
  else
  {
    v4 = 0;
    v40 = 0;
    v41 = 0;
    v7 = 1;
  }
  v8 = sub_210106EC8(&v40);
  v9 = v41;
  if (v41)
  {
    v10 = (unint64_t *)&v41->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  bzero(&v44, 0x4C1uLL);
  v54 = 1;
  v43 = off_24C9C3BA8;
  v53 = *(_OWORD *)(a1 + 72);
  if (*(_BYTE *)(a1 + 256))
  {
    v12 = (const double *)v47;
    v52 = 1;
    v49 = *(double *)(a1 + 152);
    v13 = *(_OWORD *)(a1 + 136);
    _Q1 = *(_OWORD *)(a1 + 104);
    v47[2] = *(_OWORD *)(a1 + 120);
    v48 = v13;
    v47[0] = *(_OWORD *)(a1 + 88);
    v47[1] = _Q1;
    *(_QWORD *)&v13 = *(_QWORD *)(a1 + 248);
    v56 = vld3q_f64(v12);
    _V6.D[1] = *((_QWORD *)&v48 + 1);
    v16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56.val[0], *(double *)(a1 + 232)), v56.val[1], *(float64x2_t *)(a1 + 232), 1), v56.val[2], *(double *)&v13);
    *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 240);
    __asm { FMLA            D2, D1, V6.D[1] }
    v50 = vnegq_f64(v16);
    v51 = -(v56.val[0].f64[0] + v49 * *(double *)&v13);
  }
  if (*(_BYTE *)(a1 + 320))
  {
    v21 = operator new(0x50uLL);
    v22 = (std::__shared_weak_count *)v21;
    v21[1] = 0;
    v21[2] = 0;
    *v21 = &off_24C9B0848;
    v23 = *(_QWORD *)(a1 + 272);
    v21[3] = *(_QWORD *)(a1 + 264);
    v24 = (char *)(v21 + 3);
    v21[4] = v23;
    if (v23)
    {
      v25 = (unint64_t *)(v23 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(_QWORD *)(a1 + 288);
    v21[5] = *(_QWORD *)(a1 + 280);
    v21[6] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *(_QWORD *)(a1 + 304);
    v21[7] = *(_QWORD *)(a1 + 296);
    v21[8] = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    *((_BYTE *)v21 + 72) = *(_BYTE *)(a1 + 312);
    if (v46 != -1)
    {
      if (!v46)
      {
        v33 = v45;
        v44 = (char *)(v21 + 3);
        v45 = (std::__shared_weak_count *)v21;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        goto LABEL_33;
      }
      ((void (*)(char *, char **))off_24C9B0A70[v46])(&v42, &v44);
    }
    v44 = v24;
    v45 = v22;
    v46 = 0;
  }
LABEL_33:
  v36 = *(_QWORD **)(a1 + 328);
  if (v36[1652])
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t (***)()))(a1 + 336))(*(_QWORD *)(a1 + 344), v8, &v43);
    v36 = *(_QWORD **)(a1 + 328);
  }
  v37 = (void (*)(_QWORD, uint64_t, uint64_t (***)()))v36[1654];
  if (v37)
    v37(v36[1655], v8, &v43);
  if (v46 != -1)
    ((void (*)(char *, char **))off_24C9C3C08[v46])(&v42, &v44);
  if ((v7 & 1) == 0)
  {
    v38 = (unint64_t *)&v4->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20E931DAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E931DC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3__18optionalINSF_5array"
                     "IdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj9EEEEENSG_INS6_15odometry_engine1"
                     "1VIOMetadataEEEEUlvE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3_"
                                "_18optionalINSF_5arrayIdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj"
                                "9EEEEENSG_INS6_15odometry_engine11VIOMetadataEEEEUlvE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3__18optionalINSF_5arrayIdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj9EEEEENSG_INS6_15odometry_engine11VIOMetadataEEEEUlvE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_0clENS6_8cv_types13WeakFrameDataIhEENSt3__18optionalINSF_5arrayIdLm9EEEEENSG_INSH_IdLm3EEEEESJ_SL_RKNSG_INSC_14InertialStateTIdLj9EEEEENSG_INS6_15odometry_engine11VIOMetadataEEEEUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E931E30()
{
  return &unk_24C9B0A80;
}

void sub_20E931E40()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E931E54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B0AB0;
  result[1] = v3;
  return result;
}

uint64_t sub_20E931E88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B0AB0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20E931EA4(_QWORD *result, _QWORD *a2, uint64_t **a3, uint64_t **a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = result[1];
  v6 = *(_QWORD *)(v5 + 13168);
  if (v6)
  {
    v10 = result;
    v11 = *a5;
    v12 = *(_QWORD *)(v5 + 13176);
    v13 = (char *)malloc_type_malloc(8 * (((uint64_t)(a2[1] - *a2) >> 3) + ((uint64_t)(a2[1] - *a2) >> 5)), 0x10000400A747E1EuLL);
    v14 = v13;
    v15 = a2[1] - *a2;
    if (v15)
    {
      v16 = v15 >> 5;
      v17 = *a3;
      v18 = *a4;
      if ((unint64_t)(v15 >> 5) <= 1)
        v16 = 1;
      v19 = (uint64_t *)(*a2 + 16);
      v20 = v13 + 16;
      do
      {
        *(v20 - 2) = *(v19 - 2);
        *(v20 - 1) = *(v19 - 1);
        v21 = *v19;
        v19 += 4;
        *v20 = v21;
        v22 = *v17++;
        v20[1] = v22;
        v23 = *v18++;
        v20[2] = v23;
        v20 += 5;
        --v16;
      }
      while (v16);
    }
    v24 = (unint64_t)v15 >> 5;
    v25 = v10[1];
    v26 = operator new(0x30uLL);
    *v26 = &off_24C9B0B30;
    v26[1] = v6;
    v26[2] = v12;
    v26[3] = v11;
    v26[4] = v14;
    *((_DWORD *)v26 + 10) = v24;
    v29 = v26;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v25 + 16) + 40))(v25 + 16, v28);
    result = v29;
    if (v29 == v28)
    {
      v27 = 4;
      result = v28;
    }
    else
    {
      if (!v29)
        return result;
      v27 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v27))();
  }
  return result;
}

void sub_20E932030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E932068(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9320D4()
{
  return &unk_24C9B0BA0;
}

void sub_20E9320E4()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9320F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C9B0B30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20E932140(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9B0B30;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E932170(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, double))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(double *)(a1 + 24));
}

uint64_t sub_20E93219C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_1clERKNSt3__16vectorINS6_4math17Point3DHomogenousIdEENSC_9alloc"
                     "atorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_1clERKNSt3__16vectorINS6_4math17Point3DHo"
                                "mogenousIdEENSC_9allocatorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_1clERKNSt3__16vectorINS6_4math17Point3DHomogenousIdEENSC_9allocatorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_1clERKNSt3__16vectorINS6_4math17Point3DHomogenousIdEENSC_9allocatorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E932208()
{
  return &unk_24C9B0B90;
}

void sub_20E932218()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E93222C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B0BC0;
  result[1] = v3;
  return result;
}

uint64_t sub_20E932260(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B0BC0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20E93227C(_QWORD *result, _QWORD *a2, uint64_t **a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = result[1];
  v6 = *(_QWORD *)(v5 + 13184);
  if (!v6)
    return result;
  v10 = result;
  v11 = *a5;
  v12 = *(_QWORD *)(v5 + 13192);
  v13 = a2[1] - *a2;
  v14 = v13 >> 5;
  if (v13 >> 5 != ((char *)a3[1] - (char *)*a3) >> 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOInterface.cpp", 158, (uint64_t)"line_cloud.size() == 2 * line_ids.size()", 40, (uint64_t)"line_cloud size must be twice the number of ids", 47, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_20;
    }
    v13 = a2[1] - *a2;
    v14 = v13 >> 5;
  }
  if (v14 != (uint64_t)(a4[1] - *a4) >> 3)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOInterface.cpp", 160, (uint64_t)"line_cloud.size() == vergence_angle_cosines.size()", 50, (uint64_t)"line_cloud size must be equal to vergence angles size", 53, (void (*)(void **))sub_21023DDB0))
    {
      v13 = a2[1] - *a2;
      v14 = v13 >> 5;
      goto LABEL_8;
    }
LABEL_20:
    abort();
  }
LABEL_8:
  v15 = v14 >> 1;
  v16 = (char *)malloc_type_malloc(72 * (v14 >> 1), 0x1000040FF89C88EuLL);
  v17 = v16;
  v18 = *a3;
  if ((unint64_t)v13 >= 0x40)
  {
    if (v15 <= 1)
      v19 = 1;
    else
      v19 = v15;
    v20 = v16 + 32;
    v21 = (_QWORD *)(*a2 + 32);
    v22 = (uint64_t *)(*a4 + 8);
    v23 = *a3;
    do
    {
      *(v20 - 4) = *(v21 - 4);
      *(v20 - 3) = *(v21 - 3);
      *(v20 - 2) = *(v21 - 2);
      *v20 = *v21;
      v20[1] = v21[1];
      v20[2] = v21[2];
      *(v20 - 1) = *(v22 - 1);
      v24 = *v22;
      v22 += 2;
      v20[3] = v24;
      v25 = *v23++;
      v20[4] = v25;
      v20 += 9;
      v21 += 8;
      --v19;
    }
    while (v19);
  }
  v26 = (unint64_t)((char *)a3[1] - (char *)v18) >> 3;
  v27 = v10[1];
  v28 = operator new(0x30uLL);
  *v28 = &off_24C9B0C30;
  v28[1] = v6;
  v28[2] = v12;
  v28[3] = v11;
  v28[4] = v17;
  *((_DWORD *)v28 + 10) = v26;
  v31 = v28;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v27 + 16) + 40))(v27 + 16, v30);
  result = v31;
  if (v31 == v30)
  {
    v29 = 4;
    result = v30;
  }
  else
  {
    if (!v31)
      return result;
    v29 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v29))();
}

void sub_20E9324E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E932520(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E93258C()
{
  return &unk_24C9B0CA0;
}

void sub_20E93259C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9325B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C9B0C30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20E9325F8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9B0C30;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E932628(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, double))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(double *)(a1 + 24));
}

uint64_t sub_20E932654(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_2clERKNSt3__16vectorINS6_4math17Point3DHomogenousIdEENSC_9alloc"
                     "atorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_2clERKNSt3__16vectorINS6_4math17Point3DHo"
                                "mogenousIdEENSC_9allocatorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_2clERKNSt3__16vectorINS6_4math17Point3DHomogenousIdEENSC_9allocatorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_2clERKNSt3__16vectorINS6_4math17Point3DHomogenousIdEENSC_9allocatorISG_EEEERKNSD_IyNSH_IyEEEERKNSD_IdNSH_IdEEEEdEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9326C0()
{
  return &unk_24C9B0C90;
}

void sub_20E9326D0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9326E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B0CC0;
  result[1] = v3;
  return result;
}

uint64_t sub_20E932718(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B0CC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E932734(uint64_t a1, __int128 *a2, double *a3)
{
  return sub_2101083F0(*(_QWORD *)(a1 + 8) + 15728, a2, *a3);
}

uint64_t sub_20E932748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_7")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_7" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_7"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_7" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9327B4()
{
  return &unk_24C9B0D30;
}

void sub_20E9327C4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9327D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B0D50;
  result[1] = v3;
  return result;
}

uint64_t sub_20E93280C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B0D50;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20E932828(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *result;
  int v10;
  _QWORD *v11;
  size_t v13;
  void **v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *shared_owners;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  std::__shared_weak_count_vtbl *v75;
  const char *v76;
  _QWORD v77[3];
  int v78;
  const char *v79;
  int v80;
  const char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *__dst[2];
  int64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  uint64_t v88;
  _QWORD *v89;
  const void *v90;
  uint64_t v91;
  const void *v92;
  unint64_t v93;
  void *__p;
  char v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  _BYTE v99[24];
  unint64_t v100;
  char v101;
  void *v102[2];
  unint64_t v103;
  char v104;
  _QWORD v105[5];

  v105[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[1656];
  if (!v4)
  {
    sub_20E930080(&v86);
    result = (_QWORD *)v86;
    if (**(int **)(v86 + 56) > 5)
      return result;
    v10 = *(unsigned __int8 *)(v86 + 72);
    result = (_QWORD *)sub_20E8C31DC(v86, "OSLogSurrogateAppender", 1, 0);
    v11 = result;
    if (!v10 && result == 0)
      return result;
    sub_20E863438((uint64_t)v87);
    sub_20E86A980(&v88, (uint64_t)"Error callback has not been set", 31);
    if ((v97 & 0x10) != 0)
    {
      v17 = v96;
      if (v96 < v93)
      {
        v96 = v93;
        v17 = v93;
      }
      v18 = v92;
      v13 = v17 - (_QWORD)v92;
      if (v17 - (unint64_t)v92 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_74;
    }
    else
    {
      if ((v97 & 8) == 0)
      {
        v13 = 0;
        HIBYTE(v85) = 0;
        v14 = __dst;
        goto LABEL_29;
      }
      v18 = v90;
      v13 = v91 - (_QWORD)v90;
      if ((unint64_t)(v91 - (_QWORD)v90) > 0x7FFFFFFFFFFFFFF7)
LABEL_74:
        sub_20E860B7C();
    }
    if (v13 >= 0x17)
    {
      v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v19 = v13 | 7;
      v20 = v19 + 1;
      v14 = (void **)operator new(v19 + 1);
      __dst[1] = (void *)v13;
      v85 = v20 | 0x8000000000000000;
      __dst[0] = v14;
    }
    else
    {
      HIBYTE(v85) = v13;
      v14 = __dst;
      if (!v13)
      {
LABEL_29:
        *((_BYTE *)v14 + v13) = 0;
        v77[0] = &v86;
        v77[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v77[2] = std::chrono::system_clock::now().__d_.__rep_;
        v78 = 5;
        v79 = "unknown file";
        v80 = 580;
        v82 = 0;
        v83 = 0;
        v81 = "unknown function";
        if (v85 >= 0)
          v21 = (const char *)__dst;
        else
          v21 = (const char *)__dst[0];
        v22 = *(_QWORD *)v77[0];
        v23 = (const char *)(*(_QWORD *)v77[0] + 16);
        v76 = v23;
        if (*(char *)(*(_QWORD *)v77[0] + 39) < 0)
        {
          v23 = *(const char **)(v22 + 16);
          v24 = *(_QWORD *)(v22 + 24);
          v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v26 & 1) != 0)
            goto LABEL_36;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)v77[0] + 39);
          v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v25 & 1) != 0)
            goto LABEL_36;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v99);
          if ((_BYTE)v100)
          {
            *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v99;
            *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v99[16];
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_36:
        if (byte_254A4A4F8[23] >= 0)
          v27 = byte_254A4A4F8;
        else
          v27 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v28 = byte_254A4A4F8[23];
        else
          v28 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v99 = os_log_create(v27, v23);
        v29 = &v99[8];
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v28 >= 0x17)
        {
          v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v30 = v28 | 7;
          v31 = v30 + 1;
          v29 = operator new(v30 + 1);
          *(_QWORD *)&v99[16] = v28;
          v100 = v31 | 0x8000000000000000;
          *(_QWORD *)&v99[8] = v29;
        }
        else
        {
          HIBYTE(v100) = v28;
          if (!v28)
          {
LABEL_50:
            v29[v28] = 0;
            v101 = 1;
            v32 = v102;
            if (v24 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v24 >= 0x17)
            {
              v33 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17)
                v33 = v24 | 7;
              v34 = v33 + 1;
              v32 = (void **)operator new(v33 + 1);
              v102[1] = (void *)v24;
              v103 = v34 | 0x8000000000000000;
              v102[0] = v32;
            }
            else
            {
              HIBYTE(v103) = v24;
              if (!v24)
              {
LABEL_58:
                *((_BYTE *)v32 + v24) = 0;
                v104 = 1;
                v35 = *(NSObject **)v99;
                if (SHIBYTE(v103) < 0)
                  operator delete(v102[0]);
                if (v101 && SHIBYTE(v100) < 0)
                  operator delete(*(void **)&v99[8]);
                if (*(_QWORD *)v99)
                  os_release(*(void **)v99);
                if (!v11 || !v11[3])
                {
                  os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v99 = 136315138;
                  *(_QWORD *)&v99[4] = v21;
                  v43 = (void *)_os_log_send_and_compose_impl();
                  if (v43)
                    free(v43);
                  goto LABEL_105;
                }
                v36 = _os_log_pack_size();
                v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
                v38 = (std::__shared_weak_count *)operator new();
                v38->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v38->__shared_owners_;
                v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v38->__shared_weak_owners_ = 0;
                v38[1].__vftable = v37;
                v75 = v37;
                v40 = strlen(v21);
                if (v40 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v41 = v40;
                if (v40 >= 0x17)
                {
                  v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v40 | 7) != 0x17)
                    v44 = v40 | 7;
                  v45 = v44 + 1;
                  v42 = operator new(v44 + 1);
                  *(_QWORD *)&v99[8] = v41;
                  *(_QWORD *)&v99[16] = v45 | 0x8000000000000000;
                  *(_QWORD *)v99 = v42;
                }
                else
                {
                  v99[23] = v40;
                  v42 = v99;
                  if (!v40)
                  {
LABEL_79:
                    v74 = v10;
                    v42[v41] = 0;
                    v105[0] = *(_QWORD *)&v99[8];
                    v46 = *(_QWORD *)v99;
                    *(_QWORD *)((char *)v105 + 7) = *(_QWORD *)&v99[15];
                    v47 = v99[23];
                    v48 = operator new(0x38uLL);
                    v49 = (std::__shared_weak_count *)v48;
                    v48[1] = 0;
                    v50 = v48 + 1;
                    v48[3] = off_24C9ABC20;
                    v51 = (char *)(v48 + 3);
                    v48[2] = 0;
                    v48[4] = v46;
                    v52 = (char *)(v48 + 4);
                    *v48 = &off_24C9ABBD0;
                    v48[5] = v105[0];
                    *(_QWORD *)((char *)v48 + 47) = *(_QWORD *)((char *)v105 + 7);
                    *((_BYTE *)v48 + 55) = v47;
                    do
                      v53 = __ldxr(p_shared_owners);
                    while (__stxr(v53 + 1, p_shared_owners));
                    do
                      v54 = __ldxr(v50);
                    while (__stxr(v54 + 1, v50));
                    do
                      v55 = __ldaxr(v50);
                    while (__stlxr(v55 - 1, v50));
                    if (!v55)
                    {
                      (*(void (**)(_QWORD *))(*v48 + 16))(v48);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                    do
                      v56 = __ldaxr(p_shared_owners);
                    while (__stlxr(v56 - 1, p_shared_owners));
                    if (!v56)
                    {
                      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                      std::__shared_weak_count::__release_weak(v38);
                    }
                    if (SHIBYTE(v49[2].__vftable) >= 0)
                      shared_owners = v52;
                    else
                      shared_owners = (char *)v49[1].__shared_owners_;
                    v58 = _os_log_pack_fill();
                    *(_DWORD *)v58 = 136315138;
                    *(_QWORD *)(v58 + 4) = shared_owners;
                    v59 = operator new();
                    v60 = *(unsigned __int8 *)(v22 + 39);
                    v61 = v76;
                    if ((v60 & 0x80u) != 0)
                    {
                      v61 = *(const char **)(v22 + 16);
                      v60 = *(_QWORD *)(v22 + 24);
                    }
                    *(_QWORD *)v59 = v75;
                    *(_QWORD *)(v59 + 8) = v75;
                    *(_QWORD *)(v59 + 16) = v38;
                    *(_QWORD *)(v59 + 24) = v51;
                    *(_QWORD *)(v59 + 32) = v49;
                    *(_QWORD *)(v59 + 40) = v61;
                    *(_QWORD *)(v59 + 48) = v60;
                    *(_BYTE *)(v59 + 56) = 16;
                    *(_QWORD *)v99 = v59;
                    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)v11[3] + 40))(v11[3], v99);
                    v10 = v74;
                    v62 = *(_QWORD *)v99;
                    *(_QWORD *)v99 = 0;
                    if (v62)
                    {
                      v63 = *(std::__shared_weak_count **)(v62 + 32);
                      if (v63)
                      {
                        v64 = (unint64_t *)&v63->__shared_owners_;
                        do
                          v65 = __ldaxr(v64);
                        while (__stlxr(v65 - 1, v64));
                        if (!v65)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      v66 = *(std::__shared_weak_count **)(v62 + 16);
                      if (v66)
                      {
                        v67 = (unint64_t *)&v66->__shared_owners_;
                        do
                          v68 = __ldaxr(v67);
                        while (__stlxr(v68 - 1, v67));
                        if (!v68)
                        {
                          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                          std::__shared_weak_count::__release_weak(v66);
                        }
                      }
                      MEMORY[0x212BC6398](v62, 0x10F0C40B62ED6C6);
                    }
LABEL_105:
                    if (v10)
                    {
                      v69 = (const char *)__dst;
                      if (v85 < 0)
                        v69 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v77, "%s", v69);
                      sub_20E863570((uint64_t)v77);
                    }
                    sub_20E863570((uint64_t)v77);
                    v70 = v83;
                    if (v83)
                    {
                      v71 = (unint64_t *)&v83->__shared_owners_;
                      do
                        v72 = __ldaxr(v71);
                      while (__stlxr(v72 - 1, v71));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                    }
                    if (SHIBYTE(v85) < 0)
                      operator delete(__dst[0]);
                    v87[0] = *MEMORY[0x24BEDB7F0];
                    v73 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v87 + *(_QWORD *)(v87[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v88 = v73;
                    v89 = (_QWORD *)(MEMORY[0x24BEDB848] + 16);
                    if (v95 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    return (_QWORD *)MEMORY[0x212BC6290](&v98);
                  }
                }
                memcpy(v42, v21, v41);
                goto LABEL_79;
              }
            }
            memmove(v32, v23, v24);
            goto LABEL_58;
          }
        }
        memmove(v29, v27, v28);
        goto LABEL_50;
      }
    }
    memmove(v14, v18, v13);
    goto LABEL_29;
  }
  v5 = *a3;
  v6 = v3[1657];
  v7 = *a2 - 1;
  if (v7 > 0x12)
    v8 = 0;
  else
    v8 = dword_2102E08FC[v7];
  v15 = operator new(0x28uLL);
  *v15 = &off_24C9B0DD0;
  v15[1] = v4;
  v15[2] = v6;
  v15[3] = v5;
  *((_DWORD *)v15 + 8) = v8;
  v89 = v15;
  (*(void (**)(_QWORD *, _QWORD *))(v3[2] + 40))(v3 + 2, v87);
  result = v89;
  if (v89 == v87)
  {
    v16 = 4;
    result = v87;
  }
  else
  {
    if (!v89)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_20E933180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a15);
  v51 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (a29 < 0)
    operator delete(__p);
  a31 = *MEMORY[0x24BEDB7F0];
  v54 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a31 + *(_QWORD *)(a31 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a33 = v54;
  a34 = MEMORY[0x24BEDB848] + 16;
  if (a47 < 0)
    operator delete(a42);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a50);
  _Unwind_Resume(a1);
}

void sub_20E933414(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20E933430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  if (a31 == v31)
  {
    (*(void (**)(void))(a28 + 32))();
    _Unwind_Resume(a1);
  }
  if (a31)
  {
    (*(void (**)(void))(*(_QWORD *)a31 + 40))();
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20E933428);
}

uint64_t sub_20E933478(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9334E4()
{
  return &unk_24C9B0E40;
}

void sub_20E9334F4()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E933508(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C9B0DD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20E933548(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B0DD0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E933570(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, double))(a1 + 8))(*(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 32), 0, *(double *)(a1 + 24));
}

uint64_t sub_20E93359C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_3clERKNS6_15odometry_engine19OdometryEngineErrorEdEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_3clERKNS6_15odometry_engine19OdometryEngineErrorEdEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_3clERKNS6_15odometry_engine19OdometryEngineErrorEdEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_3clERKNS6_15odometry_engine19OdometryEngineErrorEdEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E933608()
{
  return &unk_24C9B0E30;
}

void sub_20E933618()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E93362C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B0E60;
  result[1] = v3;
  return result;
}

uint64_t sub_20E933660(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B0E60;
  a2[1] = v2;
  return result;
}

void sub_20E93367C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  size_t v14;
  void **v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  size_t v45;
  size_t v46;
  _BYTE *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *shared_owners;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  const char *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  int v79;
  std::__shared_weak_count_vtbl *v80;
  const char *v81;
  void *__dst[2];
  int64_t v83;
  void *v84[2];
  void *__p[3];
  __int128 v86;
  unint64_t v87;
  const void *v88;
  unint64_t v89;
  void *v90;
  char v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  _QWORD *v97;
  const char *v98;
  int v99;
  const char *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  _BYTE v103[24];
  unint64_t v104;
  char v105;
  __int128 v106;
  unint64_t v107;
  char v108;
  _QWORD v109[5];

  v109[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[1658];
  if (v4)
  {
    v5 = *a2;
    v6 = v3[1659];
    sub_20E935228((uint64_t)v103, a3);
    *(_QWORD *)&v106 = v5;
    *((_QWORD *)&v106 + 1) = v4;
    v107 = v6;
    sub_20E935228((uint64_t)v84, (uint64_t)v103);
    v86 = v106;
    v87 = v107;
    v97 = 0;
    v7 = operator new(0x48uLL);
    *(_QWORD *)v7 = &off_24C9B0ED0;
    sub_20E935228((uint64_t)v7 + 8, (uint64_t)v84);
    v7[3] = v86;
    *((_QWORD *)v7 + 8) = v87;
    v97 = v7;
    (*(void (**)(_QWORD *, _QWORD *))(v3[2] + 40))(v3 + 2, v96);
    v8 = v97;
    if (v97 == v96)
    {
      v9 = 4;
      v8 = v96;
    }
    else
    {
      if (!v97)
      {
LABEL_15:
        v16 = __p[0];
        if (__p[0])
        {
          do
          {
            v17 = (_QWORD *)*v16;
            operator delete(v16);
            v16 = v17;
          }
          while (v17);
        }
        v18 = v84[0];
        v84[0] = 0;
        if (v18)
          operator delete(v18);
        v19 = *(_QWORD **)&v103[16];
        if (*(_QWORD *)&v103[16])
        {
          do
          {
            v20 = (_QWORD *)*v19;
            operator delete(v19);
            v19 = v20;
          }
          while (v20);
        }
        v21 = *(void **)v103;
        *(_QWORD *)v103 = 0;
        if (v21)
          operator delete(v21);
        return;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_15;
  }
  sub_20E930080(&v95);
  if (**(int **)(v95 + 56) > 5)
    return;
  v10 = *(unsigned __int8 *)(v95 + 72);
  v11 = sub_20E8C31DC(v95, "OSLogSurrogateAppender", 1, 0);
  v12 = v11;
  if (!v10 && v11 == 0)
    return;
  sub_20E863438((uint64_t)v84);
  sub_20E86A980(__p, (uint64_t)"Update anchor callback has not been set", 39);
  if ((v93 & 0x10) != 0)
  {
    v22 = v92;
    if (v92 < v89)
    {
      v92 = v89;
      v22 = v89;
    }
    v23 = v88;
    v14 = v22 - (_QWORD)v88;
    if (v22 - (unint64_t)v88 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_79;
  }
  else
  {
    if ((v93 & 8) == 0)
    {
      v14 = 0;
      HIBYTE(v83) = 0;
      v15 = __dst;
      goto LABEL_34;
    }
    v23 = (const void *)v86;
    v14 = v87 - v86;
    if (v87 - (unint64_t)v86 > 0x7FFFFFFFFFFFFFF7)
LABEL_79:
      sub_20E860B7C();
  }
  if (v14 >= 0x17)
  {
    v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v24 = v14 | 7;
    v25 = v24 + 1;
    v15 = (void **)operator new(v24 + 1);
    __dst[1] = (void *)v14;
    v83 = v25 | 0x8000000000000000;
    __dst[0] = v15;
    goto LABEL_33;
  }
  HIBYTE(v83) = v14;
  v15 = __dst;
  if (v14)
LABEL_33:
    memmove(v15, v23, v14);
LABEL_34:
  *((_BYTE *)v15 + v14) = 0;
  v96[0] = &v95;
  v96[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v96[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v97) = 5;
  v98 = "unknown file";
  v99 = 625;
  v101 = 0;
  v102 = 0;
  v100 = "unknown function";
  if (v83 >= 0)
    v26 = (const char *)__dst;
  else
    v26 = (const char *)__dst[0];
  v27 = *(_QWORD *)v96[0];
  v28 = (const char *)(*(_QWORD *)v96[0] + 16);
  v81 = v28;
  if (*(char *)(*(_QWORD *)v96[0] + 39) < 0)
  {
    v28 = *(const char **)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v31 & 1) != 0)
      goto LABEL_41;
  }
  else
  {
    v29 = *(unsigned __int8 *)(*(_QWORD *)v96[0] + 39);
    v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v30 & 1) != 0)
      goto LABEL_41;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v103);
    if ((_BYTE)v104)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v103;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v103[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_41:
  if (byte_254A4A4F8[23] >= 0)
    v32 = byte_254A4A4F8;
  else
    v32 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v33 = byte_254A4A4F8[23];
  else
    v33 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v103 = os_log_create(v32, v28);
  v34 = &v103[8];
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v33 >= 0x17)
  {
    v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v35 = v33 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    *(_QWORD *)&v103[16] = v33;
    v104 = v36 | 0x8000000000000000;
    *(_QWORD *)&v103[8] = v34;
    goto LABEL_54;
  }
  HIBYTE(v104) = v33;
  if (v33)
LABEL_54:
    memmove(v34, v32, v33);
  v34[v33] = 0;
  v105 = 1;
  v37 = &v106;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v38 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v38 = v29 | 7;
    v39 = v38 + 1;
    v37 = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&v106 + 1) = v29;
    v107 = v39 | 0x8000000000000000;
    *(_QWORD *)&v106 = v37;
    goto LABEL_62;
  }
  HIBYTE(v107) = v29;
  if (v29)
LABEL_62:
    memmove(v37, v28, v29);
  *((_BYTE *)v37 + v29) = 0;
  v108 = 1;
  v40 = *(NSObject **)v103;
  if (SHIBYTE(v107) < 0)
    operator delete((void *)v106);
  if (v105 && SHIBYTE(v104) < 0)
    operator delete(*(void **)&v103[8]);
  if (*(_QWORD *)v103)
    os_release(*(void **)v103);
  if (!v12 || !*(_QWORD *)(v12 + 24))
  {
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315138;
    *(_QWORD *)&v103[4] = v26;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
    goto LABEL_110;
  }
  v41 = _os_log_pack_size();
  v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
  v43 = (std::__shared_weak_count *)operator new();
  v43->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v43->__shared_owners_;
  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v43->__shared_weak_owners_ = 0;
  v43[1].__vftable = v42;
  v80 = v42;
  v45 = strlen(v26);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v49 = v45 | 7;
    v50 = v49 + 1;
    v47 = operator new(v49 + 1);
    *(_QWORD *)&v103[8] = v46;
    *(_QWORD *)&v103[16] = v50 | 0x8000000000000000;
    *(_QWORD *)v103 = v47;
    goto LABEL_83;
  }
  v103[23] = v45;
  v47 = v103;
  if (v45)
LABEL_83:
    memcpy(v47, v26, v46);
  v79 = v10;
  v47[v46] = 0;
  v109[0] = *(_QWORD *)&v103[8];
  v51 = *(_QWORD *)v103;
  *(_QWORD *)((char *)v109 + 7) = *(_QWORD *)&v103[15];
  v52 = v103[23];
  v53 = operator new(0x38uLL);
  v54 = (std::__shared_weak_count *)v53;
  v53[1] = 0;
  v55 = v53 + 1;
  v53[3] = off_24C9ABC20;
  v56 = (char *)(v53 + 3);
  v53[2] = 0;
  v53[4] = v51;
  v57 = (char *)(v53 + 4);
  *v53 = &off_24C9ABBD0;
  v53[5] = v109[0];
  *(_QWORD *)((char *)v53 + 47) = *(_QWORD *)((char *)v109 + 7);
  *((_BYTE *)v53 + 55) = v52;
  do
    v58 = __ldxr(p_shared_owners);
  while (__stxr(v58 + 1, p_shared_owners));
  do
    v59 = __ldxr(v55);
  while (__stxr(v59 + 1, v55));
  do
    v60 = __ldaxr(v55);
  while (__stlxr(v60 - 1, v55));
  if (!v60)
  {
    (*(void (**)(_QWORD *))(*v53 + 16))(v53);
    std::__shared_weak_count::__release_weak(v54);
  }
  do
    v61 = __ldaxr(p_shared_owners);
  while (__stlxr(v61 - 1, p_shared_owners));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  if (SHIBYTE(v54[2].__vftable) >= 0)
    shared_owners = v57;
  else
    shared_owners = (char *)v54[1].__shared_owners_;
  v63 = _os_log_pack_fill();
  *(_DWORD *)v63 = 136315138;
  *(_QWORD *)(v63 + 4) = shared_owners;
  v64 = operator new();
  v65 = *(unsigned __int8 *)(v27 + 39);
  v66 = v81;
  if ((v65 & 0x80u) != 0)
  {
    v66 = *(const char **)(v27 + 16);
    v65 = *(_QWORD *)(v27 + 24);
  }
  *(_QWORD *)v64 = v80;
  *(_QWORD *)(v64 + 8) = v80;
  *(_QWORD *)(v64 + 16) = v43;
  *(_QWORD *)(v64 + 24) = v56;
  *(_QWORD *)(v64 + 32) = v54;
  *(_QWORD *)(v64 + 40) = v66;
  *(_QWORD *)(v64 + 48) = v65;
  *(_BYTE *)(v64 + 56) = 16;
  *(_QWORD *)v103 = v64;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), v103);
  v10 = v79;
  v67 = *(_QWORD *)v103;
  *(_QWORD *)v103 = 0;
  if (v67)
  {
    v68 = *(std::__shared_weak_count **)(v67 + 32);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = *(std::__shared_weak_count **)(v67 + 16);
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    MEMORY[0x212BC6398](v67, 0x10F0C40B62ED6C6);
  }
LABEL_110:
  if (v10)
  {
    v74 = (const char *)__dst;
    if (v83 < 0)
      v74 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v96, "%s", v74);
    sub_20E863570((uint64_t)v96);
  }
  sub_20E863570((uint64_t)v96);
  v75 = v102;
  if (v102)
  {
    v76 = (unint64_t *)&v102->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v83) < 0)
    operator delete(__dst[0]);
  v84[0] = *(void **)MEMORY[0x24BEDB7F0];
  v78 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)v84 + *((_QWORD *)v84[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  __p[0] = v78;
  __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v91 < 0)
    operator delete(v90);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v94);
}

void sub_20E934054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a60);
  v69 = (std::__shared_weak_count *)a68;
  if (a68)
  {
    v70 = (unint64_t *)(a68 + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (a20 < 0)
    operator delete(__p);
  a21 = *MEMORY[0x24BEDB7F0];
  v72 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a21 + *(_QWORD *)(a21 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a23 = v72;
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(a32);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a40);
  _Unwind_Resume(a1);
}

void sub_20E9342E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20E9342F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, _QWORD *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char *a57)
{
  char *v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;

  v60 = a57;
  if (a57 == v57)
  {
    v61 = 4;
    v60 = &a54;
  }
  else
  {
    if (!a57)
      goto LABEL_6;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_6:
  v62 = __p;
  if (__p)
  {
    do
    {
      v63 = (_QWORD *)*v62;
      operator delete(v62);
      v62 = v63;
    }
    while (v63);
  }
  if (a18)
    operator delete(a18);
  v64 = *(_QWORD **)(v58 - 192);
  if (v64)
  {
    do
    {
      v65 = (_QWORD *)*v64;
      operator delete(v64);
      v64 = v65;
    }
    while (v65);
  }
  v66 = *(void **)(v58 - 208);
  *(_QWORD *)(v58 - 208) = 0;
  if (v66)
  {
    operator delete(v66);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9343AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_5"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E934418()
{
  return &unk_24C9B0F40;
}

_QWORD *sub_20E934424(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &off_24C9B0ED0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[1];
  a1[1] = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_20E934478(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &off_24C9B0ED0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[1];
  a1[1] = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x212BC6398);
}

_OWORD *sub_20E9344DC(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x48uLL);
  *(_QWORD *)v3 = &off_24C9B0ED0;
  sub_20E935228((uint64_t)v3 + 8, v2);
  v3[3] = *(_OWORD *)(a1 + 48);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(a1 + 64);
  return v3;
}

void sub_20E934538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20E93454C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_24C9B0ED0;
  sub_20E935228((uint64_t)&a2->n128_i64[1], (uint64_t)&a1->n128_i64[1]);
  result = a1[3];
  a2[4].n128_u64[0] = a1[4].n128_u64[0];
  a2[3] = result;
  return result;
}

void sub_20E934594(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
}

void sub_20E9345E0(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)__p[3];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[1];
  __p[1] = 0;
  if (v4)
    operator delete(v4);
  operator delete(__p);
}

void sub_20E934628(uint64_t a1)
{
  uint64_t *i;
  float64x2_t v3;
  float64x2_t v4;
  uint64_t v5;
  __int128 v6;
  int8x16_t v7;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  _OWORD *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _BYTE __p[24];
  void *key;
  std::__shared_weak_count *v55;
  __int128 v56;
  float64x2_t v57;
  uint64_t v58;
  _OWORD v59[3];
  int8x16_t v60;
  int8x16_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)&v59[0] + 1) = 0;
  *(_QWORD *)&v59[1] = 0;
  *(_QWORD *)&v59[0] = (char *)v59 + 8;
  sub_20EA65D20(v59, &v64);
  v63 = v64;
  sub_20E866BE0((uint64_t)v59, *((char **)&v59[0] + 1));
  *(_QWORD *)&v59[1] = 0;
  v59[0] = (unint64_t)v59 + 8;
  sub_20EA65D20(v59, &v64);
  v62 = v64;
  sub_20E866BE0((uint64_t)v59, *((char **)&v59[0] + 1));
  for (i = *(uint64_t **)(a1 + 24); i; i = (uint64_t *)*i)
  {
    v61.i64[0] = 0;
    v3.f64[1] = 0.0;
    v60 = 0u;
    memset(v59, 0, sizeof(v59));
    v57 = 0uLL;
    v58 = 0;
    if (i + 4 == (uint64_t *)v59)
    {
      v4 = (float64x2_t)v59[0];
      v12 = v60.i64[0];
      v13 = *(_QWORD *)&v59[2];
      *(_QWORD *)&v3.f64[0] = v62;
      v11.i64[0] = *((_QWORD *)&v59[2] + 1);
      v10.f64[0] = *(float64_t *)&v59[1];
      _D3 = vextq_s8(v61, v61, 8uLL).u64[0];
      *(_QWORD *)&v9.f64[0] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u64[0];
      *(_OWORD *)((char *)&v59[1] + 8) = v59[2];
      *((_QWORD *)&v59[2] + 1) = v60.i64[0];
      v60 = v61;
      v61.i64[0] = v62;
    }
    else
    {
      v4 = *((float64x2_t *)i + 2);
      v5 = i[10];
      v6 = *((_OWORD *)i + 4);
      *(_QWORD *)&v3.f64[0] = i[14];
      v7 = *((int8x16_t *)i + 6);
      *(_QWORD *)&v59[1] = i[6];
      v59[0] = v4;
      *(_OWORD *)((char *)&v59[1] + 8) = v6;
      *((_QWORD *)&v59[2] + 1) = v5;
      v60 = v7;
      v61.i64[0] = *(_QWORD *)&v3.f64[0];
      _D3 = vextq_s8(v7, v7, 8uLL).u64[0];
      *(_QWORD *)&v9.f64[0] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u64[0];
      v10 = (float64x2_t)v59[1];
      v11 = (int8x16_t)v59[2];
      v12 = vextq_s8(v11, v11, 8uLL).u64[0];
      v13 = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    }
    v14 = *((double *)i + 18);
    *(_QWORD *)&v4.f64[1] = v13;
    _Q16 = *((float64x2_t *)i + 8);
    *(_QWORD *)&v9.f64[1] = v11.i64[0];
    *(_QWORD *)&v10.f64[1] = v12;
    __asm { FMLA            D1, D3, V16.D[1] }
    v3.f64[0] = _D1 + v3.f64[0] * v14;
    v57 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v4, _Q16.f64[0]), v9, _Q16, 1), v10, v14));
    v58 = *(_OWORD *)&vnegq_f64(v3);
    *((_QWORD *)&v64 + 1) = 0;
    *(_QWORD *)&v65 = 0;
    *(_QWORD *)&v64 = (char *)&v64 + 8;
    sub_20EA65D20(&v64, __p);
    v56 = *(_OWORD *)__p;
    sub_20E866BE0((uint64_t)&v64, *((char **)&v64 + 1));
    sub_20E930DF0((uint64_t)&v56, CFSTR("UpdatedAnchorRotation"), (uint64_t)v59);
    sub_20E930F68((uint64_t)&v56, CFSTR("UpdatedAnchorTranslation"), (uint64_t)&v57);
    sub_2102323F4((unsigned __int8 *)i + 16, &v64);
    v21 = operator new(0x28uLL);
    *(_QWORD *)__p = v21;
    *(_OWORD *)&__p[8] = xmmword_2102E0950;
    v22 = v65;
    *v21 = v64;
    v21[1] = v22;
    *((_DWORD *)v21 + 8) = v66;
    *((_BYTE *)v21 + 36) = 0;
    sub_20EA5E4B8((uint64_t)__p, (CFStringRef *)&key);
    *(_QWORD *)&v64 = v56;
    sub_20E934D64((uint64_t)&v62, key, (CFTypeRef *)&v64);
    v23 = v55;
    if (!v55)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_12:
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
        if (*((_QWORD *)&v56 + 1))
          goto LABEL_16;
        continue;
      }
    }
    else
    {
LABEL_11:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_12;
    }
    operator delete(*(void **)__p);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
LABEL_16:
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  sub_20E934F24((uint64_t)&v63, CFSTR("UpdatedAnchors"), (void **)&v62);
  v29 = v63;
  if (*((_QWORD *)&v63 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_20E9350E4(v59, (CFTypeRef)v29);
  v38 = v59[0];
  if (*((_QWORD *)&v59[0] + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v59[0] + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v59[0] + 1);
    if (*((_QWORD *)&v59[0] + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v59[0] + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    do
      v44 = __ldxr(v39);
    while (__stxr(v44 + 1, v39));
    v59[0] = v38;
    do
      v45 = __ldxr(v39);
    while (__stxr(v45 + 1, v39));
    do
      v46 = __ldaxr(v39);
    while (__stlxr(v46 - 1, v39));
    if (!v46)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 16))(*((_QWORD *)&v38 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
    }
    do
      v47 = __ldaxr(v39);
    while (__stlxr(v47 - 1, v39));
    if (!v47)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 16))(*((_QWORD *)&v38 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
    }
  }
  else
  {
    v59[0] = *(unint64_t *)&v59[0];
  }
  sub_20E912AF8((uint64_t)v59, CFSTR("AnchorsUpdatedTimestamp"), (void *)(a1 + 48));
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v59[0] + 1);
  if (*((_QWORD *)&v59[0] + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v59[0] + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 64), 1, v29);
  if (*((_QWORD *)&v29 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v29 + 1) + 16))(*((_QWORD *)&v29 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v29 + 1));
    }
  }
}

void sub_20E934B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  uint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;

  if (!a2)
    _Unwind_Resume(exception_object);
  v29 = *(std::__shared_weak_count **)(v27 - 136);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(std::__shared_weak_count **)(v27 - 120);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_20E860DA4(exception_object);
}

uint64_t sub_20E934CEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_5clEdRKNSt3__113unordered_mapINS1_3esn6random4UUIDEN3cva15SE3Gr"
                     "oupStorageIdNSH_6MatrixIdLj4ELj4ELb1EEEEENSC_4hashISG_EENSC_8equal_toISG_EENSC_9allocatorINSC_4pair"
                     "IKSG_SL_EEEEEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_5clEdRKNSt3__113unordered_mapINS1_3esn6ra"
                                "ndom4UUIDEN3cva15SE3GroupStorageIdNSH_6MatrixIdLj4ELj4ELb1EEEEENSC_4hashISG_EENSC_8equal"
                                "_toISG_EENSC_9allocatorINSC_4pairIKSG_SL_EEEEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_5clEdRKNSt3__113unordered_mapINS1_3esn6random4UUIDEN3cva15SE3GroupStorageIdNSH_6MatrixIdLj4ELj4ELb1EEEEENSC_4hashISG_EENSC_8equal_toISG_EENSC_9allocatorINSC_4pairIKSG_SL_EEEEEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_5clEdRKNSt3__113unordered_mapINS1_3esn6random4UUIDEN3cva15SE3GroupStorageIdNSH_6MatrixIdLj4ELj4ELb1EEEEENSC_4hashISG_EENSC_8equal_toISG_EENSC_9allocatorINSC_4pairIKSG_SL_EEEEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E934D58()
{
  return &unk_24C9B0F30;
}

BOOL sub_20E934D64(uint64_t a1, void *key, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *value;
  std::__shared_weak_count *v25;
  void *v26;
  std::__shared_weak_count *v27;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_20E9350E4(&v26, *a3);
  v13 = v26;
  value = v26;
  v25 = v27;
  if (v27)
  {
    v14 = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = v27;
    if (v27)
    {
      v17 = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v13 = value;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v11 = v13 != 0;
  if (v13)
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v11;
}

void sub_20E934F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E934F24(uint64_t a1, void *key, void **a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *value;
  std::__shared_weak_count *v25;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  v14 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    value = v14;
    v25 = v13;
    do
      v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    value = v14;
    v25 = 0;
  }
  v11 = v14 != 0;
  if (v14)
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v11;
}

void sub_20E9350D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9350E4(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B1848;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E935144(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E93515C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E935174(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E935198(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E9351B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E935228(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    sub_20E935368(a1, (uint64_t)(i + 2), (_OWORD *)i + 1);
  return a1;
}

void sub_20E935340(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20E935354(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E935368(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v7 = sub_2102322B4((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v12 = operator new(0xA0uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = a3[7];
  *((_OWORD *)v12 + 7) = a3[6];
  *((_OWORD *)v12 + 8) = v17;
  *((_OWORD *)v12 + 9) = a3[8];
  v18 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v18;
  v19 = a3[3];
  *((_OWORD *)v12 + 3) = a3[2];
  *((_OWORD *)v12 + 4) = v19;
  v20 = a3[5];
  *((_OWORD *)v12 + 5) = a3[4];
  *((_OWORD *)v12 + 6) = v20;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v24)
    {
LABEL_34:
      *v12 = *v24;
LABEL_69:
      *v24 = v12;
      goto LABEL_70;
    }
  }
  else
  {
    v25 = 1;
    if (v9 >= 3)
      v25 = (v9 & (v9 - 1)) != 0;
    v26 = v25 | (2 * v9);
    v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_45;
    if (prime < v9)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < v9)
LABEL_45:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v24)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v24)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v32 & v8;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v24)
        goto LABEL_34;
    }
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20E9356A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E9356BC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9356D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B0F60;
  result[1] = v3;
  return result;
}

uint64_t sub_20E935704(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B0F60;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20E935720(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *result;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  size_t v11;
  void **v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  size_t v36;
  size_t v37;
  _BYTE *v38;
  void *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  char *v48;
  char *shared_owners;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  const char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  const char *v72;
  int v73;
  _QWORD v74[3];
  int v75;
  const char *v76;
  int v77;
  const char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  void *__dst[2];
  int64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t v85;
  _QWORD *v86;
  const void *v87;
  uint64_t v88;
  const void *v89;
  unint64_t v90;
  void *__p;
  char v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  _BYTE v96[24];
  unint64_t v97;
  char v98;
  void *v99[2];
  unint64_t v100;
  char v101;
  _QWORD v102[5];

  v102[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 8);
  v3 = v2[1658];
  if (!v3)
  {
    sub_20E930080(&v83);
    result = (_QWORD *)v83;
    if (**(int **)(v83 + 56) > 5)
      return result;
    v8 = *(unsigned __int8 *)(v83 + 72);
    result = (_QWORD *)sub_20E8C31DC(v83, "OSLogSurrogateAppender", 1, 0);
    v9 = result;
    if (!v8 && result == 0)
      return result;
    sub_20E863438((uint64_t)v84);
    sub_20E86A980(&v85, (uint64_t)"Error Significant event callback has not been set", 49);
    v73 = v8;
    if ((v94 & 0x10) != 0)
    {
      v13 = v93;
      if (v93 < v90)
      {
        v93 = v90;
        v13 = v90;
      }
      v14 = v89;
      v11 = v13 - (_QWORD)v89;
      if (v13 - (unint64_t)v89 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_71;
    }
    else
    {
      if ((v94 & 8) == 0)
      {
        v11 = 0;
        HIBYTE(v82) = 0;
        v12 = __dst;
        goto LABEL_26;
      }
      v14 = v87;
      v11 = v88 - (_QWORD)v87;
      if ((unint64_t)(v88 - (_QWORD)v87) > 0x7FFFFFFFFFFFFFF7)
LABEL_71:
        sub_20E860B7C();
    }
    if (v11 >= 0x17)
    {
      v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v15 = v11 | 7;
      v16 = v15 + 1;
      v12 = (void **)operator new(v15 + 1);
      __dst[1] = (void *)v11;
      v82 = v16 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v82) = v11;
      v12 = __dst;
      if (!v11)
      {
LABEL_26:
        *((_BYTE *)v12 + v11) = 0;
        v74[0] = &v83;
        v74[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v74[2] = std::chrono::system_clock::now().__d_.__rep_;
        v75 = 5;
        v76 = "unknown file";
        v77 = 609;
        v79 = 0;
        v80 = 0;
        v78 = "unknown function";
        if (v82 >= 0)
          v17 = (const char *)__dst;
        else
          v17 = (const char *)__dst[0];
        v18 = *(_QWORD *)v74[0];
        v19 = (const char *)(*(_QWORD *)v74[0] + 16);
        v72 = v19;
        if (*(char *)(*(_QWORD *)v74[0] + 39) < 0)
        {
          v19 = *(const char **)(v18 + 16);
          v20 = *(_QWORD *)(v18 + 24);
          v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v22 & 1) != 0)
            goto LABEL_33;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)v74[0] + 39);
          v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v21 & 1) != 0)
            goto LABEL_33;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v96);
          if ((_BYTE)v97)
          {
            *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v96;
            *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v96[16];
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_33:
        if (byte_254A4A4F8[23] >= 0)
          v23 = byte_254A4A4F8;
        else
          v23 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v24 = byte_254A4A4F8[23];
        else
          v24 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v96 = os_log_create(v23, v19);
        v25 = &v96[8];
        if (v24 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v24 >= 0x17)
        {
          v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v26 = v24 | 7;
          v27 = v26 + 1;
          v25 = operator new(v26 + 1);
          *(_QWORD *)&v96[16] = v24;
          v97 = v27 | 0x8000000000000000;
          *(_QWORD *)&v96[8] = v25;
        }
        else
        {
          HIBYTE(v97) = v24;
          if (!v24)
          {
LABEL_47:
            v25[v24] = 0;
            v98 = 1;
            v28 = v99;
            if (v20 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v20 >= 0x17)
            {
              v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17)
                v29 = v20 | 7;
              v30 = v29 + 1;
              v28 = (void **)operator new(v29 + 1);
              v99[1] = (void *)v20;
              v100 = v30 | 0x8000000000000000;
              v99[0] = v28;
            }
            else
            {
              HIBYTE(v100) = v20;
              if (!v20)
              {
LABEL_55:
                *((_BYTE *)v28 + v20) = 0;
                v101 = 1;
                v31 = *(NSObject **)v96;
                if (SHIBYTE(v100) < 0)
                  operator delete(v99[0]);
                if (v98 && SHIBYTE(v97) < 0)
                  operator delete(*(void **)&v96[8]);
                if (*(_QWORD *)v96)
                  os_release(*(void **)v96);
                if (!v9 || !v9[3])
                {
                  os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v96 = 136315138;
                  *(_QWORD *)&v96[4] = v17;
                  v39 = (void *)_os_log_send_and_compose_impl();
                  v40 = v73;
                  if (v39)
                    free(v39);
                  goto LABEL_101;
                }
                v32 = _os_log_pack_size();
                v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
                v34 = (std::__shared_weak_count *)operator new();
                v34->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v34->__shared_owners_;
                v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v34->__shared_weak_owners_ = 0;
                v34[1].__vftable = v33;
                v70 = v33;
                v36 = strlen(v17);
                v71 = v34;
                if (v36 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v37 = v36;
                if (v36 >= 0x17)
                {
                  v41 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v36 | 7) != 0x17)
                    v41 = v36 | 7;
                  v42 = v41 + 1;
                  v38 = operator new(v41 + 1);
                  *(_QWORD *)&v96[8] = v37;
                  *(_QWORD *)&v96[16] = v42 | 0x8000000000000000;
                  *(_QWORD *)v96 = v38;
                }
                else
                {
                  v96[23] = v36;
                  v38 = v96;
                  if (!v36)
                  {
LABEL_76:
                    v38[v37] = 0;
                    v102[0] = *(_QWORD *)&v96[8];
                    v43 = *(_QWORD *)v96;
                    *(_QWORD *)((char *)v102 + 7) = *(_QWORD *)&v96[15];
                    v44 = v96[23];
                    v45 = operator new(0x38uLL);
                    v46 = (std::__shared_weak_count *)v45;
                    v45[1] = 0;
                    v47 = v45 + 1;
                    v45[3] = off_24C9ABC20;
                    v48 = (char *)(v45 + 3);
                    v45[2] = 0;
                    v45[4] = v43;
                    shared_owners = (char *)(v45 + 4);
                    *v45 = &off_24C9ABBD0;
                    v45[5] = v102[0];
                    *(_QWORD *)((char *)v45 + 47) = *(_QWORD *)((char *)v102 + 7);
                    *((_BYTE *)v45 + 55) = v44;
                    do
                      v50 = __ldxr(p_shared_owners);
                    while (__stxr(v50 + 1, p_shared_owners));
                    do
                      v51 = __ldxr(v47);
                    while (__stxr(v51 + 1, v47));
                    do
                      v52 = __ldaxr(v47);
                    while (__stlxr(v52 - 1, v47));
                    if (!v52)
                    {
                      (*(void (**)(_QWORD *))(*v45 + 16))(v45);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                    do
                      v53 = __ldaxr(p_shared_owners);
                    while (__stlxr(v53 - 1, p_shared_owners));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                    if (SHIBYTE(v46[2].__vftable) < 0)
                      shared_owners = (char *)v46[1].__shared_owners_;
                    v54 = _os_log_pack_fill();
                    *(_DWORD *)v54 = 136315138;
                    *(_QWORD *)(v54 + 4) = shared_owners;
                    v55 = operator new();
                    v56 = *(unsigned __int8 *)(v18 + 39);
                    v57 = v72;
                    if ((v56 & 0x80u) != 0)
                    {
                      v57 = *(const char **)(v18 + 16);
                      v56 = *(_QWORD *)(v18 + 24);
                    }
                    *(_QWORD *)v55 = v70;
                    *(_QWORD *)(v55 + 8) = v70;
                    *(_QWORD *)(v55 + 16) = v71;
                    *(_QWORD *)(v55 + 24) = v48;
                    *(_QWORD *)(v55 + 32) = v46;
                    *(_QWORD *)(v55 + 40) = v57;
                    *(_QWORD *)(v55 + 48) = v56;
                    *(_BYTE *)(v55 + 56) = 16;
                    *(_QWORD *)v96 = v55;
                    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)v9[3] + 40))(v9[3], v96);
                    v58 = *(_QWORD *)v96;
                    *(_QWORD *)v96 = 0;
                    v40 = v73;
                    if (v58)
                    {
                      v59 = *(std::__shared_weak_count **)(v58 + 32);
                      if (v59)
                      {
                        v60 = (unint64_t *)&v59->__shared_owners_;
                        do
                          v61 = __ldaxr(v60);
                        while (__stlxr(v61 - 1, v60));
                        if (!v61)
                        {
                          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                          std::__shared_weak_count::__release_weak(v59);
                        }
                      }
                      v62 = *(std::__shared_weak_count **)(v58 + 16);
                      if (v62)
                      {
                        v63 = (unint64_t *)&v62->__shared_owners_;
                        do
                          v64 = __ldaxr(v63);
                        while (__stlxr(v64 - 1, v63));
                        if (!v64)
                        {
                          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                          std::__shared_weak_count::__release_weak(v62);
                        }
                      }
                      MEMORY[0x212BC6398](v58, 0x10F0C40B62ED6C6);
                    }
LABEL_101:
                    if (v40)
                    {
                      v65 = (const char *)__dst;
                      if (v82 < 0)
                        v65 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v74, "%s", v65);
                      sub_20E863570((uint64_t)v74);
                    }
                    sub_20E863570((uint64_t)v74);
                    v66 = v80;
                    if (v80)
                    {
                      v67 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v68 = __ldaxr(v67);
                      while (__stlxr(v68 - 1, v67));
                      if (!v68)
                      {
                        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                        std::__shared_weak_count::__release_weak(v66);
                      }
                    }
                    if (SHIBYTE(v82) < 0)
                      operator delete(__dst[0]);
                    v84[0] = *MEMORY[0x24BEDB7F0];
                    v69 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v84 + *(_QWORD *)(v84[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v85 = v69;
                    v86 = (_QWORD *)(MEMORY[0x24BEDB848] + 16);
                    if (v92 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    return (_QWORD *)MEMORY[0x212BC6290](&v95);
                  }
                }
                memcpy(v38, v17, v37);
                goto LABEL_76;
              }
            }
            memmove(v28, v19, v20);
            goto LABEL_55;
          }
        }
        memmove(v25, v23, v24);
        goto LABEL_47;
      }
    }
    memmove(v12, v14, v11);
    goto LABEL_26;
  }
  v4 = v2[1659];
  *(_OWORD *)v96 = *(_OWORD *)a2;
  *(_QWORD *)&v96[13] = *(_QWORD *)(a2 + 13);
  v5 = (char *)operator new(0x30uLL);
  *(_QWORD *)v5 = &off_24C9B0FE0;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v96;
  *((_QWORD *)v5 + 3) = *(_QWORD *)&v96[16];
  *((_QWORD *)v5 + 4) = v3;
  *((_QWORD *)v5 + 5) = v4;
  v86 = v5;
  (*(void (**)(_QWORD *, _QWORD *))(v2[2] + 40))(v2 + 2, v84);
  result = v86;
  if (v86 == v84)
  {
    v7 = 4;
    result = v84;
  }
  else
  {
    if (!v86)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20E936060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a17);
  v53 = a25;
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (a31 < 0)
    operator delete(__p);
  a33 = *MEMORY[0x24BEDB7F0];
  v56 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a33 + *(_QWORD *)(a33 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a35 = v56;
  a36 = MEMORY[0x24BEDB848] + 16;
  if (a49 < 0)
    operator delete(a44);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a52);
  _Unwind_Resume(a1);
}

void sub_20E9362F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20E936310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  if (a33 == v33)
  {
    (*(void (**)(void))(a30 + 32))();
    _Unwind_Resume(a1);
  }
  if (a33)
  {
    (*(void (**)(void))(*(_QWORD *)a33 + 40))();
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20E936308);
}

uint64_t sub_20E936358(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9363C4()
{
  return &unk_24C9B1050;
}

void sub_20E9363D4()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9363E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C9B0FE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20E936430(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9B0FE0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E936460(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;
  char **v6;
  char *v7[2];
  __int128 v8;

  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  sub_20EA65D20(&v6, &v8);
  v5 = v8;
  sub_20E866BE0((uint64_t)&v6, v7[0]);
  sub_20E912AF8((uint64_t)&v5, CFSTR("RelocalizationTimestamp"), (void *)(a1 + 8));
  sub_20E8E223C((uint64_t)&v5, CFSTR("RelocalizationIsGlobal"), (_BYTE *)(a1 + 16));
  sub_20E8E223C((uint64_t)&v5, CFSTR("RelocalizationSucceeded"), (_BYTE *)(a1 + 17));
  sub_20E912C70((uint64_t)&v5, CFSTR("VIOMapSize"), (int *)(a1 + 20));
  sub_20E912C70((uint64_t)&v5, CFSTR("VIOMLMapSize"), (int *)(a1 + 24));
  sub_20E8E223C((uint64_t)&v5, CFSTR("RelocalizationIsWithML"), (_BYTE *)(a1 + 28));
  LOBYTE(v6) = 1;
  sub_20E8E223C((uint64_t)&v5, CFSTR("PoseGraphOptimSucceeded"), &v6);
  LOBYTE(v6) = 1;
  sub_20E8E223C((uint64_t)&v5, CFSTR("PoseGraphOptimConverged"), &v6);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), 0, v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20E9365D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  sub_20E860DA4(a1);
}

uint64_t sub_20E9365F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_4clENS6_8metadata32VIOEngineNodeRelocalizationEventEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_4clENS6_8metadata32VIOEngineNodeRelocaliz"
                                "ationEventEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_4clENS6_8metadata32VIOEngineNodeRelocalizationEventEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_4clENS6_8metadata32VIOEngineNodeRelocalizationEventEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E936660()
{
  return &unk_24C9B1040;
}

void sub_20E936670()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E936684(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B1070;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9366B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B1070;
  a2[1] = v2;
  return result;
}

void sub_20E9366D4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void **v13;
  char *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  size_t v19;
  void **p_dst;
  unint64_t v21;
  std::__shared_weak_count *v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  size_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  const char *v48;
  size_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  size_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  size_t v61;
  size_t v62;
  _BYTE *v63;
  void *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  char *v73;
  char *shared_owners;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  const char *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  const char *v97;
  int v98;
  void **__dst;
  std::__shared_weak_count *v100;
  int64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  char *v106;
  char *v107;
  char *v108;
  const void *v109;
  unint64_t v110;
  void *__p;
  char v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  _QWORD *v118;
  const char *v119;
  int v120;
  const char *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  _BYTE v124[24];
  unint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  char *v128;
  unint64_t v129;
  char v130;
  _QWORD v131[5];

  v131[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 13280);
  if (v5)
  {
    v8 = *a2;
    v9 = *(_QWORD *)(v4 + 13288);
    sub_20EA5EE78(*(const UInt8 **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3, &__dst);
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v124 = v5;
    *(_QWORD *)&v124[8] = v9;
    *(_DWORD *)&v124[16] = v8;
    sub_20E90EE08(&v125, (uint64_t)&__dst);
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v11 = *(const void **)a4;
    v12 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v12)
    {
      if ((v12 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v13 = (void **)operator new(v12);
      v127 = v13;
      v128 = (char *)v13;
      v14 = (char *)v13 + v12;
      v129 = (unint64_t)v13 + v12;
      memcpy(v13, v11, v12);
      v128 = (char *)v13 + v12;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v102 = *(_OWORD *)v124;
    LODWORD(v103) = *(_DWORD *)&v124[16];
    v21 = v125;
    v22 = v126;
    v104 = v125;
    v105 = v126;
    v125 = 0;
    v126 = 0;
    v107 = 0;
    v108 = 0;
    v106 = 0;
    v23 = v14 - (char *)v13;
    if (v14 == (char *)v13)
    {
      v25 = 0;
      v24 = 0;
    }
    else
    {
      if ((v23 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v24 = (char *)operator new(v14 - (char *)v13);
      v25 = &v24[v23];
      v106 = v24;
      v108 = &v24[v23];
      memcpy(v24, v13, v23);
      v107 = &v24[v23];
    }
    v118 = 0;
    v26 = (char *)operator new(0x48uLL);
    *(_QWORD *)v26 = &off_24C9B10E0;
    *(_OWORD *)(v26 + 8) = *(_OWORD *)v124;
    *((_DWORD *)v26 + 6) = *(_DWORD *)&v124[16];
    *((_QWORD *)v26 + 4) = v21;
    *((_QWORD *)v26 + 5) = v22;
    v104 = 0;
    v105 = 0;
    *((_QWORD *)v26 + 6) = 0;
    *((_QWORD *)v26 + 7) = 0;
    *((_QWORD *)v26 + 8) = 0;
    v27 = v25 - v24;
    if (v25 != v24)
    {
      if (v27 < 0)
        sub_20E867F44();
      v28 = (char *)operator new(v25 - v24);
      *((_QWORD *)v26 + 6) = v28;
      v29 = &v28[v27];
      *((_QWORD *)v26 + 8) = &v28[v27];
      memcpy(v28, v24, v25 - v24);
      *((_QWORD *)v26 + 7) = v29;
    }
    v118 = v26;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v10 + 16) + 40))(v10 + 16, v117);
    v30 = v118;
    if (v118 == v117)
    {
      v31 = 4;
      v30 = v117;
    }
    else
    {
      if (!v118)
      {
LABEL_26:
        if (v24)
          operator delete(v24);
        if (v127)
        {
          v128 = (char *)v127;
          operator delete(v127);
        }
        v32 = v126;
        if (v126)
        {
          p_shared_owners = (unint64_t *)&v126->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = v100;
        if (v100)
        {
          v36 = (unint64_t *)&v100->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        return;
      }
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
    goto LABEL_26;
  }
  sub_20E930080(&v116);
  if (**(int **)(v116 + 56) > 5)
    return;
  v15 = *(unsigned __int8 *)(v116 + 72);
  v16 = sub_20E8C31DC(v116, "OSLogSurrogateAppender", 1, 0);
  v17 = v16;
  if (!v15 && v16 == 0)
    return;
  sub_20E863438((uint64_t)&v102);
  sub_20E86A980(&v103, (uint64_t)"Error Collaborative Mapping callback has not been set", 53);
  v98 = v15;
  if ((v114 & 0x10) != 0)
  {
    v38 = v113;
    if (v113 < v110)
    {
      v113 = v110;
      v38 = v110;
    }
    v39 = v109;
    v19 = v38 - (_QWORD)v109;
    if (v38 - (unint64_t)v109 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_96;
  }
  else
  {
    if ((v114 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(v101) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_51;
    }
    v39 = v106;
    v19 = v108 - v106;
    if ((unint64_t)(v108 - v106) > 0x7FFFFFFFFFFFFFF7)
LABEL_96:
      sub_20E860B7C();
  }
  if (v19 >= 0x17)
  {
    v40 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v40 = v19 | 7;
    v41 = v40 + 1;
    p_dst = (void **)operator new(v40 + 1);
    v100 = (std::__shared_weak_count *)v19;
    v101 = v41 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v101) = v19;
  p_dst = (void **)&__dst;
  if (v19)
LABEL_50:
    memmove(p_dst, v39, v19);
LABEL_51:
  *((_BYTE *)p_dst + v19) = 0;
  v117[0] = &v116;
  v117[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v117[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v118) = 5;
  v119 = "unknown file";
  v120 = 647;
  v122 = 0;
  v123 = 0;
  v121 = "unknown function";
  if (v101 >= 0)
    v42 = (const char *)&__dst;
  else
    v42 = (const char *)__dst;
  v43 = *(_QWORD *)v117[0];
  v44 = (const char *)(*(_QWORD *)v117[0] + 16);
  v97 = v44;
  if (*(char *)(*(_QWORD *)v117[0] + 39) < 0)
  {
    v44 = *(const char **)(v43 + 16);
    v45 = *(_QWORD *)(v43 + 24);
    v47 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v47 & 1) != 0)
      goto LABEL_58;
  }
  else
  {
    v45 = *(unsigned __int8 *)(*(_QWORD *)v117[0] + 39);
    v46 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v46 & 1) != 0)
      goto LABEL_58;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v124);
    if ((_BYTE)v125)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v124;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v124[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_58:
  if (byte_254A4A4F8[23] >= 0)
    v48 = byte_254A4A4F8;
  else
    v48 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v49 = byte_254A4A4F8[23];
  else
    v49 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v124 = os_log_create(v48, v44);
  v50 = &v124[8];
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v49 >= 0x17)
  {
    v51 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v51 = v49 | 7;
    v52 = v51 + 1;
    v50 = operator new(v51 + 1);
    *(_QWORD *)&v124[16] = v49;
    v125 = v52 | 0x8000000000000000;
    *(_QWORD *)&v124[8] = v50;
    goto LABEL_71;
  }
  HIBYTE(v125) = v49;
  if (v49)
LABEL_71:
    memmove(v50, v48, v49);
  v50[v49] = 0;
  LOBYTE(v126) = 1;
  v53 = (void **)&v127;
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v45 >= 0x17)
  {
    v54 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v54 = v45 | 7;
    v55 = v54 + 1;
    v53 = (void **)operator new(v54 + 1);
    v128 = (char *)v45;
    v129 = v55 | 0x8000000000000000;
    v127 = v53;
    goto LABEL_79;
  }
  HIBYTE(v129) = v45;
  if (v45)
LABEL_79:
    memmove(v53, v44, v45);
  *((_BYTE *)v53 + v45) = 0;
  v130 = 1;
  v56 = *(NSObject **)v124;
  if (SHIBYTE(v129) < 0)
    operator delete(v127);
  if ((_BYTE)v126 && SHIBYTE(v125) < 0)
    operator delete(*(void **)&v124[8]);
  if (*(_QWORD *)v124)
    os_release(*(void **)v124);
  if (!v17 || !*(_QWORD *)(v17 + 24))
  {
    os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v124 = 136315138;
    *(_QWORD *)&v124[4] = v42;
    v64 = (void *)_os_log_send_and_compose_impl();
    v65 = v98;
    if (v64)
      free(v64);
    goto LABEL_126;
  }
  v57 = _os_log_pack_size();
  v58 = (std::__shared_weak_count_vtbl *)operator new(v57, (std::align_val_t)8uLL);
  v59 = (std::__shared_weak_count *)operator new();
  v59->__shared_owners_ = 0;
  v60 = (unint64_t *)&v59->__shared_owners_;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v59->__shared_weak_owners_ = 0;
  v59[1].__vftable = v58;
  v95 = v58;
  v61 = strlen(v42);
  v96 = v59;
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v66 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v66 = v61 | 7;
    v67 = v66 + 1;
    v63 = operator new(v66 + 1);
    *(_QWORD *)&v124[8] = v62;
    *(_QWORD *)&v124[16] = v67 | 0x8000000000000000;
    *(_QWORD *)v124 = v63;
    goto LABEL_100;
  }
  v124[23] = v61;
  v63 = v124;
  if (v61)
LABEL_100:
    memcpy(v63, v42, v62);
  v63[v62] = 0;
  v68 = *(_QWORD *)v124;
  v131[0] = *(_QWORD *)&v124[8];
  *(_QWORD *)((char *)v131 + 7) = *(_QWORD *)&v124[15];
  v69 = v124[23];
  v70 = operator new(0x38uLL);
  v71 = (std::__shared_weak_count *)v70;
  v70[1] = 0;
  v72 = v70 + 1;
  v70[3] = off_24C9ABC20;
  v73 = (char *)(v70 + 3);
  v70[2] = 0;
  v70[4] = v68;
  shared_owners = (char *)(v70 + 4);
  *v70 = &off_24C9ABBD0;
  v70[5] = v131[0];
  *(_QWORD *)((char *)v70 + 47) = *(_QWORD *)((char *)v131 + 7);
  *((_BYTE *)v70 + 55) = v69;
  do
    v75 = __ldxr(v60);
  while (__stxr(v75 + 1, v60));
  do
    v76 = __ldxr(v72);
  while (__stxr(v76 + 1, v72));
  do
    v77 = __ldaxr(v72);
  while (__stlxr(v77 - 1, v72));
  if (!v77)
  {
    (*(void (**)(_QWORD *))(*v70 + 16))(v70);
    std::__shared_weak_count::__release_weak(v71);
  }
  do
    v78 = __ldaxr(v60);
  while (__stlxr(v78 - 1, v60));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  if (SHIBYTE(v71[2].__vftable) < 0)
    shared_owners = (char *)v71[1].__shared_owners_;
  v79 = _os_log_pack_fill();
  *(_DWORD *)v79 = 136315138;
  *(_QWORD *)(v79 + 4) = shared_owners;
  v80 = operator new();
  v81 = *(unsigned __int8 *)(v43 + 39);
  v82 = v97;
  if ((v81 & 0x80u) != 0)
  {
    v82 = *(const char **)(v43 + 16);
    v81 = *(_QWORD *)(v43 + 24);
  }
  *(_QWORD *)v80 = v95;
  *(_QWORD *)(v80 + 8) = v95;
  *(_QWORD *)(v80 + 16) = v96;
  *(_QWORD *)(v80 + 24) = v73;
  *(_QWORD *)(v80 + 32) = v71;
  *(_QWORD *)(v80 + 40) = v82;
  *(_QWORD *)(v80 + 48) = v81;
  *(_BYTE *)(v80 + 56) = 16;
  *(_QWORD *)v124 = v80;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), v124);
  v83 = *(_QWORD *)v124;
  *(_QWORD *)v124 = 0;
  v65 = v98;
  if (v83)
  {
    v84 = *(std::__shared_weak_count **)(v83 + 32);
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = *(std::__shared_weak_count **)(v83 + 16);
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
  }
LABEL_126:
  if (v65)
  {
    v90 = (const char *)&__dst;
    if (v101 < 0)
      v90 = (const char *)__dst;
    sub_20E8C003C((uint64_t)v117, "%s", v90);
    sub_20E863570((uint64_t)v117);
  }
  sub_20E863570((uint64_t)v117);
  v91 = v123;
  if (v123)
  {
    v92 = (unint64_t *)&v123->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (SHIBYTE(v101) < 0)
    operator delete(__dst);
  *(_QWORD *)&v102 = *MEMORY[0x24BEDB7F0];
  v94 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v102 + *(_QWORD *)(v102 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v103 = v94;
  v104 = MEMORY[0x24BEDB848] + 16;
  if (v112 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v115);
}

void sub_20E9371F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  uint64_t a70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a62);
  v71 = (std::__shared_weak_count *)a70;
  if (a70)
  {
    v72 = (unint64_t *)(a70 + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (a21 < 0)
    operator delete(__p);
  a22 = *MEMORY[0x24BEDB7F0];
  v74 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a22 + *(_QWORD *)(a22 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a24 = v74;
  a25 = MEMORY[0x24BEDB848] + 16;
  if (a38 < 0)
    operator delete(a33);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a41);
  _Unwind_Resume(a1);
}

void sub_20E937484(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20E937494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char *a59)
{
  void *v59;
  char *v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;

  v63 = a59;
  if (a59 == v60)
  {
    v64 = 4;
    v63 = &a56;
  }
  else
  {
    if (!a59)
    {
      if (v59)
        goto LABEL_9;
      goto LABEL_5;
    }
    v64 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
  if (v59)
  {
LABEL_9:
    operator delete(v59);
    v65 = a23;
    if (!a23)
      goto LABEL_14;
LABEL_10:
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
LABEL_14:
    v68 = *(void **)(v61 - 152);
    if (v68)
    {
      *(_QWORD *)(v61 - 144) = v68;
      operator delete(v68);
    }
    v69 = *(std::__shared_weak_count **)(v61 - 160);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (a17)
    {
      v72 = (unint64_t *)&a17->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
        std::__shared_weak_count::__release_weak(a17);
        _Unwind_Resume(a1);
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_5:
  v65 = a23;
  if (!a23)
    goto LABEL_14;
  goto LABEL_10;
}

uint64_t sub_20E93768C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11"
                     "calibration14HardwareParamsEjE3$_6")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigER"
                                "KNS1_3vio11calibration14HardwareParamsEjE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_6"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9376F8()
{
  return &unk_24C9B1150;
}

_QWORD *sub_20E937704(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_24C9B10E0;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20E937788(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_24C9B10E0;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E93780C(uint64_t a1)
{
  __int128 *v1;
  _QWORD *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = operator new(0x48uLL);
  *v2 = &off_24C9B10E0;
  sub_20E937A0C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20E93784C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E937860(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B10E0;
  return sub_20E937A0C((uint64_t)(a2 + 1), (__int128 *)(a1 + 8));
}

void sub_20E93787C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20E9378E8(_QWORD *__p)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[5];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_7:
    operator delete(__p);
  }
}

uint64_t sub_20E937960(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
    v1 = 0;
  else
    v1 = *(_QWORD *)(a1 + 48);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 32), v1);
}

uint64_t sub_20E937994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio1"
                     "1calibration14HardwareParamsEjENK3$_6clEhRKNSt3__16vectorIhNSC_9allocatorIhEEEESI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigE"
                                "RKNS1_3vio11calibration14HardwareParamsEjENK3$_6clEhRKNSt3__16vectorIhNSC_9allocatorIhEEEESI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_6clEhRKNSt3__16vectorIhNSC_9allocatorIhEEEESI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZL13VIOInitializeP14CV3DVIOContextRKN4cv3d9applecv3d32VIOEngineAndPosePredictionConfigERKNS1_3vio11calibration14HardwareParamsEjENK3$_6clEhRKNSt3__16vectorIhNSC_9allocatorIhEEEESI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E937A00()
{
  return &unk_24C9B1140;
}

uint64_t sub_20E937A0C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  char *v8;
  char *v9;

  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  sub_20E90EE08((_QWORD *)(a1 + 24), (uint64_t)a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v5 = (_BYTE *)*((_QWORD *)a2 + 6);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v8;
    v9 = &v8[v7];
    *(_QWORD *)(a1 + 56) = &v8[v7];
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_20E937A9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *(std::__shared_weak_count **)(v1 + 32);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E937AF4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(void **)(a1 + 12944);
  if (v2)
  {
    *(_QWORD *)(a1 + 12952) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 12920);
  if (v3)
  {
    *(_QWORD *)(a1 + 12928) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 12864);
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = *(_QWORD *)(a1 + 12840);
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = *(_QWORD *)(a1 + 12808);
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = *(_QWORD *)(a1 + 12784);
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = *(void **)(a1 + 12408);
  if (v8)
  {
    *(_QWORD *)(a1 + 12416) = v8;
    operator delete(v8);
  }
  sub_20E869418(a1 + 56);
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20E937BE4(_QWORD *a1)
{
  a1[52] = &unk_24C9B11C8;
  *a1 = off_24C9B11A0;
  *(a1 - 2) = &off_24C9B1178;
  MEMORY[0x212BC5B4C](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x212BC6290);
}

void sub_20E937C38(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &off_24C9B1178;
  v1[54] = &unk_24C9B11C8;
  v1[2] = off_24C9B11A0;
  MEMORY[0x212BC5B4C](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x212BC6290);
}

void sub_20E937C98(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &off_24C9B1178;
  v1 = a1 + 54;
  a1[54] = &unk_24C9B11C8;
  a1[2] = off_24C9B11A0;
  MEMORY[0x212BC5B4C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E937D08(_QWORD *a1)
{
  _QWORD *v1;

  v1 = a1 + 52;
  a1[52] = &unk_24C9B11C8;
  *a1 = off_24C9B11A0;
  *(a1 - 2) = &off_24C9B1178;
  MEMORY[0x212BC5B4C](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E937D74(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &off_24C9B1178;
  v1[54] = &unk_24C9B11C8;
  v1[2] = off_24C9B11A0;
  MEMORY[0x212BC5B4C](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v1 + 54);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E937DEC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1368;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E937E28(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1368;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E937E74(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B1368;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E937F04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E937F28(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B1368;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E937FA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E937FC4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E937FDC(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char **sub_20E93800C(uint64_t a1)
{
  uint64_t v2;
  char **result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[288];
  _BYTE v22[288];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _BYTE v45[752];
  __int128 v46;
  _BYTE v47[40];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  _BYTE v59[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[744];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD v76[2];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  bzero(&v41, 0x3B8uLL);
  *((_QWORD *)&v50 + 1) = v51;
  v52 = 0uLL;
  *(_QWORD *)&v53 = 0;
  BYTE8(v53) = 0;
  v61 = 0;
  v60 = 0;
  v63 = 0;
  v62 = 0;
  v42 = 0;
  *((_QWORD *)&v41 + 1) = 0;
  v43 = 0uLL;
  v65 = 0;
  v64 = 0;
  *(_QWORD *)v45 = 0;
  v44 = 0;
  memcpy(v66, &v45[8], sizeof(v66));
  v67 = 0;
  v69 = 0;
  v68 = 0;
  v46 = 0uLL;
  *(_QWORD *)v47 = 0;
  v70[0] = *(_OWORD *)&v47[8];
  *(_OWORD *)((char *)v70 + 12) = *(_OWORD *)&v47[20];
  v71 = 0;
  v73 = 0;
  v72 = 0;
  v48 = 0;
  v49 = 0uLL;
  v74 = 0;
  v76[1] = 0;
  v76[0] = 0;
  v75 = v76;
  v77 = 0uLL;
  v78 = v53;
  v79 = v54;
  v80 = 0;
  kdebug_trace();
  *(_QWORD *)&v41 = a1 + 16;
  *((_QWORD *)&v41 + 1) = v2;
  if (v80 == -1)
    goto LABEL_13;
  *(_QWORD *)&v6 = &v41;
  result = (char **)((uint64_t (*)(__int128 *, _BYTE *))*(&off_24C9B13C8 + v80))(&v6, v59);
  if (!(_DWORD)result)
    goto LABEL_10;
  if (v80)
LABEL_13:
    sub_20E877AB8();
  v4 = *(_QWORD *)(v2 + 120);
  bzero(&v6, 0x368uLL);
  *((_QWORD *)&v29 + 1) = 0xBFF0000000000000;
  *(_QWORD *)&v30 = 0;
  DWORD2(v30) = 0;
  v31 = -1;
  v32 = 0;
  v33 = 0uLL;
  v36 = 0uLL;
  v35 = 0;
  v34 = (unint64_t)&v34 + 8;
  BYTE4(v38) = 0;
  *(_QWORD *)&v37 = 0;
  BYTE8(v37) = 0;
  sub_20F4648A4((uint64_t)v59, (char **)&v6);
  v41 = v6;
  v42 = v7;
  v6 = 0uLL;
  v43 = v8;
  v44 = v9;
  v7 = 0;
  v8 = 0uLL;
  v9 = 0;
  *(_OWORD *)&v45[16] = v11;
  *(_OWORD *)v45 = v10;
  *(_OWORD *)&v45[80] = v15;
  *(_OWORD *)&v45[64] = v14;
  *(_OWORD *)&v45[32] = v12;
  *(_OWORD *)&v45[48] = v13;
  *(_QWORD *)&v45[160] = v20;
  *(_OWORD *)&v45[144] = v19;
  *(_OWORD *)&v45[128] = v18;
  *(_OWORD *)&v45[96] = v16;
  *(_OWORD *)&v45[112] = v17;
  memcpy(&v45[168], v21, 0x120uLL);
  memcpy(&v45[456], v22, 0x120uLL);
  *(_QWORD *)&v45[744] = v23;
  v23 = 0;
  v5 = v24;
  v24 = 0uLL;
  v46 = v5;
  *(_OWORD *)v47 = v25;
  *(_QWORD *)&v47[16] = v26;
  *(_OWORD *)&v47[24] = v27;
  v48 = v28;
  v51[0] = v31;
  v49 = v29;
  v50 = v30;
  v51[1] = v32;
  v52 = v33;
  v33 = 0uLL;
  v32 = 0;
  v53 = v34;
  v54 = v35;
  if (v35)
  {
    *(_QWORD *)(*((_QWORD *)&v34 + 1) + 16) = (char *)&v53 + 8;
    *(_QWORD *)&v34 = (char *)&v34 + 8;
    *((_QWORD *)&v34 + 1) = 0;
    v35 = 0;
  }
  else
  {
    *(_QWORD *)&v53 = (char *)&v53 + 8;
  }
  v55 = v36;
  v56 = v37;
  v57 = v38;
  v58 = 0;
  v39 = v4;
  v40 = &v39;
  sub_20EE610C8((uint64_t)&v40, &v41);
  if (v58 != -1)
    ((void (*)(uint64_t **, __int128 *))off_24C9B1408[v58])(&v40, &v41);
  v58 = -1;
  result = sub_20E9549C4((char **)&v6);
LABEL_10:
  if (v80 != -1)
    return (char **)((uint64_t (*)(__int128 *, _BYTE *))off_24C9B1448[v80])(&v41, v59);
  return result;
}

void sub_20E938404(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

uint64_t sub_20E93843C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "INS0_13mapping_types2v219VIOKeyframeCMSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplINS0_13mapping_types2v219VIOKeyframeCMSampleILj2EEENSt3__19enable_ifILb1EvEEE"
                                "EvPKhjNS5_5DummyIT_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v219VIOKeyframeCMSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v219VIOKeyframeCMSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9384A8()
{
  return &unk_24C9B1488;
}

uint64_t sub_20E9384B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  sub_20E86872C(a1 + 880, *(_QWORD **)(a1 + 888));
  v2 = *(void **)(a1 + 848);
  if (v2)
  {
    *(_QWORD *)(a1 + 856) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 792);
  if (v3)
  {
    *(_QWORD *)(a1 + 800) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(_QWORD **)a1;
    if (v6 != v5)
    {
      do
      {
        v6 -= 89;
        sub_20E9385B0(v6);
      }
      while (v6 != v5);
      v7 = *(_QWORD **)a1;
    }
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20E938550(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 89;
        sub_20E9385B0(v3);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20E9385B0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[86];
  if (v2)
  {
    a1[87] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[12];
  if (v5)
  {
    a1[13] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[8];
  if (v6)
  {
    a1[9] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[5];
  if (v7)
  {
    a1[6] = v7;
    operator delete(v7);
  }
}

uint64_t sub_20E938634(uint64_t **a1, _QWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *category, char *__s, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,uint64_t a30,void *a31,char a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v44;
  uint64_t v45;
  void *v46;
  size_t v47;
  uint64_t v48;
  uint64_t *i;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  _DWORD *v55;
  void *__p[2];
  void *v57[2];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v44 = **a1;
  v45 = (*a1)[1];
  v46 = *(void **)v44;
  v47 = *(_QWORD *)(v44 + 8) - *(_QWORD *)v44;
  __p[0] = 0;
  __p[1] = 0;
  v57[0] = 0;
  sub_20E93BD04(v46, v47, (uint64_t)a2, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v57[0]) < 0)
    operator delete(__p[0]);
  v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 120) + 280))(*(_QWORD *)(v45 + 120));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v57 = 0u;
  v58 = 1065353216;
  for (i = *(uint64_t **)(v48 + 56); i; i = (uint64_t *)*i)
  {
    v50 = *((_DWORD *)i + 4);
    v55 = (_DWORD *)i + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)i + 5, (uint64_t)&unk_2102DB95C, &v55) + 5) = v50;
  }
  sub_20F467994((uint64_t *)__p, a2);
  v51 = v57[0];
  if (v57[0])
  {
    do
    {
      v52 = (_QWORD *)*v51;
      operator delete(v51);
      v51 = v52;
    }
    while (v52);
  }
  v53 = __p[0];
  __p[0] = 0;
  if (v53)
    operator delete(v53);
  kdebug_trace();
  return 1;
}

void sub_20E939460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a20);
  v37 = a28;
  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E93981C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *__p)
{
  _QWORD *v31;
  _QWORD *v32;

  v31 = __p;
  if (__p)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  if (!a29)
    JUMPOUT(0x20E939844);
  JUMPOUT(0x20E93984CLL);
}

uint64_t sub_20E939858(void ****a1, uint64_t a2)
{
  return sub_20E941F48(***a1, (uint64_t)(**a1)[1], (uint64_t)(*a1)[1], a2);
}

uint64_t sub_20E93986C(void ****a1, _DWORD *a2)
{
  return sub_20E94392C(***a1, (uint64_t)(**a1)[1], (uint64_t)(*a1)[1], a2);
}

uint64_t sub_20E939880(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *category, char *__s, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,uint64_t a30,void *a31,char a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v44;
  uint64_t v45;
  void *v46;
  size_t v47;
  uint64_t v48;
  uint64_t *i;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  _DWORD *v55;
  void *__p[2];
  void *v57[2];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v44 = **a1;
  v45 = (*a1)[1];
  v46 = *(void **)v44;
  v47 = *(_QWORD *)(v44 + 8) - *(_QWORD *)v44;
  __p[0] = 0;
  __p[1] = 0;
  v57[0] = 0;
  sub_20E944D50(v46, v47, a2, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v57[0]) < 0)
    operator delete(__p[0]);
  v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 120) + 280))(*(_QWORD *)(v45 + 120));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v57 = 0u;
  v58 = 1065353216;
  for (i = *(uint64_t **)(v48 + 56); i; i = (uint64_t *)*i)
  {
    v50 = *((_DWORD *)i + 4);
    v55 = (_DWORD *)i + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)i + 5, (uint64_t)&unk_2102DB95C, &v55) + 5) = v50;
  }
  sub_20F448AAC((uint64_t *)__p, a2);
  v51 = v57[0];
  if (v57[0])
  {
    do
    {
      v52 = (_QWORD *)*v51;
      operator delete(v51);
      v51 = v52;
    }
    while (v52);
  }
  v53 = __p[0];
  __p[0] = 0;
  if (v53)
    operator delete(v53);
  kdebug_trace();
  return 1;
}

void sub_20E93A6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a20);
  v37 = a28;
  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E93AA68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *__p)
{
  _QWORD *v31;
  _QWORD *v32;

  v31 = __p;
  if (__p)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  if (!a29)
    JUMPOUT(0x20E93AA90);
  JUMPOUT(0x20E93AA98);
}

uint64_t sub_20E93AAA4(void ****a1, std::string *a2)
{
  return sub_20E94FC70(***a1, (uint64_t)(**a1)[1], (uint64_t)(*a1)[1], a2);
}

uint64_t sub_20E93AAB8(void ****a1, uint64_t a2)
{
  return sub_20E9511B8(***a1, (uint64_t)(**a1)[1], (uint64_t)(*a1)[1], a2);
}

uint64_t sub_20E93AACC(void ****a1, char **a2)
{
  return sub_20E9529C0(***a1, (uint64_t)(**a1)[1], (uint64_t)(*a1)[1], a2);
}

uint64_t sub_20E93AAE0(uint64_t **a1, _QWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *category, char *__s, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,uint64_t a30,void *a31,char a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v44;
  uint64_t v45;
  void *v46;
  size_t v47;
  uint64_t v48;
  uint64_t *i;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  _DWORD *v55;
  void *__p[2];
  void *v57[2];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v44 = **a1;
  v45 = (*a1)[1];
  v46 = *(void **)v44;
  v47 = *(_QWORD *)(v44 + 8) - *(_QWORD *)v44;
  __p[0] = 0;
  __p[1] = 0;
  v57[0] = 0;
  sub_20E9540A0(v46, v47, (uint64_t)a2, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v57[0]) < 0)
    operator delete(__p[0]);
  v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 120) + 280))(*(_QWORD *)(v45 + 120));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v57 = 0u;
  v58 = 1065353216;
  for (i = *(uint64_t **)(v48 + 56); i; i = (uint64_t *)*i)
  {
    v50 = *((_DWORD *)i + 4);
    v55 = (_DWORD *)i + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)i + 5, (uint64_t)&unk_2102DB95C, &v55) + 5) = v50;
  }
  sub_20F46840C((uint64_t *)__p, a2);
  v51 = v57[0];
  if (v57[0])
  {
    do
    {
      v52 = (_QWORD *)*v51;
      operator delete(v51);
      v51 = v52;
    }
    while (v52);
  }
  v53 = __p[0];
  __p[0] = 0;
  if (v53)
    operator delete(v53);
  kdebug_trace();
  return 1;
}

void sub_20E93B90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a20);
  v37 = a28;
  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E93BCC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *__p)
{
  _QWORD *v31;
  _QWORD *v32;

  v31 = __p;
  if (__p)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  if (!a29)
    JUMPOUT(0x20E93BCF0);
  JUMPOUT(0x20E93BCF8);
}

void sub_20E93BD04(void *__src, size_t __n, uint64_t a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  uint64_t v20;
  std::ios_base::failure *exception;
  std::error_code v22;
  std::string __msg;
  std::string __p;
  _QWORD v25[2];
  void (**v26)();
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[12];
  char v31;
  uint64_t v32;
  __int128 __dst;
  unint64_t v34;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v34 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v34) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v30, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v25, (uint64_t *)&__p, (uint64_t)v30, a5);
  v25[0] = &off_24C9B0298;
  v26 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v29, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_38;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v22.__val_ = 1;
      v22.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v22);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  sub_20E93C1A4(v25, a3);
  v25[0] = &off_24C9B71C0;
  v26 = (void (**)())&unk_24C9B7308;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    sub_20E9EF740((_QWORD *)(v20 + 8));
    MEMORY[0x212BC6398](v20, 0x10F2C40853B94B7);
  }
  v26 = off_24C9B7428;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v30[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v30[2] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v32);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
}

void sub_20E93BFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

void sub_20E93C070(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC30))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry_engine");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC28);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC30);
  }
  *a1 = qword_254A5AC28;
}

void sub_20E93C10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC30);
  _Unwind_Resume(a1);
}

uint64_t sub_20E93C164(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  double v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, int *, double *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

_QWORD *sub_20E93C1A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20E9EDADC(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20E93C27C((uint64_t)&v8, a1, a2);
    return a1;
  }
  else
  {
    sub_20E90A71C(a1 + 2);
    sub_20E93C470(a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_20E93C27C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD *v21[2];
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  _QWORD *v30[3];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v21[1] = 0;
  v21[0] = 0;
  bzero(&v12, 0x368uLL);
  v20 = v21;
  sub_20E93C540(a2, (uint64_t)&v12);
  sub_20E941218((uint64_t)&v22, (uint64_t)&v12);
  BYTE4(v33) = 0;
  v31 = 0uLL;
  *(_QWORD *)&v32 = 0;
  BYTE8(v32) = 0;
  sub_20E941D88(a3 + 8, (uint64_t)&v22);
  v5 = v32;
  *(_OWORD *)(a3 + 912) = v31;
  *(_OWORD *)(a3 + 928) = v5;
  *(_QWORD *)(a3 + 944) = v33;
  sub_20E86872C((uint64_t)v30, v30[1]);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  v6 = v22;
  if (v22)
  {
    v7 = v23;
    v8 = v22;
    if (v23 != v22)
    {
      do
      {
        v7 -= 89;
        sub_20E9385B0(v7);
      }
      while (v7 != v6);
      v8 = v22;
    }
    v23 = v6;
    operator delete(v8);
  }
  sub_20E86872C((uint64_t)&v20, v21[0]);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v9 = v12;
  if (v12)
  {
    v10 = v13;
    v11 = v12;
    if (v13 != v12)
    {
      do
      {
        v10 -= 89;
        sub_20E9385B0(v10);
      }
      while (v10 != v9);
      v11 = v12;
    }
    v13 = v9;
    operator delete(v11);
  }
}

void sub_20E93C448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9384B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E93C45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9384B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E93C470(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;

  v4 = a2 + 8;
  v8 = 1;
  sub_20E9EDADC(a1[6], &v8);
  sub_20E93C540(a1, v4);
  v9 = 1;
  sub_20E9EDADC(a1[6], &v9);
  sub_20E90A71C(a1 + 2);
  sub_20E94111C((uint64_t)a1, a2 + 912);
  v5 = a1[4];
  result = (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2);
  v7 = *(_QWORD *)(v5 - 16) - result + *(_QWORD *)(v5 - 8);
  if (v7)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
  a1[4] -= 16;
  return result;
}

void sub_20E93C540(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unsigned int v10;
  char v11;

  sub_20E93C698(a1, (uint64_t *)a2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  sub_20E9EDE6C(a1[6], &v8);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v6 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - v5) >> 3);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = v5 + 120 * v8;
      *(_QWORD *)(a2 + 32) = v4;
    }
  }
  else
  {
    sub_20E93E7F8((char **)(a2 + 24), v8 - v6);
    v5 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
  }
  if (v4 != v5)
  {
    v7 = 120 * ((uint64_t)(v4 - v5) / 120);
    do
    {
      sub_20E93E9C8((uint64_t)&v9, (uint64_t)a1, v5);
      v5 += 120;
      v7 -= 120;
    }
    while (v7);
  }
  v10 = 3;
  sub_20E9EDADC(a1[6], &v10);
  if (v10 < 2)
    sub_20E93EB10((uint64_t)&v11, (uint64_t)a1, a2 + 48);
  else
    sub_20E93EC10((uint64_t)a1, a2 + 48, v10);
  sub_20E9400E0((uint64_t)a1, (char **)(a2 + 848));
  sub_20E9EDE6C(a1[6], (_QWORD *)(a2 + 872));
  sub_20E940B74((uint64_t)a1, a2 + 880);
}

void sub_20E93C698(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v12 = 0xF47E8FD1FA3F47E9 * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(a1[6], &v12);
  v4 = (_QWORD *)a2[1];
  v5 = 0xF47E8FD1FA3F47E9 * (((uint64_t)v4 - *a2) >> 3);
  if (v12 > v5)
  {
    sub_20E93C7BC((uint64_t)a2, v12 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_10;
  }
  if (v12 >= v5)
  {
    v6 = *a2;
    v9 = (uint64_t)v4 - v6;
    if (v4 == (_QWORD *)v6)
      return;
    goto LABEL_10;
  }
  v10 = *a2 + 712 * v12;
  while (v4 != (_QWORD *)v10)
  {
    v4 -= 89;
    sub_20E9385B0(v4);
  }
  a2[1] = v10;
  v6 = *a2;
  v9 = v10 - v6;
  if (v10 != v6)
  {
LABEL_10:
    v11 = 712 * (v9 / 712);
    do
    {
      sub_20E93CBFC((uint64_t)&v13, a1, v6);
      v6 += 712;
      v11 -= 712;
    }
    while (v11);
  }
}

void sub_20E93C7BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *i;
  char *v14;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (0xF47E8FD1FA3F47E9 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = 712 * ((712 * a2 - 712) / 0x2C8) + 712;
      bzero(*(void **)(a1 + 8), v11);
      v5 += v11;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = 0xF47E8FD1FA3F47E9 * ((v5 - *(_QWORD *)a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x5C0B81702E05C0)
      sub_20E92CED8();
    v8 = 0xF47E8FD1FA3F47E9 * ((v4 - *(_QWORD *)a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x2E05C0B81702E0)
      v9 = 0x5C0B81702E05C0;
    else
      v9 = v7;
    v19 = a1 + 16;
    if (v9)
    {
      if (v9 > 0x5C0B81702E05C0)
        sub_20E877A38();
      v10 = (char *)operator new(712 * v9);
    }
    else
    {
      v10 = 0;
    }
    __p = v10;
    v16 = &v10[712 * v6];
    v18 = &v10[712 * v9];
    v12 = 712 * ((712 * a2 - 712) / 0x2C8) + 712;
    bzero(v16, v12);
    v17 = &v16[v12];
    sub_20E93C9B8((uint64_t *)a1, &__p);
    v14 = v16;
    for (i = v17; v17 != v14; i = v17)
    {
      v17 = i - 712;
      sub_20E9385B0((_QWORD *)i - 89);
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_20E93C9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E93CBAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E93C9B8(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = (_OWORD *)(v6 + v7 - 704);
      v10 = v4 + v7;
      v11 = *(_OWORD *)(v4 + v7 - 688);
      *v9 = *(_OWORD *)(v4 + v7 - 704);
      v9[1] = v11;
      v12 = v6 + v7 - 672;
      v13 = v4 + v7 - 672;
      *(_QWORD *)v12 = 0;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_QWORD *)(v6 + v7 - 656) = *(_QWORD *)(v4 + v7 - 656);
      *(_QWORD *)(v13 + 16) = 0;
      *(_OWORD *)v13 = 0u;
      v14 = v6 + v7 - 648;
      v15 = v4 + v7 - 648;
      *(_QWORD *)(v14 + 16) = 0;
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_QWORD *)(v6 + v7 - 632) = *(_QWORD *)(v4 + v7 - 632);
      *(_QWORD *)(v15 + 16) = 0;
      *(_OWORD *)v15 = 0u;
      *(_BYTE *)(v6 + v7 - 624) = *(_BYTE *)(v4 + v7 - 624);
      v16 = v6 + v7 - 616;
      v17 = v4 + v7 - 616;
      *(_OWORD *)(v16 + 8) = 0u;
      *(_QWORD *)v16 = 0;
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_QWORD *)(v6 + v7 - 600) = *(_QWORD *)(v4 + v7 - 600);
      *(_QWORD *)(v17 + 16) = 0;
      *(_OWORD *)v17 = 0u;
      *(_BYTE *)(v6 + v7 - 592) = *(_BYTE *)(v4 + v7 - 592);
      v18 = v6 + v7 - 584;
      v19 = v4 + v7 - 584;
      *(_QWORD *)v18 = 0;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_QWORD *)(v6 + v7 - 568) = *(_QWORD *)(v4 + v7 - 568);
      *(_QWORD *)(v19 + 16) = 0;
      *(_OWORD *)v19 = 0u;
      v20 = v6 + v7 - 560;
      v21 = v4 + v7 - 560;
      *(_QWORD *)(v20 + 16) = 0;
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_QWORD *)(v6 + v7 - 544) = *(_QWORD *)(v4 + v7 - 544);
      *(_QWORD *)(v21 + 16) = 0;
      *(_OWORD *)v21 = 0u;
      result = (uint64_t *)memcpy((void *)(v6 + v7 - 536), (const void *)(v4 + v7 - 536), 0x200uLL);
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(v4 + v7 - 24);
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(v4 + v7 - 8);
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      v7 -= 712;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v22 = *v3;
  *v3 = v6;
  a2[1] = v22;
  v23 = v3[1];
  v3[1] = a2[2];
  a2[2] = v23;
  v24 = v3[2];
  v3[2] = a2[3];
  a2[3] = v24;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20E93CBAC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 712;
    sub_20E9385B0((_QWORD *)(i - 712));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E93CBFC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  char v7;
  char v8;

  v5 = 1;
  sub_20E9EDADC(a2[6], &v5);
  v6 = 5;
  sub_20E9EDADC(a2[6], &v6);
  if (v6 < 3)
    sub_20E93CCA4((uint64_t)&v7, (uint64_t)a2, a3 + 8, v6);
  else
    sub_20E93CE04((uint64_t)a2, a3 + 8, v6);
  sub_20E93E464((uint64_t)&v8, a2, (char *)(a3 + 176));
  sub_20E93E574((uint64_t)a2, (char **)(a3 + 688));
}

void sub_20E93CCA4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BYTE v5[32];
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *__p;
  void *v15;
  _BYTE v16[16];
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  _BYTE v24[24];
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  LOBYTE(v23) = 0;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  sub_20E93DFE0(a2, (uint64_t)v16, a4);
  sub_20FCF0EA8((uint64_t)v5, (uint64_t)v16);
  sub_20E93DE20(a3, (uint64_t)v5);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (*(_QWORD *)&v24[1])
  {
    *(_QWORD *)&v24[9] = *(_QWORD *)&v24[1];
    operator delete(*(void **)&v24[1]);
  }
  if ((v24[0] & 0x80000000) != 0)
    operator delete(v23);
  if (*((_QWORD *)&v21 + 1))
  {
    *(_QWORD *)&v22 = *((_QWORD *)&v21 + 1);
    operator delete(*((void **)&v21 + 1));
  }
  if ((_QWORD)v20)
  {
    *((_QWORD *)&v20 + 1) = v20;
    operator delete((void *)v20);
  }
}

void sub_20E93CDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E93DF74((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E93CDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E93DF74((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E93CE04(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  char *i;
  uint64_t v15;
  void (*v16)(uint64_t);
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::bad_cast *exception;
  std::bad_cast *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;

  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 8));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 16));
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 24));
  sub_20E93D120(a1, (char **)(a2 + 32));
  v33 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 6;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v33);
  v7 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  v8 = (v6 - v7) >> 6;
  if (v33 <= v8)
  {
    if (v33 < v8)
    {
      v6 = v7 + (v33 << 6);
      *(_QWORD *)(a2 + 64) = v6;
    }
  }
  else
  {
    sub_20E93D564((char **)(a2 + 56), v33 - v8);
    v7 = *(_QWORD *)(a2 + 56);
    v6 = *(_QWORD *)(a2 + 64);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 48);
      do
      {
        sub_20E9EFAC4(v11, (uint64_t)&v34);
        if ((_DWORD)v34 != 2 || HIDWORD(v35) != 0)
        {
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v32 = std::bad_cast::bad_cast(exception);
          v32->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v32, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        *(_DWORD *)(v7 + 4 * v10) = v35;
        v13 = v36;
        v36 = 0;
        if (v13)
        {
          for (i = (char *)v13[4]; i != (char *)v13[6]; i -= 16)
          {
            v16 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v15 = *((_QWORD *)i - 1);
            v16(v15);
          }
          free(i);
          v17 = (_QWORD *)v13[3];
          if (v17)
          {
            do
            {
              v18 = (_QWORD *)*v17;
              free(v17);
              v17 = v18;
            }
            while (v18);
          }
          free(v13);
        }
        ++v10;
      }
      while (v10 != 16);
      v7 += 64;
    }
    while (v7 != v9);
  }
  LODWORD(v34) = 4;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v34);
  sub_20E93D690(a1, a2 + 80, v34);
  sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 112));
  if (a3 >= 4)
  {
    v34 = (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3;
    sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v34);
    v20 = *(char **)(a2 + 120);
    v19 = *(char **)(a2 + 128);
    v21 = (v19 - v20) >> 3;
    if (v34 <= v21)
    {
      if (v34 < v21)
      {
        v19 = &v20[8 * v34];
        *(_QWORD *)(a2 + 128) = v19;
      }
    }
    else
    {
      sub_20E93DAE8(a2 + 120, v34 - v21);
      v20 = *(char **)(a2 + 120);
      v19 = *(char **)(a2 + 128);
    }
    v22 = v19 - v20;
    if (v22)
    {
      v23 = *(_QWORD *)(a1 + 48);
      v24 = 8 * (v22 >> 3);
      do
      {
        sub_20E9EDE6C(v23, v20);
        v20 += 8;
        v24 -= 8;
      }
      while (v24);
    }
    if (a3 >= 5)
    {
      v34 = (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2;
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v34);
      v26 = *(char **)(a2 + 144);
      v25 = *(char **)(a2 + 152);
      v27 = (v25 - v26) >> 2;
      if (v34 <= v27)
      {
        if (v34 < v27)
        {
          v25 = &v26[4 * v34];
          *(_QWORD *)(a2 + 152) = v25;
        }
      }
      else
      {
        sub_20E93DC84(a2 + 144, v34 - v27);
        v26 = *(char **)(a2 + 144);
        v25 = *(char **)(a2 + 152);
      }
      v28 = v25 - v26;
      if (v28)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v30 = 4 * (v28 >> 2);
        do
        {
          sub_20E9EDADC(v29, v26);
          v26 += 4;
          v30 -= 4;
        }
        while (v30);
      }
    }
  }
}

void sub_20E93D108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E9F1E54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E93D120(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v9);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 4);
  if (v9 <= v6)
  {
    if (v9 < v6)
    {
      v4 = &v5[48 * v9];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E93D210(a2, v9 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = (unsigned __int128)((v4 - v5) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v8 = 48 * ((v7 >> 3) + ((unint64_t)v7 >> 63));
    do
    {
      v10 = 2;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v10);
      sub_20E93D3AC(a1, (uint64_t)v5, v10);
      v5 += 48;
      v8 -= 48;
    }
    while (v8);
  }
}

void sub_20E93D210(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_20E92CED8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 3);
        v18 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v18;
        *((_OWORD *)v13 - 3) = v17;
        v13 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

double sub_20E93D3AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  _DWORD v8[2];
  __int128 v9;
  __int128 v10;
  double v11;

  if (a3 < 2)
  {
    v10 = 0u;
    v9 = 0u;
    sub_20E93D47C(a1, (uint64_t)v8);
    result = v11;
    *(_DWORD *)a2 = v8[1];
    *(_OWORD *)(a2 + 8) = v9;
    *(_OWORD *)(a2 + 24) = v10;
    *(double *)(a2 + 40) = result;
  }
  else
  {
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)a2);
    v5 = *(_QWORD *)(a1 + 48);
    sub_20E9EE078(v5, (double *)(a2 + 8));
    sub_20E9EE078(v5, (double *)(a2 + 16));
    v6 = *(_QWORD *)(a1 + 48);
    sub_20E9EE078(v6, (double *)(a2 + 24));
    sub_20E9EE078(v6, (double *)(a2 + 32));
    sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 40));
  }
  return result;
}

void sub_20E93D47C(uint64_t a1, uint64_t a2)
{
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;

  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)a2);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 4));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_20E9EE368(*(_QWORD *)(a1 + 48), &v6);
  v4 = v6;
  if (v7 != v6)
    memmove((void *)(a2 + 8), v6, (char *)v7 - (char *)v6);
  if (v4)
  {
    v7 = v4;
    operator delete(v4);
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_20E9EE368(*(_QWORD *)(a1 + 48), &v6);
  v5 = v6;
  if (v7 != v6)
    memmove((void *)(a2 + 24), v6, (char *)v7 - (char *)v6);
  if (v5)
  {
    v7 = v5;
    operator delete(v5);
  }
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 40));
}

void sub_20E93D544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E93D564(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 6)
  {
    if (a2)
    {
      v12 = a2 << 6;
      bzero(a1[1], a2 << 6);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 6;
    v8 = v7 + a2;
    if ((v7 + a2) >> 58)
      sub_20E92CED8();
    v9 = v4 - v6;
    if (v9 >> 5 > v8)
      v8 = v9 >> 5;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v10 = 0x3FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 58)
        sub_20E877A38();
      v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[64 * v7];
    v14 = a2 << 6;
    v15 = &v11[64 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 4);
        v18 = *((_OWORD *)v5 - 3);
        v19 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v19;
        *((_OWORD *)v13 - 4) = v17;
        *((_OWORD *)v13 - 3) = v18;
        v13 -= 64;
        v5 -= 64;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E93D690(uint64_t a1, uint64_t a2, unsigned int a3)
{
  double *v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;

  if (a3 < 2)
  {
    sub_20E93D77C((uint64_t)&v11, a1, a2);
  }
  else
  {
    sub_20E9ED7B4(*(_QWORD *)(a1 + 48), (_BYTE *)a2);
    v12 = (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3;
    sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v12);
    v6 = *(double **)(a2 + 8);
    v5 = *(double **)(a2 + 16);
    v7 = v5 - v6;
    if (v12 <= v7)
    {
      if (v12 < v7)
      {
        v5 = &v6[v12];
        *(_QWORD *)(a2 + 16) = v5;
      }
    }
    else
    {
      sub_20E93D8FC(a2 + 8, v12 - v7);
      v6 = *(double **)(a2 + 8);
      v5 = *(double **)(a2 + 16);
    }
    v8 = (char *)v5 - (char *)v6;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = 8 * (v8 >> 3);
      do
      {
        sub_20E9EE078(v9, v6++);
        v10 -= 8;
      }
      while (v10);
    }
  }
}

void sub_20E93D77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15[6];

  LOBYTE(v15[0]) = 0;
  memset((char *)&v15[2] + 7, 0, 25);
  sub_20E9EE280(*(_QWORD *)(a2 + 48), (std::string *)v15);
  v12 = ((char *)v15[4] - (char *)v15[3]) >> 3;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v12);
  v5 = (char *)v15[4];
  v6 = (double *)v15[3];
  v7 = ((char *)v15[4] - (char *)v15[3]) >> 3;
  if (v12 <= v7)
  {
    if (v12 < v7)
    {
      v5 = (char *)v15[3] + 8 * v12;
      v15[4] = v5;
    }
  }
  else
  {
    sub_20E93D8FC((uint64_t)&v15[3], v12 - v7);
    v6 = (double *)v15[3];
    v5 = (char *)v15[4];
  }
  v8 = v5 - (char *)v6;
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    v10 = 8 * (v8 >> 3);
    do
    {
      sub_20E9EE078(v9, v6++);
      v10 -= 8;
    }
    while (v10);
  }
  sub_20EB4453C((uint64_t)&v12, (uint64_t *)v15);
  *(_BYTE *)a3 = v12;
  v11 = *(void **)(a3 + 8);
  if (v11)
  {
    *(_QWORD *)(a3 + 16) = v11;
    operator delete(v11);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  *(_OWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 24) = v14;
  if (v15[3])
  {
    v15[4] = v15[3];
    operator delete(v15[3]);
  }
  if (SHIBYTE(v15[2]) < 0)
    operator delete(v15[0]);
}

void sub_20E93D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E93DA98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E93D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E93DA98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E93D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E93DA98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E93D8FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_20E93DA98(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E93DAE8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E92CED8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_20E93DC84(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_20E867F44();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_20E93DE20(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v6 = (_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 32);
  v7 = (_QWORD *)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v5);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v8 = *(void **)(a1 + 56);
  if (v8)
  {
    *(_QWORD *)(a1 + 64) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(void **)(a1 + 88);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  if (v9)
  {
    *(_QWORD *)(a1 + 96) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v10 = *(void **)(a1 + 120);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  if (v10)
  {
    *(_QWORD *)(a1 + 128) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v11 = *(void **)(a1 + 144);
  if (v11)
  {
    *(_QWORD *)(a1 + 152) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  return a1;
}

uint64_t sub_20E93DF74(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    v3 = *(void **)(a1 + 72);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 96));
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
LABEL_6:
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20E93DFE0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char v8;
  char v9;

  v6 = 1;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v6);
  v7 = 1;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v7);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 16));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 24));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 32));
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 40));
  sub_20E93E0B4(a1, (char **)(a2 + 48));
  sub_20E93E1A4((uint64_t)&v8, a1, (char **)(a2 + 72));
  sub_20E93E394((uint64_t)&v9, a1, (std::string *)(a2 + 96));
  if (a3 >= 2)
    sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 144));
}

void sub_20E93E0B4(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v9);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 4);
  if (v9 <= v6)
  {
    if (v9 < v6)
    {
      v4 = &v5[48 * v9];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E93D210(a2, v9 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = (unsigned __int128)((v4 - v5) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v8 = 48 * ((v7 >> 3) + ((unint64_t)v7 >> 63));
    do
    {
      v10 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v10);
      sub_20E93D47C(a1, (uint64_t)v5);
      v5 += 48;
      v8 -= 48;
    }
    while (v8);
  }
}

void sub_20E93E1A4(uint64_t a1, uint64_t a2, char **a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  char *i;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  std::bad_cast *exception;
  std::bad_cast *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;

  v21 = 1;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v21);
  v20 = (a3[1] - *a3) >> 6;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v20);
  v6 = *a3;
  v5 = a3[1];
  v7 = (v5 - *a3) >> 6;
  if (v20 <= v7)
  {
    if (v20 < v7)
    {
      v5 = &v6[64 * v20];
      a3[1] = v5;
    }
  }
  else
  {
    sub_20E93D564(a3, v20 - v7);
    v6 = *a3;
    v5 = a3[1];
  }
  if (v5 != v6)
  {
    v8 = v5;
    do
    {
      v9 = 0;
      v10 = *(_QWORD *)(a2 + 48);
      do
      {
        sub_20E9EFAC4(v10, (uint64_t)&v21);
        if (v21 != 2 || HIDWORD(v22) != 0)
        {
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v19 = std::bad_cast::bad_cast(exception);
          v19->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v19, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        *(_DWORD *)&v6[4 * v9] = v22;
        v12 = v23;
        v23 = 0;
        if (v12)
        {
          for (i = (char *)v12[4]; i != (char *)v12[6]; i -= 16)
          {
            v15 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v14 = *((_QWORD *)i - 1);
            v15(v14);
          }
          free(i);
          v16 = (_QWORD *)v12[3];
          if (v16)
          {
            do
            {
              v17 = (_QWORD *)*v16;
              free(v16);
              v16 = v17;
            }
            while (v17);
          }
          free(v12);
        }
        ++v9;
      }
      while (v9 != 16);
      v6 += 64;
    }
    while (v6 != v8);
  }
}

void sub_20E93E330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  char *i;
  uint64_t v16;
  void (*v17)(uint64_t);
  _QWORD *v18;
  _QWORD *v19;

  if (a14)
  {
    for (i = (char *)a14[4]; i != (char *)a14[6]; i -= 16)
    {
      v17 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v16 = *((_QWORD *)i - 1);
      v17(v16);
    }
    free(i);
    v18 = (_QWORD *)a14[3];
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        free(v18);
        v18 = v19;
      }
      while (v19);
    }
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E93E394(uint64_t a1, uint64_t a2, std::string *a3)
{
  double *size;
  double *data;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v11 = 1;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v11);
  sub_20E9EE280(*(_QWORD *)(a2 + 48), a3);
  v12 = (uint64_t)(a3[1].__r_.__value_.__l.__size_ - a3[1].__r_.__value_.__r.__words[0]) >> 3;
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), &v12);
  data = (double *)a3[1].__r_.__value_.__l.__data_;
  size = (double *)a3[1].__r_.__value_.__l.__size_;
  v7 = size - data;
  if (v12 <= v7)
  {
    if (v12 < v7)
    {
      size = &data[v12];
      a3[1].__r_.__value_.__l.__size_ = (std::string::size_type)size;
    }
  }
  else
  {
    sub_20E93D8FC((uint64_t)&a3[1], v12 - v7);
    data = (double *)a3[1].__r_.__value_.__l.__data_;
    size = (double *)a3[1].__r_.__value_.__l.__size_;
  }
  v8 = (char *)size - (char *)data;
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    v10 = 8 * (v8 >> 3);
    do
    {
      sub_20E9EE078(v9, data++);
      v10 -= 8;
    }
    while (v10);
  }
}

void *sub_20E93E464(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[128];

  v12[0] = 2;
  sub_20E9EDADC(a2[6], v12);
  if (v12[0] <= 1u)
  {
    v10 = 0;
    v11 = a2[6];
    do
      sub_20E9EDF48(v11, (float *)&v12[v10++]);
    while (v10 != 128);
    return memcpy(a3, v12, 0x200uLL);
  }
  else
  {
    sub_20E90A71C(a2 + 2);
    v5 = 0;
    v6 = a2[6];
    do
    {
      sub_20E9EDF48(v6, (float *)&a3[v5]);
      v5 += 4;
    }
    while (v5 != 512);
    v7 = a2[4];
    result = (void *)(*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
    v9 = *(_QWORD *)(v7 - 16) - (_QWORD)result + *(_QWORD *)(v7 - 8);
    if (v9)
      result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
  return result;
}

void sub_20E93E574(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  int v9;

  v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v8);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = &v5[24 * v8];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E93E65C(a2, v8 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = v4;
    do
    {
      v9 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v9);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), v5);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)v5 + 1);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v5 + 4);
      v5 += 24;
    }
    while (v5 != v7);
  }
}

void sub_20E93E65C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E92CED8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E93E7F8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = a1[1];
  v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 120 * ((120 * a2 - 120) / 0x78) + 120;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x222222222222222)
      sub_20E92CED8();
    v9 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x111111111111111)
      v10 = 0x222222222222222;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x222222222222222)
        sub_20E877A38();
      v11 = (char *)operator new(120 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[120 * v7];
    v14 = &v11[120 * v10];
    v15 = 120 * ((120 * a2 - 120) / 0x78) + 120;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 120);
        v18 = *(_OWORD *)(v5 - 104);
        v19 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v13 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v13 - 88) = v19;
        *(_OWORD *)(v13 - 104) = v18;
        *(_OWORD *)(v13 - 120) = v17;
        v20 = *(_OWORD *)(v5 - 56);
        v21 = *(_OWORD *)(v5 - 40);
        v22 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v22;
        *(_OWORD *)(v13 - 40) = v21;
        *(_OWORD *)(v13 - 56) = v20;
        v13 -= 120;
        v5 -= 120;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E93E9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v6;
  uint64_t v7;
  int v8;
  char v9;

  v8 = 1;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v8);
  sub_20E9EDE6C(*(_QWORD *)(a2 + 48), (_QWORD *)a3);
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), (_DWORD *)(a3 + 8));
  v5 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v5, (double *)(a3 + 16));
  sub_20E9EE078(v5, (double *)(a3 + 24));
  sub_20E9EE078(v5, (double *)(a3 + 32));
  v9 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a2 + 48), &v9);
  if (v9)
  {
    v6 = (double *)(a3 + 40);
    if (!*(_BYTE *)(a3 + 112))
    {
      *(_QWORD *)(a3 + 104) = 0;
      *(_OWORD *)(a3 + 72) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_BYTE *)(a3 + 112) = 1;
    }
    v7 = *(_QWORD *)(a2 + 48);
    sub_20E9EE078(v7, v6);
    sub_20E9EE078(v7, (double *)(a3 + 48));
    sub_20E9EE078(v7, (double *)(a3 + 56));
    sub_20E9EE078(v7, (double *)(a3 + 64));
    sub_20E9EE078(v7, (double *)(a3 + 72));
    sub_20E9EE078(v7, (double *)(a3 + 80));
    sub_20E9EE078(v7, (double *)(a3 + 88));
    sub_20E9EE078(v7, (double *)(a3 + 96));
    sub_20E9EE078(v7, (double *)(a3 + 104));
  }
  else if (*(_BYTE *)(a3 + 112))
  {
    *(_BYTE *)(a3 + 112) = 0;
  }
}

void sub_20E93EB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  __int128 v6;
  _BYTE __src[744];
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11[46];
  void *__p;
  void *v13;
  __int128 v14;

  bzero(v11, 0x300uLL);
  v14 = 0u;
  sub_20E93F918(a2, (uint64_t)v11);
  sub_20FCF1280((uint64_t)__src, v11);
  memcpy((void *)a3, __src, 0x2E8uLL);
  v5 = *(void **)(a3 + 744);
  if (v5)
  {
    *(_QWORD *)(a3 + 752) = v5;
    operator delete(v5);
    *(_QWORD *)(a3 + 744) = 0;
    *(_QWORD *)(a3 + 752) = 0;
    *(_QWORD *)(a3 + 760) = 0;
  }
  *(_QWORD *)(a3 + 744) = v8;
  v6 = v10[0];
  *(_OWORD *)(a3 + 752) = v9;
  *(_OWORD *)(a3 + 768) = v6;
  *(_OWORD *)(a3 + 780) = *(_OWORD *)((char *)v10 + 12);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20E93EBF0(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_20E93EC10(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v6, (double *)a2);
  sub_20E9EE078(v6, (double *)(a2 + 8));
  sub_20E9EE078(v6, (double *)(a2 + 16));
  sub_20E9EE078(v6, (double *)(a2 + 24));
  sub_20E9EE078(v6, (double *)(a2 + 32));
  sub_20E9EE078(v6, (double *)(a2 + 40));
  sub_20E9EE078(v6, (double *)(a2 + 48));
  sub_20E9EE078(v6, (double *)(a2 + 56));
  sub_20E9EE078(v6, (double *)(a2 + 64));
  sub_20E9EE078(v6, (double *)(a2 + 72));
  sub_20E9EE078(v6, (double *)(a2 + 80));
  sub_20E9EE078(v6, (double *)(a2 + 88));
  sub_20E9EE078(v6, (double *)(a2 + 96));
  sub_20E9EE078(v6, (double *)(a2 + 104));
  sub_20E9EE078(v6, (double *)(a2 + 112));
  sub_20E9EE078(v6, (double *)(a2 + 120));
  sub_20E9EE078(v6, (double *)(a2 + 128));
  sub_20E9EE078(v6, (double *)(a2 + 136));
  sub_20E9EE078(v6, (double *)(a2 + 144));
  sub_20E9EE078(v6, (double *)(a2 + 152));
  sub_20E9EE078(v6, (double *)(a2 + 160));
  v7 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v7, (double *)(a2 + 168));
  sub_20E9EE078(v7, (double *)(a2 + 176));
  sub_20E9EE078(v7, (double *)(a2 + 184));
  sub_20E9EE078(v7, (double *)(a2 + 192));
  sub_20E9EE078(v7, (double *)(a2 + 200));
  sub_20E9EE078(v7, (double *)(a2 + 208));
  sub_20E9EE078(v7, (double *)(a2 + 216));
  sub_20E9EE078(v7, (double *)(a2 + 224));
  sub_20E9EE078(v7, (double *)(a2 + 232));
  sub_20E9EE078(v7, (double *)(a2 + 240));
  sub_20E9EE078(v7, (double *)(a2 + 248));
  sub_20E9EE078(v7, (double *)(a2 + 256));
  sub_20E9EE078(v7, (double *)(a2 + 264));
  sub_20E9EE078(v7, (double *)(a2 + 272));
  sub_20E9EE078(v7, (double *)(a2 + 280));
  sub_20E9EE078(v7, (double *)(a2 + 288));
  sub_20E9EE078(v7, (double *)(a2 + 296));
  sub_20E9EE078(v7, (double *)(a2 + 304));
  sub_20E9EE078(v7, (double *)(a2 + 312));
  sub_20E9EE078(v7, (double *)(a2 + 320));
  sub_20E9EE078(v7, (double *)(a2 + 328));
  sub_20E9EE078(v7, (double *)(a2 + 336));
  sub_20E9EE078(v7, (double *)(a2 + 344));
  sub_20E9EE078(v7, (double *)(a2 + 352));
  sub_20E9EE078(v7, (double *)(a2 + 360));
  sub_20E9EE078(v7, (double *)(a2 + 368));
  sub_20E9EE078(v7, (double *)(a2 + 376));
  sub_20E9EE078(v7, (double *)(a2 + 384));
  sub_20E9EE078(v7, (double *)(a2 + 392));
  sub_20E9EE078(v7, (double *)(a2 + 400));
  sub_20E9EE078(v7, (double *)(a2 + 408));
  sub_20E9EE078(v7, (double *)(a2 + 416));
  sub_20E9EE078(v7, (double *)(a2 + 424));
  sub_20E9EE078(v7, (double *)(a2 + 432));
  sub_20E9EE078(v7, (double *)(a2 + 440));
  sub_20E9EE078(v7, (double *)(a2 + 448));
  v8 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v8, (double *)(a2 + 456));
  sub_20E9EE078(v8, (double *)(a2 + 464));
  sub_20E9EE078(v8, (double *)(a2 + 472));
  sub_20E9EE078(v8, (double *)(a2 + 480));
  sub_20E9EE078(v8, (double *)(a2 + 488));
  sub_20E9EE078(v8, (double *)(a2 + 496));
  sub_20E9EE078(v8, (double *)(a2 + 504));
  sub_20E9EE078(v8, (double *)(a2 + 512));
  sub_20E9EE078(v8, (double *)(a2 + 520));
  sub_20E9EE078(v8, (double *)(a2 + 528));
  sub_20E9EE078(v8, (double *)(a2 + 536));
  sub_20E9EE078(v8, (double *)(a2 + 544));
  sub_20E9EE078(v8, (double *)(a2 + 552));
  sub_20E9EE078(v8, (double *)(a2 + 560));
  sub_20E9EE078(v8, (double *)(a2 + 568));
  sub_20E9EE078(v8, (double *)(a2 + 576));
  sub_20E9EE078(v8, (double *)(a2 + 584));
  sub_20E9EE078(v8, (double *)(a2 + 592));
  sub_20E9EE078(v8, (double *)(a2 + 600));
  sub_20E9EE078(v8, (double *)(a2 + 608));
  sub_20E9EE078(v8, (double *)(a2 + 616));
  sub_20E9EE078(v8, (double *)(a2 + 624));
  sub_20E9EE078(v8, (double *)(a2 + 632));
  sub_20E9EE078(v8, (double *)(a2 + 640));
  sub_20E9EE078(v8, (double *)(a2 + 648));
  sub_20E9EE078(v8, (double *)(a2 + 656));
  sub_20E9EE078(v8, (double *)(a2 + 664));
  sub_20E9EE078(v8, (double *)(a2 + 672));
  sub_20E9EE078(v8, (double *)(a2 + 680));
  sub_20E9EE078(v8, (double *)(a2 + 688));
  sub_20E9EE078(v8, (double *)(a2 + 696));
  sub_20E9EE078(v8, (double *)(a2 + 704));
  sub_20E9EE078(v8, (double *)(a2 + 712));
  sub_20E9EE078(v8, (double *)(a2 + 720));
  sub_20E9EE078(v8, (double *)(a2 + 728));
  sub_20E9EE078(v8, (double *)(a2 + 736));
  sub_20E93F0F0(a1, (double **)(a2 + 744));
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 768));
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 784));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 792));
  if (a3 >= 3)
    sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 776));
}

void sub_20E93F0F0(uint64_t a1, double **a2)
{
  double *v4;
  double *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  _QWORD *v9;
  char *ii;
  uint64_t v11;
  void (*v12)(uint64_t);
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *i;
  uint64_t v17;
  void (*v18)(uint64_t);
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *j;
  uint64_t v23;
  void (*v24)(uint64_t);
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  char *k;
  uint64_t v30;
  void (*v31)(uint64_t);
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *m;
  uint64_t v36;
  void (*v37)(uint64_t);
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *n;
  uint64_t v42;
  void (*v43)(uint64_t);
  _QWORD *v44;
  _QWORD *v45;
  std::bad_cast *exception;
  std::bad_cast *v47;
  std::bad_cast *v48;
  std::bad_cast *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;

  v50 = 0x6DB6DB6DB6DB6DB7 * (a2[1] - *a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v50);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * (v4 - *a2);
  if (v50 <= v6)
  {
    if (v50 < v6)
    {
      v4 = &v5[7 * v50];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E93F738((char **)a2, v50 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = v4;
    while (1)
    {
      sub_20E9EE078(*(_QWORD *)(a1 + 48), v5);
      v8 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v8, (uint64_t)&v51);
      if (v51 == 2)
        break;
      if (v51 == 3)
      {
        v5[1] = (double)v52;
        v9 = v53;
        v53 = 0;
        if (!v9)
          goto LABEL_23;
        goto LABEL_17;
      }
      if (v51 != 4)
        goto LABEL_94;
      *((_QWORD *)v5 + 1) = v52;
      v9 = v53;
      v53 = 0;
      if (v9)
        goto LABEL_17;
LABEL_23:
      sub_20E9EFAC4(v8, (uint64_t)&v51);
      if (v51 == 2)
      {
        v5[2] = (double)(unint64_t)v52;
        v15 = v53;
        v53 = 0;
        if (!v15)
          goto LABEL_37;
LABEL_31:
        for (i = (char *)v15[4]; i != (char *)v15[6]; i -= 16)
        {
          v18 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v17 = *((_QWORD *)i - 1);
          v18(v17);
        }
        free(i);
        v19 = (_QWORD *)v15[3];
        if (v19)
        {
          do
          {
            v20 = (_QWORD *)*v19;
            free(v19);
            v19 = v20;
          }
          while (v20);
        }
        free(v15);
        goto LABEL_37;
      }
      if (v51 == 4)
      {
        *((_QWORD *)v5 + 2) = v52;
        v15 = v53;
        v53 = 0;
        if (!v15)
          goto LABEL_37;
        goto LABEL_31;
      }
      if (v51 != 3)
        goto LABEL_94;
      v5[2] = (double)v52;
      v15 = v53;
      v53 = 0;
      if (v15)
        goto LABEL_31;
LABEL_37:
      sub_20E9EFAC4(v8, (uint64_t)&v51);
      if (v51 == 2)
      {
        v5[3] = (double)(unint64_t)v52;
        v21 = v53;
        v53 = 0;
        if (!v21)
          goto LABEL_51;
LABEL_45:
        for (j = (char *)v21[4]; j != (char *)v21[6]; j -= 16)
        {
          v24 = (void (*)(uint64_t))*((_QWORD *)j - 2);
          v23 = *((_QWORD *)j - 1);
          v24(v23);
        }
        free(j);
        v25 = (_QWORD *)v21[3];
        if (v25)
        {
          do
          {
            v26 = (_QWORD *)*v25;
            free(v25);
            v25 = v26;
          }
          while (v26);
        }
        free(v21);
        goto LABEL_51;
      }
      if (v51 == 4)
      {
        *((_QWORD *)v5 + 3) = v52;
        v21 = v53;
        v53 = 0;
        if (!v21)
          goto LABEL_51;
        goto LABEL_45;
      }
      if (v51 != 3)
      {
LABEL_94:
        exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        exception->__vftable = 0;
        v47 = std::bad_cast::bad_cast(exception);
        v47->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v47, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v5[3] = (double)v52;
      v21 = v53;
      v53 = 0;
      if (v21)
        goto LABEL_45;
LABEL_51:
      v27 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v27, (uint64_t)&v51);
      if (v51 == 2)
      {
        v5[4] = (double)(unint64_t)v52;
        v28 = v53;
        v53 = 0;
        if (!v28)
          goto LABEL_65;
LABEL_59:
        for (k = (char *)v28[4]; k != (char *)v28[6]; k -= 16)
        {
          v31 = (void (*)(uint64_t))*((_QWORD *)k - 2);
          v30 = *((_QWORD *)k - 1);
          v31(v30);
        }
        free(k);
        v32 = (_QWORD *)v28[3];
        if (v32)
        {
          do
          {
            v33 = (_QWORD *)*v32;
            free(v32);
            v32 = v33;
          }
          while (v33);
        }
        free(v28);
        goto LABEL_65;
      }
      if (v51 == 3)
      {
        v5[4] = (double)v52;
        v28 = v53;
        v53 = 0;
        if (!v28)
          goto LABEL_65;
        goto LABEL_59;
      }
      if (v51 != 4)
        goto LABEL_95;
      *((_QWORD *)v5 + 4) = v52;
      v28 = v53;
      v53 = 0;
      if (v28)
        goto LABEL_59;
LABEL_65:
      sub_20E9EFAC4(v27, (uint64_t)&v51);
      if (v51 == 2)
      {
        v5[5] = (double)(unint64_t)v52;
        v34 = v53;
        v53 = 0;
        if (!v34)
          goto LABEL_79;
LABEL_73:
        for (m = (char *)v34[4]; m != (char *)v34[6]; m -= 16)
        {
          v37 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v36 = *((_QWORD *)m - 1);
          v37(v36);
        }
        free(m);
        v38 = (_QWORD *)v34[3];
        if (v38)
        {
          do
          {
            v39 = (_QWORD *)*v38;
            free(v38);
            v38 = v39;
          }
          while (v39);
        }
        free(v34);
        goto LABEL_79;
      }
      if (v51 == 4)
      {
        *((_QWORD *)v5 + 5) = v52;
        v34 = v53;
        v53 = 0;
        if (!v34)
          goto LABEL_79;
        goto LABEL_73;
      }
      if (v51 != 3)
        goto LABEL_95;
      v5[5] = (double)v52;
      v34 = v53;
      v53 = 0;
      if (v34)
        goto LABEL_73;
LABEL_79:
      sub_20E9EFAC4(v27, (uint64_t)&v51);
      switch(v51)
      {
        case 2:
          v5[6] = (double)(unint64_t)v52;
          v40 = v53;
          v53 = 0;
          if (v40)
            goto LABEL_87;
          break;
        case 4:
          *((_QWORD *)v5 + 6) = v52;
          v40 = v53;
          v53 = 0;
          if (v40)
            goto LABEL_87;
          break;
        case 3:
          v5[6] = (double)v52;
          v40 = v53;
          v53 = 0;
          if (v40)
          {
LABEL_87:
            for (n = (char *)v40[4]; n != (char *)v40[6]; n -= 16)
            {
              v43 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v42 = *((_QWORD *)n - 1);
              v43(v42);
            }
            free(n);
            v44 = (_QWORD *)v40[3];
            if (v44)
            {
              do
              {
                v45 = (_QWORD *)*v44;
                free(v44);
                v44 = v45;
              }
              while (v45);
            }
            free(v40);
          }
          break;
        default:
LABEL_95:
          v48 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v48->__vftable = 0;
          v49 = std::bad_cast::bad_cast(v48);
          v49->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v49, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v5 += 7;
      if (v5 == v7)
        return;
    }
    v5[1] = (double)(unint64_t)v52;
    v9 = v53;
    v53 = 0;
    if (!v9)
      goto LABEL_23;
LABEL_17:
    for (ii = (char *)v9[4]; ii != (char *)v9[6]; ii -= 16)
    {
      v12 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v11 = *((_QWORD *)ii - 1);
      v12(v11);
    }
    free(ii);
    v13 = (_QWORD *)v9[3];
    if (v13)
    {
      do
      {
        v14 = (_QWORD *)*v13;
        free(v13);
        v13 = v14;
      }
      while (v14);
    }
    free(v9);
    goto LABEL_23;
  }
}

void sub_20E93F66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  char *i;
  uint64_t v16;
  void (*v17)(uint64_t);
  _QWORD *v18;
  _QWORD *v19;

  if (a14)
  {
    for (i = (char *)a14[4]; i != (char *)a14[6]; i -= 16)
    {
      v17 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v16 = *((_QWORD *)i - 1);
      v17(v16);
    }
    free(i);
    v18 = (_QWORD *)a14[3];
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        free(v18);
        v18 = v19;
      }
      while (v19);
    }
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E93F738(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x492492492492492)
      sub_20E92CED8();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x492492492492492)
        sub_20E877A38();
      v11 = (char *)operator new(56 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[56 * v7];
    v14 = &v11[56 * v10];
    v15 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 56);
        v18 = *(_OWORD *)(v5 - 40);
        v19 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v19;
        *(_OWORD *)(v13 - 40) = v18;
        *(_OWORD *)(v13 - 56) = v17;
        v13 -= 56;
        v5 -= 56;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E93F918(uint64_t a1, uint64_t a2)
{
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_20E9EE368(*(_QWORD *)(a1 + 48), &v7);
  v4 = v7;
  if (v8 != v7)
    memmove((void *)a2, v7, (char *)v8 - (char *)v7);
  if (v4)
  {
    v8 = v4;
    operator delete(v4);
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_20E9EE368(*(_QWORD *)(a1 + 48), &v7);
  v5 = v7;
  if (v8 != v7)
    memmove((void *)(a2 + 168), v7, (char *)v8 - (char *)v7);
  if (v5)
  {
    v8 = v5;
    operator delete(v5);
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_20E9EE368(*(_QWORD *)(a1 + 48), &v7);
  v6 = v7;
  if (v8 != v7)
    memmove((void *)(a2 + 456), v7, (char *)v8 - (char *)v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
  LODWORD(v7) = 1;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v7);
  sub_20E93FA7C(a1, (double **)(a2 + 744));
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 768));
  LODWORD(v7) = 1;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v7);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 776));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 784));
}

void sub_20E93FA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E93FA7C(uint64_t a1, double **a2)
{
  double *v4;
  double *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  _QWORD *v9;
  char *ii;
  uint64_t v11;
  void (*v12)(uint64_t);
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *i;
  uint64_t v17;
  void (*v18)(uint64_t);
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *j;
  uint64_t v23;
  void (*v24)(uint64_t);
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  char *k;
  uint64_t v30;
  void (*v31)(uint64_t);
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *m;
  uint64_t v36;
  void (*v37)(uint64_t);
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *n;
  uint64_t v42;
  void (*v43)(uint64_t);
  _QWORD *v44;
  _QWORD *v45;
  std::bad_cast *exception;
  std::bad_cast *v47;
  std::bad_cast *v48;
  std::bad_cast *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;

  v50 = 0x6DB6DB6DB6DB6DB7 * (a2[1] - *a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v50);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * (v4 - *a2);
  if (v50 <= v6)
  {
    if (v50 < v6)
    {
      v4 = &v5[7 * v50];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E93F738((char **)a2, v50 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = v4;
    while (1)
    {
      v51 = 0;
      sub_20E9EE078(*(_QWORD *)(a1 + 48), v5);
      sub_20E9EDCA8(*(_QWORD *)(a1 + 48), &v51);
      v8 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v8, (uint64_t)&v52);
      if (v52 == 2)
        break;
      if (v52 == 3)
      {
        v5[1] = (double)v53;
        v9 = v54;
        v54 = 0;
        if (!v9)
          goto LABEL_23;
        goto LABEL_17;
      }
      if (v52 != 4)
        goto LABEL_94;
      *((_QWORD *)v5 + 1) = v53;
      v9 = v54;
      v54 = 0;
      if (v9)
        goto LABEL_17;
LABEL_23:
      sub_20E9EFAC4(v8, (uint64_t)&v52);
      if (v52 == 2)
      {
        v5[2] = (double)(unint64_t)v53;
        v15 = v54;
        v54 = 0;
        if (!v15)
          goto LABEL_37;
LABEL_31:
        for (i = (char *)v15[4]; i != (char *)v15[6]; i -= 16)
        {
          v18 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v17 = *((_QWORD *)i - 1);
          v18(v17);
        }
        free(i);
        v19 = (_QWORD *)v15[3];
        if (v19)
        {
          do
          {
            v20 = (_QWORD *)*v19;
            free(v19);
            v19 = v20;
          }
          while (v20);
        }
        free(v15);
        goto LABEL_37;
      }
      if (v52 == 4)
      {
        *((_QWORD *)v5 + 2) = v53;
        v15 = v54;
        v54 = 0;
        if (!v15)
          goto LABEL_37;
        goto LABEL_31;
      }
      if (v52 != 3)
        goto LABEL_94;
      v5[2] = (double)v53;
      v15 = v54;
      v54 = 0;
      if (v15)
        goto LABEL_31;
LABEL_37:
      sub_20E9EFAC4(v8, (uint64_t)&v52);
      if (v52 == 2)
      {
        v5[3] = (double)(unint64_t)v53;
        v21 = v54;
        v54 = 0;
        if (!v21)
          goto LABEL_51;
LABEL_45:
        for (j = (char *)v21[4]; j != (char *)v21[6]; j -= 16)
        {
          v24 = (void (*)(uint64_t))*((_QWORD *)j - 2);
          v23 = *((_QWORD *)j - 1);
          v24(v23);
        }
        free(j);
        v25 = (_QWORD *)v21[3];
        if (v25)
        {
          do
          {
            v26 = (_QWORD *)*v25;
            free(v25);
            v25 = v26;
          }
          while (v26);
        }
        free(v21);
        goto LABEL_51;
      }
      if (v52 == 4)
      {
        *((_QWORD *)v5 + 3) = v53;
        v21 = v54;
        v54 = 0;
        if (!v21)
          goto LABEL_51;
        goto LABEL_45;
      }
      if (v52 != 3)
      {
LABEL_94:
        exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        exception->__vftable = 0;
        v47 = std::bad_cast::bad_cast(exception);
        v47->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v47, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v5[3] = (double)v53;
      v21 = v54;
      v54 = 0;
      if (v21)
        goto LABEL_45;
LABEL_51:
      sub_20E9EDCA8(*(_QWORD *)(a1 + 48), &v51);
      v27 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v27, (uint64_t)&v52);
      if (v52 == 2)
      {
        v5[4] = (double)(unint64_t)v53;
        v28 = v54;
        v54 = 0;
        if (!v28)
          goto LABEL_65;
LABEL_59:
        for (k = (char *)v28[4]; k != (char *)v28[6]; k -= 16)
        {
          v31 = (void (*)(uint64_t))*((_QWORD *)k - 2);
          v30 = *((_QWORD *)k - 1);
          v31(v30);
        }
        free(k);
        v32 = (_QWORD *)v28[3];
        if (v32)
        {
          do
          {
            v33 = (_QWORD *)*v32;
            free(v32);
            v32 = v33;
          }
          while (v33);
        }
        free(v28);
        goto LABEL_65;
      }
      if (v52 == 3)
      {
        v5[4] = (double)v53;
        v28 = v54;
        v54 = 0;
        if (!v28)
          goto LABEL_65;
        goto LABEL_59;
      }
      if (v52 != 4)
        goto LABEL_95;
      *((_QWORD *)v5 + 4) = v53;
      v28 = v54;
      v54 = 0;
      if (v28)
        goto LABEL_59;
LABEL_65:
      sub_20E9EFAC4(v27, (uint64_t)&v52);
      if (v52 == 2)
      {
        v5[5] = (double)(unint64_t)v53;
        v34 = v54;
        v54 = 0;
        if (!v34)
          goto LABEL_79;
LABEL_73:
        for (m = (char *)v34[4]; m != (char *)v34[6]; m -= 16)
        {
          v37 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v36 = *((_QWORD *)m - 1);
          v37(v36);
        }
        free(m);
        v38 = (_QWORD *)v34[3];
        if (v38)
        {
          do
          {
            v39 = (_QWORD *)*v38;
            free(v38);
            v38 = v39;
          }
          while (v39);
        }
        free(v34);
        goto LABEL_79;
      }
      if (v52 == 4)
      {
        *((_QWORD *)v5 + 5) = v53;
        v34 = v54;
        v54 = 0;
        if (!v34)
          goto LABEL_79;
        goto LABEL_73;
      }
      if (v52 != 3)
        goto LABEL_95;
      v5[5] = (double)v53;
      v34 = v54;
      v54 = 0;
      if (v34)
        goto LABEL_73;
LABEL_79:
      sub_20E9EFAC4(v27, (uint64_t)&v52);
      switch(v52)
      {
        case 2:
          v5[6] = (double)(unint64_t)v53;
          v40 = v54;
          v54 = 0;
          if (v40)
            goto LABEL_87;
          break;
        case 4:
          *((_QWORD *)v5 + 6) = v53;
          v40 = v54;
          v54 = 0;
          if (v40)
            goto LABEL_87;
          break;
        case 3:
          v5[6] = (double)v53;
          v40 = v54;
          v54 = 0;
          if (v40)
          {
LABEL_87:
            for (n = (char *)v40[4]; n != (char *)v40[6]; n -= 16)
            {
              v43 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v42 = *((_QWORD *)n - 1);
              v43(v42);
            }
            free(n);
            v44 = (_QWORD *)v40[3];
            if (v44)
            {
              do
              {
                v45 = (_QWORD *)*v44;
                free(v44);
                v44 = v45;
              }
              while (v45);
            }
            free(v40);
          }
          break;
        default:
LABEL_95:
          v48 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v48->__vftable = 0;
          v49 = std::bad_cast::bad_cast(v48);
          v49->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v49, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v5 += 7;
      if (v5 == v7)
        return;
    }
    v5[1] = (double)(unint64_t)v53;
    v9 = v54;
    v54 = 0;
    if (!v9)
      goto LABEL_23;
LABEL_17:
    for (ii = (char *)v9[4]; ii != (char *)v9[6]; ii -= 16)
    {
      v12 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v11 = *((_QWORD *)ii - 1);
      v12(v11);
    }
    free(ii);
    v13 = (_QWORD *)v9[3];
    if (v13)
    {
      do
      {
        v14 = (_QWORD *)*v13;
        free(v13);
        v13 = v14;
      }
      while (v14);
    }
    free(v9);
    goto LABEL_23;
  }
}

void sub_20E940014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  char *i;
  uint64_t v16;
  void (*v17)(uint64_t);
  _QWORD *v18;
  _QWORD *v19;

  if (a14)
  {
    for (i = (char *)a14[4]; i != (char *)a14[6]; i -= 16)
    {
      v17 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v16 = *((_QWORD *)i - 1);
      v17(v16);
    }
    free(i);
    v18 = (_QWORD *)a14[3];
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        free(v18);
        v18 = v19;
      }
      while (v19);
    }
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9400E0(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unsigned int v10;

  v8 = 0xCBEEA4E1A08AD8F3 * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v8);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xCBEEA4E1A08AD8F3 * ((v4 - *a2) >> 3);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = &v5[472 * v8];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E9401E4(a2, v8 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = 472 * ((v4 - v5) / 472);
    do
    {
      v10 = 4;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v10);
      sub_20E9403B0((uint64_t)&v9, a1, v5, v10);
      v5 += 472;
      v7 -= 472;
    }
    while (v7);
  }
}

void sub_20E9401E4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCBEEA4E1A08AD8F3 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 472 * ((472 * a2 - 472) / 0x1D8) + 472;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCBEEA4E1A08AD8F3 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x8AD8F2FBA93868)
      sub_20E92CED8();
    v9 = 0xCBEEA4E1A08AD8F3 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x456C797DD49C34)
      v10 = 0x8AD8F2FBA93868;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x8AD8F2FBA93868)
        sub_20E877A38();
      v11 = (char *)operator new(472 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[472 * v7];
    v14 = &v11[472 * v10];
    v15 = 472 * ((472 * a2 - 472) / 0x1D8) + 472;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 472;
        v13 -= 472;
        memcpy(v13, v5, 0x1D4uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void *sub_20E9403B0(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  int v10;
  _OWORD v11[29];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[289];
  int v25;

  if (a4 <= 3)
  {
    *(_QWORD *)&v12 = 0;
    DWORD2(v12) = 0;
    LODWORD(v13) = 0;
    *(_QWORD *)&v14 = 0;
    DWORD2(v14) = 0;
    LODWORD(v15) = 0;
    v25 = 0;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    memset(v24, 0, sizeof(v24));
    sub_20E940860(a2, (uint64_t)&v12, a4);
    *(_QWORD *)&v11[1] = v13;
    v11[0] = v12;
    *(_OWORD *)((char *)&v11[1] + 8) = v14;
    *((_QWORD *)&v11[2] + 1) = v15;
    v11[7] = v20;
    v11[8] = v21;
    v11[9] = v22;
    v11[10] = v23;
    v11[3] = v16;
    v11[4] = v17;
    v11[5] = v18;
    v11[6] = v19;
    memcpy(&v11[11], v24, 0x120uLL);
    v10 = v25;
    result = memcpy(a3, v11, 0x1D0uLL);
    a3[116] = v10;
  }
  else
  {
    v6 = a2 + 16;
    sub_20E90A71C((_QWORD *)(a2 + 16));
    sub_20E940530(a2, (uint64_t)a3, 4u);
    v7 = *(_QWORD *)(a2 + 32);
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16);
    v9 = *(_QWORD *)(v7 - 16) - (_QWORD)result + *(_QWORD *)(v7 - 8);
    if (v9)
      result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(a2 + 16, v9);
    *(_QWORD *)(a2 + 32) -= 16;
  }
  return result;
}

void sub_20E940530(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a3 <= 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/RelocalizationResultSample.hpp", 75, (uint64_t)"version > 3u", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 8));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 16));
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 24));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 32));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 40));
  v5 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v5, (double *)(a2 + 48));
  sub_20E9EE078(v5, (double *)(a2 + 56));
  sub_20E9EE078(v5, (double *)(a2 + 64));
  sub_20E9EE078(v5, (double *)(a2 + 72));
  sub_20E9EE078(v5, (double *)(a2 + 80));
  sub_20E9EE078(v5, (double *)(a2 + 88));
  sub_20E9EE078(v5, (double *)(a2 + 96));
  sub_20E9EE078(v5, (double *)(a2 + 104));
  sub_20E9EE078(v5, (double *)(a2 + 112));
  sub_20E9EE078(v5, (double *)(a2 + 120));
  sub_20E9EE078(v5, (double *)(a2 + 128));
  sub_20E9EE078(v5, (double *)(a2 + 136));
  sub_20E9EE078(v5, (double *)(a2 + 144));
  sub_20E9EE078(v5, (double *)(a2 + 152));
  sub_20E9EE078(v5, (double *)(a2 + 160));
  sub_20E9EE078(v5, (double *)(a2 + 168));
  v6 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v6, (double *)(a2 + 176));
  sub_20E9EE078(v6, (double *)(a2 + 184));
  sub_20E9EE078(v6, (double *)(a2 + 192));
  sub_20E9EE078(v6, (double *)(a2 + 200));
  sub_20E9EE078(v6, (double *)(a2 + 208));
  sub_20E9EE078(v6, (double *)(a2 + 216));
  sub_20E9EE078(v6, (double *)(a2 + 224));
  sub_20E9EE078(v6, (double *)(a2 + 232));
  sub_20E9EE078(v6, (double *)(a2 + 240));
  sub_20E9EE078(v6, (double *)(a2 + 248));
  sub_20E9EE078(v6, (double *)(a2 + 256));
  sub_20E9EE078(v6, (double *)(a2 + 264));
  sub_20E9EE078(v6, (double *)(a2 + 272));
  sub_20E9EE078(v6, (double *)(a2 + 280));
  sub_20E9EE078(v6, (double *)(a2 + 288));
  sub_20E9EE078(v6, (double *)(a2 + 296));
  sub_20E9EE078(v6, (double *)(a2 + 304));
  sub_20E9EE078(v6, (double *)(a2 + 312));
  sub_20E9EE078(v6, (double *)(a2 + 320));
  sub_20E9EE078(v6, (double *)(a2 + 328));
  sub_20E9EE078(v6, (double *)(a2 + 336));
  sub_20E9EE078(v6, (double *)(a2 + 344));
  sub_20E9EE078(v6, (double *)(a2 + 352));
  sub_20E9EE078(v6, (double *)(a2 + 360));
  sub_20E9EE078(v6, (double *)(a2 + 368));
  sub_20E9EE078(v6, (double *)(a2 + 376));
  sub_20E9EE078(v6, (double *)(a2 + 384));
  sub_20E9EE078(v6, (double *)(a2 + 392));
  sub_20E9EE078(v6, (double *)(a2 + 400));
  sub_20E9EE078(v6, (double *)(a2 + 408));
  sub_20E9EE078(v6, (double *)(a2 + 416));
  sub_20E9EE078(v6, (double *)(a2 + 424));
  sub_20E9EE078(v6, (double *)(a2 + 432));
  sub_20E9EE078(v6, (double *)(a2 + 440));
  sub_20E9EE078(v6, (double *)(a2 + 448));
  sub_20E9EE078(v6, (double *)(a2 + 456));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 464));
}

void sub_20E940860(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;

  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 8));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 16));
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 24));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 32));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v6, (double *)(a2 + 48));
  sub_20E9EE078(v6, (double *)(a2 + 56));
  sub_20E9EE078(v6, (double *)(a2 + 64));
  sub_20E9EE078(v6, (double *)(a2 + 72));
  sub_20E9EE078(v6, (double *)(a2 + 80));
  sub_20E9EE078(v6, (double *)(a2 + 88));
  sub_20E9EE078(v6, (double *)(a2 + 96));
  sub_20E9EE078(v6, (double *)(a2 + 104));
  sub_20E9EE078(v6, (double *)(a2 + 112));
  sub_20E9EE078(v6, (double *)(a2 + 120));
  sub_20E9EE078(v6, (double *)(a2 + 128));
  sub_20E9EE078(v6, (double *)(a2 + 136));
  sub_20E9EE078(v6, (double *)(a2 + 144));
  sub_20E9EE078(v6, (double *)(a2 + 152));
  sub_20E9EE078(v6, (double *)(a2 + 160));
  sub_20E9EE078(v6, (double *)(a2 + 168));
  v7 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v7, (double *)(a2 + 176));
  sub_20E9EE078(v7, (double *)(a2 + 184));
  sub_20E9EE078(v7, (double *)(a2 + 192));
  sub_20E9EE078(v7, (double *)(a2 + 200));
  sub_20E9EE078(v7, (double *)(a2 + 208));
  sub_20E9EE078(v7, (double *)(a2 + 216));
  sub_20E9EE078(v7, (double *)(a2 + 224));
  sub_20E9EE078(v7, (double *)(a2 + 232));
  sub_20E9EE078(v7, (double *)(a2 + 240));
  sub_20E9EE078(v7, (double *)(a2 + 248));
  sub_20E9EE078(v7, (double *)(a2 + 256));
  sub_20E9EE078(v7, (double *)(a2 + 264));
  sub_20E9EE078(v7, (double *)(a2 + 272));
  sub_20E9EE078(v7, (double *)(a2 + 280));
  sub_20E9EE078(v7, (double *)(a2 + 288));
  sub_20E9EE078(v7, (double *)(a2 + 296));
  sub_20E9EE078(v7, (double *)(a2 + 304));
  sub_20E9EE078(v7, (double *)(a2 + 312));
  sub_20E9EE078(v7, (double *)(a2 + 320));
  sub_20E9EE078(v7, (double *)(a2 + 328));
  sub_20E9EE078(v7, (double *)(a2 + 336));
  sub_20E9EE078(v7, (double *)(a2 + 344));
  sub_20E9EE078(v7, (double *)(a2 + 352));
  sub_20E9EE078(v7, (double *)(a2 + 360));
  sub_20E9EE078(v7, (double *)(a2 + 368));
  sub_20E9EE078(v7, (double *)(a2 + 376));
  sub_20E9EE078(v7, (double *)(a2 + 384));
  sub_20E9EE078(v7, (double *)(a2 + 392));
  sub_20E9EE078(v7, (double *)(a2 + 400));
  sub_20E9EE078(v7, (double *)(a2 + 408));
  sub_20E9EE078(v7, (double *)(a2 + 416));
  sub_20E9EE078(v7, (double *)(a2 + 424));
  sub_20E9EE078(v7, (double *)(a2 + 432));
  sub_20E9EE078(v7, (double *)(a2 + 440));
  sub_20E9EE078(v7, (double *)(a2 + 448));
  sub_20E9EE078(v7, (double *)(a2 + 456));
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 464));
  if (a3 >= 2)
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 468));
}

void sub_20E940B74(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  char *j;
  uint64_t v11;
  void (*v12)(uint64_t);
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char *k;
  uint64_t v18;
  void (*v19)(uint64_t);
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *m;
  uint64_t v24;
  void (*v25)(uint64_t);
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t **v31;
  uint64_t **v32;
  char *n;
  uint64_t v34;
  void (*v35)(uint64_t);
  _QWORD *v36;
  _QWORD *v37;
  unsigned int v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::bad_cast *exception;
  std::bad_cast *v45;
  std::bad_cast *v46;
  std::bad_cast *v47;
  uint64_t v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;

  v56 = 0;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v56);
  v4 = (uint64_t **)(a2 + 8);
  sub_20E86872C(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v48 = v56;
  if (v56)
  {
    for (i = 0; i != v48; ++i)
    {
      v49 = 0;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v49);
      v7 = *(_QWORD *)(a1 + 48);
      v8 = &v50;
      do
      {
        sub_20E9EFAC4(v7, (uint64_t)&v57);
        if (v57 == 2)
        {
          *(double *)v8 = (double)(unint64_t)v58;
          v9 = v59;
          v59 = 0;
          if (!v9)
            goto LABEL_8;
LABEL_17:
          for (j = (char *)v9[4]; j != (char *)v9[6]; j -= 16)
          {
            v12 = (void (*)(uint64_t))*((_QWORD *)j - 2);
            v11 = *((_QWORD *)j - 1);
            v12(v11);
          }
          free(j);
          v13 = (_QWORD *)v9[3];
          if (v13)
          {
            do
            {
              v14 = (_QWORD *)*v13;
              free(v13);
              v13 = v14;
            }
            while (v14);
          }
          free(v9);
          goto LABEL_8;
        }
        if (v57 == 3)
        {
          *(double *)v8 = (double)v58;
          v9 = v59;
          v59 = 0;
          if (!v9)
            goto LABEL_8;
          goto LABEL_17;
        }
        if (v57 != 4)
        {
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v45 = std::bad_cast::bad_cast(exception);
          v45->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v45, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        *(_QWORD *)v8 = v58;
        v9 = v59;
        v59 = 0;
        if (v9)
          goto LABEL_17;
LABEL_8:
        v8 = (__int128 *)((char *)v8 + 8);
      }
      while (v8 != (__int128 *)((char *)&v54 + 8));
      v15 = *(_QWORD *)(a1 + 48);
      sub_20E9EFAC4(v15, (uint64_t)&v57);
      if (v57 == 2)
      {
        *((double *)&v54 + 1) = (double)(unint64_t)v58;
        v16 = v59;
        v59 = 0;
        if (!v16)
          goto LABEL_37;
        goto LABEL_31;
      }
      if (v57 == 3)
      {
        *((double *)&v54 + 1) = (double)v58;
        v16 = v59;
        v59 = 0;
        if (v16)
          goto LABEL_31;
        goto LABEL_37;
      }
      if (v57 != 4)
        goto LABEL_76;
      *((_QWORD *)&v54 + 1) = v58;
      v16 = v59;
      v59 = 0;
      if (!v16)
        goto LABEL_37;
LABEL_31:
      for (k = (char *)v16[4]; k != (char *)v16[6]; k -= 16)
      {
        v19 = (void (*)(uint64_t))*((_QWORD *)k - 2);
        v18 = *((_QWORD *)k - 1);
        v19(v18);
      }
      free(k);
      v20 = (_QWORD *)v16[3];
      if (v20)
      {
        do
        {
          v21 = (_QWORD *)*v20;
          free(v20);
          v20 = v21;
        }
        while (v21);
      }
      free(v16);
LABEL_37:
      sub_20E9EFAC4(v15, (uint64_t)&v57);
      if (v57 == 2)
      {
        *(double *)&v55 = (double)(unint64_t)v58;
        v22 = v59;
        v59 = 0;
        if (!v22)
          goto LABEL_51;
        goto LABEL_45;
      }
      if (v57 == 4)
      {
        *(_QWORD *)&v55 = v58;
        v22 = v59;
        v59 = 0;
        if (v22)
          goto LABEL_45;
        goto LABEL_51;
      }
      if (v57 != 3)
      {
LABEL_76:
        v46 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v46->__vftable = 0;
        v47 = std::bad_cast::bad_cast(v46);
        v47->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v47, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(double *)&v55 = (double)v58;
      v22 = v59;
      v59 = 0;
      if (!v22)
        goto LABEL_51;
LABEL_45:
      for (m = (char *)v22[4]; m != (char *)v22[6]; m -= 16)
      {
        v25 = (void (*)(uint64_t))*((_QWORD *)m - 2);
        v24 = *((_QWORD *)m - 1);
        v25(v24);
      }
      free(m);
      v26 = (_QWORD *)v22[3];
      if (v26)
      {
        do
        {
          v27 = (_QWORD *)*v26;
          free(v26);
          v26 = v27;
        }
        while (v27);
      }
      free(v22);
LABEL_51:
      sub_20E9EFAC4(v15, (uint64_t)&v57);
      if (v57 == 2)
      {
        *((double *)&v55 + 1) = (double)(unint64_t)v58;
        v28 = v59;
        v59 = 0;
        if (v28)
          goto LABEL_60;
LABEL_57:
        v29 = *v4;
        v30 = v49;
        v31 = (uint64_t **)(a2 + 8);
        v32 = (uint64_t **)(a2 + 8);
        if (*v4)
          goto LABEL_68;
        goto LABEL_72;
      }
      if (v57 == 4)
      {
        *((_QWORD *)&v55 + 1) = v58;
        v28 = v59;
        v59 = 0;
        if (v28)
          goto LABEL_60;
        goto LABEL_57;
      }
      if (v57 != 3)
        goto LABEL_76;
      *((double *)&v55 + 1) = (double)v58;
      v28 = v59;
      v59 = 0;
      if (!v28)
        goto LABEL_57;
LABEL_60:
      for (n = (char *)v28[4]; n != (char *)v28[6]; n -= 16)
      {
        v35 = (void (*)(uint64_t))*((_QWORD *)n - 2);
        v34 = *((_QWORD *)n - 1);
        v35(v34);
      }
      free(n);
      v36 = (_QWORD *)v28[3];
      if (v36)
      {
        do
        {
          v37 = (_QWORD *)*v36;
          free(v36);
          v36 = v37;
        }
        while (v37);
      }
      free(v28);
      v29 = *v4;
      v30 = v49;
      v31 = (uint64_t **)(a2 + 8);
      v32 = (uint64_t **)(a2 + 8);
      if (*v4)
      {
        while (1)
        {
LABEL_68:
          while (1)
          {
            v32 = (uint64_t **)v29;
            v38 = *((_DWORD *)v29 + 8);
            if (v30 >= v38)
              break;
            v29 = *v32;
            v31 = v32;
            if (!*v32)
              goto LABEL_72;
          }
          if (v38 >= v30)
            break;
          v29 = v32[1];
          if (!v29)
          {
            v31 = v32 + 1;
            goto LABEL_72;
          }
        }
      }
      else
      {
LABEL_72:
        v39 = (char *)operator new(0x88uLL);
        v40 = v53;
        *(_OWORD *)(v39 + 72) = v52;
        *(_OWORD *)(v39 + 88) = v40;
        v41 = v55;
        *(_OWORD *)(v39 + 104) = v54;
        *(_OWORD *)(v39 + 120) = v41;
        v42 = v51;
        *(_OWORD *)(v39 + 40) = v50;
        *((_DWORD *)v39 + 8) = v30;
        *(_OWORD *)(v39 + 56) = v42;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = v32;
        *v31 = (uint64_t *)v39;
        v43 = **(_QWORD **)a2;
        if (v43)
        {
          *(_QWORD *)a2 = v43;
          v6 = *v31;
        }
        else
        {
          v6 = (uint64_t *)v39;
        }
        sub_20E868578(*(uint64_t **)(a2 + 8), v6);
        ++*(_QWORD *)(a2 + 16);
      }
    }
  }
}

void sub_20E941058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD *a27)
{
  char *i;
  uint64_t v29;
  void (*v30)(uint64_t);
  _QWORD *v31;
  _QWORD *v32;

  if (a27)
  {
    for (i = (char *)a27[4]; i != (char *)a27[6]; i -= 16)
    {
      v30 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v29 = *((_QWORD *)i - 1);
      v30(v29);
    }
    free(i);
    v31 = (_QWORD *)a27[3];
    if (v31)
    {
      do
      {
        v32 = (_QWORD *)*v31;
        free(v31);
        v31 = v32;
      }
      while (v32);
    }
    free(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E94111C(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  char v7;

  v4 = (_DWORD *)(a2 + 4);
  v5 = (_DWORD *)(a2 + 8);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)a2);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), v4);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), v5);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 12));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 16));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 20));
  v7 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v7);
  if (v7)
  {
    v6 = (_DWORD *)(a2 + 24);
    if (!*(_BYTE *)(a2 + 36))
    {
      *(_DWORD *)(a2 + 32) = 0;
      *(_QWORD *)v6 = 0;
      *(_BYTE *)(a2 + 36) = 1;
    }
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), v6);
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 28));
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 32));
  }
  else if (*(_BYTE *)(a2 + 36))
  {
    *(_BYTE *)(a2 + 36) = 0;
  }
}

uint64_t sub_20E941218(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20E9414F0((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xF47E8FD1FA3F47E9 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_BYTE **)(a2 + 24);
  v4 = *(_BYTE **)(a2 + 32);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v6 >> 3) >= 0x222222222222223)
      sub_20E92CED8();
    v7 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 40) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 32) = v8;
  }
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x2E8uLL);
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  v9 = *(_BYTE **)(a2 + 792);
  v10 = *(_BYTE **)(a2 + 800);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) >= 0x492492492492493)
      sub_20E92CED8();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 792) = v12;
    *(_QWORD *)(a1 + 800) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 808) = v13;
    memcpy(v12, v9, v11);
    *(_QWORD *)(a1 + 800) = v13;
  }
  v14 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 828) = *(_OWORD *)(a2 + 828);
  *(_OWORD *)(a1 + 816) = v14;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  v15 = *(_BYTE **)(a2 + 848);
  v16 = *(_BYTE **)(a2 + 856);
  v17 = v16 - v15;
  if (v16 != v15)
  {
    if (0xCBEEA4E1A08AD8F3 * (v17 >> 3) >= 0x8AD8F2FBA93869)
      sub_20E92CED8();
    v18 = (char *)operator new(v17);
    *(_QWORD *)(a1 + 848) = v18;
    *(_QWORD *)(a1 + 856) = v18;
    v19 = &v18[8 * (v17 >> 3)];
    *(_QWORD *)(a1 + 864) = v19;
    memcpy(v18, v15, v17 - 4);
    *(_QWORD *)(a1 + 856) = v19;
  }
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = a1 + 888;
  sub_20E941AAC((uint64_t *)(a1 + 880), *(unsigned int **)(a2 + 880), (unsigned int *)(a2 + 888));
  return a1;
}

void sub_20E941458(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;
  _QWORD **v6;
  void *v8;
  void *v9;
  void *v10;

  sub_20E86872C(v5, *v6);
  v8 = *v4;
  if (*v4)
  {
    v1[107] = v8;
    operator delete(v8);
    v9 = *v3;
    if (!*v3)
    {
LABEL_3:
      v10 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v9 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[100] = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
  {
LABEL_4:
    sub_20E938550(v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[4] = v10;
  operator delete(v10);
  sub_20E938550(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9414F0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x5C0B81702E05C1)
      sub_20E92CED8();
    result = operator new(712 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[89 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20E941678(&v8[v9 / 8], a2 + v9);
        v9 += 712;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20E9415B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E9415F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20E9415C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 712)
    sub_20E9385B0((_QWORD *)(v10 - 712 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E9415F4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20E9415F4(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v4 -= 89;
          sub_20E9385B0(v4);
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20E941678(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  sub_20E9417E0((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
  memcpy(a1 + 22, (const void *)(a2 + 176), 0x200uLL);
  a1[86] = 0;
  a1[88] = 0;
  a1[87] = 0;
  v4 = *(_BYTE **)(a2 + 688);
  v5 = *(_BYTE **)(a2 + 696);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E92CED8();
    v7 = (char *)operator new(v6);
    a1[86] = v7;
    a1[87] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[88] = v8;
    memcpy(v7, v4, v6);
    a1[87] = v8;
  }
  return a1;
}

void sub_20E941744(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = *v2;
  if (*v2)
  {
    v1[87] = v4;
    operator delete(v4);
    v5 = (void *)v1[19];
    if (!v5)
    {
LABEL_3:
      v6 = (void *)v1[16];
      if (!v6)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v5 = (void *)v1[19];
    if (!v5)
      goto LABEL_3;
  }
  v1[20] = v5;
  operator delete(v5);
  v6 = (void *)v1[16];
  if (!v6)
  {
LABEL_4:
    v7 = (void *)v1[12];
    if (!v7)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v1[17] = v6;
  operator delete(v6);
  v7 = (void *)v1[12];
  if (!v7)
  {
LABEL_5:
    v8 = (void *)v1[8];
    if (!v8)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  v1[13] = v7;
  operator delete(v7);
  v8 = (void *)v1[8];
  if (!v8)
  {
LABEL_6:
    v9 = (void *)v1[5];
    if (!v9)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  v1[9] = v8;
  operator delete(v8);
  v9 = (void *)v1[5];
  if (!v9)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  v1[6] = v9;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9417E0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  char v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 4) >= 0x555555555555556)
      sub_20E92CED8();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    v10 = &v9[16 * (v8 >> 4)];
    *(_QWORD *)(a1 + 48) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 40) = v10;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20E92CED8();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    v15 = &v14[64 * (v13 >> 6)];
    *(_QWORD *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 64) = v15;
  }
  v16 = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 11);
  v17 = (_BYTE *)*((_QWORD *)a2 + 12);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 88) = v20;
    *(_QWORD *)(a1 + 96) = v20;
    v21 = &v20[8 * (v19 >> 3)];
    *(_QWORD *)(a1 + 104) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 96) = v21;
  }
  v22 = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v24 = (_BYTE *)*((_QWORD *)a2 + 15);
  v23 = (_BYTE *)*((_QWORD *)a2 + 16);
  v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0)
      sub_20E92CED8();
    v26 = (char *)operator new(v23 - v24);
    *(_QWORD *)(a1 + 120) = v26;
    *(_QWORD *)(a1 + 128) = v26;
    v27 = &v26[8 * (v25 >> 3)];
    *(_QWORD *)(a1 + 136) = v27;
    memcpy(v26, v24, v25);
    *(_QWORD *)(a1 + 128) = v27;
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v29 = (_BYTE *)*((_QWORD *)a2 + 18);
  v28 = (_BYTE *)*((_QWORD *)a2 + 19);
  v30 = v28 - v29;
  if (v28 != v29)
  {
    if (v30 < 0)
      sub_20E867F44();
    v31 = (char *)operator new(v28 - v29);
    *(_QWORD *)(a1 + 144) = v31;
    *(_QWORD *)(a1 + 152) = v31;
    v32 = &v31[4 * (v30 >> 2)];
    *(_QWORD *)(a1 + 160) = v32;
    memcpy(v31, v29, v30);
    *(_QWORD *)(a1 + 152) = v32;
  }
  return a1;
}

void sub_20E9419EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = *v6;
  if (*v6)
  {
    v1[19] = v8;
    operator delete(v8);
    v9 = *v5;
    if (!*v5)
    {
LABEL_3:
      v10 = *v4;
      if (!*v4)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v9 = *v5;
    if (!*v5)
      goto LABEL_3;
  }
  v1[16] = v9;
  operator delete(v9);
  v10 = *v4;
  if (!*v4)
  {
LABEL_4:
    v11 = *v3;
    if (!*v3)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v1[12] = v10;
  operator delete(v10);
  v11 = *v3;
  if (!*v3)
  {
LABEL_5:
    v12 = *v2;
    if (!*v2)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  v1[8] = v11;
  operator delete(v11);
  v12 = *v2;
  if (!*v2)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_6:
  v1[5] = v12;
  operator delete(v12);
  goto LABEL_7;
}

void sub_20E941A9C()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E941A20);
  JUMPOUT(0x20E941A18);
}

uint64_t *sub_20E941AAC(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  unsigned int *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23[9];

  if (a2 != a3)
  {
    v23[7] = v3;
    v23[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20E941BD8(v7, v8, v23, &v22, v6 + 8);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x88uLL);
        v12 = *((_OWORD *)v6 + 2);
        v13 = *((_OWORD *)v6 + 4);
        v11[3] = *((_OWORD *)v6 + 3);
        v11[4] = v13;
        v11[2] = v12;
        v14 = *((_OWORD *)v6 + 5);
        v15 = *((_OWORD *)v6 + 6);
        v16 = *((_OWORD *)v6 + 7);
        *((_QWORD *)v11 + 16) = *((_QWORD *)v6 + 16);
        v11[6] = v15;
        v11[7] = v16;
        v11[5] = v14;
        v17 = v23[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v17;
        *v10 = (uint64_t)v11;
        v18 = *(_QWORD **)*v7;
        if (v18)
        {
          *v7 = (uint64_t)v18;
          v19 = (uint64_t *)*v10;
        }
        else
        {
          v19 = (uint64_t *)v11;
        }
        result = sub_20E868578((uint64_t *)v7[1], v19);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v20 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v20 = (unsigned int *)*((_QWORD *)v6 + 2);
        v21 = *(_QWORD *)v20 == (_QWORD)v6;
        v6 = v20;
      }
      while (!v21);
LABEL_3:
      v6 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

uint64_t *sub_20E941BD8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t sub_20E941D88(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(_QWORD **)a1;
    if (v5 != v4)
    {
      do
      {
        v5 -= 89;
        sub_20E9385B0(v5);
      }
      while (v5 != v4);
      v6 = *(_QWORD **)a1;
    }
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x2E8uLL);
  v8 = *(void **)(a1 + 792);
  if (v8)
  {
    *(_QWORD *)(a1 + 800) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 792) = 0;
    *(_QWORD *)(a1 + 800) = 0;
    *(_QWORD *)(a1 + 808) = 0;
  }
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a2 + 808) = 0;
  *(_OWORD *)(a2 + 792) = 0u;
  v9 = *(_OWORD *)(a2 + 828);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 828) = v9;
  v10 = *(void **)(a1 + 848);
  if (v10)
  {
    *(_QWORD *)(a1 + 856) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 848) = 0;
    *(_QWORD *)(a1 + 856) = 0;
    *(_QWORD *)(a1 + 864) = 0;
  }
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a2 + 856) = 0;
  *(_QWORD *)(a2 + 864) = 0;
  *(_QWORD *)(a2 + 848) = 0;
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  v11 = a1 + 888;
  sub_20E86872C(a1 + 880, *(_QWORD **)(a1 + 888));
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  v12 = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a1 + 888) = v12;
  v13 = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 896) = v13;
  if (v13)
  {
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(a2 + 880) = a2 + 888;
    *(_QWORD *)(a2 + 888) = 0;
    *(_QWORD *)(a2 + 896) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 880) = v11;
  }
  return a1;
}

uint64_t sub_20E941F48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _DWORD *v20;
  void *__p[2];
  void *v22[2];
  int v23;

  __p[0] = 0;
  __p[1] = 0;
  v22[0] = 0;
  sub_20E9426A4(a1, a2 - (_QWORD)a1, a4, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v22[0]) < 0)
    operator delete(__p[0]);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 120) + 280))(*(_QWORD *)(a3 + 120));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v22 = 0u;
  v23 = 1065353216;
  v7 = *(uint64_t **)(v6 + 56);
  if (v7)
  {
    do
    {
      v8 = *((_DWORD *)v7 + 4);
      v20 = (_DWORD *)v7 + 5;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)v7 + 5, (uint64_t)&unk_2102DB95C, &v20) + 5) = v8;
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (__p[1])
    {
      v9 = *(unsigned int *)(a4 + 48);
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = *(unsigned int *)(a4 + 48);
        if (__p[1] <= (void *)v9)
          v11 = v9 % (unint64_t)__p[1];
      }
      else
      {
        v11 = (LODWORD(__p[1]) - 1) & v9;
      }
      v12 = (uint64_t **)*((_QWORD *)__p[0] + v11);
      if (v12)
      {
        v13 = *v12;
        if (v13)
        {
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              v15 = v13[1];
              if (v15 == v9)
              {
                if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
                  goto LABEL_26;
              }
              else if ((v15 & ((unint64_t)__p[1] - 1)) != v11)
              {
                goto LABEL_27;
              }
              v13 = (uint64_t *)*v13;
              if (!v13)
                goto LABEL_27;
            }
          }
          do
          {
            v14 = v13[1];
            if (v14 == v9)
            {
              if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
              {
LABEL_26:
                *(_DWORD *)(a4 + 48) = *((_DWORD *)v13 + 5);
                break;
              }
            }
            else
            {
              if ((void *)v14 >= __p[1])
                v14 %= (unint64_t)__p[1];
              if (v14 != v11)
                break;
            }
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
      }
    }
  }
LABEL_27:
  v16 = v22[0];
  if (v22[0])
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = __p[0];
  __p[0] = 0;
  if (v18)
    operator delete(v18);
  kdebug_trace();
  return 1;
}

#error "20E94237C: call analysis failed (funcsize=242)"

void sub_20E942560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E942690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9426A4(void *__src, size_t __n, uint64_t a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  uint64_t v20;
  std::ios_base::failure *exception;
  std::error_code v22;
  std::string __msg;
  std::string __p;
  _QWORD v25[2];
  void (**v26)();
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[12];
  char v31;
  uint64_t v32;
  __int128 __dst;
  unint64_t v34;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v34 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v34) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v30, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v25, (uint64_t *)&__p, (uint64_t)v30, a5);
  v25[0] = &off_24C9B0298;
  v26 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v29, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_38;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v22.__val_ = 1;
      v22.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v22);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  sub_20E942A10(v25, a3);
  v25[0] = &off_24C9B71C0;
  v26 = (void (**)())&unk_24C9B7308;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    sub_20E9EF740((_QWORD *)(v20 + 8));
    MEMORY[0x212BC6398](v20, 0x10F2C40853B94B7);
  }
  v26 = off_24C9B7428;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v30[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v30[2] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v32);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
}

void sub_20E942988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

_QWORD *sub_20E942A10(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20E9EDADC(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20E942AE8((uint64_t)&v8, (uint64_t)a1, a2);
    return a1;
  }
  else
  {
    sub_20E90A71C(a1 + 2);
    sub_20E942CD8((uint64_t)a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_20E942AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _BYTE v6[312];
  void *__p[2];
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  *(_QWORD *)&v10 = 0;
  DWORD2(v10) = 0;
  LODWORD(v11) = 0;
  LOBYTE(v29) = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  LOBYTE(v28) = 0;
  sub_20E942CD8(a2, (uint64_t)__p);
  if (SHIBYTE(v8) < 0)
  {
    sub_20E860C04(&v4, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    v4 = *(_OWORD *)__p;
    v5 = v8;
  }
  *(_QWORD *)v6 = v9;
  *(_OWORD *)&v6[8] = v10;
  *(_QWORD *)&v6[24] = v11;
  *(_OWORD *)&v6[96] = v16;
  *(_OWORD *)&v6[112] = v17;
  *(_OWORD *)&v6[128] = v18;
  *(_OWORD *)&v6[144] = v19;
  *(_OWORD *)&v6[32] = v12;
  *(_OWORD *)&v6[48] = v13;
  *(_OWORD *)&v6[64] = v14;
  *(_OWORD *)&v6[80] = v15;
  *(_OWORD *)&v6[240] = v25;
  *(_OWORD *)&v6[256] = v26;
  *(_OWORD *)&v6[272] = v27;
  *(_OWORD *)&v6[224] = v24;
  *(_OWORD *)&v6[160] = v20;
  *(_OWORD *)&v6[176] = v21;
  *(_OWORD *)&v6[192] = v22;
  *(_OWORD *)&v6[208] = v23;
  *(_OWORD *)&v6[288] = v28;
  *(_QWORD *)&v6[304] = v29;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v4;
  *(_QWORD *)(a3 + 16) = v5;
  memcpy((void *)(a3 + 24), v6, 0x131uLL);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_20E942CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E942CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int v7;

  sub_20E9EE280(*(_QWORD *)(a1 + 48), (std::string *)a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 24));
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 32));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 40));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  v4 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v4, (double *)(a2 + 56));
  sub_20E9EE078(v4, (double *)(a2 + 64));
  sub_20E9EE078(v4, (double *)(a2 + 72));
  sub_20E9EE078(v4, (double *)(a2 + 80));
  sub_20E9EE078(v4, (double *)(a2 + 88));
  sub_20E9EE078(v4, (double *)(a2 + 96));
  sub_20E9EE078(v4, (double *)(a2 + 104));
  sub_20E9EE078(v4, (double *)(a2 + 112));
  sub_20E9EE078(v4, (double *)(a2 + 120));
  sub_20E9EE078(v4, (double *)(a2 + 128));
  sub_20E9EE078(v4, (double *)(a2 + 136));
  sub_20E9EE078(v4, (double *)(a2 + 144));
  sub_20E9EE078(v4, (double *)(a2 + 152));
  sub_20E9EE078(v4, (double *)(a2 + 160));
  sub_20E9EE078(v4, (double *)(a2 + 168));
  sub_20E9EE078(v4, (double *)(a2 + 176));
  v5 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v5, (double *)(a2 + 184));
  sub_20E9EE078(v5, (double *)(a2 + 192));
  sub_20E9EE078(v5, (double *)(a2 + 200));
  sub_20E9EE078(v5, (double *)(a2 + 208));
  sub_20E9EE078(v5, (double *)(a2 + 216));
  sub_20E9EE078(v5, (double *)(a2 + 224));
  sub_20E9EE078(v5, (double *)(a2 + 232));
  sub_20E9EE078(v5, (double *)(a2 + 240));
  sub_20E9EE078(v5, (double *)(a2 + 248));
  sub_20E9EE078(v5, (double *)(a2 + 256));
  sub_20E9EE078(v5, (double *)(a2 + 264));
  sub_20E9EE078(v5, (double *)(a2 + 272));
  sub_20E9EE078(v5, (double *)(a2 + 280));
  sub_20E9EE078(v5, (double *)(a2 + 288));
  sub_20E9EE078(v5, (double *)(a2 + 296));
  sub_20E9EE078(v5, (double *)(a2 + 304));
  v6 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v6);
  if (v6)
  {
    if (!*(_BYTE *)(a2 + 328))
    {
      *(_QWORD *)(a2 + 312) = 0;
      *(_QWORD *)(a2 + 320) = 0;
      *(_BYTE *)(a2 + 328) = 1;
    }
    v7 = 0;
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v7);
    *(_DWORD *)(a2 + 320) = v7 >> 4;
    sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 312));
  }
  else if (*(_BYTE *)(a2 + 328))
  {
    *(_BYTE *)(a2 + 328) = 0;
  }
}

void sub_20E942F3C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E9432CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9432F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E943304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E943328(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20E94389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E9438C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9438D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20E94392C(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _DWORD *v13;
  void *__p[2];
  __int128 v15;
  int v16;

  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v15 = 0;
  sub_20E943FD8(a1, a2 - (_QWORD)a1, a4, (unsigned __int8 *)__p, 0x2800uLL);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 120) + 280))(*(_QWORD *)(a3 + 120));
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 1065353216;
  v7 = *(uint64_t **)(v6 + 56);
  if (!v7)
  {
    sub_20F467D8C(__p, (uint64_t)a4);
    v11 = __p[0];
    __p[0] = 0;
    if (!v11)
      goto LABEL_9;
    goto LABEL_8;
  }
  do
  {
    v8 = *((_DWORD *)v7 + 4);
    v13 = (_DWORD *)v7 + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)v7 + 5, (uint64_t)&unk_2102DB95C, &v13) + 5) = v8;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
  v9 = (_QWORD *)v15;
  sub_20F467D8C(__p, (uint64_t)a4);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = __p[0];
  __p[0] = 0;
  if (v11)
LABEL_8:
    operator delete(v11);
LABEL_9:
  kdebug_trace();
  return 1;
}

#error "20E943CB0: call analysis failed (funcsize=242)"

void sub_20E943E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E943FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E943FD8(void *__src, size_t __n, _DWORD *a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  uint64_t v20;
  std::ios_base::failure *exception;
  std::error_code v22;
  std::string __msg;
  std::string __p;
  _QWORD v25[2];
  void (**v26)();
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[12];
  char v31;
  uint64_t v32;
  __int128 __dst;
  unint64_t v34;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v34 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v34) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v30, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v25, (uint64_t *)&__p, (uint64_t)v30, a5);
  v25[0] = &off_24C9B0298;
  v26 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v29, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_38;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v22.__val_ = 1;
      v22.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v22);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 4;
  sub_20E9EDADC(v29, &__p);
  sub_20E9403B0((uint64_t)&__p, (uint64_t)v25, a3, __p.__r_.__value_.__l.__data_);
  v25[0] = &off_24C9B71C0;
  v26 = (void (**)())&unk_24C9B7308;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    sub_20E9EF740((_QWORD *)(v20 + 8));
    MEMORY[0x212BC6398](v20, 0x10F2C40853B94B7);
  }
  v26 = off_24C9B7428;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v30[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v30[2] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v32);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
}

void sub_20E9442D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

void sub_20E944360(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E9446F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E944714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E944728(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E94474C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20E944CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E944CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E944CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E944D50(void *__src, size_t __n, uint64_t a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  uint64_t v20;
  std::ios_base::failure *exception;
  std::error_code v22;
  std::string __msg;
  std::string __p;
  _QWORD v25[2];
  void (**v26)();
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[12];
  char v31;
  uint64_t v32;
  __int128 __dst;
  unint64_t v34;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v34 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v34) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v30, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v25, (uint64_t *)&__p, (uint64_t)v30, a5);
  v25[0] = &off_24C9B0298;
  v26 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v29, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_38;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v22.__val_ = 1;
      v22.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v22);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  sub_20E9450C0((uint64_t)&__p, v25, a3);
  v25[0] = &off_24C9B71C0;
  v26 = (void (**)())&unk_24C9B7308;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    sub_20E9EF740((_QWORD *)(v20 + 8));
    MEMORY[0x212BC6398](v20, 0x10F2C40853B94B7);
  }
  v26 = off_24C9B7428;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v30[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v30[2] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v32);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
}

void sub_20E945038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_20E9450C0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;

  v10 = 8;
  sub_20E9EDADC(a2[6], &v10);
  v5 = v10;
  if (v10 >= 2)
    sub_20E90A71C(a2 + 2);
  if (v5 >= 8)
    v6 = 8;
  else
    v6 = v5;
  if (v6 < 8)
  {
    result = sub_20E9451B0((uint64_t)&v11, a2, a3, v6);
    if (v5 < 2)
      return result;
  }
  else
  {
    result = sub_20E94551C(a2, a3);
    if (v5 < 2)
      return result;
  }
  v8 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v9 = *(_QWORD *)(v8 - 16) - result + *(_QWORD *)(v8 - 8);
  if (v9)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v9);
  a2[4] -= 16;
  return result;
}

uint64_t sub_20E9451B0(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  _BYTE v7[16];
  uint64_t *v8;
  _QWORD v9[2];
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v24[2];
  uint64_t *v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE v38[64];
  uint64_t v39;
  _BYTE v40[16];
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[4];
  __int128 v46;
  uint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _QWORD v53[4];
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  _QWORD v62[4];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v41 = &v42;
  v42 = 0;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  v46 = 0u;
  v43 = 0;
  v47 = 0;
  v48 = 3;
  v51 = 0;
  v50 = 0;
  v49 = &v50;
  v52 = 0u;
  memset(v53, 0, sizeof(v53));
  v55 = 0;
  v54 = &v55;
  v59 = 0;
  v58 = 0;
  v56 = 0;
  v57 = &v58;
  memset(v62, 0, sizeof(v62));
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v60 = -1;
  v65 = 0;
  v66 = -1;
  v67 = 0;
  v69 = 0;
  v68 = 0;
  if (a4 < 2)
    sub_20E94C124((uint64_t)v7, a2, (uint64_t)v40);
  else
    sub_20E94C348(a2, (uint64_t)v40, a4);
  v8 = v41;
  v9[0] = v42;
  v9[1] = v43;
  if (v43)
  {
    *(_QWORD *)(v42 + 16) = v9;
    v41 = &v42;
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v8 = v9;
  }
  v10 = v44;
  v11 = v45[0];
  memset(v45, 0, sizeof(v45));
  v44 = 0uLL;
  v12 = *(_OWORD *)&v45[1];
  v13 = v45[3];
  v14 = v46;
  v15 = v47;
  v46 = 0uLL;
  v47 = 0;
  v16 = v48;
  v17 = v49;
  v18[0] = v50;
  v18[1] = v51;
  if (v51)
  {
    *(_QWORD *)(v50 + 16) = v18;
    v49 = &v50;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v17 = v18;
  }
  v19 = v52;
  v5 = v53[0];
  memset(v53, 0, sizeof(v53));
  v52 = 0uLL;
  v21 = *(_OWORD *)&v53[1];
  v20 = v5;
  v22 = v53[3];
  v23 = v54;
  v24[0] = v55;
  v24[1] = v56;
  if (v56)
  {
    *(_QWORD *)(v55 + 16) = v24;
    v54 = &v55;
    v55 = 0;
    v56 = 0;
  }
  else
  {
    v23 = v24;
  }
  v25 = v57;
  v26[0] = v58;
  v26[1] = v59;
  if (v59)
  {
    *(_QWORD *)(v58 + 16) = v26;
    v57 = &v58;
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v25 = v26;
  }
  v27 = v61;
  v26[2] = v60;
  v28 = v62[0];
  memset(v62, 0, sizeof(v62));
  v61 = 0uLL;
  v29 = *(_OWORD *)&v62[1];
  v31 = v63;
  v32 = v64;
  v30 = v62[3];
  v33 = v65;
  v35 = 0u;
  v36 = 0;
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v34 = v66;
  v37 = v38;
  sub_20E94BF80(a3, (uint64_t)v7);
  sub_20E94FADC((uint64_t)v7);
  return sub_20E94FBC8((uint64_t)v40);
}

void sub_20E945508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  sub_20E94FBC8((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_20E94551C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;

  LODWORD(v21) = 1;
  sub_20E9EDADC(a1[6], &v21);
  LODWORD(v21) = 3;
  sub_20E9EDADC(a1[6], &v21);
  sub_20E945814((uint64_t)&v21, (uint64_t)a1, a2 + 16, v21);
  sub_20E948EA0((uint64_t)&v21, a1, a2 + 120);
  sub_20E9400E0((uint64_t)a1, (char **)(a2 + 168));
  sub_20E94A488(a1, a2 + 192);
  sub_20E94A6AC(a1, a2 + 216);
  sub_20E9EDE6C(a1[6], (_QWORD *)(a2 + 240));
  v21 = (uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4;
  sub_20E9EDE6C(a1[6], &v21);
  v5 = *(char **)(a2 + 248);
  v4 = *(char **)(a2 + 256);
  v6 = (v4 - v5) >> 4;
  if (v21 <= v6)
  {
    if (v21 < v6)
    {
      v4 = &v5[16 * v21];
      *(_QWORD *)(a2 + 256) = v4;
    }
  }
  else
  {
    sub_20E94A950((char **)(a2 + 248), v21 - v6);
    v5 = *(char **)(a2 + 248);
    v4 = *(char **)(a2 + 256);
  }
  if (v4 != v5)
  {
    v7 = v4;
    do
    {
      sub_20E9EDE6C(a1[6], v5);
      sub_20E9EDD84(a1[6], (_QWORD *)v5 + 1);
      v5 += 16;
    }
    while (v5 != v7);
  }
  v21 = 0x641511E8D2B3183BLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
  sub_20E9EDE6C(a1[6], &v21);
  v9 = *(_QWORD *)(a2 + 272);
  v8 = *(_QWORD *)(a2 + 280);
  v10 = 0x641511E8D2B3183BLL * ((uint64_t)(v8 - v9) >> 3);
  if (v21 <= v10)
  {
    if (v21 < v10)
    {
      v8 = v9 + 1944 * v21;
      *(_QWORD *)(a2 + 280) = v8;
    }
  }
  else
  {
    sub_20E94AA78((char **)(a2 + 272), v21 - v10);
    v9 = *(_QWORD *)(a2 + 272);
    v8 = *(_QWORD *)(a2 + 280);
  }
  if (v8 != v9)
  {
    v11 = 1944 * ((uint64_t)(v8 - v9) / 1944);
    do
    {
      sub_20E94AC4C(a1, v9);
      v9 += 1944;
      v11 -= 1944;
    }
    while (v11);
  }
  LODWORD(v21) = 1;
  sub_20E9EDADC(a1[6], &v21);
  v12 = a1 + 2;
  sub_20E90A71C(a1 + 2);
  sub_20E94111C((uint64_t)a1, a2 + 296);
  v13 = a1[4];
  v14 = *(_QWORD *)(v13 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v13 - 8);
  if (v14)
    (*(void (**)(_QWORD *, uint64_t))(*v12 + 40))(a1 + 2, v14);
  a1[4] -= 16;
  sub_20E9EDD84(a1[6], (_QWORD *)(a2 + 336));
  v15 = a2 + 344;
  LODWORD(v21) = 4;
  sub_20E9EDADC(a1[6], &v21);
  v16 = v21;
  sub_20E90A71C(a1 + 2);
  if (v16 >= 4)
    v17 = 4;
  else
    v17 = v16;
  sub_20E94B960(a1, v15, v17);
  v18 = a1[4];
  result = (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2);
  v20 = *(_QWORD *)(v18 - 16) - result + *(_QWORD *)(v18 - 8);
  if (v20)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v12 + 40))(a1 + 2, v20);
  a1[4] -= 16;
  return result;
}

uint64_t sub_20E945814(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  if (a4 < 3)
    return sub_20E9458F4((uint64_t)&v10, a2, a3, a4);
  v6 = a2 + 16;
  sub_20E90A71C((_QWORD *)(a2 + 16));
  sub_20E945A10(a2, a3);
  sub_20E946074(a2, (char **)(a3 + 24));
  sub_20E946418(a2, (int64x2_t *)(a3 + 48));
  sub_20E946898(a2, (void **)(a3 + 72));
  *(_BYTE *)(a3 + 96) = 3;
  v7 = *(_QWORD *)(a2 + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(a2 + 16, v9);
  *(_QWORD *)(a2 + 32) -= 16;
  return result;
}

uint64_t sub_20E9458F4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v6;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[4];
  __int128 v20;
  uint64_t v21;
  char v22;

  v15 = &v16;
  v16 = 0;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  v20 = 0u;
  v17 = 0;
  v21 = 0;
  v22 = 2;
  sub_20E946FE0(a2, (uint64_t)&v15, a4);
  v6 = v15;
  v7[0] = v16;
  v7[1] = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v7;
    v15 = &v16;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v6 = v7;
  }
  v9 = v19[0];
  v8 = v18;
  memset(v19, 0, sizeof(v19));
  v18 = 0uLL;
  v10 = *(_OWORD *)&v19[1];
  v11 = v19[3];
  v12 = v20;
  v13 = v21;
  v20 = 0uLL;
  v21 = 0;
  v14 = v22;
  sub_20E9470EC(a3, (uint64_t)&v6);
  sub_20E8FB5B8((uint64_t)&v6);
  return sub_20E8FB5B8((uint64_t)&v15);
}

void sub_20E9459FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E8FB5B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E945A10(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char **v9;
  char **v10;
  unsigned int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24[4];
  uint64_t v25;
  _BYTE v26[9];

  v25 = 0;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v25);
  v4 = (char **)(a2 + 8);
  sub_20E8FB1C0(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = v25;
  if (v25)
  {
    v6 = 0;
    do
    {
      v17 = 0;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      memset(v24, 0, sizeof(v24));
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v17);
      sub_20E945BE0((uint64_t)v26, a1, (double *)&v18);
      v7 = *v4;
      v8 = v17;
      v9 = (char **)(a2 + 8);
      v10 = (char **)(a2 + 8);
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            v10 = (char **)v7;
            v11 = *((_DWORD *)v7 + 8);
            if (v17 >= v11)
              break;
            v7 = *v10;
            v9 = v10;
            if (!*v10)
              goto LABEL_11;
          }
          if (v11 >= v17)
            break;
          v7 = v10[1];
          if (!v7)
          {
            v9 = v10 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v12 = (char *)operator new(0xA8uLL);
        v13 = v21;
        *(_OWORD *)(v12 + 72) = v20;
        *(_OWORD *)(v12 + 88) = v13;
        v14 = v23;
        *(_OWORD *)(v12 + 104) = v22;
        *(_OWORD *)(v12 + 120) = v14;
        v15 = v19;
        *(_OWORD *)(v12 + 40) = v18;
        *((_DWORD *)v12 + 8) = v8;
        *(_OWORD *)(v12 + 56) = v15;
        v12[136] = (char)v24[0];
        *((_OWORD *)v12 + 9) = *(_OWORD *)&v24[1];
        *((void **)v12 + 20) = v24[3];
        memset(&v24[1], 0, 24);
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = v10;
        *v9 = v12;
        v16 = **(_QWORD **)a2;
        if (v16)
        {
          *(_QWORD *)a2 = v16;
          v12 = *v9;
        }
        sub_20E868578(*(uint64_t **)(a2 + 8), (uint64_t *)v12);
        ++*(_QWORD *)(a2 + 16);
      }
      if (v24[1])
      {
        v24[2] = v24[1];
        operator delete(v24[1]);
      }
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_20E945BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E945BE0(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unsigned int v9;

  v7 = 2;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v7);
  if (v7 < 2)
  {
    sub_20E945D14((uint64_t)&v8, a2, (uint64_t)a3);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 48);
    sub_20E9EE078(v5, a3);
    sub_20E9EE078(v5, a3 + 1);
    sub_20E9EE078(v5, a3 + 2);
    sub_20E9EE078(v5, a3 + 3);
    sub_20E9EE078(v5, a3 + 4);
    sub_20E9EE078(v5, a3 + 5);
    sub_20E9EE078(v5, a3 + 6);
    sub_20E9EE078(v5, a3 + 7);
    sub_20E9EE078(v5, a3 + 8);
    v6 = *(_QWORD *)(a2 + 48);
    sub_20E9EE078(v6, a3 + 9);
    sub_20E9EE078(v6, a3 + 10);
    sub_20E9EE078(v6, a3 + 11);
    v9 = 4;
    sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v9);
    sub_20E93D690(a2, (uint64_t)(a3 + 12), v9);
  }
}

void sub_20E945D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[32];
  _BYTE v14[8];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[4];
  _BYTE v22[47];
  _BYTE v23[9];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v22[0] = 0;
  memset(&v22[23], 0, 24);
  *(_WORD *)v23 = 0;
  LODWORD(v9) = 1;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v9);
  sub_20E945F60(a2, (uint64_t)&v17);
  sub_20E93E394((uint64_t)&v9, a2, (std::string *)v22);
  LODWORD(v9) = 1;
  sub_20E9EDADC(*(_QWORD *)(a2 + 48), &v9);
  sub_20E9EE280(*(_QWORD *)(a2 + 48), (std::string *)&v23[1]);
  v11 = v19;
  v12 = v20;
  *(_QWORD *)v13 = v21[0];
  v9 = v17;
  v10 = v18;
  *(_OWORD *)&v13[8] = *(_OWORD *)&v21[1];
  *(_QWORD *)&v13[24] = v21[3];
  sub_20EB4453C((uint64_t)v14, (uint64_t *)v22);
  v5 = v12;
  *(_OWORD *)(a3 + 32) = v11;
  *(_OWORD *)(a3 + 48) = v5;
  v6 = *(_OWORD *)&v13[16];
  *(_OWORD *)(a3 + 64) = *(_OWORD *)v13;
  *(_OWORD *)(a3 + 80) = v6;
  v7 = v10;
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 96) = v14[0];
  v8 = *(void **)(a3 + 104);
  if (v8)
  {
    *(_QWORD *)(a3 + 112) = v8;
    operator delete(v8);
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
  }
  *(_OWORD *)(a3 + 104) = v15;
  *(_QWORD *)(a3 + 120) = v16;
  if (v24 < 0)
    operator delete(*(void **)&v23[1]);
  if (*(_QWORD *)&v22[24])
  {
    *(_QWORD *)&v22[32] = *(_QWORD *)&v22[24];
    operator delete(*(void **)&v22[24]);
  }
  if ((v22[23] & 0x80000000) != 0)
    operator delete(*(void **)v22);
}

void sub_20E945ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E945EF4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20E945EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E945EF4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20E945EF4(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 175) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 128);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 152));
  v2 = *(void **)(a1 + 128);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
LABEL_4:
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  return a1;
}

void sub_20E945F60(uint64_t a1, uint64_t a2)
{
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_20E9EE368(*(_QWORD *)(a1 + 48), &v6);
  v4 = v6;
  if (v7 != v6)
    memmove((void *)a2, v6, (char *)v7 - (char *)v6);
  if (v4)
  {
    v7 = v4;
    operator delete(v4);
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_20E9EE368(*(_QWORD *)(a1 + 48), &v6);
  v5 = v6;
  if (v7 != v6)
    memmove((void *)(a2 + 72), v6, (char *)v7 - (char *)v6);
  if (v5)
  {
    v7 = v5;
    operator delete(v5);
  }
}

void sub_20E946008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E946028(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[18];
      if (v3)
      {
        v2[19] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_20E946074(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  char v15;

  v13 = 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 5);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v13);
  v4 = a2[1];
  v5 = 0x8F5C28F5C28F5C29 * ((v4 - *a2) >> 5);
  if (v13 <= v5)
  {
    if (v13 >= v5)
    {
      v6 = *a2;
      v9 = v4 - v6;
      if (v4 == v6)
        return;
    }
    else
    {
      v10 = (uint64_t)&(*a2)[800 * v13];
      while (v4 != (char *)v10)
      {
        v11 = (void *)*((_QWORD *)v4 - 7);
        if (v11)
        {
          *((_QWORD *)v4 - 6) = v11;
          operator delete(v11);
        }
        v4 -= 800;
      }
      a2[1] = (char *)v10;
      v6 = *a2;
      v9 = v10 - (_QWORD)v6;
      if ((char *)v10 == v6)
        return;
    }
  }
  else
  {
    sub_20E9461E0(a2, v13 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
  }
  v12 = 800 * (v9 / 800);
  do
  {
    while (1)
    {
      v14 = 3;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v14);
      if (v14 >= 2)
        break;
      sub_20E93EB10((uint64_t)&v15, a1, (uint64_t)v6);
      v6 += 800;
      v12 -= 800;
      if (!v12)
        return;
    }
    sub_20E93EC10(a1, (uint64_t)v6, v14);
    v6 += 800;
    v12 -= 800;
  }
  while (v12);
}

void sub_20E9461E0(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  void *v20;

  v5 = a1[1];
  v4 = a1[2];
  if (0x8F5C28F5C28F5C29 * ((v4 - v5) >> 5) >= a2)
  {
    if (a2)
    {
      v12 = 800 * ((800 * a2 - 800) / 0x320) + 800;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x8F5C28F5C28F5C29 * ((v5 - *a1) >> 5);
    v8 = v7 + a2;
    if (v7 + a2 > 0x51EB851EB851EBLL)
      sub_20E92CED8();
    v9 = 0x8F5C28F5C28F5C29 * ((v4 - v6) >> 5);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x28F5C28F5C28F5)
      v10 = 0x51EB851EB851EBLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x51EB851EB851EBLL)
        sub_20E877A38();
      v11 = (char *)operator new(800 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[800 * v7];
    v14 = &v11[800 * v10];
    v15 = 800 * ((800 * a2 - 800) / 0x320) + 800;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        v13 -= 800;
        memcpy(v13, v5 - 800, 0x2E8uLL);
        *((_QWORD *)v17 - 6) = 0;
        *((_QWORD *)v17 - 5) = 0;
        *(_OWORD *)(v17 - 56) = *(_OWORD *)(v5 - 56);
        *((_QWORD *)v17 - 5) = *((_QWORD *)v5 - 5);
        *((_QWORD *)v5 - 7) = 0;
        *((_QWORD *)v5 - 6) = 0;
        *((_QWORD *)v5 - 5) = 0;
        v18 = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v17 - 20) = v18;
        v5 -= 800;
      }
      while (v5 != v6);
      v5 = *a1;
      v19 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      while (v19 != v5)
      {
        v20 = (void *)*((_QWORD *)v19 - 7);
        if (v20)
        {
          *((_QWORD *)v19 - 6) = v20;
          operator delete(v20);
        }
        v19 -= 800;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20E946418(uint64_t a1, int64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char v10;

  v8 = 0xCF3CF3CF3CF3CF3DLL * ((a2->i64[1] - a2->i64[0]) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v8);
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a2->i64[1] - a2->i64[0]) >> 3);
  if (v8 <= v4)
  {
    if (v8 < v4)
      sub_20E8FB128((uint64_t)a2, a2->i64[0] + 168 * v8);
  }
  else
  {
    sub_20E946544(a2, v8 - v4);
  }
  v5 = a2->i64[0];
  v6 = a2->i64[1] - a2->i64[0];
  if (v6)
  {
    v7 = 168 * (v6 / 168);
    do
    {
      while (1)
      {
        v9 = 5;
        sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v9);
        if (v9 >= 3)
          break;
        sub_20E93CCA4((uint64_t)&v10, a1, v5, v9);
        v5 += 168;
        v7 -= 168;
        if (!v7)
          return;
      }
      sub_20E93CE04(a1, v5, v9);
      v5 += 168;
      v7 -= 168;
    }
    while (v7);
  }
}

void sub_20E946544(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  char v20;
  int64x2_t v21;
  void *__p;
  int64x2_t v23;
  char *v24;
  int64x2_t *v25;

  v4 = a1[1].i64[0];
  v5 = a1->u64[1];
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
      bzero((void *)a1->i64[1], v11);
      v5 += v11;
    }
    a1->i64[1] = v5;
  }
  else
  {
    v6 = a1->i64[0];
    v7 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - a1->i64[0]) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x186186186186186)
      sub_20E92CED8();
    if (0x9E79E79E79E79E7ALL * ((v4 - v6) >> 3) > v8)
      v8 = 0x9E79E79E79E79E7ALL * ((v4 - v6) >> 3);
    if (0xCF3CF3CF3CF3CF3DLL * ((v4 - v6) >> 3) >= 0xC30C30C30C30C3)
      v9 = 0x186186186186186;
    else
      v9 = v8;
    v25 = a1 + 1;
    if (v9)
    {
      if (v9 > 0x186186186186186)
        sub_20E877A38();
      v10 = (char *)operator new(168 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[168 * v7];
    v13 = &v10[168 * v9];
    v24 = v13;
    v14 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v12, v14);
    v15 = &v12[v14];
    v23.i64[1] = (uint64_t)&v12[v14];
    if (v5 == v6)
    {
      v21 = vdupq_n_s64(v5);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = v5 + v16;
        v18 = *(_OWORD *)(v5 + v16 - 168);
        v19 = &v12[v16];
        *(_OWORD *)(v19 - 152) = *(_OWORD *)(v5 + v16 - 152);
        *(_OWORD *)(v19 - 168) = v18;
        *((_QWORD *)v19 - 16) = 0;
        *((_QWORD *)v19 - 15) = 0;
        *(_OWORD *)(v19 - 136) = *(_OWORD *)(v5 + v16 - 136);
        *((_QWORD *)v19 - 15) = *(_QWORD *)(v5 + v16 - 120);
        *(_QWORD *)(v17 - 136) = 0;
        *(_QWORD *)(v17 - 128) = 0;
        *(_QWORD *)(v17 - 120) = 0;
        *((_QWORD *)v19 - 13) = 0;
        *((_QWORD *)v19 - 12) = 0;
        *((_OWORD *)v19 - 7) = *(_OWORD *)(v5 + v16 - 112);
        *((_QWORD *)v19 - 12) = *(_QWORD *)(v5 + v16 - 96);
        *(_QWORD *)(v17 - 104) = 0;
        *(_QWORD *)(v17 - 96) = 0;
        *(_QWORD *)(v17 - 112) = 0;
        v20 = *(_BYTE *)(v5 + v16 - 88);
        *((_QWORD *)v19 - 9) = 0;
        *((_QWORD *)v19 - 8) = 0;
        *(v19 - 88) = v20;
        *((_OWORD *)v19 - 5) = *(_OWORD *)(v5 + v16 - 80);
        *((_QWORD *)v19 - 8) = *(_QWORD *)(v5 + v16 - 64);
        *(_QWORD *)(v17 - 72) = 0;
        *(_QWORD *)(v17 - 64) = 0;
        *(_QWORD *)(v17 - 80) = 0;
        *(v19 - 56) = *(_BYTE *)(v5 + v16 - 56);
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_OWORD *)v19 - 3) = *(_OWORD *)(v5 + v16 - 48);
        *((_QWORD *)v19 - 4) = *(_QWORD *)(v5 + v16 - 32);
        *(_QWORD *)(v17 - 48) = 0;
        *(_QWORD *)(v17 - 40) = 0;
        *(_QWORD *)(v17 - 32) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *(_OWORD *)(v19 - 24) = *(_OWORD *)(v5 + v16 - 24);
        *((_QWORD *)v19 - 1) = *(_QWORD *)(v5 + v16 - 8);
        *(_QWORD *)(v17 - 24) = 0;
        *(_QWORD *)(v17 - 16) = 0;
        *(_QWORD *)(v17 - 8) = 0;
        v16 -= 168;
      }
      while (v5 + v16 != v6);
      v21 = *a1;
      v4 = a1[1].i64[0];
      v12 += v16;
      v15 = (char *)v23.i64[1];
      v13 = v24;
    }
    a1->i64[0] = (uint64_t)v12;
    a1->i64[1] = (uint64_t)v15;
    v23 = v21;
    a1[1].i64[0] = (uint64_t)v13;
    v24 = (char *)v4;
    __p = (void *)v21.i64[0];
    sub_20E9467F8((uint64_t)&__p, v21.i64[0]);
    if (__p)
      operator delete(__p);
  }
}

void sub_20E9467F8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    v5 = *(void **)(i - 24);
    if (v5)
    {
      *(_QWORD *)(i - 16) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 48);
    if (v6)
    {
      *(_QWORD *)(i - 40) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(i - 80);
    if (v7)
    {
      *(_QWORD *)(i - 72) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(i - 112);
    if (v8)
    {
      *(_QWORD *)(i - 104) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(i - 136);
    if (v9)
    {
      *(_QWORD *)(i - 128) = v9;
      operator delete(v9);
    }
  }
}

void sub_20E946898(uint64_t a1, void **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;

  v13 = 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v13);
  v4 = (char *)a2[1];
  v5 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)*a2) >> 4);
  if (v13 > v5)
  {
    sub_20E9469D4(a2, v13 - v5);
    v8 = a2;
    v6 = (char *)*a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v13 >= v5)
  {
    v6 = (char *)*a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)*a2 + 176 * v13;
  while (v4 != (char *)v10)
  {
    v11 = (void *)*((_QWORD *)v4 - 4);
    if (v11)
    {
      *((_QWORD *)v4 - 3) = v11;
      operator delete(v11);
    }
    v4 -= 176;
  }
  a2[1] = (void *)v10;
  v6 = (char *)*a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v12 = 176 * (v9 / 176);
    do
    {
      v14 = 4;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v14);
      sub_20E946C28(a1, (uint64_t)v6, v14);
      v6 += 176;
      v12 -= 176;
    }
    while (v12);
  }
}

void sub_20E9469D4(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  char *v24;
  void *v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v5[176 * a2];
      do
      {
        *((_OWORD *)v5 + 9) = 0uLL;
        *((_OWORD *)v5 + 10) = 0uLL;
        *((_OWORD *)v5 + 7) = 0uLL;
        *((_OWORD *)v5 + 8) = 0uLL;
        *((_OWORD *)v5 + 5) = 0uLL;
        *((_OWORD *)v5 + 6) = 0uLL;
        *((_OWORD *)v5 + 3) = 0uLL;
        *((_OWORD *)v5 + 4) = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_OWORD *)v5 + 2) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        v5[172] = 1;
        v5 += 176;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1745D1745D1745DLL)
      sub_20E92CED8();
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xBA2E8BA2E8BA2ELL)
      v9 = 0x1745D1745D1745DLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x1745D1745D1745DLL)
        sub_20E877A38();
      v10 = (char *)operator new(176 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[176 * v6];
    v13 = &v12[176 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 10) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      v14[172] = 1;
      v14 += 176;
    }
    while (v14 != v13);
    v15 = &v10[176 * v9];
    v16 = (char *)*a1;
    if (v5 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
    }
    else
    {
      do
      {
        *((_OWORD *)v12 - 11) = *((_OWORD *)v5 - 11);
        v17 = *((_OWORD *)v5 - 10);
        v18 = *((_OWORD *)v5 - 9);
        v19 = *((_OWORD *)v5 - 7);
        *((_OWORD *)v12 - 8) = *((_OWORD *)v5 - 8);
        *((_OWORD *)v12 - 7) = v19;
        *((_OWORD *)v12 - 10) = v17;
        *((_OWORD *)v12 - 9) = v18;
        v20 = *((_OWORD *)v5 - 6);
        v21 = *((_OWORD *)v5 - 5);
        v22 = *((_OWORD *)v5 - 4);
        *(_OWORD *)(v12 - 55) = *(_OWORD *)(v5 - 55);
        *((_OWORD *)v12 - 5) = v21;
        *((_OWORD *)v12 - 4) = v22;
        *((_OWORD *)v12 - 6) = v20;
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
        *((_QWORD *)v12 - 2) = *((_QWORD *)v5 - 2);
        *((_QWORD *)v5 - 4) = 0;
        *((_QWORD *)v5 - 3) = 0;
        *((_QWORD *)v5 - 2) = 0;
        v23 = *((_DWORD *)v5 - 2);
        *((_WORD *)v12 - 2) = *((_WORD *)v5 - 2);
        *((_DWORD *)v12 - 2) = v23;
        v12 -= 176;
        v5 -= 176;
      }
      while (v5 != v16);
      v5 = (char *)*a1;
      v24 = (char *)a1[1];
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
      while (v24 != v5)
      {
        v25 = (void *)*((_QWORD *)v24 - 4);
        if (v25)
        {
          *((_QWORD *)v24 - 3) = v25;
          operator delete(v25);
        }
        v24 -= 176;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20E946C28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char v14;
  unint64_t v15;

  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 8));
  v6 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v6, (double *)(a2 + 16));
  sub_20E9EE078(v6, (double *)(a2 + 24));
  sub_20E9EE078(v6, (double *)(a2 + 32));
  v7 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v7, (double *)(a2 + 40));
  sub_20E9EE078(v7, (double *)(a2 + 48));
  sub_20E9EE078(v7, (double *)(a2 + 56));
  v14 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v14);
  if (v14)
  {
    v8 = (double *)(a2 + 64);
    if (!*(_BYTE *)(a2 + 136))
    {
      *(_QWORD *)(a2 + 128) = 0;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_BYTE *)(a2 + 136) = 1;
    }
    v9 = *(_QWORD *)(a1 + 48);
    sub_20E9EE078(v9, v8);
    sub_20E9EE078(v9, (double *)(a2 + 72));
    sub_20E9EE078(v9, (double *)(a2 + 80));
    sub_20E9EE078(v9, (double *)(a2 + 88));
    sub_20E9EE078(v9, (double *)(a2 + 96));
    sub_20E9EE078(v9, (double *)(a2 + 104));
    sub_20E9EE078(v9, (double *)(a2 + 112));
    sub_20E9EE078(v9, (double *)(a2 + 120));
    sub_20E9EE078(v9, (double *)(a2 + 128));
  }
  else if (*(_BYTE *)(a2 + 136))
  {
    *(_BYTE *)(a2 + 136) = 0;
  }
  v15 = (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v15);
  v11 = *(char **)(a2 + 144);
  v10 = *(char **)(a2 + 152);
  v12 = (v10 - v11) >> 3;
  if (v15 <= v12)
  {
    if (v15 < v12)
    {
      v10 = &v11[8 * v15];
      *(_QWORD *)(a2 + 152) = v10;
    }
  }
  else
  {
    sub_20E946E40((void **)(a2 + 144), v15 - v12);
    v11 = *(char **)(a2 + 144);
    v10 = *(char **)(a2 + 152);
  }
  if (v10 != v11)
  {
    v13 = v10;
    do
    {
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), v11);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v11 + 1);
      v11 += 8;
    }
    while (v11 != v13);
  }
  if (a3 >= 2)
  {
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 168));
    if (a3 != 2)
    {
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 172));
      if (a3 >= 4)
        sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 173));
    }
  }
}

void sub_20E946E40(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E92CED8();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_20E946FE0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3;
  int64x2_t v6[6];
  _OWORD v7[10];
  uint64_t v8;
  char v9;

  v3 = a3;
  if (a3 < 2)
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    v9 = 1;
    sub_20E947408(a1, (uint64_t)v7, a3);
    sub_20FCCEF20(v6, (uint64_t)v7);
    sub_20E9470EC(a2, (uint64_t)v6);
    sub_20E8FB5B8((uint64_t)v6);
    sub_20E948C74((char **)v7);
  }
  else
  {
    sub_20E945A10(a1, a2);
    sub_20E946074(a1, (char **)(a2 + 24));
    sub_20E946418(a1, (int64x2_t *)(a2 + 48));
    sub_20E946898(a1, (void **)(a2 + 72));
    *(_BYTE *)(a2 + 96) = v3;
  }
}

void sub_20E9470C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E948C74((char **)va);
  _Unwind_Resume(a1);
}

void sub_20E9470D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E948C74((char **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9470EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v4 = (_QWORD *)(a1 + 8);
  sub_20E8FB1C0(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  *v4 = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)a2 = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = a1 + 24;
    v9 = *(char **)(a1 + 24);
    v10 = (_QWORD *)(a2 + 24);
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    *(_QWORD *)a1 = v4;
    v8 = a1 + 24;
    v9 = *(char **)(a1 + 24);
    v10 = (_QWORD *)(a2 + 24);
    if (!v9)
      goto LABEL_12;
  }
  v11 = *(char **)(a1 + 32);
  v12 = v9;
  if (v11 != v9)
  {
    do
    {
      v13 = (void *)*((_QWORD *)v11 - 7);
      if (v13)
      {
        *((_QWORD *)v11 - 6) = v13;
        operator delete(v13);
      }
      v11 -= 800;
    }
    while (v11 != v9);
    v12 = *(char **)v8;
  }
  *(_QWORD *)(a1 + 32) = v9;
  operator delete(v12);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_12:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v15 = (void **)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    sub_20E8FB128(a1 + 48, v14);
    operator delete(*v15);
    *v15 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v16 = (void **)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 80);
    v19 = *(void **)(a1 + 72);
    if (v18 != v17)
    {
      do
      {
        v20 = *(void **)(v18 - 32);
        if (v20)
        {
          *(_QWORD *)(v18 - 24) = v20;
          operator delete(v20);
        }
        v18 -= 176;
      }
      while (v18 != v17);
      v19 = *v16;
    }
    *(_QWORD *)(a1 + 80) = v17;
    operator delete(v19);
    *v16 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t *sub_20E947294(uint64_t *a1)
{
  if (*a1)
  {
    sub_20E8FB128((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void **sub_20E9472CC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 7);
        if (v5)
        {
          *((_QWORD *)v3 - 6) = v5;
          operator delete(v5);
        }
        v3 -= 800;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20E94733C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
      return;
    }
    while (1)
    {
      v6 = (void *)*((_QWORD *)v4 - 4);
      if (v6)
      {
        *((_QWORD *)v4 - 3) = v6;
        operator delete(v6);
      }
      if (*(v4 - 33) < 0)
        break;
      v7 = (void *)*((_QWORD *)v4 - 10);
      if (v7)
        goto LABEL_9;
LABEL_10:
      v8 = (void *)*((_QWORD *)v4 - 13);
      if (v8)
      {
        *((_QWORD *)v4 - 12) = v8;
        operator delete(v8);
      }
      v4 -= 152;
      if (v4 == v2)
      {
        v9 = **a1;
        v1[1] = v2;
        operator delete(v9);
        return;
      }
    }
    operator delete(*((void **)v4 - 7));
    v7 = (void *)*((_QWORD *)v4 - 10);
    if (!v7)
      goto LABEL_10;
LABEL_9:
    *((_QWORD *)v4 - 9) = v7;
    operator delete(v7);
    goto LABEL_10;
  }
}

void sub_20E947408(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  sub_20E947528(a1, a2);
  sub_20E9479C4(a1, (char **)(a2 + 24));
  v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v9);
  sub_20E947D44((int64x2_t *)(a2 + 48), v9);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56) - v6;
  if (v7)
  {
    v8 = 152 * (v7 / 152);
    do
    {
      v10 = 2;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v10);
      sub_20E93DFE0(a1, v6, v10);
      v6 += 152;
      v8 -= 152;
    }
    while (v8);
  }
  sub_20E948134(a1, (uint64_t **)(a2 + 72));
  sub_20E94861C(a1, (char ***)(a2 + 96));
  sub_20E94861C(a1, (char ***)(a2 + 120));
  sub_20E94886C(a1, (char ***)(a2 + 144));
  *(_BYTE *)(a2 + 168) = a3;
}

void sub_20E947528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  _QWORD v9[2];
  unint64_t v10;

  v10 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v10);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = 0xD37A6F4DE9BD37A7 * ((v4 - *(_QWORD *)a2) >> 3);
  if (v10 <= v5)
  {
    if (v10 >= v5)
    {
      v6 = *(_QWORD *)(a2 + 8);
      goto LABEL_16;
    }
    v6 = *(_QWORD *)a2 + 184 * v10;
    while (1)
    {
      if (v4 == v6)
      {
        *(_QWORD *)(a2 + 8) = v6;
        goto LABEL_16;
      }
      if ((*(char *)(v4 - 1) & 0x80000000) == 0)
        break;
      operator delete(*(void **)(v4 - 24));
      v7 = *(void **)(v4 - 48);
      if (v7)
        goto LABEL_9;
LABEL_10:
      if (*(char *)(v4 - 49) < 0)
        operator delete(*(void **)(v4 - 72));
      v4 -= 184;
    }
    v7 = *(void **)(v4 - 48);
    if (!v7)
      goto LABEL_10;
LABEL_9:
    *(_QWORD *)(v4 - 40) = v7;
    operator delete(v7);
    goto LABEL_10;
  }
  sub_20E947714((char **)a2, v10 - v5);
  v6 = *(_QWORD *)(a2 + 8);
LABEL_16:
  v8 = *(char **)a2;
  v9[0] = 0xD37A6F4DE9BD37A7 * ((v6 - *(_QWORD *)a2) >> 3);
  v9[1] = v8;
  sub_20E94764C(a1, v9);
}

void sub_20E94764C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*a2)
  {
    v3 = a2[1];
    v4 = v3 + 184 * *a2;
    do
    {
      v5 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v5);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v3);
      v5 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v5);
      v5 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v5);
      sub_20E945F60(a1, v3 + 16);
      sub_20E93E394((uint64_t)&v5, a1, (std::string *)(v3 + 112));
      v5 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v5);
      sub_20E9EE280(*(_QWORD *)(a1 + 48), (std::string *)(v3 + 160));
      v3 += 184;
    }
    while (v3 != v4);
  }
}

void sub_20E947714(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  void *v27;

  v5 = a1[1];
  v4 = a1[2];
  if (0xD37A6F4DE9BD37A7 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 184 * ((184 * a2 - 184) / 0xB8) + 184;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1642C8590B21642)
      sub_20E92CED8();
    v9 = 0xD37A6F4DE9BD37A7 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xB21642C8590B21)
      v10 = 0x1642C8590B21642;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1642C8590B21642)
        sub_20E877A38();
      v11 = (char *)operator new(184 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[184 * v7];
    v14 = &v11[184 * v10];
    v15 = 184 * ((184 * a2 - 184) / 0xB8) + 184;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        *((_DWORD *)v18 - 46) = *(_DWORD *)&v5[v17 - 184];
        v20 = *(_OWORD *)&v5[v17 - 168];
        *(_OWORD *)(v18 - 152) = *(_OWORD *)&v5[v17 - 152];
        *(_OWORD *)(v18 - 168) = v20;
        v21 = *(_OWORD *)&v5[v17 - 136];
        v22 = *(_OWORD *)&v5[v17 - 120];
        v23 = *(_OWORD *)&v5[v17 - 104];
        *(_OWORD *)(v18 - 88) = *(_OWORD *)&v5[v17 - 88];
        *(_OWORD *)(v18 - 104) = v23;
        *(_OWORD *)(v18 - 120) = v22;
        *(_OWORD *)(v18 - 136) = v21;
        v24 = *(_OWORD *)&v5[v17 - 72];
        *((_QWORD *)v18 - 7) = *(_QWORD *)&v5[v17 - 56];
        *(_OWORD *)(v18 - 72) = v24;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v19 - 9) = 0;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v5[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v5[v17 - 32];
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        v25 = *(_OWORD *)&v5[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v5[v17 - 8];
        *(_OWORD *)(v18 - 24) = v25;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *((_QWORD *)v19 - 3) = 0;
        v17 -= 184;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v26 = (void **)a1[1];
      *a1 = &v13[v17];
      a1[1] = v16;
      a1[2] = v14;
      while (1)
      {
        if (v26 == (void **)v5)
          goto LABEL_29;
        if ((*((char *)v26 - 1) & 0x80000000) == 0)
          break;
        operator delete(*(v26 - 3));
        v27 = *(v26 - 6);
        if (v27)
          goto LABEL_23;
LABEL_24:
        if (*((char *)v26 - 49) < 0)
          operator delete(*(v26 - 9));
        v26 -= 23;
      }
      v27 = *(v26 - 6);
      if (!v27)
        goto LABEL_24;
LABEL_23:
      *(v26 - 5) = v27;
      operator delete(v27);
      goto LABEL_24;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
LABEL_29:
    if (v5)
      operator delete(v5);
  }
}

void sub_20E9479C4(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v13 = 0xAFD6A052BF5A814BLL * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v13);
  v4 = a2[1];
  v5 = 0xAFD6A052BF5A814BLL * ((v4 - *a2) >> 3);
  if (v13 > v5)
  {
    sub_20E947B04(a2, v13 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v13 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[792 * v13];
  while (v4 != (char *)v10)
  {
    v11 = (void *)*((_QWORD *)v4 - 6);
    if (v11)
    {
      *((_QWORD *)v4 - 5) = v11;
      operator delete(v11);
    }
    v4 -= 792;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v12 = 792 * (v9 / 792);
    do
    {
      v14 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v14);
      sub_20E93F918(a1, (uint64_t)v6);
      v6 += 792;
      v12 -= 792;
    }
    while (v12);
  }
}

void sub_20E947B04(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  void *v20;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAFD6A052BF5A814BLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 792 * ((792 * a2 - 792) / 0x318) + 792;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAFD6A052BF5A814BLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x52BF5A814AFD6ALL)
      sub_20E92CED8();
    v9 = 0xAFD6A052BF5A814BLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x295FAD40A57EB5)
      v10 = 0x52BF5A814AFD6ALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x52BF5A814AFD6ALL)
        sub_20E877A38();
      v11 = (char *)operator new(792 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[792 * v7];
    v14 = &v11[792 * v10];
    v15 = 792 * ((792 * a2 - 792) / 0x318) + 792;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        v13 -= 792;
        memcpy(v13, v5 - 792, 0x2E8uLL);
        *((_QWORD *)v17 - 5) = 0;
        *((_QWORD *)v17 - 4) = 0;
        *((_OWORD *)v17 - 3) = *((_OWORD *)v5 - 3);
        *((_QWORD *)v17 - 4) = *((_QWORD *)v5 - 4);
        *((_QWORD *)v5 - 6) = 0;
        *((_QWORD *)v5 - 5) = 0;
        *((_QWORD *)v5 - 4) = 0;
        v18 = *((_DWORD *)v5 - 2);
        *(_OWORD *)(v17 - 24) = *(_OWORD *)(v5 - 24);
        *((_DWORD *)v17 - 2) = v18;
        v5 -= 792;
      }
      while (v5 != v6);
      v5 = *a1;
      v19 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      while (v19 != v5)
      {
        v20 = (void *)*((_QWORD *)v19 - 6);
        if (v20)
        {
          *((_QWORD *)v19 - 5) = v20;
          operator delete(v20);
        }
        v19 -= 792;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20E947D44(int64x2_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a1->i64[1];
  v4 = 0x86BCA1AF286BCA1BLL * ((v3 - a1->i64[0]) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20E947E18(a1, v6);
    return;
  }
  if (!v5)
  {
    v7 = a1->i64[0] + 152 * a2;
    while (1)
    {
      if (v3 == v7)
      {
        a1->i64[1] = v7;
        return;
      }
      v8 = *(void **)(v3 - 32);
      if (v8)
      {
        *(_QWORD *)(v3 - 24) = v8;
        operator delete(v8);
      }
      if ((*(char *)(v3 - 33) & 0x80000000) == 0)
        break;
      operator delete(*(void **)(v3 - 56));
      v9 = *(void **)(v3 - 80);
      if (v9)
        goto LABEL_12;
LABEL_13:
      v10 = *(void **)(v3 - 104);
      if (v10)
      {
        *(_QWORD *)(v3 - 96) = v10;
        operator delete(v10);
      }
      v3 -= 152;
    }
    v9 = *(void **)(v3 - 80);
    if (!v9)
      goto LABEL_13;
LABEL_12:
    *(_QWORD *)(v3 - 72) = v9;
    operator delete(v9);
    goto LABEL_13;
  }
}

void sub_20E947E18(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v4 = a1[1].i64[0];
  v5 = a1->u64[1];
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = 152 * ((152 * a2 - 152) / 0x98) + 152;
      bzero((void *)a1->i64[1], v11);
      v5 += v11;
    }
    a1->i64[1] = v5;
  }
  else
  {
    v6 = a1->i64[0];
    v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - a1->i64[0]) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1AF286BCA1AF286)
      sub_20E92CED8();
    if (0xD79435E50D79436 * ((v4 - v6) >> 3) > v8)
      v8 = 0xD79435E50D79436 * ((v4 - v6) >> 3);
    if (0x86BCA1AF286BCA1BLL * ((v4 - v6) >> 3) >= 0xD79435E50D7943)
      v9 = 0x1AF286BCA1AF286;
    else
      v9 = v8;
    v26 = a1 + 1;
    if (v9)
    {
      if (v9 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v10 = (char *)operator new(152 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[152 * v7];
    v13 = &v10[152 * v9];
    v25 = v13;
    v14 = 152 * ((152 * a2 - 152) / 0x98) + 152;
    bzero(v12, v14);
    v15 = &v12[v14];
    v24.i64[1] = (uint64_t)&v12[v14];
    if (v5 == v6)
    {
      v22 = vdupq_n_s64(v5);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = v5 + v16;
        v18 = *(_OWORD *)(v5 + v16 - 144);
        v19 = *(_OWORD *)(v5 + v16 - 128);
        v20 = &v12[v16];
        *((_QWORD *)v20 - 14) = *(_QWORD *)(v5 + v16 - 112);
        *((_OWORD *)v20 - 9) = v18;
        *((_OWORD *)v20 - 8) = v19;
        *((_QWORD *)v20 - 12) = 0;
        *((_QWORD *)v20 - 11) = 0;
        *(_OWORD *)(v20 - 104) = *(_OWORD *)(v5 + v16 - 104);
        *((_QWORD *)v20 - 11) = *(_QWORD *)(v5 + v16 - 88);
        *(_QWORD *)(v17 - 104) = 0;
        *(_QWORD *)(v17 - 96) = 0;
        *(_QWORD *)(v17 - 88) = 0;
        *((_QWORD *)v20 - 9) = 0;
        *((_QWORD *)v20 - 8) = 0;
        *((_OWORD *)v20 - 5) = *(_OWORD *)(v5 + v16 - 80);
        *((_QWORD *)v20 - 8) = *(_QWORD *)(v5 + v16 - 64);
        *(_QWORD *)(v17 - 80) = 0;
        *(_QWORD *)(v17 - 72) = 0;
        *(_QWORD *)(v17 - 64) = 0;
        v21 = *(_OWORD *)(v5 + v16 - 56);
        *((_QWORD *)v20 - 5) = *(_QWORD *)(v5 + v16 - 40);
        *(_OWORD *)(v20 - 56) = v21;
        *(_QWORD *)(v17 - 48) = 0;
        *(_QWORD *)(v17 - 40) = 0;
        *(_QWORD *)(v17 - 56) = 0;
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *((_OWORD *)v20 - 2) = *(_OWORD *)(v5 + v16 - 32);
        *((_QWORD *)v20 - 2) = *(_QWORD *)(v5 + v16 - 16);
        *(_QWORD *)(v17 - 32) = 0;
        *(_QWORD *)(v17 - 24) = 0;
        *(_QWORD *)(v17 - 16) = 0;
        *(v20 - 8) = *(_BYTE *)(v5 + v16 - 8);
        v16 -= 152;
      }
      while (v5 + v16 != v6);
      v22 = *a1;
      v4 = a1[1].i64[0];
      v12 += v16;
      v15 = (char *)v24.i64[1];
      v13 = v25;
    }
    a1->i64[0] = (uint64_t)v12;
    a1->i64[1] = (uint64_t)v15;
    v24 = v22;
    a1[1].i64[0] = (uint64_t)v13;
    v25 = (char *)v4;
    v23 = v22.i64[0];
    sub_20E948094((uint64_t)&v23);
  }
}

uint64_t sub_20E948094(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    if ((*(char *)(i - 33) & 0x80000000) == 0)
    {
      v5 = *(void **)(i - 80);
      if (!v5)
        goto LABEL_9;
LABEL_8:
      *(_QWORD *)(i - 72) = v5;
      operator delete(v5);
      goto LABEL_9;
    }
    operator delete(*(void **)(i - 56));
    v5 = *(void **)(i - 80);
    if (v5)
      goto LABEL_8;
LABEL_9:
    v6 = *(void **)(i - 104);
    if (v6)
    {
      *(_QWORD *)(i - 96) = v6;
      operator delete(v6);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E948134(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;

  v15 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v15);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a2);
  if (v15 > v5)
  {
    sub_20E948258((uint64_t)a2, v15 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = (char *)v7 - (char *)v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v15 >= v5)
  {
    v6 = *a2;
    v9 = (char *)v4 - (char *)v6;
    if (!v9)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[3 * v15];
  if (v4 != (uint64_t *)v10)
  {
    v11 = a2[1];
    do
    {
      v13 = (void *)*(v11 - 3);
      v11 -= 3;
      v12 = v13;
      if (v13)
      {
        *(v4 - 2) = (uint64_t)v12;
        operator delete(v12);
      }
      v4 = v11;
    }
    while (v11 != (uint64_t *)v10);
  }
  a2[1] = (uint64_t *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((uint64_t *)v10 != v6)
  {
LABEL_13:
    v14 = 24 * (v9 / 24);
    do
    {
      sub_20E948430(a1, v6);
      v6 += 3;
      v14 -= 24;
    }
    while (v14);
  }
}

void sub_20E948258(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E92CED8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20E948430(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v8 = (a2[1] - *a2) >> 4;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v8);
  v5 = *a2;
  v4 = a2[1];
  v6 = (v4 - *a2) >> 4;
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = v5 + 16 * v8;
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E9484F8((uint64_t)a2, v8 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = v4;
    do
    {
      v9 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v9);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)v5);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(v5 + 8));
      v5 += 16;
    }
    while (v5 != v7);
  }
}

void sub_20E9484F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20E92CED8();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20E877A38();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_QWORD *)v5 - 2);
        v5 -= 4;
        v18 = v5[2];
        *((_QWORD *)v13 - 2) = v17;
        v13 -= 16;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E94861C(uint64_t a1, char ***a2)
{
  char **v4;
  unint64_t v5;
  char **v6;
  char **v7;
  char ***v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;

  v15 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v15);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a2);
  if (v15 > v5)
  {
    sub_20E948258((uint64_t)a2, v15 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = (char *)v7 - (char *)v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v15 >= v5)
  {
    v6 = *a2;
    v9 = (char *)v4 - (char *)v6;
    if (!v9)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[3 * v15];
  if (v4 != (char **)v10)
  {
    v11 = a2[1];
    do
    {
      v13 = *(v11 - 3);
      v11 -= 3;
      v12 = v13;
      if (v13)
      {
        *(v4 - 2) = v12;
        operator delete(v12);
      }
      v4 = v11;
    }
    while (v11 != (char **)v10);
  }
  a2[1] = (char **)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char **)v10 != v6)
  {
LABEL_13:
    v14 = 24 * (v9 / 24);
    do
    {
      sub_20E948740(a1, v6);
      v6 += 3;
      v14 -= 24;
    }
    while (v14);
  }
}

void sub_20E948740(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;

  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v10);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v10 <= v6)
  {
    if (v10 < v6)
    {
      v4 = &v5[24 * v10];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E93E65C(a2, v10 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = (unsigned __int128)((v4 - v5) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v8 = 24 * ((v7 >> 2) + ((unint64_t)v7 >> 63));
    do
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      sub_20E9EE368(*(_QWORD *)(a1 + 48), &v11);
      v9 = v11;
      if (v12 != v11)
        memmove(v5, v11, (char *)v12 - (char *)v11);
      if (v9)
      {
        v12 = v9;
        operator delete(v9);
      }
      v5 += 24;
      v8 -= 24;
    }
    while (v8);
  }
}

void sub_20E948850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E94886C(uint64_t a1, char ***a2)
{
  char **v4;
  unint64_t v5;
  char **v6;
  char **v7;
  char ***v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;

  v15 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v15);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a2);
  if (v15 > v5)
  {
    sub_20E948258((uint64_t)a2, v15 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = (char *)v7 - (char *)v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v15 >= v5)
  {
    v6 = *a2;
    v9 = (char *)v4 - (char *)v6;
    if (!v9)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[3 * v15];
  if (v4 != (char **)v10)
  {
    v11 = a2[1];
    do
    {
      v13 = *(v11 - 3);
      v11 -= 3;
      v12 = v13;
      if (v13)
      {
        *(v4 - 2) = v12;
        operator delete(v12);
      }
      v4 = v11;
    }
    while (v11 != (char **)v10);
  }
  a2[1] = (char **)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char **)v10 != v6)
  {
LABEL_13:
    v14 = 24 * (v9 / 24);
    do
    {
      sub_20E948990(a1, v6);
      v6 += 3;
      v14 -= 24;
    }
    while (v14);
  }
}

void sub_20E948990(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  double *v10;
  unint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;

  v11 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v11);
  v4 = *a2;
  v5 = a2[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a2) >> 4);
  if (v11 <= v6)
  {
    if (v11 < v6)
    {
      v5 = &v4[80 * v11];
      a2[1] = v5;
    }
  }
  else
  {
    sub_20E948AC8(a2, v11 - v6);
    v4 = *a2;
    v5 = a2[1];
  }
  if (v5 != v4)
  {
    v7 = (unsigned __int128)((v5 - v4) * (__int128)0x6666666666666667) >> 64;
    v8 = 80 * ((v7 >> 5) + ((unint64_t)v7 >> 63));
    v9 = v4 + 72;
    do
    {
      sub_20E9EE1A4(*(_QWORD *)(a1 + 48), v9);
      v12 = 0;
      v13 = 0;
      v14 = 0;
      sub_20E9EE368(*(_QWORD *)(a1 + 48), &v12);
      v10 = v12;
      if (v13 != v12)
        memmove(v9 - 72, v12, (char *)v13 - (char *)v12);
      if (v10)
      {
        v13 = v10;
        operator delete(v10);
      }
      v9 += 80;
      v8 -= 80;
    }
    while (v8);
  }
}

void sub_20E948AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E948AC8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x333333333333333)
      sub_20E92CED8();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x333333333333333)
        sub_20E877A38();
      v11 = (char *)operator new(80 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[80 * v7];
    v14 = &v11[80 * v10];
    v15 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 5) = *((_OWORD *)v5 - 5);
        v17 = *((_OWORD *)v5 - 4);
        v18 = *((_OWORD *)v5 - 3);
        v19 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v13 - 23) = *(_OWORD *)(v5 - 23);
        *((_OWORD *)v13 - 3) = v18;
        *((_OWORD *)v13 - 2) = v19;
        *((_OWORD *)v13 - 4) = v17;
        v13 -= 80;
        v5 -= 80;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

char **sub_20E948C74(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  void **v35;

  v2 = a1[18];
  if (v2)
  {
    v3 = a1[19];
    v4 = a1[18];
    if (v3 != v2)
    {
      v5 = a1[19];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = a1[18];
    }
    a1[19] = v2;
    operator delete(v4);
  }
  v8 = a1[15];
  if (v8)
  {
    v9 = a1[16];
    v10 = a1[15];
    if (v9 != v8)
    {
      v11 = a1[16];
      do
      {
        v13 = (void *)*((_QWORD *)v11 - 3);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *((_QWORD *)v9 - 2) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = a1[15];
    }
    a1[16] = v8;
    operator delete(v10);
  }
  v14 = a1[12];
  if (v14)
  {
    v15 = a1[13];
    v16 = a1[12];
    if (v15 != v14)
    {
      v17 = a1[13];
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *((_QWORD *)v15 - 2) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = a1[12];
    }
    a1[13] = v14;
    operator delete(v16);
  }
  v20 = a1[9];
  if (v20)
  {
    v21 = a1[10];
    v22 = a1[9];
    if (v21 != v20)
    {
      v23 = a1[10];
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 3);
        v23 -= 24;
        v24 = v25;
        if (v25)
        {
          *((_QWORD *)v21 - 2) = v24;
          operator delete(v24);
        }
        v21 = v23;
      }
      while (v23 != v20);
      v22 = a1[9];
    }
    a1[10] = v20;
    operator delete(v22);
  }
  v35 = (void **)(a1 + 6);
  sub_20E94733C(&v35);
  v26 = a1[3];
  if (v26)
  {
    v27 = a1[4];
    v28 = a1[3];
    if (v27 != v26)
    {
      do
      {
        v29 = (void *)*((_QWORD *)v27 - 6);
        if (v29)
        {
          *((_QWORD *)v27 - 5) = v29;
          operator delete(v29);
        }
        v27 -= 792;
      }
      while (v27 != v26);
      v28 = a1[3];
    }
    a1[4] = v26;
    operator delete(v28);
  }
  v30 = *a1;
  if (*a1)
  {
    v31 = a1[1];
    v32 = *a1;
    if (v31 == v30)
    {
LABEL_53:
      a1[1] = v30;
      operator delete(v32);
      return a1;
    }
    while ((*(v31 - 1) & 0x80000000) == 0)
    {
      v33 = (void *)*((_QWORD *)v31 - 6);
      if (v33)
        goto LABEL_47;
LABEL_48:
      if (*(v31 - 49) < 0)
        operator delete(*((void **)v31 - 9));
      v31 -= 184;
      if (v31 == v30)
      {
        v32 = *a1;
        goto LABEL_53;
      }
    }
    operator delete(*((void **)v31 - 3));
    v33 = (void *)*((_QWORD *)v31 - 6);
    if (!v33)
      goto LABEL_48;
LABEL_47:
    *((_QWORD *)v31 - 5) = v33;
    operator delete(v33);
    goto LABEL_48;
  }
  return a1;
}

void sub_20E948EA0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20E9EDADC(a2[6], &v7);
  if (v7 < 2)
  {
    sub_20E948F78((uint64_t)&v8, (uint64_t)a2, a3);
  }
  else
  {
    sub_20E90A71C(a2 + 2);
    sub_20E94921C(a2, a3);
    sub_20E94949C((uint64_t)a2, (char **)(a3 + 24));
    v5 = a2[4];
    v6 = *(_QWORD *)(v5 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v5 - 8);
    if (v6)
      (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v6);
    a2[4] -= 16;
  }
}

void sub_20E948F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD *v29[2];
  void *__p;
  void *v31;
  uint64_t v32;
  __int128 v33;

  v28 = v29;
  v29[0] = 0;
  v29[1] = 0;
  __p = 0;
  v31 = 0;
  v32 = 0;
  sub_20E949F34(a2, (uint64_t)&v28);
  sub_20E94A0DC(a2, (char **)&__p);
  v24 = 0;
  v25 = 0;
  v23 = &v24;
  v5 = v28;
  if (v28 != v29)
  {
    v33 = *((_OWORD *)v28 + 3);
    v6 = &v24;
    v7 = &v24;
LABEL_13:
    while (2)
    {
      v13 = operator new(0x40uLL);
      v14 = v33;
      v13[2] = *((_OWORD *)v5 + 2);
      v13[3] = v14;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = v7;
      *v6 = (uint64_t *)v13;
      if (*v23)
      {
        v23 = (uint64_t **)*v23;
        v13 = *v6;
      }
      sub_20E868578(v24, (uint64_t *)v13);
      ++v25;
LABEL_16:
      v15 = v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = (_QWORD **)v16;
        }
        while (!v17);
      }
      if (v16 != v29)
      {
        v5 = (_QWORD **)v16;
        v33 = *((_OWORD *)v16 + 3);
        v6 = &v24;
        v7 = &v24;
        if (!v24)
          continue;
        v8 = v16[4];
        v9 = v24;
        while (1)
        {
          while (1)
          {
            v7 = (uint64_t **)v9;
            v10 = v9[4];
            if (v8 == v10)
              break;
            if (v8 >= v10)
            {
              if (v10 >= v8)
                goto LABEL_16;
              goto LABEL_11;
            }
LABEL_4:
            v9 = *v7;
            v6 = v7;
            if (!*v7)
              goto LABEL_13;
          }
          v11 = *((_DWORD *)v5 + 10);
          v12 = *((_DWORD *)v7 + 10);
          if (v11 < v12)
            goto LABEL_4;
          if (v12 >= v11)
            goto LABEL_16;
LABEL_11:
          v9 = v7[1];
          if (!v9)
          {
            v6 = v7 + 1;
            goto LABEL_13;
          }
        }
      }
      break;
    }
  }
  sub_20E94A1CC((uint64_t *)&__p, (uint64_t)&v26);
  v18 = a3 + 8;
  sub_20E86872C(a3, *(_QWORD **)(a3 + 8));
  v19 = v24;
  *(_QWORD *)a3 = v23;
  *(_QWORD *)(a3 + 8) = v19;
  v20 = v25;
  *(_QWORD *)(a3 + 16) = v25;
  if (v20)
  {
    v19[2] = v18;
    v23 = &v24;
    v24 = 0;
    v25 = 0;
    v19 = 0;
    v22 = (_QWORD *)(a3 + 24);
    v21 = *(void **)(a3 + 24);
    if (!v21)
      goto LABEL_27;
    goto LABEL_26;
  }
  *(_QWORD *)a3 = v18;
  v22 = (_QWORD *)(a3 + 24);
  v21 = *(void **)(a3 + 24);
  if (v21)
  {
LABEL_26:
    *(_QWORD *)(a3 + 32) = v21;
    operator delete(v21);
    *v22 = 0;
    v22[1] = 0;
    v22[2] = 0;
    v19 = v24;
  }
LABEL_27:
  *(_OWORD *)(a3 + 24) = v26;
  *(_QWORD *)(a3 + 40) = v27;
  v27 = 0;
  v26 = 0uLL;
  sub_20E86872C((uint64_t)&v23, v19);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  sub_20E86872C((uint64_t)&v28, v29[0]);
}

void sub_20E9491DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20E86872C((uint64_t)&a9, a10);
  sub_20E949EF8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20E94921C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;

  v18 = 0;
  sub_20E9EDE6C(a1[6], &v18);
  v4 = (uint64_t *)(a2 + 8);
  sub_20E86872C(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = v18;
  if (v18)
  {
    v6 = 0;
    while (1)
    {
      v16 = 0u;
      v17 = 0u;
      sub_20E9EDE6C(a1[6], &v16);
      sub_20E9EDADC(a1[6], (_DWORD *)&v16 + 2);
      v19 = 2;
      sub_20E9EDADC(a1[6], &v19);
      sub_20E9493BC((uint64_t)&v19, a1, (uint64_t)&v17, v19);
      v11 = *v4;
      v12 = (uint64_t **)(a2 + 8);
      v13 = a2 + 8;
      if (*v4)
        break;
LABEL_3:
      v7 = operator new(0x40uLL);
      v8 = v17;
      v7[2] = v16;
      v7[3] = v8;
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = v13;
      *v12 = (uint64_t *)v7;
      v9 = **(_QWORD **)a2;
      if (v9)
      {
        *(_QWORD *)a2 = v9;
        v10 = *v12;
      }
      else
      {
        v10 = (uint64_t *)v7;
      }
      sub_20E868578(*(uint64_t **)(a2 + 8), v10);
      ++*(_QWORD *)(a2 + 16);
LABEL_6:
      if (++v6 == v5)
        return;
    }
    while (1)
    {
      while (1)
      {
        v13 = v11;
        v14 = *(_QWORD *)(v11 + 32);
        if ((_QWORD)v16 == v14)
          break;
        if ((unint64_t)v16 >= v14)
        {
          if (v14 >= (unint64_t)v16)
            goto LABEL_6;
          goto LABEL_16;
        }
LABEL_9:
        v11 = *(_QWORD *)v13;
        v12 = (uint64_t **)v13;
        if (!*(_QWORD *)v13)
          goto LABEL_3;
      }
      v15 = *(_DWORD *)(v13 + 40);
      if (DWORD2(v16) < v15)
        goto LABEL_9;
      if (v15 >= DWORD2(v16))
        goto LABEL_6;
LABEL_16:
      v11 = *(_QWORD *)(v13 + 8);
      if (!v11)
      {
        v12 = (uint64_t **)(v13 + 8);
        goto LABEL_3;
      }
    }
  }
}

double sub_20E9493BC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;

  if (a4 < 2)
  {
    *(_QWORD *)&v10 = 0;
    DWORD2(v10) = 0;
    sub_20E9EDE6C(a2[6], &v10);
    sub_20E9EDADC(a2[6], (_DWORD *)&v10 + 2);
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    sub_20E9EDE6C(a2[6], (_QWORD *)a3);
    sub_20E9EDADC(a2[6], (_DWORD *)(a3 + 8));
    v7 = a2[4];
    v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v8);
    a2[4] -= 16;
  }
  return result;
}

void sub_20E94949C(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unsigned int v10;

  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 5);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v8);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a2) >> 5);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = &v5[480 * v8];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E949590(a2, v8 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = 480 * ((v4 - v5) / 480);
    do
    {
      v10 = 3;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v10);
      sub_20E94972C((uint64_t)&v9, a1, (uint64_t)v5, v10);
      v5 += 480;
      v7 -= 480;
    }
    while (v7);
  }
}

void sub_20E949590(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 5) >= a2)
  {
    if (a2)
    {
      v12 = 480 * ((480 * a2 - 480) / 0x1E0) + 480;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 5);
    v8 = v7 + a2;
    if (v7 + a2 > 0x88888888888888)
      sub_20E92CED8();
    v9 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - v6) >> 5);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x44444444444444)
      v10 = 0x88888888888888;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x88888888888888)
        sub_20E877A38();
      v11 = (char *)operator new(480 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[480 * v7];
    v14 = &v11[480 * v10];
    v15 = 480 * ((480 * a2 - 480) / 0x1E0) + 480;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 480;
        v13 -= 480;
        memcpy(v13, v5, 0x1DCuLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

__n128 sub_20E94972C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  char v10;
  int v11;
  _BYTE v12[31];
  _BYTE v13[8];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[288];
  int v27;

  if (a4 <= 2)
  {
    v13[0] = 0;
    *(_QWORD *)&v14 = 0;
    DWORD2(v14) = 0;
    LODWORD(v15) = 0;
    *(_QWORD *)&v16 = 0;
    DWORD2(v16) = 0;
    LODWORD(v17) = 0;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    memset(v26, 0, sizeof(v26));
    sub_20E949BE4(a2, (uint64_t)v13, a4);
    v10 = v13[0];
    *(_OWORD *)&v12[7] = v14;
    *(_QWORD *)&v12[23] = v15;
    *(_OWORD *)(a3 + 32) = v16;
    *(_QWORD *)(a3 + 48) = v17;
    *(_OWORD *)(a3 + 120) = v22;
    *(_OWORD *)(a3 + 136) = v23;
    *(_OWORD *)(a3 + 152) = v24;
    *(_OWORD *)(a3 + 168) = v25;
    *(_OWORD *)(a3 + 56) = v18;
    *(_OWORD *)(a3 + 72) = v19;
    *(_OWORD *)(a3 + 88) = v20;
    *(_OWORD *)(a3 + 104) = v21;
    memcpy((void *)(a3 + 184), v26, 0x120uLL);
    v11 = v27;
    *(_BYTE *)a3 = v10;
    *(_OWORD *)(a3 + 1) = *(_OWORD *)v12;
    result = *(__n128 *)&v12[15];
    *(_OWORD *)(a3 + 16) = *(_OWORD *)&v12[15];
    *(_DWORD *)(a3 + 472) = v11;
  }
  else
  {
    v6 = a2 + 16;
    sub_20E90A71C((_QWORD *)(a2 + 16));
    sub_20E9498EC(a2, a3);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(v7 - 16)
       - (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16)
       + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(a2 + 16, v8);
    *(_QWORD *)(a2 + 32) -= 16;
  }
  return result;
}

void sub_20E9498EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), (_BYTE *)a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 8));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 16));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 24));
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 32));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 40));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  v4 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v4, (double *)(a2 + 56));
  sub_20E9EE078(v4, (double *)(a2 + 64));
  sub_20E9EE078(v4, (double *)(a2 + 72));
  sub_20E9EE078(v4, (double *)(a2 + 80));
  sub_20E9EE078(v4, (double *)(a2 + 88));
  sub_20E9EE078(v4, (double *)(a2 + 96));
  sub_20E9EE078(v4, (double *)(a2 + 104));
  sub_20E9EE078(v4, (double *)(a2 + 112));
  sub_20E9EE078(v4, (double *)(a2 + 120));
  sub_20E9EE078(v4, (double *)(a2 + 128));
  sub_20E9EE078(v4, (double *)(a2 + 136));
  sub_20E9EE078(v4, (double *)(a2 + 144));
  sub_20E9EE078(v4, (double *)(a2 + 152));
  sub_20E9EE078(v4, (double *)(a2 + 160));
  sub_20E9EE078(v4, (double *)(a2 + 168));
  sub_20E9EE078(v4, (double *)(a2 + 176));
  v5 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v5, (double *)(a2 + 184));
  sub_20E9EE078(v5, (double *)(a2 + 192));
  sub_20E9EE078(v5, (double *)(a2 + 200));
  sub_20E9EE078(v5, (double *)(a2 + 208));
  sub_20E9EE078(v5, (double *)(a2 + 216));
  sub_20E9EE078(v5, (double *)(a2 + 224));
  sub_20E9EE078(v5, (double *)(a2 + 232));
  sub_20E9EE078(v5, (double *)(a2 + 240));
  sub_20E9EE078(v5, (double *)(a2 + 248));
  sub_20E9EE078(v5, (double *)(a2 + 256));
  sub_20E9EE078(v5, (double *)(a2 + 264));
  sub_20E9EE078(v5, (double *)(a2 + 272));
  sub_20E9EE078(v5, (double *)(a2 + 280));
  sub_20E9EE078(v5, (double *)(a2 + 288));
  sub_20E9EE078(v5, (double *)(a2 + 296));
  sub_20E9EE078(v5, (double *)(a2 + 304));
  sub_20E9EE078(v5, (double *)(a2 + 312));
  sub_20E9EE078(v5, (double *)(a2 + 320));
  sub_20E9EE078(v5, (double *)(a2 + 328));
  sub_20E9EE078(v5, (double *)(a2 + 336));
  sub_20E9EE078(v5, (double *)(a2 + 344));
  sub_20E9EE078(v5, (double *)(a2 + 352));
  sub_20E9EE078(v5, (double *)(a2 + 360));
  sub_20E9EE078(v5, (double *)(a2 + 368));
  sub_20E9EE078(v5, (double *)(a2 + 376));
  sub_20E9EE078(v5, (double *)(a2 + 384));
  sub_20E9EE078(v5, (double *)(a2 + 392));
  sub_20E9EE078(v5, (double *)(a2 + 400));
  sub_20E9EE078(v5, (double *)(a2 + 408));
  sub_20E9EE078(v5, (double *)(a2 + 416));
  sub_20E9EE078(v5, (double *)(a2 + 424));
  sub_20E9EE078(v5, (double *)(a2 + 432));
  sub_20E9EE078(v5, (double *)(a2 + 440));
  sub_20E9EE078(v5, (double *)(a2 + 448));
  sub_20E9EE078(v5, (double *)(a2 + 456));
  sub_20E9EE078(v5, (double *)(a2 + 464));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 472));
}

void sub_20E949BE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;

  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), (_BYTE *)a2);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 8));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 16));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 24));
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 32));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 40));
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  v6 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v6, (double *)(a2 + 56));
  sub_20E9EE078(v6, (double *)(a2 + 64));
  sub_20E9EE078(v6, (double *)(a2 + 72));
  sub_20E9EE078(v6, (double *)(a2 + 80));
  sub_20E9EE078(v6, (double *)(a2 + 88));
  sub_20E9EE078(v6, (double *)(a2 + 96));
  sub_20E9EE078(v6, (double *)(a2 + 104));
  sub_20E9EE078(v6, (double *)(a2 + 112));
  sub_20E9EE078(v6, (double *)(a2 + 120));
  sub_20E9EE078(v6, (double *)(a2 + 128));
  sub_20E9EE078(v6, (double *)(a2 + 136));
  sub_20E9EE078(v6, (double *)(a2 + 144));
  sub_20E9EE078(v6, (double *)(a2 + 152));
  sub_20E9EE078(v6, (double *)(a2 + 160));
  sub_20E9EE078(v6, (double *)(a2 + 168));
  sub_20E9EE078(v6, (double *)(a2 + 176));
  v7 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v7, (double *)(a2 + 184));
  sub_20E9EE078(v7, (double *)(a2 + 192));
  sub_20E9EE078(v7, (double *)(a2 + 200));
  sub_20E9EE078(v7, (double *)(a2 + 208));
  sub_20E9EE078(v7, (double *)(a2 + 216));
  sub_20E9EE078(v7, (double *)(a2 + 224));
  sub_20E9EE078(v7, (double *)(a2 + 232));
  sub_20E9EE078(v7, (double *)(a2 + 240));
  sub_20E9EE078(v7, (double *)(a2 + 248));
  sub_20E9EE078(v7, (double *)(a2 + 256));
  sub_20E9EE078(v7, (double *)(a2 + 264));
  sub_20E9EE078(v7, (double *)(a2 + 272));
  sub_20E9EE078(v7, (double *)(a2 + 280));
  sub_20E9EE078(v7, (double *)(a2 + 288));
  sub_20E9EE078(v7, (double *)(a2 + 296));
  sub_20E9EE078(v7, (double *)(a2 + 304));
  sub_20E9EE078(v7, (double *)(a2 + 312));
  sub_20E9EE078(v7, (double *)(a2 + 320));
  sub_20E9EE078(v7, (double *)(a2 + 328));
  sub_20E9EE078(v7, (double *)(a2 + 336));
  sub_20E9EE078(v7, (double *)(a2 + 344));
  sub_20E9EE078(v7, (double *)(a2 + 352));
  sub_20E9EE078(v7, (double *)(a2 + 360));
  sub_20E9EE078(v7, (double *)(a2 + 368));
  sub_20E9EE078(v7, (double *)(a2 + 376));
  sub_20E9EE078(v7, (double *)(a2 + 384));
  sub_20E9EE078(v7, (double *)(a2 + 392));
  sub_20E9EE078(v7, (double *)(a2 + 400));
  sub_20E9EE078(v7, (double *)(a2 + 408));
  sub_20E9EE078(v7, (double *)(a2 + 416));
  sub_20E9EE078(v7, (double *)(a2 + 424));
  sub_20E9EE078(v7, (double *)(a2 + 432));
  sub_20E9EE078(v7, (double *)(a2 + 440));
  sub_20E9EE078(v7, (double *)(a2 + 448));
  sub_20E9EE078(v7, (double *)(a2 + 456));
  sub_20E9EE078(v7, (double *)(a2 + 464));
  if (a3 >= 2)
    sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 472));
}

uint64_t sub_20E949EF8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_20E86872C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_20E949F34(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v18 = 0;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v18);
  v4 = (uint64_t *)(a2 + 8);
  sub_20E86872C(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = v18;
  if (v18)
  {
    v6 = 0;
    while (1)
    {
      v16 = 0u;
      v17 = 0u;
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v16);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)&v16 + 2);
      v19 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v19);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v17);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)&v17 + 2);
      v11 = *v4;
      v12 = (uint64_t **)(a2 + 8);
      v13 = a2 + 8;
      if (*v4)
        break;
LABEL_3:
      v7 = operator new(0x40uLL);
      v8 = v17;
      v7[2] = v16;
      v7[3] = v8;
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = v13;
      *v12 = (uint64_t *)v7;
      v9 = **(_QWORD **)a2;
      if (v9)
      {
        *(_QWORD *)a2 = v9;
        v10 = *v12;
      }
      else
      {
        v10 = (uint64_t *)v7;
      }
      sub_20E868578(*(uint64_t **)(a2 + 8), v10);
      ++*(_QWORD *)(a2 + 16);
LABEL_6:
      if (++v6 == v5)
        return;
    }
    while (1)
    {
      while (1)
      {
        v13 = v11;
        v14 = *(_QWORD *)(v11 + 32);
        if ((_QWORD)v16 == v14)
          break;
        if ((unint64_t)v16 >= v14)
        {
          if (v14 >= (unint64_t)v16)
            goto LABEL_6;
          goto LABEL_16;
        }
LABEL_9:
        v11 = *(_QWORD *)v13;
        v12 = (uint64_t **)v13;
        if (!*(_QWORD *)v13)
          goto LABEL_3;
      }
      v15 = *(_DWORD *)(v13 + 40);
      if (DWORD2(v16) < v15)
        goto LABEL_9;
      if (v15 >= DWORD2(v16))
        goto LABEL_6;
LABEL_16:
      v11 = *(_QWORD *)(v13 + 8);
      if (!v11)
      {
        v12 = (uint64_t **)(v13 + 8);
        goto LABEL_3;
      }
    }
  }
}

void sub_20E94A0DC(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 5);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v8);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a2) >> 5);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = &v5[480 * v8];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E949590(a2, v8 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = 480 * ((v4 - v5) / 480);
    do
    {
      v9 = 2;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v9);
      sub_20E949BE4(a1, (uint64_t)v5, v9);
      v5 += 480;
      v7 -= 480;
    }
    while (v7);
  }
}

int64_t sub_20E94A1CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int64_t result;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE __src[8];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _DWORD v32[73];
  void **v33;

  v4 = *a1;
  v3 = a1[1];
  v18 = 0;
  v17 = 0uLL;
  result = v3 - v4;
  if (v3 == v4)
  {
    v16 = 0;
    v15 = 0uLL;
  }
  else
  {
    v6 = 0xEEEEEEEEEEEEEEEFLL * (result >> 5);
    if (v6 >= 0x88888888888889)
      sub_20E92CED8();
    *(_QWORD *)&v17 = operator new(result);
    *((_QWORD *)&v17 + 1) = v17;
    v18 = v17 + 480 * v6;
    v33 = (void **)&v17;
    do
    {
      __src[0] = *(_BYTE *)v4;
      v7 = *(_OWORD *)(v4 + 8);
      v21 = *(_QWORD *)(v4 + 24);
      v20 = v7;
      v8 = *(_OWORD *)(v4 + 32);
      v23 = *(_QWORD *)(v4 + 48);
      v22 = v8;
      v9 = *(_OWORD *)(v4 + 136);
      v10 = *(_OWORD *)(v4 + 168);
      v11 = *(_OWORD *)(v4 + 120);
      v30 = *(_OWORD *)(v4 + 152);
      v31 = v10;
      v28 = v11;
      v29 = v9;
      v12 = *(_OWORD *)(v4 + 56);
      v13 = *(_OWORD *)(v4 + 72);
      v14 = *(_OWORD *)(v4 + 104);
      v26 = *(_OWORD *)(v4 + 88);
      v27 = v14;
      v24 = v12;
      v25 = v13;
      memcpy(v32, (const void *)(v4 + 184), sizeof(v32));
      result = (int64_t)sub_20E94A340(&v33, __src);
      v4 += 480;
    }
    while (v4 != v3);
    v15 = v17;
    v16 = v18;
  }
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_20E94A320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_20E94A340(void ***a1, void *__src)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*v4;
    v9 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - (_BYTE *)*v4) >> 5);
    v10 = v9 + 1;
    if (v9 + 1 > 0x88888888888888)
      sub_20E92CED8();
    v11 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - (_QWORD)v8) >> 5);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x44444444444444)
      v12 = 0x88888888888888;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x88888888888888)
        sub_20E877A38();
      v13 = (char *)operator new(480 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[480 * v9];
    v15 = &v13[480 * v12];
    memcpy(v14, __src, 0x1E0uLL);
    v7 = v14 + 480;
    if (v6 != v8)
    {
      do
      {
        v6 -= 480;
        v14 -= 480;
        memcpy(v14, v6, 0x1DCuLL);
      }
      while (v6 != v8);
      v6 = (char *)*v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = v15;
    if (v6)
      operator delete(v6);
  }
  else
  {
    memcpy((*a1)[1], __src, 0x1E0uLL);
    v7 = v6 + 480;
  }
  v4[1] = v7;
  return a1;
}

void sub_20E94A488(_QWORD *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  int v6;
  int v7;
  char v8[512];
  uint64_t v9;
  char v10;

  v9 = 0;
  sub_20E9EDE6C(a1[6], &v9);
  sub_20E86872C(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v9; i; --i)
  {
    bzero(&v5, 0x218uLL);
    sub_20E9EDE6C(a1[6], &v5);
    sub_20E9EDADC(a1[6], &v6);
    sub_20E9EDADC(a1[6], &v7);
    sub_20E93E464((uint64_t)&v10, a1, v8);
    sub_20E94A564((uint64_t **)a2, &v5, (uint64_t)&v5);
  }
}

uint64_t *sub_20E94A564(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    v8 = *((_DWORD *)a2 + 2);
    v9 = *((_DWORD *)a2 + 4);
    while (1)
    {
      while (1)
      {
        v10 = v5;
        v11 = v5[4];
        if (v7 == v11)
          break;
        if (v7 < v11)
          goto LABEL_3;
        if (v11 >= v7)
          return v10;
LABEL_14:
        v5 = (uint64_t *)v10[1];
        if (!v5)
        {
          v6 = (uint64_t **)(v10 + 1);
          goto LABEL_17;
        }
      }
      v12 = *((_DWORD *)v10 + 10);
      if (v8 != v12)
      {
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return v10;
        goto LABEL_14;
      }
      v13 = *((_DWORD *)v10 + 12);
      if (v9 >= v13)
      {
        if (v13 >= v9)
          return v10;
        goto LABEL_14;
      }
LABEL_3:
      v5 = (uint64_t *)*v10;
      v6 = (uint64_t **)v10;
      if (!*v10)
        goto LABEL_17;
    }
  }
  v10 = (uint64_t *)(a1 + 1);
LABEL_17:
  v14 = v10;
  v15 = operator new(0x238uLL);
  v15[2] = *(_OWORD *)a3;
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a3 + 16);
  memcpy((char *)v15 + 56, (const void *)(a3 + 24), 0x200uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v14;
  *v6 = (uint64_t *)v15;
  v16 = (uint64_t *)**a1;
  v17 = (uint64_t *)v15;
  if (v16)
  {
    *a1 = v16;
    v17 = *v6;
  }
  sub_20E868578(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v15;
}

void sub_20E94A6AC(_QWORD *a1, uint64_t a2)
{
  uint64_t i;
  void *v5[2];
  void *__p[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = 0;
  sub_20E9EDE6C(a1[6], &v28);
  sub_20E866B68(a2, *(_QWORD *)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v28; i; --i)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)__p = 0u;
    sub_20E9EE280(a1[6], (std::string *)v5);
    sub_20E942A10(a1, (uint64_t)&__p[1]);
    sub_20E94A7CC((uint64_t **)a2, (const void **)v5, (uint64_t)v5);
    if (SHIBYTE(v7) < 0)
    {
      operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
LABEL_8:
        operator delete(v5[0]);
    }
    else if (SHIBYTE(__p[0]) < 0)
    {
      goto LABEL_8;
    }
  }
}

void sub_20E94A7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C8C8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20E94A7CC(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = (char *)(a1 + 1);
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (char *)v5;
      v13 = (_QWORD *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *(uint64_t **)v10;
      v6 = (uint64_t **)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return v10;
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    v5 = (uint64_t *)*((_QWORD *)v10 + 1);
  }
  while (v5);
  v6 = (uint64_t **)(v10 + 8);
LABEL_29:
  v20 = v10;
  v10 = (char *)operator new(0x188uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v21 = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v10 + 9) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_OWORD *)(v10 + 56) = v21;
  memcpy(v10 + 80, (const void *)(a3 + 48), 0x131uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v20;
  *v6 = (uint64_t *)v10;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v10;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_20E868578(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

void sub_20E94A950(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20E92CED8();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20E877A38();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E94AA78(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0x641511E8D2B3183BLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 1944 * ((1944 * a2 - 1944) / 0x798) + 1944;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x641511E8D2B3183BLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x21B641511E8D2BLL)
      sub_20E92CED8();
    v9 = 0x641511E8D2B3183BLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x10DB20A88F4695)
      v10 = 0x21B641511E8D2BLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x21B641511E8D2BLL)
        sub_20E877A38();
      v11 = (char *)operator new(1944 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[1944 * v7];
    v14 = &v11[1944 * v10];
    v15 = 1944 * ((1944 * a2 - 1944) / 0x798) + 1944;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v13 -= 1944;
        v5 -= 1944;
        memcpy(v13, v5, 0x798uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20E94AC4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  sub_20E9EDE6C(a1[6], (_QWORD *)a2);
  sub_20E9EDADC(a1[6], (_DWORD *)(a2 + 8));
  v7 = 1;
  sub_20E9EDADC(a1[6], &v7);
  sub_20E90A71C(a1 + 2);
  sub_20E94AD0C(a1, a2 + 16);
  v4 = a1[4];
  result = (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2);
  v6 = *(_QWORD *)(v4 - 16) - result + *(_QWORD *)(v4 - 8);
  if (v6)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v6);
  a1[4] -= 16;
  return result;
}

void sub_20E94AD0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  sub_20E9EDE6C(a1[6], (_QWORD *)a2);
  sub_20E9EDADC(a1[6], (_DWORD *)(a2 + 8));
  sub_20E9EDE6C(a1[6], (_QWORD *)(a2 + 16));
  sub_20E9EDADC(a1[6], (_DWORD *)(a2 + 24));
  v7 = 1;
  sub_20E9EDADC(a1[6], &v7);
  sub_20E90A71C(a1 + 2);
  sub_20E94AE2C((uint64_t)a1, (double *)(a2 + 32));
  v4 = a1[4];
  v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
  if (v5)
    (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
  a1[4] -= 16;
  v6 = a1[6];
  sub_20E9EE078(v6, (double *)(a2 + 1888));
  sub_20E9EE078(v6, (double *)(a2 + 1896));
  sub_20E9EE078(v6, (double *)(a2 + 1904));
  sub_20E9EE078(a1[6], (double *)(a2 + 1912));
  sub_20E9EE078(a1[6], (double *)(a2 + 1920));
}

void sub_20E94AE2C(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v4, a2);
  sub_20E9EE078(v4, a2 + 1);
  sub_20E9EE078(v4, a2 + 2);
  v5 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v5, a2 + 3);
  sub_20E9EE078(v5, a2 + 4);
  sub_20E9EE078(v5, a2 + 5);
  v6 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v6, a2 + 6);
  sub_20E9EE078(v6, a2 + 7);
  sub_20E9EE078(v6, a2 + 8);
  sub_20E9EE078(v6, a2 + 9);
  v7 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v7, a2 + 10);
  sub_20E9EE078(v7, a2 + 11);
  sub_20E9EE078(v7, a2 + 12);
  sub_20E9EE078(v7, a2 + 13);
  sub_20E9EE078(v7, a2 + 14);
  sub_20E9EE078(v7, a2 + 15);
  sub_20E9EE078(v7, a2 + 16);
  sub_20E9EE078(v7, a2 + 17);
  sub_20E9EE078(v7, a2 + 18);
  v8 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v8, a2 + 19);
  sub_20E9EE078(v8, a2 + 20);
  sub_20E9EE078(v8, a2 + 21);
  sub_20E9EE078(v8, a2 + 22);
  sub_20E9EE078(v8, a2 + 23);
  sub_20E9EE078(v8, a2 + 24);
  sub_20E9EE078(v8, a2 + 25);
  sub_20E9EE078(v8, a2 + 26);
  sub_20E9EE078(v8, a2 + 27);
  v9 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v9, a2 + 28);
  sub_20E9EE078(v9, a2 + 29);
  sub_20E9EE078(v9, a2 + 30);
  v10 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v10, a2 + 31);
  sub_20E9EE078(v10, a2 + 32);
  sub_20E9EE078(v10, a2 + 33);
  v11 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v11, a2 + 34);
  sub_20E9EE078(v11, a2 + 35);
  sub_20E9EE078(v11, a2 + 36);
  sub_20E9EE078(v11, a2 + 37);
  sub_20E9EE078(v11, a2 + 38);
  sub_20E9EE078(v11, a2 + 39);
  sub_20E9EE078(v11, a2 + 40);
  sub_20E9EE078(v11, a2 + 41);
  sub_20E9EE078(v11, a2 + 42);
  v12 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v12, a2 + 43);
  sub_20E9EE078(v12, a2 + 44);
  sub_20E9EE078(v12, a2 + 45);
  sub_20E9EE078(v12, a2 + 46);
  sub_20E9EE078(v12, a2 + 47);
  sub_20E9EE078(v12, a2 + 48);
  sub_20E9EE078(v12, a2 + 49);
  sub_20E9EE078(v12, a2 + 50);
  sub_20E9EE078(v12, a2 + 51);
  v13 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v13, a2 + 52);
  sub_20E9EE078(v13, a2 + 53);
  sub_20E9EE078(v13, a2 + 54);
  sub_20E9EE078(v13, a2 + 55);
  sub_20E9EE078(v13, a2 + 56);
  sub_20E9EE078(v13, a2 + 57);
  sub_20E9EE078(v13, a2 + 58);
  sub_20E9EE078(v13, a2 + 59);
  sub_20E9EE078(v13, a2 + 60);
  v14 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v14, a2 + 61);
  sub_20E9EE078(v14, a2 + 62);
  sub_20E9EE078(v14, a2 + 63);
  sub_20E9EE078(v14, a2 + 64);
  sub_20E9EE078(v14, a2 + 65);
  sub_20E9EE078(v14, a2 + 66);
  sub_20E9EE078(v14, a2 + 67);
  sub_20E9EE078(v14, a2 + 68);
  sub_20E9EE078(v14, a2 + 69);
  v15 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v15, a2 + 70);
  sub_20E9EE078(v15, a2 + 71);
  sub_20E9EE078(v15, a2 + 72);
  sub_20E9EE078(v15, a2 + 73);
  sub_20E9EE078(v15, a2 + 74);
  sub_20E9EE078(v15, a2 + 75);
  sub_20E9EE078(v15, a2 + 76);
  sub_20E9EE078(v15, a2 + 77);
  sub_20E9EE078(v15, a2 + 78);
  sub_20E9EE078(v15, a2 + 79);
  sub_20E9EE078(v15, a2 + 80);
  sub_20E9EE078(v15, a2 + 81);
  sub_20E9EE078(v15, a2 + 82);
  sub_20E9EE078(v15, a2 + 83);
  sub_20E9EE078(v15, a2 + 84);
  sub_20E9EE078(v15, a2 + 85);
  sub_20E9EE078(v15, a2 + 86);
  sub_20E9EE078(v15, a2 + 87);
  sub_20E9EE078(v15, a2 + 88);
  sub_20E9EE078(v15, a2 + 89);
  sub_20E9EE078(v15, a2 + 90);
  sub_20E9EE078(v15, a2 + 91);
  sub_20E9EE078(v15, a2 + 92);
  sub_20E9EE078(v15, a2 + 93);
  sub_20E9EE078(v15, a2 + 94);
  sub_20E9EE078(v15, a2 + 95);
  sub_20E9EE078(v15, a2 + 96);
  sub_20E9EE078(v15, a2 + 97);
  sub_20E9EE078(v15, a2 + 98);
  sub_20E9EE078(v15, a2 + 99);
  sub_20E9EE078(v15, a2 + 100);
  sub_20E9EE078(v15, a2 + 101);
  sub_20E9EE078(v15, a2 + 102);
  sub_20E9EE078(v15, a2 + 103);
  sub_20E9EE078(v15, a2 + 104);
  sub_20E9EE078(v15, a2 + 105);
  sub_20E9EE078(v15, a2 + 106);
  sub_20E9EE078(v15, a2 + 107);
  sub_20E9EE078(v15, a2 + 108);
  sub_20E9EE078(v15, a2 + 109);
  sub_20E9EE078(v15, a2 + 110);
  sub_20E9EE078(v15, a2 + 111);
  sub_20E9EE078(v15, a2 + 112);
  sub_20E9EE078(v15, a2 + 113);
  sub_20E9EE078(v15, a2 + 114);
  sub_20E9EE078(v15, a2 + 115);
  sub_20E9EE078(v15, a2 + 116);
  sub_20E9EE078(v15, a2 + 117);
  sub_20E9EE078(v15, a2 + 118);
  sub_20E9EE078(v15, a2 + 119);
  sub_20E9EE078(v15, a2 + 120);
  sub_20E9EE078(v15, a2 + 121);
  sub_20E9EE078(v15, a2 + 122);
  sub_20E9EE078(v15, a2 + 123);
  sub_20E9EE078(v15, a2 + 124);
  sub_20E9EE078(v15, a2 + 125);
  sub_20E9EE078(v15, a2 + 126);
  sub_20E9EE078(v15, a2 + 127);
  sub_20E9EE078(v15, a2 + 128);
  sub_20E9EE078(v15, a2 + 129);
  sub_20E9EE078(v15, a2 + 130);
  sub_20E9EE078(v15, a2 + 131);
  sub_20E9EE078(v15, a2 + 132);
  sub_20E9EE078(v15, a2 + 133);
  sub_20E9EE078(v15, a2 + 134);
  sub_20E9EE078(v15, a2 + 135);
  sub_20E9EE078(v15, a2 + 136);
  sub_20E9EE078(v15, a2 + 137);
  sub_20E9EE078(v15, a2 + 138);
  sub_20E9EE078(v15, a2 + 139);
  sub_20E9EE078(v15, a2 + 140);
  sub_20E9EE078(v15, a2 + 141);
  sub_20E9EE078(v15, a2 + 142);
  sub_20E9EE078(v15, a2 + 143);
  sub_20E9EE078(v15, a2 + 144);
  sub_20E9EE078(v15, a2 + 145);
  sub_20E9EE078(v15, a2 + 146);
  sub_20E9EE078(v15, a2 + 147);
  sub_20E9EE078(v15, a2 + 148);
  sub_20E9EE078(v15, a2 + 149);
  sub_20E9EE078(v15, a2 + 150);
  v16 = *(_QWORD *)(a1 + 48);
  sub_20E9EE078(v16, a2 + 151);
  sub_20E9EE078(v16, a2 + 152);
  sub_20E9EE078(v16, a2 + 153);
  sub_20E9EE078(v16, a2 + 154);
  sub_20E9EE078(v16, a2 + 155);
  sub_20E9EE078(v16, a2 + 156);
  sub_20E9EE078(v16, a2 + 157);
  sub_20E9EE078(v16, a2 + 158);
  sub_20E9EE078(v16, a2 + 159);
  sub_20E9EE078(v16, a2 + 160);
  sub_20E9EE078(v16, a2 + 161);
  sub_20E9EE078(v16, a2 + 162);
  sub_20E9EE078(v16, a2 + 163);
  sub_20E9EE078(v16, a2 + 164);
  sub_20E9EE078(v16, a2 + 165);
  sub_20E9EE078(v16, a2 + 166);
  sub_20E9EE078(v16, a2 + 167);
  sub_20E9EE078(v16, a2 + 168);
  sub_20E9EE078(v16, a2 + 169);
  sub_20E9EE078(v16, a2 + 170);
  sub_20E9EE078(v16, a2 + 171);
  sub_20E9EE078(v16, a2 + 172);
  sub_20E9EE078(v16, a2 + 173);
  sub_20E9EE078(v16, a2 + 174);
  sub_20E9EE078(v16, a2 + 175);
  sub_20E9EE078(v16, a2 + 176);
  sub_20E9EE078(v16, a2 + 177);
  sub_20E9EE078(v16, a2 + 178);
  sub_20E9EE078(v16, a2 + 179);
  sub_20E9EE078(v16, a2 + 180);
  sub_20E9EE078(v16, a2 + 181);
  sub_20E9EE078(v16, a2 + 182);
  sub_20E9EE078(v16, a2 + 183);
  sub_20E9EE078(v16, a2 + 184);
  sub_20E9EE078(v16, a2 + 185);
  sub_20E9EE078(v16, a2 + 186);
  sub_20E9EE078(v16, a2 + 187);
  sub_20E9EE078(v16, a2 + 188);
  sub_20E9EE078(v16, a2 + 189);
  sub_20E9EE078(v16, a2 + 190);
  sub_20E9EE078(v16, a2 + 191);
  sub_20E9EE078(v16, a2 + 192);
  sub_20E9EE078(v16, a2 + 193);
  sub_20E9EE078(v16, a2 + 194);
  sub_20E9EE078(v16, a2 + 195);
  sub_20E9EE078(v16, a2 + 196);
  sub_20E9EE078(v16, a2 + 197);
  sub_20E9EE078(v16, a2 + 198);
  sub_20E9EE078(v16, a2 + 199);
  sub_20E9EE078(v16, a2 + 200);
  sub_20E9EE078(v16, a2 + 201);
  sub_20E9EE078(v16, a2 + 202);
  sub_20E9EE078(v16, a2 + 203);
  sub_20E9EE078(v16, a2 + 204);
  sub_20E9EE078(v16, a2 + 205);
  sub_20E9EE078(v16, a2 + 206);
  sub_20E9EE078(v16, a2 + 207);
  sub_20E9EE078(v16, a2 + 208);
  sub_20E9EE078(v16, a2 + 209);
  sub_20E9EE078(v16, a2 + 210);
  sub_20E9EE078(v16, a2 + 211);
  sub_20E9EE078(v16, a2 + 212);
  sub_20E9EE078(v16, a2 + 213);
  sub_20E9EE078(v16, a2 + 214);
  sub_20E9EE078(v16, a2 + 215);
  sub_20E9EE078(v16, a2 + 216);
  sub_20E9EE078(v16, a2 + 217);
  sub_20E9EE078(v16, a2 + 218);
  sub_20E9EE078(v16, a2 + 219);
  sub_20E9EE078(v16, a2 + 220);
  sub_20E9EE078(v16, a2 + 221);
  sub_20E9EE078(v16, a2 + 222);
  sub_20E9EE078(v16, a2 + 223);
  sub_20E9EE078(v16, a2 + 224);
  sub_20E9EE078(v16, a2 + 225);
  sub_20E9EE078(v16, a2 + 226);
  sub_20E9EE078(v16, a2 + 227);
  sub_20E9EE078(v16, a2 + 228);
  sub_20E9EE078(v16, a2 + 229);
  sub_20E9EE078(v16, a2 + 230);
  sub_20E9EE078(v16, a2 + 231);
}

void sub_20E94B960(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  sub_20E94BA6C((uint64_t)a1, (char **)a2);
  if (a3 >= 2)
  {
    sub_20E94A488(a1, a2 + 24);
    if (a3 != 2)
    {
      sub_20E9EDADC(a1[6], (_DWORD *)(a2 + 48));
      sub_20E9EDADC(a1[6], (_DWORD *)(a2 + 52));
      sub_20E9EDADC(a1[6], (_DWORD *)(a2 + 56));
      if (a3 >= 4)
      {
        v8 = 1;
        sub_20E9EDADC(a1[6], &v8);
        sub_20E90A71C(a1 + 2);
        sub_20E94111C((uint64_t)a1, a2 + 60);
        v6 = a1[4];
        v7 = *(_QWORD *)(v6 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v6 - 8);
        if (v7)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
        a1[4] -= 16;
      }
    }
  }
}

void sub_20E94BA6C(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  int v13;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v12);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 4);
  if (v12 > v5)
  {
    sub_20E94BBA8(a2, v12 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = (uint64_t)v8[1];
    if ((char *)v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v12 >= v5)
  {
    v7 = (uint64_t)a2[1];
    v6 = *a2;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v7 = (uint64_t)&(*a2)[48 * v12];
  if (v4 != (char *)v7)
  {
    v9 = a2[1];
    do
    {
      v11 = (void *)*((_QWORD *)v9 - 6);
      v9 -= 48;
      v10 = v11;
      if (v11)
      {
        *((_QWORD *)v4 - 5) = v10;
        operator delete(v10);
      }
      v4 = v9;
    }
    while (v9 != (char *)v7);
  }
  a2[1] = (char *)v7;
  v6 = *a2;
  if ((char *)v7 != v6)
  {
    do
    {
LABEL_13:
      v13 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v13);
      sub_20E94BD90(a1, (char **)v6);
      sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)v6 + 3);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v6 + 8);
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), (_DWORD *)v6 + 10);
      v6 += 48;
    }
    while (v6 != (char *)v7);
  }
}

void sub_20E94BBA8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_20E92CED8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 5) = 0;
        *((_QWORD *)v13 - 4) = 0;
        v18 = *((_OWORD *)v5 - 3);
        v5 -= 48;
        *((_OWORD *)v13 - 3) = v18;
        v13 -= 48;
        *((_QWORD *)v17 - 4) = *((_QWORD *)v5 + 2);
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        v19 = *(_OWORD *)(v5 + 24);
        *((_QWORD *)v13 + 5) = *((_QWORD *)v5 + 5);
        *(_OWORD *)(v13 + 24) = v19;
      }
      while (v5 != v6);
      v5 = *a1;
      v20 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v20 != v5)
      {
        v21 = v20;
        do
        {
          v23 = (void *)*((_QWORD *)v21 - 6);
          v21 -= 48;
          v22 = v23;
          if (v23)
          {
            *((_QWORD *)v20 - 5) = v22;
            operator delete(v22);
          }
          v20 = v21;
        }
        while (v21 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20E94BD90(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *i;
  uint64_t v12;
  void (*v13)(uint64_t);
  _QWORD *v14;
  _QWORD *v15;
  std::bad_cast *exception;
  std::bad_cast *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;

  v18 = (a2[1] - *a2) >> 6;
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v18);
  v5 = *a2;
  v4 = a2[1];
  v6 = (v4 - *a2) >> 6;
  if (v18 <= v6)
  {
    if (v18 < v6)
    {
      v4 = &v5[64 * v18];
      a2[1] = v4;
    }
  }
  else
  {
    sub_20E93D564(a2, v18 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = v4;
    do
    {
      v19 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v19);
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 48);
      do
      {
        sub_20E9EFAC4(v9, (uint64_t)&v19);
        if (v19 != 2 || v20 >= 0x100)
        {
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v17 = std::bad_cast::bad_cast(exception);
          v17->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v17, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        v5[v8] = v20;
        v10 = v21;
        v21 = 0;
        if (v10)
        {
          for (i = (char *)v10[4]; i != (char *)v10[6]; i -= 16)
          {
            v13 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v12 = *((_QWORD *)i - 1);
            v13(v12);
          }
          free(i);
          v14 = (_QWORD *)v10[3];
          if (v14)
          {
            do
            {
              v15 = (_QWORD *)*v14;
              free(v14);
              v14 = v15;
            }
            while (v15);
          }
          free(v10);
        }
        ++v8;
      }
      while (v8 != 64);
      v5 += 64;
    }
    while (v5 != v7);
  }
}

void sub_20E94BF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  char *i;
  uint64_t v16;
  void (*v17)(uint64_t);
  _QWORD *v18;
  _QWORD *v19;

  if (a14)
  {
    for (i = (char *)a14[4]; i != (char *)a14[6]; i -= 16)
    {
      v17 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v16 = *((_QWORD *)i - 1);
      v17(v16);
    }
    free(i);
    v18 = (_QWORD *)a14[3];
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        free(v18);
        v18 = v19;
      }
      while (v19);
    }
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E94BF80(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_20E94F94C(a1 + 8, a2 + 8);
  v4 = *(void **)(a1 + 248);
  if (v4)
  {
    *(_QWORD *)(a1 + 256) = v4;
    operator delete(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  v5 = *(void **)(a1 + 272);
  if (v5)
  {
    *(_QWORD *)(a1 + 280) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v6 = *(_OWORD *)(a2 + 296);
  v7 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v7;
  *(_OWORD *)(a1 + 296) = v6;
  v8 = *(_QWORD *)(a1 + 344);
  if (v8)
  {
    v9 = (void **)(a1 + 344);
    v10 = *(_QWORD *)(a1 + 352);
    v11 = *(void **)(a1 + 344);
    if (v10 != v8)
    {
      v12 = *(_QWORD *)(a1 + 352);
      do
      {
        v14 = *(void **)(v12 - 48);
        v12 -= 48;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 40) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v8);
      v11 = *v9;
    }
    *(_QWORD *)(a1 + 352) = v8;
    operator delete(v11);
    *v9 = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
  }
  v15 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v15;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  v16 = a1 + 376;
  sub_20E86872C(a1 + 368, *(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  v17 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 376) = v17;
  v18 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 384) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(a2 + 368) = a2 + 376;
    *(_QWORD *)(a2 + 376) = 0;
    *(_QWORD *)(a2 + 384) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 368) = v16;
  }
  v19 = *(_OWORD *)(a2 + 392);
  v20 = *(_OWORD *)(a2 + 408);
  v21 = *(_OWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 408) = v20;
  *(_OWORD *)(a1 + 424) = v21;
  *(_OWORD *)(a1 + 392) = v19;
  return a1;
}

uint64_t sub_20E94C124(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7[17];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  _QWORD *v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  _QWORD **v27;
  _QWORD *v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD *v33[2];
  uint64_t *v34;
  uint64_t v35[2];
  _QWORD v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v26 = 3;
  v27 = v28;
  v28[0] = 0;
  v33[1] = 0;
  v33[0] = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28[1] = 0;
  v32 = v33;
  v35[0] = 0;
  v34 = v35;
  v35[1] = 0;
  v36[0] = -1;
  v6 = 3;
  sub_20E9EDADC(a2[6], &v6);
  sub_20E945814((uint64_t)&v6, (uint64_t)a2, (uint64_t)&v19, v6);
  sub_20E948EA0((uint64_t)&v6, a2, (uint64_t)&v27);
  sub_20E9400E0((uint64_t)a2, (char **)&v30 + 1);
  sub_20E94A488(a2, (uint64_t)&v32);
  sub_20E94A6AC(a2, (uint64_t)&v34);
  sub_20E9EDE6C(a2[6], v36);
  sub_20E94DF68(v7, (uint64_t)v18);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  v13 = 0;
  v14 = -1;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  sub_20E94DE00(a3, (uint64_t)&v6);
  sub_20E94FBC8((uint64_t)&v6);
  sub_20E866B68((uint64_t)&v34, v35[0]);
  sub_20E86872C((uint64_t)&v32, v33[0]);
  if (*((_QWORD *)&v30 + 1))
  {
    *(_QWORD *)&v31 = *((_QWORD *)&v30 + 1);
    operator delete(*((void **)&v30 + 1));
  }
  if ((_QWORD)v29)
  {
    *((_QWORD *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
  sub_20E86872C((uint64_t)&v27, v28[0]);
  return sub_20E8FB5B8((uint64_t)&v19);
}

void sub_20E94C320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  sub_20E94DEFC((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_20E94C334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  sub_20E94DEFC((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_20E94C348(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  LODWORD(v16) = 1;
  sub_20E9EDADC(a1[6], &v16);
  LODWORD(v16) = 3;
  sub_20E9EDADC(a1[6], &v16);
  sub_20E945814((uint64_t)&v16, (uint64_t)a1, a2 + 16, v16);
  sub_20E948EA0((uint64_t)&v16, a1, a2 + 120);
  sub_20E9400E0((uint64_t)a1, (char **)(a2 + 168));
  sub_20E94A488(a1, a2 + 192);
  sub_20E94A6AC(a1, a2 + 216);
  sub_20E9EDE6C(a1[6], (_QWORD *)(a2 + 240));
  if (a3 >= 3)
  {
    v16 = (uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4;
    sub_20E9EDE6C(a1[6], &v16);
    v7 = *(char **)(a2 + 248);
    v6 = *(char **)(a2 + 256);
    v8 = (v6 - v7) >> 4;
    if (v16 <= v8)
    {
      if (v16 < v8)
      {
        v6 = &v7[16 * v16];
        *(_QWORD *)(a2 + 256) = v6;
      }
    }
    else
    {
      sub_20E94A950((char **)(a2 + 248), v16 - v8);
      v7 = *(char **)(a2 + 248);
      v6 = *(char **)(a2 + 256);
    }
    if (v6 != v7)
    {
      v9 = v6;
      do
      {
        sub_20E9EDE6C(a1[6], v7);
        sub_20E9EDD84(a1[6], (_QWORD *)v7 + 1);
        v7 += 16;
      }
      while (v7 != v9);
    }
    if (a3 >= 4)
    {
      v16 = 0x641511E8D2B3183BLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
      sub_20E9EDE6C(a1[6], &v16);
      v11 = *(_QWORD *)(a2 + 272);
      v10 = *(_QWORD *)(a2 + 280);
      v12 = 0x641511E8D2B3183BLL * ((uint64_t)(v10 - v11) >> 3);
      if (v16 <= v12)
      {
        if (v16 < v12)
        {
          v10 = v11 + 1944 * v16;
          *(_QWORD *)(a2 + 280) = v10;
        }
      }
      else
      {
        sub_20E94AA78((char **)(a2 + 272), v16 - v12);
        v11 = *(_QWORD *)(a2 + 272);
        v10 = *(_QWORD *)(a2 + 280);
      }
      if (v10 != v11)
      {
        v13 = 1944 * ((uint64_t)(v10 - v11) / 1944);
        do
        {
          sub_20E94AC4C(a1, v11);
          v11 += 1944;
          v13 -= 1944;
        }
        while (v13);
      }
      if (a3 >= 5)
      {
        LODWORD(v16) = 1;
        sub_20E9EDADC(a1[6], &v16);
        sub_20E90A71C(a1 + 2);
        sub_20E94111C((uint64_t)a1, a2 + 296);
        v14 = a1[4];
        v15 = *(_QWORD *)(v14 - 16)
            - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
            + *(_QWORD *)(v14 - 8);
        if (v15)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v15);
        a1[4] -= 16;
        if (a3 >= 6)
        {
          sub_20E9EDD84(a1[6], (_QWORD *)(a2 + 336));
          if (a3 != 6)
            sub_20E94C600(a1, (int64x2_t *)(a2 + 344));
        }
      }
    }
  }
}

void sub_20E94C600(_QWORD *a1, int64x2_t *a2)
{
  unint64_t v4;
  std::string *v5;
  std::string *v6;
  void **p_data;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2->i64[1] - a2->i64[0]) >> 4);
  sub_20E9EDE6C(a1[6], &v10);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2->i64[1] - a2->i64[0]) >> 4);
  if (v10 <= v4)
  {
    if (v10 < v4)
      sub_20E94CBA8((uint64_t)a2, (void **)(a2->i64[0] + 48 * v10));
  }
  else
  {
    sub_20E94C738(a2, v10 - v4);
  }
  v5 = (std::string *)a2->i64[0];
  v6 = (std::string *)a2->i64[1];
  if (v6 != (std::string *)a2->i64[0])
  {
    do
    {
      v11 = 1;
      sub_20E9EDADC(a1[6], &v11);
      sub_20E90A71C(a1 + 2);
      sub_20E9EE280(a1[6], v5);
      p_data = (void **)&v5[1].__r_.__value_.__l.__data_;
      sub_20E94CD1C(a1, p_data);
      v8 = a1[4];
      v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v8 - 8);
      if (v9)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v9);
      a1[4] -= 16;
      v5 = (std::string *)(p_data + 3);
    }
    while (v5 != v6);
  }
}

void sub_20E94C738(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  __int128 v16;
  int64x2_t v17;
  void *__p;
  int64x2_t v19;
  char *v20;
  int64x2_t *v21;

  v4 = a1[1].i64[0];
  v5 = a1->u64[1];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero((void *)a1->i64[1], v11);
      v5 += v11;
    }
    a1->i64[1] = v5;
  }
  else
  {
    v6 = a1->i64[0];
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - a1->i64[0]) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_20E92CED8();
    if (0x5555555555555556 * ((v4 - v6) >> 4) > v8)
      v8 = 0x5555555555555556 * ((v4 - v6) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v8;
    v21 = a1 + 1;
    if (v9)
    {
      if (v9 > 0x555555555555555)
        sub_20E877A38();
      v10 = (char *)operator new(48 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[48 * v7];
    v13 = &v10[48 * v9];
    v20 = v13;
    v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v12, v14);
    v15 = &v12[v14];
    v19.i64[1] = (uint64_t)&v12[v14];
    if (v5 == v6)
    {
      v17 = vdupq_n_s64(v5);
    }
    else
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 48);
        *((_QWORD *)v12 - 4) = *(_QWORD *)(v5 - 32);
        *((_OWORD *)v12 - 3) = v16;
        *(_QWORD *)(v5 - 40) = 0;
        *(_QWORD *)(v5 - 32) = 0;
        *(_QWORD *)(v5 - 48) = 0;
        *((_QWORD *)v12 - 2) = 0;
        *((_QWORD *)v12 - 1) = 0;
        *(_OWORD *)(v12 - 24) = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *(_QWORD *)(v5 - 8);
        v12 -= 48;
        *(_QWORD *)(v5 - 24) = 0;
        *(_QWORD *)(v5 - 16) = 0;
        *(_QWORD *)(v5 - 8) = 0;
        v5 -= 48;
      }
      while (v5 != v6);
      v17 = *a1;
      v4 = a1[1].i64[0];
      v15 = (char *)v19.i64[1];
      v13 = v20;
    }
    a1->i64[0] = (uint64_t)v12;
    a1->i64[1] = (uint64_t)v15;
    v19 = v17;
    a1[1].i64[0] = (uint64_t)v13;
    v20 = (char *)v4;
    __p = (void *)v17.i64[0];
    sub_20E94CA30((uint64_t)&__p, v17.i64[0]);
    if (__p)
      operator delete(__p);
  }
}

uint64_t sub_20E94C928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(void **)(a1 + 128);
    if (v3 == v2)
    {
LABEL_11:
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (*(char *)(v3 - 1) < 0)
    {
      operator delete(*(void **)(v3 - 24));
      v5 = *(void **)(v3 - 48);
      if (v5)
        goto LABEL_9;
LABEL_4:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 128);
        goto LABEL_11;
      }
    }
    v5 = *(void **)(v3 - 48);
    if (!v5)
      goto LABEL_4;
LABEL_9:
    *(_QWORD *)(v3 - 40) = v5;
    operator delete(v5);
    goto LABEL_4;
  }
LABEL_12:
  sub_20E86872C(a1 + 48, *(_QWORD **)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      v9 = *(_QWORD *)(a1 + 32);
      do
      {
        v11 = *(void **)(v9 - 48);
        v9 -= 48;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 40) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v8);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E94CA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void *v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  void *v17;
  void **v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == a2)
    return;
  do
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v5 = *(void ***)(v2 - 24);
    if (!v5)
      goto LABEL_31;
    v6 = *(void ***)(v2 - 16);
    v7 = *(void **)(v2 - 24);
    if (v6 != v5)
    {
      while (1)
      {
        v8 = (void **)*(v6 - 3);
        if (v8)
          break;
LABEL_19:
        sub_20E86872C((uint64_t)(v6 - 13), *(v6 - 12));
        v12 = (char *)*(v6 - 16);
        if (v12)
        {
          v13 = (char *)*(v6 - 15);
          v14 = *(v6 - 16);
          if (v13 != v12)
          {
            v15 = (char *)*(v6 - 15);
            do
            {
              v17 = (void *)*((_QWORD *)v15 - 6);
              v15 -= 48;
              v16 = v17;
              if (v17)
              {
                *((_QWORD *)v13 - 5) = v16;
                operator delete(v16);
              }
              v13 = v15;
            }
            while (v15 != v12);
            v14 = *(v6 - 16);
          }
          *(v6 - 15) = v12;
          operator delete(v14);
        }
        v18 = v6 - 19;
        if (*((char *)v6 - 129) < 0)
          operator delete(*v18);
        v6 -= 19;
        if (v18 == v5)
        {
          v7 = *(void **)(v2 - 24);
          goto LABEL_30;
        }
      }
      v9 = (void **)*(v6 - 2);
      v10 = *(v6 - 3);
      if (v9 == v8)
      {
LABEL_18:
        *(v6 - 2) = v8;
        operator delete(v10);
        goto LABEL_19;
      }
      while (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        v11 = *(v9 - 6);
        if (v11)
          goto LABEL_16;
LABEL_11:
        v9 -= 9;
        if (v9 == v8)
        {
          v10 = *(v6 - 3);
          goto LABEL_18;
        }
      }
      v11 = *(v9 - 6);
      if (!v11)
        goto LABEL_11;
LABEL_16:
      *(v9 - 5) = v11;
      operator delete(v11);
      goto LABEL_11;
    }
LABEL_30:
    *(_QWORD *)(v2 - 16) = v5;
    operator delete(v7);
LABEL_31:
    if (*(char *)(v2 - 25) < 0)
      operator delete(*(void **)(v2 - 48));
    v2 = *(_QWORD *)(a1 + 16);
  }
  while (v2 != a2);
}

void sub_20E94CBA8(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void *v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;

  v4 = *(void ***)(a1 + 8);
  if (v4 == a2)
    goto LABEL_2;
  do
  {
    v5 = (void **)*(v4 - 3);
    if (!v5)
      goto LABEL_31;
    v6 = (void **)*(v4 - 2);
    v7 = *(v4 - 3);
    if (v6 != v5)
    {
      while (1)
      {
        v8 = (void **)*(v6 - 3);
        if (v8)
          break;
LABEL_19:
        sub_20E86872C((uint64_t)(v6 - 13), *(v6 - 12));
        v12 = (char *)*(v6 - 16);
        if (v12)
        {
          v13 = (char *)*(v6 - 15);
          v14 = *(v6 - 16);
          if (v13 != v12)
          {
            v15 = (char *)*(v6 - 15);
            do
            {
              v17 = (void *)*((_QWORD *)v15 - 6);
              v15 -= 48;
              v16 = v17;
              if (v17)
              {
                *((_QWORD *)v13 - 5) = v16;
                operator delete(v16);
              }
              v13 = v15;
            }
            while (v15 != v12);
            v14 = *(v6 - 16);
          }
          *(v6 - 15) = v12;
          operator delete(v14);
        }
        v18 = v6 - 19;
        if (*((char *)v6 - 129) < 0)
          operator delete(*v18);
        v6 -= 19;
        if (v18 == v5)
        {
          v7 = *(v4 - 3);
          goto LABEL_30;
        }
      }
      v9 = (void **)*(v6 - 2);
      v10 = *(v6 - 3);
      if (v9 == v8)
      {
LABEL_18:
        *(v6 - 2) = v8;
        operator delete(v10);
        goto LABEL_19;
      }
      while (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        v11 = *(v9 - 6);
        if (v11)
          goto LABEL_16;
LABEL_11:
        v9 -= 9;
        if (v9 == v8)
        {
          v10 = *(v6 - 3);
          goto LABEL_18;
        }
      }
      v11 = *(v9 - 6);
      if (!v11)
        goto LABEL_11;
LABEL_16:
      *(v9 - 5) = v11;
      operator delete(v11);
      goto LABEL_11;
    }
LABEL_30:
    *(v4 - 2) = v5;
    operator delete(v7);
LABEL_31:
    v19 = v4 - 6;
    if (*((char *)v4 - 25) < 0)
      operator delete(*v19);
    v4 -= 6;
  }
  while (v19 != a2);
LABEL_2:
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20E94CD1C(_QWORD *a1, void **a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  void **v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  v14 = 0x86BCA1AF286BCA1BLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
  sub_20E9EDE6C(a1[6], &v14);
  v4 = (uint64_t)a2[1];
  v5 = 0x86BCA1AF286BCA1BLL * ((v4 - (uint64_t)*a2) >> 3);
  if (v14 > v5)
  {
    sub_20E94CEB0(a2, v14 - v5);
    v8 = a2;
    v6 = (char *)*a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_10;
  }
  if (v14 >= v5)
  {
    v6 = (char *)*a2;
    v9 = v4 - (_QWORD)v6;
    if ((char *)v4 == v6)
      return;
    goto LABEL_10;
  }
  for (i = (uint64_t)*a2 + 152 * v14; v4 != i; v4 = sub_20E94C928(v4 - 152))
    ;
  a2[1] = (void *)i;
  v6 = (char *)*a2;
  v9 = i - (_QWORD)v6;
  if ((char *)i != v6)
  {
LABEL_10:
    v11 = 152 * (v9 / 152);
    do
    {
      v15 = 1;
      sub_20E9EDADC(a1[6], &v15);
      sub_20E90A71C(a1 + 2);
      sub_20E94D168(a1, (uint64_t)v6);
      v12 = a1[4];
      v13 = *(_QWORD *)(v12 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v12 - 8);
      if (v13)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v13);
      a1[4] -= 16;
      v6 += 152;
      v11 -= 152;
    }
    while (v11);
  }
}

void sub_20E94CEB0(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0x86BCA1AF286BCA1BLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[152 * a2];
      do
      {
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 7) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_QWORD *)v4 + 6) = v4 + 56;
        *(_OWORD *)(v4 + 72) = 0uLL;
        *(_OWORD *)(v4 + 88) = 0uLL;
        *(_QWORD *)(v4 + 101) = 0;
        *((_QWORD *)v4 + 17) = 0;
        *((_QWORD *)v4 + 18) = 0;
        *((_QWORD *)v4 + 16) = 0;
        v4 += 152;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x86BCA1AF286BCA1BLL * ((v4 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1AF286BCA1AF286)
      sub_20E92CED8();
    v8 = 0x86BCA1AF286BCA1BLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xD79435E50D7943)
      v9 = 0x1AF286BCA1AF286;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v10 = (char *)operator new(152 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[152 * v6];
    v13 = &v12[152 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 6) = v14 + 56;
      *(_OWORD *)(v14 + 72) = 0uLL;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *(_QWORD *)(v14 + 101) = 0;
      *((_QWORD *)v14 + 17) = 0;
      *((_QWORD *)v14 + 18) = 0;
      *((_QWORD *)v14 + 16) = 0;
      v14 += 152;
    }
    while (v14 != v13);
    v15 = &v10[152 * v9];
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
      if (v17)
LABEL_28:
        operator delete(v17);
    }
    else
    {
      v18 = 0;
      do
      {
        v24 = &v12[v18];
        v25 = &v17[v18];
        v26 = *(_OWORD *)&v17[v18 - 152];
        *((_QWORD *)v24 - 17) = *(_QWORD *)&v17[v18 - 136];
        *(_OWORD *)(v24 - 152) = v26;
        *((_QWORD *)v25 - 18) = 0;
        *((_QWORD *)v25 - 17) = 0;
        *((_QWORD *)v25 - 19) = 0;
        *((_QWORD *)v24 - 16) = 0;
        *((_QWORD *)v24 - 15) = 0;
        *((_QWORD *)v24 - 14) = 0;
        *((_OWORD *)v24 - 8) = *(_OWORD *)&v17[v18 - 128];
        *((_QWORD *)v24 - 14) = *(_QWORD *)&v17[v18 - 112];
        *((_QWORD *)v25 - 16) = 0;
        *((_QWORD *)v25 - 15) = 0;
        *((_QWORD *)v25 - 14) = 0;
        *((_QWORD *)v24 - 13) = *(_QWORD *)&v17[v18 - 104];
        v27 = &v17[v18 - 96];
        v28 = *(_QWORD *)v27;
        *(_QWORD *)&v12[v18 - 96] = *(_QWORD *)v27;
        v29 = (uint64_t)&v12[v18 - 96];
        v30 = *(_QWORD *)&v17[v18 - 88];
        *((_QWORD *)v24 - 11) = v30;
        if (v30)
        {
          *(_QWORD *)(v28 + 16) = v29;
          *((_QWORD *)v25 - 13) = v27;
          *(_QWORD *)v27 = 0;
          *(_QWORD *)&v17[v18 - 88] = 0;
        }
        else
        {
          *((_QWORD *)v24 - 13) = v29;
        }
        v19 = &v12[v18];
        v20 = &v17[v18];
        v21 = *(_OWORD *)&v17[v18 - 80];
        v22 = *(_OWORD *)&v17[v18 - 64];
        v23 = *(_OWORD *)&v17[v18 - 48];
        *((_DWORD *)v19 - 8) = *(_DWORD *)&v17[v18 - 32];
        *((_OWORD *)v19 - 4) = v22;
        *((_OWORD *)v19 - 3) = v23;
        *((_OWORD *)v19 - 5) = v21;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *((_QWORD *)v19 - 3) = 0;
        *(_OWORD *)(v19 - 24) = *(_OWORD *)&v17[v18 - 24];
        *((_QWORD *)v19 - 1) = *(_QWORD *)&v17[v18 - 8];
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *((_QWORD *)v20 - 1) = 0;
        v18 -= 152;
      }
      while (&v17[v18] != v16);
      v17 = (char *)*a1;
      v31 = (uint64_t)a1[1];
      *a1 = &v12[v18];
      a1[1] = v13;
      for (a1[2] = v15; (char *)v31 != v17; v31 = sub_20E94C928(v31 - 152))
        ;
      if (v17)
        goto LABEL_28;
    }
  }
}

void sub_20E94D168(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  sub_20E9EE280(a1[6], (std::string *)a2);
  v8 = 4;
  sub_20E9EDADC(a1[6], &v8);
  v4 = v8;
  sub_20E90A71C(a1 + 2);
  if (v4 >= 4)
    v5 = 4;
  else
    v5 = v4;
  sub_20E94B960(a1, a2 + 24, v5);
  v6 = a1[4];
  v7 = *(_QWORD *)(v6 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v6 - 8);
  if (v7)
    (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
  a1[4] -= 16;
  sub_20E94D230(a1, (char **)(a2 + 128));
}

void sub_20E94D230(_QWORD *a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;

  v13 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(a1[6], &v13);
  v4 = a2[1];
  v5 = 0x8E38E38E38E38E39 * ((v4 - *a2) >> 3);
  if (v13 > v5)
  {
    sub_20E94D38C(a2, v13 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
LABEL_16:
    v12 = 72 * (v9 / 72);
    do
    {
      v15 = 1;
      sub_20E9EDADC(a1[6], &v15);
      sub_20E94D5E4((uint64_t)&v14, a1, (uint64_t)v6);
      v6 += 72;
      v12 -= 72;
    }
    while (v12);
    return;
  }
  if (v13 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_16;
  }
  v10 = (uint64_t)&(*a2)[72 * v13];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0)
    {
      operator delete(*((void **)v4 - 3));
      v11 = (void *)*((_QWORD *)v4 - 6);
      if (!v11)
        goto LABEL_6;
LABEL_12:
      *((_QWORD *)v4 - 5) = v11;
      operator delete(v11);
      goto LABEL_6;
    }
    v11 = (void *)*((_QWORD *)v4 - 6);
    if (v11)
      goto LABEL_12;
LABEL_6:
    v4 -= 72;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
    goto LABEL_16;
}

void sub_20E94D38C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  void *v23;

  v5 = a1[1];
  v4 = a1[2];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL)
      sub_20E92CED8();
    v9 = 0x8E38E38E38E38E39 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL)
        sub_20E877A38();
      v11 = (char *)operator new(72 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[72 * v7];
    v14 = &v11[72 * v10];
    v15 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        v20 = *(_OWORD *)&v5[v17 - 72];
        *((_QWORD *)v18 - 7) = *(_QWORD *)&v5[v17 - 56];
        *(_OWORD *)(v18 - 72) = v20;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v5[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v5[v17 - 32];
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        v21 = *(_OWORD *)&v5[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v5[v17 - 8];
        *(_OWORD *)(v18 - 24) = v21;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *((_QWORD *)v19 - 3) = 0;
        v17 -= 72;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v22 = a1[1];
      *a1 = &v13[v17];
      a1[1] = v16;
      a1[2] = v14;
      while (1)
      {
        if (v22 == v5)
          goto LABEL_27;
        if (*(v22 - 1) < 0)
          break;
        v23 = (void *)*((_QWORD *)v22 - 6);
        if (v23)
          goto LABEL_25;
LABEL_19:
        v22 -= 72;
      }
      operator delete(*((void **)v22 - 3));
      v23 = (void *)*((_QWORD *)v22 - 6);
      if (!v23)
        goto LABEL_19;
LABEL_25:
      *((_QWORD *)v22 - 5) = v23;
      operator delete(v23);
      goto LABEL_19;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
LABEL_27:
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20E94D5E4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  sub_20E9EDE6C(a2[6], (_QWORD *)a3);
  sub_20E9EDADC(a2[6], (_DWORD *)(a3 + 8));
  sub_20E9EDADC(a2[6], (_DWORD *)(a3 + 16));
  sub_20E94D694((uint64_t)a2, (char **)(a3 + 24));
  sub_20E9EE280(a2[6], (std::string *)(a3 + 48));
  v6 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v8 = *(_QWORD *)(v6 - 16) - result + *(_QWORD *)(v6 - 8);
  if (v8)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v8);
  a2[4] -= 16;
  return result;
}

float sub_20E94D694(uint64_t a1, char **a2)
{
  char **v4;
  float result;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  __int128 v14;
  char v15;
  float v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 1;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v13);
  v6 = *v4;
  v7 = *a2;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
  if (v13 <= v8)
  {
    if (v13 < v8)
    {
      v6 = &v7[24 * v13];
      a2[1] = v6;
    }
  }
  else
  {
    sub_20E94D818(a2, v13 - v8);
    v7 = *a2;
    v6 = a2[1];
  }
  if (v6 != v7)
  {
    v9 = (unsigned __int128)((v6 - v7) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v10 = 24 * ((v9 >> 2) + ((unint64_t)v9 >> 63));
    do
    {
      while (1)
      {
        LODWORD(v14) = 2;
        sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v14);
        v11 = v14;
        if (v14 < 2)
          break;
        sub_20E94D9B4(a1, (uint64_t)v7, v14);
        v7 += 24;
        v10 -= 24;
        if (!v10)
          return result;
      }
      v16 = 0.0;
      v14 = 0uLL;
      v15 = 0;
      sub_20E94DA58(a1, (uint64_t)&v14, v11);
      result = v16;
      v12 = v15;
      *(_OWORD *)v7 = v14;
      *((float *)v7 + 4) = result;
      v7[20] = v12;
      v7 += 24;
      v10 -= 24;
    }
    while (v10);
  }
  return result;
}

void sub_20E94D818(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E92CED8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *(_QWORD *)(v13 - 11) = *(_QWORD *)(v5 - 11);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E94D9B4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 != 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStoreSample.h", 271, (uint64_t)"version == 2u", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)a2);
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 4));
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 8));
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 12));
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 16));
  sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 20));
}

void sub_20E94DA58(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  if (a3 != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStoreSample.h", 104, (uint64_t)"version == 1u", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)a2);
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 4));
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 8));
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 12));
  sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 16));
  sub_20E9EDF48(*(_QWORD *)(a1 + 48), (float *)(a2 + 20));
  v5 = *(_QWORD *)(a1 + 48);
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 24));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 25));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 26));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 27));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 28));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 29));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 30));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 31));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 32));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 33));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 34));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 35));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 36));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 37));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 38));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 39));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 40));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 41));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 42));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 43));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 44));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 45));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 46));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 47));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 48));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 49));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 50));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 51));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 52));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 53));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 54));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 55));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 56));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 57));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 58));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 59));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 60));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 61));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 62));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 63));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 64));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 65));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 66));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 67));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 68));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 69));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 70));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 71));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 72));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 73));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 74));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 75));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 76));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 77));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 78));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 79));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 80));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 81));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 82));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 83));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 84));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 85));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 86));
  sub_20E9ED7B4(v5, (_BYTE *)(a2 + 87));
}

uint64_t sub_20E94DE00(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  sub_20E94F94C(a1 + 8, a2 + 8);
  v4 = *(void **)(a1 + 248);
  if (v4)
  {
    *(_QWORD *)(a1 + 256) = v4;
    operator delete(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  v5 = *(void **)(a1 + 272);
  if (v5)
  {
    *(_QWORD *)(a1 + 280) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v6 = *(_OWORD *)(a2 + 296);
  v7 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v7;
  *(_OWORD *)(a1 + 296) = v6;
  v8 = *(void ***)(a1 + 344);
  if (v8)
  {
    sub_20E94CBA8(a1 + 344, v8);
    operator delete(*(void **)(a1 + 344));
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
  }
  v9 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v9;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  return a1;
}

uint64_t sub_20E94DEFC(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_20E866B68(a1 + 208, *(_QWORD *)(a1 + 216));
  sub_20E86872C(a1 + 184, *(_QWORD **)(a1 + 192));
  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  sub_20E86872C(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_20E8FB5B8(a1 + 8);
  return a1;
}

uint64_t *sub_20E94DF68(uint64_t *a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  sub_20E94E1A8((uint64_t)(a1 + 1), a2 + 8);
  a1[15] = 0;
  a1[14] = (uint64_t)(a1 + 15);
  a1[16] = 0;
  sub_20E94ECD4(a1 + 14, *(_QWORD **)(a2 + 112), (_QWORD *)(a2 + 120));
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  v5 = *(_BYTE **)(a2 + 136);
  v4 = *(_BYTE **)(a2 + 144);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v6 >> 5) >= 0x88888888888889)
      sub_20E92CED8();
    v7 = (char *)operator new(v6);
    a1[17] = (uint64_t)v7;
    a1[18] = (uint64_t)v7;
    v8 = &v7[32 * (v6 >> 5)];
    a1[19] = (uint64_t)v8;
    memcpy(v7, v5, v6 - 4);
    a1[18] = (uint64_t)v8;
  }
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  v10 = *(_BYTE **)(a2 + 160);
  v9 = *(_BYTE **)(a2 + 168);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xCBEEA4E1A08AD8F3 * (v11 >> 3) >= 0x8AD8F2FBA93869)
      sub_20E92CED8();
    v12 = (char *)operator new(v11);
    a1[20] = (uint64_t)v12;
    a1[21] = (uint64_t)v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[22] = (uint64_t)v13;
    memcpy(v12, v10, v11 - 4);
    a1[21] = (uint64_t)v13;
  }
  a1[24] = 0;
  a1[23] = (uint64_t)(a1 + 24);
  a1[25] = 0;
  sub_20E94F000(a1 + 23, *(_QWORD **)(a2 + 184), (_QWORD *)(a2 + 192));
  a1[27] = 0;
  a1[26] = (uint64_t)(a1 + 27);
  a1[28] = 0;
  sub_20E94F3B4(a1 + 26, *(const void ***)(a2 + 208), (const void ***)(a2 + 216));
  a1[29] = *(_QWORD *)(a2 + 232);
  return a1;
}

void sub_20E94E11C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t *v8;
  void *v10;

  sub_20E866B68(v6, *v8);
  sub_20E86872C(v5, *v7);
  v10 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 168) = v10;
    operator delete(v10);
  }
  sub_20E949EF8(v2);
  sub_20E8FB5B8(v1);
  _Unwind_Resume(a1);
}

void sub_20E94E178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  _QWORD **v5;
  void *v7;

  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 144) = v7;
    operator delete(v7);
  }
  sub_20E86872C(v2, *v5);
  sub_20E8FB5B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E94E1A8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_20E94E2A8((uint64_t *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  sub_20E94E4B4((char **)(a1 + 24), (char **)(a2 + 24));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20E94E788(a1 + 48, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  sub_20E94E980((_QWORD *)(a1 + 72), (uint64_t *)(a2 + 72));
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

void sub_20E94E248(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t *v3;

  sub_20E947294(v3);
  sub_20E9472CC(v2);
  sub_20E8FB1C0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20E94E278(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FB1C0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20E94E290(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FB1C0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20E94E2A8(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20E941BD8(v7, v8, v18, &v17, v6 + 8);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        sub_20E94E3B0((uint64_t)v7, (uint64_t)(v6 + 8), (uint64_t)&v16);
        v11 = v18[0];
        v12 = v16;
        *v16 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v11;
        *v10 = v12;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v12 = *v10;
        }
        result = sub_20E868578((uint64_t *)v7[1], v12);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (unsigned int *)*((_QWORD *)v6 + 2);
        v15 = *(_QWORD *)v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v15);
LABEL_3:
      v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

char *sub_20E94E3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *result;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;

  v5 = a1 + 8;
  result = (char *)operator new(0xA8uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)result + 8) = *(_DWORD *)a2;
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(result + 104) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 120) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 104);
  *((_QWORD *)result + 18) = 0;
  result[136] = v7;
  *((_QWORD *)result + 19) = 0;
  *((_QWORD *)result + 20) = 0;
  v9 = *(_BYTE **)(a2 + 112);
  v8 = *(_BYTE **)(a2 + 120);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    v11 = result;
    if (v10 < 0)
      sub_20E867F44();
    v12 = (char *)operator new(v8 - v9);
    v11[18] = v12;
    v11[19] = v12;
    v13 = &v12[8 * (v10 >> 3)];
    v11[20] = v13;
    result = (char *)memcpy(v12, v9, v10);
    v11[19] = v13;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E94E490(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 152) = v5;
    operator delete(v5);
  }
  sub_20E946028(v1);
  _Unwind_Resume(a1);
}

char **sub_20E94E4B4(char **a1, char **a2)
{
  int v3;
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (_DWORD)a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x8F5C28F5C28F5C29 * (v6 >> 5);
    if (v7 >= 0x51EB851EB851ECLL)
      sub_20E92CED8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[800 * v7];
    a1[1] = sub_20E94E5C8(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20E94E568(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 7);
        if (v7)
        {
          *((_QWORD *)v5 - 6) = v7;
          operator delete(v7);
        }
        v5 -= 800;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20E94E5C8(int a1, char *__src, char *a3, char *__dst)
{
  char *v6;
  char *v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;

  if (__src != a3)
  {
    v6 = __src;
    do
    {
      memcpy(__dst, v6, 0x2E8uLL);
      *((_QWORD *)__dst + 93) = 0;
      *((_QWORD *)__dst + 95) = 0;
      *((_QWORD *)__dst + 94) = 0;
      v9 = (_BYTE *)*((_QWORD *)v6 + 93);
      v10 = (_BYTE *)*((_QWORD *)v6 + 94);
      v11 = v10 - v9;
      if (v10 != v9)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) >= 0x492492492492493)
          sub_20E92CED8();
        v12 = (char *)operator new(v11);
        *((_QWORD *)__dst + 93) = v12;
        *((_QWORD *)__dst + 94) = v12;
        v7 = &v12[8 * (v11 >> 3)];
        *((_QWORD *)__dst + 95) = v7;
        memcpy(v12, v9, v11);
        *((_QWORD *)__dst + 94) = v7;
      }
      v8 = *((_OWORD *)v6 + 48);
      *(_OWORD *)(__dst + 780) = *(_OWORD *)(v6 + 780);
      *((_OWORD *)__dst + 48) = v8;
      __dst += 800;
      v6 += 800;
    }
    while (v6 != a3);
  }
  return __dst;
}

void sub_20E94E700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 744);
  if (v11)
  {
    *(_QWORD *)(v9 + 752) = v11;
    operator delete(v11);
  }
  sub_20E94E728((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E94E728(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 56);
      if (v5)
      {
        *(_QWORD *)(v3 - 48) = v5;
        operator delete(v5);
      }
      v3 -= 800;
    }
  }
  return a1;
}

uint64_t sub_20E94E788(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x186186186186187)
      sub_20E92CED8();
    result = (uint64_t)operator new(168 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 168 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20E9417E0(v8 + v9, (__int128 *)(a2 + v9));
        v9 += 168;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20E94E858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E94E8A0(&a9);
  _Unwind_Resume(a1);
}

void sub_20E94E86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_20E94E8F4(v11, v12, v12, v10, v10);
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E94E8A0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20E94E8A0(void ***a1)
{
  uint64_t *v3;
  uint64_t v4;

  if (*((_BYTE *)a1 + 8))
    return a1;
  v3 = (uint64_t *)*a1;
  v4 = (uint64_t)**a1;
  if (!v4)
    return a1;
  sub_20E8FB128((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_20E94E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      v7 = *(void **)(v6 - 24);
      if (v7)
      {
        *(_QWORD *)(v6 - 16) = v7;
        operator delete(v7);
      }
      v8 = *(void **)(v6 - 48);
      if (v8)
      {
        *(_QWORD *)(v6 - 40) = v8;
        operator delete(v8);
      }
      v9 = *(void **)(v6 - 80);
      if (v9)
      {
        *(_QWORD *)(v6 - 72) = v9;
        operator delete(v9);
      }
      v10 = *(void **)(v6 - 112);
      if (v10)
      {
        *(_QWORD *)(v6 - 104) = v10;
        operator delete(v10);
      }
      v11 = *(void **)(v6 - 136);
      if (v11)
      {
        *(_QWORD *)(v6 - 128) = v11;
        operator delete(v11);
      }
      v6 -= 168;
    }
    while (v6 != a5);
  }
}

_QWORD *sub_20E94E980(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x2E8BA2E8BA2E8BA3 * (v6 >> 4);
    if (v7 >= 0x1745D1745D1745ELL)
      sub_20E92CED8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[176 * v7];
    a1[1] = sub_20E94EA94(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20E94EA34(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        if (v7)
        {
          *((_QWORD *)v5 - 3) = v7;
          operator delete(v7);
        }
        v5 -= 176;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E94EA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v6;
      v8 = *(_OWORD *)(v6 + 16);
      v9 = *(_OWORD *)(v6 + 32);
      v10 = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(a4 + 48) = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(a4 + 64) = v10;
      *(_OWORD *)(a4 + 16) = v8;
      *(_OWORD *)(a4 + 32) = v9;
      v11 = *(_OWORD *)(v6 + 80);
      v12 = *(_OWORD *)(v6 + 96);
      v13 = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(a4 + 121) = *(_OWORD *)(v6 + 121);
      *(_OWORD *)(a4 + 96) = v12;
      *(_OWORD *)(a4 + 112) = v13;
      *(_QWORD *)(a4 + 144) = 0;
      *(_OWORD *)(a4 + 80) = v11;
      *(_QWORD *)(a4 + 152) = 0;
      *(_QWORD *)(a4 + 160) = 0;
      v15 = *(char **)(v6 + 144);
      v14 = *(char **)(v6 + 152);
      v16 = v14 - v15;
      if (v14 != v15)
      {
        if (v16 < 0)
          sub_20E92CED8();
        v17 = (char *)operator new(v14 - v15);
        *(_QWORD *)(a4 + 144) = v17;
        *(_QWORD *)(a4 + 152) = v17;
        *(_QWORD *)(a4 + 160) = &v17[8 * (v16 >> 3)];
        v18 = v16 - 8;
        if ((unint64_t)(v16 - 8) < 0x78)
          goto LABEL_8;
        v21 = v17 + 4 >= &v15[(v18 & 0xFFFFFFFFFFFFFFF8) + 8] || v15 + 4 >= &v17[(v18 & 0xFFFFFFFFFFFFFFF8) + 8];
        v22 = !v21;
        if (v15 < &v17[(v18 & 0xFFFFFFFFFFFFFFF8) + 4] && v17 < &v15[(v18 & 0xFFFFFFFFFFFFFFF8) + 4])
          goto LABEL_8;
        if (v22)
          goto LABEL_8;
        v24 = (v18 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFF8);
        v26 = &v15[v25];
        v19 = &v17[v25];
        v27 = v17 + 32;
        v28 = (__int128 *)(v15 + 32);
        v29 = v24 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v31 = *(v28 - 2);
          v30 = *(v28 - 1);
          v33 = *v28;
          v32 = v28[1];
          v28 += 4;
          *(v27 - 2) = v31;
          *(v27 - 1) = v30;
          *v27 = v33;
          v27[1] = v32;
          v27 += 4;
          v29 -= 8;
        }
        while (v29);
        v15 = v26;
        v17 = v19;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFF8))
        {
LABEL_8:
          v19 = v17;
          do
          {
            v20 = *(_QWORD *)v15;
            v15 += 8;
            *(_QWORD *)v19 = v20;
            v19 += 8;
          }
          while (v15 != v14);
        }
        *(_QWORD *)(a4 + 152) = v19;
      }
      v7 = *(_DWORD *)(v6 + 168);
      *(_WORD *)(a4 + 172) = *(_WORD *)(v6 + 172);
      *(_DWORD *)(a4 + 168) = v7;
      v6 += 176;
      a4 += 176;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20E94EC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 152) = v12;
    operator delete(v12);
  }
  sub_20E94EC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E94EC74(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(_QWORD *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 176;
    }
  }
  return a1;
}

uint64_t *sub_20E94ECD4(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19[9];

  if (a2 != a3)
  {
    v19[7] = v3;
    v19[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20E94EDE0((uint64_t **)v7, v8, v19, &v18, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x40uLL);
        v12 = *((_OWORD *)v6 + 3);
        v11[2] = *((_OWORD *)v6 + 2);
        v11[3] = v12;
        v13 = v19[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t)v11;
        v14 = *(_QWORD **)*v7;
        if (v14)
        {
          *v7 = (uint64_t)v14;
          v15 = (uint64_t *)*v10;
        }
        else
        {
          v15 = (uint64_t *)v11;
        }
        result = sub_20E868578((uint64_t *)v7[1], v15);
        ++v7[2];
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v16 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = (_QWORD *)v6[2];
        v17 = *v16 == (_QWORD)v6;
        v6 = v16;
      }
      while (!v17);
LABEL_3:
      v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *sub_20E94EDE0(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unint64_t *a5)
{
  uint64_t **v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  BOOL v29;
  uint64_t *v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;

  v5 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2)
  {
    v6 = *a5;
    v7 = a2[4];
    if (*a5 == v7)
    {
      v8 = *((_DWORD *)a5 + 2);
      v9 = *((_DWORD *)a2 + 10);
      if (v8 >= v9)
      {
        if (v9 >= v8)
        {
LABEL_5:
          *a3 = a2;
          *a4 = a2;
          return (uint64_t *)a4;
        }
LABEL_33:
        v24 = a2[1];
        if (v24)
        {
          v25 = (uint64_t *)a2[1];
          do
          {
            v26 = v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          v27 = a2;
          do
          {
            v26 = (uint64_t *)v27[2];
            v15 = *v26 == (_QWORD)v27;
            v27 = v26;
          }
          while (!v15);
        }
        if (v26 == (uint64_t *)v5)
          goto LABEL_44;
        v28 = v26[4];
        v29 = v6 >= v28;
        if (v6 == v28)
          v29 = *((_DWORD *)a5 + 2) >= *((_DWORD *)v26 + 10);
        if (!v29)
        {
LABEL_44:
          if (v24)
          {
            *a3 = v26;
            return v26;
          }
          else
          {
            *a3 = a2;
            return a2 + 1;
          }
        }
        v30 = *v5;
        if (*v5)
        {
          v31 = *((_DWORD *)a5 + 2);
          while (1)
          {
            while (1)
            {
              v21 = v30;
              v32 = v30[4];
              if (v6 == v32)
                break;
              if (v6 >= v32)
              {
                if (v32 >= v6)
                  goto LABEL_56;
                goto LABEL_55;
              }
LABEL_48:
              v30 = (uint64_t *)*v21;
              v5 = (uint64_t **)v21;
              if (!*v21)
                goto LABEL_56;
            }
            v33 = *((_DWORD *)v21 + 10);
            if (v31 < v33)
              goto LABEL_48;
            if (v33 >= v31)
              goto LABEL_56;
LABEL_55:
            v5 = (uint64_t **)(v21 + 1);
            v30 = (uint64_t *)v21[1];
            if (!v30)
              goto LABEL_56;
          }
        }
LABEL_57:
        *a3 = (uint64_t *)v5;
        return (uint64_t *)(a1 + 1);
      }
    }
    else if (*a5 >= v7)
    {
      if (v7 >= v6)
        goto LABEL_5;
      goto LABEL_33;
    }
  }
  v11 = (uint64_t *)*a2;
  if (*a1 != a2)
  {
    if (v11)
    {
      v12 = (uint64_t *)*a2;
      do
      {
        v13 = v12;
        v12 = (uint64_t *)v12[1];
      }
      while (v12);
    }
    else
    {
      v14 = a2;
      do
      {
        v13 = (uint64_t *)v14[2];
        v15 = *v13 == (_QWORD)v14;
        v14 = v13;
      }
      while (v15);
    }
    v16 = v13[4];
    v17 = *a5;
    v18 = v16 >= *a5;
    if (v16 == *a5)
      v18 = *((_DWORD *)v13 + 10) >= *((_DWORD *)a5 + 2);
    if (!v18)
      goto LABEL_18;
    v19 = *v5;
    if (!*v5)
      goto LABEL_57;
    v20 = *((_DWORD *)a5 + 2);
    while (1)
    {
      while (1)
      {
        v21 = v19;
        v22 = v19[4];
        if (v17 == v22)
          break;
        if (v17 >= v22)
        {
          if (v22 >= v17)
            goto LABEL_56;
          goto LABEL_29;
        }
LABEL_22:
        v19 = (uint64_t *)*v21;
        v5 = (uint64_t **)v21;
        if (!*v21)
          goto LABEL_56;
      }
      v23 = *((_DWORD *)v21 + 10);
      if (v20 < v23)
        goto LABEL_22;
      if (v23 >= v20)
        goto LABEL_56;
LABEL_29:
      v5 = (uint64_t **)(v21 + 1);
      v19 = (uint64_t *)v21[1];
      if (!v19)
      {
LABEL_56:
        *a3 = v21;
        return (uint64_t *)v5;
      }
    }
  }
  v13 = a2;
LABEL_18:
  if (v11)
  {
    *a3 = v13;
    return v13 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *sub_20E94F000(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17[11];

  if (a2 != a3)
  {
    v17[9] = v3;
    v17[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20E94F11C((uint64_t **)v7, v8, v17, &v16, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x238uLL);
        memcpy(v11 + 4, v6 + 4, 0x218uLL);
        v12 = v17[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v12;
        *v10 = v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v11 = *v10;
        }
        result = sub_20E868578((uint64_t *)v7[1], v11);
        ++v7[2];
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (_QWORD *)v6[2];
        v15 = *v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v15);
LABEL_3:
      v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

uint64_t *sub_20E94F11C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unint64_t *a5)
{
  uint64_t **v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;

  v5 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2)
  {
    v6 = *a5;
    v7 = a2[4];
    if (*a5 == v7)
    {
      v8 = *((_DWORD *)a5 + 2);
      v9 = *((_DWORD *)a2 + 10);
      v10 = v8 >= v9;
      if (v8 == v9)
      {
        v8 = *((_DWORD *)a5 + 4);
        v9 = *((_DWORD *)a2 + 12);
        v10 = v8 >= v9;
      }
      if (!v10)
        goto LABEL_10;
      if (v9 >= v8)
      {
LABEL_8:
        *a3 = a2;
        *a4 = a2;
        return (uint64_t *)a4;
      }
LABEL_41:
      v29 = a2[1];
      if (v29)
      {
        v30 = (uint64_t *)a2[1];
        do
        {
          v31 = (uint64_t **)v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        v32 = a2;
        do
        {
          v31 = (uint64_t **)v32[2];
          v16 = *v31 == v32;
          v32 = (uint64_t *)v31;
        }
        while (!v16);
      }
      if (v31 != v5)
      {
        v33 = (unint64_t)v31[4];
        v34 = v6 >= v33;
        if (v6 == v33 && (v35 = *((_DWORD *)a5 + 2), v36 = *((_DWORD *)v31 + 10), v34 = v35 >= v36, v35 == v36))
        {
          if (*((_DWORD *)a5 + 4) >= *((_DWORD *)v31 + 12))
          {
LABEL_52:
            v37 = *v5;
            if (!*v5)
            {
LABEL_67:
              *a3 = (uint64_t *)v5;
              return (uint64_t *)(a1 + 1);
            }
            v38 = *((_DWORD *)a5 + 2);
            v39 = *((_DWORD *)a5 + 4);
            while (1)
            {
              while (1)
              {
                v25 = v37;
                v40 = v37[4];
                if (v6 == v40)
                  break;
                if (v6 >= v40)
                {
                  if (v40 >= v6)
                    goto LABEL_66;
                  goto LABEL_65;
                }
LABEL_54:
                v37 = (uint64_t *)*v25;
                v5 = (uint64_t **)v25;
                if (!*v25)
                  goto LABEL_66;
              }
              v41 = *((_DWORD *)v25 + 10);
              if (v38 != v41)
              {
                if (v38 >= v41)
                {
                  if (v41 >= v38)
                    goto LABEL_66;
                  goto LABEL_65;
                }
                goto LABEL_54;
              }
              v42 = *((_DWORD *)v25 + 12);
              if (v39 < v42)
                goto LABEL_54;
              if (v42 >= v39)
                goto LABEL_66;
LABEL_65:
              v5 = (uint64_t **)(v25 + 1);
              v37 = (uint64_t *)v25[1];
              if (!v37)
              {
LABEL_66:
                *a3 = v25;
                return (uint64_t *)v5;
              }
            }
          }
        }
        else if (v34)
        {
          goto LABEL_52;
        }
      }
      if (v29)
      {
        *a3 = (uint64_t *)v31;
        return (uint64_t *)v31;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    if (*a5 >= v7)
    {
      if (v7 >= v6)
        goto LABEL_8;
      goto LABEL_41;
    }
  }
LABEL_10:
  v12 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    v14 = a2;
  }
  else
  {
    if (v12)
    {
      v13 = (uint64_t *)*a2;
      do
      {
        v14 = v13;
        v13 = (uint64_t *)v13[1];
      }
      while (v13);
    }
    else
    {
      v15 = a2;
      do
      {
        v14 = (uint64_t *)v15[2];
        v16 = *v14 == (_QWORD)v15;
        v15 = v14;
      }
      while (v16);
    }
    v17 = v14[4];
    v18 = *a5;
    v19 = v17 >= *a5;
    if (v17 == *a5 && (v20 = *((_DWORD *)v14 + 10), v21 = *((_DWORD *)a5 + 2), v19 = v20 >= v21, v20 == v21))
    {
      if (*((_DWORD *)v14 + 12) >= *((_DWORD *)a5 + 4))
        goto LABEL_21;
    }
    else if (v19)
    {
LABEL_21:
      v22 = *v5;
      if (*v5)
      {
        v23 = *((_DWORD *)a5 + 2);
        v24 = *((_DWORD *)a5 + 4);
        while (1)
        {
          while (1)
          {
            v25 = v22;
            v26 = v22[4];
            if (v18 == v26)
              break;
            if (v18 >= v26)
            {
              if (v26 >= v18)
                goto LABEL_66;
              goto LABEL_34;
            }
LABEL_23:
            v22 = (uint64_t *)*v25;
            v5 = (uint64_t **)v25;
            if (!*v25)
              goto LABEL_66;
          }
          v27 = *((_DWORD *)v25 + 10);
          if (v23 != v27)
          {
            if (v23 >= v27)
            {
              if (v27 >= v23)
                goto LABEL_66;
              goto LABEL_34;
            }
            goto LABEL_23;
          }
          v28 = *((_DWORD *)v25 + 12);
          if (v24 < v28)
            goto LABEL_23;
          if (v28 >= v24)
            goto LABEL_66;
LABEL_34:
          v5 = (uint64_t **)(v25 + 1);
          v22 = (uint64_t *)v25[1];
          if (!v22)
            goto LABEL_66;
        }
      }
      goto LABEL_67;
    }
  }
  if (v12)
  {
    *a3 = v14;
    return v14 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *sub_20E94F3B4(uint64_t *result, const void **a2, const void ***a3)
{
  uint64_t *v3;
  uint64_t *v4;
  const void **v6;
  uint64_t *v7;
  uint64_t *v8;
  const void **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  const void ***v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != (const void **)a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20E94F4BC((uint64_t **)v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (const void **)v6[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        sub_20E94F864((uint64_t)v7, (uint64_t)(v6 + 4), (uint64_t)&v16);
        v11 = v18[0];
        v12 = v16;
        *v16 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v11;
        *v10 = v12;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v12 = *v10;
        }
        result = sub_20E868578((uint64_t *)v7[1], v12);
        ++v7[2];
        v9 = (const void **)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = (const void ***)v9;
            v9 = (const void **)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (const void ***)v6[2];
        v15 = *v14 == v6;
        v6 = (const void **)v14;
      }
      while (!v15);
LABEL_3:
      v6 = (const void **)v14;
    }
    while (v14 != a3);
  }
  return result;
}

uint64_t *sub_20E94F4BC(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void *sub_20E94F864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  void *result;

  v5 = a1 + 8;
  v6 = operator new(0x188uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v6 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  v8 = v7 + 56;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_20E860C04(v8, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v7 + 9) = *(_QWORD *)(a2 + 40);
  }
  result = memcpy(v7 + 80, (const void *)(a2 + 48), 0x131uLL);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E94F914(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
  {
    operator delete(*v3);
    sub_20E8D52F8(v1);
    _Unwind_Resume(a1);
  }
  sub_20E8D52F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E94F94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  sub_20E9470EC(a1 + 8, a2 + 8);
  v4 = a1 + 120;
  sub_20E86872C(a1 + 112, *(_QWORD **)(a1 + 120));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v5 = (_QWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v6;
  v7 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(a2 + 112) = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 128) = 0;
    v9 = (_QWORD *)(a1 + 136);
    v8 = *(void **)(a1 + 136);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_QWORD *)(a1 + 112) = v4;
  v9 = (_QWORD *)(a1 + 136);
  v8 = *(void **)(a1 + 136);
  if (v8)
  {
LABEL_3:
    *(_QWORD *)(a1 + 144) = v8;
    operator delete(v8);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
LABEL_4:
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v11 = a1 + 192;
  sub_20E86872C(a1 + 184, *(_QWORD **)(a1 + 192));
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v12 = (_QWORD *)(a2 + 192);
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v13;
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v14;
  if (v14)
  {
    *(_QWORD *)(v13 + 16) = v11;
    *(_QWORD *)(a2 + 184) = v12;
    *v12 = 0;
    *(_QWORD *)(a2 + 200) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 184) = v11;
  }
  v15 = a1 + 216;
  sub_20E866B68(a1 + 208, *(_QWORD *)(a1 + 216));
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v16 = (_QWORD *)(a2 + 216);
  v17 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v17;
  v18 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v15;
    *(_QWORD *)(a2 + 208) = v16;
    *v16 = 0;
    *(_QWORD *)(a2 + 224) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = v15;
  }
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return a1;
}

uint64_t sub_20E94FADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  sub_20E86872C(a1 + 368, *(_QWORD **)(a1 + 376));
  v2 = *(_QWORD *)(a1 + 344);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 352);
    v4 = *(void **)(a1 + 344);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 352);
      do
      {
        v7 = *(void **)(v5 - 48);
        v5 -= 48;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 344);
    }
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v4);
  }
  v8 = *(void **)(a1 + 272);
  if (v8)
  {
    *(_QWORD *)(a1 + 280) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 248);
  if (v9)
  {
    *(_QWORD *)(a1 + 256) = v9;
    operator delete(v9);
  }
  sub_20E866B68(a1 + 216, *(_QWORD *)(a1 + 224));
  sub_20E86872C(a1 + 192, *(_QWORD **)(a1 + 200));
  v10 = *(void **)(a1 + 168);
  if (v10)
  {
    *(_QWORD *)(a1 + 176) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 144);
  if (v11)
  {
    *(_QWORD *)(a1 + 152) = v11;
    operator delete(v11);
  }
  sub_20E86872C(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_20E8FB5B8(a1 + 16);
  return a1;
}

uint64_t sub_20E94FBC8(uint64_t a1)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void ***)(a1 + 344);
  if (v2)
  {
    sub_20E94CBA8(a1 + 344, v2);
    operator delete(*(void **)(a1 + 344));
  }
  v3 = *(void **)(a1 + 272);
  if (v3)
  {
    *(_QWORD *)(a1 + 280) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 248);
  if (v4)
  {
    *(_QWORD *)(a1 + 256) = v4;
    operator delete(v4);
  }
  sub_20E866B68(a1 + 216, *(_QWORD *)(a1 + 224));
  sub_20E86872C(a1 + 192, *(_QWORD **)(a1 + 200));
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
    *(_QWORD *)(a1 + 176) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 144);
  if (v6)
  {
    *(_QWORD *)(a1 + 152) = v6;
    operator delete(v6);
  }
  sub_20E86872C(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_20E8FB5B8(a1 + 16);
  return a1;
}

uint64_t sub_20E94FC70(void *a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _DWORD *v12;
  void *__p[2];
  void *v14[2];
  int v15;

  __p[0] = 0;
  __p[1] = 0;
  v14[0] = 0;
  sub_20E950300(a1, a2 - (_QWORD)a1, a4, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(__p[0]);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 120) + 280))(*(_QWORD *)(a3 + 120));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 1065353216;
  v6 = *(uint64_t **)(v5 + 56);
  if (v6)
  {
    do
    {
      v7 = *((_DWORD *)v6 + 4);
      v12 = (_DWORD *)v6 + 5;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)v6 + 5, (uint64_t)&unk_2102DB95C, &v12) + 5) = v7;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
    v8 = v14[0];
    if (v14[0])
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = __p[0];
    __p[0] = 0;
    if (v10)
      operator delete(v10);
  }
  else
  {
    __p[0] = 0;
  }
  kdebug_trace();
  return 1;
}

#error "20E94FFD8: call analysis failed (funcsize=242)"

void sub_20E9501BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E9502EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E950300(void *__src, size_t __n, std::string *a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  std::ios_base::failure *exception;
  std::error_code v24;
  std::string __msg;
  std::string __p;
  _QWORD v27[2];
  void (**v28)();
  void *v29;
  char *v30;
  uint64_t v31;
  _QWORD v32[12];
  char v33;
  uint64_t v34;
  __int128 __dst;
  unint64_t v36;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v36 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v36) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v32, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v27, (uint64_t *)&__p, (uint64_t)v32, a5);
  v27[0] = &off_24C9B0298;
  v28 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v31, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_43;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_43;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_43:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v24.__val_ = 1;
      v24.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v24);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 2;
  sub_20E9EDADC(v31, &__p);
  if (LODWORD(__p.__r_.__value_.__l.__data_) <= 1)
  {
    sub_20E9506F0((uint64_t)&__p, (uint64_t)v27, (uint64_t)a3);
  }
  else
  {
    sub_20E90A71C(&v28);
    sub_20E9EE280(v31, a3);
    v20 = v30;
    v21 = *((_QWORD *)v20 - 2) - ((uint64_t (*)(uint64_t))v28[4])((uint64_t)&v28) + *((_QWORD *)v20 - 1);
    if (v21)
      ((void (*)(uint64_t, unint64_t))v28[5])((uint64_t)&v28, v21);
    v30 -= 16;
  }
  v27[0] = &off_24C9B71C0;
  v28 = (void (**)())&unk_24C9B7308;
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    sub_20E9EF740((_QWORD *)(v22 + 8));
    MEMORY[0x212BC6398](v22, 0x10F2C40853B94B7);
  }
  v28 = off_24C9B7428;
  if (v29)
  {
    v30 = (char *)v29;
    operator delete(v29);
  }
  v32[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v32[2] = MEMORY[0x24BEDB848] + 16;
  if (v33 < 0)
    operator delete((void *)v32[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v34);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)__dst);
}

void sub_20E950668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

void sub_20E9506F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string v4;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_20E9EE280(*(_QWORD *)(a2 + 48), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v4 = __p;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    *(std::string *)a3 = v4;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)a3);
  *(std::string *)a3 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_20E9507A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9507C8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E950B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E950B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E950B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E950BB4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20E951128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E95114C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E951160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9511B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _DWORD *v12;
  void *__p[2];
  void *v14[2];
  int v15;

  __p[0] = 0;
  __p[1] = 0;
  v14[0] = 0;
  sub_20E951848(a1, a2 - (_QWORD)a1, a4, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(__p[0]);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 120) + 280))(*(_QWORD *)(a3 + 120));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 1065353216;
  v6 = *(uint64_t **)(v5 + 56);
  if (v6)
  {
    do
    {
      v7 = *((_DWORD *)v6 + 4);
      v12 = (_DWORD *)v6 + 5;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)v6 + 5, (uint64_t)&unk_2102DB95C, &v12) + 5) = v7;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
    v8 = v14[0];
    if (v14[0])
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = __p[0];
    __p[0] = 0;
    if (v10)
      operator delete(v10);
  }
  else
  {
    __p[0] = 0;
  }
  kdebug_trace();
  return 1;
}

#error "20E951520: call analysis failed (funcsize=242)"

void sub_20E951704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E951834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E951848(void *__src, size_t __n, uint64_t a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  uint64_t v20;
  std::ios_base::failure *exception;
  std::error_code v22;
  std::string __msg;
  std::string __p;
  _QWORD v25[2];
  void (**v26)();
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[12];
  char v31;
  uint64_t v32;
  __int128 __dst;
  unint64_t v34;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v34 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v34) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v30, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v25, (uint64_t *)&__p, (uint64_t)v30, a5);
  v25[0] = &off_24C9B0298;
  v26 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v29, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_38;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v22.__val_ = 1;
      v22.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v22);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  sub_20E951BB4(v25, a3);
  v25[0] = &off_24C9B71C0;
  v26 = (void (**)())&unk_24C9B7308;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    sub_20E9EF740((_QWORD *)(v20 + 8));
    MEMORY[0x212BC6398](v20, 0x10F2C40853B94B7);
  }
  v26 = off_24C9B7428;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v30[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v30[2] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v32);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
}

void sub_20E951B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

_QWORD *sub_20E951BB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 3;
  sub_20E9EDADC(a1[6], &v7);
  if (v7 <= 2)
  {
    sub_20E951C8C((uint64_t)&v8, (uint64_t)a1, a2, v7);
    return a1;
  }
  else
  {
    sub_20E90A71C(a1 + 2);
    sub_20E951DFC((uint64_t)a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_20E951C8C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void *v7;
  __int128 v8;
  _BYTE v9[744];
  __int128 v10;
  uint64_t v11;
  _OWORD v12[2];
  __int128 v13;
  _BYTE v14[25];
  _BYTE v15[8];
  __int128 v16[46];
  void *__p;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  bzero(v16, 0x300uLL);
  BYTE8(v21) = 0;
  v19 = 0u;
  LOBYTE(v20) = 0;
  sub_20E951EF0(a2, (uint64_t)v15, a4);
  sub_20FCF1280((uint64_t)v9, v16);
  v13 = v20;
  *(_OWORD *)v14 = v21;
  *(_QWORD *)&v14[16] = v22;
  v14[24] = v23 != 0.0;
  memcpy((void *)(a3 + 8), v9, 0x2E8uLL);
  v7 = *(void **)(a3 + 752);
  if (v7)
  {
    *(_QWORD *)(a3 + 760) = v7;
    operator delete(v7);
    *(_QWORD *)(a3 + 752) = 0;
    *(_QWORD *)(a3 + 760) = 0;
    *(_QWORD *)(a3 + 768) = 0;
  }
  *(_OWORD *)(a3 + 752) = v10;
  *(_QWORD *)(a3 + 768) = v11;
  *(_OWORD *)(a3 + 776) = v12[0];
  *(_OWORD *)(a3 + 788) = *(_OWORD *)((char *)v12 + 12);
  v8 = *(_OWORD *)v14;
  *(_OWORD *)(a3 + 808) = v13;
  *(_OWORD *)(a3 + 824) = v8;
  *(_OWORD *)(a3 + 833) = *(_OWORD *)&v14[9];
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20E951DDC(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_20E951DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  char v9;

  v4 = a2 + 8;
  v7 = 3;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v7);
  if (v7 < 2)
    sub_20E93EB10((uint64_t)&v8, a1, v4);
  else
    sub_20E93EC10(a1, v4, v7);
  v9 = 0;
  sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v9);
  if (v9)
  {
    v5 = (double *)(a2 + 808);
    if (!*(_BYTE *)(a2 + 832))
    {
      *v5 = 0.0;
      *(_QWORD *)(a2 + 816) = 0;
      *(_QWORD *)(a2 + 824) = 0;
      *(_BYTE *)(a2 + 832) = 1;
    }
    v6 = *(_QWORD *)(a1 + 48);
    sub_20E9EE078(v6, v5);
    sub_20E9EE078(v6, (double *)(a2 + 816));
    sub_20E9EE078(v6, (double *)(a2 + 824));
  }
  else if (*(_BYTE *)(a2 + 832))
  {
    *(_BYTE *)(a2 + 832) = 0;
  }
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 840));
  sub_20E9EE1A4(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 848));
}

void sub_20E951EF0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  double *v7;
  uint64_t v8;
  int v9;
  char v10;

  v6 = a2 + 8;
  v9 = 1;
  sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v9);
  sub_20E93F918(a1, v6);
  if (a3 >= 2)
  {
    v10 = 0;
    sub_20E9ED7B4(*(_QWORD *)(a1 + 48), &v10);
    if (v10)
    {
      v7 = (double *)(a2 + 800);
      if (!*(_BYTE *)(a2 + 824))
      {
        *v7 = 0.0;
        *(_QWORD *)(a2 + 808) = 0;
        *(_QWORD *)(a2 + 816) = 0;
        *(_BYTE *)(a2 + 824) = 1;
      }
      v8 = *(_QWORD *)(a1 + 48);
      sub_20E9EE078(v8, v7);
      sub_20E9EE078(v8, (double *)(a2 + 808));
      sub_20E9EE078(v8, (double *)(a2 + 816));
    }
    else if (*(_BYTE *)(a2 + 824))
    {
      *(_BYTE *)(a2 + 824) = 0;
    }
  }
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 832));
  sub_20E9EE078(*(_QWORD *)(a1 + 48), (double *)(a2 + 840));
}

void sub_20E951FD0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E952360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E952384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E952398(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E9523BC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20E952930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E952954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E952968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9529C0(void *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _DWORD *v12;
  void *__p[2];
  void *v14[2];
  int v15;

  __p[0] = 0;
  __p[1] = 0;
  v14[0] = 0;
  sub_20E953050(a1, a2 - (_QWORD)a1, a4, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(__p[0]);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 120) + 280))(*(_QWORD *)(a3 + 120));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 1065353216;
  v6 = *(uint64_t **)(v5 + 56);
  if (v6)
  {
    do
    {
      v7 = *((_DWORD *)v6 + 4);
      v12 = (_DWORD *)v6 + 5;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)__p, (unsigned int *)v6 + 5, (uint64_t)&unk_2102DB95C, &v12) + 5) = v7;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
    v8 = v14[0];
    if (v14[0])
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = __p[0];
    __p[0] = 0;
    if (v10)
      operator delete(v10);
  }
  else
  {
    __p[0] = 0;
  }
  kdebug_trace();
  return 1;
}

#error "20E952D28: call analysis failed (funcsize=242)"

void sub_20E952F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E95303C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E953050(void *__src, size_t __n, char **a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  uint64_t v20;
  std::ios_base::failure *exception;
  std::error_code v22;
  std::string __msg;
  std::string __p;
  _QWORD v25[2];
  void (**v26)();
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[12];
  char v31;
  uint64_t v32;
  __int128 __dst;
  unint64_t v34;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v34 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v34) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v30, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v25, (uint64_t *)&__p, (uint64_t)v30, a5);
  v25[0] = &off_24C9B0298;
  v26 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v29, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_38;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v22.__val_ = 1;
      v22.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v22);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  sub_20E9EDADC(v29, &__p);
  sub_20E9533D8((uint64_t)&__p, v25, a3);
  v25[0] = &off_24C9B71C0;
  v26 = (void (**)())&unk_24C9B7308;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    sub_20E9EF740((_QWORD *)(v20 + 8));
    MEMORY[0x212BC6398](v20, 0x10F2C40853B94B7);
  }
  v26 = off_24C9B7428;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v30[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v30[2] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v32);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
}

void sub_20E953350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_20E9533D8(uint64_t a1, _QWORD *a2, char **a3)
{
  _QWORD *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v5 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  v13 = (a3[1] - *a3) >> 4;
  sub_20E9EDE6C(a2[6], &v13);
  v7 = *a3;
  v6 = a3[1];
  v8 = (v6 - *a3) >> 4;
  if (v13 <= v8)
  {
    if (v13 < v8)
    {
      v6 = &v7[16 * v13];
      a3[1] = v6;
    }
  }
  else
  {
    sub_20E9534D4(a3, v13 - v8);
    v7 = *a3;
    v6 = a3[1];
  }
  if (v6 != v7)
  {
    v9 = 16 * ((v6 - v7) >> 4);
    do
    {
      sub_20E9535FC((uint64_t)&v14, a2, (uint64_t)v7);
      v7 += 16;
      v9 -= 16;
    }
    while (v9);
  }
  v10 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v12 = *(_QWORD *)(v10 - 16) - result + *(_QWORD *)(v10 - 8);
  if (v12)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v12);
  a2[4] -= 16;
  return result;
}

void sub_20E9534D4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20E92CED8();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20E877A38();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20E9535FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  v8 = 1;
  sub_20E9EDADC(a2[6], &v8);
  sub_20E90A71C(a2 + 2);
  sub_20E9EDE6C(a2[6], (_QWORD *)a3);
  sub_20E9EDADC(a2[6], (_DWORD *)(a3 + 8));
  sub_20E9EDADC(a2[6], (_DWORD *)(a3 + 12));
  v5 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v7 = *(_QWORD *)(v5 - 16) - result + *(_QWORD *)(v5 - 8);
  if (v7)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v7);
  a2[4] -= 16;
  return result;
}

void sub_20E9536B0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E953A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E953A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E953A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E953A9C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20E954010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E954034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E954048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E9540A0(void *__src, size_t __n, uint64_t a3, unsigned __int8 *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  void *v18;
  std::string *p_p;
  unsigned int data;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  std::ios_base::failure *exception;
  std::error_code v26;
  std::string __msg;
  std::string __p;
  _QWORD v29[2];
  void (**v30)();
  void *v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[12];
  char v35;
  uint64_t v36;
  __int128 __dst;
  unint64_t v38;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v38 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v38) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v34, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v29, (uint64_t *)&__p, (uint64_t)v34, a5);
  v29[0] = &off_24C9B0298;
  v30 = (void (**)())&unk_24C9B03E0;
  v13 = a4[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a4 + 1);
  if (v13)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v33, &__p);
    v14 = a4[23];
    if ((v14 & 0x80u) == 0)
      v15 = a4[23];
    else
      v15 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v15 != size)
      goto LABEL_43;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_43;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v14)
          goto LABEL_27;
      }
LABEL_43:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v26.__val_ = 1;
      v26.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v26);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v17 < 0)
      operator delete(v18);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 4;
  sub_20E9EDADC(v33, &__p);
  data = __p.__r_.__value_.__l.__data_;
  sub_20E90A71C(&v30);
  if (data >= 4)
    v21 = 4;
  else
    v21 = data;
  sub_20E94B960(v29, a3, v21);
  v22 = v32;
  v23 = *((_QWORD *)v22 - 2) - ((uint64_t (*)(uint64_t))v30[4])((uint64_t)&v30) + *((_QWORD *)v22 - 1);
  if (v23)
    ((void (*)(uint64_t, unint64_t))v30[5])((uint64_t)&v30, v23);
  v24 = v33;
  v29[0] = &off_24C9B71C0;
  v30 = (void (**)())&unk_24C9B7308;
  v32 -= 16;
  v33 = 0;
  if (v24)
  {
    sub_20E9EF740((_QWORD *)(v24 + 8));
    MEMORY[0x212BC6398](v24, 0x10F2C40853B94B7);
  }
  v30 = off_24C9B7428;
  if (v31)
  {
    v32 = (char *)v31;
    operator delete(v31);
  }
  v34[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v34[2] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v36);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)__dst);
}

void sub_20E9543F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

char **sub_20E954480(uint64_t a1, char **a2)
{
  return sub_20E9549C4(a2);
}

void sub_20E954488(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 360) && *(char *)(a2 + 359) < 0)
    operator delete(*(void **)(a2 + 336));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

uint64_t sub_20E9544D8(uint64_t a1, uint64_t a2)
{
  return sub_20E9545B0(a2);
}

void sub_20E9544E0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20E9544F4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 744);
  if (v2)
  {
    *(_QWORD *)(a2 + 752) = v2;
    operator delete(v2);
  }
}

void sub_20E954508(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_20E95451C(uint64_t a1, char **a2)
{
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  sub_20E86872C((uint64_t)(a2 + 3), a2[4]);
  v3 = *a2;
  if (*a2)
  {
    v4 = a2[1];
    v5 = *a2;
    if (v4 == v3)
    {
      a2[1] = v3;
      operator delete(v5);
    }
    else
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v3);
      v7 = *a2;
      a2[1] = v3;
      operator delete(v7);
    }
  }
}

uint64_t sub_20E9545B0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  void *v12;
  void *v13;

  v2 = *(uint64_t **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v2)
  {
    v3 = sub_20E8E95B0(v2);
    MEMORY[0x212BC6398](v3, 0x20C40313AD07FLL);
  }
  v4 = *(_QWORD **)(a1 + 376);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v6)
    operator delete(v6);
  sub_20E86872C(a1 + 296, *(_QWORD **)(a1 + 304));
  sub_20E86872C(a1 + 232, *(_QWORD **)(a1 + 240));
  v7 = *(void **)(a1 + 208);
  if (v7)
  {
    *(_QWORD *)(a1 + 216) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD **)(a1 + 184);
  if (v8)
  {
    do
    {
      v11 = (_QWORD *)*v8;
      v12 = (void *)v8[9];
      if (v12)
      {
        v8[10] = v12;
        operator delete(v12);
      }
      v13 = (void *)v8[6];
      if (v13)
      {
        v8[7] = v13;
        operator delete(v13);
      }
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  v9 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
    operator delete(v9);
  return sub_20E95469C(a1);
}

uint64_t sub_20E95469C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void **v14;

  sub_20E9547D8((void **)(a1 + 88));
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(void **)(a1 + 40);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v6 - 16);
          v8 = *(void **)(v6 - 24);
          if (v10 != v9)
          {
            do
            {
              if (*(char *)(v10 - 9) < 0)
                operator delete(*(void **)(v10 - 32));
              v10 -= 32;
            }
            while (v10 != v9);
            v8 = *(void **)(v6 - 24);
          }
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v8);
        }
        v6 -= 40;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v5;
    operator delete(v7);
  }
  v11 = *(void ***)(a1 + 16);
  if (v11)
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 39) < 0)
        operator delete(v11[2]);
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
    operator delete(v12);
  return a1;
}

void **sub_20E9547D8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;

  v2 = (void **)a1[6];
  if (v2)
  {
    v3 = (void **)a1[7];
    v4 = a1[6];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v5 = (void **)a1[3];
  if (v5)
  {
    v6 = (void **)a1[4];
    v7 = a1[3];
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = a1[3];
    }
    a1[4] = v5;
    operator delete(v7);
  }
  v8 = (void **)*a1;
  if (*a1)
  {
    v9 = (void **)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

char **sub_20E9548D8(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;

  sub_20E86872C((uint64_t)(a1 + 3), a1[4]);
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20E954954(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char **sub_20E9549C4(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  sub_20E86872C((uint64_t)(a1 + 116), a1[117]);
  v2 = a1[113];
  if (v2)
  {
    a1[114] = v2;
    operator delete(v2);
  }
  v3 = a1[99];
  if (v3)
  {
    a1[100] = v3;
    operator delete(v3);
  }
  v4 = a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  v5 = *a1;
  if (*a1)
  {
    v6 = a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        if (v8)
        {
          *((_QWORD *)v6 - 2) = v8;
          operator delete(v8);
        }
        v9 = (std::__shared_weak_count *)*((_QWORD *)v6 - 68);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v6 -= 552;
      }
      while (v6 != v5);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_20E954AAC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  sub_20E86872C(a2 + 888, *(_QWORD **)(a2 + 896));
  v3 = *(void **)(a2 + 856);
  if (v3)
  {
    *(_QWORD *)(a2 + 864) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 800);
  if (v4)
  {
    *(_QWORD *)(a2 + 808) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(a2 + 40) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD **)(a2 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a2 + 16);
    v8 = *(void **)(a2 + 8);
    if (v7 != v6)
    {
      do
      {
        v7 -= 89;
        sub_20E9385B0(v7);
      }
      while (v7 != v6);
      v8 = *(void **)(a2 + 8);
    }
    *(_QWORD *)(a2 + 16) = v6;
    operator delete(v8);
  }
}

void sub_20E954B50(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_20E954B68(uint64_t a1, uint64_t a2)
{
  return sub_20E94FADC(a2);
}

void sub_20E954B70(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20E954B84(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 752);
  if (v2)
  {
    *(_QWORD *)(a2 + 760) = v2;
    operator delete(v2);
  }
}

void sub_20E954B98(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_20E954BAC(uint64_t a1, char **a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;

  sub_20E86872C((uint64_t)(a2 + 3), a2[4]);
  v3 = *a2;
  if (*a2)
  {
    v4 = a2[1];
    v5 = *a2;
    if (v4 != v3)
    {
      v6 = a2[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 6);
        v6 -= 48;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 5) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *a2;
    }
    a2[1] = v3;
    operator delete(v5);
  }
}

_QWORD *sub_20E954C34(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B14A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E954C70(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B14A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E954CBC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B14A8;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E954D4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E954D70(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B14A8;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E954DF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E954E0C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E954E24(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_20E954E54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  void *__p;
  char v71;
  char v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  char v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  void *__src[2];
  __int128 v102;
  __int128 v103;
  _OWORD v104[56];
  unsigned int v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  memset(v104, 0, 281);
  v103 = 0u;
  v102 = 0u;
  *(_OWORD *)__src = 0u;
  v105 = 1;
  kdebug_trace();
  if (!sub_20E941F48(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24), v2, (uint64_t)__src))
    goto LABEL_23;
  if (v105 != 1)
    sub_20E877AB8();
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 120) + 280))(*(_QWORD *)(v2 + 120));
  v4 = *((_QWORD *)&v102 + 1);
  v5 = *(_QWORD **)(v3 + 16);
  v6 = *(_QWORD **)(v3 + 24);
  if (v5 != v6)
  {
    while (*v5 > *((_QWORD *)&v102 + 1) || v5[1] < *((_QWORD *)&v102 + 1))
    {
      v5 += 2;
      if (v5 == v6)
        goto LABEL_9;
    }
    v12 = *(_QWORD *)(v2 + 464);
    if (v12)
    {
      LODWORD(v47) = 18;
      *(_QWORD *)&v73 = 0;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v47, &v73);
    }
LABEL_23:
    v30 = v105;
    if (v105 == -1)
      return;
    goto LABEL_24;
  }
LABEL_9:
  if (BYTE8(v104[17]))
  {
    v8 = LODWORD(v104[17]);
    v9 = *((_QWORD *)&v104[16] + 1) & 0xFFFFFFFFFFFFFF00;
    v10 = BYTE8(v104[16]);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v8 = 0;
    v10 = 0;
    v9 = 0;
  }
  v13 = *(_QWORD *)(v2 + 120);
  v14 = *(_OWORD *)((char *)&v104[7] + 8);
  v15 = *(_OWORD *)((char *)&v104[6] + 8);
  v16 = *(_OWORD *)((char *)&v104[5] + 8);
  v17 = *(_OWORD *)((char *)&v104[4] + 8);
  v18 = *(_OWORD *)((char *)&v104[3] + 8);
  v19 = *(_OWORD *)((char *)&v104[2] + 8);
  v20 = *(_OWORD *)((char *)&v104[1] + 8);
  v21 = *(_OWORD *)((char *)v104 + 8);
  v23 = *(_OWORD *)((char *)&v104[14] + 8);
  v22 = *(_OWORD *)((char *)&v104[15] + 8);
  v24 = *(_OWORD *)((char *)&v104[13] + 8);
  v25 = *(_OWORD *)((char *)&v104[12] + 8);
  v26 = *(_OWORD *)((char *)&v104[11] + 8);
  v27 = *(_OWORD *)((char *)&v104[10] + 8);
  v28 = *(_OWORD *)((char *)&v104[9] + 8);
  v29 = *(_OWORD *)((char *)&v104[8] + 8);
  *(_QWORD *)&v47 = v103;
  *((_QWORD *)&v47 + 1) = DWORD2(v103);
  LODWORD(v48) = v104[0];
  if (SBYTE7(v102) < 0)
  {
    v31 = *(_OWORD *)((char *)v104 + 8);
    v32 = *(_OWORD *)((char *)&v104[1] + 8);
    v33 = *(_OWORD *)((char *)&v104[8] + 8);
    v34 = *(_OWORD *)((char *)&v104[2] + 8);
    v35 = *(_OWORD *)((char *)&v104[13] + 8);
    v36 = *(_OWORD *)((char *)&v104[9] + 8);
    v37 = *(_OWORD *)((char *)&v104[3] + 8);
    v38 = *(_OWORD *)((char *)&v104[14] + 8);
    v39 = *(_OWORD *)((char *)&v104[10] + 8);
    v40 = *(_OWORD *)((char *)&v104[4] + 8);
    v41 = *(_OWORD *)((char *)&v104[15] + 8);
    v42 = *(_OWORD *)((char *)&v104[11] + 8);
    v43 = *(_OWORD *)((char *)&v104[5] + 8);
    v44 = *(_OWORD *)((char *)&v104[12] + 8);
    v45 = *(_OWORD *)((char *)&v104[6] + 8);
    v46 = *(_OWORD *)((char *)&v104[7] + 8);
    sub_20E860C04(&v49, __src[0], (unint64_t)__src[1]);
    v4 = *((_QWORD *)&v102 + 1);
    v15 = v45;
    v14 = v46;
    v16 = v43;
    v25 = v44;
    v22 = v41;
    v26 = v42;
    v27 = v39;
    v17 = v40;
    v18 = v37;
    v23 = v38;
    v24 = v35;
    v28 = v36;
    v29 = v33;
    v19 = v34;
    v21 = v31;
    v20 = v32;
  }
  else
  {
    v49 = *(_OWORD *)__src;
    v50 = v102;
  }
  v51 = v4;
  v52 = v21;
  v53 = v20;
  v54 = v19;
  v55 = v18;
  v56 = v17;
  v57 = v16;
  v58 = v15;
  v59 = v14;
  v65 = v24;
  v66 = v23;
  v67 = v22;
  v60 = v29;
  v61 = v28;
  v62 = v27;
  v63 = v26;
  v64 = v25;
  *(_QWORD *)&v68 = v9 | v10;
  *((_QWORD *)&v68 + 1) = v8;
  LOBYTE(v69) = v11;
  LOBYTE(__p) = 0;
  v72 = 0;
  v73 = v47;
  v75 = v49;
  v74 = v48;
  v76 = v50;
  v50 = 0;
  v49 = 0uLL;
  v82 = v17;
  v83 = v16;
  v84 = v15;
  v85 = v14;
  v78 = v21;
  v79 = v20;
  v80 = v19;
  v81 = v18;
  v92 = v23;
  v93 = v22;
  v91 = v24;
  v89 = v26;
  v88 = v27;
  v87 = v28;
  v86 = v29;
  v90 = v25;
  v94 = v68;
  v77 = v4;
  v95 = v69;
  v96 = 0;
  v97 = 0;
  v98 = 1;
  v99 = v13;
  v100 = &v99;
  sub_20EE612C4((uint64_t)&v100, (uint64_t)&v73);
  if (v98 != -1)
    ((void (*)(uint64_t **, __int128 *))off_24C9B1408[v98])(&v100, &v73);
  v98 = -1;
  if (v72)
  {
    if (v71 < 0)
      operator delete(__p);
  }
  if ((SHIBYTE(v50) & 0x80000000) == 0)
    goto LABEL_23;
  operator delete((void *)v49);
  v30 = v105;
  if (v105 != -1)
LABEL_24:
    ((void (*)(__int128 *, void **))off_24C9B1448[v30])(&v73, __src);
}

void sub_20E9552DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9552FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "EPKhjNS5_5DummyINS0_2v320ObjectAnchorCMSampleILj2EEEEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplEPKhjNS5_5DummyINS0_2v320ObjectAnchorCMSampleILj2EEEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplEPKhjNS5_5DummyINS0_2v320ObjectAnchorCMSampleILj2EEEEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplEPKhjNS5_5DummyINS0_2v320ObjectAnchorCMSampleILj2EEEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E955368()
{
  return &unk_24C9B1508;
}

_QWORD *sub_20E955374(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1528;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E9553B0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1528;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9553FC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B1528;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E95548C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9554B0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B1528;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E955530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E95554C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E955564(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_20E955594(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v41 = 0u;
  v71 = 2;
  kdebug_trace();
  result = sub_20E94392C(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24), v2, &v41);
  if ((_DWORD)result)
  {
    if (v71 != 2)
      sub_20E877AB8();
    v4 = *(_QWORD *)(v2 + 120);
    *(_QWORD *)&v5 = v41;
    *((_QWORD *)&v5 + 1) = DWORD2(v41);
    v6 = v42;
    v7 = *((_QWORD *)&v42 + 1);
    v8 = v43;
    v9 = DWORD2(v43);
    v17 = v51;
    v16 = v50;
    v15 = v49;
    v14 = v48;
    v13 = v47;
    v12 = v46;
    v11 = v45;
    v10 = v44;
    v35 = v69;
    v34 = v68;
    v33 = v67;
    v32 = v66;
    v31 = v65;
    v30 = v64;
    v29 = v63;
    v28 = v62;
    v27 = v61;
    v26 = v60;
    v25 = v59;
    v24 = v58;
    v23 = v57;
    v22 = v56;
    v21 = v55;
    v20 = v54;
    v19 = v53;
    v18 = v52;
    v36 = v70;
    v37 = 0;
    v38 = 2;
    v39 = v4;
    v40 = &v39;
    result = sub_20EE6147C((uint64_t)&v40, &v5);
  }
  if (v71 != -1)
    return ((uint64_t (*)(__int128 *, __int128 *))off_24C9B1448[v71])(&v5, &v41);
  return result;
}

void sub_20E9557D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9557F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "INS0_2v226RelocalizationResultSampleILj4EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplINS0_2v226RelocalizationResultSampleILj4EEENSt3__19enable_ifILb1EvEEEEvPKhjNS"
                                "5_5DummyIT_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_2v226RelocalizationResultSampleILj4EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_2v226RelocalizationResultSampleILj4EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E95585C()
{
  return &unk_24C9B1588;
}

_QWORD *sub_20E955868(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B15A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E9558A4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B15A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9558F0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B15A8;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E955980(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9559A4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B15A8;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E955A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E955A40(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E955A58(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_20E955A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5[54];
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[9];
  _QWORD v18[3];
  _QWORD v19[9];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD v27[4];
  uint64_t v28;
  int v29;
  _BYTE v30[16];
  _QWORD *v31;
  _QWORD v32[11];
  char v33;
  _QWORD *v34;
  _QWORD v35[9];
  _QWORD v36[3];
  _QWORD v37[9];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  *(_QWORD *)&v22 = 0;
  v20 = 0u;
  v21 = 0u;
  *((_QWORD *)&v22 + 1) = -1;
  memset(&v27[2], 0, 32);
  v28 = 0;
  *(_QWORD *)((char *)&v27[2] + 13) = 0;
  memset(v27, 0, 32);
  v39 = 0u;
  v40 = v22;
  v38 = 0u;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v9 = (char *)&v9 + 8;
  v15 = 3;
  memset(v17, 0, 64);
  v16 = v17;
  v18[0] = 0;
  v17[8] = v18;
  v19[1] = 0;
  v19[0] = 0;
  v18[1] = 0;
  v18[2] = v19;
  memset(v32, 0, sizeof(v32));
  v31 = v32;
  *((_QWORD *)&v10 + 1) = 0;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v33 = 3;
  memset(v35, 0, 64);
  v34 = v35;
  v36[1] = 0;
  v36[0] = 0;
  v35[8] = v36;
  v37[0] = 0;
  v36[2] = v37;
  v37[1] = 0;
  v37[2] = -1;
  memset(&v37[3], 0, 48);
  v19[2] = -1;
  memset(&v19[3], 0, 48);
  v42 = 0;
  v41 = 0;
  v24 = 0;
  v23 = 0;
  v26 = v27;
  v25 = 0;
  v45[1] = 0;
  v45[0] = 0;
  v43 = 0;
  v44 = v45;
  v47 = v27[2];
  v48 = v27[3];
  v46 = 0u;
  v49 = 0;
  v50 = 3;
  sub_20E94FADC((uint64_t)&v8);
  kdebug_trace();
  *(_QWORD *)&v8 = a1 + 16;
  *((_QWORD *)&v8 + 1) = v2;
  if (v50 == -1)
    goto LABEL_10;
  v5[0] = (uint64_t)&v8;
  result = ((uint64_t (*)(uint64_t *, _BYTE *))*(&off_24C9B13C8 + v50))(v5, v30);
  if (!(_DWORD)result)
    goto LABEL_7;
  if (v50 != 3)
LABEL_10:
    sub_20E877AB8();
  v4 = *(_QWORD *)(v2 + 120);
  sub_20E955E54();
  sub_20E9573E4((uint64_t)&v8, v5);
  v29 = 3;
  v6 = v4;
  v7 = &v6;
  sub_20EE61594((uint64_t)&v7, (uint64_t *)&v8);
  if (v29 != -1)
    ((void (*)(uint64_t **, __int128 *))off_24C9B1408[v29])(&v7, &v8);
  v29 = -1;
  result = sub_20E9545B0((uint64_t)v5);
LABEL_7:
  if (v50 != -1)
    return ((uint64_t (*)(__int128 *, _BYTE *))off_24C9B1448[v50])(&v8, v30);
  return result;
}

void sub_20E955DBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E955DDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "INS0_13mapping_types2v313MapDataSampleILj8EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplINS0_13mapping_types2v313MapDataSampleILj8EEENSt3__19enable_ifILb1EvEEEEvPKhj"
                                "NS5_5DummyIT_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v313MapDataSampleILj8EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v313MapDataSampleILj8EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E955E48()
{
  return &unk_24C9B1608;
}

void sub_20E955E54()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *i;
  unint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  uint64_t j;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  _BYTE v172[48];
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  _BYTE v218[648];
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  _BYTE v223[648];
  _BYTE v224[648];
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;

  v0 = MEMORY[0x24BDAC7A8]();
  v77 = v1;
  sub_20F4479FC((_QWORD *)(v0 + 8), v1);
  v3 = *(unint64_t **)(v0 + 248);
  for (i = *(unint64_t **)(v0 + 256); v3 != i; v3 += 2)
    sub_20E9568E8(v77 + 360, v3, v3);
  sub_20E956C08(*(_QWORD *)(v77 + 424) + 80, 0x641511E8D2B3183BLL * ((uint64_t)(*(_QWORD *)(v0 + 280) - *(_QWORD *)(v0 + 272)) >> 3));
  v4 = *(_QWORD *)(v0 + 272);
  for (j = *(_QWORD *)(v0 + 280); v4 != j; v4 += 1944)
  {
    v37 = *(unsigned int *)(v4 + 8);
    v38 = *(_QWORD *)(v4 + 16);
    v39 = *(_DWORD *)(v4 + 24);
    v40 = *(_QWORD *)(v4 + 32);
    v41 = *(_DWORD *)(v4 + 40);
    v168 = *(_OWORD *)(v4 + 48);
    v128 = *(_QWORD *)(v4 + 64);
    v166 = *(_OWORD *)(v4 + 72);
    v162 = *(_QWORD *)(v4 + 88);
    v163 = *(_OWORD *)(v4 + 96);
    v159 = *(_OWORD *)(v4 + 112);
    v165 = *(_OWORD *)(v4 + 128);
    v161 = *(_OWORD *)(v4 + 144);
    v157 = *(_OWORD *)(v4 + 160);
    v153 = *(_OWORD *)(v4 + 176);
    v156 = *(_QWORD *)(v4 + 192);
    v158 = *(_OWORD *)(v4 + 200);
    v155 = *(_OWORD *)(v4 + 216);
    v152 = *(_OWORD *)(v4 + 232);
    v150 = *(_OWORD *)(v4 + 248);
    v149 = *(_QWORD *)(v4 + 264);
    v171 = *(_OWORD *)(v4 + 272);
    v169 = *(_QWORD *)(v4 + 288);
    v170 = *(_OWORD *)(v4 + 296);
    v167 = *(_QWORD *)(v4 + 312);
    v148 = *(_OWORD *)(v4 + 320);
    v147 = *(_OWORD *)(v4 + 336);
    v146 = *(_OWORD *)(v4 + 392);
    v145 = *(_OWORD *)(v4 + 464);
    v144 = *(_OWORD *)(v4 + 480);
    v143 = *(_OWORD *)(v4 + 536);
    v142 = *(_OWORD *)(v4 + 552);
    v164 = *(_OWORD *)(v4 + 608);
    v160 = *(_OWORD *)(v4 + 624);
    v154 = *(_OWORD *)(v4 + 1256);
    v151 = *(_OWORD *)(v4 + 1272);
    v141 = *(_OWORD *)(v4 + 1904);
    *(_QWORD *)&v228 = *(_QWORD *)v4;
    *((_QWORD *)&v228 + 1) = v37;
    v43 = *(_OWORD *)(v4 + 352);
    v42 = *(_OWORD *)(v4 + 368);
    v44 = *(_QWORD *)(v4 + 384);
    v84 = *(_OWORD *)(v4 + 408);
    v45 = *(_OWORD *)(v4 + 440);
    v46 = *(_QWORD *)(v4 + 456);
    v79 = *(_OWORD *)(v4 + 496);
    v80 = *(_OWORD *)(v4 + 424);
    v47 = *(_QWORD *)(v4 + 528);
    v89 = *(_OWORD *)(v4 + 568);
    v90 = *(_OWORD *)(v4 + 512);
    v86 = *(_OWORD *)(v4 + 584);
    v82 = *(_QWORD *)(v4 + 600);
    v125 = *(_OWORD *)(v4 + 640);
    v123 = *(_OWORD *)(v4 + 656);
    v120 = *(_OWORD *)(v4 + 688);
    v121 = *(_OWORD *)(v4 + 672);
    v118 = *(_OWORD *)(v4 + 704);
    v115 = *(_OWORD *)(v4 + 736);
    v116 = *(_OWORD *)(v4 + 720);
    v113 = *(_OWORD *)(v4 + 752);
    v110 = *(_OWORD *)(v4 + 784);
    v111 = *(_OWORD *)(v4 + 768);
    v108 = *(_OWORD *)(v4 + 800);
    v105 = *(_OWORD *)(v4 + 832);
    v106 = *(_OWORD *)(v4 + 816);
    v103 = *(_OWORD *)(v4 + 848);
    v100 = *(_OWORD *)(v4 + 880);
    v101 = *(_OWORD *)(v4 + 864);
    v98 = *(_OWORD *)(v4 + 896);
    v95 = *(_OWORD *)(v4 + 928);
    v96 = *(_OWORD *)(v4 + 912);
    v93 = *(_OWORD *)(v4 + 944);
    v91 = *(_OWORD *)(v4 + 960);
    v88 = *(_OWORD *)(v4 + 976);
    v85 = *(_OWORD *)(v4 + 992);
    v81 = *(_OWORD *)(v4 + 1008);
    v78 = *(_OWORD *)(v4 + 1024);
    v48 = *(_OWORD *)(v4 + 1040);
    v49 = *(_OWORD *)(v4 + 1056);
    v50 = *(_OWORD *)(v4 + 1072);
    v51 = *(_OWORD *)(v4 + 1088);
    v52 = *(_OWORD *)(v4 + 1104);
    v53 = *(_OWORD *)(v4 + 1120);
    v54 = *(_OWORD *)(v4 + 1136);
    v55 = *(_OWORD *)(v4 + 1152);
    v56 = *(_OWORD *)(v4 + 1168);
    v57 = *(_OWORD *)(v4 + 1184);
    v58 = *(_OWORD *)(v4 + 1200);
    v59 = *(_OWORD *)(v4 + 1216);
    v60 = *(_OWORD *)(v4 + 1232);
    v61 = *(_QWORD *)(v4 + 1248);
    v140 = *(_OWORD *)(v4 + 1288);
    v139 = *(_OWORD *)(v4 + 1304);
    v138 = *(_OWORD *)(v4 + 1320);
    v137 = *(_OWORD *)(v4 + 1336);
    v136 = *(_OWORD *)(v4 + 1352);
    v134 = *(_OWORD *)(v4 + 1384);
    v135 = *(_OWORD *)(v4 + 1368);
    v132 = *(_OWORD *)(v4 + 1416);
    v133 = *(_OWORD *)(v4 + 1400);
    v130 = *(_OWORD *)(v4 + 1448);
    v131 = *(_OWORD *)(v4 + 1432);
    v127 = *(_OWORD *)(v4 + 1464);
    v124 = *(_OWORD *)(v4 + 1480);
    v122 = *(_OWORD *)(v4 + 1496);
    v119 = *(_OWORD *)(v4 + 1512);
    v117 = *(_OWORD *)(v4 + 1528);
    v114 = *(_OWORD *)(v4 + 1544);
    v112 = *(_OWORD *)(v4 + 1560);
    v109 = *(_OWORD *)(v4 + 1576);
    v107 = *(_OWORD *)(v4 + 1592);
    v104 = *(_OWORD *)(v4 + 1608);
    v102 = *(_OWORD *)(v4 + 1624);
    v99 = *(_OWORD *)(v4 + 1640);
    v97 = *(_OWORD *)(v4 + 1656);
    v94 = *(_OWORD *)(v4 + 1672);
    v92 = *(_OWORD *)(v4 + 1688);
    v87 = *(_OWORD *)(v4 + 1704);
    v62 = *(_OWORD *)(v4 + 1736);
    v83 = *(_OWORD *)(v4 + 1720);
    v64 = *(_OWORD *)(v4 + 1752);
    v63 = *(_OWORD *)(v4 + 1768);
    v66 = *(_OWORD *)(v4 + 1784);
    v65 = *(_OWORD *)(v4 + 1800);
    v68 = *(_OWORD *)(v4 + 1816);
    v67 = *(_OWORD *)(v4 + 1832);
    v70 = *(_OWORD *)(v4 + 1848);
    v69 = *(_OWORD *)(v4 + 1864);
    v71 = *(_OWORD *)(v4 + 1880);
    v72 = *(_QWORD *)(v4 + 1896);
    v126 = *(_QWORD *)(v4 + 1920);
    v129 = *(_OWORD *)(v4 + 1928);
    v173 = v128;
    *(_OWORD *)&v172[32] = v168;
    v175 = v162;
    v174 = v166;
    v177 = v159;
    v176 = v163;
    v181 = v153;
    v180 = v157;
    v179 = v161;
    v178 = v165;
    v182 = v156;
    v187 = v149;
    v186 = v150;
    v185 = v152;
    v184 = v155;
    v183 = v158;
    v192 = v44;
    v190 = v43;
    v191 = v42;
    v189 = v147;
    v188 = v148;
    v197 = v46;
    v196 = v45;
    v195 = v80;
    v194 = v84;
    v193 = v146;
    v207 = v47;
    v205 = v79;
    v204 = v144;
    v203 = v145;
    v206 = v90;
    v212 = v82;
    v211 = v86;
    v210 = v89;
    v209 = v142;
    v208 = v143;
    v220 = v169;
    v219 = v171;
    v222 = v167;
    v221 = v170;
    *(_QWORD *)&v223[640] = v61;
    *(_OWORD *)&v223[608] = v59;
    *(_OWORD *)&v223[624] = v60;
    *(_OWORD *)&v223[576] = v57;
    *(_OWORD *)&v223[592] = v58;
    *(_OWORD *)&v223[544] = v55;
    *(_OWORD *)&v223[560] = v56;
    *(_OWORD *)&v223[512] = v53;
    *(_OWORD *)&v223[528] = v54;
    *(_OWORD *)&v223[480] = v51;
    *(_OWORD *)&v223[496] = v52;
    *(_OWORD *)&v223[448] = v49;
    *(_OWORD *)&v223[464] = v50;
    *(_OWORD *)&v223[416] = v78;
    *(_OWORD *)&v223[432] = v48;
    *(_OWORD *)&v223[400] = v81;
    *(_OWORD *)&v223[384] = v85;
    *(_OWORD *)&v223[368] = v88;
    *(_OWORD *)&v223[352] = v91;
    *(_OWORD *)&v223[336] = v93;
    *(_OWORD *)&v223[320] = v95;
    *(_OWORD *)&v223[304] = v96;
    *(_OWORD *)&v223[288] = v98;
    *(_OWORD *)&v223[272] = v100;
    *(_OWORD *)&v223[256] = v101;
    *(_OWORD *)&v223[240] = v103;
    *(_OWORD *)&v223[224] = v105;
    *(_OWORD *)&v223[208] = v106;
    *(_OWORD *)&v223[192] = v108;
    *(_OWORD *)&v223[176] = v110;
    *(_OWORD *)&v223[160] = v111;
    *(_OWORD *)&v223[144] = v113;
    *(_OWORD *)&v223[128] = v115;
    *(_OWORD *)&v223[112] = v116;
    *(_OWORD *)&v223[96] = v118;
    *(_OWORD *)&v223[80] = v120;
    *(_OWORD *)&v223[64] = v121;
    *(_OWORD *)&v223[48] = v123;
    *(_OWORD *)&v223[32] = v125;
    *(_OWORD *)&v223[16] = v160;
    *(_OWORD *)v223 = v164;
    *(_QWORD *)&v224[640] = v72;
    *(_OWORD *)&v224[608] = v69;
    *(_OWORD *)&v224[624] = v71;
    *(_OWORD *)&v224[576] = v67;
    *(_OWORD *)&v224[592] = v70;
    *(_OWORD *)&v224[544] = v65;
    *(_OWORD *)&v224[560] = v68;
    *(_OWORD *)&v224[512] = v63;
    *(_OWORD *)&v224[528] = v66;
    *(_OWORD *)&v224[480] = v62;
    *(_OWORD *)&v224[496] = v64;
    *(_OWORD *)&v224[448] = v87;
    *(_OWORD *)&v224[464] = v83;
    *(_OWORD *)&v224[416] = v94;
    *(_OWORD *)&v224[432] = v92;
    *(_OWORD *)&v224[384] = v99;
    *(_OWORD *)&v224[400] = v97;
    *(_OWORD *)&v224[352] = v104;
    *(_OWORD *)&v224[368] = v102;
    *(_OWORD *)&v224[320] = v109;
    *(_OWORD *)&v224[336] = v107;
    *(_OWORD *)&v224[288] = v114;
    *(_OWORD *)&v224[304] = v112;
    *(_OWORD *)&v224[256] = v119;
    *(_OWORD *)&v224[272] = v117;
    *(_OWORD *)&v224[224] = v124;
    *(_OWORD *)&v224[240] = v122;
    *(_OWORD *)&v224[192] = v130;
    *(_OWORD *)&v224[208] = v127;
    *(_OWORD *)&v224[160] = v132;
    *(_OWORD *)&v224[176] = v131;
    *(_OWORD *)&v224[128] = v134;
    *(_OWORD *)&v224[144] = v133;
    *(_OWORD *)&v224[96] = v136;
    *(_OWORD *)&v224[112] = v135;
    *(_OWORD *)&v224[64] = v138;
    *(_OWORD *)&v224[80] = v137;
    *(_OWORD *)&v224[32] = v140;
    *(_OWORD *)&v224[48] = v139;
    *(_OWORD *)v224 = v154;
    *(_OWORD *)&v224[16] = v151;
    v226 = v126;
    v225 = v141;
    v227 = v129;
    v73 = *(_QWORD *)(v77 + 424);
    *(_QWORD *)v172 = v38;
    *(_DWORD *)&v172[8] = v39;
    *(_QWORD *)&v172[16] = v40;
    *(_DWORD *)&v172[24] = v41;
    v74 = *(_QWORD *)(v73 + 88);
    if (v74 < *(_QWORD *)(v73 + 96))
    {
      *(_OWORD *)v74 = v228;
      v5 = *(_OWORD *)&v172[12];
      *(_OWORD *)(v74 + 16) = *(_OWORD *)v172;
      *(_OWORD *)(v74 + 28) = v5;
      v6 = v173;
      *(_OWORD *)(v74 + 48) = *(_OWORD *)&v172[32];
      *(_QWORD *)(v74 + 64) = v6;
      v7 = v175;
      *(_OWORD *)(v74 + 72) = v174;
      *(_QWORD *)(v74 + 88) = v7;
      v8 = v177;
      *(_OWORD *)(v74 + 96) = v176;
      *(_OWORD *)(v74 + 112) = v8;
      *(_OWORD *)(v74 + 128) = v178;
      v9 = v179;
      v10 = v180;
      v11 = v181;
      *(_QWORD *)(v74 + 192) = v182;
      *(_OWORD *)(v74 + 160) = v10;
      *(_OWORD *)(v74 + 176) = v11;
      *(_OWORD *)(v74 + 144) = v9;
      *(_OWORD *)(v74 + 200) = v183;
      v12 = v184;
      v13 = v185;
      v14 = v186;
      *(_QWORD *)(v74 + 264) = v187;
      *(_OWORD *)(v74 + 248) = v14;
      *(_OWORD *)(v74 + 232) = v13;
      *(_OWORD *)(v74 + 216) = v12;
      *(_OWORD *)(v74 + 272) = v188;
      v15 = v189;
      v16 = v190;
      v17 = v191;
      *(_QWORD *)(v74 + 336) = v192;
      *(_OWORD *)(v74 + 304) = v16;
      *(_OWORD *)(v74 + 320) = v17;
      *(_OWORD *)(v74 + 288) = v15;
      *(_OWORD *)(v74 + 344) = v193;
      v18 = v194;
      v19 = v195;
      v20 = v196;
      *(_QWORD *)(v74 + 408) = v197;
      *(_OWORD *)(v74 + 376) = v19;
      *(_OWORD *)(v74 + 392) = v20;
      *(_OWORD *)(v74 + 360) = v18;
      *(_OWORD *)(v74 + 416) = v198;
      v21 = v199;
      v22 = v200;
      v23 = v201;
      *(_QWORD *)(v74 + 480) = v202;
      *(_OWORD *)(v74 + 448) = v22;
      *(_OWORD *)(v74 + 464) = v23;
      *(_OWORD *)(v74 + 432) = v21;
      *(_OWORD *)(v74 + 488) = v203;
      v24 = v204;
      v25 = v205;
      v26 = v206;
      *(_QWORD *)(v74 + 552) = v207;
      *(_OWORD *)(v74 + 520) = v25;
      *(_OWORD *)(v74 + 536) = v26;
      *(_OWORD *)(v74 + 504) = v24;
      *(_OWORD *)(v74 + 560) = v208;
      v27 = v209;
      v28 = v210;
      v29 = v211;
      *(_QWORD *)(v74 + 624) = v212;
      *(_OWORD *)(v74 + 592) = v28;
      *(_OWORD *)(v74 + 608) = v29;
      *(_OWORD *)(v74 + 576) = v27;
      *(_OWORD *)(v74 + 632) = v213;
      v30 = v214;
      v31 = v215;
      v32 = v216;
      *(_QWORD *)(v74 + 696) = v217;
      *(_OWORD *)(v74 + 664) = v31;
      *(_OWORD *)(v74 + 680) = v32;
      *(_OWORD *)(v74 + 648) = v30;
      memcpy((void *)(v74 + 704), v218, 0x288uLL);
      v33 = v220;
      *(_OWORD *)(v74 + 1352) = v219;
      *(_QWORD *)(v74 + 1368) = v33;
      v34 = v222;
      *(_OWORD *)(v74 + 1376) = v221;
      *(_QWORD *)(v74 + 1392) = v34;
      memcpy((void *)(v74 + 1400), v223, 0x288uLL);
      memcpy((void *)(v74 + 2048), v224, 0x288uLL);
      v35 = v226;
      *(_OWORD *)(v74 + 2696) = v225;
      *(_QWORD *)(v74 + 2712) = v35;
      *(_OWORD *)(v74 + 2720) = v227;
      v36 = (char *)(v74 + 2736);
    }
    else
    {
      v36 = sub_20E956F0C((void **)(v73 + 80), &v228, (__int128 *)v172);
    }
    *(_QWORD *)(v73 + 88) = v36;
  }
  *(_QWORD *)v172 = *(_QWORD *)(v0 + 296);
  *(_DWORD *)&v172[8] = *(_DWORD *)(v0 + 304);
  *(_QWORD *)&v172[12] = *(_QWORD *)(v0 + 308);
  *(_DWORD *)&v172[20] = *(_DWORD *)(v0 + 316);
  *(_QWORD *)&v172[24] = *(_QWORD *)(v0 + 320);
  *(_QWORD *)&v172[29] = *(_QWORD *)(v0 + 325);
  v75 = *(_OWORD *)&v172[16];
  *(_OWORD *)(v77 + 256) = *(_OWORD *)v172;
  *(_OWORD *)(v77 + 272) = v75;
  *(_QWORD *)(v77 + 288) = *(_QWORD *)&v172[32];
  *(_QWORD *)(v77 + 400) = *(_QWORD *)(v0 + 336);
  sub_20F449E5C((uint64_t *)(v0 + 344), v77);
}

void sub_20E9568AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_20E9545B0(a22);
  _Unwind_Resume(a1);
}

void sub_20E9568C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_20E9545B0(a22);
  _Unwind_Resume(a1);
}

void sub_20E9568D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_20E9545B0(a22);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9568E8(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E956BF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E956C08(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  __int128 v55;

  v2 = *(_BYTE **)a1;
  if (0x80BFA02FE80BFA03 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x17F405FD017F41)
      sub_20E92CED8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 2736 * a2;
    v6 = (char *)operator new(2736 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    v9 = v8;
    if (v4 != v2)
    {
      v10 = &v6[v4 - v2];
      do
      {
        v9 = v10 - 2736;
        *((_OWORD *)v10 - 171) = *((_OWORD *)v4 - 171);
        v11 = v10 - 2720;
        v12 = *((_OWORD *)v4 - 170);
        *(_OWORD *)(v11 + 12) = *(_OWORD *)(v4 - 2708);
        *(_OWORD *)v11 = v12;
        v13 = v10 - 2688;
        v14 = *((_OWORD *)v4 - 168);
        *((_QWORD *)v13 + 2) = *((_QWORD *)v4 - 334);
        *(_OWORD *)v13 = v14;
        v15 = v10 - 2664;
        v16 = *(_OWORD *)(v4 - 2664);
        *((_QWORD *)v15 + 2) = *((_QWORD *)v4 - 331);
        *(_OWORD *)v15 = v16;
        v17 = v10 - 2640;
        v18 = *((_OWORD *)v4 - 164);
        *(_OWORD *)v17 = *((_OWORD *)v4 - 165);
        *((_OWORD *)v17 + 1) = v18;
        v19 = v10 - 2608;
        v21 = *((_OWORD *)v4 - 161);
        v20 = *((_OWORD *)v4 - 160);
        v22 = *((_OWORD *)v4 - 162);
        *((_QWORD *)v19 + 8) = *((_QWORD *)v4 - 318);
        *((_OWORD *)v19 + 2) = v21;
        *((_OWORD *)v19 + 3) = v20;
        *((_OWORD *)v19 + 1) = v22;
        *(_OWORD *)v19 = *((_OWORD *)v4 - 163);
        v23 = v10 - 2536;
        *(_OWORD *)v23 = *(_OWORD *)(v4 - 2536);
        v24 = *(_OWORD *)(v4 - 2520);
        v25 = *(_OWORD *)(v4 - 2504);
        v26 = *(_OWORD *)(v4 - 2488);
        *((_QWORD *)v23 + 8) = *((_QWORD *)v4 - 309);
        *((_OWORD *)v23 + 2) = v25;
        *((_OWORD *)v23 + 3) = v26;
        *((_OWORD *)v23 + 1) = v24;
        v27 = v10 - 2464;
        *(_OWORD *)v27 = *((_OWORD *)v4 - 154);
        v28 = *((_OWORD *)v4 - 153);
        v29 = *((_OWORD *)v4 - 152);
        v30 = *((_OWORD *)v4 - 151);
        *((_QWORD *)v27 + 8) = *((_QWORD *)v4 - 300);
        *((_OWORD *)v27 + 2) = v29;
        *((_OWORD *)v27 + 3) = v30;
        *((_OWORD *)v27 + 1) = v28;
        v31 = v10 - 2392;
        *(_OWORD *)v31 = *(_OWORD *)(v4 - 2392);
        v32 = *(_OWORD *)(v4 - 2376);
        v33 = *(_OWORD *)(v4 - 2360);
        v34 = *(_OWORD *)(v4 - 2344);
        *((_QWORD *)v31 + 8) = *((_QWORD *)v4 - 291);
        *((_OWORD *)v31 + 2) = v33;
        *((_OWORD *)v31 + 3) = v34;
        *((_OWORD *)v31 + 1) = v32;
        v35 = v10 - 2320;
        *(_OWORD *)v35 = *((_OWORD *)v4 - 145);
        v36 = *((_OWORD *)v4 - 144);
        v37 = *((_OWORD *)v4 - 143);
        v38 = *((_OWORD *)v4 - 142);
        *((_QWORD *)v35 + 8) = *((_QWORD *)v4 - 282);
        *((_OWORD *)v35 + 2) = v37;
        *((_OWORD *)v35 + 3) = v38;
        *((_OWORD *)v35 + 1) = v36;
        v39 = v10 - 2248;
        *(_OWORD *)v39 = *(_OWORD *)(v4 - 2248);
        v40 = *(_OWORD *)(v4 - 2232);
        v41 = *(_OWORD *)(v4 - 2216);
        v42 = *(_OWORD *)(v4 - 2200);
        *((_QWORD *)v39 + 8) = *((_QWORD *)v4 - 273);
        *((_OWORD *)v39 + 2) = v41;
        *((_OWORD *)v39 + 3) = v42;
        *((_OWORD *)v39 + 1) = v40;
        v43 = v10 - 2176;
        *(_OWORD *)v43 = *((_OWORD *)v4 - 136);
        v44 = *((_OWORD *)v4 - 135);
        v45 = *((_OWORD *)v4 - 134);
        v46 = *((_OWORD *)v4 - 133);
        *((_QWORD *)v43 + 8) = *((_QWORD *)v4 - 264);
        *((_OWORD *)v43 + 2) = v45;
        *((_OWORD *)v43 + 3) = v46;
        *((_OWORD *)v43 + 1) = v44;
        v47 = v10 - 2104;
        *(_OWORD *)v47 = *(_OWORD *)(v4 - 2104);
        v48 = *(_OWORD *)(v4 - 2088);
        v49 = *(_OWORD *)(v4 - 2072);
        v50 = *(_OWORD *)(v4 - 2056);
        *((_QWORD *)v47 + 8) = *((_QWORD *)v4 - 255);
        *((_OWORD *)v47 + 2) = v49;
        *((_OWORD *)v47 + 3) = v50;
        *((_OWORD *)v47 + 1) = v48;
        memcpy(v10 - 2032, v4 - 2032, 0x288uLL);
        v51 = v10 - 1384;
        v52 = *(_OWORD *)(v4 - 1384);
        *((_QWORD *)v51 + 2) = *((_QWORD *)v4 - 171);
        *(_OWORD *)v51 = v52;
        v53 = v10 - 1360;
        v54 = *((_QWORD *)v4 - 168);
        *(_OWORD *)v53 = *((_OWORD *)v4 - 85);
        *((_QWORD *)v53 + 2) = v54;
        memcpy(v10 - 1336, v4 - 1336, 0x288uLL);
        memcpy(v10 - 688, v4 - 688, 0x288uLL);
        v55 = *(_OWORD *)(v4 - 40);
        *((_QWORD *)v10 - 3) = *((_QWORD *)v4 - 3);
        *(_OWORD *)(v10 - 40) = v55;
        *((_OWORD *)v10 - 1) = *((_OWORD *)v4 - 1);
        v4 -= 2736;
        v10 -= 2736;
      }
      while (v4 != v2);
    }
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
    if (v2)
      operator delete(v2);
  }
}

char *sub_20E956F0C(void **a1, _OWORD *a2, __int128 *a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  __int128 v88;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0x80BFA02FE80BFA03 * ((v4 - (_BYTE *)*a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x17F405FD017F40)
    sub_20E92CED8();
  if (0x17F405FD017F406 * (((_BYTE *)a1[2] - v5) >> 4) > v7)
    v7 = 0x17F405FD017F406 * (((_BYTE *)a1[2] - v5) >> 4);
  if (0x80BFA02FE80BFA03 * (((_BYTE *)a1[2] - v5) >> 4) >= 0xBFA02FE80BFA0)
    v10 = 0x17F405FD017F40;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0x17F405FD017F40)
      sub_20E877A38();
    v11 = (char *)operator new(2736 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = *a3;
  v13 = &v11[2736 * v6];
  *(_OWORD *)v13 = *a2;
  *((_OWORD *)v13 + 1) = v12;
  v14 = &v11[2736 * v10];
  *(_OWORD *)(v13 + 28) = *(__int128 *)((char *)a3 + 12);
  *((_OWORD *)v13 + 3) = a3[2];
  *((_QWORD *)v13 + 8) = *((_QWORD *)a3 + 6);
  *(_OWORD *)(v13 + 72) = *(__int128 *)((char *)a3 + 56);
  *((_QWORD *)v13 + 11) = *((_QWORD *)a3 + 9);
  v15 = a3[6];
  *((_OWORD *)v13 + 6) = a3[5];
  *((_OWORD *)v13 + 7) = v15;
  *((_QWORD *)v13 + 24) = *((_QWORD *)a3 + 22);
  v16 = a3[10];
  *((_OWORD *)v13 + 10) = a3[9];
  *((_OWORD *)v13 + 11) = v16;
  v17 = a3[8];
  *((_OWORD *)v13 + 8) = a3[7];
  *((_OWORD *)v13 + 9) = v17;
  *(_OWORD *)(v13 + 200) = *(__int128 *)((char *)a3 + 184);
  *((_QWORD *)v13 + 33) = *((_QWORD *)a3 + 31);
  *(_OWORD *)(v13 + 248) = *(__int128 *)((char *)a3 + 232);
  *(_OWORD *)(v13 + 232) = *(__int128 *)((char *)a3 + 216);
  *(_OWORD *)(v13 + 216) = *(__int128 *)((char *)a3 + 200);
  v18 = a3[16];
  v19 = a3[17];
  v20 = a3[18];
  v21 = a3[19];
  *((_QWORD *)v13 + 42) = *((_QWORD *)a3 + 40);
  *((_OWORD *)v13 + 19) = v20;
  *((_OWORD *)v13 + 20) = v21;
  *((_OWORD *)v13 + 17) = v18;
  *((_OWORD *)v13 + 18) = v19;
  v22 = *(__int128 *)((char *)a3 + 328);
  v23 = *(__int128 *)((char *)a3 + 344);
  v24 = *(__int128 *)((char *)a3 + 360);
  v25 = *(__int128 *)((char *)a3 + 376);
  *((_QWORD *)v13 + 51) = *((_QWORD *)a3 + 49);
  *(_OWORD *)(v13 + 376) = v24;
  *(_OWORD *)(v13 + 392) = v25;
  *(_OWORD *)(v13 + 344) = v22;
  *(_OWORD *)(v13 + 360) = v23;
  v26 = a3[25];
  v27 = a3[26];
  v28 = a3[27];
  v29 = a3[28];
  *((_QWORD *)v13 + 60) = *((_QWORD *)a3 + 58);
  *((_OWORD *)v13 + 28) = v28;
  *((_OWORD *)v13 + 29) = v29;
  *((_OWORD *)v13 + 26) = v26;
  *((_OWORD *)v13 + 27) = v27;
  v30 = *(__int128 *)((char *)a3 + 472);
  v31 = *(__int128 *)((char *)a3 + 488);
  v32 = *(__int128 *)((char *)a3 + 504);
  v33 = *(__int128 *)((char *)a3 + 520);
  *((_QWORD *)v13 + 69) = *((_QWORD *)a3 + 67);
  *(_OWORD *)(v13 + 520) = v32;
  *(_OWORD *)(v13 + 536) = v33;
  *(_OWORD *)(v13 + 488) = v30;
  *(_OWORD *)(v13 + 504) = v31;
  v34 = a3[34];
  v35 = a3[35];
  v36 = a3[36];
  v37 = a3[37];
  *((_QWORD *)v13 + 78) = *((_QWORD *)a3 + 76);
  *((_OWORD *)v13 + 37) = v36;
  *((_OWORD *)v13 + 38) = v37;
  *((_OWORD *)v13 + 35) = v34;
  *((_OWORD *)v13 + 36) = v35;
  v38 = *(__int128 *)((char *)a3 + 616);
  v39 = *(__int128 *)((char *)a3 + 632);
  v40 = *(__int128 *)((char *)a3 + 648);
  v41 = *(__int128 *)((char *)a3 + 664);
  *((_QWORD *)v13 + 87) = *((_QWORD *)a3 + 85);
  *(_OWORD *)(v13 + 664) = v40;
  *(_OWORD *)(v13 + 680) = v41;
  *(_OWORD *)(v13 + 632) = v38;
  *(_OWORD *)(v13 + 648) = v39;
  memcpy(v13 + 704, a3 + 43, 0x2B8uLL);
  memcpy(v13 + 1400, (char *)a3 + 1384, 0x288uLL);
  memcpy(v13 + 2048, a3 + 127, 0x2B0uLL);
  v42 = v13 + 2736;
  if (v4 != v5)
  {
    do
    {
      v43 = v13;
      v13 -= 2736;
      *(_OWORD *)v13 = *((_OWORD *)v4 - 171);
      v44 = v43 - 2720;
      v45 = *((_OWORD *)v4 - 170);
      *(_OWORD *)(v44 + 12) = *(_OWORD *)(v4 - 2708);
      *(_OWORD *)v44 = v45;
      v46 = v43 - 2688;
      v47 = *((_OWORD *)v4 - 168);
      *((_QWORD *)v46 + 2) = *((_QWORD *)v4 - 334);
      *(_OWORD *)v46 = v47;
      v48 = v43 - 2664;
      v49 = *(_OWORD *)(v4 - 2664);
      *((_QWORD *)v48 + 2) = *((_QWORD *)v4 - 331);
      *(_OWORD *)v48 = v49;
      v50 = v43 - 2640;
      v51 = *((_OWORD *)v4 - 164);
      *(_OWORD *)v50 = *((_OWORD *)v4 - 165);
      *((_OWORD *)v50 + 1) = v51;
      v52 = v43 - 2608;
      v54 = *((_OWORD *)v4 - 161);
      v53 = *((_OWORD *)v4 - 160);
      v55 = *((_OWORD *)v4 - 162);
      *((_QWORD *)v52 + 8) = *((_QWORD *)v4 - 318);
      *((_OWORD *)v52 + 2) = v54;
      *((_OWORD *)v52 + 3) = v53;
      *((_OWORD *)v52 + 1) = v55;
      *(_OWORD *)v52 = *((_OWORD *)v4 - 163);
      v56 = v43 - 2536;
      *(_OWORD *)v56 = *(_OWORD *)(v4 - 2536);
      v57 = *(_OWORD *)(v4 - 2520);
      v58 = *(_OWORD *)(v4 - 2504);
      v59 = *(_OWORD *)(v4 - 2488);
      *((_QWORD *)v56 + 8) = *((_QWORD *)v4 - 309);
      *((_OWORD *)v56 + 2) = v58;
      *((_OWORD *)v56 + 3) = v59;
      *((_OWORD *)v56 + 1) = v57;
      v60 = v43 - 2464;
      *(_OWORD *)v60 = *((_OWORD *)v4 - 154);
      v61 = *((_OWORD *)v4 - 153);
      v62 = *((_OWORD *)v4 - 152);
      v63 = *((_OWORD *)v4 - 151);
      *((_QWORD *)v60 + 8) = *((_QWORD *)v4 - 300);
      *((_OWORD *)v60 + 2) = v62;
      *((_OWORD *)v60 + 3) = v63;
      *((_OWORD *)v60 + 1) = v61;
      v64 = v43 - 2392;
      *(_OWORD *)v64 = *(_OWORD *)(v4 - 2392);
      v65 = *(_OWORD *)(v4 - 2376);
      v66 = *(_OWORD *)(v4 - 2360);
      v67 = *(_OWORD *)(v4 - 2344);
      *((_QWORD *)v64 + 8) = *((_QWORD *)v4 - 291);
      *((_OWORD *)v64 + 2) = v66;
      *((_OWORD *)v64 + 3) = v67;
      *((_OWORD *)v64 + 1) = v65;
      v68 = v43 - 2320;
      *(_OWORD *)v68 = *((_OWORD *)v4 - 145);
      v69 = *((_OWORD *)v4 - 144);
      v70 = *((_OWORD *)v4 - 143);
      v71 = *((_OWORD *)v4 - 142);
      *((_QWORD *)v68 + 8) = *((_QWORD *)v4 - 282);
      *((_OWORD *)v68 + 2) = v70;
      *((_OWORD *)v68 + 3) = v71;
      *((_OWORD *)v68 + 1) = v69;
      v72 = v43 - 2248;
      *(_OWORD *)v72 = *(_OWORD *)(v4 - 2248);
      v73 = *(_OWORD *)(v4 - 2232);
      v74 = *(_OWORD *)(v4 - 2216);
      v75 = *(_OWORD *)(v4 - 2200);
      *((_QWORD *)v72 + 8) = *((_QWORD *)v4 - 273);
      *((_OWORD *)v72 + 2) = v74;
      *((_OWORD *)v72 + 3) = v75;
      *((_OWORD *)v72 + 1) = v73;
      v76 = v43 - 2176;
      *(_OWORD *)v76 = *((_OWORD *)v4 - 136);
      v77 = *((_OWORD *)v4 - 135);
      v78 = *((_OWORD *)v4 - 134);
      v79 = *((_OWORD *)v4 - 133);
      *((_QWORD *)v76 + 8) = *((_QWORD *)v4 - 264);
      *((_OWORD *)v76 + 2) = v78;
      *((_OWORD *)v76 + 3) = v79;
      *((_OWORD *)v76 + 1) = v77;
      v80 = v43 - 2104;
      *(_OWORD *)v80 = *(_OWORD *)(v4 - 2104);
      v81 = *(_OWORD *)(v4 - 2088);
      v82 = *(_OWORD *)(v4 - 2072);
      v83 = *(_OWORD *)(v4 - 2056);
      *((_QWORD *)v80 + 8) = *((_QWORD *)v4 - 255);
      *((_OWORD *)v80 + 2) = v82;
      *((_OWORD *)v80 + 3) = v83;
      *((_OWORD *)v80 + 1) = v81;
      memcpy(v43 - 2032, v4 - 2032, 0x288uLL);
      v84 = v43 - 1384;
      v85 = *(_OWORD *)(v4 - 1384);
      *((_QWORD *)v84 + 2) = *((_QWORD *)v4 - 171);
      *(_OWORD *)v84 = v85;
      v86 = v43 - 1360;
      v87 = *((_QWORD *)v4 - 168);
      *(_OWORD *)v86 = *((_OWORD *)v4 - 85);
      *((_QWORD *)v86 + 2) = v87;
      memcpy(v43 - 1336, v4 - 1336, 0x288uLL);
      memcpy(v43 - 688, v4 - 688, 0x288uLL);
      v88 = *(_OWORD *)(v4 - 40);
      *((_QWORD *)v43 - 3) = *((_QWORD *)v4 - 3);
      *(_OWORD *)(v43 - 40) = v88;
      *((_OWORD *)v43 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 2736;
    }
    while (v4 != v5);
    v4 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v42;
  a1[2] = v14;
  if (v4)
    operator delete(v4);
  return v42;
}

__n128 sub_20E9573E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 result;
  uint64_t v30;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = a2[1];
  a2[1] = 0;
  v3 = a2[2];
  *(_QWORD *)(a1 + 16) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v5 %= v6;
    }
    else
    {
      v5 &= v6 - 1;
    }
    *(_QWORD *)(v2 + 8 * v5) = a1 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = a2[10];
  a2[8] = 0;
  a2[9] = 0;
  a2[10] = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_QWORD *)(a1 + 104) = a2[13];
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_QWORD *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  v7 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  a2[17] = 0;
  a2[18] = 0;
  a2[19] = 0;
  v8 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = a2[22];
  a2[22] = 0;
  v9 = a2[23];
  *(_QWORD *)(a1 + 184) = v9;
  v10 = a2[24];
  *(_QWORD *)(a1 + 192) = v10;
  *(_DWORD *)(a1 + 200) = *((_DWORD *)a2 + 50);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(a1 + 176);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(v8 + 8 * v11) = a1 + 184;
    a2[23] = 0;
    a2[24] = 0;
  }
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
  *(_QWORD *)(a1 + 224) = a2[28];
  a2[26] = 0;
  a2[27] = 0;
  a2[28] = 0;
  *(_QWORD *)(a1 + 232) = a2[29];
  v13 = a2 + 30;
  v14 = a2[30];
  *(_QWORD *)(a1 + 240) = v14;
  v15 = a1 + 240;
  v16 = a2[31];
  *(_QWORD *)(a1 + 248) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    a2[29] = (uint64_t)v13;
    *v13 = 0;
    a2[31] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v15;
  }
  v17 = *((_OWORD *)a2 + 16);
  v18 = *((_OWORD *)a2 + 17);
  *(_QWORD *)(a1 + 288) = a2[36];
  *(_OWORD *)(a1 + 256) = v17;
  *(_OWORD *)(a1 + 272) = v18;
  *(_QWORD *)(a1 + 296) = a2[37];
  v19 = a1 + 304;
  v20 = a2[38];
  *(_QWORD *)(a1 + 304) = v20;
  v21 = a2[39];
  *(_QWORD *)(a1 + 312) = v21;
  if (v21)
  {
    *(_QWORD *)(v20 + 16) = v19;
    a2[37] = (uint64_t)(a2 + 38);
    a2[38] = 0;
    a2[39] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 296) = v19;
  }
  v22 = *((_OWORD *)a2 + 20);
  v23 = *((_OWORD *)a2 + 21);
  *(_QWORD *)(a1 + 352) = a2[44];
  *(_OWORD *)(a1 + 320) = v22;
  *(_OWORD *)(a1 + 336) = v23;
  v24 = a2[45];
  a2[45] = 0;
  *(_QWORD *)(a1 + 360) = v24;
  *(_QWORD *)(a1 + 368) = a2[46];
  a2[46] = 0;
  v25 = a2[47];
  *(_QWORD *)(a1 + 376) = v25;
  v26 = a2[48];
  *(_QWORD *)(a1 + 384) = v26;
  *(_DWORD *)(a1 + 392) = *((_DWORD *)a2 + 98);
  if (v26)
  {
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(a1 + 368);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v27 >= v28)
        v27 %= v28;
    }
    else
    {
      v27 &= v28 - 1;
    }
    *(_QWORD *)(v24 + 8 * v27) = a1 + 376;
    a2[47] = 0;
    a2[48] = 0;
  }
  result = *((__n128 *)a2 + 25);
  *(_QWORD *)(a1 + 416) = a2[52];
  *(__n128 *)(a1 + 400) = result;
  v30 = a2[53];
  a2[53] = 0;
  *(_QWORD *)(a1 + 424) = v30;
  return result;
}

_QWORD *sub_20E9576A4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1628;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E9576E0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1628;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E95772C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B1628;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E9577BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9577E0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B1628;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E957860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E95787C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E957894(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_20E9578C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::string __p;
  std::string v6[31];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  std::string __src[39];
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  memset(__src, 0, 24);
  v11 = 4;
  kdebug_trace();
  if (!sub_20E94FC70(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24), v2, __src))
    goto LABEL_9;
  if (v11 != 4)
    sub_20E877AB8();
  v3 = *(_QWORD *)(v2 + 120);
  if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p, __src[0].__r_.__value_.__l.__data_, __src[0].__r_.__value_.__l.__size_);
  else
    __p = __src[0];
  v6[0] = __p;
  memset(&__p, 0, sizeof(__p));
  v7 = 4;
  v8 = v3;
  v9 = &v8;
  sub_20EE61850((uint64_t)&v9, (__int128 *)v6);
  if (v7 != -1)
    ((void (*)(uint64_t **, std::string *))off_24C9B1408[v7])(&v9, v6);
  v7 = -1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    v4 = v11;
    if (v11 == -1)
      return;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v4 = v11;
  if (v11 != -1)
LABEL_10:
    ((void (*)(std::string *, std::string *))off_24C9B1448[v4])(v6, __src);
}

void sub_20E957A54(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E957A74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "INS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplINS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb"
                                "1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E957AE0()
{
  return &unk_24C9B1688;
}

_QWORD *sub_20E957AEC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B16A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E957B28(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B16A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E957B74(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B16A8;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E957C04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E957C28(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B16A8;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E957CA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E957CC4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E957CDC(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_20E957D0C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  _OWORD v11[10];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  _BYTE v54[7];
  uint64_t v55;
  char v56;
  int v57;
  _BYTE v58[32];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 __p;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  memset(v54, 0, sizeof(v54));
  memset(v58, 0, 28);
  bzero(v11, 0x31CuLL);
  v51 = *(_OWORD *)&v58[4];
  v52 = *(_QWORD *)&v58[20];
  v53 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 5;
  kdebug_trace();
  v3 = sub_20E9511B8(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24), v2, (uint64_t)&v10);
  v4 = v57;
  if (v3)
  {
    if (v57 != 5)
      sub_20E877AB8();
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    __p = 0u;
    v109 = 0xBFF0000000000000;
    v67 = v12;
    v66 = v11[9];
    v65 = v11[8];
    v64 = v11[7];
    v63 = v11[6];
    v62 = v11[5];
    v61 = v11[4];
    v60 = v11[3];
    v59 = v11[2];
    *(_OWORD *)&v58[16] = v11[1];
    *(_OWORD *)v58 = v11[0];
    v84 = v29;
    v85 = v30;
    v82 = v27;
    v83 = v28;
    v80 = v25;
    v81 = v26;
    v78 = v23;
    v79 = v24;
    v76 = v21;
    v77 = v22;
    v74 = v19;
    v75 = v20;
    v73 = v18;
    v72 = v17;
    v71 = v16;
    v70 = v15;
    v69 = v14;
    v68 = v13;
    v102 = v47;
    v103 = v48;
    v100 = v45;
    v101 = v46;
    v98 = v43;
    v99 = v44;
    v96 = v41;
    v97 = v42;
    v94 = v39;
    v95 = v40;
    v92 = v37;
    v93 = v38;
    v90 = v35;
    v91 = v36;
    v88 = v33;
    v89 = v34;
    v86 = v31;
    v87 = v32;
    v5 = v50;
    v6 = v49;
    v7 = v50 - v49;
    if (v50 != v49)
    {
      v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
      if (v8 >= 0x492492492492493)
        sub_20EABADD4();
      *(_QWORD *)&__p = operator new(v7);
      *((_QWORD *)&__p + 1) = __p;
      *(_QWORD *)&v105 = __p + 56 * v8;
      do
      {
        v9 = v6 + 32;
        sub_20FCD0B20((uint64_t)&__p, (_QWORD *)v6, (__int128 *)(v6 + 8), (__int128 *)(v6 + 32));
        v6 += 56;
      }
      while (v9 + 24 != v5);
      if ((_QWORD)__p)
        operator delete((void *)__p);
    }
    v4 = v57;
  }
  if (v4 != -1)
    ((void (*)(_BYTE *, char *))off_24C9B1448[v4])(v58, &v10);
}

void sub_20E9580BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

uint64_t sub_20E9580FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "INS0_2v229VIOStateAndUTCTimestampSampleILj3EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplINS0_2v229VIOStateAndUTCTimestampSampleILj3EEENSt3__19enable_ifILb1EvEEEEvPKh"
                                "jNS5_5DummyIT_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_2v229VIOStateAndUTCTimestampSampleILj3EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_2v229VIOStateAndUTCTimestampSampleILj3EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E958168()
{
  return &unk_24C9B1708;
}

_QWORD *sub_20E958174(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1728;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E9581B0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B1728;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9581FC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B1728;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E95828C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9582B0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B1728;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E958330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E95834C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E958364(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_20E958394(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  char **v9[119];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  memset(v9, 0, 24);
  v10 = 6;
  kdebug_trace();
  result = sub_20E9529C0(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24), v2, (char **)v9);
  if ((_DWORD)result)
  {
    if (v10 != 6)
      sub_20E877AB8();
    v4 = *(_QWORD *)(v2 + 120);
    sub_20E958568(v9, (uint64_t)&v5);
    v6 = 6;
    v7 = v4;
    v8 = &v7;
    result = sub_20EE61928((uint64_t)&v8, &v5);
    if (v6 != -1)
      result = ((uint64_t (*)(uint64_t **, __int128 *))off_24C9B1408[v6])(&v8, &v5);
  }
  if (v10 != -1)
    return ((uint64_t (*)(__int128 *, char ***))off_24C9B1448[v10])(&v5, v9);
  return result;
}

void sub_20E9584D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9584F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "INS0_13mapping_types2v122SubmapsStatsInfoSampleILj1EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplINS0_13mapping_types2v122SubmapsStatsInfoSampleILj1EEENSt3__19enable_ifILb1Ev"
                                "EEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v122SubmapsStatsInfoSampleILj1EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v122SubmapsStatsInfoSampleILj1EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E95855C()
{
  return &unk_24C9B1788;
}

char ***sub_20E958568@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char **v11;

  v4 = *result;
  v3 = result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_20E92CED8();
    *(_QWORD *)&v8 = operator new((char *)v3 - (char *)v4);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 16 * (v5 >> 4);
    v11 = (char **)&v8;
    do
    {
      v10 = *(_OWORD *)v4;
      result = sub_20E958634(&v11, &v10);
      v4 += 2;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20E958614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20E958634(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20E92CED8();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_20E877A38();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

_QWORD *sub_20E958744(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B17A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E958780(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9B17A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9587CC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = (_BYTE *)a1[2];
  *v2 = &off_24C9B17A8;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v5 = (_BYTE *)a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - v4);
    v2[2] = v7;
    v8 = &v7[v6];
    v2[4] = &v7[v6];
    memcpy(v7, v4, v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_20E95885C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E958880(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v7;
  char *v8;

  v2 = result[1];
  a2[2] = 0;
  *a2 = &off_24C9B17A8;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v4 = (_BYTE *)result[2];
  v3 = (_BYTE *)result[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v3 - v4);
    a2[2] = v7;
    a2[3] = v7;
    v8 = &v7[v5];
    a2[4] = &v7[v5];
    result = memcpy(v7, v4, v5);
    a2[3] = v8;
  }
  return result;
}

void sub_20E958900(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E95891C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20E958934(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_20E958964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  void *__p[2];
  uint64_t v10;
  __int128 *v11;
  _OWORD v12[4];
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v24[4];
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v17 = 0u;
  v18 = 0u;
  *(_QWORD *)((char *)v19 + 13) = 0;
  memset(v24, 0, 24);
  v15 = 0;
  v16 = &v17;
  v25[0] = 0;
  v25[1] = 0;
  v24[3] = v25;
  v27 = v19[0];
  v28 = v19[1];
  v26 = 0u;
  v29 = 0;
  v30 = 7;
  kdebug_trace();
  *(_QWORD *)&v14 = a1 + 16;
  *((_QWORD *)&v14 + 1) = v2;
  if (v30 == -1)
    goto LABEL_20;
  __p[0] = &v14;
  if (!((unsigned int (*)(void **, _QWORD *))*(&off_24C9B13C8 + v30))(__p, v24))
    goto LABEL_17;
  if (v30 != 7)
LABEL_20:
    sub_20E877AB8();
  v3 = *(_QWORD *)(v2 + 120);
  sub_20E958C58((uint64_t)v24, (uint64_t *)__p);
  v14 = *(_OWORD *)__p;
  v4 = v10;
  __p[1] = 0;
  v10 = 0;
  __p[0] = 0;
  v15 = v4;
  v16 = v11;
  v17 = v12[0];
  if (*((_QWORD *)&v12[0] + 1))
  {
    *(_QWORD *)(*(_QWORD *)&v12[0] + 16) = &v17;
    v11 = v12;
    v12[0] = 0uLL;
  }
  else
  {
    v16 = &v17;
  }
  v18 = v12[1];
  v19[0] = v12[2];
  v19[1] = v12[3];
  LODWORD(v20) = v13;
  v21 = 7;
  v22 = v3;
  v23 = &v22;
  sub_20EE619FC((uint64_t)&v23, &v14);
  if (v21 != -1)
    ((void (*)(uint64_t **, __int128 *))off_24C9B1408[v21])(&v23, &v14);
  v21 = -1;
  sub_20E86872C((uint64_t)&v11, *(_QWORD **)&v12[0]);
  v5 = (char *)__p[0];
  if (__p[0])
  {
    v6 = (char *)__p[1];
    v7 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        if (v8)
        {
          *((_QWORD *)v6 - 2) = v8;
          operator delete(v8);
        }
        v6 -= 48;
      }
      while (v6 != v5);
      v7 = __p[0];
    }
    __p[1] = v5;
    operator delete(v7);
  }
LABEL_17:
  if (v30 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C9B1448[v30])(&v14, v24);
}

void sub_20E958BC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E958BE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImpl"
                     "INS0_13mapping_types2v216MLFrameSetSampleILj4EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17Receiv"
                                "eCMDataImplINS0_13mapping_types2v216MLFrameSetSampleILj4EEENSt3__19enable_ifILb1EvEEEEvP"
                                "KhjNS5_5DummyIT_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v216MLFrameSetSampleILj4EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v216MLFrameSetSampleILj4EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E958C4C()
{
  return &unk_24C9B1808;
}

double sub_20E958C58@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _OWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  __int128 v31;
  uint64_t *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[40];

  *a2 = 0;
  a2[1] = 0;
  a2[4] = 0;
  v3 = (uint64_t **)(a2 + 4);
  a2[5] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t)(a2 + 4);
  *((_OWORD *)a2 + 3) = 0u;
  v32 = a2 + 6;
  *((_BYTE *)a2 + 96) = 0;
  *((_OWORD *)a2 + 4) = 0u;
  *(uint64_t *)((char *)a2 + 77) = 0;
  v4 = *(_QWORD **)(a1 + 24);
  v5 = (_QWORD *)(a1 + 32);
  if (v4 != (_QWORD *)(a1 + 32))
  {
    while (1)
    {
      v50 = *(_OWORD *)(v4 + 7);
      v64 = *(_OWORD *)(v4 + 67);
      v65 = *(_OWORD *)(v4 + 69);
      v62 = *(_OWORD *)(v4 + 63);
      v63 = *(_OWORD *)(v4 + 65);
      v60 = *(_OWORD *)(v4 + 59);
      v61 = *(_OWORD *)(v4 + 61);
      v58 = *(_OWORD *)(v4 + 55);
      v59 = *(_OWORD *)(v4 + 57);
      v56 = *(_OWORD *)(v4 + 51);
      v57 = *(_OWORD *)(v4 + 53);
      v54 = *(_OWORD *)(v4 + 47);
      v55 = *(_OWORD *)(v4 + 49);
      v52 = *(_OWORD *)(v4 + 43);
      v53 = *(_OWORD *)(v4 + 45);
      v51 = *(_OWORD *)(v4 + 41);
      v48 = *(_OWORD *)(v4 + 37);
      v49 = *(_OWORD *)(v4 + 39);
      v46 = *(_OWORD *)(v4 + 33);
      v47 = *(_OWORD *)(v4 + 35);
      v44 = *(_OWORD *)(v4 + 29);
      v45 = *(_OWORD *)(v4 + 31);
      v42 = *(_OWORD *)(v4 + 25);
      v43 = *(_OWORD *)(v4 + 27);
      v40 = *(_OWORD *)(v4 + 21);
      v41 = *(_OWORD *)(v4 + 23);
      v38 = *(_OWORD *)(v4 + 17);
      v39 = *(_OWORD *)(v4 + 19);
      v36 = *(_OWORD *)(v4 + 13);
      v37 = *(_OWORD *)(v4 + 15);
      v34 = *(_OWORD *)(v4 + 9);
      v35 = *(_OWORD *)(v4 + 11);
      v9 = v4[4];
      v10 = *((unsigned int *)v4 + 10);
      v11 = *((_DWORD *)v4 + 12);
      v12 = v3;
      v13 = v3;
      v14 = *v3;
      if (*v3)
        break;
LABEL_21:
      v18 = (char *)operator new(0x238uLL);
      *((_QWORD *)v18 + 4) = v9;
      *((_QWORD *)v18 + 5) = v10;
      *((_DWORD *)v18 + 12) = v11;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = v13;
      *v12 = (uint64_t *)v18;
      v19 = *(_QWORD *)a2[3];
      v20 = (uint64_t *)v18;
      if (v19)
      {
        a2[3] = v19;
        v20 = *v12;
      }
      sub_20E868578((uint64_t *)a2[4], v20);
      ++a2[5];
LABEL_24:
      *(_OWORD *)(v18 + 56) = v50;
      v21 = v18 + 56;
      v21[1] = v34;
      v21[2] = v35;
      v21[3] = v36;
      v21[4] = v37;
      v21[5] = v38;
      v21[6] = v39;
      v21[7] = v40;
      v21[8] = v41;
      v21[9] = v42;
      v21[10] = v43;
      v21[11] = v44;
      v21[12] = v45;
      v21[13] = v46;
      v21[14] = v47;
      v21[15] = v48;
      v21[16] = v49;
      v21[17] = v51;
      v21[18] = v52;
      v21[19] = v53;
      v21[20] = v54;
      v21[21] = v55;
      v21[22] = v56;
      v21[23] = v57;
      v21[24] = v58;
      v21[25] = v59;
      v21[26] = v60;
      v21[27] = v61;
      v21[28] = v62;
      v21[29] = v63;
      v21[30] = v64;
      v21[31] = v65;
      v22 = (_QWORD *)v4[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v4[2];
          v24 = *v23 == (_QWORD)v4;
          v4 = v23;
        }
        while (!v24);
      }
      v4 = v23;
      if (v23 == v5)
        goto LABEL_2;
    }
    while (1)
    {
      while (1)
      {
        v13 = v14;
        v15 = *((_DWORD *)v14 + 12);
        if (v11 == v15)
          break;
        if (v11 < v15)
          goto LABEL_8;
        if (v15 >= v11)
          goto LABEL_30;
LABEL_19:
        v14 = (uint64_t *)v13[1];
        if (!v14)
        {
          v12 = (uint64_t **)(v13 + 1);
          goto LABEL_21;
        }
      }
      v16 = v13[4];
      if (v9 < v16)
        goto LABEL_8;
      if (v9 != v16)
      {
        if (v16 >= v9)
        {
LABEL_30:
          v18 = (char *)v13;
          goto LABEL_24;
        }
        goto LABEL_19;
      }
      v17 = *((_DWORD *)v13 + 10);
      if (v10 >= v17)
      {
        if (v17 >= v10)
          goto LABEL_30;
        goto LABEL_19;
      }
LABEL_8:
      v14 = (uint64_t *)*v13;
      v12 = (uint64_t **)v13;
      if (!*v13)
        goto LABEL_21;
    }
  }
LABEL_2:
  sub_20E958FF8((char ****)a1, (uint64_t)v66);
  v6 = *a2;
  if (*a2)
  {
    v7 = a2[1];
    v8 = (void *)*a2;
    if (v7 != v6)
    {
      do
      {
        v25 = *(void **)(v7 - 24);
        if (v25)
        {
          *(_QWORD *)(v7 - 16) = v25;
          operator delete(v25);
        }
        v7 -= 48;
      }
      while (v7 != v6);
      v8 = (void *)*a2;
    }
    a2[1] = v6;
    operator delete(v8);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  v26 = *(_OWORD *)v66;
  *(_QWORD *)v66 = *(_QWORD *)(a1 + 60);
  *(_DWORD *)&v66[8] = *(_DWORD *)(a1 + 68);
  v27 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)&v66[29] = *(_QWORD *)(a1 + 89);
  v28 = *(_QWORD *)&v66[16];
  v29 = *(_QWORD *)&v66[32];
  *(_QWORD *)&v66[12] = v27;
  *(_DWORD *)&v66[20] = *(_DWORD *)(a1 + 80);
  *(_QWORD *)&v66[24] = *(_QWORD *)(a1 + 84);
  *(_OWORD *)a2 = v26;
  result = *(double *)v66;
  v31 = *(_OWORD *)&v66[16];
  *(_OWORD *)((char *)a2 + 60) = *(_OWORD *)v66;
  a2[2] = v28;
  *v32 = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v32 + 2) = *(_DWORD *)(a1 + 56);
  *(_OWORD *)((char *)a2 + 76) = v31;
  *(uint64_t *)((char *)a2 + 92) = v29;
  return result;
}

void sub_20E958FD0(_Unwind_Exception *a1)
{
  char **v1;

  sub_20E9548D8(v1);
  _Unwind_Resume(a1);
}

void sub_20E958FE4(_Unwind_Exception *a1)
{
  char **v1;

  sub_20E9548D8(v1);
  _Unwind_Resume(a1);
}

double sub_20E958FF8@<D0>(char ****a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char ***v5;
  char ***i;
  uint64_t v7;
  _QWORD *v8;
  double result;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  v4 = ((char *)a1[1] - (char *)*a1) >> 4;
  v11 = 0;
  v10 = 0uLL;
  sub_20E95912C((uint64_t)&v10, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a1;
  for (i = a1[1]; v5 != i; v5 += 6)
  {
    while (1)
    {
      sub_20F43AE74(v5, (uint64_t)&v12);
      v8 = (_QWORD *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1) >= v11)
        break;
      v7 = v13;
      **((_OWORD **)&v10 + 1) = v12;
      v8[2] = v7;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)__p;
      v8[5] = v15;
      *((_QWORD *)&v10 + 1) = v8 + 6;
      v5 += 6;
      if (v5 == i)
        goto LABEL_8;
    }
    *((_QWORD *)&v10 + 1) = sub_20E959244((void **)&v10, (uint64_t)&v12);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
LABEL_8:
  result = *(double *)&v10;
  *(_OWORD *)a2 = v10;
  *(_QWORD *)(a2 + 16) = v11;
  return result;
}

void sub_20E9590F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  sub_20E954954((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95912C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void *v12;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20E92CED8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 48 * a2;
    v6 = (char *)operator new(48 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 3);
        *((_QWORD *)v9 - 4) = *((_QWORD *)v4 - 4);
        *((_OWORD *)v9 - 3) = v10;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        v9 -= 48;
        *((_QWORD *)v4 - 3) = 0;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        v4 -= 48;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (void *)*((_QWORD *)v11 - 3);
        if (v12)
        {
          *((_QWORD *)v11 - 2) = v12;
          operator delete(v12);
        }
        v11 -= 48;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20E959244(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  void *v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20E92CED8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v4;
  if (v5 > 0x555555555555555)
    sub_20E877A38();
  v7 = 48 * v5;
  v8 = (char *)operator new(48 * v5);
  v9 = &v8[48 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v9 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v9 - 4) = *((_QWORD *)v13 - 4);
      *((_OWORD *)v9 - 3) = v14;
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v13 - 24);
      *((_QWORD *)v9 - 1) = *((_QWORD *)v13 - 1);
      v9 -= 48;
      *((_QWORD *)v13 - 3) = 0;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v13 -= 48;
    }
    while (v13 != v12);
    v13 = (char *)*a1;
    v15 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      v15 -= 48;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t CV3DVIOGetMapBounds(const __CFData *a1, _QWORD *a2, double a3)
{
  uint64_t v4;
  BOOL v6;
  unsigned int v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  double *v22;
  unsigned __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  const double *v26;
  const double *v27;
  unsigned __int128 v28;
  unsigned __int128 v29;
  unint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  double *v42;
  double *v43;
  double *v44;
  double *v45;
  double *v46;
  double *v48;
  double *v49;
  _QWORD *v50;
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;

  v4 = 5;
  v6 = a3 >= 0.5 || a1 == 0 || a2 == 0;
  if (!v6 && a3 >= 0.0)
  {
    v51[0] = 0;
    v51[1] = 0;
    v50 = v51;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0;
    v57 = 3;
    v8 = sub_20E9DA7E0(a1, (uint64_t)&v50);
    if (v8 >= 2)
    {
      if (v8 == 2)
        v4 = 19;
      else
        v4 = 1;
      goto LABEL_57;
    }
    sub_20E9DDD4C((uint64_t)&v50, &v48);
    v9 = v48;
    if (v48 == v49)
    {
      v4 = 13;
      if (!v48)
        goto LABEL_57;
      goto LABEL_56;
    }
    v10 = ((char *)v49 - (char *)v48) / 24;
    v11 = (((int)v49 - (int)v48) / 24);
    v12 = 8 * v11 + 31;
    v13 = (double)(v10 - 1);
    v14 = (unint64_t)(v13 * a3);
    v15 = v12 & 0xFFFFFFFE0;
    v16 = (unint64_t)((1.0 - a3) * v13);
    if ((_DWORD)v10)
    {
      v17 = (double *)operator new(v12 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v18 = v17;
      if (v11 > 0xA && (v17 < &v9[3 * v11 - 2] ? (v19 = v9 >= &v17[v11]) : (v19 = 1), v19))
      {
        v20 = v10 & 3;
        if ((v10 & 3) == 0)
          v20 = 4;
        v21 = v11 - v20;
        v22 = &v17[v11 - v20];
        v23 = (unsigned __int128 *)(v17 + 2);
        v24 = 6;
        v25 = v21;
        do
        {
          v26 = &v9[((_DWORD)v24 - 6) & 0xFFFFFFFC];
          v27 = &v9[v24 & 0xFFFFFFFE];
          v28 = (unsigned __int128)vld3q_f64(v26);
          v29 = (unsigned __int128)vld3q_f64(v27);
          *(v23 - 1) = v28;
          *v23 = v29;
          v24 += 12;
          v23 += 2;
          v25 -= 4;
        }
        while (v25);
      }
      else
      {
        v21 = 0;
        v22 = v17;
      }
      v30 = v11 - v21;
      v31 = 3 * v21;
      do
      {
        *v22++ = v9[v31];
        v31 += 3;
        --v30;
      }
      while (v30);
      if (v11 != v14)
        sub_20E8FB210(v17, &v17[v14], &v17[v11]);
      *a2 = *(_QWORD *)&v18[v14];
      if (v11 != v16)
        sub_20E8FB210(v18, &v18[v16], &v18[v11]);
      a2[3] = *(_QWORD *)&v18[v16];
      MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
      v32 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
      v33 = v32;
      v34 = 0;
      v35 = 1;
      do
      {
        v32[v34++] = v9[v35];
        v35 += 3;
      }
      while (v11 != v34);
      if (v11 != v14)
        sub_20E8FB210(v32, &v32[v14], &v32[v11]);
      a2[1] = *(_QWORD *)&v33[v14];
      if (v11 != v16)
        sub_20E8FB210(v33, &v33[v16], &v33[v11]);
      a2[4] = *(_QWORD *)&v33[v16];
      MEMORY[0x212BC6368](v33, 0x1000C8000313F17);
      v36 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
      v37 = v36;
      v38 = 0;
      v39 = 2;
      do
      {
        v36[v38++] = v9[v39];
        v39 += 3;
      }
      while (v11 != v38);
      if (v11 != v14)
        sub_20E8FB210(v36, &v36[v14], &v36[v11]);
      a2[2] = *(_QWORD *)&v37[v14];
      if (v11 == v16)
        goto LABEL_54;
    }
    else
    {
      if (v11 == v16)
      {
        if (v11 == v14)
        {
          v40 = operator new(v12 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          MEMORY[0x212BC6368](v40, 0x1000C8000313F17);
          v41 = operator new(v15, (std::align_val_t)0x20uLL);
          MEMORY[0x212BC6368](v41, 0x1000C8000313F17);
          v37 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
          goto LABEL_55;
        }
        v44 = (double *)operator new(v12 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        sub_20E8FB210(v44, &v44[v14], &v44[v11]);
        *a2 = *(_QWORD *)&v44[v14];
        a2[3] = *(_QWORD *)&v44[v16];
        MEMORY[0x212BC6368](v44, 0x1000C8000313F17);
        v45 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
        sub_20E8FB210(v45, &v45[v14], &v45[v11]);
        a2[1] = *(_QWORD *)&v45[v14];
        a2[4] = *(_QWORD *)&v45[v16];
        MEMORY[0x212BC6368](v45, 0x1000C8000313F17);
        v37 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
        sub_20E8FB210(v37, &v37[v14], &v37[v11]);
        a2[2] = *(_QWORD *)&v37[v14];
LABEL_54:
        a2[5] = *(_QWORD *)&v37[v16];
LABEL_55:
        MEMORY[0x212BC6368](v37, 0x1000C8000313F17);
        v4 = 0;
        v9 = v48;
        if (!v48)
        {
LABEL_57:
          sub_20E8FB5B8((uint64_t)&v50);
          return v4;
        }
LABEL_56:
        v49 = v9;
        operator delete(v9);
        goto LABEL_57;
      }
      v42 = (double *)operator new(v12 & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      if (v11 == v14)
      {
        sub_20E8FB210(v42, &v42[v16], &v42[v11]);
        a2[3] = *(_QWORD *)&v42[v16];
        MEMORY[0x212BC6368](v42, 0x1000C8000313F17);
        v43 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
        sub_20E8FB210(v43, &v43[v16], &v43[v11]);
        a2[4] = *(_QWORD *)&v43[v16];
        MEMORY[0x212BC6368](v43, 0x1000C8000313F17);
        v37 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
      }
      else
      {
        sub_20E8FB210(v42, &v42[v14], &v42[v11]);
        *a2 = *(_QWORD *)&v42[v14];
        sub_20E8FB210(v42, &v42[v16], &v42[v11]);
        a2[3] = *(_QWORD *)&v42[v16];
        MEMORY[0x212BC6368](v42, 0x1000C8000313F17);
        v46 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
        sub_20E8FB210(v46, &v46[v14], &v46[v11]);
        a2[1] = *(_QWORD *)&v46[v14];
        sub_20E8FB210(v46, &v46[v16], &v46[v11]);
        a2[4] = *(_QWORD *)&v46[v16];
        MEMORY[0x212BC6368](v46, 0x1000C8000313F17);
        v37 = (double *)operator new(v15, (std::align_val_t)0x20uLL);
        sub_20E8FB210(v37, &v37[v14], &v37[v11]);
        a2[2] = *(_QWORD *)&v37[v14];
      }
    }
    sub_20E8FB210(v37, &v37[v16], &v37[v11]);
    goto LABEL_54;
  }
  return v4;
}

void sub_20E959A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_20E8FB5B8((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20E8FB5B8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOExtractObjectMap(const __CFData *a1, __CFData *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE v16[104];
  int64x2_t *v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;

  v5 = 5;
  if (a1 && a2)
  {
    v17 = (int64x2_t *)v18;
    v18[0] = 0;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v18[1] = 0;
    v23 = 0;
    v24 = 3;
    v10 = sub_20E9DA7E0(a1, (uint64_t)&v17);
    if (v10 >= 2)
    {
      if (v10 == 2)
        v5 = 19;
      else
        v5 = 1;
    }
    else
    {
      sub_20E9DABD8(&v17, a5, (uint64_t *)(a5 + 24), a3, a4, 0, (uint64_t)v16);
      sub_20E9DDD4C((uint64_t)v16, &v14);
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3);
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (v11 >= 8)
      {
        v12 = sub_20E9DAA74(a2, (uint64_t)v16);
        if (v12 >= 3)
          v5 = 1;
        else
          v5 = dword_2102E0B34[v12];
      }
      else
      {
        v5 = 16;
      }
      sub_20E8FB5B8((uint64_t)v16);
    }
    sub_20E8FB5B8((uint64_t)&v17);
  }
  return v5;
}

void sub_20E959BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E8FB5B8((uint64_t)&a13);
  sub_20E8FB5B8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20E959BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E8FB5B8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20E959BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E8FB5B8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOCreatePointsFromMap(const __CFData *a1, __CFData *a2)
{
  uint64_t v2;
  unsigned int v4;
  _BYTE *v5;
  void *__p;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v2 = 5;
  if (a1 && a2)
  {
    v10[0] = 0;
    v10[1] = 0;
    v9 = v10;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0;
    v16 = 3;
    v4 = sub_20E9DA7E0(a1, (uint64_t)&v9);
    if (v4 >= 2)
    {
      if (v4 == 2)
        v2 = 19;
      else
        v2 = 1;
      goto LABEL_12;
    }
    sub_20E9DDEB8((uint64_t)&v9, &__p);
    v5 = __p;
    if (__p == v8)
    {
      v2 = 13;
      if (!__p)
      {
LABEL_12:
        sub_20E8FB5B8((uint64_t)&v9);
        return v2;
      }
    }
    else
    {
      CFDataAppendBytes(a2, (const UInt8 *)__p, v8 - (_BYTE *)__p);
      v2 = 0;
      v5 = __p;
      if (!__p)
        goto LABEL_12;
    }
    v8 = v5;
    operator delete(v5);
    goto LABEL_12;
  }
  return v2;
}

void sub_20E959CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_20E8FB5B8((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20E8FB5B8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOCreateKeyframesFromMap(const __CFData *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  const std::nothrow_t *v13;
  int32x4_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const float *v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  const float *v35;
  unsigned __int128 v36;
  unsigned __int128 v37;
  int8x16_t v38;
  int8x16_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int8x16_t v42;
  int64x2_t v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD **v53;
  BOOL v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  int8x16_t v62;
  uint64_t v63[13];
  _QWORD **v64;
  _QWORD *v65;
  unint64_t v66;
  __int128 __p;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;

  v3 = 5;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    sub_20E8E8A78(v63);
    v64 = &v65;
    v65 = 0;
    __p = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v66 = 0;
    v71 = 0;
    v72 = 3;
    v7 = sub_20E9DA7E0(a1, (uint64_t)&v64);
    if (v7 <= 1)
      sub_20FCD9BAC(&v64, v63);
    sub_20E8FB5B8((uint64_t)&v64);
    if (v7)
    {
      if (v7 == 1)
      {
        v3 = 10;
      }
      else if (v7 == 2)
      {
        v3 = 19;
      }
      else
      {
        v3 = 1;
      }
LABEL_52:
      sub_20E8E95B0(v63);
      return v3;
    }
    v65 = 0;
    v66 = 0;
    v64 = &v65;
    __p = 0u;
    v68 = 0u;
    LODWORD(v69) = 1065353216;
    sub_20EDB9F70((uint64_t)&v64, v63);
    v8 = v66;
    *a2 = v66;
    if (is_mul_ok(v8, 0xB8uLL))
      v9 = 184 * v8;
    else
      v9 = -1;
    v10 = operator new[](v9, MEMORY[0x24BEDB6B8]);
    *a3 = (uint64_t)v10;
    if (v10)
    {
      v11 = v64;
      if (v64 != &v65)
      {
        v12 = 0;
        v13 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
        v14.i64[0] = -1;
        v14.i64[1] = -1;
        v15 = (int8x16_t)vdupq_n_s64(1uLL);
        v62 = v15;
        do
        {
          v16 = *a3 + 184 * v12;
          v17 = v11[5];
          *(_QWORD *)v16 = *(_QWORD *)(v17 + 8);
          *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 16);
          *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 24);
          *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 40);
          *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 48);
          *(_QWORD *)(v16 + 40) = *(_QWORD *)(v17 + 56);
          *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 72);
          *(_QWORD *)(v16 + 56) = *(_QWORD *)(v17 + 80);
          *(_QWORD *)(v16 + 64) = *(_QWORD *)(v17 + 88);
          *(_QWORD *)(v16 + 72) = *(_QWORD *)(v17 + 32);
          *(_QWORD *)(v16 + 80) = *(_QWORD *)(v17 + 64);
          *(_QWORD *)(v16 + 88) = *(_QWORD *)(v17 + 96);
          *(_OWORD *)(v16 + 96) = *(_OWORD *)(v17 + 104);
          v18 = *(_OWORD *)(v17 + 120);
          v19 = *(_OWORD *)(v17 + 136);
          v20 = *(_OWORD *)(v17 + 152);
          *(_QWORD *)(v16 + 160) = *(_QWORD *)(v17 + 168);
          *(_OWORD *)(v16 + 128) = v19;
          *(_OWORD *)(v16 + 144) = v20;
          *(_OWORD *)(v16 + 112) = v18;
          *(_QWORD *)(*a3 + 184 * v12 + 176) = 0;
          v21 = v11[5];
          v23 = *(_QWORD *)(v21 + 176);
          v22 = *(_QWORD *)(v21 + 184);
          if (v23 == v22)
          {
            *(_QWORD *)(*a3 + 184 * v12 + 168) = 0;
          }
          else
          {
            v24 = v22 - v23 - 12;
            if (v24 >= 0x60)
            {
              v27 = v24 / 0xC + 1;
              v28 = v27 & 7;
              if ((v27 & 7) == 0)
                v28 = 8;
              v29 = v27 - v28;
              v26 = v23 + 12 * v29;
              v30 = (const float *)(v23 + 56);
              v31 = 0uLL;
              v32 = 0uLL;
              v33 = 0uLL;
              v34 = 0uLL;
              do
              {
                v35 = v30 - 12;
                v36 = (unsigned __int128)vld3q_f32(v35);
                v37 = (unsigned __int128)vld3q_f32(v30);
                v38 = vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v36, v14));
                v39.i64[0] = v38.u32[0];
                v39.i64[1] = v38.u32[1];
                v40 = (int64x2_t)vandq_s8(v39, v15);
                v39.i64[0] = v38.u32[2];
                v39.i64[1] = v38.u32[3];
                v41 = (int64x2_t)vandq_s8(v39, v15);
                v42 = vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v37, v14));
                v39.i64[0] = v42.u32[0];
                v39.i64[1] = v42.u32[1];
                v43 = (int64x2_t)vandq_s8(v39, v15);
                v39.i64[0] = v42.u32[2];
                v39.i64[1] = v42.u32[3];
                v32 = vaddq_s64(v32, v41);
                v31 = vaddq_s64(v31, v40);
                v34 = vaddq_s64(v34, (int64x2_t)vandq_s8(v39, v15));
                v33 = vaddq_s64(v33, v43);
                v30 += 24;
                v29 -= 8;
              }
              while (v29);
              v25 = vaddvq_s64(vaddq_s64(vaddq_s64(v33, v31), vaddq_s64(v34, v32)));
            }
            else
            {
              v25 = 0;
              v26 = v23;
            }
            do
            {
              if (*(_DWORD *)(v26 + 8) != -1)
                ++v25;
              v26 += 12;
            }
            while (v26 != v22);
            v44 = *a3;
            *(_QWORD *)(*a3 + 184 * v12 + 168) = v25;
            if (v25)
            {
              v45 = v25 >> 62 ? -1 : 4 * v25;
              v46 = operator new[](v45, v13);
              v15 = v62;
              v14.i64[0] = -1;
              v14.i64[1] = -1;
              *(_QWORD *)(v44 + 184 * v12 + 176) = v46;
              v47 = v11[5];
              v48 = *(_QWORD *)(v47 + 176);
              v49 = *(_QWORD *)(v47 + 184);
              if (v48 != v49)
              {
                v50 = 0;
                do
                {
                  v51 = *(_DWORD *)(v48 + 8);
                  if (v51 != -1)
                    *(_DWORD *)(*(_QWORD *)(*a3 + 184 * v12 + 176) + 4 * v50++) = v51;
                  v48 += 12;
                }
                while (v48 != v49);
              }
            }
          }
          v52 = (_QWORD *)v11[1];
          if (v52)
          {
            do
            {
              v53 = (_QWORD **)v52;
              v52 = (_QWORD *)*v52;
            }
            while (v52);
          }
          else
          {
            do
            {
              v53 = (_QWORD **)v11[2];
              v54 = *v53 == v11;
              v11 = v53;
            }
            while (!v54);
          }
          ++v12;
          v11 = v53;
        }
        while (v53 != &v65);
      }
      v3 = 0;
      v55 = (_QWORD *)v68;
      if (!(_QWORD)v68)
        goto LABEL_49;
    }
    else
    {
      v3 = 3;
      v55 = (_QWORD *)v68;
      if (!(_QWORD)v68)
      {
LABEL_49:
        v56 = (void *)__p;
        *(_QWORD *)&__p = 0;
        if (v56)
          operator delete(v56);
        sub_20E8D03C0((uint64_t)&v64, v65);
        goto LABEL_52;
      }
    }
    do
    {
      v58 = v55;
      v55 = (_QWORD *)*v55;
      v59 = (std::__shared_weak_count *)v58[4];
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(p_shared_owners);
        while (__stlxr(v61 - 1, p_shared_owners));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      operator delete(v58);
    }
    while (v55);
    goto LABEL_49;
  }
  return v3;
}

void sub_20E95A194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E8FA108((uint64_t)va1);
  sub_20E8E95B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E95A1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E8FB5B8((uint64_t)va1);
  sub_20E8E95B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CV3DKeyframeWithPointsRelease(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  if (!a2)
    return 5;
  v3 = a1;
  if (a1)
  {
    v4 = (_QWORD *)(a2 + 176);
    do
    {
      if (*v4)
        MEMORY[0x212BC6368](*v4, 0x1000C8052888210);
      v4 += 23;
      --v3;
    }
    while (v3);
  }
  MEMORY[0x212BC6368](a2, 0x1010C80836AB11DLL);
  return 0;
}

uint64_t CV3DVIOAlignMaps(const __CFData *a1, const __CFData *a2, __CFData *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  _QWORD *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31[13];
  uint64_t v32[13];
  std::__shared_weak_count **v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;

  sub_20E8E8A78(v32);
  sub_20E8E8A78(v31);
  v33 = &v34;
  v34 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v35 = 0;
  v40 = 0;
  v41 = 3;
  v6 = sub_20E9DA7E0(a1, (uint64_t)&v33);
  if (v6 <= 1)
    sub_20FCD9BAC(&v33, v32);
  sub_20E8FB5B8((uint64_t)&v33);
  if (v6)
  {
    if (v6 != 1)
    {
      if (v6 == 2)
      {
LABEL_6:
        v7 = 19;
        goto LABEL_14;
      }
LABEL_12:
      v7 = 1;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v33 = &v34;
  v34 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v35 = 0;
  v40 = 0;
  v41 = 3;
  v8 = sub_20E9DA7E0(a2, (uint64_t)&v33);
  if (v8 <= 1)
    sub_20FCD9BAC(&v33, v31);
  sub_20E8FB5B8((uint64_t)&v33);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 == 2)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_13:
    v7 = 10;
    goto LABEL_14;
  }
  v10 = operator new(0x80uLL);
  v10[1] = 0;
  v11 = v10 + 1;
  v10[2] = 0;
  *v10 = &off_24C9B1908;
  sub_20E8E8A78(v10 + 3);
  v33 = (std::__shared_weak_count **)(v10 + 3);
  v34 = (std::__shared_weak_count *)v10;
  v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1908;
  sub_20E8E8A78((uint64_t *)&v12[1]);
  v29 = &v12[1].__vftable;
  v30 = v12;
  sub_20E95A628(v10 + 3, (uint64_t)v32);
  sub_20E95A628((uint64_t *)&v12[1], (uint64_t)v31);
  v27 = v10 + 3;
  v28 = (std::__shared_weak_count *)v10;
  do
    v14 = __ldxr(v11);
  while (__stxr(v14 + 1, v11));
  v26[0] = v12 + 1;
  v26[1] = v12;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v7 = sub_20E95AA6C((uint64_t)&v27, (uint64_t)v26);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!(_DWORD)v7)
    sub_20E9DAB34(a3, v29);
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_14:
  sub_20E8E95B0(v31);
  sub_20E8E95B0(v32);
  return v7;
}

void sub_20E95A548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_20E86665C((uint64_t)&a14);
  sub_20E86665C(v29 - 168);
  sub_20E8E95B0(&a16);
  sub_20E8E95B0(&a29);
  _Unwind_Resume(a1);
}

void sub_20E95A5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count *v29;
  void *v31;

  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v31);
  sub_20E8E95B0(&a16);
  sub_20E8E95B0(&a29);
  _Unwind_Resume(a1);
}

void sub_20E95A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_20E8E95B0(&a16);
  sub_20E8E95B0(&a29);
  _Unwind_Resume(a1);
}

void sub_20E95A5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_20E8FB5B8(v29 - 168);
  sub_20E8E95B0(&a16);
  sub_20E8E95B0(&a29);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E95A628(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    sub_20E8E922C((uint64_t)a1, v5);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v7 + 80);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    sub_20E8E90DC(v7 + 24);
    sub_20E8E91A4(v7, *(_QWORD **)(v7 + 8));
    MEMORY[0x212BC6398](v7, 0x10A0C40F3FF88D7);
  }
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v12 = a1[2];
  a1[2] = v11;
  if (v12)
  {
    if (*(_QWORD *)(v12 + 24))
    {
      v13 = 0;
      v14 = (_QWORD *)(v12 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v12 + v13) & 0x80000000) == 0)
        {
          v15 = *(std::__shared_weak_count **)(*v14 + 32 * v13 + 24);
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        ++v13;
      }
      while (v13 != *(_QWORD *)(v12 + 24));
      operator delete(*(void **)v12);
      *(_QWORD *)v12 = &unk_2102DAFF0;
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v12, 0x10A0C40EE0660CCLL);
  }
  v18 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v19 = a1[3];
  a1[3] = v18;
  if (v19)
  {
    if (*(_QWORD *)(v19 + 24))
    {
      v20 = 0;
      v21 = (_QWORD *)(v19 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v19 + v20) & 0x80000000) == 0)
        {
          v22 = *(std::__shared_weak_count **)(*v21 + 32 * v20 + 24);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        ++v20;
      }
      while (v20 != *(_QWORD *)(v19 + 24));
      operator delete(*(void **)v19);
      *(_QWORD *)v19 = &unk_2102DAFF0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v19, 0x10A0C40EE0660CCLL);
  }
  v25 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v26 = a1[4];
  a1[4] = v25;
  if (v26)
  {
    if (*(_QWORD *)(v26 + 24))
    {
      v27 = 0;
      v28 = (_QWORD *)(v26 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v26 + v27) & 0x80000000) == 0)
        {
          v29 = *(std::__shared_weak_count **)(*v28 + 32 * v27 + 24);
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        ++v27;
      }
      while (v27 != *(_QWORD *)(v26 + 24));
      operator delete(*(void **)v26);
      *(_QWORD *)v26 = &unk_2102DAFF0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v26 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v26, 0x10A0C40EE0660CCLL);
  }
  v32 = (void **)(a1 + 5);
  v33 = a1[5];
  if (v33)
  {
    v34 = a1[6];
    v35 = (void *)a1[5];
    if (v34 != v33)
    {
      do
      {
        v36 = *(std::__shared_weak_count **)(v34 - 8);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 16;
      }
      while (v34 != v33);
      v35 = *v32;
    }
    a1[6] = v33;
    operator delete(v35);
    *v32 = 0;
    a1[6] = 0;
    a1[7] = 0;
  }
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v39 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v40 = a1[8];
  a1[8] = v39;
  if (v40)
    MEMORY[0x212BC6398](v40, 0x1000C40FDACBBE0);
  v41 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v42 = a1[9];
  a1[9] = v41;
  if (v42)
  {
    v43 = *(void **)(v42 + 48);
    if (v43)
    {
      *(_QWORD *)(v42 + 56) = v43;
      operator delete(v43);
    }
    v44 = *(void **)v42;
    if (*(_QWORD *)v42)
    {
      *(_QWORD *)(v42 + 8) = v44;
      operator delete(v44);
    }
    MEMORY[0x212BC6398](v42, 0x1030C40F7208886);
  }
  v45 = (void *)a1[10];
  if (v45)
  {
    a1[11] = (uint64_t)v45;
    operator delete(v45);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

uint64_t sub_20E95AA6C(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  float64_t v5;
  unint64_t *v6;
  unint64_t v7;
  float64_t v8;
  unint64_t *v9;
  unint64_t v10;
  float64_t v11;
  unint64_t *v12;
  unint64_t v13;
  float64_t v14;
  unint64_t *v15;
  unint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  float64_t v45;
  unint64_t *v46;
  unint64_t v47;
  float64x2_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v58;
  double v65;
  double v66;
  double v67;
  double v69;
  __double2 v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double v88;
  double v89;
  double cosval;
  double v91;
  __double2 v92;
  float64x2_t v93;
  float64_t v94;
  float64_t v95;
  float64_t v96;
  float64_t v97;
  float64x2_t v98;
  float64_t v99;
  float64_t v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  uint64_t v122;
  float64_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  float64_t v142;
  float64_t v143;
  double v144;
  float64_t v145;
  float64_t v146;
  double v147;
  float64_t v148;
  float64_t v149;
  float64x2_t v150[3];
  float64x2_t v151;
  __int128 v152;
  float64x2_t v153;
  __int128 v154;
  float64x2_t v155;
  __int128 v156;
  float64x2_t v157;
  __int128 v158;
  __int128 v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  char v170;
  double *v171[2];
  float64x2_t *v172;
  std::__shared_weak_count *v173;

  v5 = *(double *)(a1 + 8);
  v151.f64[0] = *(float64_t *)a1;
  v151.f64[1] = v5;
  if (v5 != 0.0)
  {
    v6 = (unint64_t *)(*(_QWORD *)&v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(double *)(a2 + 8);
  v150[0].f64[0] = *(float64_t *)a2;
  v150[0].f64[1] = v8;
  if (v8 != 0.0)
  {
    v9 = (unint64_t *)(*(_QWORD *)&v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_20E9DDFFC(&v151, v150, (uint64_t)&v159);
  v11 = v150[0].f64[1];
  if (!*(_QWORD *)&v150[0].f64[1])
    goto LABEL_11;
  v12 = (unint64_t *)(*(_QWORD *)&v150[0].f64[1] + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    (*(void (**)(float64_t))(**(_QWORD **)&v11 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v11));
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v11);
    v14 = v151.f64[1];
    if (!*(_QWORD *)&v151.f64[1])
      goto LABEL_15;
  }
  else
  {
LABEL_11:
    v14 = v151.f64[1];
    if (!*(_QWORD *)&v151.f64[1])
      goto LABEL_15;
  }
  v15 = (unint64_t *)(*(_QWORD *)&v14 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_15:
    if ((sub_20EDB986C() & 1) != 0)
      goto LABEL_16;
LABEL_21:
    v27 = *(double *)(a2 + 8);
    v150[0].f64[0] = *(float64_t *)a2;
    v150[0].f64[1] = v27;
    if (v27 != 0.0)
    {
      v28 = (unint64_t *)(*(_QWORD *)&v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *(std::__shared_weak_count **)(a1 + 8);
    v172 = *(float64x2_t **)a1;
    v173 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    sub_20E9DDFFC(v150, (_QWORD **)&v172, (uint64_t)&v151);
    v37 = v151.f64[1];
    v26.f64[0] = v151.f64[0];
    v38 = *((double *)&v152 + 1);
    *(_QWORD *)&v2.f64[0] = v152;
    v21 = v153.f64[1];
    v17.f64[0] = v153.f64[0];
    v39 = *((double *)&v154 + 1);
    v23 = *(double *)&v154;
    v20 = v155.f64[1];
    v18.f64[0] = v155.f64[0];
    v40 = *((double *)&v156 + 1);
    v24 = *(double *)&v156;
    v41 = LOBYTE(v157.f64[0]);
    v42 = v173;
    if (!v173)
      goto LABEL_31;
    v43 = (unint64_t *)&v173->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      v145 = v17.f64[0];
      v148 = v26.f64[0];
      v142 = v18.f64[0];
      v133 = v21;
      v136 = v20;
      v130 = v37;
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      v37 = v130;
      v21 = v133;
      v20 = v136;
      v18.f64[0] = v142;
      v17.f64[0] = v145;
      v26.f64[0] = v148;
      v45 = v150[0].f64[1];
      if (!*(_QWORD *)&v150[0].f64[1])
        goto LABEL_35;
    }
    else
    {
LABEL_31:
      v45 = v150[0].f64[1];
      if (!*(_QWORD *)&v150[0].f64[1])
        goto LABEL_35;
    }
    v46 = (unint64_t *)(*(_QWORD *)&v45 + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      v146 = v17.f64[0];
      v149 = v26.f64[0];
      v143 = v18.f64[0];
      v134 = v21;
      v137 = v20;
      v131 = v37;
      (*(void (**)(float64_t))(**(_QWORD **)&v45 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v45));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v45);
      v37 = v131;
      v21 = v134;
      v20 = v137;
      v18.f64[0] = v143;
      v17.f64[0] = v146;
      v26.f64[0] = v149;
      if (v41)
      {
LABEL_36:
        v19.f64[0] = -(v26.f64[0] * v38 + v17.f64[0] * v39 + v18.f64[0] * v40);
        v22 = -(v37 * v38 + v21 * v39 + v20 * v40);
        v25.f64[0] = -(v2.f64[0] * v38 + v23 * v39 + v24 * v40);
        if (!v170)
        {
          v26.f64[1] = v37;
          goto LABEL_54;
        }
        v36.f64[0] = v166;
        v33.f64[1] = v162;
        v34.f64[1] = v163;
        v35.f64[1] = v164;
        v26.f64[1] = v37;
        v17.f64[1] = v21;
        v18.f64[1] = v20;
        v19.f64[1] = -(v37 * v38 + v21 * v39 + v20 * v40);
        v48 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v26, v33, 1), v17, v34, 1), v18, v35, 1);
        v49 = v159;
        v132 = v164;
        v135 = v160;
        *(double *)&v50 = v2.f64[0] * *(double *)&v159 + v23 * *((double *)&v159 + 1) + v24 * v160;
        v128 = v162;
        v129 = v163;
        *(double *)&v51 = v2.f64[0] * v162 + v23 * v163 + v24 * v164;
        v141 = v166;
        v144 = v167;
        v139 = v165;
        v140 = v168;
        *(double *)&v52 = vmulq_f64(v2, v36).f64[0] + v23 * v167 + v24 * v168;
        v151 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v26, *(double *)&v159), v17, *((double *)&v159 + 1)), v18, v160);
        v152 = v50;
        v153 = v48;
        v154 = v51;
        v155 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v26, v166), v17, v167), v18, v168);
        v156 = v52;
        v53 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v151, v161), v48, v165), v155, v169);
        v138 = v161;
        v48.f64[0] = *(double *)&v50 * v161 + *(double *)&v51 * v165 + *(double *)&v52 * v169;
        v157 = vsubq_f64(v19, v53);
        *((_QWORD *)&v158 + 1) = 0x3FF0000000000000;
        *(_QWORD *)&v158 = *(_OWORD *)&vsubq_f64(v25, v48);
        v147 = v169;
        memset(v150, 0, sizeof(v150));
        v172 = &v151;
        v173 = 0;
        v171[0] = (double *)v150;
        v171[1] = 0;
        sub_20E95B988(&v172, v171);
        v56.f64[0] = v150[1].f64[0];
        _Q19 = v150[0];
        v58 = (float64x2_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL);
        _Q0 = vmulq_f64(_Q19, _Q19);
        _Q1.f64[0] = v150[0].f64[1];
        __asm { FMLA            D0, D1, V19.D[1] }
        v65 = _Q0.f64[0] + v56.f64[0] * v56.f64[0];
        if (v65 >= 0.0000002635)
        {
          v69 = sqrt(v65);
          v125 = v58;
          v127 = v150[1].f64[0];
          v124 = v150[0];
          v70 = __sincos_stret(v69);
          _Q19 = v124;
          v58 = v125;
          v56.f64[0] = v127;
          v66 = v70.__sinval / v69;
          _Q0.f64[0] = 1.0 / v65 * (1.0 - v70.__cosval);
          _Q1.f64[0] = 1.0 / v65 * (1.0 - v70.__sinval / v69);
          if (v65 >= 2.775e-15)
          {
LABEL_39:
            v67 = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v66;
            _Q0.f64[0] = (_Q0.f64[0] + v66 * -0.5) / (v65 * _Q0.f64[0]);
            if (v65 <= 9.0)
              _Q0.f64[0] = v67;
            goto LABEL_50;
          }
        }
        else
        {
          _Q0.f64[0] = 0.5 - v65 * (v65 / -720.0 + 0.0416666667);
          _Q1.f64[0] = 0.166666667 - v65 * (v65 / -5040.0 + 0.00833333333);
          v66 = 1.0 - v65 * _Q1.f64[0];
          if (v65 >= 2.775e-15)
            goto LABEL_39;
        }
        _Q0.f64[0] = v65 * 0.0000330687831 + v65 * 0.00138888889 + 0.0833333333;
LABEL_50:
        *(_QWORD *)&_Q1.f64[0] = v158;
        v78.f64[0] = v58.f64[0];
        v78.f64[1] = v56.f64[0];
        *(_QWORD *)&v71.f64[0] = v158;
        v71.f64[1] = v157.f64[0];
        v56.f64[1] = _Q19.f64[0];
        v72 = (float64x2_t)vextq_s8((int8x16_t)v157, (int8x16_t)_Q1, 8uLL);
        v73 = vsubq_f64(vmulq_laneq_f64(_Q19, v157, 1), vmulq_f64(v58, v157));
        __asm { FMOV            V7.2D, #-0.5 }
        v75 = vaddq_f64(_Q1, vmulq_f64(v73, _Q7));
        _Q4 = vsubq_f64(vmulq_f64(v78, v71), vmulq_f64(v56, v72));
        v77 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)v73, 8uLL);
        v73.f64[1] = _Q4.f64[0];
        *(float64x2_t *)((char *)&v150[1] + 8) = vaddq_f64(vaddq_f64(v157, vmulq_f64(_Q4, _Q7)), vmulq_n_f64(vsubq_f64(vmulq_f64(v78, v73), vmulq_f64(v56, v77)), _Q0.f64[0]));
        *(_QWORD *)&v150[2].f64[1] = *(_OWORD *)&vaddq_f64(v75, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q19, _Q4, 1), vmulq_f64(v58, _Q4))));
        _Q0.f64[1] = v150[2].f64[1];
        v78.f64[1] = v150[0].f64[1];
        __asm { FMOV            V3.2D, #0.5 }
        _Q23 = (int8x16_t)vmulq_f64(v150[0], _Q3);
        v81 = (float64x2_t)vextq_s8(_Q23, _Q23, 8uLL);
        v82 = vmulq_f64(v150[2], _Q3);
        v83 = vmulq_f64(v150[1], _Q3);
        v54.f64[0] = v82.f64[1];
        v55.f64[0] = v83.f64[1];
        v84.f64[1] = 1.0;
        _Q19.f64[1] = 0.0;
        v85.f64[1] = 0.0;
        v86.f64[1] = 0.0;
        *(_QWORD *)&_Q0.f64[0] = _Q23.i64[1];
        __asm { FMLA            D4, D0, V23.D[1] }
        v88 = vmlad_n_f64(_Q4.f64[0], v83.f64[0], v83.f64[0]);
        if (v88 >= 0.0000002635)
        {
          v91 = sqrt(v88);
          v126 = v81;
          v123 = v83.f64[0];
          v121 = v54;
          v122 = _Q23.i64[0];
          v119 = v55;
          v120 = v82;
          v118 = v88;
          v92 = __sincos_stret(v91);
          cosval = v92.__cosval;
          v86.f64[1] = 0.0;
          v85.f64[1] = 0.0;
          v55 = v119;
          v82 = v120;
          v54 = v121;
          _Q23.i64[0] = v122;
          v83.f64[0] = v123;
          v84.f64[1] = 1.0;
          v81 = v126;
          _Q19.f64[1] = 0.0;
          v89 = v92.__sinval / v91;
          _Q0.f64[0] = 1.0 / v118 * (1.0 - v92.__cosval);
          v78.f64[0] = 1.0 / v118 * (1.0 - v92.__sinval / v91);
        }
        else
        {
          _Q0.f64[0] = 0.5 - v88 * (v88 / -720.0 + 0.0416666667);
          v78.f64[0] = 0.166666667 - v88 * (v88 / -5040.0 + 0.00833333333);
          v89 = 1.0 - v88 * v78.f64[0];
          cosval = 1.0 - v88 * _Q0.f64[0];
        }
        v93.f64[0] = *(double *)_Q23.i64 * (*(double *)_Q23.i64 * _Q0.f64[0]) + cosval;
        v94 = v81.f64[0] * (v81.f64[0] * _Q0.f64[0]) + cosval;
        v95 = v83.f64[0] * (v83.f64[0] * _Q0.f64[0]) + cosval;
        v96 = v81.f64[0] * (*(double *)_Q23.i64 * _Q0.f64[0]);
        v93.f64[1] = v96 + v83.f64[0] * v89;
        v97 = v83.f64[0] * (*(double *)_Q23.i64 * _Q0.f64[0]);
        v98.f64[0] = v96 - v83.f64[0] * v89;
        v99 = v97 + v81.f64[0] * v89;
        v86.f64[0] = v97 - v81.f64[0] * v89;
        v100 = v83.f64[0] * (v81.f64[0] * _Q0.f64[0]);
        v101 = *(double *)_Q23.i64 * v89;
        v98.f64[1] = v94;
        v85.f64[0] = v100 + v101;
        v25.f64[1] = v100 - v101;
        _Q19.f64[0] = v95;
        v102 = vmlaq_n_f64(vmulq_n_f64(v93, *(double *)&v49), v98, v128);
        v103 = vmlaq_n_f64(vmulq_n_f64(v93, *((double *)&v49 + 1)), v98, v129);
        v104 = vmlaq_n_f64(vmulq_n_f64(v93, v135), v98, v132);
        *(_QWORD *)&v105.f64[0] = _Q23.i64[0];
        v105.f64[1] = v81.f64[0];
        v106 = vmlaq_n_f64(vmulq_n_f64(v93, v138), v98, v139);
        v98.f64[0] = v81.f64[0];
        v98.f64[1] = v83.f64[0];
        v107.f64[0] = v54.f64[0];
        v107.f64[1] = v55.f64[0];
        *(_QWORD *)&v83.f64[1] = _Q23.i64[0];
        v108.f64[0] = v82.f64[0];
        v108.f64[1] = v54.f64[0];
        v109 = vsubq_f64(vmulq_f64(v98, v107), vmulq_f64(v83, v108));
        v108.f64[0] = v55.f64[0];
        v108.f64[1] = v82.f64[0];
        v110 = vsubq_f64(vmulq_f64(v105, v82), vmulq_f64(v81, v55));
        v111 = vaddq_f64(v108, vmulq_n_f64(v109, _Q0.f64[0]));
        v112 = vaddq_f64(v54, vmulq_f64(v110, _Q0));
        v113 = (float64x2_t)vextq_s8((int8x16_t)v109, (int8x16_t)v110, 8uLL);
        v110.f64[1] = v109.f64[0];
        v114 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v105, v109, 1), vmulq_f64(v81, v109)), v78);
        v115 = vaddq_f64(v111, vmulq_n_f64(vsubq_f64(vmulq_f64(v98, v110), vmulq_f64(v83, v113)), v78.f64[0]));
        v116 = vaddq_f64(v112, v114);
        v84.f64[0] = v116.f64[0];
        *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, *(double *)&v49), v85, v128), _Q19, v141), (float64x2_t)0, v84);
        *(_QWORD *)&v23 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, *((double *)&v49 + 1)), v85, v129), _Q19, v144), (float64x2_t)0, v84);
        *(_QWORD *)&v24 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, v135), v85, v132), _Q19, v140), (float64x2_t)0, v84);
        v26 = vmlaq_f64(vmlaq_n_f64(v102, v25, v141), (float64x2_t)0, v115);
        v17 = vmlaq_f64(vmlaq_n_f64(v103, v25, v144), (float64x2_t)0, v115);
        v18 = vmlaq_f64(vmlaq_n_f64(v104, v25, v140), (float64x2_t)0, v115);
        v19 = vaddq_f64(v115, vmlaq_n_f64(v106, v25, v147));
        *(_QWORD *)&v25.f64[0] = *(_OWORD *)&vaddq_f64(v116, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, v138), v85, v139), _Q19, v147));
        v21 = v17.f64[1];
        v20 = v18.f64[1];
        v22 = v19.f64[1];
        goto LABEL_54;
      }
LABEL_45:
      if (v170)
        goto LABEL_17;
      return 16;
    }
LABEL_35:
    if (v41)
      goto LABEL_36;
    goto LABEL_45;
  }
  (*(void (**)(float64_t))(**(_QWORD **)&v14 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v14));
  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v14);
  if ((sub_20EDB986C() & 1) == 0)
    goto LABEL_21;
LABEL_16:
  if (!v170)
    return 16;
LABEL_17:
  v17.f64[0] = *((float64_t *)&v159 + 1);
  *(_QWORD *)&v26.f64[0] = v159;
  v18.f64[0] = v160;
  v19.f64[0] = v161;
  v21 = v163;
  v20 = v164;
  v22 = v165;
  v2.f64[0] = v166;
  v23 = v167;
  v24 = v168;
  v25.f64[0] = v169;
  v26.f64[1] = v162;
LABEL_54:
  v17.f64[1] = v21;
  v18.f64[1] = v20;
  v19.f64[1] = v22;
  __asm { FMOV            V2.2D, #1.0 }
  *(float64_t *)&_Q2 = v25.f64[0];
  v157 = v19;
  v158 = _Q2;
  v155 = v18;
  v156 = *(unint64_t *)&v24;
  v153 = v17;
  v154 = *(unint64_t *)&v23;
  v151 = v26;
  v152 = *(unint64_t *)&v2.f64[0];
  sub_20FCE8D4C((uint64_t)&v151, *(_QWORD **)a2);
  return 0;
}

void sub_20E95B34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  sub_20E86665C(v55 - 96);
  sub_20E86665C((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_20E95B368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_20E86665C((uint64_t)&a55);
  sub_20E86665C((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOMergeMaps(const __CFData *a1, const __CFData *a2, __CFData *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v11[13];
  uint64_t v12[13];
  int8x8_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  sub_20E8E8A78(v12);
  sub_20E8E8A78(v11);
  v13 = (int8x8_t *)&v14;
  v14 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v15 = 0;
  v20 = 0;
  v21 = 3;
  v6 = sub_20E9DA7E0(a1, (uint64_t)&v13);
  if (v6 <= 1)
    sub_20FCD9BAC(&v13, v12);
  sub_20E8FB5B8((uint64_t)&v13);
  if (!v6)
  {
    v13 = (int8x8_t *)&v14;
    v14 = 0;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v15 = 0;
    v20 = 0;
    v21 = 3;
    v8 = sub_20E9DA7E0(a2, (uint64_t)&v13);
    if (v8 <= 1)
      sub_20FCD9BAC(&v13, v11);
    v9 = (uint64_t *)sub_20E8FB5B8((uint64_t)&v13);
    if (!v8)
    {
      sub_20E8E8A78(v9);
      sub_20FCE6744(v12, v11, &v13);
      sub_20E9DAB34(a3, &v13);
      sub_20E8E95B0((uint64_t *)&v13);
      v7 = 0;
      goto LABEL_14;
    }
    if (v8 != 1)
    {
      if (v8 == 2)
        goto LABEL_6;
LABEL_12:
      v7 = 1;
      goto LABEL_14;
    }
LABEL_13:
    v7 = 10;
    goto LABEL_14;
  }
  if (v6 == 1)
    goto LABEL_13;
  if (v6 != 2)
    goto LABEL_12;
LABEL_6:
  v7 = 19;
LABEL_14:
  sub_20E8E95B0(v11);
  sub_20E8E95B0(v12);
  return v7;
}

void sub_20E95B508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20E8E95B0((uint64_t *)va);
  sub_20E8E95B0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20E95B524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E8E95B0((uint64_t *)(v2 - 152));
  sub_20E8E95B0((uint64_t *)va);
  sub_20E8E95B0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20E95B548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E8FB5B8(v2 - 152);
  sub_20E8E95B0((uint64_t *)va);
  sub_20E8E95B0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t CV3DVIOAlignAndMergeMaps(const __CFData *a1, const __CFData *a2, __CFData *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  _QWORD *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  uint64_t v33[13];
  uint64_t v34[13];
  int8x8_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;

  sub_20E8E8A78(v34);
  sub_20E8E8A78(v33);
  v35 = (int8x8_t *)&v36;
  v36 = 0;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v37 = 0;
  v42 = 0;
  v43 = 3;
  v6 = sub_20E9DA7E0(a1, (uint64_t)&v35);
  if (v6 <= 1)
    sub_20FCD9BAC(&v35, v34);
  sub_20E8FB5B8((uint64_t)&v35);
  if (v6)
  {
    if (v6 != 1)
    {
      if (v6 == 2)
      {
LABEL_6:
        v7 = 19;
        goto LABEL_14;
      }
LABEL_12:
      v7 = 1;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v35 = (int8x8_t *)&v36;
  v36 = 0;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v37 = 0;
  v42 = 0;
  v43 = 3;
  v8 = sub_20E9DA7E0(a2, (uint64_t)&v35);
  if (v8 <= 1)
    sub_20FCD9BAC(&v35, v33);
  sub_20E8FB5B8((uint64_t)&v35);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 == 2)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_13:
    v7 = 10;
    goto LABEL_14;
  }
  v10 = operator new(0x80uLL);
  v10[1] = 0;
  v11 = v10 + 1;
  v10[2] = 0;
  *v10 = &off_24C9B1908;
  sub_20E8E8A78(v10 + 3);
  v31 = v10 + 3;
  v32 = (std::__shared_weak_count *)v10;
  v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1908;
  sub_20E8E8A78((uint64_t *)&v12[1]);
  v29 = &v12[1].__vftable;
  v30 = v12;
  sub_20E95A628(v10 + 3, (uint64_t)v34);
  sub_20E95A628((uint64_t *)&v12[1], (uint64_t)v33);
  v27 = v10 + 3;
  v28 = (std::__shared_weak_count *)v10;
  do
    v14 = __ldxr(v11);
  while (__stxr(v14 + 1, v11));
  v26[0] = v12 + 1;
  v26[1] = v12;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v7 = sub_20E95AA6C((uint64_t)&v27, (uint64_t)v26);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!(_DWORD)v7)
  {
    sub_20E8E8A78((uint64_t *)&v35);
    sub_20FCE6744(v31, v29, &v35);
    sub_20E9DAB34(a3, &v35);
    sub_20E8E95B0((uint64_t *)&v35);
  }
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_14:
  sub_20E8E95B0(v33);
  sub_20E8E95B0(v34);
  return v7;
}

void sub_20E95B898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_20E86665C((uint64_t)&a14);
  sub_20E86665C((uint64_t)&a16);
  sub_20E8E95B0(&a18);
  sub_20E8E95B0(&a31);
  _Unwind_Resume(a1);
}

void sub_20E95B908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v31;
  void *v33;

  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v33);
  sub_20E8E95B0(&a18);
  sub_20E8E95B0(&a31);
  _Unwind_Resume(a1);
}

void sub_20E95B930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_20E8E95B0(&a18);
  sub_20E8E95B0(&a31);
  _Unwind_Resume(a1);
}

void sub_20E95B94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_20E8FB5B8(v31 - 168);
  sub_20E8E95B0(&a18);
  sub_20E8E95B0(&a31);
  _Unwind_Resume(a1);
}

void sub_20E95B988(float64x2_t **a1, double **a2)
{
  float64x2_t *v2;
  double v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;

  v2 = *a1;
  v3 = ((*a1)[3].f64[0] - (*a1)[4].f64[1]) * 0.5;
  v4 = *a2;
  *v4 = v3;
  v5 = (v2[4].f64[0] - v2[1].f64[0]) * 0.5;
  v4[1] = v5;
  v6 = (v2->f64[1] - v2[2].f64[0]) * 0.5;
  v4[2] = v6;
  v7 = v2->f64[0];
  v8 = v2[2].f64[1];
  v9 = v2[5].f64[0];
  v10 = -1.0;
  v11 = (v2->f64[0] + v8 + v9 + -1.0) * 0.5;
  v12 = v3 * v3 + v5 * v5 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001)
      v13 = 0;
    if (v11 > 0.99 || v13)
    {
      v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
      *v4 = v3 * v15;
      v4[1] = v5 * v15;
LABEL_12:
      v4[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      v15 = acos(v11) / sqrt(v12);
      *v4 = v3 * v15;
      v4[1] = v5 * v15;
      goto LABEL_12;
    }
    v10 = (v2->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  v16 = asin(sqrt(v12));
  v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  v18 = (v7 - v10) * v17;
  v19 = (v8 - v10) * v17;
  v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      v32 = sqrt(v20);
      if (v6 < 0.0)
        v32 = -v32;
      v4[2] = v32;
      v33.f64[0] = v2[1].f64[0];
      v33.f64[1] = v2[3].f64[0];
      *(float64x2_t *)v4 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(v2[4], v33), v25), 1.0 / v32);
    }
    else
    {
      v26 = sqrt(v19);
      if (v5 < 0.0)
        v26 = -v26;
      v4[1] = v26;
      v27 = 1.0 / v26;
      v28 = v2[4].f64[1] + v2[3].f64[0];
      *v4 = v27 * (v25 * (v2[2].f64[0] + v2->f64[1]));
      v4[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    v21 = v17 * 0.5;
    v22 = v21 * (v2[4].f64[0] + v2[1].f64[0]);
    if (v18 <= v20)
    {
      v29 = sqrt(v20);
      if (v6 < 0.0)
        v29 = -v29;
      v4[2] = v29;
      v30 = 1.0 / v29;
      v31 = v30 * (v21 * (v2[4].f64[1] + v2[3].f64[0]));
      *v4 = v30 * v22;
      v4[1] = v31;
    }
    else
    {
      v23 = sqrt(v18);
      if (v3 < 0.0)
        v23 = -v23;
      *v4 = v23;
      v24 = 1.0 / v23;
      v4[1] = v24 * (v21 * (v2[2].f64[0] + v2->f64[1]));
      v4[2] = v24 * v22;
    }
  }
}

void sub_20E95BC98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E95BCA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20E95BCD8(uint64_t a1)
{
  return sub_20E8E95B0((uint64_t *)(a1 + 24));
}

void sub_20E95BCE4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;
  __CFData *Mutable;
  std::__shared_weak_count *v8;
  UInt8 *MutableBytePtr;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  CFMutableDataRef theData;
  std::__shared_weak_count *v24;

  if (!*(_BYTE *)(a1 + 72) || (v4 = *(_QWORD *)(a1 + 8), *(_QWORD *)a1 == v4))
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v5 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 5;
  if (v5 != (v4 - *(_QWORD *)a1) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOPoseMetadataUtil.cpp", 82, (uint64_t)"point_cloud.points.size() == point_cloud.point_ids.size()", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_21;
    }
    v5 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 5;
  }
  if (v5 != (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOPoseMetadataUtil.cpp", 83, (uint64_t)"point_cloud.points.size() == point_cloud.vergence_angles.size()", 63, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v5 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 5;
      goto LABEL_9;
    }
LABEL_21:
    abort();
  }
LABEL_9:
  v6 = 40 * (int)v5;
  Mutable = CFDataCreateMutable(0, v6);
  theData = Mutable;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v24 = v8;
  CFDataIncreaseLength(Mutable, v6);
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32) - v10;
  if (v11)
  {
    v12 = v11 >> 5;
    v13 = *(uint64_t **)a1;
    v14 = *(uint64_t **)(a1 + 48);
    if (v12 <= 1)
      v12 = 1;
    v15 = (uint64_t *)(v10 + 16);
    v16 = MutableBytePtr + 16;
    do
    {
      *(v16 - 2) = *(v15 - 2);
      *(v16 - 1) = *(v15 - 1);
      v17 = *v15;
      v15 += 4;
      *v16 = v17;
      v18 = *v13++;
      v16[1] = v18;
      v19 = *v14++;
      v16[2] = v19;
      v16 += 5;
      --v12;
    }
    while (v12);
  }
  sub_20E8E1AA4(a2, (CFTypeRef *)&theData);
  v20 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20E95BEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95BF10(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E95BF28(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E95BF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E95BF50(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20E95BFA0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  CFIndex v8;
  __CFData *Mutable;
  std::__shared_weak_count *v10;
  UInt8 *MutableBytePtr;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  CFMutableDataRef theData;
  std::__shared_weak_count *v24;

  if (!*(_BYTE *)(a1 + 72) || (v5 = *(uint64_t **)a1, v4 = *(_QWORD *)(a1 + 8), *(_QWORD *)a1 == v4))
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  if ((v6 & 0x20) != 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOPoseMetadataUtil.cpp", 139, (uint64_t)"line_cloud.lines.size() % 2 == 0", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_23;
    }
    v5 = *(uint64_t **)a1;
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  }
  v7 = v6 >> 5;
  if (v7 >> 1 != (v4 - (uint64_t)v5) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOPoseMetadataUtil.cpp", 140, (uint64_t)"line_cloud.lines.size() / 2 == line_cloud.line_ids.size()", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_23;
    }
    v7 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 5;
  }
  if (v7 != (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/CV3DVIOPoseMetadataUtil.cpp", 141, (uint64_t)"line_cloud.lines.size() == line_cloud.vergence_angles.size()", 60, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_23:
    abort();
  }
  v8 = (int)(72 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  Mutable = CFDataCreateMutable(0, v8);
  theData = Mutable;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v24 = v10;
  CFDataIncreaseLength(Mutable, v8);
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  v12 = *(uint64_t **)a1;
  v13 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v13)
  {
    v14 = v13 >> 3;
    if (v14 <= 1)
      v14 = 1;
    v15 = MutableBytePtr + 32;
    v16 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8);
    do
    {
      *(v15 - 4) = *(v16 - 4);
      *(v15 - 3) = *(v16 - 3);
      *(v15 - 2) = *(v16 - 2);
      *(v15 - 1) = *(v17 - 1);
      *v15 = *v16;
      v15[1] = v16[1];
      v15[2] = v16[2];
      v18 = *v17;
      v17 += 2;
      v15[3] = v18;
      v19 = *v12++;
      v15[4] = v19;
      v15 += 9;
      v16 += 8;
      --v14;
    }
    while (v14);
  }
  sub_20E8E1AA4(a2, (CFTypeRef *)&theData);
  v20 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20E95C228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95C23C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E95C254(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E95C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95C27C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __CFData *Mutable;
  __CFData *v9;
  UInt8 *MutableBytePtr;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  CFMutableDataRef v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  CFAllocatorRef *v48;
  uint64_t v49;
  __CFData *v50;
  __CFData *v51;
  uint64_t *v52;
  uint64_t *v53;
  __CFArray *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  __CFData *v62;
  __CFData *v63;
  CFUUIDBytes *v64;
  CFUUIDBytes *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __CFData *v72;
  __CFData *v73;
  UInt8 *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  __CFData *v100;
  __CFData *v101;
  UInt8 *v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __CFData *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  CFIndex v111;
  __CFData *v112;
  __CFData *v113;
  UInt8 *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  UInt8 *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __int128 v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  __CFData *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  __int128 v133;
  float64x2_t v137;
  CFMutableDictionaryRef v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  CFMutableDataRef v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *value[2];
  double v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  CFMutableDataRef theData[2];
  _OWORD v174[2];
  __int128 v175;
  __int128 v176[2];
  _OWORD v177[5];
  uint64_t v178;
  uint64_t v179;
  char v180;
  char v181;
  char v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  CFMutableDictionaryRef v187[4];

  theData[1] = 0;
  *(_QWORD *)&v174[0] = 0;
  theData[0] = (CFMutableDataRef)&theData[1];
  sub_20EA65D20(theData, value);
  *(_OWORD *)v187 = *(_OWORD *)value;
  sub_20E866BE0((uint64_t)theData, (char *)theData[1]);
  sub_20E912AF8((uint64_t)v187, CFSTR("Timestamp"), (void *)(a1 + 32));
  sub_20E8E223C((uint64_t)v187, CFSTR("VIOInitialized"), (_BYTE *)(a1 + 16));
  v4 = *(_OWORD *)v187;
  if (!v187[1])
    goto LABEL_6;
  v5 = (unint64_t *)((char *)v187[1] + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 - 1, v5));
  if (!v7)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
    if (!(_QWORD)v4)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    if (!(_QWORD)v4)
      goto LABEL_8;
  }
  if (CFDictionaryContainsKey(v187[0], CFSTR("TrackingState")))
    goto LABEL_8;
  LOBYTE(value[0]) = *(_BYTE *)(a1 + 368);
  sub_20EA5DD64((unsigned __int8 *)value, theData);
  v41 = theData[0];
  v40 = (std::__shared_weak_count *)theData[1];
  if (theData[1])
  {
    v42 = (unint64_t *)((char *)theData[1] + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (!v41)
        goto LABEL_56;
      goto LABEL_55;
    }
  }
  if (v41)
LABEL_55:
    CFDictionaryAddValue(v187[0], CFSTR("TrackingState"), theData[0]);
LABEL_56:
  v45 = (std::__shared_weak_count *)theData[1];
  if (theData[1])
  {
    v46 = (unint64_t *)((char *)theData[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_8:
  sub_20E912C70((uint64_t)v187, CFSTR("NumberReinitializationAttempts"), (int *)(a1 + 20));
  sub_20E912C70((uint64_t)v187, CFSTR("NumberReinitializationRecoveries"), (int *)(a1 + 24));
  Mutable = CFDataCreateMutable(0, 168);
  theData[0] = Mutable;
  v9 = (__CFData *)operator new();
  *(_QWORD *)v9 = &off_24C9AFB50;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = Mutable;
  theData[1] = v9;
  CFDataIncreaseLength(Mutable, 168);
  MutableBytePtr = CFDataGetMutableBytePtr(theData[0]);
  v11 = *(_OWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)MutableBytePtr + 1) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)MutableBytePtr + 2) = v12;
  *(_OWORD *)MutableBytePtr = v11;
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)MutableBytePtr + 5) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)MutableBytePtr + 6) = v15;
  *((_OWORD *)MutableBytePtr + 3) = v13;
  *((_OWORD *)MutableBytePtr + 4) = v14;
  v16 = *(_OWORD *)(a1 + 160);
  v17 = *(_OWORD *)(a1 + 176);
  v18 = *(_OWORD *)(a1 + 192);
  *((_QWORD *)MutableBytePtr + 20) = *(_QWORD *)(a1 + 208);
  *((_OWORD *)MutableBytePtr + 8) = v17;
  *((_OWORD *)MutableBytePtr + 9) = v18;
  *((_OWORD *)MutableBytePtr + 7) = v16;
  sub_20E8E1AA4(&v185, (CFTypeRef *)theData);
  v19 = (std::__shared_weak_count *)theData[1];
  if (theData[1])
  {
    v20 = (unint64_t *)((char *)theData[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_20E8E2528((uint64_t)v187, CFSTR("VIOEngineInternalState"), &v185);
  sub_20F3EA108(a1 + 3840, &v183);
  sub_20E8E2528((uint64_t)v187, CFSTR("CameraSwitchingStatistics"), &v183);
  v22 = *(uint64_t **)(a1 + 776);
  if (v22 == *(uint64_t **)(a1 + 784) || (v23 = *v22, *v22 == v22[1]))
  {
    memset(v177, 0, sizeof(v177));
    v175 = 0u;
    memset(v176, 0, sizeof(v176));
    memset(v174, 0, sizeof(v174));
    *(_OWORD *)theData = 0u;
    v178 = 0;
    v179 = 0x3FF0000000000000;
    v180 = 0;
    v181 = 0;
    v182 = 0;
    sub_20E95D944(value, theData);
    sub_20E8E2528((uint64_t)v187, CFSTR("CameraToIMURotation"), (uint64_t *)value);
    sub_20E95DAC8(&v172, (__int128 *)((char *)v176 + 8));
    sub_20E8E2528((uint64_t)v187, CFSTR("CameraToIMUTranslation"), (uint64_t *)&v172);
    sub_20E912AF8((uint64_t)v187, CFSTR("CameraToIMUTimeoffset"), v177);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
    if (*((_QWORD *)&v172 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v27 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v33 = (unint64_t *)((char *)value[1] + 8);
      do
        v29 = __ldaxr(v33);
      while (__stlxr(v29 - 1, v33));
LABEL_32:
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  else
  {
    sub_20E95D944(theData, (const void *)v23);
    sub_20E8E2528((uint64_t)v187, CFSTR("CameraToIMURotation"), (uint64_t *)theData);
    sub_20E95DAC8(value, (__int128 *)(v23 + 72));
    sub_20E8E2528((uint64_t)v187, CFSTR("CameraToIMUTranslation"), (uint64_t *)value);
    sub_20E912AF8((uint64_t)v187, CFSTR("CameraToIMUTimeoffset"), (void *)(v23 + 96));
    v24 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v25 = (unint64_t *)((char *)value[1] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)theData[1];
    if (theData[1])
    {
      v28 = (unint64_t *)((char *)theData[1] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      goto LABEL_32;
    }
  }
  sub_20E912AF8((uint64_t)v187, CFSTR("HealthEstimate"), (void *)(a1 + 376));
  sub_20E912F5C((uint64_t)v187, CFSTR("HealthNumInliers"), (unsigned int *)(a1 + 392));
  sub_20E912F5C((uint64_t)v187, CFSTR("HealthNumInlierMaps"), (unsigned int *)(a1 + 396));
  if (!*(_BYTE *)(a1 + 624))
    goto LABEL_40;
  if (*(_QWORD *)(a1 + 552) == *(_QWORD *)(a1 + 560))
    goto LABEL_40;
  sub_20E95BCE4(a1 + 552, theData);
  sub_20E8E2528((uint64_t)v187, CFSTR("PointCloud"), (uint64_t *)theData);
  v34 = (std::__shared_weak_count *)theData[1];
  if (!theData[1])
    goto LABEL_40;
  v35 = (unint64_t *)((char *)theData[1] + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (!*(_BYTE *)(a1 + 704))
      goto LABEL_62;
  }
  else
  {
LABEL_40:
    if (!*(_BYTE *)(a1 + 704))
      goto LABEL_62;
  }
  if (*(_QWORD *)(a1 + 632) != *(_QWORD *)(a1 + 640))
  {
    sub_20E95BFA0(a1 + 632, theData);
    sub_20E8E2528((uint64_t)v187, CFSTR("LineCloud"), (uint64_t *)theData);
    v37 = (std::__shared_weak_count *)theData[1];
    if (theData[1])
    {
      v38 = (unint64_t *)((char *)theData[1] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
LABEL_62:
  if (*(_BYTE *)(a1 + 3832))
  {
    sub_20E912AF8((uint64_t)v187, CFSTR("RelocalizationTimestamp"), (void *)(a1 + 3808));
    sub_20E8E223C((uint64_t)v187, CFSTR("RelocalizationIsGlobal"), (_BYTE *)(a1 + 3816));
    sub_20E8E223C((uint64_t)v187, CFSTR("RelocalizationSucceeded"), (_BYTE *)(a1 + 3817));
  }
  sub_20E912C70((uint64_t)v187, CFSTR("MapSize"), (int *)(a1 + 4120));
  sub_20E912C70((uint64_t)v187, CFSTR("MLMapSize"), (int *)(a1 + 4124));
  sub_20E912C70((uint64_t)v187, CFSTR("MapKeyframeQuality"), (int *)(a1 + 768));
  sub_20E8E223C((uint64_t)v187, CFSTR("HealthTrackingMap"), (_BYTE *)(a1 + 400));
  v48 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  v49 = *(_QWORD *)(a1 + 4136) - *(_QWORD *)(a1 + 4128);
  if (v49)
  {
    v50 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0xF0F0F0F0F0F0F0F1 * (v49 >> 3), MEMORY[0x24BDBD690]);
    theData[0] = v50;
    v51 = (__CFData *)operator new();
    *(_QWORD *)v51 = &off_24C9AFE18;
    *((_QWORD *)v51 + 1) = 0;
    *((_QWORD *)v51 + 2) = 0;
    *((_QWORD *)v51 + 3) = v50;
    theData[1] = v51;
    v52 = *(uint64_t **)(a1 + 4128);
    v53 = *(uint64_t **)(a1 + 4136);
    while (v52 != v53)
    {
      v54 = theData[0];
      sub_20F3EA25C(v52, (uint64_t)(v52 + 1), value);
      CFArrayAppendValue(v54, value[0]);
      v55 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v56 = (unint64_t *)((char *)value[1] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v52 += 17;
    }
    sub_20E95DC4C((uint64_t)v187, CFSTR("MapMergeStatsArray"), (uint64_t)theData);
    v58 = (std::__shared_weak_count *)theData[1];
    if (theData[1])
    {
      v59 = (unint64_t *)((char *)theData[1] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  *(_QWORD *)&v172 = v187;
  sub_20E95DEDC((uint64_t *)&v172, (uint64_t *)(a1 + 4296), CFSTR("VIOEngineUpdatedAnchors"));
  sub_20E95DEDC((uint64_t *)&v172, (uint64_t *)(a1 + 4272), CFSTR("VIOPoseMetadataNewAnchors"));
  v61 = *(_QWORD *)(a1 + 4328) - *(_QWORD *)(a1 + 4320);
  if (!v61)
    goto LABEL_91;
  v62 = CFArrayCreateMutable(*v48, 0x4EC4EC4EC4EC4EC5 * (v61 >> 5), MEMORY[0x24BDBD690]);
  theData[0] = v62;
  v63 = (__CFData *)operator new();
  *(_QWORD *)v63 = &off_24C9AFE18;
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 2) = 0;
  *((_QWORD *)v63 + 3) = v62;
  theData[1] = v63;
  v64 = *(CFUUIDBytes **)(a1 + 4320);
  v65 = *(CFUUIDBytes **)(a1 + 4328);
  while (v64 != v65)
  {
    sub_20F3EA008(v64, value);
    CFArrayAppendValue(theData[0], value[0]);
    v66 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v67 = (unint64_t *)((char *)value[1] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v64 += 26;
  }
  sub_20E95DC4C((uint64_t)v187, CFSTR("VIOPoseMetadataRemovedAnchorNames"), (uint64_t)theData);
  v69 = (std::__shared_weak_count *)theData[1];
  if (!theData[1])
    goto LABEL_91;
  v70 = (unint64_t *)((char *)theData[1] + 8);
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    if (!*(_BYTE *)(a1 + 2776))
      goto LABEL_130;
  }
  else
  {
LABEL_91:
    if (!*(_BYTE *)(a1 + 2776))
      goto LABEL_130;
  }
  sub_20E95D944(value, (const void *)(a1 + 800));
  sub_20E8E2528((uint64_t)v187, CFSTR("VIOEngineOldestStateOrientation"), (uint64_t *)value);
  sub_20E95DAC8(&v172, (__int128 *)(a1 + 872));
  sub_20E8E2528((uint64_t)v187, CFSTR("VIOEngineOldestStateGyroBias"), (uint64_t *)&v172);
  sub_20E95DAC8(&v170, (__int128 *)(a1 + 896));
  sub_20E8E2528((uint64_t)v187, CFSTR("VIOEngineOldestStateVelocity"), &v170);
  sub_20E95DAC8(&v168, (__int128 *)(a1 + 920));
  sub_20E8E2528((uint64_t)v187, CFSTR("VIOEngineOldestStateAccelerometerBias"), &v168);
  sub_20E95DAC8(&v166, (__int128 *)(a1 + 944));
  sub_20E8E2528((uint64_t)v187, CFSTR("VIOEngineOldestStatePosition"), &v166);
  sub_20E912AF8((uint64_t)v187, CFSTR("VIOEngineOldestStateTimestamp"), (void *)(a1 + 968));
  v72 = CFDataCreateMutable(0, 1800);
  theData[0] = v72;
  v73 = (__CFData *)operator new();
  *(_QWORD *)v73 = &off_24C9AFB50;
  *((_QWORD *)v73 + 1) = 0;
  *((_QWORD *)v73 + 2) = 0;
  *((_QWORD *)v73 + 3) = v72;
  theData[1] = v73;
  CFDataIncreaseLength(v72, 1800);
  v74 = CFDataGetMutableBytePtr(theData[0]);
  if (!v74
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  memmove(v74, (const void *)(a1 + 976), 0x708uLL);
  sub_20E8E1AA4(&v164, (CFTypeRef *)theData);
  v75 = (std::__shared_weak_count *)theData[1];
  if (theData[1])
  {
    v76 = (unint64_t *)((char *)theData[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  sub_20E8E2528((uint64_t)v187, CFSTR("VIOEngineOldestStateCovaraince"), &v164);
  LODWORD(theData[0]) = 0;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceOrientationOffset"), (int *)theData);
  LODWORD(theData[0]) = 3;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceGyroBiasOffset"), (int *)theData);
  LODWORD(theData[0]) = 6;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceVelocityOffset"), (int *)theData);
  LODWORD(theData[0]) = 9;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceAccelerometerBiasOffset"), (int *)theData);
  LODWORD(theData[0]) = 12;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovariancePositionOffset"), (int *)theData);
  LODWORD(theData[0]) = 3;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceOrientationDof"), (int *)theData);
  LODWORD(theData[0]) = 3;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceGyroBiasDof"), (int *)theData);
  LODWORD(theData[0]) = 3;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceVelocityDof"), (int *)theData);
  LODWORD(theData[0]) = 3;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovarianceAccelerometerBiasDof"), (int *)theData);
  LODWORD(theData[0]) = 3;
  sub_20E912C70((uint64_t)v187, CFSTR("VIOEngineOldestStateCovariancePositionDof"), (int *)theData);
  v78 = v165;
  if (v165)
  {
    p_shared_owners = (unint64_t *)&v165->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v167;
  if (v167)
  {
    v82 = (unint64_t *)&v167->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v169;
  if (v169)
  {
    v85 = (unint64_t *)&v169->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v171;
  if (v171)
  {
    v88 = (unint64_t *)&v171->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v94 = (unint64_t *)((char *)value[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
LABEL_130:
  if (!*(_BYTE *)(a1 + 4264))
    goto LABEL_170;
  v96 = *(_OWORD *)v187;
  if (!v187[1])
    goto LABEL_136;
  v97 = (unint64_t *)((char *)v187[1] + 8);
  do
    v98 = __ldxr(v97);
  while (__stxr(v98 + 1, v97));
  do
    v99 = __ldaxr(v97);
  while (__stlxr(v99 - 1, v97));
  if (!v99)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
    if (!(_QWORD)v96)
      goto LABEL_138;
  }
  else
  {
LABEL_136:
    if (!(_QWORD)v96)
      goto LABEL_138;
  }
  if (!CFDictionaryContainsKey(v187[0], CFSTR("UserSession")))
  {
    sub_20EA5E070((uint64_t *)(a1 + 4176), theData);
    v155 = theData[0];
    v154 = (std::__shared_weak_count *)theData[1];
    if (theData[1])
    {
      v156 = (unint64_t *)((char *)theData[1] + 8);
      do
        v157 = __ldxr(v156);
      while (__stxr(v157 + 1, v156));
      do
        v158 = __ldaxr(v156);
      while (__stlxr(v158 - 1, v156));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    if (v155)
      CFDictionaryAddValue(v187[0], CFSTR("UserSession"), theData[0]);
    v159 = (std::__shared_weak_count *)theData[1];
    if (theData[1])
    {
      v160 = (unint64_t *)((char *)theData[1] + 8);
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
  }
LABEL_138:
  v100 = CFDataCreateMutable(0, 44);
  theData[0] = v100;
  v101 = (__CFData *)operator new();
  *(_QWORD *)v101 = &off_24C9AFB50;
  *((_QWORD *)v101 + 1) = 0;
  *((_QWORD *)v101 + 2) = 0;
  *((_QWORD *)v101 + 3) = v100;
  theData[1] = v101;
  CFDataIncreaseLength(v100, 44);
  v102 = CFDataGetMutableBytePtr(theData[0]);
  *(_OWORD *)v102 = *(_OWORD *)(a1 + 4184);
  *((_DWORD *)v102 + 4) = *(_DWORD *)(a1 + 4204);
  v103 = *(_OWORD *)(a1 + 4208);
  *((_QWORD *)&v103 + 1) = *(_QWORD *)(a1 + 4220);
  *(_OWORD *)(v102 + 20) = v103;
  *(_QWORD *)(v102 + 36) = *(_QWORD *)(a1 + 4228);
  sub_20E8E1AA4(value, (CFTypeRef *)theData);
  v104 = (std::__shared_weak_count *)theData[1];
  if (!theData[1])
    goto LABEL_142;
  v105 = (unint64_t *)((char *)theData[1] + 8);
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (v106)
  {
LABEL_142:
    v107 = (__CFData *)value[0];
    if (!value[0])
      goto LABEL_144;
    goto LABEL_143;
  }
  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
  std::__shared_weak_count::__release_weak(v104);
  v107 = (__CFData *)value[0];
  if (value[0])
  {
LABEL_143:
    theData[0] = v107;
    sub_20E9130D4((uint64_t)v187, CFSTR("CollaborativeMappingQueueStatistics"), (CFTypeRef *)theData);
  }
LABEL_144:
  v108 = *(_QWORD *)(a1 + 4240);
  v109 = *(_QWORD *)(a1 + 4248);
  if (v108 == v109)
  {
    v172 = 0uLL;
    v123 = (std::__shared_weak_count *)value[1];
    *(_OWORD *)value = 0u;
    if (!v123)
      goto LABEL_159;
  }
  else
  {
    v110 = v109 - v108;
    v111 = (int)v109 - (int)v108;
    v112 = CFDataCreateMutable(0, v111);
    theData[0] = v112;
    v113 = (__CFData *)operator new();
    *(_QWORD *)v113 = &off_24C9AFB50;
    *((_QWORD *)v113 + 1) = 0;
    *((_QWORD *)v113 + 2) = 0;
    *((_QWORD *)v113 + 3) = v112;
    theData[1] = v113;
    CFDataIncreaseLength(v112, v111);
    v114 = CFDataGetMutableBytePtr(theData[0]);
    v115 = 0;
    v116 = 0xCCCCCCCCCCCCCCCDLL * (v110 >> 3);
    v117 = *(_QWORD *)(a1 + 4240);
    if (v116 <= 1)
      v116 = 1;
    do
    {
      v118 = &v114[v115];
      *(_QWORD *)v118 = *(_QWORD *)(v117 + v115);
      *(_OWORD *)(v118 + 8) = *(_OWORD *)(v117 + v115 + 8);
      *((_QWORD *)v118 + 3) = *(_QWORD *)(v117 + v115 + 24);
      v118[32] = *(_BYTE *)(v117 + v115 + 32);
      v115 += 40;
      --v116;
    }
    while (v116);
    sub_20E8E1AA4(&v172, (CFTypeRef *)theData);
    v119 = (std::__shared_weak_count *)theData[1];
    if (theData[1])
    {
      v120 = (unint64_t *)((char *)theData[1] + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v172;
    v172 = 0uLL;
    v123 = (std::__shared_weak_count *)value[1];
    *(_OWORD *)value = v122;
    if (!v123)
      goto LABEL_159;
  }
  v124 = (unint64_t *)&v123->__shared_owners_;
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 - 1, v124));
  if (!v125)
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
    if (!*((_QWORD *)&v172 + 1))
      goto LABEL_163;
    goto LABEL_160;
  }
LABEL_159:
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (!*((_QWORD *)&v172 + 1))
    goto LABEL_163;
LABEL_160:
  v127 = (unint64_t *)&v126->__shared_owners_;
  do
    v128 = __ldaxr(v127);
  while (__stlxr(v128 - 1, v127));
  if (!v128)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
    v129 = (__CFData *)value[0];
    if (!value[0])
      goto LABEL_165;
    goto LABEL_164;
  }
LABEL_163:
  v129 = (__CFData *)value[0];
  if (value[0])
  {
LABEL_164:
    theData[0] = v129;
    sub_20E9130D4((uint64_t)v187, CFSTR("MapStatisticsArray"), (CFTypeRef *)theData);
  }
LABEL_165:
  v130 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v131 = (unint64_t *)((char *)value[1] + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
LABEL_170:
  sub_20E912C70((uint64_t)v187, CFSTR("VIOReinitializationAttempts"), (int *)(a1 + 20));
  sub_20E912C70((uint64_t)v187, CFSTR("VIOReinitializationRecoveries"), (int *)(a1 + 24));
  v133 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)theData = *(_OWORD *)(a1 + 48);
  v174[0] = v133;
  *(_QWORD *)&v176[0] = *(_QWORD *)(a1 + 112);
  _Q1 = *(_OWORD *)(a1 + 96);
  v174[1] = *(_OWORD *)(a1 + 80);
  v175 = _Q1;
  *(_QWORD *)&v133 = *(_QWORD *)(a1 + 208);
  _Q2.f64[0] = *(float64_t *)v174;
  _V6.D[1] = *((_QWORD *)&_Q1 + 1);
  _Q2.f64[1] = *((float64_t *)&v174[1] + 1);
  v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)theData, *(int64x2_t *)((char *)v174 + 8)), *(double *)(a1 + 192)), (float64x2_t)vzip2q_s64(*(int64x2_t *)theData, *(int64x2_t *)((char *)v174 + 8)), *(float64x2_t *)(a1 + 192), 1), _Q2, *(double *)&v133);
  *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 200);
  __asm { FMLA            D2, D1, V6.D[1] }
  *(float64x2_t *)value = vnegq_f64(v137);
  v163 = -(_Q2.f64[0] + *(double *)v176 * *(double *)&v133);
  sub_20E930DF0((uint64_t)v187, CFSTR("VIOInertialStateRotation"), (uint64_t)theData);
  sub_20E930F68((uint64_t)v187, CFSTR("VIOInertialStateTranslation"), (uint64_t)value);
  v142 = v187[1];
  *a2 = v187[0];
  a2[1] = v142;
  if (v142)
  {
    v143 = (unint64_t *)((char *)v142 + 8);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
  v145 = v184;
  if (v184)
  {
    v146 = (unint64_t *)&v184->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v186;
  if (v186)
  {
    v149 = (unint64_t *)&v186->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = (std::__shared_weak_count *)v187[1];
  if (v187[1])
  {
    v152 = (unint64_t *)((char *)v187[1] + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
}

void sub_20E95D5F4()
{
  __break(1u);
}

void sub_20E95D828()
{
  __cxa_end_catch();
  JUMPOUT(0x20E95D934);
}

void sub_20E95D838(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20E95D84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,char *a26)
{
  sub_20E866BE0((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void sub_20E95D880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20E95D894);
}

void sub_20E95D8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C(v17 - 112);
  _Unwind_Resume(a1);
}

void sub_20E95D8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20E95D8F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 144);
  sub_20E86665C(v1 - 128);
  sub_20E86665C(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20E95D908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20E95D924);
}

void sub_20E95D910(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20E95D91CLL);
}

void sub_20E95D944(_QWORD *a1, const void *a2)
{
  __CFData *Mutable;
  std::__shared_weak_count *v5;
  UInt8 *MutableBytePtr;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFMutableDataRef theData;
  std::__shared_weak_count *v11;

  Mutable = CFDataCreateMutable(0, 72);
  theData = Mutable;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v11 = v5;
  CFDataIncreaseLength(Mutable, 72);
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  if (!MutableBytePtr
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  memmove(MutableBytePtr, a2, 0x48uLL);
  sub_20E8E1AA4(a1, (CFTypeRef *)&theData);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20E95DA70()
{
  __break(1u);
}

void sub_20E95DA8C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E95DAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95DAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95DAC8(_QWORD *a1, __int128 *a2)
{
  __CFData *Mutable;
  std::__shared_weak_count *v5;
  UInt8 *MutableBytePtr;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFMutableDataRef theData;
  std::__shared_weak_count *v12;

  Mutable = CFDataCreateMutable(0, 24);
  theData = Mutable;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v12 = v5;
  CFDataIncreaseLength(Mutable, 24);
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  if (!MutableBytePtr
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = *a2;
  *((_QWORD *)MutableBytePtr + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)MutableBytePtr = v7;
  sub_20E8E1AA4(a1, (CFTypeRef *)&theData);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20E95DBF4()
{
  __break(1u);
}

void sub_20E95DC10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E95DC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95DC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95DC4C(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *value;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  void *v34;
  std::__shared_weak_count *v35;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  v11 = *(const void **)a3;
  v12 = *(std::__shared_weak_count **)(a3 + 8);
  v32 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v33 = v12;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
  }
  else
  {
    v33 = 0;
  }
  sub_20E8EADA8(&v34, v11);
  value = v34;
  v31 = v35;
  if (v35)
  {
    v16 = (unint64_t *)&v35->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = v35;
    if (v35)
    {
      v19 = (unint64_t *)&v35->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (v33)
  {
    v21 = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (!v31)
    goto LABEL_41;
  v25 = (unint64_t *)&v31->__shared_owners_;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 - 1, v25));
  if (v27)
  {
LABEL_41:
    if (!value)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (value)
LABEL_42:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_43:
  if (v31)
  {
    v28 = (unint64_t *)&v31->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20E95DEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95DEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E95DEDC(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v3;
  __CFArray *Mutable;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *value;
  std::__shared_weak_count *v18;
  CFMutableArrayRef theArray;
  std::__shared_weak_count *v20;

  v3 = a2[1] - *a2;
  if (v3)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x4EC4EC4EC4EC4EC5 * (v3 >> 5), MEMORY[0x24BDBD690]);
    theArray = Mutable;
    v8 = (std::__shared_weak_count *)operator new();
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE18;
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
    v20 = v8;
    v9 = *a2;
    v10 = a2[1];
    while (v9 != v10)
    {
      sub_20F3E93CC(v9, &value);
      CFArrayAppendValue(theArray, value);
      v11 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 += 416;
    }
    sub_20E95DC4C(*a1, a3, (uint64_t)&theArray);
    v14 = v20;
    if (v20)
    {
      v15 = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_20E95E050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E95E094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E95E0B0()
{
  sub_20E860B90("vector");
}

void sub_20E95E0C4(uint64_t a1, uint64_t a2, CFUUIDBytes *a3)
{
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const __CFAllocator *v22;
  std::__shared_weak_count_vtbl *v23;
  CFTypeRef v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;

  Default = CFAllocatorGetDefault();
  v7 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *a3);
  sub_20EA68D1C((std::__shared_weak_count_vtbl **)&cf, v7, 0);
  v8 = cf;
  if (cf)
    CFRetain(cf);
  *(_QWORD *)a1 = v8;
  v9 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(float32x2_t *)(a2 + 8);
  *(float64x2_t *)(a1 + 8) = vcvtq_f64_f32(*(float32x2_t *)a2);
  *(float64x2_t *)(a1 + 24) = vcvtq_f64_f32(v12);
  v13 = *(float32x2_t *)(a2 + 24);
  *(float64x2_t *)(a1 + 40) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 16));
  *(float64x2_t *)(a1 + 56) = vcvtq_f64_f32(v13);
  v14 = *(float32x2_t *)(a2 + 40);
  *(float64x2_t *)(a1 + 72) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 32));
  *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(v14);
  v15 = *(float32x2_t *)(a2 + 56);
  *(float64x2_t *)(a1 + 104) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 48));
  v16 = *(_DWORD *)(a2 + 64) - 1;
  *(float64x2_t *)(a1 + 120) = vcvtq_f64_f32(v15);
  if (v16 >= 8 || ((0x8Bu >> v16) & 1) == 0)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/HitTesting/ApiTypeConversion.cpp", 94, (uint64_t)"", 0, (uint64_t)"Unkonwn hit-test origin", 23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  *(_DWORD *)(a1 + 136) = dword_2102E0B40[v16];
  v17 = *(_DWORD *)(a2 + 68) - 1;
  if (v17 > 3)
    v18 = 0;
  else
    v18 = dword_2102E0B60[v17];
  v19 = *(_DWORD *)(a2 + 72);
  if (v19 == 1)
    v20 = 2;
  else
    v20 = 4;
  if (v19)
    v21 = v20;
  else
    v21 = 1;
  *(_DWORD *)(a1 + 140) = v18;
  *(_DWORD *)(a1 + 144) = v21;
  if (*(_BYTE *)(a2 + 136))
  {
    v22 = CFAllocatorGetDefault();
    v23 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(v22, *(CFUUIDBytes *)(a2 + 120));
    sub_20EA68D1C((std::__shared_weak_count_vtbl **)&cf, v23, 0);
    v24 = cf;
    if (cf)
      CFRetain(cf);
    *(_QWORD *)(a1 + 152) = v24;
    v25 = v29;
    if (v29)
    {
      v26 = (unint64_t *)&v29->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 152) = 0;
  }
}

void sub_20E95E2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95E304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E95E318(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q3>)
{
  std::__shared_weak_count_vtbl *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  unint64_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *i;
  uint64_t v56;
  int v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  float64x2_t v65;
  unsigned int v66;
  float64x2_t v67;
  unsigned int v68;
  float64x2_t v69;
  unsigned int v70;
  float64x2_t v71;
  __int128 v72;
  float64x2_t v73;
  unsigned int v74;
  CFUUIDBytes v75;
  char *v76;
  __int16 v77;
  char v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;

  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0x42C8000041A00000;
  *(_QWORD *)(a4 + 56) = 0xF00000002;
  *(_DWORD *)(a4 + 64) = 3;
  *(_BYTE *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_BYTE *)(a4 + 120) = 0;
  *(_BYTE *)(a4 + 128) = 0;
  *(_BYTE *)(a4 + 152) = 0;
  *(_BYTE *)(a4 + 160) = 0;
  *(_BYTE *)(a4 + 208) = 0;
  *(_BYTE *)(a4 + 216) = 0;
  *(_BYTE *)(a4 + 240) = 0;
  *(_BYTE *)(a4 + 248) = 0;
  v61 = a4 + 248;
  *(_BYTE *)(a4 + 272) = 0;
  *(_QWORD *)(a4 + 76) = 0;
  *(_BYTE *)(a4 + 84) = 0;
  *(_QWORD *)(a4 + 68) = 0;
  *(_QWORD *)a4 = *a1;
  *(_QWORD *)(a4 + 8) = a1[1];
  *(_DWORD *)(a4 + 16) = 1036831949;
  *(_BYTE *)(a4 + 20) = 0;
  a6.f64[0] = *(float64_t *)(a2 + 16);
  a5.f64[0] = *(float64_t *)(a2 + 40);
  v69 = a5;
  v71 = a6;
  v73 = *(float64x2_t *)(a2 + 48);
  v8 = *(std::__shared_weak_count_vtbl **)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 72);
  v10 = *(_DWORD *)(a2 + 76);
  v11 = *(_DWORD *)(a2 + 84);
  v12 = *(_QWORD *)(a2 + 88);
  if ((*(_DWORD *)(a2 + 80) - 1) >= 3)
    v13 = 3;
  else
    v13 = *(_DWORD *)(a2 + 80) - 1;
  v65 = *(float64x2_t *)a2;
  v67 = *(float64x2_t *)(a2 + 24);
  if (v8)
  {
    CFRetain(v8);
    v14 = (std::__shared_weak_count *)operator new();
    v15 = v14;
    v14->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C0278;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v8;
    v79 = v8;
    v80 = v14;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (v80)
    {
      v19 = &v80->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      do
        v21 = __ldaxr((unint64_t *)v19);
      while (__stlxr(v21 - 1, (unint64_t *)v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v75 = CFUUIDGetUUIDBytes((CFUUIDRef)v79);
    v22 = sub_20EA68D10((uint64_t)&v75);
    v8 = v23;
    v24 = v80;
    if (v80)
    {
      v25 = &v80->__shared_owners_;
      do
        v26 = __ldaxr((unint64_t *)v25);
      while (__stlxr(v26 - 1, (unint64_t *)v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v22 = 0;
  }
  v27 = vcvt_f32_f64(v67);
  v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v65), v71);
  v29 = vcvt_f32_f64(v69);
  *(_DWORD *)(a4 + 32) = v28.i32[2];
  *(_QWORD *)(a4 + 24) = v28.i64[0];
  v30 = vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)v27, v69), 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(v27, v27), (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27, 1), v29, v29).f32[0]));
  *(_DWORD *)(a4 + 44) = v30.i32[2];
  *(_QWORD *)(a4 + 36) = v30.i64[0];
  *(float32x2_t *)(a4 + 48) = vcvt_f32_f64(v73);
  *(_DWORD *)(a4 + 56) = v11 & 7;
  *(_DWORD *)(a4 + 60) = v10 & 3;
  *(_DWORD *)(a4 + 64) = v13;
  *(_QWORD *)(a4 + 68) = v22;
  *(_QWORD *)(a4 + 76) = v8;
  *(_BYTE *)(a4 + 84) = v9 == 1;
  *(_WORD *)(a4 + 85) = v77;
  *(_BYTE *)(a4 + 87) = v78;
  *(_QWORD *)(a4 + 88) = v12;
  if (a3)
  {
    v31 = *a3;
    v75 = (CFUUIDBytes)0;
    v76 = 0;
    if ((_DWORD)v31)
    {
      v32 = (char *)operator new(52 * v31);
      v34 = 0;
      *(_QWORD *)&v75.byte0 = v32;
      *(_QWORD *)&v75.byte8 = v32;
      v76 = &v32[52 * v31];
      do
      {
        while (1)
        {
          v35 = (int *)(*((_QWORD *)a3 + 1) + 12 * v34);
          v37 = *v35;
          v36 = v35[1];
          v38 = v35[2];
          v39 = *((_QWORD *)a3 + 2) + 36 * v34;
          v40 = *(_DWORD *)(v39 + 32);
          v42 = *(_OWORD *)v39;
          v41 = *(_OWORD *)(v39 + 16);
          LODWORD(v33) = HIDWORD(v41);
          v43 = *(_QWORD *)(v39 + 24);
          v44 = HIDWORD(*(_QWORD *)(v39 + 16));
          v45 = HIDWORD(*(_OWORD *)v39);
          v46 = *(_QWORD *)(v39 + 8);
          v47 = HIDWORD(*(_QWORD *)v39);
          if (v32 >= v76)
            break;
          *(_DWORD *)v32 = v37;
          *((_DWORD *)v32 + 1) = v36;
          DWORD1(v42) = v47;
          *((_QWORD *)&v42 + 1) = __PAIR64__(v45, v46);
          *((_DWORD *)v32 + 2) = v38;
          *(_OWORD *)(v32 + 12) = v42;
          DWORD1(v41) = v44;
          *((_QWORD *)&v41 + 1) = __PAIR64__(HIDWORD(v41), v43);
          *((_DWORD *)v32 + 11) = v40;
          *(_OWORD *)(v32 + 28) = v41;
          *((_DWORD *)v32 + 12) = 0;
          v32 += 52;
          *(_QWORD *)&v75.byte8 = v32;
          if (++v34 == v31)
            goto LABEL_40;
        }
        v48 = *(char **)&v75.byte0;
        v49 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v32[-*(_QWORD *)&v75.byte0] >> 2);
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) > 0x4EC4EC4EC4EC4ECLL)
          sub_20E867F44();
        v62 = HIDWORD(*(_QWORD *)v39);
        v63 = *(_QWORD *)(v39 + 8);
        v64 = HIDWORD(*(_OWORD *)v39);
        v66 = *(_OWORD *)v39;
        v68 = HIDWORD(*(_QWORD *)(v39 + 16));
        v70 = *(_QWORD *)(v39 + 24);
        v72 = v33;
        v74 = v41;
        if (0x9D89D89D89D89D8ALL * ((uint64_t)&v76[-*(_QWORD *)&v75.byte0] >> 2) > v50)
          v50 = 0x9D89D89D89D89D8ALL * ((uint64_t)&v76[-*(_QWORD *)&v75.byte0] >> 2);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v76[-*(_QWORD *)&v75.byte0] >> 2)) >= 0x276276276276276)
          v51 = 0x4EC4EC4EC4EC4ECLL;
        else
          v51 = v50;
        if (v51 > 0x4EC4EC4EC4EC4ECLL)
          sub_20E877A38();
        v52 = (char *)operator new(52 * v51);
        v53 = &v52[52 * v49];
        *(_DWORD *)v53 = v37;
        *((_DWORD *)v53 + 1) = v36;
        *(_QWORD *)&v54 = __PAIR64__(v62, v66);
        *((_QWORD *)&v54 + 1) = __PAIR64__(v64, v63);
        *((_DWORD *)v53 + 2) = v38;
        *(_OWORD *)(v53 + 12) = v54;
        *(_QWORD *)&v54 = __PAIR64__(v68, v74);
        *((_QWORD *)&v54 + 1) = __PAIR64__(v72, v70);
        *((_DWORD *)v53 + 11) = v40;
        v33 = v72;
        *(_OWORD *)(v53 + 28) = v54;
        *((_DWORD *)v53 + 12) = 0;
        for (i = v53; v32 != v48; *((_DWORD *)i + 12) = *((_DWORD *)v32 + 12))
        {
          v56 = *(_QWORD *)(v32 - 52);
          v32 -= 52;
          v57 = *((_DWORD *)v32 + 2);
          *(_QWORD *)(i - 52) = v56;
          i -= 52;
          *((_DWORD *)i + 2) = v57;
          v58 = *(_OWORD *)(v32 + 12);
          v33 = *(_OWORD *)(v32 + 28);
          *((_DWORD *)i + 11) = *((_DWORD *)v32 + 11);
          *(_OWORD *)(i + 28) = v33;
          *(_OWORD *)(i + 12) = v58;
        }
        v32 = v53 + 52;
        *(_QWORD *)&v75.byte0 = i;
        v76 = &v52[52 * v51];
        if (v48)
          operator delete(v48);
        *(_QWORD *)&v75.byte8 = v32;
        ++v34;
      }
      while (v34 != v31);
LABEL_40:
      if (*(_BYTE *)(a4 + 272))
        goto LABEL_41;
    }
    else
    {
      v32 = 0;
      if (*(_BYTE *)(a4 + 272))
      {
LABEL_41:
        if (*(_QWORD *)v61)
        {
          operator delete(*(void **)v61);
          *(_QWORD *)v61 = 0;
          *(_QWORD *)(v61 + 8) = 0;
          *(_QWORD *)(v61 + 16) = 0;
        }
        v59 = v76;
        *(_QWORD *)(a4 + 248) = *(_QWORD *)&v75.byte0;
        *(_QWORD *)(a4 + 256) = v32;
        *(_QWORD *)(a4 + 264) = v59;
        return;
      }
    }
    v60 = v76;
    *(_QWORD *)(a4 + 248) = *(_QWORD *)&v75.byte0;
    *(_QWORD *)(a4 + 256) = v32;
    *(_QWORD *)(a4 + 264) = v60;
    *(_BYTE *)(a4 + 272) = 1;
  }
}

void sub_20E95E8E8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E95E8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_20E8DE3B4(a9);
  _Unwind_Resume(a1);
}

void sub_20E95E90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8DE3B4(a9);
  _Unwind_Resume(a1);
}

void sub_20E95E920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C(v9 - 136);
  sub_20E8DE3B4(a9);
  _Unwind_Resume(a1);
}

void sub_20E95E93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  if (v29)
    operator delete(v29);
  sub_20E8DE3B4(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E95E970(uint64_t a1)
{
  sub_21021A3F8(a1 + 8);
  return a1;
}

void sub_20E95E998(uint64_t a1)
{
  sub_21021A3F8(a1 + 8);
  JUMPOUT(0x212BC6398);
}

uint64_t CV3DLuxEstimationSessionRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DLuxEstimationSessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DLuxEstimationResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DLuxEstimationResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

double CV3DLuxEstimationResultCopyLuxLevel(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(double *)(a1 + 8);
  __p = operator new(0x28uLL);
  v10 = xmmword_2102DC280;
  strcpy((char *)__p, "Lux estimation result is nullptr");
  v4 = (char *)operator new(0x88uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/LuxEstimation/CV3DLuxEstimationResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return -1.0;
}

void sub_20E95EBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E95EC2C(uint64_t a1)
{
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

_OWORD *sub_20E95EC50(_OWORD *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t (**v22)();
  _QWORD *v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint64_t v27[3];
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[2];
  unsigned __int8 v38;

  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v29[0] = &off_24C9F15F0;
  v29[1] = &off_24C9F1578;
  v3 = *(_OWORD *)(a2 + 40);
  v30 = *(_OWORD *)(a2 + 24);
  v31 = v3;
  v32 = *(_OWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 72);
  v34 = *(_DWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 84);
  v4 = *(_OWORD *)(a2 + 112);
  v36 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  v38 = *(_BYTE *)(a2 + 144);
  v37[1] = v5;
  v37[0] = v4;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = (_BYTE)v4 == 0;
  v26 = v27;
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  sub_21021781C((uint64_t)&v25, (uint64_t *)&v22);
  sub_20E9F9698((uint64_t)v29, (uint64_t)&v25, (uint64_t)v37 + 8, v38, (uint64_t *)&v22);
  v6 = v22;
  v22 = 0;
  v7 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
  {
    v8 = sub_20E9634F0(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40014240CFLL);
    v9 = (uint64_t)v22;
    v22 = 0;
    if (v9)
    {
      v10 = sub_20E9634F0(v9);
      MEMORY[0x212BC6398](v10, 0x10B2C40014240CFLL);
    }
  }
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 736);
  v12 = (_QWORD *)operator new();
  v12[1] = &off_24C9B1FE0;
  v13 = v12 + 1;
  *v12 = &off_24C9B30B8;
  v12[2] = a1;
  v12[4] = v12 + 1;
  v22 = &off_24C9B2380;
  v14 = (_QWORD *)operator new();
  *v14 = &off_24C9B30B8;
  v15 = v14 + 1;
  v16 = v12[4];
  if (!v16)
    goto LABEL_7;
  if ((_QWORD *)v16 != v13)
  {
    v16 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 16))(v16, v15);
LABEL_7:
    v14[4] = v16;
    goto LABEL_9;
  }
  v14[4] = v15;
  (*(void (**)(_QWORD *))(*v13 + 24))(v13);
LABEL_9:
  v23 = v14;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v11 + 120) + 16))(v11 + 120, &v22);
  v17 = v23;
  v22 = &off_24C9B2380;
  v23 = 0;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v18 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_20E8D1F68((uint64_t)&v26, v27[0]);
  return a1;
}

void sub_20E95EEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v7, 0x10A1C400AA0B987);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20E95F030((uint64_t)va);
  sub_20E86665C(v5 + 64);
  sub_20E86665C(v5 + 48);
  sub_20E8C3144((void **)(v5 + 24));
  sub_20E86665C(v5 + 8);
  sub_20E95EFAC((uint64_t *)v5);
  _Unwind_Resume(a1);
}

void sub_20E95EF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  sub_20E86665C(v16);
  sub_20E8D1F68(v15, a15);
  sub_20E92DA24(&a10);
  JUMPOUT(0x20E95EF4CLL);
}

uint64_t *sub_20E95EFAC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E9634F0(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40014240CFLL);
  }
  return a1;
}

_QWORD *sub_20E95EFF0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2380;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20E95F030(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20E8D1F68(a1 + 8, *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t *sub_20E95F094(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD *)(*(_QWORD *)(*a1 + 96) + 96);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  (*(void (**)(_QWORD))(**(_QWORD **)(v2[22] + 96) + 32))(*(_QWORD *)(v2[22] + 96));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2[32] + 96) + 32))(*(_QWORD *)(v2[32] + 96));
  v4 = v2[42];
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 32))(*(_QWORD *)(v4 + 96));
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 32))(*(_QWORD *)(v4 + 264));
  v5 = v2[52];
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 96) + 32))(*(_QWORD *)(v5 + 96));
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 264) + 32))(*(_QWORD *)(v5 + 264));
  v6 = (_QWORD **)v2[62];
  (*(void (**)(_QWORD *))(*v6[12] + 32))(v6[12]);
  (*(void (**)(_QWORD *))(*v6[33] + 32))(v6[33]);
  (*(void (**)(_QWORD *))(*v6[54] + 32))(v6[54]);
  (*(void (**)(_QWORD *))(*v6[75] + 32))(v6[75]);
  (*(void (**)(_QWORD *))(*v6[96] + 32))(v6[96]);
  (*(void (**)(_QWORD *))(*v6[117] + 32))(v6[117]);
  (*(void (**)(_QWORD *))(*v6[138] + 32))(v6[138]);
  v7 = (_QWORD **)v2[72];
  (*(void (**)(_QWORD *))(*v7[12] + 32))(v7[12]);
  (*(void (**)(_QWORD *))(*v7[33] + 32))(v7[33]);
  (*(void (**)(_QWORD *))(*v7[54] + 32))(v7[54]);
  (*(void (**)(_QWORD *))(*v7[75] + 32))(v7[75]);
  (*(void (**)(_QWORD *))(*v7[96] + 32))(v7[96]);
  (*(void (**)(_QWORD *))(*v7[117] + 32))(v7[117]);
  (*(void (**)(_QWORD *))(*v7[138] + 32))(v7[138]);
  (*(void (**)(_QWORD *))(*v7[159] + 32))(v7[159]);
  (*(void (**)(_QWORD *))(*v7[180] + 32))(v7[180]);
  (*(void (**)(_QWORD *))(*v7[201] + 32))(v7[201]);
  (*(void (**)(_QWORD))(**(_QWORD **)(v2[82] + 96) + 32))(*(_QWORD *)(v2[82] + 96));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2[92] + 96) + 32))(*(_QWORD *)(v2[92] + 96));
  sub_20E96C5C4((_QWORD *)(*a1 + 24));
  v8 = (std::__shared_weak_count *)a1[9];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)a1[7];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = a1[3];
  if (v14)
  {
    v15 = a1[4];
    v16 = (void *)a1[3];
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = (void *)a1[3];
    }
    a1[4] = v14;
    operator delete(v16);
  }
  v20 = (std::__shared_weak_count *)a1[2];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *a1;
  *a1 = 0;
  if (v23)
  {
    v24 = sub_20E9634F0(v23);
    MEMORY[0x212BC6398](v24, 0x10B2C40014240CFLL);
  }
  return a1;
}

uint64_t sub_20E95F3E0(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  double v17;
  void *__p;
  char *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;

  v7 = *(_QWORD *)(*(_QWORD *)a1 + 416);
  v17 = a7;
  sub_20E969038(&__p, (uint64_t *)(a2 + 16));
  v20 = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
  v21 = vcvt_hight_f64_f32(a3);
  v22 = vcvtq_f64_f32(*(float32x2_t *)a4.f32);
  v23 = vcvt_hight_f64_f32(a4);
  v24 = vcvtq_f64_f32(*(float32x2_t *)a5.f32);
  v25 = vcvt_hight_f64_f32(a5);
  v26 = vcvtq_f64_f32(*(float32x2_t *)a6.f32);
  v27 = vcvt_hight_f64_f32(a6);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)(v7 + 256) + 16))(v7 + 256, &v17);
  v8 = (char *)__p;
  if (__p)
  {
    v9 = v19;
    v10 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((_QWORD *)v9 - 13))
        {
          v11 = (char *)*((_QWORD *)v9 - 15);
          if (v9 - 96 != v11)
            operator delete(v11);
        }
        v9 -= 120;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v19 = v8;
    operator delete(v10);
  }
  return 1;
}

void sub_20E95F4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E95F4EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E95F4EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_20E95F568(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  char v13;
  char *v14;
  __int128 *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  _BOOL8 v22;
  __int128 *v23;
  CFErrorRef v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 *v28;
  unint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *cat;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  int8x16_t v76;
  float64x2_t v77;
  int8x16_t v78;
  int64x2_t v79;
  float64x2_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  __int128 v85;
  float64_t v86;
  uint64_t v87;
  float64_t v88;
  int8x16_t v89;
  float64x2_t v90;
  double v91;
  float64_t v92;
  uint64_t v93;
  float64_t v94;
  void *__p[4];
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  _OWORD v118[2];
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  char v136;
  uint64_t v137;
  __int128 *v138;
  __int128 v139;
  CFErrorRef v140;
  std::__shared_weak_count *v141;
  std::error_condition v142;
  float64x2_t v143;
  double v144;
  double v145;
  __int128 v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t **)(a2 + 8);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBFF0;
    strcpy((char *)__p[0], "State does not contain metadata");
    *(double *)&v14 = COERCE_DOUBLE(operator new(0x70uLL));
    v145 = *(double *)&v14;
    v146 = xmmword_2102E0CA0;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/Raycast/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v143.f64[0] = 22;
      *(_QWORD *)&v143.f64[1] = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v143, (uint64_t)__p, (CFErrorRef *)&v138);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = v138;
      if (v138)
        CFRetain(v138);
      *a3 = v15;
      v16 = (std::__shared_weak_count *)v139;
      if (!(_QWORD)v139)
        goto LABEL_50;
      v17 = (unint64_t *)(v139 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_49:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v146) & 0x80000000) == 0)
          goto LABEL_53;
LABEL_51:
        *(double *)&v14 = v145;
        goto LABEL_52;
      }
LABEL_50:
      if ((SHIBYTE(v146) & 0x80000000) == 0)
      {
LABEL_53:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 0;
      }
      goto LABEL_51;
    }
LABEL_52:
    operator delete(v14);
    goto LABEL_53;
  }
  v7 = *v4;
  v8 = (void **)v4[4];
  v9 = (std::__shared_weak_count *)v4[5];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v8)
  {
    v12 = *v8;
    if (*(double *)v8 < *(double *)(v7 + 40))
    {
      v13 = 0;
      v12 = 0;
      if (!v9)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  else
  {
    v12 = *(void **)(v7 + 32);
  }
  v13 = 1;
  if (!v9)
    goto LABEL_23;
LABEL_20:
  v19 = (unint64_t *)&v9->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((v13 & 1) != 0)
      goto LABEL_24;
LABEL_41:
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DAFD0;
    strcpy((char *)__p[0], "SLAM state is not valid");
    *(double *)&v14 = COERCE_DOUBLE(operator new(0x70uLL));
    v145 = *(double *)&v14;
    v146 = xmmword_2102E0CA0;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/Raycast/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v143.f64[0] = 22;
      *(_QWORD *)&v143.f64[1] = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v143, (uint64_t)__p, (CFErrorRef *)&v138);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v28 = v138;
      if (v138)
        CFRetain(v138);
      *a3 = v28;
      v16 = (std::__shared_weak_count *)v139;
      if (!(_QWORD)v139)
        goto LABEL_50;
      v29 = (unint64_t *)(v139 + 8);
      do
        v18 = __ldaxr(v29);
      while (__stlxr(v18 - 1, v29));
      goto LABEL_49;
    }
    goto LABEL_52;
  }
LABEL_23:
  if ((v13 & 1) == 0)
    goto LABEL_41;
LABEL_24:
  v21 = sub_20EAB3D4C(v5, 0, 0, (uint64_t)&v145, &v143);
  v22 = v21 == 0;
  if (v21)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DAFD0;
    strcpy((char *)__p[0], "SLAM state is not valid");
    v23 = (__int128 *)operator new(0x70uLL);
    v138 = v23;
    v139 = xmmword_2102E0CA0;
    strcpy((char *)v23, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/Raycast/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v142.__val_ = 22;
      v142.__cat_ = std::generic_category();
      sub_20EA67538(&v142, (uint64_t)__p, &v140);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v24 = v140;
      if (v140)
        CFRetain(v140);
      *a3 = v24;
      v25 = v141;
      if (v141)
      {
        v26 = (unint64_t *)&v141->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((SHIBYTE(v139) & 0x80000000) == 0)
        goto LABEL_38;
      v23 = v138;
    }
    operator delete(v23);
LABEL_38:
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return v22;
  }
  v31 = **v5;
  v32 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  __p[0] = v12;
  sub_20E969484((uint64_t)&__p[1], (_BYTE *)(v31 + 552));
  *(float *)&v33 = v145;
  *(float *)&v34 = v147;
  *(_QWORD *)&v113 = __PAIR64__(v34, v33);
  *(float *)&v35 = v150;
  *((_QWORD *)&v113 + 1) = v35;
  *(float *)&v36 = *(double *)&v146;
  *(float *)&v37 = v148;
  *(_QWORD *)&v114 = __PAIR64__(v37, v36);
  *(float *)&v38 = v151;
  *((_QWORD *)&v114 + 1) = v38;
  v39 = *((double *)&v146 + 1);
  *(float *)&v115 = v39;
  v40 = v149;
  *((float *)&v115 + 1) = v40;
  *(float *)&v41 = v152;
  *((_QWORD *)&v115 + 1) = v41;
  *(float32x2_t *)&v116 = vcvt_f32_f64(v143);
  *(float *)&v42 = v144;
  v117 = *(_BYTE *)(v31 + 368);
  *((_QWORD *)&v116 + 1) = v42 | 0x3F80000000000000;
  sub_20E960080((uint64_t)v118, (__int128 *)(v31 + 376));
  v137 = *(_QWORD *)(v31 + 20);
  v43 = (char *)operator new(0x1F8uLL);
  *((_QWORD *)v43 + 1) = 0;
  *((_QWORD *)v43 + 2) = 0;
  *(_QWORD *)v43 = &off_24C9B2060;
  *((void **)v43 + 3) = __p[0];
  v43[32] = 0;
  v43[104] = 0;
  if (v100)
  {
    *((_OWORD *)v43 + 2) = *(_OWORD *)&__p[1];
    *((void **)v43 + 6) = __p[3];
    memset(&__p[1], 0, 24);
    *(_OWORD *)(v43 + 56) = v96;
    *((_QWORD *)v43 + 9) = v97;
    v96 = 0uLL;
    *((_OWORD *)v43 + 5) = v98;
    *((_QWORD *)v43 + 12) = v99;
    v97 = 0;
    v98 = 0uLL;
    v99 = 0;
    v43[104] = 1;
  }
  v43[112] = 0;
  v43[184] = 0;
  if (v107)
  {
    *((_QWORD *)v43 + 16) = v102;
    v44 = v106;
    *((_QWORD *)v43 + 19) = v104;
    *((_OWORD *)v43 + 7) = v101;
    v101 = 0uLL;
    *(_OWORD *)(v43 + 136) = v103;
    v102 = 0;
    v103 = 0uLL;
    v104 = 0;
    *((_OWORD *)v43 + 10) = v105;
    *((_QWORD *)v43 + 22) = v44;
    v106 = 0;
    v105 = 0uLL;
    v43[184] = 1;
  }
  v43[192] = 0;
  v43[240] = 0;
  if (v112)
  {
    *((_OWORD *)v43 + 12) = v108;
    *((_QWORD *)v43 + 26) = v109;
    v108 = 0uLL;
    *(_OWORD *)(v43 + 216) = v110;
    *((_QWORD *)v43 + 29) = v111;
    v109 = 0;
    v110 = 0uLL;
    v111 = 0;
    v43[240] = 1;
  }
  v45 = v114;
  *(_OWORD *)(v43 + 248) = v113;
  v46 = v115;
  v47 = v116;
  *(_OWORD *)(v43 + 264) = v45;
  *(_OWORD *)(v43 + 280) = v46;
  *(_OWORD *)(v43 + 296) = v47;
  v43[312] = v117;
  v48 = v118[1];
  *((_OWORD *)v43 + 20) = v118[0];
  *((_OWORD *)v43 + 21) = v48;
  v49 = v120;
  v50 = v121;
  *((_QWORD *)v43 + 44) = v119;
  *((_QWORD *)v43 + 45) = v49;
  v120 = 0;
  v121 = 0;
  v51 = v122;
  v52 = v123;
  *((_QWORD *)v43 + 46) = v50;
  *((_QWORD *)v43 + 47) = v51;
  *((_QWORD *)v43 + 48) = v52;
  *((_DWORD *)v43 + 98) = v124;
  if (v52)
  {
    v53 = *(_QWORD *)(v51 + 8);
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v53 >= v50)
        v53 %= v50;
    }
    else
    {
      v53 &= v50 - 1;
    }
    *(_QWORD *)(v49 + 8 * v53) = v43 + 376;
    v122 = 0;
    v123 = 0;
  }
  v43[400] = v125;
  v54 = v126;
  v55 = v127;
  v127 = 0;
  v126 = 0;
  *((_QWORD *)v43 + 51) = v54;
  *((_QWORD *)v43 + 52) = v55;
  v56 = v128;
  v57 = v129;
  *((_QWORD *)v43 + 53) = v128;
  *((_QWORD *)v43 + 54) = v57;
  *((_DWORD *)v43 + 110) = v130;
  if (v57)
  {
    v58 = *(_QWORD *)(v56 + 8);
    if ((v55 & (v55 - 1)) != 0)
    {
      if (v58 >= v55)
        v58 %= v55;
    }
    else
    {
      v58 &= v55 - 1;
    }
    *(_QWORD *)(v54 + 8 * v58) = v43 + 424;
    v128 = 0;
    v129 = 0;
  }
  v59 = v131;
  v60 = v132;
  v132 = 0;
  v131 = 0;
  *((_QWORD *)v43 + 56) = v59;
  *((_QWORD *)v43 + 57) = v60;
  v61 = v133;
  v62 = v134;
  *((_QWORD *)v43 + 58) = v133;
  *((_QWORD *)v43 + 59) = v62;
  *((_DWORD *)v43 + 120) = v135;
  if (v62)
  {
    v63 = *(_QWORD *)(v61 + 8);
    if ((v60 & (v60 - 1)) != 0)
    {
      if (v63 >= v60)
        v63 %= v60;
    }
    else
    {
      v63 &= v60 - 1;
    }
    *(_QWORD *)(v59 + 8 * v63) = v43 + 464;
    v133 = 0;
    v134 = 0;
  }
  v43[488] = v136;
  *((_QWORD *)v43 + 62) = v137;
  v138 = (__int128 *)(v43 + 24);
  *(_QWORD *)&v139 = v43;
  *(_QWORD *)&v142.__val_ = 0;
  v142.__cat_ = 0;
  (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)(v32 + 88) + 16))(v32 + 88, &v138);
  v64 = (std::__shared_weak_count *)v139;
  if ((_QWORD)v139)
  {
    v65 = (unint64_t *)(v139 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  cat = (std::__shared_weak_count *)v142.__cat_;
  if (v142.__cat_)
  {
    v68 = (unint64_t *)&v142.__cat_[1];
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
    }
  }
  sub_20E91E748(v118);
  sub_20E91E690((uint64_t)&__p[1]);
  v70 = *(_QWORD *)(v31 + 4296);
  v71 = *(_QWORD *)(v31 + 4304);
  if (v70 != v71)
  {
    v72.f64[1] = 0.0;
    memset(__p, 0, sizeof(__p));
    LODWORD(v96) = 1065353216;
    do
    {
      v94 = *(double *)(v70 + 16);
      v88 = *(double *)(v70 + 24);
      v72.f64[0] = *(float64_t *)(v70 + 32);
      v90 = v72;
      v93 = *(_QWORD *)(v70 + 40);
      v87 = *(_QWORD *)(v70 + 48);
      v72.f64[0] = *(float64_t *)(v70 + 56);
      v89 = (int8x16_t)v72;
      v92 = *(double *)(v70 + 64);
      v86 = *(double *)(v70 + 72);
      v91 = *(double *)(v70 + 80);
      v84 = *(_QWORD *)(v70 + 104);
      v85 = *(_OWORD *)(v70 + 88);
      v138 = (__int128 *)v70;
      v73 = (float64x2_t *)sub_20E96C80C((uint64_t)__p, v70, (uint64_t)&unk_2102DB95C, &v138);
      *(_QWORD *)&v74.f64[0] = v85 ^ 0x8000000000000000;
      v76.i64[0] = v93;
      v75.f64[0] = v94;
      v75.f64[1] = v88;
      v76.i64[1] = v87;
      v77.f64[0] = v92;
      v77.f64[1] = v86;
      v78 = vextq_s8(v76, v89, 8uLL);
      v79 = vzip1q_s64((int64x2_t)v90, (int64x2_t)v76);
      v74.f64[0] = vmulq_f64(v90, v74).f64[0]
                 + *(double *)v89.i64 * COERCE_DOUBLE(*((_QWORD *)&v85 + 1) ^ 0x8000000000000000)
                 + v91 * COERCE_DOUBLE(v84 ^ 0x8000000000000000);
      *(_QWORD *)&v80.f64[0] = vdupq_laneq_s64(v79, 1).u64[0];
      *(_QWORD *)&v80.f64[1] = v78.i64[0];
      v74.f64[1] = 1.0;
      v73[6] = v77;
      v73[7] = (float64x2_t)*(unint64_t *)&v91;
      v72 = vmlaq_f64(vmlaq_f64(vmulq_f64(v75, (float64x2_t)vdupq_n_s64((unint64_t)v85 ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*((_QWORD *)&v85 + 1) ^ 0x8000000000000000), (float64x2_t)v76), (float64x2_t)vdupq_n_s64(v84 ^ 0x8000000000000000), v77);
      v73[2] = v75;
      v73[3] = (float64x2_t)v79.u64[0];
      v73[4] = v80;
      v73[5] = (float64x2_t)v78.u64[1];
      v73[8] = v72;
      v73[9] = v74;
      v70 += 416;
    }
    while (v70 != v71);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 576) + 1264) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 576) + 1264, __p);
    v81 = __p[2];
    if (__p[2])
    {
      do
      {
        v82 = (_QWORD *)*v81;
        operator delete(v81);
        v81 = v82;
      }
      while (v82);
    }
    v83 = __p[0];
    __p[0] = 0;
    if (v83)
      operator delete(v83);
  }
  return v22;
}

