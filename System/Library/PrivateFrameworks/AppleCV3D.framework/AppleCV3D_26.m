void sub_20F2774A8(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;

  if (LOBYTE(STACK[0x488]) && SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x530]);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  sub_20E863784((uint64_t)&STACK[0x580]);
  v2 = (void *)STACK[0x2D0];
  sub_20E991750((void **)&STACK[0x390]);
  if (v2)
  {
    operator delete(v2);
    v3 = (void *)STACK[0x408];
    if (!STACK[0x408])
      goto LABEL_11;
  }
  else
  {
    v3 = (void *)STACK[0x408];
    if (!STACK[0x408])
    {
LABEL_11:
      sub_20F240E3C((uint64_t)&STACK[0x420]);
      _Unwind_Resume(a1);
    }
  }
  STACK[0x410] = (unint64_t)v3;
  operator delete(v3);
  goto LABEL_11;
}

double sub_20F277CA0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  return result;
}

double sub_20F277CE0(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, char a5)
{
  __int128 *v5;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  double result;
  __int128 *i;
  __int128 *v17;
  _DWORD *v18;
  _QWORD *v19;
  char *v20;
  void *v21;
  __int128 v22;
  int v23;
  void *__p[2];
  char *v25;

  v5 = a3[1];
  if (*a3 != v5)
  {
    v8 = *(_DWORD *)(a1 + 1092);
    if (v8)
    {
      if (v8 == 1 && a5)
      {
        sub_20F27B5E0(*(_QWORD *)(a2 + 8), (uint64_t)a3, *(_DWORD *)(a1 + 80), (uint64_t)__p);
        v9 = *(char **)a4;
        if (*(_QWORD *)a4)
        {
          v10 = *(char **)(a4 + 8);
          v11 = *(char **)a4;
          if (v10 != v9)
          {
            v12 = *(char **)(a4 + 8);
            do
            {
              v14 = (void *)*((_QWORD *)v12 - 3);
              v12 -= 24;
              v13 = v14;
              if (v14)
              {
                *((_QWORD *)v10 - 2) = v13;
                operator delete(v13);
              }
              v10 = v12;
            }
            while (v12 != v9);
            v11 = *(char **)a4;
          }
          *(_QWORD *)(a4 + 8) = v9;
          operator delete(v11);
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
        }
        result = *(double *)__p;
        *(_OWORD *)a4 = *(_OWORD *)__p;
        *(_QWORD *)(a4 + 16) = v25;
      }
    }
    else if (a5)
    {
      sub_20ED9C3C4(a4, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*a3) >> 3));
      v17 = *a3;
      for (i = a3[1]; v17 != i; v17 = (__int128 *)((char *)v17 + 24))
      {
        v22 = *v17;
        v23 = *((_DWORD *)v17 + 4);
        v18 = operator new(0x18uLL);
        __p[1] = v18 + 6;
        v25 = (char *)(v18 + 6);
        *(_OWORD *)v18 = v22;
        v18[4] = v23;
        __p[0] = v18;
        v19 = *(_QWORD **)(a4 + 8);
        if ((unint64_t)v19 < *(_QWORD *)(a4 + 16))
        {
          *v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
          result = *(double *)__p;
          *(_OWORD *)v19 = *(_OWORD *)__p;
          v19[2] = v25;
          *(_QWORD *)(a4 + 8) = v19 + 3;
        }
        else
        {
          v20 = sub_20ED9C854((char **)a4, (uint64_t)__p);
          v21 = __p[0];
          *(_QWORD *)(a4 + 8) = v20;
          if (v21)
          {
            __p[1] = v21;
            operator delete(v21);
          }
        }
      }
    }
  }
  return result;
}

void sub_20F277EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F277EE0()
{
  return 5;
}

void sub_20F277EE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F277EF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F277F28(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (v1)
  {
    *(_QWORD *)(v1 + 400) = &off_24C9FC540;
    v2 = *(void **)(v1 + 408);
    if (v2)
    {
      *(_QWORD *)(v1 + 416) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 392))
      sub_20F279C38((void **)(v1 + 16));
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *sub_20F277F9C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FC540;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F277FD8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FC540;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20F278024(_QWORD *a1, void *__src, __int128 *a3)
{
  void *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;

  v6 = (void *)a1[1];
  v7 = a1[2];
  if (v6 == (void *)v7)
  {
    v8 = *((_DWORD *)a3 + 4);
LABEL_9:
    v21 = *a3;
    v10 = a1[3];
    if (v7 >= v10)
    {
      v12 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v7 - (_QWORD)v6) >> 3) + 1;
      if (v12 > 0x7A44C6AFC2DD9CLL)
        sub_20E867F44();
      v13 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v10 - (_QWORD)v6) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3D226357E16ECELL)
        v14 = 0x7A44C6AFC2DD9CLL;
      else
        v14 = v12;
      if (v14 > 0x7A44C6AFC2DD9CLL)
        sub_20E877A38();
      v15 = 536 * v14;
      v16 = (char *)operator new(536 * v14);
      v17 = &v16[8 * ((uint64_t)(v7 - (_QWORD)v6) >> 3)];
      v18 = &v16[v15];
      memcpy(v17, __src, 0x200uLL);
      *((_OWORD *)v17 + 32) = *a3;
      *((_DWORD *)v17 + 132) = v8;
      v11 = v17 + 536;
      if (v6 == (void *)v7)
      {
        a1[1] = v17;
        a1[2] = v11;
        a1[3] = v18;
        if (!v6)
          goto LABEL_22;
      }
      else
      {
        do
        {
          v19 = v17 - 536;
          memcpy(v17 - 536, (const void *)(v7 - 536), 0x200uLL);
          v20 = *(_QWORD *)(v7 - 8);
          *(_OWORD *)(v17 - 24) = *(_OWORD *)(v7 - 24);
          *((_QWORD *)v17 - 1) = v20;
          v7 -= 536;
          v17 -= 536;
        }
        while ((void *)v7 != v6);
        a1[1] = v19;
        a1[2] = v11;
        a1[3] = v18;
        if (!v6)
          goto LABEL_22;
      }
      operator delete(v6);
    }
    else
    {
      memmove((void *)v7, __src, 0x200uLL);
      *(_OWORD *)(v7 + 512) = v21;
      *(_DWORD *)(v7 + 528) = v8;
      v11 = (char *)(v7 + 536);
    }
LABEL_22:
    a1[2] = v11;
    return;
  }
  v8 = *((_DWORD *)a3 + 4);
  v9 = a1[1];
  while (*(_DWORD *)(v9 + 528) != v8
       || *(_QWORD *)(v9 + 512) != *(_QWORD *)a3
       || *(_DWORD *)(v9 + 520) != *((_DWORD *)a3 + 2))
  {
    v9 += 536;
    if (v9 == v7)
      goto LABEL_9;
  }
  memcpy((void *)v9, __src, 0x200uLL);
}

_QWORD *sub_20F278294(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result[1];
  v3 = result[2];
  if (v2 != v3)
  {
    v4 = result;
    v5 = 0;
    while (1)
    {
      if (*(_DWORD *)(v2 + v5 + 528) == *(_DWORD *)(a2 + 16) && *(_QWORD *)(v2 + v5 + 512) == *(_QWORD *)a2)
      {
        v6 = v2 + v5;
        if (*(_DWORD *)(v2 + v5 + 520) == *(_DWORD *)(a2 + 8))
          break;
      }
      v5 += 536;
      if (v2 + v5 == v3)
        return result;
    }
    if (v6 + 536 != v3)
    {
      do
      {
        v7 = v6 + 536;
        result = memcpy((void *)v6, (const void *)(v6 + 536), 0x200uLL);
        *(_OWORD *)(v6 + 512) = *(_OWORD *)(v6 + 1048);
        *(_DWORD *)(v6 + 528) = *(_DWORD *)(v6 + 1064);
        v8 = v6 + 1072;
        v6 += 536;
      }
      while (v8 != v3);
      v6 = v7;
    }
    v4[2] = v6;
  }
  return result;
}

void sub_20F278360(uint64_t a1@<X0>, float32x4_t *a2@<X1>, _QWORD *a3@<X8>, float32x4_t a4@<Q0>)
{
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0xBFF0000000000000;
  *((_DWORD *)a3 + 4) = -1;
  sub_20F2783C8(a1, a2, 1uLL, (uint64_t *)&v7, a4);
  v5 = v7;
  if (v7 == v8)
  {
    if (!v7)
      return;
  }
  else
  {
    v6 = v7[1];
    *(_OWORD *)a3 = *v7;
    *((_OWORD *)a3 + 1) = v6;
  }
  v8 = v5;
  operator delete(v5);
}

void sub_20F2783C8(uint64_t a1@<X0>, float32x4_t *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>, float32x4_t a5@<Q0>)
{
  uint64_t v7;
  uint64_t i;
  __n128 v10;
  _BYTE *v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int32x4_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int32x4_t v54;
  int32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int32x4_t v58;
  int32x4_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int32x4_t v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  int32x4_t v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int32x4_t v70;
  int32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 *v79;
  __n128 v80;
  __n128 *v81;
  uint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 v85;
  uint64_t v86;
  unint64_t v87;
  double v88;
  __n128 v89;
  __n128 *v90;
  __n128 v91;
  __n128 *v92;
  char *v93;
  __n128 v94;
  _BYTE *v95;
  unint64_t v96;
  __n128 v97;
  __n128 *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  __int128 v104;
  char *v105;
  char *v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  __n128 *v112;
  __n128 v113;
  __n128 *v114;
  uint64_t v115;
  uint64_t v116;
  __n128 *v117;
  __n128 v118;
  uint64_t v119;
  unint64_t v120;
  __n128 v121;
  __n128 *v122;
  __n128 v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void *__p;
  _BYTE *v129;
  uint64_t v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  uint64_t v134;

  __p = 0;
  v129 = 0;
  v130 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); v7 != i; v7 += 536)
  {
    v12 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 480), a2[30]);
    v13 = (int32x4_t)vsubq_f32(*(float32x4_t *)v7, *a2);
    v14 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
    v15 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 16), a2[1]);
    v16 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v17 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)v13.i8, 1), v14, v14), (float32x2_t)vdup_laneq_s32(v13, 3), (float32x4_t)v13, 3), *(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), *(float32x2_t *)v15.i8,
                1),
              v16,
              v16),
            (float32x2_t)vdup_laneq_s32(v15, 3),
            (float32x4_t)v15,
            3);
    v18 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 32), a2[2]);
    v13.i64[0] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
    v19 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 48), a2[3]);
    v20 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
    v21 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v17, *(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)v18.i8, 1), *(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_laneq_s32(v18, 3), (float32x4_t)v18, 3), *(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1), *(float32x2_t *)v19.i8,
                1),
              v20,
              v20),
            (float32x2_t)vdup_laneq_s32(v19, 3),
            (float32x4_t)v19,
            3);
    v22 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 64), a2[4]);
    v19.i64[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v23 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 80), a2[5]);
    v24 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    v25 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v21, *(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(float32x2_t *)v22.i8, 1), *(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)vdup_laneq_s32(v22, 3), (float32x4_t)v22, 3), *(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v23.i8,
                1),
              v24,
              v24),
            (float32x2_t)vdup_laneq_s32(v23, 3),
            (float32x4_t)v23,
            3);
    v26 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 96), a2[6]);
    v23.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    v27 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 112), a2[7]);
    v28 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    v29 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v25, *(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_laneq_s32(v26, 3), (float32x4_t)v26, 3), *(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1), *(float32x2_t *)v27.i8,
                1),
              v28,
              v28),
            (float32x2_t)vdup_laneq_s32(v27, 3),
            (float32x4_t)v27,
            3);
    v30 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 128), a2[8]);
    v27.i64[0] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    v31 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 144), a2[9]);
    v32 = (float32x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    v33 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v29, *(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), *(float32x2_t *)v30.i8, 1), *(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)vdup_laneq_s32(v30, 3), (float32x4_t)v30, 3), *(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), *(float32x2_t *)v31.i8,
                1),
              v32,
              v32),
            (float32x2_t)vdup_laneq_s32(v31, 3),
            (float32x4_t)v31,
            3);
    v34 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 160), a2[10]);
    v31.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v35 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 176), a2[11]);
    v36 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v37 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v33, *(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), *(float32x2_t *)v34.i8, 1), *(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_laneq_s32(v34, 3), (float32x4_t)v34, 3), *(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1), *(float32x2_t *)v35.i8,
                1),
              v36,
              v36),
            (float32x2_t)vdup_laneq_s32(v35, 3),
            (float32x4_t)v35,
            3);
    v38 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 192), a2[12]);
    v35.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
    v39 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 208), a2[13]);
    v40 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
    v41 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v37, *(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1), *(float32x2_t *)v38.i8, 1), *(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_laneq_s32(v38, 3), (float32x4_t)v38, 3), *(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1), *(float32x2_t *)v39.i8,
                1),
              v40,
              v40),
            (float32x2_t)vdup_laneq_s32(v39, 3),
            (float32x4_t)v39,
            3);
    v42 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 224), a2[14]);
    v39.i64[0] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    v43 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 240), a2[15]);
    v44 = (float32x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
    v45 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v41, *(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1), *(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)vdup_laneq_s32(v42, 3), (float32x4_t)v42, 3), *(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v43.i8,
                1),
              v44,
              v44),
            (float32x2_t)vdup_laneq_s32(v43, 3),
            (float32x4_t)v43,
            3);
    v46 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 256), a2[16]);
    v43.i64[0] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
    v47 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 272), a2[17]);
    v48 = (float32x2_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
    v49 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v45, *(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1), *(float32x2_t *)v46.i8, 1), *(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), (float32x2_t)vdup_laneq_s32(v46, 3), (float32x4_t)v46, 3), *(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), *(float32x2_t *)v47.i8,
                1),
              v48,
              v48),
            (float32x2_t)vdup_laneq_s32(v47, 3),
            (float32x4_t)v47,
            3);
    v50 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 288), a2[18]);
    v47.i64[0] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
    v51 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 304), a2[19]);
    v52 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
    v53 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v49, *(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 1), *(float32x2_t *)v50.i8, 1), *(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)vdup_laneq_s32(v50, 3), (float32x4_t)v50, 3), *(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), *(float32x2_t *)v51.i8,
                1),
              v52,
              v52),
            (float32x2_t)vdup_laneq_s32(v51, 3),
            (float32x4_t)v51,
            3);
    v54 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 320), a2[20]);
    v51.i64[0] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
    v55 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 336), a2[21]);
    v56 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u64[0];
    v57 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v53, *(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1), *(float32x2_t *)v54.i8, 1), *(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)vdup_laneq_s32(v54, 3), (float32x4_t)v54, 3), *(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1), *(float32x2_t *)v55.i8,
                1),
              v56,
              v56),
            (float32x2_t)vdup_laneq_s32(v55, 3),
            (float32x4_t)v55,
            3);
    v58 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 352), a2[22]);
    v55.i64[0] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
    v59 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 368), a2[23]);
    v60 = (float32x2_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
    v61 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v57, *(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 1), *(float32x2_t *)v58.i8, 1), *(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)vdup_laneq_s32(v58, 3), (float32x4_t)v58, 3), *(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), *(float32x2_t *)v59.i8,
                1),
              v60,
              v60),
            (float32x2_t)vdup_laneq_s32(v59, 3),
            (float32x4_t)v59,
            3);
    v62 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 384), a2[24]);
    v59.i64[0] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
    v63 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 400), a2[25]);
    v64 = (float32x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
    v65 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v61, *(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1), *(float32x2_t *)v62.i8, 1), *(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)vdup_laneq_s32(v62, 3), (float32x4_t)v62, 3), *(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1), *(float32x2_t *)v63.i8,
                1),
              v64,
              v64),
            (float32x2_t)vdup_laneq_s32(v63, 3),
            (float32x4_t)v63,
            3);
    v66 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 416), a2[26]);
    v63.i64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
    v67 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 432), a2[27]);
    v68 = (float32x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
    v69 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v65, *(float32x2_t *)v66.i8, *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(float32x2_t *)v66.i8, 1), *(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)vdup_laneq_s32(v66, 3), (float32x4_t)v66, 3), *(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1), *(float32x2_t *)v67.i8,
                1),
              v68,
              v68),
            (float32x2_t)vdup_laneq_s32(v67, 3),
            (float32x4_t)v67,
            3);
    v70 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 448), a2[28]);
    v71 = (int32x4_t)vsubq_f32(*(float32x4_t *)(v7 + 464), a2[29]);
    v72 = (float32x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
    v67.i64[0] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
    v73 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(v69, *(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1), *(float32x2_t *)v70.i8, 1), v72, v72), (float32x2_t)vdup_laneq_s32(v70, 3), (float32x4_t)v70, 3), *(float32x2_t *)v71.i8, *(float32x2_t *)v71.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1), *(float32x2_t *)v71.i8, 1);
    v70.i64[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    a5 = vsubq_f32(*(float32x4_t *)(v7 + 496), a2[31]);
    v74 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
    v75 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(v73, *(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)vdup_laneq_s32(v71, 3), (float32x4_t)v71, 3), *(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1), *(float32x2_t *)v12.i8, 1), *(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8),
                    (float32x2_t)vdup_laneq_s32(v12, 3),
                    (float32x4_t)v12,
                    3),
                  *(float32x2_t *)a5.f32,
                  *(float32x2_t *)a5.f32),
                (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1),
                *(float32x2_t *)a5.f32,
                1),
              v74,
              v74),
            (float32x2_t)vdup_laneq_s32((int32x4_t)a5, 3),
            a5,
            3).f32[0];
    *(double *)a5.i64 = v75;
    v76 = __p;
    v11 = v129;
    v77 = (v129 - (_BYTE *)__p) >> 5;
    if (v77 >= a3)
    {
      if (*((double *)__p + 3) <= *(double *)a5.i64)
        continue;
      if (v129 - (_BYTE *)__p >= 33)
      {
        v78 = 0;
        v131 = *(__n128 *)__p;
        v132 = *((__n128 *)__p + 1);
        v79 = (__n128 *)__p;
        do
        {
          v81 = v79;
          v79 += 2 * v78 + 2;
          v82 = 2 * v78;
          v78 = (2 * v78) | 1;
          v83 = v82 + 2;
          if (v83 < v77 && v79[1].n128_f64[1] < v79[3].n128_f64[1])
          {
            v79 += 2;
            v78 = v83;
          }
          v80 = v79[1];
          *v81 = *v79;
          v81[1] = v80;
        }
        while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
        v84 = (__n128 *)(v11 - 32);
        if (v79 == v84)
        {
          v10 = v132;
          *v79 = v131;
          v79[1] = v10;
        }
        else
        {
          v85 = v84[1];
          *v79 = *v84;
          v79[1] = v85;
          *v84 = v131;
          v84[1] = v132;
          v86 = (char *)v79 - v76 + 32;
          if (v86 >= 33)
          {
            v87 = (((unint64_t)v86 >> 5) - 2) >> 1;
            v88 = v79[1].n128_f64[1];
            if (*(double *)&v76[32 * v87 + 24] < v88)
            {
              v89 = *v79;
              v134 = v79[1].n128_i64[0];
              v133 = v89;
              do
              {
                v90 = v79;
                v79 = (__n128 *)&v76[32 * v87];
                v91 = v79[1];
                *v90 = *v79;
                v90[1] = v91;
                if (!v87)
                  break;
                v87 = (v87 - 1) >> 1;
              }
              while (*(double *)&v76[32 * v87 + 24] < v88);
              *v79 = v133;
              v79[1].n128_u64[0] = v134;
              v79[1].n128_f64[1] = v88;
            }
          }
        }
        v11 = v129;
      }
      v129 = v11 - 32;
    }
    v132.n128_u64[0] = 0;
    v131 = *(__n128 *)(v7 + 512);
    v132.n128_u32[0] = *(_DWORD *)(v7 + 528);
    v132.n128_f64[1] = v75;
    sub_20EDB0128((char **)&__p, &v131);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    if (a3 >> 59)
LABEL_70:
      sub_20E867F44();
    v92 = (__n128 *)operator new(32 * a3);
    *a4 = (uint64_t)v92;
    a4[1] = (uint64_t)v92;
    a4[2] = (uint64_t)&v92[2 * a3];
    v93 = (char *)__p;
    if (__p != v129)
      goto LABEL_30;
    goto LABEL_63;
  }
  v92 = 0;
  v93 = (char *)__p;
  if (__p != v129)
  {
LABEL_30:
    while (1)
    {
      v96 = a4[2];
      if ((unint64_t)v92 >= v96)
        break;
      a5 = *(float32x4_t *)v93;
      v97 = *((__n128 *)v93 + 1);
      *v92 = *(__n128 *)v93;
      v92[1] = v97;
      v92 += 2;
LABEL_45:
      a4[1] = (uint64_t)v92;
      v93 = (char *)__p;
      v95 = v129;
      v108 = v129 - (_BYTE *)__p;
      if (v129 - (_BYTE *)__p >= 33)
      {
        v109 = 0;
        v110 = v108 >> 5;
        v131 = *(__n128 *)__p;
        v132 = *((__n128 *)__p + 1);
        v111 = (unint64_t)((v108 >> 5) - 2) >> 1;
        v112 = (__n128 *)__p;
        do
        {
          v114 = v112;
          v112 += 2 * v109 + 2;
          v115 = 2 * v109;
          v109 = (2 * v109) | 1;
          v116 = v115 + 2;
          if (v116 < v110 && v112[1].n128_f64[1] < v112[3].n128_f64[1])
          {
            v112 += 2;
            v109 = v116;
          }
          v113 = v112[1];
          *v114 = *v112;
          v114[1] = v113;
        }
        while (v109 <= v111);
        v117 = (__n128 *)(v95 - 32);
        if (v112 == v117)
        {
          a5 = (float32x4_t)v131;
          v94 = v132;
          *v112 = v131;
          v112[1] = v94;
        }
        else
        {
          v118 = v117[1];
          *v112 = *v117;
          v112[1] = v118;
          *v117 = v131;
          a5 = (float32x4_t)v132;
          v117[1] = v132;
          v119 = (char *)v112 - v93 + 32;
          if (v119 >= 33)
          {
            v120 = (((unint64_t)v119 >> 5) - 2) >> 1;
            a5.i64[0] = v112[1].n128_i64[1];
            if (*(double *)&v93[32 * v120 + 24] < *(double *)a5.i64)
            {
              v121 = *v112;
              v134 = v112[1].n128_i64[0];
              v133 = v121;
              do
              {
                v122 = v112;
                v112 = (__n128 *)&v93[32 * v120];
                v123 = v112[1];
                *v122 = *v112;
                v122[1] = v123;
                if (!v120)
                  break;
                v120 = (v120 - 1) >> 1;
              }
              while (*(double *)&v93[32 * v120 + 24] < *(double *)a5.i64);
              *v112 = v133;
              v112[1].n128_u64[0] = v134;
              v112[1].n128_u64[1] = a5.i64[0];
            }
          }
        }
        v93 = (char *)__p;
        v95 = v129;
      }
      v129 = v95 - 32;
      if (v93 == v95 - 32)
      {
        v125 = *a4;
        goto LABEL_64;
      }
    }
    v98 = (__n128 *)*a4;
    v99 = ((uint64_t)v92 - *a4) >> 5;
    v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 59)
      goto LABEL_70;
    v101 = v96 - (_QWORD)v98;
    if (v101 >> 4 > v100)
      v100 = v101 >> 4;
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0)
      v102 = 0x7FFFFFFFFFFFFFFLL;
    else
      v102 = v100;
    if (v102)
    {
      if (v102 >> 59)
        sub_20E877A38();
      v103 = (char *)operator new(32 * v102);
      a5 = *(float32x4_t *)v93;
      v104 = *((_OWORD *)v93 + 1);
      v105 = &v103[32 * v99];
      *(_OWORD *)v105 = *(_OWORD *)v93;
      *((_OWORD *)v105 + 1) = v104;
      if (v92 != v98)
      {
LABEL_41:
        v106 = v105;
        do
        {
          a5 = (float32x4_t)v92[-2];
          v107 = v92[-1];
          *((float32x4_t *)v106 - 2) = a5;
          *((__n128 *)v106 - 1) = v107;
          v106 -= 32;
          v92 -= 2;
        }
        while (v92 != v98);
        v92 = (__n128 *)(v105 + 32);
        *a4 = (uint64_t)v106;
        a4[1] = (uint64_t)(v105 + 32);
        a4[2] = (uint64_t)&v103[32 * v102];
        if (!v98)
          goto LABEL_45;
LABEL_44:
        operator delete(v98);
        goto LABEL_45;
      }
    }
    else
    {
      v103 = 0;
      a5 = *(float32x4_t *)v93;
      v124 = *((_OWORD *)v93 + 1);
      v105 = (char *)(32 * v99);
      *(_OWORD *)v105 = *(_OWORD *)v93;
      *((_OWORD *)v105 + 1) = v124;
      if (v92 != v98)
        goto LABEL_41;
    }
    v98 = v92;
    v92 = (__n128 *)(v105 + 32);
    *a4 = (uint64_t)v105;
    a4[1] = (uint64_t)(v105 + 32);
    a4[2] = (uint64_t)&v103[32 * v102];
    if (!v98)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_63:
  v125 = (uint64_t)v92;
LABEL_64:
  v126 = 126 - 2 * __clz(((uint64_t)v92 - v125) >> 5);
  if (v92 == (__n128 *)v125)
    v127 = 0;
  else
    v127 = v126;
  sub_20F278DEC(v125, v92->n128_f64, (uint64_t)&v131, v127, 1, (__n128)a5);
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
}

void sub_20F278D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  if (v11)
  {
    *(_QWORD *)(v10 + 8) = v11;
    operator delete(v11);
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20F278D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    while (*(_DWORD *)(v2 + 528) != *(_DWORD *)(a2 + 16)
         || *(_QWORD *)(v2 + 512) != *(_QWORD *)a2
         || *(_DWORD *)(v2 + 520) != *(_DWORD *)(a2 + 8))
    {
      v2 += 536;
      if (v2 == v3)
        return 0;
    }
  }
  v4 = v2 == v3;
  v5 = v2 & 0xFFFFFFFFFFFFFF00;
  v2 = v2;
  if (v4)
  {
    v2 = 0;
    v5 = 0;
  }
  return v5 | v2;
}

__n128 sub_20F278DEC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  double *v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  double v18;
  double *v19;
  double v20;
  __int128 v21;
  double v22;
  double *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __int128 *v31;
  unint64_t v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  unint64_t v49;
  double *v50;
  double v51;
  double v52;
  double *v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double v64;
  double v65;
  __int128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  uint64_t v72;
  double v73;
  unint64_t v74;
  double *v75;
  double *v76;
  double v77;
  double *v78;
  double v79;
  double *v80;
  __int128 v81;
  double v82;
  double v83;
  __n128 *v84;
  __int128 v85;
  BOOL v86;
  __n128 v87;
  unint64_t v88;
  double v89;
  unint64_t v90;
  double v91;
  double *v92;
  double *v93;
  double v94;
  __int128 v95;
  double v96;
  double v97;
  __n128 *v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  double v102;
  __int128 v103;
  __int128 v104;
  __n128 *v105;
  double v106;
  double v107;
  __int128 v108;
  double *v109;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __n128 v120;
  __int128 v121;
  __int128 v122;
  double v123;
  double *v124;
  __int128 v125;
  double v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __n128 v130;
  __int128 v131;
  __int128 v132;
  __n128 v133;
  __int128 v134;
  __int128 v135;
  double *v136;
  __n128 v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __int128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __int128 v163;
  __n128 v164;
  __int128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __int128 v173;
  __n128 v174;
  __n128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __n128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;

BOOL sub_20F279864(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  __int128 *v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (*(double *)(a2 - 8) >= *(double *)(a1 + 24))
        return 1;
      v13 = *(_OWORD *)a1;
      v12 = *(_OWORD *)(a1 + 16);
      v14 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a2 - 32) = v13;
      *(_OWORD *)(a2 - 16) = v12;
      return 1;
    case 3:
      v15 = (_OWORD *)(a1 + 32);
      v16 = (_OWORD *)(a2 - 32);
      v17 = *(double *)(a1 + 56);
      v18 = *(double *)(a2 - 8);
      if (v17 < *(double *)(a1 + 24))
      {
        if (v18 >= v17)
        {
          v57 = *(_OWORD *)a1;
          v56 = *(_OWORD *)(a1 + 16);
          v58 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v58;
          *v15 = v57;
          *(_OWORD *)(a1 + 48) = v56;
          if (*(double *)(a2 - 8) >= *(double *)(a1 + 56))
            return 1;
          v20 = *v15;
          v19 = *(_OWORD *)(a1 + 48);
          v59 = *(_OWORD *)(a2 - 16);
          *v15 = *v16;
          *(_OWORD *)(a1 + 48) = v59;
        }
        else
        {
          v20 = *(_OWORD *)a1;
          v19 = *(_OWORD *)(a1 + 16);
          v21 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v21;
        }
        *v16 = v20;
        *(_OWORD *)(a2 - 16) = v19;
        return 1;
      }
      if (v18 >= v17)
        return 1;
      v36 = *v15;
      v35 = *(_OWORD *)(a1 + 48);
      v37 = *(_OWORD *)(a2 - 16);
      *v15 = *v16;
      *(_OWORD *)(a1 + 48) = v37;
      *v16 = v36;
      *(_OWORD *)(a2 - 16) = v35;
      if (*(double *)(a1 + 56) >= *(double *)(a1 + 24))
        return 1;
      goto LABEL_47;
    case 4:
      v15 = (_OWORD *)(a1 + 32);
      v22 = (_OWORD *)(a1 + 64);
      v23 = *(double *)(a1 + 56);
      v24 = *(double *)(a1 + 24);
      v25 = *(double *)(a1 + 88);
      if (v23 >= v24)
      {
        if (v25 < v23)
        {
          v39 = *v15;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v15 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (*(double *)(a1 + 56) < v24)
          {
            v42 = *(_OWORD *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 16) = v43;
            *v15 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v25 >= v23)
        {
          v61 = *(_OWORD *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v62;
          *v15 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v25 >= *(double *)(a1 + 56))
            goto LABEL_44;
          v27 = *v15;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v15 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(_OWORD *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_44:
      if (*(double *)(a2 - 8) >= *(double *)(a1 + 88))
        return 1;
      v64 = (_OWORD *)(a2 - 32);
      v66 = *v22;
      v65 = *(_OWORD *)(a1 + 80);
      v67 = *(_OWORD *)(a2 - 16);
      *v22 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 80) = v67;
      *v64 = v66;
      v64[1] = v65;
      if (*(double *)(a1 + 88) >= *(double *)(a1 + 56))
        return 1;
      v69 = *v15;
      v68 = *(_OWORD *)(a1 + 48);
      v70 = *(_OWORD *)(a1 + 80);
      *v15 = *v22;
      *(_OWORD *)(a1 + 48) = v70;
      *v22 = v69;
      *(_OWORD *)(a1 + 80) = v68;
      if (*(double *)(a1 + 56) >= *(double *)(a1 + 24))
        return 1;
LABEL_47:
      v72 = *(_OWORD *)a1;
      v71 = *(_OWORD *)(a1 + 16);
      v73 = v15[1];
      *(_OWORD *)a1 = *v15;
      *(_OWORD *)(a1 + 16) = v73;
      *v15 = v72;
      v15[1] = v71;
      return 1;
    case 5:
      sub_20EDB10FC((double *)a1, (double *)(a1 + 32), (double *)(a1 + 64), (double *)(a1 + 96), (__int128 *)(a2 - 32), a3);
      return 1;
    default:
      v4 = a1 + 64;
      v5 = (__int128 *)(a1 + 32);
      v6 = *(double *)(a1 + 56);
      v7 = *(double *)(a1 + 24);
      v8 = *(double *)(a1 + 88);
      if (v6 >= v7)
      {
        if (v8 < v6)
        {
          v30 = *v5;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 48) = v31;
          *(_OWORD *)v4 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (*(double *)(a1 + 56) < v7)
          {
            v33 = *(_OWORD *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)a1 = *v5;
            *(_OWORD *)(a1 + 16) = v34;
            *v5 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v8 >= v6)
        {
          v45 = *(_OWORD *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v5;
          *(_OWORD *)(a1 + 16) = v46;
          *v5 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v8 >= *(double *)(a1 + 56))
            goto LABEL_28;
          v10 = *v5;
          v9 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v10 = *(_OWORD *)a1;
          v9 = *(_OWORD *)(a1 + 16);
          v11 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 16) = v11;
        }
        *(_OWORD *)v4 = v10;
        *(_OWORD *)(a1 + 80) = v9;
      }
LABEL_28:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      break;
  }
  while (1)
  {
    v52 = *(double *)(v48 + 24);
    if (v52 < *(double *)(v4 + 24))
    {
      v74 = *(_OWORD *)v48;
      v75 = *(_QWORD *)(v48 + 16);
      v53 = v49;
      do
      {
        v54 = a1 + v53;
        v55 = *(_OWORD *)(a1 + v53 + 80);
        *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
        *(_OWORD *)(v54 + 112) = v55;
        if (v53 == -64)
        {
          v51 = a1;
          goto LABEL_31;
        }
        v53 -= 32;
      }
      while (v52 < *(double *)(v54 + 56));
      v51 = a1 + v53 + 96;
LABEL_31:
      *(_OWORD *)v51 = v74;
      *(_QWORD *)(v51 + 16) = v75;
      *(double *)(v51 + 24) = v52;
      if (++v50 == 8)
        return v48 + 32 == a2;
    }
    v4 = v48;
    v49 += 32;
    v48 += 32;
    if (v48 == a2)
      return 1;
  }
}

void **sub_20F279C38(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v2 = a1[41];
  if (v2)
  {
    a1[42] = v2;
    operator delete(v2);
  }
  v3 = a1[38];
  if (v3)
  {
    a1[39] = v3;
    operator delete(v3);
  }
  sub_20F42FE8C(a1 + 11);
  v4 = a1[8];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8052888210);
  v5 = (char *)*a1;
  if (*a1)
  {
    v6 = (char *)a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        if (v8)
        {
          *((_QWORD *)v6 - 2) = v8;
          operator delete(v8);
        }
        v9 = *((_QWORD *)v6 - 7);
        if (v9)
          MEMORY[0x212BC6368](v9, 0x1000C80BDFB0063);
        v10 = (void *)*((_QWORD *)v6 - 14);
        if (v10)
        {
          *((_QWORD *)v6 - 13) = v10;
          operator delete(v10);
        }
        v6 -= 112;
      }
      while (v6 != v5);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F279D18(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  void *v11;

  *a1 = off_24C9FC008;
  sub_20F04BD64(a1 + 140);
  v2 = (_QWORD *)a1[139];
  a1[139] = 0;
  if (v2)
    sub_20F04BCC8((uint64_t)(a1 + 139), v2);
  sub_20F04BD64(a1 + 138);
  v3 = (_QWORD *)a1[137];
  a1[137] = 0;
  if (v3)
    sub_20F04BCC8((uint64_t)(a1 + 137), v3);
  v4 = (std::__shared_weak_count *)a1[135];
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[133];
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)a1[133];
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (void *)a1[118];
  if (v10)
  {
    a1[119] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[115];
  if (v11)
  {
    a1[116] = v11;
    operator delete(v11);
  }
  sub_20E869B60((uint64_t)(a1 + 1));
  return a1;
}

void sub_20F279E20(uint64_t a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  size_t v48;
  const char *v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  const char *v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD v67[3];
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  void *object;
  void *v76[2];
  unint64_t v77;
  char v78;
  void *__p[2];
  unint64_t v80;
  char v81;
  void *v82[2];
  char v83;
  char v84;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a2);
    if (v6 >> 61)
      sub_20E867F44();
    v8 = (char *)operator new(0x5555555555555558 * (v4 - *a2));
    *a3 = v8;
    a3[1] = v8;
    a3[2] = &v8[8 * v6];
    v64 = v4;
    do
    {
      v11 = *(char **)(a1 + 40);
      v10 = *(char **)(a1 + 48);
      if (v10 != v11)
      {
        v12 = (v10 - v11) >> 4;
        v13 = *((_DWORD *)v5 + 4);
        v14 = *v5;
        while (1)
        {
          v15 = v12 >> 1;
          v16 = &v11[16 * (v12 >> 1)];
          v17 = *(_QWORD *)v16;
          v18 = *(_DWORD *)(*(_QWORD *)v16 + 16);
          v19 = v18 >= v13;
          if (v18 != v13)
            goto LABEL_15;
          if (*(_QWORD *)v17 >= v14)
            break;
LABEL_9:
          v11 = v16 + 16;
          v15 = v12 + ~v15;
LABEL_10:
          v12 = v15;
          if (!v15)
            goto LABEL_18;
        }
        if (*(_QWORD *)v17 != v14)
          goto LABEL_10;
        v19 = *(_DWORD *)(v17 + 8) >= *((_DWORD *)v5 + 2);
LABEL_15:
        if (v19)
          goto LABEL_10;
        goto LABEL_9;
      }
LABEL_18:
      if (v11 == v10)
        goto LABEL_46;
      v20 = *(_QWORD *)v11;
      v21 = *(char **)(a1 + 48);
      if (*(_DWORD *)(*(_QWORD *)v11 + 16) == *((_DWORD *)v5 + 4))
      {
        v21 = *(char **)(a1 + 48);
        if (*(_QWORD *)v20 == *v5)
        {
          if (*(_DWORD *)(v20 + 8) == *((_DWORD *)v5 + 2))
            v21 = v11;
          else
            v21 = *(char **)(a1 + 48);
        }
      }
      if (v10 == v21 || (v22 = *(_QWORD *)v21) == 0)
      {
LABEL_46:
        sub_20F27AFA0(&v74);
        if (**(int **)(v74 + 56) > 3)
          goto LABEL_6;
        v43 = *(unsigned __int8 *)(v74 + 72);
        v44 = sub_20E8C31DC(v74, "OSLogSurrogateAppender", 1, 0);
        v45 = v44 + 16;
        if (!v44)
          v45 = 0;
        if (!v43 && v44 == 0)
          goto LABEL_6;
        v66 = v45;
        v67[0] = &v74;
        v67[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v67[2] = std::chrono::system_clock::now().__d_.__rep_;
        v68 = 3;
        v69 = "unknown file";
        v70 = 277;
        v71 = "unknown function";
        v72 = 0;
        v73 = 0;
        v47 = *(_QWORD *)v67[0];
        if (*(char *)(*(_QWORD *)v67[0] + 39) < 0)
        {
          v49 = *(const char **)(v47 + 16);
          v48 = *(_QWORD *)(v47 + 24);
          v65 = (uint64_t *)(*(_QWORD *)v67[0] + 16);
          v51 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v51 & 1) == 0)
          {
LABEL_96:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v82);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v82);
              if (v84 && v83 < 0)
                operator delete(v82[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
              v4 = v64;
            }
          }
        }
        else
        {
          v48 = *(unsigned __int8 *)(*(_QWORD *)v67[0] + 39);
          v49 = (const char *)(*(_QWORD *)v67[0] + 16);
          v65 = (uint64_t *)v49;
          v50 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v50 & 1) == 0)
            goto LABEL_96;
        }
        if (byte_254A4A4F8[23] >= 0)
          v52 = byte_254A4A4F8;
        else
          v52 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v53 = byte_254A4A4F8[23];
        else
          v53 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v52, v49);
        if (v53 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v53 >= 0x17)
        {
          v55 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v53 | 7) != 0x17)
            v55 = v53 | 7;
          v56 = v55 + 1;
          v54 = operator new(v55 + 1);
          v76[1] = (void *)v53;
          v77 = v56 | 0x8000000000000000;
          v76[0] = v54;
          v4 = v64;
        }
        else
        {
          HIBYTE(v77) = v53;
          v54 = v76;
          if (!v53)
          {
LABEL_74:
            *((_BYTE *)v54 + v53) = 0;
            v78 = 1;
            if (v48 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v48 >= 0x17)
            {
              v59 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v48 | 7) != 0x17)
                v59 = v48 | 7;
              v60 = v59 + 1;
              v57 = operator new(v59 + 1);
              __p[1] = (void *)v48;
              v80 = v60 | 0x8000000000000000;
              __p[0] = v57;
            }
            else
            {
              HIBYTE(v80) = v48;
              v57 = __p;
              if (!v48)
              {
                LOBYTE(__p[0]) = 0;
                v81 = 1;
                v58 = object;
                if ((SHIBYTE(v80) & 0x80000000) == 0)
                  goto LABEL_78;
LABEL_84:
                operator delete(__p[0]);
                if (v78)
                  goto LABEL_85;
                goto LABEL_87;
              }
            }
            memmove(v57, v49, v48);
            *((_BYTE *)v57 + v48) = 0;
            v81 = 1;
            v58 = object;
            if (SHIBYTE(v80) < 0)
              goto LABEL_84;
LABEL_78:
            if (v78)
            {
LABEL_85:
              if (SHIBYTE(v77) < 0)
                operator delete(v76[0]);
            }
LABEL_87:
            if (object)
              os_release(object);
            sub_20F27B094((int)&object, v66, v65, v58, OS_LOG_TYPE_INFO);
            if (v43)
            {
              sub_20E8C003C((uint64_t)v67, "Cannot find key frame");
              sub_20E863570((uint64_t)v67);
            }
            sub_20E863570((uint64_t)v67);
            v61 = v73;
            if (v73)
            {
              p_shared_owners = (unint64_t *)&v73->__shared_owners_;
              do
                v63 = __ldaxr(p_shared_owners);
              while (__stlxr(v63 - 1, p_shared_owners));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            goto LABEL_6;
          }
        }
        memmove(v54, v52, v53);
        goto LABEL_74;
      }
      v24 = a3[1];
      v23 = (unint64_t)a3[2];
      if ((unint64_t)v24 < v23)
      {
        *(_QWORD *)v24 = v22;
        v9 = (uint64_t)(v24 + 8);
      }
      else
      {
        v25 = *a3;
        v26 = v24 - *a3;
        v27 = v26 >> 3;
        v28 = (v26 >> 3) + 1;
        if (v28 >> 61)
          sub_20E867F44();
        v29 = v23 - (_QWORD)v25;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 61)
            sub_20E877A38();
          v31 = operator new(8 * v30);
          v32 = &v31[8 * v27];
          *(_QWORD *)v32 = v22;
          v9 = (uint64_t)(v32 + 8);
          v33 = (char *)(v24 - v25);
          if (v24 != v25)
          {
LABEL_38:
            v34 = (unint64_t)(v33 - 8);
            if (v34 < 0x58)
              goto LABEL_109;
            if ((unint64_t)(v24 - &v31[v26]) < 0x20)
              goto LABEL_109;
            v35 = (v34 >> 3) + 1;
            v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
            v37 = &v24[-v36];
            v32 -= v36;
            v38 = &v31[8 * v27 - 16];
            v39 = v24 - 16;
            v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v41 = *(_OWORD *)v39;
              *(v38 - 1) = *((_OWORD *)v39 - 1);
              *v38 = v41;
              v38 -= 2;
              v39 -= 32;
              v40 -= 4;
            }
            while (v40);
            v24 = v37;
            if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_109:
              do
              {
                v42 = *((_QWORD *)v24 - 1);
                v24 -= 8;
                *((_QWORD *)v32 - 1) = v42;
                v32 -= 8;
              }
              while (v24 != v25);
            }
            v24 = *a3;
            *a3 = v32;
            a3[1] = (char *)v9;
            a3[2] = &v31[8 * v30];
            v4 = v64;
            if (!v24)
              goto LABEL_5;
LABEL_58:
            operator delete(v24);
            goto LABEL_5;
          }
        }
        else
        {
          v31 = 0;
          v32 = (char *)(8 * v27);
          *(_QWORD *)(8 * v27) = v22;
          v9 = 8 * v27 + 8;
          v33 = (char *)(v24 - v25);
          if (v24 != v25)
            goto LABEL_38;
        }
        *a3 = v32;
        a3[1] = (char *)v9;
        a3[2] = &v31[8 * v30];
        v4 = v64;
        if (v24)
          goto LABEL_58;
      }
LABEL_5:
      a3[1] = (char *)v9;
LABEL_6:
      v5 += 3;
    }
    while (v5 != v4);
  }
}

void sub_20F27A470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;

  if (*(_BYTE *)(v33 - 96) && *(char *)(v33 - 97) < 0)
    operator delete(*(void **)(v33 - 120));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  v35 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void sub_20F27A540(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  float64x2_t **v14;
  float64x2_t v15;
  double v18;
  float64x2_t v19;
  float64x2_t *v20;
  double v21;
  double v23;
  double v25;
  int64x2_t v27;
  float64x2_t v33;
  int64x2_t v34;
  float64x2_t v39;
  double v40;
  unint64_t v41;
  double *v42;
  double *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v6 = *a2;
  v5 = a2[1];
  v7 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    if ((unint64_t)v7 >= 0x5555555555555551)
      sub_20E9DEF2C();
    v10 = v7 >> 3;
    v11 = (char *)operator new(24 * (v7 >> 3));
    *a4 = v11;
    a4[1] = v11;
    a4[2] = &v11[24 * v10];
    v57 = *(double *)a3;
    v55 = *(uint64_t *)(a3 + 16);
    v56 = *(_QWORD *)(a3 + 8);
    v53 = (float64x2_t)vdupq_lane_s64(v55, 0);
    v54 = (float64x2_t)vdupq_lane_s64(v56, 0);
    do
    {
      v13 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)a1 + 1784), *v6);
      v14 = (float64x2_t **)(v13 + 5);
      if (!v13)
        v14 = 0;
      v15 = **v14;
      _D2 = (*v14)[2].f64[1];
      _Q3 = *(float64x2_t *)((char *)*v14 + 24);
      v18 = (*v14)[4].f64[0];
      v19 = (*v14)[3];
      v20 = v14[4];
      v21 = v20[1].f64[0];
      _Q7 = *v20;
      v23 = v20[2].f64[1];
      _Q17 = *(float64x2_t *)((char *)v20 + 24);
      v25 = v20[4].f64[0];
      _Q19 = v20[3];
      v27 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, v20->f64[0]), _Q3, *v20, 1), v19, v21);
      __asm { FMLA            D21, D2, V7.D[1] }
      v33.f64[0] = _D21 + v18 * v21;
      v34 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, _Q17.f64[0]), _Q3, _Q17, 1), v19, v23);
      __asm { FMLA            D21, D2, V17.D[1] }
      _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, _Q19.f64[0]), _Q3, _Q19, 1), v19, v25);
      __asm { FMLA            D0, D2, V19.D[1] }
      _Q2 = vzip2q_s64(v27, v34);
      v33.f64[1] = _D21 + v18 * v23;
      v39 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v27, v34), v57), v54, (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(_Q2.i64[0], 0), (int8x16_t)vdupq_laneq_s64(_Q2, 1), 8uLL)), v53, v33);
      *(_QWORD *)&_Q3.f64[0] = v56;
      __asm { FMLA            D2, D3, V1.D[1] }
      v40 = *(double *)_Q2.i64 + (_D0 + v18 * v25) * *(double *)&v55;
      v42 = (double *)a4[1];
      v41 = (unint64_t)a4[2];
      if ((unint64_t)v42 < v41)
      {
        *(float64x2_t *)v42 = v39;
        v42[2] = v40;
        v12 = (char *)(v42 + 3);
      }
      else
      {
        v43 = (double *)*a4;
        v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (_BYTE *)*a4) >> 3);
        v45 = v44 + 1;
        if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E9DEF2C();
        v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v43) >> 3);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x555555555555555)
          v47 = 0xAAAAAAAAAAAAAAALL;
        else
          v47 = v45;
        if (v47)
        {
          v52 = v39;
          if (v47 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v48 = (char *)operator new(24 * v47);
          v39 = v52;
        }
        else
        {
          v48 = 0;
        }
        v49 = (float64x2_t *)&v48[24 * v44];
        *v49 = v39;
        v49[1].f64[0] = v40;
        v50 = v49;
        if (v42 != v43)
        {
          do
          {
            v51 = *(float64x2_t *)(v42 - 3);
            v50[-1].f64[1] = *(v42 - 1);
            *(float64x2_t *)((char *)v50 - 24) = v51;
            v50 = (float64x2_t *)((char *)v50 - 24);
            v42 -= 3;
          }
          while (v42 != v43);
          v42 = (double *)*a4;
        }
        v12 = (char *)&v49[1].f64[1];
        *a4 = v50;
        a4[1] = &v49[1].f64[1];
        a4[2] = &v48[24 * v47];
        if (v42)
          operator delete(v42);
      }
      a4[1] = v12;
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_20F27A804(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F27A82C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_20F27A8AC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
  {
    v4 = a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        v6 = v4 - 136;
        sub_20E991750((void **)(v4 - 112));
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20F27A920(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  unint64_t v42;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v16 = a1 + 2;
  v12 = operator new(0x40uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(_QWORD *)(a3 + 16);
  v12[5] = 0;
  v12[6] = 0;
  v12[7] = 0;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v8 = v3;
    v19 = *a1;
    v20 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v20)
      goto LABEL_89;
LABEL_77:
    *v12 = *v20;
LABEL_95:
    *v20 = v12;
    goto LABEL_96;
  }
  v21 = 1;
  if (v9 >= 3)
    v21 = (v9 & (v9 - 1)) != 0;
  v22 = v21 | (2 * v9);
  v23 = vcvtps_u32_f32(v17 / v18);
  if (v22 <= v23)
    prime = v23;
  else
    prime = v22;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = a1[1];
  }
  if (prime > v9)
  {
LABEL_41:
    if (prime >> 61)
      sub_20E877A38();
    v25 = operator new(8 * prime);
    v26 = (void *)*a1;
    *a1 = (uint64_t)v25;
    if (v26)
      operator delete(v26);
    v27 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v27++) = 0;
    while (prime != v27);
    v28 = (_QWORD *)*v16;
    if (!*v16)
      goto LABEL_73;
    v29 = v28[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *(_QWORD *)(*a1 + 8 * v31) = v16;
      for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
      {
        v33 = i[1] & v30;
        if (v33 == v31)
        {
          v28 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v33))
        {
          *v28 = *i;
          v34 = 8 * v33;
          *i = **(_QWORD **)(*a1 + v34);
          **(_QWORD **)(*a1 + v34) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v33) = v28;
          v28 = i;
          v31 = v33;
        }
      }
      goto LABEL_73;
    }
    if (v29 >= prime)
      v29 %= prime;
    *(_QWORD *)(*a1 + 8 * v29) = v16;
    v38 = (_QWORD *)*v28;
    if (!*v28)
    {
LABEL_73:
      v9 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_74;
LABEL_88:
      v8 = ((_DWORD)v9 - 1) & v8;
      v19 = *a1;
      v20 = *(_QWORD **)(*a1 + 8 * v8);
      if (!v20)
        goto LABEL_89;
      goto LABEL_77;
    }
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 == v29)
        goto LABEL_67;
      if (*(_QWORD *)(*a1 + 8 * v40))
      {
        *v28 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)(*a1 + v39);
        **(_QWORD **)(*a1 + v39) = v38;
        v38 = v28;
LABEL_67:
        v28 = v38;
        v38 = (_QWORD *)*v38;
        if (!v38)
          goto LABEL_73;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v40) = v28;
        v28 = v38;
        v38 = (_QWORD *)*v38;
        v29 = v40;
        if (!v38)
          goto LABEL_73;
      }
    }
  }
  if (prime < v9)
  {
    v35 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v9 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
    {
      v35 = std::__next_prime(v35);
    }
    else
    {
      v37 = 1 << -(char)__clz(v35 - 1);
      if (v35 >= 2)
        v35 = v37;
    }
    if (prime <= v35)
      prime = v35;
    if (prime < v9)
    {
      if (!prime)
      {
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v9 = 0;
        a1[1] = 0;
        goto LABEL_88;
      }
      goto LABEL_41;
    }
    v9 = a1[1];
  }
  if ((v9 & (v9 - 1)) == 0)
    goto LABEL_88;
LABEL_74:
  if (v9 <= v8)
    v8 %= v9;
  v19 = *a1;
  v20 = *(_QWORD **)(*a1 + 8 * v8);
  if (v20)
    goto LABEL_77;
LABEL_89:
  *v12 = *v16;
  *v16 = v12;
  *(_QWORD *)(v19 + 8 * v8) = v16;
  if (*v12)
  {
    v42 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9)
        v42 %= v9;
    }
    else
    {
      v42 &= v9 - 1;
    }
    v20 = (_QWORD *)(*a1 + 8 * v42);
    goto LABEL_95;
  }
LABEL_96:
  ++a1[3];
  return v12;
}

void sub_20F27AE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDDE7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F27AE20(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      sub_20E867F44();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 4);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 4;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 4);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 4;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_20F27AFA0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A687E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A687E8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A687E0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A687E8);
  }
  *a1 = qword_254A687E0;
}

void sub_20F27B03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A687E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A687E8);
  _Unwind_Resume(a1);
}

uint64_t sub_20F27B094(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F27B428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F27B44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F27B460(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F27B484(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    sub_20E991750((void **)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F27B4D8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F27B4EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FC0F0;
  result[1] = v3;
  return result;
}

uint64_t sub_20F27B520(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FC0F0;
  a2[1] = v2;
  return result;
}

__n128 sub_20F27B53C@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40 * *a2 + 32);
  result = *(__n128 *)(v3 + 8);
  *a3 = result;
  a3[1].n128_u64[0] = *(_QWORD *)(v3 + 24);
  return result;
}

uint64_t sub_20F27B568(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping18SlamRelocalizationINS1_18MapKeyframeSamplerEE34EstimateMotionUpdateUsin"
                     "gKeyframesERKNS0_11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnch"
                     "oredPoint3DWithCovIdLb0EEESB_Lb0EEERKNSt3__16vectorINSG_IN3cva7ImageIDINS0_4util18UUIDHashU32KeyPai"
                     "rEEENSF_9allocatorISL_EEEENSM_ISO_EEEERKNSG_IS8_NSM_IS8_EEEERKNSG_INSF_5arrayIhLm64EEENSM_ISY_EEEES"
                     "12_RKNSG_INS0_13SemanticPointENSM_IS13_EEEERKNSX_IdLm12EEEbbRKNSF_8optionalINS0_19QueryDescriptorTy"
                     "peEEERKNS1B_INS1_21MultiFramePoseRefinerEEEbNS_3esn11OptionalRefIKNS0_17place_recognition14BinaryLS"
                     "HIndexILj64EEEEES1Q_NS1L_IKNS1_17PointExclusionSetEEEbRS18_RjRNS0_17MapTrackingResultENS1L_INS0_13m"
                     "apping_types25RelocalizationDebugObjectEEENS1L_INS0_23RelocalizationCoreEventEEEEUlT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping18SlamRelocalizationINS1_18MapKeyframeSamplerEE34EstimateMotio"
                                "nUpdateUsingKeyframesERKNS0_11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint"
                                "2DNSPEdEENS0_25VIOAnchoredPoint3DWithCovIdLb0EEESB_Lb0EEERKNSt3__16vectorINSG_IN3cva7Ima"
                                "geIDINS0_4util18UUIDHashU32KeyPairEEENSF_9allocatorISL_EEEENSM_ISO_EEEERKNSG_IS8_NSM_IS8"
                                "_EEEERKNSG_INSF_5arrayIhLm64EEENSM_ISY_EEEES12_RKNSG_INS0_13SemanticPointENSM_IS13_EEEER"
                                "KNSX_IdLm12EEEbbRKNSF_8optionalINS0_19QueryDescriptorTypeEEERKNS1B_INS1_21MultiFramePose"
                                "RefinerEEEbNS_3esn11OptionalRefIKNS0_17place_recognition14BinaryLSHIndexILj64EEEEES1Q_NS"
                                "1L_IKNS1_17PointExclusionSetEEEbRS18_RjRNS0_17MapTrackingResultENS1L_INS0_13mapping_type"
                                "s25RelocalizationDebugObjectEEENS1L_INS0_23RelocalizationCoreEventEEEEUlT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping18SlamRelocalizationINS1_18MapKeyframeSamplerEE34EstimateMotionUpdateUsingKeyframesERKNS0_11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPoint3DWithCovIdLb0EEESB_Lb0EEERKNSt3__16vectorINSG_IN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEENSF_9allocatorISL_EEEENSM_ISO_EEEERKNSG_IS8_NSM_IS8_EEEERKNSG_INSF_5arrayIhLm64EEENSM_ISY_EEEES12_RKNSG_INS0_13SemanticPointENSM_IS13_EEEERKNSX_IdLm12EEEbbRKNSF_8optionalINS0_19QueryDescriptorTypeEEERKNS1B_INS1_21MultiFramePoseRefinerEEEbNS_3esn11OptionalRefIKNS0_17place_recognition14BinaryLSHIndexILj64EEEEES1Q_NS1L_IKNS1_17PointExclusionSetEEEbRS18_RjRNS0_17MapTrackingResultENS1L_INS0_13mapping_types25RelocalizationDebugObjectEEENS1L_INS0_23RelocalizationCoreEventEEEEUlT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping18SlamRelocalizationINS1_18MapKeyframeSamplerEE34EstimateMotionUpdateUsingKeyframesERKNS0_11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPoint3DWithCovIdLb0EEESB_Lb0EEERKNSt3__16vectorINSG_IN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEENSF_9allocatorISL_EEEENSM_ISO_EEEERKNSG_IS8_NSM_IS8_EEEERKNSG_INSF_5arrayIhLm64EEENSM_ISY_EEEES12_RKNSG_INS0_13SemanticPointENSM_IS13_EEEERKNSX_IdLm12EEEbbRKNSF_8optionalINS0_19QueryDescriptorTypeEEERKNS1B_INS1_21MultiFramePoseRefinerEEEbNS_3esn11OptionalRefIKNS0_17place_recognition14BinaryLSHIndexILj64EEEEES1Q_NS1L_IKNS1_17PointExclusionSetEEEbRS18_RjRNS0_17MapTrackingResultENS1L_INS0_13mapping_types25RelocalizationDebugObjectEEENS1L_INS0_23RelocalizationCoreEventEEEEUlT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F27B5D4()
{
  return &unk_24C9FC160;
}

void sub_20F27B5E0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  const void *v4;
  const void *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  int64x2_t v30;
  uint64_t v31;
  unint64_t i;
  _DWORD *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  const void *__src;
  unint64_t v49;
  unint64_t v50;
  unint64_t v52;
  _QWORD v53[5];
  int v54;
  unsigned int v55;
  void *__p;
  _DWORD *v57;
  uint64_t v58;
  void *v59;
  _BYTE *v60;
  char *v61;
  void *v62[2];
  char *v63;
  void *v64[2];
  char *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v5 = *(const void **)a2;
  v4 = *(const void **)(a2 + 8);
  v6 = (int64_t)v4 - *(_QWORD *)a2;
  v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v8 = v7 - 1;
  if (v7 == 1)
  {
    v69 = 0uLL;
    *(_QWORD *)&v70 = 0;
    if (v4 != v5)
    {
      v9 = (char *)operator new(v6);
      v10 = v9 + 24;
      *(_QWORD *)&v69 = v9;
      *(_QWORD *)&v70 = v9 + 24;
      memcpy(v9, v5, v6 - 4);
      *((_QWORD *)&v69 + 1) = v10;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v11 = operator new(0x18uLL);
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v11 + 3;
    *(_QWORD *)(a4 + 8) = sub_20F27C364(a4 + 16, (uint64_t)&v69, (uint64_t)&v70 + 8, v11);
    v12 = (void *)v69;
    if ((_QWORD)v69)
    {
      *((_QWORD *)&v69 + 1) = v69;
LABEL_67:
      operator delete(v12);
    }
  }
  else
  {
    if (!v7)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      return;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    if (v6 < 0)
      sub_20E867F44();
    v16 = v8 >> 6;
    v17 = (v8 >> 6) + 1;
    v18 = operator new(8 * v17);
    v19 = v18;
    v67 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v68 = v17;
    v66 = v18;
    if (v7 >= 0x41)
      v20 = v16;
    else
      v20 = 0;
    v18[v20] = 0;
    if (v4 != v5)
    {
      if (v7 >= 0x40)
        bzero(v18, 8 * (v7 >> 6));
      if ((v7 & 0x3F) != 0)
        v19[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    }
    v64[0] = 0;
    v64[1] = 0;
    v65 = 0;
    v62[0] = 0;
    v62[1] = 0;
    v63 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    __p = 0;
    v57 = 0;
    v58 = 0;
    v69 = 0u;
    v70 = 0u;
    v71 = 1065353216;
    v55 = 0;
    if (v4 == v5)
    {
      v22 = 0;
      v42 = 0;
    }
    else
    {
      v64[0] = operator new(0xAAAAAAAAAAAAAAACLL * (v6 >> 3));
      v64[1] = v64[0];
      v65 = (char *)v64[0] - 0x5555555555555554 * (v6 >> 3);
      if (v7 >> 62)
        sub_20E867F44();
      v62[0] = operator new(0xAAAAAAAAAAAAAAACLL * (v6 >> 3));
      v62[1] = v62[0];
      v63 = (char *)v62[0] - 0x5555555555555554 * (v6 >> 3);
      v21 = (char *)operator new(v6);
      v22 = 0;
      v23 = 0;
      v24 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      v59 = v21;
      v60 = v21;
      v52 = v24;
      if (v24 <= 1)
        v24 = 1;
      v50 = v24;
      v61 = &v21[8 * (v6 >> 3)];
      do
      {
        if ((v66[v23 >> 6] & (1 << v23)) == 0)
        {
          sub_20F27BCD0((uint64_t)&v59, 1uLL, (__int128 *)(*(_QWORD *)a2 + 24 * v23));
          v49 = v23;
          v54 = v23;
          sub_20F27BE6C((uint64_t)v64, 1uLL, (const float *)&v54);
          v66[v23 >> 6] ^= 1 << v23;
          v26 = ++v55;
          v27 = (unsigned int *)v62[0];
          v28 = (unsigned int *)v64[0];
          v29 = (unsigned int *)v64[1];
          do
          {
            v62[1] = v27;
            if (v28 == v29)
            {
              v30 = vdupq_n_s64((unint64_t)v29);
              v29 = v27;
              v28 = v27;
            }
            else
            {
              do
              {
                if ((sub_20F27C090(a1, (uint64_t *)(*(_QWORD *)a2 + 24 * *v28), (char **)&__p, a3, &v69) & 1) != 0)
                {
                  v53[0] = &v66;
                  v53[1] = &v55;
                  v53[2] = &v59;
                  v53[3] = a2;
                  v53[4] = v62;
                  v31 = -1431655765 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
                  if ((_DWORD)v31)
                  {
                    for (i = 0; i != v31; ++i)
                    {
                      if (((*(_QWORD *)((char *)v66 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
                      {
                        v33 = __p;
                        if (__p != v57)
                        {
                          v34 = *(_QWORD *)a2 + 24 * i;
                          while (*(_QWORD *)v34 != *(_QWORD *)v33 || *(_DWORD *)(v34 + 8) != v33[2])
                          {
                            v33 += 6;
                            if (v33 == v57)
                              goto LABEL_33;
                          }
                          sub_20F27C96C((uint64_t)v53, i);
                        }
                      }
LABEL_33:
                      ;
                    }
                  }
                }
                ++v28;
              }
              while (v28 != v29);
              v30 = *(int64x2_t *)v64;
              v28 = (unsigned int *)v62[0];
              v29 = (unsigned int *)v62[1];
              v26 = v55;
            }
            v64[0] = v28;
            v64[1] = v29;
            *(int64x2_t *)v62 = v30;
            v35 = v65;
            v65 = v63;
            v63 = v35;
            if (v28 == v29)
              break;
            v27 = (unsigned int *)v30.i64[0];
          }
          while (v52 > v26);
          v36 = *(_QWORD **)(a4 + 8);
          if ((unint64_t)v36 >= *(_QWORD *)(a4 + 16))
          {
            v22 = (uint64_t *)sub_20F27CC2C((char **)a4, (uint64_t)&v59);
            v23 = v49;
            v25 = a4;
          }
          else
          {
            *v36 = 0;
            v36[1] = 0;
            v36[2] = 0;
            v37 = v60 - (_BYTE *)v59;
            v23 = v49;
            if (v60 != v59)
            {
              __src = v59;
              v38 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
              if (v38 >= 0xAAAAAAAAAAAAAABLL)
                sub_20E867F44();
              v39 = v60 - (_BYTE *)v59;
              v40 = (char *)operator new(v37);
              *v36 = v40;
              v36[1] = v40;
              v41 = &v40[24 * v38];
              v36[2] = v41;
              memcpy(v40, __src, v39 - 4);
              v36[1] = v41;
            }
            v22 = v36 + 3;
            v25 = a4;
            *(_QWORD *)(a4 + 8) = v36 + 3;
          }
          *(_QWORD *)(v25 + 8) = v22;
        }
        ++v23;
      }
      while (v23 != v50);
      v42 = *(char **)a4;
    }
    v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v22 - v42) >> 3));
    if (v22 == (uint64_t *)v42)
      v44 = 0;
    else
      v44 = v43;
    sub_20F27CE44((unint64_t)v42, v22, (uint64_t)&v54, v44, 1);
    v45 = (_QWORD *)v70;
    if ((_QWORD)v70)
    {
      do
      {
        v46 = (_QWORD *)*v45;
        operator delete(v45);
        v45 = v46;
      }
      while (v46);
    }
    v47 = (void *)v69;
    *(_QWORD *)&v69 = 0;
    if (v47)
      operator delete(v47);
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    if (v64[0])
    {
      v64[1] = v64[0];
      operator delete(v64[0]);
    }
    v12 = v66;
    if (v66)
      goto LABEL_67;
  }
}

void sub_20F27BB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  void **v32;
  char *v33;
  uint64_t v34;
  void **v35;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;

  v35 = v32;
  v35[1] = v33;
  v37 = (char *)*v35;
  if (*v35)
  {
    if (v33 != v37)
    {
      v38 = v33;
      do
      {
        v40 = (void *)*((_QWORD *)v38 - 3);
        v38 -= 24;
        v39 = v40;
        if (v40)
        {
          *((_QWORD *)v33 - 2) = v39;
          operator delete(v39);
        }
        v33 = v38;
      }
      while (v38 != v37);
      v33 = *(char **)a13;
    }
    *(_QWORD *)(a13 + 8) = v37;
    operator delete(v33);
  }
  v41 = *(void **)(v34 - 144);
  if (v41)
  {
    *(_QWORD *)(v34 - 136) = v41;
    operator delete(v41);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F27BCD0(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_25;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_25:
      sub_20E867F44();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = (uint64_t)&result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_24;
  }
  v14 = (*(_QWORD *)(a1 + 8) - (_QWORD)result) / 24;
  if (v14 >= a2)
    v15 = a2;
  else
    v15 = (*(_QWORD *)(a1 + 8) - (_QWORD)result) / 24;
  for (; v15; --v15)
  {
    v16 = *a3;
    *((_DWORD *)result + 4) = *((_DWORD *)a3 + 4);
    *(_OWORD *)result = v16;
    result += 3;
  }
  if (a2 <= v14)
  {
    v13 = *(_QWORD *)a1 + 24 * a2;
LABEL_24:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v17 + 24 * (a2 - v14);
  v19 = -24 * v14 + 24 * a2;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v17 = v20;
    v17 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

float *sub_20F27BE6C(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  float *v7;
  float *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  unint64_t v15;
  float *v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  float32x4_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t *v36;
  uint64_t v37;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 2)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 62)
      goto LABEL_38;
    v9 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 62)
LABEL_38:
      sub_20E867F44();
    v12 = v11;
    result = (float *)operator new(4 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 7)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x7FFFFFFFFFFFFFF8];
    v18 = vdupq_n_s32(LODWORD(v14));
    v19 = (int32x4_t *)(result + 4);
    v20 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  v21 = *(float32x4_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = ((char *)v21 - (char *)v7) >> 2;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = ((char *)v21 - (char *)v7) >> 2;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFF8];
    v25 = vld1q_dup_f32(a3);
    v26 = (float32x4_t *)(v7 + 4);
    v27 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFF8);
    v24 &= 7u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = (float32x4_t *)((char *)v21 + 4 * v29);
  v31 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  v32 = 4 * a2 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4;
  if (v32 < 0x4C || v21 < (float32x4_t *)(a3 + 1) && (char *)&v21->f32[a2] - v31 > (char *)a3)
    goto LABEL_43;
  v33 = (v32 >> 2) + 1;
  v34 = (float32x4_t *)((char *)v21 + 4 * (v33 & 0x7FFFFFFFFFFFFFF8));
  v35 = vld1q_dup_f32(a3);
  v36 = v21 + 1;
  v37 = v33 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v36[-1] = v35;
    *v36 = v35;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  v21 = v34;
  if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_43:
    do
    {
      v21->f32[0] = *a3;
      v21 = (float32x4_t *)((char *)v21 + 4);
    }
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

uint64_t *sub_20F27C090(uint64_t a1, uint64_t *a2, char **a3, unsigned int a4, _QWORD *a5)
{
  uint64_t *result;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char **v32;
  uint64_t *v33;
  char *v34;
  __int128 v35;
  int v36;

  result = sub_20E9DF85C((_QWORD *)(a1 + 24), a2);
  if (!result)
    return result;
  v9 = result;
  if (a5[3])
  {
    v10 = (_QWORD *)a5[2];
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    a5[2] = 0;
    v12 = a5[1];
    if (v12)
    {
      for (i = 0; i != v12; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  v14 = (_QWORD *)v9[7];
  if (!v14)
  {
    v31 = *a3;
    a3[1] = *a3;
    v32 = a3 + 1;
    v33 = (uint64_t *)a5[2];
    if (!v33)
      goto LABEL_46;
    goto LABEL_49;
  }
  while (2)
  {
    v15 = v14[3];
    v16 = *(_QWORD *)(v15 + 200);
    v17 = *(_QWORD *)(v15 + 208);
    if (v16 == v17)
      goto LABEL_11;
    do
    {
      while (1)
      {
        v18 = (int8x8_t)a5[1];
        if (v18)
        {
          v19 = *(_DWORD *)(v16 + 16);
          v20 = *(_DWORD *)(v16 + 8);
          v21 = v20 ^ __ROR4__(v19, 13);
          v22 = (uint8x8_t)vcnt_s8(v18);
          v22.i16[0] = vaddlv_u8(v22);
          if (v22.u32[0] > 1uLL)
          {
            v23 = v21;
            if (*(_QWORD *)&v18 <= v21)
              v23 = v21 % *(_QWORD *)&v18;
          }
          else
          {
            v23 = (v18.i32[0] - 1) & v21;
          }
          v24 = *(uint64_t ***)(*a5 + 8 * v23);
          if (v24)
          {
            v25 = *v24;
            if (v25)
              break;
          }
        }
LABEL_14:
        v36 = 1;
        sub_20F27C494((uint64_t)a5, (uint64_t *)v16, v16, &v36);
        v16 += 32;
        if (v16 == v17)
          goto LABEL_11;
      }
      v26 = *(_QWORD *)v16;
      if (v22.u32[0] < 2uLL)
      {
        v27 = *(_QWORD *)&v18 - 1;
        while (1)
        {
          v29 = v25[1];
          if (v29 == v21)
          {
            if (*((_DWORD *)v25 + 8) == v19 && v25[2] == v26 && *((_DWORD *)v25 + 6) == v20)
              goto LABEL_39;
          }
          else if ((v29 & v27) != v23)
          {
            goto LABEL_14;
          }
          v25 = (uint64_t *)*v25;
          if (!v25)
            goto LABEL_14;
        }
      }
      while (1)
      {
        v28 = v25[1];
        if (v28 == v21)
          break;
        if (v28 >= *(_QWORD *)&v18)
          v28 %= *(_QWORD *)&v18;
        if (v28 != v23)
          goto LABEL_14;
LABEL_25:
        v25 = (uint64_t *)*v25;
        if (!v25)
          goto LABEL_14;
      }
      if (*((_DWORD *)v25 + 8) != v19 || v25[2] != v26 || *((_DWORD *)v25 + 6) != v20)
        goto LABEL_25;
LABEL_39:
      ++*((_DWORD *)v25 + 10);
      v16 += 32;
    }
    while (v16 != v17);
LABEL_11:
    v14 = (_QWORD *)*v14;
    if (v14)
      continue;
    break;
  }
  v30 = a5[3];
  v31 = *a3;
  a3[1] = *a3;
  v32 = a3 + 1;
  if (v30)
  {
    sub_20F27C7D8(a3, v30);
    v31 = *a3;
  }
  v33 = (uint64_t *)a5[2];
  if (!v33)
  {
LABEL_46:
    v34 = v31;
    if (v31 == *v32)
      return (uint64_t *)(v34 != v31);
LABEL_52:
    *v32 = v31;
    return (uint64_t *)(v34 != v31);
  }
  do
  {
LABEL_49:
    if (*((_DWORD *)v33 + 10) >= a4)
    {
      v35 = *((_OWORD *)v33 + 1);
      *((_DWORD *)v31 + 4) = *((_DWORD *)v33 + 8);
      *(_OWORD *)v31 = v35;
      v31 += 24;
    }
    v33 = (uint64_t *)*v33;
  }
  while (v33);
  v34 = *a3;
  if (v31 != *v32)
    goto LABEL_52;
  return (uint64_t *)(v34 != v31);
}

_QWORD *sub_20F27C364(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          sub_20E867F44();
        v11 = (char *)operator new(v10);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10 - 4);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20F27C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F27C470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F27C494(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v8 = *((_DWORD *)a2 + 4);
  v9 = *((_DWORD *)a2 + 2);
  v10 = v9 ^ __ROR4__(v8, 13);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v11 <= v10)
        v4 = v10 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v10;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = *a2;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 8) == v8 && v14[2] == v15 && *((_DWORD *)v14 + 6) == v9)
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_27;
          }
        }
        do
        {
          v16 = v14[1];
          if (v16 == v10)
          {
            if (*((_DWORD *)v14 + 8) == v8 && v14[2] == v15 && *((_DWORD *)v14 + 6) == v9)
              return v14;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_27:
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  v14[4] = *(_QWORD *)(a3 + 16);
  *((_DWORD *)v14 + 10) = *a4;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v10 = v4;
  }
  else
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_40;
    if (prime < v11)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v11)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10)
        v10 %= v11;
    }
    else
    {
      v10 = ((_DWORD)v11 - 1) & v10;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v28)
  {
    *v14 = *v28;
LABEL_63:
    *v28 = v14;
    goto LABEL_64;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v27 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    v29 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20F27C7C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F27C7D8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[24 * a2];
      do
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 4) = -1;
        v5 += 24;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[24 * v6];
    v13 = &v12[24 * a2];
    v14 = v12;
    do
    {
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 4) = -1;
      v14 += 24;
    }
    while (v14 != v13);
    v15 = *a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v5 - 2);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v15);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[24 * v9];
    if (v5)
      operator delete(v5);
  }
}

void sub_20F27C96C(uint64_t a1, unsigned int a2)
{
  _DWORD *v4;
  char **v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned int *v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;

  v4 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(**(_QWORD **)a1 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) ^= 1 << a2;
  ++*v4;
  v5 = *(char ***)(a1 + 16);
  v6 = **(_QWORD **)(a1 + 24) + 24 * a2;
  v8 = v5[1];
  v7 = (unint64_t)v5[2];
  if ((unint64_t)v8 >= v7)
  {
    v11 = *v5;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *v5) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_40;
      v16 = (char *)operator new(24 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[24 * v12];
    v18 = *(_OWORD *)v6;
    *((_QWORD *)v17 + 2) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v17 = v18;
    v10 = v17 + 24;
    if (v8 != v11)
    {
      do
      {
        v19 = *(_OWORD *)(v8 - 24);
        *((_DWORD *)v17 - 2) = *((_DWORD *)v8 - 2);
        *(_OWORD *)(v17 - 24) = v19;
        v17 -= 24;
        v8 -= 24;
      }
      while (v8 != v11);
      v8 = *v5;
    }
    *v5 = v17;
    v5[1] = v10;
    v5[2] = &v16[24 * v15];
    if (v8)
      operator delete(v8);
  }
  else
  {
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v8 = v9;
    v10 = v8 + 24;
  }
  v5[1] = v10;
  v20 = *(_QWORD *)(a1 + 32);
  v22 = *(char **)(v20 + 8);
  v21 = *(_QWORD *)(v20 + 16);
  if ((unint64_t)v22 < v21)
  {
    *(_DWORD *)v22 = a2;
    v23 = (uint64_t)(v22 + 4);
    goto LABEL_39;
  }
  v24 = *(char **)v20;
  v25 = (uint64_t)&v22[-*(_QWORD *)v20];
  v26 = v25 >> 2;
  v27 = (v25 >> 2) + 1;
  if (v27 >> 62)
    sub_20E867F44();
  v28 = v21 - (_QWORD)v24;
  if (v28 >> 1 > v27)
    v27 = v28 >> 1;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
    v29 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v29 = v27;
  if (!v29)
  {
    v30 = 0;
    v31 = (unsigned int *)(4 * v26);
    v32 = 0;
    *(_DWORD *)(4 * v26) = a2;
    v23 = 4 * v26 + 4;
    v33 = v22 - v24;
    if (v22 == v24)
      goto LABEL_37;
LABEL_31:
    v34 = v33 - 4;
    if (v34 < 0x2C)
      goto LABEL_45;
    if ((unint64_t)(v22 - &v30[v25]) < 0x20)
      goto LABEL_45;
    v35 = (v34 >> 2) + 1;
    v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
    v37 = &v22[-v36];
    v31 = (unsigned int *)((char *)v31 - v36);
    v38 = &v30[4 * v26 - 16];
    v39 = v22 - 16;
    v40 = v35 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 8;
    }
    while (v40);
    v22 = v37;
    if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_45:
      do
      {
        v42 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--v31 = v42;
      }
      while (v22 != v24);
    }
    goto LABEL_37;
  }
  if (v29 >> 62)
LABEL_40:
    sub_20E877A38();
  v30 = operator new(4 * v29);
  v31 = (unsigned int *)&v30[4 * v26];
  v32 = &v30[4 * v29];
  *v31 = a2;
  v23 = (uint64_t)(v31 + 1);
  v33 = v22 - v24;
  if (v22 != v24)
    goto LABEL_31;
LABEL_37:
  *(_QWORD *)v20 = v31;
  *(_QWORD *)(v20 + 8) = v23;
  *(_QWORD *)(v20 + 16) = v32;
  if (v24)
    operator delete(v24);
LABEL_39:
  *(_QWORD *)(v20 + 8) = v23;
}

char *sub_20F27CC2C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)&v25 + 1) = v11;
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14 - 4);
    *v12 = v16;
  }
  v17 = v10 + 24;
  *(_QWORD *)&v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_20F27CE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20F27CE44(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 3;
  v9 = v7;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v7 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *(a2 - 3);
        v24 = *v7;
        if (0xAAAAAAAAAAAAAAABLL * ((*(a2 - 2) - v23) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3))
        {
          *v7 = v23;
          *(a2 - 3) = v24;
          v25 = v7[1];
          v7[1] = *(a2 - 2);
          *(a2 - 2) = v25;
          v26 = v7[2];
          v7[2] = *(a2 - 1);
          *(a2 - 1) = v26;
        }
        return result;
      case 3uLL:
        return sub_20F27D380(v7, v7 + 3, v8);
      case 4uLL:
        return sub_20F27DB44(v7, v7 + 3, v7 + 6, v8);
      case 5uLL:
        return sub_20F27DC7C(v7, v7 + 3, v7 + 6, v7 + 9, v8);
      default:
        if (v12 > 575)
        {
          if (v10 == 1)
          {
            if (v7 != a2)
            {
              v42 = (v13 - 2) >> 1;
              v43 = v42 + 1;
              v44 = &v7[3 * v42];
              do
              {
                sub_20F27DE10((uint64_t)v7, a3, v13, v44);
                v44 -= 3;
                --v43;
              }
              while (v43);
              v45 = v12 / 0x18uLL;
              do
              {
                result = (unint64_t)sub_20F27DFA4(v7, (uint64_t)a2, a3, v45);
                a2 -= 3;
              }
              while (v45-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v7[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            sub_20F27D380(v15, v7, v8);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20F27D380(v7, v15, v8);
            v16 = v8;
            v17 = &v7[3 * v14];
            sub_20F27D380(v7 + 3, v17 - 3, a2 - 6);
            sub_20F27D380(v7 + 6, &v7[3 * v14 + 3], a2 - 9);
            sub_20F27D380(v17 - 3, v15, &v7[3 * v14 + 3]);
            v18 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v18;
            v19 = v7[2];
            v7[2] = v17[2];
            v17[2] = v19;
            v8 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((*(v7 - 2) - *(v7 - 3)) >> 3) <= 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3))
          {
            result = (unint64_t)sub_20F27D538(v7, a2);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v20 = sub_20F27D700((uint64_t)v7, a2);
          if ((v21 & 1) == 0)
            goto LABEL_15;
          v22 = sub_20F27D8D4(v7, v20);
          v9 = v20 + 3;
          result = sub_20F27D8D4(v20 + 3, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_15:
            result = sub_20F27CE44(v7, v20, a3, -v11, a5 & 1);
            v9 = v20 + 3;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        v27 = v7 + 3;
        v29 = v7 == a2 || v27 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v29)
          {
            v30 = 0;
            v31 = v7;
            do
            {
              v33 = v27;
              v35 = v31[3];
              v34 = v31[4];
              v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
              v37 = *v31;
              if (v36 > 0xAAAAAAAAAAAAAAABLL * ((v31[1] - *v31) >> 3))
              {
                v38 = v31[5];
                *v33 = 0;
                v33[1] = 0;
                v39 = v30;
                v33[2] = 0;
                do
                {
                  v40 = (uint64_t *)((char *)v7 + v39);
                  result = *(uint64_t *)((char *)v7 + v39 + 8);
                  v41 = *(uint64_t *)((char *)v7 + v39 + 16);
                  v40[4] = result;
                  v40[5] = v41;
                  v40[2] = 0;
                  v40[3] = v37;
                  *v40 = 0;
                  v40[1] = 0;
                  if (!v39)
                  {
                    v32 = v7;
                    goto LABEL_36;
                  }
                  v37 = *(v40 - 3);
                  result = *(v40 - 2);
                  v39 -= 24;
                }
                while (v36 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result - v37) >> 3));
                v32 = (uint64_t *)((char *)v7 + v39 + 24);
LABEL_36:
                *v32 = v35;
                v32[1] = v34;
                v32[2] = v38;
              }
              v27 = v33 + 3;
              v30 += 24;
              v31 = v33;
            }
            while (v33 + 3 != a2);
          }
        }
        else if (!v29)
        {
          v47 = v7 + 5;
          do
          {
            v48 = v27;
            v50 = v7[3];
            v49 = v7[4];
            v51 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v50) >> 3);
            v52 = *v7;
            if (v51 > 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3))
            {
              v53 = v7[5];
              *v48 = 0;
              v48[1] = 0;
              v48[2] = 0;
              v54 = v47;
              v55 = v47;
              do
              {
                v56 = *(v54 - 4);
                v57 = *(v55 - 3);
                v55 -= 3;
                *(v54 - 2) = v52;
                *(v54 - 1) = v56;
                *v54 = v57;
                *v55 = 0;
                *(v54 - 5) = 0;
                *(v54 - 4) = 0;
                v52 = *(v54 - 8);
                result = 0xAAAAAAAAAAAAAAABLL * ((*(v54 - 7) - v52) >> 3);
                v54 = v55;
              }
              while (v51 > result);
              *(v55 - 2) = v50;
              *(v55 - 1) = v49;
              *v55 = v53;
            }
            v27 = v48 + 3;
            v47 += 3;
            v7 = v48;
          }
          while (v48 + 3 != a2);
        }
        return result;
    }
  }
}

uint64_t sub_20F27D380(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = *a1;
  v6 = *a3;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
  if (v4 > 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
  {
    if (v7 > v4)
    {
      v8 = a1 + 2;
      *a1 = v6;
      *a3 = v5;
      v9 = a1[1];
      a1[1] = a3[1];
      a3[1] = v9;
      result = 1;
      v11 = *v8;
      *v8 = a3[2];
      a3[2] = v11;
      return result;
    }
    *a1 = v3;
    *a2 = v5;
    v19 = a1[1];
    a1[1] = a2[1];
    a2[1] = v19;
    v20 = a2 + 2;
    v21 = a1[2];
    a1[2] = a2[2];
    a2[2] = v21;
    v22 = *a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
    {
      *a2 = *a3;
      *a3 = v22;
      v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      result = 2;
      v24 = *v20;
      *v20 = a3[2];
      a3[2] = v24;
      return result;
    }
    return 1;
  }
  if (v7 > v4)
  {
    *a2 = v6;
    *a3 = v3;
    v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    v14 = a2 + 2;
    v13 = a2[2];
    a2[2] = a3[2];
    a3[2] = v13;
    v15 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
    {
      *a1 = *a2;
      *a2 = v15;
      v16 = a1[1];
      a1[1] = a2[1];
      a2[1] = v16;
      v17 = a1 + 2;
      result = 2;
      v18 = *v17;
      *v17 = *v14;
      *v14 = v18;
      return result;
    }
    return 1;
  }
  return 0;
}

uint64_t *sub_20F27D538(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v21;
  __int128 v22;

  v3 = *a1;
  v4 = *(_OWORD *)(a1 + 1);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v3) >> 3);
  if (v5 <= 0xAAAAAAAAAAAAAAABLL * ((*(a2 - 2) - *(a2 - 3)) >> 3))
  {
    v9 = a1 + 3;
    do
    {
      v6 = v9;
      if (v9 >= a2)
        break;
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 3);
      v9 += 3;
    }
    while (v5 <= v10);
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[3];
      v8 = v6[4];
      v6 += 3;
    }
    while (v5 <= 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  }
  if (v6 < a2)
  {
    do
    {
      v11 = *(a2 - 3);
      v12 = *(a2 - 2);
      a2 -= 3;
    }
    while (v5 > 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3));
  }
  if (v6 >= a2)
  {
    v19 = 0;
    if (v6 - 3 != a1)
      goto LABEL_17;
  }
  else
  {
    v13 = *v6;
    v14 = *a2;
    do
    {
      *v6 = v14;
      *a2 = v13;
      v15 = v6[1];
      v6[1] = a2[1];
      a2[1] = v15;
      v16 = v6[2];
      v6[2] = a2[2];
      a2[2] = v16;
      do
      {
        v13 = v6[3];
        v17 = v6[4];
        v6 += 3;
      }
      while (v5 <= 0xAAAAAAAAAAAAAAABLL * ((v17 - v13) >> 3));
      do
      {
        v14 = *(a2 - 3);
        v18 = *(a2 - 2);
        a2 -= 3;
      }
      while (v5 > 0xAAAAAAAAAAAAAAABLL * ((v18 - v14) >> 3));
    }
    while (v6 < a2);
    v19 = (void *)*a1;
    if (v6 - 3 != a1)
    {
LABEL_17:
      if (v19)
      {
        a1[1] = (uint64_t)v19;
        v21 = v4;
        operator delete(v19);
        v4 = v21;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)(v6 - 3);
      a1[2] = *(v6 - 1);
      goto LABEL_23;
    }
  }
  if (v19)
  {
    *(v6 - 2) = (uint64_t)v19;
    v22 = v4;
    operator delete(v19);
    v4 = v22;
  }
LABEL_23:
  *(v6 - 3) = v3;
  *((_OWORD *)v6 - 1) = v4;
  return v6;
}

_QWORD *sub_20F27D700(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  __int128 v25;
  __int128 v26;

  v4 = 0;
  v5 = *(void **)a1;
  v6 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3);
  do
  {
    v8 = *(_QWORD *)(a1 + v4 + 24);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + v4 + 32) - v8) >> 3);
    v4 += 24;
  }
  while (v9 > v7);
  v10 = (_QWORD *)(a1 + v4);
  if (v4 == 24)
  {
    do
    {
      if (v10 >= a2)
        break;
      v13 = *(a2 - 3);
      v14 = *(a2 - 2);
      a2 -= 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3) <= v7);
  }
  else
  {
    do
    {
      v11 = *(a2 - 3);
      v12 = *(a2 - 2);
      a2 -= 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) <= v7);
  }
  if (v10 >= a2)
  {
    v22 = 0;
    v16 = v10;
    v23 = v10 - 3;
    if (v10 - 3 != (_QWORD *)a1)
      goto LABEL_15;
  }
  else
  {
    v15 = *a2;
    v16 = (_QWORD *)(a1 + v4);
    v17 = a2;
    do
    {
      *v16 = v15;
      *v17 = v8;
      v18 = v16[1];
      v16[1] = v17[1];
      v17[1] = v18;
      v19 = v16[2];
      v16[2] = v17[2];
      v17[2] = v19;
      do
      {
        v8 = v16[3];
        v20 = v16[4];
        v16 += 3;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v20 - v8) >> 3) > v7);
      do
      {
        v15 = *(v17 - 3);
        v21 = *(v17 - 2);
        v17 -= 3;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v21 - v15) >> 3) <= v7);
    }
    while (v16 < v17);
    v22 = *(void **)a1;
    v23 = v16 - 3;
    if (v16 - 3 != (_QWORD *)a1)
    {
LABEL_15:
      if (v22)
      {
        *(_QWORD *)(a1 + 8) = v22;
        v25 = v6;
        operator delete(v22);
        v6 = v25;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)(v16 - 3);
      *(_QWORD *)(a1 + 16) = *(v16 - 1);
      goto LABEL_21;
    }
  }
  if (v22)
  {
    *(v16 - 2) = v22;
    v26 = v6;
    operator delete(v22);
    v6 = v26;
  }
LABEL_21:
  *(v16 - 3) = v5;
  *((_OWORD *)v16 - 1) = v6;
  return v23;
}

BOOL sub_20F27D8D4(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = *(a2 - 3);
      v20 = *a1;
      if (0xAAAAAAAAAAAAAAABLL * ((*(a2 - 2) - v19) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
      {
        *a1 = v19;
        *(a2 - 3) = v20;
        v21 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v21;
        v22 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v22;
      }
      break;
    case 3uLL:
      sub_20F27D380(a1, a1 + 3, a2 - 3);
      result = 1;
      break;
    case 4uLL:
      sub_20F27DB44(a1, a1 + 3, a1 + 6, a2 - 3);
      result = 1;
      break;
    case 5uLL:
      sub_20F27DC7C(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      result = 1;
      break;
    default:
      v6 = a1 + 6;
      sub_20F27D380(a1, a1 + 3, a1 + 6);
      v7 = a1 + 9;
      if (a1 + 9 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v11 = *v7;
          v10 = v7[1];
          v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *v7) >> 3);
          v13 = *v6;
          if (v12 > 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3))
            break;
LABEL_12:
          v6 = v7;
          v8 += 24;
          v7 += 3;
          if (v7 == a2)
            goto LABEL_13;
        }
        v14 = v7[2];
        *v7 = 0;
        v7[1] = 0;
        v15 = v8;
        v7[2] = 0;
        do
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          v17 = *(uint64_t *)((char *)a1 + v15 + 64);
          v16[10] = *(uint64_t *)((char *)a1 + v15 + 56);
          v16[11] = v17;
          v16[8] = 0;
          v16[9] = v13;
          v16[6] = 0;
          v16[7] = 0;
          if (v15 == -48)
          {
            *a1 = v11;
            a1[1] = v10;
            a1[2] = v14;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_19;
          }
          v13 = v16[3];
          v15 -= 24;
        }
        while (v12 > 0xAAAAAAAAAAAAAAABLL * ((v16[4] - v13) >> 3));
        v18 = (char *)a1 + v15;
        *((_QWORD *)v18 + 9) = v11;
        *((_QWORD *)v18 + 10) = v10;
        *(uint64_t *)((char *)a1 + v15 + 88) = v14;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_19:
        result = v7 + 3 == a2;
      }
      break;
  }
  return result;
}

uint64_t sub_20F27DB44(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_20F27D380(a1, a2, a3);
  v9 = *a3;
  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    v12 = *a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      v15 = *a1;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
      {
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_20F27DC7C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_20F27DB44(a1, a2, a3, a4);
  v11 = *a4;
  if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    v14 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3))
    {
      *a3 = *a4;
      *a4 = v14;
      v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      v16 = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      v17 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        v20 = *a1;
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
        {
          *a1 = *a2;
          *a2 = v20;
          v21 = a1[1];
          a1[1] = a2[1];
          a2[1] = v21;
          v22 = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F27DE10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      v6 = (uint64_t *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 >= a3)
      {
        v10 = *v6;
      }
      else
      {
        v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 24 * v5 + 8) - *v6) >> 3);
        v8 = 0xAAAAAAAAAAAAAAABLL * ((v6[4] - v6[3]) >> 3);
        v9 = v7 > v8;
        if (v7 <= v8)
          v10 = *v6;
        else
          v10 = v6[3];
        if (v9)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
      v12 = *a4;
      v11 = a4[1];
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a4) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v6[1] - v10) >> 3) <= v13)
      {
        v14 = a4[2];
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v15 = *v6;
        v16 = v6[1];
        do
        {
          v20 = v6;
          *a4 = v15;
          a4[1] = v16;
          a4[2] = v6[2];
          *v6 = 0;
          v6[1] = 0;
          v6[2] = 0;
          if (v4 < v5)
            break;
          v21 = (2 * v5) | 1;
          v6 = (uint64_t *)(result + 24 * v21);
          v5 = 2 * v5 + 2;
          if (v5 < a3)
          {
            v17 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 24 * v21 + 8) - *v6) >> 3);
            v18 = 0xAAAAAAAAAAAAAAABLL * ((v6[4] - v6[3]) >> 3);
            v19 = v17 > v18;
            v15 = v17 <= v18 ? *v6 : v6[3];
            if (v19)
              v6 += 3;
            else
              v5 = v21;
          }
          else
          {
            v15 = *v6;
            v5 = v21;
          }
          v16 = v6[1];
          a4 = v20;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3) <= v13);
        *v20 = v12;
        v20[1] = v11;
        v20[2] = v14;
      }
    }
  }
  return result;
}

_QWORD *sub_20F27DFA4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = result[1];
    v7 = result[2];
    result[1] = 0;
    result[2] = 0;
    v8 = result;
    *result = 0;
    do
    {
      v15 = v4 + 1;
      v13 = &v8[3 * v4 + 3];
      v16 = (2 * v4) | 1;
      v4 = 2 * v4 + 2;
      if (v4 < a4)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[3 * v15 + 1] - *v13) >> 3);
        v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - v13[3]) >> 3);
        v11 = v9 > v10;
        if (v9 <= v10)
          v12 = *v13;
        else
          v12 = v13[3];
        if (v11)
          v13 += 3;
        else
          v4 = v16;
      }
      else
      {
        v12 = *v13;
        v4 = v16;
      }
      v14 = v13[1];
      *v8 = v12;
      v8[1] = v14;
      v8[2] = v13[2];
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v13;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v13 == (_QWORD *)(a2 - 24))
    {
      *v13 = v5;
      v13[1] = v6;
      v13[2] = v7;
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)(a2 - 24);
      v13[2] = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = v5;
      *(_QWORD *)(a2 - 16) = v6;
      *(_QWORD *)(a2 - 8) = v7;
      v17 = (char *)v13 - (char *)result + 24;
      if (v17 >= 25)
      {
        v18 = (v17 / 0x18uLL - 2) >> 1;
        v19 = &result[3 * v18];
        v21 = *v13;
        v20 = v13[1];
        v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *v13) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[1] - *v19) >> 3) > v22)
        {
          v23 = v13[2];
          *v13 = 0;
          v13[1] = 0;
          v13[2] = 0;
          v24 = *v19;
          do
          {
            v25 = v19;
            v26 = v19[1];
            *v13 = v24;
            v13[1] = v26;
            v13[2] = v25[2];
            *v25 = 0;
            v25[1] = 0;
            v25[2] = 0;
            if (!v18)
              break;
            v18 = (v18 - 1) >> 1;
            v19 = &result[3 * v18];
            v24 = *v19;
            v13 = v25;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[1] - *v19) >> 3) > v22);
          *v25 = v21;
          v25[1] = v20;
          v25[2] = v23;
        }
      }
    }
  }
  return result;
}

double **sub_20F27E158(double **a1, float *a2, float *a3)
{
  uint64_t v4;
  float *v6;
  double *v7;
  float v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20EB057F8();
    v6 = a2;
    v7 = (double *)operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0.0;
      v8 = *v6++;
      *(_BYTE *)v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20F27E204(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20EB07D94(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char **sub_20F27E254(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 64;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = (void **)(a1 + 3);
  v9 = a1[3];
  if (v9)
  {
    v10 = a1[4];
    v11 = a1[3];
    if (v10 != v9)
    {
      v12 = a1[4];
      do
      {
        v14 = (void *)*((_QWORD *)v12 - 3);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *((_QWORD *)v10 - 2) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (char *)*v8;
    }
    a1[4] = v9;
    operator delete(v11);
    *v8 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  sub_20F27E3A4((void **)a1 + 6, (__n128 *)(a2 + 48));
  v15 = a1[9];
  if (v15)
  {
    a1[10] = v15;
    operator delete(v15);
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(char **)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return a1;
}

__n128 sub_20F27E3A4(void **a1, __n128 *a2)
{
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 result;

  v4 = (char *)*a1;
  if (*a1)
  {
    v5 = (char *)a1[1];
    v6 = *a1;
    if (v5 == v4)
    {
LABEL_17:
      a1[1] = v4;
      operator delete(v6);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_18;
    }
    while (1)
    {
      v7 = v5 - 400;
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 37);
      if (!v8)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        v11 = (std::__shared_weak_count *)*((_QWORD *)v5 - 39);
        if (v11)
        {
LABEL_10:
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      else
      {
LABEL_9:
        v11 = (std::__shared_weak_count *)*((_QWORD *)v5 - 39);
        if (v11)
          goto LABEL_10;
      }
      v5 -= 400;
      if (v7 == v4)
      {
        v6 = *a1;
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_20F27E4B4(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (void **)(a1 + 24);
  v6 = *(void (****)(_QWORD))(a1 + 24);
  if (v6)
  {
    v7 = *(void (****)(_QWORD))(a1 + 32);
    v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      v9 = v7 - 3;
      v10 = v7 - 3;
      do
      {
        v11 = *v10;
        v10 -= 3;
        (*v11)(v9);
        v12 = v9 == v6;
        v9 = v10;
      }
      while (!v12);
      v8 = *v5;
    }
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v8);
    *v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v13 = (void **)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(void **)(a1 + 48);
    if (v15 != v14)
    {
      v17 = *(_QWORD *)(a1 + 56);
      do
      {
        v19 = *(void **)(v17 - 24);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *(_QWORD *)(v15 - 16) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = *v13;
    }
    *(_QWORD *)(a1 + 56) = v14;
    operator delete(v16);
    *v13 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return a1;
}

void sub_20F27E600(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = (void **)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(void **)(a1 + 24);
        if (v7 != v6)
        {
          v9 = *(_QWORD *)(a1 + 32);
          do
          {
            v11 = *(void **)(v9 - 24);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *(_QWORD *)(v7 - 16) = v10;
              operator delete(v10);
            }
            v7 = v9;
          }
          while (v9 != v6);
          v8 = *v5;
        }
        *(_QWORD *)(a1 + 32) = v6;
        operator delete(v8);
        *v5 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(void **)(a1 + 24);
      if (v13 != v12)
      {
        v15 = *(_QWORD *)(a1 + 32);
        do
        {
          v17 = *(void **)(v15 - 24);
          v15 -= 24;
          v16 = v17;
          if (v17)
          {
            *(_QWORD *)(v13 - 16) = v16;
            operator delete(v16);
          }
          v13 = v15;
        }
        while (v15 != v12);
        v14 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v12;
      operator delete(v14);
    }
    v18 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v18;
      operator delete(v18);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void sub_20F27E7BC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F27E7D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FC180;
  result[1] = v3;
  return result;
}

uint64_t sub_20F27E804(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FC180;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F27E820(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(*a2 + 192) && *(_BYTE *)(v3 + 188))
    return sub_20F27E8C4(*(_QWORD **)(a1 + 8), a3, v3);
  else
    return 1;
}

uint64_t sub_20F27E84C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping17MapDataController29RematchGivenNeighborKeyframesERKN3cva7ImageIDINS0_4ut"
                     "il18UUIDHashU32KeyPairEEERKNSt3__16vectorIiNSA_9allocatorIiEEEERKNSB_IS7_NSC_IS7_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping17MapDataController29RematchGivenNeighborKeyframesERKN3cva7Imag"
                                "eIDINS0_4util18UUIDHashU32KeyPairEEERKNSt3__16vectorIiNSA_9allocatorIiEEEERKNSB_IS7_NSC_IS7_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping17MapDataController29RematchGivenNeighborKeyframesERKN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEERKNSt3__16vectorIiNSA_9allocatorIiEEEERKNSB_IS7_NSC_IS7_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping17MapDataController29RematchGivenNeighborKeyframesERKN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEERKNSt3__16vectorIiNSA_9allocatorIiEEEERKNSB_IS7_NSC_IS7_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F27E8B8()
{
  return &unk_24C9FC1F0;
}

uint64_t sub_20F27E8C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  float32x2_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  float64x2_t v64;
  __int128 v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  float64x2_t v71[4];
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  float64x2_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float64x2_t v117;
  _BYTE v118[32];
  float64x2_t v119;
  uint64_t v120;

  v6 = *(_QWORD *)(a3 + 200);
  v7 = *(_QWORD *)(a3 + 208);
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  if (v7 != v6)
  {
    v11 = (v7 - v6) >> 5;
    while (1)
    {
      v12 = v11 >> 1;
      v13 = v6 + 32 * (v11 >> 1);
      v14 = *(_DWORD *)(v13 + 16);
      v15 = v14 >= v10;
      if (v14 != v10)
        goto LABEL_9;
      if (*(_QWORD *)v13 >= v8)
        break;
LABEL_3:
      v6 = v13 + 32;
      v12 = v11 + ~v12;
LABEL_4:
      v11 = v12;
      if (!v12)
        goto LABEL_12;
    }
    if (*(_QWORD *)v13 != v8)
      goto LABEL_4;
    v15 = *(_DWORD *)(v13 + 8) >= v9;
LABEL_9:
    if (v15)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v6 == v7
    || *(_DWORD *)(v6 + 16) != v10
    || *(_QWORD *)v6 != v8
    || *(_DWORD *)(v6 + 8) != v9
    || (v16 = *(float32x2_t **)(v6 + 24)) == 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 973, (uint64_t)"obs_node", 8, (uint64_t)"Cannot find the observation in the track", 40, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v16 = 0;
    v8 = *(_QWORD *)a2;
  }
  v17 = **(_QWORD **)(a1[2] + 424);
  v18 = *(uint64_t **)(v17 + 56);
  if (!v18)
    goto LABEL_31;
  v19 = *(_DWORD *)(a2 + 8);
  v20 = (uint64_t *)(v17 + 56);
  do
  {
    v21 = v18[4];
    if (v21 < v8)
    {
      ++v18;
    }
    else if (v21 == v8)
    {
      if (*((_DWORD *)v18 + 10) < v19)
        ++v18;
      else
        v20 = v18;
    }
    else
    {
      v20 = v18;
    }
    v18 = (uint64_t *)*v18;
  }
  while (v18);
  if (v20 == (uint64_t *)(v17 + 56) || (v22 = v20[4], v8 < v22) || v8 == v22 && *((_DWORD *)v20 + 10) > v19)
  {
LABEL_31:
    v23 = 0;
    v24 = sub_20E9DF85C((_QWORD *)(v17 + 1784), (uint64_t *)a2);
    if (!v24)
      goto LABEL_37;
  }
  else
  {
    v23 = v20[6];
    v24 = sub_20E9DF85C((_QWORD *)(v17 + 1784), (uint64_t *)a2);
    if (!v24)
    {
LABEL_37:
      v25 = 0;
      v29 = *(uint64_t **)(a1[2] + 424);
      v27 = *v29;
      v28 = *(_QWORD *)(*v29 + 304);
      if (v28)
        goto LABEL_38;
LABEL_50:
      v38 = 0;
      goto LABEL_51;
    }
  }
  v25 = v24[13];
  v26 = *(uint64_t **)(a1[2] + 424);
  v27 = *v26;
  v28 = *(_QWORD *)(*v26 + 304);
  if (!v28)
    goto LABEL_50;
LABEL_38:
  v30 = *(_DWORD *)(a2 + 16);
  v31 = v27 + 304;
  v32 = v27 + 304;
  do
  {
    v33 = *(_DWORD *)(v28 + 32);
    v34 = v33 >= v30;
    if (v33 >= v30)
      v35 = (uint64_t *)v28;
    else
      v35 = (uint64_t *)(v28 + 8);
    if (v34)
      v32 = v28;
    v28 = *v35;
  }
  while (*v35);
  if (v32 == v31)
    goto LABEL_50;
  v36 = *(_DWORD *)(v32 + 32);
  v37 = v32 + 40;
  if (v36 <= v30)
    v38 = v37;
  else
    v38 = 0;
LABEL_51:
  v39 = *(_QWORD *)(v23 + 464);
  v40 = *(double *)(v23 + 504);
  v41 = *(_QWORD *)(v23 + 512);
  v82.f64[0] = *(float64_t *)(v23 + 456);
  v82.f64[1] = v40;
  v42 = *(_QWORD *)(v23 + 600);
  v83 = *(_QWORD *)(v23 + 552);
  v84 = v42;
  v43 = *(_QWORD *)(v23 + 696);
  v85 = *(_QWORD *)(v23 + 648);
  v86 = v43;
  v87 = v39;
  v88 = v41;
  v44 = *(_QWORD *)(v23 + 608);
  v89 = *(_QWORD *)(v23 + 560);
  v90 = v44;
  v45 = *(_QWORD *)(v23 + 704);
  v91 = *(_QWORD *)(v23 + 656);
  v92 = v45;
  v46 = *(_QWORD *)(v23 + 520);
  v47 = *(_QWORD *)(v23 + 480);
  v93 = *(_QWORD *)(v23 + 472);
  v94 = v46;
  v48 = *(_QWORD *)(v23 + 616);
  v95 = *(_QWORD *)(v23 + 568);
  v96 = v48;
  v49 = *(_QWORD *)(v23 + 712);
  v97 = *(_QWORD *)(v23 + 664);
  v98 = v49;
  v50 = *(_QWORD *)(v23 + 528);
  v99 = v47;
  v100 = v50;
  v51 = *(_QWORD *)(v23 + 624);
  v101 = *(_QWORD *)(v23 + 576);
  v102 = v51;
  v52 = *(_QWORD *)(v23 + 720);
  v103 = *(_QWORD *)(v23 + 672);
  v104 = v52;
  v53 = *(_QWORD *)(v23 + 536);
  v54 = *(_QWORD *)(v23 + 496);
  v105 = *(_QWORD *)(v23 + 488);
  v106 = v53;
  v55 = *(_QWORD *)(v23 + 632);
  v107 = *(_QWORD *)(v23 + 584);
  v108 = v55;
  v56 = *(_QWORD *)(v23 + 728);
  v109 = *(_QWORD *)(v23 + 680);
  v110 = v56;
  v57 = *(_QWORD *)(v23 + 544);
  v111 = v54;
  v112 = v57;
  v58 = *(_QWORD *)(v23 + 640);
  v113 = *(_QWORD *)(v23 + 592);
  v114 = v58;
  v59 = *(_QWORD *)(v23 + 736);
  v115 = *(_QWORD *)(v23 + 688);
  v116 = v59;
  v81 = vcvtq_f64_f32(v16[1]);
  v60 = *(_QWORD *)(v23 + 16);
  v61 = *(_QWORD *)(v23 + 40);
  v62 = *(_OWORD *)(v23 + 24);
  v63 = *(_QWORD *)(v23 + 64);
  v64 = *(float64x2_t *)(v23 + 48);
  v117 = *(float64x2_t *)v23;
  *(_OWORD *)&v118[8] = v62;
  *(_QWORD *)v118 = v60;
  *(_QWORD *)&v118[24] = v61;
  v119 = v64;
  v120 = v63;
  sub_20F1B6B0C(&v117);
  v71[2] = *(float64x2_t *)&v118[16];
  v71[3] = v119;
  v72 = v120;
  v71[0] = v117;
  v71[1] = *(float64x2_t *)v118;
  v65 = *(_OWORD *)(v23 + 72);
  v80 = *(_QWORD *)(v23 + 88);
  v79 = v65;
  v66 = *(float64x2_t *)(v23 + 96);
  v76 = *(_QWORD *)(v23 + 112);
  v75 = v66;
  v74 = *(_QWORD *)(v23 + 136);
  v73 = *(_OWORD *)(v23 + 120);
  v77 = *(_OWORD *)(v23 + 144);
  v66.f64[1] = *((float64_t *)&v77 + 1);
  v78 = *(_QWORD *)(v23 + 160);
  v66.f64[0] = *(double *)(*a1 + 464) * v16[4].f32[0];
  return sub_20F34EED8(&v82, v71, v38, (float64x2_t *)(v38 + 72), v25, v81.f64, a3, v66, *(float64_t *)(*a1 + 88), v67, v68, v69);
}

char *sub_20F27ECB8(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      sub_20E867F44();
    result = (char *)operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_20E860C04(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v8[v9 + 24] = *(_BYTE *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20F27ED94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EBF0E7C(&a9);
  _Unwind_Resume(a1);
}

void sub_20F27EDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0)
      operator delete(*(void **)(v10 + v11 - 32));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EBF0E7C(&a9);
  _Unwind_Resume(a1);
}

void sub_20F27EDE4(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  __n128 v19;
  __int128 v20;
  unsigned int v21;
  __n128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __n128 v34;
  __int128 v35;
  __int128 *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __n128 v52;
  __int128 v53;
  __n128 v54;
  __int128 v55;
  unsigned int v56;
  __int128 v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned int v85;
  unsigned int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __n128 v92;
  __int128 v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  unsigned int v105;
  unsigned int v106;
  __n128 *v107;
  __n128 v108;
  __int128 v109;
  BOOL v110;
  __n128 v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  __int128 v120;
  __int128 v121;
  unsigned int v122;
  unsigned int v123;
  __n128 *v124;
  __n128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __n128 *v129;
  unsigned int v130;
  unsigned int v131;
  __n128 v132;
  __int128 v133;
  __n128 v134;
  __int128 v135;
  __n128 *v136;
  __n128 *v137;
  __int128 *v138;
  __int128 v139;
  int v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __n128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __n128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD *v152;
  BOOL v154;
  uint64_t v155;
  _OWORD *v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  int64_t v163;
  int64_t v164;
  BOOL v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int v171;
  unint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  int64_t v179;
  uint64_t v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __n128 v198;
  int v199;
  __int128 v200;
  __n128 v201;
  __int128 v202;
  unsigned int v203;
  unsigned int v204;
  _OWORD *v205;
  __int128 v206;
  unsigned int v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  __int128 v225;
  __n128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __n128 v230;
  __n128 v231;
  __int128 v232;
  __int128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  __n128 v239;
  __int128 v240;
  __int128 v241;
  __n128 v242;
  __n128 v243;
  __int128 v244;
  __n128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;

BOOL sub_20F27FD54(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 32))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v10 = *(_DWORD *)(a2 - 8);
        v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v11;
        *(_DWORD *)(a1 + 32) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_OWORD *)(a2 - 40) = v8;
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      v12 = (__int128 *)(a1 + 40);
      v13 = (__int128 *)(a2 - 40);
      v14 = *(_DWORD *)(a1 + 72);
      v15 = *(_DWORD *)(a2 - 8);
      if (v14 <= *(_DWORD *)(a1 + 32))
      {
        if (v15 > v14)
        {
          v50 = *(_QWORD *)(a1 + 72);
          v51 = *v12;
          v52 = *(_OWORD *)(a1 + 56);
          v53 = *(_DWORD *)(a2 - 8);
          v54 = *(_OWORD *)(a2 - 24);
          *v12 = *v13;
          *(_OWORD *)(a1 + 56) = v54;
          *(_DWORD *)(a1 + 72) = v53;
          *v13 = v51;
          *(_OWORD *)(a2 - 24) = v52;
          *(_DWORD *)(a2 - 8) = v50;
          if (*(_DWORD *)(a1 + 72) > *(_DWORD *)(a1 + 32))
          {
            v55 = *(_QWORD *)(a1 + 32);
            v57 = *(_OWORD *)a1;
            v56 = *(_OWORD *)(a1 + 16);
            v58 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v12;
            *(_OWORD *)(a1 + 16) = v58;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *v12 = v57;
            *(_OWORD *)(a1 + 56) = v56;
            *(_DWORD *)(a1 + 72) = v55;
          }
        }
      }
      else if (v15 <= v14)
      {
        v67 = *(_QWORD *)(a1 + 32);
        v69 = *(_OWORD *)a1;
        v68 = *(_OWORD *)(a1 + 16);
        v70 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v12;
        *(_OWORD *)(a1 + 16) = v70;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *v12 = v69;
        *(_OWORD *)(a1 + 56) = v68;
        *(_DWORD *)(a1 + 72) = v67;
        if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 72))
        {
          v71 = *(_QWORD *)(a1 + 72);
          v72 = *v12;
          v73 = *(_OWORD *)(a1 + 56);
          v74 = *(_DWORD *)(a2 - 8);
          v75 = *(_OWORD *)(a2 - 24);
          *v12 = *v13;
          *(_OWORD *)(a1 + 56) = v75;
          *(_DWORD *)(a1 + 72) = v74;
          *v13 = v72;
          *(_OWORD *)(a2 - 24) = v73;
          *(_DWORD *)(a2 - 8) = v71;
        }
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 32);
        v17 = *(_OWORD *)a1;
        v18 = *(_OWORD *)(a1 + 16);
        v19 = *(_DWORD *)(a2 - 8);
        v20 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v13;
        *(_OWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 32) = v19;
        *v13 = v17;
        *(_OWORD *)(a2 - 24) = v18;
        *(_DWORD *)(a2 - 8) = v16;
      }
      return result;
    case 4uLL:
      sub_20F28024C(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      v30 = (__int128 *)(a1 + 40);
      v31 = (__int128 *)(a1 + 80);
      v32 = (__int128 *)(a1 + 120);
      sub_20F28024C(a1, a1 + 40, a1 + 80, a1 + 120, a3);
      if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 152))
        return 1;
      v33 = *(_QWORD *)(a1 + 152);
      v34 = *v32;
      v35 = *(_OWORD *)(a1 + 136);
      v36 = *(_DWORD *)(a2 - 8);
      v37 = *(_OWORD *)(a2 - 24);
      *v32 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v37;
      *(_DWORD *)(a1 + 152) = v36;
      *(_OWORD *)(a2 - 24) = v35;
      *(_OWORD *)(a2 - 40) = v34;
      *(_DWORD *)(a2 - 8) = v33;
      if (*(_DWORD *)(a1 + 152) <= *(_DWORD *)(a1 + 112))
        return 1;
      v38 = *(_QWORD *)(a1 + 112);
      v40 = *v31;
      v39 = *(_OWORD *)(a1 + 96);
      v41 = *(_OWORD *)(a1 + 136);
      *v31 = *v32;
      *(_OWORD *)(a1 + 96) = v41;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 152);
      *v32 = v40;
      *(_OWORD *)(a1 + 136) = v39;
      *(_DWORD *)(a1 + 152) = v38;
      if (*(_DWORD *)(a1 + 112) <= *(_DWORD *)(a1 + 72))
        return 1;
      v42 = *(_QWORD *)(a1 + 72);
      v44 = *v30;
      v43 = *(_OWORD *)(a1 + 56);
      v45 = *(_OWORD *)(a1 + 96);
      *v30 = *v31;
      *(_OWORD *)(a1 + 56) = v45;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *v31 = v44;
      *(_OWORD *)(a1 + 96) = v43;
      *(_DWORD *)(a1 + 112) = v42;
      if (*(_DWORD *)(a1 + 72) <= *(_DWORD *)(a1 + 32))
        return 1;
      v46 = *(_QWORD *)(a1 + 32);
      v48 = *(_OWORD *)a1;
      v47 = *(_OWORD *)(a1 + 16);
      v49 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v30;
      *(_OWORD *)(a1 + 16) = v49;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
      *v30 = v48;
      *(_OWORD *)(a1 + 56) = v47;
      result = 1;
      *(_DWORD *)(a1 + 72) = v46;
      return result;
    default:
      v21 = a1 + 80;
      v22 = (__int128 *)(a1 + 40);
      v23 = *(_DWORD *)(a1 + 72);
      v24 = *(_DWORD *)(a1 + 32);
      v25 = *(_DWORD *)(a1 + 112);
      if (v23 <= v24)
      {
        if (v25 > v23)
        {
          v59 = *(_QWORD *)(a1 + 72);
          v61 = *v22;
          v60 = *(_OWORD *)(a1 + 56);
          v62 = *(_OWORD *)(a1 + 96);
          *v22 = *(_OWORD *)v21;
          *(_OWORD *)(a1 + 56) = v62;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)v21 = v61;
          *(_OWORD *)(a1 + 96) = v60;
          *(_DWORD *)(a1 + 112) = v59;
          if (*(_DWORD *)(a1 + 72) > v24)
          {
            v63 = *(_QWORD *)(a1 + 32);
            v65 = *(_OWORD *)a1;
            v64 = *(_OWORD *)(a1 + 16);
            v66 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v22;
            *(_OWORD *)(a1 + 16) = v66;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *v22 = v65;
            *(_OWORD *)(a1 + 56) = v64;
            *(_DWORD *)(a1 + 72) = v63;
          }
        }
      }
      else if (v25 <= v23)
      {
        v76 = *(_QWORD *)(a1 + 32);
        v78 = *(_OWORD *)a1;
        v77 = *(_OWORD *)(a1 + 16);
        v79 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v22;
        *(_OWORD *)(a1 + 16) = v79;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *v22 = v78;
        *(_OWORD *)(a1 + 56) = v77;
        *(_DWORD *)(a1 + 72) = v76;
        if (v25 > *(_DWORD *)(a1 + 72))
        {
          v80 = *(_QWORD *)(a1 + 72);
          v82 = *v22;
          v81 = *(_OWORD *)(a1 + 56);
          v83 = *(_OWORD *)(a1 + 96);
          *v22 = *(_OWORD *)v21;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)v21 = v82;
          *(_OWORD *)(a1 + 96) = v81;
          *(_DWORD *)(a1 + 112) = v80;
        }
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 32);
        v28 = *(_OWORD *)a1;
        v27 = *(_OWORD *)(a1 + 16);
        v29 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v21;
        *(_OWORD *)(a1 + 16) = v29;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)v21 = v28;
        *(_OWORD *)(a1 + 96) = v27;
        *(_DWORD *)(a1 + 112) = v26;
      }
      v84 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v85 = 0;
      v86 = 0;
      break;
  }
  while (1)
  {
    v87 = *(_DWORD *)(v84 + 32);
    if (v87 > *(_DWORD *)(v21 + 32))
      break;
LABEL_36:
    v21 = v84;
    v85 += 40;
    v84 += 40;
    if (v84 == a2)
      return 1;
  }
  v92 = *(_OWORD *)v84;
  v93 = *(_OWORD *)(v84 + 16);
  v88 = v85;
  do
  {
    v89 = a1 + v88;
    v90 = *(_OWORD *)(a1 + v88 + 96);
    *(_OWORD *)(v89 + 120) = *(_OWORD *)(a1 + v88 + 80);
    *(_OWORD *)(v89 + 136) = v90;
    *(_DWORD *)(v89 + 152) = *(_DWORD *)(a1 + v88 + 112);
    if (v88 == -80)
    {
      *(_OWORD *)a1 = v92;
      *(_OWORD *)(a1 + 16) = v93;
      *(_DWORD *)(a1 + 32) = v87;
      if (++v86 != 8)
        goto LABEL_36;
      return v84 + 40 == a2;
    }
    v88 -= 40;
  }
  while (v87 > *(_DWORD *)(v89 + 72));
  v91 = a1 + v88 + 120;
  *(_OWORD *)v91 = v92;
  *(_OWORD *)(v91 + 16) = v93;
  *(_DWORD *)(v91 + 32) = v87;
  if (++v86 != 8)
    goto LABEL_36;
  return v84 + 40 == a2;
}

__n128 sub_20F28024C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 result)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  __int128 v36;

  v5 = *(_DWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a3 + 32);
  if (v5 <= *(_DWORD *)(a1 + 32))
  {
    if (v6 > v5)
    {
      v11 = *(_QWORD *)(a2 + 32);
      result = *(__n128 *)a2;
      v12 = *(_OWORD *)(a2 + 16);
      v13 = *(_DWORD *)(a3 + 32);
      v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v14;
      *(_DWORD *)(a2 + 32) = v13;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v12;
      *(_DWORD *)(a3 + 32) = v11;
      if (*(_DWORD *)(a2 + 32) > *(_DWORD *)(a1 + 32))
      {
        v15 = *(_QWORD *)(a1 + 32);
        result = *(__n128 *)a1;
        v16 = *(_OWORD *)(a1 + 16);
        v17 = *(_DWORD *)(a2 + 32);
        v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v18;
        *(_DWORD *)(a1 + 32) = v17;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v16;
        *(_DWORD *)(a2 + 32) = v15;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      v7 = *(_QWORD *)(a1 + 32);
      result = *(__n128 *)a1;
      v8 = *(_OWORD *)(a1 + 16);
      v9 = *(_DWORD *)(a3 + 32);
      v10 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v10;
      *(_DWORD *)(a1 + 32) = v9;
LABEL_9:
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v8;
      *(_DWORD *)(a3 + 32) = v7;
      goto LABEL_10;
    }
    v19 = *(_QWORD *)(a1 + 32);
    result = *(__n128 *)a1;
    v20 = *(_OWORD *)(a1 + 16);
    v21 = *(_DWORD *)(a2 + 32);
    v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v22;
    *(_DWORD *)(a1 + 32) = v21;
    *(__n128 *)a2 = result;
    *(_OWORD *)(a2 + 16) = v20;
    *(_DWORD *)(a2 + 32) = v19;
    if (*(_DWORD *)(a3 + 32) > *(_DWORD *)(a2 + 32))
    {
      v7 = *(_QWORD *)(a2 + 32);
      result = *(__n128 *)a2;
      v8 = *(_OWORD *)(a2 + 16);
      v23 = *(_DWORD *)(a3 + 32);
      v24 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v24;
      *(_DWORD *)(a2 + 32) = v23;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)(a4 + 32) > *(_DWORD *)(a3 + 32))
  {
    v25 = *(_QWORD *)(a3 + 32);
    result = *(__n128 *)a3;
    v26 = *(_OWORD *)(a3 + 16);
    v27 = *(_DWORD *)(a4 + 32);
    v28 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v28;
    *(_DWORD *)(a3 + 32) = v27;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v26;
    *(_DWORD *)(a4 + 32) = v25;
    if (*(_DWORD *)(a3 + 32) > *(_DWORD *)(a2 + 32))
    {
      v29 = *(_QWORD *)(a2 + 32);
      result = *(__n128 *)a2;
      v30 = *(_OWORD *)(a2 + 16);
      v31 = *(_DWORD *)(a3 + 32);
      v32 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v32;
      *(_DWORD *)(a2 + 32) = v31;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v30;
      *(_DWORD *)(a3 + 32) = v29;
      if (*(_DWORD *)(a2 + 32) > *(_DWORD *)(a1 + 32))
      {
        v33 = *(_QWORD *)(a1 + 32);
        result = *(__n128 *)a1;
        v34 = *(_OWORD *)(a1 + 16);
        v35 = *(_DWORD *)(a2 + 32);
        v36 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v36;
        *(_DWORD *)(a1 + 32) = v35;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v34;
        *(_DWORD *)(a2 + 32) = v33;
      }
    }
  }
  return result;
}

void sub_20F2803D4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  __int128 *v30;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  unsigned int v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

uint64_t sub_20F280984(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v3 = *((_DWORD *)a2 + 4);
  v4 = *((_DWORD *)a1 + 4);
  if (v3 != v4)
  {
    if (v3 >= v4)
      goto LABEL_5;
LABEL_11:
    v7 = *((_DWORD *)a3 + 4);
    if (v7 == v3)
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)a2
        && (*(_QWORD *)a3 != *(_QWORD *)a2 || *((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)))
      {
LABEL_15:
        v8 = *a1;
        v9 = *((_QWORD *)a1 + 2);
        v10 = *((_DWORD *)a2 + 4);
        *a1 = *a2;
        *((_DWORD *)a1 + 4) = v10;
        *((_DWORD *)a2 + 4) = v9;
        *a2 = v8;
        v11 = *((_DWORD *)a3 + 4);
        v12 = *((_DWORD *)a2 + 4);
        if (v11 == v12)
        {
          if (*(_QWORD *)a3 >= *(_QWORD *)a2
            && (*(_QWORD *)a3 != *(_QWORD *)a2 || *((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)))
          {
            return 1;
          }
        }
        else if (v11 >= v12)
        {
          return 1;
        }
        v21 = *a2;
        v22 = *((_QWORD *)a2 + 2);
        v23 = *((_DWORD *)a3 + 4);
        *a2 = *a3;
        *((_DWORD *)a2 + 4) = v23;
        *((_DWORD *)a3 + 4) = v22;
        *a3 = v21;
        return 2;
      }
    }
    else if (v7 >= v3)
    {
      goto LABEL_15;
    }
    v13 = *a1;
    v14 = *((_QWORD *)a1 + 2);
    v15 = *((_DWORD *)a3 + 4);
    *a1 = *a3;
    *((_DWORD *)a1 + 4) = v15;
    *((_DWORD *)a3 + 4) = v14;
    *a3 = v13;
    return 1;
  }
  if (*(_QWORD *)a2 < *(_QWORD *)a1 || *(_QWORD *)a2 == *(_QWORD *)a1 && *((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
    goto LABEL_11;
LABEL_5:
  v5 = *((_DWORD *)a3 + 4);
  if (v5 == v3)
  {
    if (*(_QWORD *)a3 >= *(_QWORD *)a2
      && (*(_QWORD *)a3 != *(_QWORD *)a2 || *((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)))
    {
      return 0;
    }
  }
  else if (v5 >= v3)
  {
    return 0;
  }
  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *((_DWORD *)a3 + 4);
  *a2 = *a3;
  *((_DWORD *)a2 + 4) = v18;
  *((_DWORD *)a3 + 4) = v17;
  *a3 = v16;
  v19 = *((_DWORD *)a2 + 4);
  v20 = *((_DWORD *)a1 + 4);
  if (v19 != v20)
  {
    if (v19 >= v20)
      return 1;
LABEL_31:
    v24 = *a1;
    v25 = *((_QWORD *)a1 + 2);
    v26 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v26;
    *((_DWORD *)a2 + 4) = v25;
    *a2 = v24;
    return 2;
  }
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
    goto LABEL_31;
  if (*(_QWORD *)a2 == *(_QWORD *)a1)
  {
    if (*((_DWORD *)a2 + 2) >= *((_DWORD *)a1 + 2))
      return 1;
    goto LABEL_31;
  }
  return 1;
}

unint64_t sub_20F280B84(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unint64_t v7;
  unint64_t i;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *j;
  BOOL v13;
  unint64_t v14;
  __int128 v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  __int128 v20;
  __int128 v22;
  uint64_t v23;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v5 = *(a2 - 2);
  v6 = v4 >= v5;
  if (v4 == v5)
  {
    v7 = *((_QWORD *)a2 - 3);
    if (v2 < v7)
    {
LABEL_6:
      for (i = (unint64_t)(a1 + 3); ; i += 24)
      {
        v9 = *(_DWORD *)(i + 16);
        v10 = v4 >= v9;
        if (v4 != v9)
          goto LABEL_7;
        if (v2 < *(_QWORD *)i)
          goto LABEL_22;
        if (v2 == *(_QWORD *)i)
          break;
LABEL_9:
        ;
      }
      v10 = v3 >= *(_DWORD *)(i + 8);
LABEL_7:
      if (!v10)
        goto LABEL_22;
      goto LABEL_9;
    }
    if (v2 != v7)
      goto LABEL_14;
    v6 = v3 >= *(a2 - 4);
  }
  if (!v6)
    goto LABEL_6;
LABEL_14:
  for (i = (unint64_t)(a1 + 3); i < (unint64_t)a2; i += 24)
  {
    v11 = *(_DWORD *)(i + 16);
    if (v4 == v11)
    {
      if (v2 < *(_QWORD *)i || v2 == *(_QWORD *)i && v3 < *(_DWORD *)(i + 8))
        break;
    }
    else if (v4 < v11)
    {
      break;
    }
  }
LABEL_22:
  if (i >= (unint64_t)a2)
    goto LABEL_31;
  for (j = a2 - 4; ; j -= 6)
  {
    v13 = v4 >= v5;
    if (v4 != v5)
      goto LABEL_24;
    v14 = *((_QWORD *)j - 1);
    if (v2 < v14)
      goto LABEL_25;
    if (v2 != v14)
      break;
    v13 = v3 >= *j;
LABEL_24:
    if (v13)
      break;
LABEL_25:
    v5 = *(j - 4);
  }
  a2 = j - 2;
LABEL_31:
  if (i >= (unint64_t)a2)
    goto LABEL_47;
  while (2)
  {
    v23 = *(_QWORD *)(i + 16);
    v22 = *(_OWORD *)i;
    v15 = *(_OWORD *)a2;
    *(_DWORD *)(i + 16) = a2[4];
    *(_OWORD *)i = v15;
    a2[4] = v23;
    *(_OWORD *)a2 = v22;
    while (2)
    {
      while (1)
      {
        i += 24;
        v16 = *(_DWORD *)(i + 16);
        v17 = v4 >= v16;
        if (v4 != v16)
          break;
        if (v2 < *(_QWORD *)i)
          goto LABEL_44;
        if (v2 == *(_QWORD *)i)
        {
          v17 = v3 >= *(_DWORD *)(i + 8);
          break;
        }
      }
      if (v17)
        continue;
      break;
    }
LABEL_44:
    while (2)
    {
      while (1)
      {
        a2 -= 6;
        v19 = a2[4];
        v18 = v4 >= v19;
        if (v4 != v19)
          break;
        if (v2 >= *(_QWORD *)a2)
        {
          if (v2 != *(_QWORD *)a2)
            goto LABEL_33;
          v18 = v3 >= a2[2];
          break;
        }
      }
      if (!v18)
        continue;
      break;
    }
LABEL_33:
    if (i < (unint64_t)a2)
      continue;
    break;
  }
LABEL_47:
  if ((uint64_t *)(i - 24) != a1)
  {
    v20 = *(_OWORD *)(i - 24);
    *((_DWORD *)a1 + 4) = *(_DWORD *)(i - 8);
    *(_OWORD *)a1 = v20;
  }
  *(_QWORD *)(i - 24) = v2;
  *(_QWORD *)(i - 16) = v3;
  *(_DWORD *)(i - 8) = v4;
  return i;
}

unint64_t sub_20F280D70(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  BOOL v20;
  __int128 v21;
  __int128 v23;
  uint64_t v24;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_DWORD *)a1 + 4);
  while (1)
  {
    v7 = a1[v2 + 5];
    v6 = v7 >= v5;
    if (v7 == v5)
      break;
LABEL_3:
    if (v6)
      goto LABEL_8;
LABEL_4:
    v2 += 3;
  }
  v8 = a1[v2 + 3];
  if (v8 < v3)
    goto LABEL_4;
  if (v8 == v3)
  {
    v6 = LODWORD(a1[v2 + 4]) >= v4;
    goto LABEL_3;
  }
LABEL_8:
  v9 = (unint64_t)&a1[v2 + 3];
  if (v2 * 8)
  {
    do
    {
      while (1)
      {
        a2 -= 24;
        v10 = *(_DWORD *)(a2 + 16);
        if (v10 == v5)
          break;
        if (v10 < v5)
          goto LABEL_25;
      }
    }
    while (*(_QWORD *)a2 >= v3 && (*(_QWORD *)a2 != v3 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_24:
    if (v9 < a2)
    {
      do
      {
        a2 -= 24;
        v12 = *(_DWORD *)(a2 + 16);
        v13 = v12 >= v5;
        if (v12 == v5)
        {
          if (*(_QWORD *)a2 < v3)
            break;
          if (*(_QWORD *)a2 != v3)
            goto LABEL_24;
          v13 = *(_DWORD *)(a2 + 8) >= v4;
        }
      }
      while (v13 && v9 < a2);
    }
  }
LABEL_25:
  v14 = v9;
  if (v9 < a2)
  {
    v15 = a2;
    do
    {
      v24 = *(_QWORD *)(v14 + 16);
      v23 = *(_OWORD *)v14;
      v16 = *(_OWORD *)v15;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(v15 + 16);
      *(_OWORD *)v14 = v16;
      *(_DWORD *)(v15 + 16) = v24;
      *(_OWORD *)v15 = v23;
      do
      {
        while (1)
        {
          v14 += 24;
          v17 = *(_DWORD *)(v14 + 16);
          v18 = v17 >= v5;
          if (v17 == v5)
            break;
LABEL_29:
          if (v18)
            goto LABEL_36;
        }
      }
      while (*(_QWORD *)v14 < v3);
      if (*(_QWORD *)v14 == v3)
      {
        v18 = *(_DWORD *)(v14 + 8) >= v4;
        goto LABEL_29;
      }
      while (1)
      {
LABEL_36:
        v15 -= 24;
        v19 = *(_DWORD *)(v15 + 16);
        v20 = v19 >= v5;
        if (v19 != v5)
          goto LABEL_34;
        if (*(_QWORD *)v15 < v3)
          break;
        if (*(_QWORD *)v15 == v3)
        {
          v20 = *(_DWORD *)(v15 + 8) >= v4;
LABEL_34:
          if (!v20)
            break;
        }
      }
    }
    while (v14 < v15);
  }
  if ((uint64_t *)(v14 - 24) != a1)
  {
    v21 = *(_OWORD *)(v14 - 24);
    *((_DWORD *)a1 + 4) = *(_DWORD *)(v14 - 8);
    *(_OWORD *)a1 = v21;
  }
  *(_QWORD *)(v14 - 24) = v3;
  *(_QWORD *)(v14 - 16) = v4;
  *(_DWORD *)(v14 - 8) = v5;
  return v14 - 24;
}

BOOL sub_20F280F2C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = (_QWORD *)(a2 - 24);
      v20 = *(_DWORD *)(a2 - 8);
      v21 = *(_DWORD *)(a1 + 16);
      v22 = v20 >= v21;
      if (v20 != v21)
        goto LABEL_30;
      if (*v19 < *(_QWORD *)a1)
        goto LABEL_31;
      if (*v19 == *(_QWORD *)a1)
      {
        v22 = *(_DWORD *)(a2 - 16) >= *(_DWORD *)(a1 + 8);
LABEL_30:
        if (!v22)
        {
LABEL_31:
          v23 = *(_OWORD *)a1;
          v24 = *(_QWORD *)(a1 + 16);
          v25 = *(_DWORD *)(a2 - 8);
          *(_OWORD *)a1 = *(_OWORD *)v19;
          *(_DWORD *)(a1 + 16) = v25;
          *(_DWORD *)(a2 - 8) = v24;
          *(_OWORD *)v19 = v23;
        }
      }
      return result;
    case 3uLL:
      sub_20F280984((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_20F2811EC(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_20F281344((__n128 *)a1, a1 + 24, a1 + 48, (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v6 = a1 + 48;
      sub_20F280984((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v7 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *(_DWORD *)(v7 + 16);
    v12 = *(_DWORD *)(v6 + 16);
    if (v11 == v12)
    {
      v13 = *(_QWORD *)v7;
      if (*(_QWORD *)v7 >= *(_QWORD *)v6
        && (*(_QWORD *)v7 != *(_QWORD *)v6 || *(_DWORD *)(v7 + 8) >= *(_DWORD *)(v6 + 8)))
      {
        goto LABEL_8;
      }
    }
    else
    {
      if (v11 >= v12)
        goto LABEL_8;
      v13 = *(_QWORD *)v7;
    }
    v14 = *(_QWORD *)(v7 + 8);
    *(_OWORD *)v7 = *(_OWORD *)v6;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(v6 + 16);
    v10 = a1;
    if (v6 == a1)
      goto LABEL_7;
    v15 = v8;
    while (1)
    {
      v16 = a1 + v15;
      v17 = (_OWORD *)(a1 + v15 + 24);
      v18 = *(_DWORD *)(a1 + v15 + 40);
      if (v11 == v18)
        break;
      if (v11 >= v18)
        goto LABEL_25;
LABEL_19:
      v6 -= 24;
      *(_OWORD *)(v16 + 48) = *v17;
      *(_DWORD *)(v16 + 64) = *(_DWORD *)(a1 + v15 + 40);
      v15 -= 24;
      if (v15 == -48)
      {
        v10 = a1;
        goto LABEL_7;
      }
    }
    if (v13 < *(_QWORD *)v17)
      goto LABEL_19;
    if (v13 != *(_QWORD *)v17)
    {
      v10 = a1 + v15 + 48;
      goto LABEL_7;
    }
    if (v14 < *(_DWORD *)(a1 + v15 + 32))
      goto LABEL_19;
LABEL_25:
    v10 = v6;
LABEL_7:
    *(_QWORD *)v10 = v13;
    *(_QWORD *)(v10 + 8) = v14;
    *(_DWORD *)(v10 + 16) = v11;
    if (++v9 == 8)
      return v7 + 24 == a2;
LABEL_8:
    v6 = v7;
    v8 += 24;
    v7 += 24;
    if (v7 != a2)
      continue;
    return 1;
  }
}

__n128 sub_20F2811EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  int v20;

  sub_20F280984((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_DWORD *)(a4 + 16);
  v10 = *(_DWORD *)(a3 + 16);
  if (v9 != v10)
  {
    if (v9 >= v10)
      return result;
LABEL_7:
    result = *(__n128 *)a3;
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a4 + 16) = v11;
    *(__n128 *)a4 = result;
    LODWORD(v11) = *(_DWORD *)(a3 + 16);
    v13 = *(_DWORD *)(a2 + 16);
    v14 = v11 >= v13;
    if ((_DWORD)v11 == v13)
    {
      if (*(_QWORD *)a3 < *(_QWORD *)a2)
        goto LABEL_12;
      if (*(_QWORD *)a3 != *(_QWORD *)a2)
        return result;
      v14 = *(_DWORD *)(a3 + 8) >= *(_DWORD *)(a2 + 8);
    }
    if (v14)
      return result;
LABEL_12:
    result = *(__n128 *)a2;
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 16) = v16;
    *(_DWORD *)(a3 + 16) = v15;
    *(__n128 *)a3 = result;
    LODWORD(v15) = *(_DWORD *)(a2 + 16);
    v17 = *(_DWORD *)(a1 + 16);
    v18 = v15 >= v17;
    if ((_DWORD)v15 == v17)
    {
      if (*(_QWORD *)a2 < *(_QWORD *)a1)
      {
LABEL_17:
        result = *(__n128 *)a1;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a2 + 16) = v19;
        *(__n128 *)a2 = result;
        return result;
      }
      if (*(_QWORD *)a2 != *(_QWORD *)a1)
        return result;
      v18 = *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 8);
    }
    if (v18)
      return result;
    goto LABEL_17;
  }
  if (*(_QWORD *)a4 < *(_QWORD *)a3 || *(_QWORD *)a4 == *(_QWORD *)a3 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    goto LABEL_7;
  return result;
}

__n128 sub_20F281344(__n128 *a1, uint64_t a2, uint64_t a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unsigned __int32 v11;
  unsigned __int32 v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int32 v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  unint64_t v25;
  unsigned __int32 v26;

  result.n128_u64[0] = sub_20F2811EC((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  v11 = a5[1].n128_u32[0];
  v12 = a4[1].n128_u32[0];
  if (v11 != v12)
  {
    if (v11 >= v12)
      return result;
LABEL_7:
    result = *a4;
    v13 = a4[1].n128_u64[0];
    v14 = a5[1].n128_u32[0];
    *a4 = *a5;
    a4[1].n128_u32[0] = v14;
    a5[1].n128_u32[0] = v13;
    *a5 = result;
    LODWORD(v13) = a4[1].n128_u32[0];
    v15 = *(_DWORD *)(a3 + 16);
    v16 = v13 >= v15;
    if ((_DWORD)v13 == v15)
    {
      if (a4->n128_u64[0] < *(_QWORD *)a3)
        goto LABEL_12;
      if (a4->n128_u64[0] != *(_QWORD *)a3)
        return result;
      v16 = a4->n128_u32[2] >= *(_DWORD *)(a3 + 8);
    }
    if (v16)
      return result;
LABEL_12:
    result = *(__n128 *)a3;
    v17 = *(_QWORD *)(a3 + 16);
    v18 = a4[1].n128_u32[0];
    *(__n128 *)a3 = *a4;
    *(_DWORD *)(a3 + 16) = v18;
    a4[1].n128_u32[0] = v17;
    *a4 = result;
    LODWORD(v17) = *(_DWORD *)(a3 + 16);
    v19 = *(_DWORD *)(a2 + 16);
    v20 = v17 >= v19;
    if ((_DWORD)v17 == v19)
    {
      if (*(_QWORD *)a3 < *(_QWORD *)a2)
        goto LABEL_17;
      if (*(_QWORD *)a3 != *(_QWORD *)a2)
        return result;
      v20 = *(_DWORD *)(a3 + 8) >= *(_DWORD *)(a2 + 8);
    }
    if (v20)
      return result;
LABEL_17:
    result = *(__n128 *)a2;
    v21 = *(_QWORD *)(a2 + 16);
    v22 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 16) = v22;
    *(_DWORD *)(a3 + 16) = v21;
    *(__n128 *)a3 = result;
    LODWORD(v21) = *(_DWORD *)(a2 + 16);
    v23 = a1[1].n128_u32[0];
    v24 = v21 >= v23;
    if ((_DWORD)v21 == v23)
    {
      if (*(_QWORD *)a2 < a1->n128_u64[0])
      {
LABEL_22:
        result = *a1;
        v25 = a1[1].n128_u64[0];
        v26 = *(_DWORD *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v26;
        *(_DWORD *)(a2 + 16) = v25;
        *(__n128 *)a2 = result;
        return result;
      }
      if (*(_QWORD *)a2 != a1->n128_u64[0])
        return result;
      v24 = *(_DWORD *)(a2 + 8) >= a1->n128_u32[2];
    }
    if (v24)
      return result;
    goto LABEL_22;
  }
  if (a5->n128_u64[0] < a4->n128_u64[0] || a5->n128_u64[0] == a4->n128_u64[0] && a5->n128_u32[2] < a4->n128_u32[2])
    goto LABEL_7;
  return result;
}

uint64_t sub_20F281500(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unint64_t v23;
  unsigned int v24;

  if (a3 < 2)
    return result;
  v4 = (unint64_t)(a3 - 2) >> 1;
  if (v4 < (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    return result;
  v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
  v6 = (unint64_t *)(result + 24 * v5);
  if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 >= a3)
    goto LABEL_10;
  v7 = *(_DWORD *)(result + 24 * v5 + 16);
  v8 = *((_DWORD *)v6 + 10);
  v9 = v7 >= v8;
  if (v7 != v8)
  {
LABEL_8:
    if (!v9)
      goto LABEL_9;
    goto LABEL_10;
  }
  v10 = v6[3];
  if (*v6 < v10)
  {
LABEL_9:
    v6 += 3;
    v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
    goto LABEL_10;
  }
  if (*v6 == v10)
  {
    v9 = *((_DWORD *)v6 + 2) >= *((_DWORD *)v6 + 8);
    goto LABEL_8;
  }
LABEL_10:
  v11 = *((_DWORD *)v6 + 4);
  v12 = *((_DWORD *)a4 + 4);
  if (v11 == v12)
  {
    v13 = *a4;
    if (*v6 < *a4)
      return result;
    if (*v6 == *a4)
    {
      v13 = *v6;
      if (*((_DWORD *)v6 + 2) < *((_DWORD *)a4 + 2))
        return result;
    }
  }
  else
  {
    if (v11 < v12)
      return result;
    v13 = *a4;
  }
  v14 = a4[1];
  v15 = *(_OWORD *)v6;
  *((_DWORD *)a4 + 4) = *((_DWORD *)v6 + 4);
  *(_OWORD *)a4 = v15;
  if (v4 < v5)
    goto LABEL_33;
  while (1)
  {
    v17 = v6;
    v18 = 2 * v5;
    v5 = (2 * v5) | 1;
    v6 = (unint64_t *)(result + 24 * v5);
    v19 = v18 + 2;
    if (v19 >= a3)
      goto LABEL_28;
    v20 = *(_DWORD *)(result + 24 * v5 + 16);
    v21 = *((_DWORD *)v6 + 10);
    v22 = v20 >= v21;
    if (v20 != v21)
      goto LABEL_26;
    v23 = v6[3];
    if (*v6 >= v23)
    {
      if (*v6 != v23)
        goto LABEL_28;
      v22 = *((_DWORD *)v6 + 2) >= *((_DWORD *)v6 + 8);
LABEL_26:
      if (v22)
        goto LABEL_28;
    }
    v6 += 3;
    v5 = v19;
LABEL_28:
    v24 = *((_DWORD *)v6 + 4);
    if (v24 == v12)
      break;
    if (v24 < v12)
      goto LABEL_32;
LABEL_20:
    v16 = *(_OWORD *)v6;
    *((_DWORD *)v17 + 4) = *((_DWORD *)v6 + 4);
    *(_OWORD *)v17 = v16;
    if (v4 < v5)
      goto LABEL_33;
  }
  if (*v6 >= v13 && (*v6 != v13 || *((_DWORD *)v6 + 2) >= v14))
    goto LABEL_20;
LABEL_32:
  v6 = v17;
LABEL_33:
  *v6 = v13;
  v6[1] = v14;
  *((_DWORD *)v6 + 4) = v12;
  return result;
}

__int128 *sub_20F2816B4(__int128 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31;

  if (a4 < 2)
    return result;
  v4 = 0;
  v30 = *result;
  v31 = *((_QWORD *)result + 2);
  v5 = result;
  do
  {
    v7 = v5;
    v8 = v4 + 1;
    v5 = (__int128 *)((char *)v5 + 24 * v4 + 24);
    v9 = 2 * v4;
    v4 = (2 * v4) | 1;
    v10 = v9 + 2;
    if (v10 >= a4)
      goto LABEL_4;
    v11 = *((_DWORD *)v7 + 6 * v8 + 4);
    v12 = *((_DWORD *)v5 + 10);
    v13 = v11 >= v12;
    if (v11 != v12)
      goto LABEL_10;
    v14 = *((_QWORD *)v5 + 3);
    if (*(_QWORD *)v5 < v14)
      goto LABEL_3;
    if (*(_QWORD *)v5 == v14)
    {
      v13 = *((_DWORD *)v5 + 2) >= *((_DWORD *)v5 + 8);
LABEL_10:
      if (!v13)
      {
LABEL_3:
        v5 = (__int128 *)((char *)v5 + 24);
        v4 = v10;
      }
    }
LABEL_4:
    v6 = *v5;
    *((_DWORD *)v7 + 4) = *((_DWORD *)v5 + 4);
    *v7 = v6;
  }
  while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
  v15 = (__int128 *)(a2 - 24);
  if (v5 == (__int128 *)(a2 - 24))
  {
    *((_DWORD *)v5 + 4) = v31;
    *v5 = v30;
    return result;
  }
  v16 = *v15;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(a2 - 8);
  *v5 = v16;
  *v15 = v30;
  *(_DWORD *)(a2 - 8) = v31;
  v17 = (char *)v5 - (char *)result + 24;
  if (v17 < 25)
    return result;
  v18 = v17 / 0x18uLL - 2;
  v19 = v18 >> 1;
  v20 = (unint64_t *)result + 3 * (v18 >> 1);
  v21 = *((_DWORD *)v20 + 4);
  v22 = *((_DWORD *)v5 + 4);
  if (v21 == v22)
  {
    v23 = *(_QWORD *)v5;
    if (*v20 >= *(_QWORD *)v5)
    {
      if (*v20 != *(_QWORD *)v5)
        return result;
      v23 = *v20;
      if (*((_DWORD *)v20 + 2) >= *((_DWORD *)v5 + 2))
        return result;
    }
  }
  else
  {
    if (v21 >= v22)
      return result;
    v23 = *(_QWORD *)v5;
  }
  v24 = *((_QWORD *)v5 + 1);
  v25 = *(_OWORD *)v20;
  *((_DWORD *)v5 + 4) = *((_DWORD *)v20 + 4);
  *v5 = v25;
  if (v18 < 2)
    goto LABEL_32;
  while (2)
  {
    v27 = v20;
    v28 = v19 - 1;
    v19 = (v19 - 1) >> 1;
    v20 = (unint64_t *)result + 3 * v19;
    v29 = *((_DWORD *)v20 + 4);
    if (v29 != v22)
    {
      if (v29 >= v22)
        break;
      goto LABEL_26;
    }
    if (*v20 < v23 || *v20 == v23 && *((_DWORD *)v20 + 2) < v24)
    {
LABEL_26:
      v26 = *(_OWORD *)v20;
      *((_DWORD *)v27 + 4) = *((_DWORD *)v20 + 4);
      *(_OWORD *)v27 = v26;
      if (v28 <= 1)
        goto LABEL_32;
      continue;
    }
    break;
  }
  v20 = v27;
LABEL_32:
  *v20 = v23;
  v20[1] = v24;
  *((_DWORD *)v20 + 4) = v22;
  return result;
}

char *sub_20F2818AC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20E92CED8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_20E877A38();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  v9 = &v7[48 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  v10 = v8 + 48;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = v8;
      *((_QWORD *)v8 - 5) = 0;
      *((_QWORD *)v8 - 4) = 0;
      v14 = *((_OWORD *)v12 - 3);
      v12 -= 48;
      *((_OWORD *)v8 - 3) = v14;
      v8 -= 48;
      *((_QWORD *)v13 - 4) = *((_QWORD *)v12 + 2);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      v15 = *(_OWORD *)(v12 + 24);
      *((_QWORD *)v8 + 5) = *((_QWORD *)v12 + 5);
      *(_OWORD *)(v8 + 24) = v15;
    }
    while (v12 != v11);
    v12 = (char *)*a1;
    v16 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v16 != v12)
    {
      v17 = v16;
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 6);
        v17 -= 48;
        v18 = v19;
        if (v19)
        {
          *((_QWORD *)v16 - 5) = v18;
          operator delete(v18);
        }
        v16 = v17;
      }
      while (v17 != v12);
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

char *sub_20F281A28(_QWORD *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char **v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  void *v25;
  char *v27;
  __int128 v28;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (uint64_t)&v3[-*a1] >> 6;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 58)
    sub_20E867F44();
  v8 = a1[2] - (_QWORD)v4;
  if (v8 >> 5 > v6)
    v6 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 58)
      sub_20E877A38();
    v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[64 * v5];
  v12 = &v10[64 * v9];
  *((_QWORD *)&v28 + 1) = v12;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 12) = *(_OWORD *)(a2 + 12);
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  v13 = (char **)(v11 + 40);
  *((_QWORD *)v11 + 6) = 0;
  v15 = *(_BYTE **)(a2 + 32);
  v14 = *(_BYTE **)(a2 + 40);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    v27 = v12;
    if (0xAAAAAAAAAAAAAAABLL * (v16 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v17 = (char *)operator new(v16);
    *((_QWORD *)v11 + 4) = v17;
    *v13 = v17;
    v18 = &v17[8 * (v16 >> 3)];
    *((_QWORD *)v11 + 6) = v18;
    memcpy(v17, v15, v16 - 4);
    *v13 = v18;
    v12 = v27;
  }
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  v19 = v11 + 64;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v12;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = &v11[v20];
      v22 = &v3[v20];
      v23 = *(_OWORD *)&v3[v20 - 64];
      *(_OWORD *)(v21 - 52) = *(_OWORD *)&v3[v20 - 52];
      *((_OWORD *)v21 - 4) = v23;
      *((_QWORD *)v21 - 3) = 0;
      *((_QWORD *)v21 - 2) = 0;
      *((_OWORD *)v21 - 2) = *(_OWORD *)&v3[v20 - 32];
      *((_QWORD *)v21 - 2) = *(_QWORD *)&v3[v20 - 16];
      *((_QWORD *)v22 - 4) = 0;
      *((_QWORD *)v22 - 3) = 0;
      *((_QWORD *)v22 - 2) = 0;
      *((_QWORD *)v21 - 1) = *(_QWORD *)&v3[v20 - 8];
      v20 -= 64;
    }
    while (&v3[v20] != v4);
    v3 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = &v11[v20];
    *(_QWORD *)&v28 = v11 + 64;
    *(_OWORD *)(a1 + 1) = v28;
    v19 = v11 + 64;
    while (v24 != v3)
    {
      v25 = (void *)*((_QWORD *)v24 - 4);
      if (v25)
      {
        *((_QWORD *)v24 - 3) = v25;
        operator delete(v25);
      }
      v24 -= 64;
    }
  }
  if (v3)
    operator delete(v3);
  return v19;
}

void sub_20F281C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  _QWORD *v5;
  void *v7;
  va_list va;

  va_start(va, a4);
  v7 = *v4;
  if (*v4)
  {
    *v5 = v7;
    operator delete(v7);
  }
  sub_20F281C6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F281C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 64;
        *(_QWORD *)(a1 + 16) = v2 - 64;
        v5 = *(void **)(v2 - 32);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 64;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F281CD8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  void *v24;
  __int128 v25;
  _BYTE v26[28];
  _BYTE v27[28];

  if (a4 >= 2)
  {
    v5 = 0;
    *(_OWORD *)v26 = *a1;
    *(_OWORD *)&v26[12] = *(__int128 *)((char *)a1 + 12);
    v6 = *((_QWORD *)a1 + 4);
    v7 = *((_QWORD *)a1 + 5);
    v8 = *((_QWORD *)a1 + 6);
    *((_QWORD *)a1 + 4) = 0;
    *((_QWORD *)a1 + 5) = 0;
    *((_QWORD *)a1 + 6) = 0;
    v9 = a1;
    v10 = *((_QWORD *)a1 + 7);
    do
    {
      v13 = v9;
      v9 += 4 * v5 + 4;
      v14 = 2 * v5;
      v5 = (2 * v5) | 1;
      v15 = v14 + 2;
      if (v15 < a4 && *((double *)v9 + 7) < *((double *)v9 + 15))
      {
        v9 += 4;
        v5 = v15;
      }
      v11 = *v9;
      *(__int128 *)((char *)v13 + 12) = *(__int128 *)((char *)v9 + 12);
      *v13 = v11;
      v12 = *((_QWORD *)v9 + 7);
      v13[2] = v9[2];
      *((_QWORD *)v13 + 6) = *((_QWORD *)v9 + 6);
      *((_QWORD *)v9 + 5) = 0;
      *((_QWORD *)v9 + 6) = 0;
      *((_QWORD *)v9 + 4) = 0;
      *((_QWORD *)v13 + 7) = v12;
    }
    while (v5 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    v16 = (__int128 *)(a2 - 64);
    if (v9 == (__int128 *)(a2 - 64))
    {
      *(__int128 *)((char *)v9 + 12) = *(_OWORD *)&v26[12];
      *v9 = *(_OWORD *)v26;
      *((_QWORD *)v9 + 4) = v6;
      *((_QWORD *)v9 + 5) = v7;
      *((_QWORD *)v9 + 6) = v8;
      *((_QWORD *)v9 + 7) = v10;
    }
    else
    {
      v17 = *v16;
      *(__int128 *)((char *)v9 + 12) = *(_OWORD *)(a2 - 52);
      *v9 = v17;
      *(_QWORD *)&v17 = *(_QWORD *)(a2 - 8);
      v9[2] = *(_OWORD *)(a2 - 32);
      *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 - 16);
      *((_QWORD *)v9 + 7) = v17;
      *(_OWORD *)(a2 - 52) = *(_OWORD *)&v26[12];
      *v16 = *(_OWORD *)v26;
      *(_QWORD *)(a2 - 32) = v6;
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = v8;
      *(_QWORD *)(a2 - 8) = v10;
      v18 = (char *)v9 - (char *)a1 + 64;
      if (v18 >= 65)
      {
        v19 = (((unint64_t)v18 >> 6) - 2) >> 1;
        v20 = *((double *)v9 + 7);
        if (*((double *)&a1[4 * v19 + 3] + 1) < v20)
        {
          *(_OWORD *)&v27[12] = *(__int128 *)((char *)v9 + 12);
          *(_OWORD *)v27 = *v9;
          v25 = v9[2];
          v21 = *((_QWORD *)v9 + 6);
          *((_QWORD *)v9 + 4) = 0;
          *((_QWORD *)v9 + 5) = 0;
          *((_QWORD *)v9 + 6) = 0;
          do
          {
            v22 = &a1[4 * v19];
            v23 = *v22;
            *(__int128 *)((char *)v9 + 12) = *(__int128 *)((char *)v22 + 12);
            *v9 = v23;
            v24 = (void *)*((_QWORD *)v9 + 4);
            if (v24)
            {
              *((_QWORD *)v9 + 5) = v24;
              operator delete(v24);
              *((_QWORD *)v9 + 4) = 0;
              *((_QWORD *)v9 + 5) = 0;
              *((_QWORD *)v9 + 6) = 0;
            }
            v9[2] = v22[2];
            *((_QWORD *)v9 + 6) = *((_QWORD *)v22 + 6);
            *((_QWORD *)v22 + 5) = 0;
            *((_QWORD *)v22 + 6) = 0;
            *((_QWORD *)v22 + 4) = 0;
            *((_QWORD *)v9 + 7) = *((_QWORD *)v22 + 7);
            if (!v19)
              break;
            v19 = (v19 - 1) >> 1;
            v9 = v22;
          }
          while (*((double *)&a1[4 * v19 + 3] + 1) < v20);
          *v22 = *(_OWORD *)v27;
          *(__int128 *)((char *)v22 + 12) = *(_OWORD *)&v27[12];
          v22[2] = v25;
          *((_QWORD *)v22 + 6) = v21;
          *((double *)v22 + 7) = v20;
        }
      }
    }
  }
}

uint64_t **sub_20F281F30(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  _BYTE *v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  _BYTE *v62;
  char v63;
  int v64;
  int v65;
  void *__p;
  _BYTE *v67;
  void *v68[2];
  void *v69[2];
  int v70;
  _DWORD __src[105];
  uint64_t v72;

  v3 = (uint64_t **)a1;
  v72 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  a1[2] = 0;
  v56 = (uint64_t **)(a1 + 1);
  *a1 = a1 + 1;
  a1[3] = 0;
  v60 = a1 + 3;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)v68 = 0u;
  *(_OWORD *)v69 = 0u;
  v70 = 1065353216;
  v4 = (uint64_t *)a2[2];
  if (!v4)
    return v3;
  v5 = a3;
  do
  {
    v7 = *v5;
    v6 = v5[1];
    if (*v5 != v6)
    {
      while (*(_QWORD *)v7 != v4[2] || *(_DWORD *)(v7 + 8) != *((_DWORD *)v4 + 6))
      {
        v7 += 16;
        if (v7 == v6)
          goto LABEL_11;
      }
    }
    if (v7 == v6)
    {
LABEL_11:
      v8 = v4[2];
      v9 = *((unsigned int *)v4 + 6);
      v10 = v56;
      v11 = v56;
      v12 = *v56;
      if (!*v56)
      {
LABEL_22:
        v15 = (uint64_t *)operator new(0x40uLL);
        v15[4] = v8;
        v15[5] = v9;
        v15[6] = 0;
        v15[7] = 0;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v11;
        *v10 = v15;
        v16 = (uint64_t *)**v3;
        v17 = v15;
        if (v16)
        {
          *v3 = v16;
          v17 = *v10;
        }
        sub_20E868578(v3[1], v17);
        v3[2] = (uint64_t *)((char *)v3[2] + 1);
LABEL_26:
        v15[6] = v8;
        *((_DWORD *)v15 + 14) = v9;
        v57 = v4 + 2;
        sub_20F7C5800(a2, v4 + 2, v5, &__p);
        v18 = __p;
        v62 = v67;
        v59 = v4;
        if (__p != v67)
        {
          do
          {
            if (!v18[456]
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/include/VIO/MapOptimization/PoseGraphSample.hpp", 78, (uint64_t)"edge.JtJ_source_to_neighbor", 27, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v19 = *((_DWORD *)v18 + 2) == -1 || *((_DWORD *)v18 + 1) == -1;
            v20 = !v19;
            if (v19 && v68[1])
            {
              v21 = *((unsigned int *)v18 + 6);
              v22 = (uint8x8_t)vcnt_s8((int8x8_t)v68[1]);
              v22.i16[0] = vaddlv_u8(v22);
              if (v22.u32[0] > 1uLL)
              {
                v23 = *((unsigned int *)v18 + 6);
                if (v68[1] <= (void *)v21)
                  v23 = v21 % (unint64_t)v68[1];
              }
              else
              {
                v23 = (LODWORD(v68[1]) - 1) & v21;
              }
              v24 = (uint64_t **)*((_QWORD *)v68[0] + v23);
              if (v24)
              {
                v25 = *v24;
                if (v25)
                {
                  v26 = *((_QWORD *)v18 + 2);
                  if (v22.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v30 = v25[1];
                      if (v30 == v21)
                      {
                        if (v25[2] == v26 && *((_DWORD *)v25 + 6) == (_DWORD)v21)
                          goto LABEL_81;
                      }
                      else if ((v30 & ((unint64_t)v68[1] - 1)) != v23)
                      {
                        goto LABEL_63;
                      }
                      v25 = (uint64_t *)*v25;
                      if (!v25)
                        goto LABEL_63;
                    }
                  }
                  do
                  {
                    v28 = v25[1];
                    if (v28 == v21)
                    {
                      if (v25[2] == v26 && *((_DWORD *)v25 + 6) == (_DWORD)v21)
                        goto LABEL_81;
                    }
                    else
                    {
                      if ((void *)v28 >= v68[1])
                        v28 %= (unint64_t)v68[1];
                      if (v28 != v23)
                        break;
                    }
                    v25 = (uint64_t *)*v25;
                  }
                  while (v25);
                }
              }
            }
LABEL_63:
            v63 = v20;
            v64 = *((_DWORD *)v18 + 1);
            v65 = *((_DWORD *)v18 + 2);
            v31 = v4[2];
            v32 = *((_DWORD *)v4 + 6);
            v33 = *((_QWORD *)v18 + 2);
            v34 = *((_DWORD *)v18 + 6);
            v35 = *((_OWORD *)v18 + 7);
            *(_OWORD *)&__src[17] = *((_OWORD *)v18 + 6);
            *(_OWORD *)&__src[21] = v35;
            v36 = *((_OWORD *)v18 + 9);
            *(_OWORD *)&__src[25] = *((_OWORD *)v18 + 8);
            *(_OWORD *)&__src[29] = v36;
            v37 = *((_OWORD *)v18 + 3);
            *(_OWORD *)&__src[1] = *((_OWORD *)v18 + 2);
            *(_OWORD *)&__src[5] = v37;
            v38 = *((_OWORD *)v18 + 5);
            *(_OWORD *)&__src[9] = *((_OWORD *)v18 + 4);
            *(_OWORD *)&__src[13] = v38;
            memcpy(&__src[33], v18 + 168, 0x120uLL);
            v39 = *((_DWORD *)v18 + 116);
            v41 = (char *)v3[4];
            v40 = (unint64_t)v3[5];
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v60;
              v44 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v41[-*v60] >> 5);
              v45 = v44 + 1;
              if (v44 + 1 > 0x88888888888888)
                sub_20E92CED8();
              v46 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v40 - (_QWORD)v43) >> 5);
              if (2 * v46 > v45)
                v45 = 2 * v46;
              if (v46 >= 0x44444444444444)
                v45 = 0x88888888888888;
              v61 = v45;
              if (v45)
              {
                if (v45 > 0x88888888888888)
                  sub_20E877A38();
                v47 = (char *)operator new(480 * v45);
              }
              else
              {
                v47 = 0;
              }
              v48 = &v47[480 * v44];
              *v48 = v63;
              *((_QWORD *)v48 + 1) = v31;
              *((_DWORD *)v48 + 4) = v32;
              *((_DWORD *)v48 + 6) = v64;
              *((_QWORD *)v48 + 4) = v33;
              *((_DWORD *)v48 + 10) = v34;
              *((_DWORD *)v48 + 12) = v65;
              memcpy(v48 + 52, __src, 0x1A4uLL);
              *((_DWORD *)v48 + 118) = v39;
              v49 = v48;
              if (v41 != v43)
              {
                do
                {
                  v41 -= 480;
                  v49 -= 480;
                  memcpy(v49, v41, 0x1DCuLL);
                }
                while (v41 != v43);
                v41 = (char *)*v60;
              }
              v42 = (uint64_t *)(v48 + 480);
              v3 = (uint64_t **)a1;
              a1[3] = v49;
              a1[4] = v48 + 480;
              a1[5] = &v47[480 * v61];
              if (v41)
                operator delete(v41);
              v4 = v59;
            }
            else
            {
              *v41 = v63;
              *((_QWORD *)v41 + 1) = v31;
              *((_DWORD *)v41 + 4) = v32;
              *((_DWORD *)v41 + 6) = v64;
              *((_QWORD *)v41 + 4) = v33;
              *((_DWORD *)v41 + 10) = v34;
              *((_DWORD *)v41 + 12) = v65;
              memcpy(v41 + 52, __src, 0x1A4uLL);
              *((_DWORD *)v41 + 118) = v39;
              v42 = (uint64_t *)(v41 + 480);
            }
            v3[4] = v42;
LABEL_81:
            v18 += 472;
          }
          while (v18 != v62);
        }
        sub_20F28FE1C((uint64_t)v68, v57, v57);
        v5 = a3;
        if (__p)
        {
          v67 = __p;
          operator delete(__p);
        }
        goto LABEL_4;
      }
      while (1)
      {
        v11 = v12;
        v13 = v12[4];
        if (v8 == v13)
        {
          v14 = *((_DWORD *)v11 + 10);
          if (v9 >= v14)
          {
            if (v14 >= v9)
              goto LABEL_25;
            goto LABEL_20;
          }
LABEL_13:
          v12 = (uint64_t *)*v11;
          v10 = (uint64_t **)v11;
          if (!*v11)
            goto LABEL_22;
        }
        else
        {
          if (v8 < v13)
            goto LABEL_13;
          if (v13 >= v8)
          {
LABEL_25:
            v15 = v11;
            goto LABEL_26;
          }
LABEL_20:
          v12 = (uint64_t *)v11[1];
          if (!v12)
          {
            v10 = (uint64_t **)(v11 + 1);
            goto LABEL_22;
          }
        }
      }
    }
LABEL_4:
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  v50 = v69[0];
  if (v69[0])
  {
    do
    {
      v51 = (_QWORD *)*v50;
      operator delete(v50);
      v50 = v51;
    }
    while (v51);
  }
  v52 = v68[0];
  v68[0] = 0;
  if (v52)
    operator delete(v52);
  return v3;
}

void sub_20F2824CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  sub_20E8C25A8((uint64_t)&a25);
  v27 = *a15;
  if (!*a15)
  {
    sub_20E86872C(v25, *(_QWORD **)(v25 + 8));
    _Unwind_Resume(a1);
  }
  *(_QWORD *)(v25 + 32) = v27;
  operator delete(v27);
  sub_20E86872C(v25, *(_QWORD **)(v25 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20F282588(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20F282898(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2828AC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_20F28293C(_QWORD *result, _QWORD *a2, unint64_t *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;

  if (result != a2)
  {
    v3 = 0;
    v4 = result;
    do
    {
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      ++v3;
      v4 = v6;
    }
    while (v6 != a2);
    v8 = *a3;
    while (1)
    {
      while (1)
      {
        v9 = v3 >> 1;
        v10 = result;
        if (v3 != 1)
        {
          v13 = v3 >> 1;
          v14 = result;
          do
          {
            v16 = (_QWORD *)v14[1];
            if (v16)
            {
              do
              {
                v10 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v14[2];
                v7 = *v10 == (_QWORD)v14;
                v14 = v10;
              }
              while (!v7);
            }
            v14 = v10;
            v15 = v13-- <= 1;
          }
          while (!v15);
        }
        v11 = v10[4];
        if (v11 >= v8)
          break;
        v12 = (_QWORD *)v10[1];
        if (v12)
        {
          do
          {
            result = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            result = (_QWORD *)v10[2];
            v7 = *result == (_QWORD)v10;
            v10 = result;
          }
          while (!v7);
        }
        v3 += ~v9;
        if (!v3)
          return result;
      }
      if (v8 >= v11)
        break;
      a2 = v10;
      v3 >>= 1;
      if (!v9)
        return result;
    }
    if (result != v10)
    {
      v17 = 0;
      v18 = result;
      do
      {
        v19 = (_QWORD *)v18[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v18[2];
            v7 = *v20 == (_QWORD)v18;
            v18 = v20;
          }
          while (!v7);
        }
        ++v17;
        v18 = v20;
      }
      while (v20 != v10);
      do
      {
        v21 = v17 >> 1;
        v22 = result;
        if (v17 != 1)
        {
          v24 = v17 >> 1;
          v25 = result;
          do
          {
            v26 = (_QWORD *)v25[1];
            if (v26)
            {
              do
              {
                v22 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v25[2];
                v7 = *v22 == (_QWORD)v25;
                v25 = v22;
              }
              while (!v7);
            }
            v25 = v22;
            v15 = v24-- <= 1;
          }
          while (!v15);
        }
        if (v22[4] < v8)
        {
          v23 = (_QWORD *)v22[1];
          if (v23)
          {
            do
            {
              result = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              result = (_QWORD *)v22[2];
              v7 = *result == (_QWORD)v22;
              v22 = result;
            }
            while (!v7);
          }
          v21 = v17 + ~v21;
        }
        v17 = v21;
      }
      while (v21);
    }
    v27 = (_QWORD *)v10[1];
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (_QWORD *)v10[2];
        v7 = *v28 == (_QWORD)v10;
        v10 = v28;
      }
      while (!v7);
    }
    if (v28 != a2)
    {
      v29 = 0;
      v30 = v28;
      do
      {
        v31 = (_QWORD *)v30[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (_QWORD *)v30[2];
            v7 = *v32 == (_QWORD)v30;
            v30 = v32;
          }
          while (!v7);
        }
        ++v29;
        v30 = v32;
      }
      while (v32 != a2);
      do
      {
        v33 = v29 >> 1;
        v34 = v28;
        if (v29 != 1)
        {
          v36 = v29 >> 1;
          v37 = v28;
          do
          {
            v38 = (_QWORD *)v37[1];
            if (v38)
            {
              do
              {
                v34 = v38;
                v38 = (_QWORD *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                v34 = (_QWORD *)v37[2];
                v7 = *v34 == (_QWORD)v37;
                v37 = v34;
              }
              while (!v7);
            }
            v37 = v34;
            v15 = v36-- <= 1;
          }
          while (!v15);
        }
        if (v8 >= v34[4])
        {
          v35 = (_QWORD *)v34[1];
          if (v35)
          {
            do
            {
              v28 = v35;
              v35 = (_QWORD *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              v28 = (_QWORD *)v34[2];
              v7 = *v28 == (_QWORD)v34;
              v34 = v28;
            }
            while (!v7);
          }
          v33 = v29 + ~v33;
        }
        v29 = v33;
      }
      while (v33);
    }
  }
  return result;
}

uint64_t sub_20F282C7C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20F282CE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  if (v4)
  {
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v14 & 0xFFFFFFu) <= 0x10000)
      v15 = 0;
    else
      v15 = v14;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    v3 = v24;
    *(_WORD *)(a2 + 44) = v16 & 0xFF00 | v15;
    if (!v24)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v19 = v25;
    if (!v25)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v19 = v25;
  if (!v25)
    return;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_20F282EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F282F14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t sub_20F282F28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

void sub_20F282F30(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F282F98(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20F282FA0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_20F282FAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  _QWORD *v15;
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int16 v40;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = (*((uint64_t (**)(uint64_t (**)()))*v32 + 6))(v32);
    v14 = v32;
    if (v32)
    {
      v15 = (_QWORD *)operator new();
      v16 = v32;
      *v15 = &off_24C9FC460;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = v16;
    }
    else
    {
      v15 = 0;
    }
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 44);
    v24 = *(_WORD *)(a1 + 48);
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v22;
    *(_DWORD *)(a2 + 32) = v23;
    *(_QWORD *)(a2 + 40) = v13;
    *(_DWORD *)(a2 + 48) = 1;
    *(_WORD *)(a2 + 52) = v24;
  }
  else
  {
    v32 = &off_24C9F06D0;
    sub_20F2831F0(a1, (uint64_t)&v33);
    v17 = v33;
    v18 = v34;
    if (v34)
    {
      v19 = (unint64_t *)&v34->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = v34;
    }
    else
    {
      v21 = 0;
    }
    v25 = v39;
    if (v36)
      v26 = v35 | 0x100000000;
    else
      v26 = 0;
    v27 = v38;
    v28 = v37;
    v29 = v40;
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = v26;
    *(_QWORD *)(a2 + 24) = v27;
    *(_DWORD *)(a2 + 32) = v25;
    *(_QWORD *)(a2 + 40) = v28;
    *(_DWORD *)(a2 + 48) = 1;
    *(_WORD *)(a2 + 52) = v29;
    if (v21)
    {
      v30 = (unint64_t *)&v21->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_20F2831CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20F2831F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v30, v4);
    v13 = v30;
    if (v30)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v30;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC460;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v31, v13, 1);
    v21 = v31;
    v22 = *(_QWORD *)(v31 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v31;
    *(_QWORD *)(a2 + 40) = v22;
    v31 = 0;
    MEMORY[0x212BC6398](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a2 + 72) = v17;
    if (v13)
    {
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v25 = v30;
    v30 = 0;
    if (v25)
      (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20F283494(v19, (uint64_t *)a2);
    }
    else
    {
      v26 = *(std::__shared_weak_count **)(a1 + 16);
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      __break(1u);
    }
  }
}

void sub_20F283458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

size_t *sub_20F283494@<X0>(size_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  size_t *result;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t (**v22)();

  v16 = *(_QWORD *)(a1 + 8);
  v22 = &off_24C9F07C8;
  sub_2101B800C(&v16, (uint64_t)&v18);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C9F0580;
  *(_OWORD *)(v4 + 8) = v19[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v19 + 12);
  *(_OWORD *)(v4 + 40) = v19[2];
  *(_QWORD *)(v4 + 56) = v20;
  *(_OWORD *)(v4 + 64) = v21;
  v17 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F0800;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v17 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(size_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v18, v4, 1);
  v8 = *(_QWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)v18;
  a2[5] = v8;
  v18 = 0;
  MEMORY[0x212BC6398]();
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a2 + 36) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v18 = a1;
  *(_QWORD *)&v19[0] = a2 + 3;
  result = sub_20F2837B8(&v18);
  v14 = v17;
  if (v17)
  {
    v15 = *(void **)(v17 + 48);
    if (v15)
      free(v15);
    *(_QWORD *)(v14 + 48) = 0;
    return (size_t *)MEMORY[0x212BC6398](v14, 0x1091C406A8758A4);
  }
  return result;
}

void sub_20F28368C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E86665C(v5);
  sub_20EEC14F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F2836A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20E86665C(v2);
  sub_20E86665C((uint64_t)va);
  sub_20EEC14F8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20F2836DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EEC14F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F2836F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20)
    free(a20);
  _Unwind_Resume(exception_object);
}

void sub_20F28370C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F283730(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20F283748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

size_t *sub_20F2837B8(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  size_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 20))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)v2, v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_20F28397C(&v24, (char **)v1, (char **)v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(size_t **)v2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 20);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
          }
        }
        else
        {
          do
          {
            *(_BYTE *)v11 = *v10;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *(_BYTE *)v11 = *v10;
        v10 += v3;
        v11 = (size_t *)((char *)v11 + v4);
      }
      *(_BYTE *)v11 = *v10;
    }
  }
  return result;
}

size_t *sub_20F28397C(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *((unsigned int *)a3 + 5);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

void sub_20F283ACC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F283AF0(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20F283B40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20F283BB0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20F283BE4()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20F283C30(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20F283BB0;
  return result;
}

__n128 sub_20F283C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20F283BB0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20F283C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_2103A9F78)
  {
    return 0;
  }
  return v5 + 8;
}

int64_t sub_20F283D18(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;

  v8 = operator new();
  v9 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v8 + 128) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v8 + 144) = v9;
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(a4 + 160);
  v10 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v8 + 80) = v10;
  v11 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v8 + 112) = v11;
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a4;
  *(_OWORD *)(v8 + 16) = v12;
  v13 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v8 + 48) = v13;
  memcpy((void *)(v8 + 168), (const void *)(a4 + 168), 0x120uLL);
  memcpy((void *)(v8 + 456), (const void *)(a4 + 456), 0x120uLL);
  *(_QWORD *)(v8 + 744) = 0;
  *(_QWORD *)(v8 + 760) = 0;
  *(_QWORD *)(v8 + 752) = 0;
  v14 = *(_QWORD *)(a4 + 744);
  v15 = *(_QWORD *)(a4 + 752);
  result = v15 - v14;
  if (v15 != v14)
  {
    v17 = 0x6DB6DB6DB6DB6DB7 * (result >> 3);
    if (v17 >= 0x492492492492493)
      sub_20EABADD4();
    result = (int64_t)operator new(result);
    v18 = 0;
    *(_QWORD *)(v8 + 744) = result;
    *(_QWORD *)(v8 + 752) = result;
    *(_QWORD *)(v8 + 760) = result + 56 * v17;
    do
    {
      v19 = v14 + v18;
      v20 = result + v18;
      *(_QWORD *)v20 = *(_QWORD *)(v14 + v18);
      v21 = *(_OWORD *)(v14 + v18 + 8);
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v14 + v18 + 24);
      *(_OWORD *)(v20 + 8) = v21;
      v22 = *(_OWORD *)(v14 + v18 + 32);
      *(_QWORD *)(v20 + 48) = *(_QWORD *)(v14 + v18 + 48);
      *(_OWORD *)(v20 + 32) = v22;
      v18 += 56;
    }
    while (v19 + 56 != v15);
    *(_QWORD *)(v8 + 752) = result + v18;
  }
  *(_OWORD *)(v8 + 768) = *(_OWORD *)(a4 + 768);
  *(_QWORD *)(v8 + 784) = *(_QWORD *)(a4 + 784);
  *(_QWORD *)(v8 + 808) = *(_QWORD *)(a4 + 808);
  *(_OWORD *)(v8 + 792) = *(_OWORD *)(a4 + 792);
  *(_OWORD *)(v8 + 816) = *(_OWORD *)(a4 + 816);
  v24 = (uint64_t **)(a1 + 56);
  v23 = *(uint64_t **)(a1 + 56);
  if (!v23)
  {
    v25 = a1 + 56;
    goto LABEL_17;
  }
  do
  {
    while (1)
    {
      v25 = (uint64_t)v23;
      v26 = v23[4];
      if (a2 < v26)
        goto LABEL_8;
      if (a2 != v26)
        break;
      v27 = *(_DWORD *)(v25 + 40);
      if (v27 <= a3)
      {
        if (v27 >= a3)
          goto LABEL_23;
        goto LABEL_15;
      }
LABEL_8:
      v23 = *(uint64_t **)v25;
      v24 = (uint64_t **)v25;
      if (!*(_QWORD *)v25)
        goto LABEL_17;
    }
    if (v26 >= a2)
    {
LABEL_23:
      v31 = *(_QWORD *)(v25 + 48);
      *(_QWORD *)(v25 + 48) = v8;
      if (v31)
        goto LABEL_20;
      return result;
    }
LABEL_15:
    v23 = *(uint64_t **)(v25 + 8);
  }
  while (v23);
  v24 = (uint64_t **)(v25 + 8);
LABEL_17:
  v28 = (uint64_t *)operator new(0x38uLL);
  v28[4] = a2;
  v28[5] = a3;
  v28[6] = 0;
  *v28 = 0;
  v28[1] = 0;
  v28[2] = v25;
  *v24 = v28;
  v29 = **(_QWORD **)(a1 + 48);
  v30 = v28;
  if (v29)
  {
    *(_QWORD *)(a1 + 48) = v29;
    v30 = *v24;
  }
  result = (int64_t)sub_20E868578(*(uint64_t **)(a1 + 56), v30);
  ++*(_QWORD *)(a1 + 64);
  v31 = v28[6];
  v28[6] = v8;
  if (v31)
  {
LABEL_20:
    v32 = *(void **)(v31 + 744);
    if (v32)
    {
      *(_QWORD *)(v31 + 752) = v32;
      operator delete(v32);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20F283FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28401C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F283FE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 752) = v4;
    operator delete(v4);
  }
  MEMORY[0x212BC6398](v1, 0x1020C40281B6686);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F28401C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 744);
    if (v3)
    {
      *(_QWORD *)(v2 + 752) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40281B6686);
  }
  return a1;
}

void sub_20F284074()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F284088(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_24C9FC288;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20F2840E8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C9FC288;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_20F284130(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t **v6;
  unint64_t *v7;
  int v8;
  char **v9;
  char v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  char v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  int v59;
  unsigned int v60;
  _DWORD *v61;
  _DWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  _DWORD *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  size_t v70;
  _BYTE *v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  _BYTE *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t **v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  BOOL v107;
  char *v108;
  uint64_t *v109;
  char *v110;
  size_t v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t *v119;
  float64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  double *v126;
  double v127;
  double v128;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  size_t v141;
  const char *v142;
  unsigned __int8 v143;
  const char *v144;
  size_t v145;
  _BYTE *v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  size_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  size_t v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v195;
  size_t v196;
  const char *v197;
  unsigned __int8 v198;
  const char *v199;
  size_t v200;
  _BYTE *v201;
  unint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  size_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  NSObject *v210;
  size_t v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  _OWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  unsigned int v254;
  _QWORD *v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t **v258;
  uint64_t *v259;
  unsigned int v260;
  _QWORD *v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t **v264;
  void *v265;
  uint64_t *v266;
  uint64_t *v267;
  _QWORD *v268;
  uint64_t *v269;
  uint64_t **v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t **v279;
  char *v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t **v288;
  uint64_t *v289;
  uint64_t *v290;
  _QWORD *v291;
  uint64_t *v292;
  uint64_t **v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  _QWORD *v302;
  _QWORD *v303;
  void *v304;
  unint64_t *v305;
  int v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  _BYTE *v312;
  _BYTE *v313;
  int64_t v314;
  char *v315;
  char *v316;
  unint64_t v317;
  __int128 v318;
  __int128 v319;
  char *v320;
  void *v321;
  unint64_t *v322;
  unint64_t *v323;
  char *v324;
  unint64_t *v325;
  uint64_t v326;
  unint64_t *v327;
  char *v328;
  unint64_t *v329;
  unint64_t *v330;
  unint64_t *v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t *v337;
  uint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  float64x2_t v343;
  uint64_t v344;
  float64x2_t v345;
  float64x2_t v347;
  double v348;
  uint64_t v350;
  double v351;
  double v353;
  double v355;
  float64x2_t *v357;
  float64x2_t v359;
  float64x2_t *v361;
  double v362;
  float64x2_t v363;
  int64x2_t v364;
  float64x2_t v366;
  double v369;
  double v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64_t v376;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  int64x2_t v382;
  int64x2_t v383;
  int64x2_t v384;
  int64x2_t v385;
  double v387;
  double v389;
  uint64_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t *v400;
  float64x2_t v401;
  uint64_t v402;
  float64x2_t v405;
  double v406;
  float64x2_t v407;
  uint64_t v408;
  double v409;
  double v411;
  double v413;
  float64x2_t *v415;
  float64x2_t *v419;
  double v420;
  float64x2_t v421;
  int64x2_t v422;
  double v423;
  int64x2_t v424;
  double v426;
  double v429;
  float64x2_t v430;
  uint64_t v432;
  float64x2_t v433;
  uint64_t v434;
  uint64_t v435;
  float64_t v436;
  float64_t v437;
  char **v438;
  uint64_t v439;
  unint64_t v440;
  char *v441;
  char *v442;
  char *v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  char ***v455;
  char v456;
  void *__src;
  const char *__srca;
  const char *__srcb;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t *v463;
  uint64_t v464;
  size_t __len;
  size_t __lena;
  size_t __lenb;
  uint64_t v468;
  float64_t v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  double v473;
  uint64_t **v474;
  float64_t v475;
  _QWORD *v476;
  double v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v481;
  uint64_t v482;
  __int128 v483;
  int v484;
  unint64_t v485;
  __int128 v486;
  unint64_t v487;
  uint64_t *v488;
  std::__shared_weak_count *v489;
  void *v490;
  char *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v492;
  int v493;
  const char *v494;
  int v495;
  const char *v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  uint64_t v499;
  void *v500;
  uint64_t *v501;
  uint64_t v502;
  char v503;
  uint64_t v504;
  _BYTE object[48];
  size_t v506;
  unint64_t v507;
  void *v508[2];
  void *v509[2];
  int v510;
  __int128 v511;
  uint64_t v512;
  uint64_t v513;

  v4 = a1;
  v513 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v485 = (v5 >> 16) | ((unint64_t)(unsigned __int16)*a2 << 32);
  v6 = *(unint64_t ***)(a1 + 16);
  v7 = *v6;
  v8 = *((unsigned __int8 *)*v6 + 2502);
  v483 = *(_OWORD *)*(_QWORD *)(a1 + 8);
  v484 = v5;
  if (v8)
  {
    *(_OWORD *)object = v483;
    *(_DWORD *)&object[16] = v484;
    v9 = *(char ***)(a1 + 24);
    v10 = **(_BYTE **)(a1 + 32);
    v12 = v9[1];
    v11 = (unint64_t)v9[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = *v9;
      v15 = (v12 - *v9) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        sub_20E867F44();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          sub_20E877A38();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[32 * v15];
      *(_OWORD *)v20 = *(_OWORD *)object;
      *((_QWORD *)v20 + 2) = *(_QWORD *)&object[16];
      v20[24] = v10;
      v13 = v20 + 32;
      if (v12 != v14)
      {
        do
        {
          v21 = *((_OWORD *)v12 - 2);
          *(_OWORD *)(v20 - 23) = *(_OWORD *)(v12 - 23);
          *((_OWORD *)v20 - 2) = v21;
          v20 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        v12 = *v9;
      }
      *v9 = v20;
      v9[1] = v13;
      v9[2] = &v19[32 * v18];
      v4 = a1;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)object;
      *((_QWORD *)v12 + 2) = *(_QWORD *)&object[16];
      v12[24] = v10;
      v13 = v12 + 32;
    }
    v9[1] = v13;
    v7 = *v6;
  }
  if ((!*((_BYTE *)v7 + 848) || *((_DWORD *)v7 + 213) == (v5 >> 16)) && a3[73] != a3[72])
  {
    v22 = *(_QWORD *)v6[2][53];
    v23 = *(_QWORD *)(v22 + 304);
    if (v23)
    {
      v24 = v22 + 304;
      v25 = v22 + 304;
      do
      {
        v26 = *(_DWORD *)(v23 + 32);
        _CF = v26 >= v5;
        if (v26 >= v5)
          v28 = (uint64_t *)v23;
        else
          v28 = (uint64_t *)(v23 + 8);
        if (_CF)
          v25 = v23;
        v23 = *v28;
      }
      while (*v28);
      if (v25 != v24 && *(_DWORD *)(v25 + 32) <= v5)
      {
        v455 = (char ***)(a3 + 72);
        v29 = sub_20FF3F5E8();
        sub_20F253990((uint64_t)v29, *(_QWORD *)(v4 + 40), **(unsigned __int8 **)(v4 + 32), (unsigned int *)&v485, (uint64_t)&v483, *(double *)(*(_QWORD *)(v4 + 48) + 824));
        v30 = *(_QWORD *)(v4 + 8);
        if ((*a3 != *(_QWORD *)v30 || *((_DWORD *)a3 + 2) != *(_DWORD *)(v30 + 8))
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 619, (uint64_t)"frame_bundle.vio_frame.image_id().view == target_state_id", 57, (uint64_t)"State id does not match", 23, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v31 = *(uint64_t **)(v4 + 64);
        v468 = *(_QWORD *)(v4 + 56);
        v456 = **(_BYTE **)(v4 + 32);
        v32 = (uint64_t *)v6[2][53];
        v33 = operator new(0x300uLL);
        v33[1] = 0;
        v33[2] = 0;
        *v33 = &off_24C9FC5B0;
        *(_QWORD *)object = sub_20F2878BC((uint64_t)(v33 + 3), (__int128 *)a3);
        *(_QWORD *)&object[8] = v33;
        v34 = sub_20F286CA4(v32, object);
        v35 = *(std::__shared_weak_count **)&object[8];
        if (*(_QWORD *)&object[8])
        {
          v36 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if ((v34 & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 46, (uint64_t)"vio_frame_was_created", 21, (uint64_t)"Fail to create a vioframe", 25, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v38 = (uint64_t *)v32[5];
        v39 = (uint64_t *)v32[6];
        if (v39 != v38)
        {
          v40 = ((char *)v39 - (char *)v38) >> 4;
          v41 = *((_DWORD *)a3 + 4);
          v42 = *a3;
          while (1)
          {
            v43 = v40 >> 1;
            v44 = &v38[2 * (v40 >> 1)];
            v45 = *v44;
            v46 = *(_DWORD *)(*v44 + 16);
            v47 = v46 >= v41;
            if (v46 != v41)
              goto LABEL_52;
            if (*(_QWORD *)v45 >= v42)
              break;
LABEL_46:
            v38 = v44 + 2;
            v43 = v40 + ~v43;
LABEL_47:
            v40 = v43;
            if (!v43)
              goto LABEL_55;
          }
          if (*(_QWORD *)v45 != v42)
            goto LABEL_47;
          v47 = *(_DWORD *)(v45 + 8) >= *((_DWORD *)a3 + 2);
LABEL_52:
          if (v47)
            goto LABEL_47;
          goto LABEL_46;
        }
LABEL_55:
        if (v38 != v39)
        {
          v48 = *v38;
          if (*(_DWORD *)(*v38 + 16) == *((_DWORD *)a3 + 4)
            && *(_QWORD *)v48 == *a3
            && *(_DWORD *)(v48 + 8) == *((_DWORD *)a3 + 2))
          {
            v39 = v38;
          }
        }
        v460 = v32[1];
        v461 = *v32;
        v49 = *v39;
        v50 = sub_20FCBC4B0(a3);
        v51 = *(double *)v468;
        v487 = 0;
        v486 = 0uLL;
        v52 = *(_QWORD *)(v49 + 80) - *(_QWORD *)(v49 + 72);
        v464 = v49;
        if (v52)
        {
          v53 = v4;
          v54 = 0xCCCCCCCCCCCCCCCDLL * (v52 >> 3);
          if (v54 >> 61)
            sub_20E867F44();
          *(_QWORD *)&v486 = operator new(0x6666666666666668 * (v52 >> 3));
          *((_QWORD *)&v486 + 1) = v486;
          v487 = v486 + 8 * v54;
          v4 = v53;
          v49 = v464;
        }
        v478 = a3;
        v55 = *(_OWORD *)v49;
        v512 = *(_QWORD *)(v49 + 16);
        v511 = v55;
        v57 = *v31;
        v56 = v31[1];
        if (*v31 != v56)
        {
          v474 = (uint64_t **)(v460 + 8);
          v58 = v51 * v51;
          v59 = *((_DWORD *)a3 + 206);
          v462 = (uint64_t *)(v461 + 56);
          v463 = v39;
          v472 = v31[1];
          v470 = v59;
          v481 = v4;
          v476 = v50;
          while (1)
          {
            if ((*(_DWORD *)(v57 + 28) & v59) == 0)
              goto LABEL_66;
            v60 = *(_DWORD *)(v57 + 24);
            v61 = (_DWORD *)*v50;
            v62 = (_DWORD *)v50[1];
            if (v62 != (_DWORD *)*v50)
            {
              v63 = ((uint64_t)v62 - *v50) >> 3;
              do
              {
                v64 = v63 >> 1;
                v65 = &v61[2 * (v63 >> 1)];
                v67 = *v65;
                v66 = v65 + 2;
                v63 += ~(v63 >> 1);
                if (v67 < v60)
                  v61 = v66;
                else
                  v63 = v64;
              }
              while (v63);
            }
            if (v62 == v61 || *v61 != v60)
              goto LABEL_66;
            v68 = v61[1];
            v69 = v511;
            v70 = *(_QWORD *)(v49 + 72);
            v71 = (_BYTE *)*((_QWORD *)&v486 + 1);
            if (*((_QWORD *)&v486 + 1) < v487)
            {
              **((_QWORD **)&v486 + 1) = v68;
              v72 = v71 + 8;
              v50 = v476;
              *((_QWORD *)&v486 + 1) = v72;
              v73 = v460 + 8;
              v74 = *v474;
              if (!*v474)
                goto LABEL_110;
              goto LABEL_99;
            }
            __len = *(_QWORD *)(v49 + 72);
            v75 = (_BYTE *)v486;
            v76 = *((_QWORD *)&v486 + 1) - v486;
            v77 = (uint64_t)(*((_QWORD *)&v486 + 1) - v486) >> 3;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 61)
              sub_20E867F44();
            v79 = v487 - v486;
            if ((uint64_t)(v487 - v486) >> 2 > v78)
              v78 = v79 >> 2;
            v80 = (unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v78;
            if (!v80)
              break;
            __src = (void *)(*((_QWORD *)&v486 + 1) - v486);
            if (v80 >> 61)
              sub_20E877A38();
            v81 = v6;
            v82 = v57;
            v83 = v80;
            v84 = (char *)operator new(8 * v80);
            v80 = v83;
            v57 = v82;
            v6 = v81;
            v76 = (unint64_t)__src;
            v85 = &v84[8 * v77];
            *(_QWORD *)v85 = v68;
            v86 = (uint64_t)(v85 + 8);
            v87 = v71 - v75;
            if (v71 != v75)
              goto LABEL_90;
LABEL_96:
            *(_QWORD *)&v486 = v85;
            v487 = (unint64_t)&v84[8 * v80];
            if (v75)
              operator delete(v75);
            v39 = v463;
            v49 = v464;
            v50 = v476;
            v70 = __len;
            *((_QWORD *)&v486 + 1) = v86;
            v73 = v460 + 8;
            v74 = *v474;
            if (!*v474)
            {
LABEL_110:
              v488 = 0;
              v489 = 0;
              v100 = v70 + 40 * v68;
              goto LABEL_145;
            }
LABEL_99:
            v97 = v73;
            do
            {
              v98 = v74[4];
              if (v98 < v69)
              {
                ++v74;
              }
              else if (v98 == v69)
              {
                if (*((_DWORD *)v74 + 10) < v60)
                  ++v74;
                else
                  v97 = (uint64_t)v74;
              }
              else
              {
                v97 = (uint64_t)v74;
              }
              v74 = (uint64_t *)*v74;
            }
            while (v74);
            if (v97 == v73)
              goto LABEL_110;
            v99 = *(_QWORD *)(v97 + 32);
            if (v69 < v99 || v69 == v99 && v60 < *(_DWORD *)(v97 + 40))
              goto LABEL_110;
            v111 = v70;
            v112 = *(uint64_t **)(v97 + 48);
            v113 = *(std::__shared_weak_count **)(v97 + 56);
            if (v113)
            {
              p_shared_owners = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldxr(p_shared_owners);
              while (__stxr(v115 + 1, p_shared_owners));
              v488 = v112;
              v489 = v113;
              do
                v116 = __ldxr(p_shared_owners);
              while (__stxr(v116 + 1, p_shared_owners));
              do
                v117 = __ldaxr(p_shared_owners);
              while (__stlxr(v117 - 1, p_shared_owners));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
              v112 = v488;
              v70 = v111;
              v100 = v111 + 40 * v68;
              if (v488)
              {
LABEL_111:
                v101 = v112[25];
                v102 = v112[26];
                if (v102 == v101)
                {
LABEL_122:
                  if (v101 == v102
                    || *(_DWORD *)(v101 + 16) != (_DWORD)v512
                    || *(_QWORD *)v101 != (_QWORD)v511
                    || *(_DWORD *)(v101 + 8) != DWORD2(v511)
                    || !*(_QWORD *)(v101 + 24))
                  {
                    v108 = sub_20F287E70(v112, &v511, v100);
                    v109 = v488;
                    v110 = (char *)v488[26];
                    if (v110 == v108)
                    {
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 136, (uint64_t)"nit != track->end()", 19, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_585;
                      }
                      if ((unint64_t)(v109[26] - v109[25]) > 0x20)
                        goto LABEL_168;
LABEL_132:
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 139, (uint64_t)"track->getTrackLength() >= 2", 28, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
                      {
LABEL_585:
                        abort();
                      }
                      goto LABEL_168;
                    }
                    if ((unint64_t)&v110[-v488[25]] <= 0x20)
                      goto LABEL_132;
                  }
                  goto LABEL_168;
                }
                v103 = (v102 - v101) >> 5;
                while (2)
                {
                  v104 = v103 >> 1;
                  v105 = v101 + 32 * (v103 >> 1);
                  v106 = *(_DWORD *)(v105 + 16);
                  v107 = v106 >= v512;
                  if (v106 == (_DWORD)v512)
                  {
                    if (*(_QWORD *)v105 >= (unint64_t)v511)
                    {
                      if (*(_QWORD *)v105 == (_QWORD)v511)
                      {
                        v107 = *(_DWORD *)(v105 + 8) >= DWORD2(v511);
                        goto LABEL_119;
                      }
LABEL_114:
                      v103 = v104;
                      if (!v104)
                        goto LABEL_122;
                      continue;
                    }
                  }
                  else
                  {
LABEL_119:
                    if (v107)
                      goto LABEL_114;
                  }
                  break;
                }
                v101 = v105 + 32;
                v104 = v103 + ~v104;
                goto LABEL_114;
              }
            }
            else
            {
              v70 = v111;
              v488 = *(uint64_t **)(v97 + 48);
              v489 = 0;
              v100 = v111 + 40 * v68;
              if (v112)
                goto LABEL_111;
            }
LABEL_145:
            v118 = *(unsigned __int8 *)(v468 + 8);
            v119 = sub_20E9DF85C((_QWORD *)(v461 + 1784), (uint64_t *)&v511);
            if ((!v119 || !v119[13])
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 155, (uint64_t)"camera_lens", 11, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_587:
              abort();
            }
            if (!v118)
              goto LABEL_167;
            v121 = *v462;
            if (!*v462)
              goto LABEL_164;
            v122 = v461 + 56;
            do
            {
              v123 = *(_QWORD *)(v121 + 32);
              if (v123 < (unint64_t)v511)
              {
                v121 += 8;
              }
              else if (v123 == (_QWORD)v511)
              {
                if (*(_DWORD *)(v121 + 40) < DWORD2(v511))
                  v121 += 8;
                else
                  v122 = v121;
              }
              else
              {
                v122 = v121;
              }
              v121 = *(_QWORD *)v121;
            }
            while (v121);
            if ((uint64_t *)v122 == v462
              || (v124 = *(_QWORD *)(v122 + 32), (unint64_t)v511 < v124)
              || (_QWORD)v511 == v124 && *(_DWORD *)(v122 + 40) > DWORD2(v511)
              || (v125 = *(_QWORD *)(v122 + 48)) == 0)
            {
LABEL_164:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 160, (uint64_t)"anchor_state", 12, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_587;
              }
              v125 = 0;
            }
            v126 = (double *)(v125 + 72);
            v127 = v126[1] - *(double *)(v57 + 8);
            v128 = v126[2] - *(double *)(v57 + 16);
            if ((*v126 - *(double *)v57) * (*v126 - *(double *)v57) + v127 * v127 + v128 * v128 <= v58)
            {
LABEL_167:
              _Q0 = *(float64x2_t *)(v70 + 40 * v68 + 16);
              v120.f64[0] = 1.0;
              _Q2 = vmulq_f64(_Q0, _Q0);
              _D3 = *(_QWORD *)(v70 + 40 * v68 + 24);
              __asm { FMLA            D2, D3, V0.D[1] }
              _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + 1.0 * 1.0);
              *(float64x2_t *)object = vmulq_n_f64(_Q0, _Q2.f64[0]);
              *(_QWORD *)&object[16] = *(_OWORD *)&vmulq_f64(v120, _Q2);
              sub_20F25C29C(v60, (uint64_t *)&v511, v461, (__int128 *)v57, (__int128 *)object, v460, v100);
              goto LABEL_168;
            }
            sub_20F27AFA0(&v499);
            if (**(int **)(v499 + 56) > 3)
              goto LABEL_263;
            v137 = *(unsigned __int8 *)(v499 + 72);
            v138 = sub_20E8C31DC(v499, "OSLogSurrogateAppender", 1, 0);
            v139 = v138;
            if (!v137 && !v138)
              goto LABEL_263;
            v490 = &v499;
            rep = (char *)std::chrono::steady_clock::now().__d_.__rep_;
            v492 = std::chrono::system_clock::now().__d_.__rep_;
            v493 = 3;
            v494 = "unknown file";
            v495 = 166;
            v496 = "unknown function";
            v497 = 0;
            v498 = 0;
            v140 = *(_QWORD *)v490;
            if (*(char *)(*(_QWORD *)v490 + 39) < 0)
            {
              v142 = *(const char **)(v140 + 16);
              v141 = *(_QWORD *)(v140 + 24);
            }
            else
            {
              v141 = *(unsigned __int8 *)(*(_QWORD *)v490 + 39);
              v142 = (const char *)(*(_QWORD *)v490 + 16);
            }
            __lena = v141;
            v453 = *(_QWORD *)v490 + 16;
            v143 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v500);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v500);
              if (v503 && SHIBYTE(v502) < 0)
                operator delete(v500);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
              v49 = v464;
              v50 = v476;
            }
            if (byte_254A4A4F8[23] >= 0)
              v144 = byte_254A4A4F8;
            else
              v144 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v145 = byte_254A4A4F8[23];
            else
              v145 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v144, v142);
            if (v145 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            __srca = v142;
            if (v145 >= 0x17)
            {
              v451 = v140;
              v147 = v139;
              v148 = v137;
              v149 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v145 | 7) != 0x17)
                v149 = v145 | 7;
              v150 = v149 + 1;
              v146 = operator new(v149 + 1);
              *(_QWORD *)&object[16] = v145;
              *(_QWORD *)&object[24] = v150 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v146;
              v137 = v148;
              v139 = v147;
              v140 = v451;
LABEL_195:
              memmove(v146, v144, v145);
              goto LABEL_196;
            }
            object[31] = v145;
            v146 = &object[8];
            if (v145)
              goto LABEL_195;
LABEL_196:
            v146[v145] = 0;
            object[32] = 1;
            v151 = __lena;
            if (__lena > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v39 = v463;
            if (__lena >= 0x17)
            {
              v153 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__lena | 7) != 0x17)
                v153 = __lena | 7;
              v154 = v153 + 1;
              v152 = operator new(v153 + 1);
              v506 = __lena;
              v507 = v154 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v152;
              v151 = __lena;
            }
            else
            {
              HIBYTE(v507) = __lena;
              v152 = &object[40];
              if (!__lena)
                goto LABEL_204;
            }
            memmove(v152, __srca, v151);
LABEL_204:
            v152[v151] = 0;
            LOBYTE(v508[0]) = 1;
            v155 = *(NSObject **)object;
            if (SHIBYTE(v507) < 0)
              operator delete(*(void **)&object[40]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v139 && *(_QWORD *)(v139 + 24))
            {
              v156 = _os_log_pack_size();
              v157 = (std::__shared_weak_count_vtbl *)operator new(v156, (std::align_val_t)8uLL);
              v158 = (std::__shared_weak_count *)operator new();
              v159 = v158;
              v158->__shared_owners_ = 0;
              v160 = (unint64_t *)&v158->__shared_owners_;
              v158->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v158->__shared_weak_owners_ = 0;
              v158[1].__vftable = v157;
              *(_QWORD *)object = v157;
              *(_QWORD *)&object[8] = v157;
              *(_QWORD *)&object[16] = v158;
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
              memset(&object[24], 0, 24);
              v39 = v463;
              do
                v162 = __ldaxr(v160);
              while (__stlxr(v162 - 1, v160));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v159);
              }
              v163 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v164 = (char *)operator new();
              v165 = *(unsigned __int8 *)(v140 + 39);
              v166 = v453;
              if ((v165 & 0x80u) != 0)
              {
                v166 = *(_QWORD *)(v140 + 16);
                v165 = *(_QWORD *)(v140 + 24);
              }
              *(_QWORD *)v164 = v163;
              *(_OWORD *)(v164 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v164 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_QWORD *)v164 + 5) = v166;
              *((_QWORD *)v164 + 6) = v165;
              v164[56] = 1;
              v504 = 0;
              v500 = v164;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v139 + 24) + 40))(*(_QWORD *)(v139 + 24), &v500);
              v167 = v500;
              v500 = 0;
              if (v167)
              {
                v168 = (std::__shared_weak_count *)*((_QWORD *)v167 + 4);
                if (v168)
                {
                  v169 = (unint64_t *)&v168->__shared_owners_;
                  do
                    v170 = __ldaxr(v169);
                  while (__stlxr(v170 - 1, v169));
                  if (!v170)
                  {
                    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                    std::__shared_weak_count::__release_weak(v168);
                  }
                }
                v171 = (std::__shared_weak_count *)*((_QWORD *)v167 + 2);
                if (v171)
                {
                  v172 = (unint64_t *)&v171->__shared_owners_;
                  do
                    v173 = __ldaxr(v172);
                  while (__stlxr(v173 - 1, v172));
                  if (!v173)
                  {
                    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                    std::__shared_weak_count::__release_weak(v171);
                  }
                }
                MEMORY[0x212BC6398](v167, 0x10F0C40B62ED6C6);
                v174 = v504;
                v504 = 0;
                if (v174)
                {
                  v175 = *(std::__shared_weak_count **)(v174 + 32);
                  if (v175)
                  {
                    v176 = (unint64_t *)&v175->__shared_owners_;
                    do
                      v177 = __ldaxr(v176);
                    while (__stlxr(v177 - 1, v176));
                    if (!v177)
                    {
                      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                      std::__shared_weak_count::__release_weak(v175);
                    }
                  }
                  v178 = *(std::__shared_weak_count **)(v174 + 16);
                  if (v178)
                  {
                    v179 = (unint64_t *)&v178->__shared_owners_;
                    do
                      v180 = __ldaxr(v179);
                    while (__stlxr(v180 - 1, v179));
                    if (!v180)
                    {
                      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                      std::__shared_weak_count::__release_weak(v178);
                    }
                  }
                  MEMORY[0x212BC6398](v174, 0x10F0C40B62ED6C6);
                }
              }
              v181 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v182 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v183 = __ldaxr(v182);
                while (__stlxr(v183 - 1, v182));
                if (!v183)
                {
                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                  std::__shared_weak_count::__release_weak(v181);
                }
              }
              v184 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v185 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
            }
            else
            {
              os_log_type_enabled(v155, OS_LOG_TYPE_INFO);
              *(_WORD *)object = 0;
              v187 = (void *)_os_log_send_and_compose_impl();
              if (v187)
                free(v187);
            }
            if (v137)
            {
              sub_20E8C003C((uint64_t)&v490, "Feature is to far away from camera to become a map feature");
              sub_20E863570((uint64_t)&v490);
            }
            sub_20E863570((uint64_t)&v490);
            v188 = v498;
            if (v498)
            {
              v189 = (unint64_t *)&v498->__shared_owners_;
              do
                v190 = __ldaxr(v189);
              while (__stlxr(v190 - 1, v189));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                std::__shared_weak_count::__release_weak(v188);
              }
            }
LABEL_263:
            sub_20F27AFA0(&v499);
            if (**(int **)(v499 + 56) <= 2)
            {
              v191 = *(unsigned __int8 *)(v499 + 72);
              v192 = sub_20E8C31DC(v499, "OSLogSurrogateAppender", 1, 0);
              v193 = v192;
              _ZF = !v191 && v192 == 0;
              if (!_ZF)
              {
                v490 = &v499;
                rep = (char *)std::chrono::steady_clock::now().__d_.__rep_;
                v492 = std::chrono::system_clock::now().__d_.__rep_;
                v493 = 2;
                v494 = "unknown file";
                v495 = 123;
                v496 = "unknown function";
                v497 = 0;
                v498 = 0;
                v195 = *(_QWORD *)v490;
                if (*(char *)(*(_QWORD *)v490 + 39) < 0)
                {
                  v197 = *(const char **)(v195 + 16);
                  v196 = *(_QWORD *)(v195 + 24);
                }
                else
                {
                  v196 = *(unsigned __int8 *)(*(_QWORD *)v490 + 39);
                  v197 = (const char *)(*(_QWORD *)v490 + 16);
                }
                __lenb = v196;
                v454 = *(_QWORD *)v490 + 16;
                v198 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v500);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v500);
                  if (v503 && SHIBYTE(v502) < 0)
                    operator delete(v500);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                  v49 = v464;
                  v50 = v476;
                }
                if (byte_254A4A4F8[23] >= 0)
                  v199 = byte_254A4A4F8;
                else
                  v199 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v200 = byte_254A4A4F8[23];
                else
                  v200 = *(_QWORD *)&byte_254A4A4F8[8];
                *(_QWORD *)object = os_log_create(v199, v197);
                if (v200 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                __srcb = v197;
                if (v200 >= 0x17)
                {
                  v452 = v195;
                  v202 = v193;
                  v203 = v191;
                  v204 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v200 | 7) != 0x17)
                    v204 = v200 | 7;
                  v205 = v204 + 1;
                  v201 = operator new(v204 + 1);
                  *(_QWORD *)&object[16] = v200;
                  *(_QWORD *)&object[24] = v205 | 0x8000000000000000;
                  *(_QWORD *)&object[8] = v201;
                  v191 = v203;
                  v193 = v202;
                  v195 = v452;
                }
                else
                {
                  object[31] = v200;
                  v201 = &object[8];
                  if (!v200)
                  {
LABEL_286:
                    v201[v200] = 0;
                    object[32] = 1;
                    v206 = __lenb;
                    if (__lenb > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v39 = v463;
                    if (__lenb >= 0x17)
                    {
                      v208 = (__lenb & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((__lenb | 7) != 0x17)
                        v208 = __lenb | 7;
                      v209 = v208 + 1;
                      v207 = operator new(v208 + 1);
                      v506 = __lenb;
                      v507 = v209 | 0x8000000000000000;
                      *(_QWORD *)&object[40] = v207;
                      v206 = __lenb;
                    }
                    else
                    {
                      HIBYTE(v507) = __lenb;
                      v207 = &object[40];
                      if (!__lenb)
                        goto LABEL_294;
                    }
                    memmove(v207, __srcb, v206);
LABEL_294:
                    v207[v206] = 0;
                    LOBYTE(v508[0]) = 1;
                    v210 = *(NSObject **)object;
                    if (SHIBYTE(v507) < 0)
                      operator delete(*(void **)&object[40]);
                    if (object[32] && (object[31] & 0x80000000) != 0)
                      operator delete(*(void **)&object[8]);
                    if (*(_QWORD *)object)
                      os_release(*(void **)object);
                    if (v193 && *(_QWORD *)(v193 + 24))
                    {
                      v211 = _os_log_pack_size();
                      v212 = (std::__shared_weak_count_vtbl *)operator new(v211, (std::align_val_t)8uLL);
                      v213 = (std::__shared_weak_count *)operator new();
                      v214 = v213;
                      v213->__shared_owners_ = 0;
                      v215 = (unint64_t *)&v213->__shared_owners_;
                      v213->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v213->__shared_weak_owners_ = 0;
                      v213[1].__vftable = v212;
                      *(_QWORD *)object = v212;
                      *(_QWORD *)&object[8] = v212;
                      *(_QWORD *)&object[16] = v213;
                      do
                        v216 = __ldxr(v215);
                      while (__stxr(v216 + 1, v215));
                      memset(&object[24], 0, 24);
                      v39 = v463;
                      do
                        v217 = __ldaxr(v215);
                      while (__stlxr(v217 - 1, v215));
                      if (!v217)
                      {
                        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                      v218 = *(_QWORD *)object;
                      *(_WORD *)_os_log_pack_fill() = 0;
                      v219 = (char *)operator new();
                      v220 = *(unsigned __int8 *)(v195 + 39);
                      v221 = v454;
                      if ((v220 & 0x80u) != 0)
                      {
                        v221 = *(_QWORD *)(v195 + 16);
                        v220 = *(_QWORD *)(v195 + 24);
                      }
                      *(_QWORD *)v219 = v218;
                      *(_OWORD *)(v219 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v219 + 24) = *(_OWORD *)&object[24];
                      *(_QWORD *)&object[24] = 0;
                      *(_QWORD *)&object[32] = 0;
                      *((_QWORD *)v219 + 5) = v221;
                      *((_QWORD *)v219 + 6) = v220;
                      v219[56] = 2;
                      v504 = 0;
                      v500 = v219;
                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v193 + 24) + 40))(*(_QWORD *)(v193 + 24), &v500);
                      v222 = v500;
                      v500 = 0;
                      if (v222)
                      {
                        v223 = (std::__shared_weak_count *)*((_QWORD *)v222 + 4);
                        if (v223)
                        {
                          v224 = (unint64_t *)&v223->__shared_owners_;
                          do
                            v225 = __ldaxr(v224);
                          while (__stlxr(v225 - 1, v224));
                          if (!v225)
                          {
                            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                            std::__shared_weak_count::__release_weak(v223);
                          }
                        }
                        v226 = (std::__shared_weak_count *)*((_QWORD *)v222 + 2);
                        if (v226)
                        {
                          v227 = (unint64_t *)&v226->__shared_owners_;
                          do
                            v228 = __ldaxr(v227);
                          while (__stlxr(v228 - 1, v227));
                          if (!v228)
                          {
                            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                            std::__shared_weak_count::__release_weak(v226);
                          }
                        }
                        MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
                        v229 = v504;
                        v504 = 0;
                        if (v229)
                        {
                          v230 = *(std::__shared_weak_count **)(v229 + 32);
                          if (v230)
                          {
                            v231 = (unint64_t *)&v230->__shared_owners_;
                            do
                              v232 = __ldaxr(v231);
                            while (__stlxr(v232 - 1, v231));
                            if (!v232)
                            {
                              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                              std::__shared_weak_count::__release_weak(v230);
                            }
                          }
                          v233 = *(std::__shared_weak_count **)(v229 + 16);
                          if (v233)
                          {
                            v234 = (unint64_t *)&v233->__shared_owners_;
                            do
                              v235 = __ldaxr(v234);
                            while (__stlxr(v235 - 1, v234));
                            if (!v235)
                            {
                              ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                              std::__shared_weak_count::__release_weak(v233);
                            }
                          }
                          MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
                        }
                      }
                      v236 = *(std::__shared_weak_count **)&object[32];
                      if (*(_QWORD *)&object[32])
                      {
                        v237 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                        do
                          v238 = __ldaxr(v237);
                        while (__stlxr(v238 - 1, v237));
                        if (!v238)
                        {
                          ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                          std::__shared_weak_count::__release_weak(v236);
                        }
                      }
                      v239 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v240 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v241 = __ldaxr(v240);
                        while (__stlxr(v241 - 1, v240));
                        if (!v241)
                        {
                          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                          std::__shared_weak_count::__release_weak(v239);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG);
                      *(_WORD *)object = 0;
                      v242 = (void *)_os_log_send_and_compose_impl();
                      if (v242)
                        free(v242);
                    }
                    if (v191)
                    {
                      sub_20E8C003C((uint64_t)&v490, "cannot create a new track");
                      sub_20E863570((uint64_t)&v490);
                    }
                    sub_20E863570((uint64_t)&v490);
                    v243 = v498;
                    if (v498)
                    {
                      v244 = (unint64_t *)&v498->__shared_owners_;
                      do
                        v245 = __ldaxr(v244);
                      while (__stlxr(v245 - 1, v244));
                      if (!v245)
                      {
                        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                        std::__shared_weak_count::__release_weak(v243);
                      }
                    }
                    goto LABEL_168;
                  }
                }
                memmove(v201, v199, v200);
                goto LABEL_286;
              }
            }
LABEL_168:
            v134 = v489;
            v4 = v481;
            if (v489)
            {
              v135 = (unint64_t *)&v489->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            v56 = v472;
            v59 = v470;
LABEL_66:
            v57 += 32;
            if (v57 == v56)
              goto LABEL_363;
          }
          v84 = 0;
          v85 = (char *)(8 * v77);
          *(_QWORD *)(8 * v77) = v68;
          v86 = 8 * v77 + 8;
          v87 = v71 - v75;
          if (v71 == v75)
            goto LABEL_96;
LABEL_90:
          v88 = v87 - 8;
          if (v88 < 0x58)
            goto LABEL_602;
          if ((unint64_t)(v71 - &v84[v76]) < 0x20)
            goto LABEL_602;
          v89 = (v88 >> 3) + 1;
          v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
          v91 = &v71[-v90];
          v85 -= v90;
          v92 = &v84[8 * v77 - 16];
          v93 = (__int128 *)(v71 - 16);
          v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v95 = *v93;
            *((_OWORD *)v92 - 1) = *(v93 - 1);
            *(_OWORD *)v92 = v95;
            v92 -= 32;
            v93 -= 2;
            v94 -= 4;
          }
          while (v94);
          v71 = v91;
          if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_602:
            do
            {
              v96 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *((_QWORD *)v85 - 1) = v96;
              v85 -= 8;
            }
            while (v71 != v75);
          }
          goto LABEL_96;
        }
LABEL_363:
        if (!*(_BYTE *)(v468 + 9))
        {
          sub_20F25F4C0(*v39, (int32x4_t **)&v486);
          sub_20F28C48C((int32x4_t **)(*v39 + 552), (int32x4_t *)v486, *((int32x4_t **)&v486 + 1), (uint64_t)(*((_QWORD *)&v486 + 1) - v486) >> 3);
        }
        *(_BYTE *)(*v39 + 736) = v456;
        v246 = v478;
        if ((_QWORD)v486)
        {
          *((_QWORD *)&v486 + 1) = v486;
          operator delete((void *)v486);
        }
        v511 = v483;
        LODWORD(v512) = v484;
        v501 = 0;
        v502 = 0;
        v500 = &v501;
        v247 = sub_20F22F698((uint64_t **)&v500, (uint64_t *)&v501, (uint64_t **)object, (uint64_t **)&v490, (unint64_t *)&v511);
        if (!*v247)
        {
          v248 = operator new(0x38uLL);
          v248[2] = v511;
          *((_QWORD *)v248 + 6) = v512;
          v249 = *(_QWORD *)object;
          *(_QWORD *)v248 = 0;
          *((_QWORD *)v248 + 1) = 0;
          *((_QWORD *)v248 + 2) = v249;
          *v247 = (uint64_t)v248;
          if (*(_QWORD *)v500)
          {
            v500 = *(void **)v500;
            v248 = (_OWORD *)*v247;
          }
          sub_20E868578(v501, (uint64_t *)v248);
          ++v502;
        }
        *(_QWORD *)object = 1;
        *(_DWORD *)&object[8] = 5;
        *(_OWORD *)&object[16] = xmmword_2102DCC90;
        *(_OWORD *)&object[32] = xmmword_2103853D0;
        v506 = 0;
        LOBYTE(v507) = 0;
        *(_OWORD *)v508 = 0u;
        *(_OWORD *)v509 = 0u;
        v510 = 1065353216;
        sub_20F25C624((uint64_t)object, *(_QWORD *)v6[2][53], &v500);
        v250 = *(_QWORD *)(v6[2][53] + 8);
        v251 = v502;
        v252 = v4;
        if (*((_BYTE *)*v6 + 478))
        {
          if (v502)
          {
            v253 = (uint64_t *)v500;
            if (v500 != &v501)
            {
              v254 = 0;
              v255 = (_QWORD *)(v250 + 24);
              do
              {
                v256 = sub_20E9DF85C(v255, v253 + 4);
                if (v256 && v256[8] > (unint64_t)v254)
                  v254 = v256[8];
                v257 = (uint64_t *)v253[1];
                if (v257)
                {
                  do
                  {
                    v258 = (uint64_t **)v257;
                    v257 = (uint64_t *)*v257;
                  }
                  while (v257);
                }
                else
                {
                  do
                  {
                    v258 = (uint64_t **)v253[2];
                    _ZF = *v258 == v253;
                    v253 = (uint64_t *)v258;
                  }
                  while (!_ZF);
                }
                v253 = (uint64_t *)v258;
              }
              while (v258 != &v501);
              if (v254)
              {
                v265 = operator new(16 * v254);
                v490 = v265;
                rep = (char *)v265;
                v492 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v265 + 16 * v254;
                v266 = (uint64_t *)v500;
                if (v500 == &v501)
                {
LABEL_483:
                  rep = (char *)v265;
                  operator delete(v265);
                  goto LABEL_484;
                }
                do
                {
                  v267 = sub_20E9DF85C(v255, v266 + 4);
                  if (v267)
                  {
                    v268 = (_QWORD *)v267[7];
                    while (v268)
                    {
                      v271 = v268;
                      v272 = v268[3];
                      v274 = *(_QWORD *)(v272 + 24);
                      v273 = *(_QWORD *)(v272 + 32);
                      *(_QWORD *)&v486 = v274;
                      *((_QWORD *)&v486 + 1) = v273;
                      v268 = (_QWORD *)*v268;
                      if (*(_BYTE *)(v272 + 192) && *(_QWORD *)(v272 + 208) - *(_QWORD *)(v272 + 200) > 0x20uLL)
                      {
                        if (v251 == 1)
                        {
                          v275 = (uint64_t *)v500;
                          if (v500 != &v501)
                          {
                            do
                            {
                              v276 = v271[3];
                              v277 = v276 + 40;
                              if (!*(_BYTE *)(v276 + 192))
                                v277 = 0;
                              if (*(_BYTE *)(v277 + 148))
                                sub_20F27E8C4(v6, (uint64_t)(v275 + 4), v276);
                              else
                                sub_20F2A6D04((_QWORD *)v6[2][53], (uint64_t)object, v276, (uint64_t *)*v6 + 55);
                              v278 = (uint64_t *)v275[1];
                              if (v278)
                              {
                                do
                                {
                                  v279 = (uint64_t **)v278;
                                  v278 = (uint64_t *)*v278;
                                }
                                while (v278);
                              }
                              else
                              {
                                do
                                {
                                  v279 = (uint64_t **)v275[2];
                                  _ZF = *v279 == v275;
                                  v275 = (uint64_t *)v279;
                                }
                                while (!_ZF);
                              }
                              v275 = (uint64_t *)v279;
                            }
                            while (v279 != &v501);
                          }
                        }
                        else
                        {
                          v280 = (char *)v490;
                          if (rep != v490)
                          {
                            v281 = (rep - (_BYTE *)v490) >> 4;
                            do
                            {
                              v282 = v281 >> 1;
                              v283 = &v280[16 * (v281 >> 1)];
                              if (*(_QWORD *)v283 < v274
                                || *(_QWORD *)v283 == v274 && *(_DWORD *)&v280[16 * v282 + 8] < v273)
                              {
                                v280 = v283 + 16;
                                v282 = v281 + ~v282;
                              }
                              v281 = v282;
                            }
                            while (v282);
                          }
                          if (v280 == rep || *(_QWORD *)v280 != v274 || *((_DWORD *)v280 + 2) != (_DWORD)v273)
                          {
                            sub_20F0527A0((char **)&v490, v280, &v486);
                            v284 = (uint64_t *)v500;
                            if (v500 != &v501)
                            {
                              do
                              {
                                v285 = v271[3];
                                v286 = v285 + 40;
                                if (!*(_BYTE *)(v285 + 192))
                                  v286 = 0;
                                if (*(_BYTE *)(v286 + 148))
                                  sub_20F27E8C4(v6, (uint64_t)(v284 + 4), v285);
                                else
                                  sub_20F2A6D04((_QWORD *)v6[2][53], (uint64_t)object, v285, (uint64_t *)*v6 + 55);
                                v287 = (uint64_t *)v284[1];
                                if (v287)
                                {
                                  do
                                  {
                                    v288 = (uint64_t **)v287;
                                    v287 = (uint64_t *)*v287;
                                  }
                                  while (v287);
                                }
                                else
                                {
                                  do
                                  {
                                    v288 = (uint64_t **)v284[2];
                                    _ZF = *v288 == v284;
                                    v284 = (uint64_t *)v288;
                                  }
                                  while (!_ZF);
                                }
                                v284 = (uint64_t *)v288;
                              }
                              while (v288 != &v501);
                            }
                          }
                        }
                      }
                    }
                  }
                  v269 = (uint64_t *)v266[1];
                  if (v269)
                  {
                    do
                    {
                      v270 = (uint64_t **)v269;
                      v269 = (uint64_t *)*v269;
                    }
                    while (v269);
                  }
                  else
                  {
                    do
                    {
                      v270 = (uint64_t **)v266[2];
                      _ZF = *v270 == v266;
                      v266 = (uint64_t *)v270;
                    }
                    while (!_ZF);
                  }
                  v266 = (uint64_t *)v270;
                  v246 = v478;
                }
                while (v270 != &v501);
LABEL_482:
                v265 = v490;
                if (!v490)
                  goto LABEL_484;
                goto LABEL_483;
              }
            }
          }
        }
        else if (v502)
        {
          v259 = (uint64_t *)v500;
          if (v500 != &v501)
          {
            v260 = 0;
            v261 = (_QWORD *)(v250 + 24);
            do
            {
              v262 = sub_20E9DF85C(v261, v259 + 4);
              if (v262 && v262[8] > (unint64_t)v260)
                v260 = v262[8];
              v263 = (uint64_t *)v259[1];
              if (v263)
              {
                do
                {
                  v264 = (uint64_t **)v263;
                  v263 = (uint64_t *)*v263;
                }
                while (v263);
              }
              else
              {
                do
                {
                  v264 = (uint64_t **)v259[2];
                  _ZF = *v264 == v259;
                  v259 = (uint64_t *)v264;
                }
                while (!_ZF);
              }
              v259 = (uint64_t *)v264;
            }
            while (v264 != &v501);
            if (v260)
            {
              v265 = operator new(16 * v260);
              v490 = v265;
              rep = (char *)v265;
              v492 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v265 + 16 * v260;
              v289 = (uint64_t *)v500;
              if (v500 == &v501)
                goto LABEL_483;
              do
              {
                v290 = sub_20E9DF85C(v261, v289 + 4);
                if (v290)
                {
                  v291 = (_QWORD *)v290[7];
                  while (v291)
                  {
                    v294 = v291;
                    v295 = v291[3];
                    v297 = *(_QWORD *)(v295 + 24);
                    v296 = *(_QWORD *)(v295 + 32);
                    *(_QWORD *)&v486 = v297;
                    *((_QWORD *)&v486 + 1) = v296;
                    v291 = (_QWORD *)*v291;
                    if (*(_BYTE *)(v295 + 192) && *(_QWORD *)(v295 + 208) - *(_QWORD *)(v295 + 200) > 0x20uLL)
                    {
                      if (v251 == 1)
                      {
                        sub_20F2A6D04((_QWORD *)v6[2][53], (uint64_t)object, v295, (uint64_t *)*v6 + 55);
                      }
                      else
                      {
                        v298 = (char *)v490;
                        if (rep != v490)
                        {
                          v299 = (rep - (_BYTE *)v490) >> 4;
                          do
                          {
                            v300 = v299 >> 1;
                            v301 = &v298[16 * (v299 >> 1)];
                            if (*(_QWORD *)v301 < v297
                              || *(_QWORD *)v301 == v297 && *(_DWORD *)&v298[16 * v300 + 8] < v296)
                            {
                              v298 = v301 + 16;
                              v300 = v299 + ~v300;
                            }
                            v299 = v300;
                          }
                          while (v300);
                        }
                        if (v298 == rep || *(_QWORD *)v298 != v297 || *((_DWORD *)v298 + 2) != (_DWORD)v296)
                        {
                          sub_20F0527A0((char **)&v490, v298, &v486);
                          sub_20F2A6D04((_QWORD *)v6[2][53], (uint64_t)object, v294[3], (uint64_t *)*v6 + 55);
                        }
                      }
                    }
                  }
                }
                v292 = (uint64_t *)v289[1];
                if (v292)
                {
                  do
                  {
                    v293 = (uint64_t **)v292;
                    v292 = (uint64_t *)*v292;
                  }
                  while (v292);
                }
                else
                {
                  do
                  {
                    v293 = (uint64_t **)v289[2];
                    _ZF = *v293 == v289;
                    v289 = (uint64_t *)v293;
                  }
                  while (!_ZF);
                }
                v289 = (uint64_t *)v293;
                v246 = v478;
              }
              while (v293 != &v501);
              goto LABEL_482;
            }
          }
        }
LABEL_484:
        v302 = v509[0];
        if (v509[0])
        {
          do
          {
            v303 = (_QWORD *)*v302;
            operator delete(v302);
            v302 = v303;
          }
          while (v303);
        }
        v304 = v508[0];
        v508[0] = 0;
        if (v304)
          operator delete(v304);
        sub_20E86872C((uint64_t)&v500, v501);
        if (*(_QWORD *)(v6[23][132] + 8) && !**(_BYTE **)(v252 + 32))
          sub_20F24E20C((uint64_t)v6, v455, (uint64_t *)&v483);
        v305 = *v6;
        if (*((_BYTE *)*v6 + 1) && !**(_BYTE **)(v252 + 32))
        {
          sub_20F25CF68(v6, (uint64_t)&v483, v246 + 93);
          v305 = *v6;
        }
        v306 = *((unsigned __int8 *)v305 + 2600);
        if (*((_BYTE *)v305 + 2600))
        {
          if (!*((_BYTE *)v305 + 1225) || *((_DWORD *)v305 + 646) == 4)
            goto LABEL_499;
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 647, (uint64_t)"!(config().enable_ml_descriptors_for_weak_keyframes && config().slam_relocalization_config.use_ml_vlad && config().ml_desc_config.feature_type != feature_detection::FeatureType::DetectorNoneDescriptorATUHardNetGlobalFeat)", 221, (uint64_t)"ML Vlad not supported for weak keyframes without GlobalFeat", 59, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v305 = *v6;
          v306 = *((unsigned __int8 *)*v6 + 2600);
          if (*((_BYTE *)*v6 + 2600))
          {
LABEL_499:
            v306 = **(unsigned __int8 **)(v252 + 32);
            if (**(_BYTE **)(v252 + 32))
            {
              v307 = *(uint64_t **)(v252 + 72);
              v309 = *v307;
              v308 = v307[1];
              v306 = *((_DWORD *)v246 + 11) * *((_DWORD *)v246 + 10) != 0;
              if (!*((_BYTE *)v246 + 48))
                v306 = 0;
              if (v309 == v308)
                v306 = 1;
            }
          }
        }
        if (**(_BYTE **)(v252 + 80))
          goto LABEL_561;
        v310 = **(_BYTE **)(v252 + 32);
        if (!v310)
          v306 = 1;
        if (v306 == 1)
        {
          v311 = *(_QWORD *)(v252 + 72);
          *(_OWORD *)object = v483;
          *(_DWORD *)&object[16] = v484;
          *(_QWORD *)&object[24] = *(_QWORD *)(*(_QWORD *)(v252 + 48) + 824);
          *(_DWORD *)&object[32] = 0;
          object[36] = v310;
          v506 = 0;
          v507 = 0;
          *(_QWORD *)&object[40] = 0;
          v312 = (_BYTE *)v246[69];
          v313 = (_BYTE *)v246[70];
          v314 = v313 - v312;
          if (v313 == v312)
          {
            v316 = 0;
            v315 = 0;
          }
          else
          {
            if (v314 < 0)
              sub_20E867F44();
            v315 = (char *)operator new(v313 - v312);
            v316 = &v315[4 * (v314 >> 2)];
            *(_QWORD *)&object[40] = v315;
            v507 = (unint64_t)v316;
            memcpy(v315, v312, v314);
            v506 = (size_t)v316;
          }
          v317 = *(_QWORD *)(v311 + 8);
          if (v317 >= *(_QWORD *)(v311 + 16))
          {
            v320 = sub_20F2881D8((void **)v311, (uint64_t)object);
            v321 = *(void **)&object[40];
            *(_QWORD *)(v311 + 8) = v320;
            if (v321)
              operator delete(v321);
          }
          else
          {
            v318 = *(_OWORD *)object;
            v319 = *(_OWORD *)&object[16];
            *(_QWORD *)(v317 + 29) = *(_QWORD *)&object[29];
            *(_OWORD *)v317 = v318;
            *(_OWORD *)(v317 + 16) = v319;
            *(_QWORD *)(v317 + 40) = v315;
            *(_QWORD *)(v317 + 48) = v316;
            *(_QWORD *)(v317 + 56) = v316;
            *(_QWORD *)(v311 + 8) = v317 + 64;
          }
          v305 = *v6;
          if (!**(_BYTE **)(v252 + 32))
            goto LABEL_561;
        }
        v322 = (unint64_t *)*((unsigned int *)v305 + 686);
        if (!(_DWORD)v322)
          goto LABEL_561;
        v323 = v6[446];
        if (v323 != v6[445])
        {
LABEL_535:
          sub_20F268E8C(v6, (uint64_t *)&v483, (__n128 *)object);
          if (object[16])
          {
            v334 = *(_QWORD *)v6[2][53];
            v337 = *(uint64_t **)(v334 + 56);
            v335 = (uint64_t *)(v334 + 56);
            v336 = v337;
            if (v337)
            {
              v338 = v335;
              do
              {
                v339 = v336[4];
                if (v339 < *(_QWORD *)object)
                {
                  ++v336;
                }
                else if (v339 == *(_QWORD *)object)
                {
                  if (*((_DWORD *)v336 + 10) < *(_DWORD *)&object[8])
                    ++v336;
                  else
                    v338 = v336;
                }
                else
                {
                  v338 = v336;
                }
                v336 = (uint64_t *)*v336;
              }
              while (v336);
              if (v338 != v335)
              {
                v340 = v338[4];
                if (*(_QWORD *)object >= v340
                  && (*(_QWORD *)object != v340 || *((_DWORD *)v338 + 10) <= *(_DWORD *)&object[8]))
                {
                  v341 = v338[6];
                  if (v341)
                  {
                    v342 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)v6[2][53] + 1784), (uint64_t *)&v483);
                    if (v342)
                    {
                      v344 = v342[5];
                      v345 = *(float64x2_t *)v344;
                      _D3 = *(_QWORD *)(v344 + 40);
                      v347 = *(float64x2_t *)(v344 + 24);
                      v348 = *(double *)(v344 + 64);
                      _Q6 = *(float64x2_t *)(v344 + 48);
                      v350 = v342[9];
                      v351 = *(double *)(v350 + 16);
                      _Q7 = *(float64x2_t *)v350;
                      v353 = *(double *)(v350 + 40);
                      _Q17 = *(float64x2_t *)(v350 + 24);
                      v355 = *(double *)(v350 + 64);
                      _Q19 = *(float64x2_t *)(v350 + 48);
                      v357 = (float64x2_t *)v342[11];
                      v343.f64[0] = v357[1].f64[0];
                      _Q21 = *v357;
                      v359 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v345, v357->f64[0]), v347, *v357, 1), _Q6, v343.f64[0]);
                      __asm { FMLA            D23, D3, V21.D[1] }
                      v343.f64[0] = _D23 + v348 * v343.f64[0];
                      v361 = (float64x2_t *)v342[7];
                      _Q21.f64[0] = v361[1].f64[0];
                      *(_QWORD *)&v362 = *(_OWORD *)&vaddq_f64(v343, _Q21);
                      v363 = vaddq_f64(v359, *v361);
                      v364 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v345, _Q7.f64[0]), v347, _Q7, 1), _Q6, v351);
                      __asm { FMLA            D23, D3, V7.D[1] }
                      v366.f64[0] = _D23 + v348 * v351;
                      _Q7 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v345, _Q17.f64[0]), v347, _Q17, 1), _Q6, v353);
                      __asm { FMLA            D23, D3, V17.D[1] }
                      v369 = _D23 + v348 * v353;
                      _Q17 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v345, _Q19.f64[0]), v347, _Q19, 1), _Q6, v355);
                      __asm { FMLA            D1, D3, V19.D[1] }
                      v372 = _D1 + v348 * v355;
                      v373 = (float64x2_t)vzip1q_s64(v364, _Q7);
                      v374 = (float64x2_t)vzip2q_s64(v364, _Q7);
                      *(_QWORD *)&v345.f64[0] = vdupq_laneq_s64(_Q17, 1).u64[0];
                      v366.f64[1] = v369;
                      v375 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v373, v363.f64[0]), v374, v363, 1), v366, v362);
                      _Q7.i64[0] = *(_QWORD *)&v363.f64[1];
                      __asm { FMLA            D6, D7, V17.D[1] }
                      _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v372, v362);
                      *(_QWORD *)&v376 = *(_OWORD *)&vnegq_f64(_Q6);
                      *(_QWORD *)&_Q6.f64[0] = _Q17.i64[0];
                      __asm { FMOV            V7.2D, #1.0 }
                      _Q7.f64[0] = v376;
                      _Q17.i64[0] = *(_QWORD *)(v341 + 64);
                      v379 = *(float64x2_t *)(v341 + 32);
                      v378 = *(float64x2_t *)(v341 + 48);
                      v380 = *(float64x2_t *)(v341 + 16);
                      v364.i64[0] = *(_QWORD *)(v341 + 88);
                      v381 = *(float64x2_t *)(v341 + 72);
                      v382 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v373, *(double *)v341), v374, *(float64x2_t *)v341, 1), v366, v380.f64[0]), (float64x2_t)0, v375);
                      v383 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], *(double *)v341), (float64x2_t)*(unint64_t *)&v345.f64[0], *(float64x2_t *)v341, 1), (float64x2_t)*(unint64_t *)&v372, v380.f64[0]), (float64x2_t)0, _Q7);
                      v384 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v373, v380, 1), v374, v379.f64[0]), v366, v379, 1), (float64x2_t)0, v375);
                      v385 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], v380, 1), (float64x2_t)*(unint64_t *)&v345.f64[0], v379.f64[0]), (float64x2_t)*(unint64_t *)&v372, v379, 1), (float64x2_t)0, _Q7);
                      _Q19 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v373, v378.f64[0]), v374, v378, 1), v366, *(double *)_Q17.i64), (float64x2_t)0, v375);
                      *(_QWORD *)&v387 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], v378.f64[0]), (float64x2_t)*(unint64_t *)&v345.f64[0], v378, 1), (float64x2_t)*(unint64_t *)&v372, *(double *)_Q17.i64), (float64x2_t)0, _Q7);
                      _Q0 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v373, v381.f64[0]), v374, v381, 1), v366, *(double *)v364.i64), v375);
                      *(_QWORD *)&v389 = *(_OWORD *)&vaddq_f64(_Q7, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], v381.f64[0]), (float64x2_t)*(unint64_t *)&v345.f64[0], v381, 1), (float64x2_t)*(unint64_t *)&v372, *(double *)v364.i64));
                      v390 = (uint64_t)&v6[445][14 * (_QWORD)v6[449]];
                      v391 = (float64x2_t)vzip1q_s64(v382, v384);
                      v392 = (float64x2_t)vzip2q_s64(v382, v384);
                      v393 = (float64x2_t)vzip1q_s64(v383, v385);
                      v394 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v391, _Q0.f64[0]), v392, _Q0, 1), v393, v389);
                      _Q0.f64[0] = _Q0.f64[1];
                      __asm { FMLA            D6, D0, V19.D[1] }
                      *(_QWORD *)v390 = *(_QWORD *)object;
                      *(_DWORD *)(v390 + 8) = *(_DWORD *)&object[8];
                      *(float64x2_t *)(v390 + 16) = v391;
                      *(float64_t *)(v390 + 32) = _Q19.f64[0];
                      *(float64_t *)(v390 + 56) = _Q19.f64[1];
                      *(float64x2_t *)(v390 + 40) = v392;
                      *(float64x2_t *)(v390 + 64) = v393;
                      *(double *)(v390 + 80) = v387;
                      *(float64x2_t *)(v390 + 88) = vnegq_f64(v394);
                      *(_QWORD *)(v390 + 104) = *(_OWORD *)&vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(vmlad_n_f64(_Q6.f64[0], v389, v387)));
                      v395 = 0x6DB6DB6DB6DB6DB7 * (((char *)v6[446] - (char *)v6[445]) >> 4);
                      v396 = (unint64_t)v6[449] + 1;
                      if (v396 >= v395)
                        v397 = 0x6DB6DB6DB6DB6DB7 * (((char *)v6[446] - (char *)v6[445]) >> 4);
                      else
                        v397 = 0;
                      v6[449] = (unint64_t *)(v396 - v397);
                      v398 = v6[450];
                      if (v398 == (unint64_t *)v395)
                      {
                        v399 = (unint64_t)v6[448] + 1;
                        if (v399 < v395)
                          v395 = 0;
                        v6[448] = (unint64_t *)(v399 - v395);
                      }
                      else
                      {
                        v6[450] = (unint64_t *)((char *)v398 + 1);
                      }
                    }
                  }
                }
              }
            }
          }
          v305 = *v6;
LABEL_561:
          if (*((_BYTE *)v305 + 2501))
          {
            if (!**(_BYTE **)(v252 + 32))
            {
              v400 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)v6[2][53] + 1784), (uint64_t *)&v483);
              if (v400)
              {
                v402 = v400[5];
                _Q1 = *(float64x2_t *)v402;
                _D2 = *(_QWORD *)(v402 + 40);
                v405 = *(float64x2_t *)(v402 + 24);
                v406 = *(double *)(v402 + 64);
                v407 = *(float64x2_t *)(v402 + 48);
                v408 = v400[9];
                v409 = *(double *)(v408 + 16);
                _Q7 = *(float64x2_t *)v408;
                v411 = *(double *)(v408 + 40);
                _Q17 = *(float64x2_t *)(v408 + 24);
                v413 = *(double *)(v408 + 64);
                _Q19 = *(float64x2_t *)(v408 + 48);
                v415 = (float64x2_t *)v400[11];
                v401.f64[0] = v415[1].f64[0];
                _Q21 = *v415;
                _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, v415->f64[0]), v405, *v415, 1), v407, v401.f64[0]);
                __asm { FMLA            D23, D2, V21.D[1] }
                v401.f64[0] = _D23 + v406 * v401.f64[0];
                v419 = (float64x2_t *)v400[7];
                _Q21.f64[0] = v419[1].f64[0];
                *(_QWORD *)&v420 = *(_OWORD *)&vaddq_f64(v401, _Q21);
                v421 = vaddq_f64(_Q22, *v419);
                v422 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q7.f64[0]), v405, _Q7, 1), v407, v409);
                __asm { FMLA            D22, D2, V7.D[1] }
                v423 = _Q22.f64[0] + v406 * v409;
                v424 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q17.f64[0]), v405, _Q17, 1), v407, v411);
                __asm { FMLA            D6, D2, V17.D[1] }
                v426 = _D6 + v406 * v411;
                _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q19.f64[0]), v405, _Q19, 1), v407, v413);
                __asm { FMLA            D0, D2, V19.D[1] }
                v429 = _D0 + v406 * v413;
                _Q1.f64[0] = v423;
                _Q1.f64[1] = v426;
                v430 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v422, v424), v421.f64[0]), (float64x2_t)vzip2q_s64(v422, v424), v421, 1), _Q1, v420);
                _D2 = v421.f64[1];
                __asm { FMLA            D1, D2, V6.D[1] }
                _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v429, v420);
                v432 = *(_OWORD *)&vnegq_f64(_Q1);
                v433 = vnegq_f64(v430);
                v434 = v422.i64[1];
                v435 = v424.i64[1];
                v436 = v433.f64[1];
                v437 = _Q6.f64[1];
                v438 = *(char ***)(v252 + 88);
                *(_OWORD *)object = v483;
                *(_DWORD *)&object[16] = v484;
                v439 = *(_QWORD *)(*(_QWORD *)(v252 + 48) + 824);
                v441 = v438[1];
                v440 = (unint64_t)v438[2];
                if ((unint64_t)v441 >= v440)
                {
                  v443 = *v438;
                  v444 = 0x8E38E38E38E38E39 * ((v441 - *v438) >> 5);
                  v445 = v444 + 1;
                  if (v444 + 1 > 0xE38E38E38E38E3)
                    sub_20E867F44();
                  v446 = 0x8E38E38E38E38E39 * ((uint64_t)(v440 - (_QWORD)v443) >> 5);
                  if (2 * v446 > v445)
                    v445 = 2 * v446;
                  if (v446 >= 0x71C71C71C71C71)
                    v447 = 0xE38E38E38E38E3;
                  else
                    v447 = v445;
                  if (v447)
                  {
                    v469 = v433.f64[0];
                    v471 = v432;
                    v473 = v426;
                    v475 = _Q6.f64[0];
                    v477 = v423;
                    v479 = v424.i64[0];
                    v482 = v422.i64[0];
                    if (v447 > 0xE38E38E38E38E3)
                      sub_20E877A38();
                    v448 = (char *)operator new(288 * v447);
                    v424.i64[0] = v479;
                    v422.i64[0] = v482;
                    _Q6.f64[0] = v475;
                    v423 = v477;
                    v432 = v471;
                    v426 = v473;
                    v433.f64[0] = v469;
                  }
                  else
                  {
                    v448 = 0;
                  }
                  v449 = &v448[288 * v444];
                  *((_QWORD *)v449 + 2) = *(_QWORD *)&object[16];
                  *(_OWORD *)v449 = *(_OWORD *)object;
                  v450 = &v448[288 * v447];
                  *((_QWORD *)v449 + 3) = v439;
                  *((_QWORD *)v449 + 4) = 0;
                  v449[40] = 0;
                  v449[184] = 0;
                  *((_QWORD *)v449 + 24) = v422.i64[0];
                  *((_QWORD *)v449 + 25) = v434;
                  *((double *)v449 + 26) = v423;
                  *((_QWORD *)v449 + 27) = v424.i64[0];
                  *((_QWORD *)v449 + 28) = v435;
                  *((double *)v449 + 29) = v426;
                  *((_QWORD *)v449 + 30) = *(_QWORD *)&_Q6.f64[0];
                  *((float64_t *)v449 + 31) = v437;
                  *((double *)v449 + 32) = v429;
                  *((_QWORD *)v449 + 33) = *(_QWORD *)&v433.f64[0];
                  v442 = v449 + 288;
                  *((float64_t *)v449 + 34) = v436;
                  *((_QWORD *)v449 + 35) = v432;
                  if (v441 != v443)
                  {
                    do
                    {
                      v441 -= 288;
                      v449 -= 288;
                      memcpy(v449, v441, 0x120uLL);
                    }
                    while (v441 != v443);
                    v441 = *v438;
                  }
                  *v438 = v449;
                  v438[1] = v442;
                  v438[2] = v450;
                  if (v441)
                    operator delete(v441);
                }
                else
                {
                  *(_OWORD *)v441 = *(_OWORD *)object;
                  *((_QWORD *)v441 + 2) = *(_QWORD *)&object[16];
                  *((_QWORD *)v441 + 3) = v439;
                  *((_QWORD *)v441 + 4) = 0;
                  v441[40] = 0;
                  v441[184] = 0;
                  *((int64x2_t *)v441 + 12) = v422;
                  *((double *)v441 + 26) = v423;
                  *(int64x2_t *)(v441 + 216) = v424;
                  *((double *)v441 + 29) = v426;
                  *((float64x2_t *)v441 + 15) = _Q6;
                  *((double *)v441 + 32) = v429;
                  *(float64x2_t *)(v441 + 264) = v433;
                  *((_QWORD *)v441 + 35) = v432;
                  v442 = v441 + 288;
                }
                v438[1] = v442;
              }
            }
          }
          return;
        }
        v324 = (char *)operator new(112 * (_QWORD)v322);
        v325 = (unint64_t *)v324;
        v326 = 0;
        v327 = (unint64_t *)&v324[112 * (_QWORD)v322];
        do
        {
          v328 = &v324[v326];
          *(_OWORD *)(v328 + 40) = 0uLL;
          *(_OWORD *)(v328 + 56) = 0uLL;
          *(_OWORD *)(v328 + 24) = 0uLL;
          *(_QWORD *)v328 = 0;
          *((_QWORD *)v328 + 1) = 0;
          *((_QWORD *)v328 + 2) = 0x3FF0000000000000;
          *((_QWORD *)v328 + 6) = 0x3FF0000000000000;
          *((_QWORD *)v328 + 9) = 0;
          *((_QWORD *)v328 + 10) = 0x3FF0000000000000;
          *((_QWORD *)v328 + 12) = 0;
          *((_QWORD *)v328 + 13) = 0;
          v326 += 112;
          *((_QWORD *)v328 + 11) = 0;
        }
        while (112 * (_QWORD)v322 != v326);
        v329 = v6[450];
        if (v329 >= v322)
          v330 = v322;
        else
          v330 = v6[450];
        if (v329 <= v322)
        {
          if (v329)
          {
            v333 = v324;
            do
            {
              v333 += 112;
              v329 = (unint64_t *)((char *)v329 - 1);
            }
            while (v329);
          }
          else if (!v323)
          {
LABEL_534:
            v6[445] = v325;
            v6[446] = v327;
            v6[447] = v327;
            v6[450] = v330;
            v6[448] = 0;
            v6[449] = (unint64_t *)((unint64_t)v330 % (unint64_t)v322);
            goto LABEL_535;
          }
        }
        else
        {
          v331 = v330;
          v332 = v324;
          do
          {
            v332 += 112;
            v331 = (unint64_t *)((char *)v331 - 1);
          }
          while (v331);
        }
        operator delete(v323);
        goto LABEL_534;
      }
    }
  }
}

void sub_20F286980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;

  if (a66 && a65 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a50);
  sub_20E86665C((uint64_t)&a48);
  if (a45)
  {
    operator delete(a45);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F286BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (a50)
    operator delete(a50);
  sub_20F25CF20(&a65);
  sub_20E86872C(&a60, a61);
  _Unwind_Resume(a1);
}

uint64_t sub_20F286C2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping17MapDataController27AddFrameAndStateFromVFusionERKNS0_20FrontEndKeyframeD"
                     "ataEbbbbRNSt3__18optionalINS0_17feature_detection20VIODepthFeatureEventEEERNS7_INS8_18VIOFrameDebugEventEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping17MapDataController27AddFrameAndStateFromVFusionERKNS0_20FrontE"
                                "ndKeyframeDataEbbbbRNSt3__18optionalINS0_17feature_detection20VIODepthFeatureEventEEERNS"
                                "7_INS8_18VIOFrameDebugEventEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping17MapDataController27AddFrameAndStateFromVFusionERKNS0_20FrontEndKeyframeDataEbbbbRNSt3__18optionalINS0_17feature_detection20VIODepthFeatureEventEEERNS7_INS8_18VIOFrameDebugEventEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping17MapDataController27AddFrameAndStateFromVFusionERKNS0_20FrontEndKeyframeDataEbbbbRNSt3__18optionalINS0_17feature_detection20VIODepthFeatureEventEEERNS7_INS8_18VIOFrameDebugEventEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F286C98()
{
  return &unk_24C9FC2E8;
}

uint64_t sub_20F286CA4(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v4 = *(_QWORD *)a2;
  v7 = a1[5];
  v5 = a1[6];
  v6 = (char **)(a1 + 5);
  if (v5 != v7)
  {
    v8 = (v5 - v7) >> 4;
    v9 = *(_DWORD *)(v4 + 16);
    v10 = *(_QWORD *)v4;
    while (1)
    {
      v11 = v8 >> 1;
      v12 = v7 + 16 * (v8 >> 1);
      v13 = *(_QWORD *)v12;
      v14 = *(_DWORD *)(*(_QWORD *)v12 + 16);
      v15 = v14 >= v9;
      if (v14 != v9)
        goto LABEL_9;
      if (*(_QWORD *)v13 >= v10)
        break;
LABEL_3:
      v7 = v12 + 16;
      v11 = v8 + ~v11;
LABEL_4:
      v8 = v11;
      if (!v11)
        goto LABEL_12;
    }
    if (*(_QWORD *)v13 != v10)
      goto LABEL_4;
    v15 = *(_DWORD *)(v13 + 8) >= *(_DWORD *)(v4 + 8);
LABEL_9:
    if (v15)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v7 != v5)
  {
    v16 = *(_QWORD *)v7;
    if (*(_DWORD *)(*(_QWORD *)v7 + 16) == *(_DWORD *)(v4 + 16)
      && *(_QWORD *)v16 == *(_QWORD *)v4
      && *(_DWORD *)(v16 + 8) == *(_DWORD *)(v4 + 8))
    {
      return 0;
    }
  }
  v18 = *(_QWORD *)(v4 + 24);
  if (v18)
  {
    result = sub_20F286E1C(*a1, v4, v18);
    if ((_DWORD)result)
      return a1[6] != (_QWORD)sub_20F286FF8(v6, v7, a2);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 114, (uint64_t)"vio_frame->lens_model_", 22, (uint64_t)"VIO Frame Lens is not set!", 26, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    result = sub_20F286E1C(*a1, *(_QWORD *)a2, *(_QWORD *)(*(_QWORD *)a2 + 24));
    if ((_DWORD)result)
      return a1[6] != (_QWORD)sub_20F286FF8(v6, v7, a2);
  }
  return result;
}

uint64_t sub_20F286E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v3 = *(uint64_t **)(a1 + 56);
  if (v3)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 8);
    v9 = (uint64_t *)(a1 + 56);
    do
    {
      v10 = v3[4];
      if (v10 < v7)
      {
        ++v3;
      }
      else if (v10 == v7)
      {
        if (*((_DWORD *)v3 + 10) < v8)
          ++v3;
        else
          v9 = v3;
      }
      else
      {
        v9 = v3;
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    if (v9 != (uint64_t *)(a1 + 56))
    {
      v11 = v9[4];
      if (v7 >= v11 && (v7 != v11 || *((_DWORD *)v9 + 10) <= v8))
      {
        v12 = v9[6];
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 304);
          if (!v13)
            goto LABEL_37;
          v14 = *(_DWORD *)(a2 + 16);
          v15 = a1 + 304;
          do
          {
            v16 = *(_DWORD *)(v13 + 32);
            v17 = v16 >= v14;
            if (v16 >= v14)
              v18 = (uint64_t *)v13;
            else
              v18 = (uint64_t *)(v13 + 8);
            if (v17)
              v15 = v13;
            v13 = *v18;
          }
          while (*v18);
          if (v15 != a1 + 304 && *(_DWORD *)(v15 + 32) <= v14)
          {
            v19 = v15 + 40;
          }
          else
          {
LABEL_37:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 90, (uint64_t)"T_I_to_C", 8, (uint64_t)"Failed to find ItoC transform for camera source", 47, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_34;
            }
            v19 = 0;
          }
          *(_QWORD *)&v22 = v12;
          DWORD2(v22) = 0;
          v23 = v12 + 72;
          v24 = 0;
          v25 = v19;
          v26 = 0;
          v27 = v19 + 72;
          v28 = 0;
          v29 = a3;
          sub_20F287320(a1 + 1784, (uint64_t *)a2, a2, &v22);
          if ((v20 & 1) != 0
            || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 93, (uint64_t)"ret.second", 10, (uint64_t)"Duplicated pose ref. This should not happen", 43, (void (*)(void **))sub_21023DDB0))
          {
            return 1;
          }
LABEL_34:
          abort();
        }
      }
    }
  }
  return 0;
}

char *sub_20F286FF8(char **a1, uint64_t a2, char *a3)
{
  char *v3;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  _QWORD *v50;

  v3 = a3;
  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 4;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    v26 = ((uint64_t)(v6 - (_QWORD)v5) >> 4) + 1;
    if (v26 >> 60)
      sub_20E867F44();
    v27 = v10 - (_QWORD)v5;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
      v28 = 0xFFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    v50 = a1 + 2;
    if (v28)
    {
      if (v28 >> 60)
        sub_20E877A38();
      v29 = (char *)operator new(16 * v28);
    }
    else
    {
      v29 = 0;
    }
    v46 = v29;
    v47 = &v29[16 * v8];
    v48 = v47;
    v49 = &v29[16 * v28];
    sub_20F28767C(&v46, v3);
    v33 = v47;
    v34 = *a1;
    v35 = v47;
    if (*a1 != v9)
    {
      v35 = v47;
      v36 = v9;
      do
      {
        v37 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v35 - 1) = v37;
        v35 -= 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
      }
      while (v36 != v34);
    }
    v47 = v35;
    v38 = a1[1];
    v39 = v48;
    if (v38 != v9)
    {
      do
      {
        *(_OWORD *)v39 = *(_OWORD *)v9;
        v39 += 16;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        v9 += 16;
      }
      while (v9 != v38);
      v35 = v47;
      v9 = a1[1];
    }
    v40 = *a1;
    *a1 = v35;
    a1[1] = v39;
    v41 = a1[2];
    a1[2] = v49;
    v48 = v9;
    v49 = v41;
    v46 = v40;
    v47 = v40;
    if (v9 == v40)
    {
      if (!v9)
        return v33;
    }
    else
    {
      do
      {
        v48 = v9 - 16;
        v43 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(p_shared_owners);
          while (__stlxr(v45 - 1, p_shared_owners));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v9 = v48;
      }
      while (v48 != v40);
      v9 = v46;
      if (!v46)
        return v33;
    }
    operator delete(v9);
    return v33;
  }
  if (v9 == (char *)v6)
  {
    v30 = *(_OWORD *)a3;
    *(_OWORD *)v9 = *(_OWORD *)a3;
    if (*((_QWORD *)&v30 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    a1[1] = v9 + 16;
  }
  else
  {
    v11 = (char *)(v6 - 16);
    v12 = a1[1];
    if (v6 >= 0x10)
    {
      v13 = v6 - 16;
      v12 = a1[1];
      do
      {
        *(_OWORD *)v12 = *(_OWORD *)v13;
        v12 += 16;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        v13 += 16;
      }
      while (v13 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v9 + 16)
    {
      do
      {
        v22 = *((_OWORD *)v11 - 1);
        v11 -= 16;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        v23 = *(std::__shared_weak_count **)(v6 - 8);
        *(_OWORD *)(v6 - 16) = v22;
        v6 -= 16;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      while (v11 != v9);
    }
    if (v9 <= v3)
      v3 += 16 * (a1[1] > v3);
    v15 = *(_QWORD *)v3;
    v14 = *((_QWORD *)v3 + 1);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *(_QWORD *)v9 = v15;
    v18 = &v5[16 * v8];
    v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 1);
    *((_QWORD *)v18 + 1) = v14;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  return v9;
}

void sub_20F28730C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE67380((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20F287320(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  unint64_t v4;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v8 = *((_DWORD *)a2 + 4);
  v9 = *((_DWORD *)a2 + 2);
  v10 = v9 ^ __ROR4__(v8, 13);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v11 <= v10)
        v4 = v10 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v10;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        v15 = *a2;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v14 + 1);
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 8) == v8 && *((_QWORD *)v14 + 2) == v15 && *((_DWORD *)v14 + 6) == v9)
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_27;
          }
        }
        do
        {
          v16 = *((_QWORD *)v14 + 1);
          if (v16 == v10)
          {
            if (*((_DWORD *)v14 + 8) == v8 && *((_QWORD *)v14 + 2) == v15 && *((_DWORD *)v14 + 6) == v9)
              return v14;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_27:
  v14 = (char *)operator new(0x70uLL);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  v18 = *a4;
  *(_OWORD *)(v14 + 56) = a4[1];
  v19 = a4[3];
  *(_OWORD *)(v14 + 72) = a4[2];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v14 + 88) = v19;
  *((_QWORD *)v14 + 13) = *((_QWORD *)a4 + 8);
  *(_OWORD *)(v14 + 40) = v18;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    v10 = v4;
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_40;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10)
        v10 %= v11;
    }
    else
    {
      v10 = ((_DWORD)v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v30)
  {
    *(_QWORD *)v14 = *v30;
LABEL_63:
    *v30 = v14;
    goto LABEL_64;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v29 + 8 * v10) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20F287668(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F28767C(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_30;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 4;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-16 * v9];
    if (v6 != v4)
    {
      do
      {
        v12 = *(_OWORD *)v6;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 + 1);
        *(_OWORD *)v11 = v12;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v6 += 16;
        v11 += 16;
      }
      while (v6 != v4);
      v4 = a1[1];
    }
    a1[1] = &v4[16 * v10];
    a1[2] = v11;
    v4 = v11;
LABEL_30:
    v32 = a2[1];
    *(_QWORD *)v4 = *a2;
    *((_QWORD *)v4 + 1) = v32;
    if (!v32)
      goto LABEL_34;
    goto LABEL_31;
  }
  v16 = (v4 - v5) >> 3;
  if (v4 == v5)
    v16 = 1;
  if (v16 >> 60)
    sub_20E877A38();
  v17 = v16 >> 2;
  v18 = 16 * v16;
  v19 = (char *)operator new(16 * v16);
  v20 = &v19[16 * v17];
  v21 = &v19[v18];
  v22 = v4 - v6;
  if (v4 == v6)
  {
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v20;
    a1[3] = v21;
  }
  else
  {
    v23 = v22 >> 4;
    v24 = &v20[v22 & 0xFFFFFFFFFFFFFFF0];
    v25 = 16 * v17;
    v26 = 16 * v23;
    do
    {
      *(_OWORD *)&v19[v25] = *(_OWORD *)v6;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v6 += 16;
      v25 += 16;
      v26 -= 16;
    }
    while (v26);
    v5 = *a1;
    v27 = a1[1];
    v28 = a1[2];
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v24;
    a1[3] = v21;
    while (v28 != v27)
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)v28 - 1);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v28 -= 16;
    }
  }
  if (v5)
    operator delete(v5);
  v4 = a1[2];
  v32 = a2[1];
  *(_QWORD *)v4 = *a2;
  *((_QWORD *)v4 + 1) = v32;
  if (v32)
  {
LABEL_31:
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v4 = a1[2];
  }
LABEL_34:
  a1[2] = v4 + 16;
}

void sub_20F287870(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F287880(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2878B0(uint64_t a1)
{
  return sub_20E990C88(a1 + 24);
}

uint64_t sub_20F2878BC(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_BYTE *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_BYTE *)(a1 + 608) = 0;
  sub_20F287ACC(a1, a2);
  return a1;
}

void sub_20F2879AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14)
{
  void **v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  uint64_t *v21;
  char **v22;
  char **v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v24 = *v20;
  if (*v20)
  {
    v15[83] = v24;
    operator delete(v24);
    v25 = *v19;
    if (!*v19)
    {
LABEL_3:
      v26 = (void *)v15[72];
      if (!v26)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v25 = *v19;
    if (!*v19)
      goto LABEL_3;
  }
  v15[78] = v25;
  operator delete(v25);
  v26 = (void *)v15[72];
  if (!v26)
  {
LABEL_4:
    v27 = (void *)v15[69];
    if (!v27)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v15[73] = v26;
  operator delete(v26);
  v27 = (void *)v15[69];
  if (!v27)
  {
LABEL_5:
    v28 = *v14;
    if (!*v14)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_14:
  v15[70] = v27;
  operator delete(v27);
  v28 = *v14;
  if (!*v14)
  {
LABEL_7:
    sub_20F287CFC(v23);
    sub_20F287CFC(v22);
    sub_20F287D84(a14);
    sub_20F287D84(v17);
    v29 = (void *)v15[9];
    if (v29)
    {
      v15[10] = v29;
      operator delete(v29);
      sub_20E86665C(v18);
      v30 = *v16;
      *v16 = 0;
      if (!v30)
      {
LABEL_9:
        v31 = *v21;
        *v21 = 0;
        if (!v31)
          goto LABEL_10;
        goto LABEL_18;
      }
    }
    else
    {
      sub_20E86665C(v18);
      v30 = *v16;
      *v16 = 0;
      if (!v30)
        goto LABEL_9;
    }
    sub_20E8E931C((uint64_t)v16, v30);
    v31 = *v21;
    *v21 = 0;
    if (!v31)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_18:
    sub_20E8E931C((uint64_t)v21, v31);
    _Unwind_Resume(a1);
  }
LABEL_6:
  v15[67] = v28;
  operator delete(v28);
  goto LABEL_7;
}

uint64_t sub_20F287ACC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if ((__int128 *)a1 == a2)
    return a1;
  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 3);
  if (v5)
  {
    v6 = operator new();
    sub_20E972DB4(v6, v5);
    memcpy((void *)(v6 + 1000), (const void *)(v5 + 1000), 0x1B8uLL);
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    if (v7)
      sub_20E8E931C(a1 + 24, v7);
  }
  v8 = *((_QWORD *)a2 + 4);
  if (v8)
  {
    v9 = operator new();
    sub_20E972DB4(v9, v8);
    memcpy((void *)(v9 + 1000), (const void *)(v8 + 1000), 0x1B8uLL);
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v9;
    if (v10)
      sub_20E8E931C(a1 + 32, v10);
  }
  sub_20EE6BAB0(a1 + 72, *((_QWORD *)a2 + 12));
  sub_20EE6BBB4((char **)(a1 + 72), *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  sub_20EE6B810(a1 + 576, (uint64_t)(a2 + 36));
  sub_20EE6B810(a1 + 616, (uint64_t)a2 + 616);
  sub_20EE6B930(a1 + 656, (uint64_t)(a2 + 41));
  *(_BYTE *)(a1 + 736) = *((_BYTE *)a2 + 736);
  v12 = *(__int128 *)((char *)a2 + 696);
  v11 = *(__int128 *)((char *)a2 + 712);
  *(_QWORD *)(a1 + 728) = *((_QWORD *)a2 + 91);
  *(_OWORD *)(a1 + 696) = v12;
  *(_OWORD *)(a1 + 712) = v11;
  *(_BYTE *)(a1 + 736) = *((_BYTE *)a2 + 736);
  sub_20F287DD4(a1, (char **)a2 + 66);
  sub_20EDCEA70((_QWORD *)(a1 + 552), *((char **)a2 + 69), *((char **)a2 + 70), (uint64_t)(*((_QWORD *)a2 + 70) - *((_QWORD *)a2 + 69)) >> 2);
  v13 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v13;
  v15 = *((_QWORD *)a2 + 7);
  v14 = *((_QWORD *)a2 + 8);
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v14;
  if (!v18)
    return a1;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20F287CD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1000C408CB30F5BLL);
  _Unwind_Resume(a1);
}

char **sub_20F287CFC(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (void *)*((_QWORD *)v3 - 4);
          if (v5)
          {
            *((_QWORD *)v3 - 3) = v5;
            operator delete(v5);
          }
          v6 = (void *)*((_QWORD *)v3 - 7);
          if (v6)
          {
            *((_QWORD *)v3 - 6) = v6;
            operator delete(v6);
          }
          v3 -= 64;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_20F287D84(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 168))
  {
    sub_20E990EA4((uint64_t *)(a1 + 120));
    v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(_QWORD *)(a1 + 104) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      *(_QWORD *)(a1 + 24) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_20F287DD4(uint64_t a1, char **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20EDCEA70((_QWORD *)(a1 + 528), *a2, a2[1], (a2[1] - *a2) >> 2);
  if (*(_BYTE *)(a1 + 280))
  {
    sub_20E990EA4((uint64_t *)(a1 + 232));
    v3 = *(void **)(a1 + 208);
    if (v3)
    {
      *(_QWORD *)(a1 + 216) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)(a1 + 136) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (*(_BYTE *)(a1 + 456))
  {
    sub_20E990EA4((uint64_t *)(a1 + 408));
    v5 = *(void **)(a1 + 384);
    if (v5)
    {
      *(_QWORD *)(a1 + 392) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 304);
    if (v6)
    {
      *(_QWORD *)(a1 + 312) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 456) = 0;
  }
}

char *sub_20F287E70(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  char **v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  char *v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a3;
  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = a3;
  v6 = a1[25];
  v7 = (char *)a1[26];
  v5 = (char **)(a1 + 25);
  if (v7 != (char *)v6)
  {
    v8 = (uint64_t)&v7[-v6] >> 5;
    while (1)
    {
      v9 = v8 >> 1;
      v10 = v6 + 32 * (v8 >> 1);
      v11 = *(_DWORD *)(v10 + 16);
      v12 = v11 >= v17;
      if (v11 != (_DWORD)v17)
        goto LABEL_9;
      if (*(_QWORD *)v10 >= (unint64_t)v16)
        break;
LABEL_3:
      v6 = v10 + 32;
      v9 = v8 + ~v9;
LABEL_4:
      v8 = v9;
      if (!v9)
        goto LABEL_12;
    }
    if (*(_QWORD *)v10 != (_QWORD)v16)
      goto LABEL_4;
    v12 = *(_DWORD *)(v10 + 8) >= DWORD2(v16);
LABEL_9:
    if (v12)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if ((char *)v6 == v7
    || *(_DWORD *)(v6 + 16) != *((_DWORD *)a2 + 4)
    || *(_QWORD *)v6 != *(_QWORD *)a2
    || (v13 = v7, *(_DWORD *)(v6 + 8) != *((_DWORD *)a2 + 2)))
  {
    v13 = sub_20F287F84(v5, (char *)v6, &v16);
    v7 = (char *)a1[26];
  }
  if (v7 != v13)
    sub_20EE6BDF0(a1, (uint64_t *)a2, (uint64_t)&v15);
  return v13;
}

char *sub_20F287F84(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  int64_t v32;
  char *v33;
  __int128 v35;
  __int128 v36;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      v23 = a3[1];
      *(_OWORD *)v8 = *a3;
      *((_OWORD *)v8 + 1) = v23;
      a1[1] = v8 + 32;
    }
    else
    {
      v35 = *a3;
      v36 = a3[1];
      v10 = v8 + 32;
      v11 = (__int128 *)(v5 - 32);
      v12 = a1[1];
      if (v5 >= 0x20)
      {
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v11 += 2;
          *(_OWORD *)v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12 += 32;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10)
        memmove((void *)(v5 - 32 * ((uint64_t)(v5 - (_QWORD)v10) >> 5)), v8, v5 - (_QWORD)v10);
      *(_OWORD *)v8 = v35;
      *((_OWORD *)v8 + 1) = v36;
    }
    return v8;
  }
  v15 = ((uint64_t)(v5 - (_QWORD)v6) >> 5) + 1;
  if (v15 >> 59)
    sub_20E867F44();
  v17 = v9 - (_QWORD)v6;
  if (v17 >> 4 > v15)
    v15 = v17 >> 4;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
    v18 = 0x7FFFFFFFFFFFFFFLL;
  else
    v18 = v15;
  if (v18)
  {
    if (v18 >> 59)
      sub_20E877A38();
    v19 = (char *)operator new(32 * v18);
    v20 = v7 >> 5;
    v21 = &v19[32 * (v7 >> 5)];
    v22 = &v19[32 * v18];
    if (v7 >> 5 != v18)
      goto LABEL_31;
    goto LABEL_20;
  }
  v19 = 0;
  v20 = v7 >> 5;
  v21 = (char *)(32 * (v7 >> 5));
  v22 = 0;
  if (!(v7 >> 5))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2)
        v25 = 1;
      else
        v25 = v7 >> 4;
      if (v25 >> 59)
        sub_20E877A38();
      v21 = (char *)operator new(32 * v25);
      v22 = &v21[32 * v25];
      if (v19)
      {
        operator delete(v19);
        v6 = *a1;
      }
    }
    else
    {
      if (v20 >= -1)
        v24 = v20 + 1;
      else
        v24 = v20 + 2;
      v21 -= 32 * (v24 >> 1);
    }
  }
LABEL_31:
  v26 = a3[1];
  *(_OWORD *)v21 = *a3;
  *((_OWORD *)v21 + 1) = v26;
  v27 = v21;
  if (v6 != v8)
  {
    v28 = v8;
    v29 = v21;
    do
    {
      v30 = *((_OWORD *)v28 - 1);
      v27 = v29 - 32;
      *((_OWORD *)v29 - 2) = *((_OWORD *)v28 - 2);
      *((_OWORD *)v29 - 1) = v30;
      v28 -= 32;
      v29 -= 32;
    }
    while (v28 != v6);
  }
  v31 = a1[1];
  v32 = v31 - v8;
  if (v31 != v8)
    memmove(v21 + 32, v8, v31 - v8);
  v33 = *a1;
  *a1 = v27;
  a1[1] = &v21[v32 + 32];
  a1[2] = v22;
  if (v33)
    operator delete(v33);
  return v21;
}

void sub_20F2881C0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F2881D8(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  void *v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    sub_20E867F44();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 5 > v4)
    v4 = v5 >> 5;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 58)
    sub_20E877A38();
  v9 = v7 << 6;
  v10 = (char *)operator new(v7 << 6);
  v11 = *(_OWORD *)(a2 + 16);
  v12 = &v10[64 * v3];
  v13 = &v10[v9];
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_OWORD *)v12 + 1) = v11;
  *(_QWORD *)(v12 + 29) = *(_QWORD *)(a2 + 29);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v12 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v14 = v12 + 64;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v17 = *((_OWORD *)v16 - 4);
      v18 = *((_OWORD *)v16 - 3);
      *(_QWORD *)(v12 - 35) = *(_QWORD *)(v16 - 35);
      *((_OWORD *)v12 - 4) = v17;
      *((_OWORD *)v12 - 3) = v18;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(v16 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v16 - 1);
      v12 -= 64;
      *((_QWORD *)v16 - 3) = 0;
      *((_QWORD *)v16 - 2) = 0;
      *((_QWORD *)v16 - 1) = 0;
      v16 -= 64;
    }
    while (v16 != v15);
    v16 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v19 != v16)
    {
      v20 = (void *)*((_QWORD *)v19 - 3);
      if (v20)
      {
        *((_QWORD *)v19 - 2) = v20;
        operator delete(v20);
      }
      v19 -= 64;
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

BOOL sub_20F288320(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  void *v17;
  const char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  int v31;
  _QWORD v32[3];
  int v33;
  const char *v34;
  int v35;
  const char *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  void *__p;
  void *v41[2];
  unint64_t v42;
  char v43;
  void *v44[2];
  unint64_t v45;
  char v46;

  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != a1[73] - a1[72]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 271, (uint64_t)"ml_descriptors.size() == descriptors_.size()", 44, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_57;
  }
  v4 = a1[77];
  v5 = a1[78];
  if (v4 != v5)
  {
    if (v5 - v4 == a1[73] - a1[72]
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 274, (uint64_t)"ml_descriptors_.size() == descriptors_.size()", 45, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      sub_20F27AFA0(&v39);
      if (**(int **)(v39 + 56) > 3)
        return v4 == v5;
      v6 = *(unsigned __int8 *)(v39 + 72);
      v7 = sub_20E8C31DC(v39, "OSLogSurrogateAppender", 1, 0);
      v8 = v7 ? v7 + 16 : 0;
      if (!v6 && v7 == 0)
        return v4 == v5;
      v32[0] = &v39;
      v32[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v32[2] = std::chrono::system_clock::now().__d_.__rep_;
      v33 = 3;
      v34 = "unknown file";
      v35 = 275;
      v37 = 0;
      v38 = 0;
      v36 = "unknown function";
      v10 = (uint64_t *)(v39 + 16);
      if (*(char *)(v39 + 39) < 0)
      {
        v12 = *(const char **)(v39 + 16);
        v11 = *(_QWORD *)(v39 + 24);
        v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v14 & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        v11 = *(unsigned __int8 *)(v39 + 39);
        v12 = (const char *)(*(_QWORD *)v32[0] + 16);
        v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v13 & 1) != 0)
          goto LABEL_20;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&__p);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
        if ((_BYTE)v42 && SHIBYTE(v41[1]) < 0)
          operator delete(__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_20:
      if (byte_254A4A50F >= 0)
        v15 = (const char *)&xmmword_254A4A4F8;
      else
        v15 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v16 = byte_254A4A50F;
      else
        v16 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      __p = os_log_create(v15, v12);
      v17 = v41;
      if (v16 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v16 >= 0x17)
      {
        v31 = v6;
        v18 = v12;
        v19 = v10;
        v20 = v8;
        v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v21 = v16 | 7;
        v22 = v21 + 1;
        v17 = operator new(v21 + 1);
        v41[1] = (void *)v16;
        v42 = v22 | 0x8000000000000000;
        v41[0] = v17;
        v8 = v20;
        v10 = v19;
        v12 = v18;
        v6 = v31;
      }
      else
      {
        HIBYTE(v42) = v16;
        if (!v16)
        {
LABEL_34:
          *((_BYTE *)v17 + v16) = 0;
          v43 = 1;
          v23 = v44;
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v11 >= 0x17)
          {
            v24 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v24 = v11 | 7;
            v25 = v24 + 1;
            v23 = operator new(v24 + 1);
            v44[1] = (void *)v11;
            v45 = v25 | 0x8000000000000000;
            v44[0] = v23;
          }
          else
          {
            HIBYTE(v45) = v11;
            if (!v11)
              goto LABEL_42;
          }
          memmove(v23, v12, v11);
LABEL_42:
          *((_BYTE *)v23 + v11) = 0;
          v46 = 1;
          v26 = __p;
          if (SHIBYTE(v45) < 0)
            operator delete(v44[0]);
          if (v43 && SHIBYTE(v42) < 0)
            operator delete(v41[0]);
          if (__p)
            os_release(__p);
          sub_20F288890((int)&__p, v8, v10, v26, OS_LOG_TYPE_INFO);
          if (v6)
          {
            sub_20E8C003C((uint64_t)v32, "Frame already contains ML descriptors.");
            sub_20E863570((uint64_t)v32);
          }
          sub_20E863570((uint64_t)v32);
          v27 = v38;
          if (v38)
          {
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          return v4 == v5;
        }
      }
      memmove(v17, v15, v16);
      goto LABEL_34;
    }
LABEL_57:
    abort();
  }
  __p = *(void **)a2;
  *(_OWORD *)v41 = *(_OWORD *)(a2 + 8);
  v42 = ((char *)v41[0] - (char *)__p) >> 6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v43 = 1;
  sub_20EE6B810((uint64_t)(a1 + 77), (uint64_t)&__p);
  if (__p)
  {
    v41[0] = __p;
    operator delete(__p);
  }
  return v4 == v5;
}

void sub_20F2887C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F28880C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F288824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F28886C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F288890(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F288C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F288C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F288C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F288C80(float *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _QWORD *v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  _QWORD *v41;
  unint64_t v42;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v12 = operator new(0x228uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(_QWORD *)(a3 + 16);
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v8 = v3;
    v18 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v19)
      goto LABEL_89;
LABEL_77:
    *v12 = *v19;
LABEL_95:
    *v19 = v12;
    goto LABEL_96;
  }
  v20 = 1;
  if (v9 >= 3)
    v20 = (v9 & (v9 - 1)) != 0;
  v21 = v20 | (2 * v9);
  v22 = vcvtps_u32_f32(v16 / v17);
  if (v21 <= v22)
    prime = v22;
  else
    prime = v21;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *((_QWORD *)a1 + 1);
  }
  if (prime > v9)
  {
LABEL_41:
    if (prime >> 61)
      sub_20E877A38();
    v24 = operator new(8 * prime);
    v25 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v24;
    if (v25)
      operator delete(v25);
    v26 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
    while (prime != v26);
    v28 = (uint64_t *)(a1 + 4);
    v27 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v27)
      goto LABEL_73;
    v29 = v27[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v28;
      for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
      {
        v33 = i[1] & v30;
        if (v33 == v31)
        {
          v27 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
        {
          *v27 = *i;
          v34 = 8 * v33;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v34);
          **(_QWORD **)(*(_QWORD *)a1 + v34) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v27;
          v27 = i;
          v31 = v33;
        }
      }
      goto LABEL_73;
    }
    if (v29 >= prime)
      v29 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v28;
    v38 = (_QWORD *)*v27;
    if (!*v27)
    {
LABEL_73:
      v9 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_74;
LABEL_88:
      v8 = ((_DWORD)v9 - 1) & v8;
      v18 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
      if (!v19)
        goto LABEL_89;
      goto LABEL_77;
    }
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 == v29)
        goto LABEL_67;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
      {
        *v27 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)(*(_QWORD *)a1 + v39);
        **(_QWORD **)(*(_QWORD *)a1 + v39) = v38;
        v38 = v27;
LABEL_67:
        v27 = v38;
        v38 = (_QWORD *)*v38;
        if (!v38)
          goto LABEL_73;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v27;
        v27 = v38;
        v38 = (_QWORD *)*v38;
        v29 = v40;
        if (!v38)
          goto LABEL_73;
      }
    }
  }
  if (prime < v9)
  {
    v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v9 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
    {
      v35 = std::__next_prime(v35);
    }
    else
    {
      v37 = 1 << -(char)__clz(v35 - 1);
      if (v35 >= 2)
        v35 = v37;
    }
    if (prime <= v35)
      prime = v35;
    if (prime < v9)
    {
      if (!prime)
      {
        v41 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_88;
      }
      goto LABEL_41;
    }
    v9 = *((_QWORD *)a1 + 1);
  }
  if ((v9 & (v9 - 1)) == 0)
    goto LABEL_88;
LABEL_74:
  if (v9 <= v8)
    v8 %= v9;
  v18 = *(_QWORD **)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
    goto LABEL_77;
LABEL_89:
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v18[v8] = a1 + 4;
  if (*v12)
  {
    v42 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9)
        v42 %= v9;
    }
    else
    {
      v42 &= v9 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_95;
  }
LABEL_96:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_20F289150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20F289164(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  char **v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *i;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  void *v23;
  const char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  int v36;
  _QWORD v37[3];
  int v38;
  const char *v39;
  int v40;
  const char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  void *object;
  void *v46;
  size_t v47;
  unint64_t v48;
  char v49;
  void *__p[2];
  unint64_t v51;
  char v52;

  if ((uint64_t)(a2[1] - *a2) >> 3 != (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 286, (uint64_t)"ml_semantics.size() == descriptors_.size()", 42, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_61;
  }
  v4 = *(_BYTE **)(a1 + 656);
  v5 = *(_BYTE **)(a1 + 664);
  if (v4 != v5)
  {
    if ((v5 - v4) >> 3 == (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 6
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 289, (uint64_t)"ml_semantics_.size() == descriptors_.size()", 43, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      sub_20F27AFA0(&v44);
      if (**(int **)(v44 + 56) > 3)
        return v4 == v5;
      v6 = *(unsigned __int8 *)(v44 + 72);
      v7 = sub_20E8C31DC(v44, "OSLogSurrogateAppender", 1, 0);
      v8 = v7 ? v7 + 16 : 0;
      if (!v6 && !v7)
        return v4 == v5;
      v37[0] = &v44;
      v37[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v37[2] = std::chrono::system_clock::now().__d_.__rep_;
      v38 = 3;
      v39 = "unknown file";
      v40 = 290;
      v42 = 0;
      v43 = 0;
      v41 = "unknown function";
      v9 = (uint64_t *)(v44 + 16);
      if (*(char *)(v44 + 39) < 0)
      {
        v11 = *(const char **)(v44 + 16);
        v10 = *(_QWORD *)(v44 + 24);
        v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v20 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v44 + 39);
        v11 = (const char *)(*(_QWORD *)v37[0] + 16);
        v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v12 & 1) != 0)
          goto LABEL_25;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v48 && SHIBYTE(v47) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_25:
      if (byte_254A4A50F >= 0)
        v21 = (const char *)&xmmword_254A4A4F8;
      else
        v21 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v22 = byte_254A4A50F;
      else
        v22 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object = os_log_create(v21, v11);
      v23 = &v46;
      if (v22 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v22 >= 0x17)
      {
        v36 = v6;
        v24 = v11;
        v25 = v9;
        v26 = v8;
        v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v27 = v22 | 7;
        v28 = v27 + 1;
        v23 = operator new(v27 + 1);
        v47 = v22;
        v48 = v28 | 0x8000000000000000;
        v46 = v23;
        v8 = v26;
        v9 = v25;
        v11 = v24;
        v6 = v36;
      }
      else
      {
        HIBYTE(v48) = v22;
        if (!v22)
        {
LABEL_39:
          *((_BYTE *)v23 + v22) = 0;
          v49 = 1;
          v29 = __p;
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v10 >= 0x17)
          {
            v30 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v30 = v10 | 7;
            v31 = v30 + 1;
            v29 = operator new(v30 + 1);
            __p[1] = (void *)v10;
            v51 = v31 | 0x8000000000000000;
            __p[0] = v29;
          }
          else
          {
            HIBYTE(v51) = v10;
            if (!v10)
              goto LABEL_47;
          }
          memmove(v29, v11, v10);
LABEL_47:
          *((_BYTE *)v29 + v10) = 0;
          v52 = 1;
          v32 = object;
          if (SHIBYTE(v51) < 0)
            operator delete(__p[0]);
          if (v49 && SHIBYTE(v48) < 0)
            operator delete(v46);
          if (object)
            os_release(object);
          sub_20F289868((int)&object, v8, v9, v32, OS_LOG_TYPE_INFO);
          if (v6)
          {
            sub_20E8C003C((uint64_t)v37, "Frame already contains ML semantics.");
            sub_20E863570((uint64_t)v37);
          }
          sub_20E863570((uint64_t)v37);
          v33 = v43;
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          return v4 == v5;
        }
      }
      memmove(v23, v21, v22);
      goto LABEL_39;
    }
LABEL_61:
    abort();
  }
  v13 = (char **)(a1 + 656);
  v14 = a2[1] - *a2;
  v15 = v14 >> 3;
  if (*(_BYTE *)(a1 + 688))
  {
    *(_QWORD *)(a1 + 664) = v4;
    *(_BYTE *)(a1 + 688) = 0;
  }
  *(_QWORD *)(a1 + 680) = v15;
  if (v15 > (uint64_t)(*(_QWORD *)(a1 + 672) - (_QWORD)v4) >> 3)
  {
    if (v14 < 0)
      sub_20E867F44();
    v16 = (char *)operator new(v14);
    *(_QWORD *)(a1 + 656) = v16;
    *(_QWORD *)(a1 + 664) = v16;
    *(_QWORD *)(a1 + 672) = &v16[8 * v15];
    if (v4)
      operator delete(v4);
  }
  *(_BYTE *)(a1 + 688) = 1;
  v17 = (_QWORD *)*a2;
  for (i = (_QWORD *)a2[1]; v17 != i; ++v17)
    sub_20F2896F0(v13, v17);
  return v4 == v5;
}

void sub_20F28964C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F289694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2896AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

char *sub_20F2896F0(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  if (v4 >> 3 < (unint64_t)a1[3])
  {
    v8 = (unint64_t)a1[2];
    if ((unint64_t)v2 >= v8)
    {
      v10 = v5 + 1;
      if ((unint64_t)(v5 + 1) >> 61)
        sub_20E867F44();
      v11 = v8 - (_QWORD)v3;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_20E877A38();
        v13 = operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v5];
      *(_QWORD *)v14 = *a2;
      v9 = v14 + 8;
      if (v2 != v3)
      {
        v15 = v2 - v3 - 8;
        if (v15 < 0x58)
          goto LABEL_30;
        if ((unint64_t)(v2 - &v13[v4]) < 0x20)
          goto LABEL_30;
        v16 = (v15 >> 3) + 1;
        v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
        v18 = &v2[-v17];
        v14 -= v17;
        v19 = &v13[8 * v5 - 16];
        v20 = v2 - 16;
        v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v2 = v18;
        if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            v23 = *((_QWORD *)v2 - 1);
            v2 -= 8;
            *((_QWORD *)v14 - 1) = v23;
            v14 -= 8;
          }
          while (v2 != v3);
        }
        v2 = *a1;
      }
      *a1 = v14;
      a1[1] = v9;
      a1[2] = &v13[8 * v12];
      if (v2)
        operator delete(v2);
    }
    else
    {
      *(_QWORD *)v2 = *a2;
      v9 = v2 + 8;
    }
    a1[1] = v9;
    return v9 - 8;
  }
  return v2;
}

uint64_t sub_20F289868(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F289BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F289C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F289C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F289C58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  result = sub_20E9DF85C((_QWORD *)(a1 + 24), a2);
  if (!result)
    goto LABEL_22;
  v7 = (int8x8_t)result[6];
  if (!*(_QWORD *)&v7)
    goto LABEL_22;
  v8 = *a3;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a3;
    if (*(_QWORD *)&v7 <= v8)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (v7.i32[0] - 1) & v8;
  }
  v11 = *(uint64_t ***)(result[5] + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_22:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == v8)
      {
        if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
          goto LABEL_24;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_22;
      }
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v14 == v8)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_22;
LABEL_12:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_22;
  }
  if (*((_DWORD *)v12 + 4) != (_DWORD)v8)
    goto LABEL_12;
LABEL_24:
  v16 = v12[4];
  *a4 = v12[3];
  a4[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return result;
}

void sub_20F289D80(uint64_t **a1@<X0>, int8x8_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  unint64_t v38;
  int v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  _OWORD *v46;
  uint64_t *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  __int16 *v52;
  __int128 v53;
  __int128 v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int16 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char **v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  BOOL v74;
  int v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  int8x8_t v98;
  unint64_t v99;
  uint8x8_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t *v122;
  unsigned int v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  __int128 v132;
  __int16 v133;
  __int16 v134;
  char v135;
  char v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  __int16 v142;
  char v143;
  char v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE v149[32];
  int v150;
  _BYTE v151[21];
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 1;
  v9 = a1 + 1;
  v11 = a3 + 8;
  v10 = *(uint64_t **)(a3 + 8);
  v12 = *(_DWORD *)(a3 + 16);
  v13 = v10 == (uint64_t *)-1 && v12 == -1;
  v14 = !v13;
  if (v13)
    goto LABEL_20;
  v15 = (uint64_t)*v9;
  if (!*v9)
    goto LABEL_20;
  v16 = a1 + 1;
  do
  {
    v17 = *(_QWORD *)(v15 + 32);
    if (v17 < (unint64_t)v10)
    {
      v15 += 8;
    }
    else if ((uint64_t *)v17 == v10)
    {
      if (*(_DWORD *)(v15 + 40) < v12)
        v15 += 8;
      else
        v16 = (uint64_t **)v15;
    }
    else
    {
      v16 = (uint64_t **)v15;
    }
    v15 = *(_QWORD *)v15;
  }
  while (v15);
  if (v16 == v8 || (v18 = v16[4], v10 < v18) || v10 == v18 && v12 < *((_DWORD *)v16 + 10))
  {
LABEL_20:
    v19 = a2[6];
    if (v19)
    {
      v20 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
      v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
        if (*(_QWORD *)&v19 <= v20)
          v22 = v20 % *(_QWORD *)&v19;
      }
      else
      {
        v22 = (v19.i32[0] - 1) & v20;
      }
      v23 = *(uint64_t ***)(*(_QWORD *)&a2[5] + 8 * v22);
      if (v23)
      {
        v24 = *v23;
        if (v24)
        {
          if (v21.u32[0] < 2uLL)
          {
            v25 = *(_QWORD *)&v19 - 1;
            while (1)
            {
              v27 = v24[1];
              if (v27 == v20)
              {
                if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
                  goto LABEL_140;
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_40;
              }
              v24 = (uint64_t *)*v24;
              if (!v24)
                goto LABEL_40;
            }
          }
          do
          {
            v26 = v24[1];
            if (v26 == v20)
            {
              if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
              {
LABEL_140:
                v102 = v24[3];
                v103 = v24[4];
                if (v103)
                {
                  v104 = (unint64_t *)(v103 + 8);
                  do
                    v105 = __ldxr(v104);
                  while (__stxr(v105 + 1, v104));
                }
                if (!*(_BYTE *)(v102 + 192))
                {
                  v106 = *(_QWORD *)(a3 + 32);
                  if (v106)
                  {
                    v146 = *(_OWORD *)(v106 + 32);
                    v148 = *(_QWORD *)(v106 + 48);
                    v142 = *(_WORD *)(v106 + 56);
                    v144 = *(_BYTE *)(v106 + 58);
                    *(_OWORD *)&v151[5] = *(_OWORD *)(v106 + 64);
                    v152 = *(_QWORD *)(v106 + 80);
                    v140 = *(_QWORD *)(v106 + 104);
                    v138 = *(_OWORD *)(v106 + 88);
                    v107 = *(_OWORD *)(v106 + 112);
                    v108 = *(_OWORD *)(v106 + 128);
                    v150 = *(_DWORD *)(v106 + 144);
                    *(_OWORD *)v149 = v107;
                    *(_OWORD *)&v149[16] = v108;
                    v136 = *(_BYTE *)(v106 + 150);
                    v134 = *(_WORD *)(v106 + 148);
                    v109 = *(_OWORD *)(v106 + 8);
                    *(_QWORD *)(v102 + 64) = *(_QWORD *)(v106 + 24);
                    *(_OWORD *)(v102 + 48) = v109;
                    *(_OWORD *)(v102 + 72) = v146;
                    *(_QWORD *)(v102 + 88) = v148;
                    *(_WORD *)(v102 + 96) = v142;
                    *(_BYTE *)(v102 + 98) = v144;
                    *(_OWORD *)(v102 + 104) = *(_OWORD *)&v151[5];
                    *(_QWORD *)(v102 + 120) = v152;
                    *(_QWORD *)(v102 + 144) = v140;
                    *(_OWORD *)(v102 + 128) = v138;
                    *(_QWORD *)(v102 + 40) = &off_24C9FC600;
                    v110 = *(_OWORD *)v149;
                    v111 = *(_OWORD *)&v149[16];
                    *(_DWORD *)(v102 + 184) = v150;
                    *(_OWORD *)(v102 + 168) = v111;
                    *(_OWORD *)(v102 + 152) = v110;
                    *(_BYTE *)(v102 + 190) = v136;
                    *(_WORD *)(v102 + 188) = v134;
                    *(_BYTE *)(v102 + 192) = 1;
                  }
                }
                *a4 = (uint64_t *)v102;
                a4[1] = (uint64_t *)v103;
                return;
              }
            }
            else
            {
              if (v26 >= *(_QWORD *)&v19)
                v26 %= *(_QWORD *)&v19;
              if (v26 != v22)
                break;
            }
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_40:
    v28 = a1[9];
    if (v28)
    {
      sub_20F28B3A8(v28, (std::__shared_weak_count_vtbl **)v149);
      v29 = *(_QWORD *)v149;
      *(_QWORD *)(*(_QWORD *)v149 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_DWORD *)(v29 + 32) = 0;
      if (*(_BYTE *)(v29 + 192))
        *(_BYTE *)(v29 + 192) = 0;
      *(_QWORD *)(v29 + 208) = *(_QWORD *)(v29 + 200);
      *(_DWORD *)(v29 + 224) = 0;
      v30 = *(std::__shared_weak_count **)&v149[8];
      *(_QWORD *)&v132 = v29;
      *((_QWORD *)&v132 + 1) = *(_QWORD *)&v149[8];
      *(_QWORD *)(v29 + 16) = a1 + 3;
      if (v14)
      {
LABEL_44:
        v31 = *(_QWORD *)v11;
        *(_DWORD *)(v29 + 32) = *(_DWORD *)(v11 + 8);
        *(_QWORD *)(v29 + 24) = v31;
        v32 = *(_QWORD *)(v29 + 32);
        *(_QWORD *)v149 = v31;
        *(_QWORD *)&v149[8] = v32;
        *(_QWORD *)&v149[16] = v29;
        *(_QWORD *)&v149[24] = v30;
        if (!v30)
          goto LABEL_59;
        goto LABEL_57;
      }
    }
    else
    {
      v33 = operator new();
      *(_BYTE *)(v33 + 40) = 0;
      *(_BYTE *)(v33 + 192) = 0;
      *(_OWORD *)v33 = 0u;
      *(_OWORD *)(v33 + 16) = 0u;
      *(_DWORD *)(v33 + 32) = 0;
      *(_QWORD *)(v33 + 208) = 0;
      *(_QWORD *)(v33 + 216) = 0;
      *(_QWORD *)(v33 + 200) = 0;
      *(_DWORD *)(v33 + 224) = 0;
      sub_20F28BDA0((std::__shared_weak_count_vtbl **)v149, (std::__shared_weak_count_vtbl *)v33);
      v30 = *(std::__shared_weak_count **)&v149[8];
      v29 = *(_QWORD *)v149;
      v132 = *(_OWORD *)v149;
      *(_QWORD *)(*(_QWORD *)v149 + 16) = a1 + 3;
      if (v14)
        goto LABEL_44;
    }
    v34 = a1[2];
    if (v34)
    {
      v35 = (uint64_t)*v9;
      if (*v9)
      {
        do
        {
          v36 = v35;
          v35 = *(_QWORD *)(v35 + 8);
        }
        while (v35);
      }
      else
      {
        v37 = v9;
        do
        {
          v36 = (uint64_t)v37[2];
          v13 = *(_QWORD *)v36 == (_QWORD)v37;
          v37 = (uint64_t **)v36;
        }
        while (v13);
      }
      v38 = *(unsigned int *)(v36 + 40);
      if ((unint64_t)v34 >= v38)
        LODWORD(v34) = v38;
      else
        LODWORD(v34) = 0;
    }
    *(int8x8_t *)v149 = a2[2];
    *(_DWORD *)&v149[8] = (_DWORD)v34;
    v31 = sub_20F25BF64((uint64_t)a1, (unint64_t *)v149);
    *(_QWORD *)(v29 + 24) = v31;
    *(_DWORD *)(v29 + 32) = v39;
    v32 = *(_QWORD *)(v29 + 32);
    *(_QWORD *)v149 = v31;
    *(_QWORD *)&v149[8] = v32;
    *(_QWORD *)&v149[16] = v29;
    *(_QWORD *)&v149[24] = v30;
    if (!v30)
    {
LABEL_59:
      v42 = (uint64_t)*v9;
      v43 = (uint64_t)v9;
      if (!*v9)
        goto LABEL_70;
      while (1)
      {
        v43 = v42;
        v44 = *(_QWORD *)(v42 + 32);
        if (v31 < v44)
          goto LABEL_61;
        if (v31 != v44)
        {
          if (v44 >= v31)
            goto LABEL_73;
          goto LABEL_68;
        }
        v45 = *(_DWORD *)(v43 + 40);
        if (v45 > v32)
        {
LABEL_61:
          v42 = *(_QWORD *)v43;
          v9 = (uint64_t **)v43;
          if (!*(_QWORD *)v43)
            goto LABEL_70;
        }
        else
        {
          if (v45 >= v32)
            goto LABEL_73;
LABEL_68:
          v42 = *(_QWORD *)(v43 + 8);
          if (!v42)
          {
            v9 = (uint64_t **)(v43 + 8);
LABEL_70:
            v46 = operator new(0x40uLL);
            v46[2] = *(_OWORD *)v149;
            *((_QWORD *)v46 + 6) = v29;
            *((_QWORD *)v46 + 7) = v30;
            *(_OWORD *)&v149[16] = 0uLL;
            *(_QWORD *)v46 = 0;
            *((_QWORD *)v46 + 1) = 0;
            *((_QWORD *)v46 + 2) = v43;
            *v9 = (uint64_t *)v46;
            v47 = (uint64_t *)**a1;
            if (v47)
            {
              *a1 = v47;
              v46 = *v9;
            }
            sub_20E868578(a1[1], (uint64_t *)v46);
            a1[2] = (uint64_t *)((char *)a1[2] + 1);
            v30 = *(std::__shared_weak_count **)&v149[24];
LABEL_73:
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v49 = __ldaxr(p_shared_owners);
              while (__stlxr(v49 - 1, p_shared_owners));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            v50 = *(_QWORD *)(a3 + 32);
            v51 = (uint64_t *)v132;
            if (v50)
            {
              v52 = (__int16 *)(v50 + 148);
              if (*(_BYTE *)(v132 + 192))
              {
                v53 = *(_OWORD *)(v50 + 8);
                *(_QWORD *)(v132 + 64) = *(_QWORD *)(v50 + 24);
                *(_OWORD *)(v132 + 48) = v53;
                v54 = *(_OWORD *)(v50 + 32);
                *(_DWORD *)(v132 + 88) = *(_DWORD *)(v50 + 48);
                *(_OWORD *)(v132 + 72) = v54;
                v55 = *(_WORD *)(v50 + 56);
                *(_BYTE *)(v132 + 98) = *(_BYTE *)(v50 + 58);
                *(_WORD *)(v132 + 96) = v55;
                v56 = *(_OWORD *)(v50 + 64);
                *(_QWORD *)(v132 + 120) = *(_QWORD *)(v50 + 80);
                *(_OWORD *)(v132 + 104) = v56;
                v57 = *(_OWORD *)(v50 + 88);
                *(_QWORD *)(v132 + 144) = *(_QWORD *)(v50 + 104);
                *(_OWORD *)(v132 + 128) = v57;
                v58 = *(_OWORD *)(v50 + 112);
                v59 = *(_OWORD *)(v50 + 128);
                *(_DWORD *)(v132 + 184) = *(_DWORD *)(v50 + 144);
                *(_OWORD *)(v132 + 168) = v59;
                *(_OWORD *)(v132 + 152) = v58;
                v60 = *v52;
                *(_BYTE *)(v132 + 190) = *((_BYTE *)v52 + 2);
                *(_WORD *)(v132 + 188) = v60;
                goto LABEL_83;
              }
              v145 = *(_OWORD *)(v50 + 32);
              v147 = *(_QWORD *)(v50 + 48);
              v141 = *(_WORD *)(v50 + 56);
              v143 = *(_BYTE *)(v50 + 58);
              *(_OWORD *)&v151[5] = *(_OWORD *)(v50 + 64);
              v152 = *(_QWORD *)(v50 + 80);
              v139 = *(_QWORD *)(v50 + 104);
              v137 = *(_OWORD *)(v50 + 88);
              v61 = *(_OWORD *)(v50 + 112);
              v62 = *(_OWORD *)(v50 + 128);
              v150 = *(_DWORD *)(v50 + 144);
              *(_OWORD *)v149 = v61;
              *(_OWORD *)&v149[16] = v62;
              v135 = *(_BYTE *)(v50 + 150);
              v133 = *v52;
LABEL_82:
              v63 = *(_OWORD *)(v50 + 8);
              v51[8] = *(_QWORD *)(v50 + 24);
              *((_OWORD *)v51 + 3) = v63;
              *(_OWORD *)(v51 + 9) = v145;
              v51[11] = v147;
              *((_WORD *)v51 + 48) = v141;
              *((_BYTE *)v51 + 98) = v143;
              *(_OWORD *)(v51 + 13) = *(_OWORD *)&v151[5];
              v51[15] = v152;
              v51[18] = v139;
              *((_OWORD *)v51 + 8) = v137;
              v51[5] = (uint64_t)&off_24C9FC600;
              v64 = *(_OWORD *)v149;
              v65 = *(_OWORD *)&v149[16];
              *((_DWORD *)v51 + 46) = v150;
              *(_OWORD *)(v51 + 21) = v65;
              *(_OWORD *)(v51 + 19) = v64;
              *((_BYTE *)v51 + 190) = v135;
              *((_WORD *)v51 + 94) = v133;
              *((_BYTE *)v51 + 192) = 1;
            }
LABEL_83:
            v66 = *(_QWORD *)(a3 + 24);
            *(_OWORD *)v149 = *(_OWORD *)a2[2].i8;
            *(int8x8_t *)&v149[16] = a2[4];
            *(_QWORD *)&v149[24] = v66;
            v68 = v51[25];
            v69 = v51[26];
            v67 = (char **)(v51 + 25);
            if (v69 != v68)
            {
              v70 = (v69 - v68) >> 5;
              while (1)
              {
                v71 = v70 >> 1;
                v72 = v68 + 32 * (v70 >> 1);
                v73 = *(_DWORD *)(v72 + 16);
                v74 = v73 >= *(_DWORD *)&v149[16];
                if (v73 != *(_DWORD *)&v149[16])
                  goto LABEL_91;
                if (*(_QWORD *)v72 >= *(_QWORD *)v149)
                  break;
LABEL_85:
                v68 = v72 + 32;
                v71 = v70 + ~v71;
LABEL_86:
                v70 = v71;
                if (!v71)
                  goto LABEL_94;
              }
              if (*(_QWORD *)v72 != *(_QWORD *)v149)
                goto LABEL_86;
              v74 = *(_DWORD *)(v72 + 8) >= *(_DWORD *)&v149[8];
LABEL_91:
              if (v74)
                goto LABEL_86;
              goto LABEL_85;
            }
LABEL_94:
            if ((v68 == v69
               || *(_DWORD *)(v68 + 16) != a2[4].i32[0]
               || *(_QWORD *)v68 != *(_QWORD *)&a2[2]
               || *(_DWORD *)(v68 + 8) != a2[3].i32[0])
              && *(char **)(v132 + 208) != sub_20F287F84(v67, (char *)v68, v149))
            {
              v75 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4);
              v76 = v75;
              if (*((_QWORD *)&v132 + 1))
              {
                v77 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
                v76 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4);
                do
                  v79 = __ldxr(v77);
                while (__stxr(v79 + 1, v77));
              }
              *(_DWORD *)&v151[16] = v76;
              *(_DWORD *)v149 = v75;
              *(_OWORD *)&v149[8] = v132;
              *(_QWORD *)v151 = 0;
              *(_QWORD *)&v151[8] = 0;
              *(_DWORD *)&v149[24] = v76;
              sub_20EE6C30C((uint64_t)&a2[5], (unsigned int *)v149, (uint64_t)v149);
              v81 = v80;
              v82 = *(std::__shared_weak_count **)&v149[16];
              if (*(_QWORD *)&v149[16])
              {
                v83 = (unint64_t *)(*(_QWORD *)&v149[16] + 8);
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
              v85 = *(std::__shared_weak_count **)&v151[8];
              if (*(_QWORD *)&v151[8])
              {
                v86 = (unint64_t *)(*(_QWORD *)&v151[8] + 8);
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                  v88 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
                  if (*((_QWORD *)&v132 + 1))
                    goto LABEL_114;
                  goto LABEL_117;
                }
              }
              v88 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
              if (!*((_QWORD *)&v132 + 1))
                goto LABEL_117;
LABEL_114:
              v89 = (unint64_t *)&v88->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (v90)
              {
LABEL_117:
                if ((v81 & 1) == 0)
                  goto LABEL_118;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
                if ((v81 & 1) == 0)
                  goto LABEL_118;
              }
              v91 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
              *(_OWORD *)a4 = v132;
              if (!*((_QWORD *)&v132 + 1))
                return;
              v92 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
              goto LABEL_127;
            }
LABEL_118:
            *a4 = 0;
            a4[1] = 0;
            v91 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
            goto LABEL_119;
          }
        }
      }
    }
LABEL_57:
    v40 = (unint64_t *)&v30->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    goto LABEL_59;
  }
  v51 = v16[6];
  v91 = (std::__shared_weak_count *)v16[7];
  if (v91)
  {
    v96 = (unint64_t *)&v91->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  *(_QWORD *)&v132 = v51;
  *((_QWORD *)&v132 + 1) = v91;
  v98 = a2[6];
  if (!*(_QWORD *)&v98)
    goto LABEL_164;
  v99 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
  v100 = (uint8x8_t)vcnt_s8(v98);
  v100.i16[0] = vaddlv_u8(v100);
  if (v100.u32[0] > 1uLL)
  {
    v101 = *(unsigned int *)(*(_QWORD *)(a3 + 24) + 4);
    if (*(_QWORD *)&v98 <= v99)
      v101 = v99 % *(_QWORD *)&v98;
  }
  else
  {
    v101 = (v98.i32[0] - 1) & v99;
  }
  v112 = *(uint64_t ***)(*(_QWORD *)&a2[5] + 8 * v101);
  if (!v112 || (v113 = *v112) == 0)
  {
LABEL_164:
    if (!*((_BYTE *)v51 + 192))
    {
      v50 = *(_QWORD *)(a3 + 32);
      if (v50)
      {
        v145 = *(_OWORD *)(v50 + 32);
        v147 = *(_QWORD *)(v50 + 48);
        v141 = *(_WORD *)(v50 + 56);
        v143 = *(_BYTE *)(v50 + 58);
        *(_OWORD *)&v151[5] = *(_OWORD *)(v50 + 64);
        v152 = *(_QWORD *)(v50 + 80);
        v139 = *(_QWORD *)(v50 + 104);
        v137 = *(_OWORD *)(v50 + 88);
        v117 = *(_OWORD *)(v50 + 112);
        v118 = *(_OWORD *)(v50 + 128);
        v150 = *(_DWORD *)(v50 + 144);
        *(_OWORD *)v149 = v117;
        *(_OWORD *)&v149[16] = v118;
        v135 = *(_BYTE *)(v50 + 150);
        v133 = *(_WORD *)(v50 + 148);
        goto LABEL_82;
      }
    }
    goto LABEL_83;
  }
  if (v100.u32[0] < 2uLL)
  {
    v114 = *(_QWORD *)&v98 - 1;
    while (1)
    {
      v116 = v113[1];
      if (v116 == v99)
      {
        if (*((_DWORD *)v113 + 4) == (_DWORD)v99)
          goto LABEL_167;
      }
      else if ((v116 & v114) != v101)
      {
        goto LABEL_164;
      }
      v113 = (uint64_t *)*v113;
      if (!v113)
        goto LABEL_164;
    }
  }
  while (1)
  {
    v115 = v113[1];
    if (v115 == v99)
      break;
    if (v115 >= *(_QWORD *)&v98)
      v115 %= *(_QWORD *)&v98;
    if (v115 != v101)
      goto LABEL_164;
LABEL_154:
    v113 = (uint64_t *)*v113;
    if (!v113)
      goto LABEL_164;
  }
  if (*((_DWORD *)v113 + 4) != (_DWORD)v99)
    goto LABEL_154;
LABEL_167:
  v119 = v51[3];
  v120 = *((_DWORD *)v51 + 8);
  v121 = v113[3];
  v122 = *(uint64_t **)(v121 + 24);
  v123 = *(_DWORD *)(v121 + 32);
  if ((uint64_t *)v119 == v122 && v120 == v123)
  {
    *a4 = v51;
    a4[1] = (uint64_t *)v91;
    return;
  }
  v125 = (uint64_t)*v9;
  if (!*v9)
    goto LABEL_197;
  v126 = (uint64_t)v9;
  v127 = (uint64_t)*v9;
  do
  {
    v128 = *(_QWORD *)(v127 + 32);
    if (v128 < v119)
    {
      v127 += 8;
    }
    else if (v128 == v119)
    {
      if (*(_DWORD *)(v127 + 40) < v120)
        v127 += 8;
      else
        v126 = v127;
    }
    else
    {
      v126 = v127;
    }
    v127 = *(_QWORD *)v127;
  }
  while (v127);
  if ((uint64_t **)v126 == v8)
    goto LABEL_197;
  v129 = *(_QWORD *)(v126 + 32);
  if (v119 < v129 || v119 == v129 && *(_DWORD *)(v126 + 40) > v120)
    goto LABEL_197;
  do
  {
    v130 = *(_QWORD *)(v125 + 32);
    if (v130 < (unint64_t)v122)
    {
      v125 += 8;
    }
    else if ((uint64_t *)v130 == v122)
    {
      if (*(_DWORD *)(v125 + 40) < v123)
        v125 += 8;
      else
        v9 = (uint64_t **)v125;
    }
    else
    {
      v9 = (uint64_t **)v125;
    }
    v125 = *(_QWORD *)v125;
  }
  while (v125);
  if (v9 == v8 || (v131 = v9[4], v122 < v131) || v122 == v131 && *((_DWORD *)v9 + 10) > v123)
  {
LABEL_197:
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    sub_20F28ACAC(a1, v126, (uint64_t *)v9, a4);
  }
LABEL_119:
  if (v91)
  {
LABEL_127:
    v94 = (unint64_t *)&v91->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_20F28A96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F28A980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F28A994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_20E8C2824((uint64_t)va2);
  sub_20E86665C(v2 - 136);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20F28A9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20F28AC44((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F28A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F28A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F28AA04(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  void *v6;
  unint64_t prime;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int8x8_t v12;
  size_t v13;
  uint8x8_t v14;
  uint64_t v15;
  size_t v16;
  __int128 v18;
  uint64_t v19;
  void *__p;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;

  v4 = sub_20E9DF85C(a1, a2);
  if (v4)
    return v4;
  v18 = *(_OWORD *)a2;
  v19 = a2[2];
  __p = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 1065353216;
  v4 = sub_20F28C0A8((uint64_t)a1, (uint64_t *)&v18, (uint64_t)&v18);
  v5 = v22;
  if (v22)
  {
    do
    {
      v8 = v5;
      v5 = (_QWORD *)*v5;
      v9 = (std::__shared_weak_count *)v8[4];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      operator delete(v8);
    }
    while (v5);
  }
  v6 = __p;
  __p = 0;
  if (v6)
    operator delete(v6);
  prime = vcvtps_u32_f32((float)(unint64_t)a1[5] / *((float *)v4 + 18));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v12 = (int8x8_t)v4[6];
  if (prime > *(_QWORD *)&v12)
    goto LABEL_16;
  if (prime >= *(_QWORD *)&v12)
    return v4;
  v13 = vcvtps_u32_f32((float)(unint64_t)v4[8] / *((float *)v4 + 18));
  if (*(_QWORD *)&v12 >= 3uLL)
  {
    v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] <= 1uLL)
    {
      v15 = 1 << -(char)__clz(v13 - 1);
      if (v13 >= 2)
        v13 = v15;
      if (prime <= v13)
        prime = v13;
      if (prime >= *(_QWORD *)&v12)
        return v4;
LABEL_16:
      sub_20E8D2B3C((uint64_t)(v4 + 5), prime);
      return v4;
    }
  }
  v16 = std::__next_prime(v13);
  if (prime <= v16)
    prime = v16;
  if (prime < *(_QWORD *)&v12)
    goto LABEL_16;
  return v4;
}

void sub_20F28AC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20F28C018((uint64_t)va1);
  sub_20F2828AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F28AC44(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20F28ACAC(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t *v37;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int16 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  BOOL v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t **v92;
  _QWORD *v93;
  __int16 v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  __int16 v98;
  char v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(uint64_t **)(v8 + 200);
  v10 = *(uint64_t **)(v8 + 208);
  v11 = a3[6];
  v13 = *(__int128 **)(v11 + 200);
  v12 = *(__int128 **)(v11 + 208);
  if (v9 == v10)
  {
    v14 = (char *)v12 - (char *)v13;
LABEL_21:
    if (v13 == v12)
      goto LABEL_88;
    v90 = v14;
    v91 = v9;
    v93 = a4;
    v92 = a1;
    v25 = a1 + 3;
    while (1)
    {
      v26 = *(_QWORD *)(a2 + 48);
      v27 = *(_QWORD *)(v26 + 200);
      v28 = *(_QWORD *)(v26 + 208);
      v29 = *(_QWORD *)v13;
      v30 = *((_DWORD *)v13 + 2);
      v31 = *((_DWORD *)v13 + 4);
      if (v28 != v27)
      {
        v32 = (v28 - v27) >> 5;
        while (1)
        {
          v33 = v32 >> 1;
          v34 = v27 + 32 * (v32 >> 1);
          v35 = *(_DWORD *)(v34 + 16);
          v36 = v35 >= v31;
          if (v35 != v31)
            goto LABEL_33;
          if (*(_QWORD *)v34 >= v29)
            break;
LABEL_27:
          v27 = v34 + 32;
          v33 = v32 + ~v33;
LABEL_28:
          v32 = v33;
          if (!v33)
            goto LABEL_36;
        }
        if (*(_QWORD *)v34 != v29)
          goto LABEL_28;
        v36 = *(_DWORD *)(v34 + 8) >= v30;
LABEL_33:
        if (v36)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_36:
      if (v27 == v28 || *(_DWORD *)(v27 + 16) != v31 || *(_QWORD *)v27 != v29 || *(_DWORD *)(v27 + 8) != v30)
        break;
      sub_20EE6BF60(v25, (uint64_t *)v13, *(_DWORD *)(*((_QWORD *)v13 + 3) + 4));
LABEL_24:
      v13 += 2;
      if (v13 == v12)
      {
        a4 = v93;
        v11 = a3[6];
        v9 = v91;
        a1 = v92;
        v14 = v90;
        goto LABEL_88;
      }
    }
    v37 = sub_20E9DF85C(v25, (uint64_t *)v13);
    v38 = (int8x8_t)v37[6];
    if (v38)
    {
      v39 = *(unsigned int *)(*((_QWORD *)v13 + 3) + 4);
      v40 = (uint8x8_t)vcnt_s8(v38);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v41 = *(unsigned int *)(*((_QWORD *)v13 + 3) + 4);
        if (*(_QWORD *)&v38 <= v39)
          v41 = v39 % *(_QWORD *)&v38;
      }
      else
      {
        v41 = (v38.i32[0] - 1) & v39;
      }
      v42 = *(uint64_t ***)(v37[5] + 8 * v41);
      if (v42)
      {
        v43 = *v42;
        if (v43)
        {
          if (v40.u32[0] < 2uLL)
          {
            v44 = *(_QWORD *)&v38 - 1;
            while (1)
            {
              v46 = v43[1];
              if (v46 == v39)
              {
                if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
                  goto LABEL_63;
              }
              else if ((v46 & v44) != v41)
              {
                goto LABEL_61;
              }
              v43 = (uint64_t *)*v43;
              if (!v43)
                goto LABEL_61;
            }
          }
          do
          {
            v45 = v43[1];
            if (v45 == v39)
            {
              if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
                goto LABEL_63;
            }
            else
            {
              if (v45 >= *(_QWORD *)&v38)
                v45 %= *(_QWORD *)&v38;
              if (v45 != v41)
                break;
            }
            v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
      }
    }
LABEL_61:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 890, (uint64_t)"fitT != kfit->second.end()", 26, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v43 = 0;
LABEL_63:
    v48 = *(_QWORD *)(a2 + 48);
    v47 = *(_QWORD *)(a2 + 56);
    if (v47)
    {
      v49 = (unint64_t *)(v47 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = (std::__shared_weak_count *)v43[4];
    v43[3] = v48;
    v43[4] = v47;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(_QWORD *)(a2 + 48);
    v56 = *((_QWORD *)v13 + 2);
    v55 = *((_QWORD *)v13 + 3);
    v102 = *v13;
    *(_QWORD *)&v103 = v56;
    *((_QWORD *)&v103 + 1) = v55;
    v58 = *(_QWORD *)(v54 + 200);
    v59 = *(_QWORD *)(v54 + 208);
    v57 = (char **)(v54 + 200);
    if (v59 == v58)
    {
LABEL_82:
      if (v58 == v59
        || *(_DWORD *)(v58 + 16) != *((_DWORD *)v13 + 4)
        || *(_QWORD *)v58 != *(_QWORD *)v13
        || *(_DWORD *)(v58 + 8) != *((_DWORD *)v13 + 2))
      {
        sub_20F287F84(v57, (char *)v58, &v102);
      }
      goto LABEL_24;
    }
    v60 = (v59 - v58) >> 5;
    while (1)
    {
      v61 = v60 >> 1;
      v62 = v58 + 32 * (v60 >> 1);
      v63 = *(_DWORD *)(v62 + 16);
      v64 = v63 >= v103;
      if (v63 != (_DWORD)v103)
        goto LABEL_79;
      if (*(_QWORD *)v62 >= (unint64_t)v102)
        break;
LABEL_73:
      v58 = v62 + 32;
      v61 = v60 + ~v61;
LABEL_74:
      v60 = v61;
      if (!v61)
        goto LABEL_82;
    }
    if (*(_QWORD *)v62 != (_QWORD)v102)
      goto LABEL_74;
    v64 = *(_DWORD *)(v62 + 8) >= DWORD2(v102);
LABEL_79:
    if (v64)
      goto LABEL_74;
    goto LABEL_73;
  }
  v14 = (char *)v12 - (char *)v13;
  if (v12 != v13)
  {
    v15 = v9;
    while (1)
    {
      v16 = *v15;
      v17 = *((_DWORD *)v15 + 2);
      v18 = *(_QWORD *)(v11 + 200);
      v19 = v14 >> 5;
      v20 = *((_DWORD *)v15 + 4);
      do
      {
        v21 = v19 >> 1;
        v22 = v18 + 32 * (v19 >> 1);
        v23 = *(_DWORD *)(v22 + 16);
        v24 = v23 >= v20;
        if (v23 != v20)
          goto LABEL_12;
        if (*(_QWORD *)v22 < v16)
          goto LABEL_6;
        if (*(_QWORD *)v22 == v16)
        {
          v24 = *(_DWORD *)(v22 + 8) >= v17;
LABEL_12:
          if (!v24)
          {
LABEL_6:
            v18 = v22 + 32;
            v21 = v19 + ~v21;
          }
        }
        v19 = v21;
      }
      while (v21);
      if ((__int128 *)v18 != v12
        && *(_DWORD *)(v18 + 16) == v20
        && *(_QWORD *)v18 == v16
        && *(_DWORD *)(v18 + 8) == v17)
      {
        *a4 = 0;
        a4[1] = 0;
        return;
      }
      v15 += 4;
      if (v15 == v10)
        goto LABEL_21;
    }
  }
LABEL_88:
  if (*(_BYTE *)(v11 + 192))
  {
    v65 = *(_QWORD *)(a2 + 48);
    if (v14 <= (unint64_t)((char *)v10 - (char *)v9))
    {
      if (*(_BYTE *)(v65 + 192))
        goto LABEL_94;
    }
    else if (*(_BYTE *)(v65 + 192))
    {
      v66 = *(_OWORD *)(v11 + 48);
      *(_QWORD *)(v65 + 64) = *(_QWORD *)(v11 + 64);
      *(_OWORD *)(v65 + 48) = v66;
      v67 = *(_OWORD *)(v11 + 72);
      *(_DWORD *)(v65 + 88) = *(_DWORD *)(v11 + 88);
      *(_OWORD *)(v65 + 72) = v67;
      v68 = *(_WORD *)(v11 + 96);
      *(_BYTE *)(v65 + 98) = *(_BYTE *)(v11 + 98);
      *(_WORD *)(v65 + 96) = v68;
      v69 = *(_OWORD *)(v11 + 104);
      *(_QWORD *)(v65 + 120) = *(_QWORD *)(v11 + 120);
      *(_OWORD *)(v65 + 104) = v69;
      v70 = *(_OWORD *)(v11 + 128);
      *(_QWORD *)(v65 + 144) = *(_QWORD *)(v11 + 144);
      *(_OWORD *)(v65 + 128) = v70;
      v71 = *(_OWORD *)(v11 + 152);
      v72 = *(_OWORD *)(v11 + 168);
      *(_DWORD *)(v65 + 184) = *(_DWORD *)(v11 + 184);
      *(_OWORD *)(v65 + 168) = v72;
      *(_OWORD *)(v65 + 152) = v71;
      v73 = *(_WORD *)(v11 + 188);
      *(_BYTE *)(v65 + 190) = *(_BYTE *)(v11 + 190);
      *(_WORD *)(v65 + 188) = v73;
      goto LABEL_94;
    }
    v100 = *(_OWORD *)(v11 + 72);
    v101 = *(_QWORD *)(v11 + 88);
    v98 = *(_WORD *)(v11 + 96);
    v99 = *(_BYTE *)(v11 + 98);
    v105 = *(_OWORD *)(v11 + 104);
    v106 = *(_QWORD *)(v11 + 120);
    v97 = *(_QWORD *)(v11 + 144);
    v96 = *(_OWORD *)(v11 + 128);
    v74 = *(_OWORD *)(v11 + 152);
    v75 = *(_OWORD *)(v11 + 168);
    v104 = *(_DWORD *)(v11 + 184);
    v102 = v74;
    v103 = v75;
    v95 = *(_BYTE *)(v11 + 190);
    v94 = *(_WORD *)(v11 + 188);
    v76 = *(_OWORD *)(v11 + 48);
    *(_QWORD *)(v65 + 64) = *(_QWORD *)(v11 + 64);
    *(_OWORD *)(v65 + 48) = v76;
    *(_OWORD *)(v65 + 72) = v100;
    *(_QWORD *)(v65 + 88) = v101;
    *(_WORD *)(v65 + 96) = v98;
    *(_BYTE *)(v65 + 98) = v99;
    *(_OWORD *)(v65 + 104) = v105;
    *(_QWORD *)(v65 + 120) = v106;
    *(_QWORD *)(v65 + 144) = v97;
    *(_OWORD *)(v65 + 128) = v96;
    *(_QWORD *)(v65 + 40) = &off_24C9FC600;
    v77 = v102;
    v78 = v103;
    *(_DWORD *)(v65 + 184) = v104;
    *(_OWORD *)(v65 + 168) = v78;
    *(_OWORD *)(v65 + 152) = v77;
    *(_BYTE *)(v65 + 190) = v95;
    *(_WORD *)(v65 + 188) = v94;
    *(_BYTE *)(v65 + 192) = 1;
  }
LABEL_94:
  v79 = (uint64_t *)a3[1];
  if (v79)
  {
    do
    {
      v80 = v79;
      v79 = (uint64_t *)*v79;
    }
    while (v79);
  }
  else
  {
    v81 = a3;
    do
    {
      v80 = (uint64_t *)v81[2];
      v82 = *v80 == (_QWORD)v81;
      v81 = v80;
    }
    while (!v82);
  }
  if (*a1 == a3)
    *a1 = v80;
  v83 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_20E8D2134(v83, a3);
  v84 = (std::__shared_weak_count *)a3[7];
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  operator delete(a3);
  v87 = *(_QWORD *)(a2 + 56);
  *a4 = *(_QWORD *)(a2 + 48);
  a4[1] = v87;
  if (v87)
  {
    v88 = (unint64_t *)(v87 + 8);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
}

void sub_20F28B374()
{
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F28B388(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

BOOL sub_20F28B398(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

void sub_20F28B3A8(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20[2];
  std::__shared_weak_count *v21;

  v4 = a1[6];
  v3 = (std::__shared_weak_count *)a1[7];
  v20[1] = v4;
  v21 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_20F28B538(a1, v20);
  v7 = (std::__shared_weak_count_vtbl *)v20[0];
  *((_QWORD *)&v19 + 1) = v3;
  v20[0] = 0;
  *(_QWORD *)&v19 = v4;
  if (v3)
  {
    v8 = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20F28B6F0(a2, v7, &v19);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20[0];
  v20[0] = 0;
  if (v13)
  {
    if (*(_BYTE *)(v13 + 192))
      *(_BYTE *)(v13 + 192) = 0;
    v14 = *(void **)(v13 + 200);
    *(_QWORD *)(v13 + 208) = v14;
    *(_DWORD *)(v13 + 224) = 0;
    if (v14)
      operator delete(v14);
    v15 = *(std::__shared_weak_count **)(v13 + 8);
    if (v15)
      std::__shared_weak_count::__release_weak(v15);
    MEMORY[0x212BC6398](v13, 0x10E2C405C03E5D2);
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20F28B500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20F28B680((uint64_t *)va1);
  sub_20E86665C((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F28B524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20F28B538@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  double result;
  unint64_t v13;
  uint64_t v14;
  std::runtime_error *exception;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v13 = a1[4];
    if (v13 >= a1[5])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    a1[4] = v13 + 1;
    v14 = operator new();
    *(_BYTE *)(v14 + 40) = 0;
    *(_BYTE *)(v14 + 192) = 0;
    result = 0.0;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_DWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 208) = 0;
    *(_QWORD *)(v14 + 216) = 0;
    *(_QWORD *)(v14 + 200) = 0;
    *(_DWORD *)(v14 + 224) = 0;
    *a2 = v14;
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = a1[2];
    v9 = *(_QWORD *)(v6 - 8);
    v8 = (_QWORD *)(v6 - 8);
    v7 = v9;
    *v8 = 0;
    if (v9)
    {
      if (*(_BYTE *)(v7 + 192))
        *(_BYTE *)(v7 + 192) = 0;
      v10 = *(void **)(v7 + 200);
      *(_QWORD *)(v7 + 208) = v10;
      *(_DWORD *)(v7 + 224) = 0;
      if (v10)
        operator delete(v10);
      v11 = *(std::__shared_weak_count **)(v7 + 8);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      MEMORY[0x212BC6398](v7, 0x10E2C405C03E5D2);
    }
    a1[2] = v8;
    *a2 = v5;
  }
  return result;
}

void sub_20F28B66C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F28B680(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 192))
      *(_BYTE *)(v2 + 192) = 0;
    v3 = *(void **)(v2 + 200);
    *(_QWORD *)(v2 + 208) = v3;
    *(_DWORD *)(v2 + 224) = 0;
    if (v3)
      operator delete(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    MEMORY[0x212BC6398](v2, 0x10E2C405C03E5D2);
  }
  return a1;
}

std::__shared_weak_count_vtbl **sub_20F28B6F0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2, __int128 *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;

  *a1 = a2;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v8 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC660;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = a2;
  *(_OWORD *)&v6[1].__shared_owners_ = v8;
  a1[1] = (std::__shared_weak_count_vtbl *)v6;
  if (!a2)
    return a1;
  v9 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v9)
  {
    if (v9->__shared_owners_ != -1)
      return a1;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20F28B824(void *a1)
{
  uint64_t v1;
  std::mutex **v2;

  __cxa_begin_catch(a1);
  sub_20F28B850(v2, v1);
  __cxa_rethrow();
}

void sub_20F28B83C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20F28B850(std::mutex **a1, uint64_t a2)
{
  _BOOL8 result;
  void *v4;
  std::__shared_weak_count *v5;

  result = sub_20F28BAE0(*a1, a2);
  if (a2 && !result)
  {
    if (*(_BYTE *)(a2 + 192))
      *(_BYTE *)(a2 + 192) = 0;
    v4 = *(void **)(a2 + 200);
    *(_QWORD *)(a2 + 208) = v4;
    *(_DWORD *)(a2 + 224) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20F28B8C8(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC660;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20F28B93C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC660;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F28B9B4(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20F28BAE0(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 192))
      *(_BYTE *)(v2 + 192) = 0;
    v5 = *(void **)(v2 + 200);
    *(_QWORD *)(v2 + 208) = v5;
    *(_DWORD *)(v2 + 224) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    MEMORY[0x212BC6398](v2, 0x10E2C405C03E5D2);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20F28BA70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdL"
                     "b0EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializ"
                     "erIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_dele"
                     "teIS9_EEEESF_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3"
                                "DWithCovIdLb0EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_2"
                                "3PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_1"
                                "0unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb0EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_25VIOAnchoredPoint3DWithCovIdLb0EEELb0EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20F28BAE0(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v11;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v11 = a2;
    v5 = (uint64_t *)sig[2];
    if ((unint64_t)v5 >= sig[3])
    {
      v6 = sub_20F28BBC8(sig + 1, &v11);
      v7 = v11;
      sig[2] = v6;
      v11 = 0;
      if (v7)
      {
        if (*(_BYTE *)(v7 + 192))
          *(_BYTE *)(v7 + 192) = 0;
        v8 = *(void **)(v7 + 200);
        *(_QWORD *)(v7 + 208) = v8;
        *(_DWORD *)(v7 + 224) = 0;
        if (v8)
          operator delete(v8);
        v9 = *(std::__shared_weak_count **)(v7 + 8);
        if (v9)
          std::__shared_weak_count::__release_weak(v9);
        MEMORY[0x212BC6398](v7, 0x10E2C405C03E5D2);
      }
    }
    else
    {
      *v5 = a2;
      sig[2] = v5 + 1;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20F28BBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20F28B680((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F28BBC8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_20E867F44();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_20E877A38();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_37;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v4 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*(_BYTE *)(v27 + 192))
          *(_BYTE *)(v27 + 192) = 0;
        v29 = *(void **)(v27 + 200);
        *(_QWORD *)(v27 + 208) = v29;
        *(_DWORD *)(v27 + 224) = 0;
        if (v29)
          operator delete(v29);
        v30 = *(std::__shared_weak_count **)(v27 + 8);
        if (v30)
          std::__shared_weak_count::__release_weak(v30);
        MEMORY[0x212BC6398](v27, 0x10E2C405C03E5D2);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

std::__shared_weak_count_vtbl **sub_20F28BDA0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FC6B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (a2)
  {
    v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_20F28BF00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F28B680((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F28BF18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F28BF3C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 192))
      *(_BYTE *)(v1 + 192) = 0;
    v2 = *(void **)(v1 + 200);
    *(_QWORD *)(v1 + 208) = v2;
    *(_DWORD *)(v1 + 224) = 0;
    if (v2)
      operator delete(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20F28BFA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb0EEELb"
                     "0EEEE27__shared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCo"
                                "vIdLb0EEELb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb0EEELb0EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_25VIOAnchoredPoint3DWithCovIdLb0EEELb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20F28C018(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 40);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_20F28C0A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x50uLL);
  v12 = v17;
  *v17 = 0;
  v17[1] = v8;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  v19 = *(_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v17[4] = v19;
  v17[5] = v18;
  v17[6] = v20;
  v21 = *(_QWORD *)(a3 + 40);
  v17[7] = v21;
  v22 = *(_QWORD *)(a3 + 48);
  v17[8] = v22;
  *((_DWORD *)v17 + 18) = *(_DWORD *)(a3 + 56);
  if (v22)
  {
    v23 = *(_QWORD *)(v21 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      v25 = v23 >= v20;
      v24 = v23 % v20;
      if (!v25)
        v24 = v23;
    }
    else
    {
      v24 = v23 & (v20 - 1);
    }
    *(_QWORD *)(v18 + 8 * v24) = v17 + 7;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
  }
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (v9 && (float)(v27 * (float)v9) >= v26)
  {
    v28 = *(_QWORD *)a1;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v29)
    {
LABEL_36:
      *v12 = *v29;
LABEL_71:
      *v29 = v12;
      goto LABEL_72;
    }
  }
  else
  {
    v30 = 1;
    if (v9 >= 3)
      v30 = (v9 & (v9 - 1)) != 0;
    v31 = v30 | (2 * v9);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_47;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_47:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        v3 = v8 % v9;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v29)
          goto LABEL_36;
      }
      else
      {
        v3 = v8;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v29)
          goto LABEL_36;
      }
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
      v28 = *(_QWORD *)a1;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v29)
        goto LABEL_36;
    }
  }
  *v12 = *v16;
  *v16 = v12;
  *(_QWORD *)(v28 + 8 * v3) = v16;
  if (*v12)
  {
    v38 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_71;
  }
LABEL_72:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20F28C464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE6C9B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F28C478()
{
  JUMPOUT(0x212BC6398);
}

int32x4_t *sub_20F28C48C(int32x4_t **a1, int32x4_t *a2, int32x4_t *a3, size_t __sz)
{
  uint64_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  unint64_t v11;
  uint64_t v12;
  int32x4_t *result;
  int32x4_t **v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t *v17;
  uint64_t v18;
  int32x4_t *v19;
  int32x4_t *v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int32x4_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int32x4_t *v33;
  int32x4_t *v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int32x4_t *v43;
  int32x4_t *v44;
  uint64_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int32x4_t *v53;
  uint64_t v54;
  int32x4_t *v55;
  int32x4_t *v56;
  uint64_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint64_t v62;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  v10 = *a1;
  if (__sz > (v8 - (uint64_t)*a1) >> 2)
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_42;
    v11 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v11 = __sz;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (v11 >> 62)
LABEL_42:
      sub_20E867F44();
    v12 = 4 * v11;
    result = (int32x4_t *)operator new(4 * v11);
    *a1 = result;
    v14 = a1 + 1;
    a1[2] = (int32x4_t *)((char *)result + v12);
    v15 = result;
    if (a2 != a3)
    {
      v16 = (char *)a3 - (char *)a2 - 8;
      v17 = a2;
      v15 = result;
      if (v16 < 0x38)
        goto LABEL_45;
      v18 = (v16 >> 3) + 1;
      v17 = (int32x4_t *)((char *)a2 + 8 * (v18 & 0x3FFFFFFFFFFFFFF8));
      v15 = (int32x4_t *)((char *)result + 4 * (v18 & 0x3FFFFFFFFFFFFFF8));
      v19 = result + 1;
      v20 = a2 + 2;
      v21 = v18 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v23 = v20[-2];
        v22 = v20[-1];
        v25 = *v20;
        v24 = v20[1];
        v20 += 4;
        v19[-1] = vuzp1q_s32(v23, v22);
        *v19 = vuzp1q_s32(v25, v24);
        v19 += 2;
        v21 -= 8;
      }
      while (v21);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v26 = v17->i64[0];
          v17 = (int32x4_t *)((char *)v17 + 8);
          v15->i32[0] = v26;
          v15 = (int32x4_t *)((char *)v15 + 4);
        }
        while (v17 != a3);
      }
    }
LABEL_39:
    *v14 = v15;
    return result;
  }
  result = a1[1];
  v14 = a1 + 1;
  v27 = (char *)result - (char *)v9;
  v28 = ((char *)result - (char *)v9) >> 2;
  if (v28 < __sz)
  {
    v29 = (int32x4_t *)((char *)a2 + 8 * v28);
    if (result != v9)
    {
      v30 = 2 * v27 - 8;
      v31 = (uint64_t *)a2;
      if (v30 < 0x38)
        goto LABEL_46;
      v32 = (v30 >> 3) + 1;
      v10 = (int32x4_t *)((char *)v9 + 4 * (v32 & 0x3FFFFFFFFFFFFFF8));
      v31 = &a2->i64[v32 & 0x3FFFFFFFFFFFFFF8];
      v33 = a2 + 2;
      v34 = v9 + 1;
      v35 = v32 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v37 = v33[-2];
        v36 = v33[-1];
        v39 = *v33;
        v38 = v33[1];
        v33 += 4;
        v34[-1] = vuzp1q_s32(v37, v36);
        *v34 = vuzp1q_s32(v39, v38);
        v34 += 2;
        v35 -= 8;
      }
      while (v35);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_46:
        do
        {
          v40 = *v31++;
          v10->i32[0] = v40;
          v10 = (int32x4_t *)((char *)v10 + 4);
        }
        while (v31 != (uint64_t *)v29);
      }
    }
    if (v29 == a3)
    {
      v15 = result;
    }
    else
    {
      v41 = (char *)a3 - ((char *)a2 + 2 * v27) - 8;
      v15 = result;
      if (v41 < 0x38)
        goto LABEL_47;
      v42 = (v41 >> 3) + 1;
      v29 = (int32x4_t *)((char *)v29 + 8 * (v42 & 0x3FFFFFFFFFFFFFF8));
      v15 = (int32x4_t *)((char *)result + 4 * (v42 & 0x3FFFFFFFFFFFFFF8));
      v43 = result + 1;
      v44 = (int32x4_t *)((char *)a2 + 8 * v28 + 32);
      v45 = v42 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v47 = v44[-2];
        v46 = v44[-1];
        v49 = *v44;
        v48 = v44[1];
        v44 += 4;
        v43[-1] = vuzp1q_s32(v47, v46);
        *v43 = vuzp1q_s32(v49, v48);
        v43 += 2;
        v45 -= 8;
      }
      while (v45);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          v50 = v29->i64[0];
          v29 = (int32x4_t *)((char *)v29 + 8);
          v15->i32[0] = v50;
          v15 = (int32x4_t *)((char *)v15 + 4);
        }
        while (v29 != a3);
      }
    }
    goto LABEL_39;
  }
  if (a2 == a3)
  {
    v52 = (char *)v10;
  }
  else
  {
    v51 = (char *)a3 - (char *)a2 - 8;
    v52 = (char *)v10;
    v53 = a2;
    if (v51 < 0x38)
      goto LABEL_48;
    v54 = (v51 >> 3) + 1;
    v52 = &v9->i8[4 * (v54 & 0x3FFFFFFFFFFFFFF8)];
    v53 = (int32x4_t *)((char *)a2 + 8 * (v54 & 0x3FFFFFFFFFFFFFF8));
    v55 = a2 + 2;
    v56 = v9 + 1;
    v57 = v54 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v59 = v55[-2];
      v58 = v55[-1];
      v61 = *v55;
      v60 = v55[1];
      v55 += 4;
      v56[-1] = vuzp1q_s32(v59, v58);
      *v56 = vuzp1q_s32(v61, v60);
      v56 += 2;
      v57 -= 8;
    }
    while (v57);
    if (v54 != (v54 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_48:
      do
      {
        v62 = v53->i64[0];
        v53 = (int32x4_t *)((char *)v53 + 8);
        *(_DWORD *)v52 = v62;
        v52 += 4;
      }
      while (v53 != a3);
    }
  }
  *v14 = (int32x4_t *)((char *)v10 + v52 - (char *)v9);
  return result;
}

uint64_t sub_20F28C77C(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F28CB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F28CB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F28CB48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

char *sub_20F28CB6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
                return (char *)v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
              return (char *)v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v17 = (char *)operator new(0x190uLL);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v8;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v17 + 4) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v17 + 72) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(v17 + 88) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(v17 + 104) = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(v17 + 120) = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(v17 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v17 + 248) = *(_OWORD *)(a3 + 232);
  *(_OWORD *)(v17 + 232) = *(_OWORD *)(a3 + 216);
  *(_OWORD *)(v17 + 216) = *(_OWORD *)(a3 + 200);
  *(_OWORD *)(v17 + 200) = *(_OWORD *)(a3 + 184);
  *(_OWORD *)(v17 + 184) = *(_OWORD *)(a3 + 168);
  *(_OWORD *)(v17 + 168) = *(_OWORD *)(a3 + 152);
  *(_OWORD *)(v17 + 152) = *(_OWORD *)(a3 + 136);
  *(_OWORD *)(v17 + 136) = *(_OWORD *)(a3 + 120);
  v18 = *(_OWORD *)(a3 + 248);
  v19 = *(_OWORD *)(a3 + 280);
  *(_OWORD *)(v17 + 280) = *(_OWORD *)(a3 + 264);
  *(_OWORD *)(v17 + 296) = v19;
  *(_OWORD *)(v17 + 264) = v18;
  v20 = *(_OWORD *)(a3 + 296);
  v21 = *(_OWORD *)(a3 + 312);
  v22 = *(_OWORD *)(a3 + 360);
  *(_OWORD *)(v17 + 360) = *(_OWORD *)(a3 + 344);
  *(_OWORD *)(v17 + 376) = v22;
  v23 = *(_OWORD *)(a3 + 328);
  *(_OWORD *)(v17 + 328) = v21;
  *(_OWORD *)(v17 + 344) = v23;
  *(_OWORD *)(v17 + 312) = v20;
  *((_QWORD *)v17 + 49) = *(_QWORD *)(a3 + 376);
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (v9 && (float)(v25 * (float)v9) >= v24)
  {
    v8 = v3;
  }
  else
  {
    v26 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    v27 = v26 | (2 * v9);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_41;
    if (prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < v9)
LABEL_41:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v8 %= v9;
    }
    else
    {
      v8 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v34)
  {
    *(_QWORD *)v17 = *v34;
LABEL_64:
    *v34 = v17;
    goto LABEL_65;
  }
  *(_QWORD *)v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v33 + 8 * v8) = a1 + 16;
  if (*(_QWORD *)v17)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20F28CF4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F28CF60(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, int a7@<W6>, void **p_p@<X8>, float64x2_t a9@<Q0>, double a10@<D1>, double a11@<D2>)
{
  float v18;
  float64x2_t *v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  double v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  double v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t *v67;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t *v88;
  double v89;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t *v96;
  double v97;
  float64x2_t v103;
  double v106;
  double v108;
  uint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unsigned int v129;
  _OWORD *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  float64x2_t *v142;
  double *v143;
  unint64_t v144;
  char *v145;
  __int128 v146;
  char *v147;
  __int128 v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  int64_t v157;
  double *v158;
  __int128 v159;
  double *v160;
  uint64_t v161;
  uint64_t v162;
  float64x2_t *v163;
  uint64_t v164;
  unint64_t v165;
  __int128 v166;
  double *v167;
  __int128 v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  double *v180;
  void *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  double *v193;
  uint64_t v194;
  double v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t *v198;
  _BOOL4 v199;
  void **v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  _BOOL4 v204;
  uint64_t **v205;
  unint64_t v206;
  unint64_t v207;
  float64x2_t v208;
  int v209;
  float64x2_t v210;
  uint64_t v211;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  unint64_t *v216;
  __int128 v217;
  uint64_t v218;
  void *__p;
  char *v220;
  char *v221;
  float64x2_t v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  _QWORD v226[3];
  _QWORD *v227;
  uint64_t v228;

  v18 = *(float *)a9.f64;
  v228 = *MEMORY[0x24BDAC8D0];
  if (a10 > 1.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 457, (uint64_t)"view_distance_z_scaling <= 1.0", 30, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v21 = *(float64x2_t **)(a2 + 16);
  a9.f64[0] = v21[1].f64[0];
  v208 = a9;
  v22 = *v21;
  v23 = *(_QWORD *)a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (*(_DWORD *)(a2 + 8) + 6);
  v213 = *(float64x2_t *)v23;
  v24.f64[1] = *(float64_t *)(v23 + 8);
  v214 = v22;
  v24.f64[0] = *(float64_t *)(v23 + 16);
  v210 = v24;
  _Q0.f64[0] = cos(v18 * 0.0174532925);
  v26 = _Q0.f64[0];
  __p = 0;
  v220 = 0;
  v221 = 0;
  if (a3 != -1 && 2 * a3)
  {
    if ((2 * a3) >> 59)
      sub_20E867F44();
    __p = operator new(a3 << 6);
    v220 = (char *)__p;
    v221 = (char *)__p + 64 * a3;
  }
  v28 = *a4;
  v27 = a4[1];
  if ((unint64_t)((char *)v27 - (char *)*a4) < 0xA1)
  {
    v32 = 0;
  }
  else
  {
    if (v28 == v27 || (v29 = v28 + 2, v28 + 2 == v27))
    {
LABEL_17:
      v29 = a4[1];
    }
    else
    {
      v30 = *v28;
      while (1)
      {
        v31 = *v29;
        if (*v29 < v30 || *v29 == v30 && *((_DWORD *)v29 + 2) < *((_DWORD *)v29 - 2))
          break;
        v29 += 2;
        v30 = v31;
        if (v29 == v27)
          goto LABEL_17;
      }
    }
    v32 = v29 == v27;
  }
  v226[0] = &off_24C9FC308;
  v226[1] = a1;
  v226[2] = 0;
  v227 = v226;
  if (v28 == v27)
    goto LABEL_86;
  v33 = *(_QWORD *)(a1 + 64);
  v34 = *(unint64_t **)a1;
  v35 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (v33 <= v35)
  {
    if (v33 < v35)
      *(_QWORD *)(a1 + 8) = &v34[2 * v33];
  }
  else
  {
    sub_20F28E194(a1, v33 - v35);
    v34 = *(unint64_t **)a1;
  }
  if (!v32)
  {
    v36 = *(_QWORD **)(a1 + 48);
LABEL_35:
    if (v36 == (_QWORD *)(a1 + 56))
      goto LABEL_83;
    while (1)
    {
      v44 = *a4;
      v43 = a4[1];
      if (*a4 != v43)
      {
        while (*v44 != v36[4] || *((_DWORD *)v44 + 2) != *((_DWORD *)v36 + 10))
        {
          v44 += 2;
          if (v44 == v43)
            goto LABEL_46;
        }
      }
      if (v44 == v43)
      {
LABEL_46:
        v46 = v36[4];
        *((_DWORD *)v34 + 2) = *((_DWORD *)v36 + 10);
        *v34 = v46;
        v34 += 2;
        v45 = (_QWORD *)v36[1];
        if (v45)
        {
          do
          {
LABEL_47:
            v47 = v45;
            v45 = (_QWORD *)*v45;
          }
          while (v45);
          goto LABEL_37;
        }
      }
      else
      {
        v45 = (_QWORD *)v36[1];
        if (v45)
          goto LABEL_47;
      }
      do
      {
        v47 = (_QWORD *)v36[2];
        _ZF = *v47 == (_QWORD)v36;
        v36 = v47;
      }
      while (!_ZF);
LABEL_37:
      v36 = v47;
      if (v47 == (_QWORD *)(a1 + 56))
        goto LABEL_83;
    }
  }
  v36 = *(_QWORD **)(a1 + 48);
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_35;
  v37 = *a4;
  v38 = a4[1];
  if (v38 != *a4)
  {
    v39 = ((char *)v38 - (char *)*a4) >> 4;
    v40 = v36[4];
    do
    {
      v41 = v39 >> 1;
      v42 = &v37[2 * (v39 >> 1)];
      if (*v42 < v40 || *v42 == v40 && LODWORD(v37[2 * v41 + 1]) < *((_DWORD *)v36 + 10))
      {
        v37 = v42 + 2;
        v41 = v39 + ~v41;
      }
      v39 = v41;
    }
    while (v41);
  }
  v49 = (_QWORD *)(a1 + 56);
  if (v37 == v38)
  {
    if (v36 != v49)
    {
      do
      {
        v55 = v36[4];
        *((_DWORD *)v34 + 2) = *((_DWORD *)v36 + 10);
        *v34 = v55;
        v56 = (_QWORD *)v36[1];
        if (v56)
        {
          do
          {
            v57 = v56;
            v56 = (_QWORD *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (_QWORD *)v36[2];
            _ZF = *v57 == (_QWORD)v36;
            v36 = v57;
          }
          while (!_ZF);
        }
        v34 += 2;
        v36 = v57;
      }
      while (v57 != v49);
    }
    goto LABEL_83;
  }
  if (v36 == v49)
    goto LABEL_83;
  while (2)
  {
    v50 = v36[4];
    v51 = *((_DWORD *)v36 + 10);
    while (1)
    {
      v52 = *v37;
      if (*v37 < v50)
      {
        if (v37 == v38)
          goto LABEL_82;
        goto LABEL_56;
      }
      if (*v37 != v50)
        goto LABEL_62;
      if (v37 == v38 || *((_DWORD *)v37 + 2) >= v51)
        break;
LABEL_56:
      v37 += 2;
    }
    v52 = v36[4];
LABEL_62:
    if (v37 == v38)
    {
LABEL_82:
      if (v36 != v49)
      {
        do
        {
          v60 = v36[4];
          *((_DWORD *)v34 + 2) = *((_DWORD *)v36 + 10);
          *v34 = v60;
          v61 = (_QWORD *)v36[1];
          if (v61)
          {
            do
            {
              v62 = v61;
              v61 = (_QWORD *)*v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              v62 = (_QWORD *)v36[2];
              _ZF = *v62 == (_QWORD)v36;
              v36 = v62;
            }
            while (!_ZF);
          }
          v34 += 2;
          v36 = v62;
        }
        while (v62 != v49);
      }
      break;
    }
    if (v52 != v50 || *((_DWORD *)v37 + 2) != v51)
    {
      *v34 = v50;
      *((_DWORD *)v34 + 2) = v51;
      v34 += 2;
    }
    v53 = (_QWORD *)v36[1];
    if (v53)
    {
      do
      {
        v54 = v53;
        v53 = (_QWORD *)*v53;
      }
      while (v53);
    }
    else
    {
      do
      {
        v54 = (_QWORD *)v36[2];
        _ZF = *v54 == (_QWORD)v36;
        v36 = v54;
      }
      while (!_ZF);
    }
    v36 = v54;
    if (v54 != v49)
      continue;
    break;
  }
LABEL_83:
  v58 = *(unint64_t **)a1;
  if (v34 != *(unint64_t **)(a1 + 8))
    *(_QWORD *)(a1 + 8) = v34;
  if (v58 == v34)
    goto LABEL_280;
LABEL_86:
  v209 = a7;
  v207 = a3;
  if (a3 == -1)
  {
    v204 = 0;
    v59 = *(uint64_t **)(a1 + 1800);
    if (!v59)
      goto LABEL_252;
    goto LABEL_97;
  }
  v204 = *(_QWORD *)(a1 + 64) > a3;
  v59 = *(uint64_t **)(a1 + 1800);
  if (v59)
  {
LABEL_97:
    _Q2 = v213;
    _Q1 = v214;
    v63 = a11 * a11;
    v65 = *(unint64_t **)a1;
    v64 = *(unint64_t **)(a1 + 8);
    v66 = a4[1];
    v216 = *a4;
    v67 = (uint64_t *)(a1 + 56);
    v211 = a6;
    v205 = (uint64_t **)(a1 + 32);
    *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
    v215 = _Q1;
    v206 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    *(_QWORD *)&_Q2.f64[1] = v206;
    __asm { FMOV            V0.2D, #0.5 }
    v201 = _Q0;
    v202 = _Q2;
    do
    {
      v73 = v59 + 2;
      if (v65 == v64)
      {
        if (v216 != v66)
        {
          v112 = *a4;
          if (v32)
          {
            v113 = a4[1];
            if (v113 != v112)
            {
              v114 = ((char *)v113 - (char *)v112) >> 4;
              v115 = v59[2];
              do
              {
                v116 = v114 >> 1;
                v117 = &v112[2 * (v114 >> 1)];
                if (*v117 < v115 || *v117 == v115 && LODWORD(v112[2 * v116 + 1]) < *((_DWORD *)v59 + 6))
                {
                  v112 = v117 + 2;
                  v116 = v114 + ~v116;
                }
                v114 = v116;
              }
              while (v116);
            }
            if (v112 != v113 || *v113 == *v73 && *((_DWORD *)v113 + 2) == *((_DWORD *)v59 + 6))
              goto LABEL_99;
          }
          else
          {
            v118 = a4[1];
            if (v112 != v118)
            {
              while (*v112 != v59[2] || *((_DWORD *)v112 + 2) != *((_DWORD *)v59 + 6))
              {
                v112 += 2;
                if (v112 == v118)
                  goto LABEL_143;
              }
            }
            if (v112 != v118)
              goto LABEL_99;
          }
        }
LABEL_143:
        v119 = *v67;
        if (!*v67)
          goto LABEL_99;
        v80 = v59[2];
        v81 = *((_DWORD *)v59 + 6);
        v120 = a1 + 56;
        do
        {
          v121 = *(_QWORD *)(v119 + 32);
          if (v121 < v80)
          {
            v119 += 8;
          }
          else if (v121 == v80)
          {
            if (*(_DWORD *)(v119 + 40) < v81)
              v119 += 8;
            else
              v120 = v119;
          }
          else
          {
            v120 = v119;
          }
          v119 = *(_QWORD *)v119;
        }
        while (v119);
        if ((uint64_t *)v120 == v67)
          goto LABEL_99;
        v122 = *(_QWORD *)(v120 + 32);
        if (v80 < v122 || v80 == v122 && *(_DWORD *)(v120 + 40) > v81)
          goto LABEL_99;
        if (!*(_QWORD *)(v120 + 48))
          goto LABEL_99;
      }
      else
      {
        v75 = *(unint64_t **)a1;
        v74 = *(unint64_t **)(a1 + 8);
        if (v74 != *(unint64_t **)a1)
        {
          v76 = ((uint64_t)v74 - *(_QWORD *)a1) >> 4;
          v77 = v59[2];
          do
          {
            v78 = v76 >> 1;
            v79 = &v75[2 * (v76 >> 1)];
            if (*v79 < v77 || *v79 == v77 && LODWORD(v75[2 * v78 + 1]) < *((_DWORD *)v59 + 6))
            {
              v75 = v79 + 2;
              v78 = v76 + ~v78;
            }
            v76 = v78;
          }
          while (v78);
        }
        if (v75 == v74)
          goto LABEL_99;
        v80 = *v75;
        if (*v75 != *v73)
          goto LABEL_99;
        v81 = *((_DWORD *)v75 + 2);
        if (v81 != *((_DWORD *)v59 + 6))
          goto LABEL_99;
      }
      if (v211 && v80 != a5)
        goto LABEL_99;
      v82 = v59[5];
      v83 = *(float64x2_t *)v82;
      _D3 = *(_QWORD *)(v82 + 40);
      v85 = *(float64x2_t *)(v82 + 24);
      v86 = *(double *)(v82 + 64);
      v87 = *(float64x2_t *)(v82 + 48);
      v88 = (float64x2_t *)(v59[9] - 8 * *((unsigned int *)v59 + 20) + 8 * (*((_DWORD *)v59 + 20) + 6));
      v89 = v88[1].f64[0];
      _Q16 = *v88;
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v83, v88->f64[0]), v85, *v88, 1), v87, v89);
      __asm { FMLA            D17, D3, V16.D[1] }
      _Q2.f64[0] = _D17 + v86 * v89;
      _Q16.f64[1] = v213.f64[1];
      _D17 = v206;
      __asm { FMLA            D16, D17, V0.D[1] }
      if (_Q16.f64[0] + v210.f64[0] * _Q2.f64[0] < v26)
        goto LABEL_99;
      v94 = (float64x2_t *)v59[7];
      _Q16.f64[0] = v94[1].f64[0];
      v95 = *v94;
      v96 = (float64x2_t *)v59[11];
      v97 = v96[1].f64[0];
      _Q19 = *v96;
      __asm { FMLA            D1, D3, V19.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + v86 * v97;
      _Q3 = vsubq_f64(v215, vaddq_f64(v95, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v83, v96->f64[0]), v85, *v96, 1), v87, v97)));
      _Q1 = vsubq_f64(v208, vaddq_f64(_Q16, _Q1));
      _Q5 = vmulq_f64(_Q3, _Q3);
      _D4 = _Q3.f64[1];
      __asm { FMLA            D5, D4, V3.D[1] }
      _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], _Q1.f64[0], _Q1.f64[0]);
      v203 = _Q5;
      if (_Q5.f64[0] > v63)
        goto LABEL_99;
      if (a10 < 1.0)
      {
        *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
        _Q4 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
        _Q0 = vmulq_f64(vaddq_f64(v202, _Q0), v201);
        _Q3.f64[1] = _Q4.f64[0];
        v103 = vmulq_f64(vaddq_f64(v210, _Q2), v201);
        __asm { FMLA            D5, D4, V0.D[1] }
        _Q4.f64[0] = _Q0.f64[1];
        v106 = vmlad_n_f64(_D5, _Q1.f64[0], v103.f64[0]);
        __asm { FMLA            D6, D4, V0.D[1] }
        v108 = vmlad_n_f64(_D6, v103.f64[0], v103.f64[0]);
        if (v108 == 0.0)
          _Q4.f64[0] = 1.0;
        else
          _Q4.f64[0] = v108;
        _Q4.f64[0] = (1.0 - a10) * (v106 / _Q4.f64[0]);
        _Q1 = vmlsq_f64(_Q1, v103, _Q4);
        _Q3 = vmlsq_lane_f64(_Q3, _Q0, _Q4.f64[0], 0);
        _Q2 = vmulq_f64(_Q3, _Q3);
        _D0 = _Q3.f64[1];
        __asm { FMLA            D2, D0, V3.D[1] }
        _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], _Q1.f64[0], _Q1.f64[0]);
        v203 = _Q2;
      }
      if (*(_QWORD *)(a1 + 40) < v207)
      {
LABEL_169:
        v199 = v32;
        v200 = p_p;
        v217 = *(_OWORD *)v73;
        v218 = v59[4];
        if (v204)
        {
          v125 = a1 + 32;
LABEL_171:
          while (1)
          {
            v126 = *(_QWORD *)v125;
            v127 = (_QWORD *)v125;
            if (!*(_QWORD *)v125)
              break;
            while (1)
            {
              v125 = v126;
              v128 = *(_QWORD *)(v126 + 32);
              if (v80 < v128)
                break;
              if (v80 == v128)
              {
                v129 = *(_DWORD *)(v125 + 40);
                if (v81 < v129)
                  goto LABEL_171;
                if (v129 >= v81)
                  goto LABEL_183;
              }
              else if (v128 >= v80)
              {
                goto LABEL_183;
              }
              v126 = *(_QWORD *)(v125 + 8);
              if (!v126)
              {
                v127 = (_QWORD *)(v125 + 8);
                goto LABEL_180;
              }
            }
          }
LABEL_180:
          v130 = operator new(0x30uLL);
          v130[2] = *(_OWORD *)v73;
          *(_QWORD *)v130 = 0;
          *((_QWORD *)v130 + 1) = 0;
          *((_QWORD *)v130 + 2) = v125;
          *v127 = v130;
          v131 = **(_QWORD **)(a1 + 24);
          if (v131)
          {
            *(_QWORD *)(a1 + 24) = v131;
            v130 = (_OWORD *)*v127;
          }
          sub_20E868578(*(uint64_t **)(a1 + 32), (uint64_t *)v130);
          ++*(_QWORD *)(a1 + 40);
        }
LABEL_183:
        v132 = v220;
        if (v220 >= v221)
        {
          v134 = (char *)__p;
          v135 = (v220 - (_BYTE *)__p) >> 5;
          v136 = v135 + 1;
          if ((unint64_t)(v135 + 1) >> 59)
            sub_20E867F44();
          v137 = v221 - (_BYTE *)__p;
          if ((v221 - (_BYTE *)__p) >> 4 > v136)
            v136 = v137 >> 4;
          if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFE0)
            v138 = 0x7FFFFFFFFFFFFFFLL;
          else
            v138 = v136;
          if (v138)
          {
            v198 = v66;
            if (v138 >> 59)
              sub_20E877A38();
            v139 = v138;
            v140 = (char *)operator new(32 * v138);
            v138 = v139;
            v66 = v198;
          }
          else
          {
            v140 = 0;
          }
          v141 = &v140[32 * v135];
          *(_OWORD *)v141 = v217;
          *((_QWORD *)v141 + 2) = v218;
          _Q0.f64[0] = v203.f64[0];
          *((_QWORD *)v141 + 3) = *(_QWORD *)&v203.f64[0];
          v142 = (float64x2_t *)v141;
          if (v132 != v134)
          {
            do
            {
              _Q0 = *((float64x2_t *)v132 - 2);
              _Q1 = *((float64x2_t *)v132 - 1);
              v142[-2] = _Q0;
              v142[-1] = _Q1;
              v142 -= 2;
              v132 -= 32;
            }
            while (v132 != v134);
            v132 = v134;
          }
          v133 = v141 + 32;
          __p = v142;
          v220 = v141 + 32;
          v221 = &v140[32 * v138];
          if (v132)
            operator delete(v132);
        }
        else
        {
          *(_OWORD *)v220 = v217;
          *((_QWORD *)v132 + 2) = v218;
          _Q0.f64[0] = v203.f64[0];
          *((_QWORD *)v132 + 3) = *(_QWORD *)&v203.f64[0];
          v133 = v132 + 32;
        }
        v220 = v133;
        v143 = (double *)__p;
        p_p = v200;
        if (v133 - (_BYTE *)__p >= 33)
        {
          v144 = (((unint64_t)(v133 - (_BYTE *)__p) >> 5) - 2) >> 1;
          _Q0.f64[0] = *((float64_t *)v133 - 1);
          if (*((double *)__p + 4 * v144 + 3) < _Q0.f64[0])
          {
            v145 = v133 - 32;
            v146 = *((_OWORD *)v133 - 2);
            v225 = *((_QWORD *)v133 - 2);
            v224 = v146;
            do
            {
              v147 = v145;
              v145 = (char *)&v143[4 * v144];
              v148 = *(_OWORD *)v145;
              *((_DWORD *)v147 + 4) = *((_DWORD *)v145 + 4);
              *(_OWORD *)v147 = v148;
              *((_QWORD *)v147 + 3) = *((_QWORD *)v145 + 3);
              if (!v144)
                break;
              v144 = (v144 - 1) >> 1;
            }
            while (v143[4 * v144 + 3] < _Q0.f64[0]);
            _Q1.f64[1] = *((float64_t *)&v224 + 1);
            *(_OWORD *)v145 = v224;
            *((_DWORD *)v145 + 4) = v225;
            *((_QWORD *)v145 + 3) = *(_QWORD *)&_Q0.f64[0];
          }
        }
        v32 = v199;
        while (*(_QWORD *)(a1 + 40) > v207)
        {
          v149 = (char *)__p;
          v150 = v220;
          v151 = v220 - (_BYTE *)__p;
          if (v220 - (_BYTE *)__p >= 33)
          {
            v155 = 0;
            v156 = v151 >> 5;
            v222 = *(float64x2_t *)__p;
            v223 = *((_QWORD *)__p + 2);
            _Q0.f64[0] = *((float64_t *)__p + 3);
            v157 = (unint64_t)((v151 >> 5) - 2) >> 1;
            v158 = (double *)__p;
            do
            {
              v160 = v158;
              v158 += 4 * v155 + 4;
              v161 = 2 * v155;
              v155 = (2 * v155) | 1;
              v162 = v161 + 2;
              if (v162 < v156 && v158[3] < v158[7])
              {
                v158 += 4;
                v155 = v162;
              }
              v159 = *(_OWORD *)v158;
              *((_DWORD *)v160 + 4) = *((_DWORD *)v158 + 4);
              *(_OWORD *)v160 = v159;
              v160[3] = v158[3];
            }
            while (v155 <= v157);
            v163 = (float64x2_t *)(v150 - 32);
            if (v158 == (double *)(v150 - 32))
            {
              _Q1 = v222;
              *((_DWORD *)v158 + 4) = v223;
              *(float64x2_t *)v158 = _Q1;
              v158[3] = _Q0.f64[0];
            }
            else
            {
              _Q1 = *v163;
              *((_DWORD *)v158 + 4) = *((_DWORD *)v150 - 4);
              *(float64x2_t *)v158 = _Q1;
              v158[3] = *((double *)v150 - 1);
              _Q1.f64[1] = v222.f64[1];
              *v163 = v222;
              *((_DWORD *)v150 - 4) = v223;
              *((_QWORD *)v150 - 1) = *(_QWORD *)&_Q0.f64[0];
              v164 = (char *)v158 - v149 + 32;
              if (v164 >= 33)
              {
                v165 = (((unint64_t)v164 >> 5) - 2) >> 1;
                _Q0.f64[0] = v158[3];
                if (*(double *)&v149[32 * v165 + 24] < _Q0.f64[0])
                {
                  v166 = *(_OWORD *)v158;
                  v225 = *((_QWORD *)v158 + 2);
                  v224 = v166;
                  do
                  {
                    v167 = v158;
                    v158 = (double *)&v149[32 * v165];
                    v168 = *(_OWORD *)v158;
                    *((_DWORD *)v167 + 4) = *((_DWORD *)v158 + 4);
                    *(_OWORD *)v167 = v168;
                    v167[3] = v158[3];
                    if (!v165)
                      break;
                    v165 = (v165 - 1) >> 1;
                  }
                  while (*(double *)&v149[32 * v165 + 24] < _Q0.f64[0]);
                  _Q1.f64[1] = *((float64_t *)&v224 + 1);
                  *(_OWORD *)v158 = v224;
                  *((_DWORD *)v158 + 4) = v225;
                  v158[3] = _Q0.f64[0];
                }
              }
            }
            v149 = (char *)__p;
            v152 = v220 - 32;
            v153 = *((_QWORD *)v220 - 4);
            v154 = *((_DWORD *)v220 - 6);
            v220 = v152;
            if (__p != v152)
            {
LABEL_227:
              while (*(_QWORD *)v149 != v153 || *((_DWORD *)v149 + 2) != v154)
              {
                v149 += 32;
                if (v149 == v152)
                  goto LABEL_230;
              }
            }
          }
          else
          {
            v152 = v220 - 32;
            v153 = *((_QWORD *)v220 - 4);
            v154 = *((_DWORD *)v220 - 6);
            v220 = v152;
            if (__p != v152)
              goto LABEL_227;
          }
          if (v149 == v152)
          {
LABEL_230:
            v169 = *v205;
            if (*v205)
            {
              v170 = a1 + 32;
              v171 = *v205;
              do
              {
                v172 = v171[4];
                if (v172 < v153)
                {
                  ++v171;
                }
                else if (v172 == v153)
                {
                  if (*((_DWORD *)v171 + 10) < v154)
                    ++v171;
                  else
                    v170 = (uint64_t)v171;
                }
                else
                {
                  v170 = (uint64_t)v171;
                }
                v171 = (uint64_t *)*v171;
              }
              while (v171);
              if ((uint64_t **)v170 != v205)
              {
                v173 = *(_QWORD *)(v170 + 32);
                if (v153 >= v173 && (v153 != v173 || v154 >= *(_DWORD *)(v170 + 40)))
                {
                  v174 = *(_QWORD **)(v170 + 8);
                  v175 = (_QWORD *)v170;
                  if (v174)
                  {
                    do
                    {
                      v176 = v174;
                      v174 = (_QWORD *)*v174;
                    }
                    while (v174);
                  }
                  else
                  {
                    do
                    {
                      v176 = (_QWORD *)v175[2];
                      _ZF = *v176 == (_QWORD)v175;
                      v175 = v176;
                    }
                    while (!_ZF);
                  }
                  if (*(_QWORD *)(a1 + 24) == v170)
                    *(_QWORD *)(a1 + 24) = v176;
                  --*(_QWORD *)(a1 + 40);
                  sub_20E8D2134(v169, (uint64_t *)v170);
                  operator delete((void *)v170);
                }
              }
            }
            goto LABEL_99;
          }
        }
        goto LABEL_99;
      }
      v111 = a1 + 32;
      while (1)
      {
        v111 = *(_QWORD *)v111;
        if (!v111)
          break;
        v123 = *(_QWORD *)(v111 + 32);
        if (v80 >= v123)
        {
          if (v80 != v123)
          {
            if (v123 >= v80)
              goto LABEL_169;
            goto LABEL_160;
          }
          v124 = *(_DWORD *)(v111 + 40);
          if (v81 >= v124)
          {
            if (v124 >= v81)
              goto LABEL_169;
LABEL_160:
            v111 += 8;
          }
        }
      }
      if (__p == v220)
        goto LABEL_169;
      _Q0.f64[0] = *((float64_t *)__p + 3);
      _Q1.f64[1] = v203.f64[1];
      if (_Q0.f64[0] >= v203.f64[0])
        goto LABEL_169;
LABEL_99:
      v59 = (uint64_t *)*v59;
    }
    while (v59);
  }
LABEL_252:
  v177 = 126 - 2 * __clz((v220 - (_BYTE *)__p) >> 5);
  if (v220 == __p)
    v178 = 0;
  else
    v178 = v177;
  sub_20F28E2B8((uint64_t)__p, v220, (uint64_t)&v224, v178, 1, _Q0.f64[0]);
  v180 = (double *)__p;
  v179 = v220;
  if (!v209)
    goto LABEL_270;
  v181 = __p;
  if (v220 != __p)
  {
    v182 = 0;
    v183 = (v220 - (_BYTE *)__p) >> 5;
    do
    {
      v184 = v182++;
      if (v182 < v183)
      {
        v185 = *((unsigned int *)__p + 8 * v184 + 2) + (uint64_t)v209;
        v186 = v182;
        do
        {
          v188 = (char *)__p + 32 * v186;
          if (v185 > *((unsigned int *)v188 + 2))
          {
            if (v188 + 32 == v179)
            {
              v187 = (char *)__p + 32 * v186;
            }
            else
            {
              v187 = (char *)__p + 32 * v186;
              do
              {
                *(_OWORD *)v188 = *((_OWORD *)v188 + 2);
                *((_DWORD *)v188 + 4) = *((_DWORD *)v188 + 12);
                *((_QWORD *)v188 + 3) = *((_QWORD *)v188 + 7);
                v189 = v188 + 64;
                v188 += 32;
                v187 += 32;
              }
              while (v189 != v179);
            }
            v220 = v187;
            --v186;
            --v183;
            v179 = v187;
          }
          ++v186;
        }
        while (v186 < v183);
      }
    }
    while (v182 < v183);
    v180 = (double *)__p;
LABEL_270:
    if (v180 == (double *)v179)
    {
      v180 = (double *)v179;
    }
    else
    {
      v190 = v179 - (char *)v180 - 32;
      v191 = (char *)v180;
      if (v190 < 0x20)
        goto LABEL_296;
      v192 = (v190 >> 5) + 1;
      v191 = (char *)&v180[4 * (v192 & 0xFFFFFFFFFFFFFFELL)];
      v193 = v180 + 7;
      v194 = v192 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v195 = sqrt(*v193);
        *(v193 - 4) = sqrt(*(v193 - 4));
        *v193 = v195;
        v193 += 8;
        v194 -= 2;
      }
      while (v194);
      if (v192 != (v192 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_296:
        do
        {
          *((double *)v191 + 3) = sqrt(*((double *)v191 + 3));
          v191 += 32;
        }
        while (v191 != v179);
      }
    }
    v181 = v179;
  }
  *p_p = v180;
  p_p[1] = v181;
  p_p[2] = v221;
  p_p = &__p;
LABEL_280:
  *p_p = 0;
  p_p[1] = 0;
  p_p[2] = 0;
  if (!v227)
    sub_20E86D37C();
  (*(void (**)(_QWORD *))(*v227 + 48))(v227);
  v196 = v227;
  if (v227 == v226)
  {
    v197 = 4;
    v196 = v226;
LABEL_285:
    (*(void (**)(void))(*v196 + 8 * v197))();
  }
  else if (v227)
  {
    v197 = 5;
    goto LABEL_285;
  }
  if (__p)
  {
    v220 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20F28E01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;

  sub_20E961DB0((_QWORD *)(v43 - 176));
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F28E070()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F28E084(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9FC308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F28E0BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FC308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F28E0DC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)v1;
  sub_20E86872C(v1 + 24, *(_QWORD **)(v1 + 32));
  *(_QWORD *)(v1 + 24) = v1 + 32;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t sub_20F28E11C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5_9eVIOState"
                     "E2EEEE37ClosestFramesAndDistanceWithExclusionINS3_6vectorEEENSC_INS3_4pairIN3cva7ImageIDINS5_4util1"
                     "8UUIDHashU32KeyPairEEEdEENS3_9allocatorISJ_EEEERKNS5_15VIOTransformRefIKdEEfmRKT_IJSH_EENS3_8option"
                     "alIyEEiddEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5"
                                "_9eVIOStateE2EEEE37ClosestFramesAndDistanceWithExclusionINS3_6vectorEEENSC_INS3_4pairIN3"
                                "cva7ImageIDINS5_4util18UUIDHashU32KeyPairEEEdEENS3_9allocatorISJ_EEEERKNS5_15VIOTransfor"
                                "mRefIKdEEfmRKT_IJSH_EENS3_8optionalIyEEiddEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5_9eVIOStateE2EEEE37ClosestFramesAndDistanceWithExclusionINS3_6vectorEEENSC_INS3_4pairIN3cva7ImageIDINS5_4util18UUIDHashU32KeyPairEEEdEENS3_9allocatorISJ_EEEERKNS5_15VIOTransformRefIKdEEfmRKT_IJSH_EENS3_8optionalIyEEiddEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5_9eVIOStateE2EEEE37ClosestFramesAndDistanceWithExclusionINS3_6vectorEEENSC_INS3_4pairIN3cva7ImageIDINS5_4util18UUIDHashU32KeyPairEEEdEENS3_9allocatorISJ_EEEERKNS5_15VIOTransformRefIKdEEfmRKT_IJSH_EENS3_8optionalIyEEiddEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F28E188()
{
  return &unk_24C9FC368;
}

void sub_20F28E194(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20E867F44();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20E877A38();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_QWORD *)v5 - 2);
        v5 -= 4;
        v18 = v5[2];
        *((_QWORD *)v13 - 2) = v17;
        v13 -= 16;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (v5)
      operator delete(v5);
  }
}

double sub_20F28E2B8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, double result)
{
  __int128 *v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double *v19;
  double v20;
  double *v21;
  double v22;
  __int128 v23;
  uint64_t *v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 *v35;
  unint64_t v36;
  double *v37;
  double v38;
  double v39;
  double *v40;
  double *v41;
  double v42;
  double v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  int v48;
  double *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  double v55;
  __int128 *v56;
  unint64_t v57;
  double *v58;
  double v59;
  double v60;
  double *v61;
  double *v62;
  double v63;
  double v64;
  __int128 v65;
  int v66;
  __int128 v67;
  __int128 v68;
  int v69;
  double *v70;
  __int128 v71;
  int v72;
  __int128 v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  __int128 v80;
  double v81;
  uint64_t v82;
  double v83;
  unint64_t v84;
  char *v85;
  char *v86;
  double v87;
  char *v88;
  double v89;
  unint64_t v90;
  __int128 v91;
  double v92;
  double v93;
  __int128 *v94;
  __int128 v95;
  BOOL v96;
  unint64_t v97;
  double v98;
  unint64_t v99;
  double v100;
  char *v101;
  char *v102;
  double v103;
  __int128 v104;
  double v105;
  double v106;
  __int128 *v107;
  __int128 v108;
  __int128 v109;
  double *v110;
  double *v111;
  double v112;
  double v113;
  __int128 *v114;
  double *v115;
  double *v116;
  double v117;
  __int128 v118;
  __int128 *v119;
  __int128 *v120;
  __int128 *v121;
  __int128 v122;
  int v123;
  double v124;
  uint64_t v125;
  __int128 v126;
  double v127;
  uint64_t v128;
  __int128 v129;
  double v130;
  char *v131;
  BOOL v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  double *v142;
  double v143;
  double *v144;
  double *v145;
  uint64_t v146;
  __int128 v147;
  int v148;
  char *v149;
  char *v150;
  double *v151;
  double *v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;

BOOL sub_20F28F264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  int v8;
  double *v9;
  double v10;
  double *v11;
  double v12;
  __int128 *v13;
  __int128 *v14;
  _QWORD *v15;
  double v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  double *v20;
  double v21;
  uint64_t v22;
  __int128 *v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  double v35;
  double v36;
  uint64_t v37;
  __int128 v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  double v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 8) < *(double *)(a1 + 24))
      {
        v6 = *(_OWORD *)a1;
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_DWORD *)(a1 + 16) = v8;
        *(_DWORD *)(a2 - 16) = v7;
        *(_OWORD *)(a2 - 32) = v6;
        *(_QWORD *)&v6 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      v9 = (double *)(a1 + 24);
      v10 = *(double *)(a1 + 24);
      v11 = (double *)(a2 - 8);
      v12 = *(double *)(a2 - 8);
      v13 = (__int128 *)(a1 + 32);
      v14 = (__int128 *)(a2 - 32);
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(double *)(a1 + 56);
      if (v16 < v10)
      {
        if (v12 >= v16)
        {
          v54 = *(_QWORD *)(a1 + 16);
          v55 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v13;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v13 = v55;
          *(_DWORD *)(a1 + 48) = v54;
          *(double *)(a1 + 24) = v16;
          *(double *)(a1 + 56) = v10;
          if (*v11 >= v10)
            return result;
          v56 = *v13;
          v57 = *(_QWORD *)(a1 + 48);
          v58 = *(_DWORD *)(a2 - 16);
          *v13 = *v14;
          *(_DWORD *)(a1 + 48) = v58;
          *(_DWORD *)(a2 - 16) = v57;
          *v14 = v56;
          v9 = (double *)(a1 + 56);
        }
        else
        {
          v17 = *(_OWORD *)a1;
          v18 = *(_QWORD *)(a1 + 16);
          v19 = *(_DWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v14;
          *(_DWORD *)(a1 + 16) = v19;
          *(_DWORD *)(a2 - 16) = v18;
          *v14 = v17;
        }
        v15 = (_QWORD *)(a2 - 8);
        goto LABEL_26;
      }
      if (v12 < v16)
      {
        v45 = *v13;
        v46 = *(_QWORD *)(a1 + 48);
        v47 = *(_DWORD *)(a2 - 16);
        *v13 = *v14;
        *(_DWORD *)(a1 + 48) = v47;
        *(_DWORD *)(a2 - 16) = v46;
        *v14 = v45;
        *(_QWORD *)&v45 = *v15;
        *v15 = *(_QWORD *)v11;
        *(_QWORD *)v11 = v45;
        if (*(double *)v15 < *v9)
        {
          v48 = *(_QWORD *)(a1 + 16);
          v49 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v13;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v13 = v49;
          *(_DWORD *)(a1 + 48) = v48;
LABEL_26:
          v59 = *v9;
          *v9 = *(double *)v15;
          *(double *)v15 = v59;
          return result;
        }
      }
      return result;
    case 4:
      sub_20F28F788((__int128 *)a1, (double *)(a1 + 32), (double *)(a1 + 64), (__int128 *)(a2 - 32));
      return 1;
    case 5:
      v29 = (__int128 *)(a1 + 32);
      v30 = (__int128 *)(a1 + 64);
      v31 = (__int128 *)(a1 + 96);
      sub_20F28F788((__int128 *)a1, (double *)(a1 + 32), (double *)(a1 + 64), (__int128 *)(a1 + 96));
      if (*(double *)(a2 - 8) < *(double *)(a1 + 120))
      {
        v32 = *v31;
        v33 = *(_QWORD *)(a1 + 112);
        v34 = *(_DWORD *)(a2 - 16);
        *v31 = *(_OWORD *)(a2 - 32);
        *(_DWORD *)(a1 + 112) = v34;
        *(_DWORD *)(a2 - 16) = v33;
        *(_OWORD *)(a2 - 32) = v32;
        *(_QWORD *)&v32 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v32;
        v35 = *(double *)(a1 + 120);
        v36 = *(double *)(a1 + 88);
        if (v35 < v36)
        {
          v37 = *(_QWORD *)(a1 + 80);
          v38 = *v30;
          *v30 = *v31;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 112);
          *v31 = v38;
          *(_DWORD *)(a1 + 112) = v37;
          *(double *)(a1 + 88) = v35;
          v39 = *(double *)(a1 + 56);
          *(double *)(a1 + 120) = v36;
          if (v35 < v39)
          {
            v40 = *(_QWORD *)(a1 + 48);
            v41 = *v29;
            *v29 = *v30;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 80);
            *v30 = v41;
            *(_DWORD *)(a1 + 80) = v40;
            *(double *)(a1 + 56) = v35;
            v42 = *(double *)(a1 + 24);
            *(double *)(a1 + 88) = v39;
            if (v35 < v42)
            {
              v43 = *(_QWORD *)(a1 + 16);
              v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v29;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
              *v29 = v44;
              *(_DWORD *)(a1 + 48) = v43;
              *(double *)(a1 + 24) = v35;
              *(double *)(a1 + 56) = v42;
            }
          }
        }
      }
      return 1;
    default:
      v20 = (double *)(a1 + 24);
      v21 = *(double *)(a1 + 24);
      v22 = a1 + 64;
      v23 = (__int128 *)(a1 + 32);
      v24 = (double *)(a1 + 56);
      v25 = *(double *)(a1 + 56);
      v26 = *(double *)(a1 + 88);
      if (v25 < v21)
      {
        if (v26 >= v25)
        {
          v60 = *(_QWORD *)(a1 + 16);
          v61 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v23;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v23 = v61;
          *(_DWORD *)(a1 + 48) = v60;
          *(double *)(a1 + 24) = v25;
          *(double *)(a1 + 56) = v21;
          if (v26 >= v21)
            goto LABEL_31;
          v62 = *(_QWORD *)(a1 + 48);
          v63 = *v23;
          *v23 = *(_OWORD *)v22;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 80);
          *(_OWORD *)v22 = v63;
          *(_DWORD *)(a1 + 80) = v62;
          v20 = (double *)(a1 + 56);
        }
        else
        {
          v27 = *(_QWORD *)(a1 + 16);
          v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v22;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 80);
          *(_OWORD *)v22 = v28;
          *(_DWORD *)(a1 + 80) = v27;
        }
        v24 = (double *)(a1 + 88);
        goto LABEL_30;
      }
      if (v26 < v25)
      {
        v50 = *(_QWORD *)(a1 + 48);
        v51 = *v23;
        *v23 = *(_OWORD *)v22;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 80);
        *(_OWORD *)v22 = v51;
        *(_DWORD *)(a1 + 80) = v50;
        *v24 = v26;
        *(double *)(a1 + 88) = v25;
        if (v26 < v21)
        {
          v52 = *(_QWORD *)(a1 + 16);
          v53 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v23;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v23 = v53;
          *(_DWORD *)(a1 + 48) = v52;
LABEL_30:
          *v20 = v26;
          *v24 = v21;
        }
      }
LABEL_31:
      v64 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      while (1)
      {
        v68 = *(double *)(v64 + 24);
        if (v68 < *(double *)(v22 + 24))
        {
          v71 = *(_OWORD *)v64;
          v72 = *(_QWORD *)(v64 + 16);
          v69 = v65;
          do
          {
            v70 = a1 + v69;
            *(_OWORD *)(v70 + 96) = *(_OWORD *)(a1 + v69 + 64);
            *(_DWORD *)(v70 + 112) = *(_DWORD *)(a1 + v69 + 80);
            *(_QWORD *)(v70 + 120) = *(_QWORD *)(a1 + v69 + 88);
            if (v69 == -64)
            {
              v67 = a1;
              goto LABEL_34;
            }
            v69 -= 32;
          }
          while (v68 < *(double *)(v70 + 56));
          v67 = a1 + v69 + 96;
LABEL_34:
          *(_OWORD *)v67 = v71;
          *(_DWORD *)(v67 + 16) = v72;
          *(double *)(v67 + 24) = v68;
          if (++v66 == 8)
            return v64 + 32 == a2;
        }
        v22 = v64;
        v65 += 32;
        v64 += 32;
        if (v64 == a2)
          return 1;
      }
  }
}

double sub_20F28F788(__int128 *a1, double *a2, double *a3, __int128 *a4)
{
  double v4;
  double *v5;
  double *v6;
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  double v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  int v35;

  v4 = a2[3];
  v5 = (double *)a1 + 3;
  v6 = a3 + 3;
  result = a3[3];
  if (v4 >= *((double *)a1 + 3))
  {
    if (result < v4)
    {
      v12 = *(_OWORD *)a2;
      v13 = *((_QWORD *)a2 + 2);
      v14 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v14;
      *((_DWORD *)a3 + 4) = v13;
      *(_OWORD *)a3 = v12;
      result = a2[3];
      a2[3] = a3[3];
      a3[3] = result;
      if (a2[3] < *v5)
      {
        v15 = *a1;
        v16 = *((_QWORD *)a1 + 2);
        v17 = *((_DWORD *)a2 + 4);
        *a1 = *(_OWORD *)a2;
        *((_DWORD *)a1 + 4) = v17;
        *((_DWORD *)a2 + 4) = v16;
        *(_OWORD *)a2 = v15;
        v11 = (uint64_t *)a1 + 3;
        v18 = (uint64_t *)(a2 + 3);
LABEL_10:
        v26 = *v11;
        *v11 = *v18;
        *v18 = v26;
        result = *v6;
      }
    }
  }
  else
  {
    if (result < v4)
    {
      v8 = *a1;
      v9 = *((_QWORD *)a1 + 2);
      v10 = *((_DWORD *)a3 + 4);
      *a1 = *(_OWORD *)a3;
      *((_DWORD *)a1 + 4) = v10;
      *((_DWORD *)a3 + 4) = v9;
      *(_OWORD *)a3 = v8;
      v11 = (uint64_t *)a1 + 3;
LABEL_9:
      v18 = (uint64_t *)(a3 + 3);
      goto LABEL_10;
    }
    v19 = *a1;
    v20 = *((_QWORD *)a1 + 2);
    v21 = *((_DWORD *)a2 + 4);
    *a1 = *(_OWORD *)a2;
    *((_DWORD *)a1 + 4) = v21;
    *((_DWORD *)a2 + 4) = v20;
    *(_OWORD *)a2 = v19;
    v22 = *((double *)a1 + 3);
    *((double *)a1 + 3) = a2[3];
    a2[3] = v22;
    result = *v6;
    if (*v6 < v22)
    {
      v23 = *(_OWORD *)a2;
      v24 = *((_QWORD *)a2 + 2);
      v25 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v25;
      *((_DWORD *)a3 + 4) = v24;
      *(_OWORD *)a3 = v23;
      v11 = (uint64_t *)(a2 + 3);
      goto LABEL_9;
    }
  }
  if (*((double *)a4 + 3) < result)
  {
    v27 = *(_OWORD *)a3;
    v28 = *((_QWORD *)a3 + 2);
    v29 = *((_DWORD *)a4 + 4);
    *(_OWORD *)a3 = *a4;
    *((_DWORD *)a3 + 4) = v29;
    *((_DWORD *)a4 + 4) = v28;
    *a4 = v27;
    *(double *)&v27 = a3[3];
    a3[3] = *((double *)a4 + 3);
    *((_QWORD *)a4 + 3) = v27;
    result = a3[3];
    if (result < a2[3])
    {
      v30 = *(_OWORD *)a2;
      v31 = *((_QWORD *)a2 + 2);
      v32 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v32;
      *((_DWORD *)a3 + 4) = v31;
      *(_OWORD *)a3 = v30;
      *(double *)&v30 = a2[3];
      a2[3] = a3[3];
      *((_QWORD *)a3 + 3) = v30;
      result = a2[3];
      if (result < *v5)
      {
        v33 = *a1;
        v34 = *((_QWORD *)a1 + 2);
        v35 = *((_DWORD *)a2 + 4);
        *a1 = *(_OWORD *)a2;
        *((_DWORD *)a1 + 4) = v35;
        *((_DWORD *)a2 + 4) = v34;
        *(_OWORD *)a2 = v33;
        result = *((double *)a1 + 3);
        *((double *)a1 + 3) = a2[3];
        a2[3] = result;
      }
    }
  }
  return result;
}

char *sub_20F28F994(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  double v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double *v28;
  __int128 v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double *v37;
  __int128 v38;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  double *v43;
  double v44;
  __int128 *v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 5;
  if (a2 - a1 >= 33 && (unint64_t)v3 >= 0x40)
  {
    v40 = (unint64_t)(v4 - 2) >> 1;
    v41 = v40;
    do
    {
      if (v40 >= v41)
      {
        v42 = (2 * v41) | 1;
        v43 = (double *)&a1[32 * v42];
        if (2 * v41 + 2 < v4 && v43[3] < v43[7])
        {
          v43 += 4;
          v42 = 2 * v41 + 2;
        }
        v44 = *(double *)&a1[32 * v41 + 24];
        if (v43[3] >= v44)
        {
          v45 = (__int128 *)&a1[32 * v41];
          v54 = *v45;
          v57 = *((_QWORD *)v45 + 2);
          do
          {
            v46 = v45;
            v45 = (__int128 *)v43;
            v47 = *(_OWORD *)v43;
            *((_DWORD *)v46 + 4) = *((_DWORD *)v43 + 4);
            *v46 = v47;
            *((double *)v46 + 3) = v43[3];
            if (v40 < v42)
              break;
            v48 = 2 * v42;
            v42 = (2 * v42) | 1;
            v43 = (double *)&a1[32 * v42];
            v49 = v48 + 2;
            if (v49 < v4 && v43[3] < v43[7])
            {
              v43 += 4;
              v42 = v49;
            }
          }
          while (v43[3] >= v44);
          *((_DWORD *)v45 + 4) = v57;
          *v45 = v54;
          *((double *)v45 + 3) = v44;
        }
      }
      v24 = v41-- <= 0;
    }
    while (!v24);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 64)
    {
      v6 = *((double *)a1 + 3);
      v7 = a2;
      do
      {
        if (*((double *)v7 + 3) < v6)
        {
          v8 = *(_OWORD *)v7;
          v9 = *((_QWORD *)v7 + 2);
          v10 = *((_DWORD *)a1 + 4);
          *(_OWORD *)v7 = *(_OWORD *)a1;
          *((_DWORD *)v7 + 4) = v10;
          *((_DWORD *)a1 + 4) = v9;
          *(_OWORD *)a1 = v8;
          v6 = *((double *)v7 + 3);
          *((_QWORD *)v7 + 3) = *((_QWORD *)a1 + 3);
          *((double *)a1 + 3) = v6;
        }
        v7 += 32;
      }
      while (v7 != a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v11 = a2;
    while (1)
    {
      if (*((double *)v11 + 3) < *((double *)a1 + 3))
      {
        v12 = *(_OWORD *)v11;
        v13 = *((_QWORD *)v11 + 2);
        v14 = *((_DWORD *)a1 + 4);
        *(_OWORD *)v11 = *(_OWORD *)a1;
        *((_DWORD *)v11 + 4) = v14;
        *((_DWORD *)a1 + 4) = v13;
        *(_OWORD *)a1 = v12;
        v15 = *((double *)v11 + 3);
        *((_QWORD *)v11 + 3) = *((_QWORD *)a1 + 3);
        *((double *)a1 + 3) = v15;
        if (v3 == 64 || *((double *)a1 + 7) >= *((double *)a1 + 11))
        {
          v16 = (__int128 *)(a1 + 32);
          v17 = 1;
          if (*((double *)a1 + 7) >= v15)
          {
LABEL_19:
            v52 = *(_OWORD *)a1;
            v55 = *((_QWORD *)a1 + 2);
            v18 = (__int128 *)a1;
            do
            {
              v19 = v18;
              v18 = v16;
              v20 = *v16;
              *((_DWORD *)v19 + 4) = *((_DWORD *)v16 + 4);
              *v19 = v20;
              *((_QWORD *)v19 + 3) = *((_QWORD *)v16 + 3);
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v17)
                break;
              v21 = 2 * v17;
              v17 = (2 * v17) | 1;
              v16 = (__int128 *)&a1[32 * v17];
              v22 = v21 + 2;
              if (v22 < v4 && *((double *)v16 + 3) < *((double *)v16 + 7))
              {
                v16 += 2;
                v17 = v22;
              }
            }
            while (*((double *)v16 + 3) >= v15);
            *((_DWORD *)v18 + 4) = v55;
            *v18 = v52;
            *((double *)v18 + 3) = v15;
          }
        }
        else
        {
          v16 = (__int128 *)(a1 + 64);
          v17 = 2;
          if (*((double *)a1 + 11) >= v15)
            goto LABEL_19;
        }
      }
      v11 += 32;
      if (v11 == a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 33)
  {
    v23 = (unint64_t)v3 >> 5;
    do
    {
      v25 = 0;
      v26 = a2;
      v50 = *(_OWORD *)a1;
      v51 = *((_QWORD *)a1 + 2);
      v27 = *((_QWORD *)a1 + 3);
      v28 = (double *)a1;
      do
      {
        v30 = v28;
        v28 += 4 * v25 + 4;
        v31 = 2 * v25;
        v25 = (2 * v25) | 1;
        v32 = v31 + 2;
        if (v32 < v23 && v28[3] < v28[7])
        {
          v28 += 4;
          v25 = v32;
        }
        v29 = *(_OWORD *)v28;
        *((_DWORD *)v30 + 4) = *((_DWORD *)v28 + 4);
        *(_OWORD *)v30 = v29;
        v30[3] = v28[3];
      }
      while (v25 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
      a2 -= 32;
      if (v28 == (double *)(v26 - 32))
      {
        *((_DWORD *)v28 + 4) = v51;
        *(_OWORD *)v28 = v50;
        *((_QWORD *)v28 + 3) = v27;
      }
      else
      {
        v33 = *(_OWORD *)a2;
        *((_DWORD *)v28 + 4) = *((_DWORD *)v26 - 4);
        *(_OWORD *)v28 = v33;
        v28[3] = *((double *)v26 - 1);
        *(_OWORD *)a2 = v50;
        *((_DWORD *)v26 - 4) = v51;
        *((_QWORD *)v26 - 1) = v27;
        v34 = (char *)v28 - a1 + 32;
        if (v34 >= 33)
        {
          v35 = (((unint64_t)v34 >> 5) - 2) >> 1;
          v36 = v28[3];
          if (*(double *)&a1[32 * v35 + 24] < v36)
          {
            v56 = *((_QWORD *)v28 + 2);
            v53 = *(_OWORD *)v28;
            do
            {
              v37 = v28;
              v28 = (double *)&a1[32 * v35];
              v38 = *(_OWORD *)v28;
              *((_DWORD *)v37 + 4) = *((_DWORD *)v28 + 4);
              *(_OWORD *)v37 = v38;
              v37[3] = v28[3];
              if (!v35)
                break;
              v35 = (v35 - 1) >> 1;
            }
            while (*(double *)&a1[32 * v35 + 24] < v36);
            *(_OWORD *)v28 = v53;
            *((_DWORD *)v28 + 4) = v56;
            v28[3] = v36;
          }
        }
      }
      v24 = v23-- <= 2;
    }
    while (!v24);
  }
  return v5;
}

uint64_t *sub_20F28FE1C(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v6 = *((unsigned int *)a2 + 2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *((unsigned int *)a2 + 2);
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *a2;
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v10[1];
            if (v14 == v6)
            {
              if (v10[2] == v11 && *((_DWORD *)v10 + 6) == (_DWORD)v6)
                return v10;
            }
            else if ((v14 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_31;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == v6)
          {
            if (v10[2] == v11 && *((_DWORD *)v10 + 6) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v12 >= v7)
              v12 %= v7;
            if (v12 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  v17 = operator new(0x20uLL);
  *v17 = 0;
  v17[1] = v6;
  *((_OWORD *)v17 + 1) = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v7 && (float)(v19 * (float)v7) >= v18)
  {
    v6 = v3;
  }
  else
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_44;
    if (prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v7)
LABEL_44:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v28)
  {
    *v17 = *v28;
LABEL_67:
    *v28 = v17;
    goto LABEL_68;
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v27 + 8 * v6) = a1 + 16;
  if (*v17)
  {
    v29 = *(_QWORD *)(*v17 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v29 >= v7)
        v29 %= v7;
    }
    else
    {
      v29 &= v7 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_67;
  }
LABEL_68:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20F29011C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F290130(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F2904C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2904E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2904F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F29051C(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *p_p;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD *v23;
  void *__p;
  void **v25;
  unsigned int *v26;
  void **v27;
  void **v28;
  void **v29;
  int v30;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v23 = (_QWORD *)v4;
  v5 = *(_DWORD *)(a2 + 8);
  v29 = *(void ***)a2;
  v30 = v5;
  sub_210216370((uint64_t)&v29);
  if (SHIBYTE(v26) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v26) >= 0)
    v7 = HIBYTE(v26);
  else
    v7 = (uint64_t)v25;
  sub_20E86A980((_QWORD *)(v4 + 16), (uint64_t)p_p, v7);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(v4 + 120);
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = *(_QWORD *)(v4 + 112);
    v12 = *(_QWORD *)(v4 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v4 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v4 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p);
  v8 = *(_DWORD *)(v4 + 120);
  if ((v8 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v22) = 0;
    v10 = __dst;
    goto LABEL_22;
  }
  v13 = *(const void **)(v4 + 40);
  v9 = *(_QWORD *)(v4 + 56) - (_QWORD)v13;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_20E860B7C();
LABEL_15:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_21;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_21:
    memmove(v10, v13, v9);
LABEL_22:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23;
  if (v23)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v23 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 16);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  __p = a1;
  v25 = __dst;
  v26 = a1;
  v27 = __dst;
  v28 = __dst;
  v20 = a1[6];
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v29 = &__p;
  ((void (*)(void ***, unsigned int *))off_24C9FC098[v20])(&v29, a1);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20F2907B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_20FD0DE48(&a16);
    _Unwind_Resume(a1);
  }
  sub_20FD0DE48(&a16);
  _Unwind_Resume(a1);
}

void sub_20F290834()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F290848(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9FC388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F290880(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FC388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F2908A0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)v1;
  sub_20E86872C(v1 + 24, *(_QWORD **)(v1 + 32));
  *(_QWORD *)(v1 + 24) = v1 + 32;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t sub_20F2908E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5_9eVIOState"
                     "E2EEEE37ClosestFramesAndDistanceWithExclusionINS3_5dequeEEENS3_6vectorINS3_4pairIN3cva7ImageIDINS5_"
                     "4util18UUIDHashU32KeyPairEEEdEENS3_9allocatorISK_EEEERKNS5_15VIOTransformRefIKdEEfmRKT_IJSI_EENS3_8"
                     "optionalIyEEiddEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5"
                                "_9eVIOStateE2EEEE37ClosestFramesAndDistanceWithExclusionINS3_5dequeEEENS3_6vectorINS3_4p"
                                "airIN3cva7ImageIDINS5_4util18UUIDHashU32KeyPairEEEdEENS3_9allocatorISK_EEEERKNS5_15VIOTr"
                                "ansformRefIKdEEfmRKT_IJSI_EENS3_8optionalIyEEiddEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5_9eVIOStateE2EEEE37ClosestFramesAndDistanceWithExclusionINS3_5dequeEEENS3_6vectorINS3_4pairIN3cva7ImageIDINS5_4util18UUIDHashU32KeyPairEEEdEENS3_9allocatorISK_EEEERKNS5_15VIOTransformRefIKdEEfmRKT_IJSI_EENS3_8optionalIyEEiddEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3vio11VIOStateSetINS5_8VIOStateIdLNS5_9eVIOStateE2EEEE37ClosestFramesAndDistanceWithExclusionINS3_5dequeEEENS3_6vectorINS3_4pairIN3cva7ImageIDINS5_4util18UUIDHashU32KeyPairEEEdEENS3_9allocatorISK_EEEERKNS5_15VIOTransformRefIKdEEfmRKT_IJSI_EENS3_8optionalIyEEiddEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F29094C()
{
  return &unk_24C9FC3E8;
}

double sub_20F290958(uint64_t a1, double *a2, uint64_t a3, char a4, double result)
{
  __int128 *v9;
  double *v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double *v18;
  double v19;
  double *v20;
  double v21;
  __int128 v22;
  uint64_t *v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 *v34;
  unint64_t v35;
  double *v36;
  double v37;
  double v38;
  double *v39;
  double *v40;
  double v41;
  double v42;
  __int128 v43;
  int v44;
  __int128 v45;
  __int128 v46;
  int v47;
  double *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  __int128 v53;
  double v54;
  __int128 *v55;
  unint64_t v56;
  double *v57;
  double v58;
  double v59;
  double *v60;
  double *v61;
  double v62;
  double v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  int v68;
  double *v69;
  __int128 v70;
  int v71;
  __int128 v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  __int128 v79;
  double v80;
  uint64_t v81;
  double v82;
  unint64_t v83;
  double *v84;
  double *v85;
  double v86;
  double *v87;
  double v88;
  unint64_t v89;
  __int128 v90;
  double v91;
  double v92;
  __int128 *v93;
  __int128 v94;
  BOOL v95;
  unint64_t v96;
  double v97;
  unint64_t v98;
  double v99;
  double *v100;
  double *v101;
  double v102;
  __int128 v103;
  double v104;
  double v105;
  __int128 *v106;
  __int128 v107;
  __int128 v108;
  double *v109;
  double *v110;
  double v111;
  double v112;
  __int128 *v113;
  double *v114;
  double *v115;
  double v116;
  __int128 v117;
  __int128 *v118;
  __int128 *v119;
  __int128 *v120;
  __int128 v121;
  int v122;
  double v123;
  uint64_t v124;
  __int128 v125;
  double v126;
  uint64_t v127;
  __int128 v128;
  double v129;
  double *v130;
  BOOL v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  int64_t v140;
  BOOL v141;
  uint64_t v142;
  unint64_t v143;
  double v144;
  unint64_t v145;
  unint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double *v152;
  unint64_t v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  __int128 v162;
  __int128 v163;
  int v164;
  double *v165;
  double v166;
  double *v167;
  double *v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  double *v172;
  double *v173;
  double *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;

BOOL sub_20F291B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  int v8;
  double *v9;
  double v10;
  double *v11;
  double v12;
  __int128 *v13;
  __int128 *v14;
  _QWORD *v15;
  double v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  double *v20;
  double v21;
  uint64_t v22;
  __int128 *v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  double v35;
  double v36;
  uint64_t v37;
  __int128 v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  double v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 8) < *(double *)(a1 + 24))
      {
        v6 = *(_OWORD *)a1;
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_DWORD *)(a1 + 16) = v8;
        *(_DWORD *)(a2 - 16) = v7;
        *(_OWORD *)(a2 - 32) = v6;
        *(_QWORD *)&v6 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      v9 = (double *)(a1 + 24);
      v10 = *(double *)(a1 + 24);
      v11 = (double *)(a2 - 8);
      v12 = *(double *)(a2 - 8);
      v13 = (__int128 *)(a1 + 32);
      v14 = (__int128 *)(a2 - 32);
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(double *)(a1 + 56);
      if (v16 < v10)
      {
        if (v12 >= v16)
        {
          v54 = *(_QWORD *)(a1 + 16);
          v55 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v13;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v13 = v55;
          *(_DWORD *)(a1 + 48) = v54;
          *(double *)(a1 + 24) = v16;
          *(double *)(a1 + 56) = v10;
          if (*v11 >= v10)
            return result;
          v56 = *v13;
          v57 = *(_QWORD *)(a1 + 48);
          v58 = *(_DWORD *)(a2 - 16);
          *v13 = *v14;
          *(_DWORD *)(a1 + 48) = v58;
          *(_DWORD *)(a2 - 16) = v57;
          *v14 = v56;
          v9 = (double *)(a1 + 56);
        }
        else
        {
          v17 = *(_OWORD *)a1;
          v18 = *(_QWORD *)(a1 + 16);
          v19 = *(_DWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v14;
          *(_DWORD *)(a1 + 16) = v19;
          *(_DWORD *)(a2 - 16) = v18;
          *v14 = v17;
        }
        v15 = (_QWORD *)(a2 - 8);
        goto LABEL_26;
      }
      if (v12 < v16)
      {
        v45 = *v13;
        v46 = *(_QWORD *)(a1 + 48);
        v47 = *(_DWORD *)(a2 - 16);
        *v13 = *v14;
        *(_DWORD *)(a1 + 48) = v47;
        *(_DWORD *)(a2 - 16) = v46;
        *v14 = v45;
        *(_QWORD *)&v45 = *v15;
        *v15 = *(_QWORD *)v11;
        *(_QWORD *)v11 = v45;
        if (*(double *)v15 < *v9)
        {
          v48 = *(_QWORD *)(a1 + 16);
          v49 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v13;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v13 = v49;
          *(_DWORD *)(a1 + 48) = v48;
LABEL_26:
          v59 = *v9;
          *v9 = *(double *)v15;
          *(double *)v15 = v59;
          return result;
        }
      }
      return result;
    case 4:
      sub_20F28F788((__int128 *)a1, (double *)(a1 + 32), (double *)(a1 + 64), (__int128 *)(a2 - 32));
      return 1;
    case 5:
      v29 = (__int128 *)(a1 + 32);
      v30 = (__int128 *)(a1 + 64);
      v31 = (__int128 *)(a1 + 96);
      sub_20F28F788((__int128 *)a1, (double *)(a1 + 32), (double *)(a1 + 64), (__int128 *)(a1 + 96));
      if (*(double *)(a2 - 8) < *(double *)(a1 + 120))
      {
        v32 = *v31;
        v33 = *(_QWORD *)(a1 + 112);
        v34 = *(_DWORD *)(a2 - 16);
        *v31 = *(_OWORD *)(a2 - 32);
        *(_DWORD *)(a1 + 112) = v34;
        *(_DWORD *)(a2 - 16) = v33;
        *(_OWORD *)(a2 - 32) = v32;
        *(_QWORD *)&v32 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v32;
        v35 = *(double *)(a1 + 120);
        v36 = *(double *)(a1 + 88);
        if (v35 < v36)
        {
          v37 = *(_QWORD *)(a1 + 80);
          v38 = *v30;
          *v30 = *v31;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 112);
          *v31 = v38;
          *(_DWORD *)(a1 + 112) = v37;
          *(double *)(a1 + 88) = v35;
          v39 = *(double *)(a1 + 56);
          *(double *)(a1 + 120) = v36;
          if (v35 < v39)
          {
            v40 = *(_QWORD *)(a1 + 48);
            v41 = *v29;
            *v29 = *v30;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 80);
            *v30 = v41;
            *(_DWORD *)(a1 + 80) = v40;
            *(double *)(a1 + 56) = v35;
            v42 = *(double *)(a1 + 24);
            *(double *)(a1 + 88) = v39;
            if (v35 < v42)
            {
              v43 = *(_QWORD *)(a1 + 16);
              v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v29;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
              *v29 = v44;
              *(_DWORD *)(a1 + 48) = v43;
              *(double *)(a1 + 24) = v35;
              *(double *)(a1 + 56) = v42;
            }
          }
        }
      }
      return 1;
    default:
      v20 = (double *)(a1 + 24);
      v21 = *(double *)(a1 + 24);
      v22 = a1 + 64;
      v23 = (__int128 *)(a1 + 32);
      v24 = (double *)(a1 + 56);
      v25 = *(double *)(a1 + 56);
      v26 = *(double *)(a1 + 88);
      if (v25 < v21)
      {
        if (v26 >= v25)
        {
          v60 = *(_QWORD *)(a1 + 16);
          v61 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v23;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v23 = v61;
          *(_DWORD *)(a1 + 48) = v60;
          *(double *)(a1 + 24) = v25;
          *(double *)(a1 + 56) = v21;
          if (v26 >= v21)
            goto LABEL_31;
          v62 = *(_QWORD *)(a1 + 48);
          v63 = *v23;
          *v23 = *(_OWORD *)v22;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 80);
          *(_OWORD *)v22 = v63;
          *(_DWORD *)(a1 + 80) = v62;
          v20 = (double *)(a1 + 56);
        }
        else
        {
          v27 = *(_QWORD *)(a1 + 16);
          v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v22;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 80);
          *(_OWORD *)v22 = v28;
          *(_DWORD *)(a1 + 80) = v27;
        }
        v24 = (double *)(a1 + 88);
        goto LABEL_30;
      }
      if (v26 < v25)
      {
        v50 = *(_QWORD *)(a1 + 48);
        v51 = *v23;
        *v23 = *(_OWORD *)v22;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 80);
        *(_OWORD *)v22 = v51;
        *(_DWORD *)(a1 + 80) = v50;
        *v24 = v26;
        *(double *)(a1 + 88) = v25;
        if (v26 < v21)
        {
          v52 = *(_QWORD *)(a1 + 16);
          v53 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v23;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 48);
          *v23 = v53;
          *(_DWORD *)(a1 + 48) = v52;
LABEL_30:
          *v20 = v26;
          *v24 = v21;
        }
      }
LABEL_31:
      v64 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      while (1)
      {
        v68 = *(double *)(v64 + 24);
        if (v68 < *(double *)(v22 + 24))
        {
          v71 = *(_OWORD *)v64;
          v72 = *(_QWORD *)(v64 + 16);
          v69 = v65;
          do
          {
            v70 = a1 + v69;
            *(_OWORD *)(v70 + 96) = *(_OWORD *)(a1 + v69 + 64);
            *(_DWORD *)(v70 + 112) = *(_DWORD *)(a1 + v69 + 80);
            *(_QWORD *)(v70 + 120) = *(_QWORD *)(a1 + v69 + 88);
            if (v69 == -64)
            {
              v67 = a1;
              goto LABEL_34;
            }
            v69 -= 32;
          }
          while (v68 < *(double *)(v70 + 56));
          v67 = a1 + v69 + 96;
LABEL_34:
          *(_OWORD *)v67 = v71;
          *(_DWORD *)(v67 + 16) = v72;
          *(double *)(v67 + 24) = v68;
          if (++v66 == 8)
            return v64 + 32 == a2;
        }
        v22 = v64;
        v65 += 32;
        v64 += 32;
        if (v64 == a2)
          return 1;
      }
  }
}

uint64_t sub_20F292068(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_20F29212C(uint64_t a1, double a2)
{
  unsigned int v5;
  double v6;
  double v7;
  double v8;

  if (a2 < -1.0)
    return 0.0;
  v5 = *(_DWORD *)(a1 + 992);
  if (v5 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_25;
    }
    v5 = *(_DWORD *)(a1 + 992);
    if (v5 <= 7)
    {
LABEL_5:
      if (!v5)
        goto LABEL_24;
LABEL_10:
      v6 = *(double *)a1;
      if (v5 <= 1)
        goto LABEL_11;
      goto LABEL_17;
    }
  }
  else if (v5 <= 7)
  {
    goto LABEL_5;
  }
  if (v5 <= 0xE)
    goto LABEL_10;
  v6 = *(double *)a1;
  if (v5 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_25;
    }
    v5 = *(_DWORD *)(a1 + 992);
    if (v5 <= 1)
    {
LABEL_11:
      if (v5)
      {
        v7 = (v6 + *(double *)(a1 + 32)) * 0.5;
        if (v7 <= 0.0)
          return 0.0;
        goto LABEL_21;
      }
LABEL_24:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_25:
      abort();
    }
  }
LABEL_17:
  v7 = (v6 + *(double *)(a1 + 32)) * 0.5;
  if (v7 <= 0.0)
    return 0.0;
  if (v5 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_25;
    }
    if (!*(_DWORD *)(a1 + 992))
      goto LABEL_24;
  }
LABEL_21:
  v8 = 1.0;
  if (v7 != 0.0)
    v8 = 1.0 / v7;
  return v8 * ((a2 + 1.0) * *(double *)(a1 + 16));
}

uint64_t sub_20F292340(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    sub_20E867F44();
  if (0x5F417D05F417D06 * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x5F417D05F417D06 * ((a1[2] - *a1) >> 3);
  if (0x82FA0BE82FA0BE83 * ((a1[2] - *a1) >> 3) >= 0x5F417D05F417D0)
    v8 = 0xBE82FA0BE82FA0;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xBE82FA0BE82FA0)
      sub_20E877A38();
    v9 = (char *)operator new(344 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t)&v9[344 * v4];
  sub_20FCCCC58(v10, a2);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)a3;
  *(_QWORD *)(v10 + 48) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v10 + 120) = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(v10 + 136) = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(v10 + 152) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(v10 + 168) = *(_OWORD *)(a3 + 136);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v10 + 72) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v10 + 88) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(v10 + 104) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(v10 + 232) = *(_OWORD *)(a3 + 200);
  *(_OWORD *)(v10 + 216) = *(_OWORD *)(a3 + 184);
  *(_OWORD *)(v10 + 200) = *(_OWORD *)(a3 + 168);
  *(_OWORD *)(v10 + 184) = *(_OWORD *)(a3 + 152);
  *(_OWORD *)(v10 + 296) = *(_OWORD *)(a3 + 264);
  *(_OWORD *)(v10 + 280) = *(_OWORD *)(a3 + 248);
  *(_OWORD *)(v10 + 264) = *(_OWORD *)(a3 + 232);
  *(_OWORD *)(v10 + 248) = *(_OWORD *)(a3 + 216);
  v11 = *(_OWORD *)(a3 + 280);
  *(_OWORD *)(v10 + 321) = *(_OWORD *)(a3 + 289);
  *(_OWORD *)(v10 + 312) = v11;
  v12 = v10 + 344;
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 != (char *)*a1)
  {
    v15 = (uint64_t)&v9[344 * v4 - 344];
    do
    {
      v16 = *(_OWORD *)(v13 - 328);
      *(_OWORD *)v15 = *(_OWORD *)(v13 - 344);
      *(_OWORD *)(v15 + 16) = v16;
      v17 = *(_OWORD *)(v13 - 312);
      *(_QWORD *)(v15 + 48) = *((_QWORD *)v13 - 37);
      *(_OWORD *)(v15 + 32) = v17;
      v18 = *((_OWORD *)v13 - 12);
      v19 = *((_OWORD *)v13 - 11);
      v20 = *((_OWORD *)v13 - 13);
      *(_OWORD *)(v15 + 120) = *((_OWORD *)v13 - 14);
      *(_OWORD *)(v15 + 168) = v19;
      *(_OWORD *)(v15 + 152) = v18;
      *(_OWORD *)(v15 + 136) = v20;
      v21 = *((_OWORD *)v13 - 18);
      v22 = *((_OWORD *)v13 - 17);
      v23 = *((_OWORD *)v13 - 16);
      *(_OWORD *)(v15 + 104) = *((_OWORD *)v13 - 15);
      *(_OWORD *)(v15 + 88) = v23;
      *(_OWORD *)(v15 + 72) = v22;
      *(_OWORD *)(v15 + 56) = v21;
      v24 = *((_OWORD *)v13 - 4);
      v25 = *((_OWORD *)v13 - 3);
      v26 = *((_OWORD *)v13 - 5);
      *(_OWORD *)(v15 + 248) = *((_OWORD *)v13 - 6);
      *(_OWORD *)(v15 + 280) = v24;
      *(_OWORD *)(v15 + 296) = v25;
      *(_OWORD *)(v15 + 264) = v26;
      v27 = *((_OWORD *)v13 - 10);
      v28 = *((_OWORD *)v13 - 9);
      v29 = *((_OWORD *)v13 - 8);
      *(_OWORD *)(v15 + 232) = *((_OWORD *)v13 - 7);
      *(_OWORD *)(v15 + 216) = v29;
      *(_OWORD *)(v15 + 200) = v28;
      *(_OWORD *)(v15 + 184) = v27;
      v30 = *((_OWORD *)v13 - 2);
      *(_OWORD *)(v15 + 321) = *(_OWORD *)(v13 - 23);
      *(_OWORD *)(v15 + 312) = v30;
      v15 -= 344;
      v13 -= 344;
    }
    while (v13 != v14);
    v13 = (char *)*a1;
    v10 = v15 + 344;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = (uint64_t)&v9[344 * v8];
  if (v13)
    operator delete(v13);
  return v12;
}

void sub_20F2925D0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F2925E8(unsigned int *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t *v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = a2[1] - *a2;
  *a1 = 1000;
  v6 = (uint64_t *)(a1 + 2);
  v5 = *((_QWORD *)a1 + 1);
  v7 = (v4 >> 6) + 2000;
  v8 = *((_QWORD *)a1 + 2);
  v9 = (v8 - v5) >> 2;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      v8 = v5 + 4 * v7;
      *((_QWORD *)a1 + 2) = v8;
    }
    LODWORD(v10) = 1000;
    v11 = 2000;
  }
  else
  {
    sub_20E93DC84((uint64_t)(a1 + 2), v7 - v9);
    v5 = *((_QWORD *)a1 + 1);
    v8 = *((_QWORD *)a1 + 2);
    v10 = *a1;
    v11 = 2 * v10;
  }
  v12 = ((v8 - v5) >> 2) - v11;
  v13 = v12;
  v14 = (v10 + v12);
  if (v12 != v14)
  {
    v15 = (_DWORD *)(v5 + 4 * v12);
    v16 = 4 * v14 - 4 * v12 - 4;
    if (v16 >= 0x1C)
    {
      v18 = (v16 >> 2) + 1;
      v17 = v14 + (v18 & 0xFFFFFFF8);
      v15 += v18 & 0x7FFFFFFFFFFFFFF8;
      v19 = vaddq_s32(vdupq_n_s32(v14), (int32x4_t)xmmword_210365350);
      v20 = (int32x4_t *)(4 * v12 + v5 + 16);
      v21.i64[0] = 0x400000004;
      v21.i64[1] = 0x400000004;
      v22.i64[0] = 0x800000008;
      v22.i64[1] = 0x800000008;
      v23 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v20[-1] = v19;
        *v20 = vaddq_s32(v19, v21);
        v19 = vaddq_s32(v19, v22);
        v20 += 2;
        v23 -= 8;
      }
      while (v23);
      if (v18 == (v18 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_14;
    }
    else
    {
      v17 = v14;
    }
    v24 = (_DWORD *)(v5 + 4 * v14);
    do
      *v15++ = v17++;
    while (v15 != v24);
LABEL_14:
    LODWORD(v10) = *a1;
    v13 = *a1 + v12;
  }
  if (!(_DWORD)v10)
  {
    v30 = 0;
    v31 = a2[1];
    v32 = (unint64_t)(v8 - v5) >> 2;
    v33 = v31 - *a2;
    if (v31 == *a2)
      goto LABEL_28;
    goto LABEL_25;
  }
  v25 = (v12 + 2 * v10);
  v26 = 4 * v13;
  v27 = (_DWORD *)(v5 + 4 * v13);
  v28 = 4 * v25 - 4 * v13 - 4;
  if (v28 < 0x1C)
  {
    v29 = v12;
    do
LABEL_23:
      *v27++ = v29++;
    while (v27 != (_DWORD *)(v5 + 4 * v25));
    goto LABEL_24;
  }
  v34 = (v28 >> 2) + 1;
  v29 = v12 + (v34 & 0xFFFFFFF8);
  v27 += v34 & 0x7FFFFFFFFFFFFFF8;
  v35 = vaddq_s32(vdupq_n_s32(v12), (int32x4_t)xmmword_210365350);
  v36 = (int32x4_t *)(v26 + v5 + 16);
  v37.i64[0] = 0x400000004;
  v37.i64[1] = 0x400000004;
  v38.i64[0] = 0x800000008;
  v38.i64[1] = 0x800000008;
  v39 = v34 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v36[-1] = v35;
    *v36 = vaddq_s32(v35, v37);
    v35 = vaddq_s32(v35, v38);
    v36 += 2;
    v39 -= 8;
  }
  while (v39);
  if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_23;
LABEL_24:
  v30 = *a1;
  v40 = a2[1];
  v32 = ((unint64_t)(v8 - v5) >> 2) - *a1;
  v33 = v40 - *a2;
  if (v40 == *a2)
    goto LABEL_28;
LABEL_25:
  v41 = 0;
  v42 = v33 >> 6;
  do
  {
    v43 = sub_20F245EB8(a1 + 8, *a2 + ((unint64_t)v41 << 6));
    v5 = *v6;
    v44 = 4 * (v32 + v43 % 0x3E8);
    *(_DWORD *)(*v6 + 4 * *(unsigned int *)(*v6 + v44)) = v41;
    *(_DWORD *)(v5 + v44) = v41++;
  }
  while (v42 != v41);
  v30 = *a1;
LABEL_28:
  if (v30)
  {
    v45 = v30;
    do
    {
      *(_DWORD *)(v5 + 4 * *(unsigned int *)(v5 + 4 * v32)) = v32;
      ++v32;
      --v45;
    }
    while (v45);
  }
}

uint64_t *sub_20F29289C(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((_DWORD *)a2 + 4);
    v9 = *a2;
    v10 = *((_DWORD *)a2 + 2);
    while (1)
    {
      while (1)
      {
        v11 = v6;
        v12 = *((_DWORD *)v6 + 12);
        if (v8 == v12)
          break;
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return v11;
LABEL_14:
        v6 = (uint64_t *)v11[1];
        if (!v6)
        {
          v7 = (uint64_t **)(v11 + 1);
          goto LABEL_17;
        }
      }
      v13 = v11[4];
      if (v9 < v13)
        goto LABEL_3;
      if (v9 != v13)
      {
        if (v13 >= v9)
          return v11;
        goto LABEL_14;
      }
      v14 = *((_DWORD *)v11 + 10);
      if (v10 >= v14)
      {
        if (v14 >= v10)
          return v11;
        goto LABEL_14;
      }
LABEL_3:
      v6 = (uint64_t *)*v11;
      v7 = (uint64_t **)v11;
      if (!*v11)
        goto LABEL_17;
    }
  }
  v11 = (uint64_t *)(a1 + 1);
LABEL_17:
  v15 = v11;
  v16 = operator new(0x238uLL);
  v17 = *((_QWORD *)*a4 + 2);
  v16[2] = **a4;
  *((_QWORD *)v16 + 6) = v17;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v15;
  *v7 = (uint64_t *)v16;
  v18 = (uint64_t *)**a1;
  v19 = (uint64_t *)v16;
  if (v18)
  {
    *a1 = v18;
    v19 = *v7;
  }
  sub_20E868578(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v16;
}

float sub_20F2929D8(float *a1, float **a2)
{
  float *v2;
  float result;

  v2 = *a2;
  *a1 = **a2;
  a1[1] = v2[1];
  a1[2] = v2[2];
  a1[3] = v2[3];
  a1[4] = v2[4];
  a1[5] = v2[5];
  a1[6] = v2[6];
  a1[7] = v2[7];
  a1[8] = v2[8];
  a1[9] = v2[9];
  a1[10] = v2[10];
  a1[11] = v2[11];
  a1[12] = v2[12];
  a1[13] = v2[13];
  a1[14] = v2[14];
  a1[15] = v2[15];
  a1[16] = v2[16];
  a1[17] = v2[17];
  a1[18] = v2[18];
  a1[19] = v2[19];
  a1[20] = v2[20];
  a1[21] = v2[21];
  a1[22] = v2[22];
  a1[23] = v2[23];
  a1[24] = v2[24];
  a1[25] = v2[25];
  a1[26] = v2[26];
  a1[27] = v2[27];
  a1[28] = v2[28];
  a1[29] = v2[29];
  a1[30] = v2[30];
  a1[31] = v2[31];
  a1[32] = v2[32];
  a1[33] = v2[33];
  a1[34] = v2[34];
  a1[35] = v2[35];
  a1[36] = v2[36];
  a1[37] = v2[37];
  a1[38] = v2[38];
  a1[39] = v2[39];
  a1[40] = v2[40];
  a1[41] = v2[41];
  a1[42] = v2[42];
  a1[43] = v2[43];
  a1[44] = v2[44];
  a1[45] = v2[45];
  a1[46] = v2[46];
  a1[47] = v2[47];
  a1[48] = v2[48];
  a1[49] = v2[49];
  a1[50] = v2[50];
  a1[51] = v2[51];
  a1[52] = v2[52];
  a1[53] = v2[53];
  a1[54] = v2[54];
  a1[55] = v2[55];
  a1[56] = v2[56];
  a1[57] = v2[57];
  a1[58] = v2[58];
  a1[59] = v2[59];
  a1[60] = v2[60];
  a1[61] = v2[61];
  a1[62] = v2[62];
  a1[63] = v2[63];
  a1[64] = v2[64];
  a1[65] = v2[65];
  a1[66] = v2[66];
  a1[67] = v2[67];
  a1[68] = v2[68];
  a1[69] = v2[69];
  a1[70] = v2[70];
  a1[71] = v2[71];
  a1[72] = v2[72];
  a1[73] = v2[73];
  a1[74] = v2[74];
  a1[75] = v2[75];
  a1[76] = v2[76];
  a1[77] = v2[77];
  a1[78] = v2[78];
  a1[79] = v2[79];
  a1[80] = v2[80];
  a1[81] = v2[81];
  a1[82] = v2[82];
  a1[83] = v2[83];
  a1[84] = v2[84];
  a1[85] = v2[85];
  a1[86] = v2[86];
  a1[87] = v2[87];
  a1[88] = v2[88];
  a1[89] = v2[89];
  a1[90] = v2[90];
  a1[91] = v2[91];
  a1[92] = v2[92];
  a1[93] = v2[93];
  a1[94] = v2[94];
  a1[95] = v2[95];
  a1[96] = v2[96];
  a1[97] = v2[97];
  a1[98] = v2[98];
  a1[99] = v2[99];
  a1[100] = v2[100];
  a1[101] = v2[101];
  a1[102] = v2[102];
  a1[103] = v2[103];
  a1[104] = v2[104];
  a1[105] = v2[105];
  a1[106] = v2[106];
  a1[107] = v2[107];
  a1[108] = v2[108];
  a1[109] = v2[109];
  a1[110] = v2[110];
  a1[111] = v2[111];
  a1[112] = v2[112];
  a1[113] = v2[113];
  a1[114] = v2[114];
  a1[115] = v2[115];
  a1[116] = v2[116];
  a1[117] = v2[117];
  a1[118] = v2[118];
  a1[119] = v2[119];
  a1[120] = v2[120];
  a1[121] = v2[121];
  a1[122] = v2[122];
  a1[123] = v2[123];
  a1[124] = v2[124];
  a1[125] = v2[125];
  a1[126] = v2[126];
  result = v2[127];
  a1[127] = result;
  return result;
}

uint64_t sub_20F292DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char v9;
  float64x2_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  float v23;
  float v24;
  unsigned int v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  float64x2_t *v31;
  _QWORD *v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  float64x2_t *v36;
  uint64_t v37;
  float64x2_t *v38;
  double *v39;
  uint64_t v40;
  _QWORD *v41;
  float64x2_t *v42;
  uint64_t v43;
  double *v44;
  _QWORD *v45;
  uint64_t v46;
  double v47;
  int8x16_t v48;
  __int128 v49;
  double v57;
  int v58;
  float64x2_t *v61;
  _QWORD *f64;
  uint64_t v63;
  double v64;
  uint64_t v66;
  float64x2_t *v67;
  _QWORD *v68;
  uint64_t v69;
  double v73;
  uint64_t v75;
  float v76;
  double v78;
  __int128 v80;
  __int128 v81;
  int64x2_t v82;
  __int128 *v83;
  _QWORD *v84;
  _BYTE v85[24];
  float64x2_t v86;
  double v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  uint64_t v92;
  int64x2_t v93;
  float64_t v94;
  int64x2_t v95;
  float64_t v96;
  float64x2_t v97;
  uint64_t v98;
  float64x2_t v99;
  int8x16_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int8x16_t v103;
  uint64_t v104;
  int8x16_t v105;
  float64_t v106;
  __int128 v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v6 = a3 + 40;
  if ((!*(_BYTE *)(a3 + 192) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(a3 + 40) & 1) == 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 90, (uint64_t)"track.getStructure() && track.getStructure()->isSetup()", 55, (uint64_t)"track does not has structure or is not setup", 44, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a3 + 192))
    v7 = v6;
  else
    v7 = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)(v7 + 32) || *(_DWORD *)(a1 + 8) != *(_DWORD *)(v7 + 40))
    return 1;
  v8 = *(__int128 **)(a3 + 200);
  v83 = *(__int128 **)(a3 + 208);
  if (v8 == v83)
    return 0;
  v84 = (_QWORD *)(a2 + 1784);
  while (1)
  {
    if (*(_QWORD *)v8 == *(_QWORD *)a1 && *((_DWORD *)v8 + 2) == *(_DWORD *)(a1 + 8))
      goto LABEL_13;
    if (*(_BYTE *)(a3 + 192))
      v11 = v6;
    else
      v11 = 0;
    v12 = sub_20E9DF85C(v84, (uint64_t *)(v11 + 32)) == 0;
    v13 = sub_20E9DF85C(v84, (uint64_t *)v8);
    v20 = v13;
    if (v13)
      v21 = v13 + 5;
    else
      v21 = 0;
    if (v12
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 111, (uint64_t)"old_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (!v20
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 112, (uint64_t)"new_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v22 = v21[8];
    if (v22)
    {
      v23 = *((float *)v8 + 8);
      v24 = *((float *)v8 + 9);
      v25 = *(_DWORD *)(v22 + 992);
      if (v25 != -1)
        goto LABEL_28;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 115, (uint64_t)"new_anchor_pose_ref->lens", 25, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v22 = v21[8];
      v23 = *((float *)v8 + 8);
      v24 = *((float *)v8 + 9);
      v25 = *(_DWORD *)(v22 + 992);
      if (v25 != -1)
      {
LABEL_28:
        v26 = v23;
        v27 = v24;
        if (v25 <= 7)
          goto LABEL_29;
        goto LABEL_35;
      }
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v25 = *(_DWORD *)(v22 + 992);
    v26 = v23;
    v27 = v24;
    if (v25 <= 7)
    {
LABEL_29:
      if (!v25)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v16.i64[0] = *(_QWORD *)(v22 + 80);
      v111 = *(double *)(v22 + 88) + *(double *)(v22 + 72) * v26 + *(double *)v16.i64 * v27;
      v28 = *(double *)(v22 + 104);
      v15.i64[0] = *(_QWORD *)(v22 + 112);
      *(double *)v14.i64 = v28 * v27 + *(double *)v15.i64;
LABEL_36:
      v112 = v14.i64[0];
LABEL_37:
      v88 = &v86;
      v89 = (float64x2_t *)&v111;
      v90 = (float64x2_t *)v85;
      v91 = 0;
      v92 = 0;
      if (v25 <= 7)
        break;
      goto LABEL_71;
    }
LABEL_35:
    v16.i64[0] = *(_QWORD *)(v22 + 80);
    v111 = *(double *)(v22 + 88) + *(double *)(v22 + 72) * v26 + *(double *)v16.i64 * v27;
    v28 = *(double *)(v22 + 104);
    v15.i64[0] = *(_QWORD *)(v22 + 112);
    *(double *)v14.i64 = v28 * v27 + *(double *)v15.i64;
    if (v25 < 0xE)
      goto LABEL_36;
    v112 = v14.i64[0];
    if (v25 == 14)
      goto LABEL_37;
    v34 = &v86;
    v35 = (float64x2_t *)&v111;
    v88 = &v86;
    v89 = (float64x2_t *)&v111;
    v36 = (float64x2_t *)v85;
    v90 = (float64x2_t *)v85;
    v91 = 0;
    v92 = 0;
    if (v25 != -1)
    {
      v37 = 0;
      v38 = 0;
LABEL_98:
      v9 = sub_20EB3CED8(v22, (uint64_t)v34, v35, v36, v38, v37);
LABEL_12:
      if ((v9 & 1) != 0)
        goto LABEL_128;
      goto LABEL_13;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v25 = *(_DWORD *)(v22 + 992);
    if (v25 <= 7)
      break;
LABEL_71:
    v34 = v88;
    if (v25 > 0xB)
    {
      if (v25 <= 0xD)
      {
        if (v25 != 13)
        {
          f64 = (_QWORD *)v90->f64;
          v61 = v91;
          v63 = v92;
          if (v90)
          {
            v90->f64[0] = 0.0;
            f64[1] = 0;
            f64[2] = 0;
          }
          if (v63)
          {
            *(_QWORD *)(v63 + 64) = 0;
            *(_OWORD *)(v63 + 32) = 0u;
            *(_OWORD *)(v63 + 48) = 0u;
            *(_OWORD *)v63 = 0u;
            *(_OWORD *)(v63 + 16) = 0u;
          }
          v34->f64[0] = 0.0;
          v34->f64[1] = 0.0;
          v34[1].f64[0] = 0.0;
          if (v61)
          {
            v61[1] = 0u;
            v61[2] = 0u;
            *v61 = 0u;
          }
          goto LABEL_13;
        }
        v9 = sub_20EB43734((double *)v22, (uint64_t)v88, (uint64_t)v89, v90, (uint64_t)v91, v92);
        goto LABEL_12;
      }
      v35 = v89;
      v36 = v90;
      v38 = v91;
      v37 = v92;
      if (v25 != 14)
        goto LABEL_98;
      if (v90)
      {
        v90->f64[0] = 0.0;
        v36->f64[1] = 0.0;
        v36[1].f64[0] = 0.0;
      }
      if (v37)
      {
        *(_QWORD *)(v37 + 64) = 0;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_OWORD *)(v37 + 48) = 0u;
        *(_OWORD *)v37 = 0u;
        *(_OWORD *)(v37 + 16) = 0u;
      }
      v57 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
      v58 = sub_20EB253A0((uint64_t)v34, (uint64_t)v35, (double *)(v22 + 168), (double *)(v22 + 392), 0x14u, v57);
      if (v38)
      {
        if ((v58 & 1) != 0)
        {
          if (sub_20EB2498C(&v99, (uint64_t)&v100, &v97, (uint64_t)v34, (double *)(v22 + 168), v57))
          {
            v48.i64[0] = *(_QWORD *)&v34[1].f64[0];
            *(_QWORD *)&v49 = v101.i64[0];
            _Q3 = v100;
            v103 = *(int8x16_t *)v34;
            v104 = v48.i64[0];
            v98 = 0;
            *(_QWORD *)&_Q5.f64[0] = v48.i64[0];
            *(_QWORD *)&_Q5.f64[1] = v103.i64[0];
            _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v102, _Q5), (float64x2_t)vzip2q_s64(v102, v101), (float64x2_t)vextq_s8(v103, v48, 8uLL)).f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v101, (float64x2_t)v103), 1), (float64x2_t)v102, (float64x2_t)v103).f64[0], *(double *)v101.i64)) >= 0.00000001)
            {
LABEL_87:
              *(_QWORD *)&v81 = vextq_s8(v100, v100, 8uLL).u64[0];
              _Q3.i64[1] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
              *((_QWORD *)&v81 + 1) = v102.i64[0];
              *((_QWORD *)&v49 + 1) = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
              v105 = _Q3;
              v106 = *(double *)v103.i64;
              v108 = vextq_s8(v103, v103, 8uLL).u64[0];
              v107 = v81;
              v110 = v48.i64[0];
              v109 = v49;
              sub_20E8BE424((uint64_t)&v93);
              v10.f64[0] = v94;
              v82 = vzip2q_s64(v93, v95);
              v10.f64[1] = v96;
              *(int64x2_t *)v38 = vzip1q_s64(v93, v95);
              v38[1] = (float64x2_t)v82;
              v38[2] = v10;
              goto LABEL_128;
            }
          }
        }
      }
      else if (v58)
      {
        goto LABEL_128;
      }
    }
    else
    {
      v44 = (double *)v89;
      v45 = (_QWORD *)v90->f64;
      v38 = v91;
      v46 = v92;
      if (v25 <= 9)
      {
        if (v25 == 9)
        {
          v9 = sub_20EB35004(v22, (uint64_t)v88, v89, v90, (unint64_t)v91, v92, *(double *)v14.i64, v28, *(double *)v15.i64, v16, v17);
        }
        else
        {
          if (v90)
          {
            v90->f64[0] = 0.0;
            v45[1] = 0;
            v45[2] = 0;
          }
          if (v46)
          {
            *(_QWORD *)(v46 + 64) = 0;
            v14.i64[0] = 0;
            *(_OWORD *)(v46 + 32) = 0u;
            *(_OWORD *)(v46 + 48) = 0u;
            *(_OWORD *)v46 = 0u;
            *(_OWORD *)(v46 + 16) = 0u;
          }
          if (v38)
          {
            v9 = sub_20EB277C4((uint64_t)v34, (uint64_t)v38, v44, v22 + 168, 20, *(double *)v14.i64, v28, *(double *)v15.i64, v16, v17);
          }
          else
          {
            v64 = sqrt(*v44 * *v44 + v44[1] * v44[1]);
            v9 = sub_20EB24018((uint64_t)v34, v44, (double *)(v22 + 168), 20, v64, v64, *(double *)v15.i64, v16, v17);
          }
        }
        goto LABEL_12;
      }
      if (v25 != 10)
      {
        v9 = sub_20EB38E20(v22, (uint64_t)v88, v89, v90, v91, v92);
        goto LABEL_12;
      }
      if (v90)
      {
        v90->f64[0] = 0.0;
        v45[1] = 0;
        v45[2] = 0;
      }
      if (v46)
      {
        *(_QWORD *)(v46 + 64) = 0;
        *(_OWORD *)(v46 + 32) = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)(v46 + 16) = 0u;
      }
      v47 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
      v9 = sub_20EB24F38((uint64_t)v34, (uint64_t)v44, v22 + 168, (double *)(v22 + 280), 0x14u, v47);
      if (!v38)
        goto LABEL_12;
      if ((v9 & 1) != 0)
      {
        if (sub_20EB2450C(&v99, (uint64_t)&v100, &v97, (uint64_t)v34, (double *)(v22 + 168), v47))
        {
          v48.i64[0] = *(_QWORD *)&v34[1].f64[0];
          *(_QWORD *)&v49 = v101.i64[0];
          _Q3 = v100;
          v103 = *(int8x16_t *)v34;
          v104 = v48.i64[0];
          v98 = 0;
          *(_QWORD *)&_Q5.f64[0] = v48.i64[0];
          *(_QWORD *)&_Q5.f64[1] = v103.i64[0];
          _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v102, _Q5), (float64x2_t)vzip2q_s64(v102, v101), (float64x2_t)vextq_s8(v103, v48, 8uLL)).f64[1];
          __asm { FMLA            D6, D5, V3.D[1] }
          if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v101, (float64x2_t)v103), 1), (float64x2_t)v102, (float64x2_t)v103).f64[0], *(double *)v101.i64)) >= 0.00000001)goto LABEL_87;
        }
      }
    }
LABEL_13:
    v8 += 4;
    if (v8 == v83)
      return 0;
  }
  if (v25 > 3)
  {
    v40 = (uint64_t)v88;
    v39 = (double *)v89;
    v41 = (_QWORD *)v90->f64;
    v42 = v91;
    v43 = v92;
    if (v25 > 5)
    {
      if (v25 == 6)
        v9 = sub_20EB41C58((double *)v22, (uint64_t)v88, v89->f64, v90, (uint64_t)v91, v92);
      else
        v9 = sub_20EB306CC(v22, (uint64_t)v88, v89, v90, (unint64_t)v91, v92, *(double *)v14.i64, v28, v15, (int8x16_t)v16, *(double *)v17.i64, v18.f64[0], v19);
    }
    else if (v25 == 5)
    {
      if (v90)
      {
        v90->f64[0] = 0.0;
        v41[1] = 0;
        v41[2] = 0;
      }
      if (v43)
      {
        *(_QWORD *)(v43 + 64) = 0;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)v43 = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
      }
      if (v42)
        v9 = sub_20EB28F10(v40, (uint64_t)v42, v39, v22 + 168, 5);
      else
        v9 = sub_20EB2886C(v40, v39, v22 + 168, 5);
    }
    else
    {
      if (v90)
      {
        v90->f64[0] = 0.0;
        v41[1] = 0;
        v41[2] = 0;
      }
      if (v43)
      {
        *(_QWORD *)(v43 + 64) = 0;
        v14 = 0uLL;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)v43 = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
      }
      if (v42)
      {
        if (!*(_BYTE *)(v22 + 468))
        {
          v14.i64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, v14, v28, v15, (int8x16_t)v16).u64[0];
          *(_BYTE *)(v22 + 468) = 1;
        }
        v9 = sub_20EA8D684(v40, (uint64_t)v39, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), v42, 5, *(double *)v14.i64, v28, *(double *)v15.i64, *(double *)v16.i64, *(double *)v17.i64, v18.f64[0], v19);
      }
      else
      {
        if (!*(_BYTE *)(v22 + 468))
        {
          v14.i64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, v14, v28, v15, (int8x16_t)v16).u64[0];
          *(_BYTE *)(v22 + 468) = 1;
        }
        v9 = sub_20EA8D684(v40, (uint64_t)v39, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), 0, 5, *(double *)v14.i64, v28, *(double *)v15.i64, *(double *)v16.i64, *(double *)v17.i64, v18.f64[0], v19);
      }
    }
    goto LABEL_12;
  }
  if (v25 > 1)
  {
    if (v25 == 2)
    {
      v9 = sub_20EA8D22C((uint64_t)&v88, v22);
    }
    else
    {
      v29 = (double *)v88;
      v30 = (double *)v89;
      v32 = (_QWORD *)v90->f64;
      v31 = v91;
      v33 = v92;
      if (v90)
      {
        v90->f64[0] = 0.0;
        v32[1] = 0;
        v32[2] = 0;
      }
      if (v33)
      {
        *(_QWORD *)(v33 + 64) = 0;
        v14.i64[0] = 0;
        *(_OWORD *)(v33 + 32) = 0u;
        *(_OWORD *)(v33 + 48) = 0u;
        *(_OWORD *)v33 = 0u;
        *(_OWORD *)(v33 + 16) = 0u;
      }
      if (v31)
        v9 = sub_20EB27398(v29, (uint64_t)v31, v30, (int64x2_t *)(v22 + 168), 20, *(double *)v14.i64, v28, *(double *)v15.i64, *(double *)v16.i64, (int64x2_t)v17);
      else
        v9 = sub_20EB23DF0((uint64_t)v29, v30, (int64x2_t *)(v22 + 168), 20, *(double *)v14.i64, v28, *(double *)v15.i64, *(double *)v16.i64, (int64x2_t)v17, v18);
    }
    goto LABEL_12;
  }
  if (!v25)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v66 = (uint64_t)v88;
  v68 = (_QWORD *)v90->f64;
  v67 = v91;
  v69 = v92;
  v10 = *v89;
  *v88 = *v89;
  *(_QWORD *)(v66 + 16) = 0x3FF0000000000000;
  if (v68)
  {
    *v68 = 0;
    v68[1] = 0;
    v68[2] = 0;
  }
  if (v67)
  {
    *v67 = (float64x2_t)xmmword_210312EC0;
    v67[1] = (float64x2_t)unk_210312ED0;
    v10.f64[1] = 0.0;
    v67[2] = (float64x2_t)xmmword_210312EE0;
  }
  if (v69)
  {
    *(_QWORD *)(v69 + 64) = 0;
    v10.f64[1] = 0.0;
    *(_OWORD *)(v69 + 32) = 0u;
    *(_OWORD *)(v69 + 48) = 0u;
    *(_OWORD *)v69 = 0u;
    *(_OWORD *)(v69 + 16) = 0u;
  }
LABEL_128:
  v10.f64[0] = v87;
  _Q1 = v86;
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = v86.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v10.f64[0] * v10.f64[0]);
  *(_QWORD *)&v73 = *(_OWORD *)&vmulq_f64(v10, _Q2);
  _Q4 = vmulq_n_f64(v86, _Q2.f64[0]);
  v86 = _Q4;
  v87 = v73;
  if (*(_BYTE *)(a3 + 192))
    v75 = v6;
  else
    v75 = 0;
  v76 = *((float *)v8 + 9);
  _D1 = vmuld_lane_f64(_Q2.f64[0], _Q1, 1);
  v78 = v10.f64[0] * _Q2.f64[0];
  __asm { FMLA            D2, D1, V4.D[1] }
  if (fabs(sqrt(vmlad_n_f64(_D2, v78, v73)) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v80 = *v8;
  *(_DWORD *)(v75 + 48) = *((_DWORD *)v8 + 4);
  *(_OWORD *)(v75 + 32) = v80;
  *(_QWORD *)(v75 + 96) = v21;
  *(float64x2_t *)(v75 + 64) = v86;
  *(double *)(v75 + 80) = v87;
  *(double *)(v75 + 88) = v76;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 159, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return 1;
}

uint64_t sub_20F2939AC(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  char v30;
  unsigned int v32;
  uint64_t v34;

  v4 = 0;
  _X8 = *a1;
  __asm { PRFM            #4, [X8] }
  v9 = (0x9DDFEA08EB382D69 * a3 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * a3 + 0x376ADF16980614E5) >> 32);
  v10 = a1[3];
  v11 = (v9 >> 7) ^ 0x13701D;
  v12 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    v13 = v11 & v10;
    v14 = *(_QWORD *)(_X8 + v13);
    v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
    if (v15)
      break;
LABEL_8:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      return 0;
    v4 += 8;
    v11 = v4 + v13;
  }
  while (1)
  {
    v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v10;
    v17 = a1[1] + 32 * v16;
    if (*(_QWORD *)v17 == a2 && *(_DWORD *)(v17 + 8) == a3)
      break;
    v15 &= v15 - 1;
    if (!v15)
      goto LABEL_8;
  }
  if (!_X8)
    return 0;
  v19 = (_QWORD *)(_X8 + v16);
  v20 = *(std::__shared_weak_count **)(v17 + 24);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a1[3];
  --a1[2];
  v24 = *a1;
  v25 = (char *)v19 - *a1;
  v26 = *(_QWORD *)(*a1 + ((unint64_t)(v25 - 8) & v23));
  v27 = *v19 & (~*v19 << 6) & 0x8080808080808080;
  v28 = v26 & (~v26 << 6) & 0x8080808080808080;
  if (v28)
    v29 = v27 == 0;
  else
    v29 = 1;
  if (v29)
  {
    v34 = 0;
    v30 = -2;
  }
  else
  {
    v32 = (__clz(v28) >> 3) + (__clz(__rbit64(v27)) >> 3);
    _CF = v32 >= 8;
    v34 = v32 < 8;
    if (_CF)
      v30 = -2;
    else
      v30 = 0x80;
  }
  v25[v24] = v30;
  *(_BYTE *)(v24 + ((unint64_t)(v25 - 7) & v23) + (v23 & 7)) = v30;
  a1[4] += v34;
  return 1;
}

uint64_t sub_20F293B94(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[2];

  v5 = result;
  v6 = a3 + 40;
  v7 = *(unsigned __int8 *)(a3 + 280);
  if (*(_BYTE *)(a3 + 280))
    v8 = a3 + 40;
  else
    v8 = 0;
  if (!*(_BYTE *)(v8 + 152))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 223, (uint64_t)"track.getStructure()->isSetup()", 31, (uint64_t)"track does not has structure or is not setup", 44, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      goto LABEL_43;
    v7 = *(unsigned __int8 *)(a3 + 280);
  }
  if (v7)
    v9 = v6;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v9 + 136);
  v11 = *(_DWORD *)(v9 + 144);
  v12 = *(_DWORD *)(v5 + 8);
  if (*(_QWORD *)v5 == v10 && v12 == v11)
  {
    v15 = *(uint64_t **)(a3 + 288);
    v14 = *(uint64_t **)(a3 + 296);
    if (v15 != v14)
    {
      while (*v15 == v10)
      {
        if (*((_DWORD *)v15 + 2) != v12)
          goto LABEL_21;
        v15 += 21;
        if (v15 == v14)
          return result;
      }
      v10 = *v15;
LABEL_21:
      v18 = *(uint64_t **)(a2 + 56);
      v17 = (uint64_t *)(a2 + 56);
      v16 = v18;
      if (!v18)
        goto LABEL_36;
      v19 = v15[1];
      v20 = v17;
      do
      {
        v21 = v16[4];
        if (v21 < v10)
        {
          ++v16;
        }
        else if (v21 == v10)
        {
          if (*((_DWORD *)v16 + 10) < v19)
            ++v16;
          else
            v20 = v16;
        }
        else
        {
          v20 = v16;
        }
        v16 = (uint64_t *)*v16;
      }
      while (v16);
      if (v20 == v17 || (v22 = v20[4], v10 < v22) || v10 == v22 && *((_DWORD *)v20 + 10) > v19 || !v20[6])
      {
LABEL_36:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 243, (uint64_t)"new_state != nullptr", 20, (uint64_t)"Cannot find the state", 21, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_43;
        }
        v7 = *(unsigned __int8 *)(a3 + 280);
        v10 = *v15;
        v19 = v15[1];
      }
      v23 = *((_OWORD *)v15 + 3);
      v25[0] = *((_OWORD *)v15 + 2);
      v25[1] = v23;
      if (v7)
        v24 = v6;
      else
        v24 = 0;
      result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t *, unint64_t, uint64_t, double))(*(_QWORD *)v24 + 16))(v24, v25, v15 + 17, v10, v19, *((double *)v15 + 20));
      if ((result & 1) == 0)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 253, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
LABEL_43:
          abort();
      }
    }
  }
  return result;
}

void sub_20F293D98(uint64_t *a1, void *a2, void *a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  void *__p;
  void *v30;
  char *v31;
  char v32;

  v4 = a3;
  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + 312);
  if (v8 == 1)
  {
    v9 = *(_DWORD *)(*(_QWORD *)(v7 + 296) + 32);
    __p = a2;
    v30 = a3;
    LODWORD(v31) = v9;
    sub_20F294DC4(a1[1], a4, (uint64_t)&__p, 1uLL, 1);
    return;
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v10 = (char *)operator new(24 * v8);
    __p = v10;
    v30 = v10;
    v31 = &v10[24 * v8];
    v11 = *(_QWORD **)(v7 + 296);
    if (v11 != (_QWORD *)(v7 + 304))
      goto LABEL_6;
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD **)(v7 + 296);
    if (v11 != (_QWORD *)(v7 + 304))
    {
LABEL_6:
      v12 = v4;
      v13 = v10;
      while (1)
      {
        v14 = *((_DWORD *)v11 + 8);
        if (v10 < v31)
        {
          *(_QWORD *)v10 = a2;
          *((_QWORD *)v10 + 1) = v12;
          *((_DWORD *)v10 + 4) = v14;
          v10 += 24;
          v30 = v10;
          v15 = (_QWORD *)v11[1];
          if (v15)
            goto LABEL_24;
          goto LABEL_26;
        }
        v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * ((v31 - v13) >> 3) > v17)
          v17 = 0x5555555555555556 * ((v31 - v13) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v31 - v13) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        if (v18 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v19 = (char *)operator new(24 * v18);
        v20 = &v19[8 * ((v10 - v13) >> 3)];
        *(_QWORD *)v20 = a2;
        *((_QWORD *)v20 + 1) = v12;
        *((_DWORD *)v20 + 4) = v14;
        if (v10 == v13)
        {
          v23 = &v19[8 * ((v10 - v13) >> 3)];
          v10 = v20 + 24;
          __p = &v19[24 * v16];
          v31 = &v19[24 * v18];
          if (v13)
            goto LABEL_22;
        }
        else
        {
          v21 = &v19[8 * ((v10 - v13) >> 3)];
          do
          {
            v22 = *(_OWORD *)(v10 - 24);
            v23 = v21 - 24;
            *((_DWORD *)v21 - 2) = *((_DWORD *)v10 - 2);
            *(_OWORD *)(v21 - 24) = v22;
            v10 -= 24;
            v21 -= 24;
          }
          while (v10 != v13);
          v10 = v20 + 24;
          __p = v23;
          v31 = &v19[24 * v18];
          if (v13)
LABEL_22:
            operator delete(v13);
        }
        v13 = v23;
        v30 = v10;
        v15 = (_QWORD *)v11[1];
        if (v15)
        {
          do
          {
LABEL_24:
            v24 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
          goto LABEL_7;
        }
        do
        {
LABEL_26:
          v24 = (_QWORD *)v11[2];
          v25 = *v24 == (_QWORD)v11;
          v11 = v24;
        }
        while (!v25);
LABEL_7:
        v11 = v24;
        if (v24 == (_QWORD *)(*a1 + 304))
          goto LABEL_33;
      }
    }
  }
  v13 = v10;
LABEL_33:
  v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3));
  if (v10 == v13)
    v27 = 0;
  else
    v27 = v26;
  sub_20F2803D4((uint64_t)v13, (__int128 *)v10, (uint64_t)&v32, v27, 1);
  sub_20F295110(a1[1], a4, (uint64_t **)&__p, 1uLL, 1);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
}

void sub_20F294074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20F294098(uint64_t a1, void *a2, void *a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  unsigned int v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  _QWORD *v91;
  BOOL v92;
  _QWORD *v93;
  int v95;
  uint64_t *v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  uint64_t v104;
  uint64_t *v105;
  __int128 *v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  _BYTE v162[648];
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  _BYTE v167[648];
  _BYTE v168[648];
  _OWORD v169[2];

  v5 = a3;
  *(_QWORD *)&v169[0] = a2;
  *((_QWORD *)&v169[0] + 1) = a3;
  v8 = sub_20F29632C(*(_QWORD **)a1, a2, a3);
  if (!(_DWORD)v8)
    return v8;
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  if (v10 != v9)
  {
    v11 = 0x80BFA02FE80BFA03 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = v9 + 2736 * (v11 >> 1);
      if (*(_QWORD *)v13 < (unint64_t)a2 || *(void **)v13 == a2 && *(_DWORD *)(v13 + 8) < v5)
      {
        v9 = v13 + 2736;
        v12 = v11 + ~v12;
      }
      v11 = v12;
    }
    while (v12);
  }
  if (v9 == v10 || *(void **)v9 != a2 || *(_DWORD *)(v9 + 8) != v5)
    v9 = *(_QWORD *)(a1 + 88);
  if (v10 == v9)
    goto LABEL_29;
  if (v9 + 2736 != v10)
  {
    v14 = *(_QWORD *)(v9 + 16);
    if (v14 == *(_QWORD *)(v9 + 2752))
    {
      v15 = (uint64_t *)(v9 + 2752);
      v16 = *(_QWORD *)(*(_QWORD *)a1 + 48);
      if (*(_QWORD *)v9 == *(_QWORD *)(v16 + 32) && *(_DWORD *)(v9 + 8) == *(_DWORD *)(v16 + 40))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 307, (uint64_t)"preint_iter->first != this->state_set()->begin()->first", 55, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_107;
        }
        v14 = *v15;
      }
      if (*(_QWORD *)(v9 + 32) == v14 && *(_DWORD *)(v9 + 40) == *(_DWORD *)(v9 + 2760)
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 310, (uint64_t)"preint_iter->second.state_id1 == next_preint_iter->second.state_id0", 67, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
      {
        sub_20F2965C4(v9 + 48, v9 + 2784, (uint64_t)&v116);
        *(_QWORD *)(v9 + 2800) = v117;
        *(_QWORD *)(v9 + 2824) = v119;
        v17 = v131;
        *(_QWORD *)(v9 + 2928) = v126;
        *(_OWORD *)(v9 + 2784) = v116;
        *(_OWORD *)(v9 + 2808) = v118;
        v18 = v121;
        *(_OWORD *)(v9 + 2832) = v120;
        *(_OWORD *)(v9 + 2848) = v18;
        v19 = v122;
        *(_OWORD *)(v9 + 2880) = v123;
        v20 = v125;
        *(_OWORD *)(v9 + 2896) = v124;
        *(_OWORD *)(v9 + 2912) = v20;
        *(_OWORD *)(v9 + 2864) = v19;
        *(_OWORD *)(v9 + 2936) = v127;
        *(_QWORD *)(v9 + 3000) = v17;
        *(_OWORD *)(v9 + 2984) = v130;
        *(_OWORD *)(v9 + 2968) = v129;
        *(_OWORD *)(v9 + 2952) = v128;
        v21 = v133;
        *(_OWORD *)(v9 + 3008) = v132;
        v22 = v141;
        *(_QWORD *)(v9 + 3072) = v136;
        v23 = v134;
        *(_OWORD *)(v9 + 3056) = v135;
        *(_OWORD *)(v9 + 3040) = v23;
        *(_OWORD *)(v9 + 3024) = v21;
        v24 = v137;
        v25 = v138;
        v26 = v139;
        v27 = v140;
        *(_QWORD *)(v9 + 3144) = v22;
        *(_OWORD *)(v9 + 3112) = v26;
        *(_OWORD *)(v9 + 3128) = v27;
        *(_OWORD *)(v9 + 3080) = v24;
        *(_OWORD *)(v9 + 3096) = v25;
        v28 = v143;
        *(_OWORD *)(v9 + 3152) = v142;
        v29 = v144;
        v30 = v145;
        v31 = v151;
        *(_QWORD *)(v9 + 3216) = v146;
        *(_OWORD *)(v9 + 3200) = v30;
        *(_OWORD *)(v9 + 3184) = v29;
        *(_OWORD *)(v9 + 3168) = v28;
        v32 = v147;
        v33 = v148;
        v34 = v149;
        v35 = v150;
        *(_QWORD *)(v9 + 3288) = v31;
        *(_OWORD *)(v9 + 3256) = v34;
        *(_OWORD *)(v9 + 3272) = v35;
        *(_OWORD *)(v9 + 3224) = v32;
        *(_OWORD *)(v9 + 3240) = v33;
        v36 = v153;
        *(_OWORD *)(v9 + 3296) = v152;
        v37 = v154;
        v38 = v155;
        *(_QWORD *)(v9 + 3360) = v156;
        *(_OWORD *)(v9 + 3344) = v38;
        *(_OWORD *)(v9 + 3328) = v37;
        *(_OWORD *)(v9 + 3312) = v36;
        v39 = v157;
        v40 = v158;
        v41 = v159;
        v42 = v160;
        *(_QWORD *)(v9 + 3432) = v161;
        *(_OWORD *)(v9 + 3400) = v41;
        *(_OWORD *)(v9 + 3416) = v42;
        *(_OWORD *)(v9 + 3368) = v39;
        *(_OWORD *)(v9 + 3384) = v40;
        memcpy((void *)(v9 + 3440), v162, 0x288uLL);
        *(_OWORD *)(v9 + 4088) = v163;
        *(_QWORD *)(v9 + 4104) = v164;
        *(_OWORD *)(v9 + 4112) = v165;
        *(_QWORD *)(v9 + 4128) = v166;
        memcpy((void *)(v9 + 4136), v167, 0x288uLL);
        memcpy((void *)(v9 + 4784), v168, 0x288uLL);
        *(_DWORD *)(v9 + 2760) = *(_DWORD *)(v9 + 24);
        *v15 = *(_QWORD *)(v9 + 16);
        v10 = *(_QWORD *)(a1 + 88);
        goto LABEL_25;
      }
LABEL_107:
      abort();
    }
  }
LABEL_25:
  if (v9 + 2736 != v10)
  {
    do
    {
      v43 = v9 + 2736;
      *(_QWORD *)v9 = *(_QWORD *)(v9 + 2736);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v9 + 2744);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(v9 + 2752);
      *(_OWORD *)(v9 + 28) = *(_OWORD *)(v9 + 2764);
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(v9 + 2784);
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(v9 + 2800);
      *(_QWORD *)(v9 + 88) = *(_QWORD *)(v9 + 2824);
      *(_OWORD *)(v9 + 72) = *(_OWORD *)(v9 + 2808);
      v44 = *(_OWORD *)(v9 + 2848);
      *(_OWORD *)(v9 + 96) = *(_OWORD *)(v9 + 2832);
      *(_OWORD *)(v9 + 112) = v44;
      v45 = *(_OWORD *)(v9 + 2864);
      *(_QWORD *)(v9 + 192) = *(_QWORD *)(v9 + 2928);
      v46 = *(_OWORD *)(v9 + 2912);
      *(_OWORD *)(v9 + 160) = *(_OWORD *)(v9 + 2896);
      *(_OWORD *)(v9 + 176) = v46;
      v47 = *(_OWORD *)(v9 + 2880);
      *(_OWORD *)(v9 + 128) = v45;
      *(_OWORD *)(v9 + 144) = v47;
      v48 = *(_OWORD *)(v9 + 2936);
      *(_OWORD *)(v9 + 216) = *(_OWORD *)(v9 + 2952);
      v49 = *(_OWORD *)(v9 + 2984);
      *(_OWORD *)(v9 + 232) = *(_OWORD *)(v9 + 2968);
      *(_OWORD *)(v9 + 248) = v49;
      *(_QWORD *)(v9 + 264) = *(_QWORD *)(v9 + 3000);
      *(_OWORD *)(v9 + 200) = v48;
      v50 = *(_OWORD *)(v9 + 3008);
      v51 = *(_OWORD *)(v9 + 3024);
      v52 = *(_OWORD *)(v9 + 3040);
      v53 = *(_OWORD *)(v9 + 3056);
      *(_QWORD *)(v9 + 336) = *(_QWORD *)(v9 + 3072);
      *(_OWORD *)(v9 + 304) = v52;
      *(_OWORD *)(v9 + 320) = v53;
      *(_OWORD *)(v9 + 272) = v50;
      *(_OWORD *)(v9 + 288) = v51;
      v54 = *(_OWORD *)(v9 + 3112);
      v55 = *(_OWORD *)(v9 + 3128);
      *(_QWORD *)(v9 + 408) = *(_QWORD *)(v9 + 3144);
      v57 = *(_OWORD *)(v9 + 3080);
      v56 = *(_OWORD *)(v9 + 3096);
      *(_OWORD *)(v9 + 376) = v54;
      *(_OWORD *)(v9 + 392) = v55;
      *(_OWORD *)(v9 + 344) = v57;
      *(_OWORD *)(v9 + 360) = v56;
      v58 = *(_OWORD *)(v9 + 3152);
      v59 = *(_OWORD *)(v9 + 3168);
      v60 = *(_OWORD *)(v9 + 3184);
      v61 = *(_OWORD *)(v9 + 3200);
      *(_QWORD *)(v9 + 480) = *(_QWORD *)(v9 + 3216);
      *(_OWORD *)(v9 + 448) = v60;
      *(_OWORD *)(v9 + 464) = v61;
      *(_OWORD *)(v9 + 416) = v58;
      *(_OWORD *)(v9 + 432) = v59;
      v62 = *(_OWORD *)(v9 + 3256);
      v63 = *(_OWORD *)(v9 + 3272);
      *(_QWORD *)(v9 + 552) = *(_QWORD *)(v9 + 3288);
      v65 = *(_OWORD *)(v9 + 3224);
      v64 = *(_OWORD *)(v9 + 3240);
      *(_OWORD *)(v9 + 520) = v62;
      *(_OWORD *)(v9 + 536) = v63;
      *(_OWORD *)(v9 + 488) = v65;
      *(_OWORD *)(v9 + 504) = v64;
      v66 = *(_OWORD *)(v9 + 3296);
      v67 = *(_OWORD *)(v9 + 3312);
      v68 = *(_OWORD *)(v9 + 3328);
      v69 = *(_OWORD *)(v9 + 3344);
      *(_QWORD *)(v9 + 624) = *(_QWORD *)(v9 + 3360);
      *(_OWORD *)(v9 + 592) = v68;
      *(_OWORD *)(v9 + 608) = v69;
      *(_OWORD *)(v9 + 560) = v66;
      *(_OWORD *)(v9 + 576) = v67;
      v70 = *(_OWORD *)(v9 + 3400);
      v71 = *(_OWORD *)(v9 + 3416);
      *(_QWORD *)(v9 + 696) = *(_QWORD *)(v9 + 3432);
      v73 = *(_OWORD *)(v9 + 3368);
      v72 = *(_OWORD *)(v9 + 3384);
      *(_OWORD *)(v9 + 664) = v70;
      *(_OWORD *)(v9 + 680) = v71;
      *(_OWORD *)(v9 + 632) = v73;
      *(_OWORD *)(v9 + 648) = v72;
      memcpy((void *)(v9 + 704), (const void *)(v9 + 3440), 0x288uLL);
      *(_QWORD *)(v9 + 1368) = *(_QWORD *)(v9 + 4104);
      *(_OWORD *)(v9 + 1352) = *(_OWORD *)(v9 + 4088);
      *(_OWORD *)(v9 + 1376) = *(_OWORD *)(v9 + 4112);
      *(_QWORD *)(v9 + 1392) = *(_QWORD *)(v9 + 4128);
      memcpy((void *)(v9 + 1400), (const void *)(v9 + 4136), 0x288uLL);
      memcpy((void *)(v9 + 2048), (const void *)(v9 + 4784), 0x288uLL);
      *(_QWORD *)(v9 + 2712) = *(_QWORD *)(v9 + 5448);
      *(_OWORD *)(v9 + 2696) = *(_OWORD *)(v9 + 5432);
      *(_OWORD *)(v9 + 2720) = *(_OWORD *)(v9 + 5456);
      v74 = v9 + 5472;
      v9 += 2736;
    }
    while (v74 != v10);
    v9 = v43;
  }
  *(_QWORD *)(a1 + 88) = v9;
LABEL_29:
  v75 = *(uint64_t **)(a1 + 16);
  if (!v75)
    goto LABEL_62;
  v76 = *(_QWORD **)(*(_QWORD *)a1 + 296);
  v77 = *(_QWORD *)a1 + 304;
  if (v76 == (_QWORD *)v77)
    goto LABEL_61;
  v78 = *(uint64_t **)(a1 + 40);
  v79 = *(uint64_t **)(a1 + 48);
  while (1)
  {
    v80 = *((_DWORD *)v76 + 8);
    v81 = *(uint64_t **)(a1 + 40);
    if (v79 != v78)
    {
      v82 = ((char *)v79 - (char *)v78) >> 4;
      while (1)
      {
        v83 = v82 >> 1;
        v84 = &v81[2 * (v82 >> 1)];
        v85 = *v84;
        v86 = *(_DWORD *)(*v84 + 16);
        v87 = v86 >= v80;
        if (v86 != v80)
          goto LABEL_41;
        if (*(_QWORD *)v85 >= *(_QWORD *)&v169[0])
          break;
LABEL_35:
        v81 = v84 + 2;
        v83 = v82 + ~v83;
LABEL_36:
        v82 = v83;
        if (!v83)
          goto LABEL_44;
      }
      if (*(_QWORD *)v85 != *(_QWORD *)&v169[0])
        goto LABEL_36;
      v87 = *(_DWORD *)(v85 + 8) >= DWORD2(v169[0]);
LABEL_41:
      if (v87)
        goto LABEL_36;
      goto LABEL_35;
    }
LABEL_44:
    if (v81 != v79)
    {
      v88 = *v81;
      v89 = *(uint64_t **)(a1 + 48);
      if (*(_DWORD *)(*v81 + 16) == v80)
      {
        v89 = *(uint64_t **)(a1 + 48);
        if (*(_QWORD *)v88 == *(_QWORD *)&v169[0])
        {
          if (*(_DWORD *)(v88 + 8) == DWORD2(v169[0]))
            v89 = v81;
          else
            v89 = *(uint64_t **)(a1 + 48);
        }
      }
      if (v79 != v89 && *(_BYTE *)(*v89 + 736))
        break;
    }
    v90 = (_QWORD *)v76[1];
    if (v90)
    {
      do
      {
        v91 = v90;
        v90 = (_QWORD *)*v90;
      }
      while (v90);
    }
    else
    {
      do
      {
        v91 = (_QWORD *)v76[2];
        v92 = *v91 == (_QWORD)v76;
        v76 = v91;
      }
      while (!v92);
    }
    v76 = v91;
    if (v91 == (_QWORD *)v77)
      goto LABEL_61;
  }
  a4 = 2;
LABEL_61:
  sub_20F29A4FC((uint64_t)v169, a4, v75);
  sub_20F29AEF0((uint64_t)v169, a4, *(uint64_t **)(a1 + 24));
  sub_20F29B92C((uint64_t)v169, 1u, *(uint64_t **)(a1 + 32));
LABEL_62:
  v93 = *(_QWORD **)(*(_QWORD *)a1 + 296);
  if (v93 != (_QWORD *)(*(_QWORD *)a1 + 304))
  {
    while (1)
    {
      v95 = *((_DWORD *)v93 + 8);
      v116 = v169[0];
      LODWORD(v117) = v95;
      sub_20F29C390(*(_QWORD **)(a1 + 8), (uint64_t)&v116);
      v96 = *(uint64_t **)(a1 + 40);
      v97 = *(uint64_t **)(a1 + 48);
      if (v97 != v96)
        break;
LABEL_76:
      if (v96 == v97)
      {
        v105 = *(uint64_t **)(a1 + 48);
      }
      else
      {
        v104 = *v96;
        v105 = *(uint64_t **)(a1 + 48);
        if (*(_DWORD *)(*v96 + 16) == (_DWORD)v117)
        {
          v105 = *(uint64_t **)(a1 + 48);
          if (*(_QWORD *)v104 == (_QWORD)v116)
          {
            if (*(_DWORD *)(v104 + 8) == DWORD2(v116))
              v105 = v96;
            else
              v105 = *(uint64_t **)(a1 + 48);
          }
        }
      }
      if (v97 != v105)
      {
        v106 = (__int128 *)(v105 + 2);
        if (v105 + 2 != v97)
        {
          do
          {
            v107 = *v106;
            *(_QWORD *)v106 = 0;
            *((_QWORD *)v106 + 1) = 0;
            v108 = (std::__shared_weak_count *)v105[1];
            *(_OWORD *)v105 = v107;
            if (v108)
            {
              p_shared_owners = (unint64_t *)&v108->__shared_owners_;
              do
                v110 = __ldaxr(p_shared_owners);
              while (__stlxr(v110 - 1, p_shared_owners));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
            ++v106;
            v105 += 2;
          }
          while (v106 != (__int128 *)v97);
          v97 = *(uint64_t **)(a1 + 48);
        }
        while (v97 != v105)
        {
          v111 = (std::__shared_weak_count *)*(v97 - 1);
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          v97 -= 2;
        }
        *(_QWORD *)(a1 + 48) = v105;
      }
      v114 = (_QWORD *)v93[1];
      if (v114)
      {
        do
        {
          v115 = v114;
          v114 = (_QWORD *)*v114;
        }
        while (v114);
      }
      else
      {
        do
        {
          v115 = (_QWORD *)v93[2];
          v92 = *v115 == (_QWORD)v93;
          v93 = v115;
        }
        while (!v92);
      }
      v93 = v115;
      if (v115 == (_QWORD *)(*(_QWORD *)a1 + 304))
        return v8;
    }
    v98 = ((char *)v97 - (char *)v96) >> 4;
    while (1)
    {
      v99 = v98 >> 1;
      v100 = &v96[2 * (v98 >> 1)];
      v101 = *v100;
      v102 = *(_DWORD *)(*v100 + 16);
      v103 = v102 >= v117;
      if (v102 != (_DWORD)v117)
        goto LABEL_73;
      if (*(_QWORD *)v101 >= (unint64_t)v116)
        break;
LABEL_67:
      v96 = v100 + 2;
      v99 = v98 + ~v99;
LABEL_68:
      v98 = v99;
      if (!v99)
        goto LABEL_76;
    }
    if (*(_QWORD *)v101 != (_QWORD)v116)
      goto LABEL_68;
    v103 = *(_DWORD *)(v101 + 8) >= DWORD2(v116);
LABEL_73:
    if (v103)
      goto LABEL_68;
    goto LABEL_67;
  }
  return v8;
}

uint64_t sub_20F294980(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type, uint64_t a6, int *a7)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  void *v38;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v14 = v13;
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    v41 = v12;
    *(_QWORD *)&v42 = v12;
    *((_QWORD *)&v42 + 1) = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v43 = 0uLL;
    v44 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    v18 = v41;
    v19 = (_DWORD *)_os_log_pack_fill();
    v20 = *a7;
    *v19 = 67109120;
    v19[1] = v20;
    v21 = operator new();
    v22 = *((unsigned __int8 *)a3 + 23);
    if ((v22 & 0x80u) == 0)
      v23 = a3;
    else
      v23 = (uint64_t *)*a3;
    if ((v22 & 0x80u) != 0)
      v22 = a3[1];
    *(_QWORD *)v21 = v18;
    *(_OWORD *)(v21 + 8) = v42;
    v42 = 0uLL;
    *(_OWORD *)(v21 + 24) = v43;
    v43 = 0uLL;
    *(_QWORD *)(v21 + 40) = v23;
    *(_QWORD *)(v21 + 48) = v22;
    *(_BYTE *)(v21 + 56) = type;
    v40 = v21;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v40);
    v24 = v40;
    v40 = 0;
    if (v24)
    {
      v25 = *(std::__shared_weak_count **)(v24 + 32);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *(std::__shared_weak_count **)(v24 + 16);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      MEMORY[0x212BC6398](v24, 0x10F0C40B62ED6C6);
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v37 = *a7;
    LODWORD(v41) = 67109120;
    HIDWORD(v41) = v37;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
  }
  return 0;
}

void sub_20F294D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F294D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F294DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F294DC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  void *__p;
  char *v46;
  char *v47;
  uint64_t v48;

  if (a4 != 1)
  {
    if (a4)
      return;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 1264, (uint64_t)"minimum >= 1", 12, (uint64_t)"The minimum view number has to be larger 0", 42, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v10 = (_QWORD *)(a1 + 24);
  v11 = sub_20E9DF85C(v10, (uint64_t *)a3);
  if (v11)
  {
    v12 = *((unsigned int *)v11 + 16);
    if (*((_DWORD *)v11 + 16))
    {
      v13 = 16 * v12;
      __p = operator new(16 * v12);
      v46 = (char *)__p;
      v47 = (char *)__p + v13;
      if (a4 == 1)
      {
        if ((a5 & 1) != 0)
        {
          v14 = sub_20E9DF85C(v10, (uint64_t *)a3);
          if (v14)
          {
            v15 = (_QWORD *)v14[7];
            if (v15)
            {
              while (1)
              {
                v16 = v15[3];
                v15 = (_QWORD *)*v15;
                if (*(_BYTE *)(v16 + 192))
                {
                  *(_QWORD *)&v44 = v16;
                  v17 = *(_QWORD *)(a2 + 24);
                  if (!v17)
                    goto LABEL_59;
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 48))(v17, &v44);
                }
                if (!v15)
                  goto LABEL_56;
              }
            }
          }
        }
        else
        {
          v40 = sub_20E9DF85C(v10, (uint64_t *)a3);
          if (v40)
          {
            v41 = (_QWORD *)v40[7];
            while (v41)
            {
              v42 = v41[3];
              v41 = (_QWORD *)*v41;
              *(_QWORD *)&v44 = v42;
              v43 = *(_QWORD *)(a2 + 24);
              if (!v43)
LABEL_59:
                sub_20E86D37C();
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v43 + 48))(v43, &v44);
            }
          }
        }
        goto LABEL_56;
      }
      v18 = sub_20E9DF85C(v10, (uint64_t *)a3);
      if (!v18 || (v19 = (_QWORD *)v18[7]) == 0)
      {
LABEL_56:
        if (__p)
        {
          v46 = (char *)__p;
          operator delete(__p);
        }
        return;
      }
LABEL_19:
      v20 = v19;
      v21 = v19[3];
      v23 = *(_QWORD *)(v21 + 24);
      v22 = *(_QWORD *)(v21 + 32);
      *(_QWORD *)&v44 = v23;
      *((_QWORD *)&v44 + 1) = v22;
      v19 = (_QWORD *)*v19;
      if (a5 && !*(_BYTE *)(v21 + 192))
        goto LABEL_18;
      v26 = v21 + 200;
      v24 = *(_QWORD *)(v21 + 200);
      v25 = *(_QWORD *)(v26 + 8);
      v27 = (v25 - v24) >> 5;
      if (v27 < a4)
        goto LABEL_18;
      v28 = (char *)__p;
      if (v46 != __p)
      {
        v29 = (v46 - (_BYTE *)__p) >> 4;
        do
        {
          v30 = v29 >> 1;
          v31 = &v28[16 * (v29 >> 1)];
          if (*(_QWORD *)v31 < v23 || *(_QWORD *)v31 == v23 && *(_DWORD *)&v28[16 * v30 + 8] < v22)
          {
            v28 = v31 + 16;
            v30 = v29 + ~v30;
          }
          v29 = v30;
        }
        while (v30);
      }
      if (v28 != v46 && *(_QWORD *)v28 == v23 && *((_DWORD *)v28 + 2) == (_DWORD)v22)
        goto LABEL_18;
      if (v25 == v24)
      {
LABEL_49:
        if (!a4)
          goto LABEL_50;
        goto LABEL_18;
      }
      v32 = *(_QWORD *)a3;
      v33 = *(_DWORD *)(a3 + 8);
      v34 = *(_DWORD *)(a3 + 16);
      while (1)
      {
        v35 = v27 >> 1;
        v36 = v24 + 32 * (v27 >> 1);
        v37 = *(_DWORD *)(v36 + 16);
        v38 = v37 >= v34;
        if (v37 != v34)
          goto LABEL_41;
        if (*(_QWORD *)v36 >= v32)
          break;
LABEL_35:
        v24 = v36 + 32;
        v35 = v27 + ~v35;
LABEL_36:
        v27 = v35;
        if (!v35)
        {
          if (v24 == v25 || *(_DWORD *)(v24 + 16) != v34 || *(_QWORD *)v24 != v32)
            goto LABEL_49;
          if ((*(_DWORD *)(v24 + 8) == v33) >= a4)
          {
LABEL_50:
            sub_20F0527A0((char **)&__p, v28, &v44);
            v48 = v20[3];
            v39 = *(_QWORD *)(a2 + 24);
            if (!v39)
              sub_20E86D37C();
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v39 + 48))(v39, &v48);
          }
LABEL_18:
          if (!v19)
            goto LABEL_56;
          goto LABEL_19;
        }
      }
      if (*(_QWORD *)v36 != v32)
        goto LABEL_36;
      v38 = *(_DWORD *)(v36 + 8) >= v33;
LABEL_41:
      if (v38)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
}

void sub_20F2950D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F295110(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t a4, int a5)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *__p;
  char *v66;
  char *v67;
  uint64_t v68;

  if (!a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 1264, (uint64_t)"minimum >= 1", 12, (uint64_t)"The minimum view number has to be larger 0", 42, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *a3;
  v11 = a3[1];
  v12 = (char *)v11 - (char *)*a3;
  if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) >= a4 && v10 != v11)
  {
    v14 = 0;
    v15 = (_QWORD *)(a1 + 24);
    do
    {
      v16 = sub_20E9DF85C(v15, v10);
      if (v16 && v16[8] > (unint64_t)v14)
        v14 = v16[8];
      v10 += 3;
    }
    while (v10 != v11);
    if (v14)
    {
      __p = operator new(16 * v14);
      v66 = (char *)__p;
      v67 = (char *)__p + 16 * v14;
      v17 = *a3;
      v18 = a3[1];
      if (a4 == 1)
      {
        if (v17 != v18)
        {
          if (v12 == 24)
          {
            if ((a5 & 1) != 0)
            {
              do
              {
                v56 = sub_20E9DF85C(v15, v17);
                if (v56)
                {
                  v57 = (_QWORD *)v56[7];
                  while (v57)
                  {
                    v58 = v57[3];
                    v57 = (_QWORD *)*v57;
                    if (*(_BYTE *)(v58 + 192))
                    {
                      v68 = v58;
                      v59 = *(_QWORD *)(a2 + 24);
                      if (!v59)
                        goto LABEL_99;
                      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v59 + 48))(v59, &v68);
                    }
                  }
                }
                v17 += 3;
              }
              while (v17 != v18);
            }
            else
            {
              do
              {
                v60 = sub_20E9DF85C(v15, v17);
                if (v60)
                {
                  v61 = (_QWORD *)v60[7];
                  while (v61)
                  {
                    v62 = v61[3];
                    v61 = (_QWORD *)*v61;
                    v68 = v62;
                    v63 = *(_QWORD *)(a2 + 24);
                    if (!v63)
LABEL_99:
                      sub_20E86D37C();
                    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v63 + 48))(v63, &v68);
                  }
                }
                v17 += 3;
              }
              while (v17 != v18);
            }
          }
          else
          {
            do
            {
              v45 = sub_20E9DF85C(v15, v17);
              if (v45)
              {
                v46 = (_QWORD *)v45[7];
                while (v46)
                {
                  v47 = v46;
                  v48 = v46[3];
                  v50 = *(_QWORD *)(v48 + 24);
                  v49 = *(_QWORD *)(v48 + 32);
                  *(_QWORD *)&v64 = v50;
                  *((_QWORD *)&v64 + 1) = v49;
                  v46 = (_QWORD *)*v46;
                  if (!a5 || *(_BYTE *)(v48 + 192))
                  {
                    v51 = (char *)__p;
                    if (v66 != __p)
                    {
                      v52 = (v66 - (_BYTE *)__p) >> 4;
                      do
                      {
                        v53 = v52 >> 1;
                        v54 = &v51[16 * (v52 >> 1)];
                        if (*(_QWORD *)v54 < v50
                          || *(_QWORD *)v54 == v50 && *(_DWORD *)&v51[16 * v53 + 8] < v49)
                        {
                          v51 = v54 + 16;
                          v53 = v52 + ~v53;
                        }
                        v52 = v53;
                      }
                      while (v53);
                    }
                    if (v51 == v66 || *(_QWORD *)v51 != v50 || *((_DWORD *)v51 + 2) != (_DWORD)v49)
                    {
                      sub_20F0527A0((char **)&__p, v51, &v64);
                      v68 = v47[3];
                      v55 = *(_QWORD *)(a2 + 24);
                      if (!v55)
                        sub_20E86D37C();
                      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v55 + 48))(v55, &v68);
                    }
                  }
                }
              }
              v17 += 3;
            }
            while (v17 != v18);
          }
        }
        goto LABEL_97;
      }
      while (1)
      {
        if (v17 == v18)
        {
LABEL_97:
          if (__p)
          {
            v66 = (char *)__p;
            operator delete(__p);
          }
          return;
        }
        v19 = sub_20E9DF85C(v15, v17);
        if (v19)
        {
          v20 = (_QWORD *)v19[7];
          if (v20)
            break;
        }
LABEL_20:
        v17 += 3;
      }
      while (1)
      {
        v21 = v20;
        v22 = v20[3];
        v24 = *(_QWORD *)(v22 + 24);
        v23 = *(_QWORD *)(v22 + 32);
        *(_QWORD *)&v64 = v24;
        *((_QWORD *)&v64 + 1) = v23;
        v20 = (_QWORD *)*v20;
        if (!a5 || *(_BYTE *)(v22 + 192))
        {
          v27 = v22 + 200;
          v26 = *(_QWORD *)(v22 + 200);
          v25 = *(_QWORD *)(v27 + 8);
          if ((v25 - v26) >> 5 >= a4)
          {
            v28 = (char *)__p;
            if (v66 != __p)
            {
              v29 = (v66 - (_BYTE *)__p) >> 4;
              do
              {
                v30 = v29 >> 1;
                v31 = &v28[16 * (v29 >> 1)];
                if (*(_QWORD *)v31 < v24 || *(_QWORD *)v31 == v24 && *(_DWORD *)&v28[16 * v30 + 8] < v23)
                {
                  v28 = v31 + 16;
                  v30 = v29 + ~v30;
                }
                v29 = v30;
              }
              while (v30);
            }
            if (v28 == v66 || *(_QWORD *)v28 != v24 || *((_DWORD *)v28 + 2) != (_DWORD)v23)
            {
              v32 = 0;
              if (v25 != v26)
              {
                v33 = *a3;
                v34 = a3[1];
                if (*a3 != v34)
                {
                  v32 = 0;
                  do
                  {
                    v35 = *v33;
                    v36 = *((_DWORD *)v33 + 2);
                    v37 = v26;
                    v38 = (v25 - v26) >> 5;
                    v39 = *((_DWORD *)v33 + 4);
                    do
                    {
                      v40 = v38 >> 1;
                      v41 = v37 + 32 * (v38 >> 1);
                      v42 = *(_DWORD *)(v41 + 16);
                      v43 = v42 >= v39;
                      if (v42 != v39)
                        goto LABEL_51;
                      if (*(_QWORD *)v41 < v35)
                        goto LABEL_45;
                      if (*(_QWORD *)v41 == v35)
                      {
                        v43 = *(_DWORD *)(v41 + 8) >= v36;
LABEL_51:
                        if (!v43)
                        {
LABEL_45:
                          v37 = v41 + 32;
                          v40 = v38 + ~v40;
                        }
                      }
                      v38 = v40;
                    }
                    while (v40);
                    if (v37 != v25
                      && *(_DWORD *)(v37 + 16) == v39
                      && *(_QWORD *)v37 == v35
                      && *(_DWORD *)(v37 + 8) == v36)
                    {
                      ++v32;
                    }
                    v33 += 3;
                  }
                  while (v33 != v34);
                }
              }
              if (v32 >= a4)
              {
                sub_20F0527A0((char **)&__p, v28, &v64);
                v68 = v21[3];
                v44 = *(_QWORD *)(a2 + 24);
                if (!v44)
                  sub_20E86D37C();
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 48))(v44, &v68);
              }
            }
          }
        }
        if (!v20)
          goto LABEL_20;
      }
    }
  }
}

void sub_20F2955CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F295614()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F295628(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9FC4B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20F295668(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FC4B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20F295690(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(*a2 + 24);
  result = sub_20F295754(a1 + 16, *(_QWORD *)v3, v2);
  if ((result & 1) == 0)
    return (uint64_t)sub_20F25F344(*(_QWORD **)(v3 + 8), (uint64_t *)&v5);
  return result;
}

uint64_t sub_20F2956DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPo"
                     "int3DWithCovIdLb0EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32KeyPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VI"
                                "OAnchoredPoint3DWithCovIdLb0EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32Ke"
                                "yPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPoint3DWithCovIdLb0EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32KeyPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPoint3DWithCovIdLb0EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32KeyPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F295748()
{
  return &unk_24C9FC520;
}

uint64_t sub_20F295754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char v9;
  float64x2_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double *v31;
  double *v32;
  float64x2_t *v33;
  _QWORD *v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t *v37;
  float64x2_t *v38;
  uint64_t v39;
  float64x2_t *v40;
  double *v41;
  uint64_t v42;
  _QWORD *v43;
  float64x2_t *v44;
  uint64_t v45;
  double *v46;
  _QWORD *v47;
  uint64_t v48;
  double v49;
  int8x16_t v50;
  __int128 v51;
  double v59;
  int v60;
  float64x2_t *v63;
  _QWORD *f64;
  uint64_t v65;
  double v66;
  uint64_t v68;
  float64x2_t *v69;
  _QWORD *v70;
  uint64_t v71;
  double v75;
  uint64_t v77;
  float v78;
  double v80;
  __int128 v82;
  __int128 v83;
  int64x2_t v84;
  __int128 *v85;
  _QWORD *v86;
  _BYTE v87[24];
  float64x2_t v88;
  double v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  float64x2_t *v93;
  uint64_t v94;
  int64x2_t v95;
  float64_t v96;
  int64x2_t v97;
  float64_t v98;
  float64x2_t v99;
  uint64_t v100;
  float64x2_t v101;
  int8x16_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int8x16_t v105;
  uint64_t v106;
  int8x16_t v107;
  float64_t v108;
  __int128 v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v6 = a3 + 40;
  if ((!*(_BYTE *)(a3 + 192) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(a3 + 40) & 1) == 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 90, (uint64_t)"track.getStructure() && track.getStructure()->isSetup()", 55, (uint64_t)"track does not has structure or is not setup", 44, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a3 + 192))
    v7 = v6;
  else
    v7 = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)(v7 + 32) || *(_DWORD *)(a1 + 8) != *(_DWORD *)(v7 + 40))
    return 1;
  v8 = *(__int128 **)(a3 + 200);
  v85 = *(__int128 **)(a3 + 208);
  if (v8 == v85)
    return 0;
  v86 = (_QWORD *)(a2 + 1784);
  while (1)
  {
    if (*(_QWORD *)v8 == *(_QWORD *)a1 && *((_DWORD *)v8 + 2) == *(_DWORD *)(a1 + 8))
      goto LABEL_13;
    if (*(_BYTE *)(a3 + 192))
      v11 = v6;
    else
      v11 = 0;
    v12 = sub_20E9DF85C(v86, (uint64_t *)(v11 + 32)) == 0;
    v13 = sub_20E9DF85C(v86, (uint64_t *)v8);
    v20 = v13;
    if (v13)
      v21 = v13 + 5;
    else
      v21 = 0;
    if (v12
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 111, (uint64_t)"old_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (!v20
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 112, (uint64_t)"new_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v22 = v21[8];
    if (v22)
    {
      v23 = *((_QWORD *)v8 + 3);
      v24 = *(float *)(v23 + 8);
      v25 = *(float *)(v23 + 12);
      v26 = *(_DWORD *)(v22 + 992);
      if (v26 != -1)
        goto LABEL_28;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 115, (uint64_t)"new_anchor_pose_ref->lens", 25, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v22 = v21[8];
      v30 = *((_QWORD *)v8 + 3);
      v24 = *(float *)(v30 + 8);
      v25 = *(float *)(v30 + 12);
      v26 = *(_DWORD *)(v22 + 992);
      if (v26 != -1)
      {
LABEL_28:
        v27 = v24;
        v28 = v25;
        if (v26 <= 7)
          goto LABEL_29;
        goto LABEL_35;
      }
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v26 = *(_DWORD *)(v22 + 992);
    v27 = v24;
    v28 = v25;
    if (v26 <= 7)
    {
LABEL_29:
      if (!v26)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v16.i64[0] = *(_QWORD *)(v22 + 80);
      v113 = *(double *)(v22 + 88) + *(double *)(v22 + 72) * v27 + *(double *)v16.i64 * v28;
      v29 = *(double *)(v22 + 104);
      v15.i64[0] = *(_QWORD *)(v22 + 112);
      *(double *)v14.i64 = v29 * v28 + *(double *)v15.i64;
LABEL_36:
      v114 = v14.i64[0];
LABEL_37:
      v90 = &v88;
      v91 = (float64x2_t *)&v113;
      v92 = (float64x2_t *)v87;
      v93 = 0;
      v94 = 0;
      if (v26 <= 7)
        break;
      goto LABEL_71;
    }
LABEL_35:
    v16.i64[0] = *(_QWORD *)(v22 + 80);
    v113 = *(double *)(v22 + 88) + *(double *)(v22 + 72) * v27 + *(double *)v16.i64 * v28;
    v29 = *(double *)(v22 + 104);
    v15.i64[0] = *(_QWORD *)(v22 + 112);
    *(double *)v14.i64 = v29 * v28 + *(double *)v15.i64;
    if (v26 < 0xE)
      goto LABEL_36;
    v114 = v14.i64[0];
    if (v26 == 14)
      goto LABEL_37;
    v36 = &v88;
    v37 = (float64x2_t *)&v113;
    v90 = &v88;
    v91 = (float64x2_t *)&v113;
    v38 = (float64x2_t *)v87;
    v92 = (float64x2_t *)v87;
    v93 = 0;
    v94 = 0;
    if (v26 != -1)
    {
      v39 = 0;
      v40 = 0;
LABEL_98:
      v9 = sub_20EB3CED8(v22, (uint64_t)v36, v37, v38, v40, v39);
LABEL_12:
      if ((v9 & 1) != 0)
        goto LABEL_128;
      goto LABEL_13;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v26 = *(_DWORD *)(v22 + 992);
    if (v26 <= 7)
      break;
LABEL_71:
    v36 = v90;
    if (v26 > 0xB)
    {
      if (v26 <= 0xD)
      {
        if (v26 != 13)
        {
          f64 = (_QWORD *)v92->f64;
          v63 = v93;
          v65 = v94;
          if (v92)
          {
            v92->f64[0] = 0.0;
            f64[1] = 0;
            f64[2] = 0;
          }
          if (v65)
          {
            *(_QWORD *)(v65 + 64) = 0;
            *(_OWORD *)(v65 + 32) = 0u;
            *(_OWORD *)(v65 + 48) = 0u;
            *(_OWORD *)v65 = 0u;
            *(_OWORD *)(v65 + 16) = 0u;
          }
          v36->f64[0] = 0.0;
          v36->f64[1] = 0.0;
          v36[1].f64[0] = 0.0;
          if (v63)
          {
            v63[1] = 0u;
            v63[2] = 0u;
            *v63 = 0u;
          }
          goto LABEL_13;
        }
        v9 = sub_20EB43734((double *)v22, (uint64_t)v90, (uint64_t)v91, v92, (uint64_t)v93, v94);
        goto LABEL_12;
      }
      v37 = v91;
      v38 = v92;
      v40 = v93;
      v39 = v94;
      if (v26 != 14)
        goto LABEL_98;
      if (v92)
      {
        v92->f64[0] = 0.0;
        v38->f64[1] = 0.0;
        v38[1].f64[0] = 0.0;
      }
      if (v39)
      {
        *(_QWORD *)(v39 + 64) = 0;
        *(_OWORD *)(v39 + 32) = 0u;
        *(_OWORD *)(v39 + 48) = 0u;
        *(_OWORD *)v39 = 0u;
        *(_OWORD *)(v39 + 16) = 0u;
      }
      v59 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
      v60 = sub_20EB253A0((uint64_t)v36, (uint64_t)v37, (double *)(v22 + 168), (double *)(v22 + 392), 0x14u, v59);
      if (v40)
      {
        if ((v60 & 1) != 0)
        {
          if (sub_20EB2498C(&v101, (uint64_t)&v102, &v99, (uint64_t)v36, (double *)(v22 + 168), v59))
          {
            v50.i64[0] = *(_QWORD *)&v36[1].f64[0];
            *(_QWORD *)&v51 = v103.i64[0];
            _Q3 = v102;
            v105 = *(int8x16_t *)v36;
            v106 = v50.i64[0];
            v100 = 0;
            *(_QWORD *)&_Q5.f64[0] = v50.i64[0];
            *(_QWORD *)&_Q5.f64[1] = v105.i64[0];
            _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v104, _Q5), (float64x2_t)vzip2q_s64(v104, v103), (float64x2_t)vextq_s8(v105, v50, 8uLL)).f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v103, (float64x2_t)v105), 1), (float64x2_t)v104, (float64x2_t)v105).f64[0], *(double *)v103.i64)) >= 0.00000001)
            {
LABEL_87:
              *(_QWORD *)&v83 = vextq_s8(v102, v102, 8uLL).u64[0];
              _Q3.i64[1] = vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL).u64[0];
              *((_QWORD *)&v83 + 1) = v104.i64[0];
              *((_QWORD *)&v51 + 1) = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
              v107 = _Q3;
              v108 = *(double *)v105.i64;
              v110 = vextq_s8(v105, v105, 8uLL).u64[0];
              v109 = v83;
              v112 = v50.i64[0];
              v111 = v51;
              sub_20E8BE424((uint64_t)&v95);
              v10.f64[0] = v96;
              v84 = vzip2q_s64(v95, v97);
              v10.f64[1] = v98;
              *(int64x2_t *)v40 = vzip1q_s64(v95, v97);
              v40[1] = (float64x2_t)v84;
              v40[2] = v10;
              goto LABEL_128;
            }
          }
        }
      }
      else if (v60)
      {
        goto LABEL_128;
      }
    }
    else
    {
      v46 = (double *)v91;
      v47 = (_QWORD *)v92->f64;
      v40 = v93;
      v48 = v94;
      if (v26 <= 9)
      {
        if (v26 == 9)
        {
          v9 = sub_20EB35004(v22, (uint64_t)v90, v91, v92, (unint64_t)v93, v94, *(double *)v14.i64, v29, *(double *)v15.i64, v16, v17);
        }
        else
        {
          if (v92)
          {
            v92->f64[0] = 0.0;
            v47[1] = 0;
            v47[2] = 0;
          }
          if (v48)
          {
            *(_QWORD *)(v48 + 64) = 0;
            v14.i64[0] = 0;
            *(_OWORD *)(v48 + 32) = 0u;
            *(_OWORD *)(v48 + 48) = 0u;
            *(_OWORD *)v48 = 0u;
            *(_OWORD *)(v48 + 16) = 0u;
          }
          if (v40)
          {
            v9 = sub_20EB277C4((uint64_t)v36, (uint64_t)v40, v46, v22 + 168, 20, *(double *)v14.i64, v29, *(double *)v15.i64, v16, v17);
          }
          else
          {
            v66 = sqrt(*v46 * *v46 + v46[1] * v46[1]);
            v9 = sub_20EB24018((uint64_t)v36, v46, (double *)(v22 + 168), 20, v66, v66, *(double *)v15.i64, v16, v17);
          }
        }
        goto LABEL_12;
      }
      if (v26 != 10)
      {
        v9 = sub_20EB38E20(v22, (uint64_t)v90, v91, v92, v93, v94);
        goto LABEL_12;
      }
      if (v92)
      {
        v92->f64[0] = 0.0;
        v47[1] = 0;
        v47[2] = 0;
      }
      if (v48)
      {
        *(_QWORD *)(v48 + 64) = 0;
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)v48 = 0u;
        *(_OWORD *)(v48 + 16) = 0u;
      }
      v49 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
      v9 = sub_20EB24F38((uint64_t)v36, (uint64_t)v46, v22 + 168, (double *)(v22 + 280), 0x14u, v49);
      if (!v40)
        goto LABEL_12;
      if ((v9 & 1) != 0)
      {
        if (sub_20EB2450C(&v101, (uint64_t)&v102, &v99, (uint64_t)v36, (double *)(v22 + 168), v49))
        {
          v50.i64[0] = *(_QWORD *)&v36[1].f64[0];
          *(_QWORD *)&v51 = v103.i64[0];
          _Q3 = v102;
          v105 = *(int8x16_t *)v36;
          v106 = v50.i64[0];
          v100 = 0;
          *(_QWORD *)&_Q5.f64[0] = v50.i64[0];
          *(_QWORD *)&_Q5.f64[1] = v105.i64[0];
          _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v104, _Q5), (float64x2_t)vzip2q_s64(v104, v103), (float64x2_t)vextq_s8(v105, v50, 8uLL)).f64[1];
          __asm { FMLA            D6, D5, V3.D[1] }
          if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v103, (float64x2_t)v105), 1), (float64x2_t)v104, (float64x2_t)v105).f64[0], *(double *)v103.i64)) >= 0.00000001)goto LABEL_87;
        }
      }
    }
LABEL_13:
    v8 += 2;
    if (v8 == v85)
      return 0;
  }
  if (v26 > 3)
  {
    v42 = (uint64_t)v90;
    v41 = (double *)v91;
    v43 = (_QWORD *)v92->f64;
    v44 = v93;
    v45 = v94;
    if (v26 > 5)
    {
      if (v26 == 6)
        v9 = sub_20EB41C58((double *)v22, (uint64_t)v90, v91->f64, v92, (uint64_t)v93, v94);
      else
        v9 = sub_20EB306CC(v22, (uint64_t)v90, v91, v92, (unint64_t)v93, v94, *(double *)v14.i64, v29, v15, (int8x16_t)v16, *(double *)v17.i64, v18.f64[0], v19);
    }
    else if (v26 == 5)
    {
      if (v92)
      {
        v92->f64[0] = 0.0;
        v43[1] = 0;
        v43[2] = 0;
      }
      if (v45)
      {
        *(_QWORD *)(v45 + 64) = 0;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)(v45 + 48) = 0u;
        *(_OWORD *)v45 = 0u;
        *(_OWORD *)(v45 + 16) = 0u;
      }
      if (v44)
        v9 = sub_20EB28F10(v42, (uint64_t)v44, v41, v22 + 168, 5);
      else
        v9 = sub_20EB2886C(v42, v41, v22 + 168, 5);
    }
    else
    {
      if (v92)
      {
        v92->f64[0] = 0.0;
        v43[1] = 0;
        v43[2] = 0;
      }
      if (v45)
      {
        *(_QWORD *)(v45 + 64) = 0;
        v14 = 0uLL;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)(v45 + 48) = 0u;
        *(_OWORD *)v45 = 0u;
        *(_OWORD *)(v45 + 16) = 0u;
      }
      if (v44)
      {
        if (!*(_BYTE *)(v22 + 468))
        {
          v14.i64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, v14, v29, v15, (int8x16_t)v16).u64[0];
          *(_BYTE *)(v22 + 468) = 1;
        }
        v9 = sub_20EA8D684(v42, (uint64_t)v41, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), v44, 5, *(double *)v14.i64, v29, *(double *)v15.i64, *(double *)v16.i64, *(double *)v17.i64, v18.f64[0], v19);
      }
      else
      {
        if (!*(_BYTE *)(v22 + 468))
        {
          v14.i64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, v14, v29, v15, (int8x16_t)v16).u64[0];
          *(_BYTE *)(v22 + 468) = 1;
        }
        v9 = sub_20EA8D684(v42, (uint64_t)v41, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), 0, 5, *(double *)v14.i64, v29, *(double *)v15.i64, *(double *)v16.i64, *(double *)v17.i64, v18.f64[0], v19);
      }
    }
    goto LABEL_12;
  }
  if (v26 > 1)
  {
    if (v26 == 2)
    {
      v9 = sub_20EA8D22C((uint64_t)&v90, v22);
    }
    else
    {
      v31 = (double *)v90;
      v32 = (double *)v91;
      v34 = (_QWORD *)v92->f64;
      v33 = v93;
      v35 = v94;
      if (v92)
      {
        v92->f64[0] = 0.0;
        v34[1] = 0;
        v34[2] = 0;
      }
      if (v35)
      {
        *(_QWORD *)(v35 + 64) = 0;
        v14.i64[0] = 0;
        *(_OWORD *)(v35 + 32) = 0u;
        *(_OWORD *)(v35 + 48) = 0u;
        *(_OWORD *)v35 = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
      }
      if (v33)
        v9 = sub_20EB27398(v31, (uint64_t)v33, v32, (int64x2_t *)(v22 + 168), 20, *(double *)v14.i64, v29, *(double *)v15.i64, *(double *)v16.i64, (int64x2_t)v17);
      else
        v9 = sub_20EB23DF0((uint64_t)v31, v32, (int64x2_t *)(v22 + 168), 20, *(double *)v14.i64, v29, *(double *)v15.i64, *(double *)v16.i64, (int64x2_t)v17, v18);
    }
    goto LABEL_12;
  }
  if (!v26)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v68 = (uint64_t)v90;
  v70 = (_QWORD *)v92->f64;
  v69 = v93;
  v71 = v94;
  v10 = *v91;
  *v90 = *v91;
  *(_QWORD *)(v68 + 16) = 0x3FF0000000000000;
  if (v70)
  {
    *v70 = 0;
    v70[1] = 0;
    v70[2] = 0;
  }
  if (v69)
  {
    *v69 = (float64x2_t)xmmword_210312EC0;
    v69[1] = (float64x2_t)unk_210312ED0;
    v10.f64[1] = 0.0;
    v69[2] = (float64x2_t)xmmword_210312EE0;
  }
  if (v71)
  {
    *(_QWORD *)(v71 + 64) = 0;
    v10.f64[1] = 0.0;
    *(_OWORD *)(v71 + 32) = 0u;
    *(_OWORD *)(v71 + 48) = 0u;
    *(_OWORD *)v71 = 0u;
    *(_OWORD *)(v71 + 16) = 0u;
  }
LABEL_128:
  v10.f64[0] = v89;
  _Q1 = v88;
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = v88.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v10.f64[0] * v10.f64[0]);
  *(_QWORD *)&v75 = *(_OWORD *)&vmulq_f64(v10, _Q2);
  _Q4 = vmulq_n_f64(v88, _Q2.f64[0]);
  v88 = _Q4;
  v89 = v75;
  if (*(_BYTE *)(a3 + 192))
    v77 = v6;
  else
    v77 = 0;
  v78 = *(float *)(*((_QWORD *)v8 + 3) + 12);
  _D1 = vmuld_lane_f64(_Q2.f64[0], _Q1, 1);
  v80 = v10.f64[0] * _Q2.f64[0];
  __asm { FMLA            D2, D1, V4.D[1] }
  if (fabs(sqrt(vmlad_n_f64(_D2, v80, v75)) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v82 = *v8;
  *(_DWORD *)(v77 + 48) = *((_DWORD *)v8 + 4);
  *(_OWORD *)(v77 + 32) = v82;
  *(_QWORD *)(v77 + 96) = v21;
  *(float64x2_t *)(v77 + 64) = v88;
  *(double *)(v77 + 80) = v89;
  *(double *)(v77 + 88) = v78;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 159, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return 1;
}

uint64_t *sub_20F29632C(_QWORD *a1, void *a2, void *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *result;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *__p[2];
  int v30;

  v6 = (_QWORD *)a1[37];
  v7 = a1 + 38;
  if (v6 != a1 + 38)
  {
    do
    {
      v8 = *((_DWORD *)v6 + 8);
      __p[0] = a2;
      __p[1] = a3;
      v30 = v8;
      v9 = sub_20E9DF85C(a1 + 223, (uint64_t *)__p);
      if (v9)
      {
        sub_20E8D2CE8(a1 + 223, v9, (uint64_t)__p);
        v10 = __p[0];
        __p[0] = 0;
        if (v10)
          operator delete(v10);
      }
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v13 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != v7);
  }
  v15 = a1 + 7;
  result = (uint64_t *)a1[7];
  if (result)
  {
    v16 = a1 + 7;
    v17 = (uint64_t *)a1[7];
    do
    {
      v18 = (void *)v17[4];
      if (v18 < a2)
      {
        ++v17;
      }
      else if (v18 == a2)
      {
        if (*((_DWORD *)v17 + 10) < a3)
          ++v17;
        else
          v16 = v17;
      }
      else
      {
        v16 = v17;
      }
      v17 = (uint64_t *)*v17;
    }
    while (v17);
    if (v16 == v15)
      return 0;
    v19 = (void *)v16[4];
    if (a2 < v19)
      return 0;
    if (a2 == v19 && *((_DWORD *)v16 + 10) > a3 || !v16[6])
      return 0;
    v20 = a1 + 7;
    v21 = (uint64_t *)a1[7];
    do
    {
      v22 = (void *)v21[4];
      if (v22 < a2)
      {
        ++v21;
      }
      else if (v22 == a2)
      {
        if (*((_DWORD *)v21 + 10) < a3)
          ++v21;
        else
          v20 = v21;
      }
      else
      {
        v20 = v21;
      }
      v21 = (uint64_t *)*v21;
    }
    while (v21);
    if (v20 == v15 || (v23 = (void *)v20[4], a2 < v23) || a2 == v23 && *((_DWORD *)v20 + 10) > a3)
      v20 = a1 + 7;
    v24 = (_QWORD *)v20[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      v26 = v20;
      do
      {
        v25 = (_QWORD *)v26[2];
        v13 = *v25 == (_QWORD)v26;
        v26 = v25;
      }
      while (!v13);
    }
    if ((_QWORD *)a1[6] == v20)
      a1[6] = v25;
    --a1[8];
    sub_20E8D2134(result, v20);
    v27 = v20[6];
    v20[6] = 0;
    if (v27)
    {
      v28 = *(void **)(v27 + 744);
      if (v28)
      {
        *(_QWORD *)(v27 + 752) = v28;
        operator delete(v28);
      }
      MEMORY[0x212BC6398](v27, 0x1020C40281B6686);
    }
    operator delete(v20);
    return (uint64_t *)1;
  }
  return result;
}

void sub_20F2965C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t v4;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t *v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v70;
  float64x2_t v71;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double cosval;
  double v87;
  __double2 v88;
  uint64_t v89;
  float64_t v90;
  float64x2_t v91;
  double v92;
  float64_t v93;
  double v94;
  double v95;
  double v96;
  float64_t v97;
  double v98;
  double v99;
  double v100;
  double v102;
  float64x2_t v103;
  double v104;
  float64x2_t v106;
  float64x2_t v107;
  double v109;
  double v111;
  double v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  double v121;
  float64x2_t v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  float64x2_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  uint64_t v140;
  double v141;
  double v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v146;
  float64x2_t v147;
  double v148;
  double v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v163;
  float64x2_t v165;
  float64x2_t v167;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v219;
  double v220;
  float64x2_t v222;
  float64x2_t v225;
  double v226;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v234;
  float64x2_t v236;
  float64x2_t v238;
  float64x2_t v240;
  float64x2_t v244;
  float64x2_t v246;
  float64x2_t v248;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v266;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  int8x16_t v303;
  float64x2_t v305;
  int8x16_t v306;
  float64x2_t v309;
  int64x2_t v310;
  float64x2_t v312;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v323;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v328;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v385;
  float64x2_t v388;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v426;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v449;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v479;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v512;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v531;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v681;
  float64x2_t v684;
  float64x2_t v687;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v720;
  float64_t v721;
  float64_t v722;
  float64_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  double v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  double v776;
  float64x2_t v777;
  double v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  int8x16_t v791;
  float64x2_t v792;
  int8x16_t v793;
  float64x2_t v794;
  int8x16_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  double v803;
  float64_t v804;
  uint64_t v805;
  double v806;
  float64_t v807;
  double v808;
  float64_t v809;
  float64x2_t v810;
  double v811;
  float64_t v812;
  double v813;
  float64_t v814;
  float64x2_t v815;
  double v816;
  float64_t v817;
  double v818;
  float64_t v819;
  float64x2_t v820;
  double v821;
  float64x2_t v822;
  double v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  double v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  double v884;
  float64x2_t v885;
  double v886;
  float64_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  double v894;
  double v895;
  double v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  unint64_t v902;
  double v903;
  unint64_t v904;
  double v905;
  unint64_t v906;
  float64x2_t v907;
  float64_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  unint64_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  unint64_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  double v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  double v950;
  float64x2_t v951;
  uint64_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  double v959;
  float64x2_t v960;
  double v961;
  float64x2_t v962;
  float64x2_t v963;
  double v964;
  float64x2_t v965;
  float64x2_t v966;
  double v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  double v971;
  float64x2_t v972;
  double v973;
  float64x2_t v974;
  double v975;
  double v976;
  float64x2_t v977;
  float64x2_t v978;
  double v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  double v985;
  double v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  double v990;
  double v991;
  int8x16_t v992;
  float64x2_t v993;
  int8x16_t v994;
  double v995;
  double v996;
  float64x2_t v997;
  uint64_t v998;
  float64_t v999;
  float64x2_t v1000;
  _QWORD *v1001;
  _QWORD *v1002[4];

  v1002[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v8 = a1 + 1304;
  v997 = *(float64x2_t *)(a1 + 1304);
  v9.f64[1] = *(float64_t *)(a1 + 1312);
  v9.f64[0] = *(float64_t *)(a1 + 1320);
  v988 = v9;
  v10 = a2 + 1304;
  v984 = *(float64x2_t *)(a2 + 1304);
  v9.f64[1] = *(float64_t *)(a2 + 1312);
  v9.f64[0] = *(float64_t *)(a2 + 1320);
  v978 = v9;
  v994 = *(int8x16_t *)(a1 + 1328);
  v9.f64[1] = *(float64_t *)(a1 + 1336);
  v9.f64[0] = *(float64_t *)(a1 + 1344);
  v958 = v9;
  v992 = *(int8x16_t *)(a2 + 1328);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = xmmword_2103AA6D8;
  v955 = (float64x2_t)*(unint64_t *)(a2 + 1344);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 64) = unk_2103AA6E8;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 112) = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 152) = 0u;
  v11 = a3 + 152;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 648) = 0;
  *(_OWORD *)(a3 + 616) = 0u;
  *(_OWORD *)(a3 + 632) = 0u;
  *(_OWORD *)(a3 + 584) = 0u;
  *(_OWORD *)(a3 + 600) = 0u;
  *(_OWORD *)(a3 + 552) = 0u;
  *(_OWORD *)(a3 + 568) = 0u;
  *(_OWORD *)(a3 + 520) = 0u;
  *(_OWORD *)(a3 + 536) = 0u;
  *(_OWORD *)(a3 + 488) = 0u;
  *(_OWORD *)(a3 + 504) = 0u;
  *(_OWORD *)(a3 + 456) = 0u;
  *(_OWORD *)(a3 + 472) = 0u;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_OWORD *)(a3 + 392) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_OWORD *)(a3 + 376) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  v1001 = v1002;
  v1002[0] = 0;
  sub_20F29C68C((_QWORD *)(a3 + 656), &v1001);
  *(_OWORD *)(a3 + 1304) = *(_OWORD *)v8;
  *(_QWORD *)(a3 + 1320) = *(_QWORD *)(v8 + 16);
  *(_OWORD *)(a3 + 1328) = *(_OWORD *)(a1 + 1328);
  *(_QWORD *)(a3 + 1344) = *(_QWORD *)(a1 + 1344);
  v1001 = 0;
  v1002[0] = &v1001;
  sub_20F29C68C((_QWORD *)(a3 + 1352), v1002);
  *(_QWORD *)(a3 + 1352) = 0x3FF0000000000000;
  v12 = v11 + 120;
  *(_QWORD *)(a3 + 1432) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 1512) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 1592) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 1672) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 1752) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1680) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 1912) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 1992) = 0x3FF0000000000000;
  v1001 = v1002;
  v1002[0] = 0;
  v952 = v11 + 1848;
  sub_20F29C68C((_QWORD *)(v11 + 1848), &v1001);
  v13 = (float64x2_t *)(a2 + 2000);
  v14 = (float64x2_t *)(a2 + 272);
  v15 = (float64x2_t *)(a1 + 2000);
  v16 = (int8x16_t)vsubq_f64(v997, v984);
  v17 = *(double *)(a1 + 48);
  v18 = *(double *)(a1 + 56);
  v19 = v17 * v17;
  v38.f64[0] = v17 * v18;
  v20 = *(double *)(a1 + 64);
  v21 = *(double *)(a1 + 72);
  v22 = v17 * v20;
  v23 = v17 * v21;
  v24 = v18 * v18;
  v25 = v18 * v20;
  v26 = v18 * v21;
  v27 = v20 * v20;
  v28 = v20 * v21;
  v29 = v21 * v21;
  v30 = v17 * v17 + v18 * v18 - v20 * v20 - v21 * v21;
  v31 = v18 * v20 - v17 * v21;
  v32 = v22 + v18 * v21;
  v33 = v25 + v23;
  v34 = v19 - v24;
  v35 = v19 - v24 + v27 - v21 * v21;
  v36 = v28 - v38.f64[0];
  v37 = v26 - v22;
  v38.f64[0] = v38.f64[0] + v28;
  v39 = v34 - v27 + v29;
  v40 = *(double *)(a2 + 48);
  v41 = *(double *)(a2 + 56);
  v42 = v40 * v40;
  v43 = v40 * v41;
  v44 = *(double *)(a2 + 64);
  v45 = *(double *)(a2 + 72);
  v46 = v40 * v44;
  v47 = v40 * v45;
  v48 = v41 * v41;
  v49 = v41 * v44;
  v50 = v41 * v45;
  v51 = v44 * v44;
  v52 = v44 * v45;
  v53 = v45 * v45;
  v985 = v42 + v48 - v51 - v53;
  v54 = v49 - v47;
  v55 = v46 + v50;
  v56 = v49 + v47;
  v57 = v42 - v48;
  v58 = v57 + v51 - v53;
  v59 = v52 - v43;
  v60 = v50 - v46;
  v61 = v43 + v52;
  v937 = v57 - v51 + v53;
  v62.f64[0] = *(float64_t *)(a2 + 168);
  v63 = *(float64x2_t *)(a2 + 152);
  v64.f64[0] = *(float64_t *)(a2 + 192);
  v65 = *(float64x2_t *)(a2 + 176);
  v66.f64[0] = *(float64_t *)(a2 + 216);
  v67 = *(float64x2_t *)(a2 + 200);
  v950 = *(double *)v16.i64;
  COERCE_DOUBLE(v998 = vextq_s8(v16, v16, 8uLL).i64[0]);
  v911 = v64;
  v989 = vsubq_f64(v988, v978);
  v915 = v66;
  v68 = v62.f64[0] * *(double *)v16.i64 + v64.f64[0] * *(double *)&v998 + v66.f64[0] * v989.f64[0];
  v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, *(double *)v16.i64), v65, *(double *)&v998), v67, v989.f64[0]);
  _D10 = v71.f64[1];
  v70 = v71.f64[0];
  __asm { FMLA            D16, D10, V29.D[1] }
  v77 = _D16 + v68 * v68;
  v906 = vextq_s8(v994, v994, 8uLL).u64[0];
  v78 = v31 + v31;
  v79 = v32 + v32;
  v80 = v33 + v33;
  v81 = v36 + v36;
  v4.f64[0] = v37 + v37;
  _Q13.f64[0] = v38.f64[0] + v38.f64[0];
  v971 = v54 + v54;
  v82 = v55 + v55;
  v973 = v56 + v56;
  v83 = v59 + v59;
  v975 = v60 + v60;
  v979 = v61 + v61;
  v904 = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
  v902 = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  v908 = v67.f64[0];
  v823 = v39;
  v821 = v35;
  v818 = v38.f64[0] + v38.f64[0];
  v816 = v37 + v37;
  v813 = v30;
  v811 = v36 + v36;
  v808 = v33 + v33;
  v806 = v32 + v32;
  v803 = v31 + v31;
  v921 = v62;
  v945 = v65.f64[0];
  v942 = v63.f64[0];
  v967 = v58;
  v964 = v59 + v59;
  v961 = v82;
  v932 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
  v926 = vextq_s8(v992, v992, 8uLL).u64[0];
  if (v77 >= 0.0000002635)
  {
    v87 = sqrt(v77);
    v88 = __sincos_stret(v87);
    cosval = v88.__cosval;
    v70 = v71.f64[0];
    v82 = v961;
    v83 = v964;
    v58 = v967;
    v78 = v803;
    v79 = v806;
    v80 = v808;
    v81 = v811;
    v85 = v88.__sinval / v87;
    v35 = v821;
    v84 = 1.0 / v77 * (1.0 - v88.__cosval);
  }
  else
  {
    v84 = 0.5 - v77 * (v77 / -720.0 + 0.0416666667);
    v85 = 1.0 - v77 * (0.166666667 - v77 * (v77 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v77 * v84;
  }
  v89 = v952;
  v947 = (float64x2_t)vdupq_lane_s64(v998, 0);
  v953 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v989.f64[0], 0);
  v90 = v71.f64[1] * v84;
  v91.f64[0] = cosval + v70 * (v70 * v84);
  v92 = cosval + v71.f64[1] * (v71.f64[1] * v84);
  v38.f64[0] = cosval + v68 * (v68 * v84);
  v93 = v71.f64[1] * (v70 * v84);
  v94 = v68 * (v70 * v84);
  v95 = v68 * v90;
  v96 = v70 * v85;
  v97 = v71.f64[1] * v85;
  v98 = v68 * v85;
  v99 = v93 - v98;
  v100 = v97 + v94;
  _Q18.f64[0] = v93 + v98;
  v102 = v95 - v96;
  v103.f64[0] = v94 - v97;
  v104 = v96 + v95;
  _Q0.f64[0] = v985;
  _Q0.f64[1] = v973;
  v106.f64[0] = v971;
  v106.f64[1] = v58;
  v107.f64[0] = v82;
  v107.f64[1] = v83;
  _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q0, v91.f64[0]), v106, _Q18.f64[0]), v107, v103.f64[0]);
  v109 = v975 * v91.f64[0] + v979 * _Q18.f64[0] + v937 * v103.f64[0];
  _Q22 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q0, v99), v106, v92), v107, v104);
  v111 = v975 * v99 + v979 * v92 + v937 * v104;
  _Q24 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q0, v100), v106, v102), v107, v38.f64[0]);
  v113 = v975 * v100 + v979 * v102 + v937 * v38.f64[0];
  _Q1.f64[0] = v30;
  _Q1.f64[1] = v80;
  v115.f64[0] = v78;
  v115.f64[1] = v35;
  v116.f64[0] = v79;
  v116.f64[1] = v81;
  v117 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q3.f64[0]), v115, _Q3, 1), v116, v109);
  __asm { FMLA            D0, D13, V3.D[1] }
  v118 = _Q0.f64[0] + v39 * v109;
  v119 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q22.f64[0]), v115, _Q22, 1), v116, v111);
  __asm { FMLA            D4, D13, V22.D[1] }
  v121 = _D4 + v39 * v111;
  v122 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q24.f64[0]), v115, _Q24, 1), v116, v113);
  __asm { FMLA            D22, D13, V24.D[1] }
  _Q22.f64[0] = _Q22.f64[0] + v39 * v113;
  v123 = _Q22.f64[0] + v119.f64[1] + v117.f64[0] + 1.0;
  v124 = v117.f64[0] + 1.0 - v119.f64[1] - _Q22.f64[0];
  v125 = v119.f64[1] + 1.0 - v117.f64[0] - _Q22.f64[0];
  v126 = _Q22.f64[0] + 1.0 - v117.f64[0] - v119.f64[1];
  v127 = v122.f64[1] + v121;
  v128 = v123 < v124;
  if (v123 >= v124)
    v129 = v123;
  else
    v129 = v124;
  if (v129 >= v125)
    v130 = v129;
  else
    v130 = v125;
  if (v129 < v125)
    v128 = 2;
  v117.f64[0] = v118 - v122.f64[0];
  _NF = v130 < v126;
  v131 = v119.f64[0] + v117.f64[1];
  if (_NF)
    v128 = 3;
  if (v128 == 2)
  {
    v141 = sqrt(v125) * 0.5;
    *(double *)(a3 + 64) = v141;
    v142 = v141 * 4.0;
    *(double *)(a3 + 48) = v117.f64[0] / v142;
    v138 = v131 / v142;
    v139 = v127 / v142;
    goto LABEL_20;
  }
  v132 = v122.f64[1] - v121;
  v133 = v118 + v122.f64[0];
  if (v128 == 1)
  {
    v138 = sqrt(v124) * 0.5;
    *(double *)(a3 + 48) = v132 / (v138 * 4.0);
    *(double *)(a3 + 64) = v131 / (v138 * 4.0);
    v139 = v133 / (v138 * 4.0);
LABEL_20:
    v140 = 3;
    v143 = v958;
    v144 = v955;
    _Q25 = v915;
    v146 = v911;
    v147.f64[0] = v908;
    v135 = v921;
    goto LABEL_23;
  }
  v134 = v119.f64[0] - v117.f64[1];
  v135 = v921;
  if (v128)
  {
    v148 = sqrt(v126) * 0.5;
    *(double *)(a3 + 72) = v148;
    v149 = v148 * 4.0;
    *(double *)(a3 + 48) = v134 / (v148 * 4.0);
    v138 = v133 / (v148 * 4.0);
    v139 = v127 / v149;
    v140 = 2;
  }
  else
  {
    v136 = sqrt(v123) * 0.5;
    *(double *)(a3 + 48) = v136;
    v137 = v136 * 4.0;
    v138 = v132 / v137;
    *(double *)(a3 + 64) = v117.f64[0] / v137;
    v139 = v134 / v137;
    v140 = 3;
  }
  v143 = v958;
  v144 = v955;
  _Q25 = v915;
  v146 = v911;
  v147.f64[0] = v908;
LABEL_23:
  *(_QWORD *)&v150.f64[0] = v992.i64[0];
  *(_QWORD *)&v150.f64[1] = v926;
  *(_QWORD *)&v151.f64[0] = v994.i64[0];
  *(_QWORD *)&v151.f64[1] = v906;
  v91.f64[1] = v99;
  _Q18.f64[1] = v92;
  v103.f64[1] = v104;
  v152.f64[0] = v942;
  *(_QWORD *)&v152.f64[1] = v904;
  v153.f64[0] = v945;
  *(_QWORD *)&v153.f64[1] = v902;
  *(_QWORD *)&v147.f64[1] = v932;
  _Q26 = vsubq_f64(v151, v150);
  v155 = vsubq_f64(v143, v144);
  *(double *)(a3 + 48 + 8 * v140) = v139;
  v156 = vmlaq_n_f64(vmulq_n_f64(v91, v985), _Q18, v971);
  v157 = vmlaq_n_f64(vmulq_n_f64(v91, v973), _Q18, v967);
  v158 = vmlaq_n_f64(vmulq_n_f64(v91, v975), _Q18, v979);
  v159 = vmlaq_n_f64(v156, v103, v961);
  v160 = vmlaq_n_f64(v157, v103, v964);
  _Q18.f64[0] = v100 * v973 + v102 * v967 + v38.f64[0] * v964;
  _Q6 = vmlaq_n_f64(v158, v103, v937);
  v38.f64[0] = v100 * v975 + v102 * v979 + v38.f64[0] * v937;
  *(double *)(a3 + 56) = -v138;
  _Q21 = *(float64x2_t *)(a1 + 152);
  v163 = vmlaq_laneq_f64(vmulq_n_f64(v159, _Q21.f64[0]), v160, _Q21, 1);
  _Q19 = *(float64x2_t *)(a1 + 176);
  v165 = vmlaq_laneq_f64(vmulq_n_f64(v159, _Q19.f64[0]), v160, _Q19, 1);
  _Q20 = *(float64x2_t *)(a1 + 200);
  v167 = vmlaq_laneq_f64(vmulq_n_f64(v159, _Q20.f64[0]), v160, _Q20, 1);
  _Q16 = vnegq_f64(*(float64x2_t *)(a3 + 64));
  *(float64x2_t *)(a3 + 64) = _Q16;
  v169 = *(double *)(a1 + 168);
  v170 = vmlaq_n_f64(v163, _Q6, v169);
  v150.f64[0] = *(float64_t *)(a1 + 192);
  v171 = vmlaq_n_f64(v165, _Q6, v150.f64[0]);
  v160.f64[0] = *(float64_t *)(a1 + 216);
  v172 = vmlaq_n_f64(v167, _Q6, v160.f64[0]);
  __asm
  {
    FMLA            D6, D18, V21.D[1]
    FMLA            D16, D18, V19.D[1]
    FMLA            D17, D18, V20.D[1]
  }
  _Q6.f64[0] = _Q6.f64[0] + v38.f64[0] * v169;
  _Q16.f64[0] = _Q16.f64[0] + v38.f64[0] * v150.f64[0];
  v38.f64[0] = _D17 + v38.f64[0] * v160.f64[0];
  v174 = vaddq_f64(v152, v170);
  v175 = vaddq_f64(v135, _Q6);
  v176 = vaddq_f64(v146, _Q16);
  v177 = vaddq_f64(v147, v172);
  v178 = vaddq_f64(_Q25, v38);
  *(float64_t *)(a3 + 168) = v175.f64[0];
  *(float64x2_t *)(a3 + 152) = v174;
  *(float64_t *)(a3 + 192) = v176.f64[0];
  *(float64x2_t *)(a3 + 176) = vaddq_f64(v153, v171);
  *(float64_t *)(a3 + 216) = v178.f64[0];
  *(float64x2_t *)(a3 + 200) = v177;
  v176.f64[0] = *(float64_t *)(a2 + 312);
  v179 = *(float64x2_t *)(a2 + 296);
  v175.f64[0] = *(float64_t *)(a2 + 336);
  v180 = *(float64x2_t *)(a2 + 320);
  v178.f64[0] = *(float64_t *)(a2 + 360);
  v177.f64[0] = v176.f64[0] * v950 + v175.f64[0] * *(double *)&v998 + v178.f64[0] * v989.f64[0];
  v174.f64[0] = *(float64_t *)(a2 + 40);
  v181 = vaddq_f64(v174, v177);
  v182 = *(float64x2_t *)(a2 + 344);
  _Q17 = *(float64x2_t *)(a2 + 24);
  v184 = vaddq_f64(_Q17, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v179, v950), v947, v180), v953, v182));
  _Q17.f64[0] = *(float64_t *)(a2 + 240);
  _Q18.f64[0] = *(float64_t *)(a2 + 264);
  __asm { FMLA            D25, D18, V26.D[1] }
  v146.f64[0] = *(float64_t *)(a2 + 288);
  v185.f64[1] = v155.f64[1];
  v959 = v155.f64[0];
  _Q25.f64[0] = vmlad_n_f64(_Q25.f64[0], v146.f64[0], v155.f64[0]);
  *(_QWORD *)&v181.f64[0] = *(_OWORD *)&vaddq_f64(v181, _Q25);
  _Q25 = *(float64x2_t *)(a2 + 224);
  _Q28 = *(float64x2_t *)(a2 + 248);
  _Q8 = *v14;
  _Q4 = vaddq_f64(v184, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q25, _Q26.f64[0]), _Q28, _Q26, 1), *v14, v155.f64[0]));
  __asm { FMLA            D9, D13, V4.D[1] }
  v185.f64[0] = vmlad_n_f64(_D9, v39, v181.f64[0]);
  v972 = *(float64x2_t *)(a1 + 24);
  v191 = vaddq_f64(v972, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q4.f64[0]), v115, _Q4, 1), v116, v181.f64[0]));
  *(float64x2_t *)(a3 + 24) = v191;
  v191.f64[0] = *(float64_t *)(a1 + 40);
  v968 = v191;
  *(_QWORD *)(a3 + 40) = *(_OWORD *)&vaddq_f64(v191, v185);
  __asm { FMLA            D4, D13, V25.D[1] }
  v192 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q25.f64[0]), v115, _Q25, 1), v116, _Q17.f64[0]);
  _Q17.f64[0] = _Q4.f64[0] + v39 * _Q17.f64[0];
  __asm { FMLA            D4, D13, V28.D[1] }
  v193 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q28.f64[0]), v115, _Q28, 1), v116, _Q18.f64[0]);
  _Q18.f64[0] = _Q4.f64[0] + v39 * _Q18.f64[0];
  __asm { FMLA            D4, D13, V8.D[1] }
  v194 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q8.f64[0]), v115, _Q8, 1), v116, v146.f64[0]);
  _Q8.f64[0] = _Q4.f64[0] + v39 * v146.f64[0];
  v946 = *(float64x2_t *)(a1 + 224);
  *(float64x2_t *)(a3 + 224) = vaddq_f64(v192, v946);
  v146.f64[0] = *(float64_t *)(a1 + 240);
  *(_QWORD *)(a3 + 240) = *(_OWORD *)&vaddq_f64(_Q17, v146);
  v922 = *(float64x2_t *)(a1 + 248);
  *(float64x2_t *)(a3 + 248) = vaddq_f64(v193, v922);
  v193.f64[0] = *(float64_t *)(a1 + 264);
  *(_QWORD *)(a3 + 264) = *(_OWORD *)&vaddq_f64(_Q18, v193);
  v933 = *(float64x2_t *)(a1 + 272);
  *(float64x2_t *)v12 = vaddq_f64(v194, v933);
  _Q28.f64[0] = *(float64_t *)(a1 + 288);
  _Q0 = vaddq_f64(_Q8, _Q28);
  *(float64_t *)(v12 + 16) = _Q0.f64[0];
  _Q4.f64[0] = *(float64_t *)(v10 + 592);
  __asm { FMLA            D0, D4, V21.D[1] }
  _D18 = _Q4.f64[0];
  v986 = _Q4.f64[0];
  _Q4.f64[0] = *(float64_t *)(v10 + 664);
  _Q0.f64[0] = _Q0.f64[0] + _Q4.f64[0] * v169;
  v995 = _Q4.f64[0];
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v176, _Q0);
  _Q9 = *(float64x2_t *)(v10 + 504);
  v974 = _Q9;
  v980 = *(float64x2_t *)(v10 + 576);
  v993 = *(float64x2_t *)(v10 + 648);
  _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q9, _Q21.f64[0]), v980, _Q21, 1), v993, v169);
  _Q29 = vaddq_f64(v179, _Q8);
  v976 = *(double *)(v10 + 520);
  __asm { FMLA            D8, D18, V19.D[1] }
  _Q8.f64[0] = _Q8.f64[0] + _Q4.f64[0] * v150.f64[0];
  *(_QWORD *)&v175.f64[0] = *(_OWORD *)&vaddq_f64(v175, _Q8);
  _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q9, _Q19.f64[0]), v980, _Q19, 1), v993, v150.f64[0]);
  _Q7 = vaddq_f64(v180, _Q8);
  __asm { FMLA            D8, D18, V20.D[1] }
  _Q8.f64[0] = _Q8.f64[0] + _Q4.f64[0] * v160.f64[0];
  *(_QWORD *)&v178.f64[0] = *(_OWORD *)&vaddq_f64(v178, _Q8);
  _Q31 = vaddq_f64(v182, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q9, _Q20.f64[0]), v980, _Q20, 1), v993, v160.f64[0]));
  __asm { FMLA            D9, D13, V29.D[1] }
  v203 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q29.f64[0]), v115, _Q29, 1), v116, _Q0.f64[0]);
  _Q9.f64[0] = vmlad_n_f64(_Q9.f64[0], v39, _Q0.f64[0]);
  __asm { FMLA            D29, D13, V7.D[1] }
  v204 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q7.f64[0]), v115, _Q7, 1), v116, v175.f64[0]);
  _Q29.f64[0] = vmlad_n_f64(_Q29.f64[0], v39, v175.f64[0]);
  __asm { FMLA            D7, D13, V31.D[1] }
  v205 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, _Q31.f64[0]), v115, _Q31, 1), v116, v178.f64[0]);
  _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], v39, v178.f64[0]);
  v206 = *(float64x2_t *)(a1 + 296);
  v965 = v206;
  *(float64x2_t *)(v12 + 24) = vaddq_f64(v206, v203);
  v206.f64[0] = *(float64_t *)(a1 + 312);
  v943 = v206;
  *(_QWORD *)(v12 + 40) = *(_OWORD *)&vaddq_f64(v206, _Q9);
  v207 = *(float64x2_t *)(a1 + 320);
  v956 = v207;
  v208 = vaddq_f64(v207, v204);
  *(float64x2_t *)(v12 + 48) = v208;
  v208.f64[0] = *(float64_t *)(a1 + 336);
  v938 = v208;
  *(_QWORD *)(v12 + 64) = *(_OWORD *)&vaddq_f64(v208, _Q29);
  v962 = *(float64x2_t *)(a1 + 344);
  v209 = vaddq_f64(v962, v205);
  *(float64x2_t *)(v12 + 72) = v209;
  v209.f64[0] = *(float64_t *)(a1 + 360);
  v927 = v209;
  *(_QWORD *)(v12 + 88) = *(_OWORD *)&vaddq_f64(v209, _Q7);
  v912 = *(float64x2_t *)(a2 + 512);
  v210 = *(float64x2_t *)(a2 + 536);
  v916 = v210;
  v211 = vmlaq_f64(vmulq_n_f64(v912, v950), v947, v210);
  v948 = *(float64x2_t *)(a2 + 560);
  v210.f64[0] = *(float64_t *)(a2 + 528);
  v205.f64[0] = *(float64_t *)(a2 + 552);
  _Q7.f64[0] = *(float64_t *)(a2 + 576);
  v212.f64[1] = v989.f64[1];
  _Q9.f64[0] = v210.f64[0] * v950 + v205.f64[0] * *(double *)&v998 + _Q7.f64[0] * v989.f64[0];
  v213 = v116;
  v116.f64[0] = *(float64_t *)(a2 + 16);
  _Q18 = _Q13;
  v215 = vaddq_f64(v116, _Q9);
  v216 = v4;
  _Q11 = *(float64x2_t *)(a2 + 440);
  _Q9 = *(float64x2_t *)(a2 + 464);
  v219 = vmlaq_laneq_f64(vmulq_n_f64(_Q11, _Q26.f64[0]), _Q9, _Q26, 1);
  _Q17.f64[0] = v39;
  v220 = *(double *)(a2 + 456);
  _D10 = *(double *)(a2 + 480);
  v222 = _Q1;
  __asm { FMLA            D1, D10, V26.D[1] }
  _Q26 = *(float64x2_t *)(a2 + 488);
  _Q15 = vmlaq_n_f64(v219, _Q26, v959);
  v207.f64[0] = *(float64_t *)(a2 + 504);
  _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v207.f64[0], v959);
  v212.f64[0] = *(float64_t *)(a2 + 1568);
  v225 = v115;
  v115.f64[0] = *(float64_t *)(a1 + 16);
  *(_QWORD *)&v226 = *(_OWORD *)&vaddq_f64(v215, _Q1);
  _Q13 = vaddq_f64(vaddq_f64(*(float64x2_t *)a2, vmlaq_f64(v211, v953, v948)), _Q15);
  __asm { FMLA            D15, D18, V13.D[1] }
  _Q15.f64[0] = vmlad_n_f64(_Q15.f64[0], _Q17.f64[0], v226);
  v228 = vaddq_f64(vmlaq_n_f64(*(float64x2_t *)a1, v972, v212.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q13.f64[0]), v225, _Q13, 1), v213, v226));
  *(float64x2_t *)a3 = v228;
  *(_QWORD *)(a3 + 16) = *(_OWORD *)&vaddq_f64(vmlaq_f64(v115, v968, v212), _Q15);
  v228.f64[0] = *(float64_t *)(a1 + 456);
  v229 = vmlaq_f64(v228, v146, v212);
  v230.f64[1] = v946.f64[1];
  v230.f64[0] = *(float64_t *)(a1 + 480);
  v231 = vmlaq_f64(v230, v193, v212);
  v232.f64[1] = v922.f64[1];
  v232.f64[0] = *(float64_t *)(a1 + 504);
  __asm { FMLA            D14, D18, V11.D[1] }
  v234 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q11.f64[0]), v225, _Q11, 1), v213, v220);
  _Q11.f64[0] = _D14 + _Q17.f64[0] * v220;
  __asm { FMLA            D14, D18, V9.D[1] }
  v236 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q9.f64[0]), v225, _Q9, 1), v213, _D10);
  _Q9.f64[0] = _D14 + _Q17.f64[0] * _D10;
  __asm { FMLA            D14, D18, V26.D[1] }
  v238 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q26.f64[0]), v225, _Q26, 1), v213, v207.f64[0]);
  v207.f64[0] = _D14 + _Q17.f64[0] * v207.f64[0];
  _Q1 = vaddq_f64(v234, vmlaq_n_f64(*(float64x2_t *)(a1 + 440), v946, v212.f64[0]));
  v240 = vaddq_f64(v236, vmlaq_n_f64(*(float64x2_t *)(a1 + 464), v922, v212.f64[0]));
  _Q26 = vaddq_f64(v238, vmlaq_n_f64(*(float64x2_t *)(a1 + 488), v933, v212.f64[0]));
  *(float64x2_t *)(v12 + 168) = _Q1;
  *(_QWORD *)(v12 + 184) = *(_OWORD *)&vaddq_f64(_Q11, v229);
  *(float64x2_t *)(v12 + 192) = v240;
  *(_QWORD *)(v12 + 208) = *(_OWORD *)&vaddq_f64(_Q9, v231);
  *(float64x2_t *)(v12 + 216) = _Q26;
  *(_QWORD *)(v12 + 232) = *(_OWORD *)&vaddq_f64(v207, vmlaq_f64(v232, _Q28, v212));
  _Q25 = *(float64x2_t *)(v10 + 480);
  _Q4 = *(float64x2_t *)(v10 + 552);
  v244 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, _Q21.f64[0]), _Q4, _Q21, 1);
  v232.f64[0] = *(float64_t *)(v10 + 496);
  _Q26.f64[0] = *(float64_t *)(v10 + 568);
  __asm { FMLA            D1, D26, V21.D[1] }
  _Q21 = *(float64x2_t *)(v10 + 624);
  v246 = vmlaq_n_f64(v244, _Q21, v169);
  _Q28.f64[0] = *(float64_t *)(v10 + 640);
  _Q1.f64[0] = _Q1.f64[0] + _Q28.f64[0] * v169;
  __asm { FMLA            D24, D26, V19.D[1] }
  v248 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q25, _Q19.f64[0]), _Q4, _Q19, 1), _Q21, v150.f64[0]);
  _Q19.f64[0] = _D24 + _Q28.f64[0] * v150.f64[0];
  __asm { FMLA            D24, D26, V20.D[1] }
  v250 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q25, _Q20.f64[0]), _Q4, _Q20, 1), _Q21, v160.f64[0]);
  _Q20.f64[0] = _D24 + _Q28.f64[0] * v160.f64[0];
  v160.f64[0] = *(float64_t *)(a1 + 528);
  v203.f64[1] = v965.f64[1];
  v203.f64[0] = *(float64_t *)(a1 + 552);
  v238.f64[1] = v956.f64[1];
  v238.f64[0] = *(float64_t *)(a1 + 576);
  v251 = vmlaq_f64(v238, v927, v212);
  v236.f64[1] = v962.f64[1];
  _Q1 = vaddq_f64(v210, _Q1);
  _Q0 = vaddq_f64(v912, v246);
  _Q5 = vaddq_f64(v205, _Q19);
  _Q2 = vaddq_f64(v916, v248);
  *(_QWORD *)&v205.f64[0] = *(_OWORD *)&vaddq_f64(_Q7, _Q20);
  _Q7 = vaddq_f64(v948, v250);
  __asm { FMLA            D20, D18, V0.D[1] }
  _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q0.f64[0]), v225, _Q0, 1), v213, _Q1.f64[0]);
  _Q20.f64[0] = vmlad_n_f64(_Q20.f64[0], _Q17.f64[0], _Q1.f64[0]);
  __asm { FMLA            D1, D18, V2.D[1] }
  v258 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q2.f64[0]), v225, _Q2, 1), v213, _Q5.f64[0]);
  _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], _Q17.f64[0], _Q5.f64[0]);
  __asm { FMLA            D5, D18, V7.D[1] }
  v259 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q7.f64[0]), v225, _Q7, 1), v213, v205.f64[0]);
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], _Q17.f64[0], v205.f64[0]);
  _Q7 = vaddq_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 512), v965, v212.f64[0]), _Q19);
  v261 = vaddq_f64(vmlaq_f64(v203, v938, v212), _Q1);
  v262 = vaddq_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 536), v956, v212.f64[0]), v258);
  v263 = vaddq_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 560), v962, v212.f64[0]), v259);
  *(float64x2_t *)(v12 + 240) = _Q7;
  *(_QWORD *)(v12 + 256) = *(_OWORD *)&vaddq_f64(vmlaq_f64(v160, v943, v212), _Q20);
  *(float64x2_t *)(v12 + 264) = v262;
  *(float64_t *)(v12 + 280) = v261.f64[0];
  *(float64x2_t *)(v12 + 288) = v263;
  *(_QWORD *)(v12 + 304) = *(_OWORD *)&vaddq_f64(v251, _Q5);
  _Q5.f64[0] = *(float64_t *)(a1 + 1568);
  _Q5.f64[1] = *(float64_t *)(a1 + 1648);
  v262.f64[0] = *(float64_t *)(a1 + 1728);
  v261.f64[0] = *(float64_t *)(a2 + 1728);
  *(_QWORD *)&v205.f64[0] = *(_OWORD *)&vaddq_f64(v262, v261);
  v263.f64[0] = *(float64_t *)(v8 + 520);
  v969 = v263;
  v264 = *(float64x2_t *)(v8 + 504);
  _Q7.f64[0] = *(float64_t *)(v8 + 592);
  v262.f64[0] = *(float64_t *)(v8 + 496);
  _Q0 = vmlaq_f64(v262, v212, v263);
  v266 = vmlaq_n_f64(*(float64x2_t *)(v8 + 480), v264, v212.f64[0]);
  v263.f64[0] = *(float64_t *)(v8 + 568);
  _Q2 = vmlaq_f64(v263, v212, _Q7);
  v268 = *(float64x2_t *)(v8 + 576);
  v269 = vmlaq_n_f64(*(float64x2_t *)(v8 + 552), v268, v212.f64[0]);
  v236.f64[0] = *(float64_t *)(v8 + 664);
  v251.f64[0] = *(float64_t *)(v8 + 640);
  _Q10 = vmlaq_f64(v251, v212, v236);
  _Q8 = *(float64x2_t *)(v8 + 648);
  v272 = vmlaq_n_f64(*(float64x2_t *)(v8 + 624), _Q8, v212.f64[0]);
  v212.f64[1] = *(float64_t *)(a2 + 1648);
  v273 = vaddq_f64(_Q5, v212);
  *(float64_t *)(a3 + 1568) = v273.f64[0];
  *(float64_t *)(a3 + 1648) = v273.f64[1];
  *(float64_t *)(a3 + 1728) = v205.f64[0];
  _Q23 = v216;
  _Q16 = _Q18;
  __asm { FMLA            D5, D16, V25.D[1] }
  v276 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q25.f64[0]), v225, _Q25, 1), v213, v232.f64[0]);
  _Q5.f64[0] = _Q5.f64[0] + _Q17.f64[0] * v232.f64[0];
  __asm { FMLA            D19, D16, V4.D[1] }
  v277 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q4.f64[0]), v225, _Q4, 1), v213, _Q26.f64[0]);
  _Q20.f64[0] = _Q19.f64[0] + _Q17.f64[0] * _Q26.f64[0];
  __asm { FMLA            D4, D16, V21.D[1] }
  v278 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q21.f64[0]), v225, _Q21, 1), v213, _Q28.f64[0]);
  _Q21.f64[0] = _Q4.f64[0] + _Q17.f64[0] * _Q28.f64[0];
  v279 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v276, v813), v277, v803), v278, v806);
  _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v276, v808), v277, v821), v278, v811);
  v281 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v276, _Q23.f64[0]), v277, _Q18.f64[0]), v278, _Q17.f64[0]);
  v282 = _Q23;
  _Q25.f64[0] = _Q5.f64[0] * v813 + _Q20.f64[0] * v803 + _Q21.f64[0] * v806;
  v999 = _Q25.f64[0];
  v277.f64[0] = _Q5.f64[0] * v808 + _Q20.f64[0] * v821 + _Q21.f64[0] * v811;
  v990 = v277.f64[0];
  _Q23.f64[0] = _Q5.f64[0] * _Q23.f64[0] + _Q20.f64[0] * _Q16.f64[0] + _Q21.f64[0] * _Q17.f64[0];
  _Q20.f64[0] = _Q17.f64[0];
  *(_QWORD *)(v12 + 1528) = *(_OWORD *)&vaddq_f64(_Q25, _Q0);
  *(float64x2_t *)(v12 + 1512) = vaddq_f64(v279, v266);
  *(_QWORD *)(v12 + 1600) = *(_OWORD *)&vaddq_f64(v277, _Q2);
  *(float64x2_t *)(v12 + 1584) = vaddq_f64(_Q19, v269);
  *(_QWORD *)(v12 + 1672) = *(_OWORD *)&vaddq_f64(_Q23, _Q10);
  *(float64x2_t *)(v12 + 1656) = vaddq_f64(v281, v272);
  _Q2.f64[1] = v974.f64[1];
  v283 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, v974.f64[0]), v225, v974, 1), v213, v976);
  _Q1 = v282;
  __asm { FMLA            D0, D16, V2.D[1] }
  v282.f64[0] = _Q0.f64[0] + _Q17.f64[0] * v976;
  _Q5.f64[1] = v980.f64[1];
  v285 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, v980.f64[0]), v225, v980, 1), v213, v986);
  __asm { FMLA            D0, D16, V5.D[1] }
  _Q17.f64[0] = _Q0.f64[0] + _Q17.f64[0] * v986;
  _Q5.f64[1] = v993.f64[1];
  v286 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, v993.f64[0]), v225, v993, 1), v213, v995);
  v269.f64[0] = _Q1.f64[0];
  __asm { FMLA            D0, D16, V5.D[1] }
  v278.f64[0] = _Q16.f64[0];
  _Q16.f64[0] = _Q0.f64[0] + _Q20.f64[0] * v995;
  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v283, v813), v285, v803), v286, v806);
  _Q1.f64[0] = v282.f64[0] * v813 + _Q17.f64[0] * v803 + _Q16.f64[0] * v806;
  v288 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v283, v808), v285, v821), v286, v811);
  _Q5.f64[0] = v282.f64[0] * v808 + _Q17.f64[0] * v821 + _Q16.f64[0] * v811;
  v289 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v283, v269.f64[0]), v285, v278.f64[0]), v286, _Q20.f64[0]);
  _Q16.f64[0] = v282.f64[0] * v269.f64[0] + _Q17.f64[0] * v278.f64[0] + _Q16.f64[0] * _Q20.f64[0];
  _Q20.f64[1] = _Q7.f64[1];
  *(_QWORD *)(v12 + 1552) = *(_OWORD *)&vaddq_f64(_Q1, v969);
  *(float64x2_t *)(v12 + 1536) = vaddq_f64(_Q0, v264);
  *(_QWORD *)(v12 + 1624) = *(_OWORD *)&vaddq_f64(_Q5, _Q7);
  *(float64x2_t *)(v12 + 1608) = vaddq_f64(v288, v268);
  *(_QWORD *)(v12 + 1696) = *(_OWORD *)&vaddq_f64(_Q16, v236);
  *(float64x2_t *)(v12 + 1680) = vaddq_f64(v289, _Q8);
  v290 = *(float64x2_t *)(v10 + 528);
  _Q27 = *(float64x2_t *)(v10 + 600);
  _Q28 = *(float64x2_t *)(v10 + 672);
  _Q7.f64[0] = *(float64_t *)(v8 + 544);
  _Q18 = *(float64x2_t *)(v8 + 528);
  _Q17.f64[0] = *(float64_t *)(v8 + 616);
  _Q21 = *(float64x2_t *)(v8 + 600);
  _Q24 = *(float64x2_t *)(v8 + 672);
  v296 = vmlaq_laneq_f64(vmulq_n_f64(v290, _Q18.f64[0]), _Q27, _Q18, 1);
  v297 = vmlaq_laneq_f64(vmulq_n_f64(v290, _Q21.f64[0]), _Q27, _Q21, 1);
  v298 = vmlaq_laneq_f64(vmulq_n_f64(v290, _Q24.f64[0]), _Q27, _Q24, 1);
  v290.f64[0] = *(float64_t *)(v8 + 688);
  v299 = vmlaq_n_f64(v296, _Q28, _Q7.f64[0]);
  v300 = vmlaq_n_f64(v297, _Q28, _Q17.f64[0]);
  _Q31 = vmlaq_n_f64(v298, _Q28, v290.f64[0]);
  _Q27.f64[0] = *(float64_t *)(v10 + 616);
  __asm
  {
    FMLA            D28, D27, V18.D[1]
    FMLA            D8, D27, V21.D[1]
    FMLA            D26, D27, V24.D[1]
  }
  _Q27.f64[0] = *(float64_t *)(v10 + 688);
  *(float64x2_t *)(v12 + 1560) = v299;
  *(double *)(v12 + 1576) = _Q28.f64[0] + _Q27.f64[0] * _Q7.f64[0];
  *(double *)(v12 + 1648) = _Q8.f64[0] + _Q27.f64[0] * _Q17.f64[0];
  *(float64x2_t *)(v12 + 1632) = v300;
  *(double *)(v12 + 1720) = _Q26.f64[0] + _Q27.f64[0] * v290.f64[0];
  *(float64x2_t *)(v12 + 1704) = _Q31;
  _Q29 = *(float64x2_t *)(v10 + 80);
  v303 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q0, _Q18.f64[0]), v288, _Q21.f64[0]), v289, _Q24.f64[0]);
  _Q20.f64[0] = vmlad_n_f64(vmlad_n_f64(_Q1.f64[0] * _Q18.f64[0], _Q5.f64[0], _Q21.f64[0]), _Q16.f64[0], _Q24.f64[0]);
  v793 = (int8x16_t)_Q20;
  _Q20 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q0, _Q18, 1), v288, _Q21, 1), v289, _Q24, 1);
  v305 = vmlaq_n_f64(vmulq_n_f64(_Q0, _Q7.f64[0]), v288, _Q17.f64[0]);
  __asm
  {
    FMLA            D0, D5, V21.D[1]
    FMLA            D0, D16, V24.D[1]
  }
  v795 = (int8x16_t)_Q0;
  v306 = (int8x16_t)vmlaq_n_f64(v305, v289, v290.f64[0]);
  _Q0.f64[0] = _Q1.f64[0] * _Q7.f64[0] + _Q5.f64[0] * _Q17.f64[0] + _Q16.f64[0] * v290.f64[0];
  v789 = (float64x2_t)_Q20;
  v791 = (int8x16_t)_Q0;
  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v279, _Q18.f64[0]), _Q19, _Q21.f64[0]), v281, _Q24.f64[0]);
  _Q6 = _Q0;
  v913 = _Q0;
  _Q1.f64[0] = v990;
  v264.f64[0] = vmlad_n_f64(vmlad_n_f64(v999 * _Q18.f64[0], v990, _Q21.f64[0]), _Q23.f64[0], _Q24.f64[0]);
  v309 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v279, _Q18, 1), _Q19, _Q21, 1), v281, _Q24, 1);
  __asm
  {
    FMLA            D0, D1, V21.D[1]
    FMLA            D0, D23, V24.D[1]
  }
  v310 = (int64x2_t)_Q0;
  v776 = v264.f64[0];
  v778 = _Q0.f64[0];
  v838 = *(float64x2_t *)(v10 + 64);
  _Q18 = *(float64x2_t *)(v10 + 152);
  v861 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v279, _Q7.f64[0]), _Q19, _Q17.f64[0]), v281, v290.f64[0]);
  v312 = *(float64x2_t *)(v10 + 136);
  v825 = *(float64x2_t *)(v10 + 120);
  v236.f64[0] = v999 * _Q7.f64[0] + v990 * _Q17.f64[0] + _Q23.f64[0] * v290.f64[0];
  v769 = v236.f64[0];
  _Q1 = *v15;
  _Q15 = *(float64x2_t *)(v10 + 48);
  _Q8.f64[0] = *(float64_t *)(v10 + 184);
  __asm { FMLA            D0, D8, V1.D[1] }
  v907 = _Q8;
  _Q1 = *(float64x2_t *)(a1 + 2016);
  _Q24 = *(float64x2_t *)(v10 + 192);
  v858 = *(float64x2_t *)(v10 + 264);
  v834 = *(float64x2_t *)(v10 + 208);
  _Q16 = *(float64x2_t *)(v10 + 296);
  v870 = *(float64x2_t *)(v10 + 280);
  v878 = *(float64x2_t *)(v10 + 224);
  v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q29, v15->f64[0]), _Q18, *v15, 1), v878, _Q1.f64[0]), _Q16, _Q1, 1);
  v875 = _Q16;
  v939 = *(float64x2_t *)(v10 + 240);
  v319 = *(float64x2_t *)(v10 + 312);
  v320 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v10 + 96), v15->f64[0]), *(float64x2_t *)(v10 + 168), *v15, 1), v939, _Q1.f64[0]), v319, _Q1, 1);
  _Q10.f64[0] = *(float64_t *)(v10 + 256);
  v855 = _Q10;
  _Q23.f64[0] = *(float64_t *)(v10 + 328);
  __asm { FMLA            D0, D23, V1.D[1] }
  v974.f64[0] = _Q23.f64[0];
  _Q22 = *(float64x2_t *)(v10 + 336);
  _Q25 = *(float64x2_t *)(a1 + 2032);
  v797 = _Q22;
  v981 = *(float64x2_t *)(v10 + 408);
  v323 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q15, v15->f64[0]), v825, *v15, 1), _Q24, _Q1.f64[0]), v858, _Q1, 1), _Q22, _Q25.f64[0]), v981, _Q25, 1);
  v917 = *(float64x2_t *)(v10 + 352);
  v868 = *(float64x2_t *)(v10 + 424);
  _Q1 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v838, v15->f64[0]), v312, *v15, 1), v834, _Q1.f64[0]), v870, _Q1, 1), v917, _Q25.f64[0]), v868, _Q25, 1);
  v872 = *(float64x2_t *)(v10 + 368);
  v923 = *(float64x2_t *)(v10 + 440);
  v325 = vmlaq_laneq_f64(vmlaq_n_f64(v318, v872, _Q25.f64[0]), v923, _Q25, 1);
  v1000 = *(float64x2_t *)(v10 + 384);
  v977 = *(float64x2_t *)(v10 + 456);
  v326 = vmlaq_laneq_f64(vmlaq_n_f64(v320, v1000, _Q25.f64[0]), v977, _Q25, 1);
  v996 = *(double *)(v10 + 400);
  _Q31.f64[0] = *(float64_t *)(v10 + 472);
  __asm { FMLA            D0, D31, V25.D[1] }
  v903 = _Q31.f64[0];
  _Q25 = *(float64x2_t *)(a1 + 2048);
  v771 = (float64x2_t)v303;
  v849 = (float64x2_t)vzip1q_s64((int64x2_t)v264, (int64x2_t)v303);
  v856 = (float64x2_t)vzip1q_s64(v310, (int64x2_t)_Q20);
  v328 = vmlaq_laneq_f64(vmlaq_n_f64(_Q1, v849, _Q25.f64[0]), v856, _Q25, 1);
  v831 = (float64x2_t)vextq_s8(v303, v793, 8uLL);
  v909 = (float64x2_t)vextq_s8(_Q20, v795, 8uLL);
  v901 = *(float64x2_t *)(v10 + 528);
  v970 = *(float64x2_t *)(v10 + 600);
  v972.f64[0] = *(float64_t *)(v10 + 544);
  v991 = *(double *)(v10 + 616);
  __asm { FMLA            D0, D1, V25.D[1] }
  _Q1.f64[0] = *(float64_t *)(a1 + 2064);
  v893 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v323, _Q6, _Q25.f64[0]), v309, _Q25, 1), v861, _Q1.f64[0]);
  v763 = (float64x2_t)v306;
  v860 = (float64x2_t)vzip1q_s64((int64x2_t)v236, (int64x2_t)v306);
  v847 = vmlaq_n_f64(v328, v860, _Q1.f64[0]);
  v866 = (float64x2_t)vextq_s8(v306, v791, 8uLL);
  v890 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v325, v831, _Q25.f64[0]), v909, _Q25, 1), v866, _Q1.f64[0]);
  v987 = *(float64x2_t *)(v10 + 672);
  v848 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v326, v901, _Q25.f64[0]), v970, _Q25, 1), v987, _Q1.f64[0]);
  v993.f64[0] = *(float64_t *)(v10 + 688);
  v887 = _Q0.f64[0] + v993.f64[0] * _Q1.f64[0];
  _Q0 = *(float64x2_t *)(a1 + 2072);
  v330 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q0.f64[0]), v825, _Q0, 1);
  v331 = vmlaq_laneq_f64(vmulq_n_f64(v838, _Q0.f64[0]), v312, _Q0, 1);
  v928 = _Q29;
  v880 = _Q18;
  v332 = vmlaq_laneq_f64(vmulq_n_f64(_Q29, _Q0.f64[0]), _Q18, _Q0, 1);
  v934 = *(float64x2_t *)(v10 + 96);
  v840 = *(float64x2_t *)(v10 + 168);
  v333 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q0.f64[0]), v840, _Q0, 1);
  v905 = *(double *)(v10 + 112);
  __asm { FMLA            D1, D8, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2088);
  v335 = vmlaq_laneq_f64(vmlaq_n_f64(v330, _Q24, _Q0.f64[0]), v858, _Q0, 1);
  v336 = vmlaq_laneq_f64(vmlaq_n_f64(v331, v834, _Q0.f64[0]), v870, _Q0, 1);
  v337 = vmlaq_laneq_f64(vmlaq_n_f64(v332, v878, _Q0.f64[0]), _Q16, _Q0, 1);
  v843 = v319;
  v338 = vmlaq_laneq_f64(vmlaq_n_f64(v333, v939, _Q0.f64[0]), v319, _Q0, 1);
  __asm { FMLA            D1, D23, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2104);
  v340 = vmlaq_laneq_f64(vmlaq_n_f64(v335, _Q22, _Q0.f64[0]), v981, _Q0, 1);
  v341 = vmlaq_laneq_f64(vmlaq_n_f64(v336, v917, _Q0.f64[0]), v868, _Q0, 1);
  v342 = vmlaq_laneq_f64(vmlaq_n_f64(v337, v872, _Q0.f64[0]), v923, _Q0, 1);
  v343 = vmlaq_laneq_f64(vmlaq_n_f64(v338, v1000, _Q0.f64[0]), v977, _Q0, 1);
  __asm { FMLA            D1, D31, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2120);
  v864 = v309;
  v345 = vmlaq_laneq_f64(vmlaq_n_f64(v340, v913, _Q0.f64[0]), v309, _Q0, 1);
  v346 = vmlaq_laneq_f64(vmlaq_n_f64(v341, v849, _Q0.f64[0]), v856, _Q0, 1);
  v347 = vmlaq_laneq_f64(vmlaq_n_f64(v342, v831, _Q0.f64[0]), v909, _Q0, 1);
  v348 = vmlaq_laneq_f64(vmlaq_n_f64(v343, v901, _Q0.f64[0]), v970, _Q0, 1);
  _Q31.f64[0] = v991;
  __asm { FMLA            D1, D31, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a1 + 2136);
  v892 = vmlaq_n_f64(v345, v861, _Q0.f64[0]);
  v846 = vmlaq_n_f64(v346, v860, _Q0.f64[0]);
  v889 = vmlaq_n_f64(v347, v866, _Q0.f64[0]);
  v891 = vmlaq_n_f64(v348, v987, _Q0.f64[0]);
  v886 = _Q1.f64[0] + v993.f64[0] * _Q0.f64[0];
  _Q0 = *(float64x2_t *)(a1 + 2144);
  _Q4 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q0.f64[0]), v825, _Q0, 1);
  v351 = vmlaq_laneq_f64(vmulq_n_f64(v838, _Q0.f64[0]), v312, _Q0, 1);
  v352 = vmlaq_laneq_f64(vmulq_n_f64(_Q29, _Q0.f64[0]), _Q18, _Q0, 1);
  v353 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q0.f64[0]), v840, _Q0, 1);
  _Q31.f64[0] = _Q8.f64[0];
  __asm { FMLA            D1, D31, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2160);
  v355 = vmlaq_laneq_f64(vmlaq_n_f64(_Q4, _Q24, _Q0.f64[0]), v858, _Q0, 1);
  v356 = vmlaq_laneq_f64(vmlaq_n_f64(v351, v834, _Q0.f64[0]), v870, _Q0, 1);
  v357 = vmlaq_laneq_f64(vmlaq_n_f64(v352, v878, _Q0.f64[0]), _Q16, _Q0, 1);
  v358 = vmlaq_laneq_f64(vmlaq_n_f64(v353, v939, _Q0.f64[0]), v319, _Q0, 1);
  _Q20.i64[0] = *(_QWORD *)&_Q23.f64[0];
  __asm { FMLA            D1, D20, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2176);
  v360 = vmlaq_laneq_f64(vmlaq_n_f64(v355, _Q22, _Q0.f64[0]), v981, _Q0, 1);
  v361 = vmlaq_laneq_f64(vmlaq_n_f64(v356, v917, _Q0.f64[0]), v868, _Q0, 1);
  v362 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v872, _Q0.f64[0]), v923, _Q0, 1);
  v363 = vmlaq_laneq_f64(vmlaq_n_f64(v358, v1000, _Q0.f64[0]), v977, _Q0, 1);
  _Q19.f64[0] = *(float64_t *)(v10 + 472);
  __asm { FMLA            D1, D19, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2192);
  v365 = vmlaq_laneq_f64(vmlaq_n_f64(v360, v913, _Q0.f64[0]), v309, _Q0, 1);
  v366 = vmlaq_laneq_f64(vmlaq_n_f64(v361, v849, _Q0.f64[0]), v856, _Q0, 1);
  v367 = vmlaq_laneq_f64(vmlaq_n_f64(v362, v831, _Q0.f64[0]), v909, _Q0, 1);
  v368 = vmlaq_laneq_f64(vmlaq_n_f64(v363, v901, _Q0.f64[0]), v970, _Q0, 1);
  _Q6.f64[0] = v991;
  __asm { FMLA            D1, D6, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a1 + 2208);
  v885 = vmlaq_n_f64(v365, v861, _Q0.f64[0]);
  v882 = vmlaq_n_f64(v366, v860, _Q0.f64[0]);
  v949 = vmlaq_n_f64(v367, v866, _Q0.f64[0]);
  v951 = vmlaq_n_f64(v368, v987, _Q0.f64[0]);
  v884 = _Q1.f64[0] + v993.f64[0] * _Q0.f64[0];
  _Q0 = *(float64x2_t *)(a1 + 2216);
  v370 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q0.f64[0]), v825, _Q0, 1);
  v836 = v312;
  v371 = vmlaq_laneq_f64(vmulq_n_f64(v838, _Q0.f64[0]), v312, _Q0, 1);
  v372 = vmlaq_laneq_f64(vmulq_n_f64(_Q29, _Q0.f64[0]), _Q18, _Q0, 1);
  v373 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q0.f64[0]), v840, _Q0, 1);
  __asm { FMLA            D1, D31, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2232);
  v375 = vmlaq_laneq_f64(vmlaq_n_f64(v370, _Q24, _Q0.f64[0]), v858, _Q0, 1);
  v376 = vmlaq_laneq_f64(vmlaq_n_f64(v371, v834, _Q0.f64[0]), v870, _Q0, 1);
  v377 = vmlaq_laneq_f64(vmlaq_n_f64(v372, v878, _Q0.f64[0]), _Q16, _Q0, 1);
  v378 = vmlaq_laneq_f64(vmlaq_n_f64(v373, v939, _Q0.f64[0]), v319, _Q0, 1);
  __asm { FMLA            D1, D20, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2248);
  v380 = vmlaq_laneq_f64(vmlaq_n_f64(v375, _Q22, _Q0.f64[0]), v981, _Q0, 1);
  v381 = vmlaq_laneq_f64(vmlaq_n_f64(v376, v917, _Q0.f64[0]), v868, _Q0, 1);
  v382 = vmlaq_laneq_f64(vmlaq_n_f64(v377, v872, _Q0.f64[0]), v923, _Q0, 1);
  v383 = vmlaq_laneq_f64(vmlaq_n_f64(v378, v1000, _Q0.f64[0]), v977, _Q0, 1);
  __asm { FMLA            D1, D19, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2264);
  v385 = vmlaq_laneq_f64(vmlaq_n_f64(v380, v913, _Q0.f64[0]), v309, _Q0, 1);
  _Q30 = vmlaq_laneq_f64(vmlaq_n_f64(v381, v849, _Q0.f64[0]), v856, _Q0, 1);
  _Q6 = vmlaq_laneq_f64(vmlaq_n_f64(v382, v831, _Q0.f64[0]), v909, _Q0, 1);
  v388 = vmlaq_laneq_f64(vmlaq_n_f64(v383, v901, _Q0.f64[0]), v970, _Q0, 1);
  _Q4.f64[0] = v991;
  __asm { FMLA            D1, D4, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a1 + 2280);
  v845 = vmlaq_n_f64(v385, v861, _Q0.f64[0]);
  v944 = vmlaq_n_f64(_Q30, v860, _Q0.f64[0]);
  v883 = vmlaq_n_f64(_Q6, v866, _Q0.f64[0]);
  v888 = vmlaq_n_f64(v388, v987, _Q0.f64[0]);
  v946.f64[0] = _Q1.f64[0] + v993.f64[0] * _Q0.f64[0];
  _Q0 = *(float64x2_t *)(a1 + 2288);
  v390 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q0.f64[0]), v825, _Q0, 1);
  v391 = vmlaq_laneq_f64(vmulq_n_f64(v838, _Q0.f64[0]), v312, _Q0, 1);
  v392 = vmlaq_laneq_f64(vmulq_n_f64(_Q29, _Q0.f64[0]), _Q18, _Q0, 1);
  v393 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q0.f64[0]), v840, _Q0, 1);
  _Q17.f64[0] = _Q8.f64[0];
  __asm { FMLA            D1, D17, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2304);
  v395 = vmlaq_laneq_f64(vmlaq_n_f64(v390, _Q24, _Q0.f64[0]), v858, _Q0, 1);
  v396 = vmlaq_laneq_f64(vmlaq_n_f64(v391, v834, _Q0.f64[0]), v870, _Q0, 1);
  v397 = vmlaq_laneq_f64(vmlaq_n_f64(v392, v878, _Q0.f64[0]), _Q16, _Q0, 1);
  v398 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v939, _Q0.f64[0]), v319, _Q0, 1);
  _Q19.f64[0] = _Q23.f64[0];
  __asm { FMLA            D1, D19, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2320);
  v400 = vmlaq_laneq_f64(vmlaq_n_f64(v395, _Q22, _Q0.f64[0]), v981, _Q0, 1);
  v401 = vmlaq_laneq_f64(vmlaq_n_f64(v396, v917, _Q0.f64[0]), v868, _Q0, 1);
  v402 = vmlaq_laneq_f64(vmlaq_n_f64(v397, v872, _Q0.f64[0]), v923, _Q0, 1);
  v403 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v1000, _Q0.f64[0]), v977, _Q0, 1);
  _Q26.f64[0] = *(float64_t *)(v10 + 472);
  __asm { FMLA            D1, D26, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2336);
  _Q5 = vmlaq_laneq_f64(vmlaq_n_f64(v400, v913, _Q0.f64[0]), v309, _Q0, 1);
  v406 = vmlaq_laneq_f64(vmlaq_n_f64(v401, v849, _Q0.f64[0]), v856, _Q0, 1);
  v407 = vmlaq_laneq_f64(vmlaq_n_f64(v402, v831, _Q0.f64[0]), v909, _Q0, 1);
  v408 = vmlaq_laneq_f64(vmlaq_n_f64(v403, v901, _Q0.f64[0]), v970, _Q0, 1);
  _Q10.f64[0] = v991;
  __asm { FMLA            D1, D10, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a1 + 2352);
  v900 = vmlaq_n_f64(_Q5, v861, _Q0.f64[0]);
  v966 = vmlaq_n_f64(v406, v860, _Q0.f64[0]);
  v960 = vmlaq_n_f64(v407, v866, _Q0.f64[0]);
  v954 = vmlaq_n_f64(v408, v987, _Q0.f64[0]);
  v894 = _Q1.f64[0] + v993.f64[0] * _Q0.f64[0];
  _Q0 = *(float64x2_t *)(a1 + 2360);
  v410 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q0.f64[0]), v825, _Q0, 1);
  v411 = vmlaq_laneq_f64(vmulq_n_f64(v838, _Q0.f64[0]), v312, _Q0, 1);
  v412 = vmlaq_laneq_f64(vmulq_n_f64(_Q29, _Q0.f64[0]), _Q18, _Q0, 1);
  v413 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q0.f64[0]), v840, _Q0, 1);
  __asm { FMLA            D1, D17, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2376);
  v415 = vmlaq_laneq_f64(vmlaq_n_f64(v410, _Q24, _Q0.f64[0]), v858, _Q0, 1);
  v416 = vmlaq_laneq_f64(vmlaq_n_f64(v411, v834, _Q0.f64[0]), v870, _Q0, 1);
  v417 = vmlaq_laneq_f64(vmlaq_n_f64(v412, v878, _Q0.f64[0]), _Q16, _Q0, 1);
  v418 = vmlaq_laneq_f64(vmlaq_n_f64(v413, v939, _Q0.f64[0]), v319, _Q0, 1);
  __asm { FMLA            D1, D19, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2392);
  v420 = vmlaq_laneq_f64(vmlaq_n_f64(v415, _Q22, _Q0.f64[0]), v981, _Q0, 1);
  v421 = vmlaq_laneq_f64(vmlaq_n_f64(v416, v917, _Q0.f64[0]), v868, _Q0, 1);
  v422 = vmlaq_laneq_f64(vmlaq_n_f64(v417, v872, _Q0.f64[0]), v923, _Q0, 1);
  v423 = vmlaq_laneq_f64(vmlaq_n_f64(v418, v1000, _Q0.f64[0]), v977, _Q0, 1);
  __asm { FMLA            D1, D26, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2408);
  _Q20 = vmlaq_laneq_f64(vmlaq_n_f64(v420, v913, _Q0.f64[0]), v864, _Q0, 1);
  v426 = vmlaq_laneq_f64(vmlaq_n_f64(v421, v849, _Q0.f64[0]), v856, _Q0, 1);
  _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(v422, v831, _Q0.f64[0]), v909, _Q0, 1);
  _Q28 = vmlaq_laneq_f64(vmlaq_n_f64(v423, v901, _Q0.f64[0]), v970, _Q0, 1);
  __asm { FMLA            D1, D10, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a1 + 2424);
  v899 = vmlaq_n_f64(_Q20, v861, _Q0.f64[0]);
  v898 = vmlaq_n_f64(v426, v860, _Q0.f64[0]);
  v963 = vmlaq_n_f64(_Q27, v866, _Q0.f64[0]);
  v957 = vmlaq_n_f64(_Q28, v987, _Q0.f64[0]);
  v895 = _Q1.f64[0] + v993.f64[0] * _Q0.f64[0];
  _Q0 = *(float64x2_t *)(a1 + 2432);
  v430 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q0.f64[0]), v825, _Q0, 1);
  v431 = vmlaq_laneq_f64(vmulq_n_f64(v838, _Q0.f64[0]), v312, _Q0, 1);
  v432 = vmlaq_laneq_f64(vmulq_n_f64(_Q29, _Q0.f64[0]), _Q18, _Q0, 1);
  v433 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q0.f64[0]), v840, _Q0, 1);
  _Q5.f64[0] = _Q8.f64[0];
  __asm { FMLA            D1, D5, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2448);
  v435 = vmlaq_laneq_f64(vmlaq_n_f64(v430, _Q24, _Q0.f64[0]), v858, _Q0, 1);
  v436 = vmlaq_laneq_f64(vmlaq_n_f64(v431, v834, _Q0.f64[0]), v870, _Q0, 1);
  v437 = vmlaq_laneq_f64(vmlaq_n_f64(v432, v878, _Q0.f64[0]), _Q16, _Q0, 1);
  v438 = vmlaq_laneq_f64(vmlaq_n_f64(v433, v939, _Q0.f64[0]), v843, _Q0, 1);
  _Q29.f64[0] = _Q23.f64[0];
  __asm { FMLA            D1, D29, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2464);
  v440 = vmlaq_laneq_f64(vmlaq_n_f64(v435, _Q22, _Q0.f64[0]), v981, _Q0, 1);
  v441 = vmlaq_laneq_f64(vmlaq_n_f64(v436, v917, _Q0.f64[0]), v868, _Q0, 1);
  v442 = vmlaq_laneq_f64(vmlaq_n_f64(v437, v872, _Q0.f64[0]), v923, _Q0, 1);
  _Q11 = vmlaq_laneq_f64(vmlaq_n_f64(v438, v1000, _Q0.f64[0]), v977, _Q0, 1);
  _Q19.f64[0] = *(float64_t *)(v10 + 472);
  __asm { FMLA            D1, D19, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2480);
  v445 = vmlaq_laneq_f64(vmlaq_n_f64(v440, v913, _Q0.f64[0]), v864, _Q0, 1);
  v446 = vmlaq_laneq_f64(vmlaq_n_f64(v441, v849, _Q0.f64[0]), v856, _Q0, 1);
  v447 = vmlaq_laneq_f64(vmlaq_n_f64(v442, v831, _Q0.f64[0]), v909, _Q0, 1);
  _Q25 = vmlaq_laneq_f64(vmlaq_n_f64(_Q11, v901, _Q0.f64[0]), v970, _Q0, 1);
  _Q11.f64[0] = v991;
  __asm { FMLA            D1, D11, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a1 + 2496);
  v854 = vmlaq_n_f64(v445, v861, _Q0.f64[0]);
  v449 = vmlaq_n_f64(v446, v860, _Q0.f64[0]);
  _Q26 = vmlaq_n_f64(v447, v866, _Q0.f64[0]);
  v897 = vmlaq_n_f64(_Q25, v987, _Q0.f64[0]);
  v896 = _Q1.f64[0] + v993.f64[0] * _Q0.f64[0];
  _Q0 = *(float64x2_t *)(a1 + 2504);
  v452 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q0.f64[0]), v825, _Q0, 1);
  v453 = vmlaq_laneq_f64(vmulq_n_f64(v838, _Q0.f64[0]), v836, _Q0, 1);
  v454 = vmlaq_laneq_f64(vmulq_n_f64(v928, _Q0.f64[0]), _Q18, _Q0, 1);
  v455 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q0.f64[0]), v840, _Q0, 1);
  __asm { FMLA            D1, D5, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2520);
  v457 = vmlaq_laneq_f64(vmlaq_n_f64(v452, _Q24, _Q0.f64[0]), v858, _Q0, 1);
  v458 = vmlaq_laneq_f64(vmlaq_n_f64(v453, v834, _Q0.f64[0]), v870, _Q0, 1);
  v459 = vmlaq_laneq_f64(vmlaq_n_f64(v454, v878, _Q0.f64[0]), _Q16, _Q0, 1);
  v460 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v939, _Q0.f64[0]), v843, _Q0, 1);
  _Q8.f64[1] = v855.f64[1];
  _Q5.f64[0] = _Q23.f64[0];
  __asm { FMLA            D1, D5, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2536);
  v462 = vmlaq_laneq_f64(vmlaq_n_f64(v457, _Q22, _Q0.f64[0]), v981, _Q0, 1);
  v463 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v917, _Q0.f64[0]), v868, _Q0, 1);
  v464 = vmlaq_laneq_f64(vmlaq_n_f64(v459, v872, _Q0.f64[0]), v923, _Q0, 1);
  v465 = vmlaq_laneq_f64(vmlaq_n_f64(v460, v1000, _Q0.f64[0]), v977, _Q0, 1);
  _Q30.f64[0] = _Q19.f64[0];
  __asm { FMLA            D1, D30, V0.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 2552);
  v467 = vmlaq_laneq_f64(vmlaq_n_f64(v462, v913, _Q0.f64[0]), v864, _Q0, 1);
  v468 = vmlaq_laneq_f64(vmlaq_n_f64(v463, v849, _Q0.f64[0]), v856, _Q0, 1);
  v469 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v831, _Q0.f64[0]), v909, _Q0, 1);
  v470 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v901, _Q0.f64[0]), v970, _Q0, 1);
  __asm { FMLA            D1, D11, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a1 + 2568);
  _Q13 = vmlaq_n_f64(v467, v861, _Q0.f64[0]);
  v851 = vmlaq_n_f64(v468, v860, _Q0.f64[0]);
  v472 = vmlaq_n_f64(v469, v866, _Q0.f64[0]);
  v473 = vmlaq_n_f64(v470, v987, _Q0.f64[0]);
  v852 = _Q1.f64[0] + v993.f64[0] * _Q0.f64[0];
  _Q3 = *(float64x2_t *)(a1 + 2576);
  _Q1 = *(float64x2_t *)(a1 + 2592);
  _Q0 = *(float64x2_t *)(a1 + 2608);
  _Q2 = *(float64x2_t *)(a1 + 2624);
  _Q31.f64[0] = *(float64_t *)(a1 + 2640);
  v850 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v838, _Q3.f64[0]), v836, _Q3, 1), v834, _Q1.f64[0]), v870, _Q1, 1), v917, _Q0.f64[0]), v868, _Q0, 1), v849, _Q2.f64[0]), v856, _Q2, 1),
           v860,
           _Q31.f64[0]);
  v857 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v928, _Q3.f64[0]), _Q18, _Q3, 1), v878, _Q1.f64[0]), _Q16, _Q1, 1), v872, _Q0.f64[0]), v923, _Q0, 1), v831, _Q2.f64[0]), v909, _Q2, 1),
           v866,
           _Q31.f64[0]);
  _Q17 = _Q15;
  v479 = vmlaq_laneq_f64(vmulq_n_f64(_Q15, _Q3.f64[0]), v825, _Q3, 1);
  _Q5 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q3.f64[0]), v840, _Q3, 1);
  _Q15.f64[0] = v907.f64[0];
  __asm { FMLA            D25, D15, V3.D[1] }
  _Q15.f64[1] = *(float64_t *)(v10 + 200);
  _Q20.f64[1] = *(float64_t *)(v10 + 272);
  v481 = vmlaq_laneq_f64(vmlaq_n_f64(v479, _Q24, _Q1.f64[0]), v858, _Q1, 1);
  v482 = vmlaq_laneq_f64(vmlaq_n_f64(_Q5, v939, _Q1.f64[0]), v843, _Q1, 1);
  _Q5.f64[0] = _Q23.f64[0];
  __asm { FMLA            D25, D5, V1.D[1] }
  _Q22.f64[1] = *(float64_t *)(v10 + 344);
  __asm { FMLA            D25, D30, V0.D[1] }
  v483 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v481, v797, _Q0.f64[0]), v981, _Q0, 1), v913, _Q2.f64[0]), v864, _Q2, 1);
  _Q4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v482, v1000, _Q0.f64[0]), v977, _Q0, 1), v901, _Q2.f64[0]), v970, _Q2, 1);
  _Q0.f64[0] = v991;
  __asm { FMLA            D25, D0, V2.D[1] }
  v867 = vmlaq_n_f64(v483, v861, _Q31.f64[0]);
  v910 = vmlaq_n_f64(_Q4, v987, _Q31.f64[0]);
  v860.f64[0] = _Q25.f64[0] + v993.f64[0] * _Q31.f64[0];
  _Q18.f64[1] = *(float64_t *)(v10 + 128);
  _Q1 = vmlaq_n_f64(vmulq_n_f64(v848, _Q17.f64[0]), v891, v825.f64[0]);
  v486 = _Q1;
  _Q6.f64[0] = v886;
  __asm { FMLA            D1, D6, V18.D[1] }
  _Q2.f64[0] = v884;
  __asm { FMLA            D1, D2, V15.D[1] }
  _Q2.f64[0] = v946.f64[0];
  __asm { FMLA            D1, D2, V20.D[1] }
  _Q4.f64[0] = v894;
  __asm { FMLA            D1, D4, V22.D[1] }
  _Q4.f64[1] = *(float64_t *)(v10 + 416);
  _Q0.f64[0] = v895;
  _Q8.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v887 * _Q17.f64[0], v886, v825.f64[0]), v884, _Q24.f64[0]), v946.f64[0], v858.f64[0]), v894, v797.f64[0]), v895, v981.f64[0]);
  v487 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v893, _Q17, 1), v892, v825, 1), v885, _Q24, 1), v845, v858, 1), v900, v797, 1), v899, v981, 1);
  v488 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v847, _Q17, 1), v846, v825, 1), v882, _Q24, 1), v944, v858, 1), v966, v797, 1), v898, v981, 1);
  _Q25 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v890, _Q17, 1), v889, v825, 1), v949, _Q24, 1), v883, v858, 1), v960, v797, 1), v963, v981, 1);
  _Q29 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v848, _Q17, 1), v891, v825, 1), v951, _Q24, 1), v888, v858, 1), v954, v797, 1), v957, v981, 1);
  __asm { FMLA            D1, D0, V4.D[1] }
  _Q16.f64[1] = v913.f64[1];
  _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v893, _Q17.f64[0]), v892, v825.f64[0]), v885, _Q24.f64[0]), v845, v858.f64[0]), v900, v797.f64[0]), v899, v981.f64[0]), v854, v913.f64[0]);
  _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v847, _Q17.f64[0]), v846, v825.f64[0]), v882, _Q24.f64[0]), v944, v858.f64[0]), v966, v797.f64[0]), v898, v981.f64[0]), v449, v913.f64[0]);
  v493 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v890, _Q17.f64[0]), v889, v825.f64[0]), v949, _Q24.f64[0]), v883, v858.f64[0]), v960, v797.f64[0]), v963, v981.f64[0]), _Q26, v913.f64[0]);
  _Q17.f64[0] = v896;
  v494 = vmlaq_laneq_f64(v488, v449, v913, 1);
  _Q22 = v449;
  v802 = v449;
  v496 = _Q26;
  v801 = _Q26;
  __asm { FMLA            D1, D17, V16.D[1] }
  v853 = _Q13;
  _Q0.f64[1] = v864.f64[1];
  v799 = v472;
  v800 = v473;
  v497 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v486, v951, _Q24.f64[0]), v888, v858.f64[0]), v954, v797.f64[0]), v957, v981.f64[0]), v897, v913.f64[0]), v473, v864.f64[0]);
  _Q17.f64[0] = v852;
  __asm { FMLA            D1, D17, V0.D[1] }
  _Q5.f64[1] = _Q1.f64[1];
  _Q17.f64[1] = v861.f64[1];
  v798 = vmlaq_n_f64(vmlaq_n_f64(_Q2, _Q13, v864.f64[0]), v867, v861.f64[0]);
  v780 = vmlaq_n_f64(vmlaq_n_f64(v493, v472, v864.f64[0]), v857, v861.f64[0]);
  v781 = vmlaq_n_f64(vmlaq_n_f64(_Q3, v851, v864.f64[0]), v850, v861.f64[0]);
  _Q3.f64[0] = v860.f64[0];
  _Q8.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(_Q8.f64[0], v896, v913.f64[0]), v852, v864.f64[0]), v860.f64[0], v861.f64[0]);
  v783 = _Q8;
  v784 = vmlaq_n_f64(v497, v910, v861.f64[0]);
  v782 = vmlaq_laneq_f64(vmlaq_laneq_f64(v494, v851, v864, 1), v850, v861, 1);
  v785 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q25, _Q26, v913, 1), v472, v864, 1), v857, v861, 1);
  v786 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v487, v854, v913, 1), _Q13, v864, 1), v867, v861, 1);
  __asm { FMLA            D5, D3, V17.D[1] }
  v787 = _Q5;
  v788 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q29, v897, v913, 1), v473, v864, 1), v910, v861, 1);
  _Q24.f64[1] = *(float64_t *)(v10 + 144);
  _Q29.f64[1] = *(float64_t *)(v10 + 216);
  _Q26.f64[1] = *(float64_t *)(v10 + 288);
  v498 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v847, v838.f64[0]), v846, v836.f64[0]), v882, v834.f64[0]), v944, v870.f64[0]), v966, v917.f64[0]), v898, v868.f64[0]), _Q22, v776);
  _Q22.f64[1] = *(float64_t *)(v10 + 432);
  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v890, v838.f64[0]), v889, v836.f64[0]), v949, v834.f64[0]), v883, v870.f64[0]), v960, v917.f64[0]), v963, v868.f64[0]), v496, v776);
  _Q1 = _Q0;
  _Q7.f64[0] = v886;
  _Q13.f64[0] = v884;
  _Q5.f64[0] = v946.f64[0];
  _Q28.f64[0] = v894;
  _Q23.f64[0] = v895;
  _Q9 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, v838.f64[0]), v891, v836.f64[0]), v951, v834.f64[0]), v888, v870.f64[0]), v954, v917.f64[0]), v957, v868.f64[0]), v897, v776), v473, v778);
  _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v887 * v838.f64[0], v886, v836.f64[0]), v884, v834.f64[0]), v946.f64[0], v870.f64[0]), v894, v917.f64[0]), v895, v868.f64[0])+ v896 * v776+ v852 * v778;
  v777 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v893, v838.f64[0]), v892, v836.f64[0]), v885, v834.f64[0]), v845, v870.f64[0]), v900, v917.f64[0]), v899, v868.f64[0]), v854, v776), v853, v778), v867, v769);
  v773 = vmlaq_n_f64(vmlaq_n_f64(_Q1, v472, v778), v857, v769);
  v774 = vmlaq_n_f64(vmlaq_n_f64(v498, v851, v778), v850, v769);
  v775 = vmlaq_n_f64(_Q9, v910, v769);
  _Q0.f64[0] = _Q0.f64[0] + v860.f64[0] * v769;
  v779 = _Q0;
  __asm
  {
    FMLA            D17, D7, V24.D[1]
    FMLA            D17, D13, V29.D[1]
    FMLA            D17, D5, V26.D[1]
  }
  _Q1.f64[1] = *(float64_t *)(v10 + 360);
  __asm
  {
    FMLA            D17, D28, V1.D[1]
    FMLA            D26, D23, V22.D[1]
  }
  _Q18.f64[1] = v771.f64[1];
  _Q13.f64[0] = v896;
  _Q7.f64[1] = *(float64_t *)(v10 + 304);
  _Q4.f64[1] = *(float64_t *)(v10 + 160);
  _Q1 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, v928.f64[0]), v891, v880.f64[0]), v951, v878.f64[0]), v888, v875.f64[0]), v954, v872.f64[0]), v957, v923.f64[0]), v897, v771, 1);
  v503 = _Q1;
  _Q5.f64[0] = v884;
  _Q17.f64[0] = v894;
  _Q28.f64[0] = v895;
  __asm { FMLA            D1, D13, V18.D[1] }
  _Q2.f64[1] = _Q1.f64[1];
  _Q9.f64[1] = v789.f64[1];
  v504 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v847, v838, 1), v846, v836, 1), v882, v834, 1), v944, v870, 1), v966, v917, 1), v898, v868, 1), v802, v771.f64[0]), v851, v789.f64[0]);
  v505 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v890, v838, 1), v889, v836, 1), v949, v834, 1), v883, v870, 1), v960, v917, 1), v963, v868, 1), v801, v771.f64[0]), v472, v789.f64[0]);
  v506 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v848, v838, 1), v891, v836, 1), v951, v834, 1), v888, v870, 1), v954, v917, 1), v957, v868, 1), v897, v771.f64[0]), v473, v789.f64[0]);
  _Q0.f64[0] = v852;
  _Q6.f64[1] = v847.f64[1];
  _Q6.f64[0] = vmlad_n_f64(vmlad_n_f64(_Q26.f64[0], v896, v771.f64[0]), v852, v789.f64[0]);
  v507 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v893, v928.f64[0]), v892, v880.f64[0]), v885, v878.f64[0]), v845, v875.f64[0]), v900, v872.f64[0]), v899, v923.f64[0]), v854, v771, 1), v853, v789, 1);
  v508 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v847, v928.f64[0]), v846, v880.f64[0]), v882, v878.f64[0]), v944, v875.f64[0]), v966, v872.f64[0]), v898, v923.f64[0]), v802, v771, 1), v851, v789, 1);
  v509 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v890, v928.f64[0]), v889, v880.f64[0]), v949, v878.f64[0]), v883, v875.f64[0]), v960, v872.f64[0]), v963, v923.f64[0]), v801, v771, 1), v472, v789, 1);
  v510 = vmlaq_laneq_f64(v503, v473, v789, 1);
  __asm { FMLA            D2, D0, V9.D[1] }
  _Q0.f64[1] = v763.f64[1];
  v790 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v893, v838, 1), v892, v836, 1), v885, v834, 1), v845, v870, 1), v900, v917, 1), v899, v868, 1), v854, v771.f64[0]), v853, v789.f64[0]),
           v867,
           v763.f64[0]);
  v914 = vmlaq_n_f64(v504, v850, v763.f64[0]);
  v871 = vmlaq_n_f64(v506, v910, v763.f64[0]);
  _Q25.f64[0] = v860.f64[0];
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v860.f64[0], v763.f64[0]);
  v770 = _Q6;
  v772 = vmlaq_n_f64(v505, v857, v763.f64[0]);
  v767 = vmlaq_laneq_f64(v508, v850, v763, 1);
  v768 = vmlaq_laneq_f64(v507, v867, v763, 1);
  v765 = vmlaq_laneq_f64(v509, v857, v763, 1);
  v766 = vmlaq_laneq_f64(v510, v910, v763, 1);
  __asm { FMLA            D2, D25, V0.D[1] }
  v764 = _Q2;
  _Q0.f64[1] = *(float64_t *)(v10 + 88);
  _Q27.f64[0] = v886;
  __asm { FMLA            D0, D27, V4.D[1] }
  _Q2.f64[1] = *(float64_t *)(v10 + 232);
  __asm { FMLA            D0, D5, V2.D[1] }
  _Q4.f64[0] = v946.f64[0];
  __asm { FMLA            D0, D4, V7.D[1] }
  _Q4.f64[1] = *(float64_t *)(v10 + 376);
  __asm { FMLA            D0, D17, V4.D[1] }
  _Q4.f64[1] = *(float64_t *)(v10 + 448);
  __asm { FMLA            D0, D28, V4.D[1] }
  _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v893, v928, 1), v892, v880, 1), v885, v878, 1), v845, v875, 1), v900, v872, 1), v899, v923, 1), v854, *(double *)v793.i64), v853, *(double *)v795.i64),
          v867,
          *(double *)v791.i64);
  v760 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v890, v928, 1), v889, v880, 1), v949, v878, 1), v883, v875, 1), v960, v872, 1), v963, v923, 1), v801, *(double *)v793.i64), v472, *(double *)v795.i64),
           v857,
           *(double *)v791.i64);
  v512 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v848, v928, 1), v891, v880, 1), v951, v878, 1), v888, v875, 1), v954, v872, 1), v957, v923, 1), v897, *(double *)v793.i64), v473, *(double *)v795.i64),
           v910,
           *(double *)v791.i64);
  v761 = v512;
  v762 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v847, v928, 1), v846, v880, 1), v882, v878, 1), v944, v875, 1), v966, v872, 1), v898, v923, 1), v802, *(double *)v793.i64), v851, *(double *)v795.i64),
           v850,
           *(double *)v791.i64);
  _Q0.f64[0] = _Q0.f64[0] + v896 * *(double *)v793.i64 + v852 * *(double *)v795.i64 + v860.f64[0] * *(double *)v791.i64;
  v794 = _Q0;
  v796 = _Q3;
  _Q20.f64[1] = *(float64_t *)(v10 + 176);
  _Q0 = vmlaq_laneq_f64(vmulq_laneq_f64(v848, v934, 1), v891, v840, 1);
  _Q24 = _Q0;
  __asm { FMLA            D0, D27, V20.D[1] }
  _Q2.f64[1] = *(float64_t *)(v10 + 248);
  _Q0.f64[0] = v884;
  __asm { FMLA            D26, D0, V2.D[1] }
  _Q5.f64[1] = *(float64_t *)(v10 + 320);
  v792 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v893, v934.f64[0]), v892, v840.f64[0]), v885, v939.f64[0]), v845, v843.f64[0]);
  _Q3.f64[0] = v946.f64[0];
  v512.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v887 * v934.f64[0], v886, v840.f64[0]), v884, v939.f64[0]), v946.f64[0], v843.f64[0]);
  v751 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v847, v934.f64[0]), v846, v840.f64[0]), v882, v939.f64[0]), v944, v843.f64[0]);
  v752 = v512;
  v758 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v847, v934, 1), v846, v840, 1), v882, v939, 1), v944, v843, 1);
  v759 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v893, v934, 1), v892, v840, 1), v885, v939, 1), v845, v843, 1);
  v757 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v890, v934, 1), v889, v840, 1), v949, v939, 1), v883, v843, 1);
  v755 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v890, v934.f64[0]), v889, v840.f64[0]), v949, v939.f64[0]), v883, v843.f64[0]);
  v756 = vmlaq_laneq_f64(vmlaq_laneq_f64(_Q24, v951, v939, 1), v888, v843, 1);
  __asm { FMLA            D26, D3, V5.D[1] }
  v753 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, v934.f64[0]), v891, v840.f64[0]), v951, v939.f64[0]), v888, v843.f64[0]);
  v754 = _Q0.f64[1];
  _Q9.f64[0] = 0.0;
  v496.f64[0] = v813;
  _Q5.f64[0] = v808;
  v496.f64[1] = v808;
  v504.f64[0] = v803;
  v504.f64[1] = v821;
  _Q0 = *v13;
  __asm { FMLA            D3, D9, V0.D[1] }
  _Q5.f64[1] = v816;
  _Q27.f64[0] = 0.0;
  _Q27.f64[1] = v813;
  _Q2.f64[0] = v806;
  _Q7.f64[0] = v811;
  _Q2.f64[1] = v811;
  _Q0 = *(float64x2_t *)(a2 + 2016);
  v517 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v13->f64[0]), (float64x2_t)0, *v13, 1), (float64x2_t)0, _Q0.f64[0]);
  v518 = _Q5;
  __asm { FMLA            D3, D9, V0.D[1] }
  v509.f64[0] = v821;
  v509.f64[1] = v818;
  _Q16.f64[0] = 0.0;
  _Q16.f64[1] = v803;
  _Q7.f64[1] = v823;
  _Q24.f64[0] = 0.0;
  _Q24.f64[1] = v806;
  _Q4 = *(float64x2_t *)(a2 + 2032);
  v520 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v13->f64[0]), v504, *v13, 1), _Q2, _Q0.f64[0]), (float64x2_t)0, _Q0, 1), (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1);
  v521 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, v13->f64[0]), (float64x2_t)*(unint64_t *)&v818, *v13, 1), (float64x2_t)*(unint64_t *)&v823, _Q0.f64[0]), _Q27, _Q0, 1), _Q16, _Q4.f64[0]), _Q24, _Q4, 1);
  v522 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v517, _Q5, _Q0, 1), v509, _Q4.f64[0]), _Q7, _Q4, 1);
  v523 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v517, (float64x2_t)0, _Q0, 1), (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1);
  __asm { FMLA            D3, D9, V4.D[1] }
  _Q4 = *(float64x2_t *)(a2 + 2048);
  v525 = vmlaq_laneq_f64(vmlaq_n_f64(v520, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1);
  v526 = vmlaq_laneq_f64(vmlaq_n_f64(v521, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1);
  v527 = vmlaq_laneq_f64(vmlaq_n_f64(v522, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1);
  v528 = vmlaq_laneq_f64(vmlaq_n_f64(v523, (float64x2_t)xmmword_21030D320, _Q4.f64[0]), (float64x2_t)xmmword_2102DD520, _Q4, 1);
  __asm { FMLA            D3, D9, V4.D[1] }
  _Q4.f64[0] = *(float64_t *)(a2 + 2064);
  v529 = vmlaq_n_f64(v525, (float64x2_t)0, _Q4.f64[0]);
  _Q23 = vmlaq_n_f64(v526, (float64x2_t)0, _Q4.f64[0]);
  v918 = vmlaq_n_f64(v527, (float64x2_t)0, _Q4.f64[0]);
  v531 = vmlaq_n_f64(v528, (float64x2_t)0, _Q4.f64[0]);
  v868.f64[0] = _Q4.f64[0] + _Q3.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2072);
  v533 = vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1);
  v534 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1);
  v535 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2088);
  v537 = vmlaq_laneq_f64(vmlaq_n_f64(v533, _Q2, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v538 = vmlaq_laneq_f64(vmlaq_n_f64(v534, (float64x2_t)*(unint64_t *)&v823, _Q3.f64[0]), _Q27, _Q3, 1);
  v539 = vmlaq_n_f64(v535, (float64x2_t)0, _Q3.f64[0]);
  v540 = vmlaq_laneq_f64(v539, v518, _Q3, 1);
  v541 = vmlaq_laneq_f64(v539, (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2104);
  v543 = vmlaq_laneq_f64(vmlaq_n_f64(v537, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v544 = vmlaq_laneq_f64(vmlaq_n_f64(v538, _Q16, _Q3.f64[0]), _Q24, _Q3, 1);
  v545 = vmlaq_laneq_f64(vmlaq_n_f64(v540, v509, _Q3.f64[0]), _Q7, _Q3, 1);
  v546 = vmlaq_laneq_f64(vmlaq_n_f64(v541, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2120);
  v548 = vmlaq_laneq_f64(vmlaq_n_f64(v543, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v549 = vmlaq_laneq_f64(vmlaq_n_f64(v544, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v550 = vmlaq_laneq_f64(vmlaq_n_f64(v545, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v551 = vmlaq_laneq_f64(vmlaq_n_f64(v546, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 2136);
  v552 = vmlaq_n_f64(v548, (float64x2_t)0, _Q3.f64[0]);
  v553 = vmlaq_n_f64(v549, (float64x2_t)0, _Q3.f64[0]);
  v935 = vmlaq_n_f64(v550, (float64x2_t)0, _Q3.f64[0]);
  v554 = vmlaq_n_f64(v551, (float64x2_t)0, _Q3.f64[0]);
  v878.f64[0] = _Q3.f64[0] + _Q4.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2144);
  v556 = vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1);
  v557 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1);
  v558 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2160);
  v560 = vmlaq_laneq_f64(vmlaq_n_f64(v556, _Q2, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v561 = vmlaq_laneq_f64(vmlaq_n_f64(v557, (float64x2_t)*(unint64_t *)&v823, _Q3.f64[0]), _Q27, _Q3, 1);
  v562 = vmlaq_n_f64(v558, (float64x2_t)0, _Q3.f64[0]);
  v563 = vmlaq_laneq_f64(v562, v518, _Q3, 1);
  v564 = v518;
  v565 = vmlaq_laneq_f64(v562, (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2176);
  v567 = vmlaq_laneq_f64(vmlaq_n_f64(v560, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v568 = vmlaq_laneq_f64(vmlaq_n_f64(v561, _Q16, _Q3.f64[0]), _Q24, _Q3, 1);
  v569 = vmlaq_laneq_f64(vmlaq_n_f64(v563, v509, _Q3.f64[0]), _Q7, _Q3, 1);
  v570 = vmlaq_laneq_f64(vmlaq_n_f64(v565, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2192);
  v572 = vmlaq_laneq_f64(vmlaq_n_f64(v567, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v573 = vmlaq_laneq_f64(vmlaq_n_f64(v568, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v574 = vmlaq_laneq_f64(vmlaq_n_f64(v569, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v575 = vmlaq_laneq_f64(vmlaq_n_f64(v570, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 2208);
  v576 = vmlaq_n_f64(v572, (float64x2_t)0, _Q3.f64[0]);
  v577 = vmlaq_n_f64(v573, (float64x2_t)0, _Q3.f64[0]);
  v929 = vmlaq_n_f64(v574, (float64x2_t)0, _Q3.f64[0]);
  v578 = vmlaq_n_f64(v575, (float64x2_t)0, _Q3.f64[0]);
  v864.f64[0] = _Q3.f64[0] + _Q4.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2216);
  v580 = vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1);
  v581 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1);
  v582 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2232);
  v584 = vmlaq_laneq_f64(vmlaq_n_f64(v580, _Q2, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v585 = vmlaq_laneq_f64(vmlaq_n_f64(v581, (float64x2_t)*(unint64_t *)&v823, _Q3.f64[0]), _Q27, _Q3, 1);
  v586 = vmlaq_n_f64(v582, (float64x2_t)0, _Q3.f64[0]);
  v587 = vmlaq_laneq_f64(v586, v564, _Q3, 1);
  v588 = vmlaq_laneq_f64(v586, (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2248);
  v590 = vmlaq_laneq_f64(vmlaq_n_f64(v584, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v591 = vmlaq_laneq_f64(vmlaq_n_f64(v585, _Q16, _Q3.f64[0]), _Q24, _Q3, 1);
  v592 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v509, _Q3.f64[0]), _Q7, _Q3, 1);
  v593 = vmlaq_laneq_f64(vmlaq_n_f64(v588, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2264);
  v595 = vmlaq_laneq_f64(vmlaq_n_f64(v590, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v596 = vmlaq_laneq_f64(vmlaq_n_f64(v591, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v597 = vmlaq_laneq_f64(vmlaq_n_f64(v592, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v598 = vmlaq_laneq_f64(vmlaq_n_f64(v593, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 2280);
  v746 = vmlaq_n_f64(v595, (float64x2_t)0, _Q3.f64[0]);
  v747 = vmlaq_n_f64(v596, (float64x2_t)0, _Q3.f64[0]);
  v749 = vmlaq_n_f64(v597, (float64x2_t)0, _Q3.f64[0]);
  v826 = vmlaq_n_f64(v598, (float64x2_t)0, _Q3.f64[0]);
  v834.f64[0] = _Q3.f64[0] + _Q4.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2288);
  v600 = vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1);
  v601 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1);
  v602 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2304);
  v604 = vmlaq_laneq_f64(vmlaq_n_f64(v600, _Q2, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v605 = vmlaq_laneq_f64(vmlaq_n_f64(v601, (float64x2_t)*(unint64_t *)&v823, _Q3.f64[0]), _Q27, _Q3, 1);
  v606 = vmlaq_n_f64(v602, (float64x2_t)0, _Q3.f64[0]);
  v607 = vmlaq_laneq_f64(v606, v564, _Q3, 1);
  v608 = vmlaq_laneq_f64(v606, (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2320);
  v610 = vmlaq_laneq_f64(vmlaq_n_f64(v604, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v611 = vmlaq_laneq_f64(vmlaq_n_f64(v605, _Q16, _Q3.f64[0]), _Q24, _Q3, 1);
  v612 = vmlaq_laneq_f64(vmlaq_n_f64(v607, v509, _Q3.f64[0]), _Q7, _Q3, 1);
  v613 = vmlaq_laneq_f64(vmlaq_n_f64(v608, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2336);
  v615 = vmlaq_laneq_f64(vmlaq_n_f64(v610, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v616 = vmlaq_laneq_f64(vmlaq_n_f64(v611, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v617 = vmlaq_laneq_f64(vmlaq_n_f64(v612, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v618 = vmlaq_laneq_f64(vmlaq_n_f64(v613, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 2352);
  v738 = vmlaq_n_f64(v615, (float64x2_t)0, _Q3.f64[0]);
  v739 = vmlaq_n_f64(v616, (float64x2_t)0, _Q3.f64[0]);
  v829 = vmlaq_n_f64(v617, (float64x2_t)0, _Q3.f64[0]);
  v832 = vmlaq_n_f64(v618, (float64x2_t)0, _Q3.f64[0]);
  v740 = _Q3.f64[0] + _Q4.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2360);
  v620 = vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1);
  v621 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1);
  v622 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2376);
  v624 = vmlaq_laneq_f64(vmlaq_n_f64(v620, _Q2, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v625 = vmlaq_laneq_f64(vmlaq_n_f64(v621, (float64x2_t)*(unint64_t *)&v823, _Q3.f64[0]), _Q27, _Q3, 1);
  v626 = vmlaq_n_f64(v622, (float64x2_t)0, _Q3.f64[0]);
  v627 = vmlaq_laneq_f64(v626, v564, _Q3, 1);
  v628 = vmlaq_laneq_f64(v626, (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2392);
  v630 = vmlaq_laneq_f64(vmlaq_n_f64(v624, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v631 = vmlaq_laneq_f64(vmlaq_n_f64(v625, _Q16, _Q3.f64[0]), _Q24, _Q3, 1);
  v632 = vmlaq_laneq_f64(vmlaq_n_f64(v627, v509, _Q3.f64[0]), _Q7, _Q3, 1);
  v633 = vmlaq_laneq_f64(vmlaq_n_f64(v628, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2408);
  v635 = vmlaq_laneq_f64(vmlaq_n_f64(v630, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v636 = vmlaq_laneq_f64(vmlaq_n_f64(v631, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v637 = vmlaq_laneq_f64(vmlaq_n_f64(v632, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v638 = vmlaq_laneq_f64(vmlaq_n_f64(v633, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 2424);
  v827 = vmlaq_n_f64(v635, (float64x2_t)0, _Q3.f64[0]);
  v729 = vmlaq_n_f64(v637, (float64x2_t)0, _Q3.f64[0]);
  v730 = vmlaq_n_f64(v638, (float64x2_t)0, _Q3.f64[0]);
  v731 = vmlaq_n_f64(v636, (float64x2_t)0, _Q3.f64[0]);
  v732 = _Q3.f64[0] + _Q4.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2432);
  v640 = vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1);
  v641 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1);
  v642 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2448);
  v644 = vmlaq_laneq_f64(vmlaq_n_f64(v640, _Q2, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v645 = vmlaq_laneq_f64(vmlaq_n_f64(v641, (float64x2_t)*(unint64_t *)&v823, _Q3.f64[0]), _Q27, _Q3, 1);
  v646 = vmlaq_n_f64(v642, (float64x2_t)0, _Q3.f64[0]);
  v647 = vmlaq_laneq_f64(v646, v564, _Q3, 1);
  v648 = vmlaq_laneq_f64(v646, (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2464);
  v650 = vmlaq_laneq_f64(vmlaq_n_f64(v644, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v651 = vmlaq_laneq_f64(vmlaq_n_f64(v645, _Q16, _Q3.f64[0]), _Q24, _Q3, 1);
  v652 = vmlaq_laneq_f64(vmlaq_n_f64(v647, v509, _Q3.f64[0]), _Q7, _Q3, 1);
  v653 = vmlaq_laneq_f64(vmlaq_n_f64(v648, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2480);
  v655 = vmlaq_laneq_f64(vmlaq_n_f64(v650, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v656 = vmlaq_laneq_f64(vmlaq_n_f64(v651, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v657 = vmlaq_laneq_f64(vmlaq_n_f64(v652, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v658 = vmlaq_laneq_f64(vmlaq_n_f64(v653, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 2496);
  v741 = vmlaq_n_f64(v655, (float64x2_t)0, _Q3.f64[0]);
  v742 = vmlaq_n_f64(v656, (float64x2_t)0, _Q3.f64[0]);
  v743 = vmlaq_n_f64(v657, (float64x2_t)0, _Q3.f64[0]);
  v744 = vmlaq_n_f64(v658, (float64x2_t)0, _Q3.f64[0]);
  v745 = _Q3.f64[0] + _Q4.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2504);
  v660 = vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1);
  v661 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1);
  v662 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2520);
  v664 = vmlaq_laneq_f64(vmlaq_n_f64(v660, _Q2, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v665 = vmlaq_laneq_f64(vmlaq_n_f64(v661, (float64x2_t)*(unint64_t *)&v823, _Q3.f64[0]), _Q27, _Q3, 1);
  v666 = vmlaq_n_f64(v662, (float64x2_t)0, _Q3.f64[0]);
  v667 = vmlaq_laneq_f64(v666, v564, _Q3, 1);
  v668 = vmlaq_laneq_f64(v666, (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2536);
  v670 = vmlaq_laneq_f64(vmlaq_n_f64(v664, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v671 = vmlaq_laneq_f64(vmlaq_n_f64(v665, _Q16, _Q3.f64[0]), _Q24, _Q3, 1);
  v672 = vmlaq_laneq_f64(vmlaq_n_f64(v667, v509, _Q3.f64[0]), _Q7, _Q3, 1);
  v673 = vmlaq_laneq_f64(vmlaq_n_f64(v668, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3 = *(float64x2_t *)(a2 + 2552);
  v675 = vmlaq_laneq_f64(vmlaq_n_f64(v670, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v676 = vmlaq_laneq_f64(vmlaq_n_f64(v671, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v677 = vmlaq_laneq_f64(vmlaq_n_f64(v672, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v678 = vmlaq_laneq_f64(vmlaq_n_f64(v673, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D4, D9, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 2568);
  v733 = vmlaq_n_f64(v675, (float64x2_t)0, _Q3.f64[0]);
  v734 = vmlaq_n_f64(v676, (float64x2_t)0, _Q3.f64[0]);
  v735 = vmlaq_n_f64(v677, (float64x2_t)0, _Q3.f64[0]);
  v736 = vmlaq_n_f64(v678, (float64x2_t)0, _Q3.f64[0]);
  v737 = _Q3.f64[0] + _Q4.f64[0];
  _Q3 = *(float64x2_t *)(a2 + 2576);
  _Q4 = *(float64x2_t *)(a2 + 2592);
  v681 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, _Q3.f64[0]), v504, _Q3, 1), _Q2, _Q4.f64[0]);
  _Q2 = *(float64x2_t *)(a2 + 2608);
  _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1), (float64x2_t)0, _Q4.f64[0]);
  v684 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(_Q5, v564, _Q4, 1), v509, _Q2.f64[0]), _Q7, _Q2, 1);
  _Q0 = *(float64x2_t *)(a2 + 2624);
  _Q7 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(_Q5, (float64x2_t)0, _Q4, 1), (float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1), (float64x2_t)xmmword_21030D320, _Q0.f64[0]), (float64x2_t)xmmword_2102DD520, _Q0, 1);
  __asm
  {
    FMLA            D5, D9, V3.D[1]
    FMLA            D5, D9, V4.D[1]
    FMLA            D5, D9, V2.D[1]
  }
  v687 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v681, (float64x2_t)0, _Q4, 1), (float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1), (float64x2_t)0, _Q0.f64[0]), (float64x2_t)0, _Q0, 1);
  _Q16 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v816, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&v818, _Q3, 1), (float64x2_t)*(unint64_t *)&v823, _Q4.f64[0]), _Q27, _Q4, 1), _Q16, _Q2.f64[0]), _Q24, _Q2,
               1),
             (float64x2_t)0,
             _Q0.f64[0]),
           (float64x2_t)0,
           _Q0,
           1);
  v689 = vmlaq_laneq_f64(vmlaq_n_f64(v684, (float64x2_t)0, _Q0.f64[0]), (float64x2_t)0, _Q0, 1);
  __asm { FMLA            D5, D9, V0.D[1] }
  _Q0.f64[0] = *(float64_t *)(a2 + 2640);
  v726 = vmlaq_n_f64(_Q16, (float64x2_t)0, _Q0.f64[0]);
  v727 = vmlaq_n_f64(v687, (float64x2_t)0, _Q0.f64[0]);
  v724 = vmlaq_n_f64(_Q7, (float64x2_t)0, _Q0.f64[0]);
  v725 = vmlaq_n_f64(v689, (float64x2_t)0, _Q0.f64[0]);
  v728 = _Q0.f64[0] + _Q5.f64[0];
  v982 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v529, v813), v552, v803), v576, v806);
  v940 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v529, v808), v552, v821), v576, v811);
  v881 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v529, v816), v552, v818), v576, v823);
  v690 = vmlaq_f64(vmlaq_f64(vmulq_f64(v529, (float64x2_t)0), (float64x2_t)0, v552), (float64x2_t)0, v576);
  v924 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q23, v813), v553, v803), v577, v806);
  v876 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q23, v808), v553, v821), v577, v811);
  v873 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q23, v816), v553, v818), v577, v823);
  v691 = vmlaq_f64(vmlaq_f64(vmulq_f64(_Q23, (float64x2_t)0), (float64x2_t)0, v553), (float64x2_t)0, v577);
  v692 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v918, v813), v935, v803), v929, v806);
  v720 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v918, v808), v935, v821), v929, v811);
  v841 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v918, v816), v935, v818), v929, v823);
  v693 = vmlaq_f64(vmlaq_f64(vmulq_f64(v918, (float64x2_t)0), (float64x2_t)0, v935), (float64x2_t)0, v929);
  v694 = vmlaq_n_f64(vmulq_n_f64(v531, v816), v554, v818);
  v919 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v531, v813), v554, v803), v578, v806);
  v930 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v531, v808), v554, v821), v578, v811);
  v695 = vmlaq_f64(vmlaq_f64(vmulq_f64(v531, (float64x2_t)0), (float64x2_t)0, v554), (float64x2_t)0, v578);
  v722 = v868.f64[0] * v808 + v878.f64[0] * v821 + v864.f64[0] * v811;
  v723 = v868.f64[0] * v813 + v878.f64[0] * v803 + v864.f64[0] * v806;
  v721 = v868.f64[0] * v816 + v878.f64[0] * v818 + v864.f64[0] * v823;
  _Q29.f64[0] = v868.f64[0] * 0.0 + v878.f64[0] * 0.0 + v864.f64[0] * 0.0;
  v862 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v690, v746, v813), v738, v803), v827, v806);
  v865 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v691, v747, v813), v739, v803), v731, v806);
  v869 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v693, v749, v813), v829, v803), v729, v806);
  v879 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v695, v826, v813), v832, v803), v730, v806);
  v814 = _Q29.f64[0] + v834.f64[0] * v813 + v740 * v803 + v732 * v806;
  v839 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v690, v746, v808), v738, v821), v827, v811);
  v844 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v691, v747, v808), v739, v821), v731, v811);
  v859 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v693, v749, v808), v829, v821), v729, v811);
  v837 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v695, v826, v808), v832, v821), v730, v811);
  v812 = _Q29.f64[0] + v834.f64[0] * v808 + v740 * v821 + v732 * v811;
  v822 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v690, v746, v816), v738, v818), v827, v823);
  v696 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v691, v747, v816), v739, v818), v731, v823);
  v697 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v693, v749, v816), v829, v818), v729, v823);
  v698 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v695, v826, v816), v832, v818), v730, v823);
  v819 = _Q29.f64[0] + v834.f64[0] * v816 + v740 * v818 + v732 * v823;
  v699 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v690, (float64x2_t)0, v746), (float64x2_t)0, v738), (float64x2_t)0, v827);
  v700 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v691, (float64x2_t)0, v747), (float64x2_t)0, v739), (float64x2_t)0, v731);
  v701 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v693, (float64x2_t)0, v749), (float64x2_t)0, v829), (float64x2_t)0, v729);
  v702 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v695, (float64x2_t)0, v826), (float64x2_t)0, v832), (float64x2_t)0, v730);
  v809 = v723 + v834.f64[0] * 0.0 + v740 * 0.0 + v732 * 0.0;
  v807 = v722 + v834.f64[0] * 0.0 + v740 * 0.0 + v732 * 0.0;
  v804 = v721 + v834.f64[0] * 0.0 + v740 * 0.0 + v732 * 0.0;
  v817 = _Q29.f64[0] + v834.f64[0] * 0.0 + v740 * 0.0 + v732 * 0.0;
  v703 = vaddq_f64(v741, v699);
  v704 = vmlaq_f64(v699, (float64x2_t)0, v741);
  v705 = vaddq_f64(v742, v700);
  v706 = vmlaq_f64(v700, (float64x2_t)0, v742);
  v707 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v692, (float64x2_t)0, v749), (float64x2_t)0, v829), (float64x2_t)0, v729), (float64x2_t)0, v743);
  v708 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v720, (float64x2_t)0, v749), (float64x2_t)0, v829), (float64x2_t)0, v729), (float64x2_t)0, v743);
  v835 = vaddq_f64(v743, v701);
  v709 = vmlaq_f64(v701, (float64x2_t)0, v743);
  v920 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v919, (float64x2_t)0, v826), (float64x2_t)0, v832), (float64x2_t)0, v730), (float64x2_t)0, v744);
  v931 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v930, (float64x2_t)0, v826), (float64x2_t)0, v832), (float64x2_t)0, v730), (float64x2_t)0, v744);
  v710 = vaddq_f64(v744, v702);
  v711 = vmlaq_f64(v702, (float64x2_t)0, v744);
  v983 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v982, (float64x2_t)0, v746), (float64x2_t)0, v738), (float64x2_t)0, v827), (float64x2_t)0, v741), (float64x2_t)0, v733);
  v941 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v940, (float64x2_t)0, v746), (float64x2_t)0, v738), (float64x2_t)0, v827), (float64x2_t)0, v741), (float64x2_t)0, v733);
  v712 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v881, (float64x2_t)0, v746), (float64x2_t)0, v738), (float64x2_t)0, v827), (float64x2_t)0, v741), (float64x2_t)0, v733);
  v828 = vaddq_f64(v734, v706);
  v713 = vmlaq_f64(v706, (float64x2_t)0, v734);
  _Q3.f64[1] = v726.f64[1];
  v925 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v924, (float64x2_t)0, v747), (float64x2_t)0, v739), (float64x2_t)0, v731), (float64x2_t)0, v742), (float64x2_t)0, v734), (float64x2_t)0, v726);
  _Q4.f64[1] = v724.f64[1];
  _Q20 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v876, (float64x2_t)0, v747), (float64x2_t)0, v739), (float64x2_t)0, v731), (float64x2_t)0, v742), (float64x2_t)0, v734), (float64x2_t)0, v726);
  v874 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v873, (float64x2_t)0, v747), (float64x2_t)0, v739), (float64x2_t)0, v731), (float64x2_t)0, v742), (float64x2_t)0, v734), (float64x2_t)0, v726);
  v715 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v841, (float64x2_t)0, v749), (float64x2_t)0, v829), (float64x2_t)0, v729), (float64x2_t)0, v743), (float64x2_t)0, v735), (float64x2_t)0, v725);
  v842 = v715;
  v936 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v694, v578, v823), (float64x2_t)0, v826), (float64x2_t)0, v832), (float64x2_t)0, v730), (float64x2_t)0, v744), (float64x2_t)0, v736), (float64x2_t)0, v724);
  v716 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v862, (float64x2_t)0, v741), (float64x2_t)0, v733), (float64x2_t)0, v727);
  v863 = vmlaq_f64(vmlaq_f64(v703, (float64x2_t)0, v733), (float64x2_t)0, v727);
  v833 = vmlaq_f64(vmlaq_f64(v705, (float64x2_t)0, v734), (float64x2_t)0, v726);
  _Q1 = vmlaq_f64(vaddq_f64(v733, v704), (float64x2_t)0, v727);
  v830 = _Q1;
  _Q0 = vmlaq_f64(vaddq_f64(v736, v711), (float64x2_t)0, v724);
  v824 = _Q0;
  _Q0.f64[0] = v817 + v745 * 0.0;
  _Q18 = vaddq_f64(v726, v713);
  v715.f64[0] = v809 + v745 * 0.0 + v737 * 0.0 + v728 * 0.0;
  _Q3.f64[0] = v807 + v745 * 0.0 + v737 * 0.0 + v728 * 0.0;
  _Q4.f64[0] = v804 + v745 * 0.0 + v737 * 0.0 + v728 * 0.0;
  v713.f64[0] = v814 + v745 * 0.0 + v737 * 0.0 + v728 * 0.0;
  _Q1.f64[0] = v812 + v745 * 0.0 + v737 * 0.0 + v728 * 0.0;
  v748 = _Q1;
  v750 = _Q18;
  _Q1.f64[0] = v819 + v745 * 0.0 + v737 * 0.0 + v728 * 0.0;
  v815 = _Q1;
  _Q1.f64[0] = v737 + _Q0.f64[0] + v728 * 0.0;
  v820 = _Q1;
  _Q0.f64[0] = v728 + _Q0.f64[0] + v737 * 0.0;
  v810 = _Q0;
  _Q0.f64[1] = *(float64_t *)(v10 + 392);
  _Q24.f64[1] = v754;
  _Q18.f64[0] = v894;
  __asm { FMLA            D24, D18, V0.D[1] }
  v805 = *(_OWORD *)&vaddq_f64(v783, v715);
  v877 = vaddq_f64(v782, _Q20);
  _Q0.f64[1] = *(float64_t *)(v10 + 464);
  _Q16.f64[0] = v895;
  v705.f64[1] = v752.f64[1];
  __asm { FMLA            D24, D16, V0.D[1] }
  _Q0.f64[1] = *(float64_t *)(v10 + 536);
  _Q20.f64[0] = v896;
  __asm { FMLA            D24, D20, V0.D[1] }
  _Q0.f64[1] = *(float64_t *)(v10 + 608);
  _Q1.f64[1] = *(float64_t *)(v10 + 680);
  _Q7.f64[0] = v852;
  _Q23.f64[0] = v860.f64[0];
  v705.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v752.f64[0], v894, v1000.f64[0]), v895, v977.f64[0]), v896, v901.f64[0]), v852, v970.f64[0]), v860.f64[0], v987.f64[0]);
  __asm
  {
    FMLA            D24, D7, V0.D[1]
    FMLA            D24, D23, V1.D[1]
  }
  v715.f64[1] = v907.f64[1];
  v715.f64[0] = v887 * v905
              + v886 * v907.f64[0]
              + v884 * v855.f64[0]
              + v946.f64[0] * v974.f64[0]
              + v894 * v996
              + v895 * v903
              + v896 * v972.f64[0]
              + v852 * v991
              + v860.f64[0] * v993.f64[0];
  *(float64x2_t *)(v89 + 48) = vaddq_f64(v784, vmlaq_f64(vmlaq_f64(v920, (float64x2_t)0, v736), (float64x2_t)0, v724));
  *(float64x2_t *)(v89 + 32) = vaddq_f64(v780, vmlaq_f64(vmlaq_f64(v707, (float64x2_t)0, v735), (float64x2_t)0, v725));
  *(float64x2_t *)(v89 + 16) = vaddq_f64(v781, v925);
  *(float64x2_t *)v89 = vaddq_f64(v798, vmlaq_f64(v983, (float64x2_t)0, v727));
  *(_QWORD *)(v89 + 64) = v805;
  *(float64x2_t *)(v89 + 120) = vaddq_f64(v788, vmlaq_f64(vmlaq_f64(v931, (float64x2_t)0, v736), (float64x2_t)0, v724));
  *(float64x2_t *)(v89 + 104) = vaddq_f64(v785, vmlaq_f64(vmlaq_f64(v708, (float64x2_t)0, v735), (float64x2_t)0, v725));
  *(float64x2_t *)(v89 + 88) = v877;
  *(float64x2_t *)(v89 + 72) = vaddq_f64(v786, vmlaq_f64(v941, (float64x2_t)0, v727));
  *(_QWORD *)(v89 + 136) = *(_OWORD *)&vaddq_f64(v787, _Q3);
  *(float64x2_t *)(v89 + 176) = vaddq_f64(v773, v842);
  *(float64x2_t *)(v89 + 192) = vaddq_f64(v775, v936);
  *(float64x2_t *)(v89 + 160) = vaddq_f64(v774, v874);
  *(float64x2_t *)(v89 + 144) = vaddq_f64(v777, vmlaq_f64(v712, (float64x2_t)0, v727));
  *(_QWORD *)(v89 + 208) = *(_OWORD *)&vaddq_f64(v779, _Q4);
  *(float64x2_t *)(v89 + 248) = vaddq_f64(v772, vmlaq_f64(vmlaq_f64(vmlaq_f64(v869, (float64x2_t)0, v743), (float64x2_t)0, v735), (float64x2_t)0, v725));
  *(float64x2_t *)(v89 + 232) = vaddq_f64(v914, vmlaq_f64(vmlaq_f64(vmlaq_f64(v865, (float64x2_t)0, v742), (float64x2_t)0, v734), (float64x2_t)0, v726));
  *(float64x2_t *)(v89 + 216) = vaddq_f64(v790, v716);
  *(float64x2_t *)(v89 + 264) = vaddq_f64(v871, vmlaq_f64(vmlaq_f64(vmlaq_f64(v879, (float64x2_t)0, v744), (float64x2_t)0, v736), (float64x2_t)0, v724));
  *(_QWORD *)(v89 + 280) = *(_OWORD *)&vaddq_f64(v770, v713);
  *(float64x2_t *)(v89 + 320) = vaddq_f64(v765, vmlaq_f64(vmlaq_f64(vmlaq_f64(v859, (float64x2_t)0, v743), (float64x2_t)0, v735), (float64x2_t)0, v725));
  *(float64x2_t *)(v89 + 336) = vaddq_f64(v766, vmlaq_f64(vmlaq_f64(vmlaq_f64(v837, (float64x2_t)0, v744), (float64x2_t)0, v736), (float64x2_t)0, v724));
  *(float64x2_t *)(v89 + 304) = vaddq_f64(v767, vmlaq_f64(vmlaq_f64(vmlaq_f64(v844, (float64x2_t)0, v742), (float64x2_t)0, v734), (float64x2_t)0, v726));
  *(float64x2_t *)(v89 + 288) = vaddq_f64(v768, vmlaq_f64(vmlaq_f64(vmlaq_f64(v839, (float64x2_t)0, v741), (float64x2_t)0, v733), (float64x2_t)0, v727));
  *(_QWORD *)(v89 + 352) = *(_OWORD *)&vaddq_f64(v764, v748);
  *(float64x2_t *)(v89 + 392) = vaddq_f64(v760, vmlaq_f64(vmlaq_f64(vmlaq_f64(v697, (float64x2_t)0, v743), (float64x2_t)0, v735), (float64x2_t)0, v725));
  *(float64x2_t *)(v89 + 408) = vaddq_f64(v761, vmlaq_f64(vmlaq_f64(vmlaq_f64(v698, (float64x2_t)0, v744), (float64x2_t)0, v736), (float64x2_t)0, v724));
  *(float64x2_t *)(v89 + 376) = vaddq_f64(v762, vmlaq_f64(vmlaq_f64(vmlaq_f64(v696, (float64x2_t)0, v742), (float64x2_t)0, v734), (float64x2_t)0, v726));
  *(float64x2_t *)(v89 + 360) = vaddq_f64(v796, vmlaq_f64(vmlaq_f64(vmlaq_f64(v822, (float64x2_t)0, v741), (float64x2_t)0, v733), (float64x2_t)0, v727));
  *(_QWORD *)(v89 + 424) = *(_OWORD *)&vaddq_f64(v794, v815);
  *(float64x2_t *)(v89 + 464) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v755, v960, v1000.f64[0]), v963, v977.f64[0]), v801, v901.f64[0]), v799, v970.f64[0]), v857, v987.f64[0]), vmlaq_f64(vmlaq_f64(v835, (float64x2_t)0, v735), (float64x2_t)0, v725));
  *(float64x2_t *)(v89 + 480) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v753, v954, v1000.f64[0]), v957, v977.f64[0]), v897, v901.f64[0]), v800, v970.f64[0]), v910, v987.f64[0]), vmlaq_f64(vmlaq_f64(v710, (float64x2_t)0, v736), (float64x2_t)0, v724));
  *(float64x2_t *)(v89 + 432) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v792, v900, v1000.f64[0]), v899, v977.f64[0]), v854, v901.f64[0]), v853, v970.f64[0]), v867, v987.f64[0]), v863);
  *(float64x2_t *)(v89 + 448) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v751, v966, v1000.f64[0]), v898, v977.f64[0]), v802, v901.f64[0]), v851, v970.f64[0]), v850, v987.f64[0]), v833);
  *(_QWORD *)(v89 + 496) = *(_OWORD *)&vaddq_f64(v705, (float64x2_t)COERCE_UNSIGNED_INT64(v745 + v817 + v737 * 0.0 + v728 * 0.0));
  *(float64x2_t *)(v89 + 536) = vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v757, v960, v1000, 1), v963, v977, 1), v801, v901, 1), v799, v970, 1), v857, v987, 1), vmlaq_f64(vaddq_f64(v735, v709), (float64x2_t)0, v725));
  *(float64x2_t *)(v89 + 552) = vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v756, v954, v1000, 1), v957, v977, 1), v897, v901, 1), v800, v970, 1), v910, v987, 1), v824);
  *(float64x2_t *)(v89 + 504) = vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v759, v900, v1000, 1), v899, v977, 1), v854, v901, 1), v853, v970, 1), v867, v987, 1), v830);
  *(float64x2_t *)(v89 + 520) = vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v758, v966, v1000, 1), v898, v977, 1), v802, v901, 1), v851, v970, 1), v850, v987, 1), vmlaq_f64(v828, (float64x2_t)0, v726));
  *(_QWORD *)(v89 + 568) = *(_OWORD *)&vaddq_f64(_Q24, v820);
  *(float64x2_t *)(v89 + 608) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v890, v905), v889, v907.f64[0]), v949, v855.f64[0]), v883, v974.f64[0]), v960, v996), v963, v903), v801, v972.f64[0]), v799,
                                      v991),
                                    v857,
                                    v993.f64[0]),
                                  vaddq_f64(v725, vmlaq_f64(v709, (float64x2_t)0, v735)));
  *(float64x2_t *)(v89 + 624) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, v905), v891, v907.f64[0]), v951, v855.f64[0]), v888, v974.f64[0]), v954, v996), v957, v903), v897, v972.f64[0]), v800,
                                      v991),
                                    v910,
                                    v993.f64[0]),
                                  vaddq_f64(v724, vmlaq_f64(v711, (float64x2_t)0, v736)));
  *(float64x2_t *)(v89 + 576) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v893, v905), v892, v907.f64[0]), v885, v855.f64[0]), v845, v974.f64[0]), v900, v996), v899, v903), v854, v972.f64[0]), v853,
                                      v991),
                                    v867,
                                    v993.f64[0]),
                                  vaddq_f64(v727, vmlaq_f64(v704, (float64x2_t)0, v733)));
  *(float64x2_t *)(v89 + 592) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v847, v905), v846, v907.f64[0]), v882, v855.f64[0]), v944, v974.f64[0]), v966, v996), v898, v903), v802, v972.f64[0]), v851,
                                      v991),
                                    v850,
                                    v993.f64[0]),
                                  v750);
  *(_QWORD *)(v89 + 640) = *(_OWORD *)&vaddq_f64(v715, v810);
}

void sub_20F29A4FC(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  __int128 *v16;
  __int128 *v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  _QWORD *v39;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  int8x8_t **v44;
  int8x8_t *v45;
  unint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  unint64_t v52;
  int8x8_t *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t i;
  unsigned __int8 v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t *v85;
  uint64_t v86;
  std::__shared_weak_count *v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  void *__p;
  char v93;

  v3 = a3;
  v4 = a1;
  v90 = 0;
  v91 = 0;
  v5 = (unsigned __int8 *)*a3;
  v6 = a3[1];
  v7 = *v5;
  v8 = v6;
  v9 = v5;
  v10 = v7;
  if ((char)*v5 <= -2)
  {
    v8 = v6;
    v9 = v5;
    do
    {
      v11 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v9 = (_QWORD *)((char *)v9 + v11);
      v8 += 32 * v11;
    }
    while (*(char *)v9 < -1);
    v10 = *(unsigned __int8 *)v9;
  }
  if (v10 != 255)
  {
    v85 = v3;
    while (1)
    {
      v89 = *(_QWORD **)(v8 + 16);
      v86 = v8;
      v12 = *(std::__shared_weak_count **)(v8 + 24);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v88 = v12;
      v15 = v90;
      v16 = (__int128 *)v89[25];
      v17 = (__int128 *)v89[26];
      if (v16 == v17)
        goto LABEL_124;
      v18 = v91;
      v19 = v90;
      do
      {
        if (*(_QWORD *)v16 == *(_QWORD *)v4 && *((_DWORD *)v16 + 2) == *(_DWORD *)(v4 + 8))
        {
          if (v15 < v18)
          {
            v20 = *v16;
            *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
            *(_OWORD *)v15 = v20;
            v15 += 24;
            goto LABEL_14;
          }
          v21 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v19) >> 3) + 1;
          if (v21 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          if (0x5555555555555556 * ((v18 - v19) >> 3) > v21)
            v21 = 0x5555555555555556 * ((v18 - v19) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v23 = (char *)operator new(24 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = *v16;
          v25 = &v23[8 * ((v15 - v19) >> 3)];
          *((_QWORD *)v25 + 2) = *((_QWORD *)v16 + 2);
          *(_OWORD *)v25 = v24;
          if (v15 == v19)
          {
            v28 = v15;
            v19 = &v23[8 * ((v15 - v19) >> 3)];
            v18 = &v23[24 * v22];
            v15 = v25 + 24;
            if (v28)
              goto LABEL_32;
          }
          else
          {
            v26 = &v23[8 * ((v15 - v19) >> 3)];
            do
            {
              v27 = *(_OWORD *)(v15 - 24);
              *((_DWORD *)v26 - 2) = *((_DWORD *)v15 - 2);
              *(_OWORD *)(v26 - 24) = v27;
              v26 -= 24;
              v15 -= 24;
            }
            while (v15 != v19);
            v28 = v19;
            v19 = v26;
            v18 = &v23[24 * v22];
            v15 = v25 + 24;
            if (v28)
LABEL_32:
              operator delete(v28);
          }
          v4 = a1;
        }
LABEL_14:
        v16 += 4;
      }
      while (v16 != v17);
      v91 = v18;
      v90 = v19;
      if (v19 == v15)
        goto LABEL_124;
      while (1)
      {
LABEL_37:
        v30 = v89[25];
        v29 = v89[26];
        v31 = *(_QWORD *)v19;
        v32 = *((_DWORD *)v19 + 2);
        v33 = *((_DWORD *)v19 + 4);
        if (v29 != v30)
        {
          v34 = (v29 - v30) >> 6;
          while (1)
          {
            v35 = v34 >> 1;
            v36 = v30 + (v34 >> 1 << 6);
            v37 = *(_DWORD *)(v36 + 16);
            v38 = v37 >= v33;
            if (v37 != v33)
              goto LABEL_45;
            if (*(_QWORD *)v36 >= v31)
              break;
LABEL_39:
            v30 = v36 + 64;
            v35 = v34 + ~v35;
LABEL_40:
            v34 = v35;
            if (!v35)
              goto LABEL_48;
          }
          if (*(_QWORD *)v36 != v31)
            goto LABEL_40;
          v38 = *(_DWORD *)(v36 + 8) >= v32;
LABEL_45:
          if (v38)
            goto LABEL_40;
          goto LABEL_39;
        }
LABEL_48:
        if (v30 != v29 && *(_DWORD *)(v30 + 16) == v33 && *(_QWORD *)v30 == v31 && *(_DWORD *)(v30 + 8) == v32)
        {
          v39 = (_QWORD *)v89[2];
          if (!v39)
            goto LABEL_115;
          v40 = (int8x8_t)v39[1];
          if (v40)
          {
            v41 = v32 ^ __ROR4__(v33, 13);
            v42 = (uint8x8_t)vcnt_s8(v40);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              v43 = v41;
              if (*(_QWORD *)&v40 <= v41)
                v43 = v41 % *(_QWORD *)&v40;
            }
            else
            {
              v43 = (v40.i32[0] - 1) & v41;
            }
            v44 = *(int8x8_t ***)(*v39 + 8 * v43);
            if (v44)
            {
              v45 = *v44;
              if (*v44)
                break;
            }
          }
        }
LABEL_97:
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 66, (uint64_t)"ret", 3, (uint64_t)"Fail to remove node. this is not possible", 41, (void (*)(void **))sub_21023DDB0);
        v59 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v60 = qword_254A6DE40;
          for (i = qword_254A6DE48; v60 != i; v60 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v60)(*(_QWORD *)(v60 + 8), "ret", 3, "Fail to remove node. this is not possible", 41);
        }
        v62 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "ret", 3, "Fail to remove node. this is not possible", 41);
        v19 += 24;
        if (v19 == v15)
          goto LABEL_124;
      }
      v46 = *(unsigned int *)(v30 + 28);
      if (v42.u32[0] < 2uLL)
      {
        v47 = *(_QWORD *)&v40 - 1;
        while (1)
        {
          v49 = v45[1];
          if (*(_QWORD *)&v49 == v41)
          {
            if (v45[4].i32[0] == v33 && *(_QWORD *)&v45[2] == v31 && v45[3].i32[0] == v32)
              goto LABEL_77;
          }
          else if ((*(_QWORD *)&v49 & v47) != v43)
          {
            goto LABEL_97;
          }
          v45 = (int8x8_t *)*v45;
          if (!v45)
            goto LABEL_97;
        }
      }
      while (2)
      {
        v48 = v45[1];
        if (*(_QWORD *)&v48 != v41)
        {
          if (*(_QWORD *)&v48 >= *(_QWORD *)&v40)
            *(_QWORD *)&v48 %= *(_QWORD *)&v40;
          if (*(_QWORD *)&v48 != v43)
            goto LABEL_97;
LABEL_63:
          v45 = (int8x8_t *)*v45;
          if (!v45)
            goto LABEL_97;
          continue;
        }
        break;
      }
      if (v45[4].i32[0] != v33 || *(_QWORD *)&v45[2] != v31 || v45[3].i32[0] != v32)
        goto LABEL_63;
LABEL_77:
      v50 = v45[6];
      if (!*(_QWORD *)&v50)
        goto LABEL_97;
      v51 = (uint8x8_t)vcnt_s8(v50);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        v52 = *(unsigned int *)(v30 + 28);
        if (*(_QWORD *)&v50 <= v46)
          v52 = v46 % *(_QWORD *)&v50;
      }
      else
      {
        v52 = (v50.i32[0] - 1) & v46;
      }
      v53 = v45 + 5;
      v54 = *(uint64_t ***)(*(_QWORD *)&v45[5] + 8 * v52);
      if (!v54)
        goto LABEL_97;
      v55 = *v54;
      if (!*v54)
        goto LABEL_97;
      if (v51.u32[0] < 2uLL)
      {
        v56 = *(_QWORD *)&v50 - 1;
        while (1)
        {
          v58 = v55[1];
          if (v58 == v46)
          {
            if (*((_DWORD *)v55 + 4) == (_DWORD)v46)
              goto LABEL_106;
          }
          else if ((v58 & v56) != v52)
          {
            goto LABEL_97;
          }
          v55 = (uint64_t *)*v55;
          if (!v55)
            goto LABEL_97;
        }
      }
      while (1)
      {
        v57 = v55[1];
        if (v57 == v46)
          break;
        if (v57 >= *(_QWORD *)&v50)
          v57 %= *(_QWORD *)&v50;
        if (v57 != v52)
          goto LABEL_97;
LABEL_87:
        v55 = (uint64_t *)*v55;
        if (!v55)
          goto LABEL_97;
      }
      if (*((_DWORD *)v55 + 4) != (_DWORD)v46)
        goto LABEL_87;
LABEL_106:
      sub_20E8D2CE8(v53, v55, (uint64_t)&__p);
      v63 = __p;
      __p = 0;
      if (v63)
      {
        if (v93)
        {
          v64 = (std::__shared_weak_count *)v63[4];
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        operator delete(v63);
      }
      v29 = v89[26];
LABEL_115:
      if (v30 + 64 != v29)
      {
        do
        {
          v67 = v30 + 64;
          *(_OWORD *)v30 = *(_OWORD *)(v30 + 64);
          *(_DWORD *)(v30 + 16) = *(_DWORD *)(v30 + 80);
          v68 = *(_QWORD *)(v30 + 96);
          *(_QWORD *)(v30 + 24) = *(_QWORD *)(v30 + 88);
          *(_QWORD *)(v30 + 32) = v68;
          *(_OWORD *)(v30 + 40) = *(_OWORD *)(v30 + 104);
          v69 = v30 + 128;
          *(_DWORD *)(v30 + 56) = *(_DWORD *)(v30 + 120);
          v30 += 64;
        }
        while (v69 != v29);
        v30 = v67;
      }
      v89[26] = v30;
      v19 += 24;
      if (v19 != v15)
        goto LABEL_37;
      if (!v88)
        goto LABEL_128;
LABEL_124:
      v70 = (unint64_t *)&v88->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
        v75 = *((char *)v9 + 1);
        v9 = (_QWORD *)((char *)v9 + 1);
        LOBYTE(v72) = v75;
        v8 = v86 + 32;
        if (v75 <= -2)
          goto LABEL_129;
      }
      else
      {
LABEL_128:
        v73 = *((char *)v9 + 1);
        v9 = (_QWORD *)((char *)v9 + 1);
        LOBYTE(v72) = v73;
        v8 = v86 + 32;
        if (v73 <= -2)
        {
          do
          {
LABEL_129:
            v74 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v9 = (_QWORD *)((char *)v9 + v74);
            v8 += 32 * v74;
            v72 = *(char *)v9;
          }
          while (v72 < -1);
        }
      }
      if (v72 == 255)
      {
        v3 = v85;
        v5 = (unsigned __int8 *)*v85;
        v6 = v85[1];
        v7 = *(unsigned __int8 *)*v85;
        break;
      }
    }
  }
  if ((char)v7 <= -2)
  {
    do
    {
      v76 = (__clz(__rbit64(((*(_QWORD *)v5 >> 7) & ~*(_QWORD *)v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v5 += v76;
      v6 += 32 * v76;
    }
    while ((char)*v5 < -1);
    v7 = *v5;
  }
  if (v7 != 255)
  {
    do
    {
      if (a2 <= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 208)
                                            - *(_QWORD *)(*(_QWORD *)(v6 + 16) + 200)) >> 6))
      {
        LOBYTE(v82) = v5[1];
        v77 = v5 + 1;
        v80 = v6 + 32;
        if ((char)v82 <= -2)
        {
          do
          {
            v83 = (__clz(__rbit64(((*(_QWORD *)v77 >> 7) & ~*(_QWORD *)v77 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v77 += v83;
            v80 += 32 * v83;
            v82 = (char)*v77;
          }
          while (v82 < -1);
        }
        if (v82 == 255)
          break;
      }
      else
      {
        v78 = v5 + 1;
        v79 = (char)v5[1];
        v80 = v6 + 32;
        if (v79 <= -2)
        {
          do
          {
            v81 = (__clz(__rbit64(((*(_QWORD *)v78 >> 7) & ~*(_QWORD *)v78 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v78 += v81;
            v80 += 32 * v81;
            v79 = (char)*v78;
          }
          while (v79 < -1);
        }
        if (v79 == 255)
          v77 = 0;
        else
          v77 = v78;
        sub_20F29C91C(v3, v5, v6);
      }
      v5 = v77;
      v6 = v80;
    }
    while (v77);
  }
  if (v90)
    operator delete(v90);
}

void sub_20F29AE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F29AEF0(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  __int128 *v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  _QWORD *v43;
  int8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  int8x8_t **v48;
  int8x8_t *v49;
  unint64_t v50;
  uint64_t v51;
  int8x8_t v52;
  int8x8_t v53;
  int8x8_t v54;
  uint8x8_t v55;
  unint64_t v56;
  int8x8_t *v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t i;
  unsigned __int8 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t *v86;
  std::__shared_weak_count *v87;
  _QWORD *v89;
  char *__p;
  char *v91;
  void *v92;
  char v93;

  v3 = a3;
  __p = 0;
  v91 = 0;
  v4 = (unsigned __int8 *)*a3;
  v5 = a3[1];
  v6 = *v4;
  v7 = v5;
  v8 = v4;
  v9 = v6;
  if ((char)*v4 <= -2)
  {
    v7 = v5;
    v8 = v4;
    do
    {
      v10 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v8 = (_QWORD *)((char *)v8 + v10);
      v7 += 32 * v10;
    }
    while (*(char *)v8 < -1);
    v9 = *(unsigned __int8 *)v8;
  }
  if (v9 != 255)
  {
    v86 = v3;
    v11 = a1;
    while (1)
    {
      v12 = *(std::__shared_weak_count **)(v7 + 24);
      v89 = *(_QWORD **)(v7 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v87 = v12;
      v15 = __p;
      v16 = (__int128 *)v89[122];
      v17 = (__int128 *)v89[123];
      if (v16 == v17)
        goto LABEL_12;
      do
      {
        if (*(_QWORD *)v16 == *(_QWORD *)v11 && *((_DWORD *)v16 + 2) == *(_DWORD *)(v11 + 8))
        {
          if (v15 < v91)
          {
            v23 = *v16;
            *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
            *(_OWORD *)v15 = v23;
            v24 = v15 + 24;
          }
          else
          {
            v25 = 0xAAAAAAAAAAAAAAABLL * ((v15 - __p) >> 3) + 1;
            if (v25 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            if (0x5555555555555556 * ((v91 - __p) >> 3) > v25)
              v25 = 0x5555555555555556 * ((v91 - __p) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v91 - __p) >> 3) >= 0x555555555555555)
              v26 = 0xAAAAAAAAAAAAAAALL;
            else
              v26 = v25;
            if (v26)
            {
              if (v26 > 0xAAAAAAAAAAAAAAALL)
                sub_20E877A38();
              v27 = (char *)operator new(24 * v26);
            }
            else
            {
              v27 = 0;
            }
            v28 = *v16;
            v29 = &v27[8 * ((v15 - __p) >> 3)];
            *((_QWORD *)v29 + 2) = *((_QWORD *)v16 + 2);
            *(_OWORD *)v29 = v28;
            v30 = v29;
            if (v15 == __p)
            {
              v11 = a1;
              v24 = v29 + 24;
              __p = &v27[8 * ((v15 - __p) >> 3)];
              v91 = &v27[24 * v26];
              if (v15)
                goto LABEL_39;
            }
            else
            {
              v11 = a1;
              do
              {
                v31 = *(_OWORD *)(v15 - 24);
                *((_DWORD *)v30 - 2) = *((_DWORD *)v15 - 2);
                *(_OWORD *)(v30 - 24) = v31;
                v30 -= 24;
                v15 -= 24;
              }
              while (v15 != __p);
              v15 = __p;
              v24 = v29 + 24;
              __p = v30;
              v91 = &v27[24 * v26];
              if (v15)
LABEL_39:
                operator delete(v15);
            }
          }
          v15 = v24;
        }
        v16 = (__int128 *)((char *)v16 + 152);
      }
      while (v16 != v17);
      v32 = __p;
      if (__p == v15)
        goto LABEL_12;
      while (1)
      {
LABEL_44:
        v33 = v89[122];
        v34 = v89[123];
        v35 = *(_QWORD *)v32;
        v36 = *((_DWORD *)v32 + 2);
        v37 = *((_DWORD *)v32 + 4);
        if (v34 != v33)
        {
          v38 = 0x86BCA1AF286BCA1BLL * ((v34 - v33) >> 3);
          while (1)
          {
            v39 = v38 >> 1;
            v40 = v33 + 152 * (v38 >> 1);
            v41 = *(_DWORD *)(v40 + 16);
            v42 = v41 >= v37;
            if (v41 != v37)
              goto LABEL_52;
            if (*(_QWORD *)v40 >= v35)
              break;
LABEL_46:
            v33 = v40 + 152;
            v39 = v38 + ~v39;
LABEL_47:
            v38 = v39;
            if (!v39)
              goto LABEL_55;
          }
          if (*(_QWORD *)v40 != v35)
            goto LABEL_47;
          v42 = *(_DWORD *)(v40 + 8) >= v36;
LABEL_52:
          if (v42)
            goto LABEL_47;
          goto LABEL_46;
        }
LABEL_55:
        if (v33 != v34 && *(_DWORD *)(v33 + 16) == v37 && *(_QWORD *)v33 == v35 && *(_DWORD *)(v33 + 8) == v36)
        {
          v43 = (_QWORD *)v89[2];
          if (!v43)
            goto LABEL_122;
          v44 = (int8x8_t)v43[1];
          if (v44)
          {
            v45 = v36 ^ __ROR4__(v37, 13);
            v46 = (uint8x8_t)vcnt_s8(v44);
            v46.i16[0] = vaddlv_u8(v46);
            if (v46.u32[0] > 1uLL)
            {
              v47 = v45;
              if (*(_QWORD *)&v44 <= v45)
                v47 = v45 % *(_QWORD *)&v44;
            }
            else
            {
              v47 = (v44.i32[0] - 1) & v45;
            }
            v48 = *(int8x8_t ***)(*v43 + 8 * v47);
            if (v48)
            {
              v49 = *v48;
              if (*v48)
                break;
            }
          }
        }
LABEL_104:
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 66, (uint64_t)"ret", 3, (uint64_t)"Fail to remove node. this is not possible", 41, (void (*)(void **))sub_21023DDB0);
        v63 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v64 = qword_254A6DE40;
          for (i = qword_254A6DE48; v64 != i; v64 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v64)(*(_QWORD *)(v64 + 8), "ret", 3, "Fail to remove node. this is not possible", 41);
        }
        v66 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "ret", 3, "Fail to remove node. this is not possible", 41);
        v32 += 24;
        if (v32 == v15)
          goto LABEL_12;
      }
      v50 = *(unsigned int *)(v33 + 28);
      if (v46.u32[0] < 2uLL)
      {
        v51 = *(_QWORD *)&v44 - 1;
        while (1)
        {
          v53 = v49[1];
          if (*(_QWORD *)&v53 == v45)
          {
            if (v49[4].i32[0] == v37 && *(_QWORD *)&v49[2] == v35 && v49[3].i32[0] == v36)
              goto LABEL_84;
          }
          else if ((*(_QWORD *)&v53 & v51) != v47)
          {
            goto LABEL_104;
          }
          v49 = (int8x8_t *)*v49;
          if (!v49)
            goto LABEL_104;
        }
      }
      while (2)
      {
        v52 = v49[1];
        if (*(_QWORD *)&v52 != v45)
        {
          if (*(_QWORD *)&v52 >= *(_QWORD *)&v44)
            *(_QWORD *)&v52 %= *(_QWORD *)&v44;
          if (*(_QWORD *)&v52 != v47)
            goto LABEL_104;
LABEL_70:
          v49 = (int8x8_t *)*v49;
          if (!v49)
            goto LABEL_104;
          continue;
        }
        break;
      }
      if (v49[4].i32[0] != v37 || *(_QWORD *)&v49[2] != v35 || v49[3].i32[0] != v36)
        goto LABEL_70;
LABEL_84:
      v54 = v49[6];
      if (!*(_QWORD *)&v54)
        goto LABEL_104;
      v55 = (uint8x8_t)vcnt_s8(v54);
      v55.i16[0] = vaddlv_u8(v55);
      if (v55.u32[0] > 1uLL)
      {
        v56 = *(unsigned int *)(v33 + 28);
        if (*(_QWORD *)&v54 <= v50)
          v56 = v50 % *(_QWORD *)&v54;
      }
      else
      {
        v56 = (v54.i32[0] - 1) & v50;
      }
      v57 = v49 + 5;
      v58 = *(uint64_t ***)(*(_QWORD *)&v49[5] + 8 * v56);
      if (!v58)
        goto LABEL_104;
      v59 = *v58;
      if (!*v58)
        goto LABEL_104;
      if (v55.u32[0] < 2uLL)
      {
        v60 = *(_QWORD *)&v54 - 1;
        while (1)
        {
          v62 = v59[1];
          if (v62 == v50)
          {
            if (*((_DWORD *)v59 + 4) == (_DWORD)v50)
              goto LABEL_113;
          }
          else if ((v62 & v60) != v56)
          {
            goto LABEL_104;
          }
          v59 = (uint64_t *)*v59;
          if (!v59)
            goto LABEL_104;
        }
      }
      while (1)
      {
        v61 = v59[1];
        if (v61 == v50)
          break;
        if (v61 >= *(_QWORD *)&v54)
          v61 %= *(_QWORD *)&v54;
        if (v61 != v56)
          goto LABEL_104;
LABEL_94:
        v59 = (uint64_t *)*v59;
        if (!v59)
          goto LABEL_104;
      }
      if (*((_DWORD *)v59 + 4) != (_DWORD)v50)
        goto LABEL_94;
LABEL_113:
      sub_20E8D2CE8(v57, v59, (uint64_t)&v92);
      v67 = v92;
      v92 = 0;
      if (v67)
      {
        if (v93)
        {
          v68 = (std::__shared_weak_count *)v67[4];
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              v84 = v68;
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        operator delete(v67);
      }
      v34 = v89[123];
LABEL_122:
      if (v33 + 152 != v34)
      {
        do
        {
          v71 = v33 + 152;
          *(_OWORD *)v33 = *(_OWORD *)(v33 + 152);
          *(_DWORD *)(v33 + 16) = *(_DWORD *)(v33 + 168);
          *(_QWORD *)(v33 + 24) = *(_QWORD *)(v33 + 176);
          *(_OWORD *)(v33 + 32) = *(_OWORD *)(v33 + 184);
          *(_QWORD *)(v33 + 48) = *(_QWORD *)(v33 + 200);
          *(_OWORD *)(v33 + 56) = *(_OWORD *)(v33 + 208);
          *(_QWORD *)(v33 + 72) = *(_QWORD *)(v33 + 224);
          v72 = *(_OWORD *)(v33 + 248);
          *(_OWORD *)(v33 + 80) = *(_OWORD *)(v33 + 232);
          *(_OWORD *)(v33 + 96) = v72;
          v73 = *(_OWORD *)(v33 + 280);
          *(_OWORD *)(v33 + 112) = *(_OWORD *)(v33 + 264);
          *(_OWORD *)(v33 + 128) = v73;
          v74 = v33 + 304;
          *(_QWORD *)(v33 + 144) = *(_QWORD *)(v33 + 296);
          v33 += 152;
        }
        while (v74 != v34);
        v33 = v71;
      }
      v89[123] = v33;
      v32 += 24;
      if (v32 != v15)
        goto LABEL_44;
      if (!v87)
        goto LABEL_16;
LABEL_12:
      v18 = (unint64_t *)&v87->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        v75 = *((char *)v8 + 1);
        v8 = (_QWORD *)((char *)v8 + 1);
        LOBYTE(v20) = v75;
        v7 += 32;
        if (v75 <= -2)
          goto LABEL_17;
      }
      else
      {
LABEL_16:
        v21 = *((char *)v8 + 1);
        v8 = (_QWORD *)((char *)v8 + 1);
        LOBYTE(v20) = v21;
        v7 += 32;
        if (v21 <= -2)
        {
          do
          {
LABEL_17:
            v22 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v8 = (_QWORD *)((char *)v8 + v22);
            v7 += 32 * v22;
            v20 = *(char *)v8;
          }
          while (v20 < -1);
        }
      }
      if (v20 == 255)
      {
        v3 = v86;
        v4 = (unsigned __int8 *)*v86;
        v5 = v86[1];
        v6 = *(unsigned __int8 *)*v86;
        break;
      }
    }
  }
  if ((char)v6 <= -2)
  {
    do
    {
      v76 = (__clz(__rbit64(((*(_QWORD *)v4 >> 7) & ~*(_QWORD *)v4 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v4 += v76;
      v5 += 32 * v76;
    }
    while ((char)*v4 < -1);
    v6 = *v4;
  }
  if (v6 != 255)
  {
    do
    {
      if (0x86BCA1AF286BCA1BLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 984) - *(_QWORD *)(*(_QWORD *)(v5 + 16) + 976)) >> 3) >= a2)
      {
        LOBYTE(v82) = v4[1];
        v77 = v4 + 1;
        v80 = v5 + 32;
        if ((char)v82 <= -2)
        {
          do
          {
            v83 = (__clz(__rbit64(((*(_QWORD *)v77 >> 7) & ~*(_QWORD *)v77 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v77 += v83;
            v80 += 32 * v83;
            v82 = (char)*v77;
          }
          while (v82 < -1);
        }
        if (v82 == 255)
          break;
      }
      else
      {
        v78 = v4 + 1;
        v79 = (char)v4[1];
        v80 = v5 + 32;
        if (v79 <= -2)
        {
          do
          {
            v81 = (__clz(__rbit64(((*(_QWORD *)v78 >> 7) & ~*(_QWORD *)v78 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v78 += v81;
            v80 += 32 * v81;
            v79 = (char)*v78;
          }
          while (v79 < -1);
        }
        if (v79 == 255)
          v77 = 0;
        else
          v77 = v78;
        sub_20F29C91C(v3, v4, v5);
      }
      v4 = v77;
      v5 = v80;
    }
    while (v77);
  }
  if (__p)
    operator delete(__p);
}

void sub_20F29B8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F29B92C(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  _QWORD *v39;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  int8x8_t **v44;
  int8x8_t *v45;
  unint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  unint64_t v52;
  int8x8_t *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t i;
  unsigned __int8 v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  uint64_t *v87;
  std::__shared_weak_count *v88;
  _QWORD *v90;
  char *v91;
  char *v92;
  void *__p;
  char v94;

  v3 = a3;
  v91 = 0;
  v92 = 0;
  v4 = (unsigned __int8 *)*a3;
  v5 = a3[1];
  v6 = *v4;
  v7 = v5;
  v8 = v4;
  v9 = v6;
  if ((char)*v4 <= -2)
  {
    v7 = v5;
    v8 = v4;
    do
    {
      v10 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v8 = (_QWORD *)((char *)v8 + v10);
      v7 += 32 * v10;
    }
    while (*(char *)v8 < -1);
    v9 = *(unsigned __int8 *)v8;
  }
  if (v9 != 255)
  {
    v87 = v3;
    while (1)
    {
      v11 = *(std::__shared_weak_count **)(v7 + 24);
      v90 = *(_QWORD **)(v7 + 16);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v88 = v11;
      v14 = v91;
      v16 = (__int128 *)v90[36];
      v15 = (__int128 *)v90[37];
      v17 = a1;
      if (v16 == v15)
        goto LABEL_124;
      v18 = v92;
      v19 = v91;
      do
      {
        if (*(_QWORD *)v16 == *(_QWORD *)v17 && *((_DWORD *)v16 + 2) == *(_DWORD *)(v17 + 8))
        {
          if (v14 < v18)
          {
            v20 = *v16;
            *((_QWORD *)v14 + 2) = *((_QWORD *)v16 + 2);
            *(_OWORD *)v14 = v20;
            v14 += 24;
            goto LABEL_14;
          }
          v21 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v19) >> 3) + 1;
          if (v21 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          if (0x5555555555555556 * ((v18 - v19) >> 3) > v21)
            v21 = 0x5555555555555556 * ((v18 - v19) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v23 = (char *)operator new(24 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = *v16;
          v25 = &v23[8 * ((v14 - v19) >> 3)];
          *((_QWORD *)v25 + 2) = *((_QWORD *)v16 + 2);
          *(_OWORD *)v25 = v24;
          if (v14 == v19)
          {
            v28 = v14;
            v19 = &v23[8 * ((v14 - v19) >> 3)];
            v17 = a1;
            v18 = &v23[24 * v22];
            v14 = v25 + 24;
            if (v28)
              goto LABEL_32;
          }
          else
          {
            v26 = &v23[8 * ((v14 - v19) >> 3)];
            v17 = a1;
            do
            {
              v27 = *(_OWORD *)(v14 - 24);
              *((_DWORD *)v26 - 2) = *((_DWORD *)v14 - 2);
              *(_OWORD *)(v26 - 24) = v27;
              v26 -= 24;
              v14 -= 24;
            }
            while (v14 != v19);
            v28 = v19;
            v19 = v26;
            v18 = &v23[24 * v22];
            v14 = v25 + 24;
            if (v28)
LABEL_32:
              operator delete(v28);
          }
        }
LABEL_14:
        v16 = (__int128 *)((char *)v16 + 168);
      }
      while (v16 != v15);
      v92 = v18;
      v91 = v19;
      if (v19 == v14)
        goto LABEL_124;
      while (1)
      {
LABEL_37:
        v30 = v90[36];
        v29 = v90[37];
        v31 = *(_QWORD *)v19;
        v32 = *((_DWORD *)v19 + 2);
        v33 = *((_DWORD *)v19 + 4);
        if (v29 != v30)
        {
          v34 = 0xCF3CF3CF3CF3CF3DLL * ((v29 - v30) >> 3);
          while (1)
          {
            v35 = v34 >> 1;
            v36 = v30 + 168 * (v34 >> 1);
            v37 = *(_DWORD *)(v36 + 16);
            v38 = v37 >= v33;
            if (v37 != v33)
              goto LABEL_45;
            if (*(_QWORD *)v36 >= v31)
              break;
LABEL_39:
            v30 = v36 + 168;
            v35 = v34 + ~v35;
LABEL_40:
            v34 = v35;
            if (!v35)
              goto LABEL_48;
          }
          if (*(_QWORD *)v36 != v31)
            goto LABEL_40;
          v38 = *(_DWORD *)(v36 + 8) >= v32;
LABEL_45:
          if (v38)
            goto LABEL_40;
          goto LABEL_39;
        }
LABEL_48:
        if (v30 != v29 && *(_DWORD *)(v30 + 16) == v33 && *(_QWORD *)v30 == v31 && *(_DWORD *)(v30 + 8) == v32)
        {
          v39 = (_QWORD *)v90[2];
          if (!v39)
            goto LABEL_115;
          v40 = (int8x8_t)v39[1];
          if (v40)
          {
            v41 = v32 ^ __ROR4__(v33, 13);
            v42 = (uint8x8_t)vcnt_s8(v40);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              v43 = v41;
              if (*(_QWORD *)&v40 <= v41)
                v43 = v41 % *(_QWORD *)&v40;
            }
            else
            {
              v43 = (v40.i32[0] - 1) & v41;
            }
            v44 = *(int8x8_t ***)(*v39 + 8 * v43);
            if (v44)
            {
              v45 = *v44;
              if (*v44)
                break;
            }
          }
        }
LABEL_97:
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 66, (uint64_t)"ret", 3, (uint64_t)"Fail to remove node. this is not possible", 41, (void (*)(void **))sub_21023DDB0);
        v59 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v60 = qword_254A6DE40;
          for (i = qword_254A6DE48; v60 != i; v60 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v60)(*(_QWORD *)(v60 + 8), "ret", 3, "Fail to remove node. this is not possible", 41);
        }
        v62 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "ret", 3, "Fail to remove node. this is not possible", 41);
        v19 += 24;
        if (v19 == v14)
          goto LABEL_124;
      }
      v46 = *(unsigned int *)(v30 + 28);
      if (v42.u32[0] < 2uLL)
      {
        v47 = *(_QWORD *)&v40 - 1;
        while (1)
        {
          v49 = v45[1];
          if (*(_QWORD *)&v49 == v41)
          {
            if (v45[4].i32[0] == v33 && *(_QWORD *)&v45[2] == v31 && v45[3].i32[0] == v32)
              goto LABEL_77;
          }
          else if ((*(_QWORD *)&v49 & v47) != v43)
          {
            goto LABEL_97;
          }
          v45 = (int8x8_t *)*v45;
          if (!v45)
            goto LABEL_97;
        }
      }
      while (2)
      {
        v48 = v45[1];
        if (*(_QWORD *)&v48 != v41)
        {
          if (*(_QWORD *)&v48 >= *(_QWORD *)&v40)
            *(_QWORD *)&v48 %= *(_QWORD *)&v40;
          if (*(_QWORD *)&v48 != v43)
            goto LABEL_97;
LABEL_63:
          v45 = (int8x8_t *)*v45;
          if (!v45)
            goto LABEL_97;
          continue;
        }
        break;
      }
      if (v45[4].i32[0] != v33 || *(_QWORD *)&v45[2] != v31 || v45[3].i32[0] != v32)
        goto LABEL_63;
LABEL_77:
      v50 = v45[6];
      if (!*(_QWORD *)&v50)
        goto LABEL_97;
      v51 = (uint8x8_t)vcnt_s8(v50);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        v52 = *(unsigned int *)(v30 + 28);
        if (*(_QWORD *)&v50 <= v46)
          v52 = v46 % *(_QWORD *)&v50;
      }
      else
      {
        v52 = (v50.i32[0] - 1) & v46;
      }
      v53 = v45 + 5;
      v54 = *(uint64_t ***)(*(_QWORD *)&v45[5] + 8 * v52);
      if (!v54)
        goto LABEL_97;
      v55 = *v54;
      if (!*v54)
        goto LABEL_97;
      if (v51.u32[0] < 2uLL)
      {
        v56 = *(_QWORD *)&v50 - 1;
        while (1)
        {
          v58 = v55[1];
          if (v58 == v46)
          {
            if (*((_DWORD *)v55 + 4) == (_DWORD)v46)
              goto LABEL_106;
          }
          else if ((v58 & v56) != v52)
          {
            goto LABEL_97;
          }
          v55 = (uint64_t *)*v55;
          if (!v55)
            goto LABEL_97;
        }
      }
      while (1)
      {
        v57 = v55[1];
        if (v57 == v46)
          break;
        if (v57 >= *(_QWORD *)&v50)
          v57 %= *(_QWORD *)&v50;
        if (v57 != v52)
          goto LABEL_97;
LABEL_87:
        v55 = (uint64_t *)*v55;
        if (!v55)
          goto LABEL_97;
      }
      if (*((_DWORD *)v55 + 4) != (_DWORD)v46)
        goto LABEL_87;
LABEL_106:
      sub_20E8D2CE8(v53, v55, (uint64_t)&__p);
      v63 = __p;
      __p = 0;
      if (v63)
      {
        if (v94)
        {
          v64 = (std::__shared_weak_count *)v63[4];
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        operator delete(v63);
      }
      v29 = v90[37];
LABEL_115:
      if (v30 + 168 != v29)
      {
        do
        {
          v67 = v30 + 168;
          *(_OWORD *)v30 = *(_OWORD *)(v30 + 168);
          *(_DWORD *)(v30 + 16) = *(_DWORD *)(v30 + 184);
          *(_QWORD *)(v30 + 24) = *(_QWORD *)(v30 + 192);
          v68 = *(_OWORD *)(v30 + 216);
          *(_OWORD *)(v30 + 32) = *(_OWORD *)(v30 + 200);
          *(_OWORD *)(v30 + 48) = v68;
          v69 = *(_OWORD *)(v30 + 248);
          *(_QWORD *)(v30 + 128) = *(_QWORD *)(v30 + 296);
          *(_OWORD *)(v30 + 64) = *(_OWORD *)(v30 + 232);
          *(_OWORD *)(v30 + 80) = v69;
          v70 = *(_OWORD *)(v30 + 280);
          *(_OWORD *)(v30 + 96) = *(_OWORD *)(v30 + 264);
          *(_OWORD *)(v30 + 112) = v70;
          *(_QWORD *)(v30 + 152) = *(_QWORD *)(v30 + 320);
          *(_OWORD *)(v30 + 136) = *(_OWORD *)(v30 + 304);
          v71 = v30 + 336;
          *(_QWORD *)(v30 + 160) = *(_QWORD *)(v30 + 328);
          v30 += 168;
        }
        while (v71 != v29);
        v30 = v67;
      }
      v90[37] = v30;
      v19 += 24;
      if (v19 != v14)
        goto LABEL_37;
      if (!v88)
        goto LABEL_128;
LABEL_124:
      v72 = (unint64_t *)&v88->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
        v77 = *((char *)v8 + 1);
        v8 = (_QWORD *)((char *)v8 + 1);
        LOBYTE(v74) = v77;
        v7 += 32;
        if (v77 <= -2)
          goto LABEL_129;
      }
      else
      {
LABEL_128:
        v75 = *((char *)v8 + 1);
        v8 = (_QWORD *)((char *)v8 + 1);
        LOBYTE(v74) = v75;
        v7 += 32;
        if (v75 <= -2)
        {
          do
          {
LABEL_129:
            v76 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v8 = (_QWORD *)((char *)v8 + v76);
            v7 += 32 * v76;
            v74 = *(char *)v8;
          }
          while (v74 < -1);
        }
      }
      if (v74 == 255)
      {
        v3 = v87;
        v4 = (unsigned __int8 *)*v87;
        v5 = v87[1];
        v6 = *(unsigned __int8 *)*v87;
        break;
      }
    }
  }
  if ((char)v6 <= -2)
  {
    do
    {
      v78 = (__clz(__rbit64(((*(_QWORD *)v4 >> 7) & ~*(_QWORD *)v4 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v4 += v78;
      v5 += 32 * v78;
    }
    while ((char)*v4 < -1);
    v6 = *v4;
  }
  if (v6 != 255)
  {
    do
    {
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 296) - *(_QWORD *)(*(_QWORD *)(v5 + 16) + 288)) >> 3) >= a2)
      {
        LOBYTE(v84) = v4[1];
        v79 = v4 + 1;
        v82 = v5 + 32;
        if ((char)v84 <= -2)
        {
          do
          {
            v85 = (__clz(__rbit64(((*(_QWORD *)v79 >> 7) & ~*(_QWORD *)v79 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v79 += v85;
            v82 += 32 * v85;
            v84 = (char)*v79;
          }
          while (v84 < -1);
        }
        if (v84 == 255)
          break;
      }
      else
      {
        v80 = v4 + 1;
        v81 = (char)v4[1];
        v82 = v5 + 32;
        if (v81 <= -2)
        {
          do
          {
            v83 = (__clz(__rbit64(((*(_QWORD *)v80 >> 7) & ~*(_QWORD *)v80 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v80 += v83;
            v82 += 32 * v83;
            v81 = (char)*v80;
          }
          while (v81 < -1);
        }
        if (v81 == 255)
          v79 = 0;
        else
          v79 = v80;
        sub_20F29C91C(v3, v4, v5);
      }
      v4 = v79;
      v5 = v82;
    }
    while (v79);
  }
  if (v91)
    operator delete(v91);
}

void sub_20F29C310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F29C390(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *i;
  uint64_t *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;

  v4 = a1 + 3;
  v5 = sub_20E9DF85C(a1 + 3, (uint64_t *)a2);
  if (!v5)
    return;
  v6 = v5;
  v34 = v4;
  v35 = (uint64_t *)operator new(0x3E80uLL);
  v36 = v35;
  v37 = v35 + 2000;
  for (i = (_QWORD *)v6[7]; i; i = (_QWORD *)*i)
  {
    v11 = (_QWORD *)i[3];
    v10 = (std::__shared_weak_count *)i[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = v11[25];
    v15 = v11[26];
    v16 = v14;
    if (v14 != v15)
    {
      v16 = v11[25];
      while (*(_DWORD *)(v16 + 16) != *(_DWORD *)(a2 + 16)
           || *(_QWORD *)v16 != *(_QWORD *)a2
           || *(_DWORD *)(v16 + 8) != *(_DWORD *)(a2 + 8))
      {
        v16 += 32;
        if (v16 == v15)
          goto LABEL_25;
      }
    }
    if (v16 != v15)
    {
      v17 = v15 - (v16 + 32);
      if (v15 != v16 + 32)
      {
        memmove((void *)v16, (const void *)(v16 + 32), v15 - (v16 + 32));
        v14 = v11[25];
      }
      v15 = v16 + v17;
      v11[26] = v16 + v17;
    }
LABEL_25:
    if (v15 != v14)
    {
      if (v10)
        goto LABEL_42;
      continue;
    }
    v19 = v11[3];
    v18 = v11[4];
    v20 = v36;
    if (v36 < v37)
    {
      *v36 = v19;
      v36[1] = v18;
      v21 = v36 + 2;
      goto LABEL_41;
    }
    v22 = v35;
    v23 = ((char *)v36 - (char *)v35) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      sub_20E867F44();
    v25 = (char *)v37 - (char *)v35;
    if (v37 - v35 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 60)
        sub_20E877A38();
      v27 = (char *)operator new(16 * v26);
      v28 = &v27[16 * v23];
      *(_QWORD *)v28 = v19;
      *((_QWORD *)v28 + 1) = v18;
      v29 = (uint64_t)v28;
      if (v36 == v35)
      {
LABEL_39:
        v21 = (uint64_t *)(v28 + 16);
        v35 = (uint64_t *)v29;
        v37 = (uint64_t *)&v27[16 * v26];
        if (!v36)
          goto LABEL_41;
LABEL_40:
        operator delete(v20);
        goto LABEL_41;
      }
    }
    else
    {
      v27 = 0;
      v28 = (char *)(16 * v23);
      *(_QWORD *)v28 = v19;
      *((_QWORD *)v28 + 1) = v18;
      v29 = 16 * v23;
      if (v36 == v35)
        goto LABEL_39;
    }
    do
    {
      v32 = *(v20 - 2);
      v20 -= 2;
      v33 = *((_DWORD *)v20 + 2);
      *(_QWORD *)(v29 - 16) = v32;
      v29 -= 16;
      *(_DWORD *)(v29 + 8) = v33;
    }
    while (v20 != v35);
    v20 = v35;
    v21 = (uint64_t *)(v28 + 16);
    v35 = (uint64_t *)v29;
    v37 = (uint64_t *)&v27[16 * v26];
    if (v22)
      goto LABEL_40;
LABEL_41:
    v36 = v21;
    if (v10)
    {
LABEL_42:
      v30 = (unint64_t *)&v10->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v8 = sub_20E9DF85C(v34, (uint64_t *)a2);
  if (v8)
    sub_20F29CAA4(v34, v8);
  if (v35 != v36)
  {
    v9 = v35;
    do
    {
      sub_20F25F344(a1, v9);
      v9 += 2;
    }
    while (v9 != v36);
  }
  if (v35)
    operator delete(v35);
}

void sub_20F29C658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  sub_20E86665C((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_20F29C68C(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v2;
  double result;

  v2 = *a2;
  *a1 = **a2;
  a1[1] = *v2;
  a1[2] = *v2;
  a1[3] = *v2;
  a1[4] = *v2;
  a1[5] = *v2;
  a1[6] = *v2;
  a1[7] = *v2;
  a1[8] = *v2;
  a1[9] = *v2;
  a1[10] = *v2;
  a1[11] = *v2;
  a1[12] = *v2;
  a1[13] = *v2;
  a1[14] = *v2;
  a1[15] = *v2;
  a1[16] = *v2;
  a1[17] = *v2;
  a1[18] = *v2;
  a1[19] = *v2;
  a1[20] = *v2;
  a1[21] = *v2;
  a1[22] = *v2;
  a1[23] = *v2;
  a1[24] = *v2;
  a1[25] = *v2;
  a1[26] = *v2;
  a1[27] = *v2;
  a1[28] = *v2;
  a1[29] = *v2;
  a1[30] = *v2;
  a1[31] = *v2;
  a1[32] = *v2;
  a1[33] = *v2;
  a1[34] = *v2;
  a1[35] = *v2;
  a1[36] = *v2;
  a1[37] = *v2;
  a1[38] = *v2;
  a1[39] = *v2;
  a1[40] = *v2;
  a1[41] = *v2;
  a1[42] = *v2;
  a1[43] = *v2;
  a1[44] = *v2;
  a1[45] = *v2;
  a1[46] = *v2;
  a1[47] = *v2;
  a1[48] = *v2;
  a1[49] = *v2;
  a1[50] = *v2;
  a1[51] = *v2;
  a1[52] = *v2;
  a1[53] = *v2;
  a1[54] = *v2;
  a1[55] = *v2;
  a1[56] = *v2;
  a1[57] = *v2;
  a1[58] = *v2;
  a1[59] = *v2;
  a1[60] = *v2;
  a1[61] = *v2;
  a1[62] = *v2;
  a1[63] = *v2;
  a1[64] = *v2;
  a1[65] = *v2;
  a1[66] = *v2;
  a1[67] = *v2;
  a1[68] = *v2;
  a1[69] = *v2;
  a1[70] = *v2;
  a1[71] = *v2;
  a1[72] = *v2;
  a1[73] = *v2;
  a1[74] = *v2;
  a1[75] = *v2;
  a1[76] = *v2;
  a1[77] = *v2;
  a1[78] = *v2;
  a1[79] = *v2;
  result = *(double *)v2;
  a1[80] = *v2;
  return result;
}

_QWORD *sub_20F29C91C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;

  v5 = (_QWORD *)((char *)a2 + 1);
  v6 = a3 + 32;
  if (*((char *)a2 + 1) > -2)
  {
    if (*((unsigned __int8 *)a2 + 1) == 255)
      v8 = 0;
    else
      v8 = (_QWORD *)((char *)a2 + 1);
    v9 = *(std::__shared_weak_count **)(a3 + 24);
    if (!v9)
      goto LABEL_16;
  }
  else
  {
    do
    {
      v7 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v5 = (_QWORD *)((char *)v5 + v7);
      v6 += 32 * v7;
    }
    while (*(char *)v5 < -1);
    if (*(unsigned __int8 *)v5 == 255)
      v8 = 0;
    else
      v8 = v5;
    v9 = *(std::__shared_weak_count **)(a3 + 24);
    if (!v9)
      goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_16:
  v12 = a1[3];
  --a1[2];
  v13 = *a1;
  v14 = (char *)a2 - *a1;
  v15 = *(_QWORD *)(*a1 + ((unint64_t)(v14 - 8) & v12));
  v16 = *a2 & (~*a2 << 6) & 0x8080808080808080;
  v17 = v15 & (~v15 << 6) & 0x8080808080808080;
  if (v17)
    v18 = v16 == 0;
  else
    v18 = 1;
  if (v18)
  {
    v22 = 0;
    v19 = -2;
  }
  else
  {
    v20 = (__clz(v17) >> 3) + (__clz(__rbit64(v16)) >> 3);
    v21 = v20 >= 8;
    v22 = v20 < 8;
    if (v21)
      v19 = -2;
    else
      v19 = 0x80;
  }
  v14[v13] = v19;
  *(_BYTE *)(v13 + ((unint64_t)(v14 - 7) & v12) + (v12 & 7)) = v19;
  a1[4] += v22;
  return v8;
}

uint64_t sub_20F29CAA4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char v12;

  v2 = *a2;
  sub_20E8D2CE8(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
  {
    if (v12)
    {
      v4 = (_QWORD *)v3[7];
      while (v4)
      {
        v7 = v4;
        v4 = (_QWORD *)*v4;
        v8 = (std::__shared_weak_count *)v7[4];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v7);
      }
      v5 = (void *)v3[5];
      v3[5] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v3);
  }
  return v2;
}

void sub_20F29CB68(float32x4_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, float32x4_t a5@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  double *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *__p;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double *v20;

  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 64) = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    if ((a3 & 1) == 0)
    {
      while (1)
      {
        sub_20F2783C8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 184) + 1056) + 8) + 400, a1, 1uLL, (uint64_t *)&v19, a5);
        v10 = v19;
        if (v19 == v20)
          goto LABEL_22;
        if (!*(_BYTE *)(a4 + 64) || v19[3] < *(double *)(a4 + 56))
          break;
LABEL_14:
        v20 = v10;
        operator delete(v10);
LABEL_15:
        v5 += 8;
        if (v5 == v6)
          return;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 160);
      v14 = -1;
      v12 = -1;
      v13 = -1;
      v16 = 0;
      v17 = 0;
      __p = 0;
      v18 = *((_QWORD *)v19 + 3);
      sub_20F29CD9C(a4, (uint64_t)&v11);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      v10 = v19;
LABEL_22:
      if (!v10)
        goto LABEL_15;
      goto LABEL_14;
    }
    while (1)
    {
      sub_20F2783C8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 184) + 1072) + 8) + 400, a1, 1uLL, (uint64_t *)&v19, a5);
      v9 = v19;
      if (v19 == v20)
        goto LABEL_12;
      if (!*(_BYTE *)(a4 + 64) || v19[3] < *(double *)(a4 + 56))
        break;
LABEL_4:
      v20 = v9;
      operator delete(v9);
LABEL_5:
      v5 += 8;
      if (v5 == v6)
        return;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 160);
    v14 = -1;
    v12 = -1;
    v13 = -1;
    v16 = 0;
    v17 = 0;
    __p = 0;
    v18 = *((_QWORD *)v19 + 3);
    sub_20F29CD9C(a4, (uint64_t)&v11);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    v9 = v19;
LABEL_12:
    if (!v9)
      goto LABEL_5;
    goto LABEL_4;
  }
}

void sub_20F29CD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v21 = a18;
    if (!a18)
    {
LABEL_3:
      if (!*(_BYTE *)(v19 + 64))
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    v21 = a18;
    if (!a18)
      goto LABEL_3;
  }
  operator delete(v21);
  if (!*(_BYTE *)(v19 + 64))
    goto LABEL_9;
LABEL_7:
  v22 = *(void **)(v19 + 32);
  if (v22)
  {
    *(_QWORD *)(v19 + 40) = v22;
    operator delete(v22);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F29CD9C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = *(unsigned __int8 *)(a1 + 64);
  v5 = *(_OWORD *)(a2 + 12);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 12) = v5;
  if (v4)
  {
    if (a1 != a2)
      sub_20F27AE20((_QWORD *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    return a1;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v8 = *(_BYTE **)(a2 + 32);
    v7 = *(_BYTE **)(a2 + 40);
    v9 = v7 - v8;
    if (v7 != v8)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v10 = (char *)operator new(v9);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = &v10[8 * (v9 >> 3)];
      *(_QWORD *)(a1 + 48) = v11;
      memcpy(v10, v8, v9 - 4);
      *(_QWORD *)(a1 + 40) = v11;
    }
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    return a1;
  }
}

void sub_20F29CEB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F29CECC(float32x4_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, _QWORD *a5@<X8>, float32x4_t a6@<Q0>)
{
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  char *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  uint64_t v45;
  __int128 *v46;
  __int128 v47;
  void *v48;
  __int128 v49;
  void *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  _QWORD *v62;
  _OWORD v63[2];
  void *__p;
  _BYTE *v65;
  char *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _OWORD v70[2];
  _BYTE v71[28];

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v7 = *a2;
  v56 = a2[1];
  if (*a2 == v56)
    return;
  while (2)
  {
    v9 = 1056;
    if (a3)
      v9 = 1072;
    sub_20F2783C8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 184) + v9) + 8) + 400, a1, a4, (uint64_t *)&v68, a6);
    v10 = v68;
    v61 = v7;
    v62 = v69;
    if (v68 == v69)
    {
      if (v68)
        goto LABEL_50;
      goto LABEL_3;
    }
    do
    {
      v11 = a5[1];
      if (a4 <= (uint64_t)(v11 - *a5) >> 6)
      {
        a6.i64[0] = v10[3];
        if (*(double *)a6.i64 > *(double *)(*a5 + 56))
          goto LABEL_9;
      }
      *(_QWORD *)&v63[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 160);
      memset((char *)v63 + 8, 255, 20);
      *(_OWORD *)v71 = *(_OWORD *)v10;
      *(_DWORD *)&v71[16] = *((_DWORD *)v10 + 4);
      v12 = operator new(0x18uLL);
      v65 = v12 + 6;
      v66 = (char *)(v12 + 6);
      *(_OWORD *)v12 = *(_OWORD *)v71;
      v12[4] = *(_DWORD *)&v71[16];
      __p = v12;
      v67 = v10[3];
      if (v11 < a5[2])
      {
        a6 = (float32x4_t)v63[0];
        *(_OWORD *)(v11 + 12) = *(_OWORD *)((char *)v63 + 12);
        *(_QWORD *)(v11 + 32) = 0;
        *(float32x4_t *)v11 = a6;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        v13 = __p;
        v14 = v65 - (_BYTE *)__p;
        if (v65 != __p)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) >= 0xAAAAAAAAAAAAAABLL)
            sub_20E867F44();
          v15 = (char *)operator new(v65 - (_BYTE *)__p);
          *(_QWORD *)(v11 + 32) = v15;
          *(_QWORD *)(v11 + 40) = v15;
          v16 = &v15[8 * (v14 >> 3)];
          *(_QWORD *)(v11 + 48) = v16;
          memcpy(v15, v13, v14 - 4);
          *(_QWORD *)(v11 + 40) = v16;
          v7 = v61;
        }
        a6.i64[0] = v67;
        *(_QWORD *)(v11 + 56) = v67;
        v17 = (char *)(v11 + 64);
        a5[1] = v11 + 64;
        a5[1] = v11 + 64;
        v18 = (__int128 *)*a5;
        v19 = v11 + 64 - *a5;
        if (v19 < 65)
          goto LABEL_26;
LABEL_19:
        v20 = (((unint64_t)v19 >> 6) - 2) >> 1;
        a6.i64[0] = *((_QWORD *)&v18[4 * v20 + 3] + 1);
        v21 = *((double *)v17 - 1);
        if (*(double *)a6.i64 < v21)
        {
          v22 = v17 - 64;
          *(_OWORD *)v71 = *((_OWORD *)v17 - 4);
          *(_OWORD *)&v71[12] = *(_OWORD *)(v17 - 52);
          v59 = *((float32x4_t *)v17 - 2);
          v23 = *((_QWORD *)v17 - 2);
          *((_QWORD *)v17 - 4) = 0;
          *((_QWORD *)v17 - 3) = 0;
          *((_QWORD *)v17 - 2) = 0;
          do
          {
            v24 = &v18[4 * v20];
            v25 = *v24;
            *(_OWORD *)(v22 + 12) = *(__int128 *)((char *)v24 + 12);
            *(_OWORD *)v22 = v25;
            v26 = (void *)*((_QWORD *)v22 + 4);
            if (v26)
            {
              *((_QWORD *)v22 + 5) = v26;
              operator delete(v26);
              *((_QWORD *)v22 + 4) = 0;
              *((_QWORD *)v22 + 5) = 0;
              *((_QWORD *)v22 + 6) = 0;
            }
            *((_OWORD *)v22 + 2) = v24[2];
            *((_QWORD *)v22 + 6) = *((_QWORD *)v24 + 6);
            *((_QWORD *)v24 + 5) = 0;
            *((_QWORD *)v24 + 6) = 0;
            *((_QWORD *)v24 + 4) = 0;
            *((_QWORD *)v22 + 7) = *((_QWORD *)v24 + 7);
            if (!v20)
              break;
            v20 = (v20 - 1) >> 1;
            v22 = (char *)v24;
          }
          while (*((double *)&v18[4 * v20 + 3] + 1) < v21);
          *v24 = *(_OWORD *)v71;
          *(__int128 *)((char *)v24 + 12) = *(_OWORD *)&v71[12];
          a6 = v59;
          v24[2] = (__int128)v59;
          *((_QWORD *)v24 + 6) = v23;
          *((double *)v24 + 7) = v21;
          v18 = (__int128 *)*a5;
          v17 = (char *)a5[1];
          v19 = (uint64_t)&v17[-*a5];
          v7 = v61;
        }
        goto LABEL_26;
      }
      v17 = sub_20F281A28(a5, (uint64_t)v63);
      a5[1] = v17;
      v18 = (__int128 *)*a5;
      v19 = (uint64_t)&v17[-*a5];
      if (v19 >= 65)
        goto LABEL_19;
LABEL_26:
      v27 = v19 >> 6;
      if (v19 >> 6 > a4)
      {
        if (v19 >= 65)
        {
          v28 = 0;
          v70[0] = *v18;
          a6 = *(float32x4_t *)((char *)v18 + 12);
          *(float32x4_t *)((char *)v70 + 12) = a6;
          v29 = *((_QWORD *)v18 + 4);
          v30 = *((_QWORD *)v18 + 5);
          v31 = *((_QWORD *)v18 + 6);
          *((_QWORD *)v18 + 4) = 0;
          *((_QWORD *)v18 + 5) = 0;
          *((_QWORD *)v18 + 6) = 0;
          v32 = (char *)v18;
          a6.i64[0] = *((_QWORD *)v18 + 7);
          do
          {
            v35 = (__int128 *)v32;
            v32 += 64 * v28 + 64;
            v36 = 2 * v28;
            v28 = (2 * v28) | 1;
            v37 = v36 + 2;
            if (v37 < v27 && *((double *)v32 + 7) < *((double *)v32 + 15))
            {
              v32 += 64;
              v28 = v37;
            }
            v33 = *(_OWORD *)v32;
            *(__int128 *)((char *)v35 + 12) = *(_OWORD *)(v32 + 12);
            *v35 = v33;
            v34 = *((_QWORD *)v32 + 7);
            v35[2] = *((_OWORD *)v32 + 2);
            *((_QWORD *)v35 + 6) = *((_QWORD *)v32 + 6);
            *((_QWORD *)v32 + 5) = 0;
            *((_QWORD *)v32 + 6) = 0;
            *((_QWORD *)v32 + 4) = 0;
            *((_QWORD *)v35 + 7) = v34;
          }
          while (v28 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
          v38 = v17 - 64;
          if (v32 == v17 - 64)
          {
            v49 = v70[0];
            *(_OWORD *)(v32 + 12) = *(_OWORD *)((char *)v70 + 12);
            *(_OWORD *)v32 = v49;
            *((_QWORD *)v32 + 4) = v29;
            *((_QWORD *)v32 + 5) = v30;
            *((_QWORD *)v32 + 6) = v31;
            *((_QWORD *)v32 + 7) = a6.i64[0];
          }
          else
          {
            v39 = *(_OWORD *)v38;
            *(_OWORD *)(v32 + 12) = *(_OWORD *)(v17 - 52);
            *(_OWORD *)v32 = v39;
            *(_QWORD *)&v39 = *((_QWORD *)v17 - 1);
            *((_OWORD *)v32 + 2) = *((_OWORD *)v17 - 2);
            *((_QWORD *)v32 + 6) = *((_QWORD *)v17 - 2);
            *((_QWORD *)v32 + 7) = v39;
            v40 = *(_OWORD *)((char *)v70 + 12);
            *(_OWORD *)v38 = v70[0];
            *(_OWORD *)(v17 - 52) = v40;
            *((_QWORD *)v17 - 4) = v29;
            *((_QWORD *)v17 - 3) = v30;
            *((_QWORD *)v17 - 2) = v31;
            *((_QWORD *)v17 - 1) = a6.i64[0];
            v41 = v32 - (char *)v18 + 64;
            if (v41 >= 65)
            {
              v42 = (((unint64_t)v41 >> 6) - 2) >> 1;
              a6.i64[0] = *((_QWORD *)&v18[4 * v42 + 3] + 1);
              v43 = *((double *)v32 + 7);
              if (*(double *)a6.i64 < v43)
              {
                v44 = *(_OWORD *)v32;
                *(_OWORD *)&v71[12] = *(_OWORD *)(v32 + 12);
                *(_OWORD *)v71 = v44;
                v60 = *((float32x4_t *)v32 + 2);
                v45 = *((_QWORD *)v32 + 6);
                *((_QWORD *)v32 + 4) = 0;
                *((_QWORD *)v32 + 5) = 0;
                *((_QWORD *)v32 + 6) = 0;
                do
                {
                  v46 = &v18[4 * v42];
                  v47 = *v46;
                  *(_OWORD *)(v32 + 12) = *(__int128 *)((char *)v46 + 12);
                  *(_OWORD *)v32 = v47;
                  v48 = (void *)*((_QWORD *)v32 + 4);
                  if (v48)
                  {
                    *((_QWORD *)v32 + 5) = v48;
                    operator delete(v48);
                    *((_QWORD *)v32 + 4) = 0;
                    *((_QWORD *)v32 + 5) = 0;
                    *((_QWORD *)v32 + 6) = 0;
                  }
                  *((_OWORD *)v32 + 2) = v46[2];
                  *((_QWORD *)v32 + 6) = *((_QWORD *)v46 + 6);
                  *((_QWORD *)v46 + 5) = 0;
                  *((_QWORD *)v46 + 6) = 0;
                  *((_QWORD *)v46 + 4) = 0;
                  *((_QWORD *)v32 + 7) = *((_QWORD *)v46 + 7);
                  if (!v42)
                    break;
                  v42 = (v42 - 1) >> 1;
                  v32 = (char *)v46;
                }
                while (*((double *)&v18[4 * v42 + 3] + 1) < v43);
                *v46 = *(_OWORD *)v71;
                *(__int128 *)((char *)v46 + 12) = *(_OWORD *)&v71[12];
                a6 = v60;
                v46[2] = (__int128)v60;
                *((_QWORD *)v46 + 6) = v45;
                *((double *)v46 + 7) = v43;
                v7 = v61;
              }
            }
          }
          v17 = (char *)a5[1];
        }
        v50 = (void *)*((_QWORD *)v17 - 4);
        if (v50)
        {
          *((_QWORD *)v17 - 3) = v50;
          operator delete(v50);
        }
        a5[1] = v17 - 64;
      }
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
LABEL_9:
      v10 += 4;
    }
    while (v10 != v62);
    v10 = v68;
    if (v68)
    {
LABEL_50:
      v69 = v10;
      operator delete(v10);
    }
LABEL_3:
    v7 += 8;
    if (v7 != v56)
      continue;
    break;
  }
  v51 = (__int128 *)*a5;
  v52 = a5[1];
  v53 = v52 - *a5;
  if (v53 >= 65)
  {
    v54 = (unint64_t)v53 >> 6;
    do
    {
      sub_20F281CD8(v51, v52, (uint64_t)v63, v54);
      v52 -= 64;
    }
    while (v54-- > 2);
  }
}

void sub_20F29D4D4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20F26EE18(v1);
  _Unwind_Resume(a1);
}

void sub_20F29D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void *v31;
  void *v32;

  v31 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 40) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(v27 + 8) = v28;
  if (__p)
  {
    operator delete(__p);
    v32 = a26;
    if (!a26)
    {
LABEL_5:
      sub_20F26EE18((void **)v27);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v32 = a26;
    if (!a26)
      goto LABEL_5;
  }
  operator delete(v32);
  sub_20F26EE18((void **)v27);
  _Unwind_Resume(a1);
}

void sub_20F29D568(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD **v8;
  uint64_t *v9;
  uint64_t *v10;
  char **v11;
  _QWORD *v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  _BOOL4 v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t **v52;
  unint64_t v53;
  BOOL v54;
  uint64_t **v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t **v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::string __p;

  a3[1] = 0;
  v5 = a3 + 1;
  a3[2] = 0;
  *a3 = (uint64_t *)(a3 + 1);
  v6 = *(_QWORD *)(a1 + 16);
  v66 = *(_QWORD *)(v6 + 160);
  v7 = *(_QWORD **)(a2 + 16);
  if (v7)
  {
    while (1)
    {
      v8 = *(_QWORD ***)(v7[5] + 424);
      v9 = (uint64_t *)v7[2];
      v10 = *v5;
      v11 = (char **)v5;
      v12 = v5;
      if (*v5)
      {
        v13 = *v5;
        while (1)
        {
          while (1)
          {
            v12 = v13;
            v14 = v13[4];
            if ((unint64_t)v9 >= v14)
              break;
            v13 = (uint64_t *)*v12;
            v11 = (char **)v12;
            if (!*v12)
              goto LABEL_13;
          }
          if (v14 >= (unint64_t)v9)
            break;
          v13 = (uint64_t *)v12[1];
          if (!v13)
          {
            v11 = (char **)(v12 + 1);
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v15 = (char *)operator new(0x50uLL);
        *((_QWORD *)v15 + 4) = v9;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 56) = 0u;
        v15[72] = 0;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = v12;
        *v11 = v15;
        v16 = (uint64_t *)**a3;
        if (v16)
        {
          *a3 = v16;
          v15 = *v11;
        }
        sub_20E868578(a3[1], (uint64_t *)v15);
        v10 = a3[1];
        a3[2] = (uint64_t *)((char *)a3[2] + 1);
        v9 = (uint64_t *)v7[2];
      }
      v17 = v5;
      v18 = v5;
      if (!v10)
        break;
      while (1)
      {
        while (1)
        {
          v18 = (uint64_t **)v10;
          v19 = v10[4];
          if ((unint64_t)v9 >= v19)
            break;
          v10 = *v18;
          v17 = v18;
          if (!*v18)
            goto LABEL_23;
        }
        if (v19 >= (unint64_t)v9)
          break;
        v10 = v18[1];
        if (!v10)
        {
          v17 = v18 + 1;
          goto LABEL_23;
        }
      }
      v20 = (char *)v18;
      v18[5] = v9;
      v23 = (_QWORD *)(*v8)[6];
      v24 = (uint64_t)(*v8 + 7);
      if (v23 != (_QWORD *)v24)
        goto LABEL_32;
LABEL_28:
      *((_DWORD *)v20 + 17) = *(_QWORD *)(v7[5] + 24);
      v25 = *(_QWORD *)(a1 + 192);
      sub_20FCCBC60((unint64_t *)v25, &__p);
      v26 = sub_20EB07858(*(_QWORD **)(v25 + 8), (uint64_t)&__p);
      v27 = v26;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v26)
          goto LABEL_5;
LABEL_4:
        v20[72] = 1;
        goto LABEL_5;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v27)
        goto LABEL_4;
LABEL_5:
      v7 = (_QWORD *)*v7;
      if (!v7)
      {
        v6 = *(_QWORD *)(a1 + 16);
        goto LABEL_67;
      }
    }
LABEL_23:
    v20 = (char *)operator new(0x50uLL);
    *((_QWORD *)v20 + 4) = v9;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *((_QWORD *)v20 + 9) = 0;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v18;
    *v17 = (uint64_t *)v20;
    v21 = (uint64_t *)**a3;
    v22 = (uint64_t *)v20;
    if (v21)
    {
      *a3 = v21;
      v22 = *v17;
    }
    sub_20E868578(a3[1], v22);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
    *((_QWORD *)v20 + 5) = v7[2];
    v23 = (_QWORD *)(*v8)[6];
    v24 = (uint64_t)(*v8 + 7);
    if (v23 == (_QWORD *)v24)
      goto LABEL_28;
    while (1)
    {
LABEL_32:
      v67 = *((_OWORD *)v23 + 2);
      sub_20F23A0A0(*v8, &v67, &__p.__r_.__value_.__l.__data_);
      v29 = (char *)v8[5];
      v28 = (char *)v8[6];
      if (v28 != v29)
      {
        v30 = (v28 - v29) >> 4;
        v31 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
        v32 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        while (1)
        {
          v33 = v30 >> 1;
          v34 = &v29[16 * (v30 >> 1)];
          v35 = *(_QWORD *)v34;
          v36 = *(_DWORD *)(*(_QWORD *)v34 + 16);
          v37 = v36 >= v31;
          if (v36 != v31)
            goto LABEL_40;
          if (*(_QWORD *)v35 >= v32)
            break;
LABEL_34:
          v29 = v34 + 16;
          v33 = v30 + ~v33;
LABEL_35:
          v30 = v33;
          if (!v33)
            goto LABEL_43;
        }
        if (*(_QWORD *)v35 != v32)
          goto LABEL_35;
        v37 = *(_DWORD *)(v35 + 8) >= *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
LABEL_40:
        if (v37)
          goto LABEL_35;
        goto LABEL_34;
      }
LABEL_43:
      if (v29 == v28)
      {
        v39 = *(unsigned __int8 *)(*(_QWORD *)v28 + 736) != 0;
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_51;
      }
      else
      {
        v38 = *(_QWORD *)v29;
        if (*(_DWORD *)(*(_QWORD *)v29 + 16) == *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 16)
          && *(_QWORD *)v38 == *(_QWORD *)__p.__r_.__value_.__l.__data_
          && *(_DWORD *)(v38 + 8) == *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8))
        {
          v28 = v29;
        }
        v39 = *(unsigned __int8 *)(*(_QWORD *)v28 + 736) != 0;
      }
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_51:
      if (v23[4] == v7[2])
      {
        if (v39)
        {
          ++*((_DWORD *)v20 + 14);
          v40 = (_QWORD *)v23[1];
          if (v40)
            goto LABEL_61;
        }
        else
        {
          ++*((_DWORD *)v20 + 13);
          v40 = (_QWORD *)v23[1];
          if (v40)
            goto LABEL_61;
        }
      }
      else if (v39)
      {
        ++*((_DWORD *)v20 + 16);
        v40 = (_QWORD *)v23[1];
        if (v40)
          goto LABEL_61;
      }
      else
      {
        ++*((_DWORD *)v20 + 15);
        v40 = (_QWORD *)v23[1];
        if (v40)
        {
          do
          {
LABEL_61:
            v41 = v40;
            v40 = (_QWORD *)*v40;
          }
          while (v40);
          goto LABEL_31;
        }
      }
      do
      {
        v41 = (_QWORD *)v23[2];
        v42 = *v41 == (_QWORD)v23;
        v23 = v41;
      }
      while (!v42);
LABEL_31:
      v23 = v41;
      if (v41 == (_QWORD *)v24)
        goto LABEL_28;
    }
  }
LABEL_67:
  v43 = **(_QWORD **)(v6 + 424);
  v44 = *(_QWORD **)(v43 + 48);
  v45 = (_QWORD *)(v43 + 56);
  if (v44 == (_QWORD *)(v43 + 56))
  {
    v49 = 0;
    v48 = 0;
    v47 = 0;
    v46 = 0;
    v59 = *(_QWORD *)(v6 + 24);
    v60 = *v5;
    v61 = v5;
    if (*v5)
      goto LABEL_99;
    goto LABEL_103;
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  do
  {
    v50 = *v5;
    v51 = v44[4];
    if (!*v5)
      goto LABEL_81;
    v52 = v5;
    do
    {
      v53 = v50[4];
      v54 = v53 >= v51;
      if (v53 >= v51)
        v55 = (uint64_t **)v50;
      else
        v55 = (uint64_t **)(v50 + 1);
      if (v54)
        v52 = (uint64_t **)v50;
      v50 = *v55;
    }
    while (*v55);
    if (v52 == v5 || v51 < (unint64_t)v52[4])
LABEL_81:
      v52 = v5;
    v56 = sub_20F29DB88(*(_QWORD ***)(*(_QWORD *)(a1 + 16) + 424), v51, v44[5]);
    if (v44[4] == v66)
    {
      if (v56)
        ++v49;
      else
        ++v46;
    }
    else
    {
      v48 += v56 ^ 1;
      v47 += v56;
      if (v52 != v5)
        ++*((_DWORD *)v52 + 12);
    }
    v57 = (_QWORD *)v44[1];
    if (v57)
    {
      do
      {
        v58 = v57;
        v57 = (_QWORD *)*v57;
      }
      while (v57);
    }
    else
    {
      do
      {
        v58 = (_QWORD *)v44[2];
        v42 = *v58 == (_QWORD)v44;
        v44 = v58;
      }
      while (!v42);
    }
    v44 = v58;
  }
  while (v58 != v45);
  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v60 = *v5;
  v61 = v5;
  if (!*v5)
  {
LABEL_103:
    v63 = (char *)operator new(0x50uLL);
    *((_QWORD *)v63 + 4) = v66;
    *(_OWORD *)(v63 + 40) = 0u;
    *(_OWORD *)(v63 + 56) = 0u;
    *((_QWORD *)v63 + 9) = 0;
    *(_QWORD *)v63 = 0;
    *((_QWORD *)v63 + 1) = 0;
    *((_QWORD *)v63 + 2) = v61;
    *v5 = (uint64_t *)v63;
    v64 = (uint64_t *)**a3;
    v65 = (uint64_t *)v63;
    if (v64)
    {
      *a3 = v64;
      v65 = *v5;
    }
    sub_20E868578(a3[1], v65);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
    goto LABEL_107;
  }
  while (1)
  {
LABEL_99:
    while (1)
    {
      v61 = (uint64_t **)v60;
      v62 = v60[4];
      if (v66 >= v62)
        break;
      v60 = *v61;
      v5 = v61;
      if (!*v61)
        goto LABEL_103;
    }
    if (v62 >= v66)
      break;
    v60 = v61[1];
    if (!v60)
    {
      v5 = v61 + 1;
      goto LABEL_103;
    }
  }
  v63 = (char *)v61;
LABEL_107:
  *((_QWORD *)v63 + 5) = v66;
  *((_DWORD *)v63 + 12) = 0;
  *((_DWORD *)v63 + 13) = v46;
  *((_DWORD *)v63 + 14) = v49;
  *((_DWORD *)v63 + 15) = v48;
  *((_DWORD *)v63 + 16) = v47;
  *((_DWORD *)v63 + 17) = v59;
  v63[72] = 0;
}

void sub_20F29DB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  sub_20E86872C(v19, *(_QWORD **)(v19 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_20F29DB88(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  _BOOL8 v15;
  void *__p[3];
  __int128 v18;

  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  sub_20F23A0A0(*a1, &v18, (char **)__p);
  v5 = a1[5];
  v4 = a1[6];
  if (v4 != v5)
  {
    v6 = ((char *)v4 - (char *)v5) >> 4;
    v7 = *((_DWORD *)__p[0] + 4);
    v8 = *(_QWORD *)__p[0];
    while (1)
    {
      v9 = v6 >> 1;
      v10 = &v5[2 * (v6 >> 1)];
      v11 = *v10;
      v12 = *(_DWORD *)(*v10 + 16);
      v13 = v12 >= v7;
      if (v12 != v7)
        goto LABEL_9;
      if (*(_QWORD *)v11 >= v8)
        break;
LABEL_3:
      v5 = v10 + 2;
      v9 = v6 + ~v9;
LABEL_4:
      v6 = v9;
      if (!v9)
        goto LABEL_12;
    }
    if (*(_QWORD *)v11 != v8)
      goto LABEL_4;
    v13 = *(_DWORD *)(v11 + 8) >= *((_DWORD *)__p[0] + 2);
LABEL_9:
    if (v13)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v5 != v4)
  {
    v14 = *v5;
    if (*(_DWORD *)(*v5 + 16) == *((_DWORD *)__p[0] + 4)
      && *(_QWORD *)v14 == *(_QWORD *)__p[0]
      && *(_DWORD *)(v14 + 8) == *((_DWORD *)__p[0] + 2))
    {
      v4 = v5;
    }
    v15 = *(unsigned __int8 *)(*v4 + 736) != 0;
    goto LABEL_19;
  }
  v15 = *(unsigned __int8 *)(*v4 + 736) != 0;
  if (__p[0])
  {
LABEL_19:
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v15;
}

void sub_20F29DCA0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  char **v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD **v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  _BOOL4 v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  char **v57;
  _QWORD *v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  unint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD **v83;
  uint64_t *v84;
  uint64_t *v85;
  unint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  int v95;
  _QWORD *v96;
  _QWORD *v97;
  void *__p;
  void *v100;
  __int128 v101;

  a3[1] = 0;
  v4 = a3 + 1;
  a3[2] = 0;
  *a3 = (uint64_t *)(a3 + 1);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      while (1)
      {
        v8 = *(uint64_t **)(*(_QWORD *)(v5 + 16) + 160);
        v9 = *v4;
        v10 = (char **)v4;
        v11 = v4;
        if (*v4)
        {
          v12 = *v4;
          while (1)
          {
            while (1)
            {
              v11 = v12;
              v13 = v12[4];
              if ((unint64_t)v8 >= v13)
                break;
              v12 = (uint64_t *)*v11;
              v10 = (char **)v11;
              if (!*v11)
                goto LABEL_11;
            }
            if (v13 >= (unint64_t)v8)
              break;
            v12 = (uint64_t *)v11[1];
            if (!v12)
            {
              v10 = (char **)(v11 + 1);
              goto LABEL_11;
            }
          }
        }
        else
        {
LABEL_11:
          v14 = (char *)operator new(0x50uLL);
          *((_QWORD *)v14 + 4) = v8;
          *(_OWORD *)(v14 + 40) = 0u;
          *(_OWORD *)(v14 + 56) = 0u;
          v14[72] = 0;
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = v11;
          *v10 = v14;
          v15 = (uint64_t *)**a3;
          if (v15)
          {
            *a3 = v15;
            v14 = *v10;
          }
          sub_20E868578(a3[1], (uint64_t *)v14);
          v9 = a3[1];
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
          v8 = *(uint64_t **)(*(_QWORD *)(v5 + 16) + 160);
        }
        v16 = v4;
        v17 = v4;
        if (v9)
          break;
LABEL_21:
        v19 = (char *)operator new(0x50uLL);
        *((_QWORD *)v19 + 4) = v8;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *((_QWORD *)v19 + 9) = 0;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = v17;
        *v16 = (uint64_t *)v19;
        v20 = (uint64_t *)**a3;
        v21 = (uint64_t *)v19;
        if (v20)
        {
          *a3 = v20;
          v21 = *v16;
        }
        sub_20E868578(a3[1], v21);
        a3[2] = (uint64_t *)((char *)a3[2] + 1);
        *((_QWORD *)v19 + 5) = v8;
        v5 += 4472;
        if (v5 == v6)
          goto LABEL_24;
      }
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v9;
          v18 = v9[4];
          if ((unint64_t)v8 >= v18)
            break;
          v9 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_21;
        }
        if (v18 >= (unint64_t)v8)
          break;
        v9 = v17[1];
        if (!v9)
        {
          v16 = v17 + 1;
          goto LABEL_21;
        }
      }
      v17[5] = v8;
      v5 += 4472;
    }
    while (v5 != v6);
LABEL_24:
    v22 = *a1;
    v23 = a1[1];
    if (*a1 != v23)
    {
      while (1)
      {
        v24 = *(_QWORD *)(v22 + 16);
        v25 = *(_QWORD *)(v24 + 160);
        v26 = *v4;
        v27 = v4;
        v28 = v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v28 = (uint64_t **)v26;
              v29 = v26[4];
              if (v25 >= v29)
                break;
              v26 = *v28;
              v27 = v28;
              if (!*v28)
                goto LABEL_35;
            }
            if (v29 >= v25)
              break;
            v26 = v28[1];
            if (!v26)
            {
              v27 = v28 + 1;
              goto LABEL_35;
            }
          }
          v30 = (char *)v28;
          v36 = **(_QWORD **)(v24 + 424);
          v34 = *(_QWORD **)(v36 + 48);
          v35 = (_QWORD *)(v36 + 56);
          if (v34 != (_QWORD *)(v36 + 56))
            goto LABEL_42;
          goto LABEL_27;
        }
LABEL_35:
        v30 = (char *)operator new(0x50uLL);
        *((_QWORD *)v30 + 4) = v25;
        *(_OWORD *)(v30 + 40) = 0u;
        *(_OWORD *)(v30 + 56) = 0u;
        *((_QWORD *)v30 + 9) = 0;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = v28;
        *v27 = (uint64_t *)v30;
        v31 = (uint64_t *)**a3;
        v32 = (uint64_t *)v30;
        if (v31)
        {
          *a3 = v31;
          v32 = *v27;
        }
        sub_20E868578(a3[1], v32);
        a3[2] = (uint64_t *)((char *)a3[2] + 1);
        v24 = *(_QWORD *)(v22 + 16);
        v33 = **(_QWORD **)(v24 + 424);
        v34 = *(_QWORD **)(v33 + 48);
        v35 = (_QWORD *)(v33 + 56);
        if (v34 != (_QWORD *)(v33 + 56))
          break;
LABEL_27:
        *((_DWORD *)v30 + 17) = *(_QWORD *)(v24 + 24);
        v30[72] = 1;
        v22 += 4472;
        if (v22 == v23)
          goto LABEL_76;
      }
      while (1)
      {
LABEL_42:
        v37 = *(_QWORD ***)(*(_QWORD *)(v22 + 16) + 424);
        v101 = *((_OWORD *)v34 + 2);
        sub_20F23A0A0(*v37, &v101, (char **)&__p);
        v39 = v37[5];
        v38 = v37[6];
        if (v38 != v39)
        {
          v40 = ((char *)v38 - (char *)v39) >> 4;
          v41 = *((_DWORD *)__p + 4);
          v42 = *(_QWORD *)__p;
          while (1)
          {
            v43 = v40 >> 1;
            v44 = &v39[2 * (v40 >> 1)];
            v45 = *v44;
            v46 = *(_DWORD *)(*v44 + 16);
            v47 = v46 >= v41;
            if (v46 != v41)
              goto LABEL_50;
            if (*(_QWORD *)v45 >= v42)
              break;
LABEL_44:
            v39 = v44 + 2;
            v43 = v40 + ~v43;
LABEL_45:
            v40 = v43;
            if (!v43)
              goto LABEL_53;
          }
          if (*(_QWORD *)v45 != v42)
            goto LABEL_45;
          v47 = *(_DWORD *)(v45 + 8) >= *((_DWORD *)__p + 2);
LABEL_50:
          if (v47)
            goto LABEL_45;
          goto LABEL_44;
        }
LABEL_53:
        if (v39 == v38)
        {
          v49 = *(unsigned __int8 *)(*v38 + 736) != 0;
          if (!__p)
            goto LABEL_61;
        }
        else
        {
          v48 = *v39;
          if (*(_DWORD *)(*v39 + 16) == *((_DWORD *)__p + 4)
            && *(_QWORD *)v48 == *(_QWORD *)__p
            && *(_DWORD *)(v48 + 8) == *((_DWORD *)__p + 2))
          {
            v38 = v39;
          }
          v49 = *(unsigned __int8 *)(*v38 + 736) != 0;
        }
        v100 = __p;
        operator delete(__p);
LABEL_61:
        if ((*(_BYTE *)(v22 + 304) & 4) != 0)
        {
          if (v49)
          {
            ++*((_DWORD *)v30 + 14);
            ++*((_DWORD *)v30 + 12);
            v50 = (_QWORD *)v34[1];
            if (v50)
              goto LABEL_71;
          }
          else
          {
            v51 = *((_DWORD *)v30 + 13) + 1;
            ++*((_DWORD *)v30 + 12);
            *((_DWORD *)v30 + 13) = v51;
            v50 = (_QWORD *)v34[1];
            if (v50)
            {
              do
              {
LABEL_71:
                v52 = v50;
                v50 = (_QWORD *)*v50;
              }
              while (v50);
              goto LABEL_41;
            }
          }
        }
        else if (v49)
        {
          ++*((_DWORD *)v30 + 16);
          ++*((_DWORD *)v30 + 12);
          v50 = (_QWORD *)v34[1];
          if (v50)
            goto LABEL_71;
        }
        else
        {
          ++*((_DWORD *)v30 + 15);
          ++*((_DWORD *)v30 + 12);
          v50 = (_QWORD *)v34[1];
          if (v50)
            goto LABEL_71;
        }
        do
        {
          v52 = (_QWORD *)v34[2];
          v53 = *v52 == (_QWORD)v34;
          v34 = v52;
        }
        while (!v53);
LABEL_41:
        v34 = v52;
        if (v52 == v35)
        {
          v24 = *(_QWORD *)(v22 + 16);
          goto LABEL_27;
        }
      }
    }
  }
LABEL_76:
  v54 = *(_QWORD **)(a2 + 16);
  if (v54)
  {
    do
    {
      while (1)
      {
        v55 = (uint64_t *)v54[2];
        v56 = *v4;
        v57 = (char **)v4;
        v58 = v4;
        if (*v4)
        {
          v59 = *v4;
          while (1)
          {
            while (1)
            {
              v58 = v59;
              v60 = v59[4];
              if ((unint64_t)v55 >= v60)
                break;
              v59 = (uint64_t *)*v58;
              v57 = (char **)v58;
              if (!*v58)
                goto LABEL_86;
            }
            if (v60 >= (unint64_t)v55)
              break;
            v59 = (uint64_t *)v58[1];
            if (!v59)
            {
              v57 = (char **)(v58 + 1);
              goto LABEL_86;
            }
          }
        }
        else
        {
LABEL_86:
          v61 = (char *)operator new(0x50uLL);
          *((_QWORD *)v61 + 4) = v55;
          *(_OWORD *)(v61 + 40) = 0u;
          *(_OWORD *)(v61 + 56) = 0u;
          v61[72] = 0;
          *(_QWORD *)v61 = 0;
          *((_QWORD *)v61 + 1) = 0;
          *((_QWORD *)v61 + 2) = v58;
          *v57 = v61;
          v62 = (uint64_t *)**a3;
          if (v62)
          {
            *a3 = v62;
            v61 = *v57;
          }
          sub_20E868578(a3[1], (uint64_t *)v61);
          v56 = a3[1];
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
          v55 = (uint64_t *)v54[2];
        }
        v63 = v4;
        v64 = v4;
        if (v56)
          break;
LABEL_96:
        v66 = (char *)operator new(0x50uLL);
        *((_QWORD *)v66 + 4) = v55;
        *(_OWORD *)(v66 + 40) = 0u;
        *(_OWORD *)(v66 + 56) = 0u;
        *((_QWORD *)v66 + 9) = 0;
        *(_QWORD *)v66 = 0;
        *((_QWORD *)v66 + 1) = 0;
        *((_QWORD *)v66 + 2) = v64;
        *v63 = (uint64_t *)v66;
        v67 = (uint64_t *)**a3;
        v68 = (uint64_t *)v66;
        if (v67)
        {
          *a3 = v67;
          v68 = *v63;
        }
        sub_20E868578(a3[1], v68);
        a3[2] = (uint64_t *)((char *)a3[2] + 1);
        *((_QWORD *)v66 + 5) = v55;
        v54 = (_QWORD *)*v54;
        if (!v54)
          goto LABEL_99;
      }
      while (1)
      {
        while (1)
        {
          v64 = (uint64_t **)v56;
          v65 = v56[4];
          if ((unint64_t)v55 >= v65)
            break;
          v56 = *v64;
          v63 = v64;
          if (!*v64)
            goto LABEL_96;
        }
        if (v65 >= (unint64_t)v55)
          break;
        v56 = v64[1];
        if (!v56)
        {
          v63 = v64 + 1;
          goto LABEL_96;
        }
      }
      v64[5] = v55;
      v54 = (_QWORD *)*v54;
    }
    while (v54);
LABEL_99:
    v69 = *(_QWORD **)(a2 + 16);
    if (v69)
    {
      while (1)
      {
        v70 = v69[5];
        v71 = *(_QWORD *)(v70 + 160);
        v72 = *v4;
        v73 = v4;
        v74 = v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v74 = (uint64_t **)v72;
              v75 = v72[4];
              if (v71 >= v75)
                break;
              v72 = *v74;
              v73 = v74;
              if (!*v74)
                goto LABEL_110;
            }
            if (v75 >= v71)
              break;
            v72 = v74[1];
            if (!v72)
            {
              v73 = v74 + 1;
              goto LABEL_110;
            }
          }
          v76 = (char *)v74;
          v82 = **(_QWORD **)(v70 + 424);
          v80 = *(_QWORD **)(v82 + 48);
          v81 = (_QWORD *)(v82 + 56);
          if (v80 != (_QWORD *)(v82 + 56))
            goto LABEL_117;
          goto LABEL_102;
        }
LABEL_110:
        v76 = (char *)operator new(0x50uLL);
        *((_QWORD *)v76 + 4) = v71;
        *(_OWORD *)(v76 + 40) = 0u;
        *(_OWORD *)(v76 + 56) = 0u;
        *((_QWORD *)v76 + 9) = 0;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v76 + 1) = 0;
        *((_QWORD *)v76 + 2) = v74;
        *v73 = (uint64_t *)v76;
        v77 = (uint64_t *)**a3;
        v78 = (uint64_t *)v76;
        if (v77)
        {
          *a3 = v77;
          v78 = *v73;
        }
        sub_20E868578(a3[1], v78);
        a3[2] = (uint64_t *)((char *)a3[2] + 1);
        v70 = v69[5];
        v79 = **(_QWORD **)(v70 + 424);
        v80 = *(_QWORD **)(v79 + 48);
        v81 = (_QWORD *)(v79 + 56);
        if (v80 != (_QWORD *)(v79 + 56))
          break;
LABEL_102:
        *((_DWORD *)v76 + 17) = *(_QWORD *)(v70 + 24);
        v76[72] = 0;
        v69 = (_QWORD *)*v69;
        if (!v69)
          return;
      }
      while (1)
      {
LABEL_117:
        v83 = *(_QWORD ***)(v69[5] + 424);
        v101 = *((_OWORD *)v80 + 2);
        sub_20F23A0A0(*v83, &v101, (char **)&__p);
        v85 = v83[5];
        v84 = v83[6];
        if (v84 != v85)
        {
          v86 = ((char *)v84 - (char *)v85) >> 4;
          v87 = *((_DWORD *)__p + 4);
          v88 = *(_QWORD *)__p;
          while (1)
          {
            v89 = v86 >> 1;
            v90 = &v85[2 * (v86 >> 1)];
            v91 = *v90;
            v92 = *(_DWORD *)(*v90 + 16);
            v93 = v92 >= v87;
            if (v92 != v87)
              goto LABEL_125;
            if (*(_QWORD *)v91 >= v88)
              break;
LABEL_119:
            v85 = v90 + 2;
            v89 = v86 + ~v89;
LABEL_120:
            v86 = v89;
            if (!v89)
              goto LABEL_128;
          }
          if (*(_QWORD *)v91 != v88)
            goto LABEL_120;
          v93 = *(_DWORD *)(v91 + 8) >= *((_DWORD *)__p + 2);
LABEL_125:
          if (v93)
            goto LABEL_120;
          goto LABEL_119;
        }
LABEL_128:
        if (v85 == v84)
        {
          v95 = *(unsigned __int8 *)(*v84 + 736);
          if (!__p)
            goto LABEL_136;
        }
        else
        {
          v94 = *v85;
          if (*(_DWORD *)(*v85 + 16) == *((_DWORD *)__p + 4)
            && *(_QWORD *)v94 == *(_QWORD *)__p
            && *(_DWORD *)(v94 + 8) == *((_DWORD *)__p + 2))
          {
            v84 = v85;
          }
          v95 = *(unsigned __int8 *)(*v84 + 736);
        }
        v100 = __p;
        operator delete(__p);
LABEL_136:
        if (v95)
        {
          ++*((_DWORD *)v76 + 16);
          v96 = (_QWORD *)v80[1];
          if (v96)
            goto LABEL_140;
        }
        else
        {
          ++*((_DWORD *)v76 + 15);
          v96 = (_QWORD *)v80[1];
          if (v96)
          {
            do
            {
LABEL_140:
              v97 = v96;
              v96 = (_QWORD *)*v96;
            }
            while (v96);
            goto LABEL_116;
          }
        }
        do
        {
          v97 = (_QWORD *)v80[2];
          v53 = *v97 == (_QWORD)v80;
          v80 = v97;
        }
        while (!v53);
LABEL_116:
        v80 = v97;
        if (v97 == v81)
        {
          v70 = v69[5];
          goto LABEL_102;
        }
      }
    }
  }
}

void sub_20F29E51C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20F29E534(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20F29E54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20F29E564(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20F29E57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20F29E594(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20F29E5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20F29E5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char ***sub_20F29E5DC(char ***result, unint64_t *a2)
{
  void ***v3;
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  char **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  const double *v64;
  double *v65;
  uint64_t v66;
  const double *v67;
  double *v68;
  unint64_t v69;
  _OWORD *v70;
  char *v71;
  char *v72;
  char *v73;
  char *i;
  __int128 v75;
  void *v76;
  char ***v77;
  float64x2x2_t v78;
  float64x2x2_t v79;

  v3 = (void ***)result;
  v4 = (void **)*result;
  v5 = *a2;
  v7 = **result;
  v6 = (*result)[1];
  v8 = v7;
  if (v6 != v7)
  {
    v9 = (v6 - v7) >> 4;
    v8 = **result;
    do
    {
      v10 = v9 >> 1;
      v11 = (unint64_t *)&v8[16 * (v9 >> 1)];
      v13 = *v11;
      v12 = (char *)(v11 + 2);
      v9 += ~(v9 >> 1);
      if (v13 < v5)
        v8 = v12;
      else
        v9 = v10;
    }
    while (v9);
  }
  if (v8 == v6 || *(_QWORD *)v8 != v5)
  {
    v14 = result[1];
    v15 = *v14;
    v16 = v14[1];
    v17 = v16 - *v14;
    if (v17)
    {
      v18 = v17 >> 4;
      do
      {
        v19 = v18 >> 1;
        v20 = (unint64_t *)&v15[16 * (v18 >> 1)];
        v22 = *v20;
        v21 = (char *)(v20 + 2);
        v18 += ~(v18 >> 1);
        if (v22 < v5)
          v15 = v21;
        else
          v18 = v19;
      }
      while (v18);
    }
    if (v16 == v15 || *(_QWORD *)v15 != v5)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 360, (uint64_t)"iter != input_neighbor_submaps.end()", 36, (uint64_t)"pair_edge.first submap is not within neighbor set", 49, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = *v3;
      v5 = *a2;
      v7 = (char *)**v3;
      v6 = (char *)(*v3)[1];
      v15 = v16;
    }
    v23 = v6 - v7;
    if (v6 == v7)
    {
      v25 = v6;
      result = (char ***)*((_QWORD *)v15 + 1);
    }
    else
    {
      v24 = v23 >> 4;
      v25 = v7;
      do
      {
        v26 = v24 >> 1;
        v27 = &v25[16 * (v24 >> 1)];
        v29 = *(_QWORD *)v27;
        v28 = v27 + 16;
        v24 += ~(v24 >> 1);
        if (v29 < v5)
          v25 = v28;
        else
          v24 = v26;
      }
      while (v24);
      result = (char ***)*((_QWORD *)v15 + 1);
      if (v6 != v25)
      {
        v30 = v25;
        if (*(_QWORD *)v25 == v5)
          goto LABEL_86;
      }
    }
    v31 = v25 - v7;
    v32 = (v25 - v7) >> 4;
    v30 = &v7[(v25 - v7) & 0xFFFFFFFFFFFFFFF0];
    v33 = (unint64_t)v4[2];
    if ((unint64_t)v6 < v33)
    {
      if (v30 == v6)
      {
        *(_QWORD *)v6 = v5;
        *((_QWORD *)v6 + 1) = 0;
        v4[1] = v6 + 16;
        v30 = v6;
        goto LABEL_86;
      }
      v34 = v30 + 16;
      v35 = (unint64_t)(v6 - 16);
      v36 = v6;
      if ((unint64_t)v6 >= 0x10)
      {
        v37 = v6 - 16;
        v36 = v6;
        do
        {
          v38 = *(_OWORD *)v37;
          v37 += 16;
          *(_OWORD *)v36 = v38;
          v36 += 16;
        }
        while (v37 < v6);
      }
      v4[1] = v36;
      if (v6 != v34)
      {
        v39 = v6 - v34;
        v40 = v6 - v34 - 16;
        if (v40 < 0x170)
          goto LABEL_36;
        v52 = v39 & 0xFFFFFFFFFFFFFFF0;
        v53 = (v39 & 0xFFFFFFFFFFFFFFF0) - 16;
        v54 = (char *)(v39 + (v31 & 0xFFFFFFFFFFFFFFF0));
        v55 = (unint64_t)&v54[(_QWORD)v7 - v53 - 16];
        v54 -= 8;
        v56 = &v54[(_QWORD)v7];
        v57 = &v6[-v52];
        v58 = (unint64_t)&v54[(_QWORD)v7 - v53];
        v59 = (unint64_t)(v57 + 8) >= v35 || v58 >= (unint64_t)v6;
        v60 = !v59;
        v61 = v55 >= (unint64_t)(v6 - 8) || v57 >= v56;
        if (!v61 || v60)
        {
LABEL_36:
          v41 = v6;
          v42 = v6 - 16;
        }
        else
        {
          v62 = (v40 >> 4) + 1;
          v63 = 16 * (v62 & 0x1FFFFFFFFFFFFFFCLL);
          v41 = &v6[-v63];
          v42 = (char *)(v35 - v63);
          v64 = (const double *)(v6 - 48);
          v65 = (double *)(v6 - 32);
          v66 = v62 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = vld2q_f64(v64);
            v67 = v64 - 4;
            v79 = vld2q_f64(v67);
            vst2q_f64(v65, v78);
            v68 = v65 - 4;
            vst2q_f64(v68, v79);
            v64 -= 8;
            v65 -= 8;
            v66 -= 4;
          }
          while (v66);
          if (v62 == (v62 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_39;
        }
        v43 = v41 - 8;
        do
        {
          v44 = *((_QWORD *)v42 - 2);
          v42 -= 16;
          *((_QWORD *)v43 - 1) = v44;
          *(_QWORD *)v43 = *((_QWORD *)v42 + 1);
          v43 -= 16;
        }
        while (v42 != v30);
      }
LABEL_39:
      *(_QWORD *)v30 = v5;
      *(_QWORD *)&v7[16 * v32 + 8] = 0;
LABEL_86:
      *((_QWORD *)v30 + 1) = result;
      return result;
    }
    v45 = (v23 >> 4) + 1;
    if (v45 >> 60)
      sub_20E867F44();
    v46 = v33 - (_QWORD)v7;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v77 = result;
    if (v47)
    {
      if (v47 >> 60)
        sub_20E877A38();
      v48 = (char *)operator new(16 * v47);
      v49 = &v48[16 * v32];
      v50 = &v48[16 * v47];
      if (v32 != v47)
        goto LABEL_78;
    }
    else
    {
      v48 = 0;
      v49 = (char *)(16 * v32);
      v50 = 0;
      if (v32)
      {
LABEL_78:
        *(_QWORD *)v49 = v5;
        *((_QWORD *)v49 + 1) = 0;
        v70 = v49 + 16;
        v71 = v49;
        if (v7 != v30)
        {
          v72 = v30;
          v73 = v49;
          do
          {
            v71 = v73 - 16;
            *((_OWORD *)v73 - 1) = *((_OWORD *)v72 - 1);
            v72 -= 16;
            v73 -= 16;
          }
          while (v72 != v7);
        }
        for (i = (char *)v4[1]; v30 != i; ++v70)
        {
          v75 = *(_OWORD *)v30;
          v30 += 16;
          *v70 = v75;
        }
        v76 = *v4;
        *v4 = v71;
        v4[1] = v70;
        v4[2] = v50;
        if (v76)
          operator delete(v76);
        v30 = v49;
        result = v77;
        goto LABEL_86;
      }
    }
    if (v31 < 1)
    {
      if (v25 == v7)
        v69 = 1;
      else
        v69 = v31 >> 3;
      if (v69 >> 60)
        sub_20E877A38();
      v49 = (char *)operator new(16 * v69);
      v50 = &v49[16 * v69];
      if (v48)
      {
        operator delete(v48);
        v50 = &v49[16 * v69];
        v7 = (char *)*v4;
      }
    }
    else
    {
      v51 = v32 + 2;
      if (v32 >= -1)
        v51 = v32 + 1;
      v49 -= 16 * (v51 >> 1);
    }
    goto LABEL_78;
  }
  return result;
}

void sub_20F29EA30(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F29EA48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  float64_t v88;
  float64_t v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  float64x2_t v96;
  float64x2_t v97;
  int64x2_t v98;
  double v99;
  double v101;
  float64x2_t v102;
  int8x16_t v103;
  int64x2_t v106;
  float64x2_t v108;
  float64x2_t v109;
  int8x16_t v110;
  float64x2_t v111;
  unint64_t v114;
  float64x2_t v115;
  double v116;
  float64x2_t v118;
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  int64x2_t v122;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64_t v128;
  int8x16_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  int64x2_t v143;
  int8x16_t v144;
  float64x2_t v145;
  int8x16_t v146;
  _OWORD *v147;
  float64x2_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  float64x2_t v167;
  float64x2_t v168;
  unint64_t v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  int8x16_t v177;
  int8x16_t v178;
  unint64_t v179;
  float64x2_t v180;
  float64x2_t v181;
  unint64_t v182;
  unint64_t v183;
  BOOL v184;
  uint64_t v185;
  int v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  int8x16_t v200;
  float64x2_t v201;
  int8x16_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  int8x16_t v225;
  int64x2_t v226;
  float64x2_t v227;
  int8x16_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  _OWORD *v288;
  int8x16_t v289;
  __int128 v290;
  int64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  float64_t v311;
  BOOL v313;
  uint64_t v314;
  int v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  int8x16_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  int8x16_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  unint64_t v450;
  float64x2_t v451;
  unint64_t v452;
  unint64_t v453;
  BOOL v454;
  float64x2_t v455;
  float64x2_t v456;
  int8x16_t v457;
  float64x2_t v458;
  int64x2_t v459;
  int8x16_t v460;
  int64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  uint64_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  uint64_t v475;
  int v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int8x16_t v521;
  int8x16_t v522;
  int8x16_t v523;
  int8x16_t v524;
  int8x16_t v525;
  int8x16_t v526;
  int8x16_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  int8x16_t v539;
  float64x2_t v540;
  int8x16_t v541;
  int8x16_t v542;
  unint64_t v543;
  int8x16_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  int8x16_t v554;
  BOOL v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t *v736;
  unint64_t *v737;
  unint64_t *v738;
  unint64_t *v739;
  unint64_t v740;
  uint64_t v741;
  unint64_t *v742;
  unint64_t *v743;
  int64_t v744;
  char *v745;
  uint64_t v746;
  char *v747;
  char *v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  uint64_t *v757;
  uint64_t *v758;
  uint64_t v759;
  uint64_t v760;
  char *v761;
  char *v762;
  _QWORD *v763;
  int64_t v764;
  int64_t v765;
  char *v766;
  char *v767;
  _OWORD *v768;
  char *v769;
  __int128 v770;
  int64_t v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  char *v775;
  char *v776;
  const double *v777;
  double *v778;
  uint64_t v779;
  const double *v780;
  double *v781;
  char *v782;
  uint64_t v783;
  unint64_t v784;
  unint64_t v785;
  unint64_t v786;
  char *v787;
  char *v788;
  char *v789;
  unint64_t v790;
  char *v791;
  char *v792;
  char *v793;
  _OWORD *v794;
  char *v795;
  __int128 v796;
  void *v797;
  uint64_t *v798;
  uint64_t *v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  unint64_t *v809;
  uint64_t v810;
  unint64_t v811;
  char *v812;
  __int128 *v813;
  char *v814;
  uint64_t v815;
  uint64_t v816;
  char *v817;
  __int128 *v818;
  char *v819;
  char *v820;
  unint64_t *v821;
  unint64_t *v822;
  unint64_t v823;
  unint64_t v824;
  unint64_t v825;
  char *v826;
  char *v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  char *v834;
  char *v835;
  __int128 v836;
  char *v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  char *v846;
  _QWORD *v847;
  double *v848;
  double *v849;
  uint64_t *v850;
  unint64_t v851;
  unint64_t v852;
  unsigned __int8 v853;
  double *v854;
  unint64_t v855;
  uint64_t v856;
  int64x2_t v857;
  unint64_t v858;
  unint64_t v859;
  const double *v860;
  int8x16_t v861;
  uint64_t v862;
  int8x16_t v863;
  const double *v864;
  unsigned __int128 v865;
  const double *v866;
  unsigned __int128 v867;
  const double *v868;
  unsigned __int128 v869;
  const double *v870;
  unsigned __int128 v871;
  const double *v872;
  unsigned __int128 v873;
  const double *v874;
  unsigned __int128 v875;
  const double *v876;
  unsigned __int128 v877;
  const double *v878;
  int32x4_t v879;
  unsigned __int128 v880;
  const double *v881;
  int16x8_t v882;
  unsigned __int128 v883;
  unsigned __int128 v884;
  int8x16_t v885;
  const double *v886;
  unsigned __int128 v887;
  const double *v888;
  unsigned __int128 v889;
  const double *v890;
  unsigned __int128 v891;
  int8x16_t v892;
  const double *v893;
  int16x8_t v894;
  unsigned __int128 v895;
  const double *v896;
  int16x8_t v897;
  unsigned __int128 v898;
  const double *v899;
  unsigned __int128 v900;
  uint64_t v901;
  int8x8_t v902;
  uint64_t v903;
  uint64_t v904;
  const double *v905;
  unsigned __int128 v906;
  unsigned __int128 v907;
  const double *v908;
  unsigned __int128 v909;
  const double *v910;
  unsigned __int128 v911;
  unint64_t *v912;
  float64x2_t v913;
  __int128 v914;
  __int128 v915;
  __int128 v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v930;
  double v934;
  double v935;
  double cosval;
  double v937;
  __double2 v938;
  int8x16_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64_t v942;
  double v943;
  double v944;
  float64x2_t v945;
  double v946;
  unint64_t v947;
  double v948;
  double v949;
  double v950;
  float64_t v951;
  double v952;
  double v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  unint64_t v968;
  char *v969;
  char *v970;
  char *v971;
  unint64_t v972;
  unint64_t v973;
  unint64_t *v974;
  char *v975;
  unint64_t v976;
  unint64_t v977;
  unint64_t v978;
  unint64_t *v979;
  char *v980;
  unint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int v984;
  int8x16_t v985;
  unint64_t v986;
  int8x16_t v987;
  float64x2_t v988;
  float64_t v989;
  float64_t v990;
  BOOL v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  int8x16_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1019;
  float64x2_t v1020;
  int8x16_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  int64x2_t v1058;
  float64x2_t v1059;
  char *v1061;
  char *v1062;
  char *v1063;
  char *v1064;
  _QWORD *v1065;
  uint64_t v1066;
  uint64_t j;
  _QWORD *v1068;
  void **v1069;
  uint64_t v1070;
  uint64_t *v1071;
  _QWORD *v1072;
  _QWORD *v1073;
  _QWORD *v1074;
  uint64_t *v1075;
  _QWORD *v1076;
  unint64_t v1077;
  unint64_t v1078;
  unint64_t v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  unint64_t v1092;
  float64x2_t v1093;
  unint64_t v1094;
  float64x2_t v1095;
  unint64_t v1096;
  float64x2_t v1097;
  unint64_t v1098;
  float64x2_t v1099;
  unint64_t v1100;
  float64x2_t v1101;
  unint64_t v1102;
  float64x2_t v1103;
  unint64_t v1104;
  float64x2_t v1105;
  unint64_t v1106;
  float64x2_t v1107;
  unint64_t v1108;
  float64x2_t v1109;
  unint64_t v1110;
  float64x2_t v1111;
  unint64_t v1112;
  float64x2_t v1113;
  unint64_t v1114;
  float64x2_t v1115;
  unint64_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  double v1129;
  float64x2_t v1130;
  float64_t v1131;
  double v1132;
  float64x2_t v1133;
  double v1134;
  float64x2_t v1135;
  double v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  double v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  double v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  double v1145;
  float64x2_t v1146;
  double v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  double v1150;
  float64x2_t v1151;
  double v1152;
  float64x2_t v1153;
  double v1154;
  float64x2_t v1155;
  double v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  double v1160;
  float64x2_t v1161;
  double v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  double v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  double v1168;
  float64x2_t v1169;
  double v1170;
  float64x2_t v1171;
  double v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  int8x16_t v1175;
  float64x2_t v1176;
  int8x16_t v1177;
  float64x2_t v1178;
  int8x16_t v1179;
  float64x2_t v1180;
  int8x16_t v1181;
  float64x2_t v1182;
  int8x16_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  double v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  int8x16_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  double v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  double v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  int8x16_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  int8x16_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  int8x16_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  int8x16_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  int8x16_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  int8x16_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  int8x16_t v1336;
  int8x16_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  int8x16_t v1340;
  int8x16_t v1341;
  float64x2_t v1342;
  double v1343;
  int8x16_t v1344;
  int8x16_t v1345;
  float64x2_t v1346;
  int8x16_t v1347;
  int8x16_t v1348;
  int8x16_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  int8x16_t v1352;
  int8x16_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  int8x16_t v1356;
  int8x16_t v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  int8x16_t v1360;
  int8x16_t v1361;
  float64x2_t v1362;
  double v1363;
  int8x16_t v1364;
  int8x16_t v1365;
  float64x2_t v1366;
  float64x2_t v1367;
  int8x16_t v1368;
  int8x16_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  int8x16_t v1372;
  int8x16_t v1373;
  float64x2_t v1374;
  float64x2_t v1375;
  int8x16_t v1376;
  int8x16_t v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  float64x2_t v1380;
  double v1381;
  float64x2_t v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  double v1385;
  float64x2_t v1386;
  double v1387;
  float64x2_t v1388;
  double v1389;
  double v1390;
  double v1391;
  double v1392;
  double v1393;
  double v1394;
  double v1395;
  float64x2_t v1396;
  double v1397;
  double v1398;
  double v1399;
  float64x2_t v1400;
  double v1401;
  double v1402;
  float64x2_t v1403;
  double v1404;
  double v1405;
  float64x2_t v1406;
  double v1407;
  double v1408;
  float64x2_t v1409;
  double v1410;
  double v1411;
  float64x2_t v1412;
  double v1413;
  double v1414;
  float64x2_t v1415;
  double v1416;
  double v1417;
  float64x2_t v1418;
  double v1419;
  double v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  double v1425;
  float64_t v1426;
  float64x2_t v1427;
  double v1428;
  double v1429;
  float64x2_t v1430;
  double v1431;
  double v1432;
  float64x2_t v1433;
  float64x2_t v1434;
  float64x2_t v1435;
  float64x2_t v1436;
  double v1437;
  double v1438;
  float64x2_t v1439;
  double v1440;
  double v1441;
  float64x2_t v1442;
  double v1443;
  double v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  double v1447;
  double v1448;
  float64x2_t v1449;
  float64x2_t v1450;
  unint64_t v1451;
  double v1452;
  double v1453;
  unint64_t v1454;
  float64x2_t v1455;
  double v1456;
  unint64_t v1457;
  float64x2_t v1458;
  double v1459;
  double v1460;
  int8x16_t v1461;
  float64x2_t v1462;
  double v1463;
  double v1464;
  int8x16_t v1465;
  float64x2_t v1466;
  double v1467;
  float64_t v1468;
  float64x2_t v1469;
  float64x2_t v1470;
  float64x2_t v1471;
  double v1472;
  double v1473;
  float64x2_t v1474;
  float64x2_t v1475;
  float64x2_t v1476;
  float64x2_t __dst;
  float64x2_t __dstb;
  void *__dsta[2];
  void *__dstc[2];
  float64x2_t v1481;
  float64x2_t v1482;
  float64x2_t v1483;
  float64x2_t v1484;
  double v1485;
  int64x2_t v1486;
  float64x2_t v1487;
  float64x2_t v1488;
  float64x2_t v1489;
  float64x2_t v1490;
  float64x2_t v1491;
  float64x2_t v1492;
  float64x2_t v1493;
  float64x2_t v1494;
  float64x2_t v1495;
  float64x2_t v1496;
  float64x2_t v1497;
  float64x2_t v1498;
  float64x2_t v1499;
  int8x16_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  float64x2_t v1504;
  int8x16_t v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  double v1508;
  int8x16_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  float64_t v1516;
  float64x2_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  unint64_t *v1523;
  float64x2_t v1524;
  int64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  double v1528;
  int64x2_t v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  double v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  double v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  double v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  double v1546;
  double v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  double v1552;
  double v1553;
  float64x2_t v1554;
  float64x2_t v1555;
  float64x2_t v1556;
  float64x2_t v1557;
  double v1558;
  double v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  int8x16_t v1567;
  double v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  int8x16_t v1574;
  unint64_t v1575;
  double v1576;
  float64x2_t v1577;
  float64x2_t v1578;
  float64x2_t v1579;
  float64x2_t v1580;
  float64x2_t v1581;
  float64x2_t v1582;
  double v1583;
  float64x2_t v1584;
  float64_t v1585;
  float64x2_t v1586;
  int8x16_t v1587;
  float64x2_t v1588;
  float64x2_t v1589;
  float64_t v1590;
  float64x2_t v1591;
  float64x2_t v1592;
  float64_t v1593;
  uint64_t v1594;
  void *v1595[2];
  float64x2_t v1596;
  double v1597;
  void *v1598[2];
  float64x2_t v1599;
  float64x2_t v1600;
  float64x2_t v1601;
  float64x2_t v1602;
  uint64_t *v1603;
  void *v1604[2];
  float64x2_t v1605;
  float64x2_t v1606;
  float64x2_t v1607;
  uint64_t v1608;
  _QWORD *v1609;
  uint64_t v1610;
  uint64_t *v1611;
  float64x2_t v1612;
  unint64_t v1613;
  float64x2_t v1614;
  unint64_t v1615;
  uint64_t *v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  _BYTE v1620[464];
  int v1621;
  char v1622;
  void *v1623;
  unint64_t *v1624;
  unint64_t v1625;
  char v1626;
  int8x16_t v1627;
  _BYTE v1628[32];
  float64x2_t v1629;
  _BYTE v1630[32];
  float64x2_t v1631;
  _BYTE v1632[32];
  float64x2_t v1633;
  _BYTE v1634[309];
  _QWORD **v1635;
  _QWORD *v1636[2];
  void *v1637[2];
  float64x2_t v1638;
  float64x2_t v1639;
  float64x2_t v1640;
  float64x2_t v1641;
  float64x2_t v1642;
  float64x2_t v1643;
  float64x2_t v1644;
  float64x2_t v1645;
  float64x2_t v1646;
  float64x2_t v1647;
  float64x2_t v1648;
  float64x2_t v1649;
  float64x2_t v1650;
  float64x2_t v1651;
  float64x2_t v1652;
  float64x2_t v1653;
  float64x2_t v1654;
  void *__p[2];
  _BYTE v1656[32];
  int8x16_t v1657;
  _BYTE v1658[32];
  int8x16_t v1659;
  _BYTE v1660[32];
  int64x2_t v1661;
  _BYTE v1662[32];
  int64x2_t v1663;
  _BYTE v1664[32];
  int64x2_t v1665;
  _BYTE v1666[32];
  _BYTE v1667[24];
  _BYTE *v1668;
  _BYTE v1669[32];
  uint64_t v1670;
  float64x2x2_t v1671;
  float64x2x2_t v1672;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v1670 = *MEMORY[0x24BDAC8D0];
  v1626 = v5;
  if (!v1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 468, (uint64_t)"removed_submap", 14, (uint64_t)"removed_submap is invalid", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1624 = 0;
  v1623 = 0;
  v1625 = 0;
  v6 = operator new(0x20uLL);
  *v6 = &off_24C9FC778;
  v6[1] = &v1623;
  v6[2] = &v1626;
  v6[3] = v3;
  v1668 = v6;
  if (v4)
  {
    v8 = v4 + 16;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 226, (uint64_t)"removed_submap", 14, (uint64_t)"removed_submap is invalid", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = 16;
  }
  v1610 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 208);
  v9 = *(_QWORD *)(*(_QWORD *)v8 + 216);
  v1636[1] = 0;
  v1636[0] = 0;
  v1635 = v1636;
  v11 = v9 - v10;
  v1609 = v3;
  v1608 = v4;
  if (!v11)
  {
    sub_20E9BCAA8(0);
    v732 = v1668;
    if (v1668 != v1667)
      goto LABEL_174;
    goto LABEL_177;
  }
  v12 = 0;
  v13 = v11 / 472;
  if (v13 <= 1)
    v13 = 1;
  v1615 = v13;
  __asm { FMOV            V0.2D, #1.0 }
  v1593 = *((double *)&_Q0 + 1);
  while (2)
  {
    for (i = 0; i != v1615; ++i)
    {
      v20 = *(_QWORD *)(v1610 + 208);
      v21 = (uint64_t *)(v20 + 472 * v12);
      v22 = (uint64_t *)(v20 + 472 * i);
      v24 = (unint64_t *)(v21 + 3);
      v23 = v21[3];
      v25 = v22[3];
      if (v23 >= v25)
        continue;
      v27 = (char *)*v1609;
      v26 = (char *)v1609[1];
      v28 = (char *)*v1609;
      if (v26 != (char *)*v1609)
      {
        v29 = (uint64_t)&v26[-*v1609] >> 4;
        v28 = (char *)*v1609;
        do
        {
          v30 = v29 >> 1;
          v31 = (unint64_t *)&v28[16 * (v29 >> 1)];
          v33 = *v31;
          v32 = (char *)(v31 + 2);
          v29 += ~(v29 >> 1);
          if (v33 < v23)
            v28 = v32;
          else
            v29 = v30;
        }
        while (v29);
      }
      if (v26 == v28 || *(_QWORD *)v28 != v23)
        v28 = (char *)v1609[1];
      if (v26 != v27)
      {
        v34 = (v26 - v27) >> 4;
        do
        {
          v35 = v34 >> 1;
          v36 = &v27[16 * (v34 >> 1)];
          v38 = *(_QWORD *)v36;
          v37 = v36 + 16;
          v34 += ~(v34 >> 1);
          if (v38 < v25)
            v27 = v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      if (v26 == v27 || v28 == v26 || *(_QWORD *)v27 != v25)
        continue;
      if (!*((_QWORD *)v28 + 1)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 264, (uint64_t)"neighbor_submap_i->second", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*((_QWORD *)v27 + 1)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 265, (uint64_t)"neighbor_submap_j->second", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v39 = *(_QWORD **)(*(_QWORD *)(v1608 + 16) + 424);
      v40 = (uint64_t *)(*v39 + 56);
      v41 = *v40;
      if (!*v40)
        continue;
      v42 = *v21;
      v43 = *((_DWORD *)v21 + 2);
      v44 = *v39 + 56;
      v45 = v40;
      v46 = *v40;
      do
      {
        v47 = *(_QWORD *)(v46 + 32);
        if (v47 < v42)
        {
          v46 += 8;
        }
        else if (v47 == v42)
        {
          if (*(_DWORD *)(v46 + 40) < v43)
            v46 += 8;
          else
            v45 = (uint64_t *)v46;
        }
        else
        {
          v45 = (uint64_t *)v46;
        }
        v46 = *(_QWORD *)v46;
      }
      while (v46);
      if (v45 == v40 || (v48 = v45[4], v42 < v48) || v42 == v48 && *((_DWORD *)v45 + 10) > v43)
        v49 = 0;
      else
        v49 = v45[6];
      v50 = *v22;
      v51 = *((_DWORD *)v22 + 2);
      do
      {
        v52 = *(_QWORD *)(v41 + 32);
        if (v52 < v50)
        {
          v41 += 8;
        }
        else if (v52 == v50)
        {
          if (*(_DWORD *)(v41 + 40) < v51)
            v41 += 8;
          else
            v44 = v41;
        }
        else
        {
          v44 = v41;
        }
        v41 = *(_QWORD *)v41;
      }
      while (v41);
      if ((uint64_t *)v44 == v40)
        continue;
      v53 = *(_QWORD *)(v44 + 32);
      if (v50 < v53 || v50 == v53 && *(_DWORD *)(v44 + 40) > v51)
        continue;
      if (!v49)
        continue;
      v1594 = *(_QWORD *)(v44 + 48);
      if (!v1594)
        continue;
      v54 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)v28 + 1) + 16) + 424);
      v57 = *(uint64_t **)(v54 + 56);
      v55 = (uint64_t *)(v54 + 56);
      v56 = v57;
      if (!v57)
        goto LABEL_80;
      v58 = *v24;
      v59 = *(_DWORD *)(v20 + 472 * v12 + 32);
      v60 = v55;
      do
      {
        v61 = v56[4];
        if (v61 < v58)
        {
          ++v56;
        }
        else if (v61 == v58)
        {
          if (*((_DWORD *)v56 + 10) < v59)
            ++v56;
          else
            v60 = v56;
        }
        else
        {
          v60 = v56;
        }
        v56 = (uint64_t *)*v56;
      }
      while (v56);
      if (v60 == v55 || (v62 = v60[4], v58 < v62) || v58 == v62 && *((_DWORD *)v60 + 10) > v59)
LABEL_80:
        v63 = 0;
      else
        v63 = v60[6];
      v64 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v27 + 1) + 16) + 424);
      v65 = (_QWORD *)*v64;
      v66 = (uint64_t *)(*v64 + 56);
      v67 = *v66;
      if (!*v66)
        continue;
      v68 = v22[3];
      v69 = *(_DWORD *)(v20 + 472 * i + 32);
      v70 = *v64 + 56;
      do
      {
        v71 = *(_QWORD *)(v67 + 32);
        if (v71 < v68)
        {
          v67 += 8;
        }
        else if (v71 == v68)
        {
          if (*(_DWORD *)(v67 + 40) < v69)
            v67 += 8;
          else
            v70 = v67;
        }
        else
        {
          v70 = v67;
        }
        v67 = *(_QWORD *)v67;
      }
      while (v67);
      if ((uint64_t *)v70 == v66)
        continue;
      v72 = *(_QWORD *)(v70 + 32);
      if (v68 < v72 || v68 == v72 && *(_DWORD *)(v70 + 40) > v69)
        continue;
      if (!v63)
        continue;
      v73 = *(_QWORD *)(v70 + 48);
      if (!v73)
        continue;
      if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)v28 + 1) + 16) + 424) + 64))
      {
        if (!v65[8])
          goto LABEL_105;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 302, (uint64_t)"!neighbor_submap_i->second->data()->viodatabase()->state_set()->empty()", 71, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_406;
        }
        v65 = **(_QWORD ***)(*(_QWORD *)(*((_QWORD *)v27 + 1) + 16) + 424);
        if (!v65[8])
        {
LABEL_105:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 303, (uint64_t)"!neighbor_submap_j->second->data()->viodatabase()->state_set()->empty()", 71, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
LABEL_406:
            abort();
          }
          v65 = **(_QWORD ***)(*(_QWORD *)(*((_QWORD *)v27 + 1) + 16) + 424);
        }
      }
      v74 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)v28 + 1) + 16) + 424);
      v77 = *(uint64_t **)(v74 + 56);
      v75 = (uint64_t *)(v74 + 56);
      v76 = v77;
      v78 = *(v75 - 1);
      v79 = *(_QWORD *)(v78 + 32);
      v80 = *(_QWORD *)(v78 + 40);
      if (!v77)
        goto LABEL_119;
      v81 = v75;
      do
      {
        v82 = v76[4];
        if (v82 < v79)
        {
          ++v76;
        }
        else if (v82 == v79)
        {
          if (*((_DWORD *)v76 + 10) < v80)
            ++v76;
          else
            v81 = v76;
        }
        else
        {
          v81 = v76;
        }
        v76 = (uint64_t *)*v76;
      }
      while (v76);
      if (v81 == v75 || (v83 = v81[4], v79 < v83) || v79 == v83 && *((_DWORD *)v81 + 10) > v80)
      {
LABEL_119:
        v84 = 0;
        v85 = v65 + 7;
        v86 = (uint64_t *)v65[7];
        if (!v86)
          continue;
      }
      else
      {
        v84 = v81[6];
        v85 = v65 + 7;
        v86 = (uint64_t *)v65[7];
        if (!v86)
          continue;
      }
      v87 = v65[6];
      v88 = *(double *)(v87 + 32);
      v89 = *(double *)(v87 + 40);
      v90 = v85;
      do
      {
        v91 = v86[4];
        if (v91 < *(_QWORD *)&v88)
        {
          ++v86;
        }
        else if (v91 == *(_QWORD *)&v88)
        {
          if (*((_DWORD *)v86 + 10) < LODWORD(v89))
            ++v86;
          else
            v90 = v86;
        }
        else
        {
          v90 = v86;
        }
        v86 = (uint64_t *)*v86;
      }
      while (v86);
      if (v90 != v85)
      {
        v92 = v90[4];
        if (*(_QWORD *)&v88 >= v92 && (*(_QWORD *)&v88 != v92 || *((_DWORD *)v90 + 10) <= LODWORD(v89)))
        {
          if (v84)
          {
            v93 = v90[6];
            if (v93)
            {
              v94 = 0;
              v95 = 0;
              v96.f64[0] = *(float64_t *)(v63 + 16);
              v96.f64[1] = *(float64_t *)(v63 + 40);
              v97.f64[0] = *(float64_t *)(v93 + 16);
              v97.f64[1] = *(float64_t *)(v93 + 40);
              v98 = *(int64x2_t *)(v63 + 24);
              v99 = *(double *)(v63 + 64);
              _Q4 = *(int64x2_t *)(v63 + 48);
              v101 = *(double *)(v63 + 88);
              v1375 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v63, v98);
              v102 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v63, v98);
              v103 = vextq_s8((int8x16_t)v102, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
              v1504 = v96;
              v1495 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1375, *(double *)(v63 + 72)), v102, *(float64x2_t *)(v63 + 72), 1), v96, v101);
              _D7 = *(_QWORD *)(v63 + 80);
              __asm { FMLA            D16, D7, V4.D[1] }
              v1384 = (float64x2_t)_Q4.u64[0];
              *(_QWORD *)&v102.f64[1] = v103.i64[0];
              v1388 = v102;
              v1386 = (float64x2_t)v103.u64[1];
              v1490 = (float64x2_t)*(unint64_t *)&v99;
              v1499 = (float64x2_t)COERCE_UNSIGNED_INT64(_D16 + v99 * v101);
              v1390 = *(double *)(v84 + 64);
              v106 = *(int64x2_t *)(v93 + 24);
              _Q16 = *(int64x2_t *)(v93 + 48);
              v108 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v93, v106);
              v109 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v93, v106);
              v110 = vextq_s8((int8x16_t)v109, (int8x16_t)vdupq_laneq_s64(_Q16, 1), 8uLL);
              v7.f64[0] = *(float64_t *)(v93 + 88);
              v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v108, *(double *)(v93 + 72)), v109, *(float64x2_t *)(v93 + 72), 1), v97, v7.f64[0]);
              _D19 = *(_QWORD *)(v93 + 80);
              __asm { FMLA            D20, D19, V16.D[1] }
              v7.f64[0] = _D20 + *(double *)(v93 + 64) * v7.f64[0];
              v114 = *(_QWORD *)(v93 + 48);
              *(_QWORD *)&v109.f64[1] = v110.i64[0];
              v110.i64[0] = *(_QWORD *)(v93 + 64);
              v115.f64[1] = v1593;
              *(_QWORD *)&v115.f64[0] = *(_OWORD *)&vnegq_f64(v7);
              v116 = *(double *)(v73 + 64);
              v118 = *(float64x2_t *)(v73 + 32);
              _Q20 = *(float64x2_t *)(v73 + 48);
              v119 = *(float64x2_t *)(v73 + 16);
              v120 = *(double *)(v73 + 88);
              v121 = *(float64x2_t *)(v73 + 72);
              v1323 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v108, *(double *)v73), v109, *(float64x2_t *)v73, 1), v97, v119.f64[0]), (float64x2_t)0, v111);
              v1320 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v114, *(double *)v73), (float64x2_t)v110.u64[1], *(float64x2_t *)v73, 1), (float64x2_t)v110.u64[0], v119.f64[0]), (float64x2_t)0, v115);
              v1317 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v108, v119, 1), v109, v118.f64[0]), v97, v118, 1), (float64x2_t)0, v111);
              v1314 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v114, v119, 1), (float64x2_t)v110.u64[1], v118.f64[0]), (float64x2_t)v110.u64[0], v118, 1), (float64x2_t)0, v115);
              v1379 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v108, _Q20.f64[0]), v109, _Q20, 1), v97, v116), (float64x2_t)0, v111);
              v1332 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v114, _Q20.f64[0]), (float64x2_t)v110.u64[1], _Q20, 1), (float64x2_t)v110.u64[0], v116), (float64x2_t)0, v115);
              v1329 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v108, v121.f64[0]), v109, v121, 1), v97, v120), v111);
              v1326 = vaddq_f64(v115, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v114, v121.f64[0]), (float64x2_t)v110.u64[1], v121, 1), (float64x2_t)v110.u64[0], v120));
              v97.f64[0] = *(float64_t *)(v1594 + 16);
              v122 = *(int64x2_t *)(v1594 + 24);
              _Q17 = *(int64x2_t *)(v1594 + 48);
              v124 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1594, v122);
              v125 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1594, v122);
              v97.f64[1] = *(float64_t *)(v1594 + 40);
              _Q16.i64[0] = *(_QWORD *)(v1594 + 88);
              v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v124, *(double *)(v1594 + 72)), v125, *(float64x2_t *)(v1594 + 72), 1), v97, *(double *)_Q16.i64);
              _D19 = *(_QWORD *)(v1594 + 80);
              __asm { FMLA            D20, D19, V17.D[1] }
              *(_QWORD *)&v128 = *(_OWORD *)&vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_Q20.f64[0]+ *(double *)(v1594 + 64) * *(double *)_Q16.i64));
              _Q16.i64[0] = *(_QWORD *)(v1594 + 48);
              v129 = vextq_s8((int8x16_t)v125, (int8x16_t)vdupq_laneq_s64(_Q17, 1), 8uLL);
              *(_QWORD *)&v125.f64[1] = v129.i64[0];
              v119.f64[0] = *(float64_t *)(v1594 + 64);
              v115.f64[0] = v128;
              v130 = *(float64x2_t *)(v49 + 32);
              v131 = *(float64x2_t *)(v49 + 48);
              v132 = *(float64x2_t *)(v49 + 16);
              v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v124, *(double *)v49), v125, *(float64x2_t *)v49, 1), v97, v132.f64[0]);
              v134 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], *(double *)v49), (float64x2_t)v129.u64[1], *(float64x2_t *)v49, 1), (float64x2_t)*(unint64_t *)&v119.f64[0], v132.f64[0]);
              v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v124, v132, 1), v125, v130.f64[0]), v97, v130, 1);
              v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)_Q16.u64[0], v132, 1), (float64x2_t)v129.u64[1], v130.f64[0]), (float64x2_t)*(unint64_t *)&v119.f64[0], v130, 1);
              v137 = vmlaq_laneq_f64(vmulq_n_f64(v124, v131.f64[0]), v125, v131, 1);
              v138 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], v131.f64[0]), (float64x2_t)v129.u64[1], v131, 1);
              v131.f64[0] = *(float64_t *)(v49 + 64);
              v139 = vmlaq_n_f64(v137, v97, v131.f64[0]);
              v140 = vmlaq_n_f64(v138, (float64x2_t)*(unint64_t *)&v119.f64[0], v131.f64[0]);
              v141 = *(float64x2_t *)(v49 + 72);
              v142 = vmlaq_laneq_f64(vmulq_n_f64(v124, v141.f64[0]), v125, v141, 1);
              v125.f64[0] = *(float64_t *)(v49 + 88);
              v143 = (int64x2_t)vmlsq_f64(v133, (float64x2_t)0, v126);
              v180 = vmlsq_f64(v135, (float64x2_t)0, v126);
              v144 = (int8x16_t)vmlsq_f64(v139, (float64x2_t)0, v126);
              v1514 = vsubq_f64(vmlaq_n_f64(v142, v97, v125.f64[0]), v126);
              *(_OWORD *)v1595 = *(_OWORD *)(v84 + 48);
              v1574 = *(int8x16_t *)(v84 + 32);
              v145 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], v141.f64[0]), (float64x2_t)v129.u64[1], v141, 1);
              v146 = *(int8x16_t *)(v84 + 16);
              v1567 = *(int8x16_t *)v84;
              v147 = (_OWORD *)(v20 + 472 * v12);
              v148 = *((float64x2_t *)v147 + 5);
              v1371 = *((float64x2_t *)v147 + 4);
              v1367 = *((float64x2_t *)v147 + 3);
              v1537 = vaddq_f64(v115, vmlaq_n_f64(v145, (float64x2_t)*(unint64_t *)&v119.f64[0], v125.f64[0]));
              v1335 = *((float64x2_t *)v147 + 6);
              v1355 = *((float64x2_t *)v147 + 8);
              v1351 = *((float64x2_t *)v147 + 7);
              v149 = *((int8x16_t *)v147 + 11);
              v1359 = *((float64x2_t *)v147 + 10);
              v1339 = *((float64x2_t *)v147 + 9);
              v150 = *((int8x16_t *)v147 + 12);
              v151 = *((int8x16_t *)v147 + 13);
              v152 = *((int8x16_t *)v147 + 15);
              v153 = *((int8x16_t *)v147 + 16);
              v154 = *((int8x16_t *)v147 + 14);
              v156 = *((int8x16_t *)v147 + 17);
              v155 = *((int8x16_t *)v147 + 18);
              v157 = *((int8x16_t *)v147 + 21);
              v158 = *((int8x16_t *)v147 + 22);
              v160 = *((int8x16_t *)v147 + 19);
              v159 = *((int8x16_t *)v147 + 20);
              v162 = *((int8x16_t *)v147 + 23);
              v161 = *((int8x16_t *)v147 + 24);
              v164 = *((int8x16_t *)v147 + 27);
              v163 = *((int8x16_t *)v147 + 28);
              v178 = *((int8x16_t *)v147 + 25);
              v165 = *((int8x16_t *)v147 + 26);
              *(_QWORD *)v1630 = v144.i64[1];
              *(_QWORD *)v1628 = v144.i64[0];
              v1627 = (int8x16_t)vzip1q_s64(v143, (int64x2_t)v180);
              v1310 = *(double *)(v84 + 88);
              v166 = *(int8x16_t *)(v84 + 72);
              v1519 = vmlaq_f64(v140, (float64x2_t)0, v115);
              *(float64_t *)v1632 = v1519.f64[0];
              v1434 = (float64x2_t)v143;
              v1422 = v180;
              v1481 = vmlaq_f64(v134, (float64x2_t)0, v115);
              __dst = vmlaq_f64(v136, (float64x2_t)0, v115);
              v167 = (float64x2_t)vzip1q_s64((int64x2_t)v1481, (int64x2_t)__dst);
              v1629 = (float64x2_t)vzip2q_s64(v143, (int64x2_t)v180);
              v1631 = v167;
              v168 = v1375;
              v169 = vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).u64[0];
              *(_QWORD *)&v170 = vextq_s8(*(int8x16_t *)v1595, *(int8x16_t *)v1595, 8uLL).u64[0];
              *(_QWORD *)&v171 = vextq_s8(v1574, v1574, 8uLL).u64[0];
              v1363 = *(double *)v146.i64;
              *(_QWORD *)&v172 = vextq_s8(v146, v146, 8uLL).u64[0];
              *(_QWORD *)&v173 = vextq_s8(v1567, v1567, 8uLL).u64[0];
              *(_QWORD *)&v174 = vextq_s8(v166, v166, 8uLL).u64[0];
              *(_QWORD *)&v1485 = vextq_s8(v151, v151, 8uLL).u64[0];
              v1452 = *(double *)v150.i64;
              *(_QWORD *)&v1428 = vextq_s8(v150, v150, 8uLL).u64[0];
              v1343 = *(double *)v149.i64;
              *(_QWORD *)&v175 = vextq_s8(v149, v149, 8uLL).u64[0];
              v1552 = *(double *)v153.i64;
              *(_QWORD *)&v1472 = vextq_s8(v153, v153, 8uLL).u64[0];
              v1447 = *(double *)v152.i64;
              *(_QWORD *)&v1425 = vextq_s8(v152, v152, 8uLL).u64[0];
              v1392 = *(double *)v154.i64;
              *(_QWORD *)&v1381 = vextq_s8(v154, v154, 8uLL).u64[0];
              v1533 = *(double *)v160.i64;
              *(_QWORD *)&v1467 = vextq_s8(v160, v160, 8uLL).u64[0];
              v1443 = *(double *)v155.i64;
              *(_QWORD *)&v1419 = vextq_s8(v155, v155, 8uLL).u64[0];
              v1394 = *(double *)v156.i64;
              *(_QWORD *)&v176 = vextq_s8(v156, v156, 8uLL).u64[0];
              v1546 = *(double *)v158.i64;
              *(_QWORD *)&v1463 = vextq_s8(v158, v158, 8uLL).u64[0];
              v1440 = *(double *)v157.i64;
              *(_QWORD *)&v1416 = vextq_s8(v157, v157, 8uLL).u64[0];
              *(_QWORD *)&v1397 = vextq_s8(v159, v159, 8uLL).u64[0];
              v1528 = *(double *)v178.i64;
              *(_QWORD *)&v1459 = vextq_s8(v178, v178, 8uLL).u64[0];
              v1437 = *(double *)v161.i64;
              *(_QWORD *)&v1413 = vextq_s8(v161, v161, 8uLL).u64[0];
              v1404 = *(double *)v162.i64;
              *(_QWORD *)&v1401 = vextq_s8(v162, v162, 8uLL).u64[0];
              v1558 = *(double *)v163.i64;
              *(_QWORD *)&v1508 = vextq_s8(v163, v163, 8uLL).u64[0];
              *(_QWORD *)&v1431 = vextq_s8(v164, v164, 8uLL).u64[0];
              v1410 = *(double *)v165.i64;
              v178.i64[0] = vextq_s8(v165, v165, 8uLL).u64[0];
              v177 = (int8x16_t)v1629;
              v1407 = *(double *)v178.i64;
              v178.i64[0] = v1627.i64[0];
              v179 = vextq_s8(v1627, v1627, 8uLL).u64[0];
              *(_QWORD *)&v180.f64[0] = vextq_s8(v177, v177, 8uLL).u64[0];
              v181 = (float64x2_t)v144;
              v182 = vextq_s8(v144, v144, 8uLL).u64[0];
              v183 = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
              do
              {
                v1633.f64[v94] = 0.0;
                v184 = v95 < 2;
                if (v95 < 2)
                  ++v95;
                else
                  v95 = 0;
                if (v184)
                  ++v94;
                else
                  v94 += 4;
              }
              while (v94 != 18);
              v185 = 0;
              v186 = 0;
              *(_QWORD *)&v168.f64[1] = v169;
              v178.i64[1] = v179;
              v187 = (float64x2_t)v178;
              v1347 = v178;
              *(_QWORD *)&v167.f64[1] = v183;
              v188 = vmlaq_n_f64(vmulq_n_f64(v1384, *(double *)v1595), v1386, v170);
              v189 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, *(double *)v1567.i64), v1388, v173), v1504, v1363), (float64x2_t)0, v1495);
              v190 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, v172), v1388, *(double *)v1574.i64), v1504, v171), (float64x2_t)0, v1495);
              v191 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, *(double *)v1595), v1388, v170), v1504, v1390), (float64x2_t)0, v1495);
              v192 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, *(double *)v166.i64), v1388, v174), v1504, v1310), v1495);
              v193 = vmlaq_laneq_f64(vmulq_n_f64(v1367, v192.f64[0]), v148, v192, 1);
              v194 = vmlaq_laneq_f64(vmulq_n_f64(v1371, v192.f64[0]), v1335, v192, 1);
              v195.f64[1] = v1593;
              *(_QWORD *)&v195.f64[0] = *(_OWORD *)&vnegq_f64(v1499);
              v196 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1384, *(double *)v1567.i64), v1386, v173), v1490, v1363), (float64x2_t)0, v195);
              v197 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1384, v172), v1386, *(double *)v1574.i64), v1490, v171), (float64x2_t)0, v195);
              v198 = vmlaq_f64(vmlaq_n_f64(v188, v1490, v1390), (float64x2_t)0, v195);
              v199 = vaddq_f64(v195, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1384, *(double *)v166.i64), v1386, v174), v1490, v1310));
              v1311 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1367, v189.f64[0]), v148, v189, 1), v1351, v196.f64[0]), v1339, v196, 1);
              v1305 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1371, v189.f64[0]), v1335, v189, 1), v1355, v196.f64[0]), v1359, v196, 1);
              v1294 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1367, v190.f64[0]), v148, v190, 1), v1351, v197.f64[0]), v1339, v197, 1);
              v1292 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1371, v190.f64[0]), v1335, v190, 1), v1355, v197.f64[0]), v1359, v197, 1);
              v1290 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1367, v191.f64[0]), v148, v191, 1), v1351, v198.f64[0]), v1339, v198, 1);
              v1279 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1371, v191.f64[0]), v1335, v191, 1), v1355, v198.f64[0]), v1359, v198, 1);
              v1300 = vmlaq_laneq_f64(vmlaq_n_f64(v193, v1351, v199.f64[0]), v1339, v199, 1);
              v195.f64[0] = v181.f64[0];
              v1524 = v181;
              *(_QWORD *)&v195.f64[1] = v177.i64[0];
              v177.i64[1] = *(_QWORD *)&v180.f64[0];
              *(_QWORD *)&v180.f64[1] = v182;
              v1297 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v1355, v199.f64[0]), v1359, v199, 1);
              v200 = (int8x16_t)vnegq_f64(v180);
              v1596 = vnegq_f64(v195);
              v201 = (float64x2_t)vextq_s8((int8x16_t)v1596, v200, 8uLL);
              v202 = v200;
              v203 = vnegq_f64(v187);
              *(float64x2_t *)&v1628[8] = vmlaq_n_f64(vmulq_laneq_f64(v167, v1514, 1), v201, v1537.f64[0]);
              *(float64x2_t *)&v1632[8] = vmlsq_lane_f64(vmulq_laneq_f64(v203, v1514, 1), v201, v1514.f64[0], 0);
              v1505 = *(int8x16_t *)v1632;
              *(_QWORD *)&v201.f64[0] = vdupq_laneq_s64((int64x2_t)v1631, 1).u64[0];
              v1364 = (int8x16_t)v1631;
              v201.f64[1] = v1633.f64[1];
              v1360 = (int8x16_t)v1633;
              *(int8x16_t *)&v1634[56] = v177;
              v1500 = *(int8x16_t *)&v1634[48];
              *(_QWORD *)&v204.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1634[32], 1).u64[0];
              v1368 = *(int8x16_t *)&v1634[32];
              v204.f64[1] = *(float64_t *)&v1634[88];
              v1372 = *(int8x16_t *)&v1634[80];
              v1352 = v1627;
              v1376 = *(int8x16_t *)v1628;
              v1356 = (int8x16_t)v1629;
              v205 = (float64x2_t)vzip1q_s64((int64x2_t)v1627, (int64x2_t)v1629);
              v206 = (float64x2_t)vzip2q_s64((int64x2_t)v1627, (int64x2_t)v1629);
              v207 = vmlaq_n_f64(vmulq_n_f64(v205, v1343), v206, v175);
              v208 = (float64x2_t)vzip1q_s64((int64x2_t)v1631, (int64x2_t)v1633);
              v1496 = vmlaq_n_f64(vmulq_n_f64(v208, v1343), v201, v175);
              v209 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1634[32], *(int64x2_t *)&v1634[80]);
              v210 = vmlaq_n_f64(vmulq_n_f64(v209, v1343), v204, v175);
              v211 = vmlaq_n_f64(vmulq_n_f64(v205, v1392), v206, v1381);
              v212 = vmlaq_n_f64(vmulq_n_f64(v208, v1392), v201, v1381);
              v1491 = vmlaq_n_f64(vmulq_n_f64(v209, v1392), v204, v1381);
              v213 = vmlaq_n_f64(vmulq_n_f64(v205, v1394), v206, v176);
              v193.f64[0] = v176;
              v214 = vmlaq_n_f64(vmulq_n_f64(v208, v1394), v201, v176);
              v215 = vmlaq_n_f64(vmulq_n_f64(v209, v1394), v204, v193.f64[0]);
              v216 = vmlaq_n_f64(vmulq_n_f64(v205, *(double *)v159.i64), v206, v1397);
              v217 = vmlaq_n_f64(vmulq_n_f64(v208, *(double *)v159.i64), v201, v1397);
              v218 = vmlaq_n_f64(vmulq_n_f64(v209, *(double *)v159.i64), v204, v1397);
              v219 = vmlaq_n_f64(vmulq_n_f64(v205, v1404), v206, v1401);
              v220 = vmlaq_n_f64(vmulq_n_f64(v208, v1404), v201, v1401);
              v1575 = v182;
              v221 = vmlaq_n_f64(vmulq_n_f64(v209, v1404), v204, v1401);
              v222 = vmlaq_n_f64(vmulq_n_f64(v205, v1410), v206, v1407);
              v223 = vmlaq_n_f64(vmulq_n_f64(v208, v1410), v201, v1407);
              v224 = vmlaq_n_f64(vmulq_n_f64(v209, v1410), v204, v1407);
              v225 = (int8x16_t)vnegq_f64(v167);
              v226 = (int64x2_t)vnegq_f64(v1519);
              v227 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v225, 1), v226);
              v228 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v203.f64[0], 0);
              v228.i64[0] = v226.i64[0];
              v229 = (float64x2_t)v202;
              v230 = (float64x2_t)vextq_s8(v202, v225, 8uLL);
              v231 = (float64x2_t)vextq_s8((int8x16_t)v203, (int8x16_t)v1596, 8uLL);
              *(float64x2_t *)&v1630[8] = vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v227, 8uLL), v1514.f64[0]), (float64x2_t)vextq_s8(v228, (int8x16_t)v231, 8uLL), v1537.f64[0], 0);
              *(_QWORD *)&v1630[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v1514, v227, 1), v1537, v231, 1);
              *(int8x16_t *)&v1634[8] = v1347;
              *(float64x2_t *)&v1634[104] = v167;
              v1348 = *(int8x16_t *)&v1630[16];
              v232 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1628, *(int64x2_t *)v1630);
              v1336 = *(int8x16_t *)v1630;
              v233 = vmlaq_n_f64(v207, v232, v1452);
              v234 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1632, *(int64x2_t *)v1634);
              v1340 = *(int8x16_t *)v1634;
              v235 = vmlaq_n_f64(v1496, v234, v1452);
              v236 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1634[48], *(int64x2_t *)&v1634[96]);
              v1344 = *(int8x16_t *)&v1634[96];
              v237 = vmlaq_n_f64(v210, v236, v1452);
              v238 = vmlaq_n_f64(v211, v232, v1447);
              v239 = vmlaq_n_f64(v212, v234, v1447);
              v240 = vmlaq_n_f64(v1491, v236, v1447);
              v241 = vmlaq_n_f64(v213, v232, v1443);
              v242 = vmlaq_n_f64(v214, v234, v1443);
              v243 = vmlaq_n_f64(v215, v236, v1443);
              v244 = vmlaq_n_f64(v216, v232, v1440);
              v245 = vmlaq_n_f64(v217, v234, v1440);
              v246 = vmlaq_n_f64(v218, v236, v1440);
              v247 = vmlaq_n_f64(v219, v232, v1437);
              v248 = vmlaq_n_f64(v220, v234, v1437);
              v249 = vmlaq_n_f64(v221, v236, v1437);
              v250 = vmlaq_n_f64(v222, v232, *(double *)v164.i64);
              v251 = vmlaq_n_f64(v223, v234, *(double *)v164.i64);
              *(_QWORD *)&v232.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v1632, 1).u64[0];
              v232.f64[1] = *(float64_t *)&v1634[8];
              *(_QWORD *)&v234.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1634[48], 1).u64[0];
              v252 = vmlaq_n_f64(v224, v236, *(double *)v164.i64);
              v234.f64[1] = v167.f64[0];
              v253 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1628, *(int64x2_t *)v1630);
              v254 = vmlaq_n_f64(v235, v232, v1428);
              v255 = vmlaq_n_f64(v237, v234, v1428);
              v256 = vmlaq_n_f64(v239, v232, v1425);
              v257 = vmlaq_n_f64(v240, v234, v1425);
              v258 = vmlaq_n_f64(v242, v232, v1419);
              v259 = vmlaq_n_f64(v243, v234, v1419);
              v260 = vmlaq_n_f64(v245, v232, v1416);
              v261 = vmlaq_n_f64(v246, v234, v1416);
              v262 = vmlaq_n_f64(v248, v232, v1413);
              v263 = vmlaq_n_f64(v249, v234, v1413);
              v264 = vmlaq_n_f64(v251, v232, v1431);
              v265 = vmlaq_n_f64(v252, v234, v1431);
              *(_QWORD *)&v1628[24] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v1519, v1514, 1), v230, v1537);
              *(_QWORD *)&v1634[72] = v1575;
              *(_QWORD *)&v1632[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v1596, v1514, 1), v1514, v229, 1);
              *(float64_t *)&v1634[24] = v1524.f64[0];
              *(float64_t *)&v1634[120] = v1519.f64[0];
              v266 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1628[16], *(int64x2_t *)&v1630[16]);
              v267 = vmlaq_n_f64(vmlaq_n_f64(v233, v253, v1428), v266, *(double *)v151.i64);
              v268 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1632[16], *(int64x2_t *)&v1634[16]);
              v269 = vmlaq_n_f64(v254, v268, *(double *)v151.i64);
              v270 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1634[64], *(int64x2_t *)&v1634[112]);
              v271 = vmlaq_n_f64(v255, v270, *(double *)v151.i64);
              v272 = vmlaq_n_f64(vmlaq_n_f64(v238, v253, v1425), v266, v1552);
              v273 = vmlaq_n_f64(v256, v268, v1552);
              v274 = vmlaq_n_f64(v257, v270, v1552);
              v275 = vmlaq_n_f64(vmlaq_n_f64(v241, v253, v1419), v266, v1533);
              v276 = vmlaq_n_f64(v258, v268, v1533);
              v277 = vmlaq_n_f64(v259, v270, v1533);
              v278 = vmlaq_n_f64(vmlaq_n_f64(v244, v253, v1416), v266, v1546);
              v279 = vmlaq_n_f64(v260, v268, v1546);
              v280 = vmlaq_n_f64(v261, v270, v1546);
              v281 = vmlaq_n_f64(vmlaq_n_f64(v247, v253, v1413), v266, v1528);
              v282 = vmlaq_n_f64(v262, v268, v1528);
              v283 = vmlaq_n_f64(v263, v270, v1528);
              v284 = vmlaq_n_f64(vmlaq_n_f64(v250, v253, v1431), v266, v1558);
              v285 = vmlaq_n_f64(v264, v268, v1558);
              *(_QWORD *)&v266.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1632[16], 1).u64[0];
              v266.f64[1] = v1524.f64[0];
              v286 = vmlaq_n_f64(v265, v270, v1558);
              *(_QWORD *)&v268.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1634[64], 1).u64[0];
              v268.f64[1] = v1519.f64[0];
              v287 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1628[16], *(int64x2_t *)&v1630[16]);
              v1242 = vmlaq_n_f64(v267, v287, v1485);
              v1497 = vmlaq_n_f64(v269, v266, v1485);
              v1240 = vmlaq_n_f64(v271, v268, v1485);
              v1238 = vmlaq_n_f64(v272, v287, v1472);
              v1236 = vmlaq_n_f64(v273, v266, v1472);
              v1492 = vmlaq_n_f64(v274, v268, v1472);
              v1232 = vmlaq_n_f64(v275, v287, v1467);
              v1230 = vmlaq_n_f64(v276, v266, v1467);
              v1228 = vmlaq_n_f64(v277, v268, v1467);
              v1225 = vmlaq_n_f64(v278, v287, v1463);
              v1223 = vmlaq_n_f64(v279, v266, v1463);
              v1221 = vmlaq_n_f64(v280, v268, v1463);
              v1219 = vmlaq_n_f64(v281, v287, v1459);
              v1217 = vmlaq_n_f64(v282, v266, v1459);
              v1214 = vmlaq_n_f64(v283, v268, v1459);
              v1211 = vmlaq_n_f64(v284, v287, v1508);
              v1209 = vmlaq_n_f64(v285, v266, v1508);
              v1207 = vmlaq_n_f64(v286, v268, v1508);
              v288 = (_OWORD *)(v20 + 472 * i);
              v289 = *((int8x16_t *)v288 + 11);
              v1509 = *((int8x16_t *)v288 + 10);
              v290 = v288[8];
              v1382 = *((float64x2_t *)v288 + 9);
              v291 = *((int64x2_t *)v288 + 6);
              v292 = *((float64x2_t *)v288 + 7);
              v293 = *((float64x2_t *)v288 + 5);
              v294 = *((float64x2_t *)v288 + 3);
              v296 = *((int8x16_t *)v288 + 12);
              v295 = *((int8x16_t *)v288 + 13);
              v298 = *((int8x16_t *)v288 + 15);
              v297 = *((int8x16_t *)v288 + 16);
              _Q23 = *((int8x16_t *)v288 + 14);
              v301 = *((int8x16_t *)v288 + 17);
              v300 = *((int8x16_t *)v288 + 18);
              v303 = *((int8x16_t *)v288 + 21);
              v302 = *((int8x16_t *)v288 + 22);
              v304 = *((int8x16_t *)v288 + 19);
              v305 = *((int8x16_t *)v288 + 20);
              v307 = *((int8x16_t *)v288 + 23);
              v306 = *((int8x16_t *)v288 + 24);
              v309 = *((int8x16_t *)v288 + 27);
              v308 = *((int8x16_t *)v288 + 28);
              _Q3 = *((float64x2_t *)v288 + 25);
              v310 = *((int8x16_t *)v288 + 26);
              v1529 = *((int64x2_t *)v288 + 4);
              *(_QWORD *)v1628 = *((_QWORD *)v288 + 8);
              v1627 = (int8x16_t)v294;
              *(_QWORD *)v1630 = v291.i64[0];
              v1629 = v293;
              *(_QWORD *)v1632 = v290;
              v1631 = v292;
              *(_QWORD *)&v1129 = vextq_s8(v1352, v1352, 8uLL).u64[0];
              v1175 = *(int8x16_t *)&v1628[16];
              v1177 = *(int8x16_t *)&v1632[16];
              *(_QWORD *)&v1165 = vextq_s8(v1175, v1175, 8uLL).u64[0];
              *(_QWORD *)&v1132 = vextq_s8(v1356, v1356, 8uLL).u64[0];
              *(_QWORD *)&v1154 = vextq_s8(v1336, v1336, 8uLL).u64[0];
              *(_QWORD *)&v1156 = vextq_s8(v1376, v1376, 8uLL).u64[0];
              *(_QWORD *)&v1162 = vextq_s8(v1348, v1348, 8uLL).u64[0];
              *(_QWORD *)&v1134 = vextq_s8(v1364, v1364, 8uLL).u64[0];
              *(_QWORD *)&v1152 = vextq_s8(v1505, v1505, 8uLL).u64[0];
              *(_QWORD *)&v1160 = vextq_s8(v1177, v1177, 8uLL).u64[0];
              *(_QWORD *)&v1136 = vextq_s8(v1360, v1360, 8uLL).u64[0];
              v1179 = *(int8x16_t *)&v1634[64];
              v1181 = *(int8x16_t *)&v1634[16];
              *(_QWORD *)&v1170 = vextq_s8(v1181, v1181, 8uLL).u64[0];
              *(_QWORD *)&v1147 = vextq_s8(v1340, v1340, 8uLL).u64[0];
              *(_QWORD *)&v1139 = vextq_s8(v1368, v1368, 8uLL).u64[0];
              *(_QWORD *)&v1168 = vextq_s8(v1179, v1179, 8uLL).u64[0];
              *(_QWORD *)&v1145 = vextq_s8(v1500, v1500, 8uLL).u64[0];
              *(_QWORD *)&v1142 = vextq_s8(v1372, v1372, 8uLL).u64[0];
              v1183 = *(int8x16_t *)&v1634[112];
              *(_QWORD *)&v1172 = vextq_s8(v1183, v1183, 8uLL).u64[0];
              *(_QWORD *)&v1150 = vextq_s8(v1344, v1344, 8uLL).u64[0];
              v1597 = *(double *)v295.i64;
              *(_QWORD *)&v1547 = vextq_s8(v295, v295, 8uLL).u64[0];
              v1473 = *(double *)v296.i64;
              *(_QWORD *)&v1456 = vextq_s8(v296, v296, 8uLL).u64[0];
              v1468 = *(double *)v289.i64;
              *(_QWORD *)&v1438 = vextq_s8(v289, v289, 8uLL).u64[0];
              v1432 = *(double *)v297.i64;
              *(_QWORD *)&v1402 = vextq_s8(v297, v297, 8uLL).u64[0];
              v1429 = *(double *)v298.i64;
              *(_QWORD *)&v1399 = vextq_s8(v298, v298, 8uLL).u64[0];
              v1426 = *(double *)_Q23.i64;
              *(_QWORD *)&v1398 = vextq_s8(_Q23, _Q23, 8uLL).u64[0];
              v1576 = *(double *)v304.i64;
              *(_QWORD *)&v1541 = vextq_s8(v304, v304, 8uLL).u64[0];
              v1559 = *(double *)v300.i64;
              *(_QWORD *)&v1453 = vextq_s8(v300, v300, 8uLL).u64[0];
              v1464 = *(double *)v301.i64;
              *(_QWORD *)&v1441 = vextq_s8(v301, v301, 8uLL).u64[0];
              v1420 = *(double *)v302.i64;
              *(_QWORD *)&v1395 = vextq_s8(v302, v302, 8uLL).u64[0];
              v1417 = *(double *)v303.i64;
              *(_QWORD *)&v1393 = vextq_s8(v303, v303, 8uLL).u64[0];
              v1414 = *(double *)v305.i64;
              *(_QWORD *)&v1389 = vextq_s8(v305, v305, 8uLL).u64[0];
              v1568 = _Q3.f64[0];
              *(_QWORD *)&v1299 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
              v1553 = *(double *)v306.i64;
              *(_QWORD *)&v1448 = vextq_s8(v306, v306, 8uLL).u64[0];
              v1460 = *(double *)v307.i64;
              *(_QWORD *)&v1444 = vextq_s8(v307, v307, 8uLL).u64[0];
              v1411 = *(double *)v308.i64;
              *(_QWORD *)&v1391 = vextq_s8(v308, v308, 8uLL).u64[0];
              v1408 = *(double *)v309.i64;
              *(_QWORD *)&v1387 = vextq_s8(v309, v309, 8uLL).u64[0];
              v1405 = *(double *)v310.i64;
              *(_QWORD *)&v1385 = vextq_s8(v310, v310, 8uLL).u64[0];
              *(_QWORD *)&v311 = vextq_s8((int8x16_t)v294, (int8x16_t)v294, 8uLL).u64[0];
              _Q3.f64[0] = v292.f64[1];
              do
              {
                v1633.f64[v185] = 0.0;
                v313 = v186 < 2;
                if (v186 < 2)
                  ++v186;
                else
                  v186 = 0;
                if (v313)
                  ++v185;
                else
                  v185 += 4;
              }
              while (v185 != 18);
              v314 = 0;
              v315 = 0;
              v1308 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1434, v1311.f64[0]), v1422, v1311, 1), v1524, v1305.f64[0]), v1514, v1305, 1);
              v1287 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1481, v1311.f64[0]), __dst, v1311, 1), v1519, v1305.f64[0]), v1537, v1305, 1);
              v1306 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1434, v1294.f64[0]), v1422, v1294, 1), v1524, v1292.f64[0]), v1514, v1292, 1);
              v1281 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1481, v1294.f64[0]), __dst, v1294, 1), v1519, v1292.f64[0]), v1537, v1292, 1);
              v1284 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1434, v1290.f64[0]), v1422, v1290, 1), v1524, v1279.f64[0]), v1514, v1279, 1);
              v1273 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1481, v1290.f64[0]), __dst, v1290, 1), v1519, v1279.f64[0]), v1537, v1279, 1);
              *(_QWORD *)&v316.f64[0] = v291.i64[0];
              v1486 = v291;
              v316.f64[1] = v293.f64[0];
              _Q23.i64[1] = *(_QWORD *)&v1382.f64[1];
              v317 = (float64x2_t)vzip1q_s64((int64x2_t)v1509, (int64x2_t)v1382);
              _Q4 = (int8x16_t)vmlsq_f64(vmulq_f64(v293, v317), v316, v1382);
              *(_QWORD *)&v1630[24] = _Q4.i64[1];
              v1312 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1434, v1300.f64[0]), v1422, v1300, 1), v1524, v1297.f64[0]), v1514, v1297, 1);
              v1266 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1481, v1300.f64[0]), __dst, v1300, 1), v1519, v1297.f64[0]), v1537, v1297, 1);
              v319 = (float64x2_t)vextq_s8((int8x16_t)v1382, v1509, 8uLL);
              *(_QWORD *)&v320.f64[0] = v290;
              v320.f64[1] = v292.f64[0];
              v321.f64[0] = v311;
              *(_QWORD *)&v321.f64[1] = v291.i64[0];
              v322.f64[0] = v292.f64[1];
              *(_QWORD *)&v322.f64[1] = v290;
              v323.f64[0] = v311;
              *(_QWORD *)&v324.f64[0] = v1529.i64[0];
              *(_QWORD *)&v323.f64[1] = v1529.i64[0];
              v324.f64[1] = v294.f64[0];
              v325.f64[0] = v294.f64[0];
              v325.f64[1] = v293.f64[1];
              v326 = (int8x16_t)vmlsq_f64(vmulq_f64(v321, v1382), v325, v319);
              *(float64x2_t *)&v1628[8] = vmlsq_f64(vmulq_f64(v324, v319), v323, v317);
              *(int8x16_t *)&v1630[8] = vextq_s8(v326, _Q4, 8uLL);
              *(_QWORD *)&v1628[24] = v326.i64[0];
              *(_QWORD *)&v1632[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(_Q3, v1382), v292, v1382, 1);
              *(float64x2_t *)&v1632[8] = vmlsq_f64(vmulq_f64(v320, v319), v322, v317);
              v319.f64[0] = v294.f64[0];
              v319.f64[1] = v311;
              *(float64x2_t *)&v1634[8] = v319;
              *(float64x2_t *)&v1634[56] = v293;
              v1276 = v292;
              *(float64x2_t *)&v1634[104] = v292;
              v327 = (float64x2_t)vzip1q_s64((int64x2_t)v1627, (int64x2_t)v1629);
              v328 = vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v294, (int64x2_t)v293), vnegq_f64(v1382).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v294, (int64x2_t)v293), v1382, 1);
              v329 = (float64x2_t)vzip2q_s64((int64x2_t)v1627, (int64x2_t)v1629);
              __asm { FMLS            D0, D3, V23.D[1] }
              v331 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1628, *(int64x2_t *)v1630);
              v332 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1628, *(int64x2_t *)v1630);
              v333 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1628[16], *(int64x2_t *)&v1630[16]);
              v334 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1628[16], *(int64x2_t *)&v1630[16]);
              v335 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v327, *(double *)v289.i64), v329, v1438), v331, v1473), v332, v1456), v333, v1597), v334, v1547);
              v336 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v327, *(double *)_Q23.i64), v329, v1398), v331, v1429), v332, v1399), v333, v1432), v334, v1402);
              v1423 = (float64x2_t)v1627;
              v337 = vmlaq_laneq_f64(vmulq_n_f64(v335, *(double *)v1627.i64), v336, (float64x2_t)v1627, 1);
              v1435 = v1629;
              v338 = vmlaq_laneq_f64(vmulq_n_f64(v335, v1629.f64[0]), v336, v1629, 1);
              v1295 = v294;
              v1301 = v293;
              v339 = vmlaq_laneq_f64(vmulq_n_f64(v335, v1631.f64[0]), v336, v1631, 1);
              v340 = vmlaq_laneq_f64(vmulq_n_f64(v335, v1633.f64[0]), v336, v1633, 1);
              v341 = *(float64x2_t *)&v1634[32];
              v342 = vmlaq_laneq_f64(vmulq_n_f64(v335, *(double *)&v1634[32]), v336, *(float64x2_t *)&v1634[32], 1);
              v343 = vmlaq_laneq_f64(vmulq_n_f64(v335, *(double *)&v1634[80]), v336, *(float64x2_t *)&v1634[80], 1);
              v451 = v327;
              v344 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v327, v1464), v329, v1441), v331, v1559), v332, v1453), v333, v1576), v334, v1541);
              v345 = vmlaq_n_f64(v337, v344, *(double *)v1628);
              v1525 = *(int64x2_t *)v1630;
              v346 = vmlaq_n_f64(v338, v344, *(double *)v1630);
              v347 = vmlaq_n_f64(v339, v344, *(double *)v1632);
              v348 = vmlaq_n_f64(v340, v344, *(double *)v1634);
              v349 = vmlaq_n_f64(v342, v344, *(double *)&v1634[48]);
              v350 = vmlaq_n_f64(v343, v344, *(double *)&v1634[96]);
              v351 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v327, v1414), v329, v1389), v331, v1417), v332, v1393), v333, *(double *)v302.i64), v334, v1395);
              *(_QWORD *)&v1634[24] = v1529.i64[0];
              *(_QWORD *)&v1634[72] = v1486.i64[0];
              v352 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1631, 1);
              *(_QWORD *)&v1634[120] = v290;
              v1206 = v352;
              v352.f64[1] = v1633.f64[1];
              v353 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v1632, 1);
              v1234 = v353;
              v353.f64[1] = *(float64_t *)&v1634[8];
              v354 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v451, v1460), v329, v1444), v331, v1553), v332, v1448), v333, v1568), v334, v1299);
              v355 = vmlaq_n_f64(vmlaq_laneq_f64(v345, v351, *(float64x2_t *)v1628, 1), v354, *(double *)&v1628[16]);
              v356 = vmlaq_n_f64(vmlaq_laneq_f64(v346, v351, *(float64x2_t *)v1630, 1), v354, *(double *)&v1630[16]);
              v357 = vmlaq_n_f64(vmlaq_laneq_f64(v347, v351, *(float64x2_t *)v1632, 1), v354, *(double *)&v1632[16]);
              v358 = vmlaq_n_f64(vmlaq_laneq_f64(v348, v351, *(float64x2_t *)v1634, 1), v354, *(double *)&v1634[16]);
              v359 = vmlaq_n_f64(vmlaq_laneq_f64(v349, v351, *(float64x2_t *)&v1634[48], 1), v354, *(double *)&v1634[64]);
              v360 = vmlaq_n_f64(vmlaq_laneq_f64(v350, v351, *(float64x2_t *)&v1634[96], 1), v354, v292.f64[1]);
              v1261 = v451;
              v1255 = v329;
              v1258 = v331;
              v1257 = v332;
              v1260 = v333;
              v1259 = v334;
              v361 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v451, v1405), v329, v1385), v331, *(double *)v309.i64), v332, v1387), v333, *(double *)v308.i64), v334, v1391);
              v1105 = vmlaq_laneq_f64(v355, v361, *(float64x2_t *)&v1628[16], 1);
              v1111 = vmlaq_laneq_f64(v356, v361, *(float64x2_t *)&v1630[16], 1);
              v1115 = vmlaq_laneq_f64(v357, v361, *(float64x2_t *)&v1632[16], 1);
              v1119 = vmlaq_laneq_f64(v358, v361, *(float64x2_t *)&v1634[16], 1);
              v1123 = vmlaq_laneq_f64(v359, v361, *(float64x2_t *)&v1634[64], 1);
              v1125 = vmlaq_laneq_f64(v360, v361, *(float64x2_t *)&v1634[112], 1);
              _Q16 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1632[16], 1);
              v1235 = _Q16;
              *(_QWORD *)&_Q16.f64[1] = v1529.i64[0];
              v363 = (float64x2_t)vzip1q_s64((int64x2_t)v1631, (int64x2_t)v1633);
              v364 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1632, *(int64x2_t *)v1634);
              v365 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1632[16], *(int64x2_t *)&v1634[16]);
              v366 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, *(double *)v289.i64), v352, v1438), v364, v1473), v353, v1456), v365, v1597), _Q16, v1547);
              v367 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, *(double *)_Q23.i64), v352, v1398), v364, v1429), v353, v1399), v365, v1432), _Q16, v1402);
              v368 = vmlaq_laneq_f64(vmulq_n_f64(v366, v1423.f64[0]), v367, v1423, 1);
              v369 = vmlaq_laneq_f64(vmulq_n_f64(v366, v1435.f64[0]), v367, v1435, 1);
              v1278 = v1631;
              v370 = vmlaq_laneq_f64(vmulq_n_f64(v366, v1278.f64[0]), v367, v1278, 1);
              v1298 = v1633;
              v371 = vmlaq_laneq_f64(vmulq_n_f64(v366, v1298.f64[0]), v367, v1298, 1);
              v372 = vmlaq_laneq_f64(vmulq_n_f64(v366, v341.f64[0]), v367, v341, 1);
              v373 = vmlaq_laneq_f64(vmulq_n_f64(v366, *(double *)&v1634[80]), v367, *(float64x2_t *)&v1634[80], 1);
              v374 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v1464), v352, v1441), v364, v1559), v353, v1453), v365, v1576), _Q16, v1541);
              v375 = vmlaq_n_f64(v368, v374, *(double *)v1628);
              v376 = vmlaq_n_f64(v369, v374, *(double *)v1630);
              v377 = vmlaq_n_f64(v370, v374, *(double *)v1632);
              v378 = vmlaq_n_f64(v371, v374, *(double *)v1634);
              v379 = vmlaq_n_f64(v372, v374, *(double *)&v1634[48]);
              v380 = vmlaq_n_f64(v373, v374, *(double *)&v1634[96]);
              v381 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v1414), v352, v1389), v364, v1417), v353, v1393), v365, *(double *)v302.i64), _Q16, v1395);
              v382 = vmlaq_laneq_f64(v375, v381, *(float64x2_t *)v1628, 1);
              v383 = vmlaq_laneq_f64(v376, v381, *(float64x2_t *)v1630, 1);
              v384 = vmlaq_laneq_f64(v377, v381, *(float64x2_t *)v1632, 1);
              v385 = vmlaq_laneq_f64(v378, v381, *(float64x2_t *)v1634, 1);
              v386 = vmlaq_laneq_f64(v379, v381, *(float64x2_t *)&v1634[48], 1);
              v387 = vmlaq_laneq_f64(v380, v381, *(float64x2_t *)&v1634[96], 1);
              v388 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v1460), v352, v1444), v364, v1553), v353, v1448), v365, v1568), _Q16, v1299);
              v389 = vmlaq_n_f64(v382, v388, *(double *)&v1628[16]);
              v390 = vmlaq_n_f64(v383, v388, *(double *)&v1630[16]);
              v391 = vmlaq_n_f64(v384, v388, *(double *)&v1632[16]);
              v392 = vmlaq_n_f64(v385, v388, *(double *)&v1634[16]);
              v393 = vmlaq_n_f64(v386, v388, *(double *)&v1634[64]);
              _Q0 = vmlaq_n_f64(v387, v388, v292.f64[1]);
              v1250 = v363;
              v1251 = v352;
              v1252 = v364;
              v1254 = v353;
              v1253 = v365;
              v1256 = _Q16;
              v395 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v1405), v352, v1385), v364, *(double *)v309.i64), v353, v1387), v365, *(double *)v308.i64), _Q16, v1391);
              v1099 = vmlaq_laneq_f64(v389, v395, *(float64x2_t *)&v1628[16], 1);
              v1103 = vmlaq_laneq_f64(v390, v395, *(float64x2_t *)&v1630[16], 1);
              v1109 = vmlaq_laneq_f64(v391, v395, *(float64x2_t *)&v1632[16], 1);
              v1113 = vmlaq_laneq_f64(v392, v395, *(float64x2_t *)&v1634[16], 1);
              v1117 = vmlaq_laneq_f64(v393, v395, *(float64x2_t *)&v1634[64], 1);
              v1121 = vmlaq_laneq_f64(_Q0, v395, *(float64x2_t *)&v1634[112], 1);
              *(_QWORD *)&_Q0.f64[0] = v1509.i64[0];
              v396 = vmlsq_lane_f64(v328, (float64x2_t)vzip1q_s64(v1529, v1486), *(double *)v1509.i64, 0);
              _Q4.i64[0] = v290;
              __asm { FMLS            D16, D4, V0.D[0] }
              v1538 = _Q16.f64[0];
              v395.f64[0] = NAN;
              v395.f64[1] = NAN;
              *(float64x2_t *)v1669 = v395;
              *(float64x2_t *)&v1669[16] = v395;
              *(_OWORD *)&v1669[8] = *(_OWORD *)v22;
              v1515 = vmlaq_n_f64(vmulq_n_f64(v1320, v294.f64[0]), v1314, v1301.f64[0]);
              v397 = vmlaq_laneq_f64(vmulq_laneq_f64(v1320, v294, 1), v1314, v1301, 1);
              v398 = vmlaq_laneq_f64(vmulq_n_f64(v1323, v396.f64[0]), v1317, v396, 1);
              v399 = vmlaq_laneq_f64(vmulq_n_f64(v1320, v396.f64[0]), v1314, v396, 1);
              v400 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1634[32], 1);
              v401 = (float64x2_t)vzip1q_s64((int64x2_t)v1320, (int64x2_t)v1314);
              v1201 = v400;
              v400.f64[1] = *(float64_t *)&v1634[88];
              v402 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1634[48], 1);
              v1213 = v402;
              v402.f64[1] = *(float64_t *)&v1634[104];
              v403 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1634[64], 1);
              v1216 = v403;
              *(_QWORD *)&v403.f64[1] = v290;
              v404 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1634[32], *(int64x2_t *)&v1634[80]);
              v405 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1634[48], *(int64x2_t *)&v1634[96]);
              v406 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1634[64], *(int64x2_t *)&v1634[112]);
              v407 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v404, *(double *)v289.i64), v400, v1438), v405, v1473), v402, v1456), v406, v1597), v403, v1547);
              v408 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v404, *(double *)_Q23.i64), v400, v1398), v405, v1429), v402, v1399), v406, v1432), v403, v1402);
              v409 = vmlaq_laneq_f64(vmulq_n_f64(v407, v1423.f64[0]), v408, v1423, 1);
              v410 = vmlaq_laneq_f64(vmulq_n_f64(v407, v1435.f64[0]), v408, v1435, 1);
              v411 = vmlaq_laneq_f64(vmulq_n_f64(v407, v1278.f64[0]), v408, v1278, 1);
              v412 = vmlaq_laneq_f64(vmulq_n_f64(v407, v1298.f64[0]), v408, v1298, 1);
              v1227 = *(double *)&v1634[32];
              v413 = vmlaq_laneq_f64(vmulq_n_f64(v407, v341.f64[0]), v408, v341, 1);
              v1280 = *(float64x2_t *)&v1634[80];
              v414 = vmlaq_laneq_f64(vmulq_n_f64(v407, v1280.f64[0]), v408, v1280, 1);
              v415 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v404, v1464), v400, v1441), v405, v1559), v402, v1453), v406, v1576), v403, v1541);
              v416 = vmlaq_n_f64(v409, v415, *(double *)v1628);
              v417 = vmlaq_n_f64(v410, v415, *(double *)v1630);
              v418 = vmlaq_n_f64(v411, v415, *(double *)v1632);
              v419 = vmlaq_n_f64(v412, v415, *(double *)v1634);
              v420 = vmlaq_n_f64(v413, v415, *(double *)&v1634[48]);
              v421 = vmlaq_n_f64(v414, v415, *(double *)&v1634[96]);
              v422 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v404, v1414), v400, v1389), v405, v1417), v402, v1393), v406, v1420), v403, v1395);
              v423 = vmlaq_laneq_f64(v416, v422, *(float64x2_t *)v1628, 1);
              v424 = vmlaq_laneq_f64(v417, v422, *(float64x2_t *)v1630, 1);
              v425 = vmlaq_laneq_f64(v418, v422, *(float64x2_t *)v1632, 1);
              v426 = vmlaq_laneq_f64(v419, v422, *(float64x2_t *)v1634, 1);
              v427 = vmlaq_laneq_f64(v420, v422, *(float64x2_t *)&v1634[48], 1);
              v428 = vmlaq_laneq_f64(v421, v422, *(float64x2_t *)&v1634[96], 1);
              v429 = vmlaq_n_f64(vmulq_n_f64(v1320, *(double *)v1529.i64), v1314, *(double *)v1486.i64);
              v430 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v404, v1460), v400, v1444), v405, v1553), v402, v1448), v406, v1568), v403, v1299);
              v431 = vmlaq_n_f64(v423, v430, *(double *)&v1628[16]);
              v432 = vmlaq_n_f64(v424, v430, *(double *)&v1630[16]);
              v433 = vmlaq_n_f64(v425, v430, *(double *)&v1632[16]);
              v434 = vmlaq_n_f64(v426, v430, *(double *)&v1634[16]);
              v435 = vmlaq_n_f64(v427, v430, *(double *)&v1634[64]);
              v436 = vmlaq_n_f64(v428, v430, *(double *)&v1634[112]);
              v1244 = v404;
              v437 = vmulq_n_f64(v404, v1405);
              v438 = (float64x2_t)vzip1q_s64((int64x2_t)v1323, (int64x2_t)v1317);
              v1245 = v400;
              v1246 = v405;
              v439 = vmlaq_n_f64(vmlaq_n_f64(v437, v400, v1385), v405, v1408);
              v440 = (int8x16_t)vzip2q_s64((int64x2_t)v1323, (int64x2_t)v1317);
              v1247 = v402;
              v1248 = v406;
              v1249 = v403;
              v441 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v439, v402, v1387), v406, v1411), v403, v1391);
              v1093 = vmlaq_laneq_f64(v431, v441, *(float64x2_t *)&v1628[16], 1);
              v1095 = vmlaq_laneq_f64(v432, v441, *(float64x2_t *)&v1630[16], 1);
              v1097 = vmlaq_laneq_f64(v433, v441, *(float64x2_t *)&v1632[16], 1);
              v1101 = vmlaq_laneq_f64(v434, v441, *(float64x2_t *)&v1634[16], 1);
              v1107 = vmlaq_laneq_f64(v435, v441, *(float64x2_t *)&v1634[64], 1);
              v1315 = vmlaq_laneq_f64(v436, v441, *(float64x2_t *)&v1634[112], 1);
              *(_DWORD *)&v1669[24] = *((_DWORD *)v22 + 4);
              *(float64_t *)v1630 = v1379.f64[1];
              v1190 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v1628, 0);
              v1194 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v1628, 1);
              v1200 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1628[16], 0);
              v1205 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1628[16], 1);
              v1188 = (float64x2_t)vdupq_lane_s64(v1525.i64[0], 0);
              v1192 = (float64x2_t)vdupq_laneq_s64(v1525, 1);
              v1198 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1630[16], 0);
              v1203 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1630[16], 1);
              v1197 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1632[16], 0);
              v1186 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v1632, 0);
              v1187 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v1634, 0);
              v1191 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v1634, 1);
              v1196 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1634[16], 0);
              v1202 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1634[16], 1);
              v1185 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1634[48], 0);
              v1195 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1634[64], 0);
              v1189 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1634[96], 0);
              v1193 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1634[96], 1);
              v1199 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1634[112], 0);
              v1204 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1634[112], 1);
              v442 = vaddq_f64(v1329, vmlaq_n_f64(v398, v1379, v1538));
              v443 = vaddq_f64(v1326, vmlaq_n_f64(v399, v1332, v1538));
              *(float64_t *)v1628 = v1379.f64[0];
              v1627 = (int8x16_t)v438;
              *(float64_t *)v1632 = v1332.f64[0];
              v1629 = (float64x2_t)v440;
              v1631 = v401;
              v444 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1323, v1295.f64[0]), v1317, v1301.f64[0]), v1379, v1276.f64[0]), (float64x2_t)0, v1329);
              v445 = vmlaq_f64(vmlaq_n_f64(v1515, v1332, v1276.f64[0]), (float64x2_t)0, v1326);
              v446 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v1323, v1295, 1), v1317, v1301, 1), v1379, v1276, 1), (float64x2_t)0, v1329);
              v447 = vmlaq_f64(vmlaq_laneq_f64(v397, v1332, v1276, 1), (float64x2_t)0, v1326);
              v448 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1323, *(double *)v1529.i64), v1317, *(double *)v1486.i64), v1379, *(double *)&v290), (float64x2_t)0, v1329);
              v1138 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1423, 1);
              v1141 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1435, 1);
              v1159 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1633, 1);
              v1174 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v1634[80], 1);
              v449 = vmlaq_f64(vmlaq_n_f64(v429, v1332, *(double *)&v290), (float64x2_t)0, v1326);
              v450 = vextq_s8((int8x16_t)v438, (int8x16_t)v438, 8uLL).u64[0];
              *(_QWORD *)&v451.f64[0] = vextq_s8(v440, v440, 8uLL).u64[0];
              v452 = vextq_s8((int8x16_t)v1379, (int8x16_t)v1379, 8uLL).u64[0];
              v453 = vextq_s8((int8x16_t)v401, (int8x16_t)v401, 8uLL).u64[0];
              v1275 = (float64x2_t)vextq_s8((int8x16_t)v442, (int8x16_t)v442, 8uLL);
              do
              {
                v1633.f64[v314] = 0.0;
                v454 = v315 < 2;
                if (v315 < 2)
                  ++v315;
                else
                  v315 = 0;
                if (v454)
                  ++v314;
                else
                  v314 += 4;
              }
              while (v314 != 18);
              v455.f64[0] = v1379.f64[0];
              *(_QWORD *)&v455.f64[1] = v440.i64[0];
              v440.i64[1] = *(_QWORD *)&v451.f64[0];
              *(_QWORD *)&v451.f64[1] = v452;
              *(_QWORD *)&v438.f64[1] = v450;
              *(_QWORD *)&v401.f64[1] = v453;
              v456 = vnegq_f64(v438);
              v457 = (int8x16_t)vnegq_f64(v401);
              v458 = vnegq_f64(v451);
              v459 = vdupq_laneq_s64((int64x2_t)v457, 1);
              v460 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v456.f64[0], 0);
              v461 = (int64x2_t)vnegq_f64(v1332);
              v460.i64[0] = v461.i64[0];
              v462 = vnegq_f64(v455);
              v463 = (float64x2_t)vextq_s8((int8x16_t)v458, v457, 8uLL);
              v464 = (float64x2_t)vzip1q_s64(v459, v461);
              v465 = (float64x2_t)vextq_s8((int8x16_t)v456, (int8x16_t)v462, 8uLL);
              v466 = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v1332, v1329, 1), v1326, v463);
              v467 = vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v463, (int8x16_t)v464, 8uLL), v1329.f64[0]), (float64x2_t)vextq_s8(v460, (int8x16_t)v465, 8uLL), v1326.f64[0], 0);
              v468 = (float64x2_t)vextq_s8((int8x16_t)v462, (int8x16_t)v458, 8uLL);
              *(float64x2_t *)&v1628[8] = vmlaq_n_f64(vmulq_laneq_f64(v401, v1329, 1), v468, v1326.f64[0]);
              *(_QWORD *)&v1628[24] = v466;
              *(float64x2_t *)&v1630[8] = v467;
              *(_QWORD *)&v1630[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v1329, v464, 1), v1326, v465, 1);
              *(float64x2_t *)&v1632[8] = vmlsq_lane_f64(vmulq_laneq_f64(v456, v1329, 1), v468, v1329.f64[0], 0);
              *(_QWORD *)&v1632[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v462, v1329, 1), v1329, v458, 1);
              *(float64x2_t *)&v1634[8] = v438;
              *(float64_t *)&v1634[24] = v1379.f64[0];
              *(_QWORD *)&v1634[72] = v452;
              *(int8x16_t *)&v1634[56] = v440;
              *(float64_t *)&v1634[120] = v1332.f64[0];
              *(float64x2_t *)&v1634[104] = v401;
              __dstb = *(float64x2_t *)v1628;
              v1534 = (float64x2_t)v1627;
              v1487 = *(float64x2_t *)&v1630[16];
              v1482 = *(float64x2_t *)v1630;
              v1302 = *(float64x2_t *)&v1628[16];
              v1539 = v1629;
              v1127 = *(float64x2_t *)v1632;
              v1291 = v1631;
              v469 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v1306.f64[0]), v446, v1306, 1), v448, v1281.f64[0]), v442, v1281, 1);
              v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v1306.f64[0]), v447, v1306, 1), v449, v1281.f64[0]), v443, v1281, 1);
              v471 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v1284.f64[0]), v446, v1284, 1), v448, v1273.f64[0]), v442, v1273, 1);
              v472 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v1284.f64[0]), v447, v1284, 1), v449, v1273.f64[0]), v443, v1273, 1);
              v1520 = *(float64x2_t *)&v1634[16];
              v1285 = *(float64x2_t *)v1634;
              *(float64x2_t *)v1630 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v1308.f64[0]), v447, v1308, 1), v449, v1287.f64[0]), v443, v1287, 1);
              v1629 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v1308.f64[0]), v446, v1308, 1), v448, v1287.f64[0]), v442, v1287, 1);
              v1282 = *(float64x2_t *)&v1632[16];
              v1510 = v1633;
              v1631 = v470;
              *(float64x2_t *)&v1630[16] = v469;
              v1269 = *(float64x2_t *)&v1634[48];
              v1274 = *(float64x2_t *)&v1634[32];
              *(float64x2_t *)&v1632[16] = v472;
              v1277 = v442;
              v473 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v1312.f64[0]), v446, v1312, 1), v448, v1266.f64[0]), v442, v1266, 1);
              *(float64x2_t *)v1632 = v471;
              v1131 = v443.f64[0];
              v474 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v1312.f64[0]), v447, v1312, 1), v449, v1266.f64[0]), v443, v1266, 1);
              v1267 = *(float64x2_t *)&v1634[112];
              v1264 = *(float64x2_t *)&v1634[96];
              *(float64x2_t *)v1634 = v474;
              v1633 = v473;
              v1262 = *(float64x2_t *)&v1634[64];
              v1380 = *(float64x2_t *)&v1634[80];
              *(_DWORD *)&v1628[4] = -1;
              *(_QWORD *)&v1628[24] = -1;
              memset(&v1634[16], 0, 293);
              *(_QWORD *)&v1628[8] = v79;
              *(_QWORD *)&v1628[16] = v80;
              *(float64_t *)v1627.i64 = v88;
              *(float64_t *)&v1627.i64[1] = v89;
              *(_DWORD *)v1628 = *(_DWORD *)v1669;
              v1383 = v444;
              v1516 = v445.f64[0];
              v1271 = (int8x16_t)v446;
              v1296 = v447.f64[0];
              v1272 = v448;
              v1293 = v449.f64[0];
              sub_20EB70E00((uint64_t)&v1629);
              v475 = 0;
              v476 = 0;
              v477 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1242, *(double *)v1364.i64), v1238, v1134), v1232, *(double *)v1505.i64), v1225, v1152), v1219, *(double *)v1177.i64);
              v478 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1497, *(double *)v1364.i64), v1236, v1134), v1230, *(double *)v1505.i64), v1223, v1152), v1217, *(double *)v1177.i64);
              v479 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1240, *(double *)v1364.i64), v1492, v1134), v1228, *(double *)v1505.i64), v1221, v1152), v1214, *(double *)v1177.i64);
              v480 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1497, *(double *)v1360.i64), v1236, v1136), v1230, *(double *)v1340.i64), v1223, v1147), v1217, *(double *)v1181.i64);
              v481 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1240, *(double *)v1360.i64), v1492, v1136), v1228, *(double *)v1340.i64), v1221, v1147), v1214, *(double *)v1181.i64);
              v482 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1242, *(double *)v1368.i64), v1238, v1139), v1232, *(double *)v1500.i64), v1225, v1145), v1219, *(double *)v1179.i64);
              v483 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1497, *(double *)v1368.i64), v1236, v1139), v1230, *(double *)v1500.i64), v1223, v1145), v1217, *(double *)v1179.i64);
              v484 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1240, *(double *)v1368.i64), v1492, v1139), v1228, *(double *)v1500.i64), v1221, v1145), v1214, *(double *)v1179.i64);
              v485 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1242, *(double *)v1372.i64), v1238, v1142), v1232, *(double *)v1344.i64), v1225, v1150), v1219, *(double *)v1183.i64);
              v486 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1497, *(double *)v1372.i64), v1236, v1142), v1230, *(double *)v1344.i64), v1223, v1150), v1217, *(double *)v1183.i64);
              v487 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1240, *(double *)v1372.i64), v1492, v1142), v1228, *(double *)v1344.i64), v1221, v1150), v1214, *(double *)v1183.i64);
              v1321 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1242, *(double *)v1352.i64), v1238, v1129), v1232, *(double *)v1376.i64), v1225, v1156), v1219, *(double *)v1175.i64), v1211, v1165);
              v1365 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1497, *(double *)v1352.i64), v1236, v1129), v1230, *(double *)v1376.i64), v1223, v1156), v1217, *(double *)v1175.i64), v1209, v1165);
              v1369 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1240, *(double *)v1352.i64), v1492, v1129), v1228, *(double *)v1376.i64), v1221, v1156), v1214, *(double *)v1175.i64), v1207, v1165);
              v1318 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1242, *(double *)v1356.i64), v1238, v1132), v1232, *(double *)v1336.i64), v1225, v1154), v1219, *(double *)v1348.i64), v1211, v1162);
              v1345 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1497, *(double *)v1356.i64), v1236, v1132), v1230, *(double *)v1336.i64), v1223, v1154), v1217, *(double *)v1348.i64), v1209, v1162);
              v1349 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1240, *(double *)v1356.i64), v1492, v1132), v1228, *(double *)v1336.i64), v1221, v1154), v1214, *(double *)v1348.i64), v1207, v1162);
              v1288 = vmlaq_n_f64(v477, v1211, v1160);
              v1373 = (int8x16_t)vmlaq_n_f64(v478, v1209, v1160);
              v1377 = (int8x16_t)vmlaq_n_f64(v479, v1207, v1160);
              v1361 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1242, *(double *)v1360.i64), v1238, v1136), v1232, *(double *)v1340.i64), v1225, v1147), v1219, *(double *)v1181.i64), v1211, v1170);
              v1357 = (int8x16_t)vmlaq_n_f64(v480, v1209, v1170);
              v1353 = (int8x16_t)vmlaq_n_f64(v481, v1207, v1170);
              v1341 = (int8x16_t)vmlaq_n_f64(v482, v1211, v1168);
              v1337 = (int8x16_t)vmlaq_n_f64(v483, v1209, v1168);
              v1333 = (int8x16_t)vmlaq_n_f64(v484, v1207, v1168);
              v1327 = (int8x16_t)vmlaq_n_f64(v485, v1211, v1172);
              v488 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1291, 1);
              v1169 = v488;
              v488.f64[1] = v1510.f64[1];
              v1324 = (int8x16_t)vmlaq_n_f64(v486, v1209, v1172);
              v489 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1274, 1);
              v1171 = v489;
              v489.f64[1] = v1380.f64[1];
              v1330 = (int8x16_t)vmlaq_n_f64(v487, v1207, v1172);
              v490 = (float64x2_t)vzip1q_s64((int64x2_t)v1534, (int64x2_t)v1539);
              v491 = (float64x2_t)vzip2q_s64((int64x2_t)v1534, (int64x2_t)v1539);
              v492 = (float64x2_t)vzip1q_s64((int64x2_t)v1291, (int64x2_t)v1510);
              v493 = (float64x2_t)vzip1q_s64((int64x2_t)v1274, (int64x2_t)v1380);
              v494 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1127, 1);
              v1176 = v494;
              v494.f64[1] = v1285.f64[1];
              v495 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1269, 1);
              v1173 = v495;
              v495.f64[1] = v1264.f64[1];
              v496 = (float64x2_t)vzip1q_s64((int64x2_t)__dstb, (int64x2_t)v1482);
              v497 = (float64x2_t)vzip2q_s64((int64x2_t)__dstb, (int64x2_t)v1482);
              v498 = (float64x2_t)vzip1q_s64((int64x2_t)v1127, (int64x2_t)v1285);
              v499 = (float64x2_t)vzip1q_s64((int64x2_t)v1269, (int64x2_t)v1264);
              v500 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1282, 1);
              v1178 = v500;
              v500.f64[1] = v1520.f64[1];
              v1180 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1262, 1);
              v501.f64[0] = v1180.f64[0];
              v501.f64[1] = v1267.f64[1];
              v502 = (float64x2_t)vzip1q_s64((int64x2_t)v1302, (int64x2_t)v1487);
              v503 = (float64x2_t)vzip2q_s64((int64x2_t)v1302, (int64x2_t)v1487);
              v504 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v490, v1105.f64[0]), v491, v1105, 1), v496, v1099.f64[0]), v497, v1099, 1), v502, v1093.f64[0]), v503, v1093, 1);
              v505 = (float64x2_t)vzip1q_s64((int64x2_t)v1282, (int64x2_t)v1520);
              v1501 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v1105.f64[0]), v488, v1105, 1), v498, v1099.f64[0]), v494, v1099, 1), v505, v1093.f64[0]), v500, v1093, 1);
              v506 = (float64x2_t)vzip1q_s64((int64x2_t)v1262, (int64x2_t)v1267);
              v1166 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, v1105.f64[0]), v489, v1105, 1), v499, v1099.f64[0]), v495, v1099, 1), v506, v1093.f64[0]), v501, v1093, 1);
              v507 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v490, v1111.f64[0]), v491, v1111, 1), v496, v1103.f64[0]), v497, v1103, 1), v502, v1095.f64[0]), v503, v1095, 1);
              v508 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v1111.f64[0]), v488, v1111, 1), v498, v1103.f64[0]), v494, v1103, 1), v505, v1095.f64[0]), v500, v1095, 1);
              v1163 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, v1111.f64[0]), v489, v1111, 1), v499, v1103.f64[0]), v495, v1103, 1), v506, v1095.f64[0]), v501, v1095, 1);
              v509 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v490, v1115.f64[0]), v491, v1115, 1), v496, v1109.f64[0]), v497, v1109, 1), v502, v1097.f64[0]), v503, v1097, 1);
              v510 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v1115.f64[0]), v488, v1115, 1), v498, v1109.f64[0]), v494, v1109, 1), v505, v1097.f64[0]), v500, v1097, 1);
              v1157 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, v1115.f64[0]), v489, v1115, 1), v499, v1109.f64[0]), v495, v1109, 1), v506, v1097.f64[0]), v501, v1097, 1);
              v511 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v490, v1119.f64[0]), v491, v1119, 1), v496, v1113.f64[0]), v497, v1113, 1), v502, v1101.f64[0]), v503, v1101, 1);
              v512 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v1119.f64[0]), v488, v1119, 1), v498, v1113.f64[0]), v494, v1113, 1), v505, v1101.f64[0]), v500, v1101, 1);
              v1148 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, v1119.f64[0]), v489, v1119, 1), v499, v1113.f64[0]), v495, v1113, 1), v506, v1101.f64[0]), v501, v1101, 1);
              v513 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v490, v1123.f64[0]), v491, v1123, 1), v496, v1117.f64[0]), v497, v1117, 1), v502, v1107.f64[0]), v503, v1107, 1);
              v514 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v1123.f64[0]), v488, v1123, 1), v498, v1117.f64[0]), v494, v1117, 1), v505, v1107.f64[0]), v500, v1107, 1);
              v1143 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, v1123.f64[0]), v489, v1123, 1), v499, v1117.f64[0]), v495, v1117, 1), v506, v1107.f64[0]), v501, v1107, 1);
              v1182 = v490;
              v1184 = v491;
              v1208 = v492;
              v1226 = v488;
              v1210 = v493;
              v1239 = v489;
              v1220 = v496;
              v1218 = v497;
              v1215 = v498;
              v1222 = v494;
              v1212 = v499;
              v1224 = v495;
              v1237 = v502;
              v1233 = v503;
              v515 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v490, v1125.f64[0]), v491, v1125, 1), v496, v1121.f64[0]), v497, v1121, 1), v502, v1315.f64[0]), v503, v1315, 1);
              v1231 = v505;
              v1241 = v500;
              v516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v1125.f64[0]), v488, v1125, 1), v498, v1121.f64[0]), v494, v1121, 1), v505, v1315.f64[0]), v500, v1315, 1);
              v1229 = v506;
              v1243 = v501;
              v517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, v1125.f64[0]), v489, v1125, 1), v499, v1121.f64[0]), v495, v1121, 1), v506, v1315.f64[0]), v501, v1315, 1);
              v1530 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v1534.f64[0]), v507, v1534, 1), v509, __dstb.f64[0]), v511, __dstb, 1), v513, v1302.f64[0]), v515, v1302, 1);
              v1526 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v1539.f64[0]), v507, v1539, 1), v509, v1482.f64[0]), v511, v1482, 1), v513, v1487.f64[0]), v515, v1487, 1);
              v518 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v1291.f64[0]), v507, v1291, 1), v509, v1127.f64[0]), v511, v1127, 1), v513, v1282.f64[0]), v515, v1282, 1);
              v519 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v1510.f64[0]), v507, v1510, 1), v509, v1285.f64[0]), v511, v1285, 1), v513, v1520.f64[0]), v515, v1520, 1);
              v520 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v1274.f64[0]), v507, v1274, 1), v509, v1269.f64[0]), v511, v1269, 1), v513, v1262.f64[0]), v515, v1262, 1);
              v521 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v1380.f64[0]), v507, v1380, 1), v509, v1264.f64[0]), v511, v1264, 1), v513, v1267.f64[0]), v515, v1267, 1);
              v522 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1501, v1534.f64[0]), v508, v1534, 1), v510, __dstb.f64[0]), v512, __dstb, 1), v514, v1302.f64[0]), v516, v1302, 1);
              v523 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1501, v1539.f64[0]), v508, v1539, 1), v510, v1482.f64[0]), v512, v1482, 1), v514, v1487.f64[0]), v516, v1487, 1);
              v524 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1501, v1291.f64[0]), v508, v1291, 1), v510, v1127.f64[0]), v512, v1127, 1), v514, v1282.f64[0]), v516, v1282, 1);
              v525 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1501, v1510.f64[0]), v508, v1510, 1), v510, v1285.f64[0]), v512, v1285, 1), v514, v1520.f64[0]), v516, v1520, 1);
              v526 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1501, v1274.f64[0]), v508, v1274, 1), v510, v1269.f64[0]), v512, v1269, 1), v514, v1262.f64[0]), v516, v1262, 1);
              v527 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1501, v1380.f64[0]), v508, v1380, 1), v510, v1264.f64[0]), v512, v1264, 1), v514, v1267.f64[0]), v516, v1267, 1);
              v528 = vmlaq_laneq_f64(vmulq_n_f64(v1166, v1539.f64[0]), v1163, v1539, 1);
              v529 = vmlaq_laneq_f64(vmulq_n_f64(v1166, v1291.f64[0]), v1163, v1291, 1);
              v530 = vmlaq_laneq_f64(vmulq_n_f64(v1166, v1510.f64[0]), v1163, v1510, 1);
              v531 = vmlaq_laneq_f64(vmulq_n_f64(v1166, v1274.f64[0]), v1163, v1274, 1);
              v532 = vmlaq_laneq_f64(vmulq_n_f64(v1166, v1380.f64[0]), v1163, v1380, 1);
              v1140 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__dstb.f64[0], 0);
              v1151 = (float64x2_t)vdupq_laneq_s64((int64x2_t)__dstb, 1);
              v1161 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1302.f64[0], 0);
              v533 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1166, v1534.f64[0]), v1163, v1534, 1), v1157, __dstb.f64[0]), v1148, __dstb, 1), v1143, v1302.f64[0]), v517, v1302, 1);
              v1167 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1302, 1);
              v1135 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1482.f64[0], 0);
              v1146 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1482, 1);
              v1155 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1487.f64[0], 0);
              v534 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v528, v1157, v1482.f64[0]), v1148, v1482, 1), v1143, v1487.f64[0]), v517, v1487, 1);
              v1164 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1487, 1);
              v1130 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1127.f64[0], 0);
              v535 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v529, v1157, v1127.f64[0]), v1148, v1127, 1), v1143, v1282.f64[0]), v517, v1282, 1);
              v1153 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1282.f64[0], 0);
              v536 = vmlaq_laneq_f64(vmlaq_n_f64(v531, v1157, v1269.f64[0]), v1148, v1269, 1);
              v1128 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1285.f64[0], 0);
              v537 = vmlaq_laneq_f64(vmlaq_n_f64(v532, v1157, v1264.f64[0]), v1148, v1264, 1);
              v1137 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1285, 1);
              v538 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v530, v1157, v1285.f64[0]), v1148, v1285, 1), v1143, v1520.f64[0]);
              v1149 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1520.f64[0], 0);
              v539 = (int8x16_t)vmlaq_laneq_f64(v538, v517, v1520, 1);
              v1158 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1520, 1);
              v1126 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1269.f64[0], 0);
              v540 = vmlaq_n_f64(v537, v1143, v1267.f64[0]);
              v541 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(v536, v1143, v1262.f64[0]), v517, v1262, 1);
              v1144 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1262.f64[0], 0);
              v1124 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1264.f64[0], 0);
              v1133 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1264, 1);
              v1263 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1267.f64[0], 0);
              v1265 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1267, 1);
              v542 = (int8x16_t)vmlaq_laneq_f64(v540, v517, v1267, 1);
              *(float64x2_t *)__p = v1383;
              *(float64_t *)v1656 = v1516;
              v1657 = v1271;
              *(float64_t *)v1658 = v1296;
              v1659 = (int8x16_t)v1272;
              *(float64_t *)v1660 = v1293;
              v1102 = vextq_s8(v1369, v1369, 8uLL).u64[0];
              v1098 = vextq_s8(v1365, v1365, 8uLL).u64[0];
              v1112 = vextq_s8(v1321, v1321, 8uLL).u64[0];
              v1106 = vextq_s8(v1349, v1349, 8uLL).u64[0];
              v1100 = vextq_s8(v1345, v1345, 8uLL).u64[0];
              v543 = vextq_s8(v1318, v1318, 8uLL).u64[0];
              v1110 = vextq_s8(v1377, v1377, 8uLL).u64[0];
              v1104 = vextq_s8(v1373, v1373, 8uLL).u64[0];
              v544 = (int8x16_t)v1288;
              v545 = vextq_s8(v544, v544, 8uLL).u64[0];
              v1108 = vextq_s8(v1353, v1353, 8uLL).u64[0];
              v546 = vextq_s8(v1357, v1357, 8uLL).u64[0];
              v547 = vextq_s8(v1361, v1361, 8uLL).u64[0];
              v1114 = vextq_s8(v1333, v1333, 8uLL).u64[0];
              v548 = vextq_s8(v1337, v1337, 8uLL).u64[0];
              v549 = vextq_s8(v1341, v1341, 8uLL).u64[0];
              v1116 = vextq_s8(v1330, v1330, 8uLL).u64[0];
              v550 = vextq_s8(v1324, v1324, 8uLL).u64[0];
              v551 = vextq_s8(v1327, v1327, 8uLL).u64[0];
              *(int8x16_t *)__dsta = v533;
              v1493 = (float64x2_t)v522;
              v1077 = vextq_s8(v533, v533, 8uLL).u64[0];
              v1078 = vextq_s8((int8x16_t)v1530, (int8x16_t)v1530, 8uLL).u64[0];
              v1118 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1534, 1);
              v1120 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1539, 1);
              v1483 = (float64x2_t)v534;
              v1079 = vextq_s8(v522, v522, 8uLL).u64[0];
              v1080 = vextq_s8(v534, v534, 8uLL).u64[0];
              v1498 = (float64x2_t)v523;
              v1081 = vextq_s8((int8x16_t)v1526, (int8x16_t)v1526, 8uLL).u64[0];
              v1082 = vextq_s8(v523, v523, 8uLL).u64[0];
              v1488 = (float64x2_t)v535;
              v1303 = (float64x2_t)v524;
              v1085 = vextq_s8(v524, v524, 8uLL).u64[0];
              v1506 = (float64x2_t)v518;
              v1083 = vextq_s8(v535, v535, 8uLL).u64[0];
              v1084 = vextq_s8(v518, v518, 8uLL).u64[0];
              v1122 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1510, 1);
              v1283 = (float64x2_t)v539;
              v1502 = (float64x2_t)v525;
              v1088 = vextq_s8(v525, v525, 8uLL).u64[0];
              v1270 = (float64x2_t)v519;
              v1086 = vextq_s8(v539, v539, 8uLL).u64[0];
              v1087 = vextq_s8(v519, v519, 8uLL).u64[0];
              v1521 = (float64x2_t)v541;
              v1307 = (float64x2_t)v526;
              v1091 = vextq_s8(v526, v526, 8uLL).u64[0];
              v1316 = (float64x2_t)v520;
              v1089 = vextq_s8(v541, v541, 8uLL).u64[0];
              v1090 = vextq_s8(v520, v520, 8uLL).u64[0];
              v1268 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1380, 1);
              v1286 = (float64x2_t)v542;
              v1309 = (float64x2_t)v527;
              v1096 = vextq_s8(v527, v527, 8uLL).u64[0];
              v1313 = (float64x2_t)v521;
              v1092 = vextq_s8(v542, v542, 8uLL).u64[0];
              v1094 = vextq_s8(v521, v521, 8uLL).u64[0];
              v552 = vextq_s8(*(int8x16_t *)__p, *(int8x16_t *)__p, 8uLL).u64[0];
              v553 = vextq_s8(v1657, v1657, 8uLL).u64[0];
              v554 = vextq_s8(v1659, v1659, 8uLL);
              do
              {
                v1661.i64[v475] = 0;
                v555 = v476 < 2;
                if (v476 < 2)
                  ++v476;
                else
                  v476 = 0;
                if (v555)
                  ++v475;
                else
                  v475 += 4;
              }
              while (v475 != 18);
              v556.f64[0] = v1464;
              v556.f64[1] = v1414;
              v557.f64[0] = v1460;
              v557.f64[1] = v1405;
              v558.f64[0] = v1441;
              v558.f64[1] = v1389;
              v559.f64[0] = v1444;
              v559.f64[1] = v1385;
              v560.f64[0] = v1559;
              v560.f64[1] = v1417;
              v1560 = v560;
              v560.f64[0] = v1553;
              v560.f64[1] = v1408;
              v1554 = v560;
              v561.f64[0] = v1453;
              v561.f64[1] = v1393;
              v562.f64[0] = v1448;
              v562.f64[1] = v1387;
              v560.f64[0] = v1576;
              v560.f64[1] = v1420;
              v1577 = v560;
              v560.f64[0] = v1568;
              v560.f64[1] = v1411;
              v1569 = v560;
              v560.f64[0] = v1541;
              v560.f64[1] = v1395;
              v1542 = v560;
              v563.f64[0] = v1299;
              v563.f64[1] = v1391;
              v564.f64[0] = v1468;
              v564.f64[1] = v1426;
              v565.f64[0] = v1438;
              v565.f64[1] = v1398;
              v566.f64[0] = v1473;
              v566.f64[1] = v1429;
              v567.f64[0] = v1456;
              v567.f64[1] = v1399;
              v560.f64[0] = v1597;
              v560.f64[1] = v1432;
              *(float64x2_t *)v1598 = v560;
              v560.f64[0] = v1547;
              v560.f64[1] = v1402;
              v1548 = v560;
              *(_QWORD *)&v568.f64[0] = v1321.i64[0];
              *(_QWORD *)&v568.f64[1] = v1112;
              v1322 = v568;
              *(_QWORD *)&v568.f64[0] = v1365.i64[0];
              *(_QWORD *)&v568.f64[1] = v1098;
              v1366 = v568;
              *(_QWORD *)&v568.f64[0] = v1369.i64[0];
              *(_QWORD *)&v568.f64[1] = v1102;
              v1370 = v568;
              *(_QWORD *)&v568.f64[0] = v1318.i64[0];
              *(_QWORD *)&v568.f64[1] = v543;
              v1319 = v568;
              *(_QWORD *)&v568.f64[0] = v1345.i64[0];
              *(_QWORD *)&v568.f64[1] = v1100;
              v1346 = v568;
              *(_QWORD *)&v568.f64[0] = v1349.i64[0];
              *(_QWORD *)&v568.f64[1] = v1106;
              v1350 = v568;
              v544.i64[1] = v545;
              v1289 = (float64x2_t)v544;
              *(_QWORD *)&v568.f64[0] = v1373.i64[0];
              *(_QWORD *)&v568.f64[1] = v1104;
              v1374 = v568;
              *(_QWORD *)&v568.f64[0] = v1377.i64[0];
              *(_QWORD *)&v568.f64[1] = v1110;
              v1378 = v568;
              *(_QWORD *)&v568.f64[0] = v1361.i64[0];
              *(_QWORD *)&v568.f64[1] = v547;
              v1362 = v568;
              *(_QWORD *)&v568.f64[0] = v1357.i64[0];
              *(_QWORD *)&v568.f64[1] = v546;
              v1358 = v568;
              *(_QWORD *)&v568.f64[0] = v1353.i64[0];
              *(_QWORD *)&v568.f64[1] = v1108;
              v1354 = v568;
              *(_QWORD *)&v568.f64[0] = v1341.i64[0];
              *(_QWORD *)&v568.f64[1] = v549;
              v1342 = v568;
              *(_QWORD *)&v568.f64[0] = v1337.i64[0];
              *(_QWORD *)&v568.f64[1] = v548;
              v1338 = v568;
              *(_QWORD *)&v568.f64[0] = v1333.i64[0];
              *(_QWORD *)&v568.f64[1] = v1114;
              v1334 = v568;
              *(_QWORD *)&v568.f64[0] = v1327.i64[0];
              *(_QWORD *)&v568.f64[1] = v551;
              v1328 = v568;
              *(_QWORD *)&v568.f64[0] = v1324.i64[0];
              *(_QWORD *)&v568.f64[1] = v550;
              v1325 = v568;
              *(_QWORD *)&v568.f64[0] = v1330.i64[0];
              *(_QWORD *)&v568.f64[1] = v1116;
              v1331 = v568;
              v568.f64[0] = v1293;
              v568.f64[1] = v1272.f64[0];
              v569.f64[0] = v1275.f64[0];
              v560.f64[0] = v1131;
              v569.f64[1] = v1131;
              v560.f64[1] = v1277.f64[0];
              *(_QWORD *)&v570.f64[0] = v554.i64[0];
              v570.f64[1] = v1293;
              v1474 = vmlsq_f64(vmulq_f64(v568, v569), v570, v560);
              v568.f64[0] = v1516;
              v568.f64[1] = v1383.f64[0];
              v571 = vmulq_f64(v568, v569);
              *(_QWORD *)&v568.f64[0] = v1271.i64[0];
              *(_QWORD *)&v568.f64[1] = v553;
              *(_QWORD *)&v570.f64[0] = v552;
              v570.f64[1] = v1516;
              v1469 = vmlsq_f64(v571, v570, v560);
              v572 = vmulq_f64(v568, v560);
              v568.f64[0] = v1277.f64[0];
              v568.f64[1] = v1275.f64[0];
              v570.f64[0] = v1296;
              *(_QWORD *)&v570.f64[1] = v1271.i64[0];
              v1465 = (int8x16_t)vmlsq_f64(v572, v570, v568);
              *(_QWORD *)&v570.f64[0] = v552;
              v570.f64[1] = v1296;
              v573 = vmulq_f64(v570, v568);
              v568.f64[0] = v1383.f64[0];
              *(_QWORD *)&v568.f64[1] = v553;
              v1461 = (int8x16_t)vmlsq_f64(v573, v568, v569);
              v574 = vmlaq_f64(vmulq_n_f64(v564, v1423.f64[0]), v1138, v565);
              v575 = vmlaq_f64(vmulq_n_f64(v564, v1435.f64[0]), v1141, v565);
              v576 = vmlaq_f64(vmulq_n_f64(v564, v1278.f64[0]), v1206, v565);
              v1457 = v553;
              v577 = vmlaq_f64(vmulq_n_f64(v564, v1298.f64[0]), v1159, v565);
              v1454 = v552;
              v578 = vmlaq_f64(vmulq_n_f64(v564, v1227), v1201, v565);
              v1449 = (float64x2_t)v554;
              v579 = vmlaq_f64(vmulq_n_f64(v564, v1280.f64[0]), v1174, v565);
              v580 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v557, v1423.f64[0]), v1138, v559), v1190, v1554), v1194, v562), v1200, v1569);
              v581 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v557, v1435.f64[0]), v1141, v559), v1188, v1554), v1192, v562), v1198, v1569);
              v582 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v556, v1278.f64[0]), v1206, v558), v1186, v1560), v1234, v561), v1197, v1577);
              v583 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v557, v1278.f64[0]), v1206, v559), v1186, v1554), v1234, v562), v1197, v1569);
              v584 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v556, v1298.f64[0]), v1159, v558), v1187, v1560), v1191, v561), v1196, v1577);
              v585 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v557, v1298.f64[0]), v1159, v559), v1187, v1554), v1191, v562), v1196, v1569);
              v586 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v556, v1227), v1201, v558), v1185, v1560), v1213, v561), v1195, v1577);
              v587 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v557, v1227), v1201, v559), v1185, v1554), v1213, v562), v1195, v1569);
              v588 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v556, v1280.f64[0]), v1174, v558), v1189, v1560), v1193, v561), v1199, v1577);
              v589 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v557, v1280.f64[0]), v1174, v559), v1189, v1554), v1193, v562), v1199, v1569);
              v590 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v574, v1190, v566), v1194, v567), v1200, *(float64x2_t *)v1598), v1205, v1548);
              v1555 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v556, v1423.f64[0]), v1138, v558), v1190, v1560), v1194, v561), v1200, v1577), v1205, v1542);
              v1570 = vmlaq_f64(v580, v1205, v563);
              v591 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v575, v1188, v566), v1192, v567), v1198, *(float64x2_t *)v1598), v1203, v1548);
              v1561 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v556, v1435.f64[0]), v1141, v558), v1188, v1560), v1192, v561), v1198, v1577), v1203, v1542);
              v1578 = vmlaq_f64(v581, v1203, v563);
              v592 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v576, v1186, v566), v1234, v567), v1197, *(float64x2_t *)v1598), v1235, v1548);
              v1445 = vmlaq_f64(v582, v1235, v1542);
              v593 = vmlaq_f64(v583, v1235, v563);
              v594 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v577, v1187, v566), v1191, v567), v1196, *(float64x2_t *)v1598), v1202, v1548);
              v595 = vmlaq_f64(v584, v1202, v1542);
              v596 = vmlaq_f64(v585, v1202, v563);
              v597 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v578, v1185, v566), v1213, v567), v1195, *(float64x2_t *)v1598), v1216, v1548);
              v598 = vmlaq_f64(v586, v1216, v1542);
              v599 = vmlaq_f64(v587, v1216, v563);
              v600 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v579, v1189, v566), v1193, v567), v1199, *(float64x2_t *)v1598), v1204, v1548);
              v601 = vmlaq_f64(v588, v1204, v1542);
              v602 = vmlaq_f64(v589, v1204, v563);
              v603 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1261, v597.f64[0]), v1255, v597, 1), v1258, v598.f64[0]), v1257, v598, 1);
              v604 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1250, v597.f64[0]), v1251, v597, 1), v1252, v598.f64[0]), v1254, v598, 1);
              v605 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1244, v597.f64[0]), v1245, v597, 1), v1246, v598.f64[0]), v1247, v598, 1);
              v606 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1261, v590.f64[0]), v1255, v590, 1), v1258, v1555.f64[0]), v1257, v1555, 1), v1260, v1570.f64[0]), v1259, v1570, 1);
              v607 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1244, v590.f64[0]), v1245, v590, 1), v1246, v1555.f64[0]), v1247, v1555, 1), v1248, v1570.f64[0]), v1249, v1570, 1);
              v608 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1261, v591.f64[0]), v1255, v591, 1), v1258, v1561.f64[0]), v1257, v1561, 1), v1260, v1578.f64[0]), v1259, v1578, 1);
              v609 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1250, v591.f64[0]), v1251, v591, 1), v1252, v1561.f64[0]), v1254, v1561, 1), v1253, v1578.f64[0]), v1256, v1578, 1);
              v610 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1244, v591.f64[0]), v1245, v591, 1), v1246, v1561.f64[0]), v1247, v1561, 1), v1248, v1578.f64[0]), v1249, v1578, 1);
              v1562 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1261, v592.f64[0]), v1255, v592, 1), v1258, v1445.f64[0]), v1257, v1445, 1), v1260, v593.f64[0]), v1259, v593, 1);
              v611 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1250, v592.f64[0]), v1251, v592, 1), v1252, v1445.f64[0]), v1254, v1445, 1), v1253, v593.f64[0]), v1256, v593, 1);
              v612 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1244, v592.f64[0]), v1245, v592, 1), v1246, v1445.f64[0]), v1247, v1445, 1), v1248, v593.f64[0]), v1249, v593, 1);
              v613 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1261, v594.f64[0]), v1255, v594, 1), v1258, v595.f64[0]), v1257, v595, 1), v1260, v596.f64[0]), v1259, v596, 1);
              v614 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1250, v594.f64[0]), v1251, v594, 1), v1252, v595.f64[0]), v1254, v595, 1), v1253, v596.f64[0]), v1256, v596, 1);
              v615 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1244, v594.f64[0]), v1245, v594, 1), v1246, v595.f64[0]), v1247, v595, 1), v1248, v596.f64[0]), v1249, v596, 1);
              v616 = vmlaq_laneq_f64(vmlaq_n_f64(v603, v1260, v599.f64[0]), v1259, v599, 1);
              v617 = vmlaq_laneq_f64(vmlaq_n_f64(v604, v1253, v599.f64[0]), v1256, v599, 1);
              v618 = vmlaq_laneq_f64(vmlaq_n_f64(v605, v1248, v599.f64[0]), v1249, v599, 1);
              v619 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1261, v600.f64[0]), v1255, v600, 1), v1258, v601.f64[0]), v1257, v601, 1), v1260, v602.f64[0]), v1259, v602, 1);
              v620 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1250, v600.f64[0]), v1251, v600, 1), v1252, v601.f64[0]), v1254, v601, 1), v1253, v602.f64[0]), v1256, v602, 1);
              v621 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1244, v600.f64[0]), v1245, v600, 1), v1246, v601.f64[0]), v1247, v601, 1), v1248, v602.f64[0]), v1249, v602, 1);
              v622 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1250, v590.f64[0]), v1251, v590, 1), v1252, v1555.f64[0]), v1254, v1555, 1), v1253, v1570.f64[0]), v1256, v1570, 1);
              v623 = v610;
              v624 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v606, v1274.f64[0]), v1171, v608), v1126, v1562), v1173, v613), v1144, v616);
              v625 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v606, v1380.f64[0]), v1268, v608), v1124, v1562), v1133, v613), v1263, v616);
              v626 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v606, v1534.f64[0]), v1118, v608), v1140, v1562), v1151, v613), v1161, v616), v1167, v619);
              v1549 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v622, v1534.f64[0]), v1118, v609), v1140, v611), v1151, v614), v1161, v617), v1167, v620);
              v1599 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v607, v1534.f64[0]), v1118, v610), v1140, v612), v1151, v615), v1161, v618), v1167, v621);
              v627 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v606, v1539.f64[0]), v1120, v608), v1135, v1562), v1146, v613), v1155, v616), v1164, v619);
              v628 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v622, v1539.f64[0]), v1120, v609), v1135, v611), v1146, v614), v1155, v617), v1164, v620);
              v1579 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v607, v1539.f64[0]), v1120, v610), v1135, v612), v1146, v615), v1155, v618), v1164, v621);
              v629 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v606, v1291.f64[0]), v1169, v608), v1130, v1562), v1176, v613), v1153, v616), v1178, v619);
              v1556 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v622, v1291.f64[0]), v1169, v609), v1130, v611), v1176, v614), v1153, v617), v1178, v620);
              v1543 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v607, v1291.f64[0]), v1169, v610), v1130, v612), v1176, v615), v1153, v618), v1178, v621);
              v630 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v606, v1510.f64[0]), v1122, v608), v1128, v1562), v1137, v613), v1149, v616), v1158, v619);
              v631 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v622, v1510.f64[0]), v1122, v609), v1128, v611), v1137, v614), v1149, v617), v1158, v620);
              v1563 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v607, v1510.f64[0]), v1122, v623), v1128, v612), v1137, v615), v1149, v618), v1158, v621);
              v632 = vmlaq_f64(v624, v1180, v619);
              v633 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v622, v1274.f64[0]), v1171, v609), v1126, v611), v1173, v614), v1144, v617), v1180, v620);
              v634 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v607, v1274.f64[0]), v1171, v623), v1126, v612), v1173, v615), v1144, v618), v1180, v621);
              v635 = vmlaq_f64(v625, v1265, v619);
              v636 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v622, v1380.f64[0]), v1268, v609), v1124, v611), v1133, v614), v1263, v617), v1265, v620);
              v637 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v607, v1380.f64[0]), v1268, v623), v1124, v612), v1133, v615), v1263, v618), v1265, v621);
              v638 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1182, v626.f64[0]), v1184, v626, 1), v1220, v1549.f64[0]), v1218, v1549, 1), v1237, v1599.f64[0]), v1233, v1599, 1);
              v639 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1208, v626.f64[0]), v1226, v626, 1), v1215, v1549.f64[0]), v1222, v1549, 1), v1231, v1599.f64[0]), v1241, v1599, 1);
              v640 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1210, v626.f64[0]), v1239, v626, 1), v1212, v1549.f64[0]), v1224, v1549, 1), v1229, v1599.f64[0]), v1243, v1599, 1);
              v641 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1182, v627.f64[0]), v1184, v627, 1), v1220, v628.f64[0]), v1218, v628, 1), v1237, v1579.f64[0]), v1233, v1579, 1);
              v642 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1208, v627.f64[0]), v1226, v627, 1), v1215, v628.f64[0]), v1222, v628, 1), v1231, v1579.f64[0]), v1241, v1579, 1);
              v643 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1210, v627.f64[0]), v1239, v627, 1), v1212, v628.f64[0]), v1224, v628, 1), v1229, v1579.f64[0]), v1243, v1579, 1);
              v644 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1182, v629.f64[0]), v1184, v629, 1), v1220, v1556.f64[0]), v1218, v1556, 1), v1237, v1543.f64[0]), v1233, v1543, 1);
              v645 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1208, v629.f64[0]), v1226, v629, 1), v1215, v1556.f64[0]), v1222, v1556, 1), v1231, v1543.f64[0]), v1241, v1543, 1);
              v646 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1210, v629.f64[0]), v1239, v629, 1), v1212, v1556.f64[0]), v1224, v1556, 1), v1229, v1543.f64[0]), v1243, v1543, 1);
              v647 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1182, v630.f64[0]), v1184, v630, 1), v1220, v631.f64[0]), v1218, v631, 1), v1237, v1563.f64[0]), v1233, v1563, 1);
              v648 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1208, v630.f64[0]), v1226, v630, 1), v1215, v631.f64[0]), v1222, v631, 1), v1231, v1563.f64[0]), v1241, v1563, 1);
              v649 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1210, v630.f64[0]), v1239, v630, 1), v1212, v631.f64[0]), v1224, v631, 1), v1229, v1563.f64[0]), v1243, v1563, 1);
              v650 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1182, v632.f64[0]), v1184, v632, 1), v1220, v633.f64[0]), v1218, v633, 1), v1237, v634.f64[0]), v1233, v634, 1);
              v651 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1208, v632.f64[0]), v1226, v632, 1), v1215, v633.f64[0]), v1222, v633, 1), v1231, v634.f64[0]), v1241, v634, 1);
              v652 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1210, v632.f64[0]), v1239, v632, 1), v1212, v633.f64[0]), v1224, v633, 1), v1229, v634.f64[0]), v1243, v634, 1);
              v1396 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1182, v635.f64[0]), v1184, v635, 1), v1220, v636.f64[0]), v1218, v636, 1), v1237, v637.f64[0]), v1233, v637, 1);
              v653 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1208, v635.f64[0]), v1226, v635, 1), v1215, v636.f64[0]), v1222, v636, 1), v1231, v637.f64[0]), v1241, v637, 1);
              v654 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1210, v635.f64[0]), v1239, v635, 1), v1212, v636.f64[0]), v1224, v636, 1), v1229, v637.f64[0]), v1243, v637, 1);
              *(float64x2_t *)&v1656[8] = v1469;
              *(_QWORD *)&v1658[24] = v1465.i64[1];
              *(int8x16_t *)&v1658[8] = vextq_s8(v1461, v1465, 8uLL);
              *(_QWORD *)&v1656[24] = v1461.i64[0];
              *(_QWORD *)&v1660[24] = *(_OWORD *)&vmlsq_f64(vmulq_f64(v1449, v1277), v1272, v1275);
              *(float64x2_t *)&v1660[8] = v1474;
              v633.f64[0] = v1383.f64[0];
              *(_QWORD *)&v633.f64[1] = v1454;
              *(float64x2_t *)&v1662[8] = v633;
              *(float64_t *)&v1662[24] = v1516;
              *(float64_t *)&v1664[24] = v1296;
              *(_QWORD *)&v633.f64[0] = v1271.i64[0];
              *(_QWORD *)&v633.f64[1] = v1457;
              *(float64x2_t *)&v1664[8] = v633;
              *(float64_t *)&v1666[24] = v1293;
              v633.f64[0] = v1272.f64[0];
              v633.f64[1] = v1449.f64[0];
              *(float64x2_t *)&v1666[8] = v633;
              v1433 = (float64x2_t)v1659;
              v1439 = (float64x2_t)v1661;
              *(_QWORD *)&v633.f64[0] = vdupq_laneq_s64((int64x2_t)v1659, 1).u64[0];
              *(_QWORD *)&v633.f64[1] = v1661.i64[1];
              *(_QWORD *)&v626.f64[0] = vdupq_laneq_s64(v1663, 1).u64[0];
              v1442 = (float64x2_t)v1663;
              *(_QWORD *)&v626.f64[1] = v1665.i64[1];
              v1446 = (float64x2_t)v1665;
              v1406 = *(float64x2_t *)__p;
              v1415 = (float64x2_t)v1657;
              v655 = (float64x2_t)vzip1q_s64(*(int64x2_t *)__p, (int64x2_t)v1657);
              v1511 = (float64x2_t)vzip2q_s64(*(int64x2_t *)__p, (int64x2_t)v1657);
              v656 = vmlaq_laneq_f64(vmulq_n_f64(v655, v638.f64[0]), v1511, v638, 1);
              v1580 = (float64x2_t)vzip1q_s64((int64x2_t)v1659, v1661);
              v657 = vmlaq_laneq_f64(vmulq_n_f64(v1580, v638.f64[0]), v633, v638, 1);
              v1600 = (float64x2_t)vzip1q_s64(v1663, v1665);
              v658 = vmlaq_laneq_f64(vmulq_n_f64(v1600, v638.f64[0]), v626, v638, 1);
              v1421 = *(float64x2_t *)v1660;
              v1427 = *(float64x2_t *)v1662;
              *(_QWORD *)&v628.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v1660, 1).u64[0];
              v628.f64[1] = *(float64_t *)&v1662[8];
              v1564 = v628;
              v1430 = *(float64x2_t *)v1664;
              v1436 = *(float64x2_t *)v1666;
              *(_QWORD *)&v638.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v1664, 1).u64[0];
              v638.f64[1] = *(float64_t *)&v1666[8];
              v1403 = *(float64x2_t *)v1656;
              v1412 = *(float64x2_t *)v1658;
              v1462 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1656, *(int64x2_t *)v1658);
              v1470 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1656, *(int64x2_t *)v1658);
              v1544 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1660, *(int64x2_t *)v1662);
              v659 = vmlaq_laneq_f64(vmlaq_n_f64(v657, v1544, v639.f64[0]), v628, v639, 1);
              v1571 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1664, *(int64x2_t *)v1666);
              *(_QWORD *)&v628.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1660[16], 1).u64[0];
              v1418 = *(float64x2_t *)&v1660[16];
              v628.f64[1] = v1516;
              v1424 = *(float64x2_t *)&v1662[16];
              v1450 = *(float64x2_t *)&v1664[16];
              v1455 = *(float64x2_t *)&v1666[16];
              *(_QWORD *)&v637.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1664[16], 1).u64[0];
              v637.f64[1] = v1293;
              v1466 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1656[16], *(int64x2_t *)&v1658[16]);
              v1400 = *(float64x2_t *)&v1656[16];
              v1409 = *(float64x2_t *)&v1658[16];
              v1458 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1656[16], *(int64x2_t *)&v1658[16]);
              v1535 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1660[16], *(int64x2_t *)&v1662[16]);
              v1517 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1664[16], *(int64x2_t *)&v1666[16]);
              v1638 = vmlaq_laneq_f64(vmlaq_n_f64(v659, v1535, v640.f64[0]), v628, v640, 1);
              *(float64x2_t *)v1637 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v656, v1462, v639.f64[0]), v1470, v639, 1), v1466, v640.f64[0]), v1458, v640, 1);
              v1642 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v641.f64[0]), v626, v641, 1), v1571, v642.f64[0]), v638, v642, 1), v1517, v643.f64[0]), v637, v643, 1);
              v1641 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v641.f64[0]), v633, v641, 1), v1544, v642.f64[0]), v1564, v642, 1), v1535, v643.f64[0]), v628, v643, 1);
              v1639 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v658, v1571, v639.f64[0]), v638, v639, 1), v1517, v640.f64[0]), v637, v640, 1);
              v1640 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v641.f64[0]), v1511, v641, 1), v1462, v642.f64[0]), v1470, v642, 1), v1466, v643.f64[0]), v1458, v643, 1);
              v1644 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v644.f64[0]), v633, v644, 1), v1544, v645.f64[0]), v1564, v645, 1), v1535, v646.f64[0]), v628, v646, 1);
              v1643 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v644.f64[0]), v1511, v644, 1), v1462, v645.f64[0]), v1470, v645, 1), v1466, v646.f64[0]), v1458, v646, 1);
              v1648 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v647.f64[0]), v626, v647, 1), v1571, v648.f64[0]), v638, v648, 1), v1517, v649.f64[0]), v637, v649, 1);
              v1647 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v647.f64[0]), v633, v647, 1), v1544, v648.f64[0]), v1564, v648, 1), v1535, v649.f64[0]), v628, v649, 1);
              v1645 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v644.f64[0]), v626, v644, 1), v1571, v645.f64[0]), v638, v645, 1), v1517, v646.f64[0]), v637, v646, 1);
              v1646 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v647.f64[0]), v1511, v647, 1), v1462, v648.f64[0]), v1470, v648, 1), v1466, v649.f64[0]), v1458, v649, 1);
              v1650 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v650.f64[0]), v633, v650, 1), v1544, v651.f64[0]), v1564, v651, 1), v1535, v652.f64[0]), v628, v652, 1);
              v1649 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v650.f64[0]), v1511, v650, 1), v1462, v651.f64[0]), v1470, v651, 1), v1466, v652.f64[0]), v1458, v652, 1);
              v1654 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v1396.f64[0]), v626, v1396, 1), v1571, v653.f64[0]), v638, v653, 1), v1517, v654.f64[0]), v637, v654, 1);
              v1653 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v1396.f64[0]), v633, v1396, 1), v1544, v653.f64[0]), v1564, v653, 1), v1535, v654.f64[0]), v628, v654, 1);
              v1651 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v650.f64[0]), v626, v650, 1), v1571, v651.f64[0]), v638, v651, 1), v1517, v652.f64[0]), v637, v652, 1);
              v1652 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v1396.f64[0]), v1511, v1396, 1), v1462, v653.f64[0]), v1470, v653, 1), v1466, v654.f64[0]), v1458, v654, 1);
              v660 = vmlaq_laneq_f64(vmulq_n_f64(v655, v1316.f64[0]), v1511, v1316, 1);
              v661 = vmlaq_laneq_f64(vmulq_n_f64(v655, v1313.f64[0]), v1511, v1313, 1);
              v662 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v1530.f64[0]), v1511, v1530, 1), v1462, v1493.f64[0]);
              v663 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v1526.f64[0]), v1511, v1526, 1), v1462, v1498.f64[0]);
              v664 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v1506.f64[0]), v1511, v1506, 1), v1462, v1303.f64[0]), v1470, v1303, 1), v1466, v1488.f64[0]);
              v665 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v655, v1270.f64[0]), v1511, v1270, 1), v1462, v1502.f64[0]), v1470, v1502, 1), v1466, v1283.f64[0]);
              v666 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v660, v1462, v1307.f64[0]), v1470, v1307, 1), v1466, v1521.f64[0]);
              v667 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v661, v1462, v1309.f64[0]), v1470, v1309, 1), v1466, v1286.f64[0]);
              v668 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v662, v1470, v1493, 1), v1466, *(double *)__dsta), v1458, *(float64x2_t *)__dsta, 1);
              v1471 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v663, v1470, v1498, 1), v1466, v1483.f64[0]), v1458, v1483, 1);
              v1475 = vmlaq_laneq_f64(v664, v1458, v1488, 1);
              v1512 = vmlaq_laneq_f64(v665, v1458, v1283, 1);
              v669 = vmlaq_laneq_f64(v666, v1458, v1521, 1);
              v670 = vmlaq_laneq_f64(v667, v1458, v1286, 1);
              v671 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v1530.f64[0]), v633, v1530, 1), v1544, v1493.f64[0]), v1564, v1493, 1), v1535, *(double *)__dsta), v628, *(float64x2_t *)__dsta, 1);
              v672 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v1526.f64[0]), v633, v1526, 1), v1544, v1498.f64[0]), v1564, v1498, 1), v1535, v1483.f64[0]), v628, v1483, 1);
              v673 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v1506.f64[0]), v633, v1506, 1), v1544, v1303.f64[0]), v1564, v1303, 1), v1535, v1488.f64[0]), v628, v1488, 1);
              v674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v1270.f64[0]), v633, v1270, 1), v1544, v1502.f64[0]), v1564, v1502, 1), v1535, v1283.f64[0]), v628, v1283, 1);
              v675 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v1316.f64[0]), v633, v1316, 1), v1544, v1307.f64[0]), v1564, v1307, 1), v1535, v1521.f64[0]), v628, v1521, 1);
              v676 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1580, v1313.f64[0]), v633, v1313, 1), v1544, v1309.f64[0]), v1564, v1309, 1), v1535, v1286.f64[0]), v628, v1286, 1);
              v677 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v1530.f64[0]), v626, v1530, 1), v1571, v1493.f64[0]), v638, v1493, 1), v1517, *(double *)__dsta), v637, *(float64x2_t *)__dsta, 1);
              v678 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v1526.f64[0]), v626, v1526, 1), v1571, v1498.f64[0]), v638, v1498, 1), v1517, v1483.f64[0]), v637, v1483, 1);
              v679 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v1506.f64[0]), v626, v1506, 1), v1571, v1303.f64[0]), v638, v1303, 1), v1517, v1488.f64[0]), v637, v1488, 1);
              v680 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v1270.f64[0]), v626, v1270, 1), v1571, v1502.f64[0]), v638, v1502, 1), v1517, v1283.f64[0]), v637, v1283, 1);
              v681 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v1316.f64[0]), v626, v1316, 1), v1571, v1307.f64[0]), v638, v1307, 1), v1517, v1521.f64[0]), v637, v1521, 1);
              v682 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1600, v1313.f64[0]), v626, v1313, 1), v1571, v1309.f64[0]), v638, v1309, 1), v1517, v1286.f64[0]), v637, v1286, 1);
              *(float64x2_t *)&v1620[40] = vaddq_f64(v1370, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v677, *(double *)__p), v678, *(float64x2_t *)__p, 1), v679, *(double *)v1656), v680, *(float64x2_t *)v1656, 1), v681, *(double *)&v1656[16]), v682, *(float64x2_t *)&v1656[16],
                                               1));
              *(float64x2_t *)&v1620[24] = vaddq_f64(v1366, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671, *(double *)__p), v672, *(float64x2_t *)__p, 1), v673, *(double *)v1656), v674, *(float64x2_t *)v1656, 1), v675, *(double *)&v1656[16]), v676, *(float64x2_t *)&v1656[16],
                                               1));
              *(float64x2_t *)&v1620[8] = vaddq_f64(v1322, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)__p), v1471, *(float64x2_t *)__p, 1), v1475, *(double *)v1656), v1512, *(float64x2_t *)v1656, 1), v669, *(double *)&v1656[16]), v670, *(float64x2_t *)&v1656[16],
                                              1));
              *(float64x2_t *)&v1620[88] = vaddq_f64(v1350, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v677, *(double *)v1657.i64), v678, (float64x2_t)v1657, 1), v679, *(double *)v1658), v680, *(float64x2_t *)v1658, 1), v681, *(double *)&v1658[16]), v682, *(float64x2_t *)&v1658[16],
                                               1));
              *(float64x2_t *)&v1620[72] = vaddq_f64(v1346, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671, *(double *)v1657.i64), v672, (float64x2_t)v1657, 1), v673, *(double *)v1658), v674, *(float64x2_t *)v1658, 1), v675, *(double *)&v1658[16]), v676, *(float64x2_t *)&v1658[16],
                                               1));
              *(float64x2_t *)&v1620[56] = vaddq_f64(v1319, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)v1657.i64), v1471, (float64x2_t)v1657, 1), v1475, *(double *)v1658), v1512, *(float64x2_t *)v1658, 1), v669, *(double *)&v1658[16]), v670, *(float64x2_t *)&v1658[16],
                                               1));
              *(float64x2_t *)&v1620[136] = vaddq_f64(v1378, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v677, *(double *)v1659.i64), v678, (float64x2_t)v1659, 1), v679, *(double *)v1660), v680, *(float64x2_t *)v1660, 1), v681, *(double *)&v1660[16]), v682, *(float64x2_t *)&v1660[16],
                                                1));
              *(float64x2_t *)&v1620[120] = vaddq_f64(v1374, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671, *(double *)v1659.i64), v672, (float64x2_t)v1659, 1), v673, *(double *)v1660), v674, *(float64x2_t *)v1660, 1), v675, *(double *)&v1660[16]), v676, *(float64x2_t *)&v1660[16],
                                                1));
              *(float64x2_t *)&v1620[104] = vaddq_f64(v1289, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)v1659.i64), v1471, (float64x2_t)v1659, 1), v1475, *(double *)v1660), v1512, *(float64x2_t *)v1660, 1), v669, *(double *)&v1660[16]), v670, *(float64x2_t *)&v1660[16],
                                                1));
              *(float64x2_t *)&v1620[184] = vaddq_f64(v1354, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v677, *(double *)v1661.i64), v678, (float64x2_t)v1661, 1), v679, *(double *)v1662), v680, *(float64x2_t *)v1662, 1), v681, *(double *)&v1662[16]), v682, *(float64x2_t *)&v1662[16],
                                                1));
              *(_QWORD *)v1620 = 2;
              *(float64x2_t *)&v1620[168] = vaddq_f64(v1358, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671, *(double *)v1661.i64), v672, (float64x2_t)v1661, 1), v673, *(double *)v1662), v674, *(float64x2_t *)v1662, 1), v675, *(double *)&v1662[16]), v676, *(float64x2_t *)&v1662[16],
                                                1));
              *(float64x2_t *)&v1620[152] = vaddq_f64(v1362, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)v1661.i64), v1471, (float64x2_t)v1661, 1), v1475, *(double *)v1662), v1512, *(float64x2_t *)v1662, 1), v669, *(double *)&v1662[16]), v670, *(float64x2_t *)&v1662[16],
                                                1));
              *(float64x2_t *)&v1620[232] = vaddq_f64(v1334, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v677, *(double *)v1663.i64), v678, (float64x2_t)v1663, 1), v679, *(double *)v1664), v680, *(float64x2_t *)v1664, 1), v681, *(double *)&v1664[16]), v682, *(float64x2_t *)&v1664[16],
                                                1));
              *(float64x2_t *)&v1620[216] = vaddq_f64(v1338, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671, *(double *)v1663.i64), v672, (float64x2_t)v1663, 1), v673, *(double *)v1664), v674, *(float64x2_t *)v1664, 1), v675, *(double *)&v1664[16]), v676, *(float64x2_t *)&v1664[16],
                                                1));
              *(float64x2_t *)&v1620[200] = vaddq_f64(v1342, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)v1663.i64), v1471, (float64x2_t)v1663, 1), v1475, *(double *)v1664), v1512, *(float64x2_t *)v1664, 1), v669, *(double *)&v1664[16]), v670, *(float64x2_t *)&v1664[16],
                                                1));
              *(float64x2_t *)&v1620[264] = vaddq_f64(v1325, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v671, *(double *)v1665.i64), v672, (float64x2_t)v1665, 1), v673, *(double *)v1666), v674, *(float64x2_t *)v1666, 1), v675, *(double *)&v1666[16]), v676, *(float64x2_t *)&v1666[16],
                                                1));
              *(float64x2_t *)&v1620[280] = vaddq_f64(v1331, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v677, *(double *)v1665.i64), v678, (float64x2_t)v1665, 1), v679, *(double *)v1666), v680, *(float64x2_t *)v1666, 1), v681, *(double *)&v1666[16]), v682, *(float64x2_t *)&v1666[16],
                                                1));
              *(float64x2_t *)&v1620[248] = vaddq_f64(v1328, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)v1665.i64), v1471, (float64x2_t)v1665, 1), v1475, *(double *)v1666), v1512, *(float64x2_t *)v1666, 1), v669, *(double *)&v1666[16]), v670, *(float64x2_t *)&v1666[16],
                                                1));
              sub_20F215978((uint64_t)v1620);
              sub_20E8BE8E4();
              v683 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1530, v1406.f64[0]), v1526, v1406, 1), v1506, v1403.f64[0]), v1270, v1403, 1), v1316, v1400.f64[0]), v1313, v1400, 1);
              v684 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1493, v1406.f64[0]), v1498, v1406, 1), v1303, v1403.f64[0]), v1502, v1403, 1), v1307, v1400.f64[0]), v1309, v1400, 1);
              v685 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)__dsta, v1406.f64[0]), v1483, v1406, 1), v1488, v1403.f64[0]), v1283, v1403, 1), v1521, v1400.f64[0]), v1286, v1400, 1);
              v686 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1530, v1415.f64[0]), v1526, v1415, 1), v1506, v1412.f64[0]), v1270, v1412, 1), v1316, v1409.f64[0]), v1313, v1409, 1);
              v687 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1493, v1415.f64[0]), v1498, v1415, 1), v1303, v1412.f64[0]), v1502, v1412, 1), v1307, v1409.f64[0]), v1309, v1409, 1);
              v688 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)__dsta, v1415.f64[0]), v1483, v1415, 1), v1488, v1412.f64[0]), v1283, v1412, 1), v1521, v1409.f64[0]), v1286, v1409, 1);
              v1557 = vmlaq_laneq_f64(vmulq_n_f64(v683, *(double *)v1637), v686, *(float64x2_t *)v1637, 1);
              v1550 = vmlaq_laneq_f64(vmulq_n_f64(v684, *(double *)v1637), v687, *(float64x2_t *)v1637, 1);
              v1545 = vmlaq_laneq_f64(vmulq_n_f64(v685, *(double *)v1637), v688, *(float64x2_t *)v1637, 1);
              v1540 = vmlaq_laneq_f64(vmulq_n_f64(v683, v1640.f64[0]), v686, v1640, 1);
              v1601 = vmlaq_laneq_f64(vmulq_n_f64(v684, v1640.f64[0]), v687, v1640, 1);
              v1581 = vmlaq_laneq_f64(vmulq_n_f64(v685, v1640.f64[0]), v688, v1640, 1);
              v1536 = vmlaq_laneq_f64(vmulq_n_f64(v683, v1643.f64[0]), v686, v1643, 1);
              v1572 = vmlaq_laneq_f64(vmulq_n_f64(v684, v1643.f64[0]), v687, v1643, 1);
              v1565 = vmlaq_laneq_f64(vmulq_n_f64(v685, v1643.f64[0]), v688, v1643, 1);
              v1518 = vmlaq_laneq_f64(vmulq_n_f64(v683, v1646.f64[0]), v686, v1646, 1);
              v1513 = vmlaq_laneq_f64(vmulq_n_f64(v684, v1646.f64[0]), v687, v1646, 1);
              v1476 = vmlaq_laneq_f64(vmulq_n_f64(v685, v1646.f64[0]), v688, v1646, 1);
              v689 = vmlaq_laneq_f64(vmulq_n_f64(v683, v1649.f64[0]), v686, v1649, 1);
              v690 = vmlaq_laneq_f64(vmulq_n_f64(v684, v1649.f64[0]), v687, v1649, 1);
              v691 = vmlaq_laneq_f64(vmulq_n_f64(v685, v1649.f64[0]), v688, v1649, 1);
              v692 = vmlaq_laneq_f64(vmulq_n_f64(v683, v1652.f64[0]), v686, v1652, 1);
              v693 = vmlaq_laneq_f64(vmulq_n_f64(v684, v1652.f64[0]), v687, v1652, 1);
              v694 = vmlaq_laneq_f64(vmulq_n_f64(v685, v1652.f64[0]), v688, v1652, 1);
              v683.f64[0] = v1488.f64[0];
              v695 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1530, v1433.f64[0]), v1526, v1433, 1), v1506, v1421.f64[0]), v1270, v1421, 1), v1316, v1418.f64[0]), v1313, v1418, 1);
              v696 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1493, v1433.f64[0]), v1498, v1433, 1), v1303, v1421.f64[0]), v1502, v1421, 1), v1307, v1418.f64[0]), v1309, v1418, 1);
              v697 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)__dsta, v1433.f64[0]), v1483, v1433, 1), v1488, v1421.f64[0]), v1283, v1421, 1), v1521, v1418.f64[0]), v1286, v1418, 1);
              v698.f64[0] = v1303.f64[0];
              v699 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1530, v1439.f64[0]), v1526, v1439, 1), v1506, v1427.f64[0]), v1270, v1427, 1), v1316, v1424.f64[0]), v1313, v1424, 1);
              v700 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1493, v1439.f64[0]), v1498, v1439, 1), v1303, v1427.f64[0]), v1502, v1427, 1), v1307, v1424.f64[0]), v1309, v1424, 1);
              v701 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)__dsta, v1439.f64[0]), v1483, v1439, 1), v1488, v1427.f64[0]), v1283, v1427, 1), v1521, v1424.f64[0]), v1286, v1424, 1);
              *(void **)&v684.f64[0] = __dsta[0];
              v702 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1530, v1442.f64[0]), v1526, v1442, 1), v1506, v1430.f64[0]), v1270, v1430, 1);
              v703 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1493, v1442.f64[0]), v1498, v1442, 1), v1303, v1430.f64[0]), v1502, v1430, 1);
              v704 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)__dsta, v1442.f64[0]), v1483, v1442, 1), v1488, v1430.f64[0]), v1283, v1430, 1);
              v705.f64[0] = v1506.f64[0];
              v706 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1530, v1446.f64[0]), v1526, v1446, 1), v1506, v1436.f64[0]), v1270, v1436, 1);
              v647.f64[0] = v1270.f64[0];
              v707 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1493, v1446.f64[0]), v1498, v1446, 1), v1303, v1436.f64[0]), v1502, v1436, 1);
              v708 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)__dsta, v1446.f64[0]), v1483, v1446, 1), v1488, v1436.f64[0]), v1283, v1436, 1);
              v709 = vmlaq_laneq_f64(vmlaq_n_f64(v1557, v695, v1638.f64[0]), v699, v1638, 1);
              v710 = vmlaq_laneq_f64(vmlaq_n_f64(v1550, v696, v1638.f64[0]), v700, v1638, 1);
              v711 = vmlaq_laneq_f64(vmlaq_n_f64(v1545, v697, v1638.f64[0]), v701, v1638, 1);
              v712 = vmlaq_laneq_f64(vmlaq_n_f64(v1540, v695, v1641.f64[0]), v699, v1641, 1);
              v1602 = vmlaq_laneq_f64(vmlaq_n_f64(v1601, v696, v1641.f64[0]), v700, v1641, 1);
              v1582 = vmlaq_laneq_f64(vmlaq_n_f64(v1581, v697, v1641.f64[0]), v701, v1641, 1);
              *(_QWORD *)&v684.f64[1] = v1077;
              *(float64x2_t *)__dstc = v684;
              v684.f64[0] = v1530.f64[0];
              *(_QWORD *)&v684.f64[1] = v1078;
              v1531 = v684;
              v713 = vmlaq_laneq_f64(vmlaq_n_f64(v1536, v695, v1644.f64[0]), v699, v1644, 1);
              v1573 = vmlaq_laneq_f64(vmlaq_n_f64(v1572, v696, v1644.f64[0]), v700, v1644, 1);
              v1566 = vmlaq_laneq_f64(vmlaq_n_f64(v1565, v697, v1644.f64[0]), v701, v1644, 1);
              v684.f64[0] = v1493.f64[0];
              *(_QWORD *)&v684.f64[1] = v1079;
              v1494 = v684;
              v685.f64[0] = v1483.f64[0];
              *(_QWORD *)&v685.f64[1] = v1080;
              v1484 = v685;
              v685.f64[0] = v1526.f64[0];
              *(_QWORD *)&v685.f64[1] = v1081;
              v684.f64[0] = v1498.f64[0];
              *(_QWORD *)&v684.f64[1] = v1082;
              *(_QWORD *)&v683.f64[1] = v1083;
              v1489 = v683;
              *(_QWORD *)&v705.f64[1] = v1084;
              v1507 = v705;
              v714 = vmlaq_laneq_f64(vmlaq_n_f64(v1518, v695, v1647.f64[0]), v699, v1647, 1);
              v715 = vmlaq_laneq_f64(vmlaq_n_f64(v1513, v696, v1647.f64[0]), v700, v1647, 1);
              v716 = vmlaq_laneq_f64(vmlaq_n_f64(v1476, v697, v1647.f64[0]), v701, v1647, 1);
              *(_QWORD *)&v698.f64[1] = v1085;
              v1304 = v698;
              v717 = vmlaq_laneq_f64(vmlaq_n_f64(v689, v695, v1650.f64[0]), v699, v1650, 1);
              v718 = vmlaq_laneq_f64(vmlaq_n_f64(v690, v696, v1650.f64[0]), v700, v1650, 1);
              v719 = vmlaq_laneq_f64(vmlaq_n_f64(v691, v697, v1650.f64[0]), v701, v1650, 1);
              v698.f64[0] = v1283.f64[0];
              *(_QWORD *)&v698.f64[1] = v1086;
              v720 = vmlaq_laneq_f64(vmlaq_n_f64(v692, v695, v1653.f64[0]), v699, v1653, 1);
              *(_QWORD *)&v647.f64[1] = v1087;
              v721 = vmlaq_laneq_f64(vmlaq_n_f64(v693, v696, v1653.f64[0]), v700, v1653, 1);
              v683.f64[0] = v1502.f64[0];
              *(_QWORD *)&v683.f64[1] = v1088;
              v1503 = v683;
              v683.f64[0] = v1521.f64[0];
              v722 = vmlaq_n_f64(v704, v1521, v1450.f64[0]);
              v723 = vmlaq_n_f64(v708, v1521, v1455.f64[0]);
              *(_QWORD *)&v683.f64[1] = v1089;
              v1522 = v683;
              v700.f64[0] = v1316.f64[0];
              *(_QWORD *)&v700.f64[1] = v1090;
              v724 = vmlaq_laneq_f64(vmlaq_n_f64(v694, v697, v1653.f64[0]), v701, v1653, 1);
              v697.f64[0] = v1307.f64[0];
              *(_QWORD *)&v697.f64[1] = v1091;
              v725 = v697;
              v683.f64[0] = v1286.f64[0];
              v726 = vmlaq_laneq_f64(v722, v1286, v1450, 1);
              v727 = vmlaq_laneq_f64(v723, v1286, v1455, 1);
              *(_QWORD *)&v683.f64[1] = v1092;
              v728 = vmlaq_laneq_f64(vmlaq_n_f64(v702, v1316, v1450.f64[0]), v1313, v1450, 1);
              v729 = vmlaq_laneq_f64(vmlaq_n_f64(v703, v1307, v1450.f64[0]), v1309, v1450, 1);
              v730 = vmlaq_laneq_f64(vmlaq_n_f64(v706, v1316, v1455.f64[0]), v1313, v1455, 1);
              v695.f64[0] = v1313.f64[0];
              v731 = vmlaq_laneq_f64(vmlaq_n_f64(v707, v1307, v1455.f64[0]), v1309, v1455, 1);
              v697.f64[0] = v1309.f64[0];
              *(_QWORD *)&v695.f64[1] = v1094;
              *(_QWORD *)&v697.f64[1] = v1096;
              *(float64x2_t *)&v1634[32] = vsubq_f64(v1494, vmlaq_laneq_f64(vmlaq_n_f64(v710, v729, v1639.f64[0]), v731, v1639, 1));
              *(float64x2_t *)&v1634[16] = vsubq_f64(v1531, vmlaq_laneq_f64(vmlaq_n_f64(v709, v728, v1639.f64[0]), v730, v1639, 1));
              *(float64x2_t *)&v1634[48] = vsubq_f64(*(float64x2_t *)__dstc, vmlaq_laneq_f64(vmlaq_n_f64(v711, v726, v1639.f64[0]), v727, v1639, 1));
              *(float64x2_t *)&v1634[64] = vsubq_f64(v685, vmlaq_laneq_f64(vmlaq_n_f64(v712, v728, v1642.f64[0]), v730, v1642, 1));
              *(float64x2_t *)&v1634[80] = vsubq_f64(v684, vmlaq_laneq_f64(vmlaq_n_f64(v1602, v729, v1642.f64[0]), v731, v1642, 1));
              *(float64x2_t *)&v1634[96] = vsubq_f64(v1484, vmlaq_laneq_f64(vmlaq_n_f64(v1582, v726, v1642.f64[0]), v727, v1642, 1));
              *(float64x2_t *)&v1634[112] = vsubq_f64(v1507, vmlaq_laneq_f64(vmlaq_n_f64(v713, v728, v1645.f64[0]), v730, v1645, 1));
              *(float64x2_t *)&v1634[128] = vsubq_f64(v1304, vmlaq_laneq_f64(vmlaq_n_f64(v1573, v729, v1645.f64[0]), v731, v1645, 1));
              *(float64x2_t *)&v1634[144] = vsubq_f64(v1489, vmlaq_laneq_f64(vmlaq_n_f64(v1566, v726, v1645.f64[0]), v727, v1645, 1));
              *(float64x2_t *)&v1634[160] = vsubq_f64(v647, vmlaq_laneq_f64(vmlaq_n_f64(v714, v728, v1648.f64[0]), v730, v1648, 1));
              *(float64x2_t *)&v1634[176] = vsubq_f64(v1503, vmlaq_laneq_f64(vmlaq_n_f64(v715, v729, v1648.f64[0]), v731, v1648, 1));
              *(float64x2_t *)&v1634[192] = vsubq_f64(v698, vmlaq_laneq_f64(vmlaq_n_f64(v716, v726, v1648.f64[0]), v727, v1648, 1));
              *(float64x2_t *)&v1634[208] = vsubq_f64(v700, vmlaq_laneq_f64(vmlaq_n_f64(v717, v728, v1651.f64[0]), v730, v1651, 1));
              *(float64x2_t *)&v1634[224] = vsubq_f64(v725, vmlaq_laneq_f64(vmlaq_n_f64(v718, v729, v1651.f64[0]), v731, v1651, 1));
              *(float64x2_t *)&v1634[240] = vsubq_f64(v1522, vmlaq_laneq_f64(vmlaq_n_f64(v719, v726, v1651.f64[0]), v727, v1651, 1));
              *(float64x2_t *)&v1634[256] = vsubq_f64(v695, vmlaq_laneq_f64(vmlaq_n_f64(v720, v728, v1654.f64[0]), v730, v1654, 1));
              *(float64x2_t *)&v1634[272] = vsubq_f64(v697, vmlaq_laneq_f64(vmlaq_n_f64(v721, v729, v1654.f64[0]), v731, v1654, 1));
              *(float64x2_t *)&v1634[288] = vsubq_f64(v683, vmlaq_laneq_f64(vmlaq_n_f64(v724, v726, v1654.f64[0]), v727, v1654, 1));
              if (!v1668)
                sub_20E86D37C();
              (*(void (**)(_BYTE *, int8x16_t *))(*(_QWORD *)v1668 + 48))(v1668, &v1627);
            }
          }
        }
      }
    }
    if (++v12 != v1615)
      continue;
    break;
  }
  v3 = v1609;
  sub_20E9BCAA8(v1636[0]);
  v732 = v1668;
  if (v1668 != v1667)
  {
LABEL_174:
    if (v732)
    {
      v733 = 5;
      goto LABEL_178;
    }
    goto LABEL_179;
  }
LABEL_177:
  v733 = 4;
  v732 = v1667;
LABEL_178:
  (*(void (**)(void))(*v732 + 8 * v733))();
LABEL_179:
  memset(v1620, 0, 24);
  v734 = v3[1];
  v735 = v734 - *v3;
  if (v734 != *v3)
  {
    if (v735 < 0)
      sub_20E867F44();
    *(_QWORD *)v1620 = operator new(v734 - *v3);
    *(_QWORD *)&v1620[8] = *(_QWORD *)v1620;
    *(_QWORD *)&v1620[16] = *(_QWORD *)v1620 + 16 * (v735 >> 4);
  }
  *(_QWORD *)v1669 = v1620;
  *(_QWORD *)&v1669[8] = v3;
  v736 = (unint64_t *)v1623;
  v737 = v1624;
  if (v1623 == v1624)
  {
    v739 = (unint64_t *)v1623;
  }
  else
  {
    do
    {
      sub_20F29E5DC((char ***)v1669, v736);
      v738 = v736 + 2;
      sub_20F29E5DC((char ***)v1669, v738);
      v736 = v738 + 60;
    }
    while (v736 != v737);
    v739 = (unint64_t *)v1623;
    v736 = v1624;
  }
  v740 = 126 - 2 * __clz(0xEF7BDEF7BDEF7BDFLL * (((char *)v736 - (char *)v739) >> 4));
  if (v736 == v739)
    v741 = 0;
  else
    v741 = v740;
  sub_20F2AB3C0((unint64_t)v739, (char *)v736, v741, 1);
  v742 = (unint64_t *)v1623;
  v743 = v1624;
  v744 = (char *)v1624 - (_BYTE *)v1623;
  if (v1624 == v1623)
  {
    v1611 = 0;
    v1603 = 0;
  }
  else
  {
    if (0xEF7BDEF7BDEF7BDFLL * (v744 >> 4) > 0x84210842108421)
      sub_20E867F44();
    v745 = (char *)operator new(v744);
    v746 = 0;
    do
    {
      v747 = (char *)&v742[v746];
      v748 = &v745[v746 * 8];
      *(_OWORD *)v748 = *(_OWORD *)&v742[v746];
      *((_OWORD *)v748 + 1) = *(_OWORD *)&v742[v746 + 2];
      v749 = *(_OWORD *)&v742[v746 + 4];
      v750 = *(_OWORD *)&v742[v746 + 8];
      *((_OWORD *)v748 + 3) = *(_OWORD *)&v742[v746 + 6];
      *((_OWORD *)v748 + 4) = v750;
      *((_OWORD *)v748 + 2) = v749;
      memcpy(&v745[v746 * 8 + 80], &v742[v746 + 10], 0x120uLL);
      v751 = *(_OWORD *)&v742[v746 + 52];
      v753 = *(_OWORD *)&v742[v746 + 46];
      v752 = *(_OWORD *)&v742[v746 + 48];
      *((_OWORD *)v748 + 25) = *(_OWORD *)&v742[v746 + 50];
      *((_OWORD *)v748 + 26) = v751;
      *((_OWORD *)v748 + 23) = v753;
      *((_OWORD *)v748 + 24) = v752;
      v754 = *(_OWORD *)&v742[v746 + 60];
      v756 = *(_OWORD *)&v742[v746 + 54];
      v755 = *(_OWORD *)&v742[v746 + 56];
      *((_OWORD *)v748 + 29) = *(_OWORD *)&v742[v746 + 58];
      *((_OWORD *)v748 + 30) = v754;
      *((_OWORD *)v748 + 27) = v756;
      *((_OWORD *)v748 + 28) = v755;
      v746 += 62;
    }
    while (v747 + 496 != (char *)v743);
    v1603 = (uint64_t *)v745;
    v1611 = (uint64_t *)&v745[v746 * 8];
  }
  v1624 = v742;
  __p[1] = 0;
  __p[0] = 0;
  *(_QWORD *)v1656 = 0;
  v757 = *(uint64_t **)&v1620[8];
  v758 = *(uint64_t **)v1620;
  v759 = *(_QWORD *)&v1620[8] - *(_QWORD *)v1620;
  if (*(_QWORD *)&v1620[8] != *(_QWORD *)v1620)
  {
    if (v759 < 0)
      sub_20E867F44();
    __p[0] = operator new(*(_QWORD *)&v1620[8] - *(_QWORD *)v1620);
    __p[1] = __p[0];
    *(_QWORD *)v1656 = (char *)__p[0] + 16 * (v759 >> 4);
    v1616 = v757;
    while (1)
    {
      v760 = *v758;
      v761 = (char *)__p[0];
      v762 = (char *)__p[1];
      v763 = __p[0];
      if (__p[0] != __p[1])
      {
        v763 = __p[0];
        while (*v763 != v760)
        {
          v763 += 2;
          if (v763 == __p[1])
            goto LABEL_204;
        }
      }
      if (v763 != __p[1])
        goto LABEL_199;
LABEL_204:
      v764 = (char *)__p[1] - (char *)__p[0];
      v765 = ((char *)__p[1] - (char *)__p[0]) >> 4;
      v766 = (char *)__p[0] + (((char *)__p[1] - (char *)__p[0]) & 0xFFFFFFFFFFFFFFF0);
      if (__p[1] >= (void *)*(_QWORD *)v1656)
        break;
      if (v766 == __p[1])
      {
        *(_QWORD *)__p[1] = v760;
        *((_QWORD *)v762 + 1) = -1;
        __p[1] = v762 + 16;
      }
      else
      {
        v767 = (char *)__p[1] - 16;
        v768 = __p[1];
        v769 = (char *)__p[1] - 16;
        if (__p[1] >= (void *)0x10)
        {
          do
          {
            v770 = *(_OWORD *)v769;
            v769 += 16;
            *v768++ = v770;
          }
          while (v769 < v762);
        }
        __p[1] = v768;
        if (v762 != v766 + 16)
        {
          v771 = v762 - (v766 + 16);
          v772 = v771 - 16;
          if ((unint64_t)(v771 - 16) < 0xD0
            || &v762[-(v772 & 0xFFFFFFFFFFFFFFF0) - 16] < v767
            && &v761[v771 + (v764 & 0xFFFFFFFFFFFFFFF0) - (v772 & 0xFFFFFFFFFFFFFFF0) - 16] < v762)
          {
            goto LABEL_215;
          }
          v773 = (v772 >> 4) + 1;
          v774 = 16 * (v773 & 0x1FFFFFFFFFFFFFFCLL);
          v775 = &v762[-v774];
          v776 = &v767[-v774];
          v777 = (const double *)(v762 - 48);
          v778 = (double *)(v762 - 32);
          v779 = v773 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v1671 = vld2q_f64(v777);
            v780 = v777 - 4;
            v1672 = vld2q_f64(v780);
            vst2q_f64(v778, v1671);
            v781 = v778 - 4;
            vst2q_f64(v781, v1672);
            v777 -= 8;
            v778 -= 8;
            v779 -= 4;
          }
          while (v779);
          v762 = v775;
          v767 = v776;
          if (v773 != (v773 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_215:
            v782 = v762 - 8;
            do
            {
              v783 = *((_QWORD *)v767 - 2);
              v767 -= 16;
              *((_QWORD *)v782 - 1) = v783;
              *(_QWORD *)v782 = *((_QWORD *)v767 + 1);
              v782 -= 16;
            }
            while (v767 != v766);
          }
        }
        *(_QWORD *)v766 = v760;
        *(_QWORD *)&v761[16 * v765 + 8] = -1;
      }
LABEL_199:
      v758 += 2;
      if (v758 == v757)
        goto LABEL_245;
    }
    v784 = v765 + 1;
    if ((unint64_t)(v765 + 1) >> 60)
      sub_20E867F44();
    v785 = (uint64_t)(*(_QWORD *)v1656 - (unint64_t)__p[0]) >> 3;
    if (v785 <= v784)
      v785 = v765 + 1;
    if (*(_QWORD *)v1656 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF0)
      v786 = 0xFFFFFFFFFFFFFFFLL;
    else
      v786 = v785;
    if (v786)
    {
      if (v786 >> 60)
        sub_20E877A38();
      v787 = (char *)operator new(16 * v786);
      v788 = &v787[16 * v765];
      v789 = &v787[16 * v786];
      if ((v762 - v761) >> 4 != v786)
        goto LABEL_238;
LABEL_230:
      if (v764 < 1)
      {
        if (v761 == v762)
          v790 = 1;
        else
          v790 = v764 >> 3;
        if (v790 >> 60)
          sub_20E877A38();
        v788 = (char *)operator new(16 * v790);
        v789 = &v788[16 * v790];
        if (v787)
        {
          operator delete(v787);
          v789 = &v788[16 * v790];
          v761 = (char *)__p[0];
        }
      }
      else
      {
        v788 -= 16 * (v784 >> 1);
      }
    }
    else
    {
      v787 = 0;
      v788 = (char *)(16 * v765);
      v789 = 0;
      if (!(((char *)__p[1] - (char *)__p[0]) >> 4))
        goto LABEL_230;
    }
LABEL_238:
    *(_QWORD *)v788 = v760;
    *((_QWORD *)v788 + 1) = -1;
    v791 = v788;
    v757 = v1616;
    if (v761 != v766)
    {
      v792 = v766;
      v793 = v788;
      do
      {
        v791 = v793 - 16;
        *((_OWORD *)v793 - 1) = *((_OWORD *)v792 - 1);
        v792 -= 16;
        v793 -= 16;
      }
      while (v792 != v761);
    }
    v794 = v788 + 16;
    v795 = (char *)__p[1];
    if (__p[1] != v766)
    {
      do
      {
        v796 = *(_OWORD *)v766;
        v766 += 16;
        *v794++ = v796;
      }
      while (v766 != v795);
    }
    v797 = __p[0];
    __p[0] = v791;
    __p[1] = v794;
    *(_QWORD *)v1656 = v789;
    if (v797)
      operator delete(v797);
    goto LABEL_199;
  }
LABEL_245:
  v798 = v1611;
  if (v1603 != v1611)
  {
    v799 = v1603;
    while (1)
    {
      v810 = *v799;
      v811 = v799[2];
      v812 = (char *)__p[0];
      v813 = (__int128 *)__p[1];
      v814 = (char *)__p[0];
      if (__p[0] != __p[1])
      {
        v814 = (char *)__p[0];
        while (*(_QWORD *)v814 != v810)
        {
          v814 += 16;
          if (v814 == __p[1])
            goto LABEL_256;
        }
      }
      if (v814 == __p[1])
      {
LABEL_256:
        v1627 = (int8x16_t)(unint64_t)v810;
        v814 = sub_20F2AEDC8((char **)__p, (__int128 *)__p[1], (uint64_t)&v1627);
        v812 = (char *)__p[0];
        v813 = (__int128 *)__p[1];
      }
      v815 = *((_QWORD *)v814 + 1);
      if (v812 == (char *)v813)
        goto LABEL_260;
      while (*(_QWORD *)v812 != v811)
      {
        v812 += 16;
        if (v812 == (char *)v813)
          goto LABEL_260;
      }
      if (v812 == (char *)v813)
      {
LABEL_260:
        v1627 = (int8x16_t)v811;
        v812 = sub_20F2AEDC8((char **)__p, v813, (uint64_t)&v1627);
      }
      v816 = *((_QWORD *)v812 + 1);
      if (v815 == v816)
      {
        if (v815 != -1)
          goto LABEL_249;
        v817 = (char *)__p[0];
        v818 = (__int128 *)__p[1];
        v819 = (char *)__p[0];
        if (__p[0] != __p[1])
        {
          v819 = (char *)__p[0];
          while (*(_QWORD *)v819 != v810)
          {
            v819 += 16;
            if (v819 == __p[1])
              goto LABEL_285;
          }
        }
        if (v819 == __p[1])
        {
LABEL_285:
          v1627 = (int8x16_t)(unint64_t)v810;
          v819 = sub_20F2AEDC8((char **)__p, (__int128 *)__p[1], (uint64_t)&v1627);
          v817 = (char *)__p[0];
          v818 = (__int128 *)__p[1];
        }
        *((_QWORD *)v819 + 1) = v810;
        if (v817 == (char *)v818)
          goto LABEL_289;
        while (*(_QWORD *)v817 != v811)
        {
          v817 += 16;
          if (v817 == (char *)v818)
            goto LABEL_289;
        }
        if (v817 == (char *)v818)
        {
LABEL_289:
          v1627 = (int8x16_t)v811;
          v817 = sub_20F2AEDC8((char **)__p, v818, (uint64_t)&v1627);
        }
        v816 = v810;
        goto LABEL_296;
      }
      if (v815 == -1)
        break;
      v817 = (char *)__p[0];
      v820 = (char *)__p[1];
      if (v816 == -1)
      {
        if (__p[0] != __p[1])
        {
          while (*(_QWORD *)v817 != v811)
          {
            v817 += 16;
            if (v817 == __p[1])
              goto LABEL_294;
          }
        }
        if (v817 == __p[1])
        {
LABEL_294:
          v1627 = (int8x16_t)v811;
          v817 = sub_20F2AEDC8((char **)__p, (__int128 *)__p[1], (uint64_t)&v1627);
        }
        v816 = v815;
LABEL_296:
        *((_QWORD *)v817 + 1) = v816;
        goto LABEL_297;
      }
      while (v817 != v820)
      {
        if (*((_QWORD *)v817 + 1) == v816)
          *((_QWORD *)v817 + 1) = v815;
        v817 += 16;
      }
LABEL_297:
      v821 = v1624;
      if ((unint64_t)v1624 < v1625)
      {
        v800 = *((_OWORD *)v799 + 1);
        *(_OWORD *)v1624 = *(_OWORD *)v799;
        *((_OWORD *)v821 + 1) = v800;
        v801 = *((_OWORD *)v799 + 2);
        v802 = *((_OWORD *)v799 + 4);
        *((_OWORD *)v821 + 3) = *((_OWORD *)v799 + 3);
        *((_OWORD *)v821 + 4) = v802;
        *((_OWORD *)v821 + 2) = v801;
        memcpy(v821 + 10, v799 + 10, 0x120uLL);
        v803 = *((_OWORD *)v799 + 26);
        v805 = *((_OWORD *)v799 + 23);
        v804 = *((_OWORD *)v799 + 24);
        *((_OWORD *)v821 + 25) = *((_OWORD *)v799 + 25);
        *((_OWORD *)v821 + 26) = v803;
        *((_OWORD *)v821 + 23) = v805;
        *((_OWORD *)v821 + 24) = v804;
        v806 = *((_OWORD *)v799 + 30);
        v808 = *((_OWORD *)v799 + 27);
        v807 = *((_OWORD *)v799 + 28);
        *((_OWORD *)v821 + 29) = *((_OWORD *)v799 + 29);
        *((_OWORD *)v821 + 30) = v806;
        *((_OWORD *)v821 + 27) = v808;
        *((_OWORD *)v821 + 28) = v807;
        v809 = v821 + 62;
      }
      else
      {
        v822 = (unint64_t *)v1623;
        v823 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v1624 - (_BYTE *)v1623) >> 4);
        v824 = v823 + 1;
        if (v823 + 1 > 0x84210842108421)
          sub_20E867F44();
        if (0xDEF7BDEF7BDEF7BELL * ((uint64_t)(v1625 - (_QWORD)v1623) >> 4) > v824)
          v824 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(v1625 - (_QWORD)v1623) >> 4);
        if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v1625 - (_QWORD)v1623) >> 4) >= 0x42108421084210)
          v825 = 0x84210842108421;
        else
          v825 = v824;
        if (v825)
        {
          if (v825 > 0x84210842108421)
            sub_20E877A38();
          v826 = (char *)operator new(496 * v825);
        }
        else
        {
          v826 = 0;
        }
        v827 = &v826[496 * v823];
        v828 = *((_OWORD *)v799 + 1);
        *(_OWORD *)v827 = *(_OWORD *)v799;
        *((_OWORD *)v827 + 1) = v828;
        v829 = *((_OWORD *)v799 + 3);
        *((_OWORD *)v827 + 2) = *((_OWORD *)v799 + 2);
        *((_OWORD *)v827 + 3) = v829;
        *((_OWORD *)v827 + 4) = *((_OWORD *)v799 + 4);
        memcpy(v827 + 80, v799 + 10, 0x120uLL);
        v830 = *((_OWORD *)v799 + 28);
        *((_OWORD *)v827 + 27) = *((_OWORD *)v799 + 27);
        *((_OWORD *)v827 + 28) = v830;
        v831 = *((_OWORD *)v799 + 30);
        *((_OWORD *)v827 + 29) = *((_OWORD *)v799 + 29);
        *((_OWORD *)v827 + 30) = v831;
        v832 = *((_OWORD *)v799 + 24);
        *((_OWORD *)v827 + 23) = *((_OWORD *)v799 + 23);
        *((_OWORD *)v827 + 24) = v832;
        v833 = *((_OWORD *)v799 + 26);
        *((_OWORD *)v827 + 25) = *((_OWORD *)v799 + 25);
        *((_OWORD *)v827 + 26) = v833;
        v834 = v827;
        if (v821 != v822)
        {
          do
          {
            v835 = v834;
            v836 = *((_OWORD *)v821 - 30);
            *((_OWORD *)v834 - 31) = *((_OWORD *)v821 - 31);
            *((_OWORD *)v834 - 30) = v836;
            v834 -= 496;
            v837 = v835 - 464;
            v838 = *((_OWORD *)v821 - 29);
            v839 = *((_OWORD *)v821 - 27);
            *((_OWORD *)v837 + 1) = *((_OWORD *)v821 - 28);
            *((_OWORD *)v837 + 2) = v839;
            *(_OWORD *)v837 = v838;
            memcpy(v835 - 416, v821 - 52, 0x120uLL);
            v840 = *((_OWORD *)v821 - 5);
            v842 = *((_OWORD *)v821 - 8);
            v841 = *((_OWORD *)v821 - 7);
            *((_OWORD *)v835 - 6) = *((_OWORD *)v821 - 6);
            *((_OWORD *)v835 - 5) = v840;
            *((_OWORD *)v835 - 8) = v842;
            *((_OWORD *)v835 - 7) = v841;
            v843 = *((_OWORD *)v821 - 1);
            v845 = *((_OWORD *)v821 - 4);
            v844 = *((_OWORD *)v821 - 3);
            *((_OWORD *)v835 - 2) = *((_OWORD *)v821 - 2);
            *((_OWORD *)v835 - 1) = v843;
            *((_OWORD *)v835 - 4) = v845;
            *((_OWORD *)v835 - 3) = v844;
            v821 -= 62;
          }
          while (v821 != v822);
          v821 = v822;
          v798 = v1611;
        }
        v846 = &v826[496 * v825];
        v809 = (unint64_t *)(v827 + 496);
        v1623 = v834;
        v1624 = (unint64_t *)(v827 + 496);
        v1625 = (unint64_t)v846;
        if (v821)
          operator delete(v821);
      }
      v1624 = v809;
      if (0xEF7BDEF7BDEF7BDFLL * (((char *)v809 - (_BYTE *)v1623) >> 4) == ((uint64_t)(*(_QWORD *)&v1620[8]
                                                                                     - *(_QWORD *)v1620) >> 4)
                                                                          - 1)
        goto LABEL_315;
LABEL_249:
      v799 += 62;
      if (v799 == v798)
        goto LABEL_315;
    }
    v817 = (char *)__p[0];
    if (__p[0] != __p[1])
    {
      while (*(_QWORD *)v817 != v810)
      {
        v817 += 16;
        if (v817 == __p[1])
          goto LABEL_292;
      }
    }
    if (v817 == __p[1])
    {
LABEL_292:
      v1627 = (int8x16_t)(unint64_t)v810;
      v817 = sub_20F2AEDC8((char **)__p, (__int128 *)__p[1], (uint64_t)&v1627);
    }
    goto LABEL_296;
  }
LABEL_315:
  v847 = __p[0];
  if (v1623 == v1624)
  {
    v848 = (double *)__p[0];
    v850 = v1603;
    goto LABEL_339;
  }
  v848 = (double *)__p[0];
  if (*((_QWORD *)__p[0] + 1) == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 434, (uint64_t)"ref_set_id != cv_types::kInvalidSubmapSessionID", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v848 = (double *)__p[0];
    v849 = (double *)__p[1];
    v850 = v1603;
    if (__p[0] != __p[1])
      goto LABEL_322;
  }
  else
  {
    v849 = (double *)__p[1];
    v850 = v1603;
    if (__p[0] == __p[1])
      goto LABEL_339;
LABEL_322:
    v851 = v847[1];
    v852 = (char *)v849 - (char *)v848 - 16;
    if (v852 >= 0x80)
    {
      v855 = v852 >> 4;
      v856 = (v852 >> 4) + 1;
      v857 = vdupq_n_s64(v851);
      if (v852 >= 0x200)
      {
        v859 = 32;
        if ((v856 & 0x1F) != 0)
          v859 = v856 & 0x1F;
        v858 = v856 - v859;
        v860 = v848 + 33;
        v861.i64[0] = 0x101010101010101;
        v861.i64[1] = 0x101010101010101;
        v862 = v856;
        v863.i64[0] = 0x101010101010101;
        v863.i64[1] = 0x101010101010101;
        do
        {
          v864 = v860 - 32;
          v865 = (unsigned __int128)vld2q_f64(v864);
          v866 = v860 - 28;
          v867 = (unsigned __int128)vld2q_f64(v866);
          v868 = v860 - 24;
          v869 = (unsigned __int128)vld2q_f64(v868);
          v870 = v860 - 20;
          v871 = (unsigned __int128)vld2q_f64(v870);
          v872 = v860 - 16;
          v873 = (unsigned __int128)vld2q_f64(v872);
          v874 = v860 - 12;
          v875 = (unsigned __int128)vld2q_f64(v874);
          v876 = v860 - 8;
          v877 = (unsigned __int128)vld2q_f64(v876);
          v878 = v860 - 4;
          v879 = (int32x4_t)vceqq_s64((int64x2_t)v871, v857);
          v880 = (unsigned __int128)vld2q_f64(v878);
          v881 = v860;
          v882 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v869, v857), v879);
          v883 = (unsigned __int128)vld2q_f64(v881);
          v881 += 4;
          v884 = (unsigned __int128)vld2q_f64(v881);
          v885 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v865, v857), (int32x4_t)vceqq_s64((int64x2_t)v867, v857)), v882);
          v886 = v860 + 8;
          v887 = (unsigned __int128)vld2q_f64(v886);
          v888 = v860 + 12;
          v889 = (unsigned __int128)vld2q_f64(v888);
          v890 = v860 + 16;
          v891 = (unsigned __int128)vld2q_f64(v890);
          v892 = vuzp1q_s8(v885, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v873, v857), (int32x4_t)vceqq_s64((int64x2_t)v875, v857)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v877, v857), (int32x4_t)vceqq_s64((int64x2_t)v880, v857))));
          v893 = v860 + 20;
          v894 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v887, v857), (int32x4_t)vceqq_s64((int64x2_t)v889, v857));
          v895 = (unsigned __int128)vld2q_f64(v893);
          v896 = v860 + 24;
          v897 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v883, v857), (int32x4_t)vceqq_s64((int64x2_t)v884, v857));
          v898 = (unsigned __int128)vld2q_f64(v896);
          v899 = v860 + 28;
          v900 = (unsigned __int128)vld2q_f64(v899);
          v861 = vandq_s8(v861, v892);
          v863 = vandq_s8(v863, vuzp1q_s8((int8x16_t)vuzp1q_s16(v897, v894), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v891, v857), (int32x4_t)vceqq_s64((int64x2_t)v895, v857)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v898, v857), (int32x4_t)vceqq_s64((int64x2_t)v900, v857)))));
          v860 += 64;
          v862 -= 32;
        }
        while (v859 != v862);
        v853 = vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vandq_s8(v863, v861), 7uLL)));
        if (v859 < 9)
        {
          v854 = &v848[2 * v858];
          goto LABEL_337;
        }
      }
      else
      {
        v858 = 0;
        v853 = 1;
      }
      v901 = 8;
      if ((v856 & 7) != 0)
        v901 = v856 & 7;
      v902 = (int8x8_t)-1;
      v902.i8[0] = v853;
      v854 = &v848[2 * (v856 - v901)];
      v903 = (uint64_t)&v848[2 * v858 + 1];
      v904 = ~v855 + v858 + v901;
      do
      {
        v905 = (const double *)v903;
        v906 = (unsigned __int128)vld2q_f64(v905);
        v905 += 4;
        v907 = (unsigned __int128)vld2q_f64(v905);
        v908 = (const double *)(v903 + 64);
        v909 = (unsigned __int128)vld2q_f64(v908);
        v910 = (const double *)(v903 + 96);
        v911 = (unsigned __int128)vld2q_f64(v910);
        v902 = vand_s8(v902, vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v906, v857), (int32x4_t)vceqq_s64((int64x2_t)v907, v857)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v909, v857), (int32x4_t)vceqq_s64((int64x2_t)v911, v857)))));
        v903 += 128;
        v904 += 8;
      }
      while (v904);
      v853 = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v902, 7uLL)));
    }
    else
    {
      v853 = 1;
      v854 = v848;
    }
    do
    {
LABEL_337:
      v853 &= *((_QWORD *)v854 + 1) == v851;
      v854 += 2;
    }
    while (v854 != v849);
    if ((v853 & 1) == 0)
    {
      sub_20E863438((uint64_t)&v1627);
      sub_20E86A980(v1628, (uint64_t)"input_neighbor_submaps ids: ", 28);
      v1063 = (char *)*v1609;
      v1064 = (char *)v1609[1];
      if ((char *)*v1609 != v1064)
      {
        do
        {
          v1065 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v1065, (uint64_t)", ", 2);
          v1063 += 16;
        }
        while (v1063 != v1064);
      }
      sub_20E86A980(v1628, (uint64_t)". ", 2);
      sub_20E86A980(v1628, (uint64_t)"neighbor_submaps ids: ", 22);
      v1066 = *(_QWORD *)v1620;
      for (j = *(_QWORD *)&v1620[8]; v1066 != j; v1066 += 16)
      {
        v1068 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v1068, (uint64_t)", ", 2);
      }
      sub_20E86A980(v1628, (uint64_t)". ", 2);
      sub_20E86A980(v1628, (uint64_t)" sorted_edges: ", 15);
      if (v1603 != v1611)
      {
        v1071 = v1603;
        do
        {
          v1072 = sub_20E86A980(v1628, (uint64_t)" {", 2);
          v1073 = sub_21021659C(v1072, v1071);
          v1074 = sub_20E86A980(v1073, (uint64_t)", ", 2);
          v1075 = v1071 + 2;
          v1076 = sub_21021659C(v1074, v1075);
          sub_20E86A980(v1076, (uint64_t)"}, ", 3);
          v1071 = v1075 + 60;
        }
        while (v1071 != v1611);
      }
      sub_20E86A980(v1628, (uint64_t)". ", 2);
      sub_20E923E88(&v1627, v1637);
      if (v1638.f64[0] >= 0.0)
        v1069 = v1637;
      else
        v1069 = (void **)v1637[0];
      if (v1638.f64[0] >= 0.0)
        v1070 = HIBYTE(v1638.f64[0]);
      else
        v1070 = (uint64_t)v1637[1];
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 458, (uint64_t)"", 0, (uint64_t)v1069, v1070, (void (*)(void **))sub_21023DDB0);
      if (SHIBYTE(v1638.f64[0]) < 0)
        operator delete(v1637[0]);
      abort();
    }
  }
LABEL_339:
  if (v848)
  {
    __p[1] = v848;
    operator delete(v848);
  }
  if (v850)
    operator delete(v850);
  if (*(_QWORD *)v1620)
  {
    *(_QWORD *)&v1620[8] = *(_QWORD *)v1620;
    operator delete(*(void **)v1620);
  }
  v912 = (unint64_t *)v1623;
  v1523 = v1624;
  if (v1623 != v1624)
  {
    v1451 = vextq_s8((int8x16_t)xmmword_2103BBF80, (int8x16_t)xmmword_2103BBF80, 8uLL).u64[0];
    while (1)
    {
      v913.f64[0] = NAN;
      v913.f64[1] = NAN;
      *(float64x2_t *)&v1628[16] = v913;
      *(float64x2_t *)v1628 = v913;
      v1627 = (int8x16_t)v913;
      *(_OWORD *)v1632 = xmmword_2103AB240;
      *(_OWORD *)&v1632[16] = xmmword_2103AB250;
      v1633 = (float64x2_t)xmmword_2103AB260;
      *(_OWORD *)v1634 = xmmword_2103AB270;
      v1629 = (float64x2_t)xmmword_2103AB200;
      *(_OWORD *)v1630 = xmmword_2103AB210;
      *(_OWORD *)&v1630[16] = xmmword_2103AB220;
      v1631 = (float64x2_t)xmmword_2103AB230;
      memset(&v1634[16], 0, 293);
      if (v1626)
      {
        v914 = *((_OWORD *)v912 + 28);
        *(_OWORD *)v1632 = *((_OWORD *)v912 + 27);
        *(_OWORD *)&v1632[16] = v914;
        v915 = *((_OWORD *)v912 + 30);
        v1633 = *((float64x2_t *)v912 + 29);
        *(_OWORD *)v1634 = v915;
        v916 = *((_OWORD *)v912 + 24);
        v1629 = *((float64x2_t *)v912 + 23);
        *(_OWORD *)v1630 = v916;
        v917 = *((float64x2_t *)v912 + 26);
        *(_OWORD *)&v1630[16] = *((_OWORD *)v912 + 25);
        v1631 = v917;
      }
      else
      {
        sub_20F053790(v912 + 10, v1620);
        v918 = *(float64x2_t *)&v1620[80];
        v919 = *(float64x2_t *)&v1620[32];
        v920 = *(float64x2_t *)&v1620[176];
        v921 = *(float64x2_t *)&v1620[128];
        v922 = *(float64x2_t *)&v1620[272];
        v923 = *(float64x2_t *)&v1620[224];
        v925 = *((float64x2_t *)v912 + 3);
        v924 = *((float64x2_t *)v912 + 4);
        v926 = *((float64x2_t *)v912 + 2);
        _Q1 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1620, v926.f64[0]), *(float64x2_t *)&v1620[48], v926, 1), *(float64x2_t *)&v1620[96], v925.f64[0]), *(float64x2_t *)&v1620[144], v925, 1), *(float64x2_t *)&v1620[192], v924.f64[0]), *(float64x2_t *)&v1620[240], v924, 1);
        _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1620[16], v926.f64[0]), *(float64x2_t *)&v1620[64], v926, 1), *(float64x2_t *)&v1620[112], v925.f64[0]), *(float64x2_t *)&v1620[160], v925, 1), *(float64x2_t *)&v1620[208], v924.f64[0]), *(float64x2_t *)&v1620[256], v924, 1);
        _Q27 = (int8x16_t)vnegq_f64(_Q0);
        v930 = vnegq_f64(_Q1);
        _D9 = v930.f64[1];
        __asm
        {
          FMLS            D2, D9, V1.D[1]
          FMLS            D2, D27, V0.D[0]
        }
        if (_D2 >= 0.0000002635)
        {
          v937 = sqrt(_D2);
          v1617 = *(float64x2_t *)&v1620[80];
          v1612 = *(float64x2_t *)&v1620[176];
          *(_OWORD *)v1604 = *(_OWORD *)&v1620[32];
          v1592 = *(float64x2_t *)&v1620[272];
          v1591 = *(float64x2_t *)&v1620[128];
          v1589 = *((float64x2_t *)v912 + 4);
          v1588 = *(float64x2_t *)&v1620[224];
          v1587 = _Q27;
          v1586 = *((float64x2_t *)v912 + 3);
          v1585 = v930.f64[0];
          v1584 = *((float64x2_t *)v912 + 2);
          v1583 = _D2;
          v938 = __sincos_stret(v937);
          cosval = v938.__cosval;
          v926 = v1584;
          v930.f64[0] = v1585;
          v925 = v1586;
          _Q27 = v1587;
          v923 = v1588;
          v924 = v1589;
          v921 = v1591;
          v922 = v1592;
          v919 = *(float64x2_t *)v1604;
          v920 = v1612;
          v918 = v1617;
          v935 = v938.__sinval / v937;
          v934 = 1.0 / v1583 * (1.0 - v938.__cosval);
        }
        else
        {
          v934 = 0.5 - _D2 * (_D2 / -720.0 + 0.0416666667);
          v935 = 1.0 - _D2 * (0.166666667 - _D2 * (_D2 / -5040.0 + 0.00833333333));
          cosval = 1.0 - _D2 * v934;
        }
        v939 = (int8x16_t)vnegq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v919, v926.f64[0]), v918, v926, 1), v921, v925.f64[0]), v920, v925, 1), v923, v924.f64[0]), v922, v924, 1));
        *(_QWORD *)&v940.f64[0] = vextq_s8(v939, v939, 8uLL).u64[0];
        *(_QWORD *)&v941.f64[0] = vextq_s8(_Q27, _Q27, 8uLL).u64[0];
        v942 = v930.f64[0] * v934;
        v943 = _D9 * v934;
        v944 = *(double *)_Q27.i64 * v934;
        v945.f64[0] = cosval + v930.f64[0] * (v930.f64[0] * v934);
        v946 = cosval + _D9 * v943;
        *(double *)&v947 = cosval + *(double *)_Q27.i64 * v944;
        v948 = _D9 * v942;
        v949 = *(double *)_Q27.i64 * v942;
        v950 = *(double *)_Q27.i64 * v943;
        v951 = v930.f64[0] * v935;
        v952 = _D9 * v935;
        v953 = *(double *)_Q27.i64 * v935;
        v954.f64[0] = v948 - *(double *)_Q27.i64 * v935;
        v955.f64[0] = v952 + v949;
        v945.f64[1] = v948 + v953;
        v954.f64[1] = v946;
        v955.f64[1] = v950 - v951;
        v956.f64[1] = 0.0;
        v956.f64[0] = v949 - v952;
        v957.f64[1] = 0.0;
        v957.f64[0] = v951 + v950;
        v958 = (float64x2_t)v947;
        *(_QWORD *)&v940.f64[1] = v1451;
        v960 = *((float64x2_t *)v912 + 23);
        v959 = *((float64x2_t *)v912 + 24);
        v962 = *((float64x2_t *)v912 + 25);
        v961 = *((float64x2_t *)v912 + 26);
        v964 = *((float64x2_t *)v912 + 27);
        v963 = *((float64x2_t *)v912 + 28);
        v966 = *((float64x2_t *)v912 + 29);
        v965 = *((float64x2_t *)v912 + 30);
        *(_QWORD *)&v941.f64[1] = v939.i64[0];
        v1629 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v945, v960.f64[0]), v954, v960, 1), v955, v959.f64[0]), v941, v959, 1);
        *(float64x2_t *)v1630 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v956, v960.f64[0]), v957, v960, 1), v958, v959.f64[0]), v940, v959, 1);
        *(float64x2_t *)&v1630[16] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v945, v962.f64[0]), v954, v962, 1), v955, v961.f64[0]), v941, v961, 1);
        v1631 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v956, v962.f64[0]), v957, v962, 1), v958, v961.f64[0]), v940, v961, 1);
        *(float64x2_t *)v1632 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v945, v964.f64[0]), v954, v964, 1), v955, v963.f64[0]), v941, v963, 1);
        *(float64x2_t *)&v1632[16] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v956, v964.f64[0]), v957, v964, 1), v958, v963.f64[0]), v940, v963, 1);
        v1633 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v945, v966.f64[0]), v954, v966, 1), v955, v965.f64[0]), v941, v965, 1);
        *(float64x2_t *)v1634 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v956, v966.f64[0]), v957, v966, 1), v958, v965.f64[0]), v940, v965, 1);
      }
      memcpy(&v1634[16], v912 + 10, 0x120uLL);
      *(_OWORD *)&v1628[8] = *(_OWORD *)v912;
      *(_DWORD *)&v1628[24] = -1;
      v967 = *((float64x2_t *)v912 + 1);
      v1627 = (int8x16_t)v967;
      *(_DWORD *)v1628 = -1;
      v968 = *v912;
      v970 = (char *)*v1609;
      v969 = (char *)v1609[1];
      v971 = (char *)*v1609;
      if (v969 != (char *)*v1609)
      {
        v972 = (uint64_t)&v969[-*v1609] >> 4;
        v971 = (char *)*v1609;
        do
        {
          v973 = v972 >> 1;
          v974 = (unint64_t *)&v971[16 * (v972 >> 1)];
          v976 = *v974;
          v975 = (char *)(v974 + 2);
          v972 += ~(v972 >> 1);
          if (v976 < v968)
            v971 = v975;
          else
            v972 = v973;
        }
        while (v972);
      }
      if (v969 == v971 || *(_QWORD *)v971 != v968)
        v971 = (char *)v1609[1];
      if (v969 != v970)
      {
        v977 = (v969 - v970) >> 4;
        do
        {
          v978 = v977 >> 1;
          v979 = (unint64_t *)&v970[16 * (v977 >> 1)];
          v981 = *v979;
          v980 = (char *)(v979 + 2);
          v977 += ~(v977 >> 1);
          if (v981 < *(_QWORD *)&v967.f64[0])
            v970 = v980;
          else
            v977 = v978;
        }
        while (v977);
      }
      if (v969 == v970 || *(_QWORD *)v970 != *(_QWORD *)&v967.f64[0])
        v970 = (char *)v1609[1];
      if (v971 == v969)
        break;
      if (v970 == v969)
        goto LABEL_377;
LABEL_378:
      if (sub_20F269D10(*((_QWORD *)v970 + 1), v1627.i64) == 2
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 584, (uint64_t)"edge_return != AddPoseGraphEdgeReturn::kFailDueToInvalidEdge", 60, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_390;
      }
      v982 = *((_QWORD *)v971 + 1);
      *(_OWORD *)&v1620[16] = *(_OWORD *)v1628;
      *(_OWORD *)&v1620[28] = *(_OWORD *)&v1628[12];
      *(_OWORD *)&v1620[112] = *(_OWORD *)v1632;
      *(_OWORD *)&v1620[128] = *(_OWORD *)&v1632[16];
      *(float64x2_t *)&v1620[144] = v1633;
      *(_OWORD *)&v1620[160] = *(_OWORD *)v1634;
      *(float64x2_t *)&v1620[48] = v1629;
      *(_OWORD *)&v1620[64] = *(_OWORD *)v1630;
      *(_OWORD *)&v1620[80] = *(_OWORD *)&v1630[16];
      *(float64x2_t *)&v1620[96] = v1631;
      memcpy(&v1620[176], &v1634[16], 0x120uLL);
      v983 = 0;
      v984 = 0;
      v1621 = *(_DWORD *)&v1634[304];
      v1622 = v1634[308];
      *(_DWORD *)&v1620[16] = *(_DWORD *)&v1628[24];
      *(_DWORD *)&v1620[40] = *(_DWORD *)v1628;
      *(_OWORD *)v1620 = *(_OWORD *)&v1620[24];
      *(int8x16_t *)&v1620[24] = v1627;
      v985 = (int8x16_t)v1629;
      v986 = vextq_s8(v985, v985, 8uLL).u64[0];
      v987 = *(int8x16_t *)&v1630[16];
      v1613 = vextq_s8(v987, v987, 8uLL).u64[0];
      v988 = *(float64x2_t *)v1632;
      v1605 = (float64x2_t)vextq_s8((int8x16_t)v988, (int8x16_t)v988, 8uLL);
      v989 = *(double *)v1630;
      *(_QWORD *)v1656 = *(_QWORD *)v1630;
      *(float64x2_t *)__p = v1629;
      v990 = v1631.f64[0];
      *(float64_t *)v1658 = v1631.f64[0];
      v1657 = *(int8x16_t *)&v1630[16];
      v1590 = *(double *)&v1632[16];
      *(_QWORD *)v1660 = *(_QWORD *)&v1632[16];
      v1659 = *(int8x16_t *)v1632;
      do
      {
        v1661.i64[v983] = 0;
        v991 = v984 < 2;
        if (v984 < 2)
          ++v984;
        else
          v984 = 0;
        if (v991)
          ++v983;
        else
          v983 += 4;
      }
      while (v983 != 18);
      v992 = (float64x2_t)vzip1q_s64(*(int64x2_t *)__p, (int64x2_t)v1657);
      v993 = (float64x2_t)vzip2q_s64(*(int64x2_t *)__p, (int64x2_t)v1657);
      v994 = vmlaq_laneq_f64(vmulq_n_f64(v992, *(double *)&v1620[176]), v993, *(float64x2_t *)&v1620[176], 1);
      v995 = (float64x2_t)vzip1q_s64((int64x2_t)v1659, v1661);
      *(_QWORD *)&v996.f64[0] = vdupq_laneq_s64((int64x2_t)v1659, 1).u64[0];
      *(_QWORD *)&v996.f64[1] = v1661.i64[1];
      v1618 = vmlaq_laneq_f64(vmulq_n_f64(v995, *(double *)&v1620[176]), v996, *(float64x2_t *)&v1620[176], 1);
      v997 = (float64x2_t)vzip1q_s64(v1663, v1665);
      *(_QWORD *)&v998.f64[0] = vdupq_laneq_s64(v1663, 1).u64[0];
      *(_QWORD *)&v998.f64[1] = v1665.i64[1];
      v999 = vmlaq_laneq_f64(vmulq_n_f64(v997, *(double *)&v1620[176]), v998, *(float64x2_t *)&v1620[176], 1);
      v1000 = vmlaq_laneq_f64(vmulq_n_f64(v992, *(double *)&v1620[224]), v993, *(float64x2_t *)&v1620[224], 1);
      v1001 = vmlaq_laneq_f64(vmulq_n_f64(v995, *(double *)&v1620[224]), v996, *(float64x2_t *)&v1620[224], 1);
      v1002 = vmlaq_laneq_f64(vmulq_n_f64(v997, *(double *)&v1620[224]), v998, *(float64x2_t *)&v1620[224], 1);
      v1003 = vmlaq_laneq_f64(vmulq_n_f64(v992, *(double *)&v1620[272]), v993, *(float64x2_t *)&v1620[272], 1);
      v1004 = vmlaq_laneq_f64(vmulq_n_f64(v995, *(double *)&v1620[272]), v996, *(float64x2_t *)&v1620[272], 1);
      v1005 = vmlaq_laneq_f64(vmulq_n_f64(v997, *(double *)&v1620[272]), v998, *(float64x2_t *)&v1620[272], 1);
      v1551 = vmlaq_laneq_f64(vmulq_n_f64(v992, *(double *)&v1620[320]), v993, *(float64x2_t *)&v1620[320], 1);
      v1006 = vmlaq_laneq_f64(vmulq_n_f64(v995, *(double *)&v1620[320]), v996, *(float64x2_t *)&v1620[320], 1);
      v1007 = vmlaq_laneq_f64(vmulq_n_f64(v997, *(double *)&v1620[320]), v998, *(float64x2_t *)&v1620[320], 1);
      v1008 = vmlaq_laneq_f64(vmulq_n_f64(v992, *(double *)&v1620[368]), v993, *(float64x2_t *)&v1620[368], 1);
      v1009 = vmlaq_laneq_f64(vmulq_n_f64(v995, *(double *)&v1620[368]), v996, *(float64x2_t *)&v1620[368], 1);
      v1010 = vmlaq_laneq_f64(vmulq_n_f64(v997, *(double *)&v1620[368]), v998, *(float64x2_t *)&v1620[368], 1);
      v1011 = vmlaq_laneq_f64(vmulq_n_f64(v992, *(double *)&v1620[416]), v993, *(float64x2_t *)&v1620[416], 1);
      v1012 = vmlaq_laneq_f64(vmulq_n_f64(v995, *(double *)&v1620[416]), v996, *(float64x2_t *)&v1620[416], 1);
      *(_QWORD *)&v996.f64[0] = v986;
      v996.f64[1] = v990;
      v1013 = vmlaq_laneq_f64(vmulq_n_f64(v997, *(double *)&v1620[416]), v998, *(float64x2_t *)&v1620[416], 1);
      *(_QWORD *)&v995.f64[0] = v985.i64[0];
      *(_QWORD *)&v995.f64[1] = v1613;
      v998.f64[0] = *(float64_t *)&v1620[160];
      v1014 = (float64x2_t)vextq_s8(*(int8x16_t *)&v1620[144], (int8x16_t)v998, 8uLL);
      v1015 = (int8x16_t)vmlsq_f64(vmulq_f64(v996, *(float64x2_t *)&v1620[144]), v995, v1014);
      v995.f64[0] = v1590;
      v995.f64[1] = v988.f64[0];
      v992.f64[0] = v989;
      *(_QWORD *)&v992.f64[1] = v985.i64[0];
      v1016 = vmulq_f64(v992, v1014);
      v1017 = vmulq_f64(v995, v1014);
      v1014.f64[0] = v1605.f64[0];
      v1014.f64[1] = v1590;
      *(_QWORD *)&v993.f64[0] = v986;
      v993.f64[1] = v989;
      _Q7 = (float64x2_t)vzip1q_s64((int64x2_t)v998, *(int64x2_t *)&v1620[144]);
      v1019 = vmlsq_f64(v1017, v1014, _Q7);
      v1020 = vmlsq_f64(v1016, v993, _Q7);
      *(_QWORD *)&v1014.f64[0] = v987.i64[0];
      *(_QWORD *)&v1014.f64[1] = v1613;
      v993.f64[0] = v990;
      *(_QWORD *)&v993.f64[1] = v987.i64[0];
      v1021 = (int8x16_t)vmlsq_f64(vmulq_f64(v1014, _Q7), v993, *(float64x2_t *)&v1620[144]);
      *(float64x2_t *)&v1656[8] = v1020;
      *(int8x16_t *)&v1658[8] = vextq_s8(v1015, v1021, 8uLL);
      *(float64x2_t *)&v1660[8] = v1019;
      v985.i64[1] = v986;
      v987.i64[1] = v1613;
      *(int8x16_t *)&v1662[8] = v985;
      *(int8x16_t *)&v1664[8] = v987;
      *(_QWORD *)&v1019.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v1605, *(float64x2_t *)&v1620[144]), v988, *(float64x2_t *)&v1620[144], 1);
      v988.f64[1] = v1605.f64[0];
      *(float64x2_t *)&v1666[8] = v988;
      v1022 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1656, *(int64x2_t *)v1658);
      v1023 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1656, *(int64x2_t *)v1658);
      v1024 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1660, *(int64x2_t *)v1662);
      *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v1660, 1).u64[0];
      *(_QWORD *)&_Q7.f64[1] = v985.i64[0];
      *(_QWORD *)&_Q16.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v1664, 1).u64[0];
      _Q16.f64[1] = *(float64_t *)&v1666[8];
      _Q17 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1664, *(int64x2_t *)v1666);
      v1027 = vmlaq_laneq_f64(vmlaq_n_f64(v1000, v1022, *(double *)&v1620[240]), v1023, *(float64x2_t *)&v1620[240], 1);
      v1028 = vmlaq_laneq_f64(vmlaq_n_f64(v1001, v1024, *(double *)&v1620[240]), _Q7, *(float64x2_t *)&v1620[240], 1);
      v1029 = vmlaq_laneq_f64(vmlaq_n_f64(v1002, _Q17, *(double *)&v1620[240]), _Q16, *(float64x2_t *)&v1620[240], 1);
      v1030 = vmlaq_laneq_f64(vmlaq_n_f64(v1003, v1022, *(double *)&v1620[288]), v1023, *(float64x2_t *)&v1620[288], 1);
      v1031 = vmlaq_laneq_f64(vmlaq_n_f64(v1004, v1024, *(double *)&v1620[288]), _Q7, *(float64x2_t *)&v1620[288], 1);
      v1606 = vmlaq_laneq_f64(vmlaq_n_f64(v1005, _Q17, *(double *)&v1620[288]), _Q16, *(float64x2_t *)&v1620[288], 1);
      v1032 = vmlaq_laneq_f64(vmlaq_n_f64(v1551, v1022, *(double *)&v1620[336]), v1023, *(float64x2_t *)&v1620[336], 1);
      v1033 = vmlaq_laneq_f64(vmlaq_n_f64(v1006, v1024, *(double *)&v1620[336]), _Q7, *(float64x2_t *)&v1620[336], 1);
      v1034 = vmlaq_laneq_f64(vmlaq_n_f64(v1008, v1022, *(double *)&v1620[384]), v1023, *(float64x2_t *)&v1620[384], 1);
      v1035 = vmlaq_laneq_f64(vmlaq_n_f64(v1009, v1024, *(double *)&v1620[384]), _Q7, *(float64x2_t *)&v1620[384], 1);
      v1036 = vmlaq_laneq_f64(vmlaq_n_f64(v1011, v1022, *(double *)&v1620[432]), v1023, *(float64x2_t *)&v1620[432], 1);
      v1037 = vmlaq_laneq_f64(vmlaq_n_f64(v1012, v1024, *(double *)&v1620[432]), _Q7, *(float64x2_t *)&v1620[432], 1);
      *(_QWORD *)&v1658[24] = v1021.i64[1];
      *(_QWORD *)&v1656[24] = v1015.i64[0];
      *(float64_t *)&v1660[24] = v1019.f64[0];
      *(float64_t *)&v1662[24] = v989;
      *(float64_t *)&v1664[24] = v990;
      *(float64_t *)&v1666[24] = v1590;
      *(_QWORD *)&v996.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1660[16], 1).u64[0];
      v996.f64[1] = v989;
      *(_QWORD *)&v1019.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v1664[16], 1).u64[0];
      v1019.f64[1] = v1590;
      v1038 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1656[16], *(int64x2_t *)&v1658[16]);
      v1039 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v994, v1022, *(double *)&v1620[192]), v1023, *(float64x2_t *)&v1620[192], 1), v1038, *(double *)&v1620[208]);
      v1040 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1656[16], *(int64x2_t *)&v1658[16]);
      v1041 = vmlaq_laneq_f64(v1039, v1040, *(float64x2_t *)&v1620[208], 1);
      v1042 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1660[16], *(int64x2_t *)&v1662[16]);
      v1043 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1618, v1024, *(double *)&v1620[192]), _Q7, *(float64x2_t *)&v1620[192], 1), v1042, *(double *)&v1620[208]), v996, *(float64x2_t *)&v1620[208], 1);
      _Q6 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1664[16], *(int64x2_t *)&v1666[16]);
      v1045 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v999, _Q17, *(double *)&v1620[192]), _Q16, *(float64x2_t *)&v1620[192], 1), _Q6, *(double *)&v1620[208]), v1019, *(float64x2_t *)&v1620[208], 1);
      v1046 = vmlaq_laneq_f64(vmlaq_n_f64(v1027, v1038, *(double *)&v1620[256]), v1040, *(float64x2_t *)&v1620[256], 1);
      v1047 = vmlaq_laneq_f64(vmlaq_n_f64(v1028, v1042, *(double *)&v1620[256]), v996, *(float64x2_t *)&v1620[256], 1);
      v1048 = vmlaq_laneq_f64(vmlaq_n_f64(v1029, _Q6, *(double *)&v1620[256]), v1019, *(float64x2_t *)&v1620[256], 1);
      v1614 = vmlaq_laneq_f64(vmlaq_n_f64(v1030, v1038, *(double *)&v1620[304]), v1040, *(float64x2_t *)&v1620[304], 1);
      v1619 = vmlaq_laneq_f64(vmlaq_n_f64(v1031, v1042, *(double *)&v1620[304]), v996, *(float64x2_t *)&v1620[304], 1);
      v1607 = vmlaq_laneq_f64(vmlaq_n_f64(v1606, _Q6, *(double *)&v1620[304]), v1019, *(float64x2_t *)&v1620[304], 1);
      v1049 = vmlaq_laneq_f64(vmlaq_n_f64(v1032, v1038, *(double *)&v1620[352]), v1040, *(float64x2_t *)&v1620[352], 1);
      v1532 = vmlaq_laneq_f64(vmlaq_n_f64(v1033, v1042, *(double *)&v1620[352]), v996, *(float64x2_t *)&v1620[352], 1);
      v1527 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1007, _Q17, *(double *)&v1620[336]), _Q16, *(float64x2_t *)&v1620[336], 1), _Q6, *(double *)&v1620[352]), v1019, *(float64x2_t *)&v1620[352], 1);
      v1050 = vmlaq_laneq_f64(vmlaq_n_f64(v1034, v1038, *(double *)&v1620[400]), v1040, *(float64x2_t *)&v1620[400], 1);
      v1051 = vmlaq_laneq_f64(vmlaq_n_f64(v1035, v1042, *(double *)&v1620[400]), v996, *(float64x2_t *)&v1620[400], 1);
      v1052 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1010, _Q17, *(double *)&v1620[384]), _Q16, *(float64x2_t *)&v1620[384], 1), _Q6, *(double *)&v1620[400]), v1019, *(float64x2_t *)&v1620[400], 1);
      v1053 = vmlaq_laneq_f64(vmlaq_n_f64(v1036, v1038, *(double *)&v1620[448]), v1040, *(float64x2_t *)&v1620[448], 1);
      v1054 = vmlaq_laneq_f64(vmlaq_n_f64(v1037, v1042, *(double *)&v1620[448]), v996, *(float64x2_t *)&v1620[448], 1);
      v1055 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1013, _Q17, *(double *)&v1620[432]), _Q16, *(float64x2_t *)&v1620[432], 1), _Q6, *(double *)&v1620[448]), v1019, *(float64x2_t *)&v1620[448], 1);
      *(float64x2_t *)&v1620[192] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1043, *(double *)__p), v1047, *(float64x2_t *)__p, 1), v1619, *(double *)v1656), v1532, *(float64x2_t *)v1656, 1), v1051, *(double *)&v1656[16]), v1054, *(float64x2_t *)&v1656[16], 1);
      *(float64x2_t *)&v1620[176] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1041, *(double *)__p), v1046, *(float64x2_t *)__p, 1), v1614, *(double *)v1656), v1049, *(float64x2_t *)v1656, 1), v1050, *(double *)&v1656[16]), v1053, *(float64x2_t *)&v1656[16], 1);
      *(float64x2_t *)&v1620[208] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1045, *(double *)__p), v1048, *(float64x2_t *)__p, 1), v1607, *(double *)v1656), v1527, *(float64x2_t *)v1656, 1), v1052, *(double *)&v1656[16]), v1055, *(float64x2_t *)&v1656[16], 1);
      *(float64x2_t *)&v1620[224] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1041, *(double *)v1657.i64), v1046, (float64x2_t)v1657, 1), v1614, *(double *)v1658), v1049, *(float64x2_t *)v1658, 1), v1050, *(double *)&v1658[16]), v1053, *(float64x2_t *)&v1658[16], 1);
      *(float64x2_t *)&v1620[240] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1043, *(double *)v1657.i64), v1047, (float64x2_t)v1657, 1), v1619, *(double *)v1658), v1532, *(float64x2_t *)v1658, 1), v1051, *(double *)&v1658[16]), v1054, *(float64x2_t *)&v1658[16], 1);
      *(float64x2_t *)&v1620[256] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1045, *(double *)v1657.i64), v1048, (float64x2_t)v1657, 1), v1607, *(double *)v1658), v1527, *(float64x2_t *)v1658, 1), v1052, *(double *)&v1658[16]), v1055, *(float64x2_t *)&v1658[16], 1);
      *(float64x2_t *)&v1620[272] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1041, *(double *)v1659.i64), v1046, (float64x2_t)v1659, 1), v1614, *(double *)v1660), v1049, *(float64x2_t *)v1660, 1), v1050, *(double *)&v1660[16]), v1053, *(float64x2_t *)&v1660[16], 1);
      *(float64x2_t *)&v1620[288] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1043, *(double *)v1659.i64), v1047, (float64x2_t)v1659, 1), v1619, *(double *)v1660), v1532, *(float64x2_t *)v1660, 1), v1051, *(double *)&v1660[16]), v1054, *(float64x2_t *)&v1660[16], 1);
      *(float64x2_t *)&v1620[304] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1045, *(double *)v1659.i64), v1048, (float64x2_t)v1659, 1), v1607, *(double *)v1660), v1527, *(float64x2_t *)v1660, 1), v1052, *(double *)&v1660[16]), v1055, *(float64x2_t *)&v1660[16], 1);
      *(float64x2_t *)&v1620[320] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1041, *(double *)v1661.i64), v1046, (float64x2_t)v1661, 1), v1614, *(double *)v1662), v1049, *(float64x2_t *)v1662, 1), v1050, *(double *)&v1662[16]), v1053, *(float64x2_t *)&v1662[16], 1);
      *(float64x2_t *)&v1620[336] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1043, *(double *)v1661.i64), v1047, (float64x2_t)v1661, 1), v1619, *(double *)v1662), v1532, *(float64x2_t *)v1662, 1), v1051, *(double *)&v1662[16]), v1054, *(float64x2_t *)&v1662[16], 1);
      *(float64x2_t *)&v1620[352] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1045, *(double *)v1661.i64), v1048, (float64x2_t)v1661, 1), v1607, *(double *)v1662), v1527, *(float64x2_t *)v1662, 1), v1052, *(double *)&v1662[16]), v1055, *(float64x2_t *)&v1662[16], 1);
      *(float64x2_t *)&v1620[368] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1041, *(double *)v1663.i64), v1046, (float64x2_t)v1663, 1), v1614, *(double *)v1664), v1049, *(float64x2_t *)v1664, 1), v1050, *(double *)&v1664[16]), v1053, *(float64x2_t *)&v1664[16], 1);
      *(float64x2_t *)&v1620[384] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1043, *(double *)v1663.i64), v1047, (float64x2_t)v1663, 1), v1619, *(double *)v1664), v1532, *(float64x2_t *)v1664, 1), v1051, *(double *)&v1664[16]), v1054, *(float64x2_t *)&v1664[16], 1);
      *(float64x2_t *)&v1620[400] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1045, *(double *)v1663.i64), v1048, (float64x2_t)v1663, 1), v1607, *(double *)v1664), v1527, *(float64x2_t *)v1664, 1), v1052, *(double *)&v1664[16]), v1055, *(float64x2_t *)&v1664[16], 1);
      *(float64x2_t *)&v1620[416] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1041, *(double *)v1665.i64), v1046, (float64x2_t)v1665, 1), v1614, *(double *)v1666), v1049, *(float64x2_t *)v1666, 1), v1050, *(double *)&v1666[16]), v1053, *(float64x2_t *)&v1666[16], 1);
      *(float64x2_t *)&v1620[432] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1043, *(double *)v1665.i64), v1047, (float64x2_t)v1665, 1), v1619, *(double *)v1666), v1532, *(float64x2_t *)v1666, 1), v1051, *(double *)&v1666[16]), v1054, *(float64x2_t *)&v1666[16], 1);
      *(float64x2_t *)&v1620[448] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1045, *(double *)v1665.i64), v1048, (float64x2_t)v1665, 1), v1607, *(double *)v1666), v1527, *(float64x2_t *)v1666, 1), v1052, *(double *)&v1666[16]), v1055, *(float64x2_t *)&v1666[16], 1);
      v996.f64[0] = *(float64_t *)&v1620[64];
      v1056 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1620[48], *(int64x2_t *)&v1620[80]);
      v1057 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1620[48], *(int64x2_t *)&v1620[80]);
      v996.f64[1] = *(float64_t *)&v1620[96];
      _Q16.f64[1] = *(float64_t *)&v1620[152];
      _Q6.f64[0] = *(float64_t *)&v1620[120];
      __asm { FMLS            D7, D6, V16.D[1] }
      v1058 = vzip1q_s64(*(int64x2_t *)&v1620[112], (int64x2_t)v1057);
      v1059 = vmlsq_laneq_f64(vmulq_n_f64(v1056, vnegq_f64(*(float64x2_t *)&v1620[144]).f64[0]), v1057, *(float64x2_t *)&v1620[144], 1);
      *(_QWORD *)&_Q16.f64[0] = vdupq_laneq_s64(v1058, 1).u64[0];
      _Q1 = vextq_s8((int8x16_t)v1057, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)&v1620[112], 1), 8uLL);
      *(_QWORD *)&_Q16.f64[1] = _Q1.i64[0];
      _Q1.i64[0] = *(_QWORD *)&v1620[128];
      _Q17.f64[0] = *(float64_t *)&v1620[160];
      __asm { FMLS            D7, D6, V17.D[0] }
      *(float64x2_t *)&v1620[112] = v996;
      *(_OWORD *)&v1620[128] = *(unint64_t *)&v1620[128];
      *(float64x2_t *)&v1620[48] = v1056;
      *(_OWORD *)&v1620[64] = v1058.u64[0];
      *(_OWORD *)&v1620[96] = _Q1.u64[1];
      *(float64x2_t *)&v1620[80] = _Q16;
      _Q7.f64[1] = 1.0;
      *(float64x2_t *)&v1620[144] = vmlsq_lane_f64(v1059, v996, *(double *)&v1620[160], 0);
      *(float64x2_t *)&v1620[160] = _Q7;
      if (sub_20F269D10(v982, (uint64_t *)v1620) == 2
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 587, (uint64_t)"edge_return != AddPoseGraphEdgeReturn::kFailDueToInvalidEdge", 60, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_390:
        abort();
      }
      v912 += 62;
      if (v912 == v1523)
        goto LABEL_391;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 578, (uint64_t)"neighbor_submap_i != neighbor_submaps.end()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_397;
    }
    if (v970 != (char *)v1609[1])
      goto LABEL_378;
LABEL_377:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 579, (uint64_t)"neighbor_submap_j != neighbor_submaps.end()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_397:
      abort();
    }
    goto LABEL_378;
  }
LABEL_391:
  v1061 = (char *)*v1609;
  v1062 = (char *)v1609[1];
  if ((char *)*v1609 != v1062)
  {
    do
    {
      sub_20F26A100(*((_QWORD *)v1061 + 1), *(_QWORD *)(*(_QWORD *)(v1608 + 16) + 160));
      v1061 += 16;
    }
    while (v1061 != v1062);
  }
  if (v1623)
  {
    v1624 = (unint64_t *)v1623;
    operator delete(v1623);
  }
}

void sub_20F2A5494(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (SLOBYTE(STACK[0x1277]) < 0)
    operator delete((void *)STACK[0x1260]);
  sub_20E863784((uint64_t)&STACK[0x1070]);
  v2 = (void *)STACK[0x1380];
  if (STACK[0x1380])
  {
    STACK[0x1388] = (unint64_t)v2;
    operator delete(v2);
    if (!STACK[0xE30])
    {
LABEL_5:
      v3 = (void *)STACK[0xE70];
      if (!STACK[0xE70])
      {
LABEL_10:
        v4 = (void *)STACK[0x1050];
        if (STACK[0x1050])
        {
          STACK[0x1058] = (unint64_t)v4;
          operator delete(v4);
        }
        _Unwind_Resume(a1);
      }
LABEL_9:
      STACK[0xE78] = (unint64_t)v3;
      operator delete(v3);
      goto LABEL_10;
    }
  }
  else if (!STACK[0xE30])
  {
    goto LABEL_5;
  }
  operator delete((void *)STACK[0xE30]);
  v3 = (void *)STACK[0xE70];
  if (!STACK[0xE70])
    goto LABEL_10;
  goto LABEL_9;
}

BOOL sub_20F2A562C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t **i;
  uint64_t **v38;
  int v39;
  _BOOL8 v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  size_t v45;
  const char *v46;
  unsigned __int8 v47;
  uint64_t v48;
  int v49;
  char **v50;
  char *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  const char *v58;
  unsigned __int8 v59;
  const char *v60;
  size_t v61;
  __int128 *v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  os_log_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned __int8 v108;
  const char *v109;
  size_t v110;
  __int128 *v111;
  unint64_t v112;
  const char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  size_t v123;
  NSObject *v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  unint64_t v129;
  os_log_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t **v158;
  uint64_t **v159;
  uint64_t **v160;
  uint64_t **v161;
  uint64_t *v162;
  uint64_t *v163;
  __int16 v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t *v169;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v171;
  int v172;
  const char *v173;
  int v174;
  const char *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  uint64_t **v179;
  uint64_t **v180;
  uint64_t v181;
  os_log_t v182;
  __int128 v183;
  __int128 v184;
  void **v185;
  size_t v186;
  unint64_t v187;
  char v188;
  uint64_t v189;
  _QWORD v190[3];

  if (!*(_QWORD *)(a2 + 424)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 618, (uint64_t)"ref_map_data.viodatabase()", 26, (uint64_t)"Map Data must have a vio database", 33, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v179 = 0;
  v180 = 0;
  v181 = 0;
  if (*a23 != a23[1])
  {
    (*(void (**)(uint64_t, _QWORD, char **, uint64_t ***, uint64_t))(*(_QWORD *)a1 + 56))(a1, *(_QWORD *)(a2 + 424), a23, &v179, 1);
    a23[1] = *a23;
    goto LABEL_5;
  }
  v48 = *(_QWORD *)(a2 + 424);
  if (*(_BYTE *)(a4 + 8))
    v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t ***, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, v48, *(_QWORD *)a4, a12, &v179, 1, 0, 0);
  else
    v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t ***, double))(*(_QWORD *)a1 + 16))(a1, v48, a6, a9, &v179, 1.79769313e308);
  if (v49)
  {
    if ((_BYTE)a29)
      *(_BYTE *)(a28 + 17) = 1;
    sub_20F2A68B0(&v178);
    if (**(int **)(v178 + 56) > 3)
      goto LABEL_196;
    v52 = *(unsigned __int8 *)(v178 + 72);
    v53 = sub_20E8C31DC(v178, "OSLogSurrogateAppender", 1, 0);
    v54 = v53;
    if (!v52 && !v53)
      goto LABEL_196;
    v169 = &v178;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v171 = std::chrono::system_clock::now().__d_.__rep_;
    v172 = 3;
    v173 = "unknown file";
    v174 = 642;
    v176 = 0;
    v177 = 0;
    v175 = "unknown function";
    v55 = v178;
    v56 = v178 + 16;
    if (*(char *)(v178 + 39) < 0)
    {
      v58 = *(const char **)(v178 + 16);
      v57 = *(_QWORD *)(v178 + 24);
    }
    else
    {
      v57 = *(unsigned __int8 *)(v178 + 39);
      v58 = (const char *)(*v169 + 16);
    }
    v108 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v182);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v182);
      if ((_BYTE)v184 && SHIBYTE(v183) < 0)
        operator delete(v182);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v109 = byte_254A4A4F8;
    else
      v109 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v110 = byte_254A4A4F8[23];
    else
      v110 = *(_QWORD *)&byte_254A4A4F8[8];
    v182 = os_log_create(v109, v58);
    v111 = &v183;
    if (v110 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v110 >= 0x17)
    {
      v112 = v54;
      v113 = v58;
      v114 = v55;
      v115 = v52;
      v116 = v56;
      v117 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v110 | 7) != 0x17)
        v117 = v110 | 7;
      v118 = v117 + 1;
      v111 = (__int128 *)operator new(v117 + 1);
      *(_QWORD *)&v184 = v118 | 0x8000000000000000;
      *(_QWORD *)&v183 = v111;
      *((_QWORD *)&v183 + 1) = v110;
      v56 = v116;
      v52 = v115;
      v55 = v114;
      v58 = v113;
      v54 = v112;
    }
    else
    {
      BYTE7(v184) = v110;
      if (!v110)
      {
LABEL_126:
        *((_BYTE *)v111 + v110) = 0;
        BYTE8(v184) = 1;
        v119 = (void **)&v185;
        if (v57 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v57 >= 0x17)
        {
          v120 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17)
            v120 = v57 | 7;
          v121 = v120 + 1;
          v119 = (void **)operator new(v120 + 1);
          v186 = v57;
          v187 = v121 | 0x8000000000000000;
          v185 = v119;
        }
        else
        {
          HIBYTE(v187) = v57;
          if (!v57)
            goto LABEL_134;
        }
        memmove(v119, v58, v57);
LABEL_134:
        *((_BYTE *)v119 + v57) = 0;
        v188 = 1;
        v122 = v182;
        if (SHIBYTE(v187) < 0)
          operator delete(v185);
        if (BYTE8(v184) && SBYTE7(v184) < 0)
          operator delete((void *)v183);
        if (v182)
          os_release(v182);
        if (v54 && *(_QWORD *)(v54 + 24))
        {
          v123 = _os_log_pack_size();
          v124 = operator new(v123, (std::align_val_t)8uLL);
          v125 = (std::__shared_weak_count *)operator new();
          v126 = v125;
          v125->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v125->__shared_owners_;
          v125->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v125->__shared_weak_owners_ = 0;
          v125[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
          v182 = v124;
          *(_QWORD *)&v183 = v124;
          *((_QWORD *)&v183 + 1) = v125;
          do
            v128 = __ldxr(p_shared_owners);
          while (__stxr(v128 + 1, p_shared_owners));
          v184 = 0uLL;
          v185 = 0;
          do
            v129 = __ldaxr(p_shared_owners);
          while (__stlxr(v129 - 1, p_shared_owners));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v126);
          }
          v130 = v182;
          *(_WORD *)_os_log_pack_fill() = 0;
          v131 = operator new();
          v132 = *(unsigned __int8 *)(v55 + 39);
          if ((v132 & 0x80u) == 0)
            v133 = v56;
          else
            v133 = *(_QWORD *)(v55 + 16);
          if ((v132 & 0x80u) != 0)
            v132 = *(_QWORD *)(v55 + 24);
          *(_QWORD *)v131 = v130;
          *(_OWORD *)(v131 + 8) = v183;
          v183 = 0uLL;
          *(_OWORD *)(v131 + 24) = v184;
          v184 = 0uLL;
          *(_QWORD *)(v131 + 40) = v133;
          *(_QWORD *)(v131 + 48) = v132;
          *(_BYTE *)(v131 + 56) = 1;
          v189 = 0;
          v190[0] = v131;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v54 + 24) + 40))(*(_QWORD *)(v54 + 24), v190);
          v134 = v190[0];
          v190[0] = 0;
          if (v134)
          {
            v135 = *(std::__shared_weak_count **)(v134 + 32);
            if (v135)
            {
              v136 = (unint64_t *)&v135->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            v138 = *(std::__shared_weak_count **)(v134 + 16);
            if (v138)
            {
              v139 = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            MEMORY[0x212BC6398](v134, 0x10F0C40B62ED6C6);
            v141 = v189;
            v189 = 0;
            if (v141)
            {
              v142 = *(std::__shared_weak_count **)(v141 + 32);
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              v145 = *(std::__shared_weak_count **)(v141 + 16);
              if (v145)
              {
                v146 = (unint64_t *)&v145->__shared_owners_;
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              MEMORY[0x212BC6398](v141, 0x10F0C40B62ED6C6);
            }
          }
          v148 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
          if (*((_QWORD *)&v184 + 1))
          {
            v149 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
          v151 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
          if (*((_QWORD *)&v183 + 1))
          {
            v152 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
              std::__shared_weak_count::__release_weak(v151);
            }
          }
        }
        else
        {
          os_log_type_enabled(v122, OS_LOG_TYPE_INFO);
          LOWORD(v182) = 0;
          v154 = (void *)_os_log_send_and_compose_impl();
          if (v154)
            free(v154);
        }
        if (v52)
        {
          sub_20E8C003C((uint64_t)&v169, "Keyframe sampling failed");
          sub_20E863570((uint64_t)&v169);
        }
        sub_20E863570((uint64_t)&v169);
        v155 = v177;
        if (v177)
        {
          v156 = (unint64_t *)&v177->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
LABEL_196:
        v40 = 0;
        goto LABEL_197;
      }
    }
    memmove(v111, v109, v110);
    goto LABEL_126;
  }
LABEL_5:
  v166 = a8;
  v38 = v179;
  for (i = v180; v38 != i; v38 += 3)
    sub_20F2A69A4(a2, v38, a3);
  v168 = 0;
  HIBYTE(v165) = a13;
  LOBYTE(v165) = a11;
  v39 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t ***, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(a2 + 424), &v179, a5, a6, a7, v166, a10, v165, a12, a15, a14, a16, a17, a18, a19, a20, a21, a22,
          a24,
          &v168,
          a25,
          a26,
          a27,
          a28,
          a29);
  v40 = v39 == 0;
  if (v39)
  {
    sub_20F2A68B0(&v178);
    if (**(int **)(v178 + 56) > 3)
      goto LABEL_197;
    v41 = *(unsigned __int8 *)(v178 + 72);
    v42 = sub_20E8C31DC(v178, "OSLogSurrogateAppender", 1, 0);
    v43 = v42;
    if (!v41 && !v42)
      goto LABEL_197;
    v169 = &v178;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v171 = std::chrono::system_clock::now().__d_.__rep_;
    v172 = 3;
    v173 = "unknown file";
    v174 = 673;
    v176 = 0;
    v177 = 0;
    v175 = "unknown function";
    v44 = *v169;
    if (*(char *)(*v169 + 39) < 0)
    {
      v46 = *(const char **)(v44 + 16);
      v45 = *(_QWORD *)(v44 + 24);
      v167 = *v169 + 16;
      v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v59 & 1) != 0)
        goto LABEL_29;
    }
    else
    {
      v45 = *(unsigned __int8 *)(*v169 + 39);
      v46 = (const char *)(*v169 + 16);
      v167 = (uint64_t)v46;
      v47 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v47 & 1) != 0)
        goto LABEL_29;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v182);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v182);
      if ((_BYTE)v184 && SHIBYTE(v183) < 0)
        operator delete(v182);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_29:
    if (byte_254A4A4F8[23] >= 0)
      v60 = byte_254A4A4F8;
    else
      v60 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v61 = byte_254A4A4F8[23];
    else
      v61 = *(_QWORD *)&byte_254A4A4F8[8];
    v182 = os_log_create(v60, v46);
    v62 = &v183;
    if (v61 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v61 >= 0x17)
    {
      v63 = v43;
      v64 = v46;
      v65 = v44;
      v66 = v41;
      v67 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v61 | 7) != 0x17)
        v67 = v61 | 7;
      v68 = v67 + 1;
      v62 = (__int128 *)operator new(v67 + 1);
      *(_QWORD *)&v184 = v68 | 0x8000000000000000;
      *(_QWORD *)&v183 = v62;
      *((_QWORD *)&v183 + 1) = v61;
      v41 = v66;
      v44 = v65;
      v46 = v64;
      v43 = v63;
    }
    else
    {
      BYTE7(v184) = v61;
      if (!v61)
      {
LABEL_43:
        *((_BYTE *)v62 + v61) = 0;
        BYTE8(v184) = 1;
        v69 = (void **)&v185;
        if (v45 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v45 >= 0x17)
        {
          v70 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17)
            v70 = v45 | 7;
          v71 = v70 + 1;
          v69 = (void **)operator new(v70 + 1);
          v186 = v45;
          v187 = v71 | 0x8000000000000000;
          v185 = v69;
        }
        else
        {
          HIBYTE(v187) = v45;
          if (!v45)
            goto LABEL_51;
        }
        memmove(v69, v46, v45);
LABEL_51:
        *((_BYTE *)v69 + v45) = 0;
        v188 = 1;
        v72 = v182;
        if (SHIBYTE(v187) < 0)
          operator delete(v185);
        if (BYTE8(v184) && SBYTE7(v184) < 0)
          operator delete((void *)v183);
        if (v182)
          os_release(v182);
        if (v43 && *(_QWORD *)(v43 + 24))
        {
          v73 = _os_log_pack_size();
          v74 = operator new(v73, (std::align_val_t)8uLL);
          v75 = (std::__shared_weak_count *)operator new();
          v76 = v75;
          v75->__shared_owners_ = 0;
          v77 = (unint64_t *)&v75->__shared_owners_;
          v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v75->__shared_weak_owners_ = 0;
          v75[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
          v182 = v74;
          *(_QWORD *)&v183 = v74;
          *((_QWORD *)&v183 + 1) = v75;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
          v184 = 0uLL;
          v185 = 0;
          do
            v79 = __ldaxr(v77);
          while (__stlxr(v79 - 1, v77));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v76);
          }
          v80 = v182;
          *(_WORD *)_os_log_pack_fill() = 0;
          v81 = operator new();
          v82 = *(unsigned __int8 *)(v44 + 39);
          v83 = v167;
          if ((v82 & 0x80u) != 0)
          {
            v83 = *(_QWORD *)(v44 + 16);
            v82 = *(_QWORD *)(v44 + 24);
          }
          *(_QWORD *)v81 = v80;
          *(_OWORD *)(v81 + 8) = v183;
          v183 = 0uLL;
          *(_OWORD *)(v81 + 24) = v184;
          v184 = 0uLL;
          *(_QWORD *)(v81 + 40) = v83;
          *(_QWORD *)(v81 + 48) = v82;
          *(_BYTE *)(v81 + 56) = 1;
          v189 = 0;
          v190[0] = v81;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), v190);
          v84 = v190[0];
          v190[0] = 0;
          if (v84)
          {
            v85 = *(std::__shared_weak_count **)(v84 + 32);
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v88 = *(std::__shared_weak_count **)(v84 + 16);
            if (v88)
            {
              v89 = (unint64_t *)&v88->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
            v91 = v189;
            v189 = 0;
            if (v91)
            {
              v92 = *(std::__shared_weak_count **)(v91 + 32);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v95 = *(std::__shared_weak_count **)(v91 + 16);
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
            }
          }
          v98 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
          if (*((_QWORD *)&v184 + 1))
          {
            v99 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v101 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
          if (*((_QWORD *)&v183 + 1))
          {
            v102 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
        }
        else
        {
          os_log_type_enabled(v72, OS_LOG_TYPE_INFO);
          LOWORD(v182) = 0;
          v104 = (void *)_os_log_send_and_compose_impl();
          if (v104)
            free(v104);
        }
        if (v41)
        {
          sub_20E8C003C((uint64_t)&v169, "PnP pose estimation failed");
          sub_20E863570((uint64_t)&v169);
        }
        sub_20E863570((uint64_t)&v169);
        v105 = v177;
        if (v177)
        {
          v106 = (unint64_t *)&v177->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        goto LABEL_197;
      }
    }
    memmove(v62, v60, v61);
    goto LABEL_43;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v180 - v179) > v168)
  {
    v50 = (char **)&v179[3 * v168];
    if (v50 != a23)
    {
      v51 = (char *)v179[3 * v168 + 1];
      sub_20F27AE20(a23, *v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - *v50) >> 3));
    }
  }
LABEL_197:
  v158 = v179;
  if (v179)
  {
    v159 = v180;
    v160 = v179;
    if (v180 != v179)
    {
      v161 = v180;
      do
      {
        v163 = *(v161 - 3);
        v161 -= 3;
        v162 = v163;
        if (v163)
        {
          *(v159 - 2) = v162;
          operator delete(v162);
        }
        v159 = v161;
      }
      while (v161 != v158);
      v160 = v179;
    }
    v180 = v158;
    operator delete(v160);
  }
  return v40;
}

void sub_20F2A6624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 168))
  {
    if (*(char *)(v32 - 169) < 0)
      operator delete(*(void **)(v32 - 192));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a32);
  sub_20E9DD680((void **)(v32 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_20E86E8C4((uint64_t *)(v32 - 104));
  sub_20E86E8C4((uint64_t *)(v32 - 112));
  sub_20E86E658(v32 - 192);
  sub_20E863714((uint64_t)&a32);
  sub_20E9DD680((void **)(v32 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A66E4()
{
  JUMPOUT(0x20F2A66ECLL);
}

void sub_20F2A6718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_20E863714((uint64_t)&a32);
  sub_20E9DD680((void **)(v32 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_20E863714((uint64_t)&a32);
  sub_20E9DD680((void **)(v32 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  void *v34;

  if (*(_BYTE *)(v32 - 160) && *(char *)(v32 - 161) < 0)
    operator delete(*(void **)(v32 - 184));
  v34 = *(void **)(v32 - 192);
  if (v34)
    os_release(v34);
  sub_20E863714((uint64_t)&a32);
  sub_20E9DD680((void **)(v32 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6824(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DD680((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6838(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DD680((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A684C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DD680((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6860(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DD680((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6874(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DD680((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A6888(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DD680((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A689C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DD680((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_20F2A68B0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68808);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68808))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68800);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68808);
  }
  *a1 = qword_254A68800;
}

void sub_20F2A694C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68808);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68808);
  _Unwind_Resume(a1);
}

void sub_20F2A69A4(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38[2];
  void *__p[2];
  int v40;
  __int128 v41;
  char **v42;
  char *v43;
  char *v44;

  v5 = *(uint64_t **)(a1 + 424);
  if (!v5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 691, (uint64_t)"map_data.viodatabase()", 22, (uint64_t)"Map Data must have a vio database.", 34, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(uint64_t **)(a1 + 424);
  }
  v32 = 1;
  v33 = 5;
  v34 = xmmword_2102DCC90;
  v35 = xmmword_2103853D0;
  v36 = 0;
  v37 = 0;
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)__p = 0u;
  v40 = 1065353216;
  v7 = *v5;
  v43 = 0;
  v44 = 0;
  v42 = &v43;
  sub_20F25C624((uint64_t)&v32, v7, &v42);
  sub_20E86872C((uint64_t)&v42, v43);
  v8 = *a2;
  v9 = a2[1];
  v10 = (char *)((char *)v9 - (char *)*a2);
  if (v9 != *a2)
  {
    v11 = 0;
    v12 = (_QWORD *)(v5[1] + 24);
    do
    {
      v13 = sub_20E9DF85C(v12, v8);
      if (v13 && v13[8] > (unint64_t)v11)
        v11 = v13[8];
      v8 += 3;
    }
    while (v8 != v9);
    if (v11)
    {
      v42 = (char **)operator new(16 * v11);
      v43 = (char *)v42;
      v44 = (char *)&v42[2 * v11];
      v14 = *a2;
      v15 = a2[1];
      if (v14 != v15)
      {
        if (v10 == (char *)24)
        {
          do
          {
            v16 = sub_20E9DF85C(v12, v14);
            if (v16)
            {
              v17 = (_QWORD *)v16[7];
              while (v17)
              {
                v18 = v17[3];
                v17 = (_QWORD *)*v17;
                if (*(_BYTE *)(v18 + 192) && !*(_BYTE *)(v18 + 190))
                  sub_20F2A6D04(v5, (uint64_t)&v32, v18, a3);
              }
            }
            v14 += 3;
          }
          while (v14 != v15);
        }
        else
        {
          do
          {
            v19 = sub_20E9DF85C(v12, v14);
            if (v19)
            {
              v20 = (_QWORD *)v19[7];
              while (v20)
              {
                v21 = v20;
                v22 = v20[3];
                v24 = *(_QWORD *)(v22 + 24);
                v23 = *(_QWORD *)(v22 + 32);
                *(_QWORD *)&v41 = v24;
                *((_QWORD *)&v41 + 1) = v23;
                v20 = (_QWORD *)*v20;
                if (*(_BYTE *)(v22 + 192) && !*(_BYTE *)(v22 + 190))
                {
                  v25 = (char *)v42;
                  if (v43 != (char *)v42)
                  {
                    v26 = (v43 - (char *)v42) >> 4;
                    do
                    {
                      v27 = v26 >> 1;
                      v28 = &v25[16 * (v26 >> 1)];
                      if (*(_QWORD *)v28 < v24
                        || *(_QWORD *)v28 == v24 && *(_DWORD *)&v25[16 * v27 + 8] < v23)
                      {
                        v25 = v28 + 16;
                        v27 = v26 + ~v27;
                      }
                      v26 = v27;
                    }
                    while (v27);
                  }
                  if (v25 == v43 || *(_QWORD *)v25 != v24 || *((_DWORD *)v25 + 2) != (_DWORD)v23)
                  {
                    sub_20F0527A0((char **)&v42, v25, &v41);
                    sub_20F2A6D04(v5, (uint64_t)&v32, v21[3], a3);
                  }
                }
              }
            }
            v14 += 3;
          }
          while (v14 != v15);
        }
      }
      if (v42)
      {
        v43 = (char *)v42;
        operator delete(v42);
      }
    }
  }
  v29 = __p[0];
  if (__p[0])
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v31 = v38[0];
  v38[0] = 0;
  if (v31)
    operator delete(v31);
}

void sub_20F2A6C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F25CF20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F2A6CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86872C(v9 - 88, *(_QWORD **)(v9 - 80));
  sub_20F25CF20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F2A6CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 - 88);
  if (v11)
  {
    *(_QWORD *)(v9 - 80) = v11;
    operator delete(v11);
    sub_20F25CF20((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20F25CF20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2A6D04(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t **v34;
  _QWORD *v35;
  uint64_t *v40;
  uint64_t v41;
  float64x2_t v43;
  double v44;
  double v46;
  float64x2_t *v48;
  double v49;
  float64x2_t v51;
  uint64_t v52;
  int64x2_t v53;
  float64x2_t v55;
  unint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  int8x16_t v62;
  uint64_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  float64x2_t v80;
  float64x2_t v81;
  int8x16_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t **v88;
  uint64_t v89;
  const char *v90;
  size_t v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  const char *v94;
  size_t v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  char *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  __int128 v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  int v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  double v141;
  _QWORD *v142;
  _QWORD *v143;
  unsigned __int8 v144;
  const char *v145;
  size_t v146;
  void **v147;
  uint64_t v148;
  uint64_t v149;
  void **v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  size_t v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  char *v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  __int128 v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  unint64_t v194;
  unint64_t v195;
  size_t v196;
  void *v197;
  uint64_t v198;
  long double v199;
  int8x16_t v200;
  double v201;
  double v202;
  float v203;
  double v204;
  float v205;
  int8x16_t v206;
  int8x16_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int8x16_t v210;
  __int16 v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  size_t v217;
  const char *v218;
  uint64_t v219;
  float64_t v220;
  uint64_t v221;
  uint64_t v222;
  void **v223;
  uint64_t v224;
  const char *v225;
  size_t v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  const char *v229;
  size_t v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  uint64_t v235;
  uint64_t v236;
  NSObject *v237;
  size_t v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  size_t v241;
  size_t v242;
  char *p_category;
  void *v244;
  int v245;
  int v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char v253;
  _QWORD *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  double v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  const char *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  char *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  void **v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  void *v301;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  char *v306;
  unsigned __int8 v307;
  const char *v308;
  size_t v309;
  void **v310;
  unint64_t v311;
  const char *v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void **v318;
  uint64_t v319;
  uint64_t v320;
  NSObject *v321;
  size_t v322;
  std::__shared_weak_count_vtbl *v323;
  std::__shared_weak_count *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  void *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  void *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unsigned __int8 v357;
  uint64_t v358;
  const char *v359;
  NSObject *v360;
  uint64_t v361;
  const char *v362;
  const char *v363;
  int v364;
  __int128 v365;
  uint64_t v366;
  float64_t v367;
  uint64_t v368;
  _QWORD *v369;
  const char *v372;
  int v374;
  void *v375;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v377;
  int v378;
  const char *v379;
  int v380;
  const char *v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  void *v384[2];
  int64_t v385;
  uint64_t v386;
  uint64_t **v387;
  uint64_t *v388;
  uint64_t v389;
  __int128 v390;
  std::__shared_weak_count *v391;
  double v392;
  std::__shared_weak_count *v393;
  char *category;
  __int128 v395;
  _QWORD v396[2];
  _BYTE oslog[40];
  void *v398;
  double v399;
  unint64_t v400;
  double v401;
  void *object[6];
  size_t v403;
  float64x2_t v404;
  int64x2_t v405;
  float64x2_t v406;
  int64x2_t v407;
  _OWORD v408[16];
  uint64_t v409;
  uint64_t v410;

  v410 = *MEMORY[0x24BDAC8D0];
  v5 = a3 + 40;
  if (*(_BYTE *)(a3 + 192))
    v6 = a3 + 40;
  else
    v6 = 0;
  v365 = *(_OWORD *)(v6 + 8);
  v366 = v6;
  v7 = *(_QWORD *)(v6 + 24);
  v388 = 0;
  v389 = 0;
  v387 = &v388;
  v8 = *(__int128 **)(a3 + 200);
  v9 = *(__int128 **)(a3 + 208);
  while (v8 != v9)
  {
    v10 = v388;
    v11 = &v388;
    v12 = &v388;
    if (v388)
    {
      v13 = *((_DWORD *)v8 + 4);
      v14 = *(uint64_t **)v8;
      v15 = *((_DWORD *)v8 + 2);
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v10;
          v16 = *((_DWORD *)v10 + 12);
          if (v13 == v16)
            break;
          if (v13 >= v16)
          {
            if (v16 >= v13)
              goto LABEL_6;
            goto LABEL_21;
          }
LABEL_10:
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_23;
        }
        v17 = v12[4];
        if (v14 < v17)
          goto LABEL_10;
        if (v14 != v17)
        {
          if (v17 >= v14)
            goto LABEL_6;
          goto LABEL_21;
        }
        v18 = *((_DWORD *)v12 + 10);
        if (v15 < v18)
          goto LABEL_10;
        if (v18 >= v15)
          goto LABEL_6;
LABEL_21:
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          break;
        }
      }
    }
LABEL_23:
    v19 = operator new(0x38uLL);
    v20 = *v8;
    v19[6] = *((_QWORD *)v8 + 2);
    *((_OWORD *)v19 + 2) = v20;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v12;
    *v11 = v19;
    if (*v387)
    {
      v387 = (uint64_t **)*v387;
      v19 = *v11;
    }
    sub_20E868578(v388, v19);
    ++v389;
LABEL_6:
    v8 += 2;
  }
  v368 = v5;
  v369 = a1;
  v21 = *a1;
  v22 = a2;
  if (*(_QWORD *)(a2 + 48) == *a1)
  {
    v31 = *(_QWORD **)(v21 + 1760);
    v32 = (_QWORD *)(v21 + 1768);
    if (v31 == v32)
    {
      v33 = 0;
    }
    else
    {
      do
      {
        v141 = *(double *)(v31[5] + 1424);
        v33 = v141 > 0.0;
        if (v141 > 0.0)
          break;
        v142 = (_QWORD *)v31[1];
        if (v142)
        {
          do
          {
            v143 = v142;
            v142 = (_QWORD *)*v142;
          }
          while (v142);
        }
        else
        {
          do
          {
            v143 = (_QWORD *)v31[2];
            _ZF = *v143 == (_QWORD)v31;
            v31 = v143;
          }
          while (!_ZF);
        }
        v31 = v143;
      }
      while (v143 != v32);
    }
    *(_BYTE *)(a2 + 56) = v33;
    v34 = v387;
    if (v387 == &v388)
      goto LABEL_234;
    v35 = (_QWORD *)(a2 + 64);
    __asm { FMOV            V0.2D, #1.0 }
    v367 = *((double *)&_Q0 + 1);
    while (1)
    {
      if (sub_20E9DF85C(v35, (uint64_t *)v34 + 4))
        goto LABEL_45;
      v40 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v22 + 48) + 1784), (uint64_t *)v34 + 4);
      if (v40)
      {
        v41 = v40[5];
        _Q6.f64[0] = *(float64_t *)(v41 + 16);
        v43 = *(float64x2_t *)v41;
        v44 = *(double *)(v41 + 40);
        _Q5 = *(float64x2_t *)(v41 + 24);
        v46 = *(double *)(v41 + 64);
        _Q3 = *(float64x2_t *)(v41 + 48);
        v48 = (float64x2_t *)v40[7];
        v49 = v48[1].f64[0];
        _Q16 = *v48;
        v51 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v43, (int64x2_t)_Q5), v48->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v43, (int64x2_t)_Q5), *v48, 1);
        v52 = v40[9];
        v53 = *(int64x2_t *)(v52 + 24);
        _Q18 = *(float64x2_t *)(v52 + 48);
        v55 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v52, v53);
        v56 = *(_QWORD *)(v52 + 48);
        v57 = vmulq_n_f64(v55, _Q6.f64[0]);
        v58 = vmulq_n_f64((float64x2_t)v56, _Q6.f64[0]);
        _Q6.f64[1] = v44;
        v59 = vmlaq_n_f64(v51, _Q6, v49);
        _Q16.f64[0] = _Q16.f64[1];
        __asm { FMLA            D6, D16, V3.D[1] }
        _Q6.f64[0] = _Q6.f64[0] + v46 * v49;
        v60.f64[0] = *(float64_t *)(v52 + 16);
        _Q16.f64[0] = *(float64_t *)(v52 + 64);
        v61 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v52, v53);
        v60.f64[1] = *(float64_t *)(v52 + 40);
        v62 = vextq_s8((int8x16_t)v61, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q18, 1), 8uLL);
        v63 = v40[11];
        v64 = *(double *)(v63 + 16);
        v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, *(double *)v63), v61, *(float64x2_t *)v63, 1), v60, v64);
        _D25 = *(_QWORD *)(v63 + 8);
        __asm { FMLA            D27, D25, V18.D[1] }
        _Q18.f64[0] = _D27 + _Q16.f64[0] * v64;
        *(_QWORD *)&v61.f64[1] = v62.i64[0];
        v62.i64[0] = *(_QWORD *)&_Q16.f64[0];
        _Q16.f64[1] = v367;
        *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vnegq_f64(_Q18);
        v68 = vmlaq_n_f64(vmulq_n_f64(v55, v43.f64[0]), v61, _Q5.f64[0]);
        v69 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v56, v43.f64[0]), (float64x2_t)v62.u64[1], _Q5.f64[0]);
        v70 = vmlaq_laneq_f64(vmulq_laneq_f64(v55, v43, 1), v61, _Q5, 1);
        v71 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v56, v43, 1), (float64x2_t)v62.u64[1], _Q5, 1);
        *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vnegq_f64(v59);
        v72 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(v68, v60, _Q3.f64[0]), (float64x2_t)0, v65);
        v73 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v69, (float64x2_t)v62.u64[0], _Q3.f64[0]), (float64x2_t)0, _Q16);
        v74 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(v70, v60, _Q3, 1), (float64x2_t)0, v65);
        v75 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(v71, (float64x2_t)v62.u64[0], _Q3, 1), (float64x2_t)0, _Q16);
        v76 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v57, v61, v44), v60, v46), (float64x2_t)0, v65);
        _Q23 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v58, (float64x2_t)v62.u64[1], v44), (float64x2_t)v62.u64[0], v46), (float64x2_t)0, _Q16);
        _Q0 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v55, _Q5.f64[0]), v61, v59, 1), v60, _Q6.f64[0], 0), v65);
        _Q1 = (int64x2_t)vaddq_f64(_Q16, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v56, _Q5.f64[0]), (float64x2_t)v62.u64[1], v59, 1), (float64x2_t)v62.u64[0], _Q6.f64[0], 0));
        v80 = (float64x2_t)vzip1q_s64(v72, v74);
        v81 = (float64x2_t)vzip2q_s64(v72, v74);
        *(_QWORD *)&v60.f64[0] = vdupq_lane_s64(*(uint64_t *)&v81.f64[0], 0).u64[0];
        v82 = vextq_s8((int8x16_t)v81, (int8x16_t)vdupq_laneq_s64(v76, 1), 8uLL);
        *(_QWORD *)&v60.f64[1] = v82.i64[0];
        *(_QWORD *)&_Q6.f64[0] = v76.i64[1];
        __asm
        {
          FMLS            D5, D6, V0.D[1]
          FMLS            D5, D23, V1.D[0]
        }
        _Q5.f64[1] = 1.0;
        v83 = v40[13];
        *(_OWORD *)object = *((_OWORD *)v34 + 2);
        object[2] = v34[6];
        object[3] = (void *)v72.i64[0];
        *(int64x2_t *)&object[4] = vzip1q_s64(v74, v76);
        v403 = *(_QWORD *)&_Q0.f64[0];
        v404 = v81;
        v405 = vzip2q_s64(v76, (int64x2_t)_Q0);
        v406 = (float64x2_t)vzip1q_s64(v73, v75);
        v407 = vzip1q_s64(_Q23, _Q1);
        v408[0] = v72;
        v408[1] = v73;
        v408[2] = v74;
        v408[3] = v75;
        v408[4] = v76;
        v408[5] = _Q23;
        v408[7] = _Q1;
        v408[6] = _Q0;
        v408[11] = v82.u64[1];
        v408[12] = v406;
        v408[9] = v76.u64[0];
        v408[10] = v60;
        v408[13] = _Q23.u64[0];
        v408[14] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v80, vnegq_f64(_Q0).f64[0]), v81, _Q0, 1), v406, *(double *)_Q1.i64, 0);
        v408[15] = _Q5;
        v408[8] = v80;
        v409 = v83;
        sub_20F28CB6C((uint64_t)v35, (uint64_t *)object, (uint64_t)object);
LABEL_45:
        v87 = v34[1];
        if (!v87)
          goto LABEL_135;
        goto LABEL_46;
      }
      sub_20F2B0250(&category);
      if (**((int **)category + 7) > 4)
        goto LABEL_45;
      v84 = category[72];
      v85 = sub_20E8C31DC((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
      v86 = v85;
      if (!v84 && !v85)
        goto LABEL_45;
      v364 = v84;
      *(_QWORD *)oslog = &category;
      *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
      *(_DWORD *)&oslog[24] = 4;
      *(_QWORD *)&oslog[32] = "unknown file";
      LODWORD(v398) = 124;
      v399 = COERCE_DOUBLE("unknown function");
      *(double *)&v400 = 0.0;
      v401 = 0.0;
      v89 = **(_QWORD **)oslog;
      v90 = (const char *)(**(_QWORD **)oslog + 16);
      v362 = v90;
      if (*(char *)(**(_QWORD **)oslog + 39) < 0)
      {
        v90 = *(const char **)(v89 + 16);
        v91 = *(_QWORD *)(v89 + 24);
        v361 = **(_QWORD **)oslog;
        v93 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v93 & 1) != 0)
          goto LABEL_52;
      }
      else
      {
        v91 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
        v361 = **(_QWORD **)oslog;
        v92 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v92 & 1) != 0)
          goto LABEL_52;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v375);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v375);
        if ((_BYTE)v378 && SHIBYTE(v377) < 0)
          operator delete(v375);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v22 = a2;
      }
LABEL_52:
      if (byte_254A4A4F8[23] >= 0)
        v94 = byte_254A4A4F8;
      else
        v94 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v95 = byte_254A4A4F8[23];
      else
        v95 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v94, v90);
      if (v95 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v95 >= 0x17)
      {
        v97 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v95 | 7) != 0x17)
          v97 = v95 | 7;
        v98 = v97 + 1;
        v96 = (void **)operator new(v97 + 1);
        object[2] = (void *)v95;
        object[3] = (void *)(v98 | 0x8000000000000000);
        object[1] = v96;
        v22 = a2;
LABEL_65:
        memmove(v96, v94, v95);
        goto LABEL_66;
      }
      HIBYTE(object[3]) = v95;
      v96 = &object[1];
      if (v95)
        goto LABEL_65;
LABEL_66:
      *((_BYTE *)v96 + v95) = 0;
      LOBYTE(object[4]) = 1;
      if (v91 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v91 >= 0x17)
      {
        v101 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v91 | 7) != 0x17)
          v101 = v91 | 7;
        v102 = v101 + 1;
        v99 = (void **)operator new(v101 + 1);
        *(_QWORD *)&v404.f64[0] = v102 | 0x8000000000000000;
        object[5] = v99;
        v403 = v91;
        v22 = a2;
      }
      else
      {
        HIBYTE(v404.f64[0]) = v91;
        v99 = &object[5];
        if (!v91)
        {
          LOBYTE(object[5]) = 0;
          LOBYTE(v404.f64[1]) = 1;
          v100 = object[0];
          if ((SHIBYTE(v404.f64[0]) & 0x80000000) == 0)
            goto LABEL_70;
          goto LABEL_76;
        }
      }
      memmove(v99, v90, v91);
      *((_BYTE *)v99 + v91) = 0;
      LOBYTE(v404.f64[1]) = 1;
      v100 = object[0];
      if ((SHIBYTE(v404.f64[0]) & 0x80000000) == 0)
      {
LABEL_70:
        if (!LOBYTE(object[4]))
          goto LABEL_79;
        goto LABEL_77;
      }
LABEL_76:
      operator delete(object[5]);
      if (!LOBYTE(object[4]))
        goto LABEL_79;
LABEL_77:
      if (SHIBYTE(object[3]) < 0)
        operator delete(object[1]);
LABEL_79:
      if (object[0])
        os_release(object[0]);
      if (v86 && *(_QWORD *)(v86 + 24))
      {
        v103 = _os_log_pack_size();
        v104 = (std::__shared_weak_count_vtbl *)operator new(v103, (std::align_val_t)8uLL);
        v105 = (std::__shared_weak_count *)operator new();
        v106 = v105;
        v105->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        v105->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v105->__shared_weak_owners_ = 0;
        v105[1].__vftable = v104;
        object[0] = v104;
        object[1] = v104;
        object[2] = v105;
        do
          v108 = __ldxr(p_shared_owners);
        while (__stxr(v108 + 1, p_shared_owners));
        memset(&object[3], 0, 24);
        do
          v109 = __ldaxr(p_shared_owners);
        while (__stlxr(v109 - 1, p_shared_owners));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v106);
        }
        v110 = object[0];
        *(_WORD *)_os_log_pack_fill() = 0;
        v111 = (char *)operator new();
        v112 = *(unsigned __int8 *)(v361 + 39);
        v113 = *(const char **)(v361 + 16);
        v114 = *(_QWORD *)(v361 + 24);
        v115 = *(_OWORD *)&object[3];
        *(_OWORD *)(v111 + 8) = *(_OWORD *)&object[1];
        if ((v112 & 0x80u) != 0)
          v112 = v114;
        else
          v113 = v362;
        *(_QWORD *)v111 = v110;
        object[1] = 0;
        object[2] = 0;
        *(_OWORD *)(v111 + 24) = v115;
        object[3] = 0;
        object[4] = 0;
        *((_QWORD *)v111 + 5) = v113;
        *((_QWORD *)v111 + 6) = v112;
        v111[56] = 16;
        *(_QWORD *)&v390 = 0;
        v375 = v111;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v86 + 24) + 40))(*(_QWORD *)(v86 + 24), &v375);
        v116 = v375;
        v375 = 0;
        if (v116)
        {
          v117 = (std::__shared_weak_count *)*((_QWORD *)v116 + 4);
          if (v117)
          {
            v118 = (unint64_t *)&v117->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          v120 = (std::__shared_weak_count *)*((_QWORD *)v116 + 2);
          if (v120)
          {
            v121 = (unint64_t *)&v120->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
          v123 = v390;
          *(_QWORD *)&v390 = 0;
          if (v123)
          {
            v124 = *(std::__shared_weak_count **)(v123 + 32);
            if (v124)
            {
              v125 = (unint64_t *)&v124->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            v127 = *(std::__shared_weak_count **)(v123 + 16);
            if (v127)
            {
              v128 = (unint64_t *)&v127->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            MEMORY[0x212BC6398](v123, 0x10F0C40B62ED6C6);
          }
        }
        v130 = (std::__shared_weak_count *)object[4];
        v131 = v364;
        if (object[4])
        {
          v132 = (unint64_t *)((char *)object[4] + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        v134 = (std::__shared_weak_count *)object[2];
        if (object[2])
        {
          v135 = (unint64_t *)((char *)object[2] + 8);
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
      }
      else
      {
        os_log_type_enabled(v100, OS_LOG_TYPE_ERROR);
        LOWORD(object[0]) = 0;
        v137 = (void *)_os_log_send_and_compose_impl();
        v131 = v364;
        if (v137)
          free(v137);
      }
      if (v131)
      {
        sub_20E8C003C((uint64_t)oslog, "Fail to find pose_ref");
        sub_20E863570((uint64_t)oslog);
      }
      sub_20E863570((uint64_t)oslog);
      v138 = *(std::__shared_weak_count **)&v401;
      if (v401 != 0.0)
      {
        v139 = (unint64_t *)(*(_QWORD *)&v401 + 8);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v87 = v34[1];
      if (!v87)
      {
        do
        {
LABEL_135:
          v88 = (uint64_t **)v34[2];
          _ZF = *v88 == (uint64_t *)v34;
          v34 = v88;
        }
        while (!_ZF);
        goto LABEL_38;
      }
      do
      {
LABEL_46:
        v88 = (uint64_t **)v87;
        v87 = (uint64_t *)*v87;
      }
      while (v87);
LABEL_38:
      v34 = v88;
      if (v88 == &v388)
        goto LABEL_234;
    }
  }
  sub_20F2B0250(&category);
  if (**((int **)category + 7) > 5)
    goto LABEL_234;
  v23 = category[72];
  v24 = sub_20E8C31DC((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
  v25 = v24;
  _ZF = !v23 && v24 == 0;
  if (_ZF)
    goto LABEL_234;
  *(_QWORD *)oslog = &category;
  *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
  *(_DWORD *)&oslog[24] = 5;
  *(_QWORD *)&oslog[32] = "unknown file";
  LODWORD(v398) = 105;
  *(double *)&v400 = 0.0;
  v401 = 0.0;
  v399 = COERCE_DOUBLE("unknown function");
  v27 = **(_QWORD **)oslog;
  v28 = (const char *)(**(_QWORD **)oslog + 16);
  v363 = v28;
  if (*(char *)(**(_QWORD **)oslog + 39) < 0)
  {
    v28 = *(const char **)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v144 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v144 & 1) != 0)
      goto LABEL_152;
  }
  else
  {
    v29 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
    v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v30 & 1) != 0)
      goto LABEL_152;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_152:
  if (byte_254A4A4F8[23] >= 0)
    v145 = byte_254A4A4F8;
  else
    v145 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v146 = byte_254A4A4F8[23];
  else
    v146 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v145, v28);
  v147 = &object[1];
  if (v146 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v146 >= 0x17)
  {
    v148 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v146 | 7) != 0x17)
      v148 = v146 | 7;
    v149 = v148 + 1;
    v147 = (void **)operator new(v148 + 1);
    object[2] = (void *)v146;
    object[3] = (void *)(v149 | 0x8000000000000000);
    object[1] = v147;
    goto LABEL_165;
  }
  HIBYTE(object[3]) = v146;
  if (v146)
LABEL_165:
    memmove(v147, v145, v146);
  *((_BYTE *)v147 + v146) = 0;
  LOBYTE(object[4]) = 1;
  v150 = &object[5];
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v22 = a2;
  if (v29 >= 0x17)
  {
    v151 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v151 = v29 | 7;
    v152 = v151 + 1;
    v150 = (void **)operator new(v151 + 1);
    *(_QWORD *)&v404.f64[0] = v152 | 0x8000000000000000;
    object[5] = v150;
    v403 = v29;
  }
  else
  {
    HIBYTE(v404.f64[0]) = v29;
    if (!v29)
      goto LABEL_174;
  }
  memmove(v150, v28, v29);
LABEL_174:
  *((_BYTE *)v150 + v29) = 0;
  LOBYTE(v404.f64[1]) = 1;
  v153 = object[0];
  if (SHIBYTE(v404.f64[0]) < 0)
    operator delete(object[5]);
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  if (v25 && *(_QWORD *)(v25 + 24))
  {
    v154 = _os_log_pack_size();
    v155 = (std::__shared_weak_count_vtbl *)operator new(v154, (std::align_val_t)8uLL);
    v156 = (std::__shared_weak_count *)operator new();
    v157 = v156;
    v156->__shared_owners_ = 0;
    v158 = (unint64_t *)&v156->__shared_owners_;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v155;
    object[0] = v155;
    object[1] = v155;
    object[2] = v156;
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
    memset(&object[3], 0, 24);
    do
      v160 = __ldaxr(v158);
    while (__stlxr(v160 - 1, v158));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v157);
    }
    v161 = object[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v162 = (char *)operator new();
    v163 = *(unsigned __int8 *)(v27 + 39);
    v164 = *(const char **)(v27 + 16);
    v165 = *(_QWORD *)(v27 + 24);
    v166 = *(_OWORD *)&object[3];
    *(_OWORD *)(v162 + 8) = *(_OWORD *)&object[1];
    if ((v163 & 0x80u) != 0)
      v163 = v165;
    else
      v164 = v363;
    *(_QWORD *)v162 = v161;
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v162 + 24) = v166;
    object[3] = 0;
    object[4] = 0;
    *((_QWORD *)v162 + 5) = v164;
    *((_QWORD *)v162 + 6) = v163;
    v162[56] = 16;
    *(_QWORD *)&v390 = 0;
    v375 = v162;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), &v375);
    v22 = a2;
    v167 = v375;
    v375 = 0;
    if (v167)
    {
      v168 = (std::__shared_weak_count *)*((_QWORD *)v167 + 4);
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = (std::__shared_weak_count *)*((_QWORD *)v167 + 2);
      if (v171)
      {
        v172 = (unint64_t *)&v171->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      MEMORY[0x212BC6398](v167, 0x10F0C40B62ED6C6);
      v174 = v390;
      *(_QWORD *)&v390 = 0;
      if (v174)
      {
        v175 = *(std::__shared_weak_count **)(v174 + 32);
        if (v175)
        {
          v176 = (unint64_t *)&v175->__shared_owners_;
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
        v178 = *(std::__shared_weak_count **)(v174 + 16);
        if (v178)
        {
          v179 = (unint64_t *)&v178->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        MEMORY[0x212BC6398](v174, 0x10F0C40B62ED6C6);
      }
    }
    v181 = (std::__shared_weak_count *)object[4];
    if (object[4])
    {
      v182 = (unint64_t *)((char *)object[4] + 8);
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    v184 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v185 = (unint64_t *)((char *)object[2] + 8);
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
  }
  else
  {
    os_log_type_enabled(v153, OS_LOG_TYPE_ERROR);
    LOWORD(object[0]) = 0;
    v187 = (void *)_os_log_send_and_compose_impl();
    if (v187)
      free(v187);
  }
  if (v23)
  {
    sub_20E8C003C((uint64_t)oslog, "Incompatible stateset. ");
    sub_20E863570((uint64_t)oslog);
  }
  sub_20E863570((uint64_t)oslog);
  v188 = *(std::__shared_weak_count **)&v401;
  if (v401 != 0.0)
  {
    v189 = (unint64_t *)(*(_QWORD *)&v401 + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
LABEL_234:
  v191 = sub_20F2A9748(v22, a3, 0, 0, 0);
  v192 = v368;
  if (!*(_BYTE *)(a3 + 192))
    v192 = 0;
  *(_BYTE *)(v192 + 150) = 1;
  if (v191)
  {
    sub_20F2A68B0(&v386);
    if (**(int **)(v386 + 56) <= 3)
    {
      v193 = *(unsigned __int8 *)(v386 + 72);
      v194 = sub_20E8C31DC(v386, "OSLogSurrogateAppender", 1, 0);
      v195 = v194;
      if (v193 || v194)
      {
        sub_20E863438((uint64_t)object);
        sub_20E86A980(&object[2], (uint64_t)"failed to triangulate track ", 28);
        std::ostream::operator<<();
        v374 = v193;
        if ((v408[0] & 0x10) != 0)
        {
          v219 = v407.i64[1];
          if (v407.i64[1] < (unint64_t)v405.i64[0])
          {
            v407.i64[1] = v405.i64[0];
            v219 = v405.i64[0];
          }
          v220 = v404.f64[1];
          v196 = v219 - *(_QWORD *)&v404.f64[1];
          if ((unint64_t)(v219 - *(_QWORD *)&v404.f64[1]) > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_320;
        }
        else
        {
          if ((v408[0] & 8) == 0)
          {
            v196 = 0;
            HIBYTE(v385) = 0;
            v197 = v384;
            goto LABEL_268;
          }
          v220 = *(double *)&object[5];
          v196 = *(_QWORD *)&v404.f64[0] - (unint64_t)object[5];
          if (*(_QWORD *)&v404.f64[0] - (unint64_t)object[5] > 0x7FFFFFFFFFFFFFF7)
LABEL_320:
            sub_20E860B7C();
        }
        if (v196 >= 0x17)
        {
          v221 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v196 | 7) != 0x17)
            v221 = v196 | 7;
          v222 = v221 + 1;
          v197 = operator new(v221 + 1);
          v384[1] = (void *)v196;
          v385 = v222 | 0x8000000000000000;
          v384[0] = v197;
        }
        else
        {
          HIBYTE(v385) = v196;
          v197 = v384;
          if (!v196)
          {
LABEL_268:
            *((_BYTE *)v197 + v196) = 0;
            v375 = &v386;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v377 = std::chrono::system_clock::now().__d_.__rep_;
            v378 = 3;
            v379 = "unknown file";
            v380 = 730;
            v382 = 0;
            v383 = 0;
            v381 = "unknown function";
            if (v385 >= 0)
              v223 = v384;
            else
              v223 = (void **)v384[0];
            v224 = *(_QWORD *)v375;
            v225 = (const char *)(*(_QWORD *)v375 + 16);
            v372 = v225;
            if (*(char *)(*(_QWORD *)v375 + 39) < 0)
            {
              v225 = *(const char **)(v224 + 16);
              v226 = *(size_t *)(v224 + 24);
              v228 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v228 & 1) != 0)
                goto LABEL_275;
            }
            else
            {
              v226 = *(unsigned __int8 *)(*(_QWORD *)v375 + 39);
              v227 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v227 & 1) != 0)
                goto LABEL_275;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)oslog);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
              if (oslog[24] && (oslog[23] & 0x80000000) != 0)
                operator delete(*(void **)oslog);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_275:
            if (byte_254A4A4F8[23] >= 0)
              v229 = byte_254A4A4F8;
            else
              v229 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v230 = byte_254A4A4F8[23];
            else
              v230 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)oslog = os_log_create(v229, v225);
            v231 = &oslog[8];
            if (v230 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v230 >= 0x17)
            {
              v232 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v230 | 7) != 0x17)
                v232 = v230 | 7;
              v233 = v232 + 1;
              v231 = operator new(v232 + 1);
              *(_QWORD *)&oslog[16] = v230;
              *(_QWORD *)&oslog[24] = v233 | 0x8000000000000000;
              *(_QWORD *)&oslog[8] = v231;
            }
            else
            {
              oslog[31] = v230;
              if (!v230)
              {
LABEL_289:
                v231[v230] = 0;
                oslog[32] = 1;
                v234 = COERCE_DOUBLE(&v398);
                if (v226 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v226 >= 0x17)
                {
                  v235 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v226 | 7) != 0x17)
                    v235 = v226 | 7;
                  v236 = v235 + 1;
                  v234 = COERCE_DOUBLE(operator new(v235 + 1));
                  v399 = *(double *)&v226;
                  v400 = v236 | 0x8000000000000000;
                  *(double *)&v398 = v234;
                }
                else
                {
                  HIBYTE(v400) = v226;
                  if (*(double *)&v226 == 0.0)
                  {
LABEL_297:
                    *(_BYTE *)(*(_QWORD *)&v234 + v226) = 0;
                    LOBYTE(v401) = 1;
                    v237 = *(NSObject **)oslog;
                    if (SHIBYTE(v400) < 0)
                      operator delete(v398);
                    if (oslog[32] && (oslog[31] & 0x80000000) != 0)
                      operator delete(*(void **)&oslog[8]);
                    if (*(_QWORD *)oslog)
                      os_release(*(void **)oslog);
                    if (!v195 || !*(_QWORD *)(v195 + 24))
                    {
                      os_log_type_enabled(v237, OS_LOG_TYPE_INFO);
                      *(_DWORD *)oslog = 136315138;
                      *(_QWORD *)&oslog[4] = v223;
                      v244 = (void *)_os_log_send_and_compose_impl();
                      v245 = v374;
                      if (v244)
                        free(v244);
                      goto LABEL_385;
                    }
                    v238 = _os_log_pack_size();
                    v239 = (std::__shared_weak_count_vtbl *)operator new(v238, (std::align_val_t)8uLL);
                    v240 = (std::__shared_weak_count *)operator new();
                    v240->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v240->__shared_owners_ = 0;
                    v240->__shared_weak_owners_ = 0;
                    v240[1].__vftable = v239;
                    *(_QWORD *)&v390 = v239;
                    *((_QWORD *)&v390 + 1) = v239;
                    v392 = 0.0;
                    v393 = 0;
                    v391 = v240;
                    v241 = strlen((const char *)v223);
                    if (v241 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v242 = v241;
                    if (v241 >= 0x17)
                    {
                      v250 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v241 | 7) != 0x17)
                        v250 = v241 | 7;
                      v251 = v250 + 1;
                      p_category = (char *)operator new(v250 + 1);
                      *(_QWORD *)&v395 = v242;
                      *((_QWORD *)&v395 + 1) = v251 | 0x8000000000000000;
                      category = p_category;
                    }
                    else
                    {
                      HIBYTE(v395) = v241;
                      p_category = (char *)&category;
                      if (!v241)
                      {
LABEL_325:
                        p_category[v242] = 0;
                        v252 = category;
                        v396[0] = v395;
                        *(_QWORD *)((char *)v396 + 7) = *(_QWORD *)((char *)&v395 + 7);
                        v253 = HIBYTE(v395);
                        v254 = operator new(0x38uLL);
                        v254[1] = 0;
                        v254[2] = 0;
                        v254[3] = off_24C9ABC20;
                        *v254 = &off_24C9ABBD0;
                        v255 = v396[0];
                        v254[4] = v252;
                        v254[5] = v255;
                        *(_QWORD *)((char *)v254 + 47) = *(_QWORD *)((char *)v396 + 7);
                        *((_BYTE *)v254 + 55) = v253;
                        v396[0] = 0;
                        *(_QWORD *)((char *)v396 + 7) = 0;
                        v256 = v393;
                        *(_QWORD *)&v392 = v254 + 3;
                        v393 = (std::__shared_weak_count *)v254;
                        if (v256)
                        {
                          v257 = (unint64_t *)&v256->__shared_owners_;
                          do
                            v258 = __ldaxr(v257);
                          while (__stlxr(v258 - 1, v257));
                          if (!v258)
                          {
                            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                            std::__shared_weak_count::__release_weak(v256);
                          }
                        }
                        *(_OWORD *)oslog = v390;
                        v259 = v392;
                        *(_QWORD *)&oslog[16] = v391;
                        if (v391)
                        {
                          v260 = (unint64_t *)&v391->__shared_owners_;
                          do
                            v261 = __ldxr(v260);
                          while (__stxr(v261 + 1, v260));
                        }
                        v262 = v393;
                        *(double *)&oslog[24] = v259;
                        *(_QWORD *)&oslog[32] = v393;
                        if (v393)
                        {
                          v263 = (unint64_t *)&v393->__shared_owners_;
                          do
                            v264 = __ldxr(v263);
                          while (__stxr(v264 + 1, v263));
                          *(double *)&v398 = v259;
                          do
                            v265 = __ldaxr(v263);
                          while (__stlxr(v265 - 1, v263));
                          if (!v265)
                          {
                            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                            std::__shared_weak_count::__release_weak(v262);
                          }
                        }
                        else
                        {
                          *(double *)&v398 = v259;
                        }
                        v266 = v391;
                        if (v391)
                        {
                          v267 = (unint64_t *)&v391->__shared_owners_;
                          do
                            v268 = __ldaxr(v267);
                          while (__stlxr(v268 - 1, v267));
                          if (!v268)
                          {
                            ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                            std::__shared_weak_count::__release_weak(v266);
                          }
                        }
                        v269 = *(_QWORD *)oslog;
                        if (*((char *)v398 + 31) >= 0)
                          v270 = (char *)v398 + 8;
                        else
                          v270 = (char *)*((_QWORD *)v398 + 1);
                        v271 = _os_log_pack_fill();
                        *(_DWORD *)v271 = 136315138;
                        *(_QWORD *)(v271 + 4) = v270;
                        v272 = operator new();
                        v273 = *(unsigned __int8 *)(v224 + 39);
                        v274 = *(const char **)(v224 + 16);
                        v275 = *(_QWORD *)(v224 + 24);
                        v276 = *(_OWORD *)&oslog[24];
                        *(_OWORD *)(v272 + 8) = *(_OWORD *)&oslog[8];
                        if ((v273 & 0x80u) != 0)
                          v273 = v275;
                        else
                          v274 = v372;
                        *(_QWORD *)v272 = v269;
                        *(_QWORD *)&oslog[8] = 0;
                        *(_QWORD *)&oslog[16] = 0;
                        *(_OWORD *)(v272 + 24) = v276;
                        *(_QWORD *)&oslog[24] = 0;
                        *(_QWORD *)&oslog[32] = 0;
                        *(_QWORD *)(v272 + 40) = v274;
                        *(_QWORD *)(v272 + 48) = v273;
                        *(_BYTE *)(v272 + 56) = 1;
                        category = 0;
                        *(_QWORD *)&v390 = v272;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v195 + 24) + 40))(*(_QWORD *)(v195 + 24), &v390);
                        v277 = v390;
                        *(_QWORD *)&v390 = 0;
                        v245 = v374;
                        if (v277)
                        {
                          v278 = *(std::__shared_weak_count **)(v277 + 32);
                          if (v278)
                          {
                            v279 = (unint64_t *)&v278->__shared_owners_;
                            do
                              v280 = __ldaxr(v279);
                            while (__stlxr(v280 - 1, v279));
                            if (!v280)
                            {
                              ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                              std::__shared_weak_count::__release_weak(v278);
                            }
                          }
                          v281 = *(std::__shared_weak_count **)(v277 + 16);
                          if (v281)
                          {
                            v282 = (unint64_t *)&v281->__shared_owners_;
                            do
                              v283 = __ldaxr(v282);
                            while (__stlxr(v283 - 1, v282));
                            if (!v283)
                            {
                              ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                              std::__shared_weak_count::__release_weak(v281);
                            }
                          }
                          MEMORY[0x212BC6398](v277, 0x10F0C40B62ED6C6);
                          v284 = category;
                          category = 0;
                          if (v284)
                          {
                            v285 = (std::__shared_weak_count *)*((_QWORD *)v284 + 4);
                            if (v285)
                            {
                              v286 = (unint64_t *)&v285->__shared_owners_;
                              do
                                v287 = __ldaxr(v286);
                              while (__stlxr(v287 - 1, v286));
                              if (!v287)
                              {
                                ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                                std::__shared_weak_count::__release_weak(v285);
                              }
                            }
                            v288 = (std::__shared_weak_count *)*((_QWORD *)v284 + 2);
                            if (v288)
                            {
                              v289 = (unint64_t *)&v288->__shared_owners_;
                              do
                                v290 = __ldaxr(v289);
                              while (__stlxr(v290 - 1, v289));
                              if (!v290)
                              {
                                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                                std::__shared_weak_count::__release_weak(v288);
                              }
                            }
                            MEMORY[0x212BC6398](v284, 0x10F0C40B62ED6C6);
                          }
                        }
                        v291 = *(std::__shared_weak_count **)&oslog[32];
                        if (*(_QWORD *)&oslog[32])
                        {
                          v292 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                          do
                            v293 = __ldaxr(v292);
                          while (__stlxr(v293 - 1, v292));
                          if (!v293)
                          {
                            ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                            std::__shared_weak_count::__release_weak(v291);
                          }
                        }
                        v294 = *(std::__shared_weak_count **)&oslog[16];
                        if (*(_QWORD *)&oslog[16])
                        {
                          v295 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                          do
                            v296 = __ldaxr(v295);
                          while (__stlxr(v296 - 1, v295));
                          if (!v296)
                          {
                            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                            std::__shared_weak_count::__release_weak(v294);
                          }
                        }
LABEL_385:
                        if (v245)
                        {
                          v297 = v384;
                          if (v385 < 0)
                            v297 = (void **)v384[0];
                          sub_20E8C003C((uint64_t)&v375, "%s", (const char *)v297);
                          sub_20E863570((uint64_t)&v375);
                        }
                        sub_20E863570((uint64_t)&v375);
                        v298 = v383;
                        if (v383)
                        {
                          v299 = (unint64_t *)&v383->__shared_owners_;
                          do
                            v300 = __ldaxr(v299);
                          while (__stlxr(v300 - 1, v299));
                          if (!v300)
                          {
                            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                            std::__shared_weak_count::__release_weak(v298);
                          }
                        }
                        if (SHIBYTE(v385) < 0)
                          operator delete(v384[0]);
                        object[0] = *(void **)MEMORY[0x24BEDB7F0];
                        v301 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                        *(void **)((char *)object + *((_QWORD *)object[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                        object[2] = v301;
                        object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
                        if (v407.i8[7] < 0)
                          operator delete(*(void **)&v406.f64[0]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290]((char *)v408 + 8);
                        goto LABEL_399;
                      }
                    }
                    memcpy(p_category, v223, v242);
                    goto LABEL_325;
                  }
                }
                memmove(*(void **)&v234, v225, v226);
                goto LABEL_297;
              }
            }
            memmove(v231, v229, v230);
            goto LABEL_289;
          }
        }
        memmove(v197, *(const void **)&v220, v196);
        goto LABEL_268;
      }
    }
LABEL_399:
    v249 = 0;
    goto LABEL_400;
  }
  if (*((_BYTE *)a4 + 39) && !sub_20F2A9B50())
    goto LABEL_399;
  if (*((_BYTE *)a4 + 37))
  {
    v198 = *a4;
    v199 = cos(*((float *)a4 + 4) * 0.0174532925);
    *(_DWORD *)oslog = 0;
    oslog[4] = 0;
    *(_QWORD *)&oslog[8] = 0;
    *(_DWORD *)&oslog[16] = 0;
    oslog[20] = 1;
    *(float64x2_t *)object = vcvtq_f64_f32((float32x2_t)a4[1]);
    object[2] = *(void **)&v199;
    *(_OWORD *)&object[3] = xmmword_2102DCC90;
    LODWORD(object[5]) = v198;
    BYTE4(object[5]) = 0;
    if ((sub_20F2C54D0(a2, a3, (uint64_t)object, 1, (int *)oslog) & 1) == 0)
    {
      if (!*(_BYTE *)(a3 + 192))
      {
        memset(object, 0, sizeof(object));
        memset(oslog, 0, 39);
        *(_QWORD *)(a3 + 56) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        *(_OWORD *)(a3 + 72) = *(_OWORD *)&object[3];
        *(void **)(a3 + 88) = object[5];
        *(_BYTE *)(a3 + 96) = 1;
        *(_WORD *)(a3 + 97) = 0;
        *(_QWORD *)(a3 + 104) = 0;
        *(_QWORD *)(a3 + 112) = 0;
        *(_QWORD *)(a3 + 120) = 0;
        *(_QWORD *)(a3 + 128) = 0xFFEFFFFFFFFFFFFFLL;
        *(_QWORD *)(a3 + 136) = 0;
        *(_QWORD *)(a3 + 144) = 0x3FF0000000000000;
        *(_QWORD *)(a3 + 40) = &off_24C9FC600;
        *(_QWORD *)(a3 + 48) = 0;
        *(_DWORD *)(a3 + 184) = 0;
        *(_OWORD *)(a3 + 168) = 0u;
        *(_OWORD *)(a3 + 152) = 0u;
        v211 = *(_WORD *)&oslog[36];
        *(_BYTE *)(a3 + 190) = oslog[38];
        *(_WORD *)(a3 + 188) = v211;
        *(_BYTE *)(a3 + 192) = 1;
      }
      *(_OWORD *)(a3 + 48) = v365;
      *(_QWORD *)(a3 + 64) = v7;
      sub_20F2A68B0(&category);
      if (**((int **)category + 7) > 2)
        goto LABEL_399;
      v212 = category[72];
      v213 = sub_20E8C31DC((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
      v214 = v213;
      if (!v212 && !v213)
        goto LABEL_399;
      *(_QWORD *)oslog = &category;
      *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
      *(_DWORD *)&oslog[24] = 2;
      *(_QWORD *)&oslog[32] = "unknown file";
      LODWORD(v398) = 757;
      *(double *)&v400 = 0.0;
      v401 = 0.0;
      v399 = COERCE_DOUBLE("unknown function");
      v215 = **(_QWORD **)oslog;
      v216 = **(_QWORD **)oslog + 16;
      if (*(char *)(**(_QWORD **)oslog + 39) < 0)
      {
        v218 = *(const char **)(v215 + 16);
        v217 = *(_QWORD *)(v215 + 24);
      }
      else
      {
        v217 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
        v218 = (const char *)(**(_QWORD **)oslog + 16);
      }
      v307 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v307 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v308 = byte_254A4A4F8;
      else
        v308 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v309 = byte_254A4A4F8[23];
      else
        v309 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v308, v218);
      v310 = &object[1];
      if (v309 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v309 >= 0x17)
      {
        v311 = v214;
        v312 = v218;
        v313 = v215;
        v314 = v212;
        v315 = v216;
        v316 = (v309 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v309 | 7) != 0x17)
          v316 = v309 | 7;
        v317 = v316 + 1;
        v310 = (void **)operator new(v316 + 1);
        object[2] = (void *)v309;
        object[3] = (void *)(v317 | 0x8000000000000000);
        object[1] = v310;
        v216 = v315;
        v212 = v314;
        v215 = v313;
        v218 = v312;
        v214 = v311;
      }
      else
      {
        HIBYTE(object[3]) = v309;
        if (!v309)
        {
LABEL_419:
          *((_BYTE *)v310 + v309) = 0;
          LOBYTE(object[4]) = 1;
          v318 = &object[5];
          if (v217 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v217 >= 0x17)
          {
            v319 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v217 | 7) != 0x17)
              v319 = v217 | 7;
            v320 = v319 + 1;
            v318 = (void **)operator new(v319 + 1);
            *(_QWORD *)&v404.f64[0] = v320 | 0x8000000000000000;
            object[5] = v318;
            v403 = v217;
          }
          else
          {
            HIBYTE(v404.f64[0]) = v217;
            if (!v217)
              goto LABEL_427;
          }
          memmove(v318, v218, v217);
LABEL_427:
          *((_BYTE *)v318 + v217) = 0;
          LOBYTE(v404.f64[1]) = 1;
          v321 = object[0];
          if (SHIBYTE(v404.f64[0]) < 0)
            operator delete(object[5]);
          if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v214 && *(_QWORD *)(v214 + 24))
          {
            v322 = _os_log_pack_size();
            v323 = (std::__shared_weak_count_vtbl *)operator new(v322, (std::align_val_t)8uLL);
            v324 = (std::__shared_weak_count *)operator new();
            v325 = v324;
            v324->__shared_owners_ = 0;
            v326 = (unint64_t *)&v324->__shared_owners_;
            v324->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v324->__shared_weak_owners_ = 0;
            v324[1].__vftable = v323;
            object[0] = v323;
            object[1] = v323;
            object[2] = v324;
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
            memset(&object[3], 0, 24);
            do
              v328 = __ldaxr(v326);
            while (__stlxr(v328 - 1, v326));
            if (!v328)
            {
              ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
              std::__shared_weak_count::__release_weak(v325);
            }
            v329 = object[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v330 = (char *)operator new();
            v331 = *(unsigned __int8 *)(v215 + 39);
            if ((v331 & 0x80u) == 0)
              v332 = v216;
            else
              v332 = *(_QWORD *)(v215 + 16);
            if ((v331 & 0x80u) != 0)
              v331 = *(_QWORD *)(v215 + 24);
            *(_QWORD *)v330 = v329;
            *(_OWORD *)(v330 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v330 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *((_QWORD *)v330 + 5) = v332;
            *((_QWORD *)v330 + 6) = v331;
            v330[56] = 2;
            *(_QWORD *)&v390 = 0;
            v375 = v330;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v214 + 24) + 40))(*(_QWORD *)(v214 + 24), &v375);
            v333 = v375;
            v375 = 0;
            if (v333)
            {
              v334 = (std::__shared_weak_count *)*((_QWORD *)v333 + 4);
              if (v334)
              {
                v335 = (unint64_t *)&v334->__shared_owners_;
                do
                  v336 = __ldaxr(v335);
                while (__stlxr(v336 - 1, v335));
                if (!v336)
                {
                  ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                  std::__shared_weak_count::__release_weak(v334);
                }
              }
              v337 = (std::__shared_weak_count *)*((_QWORD *)v333 + 2);
              if (v337)
              {
                v338 = (unint64_t *)&v337->__shared_owners_;
                do
                  v339 = __ldaxr(v338);
                while (__stlxr(v339 - 1, v338));
                if (!v339)
                {
                  ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                  std::__shared_weak_count::__release_weak(v337);
                }
              }
              MEMORY[0x212BC6398](v333, 0x10F0C40B62ED6C6);
              v340 = v390;
              *(_QWORD *)&v390 = 0;
              if (v340)
              {
                v341 = *(std::__shared_weak_count **)(v340 + 32);
                if (v341)
                {
                  v342 = (unint64_t *)&v341->__shared_owners_;
                  do
                    v343 = __ldaxr(v342);
                  while (__stlxr(v343 - 1, v342));
                  if (!v343)
                  {
                    ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                    std::__shared_weak_count::__release_weak(v341);
                  }
                }
                v344 = *(std::__shared_weak_count **)(v340 + 16);
                if (v344)
                {
                  v345 = (unint64_t *)&v344->__shared_owners_;
                  do
                    v346 = __ldaxr(v345);
                  while (__stlxr(v346 - 1, v345));
                  if (!v346)
                  {
                    ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                    std::__shared_weak_count::__release_weak(v344);
                  }
                }
                MEMORY[0x212BC6398](v340, 0x10F0C40B62ED6C6);
              }
            }
            v347 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v348 = (unint64_t *)((char *)object[4] + 8);
              do
                v349 = __ldaxr(v348);
              while (__stlxr(v349 - 1, v348));
              if (!v349)
              {
                ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                std::__shared_weak_count::__release_weak(v347);
              }
            }
            v350 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v351 = (unint64_t *)((char *)object[2] + 8);
              do
                v352 = __ldaxr(v351);
              while (__stlxr(v352 - 1, v351));
              if (!v352)
              {
                ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                std::__shared_weak_count::__release_weak(v350);
              }
            }
          }
          else
          {
            os_log_type_enabled(v321, OS_LOG_TYPE_DEBUG);
            LOWORD(object[0]) = 0;
            v353 = (void *)_os_log_send_and_compose_impl();
            if (v353)
              free(v353);
          }
          if (v212)
          {
            sub_20E8C003C((uint64_t)oslog, "Reject track by Triangulator::ClassifyInlierTrack().");
            sub_20E863570((uint64_t)oslog);
          }
          sub_20E863570((uint64_t)oslog);
          v354 = *(std::__shared_weak_count **)&v401;
          if (v401 != 0.0)
          {
            v355 = (unint64_t *)(*(_QWORD *)&v401 + 8);
            do
              v356 = __ldaxr(v355);
            while (__stlxr(v356 - 1, v355));
            if (!v356)
            {
              ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
              std::__shared_weak_count::__release_weak(v354);
            }
          }
          goto LABEL_399;
        }
      }
      memmove(v310, v308, v309);
      goto LABEL_419;
    }
  }
  if (*((_BYTE *)a4 + 40) && *(_BYTE *)(v366 + 148))
    goto LABEL_318;
  if (sub_20F34B928((uint64_t)oslog, a3, v369, *((double *)a4 + 3)))
  {
    v201 = *(double *)&oslog[8];
    *(float *)v200.i32 = *(double *)oslog;
    v202 = *(double *)&oslog[16];
    v203 = *(double *)&oslog[24];
    *(_DWORD *)(v366 + 112) = v200.i32[0];
    *(float *)(v366 + 116) = v203;
    v204 = *(double *)&v400;
    *(float *)v200.i32 = v399;
    *(float *)&v201 = v201;
    *(_DWORD *)(v366 + 120) = v200.i32[0];
    *(_DWORD *)(v366 + 124) = LODWORD(v201);
    v200.i32[1] = HIDWORD(v401);
    *(float *)v200.i32 = v401;
    *(float *)&v201 = *(double *)&v398;
    *(float *)&v202 = v202;
    *(float *)&v204 = v204;
    v205 = *(double *)&oslog[32];
    *(float *)(v366 + 128) = v205;
    *(_DWORD *)(v366 + 132) = LODWORD(v204);
    *(_DWORD *)(v366 + 136) = LODWORD(v202);
    *(_DWORD *)(v366 + 140) = LODWORD(v201);
    *(_DWORD *)(v366 + 144) = v200.i32[0];
    v207 = *(int8x16_t *)(v366 + 112);
    v206 = *(int8x16_t *)(v366 + 128);
    v208 = (int32x4_t)vextq_s8(v207, v206, 0xCuLL);
    v209 = (int32x4_t)vextq_s8(v206, v200, 8uLL);
    v210 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v208, (int8x16_t)v208, 0xCuLL), (int8x16_t)v208, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v209, v209), (int8x16_t)v209, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v208, v208), (int8x16_t)v208, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v209, (int8x16_t)v209, 0xCuLL), (int8x16_t)v209, 8uLL));
    *(_BYTE *)(v366 + 148) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v210.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v210.i8, 1), *(float32x2_t *)v207.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v210, v210, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL)).f32[0] > 0.0;
LABEL_318:
    v249 = 1;
    goto LABEL_400;
  }
  sub_20F2A68B0(v384);
  if (**((int **)v384[0] + 7) > 3)
    goto LABEL_318;
  v246 = *((unsigned __int8 *)v384[0] + 72);
  v247 = sub_20E8C31DC((uint64_t)v384[0], "OSLogSurrogateAppender", 1, 0);
  v248 = v247 ? v247 + 16 : 0;
  if (!v246 && !v247)
    goto LABEL_318;
  v375 = v384;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v377 = std::chrono::system_clock::now().__d_.__rep_;
  v378 = 3;
  v379 = "unknown file";
  v380 = 774;
  v382 = 0;
  v383 = 0;
  v381 = "unknown function";
  v303 = *(_QWORD *)v375;
  v304 = (uint64_t *)(*(_QWORD *)v375 + 16);
  if (*(char *)(*(_QWORD *)v375 + 39) < 0)
  {
    v306 = *(char **)(v303 + 16);
    v305 = *(_QWORD *)(v303 + 24);
  }
  else
  {
    v305 = *(unsigned __int8 *)(*(_QWORD *)v375 + 39);
    v306 = (char *)(*(_QWORD *)v375 + 16);
  }
  category = v306;
  *(_QWORD *)&v395 = v305;
  v357 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v357 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  v358 = byte_254A4A4F8[23];
  if (byte_254A4A4F8[23] >= 0)
  {
    v359 = byte_254A4A4F8;
  }
  else
  {
    v358 = *(_QWORD *)&byte_254A4A4F8[8];
    v359 = *(const char **)byte_254A4A4F8;
  }
  *(_QWORD *)&v390 = v359;
  *((_QWORD *)&v390 + 1) = v358;
  object[0] = os_log_create(v359, category);
  sub_20E86E5A8(&object[1], (uint64_t)&v390);
  sub_20E86E5A8(&object[5], (uint64_t)&category);
  v360 = object[0];
  sub_20E86E44C((uint64_t)object);
  sub_20F2C6810(v248, v304, v360, OS_LOG_TYPE_INFO);
  if (v246)
  {
    sub_20E8C003C((uint64_t)&v375, "Failed to compute structure covariance.");
    sub_20E863570((uint64_t)&v375);
  }
  sub_20E863714((uint64_t)&v375);
  v249 = 1;
LABEL_400:
  sub_20E86872C((uint64_t)&v387, v388);
  return v249;
}

void sub_20F2A9380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *object,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;

  if (a73)
  {
    if (a72 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a31);
  sub_20E86872C((uint64_t)&a44, (_QWORD *)a45);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2A9748(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double **v13;
  unsigned __int8 v14;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  double **v19;
  uint64_t *v20;
  float64x2_t v21;
  uint64_t v22;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v40;
  uint64_t v42;
  float64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  double **v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  float64_t **v53;
  uint64_t v54;
  void *__p;
  void *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  double v60;
  float64x2_t v61;
  float64_t v62;

  if (!*(_BYTE *)(a2 + 192))
    return 1;
  v9 = a2 + 40;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(a2 + 40) + 24))(a2 + 40))
    return 1;
  v50 = a5;
  v11 = *(_QWORD *)(a2 + 200);
  v10 = *(_QWORD *)(a2 + 208);
  v12 = (v10 - v11) >> 5;
  v61 = (float64x2_t)xmmword_2103AB458;
  v62 = 1.0;
  v59 = 0;
  v60 = 0.0;
  __p = 0;
  v56 = 0;
  v57 = 0;
  if ((unint64_t)(v10 - v11) > 0x29F)
  {
    sub_20EA6462C(&__p, (v10 - v11) >> 4);
    v11 = *(_QWORD *)(a2 + 200);
    v10 = *(_QWORD *)(a2 + 208);
    v13 = (double **)__p;
  }
  else
  {
    v13 = (double **)&v58;
  }
  v53 = &v13[v12];
  if (*(_BYTE *)(a2 + 192))
    v16 = v9;
  else
    v16 = 0;
  if (v11 == v10)
  {
    v30 = 0;
    v14 = 1;
    v31 = __p;
    if (!__p)
      goto LABEL_32;
    goto LABEL_31;
  }
  v51 = a1;
  v52 = v9;
  v17 = 0;
  v54 = 0;
  v18 = (_QWORD *)(a1 + 64);
  v19 = &v13[v12];
  v49 = v13;
  do
  {
    if (!a4
      || *(_QWORD *)(v16 + 32) == *(_QWORD *)v11 && *(_DWORD *)(v16 + 40) == *(_DWORD *)(v11 + 8)
      || *(_DWORD *)(v16 + 48) == *(_DWORD *)(v11 + 16))
    {
      v20 = sub_20E9DF85C(v18, (uint64_t *)v11);
      if (!v20
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 201, (uint64_t)"cameraPoseIter != camera_data_.end()", 36, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v22 = *(_QWORD *)(v11 + 24) + 16;
      *v19 = (double *)(v20 + 5);
      *v13 = (double *)v22;
      if (*(_DWORD *)(v16 + 48) == *(_DWORD *)(v11 + 16)
        && *(_QWORD *)(v16 + 32) == *(_QWORD *)v11
        && *(_DWORD *)(v16 + 40) == *(_DWORD *)(v11 + 8))
      {
        _Q0 = *(float64x2_t *)v22;
        v21.f64[0] = v62;
        _Q2 = vmulq_f64(_Q0, _Q0);
        _D3 = *(_QWORD *)(v22 + 8);
        __asm { FMLA            D2, D3, V0.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v21.f64[0] * v21.f64[0]);
        v61 = vmulq_n_f64(*(float64x2_t *)v22, _Q2.f64[0]);
        *(_QWORD *)&v62 = *(_OWORD *)&vmulq_f64(v21, _Q2);
        v54 = v17;
      }
      ++v19;
      ++v13;
      ++v17;
    }
    v11 += 32;
  }
  while (v11 != v10);
  if (v17 > 1)
  {
    a1 = v51;
    v9 = v52;
    if (*(_BYTE *)(v51 + 56))
      sub_20F2B0344(v51, a2);
    v30 = sub_20F2B04C8((__int128 *)&v61, &v60, (float64_t *)&v59, v49, v53, v17, v54);
    v14 = 5;
    v31 = __p;
    if (!__p)
      goto LABEL_32;
    goto LABEL_31;
  }
  v30 = 0;
  if (v17 == 1)
    v14 = 2;
  else
    v14 = 1;
  a1 = v51;
  v9 = v52;
  v31 = __p;
  if (__p)
  {
LABEL_31:
    v56 = v31;
    operator delete(v31);
  }
LABEL_32:
  if (v30)
  {
    if (*(_BYTE *)(a2 + 192))
      v32 = v9;
    else
      v32 = 0;
    v33 = sub_20E9DF85C((_QWORD *)(a1 + 64), (uint64_t *)(v32 + 32));
    v34.f64[0] = v60;
    v35.f64[0] = v62;
    v36.f64[1] = v61.f64[1];
    v37 = vmulq_f64(v35, v34);
    _Q0 = vmulq_n_f64(v61, v60);
    _D4 = v33[39];
    v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v33 + 33), _Q0.f64[0]), *(float64x2_t *)(v33 + 37), _Q0, 1), *(float64x2_t *)(v33 + 41), v37.f64[0]);
    __asm { FMLA            D2, D4, V0.D[1] }
    v36.f64[0] = vmlad_n_f64(_D2, *((double *)v33 + 43), v37.f64[0]);
    *(_QWORD *)&v37.f64[0] = v33[47];
    v42 = *(_OWORD *)&vaddq_f64(v37, v36);
    v43 = vaddq_f64(*(float64x2_t *)(v33 + 45), v40);
    if (*(_BYTE *)(a2 + 192))
      v44 = v9;
    else
      v44 = 0;
    *(float64x2_t *)(v44 + 8) = v43;
    *(_QWORD *)(v44 + 24) = v42;
    if (*(_BYTE *)(a2 + 192))
      v45 = v9;
    else
      v45 = 0;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45) & 1) != 0)
    {
      v46 = sub_20F2B0804(a1, a2);
      v47 = v60;
      if (v60 >= *(double *)(a1 + 16) && v60 <= *(double *)(a1 + 24) || v46 <= *(double *)(a1 + 32))
      {
        if (*(_BYTE *)(a2 + 192))
          v48 = v9;
        else
          v48 = 0;
        *(double *)(v48 + 104) = v46;
        v14 = 0;
        if (v50)
          *v50 = v47;
      }
      else
      {
        return 5;
      }
    }
    else
    {
      return 6;
    }
  }
  return v14;
}

void sub_20F2A9B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20F2A9B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double v14;
  float64x2_t v17;
  double v21;
  double v22;
  double v24;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  double *v40;
  double v42;
  float64x2_t v45;
  double v47;
  double v48;
  double v50;
  char v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t *v69;
  unsigned int v70;
  _QWORD *v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t *v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v85;
  _QWORD *v86;
  unsigned int v87;
  BOOL v88;
  uint64_t *v89;
  unsigned int v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  float v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  double v103;
  double v104;
  unint64_t v105;
  char v106;
  char v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  int v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  float64x2_t v121;
  float64x2_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  float64x2_t *v126;
  uint64_t v127;
  float64x2_t *v128;
  double v130;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  void *v159;
  char v160;
  void *__p;
  char v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  unsigned int v179;
  unsigned int v180;
  char v181;
  uint64_t v182;
  double v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  unint64_t v186;
  float64x2_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _BYTE v200[24];
  _BYTE *v201;
  _BYTE v202[24];
  _BYTE *v203;
  unint64_t v204;
  __int128 v205;
  int v206;
  __int128 v207;
  char v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  _BYTE v217[512];
  _BYTE *v218;
  __int128 v219;
  __int16 v220;
  _BYTE v221[24];
  _BYTE *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _BYTE v225[24];
  _BYTE *v226;
  _BYTE v227[24];
  _BYTE *v228;
  _QWORD v229[5];
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  char v234;
  __int128 v235;
  _BYTE v236[64];
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v242 = *MEMORY[0x24BDAC8D0];
  sub_20F2B1D4C((uint64_t)v229);
  memset(&v236[32], 0, 32);
  v235 = 0u;
  memset(v236, 0, 28);
  v237 = 0;
  v229[0] = off_24C9FC808;
  v238 = 2;
  v239 = 0;
  v241 = 0;
  v240 = 0;
  v6 = *(unsigned __int8 *)(v2 + 192);
  if (*(_BYTE *)(v2 + 192))
    v7 = v2 + 40;
  else
    v7 = 0;
  v180 = 0;
  v181 = 1;
  v182 = v7;
  if (!v6)
    goto LABEL_16;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 40) + 24))(v2 + 40))
  {
    v8 = *(uint64_t **)(v182 + 96);
    v9 = *v8;
    v10 = (double *)v8[2];
    v11 = v8[4];
    v12 = (double *)v8[6];
    _D1 = *(double *)(v182 + 16) - v10[1];
    v14 = *(double *)(v182 + 24) - v10[2];
    _Q3.f64[0] = *(float64_t *)(v9 + 16);
    _Q7 = *(_OWORD *)(v9 + 48);
    _Q3.f64[1] = *(float64_t *)(v9 + 40);
    v17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v9, *(int64x2_t *)(v9 + 24)), *(double *)(v182 + 8) - *v10), (float64x2_t)vzip2q_s64(*(int64x2_t *)v9, *(int64x2_t *)(v9 + 24)), _D1), _Q3, v14);
    __asm { FMLA            D2, D1, V7.D[1] }
    v21 = _D2 + *(double *)(v9 + 64) * v14;
    v22 = v17.f64[0] - *v12;
    _D2 = v17.f64[1] - v12[1];
    v24 = v21 - v12[2];
    _Q3.f64[0] = *(float64_t *)(v11 + 16);
    _Q4 = *(int64x2_t *)v11;
    _Q6 = *(int64x2_t *)(v11 + 24);
    _Q16 = *(_OWORD *)(v11 + 48);
    __asm { FMLA            D18, D2, V4.D[1] }
    _Q3.f64[1] = *(float64_t *)(v11 + 40);
    _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v11, _Q6), v22), (float64x2_t)vzip2q_s64(*(int64x2_t *)v11, _Q6), _D2), _Q3, v24);
    __asm
    {
      FMLA            D3, D2, V16.D[1]
      FMLA            D1, D2, V6.D[1]
    }
    _D1 = _D1 + v24 * _Q3.f64[1];
    __asm { FMLA            D2, D1, V17.D[1] }
    v183 = sqrt(_D2 + (_Q3.f64[0] + v24 * *(double *)(v11 + 64)) * (_Q3.f64[0] + *(double *)(v11 + 64) * v24));
    _Q1 = *(_OWORD *)(v182 + 64);
    _Q3.f64[0] = *(float64_t *)(v182 + 72);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (fabs(sqrt(_D2 + *(double *)(v182 + 80) * *(double *)(v182 + 80)) + -1.0) <= 0.000001)
      goto LABEL_10;
    v35 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  }
  else
  {
    v35 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  }
  if (v35)
    goto LABEL_192;
LABEL_10:
  if (!v182 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 24))(v182))
    goto LABEL_16;
  v36 = *(uint64_t **)(v182 + 96);
  v37 = *v36;
  v38 = (double *)v36[2];
  v39 = v36[4];
  v40 = (double *)v36[6];
  _D1 = *(double *)(v182 + 16) - v38[1];
  v42 = *(double *)(v182 + 24) - v38[2];
  _Q3.f64[0] = *(float64_t *)(v37 + 16);
  _Q7 = *(_OWORD *)(v37 + 48);
  _Q3.f64[1] = *(float64_t *)(v37 + 40);
  v45 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v37, *(int64x2_t *)(v37 + 24)), *(double *)(v182 + 8) - *v38), (float64x2_t)vzip2q_s64(*(int64x2_t *)v37, *(int64x2_t *)(v37 + 24)), _D1), _Q3, v42);
  __asm { FMLA            D2, D1, V7.D[1] }
  v47 = _D2 + *(double *)(v37 + 64) * v42;
  v48 = v45.f64[0] - *v40;
  _D2 = v45.f64[1] - v40[1];
  v50 = v47 - v40[2];
  _Q3.f64[0] = *(float64_t *)(v39 + 16);
  _Q4 = *(int64x2_t *)v39;
  _Q6 = *(int64x2_t *)(v39 + 24);
  _Q16 = *(_OWORD *)(v39 + 48);
  __asm { FMLA            D18, D2, V4.D[1] }
  _Q3.f64[1] = *(float64_t *)(v39 + 40);
  _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v39, _Q6), v48), (float64x2_t)vzip2q_s64(*(int64x2_t *)v39, _Q6), _D2), _Q3, v50);
  __asm
  {
    FMLA            D3, D2, V16.D[1]
    FMLA            D1, D2, V6.D[1]
  }
  _D1 = _D1 + v50 * _Q3.f64[1];
  __asm { FMLA            D2, D1, V17.D[1] }
  v183 = sqrt(_D2 + (_Q3.f64[0] + v50 * *(double *)(v39 + 64)) * (_Q3.f64[0] + *(double *)(v39 + 64) * v50));
  _Q1 = *(_OWORD *)(v182 + 64);
  _Q3.f64[0] = *(float64_t *)(v182 + 72);
  __asm { FMLA            D2, D3, V1.D[1] }
  if (fabs(sqrt(_D2 + *(double *)(v182 + 80) * *(double *)(v182 + 80)) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_192:
    abort();
  }
  sub_20F2C05BC((uint64_t)&v230, &v180);
  if (v61)
  {
    v234 = 0;
    v233 = 0;
  }
LABEL_16:
  if (*(_BYTE *)(v2 + 192))
    v62 = v2 + 40;
  else
    v62 = 0;
  v63 = *(_DWORD *)(v62 + 48);
  v64 = v4 + 38;
  v65 = v4[38];
  if (!v65)
    goto LABEL_33;
  v66 = v4 + 38;
  do
  {
    v67 = *(_DWORD *)(v65 + 32);
    _CF = v67 >= v63;
    if (v67 >= v63)
      v69 = (uint64_t *)v65;
    else
      v69 = (uint64_t *)(v65 + 8);
    if (_CF)
      v66 = (_QWORD *)v65;
    v65 = *v69;
  }
  while (*v69);
  if (v66 == v64)
  {
LABEL_33:
    v158 = 0;
    v72 = *(_QWORD *)(v62 + 32);
    v73 = *(_DWORD *)(v62 + 40);
    v75 = v4 + 7;
    v74 = (uint64_t *)v4[7];
    v155 = v5;
    if (!v74)
      goto LABEL_45;
  }
  else
  {
    v70 = *((_DWORD *)v66 + 8);
    v71 = v66 + 5;
    if (v70 > v63)
      v71 = 0;
    v158 = v71;
    v72 = *(_QWORD *)(v62 + 32);
    v73 = *(_DWORD *)(v62 + 40);
    v75 = v4 + 7;
    v74 = (uint64_t *)v4[7];
    v155 = v5;
    if (!v74)
      goto LABEL_45;
  }
  v76 = v75;
  do
  {
    v77 = v74[4];
    if (v77 < v72)
    {
      ++v74;
    }
    else if (v77 == v72)
    {
      if (*((_DWORD *)v74 + 10) < v73)
        ++v74;
      else
        v76 = v74;
    }
    else
    {
      v76 = v74;
    }
    v74 = (uint64_t *)*v74;
  }
  while (v74);
  if (v76 != v75)
  {
    v78 = v76[4];
    if (v72 >= v78 && (v72 != v78 || *((_DWORD *)v76 + 10) <= v73))
    {
      v157 = v76[6];
      v80 = *(_QWORD *)(v2 + 200);
      v79 = *(_QWORD *)(v2 + 208);
      if (v80 != v79)
        goto LABEL_46;
      goto LABEL_110;
    }
  }
LABEL_45:
  v157 = 0;
  v80 = *(_QWORD *)(v2 + 200);
  v79 = *(_QWORD *)(v2 + 208);
  if (v80 != v79)
  {
LABEL_46:
    v81 = 0;
    v156 = v4 + 223;
    while (1)
    {
      v82 = *(_QWORD *)(v80 + 16);
      v212 = *(_OWORD *)v80;
      *(_QWORD *)&v213 = v82;
      _ZF = v63 == (_DWORD)v82 && v72 == (_QWORD)v212;
      if (!_ZF || DWORD2(v212) != v73)
        break;
LABEL_47:
      v80 += 32;
      if (v80 == v79)
        goto LABEL_110;
    }
    v85 = *v64;
    if (!*v64)
      goto LABEL_68;
    v86 = v64;
    do
    {
      v87 = *(_DWORD *)(v85 + 32);
      v88 = v87 >= v82;
      if (v87 >= v82)
        v89 = (uint64_t *)v85;
      else
        v89 = (uint64_t *)(v85 + 8);
      if (v88)
        v86 = (_QWORD *)v85;
      v85 = *v89;
    }
    while (*v89);
    if (v86 == v64)
    {
LABEL_68:
      v92 = 0;
    }
    else
    {
      v90 = *((_DWORD *)v86 + 8);
      v91 = v86 + 5;
      if (v90 <= v82)
        v92 = v91;
      else
        v92 = 0;
    }
    v93 = sub_20E9DF85C(v156, (uint64_t *)&v212);
    if (v93)
    {
      v94 = v93[13];
      v95 = (uint64_t *)*v75;
      if (!*v75)
        goto LABEL_84;
    }
    else
    {
      v94 = 0;
      v95 = (uint64_t *)*v75;
      if (!*v75)
        goto LABEL_84;
    }
    v96 = v75;
    do
    {
      v97 = v95[4];
      if (v97 < (unint64_t)v212)
      {
        ++v95;
      }
      else if (v97 == (_QWORD)v212)
      {
        if (*((_DWORD *)v95 + 10) < DWORD2(v212))
          ++v95;
        else
          v96 = v95;
      }
      else
      {
        v96 = v95;
      }
      v95 = (uint64_t *)*v95;
    }
    while (v95);
    if (v96 != v75)
    {
      v98 = v96[4];
      if ((unint64_t)v212 >= v98 && ((_QWORD)v212 != v98 || *((_DWORD *)v96 + 10) <= DWORD2(v212)))
      {
        v99 = v96[6];
LABEL_85:
        v187 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v80 + 24) + 8));
        v186 = v81;
        v188 = v158;
        v189 = v92;
        v190 = v157;
        v191 = v99;
        v192 = v94;
        v179 = 0;
        v100 = *(float *)(*(_QWORD *)(v80 + 24) + 32);
        v101 = (std::__shared_weak_count *)operator new(0x30uLL);
        v101->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v101->__shared_owners_;
        v101->__shared_weak_owners_ = 0;
        v101->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE10;
        v101[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE60;
        v103 = (float)(v100 * v100);
        if (v103 < 1.0e-15)
          v104 = NAN;
        else
          v104 = 1.0 / sqrt(v103);
        ++v81;
        *(double *)&v101[1].__shared_weak_owners_ = v104;
        LOBYTE(v101[1].__shared_owners_) = v103 >= 1.0e-15;
        v177 = v101 + 1;
        v178 = v101;
        v176 = 0;
        v175 = 0;
        v184 = v101 + 1;
        v185 = v101;
        do
          v105 = __ldxr(p_shared_owners);
        while (__stxr(v105 + 1, p_shared_owners));
        sub_20F2C0DB0((uint64_t)&v230, (uint64_t *)&v186, &v179, (uint64_t *)&v184);
        v107 = v106;
        v108 = v185;
        if (!v185)
          goto LABEL_94;
        v109 = (unint64_t *)&v185->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
          if ((v107 & 1) == 0)
            goto LABEL_96;
        }
        else
        {
LABEL_94:
          if ((v106 & 1) == 0)
          {
LABEL_96:
            if (v178)
            {
              v111 = &v178->__shared_owners_;
              do
                v112 = __ldaxr((unint64_t *)v111);
              while (__stlxr(v112 - 1, (unint64_t *)v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            goto LABEL_47;
          }
        }
        v234 = 0;
        v233 = 0;
        goto LABEL_96;
      }
    }
LABEL_84:
    v99 = 0;
    goto LABEL_85;
  }
LABEL_110:
  BYTE8(v212) = 0;
  v213 = xmmword_21039D460;
  v214 = 0x3EB0C6F7A0B5ED8DLL;
  v215 = 0;
  v216 = 0x3FF7B8BAC710CB29;
  v218 = v217;
  v219 = xmmword_210378040;
  v220 = 0;
  v222 = 0;
  v224 = 0;
  v226 = 0;
  v228 = 0;
  v113 = *(_DWORD *)(v155 + 8);
  LODWORD(v212) = 1;
  DWORD1(v212) = v113;
  v186 = (unint64_t)off_24C9FCF80;
  sub_20F2C2630((uint64_t)&v187, &v212);
  v205 = 0u;
  v206 = 0;
  v204 = 0xBFF0000000000000;
  v186 = (unint64_t)&off_24C9FCEF0;
  v207 = xmmword_2103AB100;
  v208 = 1;
  v209 = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #2.0 }
  v210 = _Q0;
  v211 = xmmword_210315720;
  LOBYTE(v184) = 0;
  sub_20F2C2A38((uint64_t *)&v186, (uint64_t)v229, (unsigned __int8 *)&v184, (uint64_t)&v159);
  v174 = 0;
  if (v173 != &v172 && v173)
    MEMORY[0x212BC6368]();
  v171 = 0;
  if (v170 != &v169 && v170)
    MEMORY[0x212BC6368]();
  v168 = 0;
  if (v167 != &v166 && v167)
    MEMORY[0x212BC6368]();
  v165 = 0;
  if (v164 != &v163 && v164)
    MEMORY[0x212BC6368]();
  if (v162 < 0)
  {
    operator delete(__p);
    if ((v160 & 0x80000000) == 0)
    {
LABEL_124:
      v115 = v231;
      v116 = v232;
      if (v232 == v231)
        goto LABEL_129;
      goto LABEL_128;
    }
  }
  else if ((v160 & 0x80000000) == 0)
  {
    goto LABEL_124;
  }
  operator delete(v159);
  v115 = v231;
  v116 = v232;
  if (v232 == v231)
  {
LABEL_129:
    v117 = v116;
    goto LABEL_130;
  }
LABEL_128:
  v117 = v115;
  if (*(_DWORD *)v115)
    goto LABEL_129;
LABEL_130:
  v118 = *(double *)(*(_QWORD *)(v117 + 8) + 32);
  if (v116 != v115 && v118 >= 0.0)
  {
    do
    {
      v119 = *(_QWORD *)(v115 + 8);
      if (*(_BYTE *)(v119 + 20))
      {
        v120 = *(_QWORD *)(v119 + 24);
        if ((!v120 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 24))(v120) & 1) == 0)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_140;
        }
        v123 = *(_QWORD *)(v119 + 24);
        v124 = *(uint64_t **)(v123 + 96);
        v121.f64[0] = *(float64_t *)(v119 + 32);
        v125 = *v124;
        v126 = (float64x2_t *)v124[2];
        v127 = v124[4];
        v128 = (float64x2_t *)v124[6];
        v122.f64[0] = *(float64_t *)(v123 + 80);
        _Q2 = *(float64x2_t *)(v123 + 64);
        *(_QWORD *)&v130 = *(_OWORD *)&vmulq_f64(v121, v122);
        _Q0 = vmulq_n_f64(_Q2, v121.f64[0]);
        _D4 = *(_QWORD *)(v127 + 40);
        v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v127, _Q0.f64[0]), *(float64x2_t *)(v127 + 24), _Q0, 1), *(float64x2_t *)(v127 + 48), v130);
        __asm { FMLA            D2, D4, V0.D[1] }
        _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v127 + 64), v130);
        _Q0.f64[0] = v128[1].f64[0];
        v134 = vaddq_f64(_Q2, _Q0);
        _Q1 = vaddq_f64(v133, *v128);
        _D4 = *(_QWORD *)(v125 + 40);
        v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v125, _Q1.f64[0]), *(float64x2_t *)(v125 + 24), _Q1, 1), *(float64x2_t *)(v125 + 48), v134.f64[0]);
        __asm { FMLA            D2, D4, V1.D[1] }
        _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v125 + 64), v134.f64[0]);
        v134.f64[0] = v126[1].f64[0];
        *(float64x2_t *)(v123 + 8) = vaddq_f64(v137, *v126);
        *(_QWORD *)(v123 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v134);
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v119 + 24) + 16))(*(_QWORD *)(v119 + 24)) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_140:
          abort();
        }
      }
      v115 += 16;
    }
    while (v115 != v116);
  }
  v186 = (unint64_t)off_24C9FCF80;
  if ((_QWORD)v205)
    MEMORY[0x212BC6368](v205, 0x1000C8000313F17);
  v138 = v203;
  if (v203 == v202)
  {
    v139 = 4;
    v138 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_148;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_148:
  v140 = v201;
  if (v201 == v200)
  {
    v141 = 4;
    v140 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_153;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_153:
  v142 = v199;
  if (v199 == v198)
  {
    v143 = 4;
    v142 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_158;
    v143 = 5;
  }
  (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_158:
  v144 = v197;
  if (v197 == v196)
  {
    v145 = 4;
    v144 = v196;
    goto LABEL_162;
  }
  if (v197)
  {
    v145 = 5;
LABEL_162:
    (*(void (**)(void))(*v144 + 8 * v145))();
  }
  v195 = 0;
  if (v194 != &v193 && v194)
    MEMORY[0x212BC6368]();
  v146 = v228;
  if (v228 == v227)
  {
    v147 = 4;
    v146 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_171;
    v147 = 5;
  }
  (*(void (**)(void))(*v146 + 8 * v147))();
LABEL_171:
  v148 = v226;
  if (v226 == v225)
  {
    v149 = 4;
    v148 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_176;
    v149 = 5;
  }
  (*(void (**)(void))(*v148 + 8 * v149))();
LABEL_176:
  v150 = v224;
  if (v224 == v223)
  {
    v151 = 4;
    v150 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_181;
    v151 = 5;
  }
  (*(void (**)(void))(*v150 + 8 * v151))();
LABEL_181:
  v152 = v222;
  if (v222 == v221)
  {
    v153 = 4;
    v152 = v221;
    goto LABEL_185;
  }
  if (v222)
  {
    v153 = 5;
LABEL_185:
    (*(void (**)(void))(*v152 + 8 * v153))();
  }
  *((_QWORD *)&v219 + 1) = 0;
  if (v218 != v217 && v218)
    MEMORY[0x212BC6368]();
  v229[0] = off_24C9FC808;
  if (v239)
    MEMORY[0x212BC6368](v239, 0x1000C8000313F17);
  sub_20F2B12C0(v229);
  return v118 >= 0.0;
}

void sub_20F2AA9E0(_Unwind_Exception *a1)
{
  sub_20F2C539C(&STACK[0x950]);
  sub_20F2B116C(&STACK[0xC90]);
  sub_20F2B1278(&STACK[0xF68]);
  _Unwind_Resume(a1);
}

void sub_20F2AAA94(uint64_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q1>, float64x2_t a5@<Q2>, float64x2_t a6@<Q3>, float64x2_t a7@<Q6>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float64x2_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  float64_t *v23;
  float64x2_t v24;
  char v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  float64x2_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  float64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  float64_t *v45;
  __int128 v46;
  int v47;
  float64x2_t v48;
  double v50;
  float64x2_t v51;
  uint64_t v52;
  double v53;
  _QWORD *v59;
  _QWORD *v60;
  float64x2_t *v61;
  int v62;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t *v67;
  double v68;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  unint64_t v74;
  float64x2_t v75;
  float64_t v76;
  float64_t *__p;
  float64_t *v78;

  v8 = *a1;
  v9 = a1[1];
  if (*a1 == v9)
    goto LABEL_13;
  if (v9 - v8 == 8)
  {
    v10 = **(_QWORD ***)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 424);
    v11 = v10[8];
    if (v11)
    {
      v12 = (_QWORD *)v10[6];
      v13 = v10 + 7;
      if (v12 == v13)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 24) = 0;
      }
      else
      {
        v14.f64[0] = 0.0;
        v15 = 0;
        a3.f64[0] = 0.0;
        v16 = v12;
        do
        {
          v18 = (_QWORD *)v16[1];
          v19 = v16;
          if (v18)
          {
            do
            {
              v20 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v20 = (_QWORD *)v19[2];
              _ZF = *v20 == (_QWORD)v19;
              v19 = v20;
            }
            while (!_ZF);
          }
          v17 = v16[6];
          a6.f64[0] = *(float64_t *)(v17 + 88);
          a3 = vaddq_f64(a3, a6);
          *(_QWORD *)&v14.f64[1] = v15;
          v14 = vaddq_f64(v14, *(float64x2_t *)(v17 + 72));
          v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
          v16 = v20;
        }
        while (v20 != v13);
        v47 = 0;
        a6.f64[0] = 1.0 / (double)v11;
        v48 = vmulq_f64(a6, a3);
        *(_QWORD *)&v14.f64[1] = v15;
        v51 = vmulq_n_f64(v14, a6.f64[0]);
        _Q3 = (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL);
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 24) = 0;
        v50 = -1.79769313e308;
        v51.f64[1] = _Q3.f64[0];
        do
        {
          v52 = v12[6];
          _Q3.f64[0] = *(float64_t *)(v52 + 88);
          *(_QWORD *)&v53 = *(_OWORD *)&vsubq_f64(v48, _Q3);
          _Q4 = vsubq_f64(v51, *(float64x2_t *)(v52 + 72));
          _Q3 = vmulq_f64(_Q4, _Q4);
          _D6 = _Q4.f64[1];
          __asm { FMLA            D3, D6, V4.D[1] }
          _Q3.f64[0] = sqrt(vmlad_n_f64(_Q3.f64[0], v53, v53));
          if (_Q3.f64[0] > v50)
          {
            *(double *)(a2 + 16) = v53;
            *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
            *(float64x2_t *)a2 = _Q4;
            if (!v47)
              *(_BYTE *)(a2 + 24) = 1;
            v47 = 1;
            v50 = _Q3.f64[0];
          }
          v59 = (_QWORD *)v12[1];
          if (v59)
          {
            do
            {
              v60 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (_QWORD *)v12[2];
              _ZF = *v60 == (_QWORD)v12;
              v12 = v60;
            }
            while (!_ZF);
          }
          v12 = v60;
        }
        while (v60 != v13);
        if (v47)
          return;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 282, (uint64_t)"opt_spread_from_center.has_value()", 34, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      return;
    }
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  v23 = 0;
  __p = 0;
  v24.f64[0] = 0.0;
  v25 = 1;
  v78 = 0;
  v26 = 0;
  a7.f64[0] = 0.0;
  do
  {
    while (1)
    {
      v27 = **(_QWORD ***)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 424);
      v28 = v27[8];
      if (!v28)
        break;
      v29 = (_QWORD *)v27[6];
      v30 = v27 + 7;
      v31.f64[0] = 0.0;
      v32 = 0;
      a5.f64[0] = 0.0;
      if (v29 != v27 + 7)
      {
        do
        {
          v35 = (_QWORD *)v29[1];
          v36 = v29;
          if (v35)
          {
            do
            {
              v37 = v35;
              v35 = (_QWORD *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              v37 = (_QWORD *)v36[2];
              _ZF = *v37 == (_QWORD)v36;
              v36 = v37;
            }
            while (!_ZF);
          }
          v34 = v29[6];
          a6.f64[0] = *(float64_t *)(v34 + 88);
          a5 = vaddq_f64(a5, a6);
          *(_QWORD *)&v31.f64[1] = v32;
          v31 = vaddq_f64(v31, *(float64x2_t *)(v34 + 72));
          v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          v29 = v37;
        }
        while (v37 != v30);
      }
      a6.f64[0] = 1.0 / (double)v28;
      a5 = vmulq_f64(a6, a5);
      *(_QWORD *)&v31.f64[1] = v32;
      a4 = vmulq_n_f64(v31, a6.f64[0]);
      a6 = (float64x2_t)vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL);
      if (v23 >= v78)
      {
        v38 = __p;
        v39 = 0xAAAAAAAAAAAAAAABLL * (v23 - __p);
        v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E969238();
        if (0x5555555555555556 * (v78 - __p) > v40)
          v40 = 0x5555555555555556 * (v78 - __p);
        if (0xAAAAAAAAAAAAAAABLL * (v78 - __p) >= 0x555555555555555)
          v41 = 0xAAAAAAAAAAAAAAALL;
        else
          v41 = v40;
        v75 = a7;
        v76 = v24.f64[0];
        v73 = a5;
        v74 = v26;
        v72 = a4;
        if (v41)
        {
          v71 = a6;
          if (v41 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v42 = (char *)operator new(24 * v41);
          a7 = v75;
          v24.f64[0] = v76;
          a5 = v73;
          v26 = v74;
          a6 = v71;
          a4 = v72;
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[8 * (v23 - __p)];
        *((_QWORD *)v43 + 2) = *(_QWORD *)&a5.f64[0];
        *(float64_t *)&v44 = a4.f64[0];
        *((_QWORD *)&v44 + 1) = *(_QWORD *)&a6.f64[0];
        *(_OWORD *)v43 = v44;
        if (v23 == __p)
        {
          v38 = v23;
          v23 = (float64_t *)(v43 + 24);
          __p = (float64_t *)&v42[24 * v39];
          v78 = (float64_t *)&v42[24 * v41];
          if (!v38)
            goto LABEL_43;
        }
        else
        {
          v45 = (float64_t *)&v42[8 * (v23 - __p)];
          do
          {
            v46 = *(_OWORD *)(v23 - 3);
            *(v45 - 1) = *(v23 - 1);
            *(_OWORD *)(v45 - 3) = v46;
            v45 -= 3;
            v23 -= 3;
          }
          while (v23 != __p);
          v23 = (float64_t *)(v43 + 24);
          __p = v45;
          v78 = (float64_t *)&v42[24 * v41];
          if (!v38)
            goto LABEL_43;
        }
        operator delete(v38);
        a4 = v72;
        a5 = v73;
        v26 = v74;
        a7 = v75;
        v24.f64[0] = v76;
      }
      else
      {
        v23[2] = a5.f64[0];
        *(float64_t *)&v33 = a4.f64[0];
        *((_QWORD *)&v33 + 1) = *(_QWORD *)&a6.f64[0];
        *(_OWORD *)v23 = v33;
        v23 += 3;
      }
LABEL_43:
      v25 = 0;
      *(_QWORD *)&v24.f64[1] = v26;
      v24 = vaddq_f64(v24, a4);
      v26 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
      a7 = vaddq_f64(a7, a5);
      v8 += 8;
      if (v8 == v9)
      {
        v61 = (float64x2_t *)__p;
        goto LABEL_66;
      }
    }
    v8 += 8;
  }
  while (v8 != v9);
  v61 = (float64x2_t *)__p;
  if ((v25 & 1) != 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    goto LABEL_78;
  }
LABEL_66:
  a4.f64[0] = 1.0;
  if (a1[1] != *a1)
    a4.f64[0] = 1.0 / (double)(unint64_t)((a1[1] - *a1) >> 3);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v61 == (float64x2_t *)v23)
    goto LABEL_86;
  v62 = 0;
  *(_QWORD *)&v24.f64[1] = v26;
  v66 = vmulq_n_f64(v24, a4.f64[0]);
  _Q3 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL);
  v64 = vmulq_f64(a7, a4);
  v65 = -1.79769313e308;
  v66.f64[1] = _Q3.f64[0];
  v67 = v61;
  do
  {
    while (1)
    {
      while (1)
      {
        _Q3.f64[0] = v67[1].f64[0];
        *(_QWORD *)&v68 = *(_OWORD *)&vsubq_f64(v64, _Q3);
        _Q4 = vsubq_f64(v66, *v67);
        _Q3 = vmulq_f64(_Q4, _Q4);
        _D6 = _Q4.f64[1];
        __asm { FMLA            D3, D6, V4.D[1] }
        _Q3.f64[0] = sqrt(vmlad_n_f64(_Q3.f64[0], v68, v68));
        if (_Q3.f64[0] > v65)
          break;
        v67 = (float64x2_t *)((char *)v67 + 24);
        if (v67 == (float64x2_t *)v23)
          goto LABEL_76;
      }
      *(double *)(a2 + 16) = v68;
      *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
      *(float64x2_t *)a2 = _Q4;
      if (!v62)
        break;
      v62 = 1;
      v67 = (float64x2_t *)((char *)v67 + 24);
      v65 = _Q3.f64[0];
      if (v67 == (float64x2_t *)v23)
        goto LABEL_76;
    }
    *(_BYTE *)(a2 + 24) = 1;
    v62 = 1;
    v67 = (float64x2_t *)((char *)v67 + 24);
    v65 = _Q3.f64[0];
  }
  while (v67 != (float64x2_t *)v23);
LABEL_76:
  if (!v62)
  {
LABEL_86:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataControllerUtil.cpp", 855, (uint64_t)"opt_spread_from_center.has_value()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_78:
  if (v61)
    operator delete(v61);
}

void sub_20F2AB054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_20F2AB080(_DWORD *a1, _QWORD *a2, double a3, float64x2_t _Q1, float64x2_t _Q2, float64x2_t a6)
{
  _QWORD **v6;
  double v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v24;
  _QWORD **v25;
  _QWORD **v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  float64x2_t v38;
  unint64_t v39;
  char v41;
  float64x2_t v42;
  double v43;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD **v55;
  unint64_t v56;
  int8x16_t v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char v63;

  v6 = (_QWORD **)*a2;
  v55 = (_QWORD **)a2[1];
  if ((_QWORD **)*a2 != v55)
  {
    v8 = a3 * a3;
    do
    {
      v9 = *v6;
      v10 = (*v6)[2];
      v11 = **(_QWORD ***)(v10 + 424);
      v12 = v11[8];
      if (v12)
      {
        v13 = (_QWORD *)v11[6];
        v14 = v11 + 7;
        v15.f64[0] = 0.0;
        _Q1.f64[0] = 0.0;
        _Q2.f64[0] = 0.0;
        if (v13 != v14)
        {
          do
          {
            v20 = (_QWORD *)v13[1];
            v21 = v13;
            if (v20)
            {
              do
              {
                v22 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v21[2];
                _ZF = *v22 == (_QWORD)v21;
                v21 = v22;
              }
              while (!_ZF);
            }
            v19 = v13[6];
            a6.f64[0] = *(float64_t *)(v19 + 88);
            _Q2 = vaddq_f64(_Q2, a6);
            v15.f64[1] = _Q1.f64[0];
            v15 = vaddq_f64(v15, *(float64x2_t *)(v19 + 72));
            _Q1 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
            v13 = v22;
          }
          while (v22 != v14);
        }
        LOBYTE(v60) = 0;
        v61 = 0;
        LOBYTE(v62) = 0;
        v63 = 0;
        v17 = *(_QWORD *)(v10 + 208);
        v16 = *(_QWORD *)(v10 + 216);
        if (v17 != v16)
        {
          v18 = 0;
          do
          {
            if (*(_DWORD *)(v17 + 464) == 2 && v18 <= 1)
            {
              v24 = &v60 + 2 * v18;
              *v24 = *(_QWORD *)(v17 + 24);
              *((_BYTE *)v24 + 8) = 1;
              ++v18;
            }
            v17 += 472;
          }
          while (v17 != v16);
        }
        v25 = (_QWORD **)*a2;
        v26 = (_QWORD **)a2[1];
        if ((_QWORD **)*a2 != v26)
        {
          a6.f64[0] = 1.0 / (double)v12;
          _Q2 = vmulq_f64(a6, _Q2);
          v15.f64[1] = _Q1.f64[0];
          v57 = (int8x16_t)vmulq_n_f64(v15, a6.f64[0]);
          v58 = _Q2;
          v56 = vextq_s8(v57, v57, 8uLL).u64[0];
          v27 = v61;
          v28 = v60;
          v29 = v62;
          do
          {
            v30 = (uint64_t)*v25;
            v31 = (*v25)[2];
            v32 = *(_QWORD *)(v31 + 160);
            v33 = v9[2];
            if (v32 != *(_QWORD *)(v33 + 160)
              && (*(_DWORD *)(v33 + 412) == *a1 && *(_DWORD *)(v33 + 416) == a1[1] && *(_DWORD *)(v33 + 420) == a1[2]
               || *(_DWORD *)(v31 + 412) != *a1
               || *(_DWORD *)(v31 + 416) != a1[1]
               || *(_DWORD *)(v31 + 420) != a1[2]))
            {
              v34 = **(_QWORD ***)(v31 + 424);
              v35 = v34[8];
              if (v35)
              {
                v36 = (_QWORD *)v34[6];
                v37 = v34 + 7;
                v38.f64[0] = 0.0;
                v39 = 0;
                _Q1.f64[0] = 0.0;
                if (v36 != v37)
                {
                  do
                  {
                    v51 = (_QWORD *)v36[1];
                    v52 = v36;
                    if (v51)
                    {
                      do
                      {
                        v53 = v51;
                        v51 = (_QWORD *)*v51;
                      }
                      while (v51);
                    }
                    else
                    {
                      do
                      {
                        v53 = (_QWORD *)v52[2];
                        _ZF = *v53 == (_QWORD)v52;
                        v52 = v53;
                      }
                      while (!_ZF);
                    }
                    v50 = v36[6];
                    a6.f64[0] = *(float64_t *)(v50 + 88);
                    _Q1 = vaddq_f64(_Q1, a6);
                    *(_QWORD *)&v38.f64[1] = v39;
                    v38 = vaddq_f64(v38, *(float64x2_t *)(v50 + 72));
                    v39 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
                    v36 = v53;
                  }
                  while (v53 != v37);
                }
                if (v27)
                  _ZF = v32 == v28;
                else
                  _ZF = 0;
                v41 = _ZF;
                a6.f64[0] = 1.0 / (double)v35;
                *(_QWORD *)&v38.f64[1] = v39;
                *(_QWORD *)&v42.f64[0] = v57.i64[0];
                *(_QWORD *)&v42.f64[1] = v56;
                _Q2 = vmlsq_lane_f64(v42, v38, a6.f64[0], 0);
                *(_QWORD *)&v43 = *(_OWORD *)&vmlsq_f64(v58, a6, _Q1);
                _Q1 = vmulq_f64(_Q2, _Q2);
                _D3 = *(_QWORD *)&_Q2.f64[1];
                __asm { FMLA            D1, D3, V2.D[1] }
                _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v43, v43);
                v49 = !_ZF && v32 == v29;
                if (_Q1.f64[0] <= v8 && (v41 & 1) == 0 && (v49 & 1) == 0)
                {
                  if (sub_20F261D44(*v25, v33))
                  {
                    v59 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 160);
                    sub_20F26389C(v9, &v59);
                  }
                }
              }
            }
            ++v25;
          }
          while (v25 != v26);
        }
      }
      ++v6;
    }
    while (v6 != v55);
  }
}

void sub_20F2AB3C0(unint64_t a1, char *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double *v47;
  double v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  double *v52;
  double v53;
  double *v54;
  double *v55;
  double v56;
  double *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double *v85;
  double v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  BOOL v98;
  unint64_t v99;
  char *v100;
  double *v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _OWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _OWORD *v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  _OWORD *v200;
  unint64_t v201;
  _OWORD *v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  unint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  double v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  double *v229;
  double *v230;
  double *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  char *v236;
  double *v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  _OWORD __dst[18];
  uint64_t v336;

  v336 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v235 = (uint64_t)(a2 - 496);
  v236 = a2;
  v232 = (uint64_t)(a2 - 1488);
  v233 = (uint64_t)(a2 - 992);
  v230 = (double *)(a2 - 360);
  v231 = (double *)(a2 - 416);
  v229 = (double *)(a2 - 304);
  v237 = (double *)(a2 - 192);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)&a2[-v7];
    v9 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)&a2[-v7] >> 4);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v143 = (void *)(v235 + 80);
        if (*(double *)(v235 + 80)
           + *(double *)(v235 + 136)
           + *(double *)(v235 + 192)
           + *((double *)a2 - 31)
           + *((double *)a2 - 24)
           + *((double *)a2 - 17) > *(double *)(v7 + 80)
                                  + *(double *)(v7 + 136)
                                  + *(double *)(v7 + 192)
                                  + *(double *)(v7 + 248)
                                  + *(double *)(v7 + 304)
                                  + *(double *)(v7 + 360))
        {
          __dst[0] = *(_OWORD *)v7;
          v144 = *(_QWORD *)v235;
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v235 + 8);
          *(_QWORD *)v7 = v144;
          v145 = *(_QWORD *)&__dst[0];
          *(_DWORD *)(v235 + 8) = DWORD2(__dst[0]);
          *(_QWORD *)v235 = v145;
          __dst[0] = *(_OWORD *)(v7 + 16);
          v146 = *(_QWORD *)(v235 + 16);
          *(_DWORD *)(v7 + 24) = *(_DWORD *)(v235 + 24);
          *(_QWORD *)(v7 + 16) = v146;
          v147 = *(_QWORD *)&__dst[0];
          *(_DWORD *)(v235 + 24) = DWORD2(__dst[0]);
          *(_QWORD *)(v235 + 16) = v147;
          v149 = *(_OWORD *)(v7 + 48);
          __dst[0] = *(_OWORD *)(v7 + 32);
          v148 = __dst[0];
          __dst[1] = v149;
          __dst[2] = *(_OWORD *)(v7 + 64);
          v150 = *(_OWORD *)(v235 + 64);
          v151 = *(_OWORD *)(v235 + 32);
          *(_OWORD *)(v7 + 48) = *(_OWORD *)(v235 + 48);
          *(_OWORD *)(v7 + 64) = v150;
          *(_OWORD *)(v7 + 32) = v151;
          v152 = __dst[2];
          *(_OWORD *)(v235 + 48) = v149;
          *(_OWORD *)(v235 + 64) = v152;
          *(_OWORD *)(v235 + 32) = v148;
          memcpy(__dst, (const void *)(v7 + 80), sizeof(__dst));
          memcpy((void *)(v7 + 80), v143, 0x120uLL);
          memcpy(v143, __dst, 0x120uLL);
          v153 = *(_OWORD *)(v7 + 448);
          __dst[4] = *(_OWORD *)(v7 + 432);
          __dst[5] = v153;
          v154 = *(_OWORD *)(v7 + 480);
          __dst[6] = *(_OWORD *)(v7 + 464);
          __dst[7] = v154;
          v155 = *(_OWORD *)(v7 + 384);
          __dst[0] = *(_OWORD *)(v7 + 368);
          __dst[1] = v155;
          v156 = *(_OWORD *)(v7 + 416);
          __dst[2] = *(_OWORD *)(v7 + 400);
          __dst[3] = v156;
          v157 = *((_OWORD *)a2 - 8);
          v158 = *((_OWORD *)a2 - 7);
          v159 = *((_OWORD *)a2 - 5);
          *(_OWORD *)(v7 + 400) = *((_OWORD *)a2 - 6);
          *(_OWORD *)(v7 + 416) = v159;
          *(_OWORD *)(v7 + 368) = v157;
          *(_OWORD *)(v7 + 384) = v158;
          v161 = *((_OWORD *)a2 - 2);
          v160 = *((_OWORD *)a2 - 1);
          v162 = *((_OWORD *)a2 - 3);
          *(_OWORD *)(v7 + 432) = *((_OWORD *)a2 - 4);
          *(_OWORD *)(v7 + 448) = v162;
          *(_OWORD *)(v7 + 464) = v161;
          *(_OWORD *)(v7 + 480) = v160;
          v163 = __dst[0];
          v164 = __dst[1];
          v165 = __dst[3];
          *((_OWORD *)a2 - 6) = __dst[2];
          *((_OWORD *)a2 - 5) = v165;
          *((_OWORD *)a2 - 8) = v163;
          *((_OWORD *)a2 - 7) = v164;
          v166 = __dst[4];
          v167 = __dst[5];
          v168 = __dst[7];
          *((_OWORD *)a2 - 2) = __dst[6];
          *((_OWORD *)a2 - 1) = v168;
          *((_OWORD *)a2 - 4) = v166;
          *((_OWORD *)a2 - 3) = v167;
        }
        return;
      case 3uLL:
        sub_20F2AD7C8((_DWORD *)v7, (double *)(v7 + 496), v235);
        return;
      case 4uLL:
        sub_20F2AE4A4(v7, v7 + 496, v7 + 992, v235);
        return;
      case 5uLL:
        sub_20F2AC8E8(v7, v7 + 496, v7 + 992, v7 + 1488, v235);
        return;
      default:
        if (v8 > 11903)
        {
          if (!a3)
          {
            sub_20F2ACF1C((char *)v7, a2, a2);
            return;
          }
          v10 = v9 >> 1;
          v11 = v7 + 496 * (v9 >> 1);
          if ((unint64_t)v8 >= 0xF801)
          {
            sub_20F2AD7C8((_DWORD *)a1, (double *)v11, v235);
            v12 = 496 * v10;
            v13 = (double *)(a1 + 496 * v10);
            sub_20F2AD7C8((_DWORD *)(a1 + 496), v13 - 62, v233);
            sub_20F2AD7C8((_DWORD *)(a1 + 992), (double *)(a1 + 496 + v12), v232);
            sub_20F2AD7C8((_DWORD *)v13 - 124, (double *)v11, a1 + 496 + v12);
            v14 = *(_OWORD *)(a1 + 16);
            __dst[0] = *(_OWORD *)a1;
            v15 = *(double *)v11;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v11 + 8);
            *(double *)a1 = v15;
            v16 = *(_QWORD *)&__dst[0];
            *(_DWORD *)(v11 + 8) = DWORD2(__dst[0]);
            *(_QWORD *)v11 = v16;
            __dst[0] = v14;
            v17 = *(_QWORD *)(v11 + 16);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v11 + 24);
            *(_QWORD *)(a1 + 16) = v17;
            v18 = *(_QWORD *)&__dst[0];
            *(_DWORD *)(v11 + 24) = DWORD2(__dst[0]);
            *(_QWORD *)(v11 + 16) = v18;
            v20 = *(_OWORD *)(a1 + 48);
            __dst[0] = *(_OWORD *)(a1 + 32);
            v19 = __dst[0];
            __dst[1] = v20;
            __dst[2] = *(_OWORD *)(a1 + 64);
            v21 = *((_OWORD *)v13 + 4);
            v22 = *((_OWORD *)v13 + 2);
            *(_OWORD *)(a1 + 48) = *((_OWORD *)v13 + 3);
            *(_OWORD *)(a1 + 64) = v21;
            *(_OWORD *)(a1 + 32) = v22;
            v23 = __dst[2];
            *((_OWORD *)v13 + 3) = v20;
            *((_OWORD *)v13 + 4) = v23;
            *((_OWORD *)v13 + 2) = v19;
            memcpy(__dst, (const void *)(a1 + 80), sizeof(__dst));
            memcpy((void *)(a1 + 80), v13 + 10, 0x120uLL);
            memcpy(v13 + 10, __dst, 0x120uLL);
            v24 = *(_OWORD *)(a1 + 448);
            __dst[4] = *(_OWORD *)(a1 + 432);
            __dst[5] = v24;
            v25 = *(_OWORD *)(a1 + 480);
            __dst[6] = *(_OWORD *)(a1 + 464);
            __dst[7] = v25;
            v26 = *(_OWORD *)(a1 + 384);
            __dst[0] = *(_OWORD *)(a1 + 368);
            __dst[1] = v26;
            v27 = *(_OWORD *)(a1 + 416);
            __dst[2] = *(_OWORD *)(a1 + 400);
            __dst[3] = v27;
            v28 = *((_OWORD *)v13 + 23);
            v29 = *((_OWORD *)v13 + 24);
            v30 = *((_OWORD *)v13 + 26);
            *(_OWORD *)(a1 + 400) = *((_OWORD *)v13 + 25);
            *(_OWORD *)(a1 + 416) = v30;
            *(_OWORD *)(a1 + 368) = v28;
            *(_OWORD *)(a1 + 384) = v29;
            v32 = *((_OWORD *)v13 + 29);
            v31 = *((_OWORD *)v13 + 30);
            v33 = *((_OWORD *)v13 + 28);
            *(_OWORD *)(a1 + 432) = *((_OWORD *)v13 + 27);
            *(_OWORD *)(a1 + 448) = v33;
            *(_OWORD *)(a1 + 464) = v32;
            *(_OWORD *)(a1 + 480) = v31;
            v34 = __dst[0];
            v35 = __dst[1];
            v36 = __dst[3];
            *((_OWORD *)v13 + 25) = __dst[2];
            *((_OWORD *)v13 + 26) = v36;
            *((_OWORD *)v13 + 23) = v34;
            *((_OWORD *)v13 + 24) = v35;
            v37 = __dst[4];
            v38 = __dst[5];
            v39 = __dst[7];
            *((_OWORD *)v13 + 29) = __dst[6];
            *((_OWORD *)v13 + 30) = v39;
            *((_OWORD *)v13 + 27) = v37;
            *((_OWORD *)v13 + 28) = v38;
            v238 = --a3;
            if ((a4 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v40 = *(double *)(a1 + 80);
            v41 = *(double *)(a1 + 136);
            v42 = *(double *)(a1 + 192);
            v43 = *(double *)(a1 + 248);
            v44 = *(double *)(a1 + 304);
            v45 = *(double *)(a1 + 360);
            v46 = v40 + v41 + v42 + v43 + v44 + v45;
            if (*(double *)(a1 - 416)
               + *(double *)(a1 - 360)
               + *(double *)(a1 - 304)
               + *(double *)(a1 - 248)
               + *(double *)(a1 - 192)
               + *(double *)(a1 - 136) > v46)
              goto LABEL_15;
            v319 = *(_OWORD *)a1;
            v323 = *(_OWORD *)(a1 + 16);
            v331 = *(_OWORD *)(a1 + 48);
            v333 = *(_OWORD *)(a1 + 64);
            v327 = *(_OWORD *)(a1 + 32);
            v311 = *(_OWORD *)(a1 + 104);
            v315 = *(_OWORD *)(a1 + 120);
            v303 = *(_OWORD *)(a1 + 176);
            v307 = *(_OWORD *)(a1 + 88);
            v295 = *(_OWORD *)(a1 + 144);
            v299 = *(_OWORD *)(a1 + 160);
            v287 = *(_OWORD *)(a1 + 216);
            v291 = *(_OWORD *)(a1 + 232);
            v279 = *(_OWORD *)(a1 + 288);
            v283 = *(_OWORD *)(a1 + 200);
            v271 = *(_OWORD *)(a1 + 256);
            v275 = *(_OWORD *)(a1 + 272);
            v267 = *(_OWORD *)(a1 + 328);
            v269 = *(_OWORD *)(a1 + 344);
            v247 = *(_OWORD *)(a1 + 400);
            v251 = *(_OWORD *)(a1 + 416);
            v239 = *(_OWORD *)(a1 + 368);
            v243 = *(_OWORD *)(a1 + 384);
            v263 = *(_OWORD *)(a1 + 480);
            v265 = *(_OWORD *)(a1 + 312);
            v259 = *(_OWORD *)(a1 + 448);
            v261 = *(_OWORD *)(a1 + 464);
            v255 = *(_OWORD *)(a1 + 432);
            if (v46 <= *v231 + *v230 + *v229 + *((double *)a2 - 31) + *((double *)a2 - 24) + *((double *)a2 - 17))
            {
              v99 = a1 + 496;
              do
              {
                v7 = v99;
                if (v99 >= (unint64_t)v236)
                  break;
                v99 += 496;
              }
              while (v46 <= *(double *)(v7 + 80)
                           + *(double *)(v7 + 136)
                           + *(double *)(v7 + 192)
                           + *(double *)(v7 + 248)
                           + *(double *)(v7 + 304)
                           + *(double *)(v7 + 360));
            }
            else
            {
              v47 = (double *)a1;
              do
              {
                v7 = (unint64_t)(v47 + 62);
                v48 = v47[72] + v47[79] + v47[86] + v47[93] + v47[100] + v47[107];
                v47 += 62;
              }
              while (v46 <= v48);
            }
            v100 = v236;
            if (v7 < (unint64_t)v236)
            {
              v101 = v237;
              do
              {
                v102 = *(v101 - 28) + *(v101 - 21) + *(v101 - 14) + *(v101 - 7) + *v101 + v101[7];
                v101 -= 62;
              }
              while (v46 > v102);
              goto LABEL_43;
            }
            while (v7 < (unint64_t)v100)
            {
              __dst[0] = *(_OWORD *)v7;
              v103 = *(_QWORD *)v100;
              *(_DWORD *)(v7 + 8) = *((_DWORD *)v100 + 2);
              *(_QWORD *)v7 = v103;
              v104 = *(_QWORD *)&__dst[0];
              *((_DWORD *)v100 + 2) = DWORD2(__dst[0]);
              *(_QWORD *)v100 = v104;
              __dst[0] = *(_OWORD *)(v7 + 16);
              LODWORD(v104) = *((_DWORD *)v100 + 6);
              *(_QWORD *)(v7 + 16) = *((_QWORD *)v100 + 2);
              *(_DWORD *)(v7 + 24) = v104;
              *((_QWORD *)v100 + 2) = *(_QWORD *)&__dst[0];
              *((_DWORD *)v100 + 6) = DWORD2(__dst[0]);
              v105 = *(_OWORD *)(v7 + 48);
              v106 = *(_OWORD *)(v7 + 32);
              __dst[2] = *(_OWORD *)(v7 + 64);
              v107 = *((_OWORD *)v100 + 2);
              v108 = *((_OWORD *)v100 + 4);
              *(_OWORD *)(v7 + 48) = *((_OWORD *)v100 + 3);
              *(_OWORD *)(v7 + 64) = v108;
              *(_OWORD *)(v7 + 32) = v107;
              v109 = __dst[2];
              *((_OWORD *)v100 + 2) = v106;
              *((_OWORD *)v100 + 3) = v105;
              *((_OWORD *)v100 + 4) = v109;
              memcpy(__dst, (const void *)(v7 + 80), sizeof(__dst));
              memcpy((void *)(v7 + 80), v100 + 80, 0x120uLL);
              memcpy(v100 + 80, __dst, 0x120uLL);
              v110 = *(_OWORD *)(v7 + 448);
              __dst[4] = *(_OWORD *)(v7 + 432);
              __dst[5] = v110;
              v111 = *(_OWORD *)(v7 + 480);
              __dst[6] = *(_OWORD *)(v7 + 464);
              __dst[7] = v111;
              v112 = *(_OWORD *)(v7 + 384);
              __dst[0] = *(_OWORD *)(v7 + 368);
              __dst[1] = v112;
              v113 = *(_OWORD *)(v7 + 416);
              __dst[2] = *(_OWORD *)(v7 + 400);
              __dst[3] = v113;
              v114 = *((_OWORD *)v100 + 23);
              v115 = *((_OWORD *)v100 + 24);
              v116 = *((_OWORD *)v100 + 26);
              *(_OWORD *)(v7 + 400) = *((_OWORD *)v100 + 25);
              *(_OWORD *)(v7 + 416) = v116;
              *(_OWORD *)(v7 + 368) = v114;
              *(_OWORD *)(v7 + 384) = v115;
              v117 = *((_OWORD *)v100 + 28);
              v119 = *((_OWORD *)v100 + 29);
              v118 = *((_OWORD *)v100 + 30);
              *(_OWORD *)(v7 + 432) = *((_OWORD *)v100 + 27);
              *(_OWORD *)(v7 + 448) = v117;
              *(_OWORD *)(v7 + 464) = v119;
              *(_OWORD *)(v7 + 480) = v118;
              v120 = __dst[5];
              *((_OWORD *)v100 + 27) = __dst[4];
              *((_OWORD *)v100 + 28) = v120;
              v121 = __dst[7];
              *((_OWORD *)v100 + 29) = __dst[6];
              *((_OWORD *)v100 + 30) = v121;
              v122 = __dst[1];
              *((_OWORD *)v100 + 23) = __dst[0];
              *((_OWORD *)v100 + 24) = v122;
              v123 = __dst[3];
              *((_OWORD *)v100 + 25) = __dst[2];
              *((_OWORD *)v100 + 26) = v123;
              do
              {
                v124 = *(double *)(v7 + 576);
                v125 = *(double *)(v7 + 632);
                v126 = *(double *)(v7 + 688);
                v127 = *(double *)(v7 + 744);
                v128 = *(double *)(v7 + 800);
                v129 = *(double *)(v7 + 856);
                v7 += 496;
              }
              while (v46 <= v124 + v125 + v126 + v127 + v128 + v129);
              v101 = (double *)(v100 - 192);
              do
              {
                v130 = *(v101 - 28) + *(v101 - 21) + *(v101 - 14) + *(v101 - 7) + *v101 + v101[7];
                v101 -= 62;
              }
              while (v46 > v130);
LABEL_43:
              v100 = (char *)(v101 + 24);
            }
            v131 = (uint64_t *)(v7 - 496);
            if (v7 - 496 != a1)
            {
              v132 = *v131;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 488);
              *(_QWORD *)a1 = v132;
              v133 = *(_QWORD *)(v7 - 480);
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(v7 - 472);
              *(_QWORD *)(a1 + 16) = v133;
              v134 = *(_OWORD *)(v7 - 464);
              v135 = *(_OWORD *)(v7 - 432);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 - 448);
              *(_OWORD *)(a1 + 64) = v135;
              *(_OWORD *)(a1 + 32) = v134;
              memcpy((void *)(a1 + 80), (const void *)(v7 - 416), 0x120uLL);
              v136 = *(_OWORD *)(v7 - 80);
              v138 = *(_OWORD *)(v7 - 128);
              v137 = *(_OWORD *)(v7 - 112);
              *(_OWORD *)(a1 + 400) = *(_OWORD *)(v7 - 96);
              *(_OWORD *)(a1 + 416) = v136;
              *(_OWORD *)(a1 + 368) = v138;
              *(_OWORD *)(a1 + 384) = v137;
              v139 = *(_OWORD *)(v7 - 16);
              v141 = *(_OWORD *)(v7 - 64);
              v140 = *(_OWORD *)(v7 - 48);
              *(_OWORD *)(a1 + 464) = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(a1 + 480) = v139;
              *(_OWORD *)(a1 + 432) = v141;
              *(_OWORD *)(a1 + 448) = v140;
            }
            a4 = 0;
            *(_DWORD *)(v7 - 488) = DWORD2(v319);
            *v131 = v319;
            *(_DWORD *)(v7 - 472) = DWORD2(v323);
            *(_QWORD *)(v7 - 480) = v323;
            *(double *)(v7 - 416) = v40;
            v142 = v7 - 416;
            *(_OWORD *)(v7 - 448) = v331;
            *(_OWORD *)(v7 - 432) = v333;
            *(_OWORD *)(v7 - 464) = v327;
            *(_OWORD *)(v142 + 40) = v315;
            *(_OWORD *)(v142 + 24) = v311;
            *(_OWORD *)(v142 + 8) = v307;
            *(double *)(v142 + 56) = v41;
            *(_OWORD *)(v142 + 80) = v299;
            *(_OWORD *)(v142 + 96) = v303;
            *(_OWORD *)(v142 + 64) = v295;
            *(double *)(v142 + 112) = v42;
            *(_OWORD *)(v142 + 152) = v291;
            *(_OWORD *)(v142 + 136) = v287;
            *(_OWORD *)(v142 + 120) = v283;
            *(double *)(v7 - 248) = v43;
            *(_OWORD *)(v7 - 224) = v275;
            *(_OWORD *)(v7 - 208) = v279;
            *(_OWORD *)(v7 - 240) = v271;
            *(double *)(v7 - 192) = v44;
            *(_OWORD *)(v142 + 264) = v269;
            *(_OWORD *)(v142 + 248) = v267;
            *(_OWORD *)(v142 + 232) = v265;
            *(double *)(v7 - 136) = v45;
            *(_OWORD *)(v7 - 96) = v247;
            *(_OWORD *)(v7 - 80) = v251;
            *(_OWORD *)(v7 - 128) = v239;
            *(_OWORD *)(v7 - 112) = v243;
            *(_OWORD *)(v7 - 32) = v261;
            *(_OWORD *)(v7 - 16) = v263;
            *(_OWORD *)(v7 - 64) = v255;
            *(_OWORD *)(v7 - 48) = v259;
            a2 = v236;
            continue;
          }
          sub_20F2AD7C8((_DWORD *)v11, (double *)a1, v235);
          v238 = --a3;
          if ((a4 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v40 = *(double *)(a1 + 80);
          v41 = *(double *)(a1 + 136);
          v42 = *(double *)(a1 + 192);
          v43 = *(double *)(a1 + 248);
          v44 = *(double *)(a1 + 304);
          v45 = *(double *)(a1 + 360);
          v46 = v40 + v41 + v42 + v43 + v44 + v45;
LABEL_15:
          v49 = 0;
          v320 = *(_OWORD *)a1;
          v324 = *(_OWORD *)(a1 + 16);
          v332 = *(_OWORD *)(a1 + 48);
          v334 = *(_OWORD *)(a1 + 64);
          v328 = *(_OWORD *)(a1 + 32);
          v312 = *(_OWORD *)(a1 + 104);
          v316 = *(_OWORD *)(a1 + 120);
          v304 = *(_OWORD *)(a1 + 176);
          v308 = *(_OWORD *)(a1 + 88);
          v296 = *(_OWORD *)(a1 + 144);
          v300 = *(_OWORD *)(a1 + 160);
          v288 = *(_OWORD *)(a1 + 216);
          v292 = *(_OWORD *)(a1 + 232);
          v280 = *(_OWORD *)(a1 + 288);
          v284 = *(_OWORD *)(a1 + 200);
          v272 = *(_OWORD *)(a1 + 256);
          v276 = *(_OWORD *)(a1 + 272);
          v268 = *(_OWORD *)(a1 + 328);
          v270 = *(_OWORD *)(a1 + 344);
          v248 = *(_OWORD *)(a1 + 400);
          v252 = *(_OWORD *)(a1 + 416);
          v240 = *(_OWORD *)(a1 + 368);
          v244 = *(_OWORD *)(a1 + 384);
          v264 = *(_OWORD *)(a1 + 480);
          v266 = *(_OWORD *)(a1 + 312);
          v260 = *(_OWORD *)(a1 + 448);
          v262 = *(_OWORD *)(a1 + 464);
          v256 = *(_OWORD *)(a1 + 432);
          do
          {
            v50 = *(double *)(a1 + v49 + 576)
                + *(double *)(a1 + v49 + 632)
                + *(double *)(a1 + v49 + 688)
                + *(double *)(a1 + v49 + 744)
                + *(double *)(a1 + v49 + 800)
                + *(double *)(a1 + v49 + 856);
            v49 += 496;
          }
          while (v50 > v46);
          v51 = a1 + v49;
          v52 = v237;
          if (v49 == 496)
          {
            v55 = v237;
            while (1)
            {
              v54 = v55 + 24;
              if (v51 >= (unint64_t)(v55 + 24))
                break;
              v56 = *(v55 - 28) + *(v55 - 21) + *(v55 - 14) + *(v55 - 7) + *v55 + v55[7];
              v55 -= 62;
              if (v56 > v46)
              {
                v54 = v55 + 24;
                break;
              }
            }
          }
          else
          {
            do
            {
              v53 = *(v52 - 28) + *(v52 - 21) + *(v52 - 14) + *(v52 - 7) + *v52 + v52[7];
              v52 -= 62;
            }
            while (v53 <= v46);
            v54 = v52 + 24;
          }
          v7 = v51;
          if (v51 < (unint64_t)v54)
          {
            v57 = v54;
            do
            {
              __dst[0] = *(_OWORD *)v7;
              v58 = *(_QWORD *)v57;
              *(_DWORD *)(v7 + 8) = *((_DWORD *)v57 + 2);
              *(_QWORD *)v7 = v58;
              v59 = *(_QWORD *)&__dst[0];
              *((_DWORD *)v57 + 2) = DWORD2(__dst[0]);
              *(_QWORD *)v57 = v59;
              __dst[0] = *(_OWORD *)(v7 + 16);
              LODWORD(v59) = *((_DWORD *)v57 + 6);
              *(double *)(v7 + 16) = v57[2];
              *(_DWORD *)(v7 + 24) = v59;
              v57[2] = *(double *)__dst;
              *((_DWORD *)v57 + 6) = DWORD2(__dst[0]);
              v60 = *(_OWORD *)(v7 + 48);
              v61 = *(_OWORD *)(v7 + 32);
              __dst[2] = *(_OWORD *)(v7 + 64);
              v62 = *((_OWORD *)v57 + 2);
              v63 = *((_OWORD *)v57 + 4);
              *(_OWORD *)(v7 + 48) = *((_OWORD *)v57 + 3);
              *(_OWORD *)(v7 + 64) = v63;
              *(_OWORD *)(v7 + 32) = v62;
              v64 = __dst[2];
              *((_OWORD *)v57 + 2) = v61;
              *((_OWORD *)v57 + 3) = v60;
              *((_OWORD *)v57 + 4) = v64;
              memcpy(__dst, (const void *)(v7 + 80), sizeof(__dst));
              memcpy((void *)(v7 + 80), v57 + 10, 0x120uLL);
              memcpy(v57 + 10, __dst, 0x120uLL);
              v65 = *(_OWORD *)(v7 + 448);
              __dst[4] = *(_OWORD *)(v7 + 432);
              __dst[5] = v65;
              v66 = *(_OWORD *)(v7 + 480);
              __dst[6] = *(_OWORD *)(v7 + 464);
              __dst[7] = v66;
              v67 = *(_OWORD *)(v7 + 384);
              __dst[0] = *(_OWORD *)(v7 + 368);
              __dst[1] = v67;
              v68 = *(_OWORD *)(v7 + 416);
              __dst[2] = *(_OWORD *)(v7 + 400);
              __dst[3] = v68;
              v69 = *((_OWORD *)v57 + 23);
              v70 = *((_OWORD *)v57 + 24);
              v71 = *((_OWORD *)v57 + 26);
              *(_OWORD *)(v7 + 400) = *((_OWORD *)v57 + 25);
              *(_OWORD *)(v7 + 416) = v71;
              *(_OWORD *)(v7 + 368) = v69;
              *(_OWORD *)(v7 + 384) = v70;
              v72 = *((_OWORD *)v57 + 28);
              v74 = *((_OWORD *)v57 + 29);
              v73 = *((_OWORD *)v57 + 30);
              *(_OWORD *)(v7 + 432) = *((_OWORD *)v57 + 27);
              *(_OWORD *)(v7 + 448) = v72;
              *(_OWORD *)(v7 + 464) = v74;
              *(_OWORD *)(v7 + 480) = v73;
              v75 = __dst[5];
              *((_OWORD *)v57 + 27) = __dst[4];
              *((_OWORD *)v57 + 28) = v75;
              v76 = __dst[7];
              *((_OWORD *)v57 + 29) = __dst[6];
              *((_OWORD *)v57 + 30) = v76;
              v77 = __dst[1];
              *((_OWORD *)v57 + 23) = __dst[0];
              *((_OWORD *)v57 + 24) = v77;
              v78 = __dst[3];
              *((_OWORD *)v57 + 25) = __dst[2];
              *((_OWORD *)v57 + 26) = v78;
              do
              {
                v79 = *(double *)(v7 + 576);
                v80 = *(double *)(v7 + 632);
                v81 = *(double *)(v7 + 688);
                v82 = *(double *)(v7 + 744);
                v83 = *(double *)(v7 + 800);
                v84 = *(double *)(v7 + 856);
                v7 += 496;
              }
              while (v79 + v80 + v81 + v82 + v83 + v84 > v46);
              v85 = v57 - 24;
              do
              {
                v86 = *(v85 - 28) + *(v85 - 21) + *(v85 - 14) + *(v85 - 7) + *v85 + v85[7];
                v85 -= 62;
              }
              while (v86 <= v46);
              v57 = v85 + 24;
            }
            while (v7 < (unint64_t)(v85 + 24));
          }
          v87 = (uint64_t *)(v7 - 496);
          if (v7 - 496 != a1)
          {
            v88 = *v87;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 488);
            *(_QWORD *)a1 = v88;
            v89 = *(_QWORD *)(v7 - 480);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v7 - 472);
            *(_QWORD *)(a1 + 16) = v89;
            v90 = *(_OWORD *)(v7 - 464);
            v91 = *(_OWORD *)(v7 - 432);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 - 448);
            *(_OWORD *)(a1 + 64) = v91;
            *(_OWORD *)(a1 + 32) = v90;
            memcpy((void *)(a1 + 80), (const void *)(v7 - 416), 0x120uLL);
            v92 = *(_OWORD *)(v7 - 80);
            v94 = *(_OWORD *)(v7 - 128);
            v93 = *(_OWORD *)(v7 - 112);
            *(_OWORD *)(a1 + 400) = *(_OWORD *)(v7 - 96);
            *(_OWORD *)(a1 + 416) = v92;
            *(_OWORD *)(a1 + 368) = v94;
            *(_OWORD *)(a1 + 384) = v93;
            v95 = *(_OWORD *)(v7 - 16);
            v97 = *(_OWORD *)(v7 - 64);
            v96 = *(_OWORD *)(v7 - 48);
            *(_OWORD *)(a1 + 464) = *(_OWORD *)(v7 - 32);
            *(_OWORD *)(a1 + 480) = v95;
            *(_OWORD *)(a1 + 432) = v97;
            *(_OWORD *)(a1 + 448) = v96;
          }
          *(_DWORD *)(v7 - 488) = DWORD2(v320);
          *v87 = v320;
          *(_DWORD *)(v7 - 472) = DWORD2(v324);
          *(_QWORD *)(v7 - 480) = v324;
          *(double *)(v7 - 416) = v40;
          *(_OWORD *)(v7 - 448) = v332;
          *(_OWORD *)(v7 - 432) = v334;
          *(_OWORD *)(v7 - 464) = v328;
          *(_OWORD *)(v7 - 376) = v316;
          *(_OWORD *)(v7 - 392) = v312;
          *(_OWORD *)(v7 - 408) = v308;
          *(double *)(v7 - 360) = v41;
          *(_OWORD *)(v7 - 336) = v300;
          *(_OWORD *)(v7 - 320) = v304;
          *(_OWORD *)(v7 - 352) = v296;
          *(double *)(v7 - 304) = v42;
          *(_OWORD *)(v7 - 264) = v292;
          *(_OWORD *)(v7 - 280) = v288;
          *(_OWORD *)(v7 - 296) = v284;
          *(double *)(v7 - 248) = v43;
          *(_OWORD *)(v7 - 224) = v276;
          *(_OWORD *)(v7 - 208) = v280;
          *(_OWORD *)(v7 - 240) = v272;
          *(double *)(v7 - 192) = v44;
          *(_OWORD *)(v7 - 152) = v270;
          *(_OWORD *)(v7 - 168) = v268;
          *(_OWORD *)(v7 - 184) = v266;
          *(double *)(v7 - 136) = v45;
          *(_OWORD *)(v7 - 96) = v248;
          *(_OWORD *)(v7 - 80) = v252;
          *(_OWORD *)(v7 - 128) = v240;
          *(_OWORD *)(v7 - 112) = v244;
          *(_OWORD *)(v7 - 32) = v262;
          *(_OWORD *)(v7 - 16) = v264;
          *(_OWORD *)(v7 - 64) = v256;
          *(_OWORD *)(v7 - 48) = v260;
          a2 = v236;
          a3 = v238;
          if (v51 < (unint64_t)v54)
            goto LABEL_36;
          v98 = sub_20F2ADEC8((_DWORD *)a1, (char *)(v7 - 496));
          if (!sub_20F2ADEC8((_DWORD *)v7, v236))
          {
            if (v98)
              continue;
LABEL_36:
            sub_20F2AB3C0(a1, v7 - 496, v238, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (char *)(v7 - 496);
          if (v98)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((char *)v7 != a2)
          {
            v169 = (_OWORD *)(v7 + 496);
            if ((char *)(v7 + 496) != a2)
            {
              v170 = 0;
              v171 = v7;
              do
              {
                v179 = v169;
                v180 = *(double *)(v171 + 576);
                v181 = *(double *)(v171 + 632);
                v182 = *(double *)(v171 + 688);
                v183 = *(double *)(v171 + 744);
                v184 = *(double *)(v171 + 800);
                v185 = *(double *)(v171 + 856);
                v186 = v180 + v181 + v182 + v183 + v184 + v185;
                if (v186 > *(double *)(v171 + 80)
                          + *(double *)(v171 + 136)
                          + *(double *)(v171 + 192)
                          + *(double *)(v171 + 248)
                          + *(double *)(v171 + 304)
                          + *(double *)(v171 + 360))
                {
                  v241 = *v169;
                  v245 = v169[1];
                  v249 = *(_OWORD *)(v171 + 528);
                  v253 = *(_OWORD *)(v171 + 544);
                  v257 = *(_OWORD *)(v171 + 560);
                  v321 = *(_OWORD *)(v171 + 584);
                  v325 = *(_OWORD *)(v171 + 600);
                  v329 = *(_OWORD *)(v171 + 616);
                  v313 = *(_OWORD *)(v171 + 656);
                  v317 = *(_OWORD *)(v171 + 672);
                  v305 = *(_OWORD *)(v171 + 728);
                  v309 = *(_OWORD *)(v171 + 640);
                  v297 = *(_OWORD *)(v171 + 696);
                  v301 = *(_OWORD *)(v171 + 712);
                  v289 = *(_OWORD *)(v171 + 768);
                  v293 = *(_OWORD *)(v171 + 784);
                  v281 = *(_OWORD *)(v171 + 840);
                  v285 = *(_OWORD *)(v171 + 752);
                  v273 = *(_OWORD *)(v171 + 808);
                  v277 = *(_OWORD *)(v171 + 824);
                  v187 = *(_OWORD *)(v171 + 864);
                  v188 = *(_OWORD *)(v171 + 880);
                  v189 = *(_OWORD *)(v171 + 912);
                  __dst[2] = *(_OWORD *)(v171 + 896);
                  __dst[3] = v189;
                  __dst[0] = v187;
                  __dst[1] = v188;
                  v190 = *(_OWORD *)(v171 + 928);
                  v191 = *(_OWORD *)(v171 + 944);
                  v192 = *(_OWORD *)(v171 + 976);
                  __dst[6] = *(_OWORD *)(v171 + 960);
                  __dst[7] = v192;
                  v193 = v170;
                  __dst[4] = v190;
                  __dst[5] = v191;
                  do
                  {
                    v194 = v7 + v193;
                    *(_QWORD *)(v194 + 496) = *(_QWORD *)(v7 + v193);
                    *(_DWORD *)(v194 + 504) = *(_DWORD *)(v7 + v193 + 8);
                    *(_QWORD *)(v194 + 512) = *(_QWORD *)(v7 + v193 + 16);
                    *(_DWORD *)(v194 + 520) = *(_DWORD *)(v7 + v193 + 24);
                    v195 = *(_OWORD *)(v7 + v193 + 48);
                    *(_OWORD *)(v194 + 528) = *(_OWORD *)(v7 + v193 + 32);
                    *(_OWORD *)(v194 + 544) = v195;
                    *(_OWORD *)(v194 + 560) = *(_OWORD *)(v7 + v193 + 64);
                    memcpy((void *)(v7 + v193 + 576), (const void *)(v7 + v193 + 80), 0x120uLL);
                    v196 = *(_OWORD *)(v7 + v193 + 448);
                    *(_OWORD *)(v194 + 928) = *(_OWORD *)(v194 + 432);
                    *(_OWORD *)(v194 + 944) = v196;
                    v197 = *(_OWORD *)(v7 + v193 + 480);
                    *(_OWORD *)(v194 + 960) = *(_OWORD *)(v194 + 464);
                    *(_OWORD *)(v194 + 976) = v197;
                    v198 = *(_OWORD *)(v7 + v193 + 384);
                    *(_OWORD *)(v194 + 864) = *(_OWORD *)(v194 + 368);
                    *(_OWORD *)(v194 + 880) = v198;
                    v199 = *(_OWORD *)(v7 + v193 + 416);
                    *(_OWORD *)(v194 + 896) = *(_OWORD *)(v194 + 400);
                    *(_OWORD *)(v194 + 912) = v199;
                    if (!v193)
                    {
                      v172 = v7;
                      goto LABEL_66;
                    }
                    v193 -= 496;
                  }
                  while (v186 > *(double *)(v194 - 416)
                               + *(double *)(v194 - 360)
                               + *(double *)(v194 - 304)
                               + *(double *)(v194 - 248)
                               + *(double *)(v194 - 192)
                               + *(double *)(v194 - 136));
                  v172 = v7 + v193 + 496;
LABEL_66:
                  *(_DWORD *)(v172 + 8) = DWORD2(v241);
                  *(_QWORD *)v172 = v241;
                  *(_DWORD *)(v194 + 24) = DWORD2(v245);
                  *(_QWORD *)(v194 + 16) = v245;
                  *(_OWORD *)(v194 + 48) = v253;
                  *(_OWORD *)(v194 + 64) = v257;
                  *(_OWORD *)(v194 + 32) = v249;
                  *(double *)(v194 + 80) = v180;
                  *(_OWORD *)(v172 + 88) = v321;
                  *(_OWORD *)(v172 + 104) = v325;
                  *(_OWORD *)(v172 + 120) = v329;
                  *(double *)(v172 + 136) = v181;
                  *(_OWORD *)(v172 + 144) = v309;
                  *(_OWORD *)(v172 + 160) = v313;
                  *(_OWORD *)(v172 + 176) = v317;
                  *(double *)(v172 + 192) = v182;
                  *(_OWORD *)(v172 + 200) = v297;
                  *(_OWORD *)(v172 + 216) = v301;
                  *(_OWORD *)(v172 + 232) = v305;
                  *(double *)(v172 + 248) = v183;
                  *(_OWORD *)(v172 + 272) = v289;
                  *(_OWORD *)(v172 + 288) = v293;
                  *(_OWORD *)(v172 + 256) = v285;
                  *(double *)(v172 + 304) = v184;
                  *(_OWORD *)(v172 + 344) = v281;
                  *(_OWORD *)(v172 + 328) = v277;
                  *(_OWORD *)(v172 + 312) = v273;
                  *(double *)(v172 + 360) = v185;
                  v173 = __dst[0];
                  v174 = __dst[1];
                  v175 = __dst[3];
                  *(_OWORD *)(v194 + 400) = __dst[2];
                  *(_OWORD *)(v194 + 416) = v175;
                  *(_OWORD *)(v194 + 368) = v173;
                  *(_OWORD *)(v194 + 384) = v174;
                  v176 = __dst[4];
                  v177 = __dst[5];
                  v178 = __dst[7];
                  *(_OWORD *)(v194 + 464) = __dst[6];
                  *(_OWORD *)(v194 + 480) = v178;
                  *(_OWORD *)(v194 + 432) = v176;
                  *(_OWORD *)(v194 + 448) = v177;
                  a2 = v236;
                }
                v169 = v179 + 31;
                v170 += 496;
                v171 = (unint64_t)v179;
              }
              while (v179 + 31 != (_OWORD *)a2);
            }
          }
        }
        else if ((char *)v7 != a2)
        {
          v200 = (_OWORD *)(v7 + 496);
          if ((char *)(v7 + 496) != a2)
          {
            v201 = v7 - 416;
            do
            {
              v202 = v200;
              v203 = *(double *)(a1 + 576);
              v204 = *(double *)(a1 + 632);
              v205 = *(double *)(a1 + 688);
              v206 = *(double *)(a1 + 744);
              v207 = *(double *)(a1 + 800);
              v208 = *(double *)(a1 + 856);
              v209 = v203 + v204 + v205 + v206 + v207 + v208;
              if (v209 > *(double *)(a1 + 80)
                        + *(double *)(a1 + 136)
                        + *(double *)(a1 + 192)
                        + *(double *)(a1 + 248)
                        + *(double *)(a1 + 304)
                        + *(double *)(a1 + 360))
              {
                v242 = *v200;
                v246 = v200[1];
                v250 = *(_OWORD *)(a1 + 528);
                v254 = *(_OWORD *)(a1 + 544);
                v258 = *(_OWORD *)(a1 + 560);
                v322 = *(_OWORD *)(a1 + 584);
                v326 = *(_OWORD *)(a1 + 600);
                v330 = *(_OWORD *)(a1 + 616);
                v314 = *(_OWORD *)(a1 + 656);
                v318 = *(_OWORD *)(a1 + 672);
                v306 = *(_OWORD *)(a1 + 728);
                v310 = *(_OWORD *)(a1 + 640);
                v298 = *(_OWORD *)(a1 + 696);
                v302 = *(_OWORD *)(a1 + 712);
                v290 = *(_OWORD *)(a1 + 768);
                v294 = *(_OWORD *)(a1 + 784);
                v282 = *(_OWORD *)(a1 + 840);
                v286 = *(_OWORD *)(a1 + 752);
                v274 = *(_OWORD *)(a1 + 808);
                v278 = *(_OWORD *)(a1 + 824);
                v210 = *(_OWORD *)(a1 + 864);
                v211 = *(_OWORD *)(a1 + 880);
                v212 = *(_OWORD *)(a1 + 912);
                __dst[2] = *(_OWORD *)(a1 + 896);
                __dst[3] = v212;
                __dst[0] = v210;
                __dst[1] = v211;
                v213 = *(_OWORD *)(a1 + 928);
                v214 = *(_OWORD *)(a1 + 944);
                v215 = *(_OWORD *)(a1 + 976);
                __dst[6] = *(_OWORD *)(a1 + 960);
                __dst[7] = v215;
                v216 = v201;
                __dst[4] = v213;
                __dst[5] = v214;
                do
                {
                  *(_QWORD *)(v216 + 912) = *(_QWORD *)(v216 + 416);
                  *(_DWORD *)(v216 + 920) = *(_DWORD *)(v216 + 424);
                  *(_QWORD *)(v216 + 928) = *(_QWORD *)(v216 + 432);
                  *(_DWORD *)(v216 + 936) = *(_DWORD *)(v216 + 440);
                  v217 = *(_OWORD *)(v216 + 464);
                  *(_OWORD *)(v216 + 944) = *(_OWORD *)(v216 + 448);
                  *(_OWORD *)(v216 + 960) = v217;
                  *(_OWORD *)(v216 + 976) = *(_OWORD *)(v216 + 480);
                  memcpy((void *)(v216 + 992), (const void *)(v216 + 496), 0x120uLL);
                  v218 = *(_OWORD *)(v216 + 864);
                  *(_OWORD *)(v216 + 1344) = *(_OWORD *)(v216 + 848);
                  *(_OWORD *)(v216 + 1360) = v218;
                  v219 = *(_OWORD *)(v216 + 896);
                  *(_OWORD *)(v216 + 1376) = *(_OWORD *)(v216 + 880);
                  *(_OWORD *)(v216 + 1392) = v219;
                  v220 = *(_OWORD *)(v216 + 800);
                  *(_OWORD *)(v216 + 1280) = *(_OWORD *)(v216 + 784);
                  *(_OWORD *)(v216 + 1296) = v220;
                  v221 = *(_OWORD *)(v216 + 832);
                  *(_OWORD *)(v216 + 1312) = *(_OWORD *)(v216 + 816);
                  *(_OWORD *)(v216 + 1328) = v221;
                  v222 = *(double *)v216
                       + *(double *)(v216 + 56)
                       + *(double *)(v216 + 112)
                       + *(double *)(v216 + 168)
                       + *(double *)(v216 + 224)
                       + *(double *)(v216 + 280);
                  v216 -= 496;
                }
                while (v209 > v222);
                *(_DWORD *)(v216 + 920) = DWORD2(v242);
                *(_QWORD *)(v216 + 912) = v242;
                *(_DWORD *)(v216 + 936) = DWORD2(v246);
                *(_QWORD *)(v216 + 928) = v246;
                *(_OWORD *)(v216 + 960) = v254;
                *(_OWORD *)(v216 + 976) = v258;
                *(_OWORD *)(v216 + 944) = v250;
                *(double *)(v216 + 992) = v203;
                *(_OWORD *)(v216 + 1016) = v326;
                *(_OWORD *)(v216 + 1032) = v330;
                *(_OWORD *)(v216 + 1000) = v322;
                *(double *)(v216 + 1048) = v204;
                *(_OWORD *)(v216 + 1088) = v318;
                *(_OWORD *)(v216 + 1072) = v314;
                *(_OWORD *)(v216 + 1056) = v310;
                *(double *)(v216 + 1104) = v205;
                *(_OWORD *)(v216 + 1128) = v302;
                *(_OWORD *)(v216 + 1144) = v306;
                *(_OWORD *)(v216 + 1112) = v298;
                *(double *)(v216 + 1160) = v206;
                *(_OWORD *)(v216 + 1200) = v294;
                *(_OWORD *)(v216 + 1184) = v290;
                *(_OWORD *)(v216 + 1168) = v286;
                *(double *)(v216 + 1216) = v207;
                *(_OWORD *)(v216 + 1240) = v278;
                *(_OWORD *)(v216 + 1256) = v282;
                *(_OWORD *)(v216 + 1224) = v274;
                *(double *)(v216 + 1272) = v208;
                v223 = __dst[0];
                v224 = __dst[1];
                v225 = __dst[2];
                *(_OWORD *)(v216 + 1328) = __dst[3];
                *(_OWORD *)(v216 + 1312) = v225;
                *(_OWORD *)(v216 + 1296) = v224;
                *(_OWORD *)(v216 + 1280) = v223;
                v226 = __dst[4];
                v227 = __dst[5];
                v228 = __dst[6];
                *(_OWORD *)(v216 + 1392) = __dst[7];
                *(_OWORD *)(v216 + 1376) = v228;
                *(_OWORD *)(v216 + 1360) = v227;
                *(_OWORD *)(v216 + 1344) = v226;
              }
              v200 = v202 + 31;
              v201 += 496;
              a1 = (unint64_t)v202;
            }
            while (v202 + 31 != (_OWORD *)a2);
          }
        }
        return;
    }
  }
}

__n128 sub_20F2AC8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD __dst[18];
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  sub_20F2AE4A4(a1, a2, a3, a4);
  result.n128_f64[0] = *(double *)(a5 + 80)
                     + *(double *)(a5 + 136)
                     + *(double *)(a5 + 192)
                     + *(double *)(a5 + 248)
                     + *(double *)(a5 + 304)
                     + *(double *)(a5 + 360);
  if (result.n128_f64[0] > *(double *)(a4 + 80)
                          + *(double *)(a4 + 136)
                          + *(double *)(a4 + 192)
                          + *(double *)(a4 + 248)
                          + *(double *)(a4 + 304)
                          + *(double *)(a4 + 360))
  {
    __dst[0] = *(_OWORD *)a4;
    v11 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)(a4 + 8) = v11;
    *(_QWORD *)a5 = *(_QWORD *)&__dst[0];
    *(_DWORD *)(a5 + 8) = DWORD2(__dst[0]);
    __dst[0] = *(_OWORD *)(a4 + 16);
    v12 = *(_DWORD *)(a5 + 24);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_DWORD *)(a4 + 24) = v12;
    *(_QWORD *)(a5 + 16) = *(_QWORD *)&__dst[0];
    *(_DWORD *)(a5 + 24) = DWORD2(__dst[0]);
    v13 = *(_OWORD *)(a4 + 32);
    v14 = *(_OWORD *)(a4 + 48);
    v15 = *(_OWORD *)(a4 + 64);
    v17 = *(_OWORD *)(a5 + 48);
    v16 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 48) = v17;
    *(_OWORD *)(a4 + 64) = v16;
    *(_OWORD *)(a5 + 48) = v14;
    *(_OWORD *)(a5 + 64) = v15;
    *(_OWORD *)(a5 + 32) = v13;
    memcpy(__dst, (const void *)(a4 + 80), sizeof(__dst));
    memcpy((void *)(a4 + 80), (const void *)(a5 + 80), 0x120uLL);
    memcpy((void *)(a5 + 80), __dst, 0x120uLL);
    v18 = *(_OWORD *)(a4 + 448);
    __dst[4] = *(_OWORD *)(a4 + 432);
    __dst[5] = v18;
    v19 = *(_OWORD *)(a4 + 480);
    __dst[6] = *(_OWORD *)(a4 + 464);
    __dst[7] = v19;
    v20 = *(_OWORD *)(a4 + 384);
    __dst[0] = *(_OWORD *)(a4 + 368);
    __dst[1] = v20;
    v21 = *(_OWORD *)(a4 + 416);
    __dst[2] = *(_OWORD *)(a4 + 400);
    __dst[3] = v21;
    v22 = *(_OWORD *)(a5 + 368);
    v23 = *(_OWORD *)(a5 + 384);
    v24 = *(_OWORD *)(a5 + 416);
    *(_OWORD *)(a4 + 400) = *(_OWORD *)(a5 + 400);
    *(_OWORD *)(a4 + 416) = v24;
    *(_OWORD *)(a4 + 368) = v22;
    *(_OWORD *)(a4 + 384) = v23;
    v25 = *(_OWORD *)(a5 + 448);
    v27 = *(_OWORD *)(a5 + 464);
    v26 = *(_OWORD *)(a5 + 480);
    *(_OWORD *)(a4 + 432) = *(_OWORD *)(a5 + 432);
    *(_OWORD *)(a4 + 448) = v25;
    *(_OWORD *)(a4 + 464) = v27;
    *(_OWORD *)(a4 + 480) = v26;
    v28 = __dst[5];
    *(_OWORD *)(a5 + 432) = __dst[4];
    *(_OWORD *)(a5 + 448) = v28;
    result = (__n128)__dst[7];
    *(_OWORD *)(a5 + 464) = __dst[6];
    *(__n128 *)(a5 + 480) = result;
    v29 = __dst[1];
    *(_OWORD *)(a5 + 368) = __dst[0];
    *(_OWORD *)(a5 + 384) = v29;
    v30 = __dst[3];
    *(_OWORD *)(a5 + 400) = __dst[2];
    *(_OWORD *)(a5 + 416) = v30;
    result.n128_f64[0] = *(double *)(a3 + 80)
                       + *(double *)(a3 + 136)
                       + *(double *)(a3 + 192)
                       + *(double *)(a3 + 248)
                       + *(double *)(a3 + 304)
                       + *(double *)(a3 + 360);
    if (*(double *)(a4 + 80)
       + *(double *)(a4 + 136)
       + *(double *)(a4 + 192)
       + *(double *)(a4 + 248)
       + *(double *)(a4 + 304)
       + *(double *)(a4 + 360) > result.n128_f64[0])
    {
      __dst[0] = *(_OWORD *)a3;
      v31 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_DWORD *)(a3 + 8) = v31;
      *(_QWORD *)a4 = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a4 + 8) = DWORD2(__dst[0]);
      __dst[0] = *(_OWORD *)(a3 + 16);
      v32 = *(_DWORD *)(a4 + 24);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_DWORD *)(a3 + 24) = v32;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a4 + 24) = DWORD2(__dst[0]);
      v33 = *(_OWORD *)(a3 + 32);
      v34 = *(_OWORD *)(a3 + 48);
      v35 = *(_OWORD *)(a3 + 64);
      v37 = *(_OWORD *)(a4 + 48);
      v36 = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 48) = v37;
      *(_OWORD *)(a3 + 64) = v36;
      *(_OWORD *)(a4 + 48) = v34;
      *(_OWORD *)(a4 + 64) = v35;
      *(_OWORD *)(a4 + 32) = v33;
      memcpy(__dst, (const void *)(a3 + 80), sizeof(__dst));
      memcpy((void *)(a3 + 80), (const void *)(a4 + 80), 0x120uLL);
      memcpy((void *)(a4 + 80), __dst, 0x120uLL);
      v38 = *(_OWORD *)(a3 + 448);
      __dst[4] = *(_OWORD *)(a3 + 432);
      __dst[5] = v38;
      v39 = *(_OWORD *)(a3 + 480);
      __dst[6] = *(_OWORD *)(a3 + 464);
      __dst[7] = v39;
      v40 = *(_OWORD *)(a3 + 384);
      __dst[0] = *(_OWORD *)(a3 + 368);
      __dst[1] = v40;
      v41 = *(_OWORD *)(a3 + 416);
      __dst[2] = *(_OWORD *)(a3 + 400);
      __dst[3] = v41;
      v42 = *(_OWORD *)(a4 + 368);
      v43 = *(_OWORD *)(a4 + 384);
      v44 = *(_OWORD *)(a4 + 416);
      *(_OWORD *)(a3 + 400) = *(_OWORD *)(a4 + 400);
      *(_OWORD *)(a3 + 416) = v44;
      *(_OWORD *)(a3 + 368) = v42;
      *(_OWORD *)(a3 + 384) = v43;
      v45 = *(_OWORD *)(a4 + 448);
      v47 = *(_OWORD *)(a4 + 464);
      v46 = *(_OWORD *)(a4 + 480);
      *(_OWORD *)(a3 + 432) = *(_OWORD *)(a4 + 432);
      *(_OWORD *)(a3 + 448) = v45;
      *(_OWORD *)(a3 + 464) = v47;
      *(_OWORD *)(a3 + 480) = v46;
      v48 = __dst[7];
      *(_OWORD *)(a4 + 464) = __dst[6];
      *(_OWORD *)(a4 + 480) = v48;
      v49 = __dst[5];
      *(_OWORD *)(a4 + 432) = __dst[4];
      *(_OWORD *)(a4 + 448) = v49;
      v50 = __dst[3];
      *(_OWORD *)(a4 + 400) = __dst[2];
      *(_OWORD *)(a4 + 416) = v50;
      result = (__n128)__dst[1];
      *(_OWORD *)(a4 + 368) = __dst[0];
      *(__n128 *)(a4 + 384) = result;
      result.n128_f64[0] = *(double *)(a2 + 80)
                         + *(double *)(a2 + 136)
                         + *(double *)(a2 + 192)
                         + *(double *)(a2 + 248)
                         + *(double *)(a2 + 304)
                         + *(double *)(a2 + 360);
      if (*(double *)(a3 + 80)
         + *(double *)(a3 + 136)
         + *(double *)(a3 + 192)
         + *(double *)(a3 + 248)
         + *(double *)(a3 + 304)
         + *(double *)(a3 + 360) > result.n128_f64[0])
      {
        __dst[0] = *(_OWORD *)a2;
        v51 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = v51;
        *(_QWORD *)a3 = *(_QWORD *)&__dst[0];
        *(_DWORD *)(a3 + 8) = DWORD2(__dst[0]);
        __dst[0] = *(_OWORD *)(a2 + 16);
        v52 = *(_DWORD *)(a3 + 24);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_DWORD *)(a2 + 24) = v52;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[0];
        *(_DWORD *)(a3 + 24) = DWORD2(__dst[0]);
        v53 = *(_OWORD *)(a2 + 32);
        v54 = *(_OWORD *)(a2 + 48);
        v55 = *(_OWORD *)(a2 + 64);
        v57 = *(_OWORD *)(a3 + 48);
        v56 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 48) = v57;
        *(_OWORD *)(a2 + 64) = v56;
        *(_OWORD *)(a3 + 48) = v54;
        *(_OWORD *)(a3 + 64) = v55;
        *(_OWORD *)(a3 + 32) = v53;
        memcpy(__dst, (const void *)(a2 + 80), sizeof(__dst));
        memcpy((void *)(a2 + 80), (const void *)(a3 + 80), 0x120uLL);
        memcpy((void *)(a3 + 80), __dst, 0x120uLL);
        v58 = *(_OWORD *)(a2 + 448);
        __dst[4] = *(_OWORD *)(a2 + 432);
        __dst[5] = v58;
        v59 = *(_OWORD *)(a2 + 480);
        __dst[6] = *(_OWORD *)(a2 + 464);
        __dst[7] = v59;
        v60 = *(_OWORD *)(a2 + 384);
        __dst[0] = *(_OWORD *)(a2 + 368);
        __dst[1] = v60;
        v61 = *(_OWORD *)(a2 + 416);
        __dst[2] = *(_OWORD *)(a2 + 400);
        __dst[3] = v61;
        v62 = *(_OWORD *)(a3 + 368);
        v63 = *(_OWORD *)(a3 + 384);
        v64 = *(_OWORD *)(a3 + 416);
        *(_OWORD *)(a2 + 400) = *(_OWORD *)(a3 + 400);
        *(_OWORD *)(a2 + 416) = v64;
        *(_OWORD *)(a2 + 368) = v62;
        *(_OWORD *)(a2 + 384) = v63;
        v65 = *(_OWORD *)(a3 + 448);
        v67 = *(_OWORD *)(a3 + 464);
        v66 = *(_OWORD *)(a3 + 480);
        *(_OWORD *)(a2 + 432) = *(_OWORD *)(a3 + 432);
        *(_OWORD *)(a2 + 448) = v65;
        *(_OWORD *)(a2 + 464) = v67;
        *(_OWORD *)(a2 + 480) = v66;
        v68 = __dst[7];
        *(_OWORD *)(a3 + 464) = __dst[6];
        *(_OWORD *)(a3 + 480) = v68;
        v69 = __dst[5];
        *(_OWORD *)(a3 + 432) = __dst[4];
        *(_OWORD *)(a3 + 448) = v69;
        v70 = __dst[3];
        *(_OWORD *)(a3 + 400) = __dst[2];
        *(_OWORD *)(a3 + 416) = v70;
        result = (__n128)__dst[1];
        *(_OWORD *)(a3 + 368) = __dst[0];
        *(__n128 *)(a3 + 384) = result;
        result.n128_f64[0] = *(double *)(a1 + 80)
                           + *(double *)(a1 + 136)
                           + *(double *)(a1 + 192)
                           + *(double *)(a1 + 248)
                           + *(double *)(a1 + 304)
                           + *(double *)(a1 + 360);
        if (*(double *)(a2 + 80)
           + *(double *)(a2 + 136)
           + *(double *)(a2 + 192)
           + *(double *)(a2 + 248)
           + *(double *)(a2 + 304)
           + *(double *)(a2 + 360) > result.n128_f64[0])
        {
          __dst[0] = *(_OWORD *)a1;
          v71 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v71;
          *(_QWORD *)a2 = *(_QWORD *)&__dst[0];
          *(_DWORD *)(a2 + 8) = DWORD2(__dst[0]);
          __dst[0] = *(_OWORD *)(a1 + 16);
          v72 = *(_DWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 24) = v72;
          *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[0];
          *(_DWORD *)(a2 + 24) = DWORD2(__dst[0]);
          v73 = *(_OWORD *)(a1 + 32);
          v74 = *(_OWORD *)(a1 + 48);
          v75 = *(_OWORD *)(a1 + 64);
          v77 = *(_OWORD *)(a2 + 48);
          v76 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v77;
          *(_OWORD *)(a1 + 64) = v76;
          *(_OWORD *)(a2 + 48) = v74;
          *(_OWORD *)(a2 + 64) = v75;
          *(_OWORD *)(a2 + 32) = v73;
          memcpy(__dst, (const void *)(a1 + 80), sizeof(__dst));
          memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x120uLL);
          memcpy((void *)(a2 + 80), __dst, 0x120uLL);
          v78 = *(_OWORD *)(a1 + 448);
          __dst[4] = *(_OWORD *)(a1 + 432);
          __dst[5] = v78;
          v79 = *(_OWORD *)(a1 + 480);
          __dst[6] = *(_OWORD *)(a1 + 464);
          __dst[7] = v79;
          v80 = *(_OWORD *)(a1 + 384);
          __dst[0] = *(_OWORD *)(a1 + 368);
          __dst[1] = v80;
          v81 = *(_OWORD *)(a1 + 416);
          __dst[2] = *(_OWORD *)(a1 + 400);
          __dst[3] = v81;
          v82 = *(_OWORD *)(a2 + 368);
          v83 = *(_OWORD *)(a2 + 384);
          v84 = *(_OWORD *)(a2 + 416);
          *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
          *(_OWORD *)(a1 + 416) = v84;
          *(_OWORD *)(a1 + 368) = v82;
          *(_OWORD *)(a1 + 384) = v83;
          v85 = *(_OWORD *)(a2 + 448);
          v87 = *(_OWORD *)(a2 + 464);
          v86 = *(_OWORD *)(a2 + 480);
          *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
          *(_OWORD *)(a1 + 448) = v85;
          *(_OWORD *)(a1 + 464) = v87;
          *(_OWORD *)(a1 + 480) = v86;
          v88 = __dst[7];
          *(_OWORD *)(a2 + 464) = __dst[6];
          *(_OWORD *)(a2 + 480) = v88;
          v89 = __dst[5];
          *(_OWORD *)(a2 + 432) = __dst[4];
          *(_OWORD *)(a2 + 448) = v89;
          v90 = __dst[3];
          *(_OWORD *)(a2 + 400) = __dst[2];
          *(_OWORD *)(a2 + 416) = v90;
          result = (__n128)__dst[1];
          *(_OWORD *)(a2 + 368) = __dst[0];
          *(__n128 *)(a2 + 384) = result;
        }
      }
    }
  }
  return result;
}

char *sub_20F2ACF1C(char *result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  _OWORD *v12;
  _QWORD *v13;
  __int128 *v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  double *v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  double *v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  double *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  char *v148;
  char *v149;
  _BYTE __dst[368];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v148 = a2;
  if (result != a2)
  {
    v4 = result;
    v5 = a2 - result;
    v6 = (a2 - result) / 496;
    if (a2 - result >= 497)
    {
      v7 = (unint64_t)(v6 - 2) >> 1;
      v8 = v7 + 1;
      v9 = &result[496 * v7];
      do
      {
        result = sub_20F2AE964(v4, v6, v9);
        v9 -= 496;
        --v8;
      }
      while (v8);
    }
    v149 = v4;
    if (v148 != a3)
    {
      v10 = v148;
      v11 = v4 + 80;
      v12 = v4 + 32;
      v13 = v4 + 16;
      v14 = (__int128 *)(v4 + 368);
      do
      {
        if (*((double *)v10 + 10)
           + *((double *)v10 + 17)
           + *((double *)v10 + 24)
           + *((double *)v10 + 31)
           + *((double *)v10 + 38)
           + *((double *)v10 + 45) > *((double *)v4 + 10)
                                   + *((double *)v4 + 17)
                                   + *((double *)v4 + 24)
                                   + *((double *)v4 + 31)
                                   + *((double *)v4 + 38)
                                   + *((double *)v4 + 45))
        {
          *(_OWORD *)__dst = *(_OWORD *)v10;
          v15 = *((_DWORD *)v4 + 2);
          *(_QWORD *)v10 = *(_QWORD *)v4;
          *((_DWORD *)v10 + 2) = v15;
          *(_QWORD *)v4 = *(_QWORD *)__dst;
          *((_DWORD *)v4 + 2) = *(_DWORD *)&__dst[8];
          *(_OWORD *)__dst = *((_OWORD *)v10 + 1);
          v16 = *((_DWORD *)v4 + 6);
          *((_QWORD *)v10 + 2) = *v13;
          *((_DWORD *)v10 + 6) = v16;
          *v13 = *(_QWORD *)__dst;
          *((_DWORD *)v4 + 6) = *(_DWORD *)&__dst[8];
          v17 = *((_OWORD *)v10 + 2);
          v18 = *((_OWORD *)v10 + 3);
          v19 = *((_OWORD *)v10 + 4);
          v21 = *((_OWORD *)v4 + 3);
          v20 = *((_OWORD *)v4 + 4);
          *((_OWORD *)v10 + 2) = *v12;
          *((_OWORD *)v10 + 3) = v21;
          *((_OWORD *)v10 + 4) = v20;
          *((_OWORD *)v4 + 3) = v18;
          *((_OWORD *)v4 + 4) = v19;
          *v12 = v17;
          memcpy(__dst, v10 + 80, 0x120uLL);
          memcpy(v10 + 80, v11, 0x120uLL);
          memcpy(v11, __dst, 0x120uLL);
          v22 = *((_OWORD *)v10 + 28);
          *(_OWORD *)&__dst[64] = *((_OWORD *)v10 + 27);
          *(_OWORD *)&__dst[80] = v22;
          v23 = *((_OWORD *)v10 + 30);
          *(_OWORD *)&__dst[96] = *((_OWORD *)v10 + 29);
          *(_OWORD *)&__dst[112] = v23;
          v24 = *((_OWORD *)v10 + 24);
          *(_OWORD *)__dst = *((_OWORD *)v10 + 23);
          *(_OWORD *)&__dst[16] = v24;
          v25 = *((_OWORD *)v10 + 26);
          *(_OWORD *)&__dst[32] = *((_OWORD *)v10 + 25);
          *(_OWORD *)&__dst[48] = v25;
          v26 = *v14;
          v27 = *((_OWORD *)v4 + 24);
          v28 = *((_OWORD *)v4 + 26);
          *((_OWORD *)v10 + 25) = *((_OWORD *)v4 + 25);
          *((_OWORD *)v10 + 26) = v28;
          *((_OWORD *)v10 + 23) = v26;
          *((_OWORD *)v10 + 24) = v27;
          v29 = *((_OWORD *)v4 + 28);
          v31 = *((_OWORD *)v4 + 29);
          v30 = *((_OWORD *)v4 + 30);
          *((_OWORD *)v10 + 27) = *((_OWORD *)v4 + 27);
          *((_OWORD *)v10 + 28) = v29;
          *((_OWORD *)v10 + 29) = v31;
          *((_OWORD *)v10 + 30) = v30;
          v32 = *(_OWORD *)&__dst[112];
          *((_OWORD *)v4 + 29) = *(_OWORD *)&__dst[96];
          *((_OWORD *)v4 + 30) = v32;
          v33 = *(_OWORD *)&__dst[80];
          *((_OWORD *)v4 + 27) = *(_OWORD *)&__dst[64];
          *((_OWORD *)v4 + 28) = v33;
          v34 = *(_OWORD *)&__dst[48];
          *((_OWORD *)v4 + 25) = *(_OWORD *)&__dst[32];
          *((_OWORD *)v4 + 26) = v34;
          v35 = *(_OWORD *)&__dst[16];
          *v14 = *(_OWORD *)__dst;
          *((_OWORD *)v4 + 24) = v35;
          result = sub_20F2AE964(v4, v6, v4);
        }
        v10 += 496;
      }
      while (v10 != a3);
    }
    if (v5 >= 497)
    {
      v36 = v5 / 0x1F0uLL;
      do
      {
        v48 = v148;
        v49 = *((_OWORD *)v4 + 1);
        *(_OWORD *)__dst = *(_OWORD *)v4;
        *(_OWORD *)&__dst[16] = v49;
        v50 = *((_OWORD *)v149 + 3);
        *(_OWORD *)&__dst[32] = *((_OWORD *)v149 + 2);
        *(_OWORD *)&__dst[48] = v50;
        *(_OWORD *)&__dst[64] = *((_OWORD *)v149 + 4);
        memcpy(&__dst[80], v149 + 80, 0x120uLL);
        v51 = 0;
        v52 = *((_OWORD *)v149 + 28);
        v155 = *((_OWORD *)v149 + 27);
        v156 = v52;
        v53 = *((_OWORD *)v149 + 30);
        v157 = *((_OWORD *)v149 + 29);
        v158 = v53;
        v54 = *((_OWORD *)v149 + 24);
        v151 = *((_OWORD *)v149 + 23);
        v152 = v54;
        v55 = *((_OWORD *)v149 + 26);
        v56 = v4;
        v153 = *((_OWORD *)v149 + 25);
        v154 = v55;
        do
        {
          v68 = v56;
          v69 = v51 + 1;
          v56 += 496 * v51 + 496;
          v70 = 2 * v51;
          v51 = (2 * v51) | 1;
          v71 = v70 + 2;
          if (v71 < v36)
          {
            v72 = (double *)&v68[496 * v69];
            if (v72[10] + v72[17] + v72[24] + v72[31] + v72[38] + v72[45] > *((double *)v56 + 72)
                                                                           + *((double *)v56 + 79)
                                                                           + *((double *)v56 + 86)
                                                                           + *((double *)v56 + 93)
                                                                           + *((double *)v56 + 100)
                                                                           + *((double *)v56 + 107))
            {
              v56 += 496;
              v51 = v71;
            }
          }
          v57 = *(_QWORD *)v56;
          *((_DWORD *)v68 + 2) = *((_DWORD *)v56 + 2);
          *(_QWORD *)v68 = v57;
          v59 = v56 + 16;
          v58 = *((_QWORD *)v56 + 2);
          *((_DWORD *)v68 + 6) = *((_DWORD *)v56 + 6);
          *((_QWORD *)v68 + 2) = v58;
          v60 = *((_OWORD *)v56 + 2);
          v61 = *((_OWORD *)v56 + 4);
          *((_OWORD *)v68 + 3) = *((_OWORD *)v56 + 3);
          *((_OWORD *)v68 + 4) = v61;
          *((_OWORD *)v68 + 2) = v60;
          memcpy(v68 + 80, v56 + 80, 0x120uLL);
          v62 = *((_OWORD *)v56 + 26);
          v64 = *((_OWORD *)v56 + 23);
          v63 = *((_OWORD *)v56 + 24);
          *((_OWORD *)v68 + 25) = *((_OWORD *)v56 + 25);
          *((_OWORD *)v68 + 26) = v62;
          *((_OWORD *)v68 + 23) = v64;
          *((_OWORD *)v68 + 24) = v63;
          v65 = *((_OWORD *)v56 + 30);
          v67 = *((_OWORD *)v56 + 27);
          v66 = *((_OWORD *)v56 + 28);
          *((_OWORD *)v68 + 29) = *((_OWORD *)v56 + 29);
          *((_OWORD *)v68 + 30) = v65;
          *((_OWORD *)v68 + 27) = v67;
          *((_OWORD *)v68 + 28) = v66;
        }
        while (v51 <= (uint64_t)((unint64_t)(v36 - 2) >> 1));
        v73 = (__int128 *)(v56 + 32);
        v74 = (__int128 *)(v56 + 368);
        v148 -= 496;
        if (v56 == v48 - 496)
        {
          v37 = *(_QWORD *)__dst;
          *((_DWORD *)v56 + 2) = *(_DWORD *)&__dst[8];
          *(_QWORD *)v56 = v37;
          v38 = *(_QWORD *)&__dst[16];
          *((_DWORD *)v56 + 6) = *(_DWORD *)&__dst[24];
          *v59 = v38;
          v39 = *(_OWORD *)&__dst[32];
          v40 = *(_OWORD *)&__dst[64];
          *((_OWORD *)v56 + 3) = *(_OWORD *)&__dst[48];
          *((_OWORD *)v56 + 4) = v40;
          *v73 = v39;
          result = (char *)memcpy(v56 + 80, &__dst[80], 0x120uLL);
          v41 = v154;
          v43 = v151;
          v42 = v152;
          *((_OWORD *)v56 + 25) = v153;
          *((_OWORD *)v56 + 26) = v41;
          *v74 = v43;
          *((_OWORD *)v56 + 24) = v42;
          v44 = v158;
          v46 = v155;
          v45 = v156;
          *((_OWORD *)v56 + 29) = v157;
          *((_OWORD *)v56 + 30) = v44;
          *((_OWORD *)v56 + 27) = v46;
          *((_OWORD *)v56 + 28) = v45;
          v4 = v149;
        }
        else
        {
          v75 = *((_QWORD *)v48 - 62);
          *((_DWORD *)v56 + 2) = *((_DWORD *)v48 - 122);
          *(_QWORD *)v56 = v75;
          v76 = *((_QWORD *)v48 - 60);
          *((_DWORD *)v56 + 6) = *((_DWORD *)v48 - 118);
          *v59 = v76;
          v77 = *((_OWORD *)v48 - 29);
          v78 = *((_OWORD *)v48 - 27);
          *((_OWORD *)v56 + 3) = *((_OWORD *)v48 - 28);
          *((_OWORD *)v56 + 4) = v78;
          *v73 = v77;
          v79 = v48 - 496;
          memcpy(v56 + 80, v48 - 416, 0x120uLL);
          v80 = *((_OWORD *)v48 - 5);
          v82 = *((_OWORD *)v48 - 8);
          v81 = *((_OWORD *)v48 - 7);
          *((_OWORD *)v56 + 25) = *((_OWORD *)v48 - 6);
          *((_OWORD *)v56 + 26) = v80;
          *v74 = v82;
          *((_OWORD *)v56 + 24) = v81;
          v83 = *((_OWORD *)v48 - 1);
          v85 = *((_OWORD *)v48 - 4);
          v84 = *((_OWORD *)v48 - 3);
          *((_OWORD *)v56 + 29) = *((_OWORD *)v48 - 2);
          *((_OWORD *)v56 + 30) = v83;
          *((_OWORD *)v56 + 27) = v85;
          *((_OWORD *)v56 + 28) = v84;
          *((_DWORD *)v79 + 2) = *(_DWORD *)&__dst[8];
          *(_QWORD *)v79 = *(_QWORD *)__dst;
          *((_DWORD *)v79 + 6) = *(_DWORD *)&__dst[24];
          *((_QWORD *)v79 + 2) = *(_QWORD *)&__dst[16];
          v86 = *(_OWORD *)&__dst[48];
          *((_OWORD *)v79 + 2) = *(_OWORD *)&__dst[32];
          *((_OWORD *)v79 + 3) = v86;
          *((_OWORD *)v79 + 4) = *(_OWORD *)&__dst[64];
          result = (char *)memcpy(v48 - 416, &__dst[80], 0x120uLL);
          v87 = v156;
          *((_OWORD *)v48 - 4) = v155;
          *((_OWORD *)v48 - 3) = v87;
          v88 = v158;
          *((_OWORD *)v48 - 2) = v157;
          *((_OWORD *)v48 - 1) = v88;
          v89 = v152;
          *((_OWORD *)v48 - 8) = v151;
          *((_OWORD *)v48 - 7) = v89;
          v90 = v154;
          *((_OWORD *)v48 - 6) = v153;
          *((_OWORD *)v48 - 5) = v90;
          v4 = v149;
          v91 = v56 - v149 + 496;
          if (v91 >= 497)
          {
            v92 = (v91 / 0x1F0uLL - 2) >> 1;
            v93 = (double *)&v149[496 * v92];
            v94 = *((double *)v56 + 10);
            v95 = *((double *)v56 + 17);
            v96 = *((double *)v56 + 24);
            v97 = *((double *)v56 + 31);
            v98 = *((double *)v56 + 38);
            v99 = *((double *)v56 + 45);
            v100 = v94 + v95 + v96 + v97 + v98 + v99;
            if (v93[10] + v93[17] + v93[24] + v93[31] + v93[38] + v93[45] > v100)
            {
              v101 = *((_OWORD *)v56 + 1);
              v182 = *(_OWORD *)v56;
              v183 = v101;
              v102 = *v73;
              v103 = *((_OWORD *)v56 + 4);
              v185 = *((_OWORD *)v56 + 3);
              v186 = v103;
              v184 = v102;
              v104 = *(_OWORD *)(v56 + 88);
              v105 = *(_OWORD *)(v56 + 120);
              v180 = *(_OWORD *)(v56 + 104);
              v181 = v105;
              v179 = v104;
              v106 = *((_OWORD *)v56 + 9);
              v107 = *((_OWORD *)v56 + 11);
              v177 = *((_OWORD *)v56 + 10);
              v178 = v107;
              v176 = v106;
              v108 = *(_OWORD *)(v56 + 200);
              v109 = *(_OWORD *)(v56 + 232);
              v174 = *(_OWORD *)(v56 + 216);
              v175 = v109;
              v173 = v108;
              v110 = *((_OWORD *)v56 + 16);
              v111 = *((_OWORD *)v56 + 18);
              v171 = *((_OWORD *)v56 + 17);
              v172 = v111;
              v170 = v110;
              v112 = *(_OWORD *)(v56 + 312);
              v113 = *(_OWORD *)(v56 + 344);
              v168 = *(_OWORD *)(v56 + 328);
              v169 = v113;
              v167 = v112;
              v114 = *v74;
              v115 = *((_OWORD *)v56 + 24);
              v116 = *((_OWORD *)v56 + 26);
              v161 = *((_OWORD *)v56 + 25);
              v162 = v116;
              v159 = v114;
              v160 = v115;
              v117 = *((_OWORD *)v56 + 27);
              v118 = *((_OWORD *)v56 + 28);
              v119 = *((_OWORD *)v56 + 30);
              v165 = *((_OWORD *)v56 + 29);
              v166 = v119;
              v163 = v117;
              v164 = v118;
              do
              {
                v120 = v56;
                v56 = &v149[496 * v92];
                v121 = *(_QWORD *)v56;
                *((_DWORD *)v120 + 2) = *((_DWORD *)v56 + 2);
                *(_QWORD *)v120 = v121;
                v122 = *((_QWORD *)v56 + 2);
                *((_DWORD *)v120 + 6) = *((_DWORD *)v56 + 6);
                *((_QWORD *)v120 + 2) = v122;
                v123 = *((_OWORD *)v56 + 2);
                v124 = *((_OWORD *)v56 + 4);
                *((_OWORD *)v120 + 3) = *((_OWORD *)v56 + 3);
                *((_OWORD *)v120 + 4) = v124;
                *((_OWORD *)v120 + 2) = v123;
                result = (char *)memcpy(v120 + 80, v56 + 80, 0x120uLL);
                v125 = *((_OWORD *)v56 + 26);
                v127 = *((_OWORD *)v56 + 23);
                v126 = *((_OWORD *)v56 + 24);
                *((_OWORD *)v120 + 25) = *((_OWORD *)v56 + 25);
                *((_OWORD *)v120 + 26) = v125;
                *((_OWORD *)v120 + 23) = v127;
                *((_OWORD *)v120 + 24) = v126;
                v128 = *((_OWORD *)v56 + 30);
                v130 = *((_OWORD *)v56 + 27);
                v129 = *((_OWORD *)v56 + 28);
                *((_OWORD *)v120 + 29) = *((_OWORD *)v56 + 29);
                *((_OWORD *)v120 + 30) = v128;
                *((_OWORD *)v120 + 27) = v130;
                *((_OWORD *)v120 + 28) = v129;
                if (!v92)
                  break;
                v92 = (v92 - 1) >> 1;
                v131 = (double *)&v149[496 * v92];
              }
              while (v131[10] + v131[17] + v131[24] + v131[31] + v131[38] + v131[45] > v100);
              *(_QWORD *)v56 = v182;
              *((_DWORD *)v56 + 2) = DWORD2(v182);
              *((_QWORD *)v56 + 2) = v183;
              *((_DWORD *)v56 + 6) = DWORD2(v183);
              v132 = v185;
              *((_OWORD *)v56 + 2) = v184;
              *((_OWORD *)v56 + 3) = v132;
              *((_OWORD *)v56 + 4) = v186;
              *((double *)v56 + 10) = v94;
              v133 = v179;
              v134 = v180;
              *(_OWORD *)(v56 + 120) = v181;
              *(_OWORD *)(v56 + 104) = v134;
              *(_OWORD *)(v56 + 88) = v133;
              *((double *)v56 + 17) = v95;
              v135 = v178;
              v136 = v176;
              *((_OWORD *)v56 + 10) = v177;
              *((_OWORD *)v56 + 11) = v135;
              *((_OWORD *)v56 + 9) = v136;
              *((double *)v56 + 24) = v96;
              *(_OWORD *)(v56 + 232) = v175;
              v137 = v173;
              *(_OWORD *)(v56 + 216) = v174;
              *(_OWORD *)(v56 + 200) = v137;
              *((double *)v56 + 31) = v97;
              v138 = v170;
              v139 = v172;
              *((_OWORD *)v56 + 17) = v171;
              *((_OWORD *)v56 + 18) = v139;
              *((_OWORD *)v56 + 16) = v138;
              *((double *)v56 + 38) = v98;
              v140 = v167;
              v141 = v168;
              *(_OWORD *)(v56 + 344) = v169;
              *(_OWORD *)(v56 + 328) = v141;
              *(_OWORD *)(v56 + 312) = v140;
              *((double *)v56 + 45) = v99;
              v142 = v159;
              v143 = v160;
              v144 = v162;
              *((_OWORD *)v56 + 25) = v161;
              *((_OWORD *)v56 + 26) = v144;
              *((_OWORD *)v56 + 23) = v142;
              *((_OWORD *)v56 + 24) = v143;
              v145 = v163;
              v146 = v164;
              v147 = v166;
              *((_OWORD *)v56 + 29) = v165;
              *((_OWORD *)v56 + 30) = v147;
              *((_OWORD *)v56 + 27) = v145;
              *((_OWORD *)v56 + 28) = v146;
            }
          }
        }
      }
      while (v36-- > 2);
    }
  }
  return result;
}

double sub_20F2AD7C8(_DWORD *__src, double *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  __int128 v8;
  void *v9;
  double v10;
  _OWORD *v11;
  __int128 *v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  char *v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _OWORD __dst[18];
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)(a2 + 10);
  v7 = (char *)(__src + 20);
  *(double *)&v8 = a2[10] + a2[17] + a2[24] + a2[31] + a2[38] + a2[45];
  v9 = (void *)(a3 + 80);
  v10 = *(double *)(a3 + 80)
      + *(double *)(a3 + 136)
      + *(double *)(a3 + 192)
      + *(double *)(a3 + 248)
      + *(double *)(a3 + 304)
      + *(double *)(a3 + 360);
  if (*(double *)&v8 <= *((double *)__src + 10)
                       + *((double *)__src + 17)
                       + *((double *)__src + 24)
                       + *((double *)__src + 31)
                       + *((double *)__src + 38)
                       + *((double *)__src + 45))
  {
    if (v10 > *(double *)&v8)
    {
      __dst[0] = *(_OWORD *)a2;
      v33 = *(_DWORD *)(a3 + 8);
      *a2 = *(double *)a3;
      *((_DWORD *)a2 + 2) = v33;
      *(_QWORD *)a3 = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a3 + 8) = DWORD2(__dst[0]);
      __dst[0] = *((_OWORD *)a2 + 1);
      v34 = *(_DWORD *)(a3 + 24);
      a2[2] = *(double *)(a3 + 16);
      *((_DWORD *)a2 + 6) = v34;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a3 + 24) = DWORD2(__dst[0]);
      v35 = *((_OWORD *)a2 + 2);
      v36 = *((_OWORD *)a2 + 3);
      v37 = *((_OWORD *)a2 + 4);
      v39 = *(_OWORD *)(a3 + 48);
      v38 = *(_OWORD *)(a3 + 64);
      *((_OWORD *)a2 + 2) = *(_OWORD *)(a3 + 32);
      *((_OWORD *)a2 + 3) = v39;
      *((_OWORD *)a2 + 4) = v38;
      *(_OWORD *)(a3 + 48) = v36;
      *(_OWORD *)(a3 + 64) = v37;
      *(_OWORD *)(a3 + 32) = v35;
      memcpy(__dst, a2 + 10, sizeof(__dst));
      memcpy(v6, v9, 0x120uLL);
      memcpy(v9, __dst, 0x120uLL);
      v40 = *((_OWORD *)a2 + 28);
      __dst[4] = *((_OWORD *)a2 + 27);
      __dst[5] = v40;
      v41 = *((_OWORD *)a2 + 30);
      __dst[6] = *((_OWORD *)a2 + 29);
      __dst[7] = v41;
      v42 = *((_OWORD *)a2 + 24);
      __dst[0] = *((_OWORD *)a2 + 23);
      __dst[1] = v42;
      v43 = *((_OWORD *)a2 + 26);
      __dst[2] = *((_OWORD *)a2 + 25);
      __dst[3] = v43;
      v44 = *(_OWORD *)(a3 + 368);
      v45 = *(_OWORD *)(a3 + 384);
      v46 = *(_OWORD *)(a3 + 416);
      *((_OWORD *)a2 + 25) = *(_OWORD *)(a3 + 400);
      *((_OWORD *)a2 + 26) = v46;
      *((_OWORD *)a2 + 23) = v44;
      *((_OWORD *)a2 + 24) = v45;
      v47 = *(_OWORD *)(a3 + 448);
      v49 = *(_OWORD *)(a3 + 464);
      v48 = *(_OWORD *)(a3 + 480);
      *((_OWORD *)a2 + 27) = *(_OWORD *)(a3 + 432);
      *((_OWORD *)a2 + 28) = v47;
      *((_OWORD *)a2 + 29) = v49;
      *((_OWORD *)a2 + 30) = v48;
      v50 = __dst[5];
      *(_OWORD *)(a3 + 432) = __dst[4];
      *(_OWORD *)(a3 + 448) = v50;
      v8 = __dst[7];
      *(_OWORD *)(a3 + 464) = __dst[6];
      *(_OWORD *)(a3 + 480) = v8;
      v51 = __dst[1];
      *(_OWORD *)(a3 + 368) = __dst[0];
      *(_OWORD *)(a3 + 384) = v51;
      v52 = __dst[3];
      *(_OWORD *)(a3 + 400) = __dst[2];
      *(_OWORD *)(a3 + 416) = v52;
      *(double *)&v8 = a2[10] + a2[17] + a2[24] + a2[31] + a2[38] + a2[45];
      if (*(double *)&v8 > *((double *)__src + 10)
                          + *((double *)__src + 17)
                          + *((double *)__src + 24)
                          + *((double *)__src + 31)
                          + *((double *)__src + 38)
                          + *((double *)__src + 45))
      {
        __dst[0] = *(_OWORD *)__src;
        v53 = *((_DWORD *)a2 + 2);
        *(double *)__src = *a2;
        __src[2] = v53;
        *a2 = *(double *)__dst;
        *((_DWORD *)a2 + 2) = DWORD2(__dst[0]);
        __dst[0] = *((_OWORD *)__src + 1);
        v54 = *((_DWORD *)a2 + 6);
        *((double *)__src + 2) = a2[2];
        __src[6] = v54;
        a2[2] = *(double *)__dst;
        *((_DWORD *)a2 + 6) = DWORD2(__dst[0]);
        v55 = *((_OWORD *)__src + 2);
        v56 = *((_OWORD *)__src + 3);
        v57 = *((_OWORD *)__src + 4);
        v59 = *((_OWORD *)a2 + 3);
        v58 = *((_OWORD *)a2 + 4);
        *((_OWORD *)__src + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)__src + 3) = v59;
        *((_OWORD *)__src + 4) = v58;
        *((_OWORD *)a2 + 3) = v56;
        *((_OWORD *)a2 + 4) = v57;
        *((_OWORD *)a2 + 2) = v55;
        memcpy(__dst, v7, sizeof(__dst));
        memcpy(v7, v6, 0x120uLL);
        memcpy(v6, __dst, 0x120uLL);
        v60 = *((_OWORD *)__src + 28);
        __dst[4] = *((_OWORD *)__src + 27);
        __dst[5] = v60;
        v61 = *((_OWORD *)__src + 30);
        __dst[6] = *((_OWORD *)__src + 29);
        __dst[7] = v61;
        v62 = *((_OWORD *)__src + 24);
        __dst[0] = *((_OWORD *)__src + 23);
        __dst[1] = v62;
        v63 = *((_OWORD *)__src + 26);
        __dst[2] = *((_OWORD *)__src + 25);
        __dst[3] = v63;
        v64 = *((_OWORD *)a2 + 23);
        v65 = *((_OWORD *)a2 + 24);
        v66 = *((_OWORD *)a2 + 26);
        *((_OWORD *)__src + 25) = *((_OWORD *)a2 + 25);
        *((_OWORD *)__src + 26) = v66;
        *((_OWORD *)__src + 23) = v64;
        *((_OWORD *)__src + 24) = v65;
        v67 = *((_OWORD *)a2 + 28);
        v69 = *((_OWORD *)a2 + 29);
        v68 = *((_OWORD *)a2 + 30);
        *((_OWORD *)__src + 27) = *((_OWORD *)a2 + 27);
        *((_OWORD *)__src + 28) = v67;
        *((_OWORD *)__src + 29) = v69;
        *((_OWORD *)__src + 30) = v68;
        v70 = __dst[7];
        *((_OWORD *)a2 + 29) = __dst[6];
        *((_OWORD *)a2 + 30) = v70;
        v71 = __dst[5];
        *((_OWORD *)a2 + 27) = __dst[4];
        *((_OWORD *)a2 + 28) = v71;
        v72 = __dst[3];
        *((_OWORD *)a2 + 25) = __dst[2];
        *((_OWORD *)a2 + 26) = v72;
        v8 = __dst[1];
        *((_OWORD *)a2 + 23) = __dst[0];
        *((_OWORD *)a2 + 24) = v8;
      }
    }
  }
  else
  {
    v11 = __src + 4;
    v12 = (__int128 *)(__src + 8);
    if (v10 <= *(double *)&v8)
    {
      __dst[0] = *(_OWORD *)__src;
      v73 = *((_DWORD *)a2 + 2);
      *(double *)__src = *a2;
      __src[2] = v73;
      *a2 = *(double *)__dst;
      *((_DWORD *)a2 + 2) = DWORD2(__dst[0]);
      v75 = (char *)(a2 + 2);
      v74 = *((_QWORD *)a2 + 2);
      __dst[0] = *v11;
      v76 = *((_DWORD *)a2 + 6);
      *(_QWORD *)v11 = v74;
      __src[6] = v76;
      a2[2] = *(double *)__dst;
      *((_DWORD *)a2 + 6) = DWORD2(__dst[0]);
      v77 = *v12;
      v78 = *((_OWORD *)__src + 3);
      v79 = *((_OWORD *)__src + 4);
      v81 = *((_OWORD *)a2 + 3);
      v80 = *((_OWORD *)a2 + 4);
      *v12 = *((_OWORD *)a2 + 2);
      *((_OWORD *)__src + 3) = v81;
      *((_OWORD *)__src + 4) = v80;
      *((_OWORD *)a2 + 3) = v78;
      *((_OWORD *)a2 + 4) = v79;
      *((_OWORD *)a2 + 2) = v77;
      memcpy(__dst, v7, sizeof(__dst));
      memcpy(v7, v6, 0x120uLL);
      memcpy(v6, __dst, 0x120uLL);
      v82 = *((_OWORD *)__src + 28);
      __dst[4] = *((_OWORD *)__src + 27);
      __dst[5] = v82;
      v83 = *((_OWORD *)__src + 30);
      __dst[6] = *((_OWORD *)__src + 29);
      __dst[7] = v83;
      v84 = *((_OWORD *)__src + 24);
      __dst[0] = *((_OWORD *)__src + 23);
      __dst[1] = v84;
      v85 = *((_OWORD *)__src + 26);
      __dst[2] = *((_OWORD *)__src + 25);
      __dst[3] = v85;
      v86 = *((_OWORD *)a2 + 23);
      v87 = *((_OWORD *)a2 + 24);
      v88 = *((_OWORD *)a2 + 26);
      *((_OWORD *)__src + 25) = *((_OWORD *)a2 + 25);
      *((_OWORD *)__src + 26) = v88;
      *((_OWORD *)__src + 23) = v86;
      *((_OWORD *)__src + 24) = v87;
      v89 = *((_OWORD *)a2 + 28);
      v91 = *((_OWORD *)a2 + 29);
      v90 = *((_OWORD *)a2 + 30);
      *((_OWORD *)__src + 27) = *((_OWORD *)a2 + 27);
      *((_OWORD *)__src + 28) = v89;
      *((_OWORD *)__src + 29) = v91;
      *((_OWORD *)__src + 30) = v90;
      v92 = __dst[5];
      *((_OWORD *)a2 + 27) = __dst[4];
      *((_OWORD *)a2 + 28) = v92;
      v8 = __dst[7];
      *((_OWORD *)a2 + 29) = __dst[6];
      *((_OWORD *)a2 + 30) = v8;
      v93 = __dst[1];
      *((_OWORD *)a2 + 23) = __dst[0];
      *((_OWORD *)a2 + 24) = v93;
      v94 = __dst[3];
      *((_OWORD *)a2 + 25) = __dst[2];
      *((_OWORD *)a2 + 26) = v94;
      *(double *)&v8 = *(double *)(a3 + 80)
                     + *(double *)(a3 + 136)
                     + *(double *)(a3 + 192)
                     + *(double *)(a3 + 248)
                     + *(double *)(a3 + 304)
                     + *(double *)(a3 + 360);
      if (*(double *)&v8 > *((double *)v75 + 8)
                          + *((double *)v75 + 15)
                          + *((double *)v75 + 22)
                          + *((double *)v75 + 29)
                          + *((double *)v75 + 36)
                          + *((double *)v75 + 43))
      {
        __dst[0] = *(_OWORD *)a2;
        v95 = *(_DWORD *)(a3 + 8);
        *a2 = *(double *)a3;
        *((_DWORD *)a2 + 2) = v95;
        *(_QWORD *)a3 = *(_QWORD *)&__dst[0];
        *(_DWORD *)(a3 + 8) = DWORD2(__dst[0]);
        __dst[0] = *(_OWORD *)v75;
        v96 = *(_DWORD *)(a3 + 24);
        *(_QWORD *)v75 = *(_QWORD *)(a3 + 16);
        *((_DWORD *)a2 + 6) = v96;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[0];
        *(_DWORD *)(a3 + 24) = DWORD2(__dst[0]);
        v97 = *((_OWORD *)a2 + 2);
        v98 = *((_OWORD *)a2 + 3);
        v99 = *((_OWORD *)a2 + 4);
        v101 = *(_OWORD *)(a3 + 48);
        v100 = *(_OWORD *)(a3 + 64);
        *((_OWORD *)a2 + 2) = *(_OWORD *)(a3 + 32);
        *((_OWORD *)a2 + 3) = v101;
        *((_OWORD *)a2 + 4) = v100;
        *(_OWORD *)(a3 + 48) = v98;
        *(_OWORD *)(a3 + 64) = v99;
        *(_OWORD *)(a3 + 32) = v97;
        memcpy(__dst, v6, sizeof(__dst));
        memcpy(v6, v9, 0x120uLL);
        memcpy(v9, __dst, 0x120uLL);
        v102 = *((_OWORD *)v75 + 27);
        __dst[4] = *((_OWORD *)v75 + 26);
        __dst[5] = v102;
        v103 = *((_OWORD *)v75 + 29);
        __dst[6] = *((_OWORD *)v75 + 28);
        __dst[7] = v103;
        v104 = *((_OWORD *)v75 + 23);
        __dst[0] = *((_OWORD *)a2 + 23);
        __dst[1] = v104;
        v105 = *((_OWORD *)v75 + 25);
        __dst[2] = *((_OWORD *)v75 + 24);
        __dst[3] = v105;
        v106 = *(_OWORD *)(a3 + 432);
        v107 = *(_OWORD *)(a3 + 448);
        v108 = *(_OWORD *)(a3 + 480);
        *((_OWORD *)v75 + 28) = *(_OWORD *)(a3 + 464);
        *((_OWORD *)v75 + 29) = v108;
        *((_OWORD *)v75 + 26) = v106;
        *((_OWORD *)v75 + 27) = v107;
        v109 = *(_OWORD *)(a3 + 368);
        v110 = *(_OWORD *)(a3 + 384);
        v111 = *(_OWORD *)(a3 + 416);
        *((_OWORD *)v75 + 24) = *(_OWORD *)(a3 + 400);
        *((_OWORD *)v75 + 25) = v111;
        *((_OWORD *)a2 + 23) = v109;
        *((_OWORD *)v75 + 23) = v110;
        v112 = __dst[3];
        *(_OWORD *)(a3 + 400) = __dst[2];
        *(_OWORD *)(a3 + 416) = v112;
        v113 = __dst[1];
        *(_OWORD *)(a3 + 368) = __dst[0];
        *(_OWORD *)(a3 + 384) = v113;
        v8 = __dst[5];
        *(_OWORD *)(a3 + 432) = __dst[4];
        *(_OWORD *)(a3 + 448) = v8;
        *(_QWORD *)&v8 = *(_QWORD *)&__dst[6];
        v114 = __dst[7];
        *(_OWORD *)(a3 + 464) = __dst[6];
        *(_OWORD *)(a3 + 480) = v114;
      }
    }
    else
    {
      __dst[0] = *(_OWORD *)__src;
      v13 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)__src = *(_QWORD *)a3;
      __src[2] = v13;
      *(_QWORD *)a3 = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a3 + 8) = DWORD2(__dst[0]);
      __dst[0] = *v11;
      v14 = *(_DWORD *)(a3 + 24);
      *(_QWORD *)v11 = *(_QWORD *)(a3 + 16);
      __src[6] = v14;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a3 + 24) = DWORD2(__dst[0]);
      v15 = *v12;
      v16 = *((_OWORD *)__src + 3);
      v17 = *((_OWORD *)__src + 4);
      v19 = *(_OWORD *)(a3 + 48);
      v18 = *(_OWORD *)(a3 + 64);
      *v12 = *(_OWORD *)(a3 + 32);
      *((_OWORD *)__src + 3) = v19;
      *((_OWORD *)__src + 4) = v18;
      *(_OWORD *)(a3 + 48) = v16;
      *(_OWORD *)(a3 + 64) = v17;
      *(_OWORD *)(a3 + 32) = v15;
      memcpy(__dst, v7, sizeof(__dst));
      memcpy(v7, v9, 0x120uLL);
      memcpy(v9, __dst, 0x120uLL);
      v20 = *((_OWORD *)__src + 28);
      __dst[4] = *((_OWORD *)__src + 27);
      __dst[5] = v20;
      v21 = *((_OWORD *)__src + 30);
      __dst[6] = *((_OWORD *)__src + 29);
      __dst[7] = v21;
      v22 = *((_OWORD *)__src + 24);
      __dst[0] = *((_OWORD *)__src + 23);
      __dst[1] = v22;
      v23 = *((_OWORD *)__src + 26);
      __dst[2] = *((_OWORD *)__src + 25);
      __dst[3] = v23;
      v24 = *(_OWORD *)(a3 + 368);
      v25 = *(_OWORD *)(a3 + 384);
      v26 = *(_OWORD *)(a3 + 416);
      *((_OWORD *)__src + 25) = *(_OWORD *)(a3 + 400);
      *((_OWORD *)__src + 26) = v26;
      *((_OWORD *)__src + 23) = v24;
      *((_OWORD *)__src + 24) = v25;
      v27 = *(_OWORD *)(a3 + 448);
      v29 = *(_OWORD *)(a3 + 464);
      v28 = *(_OWORD *)(a3 + 480);
      *((_OWORD *)__src + 27) = *(_OWORD *)(a3 + 432);
      *((_OWORD *)__src + 28) = v27;
      *((_OWORD *)__src + 29) = v29;
      *((_OWORD *)__src + 30) = v28;
      v30 = __dst[5];
      *(_OWORD *)(a3 + 432) = __dst[4];
      *(_OWORD *)(a3 + 448) = v30;
      v8 = __dst[7];
      *(_OWORD *)(a3 + 464) = __dst[6];
      *(_OWORD *)(a3 + 480) = v8;
      v31 = __dst[1];
      *(_OWORD *)(a3 + 368) = __dst[0];
      *(_OWORD *)(a3 + 384) = v31;
      *(_QWORD *)&v8 = *(_QWORD *)&__dst[2];
      v32 = __dst[3];
      *(_OWORD *)(a3 + 400) = __dst[2];
      *(_OWORD *)(a3 + 416) = v32;
    }
  }
  return *(double *)&v8;
}

BOOL sub_20F2ADEC8(_DWORD *__src, char *a2)
{
  unint64_t v4;
  _BOOL8 result;
  char *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double *v28;
  char *v29;
  uint64_t v30;
  int v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD __dst[18];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((a2 - (char *)__src) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 496;
      if (*((double *)a2 - 52)
         + *((double *)a2 - 45)
         + *((double *)a2 - 38)
         + *((double *)a2 - 31)
         + *((double *)a2 - 24)
         + *((double *)a2 - 17) > *((double *)__src + 10)
                                + *((double *)__src + 17)
                                + *((double *)__src + 24)
                                + *((double *)__src + 31)
                                + *((double *)__src + 38)
                                + *((double *)__src + 45))
      {
        __dst[0] = *(_OWORD *)__src;
        v7 = *((_DWORD *)a2 - 122);
        *(_QWORD *)__src = *(_QWORD *)v6;
        __src[2] = v7;
        *(_QWORD *)v6 = *(_QWORD *)&__dst[0];
        *((_DWORD *)a2 - 122) = DWORD2(__dst[0]);
        __dst[0] = *((_OWORD *)__src + 1);
        v8 = *((_DWORD *)a2 - 118);
        *((_QWORD *)__src + 2) = *((_QWORD *)a2 - 60);
        __src[6] = v8;
        *((_QWORD *)a2 - 60) = *(_QWORD *)&__dst[0];
        *((_DWORD *)a2 - 118) = DWORD2(__dst[0]);
        v9 = *((_OWORD *)__src + 2);
        v10 = *((_OWORD *)__src + 3);
        v11 = *((_OWORD *)__src + 4);
        v13 = *((_OWORD *)a2 - 28);
        v12 = *((_OWORD *)a2 - 27);
        *((_OWORD *)__src + 2) = *((_OWORD *)a2 - 29);
        *((_OWORD *)__src + 3) = v13;
        *((_OWORD *)__src + 4) = v12;
        *((_OWORD *)a2 - 28) = v10;
        *((_OWORD *)a2 - 27) = v11;
        *((_OWORD *)a2 - 29) = v9;
        memcpy(__dst, __src + 20, sizeof(__dst));
        memcpy(__src + 20, a2 - 416, 0x120uLL);
        memcpy(a2 - 416, __dst, 0x120uLL);
        v14 = *((_OWORD *)__src + 28);
        __dst[4] = *((_OWORD *)__src + 27);
        __dst[5] = v14;
        v15 = *((_OWORD *)__src + 30);
        __dst[6] = *((_OWORD *)__src + 29);
        __dst[7] = v15;
        v16 = *((_OWORD *)__src + 24);
        __dst[0] = *((_OWORD *)__src + 23);
        __dst[1] = v16;
        v17 = *((_OWORD *)__src + 26);
        __dst[2] = *((_OWORD *)__src + 25);
        __dst[3] = v17;
        v18 = *((_OWORD *)a2 - 8);
        v19 = *((_OWORD *)a2 - 7);
        v20 = *((_OWORD *)a2 - 5);
        *((_OWORD *)__src + 25) = *((_OWORD *)a2 - 6);
        *((_OWORD *)__src + 26) = v20;
        *((_OWORD *)__src + 23) = v18;
        *((_OWORD *)__src + 24) = v19;
        v21 = *((_OWORD *)a2 - 3);
        v23 = *((_OWORD *)a2 - 2);
        v22 = *((_OWORD *)a2 - 1);
        *((_OWORD *)__src + 27) = *((_OWORD *)a2 - 4);
        *((_OWORD *)__src + 28) = v21;
        *((_OWORD *)__src + 29) = v23;
        *((_OWORD *)__src + 30) = v22;
        v24 = __dst[5];
        *((_OWORD *)a2 - 4) = __dst[4];
        *((_OWORD *)a2 - 3) = v24;
        v25 = __dst[7];
        *((_OWORD *)a2 - 2) = __dst[6];
        *((_OWORD *)a2 - 1) = v25;
        v26 = __dst[1];
        *((_OWORD *)a2 - 8) = __dst[0];
        *((_OWORD *)a2 - 7) = v26;
        v27 = __dst[3];
        result = 1;
        *((_OWORD *)a2 - 6) = __dst[2];
        *((_OWORD *)a2 - 5) = v27;
      }
      return result;
    case 3uLL:
      sub_20F2AD7C8(__src, (double *)__src + 62, (uint64_t)(a2 - 496));
      return 1;
    case 4uLL:
      sub_20F2AE4A4((uint64_t)__src, (uint64_t)(__src + 124), (uint64_t)(__src + 248), (uint64_t)(a2 - 496));
      return 1;
    case 5uLL:
      sub_20F2AC8E8((uint64_t)__src, (uint64_t)(__src + 124), (uint64_t)(__src + 248), (uint64_t)(__src + 372), (uint64_t)(a2 - 496));
      return 1;
    default:
      v28 = (double *)(__src + 248);
      sub_20F2AD7C8(__src, (double *)__src + 62, (uint64_t)(__src + 248));
      v29 = (char *)(__src + 372);
      if (__src + 372 == (_DWORD *)a2)
        return 1;
      v30 = 0;
      v31 = 0;
      break;
  }
  while (1)
  {
    v37 = *((double *)v29 + 10);
    v38 = *((double *)v29 + 17);
    v39 = *((double *)v29 + 24);
    v40 = *((double *)v29 + 31);
    v41 = *((double *)v29 + 38);
    v42 = *((double *)v29 + 45);
    v43 = v37 + v38 + v39 + v40 + v41 + v42;
    if (v43 > v28[10] + v28[17] + v28[24] + v28[31] + v28[38] + v28[45])
    {
      v67 = *(_OWORD *)v29;
      v68 = *((_OWORD *)v29 + 1);
      v69 = *((_OWORD *)v29 + 2);
      v70 = *((_OWORD *)v29 + 3);
      v71 = *((_OWORD *)v29 + 4);
      v65 = *(_OWORD *)(v29 + 104);
      v66 = *(_OWORD *)(v29 + 120);
      v63 = *((_OWORD *)v29 + 11);
      v64 = *(_OWORD *)(v29 + 88);
      v61 = *((_OWORD *)v29 + 9);
      v62 = *((_OWORD *)v29 + 10);
      v59 = *(_OWORD *)(v29 + 216);
      v60 = *(_OWORD *)(v29 + 232);
      v57 = *((_OWORD *)v29 + 18);
      v58 = *(_OWORD *)(v29 + 200);
      v55 = *((_OWORD *)v29 + 16);
      v56 = *((_OWORD *)v29 + 17);
      v53 = *(_OWORD *)(v29 + 328);
      v54 = *(_OWORD *)(v29 + 344);
      v52 = *(_OWORD *)(v29 + 312);
      v44 = *((_OWORD *)v29 + 23);
      v45 = *((_OWORD *)v29 + 24);
      v46 = *((_OWORD *)v29 + 26);
      __dst[2] = *((_OWORD *)v29 + 25);
      __dst[3] = v46;
      __dst[0] = v44;
      __dst[1] = v45;
      v47 = *((_OWORD *)v29 + 27);
      v48 = *((_OWORD *)v29 + 28);
      v49 = *((_OWORD *)v29 + 30);
      __dst[6] = *((_OWORD *)v29 + 29);
      __dst[7] = v49;
      v50 = v30;
      __dst[4] = v47;
      __dst[5] = v48;
      do
      {
        v51 = (char *)__src + v50;
        *((_QWORD *)v51 + 186) = *(_QWORD *)((char *)__src + v50 + 992);
        *((_DWORD *)v51 + 374) = *(_DWORD *)((char *)__src + v50 + 1000);
        *((_QWORD *)v51 + 188) = *(_QWORD *)((char *)__src + v50 + 1008);
        *((_DWORD *)v51 + 378) = *(_DWORD *)((char *)__src + v50 + 1016);
        *((_OWORD *)v51 + 95) = *(_OWORD *)((char *)__src + v50 + 1024);
        *((_OWORD *)v51 + 96) = *(_OWORD *)((char *)__src + v50 + 1040);
        *((_OWORD *)v51 + 97) = *(_OWORD *)((char *)__src + v50 + 1056);
        memcpy((char *)__src + v50 + 1568, (char *)__src + v50 + 1072, 0x120uLL);
        *((_OWORD *)v51 + 120) = *((_OWORD *)v51 + 89);
        *((_OWORD *)v51 + 121) = *((_OWORD *)v51 + 90);
        *((_OWORD *)v51 + 122) = *((_OWORD *)v51 + 91);
        *((_OWORD *)v51 + 123) = *((_OWORD *)v51 + 92);
        *((_OWORD *)v51 + 116) = *((_OWORD *)v51 + 85);
        *((_OWORD *)v51 + 117) = *((_OWORD *)v51 + 86);
        *((_OWORD *)v51 + 118) = *((_OWORD *)v51 + 87);
        *((_OWORD *)v51 + 119) = *((_OWORD *)v51 + 88);
        if (v50 == -992)
        {
          v32 = (char *)__src;
          goto LABEL_7;
        }
        v50 -= 496;
      }
      while (v43 > *((double *)v51 + 72)
                  + *((double *)v51 + 79)
                  + *((double *)v51 + 86)
                  + *((double *)v51 + 93)
                  + *((double *)v51 + 100)
                  + *((double *)v51 + 107));
      v32 = (char *)__src + v50 + 1488;
LABEL_7:
      *((_DWORD *)v32 + 2) = DWORD2(v67);
      *(_QWORD *)v32 = v67;
      *((_OWORD *)v51 + 64) = v69;
      *((_DWORD *)v51 + 254) = DWORD2(v68);
      *((_QWORD *)v51 + 126) = v68;
      *((_OWORD *)v51 + 65) = v70;
      *((_OWORD *)v51 + 66) = v71;
      *((double *)v51 + 134) = v37;
      *(_OWORD *)(v32 + 120) = v66;
      *(_OWORD *)(v32 + 104) = v65;
      *(_OWORD *)(v32 + 88) = v64;
      *((double *)v32 + 17) = v38;
      *((_OWORD *)v32 + 9) = v61;
      *((_OWORD *)v32 + 10) = v62;
      *((_OWORD *)v32 + 11) = v63;
      *((double *)v32 + 24) = v39;
      *(_OWORD *)(v32 + 232) = v60;
      *(_OWORD *)(v32 + 216) = v59;
      *(_OWORD *)(v32 + 200) = v58;
      *((double *)v32 + 31) = v40;
      *((_OWORD *)v32 + 17) = v56;
      *((_OWORD *)v32 + 18) = v57;
      *((_OWORD *)v32 + 16) = v55;
      *((double *)v32 + 38) = v41;
      *(_OWORD *)(v32 + 344) = v54;
      *(_OWORD *)(v32 + 328) = v53;
      *(_OWORD *)(v32 + 312) = v52;
      *((double *)v32 + 45) = v42;
      v33 = __dst[5];
      *((_OWORD *)v51 + 89) = __dst[4];
      *((_OWORD *)v51 + 90) = v33;
      v34 = __dst[7];
      *((_OWORD *)v51 + 91) = __dst[6];
      *((_OWORD *)v51 + 92) = v34;
      v35 = __dst[1];
      *((_OWORD *)v51 + 85) = __dst[0];
      *((_OWORD *)v51 + 86) = v35;
      v36 = __dst[3];
      *((_OWORD *)v51 + 87) = __dst[2];
      ++v31;
      *((_OWORD *)v51 + 88) = v36;
      if (v31 == 8)
        return v29 + 496 == a2;
    }
    v28 = (double *)v29;
    v30 += 496;
    v29 += 496;
    if (v29 == a2)
      return 1;
  }
}

__n128 sub_20F2AE4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD __dst[18];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  sub_20F2AD7C8((_DWORD *)a1, (double *)a2, a3);
  result.n128_f64[0] = *(double *)(a4 + 80)
                     + *(double *)(a4 + 136)
                     + *(double *)(a4 + 192)
                     + *(double *)(a4 + 248)
                     + *(double *)(a4 + 304)
                     + *(double *)(a4 + 360);
  if (result.n128_f64[0] > *(double *)(a3 + 80)
                          + *(double *)(a3 + 136)
                          + *(double *)(a3 + 192)
                          + *(double *)(a3 + 248)
                          + *(double *)(a3 + 304)
                          + *(double *)(a3 + 360))
  {
    __dst[0] = *(_OWORD *)a3;
    v9 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v9;
    *(_QWORD *)a4 = *(_QWORD *)&__dst[0];
    *(_DWORD *)(a4 + 8) = DWORD2(__dst[0]);
    __dst[0] = *(_OWORD *)(a3 + 16);
    v10 = *(_DWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_DWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[0];
    *(_DWORD *)(a4 + 24) = DWORD2(__dst[0]);
    v11 = *(_OWORD *)(a3 + 32);
    v12 = *(_OWORD *)(a3 + 48);
    v13 = *(_OWORD *)(a3 + 64);
    v15 = *(_OWORD *)(a4 + 48);
    v14 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = v15;
    *(_OWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a4 + 48) = v12;
    *(_OWORD *)(a4 + 64) = v13;
    *(_OWORD *)(a4 + 32) = v11;
    memcpy(__dst, (const void *)(a3 + 80), sizeof(__dst));
    memcpy((void *)(a3 + 80), (const void *)(a4 + 80), 0x120uLL);
    memcpy((void *)(a4 + 80), __dst, 0x120uLL);
    v16 = *(_OWORD *)(a3 + 448);
    __dst[4] = *(_OWORD *)(a3 + 432);
    __dst[5] = v16;
    v17 = *(_OWORD *)(a3 + 480);
    __dst[6] = *(_OWORD *)(a3 + 464);
    __dst[7] = v17;
    v18 = *(_OWORD *)(a3 + 384);
    __dst[0] = *(_OWORD *)(a3 + 368);
    __dst[1] = v18;
    v19 = *(_OWORD *)(a3 + 416);
    __dst[2] = *(_OWORD *)(a3 + 400);
    __dst[3] = v19;
    v20 = *(_OWORD *)(a4 + 368);
    v21 = *(_OWORD *)(a4 + 384);
    v22 = *(_OWORD *)(a4 + 416);
    *(_OWORD *)(a3 + 400) = *(_OWORD *)(a4 + 400);
    *(_OWORD *)(a3 + 416) = v22;
    *(_OWORD *)(a3 + 368) = v20;
    *(_OWORD *)(a3 + 384) = v21;
    v23 = *(_OWORD *)(a4 + 448);
    v25 = *(_OWORD *)(a4 + 464);
    v24 = *(_OWORD *)(a4 + 480);
    *(_OWORD *)(a3 + 432) = *(_OWORD *)(a4 + 432);
    *(_OWORD *)(a3 + 448) = v23;
    *(_OWORD *)(a3 + 464) = v25;
    *(_OWORD *)(a3 + 480) = v24;
    v26 = __dst[5];
    *(_OWORD *)(a4 + 432) = __dst[4];
    *(_OWORD *)(a4 + 448) = v26;
    result = (__n128)__dst[7];
    *(_OWORD *)(a4 + 464) = __dst[6];
    *(__n128 *)(a4 + 480) = result;
    v27 = __dst[1];
    *(_OWORD *)(a4 + 368) = __dst[0];
    *(_OWORD *)(a4 + 384) = v27;
    v28 = __dst[3];
    *(_OWORD *)(a4 + 400) = __dst[2];
    *(_OWORD *)(a4 + 416) = v28;
    result.n128_f64[0] = *(double *)(a2 + 80)
                       + *(double *)(a2 + 136)
                       + *(double *)(a2 + 192)
                       + *(double *)(a2 + 248)
                       + *(double *)(a2 + 304)
                       + *(double *)(a2 + 360);
    if (*(double *)(a3 + 80)
       + *(double *)(a3 + 136)
       + *(double *)(a3 + 192)
       + *(double *)(a3 + 248)
       + *(double *)(a3 + 304)
       + *(double *)(a3 + 360) > result.n128_f64[0])
    {
      __dst[0] = *(_OWORD *)a2;
      v29 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v29;
      *(_QWORD *)a3 = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a3 + 8) = DWORD2(__dst[0]);
      __dst[0] = *(_OWORD *)(a2 + 16);
      v30 = *(_DWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 24) = v30;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[0];
      *(_DWORD *)(a3 + 24) = DWORD2(__dst[0]);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = *(_OWORD *)(a2 + 48);
      v33 = *(_OWORD *)(a2 + 64);
      v35 = *(_OWORD *)(a3 + 48);
      v34 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = v35;
      *(_OWORD *)(a2 + 64) = v34;
      *(_OWORD *)(a3 + 48) = v32;
      *(_OWORD *)(a3 + 64) = v33;
      *(_OWORD *)(a3 + 32) = v31;
      memcpy(__dst, (const void *)(a2 + 80), sizeof(__dst));
      memcpy((void *)(a2 + 80), (const void *)(a3 + 80), 0x120uLL);
      memcpy((void *)(a3 + 80), __dst, 0x120uLL);
      v36 = *(_OWORD *)(a2 + 448);
      __dst[4] = *(_OWORD *)(a2 + 432);
      __dst[5] = v36;
      v37 = *(_OWORD *)(a2 + 480);
      __dst[6] = *(_OWORD *)(a2 + 464);
      __dst[7] = v37;
      v38 = *(_OWORD *)(a2 + 384);
      __dst[0] = *(_OWORD *)(a2 + 368);
      __dst[1] = v38;
      v39 = *(_OWORD *)(a2 + 416);
      __dst[2] = *(_OWORD *)(a2 + 400);
      __dst[3] = v39;
      v40 = *(_OWORD *)(a3 + 368);
      v41 = *(_OWORD *)(a3 + 384);
      v42 = *(_OWORD *)(a3 + 416);
      *(_OWORD *)(a2 + 400) = *(_OWORD *)(a3 + 400);
      *(_OWORD *)(a2 + 416) = v42;
      *(_OWORD *)(a2 + 368) = v40;
      *(_OWORD *)(a2 + 384) = v41;
      v43 = *(_OWORD *)(a3 + 448);
      v45 = *(_OWORD *)(a3 + 464);
      v44 = *(_OWORD *)(a3 + 480);
      *(_OWORD *)(a2 + 432) = *(_OWORD *)(a3 + 432);
      *(_OWORD *)(a2 + 448) = v43;
      *(_OWORD *)(a2 + 464) = v45;
      *(_OWORD *)(a2 + 480) = v44;
      v46 = __dst[7];
      *(_OWORD *)(a3 + 464) = __dst[6];
      *(_OWORD *)(a3 + 480) = v46;
      v47 = __dst[5];
      *(_OWORD *)(a3 + 432) = __dst[4];
      *(_OWORD *)(a3 + 448) = v47;
      v48 = __dst[3];
      *(_OWORD *)(a3 + 400) = __dst[2];
      *(_OWORD *)(a3 + 416) = v48;
      result = (__n128)__dst[1];
      *(_OWORD *)(a3 + 368) = __dst[0];
      *(__n128 *)(a3 + 384) = result;
      result.n128_f64[0] = *(double *)(a1 + 80)
                         + *(double *)(a1 + 136)
                         + *(double *)(a1 + 192)
                         + *(double *)(a1 + 248)
                         + *(double *)(a1 + 304)
                         + *(double *)(a1 + 360);
      if (*(double *)(a2 + 80)
         + *(double *)(a2 + 136)
         + *(double *)(a2 + 192)
         + *(double *)(a2 + 248)
         + *(double *)(a2 + 304)
         + *(double *)(a2 + 360) > result.n128_f64[0])
      {
        __dst[0] = *(_OWORD *)a1;
        v49 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v49;
        *(_QWORD *)a2 = *(_QWORD *)&__dst[0];
        *(_DWORD *)(a2 + 8) = DWORD2(__dst[0]);
        __dst[0] = *(_OWORD *)(a1 + 16);
        v50 = *(_DWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 24) = v50;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[0];
        *(_DWORD *)(a2 + 24) = DWORD2(__dst[0]);
        v51 = *(_OWORD *)(a1 + 32);
        v52 = *(_OWORD *)(a1 + 48);
        v53 = *(_OWORD *)(a1 + 64);
        v55 = *(_OWORD *)(a2 + 48);
        v54 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v55;
        *(_OWORD *)(a1 + 64) = v54;
        *(_OWORD *)(a2 + 48) = v52;
        *(_OWORD *)(a2 + 64) = v53;
        *(_OWORD *)(a2 + 32) = v51;
        memcpy(__dst, (const void *)(a1 + 80), sizeof(__dst));
        memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x120uLL);
        memcpy((void *)(a2 + 80), __dst, 0x120uLL);
        v56 = *(_OWORD *)(a1 + 448);
        __dst[4] = *(_OWORD *)(a1 + 432);
        __dst[5] = v56;
        v57 = *(_OWORD *)(a1 + 480);
        __dst[6] = *(_OWORD *)(a1 + 464);
        __dst[7] = v57;
        v58 = *(_OWORD *)(a1 + 384);
        __dst[0] = *(_OWORD *)(a1 + 368);
        __dst[1] = v58;
        v59 = *(_OWORD *)(a1 + 416);
        __dst[2] = *(_OWORD *)(a1 + 400);
        __dst[3] = v59;
        v60 = *(_OWORD *)(a2 + 368);
        v61 = *(_OWORD *)(a2 + 384);
        v62 = *(_OWORD *)(a2 + 416);
        *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
        *(_OWORD *)(a1 + 416) = v62;
        *(_OWORD *)(a1 + 368) = v60;
        *(_OWORD *)(a1 + 384) = v61;
        v63 = *(_OWORD *)(a2 + 448);
        v65 = *(_OWORD *)(a2 + 464);
        v64 = *(_OWORD *)(a2 + 480);
        *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
        *(_OWORD *)(a1 + 448) = v63;
        *(_OWORD *)(a1 + 464) = v65;
        *(_OWORD *)(a1 + 480) = v64;
        v66 = __dst[7];
        *(_OWORD *)(a2 + 464) = __dst[6];
        *(_OWORD *)(a2 + 480) = v66;
        v67 = __dst[5];
        *(_OWORD *)(a2 + 432) = __dst[4];
        *(_OWORD *)(a2 + 448) = v67;
        v68 = __dst[3];
        *(_OWORD *)(a2 + 400) = __dst[2];
        *(_OWORD *)(a2 + 416) = v68;
        result = (__n128)__dst[1];
        *(_OWORD *)(a2 + 368) = __dst[0];
        *(__n128 *)(a2 + 384) = result;
      }
    }
  }
  return result;
}

char *sub_20F2AE964(char *result, uint64_t a2, char *a3)
{
  unint64_t v3;
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v8;
  char *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  double *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v5 = result;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((a3 - result) >> 4)))
    {
      v8 = (0xDEF7BDEF7BDEF7BELL * ((a3 - result) >> 4)) | 1;
      v9 = &result[496 * v8];
      if ((uint64_t)(0xDEF7BDEF7BDEF7BELL * ((a3 - result) >> 4) + 2) < a2)
      {
        v10 = (double *)&result[496 * v8];
        if (v10[10] + v10[17] + v10[24] + v10[31] + v10[38] + v10[45] > *((double *)v9 + 72)
                                                                       + *((double *)v9 + 79)
                                                                       + *((double *)v9 + 86)
                                                                       + *((double *)v9 + 93)
                                                                       + *((double *)v9 + 100)
                                                                       + *((double *)v9 + 107))
        {
          v9 += 496;
          v8 = 0xDEF7BDEF7BDEF7BELL * ((a3 - result) >> 4) + 2;
        }
      }
      v11 = *((double *)a3 + 10);
      v12 = *((double *)a3 + 17);
      v13 = *((double *)a3 + 24);
      v14 = *((double *)a3 + 31);
      v15 = *((double *)a3 + 38);
      v16 = *((double *)a3 + 45);
      v17 = v11 + v12 + v13 + v14 + v15 + v16;
      if (*((double *)v9 + 10)
         + *((double *)v9 + 17)
         + *((double *)v9 + 24)
         + *((double *)v9 + 31)
         + *((double *)v9 + 38)
         + *((double *)v9 + 45) <= v17)
      {
        v56 = *(_OWORD *)a3;
        v57 = *((_OWORD *)a3 + 1);
        v58 = *((_OWORD *)a3 + 2);
        v59 = *((_OWORD *)a3 + 3);
        v60 = *((_OWORD *)a3 + 4);
        v54 = *(_OWORD *)(a3 + 104);
        v55 = *(_OWORD *)(a3 + 120);
        v52 = *((_OWORD *)a3 + 11);
        v53 = *(_OWORD *)(a3 + 88);
        v50 = *((_OWORD *)a3 + 9);
        v51 = *((_OWORD *)a3 + 10);
        v48 = *(_OWORD *)(a3 + 216);
        v49 = *(_OWORD *)(a3 + 232);
        v46 = *((_OWORD *)a3 + 18);
        v47 = *(_OWORD *)(a3 + 200);
        v44 = *((_OWORD *)a3 + 16);
        v45 = *((_OWORD *)a3 + 17);
        v42 = *(_OWORD *)(a3 + 328);
        v43 = *(_OWORD *)(a3 + 344);
        v35 = *((_OWORD *)a3 + 25);
        v36 = *((_OWORD *)a3 + 26);
        v33 = *((_OWORD *)a3 + 23);
        v34 = *((_OWORD *)a3 + 24);
        v40 = *((_OWORD *)a3 + 30);
        v41 = *(_OWORD *)(a3 + 312);
        v38 = *((_OWORD *)a3 + 28);
        v39 = *((_OWORD *)a3 + 29);
        v37 = *((_OWORD *)a3 + 27);
        do
        {
          v18 = v4;
          v4 = v9;
          v19 = *(_QWORD *)v9;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v4 + 2);
          *(_QWORD *)v18 = v19;
          v21 = v4 + 16;
          v20 = *((_QWORD *)v4 + 2);
          *((_DWORD *)v18 + 6) = *((_DWORD *)v4 + 6);
          *((_QWORD *)v18 + 2) = v20;
          v22 = *((_OWORD *)v4 + 2);
          v23 = *((_OWORD *)v4 + 4);
          *((_OWORD *)v18 + 3) = *((_OWORD *)v4 + 3);
          *((_OWORD *)v18 + 4) = v23;
          *((_OWORD *)v18 + 2) = v22;
          result = (char *)memcpy(v18 + 80, v4 + 80, 0x120uLL);
          v24 = *((_OWORD *)v4 + 26);
          v26 = *((_OWORD *)v4 + 23);
          v25 = *((_OWORD *)v4 + 24);
          *((_OWORD *)v18 + 25) = *((_OWORD *)v4 + 25);
          *((_OWORD *)v18 + 26) = v24;
          *((_OWORD *)v18 + 23) = v26;
          *((_OWORD *)v18 + 24) = v25;
          v27 = *((_OWORD *)v4 + 30);
          v29 = *((_OWORD *)v4 + 27);
          v28 = *((_OWORD *)v4 + 28);
          *((_OWORD *)v18 + 29) = *((_OWORD *)v4 + 29);
          *((_OWORD *)v18 + 30) = v27;
          *((_OWORD *)v18 + 27) = v29;
          *((_OWORD *)v18 + 28) = v28;
          if (v6 < v8)
            break;
          v30 = (2 * v8) | 1;
          v9 = &v5[496 * v30];
          if (2 * v8 + 2 < a2)
          {
            v31 = (double *)&v5[496 * v30];
            if (v31[10] + v31[17] + v31[24] + v31[31] + v31[38] + v31[45] > *((double *)v9 + 72)
                                                                           + *((double *)v9 + 79)
                                                                           + *((double *)v9 + 86)
                                                                           + *((double *)v9 + 93)
                                                                           + *((double *)v9 + 100)
                                                                           + *((double *)v9 + 107))
            {
              v9 += 496;
              v30 = 2 * v8 + 2;
            }
          }
          v8 = v30;
        }
        while (*((double *)v9 + 10)
              + *((double *)v9 + 17)
              + *((double *)v9 + 24)
              + *((double *)v9 + 31)
              + *((double *)v9 + 38)
              + *((double *)v9 + 45) <= v17);
        *((_DWORD *)v4 + 2) = DWORD2(v56);
        *(_QWORD *)v4 = v56;
        *((_DWORD *)v4 + 6) = DWORD2(v57);
        *(_QWORD *)v21 = v57;
        *((_OWORD *)v4 + 3) = v59;
        *((_OWORD *)v4 + 4) = v60;
        *((_OWORD *)v4 + 2) = v58;
        *((double *)v4 + 10) = v11;
        v32 = v4 + 80;
        *(_OWORD *)(v32 + 40) = v55;
        *(_OWORD *)(v32 + 24) = v54;
        *(_OWORD *)(v32 + 8) = v53;
        *((double *)v32 + 7) = v12;
        *((_OWORD *)v32 + 5) = v51;
        *((_OWORD *)v32 + 6) = v52;
        *((_OWORD *)v32 + 4) = v50;
        *((double *)v32 + 14) = v13;
        *(_OWORD *)(v32 + 152) = v49;
        *(_OWORD *)(v32 + 136) = v48;
        *(_OWORD *)(v32 + 120) = v47;
        *((double *)v32 + 21) = v14;
        *((_OWORD *)v32 + 12) = v45;
        *((_OWORD *)v32 + 13) = v46;
        *((_OWORD *)v32 + 11) = v44;
        *((double *)v32 + 28) = v15;
        *(_OWORD *)(v32 + 264) = v43;
        *(_OWORD *)(v32 + 248) = v42;
        *(_OWORD *)(v32 + 232) = v41;
        *((double *)v32 + 35) = v16;
        *((_OWORD *)v21 + 24) = v35;
        *((_OWORD *)v21 + 25) = v36;
        *((_OWORD *)v21 + 22) = v33;
        *((_OWORD *)v21 + 23) = v34;
        *((_OWORD *)v21 + 28) = v39;
        *((_OWORD *)v21 + 29) = v40;
        *((_OWORD *)v21 + 26) = v37;
        *((_OWORD *)v21 + 27) = v38;
      }
    }
  }
  return result;
}

char *sub_20F2AEDC8(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  const double *v24;
  double *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 *v39;
  char *v40;
  __int128 *i;
  __int128 v42;
  char *v43;
  unint64_t v45;
  _OWORD *v46;
  float64x2x2_t v47;
  float64x2x2_t v48;

  v5 = (__int128 *)*a1;
  v4 = (unint64_t)a1[1];
  v6 = (char *)a2 - *a1;
  v7 = v6 >> 4;
  v8 = (__int128 *)&(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  v9 = (unint64_t)a1[2];
  if (v4 < v9)
  {
    if (v8 == (__int128 *)v4)
    {
      *v8 = *(_OWORD *)a3;
      a1[1] = (char *)(v8 + 1);
    }
    else
    {
      v10 = v8 + 1;
      v11 = v4 - 16;
      v12 = a1[1];
      if (v4 >= 0x10)
      {
        v13 = (__int128 *)(v4 - 16);
        v12 = a1[1];
        do
        {
          v14 = *v13++;
          *(_OWORD *)v12 = v14;
          v12 += 16;
        }
        while ((unint64_t)v13 < v4);
      }
      a1[1] = v12;
      if ((_OWORD *)v4 != v10)
      {
        v15 = v4 - (_QWORD)v10;
        v16 = v4 - (_QWORD)v10 - 16;
        if (v16 < 0xD0
          || v4 - (v15 & 0xFFFFFFFFFFFFFFF0) < v11
          && (unint64_t)v5 + v15 + (v6 & 0xFFFFFFFFFFFFFFF0) - (v15 & 0xFFFFFFFFFFFFFFF0) < v4)
        {
          goto LABEL_13;
        }
        v17 = (v16 >> 4) + 1;
        v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
        v19 = v4 - v18;
        v20 = v11 - v18;
        v21 = (const double *)(v4 - 48);
        v22 = (double *)(v4 - 32);
        v23 = v17 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = vld2q_f64(v21);
          v24 = v21 - 4;
          v48 = vld2q_f64(v24);
          vst2q_f64(v22, v47);
          v25 = v22 - 4;
          vst2q_f64(v25, v48);
          v21 -= 8;
          v22 -= 8;
          v23 -= 4;
        }
        while (v23);
        v4 = v19;
        v11 = v20;
        if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          v26 = (_QWORD *)(v4 - 8);
          do
          {
            v27 = *(_QWORD *)(v11 - 16);
            v11 -= 16;
            *(v26 - 1) = v27;
            *v26 = *(_QWORD *)(v11 + 8);
            v26 -= 2;
          }
          while ((__int128 *)v11 != v8);
        }
      }
      *(_QWORD *)v8 = *(_QWORD *)a3;
      *((_QWORD *)&v5[v7] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v8;
  }
  v28 = ((uint64_t)(v4 - (_QWORD)v5) >> 4) + 1;
  if (v28 >> 60)
    sub_20E867F44();
  v30 = v9 - (_QWORD)v5;
  if (v30 >> 3 > v28)
    v28 = v30 >> 3;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
    v31 = 0xFFFFFFFFFFFFFFFLL;
  else
    v31 = v28;
  if (v31)
  {
    if (v31 >> 60)
      sub_20E877A38();
    v32 = a3;
    v33 = (char *)operator new(16 * v31);
    a3 = v32;
    v34 = &v33[16 * v7];
    v35 = &v33[16 * v31];
    if (v7 != v31)
      goto LABEL_32;
  }
  else
  {
    v33 = 0;
    v34 = (char *)(16 * v7);
    v35 = 0;
    if (v7)
      goto LABEL_32;
  }
  if (v6 < 1)
  {
    if (v5 == a2)
      v45 = 1;
    else
      v45 = v6 >> 3;
    if (v45 >> 60)
      sub_20E877A38();
    v46 = (_OWORD *)a3;
    v34 = (char *)operator new(16 * v45);
    v35 = &v34[16 * v45];
    if (v33)
    {
      operator delete(v33);
      v5 = (__int128 *)*a1;
    }
    *(_OWORD *)v34 = *v46;
    v37 = v34 + 16;
    v38 = v34;
    if (v5 == v8)
      goto LABEL_35;
    goto LABEL_33;
  }
  v36 = v7 + 2;
  if (v7 >= -1)
    v36 = v7 + 1;
  v34 -= 16 * (v36 >> 1);
LABEL_32:
  *(_OWORD *)v34 = *(_OWORD *)a3;
  v37 = v34 + 16;
  v38 = v34;
  if (v5 != v8)
  {
LABEL_33:
    v39 = v8;
    v40 = v34;
    do
    {
      v38 = v40 - 16;
      *((_OWORD *)v40 - 1) = *--v39;
      v40 -= 16;
    }
    while (v39 != v5);
  }
LABEL_35:
  for (i = (__int128 *)a1[1]; v8 != i; v37 += 16)
  {
    v42 = *v8++;
    *(_OWORD *)v37 = v42;
  }
  v43 = *a1;
  *a1 = v38;
  a1[1] = v37;
  a1[2] = v35;
  if (v43)
    operator delete(v43);
  return v34;
}

void sub_20F2AF0C0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F2AF0DC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F2AF0F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9FC778;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20F2AF130(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FC778;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float64x2_t sub_20F2AF158(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char **v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  int64x2_t v40;
  float64x2_t v42;
  float64x2_t v43;
  int8x16_t v44;
  double v45;
  float64x2_t v47;
  unint64_t v53;
  double v55;
  float64x2_t v57;
  double v58;
  int8x16_t v61;
  int8x16_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  double v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  float64x2_t *v99;
  float64x2_t *v100;
  float64x2_t v102;
  double v103;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  uint64_t v121;
  int v122;
  float64_t v123;
  float64_t v124;
  BOOL v125;
  uint64_t v126;
  int v127;
  __int128 v128;
  int64x2_t v129;
  int64x2_t v130;
  BOOL v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  int8x16_t v212;
  int8x16_t v213;
  double v214;
  int8x16_t v215;
  double v216;
  unint64_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  double v221;
  int8x16_t v222;
  double v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t result;
  float64x2_t v275;
  int8x16_t v276;
  unint64_t v277;
  double v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  double v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  double v289;
  unint64_t v290;
  float64_t v291;
  double v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  int8x16_t v315;
  float64x2_t v316;
  int8x16_t v317;
  float64x2_t v318;
  int8x16_t v319;
  float64x2_t v320;
  double v321;
  int8x16_t v322;
  float64x2_t v323;
  float64x2_t v324;
  int8x16_t v325;
  float64x2_t v326;
  float64x2_t v327;
  int64x2_t v328;
  _BYTE v329[32];
  int64x2_t v330[18];
  float64x2_t v331;
  double v332;
  int8x16_t v333;
  uint64_t v334;
  int8x16_t v335;
  uint64_t v336;
  float64x2_t v337;
  double v338;
  float64x2_t v339;
  uint64_t v340;
  int64x2_t v341;
  uint64_t v342;
  int64x2_t v343;
  uint64_t v344;

  v3 = a1;
  v5 = a2[3];
  v4 = a2[4];
  v7 = *a2;
  v6 = a2[1];
  v8 = *(uint64_t **)(a1 + 8);
  v9 = (char *)*v8;
  v10 = (char *)v8[1];
  v11 = *v8;
  if ((char *)*v8 != v10)
  {
    v11 = *v8;
    while (*(_QWORD *)v11 != v5
         || *(_DWORD *)(v11 + 8) != (_DWORD)v4
         || *(_QWORD *)(v11 + 16) != v7
         || *(_DWORD *)(v11 + 24) != (_DWORD)v6)
    {
      v11 += 496;
      if ((char *)v11 == v10)
        goto LABEL_9;
    }
  }
  if ((char *)v11 == v10)
  {
LABEL_9:
    memset(v330, 0, sizeof(v330));
    if (**(_BYTE **)(a1 + 16))
    {
      v12 = *(char ***)(a1 + 24);
      v13 = *v12;
      v14 = v12[1];
      v15 = v13;
      if (v14 != v13)
      {
        v16 = (v14 - v13) >> 4;
        v15 = v13;
        do
        {
          v17 = v16 >> 1;
          v18 = (unint64_t *)&v15[16 * (v16 >> 1)];
          v20 = *v18;
          v19 = (char *)(v18 + 2);
          v16 += ~(v16 >> 1);
          if (v20 < v5)
            v15 = v19;
          else
            v16 = v17;
        }
        while (v16);
      }
      if (v14 == v15 || *(_QWORD *)v15 != v5)
        v15 = v14;
      if (v14 != v13)
      {
        v21 = (v14 - v13) >> 4;
        do
        {
          v22 = v21 >> 1;
          v23 = &v13[16 * (v21 >> 1)];
          v25 = *(_QWORD *)v23;
          v24 = v23 + 16;
          v21 += ~(v21 >> 1);
          if (v25 < v7)
            v13 = v24;
          else
            v21 = v22;
        }
        while (v21);
      }
      if (v14 == v13 || *(_QWORD *)v13 != v7)
        v13 = v14;
      v26 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v15 + 1) + 16) + 424);
      v27 = (uint64_t *)(*v26 + 56);
      v28 = *v27;
      if (!*v27)
        goto LABEL_40;
      v29 = *v26 + 56;
      do
      {
        v30 = *(_QWORD *)(v28 + 32);
        if (v30 < v5)
        {
          v28 += 8;
        }
        else if (v30 == v5)
        {
          if (*(_DWORD *)(v28 + 40) < v4)
            v28 += 8;
          else
            v29 = v28;
        }
        else
        {
          v29 = v28;
        }
        v28 = *(_QWORD *)v28;
      }
      while (v28);
      if ((uint64_t *)v29 == v27
        || (v31 = *(_QWORD *)(v29 + 32), v5 < v31)
        || v5 == v31 && *(_DWORD *)(v29 + 40) > v4)
      {
LABEL_40:
        v32 = 0;
      }
      else
      {
        v32 = *(_QWORD *)(v29 + 48);
      }
      v33 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)v13 + 1) + 16) + 424);
      v36 = *(uint64_t **)(v33 + 56);
      v34 = (uint64_t *)(v33 + 56);
      v35 = v36;
      do
      {
        v37 = v35[4];
        if (v37 < v7)
        {
          ++v35;
        }
        else if (v37 == v7)
        {
          if (*((_DWORD *)v35 + 10) < v6)
            ++v35;
          else
            v34 = v35;
        }
        else
        {
          v34 = v35;
        }
        v35 = (uint64_t *)*v35;
      }
      while (v35);
      v38 = v34[6];
      v39.f64[0] = *(float64_t *)(v38 + 16);
      v40 = *(int64x2_t *)(v38 + 24);
      _Q5 = *(int64x2_t *)(v38 + 48);
      v42 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v38, v40);
      v43 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v38, v40);
      v39.f64[1] = *(float64_t *)(v38 + 40);
      v44 = vextq_s8((int8x16_t)v43, (int8x16_t)vdupq_laneq_s64(_Q5, 1), 8uLL);
      v45 = *(double *)(v38 + 88);
      _Q16 = *(float64x2_t *)(v38 + 72);
      v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, _Q16.f64[0]), v43, _Q16, 1), v39, v45);
      _Q16.f64[0] = *(float64_t *)(v38 + 80);
      __asm { FMLA            D17, D16, V5.D[1] }
      _Q16.f64[0] = _D17 + *(double *)(v38 + 64) * v45;
      v53 = *(_QWORD *)(v38 + 48);
      *(_QWORD *)&v43.f64[1] = v44.i64[0];
      v44.i64[0] = *(_QWORD *)(v38 + 64);
      __asm { FMOV            V7.2D, #1.0 }
      *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vnegq_f64(_Q16);
      v55 = *(double *)(v32 + 16);
      _D19 = *(double *)(v32 + 40);
      v57 = *(float64x2_t *)(v32 + 24);
      v58 = *(double *)(v32 + 64);
      _Q18 = *(float64x2_t *)(v32 + 48);
      _Q20 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v32, (int64x2_t)v57);
      v61 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q20, 1);
      v62 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q20.f64[0], 0);
      v63 = *(double *)(v32 + 88);
      v64 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v32, (int64x2_t)v57);
      v65 = vmlaq_laneq_f64(vmulq_n_f64(v64, *(double *)(v32 + 72)), _Q20, *(float64x2_t *)(v32 + 72), 1);
      _Q20.f64[0] = v55;
      _Q20.f64[1] = _D19;
      _Q29 = vmlaq_n_f64(v65, _Q20, v63);
      _D27 = *(_QWORD *)(v32 + 80);
      __asm { FMLA            D20, D27, V18.D[1] }
      v68 = _Q20.f64[0] + v58 * v63;
      _Q24 = (int64x2_t)vextq_s8(v62, v61, 8uLL);
      v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v64, _Q24), _Q29.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v64, _Q24), _Q29, 1), _Q18, v68);
      __asm { FMLA            D24, D19, V29.D[1] }
      *(double *)_Q24.i64 = *(double *)_Q24.i64 + v58 * v68;
      v71 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v32), v43, *(float64x2_t *)v32, 1), v39, v55), (float64x2_t)0, v47);
      v72 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v53, *(double *)v32), (float64x2_t)v44.u64[1], *(float64x2_t *)v32, 1), (float64x2_t)v44.u64[0], v55), (float64x2_t)0, _Q7);
      v73 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, v57.f64[0]), v43, v57, 1), v39, _D19), (float64x2_t)0, v47);
      v74 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v53, v57.f64[0]), (float64x2_t)v44.u64[1], v57, 1), (float64x2_t)v44.u64[0], _D19), (float64x2_t)0, _Q7);
      v75 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, _Q18.f64[0]), v43, _Q18, 1), v39, v58), (float64x2_t)0, v47);
      v76 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v53, _Q18.f64[0]), (float64x2_t)v44.u64[1], _Q18, 1), (float64x2_t)v44.u64[0], v58), (float64x2_t)0, _Q7);
      v77 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, v70.f64[0]), v43, v70, 1), v39, *(double *)_Q24.i64), v47);
      v78 = vaddq_f64(_Q7, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v53, v70.f64[0]), (float64x2_t)v44.u64[1], v70, 1), (float64x2_t)v44.u64[0], *(double *)_Q24.i64));
    }
    else
    {
      v77 = *((float64x2_t *)a2 + 9);
      v78 = *((float64x2_t *)a2 + 10);
      v75 = *((float64x2_t *)a2 + 7);
      v76 = *((float64x2_t *)a2 + 8);
      v73 = *((float64x2_t *)a2 + 5);
      v74 = *((float64x2_t *)a2 + 6);
      v71 = *((float64x2_t *)a2 + 3);
      v72 = *((float64x2_t *)a2 + 4);
    }
    v79 = v8[2];
    v320 = v72;
    v323 = v71;
    v316 = v74;
    v318 = v73;
    v312 = v76;
    v314 = v75;
    v308 = v78;
    v310 = v77;
    if ((unint64_t)v10 < v79)
    {
      *(_QWORD *)v10 = v5;
      *((_QWORD *)v10 + 1) = v4;
      *((_QWORD *)v10 + 2) = v7;
      *((_QWORD *)v10 + 3) = v6;
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 4) = 0u;
      memcpy(v10 + 80, v330, 0x120uLL);
      *((float64x2_t *)v10 + 25) = v318;
      *((float64x2_t *)v10 + 26) = v316;
      *((float64x2_t *)v10 + 23) = v323;
      *((float64x2_t *)v10 + 24) = v320;
      *((float64x2_t *)v10 + 27) = v314;
      *((float64x2_t *)v10 + 28) = v312;
      v80 = v10 + 496;
      *((float64x2_t *)v10 + 29) = v310;
      *((float64x2_t *)v10 + 30) = v308;
LABEL_66:
      v8[1] = (uint64_t)v80;
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) - 496;
      goto LABEL_67;
    }
    v81 = 0xEF7BDEF7BDEF7BDFLL * ((v10 - v9) >> 4) + 1;
    if (v81 > 0x84210842108421)
      sub_20E867F44();
    v82 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v79 - (_QWORD)v9) >> 4);
    if (2 * v82 > v81)
      v81 = 2 * v82;
    if (v82 >= 0x42108421084210)
      v83 = 0x84210842108421;
    else
      v83 = v81;
    if (v83 > 0x84210842108421)
      sub_20E877A38();
    v84 = 496 * v83;
    v85 = (char *)operator new(496 * v83);
    v86 = &v85[16 * ((v10 - v9) >> 4)];
    v87 = &v85[v84];
    *(_QWORD *)v86 = v5;
    *((_QWORD *)v86 + 1) = v4;
    *((_QWORD *)v86 + 2) = v7;
    *((_QWORD *)v86 + 3) = v6;
    *((_OWORD *)v86 + 2) = 0u;
    *((_OWORD *)v86 + 3) = 0u;
    *((_OWORD *)v86 + 4) = 0u;
    memcpy(v86 + 80, v330, 0x120uLL);
    *((float64x2_t *)v86 + 29) = v310;
    *((float64x2_t *)v86 + 30) = v308;
    *((float64x2_t *)v86 + 27) = v314;
    *((float64x2_t *)v86 + 28) = v312;
    *((float64x2_t *)v86 + 25) = v318;
    *((float64x2_t *)v86 + 26) = v316;
    v80 = v86 + 496;
    *((float64x2_t *)v86 + 23) = v323;
    *((float64x2_t *)v86 + 24) = v320;
    if (v9 == v10)
    {
      *v8 = (uint64_t)v86;
      v8[1] = (uint64_t)v80;
      v8[2] = (uint64_t)v87;
      if (!v9)
        goto LABEL_65;
    }
    else
    {
      do
      {
        v88 = v86 - 496;
        v89 = *((_OWORD *)v10 - 30);
        *(_OWORD *)v88 = *((_OWORD *)v10 - 31);
        *((_OWORD *)v88 + 1) = v89;
        v90 = v86 - 464;
        v91 = *((_OWORD *)v10 - 29);
        v92 = *((_OWORD *)v10 - 27);
        *((_OWORD *)v90 + 1) = *((_OWORD *)v10 - 28);
        *((_OWORD *)v90 + 2) = v92;
        *(_OWORD *)v90 = v91;
        memcpy(v86 - 416, v10 - 416, 0x120uLL);
        v93 = *((_OWORD *)v10 - 5);
        v95 = *((_OWORD *)v10 - 8);
        v94 = *((_OWORD *)v10 - 7);
        *((_OWORD *)v86 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v86 - 5) = v93;
        *((_OWORD *)v86 - 8) = v95;
        *((_OWORD *)v86 - 7) = v94;
        v96 = *((_OWORD *)v10 - 1);
        v98 = *((_OWORD *)v10 - 4);
        v97 = *((_OWORD *)v10 - 3);
        *((_OWORD *)v86 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v86 - 1) = v96;
        *((_OWORD *)v86 - 4) = v98;
        *((_OWORD *)v86 - 3) = v97;
        v10 -= 496;
        v86 -= 496;
      }
      while (v10 != v9);
      *v8 = (uint64_t)v88;
      v8[1] = (uint64_t)v80;
      v8[2] = (uint64_t)v87;
      if (!v9)
        goto LABEL_65;
    }
    operator delete(v9);
LABEL_65:
    v3 = a1;
    goto LABEL_66;
  }
LABEL_67:
  v99 = (float64x2_t *)(a2 + 34);
  v100 = (float64x2_t *)(v11 + 272);
  *(_QWORD *)&_Q6.f64[0] = a2[8];
  v102 = *((float64x2_t *)a2 + 3);
  v103 = *((double *)a2 + 12);
  v104 = *((float64x2_t *)a2 + 5);
  _D1 = *((double *)a2 + 16);
  v106 = *((float64x2_t *)a2 + 7);
  _D7 = *((double *)a2 + 20);
  _Q17 = *((float64x2_t *)a2 + 9);
  v110 = *(float64x2_t *)(v11 + 368);
  v109 = *(float64x2_t *)(v11 + 384);
  v111 = vmulq_n_f64(v110, _Q6.f64[0]);
  v112 = vmulq_n_f64(v109, _Q6.f64[0]);
  _Q6.f64[1] = v103;
  v113 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v102, (int64x2_t)v104), vnegq_f64(_Q17).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v102, (int64x2_t)v104), _Q17, 1), _Q6, _D7, 0);
  _D18 = a2[15];
  __asm
  {
    FMLS            D6, D18, V17.D[1]
    FMLS            D6, D1, V7.D[0]
  }
  v116 = *(float64x2_t *)(v11 + 400);
  v115 = *(float64x2_t *)(v11 + 416);
  v118 = *(float64x2_t *)(v11 + 432);
  v117 = *(float64x2_t *)(v11 + 448);
  v120 = *(float64x2_t *)(v11 + 464);
  v119 = *(float64x2_t *)(v11 + 480);
  v331 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v110, v102.f64[0]), v116, v104.f64[0]), v118, v106.f64[0]), (float64x2_t)0, v120);
  v333 = (int8x16_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v110, v102, 1), v116, v104, 1), v118, v106, 1), (float64x2_t)0, v120);
  v287 = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v109, v102, 1), v115, v104, 1), v117, v106, 1), (float64x2_t)0, v119);
  *(_QWORD *)&v289 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v109, v102.f64[0]), v115, v104.f64[0]), v117, v106.f64[0]), (float64x2_t)0, v119);
  v332 = v289;
  v334 = v287;
  v335 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v111, v116, v103), v118, _D1), (float64x2_t)0, v120);
  *(_QWORD *)&v321 = *(_OWORD *)&vaddq_f64(v119, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109, v113.f64[0]), v115, v113, 1), v117, _Q6.f64[0]));
  v324 = vaddq_f64(v120, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v113.f64[0]), v116, v113, 1), v118, _Q6.f64[0]));
  v291 = v331.f64[0];
  v293 = v333.i64[0];
  v281 = vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL).u64[0];
  v283 = vextq_s8(v333, v333, 8uLL).u64[0];
  v295 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v112, v115, v103), v117, _D1), (float64x2_t)0, v119);
  v297 = v335.i64[0];
  v285 = vextq_s8(v335, v335, 8uLL).u64[0];
  v336 = v295;
  v338 = 0.0;
  v337 = 0uLL;
  sub_20F20830C(&v331, v337.f64, v339.f64);
  v121 = 0;
  v122 = 0;
  *(_QWORD *)v329 = v340;
  v328 = (int64x2_t)v339;
  v330[1].i64[0] = v342;
  v330[0] = v341;
  v330[4].i64[0] = v344;
  v330[3] = v343;
  v123 = v321;
  v124 = v324.f64[0];
  do
  {
    v330[6].i64[v121] = 0;
    v125 = v122 < 2;
    if (v122 < 2)
      ++v122;
    else
      v122 = 0;
    if (v125)
      ++v121;
    else
      v121 += 4;
  }
  while (v121 != 18);
  v126 = 0;
  v127 = 0;
  *(_QWORD *)&v128 = 0;
  v129 = (int64x2_t)vnegq_f64(v324);
  *((_QWORD *)&v128 + 1) = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v321);
  v130.i64[0] = vdupq_laneq_s64(v129, 1).u64[0];
  *(float64_t *)&v329[24] = v324.f64[1];
  v130.i64[1] = *(_QWORD *)&v324.f64[0];
  *(_OWORD *)&v329[8] = v128;
  *(int64x2_t *)((char *)&v330[1] + 8) = (int64x2_t)*(unint64_t *)&v321;
  v330[2].i64[1] = v129.i64[0];
  v330[5].i64[1] = 0;
  *(int64x2_t *)((char *)&v330[4] + 8) = v130;
  do
  {
    v330[7].i64[v126 + 1] = 0;
    v131 = v127 < 2;
    if (v127 < 2)
      ++v127;
    else
      v127 = 0;
    if (v131)
      ++v126;
    else
      v126 += 4;
  }
  while (v126 != 18);
  v132 = *((float64x2_t *)a2 + 11);
  v133 = (float64x2_t)vzip1q_s64(v328, v330[0]);
  v134 = (float64x2_t)vzip2q_s64(v328, v330[0]);
  v135 = vmlaq_laneq_f64(vmulq_n_f64(v133, v132.f64[0]), v134, v132, 1);
  v136 = (float64x2_t)vzip1q_s64(v330[3], v330[6]);
  v317.i64[0] = v330[3].i64[0];
  *(_QWORD *)&v137.f64[0] = vdupq_laneq_s64(v330[3], 1).u64[0];
  *(_QWORD *)&v137.f64[1] = v330[6].i64[1];
  v138 = vmlaq_laneq_f64(vmulq_n_f64(v136, v132.f64[0]), v137, v132, 1);
  v139 = (float64x2_t)vzip1q_s64(v330[9], v330[12]);
  *(_QWORD *)&v140.f64[0] = vdupq_laneq_s64(v330[9], 1).u64[0];
  *(_QWORD *)&v140.f64[1] = v330[12].i64[1];
  v141 = vmlaq_laneq_f64(vmulq_n_f64(v139, v132.f64[0]), v140, v132, 1);
  v142 = *((float64x2_t *)a2 + 14);
  v143 = vmlaq_laneq_f64(vmulq_n_f64(v133, v142.f64[0]), v134, v142, 1);
  v144 = vmlaq_laneq_f64(vmulq_n_f64(v136, v142.f64[0]), v137, v142, 1);
  v145 = vmlaq_laneq_f64(vmulq_n_f64(v139, v142.f64[0]), v140, v142, 1);
  v146 = *v99;
  v147 = vmlaq_laneq_f64(vmulq_n_f64(v133, v99->f64[0]), v134, *v99, 1);
  v148 = vmlaq_laneq_f64(vmulq_n_f64(v136, v99->f64[0]), v137, *v99, 1);
  v149 = vmulq_n_f64(v139, v99->f64[0]);
  v330[7].i64[1] = 0x3FF0000000000000;
  v150 = vmlaq_laneq_f64(v149, v140, v146, 1);
  v151 = *((float64x2_t *)a2 + 20);
  v163 = *((float64x2_t *)a2 + 23);
  v152 = vmlaq_laneq_f64(vmulq_n_f64(v133, v151.f64[0]), v134, v151, 1);
  v153 = *((float64x2_t *)a2 + 26);
  v154 = vmlaq_laneq_f64(vmulq_n_f64(v136, v151.f64[0]), v137, v151, 1);
  v155 = vmlaq_laneq_f64(vmulq_n_f64(v139, v151.f64[0]), v140, v151, 1);
  v156 = vmlaq_laneq_f64(vmulq_n_f64(v133, v163.f64[0]), v134, v163, 1);
  v157 = vmlaq_laneq_f64(vmulq_n_f64(v136, v163.f64[0]), v137, v163, 1);
  v158 = vmlaq_laneq_f64(vmulq_n_f64(v139, v163.f64[0]), v140, v163, 1);
  v159 = vmlaq_laneq_f64(vmulq_n_f64(v133, v153.f64[0]), v134, v153, 1);
  v160 = vmlaq_laneq_f64(vmulq_n_f64(v136, v153.f64[0]), v137, v153, 1);
  v161 = vmlaq_laneq_f64(vmulq_n_f64(v139, v153.f64[0]), v140, v153, 1);
  *(_QWORD *)&v140.f64[0] = vdupq_laneq_s64(v330[4], 1).u64[0];
  v140.f64[1] = 1.0;
  *(_QWORD *)&v139.f64[0] = vdupq_laneq_s64(v330[10], 1).u64[0];
  *(_QWORD *)&v139.f64[1] = v330[13].i64[1];
  v162 = *((float64x2_t *)a2 + 12);
  *(_QWORD *)&v163.f64[0] = v330[1].i64[0];
  v164 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v329, v330[1]);
  v322.i64[0] = v330[4].i64[0];
  v325.i64[0] = *(_QWORD *)v329;
  v190 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v329, v330[1]);
  v165 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v164, v162.f64[0]), v190, v162, 1);
  v166 = (float64x2_t)vzip1q_s64(v330[4], v330[7]);
  v167 = vmlaq_laneq_f64(vmlaq_n_f64(v138, v166, v162.f64[0]), v140, v162, 1);
  v319.i64[0] = v330[10].i64[0];
  v168 = (float64x2_t)vzip1q_s64(v330[10], v330[13]);
  v169 = vmlaq_laneq_f64(vmlaq_n_f64(v141, v168, v162.f64[0]), v139, v162, 1);
  v170 = *((float64x2_t *)a2 + 15);
  v171 = vmlaq_laneq_f64(vmlaq_n_f64(v143, v164, v170.f64[0]), v190, v170, 1);
  v172 = vmlaq_laneq_f64(vmlaq_n_f64(v144, v166, v170.f64[0]), v140, v170, 1);
  v173 = vmlaq_laneq_f64(vmlaq_n_f64(v145, v168, v170.f64[0]), v139, v170, 1);
  v174 = *((float64x2_t *)a2 + 18);
  v175 = vmlaq_laneq_f64(vmlaq_n_f64(v147, v164, v174.f64[0]), v190, v174, 1);
  v176 = vmlaq_laneq_f64(vmlaq_n_f64(v148, v166, v174.f64[0]), v140, v174, 1);
  v177 = vmlaq_laneq_f64(vmlaq_n_f64(v150, v168, v174.f64[0]), v139, v174, 1);
  v178 = *((float64x2_t *)a2 + 21);
  v179 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v164, v178.f64[0]), v190, v178, 1);
  v180 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v166, v178.f64[0]), v140, v178, 1);
  v181 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v168, v178.f64[0]), v139, v178, 1);
  v182 = *((float64x2_t *)a2 + 24);
  v183 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v164, v182.f64[0]), v190, v182, 1);
  v184 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v166, v182.f64[0]), v140, v182, 1);
  v185 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v168, v182.f64[0]), v139, v182, 1);
  v186 = *((float64x2_t *)a2 + 27);
  v187 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v164, v186.f64[0]), v190, v186, 1);
  v188 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v166, v186.f64[0]), v140, v186, 1);
  v189 = vmlaq_laneq_f64(vmlaq_n_f64(v161, v168, v186.f64[0]), v139, v186, 1);
  v330[11].i64[0] = 0x3FF0000000000000;
  v330[14].i64[1] = 0x3FF0000000000000;
  *(_QWORD *)&v140.f64[0] = vdupq_laneq_s64(v330[5], 1).u64[0];
  *(_QWORD *)&v140.f64[1] = v330[8].i64[1];
  *(_QWORD *)&v166.f64[0] = vdupq_laneq_s64(v330[11], 1).u64[0];
  v166.f64[1] = 1.0;
  v190.f64[0] = *(float64_t *)&v329[16];
  v191 = *((float64x2_t *)a2 + 13);
  v192 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v329[16], v330[2]);
  v193 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v329[16], v330[2]);
  v194 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v192, v191.f64[0]), v193, v191, 1);
  v315.i64[0] = v330[8].i64[0];
  v195 = (float64x2_t)vzip1q_s64(v330[5], v330[8]);
  v196 = vmlaq_laneq_f64(vmlaq_n_f64(v167, v195, v191.f64[0]), v140, v191, 1);
  v197 = (float64x2_t)vzip1q_s64(v330[11], v330[14]);
  v198 = vmlaq_laneq_f64(vmlaq_n_f64(v169, v197, v191.f64[0]), v166, v191, 1);
  v199 = *((float64x2_t *)a2 + 16);
  v200 = vmlaq_laneq_f64(vmlaq_n_f64(v171, v192, v199.f64[0]), v193, v199, 1);
  v201 = vmlaq_laneq_f64(vmlaq_n_f64(v172, v195, v199.f64[0]), v140, v199, 1);
  v202 = vmlaq_laneq_f64(vmlaq_n_f64(v173, v197, v199.f64[0]), v166, v199, 1);
  v203 = *((float64x2_t *)a2 + 19);
  v311 = vmlaq_laneq_f64(vmlaq_n_f64(v176, v195, v203.f64[0]), v140, v203, 1);
  v313 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v192, v203.f64[0]), v193, v203, 1);
  v204 = vmlaq_laneq_f64(vmlaq_n_f64(v177, v197, v203.f64[0]), v166, v203, 1);
  v205 = *((float64x2_t *)a2 + 22);
  v307 = vmlaq_laneq_f64(vmlaq_n_f64(v179, v192, v205.f64[0]), v193, v205, 1);
  v309 = v204;
  v206 = vmlaq_laneq_f64(vmlaq_n_f64(v180, v195, v205.f64[0]), v140, v205, 1);
  v207 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v197, v205.f64[0]), v166, v205, 1);
  v208 = *((float64x2_t *)a2 + 25);
  v304 = vmlaq_laneq_f64(vmlaq_n_f64(v183, v192, v208.f64[0]), v193, v208, 1);
  v305 = v206;
  v303 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v195, v208.f64[0]), v140, v208, 1);
  v209 = vmlaq_laneq_f64(vmlaq_n_f64(v185, v197, v208.f64[0]), v166, v208, 1);
  v210 = *((float64x2_t *)a2 + 28);
  v211 = vmlaq_laneq_f64(vmlaq_n_f64(v189, v197, v210.f64[0]), v166, v210, 1);
  v301 = vmlaq_laneq_f64(vmlaq_n_f64(v188, v195, v210.f64[0]), v140, v210, 1);
  v302 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v192, v210.f64[0]), v193, v210, 1);
  v299 = v207;
  v300 = v209;
  if (**(_BYTE **)(v3 + 16))
  {
    v213 = (int8x16_t)v330[9];
    v212 = (int8x16_t)v330[12];
    v286 = vextq_s8((int8x16_t)v330[10], (int8x16_t)v330[10], 8uLL).u64[0];
    v288 = vextq_s8((int8x16_t)v330[13], (int8x16_t)v330[13], 8uLL).u64[0];
    *(_QWORD *)&v214 = vextq_s8(v213, v213, 8uLL).u64[0];
    v294 = vextq_s8((int8x16_t)v330[8], (int8x16_t)v330[8], 8uLL).u64[0];
    v215 = (int8x16_t)v330[6];
    *(_QWORD *)&v216 = vextq_s8(v215, v215, 8uLL).u64[0];
    v290 = vextq_s8((int8x16_t)v330[5], (int8x16_t)v330[5], 8uLL).u64[0];
    v280 = vextq_s8((int8x16_t)v330[4], (int8x16_t)v330[4], 8uLL).u64[0];
    *(_QWORD *)&v282 = vextq_s8(v212, v212, 8uLL).u64[0];
    v217 = vextq_s8((int8x16_t)v330[3], (int8x16_t)v330[3], 8uLL).u64[0];
    v218.i64[0] = v330[2].i64[0];
    v284 = vextq_s8((int8x16_t)v330[2], (int8x16_t)v330[2], 8uLL).u64[0];
    v276.i64[0] = v330[14].i64[0];
    v277 = vextq_s8((int8x16_t)v330[1], (int8x16_t)v330[1], 8uLL).u64[0];
    v220 = (int8x16_t)v330[0];
    v219 = (int8x16_t)v328;
    *(_QWORD *)&v221 = vextq_s8(v220, v220, 8uLL).u64[0];
    v222.i64[0] = v330[13].i64[0];
    v296 = vextq_s8(*(int8x16_t *)v329, *(int8x16_t *)v329, 8uLL).u64[0];
    *(_QWORD *)&v223 = vextq_s8(v219, v219, 8uLL).u64[0];
    v298 = vextq_s8((int8x16_t)v330[14], (int8x16_t)v330[14], 8uLL).u64[0];
    v224 = (int8x16_t)v330[11];
    v225.i64[0] = v330[5].i64[0];
    *(_QWORD *)&v292 = vextq_s8(v224, v224, 8uLL).u64[0];
    v226 = (int8x16_t)v330[7];
    *(_QWORD *)&v278 = vextq_s8(v226, v226, 8uLL).u64[0];
    v279 = vextq_s8(*(int8x16_t *)&v329[16], *(int8x16_t *)&v329[16], 8uLL).u64[0];
    v227 = v211;
  }
  else
  {
    v228.f64[0] = v291;
    *(_QWORD *)&v228.f64[1] = v281;
    v337 = v228;
    v338 = v289;
    v340 = v287;
    *(_QWORD *)&v228.f64[0] = v293;
    *(_QWORD *)&v228.f64[1] = v283;
    v339 = v228;
    v342 = v295;
    *(_QWORD *)&v228.f64[0] = v297;
    *(_QWORD *)&v228.f64[1] = v285;
    v341 = (int64x2_t)v228;
    v332 = 0.0;
    v331 = 0uLL;
    v275 = v211;
    sub_20E9733B8(&v337, v331.f64);
    v327.f64[0] = v324.f64[1];
    v327.f64[1] = v123;
    v326.f64[1] = v124;
    v326.f64[0] = v332;
    v227 = v275;
    v229 = vaddq_f64(*(float64x2_t *)(v11 + 32), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v194, v331.f64[0]), v200, v331, 1), v313, v332), v307, v326, 1), v304, v324.f64[1]), v302, v327, 1));
    v230 = vaddq_f64(*(float64x2_t *)(v11 + 64), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v198, v331.f64[0]), v202, v331, 1), v204, v332), v207, v326, 1), v300, v324.f64[1]), v275, v327, 1));
    *(float64x2_t *)(v11 + 48) = vaddq_f64(*(float64x2_t *)(v11 + 48), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v196, v331.f64[0]), v201, v331, 1), v311, v332), v305, v326, 1), v303, v324.f64[1]), v301, v327, 1));
    *(float64x2_t *)(v11 + 64) = v230;
    *(float64x2_t *)(v11 + 32) = v229;
    v219 = (int8x16_t)v328;
    v325 = *(int8x16_t *)v329;
    v296 = vextq_s8(v325, v325, 8uLL).u64[0];
    *(_QWORD *)&v223 = vextq_s8(v219, v219, 8uLL).u64[0];
    v222 = (int8x16_t)v330[13];
    v224 = (int8x16_t)v330[11];
    v212 = (int8x16_t)v330[12];
    v213 = (int8x16_t)v330[9];
    v226 = (int8x16_t)v330[7];
    v225 = (int8x16_t)v330[5];
    v215 = (int8x16_t)v330[6];
    v163 = (float64x2_t)v330[1];
    v218 = (int8x16_t)v330[2];
    v276 = (int8x16_t)v330[14];
    v298 = vextq_s8(v276, v276, 8uLL).u64[0];
    v319 = (int8x16_t)v330[10];
    v322 = (int8x16_t)v330[4];
    v286 = vextq_s8(v319, v319, 8uLL).u64[0];
    v288 = vextq_s8(v222, v222, 8uLL).u64[0];
    *(_QWORD *)&v214 = vextq_s8(v213, v213, 8uLL).u64[0];
    v315 = (int8x16_t)v330[8];
    v317 = (int8x16_t)v330[3];
    *(_QWORD *)&v292 = vextq_s8(v224, v224, 8uLL).u64[0];
    v294 = vextq_s8(v315, v315, 8uLL).u64[0];
    *(_QWORD *)&v278 = vextq_s8(v226, v226, 8uLL).u64[0];
    *(_QWORD *)&v216 = vextq_s8(v215, v215, 8uLL).u64[0];
    v290 = vextq_s8(v225, v225, 8uLL).u64[0];
    v190 = *(float64x2_t *)&v329[16];
    v220 = (int8x16_t)v330[0];
    v280 = vextq_s8(v322, v322, 8uLL).u64[0];
    *(_QWORD *)&v282 = vextq_s8(v212, v212, 8uLL).u64[0];
    v217 = vextq_s8(v317, v317, 8uLL).u64[0];
    v284 = vextq_s8(v218, v218, 8uLL).u64[0];
    v277 = vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).u64[0];
    *(_QWORD *)&v221 = vextq_s8(v220, v220, 8uLL).u64[0];
    v279 = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u64[0];
  }
  v231 = vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v219.i64), v200, v223);
  v232 = vmlaq_n_f64(vmulq_n_f64(v196, *(double *)v219.i64), v201, v223);
  v233 = vmlaq_n_f64(vmulq_n_f64(v198, *(double *)v219.i64), v202, v223);
  v234 = vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v220.i64), v200, v221);
  v235 = vmlaq_n_f64(vmulq_n_f64(v196, *(double *)v220.i64), v201, v221);
  v236 = vmlaq_n_f64(vmulq_n_f64(v198, *(double *)v220.i64), v202, v221);
  v237 = vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v317.i64), v200, *(double *)&v217);
  v238 = vmlaq_n_f64(vmulq_n_f64(v196, *(double *)v317.i64), v201, *(double *)&v217);
  v239 = vmlaq_n_f64(vmulq_n_f64(v198, *(double *)v317.i64), v202, *(double *)&v217);
  v240 = vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v215.i64), v200, v216);
  v241 = v198;
  v242 = vmlaq_n_f64(vmulq_n_f64(v196, *(double *)v215.i64), v201, v216);
  v243 = vmlaq_n_f64(vmulq_n_f64(v241, *(double *)v215.i64), v202, v216);
  v244 = vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v213.i64), v200, v214);
  v245 = v200;
  v246 = vmlaq_n_f64(vmulq_n_f64(v196, *(double *)v213.i64), v201, v214);
  v247 = vmlaq_n_f64(vmulq_n_f64(v241, *(double *)v213.i64), v202, v214);
  v248 = vmlaq_n_f64(vmlaq_n_f64(v240, v313, *(double *)v226.i64), v307, v278);
  v249 = vmlaq_n_f64(vmlaq_n_f64(v242, v311, *(double *)v226.i64), v305, v278);
  v250 = vmlaq_n_f64(vmlaq_n_f64(v243, v309, *(double *)v226.i64), v299, v278);
  v251 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v212.i64), v245, v282), v313, *(double *)v222.i64), v307, *(double *)&v288);
  v252 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v196, *(double *)v212.i64), v201, v282), v311, *(double *)v222.i64), v305, *(double *)&v288);
  v253 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v241, *(double *)v212.i64), v202, v282), v309, *(double *)v222.i64), v299, *(double *)&v288);
  v254 = vaddq_f64(*(float64x2_t *)(v11 + 112), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v233, v309, *(double *)v325.i64), v299, *(double *)&v296), v300, v190.f64[0]), v227, *(double *)&v279));
  v255 = vaddq_f64(*(float64x2_t *)(v11 + 96), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v232, v311, *(double *)v325.i64), v305, *(double *)&v296), v303, v190.f64[0]), v301, *(double *)&v279));
  v256 = vaddq_f64(*(float64x2_t *)(v11 + 160), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v236, v309, v163.f64[0]), v299, *(double *)&v277), v300, *(double *)v218.i64), v227, *(double *)&v284));
  v257 = vaddq_f64(*(float64x2_t *)(v11 + 144), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v235, v311, v163.f64[0]), v305, *(double *)&v277), v303, *(double *)v218.i64), v301, *(double *)&v284));
  v258 = vaddq_f64(*(float64x2_t *)(v11 + 128), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v234, v313, v163.f64[0]), v307, *(double *)&v277), v304, *(double *)v218.i64), v302, *(double *)&v284));
  v259 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v244, v313, *(double *)v319.i64), v307, *(double *)&v286), v304, *(double *)v224.i64);
  v260 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v246, v311, *(double *)v319.i64), v305, *(double *)&v286), v303, *(double *)v224.i64);
  v261 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v247, v309, *(double *)v319.i64), v299, *(double *)&v286), v300, *(double *)v224.i64);
  v262 = vaddq_f64(*(float64x2_t *)(v11 + 208), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v239, v309, *(double *)v322.i64), v299, *(double *)&v280), v300, *(double *)v225.i64), v227, *(double *)&v290));
  v263 = vaddq_f64(*(float64x2_t *)(v11 + 192), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v238, v311, *(double *)v322.i64), v305, *(double *)&v280), v303, *(double *)v225.i64), v301, *(double *)&v290));
  v264 = vaddq_f64(*(float64x2_t *)(v11 + 176), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v237, v313, *(double *)v322.i64), v307, *(double *)&v280), v304, *(double *)v225.i64), v302, *(double *)&v290));
  v265 = vaddq_f64(*(float64x2_t *)(v11 + 256), vmlaq_n_f64(vmlaq_n_f64(v250, v300, *(double *)v315.i64), v227, *(double *)&v294));
  v266 = vaddq_f64(*(float64x2_t *)(v11 + 240), vmlaq_n_f64(vmlaq_n_f64(v249, v303, *(double *)v315.i64), v301, *(double *)&v294));
  v267 = vaddq_f64(*(float64x2_t *)(v11 + 224), vmlaq_n_f64(vmlaq_n_f64(v248, v304, *(double *)v315.i64), v302, *(double *)&v294));
  v268 = vmlaq_n_f64(vmlaq_n_f64(v253, v300, *(double *)v276.i64), v227, *(double *)&v298);
  v269 = vaddq_f64(*(float64x2_t *)(v11 + 304), vmlaq_n_f64(v261, v227, v292));
  v270 = vaddq_f64(*(float64x2_t *)(v11 + 288), vmlaq_n_f64(v260, v301, v292));
  v271 = vaddq_f64(*v100, vmlaq_n_f64(v259, v302, v292));
  v272 = vaddq_f64(*(float64x2_t *)(v11 + 352), v268);
  v273 = vaddq_f64(*(float64x2_t *)(v11 + 320), vmlaq_n_f64(vmlaq_n_f64(v251, v304, *(double *)v276.i64), v302, *(double *)&v298));
  *(float64x2_t *)(v11 + 80) = vaddq_f64(*(float64x2_t *)(v11 + 80), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v231, v313, *(double *)v325.i64), v307, *(double *)&v296), v304, v190.f64[0]), v302, *(double *)&v279));
  *(float64x2_t *)(v11 + 96) = v255;
  *(float64x2_t *)(v11 + 112) = v254;
  *(float64x2_t *)(v11 + 128) = v258;
  *(float64x2_t *)(v11 + 144) = v257;
  *(float64x2_t *)(v11 + 160) = v256;
  *(float64x2_t *)(v11 + 176) = v264;
  *(float64x2_t *)(v11 + 192) = v263;
  *(float64x2_t *)(v11 + 208) = v262;
  *(float64x2_t *)(v11 + 224) = v267;
  *(float64x2_t *)(v11 + 240) = v266;
  *(float64x2_t *)(v11 + 256) = v265;
  *v100 = v271;
  *(float64x2_t *)(v11 + 288) = v270;
  *(float64x2_t *)(v11 + 304) = v269;
  *(float64x2_t *)(v11 + 320) = v273;
  result = vaddq_f64(*(float64x2_t *)(v11 + 336), vmlaq_n_f64(vmlaq_n_f64(v252, v303, *(double *)v276.i64), v301, *(double *)&v298));
  *(float64x2_t *)(v11 + 336) = result;
  *(float64x2_t *)(v11 + 352) = v272;
  return result;
}

uint64_t sub_20F2B01D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping48MarginalizeSubmapExternalRelocalizationResultsV2EPKNS1_17MapDataControll"
                     "erERKN3cva6detail11FlatMapBaseIyPS2_NSt3__14lessIyEELb1EEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping48MarginalizeSubmapExternalRelocalizationResultsV2EPKNS1_17MapD"
                                "ataControllerERKN3cva6detail11FlatMapBaseIyPS2_NSt3__14lessIyEELb1EEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping48MarginalizeSubmapExternalRelocalizationResultsV2EPKNS1_17MapDataControllerERKN3cva6detail11FlatMapBaseIyPS2_NSt3__14lessIyEELb1EEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping48MarginalizeSubmapExternalRelocalizationResultsV2EPKNS1_17MapDataControllerERKN3cva6detail11FlatMapBaseIyPS2_NSt3__14lessIyEELb1EEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F2B0244()
{
  return &unk_24C9FC7E8;
}

void sub_20F2B0250(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68818);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68818))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68810);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68818);
  }
  *a1 = qword_254A68810;
}

void sub_20F2B02EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68818);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68818);
  _Unwind_Resume(a1);
}

void sub_20F2B0344(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(__int128 **)(a2 + 200);
  v2 = *(__int128 **)(a2 + 208);
  if (v3 != v2)
  {
    v6 = a2 + 40;
    while (1)
    {
      v7 = *v3;
      v14 = *((_QWORD *)v3 + 2);
      v13 = v7;
      v8 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 48) + 1784), (uint64_t *)&v13);
      v10 = v8 ? (uint64_t)(v8 + 5) : 0;
      if (!v8
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 299, (uint64_t)"camera_pose_ref", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      if (*(double *)(*(_QWORD *)(v10 + 64) + 1424) > 0.0)
      {
        v11 = *((_QWORD *)v3 + 3);
        if (*(_BYTE *)(a2 + 192))
          v12 = v6;
        else
          v12 = 0;
        if (*(_DWORD *)(v12 + 48) == (_DWORD)v14
          && *(_QWORD *)(v12 + 32) == (_QWORD)v13
          && *(_DWORD *)(v12 + 40) == DWORD2(v13)
          && *(double *)(v12 + 88) == -1.79769313e308
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 311, (uint64_t)"!ExactlyEqual(track.getStructure()->anchor_row_measurement(), VIOAnchoredPoint3DBase<Float>::kInvalidAnchorRowMeasurement)", 122, (uint64_t)"The anchor row measurement has not been set in rolling-shutter compensation.", 76, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        v9.f64[0] = *(float *)(v11 + 12);
        sub_20F2B0AD8(a1, (int8x16_t **)v10, (uint64_t)&v13, v9);
      }
      v3 += 2;
      if (v3 == v2)
        return;
    }
    abort();
  }
}

uint64_t sub_20F2B04C8(__int128 *a1, double *a2, float64_t *a3, double **a4, float64_t **a5, unint64_t a6, uint64_t a7)
{
  float64x2_t v7;
  float64x2_t v8;
  double *v12;
  uint64_t v13;
  float64x2_t *v18;
  float64x2_t v20;
  double v21;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  int64x2_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v46;
  char *v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  int64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  int64x2_t v55;
  int64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  double v60;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;

  if (a6 < 2)
    return 0;
  v12 = a4[a7];
  *(double *)&v13 = sqrt(*v12 * *v12 + v12[1] * v12[1] + 1.0);
  *(double *)a1 = *v12 / *(double *)&v13;
  __asm { FMOV            V1.2D, #1.0 }
  _Q1.f64[0] = v12[1];
  *(__int128 *)((char *)a1 + 8) = (__int128)vdivq_f64(_Q1, (float64x2_t)vdupq_lane_s64(v13, 0));
  v18 = (float64x2_t *)a5[a7];
  _Q5 = v18[2];
  v20 = v18[4];
  v21 = v18[1].f64[1];
  _D16 = v18[3].f64[0];
  v23 = v18[3].f64[1];
  v24 = v18[5].f64[0];
  v25 = v18[5].f64[1];
  _D2 = -(vmuld_lane_f64(v21, *v18, 1) + vmuld_lane_f64(v23, _Q5, 1) + vmuld_lane_f64(v25, v20, 1));
  v27 = -(v18[1].f64[0] * v21 + _D16 * v23 + v24 * v25);
  v28 = *((double *)a1 + 2);
  _Q19 = *a1;
  v30 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v18, *(double *)a1), _Q5, *(float64x2_t *)a1, 1), v20, v28);
  __asm { FMLA            D5, D16, V19.D[1] }
  v31 = _Q5.f64[0] + v24 * v28;
  v32 = *a2;
  v33.f64[0] = 0.0;
  v33.f64[1] = *a3;
  v34 = (float64x2_t)vdupq_laneq_s64(v30, 1);
  v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v31, 0);
  *(_QWORD *)&v36 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  do
  {
    if (a7)
    {
      v37 = **a4;
      v38 = (*a4)[1];
      v39 = sqrt(v37 * v37 + v38 * v38 + 1.0);
      v40 = v37 / v39;
      v41 = v38 / v39;
      v72 = v40;
      v73 = v41;
      v42 = 1.0 / v39;
      v74 = v42;
      v43 = fabs(v41);
      v44 = fabs(v40);
      _NF = v43 < v44;
      if (v43 >= v44)
        v46 = v40;
      else
        v46 = v41;
      if (_NF)
        v47 = (char *)&v73;
      else
        v47 = (char *)&v72;
      if (fabs(v42) < fabs(v46))
        v47 = (char *)&v74;
      v75 = 0.0;
      v76 = 0.0;
      v77 = 0.0;
      *(double *)((char *)&v75 + v47 - (char *)&v72) = 1.0;
      v48.f64[0] = v41 * v77 - v42 * v76;
      v48.f64[1] = v42 * v75 - v40 * v77;
      _Q24.f64[0] = v40 * v76 - v41 * v75;
      v49 = sqrt(v48.f64[0] * v48.f64[0] + v48.f64[1] * v48.f64[1] + _Q24.f64[0] * _Q24.f64[0]);
      _Q25.f64[0] = 1.0 / v49;
      if (v49 == 0.0)
        _Q25.f64[0] = 1.0;
      v50 = vmulq_n_f64(v48, _Q25.f64[0]);
      v51 = (int64x2_t)vmulq_f64(_Q24, _Q25);
      v53.f64[0] = v41 * *(double *)v51.i64 - vmuld_lane_f64(v42, v50, 1);
      v52 = v42 * v50.f64[0] - v40 * *(double *)v51.i64;
      v8.f64[0] = vmuld_lane_f64(v40, v50, 1) - v41 * v50.f64[0];
      v53.f64[1] = v52;
      v54 = sqrt(v53.f64[0] * v53.f64[0] + v52 * v52 + v8.f64[0] * v8.f64[0]);
      if (v54 == 0.0)
        v7.f64[0] = 1.0;
      else
        v7.f64[0] = 1.0 / v54;
      v55 = (int64x2_t)vmulq_f64(v8, v7);
      v56 = (int64x2_t)vmulq_n_f64(v53, v7.f64[0]);
      v57.f64[0] = **a5;
      v58.f64[0] = (*a5)[1];
      v59 = (*a5)[2];
      v57.f64[1] = (*a5)[4];
      v58.f64[1] = (*a5)[5];
      v60 = (*a5)[10];
      _Q29 = *(_OWORD *)*a5;
      __asm { FMLA            D30, D2, V29.D[1] }
      *(double *)&_Q29 = _D30 + v59 * v27;
      _Q25.f64[1] = (*a5)[6];
      v63 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v57, *(double *)v30.i64), v34, v58), v35, _Q25);
      v64 = (float64x2_t)vzip1q_s64((int64x2_t)v50, v56);
      v65 = (float64x2_t)vzip2q_s64((int64x2_t)v50, v56);
      v66 = (float64x2_t)vzip1q_s64(v51, v55);
      v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, v63.f64[0]), v65, v63, 1), v66, (*a5)[8] * *(double *)v30.i64 + (*a5)[9] * v36 + v60 * v31);
      _Q23 = *((_OWORD *)*a5 + 2);
      __asm { FMLA            D25, D2, V23.D[1] }
      *(double *)&_Q23 = (*a5)[7] + _Q25.f64[0] + _Q25.f64[1] * v27;
      _Q24 = *(float64x2_t *)(*a5 + 8);
      __asm { FMLA            D25, D2, V24.D[1] }
      v8 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, (*a5)[3] + *(double *)&_Q29), v65, *(double *)&_Q23), v66, (*a5)[11] + _Q25.f64[0] + v60 * v27), v67, v32);
      v69 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v67, 8uLL);
      v8.f64[1] = v67.f64[1];
      v70 = vmulq_f64(v67, v8);
      v7 = (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL);
      v33 = vaddq_f64(v33, vaddq_f64(vmulq_f64(v7, v69), v70));
    }
    ++a4;
    ++a5;
    --a7;
    --a6;
  }
  while (a6);
  if (v33.f64[1] == 0.0)
    return 0;
  v71 = v32 - v33.f64[0] / v33.f64[1];
  if (v71 < 0.0)
    return 0;
  *a2 = v71;
  *a3 = v33.f64[1];
  return 1;
}

double sub_20F2B0804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  float64x2_t *v13;
  double v14;
  float64x2_t v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;

  v4 = a2 + 40;
  if (*(_BYTE *)(a2 + 192))
  {
    v5 = (_QWORD *)(a1 + 64);
    v6 = sub_20E9DF85C((_QWORD *)(a1 + 64), (uint64_t *)(a2 + 72));
    if (v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 432, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_36;
  }
  if (*(_BYTE *)(a2 + 192))
    v8 = v4;
  else
    v8 = 0;
  v5 = (_QWORD *)(a1 + 64);
  v6 = sub_20E9DF85C(v5, (uint64_t *)(v8 + 32));
  if (!v6)
  {
LABEL_9:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 435, (uint64_t)"anchorCameraIter != camera_data_.end()", 38, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))goto LABEL_10;
LABEL_36:
    abort();
  }
LABEL_10:
  if (*(_BYTE *)(a2 + 192))
    v9 = v4;
  else
    v9 = 0;
  v10 = *(_QWORD *)(a2 + 200);
  v11 = *(_QWORD *)(a2 + 208);
  if (v10 != v11)
  {
    v12 = *(int8x16_t *)(v9 + 8);
    v7.f64[0] = *(float64_t *)(v9 + 24);
    v26 = v7;
    v13 = (float64x2_t *)(v6 + 45);
    v14 = 1.0;
    v15.f64[0] = *(float64_t *)(v9 + 8);
    *(_QWORD *)&v15.f64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
    v25 = v15;
    v12.i64[1] = *(_QWORD *)&v15.f64[1];
    v24 = (float64x2_t)v12;
    while (1)
    {
      if (*(_BYTE *)(a2 + 192))
        v17 = v4;
      else
        v17 = 0;
      if (*(_DWORD *)(v17 + 48) != *(_DWORD *)(v10 + 16)
        || *(_QWORD *)(v17 + 32) != *(_QWORD *)v10
        || *(_DWORD *)(v17 + 40) != *(_DWORD *)(v10 + 8))
      {
        v18 = sub_20E9DF85C(v5, (uint64_t *)v10);
        if (!v18
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 448, (uint64_t)"invPoseIter != camera_data_.end()", 33, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_36;
        }
        v19.f64[0] = v13[1].f64[0];
        *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vsubq_f64(v19, v26);
        v21 = vsubq_f64(*v13, v25);
        v16 = 1.0;
        if (fabs(v21.f64[0]) >= 1.0e-10 || fabs(v21.f64[1]) >= 1.0e-10 || fabs(v19.f64[0]) >= 1.0e-10)
        {
          *(_QWORD *)&v20.f64[0] = v18[47];
          *(_QWORD *)&v20.f64[0] = *(_OWORD *)&vsubq_f64(v20, v26);
          v22 = vsubq_f64(*(float64x2_t *)(v18 + 45), v24);
          if (fabs(v22.f64[0]) >= 1.0e-10 || fabs(v22.f64[1]) >= 1.0e-10 || fabs(v20.f64[0]) >= 1.0e-10)
          {
            v21.f64[1] = *(double *)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).i64;
            v22.f64[1] = *(double *)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).i64;
            v16 = (vmulq_f64(v21, v22).f64[0] + v21.f64[1] * v22.f64[1] + v19.f64[0] * v20.f64[0])
                / sqrt((vmulq_f64(v21, v21).f64[0] + v21.f64[1] * v21.f64[1] + v19.f64[0] * v19.f64[0])* (vmulq_f64(v22, v22).f64[0] + v22.f64[1] * v22.f64[1] + v20.f64[0] * v20.f64[0]));
          }
        }
        if (v16 < v14)
          v14 = v16;
      }
      v10 += 32;
      if (v10 == v11)
        return v14;
    }
  }
  return 1.0;
}

int64x2_t sub_20F2B0AD8(uint64_t a1, int8x16_t **a2, uint64_t a3, float64x2_t a4)
{
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int8x16_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  double v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t *v27;
  double v28;
  double v29;
  int8x16_t v30;
  double v31;
  float64x2_t *v32;
  double v33;
  double v41;
  double v42;
  double cosval;
  uint64_t *v44;
  double v45;
  __double2 v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  double v67;
  float64x2_t v68;
  float64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int64x2_t v104;
  int64x2_t v106;
  int64x2_t v107;
  float64x2_t v110;
  int8x16_t v111;
  float64x2_t v112;
  float64x2_t v113;
  int64x2_t v114;
  int64x2_t result;
  int8x16_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  double v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  float64x2_t v127;
  double v128;
  float64_t v129;
  float64_t v130;
  double v131;
  double v132;
  float64x2_t v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  __int128 v141;
  float64x2_t v142;
  int8x16_t v143;

  v6 = *(_QWORD *)(a1 + 48);
  v9 = *(uint64_t **)(v6 + 56);
  v7 = (uint64_t *)(v6 + 56);
  v8 = v9;
  if (!v9)
    goto LABEL_22;
  v12 = **a2;
  v13 = vextq_s8(v12, v12, 8uLL).u64[0];
  v14 = vextq_s8(*(int8x16_t *)((char *)*a2 + 24), *(int8x16_t *)((char *)*a2 + 24), 8uLL).u64[0];
  v15 = vextq_s8((*a2)[3], (*a2)[3], 8uLL).u64[0];
  v16 = a2[2];
  v17 = *(double *)v16[1].i64;
  v18 = *v16;
  v19 = vextq_s8(v18, v18, 8uLL).u64[0];
  v20 = *(_QWORD *)a3;
  v21 = *(_DWORD *)(a3 + 8);
  v22 = v7;
  do
  {
    v23 = v8[4];
    if (v23 < v20)
    {
      ++v8;
    }
    else if (v23 == v20)
    {
      if (*((_DWORD *)v8 + 10) < v21)
        ++v8;
      else
        v22 = v8;
    }
    else
    {
      v22 = v8;
    }
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  if (v22 == v7 || (v24 = v22[4], v20 < v24) || v20 == v24 && *((_DWORD *)v22 + 10) > v21 || (v25 = v22[6]) == 0)
  {
LABEL_22:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 1197, (uint64_t)"state", 5, (uint64_t)"Query state dose not exist.", 27, (void (*)(void **))sub_21023DDB0);
    goto LABEL_23;
  }
  v26 = v25 + 768;
  v27 = a2[4];
  v28 = *(double *)v27[1].i64;
  v124 = *(float64x2_t *)v27;
  v29 = *(double *)&v27[2].i64[1];
  v30 = *(int8x16_t *)((char *)v27 + 24);
  v31 = *(double *)v27[4].i64;
  v127 = (float64x2_t)v27[3];
  v32 = (float64x2_t *)a2[6];
  v4.f64[0] = (a4.f64[0] - *(double *)&a2[8][89].i64[1]) * *(double *)a2[8][89].i64;
  a4.f64[0] = *(float64_t *)(v26 + 16);
  *(_QWORD *)&v33 = *(_OWORD *)&vmulq_f64(v4, a4);
  _Q1 = vmulq_n_f64(*(float64x2_t *)v26, v4.f64[0]);
  v5.f64[0] = *(float64_t *)(v26 + 40);
  _D0 = _Q1.f64[1];
  __asm { FMLA            D8, D0, V1.D[1] }
  v41 = vmlad_n_f64(_D8, v33, v33);
  v142 = (float64x2_t)(*a2)[3];
  v143 = **a2;
  v140 = *(double *)(*a2)[4].i64;
  v141 = *(__int128 *)((char *)&(*a2)[1] + 8);
  v138 = *(double *)&v15;
  v139 = *(double *)&v13;
  v136 = *(double *)&v14;
  v137 = *(double *)(*a2)[1].i64;
  v134 = *(double *)&(*a2)[2].i64[1];
  v135 = v17;
  v132 = *(double *)&v19;
  v133 = (float64x2_t)v18;
  v130 = v28;
  v131 = v31;
  v128 = v32[1].f64[0];
  v129 = v29;
  v125 = _Q1;
  v126 = v33;
  v119 = v5;
  v120 = v4;
  v117 = *v32;
  v118 = *(float64x2_t *)(v26 + 24);
  v116 = v30;
  if (v41 >= 0.0000002635)
  {
    v45 = sqrt(v41);
    v123 = v41;
    v46 = __sincos_stret(v45);
    cosval = v46.__cosval;
    v47 = 1.0 / v123;
    v42 = v46.__sinval / v45;
    v48.f64[0] = 1.0 / v123 * (1.0 - v46.__cosval);
    v122 = v48;
    v48.f64[0] = v47 * (1.0 - v42);
    v121 = v48;
    v44 = sub_20E9DF85C((_QWORD *)(a1 + 64), (uint64_t *)a3);
    if (!v44)
      goto LABEL_20;
  }
  else
  {
    *(double *)v12.i64 = 0.5 - v41 * (v41 / -720.0 + 0.0416666667);
    a4.f64[0] = 0.166666667 - v41 * (v41 / -5040.0 + 0.00833333333);
    v121 = a4;
    v122 = (float64x2_t)v12;
    v42 = 1.0 - v41 * a4.f64[0];
    cosval = 1.0 - v41 * *(double *)v12.i64;
    v44 = sub_20E9DF85C((_QWORD *)(a1 + 64), (uint64_t *)a3);
    if (!v44)
    {
LABEL_20:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 1208, (uint64_t)"data_iter != camera_data_.end()", 31, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))goto LABEL_21;
LABEL_23:
      abort();
    }
  }
LABEL_21:
  v49 = v124;
  *(_QWORD *)&v50.f64[0] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  v51 = *(double *)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).i64;
  *(_QWORD *)&v50.f64[1] = vextq_s8(v116, v116, 8uLL).u64[0];
  v52 = (float64x2_t)vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL);
  *(_QWORD *)&v49.f64[1] = v116.i64[0];
  v53 = vmlaq_n_f64(vmulq_n_f64(v49, v117.f64[0]), v50, v52.f64[0]);
  v52.f64[0] = vmulq_f64(v127, v117).f64[0] + v51 * v52.f64[0];
  v54 = v118;
  *(_QWORD *)&v54.f64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
  v55.f64[0] = v120.f64[0];
  v55.f64[1] = v120.f64[0];
  v56 = vmulq_f64(v55, v54);
  v57 = (float64x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL);
  v58 = vmulq_f64(v120, v119);
  v59 = vsubq_f64(vmulq_laneq_f64(v125, v56, 1), vmulq_f64(v57, v56));
  v60.f64[0] = v57.f64[0];
  v60.f64[1] = v126;
  v54.f64[0] = v58.f64[0];
  v54.f64[1] = v56.f64[0];
  v61.f64[0] = v126;
  v61.f64[1] = v125.f64[0];
  v62 = vsubq_f64(vmulq_f64(v60, v54), vmulq_f64(v61, (float64x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v58, 8uLL)));
  v63 = vmulq_f64(v122, v59);
  v64 = (float64x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v59, 8uLL);
  v59.f64[1] = v62.f64[0];
  v65 = vaddq_f64(vaddq_f64(v56, vmulq_n_f64(v62, v122.f64[0])), vmulq_n_f64(vsubq_f64(vmulq_f64(v60, v59), vmulq_f64(v61, v64)), v121.f64[0]));
  v59.f64[0] = v57.f64[0] * (v125.f64[0] * v122.f64[0]);
  v66 = v59.f64[0] - v126 * v42;
  v67 = v59.f64[0] + v126 * v42;
  v68 = vmlaq_laneq_f64(vmulq_n_f64(v49, v65.f64[0]), v50, v65, 1);
  v69 = v57.f64[0] * v42;
  v70 = v126 * (v57.f64[0] * v122.f64[0]);
  v71 = v70 - v125.f64[0] * v42;
  v72 = v126 * (v125.f64[0] * v122.f64[0]);
  v73 = v72 + v57.f64[0] * v42;
  v74 = vmlaq_n_f64(vmulq_n_f64(v49, v73), v50, v71);
  v75 = v57.f64[0] * (v57.f64[0] * v122.f64[0]) + cosval;
  v76 = vmlaq_n_f64(vmulq_n_f64(v49, v66), v50, v75);
  v77 = v125.f64[0] * (v125.f64[0] * v122.f64[0]) + cosval;
  v78 = vmlaq_n_f64(vmulq_n_f64(v49, v77), v50, v67);
  v79 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v127.f64[0], v65.f64[0]), (float64x2_t)*(unint64_t *)&v51, v65, 1);
  v80 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v127.f64[0], v73), (float64x2_t)*(unint64_t *)&v51, v71);
  v81 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v127.f64[0], v66), (float64x2_t)*(unint64_t *)&v51, v75);
  v82 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v127.f64[0], v77), (float64x2_t)*(unint64_t *)&v51, v67);
  v83 = vaddq_f64(v58, v63);
  v84.f64[0] = v130;
  v84.f64[1] = v129;
  v85 = vmlaq_n_f64(v53, v84, v128);
  v52.f64[0] = v52.f64[0] + v131 * v128;
  __asm { FMOV            V5.2D, #1.0 }
  *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vnegq_f64(v52);
  *(_QWORD *)&v83.f64[0] = *(_OWORD *)&vaddq_f64(v83, vmulq_f64(v121, vsubq_f64(vmulq_laneq_f64(v125, v62, 1), vmulq_f64(v57, v62))));
  v52.f64[0] = v126 * (v126 * v122.f64[0]) + cosval;
  v57.f64[0] = v70 + v125.f64[0] * v42;
  v62.f64[0] = v139;
  v62.f64[1] = v136;
  *(_QWORD *)&v63.f64[0] = v143.i64[0];
  *(_QWORD *)&v63.f64[1] = v141;
  v87 = vmlaq_n_f64(vmulq_n_f64(v63, v133.f64[0]), v62, v132);
  v62.f64[0] = v137;
  v62.f64[1] = v134;
  v88 = vmlaq_n_f64(v87, v62, v135);
  v89 = vmlsq_laneq_f64(vmlaq_n_f64(v68, v84, v83.f64[0]), v85, (float64x2_t)xmmword_2103AB270, 1);
  v90 = vmlsq_laneq_f64(vmlaq_n_f64(v74, v84, v52.f64[0]), v85, (float64x2_t)xmmword_2103AB250, 1);
  v91 = vmlsq_laneq_f64(vmlaq_n_f64(v76, v84, v57.f64[0]), v85, (float64x2_t)xmmword_2103AB230, 1);
  v92 = vmlsq_laneq_f64(vmlaq_n_f64(v78, v84, v72 - v69), v85, (float64x2_t)xmmword_2103AB210, 1);
  v93 = vmlaq_laneq_f64(vmlaq_n_f64(v79, (float64x2_t)*(unint64_t *)&v131, v83.f64[0]), _Q5, (float64x2_t)xmmword_2103AB270, 1);
  v94 = vmlaq_laneq_f64(vmlaq_n_f64(v80, (float64x2_t)*(unint64_t *)&v131, v52.f64[0]), _Q5, (float64x2_t)xmmword_2103AB250, 1);
  v95 = vmlaq_laneq_f64(vmlaq_n_f64(v81, (float64x2_t)*(unint64_t *)&v131, v57.f64[0]), _Q5, (float64x2_t)xmmword_2103AB230, 1);
  v96 = vmlaq_laneq_f64(vmlaq_n_f64(v82, (float64x2_t)*(unint64_t *)&v131, v72 - v69), _Q5, (float64x2_t)xmmword_2103AB210, 1);
  *(_QWORD *)&v83.f64[0] = *(_OWORD *)&vnegq_f64(v88);
  v97 = vmlsq_laneq_f64(vmulq_n_f64(v92, v83.f64[0]), v91, v88, 1);
  v98 = vmlsq_laneq_f64(vmulq_n_f64(v96, v83.f64[0]), v95, v88, 1);
  v99 = vmlaq_n_f64(vmulq_n_f64(v92, v137), v91, v134);
  v100 = vmlaq_n_f64(vmulq_n_f64(v92, v139), v91, v136);
  v101 = vmlaq_n_f64(vmulq_n_f64(v92, *(double *)v143.i64), v91, *(double *)&v141);
  v92.f64[0] = vmulq_f64(v142, v133).f64[0] + v138 * v132 + v140 * v135;
  _Q3 = vaddq_f64(v89, vmlsq_lane_f64(v97, v90, v92.f64[0], 0));
  _Q4 = (int64x2_t)vaddq_f64(v93, vmlsq_lane_f64(v98, v94, v92.f64[0], 0));
  v104 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v99, v90, v140), (float64x2_t)0, v89);
  _Q0 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, v137), v95, v134), v94, v140), (float64x2_t)0, v93);
  v106 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v100, v90, v138), (float64x2_t)0, v89);
  v107 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, v139), v95, v136), v94, v138), (float64x2_t)0, v93);
  _Q7 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v101, v90, v142.f64[0]), (float64x2_t)0, v89);
  _Q19 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, *(double *)v143.i64), v95, *(double *)&v141), v94, v142.f64[0]), (float64x2_t)0, v93);
  *(int64x2_t *)(v44 + 19) = _Q19;
  *(int64x2_t *)(v44 + 17) = _Q7;
  *(int64x2_t *)(v44 + 23) = v107;
  *(int64x2_t *)(v44 + 21) = v106;
  v110 = (float64x2_t)vzip2q_s64(_Q7, v106);
  v111 = vextq_s8((int8x16_t)v110, (int8x16_t)vdupq_laneq_s64(v104, 1), 8uLL);
  v112 = (float64x2_t)vzip1q_s64(_Q7, v106);
  v113 = (float64x2_t)vzip1q_s64(_Q19, v107);
  _Q19.i64[0] = v104.i64[1];
  *(_QWORD *)&v92.f64[0] = vdupq_lane_s64(*(uint64_t *)&v110.f64[0], 0).u64[0];
  __asm { FMLS            D7, D19, V3.D[1] }
  *(_QWORD *)&v92.f64[1] = v111.i64[0];
  __asm { FMLS            D7, D0, V4.D[0] }
  _Q7.i64[1] = 1.0;
  *(float64x2_t *)(v44 + 37) = v92;
  *(_OWORD *)(v44 + 39) = v111.u64[1];
  *(float64x2_t *)(v44 + 45) = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v112, vnegq_f64(_Q3).f64[0]), v110, _Q3, 1), v113, *(double *)_Q4.i64, 0);
  *(int64x2_t *)(v44 + 47) = _Q7;
  *(float64x2_t *)(v44 + 33) = v112;
  *(_OWORD *)(v44 + 35) = v104.u64[0];
  *(int64x2_t *)(v44 + 25) = v104;
  *(float64x2_t *)(v44 + 29) = _Q3;
  *(float64x2_t *)(v44 + 5) = v112;
  v114 = vzip2q_s64(v104, (int64x2_t)_Q3);
  v104.i64[1] = *(_QWORD *)&_Q3.f64[0];
  *(int64x2_t *)(v44 + 7) = v104;
  *(float64x2_t *)(v44 + 9) = v110;
  *(int64x2_t *)(v44 + 11) = v114;
  *(float64x2_t *)(v44 + 41) = v113;
  *(_OWORD *)(v44 + 43) = _Q0.u64[0];
  *(float64x2_t *)(v44 + 13) = v113;
  *(int64x2_t *)(v44 + 27) = _Q0;
  *(int64x2_t *)(v44 + 31) = _Q4;
  result = vzip1q_s64(_Q0, _Q4);
  *(int64x2_t *)(v44 + 15) = result;
  return result;
}

_QWORD *sub_20F2B116C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = a1 + 87;
  v3 = (_QWORD *)a1[90];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[86];
  if (v5 == a1 + 83)
  {
    v6 = 4;
    v5 = a1 + 83;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[82];
  if (v7 == a1 + 79)
  {
    v8 = 4;
    v7 = a1 + 79;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[78];
  if (v9 == a1 + 75)
  {
    v10 = 4;
    v9 = a1 + 75;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  a1[73] = 0;
  v11 = (_QWORD *)a1[71];
  if (v11 != a1 + 7 && v11)
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  return a1;
}

_QWORD *sub_20F2B1278(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C9FC808;
  v2 = a1[159];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  return sub_20F2B12C0(a1);
}

_QWORD *sub_20F2B12C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = off_24C9FC938;
  v2 = a1[153];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[150];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[147];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  *a1 = &unk_24C9FC9F8;
  sub_20F2B4064(a1 + 76);
  v5 = (void *)a1[73];
  if (v5)
  {
    a1[74] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[70];
  if (v6)
  {
    a1[71] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[66];
  if (v7)
  {
    a1[67] = v7;
    operator delete(v7);
  }
  return sub_20F2B1FF8(a1);
}

void sub_20F2B1384(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v5, "DenseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_20F2B1450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2B148C(uint64_t a1)
{
  float64x2_t v2;
  double v3;
  float64x2_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[5];
  int v20;
  std::mutex v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_20F2B4898(a1))
  {
    v5 = 1;
  }
  else if (*(_BYTE *)(a1 + 297))
  {
    v5 = 0;
  }
  else
  {
    v6 = *(void **)(a1 + 384);
    v7 = *(_QWORD *)(a1 + 392) - (_QWORD)v6;
    if (v7 >= 1)
      bzero(v6, 8 * (((unint64_t)v7 >> 3) - ((unint64_t)v7 > 7)) + 8);
    v8 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v8)
      bzero(*(void **)(a1 + 336), 8 * v8);
    if (((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0)
    {
      kdebug_trace();
      sub_20F2B4B4C((int32x2_t *)(a1 + 608), a1 + 336);
      kdebug_trace();
    }
    v9 = *(_QWORD *)(a1 + 520);
    v19[0] = *(_QWORD *)(a1 + 512);
    v19[1] = a1 + 560;
    v19[2] = a1 + 8;
    v19[3] = v9;
    v19[4] = 0;
    v20 = 2;
    v21.__m_.__sig = 850045863;
    v10 = 0uLL;
    memset(v21.__m_.__opaque, 0, sizeof(v21.__m_.__opaque));
    v16 = v9;
    v17 = v9;
    v11 = *(_QWORD *)(v19[0] + 104);
    v12 = *(_QWORD *)(v19[0] + 112);
    v14[0] = v19;
    v14[1] = &v15;
    v14[2] = a1 + 8;
    v14[3] = &v18;
    v14[4] = &v17;
    for (v14[5] = &v16; v11 != v12; v11 += 152)
      v10.f64[0] = sub_20F2BF2A4(v14, v11, v10, v2, v3, v4);
    std::mutex::~mutex(&v21);
    v5 = 0;
    *(_WORD *)(a1 + 297) = 1;
  }
  kdebug_trace();
  return v5;
}

void sub_20F2B1694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2B16E0(uint64_t a1, void **a2)
{
  int v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  double *v18;
  unsigned int v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = (uint64_t *)(a1 + 1176);
  sub_20F2BF61C(a1 + 336, (unsigned int **)(a1 + 584), (void **)(a1 + 1176), 1u, v5);
  if (*(_BYTE *)(a1 + 312))
  {
    v7 = *(_DWORD *)(a1 + 328);
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 160))(a1, a2);
      v14 = *(_DWORD *)(a1 + 1192);
      LODWORD(v15) = *(_DWORD *)(a1 + 1196);
      if (v15 >= v14)
        v15 = v14;
      else
        v15 = v15;
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = *(double *)(a1 + 320);
        v18 = (double *)*a2;
        v19 = v14 + 1;
        v20 = *v6;
        do
        {
          v21 = *v18++;
          *(double *)(v20 + 8 * v16) = v17 * v21 + *(double *)(v20 + 8 * v16);
          v16 += v19;
          --v15;
        }
        while (v15);
      }
    }
    else if (!v7)
    {
      v8 = *(_DWORD *)(a1 + 1192);
      LODWORD(v9) = *(_DWORD *)(a1 + 1196);
      v9 = v9 >= v8 ? v8 : v9;
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *(double *)(a1 + 320);
        v12 = v8 + 1;
        v13 = *v6;
        do
        {
          *(double *)(v13 + 8 * v10) = v11 + *(double *)(v13 + 8 * v10);
          v10 += v12;
          --v9;
        }
        while (v9);
      }
    }
  }
  v22 = *(unsigned int *)(a1 + 1192);
  *((_DWORD *)a2 + 4) = v22;
  if ((unint64_t)a2[1] < v22)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v23 = (8 * v22 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v23 >> 3);
    *a2 = operator new(v23, (std::align_val_t)0x20uLL);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2);
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v24 = 1;
  }
  else
  {
    v24 = 0;
    *(_BYTE *)(a1 + 301) = 0;
  }
  kdebug_trace();
  return v24;
}

void sub_20F2B193C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_20EDB4044((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20F2B1954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB4004((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2B1968(uint64_t a1)
{
  return a1 + 1200;
}

double sub_20F2B1970(uint64_t a1)
{
  double v2;

  v2 = 0.0;
  sub_20F2BFA00(a1 + 608, &v2);
  return v2;
}

uint64_t sub_20F2B199C(uint64_t result)
{
  uint64_t v1;
  double v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  v2 = 0.0;
  while (v1 != *(_QWORD *)(result + 56))
  {
    v3 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v3 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v3 + 20))
        v2 = v2 + *(double *)(v3 + 32) * *(double *)(v3 + 32);
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_20F2B19DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t result;

  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 512);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if (v5 != v6)
  {
    v7 = *a2;
    do
    {
      v8 = *(double **)(v5 + 8);
      v9 = *(unsigned int *)v8;
      if ((_DWORD)v9 != -1)
      {
        v10 = v8[4];
        v8[5] = v10;
        v8[4] = v10 + *(double *)(v7 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * v9));
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 298) = *(_BYTE *)(a1 + 297);
  *(_BYTE *)(a1 + 301) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 299) = 0;
  return result;
}

BOOL sub_20F2B1AA4(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v7;

  v4 = a1 + 1264;
  v7 = a1 + 1176;
  sub_20F2C01AC(a1 + 1264, &v7);
  v5 = *(_DWORD *)(a1 + 1264);
  *(_BYTE *)(a1 + 296) = v5 == 0;
  if (v5)
    return 1;
  sub_20F2BFF60(v4, (uint64_t)a2, a2);
  return *(_BYTE *)(a1 + 296) == 0;
}

uint64_t sub_20F2B1B34()
{
  return 1;
}

uint64_t sub_20F2B1B3C()
{
  return 0;
}

void sub_20F2B1B44(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C9FC808;
  v2 = a1[159];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  sub_20F2B12C0(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20F2B1BA0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  double v9;

  v1 = *(unsigned int *)(a1 + 376);
  if (!(_DWORD)v1)
    return 0.0;
  v2 = 0;
  v3 = *(_QWORD *)(a1 + 456);
  result = 0.0;
  do
  {
    v5 = *(unsigned int **)(v3 + 24 * v2);
    v6 = *(unsigned int **)(v3 + 24 * v2 + 8);
    if (v6 != v5)
    {
      while (1)
      {
        v7 = *v5;
        if (v2 <= v7)
          break;
        v5 += 4;
        if (v5 == v6)
          goto LABEL_3;
      }
      if (v5 != v6 && v2 == v7)
      {
        v8 = *(_QWORD *)(a1 + 384);
        if (v8)
        {
          v9 = fabs(*(double *)(v8 + 8 * *((_QWORD *)v5 + 1)));
          if (result < v9)
            result = v9;
        }
      }
    }
LABEL_3:
    ++v2;
  }
  while (v2 != v1);
  return result;
}

uint64_t sub_20F2B1C30(uint64_t result, double a2)
{
  *(double *)(result + 320) = a2;
  return result;
}

uint64_t sub_20F2B1C38(uint64_t result, char a2)
{
  *(_BYTE *)(result + 816) = a2;
  return result;
}

uint64_t sub_20F2B1C40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 816);
}

BOOL sub_20F2B1C48(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_20F2B1C60(uint64_t a1)
{
  return a1 + 640;
}

uint64_t sub_20F2B1C68(uint64_t a1)
{
  return a1 + 640;
}

double sub_20F2B1C70(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a2 + 16) = v4;
    if (*(_QWORD *)(a2 + 8) < v4)
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v5 >> 3;
      *(_QWORD *)a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  v7 = *(unsigned int *)(a1 + 360);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 364);
    do
    {
      result = *(double *)(*(_QWORD *)(a1 + 336) + 8 * (v9 + v8));
      *(double *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * v8++)) = result;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_20F2B1D2C(uint64_t a1, void **a2)
{
  sub_20F2C02A4(a1 + 368, a2, (_QWORD *)(a1 + 584), 1);
}

BOOL sub_20F2B1D40(uint64_t a1)
{
  return sub_20F2C0404((uint64_t *)(a1 + 1224), a1);
}

uint64_t sub_20F2B1D4C(uint64_t a1)
{
  uint64_t v7;

  *(_QWORD *)a1 = &unk_24C9FCB68;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = _Q0;
  v7 = a1 + 40;
  sub_20F2B2108(a1 + 40);
  *(_WORD *)(a1 + 300) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)a1 = &unk_24C9FCAB0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 480) = sub_20F2B36B4((_QWORD *)(a1 + 368), 0, 0, 0);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)a1 = &unk_24C9FC9F8;
  *(_QWORD *)(a1 + 512) = v7;
  *(_QWORD *)(a1 + 520) = a1 + 336;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = off_24C9FCDD0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 784) = sub_20F2B36B4((_QWORD *)(a1 + 672), 0, 0, 0);
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_WORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_QWORD *)(a1 + 608) = &off_24C9FCD68;
  *(_QWORD *)(a1 + 1168) = a1 + 512;
  return a1;
}

void sub_20F2B1EC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;

  v5 = v3;
  if (*v5)
  {
    MEMORY[0x212BC6368](*v5, 0x1000C8000313F17);
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_20F2B1FA8(v2);
      sub_20F2B1FF8(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v7 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  sub_20F2B1FA8(v2);
  sub_20F2B1FF8(v1);
  _Unwind_Resume(a1);
}

void sub_20F2B1F40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v5 = v1[42];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  *v1 = v2;
  sub_20F2B35B8(v3);
  _Unwind_Resume(a1);
}

void sub_20F2B1F74(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "DenseHessian");
}

_QWORD *sub_20F2B1FA8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20F2B1FF8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  *a1 = &unk_24C9FCAB0;
  v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  a1[46] = off_24C9FCCA8;
  v3 = a1[57];
  if (v3)
  {
    v4 = a1[58];
    v5 = (void *)a1[57];
    if (v4 != v3)
    {
      v6 = a1[58];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[57];
    }
    a1[58] = v3;
    operator delete(v5);
  }
  a1[46] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 51));
  v9 = (void *)a1[48];
  if (v9)
  {
    a1[49] = v9;
    operator delete(v9);
  }
  v10 = a1[42];
  if (v10)
    MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  *a1 = &unk_24C9FCB68;
  sub_20F2B35B8(a1 + 5);
  return a1;
}

double sub_20F2B20F0()
{
  return 0.0;
}

uint64_t sub_20F2B2108(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24C9FCBD8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 16842753;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  v2 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 160) = v2;
  *(_QWORD *)(a1 + 168) = v2;
  *(_QWORD *)(a1 + 176) = v2 + 256;
  v3 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 184) = v3;
  *(_QWORD *)(a1 + 192) = v3;
  *(_QWORD *)(a1 + 200) = v3 + 256;
  v4 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 208) = v4;
  *(_QWORD *)(a1 + 216) = v4;
  *(_QWORD *)(a1 + 224) = v4 + 256;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  return a1;
}

void sub_20F2B21CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v6;

  v4 = v3;
  *(_QWORD *)(v1 + 192) = v4;
  operator delete(v4);
  v6 = *(void **)(v1 + 160);
  if (v6)
  {
    *(_QWORD *)(v1 + 168) = v6;
    operator delete(v6);
  }
  sub_20F2B2214((void **)(v1 + 104));
  sub_20F2B22AC(v2);
  _Unwind_Resume(a1);
}

void **sub_20F2B2214(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 152;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F2B22AC(uint64_t a1)
{
  void *v2;

  sub_20F2B23DC(a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F2B22E8(_QWORD *a1)
{
  sub_20F2B35B8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2B230C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 136);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F2B2374(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 128);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F2B23DC(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F2B2664((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F2B24F4(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F2B24F4(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 48 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 48 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F2B2664(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F2B2E08(v10, v57);
          v10 = v57 + 1;
          result = sub_20F2B2E08(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F2B2664(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F2B2E08(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

unint64_t *sub_20F2B3110(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= v7)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    v8 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= *a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*a3 >= v6)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v9 = *a4;
  if (*a4 >= v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    v11 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        v15 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *sub_20F2B324C(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    v33 = (unint64_t)(v4 - 2) >> 1;
    v34 = v33;
    do
    {
      if (v33 >= v34)
      {
        v35 = (2 * v34) | 1;
        v36 = &a1[8 * v35];
        if (2 * v34 + 2 >= v4)
        {
          v37 = *(_QWORD *)v36;
          v39 = &a1[8 * v34];
          v40 = *(_QWORD *)v39;
          if (*(_QWORD *)v36 >= *(_QWORD *)v39)
            goto LABEL_71;
        }
        else
        {
          v37 = *((_QWORD *)v36 + 1);
          v38 = *(_QWORD *)v36 >= v37;
          if (*(_QWORD *)v36 < v37)
            v36 += 8;
          else
            v37 = *(_QWORD *)v36;
          if (!v38)
            v35 = 2 * v34 + 2;
          v39 = &a1[8 * v34];
          v40 = *(_QWORD *)v39;
          if (v37 >= *(_QWORD *)v39)
          {
LABEL_71:
            while (1)
            {
              *(_QWORD *)v39 = v37;
              v39 = v36;
              if (v33 < v35)
                break;
              v41 = (2 * v35) | 1;
              v36 = &a1[8 * v41];
              v35 = 2 * v35 + 2;
              if (v35 < v4)
              {
                v37 = *(_QWORD *)v36;
                if (*(_QWORD *)v36 >= *((_QWORD *)v36 + 1))
                {
                  v35 = v41;
                }
                else
                {
                  v37 = *((_QWORD *)v36 + 1);
                  v36 += 8;
                }
                if (v37 < v40)
                  break;
              }
              else
              {
                v37 = *(_QWORD *)v36;
                v35 = v41;
                if (*(_QWORD *)v36 < v40)
                  break;
              }
            }
            *(_QWORD *)v39 = v40;
          }
        }
      }
      v19 = v34-- <= 0;
    }
    while (!v19);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      v6 = *(_QWORD *)a1;
      v7 = a2;
      do
      {
        v8 = *(_QWORD *)v7;
        if (*(_QWORD *)v7 < v6)
        {
          *(_QWORD *)v7 = v6;
          *(_QWORD *)a1 = v8;
          v6 = v8;
        }
        v7 += 8;
      }
      while (v7 != a3);
LABEL_33:
      v5 = a3;
      goto LABEL_34;
    }
    v9 = (unint64_t *)(a1 + 16);
    v10 = a2;
    while (1)
    {
      v11 = *(_QWORD *)v10;
      if (*(_QWORD *)v10 < *(_QWORD *)a1)
      {
        *(_QWORD *)v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v11;
        v12 = *((_QWORD *)a1 + 1);
        if (v3 == 16)
        {
          v13 = a1 + 8;
          v14 = 1;
          if (v12 >= v11)
            goto LABEL_24;
        }
        else
        {
          v15 = v12 >= *v9;
          if (v12 >= *v9)
          {
            v13 = a1 + 8;
          }
          else
          {
            v12 = *v9;
            v13 = a1 + 16;
          }
          if (v15)
            v14 = 1;
          else
            v14 = 2;
          if (v12 >= v11)
          {
LABEL_24:
            v16 = a1;
            while (1)
            {
              *(_QWORD *)v16 = v12;
              v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14)
                break;
              v17 = (2 * v14) | 1;
              v13 = &a1[8 * v17];
              v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                v12 = *(_QWORD *)v13;
                if (*(_QWORD *)v13 >= *((_QWORD *)v13 + 1))
                {
                  v14 = v17;
                }
                else
                {
                  v12 = *((_QWORD *)v13 + 1);
                  v13 += 8;
                }
                if (v12 < v11)
                  break;
              }
              else
              {
                v12 = *(_QWORD *)v13;
                v14 = v17;
                if (*(_QWORD *)v13 < v11)
                  break;
              }
            }
            *(_QWORD *)v16 = v11;
          }
        }
      }
      v10 += 8;
      if (v10 == a3)
        goto LABEL_33;
    }
  }
LABEL_34:
  if (v3 >= 9)
  {
    v18 = (unint64_t)v3 >> 3;
    do
    {
      v20 = 0;
      v21 = *(_QWORD *)a1;
      v22 = (unint64_t)(v18 - 2) >> 1;
      v23 = a1;
      do
      {
        while (1)
        {
          v25 = &v23[8 * v20 + 8];
          v26 = (2 * v20) | 1;
          v20 = 2 * v20 + 2;
          if (v20 < v18)
            break;
          v20 = v26;
          *(_QWORD *)v23 = *(_QWORD *)v25;
          v23 = v25;
          if (v26 > v22)
            goto LABEL_45;
        }
        v24 = *(_QWORD *)v25;
        if (*(_QWORD *)v25 >= *((_QWORD *)v25 + 1))
        {
          v20 = v26;
        }
        else
        {
          v24 = *((_QWORD *)v25 + 1);
          v25 += 8;
        }
        *(_QWORD *)v23 = v24;
        v23 = v25;
      }
      while (v20 <= v22);
LABEL_45:
      a2 -= 8;
      if (v25 == a2)
      {
        *(_QWORD *)v25 = v21;
      }
      else
      {
        *(_QWORD *)v25 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v21;
        v27 = v25 - a1 + 8;
        if (v27 >= 9)
        {
          v28 = (((unint64_t)v27 >> 3) - 2) >> 1;
          v29 = &a1[8 * v28];
          v30 = *(_QWORD *)v29;
          v31 = *(_QWORD *)v25;
          if (*(_QWORD *)v29 < *(_QWORD *)v25)
          {
            do
            {
              *(_QWORD *)v25 = v30;
              v25 = v29;
              if (!v28)
                break;
              v28 = (v28 - 1) >> 1;
              v29 = &a1[8 * v28];
              v30 = *(_QWORD *)v29;
            }
            while (*(_QWORD *)v29 < v31);
            *(_QWORD *)v25 = v31;
          }
        }
      }
      v19 = v18-- <= 2;
    }
    while (!v19);
  }
  return v5;
}

_QWORD *sub_20F2B35B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  *a1 = &off_24C9FCBD8;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  v6 = a1[13];
  if (v6)
  {
    v7 = a1[14];
    v8 = (void *)a1[13];
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 16);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 152;
      }
      while (v7 != v6);
      v8 = (void *)a1[13];
    }
    a1[14] = v6;
    operator delete(v8);
  }
  sub_20F2B23DC((uint64_t)(a1 + 4));
  v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_20F2B36B4(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = (_QWORD *)sub_20F2B3854((uint64_t)a1, a2, a3);
  *v6 = &off_24C9FCC08;
  v7 = (_BYTE *)v6[2];
  v8 = a4;
  if (a4 <= (unint64_t)((uint64_t)(v6[4] - (_QWORD)v7) >> 3))
    return a1;
  v9 = (_BYTE *)a1[3];
  v10 = (char *)operator new(8 * v8);
  v11 = v9 - v7;
  v12 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
  v13 = v12;
  if (v9 != v7)
  {
    if ((unint64_t)(v11 - 8) < 0x58)
    {
      v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v22 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v13 - 1) = v22;
        v13 -= 8;
      }
      while (v9 != v7);
      goto LABEL_10;
    }
    v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
    if (v9 - v10 - (v11 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_9;
    v14 = v11 >> 3;
    v15 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v9[-v16];
    v13 = &v12[-v16];
    v18 = &v10[8 * v14 - 16];
    v19 = (__int128 *)(v9 - 16);
    v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v9 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  a1[2] = v13;
  a1[3] = v12;
  a1[4] = &v10[8 * v8];
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_20F2B37CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *v1 = off_24C9FCCA8;
  v3 = v1[11];
  if (v3)
  {
    v4 = v1[12];
    v5 = (void *)v1[11];
    if (v4 != v3)
    {
      v6 = v1[12];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[11];
    }
    v1[12] = v3;
    operator delete(v5);
  }
  *v1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(v1 + 5));
  v9 = (void *)v1[2];
  if (v9)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F2B3854(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_24C9FCCA8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (a3)
  {
    sub_20F0B7BF8(a1 + 88, a3);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 96);
    if (v5 != v6)
    {
      v7 = 16 * a2;
      v8 = a2;
      do
      {
        v9 = *(_BYTE **)v5;
        if (v8 > (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)v5) >> 4)
        {
          v10 = *(_BYTE **)(v5 + 8);
          v11 = (char *)operator new(v7);
          v12 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
          v13 = v12;
          if (v10 != v9)
          {
            v14 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
            do
            {
              v13 = v14 - 16;
              *((_OWORD *)v14 - 1) = *((_OWORD *)v10 - 1);
              v10 -= 16;
              v14 -= 16;
            }
            while (v10 != v9);
          }
          *(_QWORD *)v5 = v13;
          *(_QWORD *)(v5 + 8) = v12;
          *(_QWORD *)(v5 + 16) = &v11[16 * v8];
          if (v9)
            operator delete(v9);
        }
        v5 += 24;
      }
      while (v5 != v6);
    }
  }
  return a1;
}

void sub_20F2B3964(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  sub_20E9DD680(v2);
  sub_20F2B3EC0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F2B3984(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F2B3A28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20F2B3ADC(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  a1[1] = 0;
  v2 = (void **)a1[6];
  v3 = a1[7];
  a1[10] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[7];
      v2 = (void **)(a1[6] + 8);
      a1[6] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  a1[9] = v6;
LABEL_8:
  a1[3] = a1[2];
  v8 = a1[11];
  v7 = a1[12];
  if (v7 != v8)
  {
    v9 = a1[12];
    do
    {
      v11 = *(void **)(v9 - 24);
      v9 -= 24;
      v10 = v11;
      if (v11)
      {
        *(_QWORD *)(v7 - 16) = v10;
        operator delete(v10);
      }
      v7 = v9;
    }
    while (v9 != v8);
  }
  a1[12] = v8;
}

void sub_20F2B3B9C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  if (*(_DWORD *)(a1 + 12) == a3)
    goto LABEL_4;
  v8 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v6 = a1 + 88;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3);
  if (a3 > v9)
  {
    sub_20F0B7BF8(v6, a3 - v9);
LABEL_4:
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = a3;
    return;
  }
  if (a3 >= v9)
    goto LABEL_4;
  v10 = v8 + 24 * a3;
  if (v7 != v10)
  {
    v11 = *(_QWORD *)(a1 + 96);
    do
    {
      v13 = *(void **)(v11 - 24);
      v11 -= 24;
      v12 = v13;
      if (v13)
      {
        *(_QWORD *)(v7 - 16) = v12;
        operator delete(v12);
      }
      v7 = v11;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(a1 + 96) = v10;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
}

BOOL sub_20F2B3C64(_QWORD *a1, unsigned int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = a2;
  v6 = a3 * a2;
  if (v4 >= a2 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v10 - &v12[v13 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F2B3D88(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F2B3DA0()
{
  return 1;
}

uint64_t sub_20F2B3DA8()
{
  return 1;
}

uint64_t sub_20F2B3DB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = *((_QWORD *)v6 + 1);
          v9 = *v6;
          v6 += 4;
          *(_QWORD *)(*(_QWORD *)a2 + 8 * (v9 + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)))) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v8);
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F2B3E24(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(uint64_t **)(result + 88);
    v6 = *v5;
    v7 = v5[1];
    if (v6 != v7)
      goto LABEL_8;
LABEL_6:
    while (++v4 < v3)
    {
      v11 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
      v6 = *v11;
      v7 = v11[1];
      if (v6 != v7)
      {
LABEL_8:
        while (v4 != *(_DWORD *)v6)
        {
          v6 += 16;
          if (v6 == v7)
            goto LABEL_6;
        }
        v8 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v6 + 8));
        v9 = (v4 + a3);
        v10 = (_QWORD *)*a2;
        if (v8 == (_QWORD *)*a2)
        {
          v10[v9] = *v8;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          v10[v9] = *v8;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F2B3EC0(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F2B3F14(_QWORD *a1)
{
  sub_20F2B4064(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F2B3F38(uint64_t a1, int a2, double a3, float64x2_t a4, double a5, float64x2_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[6];
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[5];
  int v23;
  std::mutex v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 560);
  __asm { FMOV            V0.2D, #1.0 }
  v16 = _Q0;
  v12 = v6[1];
  v22[0] = *v6;
  v22[1] = v6 + 6;
  v22[2] = &v16;
  v22[3] = v12;
  v22[4] = 0;
  v23 = a2;
  v13 = 0uLL;
  memset(v24.__m_.__opaque, 0, sizeof(v24.__m_.__opaque));
  v24.__m_.__sig = 850045863;
  v19 = v12;
  v20 = v12;
  v14 = *(_QWORD *)(v22[0] + 104);
  v15 = *(_QWORD *)(v22[0] + 112);
  v17[0] = v22;
  v17[1] = &v18;
  v17[2] = &v16;
  v17[3] = &v21;
  v17[4] = &v20;
  for (v17[5] = &v19; v14 != v15; v14 += 152)
    v13.f64[0] = sub_20F2B42C8((uint64_t)v17, v14, v13, a4, a5, a6);
  std::mutex::~mutex(&v24);
}

void sub_20F2B4024(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2B4038(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_20F2B4044(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_20F2B4050(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8);
}

_QWORD *sub_20F2B4064(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_24C9FCDD0;
  sub_20F2B4190((uint64_t)(a1 + 31));
  v2 = (_QWORD *)a1[30];
  if (v2 == a1 + 27)
  {
    v3 = 4;
    v2 = a1 + 27;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  a1[8] = off_24C9FCCA8;
  v5 = a1[19];
  if (v5)
  {
    v6 = a1[20];
    v7 = (void *)a1[19];
    if (v6 != v5)
    {
      v8 = a1[20];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)a1[19];
    }
    a1[20] = v5;
    operator delete(v7);
  }
  a1[8] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 13));
  v11 = (void *)a1[10];
  if (v11)
  {
    a1[11] = v11;
    operator delete(v11);
  }
  v12 = a1[4];
  if (v12)
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  v13 = a1[1];
  if (v13)
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_20F2B4190(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 264);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = *(_QWORD *)(a1 + 240);
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = *(_QWORD *)(a1 + 216);
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = *(_QWORD *)(a1 + 192);
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = *(_QWORD *)(a1 + 168);
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = *(void **)(a1 + 120);
  if (v9)
  {
    *(_QWORD *)(a1 + 128) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(_QWORD *)(a1 + 104) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 72);
  if (v11)
  {
    *(_QWORD *)(a1 + 80) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 48);
  if (v12)
  {
    *(_QWORD *)(a1 + 56) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 24);
  if (v13)
  {
    *(_QWORD *)(a1 + 32) = v13;
    operator delete(v13);
  }
  v14 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v14;
    operator delete(v14);
  }
  return a1;
}

float64_t sub_20F2B42C8(uint64_t a1, uint64_t a2, float64x2_t _Q0, float64x2_t a4, double a5, float64x2_t a6)
{
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  float64x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float64x2_t *v22;
  int v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  double *v40;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v50[2];

  v9 = *(unsigned int **)(a2 + 72);
  v7 = (uint64_t *)(a2 + 72);
  v8 = v9;
  if ((v9[1] & 4) != 0)
    v10 = 1;
  else
    v10 = 2;
  if ((v10 & *(_DWORD *)(*(_QWORD *)a1 + 40)) != 0)
  {
    if (*((_BYTE *)v8 + 20))
    {
      v12 = *v8;
      if ((_DWORD)v12 == -1)
        return _Q0.f64[0];
      v14 = a1 + 8;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      *(_BYTE *)v13 = 1;
      v16 = *(_DWORD *)(*v15 + 4 * v12);
    }
    else
    {
      v14 = a1 + 8;
      v13 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)v13 = 0;
      v16 = -1;
    }
    *(_DWORD *)(v13 + 4) = v16;
    v18 = *(_QWORD *)(a1 + 16);
    v17 = *(float64x2_t **)(a1 + 24);
    v19 = a2 + 96;
    v20 = sub_20FC706B4((uint64_t)(v7 - 8), v7, (float64x2_t *)(a2 + 96), v17, _Q0, a4, a5, a6);
    *(_BYTE *)(a2 + 120) = v20;
    if (!v20)
    {
      *(_QWORD *)(a2 + 112) = 0;
      return _Q0.f64[0];
    }
    v21 = *(_QWORD *)(a2 + 128);
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, a2 + 96);
      v22 = *(float64x2_t **)(a2 + 128);
      v23 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v22->f64[0] + 16))(v22);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 72) + 20))
      {
        switch(v23)
        {
          case 0:
            v24 = v22[1];
            v25 = v22[2];
            goto LABEL_18;
          case 1:
            v26 = vmulq_f64(*v17, v22[1]);
            goto LABEL_19;
          case 2:
            v26 = vmulq_n_f64(*v17, v22[1].f64[0]);
            goto LABEL_19;
          case 4:
            (*(void (**)(_OWORD *__return_ptr, float64x2_t *))(*(_QWORD *)&v22->f64[0] + 56))(v50, v22);
            v24 = (float64x2_t)v50[0];
            v25 = (float64x2_t)v50[1];
LABEL_18:
            v26 = vmlaq_laneq_f64(vmulq_n_f64(v24, v17->f64[0]), v25, *v17, 1);
LABEL_19:
            *v17 = v26;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a2 + 80) = *(_OWORD *)v19;
    _Q0 = *(float64x2_t *)(a2 + 96);
    _D2 = *(_QWORD *)(a2 + 104);
    __asm { FMLA            D1, D2, V0.D[1] }
    _Q0.f64[0] = *(double *)(v18 + 8) * _D1;
    *(float64_t *)(a2 + 112) = _Q0.f64[0];
    v33 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)v33)
    {
      v34 = *(_QWORD *)(a1 + 24);
      v35 = **(unint64_t ***)(a1 + 32);
      v36 = *(_DWORD *)(v33 + 4);
      v37 = v35[15] + 24 * v36;
      v39 = *(char **)v37;
      v38 = *(char **)(v37 + 8);
      if (*(char **)v37 != v38)
      {
        while (*(_DWORD *)v39 < v36)
        {
          v39 += 16;
          if (v39 == v38)
            goto LABEL_29;
        }
      }
      if (v39 != v38)
      {
        if (*(_DWORD *)v39 == v36)
        {
          v40 = (double *)(v35[6] + 8 * *((_QWORD *)v39 + 1));
          goto LABEL_30;
        }
        v38 = v39;
      }
LABEL_29:
      v40 = (double *)sub_20F2B4550(v35 + 4, (char **)v37, v36, v38);
LABEL_30:
      _Q0 = *(float64x2_t *)v34;
      _D2 = *(_QWORD *)(v34 + 8);
      __asm { FMLA            D1, D2, V0.D[1] }
      _Q0.f64[0] = *v40 + _D1;
      *v40 = _Q0.f64[0];
      if (**(_BYTE **)v14)
      {
        v43 = **(uint64_t ***)(a1 + 40);
        v44 = *((_DWORD *)v43 + 7);
        v45 = *v43;
        v46 = 8 * (v44 + *(_DWORD *)(*(_QWORD *)v14 + 4));
        _Q0 = *(float64x2_t *)*(_QWORD *)(a1 + 24);
        _D1 = *(_QWORD *)(v19 + 8);
        __asm { FMLA            D2, D1, V0.D[1] }
        _Q0.f64[0] = *(double *)(v45 + v46) - _D2;
        *(float64_t *)(v45 + v46) = _Q0.f64[0];
      }
    }
  }
  return _Q0.f64[0];
}

uint64_t sub_20F2B4550(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_20F1C5A3C(a1 + 2, v15, 1uLL, (uint64_t *)&v18);
    v14 = a1[3] - 8;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_20F2B4654(a2, a4, &v18);
  return v14;
}

char *sub_20F2B4654(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  int64_t v28;
  char *v29;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      v10 = v8 + 16;
      v11 = (__int128 *)(v5 - 16);
      v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v13 = *v11++;
          *(_OWORD *)v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10)
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (_QWORD)v10) >> 4)), v8, v5 - (_QWORD)v10);
      *(_OWORD *)v8 = *a3;
    }
    return v8;
  }
  v14 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v14 >> 60)
    sub_20E867F44();
  v16 = v9 - (_QWORD)v6;
  if (v16 >> 3 > v14)
    v14 = v16 >> 3;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v14;
  if (v17)
  {
    if (v17 >> 60)
      sub_20E877A38();
    v18 = (char *)operator new(16 * v17);
    v19 = v7 >> 4;
    v20 = &v18[16 * (v7 >> 4)];
    v21 = &v18[16 * v17];
    if (v7 >> 4 != v17)
      goto LABEL_31;
    goto LABEL_20;
  }
  v18 = 0;
  v19 = v7 >> 4;
  v20 = (char *)(16 * (v7 >> 4));
  v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2)
        v23 = 1;
      else
        v23 = v7 >> 3;
      if (v23 >> 60)
        sub_20E877A38();
      v20 = (char *)operator new(16 * v23);
      v21 = &v20[16 * v23];
      if (v18)
      {
        operator delete(v18);
        v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1)
        v22 = v19 + 1;
      else
        v22 = v19 + 2;
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v20 = *a3;
  v24 = v20;
  if (v6 != v8)
  {
    v25 = v8;
    v26 = v20;
    do
    {
      v24 = v26 - 16;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v25 - 1);
      v25 -= 16;
      v26 -= 16;
    }
    while (v25 != v6);
  }
  v27 = a1[1];
  v28 = v27 - v8;
  if (v27 != v8)
    memmove(v20 + 16, v8, v27 - v8);
  v29 = *a1;
  *a1 = v24;
  a1[1] = &v20[v28 + 16];
  a1[2] = v21;
  if (v29)
    operator delete(v29);
  return v20;
}

void sub_20F2B4880(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2B4898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char **v9;
  uint64_t v10;
  void *v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 800);
  v3 = *(_QWORD *)(a1 + 792);
  v4 = a1 + 40;
  if (*(_BYTE *)(a1 + 192))
    goto LABEL_14;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 193)
    || (*(_DWORD *)(a1 + 332) != 1 ? (v5 = 1) : (v5 = 3), !sub_20F2B4C50(a1 + 608, v5)))
  {
    sub_20F2B556C(v4);
    v7 = *(_DWORD *)(a1 + 308);
    v8 = *(_QWORD **)(a1 + 520);
    v9 = (char **)(v8 + 19);
    v10 = *(_QWORD *)(a1 + 512);
    if (*(_BYTE *)(v10 + 152))
    {
      v11 = (void *)v8[19];
      v8[20] = v11;
      if (v8[21] - (_QWORD)v11 <= 0xFFuLL)
      {
        v12 = (char *)operator new(0x100uLL);
        v8[19] = v12;
        v8[20] = v12;
        v8[21] = v12 + 256;
        if (v11)
          operator delete(v11);
      }
      sub_20F2BB1A4(v10, (uint64_t)(v8 + 19));
      v8 = *(_QWORD **)(a1 + 520);
    }
    sub_20F2B5E9C(v8, v9);
    sub_20F2BB3A4(a1 + 528, (uint64_t)v9, v7);
    kdebug_trace();
LABEL_14:
    if (((v2 - v3) & 0x3FFFFFFFCLL) != 0)
      return 0;
    v6 = 1;
    v13 = sub_20F2B5750(v4, 0, 1);
    if (!v13)
      return v6;
    if (*(_BYTE *)(a1 + 192) || (v16 = *(_QWORD *)(a1 + 48), v17 = *(_QWORD *)(a1 + 56), v16 == v17))
    {
LABEL_18:
      v14 = *(_QWORD *)(a1 + 184);
    }
    else
    {
      while ((*(_BYTE *)(*(_QWORD *)(v16 + 8) + 4) & 6) == 0)
      {
        v16 += 16;
        if (v16 == v17)
          goto LABEL_18;
      }
      v19 = *(_QWORD *)(a1 + 144);
      v18 = *(_QWORD *)(a1 + 152);
      if (v19 != v18)
      {
        v20 = v18 - v19 - 152;
        if (v20 >= 0x98)
        {
          v23 = 0;
          v24 = 0;
          v25 = v20 / 0x98 + 1;
          v22 = v19 + 152 * (v25 & 0x3FFFFFFFFFFFFFELL);
          v26 = v19 + 224;
          v27 = v25 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            if ((*(_BYTE *)(*(_QWORD *)(v26 - 152) + 4) & 6) == 0)
              ++v23;
            if ((*(_BYTE *)(*(_QWORD *)v26 + 4) & 6) == 0)
              ++v24;
            v26 += 304;
            v27 -= 2;
          }
          while (v27);
          v21 = v24 + v23;
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFELL))
            goto LABEL_39;
        }
        else
        {
          v21 = 0;
          v22 = *(_QWORD *)(a1 + 144);
        }
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 4) & 6) == 0)
            ++v21;
          v22 += 152;
        }
        while (v22 != v18);
LABEL_39:
        v14 = 2 * v21;
        return v14 < v13;
      }
      v14 = 0;
    }
    return v14 < v13;
  }
  kdebug_trace();
  return 1;
}

void sub_20F2B4B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB3070((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL sub_20F2B4B4C(int32x2_t *a1, uint64_t a2)
{
  double v4;
  int32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;

  v4 = sub_20F2B6060(a2, (uint64_t)&a1[4], (char **)&a1[40], &a1[43]);
  v5 = a1 + 49;
  v6 = (*(_QWORD *)&a1[24] - *(_QWORD *)&a1[23]) >> 2;
  a1[51].i32[0] = v6;
  v7 = v6;
  if (*(_QWORD *)&a1[50] < (unint64_t)v6)
  {
    if (*v5)
      ((void (*)(_QWORD, _QWORD, double))MEMORY[0x212BC6368])(*v5, 0x1000C8000313F17, v4);
    v8 = (8 * v7 + 31) & 0xFFFFFFFE0;
    a1[49] = 0;
    a1[50] = (int32x2_t)(v8 >> 3);
    a1[49] = (int32x2_t)operator new(v8, (std::align_val_t)0x20uLL);
  }
  v9 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 24))(a1);
  v10 = (_DWORD *)a1[23];
  v11 = (_DWORD *)a1[24];
  if (v10 != v11)
  {
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 8);
    do
    {
      v13 -= 16;
      do
      {
        v14 = *(_DWORD *)(v13 + 16);
        v13 += 16;
      }
      while (*v10 != v14);
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v12++) = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 32);
      ++v10;
    }
    while (v10 != v11);
  }
  return sub_20F2BEEFC(a1, (uint64_t)&a1[49], (unsigned int **)(a2 + 152), a2);
}

uint64_t sub_20F2B4C50(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  char **v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t i;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char **v91;
  _QWORD *v92;
  int64_t v93;
  char **v94;
  uint64_t v95;
  uint64_t v96;
  char **v97;
  char **v98;
  void *v99[3];
  void *__p;
  void *v101;
  uint64_t v102;

  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 152))
    return 1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = (char **)sub_20F2B59C0(v5);
  v7 = v6;
  if ((char **)(a1 + 248) != v6)
    sub_20E867E00((_QWORD *)(a1 + 248), *v6, v6[1], (v6[1] - *v6) >> 2);
  v8 = *(char **)(a1 + 248);
  v9 = *(char **)(a1 + 256);
  if (v8 == v9)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (a1 + 272 != v18 + 152)
      sub_20E867E00((_QWORD *)(a1 + 272), *(char **)(v18 + 152), *(char **)(v18 + 160), (uint64_t)(*(_QWORD *)(v18 + 160) - *(_QWORD *)(v18 + 152)) >> 2);
    v20 = *(char **)(a1 + 272);
    v19 = *(char **)(a1 + 280);
    if (v20 != v19)
    {
      v21 = v7[4];
      v22 = v7[3];
      v23 = *(char **)(a1 + 272);
      while (v22 != v21)
      {
        v24 = *(_DWORD *)v23;
        if (*(_DWORD *)v23 >= *(_DWORD *)v22)
        {
          v23 += 4 * (*(_DWORD *)v22 >= v24);
          v22 += 4;
          if (v23 == v19)
            goto LABEL_100;
        }
        else
        {
          *(_DWORD *)v20 = v24;
          v20 += 4;
          v23 += 4;
          if (v23 == v19)
            goto LABEL_100;
        }
      }
      if (v23 == v20)
        goto LABEL_102;
      v93 = v19 - v23;
      memmove(v20, v23, v19 - v23);
      v20 += v93;
      v19 = *(char **)(a1 + 280);
LABEL_100:
      if (v20 != v19)
        *(_QWORD *)(a1 + 280) = v20;
    }
LABEL_102:
    sub_20F2B5B88((char **)(a1 + 184), (unsigned int **)(a1 + 272), (unsigned int **)v99);
    __p = 0;
    v101 = 0;
    v102 = 0;
    sub_20F2B6B34((char **)(a1 + 32), v99, (uint64_t)&__p);
    if (__p)
    {
      v101 = __p;
      operator delete(__p);
    }
    if (v99[0])
    {
      v99[1] = v99[0];
      operator delete(v99[0]);
    }
    return 0;
  }
  sub_20E867E00((_QWORD *)(a1 + 296), v8, v9, (v9 - v8) >> 2);
  sub_20F2B5CD8((char **)(a1 + 296), v7 + 3);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (a1 + 272 != v10 + 152)
    sub_20E867E00((_QWORD *)(a1 + 272), *(char **)(v10 + 152), *(char **)(v10 + 160), (uint64_t)(*(_QWORD *)(v10 + 160) - *(_QWORD *)(v10 + 152)) >> 2);
  v11 = *(char **)(a1 + 272);
  v12 = *(char **)(a1 + 280);
  if (v11 == v12)
  {
    v12 = *(char **)(a1 + 272);
  }
  else
  {
    v13 = *(unsigned int **)(a1 + 304);
    v14 = *(unsigned int **)(a1 + 296);
    v15 = *(char **)(a1 + 272);
    v16 = v15;
    while (v14 != v13)
    {
      v17 = *(_DWORD *)v16;
      if (*(_DWORD *)v16 >= *v14)
      {
        v16 += 4 * (*v14++ >= v17);
        if (v16 == v12)
          goto LABEL_27;
      }
      else
      {
        *(_DWORD *)v15 = v17;
        v15 += 4;
        v16 += 4;
        if (v16 == v12)
          goto LABEL_27;
      }
    }
    if (v16 == v15)
      goto LABEL_29;
    v25 = v12 - v16;
    memmove(v15, v16, v12 - v16);
    v15 += v25;
    v11 = *(char **)(a1 + 272);
    v12 = *(char **)(a1 + 280);
LABEL_27:
    if (v15 != v12)
    {
      v12 = v15;
      *(_QWORD *)(a1 + 280) = v15;
    }
  }
LABEL_29:
  v98 = (char **)(a1 + 272);
  sub_20E867E00((_QWORD *)(a1 + 296), v11, v12, (v12 - v11) >> 2);
  sub_20F2B5CD8((char **)(a1 + 296), (char **)(a1 + 248));
  v26 = (*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 2;
  *(_DWORD *)(a1 + 24) = v26;
  v27 = v26;
  if (*(_QWORD *)(a1 + 16) < (unint64_t)v26)
  {
    v28 = *(_QWORD *)(a1 + 8);
    if (v28)
      MEMORY[0x212BC6368](v28, 0x1000C8000313F17);
    v29 = (8 * v27 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v29 >> 3;
    *(_QWORD *)(a1 + 8) = operator new(v29, (std::align_val_t)0x20uLL);
  }
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v31 = *(_DWORD **)(a1 + 272);
  v32 = *(_DWORD **)(a1 + 280);
  if (v31 != v32)
  {
    v33 = 0;
    v34 = *(_QWORD *)(v30 + 8);
    do
    {
      v34 -= 16;
      do
      {
        v35 = *(_DWORD *)(v34 + 16);
        v34 += 16;
      }
      while (*v31 != v35);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v33++) = *(_QWORD *)(*(_QWORD *)(v34 + 8) + 32);
      ++v31;
    }
    while (v31 != v32);
  }
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v38 = *(_QWORD *)(v36 + 8);
  v37 = *(_QWORD *)(v36 + 16);
  v39 = *(_DWORD **)(a1 + 296);
  v40 = *(_DWORD **)(a1 + 304);
  if (v38 != v37 && v39 != v40)
  {
    v42 = 0;
    do
    {
      v43 = *(_QWORD *)(v38 + 8);
      if (*v39 == *(_DWORD *)v38)
      {
        if (*(_BYTE *)(v43 + 20))
          v44 = v42;
        else
          v44 = -1;
        v42 += *(unsigned __int8 *)(v43 + 20);
        ++v39;
        *(_DWORD *)v43 = v44;
        v38 += 16;
        if (v38 == v37)
          break;
      }
      else
      {
        *(_DWORD *)v43 = -1;
        v38 += 16;
        if (v38 == v37)
          break;
      }
    }
    while (v39 != v40);
  }
  if (v38 != v37)
  {
    v45 = v37 - v38 - 16;
    if (v45 < 0x10)
    {
      v46 = v38;
      do
      {
LABEL_56:
        **(_DWORD **)(v46 + 8) = -1;
        v46 += 16;
      }
      while (v46 != v37);
      goto LABEL_57;
    }
    v47 = (v45 >> 4) + 1;
    v46 = v38 + 16 * (v47 & 0x1FFFFFFFFFFFFFFELL);
    v48 = (_DWORD **)(v38 + 24);
    v49 = v47 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v50 = *(v48 - 2);
      v51 = *v48;
      v48 += 4;
      *v50 = -1;
      *v51 = -1;
      v49 -= 2;
    }
    while (v49);
    if (v47 != (v47 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_56;
  }
LABEL_57:
  v94 = v7;
  v52 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v97 = (char **)(a1 + 296);
  sub_20F2B5E9C(v52, (char **)(a1 + 296));
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v54 = *(unsigned int *)(v53 + 44);
  if ((_DWORD)v54)
  {
    v55 = v53;
    v56 = 0;
    v57 = v53 + 72;
    do
    {
      v59 = (uint64_t *)(*(_QWORD *)(v55 + 120) + 24 * v56);
      v58 = *v59;
      v60 = v59[1];
      if (*v59 != v60)
      {
        v61 = *(_QWORD *)(v55 + 80);
        v62 = *(_QWORD *)(v55 + 88);
        v63 = *(_QWORD *)(v55 + 112);
        do
        {
          v64 = ((v62 - v61) << 6) - 1;
          if (v62 == v61)
            v64 = 0;
          v65 = *(_QWORD *)(v55 + 104) + v63;
          if (v64 == v65)
          {
            sub_20EDB36DC(v57);
            v61 = *(_QWORD *)(v55 + 80);
            v62 = *(_QWORD *)(v55 + 88);
            v65 = *(_QWORD *)(v55 + 112) + *(_QWORD *)(v55 + 104);
          }
          *(_QWORD *)(*(_QWORD *)(v61 + ((v65 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v65 & 0x1FF)) = *(_QWORD *)(v58 + 8);
          v63 = *(_QWORD *)(v55 + 112) + 1;
          *(_QWORD *)(v55 + 112) = v63;
          v58 += 16;
        }
        while (v58 != v60);
        v58 = *v59;
        v54 = *(unsigned int *)(v55 + 44);
      }
      v59[1] = v58;
      ++v56;
    }
    while (v56 < v54);
  }
  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v68 = *(unsigned int *)(v66 + 16);
  if ((_DWORD)v68)
    bzero(*(void **)v66, 8 * v68);
  if (((*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) & 0x3FFFFFFFCLL) != 0)
  {
    v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v67.n128_f64[0] = sub_20F2B6060(v69, a1 + 32, (char **)(a1 + 320), (_QWORD *)(a1 + 344));
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 16))(a1, a2, v67);
  v70 = *(unsigned __int8 *)(a1 + 208);
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v95 = a1 + 416;
  v96 = a1 + 392;
  v72 = (_QWORD *)(a1 + 248);
  v73 = a1 + 416;
  if (v70)
    sub_20F2B6634(v71, v72, v73, (unsigned int **)(a1 + 344));
  else
    v74.n128_f64[0] = sub_20F2B6404(v71, v72, v73, a1 + 392, (unsigned int **)(a1 + 344));
  v75 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v74);
  LODWORD(__p) = 1;
  sub_20F2B7B68((_QWORD *)(a1 + 248), v75 + 152, &__p, a1 + 344);
  sub_20F2B7B68(v98, v75 + 152, &__p, a1 + 368);
  sub_20F2B7DD0(v75 + 32, a1 + 440, a1 + 464, (unsigned int **)(a1 + 344), (unsigned int **)(a1 + 368), 1);
  sub_20F2B5E9C((_QWORD *)(a1 + 32), v98);
  v76 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v76)
  {
    for (i = 0; i < v76; ++i)
    {
      v79 = (uint64_t *)(*(_QWORD *)(a1 + 152) + 24 * i);
      v78 = *v79;
      v80 = v79[1];
      if (*v79 != v80)
      {
        v81 = *(_QWORD *)(a1 + 112);
        v82 = *(_QWORD *)(a1 + 120);
        v83 = *(_QWORD *)(a1 + 144);
        do
        {
          v84 = ((v82 - v81) << 6) - 1;
          if (v82 == v81)
            v84 = 0;
          v85 = *(_QWORD *)(a1 + 136) + v83;
          if (v84 == v85)
          {
            sub_20EDB36DC(a1 + 104);
            v81 = *(_QWORD *)(a1 + 112);
            v82 = *(_QWORD *)(a1 + 120);
            v85 = *(_QWORD *)(a1 + 144) + *(_QWORD *)(a1 + 136);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + ((v85 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v85 & 0x1FF)) = *(_QWORD *)(v78 + 8);
          v83 = *(_QWORD *)(a1 + 144) + 1;
          *(_QWORD *)(a1 + 144) = v83;
          v78 += 16;
        }
        while (v78 != v80);
        v78 = *v79;
        v76 = *(unsigned int *)(a1 + 76);
      }
      v79[1] = v78;
    }
  }
  v86 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v86)
    bzero(*(void **)(a1 + 32), 8 * v86);
  v87 = *(unsigned __int8 *)(a1 + 208);
  v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v87)
  {
    sub_20F2B6634(v88, v98, a1 + 488, (unsigned int **)(a1 + 344));
    v89 = *(unsigned __int8 *)(a1 + 208);
    if (*(_BYTE *)(a1 + 209))
      goto LABEL_90;
LABEL_94:
    if (!sub_20F2B67A0(v95, v96, a1 + 440, v89 != 0, a1 + 488, (unint64_t *)(a1 + 32)))
      return 1;
    goto LABEL_95;
  }
  sub_20F2B6404(v88, v98, a1 + 488, a1 + 32, (unsigned int **)(a1 + 344));
  v89 = *(unsigned __int8 *)(a1 + 208);
  if (!*(_BYTE *)(a1 + 209))
    goto LABEL_94;
LABEL_90:
  LOBYTE(__p) = v89;
  v90 = *(_QWORD *)(a1 + 240);
  if (!v90)
    sub_20E86D37C();
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v90 + 48))(v90, v95, v96, a1 + 440, &__p, a1 + 488, a1 + 32) & 1) == 0)return 1;
LABEL_95:
  sub_20F2B90DC(a1 + 64, (uint64_t *)(a1 + 488), 0);
  v91 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F2B6B34(v91, (_QWORD *)(a1 + 248), a1 + 536);
  if (v97 != v94 + 6)
    sub_20E867E00(v97, v94[6], v94[7], (v94[7] - v94[6]) >> 2);
  v92 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F2B6F24(v92, v97, a1 + 536);
  return 0;
}

void sub_20F2B5530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_20F2B556C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _QWORD v21[3];

  sub_20F2B59C0(a1);
  if (*(_BYTE *)(a1 + 153))
  {
    v2 = *(_QWORD **)(a1 + 104);
    v21[0] = a1 + 104;
    v21[1] = a1 + 136;
    v21[2] = a1 + 144;
    v3 = sub_20F2BAB60(v2, *(_QWORD **)(a1 + 112), (uint64_t)v21);
    sub_20F2BAD48(a1 + 104, (uint64_t)v3, *(_QWORD *)(a1 + 112));
  }
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v6 = -16 - v4;
    v7 = *(_QWORD *)(a1 + 16);
    do
    {
      while (1)
      {
        while (1)
        {
          v8 = *(_QWORD *)(v7 - 8);
          v7 -= 16;
          if ((*(_BYTE *)(v8 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v8 + 4) = 0;
          v6 += 16;
          if (v7 == v5)
            goto LABEL_18;
        }
        sub_20F2BAEA4(a1 + 32, v8);
        v9 = v7 + 16;
        v5 = *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 16);
        if (v7 + 16 != v10)
          break;
        v4 = v7;
        *(_QWORD *)(a1 + 16) = v7;
        v6 += 16;
        if (v7 == v5)
          goto LABEL_18;
      }
      v11 = v10 - v7 - 32;
      v4 = v7;
      if (v11 < 0x10)
        goto LABEL_26;
      v12 = (v11 >> 4) + 1;
      v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
      v4 = v7 + v13;
      v9 += v13;
      v14 = (((unint64_t)(v10 + v6) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v15 = v5 + 16 * ((v7 - v5) >> 4) + 24;
      do
      {
        v16 = *(_DWORD *)(v15 + 8);
        *(_DWORD *)(v15 - 24) = *(_DWORD *)(v15 - 8);
        *(_DWORD *)(v15 - 8) = v16;
        v17 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(v15 - 16) = *(_QWORD *)v15;
        *(_QWORD *)v15 = v17;
        v15 += 32;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_26:
        do
        {
          *(_DWORD *)v4 = *(_DWORD *)v9;
          *(_QWORD *)(v4 + 8) = *(_QWORD *)(v9 + 8);
          v4 += 16;
          v9 += 16;
        }
        while (v9 != v10);
      }
      *(_QWORD *)(a1 + 16) = v4;
      v6 += 16;
    }
    while (v7 != v5);
  }
LABEL_18:
  *(_WORD *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
  if (v7 != v4)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(v7 + 8);
      if (*(_BYTE *)(v19 + 20))
        v20 = v18;
      else
        v20 = -1;
      v18 += *(unsigned __int8 *)(v19 + 20);
      *(_DWORD *)v19 = v20;
      v7 += 16;
    }
    while (v7 != v4);
  }
}

uint64_t sub_20F2B5750(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  char v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 152))
  {
    v5 = 0;
    if (v3 != v4)
    {
      if (a2)
      {
        do
        {
          v6 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v6 + 4) & 2) == 0 && *(_BYTE *)(v6 + 20))
          {
            if ((*(_BYTE *)(v6 + 4) & 1) != 0)
              v7 = a3;
            else
              v7 = 1;
            v5 = (v5 + v7);
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
      else if ((a3 & 1) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v8 + 4) & 6) == 0)
            v5 = v5 + *(unsigned __int8 *)(v8 + 20);
          v3 += 16;
        }
        while (v3 != v4);
      }
      else
      {
        do
        {
          v9 = *(_QWORD *)(v3 + 8);
          v10 = *(_BYTE *)(v9 + 4);
          if ((v10 & 6) == 0)
          {
            v11 = *(unsigned __int8 *)(v9 + 20);
            if ((v10 & 1) != 0 || v11 == 0)
              v5 = v5;
            else
              v5 = (v5 + 1);
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
    }
  }
  else if (v3 == v4)
  {
    return 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    LODWORD(v5) = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v16 = *(_QWORD *)(v3 + 8);
        v17 = *(_BYTE *)(v16 + 4);
        if ((v17 & 2) != 0)
          v14 = 1;
        v15 += (v17 & 2) >> 1;
        v18 = *(unsigned __int8 *)(v16 + 20);
        if ((v17 & 1) != 0)
          v19 = a3;
        else
          v19 = 1;
        v20 = v5 + v19;
        if (v18)
          v5 = v20;
        else
          v5 = v5;
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v21 = *(_QWORD *)(v3 + 8);
        v22 = *(_BYTE *)(v21 + 4);
        if ((v22 & 6) != 0)
        {
          v14 = 1;
          ++v15;
        }
        v23 = *(unsigned __int8 *)(v21 + 20);
        if ((v22 & 1) != 0)
          v24 = a3;
        else
          v24 = 1;
        v25 = v5 + v24;
        if (v23)
          v5 = v25;
        else
          v5 = v5;
        v3 += 16;
      }
      while (v3 != v4);
    }
    if (v14)
    {
      v26 = *(_QWORD *)(a1 + 232);
      v39 = a1 + 232;
      *(_QWORD *)(a1 + 240) = v26;
      v27 = *(_QWORD *)(a1 + 104);
      v28 = *(_QWORD *)(a1 + 112);
      if (v27 == v28)
      {
        if (v5 >= v15)
          return v5 - v15;
        else
          return 0;
      }
      else
      {
        v29 = v27 + 72;
        do
        {
          if (*(_BYTE *)(v29 + 72) || (*(_BYTE *)(*(_QWORD *)v29 + 4) & 6) != 0)
            sub_20F2B734C(&v39, (uint64_t *)v29);
          v30 = v29 + 80;
          v29 += 152;
        }
        while (v30 != v28);
        v31 = (*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
        if (v15 > v31)
          LODWORD(v31) = v15;
        v32 = v5 >= v31;
        v33 = v5 - v31;
        if (v32)
          v5 = v33;
        else
          v5 = 0;
        v34 = *(_QWORD *)(a1 + 104);
        v35 = *(_QWORD *)(a1 + 112);
        while (v34 != v35)
        {
          v36 = *(_QWORD *)(v34 + 72);
          if (*(_BYTE *)(v34 + 144) || (*(_BYTE *)(v36 + 4) & 6) != 0)
            ++*(_DWORD *)(v36 + 8);
          v34 += 152;
        }
      }
    }
  }
  return v5;
}

void sub_20F2B59A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (!a10)
    sub_20F2B78E4(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2B59C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 154))
  {
    if (!*(_BYTE *)(a1 + 153))
      *(_BYTE *)(a1 + 153) = *(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 192);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (*(_BYTE *)(a1 + 153))
    {
      v2 = *(void **)(a1 + 232);
      *(_QWORD *)(a1 + 240) = v2;
      v3 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
      v4 = v3 >> 4;
      if (v3 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 248) - (_QWORD)v2) >> 2))
      {
        if (v3 < 0)
          sub_20E867F44();
        v5 = (char *)operator new((unint64_t)v3 >> 2);
        *(_QWORD *)(a1 + 232) = v5;
        *(_QWORD *)(a1 + 240) = v5;
        *(_QWORD *)(a1 + 248) = &v5[4 * v4];
        if (v2)
          operator delete(v2);
      }
      v15 = 0;
      v16 = a1;
      v14[0] = a1 + 232;
      v6 = *(_QWORD *)(a1 + 104);
      v7 = *(_QWORD *)(a1 + 112);
      if (v6 != v7)
      {
        v8 = v6 + 72;
        do
        {
          if (*(_BYTE *)(v8 + 72) || (*(_BYTE *)(*(_QWORD *)v8 + 4) & 6) != 0)
          {
            *(_BYTE *)(v8 + 72) = 1;
            sub_20F2B734C(v14, (uint64_t *)v8);
          }
          v9 = v8 + 80;
          v8 += 152;
        }
        while (v9 != v7);
      }
      v14[0] = a1 + 160;
      v14[1] = a1 + 232;
      sub_20F2B74E8(v14, (unsigned int **)(a1 + 8));
      if (!v15)
      {
        v11 = *(_QWORD *)(v16 + 104);
        v12 = *(_QWORD *)(v16 + 112);
        while (v11 != v12)
        {
          v13 = *(_QWORD *)(v11 + 72);
          if (*(_BYTE *)(v11 + 144) || (*(_BYTE *)(v13 + 4) & 6) != 0)
            ++*(_DWORD *)(v13 + 8);
          v11 += 152;
        }
      }
    }
    *(_BYTE *)(a1 + 154) = 1;
  }
  return a1 + 160;
}

void sub_20F2B5B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (!a11)
    sub_20F2B78E4((uint64_t)&a12);
  _Unwind_Resume(exception_object);
}

void sub_20F2B5B88(char **a1@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  char *v7;
  char *v8;
  unsigned int *v9;
  unsigned int *v10;
  int64_t v11;
  unsigned int v12;
  char *v13;
  unsigned int *__dst;
  unsigned int *v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = a1[1] - *a1;
  if (v4)
  {
    sub_20E93DC84((uint64_t)a3, v4 >> 2);
    v7 = *a1;
    v8 = a1[1];
    v9 = *a3;
    v10 = a2[1];
    __dst = *a3;
    v15 = *a2;
    if (v7 == v8)
    {
      v11 = 0;
    }
    else
    {
      while (v15 != v10)
      {
        v12 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 >= *v15)
        {
          v7 += 4 * (*v15++ >= v12);
          if (v7 == v8)
            goto LABEL_8;
        }
        else
        {
          *__dst = v12;
          v7 += 4;
          ++__dst;
          if (v7 == v8)
          {
LABEL_8:
            v11 = 0;
            v9 = __dst;
            goto LABEL_12;
          }
        }
      }
      v9 = __dst;
      v11 = v8 - v7;
      if (v8 != v7)
        memmove(__dst, v7, v8 - v7);
    }
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
LABEL_12:
  v13 = (char *)v9 + v11;
  if (v13 != (char *)a3[1])
    a3[1] = (unsigned int *)v13;
}

void sub_20F2B5CBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **sub_20F2B5CD8(char **a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  _BOOL4 v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (*a1 == v5)
  {
    v7 = a1[1];
    v9 = *a2;
  }
  else
  {
    v7 = *a1;
    v8 = *a1;
    v9 = *a2;
    while (v9 != v6)
    {
      if (*(_DWORD *)v9 < *(_DWORD *)v8)
        goto LABEL_9;
      v9 += 4 * (*(_DWORD *)v8 >= *(_DWORD *)v9);
      v8 += 4;
      v7 += 4;
      if (v8 == v5)
      {
        v7 = a1[1];
        goto LABEL_9;
      }
    }
    v7 = a1[1];
    v9 = a2[1];
  }
LABEL_9:
  v10 = (v7 - v4) >> 2;
  v11 = v5 - v4;
  v12 = v11 >> 2;
  v13 = ((v6 - *a2) >> 2) + (v11 >> 1) - v10;
  if (v13 <= v11 >> 2)
  {
    if (v13 < v11 >> 2)
      a1[1] = &v4[4 * v13];
  }
  else
  {
    sub_20E93DC84((uint64_t)a1, v13 - (v11 >> 2));
    v4 = *a1;
  }
  v14 = &v4[4 * v12];
  v15 = a2[1];
  if (v10 != v12)
  {
    v17 = &v4[4 * v10];
    v16 = &v4[4 * v12];
    while (v9 != v15)
    {
      v18 = *(_DWORD *)v9;
      v19 = *(_DWORD *)v9 >= *(_DWORD *)v17;
      if (*(_DWORD *)v9 >= *(_DWORD *)v17)
        v18 = *(_DWORD *)v17;
      v9 += 4 * (*(_DWORD *)v17 >= *(_DWORD *)v9);
      v17 += 4 * v19;
      *(_DWORD *)v16 = v18;
      v16 += 4;
      if (v17 == v14)
        goto LABEL_20;
    }
    v20 = v14 - v17;
    v21 = v16;
    goto LABEL_23;
  }
  v16 = &v4[4 * v12];
LABEL_20:
  v20 = v15 - v9;
  if (v15 != v9)
  {
    v21 = v16;
    v17 = v9;
LABEL_23:
    memmove(v21, v17, v20);
  }
  v22 = &v16[v20];
  v23 = *a1;
  if (&v16[v20] != a1[1])
    a1[1] = v22;
  if (v10 != v12)
  {
    v24 = &v23[4 * v10];
    v25 = &v23[4 * v12];
    v26 = v22 - v25;
    if (v26)
      memmove(&v23[4 * v10], v25, v26);
    a1[1] = &v24[v26];
  }
  return a1;
}

void *sub_20F2B5E9C(_QWORD *a1, char **a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  void *result;
  size_t v21;

  sub_20F20CEEC(a1, 0, 1u);
  a1[3] = 0;
  (*(void (**)(_QWORD *))(a1[4] + 16))(a1 + 4);
  v4 = (_BYTE *)a1[19];
  if (a1[21] - (_QWORD)v4 > 0xFFuLL)
    goto LABEL_12;
  v5 = (_BYTE *)a1[20];
  v6 = (char *)operator new(0x100uLL);
  v7 = v5 - v4;
  v8 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
  v9 = v8;
  if (v5 != v4)
  {
    if ((unint64_t)(v7 - 4) < 0x2C)
    {
      v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v18 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v9 - 1) = v18;
        v9 -= 4;
      }
      while (v5 != v4);
      goto LABEL_10;
    }
    v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
    if (v5 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v10 = v7 >> 2;
    v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
    v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    v13 = &v5[-v12];
    v9 = &v8[-v12];
    v14 = &v6[4 * v10 - 16];
    v15 = (__int128 *)(v5 - 16);
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    v5 = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  a1[19] = v9;
  a1[20] = v8;
  a1[21] = v6 + 256;
  if (v4)
    operator delete(v4);
LABEL_12:
  if (a1 + 19 != a2)
    sub_20E867E00(a1 + 19, *a2, a2[1], (a2[1] - *a2) >> 2);
  v19 = (a1[20] - a1[19]) >> 2;
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[4] + 24))(a1 + 4, v19, v19);
  a1[3] = v19;
  *((_DWORD *)a1 + 4) = v19;
  if (a1[1] < (unint64_t)v19)
  {
    if (*a1)
      MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
    v21 = (8 * v19 + 31) & 0xFFFFFFFE0;
    *a1 = 0;
    a1[1] = v21 >> 3;
    result = operator new(v21, (std::align_val_t)0x20uLL);
    *a1 = result;
  }
  return result;
}

double sub_20F2B6060(uint64_t a1, uint64_t a2, char **a3, _QWORD *a4)
{
  unsigned int **v8;
  char *v9;
  char *v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  double result;
  int *v50;
  int *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t **v57;
  unint64_t v58;

  v8 = (unsigned int **)(a1 + 152);
  if ((char **)(a1 + 152) != a3)
    sub_20E867E00(a3, *(char **)(a1 + 152), *(char **)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  v9 = *a3;
  v10 = a3[1];
  v11 = *(unsigned int **)(a2 + 152);
  v12 = *(unsigned int **)(a2 + 160);
  v13 = *a3 == v10 || v11 == v12;
  v14 = *a3;
  if (!v13)
  {
    v14 = *a3;
    v15 = *a3;
    do
    {
      v16 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 >= *v11)
      {
        if (*v11 >= v16)
        {
          *(_DWORD *)v14 = v16;
          v14 += 4;
          v15 += 4;
        }
        ++v11;
        if (v15 == v10)
          break;
      }
      else
      {
        v15 += 4;
        if (v15 == v10)
          break;
      }
    }
    while (v11 != v12);
  }
  v54 = a1;
  v55 = a2;
  if (v14 != v10)
  {
    v10 = v14;
    a3[1] = v14;
  }
  v17 = (unint64_t *)*a4;
  a4[1] = *a4;
  if (v9 != v10)
  {
    v18 = v10 - v9;
    v19 = v18 >> 2;
    if (v18 >> 2 > (unint64_t)((uint64_t)(a4[2] - (_QWORD)v17) >> 3))
    {
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_20E92CED8();
      v20 = (char *)operator new(2 * v18);
      *a4 = v20;
      a4[1] = v20;
      a4[2] = &v20[8 * v19];
      if (v17)
        operator delete(v17);
    }
    v22 = *a3;
    v21 = a3[1];
    if (*a3 != v21)
    {
      v23 = 0;
      v24 = 0;
      v25 = *(_DWORD **)(v55 + 152);
      v26 = *v8;
      v56 = a3[1];
      v57 = (unint64_t **)a4;
      v27 = *(_DWORD *)v22;
      if (*v25 < *(_DWORD *)v22)
        goto LABEL_27;
      while (1)
      {
        if (*v26 < v27)
        {
          do
          {
            v29 = v26[1];
            ++v26;
            v23 = (v23 + 1);
          }
          while (v29 < v27);
        }
        v31 = (char *)a4[1];
        v30 = a4[2];
        if ((unint64_t)v31 < v30)
        {
          *(_QWORD *)v31 = v24 | (unint64_t)(v23 << 32);
          a4[1] = v31 + 8;
          v22 += 4;
          if (v22 == v21)
            break;
          goto LABEL_26;
        }
        v32 = (char *)*a4;
        v33 = (uint64_t)&v31[-*a4];
        v34 = v33 >> 3;
        v35 = (v33 >> 3) + 1;
        if (v35 >> 61)
          sub_20E92CED8();
        v36 = v30 - (_QWORD)v32;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        v58 = v35;
        if (v35)
        {
          if (v35 >> 61)
            sub_20E877A38();
          v37 = operator new(8 * v35);
        }
        else
        {
          v37 = 0;
        }
        v38 = (unint64_t *)&v37[8 * v34];
        *v38 = v24 | (unint64_t)(v23 << 32);
        v39 = v38 + 1;
        if (v31 == v32)
        {
          a4 = v57;
          *v57 = v38;
          v57[1] = v39;
          v57[2] = (unint64_t *)&v37[8 * v58];
          if (v31)
            goto LABEL_48;
        }
        else
        {
          v40 = v31 - v32 - 8;
          if (v40 < 0x58)
            goto LABEL_61;
          if ((unint64_t)(v31 - v37 - v33) < 0x20)
            goto LABEL_61;
          v41 = (v40 >> 3) + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v31[-v42];
          v38 = (unint64_t *)((char *)v38 - v42);
          v44 = &v37[8 * v34 - 16];
          v45 = v31 - 16;
          v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 4;
          }
          while (v46);
          v31 = v43;
          if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_61:
            do
            {
              v48 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *--v38 = v48;
            }
            while (v31 != v32);
          }
          a4 = v57;
          v31 = (char *)*v57;
          *v57 = v38;
          v57[1] = v39;
          v57[2] = (unint64_t *)&v37[8 * v58];
          if (v31)
LABEL_48:
            operator delete(v31);
        }
        v21 = v56;
        a4[1] = v39;
        v22 += 4;
        if (v22 == v56)
          break;
LABEL_26:
        v27 = *(_DWORD *)v22;
        if (*v25 < *(_DWORD *)v22)
        {
          do
          {
LABEL_27:
            v28 = v25[1];
            ++v25;
            ++v24;
          }
          while (v28 < v27);
        }
      }
    }
  }
  sub_20F2B7928((_QWORD *)(v54 + 32), v55 + 32, a4, (unsigned int **)a4);
  v50 = (int *)*a4;
  v51 = (int *)a4[1];
  if ((int *)*a4 != v51)
  {
    do
    {
      v52 = *v50;
      v53 = v50[1];
      v50 += 2;
      result = *(double *)(*(_QWORD *)v55 + 8 * (*(_DWORD *)(v55 + 28) + v52));
      *(double *)(*(_QWORD *)v54 + 8 * (*(_DWORD *)(v54 + 28) + v53)) = result;
    }
    while (v50 != v51);
  }
  return result;
}

double sub_20F2B6404(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  double result;
  unint64_t v10;
  unint64_t v11;
  int v12;
  size_t v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;

  v30 = 1;
  sub_20F2B7B68(a2, a1 + 152, &v30, (uint64_t)a5);
  v10 = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v10;
  v11 = v10 * (unint64_t)v10;
  v12 = v10;
  if (*(_QWORD *)(a3 + 8) < v11)
  {
    if (*(_QWORD *)a3)
      MEMORY[0x212BC6368](*(_QWORD *)a3, 0x1000C8000313F17);
    v13 = (8 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v13 >> 3;
    *(_QWORD *)a3 = operator new(v13, (std::align_val_t)0x20uLL);
    v12 = *(_DWORD *)(a3 + 16);
    LODWORD(v10) = *(_DWORD *)(a3 + 20);
  }
  v14 = v12 * v10;
  if (v14)
    bzero(*(void **)a3, 8 * v14);
  v16 = *a5;
  v15 = a5[1];
  if (*a5 == v15)
  {
    v22 = *a5;
    v23 = 0;
    LODWORD(v24) = 0;
    if (!*(_DWORD *)(a4 + 16))
      goto LABEL_29;
    goto LABEL_25;
  }
  do
  {
    v17 = *a5;
    v18 = a5[1];
    if (*a5 != v18)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v16);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v16 + 8);
      do
      {
        if (v20 == v19)
          break;
        v21 = *v17;
        while (*(_DWORD *)v20 < v21)
        {
          v20 += 16;
          if (v20 == v19)
            goto LABEL_9;
        }
        if (*(_DWORD *)v20 == v21)
        {
          result = *(double *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(v20 + 8));
          *(double *)(*(_QWORD *)a3 + 8 * (v17[1] + *(_DWORD *)(a3 + 16) * v16[1])) = result;
        }
        if (v20 == v19)
          break;
        v17 += 2;
      }
      while (v17 != v18);
    }
LABEL_9:
    v16 += 2;
  }
  while (v16 != v15);
  v16 = *a5;
  v22 = a5[1];
  v23 = (char *)v22 - (char *)*a5;
  v24 = v23 >> 3;
  if (*(_DWORD *)(a4 + 16) != (v23 >> 3))
  {
LABEL_25:
    *(_DWORD *)(a4 + 16) = v24;
    v25 = (v23 >> 3);
    if (*(_QWORD *)(a4 + 8) < v25)
    {
      if (*(_QWORD *)a4)
      {
        MEMORY[0x212BC6368](*(_QWORD *)a4, 0x1000C8000313F17);
        v16 = *a5;
        v22 = a5[1];
      }
      v26 = (8 * v25 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = v26 >> 3;
      *(_QWORD *)a4 = operator new(v26, (std::align_val_t)0x20uLL);
    }
  }
LABEL_29:
  if (v16 != v22)
  {
    v27 = *(_DWORD *)(a1 + 28);
    do
    {
      v28 = *v16;
      v29 = v16[1];
      v16 += 2;
      result = *(double *)(*(_QWORD *)a1 + 8 * (v28 + v27));
      *(double *)(*(_QWORD *)a4 + 8 * v29) = result;
    }
    while (v16 != v22);
  }
  return result;
}

void sub_20F2B6634(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int **a4)
{
  unint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;

  v19 = 1;
  sub_20F2B7B68(a2, a1 + 152, &v19, (uint64_t)a4);
  v7 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 3;
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v7;
  v8 = v7 * (unint64_t)v7;
  v9 = v7;
  if (*(_QWORD *)(a3 + 8) < v8)
  {
    if (*(_QWORD *)a3)
      MEMORY[0x212BC6368](*(_QWORD *)a3, 0x1000C8000313F17);
    v10 = (8 * v8 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v10 >> 3;
    *(_QWORD *)a3 = operator new(v10, (std::align_val_t)0x20uLL);
    v9 = *(_DWORD *)(a3 + 16);
    LODWORD(v7) = *(_DWORD *)(a3 + 20);
  }
  v11 = v9 * v7;
  if (v11)
    bzero(*(void **)a3, 8 * v11);
  v12 = *a4;
  v13 = a4[1];
  if (*a4 != v13)
  {
    do
    {
      v14 = *a4;
      v15 = a4[1];
      if (*a4 != v15)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v12);
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v12 + 8);
        do
        {
          if (v17 == v16)
            break;
          v18 = *v14;
          while (*(_DWORD *)v17 < v18)
          {
            v17 += 16;
            if (v17 == v16)
              goto LABEL_9;
          }
          if (*(_DWORD *)v17 == v18)
            *(_QWORD *)(*(_QWORD *)a3 + 8 * (v14[1] + *(_DWORD *)(a3 + 16) * v12[1])) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(v17 + 8));
          if (v17 == v16)
            break;
          v14 += 2;
        }
        while (v14 != v15);
      }
LABEL_9:
      v12 += 2;
    }
    while (v12 != v13);
  }
}

BOOL sub_20F2B67A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t *a6)
{
  int v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  double *v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double *v33;
  size_t v34;
  size_t v35;
  double *v36;
  uint64_t v37;
  size_t v38;
  size_t v39;
  size_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  size_t v44;
  double *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  char v54[8];
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v12 = sub_20E8BE940();
  if (!v12)
  {
    v20 = *(unsigned int *)(a1 + 16);
    v22 = *(unsigned int *)(a3 + 16);
    v21 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v20 == (_DWORD)v22)
    {
      sub_20E8BE7C8(0, 0, 1, 1, v20, v21, *(double **)a1, v20, 1.0, v13, v14, v15, v16, v17, v18, v19, *(double **)a3, *(_DWORD *)(a1 + 16));
      goto LABEL_11;
    }
    v48 = a2;
    v49 = a5;
    v51 = a6;
    v23 = (8 * (v21 * v20) + 31) & 0xFFFFFFFE0;
    v24 = v23 >> 3;
    v25 = (double *)operator new(v23, (std::align_val_t)0x20uLL);
    v33 = v25;
    v34 = (v21 * v22);
    v50 = v24;
    if (v24 >= v34)
    {
      v47 = v21 << 32;
      if (!(_DWORD)v34)
      {
        a2 = v48;
LABEL_9:
        sub_20E8BE7C8(0, 0, 1, 1, v22, v21, *(double **)a1, v20, 1.0, v26, v27, v28, v29, v30, v31, v32, v33, v22);
        a5 = v49;
        v36 = *(double **)a3;
        *(_QWORD *)a3 = v33;
        *(_QWORD *)(a3 + 8) = v50;
        *(_DWORD *)(a3 + 16) = v22 | v47;
        *(_DWORD *)(a3 + 20) = HIDWORD(v47);
        a6 = v51;
        if (v36)
          MEMORY[0x212BC6368](v36, 0x1000C8000313F17);
LABEL_11:
        if ((a4 & 1) != 0)
        {
LABEL_22:
          v53 = a3;
          v55 = &v53;
          v56 = a3;
          v57 = 0x3FF0000000000000;
          sub_20F2B8D98(a5, (uint64_t)v54);
          return v12 == 0;
        }
        v37 = *(unsigned int *)(a1 + 16);
        v38 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v37 == (_DWORD)v38)
        {
          sub_20E8BE864(0, 1, 1, *(_DWORD *)(a1 + 16), *(const double **)a1, *(_DWORD *)(a1 + 16), *(double **)a2, 1);
LABEL_21:
          v53 = a3;
          v55 = &v53;
          v56 = a2;
          v57 = 0x3FF0000000000000;
          sub_20F2B8A74(a6, (uint64_t)v54);
          goto LABEL_22;
        }
        v52 = a6;
        v39 = (8 * v37 + 31) & 0xFFFFFFFE0;
        v40 = v39 >> 3;
        v41 = operator new(v39, (std::align_val_t)0x20uLL);
        v42 = v41;
        if (v40 >= v38)
        {
          if (!(_DWORD)v38)
            goto LABEL_19;
          v43 = a5;
          v44 = 8 * v38;
        }
        else
        {
          v43 = a5;
          MEMORY[0x212BC6368](v41, 0x1000C8000313F17);
          v44 = 8 * v38;
          v42 = operator new((8 * v38 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          v40 = ((8 * v38 + 31) & 0xFFFFFFFE0) >> 3;
          LODWORD(v38) = *(_DWORD *)(a2 + 16);
          LODWORD(v37) = *(_DWORD *)(a1 + 16);
        }
        memcpy(v42, *(const void **)a2, v44);
        a5 = v43;
LABEL_19:
        sub_20E8BE864(0, 1, 1, v38, *(const double **)a1, v37, (double *)v42, 1);
        v45 = *(double **)a2;
        *(_QWORD *)a2 = v42;
        *(_QWORD *)(a2 + 8) = v40;
        *(_DWORD *)(a2 + 16) = v38;
        a6 = v52;
        if (v45)
          MEMORY[0x212BC6368](v45, 0x1000C8000313F17);
        goto LABEL_21;
      }
      v35 = 8 * v34;
    }
    else
    {
      MEMORY[0x212BC6368](v25, 0x1000C8000313F17);
      v35 = 8 * v34;
      v33 = (double *)operator new((v35 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v50 = ((v35 + 31) & 0xFFFFFFFE0) >> 3;
      v22 = *(unsigned int *)(a3 + 16);
      v21 = *(unsigned int *)(a3 + 20);
      LODWORD(v20) = *(_DWORD *)(a1 + 16);
      v47 = v21 << 32;
    }
    a2 = v48;
    memcpy(v33, *(const void **)a3, v35);
    goto LABEL_9;
  }
  return v12 == 0;
}

void sub_20F2B6B08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F2B6B34(char **a1, _QWORD *a2, uint64_t a3)
{
  void *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  char *v18;
  const void *v19;
  char *v20;
  size_t v21;
  void **v22;
  char **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char *v43;
  unsigned int *v44;
  unsigned int *v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;

  v3 = *(void **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = (_DWORD *)*a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a3;
    v9 = v5 - (_QWORD)v4;
    v10 = (v5 - (uint64_t)v4) >> 2;
    if (v10 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v3) >> 2)
    {
      if ((v9 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v11 = (char *)operator new(v9);
      *(_QWORD *)v6 = v11;
      *(_QWORD *)(v6 + 8) = v11;
      *(_QWORD *)(v6 + 16) = &v11[4 * v10];
      if (v3)
        operator delete(v3);
    }
    v12 = a1[19];
    v13 = a1[20];
    v15 = (_DWORD *)*a2;
    v14 = (_DWORD *)a2[1];
    if (v12 == v13)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      while (*(_DWORD *)v12 < *v15)
      {
        v12 += 4;
        ++v16;
        if (v12 == v13)
          goto LABEL_45;
      }
    }
    if (v15 != v14 && v12 != v13)
    {
      v57 = (_DWORD *)a2[1];
      v58 = v6;
      while (1)
      {
        if (*v15 != *(_DWORD *)v12)
        {
          v12 += 4;
          if (++v15 == v14)
            goto LABEL_45;
          goto LABEL_22;
        }
        v18 = *(char **)(v6 + 8);
        v17 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v18 < v17)
        {
          *(_DWORD *)v18 = v16;
          *(_QWORD *)(v6 + 8) = v18 + 4;
          v19 = v12 + 4;
          v20 = a1[20];
          v21 = v20 - (v12 + 4);
          if (v20 == v12 + 4)
            goto LABEL_19;
LABEL_18:
          memmove(v12, v19, v21);
          goto LABEL_19;
        }
        v22 = (void **)v6;
        v23 = a1;
        v24 = (char *)*v22;
        v25 = v18 - (_BYTE *)*v22;
        v26 = v25 >> 2;
        v27 = (v25 >> 2) + 1;
        if (v27 >> 62)
          sub_20E867F44();
        v28 = v17 - (_QWORD)v24;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        v59 = v27;
        if (v27)
        {
          if (v27 >> 62)
            sub_20E877A38();
          v29 = operator new(4 * v27);
          v30 = &v29[4 * v26];
          *v30 = v16;
          v31 = (uint64_t)(v30 + 1);
          v32 = v18 - v24;
          if (v18 == v24)
          {
LABEL_35:
            a1 = v23;
            v6 = v58;
            goto LABEL_41;
          }
        }
        else
        {
          v29 = 0;
          v30 = (_DWORD *)(4 * v26);
          *(_DWORD *)(4 * v26) = v16;
          v31 = 4 * v26 + 4;
          v32 = v18 - v24;
          if (v18 == v24)
            goto LABEL_35;
        }
        v33 = v32 - 4;
        if (v33 < 0x2C)
          break;
        v34 = v18 - &v29[v25];
        a1 = v23;
        v6 = v58;
        if (v34 < 0x20)
          goto LABEL_40;
        v35 = (v33 >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v37 = &v18[-v36];
        v30 = (_DWORD *)((char *)v30 - v36);
        v38 = &v29[4 * v26 - 16];
        v39 = v18 - 16;
        v40 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        v18 = v37;
        if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_40;
LABEL_41:
        *(_QWORD *)v6 = v30;
        *(_QWORD *)(v6 + 8) = v31;
        *(_QWORD *)(v6 + 16) = &v29[4 * v59];
        if (v24)
          operator delete(v24);
        v14 = v57;
        *(_QWORD *)(v6 + 8) = v31;
        v19 = v12 + 4;
        v43 = a1[20];
        v21 = v43 - (v12 + 4);
        if (v43 != v12 + 4)
          goto LABEL_18;
LABEL_19:
        a1[20] = &v12[v21];
        v13 -= 4;
        if (++v15 == v14)
          goto LABEL_45;
LABEL_22:
        ++v16;
        if (v12 == v13)
          goto LABEL_45;
      }
      a1 = v23;
      v6 = v58;
      do
      {
LABEL_40:
        v42 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v30 = v42;
      }
      while (v18 != v24);
      goto LABEL_41;
    }
LABEL_45:
    if (*(_QWORD *)v6 != *(_QWORD *)(v6 + 8))
    {
      sub_20F2B9678((uint64_t)(a1 + 4), (unsigned int **)v6);
      sub_20F2B9818((uint64_t)(a1 + 4), (unint64_t *)v6);
      v44 = *(unsigned int **)v6;
      v45 = *(unsigned int **)(v6 + 8);
      if (*(unsigned int **)v6 == v45)
      {
        LODWORD(v55) = 0;
      }
      else
      {
        v46 = *a1;
        v47 = *((_DWORD *)a1 + 7);
        v48 = *a1;
        v49 = *a1;
        v50 = *a1;
        do
        {
          while (1)
          {
            v51 = *v44 + v47;
            v52 = &v46[8 * v51];
            if (v49 != v52)
              break;
            v49 += 8;
            if (++v44 == v45)
              goto LABEL_53;
          }
          v53 = &v46[8 * v51];
          if (v48 != v49)
          {
            v54 = v52 - v49;
            memmove(v50, v49, v52 - v49);
            v53 = &v50[v54];
            v46 = *a1;
          }
          v49 = &v46[8 * (v51 + 1)];
          v50 = v53;
          v48 = v52;
          ++v44;
        }
        while (v44 != v45);
LABEL_53:
        v55 = (*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2;
        *((_DWORD *)a1 + 6) -= v55;
        if (v48 != v49)
        {
          v56 = &v46[8 * *((unsigned int *)a1 + 4)];
          if (v56 != v49)
            memmove(v50, v49, v56 - v49);
        }
      }
      sub_20F20CEEC(a1, *((_DWORD *)a1 + 4) - v55, 1u);
    }
  }
}

void sub_20F2B6F24(_QWORD *a1, char **a2, size_t __sz)
{
  void *v3;
  char *v4;
  char *v5;
  size_t v6;
  size_t v9;
  unint64_t v10;
  char *v11;
  void **v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  void **v61;

  v3 = *(void **)__sz;
  *(_QWORD *)(__sz + 8) = *(_QWORD *)__sz;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
    return;
  v6 = __sz;
  v9 = v5 - v4;
  v10 = (v5 - v4) >> 2;
  if (v10 > (uint64_t)(*(_QWORD *)(__sz + 16) - (_QWORD)v3) >> 2)
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v11 = (char *)operator new(v9);
    *(_QWORD *)v6 = v11;
    *(_QWORD *)(v6 + 8) = v11;
    *(_QWORD *)(v6 + 16) = &v11[4 * v10];
    if (v3)
      operator delete(v3);
  }
  v12 = (void **)(a1 + 19);
  v14 = (_BYTE *)a1[19];
  v13 = (_BYTE *)a1[20];
  v15 = (v13 - v14) >> 2;
  v16 = v15 + ((a2[1] - *a2) >> 2);
  v61 = (void **)(a1 + 19);
  if (v16 > (uint64_t)(a1[21] - (_QWORD)v14) >> 2)
  {
    if (v16 >> 62)
      sub_20E867F44();
    v17 = v6;
    v18 = 4 * v16;
    v19 = operator new(4 * v16);
    v20 = &v19[4 * v15];
    v21 = v20;
    if (v13 == v14)
      goto LABEL_17;
    v22 = v13 - v14 - 4;
    if (v22 >= 0x2C)
    {
      v21 = &v19[4 * v15];
      if ((unint64_t)(v14 - v19) >= 0x20)
      {
        v23 = (v22 >> 2) + 1;
        v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        v25 = &v13[-v24];
        v21 = &v20[-v24];
        v26 = &v19[4 * v15 - 16];
        v27 = (__int128 *)(v13 - 16);
        v28 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = *v27;
          *(v26 - 1) = *(v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 2;
          v28 -= 8;
        }
        while (v28);
        v13 = v25;
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_17:
          a1[19] = v21;
          a1[20] = v20;
          a1[21] = &v19[v18];
          v6 = v17;
          v12 = (void **)(a1 + 19);
          if (v14)
          {
            operator delete(v14);
            v21 = (char *)a1[19];
            v20 = (char *)a1[20];
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      v21 = &v19[4 * v15];
    }
    do
    {
      v30 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v21 - 1) = v30;
      v21 -= 4;
    }
    while (v13 != v14);
    goto LABEL_17;
  }
  v20 = (char *)a1[20];
  v21 = (char *)a1[19];
LABEL_19:
  v32 = *a2;
  v31 = a2[1];
  if (v21 == v20)
  {
    v33 = 0;
LABEL_25:
    if (v32 != v31)
      goto LABEL_28;
  }
  else
  {
    v33 = 0;
    while (*(_DWORD *)v21 <= *(_DWORD *)v32)
    {
      v21 += 4;
      ++v33;
      if (v21 == v20)
        goto LABEL_25;
    }
    v20 = v21;
    if (v32 != v31)
    {
LABEL_28:
      v59 = a2[1];
      v60 = a1;
      while (1)
      {
        if (v20 != (char *)a1[20] && *(_DWORD *)v32 == *(_DWORD *)v20)
          goto LABEL_31;
        v36 = *(char **)(v6 + 8);
        v35 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v36 >= v35)
          break;
        *(_DWORD *)v36 = v33;
        v34 = (uint64_t)(v36 + 4);
LABEL_30:
        *(_QWORD *)(v6 + 8) = v34;
        v20 = sub_20EDB3C7C(v12, v20, v32);
        v32 += 4;
LABEL_31:
        v20 += 4;
        ++v33;
        if (v32 == v31)
          goto LABEL_56;
      }
      v37 = v6;
      v38 = *(char **)v6;
      v39 = (uint64_t)&v36[-*(_QWORD *)v6];
      v40 = v39 >> 2;
      v41 = (v39 >> 2) + 1;
      if (v41 >> 62)
        sub_20E867F44();
      v42 = v35 - (_QWORD)v38;
      if (v42 >> 1 > v41)
        v41 = v42 >> 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
        v43 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 62)
          sub_20E877A38();
        v44 = operator new(4 * v43);
        v45 = &v44[4 * v40];
        *v45 = v33;
        v34 = (uint64_t)(v45 + 1);
        v46 = v36 - v38;
        if (v36 != v38)
          goto LABEL_44;
      }
      else
      {
        v44 = 0;
        v45 = (_DWORD *)(4 * v40);
        *(_DWORD *)(4 * v40) = v33;
        v34 = 4 * v40 + 4;
        v46 = v36 - v38;
        if (v36 != v38)
        {
LABEL_44:
          v47 = v46 - 4;
          if (v47 >= 0x2C)
          {
            v48 = v36 - &v44[v39];
            v6 = v37;
            v12 = v61;
            if (v48 >= 0x20)
            {
              v49 = (v47 >> 2) + 1;
              v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
              v51 = &v36[-v50];
              v45 = (_DWORD *)((char *)v45 - v50);
              v52 = &v44[4 * v40 - 16];
              v53 = v36 - 16;
              v54 = v49 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v55 = *(_OWORD *)v53;
                *(v52 - 1) = *((_OWORD *)v53 - 1);
                *v52 = v55;
                v52 -= 2;
                v53 -= 32;
                v54 -= 8;
              }
              while (v54);
              v36 = v51;
              if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_53;
            }
          }
          else
          {
            v6 = v37;
            v12 = v61;
          }
          do
          {
            v56 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *--v45 = v56;
          }
          while (v36 != v38);
LABEL_53:
          *(_QWORD *)v6 = v45;
          *(_QWORD *)(v6 + 8) = v34;
          *(_QWORD *)(v6 + 16) = &v44[4 * v43];
          if (v38)
            operator delete(v38);
          v31 = v59;
          a1 = v60;
          goto LABEL_30;
        }
      }
      v6 = v37;
      v12 = v61;
      goto LABEL_53;
    }
  }
LABEL_56:
  v57 = *(_QWORD *)(v6 + 8);
  if (*(_QWORD *)v6 != v57)
  {
    v58 = v57 - *(_QWORD *)v6;
    if (a1[5])
    {
      sub_20F2B9E90((uint64_t)(a1 + 4), (unsigned int **)v6, v58 >> 2);
      sub_20F2B9FE8((uint64_t)(a1 + 4), (unsigned int **)v6);
    }
    else
    {
      (*(void (**)(_QWORD *, unint64_t, unint64_t))(a1[4] + 24))(a1 + 4, (unint64_t)v58 >> 2, (unint64_t)v58 >> 2);
    }
    sub_20F2B9C50((uint64_t)a1, (_QWORD *)v6);
  }
}

void sub_20F2B734C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;

  v2 = *a2;
  v3 = *(_DWORD *)(*a2 + 8) - 1;
  *(_DWORD *)(*a2 + 8) = v3;
  if (!v3)
  {
    v4 = *a1;
    v5 = *(_DWORD *)(v2 + 16);
    v7 = *(char **)(*a1 + 8);
    v6 = *(_QWORD *)(*a1 + 16);
    if ((unint64_t)v7 < v6)
    {
      *(_DWORD *)v7 = v5;
      v8 = (uint64_t)(v7 + 4);
LABEL_23:
      *(_QWORD *)(v4 + 8) = v8;
      return;
    }
    v9 = *(char **)v4;
    v10 = (uint64_t)&v7[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_20E867F44();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_20E877A38();
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *v16 = v5;
      v8 = (uint64_t)(v16 + 1);
      v18 = v7 - v9;
      if (v7 == v9)
        goto LABEL_21;
    }
    else
    {
      v15 = 0;
      v16 = (_DWORD *)(4 * v11);
      v17 = 0;
      *(_DWORD *)(4 * v11) = v5;
      v8 = 4 * v11 + 4;
      v18 = v7 - v9;
      if (v7 == v9)
      {
LABEL_21:
        *(_QWORD *)v4 = v16;
        *(_QWORD *)(v4 + 8) = v8;
        *(_QWORD *)(v4 + 16) = v17;
        if (v9)
          operator delete(v9);
        goto LABEL_23;
      }
    }
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v7 - &v15[v10]) < 0x20)
      goto LABEL_28;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v22 = &v7[-v21];
    v16 = (_DWORD *)((char *)v16 - v21);
    v23 = &v15[4 * v11 - 16];
    v24 = v7 - 16;
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    v7 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v27 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v16 = v27;
      }
      while (v7 != v9);
    }
    goto LABEL_21;
  }
}

void sub_20F2B74E8(_QWORD *a1, unsigned int **a2)
{
  unsigned int **v3;
  _QWORD *v4;
  void **v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  unsigned int *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  unsigned int v55;
  __n128 *v56;
  __n128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const std::nothrow_t *v61;
  char *v62;
  BOOL v63;
  char *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  unsigned int *v68;
  _QWORD *v69;
  void **v70;
  char v71;

  v4 = (_QWORD *)*a1;
  v3 = (unsigned int **)a1[1];
  v5 = (void **)(*a1 + 24);
  v6 = *v5;
  v7 = *(_BYTE **)(*a1 + 32);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v67 = (v7 - v6) >> 2;
  v8 = v67 + v3[1] - *v3;
  v70 = v5;
  v9 = *v5;
  if (v8 <= (uint64_t)(v4[5] - (_QWORD)*v5) >> 2)
    goto LABEL_13;
  if (v8 >> 62)
LABEL_62:
    sub_20E867F44();
  v10 = (_BYTE *)v4[4];
  v11 = 4 * v8;
  v12 = (char *)operator new(4 * v8);
  v13 = v10 - v9;
  v14 = &v12[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
  v15 = v14;
  if (v10 != v9)
  {
    if ((unint64_t)(v13 - 4) < 0x2C)
    {
      v15 = &v12[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v24 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v15 - 1) = v24;
        v15 -= 4;
      }
      while (v10 != v9);
      goto LABEL_11;
    }
    v15 = &v12[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFFCLL)] - v12) < 0x20)
      goto LABEL_10;
    v16 = v13 >> 2;
    v17 = ((unint64_t)(v13 - 4) >> 2) + 1;
    v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[4 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  v4[3] = v15;
  v4[4] = v14;
  v4[5] = &v12[v11];
  if (v9)
    operator delete(v9);
LABEL_13:
  v65 = v7;
  v66 = v6;
  v26 = *v3;
  v25 = v3[1];
  if (*v3 != v25)
  {
    v68 = v3[1];
    v69 = v4;
    while (1)
    {
      v28 = *v26;
      v30 = *a2;
      v29 = a2[1];
      if (v29 != *a2)
      {
        v31 = ((char *)v29 - (char *)*a2) >> 4;
        do
        {
          v32 = v31 >> 1;
          v33 = &v30[4 * (v31 >> 1)];
          v35 = *v33;
          v34 = v33 + 4;
          v31 += ~(v31 >> 1);
          if (v35 < v28)
            v30 = v34;
          else
            v31 = v32;
        }
        while (v31);
      }
      if (v30 == v29 || *v30 != v28)
      {
        v28 = *v29;
        v30 = a2[1];
      }
      if ((*(_BYTE *)(*((_QWORD *)v30 + 1) + 4) & 6) != 0)
        goto LABEL_17;
      v37 = (char *)v4[4];
      v36 = v4[5];
      if ((unint64_t)v37 >= v36)
        break;
      *(_DWORD *)v37 = v28;
      v27 = (uint64_t)(v37 + 4);
LABEL_16:
      v4[4] = v27;
      *(_BYTE *)(*((_QWORD *)v30 + 1) + 4) ^= 2u;
LABEL_17:
      if (++v26 == v25)
        goto LABEL_49;
    }
    v38 = (char *)*v70;
    v39 = v37 - (_BYTE *)*v70;
    v40 = v39 >> 2;
    v41 = (v39 >> 2) + 1;
    if (v41 >> 62)
      goto LABEL_62;
    v42 = v36 - (_QWORD)v38;
    if (v42 >> 1 > v41)
      v41 = v42 >> 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
      v43 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      if (v43 >> 62)
        sub_20E877A38();
      v44 = operator new(4 * v43);
      v45 = (unsigned int *)&v44[4 * v40];
      *v45 = v28;
      v27 = (uint64_t)(v45 + 1);
      v46 = v37 - v38;
      if (v37 == v38)
        goto LABEL_46;
    }
    else
    {
      v44 = 0;
      v45 = (unsigned int *)(4 * v40);
      *(_DWORD *)(4 * v40) = v28;
      v27 = 4 * v40 + 4;
      v46 = v37 - v38;
      if (v37 == v38)
      {
LABEL_46:
        v4 = v69;
        v69[3] = v45;
        v69[4] = v27;
        v69[5] = &v44[4 * v43];
        if (v38)
          operator delete(v38);
        v25 = v68;
        goto LABEL_16;
      }
    }
    v47 = v46 - 4;
    if (v47 < 0x2C)
      goto LABEL_66;
    if ((unint64_t)(v37 - v44 - v39) < 0x20)
      goto LABEL_66;
    v48 = (v47 >> 2) + 1;
    v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
    v50 = &v37[-v49];
    v45 = (unsigned int *)((char *)v45 - v49);
    v51 = &v44[4 * v40 - 16];
    v52 = v37 - 16;
    v53 = v48 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 8;
    }
    while (v53);
    v37 = v50;
    if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_66:
      do
      {
        v55 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *--v45 = v55;
      }
      while (v37 != v38);
    }
    goto LABEL_46;
  }
LABEL_49:
  if (v65 != v66)
  {
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v56 = (__n128 *)v4[3];
    v57 = (__n128 *)v4[4];
    v58 = (char *)v57 - ((char *)v56 + 4 * v67);
    v59 = v58 >> 2;
    if (v58 >> 2 >= v67)
      v60 = v67;
    else
      v60 = v58 >> 2;
    if (v60 < 1)
    {
LABEL_57:
      v64 = 0;
      v60 = 0;
    }
    else
    {
      v61 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      while (1)
      {
        v62 = (char *)operator new(4 * v60, v61);
        if (v62)
          break;
        v63 = (unint64_t)v60 > 1;
        v60 = (unint64_t)v60 >> 1;
        if (!v63)
          goto LABEL_57;
      }
      v64 = v62;
    }
    sub_20EDB30B0(v56, (__n128 *)((char *)v56 + 4 * v67), v57, (uint64_t)&v71, v67, v59, v64, v60);
    if (v64)
      operator delete(v64);
  }
}

void sub_20F2B78CC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2B78E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)result + 104);
  v2 = *(_QWORD *)(*(_QWORD *)result + 112);
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(v1 + 72);
    if (*(_BYTE *)(v1 + 144) || (*(_BYTE *)(v3 + 4) & 6) != 0)
      ++*(_DWORD *)(v3 + 8);
    v1 += 152;
  }
  return result;
}

_QWORD *sub_20F2B7928(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v5 = *a4;
  v4 = a4[1];
  if (*a4 != v4 && *a3 != a3[1])
  {
    v31 = a3;
    v32 = result + 2;
    v29 = a4[1];
    v30 = a2;
    v28 = result;
    while (1)
    {
      v7 = (unsigned int *)*a3;
      v6 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v6)
        break;
LABEL_4:
      v5 += 2;
      if (v5 == v4)
        return result;
    }
    v8 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v5);
    v9 = result[11] + 24 * v5[1];
    v11 = *v8;
    v10 = v8[1];
    while (1)
    {
      if (v11 == v10)
        goto LABEL_4;
      v12 = *v7;
      while (*(_DWORD *)v11 != v12)
      {
        if (*(_DWORD *)v11 > v12)
          goto LABEL_31;
        v11 += 16;
        if (v11 == v10)
          goto LABEL_4;
      }
      v13 = v7[1];
      v14 = *(char **)v9;
      v15 = *(char **)(v9 + 8);
      if (*(char **)v9 != v15)
      {
        while (*(_DWORD *)v14 < v13)
        {
          v14 += 16;
          if (v14 == v15)
            goto LABEL_22;
        }
      }
      if (v14 == v15)
        goto LABEL_22;
      if (*(_DWORD *)v14 != v13)
        break;
      v16 = (_QWORD *)(*v32 + 8 * *((_QWORD *)v14 + 1));
      v17 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * *(_QWORD *)(v11 + 8));
      if (v17 != v16)
        goto LABEL_30;
LABEL_31:
      if (v11 != v10)
      {
        v7 += 2;
        if (v7 != v6)
          continue;
      }
      goto LABEL_4;
    }
    v15 = v14;
LABEL_22:
    v18 = result[10];
    v33 = *(_QWORD *)(a2 + 16);
    v34 = *(_QWORD *)(v11 + 8);
    if (v18)
    {
      v20 = result[6];
      v19 = result[7];
      v21 = ((v19 - v20) << 6) - 1;
      v22 = result[9];
      if (v19 == v20)
        v21 = 0;
      v16 = (_QWORD *)(result[2]
                     + 8
                     * *(_QWORD *)(*(_QWORD *)(v20 + (((unint64_t)(v22 + v18 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v22 + v18 - 1) & 0x1FF)));
      result[10] = v18 - 1;
      if ((unint64_t)(v21 - (v18 + v22) + 1) >= 0x400)
      {
        v23 = result;
        operator delete(*(void **)(v19 - 8));
        v23[7] -= 8;
      }
      v24 = v32;
    }
    else
    {
      v25 = (void *)result[3];
      *(_QWORD *)&v35 = 0;
      v24 = v32;
      v26 = result;
      sub_20F1C5A3C(v32, v25, 1uLL, (uint64_t *)&v35);
      v16 = (_QWORD *)(v26[3] - 8);
    }
    v27 = (uint64_t)((uint64_t)v16 - *v24) >> 3;
    LODWORD(v35) = v13;
    *((_QWORD *)&v35 + 1) = v27;
    sub_20F2B4654((char **)v9, v15, &v35);
    a2 = v30;
    a3 = v31;
    result = v28;
    v4 = v29;
    v17 = (_QWORD *)(v33 + 8 * v34);
    if (v17 == v16)
      goto LABEL_31;
LABEL_30:
    *v16 = *v17;
    goto LABEL_31;
  }
  return result;
}

void sub_20F2B7B68(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t v42;

  v4 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - (_QWORD)v4) >> 3))
    {
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_35:
        sub_20E92CED8();
      v12 = (char *)operator new(2 * v10);
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v12;
      *(_QWORD *)(a4 + 16) = &v12[8 * v11];
      if (v4)
        operator delete(v4);
    }
    v14 = *(_DWORD **)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (*(_DWORD **)a2 != v13)
    {
      v15 = 0;
      v16 = 0;
      v18 = (_DWORD *)*a1;
      v17 = (_DWORD *)a1[1];
      v40 = v17;
      v41 = *(_DWORD **)(a2 + 8);
      do
      {
        if (*v14 == *v18)
        {
          v20 = *(char **)(a4 + 8);
          v19 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v20 >= v19)
          {
            v21 = *(char **)a4;
            v22 = (uint64_t)&v20[-*(_QWORD *)a4];
            v23 = v22 >> 3;
            v24 = (v22 >> 3) + 1;
            if (v24 >> 61)
              goto LABEL_35;
            v25 = v19 - (_QWORD)v21;
            if (v25 >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            v42 = v24;
            if (v24)
            {
              if (v24 >> 61)
                sub_20E877A38();
              v26 = v16;
              v27 = operator new(8 * v24);
              v16 = v26;
            }
            else
            {
              v27 = 0;
            }
            v28 = (unint64_t *)&v27[8 * v23];
            *v28 = v15 | (unint64_t)(v16 << 32);
            v29 = v28 + 1;
            if (v20 != v21)
            {
              v30 = v20 - v21 - 8;
              if (v30 < 0x58)
                goto LABEL_39;
              if ((unint64_t)(v20 - &v27[v22]) < 0x20)
                goto LABEL_39;
              v31 = (v30 >> 3) + 1;
              v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
              v33 = &v20[-v32];
              v28 = (unint64_t *)((char *)v28 - v32);
              v34 = &v27[8 * v23 - 16];
              v35 = v20 - 16;
              v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v37 = *(_OWORD *)v35;
                *(v34 - 1) = *((_OWORD *)v35 - 1);
                *v34 = v37;
                v34 -= 2;
                v35 -= 32;
                v36 -= 4;
              }
              while (v36);
              v20 = v33;
              if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_39:
                do
                {
                  v38 = *((_QWORD *)v20 - 1);
                  v20 -= 8;
                  *--v28 = v38;
                }
                while (v20 != v21);
              }
              v20 = *(char **)a4;
            }
            *(_QWORD *)a4 = v28;
            *(_QWORD *)(a4 + 8) = v29;
            *(_QWORD *)(a4 + 16) = &v27[8 * v42];
            if (v20)
            {
              v39 = v16;
              operator delete(v20);
              LODWORD(v16) = v39;
            }
            v17 = v40;
            v13 = v41;
            *(_QWORD *)(a4 + 8) = v29;
            if (++v18 == v40)
              return;
          }
          else
          {
            *(_QWORD *)v20 = v15 | (unint64_t)(v16 << 32);
            *(_QWORD *)(a4 + 8) = v20 + 8;
            if (++v18 == v17)
              return;
          }
          v16 = (*a3 + v16);
        }
        ++v14;
        ++v15;
      }
      while (v14 != v13);
    }
  }
}

uint64_t sub_20F2B7DD0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, unsigned int **a5, int a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  int v16;
  void *v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v34;

  v12 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 3;
  v13 = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v13;
  v14 = v13 * (unint64_t)v12;
  if (*(_QWORD *)(a2 + 8) < v14)
  {
    if (*(_QWORD *)a2)
      MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
    v15 = (8 * v14 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v15 >> 3;
    *(_QWORD *)a2 = operator new(v15, (std::align_val_t)0x20uLL);
  }
  if (a6)
  {
    v16 = *(_DWORD *)(a2 + 20);
    if (v16 * *(_DWORD *)(a2 + 16))
      bzero(*(void **)a2, 8 * (v16 * *(_DWORD *)(a2 + 16)));
  }
  if (*(_DWORD *)(a3 + 16) == (_DWORD)v13 && *(_DWORD *)(a3 + 20) == (_DWORD)v12)
  {
    v17 = *(void **)a3;
  }
  else
  {
    *(_DWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 20) = v12;
    v17 = *(void **)a3;
    if (*(_QWORD *)(a3 + 8) < v14)
    {
      if (v17)
        MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
      v18 = (8 * v14 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v18 >> 3;
      v17 = operator new(v18, (std::align_val_t)0x20uLL);
      *(_QWORD *)a3 = v17;
      LODWORD(v13) = *(_DWORD *)(a3 + 16);
      LODWORD(v12) = *(_DWORD *)(a3 + 20);
    }
  }
  if ((_DWORD)v13 * (_DWORD)v12)
    bzero(v17, 8 * (v13 * v12));
  v19 = *a4;
  v20 = a4[1];
  if (*a5 != a5[1])
  {
    if (v19 == v20)
      goto LABEL_50;
    do
    {
      v21 = *a5;
      v22 = a5[1];
      if (*a5 != v22)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v19);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v19 + 8);
        do
        {
          if (v24 == v23)
            break;
          v25 = *v21;
          while (*(_DWORD *)v24 < v25)
          {
            v24 += 16;
            if (v24 == v23)
              goto LABEL_20;
          }
          if (*(_DWORD *)v24 == v25)
            *(_QWORD *)(*(_QWORD *)a3 + 8 * (v21[1] + *(_DWORD *)(a3 + 16) * v19[1])) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(v24 + 8));
          if (v24 == v23)
            break;
          v21 += 2;
        }
        while (v21 != v22);
      }
LABEL_20:
      v19 += 2;
    }
    while (v19 != v20);
    v19 = *a4;
    v20 = a4[1];
  }
  if (v19 != v20)
  {
    v26 = *a5;
    v27 = a5[1];
    if (*a5 != v27)
    {
      do
      {
        v28 = *a4;
        v29 = a4[1];
        if (*a4 != v29)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v26);
          v30 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v26 + 8);
          do
          {
            if (v31 == v30)
              break;
            v32 = *v28;
            while (*(_DWORD *)v31 < v32)
            {
              v31 += 16;
              if (v31 == v30)
                goto LABEL_37;
            }
            if (*(_DWORD *)v31 == v32)
              *(_QWORD *)(*(_QWORD *)a2 + 8 * (v28[1] + *(_DWORD *)(a2 + 16) * v26[1])) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(v31 + 8));
            if (v31 == v30)
              break;
            v28 += 2;
          }
          while (v28 != v29);
        }
LABEL_37:
        v26 += 2;
      }
      while (v26 != v27);
    }
  }
LABEL_50:
  v34 = (uint64_t *)a3;
  return sub_20F2B809C(a2, &v34);
}

uint64_t sub_20F2B809C(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  double *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  double *v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t v28;
  double *v29;
  double v30;
  _QWORD v31[2];
  int v32;
  int v33;

  v2 = result;
  v3 = *(double **)result;
  v4 = *a2;
  v5 = **a2;
  if (v5 != *(_QWORD *)result)
  {
    v6 = (*(_DWORD *)(result + 20) * *(_DWORD *)(result + 16));
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *((_DWORD *)v4 + 4);
      v9 = *((_DWORD *)v4 + 5);
      v10 = 8 * v6;
      do
      {
        *v3 = *(double *)(v5 + 8 * (HIDWORD(v7) + v8 * v7)) + *v3;
        ++v3;
        v11 = (v7 + 1);
        v12 = v7 & 0xFFFFFFFF00000000;
        v13 = v12 | v11;
        v7 = v12 + 0x100000000;
        if (v9 > (int)v11)
          v7 = v13;
        v10 -= 8;
      }
      while (v10);
    }
    return result;
  }
  v15 = *((_DWORD *)v4 + 4);
  v14 = *((_DWORD *)v4 + 5);
  v16 = (8 * (v15 * v14) + 31) & 0xFFFFFFFE0;
  v31[1] = v16 >> 3;
  v31[0] = operator new(v16, (std::align_val_t)0x20uLL);
  v32 = v14;
  v33 = v15;
  sub_20F2B8274((unint64_t)v31, v4);
  v17 = (*(_DWORD *)(v2 + 20) * *(_DWORD *)(v2 + 16));
  result = v31[0];
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)v2;
    v19 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v19 < 9)
    {
      v20 = (double *)v31[0];
      v21 = *(double **)v2;
LABEL_19:
      v29 = (double *)(v18 + 8 * v17);
      do
      {
        v30 = *v20++;
        *v21 = v30 + *v21;
        ++v21;
      }
      while (v21 != v29);
      goto LABEL_21;
    }
    v22 = v18 >= v31[0] + 8 * v17 || v31[0] >= v18 + 8 * v17;
    v20 = (double *)v31[0];
    v21 = *(double **)v2;
    if (!v22)
      goto LABEL_19;
    v23 = v19 + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = (double *)(v31[0] + v24);
    v21 = (double *)(v18 + v24);
    v25 = (float64x2_t *)(v18 + 16);
    v26 = (float64x2_t *)(v31[0] + 16);
    v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = vaddq_f64(*v26, *v25);
      v25[-1] = vaddq_f64(v26[-1], v25[-1]);
      *v25 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_21:
  if (result)
    return MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  return result;
}

void sub_20F2B824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20F2B8274(unint64_t result, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  int v8;
  int v9;
  int32x4_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  int v51;
  int v52;
  unsigned int v53;
  int32x4_t v54;
  int32x4_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t *v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t *v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t *v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t *v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t *v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t *v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  __int128 v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  uint64_t v106;
  int64x2_t *v107;
  int64x2_t *v108;
  int64x2_t *v109;
  int64x2_t *v110;
  int64x2_t *v111;
  __int8 *v112;
  int64x2_t *v113;
  int64x2_t *v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v128;
  int v129;
  unsigned int v130;
  unint64_t v131;
  int32x4_t v132;
  int32x4_t v133;
  unsigned int v134;
  unint64_t v135;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  int v144;
  int v145;
  unsigned int v146;
  int32x4_t v147;
  int32x4_t v148;
  unsigned int v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;

  v3 = result;
  v5 = *((_DWORD *)a2 + 4);
  v4 = *((unsigned int *)a2 + 5);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v5;
  v6 = v5 * (unint64_t)v4;
  if (*(_QWORD *)(result + 8) < v6)
  {
    if (*(_QWORD *)result)
      MEMORY[0x212BC6368]();
    v7 = (8 * v6 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = v7 >> 3;
    result = (unint64_t)operator new(v7, (std::align_val_t)0x20uLL);
    *(_QWORD *)v3 = result;
  }
  if (v5)
  {
    v8 = 0;
    v9 = v4 & 7;
    v156 = 2 * v9;
    v154 = v4 & 0xFFFFFFF8;
    v155 = -2 * v9;
    v10.i64[0] = -1;
    v10.i64[1] = -1;
    v11 = v5;
    v151 = v5;
    while (1)
    {
      v153 = v11;
      v12 = v11 <= 1 ? 1 : v11;
      v152 = v8 + 8;
      if (v8 + 8 <= v5 || v5 - v8 == 8)
        break;
      if ((_DWORD)v4)
      {
        v13 = 0;
        v14 = *(_DWORD *)(v3 + 16);
        v15 = *(_QWORD *)v3;
        v16 = *a2;
        v17 = *((_DWORD *)a2 + 4);
        while (1)
        {
          v18 = v13 + 8;
          v19 = v13 + 8 <= v4 ? 8 : v4 - v13;
          if (v19)
            break;
LABEL_15:
          v13 += 8;
          if (v18 >= v4)
            goto LABEL_7;
        }
        v20 = 0;
        result = 0;
        if (v19 >= 0)
          v21 = v19;
        else
          v21 = -v19;
        v22 = 2 * v19;
        v23 = -2 * v19;
        while (1)
        {
          v27 = HIDWORD(result);
          if (v21 >> 4 >= 0x271)
          {
            v30 = v19 + result + v19 * HIDWORD(result);
            v31 = (v30 / v19);
            v32 = (v30 % v19);
            v33 = v32 | (v31 << 32);
            v29 = (v32 + v19) | ((unint64_t)(v31 - 1) << 32);
            if ((int)v32 >= 0)
              v29 = v33;
            goto LABEL_48;
          }
          v28 = (v19 + result);
          if (v19 + (int)result >= 0)
          {
            v29 = result & 0xFFFFFFFF00000000 | v28;
            if ((int)v28 >= v19)
              goto LABEL_45;
            goto LABEL_48;
          }
          v34 = v23 + ((v22 + result) & ~((v22 + (int)result) >> 31));
          v35 = v34 == (_DWORD)result ? 1 : 2;
          v36 = v35 + (v34 - (v34 != (_DWORD)result) - result) / v19;
          if (v36 < 8)
            break;
          LODWORD(v28) = v28 + (v36 & 0xFFFFFFF8) * v19;
          v38 = 0uLL;
          v39 = (int32x4_t)HIDWORD(result);
          v40 = v36 & 0xFFFFFFF8;
          do
          {
            v39 = vaddq_s32(v39, v10);
            v38 = vaddq_s32(v38, v10);
            v40 -= 8;
          }
          while (v40);
          v37 = vaddvq_s32(vaddq_s32(v38, v39));
          if (v36 != (v36 & 0xFFFFFFF8))
            goto LABEL_43;
LABEL_44:
          v29 = v28 | (v37 << 32);
          if ((int)v28 >= v19)
          {
LABEL_45:
            v41 = HIDWORD(v29);
            do
            {
              v28 = (v28 - v19);
              v41 = (v41 + 1);
            }
            while ((int)v28 >= v19);
            v29 = v28 | (v41 << 32);
          }
LABEL_48:
          if ((_DWORD)result != (_DWORD)v29 || HIDWORD(result) != HIDWORD(v29))
          {
            v43 = (_QWORD *)(v15 + 8 * (v13 + (v8 + v20) * v14));
            LODWORD(v44) = result;
            v45 = result;
            do
            {
              *v43++ = *(_QWORD *)(v16
                                 + 8 * (v8 + v17 * v13)
                                 + 8 * (HIDWORD(v45) + v44 * v17));
              v46 = (v44 + 1);
              v47 = v45 & 0xFFFFFFFF00000000;
              v48 = v47 | v46;
              v49 = v47 + 0x100000000;
              if (v19 <= (int)v46)
                v44 = v49;
              else
                v44 = v48;
              v50 = (_DWORD)v44 == (_DWORD)v29 && HIDWORD(v44) == HIDWORD(v29);
              v45 = v44;
            }
            while (!v50);
          }
          if (v21 >> 4 >= 0x271)
          {
            v24 = v19 + result + v19 * HIDWORD(result);
            v25 = (v24 / v19);
            v26 = (v24 % v19);
            if ((v26 & 0x80000000) != 0)
            {
              v26 = (v26 + v19);
              v25 = (v25 - 1);
            }
          }
          else
          {
            v26 = (v19 + result);
            if (v19 + (int)result < 0)
            {
              v51 = v23 + ((v22 + result) & ~((v22 + (int)result) >> 31));
              if (v51 == (_DWORD)result)
                v52 = 1;
              else
                v52 = 2;
              v53 = v52 + (v51 - (v51 != (_DWORD)result) - result) / v19;
              if (v53 < 8)
                goto LABEL_133;
              LODWORD(v26) = v26 + (v53 & 0xFFFFFFF8) * v19;
              v54 = 0uLL;
              v55 = (int32x4_t)HIDWORD(result);
              v56 = v53 & 0xFFFFFFF8;
              do
              {
                v55 = vaddq_s32(v55, v10);
                v54 = vaddq_s32(v54, v10);
                v56 -= 8;
              }
              while (v56);
              v27 = vaddvq_s32(vaddq_s32(v54, v55));
              if (v53 != (v53 & 0xFFFFFFF8))
              {
LABEL_133:
                do
                {
                  LODWORD(v26) = v26 + v19;
                  v27 = (v27 - 1);
                }
                while ((v26 & 0x80000000) != 0);
              }
              result = v26 | (v27 << 32);
              if ((int)v26 < v19)
                goto LABEL_27;
            }
            else
            {
              result = result & 0xFFFFFFFF00000000 | v26;
              if ((int)v26 < v19)
                goto LABEL_27;
            }
            v25 = HIDWORD(result);
            do
            {
              v26 = (v26 - v19);
              v25 = (v25 + 1);
            }
            while ((int)v26 >= v19);
          }
          result = v26 | (v25 << 32);
LABEL_27:
          if (++v20 == v12)
            goto LABEL_15;
        }
        v37 = HIDWORD(result);
        do
        {
LABEL_43:
          LODWORD(v28) = v28 + v19;
          v37 = (v37 - 1);
        }
        while ((v28 & 0x80000000) != 0);
        goto LABEL_44;
      }
LABEL_7:
      v11 = v153 - 8;
      v8 += 8;
      v5 = v151;
      if (v152 >= v151)
        return result;
    }
    result = 40;
    if (v4 >= 8)
    {
      v57 = 0;
      do
      {
        v58 = *((unsigned int *)a2 + 4);
        v59 = *a2 + 8 * (v8 + v58 * v57);
        v158 = *(int64x2_t *)(v59 + 48);
        v61 = *(int64x2_t *)(v59 + 16);
        v60 = *(int64x2_t *)(v59 + 32);
        v62 = (int64x2_t *)(v59 + 8 * v58);
        v64 = v62[1];
        v63 = v62[2];
        v65 = (int64x2_t *)(v59 + 16 * v58);
        v67 = v65[2];
        v66 = v65[3];
        v69 = *v65;
        v68 = v65[1];
        v70 = (int64x2_t *)(v59 + 24 * v58);
        v72 = v70[2];
        v71 = v70[3];
        v74 = *v70;
        v73 = v70[1];
        v75 = (int64x2_t *)(v59 + 32 * v58);
        v77 = v75[2];
        v76 = v75[3];
        v79 = *v75;
        v78 = v75[1];
        v80 = (int64x2_t *)(v59 + 40 * v58);
        v82 = v80[2];
        v81 = v80[3];
        v84 = *v80;
        v83 = v80[1];
        v85 = (int64x2_t *)(v59 + 48 * v58);
        v87 = v85[2];
        v86 = v85[3];
        v88 = v85[1];
        v89 = (int64x2_t *)(v59 + 56 * v58);
        v159 = vzip1q_s64(*(int64x2_t *)v59, *v62);
        v157 = vzip2q_s64(*(int64x2_t *)v59, *v62);
        v90 = vzip1q_s64(v69, v74);
        v69.i64[0] = vdupq_laneq_s64(v69, 1).u64[0];
        v69.i64[1] = v74.i64[1];
        v91 = vzip1q_s64(v79, v84);
        v79.i64[0] = vdupq_laneq_s64(v79, 1).u64[0];
        v79.i64[1] = v84.i64[1];
        v84.i64[0] = vdupq_laneq_s64(*v85, 1).u64[0];
        v92 = vzip1q_s64(*v85, *v89);
        v84.i64[1] = v89->i64[1];
        v93 = vzip1q_s64(v61, v64);
        v94 = vzip2q_s64(v61, v64);
        v95 = vzip1q_s64(v68, v73);
        v68.i64[0] = vdupq_laneq_s64(v68, 1).u64[0];
        v68.i64[1] = v73.i64[1];
        v73.i64[0] = vdupq_laneq_s64(v78, 1).u64[0];
        v96 = vzip1q_s64(v78, v83);
        v73.i64[1] = v83.i64[1];
        v97 = vzip1q_s64(v88, v89[1]);
        v88.i64[0] = vdupq_laneq_s64(v88, 1).u64[0];
        v88.i64[1] = v89[1].i64[1];
        *(_QWORD *)&v98 = vdupq_laneq_s64(v67, 1).u64[0];
        *((_QWORD *)&v98 + 1) = v72.i64[1];
        v99 = vzip1q_s64(v67, v72);
        v100 = vzip1q_s64(v77, v82);
        v77.i64[0] = vdupq_laneq_s64(v77, 1).u64[0];
        v77.i64[1] = v82.i64[1];
        v101 = vzip1q_s64(v87, v89[2]);
        v87.i64[0] = vdupq_laneq_s64(v87, 1).u64[0];
        v87.i64[1] = v89[2].i64[1];
        v102 = vzip1q_s64(v66, v71);
        v66.i64[0] = vdupq_laneq_s64(v66, 1).u64[0];
        v66.i64[1] = v71.i64[1];
        v103 = vzip1q_s64(v76, v81);
        v76.i64[0] = vdupq_laneq_s64(v76, 1).u64[0];
        v76.i64[1] = v81.i64[1];
        v104 = vzip1q_s64(v86, v89[3]);
        v86.i64[0] = vdupq_laneq_s64(v86, 1).u64[0];
        v86.i64[1] = v89[3].i64[1];
        v105 = v62[3];
        v106 = *(unsigned int *)(v3 + 16);
        v107 = (int64x2_t *)(*(_QWORD *)v3 + 8 * (v57 + v8 * v106));
        v107[2] = v91;
        v107[3] = v92;
        *v107 = v159;
        v107[1] = v90;
        v108 = (int64x2_t *)((char *)v107 + 8 * v106);
        *v108 = v157;
        v108[1] = v69;
        v108[2] = v79;
        v108[3] = v84;
        v109 = &v107[v106];
        *v109 = v93;
        v109[1] = v95;
        v109[2] = v96;
        v109[3] = v97;
        v110 = (int64x2_t *)((char *)v107 + 24 * v106);
        *v110 = v94;
        v110[1] = v68;
        v110[2] = v73;
        v110[3] = v88;
        v111 = &v107[2 * v106];
        *v111 = vzip1q_s64(v60, v63);
        v111[1] = v99;
        v111[2] = v100;
        v111[3] = v101;
        v112 = &v107->i8[40 * v106];
        *(int64x2_t *)v112 = vzip2q_s64(v60, v63);
        *((_OWORD *)v112 + 1) = v98;
        *((int64x2_t *)v112 + 2) = v77;
        *((int64x2_t *)v112 + 3) = v87;
        v113 = &v107[3 * v106];
        *v113 = vzip1q_s64(v158, v105);
        v113[1] = v102;
        v113[2] = v103;
        v113[3] = v104;
        v114 = (int64x2_t *)((char *)v107 + 56 * v106);
        v114[2] = v76;
        v114[3] = v86;
        *v114 = vzip2q_s64(v158, v105);
        v114[1] = v66;
        LODWORD(v114) = v57 + 16;
        v57 += 8;
      }
      while (v114 <= v4);
    }
    if ((v4 & 7) == 0)
      goto LABEL_7;
    v115 = 0;
    v116 = 0;
    v117 = *(_DWORD *)(v3 + 16);
    v118 = *(_QWORD *)v3;
    v119 = *((_DWORD *)a2 + 4);
    v120 = *a2 + 8 * (v8 + v119 * v154);
    while (1)
    {
      v121 = HIDWORD(v116);
      v122 = (v9 + v116);
      v123 = v116 & 0xFFFFFFFF00000000 | v122;
      v124 = v123;
      LODWORD(v125) = v9 + v116;
      if (v9 + (int)v116 >= 0)
      {
        if ((int)v125 < v9)
          goto LABEL_85;
        goto LABEL_101;
      }
      v128 = v155 + ((v156 + v116) & ~((v156 + (int)v116) >> 31));
      v129 = v128 == (_DWORD)v116 ? 1 : 2;
      v130 = v129 + (v128 - (v128 != (_DWORD)v116) - v116) / v9;
      if (v130 < 8)
        break;
      LODWORD(v125) = v122 + (v130 & 0xFFFFFFF8) * v9;
      v132 = 0uLL;
      v133 = (int32x4_t)HIDWORD(v116);
      v134 = v130 & 0xFFFFFFF8;
      do
      {
        v133 = vaddq_s32(v133, v10);
        v132 = vaddq_s32(v132, v10);
        v134 -= 8;
      }
      while (v134);
      v131 = vaddvq_s32(vaddq_s32(v132, v133));
      if (v130 != (v130 & 0xFFFFFFF8))
        goto LABEL_99;
LABEL_100:
      v124 = v125 | (v131 << 32);
      if ((int)v125 < v9)
      {
LABEL_85:
        v126 = HIDWORD(v124);
        if ((_DWORD)v116 == (_DWORD)v124 && HIDWORD(v116) == HIDWORD(v124))
          goto LABEL_116;
        goto LABEL_107;
      }
LABEL_101:
      v135 = HIDWORD(v124);
      do
      {
        v125 = (v125 - v9);
        v135 = (v135 + 1);
      }
      while ((int)v125 >= v9);
      v124 = v125 | (v135 << 32);
      v126 = HIDWORD(v124);
      if ((_DWORD)v116 == (_DWORD)v124 && HIDWORD(v116) == HIDWORD(v124))
        goto LABEL_116;
LABEL_107:
      v137 = (_QWORD *)(v118 + 8 * (v154 + (v8 + v115) * v117));
      LODWORD(v138) = v116;
      result = v116;
      do
      {
        *v137++ = *(_QWORD *)(v120 + 8 * (HIDWORD(result) + v138 * v119));
        v139 = (v138 + 1);
        v140 = result & 0xFFFFFFFF00000000;
        v141 = v140 | v139;
        v142 = v140 + 0x100000000;
        if (v9 <= (int)v139)
          v138 = v142;
        else
          v138 = v141;
        v143 = (_DWORD)v138 == (_DWORD)v124 && HIDWORD(v138) == (_DWORD)v126;
        result = v138;
      }
      while (!v143);
LABEL_116:
      if ((v122 & 0x80000000) != 0)
      {
        v144 = v155 + ((v156 + v116) & ~((v156 + (int)v116) >> 31));
        if (v144 == (_DWORD)v116)
          v145 = 1;
        else
          v145 = 2;
        v146 = v145 + (v144 - (v144 != (_DWORD)v116) - v116) / v9;
        if (v146 < 8)
          goto LABEL_134;
        LODWORD(v122) = v122 + (v146 & 0xFFFFFFF8) * v9;
        v147 = 0uLL;
        v148 = (int32x4_t)HIDWORD(v116);
        v149 = v146 & 0xFFFFFFF8;
        do
        {
          v148 = vaddq_s32(v148, v10);
          v147 = vaddq_s32(v147, v10);
          v149 -= 8;
        }
        while (v149);
        v121 = vaddvq_s32(vaddq_s32(v147, v148));
        if (v146 != (v146 & 0xFFFFFFF8))
        {
LABEL_134:
          do
          {
            LODWORD(v122) = v122 + v9;
            v121 = (v121 - 1);
          }
          while ((v122 & 0x80000000) != 0);
        }
        v123 = v122 | (v121 << 32);
        if ((int)v122 < v9)
          goto LABEL_82;
LABEL_128:
        v150 = HIDWORD(v123);
        do
        {
          v122 = (v122 - v9);
          v150 = (v150 + 1);
        }
        while ((int)v122 >= v9);
        v123 = v122 | (v150 << 32);
        goto LABEL_82;
      }
      if ((int)v122 >= v9)
        goto LABEL_128;
LABEL_82:
      ++v115;
      v116 = v123;
      if (v115 == 8)
        goto LABEL_7;
    }
    v131 = HIDWORD(v116);
    LODWORD(v125) = v9 + v116;
    do
    {
LABEL_99:
      LODWORD(v125) = v125 + v9;
      v131 = (v131 - 1);
    }
    while ((v125 & 0x80000000) != 0);
    goto LABEL_100;
  }
  return result;
}

unint64_t *sub_20F2B8A74(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t v18;
  double *v19;
  double v20;
  _QWORD v21[2];
  int v22;

  v3 = result;
  v4 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v4 != *result)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)v5 != *result)
    {
      if (*(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20))
      {
        if (*(_DWORD *)(v5 + 16))
          return (unint64_t *)sub_20E8BE6CC();
      }
      return result;
    }
  }
  v6 = *(unsigned int *)(v4 + 20);
  v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
  v21[1] = v7 >> 3;
  v21[0] = operator new(v7, (std::align_val_t)0x20uLL);
  v22 = v6;
  sub_20F2B8C44((uint64_t)v21, a2);
  v8 = *((unsigned int *)v3 + 4);
  result = (unint64_t *)v21[0];
  if ((_DWORD)v8)
  {
    v9 = *v3;
    v10 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v10 < 9)
    {
      v11 = (double *)v21[0];
      v12 = (double *)*v3;
LABEL_15:
      v19 = (double *)(v9 + 8 * v8);
      do
      {
        v20 = *v11++;
        *v12 = *v12 - v20;
        ++v12;
      }
      while (v12 != v19);
      goto LABEL_17;
    }
    if (v9 < v21[0] + 8 * v8)
    {
      v11 = (double *)v21[0];
      v12 = (double *)*v3;
      if (v21[0] < v9 + 8 * v8)
        goto LABEL_15;
    }
    v13 = v10 + 1;
    v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
    v11 = (double *)(v21[0] + v14);
    v12 = (double *)(v9 + v14);
    v15 = (float64x2_t *)(v9 + 16);
    v16 = (float64x2_t *)(v21[0] + 16);
    v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v18 = vsubq_f64(*v15, *v16);
      v15[-1] = vsubq_f64(v15[-1], v16[-1]);
      *v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_15;
  }
LABEL_17:
  if (result)
    return (unint64_t *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  return result;
}

void sub_20F2B8C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F2B8C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  int v14;

  v4 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1 || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)v5 == *(_QWORD *)a1))
  {
    v6 = *(unsigned int *)(v4 + 20);
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    v13 = v7 >> 3;
    v12 = operator new(v7, (std::align_val_t)0x20uLL);
    v14 = v6;
    sub_20F2B8C44(&v12, a2);
    v8 = *(void **)a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    v12 = v8;
    v13 = v9;
    *(_DWORD *)(a1 + 16) = v14;
    v14 = 0;
    if (v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  else if (*(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20) && *(_DWORD *)(v5 + 16))
  {
    sub_20E8BE6CC();
  }
  else
  {
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
      bzero(*(void **)a1, 8 * v11);
  }
}

void sub_20F2B8D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F2B8D98(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  double *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  uint64_t v26;
  float64x2_t v27;
  double *v28;
  double v29;
  _QWORD v30[2];
  int v31;
  int v32;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const double **)v6;
  if (*(_QWORD *)v6 != *(_QWORD *)a1 && *(double **)v5 != v4)
  {
    v9 = *(_DWORD *)(v6 + 16);
    v8 = *(_DWORD *)(v6 + 20);
    if (v9 * v8)
    {
      v11 = *(_DWORD *)(v5 + 16);
      v10 = *(_DWORD *)(v5 + 20);
      if (v10 * v11)
        sub_20E8BE654(1, 0, v8, v10, v9, v7, v9, *(double **)v5, -*(double *)(a2 + 24), 1.0, v11, v4, *(_DWORD *)(a1 + 16));
    }
    return;
  }
  v12 = *(_DWORD *)(v6 + 20);
  v13 = *(_DWORD *)(v5 + 20);
  v14 = (8 * (v13 * v12) + 31) & 0xFFFFFFFE0;
  v30[1] = v14 >> 3;
  v30[0] = operator new(v14, (std::align_val_t)0x20uLL);
  v31 = v12;
  v32 = v13;
  sub_20F2B8F78((uint64_t)v30, a2);
  v15 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v16 = v30[0];
  if ((_DWORD)v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = (v15 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 < 9)
    {
      v19 = (double *)v30[0];
      v20 = *(double **)a1;
LABEL_18:
      v28 = (double *)(v17 + 8 * v15);
      do
      {
        v29 = *v19++;
        *v20 = *v20 - v29;
        ++v20;
      }
      while (v20 != v28);
      goto LABEL_20;
    }
    v21 = v17 >= v30[0] + 8 * v15 || v30[0] >= v17 + 8 * v15;
    v19 = (double *)v30[0];
    v20 = *(double **)a1;
    if (!v21)
      goto LABEL_18;
    v22 = v18 + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = (double *)(v30[0] + v23);
    v20 = (double *)(v17 + v23);
    v24 = (float64x2_t *)(v17 + 16);
    v25 = (float64x2_t *)(v30[0] + 16);
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = vsubq_f64(*v24, *v25);
      v24[-1] = vsubq_f64(v24[-1], v25[-1]);
      *v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_18;
  }
LABEL_20:
  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
}

void sub_20F2B8F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F2B8F78(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  double *v15;
  size_t v16;
  size_t v17;
  int v18;
  void *v19;
  size_t v20;
  unint64_t v21;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const double **)v6;
  if (*(double **)v6 == v4 || *(double **)v5 == v4)
  {
    v12 = *(_DWORD *)(v6 + 20);
    v13 = *(_DWORD *)(v5 + 20);
    v14 = (8 * v13 * v12 + 31) & 0xFFFFFFFE0;
    v20 = v14 >> 3;
    v19 = operator new(v14, (std::align_val_t)0x20uLL);
    v21 = __PAIR64__(v13, v12);
    sub_20F2B8F78(&v19, a2);
    v15 = *(double **)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = v20;
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v17;
    v19 = v15;
    v20 = v16;
    *(_QWORD *)(a1 + 16) = v21;
    v21 = 0;
    if (v15)
      MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 16);
    v8 = *(_DWORD *)(v6 + 20);
    if (v9 * v8 && (v11 = *(_DWORD *)(v5 + 16), v10 = *(_DWORD *)(v5 + 20), v10 * v11))
    {
      sub_20E8BE654(1, 0, v8, v10, v9, v7, v9, *(double **)v5, *(double *)(a2 + 24), 0.0, v11, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 20);
      if (v18 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v18 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20F2B90B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F2B90DC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  char **v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  __int128 *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  int v66;
  _BYTE *v67;
  _QWORD *v68;
  unsigned int v69;
  int v70;
  __int128 v71;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a2;
    v5 = 0;
    v6 = a1 + 40;
    v68 = (_QWORD *)(a1 + 16);
    v62 = 1;
    v59 = HIDWORD(a3);
    v60 = a1 + 40;
    v63 = a3;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 88);
      v8 = (uint64_t *)(v7 + 24 * v5);
      v9 = *v8;
      v10 = v8[1];
      if (*v8 != v10)
      {
        v11 = *(_QWORD *)(a1 + 48);
        v12 = *(_QWORD *)(a1 + 56);
        v13 = *(_QWORD *)(a1 + 80);
        do
        {
          v14 = ((v12 - v11) << 6) - 1;
          if (v12 == v11)
            v14 = 0;
          v15 = *(_QWORD *)(a1 + 72) + v13;
          if (v14 == v15)
          {
            sub_20EDB36DC(v6);
            v11 = *(_QWORD *)(a1 + 48);
            v12 = *(_QWORD *)(a1 + 56);
            v15 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v11 + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v15 & 0x1FF)) = *(_QWORD *)(v9 + 8);
          v13 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v13;
          v9 += 16;
        }
        while (v9 != v10);
        v9 = *v8;
        v7 = *(_QWORD *)(a1 + 88);
      }
      v8[1] = v9;
      v16 = v5 + 1;
      v17 = *(_DWORD *)(a1 + 8);
      v61 = v5 + 1;
      if (v17 < (int)v5 + 1)
        v16 = *(_DWORD *)(a1 + 8);
      v18 = v63;
      if (v16)
        break;
LABEL_3:
      ++v62;
      v6 = v60;
      v5 = v61;
      if (v61 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v19 = 0;
    v20 = (char **)(v7 + 24 * v5);
    v21 = v5 + v59;
    v22 = v62;
    if (v17 < v62)
      v22 = *(_DWORD *)(a1 + 8);
    v69 = v22;
    v66 = v5 + v59;
    while (1)
    {
      v26 = *v3;
      v25 = *((_DWORD *)v3 + 4);
      v27 = *v20;
      v28 = v20[1];
      if (*v20 != v28)
      {
        while (*(_DWORD *)v27 < v19)
        {
          v27 += 16;
          if (v27 == v28)
            goto LABEL_30;
        }
      }
      if (v27 != v28)
      {
        if (*(_DWORD *)v27 == v19)
        {
          v23 = (_QWORD *)(*v68 + 8 * *((_QWORD *)v27 + 1));
          goto LABEL_21;
        }
        v28 = v27;
      }
LABEL_30:
      v29 = *(_QWORD *)(a1 + 80);
      v70 = *((_DWORD *)v3 + 4);
      if (v29)
      {
        v31 = *(_QWORD *)(a1 + 48);
        v30 = *(_QWORD *)(a1 + 56);
        v32 = ((v30 - v31) << 6) - 1;
        v33 = *(_QWORD *)(a1 + 72);
        if (v30 == v31)
          v32 = 0;
        v23 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v31 + (((unint64_t)(v33 + v29 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v33 + v29 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v29 - 1;
        if ((unint64_t)(v32 - (v29 + v33) + 1) >= 0x400)
        {
          operator delete(*(void **)(v30 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        goto LABEL_20;
      }
      *(_QWORD *)&v71 = 0;
      v35 = *(char **)(a1 + 16);
      v34 = *(char **)(a1 + 24);
      v36 = v34 - v35;
      v37 = (v34 - v35) >> 3;
      v38 = &v35[(v34 - v35) & 0xFFFFFFFFFFFFFFF8];
      v39 = *(char **)(a1 + 32);
      if (v39 == v34)
        break;
      if (v34 == v38)
      {
        *(_QWORD *)v34 = v71;
        *(_QWORD *)(a1 + 24) = v34 + 8;
        v3 = a2;
      }
      else
      {
        v40 = v34 - 8;
        if ((unint64_t)v34 < 8)
        {
          v41 = *(_QWORD **)(a1 + 24);
          v3 = a2;
        }
        else
        {
          v41 = *(_QWORD **)(a1 + 24);
          v3 = a2;
          do
          {
            v57 = *(_QWORD *)v40;
            v40 += 8;
            *v41++ = v57;
          }
          while (v40 < v34);
        }
        *(_QWORD *)(a1 + 24) = v41;
        if (v34 != v38 + 8)
        {
          memmove(&v34[-8 * ((v34 - (v38 + 8)) >> 3)], v38, v34 - (v38 + 8));
          v38 = &v35[(v34 - v35) & 0xFFFFFFFFFFFFFFF8];
        }
        v58 = &v71;
        if (v38 <= (char *)&v71)
          v58 = (__int128 *)((char *)&v71 + 8 * (*(_QWORD *)(a1 + 24) > (unint64_t)&v71));
        *(_QWORD *)v38 = *(_QWORD *)v58;
      }
LABEL_19:
      v23 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
      v21 = v66;
LABEL_20:
      v24 = ((uint64_t)v23 - *v68) >> 3;
      LODWORD(v71) = v19;
      *((_QWORD *)&v71 + 1) = v24;
      sub_20F2B4654(v20, v28, &v71);
      v25 = v70;
LABEL_21:
      *v23 = *(_QWORD *)(v26 + 8 * (v19 + v18 + v25 * v21));
      if (++v19 == v69)
        goto LABEL_3;
    }
    v42 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      sub_20E867F44();
    v43 = v39 - v35;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    v64 = v42;
    if (v42)
    {
      if (v42 >> 61)
        sub_20E877A38();
      v67 = operator new(8 * v42);
      v38 = &v35[(v34 - v35) & 0xFFFFFFFFFFFFFFF8];
      v37 = (v34 - v35) >> 3;
      v44 = &v67[8 * v37];
      *v44 = 0;
      v45 = (char *)(v44 + 1);
      if (v35 != v34)
        goto LABEL_47;
    }
    else
    {
      v67 = 0;
      v44 = (_QWORD *)(8 * v37);
      *(_QWORD *)(8 * v37) = 0;
      v45 = (char *)(8 * v37 + 8);
      if (v35 != v34)
      {
LABEL_47:
        v46 = v36 - 8;
        if ((unint64_t)(v36 - 8) >= 0x68)
        {
          v48 = &v35[v36 & 0xFFFFFFFFFFFFFFF8] - &v67[v36 & 0xFFFFFFFFFFFFFFF8];
          v47 = v38;
          v3 = a2;
          if (v48 >= 0x20)
          {
            v49 = (v46 >> 3) + 1;
            v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v38[-v50];
            v44 = (_QWORD *)((char *)v44 - v50);
            v51 = &v67[8 * v37 - 16];
            v52 = &v35[8 * v37 - 16];
            v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v54 = *(_OWORD *)v52;
              *(v51 - 1) = *((_OWORD *)v52 - 1);
              *v51 = v54;
              v51 -= 2;
              v52 -= 32;
              v53 -= 4;
            }
            while (v53);
            if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_58;
          }
        }
        else
        {
          v47 = v38;
          v3 = a2;
        }
        do
        {
          v55 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *--v44 = v55;
        }
        while (v47 != v35);
LABEL_58:
        v56 = v34 - v38;
        if (v56)
          memmove(v45, v38, v56);
        *(_QWORD *)(a1 + 16) = v44;
        *(_QWORD *)(a1 + 24) = &v45[v56];
        *(_QWORD *)(a1 + 32) = &v67[8 * v64];
        v18 = v63;
        if (v35)
          operator delete(v35);
        goto LABEL_19;
      }
    }
    v3 = a2;
    goto LABEL_58;
  }
}

void sub_20F2B9678(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;

  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    v5 = a1 + 40;
    do
    {
      v7 = *--v2;
      v6 = v7;
      v8 = *(_QWORD *)(a1 + 88);
      v9 = (uint64_t *)(v8 + 24 * v7);
      v10 = *v9;
      v11 = v9[1];
      if (*v9 != v11)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 80);
        do
        {
          v15 = ((v13 - v12) << 6) - 1;
          if (v13 == v12)
            v15 = 0;
          v16 = *(_QWORD *)(a1 + 72) + v14;
          if (v15 == v16)
          {
            sub_20EDB36DC(v5);
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(_QWORD *)(a1 + 56);
            v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v12 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF)) = *(_QWORD *)(v10 + 8);
          v14 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v14;
          v10 += 16;
        }
        while (v10 != v11);
        v8 = *(_QWORD *)(a1 + 88);
        v6 = *v2;
      }
      v17 = v8 + 24 * v6;
      v18 = v17 + 24;
      v19 = *(_QWORD *)(a1 + 96);
      if (v17 + 24 != v19)
      {
        v17 = v8 + 24 * v6;
        v20 = v17 + 8;
        do
        {
          v22 = v20 - 8;
          v21 = *(void **)(v20 - 8);
          if (v21)
          {
            *(_QWORD *)v20 = v21;
            operator delete(v21);
            *(_QWORD *)v20 = 0;
            *(_QWORD *)(v20 + 8) = 0;
          }
          *(_OWORD *)(v20 - 8) = *(_OWORD *)(v20 + 16);
          *(_QWORD *)(v20 + 8) = *(_QWORD *)(v20 + 32);
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 32) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          v17 += 24;
          v20 += 24;
        }
        while (v22 + 48 != v19);
        v18 = *(_QWORD *)(a1 + 96);
      }
      if (v18 != v17)
      {
        v23 = v18;
        do
        {
          v25 = *(void **)(v23 - 24);
          v23 -= 24;
          v24 = v25;
          if (v25)
          {
            *(_QWORD *)(v18 - 16) = v24;
            operator delete(v24);
          }
          v18 = v23;
        }
        while (v23 != v17);
      }
      *(_QWORD *)(a1 + 96) = v17;
      --*(_DWORD *)(a1 + 12);
    }
    while (v2 != v3);
  }
}

void sub_20F2B9818(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  const double *v6;
  const double *v7;
  uint64_t v8;
  size_t v9;
  double *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  const double *v17;
  double *v18;
  const double *v19;
  const double *v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  const double *v46;
  int32x2_t v47;
  int32x2_t v48;
  int64x2_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  uint64_t v54;
  float64x2x2_t v55;
  float64x2x2_t v56;
  float64x2x3_t v57;
  float64x2x3_t v58;

  v3 = *a2;
  v2 = a2[1];
  v4 = v2 - *a2;
  if (v2 == *a2)
    return;
  v7 = *(const double **)(a1 + 88);
  v6 = *(const double **)(a1 + 96);
  v8 = (char *)v6 - (char *)v7;
  if (v6 == v7)
  {
    *(_DWORD *)(a1 + 8) -= (unint64_t)v4 >> 2;
    return;
  }
  if ((0xAAAAAAAAAAAAAAABLL * (v8 >> 3)) >> 60)
    sub_20E867F44();
  v9 = 0xAAAAAAAAAAAAAAB0 * (v8 >> 3);
  v10 = (double *)operator new(v9);
  v54 = v4 >> 2;
  bzero(v10, v9);
  if ((unint64_t)(v8 - 24) >= 0x1B0
    && ((v11 = (v8 - 24) / 0x18uLL, v10 < &v7[3 * v11 + 2]) ? (v12 = v7 >= &v10[2 * v11 + 2]) : (v12 = 1), v12))
  {
    v13 = v11 + 1;
    v14 = v13 & 3;
    if ((v13 & 3) == 0)
      v14 = 4;
    v15 = v13 - v14;
    v16 = &v10[2 * (v13 - v14)];
    v17 = &v7[3 * v15];
    v18 = v10 + 4;
    do
    {
      v19 = v7 + 12;
      v57 = vld3q_f64(v7);
      v20 = v7 + 6;
      v58 = vld3q_f64(v20);
      v21 = v18 - 4;
      vst2q_f64(v21, *(float64x2x2_t *)v57.val[0].f64);
      vst2q_f64(v18, *(float64x2x2_t *)v58.val[0].f64);
      v18 += 8;
      v7 = v19;
      v15 -= 4;
    }
    while (v15);
  }
  else
  {
    v16 = v10;
    v17 = v7;
  }
  do
  {
    *v16 = *v17;
    v16[1] = v17[1];
    v17 += 3;
    v16 += 2;
  }
  while (v17 != v6);
  v51 = v4;
  v22 = v10;
  v23 = &v10[0xF555555555555556 * (v8 >> 3)];
  v52 = (char *)v22;
  v53 = (_DWORD *)(v2 - 4);
  if (v2 - 4 < v3)
  {
    if (v9 - 16 < 0x30)
    {
      do
      {
LABEL_61:
        v50 = *((_QWORD *)v22 + 1);
        if (v50 != *(_QWORD *)v22)
          *((_QWORD *)v22 + 1) = v50 - 16;
        v22 += 2;
      }
      while (v22 != v23);
      goto LABEL_58;
    }
    v43 = ((v9 - 16) >> 4) + 1;
    v22 += 2 * (v43 & 0x1FFFFFFFFFFFFFFCLL);
    v44 = v52 + 32;
    v45 = v43 & 0x1FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v46 = (const double *)(v44 - 32);
      v55 = vld2q_f64(v46);
      v47 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v55.val[1], (int64x2_t)v55.val[0])));
      if ((v47.i8[0] & 1) != 0)
      {
        *((_QWORD *)v44 - 3) = *(_QWORD *)&v55.val[1].f64[0] - 16;
        if ((v47.i8[4] & 1) == 0)
        {
LABEL_50:
          v56 = vld2q_f64((const double *)v44);
          v48 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v56.val[1], (int64x2_t)v56.val[0])));
          if ((v48.i8[0] & 1) == 0)
            goto LABEL_51;
          goto LABEL_55;
        }
      }
      else if ((v47.i8[4] & 1) == 0)
      {
        goto LABEL_50;
      }
      *((_QWORD *)v44 - 1) = *(_QWORD *)&v55.val[1].f64[1] - 16;
      v56 = vld2q_f64((const double *)v44);
      v48 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v56.val[1], v49)));
      if ((v48.i8[0] & 1) == 0)
      {
LABEL_51:
        if ((v48.i8[4] & 1) != 0)
          goto LABEL_56;
        goto LABEL_47;
      }
LABEL_55:
      *((_QWORD *)v44 + 1) = *(_QWORD *)&v56.val[1].f64[0] - 16;
      if ((v48.i8[4] & 1) != 0)
LABEL_56:
        *((_QWORD *)v44 + 3) = *(_QWORD *)&v56.val[1].f64[1] - 16;
LABEL_47:
      v44 += 64;
      v45 -= 4;
      if (!v45)
      {
        if (v43 == (v43 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_58;
        goto LABEL_61;
      }
    }
  }
  v24 = 0;
  while (2)
  {
    v25 = *(_QWORD *)v22;
    v26 = *((_QWORD *)v22 + 1);
    if (v26 == *(_QWORD *)v22)
      goto LABEL_21;
    v27 = v26 - 16;
    *((_QWORD *)v22 + 1) = v26 - 16;
    if (v26 - 16 < v25)
      goto LABEL_20;
    v28 = v53;
    v29 = v54;
    while (1)
    {
      v31 = *(_DWORD *)v27;
      if (*(_DWORD *)v27 <= *v28)
        break;
      *(_DWORD *)v27 = v31 - v29;
      v27 -= 16;
      *((_QWORD *)v22 + 1) = v27;
LABEL_26:
      if (v27 < v25 || (unint64_t)v28 < v3)
        goto LABEL_20;
    }
    if (v31 != *v28)
    {
      --v28;
      --v29;
      goto LABEL_26;
    }
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_QWORD *)(a1 + 48);
    v34 = ((v32 - v33) << 6) - 1;
    if (v32 == v33)
      v34 = 0;
    v35 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
    v36 = v27;
    if (v34 == v35)
    {
      sub_20EDB36DC(a1 + 40);
      v33 = *(_QWORD *)(a1 + 48);
      v35 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      v25 = *(_QWORD *)v22;
      v36 = *((_QWORD *)v22 + 1);
    }
    *(_QWORD *)(*(_QWORD *)(v33 + ((v35 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v35 & 0x1FF)) = *(_QWORD *)(v27 + 8);
    v37 = *(_QWORD *)(a1 + 88);
    ++*(_QWORD *)(a1 + 80);
    v38 = v37 + 24 * v24;
    if (v25 < v36)
    {
      *((_QWORD *)v22 + 1) = v36 - 16;
      v39 = *(_QWORD *)(v38 + 8);
      v40 = v39 - (v36 + 16);
      if (v39 != v36 + 16)
      {
        memmove((void *)v36, (const void *)(v36 + 16), v39 - (v36 + 16));
        v25 = *(_QWORD *)v22;
      }
      *(_QWORD *)(v38 + 8) = v36 + v40;
      --v28;
      --v29;
      v27 = *((_QWORD *)v22 + 1);
      goto LABEL_26;
    }
    v41 = *(_QWORD *)(v38 + 8);
    v42 = v41 - (v36 + 16);
    if (v41 != v36 + 16)
      memmove((void *)v36, (const void *)(v36 + 16), v41 - (v36 + 16));
    *(_QWORD *)(v38 + 8) = v36 + v42;
LABEL_20:
    ++v24;
LABEL_21:
    v22 += 2;
    if (v22 != v23)
      continue;
    break;
  }
LABEL_58:
  *(_DWORD *)(a1 + 8) -= v51 >> 2;
  operator delete(v52);
}

void sub_20F2B9C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F2B9C50(uint64_t a1, _QWORD *a2)
{
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  char *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  char v28;
  unsigned int v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;

  __p = 0;
  v31 = 0;
  v32 = 0;
  sub_20F2BA7CC((uint64_t)&v28, a2, a1, (uint64_t)&__p, &v29);
  v5 = v29;
  v6 = *(_QWORD *)(a1 + 8);
  if (v29 <= v6)
  {
    if (((v31 - (_BYTE *)__p) & 0x7FFFFFFF8) != 0)
    {
      v19 = *(_QWORD *)a1;
      v20 = *(unsigned int *)(a1 + 24);
      v21 = ((unint64_t)(v31 - (_BYTE *)__p) >> 3) - 1;
      do
      {
        v22 = v20;
        v23 = v21;
        v20 = *((unsigned int *)__p + 2 * v21);
        v24 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 28) + 8 * v20);
        v25 = (uint64_t)v24 + 8 * v22 + -8 * v20;
        v4 = v25 - (_QWORD)v24;
        if ((const void *)v25 != v24)
          memmove((void *)(v19 + 8 * *((unsigned int *)__p + 2 * v21 + 1)), v24, v4);
        --v21;
      }
      while (v23);
      v6 = *(_QWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 16) = v5;
    if (v6 < v5)
    {
      if (*(_QWORD *)a1)
        MEMORY[0x212BC6368](*(_QWORD *)a1, 0x1000C8000313F17, v4);
      v26 = (8 * v5 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v26 >> 3;
      *(_QWORD *)a1 = operator new(v26, (std::align_val_t)0x20uLL);
    }
  }
  else
  {
    v7 = (8 * v29 + 31) & 0xFFFFFFFE0;
    v9 = (char *)operator new(v7, (std::align_val_t)0x20uLL);
    v27 = v7 >> 3;
    v10 = (unsigned int *)__p;
    v11 = *(_QWORD *)a1;
    if (((v31 - (_BYTE *)__p) & 0x7FFFFFFF8) != 0)
    {
      v12 = *(unsigned int *)(a1 + 24);
      v13 = v11 + 8 * *(unsigned int *)(a1 + 28);
      v14 = ((unint64_t)(v31 - (_BYTE *)__p) >> 3) - 1;
      do
      {
        v15 = v12;
        v16 = v14;
        v12 = v10[2 * v14];
        v17 = (const void *)(v13 + 8 * v12);
        v18 = (uint64_t)v17 + 8 * v15 + -8 * v12;
        v8 = v18 - (_QWORD)v17;
        if ((const void *)v18 != v17)
          memmove(&v9[8 * v10[2 * v14 + 1]], v17, v8);
        --v14;
      }
      while (v16);
    }
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 16) = v5;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17, v8);
  }
  *(_DWORD *)(a1 + 24) += (a2[1] - *a2) >> 2;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
}

void sub_20F2B9E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F2B9E90(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  char **v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __n128 __p;
  uint64_t v19;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v7 = (char **)(a1 + 88);
    do
    {
      v8 = (uint64_t)&(*v7)[24 * *v3];
      __p = 0uLL;
      v19 = 0;
      v9 = sub_20F2BA258(v7, v8, &__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      v10 = *(unsigned int *)(a1 + 8) + a3;
      v11 = *(_BYTE **)v9;
      if (v10 > (uint64_t)(*((_QWORD *)v9 + 2) - *(_QWORD *)v9) >> 4)
      {
        if (v10 >> 60)
          sub_20E867F44();
        v12 = (_BYTE *)*((_QWORD *)v9 + 1);
        v13 = 16 * v10;
        v14 = (char *)operator new(16 * v10);
        v15 = &v14[(v12 - v11) & 0xFFFFFFFFFFFFFFF0];
        v16 = v15;
        if (v12 != v11)
        {
          v17 = &v14[(v12 - v11) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v16 = v17 - 16;
            *((_OWORD *)v17 - 1) = *((_OWORD *)v12 - 1);
            v12 -= 16;
            v17 -= 16;
          }
          while (v12 != v11);
        }
        *(_QWORD *)v9 = v16;
        *((_QWORD *)v9 + 1) = v15;
        *((_QWORD *)v9 + 2) = &v14[v13];
        if (v11)
          operator delete(v11);
      }
      ++*(_DWORD *)(a1 + 12);
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_20F2B9FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F2B9FE8(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unint64_t v4;
  const double *v6;
  const double *v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double *v15;
  const double *v16;
  double *v17;
  const double *v18;
  const double *v19;
  double *v20;
  double *v21;
  unsigned int v22;
  double *v23;
  unsigned int *v24;
  unsigned int *v25;
  int v26;
  double *v27;
  unsigned int *v28;
  unsigned int *v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  float64x2x3_t v33;
  float64x2x3_t v34;

  v3 = *a2;
  v2 = a2[1];
  v4 = (char *)v2 - (char *)*a2;
  if (v2 != *a2)
  {
    v7 = *(const double **)(a1 + 88);
    v6 = *(const double **)(a1 + 96);
    v8 = (char *)v6 - (char *)v7;
    if (v6 != v7)
    {
      if ((0xAAAAAAAAAAAAAAABLL * (v8 >> 3)) >> 60)
        sub_20E867F44();
      v9 = (double *)operator new(0xAAAAAAAAAAAAAAB0 * (v8 >> 3));
      bzero(v9, 0xAAAAAAAAAAAAAAB0 * (v8 >> 3));
      if ((unint64_t)(v8 - 24) >= 0x1B0
        && ((v10 = (v8 - 24) / 0x18uLL, v9 < &v7[3 * v10 + 2]) ? (v11 = v7 >= &v9[2 * v10 + 2]) : (v11 = 1), v11))
      {
        v12 = v10 + 1;
        v13 = v12 & 3;
        if ((v12 & 3) == 0)
          v13 = 4;
        v14 = v12 - v13;
        v15 = &v9[2 * (v12 - v13)];
        v16 = &v7[3 * v14];
        v17 = v9 + 4;
        do
        {
          v18 = v7 + 12;
          v33 = vld3q_f64(v7);
          v19 = v7 + 6;
          v34 = vld3q_f64(v19);
          v20 = v17 - 4;
          vst2q_f64(v20, *(float64x2x2_t *)v33.val[0].f64);
          vst2q_f64(v17, *(float64x2x2_t *)v34.val[0].f64);
          v17 += 8;
          v7 = v18;
          v14 -= 4;
        }
        while (v14);
      }
      else
      {
        v15 = v9;
        v16 = v7;
      }
      do
      {
        *v15 = *v16;
        v15[1] = v16[1];
        v16 += 3;
        v15 += 2;
      }
      while (v16 != v6);
      v21 = &v9[0xF555555555555556 * (v8 >> 3)];
      v22 = *v3;
      v23 = v9;
      v24 = *(unsigned int **)v9;
      v25 = (unsigned int *)*((_QWORD *)v9 + 1);
      if (*(unsigned int **)v9 != v25)
        goto LABEL_20;
      while (1)
      {
        do
        {
          v23 += 2;
          if (v23 == v21)
          {
            v26 = *(_DWORD *)(a1 + 8);
            v27 = v9;
            while (1)
            {
              v29 = *(unsigned int **)v27;
              v28 = (unsigned int *)*((_QWORD *)v27 + 1);
              if (*(unsigned int **)v27 != v28)
              {
                v30 = 0;
                v31 = v3;
                if (v3 != v2)
                {
LABEL_28:
                  v32 = *v29;
                  while (*v31 <= v32)
                  {
                    *v29 = ++v32;
                    ++v30;
                    if (++v31 == v2)
                      goto LABEL_31;
                  }
                  goto LABEL_32;
                }
LABEL_31:
                while (1)
                {
                  v31 = v2;
LABEL_32:
                  v29 += 4;
                  if (v29 == v28)
                    break;
                  *v29 += v30;
                  if (v31 != v2)
                    goto LABEL_28;
                }
                *(_QWORD *)v27 = v28;
              }
              v27 += 2;
              if (v27 == v21)
              {
                *(_DWORD *)(a1 + 8) = v26 + (v4 >> 2);
                operator delete(v9);
                return;
              }
            }
          }
          v24 = *(unsigned int **)v23;
          v25 = (unsigned int *)*((_QWORD *)v23 + 1);
        }
        while (*(unsigned int **)v23 == v25);
        do
        {
LABEL_20:
          if (*v24 >= v22)
            break;
          v24 += 4;
          *(_QWORD *)v23 = v24;
        }
        while (v24 != v25);
      }
    }
    *(_DWORD *)(a1 + 8) += v4 >> 2;
  }
}

void sub_20F2BA23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20F2BA258(char **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = (a2 - (uint64_t)*a1) / 24;
  v8 = &(*a1)[24 * v7];
  v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v6) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    v38 = a1 + 2;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v17 = (char *)operator new(24 * v16);
    }
    else
    {
      v17 = 0;
    }
    v34 = v17;
    v35 = &v17[24 * v7];
    v36 = v35;
    v37 = &v17[24 * v16];
    sub_20F2BA5B8((uint64_t)&v34, a3);
    v18 = v35;
    v19 = *a1;
    v20 = v35;
    if (*a1 != v8)
    {
      v20 = v35;
      v21 = v8;
      do
      {
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        v20 -= 24;
        *((_QWORD *)v20 + 2) = 0;
        v22 = *(_OWORD *)(v21 - 24);
        v21 -= 24;
        *(_OWORD *)v20 = v22;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = 0;
      }
      while (v21 != v19);
    }
    v35 = v20;
    v23 = a1[1];
    v24 = v36;
    if (v23 != v8)
    {
      do
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        *(_OWORD *)v24 = *(_OWORD *)v8;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v8 + 2);
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        v24 += 24;
        v8 += 24;
      }
      while (v8 != v23);
      v20 = v35;
      v8 = a1[1];
    }
    v25 = *a1;
    *a1 = v20;
    a1[1] = v24;
    v26 = a1[2];
    a1[2] = v37;
    v36 = v8;
    v37 = v26;
    v34 = v25;
    v35 = v25;
    if (v8 == v25)
    {
      if (!v8)
        return v18;
    }
    else
    {
      do
      {
        while (1)
        {
          v28 = v8 - 24;
          v27 = (void *)*((_QWORD *)v8 - 3);
          v36 = v8 - 24;
          if (!v27)
            break;
          *((_QWORD *)v8 - 2) = v27;
          operator delete(v27);
          v8 = v36;
          if (v36 == v25)
            goto LABEL_32;
        }
        v8 -= 24;
      }
      while (v28 != v25);
LABEL_32:
      v8 = v34;
      if (!v34)
        return v18;
    }
    operator delete(v8);
    return v18;
  }
  if (v8 == (char *)v5)
  {
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(__n128 *)v8 = *a3;
    *((_QWORD *)v8 + 2) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 24;
    return v8;
  }
  v10 = v8 + 24;
  v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    v12 = v5 - 24;
    v13 = a1[1];
    do
    {
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *((_QWORD *)v13 + 2) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v13 += 24;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if ((_QWORD *)v5 == v10)
      goto LABEL_39;
LABEL_35:
    v29 = 8 * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    do
    {
      v31 = *(void **)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)(v11 + 8) = v31;
        operator delete(v31);
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
      }
      v30 = (uint64_t)&v8[v29 - 24];
      *(_OWORD *)v11 = *(_OWORD *)v30;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)&v8[v29 - 8];
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      v11 -= 24;
      v29 -= 24;
    }
    while (v29);
    goto LABEL_39;
  }
  a1[1] = (char *)v5;
  if ((_QWORD *)v5 != v10)
    goto LABEL_35;
LABEL_39:
  v32 = *(void **)v8;
  if (*(_QWORD *)v8)
  {
    *((_QWORD *)v8 + 1) = v32;
    operator delete(v32);
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
  }
  *(__n128 *)v8 = *a3;
  *((_QWORD *)v8 + 2) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return v8;
}

void sub_20F2BA5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20F2BA5B8(uint64_t a1, __n128 *a2)
{
  char *v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char *v27;
  __n128 result;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v5 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(_QWORD *)a1)
    {
      v13 = 0x5555555555555556 * ((v4 - v5) >> 3);
      if (v4 == v5)
        v13 = 1;
      if (v13 >= 0xAAAAAAAAAAAAAABLL)
        sub_20E877A38();
      v14 = v13 >> 2;
      v15 = 24 * v13;
      v16 = (char *)operator new(24 * v13);
      v17 = &v16[24 * v14];
      v18 = &v16[v15];
      if (v4 == v6)
      {
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v18;
      }
      else
      {
        v19 = &v17[v4 - v6];
        v20 = 24 * v14;
        do
        {
          v21 = &v16[v20];
          *(_OWORD *)v21 = *(_OWORD *)v6;
          *((_QWORD *)v21 + 2) = *((_QWORD *)v6 + 2);
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v6 + 2) = 0;
          v20 += 24;
          v6 += 24;
        }
        while (v21 + 24 != v19);
        v5 = *(char **)a1;
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v19;
        *(_QWORD *)(a1 + 24) = v18;
        if (v23 != v22)
        {
          v24 = v23;
          do
          {
            v26 = *(void **)(v24 - 24);
            v24 -= 24;
            v25 = v26;
            if (v26)
            {
              *(_QWORD *)(v23 - 16) = v25;
              operator delete(v25);
            }
            v23 = v24;
          }
          while (v24 != v22);
        }
      }
      if (v5)
        operator delete(v5);
      v4 = *(char **)(a1 + 16);
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      if (v6 == v4)
      {
        v27 = &v6[-24 * v9];
      }
      else
      {
        do
        {
          v11 = (void **)&v6[24 * v10];
          v12 = *v11;
          if (*v11)
          {
            v11[1] = v12;
            operator delete(v12);
            *v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          *(_OWORD *)v11 = *(_OWORD *)v6;
          v11[2] = (void *)*((_QWORD *)v6 + 2);
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v6 + 2) = 0;
          v6 += 24;
        }
        while (v6 != v4);
        v4 = *(char **)(a1 + 8);
        v27 = &v6[24 * v10];
      }
      *(_QWORD *)(a1 + 8) = &v4[24 * v10];
      *(_QWORD *)(a1 + 16) = v27;
      v4 = v27;
    }
  }
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  result = *a2;
  *(__n128 *)v4 = *a2;
  *((_QWORD *)v4 + 2) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 16) += 24;
  return result;
}

void sub_20F2BA7CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _DWORD *v59;

  v9 = a2[1] - *a2;
  v10 = v9 >> 2;
  v11 = *(char **)a4;
  if (v9 >> 2 <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 3))
    goto LABEL_13;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_52:
    sub_20E92CED8();
  v12 = *(_BYTE **)(a4 + 8);
  v13 = (char *)operator new(2 * v9);
  v14 = v12 - v11;
  v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
  v16 = v15;
  if (v12 != v11)
  {
    if ((unint64_t)(v14 - 8) < 0x58)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        v25 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v16 - 1) = v25;
        v16 -= 8;
      }
      while (v12 != v11);
      goto LABEL_11;
    }
    v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v12[-(v14 & 0xFFFFFFFFFFFFFFF8)] - v13) < 0x20)
      goto LABEL_10;
    v17 = v14 >> 3;
    v18 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v12[-v19];
    v16 = &v15[-v19];
    v21 = &v13[8 * v17 - 16];
    v22 = (__int128 *)(v12 - 16);
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    v12 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 16) = &v13[8 * v10];
  if (v11)
    operator delete(v11);
LABEL_13:
  v57 = a3;
  v58 = a2;
  v59 = a5;
  v26 = (unsigned int *)*a2;
  v27 = (unsigned int *)a2[1];
  v28 = *(char **)(a4 + 8);
  if (v26 != v27)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v30 = *v26;
          v31 = *(char **)a4;
          if (*(char **)a4 == v28 || *((_DWORD *)v28 - 1) != (_DWORD)v30)
            break;
          *((_DWORD *)v28 - 1) = v30 + 1;
          if (++v26 == v27)
            goto LABEL_48;
        }
        v32 = (v30 + 1);
        v33 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v28 >= v33)
          break;
        *(_QWORD *)v28 = v30 | (v32 << 32);
        v29 = (uint64_t)(v28 + 8);
LABEL_16:
        *(_QWORD *)(a4 + 8) = v29;
        v28 = (char *)v29;
        if (++v26 == v27)
          goto LABEL_48;
      }
      v34 = (char *)(v28 - v31);
      v35 = (v28 - v31) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_52;
      v37 = v33 - (_QWORD)v31;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v36;
      if (!v38)
        break;
      if (v38 >> 61)
        sub_20E877A38();
      v39 = (char *)operator new(8 * v38);
      v40 = &v39[8 * v35];
      *(_QWORD *)v40 = v30 | (v32 << 32);
      v29 = (uint64_t)(v40 + 8);
      if (v31 != v28)
        goto LABEL_33;
LABEL_46:
      *(_QWORD *)a4 = v40;
      *(_QWORD *)(a4 + 8) = v29;
      *(_QWORD *)(a4 + 16) = &v39[8 * v38];
      if (!v28)
        goto LABEL_16;
      operator delete(v28);
      *(_QWORD *)(a4 + 8) = v29;
      v28 = (char *)v29;
      if (++v26 == v27)
        goto LABEL_48;
    }
    v39 = 0;
    v40 = (char *)(8 * v35);
    *(_QWORD *)(8 * v35) = v30 | (v32 << 32);
    v29 = 8 * v35 + 8;
    if (v31 == v28)
      goto LABEL_46;
LABEL_33:
    if ((unint64_t)(v34 - 8) >= 0x168)
    {
      v42 = (v28 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
      if (&v34[(_QWORD)v39 - 8 - v42] > &v34[(_QWORD)v39 - 8])
      {
        v41 = v28;
      }
      else if (&v28[-v42 - 8] > v28 - 8)
      {
        v41 = v28;
      }
      else if ((unint64_t)(v31 - v39) >= 0x20)
      {
        v43 = ((unint64_t)(v34 - 8) >> 3) + 1;
        v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v28[-v44];
        v40 -= v44;
        v45 = &v39[8 * v35 - 16];
        v46 = v28 - 16;
        v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = *(_OWORD *)v46;
          *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
          *(_OWORD *)v45 = v48;
          v45 -= 32;
          v46 -= 32;
          v47 -= 4;
        }
        while (v47);
        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_45;
      }
      else
      {
        v41 = v28;
      }
    }
    else
    {
      v41 = v28;
    }
    do
    {
      v49 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *((_QWORD *)v40 - 1) = v49;
      v40 -= 8;
    }
    while (v41 != v31);
LABEL_45:
    v28 = *(char **)a4;
    goto LABEL_46;
  }
LABEL_48:
  v50 = *(char **)a4;
  v51 = (unint64_t)&v28[-*(_QWORD *)a4];
  if ((v51 & 0x7FFFFFFF0) != 0)
  {
    v52 = (v51 >> 3);
    v55 = *(_DWORD *)v50;
    v53 = v50 + 8;
    v54 = v55;
    v56 = v52 - 1;
    do
    {
      v54 += *v53 - *(v53 - 1);
      *v53 = v54;
      v53 += 2;
      --v56;
    }
    while (v56);
  }
  *v59 = *(_DWORD *)(v57 + 24) + ((v58[1] - *v58) >> 2);
}

_QWORD *sub_20F2BAB60(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *i;
  _QWORD *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a1 == a2)
    return a2;
  for (i = a1 + 19; !*((_BYTE *)i - 8); i += 19)
  {
    if (i == a2)
      return a2;
  }
  --*(_DWORD *)(*(i - 10) + 8);
  *(i - 10) = 0;
  v9 = *(_QWORD **)(a3 + 16);
  --**(_QWORD **)(a3 + 8);
  *v9 -= 2;
  v10 = i - 19;
  if (i - 19 == a2)
    return a2;
  if (i != a2)
  {
    v7 = i - 19;
    do
    {
      while (1)
      {
        v12 = i;
        if (!*((_BYTE *)v10 + 296))
          break;
        --*(_DWORD *)(v10[28] + 8);
        v10[28] = 0;
        v11 = *(_QWORD **)(a3 + 16);
        --**(_QWORD **)(a3 + 8);
        *v11 -= 2;
        i += 19;
        v10 = v12;
        if (v12 + 19 == a2)
          return v7;
      }
      *v7 = *i;
      v7[1] = v10[20];
      *((_OWORD *)v7 + 1) = *(_OWORD *)(v10 + 21);
      v13 = *(_OWORD *)(v10 + 23);
      v14 = *(_OWORD *)(v10 + 25);
      v7[8] = v10[27];
      *((_OWORD *)v7 + 2) = v13;
      *((_OWORD *)v7 + 3) = v14;
      v7[9] = v10[28];
      *((_OWORD *)v7 + 5) = *(_OWORD *)(v10 + 29);
      *((_OWORD *)v7 + 6) = *(_OWORD *)(v10 + 31);
      v15 = v10[33];
      *((_BYTE *)v7 + 120) = *((_BYTE *)v10 + 272);
      v7[14] = v15;
      v16 = *(_OWORD *)(v10 + 35);
      v10[35] = 0;
      v10[36] = 0;
      v17 = (std::__shared_weak_count *)v7[17];
      *((_OWORD *)v7 + 8) = v16;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *((_BYTE *)v7 + 144) = *((_BYTE *)v10 + 296);
      v7 += 19;
      i = v12 + 19;
      v10 = v12;
    }
    while (v12 + 19 != a2);
    return v7;
  }
  return i - 19;
}

uint64_t sub_20F2BAD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = a2;
    if (a3 != v6)
    {
      do
      {
        *(_QWORD *)v7 = *(_QWORD *)v5;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
        *(_OWORD *)(v7 + 16) = *(_OWORD *)(v5 + 16);
        v8 = *(_OWORD *)(v5 + 32);
        v9 = *(_OWORD *)(v5 + 48);
        *(_QWORD *)(v7 + 64) = *(_QWORD *)(v5 + 64);
        *(_OWORD *)(v7 + 32) = v8;
        *(_OWORD *)(v7 + 48) = v9;
        *(_QWORD *)(v7 + 72) = *(_QWORD *)(v5 + 72);
        *(_OWORD *)(v7 + 80) = *(_OWORD *)(v5 + 80);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v5 + 96);
        v10 = *(_QWORD *)(v5 + 112);
        *(_BYTE *)(v7 + 120) = *(_BYTE *)(v5 + 120);
        *(_QWORD *)(v7 + 112) = v10;
        v11 = *(_OWORD *)(v5 + 128);
        *(_QWORD *)(v5 + 128) = 0;
        *(_QWORD *)(v5 + 136) = 0;
        v12 = *(std::__shared_weak_count **)(v7 + 136);
        *(_OWORD *)(v7 + 128) = v11;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(_BYTE *)(v7 + 144) = *(_BYTE *)(v5 + 144);
        v5 += 152;
        v7 += 152;
      }
      while (v5 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v7)
    {
      v15 = *(std::__shared_weak_count **)(v5 - 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v5 -= 152;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  return a2;
}

void sub_20F2BAEA4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 48 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F2B2664(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F2B24F4(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

BOOL sub_20F2BB1A4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  int v33;

  v33 = *(unsigned __int8 *)(a1 + 152);
  if (*(_BYTE *)(a1 + 152))
  {
    v4 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v5 = ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
    if (v5 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 2)
    {
      v6 = 4 * v5;
      v7 = (char *)operator new(4 * v5);
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = &v7[v6];
      if (v4)
        operator delete(v4);
    }
    v8 = *(int **)(a1 + 8);
    v9 = *(int **)(a1 + 16);
    while (1)
    {
      if (v8 == v9)
        return v33 != 0;
      if (*(_BYTE *)(*((_QWORD *)v8 + 1) + 20))
        break;
LABEL_8:
      v8 += 4;
    }
    v11 = *v8;
    v13 = *(char **)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v13 < v12)
    {
      *(_DWORD *)v13 = v11;
      v10 = (uint64_t)(v13 + 4);
LABEL_7:
      *(_QWORD *)(a2 + 8) = v10;
      goto LABEL_8;
    }
    v14 = *(char **)a2;
    v15 = (uint64_t)&v13[-*(_QWORD *)a2];
    v16 = v15 >> 2;
    v17 = (v15 >> 2) + 1;
    if (v17 >> 62)
      sub_20E867F44();
    v18 = v12 - (_QWORD)v14;
    if (v18 >> 1 > v17)
      v17 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 62)
        sub_20E877A38();
      v20 = operator new(4 * v19);
      v21 = &v20[4 * v16];
      *v21 = v11;
      v10 = (uint64_t)(v21 + 1);
      v22 = v13 - v14;
      if (v13 == v14)
        goto LABEL_29;
    }
    else
    {
      v20 = 0;
      v21 = (_DWORD *)(4 * v16);
      *(_DWORD *)(4 * v16) = v11;
      v10 = 4 * v16 + 4;
      v22 = v13 - v14;
      if (v13 == v14)
      {
LABEL_29:
        *(_QWORD *)a2 = v21;
        *(_QWORD *)(a2 + 8) = v10;
        *(_QWORD *)(a2 + 16) = &v20[4 * v19];
        if (v14)
          operator delete(v14);
        goto LABEL_7;
      }
    }
    v23 = v22 - 4;
    if (v23 < 0x2C)
      goto LABEL_36;
    if ((unint64_t)(v13 - v20 - v15) < 0x20)
      goto LABEL_36;
    v24 = (v23 >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v13[-v25];
    v21 = (_DWORD *)((char *)v21 - v25);
    v27 = &v20[4 * v16 - 16];
    v28 = v13 - 16;
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    v13 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        v31 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v21 = v31;
      }
      while (v13 != v14);
    }
    goto LABEL_29;
  }
  return v33 != 0;
}

void sub_20F2BB3A4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  int32x4_t *v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  _QWORD v34[2];

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a1 + 24;
  v34[0] = a2;
  v34[1] = a1;
  sub_20F2BB5B4((uint64_t)v34);
  if (a3 == 1)
  {
    v11 = *(unsigned int **)(a1 + 8);
    v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a1) >> 2));
    if (v11 == *(unsigned int **)a1)
      v13 = 0;
    else
      v13 = v12;
    sub_20F2BD314(*(unsigned int **)a1, v11, (uint64_t)v34, v13, 1);
    v9 = *(unsigned int **)a1;
    v10 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 == v10)
      goto LABEL_15;
LABEL_13:
    v14 = 0;
    do
    {
      v15 = v9[2];
      v9[2] = v14;
      v16 = *v9;
      v9 += 3;
      v14 += v15;
      ++*(_QWORD *)(v5 + 8 * v16);
    }
    while (v9 != v10);
    goto LABEL_15;
  }
  if (!a3)
  {
    v6 = *(unsigned int **)(a1 + 8);
    v7 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a1) >> 2));
    if (v6 == *(unsigned int **)a1)
      v8 = 0;
    else
      v8 = v7;
    sub_20F2BB72C(*(unsigned int **)a1, v6, (uint64_t)v34, v8, 1);
  }
  v9 = *(unsigned int **)a1;
  v10 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 != v10)
    goto LABEL_13;
LABEL_15:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
  {
    sub_20E93DC84(a1 + 32, v17);
    v19 = *(int32x4_t **)(a1 + 32);
    v18 = *(int32x4_t **)(a1 + 40);
    if (v19 != v18)
    {
      v20 = (char *)v18 - (char *)v19 - 4;
      if (v20 < 0x1C)
      {
        LODWORD(v21) = 0;
        v22 = *(int32x4_t **)(a1 + 32);
        do
        {
LABEL_22:
          v22->i32[0] = v21;
          v22 = (int32x4_t *)((char *)v22 + 4);
          LODWORD(v21) = v21 + 1;
        }
        while (v22 != v18);
        goto LABEL_23;
      }
      v23 = (v20 >> 2) + 1;
      v21 = v23 & 0x7FFFFFFFFFFFFFF8;
      v22 = (int32x4_t *)((char *)v19 + 4 * (v23 & 0x7FFFFFFFFFFFFFF8));
      v24 = (int32x4_t)xmmword_210365350;
      v25 = v19 + 1;
      v26.i64[0] = 0x400000004;
      v26.i64[1] = 0x400000004;
      v27.i64[0] = 0x800000008;
      v27.i64[1] = 0x800000008;
      v28 = v23 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25[-1] = v24;
        *v25 = vaddq_s32(v24, v26);
        v24 = vaddq_s32(v24, v27);
        v25 += 2;
        v28 -= 8;
      }
      while (v28);
      if (v23 != v21)
        goto LABEL_22;
    }
  }
LABEL_23:
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(_DWORD **)(a1 + 56);
  v31 = (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v30) >> 2;
  if (v29 <= v31)
  {
    if (v29 < v31)
      *(_QWORD *)(a1 + 64) = &v30[v29];
  }
  else
  {
    sub_20E93DC84(a1 + 56, v29 - v31);
    v30 = *(_DWORD **)(a1 + 56);
  }
  v32 = *(unsigned int **)a1;
  v33 = *(unsigned int **)(a1 + 8);
  while (v32 != v33)
  {
    if (!*v32)
      *v30++ = v32[2];
    v32 += 3;
  }
}

void sub_20F2BB5B4(uint64_t a1)
{
  int *v1;
  int *i;
  char **v4;
  int v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;

  v1 = **(int ***)a1;
  for (i = *(int **)(*(_QWORD *)a1 + 8); v1 != i; ++v1)
  {
    while (1)
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *v1;
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
        break;
      *(_DWORD *)v7 = 0;
      *((_DWORD *)v7 + 1) = v5;
      *((_DWORD *)v7 + 2) = 1;
      v4[1] = v7 + 12;
      if (++v1 == i)
        return;
    }
    v8 = *v4;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *v4) >> 2);
    v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555)
      sub_20E867F44();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x1555555555555555)
        sub_20E877A38();
      v13 = (char *)operator new(12 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[12 * v9];
    *(_DWORD *)v14 = 0;
    *((_DWORD *)v14 + 1) = v5;
    *((_DWORD *)v14 + 2) = 1;
    v15 = v14;
    if (v7 != v8)
    {
      do
      {
        v16 = *(_QWORD *)(v7 - 12);
        v7 -= 12;
        v17 = *((_DWORD *)v7 + 2);
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v7 != v8);
      v7 = *v4;
    }
    v18 = &v13[12 * v12];
    v19 = v14 + 12;
    *v4 = v15;
    v4[1] = v14 + 12;
    v4[2] = v18;
    if (v7)
      operator delete(v7);
    v4[1] = v19;
  }
}

unsigned int *sub_20F2BB72C(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  BOOL v50;
  BOOL v51;
  unsigned int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _BOOL4 v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  unsigned int *v110;
  char v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  _BOOL4 v116;
  _BOOL4 v117;
  uint64_t v118;
  _QWORD *v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  unsigned int *v123;
  unsigned int v124;
  _BOOL4 v125;
  _BOOL4 v126;
  uint64_t v127;
  unsigned int *v128;
  BOOL v129;
  char v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  unsigned int v138;
  uint64_t v139;
  char *v140;
  unsigned int v141;
  BOOL v142;
  BOOL v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  _BOOL4 v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  _BOOL4 v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int *v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  BOOL v159;
  unsigned int v160;
  unsigned int v161;
  _BOOL4 v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int *v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v166 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v7 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v113 = *(a2 - 3);
        v114 = *(a2 - 2);
        v115 = a2 - 3;
        v116 = v114 < v10[1];
        v129 = v113 == *v10;
        v117 = v113 < *v10;
        if (v129)
          v117 = v116;
        if (v117)
        {
          v206 = v10[2];
          v185 = *(_QWORD *)v10;
          v118 = *(_QWORD *)v115;
          v10[2] = v115[2];
          *(_QWORD *)v10 = v118;
          *(_QWORD *)v115 = v185;
          v115[2] = v206;
        }
        return result;
      case 3uLL:
        v119 = v10 + 3;
        v120 = v10[3];
        v121 = v10[4];
        v122 = v120 < *v10;
        if (v120 == *v10)
          v122 = v121 < v10[1];
        v124 = *(a2 - 3);
        v123 = a2 - 3;
        v125 = *(a2 - 2) < v121;
        v129 = v124 == v120;
        v126 = v124 < v120;
        if (v129)
          v126 = v125;
        if (v122)
        {
          if (v126)
          {
            v207 = v10[2];
            v186 = *(_QWORD *)v10;
            v127 = *(_QWORD *)v123;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v127;
            *(_QWORD *)v123 = v186;
            *(a2 - 1) = v207;
          }
          else
          {
            v209 = v10[2];
            v188 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v119;
            v10[2] = v10[5];
            *v119 = v188;
            v10[5] = v209;
            v160 = *(a2 - 3);
            v161 = v10[3];
            v129 = v160 == v161;
            v162 = v160 < v161;
            if (v129)
              v162 = *(a2 - 2) < v10[4];
            if (v162)
            {
              v163 = v10[5];
              v164 = *v119;
              v165 = *(a2 - 1);
              *v119 = *(_QWORD *)v123;
              v10[5] = v165;
              *(_QWORD *)v123 = v164;
              *(a2 - 1) = v163;
            }
          }
        }
        else if (v126)
        {
          v144 = v10[5];
          v145 = *v119;
          v146 = *(a2 - 1);
          *v119 = *(_QWORD *)v123;
          v10[5] = v146;
          *(_QWORD *)v123 = v145;
          *(a2 - 1) = v144;
          v147 = v10[3];
          v129 = v147 == *v10;
          v148 = v147 < *v10;
          if (v129)
            v148 = v10[4] < v10[1];
          if (v148)
          {
            v208 = v10[2];
            v187 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v119;
            v10[2] = v10[5];
            *v119 = v187;
            v10[5] = v208;
          }
        }
        return result;
      case 4uLL:
        return sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5uLL:
        return sub_20F2BCD74(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v13 > 287)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              return sub_20F2BCED0(v10, a2, a2, a3);
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          v17 = *(a2 - 3);
          v18 = *(a2 - 2);
          if ((unint64_t)v13 >= 0x601)
          {
            v19 = *v16;
            v20 = &v10[3 * v15 + 1];
            v21 = *v16 < *v10;
            if (*v16 == *v10)
              v21 = *v20 < v10[1];
            v22 = v18 < *v20;
            v129 = v17 == v19;
            v23 = v17 < v19;
            if (v129)
              v23 = v22;
            if (v21)
            {
              if (v23)
              {
                v189 = v10[2];
                v168 = *(_QWORD *)v10;
                v24 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v24;
LABEL_37:
                *(_QWORD *)v8 = v168;
                *(a2 - 1) = v189;
                goto LABEL_38;
              }
              v195 = v10[2];
              v174 = *(_QWORD *)v10;
              v38 = *(_QWORD *)v16;
              v10[2] = v16[2];
              *(_QWORD *)v10 = v38;
              v16[2] = v195;
              *(_QWORD *)v16 = v174;
              v39 = *(a2 - 3);
              v40 = v39 < v174;
              if (v39 == (_DWORD)v174)
                v40 = *(a2 - 2) < *v20;
              if (v40)
              {
                v189 = v16[2];
                v168 = *(_QWORD *)v16;
                v41 = *(_QWORD *)v8;
                v16[2] = *(a2 - 1);
                *(_QWORD *)v16 = v41;
                goto LABEL_37;
              }
            }
            else if (v23)
            {
              v191 = v16[2];
              v170 = *(_QWORD *)v16;
              v32 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v32;
              *(_QWORD *)v8 = v170;
              *(a2 - 1) = v191;
              v33 = *v16 < *v10;
              if (*v16 == *v10)
                v33 = *v20 < v10[1];
              if (v33)
              {
                v192 = v10[2];
                v171 = *(_QWORD *)v10;
                v34 = *(_QWORD *)v16;
                v10[2] = v16[2];
                *(_QWORD *)v10 = v34;
                v16[2] = v192;
                *(_QWORD *)v16 = v171;
              }
            }
LABEL_38:
            v42 = (uint64_t *)(v10 + 3);
            v43 = v10[3];
            v44 = &v10[3 * v15];
            v47 = *(v44 - 3);
            v45 = v44 - 3;
            v46 = v47;
            v48 = v45 + 1;
            v49 = v45[1];
            v50 = v49 < v10[4];
            v129 = v47 == v43;
            v51 = v47 < v43;
            if (!v129)
              v50 = v51;
            v52 = *(a2 - 6);
            v53 = *(a2 - 5) < v49;
            v129 = v52 == v46;
            v54 = v52 < v46;
            if (v129)
              v54 = v53;
            if (v50)
            {
              if (v54)
              {
                v55 = v10[5];
                v56 = *v42;
                v57 = *(a2 - 4);
                *v42 = *(_QWORD *)v166;
                v10[5] = v57;
                *(_QWORD *)v166 = v56;
                *(a2 - 4) = v55;
              }
              else
              {
                v68 = *v42;
                v69 = v10[5];
                v70 = v45[2];
                *v42 = *(_QWORD *)v45;
                v10[5] = v70;
                v45[2] = v69;
                *(_QWORD *)v45 = v68;
                v71 = v68;
                LODWORD(v68) = *(a2 - 6);
                v129 = (_DWORD)v68 == v71;
                v72 = v68 < v71;
                if (v129)
                  v72 = *(a2 - 5) < *v48;
                if (v72)
                {
                  v198 = v45[2];
                  v177 = *(_QWORD *)v45;
                  v73 = *(_QWORD *)v166;
                  v45[2] = *(a2 - 4);
                  *(_QWORD *)v45 = v73;
                  *(_QWORD *)v166 = v177;
                  *(a2 - 4) = v198;
                }
              }
            }
            else if (v54)
            {
              v196 = v45[2];
              v175 = *(_QWORD *)v45;
              v58 = *(_QWORD *)v166;
              v45[2] = *(a2 - 4);
              *(_QWORD *)v45 = v58;
              *(_QWORD *)v166 = v175;
              *(a2 - 4) = v196;
              v59 = v10[3];
              v60 = *v45 < v59;
              if (*v45 == v59)
                v60 = *v48 < v10[4];
              if (v60)
              {
                v61 = *v42;
                v62 = v10[5];
                v63 = v45[2];
                *v42 = *(_QWORD *)v45;
                v10[5] = v63;
                v45[2] = v62;
                *(_QWORD *)v45 = v61;
              }
            }
            v74 = (uint64_t *)(v10 + 6);
            v75 = v10[6];
            v76 = &v10[3 * v15];
            v79 = v76[3];
            v77 = v76 + 3;
            v78 = v79;
            v80 = v77 + 1;
            v81 = v77[1];
            v82 = v81 < v10[7];
            v129 = v79 == v75;
            v83 = v79 < v75;
            if (!v129)
              v82 = v83;
            v84 = *(a2 - 9);
            v85 = *(a2 - 8) < v81;
            v129 = v84 == v78;
            v86 = v84 < v78;
            if (v129)
              v86 = v85;
            if (v82)
            {
              if (v86)
              {
                v87 = v10[8];
                v88 = *v74;
                v89 = *(a2 - 7);
                *v74 = *(_QWORD *)v9;
                v10[8] = v89;
                *(_QWORD *)v9 = v88;
                *(a2 - 7) = v87;
              }
              else
              {
                v96 = *v74;
                v97 = v10[8];
                v98 = v77[2];
                *v74 = *(_QWORD *)v77;
                v10[8] = v98;
                v77[2] = v97;
                *(_QWORD *)v77 = v96;
                v99 = v96;
                LODWORD(v96) = *(a2 - 9);
                v129 = (_DWORD)v96 == v99;
                v100 = v96 < v99;
                if (v129)
                  v100 = *(a2 - 8) < *v80;
                if (v100)
                {
                  v200 = v77[2];
                  v179 = *(_QWORD *)v77;
                  v101 = *(_QWORD *)v9;
                  v77[2] = *(a2 - 7);
                  *(_QWORD *)v77 = v101;
                  *(_QWORD *)v9 = v179;
                  *(a2 - 7) = v200;
                }
              }
            }
            else if (v86)
            {
              v199 = v77[2];
              v178 = *(_QWORD *)v77;
              v90 = *(_QWORD *)v9;
              v77[2] = *(a2 - 7);
              *(_QWORD *)v77 = v90;
              *(_QWORD *)v9 = v178;
              *(a2 - 7) = v199;
              v91 = v10[6];
              v92 = *v77 < v91;
              if (*v77 == v91)
                v92 = *v80 < v10[7];
              if (v92)
              {
                v93 = *v74;
                v94 = v10[8];
                v95 = v77[2];
                *v74 = *(_QWORD *)v77;
                v10[8] = v95;
                v77[2] = v94;
                *(_QWORD *)v77 = v93;
              }
            }
            v102 = *v16;
            v103 = *v16 < *v45;
            if (*v16 == *v45)
              v103 = *v20 < *v48;
            v129 = *v77 == v102;
            v104 = *v77 < v102;
            if (v129)
              v104 = *v80 < *v20;
            if (v103)
            {
              if (v104)
              {
                v201 = v45[2];
                v180 = *(_QWORD *)v45;
                *(_QWORD *)v45 = *(_QWORD *)v77;
                v45[2] = v77[2];
LABEL_93:
                v77[2] = v201;
                *(_QWORD *)v77 = v180;
                goto LABEL_94;
              }
              v204 = v45[2];
              v183 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v16;
              v45[2] = v16[2];
              v16[2] = v204;
              *(_QWORD *)v16 = v183;
              v106 = *v80 < *v20;
              if (*v77 != *v16)
                v106 = *v77 < *v16;
              if (v106)
              {
                v201 = v16[2];
                v180 = *(_QWORD *)v16;
                *(_QWORD *)v16 = *(_QWORD *)v77;
                v16[2] = v77[2];
                goto LABEL_93;
              }
            }
            else if (v104)
            {
              v202 = v16[2];
              v181 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v77;
              v16[2] = v77[2];
              v77[2] = v202;
              *(_QWORD *)v77 = v181;
              v105 = *v20 < *v48;
              if (*v16 != *v45)
                v105 = *v16 < *v45;
              if (v105)
              {
                v203 = v45[2];
                v182 = *(_QWORD *)v45;
                *(_QWORD *)v45 = *(_QWORD *)v16;
                v45[2] = v16[2];
                v16[2] = v203;
                *(_QWORD *)v16 = v182;
              }
            }
LABEL_94:
            v205 = v10[2];
            v184 = *(_QWORD *)v10;
            v107 = *(_QWORD *)v16;
            v10[2] = v16[2];
            *(_QWORD *)v10 = v107;
            v16[2] = v205;
            *(_QWORD *)v16 = v184;
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          v25 = *v10;
          v26 = v10[1];
          v27 = &v10[3 * v15 + 1];
          v28 = v26 < *v27;
          if (*v10 != *v16)
            v28 = *v10 < *v16;
          v29 = v18 < v26;
          v129 = v17 == v25;
          v30 = v17 < v25;
          if (v129)
            v30 = v29;
          if (v28)
          {
            if (v30)
            {
              v190 = v16[2];
              v169 = *(_QWORD *)v16;
              v31 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v31;
              goto LABEL_54;
            }
            v197 = v16[2];
            v176 = *(_QWORD *)v16;
            v64 = *(_QWORD *)v10;
            v16[2] = v10[2];
            *(_QWORD *)v16 = v64;
            v10[2] = v197;
            *(_QWORD *)v10 = v176;
            v65 = *(a2 - 3);
            v129 = v65 == *v10;
            v66 = v65 < *v10;
            if (v129)
              v66 = *(a2 - 2) < v10[1];
            if (v66)
            {
              v190 = v10[2];
              v169 = *(_QWORD *)v10;
              v67 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v67;
LABEL_54:
              *(_QWORD *)v8 = v169;
              *(a2 - 1) = v190;
            }
LABEL_55:
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          if (!v30)
            goto LABEL_55;
          v193 = v10[2];
          v172 = *(_QWORD *)v10;
          v35 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v35;
          *(_QWORD *)v8 = v172;
          *(a2 - 1) = v193;
          v36 = v10[1] < *v27;
          if (*v10 != *v16)
            v36 = *v10 < *v16;
          if (!v36)
            goto LABEL_55;
          v194 = v16[2];
          v173 = *(_QWORD *)v16;
          v37 = *(_QWORD *)v10;
          v16[2] = v10[2];
          *(_QWORD *)v16 = v37;
          v10[2] = v194;
          *(_QWORD *)v10 = v173;
          if ((a5 & 1) != 0)
            goto LABEL_98;
LABEL_95:
          v108 = *(v10 - 3);
          v129 = v108 == *v10;
          v109 = v108 < *v10;
          if (v129)
            v109 = *(v10 - 2) < v10[1];
          if (!v109)
          {
            result = sub_20F2BC448(v10, (unint64_t)a2);
            v10 = result;
            goto LABEL_103;
          }
LABEL_98:
          v110 = (unsigned int *)sub_20F2BC598((int *)v10, (unint64_t)a2);
          if ((v111 & 1) == 0)
            goto LABEL_101;
          v112 = sub_20F2BC6D8(v10, v110);
          v10 = v110 + 3;
          result = (unsigned int *)sub_20F2BC6D8(v110 + 3, a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v112)
              continue;
LABEL_101:
            result = (unsigned int *)sub_20F2BB72C(v7, v110, a3, -v12, a5 & 1);
            v10 = v110 + 3;
LABEL_103:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v110;
          if (v112)
            return result;
          goto LABEL_2;
        }
        v128 = v10 + 3;
        v129 = v10 == a2 || v128 == a2;
        v130 = v129;
        if ((a5 & 1) != 0)
        {
          if ((v130 & 1) == 0)
          {
            v131 = 0;
            v132 = v10;
            do
            {
              v134 = v128;
              v135 = v132[3];
              v136 = v132[4];
              v137 = v135 < *v132;
              if (v135 == *v132)
                v137 = v136 < v132[1];
              if (v137)
              {
                v138 = v132[5];
                v139 = v131;
                do
                {
                  v140 = (char *)v10 + v139;
                  *(_QWORD *)(v140 + 12) = *(_QWORD *)((char *)v10 + v139);
                  *((_DWORD *)v140 + 5) = *(unsigned int *)((char *)v10 + v139 + 8);
                  if (!v139)
                  {
                    v133 = v10;
                    goto LABEL_131;
                  }
                  v141 = *((_DWORD *)v140 - 3);
                  v142 = v136 < *((_DWORD *)v140 - 2);
                  v129 = v135 == v141;
                  v143 = v135 < v141;
                  if (!v129)
                    v142 = v143;
                  v139 -= 12;
                }
                while (v142);
                v133 = (unsigned int *)((char *)v10 + v139 + 12);
LABEL_131:
                *v133 = v135;
                v133[1] = v136;
                v133[2] = v138;
              }
              v128 = v134 + 3;
              v131 += 12;
              v132 = v134;
            }
            while (v134 + 3 != a2);
          }
        }
        else if ((v130 & 1) == 0)
        {
          do
          {
            v149 = v128;
            v150 = v7[3];
            v151 = v7[4];
            v152 = v150 < *v7;
            if (v150 == *v7)
              v152 = v151 < v7[1];
            if (v152)
            {
              v153 = v7[5];
              v154 = v149;
              do
              {
                v155 = v154;
                v156 = *(_QWORD *)(v154 - 3);
                v154 -= 3;
                *(_QWORD *)v155 = v156;
                v155[2] = *(v155 - 1);
                v157 = *(v155 - 6);
                v158 = v151 < *(v155 - 5);
                v129 = v150 == v157;
                v159 = v150 < v157;
                if (!v129)
                  v158 = v159;
              }
              while (v158);
              *v154 = v150;
              v154[1] = v151;
              v154[2] = v153;
            }
            v128 = v149 + 3;
            v7 = v149;
          }
          while (v149 + 3 != a2);
        }
        return result;
    }
  }
}

unsigned int *sub_20F2BC448(unsigned int *a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;

  v2 = *a1;
  v3 = *(_QWORD *)(a1 + 1);
  v4 = *(_DWORD *)(a2 - 12);
  v5 = *a1 == v4;
  v6 = *a1 < v4;
  if (v5)
    v6 = v3 < *(_DWORD *)(a2 - 8);
  if (v6)
  {
    v7 = a1;
    do
    {
      v8 = v7[3];
      v9 = v7[4];
      v7 += 3;
      v10 = v3 < v9;
      v5 = v2 == v8;
      v11 = v2 < v8;
      if (v5)
        v11 = v10;
    }
    while (!v11);
  }
  else
  {
    v12 = a1 + 3;
    do
    {
      v7 = v12;
      if ((unint64_t)v12 >= a2)
        break;
      v13 = *v12;
      v14 = v3 < v7[1];
      v5 = v2 == v13;
      v15 = v2 < v13;
      if (!v5)
        v14 = v15;
      v12 = v7 + 3;
    }
    while (!v14);
  }
  if ((unint64_t)v7 < a2)
  {
    do
    {
      v16 = *(_DWORD *)(a2 - 12);
      v17 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v18 = v3 < v17;
      v5 = v2 == v16;
      v19 = v2 < v16;
      if (v5)
        v19 = v18;
    }
    while (v19);
  }
  while ((unint64_t)v7 < a2)
  {
    v32 = v7[2];
    v31 = *(_QWORD *)v7;
    v20 = *(_QWORD *)a2;
    v7[2] = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v7 = v20;
    *(_DWORD *)(a2 + 8) = v32;
    *(_QWORD *)a2 = v31;
    do
    {
      v21 = v7[3];
      v22 = v7[4];
      v7 += 3;
      v23 = v3 < v22;
      v5 = v2 == v21;
      v24 = v2 < v21;
      if (v5)
        v24 = v23;
    }
    while (!v24);
    do
    {
      v25 = *(_DWORD *)(a2 - 12);
      v26 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v27 = v3 < v26;
      v5 = v2 == v25;
      v28 = v2 < v25;
      if (v5)
        v28 = v27;
    }
    while (v28);
  }
  if (v7 - 3 != a1)
  {
    v29 = *(_QWORD *)(v7 - 3);
    a1[2] = *(v7 - 1);
    *(_QWORD *)a1 = v29;
  }
  *(v7 - 3) = v2;
  *((_QWORD *)v7 - 1) = v3;
  return v7;
}

uint64_t sub_20F2BC598(int *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  int *v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD *)(a1 + 1);
  do
  {
    v5 = a1[v2 + 3];
    v6 = a1[v2 + 4] < v4;
    v7 = v5 == v3;
    v8 = v5 < v3;
    if (!v7)
      v6 = v8;
    v2 += 3;
  }
  while (v6);
  v9 = &a1[v2];
  if (v2 == 3)
  {
    do
    {
      if ((unint64_t)v9 >= a2)
        break;
      v14 = *(_DWORD *)(a2 - 12);
      v15 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v16 = v15 < v4;
      v7 = v14 == v3;
      v17 = v14 < v3;
      if (v7)
        v17 = v16;
    }
    while (!v17);
  }
  else
  {
    do
    {
      v10 = *(_DWORD *)(a2 - 12);
      v11 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v12 = v11 < v4;
      v7 = v10 == v3;
      v13 = v10 < v3;
      if (v7)
        v13 = v12;
    }
    while (!v13);
  }
  v18 = (uint64_t *)v9;
  if ((unint64_t)v9 < a2)
  {
    v19 = a2;
    do
    {
      v20 = *v18;
      v21 = *((_DWORD *)v18 + 2);
      v22 = *(_DWORD *)(v19 + 8);
      *v18 = *(_QWORD *)v19;
      *((_DWORD *)v18 + 2) = v22;
      *(_DWORD *)(v19 + 8) = v21;
      *(_QWORD *)v19 = v20;
      do
      {
        v23 = *((_DWORD *)v18 + 3);
        v24 = *((_DWORD *)v18 + 4);
        v18 = (uint64_t *)((char *)v18 + 12);
        v25 = v24 < v4;
        v7 = v23 == v3;
        v26 = v23 < v3;
        if (v7)
          v26 = v25;
      }
      while (v26);
      do
      {
        v27 = *(_DWORD *)(v19 - 12);
        v28 = *(_DWORD *)(v19 - 8);
        v19 -= 12;
        v29 = v28 < v4;
        v7 = v27 == v3;
        v30 = v27 < v3;
        if (v7)
          v30 = v29;
      }
      while (!v30);
    }
    while ((unint64_t)v18 < v19);
  }
  if ((int *)((char *)v18 - 12) != a1)
  {
    v31 = *(uint64_t *)((char *)v18 - 12);
    a1[2] = *((_DWORD *)v18 - 1);
    *(_QWORD *)a1 = v31;
  }
  *((_DWORD *)v18 - 3) = v3;
  *(v18 - 1) = v4;
  return (uint64_t)v18 - 12;
}

BOOL sub_20F2BC6D8(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F2BCD74(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

unsigned int *sub_20F2BCB74(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL4 v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a2 < *result;
  if (*a2 == *result)
    v6 = v5 < result[1];
  v7 = a3[1] < v5;
  v8 = *a3 == v4;
  v9 = *a3 < v4;
  if (v8)
    v9 = v7;
  if (v6)
  {
    if (v9)
    {
      v10 = result[2];
      v11 = *(_QWORD *)result;
      v12 = a3[2];
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = v12;
LABEL_17:
      *(_QWORD *)a3 = v11;
      a3[2] = v10;
      goto LABEL_18;
    }
    v20 = result[2];
    v21 = *(_QWORD *)result;
    v22 = a2[2];
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = v22;
    *(_QWORD *)a2 = v21;
    a2[2] = v20;
    v23 = *a3 < *a2;
    if (*a3 == *a2)
      v23 = a3[1] < a2[1];
    if (v23)
    {
      v10 = a2[2];
      v11 = *(_QWORD *)a2;
      v24 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v24;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    v15 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v15;
    *(_QWORD *)a3 = v14;
    a3[2] = v13;
    v16 = *a2 < *result;
    if (*a2 == *result)
      v16 = a2[1] < result[1];
    if (v16)
    {
      v17 = result[2];
      v18 = *(_QWORD *)result;
      v19 = a2[2];
      *(_QWORD *)result = *(_QWORD *)a2;
      result[2] = v19;
      *(_QWORD *)a2 = v18;
      a2[2] = v17;
    }
  }
LABEL_18:
  v25 = *a4 < *a3;
  if (*a4 == *a3)
    v25 = a4[1] < a3[1];
  if (v25)
  {
    v26 = a3[2];
    v27 = *(_QWORD *)a3;
    v28 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v28;
    *(_QWORD *)a4 = v27;
    a4[2] = v26;
    v29 = *a3 < *a2;
    if (*a3 == *a2)
      v29 = a3[1] < a2[1];
    if (v29)
    {
      v30 = a2[2];
      v31 = *(_QWORD *)a2;
      v32 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v32;
      *(_QWORD *)a3 = v31;
      a3[2] = v30;
      v33 = *a2 < *result;
      if (*a2 == *result)
        v33 = a2[1] < result[1];
      if (v33)
      {
        v34 = result[2];
        v35 = *(_QWORD *)result;
        v36 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v36;
        *(_QWORD *)a2 = v35;
        a2[2] = v34;
      }
    }
  }
  return result;
}

unsigned int *sub_20F2BCD74(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  _BOOL4 v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  result = sub_20F2BCB74(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] < a4[1];
  if (v11)
  {
    v12 = a4[2];
    v13 = *(_QWORD *)a4;
    v14 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v14;
    *(_QWORD *)a5 = v13;
    a5[2] = v12;
    v15 = *a4 < *a3;
    if (*a4 == *a3)
      v15 = a4[1] < a3[1];
    if (v15)
    {
      v16 = a3[2];
      v17 = *(_QWORD *)a3;
      v18 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v18;
      *(_QWORD *)a4 = v17;
      a4[2] = v16;
      v19 = *a3 < *a2;
      if (*a3 == *a2)
        v19 = a3[1] < a2[1];
      if (v19)
      {
        v20 = a2[2];
        v21 = *(_QWORD *)a2;
        v22 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v22;
        *(_QWORD *)a3 = v21;
        a3[2] = v20;
        v23 = *a2 < *a1;
        if (*a2 == *a1)
          v23 = a2[1] < a1[1];
        if (v23)
        {
          v24 = a1[2];
          v25 = *(_QWORD *)a1;
          v26 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v26;
          *(_QWORD *)a2 = v25;
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_20F2BCED0(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _BOOL4 v29;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BOOL4 v38;
  int v39;
  char *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v44;
  unsigned int v45;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 12;
    if ((char *)a2 - (char *)a1 >= 13)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[3 * v10];
      do
      {
        sub_20F2BD1A8((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14 < *a1;
        if (*v14 == *a1)
          v15 = v14[1] < a1[1];
        if (v15)
        {
          v16 = v14[2];
          v17 = *(_QWORD *)v14;
          v18 = a1[2];
          *(_QWORD *)v14 = *(_QWORD *)a1;
          v14[2] = v18;
          *(_QWORD *)a1 = v17;
          a1[2] = v16;
          sub_20F2BD1A8((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 13)
    {
      v19 = v8 / 0xCuLL;
      do
      {
        v21 = 0;
        v44 = *(_QWORD *)a1;
        v45 = a1[2];
        v22 = a1;
        do
        {
          v24 = v21 + 1;
          v25 = (char *)&v22[3 * v21 + 3];
          v26 = (2 * v21) | 1;
          v27 = 2 * v21 + 2;
          if (v27 < v19)
          {
            v28 = *((_DWORD *)v25 + 3);
            v29 = v22[3 * v24 + 1] < *((_DWORD *)v25 + 4);
            v30 = *(_DWORD *)v25 == v28;
            v31 = *(_DWORD *)v25 < v28;
            if (!v30)
              v29 = v31;
            if (v29)
            {
              v25 += 12;
              v26 = v27;
            }
          }
          v23 = *(_QWORD *)v25;
          v22[2] = *((_DWORD *)v25 + 2);
          *(_QWORD *)v22 = v23;
          v22 = (unsigned int *)v25;
          v21 = v26;
        }
        while (v26 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v6 -= 3;
        if (v25 == (char *)v6)
        {
          *((_DWORD *)v25 + 2) = v45;
          *(_QWORD *)v25 = v44;
        }
        else
        {
          v32 = *(_QWORD *)v6;
          *((_DWORD *)v25 + 2) = v6[2];
          *(_QWORD *)v25 = v32;
          *(_QWORD *)v6 = v44;
          v6[2] = v45;
          v33 = v25 - (char *)a1 + 12;
          if (v33 >= 13)
          {
            v34 = (v33 / 0xCuLL - 2) >> 1;
            v35 = &a1[3 * v34];
            v37 = *(_DWORD *)v25;
            v36 = *((_DWORD *)v25 + 1);
            v38 = *v35 < *(_DWORD *)v25;
            if (*v35 == *(_DWORD *)v25)
              v38 = v35[1] < v36;
            if (v38)
            {
              v39 = *((_DWORD *)v25 + 2);
              do
              {
                v40 = v25;
                v25 = (char *)v35;
                v41 = *(_QWORD *)v35;
                *((_DWORD *)v40 + 2) = *((_DWORD *)v25 + 2);
                *(_QWORD *)v40 = v41;
                if (!v34)
                  break;
                v34 = (v34 - 1) >> 1;
                v35 = &a1[3 * v34];
                v42 = *v35 < v37;
                if (*v35 == v37)
                  v42 = v35[1] < v36;
              }
              while (v42);
              *(_DWORD *)v25 = v37;
              *((_DWORD *)v25 + 1) = v36;
              *((_DWORD *)v25 + 2) = v39;
            }
          }
        }
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20F2BD1A8(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (unsigned int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = v6[3];
        v8 = *(_DWORD *)(result + 12 * v5 + 4) < v6[4];
        if (*v6 != v7)
          v8 = *v6 < v7;
        if (v8)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
        else
        {
          v7 = *v6;
        }
      }
      v10 = *a4;
      v9 = a4[1];
      v11 = v7 == *a4;
      v12 = v7 < *a4;
      if (v11)
        v12 = v6[1] < v9;
      if (!v12)
      {
        v13 = a4[2];
        do
        {
          v19 = a4;
          a4 = v6;
          v20 = *(_QWORD *)v6;
          v19[2] = a4[2];
          *(_QWORD *)v19 = v20;
          if (v4 < v5)
            break;
          v21 = (2 * v5) | 1;
          v6 = (unsigned int *)(result + 12 * v21);
          v5 = 2 * v5 + 2;
          if (v5 < a3)
          {
            v14 = *v6;
            v15 = v6[3];
            v16 = *(_DWORD *)(result + 12 * v21 + 4) < v6[4];
            if (*v6 != v15)
              v16 = *v6 < v15;
            if (v16)
            {
              v14 = v6[3];
              v6 += 3;
            }
            else
            {
              v5 = v21;
            }
          }
          else
          {
            v14 = *v6;
            v5 = v21;
          }
          v17 = v6[1] < v9;
          v11 = v14 == v10;
          v18 = v14 < v10;
          if (!v11)
            v17 = v18;
        }
        while (!v17);
        *a4 = v10;
        a4[1] = v9;
        a4[2] = v13;
      }
    }
  }
  return result;
}

unsigned int *sub_20F2BD314(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  BOOL v53;
  unsigned int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  unsigned int *v115;
  char v116;
  BOOL v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  _BOOL4 v122;
  _BOOL4 v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  unsigned int *v130;
  unsigned int v131;
  _BOOL4 v132;
  uint64_t v133;
  unsigned int *v134;
  BOOL v135;
  char v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  unsigned int v145;
  uint64_t v146;
  char *v147;
  unsigned int v148;
  BOOL v149;
  BOOL v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  _BOOL4 v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  BOOL v166;
  BOOL v167;
  unsigned int v168;
  unsigned int v169;
  _BOOL4 v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int *v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v174 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v7 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v118 = *(a2 - 3);
        v119 = *(a2 - 2);
        v120 = a2 - 3;
        v121 = v10[1];
        v122 = v118 < *v10;
        v135 = v119 == v121;
        v123 = v119 < v121;
        if (!v135)
          v122 = v123;
        if (v122)
        {
          v214 = v10[2];
          v193 = *(_QWORD *)v10;
          v124 = *(_QWORD *)v120;
          v10[2] = v120[2];
          *(_QWORD *)v10 = v124;
          *(_QWORD *)v120 = v193;
          v120[2] = v214;
        }
        return result;
      case 3uLL:
        v125 = v10 + 3;
        v126 = v10[3];
        v127 = v10[4];
        v128 = v10[1];
        v135 = v127 == v128;
        v129 = v127 < v128;
        if (v135)
          v129 = v126 < *v10;
        v131 = *(a2 - 2);
        v130 = a2 - 3;
        v132 = *(a2 - 3) < v126;
        if (v131 != v127)
          v132 = v131 < v127;
        if (v129)
        {
          if (v132)
          {
            v215 = v10[2];
            v194 = *(_QWORD *)v10;
            v133 = *(_QWORD *)v130;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v133;
            *(_QWORD *)v130 = v194;
            *(a2 - 1) = v215;
          }
          else
          {
            v217 = v10[2];
            v196 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v196;
            v10[5] = v217;
            v168 = *(a2 - 2);
            v169 = v10[4];
            v135 = v168 == v169;
            v170 = v168 < v169;
            if (v135)
              v170 = *(a2 - 3) < v10[3];
            if (v170)
            {
              v171 = v10[5];
              v172 = *v125;
              v173 = *(a2 - 1);
              *v125 = *(_QWORD *)v130;
              v10[5] = v173;
              *(_QWORD *)v130 = v172;
              *(a2 - 1) = v171;
            }
          }
        }
        else if (v132)
        {
          v151 = v10[5];
          v152 = *v125;
          v153 = *(a2 - 1);
          *v125 = *(_QWORD *)v130;
          v10[5] = v153;
          *(_QWORD *)v130 = v152;
          *(a2 - 1) = v151;
          v154 = v10[4];
          LODWORD(v152) = v10[1];
          v135 = v154 == (_DWORD)v152;
          v155 = v154 < v152;
          if (v135)
            v155 = v10[3] < *v10;
          if (v155)
          {
            v216 = v10[2];
            v195 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v195;
            v10[5] = v216;
          }
        }
        return result;
      case 4uLL:
        return sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5uLL:
        return sub_20F2BE95C(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v13 > 287)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              return sub_20F2BEAB8(v10, a2, a2, a3);
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          v18 = *(a2 - 3);
          v17 = *(a2 - 2);
          if ((unint64_t)v13 >= 0x601)
          {
            v19 = v10[1];
            v20 = &v10[3 * v15 + 1];
            v21 = *v20;
            v135 = *v20 == v19;
            v22 = *v20 < v19;
            if (v135)
              v22 = *v16 < *v10;
            v23 = v18 < *v16;
            v135 = v17 == v21;
            v24 = v17 < v21;
            if (v135)
              v24 = v23;
            if (v22)
            {
              if (v24)
              {
                v197 = v10[2];
                v176 = *(_QWORD *)v10;
                v25 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v25;
LABEL_37:
                *(_QWORD *)v8 = v176;
                *(a2 - 1) = v197;
                goto LABEL_38;
              }
              v203 = v10[2];
              v182 = *(_QWORD *)v10;
              v40 = *(_QWORD *)v16;
              v10[2] = v16[2];
              *(_QWORD *)v10 = v40;
              v16[2] = v203;
              *(_QWORD *)v16 = v182;
              v41 = *(a2 - 2);
              v42 = v41 < *v20;
              if (v41 == *v20)
                v42 = *(a2 - 3) < *v16;
              if (v42)
              {
                v197 = v16[2];
                v176 = *(_QWORD *)v16;
                v43 = *(_QWORD *)v8;
                v16[2] = *(a2 - 1);
                *(_QWORD *)v16 = v43;
                goto LABEL_37;
              }
            }
            else if (v24)
            {
              v199 = v16[2];
              v178 = *(_QWORD *)v16;
              v32 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v32;
              *(_QWORD *)v8 = v178;
              *(a2 - 1) = v199;
              v33 = v10[1];
              v34 = *v20 < v33;
              if (*v20 == v33)
                v34 = *v16 < *v10;
              if (v34)
              {
                v200 = v10[2];
                v179 = *(_QWORD *)v10;
                v35 = *(_QWORD *)v16;
                v10[2] = v16[2];
                *(_QWORD *)v10 = v35;
                v16[2] = v200;
                *(_QWORD *)v16 = v179;
              }
            }
LABEL_38:
            v44 = (uint64_t *)(v10 + 3);
            v45 = &v10[3 * v15];
            v48 = *(v45 - 3);
            v46 = v45 - 3;
            v47 = v48;
            v49 = v46 + 1;
            v50 = v46[1];
            v51 = v10[4];
            v52 = v48 < v10[3];
            v135 = v50 == v51;
            v53 = v50 < v51;
            if (v135)
              v53 = v52;
            v54 = *(a2 - 5);
            v55 = *(a2 - 6) < v47;
            v135 = v54 == v50;
            v56 = v54 < v50;
            if (v135)
              v56 = v55;
            if (v53)
            {
              if (v56)
              {
                v57 = v10[5];
                v58 = *v44;
                v59 = *(a2 - 4);
                *v44 = *(_QWORD *)v174;
                v10[5] = v59;
                *(_QWORD *)v174 = v58;
                *(a2 - 4) = v57;
              }
              else
              {
                v71 = *v44;
                v72 = v10[5];
                v73 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v73;
                v46[2] = v72;
                *(_QWORD *)v46 = v71;
                LODWORD(v71) = *(a2 - 5);
                v74 = v71 < *v49;
                if ((_DWORD)v71 == *v49)
                  v74 = *(a2 - 6) < *v46;
                if (v74)
                {
                  v206 = v46[2];
                  v185 = *(_QWORD *)v46;
                  v75 = *(_QWORD *)v174;
                  v46[2] = *(a2 - 4);
                  *(_QWORD *)v46 = v75;
                  *(_QWORD *)v174 = v185;
                  *(a2 - 4) = v206;
                }
              }
            }
            else if (v56)
            {
              v204 = v46[2];
              v183 = *(_QWORD *)v46;
              v60 = *(_QWORD *)v174;
              v46[2] = *(a2 - 4);
              *(_QWORD *)v46 = v60;
              *(_QWORD *)v174 = v183;
              *(a2 - 4) = v204;
              v61 = v10[4];
              v62 = *v49 < v61;
              if (*v49 == v61)
                v62 = *v46 < v10[3];
              if (v62)
              {
                v63 = *v44;
                v64 = v10[5];
                v65 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v65;
                v46[2] = v64;
                *(_QWORD *)v46 = v63;
              }
            }
            v76 = (uint64_t *)(v10 + 6);
            v77 = &v10[3 * v15];
            v80 = v77[3];
            v78 = v77 + 3;
            v79 = v80;
            v81 = v78 + 1;
            v82 = v78[1];
            v83 = v10[7];
            v84 = v80 < v10[6];
            v135 = v82 == v83;
            v85 = v82 < v83;
            if (v135)
              v85 = v84;
            v86 = *(a2 - 8);
            v87 = *(a2 - 9) < v79;
            v135 = v86 == v82;
            v88 = v86 < v82;
            if (v135)
              v88 = v87;
            if (v85)
            {
              if (v88)
              {
                v89 = v10[8];
                v90 = *v76;
                v91 = *(a2 - 7);
                *v76 = *(_QWORD *)v9;
                v10[8] = v91;
                *(_QWORD *)v9 = v90;
                *(a2 - 7) = v89;
              }
              else
              {
                v98 = *v76;
                v99 = v10[8];
                v100 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v100;
                v78[2] = v99;
                *(_QWORD *)v78 = v98;
                LODWORD(v98) = *(a2 - 8);
                v101 = v98 < *v81;
                if ((_DWORD)v98 == *v81)
                  v101 = *(a2 - 9) < *v78;
                if (v101)
                {
                  v208 = v78[2];
                  v187 = *(_QWORD *)v78;
                  v102 = *(_QWORD *)v9;
                  v78[2] = *(a2 - 7);
                  *(_QWORD *)v78 = v102;
                  *(_QWORD *)v9 = v187;
                  *(a2 - 7) = v208;
                }
              }
            }
            else if (v88)
            {
              v207 = v78[2];
              v186 = *(_QWORD *)v78;
              v92 = *(_QWORD *)v9;
              v78[2] = *(a2 - 7);
              *(_QWORD *)v78 = v92;
              *(_QWORD *)v9 = v186;
              *(a2 - 7) = v207;
              v93 = v10[7];
              v94 = *v81 < v93;
              if (*v81 == v93)
                v94 = *v78 < v10[6];
              if (v94)
              {
                v95 = *v76;
                v96 = v10[8];
                v97 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v97;
                v78[2] = v96;
                *(_QWORD *)v78 = v95;
              }
            }
            v103 = *v20;
            v104 = *v20 < *v49;
            if (*v20 == *v49)
              v104 = *v16 < *v46;
            v135 = *v81 == v103;
            v105 = *v81 < v103;
            if (v135)
              v105 = *v78 < *v16;
            if (v104)
            {
              if (v105)
              {
                v209 = v46[2];
                v188 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v78;
                v46[2] = v78[2];
LABEL_93:
                v78[2] = v209;
                *(_QWORD *)v78 = v188;
                goto LABEL_94;
              }
              v212 = v46[2];
              v191 = *(_QWORD *)v46;
              *(_QWORD *)v46 = *(_QWORD *)v16;
              v46[2] = v16[2];
              v16[2] = v212;
              *(_QWORD *)v16 = v191;
              v109 = *v20;
              v135 = *v81 == v109;
              v110 = *v81 < v109;
              if (v135)
                v110 = *v78 < *v16;
              if (v110)
              {
                v209 = v16[2];
                v188 = *(_QWORD *)v16;
                *(_QWORD *)v16 = *(_QWORD *)v78;
                v16[2] = v78[2];
                goto LABEL_93;
              }
            }
            else if (v105)
            {
              v210 = v16[2];
              v189 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v78;
              v16[2] = v78[2];
              v78[2] = v210;
              *(_QWORD *)v78 = v189;
              v106 = *v20;
              v107 = *v49;
              v135 = v106 == v107;
              v108 = v106 < v107;
              if (v135)
                v108 = *v16 < *v46;
              if (v108)
              {
                v211 = v46[2];
                v190 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v16;
                v46[2] = v16[2];
                v16[2] = v211;
                *(_QWORD *)v16 = v190;
              }
            }
LABEL_94:
            v213 = v10[2];
            v192 = *(_QWORD *)v10;
            v111 = *(_QWORD *)v16;
            v10[2] = v16[2];
            *(_QWORD *)v10 = v111;
            v16[2] = v213;
            *(_QWORD *)v16 = v192;
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          v26 = v10[1];
          v27 = &v10[3 * v15 + 1];
          v28 = v26 < *v27;
          if (v26 == *v27)
            v28 = *v10 < *v16;
          v29 = v18 < *v10;
          v135 = v17 == v26;
          v30 = v17 < v26;
          if (v135)
            v30 = v29;
          if (v28)
          {
            if (v30)
            {
              v198 = v16[2];
              v177 = *(_QWORD *)v16;
              v31 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v31;
              goto LABEL_54;
            }
            v205 = v16[2];
            v184 = *(_QWORD *)v16;
            v66 = *(_QWORD *)v10;
            v16[2] = v10[2];
            *(_QWORD *)v16 = v66;
            v10[2] = v205;
            *(_QWORD *)v10 = v184;
            v67 = *(a2 - 2);
            v68 = v10[1];
            v135 = v67 == v68;
            v69 = v67 < v68;
            if (v135)
              v69 = *(a2 - 3) < *v10;
            if (v69)
            {
              v198 = v10[2];
              v177 = *(_QWORD *)v10;
              v70 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v70;
LABEL_54:
              *(_QWORD *)v8 = v177;
              *(a2 - 1) = v198;
            }
LABEL_55:
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          if (!v30)
            goto LABEL_55;
          v201 = v10[2];
          v180 = *(_QWORD *)v10;
          v36 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v36;
          *(_QWORD *)v8 = v180;
          *(a2 - 1) = v201;
          v37 = *v27;
          LODWORD(v36) = v10[1];
          v135 = (_DWORD)v36 == v37;
          v38 = v36 < v37;
          if (v135)
            v38 = *v10 < *v16;
          if (!v38)
            goto LABEL_55;
          v202 = v16[2];
          v181 = *(_QWORD *)v16;
          v39 = *(_QWORD *)v10;
          v16[2] = v10[2];
          *(_QWORD *)v16 = v39;
          v10[2] = v202;
          *(_QWORD *)v10 = v181;
          if ((a5 & 1) != 0)
            goto LABEL_98;
LABEL_95:
          v112 = *(v10 - 2);
          v113 = v10[1];
          v135 = v112 == v113;
          v114 = v112 < v113;
          if (v135)
            v114 = *(v10 - 3) < *v10;
          if (!v114)
          {
            result = sub_20F2BE030(v10, (unint64_t)a2);
            v10 = result;
            goto LABEL_103;
          }
LABEL_98:
          v115 = (unsigned int *)sub_20F2BE180((int *)v10, (unint64_t)a2);
          if ((v116 & 1) == 0)
            goto LABEL_101;
          v117 = sub_20F2BE2C0(v10, v115);
          v10 = v115 + 3;
          result = (unsigned int *)sub_20F2BE2C0(v115 + 3, a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v117)
              continue;
LABEL_101:
            result = (unsigned int *)sub_20F2BD314(v7, v115, a3, -v12, a5 & 1);
            v10 = v115 + 3;
LABEL_103:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v115;
          if (v117)
            return result;
          goto LABEL_2;
        }
        v134 = v10 + 3;
        v135 = v10 == a2 || v134 == a2;
        v136 = v135;
        if ((a5 & 1) != 0)
        {
          if ((v136 & 1) == 0)
          {
            v137 = 0;
            v138 = v10;
            do
            {
              v140 = v134;
              v142 = v138[3];
              v141 = v138[4];
              v143 = v138[1];
              v135 = v141 == v143;
              v144 = v141 < v143;
              if (v135)
                v144 = v142 < *v138;
              if (v144)
              {
                v145 = v138[5];
                v146 = v137;
                do
                {
                  v147 = (char *)v10 + v146;
                  *(_QWORD *)(v147 + 12) = *(_QWORD *)((char *)v10 + v146);
                  *((_DWORD *)v147 + 5) = *(unsigned int *)((char *)v10 + v146 + 8);
                  if (!v146)
                  {
                    v139 = v10;
                    goto LABEL_131;
                  }
                  v148 = *((_DWORD *)v147 - 2);
                  v149 = v142 < *((_DWORD *)v147 - 3);
                  v135 = v141 == v148;
                  v150 = v141 < v148;
                  if (!v135)
                    v149 = v150;
                  v146 -= 12;
                }
                while (v149);
                v139 = (unsigned int *)((char *)v10 + v146 + 12);
LABEL_131:
                *v139 = v142;
                v139[1] = v141;
                v139[2] = v145;
              }
              v134 = v140 + 3;
              v137 += 12;
              v138 = v140;
            }
            while (v140 + 3 != a2);
          }
        }
        else if ((v136 & 1) == 0)
        {
          do
          {
            v156 = v134;
            v158 = v7[3];
            v157 = v7[4];
            v159 = v7[1];
            v135 = v157 == v159;
            v160 = v157 < v159;
            if (v135)
              v160 = v158 < *v7;
            if (v160)
            {
              v161 = v7[5];
              v162 = v156;
              do
              {
                v163 = v162;
                v164 = *(_QWORD *)(v162 - 3);
                v162 -= 3;
                *(_QWORD *)v163 = v164;
                v163[2] = *(v163 - 1);
                v165 = *(v163 - 5);
                v166 = v158 < *(v163 - 6);
                v135 = v157 == v165;
                v167 = v157 < v165;
                if (!v135)
                  v166 = v167;
              }
              while (v166);
              *v162 = v158;
              v162[1] = v157;
              v162[2] = v161;
            }
            v134 = v156 + 3;
            v7 = v156;
          }
          while (v156 + 3 != a2);
        }
        return result;
    }
  }
}

unsigned int *sub_20F2BE030(unsigned int *a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;

  v2 = *a1;
  v3 = *(_QWORD *)(a1 + 1);
  v4 = *(_DWORD *)(a2 - 8);
  v5 = (_DWORD)v3 == v4;
  v6 = v3 < v4;
  if (v5)
    v6 = *a1 < *(_DWORD *)(a2 - 12);
  if (v6)
  {
    v7 = a1;
    do
    {
      v8 = v7[3];
      v9 = v7[4];
      v7 += 3;
      v10 = v2 < v8;
      v5 = (_DWORD)v3 == v9;
      v11 = v3 < v9;
      if (!v5)
        v10 = v11;
    }
    while (!v10);
  }
  else
  {
    v12 = a1 + 3;
    do
    {
      v7 = v12;
      if ((unint64_t)v12 >= a2)
        break;
      v13 = v12[1];
      v14 = v2 < *v7;
      v5 = (_DWORD)v3 == v13;
      v15 = v3 < v13;
      if (!v5)
        v14 = v15;
      v12 = v7 + 3;
    }
    while (!v14);
  }
  if ((unint64_t)v7 < a2)
  {
    do
    {
      v16 = *(_DWORD *)(a2 - 12);
      v17 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v18 = v2 < v16;
      v5 = (_DWORD)v3 == v17;
      v19 = v3 < v17;
      if (!v5)
        v18 = v19;
    }
    while (v18);
  }
  while ((unint64_t)v7 < a2)
  {
    v32 = v7[2];
    v31 = *(_QWORD *)v7;
    v20 = *(_QWORD *)a2;
    v7[2] = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v7 = v20;
    *(_DWORD *)(a2 + 8) = v32;
    *(_QWORD *)a2 = v31;
    do
    {
      v21 = v7[3];
      v22 = v7[4];
      v7 += 3;
      v23 = v2 < v21;
      v5 = (_DWORD)v3 == v22;
      v24 = v3 < v22;
      if (!v5)
        v23 = v24;
    }
    while (!v23);
    do
    {
      v25 = *(_DWORD *)(a2 - 12);
      v26 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v27 = v2 < v25;
      v5 = (_DWORD)v3 == v26;
      v28 = v3 < v26;
      if (!v5)
        v27 = v28;
    }
    while (v27);
  }
  if (v7 - 3 != a1)
  {
    v29 = *(_QWORD *)(v7 - 3);
    a1[2] = *(v7 - 1);
    *(_QWORD *)a1 = v29;
  }
  *(v7 - 3) = v2;
  *((_QWORD *)v7 - 1) = v3;
  return v7;
}

uint64_t sub_20F2BE180(int *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  int *v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD *)(a1 + 1);
  do
  {
    v5 = a1[v2 + 4];
    v6 = a1[v2 + 3] < v3;
    v7 = v5 == (_DWORD)v4;
    v8 = v5 < v4;
    if (!v7)
      v6 = v8;
    v2 += 3;
  }
  while (v6);
  v9 = &a1[v2];
  if (v2 == 3)
  {
    do
    {
      if ((unint64_t)v9 >= a2)
        break;
      v14 = *(_DWORD *)(a2 - 12);
      v15 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v16 = v14 < v3;
      v7 = v15 == (_DWORD)v4;
      v17 = v15 < v4;
      if (!v7)
        v16 = v17;
    }
    while (!v16);
  }
  else
  {
    do
    {
      v10 = *(_DWORD *)(a2 - 12);
      v11 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v12 = v10 < v3;
      v7 = v11 == (_DWORD)v4;
      v13 = v11 < v4;
      if (!v7)
        v12 = v13;
    }
    while (!v12);
  }
  v18 = (uint64_t *)v9;
  if ((unint64_t)v9 < a2)
  {
    v19 = a2;
    do
    {
      v20 = *v18;
      v21 = *((_DWORD *)v18 + 2);
      v22 = *(_DWORD *)(v19 + 8);
      *v18 = *(_QWORD *)v19;
      *((_DWORD *)v18 + 2) = v22;
      *(_DWORD *)(v19 + 8) = v21;
      *(_QWORD *)v19 = v20;
      do
      {
        v23 = *((_DWORD *)v18 + 3);
        v24 = *((_DWORD *)v18 + 4);
        v18 = (uint64_t *)((char *)v18 + 12);
        v25 = v23 < v3;
        v7 = v24 == (_DWORD)v4;
        v26 = v24 < v4;
        if (!v7)
          v25 = v26;
      }
      while (v25);
      do
      {
        v27 = *(_DWORD *)(v19 - 12);
        v28 = *(_DWORD *)(v19 - 8);
        v19 -= 12;
        v29 = v27 < v3;
        v7 = v28 == (_DWORD)v4;
        v30 = v28 < v4;
        if (!v7)
          v29 = v30;
      }
      while (!v29);
    }
    while ((unint64_t)v18 < v19);
  }
  if ((int *)((char *)v18 - 12) != a1)
  {
    v31 = *(uint64_t *)((char *)v18 - 12);
    a1[2] = *((_DWORD *)v18 - 1);
    *(_QWORD *)a1 = v31;
  }
  *((_DWORD *)v18 - 3) = v3;
  *(v18 - 1) = v4;
  return (uint64_t)v18 - 12;
}

BOOL sub_20F2BE2C0(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F2BE95C(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

_DWORD *sub_20F2BE75C(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  int v46;

  v4 = a2[1];
  v5 = result[1];
  v6 = v4 == v5;
  v7 = v4 < v5;
  if (v6)
    v7 = *a2 < *result;
  v8 = a3[1];
  v6 = v8 == v4;
  v9 = v8 < v4;
  if (v6)
    v9 = *a3 < *a2;
  if (v7)
  {
    if (v9)
    {
      v10 = result[2];
      v11 = *(_QWORD *)result;
      v12 = a3[2];
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = v12;
LABEL_17:
      *(_QWORD *)a3 = v11;
      a3[2] = v10;
      goto LABEL_18;
    }
    v22 = result[2];
    v23 = *(_QWORD *)result;
    v24 = a2[2];
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = v24;
    *(_QWORD *)a2 = v23;
    a2[2] = v22;
    v25 = a3[1];
    v26 = a2[1];
    v6 = v25 == v26;
    v27 = v25 < v26;
    if (v6)
      v27 = *a3 < *a2;
    if (v27)
    {
      v10 = a2[2];
      v11 = *(_QWORD *)a2;
      v28 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v28;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    v15 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v15;
    *(_QWORD *)a3 = v14;
    a3[2] = v13;
    v16 = a2[1];
    v17 = result[1];
    v6 = v16 == v17;
    v18 = v16 < v17;
    if (v6)
      v18 = *a2 < *result;
    if (v18)
    {
      v19 = result[2];
      v20 = *(_QWORD *)result;
      v21 = a2[2];
      *(_QWORD *)result = *(_QWORD *)a2;
      result[2] = v21;
      *(_QWORD *)a2 = v20;
      a2[2] = v19;
    }
  }
LABEL_18:
  v29 = a4[1];
  v30 = a3[1];
  v6 = v29 == v30;
  v31 = v29 < v30;
  if (v6)
    v31 = *a4 < *a3;
  if (v31)
  {
    v32 = a3[2];
    v33 = *(_QWORD *)a3;
    v34 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v34;
    *(_QWORD *)a4 = v33;
    a4[2] = v32;
    v35 = a3[1];
    v36 = a2[1];
    v6 = v35 == v36;
    v37 = v35 < v36;
    if (v6)
      v37 = *a3 < *a2;
    if (v37)
    {
      v38 = a2[2];
      v39 = *(_QWORD *)a2;
      v40 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v40;
      *(_QWORD *)a3 = v39;
      a3[2] = v38;
      v41 = a2[1];
      v42 = result[1];
      v6 = v41 == v42;
      v43 = v41 < v42;
      if (v6)
        v43 = *a2 < *result;
      if (v43)
      {
        v44 = result[2];
        v45 = *(_QWORD *)result;
        v46 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v46;
        *(_QWORD *)a2 = v45;
        a2[2] = v44;
      }
    }
  }
  return result;
}

_DWORD *sub_20F2BE95C(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _DWORD *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int v35;

  result = sub_20F2BE75C(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  v13 = v11 == v12;
  v14 = v11 < v12;
  if (v13)
    v14 = *a5 < *a4;
  if (v14)
  {
    v15 = a4[2];
    v16 = *(_QWORD *)a4;
    v17 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v17;
    *(_QWORD *)a5 = v16;
    a5[2] = v15;
    v18 = a4[1];
    v19 = a3[1];
    v13 = v18 == v19;
    v20 = v18 < v19;
    if (v13)
      v20 = *a4 < *a3;
    if (v20)
    {
      v21 = a3[2];
      v22 = *(_QWORD *)a3;
      v23 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v23;
      *(_QWORD *)a4 = v22;
      a4[2] = v21;
      v24 = a3[1];
      v25 = a2[1];
      v13 = v24 == v25;
      v26 = v24 < v25;
      if (v13)
        v26 = *a3 < *a2;
      if (v26)
      {
        v27 = a2[2];
        v28 = *(_QWORD *)a2;
        v29 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v29;
        *(_QWORD *)a3 = v28;
        a3[2] = v27;
        v30 = a2[1];
        v31 = a1[1];
        v13 = v30 == v31;
        v32 = v30 < v31;
        if (v13)
          v32 = *a2 < *a1;
        if (v32)
        {
          v33 = a1[2];
          v34 = *(_QWORD *)a1;
          v35 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v35;
          *(_QWORD *)a2 = v34;
          a2[2] = v33;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_20F2BEAB8(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  _BOOL4 v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int64_t v22;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  int v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v48;
  unsigned int v49;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 12;
    if ((char *)a2 - (char *)a1 >= 13)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[3 * v10];
      do
      {
        sub_20F2BED90((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = v14[1];
        v16 = a1[1];
        v17 = v15 == v16;
        v18 = v15 < v16;
        if (v17)
          v18 = *v14 < *a1;
        if (v18)
        {
          v19 = v14[2];
          v20 = *(_QWORD *)v14;
          v21 = a1[2];
          *(_QWORD *)v14 = *(_QWORD *)a1;
          v14[2] = v21;
          *(_QWORD *)a1 = v20;
          a1[2] = v19;
          sub_20F2BED90((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 13)
    {
      v22 = v8 / 0xCuLL;
      do
      {
        v24 = 0;
        v48 = *(_QWORD *)a1;
        v49 = a1[2];
        v25 = a1;
        do
        {
          v27 = v24 + 1;
          v28 = (char *)&v25[3 * v24 + 3];
          v29 = (2 * v24) | 1;
          v30 = 2 * v24 + 2;
          if (v30 < v22)
          {
            v31 = v25[3 * v27 + 1];
            v32 = *((_DWORD *)v28 + 4);
            v17 = v31 == v32;
            v33 = v31 < v32;
            if (v17)
              v33 = *(_DWORD *)v28 < *((_DWORD *)v28 + 3);
            if (v33)
            {
              v28 += 12;
              v29 = v30;
            }
          }
          v26 = *(_QWORD *)v28;
          v25[2] = *((_DWORD *)v28 + 2);
          *(_QWORD *)v25 = v26;
          v25 = (unsigned int *)v28;
          v24 = v29;
        }
        while (v29 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
        v6 -= 3;
        if (v28 == (char *)v6)
        {
          *((_DWORD *)v28 + 2) = v49;
          *(_QWORD *)v28 = v48;
        }
        else
        {
          v34 = *(_QWORD *)v6;
          *((_DWORD *)v28 + 2) = v6[2];
          *(_QWORD *)v28 = v34;
          *(_QWORD *)v6 = v48;
          v6[2] = v49;
          v35 = v28 - (char *)a1 + 12;
          if (v35 >= 13)
          {
            v36 = (v35 / 0xCuLL - 2) >> 1;
            v37 = &a1[3 * v36];
            v38 = v37[1];
            v40 = *(_DWORD *)v28;
            v39 = *((_DWORD *)v28 + 1);
            v17 = v38 == v39;
            v41 = v38 < v39;
            if (v17)
              v41 = *v37 < *(_DWORD *)v28;
            if (v41)
            {
              v42 = *((_DWORD *)v28 + 2);
              do
              {
                v43 = v28;
                v28 = (char *)v37;
                v44 = *(_QWORD *)v37;
                *((_DWORD *)v43 + 2) = *((_DWORD *)v28 + 2);
                *(_QWORD *)v43 = v44;
                if (!v36)
                  break;
                v36 = (v36 - 1) >> 1;
                v37 = &a1[3 * v36];
                v45 = v37[1];
                v17 = v45 == v39;
                v46 = v45 < v39;
                if (v17)
                  v46 = *v37 < v40;
              }
              while (v46);
              *(_DWORD *)v28 = v40;
              *((_DWORD *)v28 + 1) = v39;
              *((_DWORD *)v28 + 2) = v42;
            }
          }
        }
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20F2BED90(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (unsigned int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 >= a3)
      {
        v10 = *v6;
      }
      else
      {
        v7 = *(_DWORD *)(result + 12 * v5 + 4);
        v8 = v6[4];
        v20 = v7 == v8;
        v9 = v7 < v8;
        if (v20)
          v9 = *v6 < v6[3];
        if (v9)
          v10 = v6[3];
        else
          v10 = *v6;
        if (v9)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v11 = v6[1];
      v13 = *a4;
      v12 = a4[1];
      v14 = v10 < *a4;
      v20 = v11 == v12;
      v15 = v11 < v12;
      if (!v20)
        v14 = v15;
      if (!v14)
      {
        v16 = a4[2];
        do
        {
          v25 = a4;
          a4 = v6;
          v26 = *(_QWORD *)v6;
          v25[2] = a4[2];
          *(_QWORD *)v25 = v26;
          if (v4 < v5)
            break;
          v27 = (2 * v5) | 1;
          v6 = (unsigned int *)(result + 12 * v27);
          v5 = 2 * v5 + 2;
          if (v5 < a3)
          {
            v17 = *(_DWORD *)(result + 12 * v27 + 4);
            v18 = v6[4];
            v20 = v17 == v18;
            v19 = v17 < v18;
            if (v20)
              v19 = *v6 < v6[3];
            v20 = !v19;
            v21 = v19 ? v6[3] : *v6;
            if (v20)
              v5 = v27;
            else
              v6 += 3;
          }
          else
          {
            v21 = *v6;
            v5 = v27;
          }
          v22 = v6[1];
          v23 = v21 < v13;
          v20 = v22 == v12;
          v24 = v22 < v12;
          if (v20)
            v24 = v23;
        }
        while (!v24);
        *a4 = v13;
        a4[1] = v12;
        a4[2] = v16;
      }
    }
  }
  return result;
}

BOOL sub_20F2BEEFC(int32x2_t *a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  void **v7;
  int32x2_t *v8;
  int32x2_t v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  __int32 v19;
  size_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  int32x2_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  int v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  int32x2_t v34;
  double *v35;
  uint64_t v37;
  _QWORD v38[2];
  unsigned int v39;
  double *v40;
  double v41[2];
  double v42;
  _BYTE v43[8];
  _QWORD *v44;
  int32x2_t *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v37 = (*(_QWORD *)&a1[24] - *(_QWORD *)&a1[23]) & 0x3FFFFFFFCLL;
  if (v37)
  {
    v7 = (void **)&a1[52];
    v8 = a1 + 8;
    v9 = a1[22];
    v10 = *(_DWORD *)(*(_QWORD *)&v9 + 8);
    v11 = *(_DWORD *)(*(_QWORD *)&v9 + 12);
    a1[54].i32[0] = v10;
    a1[54].i32[1] = v11;
    v12 = v11 * (unint64_t)v10;
    if (*(_QWORD *)&a1[53] < v12)
    {
      if (*v7)
        MEMORY[0x212BC6368](*v7, 0x1000C8000313F17);
      v13 = (8 * v12 + 31) & 0xFFFFFFFFFFFFFFE0;
      a1[52] = 0;
      a1[53] = (int32x2_t)(v13 >> 3);
      a1[52] = (int32x2_t)operator new(v13, (std::align_val_t)0x20uLL);
      v10 = a1[54].u32[0];
      v11 = a1[54].u32[1];
    }
    v14 = v10 * v11;
    if (v14)
      bzero(*v7, 8 * v14);
    (*(void (**)(int32x2_t *, void **, _QWORD))(*(_QWORD *)&a1[8] + 64))(v8, v7, 0);
    sub_20F20B6B0((uint64_t)v7);
    v15 = (void **)&a1[64];
    v16 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1);
    v17 = a1[3].u32[0];
    if ((_DWORD)v17 == a1[66].i32[0])
    {
      v18 = *v15;
    }
    else
    {
      a1[66].i32[0] = v17;
      v18 = (void *)a1[64];
      if (*(_QWORD *)&a1[65] < v17)
      {
        v19 = v17;
        if (v18)
        {
          MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
          v19 = a1[66].i32[0];
        }
        a1[64] = 0;
        v20 = (8 * v17 + 31) & 0xFFFFFFFE0;
        a1[65] = (int32x2_t)(v20 >> 3);
        v18 = operator new(v20, (std::align_val_t)0x20uLL);
        a1[64] = (int32x2_t)v18;
        LODWORD(v17) = v19;
      }
    }
    if ((_DWORD)v17)
      bzero(v18, 8 * v17);
    v21 = (_DWORD *)a1[23];
    v22 = (_DWORD *)a1[24];
    if (v21 != v22)
    {
      v23 = 0;
      v24 = a1[1];
      v25 = *(_QWORD *)(v16 + 8);
      do
      {
        v25 -= 16;
        do
        {
          v26 = *(_DWORD *)(v25 + 16);
          v25 += 16;
        }
        while (*v21 != v26);
        *((double *)*v15 + v23) = *(double *)(*(_QWORD *)(v25 + 8) + 32) - *(double *)(*(_QWORD *)&v24 + 8 * v23);
        ++v23;
        ++v21;
      }
      while (v21 != v22);
      v27 = (unsigned int *)a1[23];
      v28 = (unsigned int *)a1[24];
      if (v27 != v28)
      {
        v29 = 0;
        v30 = 0;
        v31 = *a3;
        do
        {
          if (*v31 < *v27)
          {
            do
            {
              v32 = v31[1];
              ++v31;
              ++v29;
            }
            while (v32 < *v27);
          }
          v33 = a1[7].i32[1] + v30;
          v34 = a1[52];
          v38[0] = vrev64_s32(a1[54]);
          v38[1] = *(_QWORD *)&v34 + 8 * v33;
          v39 = v33;
          v35 = (double *)(*(_QWORD *)a4 + 8 * (*(_DWORD *)(a4 + 28) + v29));
          v42 = *v35;
          v40 = &v42;
          v44 = v38;
          v45 = a1 + 64;
          v46 = 0x3FF0000000000000;
          sub_20F2BF1EC(v41, (uint64_t)v43);
          *v35 = *v40 - v41[0];
          ++v27;
          ++v30;
        }
        while (v27 != v28);
      }
    }
  }
  return v37 != 0;
}

_QWORD *sub_20F2BF1EC(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 8);
  if ((_QWORD *)(*(_QWORD *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 16)) == result
    || (v4 = *(_QWORD *)(a2 + 16), *(_QWORD **)v4 == result))
  {
    result = (_QWORD *)sub_20F2BF1EC(&v5);
    *v2 = v5;
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)(v4 + 16))
  {
    return (_QWORD *)sub_20E8BE6CC();
  }
  else
  {
    *result = 0;
  }
  return result;
}

float64_t sub_20F2BF2A4(_QWORD *a1, uint64_t a2, float64x2_t _Q0, float64x2_t a4, double a5, float64x2_t a6)
{
  unsigned int *v6;
  int v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  double *v22;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(unsigned int **)(a2 + 72);
  if ((v6[1] & 4) != 0)
    v7 = 1;
  else
    v7 = 2;
  if ((v7 & *(_DWORD *)(*a1 + 40)) == 0)
    return _Q0.f64[0];
  if (*((_BYTE *)v6 + 20))
  {
    v10 = *v6;
    if ((_DWORD)v10 == -1)
      return _Q0.f64[0];
    v12 = a1 + 1;
    v11 = a1[1];
    v13 = *(_QWORD **)(*a1 + 8);
    *(_BYTE *)v11 = 1;
    *(_DWORD *)(v11 + 4) = *(_DWORD *)(*v13 + 4 * v10);
    if (!sub_20F2BF454(a2 + 8, (double *)a1[2], (float64x2_t *)a1[3], _Q0, a4, a5, a6))
      return _Q0.f64[0];
  }
  else
  {
    v12 = a1 + 1;
    v14 = a1[1];
    *(_BYTE *)v14 = 0;
    *(_DWORD *)(v14 + 4) = -1;
    if (!sub_20F2BF454(a2 + 8, (double *)a1[2], (float64x2_t *)a1[3], _Q0, a4, a5, a6))
      return _Q0.f64[0];
  }
  v15 = a1[1];
  if (!*(_BYTE *)v15)
    return _Q0.f64[0];
  v16 = a1[3];
  v17 = *(unint64_t **)a1[4];
  v18 = *(_DWORD *)(v15 + 4);
  v19 = v17[15] + 24 * v18;
  v21 = *(char **)v19;
  v20 = *(char **)(v19 + 8);
  if (*(char **)v19 != v20)
  {
    while (*(_DWORD *)v21 < v18)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_19;
    }
  }
  if (v21 != v20)
  {
    if (*(_DWORD *)v21 == v18)
    {
      v22 = (double *)(v17[6] + 8 * *((_QWORD *)v21 + 1));
      goto LABEL_20;
    }
    v20 = v21;
  }
LABEL_19:
  v22 = (double *)sub_20F2B4550(v17 + 4, (char **)v19, v18, v20);
LABEL_20:
  _Q0 = *(float64x2_t *)v16;
  _D2 = *(_QWORD *)(v16 + 8);
  __asm { FMLA            D1, D2, V0.D[1] }
  _Q0.f64[0] = *v22 + _D1;
  *v22 = _Q0.f64[0];
  if (*(_BYTE *)*v12)
  {
    v29 = *(uint64_t **)a1[5];
    v30 = *((_DWORD *)v29 + 7);
    v31 = *v29;
    v32 = 8 * (v30 + *(_DWORD *)(*v12 + 4));
    _Q0 = *(float64x2_t *)a1[3];
    _D1 = *(_QWORD *)(a2 + 104);
    __asm { FMLA            D2, D1, V0.D[1] }
    _Q0.f64[0] = *(double *)(v31 + v32) - _D2;
    *(float64_t *)(v31 + v32) = _Q0.f64[0];
  }
  return _Q0.f64[0];
}

uint64_t sub_20F2BF454(uint64_t a1, double *a2, float64x2_t *a3, float64x2_t a4, float64x2_t a5, double a6, float64x2_t a7)
{
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  double v21;
  long double v22;
  long double v23;
  __n128 v24;
  int v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v32;
  __n128 v33;
  float64x2_t v34[2];

  v10 = a1 + 64;
  v11 = (_OWORD *)(a1 + 88);
  v12 = sub_20FC706B4(a1, (uint64_t *)(a1 + 64), (float64x2_t *)(a1 + 88), a3, a4, a5, a6, a7);
  *(_BYTE *)(a1 + 112) = v12;
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(a1 + 120);
    if (v13)
    {
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 24))(v13, v11);
      v14 = *(float64x2_t **)(a1 + 120);
    }
    else
    {
      v14 = 0;
    }
    *(_OWORD *)(a1 + 72) = *v11;
    v32 = *(float64x2_t *)(a1 + 88);
    _D1 = v32.f64[1];
    __asm { FMLA            D0, D1, V2.D[1] }
    v21 = a2[2];
    v22 = a2[3] * (a2[1] * _D0);
    v23 = v22 + 1.0;
    *(long double *)(a1 + 104) = v21 * log1p(v22);
    v24.n128_f64[0] = sqrt(1.0 / v23);
    *(float64x2_t *)(a1 + 88) = vmulq_n_f64(v32, v24.n128_f64[0]);
    if (v14)
    {
      v33 = v24;
      v25 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v14->f64[0] + 16))(v14);
      v26 = v33.n128_f64[0];
      if (*(_BYTE *)(*(_QWORD *)v10 + 20))
      {
        switch(v25)
        {
          case 0:
            v27 = vmulq_n_f64(v14[2], v33.n128_f64[0]);
            v28 = *a3;
            v29 = vmulq_n_f64(vmulq_n_f64(v14[1], v33.n128_f64[0]), a3->f64[0]);
            goto LABEL_16;
          case 1:
            v30 = vmulq_f64(vmulq_n_f64(v14[1], v33.n128_f64[0]), *a3);
            goto LABEL_17;
          case 2:
            v26 = v33.n128_f64[0] * v14[1].f64[0];
            goto LABEL_14;
          case 3:
LABEL_14:
            v30 = vmulq_n_f64(*a3, v26);
            goto LABEL_17;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *, __n128))(*(_QWORD *)&v14->f64[0] + 64))(v34, v14, v33);
            v27 = v34[1];
            v28 = *a3;
            v29 = vmulq_n_f64(v34[0], a3->f64[0]);
LABEL_16:
            v30 = vmlaq_laneq_f64(v29, v27, v28, 1);
            goto LABEL_17;
          default:
            return v12;
        }
      }
    }
    else if (*(_BYTE *)(*(_QWORD *)v10 + 20))
    {
      v30 = vmulq_n_f64(*a3, v24.n128_f64[0]);
LABEL_17:
      *a3 = v30;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = 0;
  }
  return v12;
}

void sub_20F2BF61C(uint64_t a1, unsigned int **a2, void **a3, unsigned int a4, int a5)
{
  int v5;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  size_t v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  int v64;

  v5 = a5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_DWORD *)(v9 + 8);
  if (a4 <= 1 && (a5 & 1) != 0)
  {
    v11 = *(_DWORD *)(v9 + 12);
    *((_DWORD *)a3 + 4) = v10;
    *((_DWORD *)a3 + 5) = v11;
    v12 = v11 * (unint64_t)v10;
    if ((unint64_t)a3[1] < v12)
    {
      if (*a3)
        MEMORY[0x212BC6368](*a3, 0x1000C8000313F17);
      v13 = (8 * v12 + 31) & 0xFFFFFFFFFFFFFFE0;
      *a3 = 0;
      a3[1] = (void *)(v13 >> 3);
      *a3 = operator new(v13, (std::align_val_t)0x20uLL);
      v10 = *((_DWORD *)a3 + 4);
      v11 = *((_DWORD *)a3 + 5);
    }
    v14 = v10 * v11;
    if (v14)
      bzero(*a3, 8 * v14);
    v15 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *a2;
      do
      {
        v18 = *(_QWORD *)(a1 + 120) + 24 * v16;
        v19 = *(unsigned int **)v18;
        v20 = *(unsigned int **)(v18 + 8);
        if (v19 != v20)
        {
          do
          {
            v21 = *v17;
            v22 = (*a2)[*v19];
            if (*v17 <= v22)
              v23 = (*a2)[*v19];
            else
              v23 = *v17;
            if (v21 >= v22)
              v21 = (*a2)[*v19];
            *((_QWORD *)*a3 + v21 + *((_DWORD *)a3 + 4) * v23) = *(_QWORD *)(*(_QWORD *)(a1 + 48)
                                                                           + 8 * *((_QWORD *)v19 + 1));
            v19 += 4;
          }
          while (v19 != v20);
          v15 = *(unsigned int *)(a1 + 44);
        }
        ++v16;
        ++v17;
      }
      while (v16 < v15);
    }
    return;
  }
  v24 = (a4 + v10 - 1) & -a4;
  *((_DWORD *)a3 + 4) = v24;
  *((_DWORD *)a3 + 5) = v24;
  v25 = v24 * (unint64_t)v24;
  v26 = v24;
  v27 = v24;
  if ((unint64_t)a3[1] < v25)
  {
    if (*a3)
      MEMORY[0x212BC6368](*a3, 0x1000C8000313F17);
    v28 = (8 * v25 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a3 = 0;
    a3[1] = (void *)(v28 >> 3);
    *a3 = operator new(v28, (std::align_val_t)0x20uLL);
    v27 = *((_DWORD *)a3 + 4);
    v26 = *((_DWORD *)a3 + 5);
  }
  if (v27 * v26)
    bzero(*a3, 8 * v27 * v26);
  v29 = v24 - v10;
  if (v24 > v10)
  {
    v62 = v24 - v10;
    v63 = v10;
    v64 = v5;
    v30 = v27 - v29 + (v26 - v29) * v27;
    v31 = (char *)*a3;
    v32 = (uint64_t)*a3 + 8 * v30;
    v33 = 8 * v29;
    v34 = v29;
    do
    {
      bzero(&v31[8 * v30], v33);
      v30 += v27;
      --v34;
    }
    while (v34);
    v5 = v64;
    if (v24 != v63)
    {
      v35 = v27 + 1;
      if (v62 < 2)
      {
        v36 = 0;
LABEL_47:
        v43 = v62 - v36;
        v44 = v35 * v36;
        do
        {
          *(_QWORD *)(v32 + 8 * v44) = 0x3FF0000000000000;
          v44 += v35;
          --v43;
        }
        while (v43);
        goto LABEL_49;
      }
      v36 = 0;
      if (v35 < 0)
        v37 = ~v27;
      else
        v37 = v27 + 1;
      v38 = (v62 - 1) * (unint64_t)v37;
      v39 = v27 != -1 && (unint64_t)(v62 - 1) >> 32 != 0;
      if ((_DWORD)v38)
        v40 = v35 < 0;
      else
        v40 = 0;
      if (v40)
        goto LABEL_47;
      if ((v38 & 0xFFFFFFFF00000000) != 0)
        goto LABEL_47;
      if (v39)
        goto LABEL_47;
      v41 = 0;
      v36 = v62 & 0xFFFFFFFE;
      v42 = v36;
      do
      {
        *(_QWORD *)(v32 + 8 * v41) = 0x3FF0000000000000;
        *(_QWORD *)(v32 + 8 * (v35 + v41)) = 0x3FF0000000000000;
        v41 += 2 * v27 + 2;
        v42 -= 2;
      }
      while (v42);
      if (v36 != v62)
        goto LABEL_47;
    }
  }
LABEL_49:
  v45 = *(unsigned int *)(a1 + 44);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 44))
    {
      v46 = 0;
      v47 = *a2;
      do
      {
        v48 = *(_QWORD *)(a1 + 120) + 24 * v46;
        v49 = *(unsigned int **)v48;
        v50 = *(unsigned int **)(v48 + 8);
        if (v49 != v50)
        {
          do
          {
            v51 = *v47;
            v52 = (*a2)[*v49];
            if (*v47 <= v52)
              v53 = (*a2)[*v49];
            else
              v53 = *v47;
            if (v51 >= v52)
              v51 = (*a2)[*v49];
            *((_QWORD *)*a3 + v51 + *((_DWORD *)a3 + 4) * v53) = *(_QWORD *)(*(_QWORD *)(a1 + 48)
                                                                           + 8 * *((_QWORD *)v49 + 1));
            v49 += 4;
          }
          while (v49 != v50);
          v45 = *(unsigned int *)(a1 + 44);
        }
        ++v46;
        ++v47;
      }
      while (v46 < v45);
    }
  }
  else if (*(_DWORD *)(a1 + 44))
  {
    v54 = 0;
    v55 = *a2;
    do
    {
      v56 = *(_QWORD *)(a1 + 120) + 24 * v54;
      v57 = *(unsigned int **)v56;
      v58 = *(unsigned int **)(v56 + 8);
      if (v57 != v58)
      {
        do
        {
          v59 = *v55;
          v60 = (*a2)[*v57];
          if (*v55 >= v60)
            v61 = (*a2)[*v57];
          else
            v61 = *v55;
          if (v59 <= v60)
            v59 = (*a2)[*v57];
          *((_QWORD *)*a3 + v59 + *((_DWORD *)a3 + 4) * v61) = *(_QWORD *)(*(_QWORD *)(a1 + 48)
                                                                         + 8 * *((_QWORD *)v57 + 1));
          v57 += 4;
        }
        while (v57 != v58);
        v45 = *(unsigned int *)(a1 + 44);
      }
      ++v54;
      ++v55;
    }
    while (v54 < v45);
  }
}

BOOL sub_20F2BFA00(uint64_t a1, double *a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  int v8;
  size_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void **v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  unint64_t v29;
  double *v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  float64x2_t *v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  double v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  double *v54;
  double *v55;
  double v56;
  double v57;
  double *v58;
  uint64_t v59;
  float64x2_t *v60;
  float64x2_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  float64x2_t *v68;
  BOOL v69;
  BOOL v70;
  BOOL v72;
  float64x2_t *v73;
  double v74;
  float64x2_t *v75;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t *v84;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;

  v3 = (*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) & 0x3FFFFFFFCLL;
  if (!v3)
  {
    *a2 = 0.0;
    return v3 != 0;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 528))
  {
    v7 = *(void **)(a1 + 512);
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v6;
    v7 = *(void **)(a1 + 512);
    if (*(_QWORD *)(a1 + 520) < v6)
    {
      v8 = v6;
      if (v7)
      {
        MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
        v8 = *(_DWORD *)(a1 + 528);
      }
      *(_QWORD *)(a1 + 512) = 0;
      v9 = (8 * v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 520) = v9 >> 3;
      v7 = operator new(v9, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 512) = v7;
      LODWORD(v6) = v8;
    }
  }
  if ((_DWORD)v6)
    bzero(v7, 8 * v6);
  v10 = *(_DWORD **)(a1 + 184);
  v11 = *(_DWORD **)(a1 + 192);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(v5 + 8);
    do
    {
      v14 -= 16;
      do
      {
        v15 = *(_DWORD *)(v14 + 16);
        v14 += 16;
      }
      while (*v10 != v15);
      *(double *)(*(_QWORD *)(a1 + 512) + 8 * v12) = *(double *)(*(_QWORD *)(v14 + 8) + 32)
                                                     - *(double *)(v13 + 8 * v12);
      ++v12;
      ++v10;
    }
    while (v10 != v11);
  }
  v16 = (void **)(a1 + 416);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(_DWORD *)(v17 + 8);
  v19 = *(_DWORD *)(v17 + 12);
  *(_DWORD *)(a1 + 432) = v18;
  *(_DWORD *)(a1 + 436) = v19;
  v20 = v19 * (unint64_t)v18;
  if (*(_QWORD *)(a1 + 424) < v20)
  {
    if (*v16)
      MEMORY[0x212BC6368](*v16, 0x1000C8000313F17);
    v21 = (8 * v20 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = v21 >> 3;
    *(_QWORD *)(a1 + 416) = operator new(v21, (std::align_val_t)0x20uLL);
    v18 = *(_DWORD *)(a1 + 432);
    v19 = *(_DWORD *)(a1 + 436);
  }
  v22 = v18 * v19;
  if (v22)
    bzero(*v16, 8 * v22);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 64))(a1 + 64, a1 + 416, 0);
  sub_20F20B6B0(a1 + 416);
  v23 = *(unsigned int *)(a1 + 528);
  if (!(_DWORD)v23)
  {
    *a2 = -0.0;
    return v3 != 0;
  }
  v24 = *(double **)(a1 + 512);
  v25 = *(double **)(a1 + 32);
  v26 = &v24[v23];
  v27 = *v24 * *v25;
  if ((_DWORD)v23 != 1)
  {
    v28 = v24 + 1;
    v29 = (v23 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v29 < 3)
    {
      v30 = *(double **)(a1 + 32);
LABEL_30:
      v38 = v30 + 1;
      do
      {
        v39 = *v28++;
        v40 = v39;
        v41 = *v38++;
        v27 = v27 + v40 * v41;
      }
      while (v28 != v26);
      goto LABEL_32;
    }
    v31 = v29 + 1;
    v32 = (v29 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v28 += v32;
    v30 = &v25[v32];
    v33 = (float64x2_t *)(v25 + 3);
    v34 = (float64x2_t *)(v24 + 3);
    v35 = v32;
    do
    {
      v36 = vmulq_f64(v34[-1], v33[-1]);
      v37 = vmulq_f64(*v34, *v33);
      v27 = v27 + v36.f64[0] + v36.f64[1] + v37.f64[0] + v37.f64[1];
      v33 += 2;
      v34 += 2;
      v35 -= 4;
    }
    while (v35);
    if (v31 != v32)
      goto LABEL_30;
  }
LABEL_32:
  v42 = -v27;
  *a2 = v42;
  v43 = *(unsigned int *)(a1 + 432);
  if (!(_DWORD)v43)
  {
    if (v23 >= 4 && (v26 <= a2 || v24 >= a2 + 1))
    {
      v46 = v23 & 0xFFFFFFFC;
      v84 = (float64x2_t *)(v24 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v86 = v46;
      do
      {
        v87 = vmulq_f64(vmulq_f64(v84[-1], _Q1), (float64x2_t)0);
        v88 = vmulq_f64(vmulq_f64(*v84, _Q1), (float64x2_t)0);
        v42 = v42 + v87.f64[0] + v87.f64[1] + v88.f64[0] + v88.f64[1];
        v84 += 2;
        v86 -= 4;
      }
      while (v86);
      *a2 = v42;
      if (v46 == v23)
        return v3 != 0;
    }
    else
    {
      v46 = 0;
    }
    v47 = v23 - v46;
    v48 = &v24[v46];
    do
    {
      v49 = *v48++;
      v42 = v42 + v49 * 0.5 * 0.0;
      *a2 = v42;
      --v47;
    }
    while (v47);
    return v3 != 0;
  }
  v44 = *(float64x2_t **)(a1 + 416);
  if ((_DWORD)v43 != 1)
  {
    v50 = 0;
    v51 = 0;
    v52 = (v43 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v53 = (v52 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v54 = &v44->f64[(v43 * v51)];
      v56 = *v54;
      v55 = v54 + 1;
      v57 = v56 * *v24;
      if (v52 >= 3)
      {
        v55 += v53;
        v59 = (v52 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v60 = (float64x2_t *)(v24 + 3);
        v61 = (float64x2_t *)((char *)v44 + 8 * v50 + 24);
        do
        {
          v62 = vmulq_f64(v61[-1], v60[-1]);
          v63 = vmulq_f64(*v61, *v60);
          v57 = v57 + v62.f64[0] + v62.f64[1] + v63.f64[0] + v63.f64[1];
          v60 += 2;
          v61 += 2;
          v59 -= 4;
        }
        while (v59);
        v58 = &v24[v53];
        if (v52 + 1 == v53)
          goto LABEL_44;
      }
      else
      {
        v58 = v24;
      }
      v64 = v58 + 1;
      do
      {
        v65 = *v55++;
        v66 = v65;
        v67 = *v64++;
        v57 = v57 + v66 * v67;
      }
      while (v55 != &v44->f64[(v43 * v51) + v43]);
LABEL_44:
      v42 = v42 + v24[v51] * 0.5 * v57;
      *a2 = v42;
      ++v51;
      v50 += v43;
      if (v51 == v23)
        return v3 != 0;
    }
  }
  if (v23 < 0xA)
  {
    for (i = 0; i != v23; ++i)
    {
LABEL_69:
      v42 = v42 + v24[i] * 0.5 * (v44->f64[i] * *v24);
      *a2 = v42;
    }
    return v3 != 0;
  }
  i = 0;
  v68 = (float64x2_t *)(a2 + 1);
  v69 = v24 + 1 > a2;
  v70 = v26 > a2;
  if (v24 >= a2 + 1)
    v69 = 0;
  if (v24 >= (double *)v68)
    v70 = 0;
  v72 = &v44->f64[v23] > a2 && v44 < v68;
  if (v69)
    goto LABEL_69;
  if (v70)
    goto LABEL_69;
  if (v72)
    goto LABEL_69;
  i = v23 & 0xFFFFFFFC;
  v73 = (float64x2_t *)(v24 + 2);
  v74 = *v24;
  v75 = v44 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v80 = i;
  do
  {
    v81 = vmulq_f64(vmulq_f64(v73[-1], _Q2), vmulq_n_f64(v75[-1], v74));
    v82 = vmulq_f64(vmulq_f64(*v73, _Q2), vmulq_n_f64(*v75, v74));
    v42 = v42 + v81.f64[0] + v81.f64[1] + v82.f64[0] + v82.f64[1];
    v73 += 2;
    v75 += 2;
    v80 -= 4;
  }
  while (v80);
  *a2 = v42;
  if (i != v23)
    goto LABEL_69;
  return v3 != 0;
}

uint64_t sub_20F2BFF60(uint64_t a1, uint64_t a2, void **a3)
{
  unint64_t v6;
  const void *v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  int v13;
  size_t v15;
  size_t v16;
  void *v17;
  void *v18;
  size_t v19;
  size_t v20;
  void *v21;

  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == *((_DWORD *)a3 + 4))
    goto LABEL_7;
  v7 = *a3;
  if (*(void **)a2 != *a3)
  {
    *((_DWORD *)a3 + 4) = v6;
    if ((unint64_t)a3[1] < v6)
    {
      if (v7)
        MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
      v8 = (8 * v6 + 31) & 0xFFFFFFFE0;
      *a3 = 0;
      a3[1] = (void *)(v8 >> 3);
      *a3 = operator new(v8, (std::align_val_t)0x20uLL);
    }
LABEL_7:
    if (a3 == (void **)a2)
      goto LABEL_16;
    v9 = *(unsigned int *)(a2 + 16);
    if ((unint64_t)a3[1] >= v9)
    {
      if (!(_DWORD)v9)
      {
        v13 = 0;
        goto LABEL_15;
      }
      v12 = *a3;
      v10 = 8 * v9;
    }
    else
    {
      if (*a3)
        MEMORY[0x212BC6368](*a3, 0x1000C8000313F17);
      v10 = 8 * v9;
      v11 = (v10 + 31) & 0xFFFFFFFE0;
      *a3 = 0;
      a3[1] = (void *)(v11 >> 3);
      v12 = operator new(v11, (std::align_val_t)0x20uLL);
      *a3 = v12;
    }
    memcpy(v12, *(const void **)a2, v10);
    v13 = *(_DWORD *)(a2 + 16);
LABEL_15:
    *((_DWORD *)a3 + 4) = v13;
LABEL_16:
    if (*(_DWORD *)(a1 + 28))
      sub_20E8BE8E4();
    return 1;
  }
  v15 = (8 * v6 + 31) & 0xFFFFFFFE0;
  v16 = v15 >> 3;
  v17 = operator new(v15, (std::align_val_t)0x20uLL);
  v18 = v17;
  v19 = *(unsigned int *)(a2 + 16);
  if (v16 < v19)
  {
    MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
    v20 = 8 * v19;
    v19 = (8 * v19 + 31) & 0xFFFFFFFE0;
    v18 = operator new(v19, (std::align_val_t)0x20uLL);
    v16 = v19 >> 3;
    v7 = *(const void **)a2;
    LODWORD(v19) = *(_DWORD *)(a2 + 16);
LABEL_24:
    memcpy(v18, v7, v20);
    goto LABEL_25;
  }
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    goto LABEL_24;
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 28))
    sub_20E8BE8E4();
  v21 = *a3;
  *a3 = v18;
  a3[1] = (void *)v16;
  *((_DWORD *)a3 + 4) = v19;
  if (v21)
    MEMORY[0x212BC6368](v21, 0x1000C8000313F17);
  return 1;
}

void sub_20F2C0188(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2C01AC(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  _BOOL4 v10;
  uint64_t v11;
  int32x2_t v12;

  v2 = *a2;
  v3 = *(_DWORD *)(*a2 + 16);
  if (v3 == *(_DWORD *)(*a2 + 20))
  {
    v4 = result;
    v5 = (_QWORD *)(result + 8);
    if (result + 8 == v2)
    {
      if (*(_DWORD *)(result + 24))
      {
LABEL_12:
        result = sub_20E8BE940();
        v10 = result != 0;
        goto LABEL_13;
      }
    }
    else
    {
      v6 = v3 * v3;
      if (*(_QWORD *)(result + 16) >= v6)
      {
        if (!(_DWORD)v6)
        {
          v12 = vdup_n_s32(v3);
          *(int32x2_t *)(result + 24) = v12;
          if (v12.i32[0])
            goto LABEL_12;
          goto LABEL_8;
        }
        v9 = (void *)*v5;
        v7 = 8 * v6;
      }
      else
      {
        if (*v5)
          MEMORY[0x212BC6368](*v5, 0x1000C8000313F17);
        v7 = 8 * v6;
        v8 = (v7 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 16) = v8 >> 3;
        v9 = operator new(v8, (std::align_val_t)0x20uLL);
        *(_QWORD *)(v4 + 8) = v9;
      }
      result = (uint64_t)memcpy(v9, *(const void **)v2, v7);
      v11 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v4 + 24) = v11;
      if ((_DWORD)v11)
        goto LABEL_12;
    }
LABEL_8:
    v10 = 0;
LABEL_13:
    *(_DWORD *)v4 = v10;
  }
  return result;
}

void sub_20F2C02A4(uint64_t a1, void **a2, _QWORD *a3, int a4)
{
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 8);
  *((_DWORD *)a2 + 4) = v8;
  if ((unint64_t)a2[1] < v8)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v9 >> 3);
    *a2 = operator new(v9, (std::align_val_t)0x20uLL);
  }
  if (a4)
  {
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10)
      bzero(*a2, 8 * v10);
  }
  if (*a3 != a3[1])
  {
    v11 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *(uint64_t **)(a1 + 88);
      v14 = *v13;
      v15 = v13[1];
      if (v14 != v15)
        goto LABEL_15;
LABEL_13:
      while (++v12 < v11)
      {
        v16 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 24 * v12);
        v14 = *v16;
        v15 = v16[1];
        if (v14 != v15)
        {
LABEL_15:
          while (v12 != *(_DWORD *)v14)
          {
            v14 += 16;
            if (v14 == v15)
              goto LABEL_13;
          }
          if (v12 >= (uint64_t)(a3[1] - *a3) >> 2)
            sub_20EDB40C4();
          v17 = *(unsigned int *)(*a3 + 4 * v12);
          v18 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(v14 + 8));
          v19 = *a2;
          if (v18 == *a2)
          {
            v19[v17] = *v18;
            v11 = *(unsigned int *)(a1 + 12);
          }
          else
          {
            v19[v17] = *v18;
          }
        }
      }
    }
  }
}

BOOL sub_20F2C0404(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  a1[3] = *(_QWORD *)(a2 + 520) + 152;
  a1[4] = a2 + 560;
  v2 = *(_DWORD *)(a2 + 1264);
  if (v2)
  {
    a1[3] = 0;
    a1[4] = 0;
    return v2 == 0;
  }
  v5 = *(unsigned int *)(a2 + 1288);
  v6 = operator new((8 * (v5 * v5) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v7 = v6;
  if ((_DWORD)v5 * (_DWORD)v5)
    bzero(v6, 8 * (v5 * v5));
  if ((_DWORD)v5)
  {
    v8 = v5 + 1;
    if ((_DWORD)v5 == 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      if (v8 < 0)
        v10 = ~(_DWORD)v5;
      else
        v10 = v5 + 1;
      v11 = (v5 - 1) * (unint64_t)v10;
      v12 = (_DWORD)v5 != -1 && (unint64_t)(v5 - 1) >> 32 != 0;
      if ((_DWORD)v11)
        v13 = v8 < 0;
      else
        v13 = 0;
      if (!v13 && (v11 & 0xFFFFFFFF00000000) == 0 && !v12)
      {
        v14 = 0;
        v9 = v5 & 0xFFFFFFFE;
        v15 = v9;
        do
        {
          v7[v14] = 0x3FF0000000000000;
          v7[v8 + v14] = 0x3FF0000000000000;
          v14 += 2 * v5 + 2;
          v15 -= 2;
        }
        while (v15);
        if (v9 == v5)
          goto LABEL_25;
      }
    }
    v16 = v5 - v9;
    v17 = v8 * v9;
    do
    {
      v7[v17] = 0x3FF0000000000000;
      v17 += v8;
      --v16;
    }
    while (v16);
  }
LABEL_25:
  if (*(_DWORD *)(a2 + 1292))
    sub_20E8BE8E4();
  v18 = *a1;
  *a1 = (uint64_t)v7;
  a1[1] = ((8 * (v5 * v5) + 31) & 0xFFFFFFFE0uLL) >> 3;
  *((_DWORD *)a1 + 4) = v5;
  *((_DWORD *)a1 + 5) = v5;
  if (v18)
    MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  return v2 == 0;
}

void sub_20F2C0598(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

char *sub_20F2C05BC(uint64_t a1, unsigned int *a2)
{
  char *v3;
  char **v4;
  __int128 *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v37;
  uint64_t v38;
  _BYTE v39[28];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v5 = *(__int128 **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  v4 = (char **)(a1 + 8);
  v6 = *a2;
  if (v3 == (char *)v5)
  {
    v5 = *(__int128 **)(a1 + 16);
    goto LABEL_11;
  }
  v7 = (v3 - (char *)v5) >> 4;
  do
  {
    v8 = v7 >> 1;
    v9 = &v5[v7 >> 1];
    v11 = *(_DWORD *)v9;
    v10 = v9 + 1;
    v7 += ~(v7 >> 1);
    if (v11 < v6)
      v5 = v10;
    else
      v7 = v8;
  }
  while (v7);
  if (v3 == (char *)v5 || v6 != *(_DWORD *)v5)
  {
LABEL_11:
    v12 = *((unsigned __int8 *)a2 + 4);
    *(_OWORD *)&v39[4] = *(_OWORD *)a2;
    *(_QWORD *)&v39[20] = *((_QWORD *)a2 + 2);
    v13 = v12 == 0;
    v14 = sub_20F2C0AB0(a1 + 32);
    *(_DWORD *)v14 = -1;
    *(_BYTE *)(v14 + 4) = 1;
    *(_DWORD *)(v14 + 8) = 0;
    *(_OWORD *)(v14 + 12) = *(_OWORD *)v39;
    *(_OWORD *)(v14 + 24) = *(_OWORD *)&v39[12];
    v37 = v6;
    v38 = v14;
    v3 = sub_20F2C0848(v4, v5, (uint64_t)&v37);
    if (v13)
    {
LABEL_34:
      *(_BYTE *)(a1 + 154) = 0;
      *(_BYTE *)(a1 + 152) = 0;
      return v3;
    }
    v16 = *(char **)(a1 + 216);
    v15 = *(_QWORD *)(a1 + 224);
    if ((unint64_t)v16 < v15)
    {
      *(_DWORD *)v16 = v6;
      v17 = (uint64_t)(v16 + 4);
LABEL_33:
      *(_QWORD *)(a1 + 216) = v17;
      goto LABEL_34;
    }
    v18 = *(char **)(a1 + 208);
    v19 = (v16 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v15 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = (unsigned int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v6;
      v17 = (uint64_t)(v24 + 1);
      v26 = v16 - v18;
      if (v16 == v18)
        goto LABEL_31;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v6;
      v17 = 4 * v19 + 4;
      v26 = v16 - v18;
      if (v16 == v18)
      {
LABEL_31:
        *(_QWORD *)(a1 + 208) = v24;
        *(_QWORD *)(a1 + 216) = v17;
        *(_QWORD *)(a1 + 224) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_33;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_40;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_40;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v16[-v29];
    v24 = (unsigned int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v16 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v16 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_40:
      do
      {
        v35 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v24 = v35;
      }
      while (v16 != v18);
    }
    goto LABEL_31;
  }
  return v3;
}

char *sub_20F2C0848(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F2C0A98(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2C0AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 48 * v5;
    }
    v7 = 48 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 384;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F2C0BF0(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F2C0BF0(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

char *sub_20F2C0DB0(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  char v60;

  v6 = *a2;
  v8 = *(char **)(a1 + 104);
  v9 = *(char **)(a1 + 112);
  v7 = (_QWORD *)(a1 + 104);
  if (v8 != v9)
  {
    if (*((_QWORD *)v9 - 19) < v6)
      goto LABEL_11;
    v10 = 0x86BCA1AF286BCA1BLL * ((v9 - v8) >> 3);
    do
    {
      v11 = v10 >> 1;
      v12 = &v8[152 * (v10 >> 1)];
      v14 = *(_QWORD *)v12;
      v13 = v12 + 152;
      v10 += ~(v10 >> 1);
      if (v14 < v6)
        v8 = v13;
      else
        v10 = v11;
    }
    while (v10);
    if (v8 == v9)
    {
LABEL_11:
      v8 = *(char **)(a1 + 112);
    }
    else if (*(_QWORD *)v8 == v6)
    {
      return v9;
    }
  }
  v15 = *a4;
  v16 = (std::__shared_weak_count *)a4[1];
  v17 = *a2;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v17 = *a2;
  }
  v39 = v17;
  v40 = *(_OWORD *)(a2 + 1);
  v41 = *(_OWORD *)(a2 + 3);
  v42 = *(_OWORD *)(a2 + 5);
  v43 = a2[7];
  v46 = v15;
  v47 = v16;
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v23 = *a3;
  v24 = *(char **)(a1 + 8);
  v25 = *(char **)(a1 + 16);
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)&v24[16 * (v26 >> 1)];
      v30 = *v28;
      v29 = (char *)(v28 + 4);
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v9 = *(char **)(a1 + 112);
    v35 = v47;
    if (!v47)
      return v9;
  }
  else
  {
    v31 = *((_QWORD *)v24 + 1);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v48[0] = v6;
      v48[1] = v39;
      v49 = v40;
      v50 = v41;
      v51 = v42;
      v52 = v43;
      v53 = v31;
      v54 = v44;
      v55 = v45;
      v57 = 0;
      v56 = 0xBFF0000000000000;
      v32 = v16;
      v58 = v46;
      v59 = v16;
      v60 = 0;
      v9 = *(char **)(a1 + 112);
      if (v9 == v8 || *(_QWORD *)v8 != v6)
      {
        v9 = sub_20F2C1134(v7, v8, (uint64_t)v48);
        v32 = v59;
      }
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      *(_BYTE *)(a1 + 154) = 0;
      *(_BYTE *)(a1 + 152) = 0;
      *(int64x2_t *)(a1 + 136) = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_210378060);
      return v9;
    }
    --*(_DWORD *)(v31 + 8);
    v9 = *(char **)(a1 + 112);
    v35 = v47;
    if (!v47)
      return v9;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return v9;
}

void sub_20F2C1118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20F2B230C((uint64_t)&a28);
  sub_20F2B2374((uint64_t)&a10);
  _Unwind_Resume(a1);
}

char *sub_20F2C1134(_QWORD *a1, char *a2, uint64_t a3)
{
  char *v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  char v67;
  _QWORD *v68;

  v4 = a2;
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&a2[-*a1] >> 3);
  v9 = a1[2];
  if ((unint64_t)v6 >= v9)
  {
    v26 = 0x86BCA1AF286BCA1BLL * ((v6 - v7) >> 3) + 1;
    if (v26 > 0x1AF286BCA1AF286)
      sub_20E867F44();
    v27 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v9 - (_QWORD)v7) >> 3);
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0xD79435E50D7943)
      v28 = 0x1AF286BCA1AF286;
    else
      v28 = v26;
    *(_QWORD *)&v57 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v29 = (char *)operator new(152 * v28);
    }
    else
    {
      v29 = 0;
    }
    v54 = v29;
    v55 = &v29[152 * v8];
    *(_QWORD *)&v56 = v55;
    *((_QWORD *)&v56 + 1) = &v29[152 * v28];
    sub_20F2C17B0((uint64_t)&v54, (__n128 *)a3);
    v34 = v55;
    v35 = (char *)*a1;
    v36 = v55;
    if ((char *)*a1 != v4)
    {
      v37 = 0;
      do
      {
        v38 = &v4[v37];
        v39 = &v34[v37];
        *((_QWORD *)v39 - 19) = *(_QWORD *)&v4[v37 - 152];
        *((_QWORD *)v39 - 18) = *(_QWORD *)&v4[v37 - 144];
        *(_OWORD *)(v39 - 136) = *(_OWORD *)&v4[v37 - 136];
        v40 = *(_OWORD *)&v4[v37 - 120];
        v41 = *(_OWORD *)&v4[v37 - 104];
        *((_QWORD *)v39 - 11) = *(_QWORD *)&v4[v37 - 88];
        *(_OWORD *)(v39 - 104) = v41;
        *(_OWORD *)(v39 - 120) = v40;
        *((_QWORD *)v39 - 10) = *(_QWORD *)&v4[v37 - 80];
        *(_OWORD *)(v39 - 72) = *(_OWORD *)&v4[v37 - 72];
        *(_OWORD *)(v39 - 56) = *(_OWORD *)&v4[v37 - 56];
        v42 = *(_QWORD *)&v4[v37 - 40];
        *(v39 - 32) = v4[v37 - 32];
        *((_QWORD *)v39 - 5) = v42;
        *(_OWORD *)(v39 - 24) = *(_OWORD *)&v4[v37 - 24];
        *((_QWORD *)v38 - 3) = 0;
        *((_QWORD *)v38 - 2) = 0;
        *(v39 - 8) = v4[v37 - 8];
        v37 -= 152;
      }
      while (&v4[v37] != v35);
      v36 = &v34[v37];
    }
    v43 = (char *)a1[1];
    v44 = v56;
    if (v43 != v4)
    {
      do
      {
        *(_QWORD *)v44 = *(_QWORD *)v4;
        *(_QWORD *)(v44 + 8) = *((_QWORD *)v4 + 1);
        *(_OWORD *)(v44 + 16) = *((_OWORD *)v4 + 1);
        v45 = *((_OWORD *)v4 + 2);
        v46 = *((_OWORD *)v4 + 3);
        *(_QWORD *)(v44 + 64) = *((_QWORD *)v4 + 8);
        *(_OWORD *)(v44 + 32) = v45;
        *(_OWORD *)(v44 + 48) = v46;
        *(_QWORD *)(v44 + 72) = *((_QWORD *)v4 + 9);
        *(_OWORD *)(v44 + 80) = *((_OWORD *)v4 + 5);
        *(_OWORD *)(v44 + 96) = *((_OWORD *)v4 + 6);
        v47 = *((_QWORD *)v4 + 14);
        *(_BYTE *)(v44 + 120) = v4[120];
        *(_QWORD *)(v44 + 112) = v47;
        *(_OWORD *)(v44 + 128) = *((_OWORD *)v4 + 8);
        *((_QWORD *)v4 + 16) = 0;
        *((_QWORD *)v4 + 17) = 0;
        *(_BYTE *)(v44 + 144) = v4[144];
        v44 += 152;
        v4 += 152;
      }
      while (v4 != v43);
      v4 = (char *)a1[1];
    }
    v48 = (char *)*a1;
    *a1 = v36;
    a1[1] = v44;
    v49 = a1[2];
    a1[2] = *((_QWORD *)&v56 + 1);
    *(_QWORD *)&v56 = v4;
    *((_QWORD *)&v56 + 1) = v49;
    v54 = v48;
    v55 = v48;
    if (v4 == v48)
    {
      if (!v4)
        return v34;
    }
    else
    {
      do
      {
        *(_QWORD *)&v56 = v4 - 152;
        v51 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
        if (v51)
        {
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(p_shared_owners);
          while (__stlxr(v53 - 1, p_shared_owners));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v4 = (char *)v56;
      }
      while ((char *)v56 != v48);
      v4 = v54;
      if (!v54)
        return v34;
    }
    operator delete(v4);
    return v34;
  }
  if (a2 == v6)
  {
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v30 = &v7[152 * v8];
    *((_QWORD *)v30 + 1) = *(_QWORD *)(a3 + 8);
    *((_OWORD *)v30 + 1) = *(_OWORD *)(a3 + 16);
    v31 = *(_OWORD *)(a3 + 32);
    v32 = *(_OWORD *)(a3 + 48);
    *((_QWORD *)v30 + 8) = *(_QWORD *)(a3 + 64);
    *((_OWORD *)v30 + 2) = v31;
    *((_OWORD *)v30 + 3) = v32;
    *((_QWORD *)v30 + 9) = *(_QWORD *)(a3 + 72);
    *((_OWORD *)v30 + 5) = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v30 + 6) = *(_OWORD *)(a3 + 96);
    v33 = *(_QWORD *)(a3 + 112);
    v30[120] = *(_BYTE *)(a3 + 120);
    *((_QWORD *)v30 + 14) = v33;
    *((_OWORD *)v30 + 8) = *(_OWORD *)(a3 + 128);
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    v30[144] = *(_BYTE *)(a3 + 144);
    a1[1] = a2 + 152;
  }
  else
  {
    v68 = a1 + 2;
    v10 = *(char **)(a3 + 8);
    v54 = *(char **)a3;
    v11 = v54;
    v55 = v10;
    v12 = *(_OWORD *)(a3 + 32);
    v56 = *(_OWORD *)(a3 + 16);
    v57 = v12;
    v58 = *(_OWORD *)(a3 + 48);
    v13 = *(_QWORD *)(a3 + 72);
    v59 = *(_QWORD *)(a3 + 64);
    v60 = v13;
    v14 = *(_OWORD *)(a3 + 96);
    v61 = *(_OWORD *)(a3 + 80);
    v62 = v14;
    v63 = *(_QWORD *)(a3 + 112);
    v64 = *(_BYTE *)(a3 + 120);
    v16 = *(std::__shared_weak_count **)(a3 + 136);
    v65 = *(_QWORD *)(a3 + 128);
    v15 = v65;
    v66 = v16;
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    v67 = *(_BYTE *)(a3 + 144);
    sub_20F2C1628((uint64_t)a1, (uint64_t)a2, a1[1], (uint64_t)(a2 + 152));
    *(_QWORD *)v4 = v11;
    v17 = &v7[152 * v8];
    *((_QWORD *)v17 + 1) = v10;
    *((_OWORD *)v17 + 1) = v56;
    v18 = v58;
    v19 = v59;
    *((_OWORD *)v17 + 2) = v57;
    *((_OWORD *)v17 + 3) = v18;
    *((_QWORD *)v17 + 8) = v19;
    *((_QWORD *)v17 + 9) = v13;
    *((_OWORD *)v17 + 5) = v61;
    *((_OWORD *)v17 + 6) = v62;
    v20 = v63;
    v17[120] = v64;
    *((_QWORD *)v17 + 14) = v20;
    v65 = 0;
    v66 = 0;
    v21 = (std::__shared_weak_count *)*((_QWORD *)v17 + 17);
    *((_QWORD *)v17 + 16) = v15;
    *((_QWORD *)v17 + 17) = v16;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v7[152 * v8 + 144] = v67;
    if (v66)
    {
      v24 = &v66->__shared_owners_;
      do
        v25 = __ldaxr((unint64_t *)v24);
      while (__stlxr(v25 - 1, (unint64_t *)v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  return v4;
}

void sub_20F2C1600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F2B230C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2C1614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F2C1AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2C1628(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 + v5 - a4;
  v7 = v5;
  if (v6 < a3)
  {
    v8 = a2 + v5 - a4;
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
      v9 = *(_OWORD *)(v8 + 32);
      v10 = *(_OWORD *)(v8 + 48);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
      *(_OWORD *)(v7 + 32) = v9;
      *(_OWORD *)(v7 + 48) = v10;
      *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
      v11 = *(_QWORD *)(v8 + 112);
      *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
      *(_QWORD *)(v7 + 112) = v11;
      *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
      *(_QWORD *)(v8 + 128) = 0;
      *(_QWORD *)(v8 + 136) = 0;
      *(_BYTE *)(v7 + 144) = *(_BYTE *)(v8 + 144);
      v7 += 152;
      v8 += 152;
    }
    while (v8 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v5 != a4)
  {
    v12 = a2 + v5 - a4;
    v13 = v5;
    do
    {
      v14 = *(_QWORD *)(v12 - 152);
      v12 -= 152;
      *(_QWORD *)(v13 - 152) = v14;
      v13 -= 152;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
      *(_OWORD *)(v13 + 16) = *(_OWORD *)(v12 + 16);
      v15 = *(_OWORD *)(v12 + 32);
      v16 = *(_OWORD *)(v12 + 48);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v12 + 64);
      *(_OWORD *)(v13 + 32) = v15;
      *(_OWORD *)(v13 + 48) = v16;
      *(_QWORD *)(v13 + 72) = *(_QWORD *)(v12 + 72);
      *(_OWORD *)(v13 + 80) = *(_OWORD *)(v12 + 80);
      *(_OWORD *)(v13 + 96) = *(_OWORD *)(v12 + 96);
      v17 = *(_QWORD *)(v12 + 112);
      *(_BYTE *)(v13 + 120) = *(_BYTE *)(v12 + 120);
      *(_QWORD *)(v13 + 112) = v17;
      v18 = *(_OWORD *)(v12 + 128);
      *(_QWORD *)(v12 + 128) = 0;
      *(_QWORD *)(v12 + 136) = 0;
      v19 = *(std::__shared_weak_count **)(v13 + 136);
      *(_OWORD *)(v13 + 128) = v18;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      *(_BYTE *)(v5 - 8) = *(_BYTE *)(v6 - 8);
      v5 = v13;
      v6 = v12;
    }
    while (v12 != a2);
  }
}

__n128 sub_20F2C17B0(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;
  __n128 result;

  v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    v5 = *(__n128 **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 <= *(_QWORD *)a1)
    {
      v19 = 0xD79435E50D79436 * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5)
        v19 = 1;
      if (v19 >= 0x1AF286BCA1AF287)
        sub_20E877A38();
      v20 = v19 >> 2;
      v21 = 152 * v19;
      v22 = (char *)operator new(152 * v19);
      v23 = &v22[152 * v20];
      v24 = &v22[v21];
      if (v4 == (__n128 *)v6)
      {
        *(_QWORD *)a1 = v22;
        *(_QWORD *)(a1 + 8) = v23;
        *(_QWORD *)(a1 + 16) = v23;
        *(_QWORD *)(a1 + 24) = v24;
      }
      else
      {
        v25 = (char *)v4 + (_QWORD)v23 - v6;
        v26 = 152 * v20;
        do
        {
          v27 = &v22[v26];
          *(_QWORD *)v27 = *(_QWORD *)v6;
          *((_QWORD *)v27 + 1) = *(_QWORD *)(v6 + 8);
          *((_OWORD *)v27 + 1) = *(_OWORD *)(v6 + 16);
          v28 = *(_OWORD *)(v6 + 32);
          v29 = *(_OWORD *)(v6 + 48);
          *((_QWORD *)v27 + 8) = *(_QWORD *)(v6 + 64);
          *((_OWORD *)v27 + 2) = v28;
          *((_OWORD *)v27 + 3) = v29;
          *((_QWORD *)v27 + 9) = *(_QWORD *)(v6 + 72);
          *((_OWORD *)v27 + 5) = *(_OWORD *)(v6 + 80);
          *((_OWORD *)v27 + 6) = *(_OWORD *)(v6 + 96);
          v30 = *(_QWORD *)(v6 + 112);
          v27[120] = *(_BYTE *)(v6 + 120);
          *((_QWORD *)v27 + 14) = v30;
          *((_OWORD *)v27 + 8) = *(_OWORD *)(v6 + 128);
          *(_QWORD *)(v6 + 128) = 0;
          *(_QWORD *)(v6 + 136) = 0;
          v27[144] = *(_BYTE *)(v6 + 144);
          v26 += 152;
          v6 += 152;
        }
        while (v27 + 152 != v25);
        v5 = *(__n128 **)a1;
        v31 = *(_QWORD *)(a1 + 8);
        v32 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v22;
        *(_QWORD *)(a1 + 8) = v23;
        *(_QWORD *)(a1 + 16) = v25;
        *(_QWORD *)(a1 + 24) = v24;
        while (v32 != v31)
        {
          v33 = *(std::__shared_weak_count **)(v32 - 16);
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v32 -= 152;
        }
      }
      if (v5)
        operator delete(v5);
      v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - *(_QWORD *)a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      v11 = v6 - 152 * v9;
      if ((__n128 *)v6 != v4)
      {
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v6;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v6 + 8);
          *(_OWORD *)(v11 + 16) = *(_OWORD *)(v6 + 16);
          v12 = *(_OWORD *)(v6 + 32);
          v13 = *(_OWORD *)(v6 + 48);
          *(_QWORD *)(v11 + 64) = *(_QWORD *)(v6 + 64);
          *(_OWORD *)(v11 + 32) = v12;
          *(_OWORD *)(v11 + 48) = v13;
          *(_QWORD *)(v11 + 72) = *(_QWORD *)(v6 + 72);
          *(_OWORD *)(v11 + 80) = *(_OWORD *)(v6 + 80);
          *(_OWORD *)(v11 + 96) = *(_OWORD *)(v6 + 96);
          v14 = *(_QWORD *)(v6 + 112);
          *(_BYTE *)(v11 + 120) = *(_BYTE *)(v6 + 120);
          *(_QWORD *)(v11 + 112) = v14;
          v15 = *(_OWORD *)(v6 + 128);
          *(_QWORD *)(v6 + 128) = 0;
          *(_QWORD *)(v6 + 136) = 0;
          v16 = *(std::__shared_weak_count **)(v11 + 136);
          *(_OWORD *)(v11 + 128) = v15;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          *(_BYTE *)(v11 + 144) = *(_BYTE *)(v6 + 144);
          v6 += 152;
          v11 += 152;
        }
        while ((__n128 *)v6 != v4);
        v4 = *(__n128 **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 8) = (char *)v4 + 152 * v10;
      *(_QWORD *)(a1 + 16) = v11;
      v4 = (__n128 *)v11;
    }
  }
  v4->n128_u64[0] = a2->n128_u64[0];
  v4->n128_u64[1] = a2->n128_u64[1];
  v4[1] = a2[1];
  v36 = a2[2];
  v37 = a2[3];
  v4[4].n128_u64[0] = a2[4].n128_u64[0];
  v4[2] = v36;
  v4[3] = v37;
  v4[4].n128_u64[1] = a2[4].n128_u64[1];
  v4[5] = a2[5];
  v4[6] = a2[6];
  v38 = a2[7].n128_u64[0];
  v4[7].n128_u8[8] = a2[7].n128_u8[8];
  v4[7].n128_u64[0] = v38;
  result = a2[8];
  v4[8] = result;
  a2[8].n128_u64[0] = 0;
  a2[8].n128_u64[1] = 0;
  v4[9].n128_u8[0] = a2[9].n128_u8[0];
  *(_QWORD *)(a1 + 16) += 152;
  return result;
}

uint64_t sub_20F2C1AD8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F2C1B64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F2C1B74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2C1BA4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20F2C1BB8()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2C1BCC()
{
  return 2;
}

float64x2_t sub_20F2C1BD4(uint64_t a1, float64x2_t *a2)
{
  float64x2_t result;

  result = vmulq_n_f64(*a2, *(double *)(a1 + 16));
  *a2 = result;
  return result;
}

float64x2_t sub_20F2C1BE8(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  float64x2_t result;

  result = vmulq_n_f64(*a2, *(double *)(a1 + 16));
  *a3 = result;
  return result;
}

float64x2_t sub_20F2C1BFC(uint64_t a1, float64x2_t *a2)
{
  const double *v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = (const double *)(a1 + 16);
  v3 = vld1q_dup_f64(v2);
  result = vdivq_f64(*a2, v3);
  *a2 = result;
  return result;
}

float64x2_t sub_20F2C1C14(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  const double *v3;
  float64x2_t v4;
  float64x2_t result;

  v3 = (const double *)(a1 + 16);
  v4 = vld1q_dup_f64(v3);
  result = vdivq_f64(*a2, v4);
  *a3 = result;
  return result;
}

double sub_20F2C1C2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = result;
  return result;
}

double sub_20F2C1C40@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double result;

  result = *(double *)(a1 + 16) * a3;
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = result;
  return result;
}

double sub_20F2C1C58@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16) * *(double *)(a1 + 16);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = result;
  return result;
}

double sub_20F2C1C70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 1.0 / (*(double *)(a1 + 16) * *(double *)(a1 + 16));
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = result;
  return result;
}

void sub_20F2C1C90(_QWORD *a1)
{
  sub_20F2C539C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F2C1CB4(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "LevenbergMarquardt");
}

uint64_t sub_20F2C1CDC()
{
  return 1;
}

double sub_20F2C1CE4(uint64_t a1)
{
  return *(double *)(a1 + 816);
}

uint64_t sub_20F2C1CEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 784);
}

double sub_20F2C1CF4(double *a1, double a2)
{
  double result;

  a1[102] = a1[96] * a2;
  result = a1[100];
  a1[103] = result;
  return result;
}

double sub_20F2C1D0C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 776);
  result = *(double *)(a1 + 800);
  *(double *)(a1 + 824) = result;
  return result;
}

uint64_t sub_20F2C1D20(uint64_t result, double a2, double a3, double a4, double a5)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  std::locale v17;

  if (*(_BYTE *)(result + 16))
  {
    sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[iter][old->new][delta < ptol][grad < gtol][delta < ctol][lambda][", 66);
    v7 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v7, (uint64_t)"][", 2);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v8, (uint64_t)"->", 2);
    v9 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v9, (uint64_t)"][", 2);
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v10, (uint64_t)" < ", 3);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v11, (uint64_t)"][", 2);
    if (a5 == 0.0)
      sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
    else
      std::ostream::operator<<();
    sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
    v12 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v12, (uint64_t)"][", 2);
    if (a2 == 0.0)
      sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
    else
      std::ostream::operator<<();
    sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
    v13 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v13, (uint64_t)"][", 2);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = sub_20E86A980(v14, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v17, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_20F2C1F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_20F2C1F64(uint64_t a1, uint64_t a2, double **a3, double a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  unint64_t v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double *v20;
  unint64_t v21;
  double *v22;
  unint64_t v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v4 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v4)
  {
    v7 = 0.0;
    v8 = 0.0;
    goto LABEL_18;
  }
  v5 = *(double **)a2;
  v6 = **(double **)a2;
  v7 = v6 * v6;
  if ((_DWORD)v4 == 1)
  {
    v8 = v6 * **a3;
    goto LABEL_18;
  }
  v9 = &v5[v4];
  v10 = v5 + 1;
  v11 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  if (v11 < 3)
  {
    v12 = v5 + 1;
    do
    {
LABEL_10:
      v19 = *v12++;
      v7 = v7 + v19 * v19;
    }
    while (v12 != v9);
    goto LABEL_11;
  }
  v13 = v11 + 1;
  v14 = (v11 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v12 = &v10[v14];
  v15 = (float64x2_t *)(v5 + 3);
  v16 = v14;
  do
  {
    v17 = vmulq_f64(v15[-1], v15[-1]);
    v18 = vmulq_f64(*v15, *v15);
    v7 = v7 + v17.f64[0] + v17.f64[1] + v18.f64[0] + v18.f64[1];
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v13 != v14)
    goto LABEL_10;
LABEL_11:
  v20 = *a3;
  v8 = v6 * **a3;
  v21 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  if (v21 < 3)
  {
    v22 = *a3;
LABEL_16:
    v30 = v22 + 1;
    do
    {
      v31 = *v10++;
      v32 = v31;
      v33 = *v30++;
      v8 = v8 + v32 * v33;
    }
    while (v10 != v9);
    goto LABEL_18;
  }
  v23 = v21 + 1;
  v24 = (v21 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v10 += v24;
  v22 = &v20[v24];
  v25 = (float64x2_t *)(v20 + 3);
  v26 = (float64x2_t *)(v5 + 3);
  v27 = v24;
  do
  {
    v28 = vmulq_f64(v26[-1], v25[-1]);
    v29 = vmulq_f64(*v26, *v25);
    v8 = v8 + v28.f64[0] + v28.f64[1] + v29.f64[0] + v29.f64[1];
    v25 += 2;
    v26 += 2;
    v27 -= 4;
  }
  while (v27);
  if (v23 != v24)
    goto LABEL_16;
LABEL_18:
  v34 = *(double *)(a1 + 816);
  v35 = *(double *)(a1 + 736) - a4;
  if (v35 < 0.0)
  {
    v39 = *(double *)(a1 + 824);
    *(double *)(a1 + 816) = v34 * v39;
    *(double *)(a1 + 824) = v39 * *(double *)(a1 + 808);
    return 0;
  }
  else
  {
    v36 = *(double *)(a1 + 792) * (fabs(v34 * v7) + fabs(v8));
    if (v36 <= 0.0)
    {
      v38 = 0.333333333;
    }
    else
    {
      v37 = 1.0 - (v35 / v36 + v35 / v36 + -1.0) * ((v35 / v36 + v35 / v36 + -1.0) * (v35 / v36 + v35 / v36 + -1.0));
      if (v37 > 0.666666667)
        v37 = 0.666666667;
      v38 = fmax(v37, 0.333333333);
    }
    *(double *)(a1 + 816) = v34 * v38;
    *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 800);
    *(double *)(a1 + 736) = a4;
    return v35 >= 0.0;
  }
}

BOOL sub_20F2C2190(uint64_t a1, uint64_t a2, double **a3, double **a4, double a5)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  unint64_t v13;
  double *v14;
  double *v15;
  unint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  unint64_t v28;
  double *v29;
  unint64_t v30;
  uint64_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;

  v5 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v5)
  {
    v9 = 0.0;
    v10 = 0.0;
    goto LABEL_19;
  }
  v6 = *(double **)a2;
  v7 = *a4;
  v8 = **(double **)a2;
  v9 = v8 * v8 * **a4;
  if ((_DWORD)v5 == 1)
  {
    v10 = v8 * **a3;
    goto LABEL_19;
  }
  v11 = &v6[v5];
  v12 = v6 + 1;
  v13 = (v5 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  if (v13 < 3)
  {
    v14 = v6 + 1;
    v15 = *a4;
LABEL_10:
    v23 = v15 + 1;
    do
    {
      v24 = *v14++;
      v25 = v24 * v24;
      v26 = *v23++;
      v9 = v9 + v25 * v26;
    }
    while (v14 != v11);
    goto LABEL_12;
  }
  v16 = v13 + 1;
  v17 = (v13 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v14 = &v12[v17];
  v15 = &v7[v17];
  v18 = (float64x2_t *)(v7 + 3);
  v19 = (float64x2_t *)(v6 + 3);
  v20 = v17;
  do
  {
    v21 = vmulq_f64(vmulq_f64(v19[-1], v19[-1]), v18[-1]);
    v22 = vmulq_f64(vmulq_f64(*v19, *v19), *v18);
    v9 = v9 + v21.f64[0] + v21.f64[1] + v22.f64[0] + v22.f64[1];
    v18 += 2;
    v19 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v16 != v17)
    goto LABEL_10;
LABEL_12:
  v27 = *a3;
  v10 = v8 * **a3;
  v28 = (v5 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  if (v28 < 3)
  {
    v29 = *a3;
LABEL_17:
    v37 = v29 + 1;
    do
    {
      v38 = *v12++;
      v39 = v38;
      v40 = *v37++;
      v10 = v10 + v39 * v40;
    }
    while (v12 != v11);
    goto LABEL_19;
  }
  v30 = v28 + 1;
  v31 = (v28 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v12 += v31;
  v29 = &v27[v31];
  v32 = (float64x2_t *)(v27 + 3);
  v33 = (float64x2_t *)(v6 + 3);
  v34 = v31;
  do
  {
    v35 = vmulq_f64(v33[-1], v32[-1]);
    v36 = vmulq_f64(*v33, *v32);
    v10 = v10 + v35.f64[0] + v35.f64[1] + v36.f64[0] + v36.f64[1];
    v32 += 2;
    v33 += 2;
    v34 -= 4;
  }
  while (v34);
  if (v30 != v31)
    goto LABEL_17;
LABEL_19:
  v41 = *(double *)(a1 + 816);
  v42 = *(double *)(a1 + 736) - a5;
  if (v42 < 0.0)
  {
    v46 = *(double *)(a1 + 824);
    *(double *)(a1 + 816) = v41 * v46;
    *(double *)(a1 + 824) = v46 * *(double *)(a1 + 808);
    return 0;
  }
  else
  {
    v43 = *(double *)(a1 + 792) * (fabs(v41 * v9) + fabs(v10));
    if (v43 <= 0.0)
    {
      v45 = 0.333333333;
    }
    else
    {
      v44 = 1.0 - (v42 / v43 + v42 / v43 + -1.0) * ((v42 / v43 + v42 / v43 + -1.0) * (v42 / v43 + v42 / v43 + -1.0));
      if (v44 > 0.666666667)
        v44 = 0.666666667;
      v45 = fmax(v44, 0.333333333);
    }
    *(double *)(a1 + 816) = v41 * v45;
    *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 800);
    *(double *)(a1 + 736) = a5;
    return v42 >= 0.0;
  }
}

uint64_t sub_20F2C23FC()
{
  return 0;
}

uint64_t sub_20F2C2404()
{
  return 1;
}

uint64_t sub_20F2C240C(double a1, double a2, double a3, double a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[iter][old->new][delta < ptol][grad < gtol][delta < ctol][", 58);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v6, (uint64_t)"][", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v7, (uint64_t)"->", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)"][", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v9, (uint64_t)" < ", 3);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v10, (uint64_t)"][", 2);
  if (a4 == 0.0)
    sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
  else
    std::ostream::operator<<();
  sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v11, (uint64_t)"][", 2);
  if (a1 == 0.0)
    sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
  else
    std::ostream::operator<<();
  sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_20E86A980(v12, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20F2C261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2C2630(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  sub_20F2C2890(a1 + 56, (uint64_t)a2 + 56);
  *(_WORD *)(a1 + 592) = *((_WORD *)a2 + 296);
  v7 = *((_QWORD *)a2 + 78);
  if (!v7)
    goto LABEL_4;
  if ((__int128 *)v7 != (__int128 *)((char *)a2 + 600))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    *(_QWORD *)(a1 + 624) = v7;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 624) = a1 + 600;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 78) + 24))(*((_QWORD *)a2 + 78), a1 + 600);
LABEL_6:
  v8 = *((_QWORD *)a2 + 82);
  if (!v8)
  {
LABEL_9:
    *(_QWORD *)(a1 + 656) = v8;
    goto LABEL_11;
  }
  if ((__int128 *)v8 != (__int128 *)((char *)a2 + 632))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 656) = a1 + 632;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 82) + 24))(*((_QWORD *)a2 + 82), a1 + 632);
LABEL_11:
  v9 = *((_QWORD *)a2 + 86);
  if (!v9)
  {
LABEL_14:
    *(_QWORD *)(a1 + 688) = v9;
    goto LABEL_16;
  }
  if ((__int128 *)v9 != (__int128 *)((char *)a2 + 664))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 688) = a1 + 664;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 86) + 24))(*((_QWORD *)a2 + 86), a1 + 664);
LABEL_16:
  v10 = *((_QWORD *)a2 + 90);
  if (!v10)
  {
LABEL_19:
    *(_QWORD *)(a1 + 720) = v10;
    return a1;
  }
  if ((__int128 *)v10 != (__int128 *)((char *)a2 + 696))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 720) = a1 + 696;
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 90) + 24))(*((_QWORD *)a2 + 90));
  return a1;
}

void sub_20F2C27B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (_QWORD *)v1[86];
  if (v7 == v5)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
    v5 = (_QWORD *)v1[86];
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v8))(v5);
LABEL_6:
  v9 = (_QWORD *)v1[82];
  if (v9 == v4)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
    v4 = (_QWORD *)v1[82];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v10))(v4);
LABEL_11:
  v11 = (_QWORD *)v1[78];
  if (v11 == v3)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_16;
    v12 = 5;
    v3 = (_QWORD *)v1[78];
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v12))(v3);
LABEL_16:
  v1[73] = 0;
  v13 = v1[71];
  if (v13 != v2)
  {
    if (v13)
      MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2C2890(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)(a1 + 512) = a1;
  *(_OWORD *)(a1 + 520) = xmmword_210378040;
  v3 = *(char **)(a2 + 512);
  v4 = v3;
  v5 = *(_QWORD *)(a2 + 528);
  v6 = v5 & 0x1FFFFFFFFFFFFFFFLL;
  if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) < 0x41)
  {
    v7 = (_OWORD *)a1;
    if (!v5)
      return a1;
  }
  else
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)(a1 + 520) = v6;
    v7 = (_OWORD *)operator new[]();
    v8 = *(_QWORD *)(a1 + 512);
    if (v8 != a1 && v8 != 0)
      MEMORY[0x212BC6368]();
    *(_QWORD *)(a1 + 512) = v7;
    v10 = *(_QWORD *)(a1 + 528);
    if (v10)
    {
      *(_QWORD *)(a1 + 528) = v10 + v5;
      memmove((char *)v7 + 8 * v5, v7, 8 * v10);
      memmove(v7, v3, 8 * v5);
      return a1;
    }
  }
  v12 = 0;
  v13 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v13 < 3)
    goto LABEL_22;
  if ((unint64_t)((char *)v7 - v3) < 0x20)
    goto LABEL_22;
  v14 = v13 + 1;
  v12 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  v4 = &v3[8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
  v15 = v7 + 1;
  v16 = (__int128 *)(v3 + 16);
  v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v18 = *v16;
    *(v15 - 1) = *(v16 - 1);
    *v15 = v18;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v14 != v12)
  {
LABEL_22:
    do
    {
      v19 = *(_QWORD *)v4;
      v4 += 8;
      *((_QWORD *)v7 + v12++) = v19;
    }
    while (v4 != &v3[8 * v5]);
  }
  *(_QWORD *)(a1 + 528) = v12;
  return a1;
}

void sub_20F2C2A08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 512);
  if (v3 != v1 && v3 != 0)
    MEMORY[0x212BC6368]();
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2C2A38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v7;
  char v8;
  uint64_t v14;
  double v15;
  char v16;
  int v17;
  uint64_t v18;
  double v19;
  float64x2_t v20;
  uint64_t v21;
  double v22;
  double v23;
  int v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  double v27;
  uint64_t *v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  double **v46;
  uint64_t v47;
  double v48;
  double *v49;
  uint64_t v50;
  double v51;
  double v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  _QWORD *v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  double v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  double *v65;
  double v66;
  double *v67;
  unint64_t v68;
  unint64_t v69;
  float64x2_t *v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double *v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  double v82;
  double v83;
  int v84;
  float64x2_t v85;
  double v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double *v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t locale;
  double v98;
  _QWORD *v99;
  _QWORD *v100;
  const std::locale::facet *v101;
  _QWORD *v103;
  const std::locale::facet *v104;
  _QWORD *v105;
  _QWORD *v106;
  const std::locale::facet *v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  int v110;
  _QWORD *v111;
  const std::locale::facet *v112;
  _QWORD *v113;
  uint64_t v114;
  char v115;
  char v117;
  void *__p[2];
  uint64_t v119;
  std::locale v120[2];
  uint64_t v121;
  double __dst[2];

  kdebug_trace();
  kdebug_trace();
  (*(void (**)(std::locale *__return_ptr, uint64_t *))(*a1 + 16))(v120, a1);
  (**(void (***)(void **__return_ptr, uint64_t))a2)(__p, a2);
  if (SHIBYTE(v121) < 0)
  {
    sub_20E860C04((_BYTE *)a4, v120[0].__locale_, (unint64_t)v120[1].__locale_);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)&v120[0].__locale_;
    *(_QWORD *)(a4 + 16) = v121;
  }
  v7 = (_BYTE *)(a4 + 24);
  v8 = HIBYTE(v119);
  if (SHIBYTE(v119) < 0)
  {
    sub_20E860C04(v7, __p[0], (unint64_t)__p[1]);
    v8 = HIBYTE(v119);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)__p;
    *(_QWORD *)(a4 + 40) = v119;
  }
  *(_QWORD *)(a4 + 48) = 0;
  *(_DWORD *)(a4 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a4 + 64) = _Q0;
  *(_QWORD *)(a4 + 592) = a4 + 80;
  *(_OWORD *)(a4 + 600) = xmmword_210378040;
  v14 = a4 + 616;
  *(_QWORD *)(a4 + 1128) = a4 + 616;
  *(_QWORD *)(a4 + 1136) = 64;
  *(_OWORD *)(a4 + 1144) = 0u;
  *(_QWORD *)(a4 + 1672) = a4 + 1160;
  *(_QWORD *)(a4 + 1680) = 64;
  *(_QWORD *)(a4 + 1688) = 0;
  *(_QWORD *)(a4 + 1704) = 0;
  *(_QWORD *)(a4 + 1696) = 0;
  *(_QWORD *)(a4 + 2224) = a4 + 1712;
  *(_QWORD *)(a4 + 2232) = 64;
  *(_QWORD *)(a4 + 2240) = 0;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v121) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((SHIBYTE(v121) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v120[0].__locale_);
LABEL_9:
  sub_20F2C3BE8((_QWORD *)a4, 1uLL, 1uLL);
  __p[0] = (void *)a2;
  __p[1] = (void *)a4;
  v117 = 0;
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v16 = *(_BYTE *)(a2 + 312);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
  {
    *(_BYTE *)(a2 + 312) = 1;
    v17 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    v18 = *a1;
    if (v17)
      (*(void (**)(uint64_t *, double))(v18 + 48))(a1, 0.0);
    else
      (*(void (**)(uint64_t *))(v18 + 56))(a1);
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  }
  kdebug_trace();
  if (*((_BYTE *)a1 + 48))
  {
    v21 = a1[74];
    if (*((_BYTE *)a1 + 601))
    {
      if (v21)
      {
        sub_20F2C43A4(a2, (uint64_t)v120, (uint64_t *)a1[72], v19, v20);
        goto LABEL_24;
      }
    }
    else if (v21)
    {
      v120[0].__locale_ = (std::locale::__imp *)a1[72];
      LODWORD(v120[1].__locale_) = 0;
      sub_20F2C4A08(a2, (uint64_t)__dst, (uint64_t)v120, v19, v20);
      v22 = __dst[0];
      if (__dst[0] > 0.0)
      {
LABEL_25:
        v23 = 1.0 / (v22 * v22);
        goto LABEL_26;
      }
LABEL_22:
      v23 = 1.0e20;
      v22 = 1.0e-10;
LABEL_26:
      *(double *)(a2 + 8) = v22;
      *(double *)(a2 + 16) = v23;
      *(_BYTE *)(a2 + 301) = 0;
      *(_DWORD *)(a2 + 296) = 0;
      goto LABEL_27;
    }
    sub_20F2C43A4(a2, (uint64_t)v120, a1 + 7, v19, v20);
LABEL_24:
    v22 = *(double *)&v120[0].__locale_;
    if (*(double *)&v120[0].__locale_ > 0.0)
      goto LABEL_25;
    goto LABEL_22;
  }
LABEL_27:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2))
  {
    v24 = *((unsigned __int8 *)a1 + 16);
    if (*((_BYTE *)a1 + 16))
    {
      v25 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
      v26 = std::locale::use_facet(v120, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(v120);
      std::ostream::put();
      std::ostream::flush();
      v24 = 0;
    }
LABEL_146:
    *(_DWORD *)(a4 + 56) = v24;
    goto LABEL_147;
  }
  v117 = 1;
  v120[0] = (std::locale)__p[0];
  sub_20F2C4C68((uint64_t)v120, (_QWORD *)__p[1] + 145, (_QWORD *)__p[1] + 144);
  __dst[0] = *(double *)__p;
  sub_20F2C4E38(__dst, (_QWORD *)__p[1] + 214, (_QWORD *)__p[1] + 212, (_QWORD *)__p[1] + 213);
  v27 = sub_20F2C4058(a2, (_QWORD *)(a4 + 80));
  v28 = (uint64_t *)(a4 + 1144);
  *(double *)(a4 + 64) = v27;
  *(double *)(a4 + 72) = v27;
  *((double *)a1 + 92) = v27;
  v29 = *(__int128 **)(a4 + 592);
  v30 = *(_QWORD *)(a4 + 608);
  *(_QWORD *)(a4 + 1144) = 0;
  v31 = v30 & 0x1FFFFFFFFFFFFFFFLL;
  v32 = *(_QWORD *)(a4 + 1136);
  if ((v30 & 0x1FFFFFFFFFFFFFFFuLL) <= v32)
  {
    if (!v30)
      goto LABEL_49;
    v34 = *(_OWORD **)(a4 + 1128);
  }
  else
  {
    v33 = 2 * v32;
    if (v33 > v31)
      v31 = v33;
    *(_QWORD *)(a4 + 1136) = v31;
    v34 = (_OWORD *)operator new[]();
    v35 = *(_QWORD *)(a4 + 1128);
    if (v35 != v14 && v35)
      MEMORY[0x212BC6368](v35, 0x1000C8000313F17);
    *(_QWORD *)(a4 + 1128) = v34;
    v36 = *(_QWORD *)(a4 + 1144);
    if (v36)
    {
      *v28 = v36 + v30;
      memmove((char *)v34 + 8 * v30, v34, 8 * v36);
      memcpy(v34, v29, 8 * v30);
      goto LABEL_49;
    }
  }
  v37 = 0;
  v38 = (v30 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v38 < 3)
  {
    v39 = (uint64_t *)v29;
  }
  else
  {
    v39 = (uint64_t *)v29;
    if ((unint64_t)((char *)v34 - (char *)v29) >= 0x20)
    {
      v40 = v38 + 1;
      v37 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      v39 = (uint64_t *)v29 + (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v41 = v34 + 1;
      v42 = v29 + 1;
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 += 2;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
      if (v40 == v37)
        goto LABEL_48;
    }
  }
  do
  {
    v45 = *v39++;
    *((_QWORD *)v34 + v37++) = v45;
  }
  while (v39 != (uint64_t *)((char *)v29 + 8 * v30));
LABEL_48:
  *v28 = v37;
LABEL_49:
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 40))(a1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
    }
    else
    {
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  }
  v46 = (double **)(a2 + 336);
  v47 = *(unsigned int *)(a2 + 352);
  if ((_DWORD)v47)
  {
    v48 = fabs(**v46);
    if ((_DWORD)v47 != 1)
    {
      v49 = *v46 + 1;
      v50 = 8 * v47 - 8;
      do
      {
        v51 = *v49++;
        v52 = fabs(v51);
        if (v48 < v52)
          v48 = v52;
        v50 -= 8;
      }
      while (v50);
    }
    if (v48 < v48 * *((double *)a1 + 3))
      goto LABEL_61;
  }
  else
  {
    v48 = 1.0;
    if (1.0 * *((double *)a1 + 3) > 1.0)
    {
LABEL_61:
      if (*((_BYTE *)a1 + 16))
      {
        v53 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
        v54 = std::locale::use_facet(v120, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
        sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
        v55 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v55, (uint64_t)"][", 2);
        if (v48 == 0.0)
          sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
        else
          std::ostream::operator<<();
        sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
        v99 = (_QWORD *)std::ostream::operator<<();
        v100 = sub_20E86A980(v99, (uint64_t)"]", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(_QWORD *)(*v100 - 24)));
        v101 = std::locale::use_facet(v120, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
      }
      v24 = 1;
      goto LABEL_146;
    }
  }
  v56 = *((double *)a1 + 92);
  kdebug_trace();
  v115 = v16;
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v58 = a1[83];
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58);
  v59 = atomic_load(a3);
  if ((v59 & 1) == 0)
  {
    v60 = v48;
    do
    {
      v62 = *(unsigned int *)(a4 + 48);
      if (v62 >= *((_DWORD *)a1 + 3))
        break;
      v63 = v62 + 1;
      *(_DWORD *)(a4 + 48) = v62 + 1;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v57))
      {
        if (*((_BYTE *)a1 + 16))
        {
          v103 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
          std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(*v103 - 24)));
          v104 = std::locale::use_facet(v120, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
          std::locale::~locale(v120);
          std::ostream::put();
          std::ostream::flush();
        }
        *(_DWORD *)(a4 + 56) = 0;
        break;
      }
      ++*(_DWORD *)(a4 + 52);
      v64 = *(unsigned int *)(v57 + 16);
      if ((_DWORD)v64)
      {
        v65 = *(double **)v57;
        v66 = **(double **)v57 * **(double **)v57;
        if ((_DWORD)v64 != 1)
        {
          v67 = v65 + 1;
          v68 = (v64 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
          if (v68 < 3)
            goto LABEL_78;
          v69 = v68 + 1;
          v67 += v69 & 0x3FFFFFFFFFFFFFFCLL;
          v70 = (float64x2_t *)(v65 + 3);
          v71 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v72 = vmulq_f64(v70[-1], v70[-1]);
            v73 = vmulq_f64(*v70, *v70);
            v66 = v66 + v72.f64[0] + v72.f64[1] + v73.f64[0] + v73.f64[1];
            v70 += 2;
            v71 -= 4;
          }
          while (v71);
          if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_78:
            v74 = &v65[v64];
            do
            {
              v75 = *v67++;
              v66 = v66 + v75 * v75;
            }
            while (v67 != v74);
          }
        }
        v76 = sqrt(v66);
        if (v62 < *((_DWORD *)a1 + 2))
          goto LABEL_88;
      }
      else
      {
        v76 = sqrt(0.0);
        if (v62 < *((_DWORD *)a1 + 2))
          goto LABEL_88;
      }
      v77 = a1[91];
      if (v77)
      {
        LODWORD(v120[0].__locale_) = *(_DWORD *)(v57 + 16);
        v120[1] = *(std::locale *)v57;
        LODWORD(v121) = 0;
        __dst[0] = v76;
        if (((*(uint64_t (**)(uint64_t, double *, std::locale *))(*(_QWORD *)v77 + 48))(v77, __dst, v120) & 1) != 0)
          goto LABEL_159;
      }
      else if ((_DWORD)v64 && v76 < *((double *)a1 + 4) * (v15 + *((double *)a1 + 4)))
      {
LABEL_159:
        if (*((_BYTE *)a1 + 16))
        {
          v111 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
          std::ios_base::getloc((const std::ios_base *)((char *)v111 + *(_QWORD *)(*v111 - 24)));
          v112 = std::locale::use_facet(v120, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
          std::locale::~locale(v120);
          std::ostream::put();
          std::ostream::flush();
          (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*a1 + 64))(a1, v62, v56, v76, v60, v48, v15);
        }
        v110 = 2;
        goto LABEL_165;
      }
LABEL_88:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v57);
      v78 = a1[87];
      if (v78)
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 48))(v78);
      if (*v28)
        memcpy(__dst, *(const void **)(a4 + 1128), 8 * *v28);
      v56 = sub_20F2C4058(a2, (_QWORD *)(a4 + 616));
      v79 = *(unsigned int *)(a2 + 352);
      if (!(_DWORD)v79)
      {
        v60 = 1.0;
        if (!*((_BYTE *)a1 + 16))
          goto LABEL_102;
LABEL_101:
        (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*a1 + 64))(a1, v62, v56, v76, v60, v48, v15);
        goto LABEL_102;
      }
      v60 = fabs(**v46);
      if ((_DWORD)v79 != 1)
      {
        v80 = *v46 + 1;
        v81 = 8 * v79 - 8;
        do
        {
          v82 = *v80++;
          v83 = fabs(v82);
          if (v60 < v83)
            v60 = v83;
          v81 -= 8;
        }
        while (v81);
      }
      if (*((_BYTE *)a1 + 16))
        goto LABEL_101;
LABEL_102:
      if (v56 == 0.0)
      {
        if (*((_BYTE *)a1 + 16))
        {
          v105 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v106 = sub_20E86A980(v105, (uint64_t)"N.A.", 4);
          std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(_QWORD *)(*v106 - 24)));
          v107 = std::locale::use_facet(v120, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
          std::locale::~locale(v120);
          std::ostream::put();
          goto LABEL_157;
        }
LABEL_158:
        *((double *)a1 + 92) = v56;
        v110 = 3;
LABEL_165:
        *(_DWORD *)(a4 + 56) = v110;
        break;
      }
      if (vabdd_f64(v56, *((double *)a1 + 92)) < v56 * *((double *)a1 + 5) && v62 >= *((_DWORD *)a1 + 2))
      {
        if (*((_BYTE *)a1 + 16))
        {
          sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v108 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v108 + *(_QWORD *)(*v108 - 24)));
          v109 = std::locale::use_facet(v120, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
          std::locale::~locale(v120);
          std::ostream::put();
LABEL_157:
          std::ostream::flush();
        }
        goto LABEL_158;
      }
      if (*(_DWORD *)(a2 + 328))
      {
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 160))(a2, a1 + 93);
        v84 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, double))(*a1 + 80))(a1, v57, a2 + 336, a1 + 93, v56);
      }
      else
      {
        v84 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(*a1 + 72))(a1, v57, a2 + 336, v56);
      }
      if (!v84)
      {
        --*(_DWORD *)(a4 + 52);
        v89 = *(_QWORD *)(a2 + 48);
        v90 = *(_QWORD *)(a2 + 56);
        while (v89 != v90)
        {
          v91 = *(_QWORD *)(v89 + 8);
          if (*(_BYTE *)(v91 + 20))
            *(_QWORD *)(v91 + 32) = *(_QWORD *)(v91 + 40);
          v89 += 16;
        }
        *(_BYTE *)(a2 + 301) = 0;
        *(_BYTE *)(a2 + 296) = 0;
        *(_WORD *)(a2 + 299) = 0;
        *(_BYTE *)(a2 + 297) = *(_BYTE *)(a2 + 298);
        *(_QWORD *)(a4 + 1144) = 0;
        if (*(_QWORD *)(a4 + 1136))
        {
          v92 = *(double **)(a4 + 1128);
          v93 = __dst[0];
          goto LABEL_125;
        }
        *(_QWORD *)(a4 + 1136) = 1;
        v92 = (double *)operator new[]();
        v94 = *(_QWORD *)(a4 + 1128);
        if (v94 != v14 && v94)
          MEMORY[0x212BC6368](v94, 0x1000C8000313F17);
        *(_QWORD *)(a4 + 1128) = v92;
        v95 = *(_QWORD *)(a4 + 1144);
        v93 = __dst[0];
        if (v95)
        {
          *v28 = v95 + 1;
          *v92 = v93;
        }
        else
        {
LABEL_125:
          *v92 = v93;
          *v28 = 1;
        }
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
        {
          (*(void (**)(uint64_t *))(*a1 + 32))(a1);
          (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
        }
LABEL_133:
        if (v63 < *((_DWORD *)a1 + 3))
          goto LABEL_134;
        goto LABEL_69;
      }
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
      {
        (*(void (**)(uint64_t *))(*a1 + 32))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
      }
      v86 = v48 * *((double *)a1 + 3);
      if (v60 < v86 && v62 >= *((_DWORD *)a1 + 2))
      {
        if (*((_BYTE *)a1 + 16))
        {
          v113 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
          sub_20E8C81A0(v113);
          (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*a1 + 64))(a1, v62, v56, v76, v60, v48, v15);
        }
        v110 = 1;
        goto LABEL_165;
      }
      if (v63 >= *((_DWORD *)a1 + 3) || !*((_BYTE *)a1 + 48))
        goto LABEL_133;
      v87 = a1[74];
      if (*((_BYTE *)a1 + 601))
      {
        v88 = a1 + 7;
        if (v87)
          v88 = (uint64_t *)a1[72];
      }
      else
      {
        v88 = a1 + 7;
        if (v87)
        {
          v120[0].__locale_ = (std::locale::__imp *)a1[72];
          LODWORD(v120[1].__locale_) = 0;
          sub_20F2C3FF0(a2, (uint64_t)v120, v86, v85);
          goto LABEL_141;
        }
      }
      sub_20F2C43A4(a2, (uint64_t)v120, v88, v86, v85);
      locale = 0x3DDB7CDFD9D7BDBBLL;
      v98 = 1.0e20;
      if (*(double *)&v120[0].__locale_ > 0.0)
      {
        locale = (uint64_t)v120[0].__locale_;
        v98 = 1.0 / (*(double *)&v120[0].__locale_ * *(double *)&v120[0].__locale_);
      }
      *(_QWORD *)(a2 + 8) = locale;
      *(double *)(a2 + 16) = v98;
      *(_BYTE *)(a2 + 301) = 0;
      *(_DWORD *)(a2 + 296) = 0;
LABEL_141:
      *((double *)a1 + 92) = sub_20F2C4058(a2, (_QWORD *)(a4 + 616));
      if (v63 < *((_DWORD *)a1 + 3))
      {
LABEL_134:
        v96 = a1[79];
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 48))(v96);
      }
LABEL_69:
      v61 = atomic_load(a3);
    }
    while ((v61 & 1) == 0);
  }
  *(_QWORD *)(a4 + 72) = a1[92];
  v114 = a1[79];
  v16 = v115;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 48))(v114);
LABEL_147:
  *(_BYTE *)(a2 + 312) = v16;
  if (!v117)
  {
    v120[0] = (std::locale)__p[0];
    sub_20F2C4C68((uint64_t)v120, (_QWORD *)__p[1] + 145, (_QWORD *)__p[1] + 144);
    __dst[0] = *(double *)__p;
    sub_20F2C4E38(__dst, (_QWORD *)__p[1] + 214, (_QWORD *)__p[1] + 212, (_QWORD *)__p[1] + 213);
  }
  return kdebug_trace();
}

void sub_20F2C3A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  *(_BYTE *)(v31 + 312) = a11;
  if (!a13)
    sub_20F2C51F4((uint64_t **)&a14);
  sub_20F2C524C(v30);
  sub_20EDB4278((uint64_t)&a30);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F2C3BE8(_QWORD *result, unint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  unint64_t v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;

  v5 = result;
  v6 = result[210];
  if (v6 < a2)
  {
    v10 = result + 145;
    v11 = result[211];
    v12 = 2 * v6;
    if (v12 <= a2)
      v12 = a2;
    result[210] = v12;
    v13 = result[209];
    v14 = operator new[]();
    v15 = v14;
    if (v11)
    {
      v16 = 0;
      if (v11 < 4)
        goto LABEL_14;
      if ((unint64_t)(v14 - v13) < 0x20)
        goto LABEL_14;
      v16 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = (_OWORD *)(v14 + 16);
      v18 = (__int128 *)(v13 + 16);
      v19 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v11 != v16)
      {
LABEL_14:
        v21 = v11 - v16;
        v22 = 8 * v16;
        v23 = (uint64_t *)(v13 + 8 * v16);
        v24 = (_QWORD *)(v14 + v22);
        do
        {
          v25 = *v23++;
          *v24++ = v25;
          --v21;
        }
        while (v21);
      }
    }
    result = (_QWORD *)v5[209];
    if (result != v10 && result != 0)
      result = (_QWORD *)MEMORY[0x212BC6368]();
    v5[209] = v15;
    v7 = v5[279];
    if (v7 >= a3)
    {
LABEL_3:
      v8 = v5[75];
      if (v8 >= a2)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else
  {
    v7 = result[279];
    if (v7 >= a3)
      goto LABEL_3;
  }
  v27 = v5[280];
  v28 = 2 * v7;
  if (v28 <= a3)
    v28 = a3;
  v5[279] = v28;
  v29 = v5[278];
  v30 = operator new[]();
  v31 = v30;
  if (v27)
  {
    v32 = 0;
    if (v27 < 4)
      goto LABEL_30;
    if ((unint64_t)(v30 - v29) < 0x20)
      goto LABEL_30;
    v32 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    v33 = (_OWORD *)(v30 + 16);
    v34 = (__int128 *)(v29 + 16);
    v35 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *v33 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 4;
    }
    while (v35);
    if (v27 != v32)
    {
LABEL_30:
      v37 = v27 - v32;
      v38 = 8 * v32;
      v39 = (uint64_t *)(v29 + 8 * v32);
      v40 = (_QWORD *)(v30 + v38);
      do
      {
        v41 = *v39++;
        *v40++ = v41;
        --v37;
      }
      while (v37);
    }
  }
  result = (_QWORD *)v5[278];
  if (result != v5 + 214 && result != 0)
    result = (_QWORD *)MEMORY[0x212BC6368]();
  v5[278] = v31;
  v8 = v5[75];
  if (v8 >= a2)
  {
LABEL_4:
    v9 = v5[142];
    if (v9 >= a2)
      return result;
    goto LABEL_54;
  }
LABEL_38:
  v43 = v5[76];
  v44 = 2 * v8;
  if (v44 <= a2)
    v44 = a2;
  v5[75] = v44;
  v45 = v5[74];
  v46 = operator new[]();
  v47 = v46;
  if (v43)
  {
    v48 = 0;
    if (v43 < 4)
      goto LABEL_46;
    if ((unint64_t)(v46 - v45) < 0x20)
      goto LABEL_46;
    v48 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    v49 = (_OWORD *)(v46 + 16);
    v50 = (__int128 *)(v45 + 16);
    v51 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v43 != v48)
    {
LABEL_46:
      v53 = v43 - v48;
      v54 = 8 * v48;
      v55 = (uint64_t *)(v45 + 8 * v48);
      v56 = (_QWORD *)(v46 + v54);
      do
      {
        v57 = *v55++;
        *v56++ = v57;
        --v53;
      }
      while (v53);
    }
  }
  result = (_QWORD *)v5[74];
  if (result != v5 + 10 && result != 0)
    result = (_QWORD *)MEMORY[0x212BC6368]();
  v5[74] = v47;
  v9 = v5[142];
  if (v9 < a2)
  {
LABEL_54:
    v59 = v5[143];
    v60 = 2 * v9;
    if (v60 <= a2)
      v60 = a2;
    v5[142] = v60;
    v61 = v5[141];
    v62 = operator new[]();
    v63 = v62;
    if (v59)
    {
      v64 = 0;
      if (v59 < 4)
        goto LABEL_62;
      if ((unint64_t)(v62 - v61) < 0x20)
        goto LABEL_62;
      v64 = v59 & 0xFFFFFFFFFFFFFFFCLL;
      v65 = (_OWORD *)(v62 + 16);
      v66 = (__int128 *)(v61 + 16);
      v67 = v59 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v68 = *v66;
        *(v65 - 1) = *(v66 - 1);
        *v65 = v68;
        v65 += 2;
        v66 += 2;
        v67 -= 4;
      }
      while (v67);
      if (v59 != v64)
      {
LABEL_62:
        v69 = v59 - v64;
        v70 = 8 * v64;
        v71 = (uint64_t *)(v61 + 8 * v64);
        v72 = (_QWORD *)(v62 + v70);
        do
        {
          v73 = *v71++;
          *v72++ = v73;
          --v69;
        }
        while (v69);
      }
    }
    result = (_QWORD *)v5[141];
    if (result != v5 + 77 && result != 0)
      result = (_QWORD *)MEMORY[0x212BC6368]();
    v5[141] = v63;
  }
  return result;
}

uint64_t sub_20F2C3FF0(uint64_t a1, uint64_t a2, double a3, float64x2_t a4)
{
  uint64_t result;
  uint64_t v6;
  double v7;
  double v8;

  result = sub_20F2C4A08(a1, (uint64_t)&v8, a2, a3, a4);
  v6 = *(_QWORD *)&v8;
  if (v8 <= 0.0)
  {
    v7 = 1.0e20;
    v6 = 0x3DDB7CDFD9D7BDBBLL;
  }
  else
  {
    v7 = 1.0 / (v8 * v8);
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 301) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  return result;
}

double sub_20F2C4058(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  float64x2_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double i;
  unint64_t v12;
  double *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double v23;
  long double v24;
  long double v25;
  double v26;
  double v27;
  double v31;
  long double v32;
  long double v33;
  long double v34;
  float64x2_t v35;
  float64x2_t v36;

  kdebug_trace();
  if (!a2[66])
  {
    if (a2[65])
    {
      v6 = (_QWORD *)a2[64];
LABEL_4:
      *v6 = 0;
      goto LABEL_9;
    }
    a2[65] = 1;
    v6 = (_QWORD *)operator new[]();
    v7 = (_QWORD *)a2[64];
    if (v7 != a2 && v7)
      MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
    a2[64] = v6;
    if (!a2[66])
      goto LABEL_4;
  }
LABEL_9:
  a2[66] = 1;
  v9 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(a1 + 300))
  {
    if (v9 == v8)
    {
      i = 0.0;
    }
    else if (*(_BYTE *)(a1 + 299))
    {
      v10 = v8 - v9 - 152;
      i = 0.0;
      if (v10 < 0x98)
        goto LABEL_34;
      v12 = v10 / 0x98 + 1;
      v13 = (double *)(v9 + 264);
      v14 = v12 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        i = i + *(v13 - 19) + *v13;
        v13 += 38;
        v14 -= 2;
      }
      while (v14);
      v9 += 152 * (v12 & 0x3FFFFFFFFFFFFFELL);
      if (v12 != (v12 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          i = i + *(double *)(v9 + 112);
          v9 += 152;
        }
        while (v9 != v8);
      }
    }
    else
    {
      i = 0.0;
      do
      {
        if (*(_BYTE *)(v9 + 120))
        {
          *(_OWORD *)(v9 + 96) = *(_OWORD *)(v9 + 80);
          v36 = *(float64x2_t *)(v9 + 96);
          _D1 = v36.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v31 = *(double *)(a1 + 24);
          v32 = *(double *)(a1 + 32) * (*(double *)(a1 + 16) * _D0);
          v33 = v32 + 1.0;
          v34 = v31 * log1p(v32);
          *(long double *)(v9 + 112) = v34;
          *(float64x2_t *)(v9 + 96) = vmulq_n_f64(v36, sqrt(1.0 / v33));
          i = i + v34;
        }
        v9 += 152;
      }
      while (v9 != v8);
    }
  }
  else
  {
    for (i = 0.0; v9 != v8; v9 += 152)
    {
      while (1)
      {
        v15 = sub_20FC6F874(v9 + 8, v9 + 72, (float64x2_t *)(v9 + 96), v4, v5);
        *(_BYTE *)(v9 + 120) = v15;
        if (v15)
          break;
        *(_QWORD *)(v9 + 112) = 0;
        v9 += 152;
        if (v9 == v8)
          goto LABEL_27;
      }
      v16 = *(_QWORD *)(v9 + 128);
      if (v16)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v9 + 96);
      *(_OWORD *)(v9 + 80) = *(_OWORD *)(v9 + 96);
      v35 = *(float64x2_t *)(v9 + 96);
      _D1 = v35.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v23 = *(double *)(a1 + 24);
      v24 = *(double *)(a1 + 32) * (*(double *)(a1 + 16) * _D0);
      v25 = v24 + 1.0;
      v4.f64[0] = v23 * log1p(v24);
      *(float64_t *)(v9 + 112) = v4.f64[0];
      v5 = vmulq_n_f64(v35, sqrt(1.0 / v25));
      *(float64x2_t *)(v9 + 96) = v5;
      i = i + v4.f64[0];
    }
  }
LABEL_27:
  *(double *)a2[64] = i * 0.5;
  *(_WORD *)(a1 + 299) = 257;
  v26 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v27 = *(double *)a2[64];
  kdebug_trace();
  return v26 + v27;
}

void sub_20F2C4364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F2C437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F2C4390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2C43A4(uint64_t a1, uint64_t a2, uint64_t *a3, double a4, float64x2_t a5)
{
  float64x2_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[4];
  _QWORD v14[2];
  _BYTE v15[512];
  _BYTE *v16;
  __int128 v17;

  v16 = v15;
  v8 = (float64x2_t)xmmword_210378040;
  v17 = xmmword_210378040;
  v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v9 >= 0x41)
  {
    if (v9 <= 0x80)
      v9 = 128;
    *(_QWORD *)&v17 = v9;
    v10 = operator new[]();
    if (v16 != v15 && v16)
      MEMORY[0x212BC6368]();
    v16 = (_BYTE *)v10;
  }
  v11 = *a3;
  v14[0] = 1;
  v14[1] = v11;
  v13[0] = a1;
  v13[1] = (uint64_t)v14;
  v13[2] = a2;
  v13[3] = (uint64_t)v15;
  sub_20F2C450C(v13, v8, a5);
  *((_QWORD *)&v17 + 1) = 0;
  result = (uint64_t)v16;
  if (v16 != v15)
  {
    if (v16)
      return MEMORY[0x212BC6368]();
  }
  return result;
}

void sub_20F2C44D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  unint64_t v17;

  STACK[0x248] = 0;
  v17 = STACK[0x238];
  if ((char *)STACK[0x238] != &a16)
  {
    if (v17)
      MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F2C450C(uint64_t *a1, float64x2_t a2, float64x2_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  v4 = a1[3];
  *(_QWORD *)(v4 + 528) = 0;
  v5 = *a1;
  if (!*(_BYTE *)(*a1 + 300))
  {
    v12 = *a1 + 40;
    sub_20F2C47E0((uint64_t)&v12, a2, a3, *(unsigned __int8 *)(v5 + 299), (_QWORD *)v4);
    v6 = *(_QWORD *)(v4 + 528);
    if (v6)
      goto LABEL_3;
LABEL_9:
    v11 = 1.0;
    goto LABEL_10;
  }
  v12 = *a1 + 40;
  sub_20F2C4610((uint64_t)&v12, *(unsigned __int8 *)(v5 + 299), (_QWORD *)v4);
  v6 = *(_QWORD *)(v4 + 528);
  if (!v6)
    goto LABEL_9;
LABEL_3:
  v7 = v6 >> 1;
  sub_20E8FB210(*(double **)(v4 + 512), (double *)(*(_QWORD *)(v4 + 512) + v7 * 8), (double *)(*(_QWORD *)(v4 + 512) + 8 * v6));
  v8 = *(double **)(v4 + 512);
  v9 = v8[v7];
  if ((v6 & 1) == 0)
  {
    v10 = (v6 >> 1) - 1;
    if (v10 != v6)
    {
      sub_20E8FB210(v8, &v8[v10], &v8[v6]);
      v8 = *(double **)(v4 + 512);
    }
    v9 = (v9 + v8[v10]) * 0.5;
  }
  v11 = sqrt(v9) * *(double *)(a1[1] + 8);
LABEL_10:
  *(double *)a1[2] = v11;
}

void sub_20F2C4610(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v36;

  v5 = a3[66];
  v6 = v5
     - 0x79435E50D79435E5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  if (v5 >= v6)
    goto LABEL_22;
  v7 = a3[65];
  if (v7 >= v6)
  {
    v24 = a3[66];
    v25 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
    if (v6 <= v5)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a3[64] + 8 * v24), 8 * v25);
    goto LABEL_22;
  }
  v8 = 2 * v7;
  if (v8 <= v6)
    v8 = v5
       - 0x79435E50D79435E5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  a3[65] = v8;
  v9 = a3[64];
  v10 = operator new[]();
  v11 = v10;
  if (v5)
  {
    v12 = 0;
    if (v5 < 4)
      goto LABEL_11;
    if ((unint64_t)(v10 - v9) < 0x20)
      goto LABEL_11;
    v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (_OWORD *)(v10 + 16);
    v14 = (__int128 *)(v9 + 16);
    v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v14;
      *(v13 - 1) = *(v14 - 1);
      *v13 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v5 != v12)
    {
LABEL_11:
      v17 = v5 - v12;
      v18 = 8 * v12;
      v19 = (uint64_t *)(v9 + 8 * v12);
      v20 = (_QWORD *)(v10 + v18);
      do
      {
        v21 = *v19++;
        *v20++ = v21;
        --v17;
      }
      while (v17);
    }
  }
  v22 = (_QWORD *)a3[64];
  if (v22 != a3 && v22 != 0)
    MEMORY[0x212BC6368]();
  a3[64] = v11;
  v24 = a3[66];
  v25 = v6 - v24;
  if (v6 > v24)
    goto LABEL_21;
LABEL_22:
  a3[66] = v6;
  v26 = a3[64];
  v27 = (char *)(v26 + 8 * v5);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  while (v28 != v29)
  {
    if (*(_BYTE *)(v28 + 120))
    {
      _Q0 = *(_OWORD *)(v28 + 80);
      _D2 = *(_QWORD *)(v28 + 88);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(_QWORD *)v27 = _D1;
      v27 += 8;
    }
    v28 += 152;
  }
  v36 = (char *)(v26 + 8 * v6);
  if (v27 != v36)
    a3[66] = v6 + ~((unint64_t)(v36 - v27 - 8) >> 3);
}

void sub_20F2C47E0(uint64_t a1, float64x2_t _Q0, float64x2_t _Q1, uint64_t a4, _QWORD *a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 *v15;
  float64x2_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  float64x2_t v40;
  char v41;

  v7 = a5[66];
  v8 = v7
     - 0x79435E50D79435E5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  if (v7 >= v8)
    goto LABEL_22;
  v9 = a5[65];
  if (v9 >= v8)
  {
    v25 = a5[66];
    v26 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
    if (v8 <= v7)
      goto LABEL_22;
    goto LABEL_21;
  }
  v10 = 2 * v9;
  if (v10 <= v8)
    v10 = v7
        - 0x79435E50D79435E5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  a5[65] = v10;
  v11 = (float64x2_t *)a5[64];
  v12 = operator new[]();
  v13 = v12;
  if (v7)
  {
    v14 = 0;
    if (v7 < 4)
      goto LABEL_11;
    if ((unint64_t)(v12 - (_QWORD)v11) < 0x20)
      goto LABEL_11;
    v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = (__n128 *)(v12 + 16);
    v16 = v11 + 1;
    v17 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v16[-1];
      _Q1 = *v16;
      v15[-1] = (__n128)_Q0;
      *v15 = (__n128)_Q1;
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v7 != v14)
    {
LABEL_11:
      v18 = v7 - v14;
      v19 = 8 * v14;
      v20 = (unint64_t *)&v11->f64[v14];
      v21 = (unint64_t *)(v12 + v19);
      do
      {
        v22 = *v20++;
        *(_QWORD *)&_Q0.f64[0] = v22;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  v23 = (_QWORD *)a5[64];
  if (v23 != a5 && v23 != 0)
    MEMORY[0x212BC6368]();
  a5[64] = v13;
  v25 = a5[66];
  v26 = v8 - v25;
  if (v8 > v25)
LABEL_21:
    bzero((void *)(a5[64] + 8 * v25), 8 * v26);
LABEL_22:
  a5[66] = v8;
  v27 = a5[64];
  v28 = (char *)(v27 + 8 * v7);
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  if (v29 != v30)
  {
    v31 = v29 + 72;
    do
    {
      v37 = sub_20FC6F874(v31 - 64, v31, &v40, _Q0, _Q1);
      v41 = v37;
      if (v37)
      {
        v38 = *(_QWORD *)(v31 + 56);
        if (!v38 || ((*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v38 + 24))(v38, &v40), v41))
        {
          _Q1 = v40;
          _Q0 = vmulq_f64(_Q1, _Q1);
          _D2 = v40.f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(float64_t *)v28 = _Q0.f64[0];
          v28 += 8;
        }
      }
      v36 = v31 + 80;
      v31 += 152;
    }
    while (v36 != v30);
    v27 = a5[64];
    v8 = a5[66];
  }
  v39 = (char *)(v27 + 8 * v8);
  if (v28 != v39)
    a5[66] = v8 + ~((unint64_t)(v39 - v28 - 8) >> 3);
}

uint64_t sub_20F2C4A08(uint64_t a1, uint64_t a2, uint64_t a3, double a4, float64x2_t a5)
{
  float64x2_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12[4];
  _BYTE v13[512];
  _BYTE *v14;
  __int128 v15;

  v14 = v13;
  v8 = (float64x2_t)xmmword_210378040;
  v15 = xmmword_210378040;
  v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v9 >= 0x41)
  {
    if (v9 <= 0x80)
      v9 = 128;
    *(_QWORD *)&v15 = v9;
    v10 = operator new[]();
    if (v14 != v13 && v14)
      MEMORY[0x212BC6368]();
    v14 = (_BYTE *)v10;
  }
  v12[0] = a1;
  v12[1] = a3;
  v12[2] = a2;
  v12[3] = (uint64_t)v13;
  sub_20F2C4B60(v12, v8, a5);
  *((_QWORD *)&v15 + 1) = 0;
  result = (uint64_t)v14;
  if (v14 != v13)
  {
    if (v14)
      return MEMORY[0x212BC6368]();
  }
  return result;
}

void sub_20F2C4B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unint64_t v15;

  STACK[0x238] = 0;
  v15 = STACK[0x228];
  if ((char *)STACK[0x228] != &a14)
  {
    if (v15)
      MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F2C4B60(uint64_t *a1, float64x2_t a2, float64x2_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  v4 = a1[3];
  *(_QWORD *)(v4 + 528) = 0;
  v5 = *a1;
  if (!*(_BYTE *)(*a1 + 300))
  {
    v12 = *a1 + 40;
    sub_20F2C47E0((uint64_t)&v12, a2, a3, *(unsigned __int8 *)(v5 + 299), (_QWORD *)v4);
    v6 = *(_QWORD *)(v4 + 528);
    if (v6)
      goto LABEL_3;
LABEL_9:
    v11 = 1.0;
    goto LABEL_10;
  }
  v12 = *a1 + 40;
  sub_20F2C4610((uint64_t)&v12, *(unsigned __int8 *)(v5 + 299), (_QWORD *)v4);
  v6 = *(_QWORD *)(v4 + 528);
  if (!v6)
    goto LABEL_9;
LABEL_3:
  v7 = v6 >> 1;
  sub_20E8FB210(*(double **)(v4 + 512), (double *)(*(_QWORD *)(v4 + 512) + v7 * 8), (double *)(*(_QWORD *)(v4 + 512) + 8 * v6));
  v8 = *(double **)(v4 + 512);
  v9 = v8[v7];
  if ((v6 & 1) == 0)
  {
    v10 = (v6 >> 1) - 1;
    if (v10 != v6)
    {
      sub_20E8FB210(v8, &v8[v10], &v8[v6]);
      v8 = *(double **)(v4 + 512);
    }
    v9 = (v9 + v8[v10]) * 0.5;
  }
  v11 = sqrt(v9) * **(double **)a1[1];
LABEL_10:
  *(double *)a1[2] = v11;
}

uint64_t sub_20F2C4C68(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD **)result;
  if (*(_BYTE *)(*(_QWORD *)result + 192) || (v24 = v4[6], v25 = v4[7], v24 == v25))
  {
LABEL_2:
    v5 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4[19] - v4[18]) >> 3);
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v24 + 8) + 4) & 6) == 0)
    {
      v24 += 16;
      if (v24 == v25)
        goto LABEL_2;
    }
    v27 = v4[18];
    v26 = v4[19];
    if (v27 == v26)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      v28 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v27 + 72) + 4) & 6) == 0)
          v5 = ++v28;
        v27 += 152;
      }
      while (v27 != v26);
    }
  }
  *a3 += v5;
  v6 = a2[66];
  v7 = v6 + 1;
  v8 = a2[65];
  if (v6 + 1 <= v8)
  {
    v12 = a2[64];
  }
  else
  {
    v9 = 2 * v8;
    if (v9 > v7)
      v7 = v9;
    a2[65] = v7;
    v10 = a2[64];
    v11 = operator new[]();
    v12 = v11;
    if (v6)
    {
      v13 = 0;
      if (v6 < 4)
        goto LABEL_12;
      if ((unint64_t)(v11 - v10) < 0x20)
        goto LABEL_12;
      v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (_OWORD *)(v11 + 16);
      v15 = (__int128 *)(v10 + 16);
      v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v6 != v13)
      {
LABEL_12:
        v18 = v6 - v13;
        v19 = 8 * v13;
        v20 = (uint64_t *)(v10 + 8 * v13);
        v21 = (_QWORD *)(v11 + v19);
        do
        {
          v22 = *v20++;
          *v21++ = v22;
          --v18;
        }
        while (v18);
      }
    }
    result = a2[64];
    if ((_QWORD *)result != a2 && result != 0)
      result = MEMORY[0x212BC6368]();
    a2[64] = v12;
    v6 = a2[66];
  }
  *(_QWORD *)(v12 + 8 * v6) = v5;
  ++a2[66];
  return result;
}

uint64_t sub_20F2C4E38(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;

  result = sub_20F2C4F9C(*a1 + 40, 0, 1);
  v8 = result;
  *a3 += result;
  *a4 += result;
  v9 = a2[66];
  v10 = v9 + 1;
  v11 = a2[65];
  if (v9 + 1 <= v11)
  {
    v15 = a2[64];
  }
  else
  {
    v12 = 2 * v11;
    if (v12 > v10)
      v10 = v12;
    a2[65] = v10;
    v13 = a2[64];
    v14 = operator new[]();
    v15 = v14;
    if (v9)
    {
      v16 = 0;
      if (v9 < 4)
        goto LABEL_10;
      if ((unint64_t)(v14 - v13) < 0x20)
        goto LABEL_10;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = (_OWORD *)(v14 + 16);
      v18 = (__int128 *)(v13 + 16);
      v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v9 != v16)
      {
LABEL_10:
        v21 = v9 - v16;
        v22 = 8 * v16;
        v23 = (uint64_t *)(v13 + 8 * v16);
        v24 = (_QWORD *)(v14 + v22);
        do
        {
          v25 = *v23++;
          *v24++ = v25;
          --v21;
        }
        while (v21);
      }
    }
    result = a2[64];
    if ((_QWORD *)result != a2 && result != 0)
      result = MEMORY[0x212BC6368]();
    a2[64] = v15;
    v9 = a2[66];
  }
  *(_QWORD *)(v15 + 8 * v9) = v8;
  ++a2[66];
  return result;
}

uint64_t sub_20F2C4F9C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  char v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 152))
  {
    v5 = 0;
    if (v3 != v4)
    {
      if (a2)
      {
        do
        {
          v6 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v6 + 4) & 2) == 0 && *(_BYTE *)(v6 + 20))
          {
            if ((*(_BYTE *)(v6 + 4) & 1) != 0)
              v7 = a3;
            else
              v7 = 1;
            v5 = (v5 + v7);
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
      else if ((a3 & 1) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v8 + 4) & 6) == 0)
            v5 = v5 + *(unsigned __int8 *)(v8 + 20);
          v3 += 16;
        }
        while (v3 != v4);
      }
      else
      {
        do
        {
          v9 = *(_QWORD *)(v3 + 8);
          v10 = *(_BYTE *)(v9 + 4);
          if ((v10 & 6) == 0)
          {
            v11 = *(unsigned __int8 *)(v9 + 20);
            if ((v10 & 1) != 0 || v11 == 0)
              v5 = v5;
            else
              v5 = (v5 + 1);
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
    }
  }
  else if (v3 == v4)
  {
    return 0;
  }
  else
  {
    v14 = 0;
    LODWORD(v5) = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v15 = *(_QWORD *)(v3 + 8);
        v16 = *(_BYTE *)(v15 + 4);
        if ((v16 & 2) != 0)
          v14 = 1;
        v17 = *(unsigned __int8 *)(v15 + 20);
        if ((v16 & 1) != 0)
          v18 = a3;
        else
          v18 = 1;
        v19 = v5 + v18;
        if (v17)
          v5 = v19;
        else
          v5 = v5;
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v20 = *(_QWORD *)(v3 + 8);
        v21 = *(_BYTE *)(v20 + 4);
        if ((v21 & 6) != 0)
          v14 = 1;
        v22 = *(unsigned __int8 *)(v20 + 20);
        if ((v21 & 1) != 0)
          v23 = a3;
        else
          v23 = 1;
        v24 = v5 + v23;
        if (v22)
          v5 = v24;
        else
          v5 = v5;
        v3 += 16;
      }
      while (v3 != v4);
    }
    if (v14)
    {
      v25 = *(_QWORD *)(a1 + 232);
      v36 = a1 + 232;
      *(_QWORD *)(a1 + 240) = v25;
      v26 = *(_QWORD *)(a1 + 104);
      v27 = *(_QWORD *)(a1 + 112);
      if (v26 != v27)
      {
        v28 = v26 + 72;
        do
        {
          if (*(_BYTE *)(v28 + 72) || (*(_BYTE *)(*(_QWORD *)v28 + 4) & 6) != 0)
            sub_20F2B734C(&v36, (uint64_t *)v28);
          v29 = v28 + 80;
          v28 += 152;
        }
        while (v29 != v27);
        v30 = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
        if (v30 <= v5)
          v5 = (v5 - v30);
        else
          v5 = 0;
        v32 = *(_QWORD *)(a1 + 104);
        v33 = *(_QWORD *)(a1 + 112);
        while (v32 != v33)
        {
          v34 = *(_QWORD *)(v32 + 72);
          if (*(_BYTE *)(v32 + 144) || (*(_BYTE *)(v34 + 4) & 6) != 0)
            ++*(_DWORD *)(v34 + 8);
          v32 += 152;
        }
      }
    }
  }
  return v5;
}

void sub_20F2C51D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (!a10)
    sub_20F2B78E4(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2C51F4(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (*a1)[1];
  v6 = **a1;
  sub_20F2C4C68((uint64_t)&v6, (_QWORD *)(v2 + 1160), (_QWORD *)(v2 + 1152));
  v3 = (_QWORD *)v1[1];
  v5 = *v1;
  return sub_20F2C4E38(&v5, v3 + 214, v3 + 212, v3 + 213);
}

uint64_t sub_20F2C524C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1 + 1712;
  *(_QWORD *)(a1 + 2240) = 0;
  v3 = *(_QWORD *)(a1 + 2224);
  if (v3 == v2 || v3 == 0)
  {
    *(_QWORD *)(a1 + 1688) = 0;
    v5 = *(_QWORD *)(a1 + 1672);
    if (v5 != a1 + 1160 && v5 != 0)
    {
LABEL_22:
      MEMORY[0x212BC6368]();
      *(_QWORD *)(a1 + 1144) = 0;
      v12 = *(_QWORD *)(a1 + 1128);
      if (v12 != a1 + 616 && v12 != 0)
        goto LABEL_26;
LABEL_16:
      *(_QWORD *)(a1 + 608) = 0;
      v9 = *(_QWORD *)(a1 + 592);
      if (v9 == a1 + 80)
        goto LABEL_29;
      goto LABEL_27;
    }
  }
  else
  {
    MEMORY[0x212BC6368]();
    *(_QWORD *)(a1 + 1688) = 0;
    v10 = *(_QWORD *)(a1 + 1672);
    if (v10 != a1 + 1160 && v10 != 0)
      goto LABEL_22;
  }
  *(_QWORD *)(a1 + 1144) = 0;
  v7 = *(_QWORD *)(a1 + 1128);
  if (v7 == a1 + 616 || v7 == 0)
    goto LABEL_16;
LABEL_26:
  MEMORY[0x212BC6368]();
  *(_QWORD *)(a1 + 608) = 0;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9 == a1 + 80)
    goto LABEL_29;
LABEL_27:
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
LABEL_29:
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20F2C539C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  *a1 = off_24C9FCF80;
  v2 = a1[93];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = (_QWORD *)a1[91];
  if (v3 == a1 + 88)
  {
    v4 = 4;
    v3 = a1 + 88;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = (_QWORD *)a1[87];
  if (v5 == a1 + 84)
  {
    v6 = 4;
    v5 = a1 + 84;
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = (_QWORD *)a1[83];
  if (v7 == a1 + 80)
  {
    v8 = 4;
    v7 = a1 + 80;
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  v9 = (_QWORD *)a1[79];
  if (v9 == a1 + 76)
  {
    v10 = 4;
    v9 = a1 + 76;
    goto LABEL_22;
  }
  if (v9)
  {
    v10 = 5;
LABEL_22:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  a1[74] = 0;
  v11 = (_QWORD *)a1[72];
  if (v11 != a1 + 8 && v11)
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_20F2C54D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  unsigned int v45;
  double v46;
  uint64_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float32x2_t *v50;
  float v51;
  float32x2_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  double v57;
  char v58;
  double v60;
  double v66;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  double v75;
  double v76;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  int v85;
  int v86;
  double v87;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  int v97;
  double v98;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  int v107;
  int v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  float64x2_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  float64x2_t v119;
  double v120;
  double v122;
  double v123;
  int v124;
  double v125;
  float64x2_t v126;
  float64x2_t v127;
  double v128;
  double v129;
  BOOL v130;
  float64x2_t v131;
  double v132;
  double v134;
  double v135;
  int v136;
  double v137;
  BOOL v138;
  float64x2_t v139;
  double v140;
  double v142;
  double v143;
  int v144;
  double v145;
  float64x2_t v146;
  double v152;
  int v153;
  int v154;
  double v155;
  float64x2_t v156;
  double v157;
  BOOL v158;
  float64x2_t v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  uint64_t v166;
  float64x2_t v167;
  uint64_t v168;
  float64x2_t v169;
  uint64_t v170;

  v170 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)a5 + 23) = 0;
  *(_WORD *)((char *)a5 + 21) = 0;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  a5[4] = 0;
  *((_BYTE *)a5 + 20) = 1;
  if (*(unsigned int *)(a3 + 40) > (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 5))
  {
    result = 0;
    *((_BYTE *)a5 + 20) = 0;
    *((_BYTE *)a5 + 4) = 0;
    return result;
  }
  v11 = a2 + 40;
  if (*(_BYTE *)(a2 + 192))
  {
    v12 = a2 + 40;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 771, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (*(_BYTE *)(a2 + 192))
      v12 = v11;
    else
      v12 = 0;
  }
  v167 = *(float64x2_t *)(v12 + 32);
  v13 = *(uint64_t *)(v12 + 48);
  v168 = v13;
  v14 = (_QWORD *)(a1 + 64);
  v15 = sub_20E9DF85C(v14, (uint64_t *)&v167);
  v16 = sub_20E9DF85C(v14, (uint64_t *)(*(_QWORD *)(a2 + 208) - 32));
  if (*(_BYTE *)(a2 + 192))
    v18 = v11;
  else
    v18 = 0;
  v19 = *(float64x2_t *)(v18 + 8);
  v17.f64[0] = *(float64_t *)(v18 + 24);
  v20 = (float64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL);
  v161 = v19.f64[0];
  v162 = v20;
  *(_QWORD *)&v20.f64[0] = v15[47];
  v21 = vsubq_f64(*(float64x2_t *)(v15 + 45), v19);
  v163 = v17;
  *(_QWORD *)&v22 = *(_OWORD *)&vsubq_f64(v20, v17);
  if ((fabs(v21.f64[0]) >= 1.0e-10 || fabs(v21.f64[1]) >= 1.0e-10 || fabs(v22) >= 1.0e-10)
    && ((*(_QWORD *)&v17.f64[0] = v16[47],
         *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vsubq_f64(v17, v163),
         v23.f64[0] = v19.f64[0],
         v23.f64[1] = v162.f64[0],
         v24 = vsubq_f64(*(float64x2_t *)(v16 + 45), v23),
         fabs(v24.f64[0]) >= 1.0e-10)
     || fabs(v24.f64[1]) >= 1.0e-10
     || fabs(v17.f64[0]) >= 1.0e-10))
  {
    v21.f64[1] = *(double *)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).i64;
    v24.f64[1] = *(double *)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).i64;
    v25 = *(double *)(a3 + 16);
    v26 = fmin((vmulq_f64(v21, v24).f64[0] + v21.f64[1] * v24.f64[1] + v22 * v17.f64[0])/ sqrt((vmulq_f64(v21, v21).f64[0] + v21.f64[1] * v21.f64[1] + v22 * v22)* (vmulq_f64(v24, v24).f64[0] + v24.f64[1] * v24.f64[1] + v17.f64[0] * v17.f64[0])), 1.0);
    *((double *)a5 + 1) = v26;
    if (*(_BYTE *)(a3 + 44))
    {
LABEL_19:
      v165 = v167;
      v166 = v168;
      v27 = *(_QWORD *)(a2 + 200);
      v28 = *(_QWORD *)(a2 + 208);
      while (v27 != v28)
      {
        if (*(_DWORD *)(v27 + 16) == (_DWORD)v13)
        {
          v29 = *(float64x2_t *)v27;
          LODWORD(v166) = *(_DWORD *)(v27 + 16);
          v165 = v29;
        }
        v27 += 32;
      }
      v30 = sub_20E9DF85C(v14, (uint64_t *)&v165);
      *(_QWORD *)&v31.f64[0] = v15[47];
      v32.f64[1] = v162.f64[1];
      *(_QWORD *)&v33 = *(_OWORD *)&vsubq_f64(v31, v163);
      v34.f64[0] = v161;
      v34.f64[1] = v162.f64[0];
      v35 = vsubq_f64(*(float64x2_t *)(v15 + 45), v34);
      v36 = 1.0;
      if (fabs(v35.f64[0]) >= 1.0e-10 || fabs(v35.f64[1]) >= 1.0e-10 || fabs(v33) >= 1.0e-10)
      {
        *(_QWORD *)&v32.f64[0] = v30[47];
        *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vsubq_f64(v32, v163);
        v37.f64[0] = v161;
        v37.f64[1] = v162.f64[0];
        v38 = vsubq_f64(*(float64x2_t *)(v30 + 45), v37);
        if (fabs(v38.f64[0]) >= 1.0e-10 || fabs(v38.f64[1]) >= 1.0e-10 || fabs(v32.f64[0]) >= 1.0e-10)
        {
          v35.f64[1] = *(double *)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).i64;
          v38.f64[1] = *(double *)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).i64;
          v36 = (vmulq_f64(v35, v38).f64[0] + v35.f64[1] * v38.f64[1] + v33 * v32.f64[0])
              / sqrt((vmulq_f64(v35, v35).f64[0] + v35.f64[1] * v35.f64[1] + v33 * v33)* (vmulq_f64(v38, v38).f64[0] + v38.f64[1] * v38.f64[1] + v32.f64[0] * v32.f64[0]));
        }
      }
      v39 = 1.0;
      if (v36 <= 1.0)
        v39 = v36;
      v40 = v39;
      *((float *)a5 + 4) = v40;
    }
  }
  else
  {
    v25 = *(double *)(a3 + 16);
    v26 = fmin(1.0, 1.0);
    *((double *)a5 + 1) = v26;
    if (*(_BYTE *)(a3 + 44))
      goto LABEL_19;
  }
  v41 = v26 <= v25;
  if (v26 > v25)
  {
    result = 0;
    *((_BYTE *)a5 + 4) = 0;
    *((_BYTE *)a5 + 20) = 0;
    if ((a4 & 1) != 0)
      return result;
    v42 = 1;
    v43 = *(uint64_t **)(a2 + 200);
    v44 = *(uint64_t **)(a2 + 208);
    if (v43 == v44)
      goto LABEL_244;
  }
  else
  {
    v42 = a4 ^ 1;
    v43 = *(uint64_t **)(a2 + 200);
    v44 = *(uint64_t **)(a2 + 208);
    if (v43 == v44)
      goto LABEL_244;
  }
  v45 = 0;
  v46 = *(double *)(a3 + 24);
  v159 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v163.f64[0], 0);
  v160 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v162.f64[0], 0);
  do
  {
    v47 = sub_20E9DF85C(v14, v43);
    if (!v47
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 829, (uint64_t)"camPoseIter != camera_data_.end()", 33, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v49.f64[1] = v163.f64[1];
    v48.f64[0] = *((double *)v47 + 19) * v161
               + *((double *)v47 + 23) * v162.f64[0]
               + *((double *)v47 + 27) * v163.f64[0];
    *(_QWORD *)&v49.f64[0] = v47[31];
    v165 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v47 + 17), v161), v160, *(float64x2_t *)(v47 + 21)), v159, *(float64x2_t *)(v47 + 25)), *(float64x2_t *)(v47 + 29));
    v166 = *(_OWORD *)&vaddq_f64(v48, v49);
    v50 = (float32x2_t *)v43[3];
    if (!v50)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 833, (uint64_t)"node.getFeaturePointer()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v50 = (float32x2_t *)v43[3];
    }
    v51 = v50[4].f32[0];
    v52 = v50[1];
    if (*(double *)&v166 >= 0.0 && *(double *)&v166 >= *(double *)(a3 + 8) && *(double *)&v166 <= *(double *)(a3 + 32))
    {
      v53 = 1;
      v54 = v47[49];
      v55 = *(_DWORD *)(v54 + 992);
      if (v55 != -1)
      {
LABEL_49:
        if (v55 > 7)
          goto LABEL_65;
        goto LABEL_50;
      }
    }
    else
    {
      LOBYTE(v41) = 0;
      v53 = 0;
      v54 = v47[49];
      v55 = *(_DWORD *)(v54 + 992);
      if (v55 != -1)
        goto LABEL_49;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v55 = *(_DWORD *)(v54 + 992);
    if (v55 > 7)
    {
LABEL_65:
      if (v55 > 0xB)
      {
        if (v55 <= 0xD)
        {
          if (v55 != 13 || *(double *)&v166 < 0.00000001)
            goto LABEL_225;
          _Q0 = vdivq_f64(v165, (float64x2_t)vdupq_lane_s64(v166, 0));
          v60 = (*(double *)v54 + *(double *)(v54 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v66 = v60 * (_D2 * v60);
          v169 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v66* (*(double *)(v54 + 168)+ v60 * *(double *)(v54 + 224)+ v66* (*(double *)(v54 + 176)+ v60 * *(double *)(v54 + 232)+ v66* (*(double *)(v54 + 184)+ v60 * *(double *)(v54 + 240)+ v66* (*(double *)(v54 + 192)+ v60 * *(double *)(v54 + 248)+ v66* (*(double *)(v54 + 200)+ v60 * *(double *)(v54 + 256)+ v66
                                       * (*(double *)(v54 + 208)
                                        + v60 * *(double *)(v54 + 264)
                                        + v66 * (*(double *)(v54 + 216) + *(double *)(v54 + 272) * v60 + v66 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
          v56 = *(_DWORD *)(v54 + 992);
          if (v56 != -1)
            goto LABEL_136;
          goto LABEL_80;
        }
        if (v55 == 14)
          v58 = sub_20EB247C0(&v169, (uint64_t)&v165, (double *)(v54 + 168), (*(double *)v54 + *(double *)(v54 + 32)) * 0.5);
        else
          v58 = sub_20EB3E39C(v54, &v169, &v165);
      }
      else if (v55 > 9)
      {
        if (v55 == 10)
          v58 = sub_20EB24288(&v169, (uint64_t)&v165, (double *)(v54 + 168), (*(double *)v54 + *(double *)(v54 + 32)) * 0.5);
        else
          v58 = sub_20EB3A2E4(v54, &v169, &v165);
      }
      else
      {
        if (v55 != 9)
        {
          _V0.D[1] = v165.f64[1];
          _D1 = v165.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v91 = sqrt(_D7);
          v92 = fabs(*(double *)&v166);
          v93 = fabs(v91);
          v94 = v92 / v93;
          if (v92 >= v93)
            v94 = v93 / v92;
          v95 = (v93 - v92) / (v92 + v93);
          if (v92 >= v93)
            v95 = -v95;
          if (v94 > 0.414213562)
            v96 = 1;
          else
            v96 = 2;
          if (v94 > 0.414213562)
            v97 = -1;
          else
            v97 = 1;
          if (v94 <= 0.414213562)
            v95 = v94;
          if (_D7 >= 0.00000001)
          {
            if (v92 < v93)
              v97 = -v97;
            else
              v96 = v94 > 0.414213562;
            v130 = v91 == INFINITY && v92 == INFINITY;
            v131 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v95 * v95), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v95 * v95), (float64x2_t)xmmword_210315370), v95 * v95 * (v95 * v95))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v95 * v95), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v95 * v95), (float64x2_t)xmmword_210315380), v95 * v95 * (v95 * v95))), v95 * v95 * (v95 * v95) * (v95 * v95 * (v95 * v95))));
            v132 = v95 + v95 * vdivq_f64(v131, (float64x2_t)vdupq_laneq_s64((int64x2_t)v131, 1)).f64[0];
            if (v130)
              v132 = 0.785398163;
            if (v91 == 0.0 && *(double *)&v166 == 0.0)
              v134 = 0.0;
            else
              v134 = v132;
            if (v166 < 0)
            {
              v96 = 4 - v96;
              v97 = -v97;
            }
            if (v91 < 0.0)
              v96 = -v96;
            v135 = (double)v96;
            if (v91 >= 0.0)
              v136 = v97;
            else
              v136 = -v97;
            v137 = v135 * 3.061617e-17 + v135 * 0.785398163 + v134 * (double)v136;
            v98 = 1.0
                / v91
                * (v137
                 * (v137
                  * v137
                  * (*(double *)(v54 + 168)
                   + v137
                   * v137
                   * (*(double *)(v54 + 176)
                    + v137
                    * v137
                    * (*(double *)(v54 + 184)
                     + v137
                     * v137
                     * (*(double *)(v54 + 192)
                      + v137
                      * v137
                      * (*(double *)(v54 + 200)
                       + v137 * v137 * (*(double *)(v54 + 208) + v137 * v137 * *(double *)(v54 + 216)))))))
                  + 1.0));
          }
          else
          {
            v98 = 1.0 / *(double *)&v166;
          }
          v73 = vmulq_n_f64(v165, v98);
          v169 = v73;
          v74 = v73.f64[1];
          goto LABEL_196;
        }
        v58 = sub_20EB3641C(v54, &v169, &v165);
      }
LABEL_134:
      if ((v58 & 1) == 0)
        goto LABEL_225;
      v56 = *(_DWORD *)(v54 + 992);
      if (v56 != -1)
        goto LABEL_136;
      goto LABEL_80;
    }
LABEL_50:
    if (v55 > 3)
    {
      if (v55 <= 5)
      {
        if (v55 != 5)
        {
          _V0.D[1] = v165.f64[1];
          _D1 = v165.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v80 = sqrt(_D7);
          v81 = fabs(*(double *)&v166);
          v82 = fabs(v80);
          v83 = v81 / v82;
          if (v81 >= v82)
            v83 = v82 / v81;
          v84 = (v82 - v81) / (v81 + v82);
          if (v81 >= v82)
            v84 = -v84;
          if (v83 > 0.414213562)
            v85 = 1;
          else
            v85 = 2;
          if (v83 > 0.414213562)
            v86 = -1;
          else
            v86 = 1;
          if (v83 <= 0.414213562)
            v84 = v83;
          if (_D7 >= 0.00000001)
          {
            if (v81 < v82)
              v86 = -v86;
            else
              v85 = v83 > 0.414213562;
            _ZF = v80 == INFINITY && v81 == INFINITY;
            v119 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v84 * v84), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v84 * v84), (float64x2_t)xmmword_210315370), v84 * v84 * (v84 * v84))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v84 * v84), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v84 * v84), (float64x2_t)xmmword_210315380), v84 * v84 * (v84 * v84))), v84 * v84 * (v84 * v84) * (v84 * v84 * (v84 * v84))));
            v120 = v84 + v84 * vdivq_f64(v119, (float64x2_t)vdupq_laneq_s64((int64x2_t)v119, 1)).f64[0];
            if (_ZF)
              v120 = 0.785398163;
            if (v80 == 0.0 && *(double *)&v166 == 0.0)
              v122 = 0.0;
            else
              v122 = v120;
            if (v166 < 0)
            {
              v85 = 4 - v85;
              v86 = -v86;
            }
            if (v80 < 0.0)
              v85 = -v85;
            v123 = (double)v85;
            if (v80 >= 0.0)
              v124 = v86;
            else
              v124 = -v86;
            v125 = v123 * 3.061617e-17 + v123 * 0.785398163 + v122 * (double)v124;
            v126 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v54 + 168), *(int64x2_t *)(v54 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v54 + 168), *(int64x2_t *)(v54 + 184)), v125 * v125)), v125 * v125);
            v87 = 1.0 / v80 * (v125 + v125 * (v126.f64[0] + vmuld_lane_f64(v125 * v125 * (v125 * v125), v126, 1)));
          }
          else
          {
            v87 = 1.0 / *(double *)&v166;
          }
          v111 = vmulq_n_f64(v165, v87);
          v169 = v111;
          v112 = v111.f64[1];
          goto LABEL_172;
        }
        v57 = v165.f64[0] * v165.f64[0] + v165.f64[1] * v165.f64[1];
        if (v57 >= 0.00000001)
        {
          v114 = sqrt(v57);
          if (v114 <= *(double *)&v166)
          {
            v155 = v114 / *(double *)&v166 * 0.785398163
                 - v114
                 / *(double *)&v166
                 * (v114 / *(double *)&v166 + -1.0)
                 * (v114 / *(double *)&v166 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v114 <= -*(double *)&v166)
            {
              v116 = v114 / *(double *)&v166 * 0.785398163
                   - v114
                   / *(double *)&v166
                   * (-1.0 - v114 / *(double *)&v166)
                   * (v114 / *(double *)&v166 * -0.0663008339 + 0.244711287);
              v117 = 3.14159265;
            }
            else
            {
              v115 = fabs(*(double *)&v166 / v114);
              v116 = *(double *)&v166 / v114 * (v115 + -1.0) * (v115 * 0.0663008339 + 0.244711287)
                   + *(double *)&v166 / v114 * -0.785398163;
              v117 = 1.57079633;
            }
            v155 = v116 + v117;
          }
          v156 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v54 + 168), *(int64x2_t *)(v54 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v54 + 168), *(int64x2_t *)(v54 + 184)), v155 * v155)), v155 * v155);
          v157 = (v155 + v155 * (v156.f64[0] + vmuld_lane_f64(v155 * v155 * (v155 * v155), v156, 1))) / v114;
          v169.f64[0] = v165.f64[0] * v157;
          v169.f64[1] = v165.f64[1] * v157;
          v56 = *(_DWORD *)(v54 + 992);
          if (v56 != -1)
            goto LABEL_136;
        }
        else
        {
          if (*(double *)&v166 == 0.0)
            goto LABEL_225;
          v169.f64[0] = v165.f64[0] * (1.0 / *(double *)&v166);
          v169.f64[1] = v165.f64[1] * (1.0 / *(double *)&v166);
          v56 = *(_DWORD *)(v54 + 992);
          if (v56 != -1)
            goto LABEL_136;
        }
        goto LABEL_80;
      }
      if (v55 == 6)
      {
        v71 = vaddq_f64(vdivq_f64(v165, (float64x2_t)vdupq_lane_s64(v166, 0)), *(float64x2_t *)(v54 + 192));
        v72 = sqrt(vaddvq_f64(vmulq_f64(v71, v71)));
        v169 = vaddq_f64(*(float64x2_t *)(v54 + 208), vmulq_n_f64(v71, v72* (v72* (*(double *)(v54 + 168) + v72 * (*(double *)(v54 + 176) + *(double *)(v54 + 184) * v72)))+ 1.0));
        v56 = *(_DWORD *)(v54 + 992);
        if (v56 != -1)
          goto LABEL_136;
        goto LABEL_80;
      }
      v58 = sub_20EB31FFC(v54, &v169, &v165);
      goto LABEL_134;
    }
    if (v55 > 1)
    {
      if (v55 != 2)
      {
        _V0.D[1] = v165.f64[1];
        _D1 = v165.f64[1];
        __asm { FMLA            D7, D1, V0.D[1] }
        v102 = sqrt(_D7);
        v103 = fabs(*(double *)&v166);
        v104 = fabs(v102);
        v105 = v103 / v104;
        if (v103 >= v104)
          v105 = v104 / v103;
        v106 = (v104 - v103) / (v103 + v104);
        if (v103 >= v104)
          v106 = -v106;
        if (v105 > 0.414213562)
          v107 = 1;
        else
          v107 = 2;
        if (v105 > 0.414213562)
          v108 = -1;
        else
          v108 = 1;
        if (v105 <= 0.414213562)
          v106 = v105;
        if (_D7 >= 0.00000001)
        {
          if (v103 < v104)
            v108 = -v108;
          else
            v107 = v105 > 0.414213562;
          v138 = v102 == INFINITY && v103 == INFINITY;
          v139 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v106 * v106), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v106 * v106), (float64x2_t)xmmword_210315370), v106 * v106 * (v106 * v106))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v106 * v106), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v106 * v106), (float64x2_t)xmmword_210315380), v106 * v106 * (v106 * v106))), v106 * v106 * (v106 * v106) * (v106 * v106 * (v106 * v106))));
          v140 = v106 + v106 * vdivq_f64(v139, (float64x2_t)vdupq_laneq_s64((int64x2_t)v139, 1)).f64[0];
          if (v138)
            v140 = 0.785398163;
          if (v102 == 0.0 && *(double *)&v166 == 0.0)
            v142 = 0.0;
          else
            v142 = v140;
          if (v166 < 0)
          {
            v107 = 4 - v107;
            v108 = -v108;
          }
          if (v102 < 0.0)
            v107 = -v107;
          v143 = (double)v107;
          if (v102 >= 0.0)
            v144 = v108;
          else
            v144 = -v108;
          v145 = v143 * 3.061617e-17 + v143 * 0.785398163 + v142 * (double)v144;
          v146 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v54 + 168), *(int64x2_t *)(v54 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v54 + 168), *(int64x2_t *)(v54 + 184)), v145 * v145)), v145 * v145);
          v109 = 1.0 / v102 * (v145 + v145 * (v146.f64[0] + vmuld_lane_f64(v145 * v145 * (v145 * v145), v146, 1)));
        }
        else
        {
          v109 = 1.0 / *(double *)&v166;
        }
        v70 = vmulq_n_f64(v165, v109);
        goto LABEL_220;
      }
      if (*(_DWORD *)(v54 + 212))
      {
        if (*(double *)&v166 >= 0.00000001)
        {
          _Q2 = vmulq_n_f64(v165, 1.0 / *(double *)&v166);
          _D0 = vmuld_lane_f64(1.0 / *(double *)&v166, v165, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v70 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v54 + 192), *(int8x16_t *)(v54 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v54 + 192), *(float64x2_t *)(v54 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v54 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v54 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v54 + 184) * *(double *)&_D1))));
LABEL_220:
          v169 = v70;
          goto LABEL_221;
        }
      }
      else if (*(double *)&v166 >= 0.00000001)
      {
        _Q2 = vmulq_n_f64(v165, 1.0 / *(double *)&v166);
        _D0 = vmuld_lane_f64(1.0 / *(double *)&v166, v165, 1);
        __asm { FMLA            D1, D0, V2.D[1] }
        v70 = vmulq_n_f64(_Q2, *(double *)(v54 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(v54 + 176) + *(double *)(v54 + 184) * _D1));
        goto LABEL_220;
      }
LABEL_225:
      LOBYTE(v41) = 0;
      v53 = 0;
      goto LABEL_226;
    }
    if (!v55)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (*(double *)&v166 < 0.00000001)
      goto LABEL_225;
    v169 = vmulq_n_f64(v165, 1.0 / *(double *)&v166);
    v56 = *(_DWORD *)(v54 + 992);
    if (v56 != -1)
    {
LABEL_136:
      if (v56 > 7)
        goto LABEL_82;
      goto LABEL_137;
    }
LABEL_80:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v56 = *(_DWORD *)(v54 + 992);
    if (v56 > 7)
    {
LABEL_82:
      v73.f64[0] = v169.f64[0];
      if (v56 <= 9)
      {
        v74 = v169.f64[1];
LABEL_196:
        v127.f64[0] = *(double *)(v54 + 16) + *(double *)v54 * v73.f64[0] + *(double *)(v54 + 8) * v74;
        v128 = *(double *)(v54 + 40);
        v129 = v74 * *(double *)(v54 + 32);
        goto LABEL_222;
      }
      v75 = *(double *)(v54 + 8);
      v76 = *(double *)v54 * v169.f64[0];
LABEL_145:
      v113.f64[0] = *(double *)(v54 + 16) + v76 + v75 * v169.f64[1];
      v113.f64[1] = *(double *)(v54 + 40) + *(double *)(v54 + 32) * v169.f64[1];
      v164 = v113;
      goto LABEL_226;
    }
LABEL_137:
    if (v56 > 3)
    {
      v111.f64[0] = v169.f64[0];
      if (v56 > 5)
      {
        v75 = *(double *)(v54 + 8);
        v76 = *(double *)v54 * v169.f64[0];
        goto LABEL_145;
      }
      v112 = v169.f64[1];
LABEL_172:
      v127.f64[0] = *(double *)(v54 + 16) + *(double *)v54 * v111.f64[0] + *(double *)(v54 + 8) * v112;
      v128 = *(double *)(v54 + 40);
      v129 = v112 * *(double *)(v54 + 32);
LABEL_222:
      v127.f64[1] = v129 + v128;
      v164 = v127;
      goto LABEL_226;
    }
    if (v56 > 1)
    {
      v70 = v169;
LABEL_221:
      v127.f64[0] = *(double *)(v54 + 16) + *(double *)v54 * v70.f64[0] + vmuld_lane_f64(*(double *)(v54 + 8), v70, 1);
      v128 = *(double *)(v54 + 40);
      v129 = vmuld_lane_f64(*(double *)(v54 + 32), v70, 1);
      goto LABEL_222;
    }
    if (!v56)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v110.f64[0] = *(double *)(v54 + 16) + *(double *)v54 * v169.f64[0] + *(double *)(v54 + 8) * v169.f64[1];
    v110.f64[1] = v169.f64[1] * *(double *)(v54 + 32) + *(double *)(v54 + 40);
    v164 = v110;
LABEL_226:
    _D3 = vsubq_f64(v164, vcvtq_f64_f32(v52)).f64[1];
    __asm { FMLA            D0, D3, V2.D[1] }
    v152 = *(double *)a3 * v51 * (*(double *)a3 * v51);
    v41 = (_D0 <= v152) & v41;
    v153 = *a5;
    if (_D0 < v46)
      ++v153;
    *a5 = v153;
    if ((v42 | v41) != 1)
    {
      result = 0;
      *((_BYTE *)a5 + 4) = 0;
      *((_BYTE *)a5 + 20) = 0;
      return result;
    }
    if (_D0 > v152)
      v154 = 0;
    else
      v154 = v53;
    v45 += v154;
    v43 += 4;
  }
  while (v43 != v44);
  if (v45)
  {
    v158 = v45 >= *(_DWORD *)(a3 + 40);
    goto LABEL_245;
  }
LABEL_244:
  v158 = 0;
LABEL_245:
  *((_BYTE *)a5 + 4) = v158;
  *((_BYTE *)a5 + 20) = v41;
  return v41;
}

void sub_20F2C6810(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F2C6BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2C6BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2C6BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2C6BFC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, double a6, double a7, double a8, float64x2_t a9, double a10, float64x2_t a11, double a12, float64x2_t a13)
{
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  void **v34;
  uint64_t v35;
  double v37;
  double v38;
  double v39;
  _BOOL4 v40;
  _BOOL4 v41;
  int v42;
  int v43;
  uint64_t *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  double v52;
  double v53;
  double v54;
  double v55;
  char v56;
  float64x2_t v57;
  char v58;
  _BOOL4 v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t *v67;
  double v68;
  double v75;
  float64x2_t *v76;
  float64x2_t *v79;
  float64x2_t v80;
  double v82;
  double v84;
  float v87;
  float v88;
  unint64_t v89;
  const void **v90;
  float v91;
  float v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  const char *v98;
  size_t v99;
  unint64_t v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  _BYTE *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  size_t v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  size_t v115;
  size_t v116;
  uint64_t *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _QWORD *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  char *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  const char *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unsigned __int8 v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  int v180;
  int v181;
  char v182;
  unsigned int v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 v191;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v192;
  const char *v193;
  NSObject *v194;
  int v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 v202;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v203;
  const char *v204;
  NSObject *v205;
  uint64_t v206;
  const char *v207;
  char *__s;
  unsigned __int8 v209;
  BOOL v210;
  unsigned __int8 v211;
  unsigned __int8 v212;
  uint64_t *v213;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v215;
  int v216;
  const char *v217;
  int v218;
  const char *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  void *__dst[2];
  int64_t v223;
  void *__p;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD v228[3];
  uint64_t v229;
  unint64_t v230;
  void *v231;
  char v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  double v238;
  double v239;
  double v240;
  __int128 v241;
  std::__shared_weak_count *v242;
  char *v243;
  std::__shared_weak_count *v244;
  uint64_t *v245;
  __int128 v246;
  _BYTE v247[24];
  __int128 v248;
  char *v249;
  const char *v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD v253[5];

  v253[2] = *MEMORY[0x24BDAC8D0];
  v19 = *(double *)(a4 + 168);
  v18 = *(double *)(a4 + 176);
  v239 = v18;
  v240 = v19;
  v20 = *(double *)(a4 + 184);
  v21 = *(double *)(a4 + 192);
  v237 = v21;
  v238 = v20;
  if (*(_QWORD *)(a1 + 232) == *(_QWORD *)(a4 + 120) && *(_DWORD *)(a1 + 240) == *(_DWORD *)(a4 + 128))
    return 0;
  v22 = *(_QWORD *)(a4 + 160);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 120);
  if (v22 < v23 && v22 < v24)
    return 0;
  if (*(_BYTE *)(a4 + 208) && *(_DWORD *)(a4 + 204) < *(_DWORD *)(a1 + 84))
    return 0;
  if (*(_BYTE *)(a4 + 202))
  {
    sub_20F2C8220(&v236);
    if (**(int **)(v236 + 56) > 2)
      return 1;
    v25 = *(unsigned __int8 *)(v236 + 72);
    v26 = sub_20E8C31DC(v236, "OSLogSurrogateAppender", 1, 0);
    v27 = v26;
    if (!v25 && !v26)
      return 1;
    sub_20E863438((uint64_t)&__p);
    v28 = sub_20E86A980(&v226, (uint64_t)"Create regular map keyframe ", 28);
    v29 = *(_DWORD *)(a4 + 128);
    v213 = *(uint64_t **)(a4 + 120);
    LODWORD(rep) = v29;
    sub_210216370((uint64_t)&v213);
    if (v247[23] >= 0)
      v30 = v247;
    else
      v30 = *(_BYTE **)v247;
    if (v247[23] >= 0)
      v31 = v247[23];
    else
      v31 = *(_QWORD *)&v247[8];
    v32 = sub_20E86A980(v28, (uint64_t)v30, v31);
    sub_20E86A980(v32, (uint64_t)" because relocalization event", 29);
    if ((v247[23] & 0x80000000) != 0)
      operator delete(*(void **)v247);
    if ((v234 & 0x10) != 0)
    {
      v89 = v233;
      if (v233 < v230)
      {
        v233 = v230;
        v89 = v230;
      }
      v90 = (const void **)&v229;
    }
    else
    {
      if ((v234 & 8) == 0)
      {
        v33 = 0;
        HIBYTE(v223) = 0;
        v34 = __dst;
        goto LABEL_101;
      }
      v90 = (const void **)v228;
      v89 = v228[2];
    }
    v93 = *v90;
    v33 = v89 - (_QWORD)*v90;
    if (v33 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v33 >= 0x17)
    {
      v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v94 = v33 | 7;
      v95 = v94 + 1;
      v34 = (void **)operator new(v94 + 1);
      __dst[1] = (void *)v33;
      v223 = v95 | 0x8000000000000000;
      __dst[0] = v34;
    }
    else
    {
      HIBYTE(v223) = v89 - *(_BYTE *)v90;
      v34 = __dst;
      if (!v33)
      {
LABEL_101:
        *((_BYTE *)v34 + v33) = 0;
        v213 = &v236;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v215 = std::chrono::system_clock::now().__d_.__rep_;
        v216 = 2;
        v217 = "unknown file";
        v218 = 86;
        v220 = 0;
        v221 = 0;
        v219 = "unknown function";
        if (v223 >= 0)
          v96 = __dst;
        else
          v96 = (void **)__dst[0];
        v97 = *v213;
        v98 = (const char *)(*v213 + 16);
        v207 = v98;
        __s = (char *)v96;
        v206 = *v213;
        if (*(char *)(*v213 + 39) < 0)
        {
          v98 = *(const char **)(v97 + 16);
          v99 = *(_QWORD *)(v97 + 24);
        }
        else
        {
          v99 = *(unsigned __int8 *)(*v213 + 39);
        }
        v100 = v27;
        v101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v247);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v247);
          if ((_BYTE)v248 && (v247[23] & 0x80000000) != 0)
            operator delete(*(void **)v247);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v102 = byte_254A4A4F8;
        else
          v102 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v103 = byte_254A4A4F8[23];
        else
          v103 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v247 = os_log_create(v102, v98);
        v104 = &v247[8];
        if (v103 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v103 >= 0x17)
        {
          v105 = v25;
          v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v103 | 7) != 0x17)
            v106 = v103 | 7;
          v107 = v106 + 1;
          v104 = operator new(v106 + 1);
          *(_QWORD *)&v247[16] = v103;
          *(_QWORD *)&v248 = v107 | 0x8000000000000000;
          *(_QWORD *)&v247[8] = v104;
          v25 = v105;
        }
        else
        {
          BYTE7(v248) = v103;
          if (!v103)
          {
LABEL_122:
            v104[v103] = 0;
            BYTE8(v248) = 1;
            v108 = (char *)&v249;
            if (v99 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v99 >= 0x17)
            {
              v109 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v99 | 7) != 0x17)
                v109 = v99 | 7;
              v110 = v109 + 1;
              v108 = (char *)operator new(v109 + 1);
              v250 = (const char *)v99;
              v251 = v110 | 0x8000000000000000;
              v249 = v108;
            }
            else
            {
              HIBYTE(v251) = v99;
              if (!v99)
              {
LABEL_130:
                v108[v99] = 0;
                LOBYTE(v252) = 1;
                v111 = *(NSObject **)v247;
                if (SHIBYTE(v251) < 0)
                  operator delete(v249);
                if (BYTE8(v248) && SBYTE7(v248) < 0)
                  operator delete(*(void **)&v247[8]);
                if (*(_QWORD *)v247)
                  os_release(*(void **)v247);
                if (!v100 || !*(_QWORD *)(v100 + 24))
                {
                  os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v247 = 136315138;
                  *(_QWORD *)&v247[4] = __s;
                  v118 = (void *)_os_log_send_and_compose_impl();
                  if (v118)
                    free(v118);
                  goto LABEL_211;
                }
                v112 = _os_log_pack_size();
                v113 = (std::__shared_weak_count_vtbl *)operator new(v112, (std::align_val_t)8uLL);
                v114 = (std::__shared_weak_count *)operator new();
                v114->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v114->__shared_owners_ = 0;
                v114->__shared_weak_owners_ = 0;
                v114[1].__vftable = v113;
                *(_QWORD *)&v241 = v113;
                *((_QWORD *)&v241 + 1) = v113;
                v243 = 0;
                v244 = 0;
                v242 = v114;
                v115 = strlen(__s);
                if (v115 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v116 = v115;
                if (v115 >= 0x17)
                {
                  v119 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v115 | 7) != 0x17)
                    v119 = v115 | 7;
                  v120 = v119 + 1;
                  v117 = (uint64_t *)operator new(v119 + 1);
                  *(_QWORD *)&v246 = v116;
                  *((_QWORD *)&v246 + 1) = v120 | 0x8000000000000000;
                  v245 = v117;
                }
                else
                {
                  HIBYTE(v246) = v115;
                  v117 = (uint64_t *)&v245;
                  if (!v115)
                  {
LABEL_150:
                    *((_BYTE *)v117 + v116) = 0;
                    v121 = (uint64_t)v245;
                    v253[0] = v246;
                    *(_QWORD *)((char *)v253 + 7) = *(_QWORD *)((char *)&v246 + 7);
                    v122 = HIBYTE(v246);
                    v123 = operator new(0x38uLL);
                    v123[1] = 0;
                    v123[2] = 0;
                    v123[3] = off_24C9ABC20;
                    *v123 = &off_24C9ABBD0;
                    v124 = v253[0];
                    v123[4] = v121;
                    v123[5] = v124;
                    *(_QWORD *)((char *)v123 + 47) = *(_QWORD *)((char *)v253 + 7);
                    *((_BYTE *)v123 + 55) = v122;
                    v253[0] = 0;
                    *(_QWORD *)((char *)v253 + 7) = 0;
                    v125 = v244;
                    v243 = (char *)(v123 + 3);
                    v244 = (std::__shared_weak_count *)v123;
                    if (v125)
                    {
                      p_shared_owners = (unint64_t *)&v125->__shared_owners_;
                      do
                        v127 = __ldaxr(p_shared_owners);
                      while (__stlxr(v127 - 1, p_shared_owners));
                      if (!v127)
                      {
                        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                        std::__shared_weak_count::__release_weak(v125);
                      }
                    }
                    *(_OWORD *)v247 = v241;
                    v128 = v243;
                    *(_QWORD *)&v247[16] = v242;
                    if (v242)
                    {
                      v129 = (unint64_t *)&v242->__shared_owners_;
                      do
                        v130 = __ldxr(v129);
                      while (__stxr(v130 + 1, v129));
                    }
                    v131 = v244;
                    *(_QWORD *)&v248 = v128;
                    *((_QWORD *)&v248 + 1) = v244;
                    if (v244)
                    {
                      v132 = (unint64_t *)&v244->__shared_owners_;
                      do
                        v133 = __ldxr(v132);
                      while (__stxr(v133 + 1, v132));
                      v249 = v128;
                      do
                        v134 = __ldaxr(v132);
                      while (__stlxr(v134 - 1, v132));
                      if (!v134)
                      {
                        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                        std::__shared_weak_count::__release_weak(v131);
                      }
                    }
                    else
                    {
                      v249 = v128;
                    }
                    v135 = v242;
                    if (v242)
                    {
                      v136 = (unint64_t *)&v242->__shared_owners_;
                      do
                        v137 = __ldaxr(v136);
                      while (__stlxr(v137 - 1, v136));
                      if (!v137)
                      {
                        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                        std::__shared_weak_count::__release_weak(v135);
                      }
                    }
                    if (v249[31] >= 0)
                      v138 = v249 + 8;
                    else
                      v138 = (char *)*((_QWORD *)v249 + 1);
                    v139 = *(_QWORD *)v247;
                    v140 = _os_log_pack_fill();
                    *(_DWORD *)v140 = 136315138;
                    *(_QWORD *)(v140 + 4) = v138;
                    v141 = operator new();
                    v142 = *(unsigned __int8 *)(v206 + 39);
                    v143 = *(const char **)(v206 + 16);
                    v144 = *(_QWORD *)(v206 + 24);
                    v145 = v248;
                    *(_OWORD *)(v141 + 8) = *(_OWORD *)&v247[8];
                    if ((v142 & 0x80u) != 0)
                      v142 = v144;
                    else
                      v143 = v207;
                    *(_QWORD *)v141 = v139;
                    *(_QWORD *)&v247[8] = 0;
                    *(_QWORD *)&v247[16] = 0;
                    *(_OWORD *)(v141 + 24) = v145;
                    v248 = 0uLL;
                    *(_QWORD *)(v141 + 40) = v143;
                    *(_QWORD *)(v141 + 48) = v142;
                    *(_BYTE *)(v141 + 56) = 2;
                    v245 = 0;
                    *(_QWORD *)&v241 = v141;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v100 + 24) + 40))(*(_QWORD *)(v100 + 24), &v241);
                    v146 = v241;
                    *(_QWORD *)&v241 = 0;
                    if (v146)
                    {
                      v147 = *(std::__shared_weak_count **)(v146 + 32);
                      if (v147)
                      {
                        v148 = (unint64_t *)&v147->__shared_owners_;
                        do
                          v149 = __ldaxr(v148);
                        while (__stlxr(v149 - 1, v148));
                        if (!v149)
                        {
                          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                          std::__shared_weak_count::__release_weak(v147);
                        }
                      }
                      v150 = *(std::__shared_weak_count **)(v146 + 16);
                      if (v150)
                      {
                        v151 = (unint64_t *)&v150->__shared_owners_;
                        do
                          v152 = __ldaxr(v151);
                        while (__stlxr(v152 - 1, v151));
                        if (!v152)
                        {
                          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                          std::__shared_weak_count::__release_weak(v150);
                        }
                      }
                      MEMORY[0x212BC6398](v146, 0x10F0C40B62ED6C6);
                      v153 = (uint64_t)v245;
                      v245 = 0;
                      if (v153)
                      {
                        v154 = *(std::__shared_weak_count **)(v153 + 32);
                        if (v154)
                        {
                          v155 = (unint64_t *)&v154->__shared_owners_;
                          do
                            v156 = __ldaxr(v155);
                          while (__stlxr(v156 - 1, v155));
                          if (!v156)
                          {
                            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                            std::__shared_weak_count::__release_weak(v154);
                          }
                        }
                        v157 = *(std::__shared_weak_count **)(v153 + 16);
                        if (v157)
                        {
                          v158 = (unint64_t *)&v157->__shared_owners_;
                          do
                            v159 = __ldaxr(v158);
                          while (__stlxr(v159 - 1, v158));
                          if (!v159)
                          {
                            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                            std::__shared_weak_count::__release_weak(v157);
                          }
                        }
                        MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
                      }
                    }
                    v160 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
                    if (*((_QWORD *)&v248 + 1))
                    {
                      v161 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                      {
                        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                        std::__shared_weak_count::__release_weak(v160);
                      }
                    }
                    v163 = *(std::__shared_weak_count **)&v247[16];
                    if (*(_QWORD *)&v247[16])
                    {
                      v164 = (unint64_t *)(*(_QWORD *)&v247[16] + 8);
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
LABEL_211:
                    if (v25)
                    {
                      v166 = (const char *)__dst;
                      if (v223 < 0)
                        v166 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)&v213, "%s", v166);
                      sub_20E863570((uint64_t)&v213);
                    }
                    sub_20E863570((uint64_t)&v213);
                    v167 = v221;
                    if (v221)
                    {
                      v168 = (unint64_t *)&v221->__shared_owners_;
                      do
                        v169 = __ldaxr(v168);
                      while (__stlxr(v169 - 1, v168));
                      if (!v169)
                      {
                        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                        std::__shared_weak_count::__release_weak(v167);
                      }
                    }
                    if (SHIBYTE(v223) < 0)
                      operator delete(__dst[0]);
                    __p = (void *)*MEMORY[0x24BEDB7F0];
                    v170 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    v226 = v170;
                    v227 = MEMORY[0x24BEDB848] + 16;
                    if (v232 < 0)
                      operator delete(v231);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v235);
                    return 1;
                  }
                }
                memcpy(v117, __s, v116);
                goto LABEL_150;
              }
            }
            memmove(v108, v98, v99);
            goto LABEL_130;
          }
        }
        memmove(v104, v102, v103);
        goto LABEL_122;
      }
    }
    memmove(v34, v93, v33);
    goto LABEL_101;
  }
  if (*(_BYTE *)(a4 + 200) && !*(_BYTE *)(a1 + 80) && *(_QWORD *)(a2 + 64))
    return 0;
  v37 = *(double *)(a1 + 48);
  v38 = *(double *)(a1 + 136);
  v39 = *(double *)(a1 + 144);
  LOBYTE(__dst[0]) = v19 < v38;
  a13.f64[0] = *(float64_t *)(a1 + 64);
  a11.f64[0] = *(float64_t *)(a1 + 72);
  if (v19 >= v37)
  {
    v41 = 0;
  }
  else
  {
    v40 = v21 > *(double *)(a1 + 56);
    if (v18 >= a13.f64[0])
      v40 = 0;
    if (v20 >= a11.f64[0])
      v40 = 0;
    v41 = v22 >= v23 && v40;
  }
  if (v19 < v38)
    v42 = a5;
  else
    v42 = 0;
  if (v21 <= v39)
    v42 = 0;
  if (v18 >= a13.f64[0])
    v42 = 0;
  if (v20 >= a11.f64[0])
    v42 = 0;
  if (v22 >= v24)
    v43 = v42;
  else
    v43 = 0;
  LOBYTE(v253[0]) = 0;
  LOBYTE(v236) = 0;
  if (v41 && (v43 & 1) != 0)
  {
    v44 = *(uint64_t **)(a2 + 1800);
    if (v44)
    {
      v45 = *(double *)(a1 + 208);
      v46 = *(double *)(a1 + 224);
      v47 = *(double *)(a1 + 184);
      v48 = *(double *)(a1 + 200);
      v49 = a3[1];
      _D2 = vextq_s8(*(int8x16_t *)(a4 + 48), *(int8x16_t *)(a4 + 48), 8uLL).u64[0];
      v57 = *(float64x2_t *)(a4 + 72);
      _Q17 = (float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
      v52 = v48;
      v53 = v47;
      v54 = v46;
      v55 = v45;
      v56 = 1;
      v57.f64[1] = _Q17.f64[0];
      v58 = 1;
      while (1)
      {
        while (1)
        {
          if (v56)
          {
            v60 = 1;
            if (*a3 != v49)
            {
              v61 = *a3;
              while (*(_QWORD *)v61 != v44[2] || *(_DWORD *)(v61 + 8) != *((_DWORD *)v44 + 6))
              {
                v61 += 16;
                if (v61 == v49)
                {
                  v61 = a3[1];
                  break;
                }
              }
              v60 = v61 == v49;
            }
          }
          else
          {
            v60 = 0;
          }
          v62 = v44[5];
          v63 = *(float64x2_t *)v62;
          _Q19.f64[0] = *(float64_t *)(v62 + 40);
          v64 = *(float64x2_t *)(v62 + 24);
          v65 = *(double *)(v62 + 64);
          v66 = *(float64x2_t *)(v62 + 48);
          v67 = (float64x2_t *)v44[9];
          v68 = v67[4].f64[0];
          _Q24 = v67[3];
          _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, _Q24.f64[0]), v64, _Q24, 1), v66, v68);
          __asm { FMLA            D26, D19, V24.D[1] }
          v75 = _D26 + v65 * v68;
          v76 = (float64x2_t *)v44[11];
          _Q24.f64[0] = v76[1].f64[0];
          _Q26 = *v76;
          _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v76->f64[0]), v64, *v76, 1), v66, _Q24.f64[0]);
          __asm { FMLA            D17, D19, V26.D[1] }
          _Q17.f64[0] = _Q17.f64[0] + v65 * _Q24.f64[0];
          v79 = (float64x2_t *)v44[7];
          _Q19.f64[0] = v79[1].f64[0];
          v80 = vaddq_f64(_Q17, _Q19);
          __asm { FMLA            D17, D2, V25.D[1] }
          v82 = _D17 + *(double *)(a4 + 64) * v75;
          a9.f64[0] = *(float64_t *)(a4 + 88);
          _Q19 = vsubq_f64(a9, v80);
          _D21 = vsubq_f64(v57, vaddq_f64(_Q18, *v79)).f64[1];
          __asm { FMLA            D18, D21, V20.D[1] }
          v84 = vmlad_n_f64(_Q18.f64[0], _Q19.f64[0], _Q19.f64[0]);
          if (v60 && v82 > v52 && v84 < v53)
            break;
          v59 = v58 == 0;
          if (v82 <= v54)
            v59 = 1;
          if (v84 >= v55)
            v59 = 1;
          if (!v59)
            v58 = 0;
          if (!v59 && v56 == 0)
          {
LABEL_165:
            v56 = 0;
            v58 = 0;
            goto LABEL_227;
          }
          v44 = (uint64_t *)*v44;
          if (!v44)
            goto LABEL_227;
        }
        if (!v58)
          goto LABEL_165;
        v56 = 0;
        if (v82 > v54 && v84 < v55)
          break;
        v58 = 1;
        v44 = (uint64_t *)*v44;
        if (!v44)
          goto LABEL_227;
      }
      v58 = 0;
    }
    else
    {
      v56 = 1;
      v58 = 1;
    }
LABEL_227:
    LOBYTE(v253[0]) = v56;
    goto LABEL_228;
  }
  if (v41)
  {
    __p = (void *)a4;
    LODWORD(v225) = 0;
    v226 = a4 + 72;
    LODWORD(v227) = 0;
    v87 = *(double *)(a1 + 200);
    v88 = *(double *)(a1 + 184);
    v56 = sub_20F2C8314(*(uint64_t **)(a2 + 1800), (uint64_t)&__p, *a3, a3[1], v87, v88, v19, v21, v38, a11, v39, a13);
    LOBYTE(v253[0]) = v56;
  }
  else
  {
    v56 = 0;
  }
  if (v43)
  {
    __p = (void *)a4;
    LODWORD(v225) = 0;
    v226 = a4 + 72;
    LODWORD(v227) = 0;
    v91 = *(double *)(a1 + 224);
    v92 = *(double *)(a1 + 208);
    v58 = sub_20F2C8314(*(uint64_t **)(a2 + 1800), (uint64_t)&__p, 0, 0, v91, v92, v19, v21, v38, a11, v39, a13);
LABEL_228:
    LOBYTE(v236) = v58;
    goto LABEL_229;
  }
  v58 = 0;
LABEL_229:
  if (!v41 || (v171 = *(_QWORD *)(a4 + 96), v172 = *(_QWORD *)(a4 + 104), v171 == v172))
  {
LABEL_237:
    v175 = 0;
  }
  else
  {
    while (1)
    {
      v173 = *(_DWORD *)(v171 + 28);
      if (v173)
      {
        v174 = *(unsigned int *)(v171 + 24);
        if (*(_QWORD *)(a1 + 24) < v174 && (double)v174 / (double)v173 > *(double *)(a1 + 40))
          break;
      }
      v171 += 40;
      if (v171 == v172)
        goto LABEL_237;
    }
    v175 = 1;
  }
  v212 = v175;
  if (!v43 || (v176 = *(_QWORD *)(a4 + 96), v177 = *(_QWORD *)(a4 + 104), v176 == v177))
  {
LABEL_246:
    v180 = 0;
  }
  else
  {
    while (1)
    {
      v178 = *(_DWORD *)(v176 + 28);
      if (v178)
      {
        v179 = *(unsigned int *)(v176 + 24);
        if (*(_QWORD *)(a1 + 112) < v179 && (double)v179 / (double)v178 > *(double *)(a1 + 128))
          break;
      }
      v176 += 40;
      if (v176 == v177)
        goto LABEL_246;
    }
    v180 = 1;
  }
  v211 = v180;
  if (!v56)
    v175 = 1;
  if ((v175 & 1) != 0)
  {
    v210 = 0;
    if (v58)
    {
      v41 = 0;
      v181 = v43 & ~v180;
      v209 = v43 & ~(_BYTE)v180;
      if (!*(_BYTE *)(a1 + 176))
        goto LABEL_264;
    }
    else
    {
      v41 = 0;
      v181 = 0;
      v209 = 0;
      if (!*(_BYTE *)(a1 + 176))
        goto LABEL_264;
    }
LABEL_260:
    if (v41)
      v181 = 0;
    else
      v181 = a5;
    v209 = v181;
    goto LABEL_264;
  }
  v210 = v41;
  if (v58)
    v182 = v41;
  else
    v182 = 1;
  if ((v182 & 1) != 0)
  {
    v181 = 0;
    v209 = 0;
    if (!*(_BYTE *)(a1 + 176))
      goto LABEL_264;
    goto LABEL_260;
  }
  v181 = v43 & ~v180;
  v209 = v43 & ~(_BYTE)v180;
  if (*(_BYTE *)(a1 + 176))
    goto LABEL_260;
LABEL_264:
  v183 = 2 * v181;
  if (v41)
    v35 = 1;
  else
    v35 = v183;
  sub_20F2C8220(&v245);
  if (*(int *)v245[7] <= 2)
  {
    v184 = *((unsigned __int8 *)v245 + 72);
    v185 = sub_20E8C31DC((uint64_t)v245, "OSLogSurrogateAppender", 1, 0);
    v186 = v185 ? v185 + 16 : 0;
    if (v184 || v185)
    {
      *(_QWORD *)v247 = &v245;
      *(std::chrono::steady_clock::time_point *)&v247[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v247[16] = std::chrono::system_clock::now();
      *((_QWORD *)&v248 + 1) = "unknown file";
      LODWORD(v248) = 2;
      LODWORD(v249) = 185;
      v251 = 0;
      v252 = 0;
      v250 = "unknown function";
      v187 = **(_QWORD **)v247;
      v188 = (uint64_t *)(**(_QWORD **)v247 + 16);
      if (*(char *)(**(_QWORD **)v247 + 39) < 0)
      {
        v190 = *(_QWORD *)(v187 + 16);
        v189 = *(_QWORD *)(v187 + 24);
      }
      else
      {
        v189 = *(unsigned __int8 *)(**(_QWORD **)v247 + 39);
        v190 = **(_QWORD **)v247 + 16;
      }
      *(_QWORD *)&v241 = v190;
      *((_QWORD *)&v241 + 1) = v189;
      v191 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
        if ((_BYTE)v227 && SHIBYTE(v226) < 0)
          operator delete(__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v192 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v193 = byte_254A4A4F8;
      }
      else
      {
        v192 = *(_QWORD *)&byte_254A4A4F8[8];
        v193 = *(const char **)byte_254A4A4F8;
      }
      v213 = (uint64_t *)v193;
      rep = v192;
      __p = os_log_create(v193, (const char *)v241);
      sub_20E86E5A8(&v225, (uint64_t)&v213);
      sub_20E86E5A8(v228, (uint64_t)&v241);
      v194 = __p;
      sub_20E86E44C((uint64_t)&__p);
      sub_20F2C8468(v186, v188, v194, OS_LOG_TYPE_DEBUG, (unsigned __int8 *)&v210, (uint64_t *)&v240, &v212, (uint64_t *)&v237, (unsigned __int8 *)v253, (uint64_t *)&v238, (uint64_t *)&v239);
      if (v184)
      {
        sub_20E8C003C((uint64_t)v247, "MapClassifier [%d]: rotation-rate %f, revisited %d , health %f, far_away %d, speed %f, acceleration %f", v210, v240, v212, v237, LOBYTE(v253[0]), v238, v239);
        sub_20E863570((uint64_t)v247);
      }
      sub_20E863714((uint64_t)v247);
    }
  }
  sub_20F2C8220(&v245);
  if (*(int *)v245[7] <= 2)
  {
    v195 = *((unsigned __int8 *)v245 + 72);
    v196 = sub_20E8C31DC((uint64_t)v245, "OSLogSurrogateAppender", 1, 0);
    v197 = v196 ? v196 + 16 : 0;
    if (v195 || v196)
    {
      *(_QWORD *)v247 = &v245;
      *(std::chrono::steady_clock::time_point *)&v247[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v247[16] = std::chrono::system_clock::now();
      *((_QWORD *)&v248 + 1) = "unknown file";
      LODWORD(v248) = 2;
      LODWORD(v249) = 192;
      v251 = 0;
      v252 = 0;
      v250 = "unknown function";
      v198 = **(_QWORD **)v247;
      v199 = (uint64_t *)(**(_QWORD **)v247 + 16);
      if (*(char *)(**(_QWORD **)v247 + 39) < 0)
      {
        v201 = *(_QWORD *)(v198 + 16);
        v200 = *(_QWORD *)(v198 + 24);
      }
      else
      {
        v200 = *(unsigned __int8 *)(**(_QWORD **)v247 + 39);
        v201 = **(_QWORD **)v247 + 16;
      }
      *(_QWORD *)&v241 = v201;
      *((_QWORD *)&v241 + 1) = v200;
      v202 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
        if ((_BYTE)v227 && SHIBYTE(v226) < 0)
          operator delete(__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v203 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v204 = byte_254A4A4F8;
      }
      else
      {
        v203 = *(_QWORD *)&byte_254A4A4F8[8];
        v204 = *(const char **)byte_254A4A4F8;
      }
      v213 = (uint64_t *)v204;
      rep = v203;
      __p = os_log_create(v204, (const char *)v241);
      sub_20E86E5A8(&v225, (uint64_t)&v213);
      sub_20E86E5A8(v228, (uint64_t)&v241);
      v205 = __p;
      sub_20E86E44C((uint64_t)&__p);
      sub_20F2C8984(v197, v199, v205, OS_LOG_TYPE_DEBUG, &v209, (uint64_t *)&v240, &v211, (uint64_t *)&v237, (unsigned __int8 *)&v236, (uint64_t *)&v238, (uint64_t *)&v239, (unsigned __int8 *)__dst);
      if (v195)
      {
        sub_20E8C003C((uint64_t)v247, "WeakMapClassifier [%d]: rotation-rate %f, revisited %d , health %f, far_away %d, speed %f, acceleration %f slow_rotation_rate %d", v209, v240, v211, v237, v236, v238, v239, LOBYTE(__dst[0]));
        sub_20E863570((uint64_t)v247);
      }
      sub_20E863714((uint64_t)v247);
    }
  }
  return v35;
}

void sub_20F2C7FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  uint64_t v39;

  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v39 - 192);
  _Unwind_Resume(a1);
}

void sub_20F2C7FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *object,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;

  if (*(_BYTE *)(v44 - 168) && *(char *)(v44 - 169) < 0)
    operator delete(*(void **)(v43 + 24));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a21);
  if (a35 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_20F2C8210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20F2C8220(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68828);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68828))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68820);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68828);
  }
  *a1 = qword_254A68820;
}

void sub_20F2C82BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68828);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68828);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2C8314(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, double a7, double a8, double a9, float64x2_t _Q5, double a11, float64x2_t _Q7)
{
  uint64_t v12;
  double v13;
  float64x2_t *v15;
  double v16;
  double v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  float64x2_t *v23;
  double v24;
  double v31;
  float64x2_t *v32;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v37;
  double v40;
  uint64_t v42;

  if (!a1)
    return 1;
  v12 = *(_QWORD *)a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (*(_DWORD *)(a2 + 8) + 6);
  v13 = *(double *)(v12 + 16);
  _D4 = vextq_s8(*(int8x16_t *)v12, *(int8x16_t *)v12, 8uLL).u64[0];
  v15 = *(float64x2_t **)(a2 + 16);
  v16 = a5;
  v17 = a6;
  while (1)
  {
    if (a3 != a4)
    {
      v42 = a3;
      while (*(_QWORD *)v42 != a1[2] || *(_DWORD *)(v42 + 8) != *((_DWORD *)a1 + 6))
      {
        v42 += 16;
        if (v42 == a4)
          goto LABEL_3;
      }
      if (v42 != a4)
        goto LABEL_7;
    }
LABEL_3:
    v18 = a1[5];
    v19 = *(float64x2_t *)v18;
    _Q7.f64[0] = *(float64_t *)(v18 + 40);
    v20 = *(float64x2_t *)(v18 + 24);
    v21 = *(double *)(v18 + 64);
    v22 = *(float64x2_t *)(v18 + 48);
    v23 = (float64x2_t *)a1[9];
    v24 = v23[4].f64[0];
    _Q20 = v23[3];
    _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q20.f64[0]), v20, _Q20, 1), v22, v24);
    __asm { FMLA            D22, D7, V20.D[1] }
    v31 = _D22 + v21 * v24;
    v32 = (float64x2_t *)a1[11];
    _Q20.f64[0] = v32[1].f64[0];
    _Q22 = *v32;
    v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v32->f64[0]), v20, *v32, 1), v22, _Q20.f64[0]);
    __asm { FMLA            D5, D7, V22.D[1] }
    _Q5.f64[0] = _Q5.f64[0] + v21 * _Q20.f64[0];
    v35 = (float64x2_t *)a1[7];
    _Q7.f64[0] = v35[1].f64[0];
    _Q16 = *v35;
    v37 = vaddq_f64(_Q5, _Q7);
    __asm { FMLA            D7, D4, V21.D[1] }
    _Q16.f64[0] = v15[1].f64[0];
    _Q5 = vsubq_f64(_Q16, v37);
    _D17 = vsubq_f64(*v15, vaddq_f64(v34, *v35)).f64[1];
    __asm { FMLA            D16, D17, V6.D[1] }
    v40 = vmlad_n_f64(_Q16.f64[0], _Q5.f64[0], _Q5.f64[0]);
    if (_D7 + v13 * v31 > v16 && v40 < v17)
      return 0;
LABEL_7:
    a1 = (uint64_t *)*a1;
    if (!a1)
      return 1;
  }
}

void sub_20F2C8468(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, unsigned __int8 *a5, uint64_t *a6, unsigned __int8 *a7, uint64_t *a8, unsigned __int8 *a9, uint64_t *a10, uint64_t *a11)
{
  size_t v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[10];
  __int16 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v17 = _os_log_pack_size();
    v18 = (std::__shared_weak_count_vtbl *)operator new(v17, (std::align_val_t)8uLL);
    v19 = (std::__shared_weak_count *)operator new();
    v20 = v19;
    v19->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v19->__shared_weak_owners_ = 0;
    v19[1].__vftable = v18;
    v60 = v18;
    *(_QWORD *)&v61 = v18;
    *((_QWORD *)&v61 + 1) = v19;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v62 = 0uLL;
    *(_QWORD *)v63 = 0;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    v24 = v60;
    v25 = _os_log_pack_fill();
    v26 = *a5;
    v27 = *a6;
    v28 = *a7;
    v29 = *a8;
    v30 = *a9;
    v31 = *a10;
    v32 = *a11;
    *(_DWORD *)v25 = 67110656;
    *(_DWORD *)(v25 + 4) = v26;
    *(_WORD *)(v25 + 8) = 2048;
    *(_QWORD *)(v25 + 10) = v27;
    *(_WORD *)(v25 + 18) = 1024;
    *(_DWORD *)(v25 + 20) = v28;
    *(_WORD *)(v25 + 24) = 2048;
    *(_QWORD *)(v25 + 26) = v29;
    *(_WORD *)(v25 + 34) = 1024;
    *(_DWORD *)(v25 + 36) = v30;
    *(_WORD *)(v25 + 40) = 2048;
    *(_QWORD *)(v25 + 42) = v31;
    *(_WORD *)(v25 + 50) = 2048;
    *(_QWORD *)(v25 + 52) = v32;
    v33 = operator new();
    v34 = *((unsigned __int8 *)a2 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = a2;
    else
      v35 = (uint64_t *)*a2;
    if ((v34 & 0x80u) != 0)
      v34 = a2[1];
    *(_QWORD *)v33 = v24;
    *(_OWORD *)(v33 + 8) = v61;
    v61 = 0uLL;
    *(_OWORD *)(v33 + 24) = v62;
    v62 = 0uLL;
    *(_QWORD *)(v33 + 40) = v35;
    *(_QWORD *)(v33 + 48) = v34;
    *(_BYTE *)(v33 + 56) = type;
    v59 = v33;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v59);
    v36 = v59;
    v59 = 0;
    if (v36)
    {
      v37 = *(std::__shared_weak_count **)(v36 + 32);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(std::__shared_weak_count **)(v36 + 16);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MEMORY[0x212BC6398](v36, 0x10F0C40B62ED6C6);
    }
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v49 = *a5;
    v50 = *a6;
    v51 = *a7;
    v52 = *a8;
    v53 = *a9;
    v54 = *a10;
    v55 = *a11;
    LODWORD(v60) = 67110656;
    HIDWORD(v60) = v49;
    LOWORD(v61) = 2048;
    *(_QWORD *)((char *)&v61 + 2) = v50;
    WORD5(v61) = 1024;
    HIDWORD(v61) = v51;
    LOWORD(v62) = 2048;
    *(_QWORD *)((char *)&v62 + 2) = v52;
    WORD5(v62) = 1024;
    HIDWORD(v62) = v53;
    *(_WORD *)v63 = 2048;
    *(_QWORD *)&v63[2] = v54;
    v64 = 2048;
    v65 = v55;
    v56 = (void *)_os_log_send_and_compose_impl();
    if (v56)
      free(v56);
  }
}

void sub_20F2C8928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F2C894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2C8960(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F2C8984(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, unsigned __int8 *a5, uint64_t *a6, unsigned __int8 *a7, uint64_t *a8, unsigned __int8 *a9, uint64_t *a10, uint64_t *a11, unsigned __int8 *a12)
{
  size_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  uint64_t v62;
  std::__shared_weak_count_vtbl *v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[10];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v18 = _os_log_pack_size();
    v19 = (std::__shared_weak_count_vtbl *)operator new(v18, (std::align_val_t)8uLL);
    v20 = (std::__shared_weak_count *)operator new();
    v21 = v20;
    v20->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v20->__shared_weak_owners_ = 0;
    v20[1].__vftable = v19;
    v63 = v19;
    *(_QWORD *)&v64 = v19;
    *((_QWORD *)&v64 + 1) = v20;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v65 = 0uLL;
    *(_QWORD *)v66 = 0;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v21);
    }
    v25 = v63;
    v26 = _os_log_pack_fill();
    v27 = *a5;
    v28 = *a6;
    v29 = *a7;
    v30 = *a8;
    v31 = *a9;
    v32 = *a10;
    v33 = *a11;
    v34 = *a12;
    *(_DWORD *)v26 = 67110912;
    *(_DWORD *)(v26 + 4) = v27;
    *(_WORD *)(v26 + 8) = 2048;
    *(_QWORD *)(v26 + 10) = v28;
    *(_WORD *)(v26 + 18) = 1024;
    *(_DWORD *)(v26 + 20) = v29;
    *(_WORD *)(v26 + 24) = 2048;
    *(_QWORD *)(v26 + 26) = v30;
    *(_WORD *)(v26 + 34) = 1024;
    *(_DWORD *)(v26 + 36) = v31;
    *(_WORD *)(v26 + 40) = 2048;
    *(_QWORD *)(v26 + 42) = v32;
    *(_WORD *)(v26 + 50) = 2048;
    *(_QWORD *)(v26 + 52) = v33;
    *(_WORD *)(v26 + 60) = 1024;
    *(_DWORD *)(v26 + 62) = v34;
    v35 = operator new();
    v36 = *((unsigned __int8 *)a2 + 23);
    if ((v36 & 0x80u) == 0)
      v37 = a2;
    else
      v37 = (uint64_t *)*a2;
    if ((v36 & 0x80u) != 0)
      v36 = a2[1];
    *(_QWORD *)v35 = v25;
    *(_OWORD *)(v35 + 8) = v64;
    v64 = 0uLL;
    *(_OWORD *)(v35 + 24) = v65;
    v65 = 0uLL;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = type;
    v62 = v35;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v62);
    v38 = v62;
    v62 = 0;
    if (v38)
    {
      v39 = *(std::__shared_weak_count **)(v38 + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v38 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v51 = *a5;
    v52 = *a6;
    v53 = *a7;
    v54 = *a8;
    v55 = *a9;
    v56 = *a10;
    v57 = *a11;
    v58 = *a12;
    LODWORD(v63) = 67110912;
    HIDWORD(v63) = v51;
    LOWORD(v64) = 2048;
    *(_QWORD *)((char *)&v64 + 2) = v52;
    WORD5(v64) = 1024;
    HIDWORD(v64) = v53;
    LOWORD(v65) = 2048;
    *(_QWORD *)((char *)&v65 + 2) = v54;
    WORD5(v65) = 1024;
    HIDWORD(v65) = v55;
    *(_WORD *)v66 = 2048;
    *(_QWORD *)&v66[2] = v56;
    v67 = 2048;
    v68 = v57;
    v69 = 1024;
    v70 = v58;
    v59 = (void *)_os_log_send_and_compose_impl();
    if (v59)
      free(v59);
  }
}

void sub_20F2C8E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F2C8E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2C8EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2C8EC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  __int128 v18;

  __p = operator new(0x28uLL);
  v18 = xmmword_2102DC280;
  strcpy((char *)__p, "MapKeyframeClassifier parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.nearest_frame_angle_threshold_deg", v4, "Nearest frames' angle threshold [deg]");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.nearest_frame_vergence_threshold_deg", v5, "Nearest frames' vergence angle threshold [deg]");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.nearest_frame_dist_threshold_m", v6, "Nearest frames' distance threshold [m]");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.min_epipolar_inliners_count_as_revisit", v7, "Minimum 5pt inlier counted as revisted");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.min_epipolar_inliners_percentage_as_revisit", v8, "Minimum percentage of 5pt inlier w.r.t. input number of features counted as revisited");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.max_rotation_rate", v9, "Maximum rotation rate allowed for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.min_slam_health", v10, "Minimum health threshold for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.maximum_motion_acceleration", v11, "Maximum motion acceleration (excluding gravity) for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.maximum_speed", v12, "Maximum speed (m/s) of motion for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.min_inlier_tracks_as_keyframe", v13, "Minimum number of inliers needed for map keyframe");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.ingore_stationary_condition", v14, "Ignore stationary state condition in the classification.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DCF0((unsigned int *)(a1 + 84));
  return sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeClassifierConfig.min_num_triangulated_points_in_pnp_ransac", v15, "Minimum number of triangulated points in PnP RANSAC.");
}

void sub_20F2C9184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2C9210@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  __int128 v18;

  __p = operator new(0x30uLL);
  v18 = xmmword_2102E3F60;
  strcpy((char *)__p, "MapKeyframeClassifier parameters for weak KFs");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.nearest_frame_angle_threshold_deg", v4, "Nearest frames' angle threshold [deg]");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.nearest_frame_vergence_threshold_deg", v5, "Nearest frames' vergence angle threshold [deg]");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.nearest_frame_dist_threshold_m", v6, "Nearest frames' distance threshold [m]");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.min_epipolar_inliners_count_as_revisit", v7, "Minimum 5pt inlier counted as revisted");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.min_epipolar_inliners_percentage_as_revisit", v8, "Minimum percentage of 5pt inlier w.r.t. input number of features counted as revisited");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.max_rotation_rate", v9, "Maximum rotation rate allowed for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.min_slam_health", v10, "Minimum health threshold for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.maximum_motion_acceleration", v11, "Maximum motion acceleration (excluding gravity) for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.maximum_speed", v12, "Maximum speed (m/s) of motion for adding keyframe");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.min_inlier_tracks_as_keyframe", v13, "Minimum number of inliers needed for map keyframe");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.use_all_frames", v14, "Bypass other checks and use all valid frames as weak keyframes");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 80));
  return sub_20E8B2F9C((uint64_t *)&__p, "WeakMapKeyframeClassifierConfig.ingore_stationary_condition", v15, "Ignore stationary state condition in the classification.");
}

void sub_20F2C94D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2C9564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  kdebug_trace();
  v6 = operator new();
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 400) = &off_24C9FC540;
  *(_QWORD *)(v6 + 408) = 0;
  *(_QWORD *)(v6 + 416) = 0;
  *(_QWORD *)(v6 + 424) = 0;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  if (!(_BYTE)a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Recognition/src/VladImageRetrieval.cpp", 41, (uint64_t)"const_model_ref_", 16, (uint64_t)"the model is empty!", 19, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    *(_QWORD *)(v7 + 400) = &off_24C9FC540;
    v8 = *(void **)(v7 + 408);
    if (v8)
    {
      *(_QWORD *)(v7 + 416) = v8;
      operator delete(v8);
    }
    if (*(_BYTE *)(v7 + 392))
      sub_20F279C38((void **)(v7 + 16));
    MEMORY[0x212BC6398](v7, 0x10F2C40CE21C6C7);
  }
  return kdebug_trace();
}

void sub_20F2C96DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = sub_20F431A4C(v9);
  MEMORY[0x212BC6398](v11, 0x10F2C40CE21C6C7);
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F2C9710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F2C9728(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t **a3@<X2>, void **a4@<X8>)
{
  uint64_t v5;
  uint64_t **v6;
  unint64_t v8;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  size_t v21;
  const char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t **v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  void *v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  size_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  _QWORD v92[3];
  int v93;
  const char *v94;
  int v95;
  const char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  void *object;
  void *v101[2];
  __int128 v102;
  void *__p[2];
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;

  v5 = (char *)a3[1] - (char *)*a3;
  if (!a2 || !v5)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v6 = a3;
  v8 = v5 >> 4;
  if (v5 >> 4 <= a2)
  {
    sub_20F2CA198(&v99);
    if (**(int **)(v99 + 56) > 3
      || ((v16 = *(unsigned __int8 *)(v99 + 72),
           v17 = sub_20E8C31DC(v99, "OSLogSurrogateAppender", 1, 0),
           v18 = v17,
           !v16)
        ? (v19 = v17 == 0)
        : (v19 = 0),
          v19))
    {
LABEL_127:
      sub_20F2CA28C(v6, a4);
      return;
    }
    v92[0] = &v99;
    v92[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v92[2] = std::chrono::system_clock::now().__d_.__rep_;
    v93 = 3;
    v94 = "unknown file";
    v95 = 51;
    v97 = 0;
    v98 = 0;
    v96 = "unknown function";
    v20 = v99;
    if (*(char *)(v99 + 39) < 0)
    {
      v22 = *(const char **)(v99 + 16);
      v21 = *(_QWORD *)(v99 + 24);
    }
    else
    {
      v21 = *(unsigned __int8 *)(v99 + 39);
      v22 = (const char *)(*(_QWORD *)v92[0] + 16);
    }
    v90 = *(_QWORD *)v92[0] + 16;
    v91 = v6;
    v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v102 && SHIBYTE(v101[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v42, v22);
    v44 = v101;
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = v18;
      v46 = v22;
      v47 = v20;
      v48 = v16;
      v49 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v49 = v43 | 7;
      v50 = v49 + 1;
      v44 = operator new(v49 + 1);
      v101[1] = (void *)v43;
      *(_QWORD *)&v102 = v50 | 0x8000000000000000;
      v101[0] = v44;
      v16 = v48;
      v20 = v47;
      v22 = v46;
      v18 = v45;
    }
    else
    {
      BYTE7(v102) = v43;
      if (!v43)
      {
LABEL_60:
        *((_BYTE *)v44 + v43) = 0;
        BYTE8(v102) = 1;
        v51 = __p;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v6 = v91;
        if (v21 >= 0x17)
        {
          v52 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v52 = v21 | 7;
          v53 = v52 + 1;
          v51 = operator new(v52 + 1);
          __p[1] = (void *)v21;
          v104 = v53 | 0x8000000000000000;
          __p[0] = v51;
        }
        else
        {
          HIBYTE(v104) = v21;
          if (!v21)
            goto LABEL_68;
        }
        memmove(v51, v22, v21);
LABEL_68:
        *((_BYTE *)v51 + v21) = 0;
        v105 = 1;
        v54 = object;
        if (SHIBYTE(v104) < 0)
          operator delete(__p[0]);
        if (BYTE8(v102) && SBYTE7(v102) < 0)
          operator delete(v101[0]);
        if (object)
          os_release(object);
        if (v18 && *(_QWORD *)(v18 + 24))
        {
          v55 = _os_log_pack_size();
          v56 = (std::__shared_weak_count_vtbl *)operator new(v55, (std::align_val_t)8uLL);
          v57 = (std::__shared_weak_count *)operator new();
          v58 = v57;
          v57->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          v57->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v57->__shared_weak_owners_ = 0;
          v57[1].__vftable = v56;
          object = v56;
          v101[0] = v56;
          v101[1] = v57;
          do
            v60 = __ldxr(p_shared_owners);
          while (__stxr(v60 + 1, p_shared_owners));
          v102 = 0uLL;
          __p[0] = 0;
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v58);
          }
          v62 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v63 = operator new();
          v64 = *(unsigned __int8 *)(v20 + 39);
          v65 = v90;
          if ((v64 & 0x80u) != 0)
          {
            v65 = *(_QWORD *)(v20 + 16);
            v64 = *(_QWORD *)(v20 + 24);
          }
          *(_QWORD *)v63 = v62;
          *(_OWORD *)(v63 + 8) = *(_OWORD *)v101;
          v101[0] = 0;
          v101[1] = 0;
          *(_OWORD *)(v63 + 24) = v102;
          v102 = 0uLL;
          *(_QWORD *)(v63 + 40) = v65;
          *(_QWORD *)(v63 + 48) = v64;
          *(_BYTE *)(v63 + 56) = 1;
          v106 = 0;
          v107 = v63;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v107);
          v66 = v107;
          v107 = 0;
          if (v66)
          {
            v67 = *(std::__shared_weak_count **)(v66 + 32);
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v70 = *(std::__shared_weak_count **)(v66 + 16);
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            MEMORY[0x212BC6398](v66, 0x10F0C40B62ED6C6);
            v73 = v106;
            v106 = 0;
            if (v73)
            {
              v74 = *(std::__shared_weak_count **)(v73 + 32);
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              v77 = *(std::__shared_weak_count **)(v73 + 16);
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
            }
          }
          v80 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
            v81 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = (std::__shared_weak_count *)v101[1];
          if (v101[1])
          {
            v84 = (unint64_t *)((char *)v101[1] + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
        }
        else
        {
          os_log_type_enabled(v54, OS_LOG_TYPE_INFO);
          LOWORD(object) = 0;
          v86 = (void *)_os_log_send_and_compose_impl();
          if (v86)
            free(v86);
        }
        if (v16)
        {
          sub_20E8C003C((uint64_t)v92, "Query frame size is bigger than the frame_set.size(). Return all frames");
          sub_20E863570((uint64_t)v92);
        }
        sub_20E863570((uint64_t)v92);
        v87 = v98;
        if (v98)
        {
          v88 = (unint64_t *)&v98->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        goto LABEL_127;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_60;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  object = 0;
  v101[0] = 0;
  v101[1] = 0;
  if (a2 >> 61)
    sub_20E867F44();
  v10 = 8 * a2;
  v11 = (char *)operator new(8 * a2);
  bzero(v11, 8 * a2);
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 4);
  do
  {
    v13 = 214013 * v13 + 2531011;
    v14 = (HIWORD(v13) & 0x7FFF) % v8;
    *(_QWORD *)&v11[8 * v12] = v14;
    if (v12)
    {
      v15 = 0;
      while (*(_QWORD *)&v11[8 * v15] != v14)
      {
        if (v12 == ++v15)
          goto LABEL_7;
      }
      --v12;
    }
LABEL_7:
    ++v12;
  }
  while (v12 < a2);
  v23 = 0;
  v24 = &v11[v10];
  *(_DWORD *)(a1 + 4) = v13;
  v25 = v11;
  do
  {
    v28 = (*v6)[2 * *(_QWORD *)v25];
    if (!*(_BYTE *)(v28 + 736))
    {
      v29 = (unint64_t)a4[2];
      if ((unint64_t)v23 < v29)
      {
        v26 = *(_OWORD *)v28;
        *((_QWORD *)v23 + 2) = *(_QWORD *)(v28 + 16);
        *(_OWORD *)v23 = v26;
        v27 = v23 + 24;
      }
      else
      {
        v30 = v6;
        v31 = (char *)*a4;
        v32 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (_BYTE *)*a4) >> 3);
        v33 = v32 + 1;
        if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v31) >> 3);
        if (2 * v34 > v33)
          v33 = 2 * v34;
        if (v34 >= 0x555555555555555)
          v35 = 0xAAAAAAAAAAAAAAALL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v36 = (char *)operator new(24 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = *(_OWORD *)v28;
        v38 = &v36[24 * v32];
        *((_QWORD *)v38 + 2) = *(_QWORD *)(v28 + 16);
        *(_OWORD *)v38 = v37;
        v39 = v38;
        if (v23 != v31)
        {
          do
          {
            v40 = *(_OWORD *)(v23 - 24);
            *((_DWORD *)v39 - 2) = *((_DWORD *)v23 - 2);
            *(_OWORD *)(v39 - 24) = v40;
            v39 -= 24;
            v23 -= 24;
          }
          while (v23 != v31);
          v23 = (char *)*a4;
        }
        v27 = v38 + 24;
        *a4 = v39;
        a4[1] = v38 + 24;
        a4[2] = &v36[24 * v35];
        v6 = v30;
        if (v23)
          operator delete(v23);
      }
      a4[1] = v27;
      v23 = v27;
    }
    v25 += 8;
  }
  while (v25 != v24);
  operator delete(v11);
}

void sub_20F2CA03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F2CA07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v5 - 96));
  sub_20E86E8C4((uint64_t *)(v5 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2CA0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2CA0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2CA0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2CA10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F2CA154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  if (__p)
    operator delete(__p);
  v26 = *(void **)v24;
  if (!*(_QWORD *)v24)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v24 + 8) = v26;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void sub_20F2CA198(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68838);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68838))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68830);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68838);
  }
  *a1 = qword_254A68830;
}

void sub_20F2CA234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68838);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68838);
  _Unwind_Resume(a1);
}

void sub_20F2CA28C(uint64_t **a1@<X1>, void **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  __int128 *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  v3 = a1[1];
  v5 = (char *)v3 - (char *)*a1;
  if (v3 != *a1)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = v5 >> 4;
    v7 = (char *)operator new(24 * (v5 >> 4));
    *a2 = v7;
    a2[1] = v7;
    a2[2] = &v7[24 * v6];
    do
    {
      v10 = (__int128 *)*v4;
      if (!*(_BYTE *)(*v4 + 736))
      {
        v11 = (unint64_t)a2[2];
        if ((unint64_t)v7 < v11)
        {
          v8 = *v10;
          *((_QWORD *)v7 + 2) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v7 = v8;
          v9 = v7 + 24;
        }
        else
        {
          v12 = (char *)*a2;
          v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a2) >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v12) >> 3);
          if (2 * v15 > v14)
            v14 = 2 * v15;
          if (v15 >= 0x555555555555555)
            v16 = 0xAAAAAAAAAAAAAAALL;
          else
            v16 = v14;
          if (v16)
          {
            if (v16 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v17 = (char *)operator new(24 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = *v10;
          v19 = &v17[24 * v13];
          *((_QWORD *)v19 + 2) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v19 = v18;
          v20 = v19;
          if (v7 != v12)
          {
            do
            {
              v21 = *(_OWORD *)(v7 - 24);
              *((_DWORD *)v20 - 2) = *((_DWORD *)v7 - 2);
              *(_OWORD *)(v20 - 24) = v21;
              v20 -= 24;
              v7 -= 24;
            }
            while (v7 != v12);
            v7 = (char *)*a2;
          }
          v9 = v19 + 24;
          *a2 = v20;
          a2[1] = v19 + 24;
          a2[2] = &v17[24 * v16];
          if (v7)
            operator delete(v7);
        }
        a2[1] = v9;
        v7 = v9;
      }
      v4 += 2;
    }
    while (v4 != v3);
  }
}

void sub_20F2CA44C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F2CA470(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v8;
  unint64_t v11;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char **v42;

  v8 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (a2 && v8)
  {
    v11 = v8 >> 4;
    if (v8 >> 4 > a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      v15 = *a1;
      if (v11 <= v15)
      {
        LODWORD(v15) = 0;
        *a1 = 0;
      }
      v16 = 0;
      v17 = 0;
      v18 = (_QWORD *)(a4 + 56);
      v41 = (_QWORD *)(a4 + 56);
      v42 = a5;
      while (1)
      {
        v15 = v15 % v11;
        *a1 = v15;
        v21 = *(uint64_t **)(*(_QWORD *)a3 + 16 * v15);
        if (*((_BYTE *)v21 + 736))
          goto LABEL_9;
        v22 = (uint64_t *)*v18;
        if (!*v18)
          goto LABEL_49;
        v23 = *v21;
        v24 = *((_DWORD *)v21 + 2);
        v25 = v18;
        do
        {
          v26 = v22[4];
          if (v26 < v23)
          {
            ++v22;
          }
          else if (v26 == v23)
          {
            if (*((_DWORD *)v22 + 10) < v24)
              ++v22;
            else
              v25 = v22;
          }
          else
          {
            v25 = v22;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
        if (v25 == v18 || (v27 = v25[4], v23 < v27) || v23 == v27 && *((_DWORD *)v25 + 10) > v24 || (v28 = v25[6]) == 0)
        {
LABEL_49:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapKeyframeSampler.cpp", 104, (uint64_t)"vio_state", 9, (uint64_t)"Fail to locate the state!", 25, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        if (a7 - *(double *)(v28 + 816) < a6)
          goto LABEL_10;
        v29 = (unint64_t)a5[2];
        if ((unint64_t)v16 >= v29)
          break;
        v19 = *(_OWORD *)v21;
        *((_QWORD *)v16 + 2) = v21[2];
        *(_OWORD *)v16 = v19;
        v20 = v16 + 24;
LABEL_8:
        a5[1] = v20;
        LODWORD(v15) = *a1;
        v16 = v20;
LABEL_9:
        LODWORD(v15) = v15 + 1;
        *a1 = v15;
LABEL_10:
        if (++v17 == a2)
          return;
      }
      v30 = *a5;
      v31 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v30) >> 3) + 1;
      if (v31 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v30) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v34 = (char *)operator new(24 * v33);
      }
      else
      {
        v34 = 0;
      }
      v35 = *(_OWORD *)v21;
      v36 = &v34[8 * ((v16 - v30) >> 3)];
      *((_QWORD *)v36 + 2) = v21[2];
      *(_OWORD *)v36 = v35;
      v37 = v36;
      if (v16 == v30)
      {
        a5 = v42;
        v40 = &v34[24 * v33];
        v20 = v36 + 24;
        *v42 = v36;
        v42[1] = v36 + 24;
        v42[2] = v40;
        if (!v16)
          goto LABEL_43;
      }
      else
      {
        do
        {
          v38 = *(_OWORD *)(v16 - 24);
          *((_DWORD *)v37 - 2) = *((_DWORD *)v16 - 2);
          *(_OWORD *)(v37 - 24) = v38;
          v37 -= 24;
          v16 -= 24;
        }
        while (v16 != v30);
        a5 = v42;
        v16 = *v42;
        v39 = &v34[24 * v33];
        v20 = v36 + 24;
        *v42 = v37;
        v42[1] = v36 + 24;
        v42[2] = v39;
        if (!v16)
          goto LABEL_43;
      }
      operator delete(v16);
LABEL_43:
      v18 = v41;
      goto LABEL_8;
    }
    sub_20F2CA28C((uint64_t **)a3, (void **)a5);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_20F2CA7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
  {
    *(_QWORD *)(a10 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F2CA7E0(uint64_t a1@<X0>, float32x4_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, void **a6@<X8>, float32x4_t a7@<Q0>)
{
  uint64_t v8;
  float v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  __int128 *v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  size_t v38;
  NSObject *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  os_log_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  double *v73;
  double v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  const char *v81;
  size_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  NSObject *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  os_log_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  const char *v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  __int128 v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  __int128 v142;
  char *v143;
  char *v144;
  __int128 v145;
  float v146;
  unint64_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  float *v156;
  int64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  _OWORD *v162;
  float *v163;
  uint64_t v164;
  __int128 v165;
  int v166;
  void **v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v176;
  int v177;
  const char *v178;
  int v179;
  const char *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  double *v184;
  double *v185;
  void *__p[2];
  char v187;
  char v188;
  uint64_t v189;
  os_log_t v190;
  __int128 v191;
  __int128 v192;
  void **v193;
  size_t v194;
  unint64_t v195;
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  v11 = a7.f32[0];
  sub_20F2783C8(v8 + 400, a2, a3, (uint64_t *)&v184, a7);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v12 = (char *)v185 - (char *)v184;
  v167 = a6;
  if (v185 != v184)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = v12 >> 5;
    v14 = (char *)operator new(24 * (v12 >> 5));
    *a6 = v14;
    a6[1] = v14;
    a6[2] = &v14[24 * v13];
  }
  sub_20F2CA198(&v183);
  if (**(int **)(v183 + 56) <= 2)
  {
    v15 = *(unsigned __int8 *)(v183 + 72);
    v16 = sub_20E8C31DC(v183, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (v15 || v16 != 0)
    {
      v174 = &v183;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v176 = std::chrono::system_clock::now().__d_.__rep_;
      v177 = 2;
      v178 = "unknown file";
      v179 = 149;
      v181 = 0;
      v182 = 0;
      v180 = "unknown function";
      v19 = v183;
      if (*(char *)(v183 + 39) < 0)
      {
        v21 = *(const char **)(v183 + 16);
        v20 = *(_QWORD *)(v183 + 24);
        v172 = *v174 + 16;
        v169 = a4;
        v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v23 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        v20 = *(unsigned __int8 *)(v183 + 39);
        v21 = (const char *)(*v174 + 16);
        v172 = (uint64_t)v21;
        v169 = a4;
        v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v22 & 1) != 0)
          goto LABEL_15;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v190);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v190);
        if ((_BYTE)v192 && SHIBYTE(v191) < 0)
          operator delete(v190);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_15:
      if (byte_254A4A4F8[23] >= 0)
        v24 = byte_254A4A4F8;
      else
        v24 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v25 = byte_254A4A4F8[23];
      else
        v25 = *(_QWORD *)&byte_254A4A4F8[8];
      v190 = os_log_create(v24, v21);
      v26 = &v191;
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v25 >= 0x17)
      {
        v27 = v17;
        v28 = v21;
        v29 = v19;
        v30 = v15;
        v31 = a5;
        v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v32 = v25 | 7;
        v33 = v32 + 1;
        v26 = (__int128 *)operator new(v32 + 1);
        *((_QWORD *)&v191 + 1) = v25;
        *(_QWORD *)&v192 = v33 | 0x8000000000000000;
        *(_QWORD *)&v191 = v26;
        a5 = v31;
        v15 = v30;
        v19 = v29;
        v21 = v28;
        v17 = v27;
      }
      else
      {
        BYTE7(v192) = v25;
        if (!v25)
        {
LABEL_29:
          *((_BYTE *)v26 + v25) = 0;
          BYTE8(v192) = 1;
          v34 = (void **)&v193;
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          a4 = v169;
          if (v20 >= 0x17)
          {
            v35 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v35 = v20 | 7;
            v36 = v35 + 1;
            v34 = (void **)operator new(v35 + 1);
            v194 = v20;
            v195 = v36 | 0x8000000000000000;
            v193 = v34;
            a6 = v167;
          }
          else
          {
            HIBYTE(v195) = v20;
            a6 = v167;
            if (!v20)
              goto LABEL_37;
          }
          memmove(v34, v21, v20);
LABEL_37:
          *((_BYTE *)v34 + v20) = 0;
          v196 = 1;
          v37 = v190;
          if (SHIBYTE(v195) < 0)
            operator delete(v193);
          if (BYTE8(v192) && SBYTE7(v192) < 0)
            operator delete((void *)v191);
          if (v190)
            os_release(v190);
          if (v17 && *(_QWORD *)(v17 + 24))
          {
            v38 = _os_log_pack_size();
            v39 = operator new(v38, (std::align_val_t)8uLL);
            v40 = (std::__shared_weak_count *)operator new();
            v41 = v40;
            v40->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v40->__shared_owners_;
            v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v40->__shared_weak_owners_ = 0;
            v40[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
            v190 = v39;
            *(_QWORD *)&v191 = v39;
            *((_QWORD *)&v191 + 1) = v40;
            do
              v43 = __ldxr(p_shared_owners);
            while (__stxr(v43 + 1, p_shared_owners));
            v192 = 0uLL;
            v193 = 0;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
            v45 = v190;
            *(_WORD *)_os_log_pack_fill() = 0;
            v46 = (char *)operator new();
            v47 = *(unsigned __int8 *)(v19 + 39);
            v48 = v172;
            if ((v47 & 0x80u) != 0)
            {
              v48 = *(_QWORD *)(v19 + 16);
              v47 = *(_QWORD *)(v19 + 24);
            }
            *(_QWORD *)v46 = v45;
            *(_OWORD *)(v46 + 8) = v191;
            v191 = 0uLL;
            *(_OWORD *)(v46 + 24) = v192;
            v192 = 0uLL;
            *((_QWORD *)v46 + 5) = v48;
            *((_QWORD *)v46 + 6) = v47;
            v46[56] = 2;
            v189 = 0;
            __p[0] = v46;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), __p);
            v49 = __p[0];
            __p[0] = 0;
            if (v49)
            {
              v50 = (std::__shared_weak_count *)*((_QWORD *)v49 + 4);
              if (v50)
              {
                v51 = (unint64_t *)&v50->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              v53 = (std::__shared_weak_count *)*((_QWORD *)v49 + 2);
              if (v53)
              {
                v54 = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
              v56 = v189;
              v189 = 0;
              if (v56)
              {
                v57 = *(std::__shared_weak_count **)(v56 + 32);
                if (v57)
                {
                  v58 = (unint64_t *)&v57->__shared_owners_;
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                v60 = *(std::__shared_weak_count **)(v56 + 16);
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
              }
            }
            v63 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
            if (*((_QWORD *)&v192 + 1))
            {
              v64 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v66 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
            if (*((_QWORD *)&v191 + 1))
            {
              v67 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
          }
          else
          {
            os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG);
            LOWORD(v190) = 0;
            v69 = (void *)_os_log_send_and_compose_impl();
            if (v69)
              free(v69);
          }
          if (v15)
          {
            sub_20E8C003C((uint64_t)&v174, "Retrieved image: ");
            sub_20E863570((uint64_t)&v174);
          }
          sub_20E863570((uint64_t)&v174);
          v70 = v182;
          if (v182)
          {
            v71 = (unint64_t *)&v182->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          goto LABEL_96;
        }
      }
      memmove(v26, v24, v25);
      goto LABEL_29;
    }
  }
LABEL_96:
  v73 = v184;
  if (v184 != v185)
  {
    v74 = v11;
    v173 = a5;
    v170 = a4;
    while (1)
    {
      if (v73[3] >= v74)
        goto LABEL_100;
      sub_20F2CA198(&v183);
      if (**(int **)(v183 + 56) > 2
        || ((v76 = *(unsigned __int8 *)(v183 + 72),
             v77 = sub_20E8C31DC(v183, "OSLogSurrogateAppender", 1, 0),
             v78 = v77,
             !v76)
          ? (v79 = v77 == 0)
          : (v79 = 0),
            v79))
      {
LABEL_191:
        v133 = (char *)a6[1];
        v132 = (unint64_t)a6[2];
        if ((unint64_t)v133 < v132)
          goto LABEL_192;
        goto LABEL_194;
      }
      v174 = &v183;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v176 = std::chrono::system_clock::now().__d_.__rep_;
      v177 = 2;
      v178 = "unknown file";
      v179 = 152;
      v180 = "unknown function";
      v181 = 0;
      v182 = 0;
      v80 = *v174;
      v81 = (const char *)(*v174 + 16);
      v168 = v81;
      if (*(char *)(*v174 + 39) < 0)
      {
        v81 = *(const char **)(v80 + 16);
        v82 = *(_QWORD *)(v80 + 24);
        v171 = *((_DWORD *)v73 + 2);
        v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v84 & 1) != 0)
          goto LABEL_111;
      }
      else
      {
        v82 = *(unsigned __int8 *)(*v174 + 39);
        v171 = *((_DWORD *)v73 + 2);
        v83 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v83 & 1) != 0)
          goto LABEL_111;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if (v188 && v187 < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        a6 = v167;
      }
LABEL_111:
      if (byte_254A4A4F8[23] >= 0)
        v85 = byte_254A4A4F8;
      else
        v85 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v86 = byte_254A4A4F8[23];
      else
        v86 = *(_QWORD *)&byte_254A4A4F8[8];
      v190 = os_log_create(v85, v81);
      if (v86 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v86 >= 0x17)
      {
        v88 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v86 | 7) != 0x17)
          v88 = v86 | 7;
        v89 = v88 + 1;
        v87 = (__int128 *)operator new(v88 + 1);
        *((_QWORD *)&v191 + 1) = v86;
        *(_QWORD *)&v192 = v89 | 0x8000000000000000;
        *(_QWORD *)&v191 = v87;
        a6 = v167;
LABEL_124:
        memmove(v87, v85, v86);
        goto LABEL_125;
      }
      BYTE7(v192) = v86;
      v87 = &v191;
      if (v86)
        goto LABEL_124;
LABEL_125:
      *((_BYTE *)v87 + v86) = 0;
      BYTE8(v192) = 1;
      if (v82 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v82 >= 0x17)
      {
        v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v92 = v82 | 7;
        v93 = v92 + 1;
        v90 = (void **)operator new(v92 + 1);
        v194 = v82;
        v195 = v93 | 0x8000000000000000;
        v193 = v90;
      }
      else
      {
        HIBYTE(v195) = v82;
        v90 = (void **)&v193;
        if (!v82)
        {
          LOBYTE(v193) = 0;
          v196 = 1;
          v91 = v190;
          if ((SHIBYTE(v195) & 0x80000000) == 0)
            goto LABEL_129;
          goto LABEL_135;
        }
      }
      memmove(v90, v81, v82);
      *((_BYTE *)v90 + v82) = 0;
      v196 = 1;
      v91 = v190;
      if ((SHIBYTE(v195) & 0x80000000) == 0)
      {
LABEL_129:
        a4 = v170;
        if (!BYTE8(v192))
          goto LABEL_138;
        goto LABEL_136;
      }
LABEL_135:
      operator delete(v193);
      a4 = v170;
      if (!BYTE8(v192))
        goto LABEL_138;
LABEL_136:
      if (SBYTE7(v192) < 0)
        operator delete((void *)v191);
LABEL_138:
      if (v190)
        os_release(v190);
      if (v78 && *(_QWORD *)(v78 + 24))
      {
        v94 = _os_log_pack_size();
        v95 = operator new(v94, (std::align_val_t)8uLL);
        v96 = (std::__shared_weak_count *)operator new();
        v97 = v96;
        v96->__shared_owners_ = 0;
        v98 = (unint64_t *)&v96->__shared_owners_;
        v96->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v96->__shared_weak_owners_ = 0;
        v96[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
        v190 = v95;
        *(_QWORD *)&v191 = v95;
        *((_QWORD *)&v191 + 1) = v96;
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
        v192 = 0uLL;
        v193 = 0;
        do
          v100 = __ldaxr(v98);
        while (__stlxr(v100 - 1, v98));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v97);
        }
        v101 = v190;
        v102 = _os_log_pack_fill();
        v103 = *((_QWORD *)v73 + 3);
        *(_DWORD *)v102 = 67109376;
        *(_DWORD *)(v102 + 4) = v171;
        *(_WORD *)(v102 + 8) = 2048;
        *(_QWORD *)(v102 + 10) = v103;
        v104 = (char *)operator new();
        v105 = *(unsigned __int8 *)(v80 + 39);
        v106 = v168;
        if ((v105 & 0x80u) != 0)
        {
          v106 = *(const char **)(v80 + 16);
          v105 = *(_QWORD *)(v80 + 24);
        }
        *(_QWORD *)v104 = v101;
        *(_OWORD *)(v104 + 8) = v191;
        v191 = 0uLL;
        *(_OWORD *)(v104 + 24) = v192;
        v192 = 0uLL;
        *((_QWORD *)v104 + 5) = v106;
        *((_QWORD *)v104 + 6) = v105;
        v104[56] = 2;
        v189 = 0;
        __p[0] = v104;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v78 + 24) + 40))(*(_QWORD *)(v78 + 24), __p);
        v107 = __p[0];
        __p[0] = 0;
        if (v107)
        {
          v108 = (std::__shared_weak_count *)*((_QWORD *)v107 + 4);
          if (v108)
          {
            v109 = (unint64_t *)&v108->__shared_owners_;
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v111 = (std::__shared_weak_count *)*((_QWORD *)v107 + 2);
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          MEMORY[0x212BC6398](v107, 0x10F0C40B62ED6C6);
          v114 = v189;
          v189 = 0;
          if (v114)
          {
            v115 = *(std::__shared_weak_count **)(v114 + 32);
            if (v115)
            {
              v116 = (unint64_t *)&v115->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v118 = *(std::__shared_weak_count **)(v114 + 16);
            if (v118)
            {
              v119 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            MEMORY[0x212BC6398](v114, 0x10F0C40B62ED6C6);
          }
        }
        v121 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
        if (*((_QWORD *)&v192 + 1))
        {
          v122 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v124 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
        if (*((_QWORD *)&v191 + 1))
        {
          v125 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
      }
      else
      {
        os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG);
        v127 = *((_QWORD *)v73 + 3);
        LODWORD(v190) = 67109376;
        HIDWORD(v190) = v171;
        LOWORD(v191) = 2048;
        *(_QWORD *)((char *)&v191 + 2) = v127;
        v128 = (void *)_os_log_send_and_compose_impl();
        if (v128)
          free(v128);
      }
      if (v76)
      {
        sub_20E8C003C((uint64_t)&v174, "%d (%f) | ", *((_DWORD *)v73 + 2), v73[3]);
        sub_20E863570((uint64_t)&v174);
      }
      sub_20E863570((uint64_t)&v174);
      v129 = v182;
      if (!v182)
        goto LABEL_191;
      v130 = (unint64_t *)&v182->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (v131)
        goto LABEL_191;
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
      v133 = (char *)a6[1];
      v132 = (unint64_t)a6[2];
      if ((unint64_t)v133 < v132)
      {
LABEL_192:
        v134 = *(_OWORD *)v73;
        *((double *)v133 + 2) = v73[2];
        *(_OWORD *)v133 = v134;
        v135 = v133 + 24;
        goto LABEL_209;
      }
LABEL_194:
      v136 = (char *)*a6;
      v137 = 0xAAAAAAAAAAAAAAABLL * ((v133 - (_BYTE *)*a6) >> 3);
      v138 = v137 + 1;
      if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132 - (_QWORD)v136) >> 3);
      if (2 * v139 > v138)
        v138 = 2 * v139;
      if (v139 >= 0x555555555555555)
        v140 = 0xAAAAAAAAAAAAAAALL;
      else
        v140 = v138;
      if (v140)
      {
        if (v140 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v141 = (char *)operator new(24 * v140);
      }
      else
      {
        v141 = 0;
      }
      v142 = *(_OWORD *)v73;
      v143 = &v141[24 * v137];
      *((double *)v143 + 2) = v73[2];
      *(_OWORD *)v143 = v142;
      v144 = v143;
      if (v133 != v136)
      {
        do
        {
          v145 = *(_OWORD *)(v133 - 24);
          *((_DWORD *)v144 - 2) = *((_DWORD *)v133 - 2);
          *(_OWORD *)(v144 - 24) = v145;
          v144 -= 24;
          v133 -= 24;
        }
        while (v133 != v136);
        v133 = (char *)*a6;
      }
      v135 = v143 + 24;
      *a6 = v144;
      a6[1] = v143 + 24;
      a6[2] = &v141[24 * v140];
      if (v133)
        operator delete(v133);
LABEL_209:
      a6[1] = v135;
      if (!v173)
        goto LABEL_100;
      v146 = v73[3];
      v148 = *(float **)(a4 + 8);
      v147 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v148 >= v147)
      {
        v149 = *(float **)a4;
        v150 = (uint64_t)v148 - *(_QWORD *)a4;
        v151 = v150 >> 2;
        v152 = (v150 >> 2) + 1;
        if (v152 >> 62)
          sub_20E867F44();
        v153 = v147 - (_QWORD)v149;
        if (v153 >> 1 > v152)
          v152 = v153 >> 1;
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
          v154 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v154 = v152;
        if (v154)
        {
          if (v154 >> 62)
            sub_20E877A38();
          v155 = operator new(4 * v154);
          v156 = (float *)&v155[4 * v151];
          *v156 = v146;
          v75 = (uint64_t)(v156 + 1);
          v157 = (char *)v148 - (char *)v149;
          if (v148 != v149)
          {
LABEL_220:
            v158 = v157 - 4;
            if (v158 < 0x2C)
              goto LABEL_256;
            if ((unint64_t)((char *)v148 - v155 - v150) < 0x20)
              goto LABEL_256;
            v159 = (v158 >> 2) + 1;
            v160 = 4 * (v159 & 0x7FFFFFFFFFFFFFF8);
            v161 = &v148[v160 / 0xFFFFFFFFFFFFFFFCLL];
            v156 = (float *)((char *)v156 - v160);
            v162 = &v155[4 * v151 - 16];
            v163 = v148 - 4;
            v164 = v159 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v165 = *(_OWORD *)v163;
              *(v162 - 1) = *((_OWORD *)v163 - 1);
              *v162 = v165;
              v162 -= 2;
              v163 -= 8;
              v164 -= 8;
            }
            while (v164);
            v148 = v161;
            if (v159 != (v159 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_256:
              do
              {
                v166 = *((_DWORD *)v148-- - 1);
                *((_DWORD *)v156-- - 1) = v166;
              }
              while (v148 != v149);
            }
          }
        }
        else
        {
          v155 = 0;
          v156 = (float *)(4 * v151);
          *(float *)(4 * v151) = v146;
          v75 = 4 * v151 + 4;
          v157 = (char *)v148 - (char *)v149;
          if (v148 != v149)
            goto LABEL_220;
        }
        *(_QWORD *)a4 = v156;
        *(_QWORD *)(a4 + 8) = v75;
        *(_QWORD *)(a4 + 16) = &v155[4 * v154];
        if (v149)
          operator delete(v149);
        goto LABEL_99;
      }
      *v148 = v146;
      v75 = (uint64_t)(v148 + 1);
LABEL_99:
      *(_QWORD *)(a4 + 8) = v75;
LABEL_100:
      v73 += 4;
      if (v73 == v185)
      {
        v73 = v184;
        break;
      }
    }
  }
  if (v73)
  {
    v185 = v73;
    operator delete(v73);
  }
}

void sub_20F2CB980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  uint64_t v42;
  void *v44;

  if (*(_BYTE *)(v42 - 168) && *(char *)(v42 - 169) < 0)
    operator delete(*(void **)(v42 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a23);
  v44 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v44;
    operator delete(v44);
  }
  if (!__p)
    _Unwind_Resume(a1);
  a34 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F2CBB50(uint64_t a1@<X0>, char ***a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v11;
  void **v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  const char *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  const char *v108;
  __int128 *v109;
  int v110;
  char *__s;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _OWORD v120[24];
  _QWORD v121[3];
  int v122;
  const char *v123;
  int v124;
  const char *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *__dst[2];
  int64_t v129;
  uint64_t v130;
  void *v131[3];
  __int128 v132;
  std::__shared_weak_count *v133;
  char *v134;
  std::__shared_weak_count *v135;
  _QWORD *v136;
  __int128 v137;
  _BYTE v138[24];
  __int128 v139;
  void *v140[2];
  unint64_t v141;
  char v142;
  _QWORD v143[5];

  v143[2] = *MEMORY[0x24BDAC8D0];
  sub_20F435ECC(a2, 0, (char **)v131);
  sub_20F2CA198(&v130);
  if (**(int **)(v130 + 56) > 2)
    goto LABEL_142;
  v7 = *(unsigned __int8 *)(v130 + 72);
  v8 = sub_20E8C31DC(v130, "OSLogSurrogateAppender", 1, 0);
  v9 = v8;
  if (!v7 && v8 == 0)
    goto LABEL_142;
  sub_20E863438((uint64_t)&v112);
  sub_20E86A980(&v113, (uint64_t)"Num query descirptors ", 22);
  std::ostream::operator<<();
  v109 = a3;
  if ((BYTE8(v119) & 0x10) != 0)
  {
    v13 = v119;
    if ((unint64_t)v119 < *((_QWORD *)&v116 + 1))
    {
      *(_QWORD *)&v119 = *((_QWORD *)&v116 + 1);
      v13 = *((_QWORD *)&v116 + 1);
    }
    v14 = (const void *)v116;
    v11 = v13 - v116;
    if ((unint64_t)(v13 - v116) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_63;
  }
  else
  {
    if ((BYTE8(v119) & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v129) = 0;
      v12 = __dst;
      goto LABEL_19;
    }
    v14 = (const void *)*((_QWORD *)&v114 + 1);
    v11 = *((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_63:
      sub_20E860B7C();
  }
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    v12 = (void **)operator new(v15 + 1);
    v129 = v16 | 0x8000000000000000;
    __dst[0] = v12;
    __dst[1] = (void *)v11;
    goto LABEL_18;
  }
  HIBYTE(v129) = v11;
  v12 = __dst;
  if (v11)
LABEL_18:
    memmove(v12, v14, v11);
LABEL_19:
  *((_BYTE *)v12 + v11) = 0;
  v121[0] = &v130;
  v121[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v121[2] = std::chrono::system_clock::now().__d_.__rep_;
  v122 = 2;
  v123 = "unknown file";
  v124 = 171;
  v127 = 0;
  v125 = "unknown function";
  v126 = 0;
  v17 = __dst;
  if (v129 < 0)
    v17 = (void **)__dst[0];
  __s = (char *)v17;
  v18 = *(_QWORD *)v121[0];
  v19 = (const char *)(*(_QWORD *)v121[0] + 16);
  v108 = v19;
  if (*(char *)(*(_QWORD *)v121[0] + 39) < 0)
  {
    v19 = *(const char **)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
  }
  else
  {
    v20 = *(unsigned __int8 *)(*(_QWORD *)v121[0] + 39);
  }
  v110 = v7;
  v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v138);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v138);
    if ((_BYTE)v139 && (v138[23] & 0x80000000) != 0)
      operator delete(*(void **)v138);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v22 = byte_254A4A4F8;
  else
    v22 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v23 = byte_254A4A4F8[23];
  else
    v23 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v138 = os_log_create(v22, v19);
  v24 = &v138[8];
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *(_QWORD *)&v138[16] = v23;
    *(_QWORD *)&v139 = v26 | 0x8000000000000000;
    *(_QWORD *)&v138[8] = v24;
    goto LABEL_38;
  }
  BYTE7(v139) = v23;
  if (v23)
LABEL_38:
    memmove(v24, v22, v23);
  v24[v23] = 0;
  BYTE8(v139) = 1;
  v27 = v140;
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v20 >= 0x17)
  {
    v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v29 = v20 | 7;
    v30 = v29 + 1;
    v27 = (void **)operator new(v29 + 1);
    v140[1] = (void *)v20;
    v141 = v30 | 0x8000000000000000;
    v140[0] = v27;
  }
  else
  {
    HIBYTE(v141) = v20;
    if (!v20)
    {
      LOBYTE(v140[0]) = 0;
      v142 = 1;
      v28 = *(NSObject **)v138;
      if ((SHIBYTE(v141) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_49;
    }
  }
  memmove(v27, v19, v20);
  *((_BYTE *)v27 + v20) = 0;
  v142 = 1;
  v28 = *(NSObject **)v138;
  if ((SHIBYTE(v141) & 0x80000000) == 0)
  {
LABEL_43:
    if (!BYTE8(v139))
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v140[0]);
  if (!BYTE8(v139))
    goto LABEL_52;
LABEL_50:
  if (SBYTE7(v139) < 0)
    operator delete(*(void **)&v138[8]);
LABEL_52:
  if (*(_QWORD *)v138)
    os_release(*(void **)v138);
  if (!v9 || !*(_QWORD *)(v9 + 24))
  {
    os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v138 = 136315138;
    *(_QWORD *)&v138[4] = __s;
    v37 = (void *)_os_log_send_and_compose_impl();
    v38 = v110;
    if (v37)
      free(v37);
    goto LABEL_128;
  }
  v31 = _os_log_pack_size();
  v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
  v33 = (std::__shared_weak_count *)operator new();
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v33->__shared_owners_ = 0;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = v32;
  *(_QWORD *)&v132 = v32;
  *((_QWORD *)&v132 + 1) = v32;
  v134 = 0;
  v135 = 0;
  v133 = v33;
  v34 = strlen(__s);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v39 = v34 | 7;
    v40 = v39 + 1;
    v36 = operator new(v39 + 1);
    *(_QWORD *)&v137 = v35;
    *((_QWORD *)&v137 + 1) = v40 | 0x8000000000000000;
    v136 = v36;
    goto LABEL_67;
  }
  HIBYTE(v137) = v34;
  v36 = &v136;
  if (v34)
LABEL_67:
    memcpy(v36, __s, v35);
  *((_BYTE *)v36 + v35) = 0;
  v41 = v136;
  v143[0] = v137;
  *(_QWORD *)((char *)v143 + 7) = *(_QWORD *)((char *)&v137 + 7);
  v42 = HIBYTE(v137);
  v43 = operator new(0x38uLL);
  v43[1] = 0;
  v43[2] = 0;
  v43[3] = off_24C9ABC20;
  *v43 = &off_24C9ABBD0;
  v44 = v143[0];
  v43[4] = v41;
  v43[5] = v44;
  *(_QWORD *)((char *)v43 + 47) = *(_QWORD *)((char *)v143 + 7);
  *((_BYTE *)v43 + 55) = v42;
  v143[0] = 0;
  *(_QWORD *)((char *)v143 + 7) = 0;
  v45 = v135;
  v134 = (char *)(v43 + 3);
  v135 = (std::__shared_weak_count *)v43;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  *(_OWORD *)v138 = v132;
  v48 = v134;
  *(_QWORD *)&v138[16] = v133;
  if (v133)
  {
    v49 = (unint64_t *)&v133->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = v135;
  *(_QWORD *)&v139 = v48;
  *((_QWORD *)&v139 + 1) = v135;
  if (v135)
  {
    v52 = (unint64_t *)&v135->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    v140[0] = v48;
    do
      v54 = __ldaxr(v52);
    while (__stlxr(v54 - 1, v52));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  else
  {
    v140[0] = v48;
  }
  v55 = v133;
  if (v133)
  {
    v56 = (unint64_t *)&v133->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = *(_QWORD *)v138;
  if (*((char *)v140[0] + 31) >= 0)
    v59 = (char *)v140[0] + 8;
  else
    v59 = (char *)*((_QWORD *)v140[0] + 1);
  v60 = _os_log_pack_fill();
  *(_DWORD *)v60 = 136315138;
  *(_QWORD *)(v60 + 4) = v59;
  v61 = operator new();
  v62 = *(unsigned __int8 *)(v18 + 39);
  v63 = *(const char **)(v18 + 16);
  v64 = *(_QWORD *)(v18 + 24);
  v65 = v139;
  *(_OWORD *)(v61 + 8) = *(_OWORD *)&v138[8];
  if ((v62 & 0x80u) != 0)
    v62 = v64;
  else
    v63 = v108;
  *(_QWORD *)v61 = v58;
  *(_QWORD *)&v138[8] = 0;
  *(_QWORD *)&v138[16] = 0;
  *(_OWORD *)(v61 + 24) = v65;
  v139 = 0uLL;
  *(_QWORD *)(v61 + 40) = v63;
  *(_QWORD *)(v61 + 48) = v62;
  *(_BYTE *)(v61 + 56) = 2;
  v136 = 0;
  *(_QWORD *)&v132 = v61;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v132);
  v66 = v132;
  *(_QWORD *)&v132 = 0;
  v38 = v110;
  if (v66)
  {
    v67 = *(std::__shared_weak_count **)(v66 + 32);
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = *(std::__shared_weak_count **)(v66 + 16);
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    MEMORY[0x212BC6398](v66, 0x10F0C40B62ED6C6);
    v73 = v136;
    v136 = 0;
    if (v73)
    {
      v74 = (std::__shared_weak_count *)v73[4];
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)v73[2];
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *(std::__shared_weak_count **)&v138[16];
  if (*(_QWORD *)&v138[16])
  {
    v84 = (unint64_t *)(*(_QWORD *)&v138[16] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
LABEL_128:
  if (v38)
  {
    v86 = (const char *)__dst;
    if (v129 < 0)
      v86 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v121, "%s", v86);
    sub_20E863570((uint64_t)v121);
  }
  sub_20E863570((uint64_t)v121);
  v87 = v127;
  if (v127)
  {
    v88 = (unint64_t *)&v127->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)&v112 = *MEMORY[0x24BEDB7F0];
  v90 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v112 + *(_QWORD *)(v112 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v113 = v90;
  *((_QWORD *)&v113 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v118) < 0)
    operator delete(*((void **)&v117 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v120);
  a3 = v109;
LABEL_142:
  sub_20F431A98(**(_QWORD **)(a1 + 8), (uint64_t *)v131, a3, &v112);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 128;
  v91 = operator new(0x200uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)a4 = v91;
  *(_DWORD *)(a4 + 16) = 128;
  v92 = v113;
  *v91 = v112;
  v91[1] = v92;
  v93 = v115;
  v91[2] = v114;
  v91[3] = v93;
  v94 = v117;
  v91[4] = v116;
  v91[5] = v94;
  v95 = v119;
  v91[6] = v118;
  v91[7] = v95;
  v96 = v120[1];
  v91[8] = v120[0];
  v91[9] = v96;
  v97 = v120[3];
  v91[10] = v120[2];
  v91[11] = v97;
  v98 = v120[5];
  v91[12] = v120[4];
  v91[13] = v98;
  v99 = v120[7];
  v91[14] = v120[6];
  v91[15] = v99;
  v100 = v120[9];
  v91[16] = v120[8];
  v91[17] = v100;
  v101 = v120[11];
  v91[18] = v120[10];
  v91[19] = v101;
  v102 = v120[13];
  v91[20] = v120[12];
  v91[21] = v102;
  v103 = v120[15];
  v91[22] = v120[14];
  v91[23] = v103;
  v104 = v120[17];
  v91[24] = v120[16];
  v91[25] = v104;
  v105 = v120[19];
  v91[26] = v120[18];
  v91[27] = v105;
  v106 = v120[21];
  v91[28] = v120[20];
  v91[29] = v106;
  v107 = v120[23];
  v91[30] = v120[22];
  v91[31] = v107;
  if (v131[0])
  {
    v131[1] = v131[0];
    operator delete(v131[0]);
  }
}

void sub_20F2CC678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 168) && *(char *)(v7 - 169) < 0)
    operator delete(*(void **)(v7 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x230]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  sub_20E863784((uint64_t)va);
  v9 = (void *)STACK[0x298];
  if (!STACK[0x298])
    _Unwind_Resume(a1);
  STACK[0x2A0] = (unint64_t)v9;
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20F2CC7D4(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  std::string::size_type v31;
  _BYTE *p_dst;
  unint64_t v33;
  const void **v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  const char *v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  std::string::size_type *p_size;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  void *v57;
  _QWORD *v58;
  size_t v59;
  std::string::size_type v60;
  _BYTE *v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::string::size_type v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  std::string::size_type v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v127;
  unint64_t v129;
  char *v130;
  uint64_t **v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  uint64_t *v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _OWORD *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char *__s;
  unint64_t v160;
  _QWORD *v161;
  int v165;
  _QWORD *v166;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v169;
  const char *v170;
  int v171;
  const char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  std::string v175;
  std::string __dst;
  void *v177[2];
  _QWORD v178[3];
  _QWORD v179[3];
  uint64_t v180;
  unint64_t v181;
  void *v182;
  char v183;
  unint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  std::string v188;
  char *v189;
  std::__shared_weak_count *v190;
  std::string v191;
  __int128 v192;
  unsigned __int8 v193;
  std::string v194;
  __int128 v195;
  void *v196[2];
  unint64_t v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  a5[1] = *a5;
  v5 = *(_QWORD **)a2;
  v161 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v161)
  {
    v6 = a5;
    v7 = a4;
    v8 = a3;
    v9 = a1;
    LODWORD(v10) = 0;
    v155 = (void *)*MEMORY[0x24BEDB7F0];
    v153 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v154 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v152 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v166 = v5;
      v11 = *v5;
      v12 = atomic_load((unsigned __int8 *)&qword_254A68848);
      if ((v12 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_254A68848))
      {
        sub_21021D3D8(&v194);
        sub_20E8610C0(v177, "cv3d.vio.area_mapping");
        sub_20E8C4068((uint64_t **)&v194, (uint64_t)v177, &qword_254A68840);
        if (SHIBYTE(v178[0]) < 0)
          operator delete(v177[0]);
        __cxa_guard_release((__guard *)&qword_254A68848);
        v7 = a4;
        v8 = a3;
        v9 = a1;
      }
      v165 = v10;
      v187 = qword_254A68840;
      if (**(int **)(qword_254A68840 + 56) <= 2)
      {
        v13 = *(unsigned __int8 *)(qword_254A68840 + 72);
        v14 = sub_20E8C31DC(qword_254A68840, "OSLogSurrogateAppender", 1, 0);
        v15 = v14;
        if (v13 || v14 != 0)
          break;
      }
LABEL_175:
      v115 = *(uint64_t **)(v11 + 144);
      v116 = *(uint64_t **)(v11 + 152);
      if (v115 != v116)
      {
        v117 = *(unsigned __int8 *)(v7 + 8);
        if (*(_BYTE *)(v7 + 8))
        {
          v117 = 0;
          v118 = v115;
          do
          {
            if (*v118 == v8 || *(_QWORD *)v7 == *v118)
              v117 += *((_DWORD *)v118 + 5);
            v118 += 4;
          }
          while (v118 != v116);
        }
        else
        {
          v122 = v115;
          do
          {
            if (*v122 == v8)
              v117 += *((_DWORD *)v122 + 5);
            v122 += 4;
          }
          while (v122 != v116);
        }
        v123 = v117 > *v9;
        while (2)
        {
          v125 = *v115;
          if (*v115 == v8)
            goto LABEL_193;
          if (*(_BYTE *)(v7 + 8) && *(_QWORD *)v7 == v125)
            goto LABEL_193;
          v127 = *((_DWORD *)v115 + 5);
          v123 |= v127 > *v9;
          if (*((_DWORD *)v115 + 3) <= v9[1] || v127 >= v9[2])
            goto LABEL_193;
          v130 = (char *)v6[1];
          v129 = v6[2];
          if ((unint64_t)v130 >= v129)
          {
            v131 = (uint64_t **)v6;
            v132 = (char *)*v6;
            v133 = (uint64_t)&v130[-*v6];
            v134 = v133 >> 3;
            v135 = (v133 >> 3) + 1;
            if (v135 >> 61)
              sub_20E92CED8();
            v136 = v129 - (_QWORD)v132;
            if (v136 >> 2 > v135)
              v135 = v136 >> 2;
            if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
              v137 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v137 = v135;
            if (v137)
            {
              if (v137 >> 61)
                sub_20E877A38();
              v138 = operator new(8 * v137);
              v139 = (uint64_t *)&v138[8 * v134];
              *v139 = *v115;
              v124 = (uint64_t)(v139 + 1);
              v140 = v130 - v132;
              if (v130 != v132)
              {
LABEL_213:
                v141 = v140 - 8;
                if (v141 < 0x58)
                {
                  v8 = a3;
                  goto LABEL_221;
                }
                v142 = v130 - v138 - v133;
                v8 = a3;
                if (v142 < 0x20)
                  goto LABEL_252;
                v143 = (v141 >> 3) + 1;
                v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
                v145 = &v130[-v144];
                v139 = (uint64_t *)((char *)v139 - v144);
                v146 = &v138[8 * v134 - 16];
                v147 = v130 - 16;
                v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v149 = *(_OWORD *)v147;
                  *(v146 - 1) = *((_OWORD *)v147 - 1);
                  *v146 = v149;
                  v146 -= 2;
                  v147 -= 32;
                  v148 -= 4;
                }
                while (v148);
                v130 = v145;
                if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_252:
                  do
                  {
LABEL_221:
                    v150 = *((_QWORD *)v130 - 1);
                    v130 -= 8;
                    *--v139 = v150;
                  }
                  while (v130 != v132);
                }
LABEL_222:
                v6 = v131;
                *v131 = v139;
                v131[1] = (uint64_t *)v124;
                v131[2] = (uint64_t *)&v138[8 * v137];
                if (v132)
                  operator delete(v132);
                v7 = a4;
                v9 = a1;
LABEL_192:
                v6[1] = v124;
LABEL_193:
                v115 += 4;
                if (v115 == v116)
                {
                  v120 = (uint64_t *)*v6;
                  v121 = (uint64_t *)v6[1];
                  if ((v123 & 1) == 0)
                    goto LABEL_226;
                  goto LABEL_3;
                }
                continue;
              }
            }
            else
            {
              v138 = 0;
              v139 = (uint64_t *)(8 * v134);
              *(_QWORD *)(8 * v134) = v125;
              v124 = 8 * v134 + 8;
              v140 = v130 - v132;
              if (v130 != v132)
                goto LABEL_213;
            }
            v8 = a3;
            goto LABEL_222;
          }
          break;
        }
        *(_QWORD *)v130 = v125;
        v124 = (uint64_t)(v130 + 8);
        goto LABEL_192;
      }
      v120 = (uint64_t *)*v6;
      v121 = (uint64_t *)v6[1];
LABEL_226:
      v151 = &v120[v165];
      if (v151 != v121)
      {
        v6[1] = v151;
        v121 = &v120[v165];
      }
LABEL_3:
      v10 = v121 - v120;
      v5 = v166 + 2;
      if (v166 + 2 == v161)
        return;
    }
    sub_20E863438((uint64_t)v177);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&__dst, "query");
    v17 = *(_DWORD *)(v11 + 200);
    v175.__r_.__value_.__r.__words[0] = *(_QWORD *)(v11 + 192);
    LODWORD(v175.__r_.__value_.__r.__words[1]) = v17;
    sub_210216370((uint64_t)&v175);
    if ((v193 & 0x80u) == 0)
      v18 = (const std::string::value_type *)&v192;
    else
      v18 = (const std::string::value_type *)v192;
    if ((v193 & 0x80u) == 0)
      v19 = v193;
    else
      v19 = *((_QWORD *)&v192 + 1);
    v20 = std::string::append(&__dst, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v191.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v191, ",", 1uLL);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v188.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v175, *(_DWORD *)(v11 + 208));
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v175;
    else
      v24 = (std::string *)v175.__r_.__value_.__r.__words[0];
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v175.__r_.__value_.__r.__words[2]);
    else
      size = v175.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v188, (const std::string::value_type *)v24, size);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    rep = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    sub_20FCC27E4((_QWORD *)(v11 + 24), (uint64_t)__p, &v194);
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v194;
    else
      v28 = (std::string *)v194.__r_.__value_.__r.__words[0];
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
    else
      v29 = v194.__r_.__value_.__l.__size_;
    sub_20E86A980(v178, (uint64_t)v28, v29);
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v194.__r_.__value_.__l.__data_);
      if ((SHIBYTE(rep) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_31;
        goto LABEL_40;
      }
    }
    else if ((SHIBYTE(rep) & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(__p[0]);
    if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v175.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v188.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)v193 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v191.__r_.__value_.__l.__data_);
    if (((char)v193 & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_44;
    }
LABEL_43:
    operator delete((void *)v192);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_35:
      v30 = v185;
      v158 = v13;
      if ((v185 & 0x10) == 0)
      {
LABEL_36:
        if ((v30 & 8) == 0)
        {
          v31 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          p_dst = &__dst;
          goto LABEL_56;
        }
        v33 = v179[2];
        v34 = (const void **)v179;
LABEL_48:
        v35 = *v34;
        v31 = v33 - (_QWORD)*v34;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v31 >= 0x17)
        {
          v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v36 = v31 | 7;
          v37 = v36 + 1;
          p_dst = operator new(v36 + 1);
          __dst.__r_.__value_.__l.__size_ = v31;
          __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v33 - *(_BYTE *)v34;
          p_dst = &__dst;
          if (!v31)
          {
LABEL_56:
            p_dst[v31] = 0;
            __p[0] = &v187;
            __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
            rep = std::chrono::system_clock::now().__d_.__rep_;
            v169 = 2;
            v170 = "unknown file";
            v171 = 62;
            v172 = "unknown function";
            v173 = 0;
            v174 = 0;
            v38 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v38 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            __s = (char *)v38;
            v39 = *(_QWORD *)__p[0];
            v40 = *(_QWORD *)__p[0] + 16;
            v157 = *(_QWORD *)__p[0];
            if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
            {
              v42 = *(const char **)(v39 + 16);
              v41 = *(_QWORD *)(v39 + 24);
              v160 = v15;
              v44 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v44 & 1) != 0)
                goto LABEL_62;
            }
            else
            {
              v41 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
              v42 = (const char *)(*(_QWORD *)__p[0] + 16);
              v160 = v15;
              v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v43 & 1) != 0)
                goto LABEL_62;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v188);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v188);
              if ((_BYTE)v189 && SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v188.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
              v7 = a4;
              v8 = a3;
            }
LABEL_62:
            if (byte_254A4A4F8[23] >= 0)
              v45 = byte_254A4A4F8;
            else
              v45 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v46 = byte_254A4A4F8[23];
            else
              v46 = *(_QWORD *)&byte_254A4A4F8[8];
            v194.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v45, v42);
            if (v46 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v156 = v40;
            if (v46 >= 0x17)
            {
              v48 = v11;
              v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v46 | 7) != 0x17)
                v49 = v46 | 7;
              v50 = v49 + 1;
              p_size = (std::string::size_type *)operator new(v49 + 1);
              v194.__r_.__value_.__r.__words[2] = v46;
              *(_QWORD *)&v195 = v50 | 0x8000000000000000;
              v194.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
              v11 = v48;
            }
            else
            {
              BYTE7(v195) = v46;
              p_size = &v194.__r_.__value_.__l.__size_;
              if (!v46)
              {
LABEL_76:
                *((_BYTE *)p_size + v46) = 0;
                BYTE8(v195) = 1;
                if (v41 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v41 >= 0x17)
                {
                  v53 = v11;
                  v54 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v41 | 7) != 0x17)
                    v54 = v41 | 7;
                  v55 = v54 + 1;
                  v51 = (void **)operator new(v54 + 1);
                  v196[1] = (void *)v41;
                  v197 = v55 | 0x8000000000000000;
                  v196[0] = v51;
                  v11 = v53;
                }
                else
                {
                  HIBYTE(v197) = v41;
                  v51 = v196;
                  if (!v41)
                  {
                    LOBYTE(v196[0]) = 0;
                    v198 = 1;
                    v52 = v194.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v197) & 0x80000000) == 0)
                      goto LABEL_80;
                    goto LABEL_86;
                  }
                }
                memmove(v51, v42, v41);
                *((_BYTE *)v51 + v41) = 0;
                v198 = 1;
                v52 = v194.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v197) & 0x80000000) == 0)
                {
LABEL_80:
                  if (!BYTE8(v195))
                    goto LABEL_89;
                  goto LABEL_87;
                }
LABEL_86:
                operator delete(v196[0]);
                if (!BYTE8(v195))
                  goto LABEL_89;
LABEL_87:
                if (SBYTE7(v195) < 0)
                  operator delete((void *)v194.__r_.__value_.__l.__size_);
LABEL_89:
                if (v194.__r_.__value_.__r.__words[0])
                  os_release(v194.__r_.__value_.__l.__data_);
                if (!v160 || !*(_QWORD *)(v160 + 24))
                {
                  os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG);
                  LODWORD(v194.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
                  v62 = (void *)_os_log_send_and_compose_impl();
                  v63 = v158;
                  if (!v62)
                    goto LABEL_162;
                  free(v62);
                  if (!v158)
                    goto LABEL_166;
                  goto LABEL_163;
                }
                v56 = _os_log_pack_size();
                v57 = operator new(v56, (std::align_val_t)8uLL);
                v58 = (_QWORD *)operator new();
                *v58 = &off_24C9ABB80;
                v58[1] = 0;
                v58[2] = 0;
                v58[3] = v57;
                v188.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
                v188.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
                v188.__r_.__value_.__r.__words[2] = (std::string::size_type)v58;
                v189 = 0;
                v190 = 0;
                v59 = strlen(__s);
                if (v59 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v60 = v59;
                if (v59 >= 0x17)
                {
                  v64 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v59 | 7) != 0x17)
                    v64 = v59 | 7;
                  v65 = v64 + 1;
                  v61 = operator new(v64 + 1);
                  v191.__r_.__value_.__l.__size_ = v60;
                  v191.__r_.__value_.__r.__words[2] = v65 | 0x8000000000000000;
                  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
                }
                else
                {
                  *((_BYTE *)&v191.__r_.__value_.__s + 23) = v59;
                  v61 = &v191;
                  if (!v59)
                  {
LABEL_104:
                    v61[v60] = 0;
                    *(_QWORD *)&v192 = v191.__r_.__value_.__l.__size_;
                    v66 = v191.__r_.__value_.__r.__words[0];
                    *(_QWORD *)((char *)&v192 + 7) = *(std::string::size_type *)((char *)&v191.__r_.__value_.__r.__words[1]
                                                                               + 7);
                    v67 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
                    v68 = operator new(0x38uLL);
                    v68[1] = 0;
                    v68[2] = 0;
                    v68[3] = off_24C9ABC20;
                    *v68 = &off_24C9ABBD0;
                    v69 = v192;
                    v68[4] = v66;
                    v68[5] = v69;
                    *(_QWORD *)((char *)v68 + 47) = *(_QWORD *)((char *)&v192 + 7);
                    *((_BYTE *)v68 + 55) = v67;
                    *(_QWORD *)&v192 = 0;
                    *(_QWORD *)((char *)&v192 + 7) = 0;
                    v70 = v190;
                    v189 = (char *)(v68 + 3);
                    v190 = (std::__shared_weak_count *)v68;
                    v8 = a3;
                    if (v70)
                    {
                      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
                      do
                        v72 = __ldaxr(p_shared_owners);
                      while (__stlxr(v72 - 1, p_shared_owners));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                    }
                    v194 = v188;
                    v73 = v189;
                    if (v188.__r_.__value_.__r.__words[2])
                    {
                      v74 = (unint64_t *)(v188.__r_.__value_.__r.__words[2] + 8);
                      do
                        v75 = __ldxr(v74);
                      while (__stxr(v75 + 1, v74));
                    }
                    v76 = v190;
                    *(_QWORD *)&v195 = v73;
                    *((_QWORD *)&v195 + 1) = v190;
                    if (v190)
                    {
                      v77 = (unint64_t *)&v190->__shared_owners_;
                      do
                        v78 = __ldxr(v77);
                      while (__stxr(v78 + 1, v77));
                      v196[0] = v73;
                      do
                        v79 = __ldaxr(v77);
                      while (__stlxr(v79 - 1, v77));
                      if (!v79)
                      {
                        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                        std::__shared_weak_count::__release_weak(v76);
                      }
                    }
                    else
                    {
                      v196[0] = v73;
                    }
                    v80 = (std::__shared_weak_count *)v188.__r_.__value_.__r.__words[2];
                    if (v188.__r_.__value_.__r.__words[2])
                    {
                      v81 = (unint64_t *)(v188.__r_.__value_.__r.__words[2] + 8);
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    v83 = v194.__r_.__value_.__r.__words[0];
                    if (*((char *)v196[0] + 31) >= 0)
                      v84 = (char *)v196[0] + 8;
                    else
                      v84 = (char *)*((_QWORD *)v196[0] + 1);
                    v85 = _os_log_pack_fill();
                    *(_DWORD *)v85 = 136315138;
                    *(_QWORD *)(v85 + 4) = v84;
                    v86 = operator new();
                    v87 = *(unsigned __int8 *)(v157 + 39);
                    v88 = *(_QWORD *)(v157 + 16);
                    v89 = *(_QWORD *)(v157 + 24);
                    v90 = v195;
                    *(_OWORD *)(v86 + 8) = *(_OWORD *)&v194.__r_.__value_.__r.__words[1];
                    if ((v87 & 0x80u) != 0)
                      v87 = v89;
                    else
                      v88 = v156;
                    *(_QWORD *)v86 = v83;
                    *(_OWORD *)&v194.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v86 + 24) = v90;
                    v195 = 0uLL;
                    *(_QWORD *)(v86 + 40) = v88;
                    *(_QWORD *)(v86 + 48) = v87;
                    *(_BYTE *)(v86 + 56) = 2;
                    v191.__r_.__value_.__r.__words[0] = 0;
                    v188.__r_.__value_.__r.__words[0] = v86;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v160 + 24) + 40))(*(_QWORD *)(v160 + 24), &v188);
                    v91 = v188.__r_.__value_.__r.__words[0];
                    v188.__r_.__value_.__r.__words[0] = 0;
                    if (v91)
                    {
                      v92 = *(std::__shared_weak_count **)(v91 + 32);
                      if (v92)
                      {
                        v93 = (unint64_t *)&v92->__shared_owners_;
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                        if (!v94)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
                      v95 = *(std::__shared_weak_count **)(v91 + 16);
                      if (v95)
                      {
                        v96 = (unint64_t *)&v95->__shared_owners_;
                        do
                          v97 = __ldaxr(v96);
                        while (__stlxr(v97 - 1, v96));
                        if (!v97)
                        {
                          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                          std::__shared_weak_count::__release_weak(v95);
                        }
                      }
                      MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                      v98 = v191.__r_.__value_.__r.__words[0];
                      v191.__r_.__value_.__r.__words[0] = 0;
                      if (v98)
                      {
                        v99 = *(std::__shared_weak_count **)(v98 + 32);
                        if (v99)
                        {
                          v100 = (unint64_t *)&v99->__shared_owners_;
                          do
                            v101 = __ldaxr(v100);
                          while (__stlxr(v101 - 1, v100));
                          if (!v101)
                          {
                            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                            std::__shared_weak_count::__release_weak(v99);
                          }
                        }
                        v102 = *(std::__shared_weak_count **)(v98 + 16);
                        if (v102)
                        {
                          v103 = (unint64_t *)&v102->__shared_owners_;
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        MEMORY[0x212BC6398](v98, 0x10F0C40B62ED6C6);
                      }
                    }
                    v105 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
                    v63 = v158;
                    if (!*((_QWORD *)&v195 + 1))
                      goto LABEL_158;
                    v106 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                    do
                      v107 = __ldaxr(v106);
                    while (__stlxr(v107 - 1, v106));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                      v108 = (std::__shared_weak_count *)v194.__r_.__value_.__r.__words[2];
                      if (!v194.__r_.__value_.__r.__words[2])
                        goto LABEL_162;
                    }
                    else
                    {
LABEL_158:
                      v108 = (std::__shared_weak_count *)v194.__r_.__value_.__r.__words[2];
                      if (!v194.__r_.__value_.__r.__words[2])
                        goto LABEL_162;
                    }
                    v109 = (unint64_t *)&v108->__shared_owners_;
                    do
                      v110 = __ldaxr(v109);
                    while (__stlxr(v110 - 1, v109));
                    if (v110)
                    {
LABEL_162:
                      if (!v63)
                        goto LABEL_166;
                      goto LABEL_163;
                    }
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                    if (!v158)
                      goto LABEL_166;
LABEL_163:
                    v111 = &__dst;
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v111 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    sub_20E8C003C((uint64_t)__p, "%s", (const char *)v111);
                    sub_20E863570((uint64_t)__p);
LABEL_166:
                    sub_20E863570((uint64_t)__p);
                    v112 = v174;
                    if (!v174)
                      goto LABEL_170;
                    v113 = (unint64_t *)&v174->__shared_owners_;
                    do
                      v114 = __ldaxr(v113);
                    while (__stlxr(v114 - 1, v113));
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_172;
                    }
                    else
                    {
LABEL_170:
                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_172:
                        v177[0] = v155;
                        *(void **)((char *)v177 + *((_QWORD *)v155 - 3)) = v154;
                        v178[0] = v153;
                        v178[1] = v152;
                        v9 = a1;
                        if (v183 < 0)
                          operator delete(v182);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v186);
                        goto LABEL_175;
                      }
                    }
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    goto LABEL_172;
                  }
                }
                memcpy(v61, __s, v60);
                goto LABEL_104;
              }
            }
            memmove(p_size, v45, v46);
            goto LABEL_76;
          }
        }
        memmove(p_dst, v35, v31);
        goto LABEL_56;
      }
LABEL_45:
      v33 = v184;
      v34 = (const void **)&v180;
      if (v184 < v181)
      {
        v184 = v181;
        v33 = v181;
        v34 = (const void **)&v180;
      }
      goto LABEL_48;
    }
LABEL_44:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v30 = v185;
    v158 = v13;
    if ((v185 & 0x10) == 0)
      goto LABEL_36;
    goto LABEL_45;
  }
}

void sub_20F2CD80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60)
{
  if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a41);
  if ((a59 & 0x80000000) == 0)
  {
    sub_20E863784((uint64_t)&a60);
    _Unwind_Resume(a1);
  }
  operator delete(a54);
  sub_20E863784((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_20F2CDAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2CDAF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  __int128 v17;

  __p = operator new(0x28uLL);
  v17 = xmmword_2102DC280;
  strcpy((char *)__p, "MapPruningLogicConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.submap_min_num_2d_3d_matches_to_declare_tracked", v4, "Minimum number of inlier 3D points from a submap to declare as tracked.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.submap_min_num_projected_3d_points_as_ignored_submap", v5, "Minimum number of projected 3D points from a submap to declare as visible.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.submap_max_num_2d_3d_matches_as_ignored_submap", v6, "Maximum number of matched 3D points from a submap allowed before to declare ignoring this submap.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.ignore_untracked_submap_for_keyframe_classification", v7, "Flag to enable/disable ignoring untracked submap for keyframe classification.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 73));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.enable_overlap_submap_pruning", v8, "Flag to enable / disable overlap detection for pruning.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.overlapped_keyframe_distance_threshold_m", v9, "Keyframe distance threshold when sampling keyframe from candidate overlapped submap.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)(a1 + 74));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.remove_far_distant_user_anchor_after_reanchor", v10, "Option to remove far distant user anchor after submap pruning.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.max_anchor_to_base_distance_after_pruning", v11, "Maximum distance between anchor and its base keyframe after pruning. unit [m].");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.min_submap_overlap_ratio_for_pruning", v12, "Minimum submap overlap ratio required to consider pruning candidate.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.num_maximum_active_states", v13, "Maximum number of active states before pruning is triggered.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 56));
  return sub_20E8B2F9C((uint64_t *)&__p, "MapPruningLogicConfig.min_active_submap_overlap_ratio_for_pruning", v14, "Minimum submap overlap ratio for active submaps required to consider pruning candidate.");
}

void sub_20F2CDD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20F2CDE04(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t j;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  int *v37;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  sub_20E8965F4();
  v6 = *a1;
  v28 = a1[1];
  if (*a1 != v28)
  {
    do
    {
      v29 = v6;
      v32 = *v6;
      if (*v6 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
LABEL_60:
        abort();
      }
      v31 = -991146299 * ((*((_QWORD *)v29 + 2) - *((_QWORD *)v29 + 1)) >> 7);
      if (v31)
      {
        v33 = 0;
        v30 = v32 << 16;
        do
        {
          if (v32 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v22 = qword_254A6DE40;
              for (i = qword_254A6DE48; v22 != i; v22 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v22)(*(_QWORD *)(v22 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v8 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_60;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v33 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v9 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v24 = qword_254A6DE40;
              for (j = qword_254A6DE48; v24 != j; v24 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v24)(*(_QWORD *)(v24 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v10 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_60;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v36 = (unsigned __int16)v33 | v30;
          if ((a2 & 0xFF00000000) != 0
            && a2 + (unint64_t)((unsigned __int16)v33 | v30) <= 0xFC17FFFE)
          {
            v37 = (int *)&v36;
            *((_DWORD *)sub_20F2CE5F0(a3, &v36, (uint64_t)&unk_2102DB95C, &v37) + 5) = a2
                                                                                    + ((unsigned __int16)v33 | v30)
                                                                                    + 65536000;
          }
          else
          {
            do
            {
              v11 = *(_QWORD *)(v34 + 2496);
              v12 = (v11 + 1) % 0x270uLL;
              v13 = *(_DWORD *)(v34 + 4 * ((v11 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v34 + 4 * v12) & 0x7FFFFFFE | *(_DWORD *)(v34 + 4 * v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v34 + 4 * v12) << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)(v34 + 4 * v11) = v13;
              if (v12 == 623)
                v14 = 0;
              else
                v14 = v12 + 1;
              if (v12 >= 0xE3)
                v15 = -227;
              else
                v15 = 397;
              *(_DWORD *)(v34 + 4 * v12) = *(_DWORD *)(v34 + 4 * (v15 + v12)) ^ ((*(_DWORD *)(v34 + 4 * v14) & 0x7FFFFFFE | *(_DWORD *)(v34 + 4 * v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v34 + 4 * v14) << 31) >> 31) & 0x9908B0DF;
              v16 = (v14 + 1) % 0x270;
              *(_DWORD *)(v34 + 4 * v14) = *(_DWORD *)(v34 + 4 * ((v14 + 397) % 0x270)) ^ ((*(_DWORD *)(v34 + 4 * v16) & 0x7FFFFFFE | *(_DWORD *)(v34 + 4 * v14) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v34 + 4 * v16) << 31) >> 31) & 0x9908B0DF;
              if (v16 == 623)
                v17 = 0;
              else
                v17 = v16 + 1;
              if (v16 >= 0xE3)
                v18 = -227;
              else
                v18 = 397;
              *(_DWORD *)(v34 + 4 * v16) = *(_DWORD *)(v34 + 4 * (v18 + v16)) ^ ((*(_DWORD *)(v34 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(v34 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v34 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
              *(_QWORD *)(v34 + 2496) = v17;
              v37 = (int *)&v36;
              v19 = sub_20F2CE5F0(a3, &v36, (uint64_t)&unk_2102DB95C, &v37);
              v20 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
              v21 = (v20 << 15) & 0xEFC60000 ^ v20 ^ (((v20 << 15) & 0xEFC60000 ^ v20) >> 18);
              *((_DWORD *)v19 + 5) = v21;
            }
            while (v21 == -1);
          }
          ++v33;
        }
        while (v33 != v31);
      }
      v6 = v29 + 8;
    }
    while (v29 + 8 != v28);
  }
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)())v35->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20F2CE480(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F2CE494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20E896798((uint64_t)va);
  sub_20E8C25A8(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2CE4C4()
{
  uint64_t v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  sub_20E8965F4();
  v6 = v4;
  sub_20E893368(&v7, &v6);
  v11[0] = (v7 | ((unint64_t)v8 << 32) | ((unint64_t)BYTE1(v8) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v8) << 56) | ((unint64_t)(HIWORD(v8) & 0xF | 0x40) << 48);
  v11[1] = ((unint64_t)v10 << 32) | ((unint64_t)BYTE1(v10) << 40) | v9 & 0xFFFFFF00 | ((unint64_t)v10 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v10) << 48) | v9 & 0x3F | 0x80;
  v0 = sub_2102322B4((unsigned __int8 *)v11);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)())v5->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v0;
}

void sub_20F2CE5DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E896798((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2CE5F0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20F2CE8E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2CE8F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  __int128 v12;

  __p = operator new(0x28uLL);
  v12 = xmmword_2102DC910;
  strcpy((char *)__p, "MapStructureBuildingConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 37));
  sub_20E8B2F9C((uint64_t *)&__p, "MapStructureBuildingConfig.use_triangulator_mask_outlier", v4, "Use triangulator mask outlier");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 39));
  sub_20E8B2F9C((uint64_t *)&__p, "MapStructureBuildingConfig.track_refinement", v5, "track_refinement");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "MapStructureBuildingConfig.mapping_image_sigma_scale_factor", v6, "Image sigma scaling factor for constructing map landmarks");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 38));
  sub_20E8B2F9C((uint64_t *)&__p, "MapStructureBuildingConfig.estimate_map_points_by_filter", v7, "Estimate the map points by the filter \n");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 36));
  sub_20E8B2F9C((uint64_t *)&__p, "MapStructureBuildingConfig.enable_proper_depth_covariance", v8, "Whether to use an initial depth covariance for mono-depth tracks, if false the identity matrix is used (unit-ball uncertainty)");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EF4E784((float *)(a1 + 32));
  return sub_20E8B2F9C((uint64_t *)&__p, "MapStructureBuildingConfig.mono_depth_to_sigma_scale", v9, "Constant factor for mapping Jasper depth measurements to uncertainty");
}

void sub_20F2CEA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F2CEAF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  __int128 v11;

  __p = operator new(0x38uLL);
  v11 = xmmword_2102DCA50;
  strcpy((char *)__p, "Rematching MapStructureBuildingConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 37));
  sub_20E8B2F9C((uint64_t *)&__p, "RematchStructureBuildingConfig.use_triangulator_mask_outlier", v4, "Use triangulator mask outlier");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 39));
  sub_20E8B2F9C((uint64_t *)&__p, "RematchStructureBuildingConfig.track_refinement", v5, "track_refinement");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "RematchStructureBuildingConfig.mapping_image_sigma_scale_factor", v6, "Image sigma scaling factor for constructing map landmarks");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "RematchStructureBuildingConfig.skip_recompute_existing_covariance", v7, "Skip recomputing covariance of features with existing covariance estimate.\n");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 38));
  return sub_20E8B2F9C((uint64_t *)&__p, "RematchStructureBuildingConfig.estimate_map_points_by_filter", v8, "Estimate the map points by the filter.\n");
}

void sub_20F2CEC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F2CECC4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FCFE8;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F2CED00(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FCFE8;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20F2CED4C(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, unint64_t **a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  double v7;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  float v15;
  const std::nothrow_t *v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 *v29;
  uint64_t v30;
  __n128 *v31;
  unint64_t v32;
  __n128 *v33;
  __n128 *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t j;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  __n128 *v41;
  unint64_t n128_u64;
  __n128 *v43;
  uint64_t v44;
  unint64_t v45;
  __n128 *v46;
  __n128 v47;
  unint64_t i;
  __int128 v49;
  void *v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 *v57;
  BOOL v58;
  char *v59;
  __n128 *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  __int128 *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  void *__p;
  char *v75;

  v7 = a6.n128_f64[0];
  if ((a6.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapTrackingBase.cpp", 37, (uint64_t)"std::isfinite(minimum_half_FOV_deg)", 35, (uint64_t)"Invalid lens FOV", 16, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = (void *)a1[29];
  a1[30] = (unint64_t)v10;
  v11 = (((char *)a3[1] - (char *)*a3) >> 4) * a1[1];
  if (v11 > (uint64_t)(a1[31] - (_QWORD)v10) >> 5)
  {
    if (v11 >> 59)
      sub_20E867F44();
    v12 = 32 * v11;
    v13 = operator new(32 * v11);
    a1[29] = (unint64_t)v13;
    a1[30] = (unint64_t)v13;
    a1[31] = (unint64_t)v13 + v12;
    if (v10)
      operator delete(v10);
  }
  v70 = a5;
  v14 = *a3;
  v71 = a3[1];
  if (*a3 != v71)
  {
    v15 = v7;
    v16 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    while (1)
    {
      a6.n128_f32[0] = v15;
      sub_20F28CF60(*v14, a2, a1[1], a4, 0, 0, 0, &__p, (float64x2_t)a6, 1.0, 1.79769313e308);
      v18 = (__n128 *)__p;
      v17 = (__n128 *)v75;
      v19 = (v75 - (_BYTE *)__p) >> 5;
      if (v75 - (_BYTE *)__p < 1)
        goto LABEL_47;
      v21 = a1[29];
      v20 = a1[30];
      v22 = v20 - v21;
      v23 = v21 + ((v20 - v21) & 0xFFFFFFFFFFFFFFE0);
      v24 = a1[31];
      if (v19 > (uint64_t)(v24 - v20) >> 5)
      {
        v25 = v22 >> 5;
        v26 = (v22 >> 5) + v19;
        if (v26 >> 59)
          sub_20E867F44();
        v27 = v24 - v21;
        if (v27 >> 4 > v26)
          v26 = v27 >> 4;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
          v28 = 0x7FFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 59)
            sub_20E877A38();
          v29 = (__n128 *)operator new(32 * v28);
        }
        else
        {
          v29 = 0;
        }
        v41 = &v29[2 * v25];
        n128_u64 = (unint64_t)v41[2 * v19].n128_u64;
        v43 = v41;
        do
        {
          a6 = *v18;
          v43[1].n128_u64[0] = v18[1].n128_u64[0];
          *v43 = a6;
          a6.n128_u64[0] = v18[1].n128_u64[1];
          v43[1].n128_u64[1] = a6.n128_u64[0];
          v43 += 2;
          v18 += 2;
        }
        while (v43 != (__n128 *)n128_u64);
        if ((unint64_t)v22 >= 0x20)
        {
          v44 = 32 * v25;
          v45 = v21 - 32;
          do
          {
            v46 = &v29[(unint64_t)v44 / 0x10];
            a6 = *(__n128 *)(v45 + v44);
            v47 = *(__n128 *)(v45 + v44 + 16);
            v46[-2] = a6;
            v46[-1] = v47;
            v44 -= 32;
          }
          while (v44);
          v41 = v29;
        }
        for (i = a1[30]; v23 != i; n128_u64 += 32)
        {
          a6 = *(__n128 *)v23;
          v49 = *(_OWORD *)(v23 + 16);
          v23 += 32;
          *(__n128 *)n128_u64 = a6;
          *(_OWORD *)(n128_u64 + 16) = v49;
        }
        v50 = (void *)a1[29];
        a1[29] = (unint64_t)v41;
        a1[30] = n128_u64;
        a1[31] = (unint64_t)v29[2 * v28].n128_u64;
        if (v50)
          operator delete(v50);
        goto LABEL_47;
      }
      v30 = (uint64_t)(v20 - v23) >> 5;
      if (v30 >= v19)
        break;
      v31 = (__n128 *)((char *)__p + 32 * v30);
      v32 = a1[30];
      if (v31 != (__n128 *)v75)
      {
        v33 = v31;
        v34 = (__n128 *)a1[30];
        do
        {
          a6 = *v33;
          v34[1].n128_u64[0] = v33[1].n128_u64[0];
          *v34 = a6;
          a6.n128_u64[0] = v33[1].n128_u64[1];
          v34[1].n128_u64[1] = a6.n128_u64[0];
          v32 += 32;
          v33 += 2;
          v34 += 2;
        }
        while (v33 != v17);
      }
      a1[30] = v32;
      if ((uint64_t)(v20 - v23) >= 1)
        goto LABEL_28;
LABEL_47:
      v52 = (__n128 *)a1[29];
      v51 = (__n128 *)a1[30];
      v53 = &v51[-2 * v19];
      v54 = (char *)v53 - (char *)v52;
      if (v53 != v52)
      {
        v55 = v54 >> 5;
        if (v19 >= v54 >> 5)
          v56 = v54 >> 5;
        else
          v56 = v19;
        if (v56 >= 1)
        {
          while (1)
          {
            v57 = (__n128 *)operator new(32 * v56, v16);
            if (v57)
              break;
            v58 = (unint64_t)v56 > 1;
            v56 = (unint64_t)v56 >> 1;
            if (!v58)
              goto LABEL_54;
          }
          v60 = v57;
          sub_20F2CF288(v52, &v51[-2 * v19], v51, v55, v19, v57, v56, a6);
          operator delete(v60);
          v59 = (char *)__p;
          if (!__p)
            goto LABEL_9;
LABEL_56:
          v75 = v59;
          operator delete(v59);
          goto LABEL_9;
        }
LABEL_54:
        a6.n128_f64[0] = sub_20F2CF288(v52, &v51[-2 * v19], v51, v55, v19, 0, 0, a6);
      }
      v59 = (char *)__p;
      if (__p)
        goto LABEL_56;
LABEL_9:
      v14 += 2;
      if (v14 == v71)
        goto LABEL_59;
    }
    v31 = (__n128 *)((char *)__p + 32 * v19);
    v32 = a1[30];
LABEL_28:
    v35 = 32 * v19;
    v36 = v32 - 32 * v19;
    for (j = v32; v36 < v20; j += 32)
    {
      a6 = *(__n128 *)v36;
      v38 = *(_OWORD *)(v36 + 16);
      v36 += 32;
      *(__n128 *)j = a6;
      *(_OWORD *)(j + 16) = v38;
    }
    a1[30] = j;
    if (v32 != v23 + v35)
    {
      v39 = (_QWORD *)(v32 - 8);
      v40 = 32 * ((uint64_t)(v32 - (v23 + v35)) >> 5);
      do
      {
        a6 = *(__n128 *)(v23 + v40 - 32);
        *((_DWORD *)v39 - 2) = *(_DWORD *)(v23 + v40 - 16);
        *(__n128 *)(v39 - 3) = a6;
        a6.n128_u64[0] = *(_QWORD *)(v23 + v40 - 8);
        *v39 = a6.n128_u64[0];
        v39 -= 4;
        v40 -= 32;
      }
      while (v40);
    }
    for (; v18 != v31; v23 += 32)
    {
      a6 = *v18;
      *(_DWORD *)(v23 + 16) = v18[1].n128_u32[0];
      *(__n128 *)v23 = a6;
      a6.n128_u64[0] = v18[1].n128_u64[1];
      *(_QWORD *)(v23 + 24) = a6.n128_u64[0];
      v18 += 2;
    }
    goto LABEL_47;
  }
LABEL_59:
  *(_QWORD *)v70 = 0;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  if ((uint64_t)(a1[30] - a1[29]) >> 5 >= a1[2])
    v61 = a1[2];
  else
    v61 = (uint64_t)(a1[30] - a1[29]) >> 5;
  if (v61)
  {
    sub_20F27C7D8((char **)v70, v61);
    v62 = a1[29];
    v63 = *(char **)v70;
    v64 = 32 * v61;
    do
    {
      v65 = *(_OWORD *)v62;
      *((_DWORD *)v63 + 4) = *(_DWORD *)(v62 + 16);
      *(_OWORD *)v63 = v65;
      v63 += 24;
      v62 += 32;
      v64 -= 32;
    }
    while (v64);
    v66 = *(char **)v70;
    v67 = *(__int128 **)(v70 + 8);
  }
  else
  {
    v67 = 0;
    v66 = 0;
  }
  v68 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v67 - v66) >> 3));
  if (v67 == (__int128 *)v66)
    v69 = 0;
  else
    v69 = v68;
  sub_20F2803D4((uint64_t)v66, v67, (uint64_t)&__p, v69, 1);
}

void sub_20F2CF244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void **v15;
  void *v17;

  v17 = *v15;
  if (*v15)
  {
    *(_QWORD *)(a10 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

double sub_20F2CF288(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, uint64_t a7, __n128 a8)
{
  unint64_t v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  __n128 *v20;
  double v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  unint64_t v28;
  unint64_t v29;
  __n128 *v30;
  double v31;
  __n128 *v32;
  __n128 *v33;
  __n128 v34;
  _BOOL4 v35;
  __n128 v36;
  uint64_t v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  uint64_t v42;
  __n128 *v43;
  __n128 v44;
  __n128 *v45;
  unint64_t *v46;
  double v47;
  double v48;
  __n128 *v49;
  uint64_t v50;
  __n128 *v51;
  __n128 v52;
  __n128 *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  __n128 *v57;
  uint64_t v58;
  __n128 *v59;
  uint64_t v60;
  __n128 *v61;
  __n128 *v62;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;

  if (!a5)
    return a8.n128_f64[0];
  while (a4 > a7 && a5 > a7)
  {
    v11 = 0;
    a8.n128_u64[0] = a2[1].n128_u64[1];
    v12 = -a4;
    while (1)
    {
      v13 = &a1[v11 / 0x10];
      if (a8.n128_f64[0] < a1[v11 / 0x10 + 1].n128_f64[1])
        break;
      --a4;
      v11 += 32;
      if (__CFADD__(v12++, 1))
        return a8.n128_f64[0];
    }
    if (-v12 >= a5)
    {
      if (v12 == -1)
      {
        v57 = &a1[v11 / 0x10];
        v71 = v57[1].n128_u64[0];
        v67 = *v57;
        a8 = *a2;
        v57[1].n128_u32[0] = a2[1].n128_u32[0];
        *v57 = a8;
        *a2 = v67;
        a2[1].n128_u32[0] = v71;
        a8.n128_u64[0] = v57[1].n128_u64[1];
        v57[1].n128_u64[1] = a2[1].n128_u64[1];
        a2[1].n128_u64[1] = a8.n128_u64[0];
        return a8.n128_f64[0];
      }
      v17 = &a1[2 * ((unint64_t)a4 >> 1) + v11 / 0x10];
      v16 = a2;
      if (a2 != a3)
      {
        v28 = ((char *)a3 - (char *)a2) >> 5;
        v16 = a2;
        do
        {
          v29 = v28 >> 1;
          v30 = &v16[2 * (v28 >> 1)];
          v31 = v30[1].n128_f64[1];
          v32 = v30 + 2;
          v28 += ~(v28 >> 1);
          if (v31 < v17[1].n128_f64[1])
            v16 = v32;
          else
            v28 = v29;
        }
        while (v28);
      }
      v23 = (unint64_t)-v12 >> 1;
      v15 = ((char *)v16 - (char *)a2) >> 5;
      if (v17 != a2)
      {
LABEL_17:
        if (v16 == a2)
        {
          v24 = v17;
        }
        else
        {
          v24 = v17 + 2;
          v25 = v17 + 2;
          v26 = a2;
          while (1)
          {
            v68 = v25[-1].n128_u64[0];
            v64 = v25[-2];
            v27 = *v26;
            v25[-1].n128_u32[0] = v26[1].n128_u32[0];
            v25[-2] = v27;
            *v26 = v64;
            v26[1].n128_u32[0] = v68;
            v27.n128_u64[0] = v25[-1].n128_u64[1];
            v25[-1].n128_u64[1] = v26[1].n128_u64[1];
            v26[1].n128_u64[1] = v27.n128_u64[0];
            v26 += 2;
            if (v26 == v16)
              break;
            if (v25 == a2)
              a2 = v26;
            v25 += 2;
            v24 += 2;
          }
          if (v25 != a2)
          {
            v33 = a2;
            while (1)
            {
              v69 = v25[1].n128_u64[0];
              v65 = *v25;
              v34 = *v33;
              v25[1].n128_u32[0] = v33[1].n128_u32[0];
              *v25 = v34;
              v33[1].n128_u32[0] = v69;
              *v33 = v65;
              v34.n128_u64[0] = v25[1].n128_u64[1];
              v25[1].n128_u64[1] = v33[1].n128_u64[1];
              v33[1].n128_u64[1] = v34.n128_u64[0];
              v25 += 2;
              v33 += 2;
              v35 = v25 == a2;
              if (v33 == v16)
              {
                if (v25 == a2)
                  goto LABEL_43;
                v33 = a2 + 2;
                while (1)
                {
                  v70 = v25[1].n128_u64[0];
                  v66 = *v25;
                  v36 = *a2;
                  v25[1].n128_u32[0] = a2[1].n128_u32[0];
                  *v25 = v36;
                  a2[1].n128_u32[0] = v70;
                  *a2 = v66;
                  v36.n128_u64[0] = v25[1].n128_u64[1];
                  v25[1].n128_u64[1] = a2[1].n128_u64[1];
                  a2[1].n128_u64[1] = v36.n128_u64[0];
                  v25 += 2;
                  v35 = v25 == a2;
                  if (v33 != v16)
                    break;
                  if (v25 == a2)
                    goto LABEL_43;
                }
              }
              if (v35)
                a2 = v33;
            }
          }
        }
        goto LABEL_43;
      }
    }
    else
    {
      v15 = (unint64_t)a5 >> 1;
      v16 = &a2[2 * ((unint64_t)a5 >> 1)];
      v17 = a2;
      if ((char *)a2 - (char *)a1 != v11)
      {
        v18 = (uint64_t)((char *)a2 - (char *)a1 - v11) >> 5;
        v17 = &a1[v11 / 0x10];
        do
        {
          v19 = v18 >> 1;
          v20 = &v17[2 * (v18 >> 1)];
          v21 = v20[1].n128_f64[1];
          v22 = v20 + 2;
          v18 += ~(v18 >> 1);
          if (v21 > v16[1].n128_f64[1])
            v18 = v19;
          else
            v17 = v22;
        }
        while (v18);
      }
      v23 = (uint64_t)((char *)v17 - (char *)a1 - v11) >> 5;
      if (v17 != a2)
        goto LABEL_17;
    }
    v24 = v16;
LABEL_43:
    a4 = -(uint64_t)(v23 + v12);
    v37 = a5 - v15;
    if ((uint64_t)(v23 + v15) >= (uint64_t)(a5 - (v23 + v15) - v12))
    {
      v40 = a3;
      v41 = a6;
      sub_20F2CF288(v24, v16, v40, a4, a5 - v15, a6, a7);
      a6 = v41;
      a2 = v17;
      a4 = v23;
      a3 = v24;
      a5 = v15;
      a1 = v13;
      if (!v15)
        return a8.n128_f64[0];
    }
    else
    {
      v38 = v17;
      v39 = a6;
      sub_20F2CF288(&a1[v11 / 0x10], v38, v24, v23, v15, a6, a7);
      a6 = v39;
      a2 = v16;
      a5 = v37;
      a1 = v24;
      if (!v37)
        return a8.n128_f64[0];
    }
  }
  if (a4 <= a5)
  {
    if (a1 != a2)
    {
      v50 = 0;
      do
      {
        v51 = &a6[v50];
        a8 = a1[v50];
        v52 = a1[v50 + 1];
        *v51 = a8;
        v51[1] = v52;
        v50 += 2;
      }
      while (&a1[v50] != a2);
      if (v50 * 16)
      {
        v53 = &a6[v50];
        v54 = (uint64_t)&a6[v50 - 2];
        while (a2 != a3)
        {
          v55 = &a2[1].n128_u64[1];
          v56 = &a6[1].n128_u64[1];
          if (a2[1].n128_f64[1] >= a6[1].n128_f64[1])
          {
            a8 = *a6;
            a1[1].n128_u32[0] = a6[1].n128_u32[0];
            *a1 = a8;
            a6 += 2;
            a8.n128_u64[0] = *v56;
            a1[1].n128_u64[1] = *v56;
            a1 += 2;
            if (v53 == a6)
              return a8.n128_f64[0];
          }
          else
          {
            a8 = *a2;
            a1[1].n128_u32[0] = a2[1].n128_u32[0];
            *a1 = a8;
            a2 += 2;
            a8.n128_u64[0] = *v55;
            a1[1].n128_u64[1] = *v55;
            a1 += 2;
            if (v53 == a6)
              return a8.n128_f64[0];
          }
        }
        v60 = 0;
        do
        {
          v61 = &a1[v60];
          v62 = &a6[v60];
          a8 = a6[v60];
          v61[1].n128_u32[0] = a6[v60 + 1].n128_u32[0];
          *v61 = a8;
          a8.n128_u64[0] = a6[v60 + 1].n128_u64[1];
          v61[1].n128_u64[1] = a8.n128_u64[0];
          v60 += 2;
        }
        while ((__n128 *)v54 != v62);
      }
    }
  }
  else if (a3 != a2)
  {
    v42 = 0;
    do
    {
      v43 = &a6[v42];
      a8 = a2[v42];
      v44 = a2[v42 + 1];
      *v43 = a8;
      v43[1] = v44;
      v42 += 2;
    }
    while (&a2[v42] != a3);
    if (v42 * 16)
    {
      v45 = &a6[v42];
      while (a2 != a1)
      {
        v46 = &a2[-1].n128_u64[1];
        v47 = a2[-1].n128_f64[1];
        v48 = v45[-1].n128_f64[1];
        if (v48 < v47)
          v49 = a2 - 2;
        else
          v49 = v45 - 2;
        if (v48 < v47)
          a2 -= 2;
        else
          v46 = &v45[-1].n128_u64[1];
        if (v48 >= v47)
          v45 -= 2;
        a8 = *v49;
        a3[-1].n128_u32[0] = v49[1].n128_u32[0];
        a3[-2] = a8;
        a8.n128_u64[0] = *v46;
        a3[-1].n128_u64[1] = *v46;
        a3 -= 2;
        if (v45 == a6)
          return a8.n128_f64[0];
      }
      v58 = 0;
      do
      {
        v59 = &a3[v58];
        a8 = v45[v58 - 2];
        v59[-1].n128_u32[0] = v45[v58 - 1].n128_u32[0];
        v59[-2] = a8;
        a8.n128_u64[0] = v45[v58 - 1].n128_u64[1];
        v59[-1].n128_u64[1] = a8.n128_u64[0];
        v58 -= 2;
      }
      while (&v45[v58] != a6);
    }
  }
  return a8.n128_f64[0];
}

uint64_t *sub_20F2CF7EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  __int128 v21;

  __p = operator new(0x20uLL);
  v21 = xmmword_2102DB470;
  strcpy((char *)__p, "MapTrackingConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 82));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.retrack_inliers_only", v4, "Only retrack inlier map points");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.epipolar_sigma_scale", v5, "epipolar_sigma_scale");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 85));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.use_reprojection_map_tracking", v6, "Do map-tracking using 3D points reprojection on current frame");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 86));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.use_backend_tracks", v7, "Use track created from backend for map tracking");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 87));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.use_backend_tracks_for_epipolar_tracking", v8, "Use track created from backend for epipolar map tracking");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DCF0((unsigned int *)(a1 + 92));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.max_hamming_distance", v9, "Maximum Hamming distance to accept a match for a reprojected 3D point");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.inlier_3d_to_2d_max_reprojection_error_deg", v10, "Maximum reprojection error in degree to accept reprojected 3D-2D match as inlier.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.matching_search_circle_radius_deg", v11, "Radius of matching search circle upon reprojection (in degree)");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.maximum_distance_for_submap_tracking_stats_m", v12, "Maximum distance allowed for points to be accounted in submap tracking stats.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 208));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.only_build_map_with_main_camera", v13, "Boolean flag indicating whether only the main camera should be used for map creation.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.use_fast_lsh_rematching", v14, "Whether to use locally sensitive hashing matcher for rematching.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.valid_structure_covariance_only_for_kf_quality", v15, "Use only valid structure covariance for keyframe quality.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.num_nearest_keyframes_from_all_submaps", v16, "num_nearest_keyframes_from_all_submaps.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA14D8((_BYTE *)(a1 + 216));
  sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.perform_epipolar_based_match_verification", v17, "Whether to perform epipolar verfication on the 2D-2D matches.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EA9DCF0((unsigned int *)(a1 + 220));
  return sub_20E8B2F9C((uint64_t *)&__p, "MapTrackingConfig.min_num_3d_points_to_track_keyframe", v18, "Required number of 3d points in a map keyframe to attempt to track against it.");
}

void sub_20F2CFB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20F2CFBE8(uint64_t a1, int8x8_t **a2, int a3, int a4, char a5, int a6, double a7)
{
  int8x8_t **v8;
  int8x8_t *v9;
  int8x8_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  int8x8_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  int8x8_t **v28;
  unint64_t v29;
  int8x8_t *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  char *v44;
  _DWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  int8x8_t *v58;
  int8x8_t *v59;
  int8x8_t *v60;
  int8x8_t *v61;
  int v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  unsigned int v73;
  _DWORD *v74;
  uint64_t *v75;
  int8x8_t *v76;
  int8x8_t *v77;
  unsigned __int8 v78;
  const char *v79;
  size_t v80;
  _BYTE *v81;
  std::__shared_weak_count *v82;
  const char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  size_t v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  const char *v131;
  unsigned __int8 v132;
  const char *v133;
  size_t v134;
  _BYTE *v135;
  std::__shared_weak_count *v136;
  const char *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  size_t v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::chrono::steady_clock::time_point v180;
  int8x8_t *v181;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v182;
  double v183;
  double v184;
  double v185;
  double v186;
  __int128 v187;
  uint64_t *v188;
  float64x2_t **v190;
  unint64_t v191;
  float64x2_t v192;
  float64x2_t v194;
  double v195;
  float64x2_t v196;
  float64x2_t *v197;
  double v198;
  double v200;
  double v202;
  float64x2_t v204;
  double v208;
  float64x2_t v209;
  double v211;
  float64x2_t v212;
  double v214;
  float64x2_t *v215;
  float64x2_t v217;
  float64x2_t *v218;
  float64x2_t v219;
  float64x2_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t *v223;
  uint64_t **v224;
  uint64_t **v225;
  unsigned int v226;
  _DWORD *v227;
  uint64_t *v228;
  std::chrono::steady_clock::time_point v229;
  _DWORD *v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  uint64_t *v234;
  unsigned int v235;
  uint64_t *v236;
  uint64_t **v237;
  uint64_t *v238;
  int v239;
  uint64_t **v240;
  uint64_t **v241;
  int v242;
  int v243;
  unsigned int v244;
  unint64_t v245;
  unsigned int v246;
  unsigned int v247;
  BOOL v248;
  unint64_t v249;
  unsigned int v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  BOOL v254;
  uint64_t *v255;
  unsigned int v256;
  uint64_t *v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unint64_t v261;
  unsigned int v262;
  unsigned int v263;
  BOOL v264;
  unint64_t v265;
  _QWORD *v266;
  int8x8_t *v267;
  int8x8_t *v268;
  unint64_t v269;
  _DWORD *v270;
  unsigned int v271;
  unint64_t v272;
  unint64_t v273;
  int8x8_t *v274;
  int8x8_t v275;
  unsigned int v276;
  BOOL v277;
  int8x8_t v278;
  std::__shared_weak_count *v279;
  int8x8_t v280;
  unint64_t *v281;
  unint64_t v282;
  int8x8_t v283;
  int v284;
  unsigned int v285;
  unint64_t v286;
  uint8x8_t v287;
  unint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  float64x2_t **v294;
  float64x2_t *v295;
  int8x16_t v296;
  float64x2_t *v297;
  float64x2_t v298;
  float64x2_t *v299;
  std::chrono::steady_clock::time_point v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t *v304;
  unint64_t v305;
  uint64_t *v306;
  unint64_t v307;
  unsigned __int8 v308;
  uint64_t v309;
  uint64_t i;
  unsigned __int8 v311;
  uint64_t **v312;
  uint64_t **v313;
  unint64_t v314;
  _DWORD *v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  _BYTE *v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t *v330;
  uint64_t v331;
  unint64_t v332;
  int8x8_t *v333;
  int8x8_t *v334;
  int8x8_t *v335;
  int8x8_t *v336;
  int8x8_t *v337;
  unint64_t v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  int8x8_t v341;
  unint64_t *v342;
  unint64_t v343;
  unint64_t v344;
  std::chrono::steady_clock::time_point v345;
  uint64_t v346;
  _QWORD *v347;
  double v348;
  unint64_t v349;
  __n128 v350;
  __n128 v351;
  __n128 v352;
  __n128 v353;
  __n128 v354;
  __n128 v355;
  __n128 v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t *v360;
  uint64_t v361;
  unsigned int v362;
  double v363;
  double v364;
  double v368;
  float64x2_t v369;
  double v370;
  float64x2_t v371;
  int64x2_t v373;
  float64x2_t v374;
  int64x2_t v375;
  double v376;
  unint64_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  int8x16_t v383;
  uint64_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v396;
  int8x16_t v397;
  float64x2_t v398;
  int8x16_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  int8x16_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  unint64_t v422;
  unint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  double v428;
  double v429;
  double v431;
  double v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  double v437;
  unint64_t *v438;
  unsigned int v439;
  unint64_t v440;
  double v441;
  uint64_t v442;
  uint64_t v443;
  __int128 *v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  char *v451;
  unint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _BOOL8 v460;
  unsigned int **v461;
  float v462;
  uint64_t *v463;
  uint64_t *v464;
  std::chrono::steady_clock::time_point v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t v468;
  uint64_t v469;
  int8x8_t *v470;
  int8x8_t *v471;
  int8x8_t *v472;
  int8x8_t *v473;
  int v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v478;
  uint64_t v479;
  size_t v480;
  const char *v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t **v484;
  uint64_t **v485;
  unsigned int v486;
  _DWORD *v487;
  uint64_t *v488;
  int8x8_t *v489;
  int8x8_t *v490;
  unsigned __int8 v491;
  const char *v492;
  size_t v493;
  _BYTE *v494;
  uint64_t v495;
  uint64_t v496;
  _BYTE *v497;
  uint64_t v498;
  uint64_t v499;
  NSObject *v500;
  size_t v501;
  std::__shared_weak_count_vtbl *v502;
  std::__shared_weak_count *v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  void *v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  void *v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  void *v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  int v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  size_t v541;
  const char *v542;
  unsigned __int8 v543;
  const char *v544;
  size_t v545;
  _BYTE *v546;
  uint64_t v547;
  uint64_t v548;
  _BYTE *v549;
  uint64_t v550;
  uint64_t v551;
  NSObject *v552;
  size_t v553;
  std::__shared_weak_count_vtbl *v554;
  std::__shared_weak_count *v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t v559;
  uint64_t v560;
  char *v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  void *v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  void *v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  int v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v592;
  uint64_t v593;
  size_t v594;
  const char *v595;
  unsigned __int8 v596;
  const char *v597;
  size_t v598;
  _BYTE *v599;
  uint64_t v600;
  uint64_t v601;
  _BYTE *v602;
  uint64_t v603;
  uint64_t v604;
  NSObject *v605;
  size_t v606;
  std::__shared_weak_count_vtbl *v607;
  std::__shared_weak_count *v608;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t **v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  void *v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  void *v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  int v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  size_t v646;
  const char *v647;
  unsigned __int8 v648;
  const char *v649;
  size_t v650;
  _BYTE *v651;
  uint64_t v652;
  uint64_t v653;
  _BYTE *v654;
  uint64_t v655;
  uint64_t v656;
  NSObject *v657;
  size_t v658;
  std::__shared_weak_count_vtbl *v659;
  std::__shared_weak_count *v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t **v669;
  std::__shared_weak_count *v670;
  unint64_t *v671;
  unint64_t v672;
  std::__shared_weak_count *v673;
  unint64_t *v674;
  unint64_t v675;
  void *v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  void *v689;
  std::__shared_weak_count *v690;
  unint64_t *v691;
  unint64_t v692;
  int v693;
  unint64_t v694;
  unint64_t v695;
  uint64_t v697;
  uint64_t v698;
  size_t v699;
  const char *v700;
  unsigned __int8 v701;
  const char *v702;
  size_t v703;
  _BYTE *v704;
  uint64_t v705;
  uint64_t v706;
  _BYTE *v707;
  uint64_t v708;
  uint64_t v709;
  NSObject *v710;
  size_t v711;
  std::__shared_weak_count_vtbl *v712;
  std::__shared_weak_count *v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  unint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t **v723;
  std::__shared_weak_count *v724;
  unint64_t *v725;
  unint64_t v726;
  std::__shared_weak_count *v727;
  unint64_t *v728;
  unint64_t v729;
  void *v730;
  std::__shared_weak_count *v731;
  unint64_t *v732;
  unint64_t v733;
  std::__shared_weak_count *v734;
  unint64_t *v735;
  unint64_t v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  unint64_t v739;
  std::__shared_weak_count *v740;
  unint64_t *v741;
  unint64_t v742;
  void *v743;
  std::__shared_weak_count *v744;
  unint64_t *v745;
  unint64_t v746;
  int v747;
  unint64_t v748;
  unint64_t v749;
  uint64_t v751;
  uint64_t v752;
  size_t v753;
  const char *v754;
  unsigned __int8 v755;
  const char *v756;
  size_t v757;
  _BYTE *v758;
  uint64_t v759;
  uint64_t v760;
  _BYTE *v761;
  uint64_t v762;
  uint64_t v763;
  NSObject *v764;
  size_t v765;
  std::__shared_weak_count_vtbl *v766;
  std::__shared_weak_count *v767;
  std::__shared_weak_count *v768;
  unint64_t *v769;
  unint64_t v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t **v777;
  std::__shared_weak_count *v778;
  unint64_t *v779;
  unint64_t v780;
  std::__shared_weak_count *v781;
  unint64_t *v782;
  unint64_t v783;
  void *v784;
  std::__shared_weak_count *v785;
  unint64_t *v786;
  unint64_t v787;
  std::__shared_weak_count *v788;
  unint64_t *v789;
  unint64_t v790;
  std::__shared_weak_count *v791;
  unint64_t *v792;
  unint64_t v793;
  std::__shared_weak_count *v794;
  unint64_t *v795;
  unint64_t v796;
  void *v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  unint64_t v800;
  _BYTE *v801;
  double v802;
  int8x8_t *v804;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v807;
  std::__shared_weak_count *v808;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v809;
  uint64_t v810;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v812;
  double v813;
  double v814;
  double v815;
  double v816;
  double v817;
  double v818;
  double v819;
  double v820;
  double v821;
  double v822;
  double v823;
  double v824;
  _DWORD *v825;
  float64x2_t v826;
  int8x16_t v827;
  int8x16_t v828;
  float64x2_t v829;
  double v830;
  int8x16_t v831;
  int8x8_t **v832;
  unint64_t v833;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  int8x8_t *v838;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v839;
  _DWORD *v840;
  double v841;
  char *v842;
  int8x8_t *v843;
  uint64_t v844;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  double v850;
  float64x2_t v851;
  double v852;
  float64x2_t v853;
  double v854;
  double v855;
  double v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  double v860;
  float64x2_t v861;
  int v862;
  float64x2_t v863;
  double v864;
  int v865;
  unint64_t *v866;
  unint64_t *v867;
  char *v868;
  char *v869;
  uint64_t *v870;
  std::__shared_weak_count *v871;
  void *v872;
  _BYTE *v873;
  __int128 v874;
  uint64_t v875;
  uint64_t **v876;
  uint64_t *v877;
  uint64_t v878;
  uint64_t **v879;
  uint64_t *v880;
  uint64_t v881;
  void *v882;
  char *v883;
  char *v884;
  uint64_t **v885;
  uint64_t *v886;
  uint64_t v887;
  void *v888;
  void *v889;
  uint64_t v890;
  void *v891;
  _BYTE *v892;
  uint64_t v893;
  _QWORD v894[3];
  _QWORD *v895;
  char v896;
  _BYTE __p[96];
  __int128 v898;
  _BYTE *rep;
  __int128 *v900;
  const char *v901;
  int v902;
  const char *v903;
  uint64_t v904;
  std::__shared_weak_count *v905;
  uint64_t **v906;
  uint64_t *v907;
  uint64_t v908;
  __int128 *v909;
  uint64_t v910;

  v910 = *MEMORY[0x24BDAC8D0];
  if (a2[5] == a2[6])
    return;
  v8 = a2;
  v887 = 0;
  v886 = 0;
  v885 = &v886;
  v9 = *a2;
  v10 = (int8x8_t *)(*a2)[6];
  v11 = (uint64_t)&(*a2)[7];
  if (v10 != (int8x8_t *)v11)
  {
    while (1)
    {
      v12 = v886;
      v13 = (unint64_t)v10[4];
      v14 = &v886;
      if (v886)
      {
        v15 = &v886;
        do
        {
          v16 = v12;
          v17 = v15;
          v18 = v12[4];
          if (v18 >= v13)
            v15 = (uint64_t **)v12;
          else
            ++v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
        v14 = &v886;
        if (v15 != &v886)
        {
          if (v18 < v13)
            v16 = (uint64_t *)v17;
          v14 = v15;
          if (v16[4] == v13)
            goto LABEL_16;
        }
      }
      v19 = (uint64_t)v8[1];
      *(int8x8_t *)__p = v10[4];
      *(_DWORD *)&__p[8] = 0;
      v20 = sub_20F25BF64(v19, (unint64_t *)__p);
      v22 = v21;
      v23 = (uint64_t **)sub_20F2DF98C(&v885, v14, &v898, &v906, *(_QWORD *)&v10[4]);
      if (*v23)
      {
LABEL_16:
        v24 = (int8x8_t *)v10[1];
        if (v24)
          goto LABEL_21;
      }
      else
      {
        v25 = v23;
        v26 = (uint64_t *)operator new(0x38uLL);
        v26[4] = (uint64_t)v10[4];
        v26[5] = v20;
        v26[6] = v22;
        v27 = v898;
        *v26 = 0;
        v26[1] = 0;
        v26[2] = v27;
        *v25 = v26;
        if (*v885)
        {
          v885 = (uint64_t **)*v885;
          v26 = *v25;
        }
        sub_20E868578(v886, v26);
        ++v887;
        v24 = (int8x8_t *)v10[1];
        if (v24)
        {
          do
          {
LABEL_21:
            v28 = (int8x8_t **)v24;
            v24 = (int8x8_t *)*v24;
          }
          while (v24);
          goto LABEL_4;
        }
      }
      do
      {
        v28 = (int8x8_t **)v10[2];
        _ZF = *v28 == v10;
        v10 = (int8x8_t *)v28;
      }
      while (!_ZF);
LABEL_4:
      v10 = (int8x8_t *)v28;
      if (v28 == (int8x8_t **)v11)
      {
        v9 = *v8;
        v10 = (int8x8_t *)(*v8)[6];
        break;
      }
    }
  }
  v883 = 0;
  v882 = 0;
  v884 = 0;
  v29 = (unint64_t)&v9[7];
  v832 = v8;
  if (v10 != &v9[7])
  {
    do
    {
      v30 = v10 + 4;
      v898 = *(_OWORD *)v10[4].i8;
      sub_20F23A0A0(*v8, &v898, (char **)__p);
      v32 = (char *)v8[5];
      v31 = (char *)v8[6];
      if (v31 != v32)
      {
        v33 = (v31 - v32) >> 4;
        v34 = *(_DWORD *)(*(_QWORD *)__p + 16);
        v35 = **(_QWORD **)__p;
        while (1)
        {
          v36 = v33 >> 1;
          v37 = &v32[16 * (v33 >> 1)];
          v38 = *(_QWORD *)v37;
          v39 = *(_DWORD *)(*(_QWORD *)v37 + 16);
          _CF = v39 >= v34;
          if (v39 != v34)
            goto LABEL_38;
          if (*(_QWORD *)v38 >= v35)
            break;
LABEL_32:
          v32 = v37 + 16;
          v36 = v33 + ~v36;
LABEL_33:
          v33 = v36;
          if (!v36)
            goto LABEL_41;
        }
        if (*(_QWORD *)v38 != v35)
          goto LABEL_33;
        _CF = *(_DWORD *)(v38 + 8) >= *(_DWORD *)(*(_QWORD *)__p + 8);
LABEL_38:
        if (_CF)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_41:
      if (v32 == v31)
      {
        v42 = *(unsigned __int8 *)(*(_QWORD *)v31 + 736);
        if (!*(_QWORD *)__p)
          goto LABEL_49;
      }
      else
      {
        v41 = *(_QWORD *)v32;
        if (*(_DWORD *)(*(_QWORD *)v32 + 16) == *(_DWORD *)(*(_QWORD *)__p + 16)
          && *(_QWORD *)v41 == **(_QWORD **)__p
          && *(_DWORD *)(v41 + 8) == *(_DWORD *)(*(_QWORD *)__p + 8))
        {
          v31 = v32;
        }
        v42 = *(unsigned __int8 *)(*(_QWORD *)v31 + 736);
      }
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
LABEL_49:
      if (v42)
      {
        v43 = v883;
        if (v883 < v884)
        {
          *(_OWORD *)v883 = *(_OWORD *)v30->i8;
          v44 = (char *)(v43 + 4);
LABEL_65:
          v883 = v44;
          goto LABEL_66;
        }
        v45 = v882;
        v46 = (v883 - (_BYTE *)v882) >> 4;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60)
          sub_20E867F44();
        v48 = v884 - (_BYTE *)v882;
        if ((v884 - (_BYTE *)v882) >> 3 > v47)
          v47 = v48 >> 3;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 60)
            sub_20E877A38();
          v50 = (char *)operator new(16 * v49);
          v51 = &v50[16 * v46];
          *(_OWORD *)v51 = *(_OWORD *)v30->i8;
          v52 = v51;
          if (v43 != v45)
            goto LABEL_61;
LABEL_73:
          v8 = v832;
          v44 = v51 + 16;
          v882 = v52;
          v883 = v51 + 16;
          v884 = &v50[16 * v49];
          if (!v43)
            goto LABEL_65;
        }
        else
        {
          v50 = 0;
          v51 = (char *)(16 * v46);
          *(_OWORD *)(16 * v46) = *(_OWORD *)v30->i8;
          v52 = (char *)(16 * v46);
          if (v43 == v45)
            goto LABEL_73;
LABEL_61:
          v8 = v832;
          do
          {
            v53 = *((_QWORD *)v43 - 2);
            v43 -= 4;
            v54 = v43[2];
            *((_QWORD *)v52 - 2) = v53;
            v52 -= 16;
            *((_DWORD *)v52 + 2) = v54;
          }
          while (v43 != v45);
          v43 = v882;
          v44 = v51 + 16;
          v882 = v52;
          v883 = v51 + 16;
          v884 = &v50[16 * v49];
          if (!v43)
            goto LABEL_65;
        }
        operator delete(v43);
        goto LABEL_65;
      }
LABEL_66:
      v55 = (std::__shared_weak_count *)v10[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (std::__shared_weak_count *)v55->__vftable;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (std::__shared_weak_count *)v10[2];
          _ZF = v56->__vftable == (std::__shared_weak_count_vtbl *)v10;
          v10 = (int8x8_t *)v56;
        }
        while (!_ZF);
      }
      v10 = (int8x8_t *)v56;
    }
    while (v56 != (std::__shared_weak_count *)v29);
  }
  v881 = 0;
  v880 = 0;
  v879 = &v880;
  v57 = (unint64_t *)a1;
  if ((a5 & 1) != 0)
  {
    v29 = (unint64_t)&v907;
    v907 = 0;
    v908 = 0;
    v906 = &v907;
    v58 = v8[1];
    v61 = (int8x8_t *)*v58;
    v59 = v58 + 1;
    v60 = v61;
    if (v61 == v59)
    {
LABEL_77:
      sub_20F2D5664(&v876);
      if (*(int *)v876[7] > 3)
        goto LABEL_188;
      v62 = *((unsigned __int8 *)v876 + 72);
      v63 = sub_20E8C31DC((uint64_t)v876, "OSLogSurrogateAppender", 1, 0);
      v29 = v63;
      _ZF = !v62 && v63 == 0;
      if (_ZF)
        goto LABEL_188;
      *(_QWORD *)&v898 = &v876;
      *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
      rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v900) = 3;
      v901 = "unknown file";
      v902 = 97;
      v905 = 0;
      v903 = "unknown function";
      v904 = 0;
      v65 = *(_QWORD *)v898;
      v66 = *(_QWORD *)v898 + 16;
      if (*(char *)(*(_QWORD *)v898 + 39) < 0)
      {
        v68 = *(const char **)(v65 + 16);
        v67 = *(_QWORD *)(v65 + 24);
      }
      else
      {
        v67 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
        v68 = (const char *)(*(_QWORD *)v898 + 16);
      }
      v78 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if (__p[24] && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v79 = byte_254A4A4F8;
      else
        v79 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v80 = byte_254A4A4F8[23];
      else
        v80 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)__p = os_log_create(v79, v68);
      v81 = &__p[8];
      if (v80 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v80 >= 0x17)
      {
        v82 = (std::__shared_weak_count *)v29;
        v83 = v68;
        v84 = v65;
        v85 = v62;
        v86 = v66;
        v87 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v80 | 7) != 0x17)
          v87 = v80 | 7;
        v88 = v87 + 1;
        v81 = operator new(v87 + 1);
        *(_QWORD *)&__p[24] = v88 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v81;
        *(_QWORD *)&__p[16] = v80;
        v66 = v86;
        v62 = v85;
        v65 = v84;
        v68 = v83;
        v29 = (unint64_t)v82;
      }
      else
      {
        __p[31] = v80;
        if (!v80)
        {
LABEL_118:
          v81[v80] = 0;
          __p[32] = 1;
          v89 = &__p[40];
          if (v67 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v67 >= 0x17)
          {
            v90 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v67 | 7) != 0x17)
              v90 = v67 | 7;
            v91 = v90 + 1;
            v89 = operator new(v90 + 1);
            *(_QWORD *)&__p[56] = v91 | 0x8000000000000000;
            *(_QWORD *)&__p[40] = v89;
            *(_QWORD *)&__p[48] = v67;
            v57 = (unint64_t *)a1;
          }
          else
          {
            __p[63] = v67;
            v57 = (unint64_t *)a1;
            if (!v67)
              goto LABEL_126;
          }
          memmove(v89, v68, v67);
LABEL_126:
          v89[v67] = 0;
          __p[64] = 1;
          v92 = *(NSObject **)__p;
          if ((__p[63] & 0x80000000) != 0)
            operator delete(*(void **)&__p[40]);
          if (__p[32] && (__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v29 && *(_QWORD *)(v29 + 24))
          {
            v93 = _os_log_pack_size();
            v94 = (std::__shared_weak_count_vtbl *)operator new(v93, (std::align_val_t)8uLL);
            v95 = (std::__shared_weak_count *)operator new();
            v96 = v95;
            v95->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v95->__shared_owners_;
            v95->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v95->__shared_weak_owners_ = 0;
            v95[1].__vftable = v94;
            *(_QWORD *)__p = v94;
            *(_QWORD *)&__p[8] = v94;
            *(_QWORD *)&__p[16] = v95;
            do
              v98 = __ldxr(p_shared_owners);
            while (__stxr(v98 + 1, p_shared_owners));
            memset(&__p[24], 0, 24);
            do
              v99 = __ldaxr(p_shared_owners);
            while (__stlxr(v99 - 1, p_shared_owners));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v96);
            }
            v100 = *(_QWORD *)__p;
            *(_WORD *)_os_log_pack_fill() = 0;
            v101 = (char *)operator new();
            v102 = *(unsigned __int8 *)(v65 + 39);
            if ((v102 & 0x80u) == 0)
              v103 = v66;
            else
              v103 = *(_QWORD *)(v65 + 16);
            if ((v102 & 0x80u) != 0)
              v102 = *(_QWORD *)(v65 + 24);
            *(_QWORD *)v101 = v100;
            *(_OWORD *)(v101 + 8) = *(_OWORD *)&__p[8];
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            *(_OWORD *)(v101 + 24) = *(_OWORD *)&__p[24];
            *(_QWORD *)&__p[24] = 0;
            *(_QWORD *)&__p[32] = 0;
            *((_QWORD *)v101 + 5) = v103;
            *((_QWORD *)v101 + 6) = v102;
            v101[56] = 1;
            v888 = 0;
            v891 = v101;
            (*(void (**)(std::__shared_weak_count_vtbl *, void **))(**(_QWORD **)(v29 + 24) + 40))(*(std::__shared_weak_count_vtbl **)(v29 + 24), &v891);
            v104 = v891;
            v891 = 0;
            v8 = v832;
            v57 = (unint64_t *)a1;
            if (v104)
            {
              v105 = (std::__shared_weak_count *)*((_QWORD *)v104 + 4);
              if (v105)
              {
                v106 = (unint64_t *)&v105->__shared_owners_;
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 - 1, v106));
                if (!v107)
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                }
              }
              v29 = *((_QWORD *)v104 + 2);
              if (v29)
              {
                v108 = (unint64_t *)(v29 + 8);
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  (*(void (**)(unint64_t))(*(_QWORD *)v29 + 16))(v29);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v29);
                }
              }
              MEMORY[0x212BC6398](v104, 0x10F0C40B62ED6C6);
              v110 = v888;
              v888 = 0;
              if (v110)
              {
                v111 = (std::__shared_weak_count *)*((_QWORD *)v110 + 4);
                if (v111)
                {
                  v112 = (unint64_t *)&v111->__shared_owners_;
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                }
                v29 = *((_QWORD *)v110 + 2);
                if (v29)
                {
                  v114 = (unint64_t *)(v29 + 8);
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    (*(void (**)(unint64_t))(*(_QWORD *)v29 + 16))(v29);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v29);
                  }
                }
                MEMORY[0x212BC6398](v110, 0x10F0C40B62ED6C6);
              }
            }
            v116 = *(std::__shared_weak_count **)&__p[32];
            if (*(_QWORD *)&__p[32])
            {
              v117 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            v119 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v120 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
          }
          else
          {
            v29 = (v29 != 0) | 2u;
            os_log_type_enabled(v92, OS_LOG_TYPE_INFO);
            *(_WORD *)__p = 0;
            LODWORD(v802) = 2;
            v801 = __p;
            v122 = (void *)_os_log_send_and_compose_impl();
            v8 = v832;
            if (v122)
              free(v122);
          }
          if (v62)
          {
            sub_20E8C003C((uint64_t)&v898, "Track length histogram before rematch");
            sub_20E863570((uint64_t)&v898);
          }
          sub_20E863570((uint64_t)&v898);
          v123 = v905;
          if (v905)
          {
            v124 = (unint64_t *)&v905->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
LABEL_188:
          sub_20F2D5758(&v906);
          sub_20F2D5664(&v876);
          if (*(int *)v876[7] > 3
            || (v126 = *((unsigned __int8 *)v876 + 72),
                v127 = sub_20E8C31DC((uint64_t)v876, "OSLogSurrogateAppender", 1, 0),
                v29 = v127,
                !v126)
            && !v127)
          {
LABEL_279:
            sub_20E9BCAA8(v907);
            goto LABEL_280;
          }
          *(_QWORD *)&v898 = &v876;
          *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
          rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v900) = 3;
          v901 = "unknown file";
          v902 = 99;
          v905 = 0;
          v903 = "unknown function";
          v904 = 0;
          v128 = *(_QWORD *)v898;
          v129 = *(_QWORD *)v898 + 16;
          if (*(char *)(*(_QWORD *)v898 + 39) < 0)
          {
            v131 = *(const char **)(v128 + 16);
            v130 = *(_QWORD *)(v128 + 24);
          }
          else
          {
            v130 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
            v131 = (const char *)(*(_QWORD *)v898 + 16);
          }
          v132 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
            if (__p[24] && (__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v133 = byte_254A4A4F8;
          else
            v133 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v134 = byte_254A4A4F8[23];
          else
            v134 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)__p = os_log_create(v133, v131);
          v135 = &__p[8];
          if (v134 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v134 >= 0x17)
          {
            v136 = (std::__shared_weak_count *)v29;
            v137 = v131;
            v138 = v128;
            v139 = v126;
            v140 = v129;
            v141 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v134 | 7) != 0x17)
              v141 = v134 | 7;
            v142 = v141 + 1;
            v135 = operator new(v141 + 1);
            *(_QWORD *)&__p[24] = v142 | 0x8000000000000000;
            *(_QWORD *)&__p[8] = v135;
            *(_QWORD *)&__p[16] = v134;
            v129 = v140;
            v126 = v139;
            v128 = v138;
            v131 = v137;
            v29 = (unint64_t)v136;
          }
          else
          {
            __p[31] = v134;
            if (!v134)
            {
LABEL_209:
              v135[v134] = 0;
              __p[32] = 1;
              v143 = &__p[40];
              if (v130 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v130 >= 0x17)
              {
                v144 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v130 | 7) != 0x17)
                  v144 = v130 | 7;
                v145 = v144 + 1;
                v143 = operator new(v144 + 1);
                *(_QWORD *)&__p[56] = v145 | 0x8000000000000000;
                *(_QWORD *)&__p[40] = v143;
                *(_QWORD *)&__p[48] = v130;
                v57 = (unint64_t *)a1;
              }
              else
              {
                __p[63] = v130;
                v57 = (unint64_t *)a1;
                if (!v130)
                  goto LABEL_217;
              }
              memmove(v143, v131, v130);
LABEL_217:
              v143[v130] = 0;
              __p[64] = 1;
              v146 = *(NSObject **)__p;
              if ((__p[63] & 0x80000000) != 0)
                operator delete(*(void **)&__p[40]);
              if (__p[32] && (__p[31] & 0x80000000) != 0)
                operator delete(*(void **)&__p[8]);
              if (*(_QWORD *)__p)
                os_release(*(void **)__p);
              if (v29 && *(_QWORD *)(v29 + 24))
              {
                v147 = _os_log_pack_size();
                v148 = (std::__shared_weak_count_vtbl *)operator new(v147, (std::align_val_t)8uLL);
                v149 = (std::__shared_weak_count *)operator new();
                v150 = v149;
                v149->__shared_owners_ = 0;
                v151 = (unint64_t *)&v149->__shared_owners_;
                v149->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v149->__shared_weak_owners_ = 0;
                v149[1].__vftable = v148;
                *(_QWORD *)__p = v148;
                *(_QWORD *)&__p[8] = v148;
                *(_QWORD *)&__p[16] = v149;
                do
                  v152 = __ldxr(v151);
                while (__stxr(v152 + 1, v151));
                memset(&__p[24], 0, 24);
                do
                  v153 = __ldaxr(v151);
                while (__stlxr(v153 - 1, v151));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v150);
                }
                v154 = *(_QWORD *)__p;
                *(_WORD *)_os_log_pack_fill() = 0;
                v155 = (char *)operator new();
                v156 = *(unsigned __int8 *)(v128 + 39);
                if ((v156 & 0x80u) == 0)
                  v157 = v129;
                else
                  v157 = *(_QWORD *)(v128 + 16);
                if ((v156 & 0x80u) != 0)
                  v156 = *(_QWORD *)(v128 + 24);
                *(_QWORD *)v155 = v154;
                *(_OWORD *)(v155 + 8) = *(_OWORD *)&__p[8];
                *(_QWORD *)&__p[8] = 0;
                *(_QWORD *)&__p[16] = 0;
                *(_OWORD *)(v155 + 24) = *(_OWORD *)&__p[24];
                *(_QWORD *)&__p[24] = 0;
                *(_QWORD *)&__p[32] = 0;
                *((_QWORD *)v155 + 5) = v157;
                *((_QWORD *)v155 + 6) = v156;
                v155[56] = 1;
                v888 = 0;
                v891 = v155;
                (*(void (**)(std::__shared_weak_count_vtbl *, void **))(**(_QWORD **)(v29 + 24) + 40))(*(std::__shared_weak_count_vtbl **)(v29 + 24), &v891);
                v158 = v891;
                v891 = 0;
                v8 = v832;
                v57 = (unint64_t *)a1;
                if (v158)
                {
                  v159 = (std::__shared_weak_count *)*((_QWORD *)v158 + 4);
                  if (v159)
                  {
                    v160 = (unint64_t *)&v159->__shared_owners_;
                    do
                      v161 = __ldaxr(v160);
                    while (__stlxr(v161 - 1, v160));
                    if (!v161)
                    {
                      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                      std::__shared_weak_count::__release_weak(v159);
                    }
                  }
                  v29 = *((_QWORD *)v158 + 2);
                  if (v29)
                  {
                    v162 = (unint64_t *)(v29 + 8);
                    do
                      v163 = __ldaxr(v162);
                    while (__stlxr(v163 - 1, v162));
                    if (!v163)
                    {
                      (*(void (**)(unint64_t))(*(_QWORD *)v29 + 16))(v29);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v29);
                    }
                  }
                  MEMORY[0x212BC6398](v158, 0x10F0C40B62ED6C6);
                  v164 = v888;
                  v888 = 0;
                  if (v164)
                  {
                    v165 = (std::__shared_weak_count *)*((_QWORD *)v164 + 4);
                    if (v165)
                    {
                      v166 = (unint64_t *)&v165->__shared_owners_;
                      do
                        v167 = __ldaxr(v166);
                      while (__stlxr(v167 - 1, v166));
                      if (!v167)
                      {
                        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                        std::__shared_weak_count::__release_weak(v165);
                      }
                    }
                    v29 = *((_QWORD *)v164 + 2);
                    if (v29)
                    {
                      v168 = (unint64_t *)(v29 + 8);
                      do
                        v169 = __ldaxr(v168);
                      while (__stlxr(v169 - 1, v168));
                      if (!v169)
                      {
                        (*(void (**)(unint64_t))(*(_QWORD *)v29 + 16))(v29);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v29);
                      }
                    }
                    MEMORY[0x212BC6398](v164, 0x10F0C40B62ED6C6);
                  }
                }
                v170 = *(std::__shared_weak_count **)&__p[32];
                if (*(_QWORD *)&__p[32])
                {
                  v171 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
                v173 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v174 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 - 1, v174));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                  }
                }
              }
              else
              {
                v29 = (v29 != 0) | 2u;
                os_log_type_enabled(v146, OS_LOG_TYPE_INFO);
                *(_WORD *)__p = 0;
                LODWORD(v802) = 2;
                v801 = __p;
                v176 = (void *)_os_log_send_and_compose_impl();
                v8 = v832;
                if (v176)
                  free(v176);
              }
              if (v126)
              {
                sub_20E8C003C((uint64_t)&v898, "");
                sub_20E863570((uint64_t)&v898);
              }
              sub_20E863570((uint64_t)&v898);
              v177 = v905;
              if (v905)
              {
                v178 = (unint64_t *)&v905->__shared_owners_;
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                  std::__shared_weak_count::__release_weak(v177);
                }
              }
              goto LABEL_279;
            }
          }
          memmove(v135, v133, v134);
          goto LABEL_209;
        }
      }
      memmove(v81, v79, v80);
      goto LABEL_118;
    }
    while (1)
    {
      v69 = (*(_QWORD *)(*(_QWORD *)&v60[6] + 544) - *(_QWORD *)(*(_QWORD *)&v60[6] + 536)) >> 5;
      v70 = v907;
      v71 = &v907;
      v72 = &v907;
      if (v907)
      {
        while (1)
        {
          while (1)
          {
            v72 = (uint64_t **)v70;
            v73 = *((_DWORD *)v70 + 8);
            if (v73 <= v69)
              break;
            v70 = *v72;
            v71 = v72;
            if (!*v72)
              goto LABEL_92;
          }
          if (v73 >= v69)
            break;
          v70 = v72[1];
          if (!v70)
          {
            v71 = v72 + 1;
            goto LABEL_92;
          }
        }
        v57 = (unint64_t *)a1;
        v72[5] = (uint64_t *)((char *)v72[5] + 1);
        v76 = (int8x8_t *)v60[1];
        if (v76)
        {
          do
          {
LABEL_97:
            v77 = v76;
            v76 = (int8x8_t *)*v76;
          }
          while (v76);
          goto LABEL_84;
        }
      }
      else
      {
LABEL_92:
        v74 = operator new(0x30uLL);
        v74[8] = v69;
        *((_QWORD *)v74 + 5) = 0;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
        *((_QWORD *)v74 + 2) = v72;
        *v71 = (uint64_t *)v74;
        v75 = (uint64_t *)v74;
        if (*v906)
        {
          v906 = (uint64_t **)*v906;
          v75 = *v71;
        }
        sub_20E868578(v907, v75);
        ++v908;
        v57 = (unint64_t *)a1;
        ++*((_QWORD *)v74 + 5);
        v76 = (int8x8_t *)v60[1];
        if (v76)
          goto LABEL_97;
      }
      do
      {
        v77 = (int8x8_t *)v60[2];
        _ZF = *v77 == (_QWORD)v60;
        v60 = v77;
      }
      while (!_ZF);
LABEL_84:
      v60 = v77;
      if (v77 == v59)
        goto LABEL_77;
    }
  }
LABEL_280:
  v180.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v878 = 0;
  v877 = 0;
  v876 = &v877;
  v181 = v8[5];
  v804 = v8[6];
  if (v181 != v804)
  {
    v182 = v180.__d_.__rep_;
    v810 = 0;
    v836 = 0;
    v837 = 0;
    v835 = 0;
    v183 = 0.0;
    v184 = 0.0;
    v185 = 0.0;
    v186 = 0.0;
LABEL_283:
    v187 = *(_OWORD *)*(_QWORD *)v181;
    v875 = *(_QWORD *)(*(_QWORD *)v181 + 16);
    v874 = v187;
    v188 = sub_20E9DF85C(&(*v8)[223], (uint64_t *)&v874);
    v809 = v182;
    v190 = (float64x2_t **)(v188 + 5);
    if (!v188)
      v190 = 0;
    if (a6)
      v191 = v874;
    else
      v191 = v29 & 0xFFFFFFFFFFFFFF00;
    v192 = **v190;
    _D2 = (*v190)[2].f64[1];
    v194 = *(float64x2_t *)((char *)*v190 + 24);
    v195 = (*v190)[4].f64[0];
    v196 = (*v190)[3];
    v197 = v190[4];
    v198 = v197[1].f64[0];
    _Q7 = *v197;
    v200 = v197[2].f64[1];
    _Q17 = *(float64x2_t *)((char *)v197 + 24);
    v202 = v197[4].f64[0];
    _Q19 = v197[3];
    v204 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v197->f64[0]), v194, *v197, 1), v196, v198);
    __asm { FMLA            D21, D2, V7.D[1] }
    v208 = _D21 + v195 * v198;
    v209 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, _Q17.f64[0]), v194, _Q17, 1), v196, v200);
    __asm { FMLA            D21, D2, V17.D[1] }
    v211 = _D21 + v195 * v200;
    v212 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, _Q19.f64[0]), v194, _Q19, 1), v196, v202);
    __asm { FMLA            D21, D2, V19.D[1] }
    v214 = _D21 + v195 * v202;
    v215 = v190[6];
    _Q19.f64[0] = v215[1].f64[0];
    _Q21 = *v215;
    v217 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v215->f64[0]), v194, *v215, 1), v196, _Q19.f64[0]);
    __asm { FMLA            D0, D2, V21.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + v195 * _Q19.f64[0];
    v218 = v190[2];
    v194.f64[0] = v218[1].f64[0];
    v219 = vaddq_f64(_Q0, v194);
    v220 = vaddq_f64(v217, *v218);
    *(float64x2_t *)__p = v204;
    *(float64x2_t *)&__p[24] = v209;
    *(double *)&__p[16] = v208;
    *(double *)&__p[40] = v211;
    *(float64x2_t *)&__p[48] = v212;
    *(float64x2_t *)&__p[72] = v220;
    *(double *)&__p[64] = v214;
    *(float64_t *)&__p[88] = v219.f64[0];
    v221 = (uint64_t)*v8;
    *(_QWORD *)&v898 = __p;
    DWORD2(v898) = 0;
    rep = &__p[72];
    LODWORD(v900) = 0;
    *(_QWORD *)&v219.f64[0] = v57[2];
    *(float *)v219.f64 = v219.f64[0];
    v808 = (std::__shared_weak_count *)v191;
    sub_20F25D3F0(v221, (uint64_t)&v898, *v57, (unint64_t **)&v882, v191, a6, a4, &v872, v219, a7, 1.79769313e308);
    v222 = -1431655765 * ((unint64_t)(v873 - (_BYTE *)v872) >> 3);
    v223 = v877;
    v224 = &v877;
LABEL_290:
    v225 = v224;
    if (v223)
    {
      while (1)
      {
        v224 = (uint64_t **)v223;
        v226 = *((_DWORD *)v223 + 8);
        if (v226 > v222)
        {
          v223 = *v224;
          goto LABEL_290;
        }
        if (v226 >= v222)
          break;
        v223 = v224[1];
        if (!v223)
        {
          v225 = v224 + 1;
          goto LABEL_295;
        }
      }
      v227 = v224;
    }
    else
    {
LABEL_295:
      v227 = operator new(0x30uLL);
      v227[8] = v222;
      *((_QWORD *)v227 + 5) = 0;
      *(_QWORD *)v227 = 0;
      *((_QWORD *)v227 + 1) = 0;
      *((_QWORD *)v227 + 2) = v224;
      *v225 = (uint64_t *)v227;
      v228 = (uint64_t *)v227;
      if (*v876)
      {
        v876 = (uint64_t **)*v876;
        v228 = *v225;
      }
      sub_20E868578(v877, v228);
      ++v878;
    }
    ++*((_QWORD *)v227 + 5);
    v229.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v230 = v872;
    v807 = v229.__d_.__rep_;
    v839 = v229.__d_.__rep_;
    v825 = v873;
    v838 = v181;
    if (v872 == v873)
    {
      if (!v872)
        goto LABEL_282;
LABEL_602:
      v873 = v230;
      operator delete(v230);
      goto LABEL_282;
    }
LABEL_304:
    v231 = v230[4];
    v232 = v875;
    if (v231 == (_DWORD)v875 && *(_QWORD *)v230 == (_QWORD)v874 && v230[2] == DWORD2(v874))
      goto LABEL_303;
    v840 = v230;
    if (!a3)
      goto LABEL_384;
    v233 = v874;
    v234 = *(uint64_t **)v230;
    v235 = v230[2];
    v236 = v880;
    v237 = &v880;
    v238 = v880;
    if (!v880)
    {
      v865 = DWORD2(v874);
      v239 = v230[3];
      v862 = v230[5];
      v240 = &v880;
      v241 = &v880;
      v242 = HIDWORD(v874);
      v243 = HIDWORD(v875);
      goto LABEL_381;
    }
    while (1)
    {
      v244 = *((_DWORD *)v238 + 12);
      if (v244 == (_DWORD)v875)
      {
        v245 = v238[4];
        if (v245 < (unint64_t)v874)
          goto LABEL_310;
        if (v245 == (_QWORD)v874)
        {
          v246 = *((_DWORD *)v238 + 10);
          if (v246 < DWORD2(v874))
            goto LABEL_310;
          if (DWORD2(v874) < v246)
            goto LABEL_327;
        }
        else if ((unint64_t)v874 < v245)
        {
          goto LABEL_327;
        }
      }
      else
      {
        if (v244 < v875)
          goto LABEL_310;
        if (v875 < v244)
          goto LABEL_327;
      }
      v247 = *((_DWORD *)v238 + 18);
      v248 = v247 >= v231;
      if (v247 == v231)
      {
        v249 = v238[7];
        if (v249 >= (unint64_t)v234)
        {
          if ((uint64_t *)v249 != v234)
            goto LABEL_327;
          v248 = *((_DWORD *)v238 + 16) >= v235;
          goto LABEL_325;
        }
LABEL_310:
        v238 = (uint64_t *)v238[1];
        if (!v238)
          goto LABEL_328;
      }
      else
      {
LABEL_325:
        if (!v248)
          goto LABEL_310;
LABEL_327:
        v237 = (uint64_t **)v238;
        v238 = (uint64_t *)*v238;
        if (!v238)
        {
LABEL_328:
          v181 = v838;
          if (v237 == &v880)
            goto LABEL_344;
          v250 = *((_DWORD *)v237 + 12);
          if ((_DWORD)v875 == v250)
          {
            v251 = (unint64_t)v237[4];
            if ((unint64_t)v874 >= v251)
            {
              if ((_QWORD)v874 != v251)
              {
                if (v251 < (unint64_t)v874)
                  goto LABEL_589;
                goto LABEL_339;
              }
              v252 = *((_DWORD *)v237 + 10);
              if (DWORD2(v874) >= v252)
              {
                if (v252 < DWORD2(v874))
                  goto LABEL_589;
LABEL_339:
                v253 = *((_DWORD *)v237 + 18);
                v254 = v231 >= v253;
                if (v231 == v253)
                {
                  v255 = v237[7];
                  if (v234 >= v255)
                  {
                    if (v234 != v255)
                      goto LABEL_589;
                    v254 = v235 >= *((_DWORD *)v237 + 16);
                    goto LABEL_343;
                  }
                }
                else
                {
LABEL_343:
                  if (v254)
                    goto LABEL_589;
                }
              }
            }
LABEL_344:
            v239 = v230[3];
            v242 = HIDWORD(v874);
            v243 = HIDWORD(v875);
            while (2)
            {
              while (2)
              {
                v240 = (uint64_t **)v236;
                v256 = *((_DWORD *)v236 + 12);
                if (v231 != v256)
                {
                  if (v231 < v256)
                    goto LABEL_345;
                  if (v256 >= v231)
                    goto LABEL_356;
                  goto LABEL_369;
                }
                v257 = v240[4];
                if (v234 < v257)
                  goto LABEL_345;
                if (v234 != v257)
                {
                  if (v257 >= v234)
                    goto LABEL_356;
LABEL_364:
                  if (v257 >= v234)
                  {
                    if (v257 == v234)
                    {
                      v262 = *((_DWORD *)v240 + 10);
                      if (v262 >= v235)
                      {
                        if (v235 < v262)
                          goto LABEL_384;
                        goto LABEL_373;
                      }
                    }
                    else
                    {
                      if (v234 < v257)
                        goto LABEL_384;
LABEL_373:
                      v263 = *((_DWORD *)v240 + 18);
                      v264 = v263 >= v875;
                      if (v263 == (_DWORD)v875)
                      {
                        v265 = (unint64_t)v240[7];
                        if (v265 < (unint64_t)v874)
                          goto LABEL_378;
                        if (v265 != (_QWORD)v874)
                          goto LABEL_384;
                        v264 = *((_DWORD *)v240 + 16) >= DWORD2(v874);
                      }
                      if (v264)
                        goto LABEL_384;
                    }
                  }
LABEL_378:
                  v236 = v240[1];
                  if (!v236)
                  {
                    v865 = DWORD2(v874);
                    v862 = v840[5];
                    v241 = v240 + 1;
                    goto LABEL_381;
                  }
                  continue;
                }
                break;
              }
              v258 = *((_DWORD *)v240 + 10);
              if (v235 < v258)
                goto LABEL_345;
              if (v258 < v235)
                goto LABEL_378;
LABEL_356:
              v259 = *((_DWORD *)v240 + 18);
              v260 = v875 >= v259;
              if ((_DWORD)v875 == v259)
              {
                v261 = (unint64_t)v240[7];
                if ((unint64_t)v874 < v261)
                  goto LABEL_345;
                if ((_QWORD)v874 == v261)
                {
                  v260 = DWORD2(v874) >= *((_DWORD *)v240 + 16);
                  goto LABEL_360;
                }
LABEL_362:
                if (v231 == v256)
                {
                  v257 = v240[4];
                  goto LABEL_364;
                }
LABEL_369:
                if (v256 >= v231)
                {
                  if (v231 < v256)
                    goto LABEL_384;
                  goto LABEL_373;
                }
                goto LABEL_378;
              }
LABEL_360:
              if (v260)
                goto LABEL_362;
LABEL_345:
              v236 = *v240;
              if (*v240)
                continue;
              break;
            }
            v865 = DWORD2(v874);
            v862 = v840[5];
            v241 = v240;
LABEL_381:
            v266 = operator new(0x50uLL);
            v266[4] = v234;
            *((_DWORD *)v266 + 10) = v235;
            *((_DWORD *)v266 + 11) = v239;
            *((_DWORD *)v266 + 12) = v231;
            *((_DWORD *)v266 + 13) = v862;
            v266[7] = v233;
            *((_DWORD *)v266 + 16) = v865;
            *((_DWORD *)v266 + 17) = v242;
            *((_DWORD *)v266 + 18) = v232;
            *((_DWORD *)v266 + 19) = v243;
            *v266 = 0;
            v266[1] = 0;
            v266[2] = v240;
            *v241 = v266;
            if (*v879)
            {
              v879 = (uint64_t **)*v879;
              v266 = *v241;
            }
            sub_20E868578(v880, v266);
            ++v881;
LABEL_384:
            v8 = v832;
            v268 = v832[5];
            v267 = v832[6];
            if (v267 != v268)
            {
              v269 = ((char *)v267 - (char *)v268) >> 4;
              v270 = v840;
              v271 = v840[4];
              v272 = *(_QWORD *)v840;
              while (1)
              {
                v273 = v269 >> 1;
                v274 = &v268[2 * (v269 >> 1)];
                v275 = *v274;
                v276 = *(_DWORD *)(*(_QWORD *)v274 + 16);
                v277 = v276 >= v271;
                if (v276 != v271)
                  goto LABEL_392;
                if (**(_QWORD **)&v275 >= v272)
                  break;
LABEL_386:
                v268 = v274 + 2;
                v273 = v269 + ~v273;
LABEL_387:
                v269 = v273;
                if (!v273)
                  goto LABEL_396;
              }
              if (**(_QWORD **)&v275 != v272)
                goto LABEL_387;
              v277 = *(_DWORD *)(*(_QWORD *)&v275 + 8) >= v840[2];
LABEL_392:
              if (v277)
                goto LABEL_387;
              goto LABEL_386;
            }
            v270 = v840;
LABEL_396:
            v181 = v838;
            if (v268 != v267)
            {
              v278 = *v268;
              if (*(_DWORD *)(*(_QWORD *)v268 + 16) == v270[4]
                && **(_QWORD **)&v278 == *(_QWORD *)v270
                && *(_DWORD *)(*(_QWORD *)&v278 + 8) == v270[2])
              {
                v267 = v268;
              }
            }
            v280 = *v267;
            v279 = (std::__shared_weak_count *)v267[1];
            v870 = (uint64_t *)v280;
            v871 = v279;
            if (v279)
            {
              v281 = (unint64_t *)&v279->__shared_owners_;
              do
                v282 = __ldxr(v281);
              while (__stxr(v282 + 1, v281));
            }
            v283 = (*v832)[224];
            if (v283)
            {
              v284 = *(_DWORD *)(*(_QWORD *)&v280 + 16);
              v285 = *(_DWORD *)(*(_QWORD *)&v280 + 8);
              v286 = v285 ^ __ROR4__(v284, 13);
              v287 = (uint8x8_t)vcnt_s8(v283);
              v287.i16[0] = vaddlv_u8(v287);
              if (v287.u32[0] > 1uLL)
              {
                v288 = v286;
                if (*(_QWORD *)&v283 <= v286)
                  v288 = v286 % *(_QWORD *)&v283;
              }
              else
              {
                v288 = (v283.i32[0] - 1) & v286;
              }
              v289 = *(uint64_t **)(*(_QWORD *)&(*v832)[223] + 8 * v288);
              if (v289)
              {
                v289 = (uint64_t *)*v289;
                if (v289)
                {
                  v290 = **(_QWORD **)&v280;
                  if (v287.u32[0] < 2uLL)
                  {
                    v291 = *(_QWORD *)&v283 - 1;
                    while (1)
                    {
                      v293 = v289[1];
                      if (v293 == v286)
                      {
                        if (*((_DWORD *)v289 + 8) == v284 && v289[2] == v290 && *((_DWORD *)v289 + 6) == v285)
                          goto LABEL_430;
                      }
                      else if ((v293 & v291) != v288)
                      {
                        goto LABEL_429;
                      }
                      v289 = (uint64_t *)*v289;
                      if (!v289)
                        goto LABEL_430;
                    }
                  }
                  do
                  {
                    v292 = v289[1];
                    if (v292 == v286)
                    {
                      if (*((_DWORD *)v289 + 8) == v284 && v289[2] == v290 && *((_DWORD *)v289 + 6) == v285)
                        break;
                    }
                    else
                    {
                      if (v292 >= *(_QWORD *)&v283)
                        v292 %= *(_QWORD *)&v283;
                      if (v292 != v288)
                        goto LABEL_429;
                    }
                    v289 = (uint64_t *)*v289;
                  }
                  while (v289);
                }
              }
            }
            else
            {
LABEL_429:
              v289 = 0;
            }
LABEL_430:
            v294 = (float64x2_t **)(v289 + 5);
            if (!v289)
              v294 = 0;
            v856 = (*v294)[1].f64[0];
            v854 = (*v294)[2].f64[1];
            v846 = *(float64x2_t *)((char *)*v294 + 24);
            v848 = **v294;
            v860 = (*v294)[4].f64[0];
            v858 = (*v294)[3];
            v295 = v294[4];
            v852 = v295[1].f64[0];
            v827 = *(int8x16_t *)v295;
            v828 = *(int8x16_t *)((char *)&v295[1] + 8);
            v850 = v295[2].f64[1];
            v296 = (int8x16_t)v295[3];
            v841 = v295[4].f64[0];
            v297 = v294[6];
            v830 = v297[1].f64[0];
            v831 = v296;
            v826 = *v297;
            v298.f64[1] = v297->f64[1];
            v299 = v294[2];
            v298.f64[0] = v299[1].f64[0];
            v863 = v298;
            v829 = *v299;
            v300.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v869 = 0;
            v868 = 0;
            v301 = *(_QWORD *)(*(_QWORD *)v838 + 80) - *(_QWORD *)(*(_QWORD *)v838 + 72);
            v302 = 0xCCCCCCCCCCCCCCCDLL * (v301 >> 3);
            if (v301)
            {
              if (v302 >> 62)
                sub_20EABADD4();
              v303 = (char *)operator new(0x3333333333333334 * (v301 >> 3));
              bzero(v303, 4 * v302);
              v868 = v303;
              v869 = &v303[4 * v302];
            }
            v304 = v886;
            if (v886)
            {
              v305 = v874;
              v306 = v886;
              do
              {
                v307 = v306[4];
                if ((unint64_t)v874 >= v307)
                {
                  if (v307 >= (unint64_t)v874)
                  {
                    v833 = v302;
                    v834 = v300.__d_.__rep_;
                    goto LABEL_452;
                  }
                  ++v306;
                }
                v306 = (uint64_t *)*v306;
              }
              while (v306);
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapTrackingUtil.cpp", 157, (uint64_t)"next_available_track_id_per_session.count(ref_image_id.view.uuid_hash())", 72, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v308 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v308 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v309 = qword_254A6DE40;
              for (i = qword_254A6DE48; v309 != i; v309 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v309)(*(_QWORD *)(v309 + 8), "next_available_track_id_per_session.count(ref_image_id.view.uuid_hash())", 72, "", 0);
            }
            v311 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v311 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "next_available_track_id_per_session.count(ref_image_id.view.uuid_hash())", 72, "", 0);
            v304 = v886;
            v305 = v874;
            v312 = &v886;
            v313 = &v886;
            v833 = v302;
            v834 = v300.__d_.__rep_;
            if (v886)
            {
              while (1)
              {
LABEL_452:
                while (1)
                {
                  v312 = (uint64_t **)v304;
                  v314 = v304[4];
                  if (v305 >= v314)
                    break;
                  v304 = *v312;
                  v313 = v312;
                  if (!*v312)
                    goto LABEL_456;
                }
                if (v314 >= v305)
                  break;
                v304 = v312[1];
                if (!v304)
                {
                  v313 = v312 + 1;
                  goto LABEL_456;
                }
              }
              v315 = v312;
              v328 = v868;
              v329 = v869;
              if (v868 != v869)
              {
LABEL_483:
                LODWORD(v331) = v315[12];
                v332 = *((_QWORD *)v315 + 5);
                do
                {
                  *(_DWORD *)v328 = v331;
                  ++v315[12];
                  v333 = v832[1];
                  v331 = *((_QWORD *)v315 + 6);
                  v336 = (int8x8_t *)v333[1];
                  v335 = v333 + 1;
                  v334 = v336;
                  if (v336)
                  {
                    do
                    {
                      v337 = v335;
                      do
                      {
                        v338 = (unint64_t)v334[4];
                        if (v338 < v332)
                        {
                          ++v334;
                        }
                        else if (v338 == v332)
                        {
                          if (v334[5].i32[0] < v331)
                            ++v334;
                          else
                            v337 = v334;
                        }
                        else
                        {
                          v337 = v334;
                        }
                        v334 = (int8x8_t *)*v334;
                      }
                      while (v334);
                      if (v337 == v335)
                        break;
                      v339 = (unint64_t)v337[4];
                      if (v332 < v339 || v332 == v339 && v337[5].i32[0] > v331)
                        break;
                      v341 = v337[6];
                      v340 = (std::__shared_weak_count *)v337[7];
                      if (v340)
                      {
                        v342 = (unint64_t *)&v340->__shared_owners_;
                        do
                          v343 = __ldxr(v342);
                        while (__stxr(v343 + 1, v342));
                        do
                          v344 = __ldaxr(v342);
                        while (__stlxr(v344 - 1, v342));
                        if (!v344)
                        {
                          ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                          std::__shared_weak_count::__release_weak(v340);
                        }
                      }
                      if (!*(_QWORD *)&v341)
                        break;
                      LODWORD(v331) = v331 + 1;
                      v334 = (int8x8_t *)*v335;
                    }
                    while (*v335);
                  }
                  *((_QWORD *)v315 + 5) = v332;
                  v315[12] = v331;
                  v328 += 4;
                }
                while (v328 != v329);
              }
            }
            else
            {
LABEL_456:
              v315 = operator new(0x38uLL);
              *((_QWORD *)v315 + 5) = 0;
              *((_QWORD *)v315 + 6) = 0;
              *((_QWORD *)v315 + 4) = v305;
              *(_QWORD *)v315 = 0;
              *((_QWORD *)v315 + 1) = 0;
              *((_QWORD *)v315 + 2) = v312;
              *v313 = (uint64_t *)v315;
              v316 = (uint64_t *)v315;
              if (*v885)
              {
                v885 = (uint64_t **)*v885;
                v316 = *v313;
              }
              v317 = v886;
              _ZF = v316 == v886;
              *((_BYTE *)v316 + 24) = v316 == v886;
              if (!_ZF)
              {
                do
                {
                  v318 = v316[2];
                  if (*(_BYTE *)(v318 + 24))
                    break;
                  v319 = *(uint64_t **)(v318 + 16);
                  v320 = *v319;
                  if (*v319 == v318)
                  {
                    v323 = v319[1];
                    if (!v323 || (v324 = *(unsigned __int8 *)(v323 + 24), v321 = (_BYTE *)(v323 + 24), v324))
                    {
                      if (*(uint64_t **)v318 == v316)
                      {
                        *(_BYTE *)(v318 + 24) = 1;
                        *((_BYTE *)v319 + 24) = 0;
                        v327 = *(_QWORD *)(v318 + 8);
                        *v319 = v327;
                        if (v327)
                          goto LABEL_473;
                      }
                      else
                      {
                        v325 = *(uint64_t **)(v318 + 8);
                        v326 = *v325;
                        *(_QWORD *)(v318 + 8) = *v325;
                        if (v326)
                        {
                          *(_QWORD *)(v326 + 16) = v318;
                          v319 = *(uint64_t **)(v318 + 16);
                        }
                        v325[2] = (uint64_t)v319;
                        *(_QWORD *)(*(_QWORD *)(v318 + 16) + 8 * (**(_QWORD **)(v318 + 16) != v318)) = v325;
                        *v325 = v318;
                        *(_QWORD *)(v318 + 16) = v325;
                        v319 = (uint64_t *)v325[2];
                        v318 = *v319;
                        *((_BYTE *)v325 + 24) = 1;
                        *((_BYTE *)v319 + 24) = 0;
                        v327 = *(_QWORD *)(v318 + 8);
                        *v319 = v327;
                        if (v327)
LABEL_473:
                          *(_QWORD *)(v327 + 16) = v319;
                      }
                      *(_QWORD *)(v318 + 16) = v319[2];
                      *(_QWORD *)(v319[2] + 8 * (*(_QWORD *)v319[2] != (_QWORD)v319)) = v318;
                      *(_QWORD *)(v318 + 8) = v319;
LABEL_481:
                      v319[2] = v318;
                      break;
                    }
                  }
                  else if (!v320 || (v322 = *(unsigned __int8 *)(v320 + 24), v321 = (_BYTE *)(v320 + 24), v322))
                  {
                    if (*(uint64_t **)v318 == v316)
                    {
                      v469 = v316[1];
                      *(_QWORD *)v318 = v469;
                      if (v469)
                      {
                        *(_QWORD *)(v469 + 16) = v318;
                        v319 = *(uint64_t **)(v318 + 16);
                      }
                      v316[2] = (uint64_t)v319;
                      *(_QWORD *)(*(_QWORD *)(v318 + 16) + 8 * (**(_QWORD **)(v318 + 16) != v318)) = v316;
                      v316[1] = v318;
                      *(_QWORD *)(v318 + 16) = v316;
                      v319 = (uint64_t *)v316[2];
                      *((_BYTE *)v316 + 24) = 1;
                      *((_BYTE *)v319 + 24) = 0;
                      v318 = v319[1];
                      v330 = *(uint64_t **)v318;
                      v319[1] = *(_QWORD *)v318;
                      if (v330)
LABEL_479:
                        v330[2] = (uint64_t)v319;
                    }
                    else
                    {
                      *(_BYTE *)(v318 + 24) = 1;
                      *((_BYTE *)v319 + 24) = 0;
                      v318 = v319[1];
                      v330 = *(uint64_t **)v318;
                      v319[1] = *(_QWORD *)v318;
                      if (v330)
                        goto LABEL_479;
                    }
                    *(_QWORD *)(v318 + 16) = v319[2];
                    *(_QWORD *)(v319[2] + 8 * (*(_QWORD *)v319[2] != (_QWORD)v319)) = v318;
                    *(_QWORD *)v318 = v319;
                    goto LABEL_481;
                  }
                  *(_BYTE *)(v318 + 24) = 1;
                  v316 = v319;
                  *((_BYTE *)v319 + 24) = v319 == v317;
                  *v321 = 1;
                }
                while (v319 != v317);
              }
              ++v887;
              v328 = v868;
              v329 = v869;
              if (v868 != v869)
                goto LABEL_483;
            }
            v345.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v346 = (uint64_t)*v838;
            v844 = (uint64_t)*v832;
            v843 = v832[1];
            LOBYTE(v894[0]) = 0;
            v896 = 0;
            v892 = 0;
            v891 = 0;
            v893 = 0;
            v889 = 0;
            v888 = 0;
            v890 = 0;
            v57 = (unint64_t *)a1;
            v347 = v870 + 72;
            v348 = *(double *)(a1 + 24);
            v349 = *(_QWORD *)(a1 + 40);
            if (*(_BYTE *)(a1 + 128))
            {
              sub_20F2DBAC4(v346, v870 + 72, *(_QWORD *)(a1 + 40), (char **)&v891, (char **)&v888, *(double *)(a1 + 24));
            }
            else
            {
              v458 = *(_QWORD *)(v346 + 528);
              v459 = *(_QWORD *)(v346 + 536);
              v460 = v458 != v459;
              if (v458 == v459)
                v461 = 0;
              else
                v461 = (unsigned int **)(v346 + 528);
              sub_20EDCA64C(v346);
              v462 = v348;
              if (*(_BYTE *)(v346 + 280))
              {
                v463 = (uint64_t *)(v346 + 112);
                v464 = (uint64_t *)(v346 + 576);
                if (v349 == 1)
                {
                  sub_20EDCA8D0(v463, v464, v347, (char **)&v891, (char **)&v888, v462, 1, v461, v460);
                }
                else
                {
                  v468 = (uint64_t)(*(_QWORD *)(v346 + 584) - *(_QWORD *)(v346 + 576)) >> 6;
                  if (v468 <= (v870[73] - v870[72]) >> 6)
                    v468 = (v870[73] - v870[72]) >> 6;
                  if (v468 <= v349)
                    sub_20EDCAE04(v463, v464, v347, (char **)&v891, (char **)&v888, v462, v349, v461, v460);
                  else
                    sub_20EDCB348(v463, v464, v347, (char **)&v891, (char **)&v888, v349, v461, v460, v462);
                }
              }
              else
              {
                sub_20EDCB89C((_QWORD *)(v346 + 576), v347, (char **)&v891, (char **)&v888, v349, (uint64_t)v461, v460, v462);
              }
            }
            v351 = *(__n128 *)&__p[16];
            v352 = *(__n128 *)&__p[48];
            v353 = *(__n128 *)&__p[40];
            v354 = *(__n128 *)&__p[56];
            v355 = *(__n128 *)&__p[64];
            _Q4 = *(__n128 *)&__p[80];
            v357 = *(__n128 *)&__p[72];
            v350.n128_u64[0] = *(_QWORD *)&__p[88];
            v866 = 0;
            v867 = 0;
            v358 = v892 - (_BYTE *)v891;
            if (v892 != v891)
            {
              v813 = *(double *)__p;
              v814 = *(double *)&__p[8];
              v815 = *(double *)&__p[24];
              v816 = *(double *)&__p[32];
              v817 = *(double *)&__p[48];
              v818 = *(double *)&__p[56];
              v819 = *(double *)&__p[72];
              v820 = *(double *)&__p[80];
              v821 = *(double *)&__p[88];
              v822 = *(double *)&__p[64];
              v823 = *(double *)&__p[40];
              v824 = *(double *)&__p[16];
              if ((unint64_t)v358 >= 0x3FFFFFFFFFFFFFFDLL)
                sub_20E867F44();
              v812 = v345.__d_.__rep_;
              v360 = (unint64_t *)operator new(4 * v358);
              v361 = 0;
              v362 = 0;
              v363 = *(double *)vextq_s8(v827, v827, 8uLL).i64;
              v364 = *(double *)vextq_s8(v828, v828, 8uLL).i64;
              _V5.D[1] = v826.f64[1];
              _D16 = v854;
              __asm { FMLA            D3, D16, V5.D[1] }
              v368 = *(double *)vextq_s8(v831, v831, 8uLL).i64;
              v369 = vmlaq_n_f64(vmulq_n_f64(v848, *(double *)v831.i64), v846, v368);
              v370 = v856 * *(double *)v831.i64 + v854 * v368;
              v371.f64[0] = _D3 + v860 * v830;
              _Q16 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v848, v826.f64[0]), v846, v826, 1), v858, v830), v829);
              v373 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, *(double *)v827.i64), v846, v363), v858, v852);
              v374.f64[0] = v856 * *(double *)v827.i64 + v854 * v363 + v860 * v852;
              v375 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, *(double *)v828.i64), v846, v364), v858, v850);
              v376 = v856 * *(double *)v828.i64 + v854 * v364 + v860 * v850;
              *(_QWORD *)&_D18 = vextq_s8(_Q16, _Q16, 8uLL).u64[0];
              _Q17 = (int64x2_t)vmlaq_n_f64(v369, v858, v841);
              *(double *)&v379 = v370 + v860 * v841;
              v380 = (float64x2_t)vzip1q_s64(v373, v375);
              v381 = (float64x2_t)vzip2q_s64(v373, v375);
              v382 = vmlaq_n_f64(vmulq_n_f64(v380, *(double *)_Q16.i64), v381, _D18);
              v383 = vextq_s8((int8x16_t)v381, (int8x16_t)vdupq_laneq_s64(_Q17, 1), 8uLL);
              *(_QWORD *)&v381.f64[1] = v383.i64[0];
              v384 = _Q17.i64[0];
              __asm { FMLA            D16, D18, V17.D[1] }
              v385 = vmlaq_n_f64(vmulq_n_f64(v380, v813), v381, v814);
              v386 = vmlaq_n_f64(vmulq_n_f64(v380, v815), v381, v816);
              v387 = vmlaq_n_f64(vmulq_n_f64(v380, v817), v381, v818);
              v388 = vmlaq_n_f64(vmulq_n_f64(v380, v819), v381, v820);
              v389 = vaddq_f64(v371, v863);
              v374.f64[1] = v376;
              v390 = vmlaq_n_f64(v382, v374, v389.f64[0]);
              v389.f64[0] = *(double *)_Q16.i64 + *(double *)&v379 * v389.f64[0];
              v391 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q17.u64[0], v813), (float64x2_t)v383.u64[1], v814), (float64x2_t)v379, v824);
              v392 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v384, v815), (float64x2_t)v383.u64[1], v816), (float64x2_t)v379, v823);
              v393 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v384, v817), (float64x2_t)v383.u64[1], v818), (float64x2_t)v379, v822);
              v394 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v384, v819), (float64x2_t)v383.u64[1], v820), (float64x2_t)v379, v821);
              __asm { FMOV            V2.2D, #1.0 }
              *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vnegq_f64(v389);
              v396 = vmlsq_f64(vmlaq_n_f64(v385, v374, v824), (float64x2_t)0, v390);
              v397 = (int8x16_t)vmlaq_f64(v391, (float64x2_t)0, _Q2);
              v398 = vmlsq_f64(vmlaq_n_f64(v386, v374, v823), (float64x2_t)0, v390);
              v399 = (int8x16_t)vmlaq_f64(v392, (float64x2_t)0, _Q2);
              v400 = vmlsq_f64(vmlaq_n_f64(v387, v374, v822), (float64x2_t)0, v390);
              v401 = vmlaq_f64(v393, (float64x2_t)0, _Q2);
              v402 = vsubq_f64(vmlaq_n_f64(v388, v374, v821), v390);
              v403 = (int8x16_t)vaddq_f64(_Q2, v394);
              v404 = (float64x2_t)vextq_s8((int8x16_t)v402, v403, 8uLL);
              v405 = (float64x2_t)vzip1q_s64((int64x2_t)v403, (int64x2_t)v402);
              v406 = vmlsq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v397, (int64x2_t)v396), v404), (float64x2_t)vextq_s8((int8x16_t)v396, v397, 8uLL), v405);
              v407 = (float64x2_t)vextq_s8((int8x16_t)v400, (int8x16_t)v401, 8uLL);
              v401.f64[1] = v400.f64[0];
              v354 = (__n128)vmlsq_f64(vmulq_f64(v401, v404), v407, v405);
              v408 = (float64x2_t)vextq_s8((int8x16_t)v396, v399, 8uLL);
              v396.f64[1] = v398.f64[1];
              v409 = vmlsq_laneq_f64(vmulq_laneq_f64(v402, v400, 1), v400, v402, 1);
              v410 = vmlsq_f64(vmulq_f64(v398, v405), (float64x2_t)vzip1q_s64((int64x2_t)v399, (int64x2_t)v398), v402);
              v411 = vmlsq_f64(vmulq_f64(v408, v402), v396, v404);
              v412 = (float64x2_t)vextq_s8((int8x16_t)v411, (int8x16_t)v410, 8uLL);
              v413 = vmulq_f64(v409, v409);
              v414 = vmulq_f64(v411, v411);
              v415 = vmulq_f64(v410, v410);
              v414.f64[0] = v415.f64[1] + v415.f64[0] + v414.f64[1] + v414.f64[0] + vaddvq_f64(vmulq_f64(v406, v406));
              v416 = vmulq_f64((float64x2_t)v354, (float64x2_t)v354);
              v413.f64[0] = 1.0 / sqrt(v413.f64[0] + v416.f64[1] + v416.f64[0] + v414.f64[0]);
              *(_QWORD *)&v864 = *(_OWORD *)&vmulq_f64(v411, v413);
              v352 = (__n128)vmulq_n_f64(v406, v413.f64[0]);
              *(_QWORD *)&v411.f64[1] = vdupq_laneq_s64((int64x2_t)v410, 1).u64[0];
              v417 = (int8x16_t)vmulq_n_f64(v412, v413.f64[0]);
              v857 = vmulq_laneq_f64(v413, v410, 1);
              *(_QWORD *)&v855 = *(_OWORD *)&vmulq_f64(v409, v413);
              v418 = (int8x16_t)vmulq_n_f64((float64x2_t)v354, v413.f64[0]);
              v419 = (int8x16_t)vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v406, (int64x2_t)v412), v413.f64[0]);
              v420 = (int8x16_t)vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)v406, (int64x2_t)v412), v413.f64[0]);
              v421 = (int8x16_t)vmulq_n_f64(v411, v413.f64[0]);
              v352.n128_u64[1] = vextq_s8((int8x16_t)v352, (int8x16_t)v352, 8uLL).u64[0];
              v417.i64[1] = vextq_s8(v417, v417, 8uLL).u64[0];
              v859 = (float64x2_t)v417;
              v861 = (float64x2_t)v352;
              v418.i64[1] = vextq_s8(v418, v418, 8uLL).u64[0];
              v419.i64[1] = vextq_s8(v419, v419, 8uLL).u64[0];
              v851 = (float64x2_t)v419;
              v853 = (float64x2_t)v418;
              v420.i64[1] = vextq_s8(v420, v420, 8uLL).u64[0];
              v351 = (__n128)vextq_s8(v421, v421, 8uLL);
              v421.i64[1] = v351.n128_u64[0];
              v847 = (float64x2_t)v421;
              v849 = (float64x2_t)v420;
              v422 = v358 >> 2;
              v842 = (char *)&v360[2 * (v358 >> 2)];
              v423 = v360;
              while (1)
              {
                v424 = 4 * v361;
                v425 = *((unsigned int *)v891 + v361);
                v426 = *(_QWORD *)(v346 + 72) + 40 * v425;
                v427 = v870[9] + 40 * *(unsigned int *)((char *)v888 + v424);
                v428 = *(double *)(v426 + 16);
                v429 = *(double *)(v426 + 24);
                _D3 = *(double *)(v427 + 24);
                _Q4 = (__n128)vaddq_f64(v853, vmlaq_n_f64(vmulq_n_f64(v861, v428), v859, v429));
                v357 = (__n128)v857;
                v431 = v855 + v864 * v428 + v857.f64[0] * v429;
                __asm { FMLA            D1, D3, V4.D[1] }
                v433 = v431 + _D1;
                v434 = vaddq_f64(v847, vmlaq_n_f64(vmulq_n_f64(v851, *(double *)(v427 + 16)), v849, _D3));
                v435 = vmulq_f64((float64x2_t)_Q4, (float64x2_t)_Q4);
                v350 = (__n128)vdupq_laneq_s64((int64x2_t)v435, 1);
                v436 = vmulq_f64(v434, v434);
                v355 = (__n128)vaddq_f64(vaddq_f64(v435, (float64x2_t)v350), v436);
                v353 = (__n128)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v436, 1), (float64x2_t)v355);
                v355.n128_f64[0] = 1.0 / v353.n128_f64[0];
                if (v353.n128_f64[0] == 0.0)
                  v437 = 1.0;
                else
                  v437 = 1.0 / v353.n128_f64[0];
                v351.n128_f64[0] = v433 * v433 * v437;
                v353.n128_u64[0] = v57[6];
                if (v351.n128_f64[0] > v353.n128_f64[0])
                  goto LABEL_515;
                v438 = v57;
                v439 = *(_DWORD *)&v868[4 * v425];
                v440 = *(_QWORD *)v346;
                v441 = *((double *)v438 + 4);
                if (v896)
                  break;
                *(_QWORD *)&v898 = &off_24C9FD258;
                v900 = &v898;
                v443 = sub_20F2DBD04(v440, v439, (uint64_t *)v346, v870, v844, v426, (float32x2_t *)v427, v843, v441, (uint64_t)&v898);
                v444 = v900;
                if (v900 == &v898)
                {
                  v444 = &v898;
LABEL_532:
                  v445 = 4;
                  goto LABEL_533;
                }
LABEL_529:
                if (v444)
                {
                  v445 = 5;
LABEL_533:
                  (*(void (**)(void))(*(_QWORD *)v444 + 8 * v445))();
                }
                if (v443)
                {
                  v446 = *(_QWORD *)(v443 + 32);
                  if (*(_QWORD *)(v443 + 24) == v440 && v439 == (_DWORD)v446)
                  {
                    if (v423 >= (unint64_t *)v842)
                    {
                      v448 = ((char *)v423 - (char *)v360) >> 4;
                      v449 = v448 + 1;
                      if ((unint64_t)(v448 + 1) >> 60)
                        sub_20E867F44();
                      if ((v842 - (char *)v360) >> 3 > v449)
                        v449 = (v842 - (char *)v360) >> 3;
                      if ((unint64_t)(v842 - (char *)v360) >= 0x7FFFFFFFFFFFFFF0)
                        v450 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v450 = v449;
                      if (v450)
                      {
                        if (v450 >> 60)
                          sub_20E877A38();
                        v451 = (char *)operator new(16 * v450);
                        v452 = (unint64_t *)&v451[16 * v448];
                        *v452 = v440;
                        v452[1] = v446;
                        v453 = (uint64_t)v452;
                        if (v423 != v360)
                        {
LABEL_550:
                          v57 = (unint64_t *)a1;
                          do
                          {
                            v454 = *(v423 - 2);
                            v423 -= 2;
                            v455 = *((_DWORD *)v423 + 2);
                            *(_QWORD *)(v453 - 16) = v454;
                            v453 -= 16;
                            *(_DWORD *)(v453 + 8) = v455;
                          }
                          while (v423 != v360);
                          v842 = &v451[16 * v450];
                          v423 = v452 + 2;
                          if (v360)
LABEL_553:
                            operator delete(v360);
LABEL_554:
                          v360 = (unint64_t *)v453;
                          goto LABEL_515;
                        }
                      }
                      else
                      {
                        v451 = 0;
                        v452 = (unint64_t *)(16 * v448);
                        *v452 = v440;
                        v452[1] = v446;
                        v453 = 16 * v448;
                        if (v423 != v360)
                          goto LABEL_550;
                      }
                      v57 = (unint64_t *)a1;
                      v842 = &v451[16 * v450];
                      v423 = v452 + 2;
                      if (v360)
                        goto LABEL_553;
                      goto LABEL_554;
                    }
                    *v423 = v440;
                    v423[1] = v446;
                    v423 += 2;
                  }
                }
                v57 = (unint64_t *)a1;
LABEL_515:
                v361 = ++v362;
                if (v422 <= v362)
                {
                  v867 = v423;
                  v866 = v360;
                  v8 = v832;
                  v181 = v838;
                  v345.__d_.__rep_ = v812;
                  goto LABEL_559;
                }
              }
              v442 = (uint64_t)v895;
              if (v895)
              {
                if (v895 != v894)
                {
                  v442 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v895 + 16))(v895, v359);
                  goto LABEL_524;
                }
                v909 = (__int128 *)&v906;
                (*(void (**)(_QWORD *, uint64_t ***))(v894[0] + 24))(v894, &v906);
              }
              else
              {
LABEL_524:
                v909 = (__int128 *)v442;
              }
              v443 = sub_20F2DBD04(v440, v439, (uint64_t *)v346, v870, v844, v426, (float32x2_t *)v427, v843, v441, (uint64_t)&v906);
              v444 = v909;
              if (v909 == (__int128 *)&v906)
              {
                v444 = (__int128 *)&v906;
                goto LABEL_532;
              }
              goto LABEL_529;
            }
LABEL_559:
            if (v888)
            {
              v889 = v888;
              operator delete(v888);
            }
            v230 = v840;
            if (v891)
            {
              v892 = v891;
              operator delete(v891);
            }
            if (v866)
              operator delete(v866);
            if (v896)
            {
              v456 = v895;
              if (v895 == v894)
              {
                v456 = v894;
                v457 = 4;
LABEL_576:
                (*(void (**)(__n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128, double, double))(*v456 + 8 * v457))(v351, v353, v355, v350, _Q4, v357, v354, v352, *(double *)&v801, v802);
              }
              else if (v895)
              {
                v457 = 5;
                goto LABEL_576;
              }
            }
            v465.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            if (v868)
              operator delete(v868);
            if (v871)
            {
              v466 = (unint64_t *)&v871->__shared_owners_;
              do
                v467 = __ldaxr(v466);
              while (__stlxr(v467 - 1, v466));
              if (!v467)
              {
                ((void (*)(std::__shared_weak_count *))v871->__on_zero_shared)(v871);
                std::__shared_weak_count::__release_weak(v871);
              }
            }
            v185 = v185 + (double)(v834 - v839) / 1000000000.0;
            v836 += v833;
            v184 = v184 + (double)(v345.__d_.__rep_ - v834) / 1000000000.0;
            v835 += ((char *)v867 - (char *)v866) >> 4;
            ++v837;
            v183 = v183 + (double)(v465.__d_.__rep_ - v345.__d_.__rep_) / 1000000000.0;
            v839 = v465.__d_.__rep_;
          }
          else
          {
            if (v875 < v250)
              goto LABEL_344;
            if (v250 >= v875)
              goto LABEL_339;
LABEL_589:
            ++v810;
            v8 = v832;
            v57 = (unint64_t *)a1;
          }
LABEL_303:
          v230 += 6;
          if (v230 != v825)
            goto LABEL_304;
          v230 = v872;
          if (v872)
            goto LABEL_602;
LABEL_282:
          v29 = (unint64_t)v808;
          v186 = v186 + (double)(v807 - v809) / 1000000000.0;
          v181 += 2;
          v182 = v839;
          if (v181 == v804)
            goto LABEL_604;
          goto LABEL_283;
        }
      }
    }
  }
  v810 = 0;
  v836 = 0;
  v837 = 0;
  v835 = 0;
  v183 = 0.0;
  v184 = 0.0;
  v185 = 0.0;
  v186 = 0.0;
LABEL_604:
  if ((a5 & 1) == 0)
    goto LABEL_1178;
  v907 = 0;
  v908 = 0;
  v906 = &v907;
  v470 = v8[1];
  v473 = (int8x8_t *)*v470;
  v471 = v470 + 1;
  v472 = v473;
  if (v473 != v471)
  {
    do
    {
      v482 = (*(_QWORD *)(*(_QWORD *)&v472[6] + 544) - *(_QWORD *)(*(_QWORD *)&v472[6] + 536)) >> 5;
      v483 = v907;
      v484 = &v907;
      v485 = &v907;
      if (v907)
      {
        while (1)
        {
          while (1)
          {
            v485 = (uint64_t **)v483;
            v486 = *((_DWORD *)v483 + 8);
            if (v486 <= v482)
              break;
            v483 = *v485;
            v484 = v485;
            if (!*v485)
              goto LABEL_621;
          }
          if (v486 >= v482)
            break;
          v483 = v485[1];
          if (!v483)
          {
            v484 = v485 + 1;
            goto LABEL_621;
          }
        }
        v485[5] = (uint64_t *)((char *)v485[5] + 1);
        v489 = (int8x8_t *)v472[1];
        if (v489)
        {
          do
          {
LABEL_626:
            v490 = v489;
            v489 = (int8x8_t *)*v489;
          }
          while (v489);
          goto LABEL_613;
        }
      }
      else
      {
LABEL_621:
        v487 = operator new(0x30uLL);
        v487[8] = v482;
        *((_QWORD *)v487 + 5) = 0;
        *(_QWORD *)v487 = 0;
        *((_QWORD *)v487 + 1) = 0;
        *((_QWORD *)v487 + 2) = v485;
        *v484 = (uint64_t *)v487;
        v488 = (uint64_t *)v487;
        if (*v906)
        {
          v906 = (uint64_t **)*v906;
          v488 = *v484;
        }
        sub_20E868578(v907, v488);
        ++v908;
        ++*((_QWORD *)v487 + 5);
        v489 = (int8x8_t *)v472[1];
        if (v489)
          goto LABEL_626;
      }
      do
      {
        v490 = (int8x8_t *)v472[2];
        _ZF = *v490 == (_QWORD)v472;
        v472 = v490;
      }
      while (!_ZF);
LABEL_613:
      v472 = v490;
    }
    while (v490 != v471);
  }
  sub_20F2D5664(&v874);
  if (**(int **)(v874 + 56) > 3)
    goto LABEL_717;
  v474 = *(unsigned __int8 *)(v874 + 72);
  v475 = sub_20E8C31DC(v874, "OSLogSurrogateAppender", 1, 0);
  v476 = v475;
  if (!v474 && v475 == 0)
    goto LABEL_717;
  *(_QWORD *)&v898 = &v874;
  *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
  rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v900) = 3;
  v901 = "unknown file";
  v902 = 192;
  v905 = 0;
  v903 = "unknown function";
  v904 = 0;
  v478 = *(_QWORD *)v898;
  v479 = *(_QWORD *)v898 + 16;
  if (*(char *)(*(_QWORD *)v898 + 39) < 0)
  {
    v481 = *(const char **)(v478 + 16);
    v480 = *(_QWORD *)(v478 + 24);
  }
  else
  {
    v480 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
    v481 = (const char *)(*(_QWORD *)v898 + 16);
  }
  v491 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v491 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v492 = byte_254A4A4F8;
  else
    v492 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v493 = byte_254A4A4F8[23];
  else
    v493 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v492, v481);
  v494 = &__p[8];
  if (v493 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v493 >= 0x17)
  {
    v495 = (v493 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v493 | 7) != 0x17)
      v495 = v493 | 7;
    v496 = v495 + 1;
    v494 = operator new(v495 + 1);
    *(_QWORD *)&__p[24] = v496 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v494;
    *(_QWORD *)&__p[16] = v493;
    goto LABEL_646;
  }
  __p[31] = v493;
  if (v493)
LABEL_646:
    memmove(v494, v492, v493);
  v494[v493] = 0;
  __p[32] = 1;
  v497 = &__p[40];
  if (v480 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v480 >= 0x17)
  {
    v498 = (v480 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v480 | 7) != 0x17)
      v498 = v480 | 7;
    v499 = v498 + 1;
    v497 = operator new(v498 + 1);
    *(_QWORD *)&__p[56] = v499 | 0x8000000000000000;
    *(_QWORD *)&__p[40] = v497;
    *(_QWORD *)&__p[48] = v480;
  }
  else
  {
    __p[63] = v480;
    if (!v480)
      goto LABEL_655;
  }
  memmove(v497, v481, v480);
LABEL_655:
  v497[v480] = 0;
  __p[64] = 1;
  v500 = *(NSObject **)__p;
  if ((__p[63] & 0x80000000) != 0)
    operator delete(*(void **)&__p[40]);
  if (__p[32] && (__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v476 && *(_QWORD *)(v476 + 24))
  {
    v501 = _os_log_pack_size();
    v502 = (std::__shared_weak_count_vtbl *)operator new(v501, (std::align_val_t)8uLL);
    v503 = (std::__shared_weak_count *)operator new();
    v504 = v503;
    v503->__shared_owners_ = 0;
    v505 = (unint64_t *)&v503->__shared_owners_;
    v503->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v503->__shared_weak_owners_ = 0;
    v503[1].__vftable = v502;
    *(_QWORD *)__p = v502;
    *(_QWORD *)&__p[8] = v502;
    *(_QWORD *)&__p[16] = v503;
    do
      v506 = __ldxr(v505);
    while (__stxr(v506 + 1, v505));
    memset(&__p[24], 0, 24);
    do
      v507 = __ldaxr(v505);
    while (__stlxr(v507 - 1, v505));
    if (!v507)
    {
      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
      std::__shared_weak_count::__release_weak(v504);
    }
    v508 = *(_QWORD *)__p;
    *(_WORD *)_os_log_pack_fill() = 0;
    v509 = (char *)operator new();
    v510 = *(unsigned __int8 *)(v478 + 39);
    if ((v510 & 0x80u) == 0)
      v511 = v479;
    else
      v511 = *(_QWORD *)(v478 + 16);
    if ((v510 & 0x80u) != 0)
      v510 = *(_QWORD *)(v478 + 24);
    *(_QWORD *)v509 = v508;
    *(_OWORD *)(v509 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v509 + 24) = *(_OWORD *)&__p[24];
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    *((_QWORD *)v509 + 5) = v511;
    *((_QWORD *)v509 + 6) = v510;
    v509[56] = 1;
    v888 = 0;
    v891 = v509;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v476 + 24) + 40))(*(_QWORD *)(v476 + 24), &v891);
    v512 = v891;
    v891 = 0;
    if (v512)
    {
      v513 = (std::__shared_weak_count *)*((_QWORD *)v512 + 4);
      if (v513)
      {
        v514 = (unint64_t *)&v513->__shared_owners_;
        do
          v515 = __ldaxr(v514);
        while (__stlxr(v515 - 1, v514));
        if (!v515)
        {
          ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
          std::__shared_weak_count::__release_weak(v513);
        }
      }
      v516 = (std::__shared_weak_count *)*((_QWORD *)v512 + 2);
      if (v516)
      {
        v517 = (unint64_t *)&v516->__shared_owners_;
        do
          v518 = __ldaxr(v517);
        while (__stlxr(v518 - 1, v517));
        if (!v518)
        {
          ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
          std::__shared_weak_count::__release_weak(v516);
        }
      }
      MEMORY[0x212BC6398](v512, 0x10F0C40B62ED6C6);
      v519 = v888;
      v888 = 0;
      if (v519)
      {
        v520 = (std::__shared_weak_count *)*((_QWORD *)v519 + 4);
        if (v520)
        {
          v521 = (unint64_t *)&v520->__shared_owners_;
          do
            v522 = __ldaxr(v521);
          while (__stlxr(v522 - 1, v521));
          if (!v522)
          {
            ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
            std::__shared_weak_count::__release_weak(v520);
          }
        }
        v523 = (std::__shared_weak_count *)*((_QWORD *)v519 + 2);
        if (v523)
        {
          v524 = (unint64_t *)&v523->__shared_owners_;
          do
            v525 = __ldaxr(v524);
          while (__stlxr(v525 - 1, v524));
          if (!v525)
          {
            ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
            std::__shared_weak_count::__release_weak(v523);
          }
        }
        MEMORY[0x212BC6398](v519, 0x10F0C40B62ED6C6);
      }
    }
    v526 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v527 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v528 = __ldaxr(v527);
      while (__stlxr(v528 - 1, v527));
      if (!v528)
      {
        ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
        std::__shared_weak_count::__release_weak(v526);
      }
    }
    v529 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v530 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v531 = __ldaxr(v530);
      while (__stlxr(v531 - 1, v530));
      if (!v531)
      {
        ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
        std::__shared_weak_count::__release_weak(v529);
      }
    }
  }
  else
  {
    os_log_type_enabled(v500, OS_LOG_TYPE_INFO);
    *(_WORD *)__p = 0;
    v532 = (void *)_os_log_send_and_compose_impl();
    if (v532)
      free(v532);
  }
  if (v474)
  {
    sub_20E8C003C((uint64_t)&v898, "Track length histogram after rematch");
    sub_20E863570((uint64_t)&v898);
  }
  sub_20E863570((uint64_t)&v898);
  v533 = v905;
  if (v905)
  {
    v534 = (unint64_t *)&v905->__shared_owners_;
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
    if (!v535)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
    }
  }
LABEL_717:
  sub_20F2D5758(&v906);
  sub_20F2D5664(&v874);
  if (**(int **)(v874 + 56) > 3)
    goto LABEL_808;
  v536 = *(unsigned __int8 *)(v874 + 72);
  v537 = sub_20E8C31DC(v874, "OSLogSurrogateAppender", 1, 0);
  v538 = v537;
  if (!v536 && !v537)
    goto LABEL_808;
  *(_QWORD *)&v898 = &v874;
  *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
  rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v900) = 3;
  v901 = "unknown file";
  v902 = 194;
  v905 = 0;
  v903 = "unknown function";
  v904 = 0;
  v539 = *(_QWORD *)v898;
  v540 = *(_QWORD *)v898 + 16;
  if (*(char *)(*(_QWORD *)v898 + 39) < 0)
  {
    v542 = *(const char **)(v539 + 16);
    v541 = *(_QWORD *)(v539 + 24);
  }
  else
  {
    v541 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
    v542 = (const char *)(*(_QWORD *)v898 + 16);
  }
  v543 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v543 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v544 = byte_254A4A4F8;
  else
    v544 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v545 = byte_254A4A4F8[23];
  else
    v545 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v544, v542);
  v546 = &__p[8];
  if (v545 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v545 >= 0x17)
  {
    v547 = (v545 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v545 | 7) != 0x17)
      v547 = v545 | 7;
    v548 = v547 + 1;
    v546 = operator new(v547 + 1);
    *(_QWORD *)&__p[24] = v548 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v546;
    *(_QWORD *)&__p[16] = v545;
    goto LABEL_737;
  }
  __p[31] = v545;
  if (v545)
LABEL_737:
    memmove(v546, v544, v545);
  v546[v545] = 0;
  __p[32] = 1;
  v549 = &__p[40];
  if (v541 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v541 >= 0x17)
  {
    v550 = (v541 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v541 | 7) != 0x17)
      v550 = v541 | 7;
    v551 = v550 + 1;
    v549 = operator new(v550 + 1);
    *(_QWORD *)&__p[56] = v551 | 0x8000000000000000;
    *(_QWORD *)&__p[40] = v549;
    *(_QWORD *)&__p[48] = v541;
  }
  else
  {
    __p[63] = v541;
    if (!v541)
      goto LABEL_746;
  }
  memmove(v549, v542, v541);
LABEL_746:
  v549[v541] = 0;
  __p[64] = 1;
  v552 = *(NSObject **)__p;
  if ((__p[63] & 0x80000000) != 0)
    operator delete(*(void **)&__p[40]);
  if (__p[32] && (__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v538 && *(_QWORD *)(v538 + 24))
  {
    v553 = _os_log_pack_size();
    v554 = (std::__shared_weak_count_vtbl *)operator new(v553, (std::align_val_t)8uLL);
    v555 = (std::__shared_weak_count *)operator new();
    v556 = v555;
    v555->__shared_owners_ = 0;
    v557 = (unint64_t *)&v555->__shared_owners_;
    v555->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v555->__shared_weak_owners_ = 0;
    v555[1].__vftable = v554;
    *(_QWORD *)__p = v554;
    *(_QWORD *)&__p[8] = v554;
    *(_QWORD *)&__p[16] = v555;
    do
      v558 = __ldxr(v557);
    while (__stxr(v558 + 1, v557));
    memset(&__p[24], 0, 24);
    do
      v559 = __ldaxr(v557);
    while (__stlxr(v559 - 1, v557));
    if (!v559)
    {
      ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
      std::__shared_weak_count::__release_weak(v556);
    }
    v560 = *(_QWORD *)__p;
    *(_WORD *)_os_log_pack_fill() = 0;
    v561 = (char *)operator new();
    v562 = *(unsigned __int8 *)(v539 + 39);
    if ((v562 & 0x80u) == 0)
      v563 = v540;
    else
      v563 = *(_QWORD *)(v539 + 16);
    if ((v562 & 0x80u) != 0)
      v562 = *(_QWORD *)(v539 + 24);
    *(_QWORD *)v561 = v560;
    *(_OWORD *)(v561 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v561 + 24) = *(_OWORD *)&__p[24];
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    *((_QWORD *)v561 + 5) = v563;
    *((_QWORD *)v561 + 6) = v562;
    v561[56] = 1;
    v888 = 0;
    v891 = v561;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v538 + 24) + 40))(*(_QWORD *)(v538 + 24), &v891);
    v564 = v891;
    v891 = 0;
    if (v564)
    {
      v565 = (std::__shared_weak_count *)*((_QWORD *)v564 + 4);
      if (v565)
      {
        v566 = (unint64_t *)&v565->__shared_owners_;
        do
          v567 = __ldaxr(v566);
        while (__stlxr(v567 - 1, v566));
        if (!v567)
        {
          ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
          std::__shared_weak_count::__release_weak(v565);
        }
      }
      v568 = (std::__shared_weak_count *)*((_QWORD *)v564 + 2);
      if (v568)
      {
        v569 = (unint64_t *)&v568->__shared_owners_;
        do
          v570 = __ldaxr(v569);
        while (__stlxr(v570 - 1, v569));
        if (!v570)
        {
          ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
          std::__shared_weak_count::__release_weak(v568);
        }
      }
      MEMORY[0x212BC6398](v564, 0x10F0C40B62ED6C6);
      v571 = v888;
      v888 = 0;
      if (v571)
      {
        v572 = (std::__shared_weak_count *)*((_QWORD *)v571 + 4);
        if (v572)
        {
          v573 = (unint64_t *)&v572->__shared_owners_;
          do
            v574 = __ldaxr(v573);
          while (__stlxr(v574 - 1, v573));
          if (!v574)
          {
            ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
            std::__shared_weak_count::__release_weak(v572);
          }
        }
        v575 = (std::__shared_weak_count *)*((_QWORD *)v571 + 2);
        if (v575)
        {
          v576 = (unint64_t *)&v575->__shared_owners_;
          do
            v577 = __ldaxr(v576);
          while (__stlxr(v577 - 1, v576));
          if (!v577)
          {
            ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
            std::__shared_weak_count::__release_weak(v575);
          }
        }
        MEMORY[0x212BC6398](v571, 0x10F0C40B62ED6C6);
      }
    }
    v578 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v579 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v580 = __ldaxr(v579);
      while (__stlxr(v580 - 1, v579));
      if (!v580)
      {
        ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
        std::__shared_weak_count::__release_weak(v578);
      }
    }
    v581 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v582 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v583 = __ldaxr(v582);
      while (__stlxr(v583 - 1, v582));
      if (!v583)
      {
        ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
        std::__shared_weak_count::__release_weak(v581);
      }
    }
  }
  else
  {
    os_log_type_enabled(v552, OS_LOG_TYPE_INFO);
    *(_WORD *)__p = 0;
    v584 = (void *)_os_log_send_and_compose_impl();
    if (v584)
      free(v584);
  }
  if (v536)
  {
    sub_20E8C003C((uint64_t)&v898, "");
    sub_20E863570((uint64_t)&v898);
  }
  sub_20E863570((uint64_t)&v898);
  v585 = v905;
  if (v905)
  {
    v586 = (unint64_t *)&v905->__shared_owners_;
    do
      v587 = __ldaxr(v586);
    while (__stlxr(v587 - 1, v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
      std::__shared_weak_count::__release_weak(v585);
    }
  }
LABEL_808:
  sub_20E9BCAA8(v907);
  sub_20F2D5664(&v888);
  if (**((int **)v888 + 7) > 3)
    goto LABEL_901;
  v588 = *((unsigned __int8 *)v888 + 72);
  v589 = sub_20E8C31DC((uint64_t)v888, "OSLogSurrogateAppender", 1, 0);
  v590 = v589;
  if (!v588 && v589 == 0)
    goto LABEL_901;
  *(_QWORD *)&v898 = &v888;
  *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
  rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v900) = 3;
  v901 = "unknown file";
  v902 = 197;
  v905 = 0;
  v903 = "unknown function";
  v904 = 0;
  v592 = *(_QWORD *)v898;
  v593 = *(_QWORD *)v898 + 16;
  if (*(char *)(*(_QWORD *)v898 + 39) < 0)
  {
    v595 = *(const char **)(v592 + 16);
    v594 = *(_QWORD *)(v592 + 24);
  }
  else
  {
    v594 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
    v595 = (const char *)(*(_QWORD *)v898 + 16);
  }
  v596 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v596 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v597 = byte_254A4A4F8;
  else
    v597 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v598 = byte_254A4A4F8[23];
  else
    v598 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v597, v595);
  v599 = &__p[8];
  if (v598 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v598 >= 0x17)
  {
    v600 = (v598 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v598 | 7) != 0x17)
      v600 = v598 | 7;
    v601 = v600 + 1;
    v599 = operator new(v600 + 1);
    *(_QWORD *)&__p[24] = v601 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v599;
    *(_QWORD *)&__p[16] = v598;
    goto LABEL_830;
  }
  __p[31] = v598;
  if (v598)
LABEL_830:
    memmove(v599, v597, v598);
  v599[v598] = 0;
  __p[32] = 1;
  v602 = &__p[40];
  if (v594 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v594 >= 0x17)
  {
    v603 = (v594 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v594 | 7) != 0x17)
      v603 = v594 | 7;
    v604 = v603 + 1;
    v602 = operator new(v603 + 1);
    *(_QWORD *)&__p[56] = v604 | 0x8000000000000000;
    *(_QWORD *)&__p[40] = v602;
    *(_QWORD *)&__p[48] = v594;
  }
  else
  {
    __p[63] = v594;
    if (!v594)
      goto LABEL_839;
  }
  memmove(v602, v595, v594);
LABEL_839:
  v602[v594] = 0;
  __p[64] = 1;
  v605 = *(NSObject **)__p;
  if ((__p[63] & 0x80000000) != 0)
    operator delete(*(void **)&__p[40]);
  if (__p[32] && (__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v590 && *(_QWORD *)(v590 + 24))
  {
    v606 = _os_log_pack_size();
    v607 = (std::__shared_weak_count_vtbl *)operator new(v606, (std::align_val_t)8uLL);
    v608 = (std::__shared_weak_count *)operator new();
    v609 = v608;
    v608->__shared_owners_ = 0;
    v610 = (unint64_t *)&v608->__shared_owners_;
    v608->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v608->__shared_weak_owners_ = 0;
    v608[1].__vftable = v607;
    *(_QWORD *)__p = v607;
    *(_QWORD *)&__p[8] = v607;
    *(_QWORD *)&__p[16] = v608;
    do
      v611 = __ldxr(v610);
    while (__stxr(v611 + 1, v610));
    memset(&__p[24], 0, 24);
    do
      v612 = __ldaxr(v610);
    while (__stlxr(v612 - 1, v610));
    if (!v612)
    {
      ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
      std::__shared_weak_count::__release_weak(v609);
    }
    v613 = *(_QWORD *)__p;
    *(_WORD *)_os_log_pack_fill() = 0;
    v614 = operator new();
    v615 = *(unsigned __int8 *)(v592 + 39);
    if ((v615 & 0x80u) == 0)
      v616 = v593;
    else
      v616 = *(_QWORD *)(v592 + 16);
    if ((v615 & 0x80u) != 0)
      v615 = *(_QWORD *)(v592 + 24);
    *(_QWORD *)v614 = v613;
    *(_OWORD *)(v614 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v614 + 24) = *(_OWORD *)&__p[24];
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    *(_QWORD *)(v614 + 40) = v616;
    *(_QWORD *)(v614 + 48) = v615;
    *(_BYTE *)(v614 + 56) = 1;
    v891 = 0;
    v906 = (uint64_t **)v614;
    (*(void (**)(_QWORD, uint64_t ***))(**(_QWORD **)(v590 + 24) + 40))(*(_QWORD *)(v590 + 24), &v906);
    v617 = v906;
    v906 = 0;
    if (v617)
    {
      v618 = (std::__shared_weak_count *)v617[4];
      if (v618)
      {
        v619 = (unint64_t *)&v618->__shared_owners_;
        do
          v620 = __ldaxr(v619);
        while (__stlxr(v620 - 1, v619));
        if (!v620)
        {
          ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
          std::__shared_weak_count::__release_weak(v618);
        }
      }
      v621 = (std::__shared_weak_count *)v617[2];
      if (v621)
      {
        v622 = (unint64_t *)&v621->__shared_owners_;
        do
          v623 = __ldaxr(v622);
        while (__stlxr(v623 - 1, v622));
        if (!v623)
        {
          ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
          std::__shared_weak_count::__release_weak(v621);
        }
      }
      MEMORY[0x212BC6398](v617, 0x10F0C40B62ED6C6);
      v624 = v891;
      v891 = 0;
      if (v624)
      {
        v625 = (std::__shared_weak_count *)*((_QWORD *)v624 + 4);
        if (v625)
        {
          v626 = (unint64_t *)&v625->__shared_owners_;
          do
            v627 = __ldaxr(v626);
          while (__stlxr(v627 - 1, v626));
          if (!v627)
          {
            ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
            std::__shared_weak_count::__release_weak(v625);
          }
        }
        v628 = (std::__shared_weak_count *)*((_QWORD *)v624 + 2);
        if (v628)
        {
          v629 = (unint64_t *)&v628->__shared_owners_;
          do
            v630 = __ldaxr(v629);
          while (__stlxr(v630 - 1, v629));
          if (!v630)
          {
            ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
            std::__shared_weak_count::__release_weak(v628);
          }
        }
        MEMORY[0x212BC6398](v624, 0x10F0C40B62ED6C6);
      }
    }
    v631 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v632 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v633 = __ldaxr(v632);
      while (__stlxr(v633 - 1, v632));
      if (!v633)
      {
        ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
        std::__shared_weak_count::__release_weak(v631);
      }
    }
    v634 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v635 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v636 = __ldaxr(v635);
      while (__stlxr(v636 - 1, v635));
      if (!v636)
      {
        ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
        std::__shared_weak_count::__release_weak(v634);
      }
    }
  }
  else
  {
    os_log_type_enabled(v605, OS_LOG_TYPE_INFO);
    *(_WORD *)__p = 0;
    v637 = (void *)_os_log_send_and_compose_impl();
    if (v637)
      free(v637);
  }
  if (v588)
  {
    sub_20E8C003C((uint64_t)&v898, "Query frames histogram");
    sub_20E863570((uint64_t)&v898);
  }
  sub_20E863570((uint64_t)&v898);
  v638 = v905;
  if (v905)
  {
    v639 = (unint64_t *)&v905->__shared_owners_;
    do
      v640 = __ldaxr(v639);
    while (__stlxr(v640 - 1, v639));
    if (!v640)
    {
      ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
      std::__shared_weak_count::__release_weak(v638);
    }
  }
LABEL_901:
  sub_20F2D5758(&v876);
  sub_20F2D5664(&v888);
  if (**((int **)v888 + 7) > 3)
    goto LABEL_992;
  v641 = *((unsigned __int8 *)v888 + 72);
  v642 = sub_20E8C31DC((uint64_t)v888, "OSLogSurrogateAppender", 1, 0);
  v643 = v642;
  if (!v641 && !v642)
    goto LABEL_992;
  *(_QWORD *)&v898 = &v888;
  *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
  rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v900) = 3;
  v901 = "unknown file";
  v902 = 199;
  v905 = 0;
  v903 = "unknown function";
  v904 = 0;
  v644 = *(_QWORD *)v898;
  v645 = *(_QWORD *)v898 + 16;
  if (*(char *)(*(_QWORD *)v898 + 39) < 0)
  {
    v647 = *(const char **)(v644 + 16);
    v646 = *(_QWORD *)(v644 + 24);
  }
  else
  {
    v646 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
    v647 = (const char *)(*(_QWORD *)v898 + 16);
  }
  v648 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v648 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v649 = byte_254A4A4F8;
  else
    v649 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v650 = byte_254A4A4F8[23];
  else
    v650 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v649, v647);
  v651 = &__p[8];
  if (v650 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v650 >= 0x17)
  {
    v652 = (v650 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v650 | 7) != 0x17)
      v652 = v650 | 7;
    v653 = v652 + 1;
    v651 = operator new(v652 + 1);
    *(_QWORD *)&__p[24] = v653 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v651;
    *(_QWORD *)&__p[16] = v650;
    goto LABEL_921;
  }
  __p[31] = v650;
  if (v650)
LABEL_921:
    memmove(v651, v649, v650);
  v651[v650] = 0;
  __p[32] = 1;
  v654 = &__p[40];
  if (v646 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v646 >= 0x17)
  {
    v655 = (v646 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v646 | 7) != 0x17)
      v655 = v646 | 7;
    v656 = v655 + 1;
    v654 = operator new(v655 + 1);
    *(_QWORD *)&__p[56] = v656 | 0x8000000000000000;
    *(_QWORD *)&__p[40] = v654;
    *(_QWORD *)&__p[48] = v646;
  }
  else
  {
    __p[63] = v646;
    if (!v646)
      goto LABEL_930;
  }
  memmove(v654, v647, v646);
LABEL_930:
  v654[v646] = 0;
  __p[64] = 1;
  v657 = *(NSObject **)__p;
  if ((__p[63] & 0x80000000) != 0)
    operator delete(*(void **)&__p[40]);
  if (__p[32] && (__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v643 && *(_QWORD *)(v643 + 24))
  {
    v658 = _os_log_pack_size();
    v659 = (std::__shared_weak_count_vtbl *)operator new(v658, (std::align_val_t)8uLL);
    v660 = (std::__shared_weak_count *)operator new();
    v661 = v660;
    v660->__shared_owners_ = 0;
    v662 = (unint64_t *)&v660->__shared_owners_;
    v660->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v660->__shared_weak_owners_ = 0;
    v660[1].__vftable = v659;
    *(_QWORD *)__p = v659;
    *(_QWORD *)&__p[8] = v659;
    *(_QWORD *)&__p[16] = v660;
    do
      v663 = __ldxr(v662);
    while (__stxr(v663 + 1, v662));
    memset(&__p[24], 0, 24);
    do
      v664 = __ldaxr(v662);
    while (__stlxr(v664 - 1, v662));
    if (!v664)
    {
      ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
      std::__shared_weak_count::__release_weak(v661);
    }
    v665 = *(_QWORD *)__p;
    *(_WORD *)_os_log_pack_fill() = 0;
    v666 = operator new();
    v667 = *(unsigned __int8 *)(v644 + 39);
    if ((v667 & 0x80u) == 0)
      v668 = v645;
    else
      v668 = *(_QWORD *)(v644 + 16);
    if ((v667 & 0x80u) != 0)
      v667 = *(_QWORD *)(v644 + 24);
    *(_QWORD *)v666 = v665;
    *(_OWORD *)(v666 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v666 + 24) = *(_OWORD *)&__p[24];
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    *(_QWORD *)(v666 + 40) = v668;
    *(_QWORD *)(v666 + 48) = v667;
    *(_BYTE *)(v666 + 56) = 1;
    v891 = 0;
    v906 = (uint64_t **)v666;
    (*(void (**)(_QWORD, uint64_t ***))(**(_QWORD **)(v643 + 24) + 40))(*(_QWORD *)(v643 + 24), &v906);
    v669 = v906;
    v906 = 0;
    if (v669)
    {
      v670 = (std::__shared_weak_count *)v669[4];
      if (v670)
      {
        v671 = (unint64_t *)&v670->__shared_owners_;
        do
          v672 = __ldaxr(v671);
        while (__stlxr(v672 - 1, v671));
        if (!v672)
        {
          ((void (*)(std::__shared_weak_count *))v670->__on_zero_shared)(v670);
          std::__shared_weak_count::__release_weak(v670);
        }
      }
      v673 = (std::__shared_weak_count *)v669[2];
      if (v673)
      {
        v674 = (unint64_t *)&v673->__shared_owners_;
        do
          v675 = __ldaxr(v674);
        while (__stlxr(v675 - 1, v674));
        if (!v675)
        {
          ((void (*)(std::__shared_weak_count *))v673->__on_zero_shared)(v673);
          std::__shared_weak_count::__release_weak(v673);
        }
      }
      MEMORY[0x212BC6398](v669, 0x10F0C40B62ED6C6);
      v676 = v891;
      v891 = 0;
      if (v676)
      {
        v677 = (std::__shared_weak_count *)*((_QWORD *)v676 + 4);
        if (v677)
        {
          v678 = (unint64_t *)&v677->__shared_owners_;
          do
            v679 = __ldaxr(v678);
          while (__stlxr(v679 - 1, v678));
          if (!v679)
          {
            ((void (*)(std::__shared_weak_count *))v677->__on_zero_shared)(v677);
            std::__shared_weak_count::__release_weak(v677);
          }
        }
        v680 = (std::__shared_weak_count *)*((_QWORD *)v676 + 2);
        if (v680)
        {
          v681 = (unint64_t *)&v680->__shared_owners_;
          do
            v682 = __ldaxr(v681);
          while (__stlxr(v682 - 1, v681));
          if (!v682)
          {
            ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
            std::__shared_weak_count::__release_weak(v680);
          }
        }
        MEMORY[0x212BC6398](v676, 0x10F0C40B62ED6C6);
      }
    }
    v683 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v684 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v685 = __ldaxr(v684);
      while (__stlxr(v685 - 1, v684));
      if (!v685)
      {
        ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
        std::__shared_weak_count::__release_weak(v683);
      }
    }
    v686 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v687 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v688 = __ldaxr(v687);
      while (__stlxr(v688 - 1, v687));
      if (!v688)
      {
        ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
        std::__shared_weak_count::__release_weak(v686);
      }
    }
  }
  else
  {
    os_log_type_enabled(v657, OS_LOG_TYPE_INFO);
    *(_WORD *)__p = 0;
    v689 = (void *)_os_log_send_and_compose_impl();
    if (v689)
      free(v689);
  }
  if (v641)
  {
    sub_20E8C003C((uint64_t)&v898, "");
    sub_20E863570((uint64_t)&v898);
  }
  sub_20E863570((uint64_t)&v898);
  v690 = v905;
  if (v905)
  {
    v691 = (unint64_t *)&v905->__shared_owners_;
    do
      v692 = __ldaxr(v691);
    while (__stlxr(v692 - 1, v691));
    if (!v692)
    {
      ((void (*)(std::__shared_weak_count *))v690->__on_zero_shared)(v690);
      std::__shared_weak_count::__release_weak(v690);
    }
  }
LABEL_992:
  sub_20F2D5664(&v888);
  if (**((int **)v888 + 7) > 3)
    goto LABEL_1085;
  v693 = *((unsigned __int8 *)v888 + 72);
  v694 = sub_20E8C31DC((uint64_t)v888, "OSLogSurrogateAppender", 1, 0);
  v695 = v694;
  if (!v693 && v694 == 0)
    goto LABEL_1085;
  *(_QWORD *)&v898 = &v888;
  *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
  rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v900) = 3;
  v901 = "unknown file";
  v902 = 204;
  v905 = 0;
  v903 = "unknown function";
  v904 = 0;
  v697 = *(_QWORD *)v898;
  v698 = *(_QWORD *)v898 + 16;
  if (*(char *)(*(_QWORD *)v898 + 39) < 0)
  {
    v700 = *(const char **)(v697 + 16);
    v699 = *(_QWORD *)(v697 + 24);
  }
  else
  {
    v699 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
    v700 = (const char *)(*(_QWORD *)v898 + 16);
  }
  v701 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v701 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v702 = byte_254A4A4F8;
  else
    v702 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v703 = byte_254A4A4F8[23];
  else
    v703 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v702, v700);
  v704 = &__p[8];
  if (v703 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v703 >= 0x17)
  {
    v705 = (v703 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v703 | 7) != 0x17)
      v705 = v703 | 7;
    v706 = v705 + 1;
    v704 = operator new(v705 + 1);
    *(_QWORD *)&__p[24] = v706 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v704;
    *(_QWORD *)&__p[16] = v703;
    goto LABEL_1014;
  }
  __p[31] = v703;
  if (v703)
LABEL_1014:
    memmove(v704, v702, v703);
  v704[v703] = 0;
  __p[32] = 1;
  v707 = &__p[40];
  if (v699 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v699 >= 0x17)
  {
    v708 = (v699 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v699 | 7) != 0x17)
      v708 = v699 | 7;
    v709 = v708 + 1;
    v707 = operator new(v708 + 1);
    *(_QWORD *)&__p[56] = v709 | 0x8000000000000000;
    *(_QWORD *)&__p[40] = v707;
    *(_QWORD *)&__p[48] = v699;
  }
  else
  {
    __p[63] = v699;
    if (!v699)
      goto LABEL_1023;
  }
  memmove(v707, v700, v699);
LABEL_1023:
  v707[v699] = 0;
  __p[64] = 1;
  v710 = *(NSObject **)__p;
  if ((__p[63] & 0x80000000) != 0)
    operator delete(*(void **)&__p[40]);
  if (__p[32] && (__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v695 && *(_QWORD *)(v695 + 24))
  {
    v711 = _os_log_pack_size();
    v712 = (std::__shared_weak_count_vtbl *)operator new(v711, (std::align_val_t)8uLL);
    v713 = (std::__shared_weak_count *)operator new();
    v714 = v713;
    v713->__shared_owners_ = 0;
    v715 = (unint64_t *)&v713->__shared_owners_;
    v713->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v713->__shared_weak_owners_ = 0;
    v713[1].__vftable = v712;
    *(_QWORD *)__p = v712;
    *(_QWORD *)&__p[8] = v712;
    *(_QWORD *)&__p[16] = v713;
    do
      v716 = __ldxr(v715);
    while (__stxr(v716 + 1, v715));
    memset(&__p[24], 0, 24);
    do
      v717 = __ldaxr(v715);
    while (__stlxr(v717 - 1, v715));
    if (!v717)
    {
      ((void (*)(std::__shared_weak_count *))v713->__on_zero_shared)(v713);
      std::__shared_weak_count::__release_weak(v714);
    }
    v718 = *(_QWORD *)__p;
    v719 = _os_log_pack_fill();
    *(_DWORD *)v719 = 134218752;
    *(_QWORD *)(v719 + 4) = v837;
    *(_WORD *)(v719 + 12) = 2048;
    *(_QWORD *)(v719 + 14) = v810;
    *(_WORD *)(v719 + 22) = 2048;
    *(_QWORD *)(v719 + 24) = v836;
    *(_WORD *)(v719 + 32) = 2048;
    *(_QWORD *)(v719 + 34) = v835;
    v720 = operator new();
    v721 = *(unsigned __int8 *)(v697 + 39);
    if ((v721 & 0x80u) == 0)
      v722 = v698;
    else
      v722 = *(_QWORD *)(v697 + 16);
    if ((v721 & 0x80u) != 0)
      v721 = *(_QWORD *)(v697 + 24);
    *(_QWORD *)v720 = v718;
    *(_OWORD *)(v720 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v720 + 24) = *(_OWORD *)&__p[24];
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    *(_QWORD *)(v720 + 40) = v722;
    *(_QWORD *)(v720 + 48) = v721;
    *(_BYTE *)(v720 + 56) = 1;
    v891 = 0;
    v906 = (uint64_t **)v720;
    (*(void (**)(_QWORD, uint64_t ***))(**(_QWORD **)(v695 + 24) + 40))(*(_QWORD *)(v695 + 24), &v906);
    v723 = v906;
    v906 = 0;
    if (v723)
    {
      v724 = (std::__shared_weak_count *)v723[4];
      if (v724)
      {
        v725 = (unint64_t *)&v724->__shared_owners_;
        do
          v726 = __ldaxr(v725);
        while (__stlxr(v726 - 1, v725));
        if (!v726)
        {
          ((void (*)(std::__shared_weak_count *))v724->__on_zero_shared)(v724);
          std::__shared_weak_count::__release_weak(v724);
        }
      }
      v727 = (std::__shared_weak_count *)v723[2];
      if (v727)
      {
        v728 = (unint64_t *)&v727->__shared_owners_;
        do
          v729 = __ldaxr(v728);
        while (__stlxr(v729 - 1, v728));
        if (!v729)
        {
          ((void (*)(std::__shared_weak_count *))v727->__on_zero_shared)(v727);
          std::__shared_weak_count::__release_weak(v727);
        }
      }
      MEMORY[0x212BC6398](v723, 0x10F0C40B62ED6C6);
      v730 = v891;
      v891 = 0;
      if (v730)
      {
        v731 = (std::__shared_weak_count *)*((_QWORD *)v730 + 4);
        if (v731)
        {
          v732 = (unint64_t *)&v731->__shared_owners_;
          do
            v733 = __ldaxr(v732);
          while (__stlxr(v733 - 1, v732));
          if (!v733)
          {
            ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
            std::__shared_weak_count::__release_weak(v731);
          }
        }
        v734 = (std::__shared_weak_count *)*((_QWORD *)v730 + 2);
        if (v734)
        {
          v735 = (unint64_t *)&v734->__shared_owners_;
          do
            v736 = __ldaxr(v735);
          while (__stlxr(v736 - 1, v735));
          if (!v736)
          {
            ((void (*)(std::__shared_weak_count *))v734->__on_zero_shared)(v734);
            std::__shared_weak_count::__release_weak(v734);
          }
        }
        MEMORY[0x212BC6398](v730, 0x10F0C40B62ED6C6);
      }
    }
    v737 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v738 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v739 = __ldaxr(v738);
      while (__stlxr(v739 - 1, v738));
      if (!v739)
      {
        ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
        std::__shared_weak_count::__release_weak(v737);
      }
    }
    v740 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v741 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v742 = __ldaxr(v741);
      while (__stlxr(v742 - 1, v741));
      if (!v742)
      {
        ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
        std::__shared_weak_count::__release_weak(v740);
      }
    }
  }
  else
  {
    os_log_type_enabled(v710, OS_LOG_TYPE_INFO);
    *(_DWORD *)__p = 134218752;
    *(_QWORD *)&__p[4] = v837;
    *(_WORD *)&__p[12] = 2048;
    *(_QWORD *)&__p[14] = v810;
    *(_WORD *)&__p[22] = 2048;
    *(_QWORD *)&__p[24] = v836;
    *(_WORD *)&__p[32] = 2048;
    *(_QWORD *)&__p[34] = v835;
    v743 = (void *)_os_log_send_and_compose_impl();
    if (v743)
      free(v743);
  }
  if (v693)
  {
    sub_20E8C003C((uint64_t)&v898, "Rematching processed %zu image pairs (%zu rev-skipped), allocated %zu track IDs, generated %zu new tracks.", v837, v810, v836, v835);
    sub_20E863570((uint64_t)&v898);
  }
  sub_20E863570((uint64_t)&v898);
  v744 = v905;
  if (v905)
  {
    v745 = (unint64_t *)&v905->__shared_owners_;
    do
      v746 = __ldaxr(v745);
    while (__stlxr(v746 - 1, v745));
    if (!v746)
    {
      ((void (*)(std::__shared_weak_count *))v744->__on_zero_shared)(v744);
      std::__shared_weak_count::__release_weak(v744);
    }
  }
LABEL_1085:
  sub_20F2D5664(&v888);
  if (**((int **)v888 + 7) <= 3)
  {
    v747 = *((unsigned __int8 *)v888 + 72);
    v748 = sub_20E8C31DC((uint64_t)v888, "OSLogSurrogateAppender", 1, 0);
    v749 = v748;
    if (v747 || v748 != 0)
    {
      *(_QWORD *)&v898 = &v888;
      *((std::chrono::steady_clock::time_point *)&v898 + 1) = std::chrono::steady_clock::now();
      rep = (_BYTE *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v900) = 3;
      v901 = "unknown file";
      v902 = 209;
      v905 = 0;
      v903 = "unknown function";
      v904 = 0;
      v751 = *(_QWORD *)v898;
      v752 = *(_QWORD *)v898 + 16;
      if (*(char *)(*(_QWORD *)v898 + 39) < 0)
      {
        v754 = *(const char **)(v751 + 16);
        v753 = *(_QWORD *)(v751 + 24);
      }
      else
      {
        v753 = *(unsigned __int8 *)(*(_QWORD *)v898 + 39);
        v754 = (const char *)(*(_QWORD *)v898 + 16);
      }
      v755 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v755 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if (__p[24] && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v756 = byte_254A4A4F8;
      else
        v756 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v757 = byte_254A4A4F8[23];
      else
        v757 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)__p = os_log_create(v756, v754);
      v758 = &__p[8];
      if (v757 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v757 >= 0x17)
      {
        v759 = (v757 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v757 | 7) != 0x17)
          v759 = v757 | 7;
        v760 = v759 + 1;
        v758 = operator new(v759 + 1);
        *(_QWORD *)&__p[24] = v760 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v758;
        *(_QWORD *)&__p[16] = v757;
      }
      else
      {
        __p[31] = v757;
        if (!v757)
        {
LABEL_1108:
          v758[v757] = 0;
          __p[32] = 1;
          v761 = &__p[40];
          if (v753 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v753 >= 0x17)
          {
            v762 = (v753 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v753 | 7) != 0x17)
              v762 = v753 | 7;
            v763 = v762 + 1;
            v761 = operator new(v762 + 1);
            *(_QWORD *)&__p[56] = v763 | 0x8000000000000000;
            *(_QWORD *)&__p[40] = v761;
            *(_QWORD *)&__p[48] = v753;
          }
          else
          {
            __p[63] = v753;
            if (!v753)
              goto LABEL_1116;
          }
          memmove(v761, v754, v753);
LABEL_1116:
          v761[v753] = 0;
          __p[64] = 1;
          v764 = *(NSObject **)__p;
          if ((__p[63] & 0x80000000) != 0)
            operator delete(*(void **)&__p[40]);
          if (__p[32] && (__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v749 && *(_QWORD *)(v749 + 24))
          {
            v765 = _os_log_pack_size();
            v766 = (std::__shared_weak_count_vtbl *)operator new(v765, (std::align_val_t)8uLL);
            v767 = (std::__shared_weak_count *)operator new();
            v768 = v767;
            v767->__shared_owners_ = 0;
            v769 = (unint64_t *)&v767->__shared_owners_;
            v767->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v767->__shared_weak_owners_ = 0;
            v767[1].__vftable = v766;
            *(_QWORD *)__p = v766;
            *(_QWORD *)&__p[8] = v766;
            *(_QWORD *)&__p[16] = v767;
            do
              v770 = __ldxr(v769);
            while (__stxr(v770 + 1, v769));
            memset(&__p[24], 0, 24);
            do
              v771 = __ldaxr(v769);
            while (__stlxr(v771 - 1, v769));
            if (!v771)
            {
              ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
              std::__shared_weak_count::__release_weak(v768);
            }
            v772 = *(_QWORD *)__p;
            v773 = _os_log_pack_fill();
            *(_DWORD *)v773 = 134218752;
            *(double *)(v773 + 4) = v186;
            *(_WORD *)(v773 + 12) = 2048;
            *(double *)(v773 + 14) = v185;
            *(_WORD *)(v773 + 22) = 2048;
            *(double *)(v773 + 24) = v184;
            *(_WORD *)(v773 + 32) = 2048;
            *(double *)(v773 + 34) = v183;
            v774 = operator new();
            v775 = *(unsigned __int8 *)(v751 + 39);
            if ((v775 & 0x80u) == 0)
              v776 = v752;
            else
              v776 = *(_QWORD *)(v751 + 16);
            if ((v775 & 0x80u) != 0)
              v775 = *(_QWORD *)(v751 + 24);
            *(_QWORD *)v774 = v772;
            *(_OWORD *)(v774 + 8) = *(_OWORD *)&__p[8];
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            *(_OWORD *)(v774 + 24) = *(_OWORD *)&__p[24];
            *(_QWORD *)&__p[24] = 0;
            *(_QWORD *)&__p[32] = 0;
            *(_QWORD *)(v774 + 40) = v776;
            *(_QWORD *)(v774 + 48) = v775;
            *(_BYTE *)(v774 + 56) = 1;
            v891 = 0;
            v906 = (uint64_t **)v774;
            (*(void (**)(_QWORD, uint64_t ***))(**(_QWORD **)(v749 + 24) + 40))(*(_QWORD *)(v749 + 24), &v906);
            v777 = v906;
            v906 = 0;
            if (v777)
            {
              v778 = (std::__shared_weak_count *)v777[4];
              if (v778)
              {
                v779 = (unint64_t *)&v778->__shared_owners_;
                do
                  v780 = __ldaxr(v779);
                while (__stlxr(v780 - 1, v779));
                if (!v780)
                {
                  ((void (*)(std::__shared_weak_count *))v778->__on_zero_shared)(v778);
                  std::__shared_weak_count::__release_weak(v778);
                }
              }
              v781 = (std::__shared_weak_count *)v777[2];
              if (v781)
              {
                v782 = (unint64_t *)&v781->__shared_owners_;
                do
                  v783 = __ldaxr(v782);
                while (__stlxr(v783 - 1, v782));
                if (!v783)
                {
                  ((void (*)(std::__shared_weak_count *))v781->__on_zero_shared)(v781);
                  std::__shared_weak_count::__release_weak(v781);
                }
              }
              MEMORY[0x212BC6398](v777, 0x10F0C40B62ED6C6);
              v784 = v891;
              v891 = 0;
              if (v784)
              {
                v785 = (std::__shared_weak_count *)*((_QWORD *)v784 + 4);
                if (v785)
                {
                  v786 = (unint64_t *)&v785->__shared_owners_;
                  do
                    v787 = __ldaxr(v786);
                  while (__stlxr(v787 - 1, v786));
                  if (!v787)
                  {
                    ((void (*)(std::__shared_weak_count *))v785->__on_zero_shared)(v785);
                    std::__shared_weak_count::__release_weak(v785);
                  }
                }
                v788 = (std::__shared_weak_count *)*((_QWORD *)v784 + 2);
                if (v788)
                {
                  v789 = (unint64_t *)&v788->__shared_owners_;
                  do
                    v790 = __ldaxr(v789);
                  while (__stlxr(v790 - 1, v789));
                  if (!v790)
                  {
                    ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
                    std::__shared_weak_count::__release_weak(v788);
                  }
                }
                MEMORY[0x212BC6398](v784, 0x10F0C40B62ED6C6);
              }
            }
            v791 = *(std::__shared_weak_count **)&__p[32];
            if (*(_QWORD *)&__p[32])
            {
              v792 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
              do
                v793 = __ldaxr(v792);
              while (__stlxr(v793 - 1, v792));
              if (!v793)
              {
                ((void (*)(std::__shared_weak_count *))v791->__on_zero_shared)(v791);
                std::__shared_weak_count::__release_weak(v791);
              }
            }
            v794 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v795 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v796 = __ldaxr(v795);
              while (__stlxr(v796 - 1, v795));
              if (!v796)
              {
                ((void (*)(std::__shared_weak_count *))v794->__on_zero_shared)(v794);
                std::__shared_weak_count::__release_weak(v794);
              }
            }
          }
          else
          {
            os_log_type_enabled(v764, OS_LOG_TYPE_INFO);
            *(_DWORD *)__p = 134218752;
            *(double *)&__p[4] = v186;
            *(_WORD *)&__p[12] = 2048;
            *(double *)&__p[14] = v185;
            *(_WORD *)&__p[22] = 2048;
            *(double *)&__p[24] = v184;
            *(_WORD *)&__p[32] = 2048;
            *(double *)&__p[34] = v183;
            v797 = (void *)_os_log_send_and_compose_impl();
            if (v797)
              free(v797);
          }
          if (v747)
          {
            sub_20E8C003C((uint64_t)&v898, "It took %f sec to find the closest frames, %f sec to look up pose-refs, %f sec to allocate new track IDs and %f for keyframe matching", v186, v185, v184, v183);
            sub_20E863570((uint64_t)&v898);
          }
          sub_20E863570((uint64_t)&v898);
          v798 = v905;
          if (v905)
          {
            v799 = (unint64_t *)&v905->__shared_owners_;
            do
              v800 = __ldaxr(v799);
            while (__stlxr(v800 - 1, v799));
            if (!v800)
            {
              ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
              std::__shared_weak_count::__release_weak(v798);
            }
          }
          goto LABEL_1178;
        }
      }
      memmove(v758, v756, v757);
      goto LABEL_1108;
    }
  }
LABEL_1178:
  sub_20E9BCAA8(v877);
  sub_20E9BCAA8(v880);
  if (v882)
  {
    v883 = (char *)v882;
    operator delete(v882);
  }
  sub_20E9BCAA8(v886);
}

void sub_20F2D4FA4(_Unwind_Exception *a1)
{
  void *v2;

  if (LOBYTE(STACK[0x428]) && SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x470]);
  sub_20E9BCAA8((_QWORD *)STACK[0x360]);
  sub_20E9BCAA8((_QWORD *)STACK[0x378]);
  v2 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20E9BCAA8((_QWORD *)STACK[0x3A8]);
  _Unwind_Resume(a1);
}

void sub_20F2D5664(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68858);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68858))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68850);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68858);
  }
  *a1 = qword_254A68850;
}

void sub_20F2D5700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68858);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68858);
  _Unwind_Resume(a1);
}

void sub_20F2D5758(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  const char *v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  const char *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  const char *v86;
  uint64_t v87;
  int v88;
  _QWORD v89[3];
  int v90;
  const char *v91;
  int v92;
  const char *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  void *__p[2];
  std::__shared_weak_count *v98;
  char *v99;
  std::__shared_weak_count *v100;
  _QWORD *v101;
  __int128 v102;
  _BYTE v103[40];
  void *v104[2];
  unint64_t v105;
  char v106;
  _QWORD v107[5];

  v107[2] = *MEMORY[0x24BDAC8D0];
  v1 = a1 + 1;
  v2 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v3 = 1;
    v4 = (_QWORD *)*a1;
    do
    {
      if (v3 <= v4[5])
        v3 = v4[5];
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v1);
    v85 = v3;
    v84 = a1 + 1;
    do
    {
      v8 = *((_DWORD *)v2 + 8);
      v9 = v2[5];
      sub_20F2D5664(&v96);
      if (**(int **)(v96 + 56) > 3
        || (v10 = *(unsigned __int8 *)(v96 + 72),
            v11 = *(_BYTE *)(v96 + 72) != 0,
            v12 = sub_20E8C31DC(v96, "OSLogSurrogateAppender", 1, 0),
            ((v12 == 0) & ~v11) != 0))
      {
LABEL_126:
        v82 = (_QWORD *)v2[1];
        if (!v82)
          goto LABEL_130;
        goto LABEL_127;
      }
      v88 = v10;
      v89[0] = &v96;
      v89[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v89[2] = std::chrono::system_clock::now().__d_.__rep_;
      v90 = 3;
      v91 = "unknown file";
      v92 = 48;
      v93 = "unknown function";
      v94 = 0;
      v95 = 0;
      v13 = *(_QWORD *)v89[0];
      v14 = (const char *)(*(_QWORD *)v89[0] + 16);
      v86 = v14;
      if (*(char *)(*(_QWORD *)v89[0] + 39) < 0)
      {
        v14 = *(const char **)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v87 = *(_QWORD *)v89[0];
        v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v17 & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        v15 = *(unsigned __int8 *)(*(_QWORD *)v89[0] + 39);
        v87 = *(_QWORD *)v89[0];
        v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v16 & 1) != 0)
          goto LABEL_20;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if ((_BYTE)v99 && SHIBYTE(v98) < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_20:
      if (byte_254A4A4F8[23] >= 0)
        v18 = byte_254A4A4F8;
      else
        v18 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v19 = byte_254A4A4F8[23];
      else
        v19 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v103 = os_log_create(v18, v14);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v19 >= 0x17)
      {
        v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v21 = v19 | 7;
        v22 = v21 + 1;
        v20 = operator new(v21 + 1);
        *(_QWORD *)&v103[16] = v19;
        *(_QWORD *)&v103[24] = v22 | 0x8000000000000000;
        *(_QWORD *)&v103[8] = v20;
LABEL_33:
        memmove(v20, v18, v19);
        goto LABEL_34;
      }
      v103[31] = v19;
      v20 = &v103[8];
      if (v19)
        goto LABEL_33;
LABEL_34:
      v20[v19] = 0;
      v103[32] = 1;
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v15 >= 0x17)
      {
        v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v25 = v15 | 7;
        v26 = v25 + 1;
        v23 = (void **)operator new(v25 + 1);
        v104[1] = (void *)v15;
        v105 = v26 | 0x8000000000000000;
        v104[0] = v23;
      }
      else
      {
        HIBYTE(v105) = v15;
        v23 = v104;
        if (!v15)
        {
          LOBYTE(v104[0]) = 0;
          v106 = 1;
          v24 = *(NSObject **)v103;
          if ((SHIBYTE(v105) & 0x80000000) == 0)
            goto LABEL_38;
          goto LABEL_44;
        }
      }
      memmove(v23, v14, v15);
      *((_BYTE *)v23 + v15) = 0;
      v106 = 1;
      v24 = *(NSObject **)v103;
      if ((SHIBYTE(v105) & 0x80000000) == 0)
      {
LABEL_38:
        if (!v103[32])
          goto LABEL_47;
        goto LABEL_45;
      }
LABEL_44:
      operator delete(v104[0]);
      if (!v103[32])
        goto LABEL_47;
LABEL_45:
      if ((v103[31] & 0x80000000) != 0)
        operator delete(*(void **)&v103[8]);
LABEL_47:
      if (*(_QWORD *)v103)
        os_release(*(void **)v103);
      v27 = 20 * v9 / v85;
      v28 = &asc_2102A0AC8[-v27 + 20];
      if (v12 && *(_QWORD *)(v12 + 24))
      {
        v29 = _os_log_pack_size();
        v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
        v31 = (std::__shared_weak_count *)operator new();
        v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v31->__shared_owners_ = 0;
        v31->__shared_weak_owners_ = 0;
        v31[1].__vftable = v30;
        __p[0] = v30;
        __p[1] = v30;
        v98 = v31;
        v99 = 0;
        v100 = 0;
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v27 >= 0x17)
        {
          v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v34 = v27 | 7;
          v35 = v34 + 1;
          v32 = operator new(v34 + 1);
          *(_QWORD *)&v102 = 20 * v9 / v85;
          *((_QWORD *)&v102 + 1) = v35 | 0x8000000000000000;
          v101 = v32;
        }
        else
        {
          HIBYTE(v102) = 20 * v9 / v85;
          v32 = &v101;
          if (v85 > 20 * v9)
            goto LABEL_62;
        }
        memcpy(v32, &asc_2102A0AC8[-v27 + 20], v27);
LABEL_62:
        *((_BYTE *)v32 + v27) = 0;
        v36 = v101;
        v107[0] = v102;
        *(_QWORD *)((char *)v107 + 7) = *(_QWORD *)((char *)&v102 + 7);
        v37 = HIBYTE(v102);
        v38 = operator new(0x40uLL);
        v38[1] = 0;
        v38[2] = 0;
        v38[3] = off_24C9FD068;
        *v38 = &off_24C9FD018;
        v39 = v107[0];
        v38[4] = v36;
        v38[5] = v39;
        *(_QWORD *)((char *)v38 + 47) = *(_QWORD *)((char *)v107 + 7);
        *((_BYTE *)v38 + 55) = v37;
        v107[0] = 0;
        *(_QWORD *)((char *)v107 + 7) = 0;
        v40 = v100;
        v99 = (char *)(v38 + 3);
        v100 = (std::__shared_weak_count *)v38;
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        *(_OWORD *)v103 = *(_OWORD *)__p;
        v43 = v99;
        *(_QWORD *)&v103[16] = v98;
        if (v98)
        {
          v44 = (unint64_t *)&v98->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = v100;
        *(_QWORD *)&v103[24] = v43;
        *(_QWORD *)&v103[32] = v100;
        if (v100)
        {
          v47 = (unint64_t *)&v100->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v104[0] = v43;
          do
            v49 = __ldaxr(v47);
          while (__stlxr(v49 - 1, v47));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        else
        {
          v104[0] = v43;
        }
        v50 = v98;
        if (v98)
        {
          v51 = (unint64_t *)&v98->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = *(_QWORD *)v103;
        if (*((char *)v104[0] + 31) >= 0)
          v54 = (char *)v104[0] + 8;
        else
          v54 = (char *)*((_QWORD *)v104[0] + 1);
        v55 = _os_log_pack_fill();
        *(_DWORD *)v55 = 67109634;
        *(_DWORD *)(v55 + 4) = v8;
        *(_WORD *)(v55 + 8) = 2080;
        *(_QWORD *)(v55 + 10) = v54;
        *(_WORD *)(v55 + 18) = 2048;
        *(_QWORD *)(v55 + 20) = v9;
        v56 = (char *)operator new();
        v57 = *(unsigned __int8 *)(v87 + 39);
        v58 = v86;
        if ((v57 & 0x80u) != 0)
        {
          v58 = *(const char **)(v87 + 16);
          v57 = *(_QWORD *)(v87 + 24);
        }
        *(_QWORD *)v56 = v53;
        *(_OWORD *)(v56 + 8) = *(_OWORD *)&v103[8];
        *(_QWORD *)&v103[8] = 0;
        *(_QWORD *)&v103[16] = 0;
        *(_OWORD *)(v56 + 24) = *(_OWORD *)&v103[24];
        *(_QWORD *)&v103[24] = 0;
        *(_QWORD *)&v103[32] = 0;
        *((_QWORD *)v56 + 5) = v58;
        *((_QWORD *)v56 + 6) = v57;
        v56[56] = 1;
        v101 = 0;
        __p[0] = v56;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), __p);
        v59 = __p[0];
        __p[0] = 0;
        if (v59)
        {
          v60 = (std::__shared_weak_count *)*((_QWORD *)v59 + 4);
          if (v60)
          {
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v63 = (std::__shared_weak_count *)*((_QWORD *)v59 + 2);
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          MEMORY[0x212BC6398](v59, 0x10F0C40B62ED6C6);
          v66 = v101;
          v101 = 0;
          if (v66)
          {
            v67 = (std::__shared_weak_count *)v66[4];
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v70 = (std::__shared_weak_count *)v66[2];
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            MEMORY[0x212BC6398](v66, 0x10F0C40B62ED6C6);
          }
        }
        v73 = *(std::__shared_weak_count **)&v103[32];
        v1 = v84;
        if (*(_QWORD *)&v103[32])
        {
          v74 = (unint64_t *)(*(_QWORD *)&v103[32] + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = *(std::__shared_weak_count **)&v103[16];
        if (*(_QWORD *)&v103[16])
        {
          v77 = (unint64_t *)(*(_QWORD *)&v103[16] + 8);
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
            if (!v88)
              goto LABEL_122;
LABEL_121:
            sub_20E8C003C((uint64_t)v89, "%5u: %-20s  (%zu)", v8, v28, v9);
            sub_20E863570((uint64_t)v89);
            goto LABEL_122;
          }
        }
        goto LABEL_120;
      }
      os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
      *(_DWORD *)v103 = 67109634;
      *(_DWORD *)&v103[4] = v8;
      *(_WORD *)&v103[8] = 2080;
      *(_QWORD *)&v103[10] = &asc_2102A0AC8[-v27 + 20];
      *(_WORD *)&v103[18] = 2048;
      *(_QWORD *)&v103[20] = v9;
      v33 = (void *)_os_log_send_and_compose_impl();
      v1 = v84;
      if (v33)
      {
        free(v33);
        if (!v88)
          goto LABEL_122;
        goto LABEL_121;
      }
LABEL_120:
      if (v88)
        goto LABEL_121;
LABEL_122:
      sub_20E863570((uint64_t)v89);
      v79 = v95;
      if (!v95)
        goto LABEL_126;
      v80 = (unint64_t *)&v95->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (v81)
        goto LABEL_126;
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
      v82 = (_QWORD *)v2[1];
      if (!v82)
      {
        do
        {
LABEL_130:
          v83 = (_QWORD *)v2[2];
          v7 = *v83 == (_QWORD)v2;
          v2 = v83;
        }
        while (!v7);
        goto LABEL_13;
      }
      do
      {
LABEL_127:
        v83 = v82;
        v82 = (_QWORD *)*v82;
      }
      while (v82);
LABEL_13:
      v2 = v83;
    }
    while (v83 != v1);
  }
}

void sub_20F2D619C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a43)
  {
    if (a42 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F2D61DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20E86E658((uint64_t)&a37);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F2D6248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  MEMORY[0x212BC6398](v27, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F2D6274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F2D6288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  if (*(char *)(v27 - 161) < 0)
    operator delete(*(void **)(v27 - 184));
  v29 = *(void **)(v27 - 192);
  if (v29)
    os_release(v29);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F2D6310(unint64_t *a1, int8x8_t **a2, int a3, int a4, char a5, int a6, double a7)
{
  int8x8_t **v8;
  int8x8_t *v9;
  int8x8_t *v10;
  uint64_t v11;
  int8x8_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  int8x8_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  int8x8_t **v29;
  int8x8_t *v30;
  int8x8_t *v31;
  _DWORD *v32;
  char *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  int8x8_t *v44;
  int8x8_t *v45;
  int8x8_t *v46;
  int8x8_t *v47;
  int8x8_t *v48;
  int8x8_t *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  const char *v55;
  size_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  unsigned int v61;
  _DWORD *v62;
  uint64_t *v63;
  int8x8_t *v64;
  int8x8_t *v65;
  unsigned __int8 v66;
  const char *v67;
  size_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  size_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  int v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  size_t v117;
  unsigned __int8 v118;
  const char *v119;
  size_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  size_t v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  int v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::chrono::steady_clock::time_point v164;
  int8x8_t *v165;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v166;
  double v167;
  double v168;
  double v169;
  double v170;
  __int128 v171;
  uint64_t *v172;
  float64x2_t **v174;
  unint64_t v175;
  float64x2_t v176;
  float64x2_t v178;
  double v179;
  float64x2_t v180;
  float64x2_t *v181;
  double v182;
  double v184;
  double v186;
  float64x2_t v188;
  double v192;
  float64x2_t v193;
  double v195;
  float64x2_t v196;
  double v198;
  float64x2_t *v199;
  float64x2_t v201;
  float64x2_t *v202;
  float64x2_t v203;
  float64x2_t v204;
  int8x8_t *v205;
  unsigned int v206;
  uint64_t *v207;
  uint64_t **v208;
  uint64_t **v209;
  unsigned int v210;
  _DWORD *v211;
  uint64_t *v212;
  std::chrono::steady_clock::time_point v213;
  char *v215;
  unsigned int v216;
  int v217;
  uint64_t v218;
  uint64_t *v219;
  unsigned int v220;
  uint64_t *v221;
  uint64_t **v222;
  uint64_t *v223;
  char *v224;
  int v225;
  uint64_t **v226;
  uint64_t **v227;
  int v228;
  int v229;
  unsigned int v230;
  unint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unint64_t v235;
  unsigned int v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  BOOL v240;
  uint64_t *v241;
  unsigned int v242;
  uint64_t *v243;
  unsigned int v244;
  unsigned int v245;
  BOOL v246;
  unint64_t v247;
  unsigned int v248;
  unsigned int v249;
  BOOL v250;
  unint64_t v251;
  _QWORD *v252;
  int8x8_t *v253;
  int8x8_t *v254;
  unint64_t v255;
  unsigned int v256;
  unint64_t v257;
  unint64_t v258;
  int8x8_t *v259;
  int8x8_t v260;
  unsigned int v261;
  BOOL v262;
  int8x8_t v263;
  std::__shared_weak_count *v264;
  int8x8_t v265;
  unint64_t *v266;
  unint64_t v267;
  int8x8_t v268;
  int v269;
  unsigned int v270;
  unint64_t v271;
  uint8x8_t v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  float64x2_t **v279;
  float64x2_t v280;
  float64x2_t v282;
  double v283;
  float64x2_t v284;
  float64x2_t *v285;
  double v286;
  double v288;
  double v290;
  float64x2_t v292;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v294;
  float64x2_t v295;
  double v297;
  float64x2_t v298;
  double v300;
  float64x2_t *v301;
  float64x2_t v303;
  float64x2_t *v304;
  float64x2_t v305;
  std::chrono::steady_clock::time_point v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  uint64_t *v312;
  unint64_t v313;
  uint64_t *v314;
  unint64_t v315;
  unsigned __int8 v316;
  uint64_t v317;
  uint64_t i;
  unsigned __int8 v319;
  uint64_t **v320;
  uint64_t **v321;
  unint64_t v322;
  _DWORD *v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  _BYTE *v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v336;
  char *v337;
  char *v338;
  uint64_t *v339;
  uint64_t v340;
  unint64_t v341;
  int8x8_t *v342;
  int8x8_t *v343;
  int8x8_t *v344;
  int8x8_t *v345;
  int8x8_t *v346;
  unint64_t v347;
  unint64_t v348;
  int8x8_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  std::chrono::steady_clock::time_point v354;
  uint64_t v355;
  double *v356;
  int8x8_t *v357;
  unsigned __int8 *v358;
  unsigned __int8 *v359;
  _QWORD *v360;
  uint64_t v361;
  std::chrono::steady_clock::time_point v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  int8x8_t *v367;
  int8x8_t *v368;
  int8x8_t *v369;
  int8x8_t *v370;
  int v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v375;
  uint64_t v376;
  size_t v377;
  const char *v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t **v381;
  uint64_t **v382;
  unsigned int v383;
  _DWORD *v384;
  uint64_t *v385;
  int8x8_t *v386;
  int8x8_t *v387;
  unsigned __int8 v388;
  const char *v389;
  size_t v390;
  _BYTE *v391;
  uint64_t v392;
  uint64_t v393;
  _BYTE *v394;
  uint64_t v395;
  uint64_t v396;
  NSObject *v397;
  size_t v398;
  std::__shared_weak_count_vtbl *v399;
  std::__shared_weak_count *v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  void *v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  void *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  int v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  size_t v438;
  const char *v439;
  unsigned __int8 v440;
  const char *v441;
  size_t v442;
  _BYTE *v443;
  uint64_t v444;
  uint64_t v445;
  _BYTE *v446;
  uint64_t v447;
  uint64_t v448;
  NSObject *v449;
  size_t v450;
  std::__shared_weak_count_vtbl *v451;
  std::__shared_weak_count *v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  char *v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  void *v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  void *v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  int v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v489;
  uint64_t v490;
  size_t v491;
  const char *v492;
  unsigned __int8 v493;
  const char *v494;
  size_t v495;
  _BYTE *v496;
  uint64_t v497;
  uint64_t v498;
  _BYTE *v499;
  uint64_t v500;
  uint64_t v501;
  NSObject *v502;
  size_t v503;
  std::__shared_weak_count_vtbl *v504;
  std::__shared_weak_count *v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  char *v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  void *v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  int v538;
  unint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  size_t v543;
  const char *v544;
  unsigned __int8 v545;
  const char *v546;
  size_t v547;
  _BYTE *v548;
  uint64_t v549;
  uint64_t v550;
  _BYTE *v551;
  uint64_t v552;
  uint64_t v553;
  NSObject *v554;
  size_t v555;
  std::__shared_weak_count_vtbl *v556;
  std::__shared_weak_count *v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  char *v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  void *v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  int v590;
  unint64_t v591;
  unint64_t v592;
  uint64_t v594;
  uint64_t v595;
  size_t v596;
  const char *v597;
  unsigned __int8 v598;
  const char *v599;
  size_t v600;
  _BYTE *v601;
  uint64_t v602;
  uint64_t v603;
  _BYTE *v604;
  uint64_t v605;
  uint64_t v606;
  NSObject *v607;
  size_t v608;
  std::__shared_weak_count_vtbl *v609;
  std::__shared_weak_count *v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  std::__shared_weak_count *v624;
  unint64_t *v625;
  unint64_t v626;
  char *v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  void *v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  int v644;
  unint64_t v645;
  unint64_t v646;
  uint64_t v648;
  uint64_t v649;
  size_t v650;
  const char *v651;
  unsigned __int8 v652;
  const char *v653;
  size_t v654;
  _BYTE *v655;
  uint64_t v656;
  uint64_t v657;
  _BYTE *v658;
  uint64_t v659;
  uint64_t v660;
  NSObject *v661;
  size_t v662;
  std::__shared_weak_count_vtbl *v663;
  std::__shared_weak_count *v664;
  std::__shared_weak_count *v665;
  unint64_t *v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  std::__shared_weak_count *v678;
  unint64_t *v679;
  unint64_t v680;
  char *v681;
  std::__shared_weak_count *v682;
  unint64_t *v683;
  unint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  std::__shared_weak_count *v691;
  unint64_t *v692;
  unint64_t v693;
  void *v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  int8x8_t *v699;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v702;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v703;
  unint64_t v704;
  uint64_t v705;
  int v706;
  int v707;
  char *v710;
  char *v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  const char *v716;
  const char *v717;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v718;
  int v719;
  int v720;
  int8x8_t *v721;
  int8x8_t **v722;
  unsigned __int8 *v723;
  unsigned __int8 *v724;
  void *v725;
  char *v726;
  char *v727;
  float64x2_t v728;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  float64x2_t v730;
  double v731;
  float64x2_t v732;
  double v733;
  float64x2_t v734;
  uint64_t v735;
  uint64_t *v736;
  std::__shared_weak_count *v737;
  char *v738;
  char *v739;
  __int128 v740;
  uint64_t v741;
  uint64_t **v742;
  uint64_t *v743;
  uint64_t v744;
  uint64_t **v745;
  uint64_t *v746;
  uint64_t v747;
  void *__p;
  char *v749;
  char *v750;
  uint64_t **v751;
  uint64_t *v752;
  uint64_t v753;
  _BYTE v754[24];
  _BYTE *v755;
  char v756;
  _BYTE v757[24];
  _BYTE v758[24];
  float64x2_t v759;
  double v760;
  float64x2_t v761;
  float64_t v762;
  uint64_t v763;

  v763 = *MEMORY[0x24BDAC8D0];
  if (a2[5] == a2[6])
    return;
  v8 = a2;
  v753 = 0;
  v752 = 0;
  v751 = &v752;
  v9 = *a2;
  v10 = (int8x8_t *)(*a2)[6];
  v11 = (uint64_t)&(*a2)[7];
  if (v10 != (int8x8_t *)v11)
  {
    while (1)
    {
      v13 = v752;
      v14 = (unint64_t)v10[4];
      v15 = &v752;
      if (v752)
      {
        v16 = &v752;
        do
        {
          v17 = v13;
          v18 = v16;
          v19 = v13[4];
          if (v19 >= v14)
            v16 = (uint64_t **)v13;
          else
            ++v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
        v15 = &v752;
        if (v16 != &v752)
        {
          if (v19 < v14)
            v17 = (uint64_t *)v18;
          v15 = v16;
          if (v17[4] == v14)
            goto LABEL_17;
        }
      }
      v20 = (uint64_t)v8[1];
      *(int8x8_t *)v757 = v10[4];
      *(_DWORD *)&v757[8] = 0;
      v21 = sub_20F25BF64(v20, (unint64_t *)v757);
      v23 = v22;
      v24 = (uint64_t **)sub_20F2DF98C(&v751, v15, &v728, &__p, *(_QWORD *)&v10[4]);
      if (*v24)
      {
LABEL_17:
        v25 = (int8x8_t *)v10[1];
        if (v25)
          goto LABEL_22;
      }
      else
      {
        v26 = v24;
        v27 = (uint64_t *)operator new(0x38uLL);
        v27[4] = (uint64_t)v10[4];
        v27[5] = v21;
        v27[6] = v23;
        v28 = *(_QWORD *)&v728.f64[0];
        *v27 = 0;
        v27[1] = 0;
        v27[2] = v28;
        *v26 = v27;
        if (*v751)
        {
          v751 = (uint64_t **)*v751;
          v27 = *v26;
        }
        sub_20E868578(v752, v27);
        ++v753;
        v25 = (int8x8_t *)v10[1];
        if (v25)
        {
          do
          {
LABEL_22:
            v29 = (int8x8_t **)v25;
            v25 = (int8x8_t *)*v25;
          }
          while (v25);
          goto LABEL_5;
        }
      }
      do
      {
        v29 = (int8x8_t **)v10[2];
        _ZF = *v29 == v10;
        v10 = (int8x8_t *)v29;
      }
      while (!_ZF);
LABEL_5:
      v10 = (int8x8_t *)v29;
      if (v29 == (int8x8_t **)v11)
      {
        v30 = *v8;
        v10 = (int8x8_t *)(*v8)[6];
        __p = 0;
        v749 = 0;
        v750 = 0;
        v12 = v30 + 7;
        if (v10 == &v30[7])
          goto LABEL_56;
LABEL_30:
        while (2)
        {
          v31 = v10 + 4;
          if (sub_20F29DB88((_QWORD **)v8, *(_QWORD *)&v10[4], *(_QWORD *)&v10[5]))
          {
            v32 = v749;
            if (v749 < v750)
            {
              *(_OWORD *)v749 = *(_OWORD *)v31->i8;
              v33 = (char *)(v32 + 4);
              goto LABEL_49;
            }
            v34 = __p;
            v35 = (v749 - (_BYTE *)__p) >> 4;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 60)
              sub_20E867F44();
            v37 = v750 - (_BYTE *)__p;
            if ((v750 - (_BYTE *)__p) >> 3 > v36)
              v36 = v37 >> 3;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
              v38 = 0xFFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              if (v38 >> 60)
                sub_20E877A38();
              v39 = (char *)operator new(16 * v38);
              v40 = &v39[16 * v35];
              *(_OWORD *)v40 = *(_OWORD *)v31->i8;
              v41 = v40;
              if (v32 == v34)
              {
LABEL_47:
                v33 = v40 + 16;
                __p = v41;
                v749 = v40 + 16;
                v750 = &v39[16 * v38];
                if (v32)
                  goto LABEL_48;
                goto LABEL_49;
              }
            }
            else
            {
              v39 = 0;
              v40 = (char *)(16 * v35);
              *(_OWORD *)(16 * v35) = *(_OWORD *)v31->i8;
              v41 = (char *)(16 * v35);
              if (v32 == v34)
                goto LABEL_47;
            }
            do
            {
              v42 = *((_QWORD *)v32 - 2);
              v32 -= 4;
              v43 = v32[2];
              *((_QWORD *)v41 - 2) = v42;
              v41 -= 16;
              *((_DWORD *)v41 + 2) = v43;
            }
            while (v32 != v34);
            v32 = __p;
            v33 = v40 + 16;
            __p = v41;
            v749 = v40 + 16;
            v750 = &v39[16 * v38];
            if (v32)
LABEL_48:
              operator delete(v32);
LABEL_49:
            v749 = v33;
          }
          v44 = (int8x8_t *)v10[1];
          if (v44)
          {
            do
            {
              v45 = v44;
              v44 = (int8x8_t *)*v44;
            }
            while (v44);
          }
          else
          {
            do
            {
              v45 = (int8x8_t *)v10[2];
              _ZF = *v45 == (_QWORD)v10;
              v10 = v45;
            }
            while (!_ZF);
          }
          v10 = v45;
          if (v45 == v12)
            goto LABEL_56;
          continue;
        }
      }
    }
  }
  __p = 0;
  v749 = 0;
  v750 = 0;
  v12 = v9 + 7;
  if (v10 != &v9[7])
    goto LABEL_30;
LABEL_56:
  v746 = 0;
  v747 = 0;
  v745 = &v746;
  v722 = v8;
  if ((a5 & 1) == 0)
    goto LABEL_255;
  v743 = 0;
  v744 = 0;
  v742 = &v743;
  v46 = v8[1];
  v49 = (int8x8_t *)*v46;
  v47 = v46 + 1;
  v48 = v49;
  if (v49 != v47)
  {
    do
    {
      v57 = (*(_QWORD *)(*(_QWORD *)&v48[6] + 208) - *(_QWORD *)(*(_QWORD *)&v48[6] + 200)) >> 5;
      v58 = v743;
      v59 = &v743;
      v60 = &v743;
      if (v743)
      {
        while (1)
        {
          while (1)
          {
            v60 = (uint64_t **)v58;
            v61 = *((_DWORD *)v58 + 8);
            if (v61 <= v57)
              break;
            v58 = *v60;
            v59 = v60;
            if (!*v60)
              goto LABEL_73;
          }
          if (v61 >= v57)
            break;
          v58 = v60[1];
          if (!v58)
          {
            v59 = v60 + 1;
            goto LABEL_73;
          }
        }
        v60[5] = (uint64_t *)((char *)v60[5] + 1);
        v64 = (int8x8_t *)v48[1];
        if (v64)
        {
          do
          {
LABEL_78:
            v65 = v64;
            v64 = (int8x8_t *)*v64;
          }
          while (v64);
          goto LABEL_65;
        }
      }
      else
      {
LABEL_73:
        v62 = operator new(0x30uLL);
        v62[8] = v57;
        *((_QWORD *)v62 + 5) = 0;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
        *((_QWORD *)v62 + 2) = v60;
        *v59 = (uint64_t *)v62;
        v63 = (uint64_t *)v62;
        if (*v742)
        {
          v742 = (uint64_t **)*v742;
          v63 = *v59;
        }
        sub_20E868578(v743, v63);
        ++v744;
        ++*((_QWORD *)v62 + 5);
        v64 = (int8x8_t *)v48[1];
        if (v64)
          goto LABEL_78;
      }
      do
      {
        v65 = (int8x8_t *)v48[2];
        _ZF = *v65 == (_QWORD)v48;
        v48 = v65;
      }
      while (!_ZF);
LABEL_65:
      v48 = v65;
    }
    while (v65 != v47);
  }
  sub_20F2D5664(&v725);
  if (**((int **)v725 + 7) > 3)
    goto LABEL_166;
  v50 = *((unsigned __int8 *)v725 + 72);
  v51 = sub_20E8C31DC((uint64_t)v725, "OSLogSurrogateAppender", 1, 0);
  v52 = v51;
  _ZF = !v50 && v51 == 0;
  if (_ZF)
    goto LABEL_166;
  v719 = v50;
  *(_QWORD *)&v728.f64[0] = &v725;
  *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v730.f64[0]) = 3;
  *(_QWORD *)&v730.f64[1] = "unknown file";
  LODWORD(v731) = 97;
  v732.f64[1] = 0.0;
  v733 = 0.0;
  *(_QWORD *)&v732.f64[0] = "unknown function";
  v54 = **(_QWORD **)&v728.f64[0];
  v55 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
  v716 = v55;
  if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
  {
    v55 = *(const char **)(v54 + 16);
    v56 = *(_QWORD *)(v54 + 24);
  }
  else
  {
    v56 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
  }
  v66 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v757);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
    if (v758[0] && (v757[23] & 0x80000000) != 0)
      operator delete(*(void **)v757);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v67 = byte_254A4A4F8;
  else
    v67 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v68 = byte_254A4A4F8[23];
  else
    v68 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v757 = os_log_create(v67, v55);
  v69 = &v757[8];
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v68 >= 0x17)
  {
    v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v70 = v68 | 7;
    v71 = v70 + 1;
    v69 = operator new(v70 + 1);
    *(_QWORD *)&v757[16] = v68;
    *(_QWORD *)v758 = v71 | 0x8000000000000000;
    *(_QWORD *)&v757[8] = v69;
    goto LABEL_98;
  }
  v758[7] = v68;
  if (v68)
LABEL_98:
    memmove(v69, v67, v68);
  v69[v68] = 0;
  v758[8] = 1;
  v72 = &v758[16];
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v56 >= 0x17)
  {
    v73 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v73 = v56 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    *(_QWORD *)&v759.f64[0] = v56;
    *(_QWORD *)&v759.f64[1] = v74 | 0x8000000000000000;
    *(_QWORD *)&v758[16] = v72;
  }
  else
  {
    HIBYTE(v759.f64[1]) = v56;
    if (!v56)
      goto LABEL_107;
  }
  memmove(v72, v55, v56);
LABEL_107:
  v72[v56] = 0;
  LOBYTE(v760) = 1;
  v75 = *(NSObject **)v757;
  if (SHIBYTE(v759.f64[1]) < 0)
    operator delete(*(void **)&v758[16]);
  if (v758[8] && (v758[7] & 0x80000000) != 0)
    operator delete(*(void **)&v757[8]);
  if (*(_QWORD *)v757)
    os_release(*(void **)v757);
  if (v52 && *(_QWORD *)(v52 + 24))
  {
    v76 = _os_log_pack_size();
    v77 = (std::__shared_weak_count_vtbl *)operator new(v76, (std::align_val_t)8uLL);
    v78 = (std::__shared_weak_count *)operator new();
    v79 = v78;
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v77;
    *(_QWORD *)v757 = v77;
    *(_QWORD *)&v757[8] = v77;
    *(_QWORD *)&v757[16] = v78;
    do
      v81 = __ldxr(p_shared_owners);
    while (__stxr(v81 + 1, p_shared_owners));
    memset(v758, 0, sizeof(v758));
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v79);
    }
    v83 = *(_QWORD *)v757;
    *(_WORD *)_os_log_pack_fill() = 0;
    v84 = operator new();
    v85 = *(unsigned __int8 *)(v54 + 39);
    v86 = v716;
    if ((v85 & 0x80u) != 0)
    {
      v86 = *(const char **)(v54 + 16);
      v85 = *(_QWORD *)(v54 + 24);
    }
    *(_QWORD *)v84 = v83;
    *(_OWORD *)(v84 + 8) = *(_OWORD *)&v757[8];
    *(_QWORD *)&v757[8] = 0;
    *(_QWORD *)&v757[16] = 0;
    *(_OWORD *)(v84 + 24) = *(_OWORD *)v758;
    *(_QWORD *)v758 = 0;
    *(_QWORD *)&v758[8] = 0;
    *(_QWORD *)(v84 + 40) = v86;
    *(_QWORD *)(v84 + 48) = v85;
    *(_BYTE *)(v84 + 56) = 1;
    v738 = 0;
    *(_QWORD *)&v740 = v84;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v52 + 24) + 40))(*(_QWORD *)(v52 + 24), &v740);
    v87 = v740;
    *(_QWORD *)&v740 = 0;
    if (v87)
    {
      v88 = *(std::__shared_weak_count **)(v87 + 32);
      if (v88)
      {
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v91 = *(std::__shared_weak_count **)(v87 + 16);
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      MEMORY[0x212BC6398](v87, 0x10F0C40B62ED6C6);
      v94 = v738;
      v738 = 0;
      if (v94)
      {
        v95 = (std::__shared_weak_count *)*((_QWORD *)v94 + 4);
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v98 = (std::__shared_weak_count *)*((_QWORD *)v94 + 2);
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        MEMORY[0x212BC6398](v94, 0x10F0C40B62ED6C6);
      }
    }
    v101 = *(std::__shared_weak_count **)&v758[8];
    v102 = v719;
    if (*(_QWORD *)&v758[8])
    {
      v103 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v105 = *(std::__shared_weak_count **)&v757[16];
    if (*(_QWORD *)&v757[16])
    {
      v106 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
  }
  else
  {
    os_log_type_enabled(v75, OS_LOG_TYPE_INFO);
    *(_WORD *)v757 = 0;
    v108 = (void *)_os_log_send_and_compose_impl();
    v102 = v719;
    if (v108)
      free(v108);
  }
  if (v102)
  {
    sub_20E8C003C((uint64_t)&v728, "Track length histogram before rematch");
    sub_20E863570((uint64_t)&v728);
  }
  sub_20E863570((uint64_t)&v728);
  v109 = *(std::__shared_weak_count **)&v733;
  if (v733 != 0.0)
  {
    v110 = (unint64_t *)(*(_QWORD *)&v733 + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
LABEL_166:
  sub_20F2D5758(&v742);
  sub_20F2D5664(&v725);
  if (**((int **)v725 + 7) <= 3)
  {
    v112 = *((unsigned __int8 *)v725 + 72);
    v113 = sub_20E8C31DC((uint64_t)v725, "OSLogSurrogateAppender", 1, 0);
    v114 = v113;
    if (v112 || v113)
    {
      v720 = v112;
      *(_QWORD *)&v728.f64[0] = &v725;
      *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v730.f64[0]) = 3;
      *(_QWORD *)&v730.f64[1] = "unknown file";
      LODWORD(v731) = 99;
      v732.f64[1] = 0.0;
      v733 = 0.0;
      *(_QWORD *)&v732.f64[0] = "unknown function";
      v115 = **(_QWORD **)&v728.f64[0];
      v116 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
      v717 = v116;
      if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
      {
        v116 = *(const char **)(v115 + 16);
        v117 = *(_QWORD *)(v115 + 24);
      }
      else
      {
        v117 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
      }
      v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v757);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
        if (v758[0] && (v757[23] & 0x80000000) != 0)
          operator delete(*(void **)v757);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v119 = byte_254A4A4F8;
      else
        v119 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v120 = byte_254A4A4F8[23];
      else
        v120 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v757 = os_log_create(v119, v116);
      v121 = &v757[8];
      if (v120 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v120 >= 0x17)
      {
        v122 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v120 | 7) != 0x17)
          v122 = v120 | 7;
        v123 = v122 + 1;
        v121 = operator new(v122 + 1);
        *(_QWORD *)&v757[16] = v120;
        *(_QWORD *)v758 = v123 | 0x8000000000000000;
        *(_QWORD *)&v757[8] = v121;
      }
      else
      {
        v758[7] = v120;
        if (!v120)
        {
LABEL_187:
          v121[v120] = 0;
          v758[8] = 1;
          v124 = &v758[16];
          if (v117 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v117 >= 0x17)
          {
            v125 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v117 | 7) != 0x17)
              v125 = v117 | 7;
            v126 = v125 + 1;
            v124 = operator new(v125 + 1);
            *(_QWORD *)&v759.f64[0] = v117;
            *(_QWORD *)&v759.f64[1] = v126 | 0x8000000000000000;
            *(_QWORD *)&v758[16] = v124;
          }
          else
          {
            HIBYTE(v759.f64[1]) = v117;
            if (!v117)
              goto LABEL_195;
          }
          memmove(v124, v116, v117);
LABEL_195:
          v124[v117] = 0;
          LOBYTE(v760) = 1;
          v127 = *(NSObject **)v757;
          if (SHIBYTE(v759.f64[1]) < 0)
            operator delete(*(void **)&v758[16]);
          if (v758[8] && (v758[7] & 0x80000000) != 0)
            operator delete(*(void **)&v757[8]);
          if (*(_QWORD *)v757)
            os_release(*(void **)v757);
          if (v114 && *(_QWORD *)(v114 + 24))
          {
            v128 = _os_log_pack_size();
            v129 = (std::__shared_weak_count_vtbl *)operator new(v128, (std::align_val_t)8uLL);
            v130 = (std::__shared_weak_count *)operator new();
            v131 = v130;
            v130->__shared_owners_ = 0;
            v132 = (unint64_t *)&v130->__shared_owners_;
            v130->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v130->__shared_weak_owners_ = 0;
            v130[1].__vftable = v129;
            *(_QWORD *)v757 = v129;
            *(_QWORD *)&v757[8] = v129;
            *(_QWORD *)&v757[16] = v130;
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
            memset(v758, 0, sizeof(v758));
            do
              v134 = __ldaxr(v132);
            while (__stlxr(v134 - 1, v132));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v131);
            }
            v135 = *(_QWORD *)v757;
            *(_WORD *)_os_log_pack_fill() = 0;
            v136 = operator new();
            v137 = *(unsigned __int8 *)(v115 + 39);
            v138 = v717;
            if ((v137 & 0x80u) != 0)
            {
              v138 = *(const char **)(v115 + 16);
              v137 = *(_QWORD *)(v115 + 24);
            }
            *(_QWORD *)v136 = v135;
            *(_OWORD *)(v136 + 8) = *(_OWORD *)&v757[8];
            *(_QWORD *)&v757[8] = 0;
            *(_QWORD *)&v757[16] = 0;
            *(_OWORD *)(v136 + 24) = *(_OWORD *)v758;
            *(_QWORD *)v758 = 0;
            *(_QWORD *)&v758[8] = 0;
            *(_QWORD *)(v136 + 40) = v138;
            *(_QWORD *)(v136 + 48) = v137;
            *(_BYTE *)(v136 + 56) = 1;
            v738 = 0;
            *(_QWORD *)&v740 = v136;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v114 + 24) + 40))(*(_QWORD *)(v114 + 24), &v740);
            v139 = v740;
            *(_QWORD *)&v740 = 0;
            if (v139)
            {
              v140 = *(std::__shared_weak_count **)(v139 + 32);
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = *(std::__shared_weak_count **)(v139 + 16);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              MEMORY[0x212BC6398](v139, 0x10F0C40B62ED6C6);
              v146 = v738;
              v738 = 0;
              if (v146)
              {
                v147 = (std::__shared_weak_count *)*((_QWORD *)v146 + 4);
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                v150 = (std::__shared_weak_count *)*((_QWORD *)v146 + 2);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                MEMORY[0x212BC6398](v146, 0x10F0C40B62ED6C6);
              }
            }
            v153 = *(std::__shared_weak_count **)&v758[8];
            v154 = v720;
            if (*(_QWORD *)&v758[8])
            {
              v155 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            v157 = *(std::__shared_weak_count **)&v757[16];
            if (*(_QWORD *)&v757[16])
            {
              v158 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
          }
          else
          {
            os_log_type_enabled(v127, OS_LOG_TYPE_INFO);
            *(_WORD *)v757 = 0;
            v160 = (void *)_os_log_send_and_compose_impl();
            v154 = v720;
            if (v160)
              free(v160);
          }
          if (v154)
          {
            sub_20E8C003C((uint64_t)&v728, "");
            sub_20E863570((uint64_t)&v728);
          }
          sub_20E863570((uint64_t)&v728);
          v161 = *(std::__shared_weak_count **)&v733;
          if (v733 != 0.0)
          {
            v162 = (unint64_t *)(*(_QWORD *)&v733 + 8);
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          goto LABEL_254;
        }
      }
      memmove(v121, v119, v120);
      goto LABEL_187;
    }
  }
LABEL_254:
  sub_20E9BCAA8(v743);
LABEL_255:
  v164.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v743 = 0;
  v744 = 0;
  v742 = &v743;
  v165 = v8[5];
  v699 = v8[6];
  if (v165 != v699)
  {
    v166 = v164.__d_.__rep_;
    v705 = 0;
    v714 = 0;
    v715 = 0;
    v713 = 0;
    v167 = 0.0;
    v168 = 0.0;
    v169 = 0.0;
    v170 = 0.0;
LABEL_258:
    v171 = *(_OWORD *)*(_QWORD *)v165;
    v741 = *(_QWORD *)(*(_QWORD *)v165 + 16);
    v740 = v171;
    v172 = sub_20E9DF85C(&(*v8)[223], (uint64_t *)&v740);
    v174 = (float64x2_t **)(v172 + 5);
    if (!v172)
      v174 = 0;
    if (a6)
      v175 = v740;
    else
      v175 = v704 & 0xFFFFFFFFFFFFFF00;
    v176 = **v174;
    _D2 = (*v174)[2].f64[1];
    v178 = *(float64x2_t *)((char *)*v174 + 24);
    v179 = (*v174)[4].f64[0];
    v180 = (*v174)[3];
    v181 = v174[4];
    v182 = v181[1].f64[0];
    _Q7 = *v181;
    v184 = v181[2].f64[1];
    _Q17 = *(float64x2_t *)((char *)v181 + 24);
    v186 = v181[4].f64[0];
    _Q19 = v181[3];
    v188 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v181->f64[0]), v178, *v181, 1), v180, v182);
    __asm { FMLA            D21, D2, V7.D[1] }
    v192 = _D21 + v179 * v182;
    v193 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, _Q17.f64[0]), v178, _Q17, 1), v180, v184);
    __asm { FMLA            D21, D2, V17.D[1] }
    v195 = _D21 + v179 * v184;
    v196 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, _Q19.f64[0]), v178, _Q19, 1), v180, v186);
    __asm { FMLA            D21, D2, V19.D[1] }
    v198 = _D21 + v179 * v186;
    v199 = v174[6];
    _Q19.f64[0] = v199[1].f64[0];
    _Q21 = *v199;
    v201 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v199->f64[0]), v178, *v199, 1), v180, _Q19.f64[0]);
    __asm { FMLA            D0, D2, V21.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + v179 * _Q19.f64[0];
    v202 = v174[2];
    v178.f64[0] = v202[1].f64[0];
    v203 = vaddq_f64(_Q0, v178);
    v204 = vaddq_f64(v201, *v202);
    *(float64x2_t *)v757 = v188;
    *(float64x2_t *)v758 = v193;
    *(double *)&v757[16] = v192;
    *(double *)&v758[16] = v195;
    v759 = v196;
    v761 = v204;
    v760 = v198;
    v762 = v203.f64[0];
    v205 = *v8;
    *(_QWORD *)&v728.f64[0] = v757;
    LODWORD(v728.f64[1]) = 0;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&v761;
    LODWORD(v730.f64[0]) = 0;
    *(_QWORD *)&v203.f64[0] = a1[2];
    *(float *)v203.f64 = v203.f64[0];
    v704 = v175;
    sub_20F25D3F0((uint64_t)v205, (uint64_t)&v728, *a1, (unint64_t **)&__p, v175, a6, a4, &v738, v203, a7, 1.79769313e308);
    v206 = -1431655765 * ((unint64_t)(v739 - v738) >> 3);
    v207 = v743;
    v208 = &v743;
    v209 = &v743;
    v721 = v165;
    v703 = v166;
    if (v743)
    {
      while (1)
      {
        while (1)
        {
          v208 = (uint64_t **)v207;
          v210 = *((_DWORD *)v207 + 8);
          if (v210 <= v206)
            break;
          v207 = *v208;
          v209 = v208;
          if (!*v208)
            goto LABEL_270;
        }
        if (v210 >= v206)
          break;
        v207 = v208[1];
        if (!v207)
        {
          v209 = v208 + 1;
          goto LABEL_270;
        }
      }
      v211 = v208;
    }
    else
    {
LABEL_270:
      v211 = operator new(0x30uLL);
      v211[8] = v206;
      *((_QWORD *)v211 + 5) = 0;
      *(_QWORD *)v211 = 0;
      *((_QWORD *)v211 + 1) = 0;
      *((_QWORD *)v211 + 2) = v208;
      *v209 = (uint64_t *)v211;
      v212 = (uint64_t *)v211;
      if (*v742)
      {
        v742 = (uint64_t **)*v742;
        v212 = *v209;
      }
      sub_20E868578(v743, v212);
      ++v744;
    }
    ++*((_QWORD *)v211 + 5);
    v213.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v215 = v738;
    v702 = v213.__d_.__rep_;
    v718 = v213.__d_.__rep_;
    v710 = v739;
    if (v738 == v739)
    {
      if (!v738)
        goto LABEL_257;
LABEL_509:
      v739 = v215;
      operator delete(v215);
      goto LABEL_257;
    }
LABEL_279:
    v216 = *((_DWORD *)v215 + 4);
    v217 = v741;
    if (v216 == (_DWORD)v741 && *(_QWORD *)v215 == (_QWORD)v740 && *((_DWORD *)v215 + 2) == DWORD2(v740))
      goto LABEL_278;
    if (!a3)
      goto LABEL_359;
    v218 = v740;
    v219 = *(uint64_t **)v215;
    v220 = *((_DWORD *)v215 + 2);
    v221 = v746;
    v222 = &v746;
    v223 = v746;
    if (!v746)
    {
      v224 = v215;
      v225 = *((_DWORD *)v215 + 3);
      v711 = v224;
      v706 = *((_DWORD *)v224 + 5);
      v707 = DWORD2(v740);
      v226 = &v746;
      v227 = &v746;
      v228 = HIDWORD(v740);
      v229 = HIDWORD(v741);
      goto LABEL_356;
    }
    while (1)
    {
      v230 = *((_DWORD *)v223 + 12);
      if (v230 == (_DWORD)v741)
      {
        v231 = v223[4];
        if (v231 < (unint64_t)v740)
          goto LABEL_285;
        if (v231 == (_QWORD)v740)
        {
          v232 = *((_DWORD *)v223 + 10);
          if (v232 < DWORD2(v740))
            goto LABEL_285;
          if (DWORD2(v740) < v232)
            goto LABEL_302;
        }
        else if ((unint64_t)v740 < v231)
        {
          goto LABEL_302;
        }
      }
      else
      {
        if (v230 < v741)
          goto LABEL_285;
        if (v741 < v230)
          goto LABEL_302;
      }
      v233 = *((_DWORD *)v223 + 18);
      _CF = v233 >= v216;
      if (v233 == v216)
      {
        v235 = v223[7];
        if (v235 >= (unint64_t)v219)
        {
          if ((uint64_t *)v235 != v219)
            goto LABEL_302;
          _CF = *((_DWORD *)v223 + 16) >= v220;
          goto LABEL_300;
        }
LABEL_285:
        v223 = (uint64_t *)v223[1];
        if (!v223)
          goto LABEL_303;
      }
      else
      {
LABEL_300:
        if (!_CF)
          goto LABEL_285;
LABEL_302:
        v222 = (uint64_t **)v223;
        v223 = (uint64_t *)*v223;
        if (!v223)
        {
LABEL_303:
          if (v222 == &v746)
            goto LABEL_319;
          v236 = *((_DWORD *)v222 + 12);
          if ((_DWORD)v741 == v236)
          {
            v237 = (unint64_t)v222[4];
            if ((unint64_t)v740 >= v237)
            {
              if ((_QWORD)v740 != v237)
              {
                if (v237 < (unint64_t)v740)
                  goto LABEL_497;
                goto LABEL_314;
              }
              v238 = *((_DWORD *)v222 + 10);
              if (DWORD2(v740) >= v238)
              {
                if (v238 < DWORD2(v740))
                  goto LABEL_497;
LABEL_314:
                v239 = *((_DWORD *)v222 + 18);
                v240 = v216 >= v239;
                if (v216 == v239)
                {
                  v241 = v222[7];
                  if (v219 >= v241)
                  {
                    if (v219 != v241)
                      goto LABEL_497;
                    v240 = v220 >= *((_DWORD *)v222 + 16);
                    goto LABEL_318;
                  }
                }
                else
                {
LABEL_318:
                  if (v240)
                    goto LABEL_497;
                }
              }
            }
LABEL_319:
            v228 = HIDWORD(v740);
            while (2)
            {
              while (2)
              {
                v226 = (uint64_t **)v221;
                v242 = *((_DWORD *)v221 + 12);
                if (v216 != v242)
                {
                  if (v216 < v242)
                    goto LABEL_320;
                  if (v242 >= v216)
                    goto LABEL_331;
                  goto LABEL_344;
                }
                v243 = v226[4];
                if (v219 < v243)
                  goto LABEL_320;
                if (v219 != v243)
                {
                  if (v243 >= v219)
                    goto LABEL_331;
LABEL_339:
                  if (v243 >= v219)
                  {
                    if (v243 == v219)
                    {
                      v248 = *((_DWORD *)v226 + 10);
                      if (v248 >= v220)
                      {
                        if (v220 < v248)
                          goto LABEL_359;
                        goto LABEL_348;
                      }
                    }
                    else
                    {
                      if (v219 < v243)
                        goto LABEL_359;
LABEL_348:
                      v249 = *((_DWORD *)v226 + 18);
                      v250 = v249 >= v741;
                      if (v249 == (_DWORD)v741)
                      {
                        v251 = (unint64_t)v226[7];
                        if (v251 < (unint64_t)v740)
                          goto LABEL_353;
                        if (v251 != (_QWORD)v740)
                          goto LABEL_359;
                        v250 = *((_DWORD *)v226 + 16) >= DWORD2(v740);
                      }
                      if (v250)
                        goto LABEL_359;
                    }
                  }
LABEL_353:
                  v221 = v226[1];
                  if (!v221)
                  {
                    v229 = HIDWORD(v741);
                    v711 = v215;
                    v706 = *((_DWORD *)v215 + 5);
                    v707 = DWORD2(v740);
                    v225 = *((_DWORD *)v215 + 3);
                    v227 = v226 + 1;
                    goto LABEL_356;
                  }
                  continue;
                }
                break;
              }
              v244 = *((_DWORD *)v226 + 10);
              if (v220 < v244)
                goto LABEL_320;
              if (v244 < v220)
                goto LABEL_353;
LABEL_331:
              v245 = *((_DWORD *)v226 + 18);
              v246 = v741 >= v245;
              if ((_DWORD)v741 == v245)
              {
                v247 = (unint64_t)v226[7];
                if ((unint64_t)v740 < v247)
                  goto LABEL_320;
                if ((_QWORD)v740 == v247)
                {
                  v246 = DWORD2(v740) >= *((_DWORD *)v226 + 16);
                  goto LABEL_335;
                }
LABEL_337:
                if (v216 == v242)
                {
                  v243 = v226[4];
                  goto LABEL_339;
                }
LABEL_344:
                if (v242 >= v216)
                {
                  if (v216 < v242)
                    goto LABEL_359;
                  goto LABEL_348;
                }
                goto LABEL_353;
              }
LABEL_335:
              if (v246)
                goto LABEL_337;
LABEL_320:
              v221 = *v226;
              if (*v226)
                continue;
              break;
            }
            v229 = HIDWORD(v741);
            v711 = v215;
            v706 = *((_DWORD *)v215 + 5);
            v707 = DWORD2(v740);
            v225 = *((_DWORD *)v215 + 3);
            v227 = v226;
LABEL_356:
            v252 = operator new(0x50uLL);
            v252[4] = v219;
            *((_DWORD *)v252 + 10) = v220;
            *((_DWORD *)v252 + 11) = v225;
            *((_DWORD *)v252 + 12) = v216;
            *((_DWORD *)v252 + 13) = v706;
            v252[7] = v218;
            *((_DWORD *)v252 + 16) = v707;
            *((_DWORD *)v252 + 17) = v228;
            *((_DWORD *)v252 + 18) = v217;
            *((_DWORD *)v252 + 19) = v229;
            *v252 = 0;
            v252[1] = 0;
            v252[2] = v226;
            *v227 = v252;
            if (*v745)
            {
              v745 = (uint64_t **)*v745;
              v252 = *v227;
            }
            sub_20E868578(v746, v252);
            ++v747;
            v8 = v722;
            v215 = v711;
LABEL_359:
            v254 = v8[5];
            v253 = v8[6];
            if (v253 != v254)
            {
              v255 = ((char *)v253 - (char *)v254) >> 4;
              v256 = *((_DWORD *)v215 + 4);
              v257 = *(_QWORD *)v215;
              while (1)
              {
                v258 = v255 >> 1;
                v259 = &v254[2 * (v255 >> 1)];
                v260 = *v259;
                v261 = *(_DWORD *)(*(_QWORD *)v259 + 16);
                v262 = v261 >= v256;
                if (v261 != v256)
                  goto LABEL_367;
                if (**(_QWORD **)&v260 >= v257)
                  break;
LABEL_361:
                v254 = v259 + 2;
                v258 = v255 + ~v258;
LABEL_362:
                v255 = v258;
                if (!v258)
                  goto LABEL_370;
              }
              if (**(_QWORD **)&v260 != v257)
                goto LABEL_362;
              v262 = *(_DWORD *)(*(_QWORD *)&v260 + 8) >= *((_DWORD *)v215 + 2);
LABEL_367:
              if (v262)
                goto LABEL_362;
              goto LABEL_361;
            }
LABEL_370:
            if (v254 != v253)
            {
              v263 = *v254;
              if (*(_DWORD *)(*(_QWORD *)v254 + 16) == *((_DWORD *)v215 + 4)
                && **(_QWORD **)&v263 == *(_QWORD *)v215
                && *(_DWORD *)(*(_QWORD *)&v263 + 8) == *((_DWORD *)v215 + 2))
              {
                v253 = v254;
              }
            }
            v265 = *v253;
            v264 = (std::__shared_weak_count *)v253[1];
            v736 = (uint64_t *)v265;
            v737 = v264;
            if (v264)
            {
              v266 = (unint64_t *)&v264->__shared_owners_;
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            v268 = (*v8)[224];
            if (v268)
            {
              v269 = *(_DWORD *)(*(_QWORD *)&v265 + 16);
              v270 = *(_DWORD *)(*(_QWORD *)&v265 + 8);
              v271 = v270 ^ __ROR4__(v269, 13);
              v272 = (uint8x8_t)vcnt_s8(v268);
              v272.i16[0] = vaddlv_u8(v272);
              if (v272.u32[0] > 1uLL)
              {
                v273 = v271;
                if (*(_QWORD *)&v268 <= v271)
                  v273 = v271 % *(_QWORD *)&v268;
              }
              else
              {
                v273 = (v268.i32[0] - 1) & v271;
              }
              v274 = *(uint64_t **)(*(_QWORD *)&(*v8)[223] + 8 * v273);
              if (v274)
              {
                v274 = (uint64_t *)*v274;
                if (v274)
                {
                  v275 = **(_QWORD **)&v265;
                  if (v272.u32[0] < 2uLL)
                  {
                    v276 = *(_QWORD *)&v268 - 1;
                    while (1)
                    {
                      v278 = v274[1];
                      if (v278 == v271)
                      {
                        if (*((_DWORD *)v274 + 8) == v269 && v274[2] == v275 && *((_DWORD *)v274 + 6) == v270)
                          goto LABEL_404;
                      }
                      else if ((v278 & v276) != v273)
                      {
                        goto LABEL_403;
                      }
                      v274 = (uint64_t *)*v274;
                      if (!v274)
                        goto LABEL_404;
                    }
                  }
                  do
                  {
                    v277 = v274[1];
                    if (v277 == v271)
                    {
                      if (*((_DWORD *)v274 + 8) == v269 && v274[2] == v275 && *((_DWORD *)v274 + 6) == v270)
                        break;
                    }
                    else
                    {
                      if (v277 >= *(_QWORD *)&v268)
                        v277 %= *(_QWORD *)&v268;
                      if (v277 != v273)
                        goto LABEL_403;
                    }
                    v274 = (uint64_t *)*v274;
                  }
                  while (v274);
                }
              }
            }
            else
            {
LABEL_403:
              v274 = 0;
            }
LABEL_404:
            v279 = (float64x2_t **)(v274 + 5);
            if (!v274)
              v279 = 0;
            v280 = **v279;
            _D2 = (*v279)[2].f64[1];
            v282 = *(float64x2_t *)((char *)*v279 + 24);
            v283 = (*v279)[4].f64[0];
            v284 = (*v279)[3];
            v285 = v279[4];
            v286 = v285[1].f64[0];
            _Q7 = *v285;
            v288 = v285[2].f64[1];
            _Q17 = *(float64x2_t *)((char *)v285 + 24);
            v290 = v285[4].f64[0];
            _Q19 = v285[3];
            v292 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v280, v285->f64[0]), v282, *v285, 1), v284, v286);
            __asm { FMLA            D21, D2, V7.D[1] }
            *(double *)&v294 = _D21 + v283 * v286;
            v295 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v280, _Q17.f64[0]), v282, _Q17, 1), v284, v288);
            __asm { FMLA            D21, D2, V17.D[1] }
            v297 = _D21 + v283 * v288;
            v298 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v280, _Q19.f64[0]), v282, _Q19, 1), v284, v290);
            __asm { FMLA            D21, D2, V19.D[1] }
            v300 = _D21 + v283 * v290;
            v301 = v279[6];
            _Q19.f64[0] = v301[1].f64[0];
            _Q21 = *v301;
            v303 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v280, v301->f64[0]), v282, *v301, 1), v284, _Q19.f64[0]);
            __asm { FMLA            D0, D2, V21.D[1] }
            _Q0.f64[0] = _Q0.f64[0] + v283 * _Q19.f64[0];
            v304 = v279[2];
            v305 = *v304;
            v282.f64[0] = v304[1].f64[0];
            v728 = v292;
            rep = v294;
            v730 = v295;
            v731 = v297;
            v732 = v298;
            v733 = v300;
            v734 = vaddq_f64(v303, v305);
            v735 = *(_OWORD *)&vaddq_f64(_Q0, v282);
            v306.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v307 = *(_QWORD *)(*(_QWORD *)v721 + 72);
            v308 = *(_QWORD *)(*(_QWORD *)v721 + 80);
            v725 = 0;
            v726 = 0;
            v727 = 0;
            v309 = v308 - v307;
            v310 = 0xCCCCCCCCCCCCCCCDLL * (v309 >> 3);
            if (v309)
            {
              if (v310 >> 62)
                sub_20EABADD4();
              v311 = (char *)operator new(0x3333333333333334 * (v309 >> 3));
              bzero(v311, 4 * v310);
              v725 = v311;
              v726 = &v311[4 * v310];
              v727 = v726;
            }
            v312 = v752;
            if (v752)
            {
              v313 = v740;
              v314 = v752;
              do
              {
                v315 = v314[4];
                if ((unint64_t)v740 >= v315)
                {
                  if (v315 >= (unint64_t)v740)
                  {
                    v712 = v310;
                    goto LABEL_426;
                  }
                  ++v314;
                }
                v314 = (uint64_t *)*v314;
              }
              while (v314);
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapTrackingUtil.cpp", 157, (uint64_t)"next_available_track_id_per_session.count(ref_image_id.view.uuid_hash())", 72, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v316 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v316 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v317 = qword_254A6DE40;
              for (i = qword_254A6DE48; v317 != i; v317 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v317)(*(_QWORD *)(v317 + 8), "next_available_track_id_per_session.count(ref_image_id.view.uuid_hash())", 72, "", 0);
            }
            v319 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v319 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "next_available_track_id_per_session.count(ref_image_id.view.uuid_hash())", 72, "", 0);
            v312 = v752;
            v313 = v740;
            v320 = &v752;
            v321 = &v752;
            v712 = v310;
            if (v752)
            {
              while (1)
              {
LABEL_426:
                while (1)
                {
                  v320 = (uint64_t **)v312;
                  v322 = v312[4];
                  if (v313 >= v322)
                    break;
                  v312 = *v320;
                  v321 = v320;
                  if (!*v320)
                    goto LABEL_430;
                }
                if (v322 >= v313)
                  break;
                v312 = v320[1];
                if (!v312)
                {
                  v321 = v320 + 1;
                  goto LABEL_430;
                }
              }
              v336 = v306.__d_.__rep_;
              v323 = v320;
              v337 = (char *)v725;
              v338 = v726;
              if (v725 != v726)
              {
LABEL_457:
                LODWORD(v340) = v323[12];
                v341 = *((_QWORD *)v323 + 5);
                do
                {
                  *(_DWORD *)v337 = v340;
                  ++v323[12];
                  v342 = v722[1];
                  v340 = *((_QWORD *)v323 + 6);
                  v345 = (int8x8_t *)v342[1];
                  v344 = v342 + 1;
                  v343 = v345;
                  if (v345)
                  {
                    do
                    {
                      v346 = v344;
                      do
                      {
                        v347 = (unint64_t)v343[4];
                        if (v347 < v341)
                        {
                          ++v343;
                        }
                        else if (v347 == v341)
                        {
                          if (v343[5].i32[0] < v340)
                            ++v343;
                          else
                            v346 = v343;
                        }
                        else
                        {
                          v346 = v343;
                        }
                        v343 = (int8x8_t *)*v343;
                      }
                      while (v343);
                      if (v346 == v344)
                        break;
                      v348 = (unint64_t)v346[4];
                      if (v341 < v348 || v341 == v348 && v346[5].i32[0] > v340)
                        break;
                      v349 = v346[6];
                      v350 = (std::__shared_weak_count *)v346[7];
                      if (v350)
                      {
                        v351 = (unint64_t *)&v350->__shared_owners_;
                        do
                          v352 = __ldxr(v351);
                        while (__stxr(v352 + 1, v351));
                        do
                          v353 = __ldaxr(v351);
                        while (__stlxr(v353 - 1, v351));
                        if (!v353)
                        {
                          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                          std::__shared_weak_count::__release_weak(v350);
                        }
                      }
                      if (!*(_QWORD *)&v349)
                        break;
                      LODWORD(v340) = v340 + 1;
                      v343 = (int8x8_t *)*v344;
                    }
                    while (*v344);
                  }
                  *((_QWORD *)v323 + 5) = v341;
                  v323[12] = v340;
                  v337 += 4;
                }
                while (v337 != v338);
              }
            }
            else
            {
LABEL_430:
              v323 = operator new(0x38uLL);
              *((_QWORD *)v323 + 5) = 0;
              *((_QWORD *)v323 + 6) = 0;
              *((_QWORD *)v323 + 4) = v313;
              *(_QWORD *)v323 = 0;
              *((_QWORD *)v323 + 1) = 0;
              *((_QWORD *)v323 + 2) = v320;
              *v321 = (uint64_t *)v323;
              v324 = (uint64_t *)v323;
              if (*v751)
              {
                v751 = (uint64_t **)*v751;
                v324 = *v321;
              }
              v325 = v752;
              _ZF = v324 == v752;
              *((_BYTE *)v324 + 24) = v324 == v752;
              if (!_ZF)
              {
                do
                {
                  v326 = v324[2];
                  if (*(_BYTE *)(v326 + 24))
                    break;
                  v327 = *(uint64_t **)(v326 + 16);
                  v328 = *v327;
                  if (*v327 == v326)
                  {
                    v331 = v327[1];
                    if (!v331 || (v332 = *(unsigned __int8 *)(v331 + 24), v329 = (_BYTE *)(v331 + 24), v332))
                    {
                      if (*(uint64_t **)v326 == v324)
                      {
                        *(_BYTE *)(v326 + 24) = 1;
                        *((_BYTE *)v327 + 24) = 0;
                        v335 = *(_QWORD *)(v326 + 8);
                        *v327 = v335;
                        if (v335)
                          goto LABEL_447;
                      }
                      else
                      {
                        v333 = *(uint64_t **)(v326 + 8);
                        v334 = *v333;
                        *(_QWORD *)(v326 + 8) = *v333;
                        if (v334)
                        {
                          *(_QWORD *)(v334 + 16) = v326;
                          v327 = *(uint64_t **)(v326 + 16);
                        }
                        v333[2] = (uint64_t)v327;
                        *(_QWORD *)(*(_QWORD *)(v326 + 16) + 8 * (**(_QWORD **)(v326 + 16) != v326)) = v333;
                        *v333 = v326;
                        *(_QWORD *)(v326 + 16) = v333;
                        v327 = (uint64_t *)v333[2];
                        v326 = *v327;
                        *((_BYTE *)v333 + 24) = 1;
                        *((_BYTE *)v327 + 24) = 0;
                        v335 = *(_QWORD *)(v326 + 8);
                        *v327 = v335;
                        if (v335)
LABEL_447:
                          *(_QWORD *)(v335 + 16) = v327;
                      }
                      *(_QWORD *)(v326 + 16) = v327[2];
                      *(_QWORD *)(v327[2] + 8 * (*(_QWORD *)v327[2] != (_QWORD)v327)) = v326;
                      *(_QWORD *)(v326 + 8) = v327;
LABEL_455:
                      v327[2] = v326;
                      break;
                    }
                  }
                  else if (!v328 || (v330 = *(unsigned __int8 *)(v328 + 24), v329 = (_BYTE *)(v328 + 24), v330))
                  {
                    if (*(uint64_t **)v326 == v324)
                    {
                      v366 = v324[1];
                      *(_QWORD *)v326 = v366;
                      if (v366)
                      {
                        *(_QWORD *)(v366 + 16) = v326;
                        v327 = *(uint64_t **)(v326 + 16);
                      }
                      v324[2] = (uint64_t)v327;
                      *(_QWORD *)(*(_QWORD *)(v326 + 16) + 8 * (**(_QWORD **)(v326 + 16) != v326)) = v324;
                      v324[1] = v326;
                      *(_QWORD *)(v326 + 16) = v324;
                      v327 = (uint64_t *)v324[2];
                      *((_BYTE *)v324 + 24) = 1;
                      *((_BYTE *)v327 + 24) = 0;
                      v326 = v327[1];
                      v339 = *(uint64_t **)v326;
                      v327[1] = *(_QWORD *)v326;
                      if (v339)
LABEL_453:
                        v339[2] = (uint64_t)v327;
                    }
                    else
                    {
                      *(_BYTE *)(v326 + 24) = 1;
                      *((_BYTE *)v327 + 24) = 0;
                      v326 = v327[1];
                      v339 = *(uint64_t **)v326;
                      v327[1] = *(_QWORD *)v326;
                      if (v339)
                        goto LABEL_453;
                    }
                    *(_QWORD *)(v326 + 16) = v327[2];
                    *(_QWORD *)(v327[2] + 8 * (*(_QWORD *)v327[2] != (_QWORD)v327)) = v326;
                    *(_QWORD *)v326 = v327;
                    goto LABEL_455;
                  }
                  *(_BYTE *)(v326 + 24) = 1;
                  v324 = v327;
                  *((_BYTE *)v327 + 24) = v327 == v325;
                  *v329 = 1;
                }
                while (v327 != v325);
              }
              v336 = v306.__d_.__rep_;
              ++v753;
              v337 = (char *)v725;
              v338 = v726;
              if (v725 != v726)
                goto LABEL_457;
            }
            v354.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v355 = (uint64_t)*v721;
            v356 = (double *)*v722;
            v357 = v722[1];
            v754[0] = 0;
            v756 = 0;
            sub_20F2DB2A8((uint64_t)a1, v356, (__int128 *)v757, (uint64_t)&v728, &v725, v355, v736, v357, (uint64_t *)&v723, 1, (uint64_t)v754);
            v359 = v723;
            v358 = v724;
            if (v723)
            {
              v724 = v723;
              operator delete(v723);
            }
            if (v756)
            {
              v360 = v755;
              if (v755 == v754)
              {
                v360 = v754;
                v361 = 4;
LABEL_489:
                (*(void (**)(void))(*v360 + 8 * v361))();
              }
              else if (v755)
              {
                v361 = 5;
                goto LABEL_489;
              }
            }
            v362.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            if (v725)
            {
              v726 = (char *)v725;
              operator delete(v725);
            }
            v363 = v737;
            if (v737)
            {
              v364 = (unint64_t *)&v737->__shared_owners_;
              do
                v365 = __ldaxr(v364);
              while (__stlxr(v365 - 1, v364));
              if (!v365)
              {
                ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                std::__shared_weak_count::__release_weak(v363);
              }
            }
            v169 = v169 + (double)(v336 - v718) / 1000000000.0;
            v714 += v712;
            v168 = v168 + (double)(v354.__d_.__rep_ - v336) / 1000000000.0;
            v713 += (v358 - v359) >> 4;
            ++v715;
            v718 = v362.__d_.__rep_;
            v167 = v167 + (double)(v362.__d_.__rep_ - v354.__d_.__rep_) / 1000000000.0;
            v8 = v722;
          }
          else
          {
            if (v741 < v236)
              goto LABEL_319;
            if (v236 >= v741)
              goto LABEL_314;
LABEL_497:
            ++v705;
          }
LABEL_278:
          v215 += 24;
          if (v215 != v710)
            goto LABEL_279;
          v215 = v738;
          if (v738)
            goto LABEL_509;
LABEL_257:
          v170 = v170 + (double)(v702 - v703) / 1000000000.0;
          v166 = v718;
          v165 = v721 + 2;
          if (&v721[2] == v699)
            goto LABEL_511;
          goto LABEL_258;
        }
      }
    }
  }
  v705 = 0;
  v714 = 0;
  v715 = 0;
  v713 = 0;
  v167 = 0.0;
  v168 = 0.0;
  v169 = 0.0;
  v170 = 0.0;
LABEL_511:
  if ((a5 & 1) == 0)
    goto LABEL_1085;
  *((_QWORD *)&v740 + 1) = 0;
  v741 = 0;
  *(_QWORD *)&v740 = (char *)&v740 + 8;
  v367 = v8[1];
  v370 = (int8x8_t *)*v367;
  v368 = v367 + 1;
  v369 = v370;
  if (v370 != v368)
  {
    do
    {
      v379 = (*(_QWORD *)(*(_QWORD *)&v369[6] + 208) - *(_QWORD *)(*(_QWORD *)&v369[6] + 200)) >> 5;
      v380 = (uint64_t *)*((_QWORD *)&v740 + 1);
      v381 = (uint64_t **)&v740 + 1;
      v382 = (uint64_t **)&v740 + 1;
      if (*((_QWORD *)&v740 + 1))
      {
        while (1)
        {
          while (1)
          {
            v382 = (uint64_t **)v380;
            v383 = *((_DWORD *)v380 + 8);
            if (v383 <= v379)
              break;
            v380 = *v382;
            v381 = v382;
            if (!*v382)
              goto LABEL_528;
          }
          if (v383 >= v379)
            break;
          v380 = v382[1];
          if (!v380)
          {
            v381 = v382 + 1;
            goto LABEL_528;
          }
        }
        v382[5] = (uint64_t *)((char *)v382[5] + 1);
        v386 = (int8x8_t *)v369[1];
        if (v386)
        {
          do
          {
LABEL_533:
            v387 = v386;
            v386 = (int8x8_t *)*v386;
          }
          while (v386);
          goto LABEL_520;
        }
      }
      else
      {
LABEL_528:
        v384 = operator new(0x30uLL);
        v384[8] = v379;
        *((_QWORD *)v384 + 5) = 0;
        *(_QWORD *)v384 = 0;
        *((_QWORD *)v384 + 1) = 0;
        *((_QWORD *)v384 + 2) = v382;
        *v381 = (uint64_t *)v384;
        v385 = (uint64_t *)v384;
        if (*(_QWORD *)v740)
        {
          *(_QWORD *)&v740 = *(_QWORD *)v740;
          v385 = *v381;
        }
        sub_20E868578(*((uint64_t **)&v740 + 1), v385);
        ++v741;
        ++*((_QWORD *)v384 + 5);
        v386 = (int8x8_t *)v369[1];
        if (v386)
          goto LABEL_533;
      }
      do
      {
        v387 = (int8x8_t *)v369[2];
        _ZF = *v387 == (_QWORD)v369;
        v369 = v387;
      }
      while (!_ZF);
LABEL_520:
      v369 = v387;
    }
    while (v387 != v368);
  }
  sub_20F2D5664(&v723);
  if (**((int **)v723 + 7) > 3)
    goto LABEL_624;
  v371 = v723[72];
  v372 = sub_20E8C31DC((uint64_t)v723, "OSLogSurrogateAppender", 1, 0);
  v373 = v372;
  if (!v371 && v372 == 0)
    goto LABEL_624;
  *(_QWORD *)&v728.f64[0] = &v723;
  *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v730.f64[0]) = 3;
  *(_QWORD *)&v730.f64[1] = "unknown file";
  LODWORD(v731) = 192;
  v732.f64[1] = 0.0;
  v733 = 0.0;
  *(_QWORD *)&v732.f64[0] = "unknown function";
  v375 = **(_QWORD **)&v728.f64[0];
  v376 = **(_QWORD **)&v728.f64[0] + 16;
  if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
  {
    v378 = *(const char **)(v375 + 16);
    v377 = *(_QWORD *)(v375 + 24);
  }
  else
  {
    v377 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
    v378 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
  }
  v388 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v388 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v757);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
    if (v758[0] && (v757[23] & 0x80000000) != 0)
      operator delete(*(void **)v757);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v389 = byte_254A4A4F8;
  else
    v389 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v390 = byte_254A4A4F8[23];
  else
    v390 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v757 = os_log_create(v389, v378);
  v391 = &v757[8];
  if (v390 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v390 >= 0x17)
  {
    v392 = (v390 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v390 | 7) != 0x17)
      v392 = v390 | 7;
    v393 = v392 + 1;
    v391 = operator new(v392 + 1);
    *(_QWORD *)&v757[16] = v390;
    *(_QWORD *)v758 = v393 | 0x8000000000000000;
    *(_QWORD *)&v757[8] = v391;
    goto LABEL_553;
  }
  v758[7] = v390;
  if (v390)
LABEL_553:
    memmove(v391, v389, v390);
  v391[v390] = 0;
  v758[8] = 1;
  v394 = &v758[16];
  if (v377 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v377 >= 0x17)
  {
    v395 = (v377 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v377 | 7) != 0x17)
      v395 = v377 | 7;
    v396 = v395 + 1;
    v394 = operator new(v395 + 1);
    *(_QWORD *)&v759.f64[0] = v377;
    *(_QWORD *)&v759.f64[1] = v396 | 0x8000000000000000;
    *(_QWORD *)&v758[16] = v394;
  }
  else
  {
    HIBYTE(v759.f64[1]) = v377;
    if (!v377)
      goto LABEL_562;
  }
  memmove(v394, v378, v377);
LABEL_562:
  v394[v377] = 0;
  LOBYTE(v760) = 1;
  v397 = *(NSObject **)v757;
  if (SHIBYTE(v759.f64[1]) < 0)
    operator delete(*(void **)&v758[16]);
  if (v758[8] && (v758[7] & 0x80000000) != 0)
    operator delete(*(void **)&v757[8]);
  if (*(_QWORD *)v757)
    os_release(*(void **)v757);
  if (v373 && *(_QWORD *)(v373 + 24))
  {
    v398 = _os_log_pack_size();
    v399 = (std::__shared_weak_count_vtbl *)operator new(v398, (std::align_val_t)8uLL);
    v400 = (std::__shared_weak_count *)operator new();
    v401 = v400;
    v400->__shared_owners_ = 0;
    v402 = (unint64_t *)&v400->__shared_owners_;
    v400->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v400->__shared_weak_owners_ = 0;
    v400[1].__vftable = v399;
    *(_QWORD *)v757 = v399;
    *(_QWORD *)&v757[8] = v399;
    *(_QWORD *)&v757[16] = v400;
    do
      v403 = __ldxr(v402);
    while (__stxr(v403 + 1, v402));
    memset(v758, 0, sizeof(v758));
    do
      v404 = __ldaxr(v402);
    while (__stlxr(v404 - 1, v402));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v401);
    }
    v405 = *(_QWORD *)v757;
    *(_WORD *)_os_log_pack_fill() = 0;
    v406 = operator new();
    v407 = *(unsigned __int8 *)(v375 + 39);
    if ((v407 & 0x80u) == 0)
      v408 = v376;
    else
      v408 = *(_QWORD *)(v375 + 16);
    if ((v407 & 0x80u) != 0)
      v407 = *(_QWORD *)(v375 + 24);
    *(_QWORD *)v406 = v405;
    *(_OWORD *)(v406 + 8) = *(_OWORD *)&v757[8];
    *(_QWORD *)&v757[8] = 0;
    *(_QWORD *)&v757[16] = 0;
    *(_OWORD *)(v406 + 24) = *(_OWORD *)v758;
    *(_QWORD *)v758 = 0;
    *(_QWORD *)&v758[8] = 0;
    *(_QWORD *)(v406 + 40) = v408;
    *(_QWORD *)(v406 + 48) = v407;
    *(_BYTE *)(v406 + 56) = 1;
    v725 = 0;
    v738 = (char *)v406;
    (*(void (**)(_QWORD, char **))(**(_QWORD **)(v373 + 24) + 40))(*(_QWORD *)(v373 + 24), &v738);
    v409 = v738;
    v738 = 0;
    if (v409)
    {
      v410 = (std::__shared_weak_count *)*((_QWORD *)v409 + 4);
      if (v410)
      {
        v411 = (unint64_t *)&v410->__shared_owners_;
        do
          v412 = __ldaxr(v411);
        while (__stlxr(v412 - 1, v411));
        if (!v412)
        {
          ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
          std::__shared_weak_count::__release_weak(v410);
        }
      }
      v413 = (std::__shared_weak_count *)*((_QWORD *)v409 + 2);
      if (v413)
      {
        v414 = (unint64_t *)&v413->__shared_owners_;
        do
          v415 = __ldaxr(v414);
        while (__stlxr(v415 - 1, v414));
        if (!v415)
        {
          ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
          std::__shared_weak_count::__release_weak(v413);
        }
      }
      MEMORY[0x212BC6398](v409, 0x10F0C40B62ED6C6);
      v416 = v725;
      v725 = 0;
      if (v416)
      {
        v417 = (std::__shared_weak_count *)*((_QWORD *)v416 + 4);
        if (v417)
        {
          v418 = (unint64_t *)&v417->__shared_owners_;
          do
            v419 = __ldaxr(v418);
          while (__stlxr(v419 - 1, v418));
          if (!v419)
          {
            ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
            std::__shared_weak_count::__release_weak(v417);
          }
        }
        v420 = (std::__shared_weak_count *)*((_QWORD *)v416 + 2);
        if (v420)
        {
          v421 = (unint64_t *)&v420->__shared_owners_;
          do
            v422 = __ldaxr(v421);
          while (__stlxr(v422 - 1, v421));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
            std::__shared_weak_count::__release_weak(v420);
          }
        }
        MEMORY[0x212BC6398](v416, 0x10F0C40B62ED6C6);
      }
    }
    v423 = *(std::__shared_weak_count **)&v758[8];
    if (*(_QWORD *)&v758[8])
    {
      v424 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v425 = __ldaxr(v424);
      while (__stlxr(v425 - 1, v424));
      if (!v425)
      {
        ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
        std::__shared_weak_count::__release_weak(v423);
      }
    }
    v426 = *(std::__shared_weak_count **)&v757[16];
    if (*(_QWORD *)&v757[16])
    {
      v427 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
      do
        v428 = __ldaxr(v427);
      while (__stlxr(v428 - 1, v427));
      if (!v428)
      {
        ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
        std::__shared_weak_count::__release_weak(v426);
      }
    }
  }
  else
  {
    os_log_type_enabled(v397, OS_LOG_TYPE_INFO);
    *(_WORD *)v757 = 0;
    v429 = (void *)_os_log_send_and_compose_impl();
    if (v429)
      free(v429);
  }
  if (v371)
  {
    sub_20E8C003C((uint64_t)&v728, "Track length histogram after rematch");
    sub_20E863570((uint64_t)&v728);
  }
  sub_20E863570((uint64_t)&v728);
  v430 = *(std::__shared_weak_count **)&v733;
  if (v733 != 0.0)
  {
    v431 = (unint64_t *)(*(_QWORD *)&v733 + 8);
    do
      v432 = __ldaxr(v431);
    while (__stlxr(v432 - 1, v431));
    if (!v432)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }
LABEL_624:
  sub_20F2D5758(&v740);
  sub_20F2D5664(&v723);
  if (**((int **)v723 + 7) > 3)
    goto LABEL_715;
  v433 = v723[72];
  v434 = sub_20E8C31DC((uint64_t)v723, "OSLogSurrogateAppender", 1, 0);
  v435 = v434;
  if (!v433 && !v434)
    goto LABEL_715;
  *(_QWORD *)&v728.f64[0] = &v723;
  *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v730.f64[0]) = 3;
  *(_QWORD *)&v730.f64[1] = "unknown file";
  LODWORD(v731) = 194;
  v732.f64[1] = 0.0;
  v733 = 0.0;
  *(_QWORD *)&v732.f64[0] = "unknown function";
  v436 = **(_QWORD **)&v728.f64[0];
  v437 = **(_QWORD **)&v728.f64[0] + 16;
  if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
  {
    v439 = *(const char **)(v436 + 16);
    v438 = *(_QWORD *)(v436 + 24);
  }
  else
  {
    v438 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
    v439 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
  }
  v440 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v440 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v757);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
    if (v758[0] && (v757[23] & 0x80000000) != 0)
      operator delete(*(void **)v757);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v441 = byte_254A4A4F8;
  else
    v441 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v442 = byte_254A4A4F8[23];
  else
    v442 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v757 = os_log_create(v441, v439);
  v443 = &v757[8];
  if (v442 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v442 >= 0x17)
  {
    v444 = (v442 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v442 | 7) != 0x17)
      v444 = v442 | 7;
    v445 = v444 + 1;
    v443 = operator new(v444 + 1);
    *(_QWORD *)&v757[16] = v442;
    *(_QWORD *)v758 = v445 | 0x8000000000000000;
    *(_QWORD *)&v757[8] = v443;
    goto LABEL_644;
  }
  v758[7] = v442;
  if (v442)
LABEL_644:
    memmove(v443, v441, v442);
  v443[v442] = 0;
  v758[8] = 1;
  v446 = &v758[16];
  if (v438 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v438 >= 0x17)
  {
    v447 = (v438 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v438 | 7) != 0x17)
      v447 = v438 | 7;
    v448 = v447 + 1;
    v446 = operator new(v447 + 1);
    *(_QWORD *)&v759.f64[0] = v438;
    *(_QWORD *)&v759.f64[1] = v448 | 0x8000000000000000;
    *(_QWORD *)&v758[16] = v446;
  }
  else
  {
    HIBYTE(v759.f64[1]) = v438;
    if (!v438)
      goto LABEL_653;
  }
  memmove(v446, v439, v438);
LABEL_653:
  v446[v438] = 0;
  LOBYTE(v760) = 1;
  v449 = *(NSObject **)v757;
  if (SHIBYTE(v759.f64[1]) < 0)
    operator delete(*(void **)&v758[16]);
  if (v758[8] && (v758[7] & 0x80000000) != 0)
    operator delete(*(void **)&v757[8]);
  if (*(_QWORD *)v757)
    os_release(*(void **)v757);
  if (v435 && *(_QWORD *)(v435 + 24))
  {
    v450 = _os_log_pack_size();
    v451 = (std::__shared_weak_count_vtbl *)operator new(v450, (std::align_val_t)8uLL);
    v452 = (std::__shared_weak_count *)operator new();
    v453 = v452;
    v452->__shared_owners_ = 0;
    v454 = (unint64_t *)&v452->__shared_owners_;
    v452->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v452->__shared_weak_owners_ = 0;
    v452[1].__vftable = v451;
    *(_QWORD *)v757 = v451;
    *(_QWORD *)&v757[8] = v451;
    *(_QWORD *)&v757[16] = v452;
    do
      v455 = __ldxr(v454);
    while (__stxr(v455 + 1, v454));
    memset(v758, 0, sizeof(v758));
    do
      v456 = __ldaxr(v454);
    while (__stlxr(v456 - 1, v454));
    if (!v456)
    {
      ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
      std::__shared_weak_count::__release_weak(v453);
    }
    v457 = *(_QWORD *)v757;
    *(_WORD *)_os_log_pack_fill() = 0;
    v458 = operator new();
    v459 = *(unsigned __int8 *)(v436 + 39);
    if ((v459 & 0x80u) == 0)
      v460 = v437;
    else
      v460 = *(_QWORD *)(v436 + 16);
    if ((v459 & 0x80u) != 0)
      v459 = *(_QWORD *)(v436 + 24);
    *(_QWORD *)v458 = v457;
    *(_OWORD *)(v458 + 8) = *(_OWORD *)&v757[8];
    *(_QWORD *)&v757[8] = 0;
    *(_QWORD *)&v757[16] = 0;
    *(_OWORD *)(v458 + 24) = *(_OWORD *)v758;
    *(_QWORD *)v758 = 0;
    *(_QWORD *)&v758[8] = 0;
    *(_QWORD *)(v458 + 40) = v460;
    *(_QWORD *)(v458 + 48) = v459;
    *(_BYTE *)(v458 + 56) = 1;
    v725 = 0;
    v738 = (char *)v458;
    (*(void (**)(_QWORD, char **))(**(_QWORD **)(v435 + 24) + 40))(*(_QWORD *)(v435 + 24), &v738);
    v461 = v738;
    v738 = 0;
    if (v461)
    {
      v462 = (std::__shared_weak_count *)*((_QWORD *)v461 + 4);
      if (v462)
      {
        v463 = (unint64_t *)&v462->__shared_owners_;
        do
          v464 = __ldaxr(v463);
        while (__stlxr(v464 - 1, v463));
        if (!v464)
        {
          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
          std::__shared_weak_count::__release_weak(v462);
        }
      }
      v465 = (std::__shared_weak_count *)*((_QWORD *)v461 + 2);
      if (v465)
      {
        v466 = (unint64_t *)&v465->__shared_owners_;
        do
          v467 = __ldaxr(v466);
        while (__stlxr(v467 - 1, v466));
        if (!v467)
        {
          ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
          std::__shared_weak_count::__release_weak(v465);
        }
      }
      MEMORY[0x212BC6398](v461, 0x10F0C40B62ED6C6);
      v468 = v725;
      v725 = 0;
      if (v468)
      {
        v469 = (std::__shared_weak_count *)*((_QWORD *)v468 + 4);
        if (v469)
        {
          v470 = (unint64_t *)&v469->__shared_owners_;
          do
            v471 = __ldaxr(v470);
          while (__stlxr(v471 - 1, v470));
          if (!v471)
          {
            ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
            std::__shared_weak_count::__release_weak(v469);
          }
        }
        v472 = (std::__shared_weak_count *)*((_QWORD *)v468 + 2);
        if (v472)
        {
          v473 = (unint64_t *)&v472->__shared_owners_;
          do
            v474 = __ldaxr(v473);
          while (__stlxr(v474 - 1, v473));
          if (!v474)
          {
            ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
            std::__shared_weak_count::__release_weak(v472);
          }
        }
        MEMORY[0x212BC6398](v468, 0x10F0C40B62ED6C6);
      }
    }
    v475 = *(std::__shared_weak_count **)&v758[8];
    if (*(_QWORD *)&v758[8])
    {
      v476 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v477 = __ldaxr(v476);
      while (__stlxr(v477 - 1, v476));
      if (!v477)
      {
        ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
        std::__shared_weak_count::__release_weak(v475);
      }
    }
    v478 = *(std::__shared_weak_count **)&v757[16];
    if (*(_QWORD *)&v757[16])
    {
      v479 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
      do
        v480 = __ldaxr(v479);
      while (__stlxr(v480 - 1, v479));
      if (!v480)
      {
        ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
        std::__shared_weak_count::__release_weak(v478);
      }
    }
  }
  else
  {
    os_log_type_enabled(v449, OS_LOG_TYPE_INFO);
    *(_WORD *)v757 = 0;
    v481 = (void *)_os_log_send_and_compose_impl();
    if (v481)
      free(v481);
  }
  if (v433)
  {
    sub_20E8C003C((uint64_t)&v728, "");
    sub_20E863570((uint64_t)&v728);
  }
  sub_20E863570((uint64_t)&v728);
  v482 = *(std::__shared_weak_count **)&v733;
  if (v733 != 0.0)
  {
    v483 = (unint64_t *)(*(_QWORD *)&v733 + 8);
    do
      v484 = __ldaxr(v483);
    while (__stlxr(v484 - 1, v483));
    if (!v484)
    {
      ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
      std::__shared_weak_count::__release_weak(v482);
    }
  }
LABEL_715:
  sub_20E9BCAA8(*((_QWORD **)&v740 + 1));
  sub_20F2D5664(&v725);
  if (**((int **)v725 + 7) > 3)
    goto LABEL_808;
  v485 = *((unsigned __int8 *)v725 + 72);
  v486 = sub_20E8C31DC((uint64_t)v725, "OSLogSurrogateAppender", 1, 0);
  v487 = v486;
  if (!v485 && v486 == 0)
    goto LABEL_808;
  *(_QWORD *)&v728.f64[0] = &v725;
  *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v730.f64[0]) = 3;
  *(_QWORD *)&v730.f64[1] = "unknown file";
  LODWORD(v731) = 197;
  v732.f64[1] = 0.0;
  v733 = 0.0;
  *(_QWORD *)&v732.f64[0] = "unknown function";
  v489 = **(_QWORD **)&v728.f64[0];
  v490 = **(_QWORD **)&v728.f64[0] + 16;
  if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
  {
    v492 = *(const char **)(v489 + 16);
    v491 = *(_QWORD *)(v489 + 24);
  }
  else
  {
    v491 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
    v492 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
  }
  v493 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v493 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v757);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
    if (v758[0] && (v757[23] & 0x80000000) != 0)
      operator delete(*(void **)v757);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v494 = byte_254A4A4F8;
  else
    v494 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v495 = byte_254A4A4F8[23];
  else
    v495 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v757 = os_log_create(v494, v492);
  v496 = &v757[8];
  if (v495 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v495 >= 0x17)
  {
    v497 = (v495 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v495 | 7) != 0x17)
      v497 = v495 | 7;
    v498 = v497 + 1;
    v496 = operator new(v497 + 1);
    *(_QWORD *)&v757[16] = v495;
    *(_QWORD *)v758 = v498 | 0x8000000000000000;
    *(_QWORD *)&v757[8] = v496;
    goto LABEL_737;
  }
  v758[7] = v495;
  if (v495)
LABEL_737:
    memmove(v496, v494, v495);
  v496[v495] = 0;
  v758[8] = 1;
  v499 = &v758[16];
  if (v491 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v491 >= 0x17)
  {
    v500 = (v491 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v491 | 7) != 0x17)
      v500 = v491 | 7;
    v501 = v500 + 1;
    v499 = operator new(v500 + 1);
    *(_QWORD *)&v759.f64[0] = v491;
    *(_QWORD *)&v759.f64[1] = v501 | 0x8000000000000000;
    *(_QWORD *)&v758[16] = v499;
  }
  else
  {
    HIBYTE(v759.f64[1]) = v491;
    if (!v491)
      goto LABEL_746;
  }
  memmove(v499, v492, v491);
LABEL_746:
  v499[v491] = 0;
  LOBYTE(v760) = 1;
  v502 = *(NSObject **)v757;
  if (SHIBYTE(v759.f64[1]) < 0)
    operator delete(*(void **)&v758[16]);
  if (v758[8] && (v758[7] & 0x80000000) != 0)
    operator delete(*(void **)&v757[8]);
  if (*(_QWORD *)v757)
    os_release(*(void **)v757);
  if (v487 && *(_QWORD *)(v487 + 24))
  {
    v503 = _os_log_pack_size();
    v504 = (std::__shared_weak_count_vtbl *)operator new(v503, (std::align_val_t)8uLL);
    v505 = (std::__shared_weak_count *)operator new();
    v506 = v505;
    v505->__shared_owners_ = 0;
    v507 = (unint64_t *)&v505->__shared_owners_;
    v505->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v505->__shared_weak_owners_ = 0;
    v505[1].__vftable = v504;
    *(_QWORD *)v757 = v504;
    *(_QWORD *)&v757[8] = v504;
    *(_QWORD *)&v757[16] = v505;
    do
      v508 = __ldxr(v507);
    while (__stxr(v508 + 1, v507));
    memset(v758, 0, sizeof(v758));
    do
      v509 = __ldaxr(v507);
    while (__stlxr(v509 - 1, v507));
    if (!v509)
    {
      ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
      std::__shared_weak_count::__release_weak(v506);
    }
    v510 = *(_QWORD *)v757;
    *(_WORD *)_os_log_pack_fill() = 0;
    v511 = operator new();
    v512 = *(unsigned __int8 *)(v489 + 39);
    if ((v512 & 0x80u) == 0)
      v513 = v490;
    else
      v513 = *(_QWORD *)(v489 + 16);
    if ((v512 & 0x80u) != 0)
      v512 = *(_QWORD *)(v489 + 24);
    *(_QWORD *)v511 = v510;
    *(_OWORD *)(v511 + 8) = *(_OWORD *)&v757[8];
    *(_QWORD *)&v757[8] = 0;
    *(_QWORD *)&v757[16] = 0;
    *(_OWORD *)(v511 + 24) = *(_OWORD *)v758;
    *(_QWORD *)v758 = 0;
    *(_QWORD *)&v758[8] = 0;
    *(_QWORD *)(v511 + 40) = v513;
    *(_QWORD *)(v511 + 48) = v512;
    *(_BYTE *)(v511 + 56) = 1;
    v738 = 0;
    *(_QWORD *)&v740 = v511;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v487 + 24) + 40))(*(_QWORD *)(v487 + 24), &v740);
    v514 = v740;
    *(_QWORD *)&v740 = 0;
    if (v514)
    {
      v515 = *(std::__shared_weak_count **)(v514 + 32);
      if (v515)
      {
        v516 = (unint64_t *)&v515->__shared_owners_;
        do
          v517 = __ldaxr(v516);
        while (__stlxr(v517 - 1, v516));
        if (!v517)
        {
          ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
          std::__shared_weak_count::__release_weak(v515);
        }
      }
      v518 = *(std::__shared_weak_count **)(v514 + 16);
      if (v518)
      {
        v519 = (unint64_t *)&v518->__shared_owners_;
        do
          v520 = __ldaxr(v519);
        while (__stlxr(v520 - 1, v519));
        if (!v520)
        {
          ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
          std::__shared_weak_count::__release_weak(v518);
        }
      }
      MEMORY[0x212BC6398](v514, 0x10F0C40B62ED6C6);
      v521 = v738;
      v738 = 0;
      if (v521)
      {
        v522 = (std::__shared_weak_count *)*((_QWORD *)v521 + 4);
        if (v522)
        {
          v523 = (unint64_t *)&v522->__shared_owners_;
          do
            v524 = __ldaxr(v523);
          while (__stlxr(v524 - 1, v523));
          if (!v524)
          {
            ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
            std::__shared_weak_count::__release_weak(v522);
          }
        }
        v525 = (std::__shared_weak_count *)*((_QWORD *)v521 + 2);
        if (v525)
        {
          v526 = (unint64_t *)&v525->__shared_owners_;
          do
            v527 = __ldaxr(v526);
          while (__stlxr(v527 - 1, v526));
          if (!v527)
          {
            ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
            std::__shared_weak_count::__release_weak(v525);
          }
        }
        MEMORY[0x212BC6398](v521, 0x10F0C40B62ED6C6);
      }
    }
    v528 = *(std::__shared_weak_count **)&v758[8];
    if (*(_QWORD *)&v758[8])
    {
      v529 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v530 = __ldaxr(v529);
      while (__stlxr(v530 - 1, v529));
      if (!v530)
      {
        ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
        std::__shared_weak_count::__release_weak(v528);
      }
    }
    v531 = *(std::__shared_weak_count **)&v757[16];
    if (*(_QWORD *)&v757[16])
    {
      v532 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
      do
        v533 = __ldaxr(v532);
      while (__stlxr(v533 - 1, v532));
      if (!v533)
      {
        ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
        std::__shared_weak_count::__release_weak(v531);
      }
    }
  }
  else
  {
    os_log_type_enabled(v502, OS_LOG_TYPE_INFO);
    *(_WORD *)v757 = 0;
    v534 = (void *)_os_log_send_and_compose_impl();
    if (v534)
      free(v534);
  }
  if (v485)
  {
    sub_20E8C003C((uint64_t)&v728, "Query frames histogram");
    sub_20E863570((uint64_t)&v728);
  }
  sub_20E863570((uint64_t)&v728);
  v535 = *(std::__shared_weak_count **)&v733;
  if (v733 != 0.0)
  {
    v536 = (unint64_t *)(*(_QWORD *)&v733 + 8);
    do
      v537 = __ldaxr(v536);
    while (__stlxr(v537 - 1, v536));
    if (!v537)
    {
      ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
      std::__shared_weak_count::__release_weak(v535);
    }
  }
LABEL_808:
  sub_20F2D5758(&v742);
  sub_20F2D5664(&v725);
  if (**((int **)v725 + 7) > 3)
    goto LABEL_899;
  v538 = *((unsigned __int8 *)v725 + 72);
  v539 = sub_20E8C31DC((uint64_t)v725, "OSLogSurrogateAppender", 1, 0);
  v540 = v539;
  if (!v538 && !v539)
    goto LABEL_899;
  *(_QWORD *)&v728.f64[0] = &v725;
  *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v730.f64[0]) = 3;
  *(_QWORD *)&v730.f64[1] = "unknown file";
  LODWORD(v731) = 199;
  v732.f64[1] = 0.0;
  v733 = 0.0;
  *(_QWORD *)&v732.f64[0] = "unknown function";
  v541 = **(_QWORD **)&v728.f64[0];
  v542 = **(_QWORD **)&v728.f64[0] + 16;
  if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
  {
    v544 = *(const char **)(v541 + 16);
    v543 = *(_QWORD *)(v541 + 24);
  }
  else
  {
    v543 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
    v544 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
  }
  v545 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v545 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v757);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
    if (v758[0] && (v757[23] & 0x80000000) != 0)
      operator delete(*(void **)v757);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v546 = byte_254A4A4F8;
  else
    v546 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v547 = byte_254A4A4F8[23];
  else
    v547 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v757 = os_log_create(v546, v544);
  v548 = &v757[8];
  if (v547 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v547 >= 0x17)
  {
    v549 = (v547 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v547 | 7) != 0x17)
      v549 = v547 | 7;
    v550 = v549 + 1;
    v548 = operator new(v549 + 1);
    *(_QWORD *)&v757[16] = v547;
    *(_QWORD *)v758 = v550 | 0x8000000000000000;
    *(_QWORD *)&v757[8] = v548;
    goto LABEL_828;
  }
  v758[7] = v547;
  if (v547)
LABEL_828:
    memmove(v548, v546, v547);
  v548[v547] = 0;
  v758[8] = 1;
  v551 = &v758[16];
  if (v543 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v543 >= 0x17)
  {
    v552 = (v543 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v543 | 7) != 0x17)
      v552 = v543 | 7;
    v553 = v552 + 1;
    v551 = operator new(v552 + 1);
    *(_QWORD *)&v759.f64[0] = v543;
    *(_QWORD *)&v759.f64[1] = v553 | 0x8000000000000000;
    *(_QWORD *)&v758[16] = v551;
  }
  else
  {
    HIBYTE(v759.f64[1]) = v543;
    if (!v543)
      goto LABEL_837;
  }
  memmove(v551, v544, v543);
LABEL_837:
  v551[v543] = 0;
  LOBYTE(v760) = 1;
  v554 = *(NSObject **)v757;
  if (SHIBYTE(v759.f64[1]) < 0)
    operator delete(*(void **)&v758[16]);
  if (v758[8] && (v758[7] & 0x80000000) != 0)
    operator delete(*(void **)&v757[8]);
  if (*(_QWORD *)v757)
    os_release(*(void **)v757);
  if (v540 && *(_QWORD *)(v540 + 24))
  {
    v555 = _os_log_pack_size();
    v556 = (std::__shared_weak_count_vtbl *)operator new(v555, (std::align_val_t)8uLL);
    v557 = (std::__shared_weak_count *)operator new();
    v558 = v557;
    v557->__shared_owners_ = 0;
    v559 = (unint64_t *)&v557->__shared_owners_;
    v557->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v557->__shared_weak_owners_ = 0;
    v557[1].__vftable = v556;
    *(_QWORD *)v757 = v556;
    *(_QWORD *)&v757[8] = v556;
    *(_QWORD *)&v757[16] = v557;
    do
      v560 = __ldxr(v559);
    while (__stxr(v560 + 1, v559));
    memset(v758, 0, sizeof(v758));
    do
      v561 = __ldaxr(v559);
    while (__stlxr(v561 - 1, v559));
    if (!v561)
    {
      ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
      std::__shared_weak_count::__release_weak(v558);
    }
    v562 = *(_QWORD *)v757;
    *(_WORD *)_os_log_pack_fill() = 0;
    v563 = operator new();
    v564 = *(unsigned __int8 *)(v541 + 39);
    if ((v564 & 0x80u) == 0)
      v565 = v542;
    else
      v565 = *(_QWORD *)(v541 + 16);
    if ((v564 & 0x80u) != 0)
      v564 = *(_QWORD *)(v541 + 24);
    *(_QWORD *)v563 = v562;
    *(_OWORD *)(v563 + 8) = *(_OWORD *)&v757[8];
    *(_QWORD *)&v757[8] = 0;
    *(_QWORD *)&v757[16] = 0;
    *(_OWORD *)(v563 + 24) = *(_OWORD *)v758;
    *(_QWORD *)v758 = 0;
    *(_QWORD *)&v758[8] = 0;
    *(_QWORD *)(v563 + 40) = v565;
    *(_QWORD *)(v563 + 48) = v564;
    *(_BYTE *)(v563 + 56) = 1;
    v738 = 0;
    *(_QWORD *)&v740 = v563;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v540 + 24) + 40))(*(_QWORD *)(v540 + 24), &v740);
    v566 = v740;
    *(_QWORD *)&v740 = 0;
    if (v566)
    {
      v567 = *(std::__shared_weak_count **)(v566 + 32);
      if (v567)
      {
        v568 = (unint64_t *)&v567->__shared_owners_;
        do
          v569 = __ldaxr(v568);
        while (__stlxr(v569 - 1, v568));
        if (!v569)
        {
          ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
          std::__shared_weak_count::__release_weak(v567);
        }
      }
      v570 = *(std::__shared_weak_count **)(v566 + 16);
      if (v570)
      {
        v571 = (unint64_t *)&v570->__shared_owners_;
        do
          v572 = __ldaxr(v571);
        while (__stlxr(v572 - 1, v571));
        if (!v572)
        {
          ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
          std::__shared_weak_count::__release_weak(v570);
        }
      }
      MEMORY[0x212BC6398](v566, 0x10F0C40B62ED6C6);
      v573 = v738;
      v738 = 0;
      if (v573)
      {
        v574 = (std::__shared_weak_count *)*((_QWORD *)v573 + 4);
        if (v574)
        {
          v575 = (unint64_t *)&v574->__shared_owners_;
          do
            v576 = __ldaxr(v575);
          while (__stlxr(v576 - 1, v575));
          if (!v576)
          {
            ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
            std::__shared_weak_count::__release_weak(v574);
          }
        }
        v577 = (std::__shared_weak_count *)*((_QWORD *)v573 + 2);
        if (v577)
        {
          v578 = (unint64_t *)&v577->__shared_owners_;
          do
            v579 = __ldaxr(v578);
          while (__stlxr(v579 - 1, v578));
          if (!v579)
          {
            ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
            std::__shared_weak_count::__release_weak(v577);
          }
        }
        MEMORY[0x212BC6398](v573, 0x10F0C40B62ED6C6);
      }
    }
    v580 = *(std::__shared_weak_count **)&v758[8];
    if (*(_QWORD *)&v758[8])
    {
      v581 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v582 = __ldaxr(v581);
      while (__stlxr(v582 - 1, v581));
      if (!v582)
      {
        ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
        std::__shared_weak_count::__release_weak(v580);
      }
    }
    v583 = *(std::__shared_weak_count **)&v757[16];
    if (*(_QWORD *)&v757[16])
    {
      v584 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
      do
        v585 = __ldaxr(v584);
      while (__stlxr(v585 - 1, v584));
      if (!v585)
      {
        ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
        std::__shared_weak_count::__release_weak(v583);
      }
    }
  }
  else
  {
    os_log_type_enabled(v554, OS_LOG_TYPE_INFO);
    *(_WORD *)v757 = 0;
    v586 = (void *)_os_log_send_and_compose_impl();
    if (v586)
      free(v586);
  }
  if (v538)
  {
    sub_20E8C003C((uint64_t)&v728, "");
    sub_20E863570((uint64_t)&v728);
  }
  sub_20E863570((uint64_t)&v728);
  v587 = *(std::__shared_weak_count **)&v733;
  if (v733 != 0.0)
  {
    v588 = (unint64_t *)(*(_QWORD *)&v733 + 8);
    do
      v589 = __ldaxr(v588);
    while (__stlxr(v589 - 1, v588));
    if (!v589)
    {
      ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
      std::__shared_weak_count::__release_weak(v587);
    }
  }
LABEL_899:
  sub_20F2D5664(&v725);
  if (**((int **)v725 + 7) > 3)
    goto LABEL_992;
  v590 = *((unsigned __int8 *)v725 + 72);
  v591 = sub_20E8C31DC((uint64_t)v725, "OSLogSurrogateAppender", 1, 0);
  v592 = v591;
  if (!v590 && v591 == 0)
    goto LABEL_992;
  *(_QWORD *)&v728.f64[0] = &v725;
  *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v730.f64[0]) = 3;
  *(_QWORD *)&v730.f64[1] = "unknown file";
  LODWORD(v731) = 204;
  v732.f64[1] = 0.0;
  v733 = 0.0;
  *(_QWORD *)&v732.f64[0] = "unknown function";
  v594 = **(_QWORD **)&v728.f64[0];
  v595 = **(_QWORD **)&v728.f64[0] + 16;
  if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
  {
    v597 = *(const char **)(v594 + 16);
    v596 = *(_QWORD *)(v594 + 24);
  }
  else
  {
    v596 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
    v597 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
  }
  v598 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v598 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v757);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
    if (v758[0] && (v757[23] & 0x80000000) != 0)
      operator delete(*(void **)v757);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v599 = byte_254A4A4F8;
  else
    v599 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v600 = byte_254A4A4F8[23];
  else
    v600 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v757 = os_log_create(v599, v597);
  v601 = &v757[8];
  if (v600 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v600 >= 0x17)
  {
    v602 = (v600 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v600 | 7) != 0x17)
      v602 = v600 | 7;
    v603 = v602 + 1;
    v601 = operator new(v602 + 1);
    *(_QWORD *)&v757[16] = v600;
    *(_QWORD *)v758 = v603 | 0x8000000000000000;
    *(_QWORD *)&v757[8] = v601;
    goto LABEL_921;
  }
  v758[7] = v600;
  if (v600)
LABEL_921:
    memmove(v601, v599, v600);
  v601[v600] = 0;
  v758[8] = 1;
  v604 = &v758[16];
  if (v596 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v596 >= 0x17)
  {
    v605 = (v596 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v596 | 7) != 0x17)
      v605 = v596 | 7;
    v606 = v605 + 1;
    v604 = operator new(v605 + 1);
    *(_QWORD *)&v759.f64[0] = v596;
    *(_QWORD *)&v759.f64[1] = v606 | 0x8000000000000000;
    *(_QWORD *)&v758[16] = v604;
  }
  else
  {
    HIBYTE(v759.f64[1]) = v596;
    if (!v596)
      goto LABEL_930;
  }
  memmove(v604, v597, v596);
LABEL_930:
  v604[v596] = 0;
  LOBYTE(v760) = 1;
  v607 = *(NSObject **)v757;
  if (SHIBYTE(v759.f64[1]) < 0)
    operator delete(*(void **)&v758[16]);
  if (v758[8] && (v758[7] & 0x80000000) != 0)
    operator delete(*(void **)&v757[8]);
  if (*(_QWORD *)v757)
    os_release(*(void **)v757);
  if (v592 && *(_QWORD *)(v592 + 24))
  {
    v608 = _os_log_pack_size();
    v609 = (std::__shared_weak_count_vtbl *)operator new(v608, (std::align_val_t)8uLL);
    v610 = (std::__shared_weak_count *)operator new();
    v611 = v610;
    v610->__shared_owners_ = 0;
    v612 = (unint64_t *)&v610->__shared_owners_;
    v610->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v610->__shared_weak_owners_ = 0;
    v610[1].__vftable = v609;
    *(_QWORD *)v757 = v609;
    *(_QWORD *)&v757[8] = v609;
    *(_QWORD *)&v757[16] = v610;
    do
      v613 = __ldxr(v612);
    while (__stxr(v613 + 1, v612));
    memset(v758, 0, sizeof(v758));
    do
      v614 = __ldaxr(v612);
    while (__stlxr(v614 - 1, v612));
    if (!v614)
    {
      ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
      std::__shared_weak_count::__release_weak(v611);
    }
    v615 = *(_QWORD *)v757;
    v616 = _os_log_pack_fill();
    *(_DWORD *)v616 = 134218752;
    *(_QWORD *)(v616 + 4) = v715;
    *(_WORD *)(v616 + 12) = 2048;
    *(_QWORD *)(v616 + 14) = v705;
    *(_WORD *)(v616 + 22) = 2048;
    *(_QWORD *)(v616 + 24) = v714;
    *(_WORD *)(v616 + 32) = 2048;
    *(_QWORD *)(v616 + 34) = v713;
    v617 = operator new();
    v618 = *(unsigned __int8 *)(v594 + 39);
    if ((v618 & 0x80u) == 0)
      v619 = v595;
    else
      v619 = *(_QWORD *)(v594 + 16);
    if ((v618 & 0x80u) != 0)
      v618 = *(_QWORD *)(v594 + 24);
    *(_QWORD *)v617 = v615;
    *(_OWORD *)(v617 + 8) = *(_OWORD *)&v757[8];
    *(_QWORD *)&v757[8] = 0;
    *(_QWORD *)&v757[16] = 0;
    *(_OWORD *)(v617 + 24) = *(_OWORD *)v758;
    *(_QWORD *)v758 = 0;
    *(_QWORD *)&v758[8] = 0;
    *(_QWORD *)(v617 + 40) = v619;
    *(_QWORD *)(v617 + 48) = v618;
    *(_BYTE *)(v617 + 56) = 1;
    v738 = 0;
    *(_QWORD *)&v740 = v617;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v592 + 24) + 40))(*(_QWORD *)(v592 + 24), &v740);
    v620 = v740;
    *(_QWORD *)&v740 = 0;
    if (v620)
    {
      v621 = *(std::__shared_weak_count **)(v620 + 32);
      if (v621)
      {
        v622 = (unint64_t *)&v621->__shared_owners_;
        do
          v623 = __ldaxr(v622);
        while (__stlxr(v623 - 1, v622));
        if (!v623)
        {
          ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
          std::__shared_weak_count::__release_weak(v621);
        }
      }
      v624 = *(std::__shared_weak_count **)(v620 + 16);
      if (v624)
      {
        v625 = (unint64_t *)&v624->__shared_owners_;
        do
          v626 = __ldaxr(v625);
        while (__stlxr(v626 - 1, v625));
        if (!v626)
        {
          ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
          std::__shared_weak_count::__release_weak(v624);
        }
      }
      MEMORY[0x212BC6398](v620, 0x10F0C40B62ED6C6);
      v627 = v738;
      v738 = 0;
      if (v627)
      {
        v628 = (std::__shared_weak_count *)*((_QWORD *)v627 + 4);
        if (v628)
        {
          v629 = (unint64_t *)&v628->__shared_owners_;
          do
            v630 = __ldaxr(v629);
          while (__stlxr(v630 - 1, v629));
          if (!v630)
          {
            ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
            std::__shared_weak_count::__release_weak(v628);
          }
        }
        v631 = (std::__shared_weak_count *)*((_QWORD *)v627 + 2);
        if (v631)
        {
          v632 = (unint64_t *)&v631->__shared_owners_;
          do
            v633 = __ldaxr(v632);
          while (__stlxr(v633 - 1, v632));
          if (!v633)
          {
            ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
            std::__shared_weak_count::__release_weak(v631);
          }
        }
        MEMORY[0x212BC6398](v627, 0x10F0C40B62ED6C6);
      }
    }
    v634 = *(std::__shared_weak_count **)&v758[8];
    if (*(_QWORD *)&v758[8])
    {
      v635 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v636 = __ldaxr(v635);
      while (__stlxr(v636 - 1, v635));
      if (!v636)
      {
        ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
        std::__shared_weak_count::__release_weak(v634);
      }
    }
    v637 = *(std::__shared_weak_count **)&v757[16];
    if (*(_QWORD *)&v757[16])
    {
      v638 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
      do
        v639 = __ldaxr(v638);
      while (__stlxr(v639 - 1, v638));
      if (!v639)
      {
        ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
        std::__shared_weak_count::__release_weak(v637);
      }
    }
  }
  else
  {
    os_log_type_enabled(v607, OS_LOG_TYPE_INFO);
    *(_DWORD *)v757 = 134218752;
    *(_QWORD *)&v757[4] = v715;
    *(_WORD *)&v757[12] = 2048;
    *(_QWORD *)&v757[14] = v705;
    *(_WORD *)&v757[22] = 2048;
    *(_QWORD *)v758 = v714;
    *(_WORD *)&v758[8] = 2048;
    *(_QWORD *)&v758[10] = v713;
    v640 = (void *)_os_log_send_and_compose_impl();
    if (v640)
      free(v640);
  }
  if (v590)
  {
    sub_20E8C003C((uint64_t)&v728, "Rematching processed %zu image pairs (%zu rev-skipped), allocated %zu track IDs, generated %zu new tracks.", v715, v705, v714, v713);
    sub_20E863570((uint64_t)&v728);
  }
  sub_20E863570((uint64_t)&v728);
  v641 = *(std::__shared_weak_count **)&v733;
  if (v733 != 0.0)
  {
    v642 = (unint64_t *)(*(_QWORD *)&v733 + 8);
    do
      v643 = __ldaxr(v642);
    while (__stlxr(v643 - 1, v642));
    if (!v643)
    {
      ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
      std::__shared_weak_count::__release_weak(v641);
    }
  }
LABEL_992:
  sub_20F2D5664(&v725);
  if (**((int **)v725 + 7) <= 3)
  {
    v644 = *((unsigned __int8 *)v725 + 72);
    v645 = sub_20E8C31DC((uint64_t)v725, "OSLogSurrogateAppender", 1, 0);
    v646 = v645;
    if (v644 || v645 != 0)
    {
      *(_QWORD *)&v728.f64[0] = &v725;
      *(std::chrono::steady_clock::time_point *)&v728.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v730.f64[0]) = 3;
      *(_QWORD *)&v730.f64[1] = "unknown file";
      LODWORD(v731) = 209;
      v732.f64[1] = 0.0;
      v733 = 0.0;
      *(_QWORD *)&v732.f64[0] = "unknown function";
      v648 = **(_QWORD **)&v728.f64[0];
      v649 = **(_QWORD **)&v728.f64[0] + 16;
      if (*(char *)(**(_QWORD **)&v728.f64[0] + 39) < 0)
      {
        v651 = *(const char **)(v648 + 16);
        v650 = *(_QWORD *)(v648 + 24);
      }
      else
      {
        v650 = *(unsigned __int8 *)(**(_QWORD **)&v728.f64[0] + 39);
        v651 = (const char *)(**(_QWORD **)&v728.f64[0] + 16);
      }
      v652 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v652 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v757);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v757);
        if (v758[0] && (v757[23] & 0x80000000) != 0)
          operator delete(*(void **)v757);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v653 = byte_254A4A4F8;
      else
        v653 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v654 = byte_254A4A4F8[23];
      else
        v654 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v757 = os_log_create(v653, v651);
      v655 = &v757[8];
      if (v654 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v654 >= 0x17)
      {
        v656 = (v654 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v654 | 7) != 0x17)
          v656 = v654 | 7;
        v657 = v656 + 1;
        v655 = operator new(v656 + 1);
        *(_QWORD *)&v757[16] = v654;
        *(_QWORD *)v758 = v657 | 0x8000000000000000;
        *(_QWORD *)&v757[8] = v655;
      }
      else
      {
        v758[7] = v654;
        if (!v654)
        {
LABEL_1015:
          v655[v654] = 0;
          v758[8] = 1;
          v658 = &v758[16];
          if (v650 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v650 >= 0x17)
          {
            v659 = (v650 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v650 | 7) != 0x17)
              v659 = v650 | 7;
            v660 = v659 + 1;
            v658 = operator new(v659 + 1);
            *(_QWORD *)&v759.f64[0] = v650;
            *(_QWORD *)&v759.f64[1] = v660 | 0x8000000000000000;
            *(_QWORD *)&v758[16] = v658;
          }
          else
          {
            HIBYTE(v759.f64[1]) = v650;
            if (!v650)
              goto LABEL_1023;
          }
          memmove(v658, v651, v650);
LABEL_1023:
          v658[v650] = 0;
          LOBYTE(v760) = 1;
          v661 = *(NSObject **)v757;
          if (SHIBYTE(v759.f64[1]) < 0)
            operator delete(*(void **)&v758[16]);
          if (v758[8] && (v758[7] & 0x80000000) != 0)
            operator delete(*(void **)&v757[8]);
          if (*(_QWORD *)v757)
            os_release(*(void **)v757);
          if (v646 && *(_QWORD *)(v646 + 24))
          {
            v662 = _os_log_pack_size();
            v663 = (std::__shared_weak_count_vtbl *)operator new(v662, (std::align_val_t)8uLL);
            v664 = (std::__shared_weak_count *)operator new();
            v665 = v664;
            v664->__shared_owners_ = 0;
            v666 = (unint64_t *)&v664->__shared_owners_;
            v664->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v664->__shared_weak_owners_ = 0;
            v664[1].__vftable = v663;
            *(_QWORD *)v757 = v663;
            *(_QWORD *)&v757[8] = v663;
            *(_QWORD *)&v757[16] = v664;
            do
              v667 = __ldxr(v666);
            while (__stxr(v667 + 1, v666));
            memset(v758, 0, sizeof(v758));
            do
              v668 = __ldaxr(v666);
            while (__stlxr(v668 - 1, v666));
            if (!v668)
            {
              ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
              std::__shared_weak_count::__release_weak(v665);
            }
            v669 = *(_QWORD *)v757;
            v670 = _os_log_pack_fill();
            *(_DWORD *)v670 = 134218752;
            *(double *)(v670 + 4) = v170;
            *(_WORD *)(v670 + 12) = 2048;
            *(double *)(v670 + 14) = v169;
            *(_WORD *)(v670 + 22) = 2048;
            *(double *)(v670 + 24) = v168;
            *(_WORD *)(v670 + 32) = 2048;
            *(double *)(v670 + 34) = v167;
            v671 = operator new();
            v672 = *(unsigned __int8 *)(v648 + 39);
            if ((v672 & 0x80u) == 0)
              v673 = v649;
            else
              v673 = *(_QWORD *)(v648 + 16);
            if ((v672 & 0x80u) != 0)
              v672 = *(_QWORD *)(v648 + 24);
            *(_QWORD *)v671 = v669;
            *(_OWORD *)(v671 + 8) = *(_OWORD *)&v757[8];
            *(_QWORD *)&v757[8] = 0;
            *(_QWORD *)&v757[16] = 0;
            *(_OWORD *)(v671 + 24) = *(_OWORD *)v758;
            *(_QWORD *)v758 = 0;
            *(_QWORD *)&v758[8] = 0;
            *(_QWORD *)(v671 + 40) = v673;
            *(_QWORD *)(v671 + 48) = v672;
            *(_BYTE *)(v671 + 56) = 1;
            v738 = 0;
            *(_QWORD *)&v740 = v671;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v646 + 24) + 40))(*(_QWORD *)(v646 + 24), &v740);
            v674 = v740;
            *(_QWORD *)&v740 = 0;
            if (v674)
            {
              v675 = *(std::__shared_weak_count **)(v674 + 32);
              if (v675)
              {
                v676 = (unint64_t *)&v675->__shared_owners_;
                do
                  v677 = __ldaxr(v676);
                while (__stlxr(v677 - 1, v676));
                if (!v677)
                {
                  ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
                  std::__shared_weak_count::__release_weak(v675);
                }
              }
              v678 = *(std::__shared_weak_count **)(v674 + 16);
              if (v678)
              {
                v679 = (unint64_t *)&v678->__shared_owners_;
                do
                  v680 = __ldaxr(v679);
                while (__stlxr(v680 - 1, v679));
                if (!v680)
                {
                  ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
                  std::__shared_weak_count::__release_weak(v678);
                }
              }
              MEMORY[0x212BC6398](v674, 0x10F0C40B62ED6C6);
              v681 = v738;
              v738 = 0;
              if (v681)
              {
                v682 = (std::__shared_weak_count *)*((_QWORD *)v681 + 4);
                if (v682)
                {
                  v683 = (unint64_t *)&v682->__shared_owners_;
                  do
                    v684 = __ldaxr(v683);
                  while (__stlxr(v684 - 1, v683));
                  if (!v684)
                  {
                    ((void (*)(std::__shared_weak_count *))v682->__on_zero_shared)(v682);
                    std::__shared_weak_count::__release_weak(v682);
                  }
                }
                v685 = (std::__shared_weak_count *)*((_QWORD *)v681 + 2);
                if (v685)
                {
                  v686 = (unint64_t *)&v685->__shared_owners_;
                  do
                    v687 = __ldaxr(v686);
                  while (__stlxr(v687 - 1, v686));
                  if (!v687)
                  {
                    ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
                    std::__shared_weak_count::__release_weak(v685);
                  }
                }
                MEMORY[0x212BC6398](v681, 0x10F0C40B62ED6C6);
              }
            }
            v688 = *(std::__shared_weak_count **)&v758[8];
            if (*(_QWORD *)&v758[8])
            {
              v689 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
              do
                v690 = __ldaxr(v689);
              while (__stlxr(v690 - 1, v689));
              if (!v690)
              {
                ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
                std::__shared_weak_count::__release_weak(v688);
              }
            }
            v691 = *(std::__shared_weak_count **)&v757[16];
            if (*(_QWORD *)&v757[16])
            {
              v692 = (unint64_t *)(*(_QWORD *)&v757[16] + 8);
              do
                v693 = __ldaxr(v692);
              while (__stlxr(v693 - 1, v692));
              if (!v693)
              {
                ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
                std::__shared_weak_count::__release_weak(v691);
              }
            }
          }
          else
          {
            os_log_type_enabled(v661, OS_LOG_TYPE_INFO);
            *(_DWORD *)v757 = 134218752;
            *(double *)&v757[4] = v170;
            *(_WORD *)&v757[12] = 2048;
            *(double *)&v757[14] = v169;
            *(_WORD *)&v757[22] = 2048;
            *(double *)v758 = v168;
            *(_WORD *)&v758[8] = 2048;
            *(double *)&v758[10] = v167;
            v694 = (void *)_os_log_send_and_compose_impl();
            if (v694)
              free(v694);
          }
          if (v644)
          {
            sub_20E8C003C((uint64_t)&v728, "It took %f sec to find the closest frames, %f sec to look up pose-refs, %f sec to allocate new track IDs and %f for keyframe matching", v170, v169, v168, v167);
            sub_20E863570((uint64_t)&v728);
          }
          sub_20E863570((uint64_t)&v728);
          v695 = *(std::__shared_weak_count **)&v733;
          if (v733 != 0.0)
          {
            v696 = (unint64_t *)(*(_QWORD *)&v733 + 8);
            do
              v697 = __ldaxr(v696);
            while (__stlxr(v697 - 1, v696));
            if (!v697)
            {
              ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
              std::__shared_weak_count::__release_weak(v695);
            }
          }
          goto LABEL_1085;
        }
      }
      memmove(v655, v653, v654);
      goto LABEL_1015;
    }
  }
LABEL_1085:
  sub_20E9BCAA8(v743);
  sub_20E9BCAA8(v746);
  if (__p)
  {
    v749 = (char *)__p;
    operator delete(__p);
  }
  sub_20E9BCAA8(v752);
}

