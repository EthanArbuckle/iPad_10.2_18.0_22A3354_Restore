void sub_20FBF1358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_20F626C38(v54 - 176);
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FBF137C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF1398(int64x2_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v150;
  unint64_t *v151;
  int64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  __int128 v187;
  char v188;
  unint64_t v189;
  char v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v205 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a2;
  v10 = (unint64_t *)a1[71].i64[0];
  v11 = (unint64_t *)a1[71].i64[1];
  if (v10 == v11)
  {
    v11 = (unint64_t *)a1[71].i64[0];
  }
  else if (*(v11 - 35) >= v9)
  {
    v12 = 0xAF8AF8AF8AF8AF8BLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[35 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 35;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v155 = a2[2];
  v156 = a2[3];
  v157 = a2[4];
  v158 = *((_QWORD *)a2 + 10);
  v153 = *a2;
  v154 = a2[1];
  v159 = *(__int128 *)((char *)a2 + 88);
  v160 = *((_QWORD *)a2 + 13);
  v161 = a2[7];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)&v168 = a4;
  *((_QWORD *)&v168 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v23 = *v7;
  v24 = a1[18].i64[1];
  v25 = a1[19].i64[0];
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)(v24 + 16 * (v26 >> 1));
      v30 = *v28;
      v29 = v28 + 4;
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = (uint64_t)v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v17 = 0;
  }
  else
  {
    v31 = *(_QWORD *)(v24 + 8);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v169 = v153;
      v171 = v155;
      v172 = v156;
      v173 = v157;
      v174 = v158;
      v170 = v154;
      v175 = v159;
      v32 = v161;
      v176 = v160;
      v177 = v161;
      v161 = 0uLL;
      v178 = v31;
      v179 = v162;
      v180 = v163;
      v181 = v164;
      v182 = v165;
      v183 = v166;
      v184 = v167;
      v186 = 0;
      v185 = 0xBFF0000000000000;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v187 = v168;
      *((_QWORD *)&v168 + 1) = 0;
      v188 = 0;
      v34 = (unint64_t *)a1[71].i64[1];
      if (v34 != v11 && *v11 == v9)
        goto LABEL_109;
      a6 = &v169;
      a5 = (std::__shared_weak_count *)&v175;
      a3 = &v177;
      a4 = &v179;
      a2 = &v187;
      v35 = a1[71].i64[0];
      v36 = (uint64_t)v11 - v35;
      v152 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v11 - v35) >> 3);
      v37 = a1[72].u64[0];
      if ((unint64_t)v34 < v37)
      {
        if (v11 == v34)
        {
          *v34 = v9;
          v85 = v35 + 8 * (((uint64_t)v11 - v35) >> 3);
          *(_OWORD *)(v85 + 8) = v169;
          v87 = v172;
          v86 = v173;
          v88 = v174;
          *(_OWORD *)(v85 + 40) = v171;
          *(_QWORD *)(v85 + 88) = v88;
          *(_OWORD *)(v85 + 72) = v86;
          *(_OWORD *)(v85 + 56) = v87;
          *(_OWORD *)(v85 + 24) = v170;
          v89 = v176;
          *(_OWORD *)(v85 + 96) = v175;
          *(_QWORD *)(v85 + 112) = v89;
          *(_OWORD *)(v85 + 120) = v32;
          v177 = 0uLL;
          *(_QWORD *)(v85 + 136) = v31;
          v90 = v179;
          v91 = v181;
          *(_OWORD *)(v85 + 160) = v180;
          *(_OWORD *)(v85 + 176) = v91;
          *(_OWORD *)(v85 + 144) = v90;
          v92 = v182;
          v93 = v184;
          *(_OWORD *)(v85 + 208) = v183;
          *(_OWORD *)(v85 + 224) = v93;
          *(_OWORD *)(v85 + 192) = v92;
          v94 = v185;
          *(_BYTE *)(v85 + 248) = v186;
          *(_QWORD *)(v85 + 240) = v94;
          *(_QWORD *)(v85 + 256) = v168;
          *(_QWORD *)(v85 + 264) = v33;
          v187 = 0uLL;
          *(_BYTE *)(v85 + 272) = 0;
          a1[71].i64[1] = (uint64_t)(v34 + 35);
        }
        else
        {
          v202 = v156;
          v203 = v157;
          v204 = v158;
          v200 = v154;
          v201 = v155;
          v192 = v160;
          v191 = v159;
          v177 = 0uLL;
          v198 = v163;
          v199 = v164;
          v197 = v162;
          v195 = v166;
          v196 = v167;
          v193 = v153;
          v194 = v165;
          v190 = 0;
          v189 = 0xBFF0000000000000;
          v38 = v34 - 35;
          v39 = v34;
          v187 = 0uLL;
          if ((unint64_t)v34 >= 0x118)
          {
            v40 = v34 - 35;
            v39 = v34;
            do
            {
              *v39 = *v40;
              *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
              v41 = *(_OWORD *)(v40 + 7);
              v42 = *(_OWORD *)(v40 + 9);
              v43 = v40[11];
              *(_OWORD *)(v39 + 5) = *(_OWORD *)(v40 + 5);
              v39[11] = v43;
              *(_OWORD *)(v39 + 9) = v42;
              *(_OWORD *)(v39 + 7) = v41;
              *(_OWORD *)(v39 + 3) = *(_OWORD *)(v40 + 3);
              v44 = *((_OWORD *)v40 + 6);
              v39[14] = v40[14];
              *((_OWORD *)v39 + 6) = v44;
              *(_OWORD *)(v39 + 15) = *(_OWORD *)(v40 + 15);
              v40[15] = 0;
              v40[16] = 0;
              v39[17] = v40[17];
              v45 = *((_OWORD *)v40 + 9);
              v46 = *((_OWORD *)v40 + 11);
              *((_OWORD *)v39 + 10) = *((_OWORD *)v40 + 10);
              *((_OWORD *)v39 + 11) = v46;
              *((_OWORD *)v39 + 9) = v45;
              v47 = *((_OWORD *)v40 + 12);
              v48 = *((_OWORD *)v40 + 14);
              *((_OWORD *)v39 + 13) = *((_OWORD *)v40 + 13);
              *((_OWORD *)v39 + 14) = v48;
              *((_OWORD *)v39 + 12) = v47;
              v49 = v40[30];
              *((_BYTE *)v39 + 248) = *((_BYTE *)v40 + 248);
              v39[30] = v49;
              *((_OWORD *)v39 + 16) = *((_OWORD *)v40 + 16);
              v40[32] = 0;
              v40[33] = 0;
              *((_BYTE *)v39 + 272) = *((_BYTE *)v40 + 272);
              v39 += 35;
              v40 += 35;
            }
            while (v40 < v34);
          }
          v150 = v35;
          a1[71].i64[1] = (uint64_t)v39;
          if (v34 != v11 + 35)
          {
            do
            {
              v62 = v38 - 35;
              v63 = v34 - 35;
              *v63 = *(v38 - 35);
              *(_OWORD *)(v63 + 1) = *((_OWORD *)v38 - 17);
              v65 = *((_OWORD *)v38 - 14);
              v64 = *((_OWORD *)v38 - 13);
              v66 = *((_OWORD *)v38 - 15);
              *(v34 - 24) = *(v38 - 24);
              *((_OWORD *)v34 - 14) = v65;
              *((_OWORD *)v34 - 13) = v64;
              *((_OWORD *)v34 - 15) = v66;
              *((_OWORD *)v34 - 16) = *((_OWORD *)v38 - 16);
              v67 = *(_OWORD *)(v38 - 23);
              *(v34 - 21) = *(v38 - 21);
              *(_OWORD *)(v34 - 23) = v67;
              v68 = *((_OWORD *)v38 - 10);
              *(v38 - 20) = 0;
              *(v38 - 19) = 0;
              v69 = (std::__shared_weak_count *)*(v34 - 19);
              *((_OWORD *)v34 - 10) = v68;
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v69->__on_zero_shared)(v69, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              *(v34 - 18) = *(v38 - 18);
              v72 = *(_OWORD *)(v38 - 17);
              v73 = *(_OWORD *)(v38 - 15);
              *(_OWORD *)(v34 - 13) = *(_OWORD *)(v38 - 13);
              *(_OWORD *)(v34 - 15) = v73;
              *(_OWORD *)(v34 - 17) = v72;
              v74 = *(_OWORD *)(v38 - 11);
              v75 = *(_OWORD *)(v38 - 9);
              *(_OWORD *)(v34 - 7) = *(_OWORD *)(v38 - 7);
              *(_OWORD *)(v34 - 9) = v75;
              *(_OWORD *)(v34 - 11) = v74;
              v76 = *(v38 - 5);
              *((_BYTE *)v34 - 32) = *((_BYTE *)v38 - 32);
              *(v34 - 5) = v76;
              v77 = *(_OWORD *)(v38 - 3);
              *(v38 - 3) = 0;
              *(v38 - 2) = 0;
              v78 = (std::__shared_weak_count *)*(v34 - 2);
              *(_OWORD *)(v34 - 3) = v77;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v78->__on_zero_shared)(v78, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              *((_BYTE *)v34 - 8) = *((_BYTE *)v38 - 8);
              v34 -= 35;
              v38 -= 35;
            }
            while (v62 != v11);
          }
          *v11 = v9;
          v50 = v150 + 280 * v152;
          *(_OWORD *)(v50 + 8) = v193;
          *(_OWORD *)(v50 + 40) = v201;
          *(_OWORD *)(v50 + 56) = v202;
          *(_OWORD *)(v50 + 72) = v203;
          *(_QWORD *)(v50 + 88) = v204;
          *(_OWORD *)(v50 + 24) = v200;
          *(_OWORD *)(v50 + 96) = v191;
          *(_QWORD *)(v50 + 112) = v192;
          *(_QWORD *)(v50 + 120) = v32;
          v51 = *(std::__shared_weak_count **)(v50 + 128);
          *(_QWORD *)(v50 + 128) = *((_QWORD *)&v32 + 1);
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v51->__on_zero_shared)(v51, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = v150 + 280 * v152;
          *(_QWORD *)(v54 + 136) = v31;
          v55 = v198;
          *(_OWORD *)(v54 + 144) = v197;
          *(_OWORD *)(v54 + 160) = v55;
          v56 = v194;
          v57 = v195;
          *(_OWORD *)(v54 + 176) = v199;
          *(_OWORD *)(v54 + 192) = v56;
          v58 = v196;
          *(_OWORD *)(v54 + 208) = v57;
          *(_OWORD *)(v54 + 224) = v58;
          *(_QWORD *)(v54 + 240) = v189;
          *(_BYTE *)(v54 + 248) = v190;
          v59 = *(std::__shared_weak_count **)(v54 + 264);
          *(_QWORD *)(v54 + 256) = v168;
          *(_QWORD *)(v54 + 264) = v33;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v59->__on_zero_shared)(v59, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          *(_BYTE *)(v150 + 280 * v152 + 272) = 0;
        }
LABEL_108:
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
LABEL_109:
        if (v33)
        {
          v140 = (unint64_t *)&v33->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v33->__on_zero_shared)(v33, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
        if (*((_QWORD *)&v177 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v142->__on_zero_shared)(v142, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        a1[101].i8[2] = 0;
        a1[101].i8[0] = 0;
        a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B2300);
        v17 = 1;
        goto LABEL_120;
      }
      v81 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v34 - v35) >> 3) + 1;
      if (v81 > 0xEA0EA0EA0EA0EALL)
        sub_20E867F44();
      v82 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v37 - v35) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x75075075075075)
        v83 = 0xEA0EA0EA0EA0EALL;
      else
        v83 = v81;
      *(_QWORD *)&v202 = a1 + 72;
      v151 = (unint64_t *)v35;
      if (v83)
      {
        if (v83 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v84 = (char *)operator new(280 * v83);
      }
      else
      {
        v84 = 0;
      }
      v95 = (uint64_t)&v84[280 * v152];
      *(_QWORD *)&v200 = v84;
      *((_QWORD *)&v200 + 1) = v95;
      *(_QWORD *)&v201 = v95;
      *((_QWORD *)&v201 + 1) = &v84[280 * v83];
      if (v152 == v83)
      {
        if (v36 >= 1)
        {
          v96 = v152 + 2;
          if (v152 >= -1)
            v96 = v152 + 1;
          v97 = v96 >> 1;
          v98 = sub_20F5B6660(v95, v95, v95 - 280 * (v96 >> 1));
          v95 = *((_QWORD *)&v200 + 1) - 280 * v97;
          *((_QWORD *)&v200 + 1) = v95;
          goto LABEL_85;
        }
        if (v151 == v11)
          v99 = 1;
        else
          v99 = 2 * v152;
        if (v99 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v100 = (char *)operator new(280 * v99);
        v95 = (uint64_t)&v100[280 * (v99 >> 2)];
        *(_QWORD *)&v200 = v100;
        *((_QWORD *)&v200 + 1) = v95;
        *((_QWORD *)&v201 + 1) = &v100[280 * v99];
        if (v84)
          operator delete(v84);
      }
      v98 = v95;
LABEL_85:
      *(_QWORD *)v98 = v9;
      *(_OWORD *)(v98 + 8) = v169;
      v101 = v170;
      *(_OWORD *)(v98 + 40) = v171;
      v102 = v173;
      *(_OWORD *)(v98 + 56) = v172;
      *(_OWORD *)(v98 + 72) = v102;
      *(_QWORD *)(v98 + 88) = v174;
      *(_OWORD *)(v98 + 24) = v101;
      *(_QWORD *)(v98 + 112) = v176;
      *(_OWORD *)(v98 + 96) = v175;
      *(_OWORD *)(v98 + 120) = v177;
      v177 = 0uLL;
      *(_QWORD *)(v98 + 136) = v178;
      v103 = v179;
      v104 = v181;
      *(_OWORD *)(v98 + 160) = v180;
      *(_OWORD *)(v98 + 176) = v104;
      *(_OWORD *)(v98 + 144) = v103;
      v105 = v182;
      v106 = v184;
      *(_OWORD *)(v98 + 208) = v183;
      *(_OWORD *)(v98 + 224) = v106;
      *(_OWORD *)(v98 + 192) = v105;
      v107 = v185;
      *(_BYTE *)(v98 + 248) = v186;
      *(_QWORD *)(v98 + 240) = v107;
      *(_OWORD *)(v98 + 256) = v187;
      v187 = 0uLL;
      *(_BYTE *)(v98 + 272) = v188;
      v108 = v98 + 280;
      *(_QWORD *)&v201 = v98 + 280;
      v109 = (unint64_t *)a1[71].i64[0];
      if (v109 != v11)
      {
        v110 = 0;
        do
        {
          v111 = v95 + v110 * 8;
          v112 = (char *)&v11[v110];
          *(_QWORD *)(v95 + v110 * 8 - 280) = v11[v110 - 35];
          *(_OWORD *)(v95 + v110 * 8 - 272) = *(_OWORD *)&v11[v110 - 34];
          v114 = *(_OWORD *)&v11[v110 - 28];
          v113 = *(_OWORD *)&v11[v110 - 26];
          v115 = *(_OWORD *)&v11[v110 - 30];
          *(_QWORD *)(v111 - 192) = v11[v110 - 24];
          *(_OWORD *)(v111 - 224) = v114;
          *(_OWORD *)(v111 - 208) = v113;
          *(_OWORD *)(v111 - 240) = v115;
          *(_OWORD *)(v111 - 256) = *(_OWORD *)&v11[v110 - 32];
          v116 = *(_OWORD *)&v11[v110 - 23];
          *(_QWORD *)(v111 - 168) = v11[v110 - 21];
          *(_OWORD *)(v111 - 184) = v116;
          *(_OWORD *)(v111 - 160) = *(_OWORD *)&v11[v110 - 20];
          *((_QWORD *)v112 - 20) = 0;
          *((_QWORD *)v112 - 19) = 0;
          *(_QWORD *)(v111 - 144) = v11[v110 - 18];
          v117 = *(_OWORD *)&v11[v110 - 17];
          v118 = *(_OWORD *)&v11[v110 - 15];
          *(_OWORD *)(v111 - 104) = *(_OWORD *)&v11[v110 - 13];
          *(_OWORD *)(v111 - 120) = v118;
          *(_OWORD *)(v111 - 136) = v117;
          v119 = *(_OWORD *)&v11[v110 - 11];
          v120 = *(_OWORD *)&v11[v110 - 9];
          *(_OWORD *)(v111 - 56) = *(_OWORD *)&v11[v110 - 7];
          *(_OWORD *)(v111 - 72) = v120;
          *(_OWORD *)(v111 - 88) = v119;
          v121 = v11[v110 - 5];
          *(_BYTE *)(v111 - 32) = v11[v110 - 4];
          *(_QWORD *)(v111 - 40) = v121;
          *(_OWORD *)(v111 - 24) = *(_OWORD *)&v11[v110 - 3];
          *((_QWORD *)v112 - 3) = 0;
          *((_QWORD *)v112 - 2) = 0;
          *(_BYTE *)(v111 - 8) = v11[v110 - 1];
          v110 -= 35;
        }
        while (&v11[v110] != v109);
        v108 = v201;
        v95 += v110 * 8;
      }
      *((_QWORD *)&v200 + 1) = v95;
      v122 = (unint64_t *)a1[71].i64[1];
      if (v122 != v11)
      {
        do
        {
          *(_QWORD *)v108 = *v11;
          *(_OWORD *)(v108 + 8) = *(_OWORD *)(v11 + 1);
          v123 = *(_OWORD *)(v11 + 7);
          v124 = *(_OWORD *)(v11 + 9);
          v125 = v11[11];
          *(_OWORD *)(v108 + 40) = *(_OWORD *)(v11 + 5);
          *(_QWORD *)(v108 + 88) = v125;
          *(_OWORD *)(v108 + 72) = v124;
          *(_OWORD *)(v108 + 56) = v123;
          *(_OWORD *)(v108 + 24) = *(_OWORD *)(v11 + 3);
          v126 = *((_OWORD *)v11 + 6);
          *(_QWORD *)(v108 + 112) = v11[14];
          *(_OWORD *)(v108 + 96) = v126;
          *(_OWORD *)(v108 + 120) = *(_OWORD *)(v11 + 15);
          v11[15] = 0;
          v11[16] = 0;
          *(_QWORD *)(v108 + 136) = v11[17];
          v127 = *((_OWORD *)v11 + 9);
          v128 = *((_OWORD *)v11 + 11);
          *(_OWORD *)(v108 + 160) = *((_OWORD *)v11 + 10);
          *(_OWORD *)(v108 + 176) = v128;
          *(_OWORD *)(v108 + 144) = v127;
          v129 = *((_OWORD *)v11 + 12);
          v130 = *((_OWORD *)v11 + 14);
          *(_OWORD *)(v108 + 208) = *((_OWORD *)v11 + 13);
          *(_OWORD *)(v108 + 224) = v130;
          *(_OWORD *)(v108 + 192) = v129;
          v131 = v11[30];
          *(_BYTE *)(v108 + 248) = *((_BYTE *)v11 + 248);
          *(_QWORD *)(v108 + 240) = v131;
          *(_OWORD *)(v108 + 256) = *((_OWORD *)v11 + 16);
          v11[32] = 0;
          v11[33] = 0;
          *(_BYTE *)(v108 + 272) = *((_BYTE *)v11 + 272);
          v108 += 280;
          v11 += 35;
        }
        while (v11 != v122);
        v95 = *((_QWORD *)&v200 + 1);
        v11 = (unint64_t *)a1[71].i64[1];
      }
      v132 = (unint64_t *)a1[71].i64[0];
      a1[71].i64[0] = v95;
      a1[71].i64[1] = v108;
      v133 = a1[72].i64[0];
      a1[72].i64[0] = *((_QWORD *)&v201 + 1);
      *((_QWORD *)&v201 + 1) = v133;
      *(_QWORD *)&v200 = v132;
      *((_QWORD *)&v200 + 1) = v132;
      if (v11 != v132)
      {
        do
        {
          *(_QWORD *)&v201 = v11 - 35;
          v134 = (std::__shared_weak_count *)*(v11 - 2);
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = (std::__shared_weak_count *)*(v11 - 19);
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v11 = (unint64_t *)v201;
        }
        while ((unint64_t *)v201 != v132);
        v11 = (unint64_t *)v200;
      }
      if (v11)
        operator delete(v11);
      goto LABEL_108;
    }
    v17 = 0;
    --*(_DWORD *)(v31 + 8);
  }
LABEL_120:
  if (*((_QWORD *)&v168 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v168 + 1) + 16))(*((_QWORD *)&v168 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v168 + 1));
    }
  }
  if (*((_QWORD *)&v161 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
    }
  }
  return v17;
}

void sub_20FBF2110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_20F626C38(v54 - 176);
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FBF2134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF2150(int64x2_t *a1, unint64_t *a2, unsigned int *a3, unint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  _DWORD *v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  char *v94;

  v8 = *a2;
  v9 = (char *)a1[83].i64[0];
  v10 = (char *)a1[83].i64[1];
  if (v9 == v10)
  {
    v10 = (char *)a1[83].i64[0];
  }
  else if (*((_QWORD *)v10 - 14) >= v8)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[112 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 112;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v86 = *(_OWORD *)a2;
    v87 = *((_OWORD *)a2 + 1);
    v88 = a2[4];
    *(_QWORD *)&v91 = a4;
    *((_QWORD *)&v91 + 1) = a5;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  else
  {
    v86 = *(_OWORD *)a2;
    v87 = *((_OWORD *)a2 + 1);
    v88 = a2[4];
    v91 = a4;
  }
  v21 = *a3;
  v22 = a1[30].i64[1];
  v23 = a1[31].i64[0];
  if (v23 != v22)
  {
    v24 = (v23 - v22) >> 4;
    do
    {
      v25 = v24 >> 1;
      v26 = (unsigned int *)(v22 + 16 * (v24 >> 1));
      v28 = *v26;
      v27 = v26 + 4;
      v24 += ~(v24 >> 1);
      if (v28 < v21)
        v22 = (uint64_t)v27;
      else
        v24 = v25;
    }
    while (v24);
  }
  if (v22 == v23 || *(_DWORD *)v22 != v21)
  {
    v16 = 0;
    if (*((_QWORD *)&v88 + 1))
      --*(_DWORD *)(*((_QWORD *)&v88 + 1) + 8);
  }
  else
  {
    *((_QWORD *)&v88 + 1) = *(_QWORD *)(v22 + 8);
    ++*(_DWORD *)(*((_QWORD *)&v88 + 1) + 8);
    if (*(_BYTE *)(*((_QWORD *)&v88 + 1) + 20))
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      v92 = v91;
      *((_QWORD *)&v91 + 1) = 0;
      v30 = (char *)a1[83].i64[1];
      if (v30 == v10 || *(_QWORD *)v10 != v8)
      {
        v31 = (char *)a1[83].i64[0];
        v32 = a1[84].u64[0];
        if ((unint64_t)v30 >= v32)
        {
          v49 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v31) >> 4);
          v50 = 0x6DB6DB6DB6DB6DB7 * ((v30 - v31) >> 4) + 1;
          if (v50 > 0x249249249249249)
            sub_20E867F44();
          v51 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - (_QWORD)v31) >> 4);
          if (2 * v51 > v50)
            v50 = 2 * v51;
          if (v51 >= 0x124924924924924)
            v52 = 0x249249249249249;
          else
            v52 = v50;
          if (v52)
          {
            if (v52 > 0x249249249249249)
              sub_20E877A38();
            v53 = (char *)operator new(112 * v52);
          }
          else
          {
            v53 = 0;
          }
          v59 = &v53[16 * ((v10 - v31) >> 4)];
          v94 = &v53[112 * v52];
          if (v49 == v52)
          {
            if (v10 - v31 < 1)
            {
              if (v31 == v10)
                v61 = 1;
              else
                v61 = 0xDB6DB6DB6DB6DB6ELL * ((v10 - v31) >> 4);
              if (v61 > 0x249249249249249)
                sub_20E877A38();
              v62 = (char *)operator new(112 * v61);
              v59 = &v62[112 * (v61 >> 2)];
              v94 = &v62[112 * v61];
              if (v53)
                operator delete(v53);
            }
            else
            {
              v60 = v49 + 2;
              if (v49 >= -1)
                v60 = v49 + 1;
              v59 -= 112 * (v60 >> 1);
            }
          }
          *(_QWORD *)v59 = v8;
          *(_OWORD *)(v59 + 8) = v86;
          *(_OWORD *)(v59 + 24) = v87;
          *(_OWORD *)(v59 + 40) = v88;
          *((_QWORD *)v59 + 7) = v89;
          *((_QWORD *)v59 + 8) = v90;
          *((_QWORD *)v59 + 9) = 0xBFF0000000000000;
          v59[80] = 0;
          *(_OWORD *)(v59 + 88) = v92;
          v59[104] = 0;
          v63 = (uint64_t)(v59 + 112);
          v64 = (char *)a1[83].i64[0];
          if (v64 != v10)
          {
            v65 = 0;
            do
            {
              v66 = &v10[v65];
              v67 = &v59[v65];
              *((_QWORD *)v67 - 14) = *(_QWORD *)&v10[v65 - 112];
              v68 = *(_OWORD *)&v10[v65 - 104];
              v69 = *(_OWORD *)&v10[v65 - 88];
              *(_OWORD *)(v67 - 72) = *(_OWORD *)&v10[v65 - 72];
              *(_OWORD *)(v67 - 88) = v69;
              *(_OWORD *)(v67 - 104) = v68;
              *((_QWORD *)v67 - 7) = *(_QWORD *)&v10[v65 - 56];
              *((_QWORD *)v67 - 6) = *(_QWORD *)&v10[v65 - 48];
              v70 = *(_QWORD *)&v10[v65 - 40];
              *(v67 - 32) = v10[v65 - 32];
              *((_QWORD *)v67 - 5) = v70;
              *(_OWORD *)(v67 - 24) = *(_OWORD *)&v10[v65 - 24];
              *((_QWORD *)v66 - 3) = 0;
              *((_QWORD *)v66 - 2) = 0;
              *(v67 - 8) = v10[v65 - 8];
              v65 -= 112;
            }
            while (&v10[v65] != v64);
            v63 = (uint64_t)(v59 + 112);
            v59 += v65;
          }
          v71 = (char *)a1[83].i64[1];
          if (v71 != v10)
          {
            do
            {
              *(_QWORD *)v63 = *(_QWORD *)v10;
              v72 = *(_OWORD *)(v10 + 8);
              v73 = *(_OWORD *)(v10 + 24);
              *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + 40);
              *(_OWORD *)(v63 + 24) = v73;
              *(_OWORD *)(v63 + 8) = v72;
              *(_QWORD *)(v63 + 56) = *((_QWORD *)v10 + 7);
              *(_QWORD *)(v63 + 64) = *((_QWORD *)v10 + 8);
              v74 = *((_QWORD *)v10 + 9);
              *(_BYTE *)(v63 + 80) = v10[80];
              *(_QWORD *)(v63 + 72) = v74;
              *(_OWORD *)(v63 + 88) = *(_OWORD *)(v10 + 88);
              *((_QWORD *)v10 + 11) = 0;
              *((_QWORD *)v10 + 12) = 0;
              *(_BYTE *)(v63 + 104) = v10[104];
              v63 += 112;
              v10 += 112;
            }
            while (v10 != v71);
            v10 = (char *)a1[83].i64[1];
          }
          v75 = (char *)a1[83].i64[0];
          a1[83].i64[0] = (uint64_t)v59;
          a1[83].i64[1] = v63;
          a1[84].i64[0] = (uint64_t)v94;
          if (v10 != v75)
          {
            do
            {
              v93 = v10 - 112;
              v76 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v10 = v93;
            }
            while (v93 != v75);
            v10 = v75;
          }
          if (v10)
            operator delete(v10);
        }
        else if (v10 == v30)
        {
          *(_QWORD *)v30 = v8;
          v58 = &v31[16 * ((v10 - v31) >> 4)];
          *(_OWORD *)(v58 + 40) = v88;
          *(_OWORD *)(v58 + 24) = v87;
          *(_OWORD *)(v58 + 8) = v86;
          *((_QWORD *)v58 + 7) = v89;
          *((_QWORD *)v58 + 8) = v90;
          v58[80] = 0;
          *((_QWORD *)v58 + 9) = 0xBFF0000000000000;
          *((_QWORD *)v58 + 11) = v91;
          *((_QWORD *)v58 + 12) = v29;
          v58[104] = 0;
          a1[83].i64[1] = (uint64_t)(v30 + 112);
        }
        else
        {
          v84 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v31) >> 4);
          v85 = a1[83].i64[0];
          v33 = v30 - 112;
          v34 = a1[83].i64[1];
          if ((unint64_t)v30 >= 0x70)
          {
            v35 = v30 - 112;
            v34 = a1[83].i64[1];
            do
            {
              *(_QWORD *)v34 = *(_QWORD *)v35;
              v36 = *(_OWORD *)(v35 + 8);
              v37 = *(_OWORD *)(v35 + 24);
              *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
              *(_OWORD *)(v34 + 24) = v37;
              *(_OWORD *)(v34 + 8) = v36;
              *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
              *(_QWORD *)(v34 + 64) = *((_QWORD *)v35 + 8);
              v38 = *((_QWORD *)v35 + 9);
              *(_BYTE *)(v34 + 80) = v35[80];
              *(_QWORD *)(v34 + 72) = v38;
              *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
              *((_QWORD *)v35 + 11) = 0;
              *((_QWORD *)v35 + 12) = 0;
              *(_BYTE *)(v34 + 104) = v35[104];
              v34 += 112;
              v35 += 112;
            }
            while (v35 < v30);
          }
          a1[83].i64[1] = v34;
          if (v30 != v10 + 112)
          {
            v39 = v30 - 112;
            v40 = v30;
            do
            {
              v41 = *((_QWORD *)v39 - 14);
              v39 -= 112;
              *((_QWORD *)v40 - 14) = v41;
              v40 -= 112;
              v42 = *(_OWORD *)(v39 + 8);
              v43 = *(_OWORD *)(v39 + 24);
              *((_QWORD *)v40 + 5) = *((_QWORD *)v39 + 5);
              *(_OWORD *)(v40 + 24) = v43;
              *(_OWORD *)(v40 + 8) = v42;
              *((_QWORD *)v40 + 6) = *((_QWORD *)v39 + 6);
              *((_QWORD *)v40 + 7) = *((_QWORD *)v39 + 7);
              *((_QWORD *)v40 + 8) = *((_QWORD *)v39 + 8);
              v44 = *((_QWORD *)v39 + 9);
              v40[80] = v39[80];
              *((_QWORD *)v40 + 9) = v44;
              v45 = *(_OWORD *)(v39 + 88);
              *((_QWORD *)v39 + 11) = 0;
              *((_QWORD *)v39 + 12) = 0;
              v46 = (std::__shared_weak_count *)*((_QWORD *)v40 + 12);
              *(_OWORD *)(v40 + 88) = v45;
              if (v46)
              {
                v47 = (unint64_t *)&v46->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              *(v30 - 8) = *(v33 - 8);
              v30 = v40;
              v33 = v39;
            }
            while (v39 != v10);
          }
          *(_QWORD *)v10 = v8;
          v54 = v85 + 112 * v84;
          *(_OWORD *)(v54 + 8) = v86;
          *(_OWORD *)(v54 + 24) = v87;
          *(_OWORD *)(v54 + 40) = v88;
          *(_QWORD *)(v54 + 56) = v89;
          *(_QWORD *)(v54 + 64) = v90;
          *(_QWORD *)(v54 + 72) = 0xBFF0000000000000;
          *(_BYTE *)(v54 + 80) = 0;
          v55 = *(std::__shared_weak_count **)(v54 + 96);
          *(_QWORD *)(v54 + 88) = v91;
          *(_QWORD *)(v54 + 96) = v29;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          *(_BYTE *)(v85 + 112 * v84 + 104) = 0;
        }
        v29 = 0;
      }
      if (v29)
      {
        v79 = (unint64_t *)&v29->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      a1[101].i8[2] = 0;
      a1[101].i8[0] = 0;
      v16 = 1;
      a1[100] = vaddq_s64(a1[100], vdupq_n_s64(1uLL));
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(*((_QWORD *)&v88 + 1) + 8);
    }
  }
  if (*((_QWORD *)&v91 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v91 + 1) + 16))(*((_QWORD *)&v91 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v91 + 1));
    }
  }
  return v16;
}

void sub_20FBF2A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20FBB1F88(v29 - 144);
  sub_20F8AF03C((uint64_t)&a29);
  sub_20F8AF0A4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBF2A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20F8AF03C((uint64_t)&a29);
  sub_20F8AF0A4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF2AB4(int64x2_t *a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  _BYTE *v81;
  int v82;
  int v83;
  _BYTE *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  char *v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  char v127;
  int v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _OWORD v144[2];
  char v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unint64_t v151;
  char v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  int64x2_t *v157;
  unint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[2];
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = (char *)a1[86].i64[0];
  v10 = (char *)a1[86].i64[1];
  if (v9 == v10)
  {
    v10 = (char *)a1[86].i64[0];
  }
  else if (*((_QWORD *)v10 - 26) >= v8)
  {
    v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[208 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 208;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v131 = *a2;
  v132 = a2[1];
  v133 = a2[2];
  LOBYTE(v134) = 0;
  v136 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v134 = a2[3];
    v135 = a2[4];
    v136 = 1;
  }
  *(_QWORD *)&v141 = a4;
  *((_QWORD *)&v141 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = a1[48].i64[1];
  v24 = a1[49].i64[0];
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)(v23 + 16 * (v25 >> 1));
      v29 = *v27;
      v28 = v27 + 4;
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = (uint64_t)v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(v23 + 8);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v142 = v132;
      v143 = v133;
      LOBYTE(v144[0]) = 0;
      v145 = 0;
      if (v136)
      {
        v144[0] = v134;
        v144[1] = v135;
        v145 = 1;
      }
      v147 = v137;
      v148 = v138;
      v149 = v139;
      v150 = v140;
      v146 = v30;
      v151 = 0xBFF0000000000000;
      v152 = 0;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v153 = v141;
      *((_QWORD *)&v141 + 1) = 0;
      v154 = 0;
      v32 = (char *)a1[86].i64[1];
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v142;
        v33 = a1[86].i64[0];
        v34 = (uint64_t)&v10[-v33];
        v129 = (char *)v33;
        v130 = (uint64_t)&v10[-v33] / 208;
        v35 = (char *)(v33 + 208 * v130);
        v36 = a1[87].u64[0];
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v32[-v33] >> 4) + 1;
          if (v37 > 0x13B13B13B13B13BLL)
            sub_20E867F44();
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - v33) >> 4) > v37)
            v37 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - v33) >> 4);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v36 - v33) >> 4)) >= 0x9D89D89D89D89DLL)
            v38 = 0x13B13B13B13B13BLL;
          else
            v38 = v37;
          v157 = a1 + 87;
          if (v38)
          {
            if (v38 > 0x13B13B13B13B13BLL)
              sub_20E877A38();
            v39 = (char *)operator new(208 * v38);
            v40 = v130;
            a2 = &v142;
          }
          else
          {
            v39 = 0;
            v40 = (uint64_t)&v10[-v33] / 208;
          }
          v50 = &v39[208 * v40];
          *(_QWORD *)&v155 = v39;
          *((_QWORD *)&v155 + 1) = v50;
          *(_QWORD *)&v156 = v50;
          *((_QWORD *)&v156 + 1) = &v39[208 * v38];
          if (v40 == v38)
          {
            if (v34 < 1)
            {
              if (v129 == v10)
                v86 = 1;
              else
                v86 = 2 * v40;
              if (v86 > 0x13B13B13B13B13BLL)
                sub_20E877A38();
              v87 = (char *)operator new(208 * v86);
              v50 = &v87[208 * (v86 >> 2)];
              *(_QWORD *)&v155 = v87;
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
              *((_QWORD *)&v156 + 1) = &v87[208 * v86];
              if (v39)
                operator delete(v39);
              a2 = &v142;
            }
            else
            {
              v51 = v40 + 2;
              if (v40 >= -1)
                v51 = v40 + 1;
              v50 -= 208 * (v51 >> 1);
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
            }
          }
          *(_QWORD *)v50 = v8;
          *(_OWORD *)(v50 + 8) = v131;
          v88 = v143;
          *(_OWORD *)(v50 + 24) = v142;
          *(_OWORD *)(v50 + 40) = v88;
          v50[56] = 0;
          v50[88] = 0;
          if (v145)
          {
            v89 = v144[1];
            *(_OWORD *)(v50 + 56) = v144[0];
            *(_OWORD *)(v50 + 72) = v89;
            v50[88] = 1;
          }
          *((_QWORD *)v50 + 12) = v146;
          v90 = v148;
          *(_OWORD *)(v50 + 104) = v147;
          *(_OWORD *)(v50 + 120) = v90;
          v91 = v149;
          *(_OWORD *)(v50 + 152) = v150;
          *(_OWORD *)(v50 + 136) = v91;
          *((_QWORD *)v50 + 21) = v151;
          v50[176] = v152;
          *(_OWORD *)(v50 + 184) = v153;
          v153 = 0uLL;
          v50[200] = v154;
          v92 = (uint64_t)(v50 + 208);
          *(_QWORD *)&v156 = v50 + 208;
          v93 = (char *)a1[86].i64[0];
          if (v93 != v35)
          {
            v94 = 0;
            do
            {
              v98 = &v50[v94];
              v99 = &v35[v94];
              *((_QWORD *)v98 - 26) = *(_QWORD *)&v35[v94 - 208];
              *(_OWORD *)(v98 - 200) = *(_OWORD *)&v35[v94 - 200];
              v100 = *(_OWORD *)&v35[v94 - 184];
              *(_OWORD *)(v98 - 168) = *(_OWORD *)&v35[v94 - 168];
              *(_OWORD *)(v98 - 184) = v100;
              v50[v94 - 152] = 0;
              *(v98 - 120) = 0;
              if (v35[v94 - 120])
              {
                v101 = *(_OWORD *)(v99 - 136);
                *(_OWORD *)&v50[v94 - 152] = *(_OWORD *)(v99 - 152);
                *(_OWORD *)&v50[v94 - 136] = v101;
                *(v98 - 120) = 1;
              }
              *((_QWORD *)v98 - 14) = *((_QWORD *)v99 - 14);
              v95 = *(_OWORD *)(v99 - 104);
              *(_OWORD *)(v98 - 88) = *(_OWORD *)(v99 - 88);
              *(_OWORD *)(v98 - 104) = v95;
              v96 = *(_OWORD *)(v99 - 72);
              *(_OWORD *)(v98 - 56) = *(_OWORD *)(v99 - 56);
              *(_OWORD *)(v98 - 72) = v96;
              v97 = *((_QWORD *)v99 - 5);
              *(v98 - 32) = *(v99 - 32);
              *((_QWORD *)v98 - 5) = v97;
              *(_OWORD *)(v98 - 24) = *(_OWORD *)(v99 - 24);
              *((_QWORD *)v99 - 3) = 0;
              *((_QWORD *)v99 - 2) = 0;
              *(v98 - 8) = *(v99 - 8);
              v94 -= 208;
            }
            while (&v35[v94] != v93);
            v92 = v156;
            v50 += v94;
          }
          v102 = (char *)a1[86].i64[1];
          if (v102 != v35)
          {
            v103 = 0;
            do
            {
              v107 = &v35[v103];
              v108 = v92 + v103;
              *(_QWORD *)v108 = *(_QWORD *)&v35[v103];
              *(_OWORD *)(v108 + 8) = *(_OWORD *)&v35[v103 + 8];
              v109 = *(_OWORD *)&v35[v103 + 24];
              *(_OWORD *)(v108 + 40) = *(_OWORD *)&v35[v103 + 40];
              *(_OWORD *)(v108 + 24) = v109;
              *(_BYTE *)(v92 + v103 + 56) = 0;
              *(_BYTE *)(v108 + 88) = 0;
              if (v35[v103 + 88])
              {
                v110 = *(_OWORD *)(v107 + 72);
                *(_OWORD *)(v92 + v103 + 56) = *(_OWORD *)(v107 + 56);
                *(_OWORD *)(v92 + v103 + 72) = v110;
                *(_BYTE *)(v108 + 88) = 1;
              }
              *(_QWORD *)(v108 + 96) = *((_QWORD *)v107 + 12);
              v104 = *(_OWORD *)(v107 + 104);
              *(_OWORD *)(v108 + 120) = *(_OWORD *)(v107 + 120);
              *(_OWORD *)(v108 + 104) = v104;
              v105 = *(_OWORD *)(v107 + 136);
              *(_OWORD *)(v108 + 152) = *(_OWORD *)(v107 + 152);
              *(_OWORD *)(v108 + 136) = v105;
              v106 = *((_QWORD *)v107 + 21);
              *(_BYTE *)(v108 + 176) = v107[176];
              *(_QWORD *)(v108 + 168) = v106;
              *(_OWORD *)(v108 + 184) = *(_OWORD *)(v107 + 184);
              *((_QWORD *)v107 + 23) = 0;
              *((_QWORD *)v107 + 24) = 0;
              *(_BYTE *)(v108 + 200) = v107[200];
              v103 += 208;
            }
            while (v107 + 208 != v102);
            v35 = (char *)a1[86].i64[1];
            v92 += v103;
          }
          v111 = (char *)a1[86].i64[0];
          a1[86].i64[0] = (uint64_t)v50;
          a1[86].i64[1] = v92;
          v112 = a1[87].i64[0];
          a1[87].i64[0] = *((_QWORD *)&v156 + 1);
          *((_QWORD *)&v156 + 1) = v112;
          *(_QWORD *)&v155 = v111;
          *((_QWORD *)&v155 + 1) = v111;
          if (v35 != v111)
          {
            do
            {
              *(_QWORD *)&v156 = v35 - 208;
              v113 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v113)
              {
                v114 = (unint64_t *)&v113->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v35 = (char *)v156;
            }
            while ((char *)v156 != v111);
            v35 = (char *)v155;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v41 = v33 + 208 * v130;
          *(_OWORD *)(v41 + 8) = v131;
          v42 = v142;
          v43 = v143;
          *(_BYTE *)(v41 + 56) = 0;
          v44 = v41 + 56;
          *(_OWORD *)(v44 - 32) = v42;
          *(_OWORD *)(v44 - 16) = v43;
          *(_BYTE *)(v44 + 32) = 0;
          if (v136)
          {
            v45 = v144[1];
            *(_OWORD *)v44 = v144[0];
            *(_OWORD *)(v44 + 16) = v45;
            *(_BYTE *)(v44 + 32) = 1;
          }
          v46 = v33 + 208 * v130;
          *(_QWORD *)(v46 + 96) = v30;
          v47 = v147;
          *(_OWORD *)(v46 + 120) = v148;
          *(_OWORD *)(v46 + 104) = v47;
          v48 = v149;
          *(_OWORD *)(v46 + 152) = v150;
          *(_OWORD *)(v46 + 136) = v48;
          v49 = v151;
          *(_BYTE *)(v46 + 176) = v152;
          *(_QWORD *)(v46 + 168) = v49;
          *(_QWORD *)(v46 + 184) = v141;
          *(_QWORD *)(v46 + 192) = v31;
          v153 = 0uLL;
          *(_BYTE *)(v46 + 200) = 0;
          a1[86].i64[1] = (uint64_t)(v32 + 208);
        }
        else
        {
          v164 = v131;
          v155 = v132;
          v156 = v133;
          if (v136)
          {
            v127 = v144[0];
            v165[0] = *(_OWORD *)((char *)v144 + 1);
            *(_OWORD *)((char *)v165 + 15) = v144[1];
            v128 = 1;
          }
          else
          {
            v127 = 0;
            v128 = 0;
          }
          v162 = v137;
          v163 = v138;
          v160 = v139;
          v161 = v140;
          v158 = v151;
          v159 = v152;
          v52 = v35 + 208;
          v53 = v32 - 208;
          v54 = v32;
          v153 = 0uLL;
          if ((unint64_t)v32 >= 0xD0)
          {
            v55 = 0;
            v56 = v33 + 16 * ((v32 - v52) >> 4) + 208 * v130;
            do
            {
              v60 = &v53[v55];
              v61 = &v32[v55];
              *(_QWORD *)v61 = *(_QWORD *)&v53[v55];
              *(_OWORD *)(v61 + 8) = *(_OWORD *)&v53[v55 + 8];
              v62 = *(_OWORD *)&v53[v55 + 24];
              *(_OWORD *)(v61 + 40) = *(_OWORD *)&v53[v55 + 40];
              *(_OWORD *)(v61 + 24) = v62;
              v32[v55 + 56] = 0;
              v61[88] = 0;
              if (v53[v55 + 88])
              {
                v63 = *(_OWORD *)(v56 + v55 + 72);
                *(_OWORD *)&v32[v55 + 56] = *(_OWORD *)(v56 + v55 + 56);
                *(_OWORD *)&v32[v55 + 72] = v63;
                v61[88] = 1;
              }
              *((_QWORD *)v61 + 12) = *((_QWORD *)v60 + 12);
              v57 = *(_OWORD *)(v60 + 104);
              *(_OWORD *)(v61 + 120) = *(_OWORD *)(v60 + 120);
              *(_OWORD *)(v61 + 104) = v57;
              v58 = *(_OWORD *)(v60 + 136);
              *(_OWORD *)(v61 + 152) = *(_OWORD *)(v60 + 152);
              *(_OWORD *)(v61 + 136) = v58;
              v59 = *((_QWORD *)v60 + 21);
              v61[176] = v60[176];
              *((_QWORD *)v61 + 21) = v59;
              *(_OWORD *)(v61 + 184) = *(_OWORD *)(v60 + 184);
              *((_QWORD *)v60 + 23) = 0;
              *((_QWORD *)v60 + 24) = 0;
              v61[200] = v60[200];
              v55 += 208;
            }
            while (v60 + 208 < v32);
            v54 = &v32[v55];
          }
          a1[86].i64[1] = (uint64_t)v54;
          if (v32 != v52)
          {
            v64 = v32 - 208;
            v65 = v32;
            do
            {
              v66 = *((_QWORD *)v64 - 26);
              v64 -= 208;
              *((_QWORD *)v65 - 26) = v66;
              v65 -= 208;
              *(_OWORD *)(v65 + 8) = *(_OWORD *)(v64 + 8);
              v67 = *(_OWORD *)(v64 + 24);
              *(_OWORD *)(v65 + 40) = *(_OWORD *)(v64 + 40);
              *(_OWORD *)(v65 + 24) = v67;
              v68 = v65 + 56;
              v69 = v64 + 56;
              if (v65[88] == v64[88])
              {
                if (v65[88])
                {
                  v70 = *(_OWORD *)(v64 + 72);
                  *v68 = *v69;
                  *(_OWORD *)(v65 + 72) = v70;
                }
              }
              else if (v65[88])
              {
                *(v32 - 120) = 0;
              }
              else
              {
                v71 = *(_OWORD *)(v64 + 72);
                *v68 = *v69;
                *(_OWORD *)(v65 + 72) = v71;
                *(v32 - 120) = 1;
              }
              *((_QWORD *)v32 - 14) = *((_QWORD *)v53 - 14);
              v72 = *(_OWORD *)(v53 - 104);
              *(_OWORD *)(v32 - 88) = *(_OWORD *)(v53 - 88);
              *(_OWORD *)(v32 - 104) = v72;
              v73 = *(_OWORD *)(v53 - 72);
              *(_OWORD *)(v32 - 56) = *(_OWORD *)(v53 - 56);
              *(_OWORD *)(v32 - 72) = v73;
              v74 = *((_QWORD *)v53 - 5);
              *(v32 - 32) = *(v53 - 32);
              *((_QWORD *)v32 - 5) = v74;
              v75 = *(_OWORD *)(v53 - 24);
              *((_QWORD *)v53 - 3) = 0;
              *((_QWORD *)v53 - 2) = 0;
              v76 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v75;
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v76->__on_zero_shared)(v76, a2);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              *(v32 - 8) = *(v53 - 8);
              v32 = v65;
              v53 = v64;
            }
            while (v64 != v35);
          }
          *(_QWORD *)v35 = v8;
          v79 = v130;
          v80 = &v129[208 * v130];
          v83 = v80[88];
          v81 = v80 + 88;
          v82 = v83;
          *((_OWORD *)v81 - 5) = v164;
          *((_OWORD *)v81 - 4) = v155;
          *((_OWORD *)v81 - 3) = v156;
          v84 = v81 - 32;
          if (v83 == v128)
          {
            v85 = v141;
            if (v82)
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
            }
          }
          else
          {
            v85 = v141;
            if (v82)
            {
              *v81 = 0;
            }
            else
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
              *v81 = 1;
            }
          }
          v116 = v163;
          v117 = &v129[208 * v130];
          *(_OWORD *)(v117 + 104) = v162;
          *(_OWORD *)(v117 + 120) = v116;
          v118 = v161;
          *(_OWORD *)(v117 + 136) = v160;
          *((_QWORD *)v117 + 12) = v30;
          *(_OWORD *)(v117 + 152) = v118;
          *((_QWORD *)v117 + 21) = v158;
          v117[176] = v159;
          v119 = (std::__shared_weak_count *)*((_QWORD *)v117 + 24);
          *((_QWORD *)v117 + 23) = v85;
          *((_QWORD *)v117 + 24) = v31;
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            v79 = v130;
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v119->__on_zero_shared)(v119, a2);
              std::__shared_weak_count::__release_weak(v119);
              v79 = v130;
            }
          }
          v129[208 * v79 + 200] = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      }
      if (v31)
      {
        v122 = (unint64_t *)&v31->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      a1[101].i8[2] = 0;
      a1[101].i8[0] = 0;
      a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B84C0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v141 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  return v16;
}

void sub_20FBF3754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20FB817A8((uint64_t)&a67);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBF3778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF3794(int64x2_t *a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  char v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  _QWORD *v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  _QWORD *v139;
  _BYTE v140[24];
  char v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  __int128 v149;
  char v150;
  __int128 v151;
  char *v152;
  char *v153;
  __int8 *v154;
  unint64_t v155;
  char v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  _BYTE v162[23];
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = (char *)a1[87].i64[1];
  v10 = (char *)a1[88].i64[0];
  if (v9 == v10)
  {
    v10 = (char *)a1[87].i64[1];
  }
  else if (*((_QWORD *)v10 - 22) >= v8)
  {
    v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[176 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 176;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v127 = *a2;
  v128 = a2[1];
  v129 = (_QWORD *)*((_QWORD *)a2 + 4);
  LOBYTE(v130) = 0;
  v132 = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v130 = *(__int128 *)((char *)a2 + 40);
    v131 = *((_QWORD *)a2 + 7);
    v132 = 1;
  }
  *(_QWORD *)&v137 = a4;
  *((_QWORD *)&v137 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = a1[54].i64[1];
  v24 = a1[55].i64[0];
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)(v23 + 16 * (v25 >> 1));
      v29 = *v27;
      v28 = v27 + 4;
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = (uint64_t)v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(v23 + 8);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v138 = v128;
      v139 = v129;
      v140[0] = 0;
      v141 = 0;
      if (v132)
      {
        *(_OWORD *)v140 = v130;
        *(_QWORD *)&v140[16] = v131;
        v141 = 1;
      }
      v143 = v133;
      v142 = v30;
      v144 = v134;
      v145 = v135;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      v146 = v136;
      v147 = 0xBFF0000000000000;
      v148 = 0;
      v149 = v137;
      *((_QWORD *)&v137 + 1) = 0;
      v150 = 0;
      v32 = (char *)a1[88].i64[0];
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v138;
        v33 = a1[87].i64[1];
        v34 = (uint64_t)&v10[-v33];
        v126 = (uint64_t)&v10[-v33] / 176;
        v35 = (char *)(v33 + 176 * v126);
        v36 = a1[88].u64[1];
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v32[-v33] >> 4) + 1;
          if (v37 > 0x1745D1745D1745DLL)
            sub_20E867F44();
          if (0x5D1745D1745D1746 * ((uint64_t)(v36 - v33) >> 4) > v37)
            v37 = 0x5D1745D1745D1746 * ((uint64_t)(v36 - v33) >> 4);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v36 - v33) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
            v38 = 0x1745D1745D1745DLL;
          else
            v38 = v37;
          v154 = &a1[88].i8[8];
          if (v38)
          {
            if (v38 > 0x1745D1745D1745DLL)
              sub_20E877A38();
            v39 = (char *)operator new(176 * v38);
            v40 = (char *)v33;
            v41 = (uint64_t)&v10[-v33] / 176;
            a2 = &v138;
          }
          else
          {
            v40 = (char *)v33;
            v39 = 0;
            v41 = (uint64_t)&v10[-v33] / 176;
          }
          v51 = &v39[176 * v41];
          *(_QWORD *)&v151 = v39;
          *((_QWORD *)&v151 + 1) = v51;
          v152 = v51;
          v153 = &v39[176 * v38];
          if (v41 == v38)
          {
            if (v34 < 1)
            {
              if (v40 == v10)
                v87 = 1;
              else
                v87 = 2 * v41;
              if (v87 > 0x1745D1745D1745DLL)
                sub_20E877A38();
              v88 = (char *)operator new(176 * v87);
              v51 = &v88[176 * (v87 >> 2)];
              *(_QWORD *)&v151 = v88;
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
              v153 = &v88[176 * v87];
              if (v39)
                operator delete(v39);
              a2 = &v138;
            }
            else
            {
              v52 = v41 + 2;
              if (v41 >= -1)
                v52 = v41 + 1;
              v51 -= 176 * (v52 >> 1);
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
            }
          }
          *(_QWORD *)v51 = v8;
          *(_OWORD *)(v51 + 8) = v127;
          *(_OWORD *)(v51 + 24) = v138;
          *((_QWORD *)v51 + 5) = v139;
          v51[48] = 0;
          v51[72] = 0;
          if (v141)
          {
            *((_OWORD *)v51 + 3) = *(_OWORD *)v140;
            *((_QWORD *)v51 + 8) = *(_QWORD *)&v140[16];
            v51[72] = 1;
          }
          *((_QWORD *)v51 + 10) = v142;
          *(_OWORD *)(v51 + 88) = v143;
          *((_QWORD *)v51 + 13) = v144;
          *((_QWORD *)v51 + 16) = v146;
          *((_OWORD *)v51 + 7) = v145;
          *((_QWORD *)v51 + 17) = v147;
          v51[144] = v148;
          *(_OWORD *)(v51 + 152) = v149;
          v149 = 0uLL;
          v51[168] = v150;
          v89 = (uint64_t)(v51 + 176);
          v152 = v51 + 176;
          v90 = (char *)a1[87].i64[1];
          if (v90 != v35)
          {
            v91 = 0;
            do
            {
              v95 = &v51[v91];
              v96 = &v35[v91];
              *((_QWORD *)v95 - 22) = *(_QWORD *)&v35[v91 - 176];
              *(_OWORD *)(v95 - 168) = *(_OWORD *)&v35[v91 - 168];
              v97 = *(_OWORD *)&v35[v91 - 152];
              *((_QWORD *)v95 - 17) = *(_QWORD *)&v35[v91 - 136];
              *(_OWORD *)(v95 - 152) = v97;
              v51[v91 - 128] = 0;
              *(v95 - 104) = 0;
              if (v35[v91 - 104])
              {
                v98 = *((_OWORD *)v96 - 8);
                *(_QWORD *)&v51[v91 - 112] = *((_QWORD *)v96 - 14);
                *(_OWORD *)&v51[v91 - 128] = v98;
                *(v95 - 104) = 1;
              }
              *((_QWORD *)v95 - 12) = *((_QWORD *)v96 - 12);
              v92 = *(_OWORD *)(v96 - 88);
              *((_QWORD *)v95 - 9) = *((_QWORD *)v96 - 9);
              *(_OWORD *)(v95 - 88) = v92;
              v93 = *((_OWORD *)v96 - 4);
              *((_QWORD *)v95 - 6) = *((_QWORD *)v96 - 6);
              *((_OWORD *)v95 - 4) = v93;
              v94 = *((_QWORD *)v96 - 5);
              *(v95 - 32) = *(v96 - 32);
              *((_QWORD *)v95 - 5) = v94;
              *(_OWORD *)(v95 - 24) = *(_OWORD *)(v96 - 24);
              *((_QWORD *)v96 - 3) = 0;
              *((_QWORD *)v96 - 2) = 0;
              *(v95 - 8) = *(v96 - 8);
              v91 -= 176;
            }
            while (&v35[v91] != v90);
            v89 = (uint64_t)v152;
            v51 += v91;
          }
          v99 = (char *)a1[88].i64[0];
          if (v99 != v35)
          {
            v100 = 0;
            do
            {
              v104 = &v35[v100];
              v105 = v89 + v100;
              *(_QWORD *)v105 = *(_QWORD *)&v35[v100];
              *(_OWORD *)(v105 + 8) = *(_OWORD *)&v35[v100 + 8];
              v106 = *(_OWORD *)&v35[v100 + 24];
              *(_QWORD *)(v105 + 40) = *(_QWORD *)&v35[v100 + 40];
              *(_OWORD *)(v105 + 24) = v106;
              *(_BYTE *)(v89 + v100 + 48) = 0;
              *(_BYTE *)(v105 + 72) = 0;
              if (v35[v100 + 72])
              {
                v107 = *((_OWORD *)v104 + 3);
                *(_QWORD *)(v89 + v100 + 64) = *((_QWORD *)v104 + 8);
                *(_OWORD *)(v89 + v100 + 48) = v107;
                *(_BYTE *)(v105 + 72) = 1;
              }
              *(_QWORD *)(v105 + 80) = *((_QWORD *)v104 + 10);
              v101 = *(_OWORD *)(v104 + 88);
              *(_QWORD *)(v105 + 104) = *((_QWORD *)v104 + 13);
              *(_OWORD *)(v105 + 88) = v101;
              v102 = *((_OWORD *)v104 + 7);
              *(_QWORD *)(v105 + 128) = *((_QWORD *)v104 + 16);
              *(_OWORD *)(v105 + 112) = v102;
              v103 = *((_QWORD *)v104 + 17);
              *(_BYTE *)(v105 + 144) = v104[144];
              *(_QWORD *)(v105 + 136) = v103;
              *(_OWORD *)(v105 + 152) = *(_OWORD *)(v104 + 152);
              *((_QWORD *)v104 + 19) = 0;
              *((_QWORD *)v104 + 20) = 0;
              *(_BYTE *)(v105 + 168) = v104[168];
              v100 += 176;
            }
            while (v104 + 176 != v99);
            v35 = (char *)a1[88].i64[0];
            v89 += v100;
          }
          v108 = (char *)a1[87].i64[1];
          a1[87].i64[1] = (uint64_t)v51;
          a1[88].i64[0] = v89;
          v109 = a1[88].i64[1];
          a1[88].i64[1] = (uint64_t)v153;
          v153 = (char *)v109;
          *(_QWORD *)&v151 = v108;
          *((_QWORD *)&v151 + 1) = v108;
          if (v35 != v108)
          {
            do
            {
              v152 = v35 - 176;
              v110 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v110)
              {
                v111 = (unint64_t *)&v110->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v35 = v152;
            }
            while (v152 != v108);
            v35 = (char *)v151;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v42 = v33 + 176 * v126;
          *(_OWORD *)(v42 + 8) = v127;
          v43 = v138;
          v44 = v139;
          *(_BYTE *)(v42 + 48) = 0;
          v45 = v42 + 48;
          *(_QWORD *)(v45 - 8) = v44;
          *(_OWORD *)(v45 - 24) = v43;
          *(_BYTE *)(v45 + 24) = 0;
          if (v132)
          {
            v46 = *(_OWORD *)v140;
            *(_QWORD *)(v45 + 16) = *(_QWORD *)&v140[16];
            *(_OWORD *)v45 = v46;
            *(_BYTE *)(v45 + 24) = 1;
          }
          v47 = v33 + 176 * v126;
          *(_QWORD *)(v47 + 80) = v30;
          v48 = v143;
          *(_QWORD *)(v47 + 104) = v144;
          *(_OWORD *)(v47 + 88) = v48;
          v49 = v145;
          *(_QWORD *)(v47 + 128) = v146;
          *(_OWORD *)(v47 + 112) = v49;
          v50 = v147;
          *(_BYTE *)(v47 + 144) = v148;
          *(_QWORD *)(v47 + 136) = v50;
          *(_QWORD *)(v47 + 152) = v137;
          *(_QWORD *)(v47 + 160) = v31;
          v149 = 0uLL;
          *(_BYTE *)(v47 + 168) = 0;
          a1[88].i64[0] = (uint64_t)(v32 + 176);
        }
        else
        {
          v161 = v127;
          v151 = v128;
          v152 = (char *)v129;
          if (v132)
          {
            *(_OWORD *)v162 = *(_OWORD *)&v140[1];
            *(_QWORD *)&v162[15] = *(_QWORD *)&v140[16];
            v123 = v140[0];
            v124 = 1;
          }
          else
          {
            v123 = 0;
            v124 = 0;
          }
          v159 = v133;
          v160 = v134;
          v157 = v135;
          v158 = v136;
          v155 = v147;
          v156 = v148;
          v53 = v35 + 176;
          v54 = v32 - 176;
          v55 = v32;
          v149 = 0uLL;
          if ((unint64_t)v32 >= 0xB0)
          {
            v56 = 0;
            v57 = v33 + 16 * ((v32 - v53) >> 4) + 176 * v126;
            do
            {
              v61 = &v54[v56];
              v62 = &v32[v56];
              *(_QWORD *)v62 = *(_QWORD *)&v54[v56];
              *(_OWORD *)(v62 + 8) = *(_OWORD *)&v54[v56 + 8];
              v63 = *(_OWORD *)&v54[v56 + 24];
              *((_QWORD *)v62 + 5) = *(_QWORD *)&v54[v56 + 40];
              *(_OWORD *)(v62 + 24) = v63;
              v32[v56 + 48] = 0;
              v62[72] = 0;
              if (v54[v56 + 72])
              {
                v64 = *(_OWORD *)(v57 + v56 + 48);
                *(_QWORD *)&v32[v56 + 64] = *(_QWORD *)(v57 + v56 + 64);
                *(_OWORD *)&v32[v56 + 48] = v64;
                v62[72] = 1;
              }
              *((_QWORD *)v62 + 10) = *((_QWORD *)v61 + 10);
              v58 = *(_OWORD *)(v61 + 88);
              *((_QWORD *)v62 + 13) = *((_QWORD *)v61 + 13);
              *(_OWORD *)(v62 + 88) = v58;
              v59 = *((_OWORD *)v61 + 7);
              *((_QWORD *)v62 + 16) = *((_QWORD *)v61 + 16);
              *((_OWORD *)v62 + 7) = v59;
              v60 = *((_QWORD *)v61 + 17);
              v62[144] = v61[144];
              *((_QWORD *)v62 + 17) = v60;
              *(_OWORD *)(v62 + 152) = *(_OWORD *)(v61 + 152);
              *((_QWORD *)v61 + 19) = 0;
              *((_QWORD *)v61 + 20) = 0;
              v62[168] = v61[168];
              v56 += 176;
            }
            while (v61 + 176 < v32);
            v55 = &v32[v56];
          }
          v125 = v33;
          a1[88].i64[0] = (uint64_t)v55;
          if (v32 != v53)
          {
            v65 = v32 - 176;
            v66 = v32;
            do
            {
              v67 = *((_QWORD *)v65 - 22);
              v65 -= 176;
              *((_QWORD *)v66 - 22) = v67;
              v66 -= 176;
              *(_OWORD *)(v66 + 8) = *(_OWORD *)(v65 + 8);
              v68 = *(_OWORD *)(v65 + 24);
              *((_QWORD *)v66 + 5) = *((_QWORD *)v65 + 5);
              *(_OWORD *)(v66 + 24) = v68;
              v69 = v66 + 48;
              v70 = (__int128 *)(v65 + 48);
              if (v66[72] == v65[72])
              {
                if (v66[72])
                {
                  v71 = *v70;
                  *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                  *v69 = v71;
                }
              }
              else if (v66[72])
              {
                *(v32 - 104) = 0;
              }
              else
              {
                v72 = *v70;
                *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                *v69 = v72;
                *(v32 - 104) = 1;
              }
              *((_QWORD *)v32 - 12) = *((_QWORD *)v54 - 12);
              v73 = *(_OWORD *)(v54 - 88);
              *((_QWORD *)v32 - 9) = *((_QWORD *)v54 - 9);
              *(_OWORD *)(v32 - 88) = v73;
              v74 = *((_OWORD *)v54 - 4);
              *((_QWORD *)v32 - 6) = *((_QWORD *)v54 - 6);
              *((_OWORD *)v32 - 4) = v74;
              v75 = *((_QWORD *)v54 - 5);
              *(v32 - 32) = *(v54 - 32);
              *((_QWORD *)v32 - 5) = v75;
              v76 = *(_OWORD *)(v54 - 24);
              *((_QWORD *)v54 - 3) = 0;
              *((_QWORD *)v54 - 2) = 0;
              v77 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v76;
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v77->__on_zero_shared)(v77, a2);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              *(v32 - 8) = *(v54 - 8);
              v32 = v66;
              v54 = v65;
            }
            while (v65 != v35);
          }
          *(_QWORD *)v35 = v8;
          v80 = v126;
          v81 = v125 + 176 * v126;
          v84 = *(unsigned __int8 *)(v81 + 72);
          v82 = (_BYTE *)(v81 + 72);
          v83 = v84;
          *((_OWORD *)v82 - 4) = v161;
          *((_OWORD *)v82 - 3) = v151;
          *((_QWORD *)v82 - 4) = v152;
          v85 = v82 - 24;
          if (v84 == v124)
          {
            v86 = v137;
            if (v83)
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
            }
          }
          else
          {
            v86 = v137;
            if (v83)
            {
              *v82 = 0;
            }
            else
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
              *v82 = 1;
            }
          }
          v113 = v125 + 176 * v126;
          *(_QWORD *)(v113 + 80) = v30;
          *(_OWORD *)(v113 + 88) = v159;
          *(_QWORD *)(v113 + 104) = v160;
          *(_OWORD *)(v113 + 112) = v157;
          v114 = v155;
          *(_QWORD *)(v113 + 128) = v158;
          *(_QWORD *)(v113 + 136) = v114;
          *(_BYTE *)(v113 + 144) = v156;
          v115 = *(std::__shared_weak_count **)(v113 + 160);
          *(_QWORD *)(v113 + 152) = v86;
          *(_QWORD *)(v113 + 160) = v31;
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            v80 = v126;
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v115->__on_zero_shared)(v115, a2);
              std::__shared_weak_count::__release_weak(v115);
              v80 = v126;
            }
          }
          *(_BYTE *)(v125 + 176 * v80 + 168) = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      }
      if (v31)
      {
        v118 = (unint64_t *)&v31->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      a1[101].i8[2] = 0;
      a1[101].i8[0] = 0;
      a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B84D0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v137 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v137 + 1) + 16))(*((_QWORD *)&v137 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v137 + 1));
    }
  }
  return v16;
}

void sub_20FBF44AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20FBB3A54((uint64_t)&a59);
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBF44D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF44EC(int64x2_t *a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  char v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  _QWORD *v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  _QWORD *v139;
  _BYTE v140[24];
  char v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  __int128 v149;
  char v150;
  __int128 v151;
  char *v152;
  char *v153;
  int64x2_t *v154;
  unint64_t v155;
  char v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  _BYTE v162[23];
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = (char *)a1[89].i64[0];
  v10 = (char *)a1[89].i64[1];
  if (v9 == v10)
  {
    v10 = (char *)a1[89].i64[0];
  }
  else if (*((_QWORD *)v10 - 22) >= v8)
  {
    v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[176 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 176;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v127 = *a2;
  v128 = a2[1];
  v129 = (_QWORD *)*((_QWORD *)a2 + 4);
  LOBYTE(v130) = 0;
  v132 = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v130 = *(__int128 *)((char *)a2 + 40);
    v131 = *((_QWORD *)a2 + 7);
    v132 = 1;
  }
  *(_QWORD *)&v137 = a4;
  *((_QWORD *)&v137 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = a1[36].i64[1];
  v24 = a1[37].i64[0];
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)(v23 + 16 * (v25 >> 1));
      v29 = *v27;
      v28 = v27 + 4;
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = (uint64_t)v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(v23 + 8);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v138 = v128;
      v139 = v129;
      v140[0] = 0;
      v141 = 0;
      if (v132)
      {
        *(_OWORD *)v140 = v130;
        *(_QWORD *)&v140[16] = v131;
        v141 = 1;
      }
      v143 = v133;
      v142 = v30;
      v144 = v134;
      v145 = v135;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      v146 = v136;
      v147 = 0xBFF0000000000000;
      v148 = 0;
      v149 = v137;
      *((_QWORD *)&v137 + 1) = 0;
      v150 = 0;
      v32 = (char *)a1[89].i64[1];
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v138;
        v33 = a1[89].i64[0];
        v34 = (uint64_t)&v10[-v33];
        v126 = (uint64_t)&v10[-v33] / 176;
        v35 = (char *)(v33 + 176 * v126);
        v36 = a1[90].u64[0];
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v32[-v33] >> 4) + 1;
          if (v37 > 0x1745D1745D1745DLL)
            sub_20E867F44();
          if (0x5D1745D1745D1746 * ((uint64_t)(v36 - v33) >> 4) > v37)
            v37 = 0x5D1745D1745D1746 * ((uint64_t)(v36 - v33) >> 4);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v36 - v33) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
            v38 = 0x1745D1745D1745DLL;
          else
            v38 = v37;
          v154 = a1 + 90;
          if (v38)
          {
            if (v38 > 0x1745D1745D1745DLL)
              sub_20E877A38();
            v39 = (char *)operator new(176 * v38);
            v40 = (char *)v33;
            v41 = (uint64_t)&v10[-v33] / 176;
            a2 = &v138;
          }
          else
          {
            v40 = (char *)v33;
            v39 = 0;
            v41 = (uint64_t)&v10[-v33] / 176;
          }
          v51 = &v39[176 * v41];
          *(_QWORD *)&v151 = v39;
          *((_QWORD *)&v151 + 1) = v51;
          v152 = v51;
          v153 = &v39[176 * v38];
          if (v41 == v38)
          {
            if (v34 < 1)
            {
              if (v40 == v10)
                v87 = 1;
              else
                v87 = 2 * v41;
              if (v87 > 0x1745D1745D1745DLL)
                sub_20E877A38();
              v88 = (char *)operator new(176 * v87);
              v51 = &v88[176 * (v87 >> 2)];
              *(_QWORD *)&v151 = v88;
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
              v153 = &v88[176 * v87];
              if (v39)
                operator delete(v39);
              a2 = &v138;
            }
            else
            {
              v52 = v41 + 2;
              if (v41 >= -1)
                v52 = v41 + 1;
              v51 -= 176 * (v52 >> 1);
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
            }
          }
          *(_QWORD *)v51 = v8;
          *(_OWORD *)(v51 + 8) = v127;
          *(_OWORD *)(v51 + 24) = v138;
          *((_QWORD *)v51 + 5) = v139;
          v51[48] = 0;
          v51[72] = 0;
          if (v141)
          {
            *((_OWORD *)v51 + 3) = *(_OWORD *)v140;
            *((_QWORD *)v51 + 8) = *(_QWORD *)&v140[16];
            v51[72] = 1;
          }
          *((_QWORD *)v51 + 10) = v142;
          *(_OWORD *)(v51 + 88) = v143;
          *((_QWORD *)v51 + 13) = v144;
          *((_QWORD *)v51 + 16) = v146;
          *((_OWORD *)v51 + 7) = v145;
          *((_QWORD *)v51 + 17) = v147;
          v51[144] = v148;
          *(_OWORD *)(v51 + 152) = v149;
          v149 = 0uLL;
          v51[168] = v150;
          v89 = (uint64_t)(v51 + 176);
          v152 = v51 + 176;
          v90 = (char *)a1[89].i64[0];
          if (v90 != v35)
          {
            v91 = 0;
            do
            {
              v95 = &v51[v91];
              v96 = &v35[v91];
              *((_QWORD *)v95 - 22) = *(_QWORD *)&v35[v91 - 176];
              *(_OWORD *)(v95 - 168) = *(_OWORD *)&v35[v91 - 168];
              v97 = *(_OWORD *)&v35[v91 - 152];
              *((_QWORD *)v95 - 17) = *(_QWORD *)&v35[v91 - 136];
              *(_OWORD *)(v95 - 152) = v97;
              v51[v91 - 128] = 0;
              *(v95 - 104) = 0;
              if (v35[v91 - 104])
              {
                v98 = *((_OWORD *)v96 - 8);
                *(_QWORD *)&v51[v91 - 112] = *((_QWORD *)v96 - 14);
                *(_OWORD *)&v51[v91 - 128] = v98;
                *(v95 - 104) = 1;
              }
              *((_QWORD *)v95 - 12) = *((_QWORD *)v96 - 12);
              v92 = *(_OWORD *)(v96 - 88);
              *((_QWORD *)v95 - 9) = *((_QWORD *)v96 - 9);
              *(_OWORD *)(v95 - 88) = v92;
              v93 = *((_OWORD *)v96 - 4);
              *((_QWORD *)v95 - 6) = *((_QWORD *)v96 - 6);
              *((_OWORD *)v95 - 4) = v93;
              v94 = *((_QWORD *)v96 - 5);
              *(v95 - 32) = *(v96 - 32);
              *((_QWORD *)v95 - 5) = v94;
              *(_OWORD *)(v95 - 24) = *(_OWORD *)(v96 - 24);
              *((_QWORD *)v96 - 3) = 0;
              *((_QWORD *)v96 - 2) = 0;
              *(v95 - 8) = *(v96 - 8);
              v91 -= 176;
            }
            while (&v35[v91] != v90);
            v89 = (uint64_t)v152;
            v51 += v91;
          }
          v99 = (char *)a1[89].i64[1];
          if (v99 != v35)
          {
            v100 = 0;
            do
            {
              v104 = &v35[v100];
              v105 = v89 + v100;
              *(_QWORD *)v105 = *(_QWORD *)&v35[v100];
              *(_OWORD *)(v105 + 8) = *(_OWORD *)&v35[v100 + 8];
              v106 = *(_OWORD *)&v35[v100 + 24];
              *(_QWORD *)(v105 + 40) = *(_QWORD *)&v35[v100 + 40];
              *(_OWORD *)(v105 + 24) = v106;
              *(_BYTE *)(v89 + v100 + 48) = 0;
              *(_BYTE *)(v105 + 72) = 0;
              if (v35[v100 + 72])
              {
                v107 = *((_OWORD *)v104 + 3);
                *(_QWORD *)(v89 + v100 + 64) = *((_QWORD *)v104 + 8);
                *(_OWORD *)(v89 + v100 + 48) = v107;
                *(_BYTE *)(v105 + 72) = 1;
              }
              *(_QWORD *)(v105 + 80) = *((_QWORD *)v104 + 10);
              v101 = *(_OWORD *)(v104 + 88);
              *(_QWORD *)(v105 + 104) = *((_QWORD *)v104 + 13);
              *(_OWORD *)(v105 + 88) = v101;
              v102 = *((_OWORD *)v104 + 7);
              *(_QWORD *)(v105 + 128) = *((_QWORD *)v104 + 16);
              *(_OWORD *)(v105 + 112) = v102;
              v103 = *((_QWORD *)v104 + 17);
              *(_BYTE *)(v105 + 144) = v104[144];
              *(_QWORD *)(v105 + 136) = v103;
              *(_OWORD *)(v105 + 152) = *(_OWORD *)(v104 + 152);
              *((_QWORD *)v104 + 19) = 0;
              *((_QWORD *)v104 + 20) = 0;
              *(_BYTE *)(v105 + 168) = v104[168];
              v100 += 176;
            }
            while (v104 + 176 != v99);
            v35 = (char *)a1[89].i64[1];
            v89 += v100;
          }
          v108 = (char *)a1[89].i64[0];
          a1[89].i64[0] = (uint64_t)v51;
          a1[89].i64[1] = v89;
          v109 = a1[90].i64[0];
          a1[90].i64[0] = (uint64_t)v153;
          v153 = (char *)v109;
          *(_QWORD *)&v151 = v108;
          *((_QWORD *)&v151 + 1) = v108;
          if (v35 != v108)
          {
            do
            {
              v152 = v35 - 176;
              v110 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v110)
              {
                v111 = (unint64_t *)&v110->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v35 = v152;
            }
            while (v152 != v108);
            v35 = (char *)v151;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v42 = v33 + 176 * v126;
          *(_OWORD *)(v42 + 8) = v127;
          v43 = v138;
          v44 = v139;
          *(_BYTE *)(v42 + 48) = 0;
          v45 = v42 + 48;
          *(_QWORD *)(v45 - 8) = v44;
          *(_OWORD *)(v45 - 24) = v43;
          *(_BYTE *)(v45 + 24) = 0;
          if (v132)
          {
            v46 = *(_OWORD *)v140;
            *(_QWORD *)(v45 + 16) = *(_QWORD *)&v140[16];
            *(_OWORD *)v45 = v46;
            *(_BYTE *)(v45 + 24) = 1;
          }
          v47 = v33 + 176 * v126;
          *(_QWORD *)(v47 + 80) = v30;
          v48 = v143;
          *(_QWORD *)(v47 + 104) = v144;
          *(_OWORD *)(v47 + 88) = v48;
          v49 = v145;
          *(_QWORD *)(v47 + 128) = v146;
          *(_OWORD *)(v47 + 112) = v49;
          v50 = v147;
          *(_BYTE *)(v47 + 144) = v148;
          *(_QWORD *)(v47 + 136) = v50;
          *(_QWORD *)(v47 + 152) = v137;
          *(_QWORD *)(v47 + 160) = v31;
          v149 = 0uLL;
          *(_BYTE *)(v47 + 168) = 0;
          a1[89].i64[1] = (uint64_t)(v32 + 176);
        }
        else
        {
          v161 = v127;
          v151 = v128;
          v152 = (char *)v129;
          if (v132)
          {
            *(_OWORD *)v162 = *(_OWORD *)&v140[1];
            *(_QWORD *)&v162[15] = *(_QWORD *)&v140[16];
            v123 = v140[0];
            v124 = 1;
          }
          else
          {
            v123 = 0;
            v124 = 0;
          }
          v159 = v133;
          v160 = v134;
          v157 = v135;
          v158 = v136;
          v155 = v147;
          v156 = v148;
          v53 = v35 + 176;
          v54 = v32 - 176;
          v55 = v32;
          v149 = 0uLL;
          if ((unint64_t)v32 >= 0xB0)
          {
            v56 = 0;
            v57 = v33 + 16 * ((v32 - v53) >> 4) + 176 * v126;
            do
            {
              v61 = &v54[v56];
              v62 = &v32[v56];
              *(_QWORD *)v62 = *(_QWORD *)&v54[v56];
              *(_OWORD *)(v62 + 8) = *(_OWORD *)&v54[v56 + 8];
              v63 = *(_OWORD *)&v54[v56 + 24];
              *((_QWORD *)v62 + 5) = *(_QWORD *)&v54[v56 + 40];
              *(_OWORD *)(v62 + 24) = v63;
              v32[v56 + 48] = 0;
              v62[72] = 0;
              if (v54[v56 + 72])
              {
                v64 = *(_OWORD *)(v57 + v56 + 48);
                *(_QWORD *)&v32[v56 + 64] = *(_QWORD *)(v57 + v56 + 64);
                *(_OWORD *)&v32[v56 + 48] = v64;
                v62[72] = 1;
              }
              *((_QWORD *)v62 + 10) = *((_QWORD *)v61 + 10);
              v58 = *(_OWORD *)(v61 + 88);
              *((_QWORD *)v62 + 13) = *((_QWORD *)v61 + 13);
              *(_OWORD *)(v62 + 88) = v58;
              v59 = *((_OWORD *)v61 + 7);
              *((_QWORD *)v62 + 16) = *((_QWORD *)v61 + 16);
              *((_OWORD *)v62 + 7) = v59;
              v60 = *((_QWORD *)v61 + 17);
              v62[144] = v61[144];
              *((_QWORD *)v62 + 17) = v60;
              *(_OWORD *)(v62 + 152) = *(_OWORD *)(v61 + 152);
              *((_QWORD *)v61 + 19) = 0;
              *((_QWORD *)v61 + 20) = 0;
              v62[168] = v61[168];
              v56 += 176;
            }
            while (v61 + 176 < v32);
            v55 = &v32[v56];
          }
          v125 = v33;
          a1[89].i64[1] = (uint64_t)v55;
          if (v32 != v53)
          {
            v65 = v32 - 176;
            v66 = v32;
            do
            {
              v67 = *((_QWORD *)v65 - 22);
              v65 -= 176;
              *((_QWORD *)v66 - 22) = v67;
              v66 -= 176;
              *(_OWORD *)(v66 + 8) = *(_OWORD *)(v65 + 8);
              v68 = *(_OWORD *)(v65 + 24);
              *((_QWORD *)v66 + 5) = *((_QWORD *)v65 + 5);
              *(_OWORD *)(v66 + 24) = v68;
              v69 = v66 + 48;
              v70 = (__int128 *)(v65 + 48);
              if (v66[72] == v65[72])
              {
                if (v66[72])
                {
                  v71 = *v70;
                  *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                  *v69 = v71;
                }
              }
              else if (v66[72])
              {
                *(v32 - 104) = 0;
              }
              else
              {
                v72 = *v70;
                *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                *v69 = v72;
                *(v32 - 104) = 1;
              }
              *((_QWORD *)v32 - 12) = *((_QWORD *)v54 - 12);
              v73 = *(_OWORD *)(v54 - 88);
              *((_QWORD *)v32 - 9) = *((_QWORD *)v54 - 9);
              *(_OWORD *)(v32 - 88) = v73;
              v74 = *((_OWORD *)v54 - 4);
              *((_QWORD *)v32 - 6) = *((_QWORD *)v54 - 6);
              *((_OWORD *)v32 - 4) = v74;
              v75 = *((_QWORD *)v54 - 5);
              *(v32 - 32) = *(v54 - 32);
              *((_QWORD *)v32 - 5) = v75;
              v76 = *(_OWORD *)(v54 - 24);
              *((_QWORD *)v54 - 3) = 0;
              *((_QWORD *)v54 - 2) = 0;
              v77 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v76;
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v77->__on_zero_shared)(v77, a2);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              *(v32 - 8) = *(v54 - 8);
              v32 = v66;
              v54 = v65;
            }
            while (v65 != v35);
          }
          *(_QWORD *)v35 = v8;
          v80 = v126;
          v81 = v125 + 176 * v126;
          v84 = *(unsigned __int8 *)(v81 + 72);
          v82 = (_BYTE *)(v81 + 72);
          v83 = v84;
          *((_OWORD *)v82 - 4) = v161;
          *((_OWORD *)v82 - 3) = v151;
          *((_QWORD *)v82 - 4) = v152;
          v85 = v82 - 24;
          if (v84 == v124)
          {
            v86 = v137;
            if (v83)
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
            }
          }
          else
          {
            v86 = v137;
            if (v83)
            {
              *v82 = 0;
            }
            else
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
              *v82 = 1;
            }
          }
          v113 = v125 + 176 * v126;
          *(_QWORD *)(v113 + 80) = v30;
          *(_OWORD *)(v113 + 88) = v159;
          *(_QWORD *)(v113 + 104) = v160;
          *(_OWORD *)(v113 + 112) = v157;
          v114 = v155;
          *(_QWORD *)(v113 + 128) = v158;
          *(_QWORD *)(v113 + 136) = v114;
          *(_BYTE *)(v113 + 144) = v156;
          v115 = *(std::__shared_weak_count **)(v113 + 160);
          *(_QWORD *)(v113 + 152) = v86;
          *(_QWORD *)(v113 + 160) = v31;
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            v80 = v126;
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v115->__on_zero_shared)(v115, a2);
              std::__shared_weak_count::__release_weak(v115);
              v80 = v126;
            }
          }
          *(_BYTE *)(v125 + 176 * v80 + 168) = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      }
      if (v31)
      {
        v118 = (unint64_t *)&v31->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      a1[101].i8[2] = 0;
      a1[101].i8[0] = 0;
      a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B84D0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v137 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v137 + 1) + 16))(*((_QWORD *)&v137 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v137 + 1));
    }
  }
  return v16;
}

void sub_20FBF5204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20FBB3A54((uint64_t)&a59);
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBF5228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF5244(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;

  v1 = *(_QWORD *)(result + 6368);
  v2 = *(_QWORD *)(result + 6376);
  if (v1 != v2)
  {
    v3 = v2 - v1 - 9616;
    if (v3 >> 4 < 0x259)
    {
      v4 = *(_QWORD *)(result + 6368);
      do
      {
LABEL_7:
        *(_QWORD *)(v4 + 24) = 0;
        v4 += 9616;
      }
      while (v4 != v2);
      goto LABEL_8;
    }
    v5 = v3 / 0x2590 + 1;
    v4 = v1 + 9616 * (v5 & 0xFFFFFFFFFFFFELL);
    v6 = v5 & 0xFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v1 + 24) = 0;
      *(_QWORD *)(v1 + 9640) = 0;
      v1 += 19232;
      v6 -= 2;
    }
    while (v6);
    if (v5 != (v5 & 0xFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_8:
  v7 = *(_QWORD *)(result + 6488);
  v8 = *(_QWORD *)(result + 6496);
  if (v7 == v8)
    goto LABEL_15;
  v9 = v8 - v7 - 360;
  if (v9 < 0x168)
  {
    v10 = *(_QWORD *)(result + 6488);
    do
    {
LABEL_14:
      *(_WORD *)(v10 + 200) = 256;
      v10 += 360;
    }
    while (v10 != v8);
    goto LABEL_15;
  }
  v11 = v9 / 0x168 + 1;
  v10 = v7 + 360 * (v11 & 0x1FFFFFFFFFFFFFELL);
  v12 = v11 & 0x1FFFFFFFFFFFFFELL;
  do
  {
    *(_WORD *)(v7 + 200) = 256;
    *(_WORD *)(v7 + 560) = 256;
    v7 += 720;
    v12 -= 2;
  }
  while (v12);
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFELL))
    goto LABEL_14;
LABEL_15:
  v13 = *(_QWORD *)(result + 6416);
  v14 = *(_QWORD *)(result + 6424);
  if (v13 != v14)
  {
    v15 = v14 - v13 - 144;
    v16 = *(_QWORD *)(result + 6416);
    if (v15 < 0x90)
      goto LABEL_67;
    v17 = v15 / 0x90 + 1;
    v16 = v13 + 144 * (v17 & 0x3FFFFFFFFFFFFFELL);
    v18 = (_BYTE *)(v13 + 184);
    v19 = v17 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v18 - 144) = 0;
      *v18 = 0;
      v18 += 288;
      v19 -= 2;
    }
    while (v19);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_67:
      do
      {
        *(_BYTE *)(v16 + 40) = 0;
        v16 += 144;
      }
      while (v16 != v14);
    }
  }
  v20 = (_WORD *)(result + 6800);
  v21 = *(_QWORD *)(result + 6440);
  v22 = *(_QWORD *)(result + 6448);
  if (v21 != v22)
  {
    v23 = v22 - v21 - 152;
    v24 = *(_QWORD *)(result + 6440);
    if (v23 < 0x98)
      goto LABEL_68;
    v25 = v23 / 0x98 + 1;
    v24 = v21 + 152 * (v25 & 0x3FFFFFFFFFFFFFELL);
    v26 = (_BYTE *)(v21 + 192);
    v27 = v25 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v26 - 152) = 0;
      *v26 = 0;
      v26 += 304;
      v27 -= 2;
    }
    while (v27);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_68:
      do
      {
        *(_BYTE *)(v24 + 40) = 0;
        v24 += 152;
      }
      while (v24 != v22);
    }
  }
  v28 = *(_QWORD *)(result + 6464);
  v29 = *(_QWORD *)(result + 6472);
  v30 = v29 - v28;
  if (v29 != v28)
  {
    v31 = 0x86BCA1AF286BCA1BLL * (v30 >> 4);
    v32 = *(_QWORD **)(result + 6464);
    do
    {
      v33 = v31 >> 1;
      v34 = &v32[38 * (v31 >> 1)];
      v35 = *v34;
      v36 = v34 + 38;
      v31 += ~(v31 >> 1);
      if (v35 == -1)
        v31 = v33;
      else
        v32 = v36;
    }
    while (v31);
    if ((_QWORD *)v28 != v32)
    {
      v37 = (unint64_t)v32 - v28 - 304;
      v38 = *(_QWORD *)(result + 6464);
      if (v37 < 0x130)
        goto LABEL_69;
      v39 = v37 / 0x130 + 1;
      v38 = v28 + 304 * (v39 & 0x1FFFFFFFFFFFFFELL);
      v40 = v39 & 0x1FFFFFFFFFFFFFELL;
      v41 = *(_QWORD *)(result + 6464);
      do
      {
        *(_BYTE *)(v41 + 296) = 1;
        *(_BYTE *)(v41 + 600) = 1;
        v41 += 608;
        v40 -= 2;
      }
      while (v40);
      if (v39 != (v39 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_69:
        do
        {
          *(_BYTE *)(v38 + 296) = 1;
          v38 += 304;
        }
        while ((_QWORD *)v38 != v32);
      }
      *(_BYTE *)(result + 6802) = 0;
      *v20 = 256;
      *(_BYTE *)(result + 7869) = 0;
      *(_DWORD *)(result + 7864) = 0;
    }
    v42 = v30 - 304;
    if (v42 < 0x130)
    {
      v43 = v28;
      do
      {
LABEL_45:
        *(_WORD *)(v43 + 176) = 0;
        *(_QWORD *)(v43 + 168) = 0;
        v43 += 304;
      }
      while (v43 != v29);
      goto LABEL_46;
    }
    v44 = v42 / 0x130 + 1;
    v43 = v28 + 304 * (v44 & 0x1FFFFFFFFFFFFFELL);
    v45 = v44 & 0x1FFFFFFFFFFFFFELL;
    do
    {
      *(_WORD *)(v28 + 176) = 0;
      *(_WORD *)(v28 + 480) = 0;
      *(_QWORD *)(v28 + 168) = 0;
      *(_QWORD *)(v28 + 472) = 0;
      v28 += 608;
      v45 -= 2;
    }
    while (v45);
    if (v44 != (v44 & 0x1FFFFFFFFFFFFFELL))
      goto LABEL_45;
  }
LABEL_46:
  v46 = *(_QWORD *)(result + 6656);
  v47 = *(_QWORD *)(result + 6664);
  v48 = v47 - v46;
  if (v47 != v46)
  {
    v49 = *(_QWORD *)(result + 6656);
    v50 = 0xD37A6F4DE9BD37A7 * (v48 >> 3);
    v51 = (_QWORD *)v49;
    do
    {
      v52 = v50 >> 1;
      v53 = &v51[23 * (v50 >> 1)];
      v55 = *v53;
      v54 = v53 + 23;
      v50 += ~(v50 >> 1);
      v56 = v55 == -1;
      if (v55 == -1)
        v50 = v52;
      if (!v56)
        v51 = v54;
    }
    while (v50);
    if ((_QWORD *)v46 != v51)
    {
      v57 = (unint64_t)v51 - v46 - 184;
      v58 = *(_QWORD *)(result + 6656);
      if (v57 < 0xB8)
        goto LABEL_70;
      v59 = v57 / 0xB8 + 1;
      v58 = v46 + 184 * (v59 & 0x3FFFFFFFFFFFFFELL);
      v60 = (_BYTE *)(v46 + 360);
      v61 = v59 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(v60 - 184) = 1;
        *v60 = 1;
        v60 += 368;
        v61 -= 2;
      }
      while (v61);
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_70:
        do
        {
          *(_BYTE *)(v58 + 176) = 1;
          v58 += 184;
        }
        while ((_QWORD *)v58 != v51);
      }
      *(_BYTE *)(result + 6802) = 0;
      *v20 = 256;
      *(_BYTE *)(result + 7869) = 0;
      *(_DWORD *)(result + 7864) = 0;
    }
    if ((unint64_t)(v48 - 184) < 0xB8)
      goto LABEL_71;
    v62 = (v48 - 184) / 0xB8uLL + 1;
    v49 = v46 + 184 * (v62 & 0x3FFFFFFFFFFFFFELL);
    v63 = (_BYTE *)(v46 + 232);
    v64 = v62 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v63 - 184) = 1;
      *v63 = 1;
      v63 += 368;
      v64 -= 2;
    }
    while (v64);
    if (v62 != (v62 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_71:
      do
      {
        *(_BYTE *)(v49 + 48) = 1;
        v49 += 184;
      }
      while (v49 != v47);
    }
  }
  return result;
}

void sub_20FBF5730(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBF5CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBF5CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBF5CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF5D34(std::string *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::string::size_type v11;
  std::string *p_dst;
  unsigned int v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  std::string __dst;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;
  std::string v31;
  _QWORD v32[2];
  _QWORD v33[3];
  const void *v34;
  uint64_t v35;
  const void *v36;
  unint64_t v37;
  void *v38;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;

  v4 = (uint64_t *)(a2 + 24 * a3);
  sub_20E863438((uint64_t)v32);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 == v6)
  {
    v9 = *v4;
    v8 = *v4;
  }
  else
  {
    std::ostream::operator<<();
    for (i = v5 + 4; i != v6; i += 4)
    {
      sub_20E86A980(v33, (uint64_t)", ", 2);
      std::ostream::operator<<();
    }
    v8 = v4[1];
    v9 = *v4;
  }
  std::to_string(&v31, (v8 - v9) >> 2);
  if (v5 == v6)
  {
    v13 = 0;
    HIBYTE(v30) = 0;
    LOBYTE(__p[0]) = 0;
    goto LABEL_22;
  }
  if ((v41 & 0x10) != 0)
  {
    v14 = v40;
    if (v40 < v37)
    {
      v40 = v37;
      v14 = v37;
    }
    v15 = v36;
    v11 = v14 - (_QWORD)v36;
    if (v14 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_42;
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      v11 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_21;
    }
    v15 = v34;
    v11 = v35 - (_QWORD)v34;
    if ((unint64_t)(v35 - (_QWORD)v34) >= 0x7FFFFFFFFFFFFFF8)
LABEL_42:
      sub_20E860B7C();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
    p_dst = &__dst;
    if (!v11)
      goto LABEL_21;
  }
  memmove(p_dst, v15, v11);
LABEL_21:
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  v18 = std::string::insert(&__dst, 0, " {", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v28, "}", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v30 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v13 = HIBYTE(v30);
  v10 = __p[1];
LABEL_22:
  if ((v13 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v23 = v13;
  else
    v23 = (std::string::size_type)v10;
  v24 = std::string::append(&v31, (const std::string::value_type *)v22, v23);
  *a1 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (v5 == v6)
    goto LABEL_33;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_39;
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_39:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_35:
  v32[0] = *MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v33[0] = v25;
  v33[1] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete(v38);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v42);
}

void sub_20FBF605C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_20E863784((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20FBF610C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBF64F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBF6514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBF6528(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBF654C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBF6930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBF6954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBF6968(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF698C(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 6) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 2u;
  v13 = *(char **)(a1 + 1896);
  v14 = *(_QWORD *)(a1 + 1904);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1888);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1888) = v22;
        *(_QWORD *)(a1 + 1896) = v15;
        *(_QWORD *)(a1 + 1904) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1896) = v15;
  *(_BYTE *)(a1 + 1618) = 0;
  *(_WORD *)(a1 + 1616) = 256;
  return 1;
}

uint64_t sub_20FBF6B90(uint64_t result, double a2, double a3, double a4, double a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  double v41;
  float64x2_t v43;
  float64x2_t v44;
  int8x16_t v45;
  float64x2_t v46;
  int64x2_t v50;
  int64x2_t v51;
  double v52;
  float64x2_t v54;
  float64x2_t v55;
  int8x16_t v56;
  double v57;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  uint64_t j;
  char v63;
  _OWORD v64[7];
  float64_t v65;
  uint64_t v66;
  _OWORD v67[7];
  uint64_t v68;
  uint64_t v69;
  char v70[120];
  float64x2_t *v71;
  int v72;
  float64x2_t *v73;
  int v74;
  float64x2_t *v75;
  int v76;
  float64x2_t *v77;
  int v78;
  float64x2_t *v79;
  int v80;
  float64x2_t *v81;
  int v82;

  v9 = result;
  *(_DWORD *)(result + 3080) = 0;
  v10 = *(_QWORD *)(result + 6632);
  v11 = *(_QWORD *)(result + 6640);
  while (v10 != v11)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 136) + 4) & 2) == 0)
    {
      result = sub_20FC7133C(v10 + 8, (uint64_t *)(v10 + 56), (uint64_t)v67, a2, a3, a4, a5, a6, a7.f64[0], a8.f64[0], a9);
      if ((_DWORD)result)
        ++*(_DWORD *)(v9 + 3080);
    }
    v10 += 216;
  }
  *(_DWORD *)(v9 + 3084) = 0;
  v12 = *(uint64_t **)(v9 + 6704);
  v13 = *(uint64_t **)(v9 + 6712);
  if (v12 != v13)
  {
    v14 = v12 + 7;
    do
    {
      if ((*(_BYTE *)(v14[6] + 4) & 2) == 0)
      {
        result = sub_20FC7473C((uint64_t)(v14 - 6), v14, (uint64_t)v67, a2, a3, a4, a5, a6, a7.f64[0], a8.f64[0], a9);
        if ((_DWORD)result)
          ++*(_DWORD *)(v9 + 3084);
      }
      v15 = v14 + 16;
      v14 += 23;
    }
    while (v15 != v13);
  }
  *(_DWORD *)(v9 + 3088) = 0;
  v16 = *(uint64_t **)(v9 + 6656);
  v17 = *(uint64_t **)(v9 + 6664);
  if (v16 != v17)
  {
    v18 = v16 + 8;
    while (1)
    {
      v20 = *(_QWORD *)(v18[5] + 24);
      if (!*(_BYTE *)(v20 + 58))
        break;
      v21 = *(unsigned __int8 *)(v20 + 57) != 0;
      v22 = *((unsigned __int8 *)v18 - 16);
      result = sub_20FC77D28((uint64_t)(v18 - 7), v18, (uint64_t)v67, a2, a3, a4, a5, a6.f64[0], a7, a8.f64[0], a9);
      if (v21)
        goto LABEL_20;
LABEL_15:
      v19 = v18 + 15;
      v18 += 23;
      if (v19 == v17)
        goto LABEL_23;
    }
    v22 = *((unsigned __int8 *)v18 - 16);
    result = sub_20FC77D28((uint64_t)(v18 - 7), v18, (uint64_t)v67, a2, a3, a4, a5, a6.f64[0], a7, a8.f64[0], a9);
LABEL_20:
    if (!v22 && (_DWORD)result)
      ++*(_DWORD *)(v9 + 3088);
    goto LABEL_15;
  }
LABEL_23:
  *(_DWORD *)(v9 + 3092) = 0;
  v23 = *(uint64_t **)(v9 + 6464);
  v24 = *(uint64_t **)(v9 + 6472);
  if (v23 != v24)
  {
    v25 = v23 + 25;
    do
    {
      result = sub_20FC80984((uint64_t)(v25 - 24), v25, (uint64_t)v67, (double **)(v9 + 6768));
      if ((_DWORD)result && !*((_BYTE *)v25 - 24))
        ++*(_DWORD *)(v9 + 3092);
      v26 = v25 + 13;
      v25 += 38;
    }
    while (v26 != v24);
  }
  *(_DWORD *)(v9 + 3096) = 0;
  _X20 = *(_QWORD **)(v9 + 6392);
  for (i = *(_QWORD **)(v9 + 6400); _X20 != i; _X20 += 667)
  {
    __asm { PRFM            #0, [X20,#0x2878] }
    v34 = _X20[628];
    v35 = _X20[629];
    v36 = _X20[630];
    v37 = _X20[631];
    v81 = (float64x2_t *)(v35 + 56);
    v82 = 3;
    v79 = (float64x2_t *)(v35 + 80);
    v80 = 6;
    v77 = (float64x2_t *)(v37 + 56);
    v78 = 3;
    v75 = (float64x2_t *)(v37 + 80);
    v76 = 6;
    v73 = (float64x2_t *)(v35 + 32);
    v74 = 0;
    v71 = (float64x2_t *)(v37 + 32);
    v72 = 0;
    v38.f64[0] = *(float64_t *)(v34 + 48);
    v39 = *(int64x2_t *)(v34 + 32);
    v40 = *(int64x2_t *)(v34 + 56);
    v41 = *(double *)(v34 + 96);
    _Q4 = *(int64x2_t *)(v34 + 80);
    v43 = (float64x2_t)vzip1q_s64(v39, v40);
    v44 = (float64x2_t)vzip2q_s64(v39, v40);
    v38.f64[1] = *(float64_t *)(v34 + 72);
    v45 = vextq_s8((int8x16_t)v44, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    a8.f64[0] = *(float64_t *)(v34 + 120);
    v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, *(double *)(v34 + 104)), v44, *(float64x2_t *)(v34 + 104), 1), v38, a8.f64[0]);
    _D7 = *(_QWORD *)(v34 + 112);
    __asm { FMLA            D17, D7, V4.D[1] }
    a8.f64[0] = _D17 + v41 * a8.f64[0];
    _Q7 = vnegq_f64(v46);
    v46.f64[0] = *(float64_t *)(v34 + 80);
    *(_QWORD *)&v44.f64[1] = v45.i64[0];
    v67[4] = v38;
    v67[5] = *(unint64_t *)&v41;
    v67[0] = v43;
    v67[1] = *(unint64_t *)&v46.f64[0];
    v67[2] = v44;
    v67[3] = v45.u64[1];
    v67[6] = _Q7;
    v68 = *(_OWORD *)&vnegq_f64(a8);
    v69 = 0x3FF0000000000000;
    v38.f64[0] = *(float64_t *)(v36 + 48);
    v50 = *(int64x2_t *)(v36 + 32);
    v51 = *(int64x2_t *)(v36 + 56);
    v52 = *(double *)(v36 + 96);
    _Q4 = *(int64x2_t *)(v36 + 80);
    v54 = (float64x2_t)vzip1q_s64(v50, v51);
    v55 = (float64x2_t)vzip2q_s64(v50, v51);
    v38.f64[1] = *(float64_t *)(v36 + 72);
    v56 = vextq_s8((int8x16_t)v55, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    v57 = *(double *)(v36 + 120);
    _Q7.f64[0] = *(float64_t *)(v36 + 112);
    __asm { FMLA            D17, D7, V4.D[1] }
    _Q7.f64[0] = *(float64_t *)(v36 + 80);
    v59 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, *(double *)(v36 + 104)), v55, *(float64x2_t *)(v36 + 104), 1), v38, v57));
    *(_QWORD *)&v46.f64[0] = v56.i64[1];
    *(_QWORD *)&v55.f64[1] = v56.i64[0];
    v60 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v52 * v57));
    v64[4] = v38;
    v64[5] = *(unint64_t *)&v52;
    v64[0] = v54;
    v64[1] = *(unint64_t *)&_Q7.f64[0];
    v64[2] = v55;
    v64[3] = *(unint64_t *)&v46.f64[0];
    v64[6] = v59;
    v65 = v60.f64[0];
    v66 = 0x3FF0000000000000;
    result = sub_20F4D7C54((uint64_t)(_X20 + 230), (uint64_t)v67, (uint64_t)v64, &v73, &v71, &v81, &v77, &v79, (uint64_t)v70, (float64x2_t)0, v60, (__n128)*(unint64_t *)&_Q7.f64[0], &v75, 0, 0, 0, 0);
    ++*(_DWORD *)(v9 + 3096);
  }
  v61 = *(_QWORD *)(v9 + 6368);
  for (j = *(_QWORD *)(v9 + 6376); v61 != j; v61 += 9616)
  {
    v63 = *(_BYTE *)(v61 + 7688);
    *(_BYTE *)(v61 + 7688) = 0;
    result = sub_20FB44FA0(v61 + 8);
    *(_BYTE *)(v61 + 7688) = v63;
    *(_DWORD *)(v9 + 3096) += result;
  }
  return result;
}

uint64_t sub_20FBF6FD4(uint64_t result, double a2, double a3, double a4, double a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  double v38;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  float64x2_t v43;
  int64x2_t v47;
  int64x2_t v48;
  double v49;
  float64x2_t v51;
  float64x2_t v52;
  int8x16_t v53;
  double v54;
  float64x2_t v56;
  float64x2_t v57;
  uint64_t v58;
  uint64_t j;
  char v60;
  _OWORD v61[7];
  float64_t v62;
  uint64_t v63;
  _OWORD v64[7];
  uint64_t v65;
  uint64_t v66;
  char v67[120];
  float64x2_t *v68;
  int v69;
  float64x2_t *v70;
  int v71;
  float64x2_t *v72;
  int v73;
  float64x2_t *v74;
  int v75;
  float64x2_t *v76;
  int v77;
  float64x2_t *v78;
  int v79;

  v9 = result;
  *(_DWORD *)(result + 3080) = 0;
  v10 = *(_QWORD *)(result + 6616);
  v11 = *(_QWORD *)(result + 6624);
  while (v10 != v11)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 136) + 4) & 2) == 0)
    {
      result = sub_20FC7133C(v10 + 8, (uint64_t *)(v10 + 56), (uint64_t)v64, a2, a3, a4, a5, a6, a7.f64[0], a8.f64[0], a9);
      if ((_DWORD)result)
        ++*(_DWORD *)(v9 + 3080);
    }
    v10 += 216;
  }
  v12 = 0.0;
  *(_QWORD *)(v9 + 3084) = 0;
  v13 = *(uint64_t **)(v9 + 6640);
  v14 = *(uint64_t **)(v9 + 6648);
  if (v13 != v14)
  {
    v15 = v13 + 8;
    while (1)
    {
      v17 = *(_QWORD *)(v15[5] + 24);
      if (!*(_BYTE *)(v17 + 58))
        break;
      v18 = *(unsigned __int8 *)(v17 + 57) != 0;
      v19 = *((unsigned __int8 *)v15 - 16);
      result = sub_20FC77D28((uint64_t)(v15 - 7), v15, (uint64_t)v64, v12, a3, a4, a5, a6.f64[0], a7, a8.f64[0], a9);
      if (v18)
        goto LABEL_14;
LABEL_9:
      v16 = v15 + 15;
      v15 += 23;
      if (v16 == v14)
        goto LABEL_17;
    }
    v19 = *((unsigned __int8 *)v15 - 16);
    result = sub_20FC77D28((uint64_t)(v15 - 7), v15, (uint64_t)v64, v12, a3, a4, a5, a6.f64[0], a7, a8.f64[0], a9);
LABEL_14:
    if (!v19 && (_DWORD)result)
      ++*(_DWORD *)(v9 + 3088);
    goto LABEL_9;
  }
LABEL_17:
  *(_DWORD *)(v9 + 3092) = 0;
  v20 = *(uint64_t **)(v9 + 6448);
  v21 = *(uint64_t **)(v9 + 6456);
  if (v20 != v21)
  {
    v22 = v20 + 25;
    do
    {
      result = sub_20FC80984((uint64_t)(v22 - 24), v22, (uint64_t)v64, (double **)(v9 + 6728));
      if ((_DWORD)result && !*((_BYTE *)v22 - 24))
        ++*(_DWORD *)(v9 + 3092);
      v23 = v22 + 13;
      v22 += 38;
    }
    while (v23 != v21);
  }
  *(_DWORD *)(v9 + 3096) = 0;
  _X20 = *(_QWORD **)(v9 + 6376);
  for (i = *(_QWORD **)(v9 + 6384); _X20 != i; _X20 += 667)
  {
    __asm { PRFM            #0, [X20,#0x2878] }
    v31 = _X20[628];
    v32 = _X20[629];
    v33 = _X20[630];
    v34 = _X20[631];
    v78 = (float64x2_t *)(v32 + 56);
    v79 = 3;
    v76 = (float64x2_t *)(v32 + 80);
    v77 = 6;
    v74 = (float64x2_t *)(v34 + 56);
    v75 = 3;
    v72 = (float64x2_t *)(v34 + 80);
    v73 = 6;
    v70 = (float64x2_t *)(v32 + 32);
    v71 = 0;
    v68 = (float64x2_t *)(v34 + 32);
    v69 = 0;
    v35.f64[0] = *(float64_t *)(v31 + 48);
    v36 = *(int64x2_t *)(v31 + 32);
    v37 = *(int64x2_t *)(v31 + 56);
    v38 = *(double *)(v31 + 96);
    _Q4 = *(int64x2_t *)(v31 + 80);
    v40 = (float64x2_t)vzip1q_s64(v36, v37);
    v41 = (float64x2_t)vzip2q_s64(v36, v37);
    v35.f64[1] = *(float64_t *)(v31 + 72);
    v42 = vextq_s8((int8x16_t)v41, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    a8.f64[0] = *(float64_t *)(v31 + 120);
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, *(double *)(v31 + 104)), v41, *(float64x2_t *)(v31 + 104), 1), v35, a8.f64[0]);
    _D7 = *(_QWORD *)(v31 + 112);
    __asm { FMLA            D17, D7, V4.D[1] }
    a8.f64[0] = _D17 + v38 * a8.f64[0];
    _Q7 = vnegq_f64(v43);
    v43.f64[0] = *(float64_t *)(v31 + 80);
    *(_QWORD *)&v41.f64[1] = v42.i64[0];
    v64[4] = v35;
    v64[5] = *(unint64_t *)&v38;
    v64[0] = v40;
    v64[1] = *(unint64_t *)&v43.f64[0];
    v64[2] = v41;
    v64[3] = v42.u64[1];
    v64[6] = _Q7;
    v65 = *(_OWORD *)&vnegq_f64(a8);
    v66 = 0x3FF0000000000000;
    v35.f64[0] = *(float64_t *)(v33 + 48);
    v47 = *(int64x2_t *)(v33 + 32);
    v48 = *(int64x2_t *)(v33 + 56);
    v49 = *(double *)(v33 + 96);
    _Q4 = *(int64x2_t *)(v33 + 80);
    v51 = (float64x2_t)vzip1q_s64(v47, v48);
    v52 = (float64x2_t)vzip2q_s64(v47, v48);
    v35.f64[1] = *(float64_t *)(v33 + 72);
    v53 = vextq_s8((int8x16_t)v52, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    v54 = *(double *)(v33 + 120);
    _Q7.f64[0] = *(float64_t *)(v33 + 112);
    __asm { FMLA            D17, D7, V4.D[1] }
    _Q7.f64[0] = *(float64_t *)(v33 + 80);
    v56 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, *(double *)(v33 + 104)), v52, *(float64x2_t *)(v33 + 104), 1), v35, v54));
    *(_QWORD *)&v43.f64[0] = v53.i64[1];
    *(_QWORD *)&v52.f64[1] = v53.i64[0];
    v57 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v49 * v54));
    v61[4] = v35;
    v61[5] = *(unint64_t *)&v49;
    v61[0] = v51;
    v61[1] = *(unint64_t *)&_Q7.f64[0];
    v61[2] = v52;
    v61[3] = *(unint64_t *)&v43.f64[0];
    v61[6] = v56;
    v62 = v57.f64[0];
    v63 = 0x3FF0000000000000;
    result = sub_20F4D7C54((uint64_t)(_X20 + 230), (uint64_t)v64, (uint64_t)v61, &v70, &v68, &v78, &v74, &v76, (uint64_t)v67, (float64x2_t)0, v57, (__n128)*(unint64_t *)&_Q7.f64[0], &v72, 0, 0, 0, 0);
    ++*(_DWORD *)(v9 + 3096);
  }
  v58 = *(_QWORD *)(v9 + 6352);
  for (j = *(_QWORD *)(v9 + 6360); v58 != j; v58 += 8016)
  {
    v60 = *(_BYTE *)(v58 + 7688);
    *(_BYTE *)(v58 + 7688) = 0;
    result = sub_20F4B0BC8();
    *(_BYTE *)(v58 + 7688) = v60;
    *(_DWORD *)(v9 + 3096) += result;
  }
  return result;
}

unint64_t sub_20FBF73C4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, char a6)
{
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  std::string *v30;
  std::string::size_type size;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  size_t v35;
  void **p_dst;
  uint64_t v37;
  const void **v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  const char *v44;
  size_t v45;
  unsigned __int8 v46;
  const char *v47;
  size_t v48;
  std::string::size_type *p_size;
  uint64_t v50;
  uint64_t v51;
  std::string::value_type *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  size_t v56;
  void *v57;
  _QWORD *v58;
  size_t v59;
  size_t v60;
  uint64_t *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::string::size_type v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string::size_type v82;
  std::string::size_type v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  std::string::size_type v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const char *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _DWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char **v126;
  char *v127;
  unsigned int *v128;
  unsigned int *v129;
  char *v130;
  unsigned int v131;
  int64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  std::string::size_type v136;
  size_t v137;
  uint64_t *v138;
  int v139;
  __int128 *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  float64x2_t v172;
  double v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  __int128 *v179;
  uint64_t v180;
  uint64_t *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  double *v200;
  uint64_t v201;
  uint64_t v202;
  float64x2_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  float64x2_t v207;
  double v208;
  float64x2_t v209;
  double v210;
  float64x2_t v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  float64x2_t v249;
  double v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  float64x2_t v275;
  double v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  uint64_t v282;
  std::runtime_error *v283;
  void *v284;
  float64x2_t v285;
  double v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  void *v292;
  unint64_t v293;
  unint64_t v294;
  size_t v295;
  const void **v296;
  uint64_t v297;
  void *v298;
  float64x2_t v299;
  double v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  void *v306;
  unint64_t v307;
  unint64_t v308;
  size_t v309;
  const void **v310;
  uint64_t v311;
  double *v312;
  double *v313;
  int v314;
  uint64_t v315;
  unint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  size_t v329;
  const char *v330;
  unsigned __int8 v331;
  unsigned __int8 v332;
  const char *v333;
  size_t v334;
  _BYTE *v335;
  unint64_t v336;
  const char *v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  NSObject *v345;
  size_t v346;
  std::__shared_weak_count_vtbl *v347;
  std::__shared_weak_count *v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::string::size_type v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  void *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t v381;
  int v382;
  unint64_t v383;
  unint64_t v384;
  _QWORD *v385;
  std::string *v386;
  std::string::size_type v387;
  size_t v388;
  void **v389;
  uint64_t v390;
  const void *v391;
  uint64_t v392;
  uint64_t v393;
  void **v394;
  uint64_t v395;
  size_t v396;
  const char *v397;
  unsigned __int8 v398;
  const char *v399;
  size_t v400;
  std::string::size_type *v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  std::string::value_type *v405;
  const char *v406;
  unint64_t v407;
  NSObject *v408;
  uint64_t v409;
  uint64_t v410;
  size_t v411;
  void *v412;
  _QWORD *v413;
  size_t v414;
  size_t v415;
  uint64_t *v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char v421;
  _QWORD *v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::string::size_type v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::string::size_type v437;
  std::string::size_type v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  std::string::size_type v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  const char *v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t result;
  unsigned int v469;
  int v470;
  std::runtime_error *exception;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  uint64_t v600;
  uint64_t v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  const char *v628;
  __int128 v629;
  __int128 v630;
  uint64_t v631;
  __int128 v632;
  __int128 v633;
  int v634;
  __int128 v635;
  __int128 v636;
  char *__s;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  double **v641;
  uint64_t *v642;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  int v648;
  uint64_t *v650;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v652;
  int v653;
  const char *v654;
  int v655;
  const char *v656;
  uint64_t v657;
  std::__shared_weak_count *v658;
  void **__dst;
  size_t v660;
  int64_t v661;
  uint64_t v662;
  std::string v663;
  char *v664;
  std::string::size_type v665;
  uint64_t *v666;
  __int128 v667;
  _BYTE __src[88];
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  uint64_t v776;
  std::string __p[2];
  __int128 v778;
  __int128 v779;
  _QWORD v780[5];

  v780[2] = *MEMORY[0x24BDAC8D0];
  v9 = (_BYTE *)(a1 + 7825);
  v10 = a1 + 4856;
  v11 = *(_QWORD *)(a1 + 5184);
  v12 = *(_QWORD *)(a1 + 5176);
  *(_DWORD *)(a1 + 7836) = 0;
  *(_BYTE *)(a1 + 7825) = 1;
  if (sub_20F89F3D0(a1 + 4856))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(__p, 1u);
    sub_20E8B0848("system under-determined in marginalizer / synchronizeB ", __p, (std::string *)__src);
    std::runtime_error::runtime_error(exception, (const std::string *)__src);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *v9 = 0;
  sub_20FC03218(a1);
  sub_20FC03704((_QWORD *)a1);
  sub_20FBFE268(a1, 0, (unint64_t)(v11 - v12) >> 4);
  v13 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v13 + 64))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1414, (uint64_t)"this->viobadata_ref_.state_set->size() >= kept_idx", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v14 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 48);
    v15 = (_QWORD *)v14[1];
    if (v15)
      goto LABEL_4;
LABEL_9:
    v18 = v14;
    do
    {
      v17 = (_QWORD *)v18[2];
      v23 = *v17 == (_QWORD)v18;
      v18 = v17;
    }
    while (!v23);
    goto LABEL_12;
  }
  v14 = *(_QWORD **)(v13 + 48);
  v15 = (_QWORD *)v14[1];
  if (!v15)
    goto LABEL_9;
LABEL_4:
  v16 = v15;
  do
  {
    v17 = v16;
    v16 = (_QWORD *)*v16;
  }
  while (v16);
LABEL_12:
  v19 = (uint64_t *)v17[4];
  v20 = *((_DWORD *)v17 + 10);
  if (v15)
  {
    do
    {
      v21 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  else
  {
    v22 = v14;
    do
    {
      v21 = (_QWORD *)v22[2];
      v23 = *v21 == (_QWORD)v22;
      v22 = v21;
    }
    while (!v23);
  }
  v642 = (uint64_t *)v21[4];
  v648 = *((_DWORD *)v21 + 10);
  v23 = v642 == v19 && *((_DWORD *)v21 + 10) == v20;
  if (v23)
  {
    v645 = v14[5];
    v639 = *(_QWORD *)(a1 + 5184);
    v638 = *(_QWORD *)(a1 + 5176);
    if (!a6)
    {
LABEL_181:
      if (!*(_BYTE *)(a1 + 1841))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1434, (uint64_t)"this->parameters().ba_config.use_direct_oldest_pose_marginalization", 67, (uint64_t)"Non-direct marginalization should not be used with LPS. Please disable.", 71, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(a1 + 1841))
        {
          sub_20FC02220(a1, v645);
          if (sub_20F89F3D0(v10))
          {
            v283 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            sub_20E8610C0(__src, "marginalizer B3");
            std::runtime_error::runtime_error(v283, (const std::string *)__src);
            v283->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
            __cxa_throw(v283, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          goto LABEL_266;
        }
      }
      v113 = (_QWORD *)(a1 + 65632);
      v114 = *(_DWORD **)(a1 + 65632);
      *(_QWORD *)(a1 + 65640) = v114;
      *(_QWORD *)(a1 + 65664) = *(_QWORD *)(a1 + 65656);
      *(_QWORD *)(a1 + 65688) = *(_QWORD *)(a1 + 65680);
      *(_QWORD *)(a1 + 65712) = *(_QWORD *)(a1 + 65704);
      *(_QWORD *)(a1 + 65736) = *(_QWORD *)(a1 + 65728);
      *(_QWORD *)(a1 + 65760) = *(_QWORD *)(a1 + 65752);
      *(_QWORD *)(a1 + 65784) = *(_QWORD *)(a1 + 65776);
      *(_QWORD *)(a1 + 65808) = *(_QWORD *)(a1 + 65800);
      *(_QWORD *)(a1 + 65832) = *(_QWORD *)(a1 + 65824);
      v115 = *(_QWORD *)(a1 + 65872);
      *(_QWORD *)(a1 + 65856) = *(_QWORD *)(a1 + 65848);
      *(_QWORD *)(a1 + 65880) = v115;
      *(_QWORD *)(a1 + 65904) = *(_QWORD *)(a1 + 65896);
      *(_QWORD *)(a1 + 65928) = *(_QWORD *)(a1 + 65920);
      *(_QWORD *)(a1 + 65952) = *(_QWORD *)(a1 + 65944);
      *(_QWORD *)(a1 + 65976) = *(_QWORD *)(a1 + 65968);
      *(_QWORD *)(a1 + 66000) = *(_QWORD *)(a1 + 65992);
      *(_QWORD *)(a1 + 66024) = *(_QWORD *)(a1 + 66016);
      *(_QWORD *)(a1 + 66048) = *(_QWORD *)(a1 + 66040);
      *(_QWORD *)(a1 + 66072) = *(_QWORD *)(a1 + 66064);
      *(_QWORD *)(a1 + 66096) = *(_QWORD *)(a1 + 66088);
      if (*(_DWORD **)(a1 + 65648) == v114)
      {
        if (v114)
        {
          *(_QWORD *)(a1 + 65640) = v114;
          operator delete(v114);
          *v113 = 0;
          *(_QWORD *)(a1 + 65640) = 0;
          *(_QWORD *)(a1 + 65648) = 0;
        }
        v114 = operator new(4uLL);
        *v113 = v114;
        *(_QWORD *)(a1 + 65640) = v114;
        *(_QWORD *)(a1 + 65648) = v114 + 1;
      }
      *v114 = v645;
      *(_QWORD *)(a1 + 65640) = v114 + 1;
      if (*(_BYTE *)(a1 + 2146))
        v116 = (_QWORD *)(a1 + 65632);
      else
        v116 = (_QWORD *)(a1 + 65872);
      v117 = (_DWORD *)v116[3];
      v118 = (_DWORD *)v116[5];
      if (v118 == v117)
      {
        if (v118)
        {
          v116[4] = v118;
          operator delete(v118);
          v116[3] = 0;
          v116[4] = 0;
          v116[5] = 0;
        }
        v117 = operator new(4uLL);
        v116[4] = v117;
        v119 = v116 + 4;
        *(v119 - 1) = v117;
        v119[1] = v117 + 1;
      }
      else
      {
        v119 = v116 + 4;
      }
      v120 = a1 + 66352;
      *v117 = v645;
      *v119 = v117 + 1;
      sub_20F8EE574((char **)(a1 + 66352), (char **)(a1 + 43056));
      v121 = a1 + 66112;
      sub_20F8EE574((char **)(a1 + 66112), (char **)(a1 + 65632));
      sub_20FA43DFC(a1 + 66112, a1 + 65872);
      v122 = 0;
      v641 = (double **)(a1 + 67072);
      do
      {
        v123 = v120 + 24 * v122;
        v124 = *(char **)v123;
        v127 = *(char **)(v123 + 8);
        v126 = (char **)(v123 + 8);
        v125 = v127;
        if (v124 != v127)
        {
          v128 = *(unsigned int **)(v121 + 24 * v122 + 8);
          v129 = *(unsigned int **)(v121 + 24 * v122);
          v130 = v124;
          while (v129 != v128)
          {
            v131 = *(_DWORD *)v130;
            if (*(_DWORD *)v130 >= *v129)
            {
              v130 += 4 * (*v129++ >= v131);
              if (v130 == v125)
                goto LABEL_204;
            }
            else
            {
              *(_DWORD *)v124 = v131;
              v124 += 4;
              v130 += 4;
              if (v130 == v125)
              {
LABEL_204:
                if (v124 == v125)
                  goto LABEL_197;
                goto LABEL_208;
              }
            }
          }
          if (v130 != v124)
          {
            v132 = v125 - v130;
            memmove(v124, v130, v125 - v130);
            v124 += v132;
            if (v124 != *v126)
LABEL_208:
              *v126 = v124;
          }
        }
LABEL_197:
        ++v122;
      }
      while (v122 != 10);
      v133 = 9 * ((*(_QWORD *)(v120 + 32) - *(_QWORD *)(v120 + 24)) >> 2)
           + 6
           * (((*(_QWORD *)(v120 + 56) - *(_QWORD *)(v120 + 48)) >> 2)
            + ((*(_QWORD *)(v120 + 8) - *(_QWORD *)v120) >> 2)
            + ((*(_QWORD *)(v120 + 80) - *(_QWORD *)(v120 + 72)) >> 2))
           + ((*(_QWORD *)(v120 + 128) - *(_QWORD *)(v120 + 120)) >> 2)
           + ((*(_DWORD *)(v120 + 152) - *(_DWORD *)(v120 + 144)) & 0xFFFFFFFC)
           + ((*(_DWORD *)(v120 + 176) - *(_DWORD *)(v120 + 168)) & 0xFFFFFFFC)
           + 3
           * (((*(_QWORD *)(v120 + 200) - *(_QWORD *)(v120 + 192)) >> 2)
            + ((*(_QWORD *)(v120 + 104) - *(_QWORD *)(v120 + 96)) >> 2)
            + ((*(_QWORD *)(v120 + 224) - *(_QWORD *)(v120 + 216)) >> 2));
      v134 = (_QWORD *)(a1 + 27728);
      *(_DWORD *)(a1 + 27744) = v133;
      v135 = a1 + 5168;
      v136 = a1 + 67072;
      if (*(_QWORD *)(a1 + 27736) < v133)
      {
        if (*v134)
          MEMORY[0x212BC6368](*v134, 0x1000C8000313F17);
        *(_QWORD *)(a1 + 27728) = 0;
        v137 = (8 * v133 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(a1 + 27736) = v137 >> 3;
        *(_QWORD *)(a1 + 27728) = operator new(v137, (std::align_val_t)0x20uLL);
      }
      sub_20F8DF948((_QWORD *)(a1 + 5168), a1 + 66352, (_QWORD *)(a1 + 27728));
      sub_20F8F2BC0(a1 + 65632, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66592);
      sub_20F8F2BC0(a1 + 66352, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66832);
      sub_20F8FAA7C(a1 + 27856, (void **)(a1 + 67072), a1 + 67096, a1 + 66592, a1 + 66832);
      sub_20F8F2BC0(a1 + 65632, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66592);
      sub_20F8F2ED0(a1 + 27856, (void **)(a1 + 67096), a1 + 66592, (_DWORD **)(a1 + 66592));
      sub_20F8F2BC0(a1 + 66352, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66592);
      v138 = (uint64_t *)(a1 + 67120);
      sub_20F8F2ED0(a1 + 27856, (void **)(a1 + 67120), a1 + 66592, (_DWORD **)(a1 + 66592));
      v139 = *(_DWORD *)(a1 + 67112);
      if (v139 != 6)
      {
        if (v139 != 15)
        {
          sub_20FBA3C5C(a1 + 67096);
          goto LABEL_250;
        }
        v140 = *(__int128 **)(a1 + 67096);
        if (*(_DWORD *)(a1 + 67088) == 15 && *(_DWORD *)(a1 + 67092) == 15)
        {
          *(_DWORD *)__src = 2;
          v635 = *v140;
          v632 = v140[1];
          v629 = v140[2];
          v626 = v140[3];
          v624 = v140[4];
          v622 = v140[5];
          v620 = v140[6];
          v618 = v140[7];
          v616 = v140[8];
          v614 = v140[9];
          v612 = v140[10];
          v610 = v140[11];
          v608 = v140[12];
          v606 = v140[13];
          v604 = v140[14];
          v602 = v140[15];
          v600 = *((_QWORD *)v140 + 224);
          v598 = v140[16];
          v594 = v140[18];
          v596 = v140[17];
          v590 = v140[20];
          v592 = v140[19];
          v586 = v140[22];
          v588 = v140[21];
          v582 = v140[24];
          v584 = v140[23];
          v578 = v140[26];
          v580 = v140[25];
          v574 = v140[28];
          v576 = v140[27];
          v570 = v140[30];
          v572 = v140[29];
          v566 = v140[32];
          v568 = v140[31];
          v562 = v140[34];
          v564 = v140[33];
          v558 = v140[36];
          v560 = v140[35];
          v554 = v140[38];
          v556 = v140[37];
          v550 = v140[40];
          v552 = v140[39];
          v546 = v140[42];
          v548 = v140[41];
          v542 = v140[44];
          v544 = v140[43];
          v538 = v140[46];
          v540 = v140[45];
          v534 = v140[48];
          v536 = v140[47];
          v530 = v140[50];
          v532 = v140[49];
          v526 = v140[52];
          v528 = v140[51];
          v522 = v140[54];
          v524 = v140[53];
          v518 = v140[56];
          v520 = v140[55];
          v514 = v140[58];
          v516 = v140[57];
          v510 = v140[60];
          v512 = v140[59];
          v506 = v140[62];
          v508 = v140[61];
          v502 = v140[64];
          v504 = v140[63];
          v498 = v140[66];
          v500 = v140[65];
          v494 = v140[68];
          v496 = v140[67];
          v490 = v140[70];
          v492 = v140[69];
          v486 = v140[72];
          v488 = v140[71];
          v482 = v140[74];
          v484 = v140[73];
          v478 = v140[76];
          v480 = v140[75];
          v474 = v140[78];
          v476 = v140[77];
          v472 = v140[79];
          v141 = v140[80];
          v142 = v140[81];
          v143 = v140[82];
          v144 = v140[83];
          v145 = v140[84];
          v146 = v140[85];
          v147 = v140[86];
          v148 = v140[87];
          v149 = v140[88];
          v150 = v140[89];
          v151 = v140[90];
          v152 = v140[91];
          v153 = v140[92];
          v154 = v140[93];
          v155 = v140[94];
          v156 = v140[95];
          v157 = v140[96];
          v158 = v140[97];
          v159 = v140[98];
          v160 = v140[99];
          v161 = v140[100];
          v162 = v140[101];
          v163 = v140[102];
          v164 = v140[103];
          v165 = v140[104];
          v166 = v140[105];
          v167 = v140[106];
          v168 = v140[107];
          v169 = v140[108];
          v170 = v140[109];
          v171 = v140[110];
          v775 = v140[111];
          v774 = v171;
          v773 = v170;
          v772 = v169;
          v771 = v168;
          v770 = v167;
          v769 = v166;
          v768 = v165;
          v767 = v164;
          v766 = v163;
          v765 = v162;
          v764 = v161;
          v763 = v160;
          v762 = v159;
          v761 = v158;
          v760 = v157;
          v759 = v156;
          v758 = v155;
          v757 = v154;
          v756 = v153;
          v755 = v152;
          v754 = v151;
          v753 = v150;
          v752 = v149;
          v751 = v148;
          v750 = v147;
          v749 = v146;
          v748 = v145;
          v747 = v144;
          v746 = v143;
          v745 = v142;
          v744 = v141;
          v743 = v472;
          v742 = v474;
          v741 = v476;
          v740 = v478;
          v739 = v480;
          v738 = v482;
          v737 = v484;
          v736 = v486;
          v735 = v488;
          v734 = v490;
          v733 = v492;
          v732 = v494;
          v731 = v496;
          v730 = v498;
          v729 = v500;
          v727 = v504;
          v728 = v502;
          v725 = v508;
          v726 = v506;
          v723 = v512;
          v724 = v510;
          v721 = v516;
          v722 = v514;
          v719 = v520;
          v720 = v518;
          v717 = v524;
          v718 = v522;
          v715 = v528;
          v716 = v526;
          v713 = v532;
          v714 = v530;
          v711 = v536;
          v712 = v534;
          v709 = v540;
          v710 = v538;
          v707 = v544;
          v708 = v542;
          v705 = v548;
          v706 = v546;
          v703 = v552;
          v704 = v550;
          v701 = v556;
          v702 = v554;
          v699 = v560;
          v700 = v558;
          v697 = v564;
          v698 = v562;
          v695 = v568;
          v696 = v566;
          v693 = v572;
          v694 = v570;
          v691 = v576;
          v692 = v574;
          v689 = v580;
          v690 = v578;
          v687 = v584;
          v688 = v582;
          v685 = v588;
          v686 = v586;
          v683 = v592;
          v684 = v590;
          v681 = v596;
          v682 = v594;
          v680 = v598;
          v776 = v600;
          v679 = v602;
          v678 = v604;
          v677 = v606;
          v676 = v608;
          v675 = v610;
          v674 = v612;
          v673 = v614;
          v672 = v616;
          v671 = v618;
          v670 = v620;
          v669 = v622;
          *(_OWORD *)&__src[72] = v624;
          *(_OWORD *)&__src[56] = v626;
          *(_OWORD *)&__src[40] = v629;
          *(_OWORD *)&__src[24] = v632;
          *(_OWORD *)&__src[8] = v635;
          *(_DWORD *)__src = sub_20E8BE940() != 0;
          sub_20E8BE7C8(0, 0, 1, 1, 15, 15, (double *)&__src[8], 15, 1.0, v172, v173, v174, v175, v176, v177, v178, *v641, 15);
LABEL_249:
          __p[0].__r_.__value_.__r.__words[0] = v136;
          *(_QWORD *)&__src[8] = __p;
          *(_QWORD *)&__src[16] = v136;
          *(_QWORD *)&__src[24] = 0x3FF0000000000000;
          sub_20F2B8D98((uint64_t)v138, (uint64_t)__src);
LABEL_250:
          sub_20F8D63EC((_QWORD *)(a1 + 27752), (char **)(a1 + 66352));
          v314 = *(_DWORD *)(v136 + 64);
          v315 = (*(_DWORD *)(v136 + 68) * v314);
          if ((_DWORD)v315)
          {
            v316 = 0;
            v317 = *(_QWORD **)(v136 + 48);
            v318 = 8 * v315;
            v319 = v317;
            do
            {
              v323 = 0;
              if (v316 <= HIDWORD(v316))
                v323 = v317[(v316 + v314 * HIDWORD(v316))];
              *v319++ = v323;
              v320 = (v316 + 1);
              v321 = v316 & 0xFFFFFFFF00000000;
              v322 = v321 | v320;
              v316 = v321 + 0x100000000;
              if (v314 > (int)v320)
                v316 = v322;
              v318 -= 8;
            }
            while (v318);
          }
          LODWORD(v650) = 0;
          LODWORD(v663.__r_.__value_.__l.__data_) = 0;
          memset(__src, 0, 80);
          v778 = 0u;
          v779 = 0u;
          memset(__p, 0, sizeof(__p));
          sub_20F8E03B8((_QWORD *)(a1 + 27856), (int *)&v650, &v663, __src, __p);
          sub_20F8E0678(a1 + 27856, v138, (unsigned int *)__src, (unsigned int *)__p);
          v324 = *(unsigned int *)(a1 + 27768);
          if ((_DWORD)v324)
            bzero(*(void **)(a1 + 27752), 8 * v324);
          if (sub_20FC043E4(v135, v645))
          {
            *(_WORD *)(a1 + 7828) = 0;
            *(_DWORD *)(a1 + 7824) = 0;
          }
          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2624, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_515;
          }
          if (sub_20FC045E8(v135, v645))
          {
            *(_WORD *)(a1 + 7828) = 0;
            *(_DWORD *)(a1 + 7824) = 0;
LABEL_265:
            sub_20F8D0830(v135);
LABEL_266:
            sub_20FBFE268(a1, 1, (unint64_t)(v639 - v638) >> 4);
            goto LABEL_267;
          }
          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2629, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))goto LABEL_265;
LABEL_515:
          abort();
        }
        *(_DWORD *)__src = 2;
        v636 = *v140;
        v633 = v140[1];
        v630 = v140[2];
        v627 = v140[3];
        v625 = v140[4];
        v623 = v140[5];
        v621 = v140[6];
        v619 = v140[7];
        v617 = v140[8];
        v615 = v140[9];
        v613 = v140[10];
        v611 = v140[11];
        v609 = v140[12];
        v607 = v140[13];
        v605 = v140[14];
        v603 = v140[15];
        v601 = *((_QWORD *)v140 + 224);
        v599 = v140[16];
        v595 = v140[18];
        v597 = v140[17];
        v591 = v140[20];
        v593 = v140[19];
        v587 = v140[22];
        v589 = v140[21];
        v583 = v140[24];
        v585 = v140[23];
        v579 = v140[26];
        v581 = v140[25];
        v575 = v140[28];
        v577 = v140[27];
        v571 = v140[30];
        v573 = v140[29];
        v567 = v140[32];
        v569 = v140[31];
        v563 = v140[34];
        v565 = v140[33];
        v559 = v140[36];
        v561 = v140[35];
        v555 = v140[38];
        v557 = v140[37];
        v551 = v140[40];
        v553 = v140[39];
        v547 = v140[42];
        v549 = v140[41];
        v543 = v140[44];
        v545 = v140[43];
        v539 = v140[46];
        v541 = v140[45];
        v535 = v140[48];
        v537 = v140[47];
        v531 = v140[50];
        v533 = v140[49];
        v527 = v140[52];
        v529 = v140[51];
        v523 = v140[54];
        v525 = v140[53];
        v519 = v140[56];
        v521 = v140[55];
        v515 = v140[58];
        v517 = v140[57];
        v511 = v140[60];
        v513 = v140[59];
        v507 = v140[62];
        v509 = v140[61];
        v503 = v140[64];
        v505 = v140[63];
        v499 = v140[66];
        v501 = v140[65];
        v495 = v140[68];
        v497 = v140[67];
        v491 = v140[70];
        v493 = v140[69];
        v487 = v140[72];
        v489 = v140[71];
        v483 = v140[74];
        v485 = v140[73];
        v479 = v140[76];
        v481 = v140[75];
        v475 = v140[78];
        v477 = v140[77];
        v473 = v140[79];
        v218 = v140[80];
        v219 = v140[81];
        v220 = v140[82];
        v221 = v140[83];
        v222 = v140[84];
        v223 = v140[85];
        v224 = v140[86];
        v225 = v140[87];
        v226 = v140[88];
        v227 = v140[89];
        v228 = v140[90];
        v229 = v140[91];
        v230 = v140[92];
        v231 = v140[93];
        v232 = v140[94];
        v233 = v140[95];
        v234 = v140[96];
        v235 = v140[97];
        v236 = v140[98];
        v237 = v140[99];
        v238 = v140[100];
        v239 = v140[101];
        v240 = v140[102];
        v241 = v140[103];
        v242 = v140[104];
        v243 = v140[105];
        v244 = v140[106];
        v245 = v140[107];
        v246 = v140[108];
        v247 = v140[109];
        v248 = v140[110];
        v775 = v140[111];
        v774 = v248;
        v773 = v247;
        v772 = v246;
        v771 = v245;
        v770 = v244;
        v769 = v243;
        v768 = v242;
        v767 = v241;
        v766 = v240;
        v765 = v239;
        v764 = v238;
        v763 = v237;
        v762 = v236;
        v761 = v235;
        v760 = v234;
        v759 = v233;
        v758 = v232;
        v757 = v231;
        v756 = v230;
        v755 = v229;
        v754 = v228;
        v753 = v227;
        v752 = v226;
        v751 = v225;
        v750 = v224;
        v749 = v223;
        v748 = v222;
        v747 = v221;
        v746 = v220;
        v745 = v219;
        v744 = v218;
        v743 = v473;
        v742 = v475;
        v741 = v477;
        v740 = v479;
        v739 = v481;
        v738 = v483;
        v737 = v485;
        v736 = v487;
        v735 = v489;
        v734 = v491;
        v733 = v493;
        v732 = v495;
        v731 = v497;
        v730 = v499;
        v729 = v501;
        v727 = v505;
        v728 = v503;
        v725 = v509;
        v726 = v507;
        v723 = v513;
        v724 = v511;
        v721 = v517;
        v722 = v515;
        v719 = v521;
        v720 = v519;
        v717 = v525;
        v718 = v523;
        v715 = v529;
        v716 = v527;
        v713 = v533;
        v714 = v531;
        v711 = v537;
        v712 = v535;
        v709 = v541;
        v710 = v539;
        v707 = v545;
        v708 = v543;
        v705 = v549;
        v706 = v547;
        v703 = v553;
        v704 = v551;
        v701 = v557;
        v702 = v555;
        v699 = v561;
        v700 = v559;
        v697 = v565;
        v698 = v563;
        v695 = v569;
        v696 = v567;
        v693 = v573;
        v694 = v571;
        v691 = v577;
        v692 = v575;
        v689 = v581;
        v690 = v579;
        v687 = v585;
        v688 = v583;
        v685 = v589;
        v686 = v587;
        v683 = v593;
        v684 = v591;
        v681 = v597;
        v682 = v595;
        v680 = v599;
        v776 = v601;
        v679 = v603;
        v678 = v605;
        v677 = v607;
        v676 = v609;
        v675 = v611;
        v674 = v613;
        v673 = v615;
        v672 = v617;
        v671 = v619;
        v670 = v621;
        v669 = v623;
        *(_OWORD *)&__src[72] = v625;
        *(_OWORD *)&__src[56] = v627;
        *(_OWORD *)&__src[40] = v630;
        *(_OWORD *)&__src[24] = v633;
        *(_OWORD *)&__src[8] = v636;
        *(_DWORD *)__src = sub_20E8BE940() != 0;
        v257 = *(unsigned int *)(a1 + 67088);
        v256 = *(unsigned int *)(a1 + 67092);
        if ((_DWORD)v257 == 15)
        {
          sub_20E8BE7C8(0, 0, 1, 1, 15, v256, (double *)&__src[8], 15, 1.0, v249, v250, v251, v252, v253, v254, v255, *v641, 15);
          goto LABEL_249;
        }
        v298 = operator new((8 * (15 * v256) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v306 = v298;
        v307 = ((8 * (15 * v256) + 31) & 0xFFFFFFFE0uLL) >> 3;
        v308 = (v256 * v257);
        if (v307 >= v308)
        {
          v311 = v256 << 32;
          if (!(_DWORD)v308)
            goto LABEL_247;
          v309 = 8 * v308;
          v310 = (const void **)(a1 + 67072);
        }
        else
        {
          MEMORY[0x212BC6368](v298, 0x1000C8000313F17);
          v309 = 8 * v308;
          v306 = operator new((v309 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          v307 = ((v309 + 31) & 0xFFFFFFFE0) >> 3;
          v310 = (const void **)(a1 + 67072);
          v257 = *(unsigned int *)(a1 + 67088);
          v256 = *(unsigned int *)(a1 + 67092);
          v311 = v256 << 32;
        }
        memcpy(v306, *v310, v309);
LABEL_247:
        sub_20E8BE7C8(0, 0, 1, 1, v257, v256, (double *)&__src[8], 15, 1.0, v299, v300, v301, v302, v303, v304, v305, (double *)v306, v257);
        v313 = *v641;
        *v641 = (double *)v306;
        *(_QWORD *)(a1 + 67080) = v307;
        v136 = a1 + 67072;
        *(_DWORD *)(a1 + 67088) = v257 | v311;
        *(_DWORD *)(a1 + 67092) = HIDWORD(v311);
        v135 = a1 + 5168;
        v138 = (uint64_t *)(a1 + 67120);
        if (v313)
          MEMORY[0x212BC6368](v313, 0x1000C8000313F17);
        goto LABEL_249;
      }
      v179 = *(__int128 **)(a1 + 67096);
      v180 = *(unsigned int *)(a1 + 67088);
      if (*(_QWORD *)(a1 + 67088) == 0x600000006)
      {
        *(_DWORD *)__src = 2;
        v181 = (uint64_t *)&__src[8];
        v182 = *v179;
        v183 = v179[1];
        v184 = v179[2];
        v185 = v179[3];
        v186 = v179[4];
        v187 = v179[5];
        v188 = v179[6];
        v189 = v179[7];
        v190 = v179[8];
        v191 = v179[9];
        v192 = v179[10];
        v193 = v179[11];
        v194 = v179[12];
        v195 = v179[13];
        v196 = v179[14];
        v197 = v179[15];
        v198 = v179[17];
        v680 = v179[16];
        v681 = v198;
        v679 = v197;
        v678 = v196;
        v677 = v195;
        v676 = v194;
        v675 = v193;
        v674 = v192;
        v673 = v191;
        v672 = v190;
        v671 = v189;
        v670 = v188;
        v669 = v187;
        *(_OWORD *)&__src[72] = v186;
        *(_OWORD *)&__src[56] = v185;
        *(_OWORD *)&__src[40] = v184;
        *(_OWORD *)&__src[24] = v183;
        *(_OWORD *)&__src[8] = v182;
        sub_20F215978((uint64_t)__src);
        v199 = 0;
        v200 = *v641;
        v201 = (uint64_t)(*v641 + 18);
        do
        {
          v207.f64[0] = *(float64_t *)(v201 - 144);
          v208 = *(double *)(v201 - 96);
          v209.f64[0] = *(float64_t *)(v201 - 48);
          v210 = *(double *)v201;
          v211.f64[0] = *(float64_t *)(v201 + 48);
          v212 = *(double *)(v201 + 96);
          if (v199)
          {
            v213 = *(double *)&__src[v199 + 8];
            v207.f64[0] = v207.f64[0] - *v200 * v213;
            v208 = v208 - v200[6] * v213;
            v209.f64[0] = v209.f64[0] - v200[12] * v213;
            v210 = v210 - v200[18] * v213;
            v211.f64[0] = v211.f64[0] - v200[24] * v213;
            v212 = v212 - v200[30] * v213;
            if (v199 != 48)
            {
              v214 = *(double *)&__src[v199 + 16];
              v207.f64[0] = v207.f64[0] - v200[1] * v214;
              v208 = v208 - v200[7] * v214;
              v209.f64[0] = v209.f64[0] - v200[13] * v214;
              v210 = v210 - v200[19] * v214;
              v211.f64[0] = v211.f64[0] - v200[25] * v214;
              v212 = v212 - v200[31] * v214;
              if (v199 != 96)
              {
                v215 = *(double *)&__src[v199 + 24];
                v207.f64[0] = v207.f64[0] - v200[2] * v215;
                v208 = v208 - v200[8] * v215;
                v209.f64[0] = v209.f64[0] - v200[14] * v215;
                v210 = v210 - v200[20] * v215;
                v211.f64[0] = v211.f64[0] - v200[26] * v215;
                v212 = v212 - v200[32] * v215;
                if (v199 != 144)
                {
                  v216 = *(double *)&__src[v199 + 32];
                  v207.f64[0] = v207.f64[0] - v200[3] * v216;
                  v208 = v208 - v200[9] * v216;
                  v209.f64[0] = v209.f64[0] - v200[15] * v216;
                  v210 = v210 - v200[21] * v216;
                  v211.f64[0] = v211.f64[0] - v200[27] * v216;
                  v212 = v212 - v200[33] * v216;
                  if (v199 != 192)
                  {
                    v217 = *(double *)&__src[v199 + 40];
                    v207.f64[0] = v207.f64[0] - v200[4] * v217;
                    v208 = v208 - v200[10] * v217;
                    v209.f64[0] = v209.f64[0] - v200[16] * v217;
                    v210 = v210 - v200[22] * v217;
                    v211.f64[0] = v211.f64[0] - v200[28] * v217;
                    v212 = v212 - v200[34] * v217;
                  }
                }
              }
            }
          }
          v202 = *v181;
          v181 += 7;
          v203 = (float64x2_t)vdupq_lane_s64(v202, 0);
          v211.f64[1] = v212;
          v204 = (int8x16_t)vdivq_f64(v211, v203);
          v209.f64[1] = v210;
          v205 = (int8x16_t)vdivq_f64(v209, v203);
          v207.f64[1] = v208;
          v206 = (int8x16_t)vdivq_f64(v207, v203);
          *(_QWORD *)(v201 - 144) = v206.i64[0];
          *(_QWORD *)(v201 - 96) = vextq_s8(v206, v206, 8uLL).u64[0];
          *(_QWORD *)(v201 - 48) = v205.i64[0];
          *(_QWORD *)v201 = vextq_s8(v205, v205, 8uLL).u64[0];
          *(_QWORD *)(v201 + 48) = v204.i64[0];
          *(_QWORD *)(v201 + 96) = vextq_s8(v204, v204, 8uLL).u64[0];
          v199 += 48;
          v201 += 8;
        }
        while (v199 != 288);
        goto LABEL_249;
      }
      *(_DWORD *)__src = 2;
      v258 = *v179;
      v259 = v179[1];
      v260 = v179[2];
      v261 = v179[3];
      v262 = v179[4];
      v263 = v179[5];
      v264 = v179[6];
      v265 = v179[7];
      v266 = v179[8];
      v267 = v179[9];
      v268 = v179[10];
      v269 = v179[11];
      v270 = v179[12];
      v271 = v179[13];
      v272 = v179[14];
      v273 = v179[15];
      v274 = v179[17];
      v680 = v179[16];
      v681 = v274;
      v679 = v273;
      v678 = v272;
      v677 = v271;
      v676 = v270;
      v675 = v269;
      v674 = v268;
      v673 = v267;
      v672 = v266;
      v671 = v265;
      v670 = v264;
      v669 = v263;
      *(_OWORD *)&__src[72] = v262;
      *(_OWORD *)&__src[56] = v261;
      *(_OWORD *)&__src[40] = v260;
      *(_OWORD *)&__src[24] = v259;
      *(_OWORD *)&__src[8] = v258;
      sub_20F215978((uint64_t)__src);
      v282 = *(unsigned int *)(a1 + 67092);
      if ((_DWORD)v180 == 6)
      {
        sub_20E8BE7C8(0, 0, 1, 1, 6, v282, (double *)&__src[8], 6, 1.0, v275, v276, v277, v278, v279, v280, v281, *v641, 6);
        goto LABEL_249;
      }
      v284 = operator new((8 * (6 * v282) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v292 = v284;
      v293 = ((8 * (6 * v282) + 31) & 0xFFFFFFFE0uLL) >> 3;
      v294 = (v282 * v180);
      if (v293 >= v294)
      {
        v297 = v282 << 32;
        if (!(_DWORD)v294)
          goto LABEL_241;
        v295 = 8 * v294;
        v296 = (const void **)(a1 + 67072);
      }
      else
      {
        MEMORY[0x212BC6368](v284, 0x1000C8000313F17);
        v295 = 8 * v294;
        v292 = operator new((v295 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v293 = ((v295 + 31) & 0xFFFFFFFE0) >> 3;
        v296 = (const void **)(a1 + 67072);
        v180 = *(unsigned int *)(a1 + 67088);
        v282 = *(unsigned int *)(a1 + 67092);
        v297 = v282 << 32;
      }
      memcpy(v292, *v296, v295);
LABEL_241:
      sub_20E8BE7C8(0, 0, 1, 1, v180, v282, (double *)&__src[8], 6, 1.0, v285, v286, v287, v288, v289, v290, v291, (double *)v292, v180);
      v312 = *v641;
      *v641 = (double *)v292;
      *(_QWORD *)(a1 + 67080) = v293;
      v136 = a1 + 67072;
      *(_DWORD *)(a1 + 67088) = v180 | v297;
      *(_DWORD *)(a1 + 67092) = HIDWORD(v297);
      v135 = a1 + 5168;
      v138 = (uint64_t *)(a1 + 67120);
      if (v312)
        MEMORY[0x212BC6368](v312, 0x1000C8000313F17);
      goto LABEL_249;
    }
    v24 = (uint64_t *)v14[4];
    sub_20F9B2A4C(&v662);
    if (**(int **)(v662 + 56) > 2
      || ((v25 = *(unsigned __int8 *)(v662 + 72),
           v26 = sub_20E8C31DC(v662, "OSLogSurrogateAppender", 1, 0),
           v27 = v26,
           !v25)
        ? (v28 = v26 == 0)
        : (v28 = 0),
          v28))
    {
LABEL_180:
      *(_DWORD *)__src = v645;
      *(_DWORD *)&__src[4] = v20;
      sub_20FBFF664(a1, 2, __src, 0, 0, a5);
      goto LABEL_181;
    }
    sub_20E863438((uint64_t)__src);
    v29 = sub_20E86A980(&__src[16], (uint64_t)"ExtractConditionalPriorFromLinearSystem(", 40);
    v650 = v24;
    LODWORD(rep) = v645;
    sub_210216370((uint64_t)&v650);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = __p;
    else
      v30 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      size = __p[0].__r_.__value_.__l.__size_;
    sub_20E86A980(v29, (uint64_t)v30, size);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v32 = sub_20E86A980(v29, (uint64_t)", ", 2);
    v650 = v19;
    LODWORD(rep) = v20;
    sub_210216370((uint64_t)&v650);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = __p;
    else
      v33 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      v34 = __p[0].__r_.__value_.__l.__size_;
    sub_20E86A980(v32, (uint64_t)v33, v34);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    sub_20E86A980(v32, (uint64_t)")", 1);
    if ((v671 & 0x10) != 0)
    {
      v37 = *((_QWORD *)&v670 + 1);
      if (*((_QWORD *)&v670 + 1) < *(_QWORD *)&__src[72])
      {
        *((_QWORD *)&v670 + 1) = *(_QWORD *)&__src[72];
        v37 = *(_QWORD *)&__src[72];
      }
      v38 = (const void **)&__src[64];
    }
    else
    {
      if ((v671 & 8) == 0)
      {
        v35 = 0;
        HIBYTE(v661) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_60;
      }
      v38 = (const void **)&__src[40];
      v37 = *(_QWORD *)&__src[56];
    }
    v39 = *v38;
    v35 = v37 - (_QWORD)*v38;
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v35 >= 0x17)
    {
      v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v40 = v35 | 7;
      v41 = v40 + 1;
      p_dst = (void **)operator new(v40 + 1);
      v661 = v41 | 0x8000000000000000;
      __dst = p_dst;
      v660 = v35;
    }
    else
    {
      HIBYTE(v661) = v37 - *(_BYTE *)v38;
      p_dst = (void **)&__dst;
      if (!v35)
      {
LABEL_60:
        v640 = v27;
        v634 = v25;
        *((_BYTE *)p_dst + v35) = 0;
        v650 = &v662;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v652 = std::chrono::system_clock::now().__d_.__rep_;
        v653 = 2;
        v654 = "unknown file";
        v655 = 1426;
        v658 = 0;
        v656 = "unknown function";
        v657 = 0;
        v42 = (void **)&__dst;
        if (v661 < 0)
          v42 = __dst;
        __s = (char *)v42;
        v43 = *v650;
        v44 = (const char *)(*v650 + 16);
        v631 = *v650;
        v628 = v44;
        if (*(char *)(*v650 + 39) < 0)
        {
          v44 = *(const char **)(v43 + 16);
          v45 = *(_QWORD *)(v43 + 24);
        }
        else
        {
          v45 = *(unsigned __int8 *)(*v650 + 39);
        }
        v46 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
          if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v47 = byte_254A4A4F8;
        else
          v47 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v48 = byte_254A4A4F8[23];
        else
          v48 = *(_QWORD *)&byte_254A4A4F8[8];
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v47, v44);
        p_size = &__p[0].__r_.__value_.__l.__size_;
        if (v48 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v48 >= 0x17)
        {
          v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17)
            v50 = v48 | 7;
          v51 = v50 + 1;
          p_size = (std::string::size_type *)operator new(v50 + 1);
          __p[1].__r_.__value_.__r.__words[0] = v51 | 0x8000000000000000;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
          __p[0].__r_.__value_.__r.__words[2] = v48;
        }
        else
        {
          __p[1].__r_.__value_.__s.__data_[7] = v48;
          if (!v48)
          {
LABEL_80:
            *((_BYTE *)p_size + v48) = 0;
            __p[1].__r_.__value_.__s.__data_[8] = 1;
            v52 = &__p[1].__r_.__value_.__s.__data_[16];
            if (v45 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v45 >= 0x17)
            {
              v53 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v45 | 7) != 0x17)
                v53 = v45 | 7;
              v54 = v53 + 1;
              v52 = (std::string::value_type *)operator new(v53 + 1);
              *((_QWORD *)&v778 + 1) = v54 | 0x8000000000000000;
              __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v52;
              *(_QWORD *)&v778 = v45;
            }
            else
            {
              HIBYTE(v778) = v45;
              if (!v45)
              {
LABEL_88:
                v52[v45] = 0;
                LOBYTE(v779) = 1;
                v55 = __p[0].__r_.__value_.__r.__words[0];
                if (SHIBYTE(v778) < 0)
                  operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
                if (__p[1].__r_.__value_.__s.__data_[8] && __p[1].__r_.__value_.__s.__data_[7] < 0)
                  operator delete((void *)__p[0].__r_.__value_.__l.__size_);
                if (__p[0].__r_.__value_.__r.__words[0])
                  os_release(__p[0].__r_.__value_.__l.__data_);
                if (!v640 || !*(_QWORD *)(v640 + 24))
                {
                  os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG);
                  LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
                  v62 = (void *)_os_log_send_and_compose_impl();
                  if (v62)
                    free(v62);
                  goto LABEL_166;
                }
                v56 = _os_log_pack_size();
                v57 = operator new(v56, (std::align_val_t)8uLL);
                v58 = (_QWORD *)operator new();
                *v58 = &off_24C9ABB80;
                v58[1] = 0;
                v58[2] = 0;
                v58[3] = v57;
                v663.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
                v663.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
                v665 = 0;
                v663.__r_.__value_.__r.__words[2] = (std::string::size_type)v58;
                v664 = 0;
                v59 = strlen(__s);
                if (v59 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v60 = v59;
                if (v59 >= 0x17)
                {
                  v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v59 | 7) != 0x17)
                    v63 = v59 | 7;
                  v64 = v63 + 1;
                  v61 = (uint64_t *)operator new(v63 + 1);
                  *((_QWORD *)&v667 + 1) = v64 | 0x8000000000000000;
                  v666 = v61;
                  *(_QWORD *)&v667 = v60;
                }
                else
                {
                  HIBYTE(v667) = v59;
                  v61 = (uint64_t *)&v666;
                  if (!v59)
                  {
LABEL_107:
                    *((_BYTE *)v61 + v60) = 0;
                    v65 = (uint64_t)v666;
                    v780[0] = v667;
                    *(_QWORD *)((char *)v780 + 7) = *(_QWORD *)((char *)&v667 + 7);
                    v66 = HIBYTE(v667);
                    v67 = operator new(0x38uLL);
                    v67[1] = 0;
                    v67[2] = 0;
                    v67[3] = off_24C9ABC20;
                    *v67 = &off_24C9ABBD0;
                    v68 = v780[0];
                    v67[4] = v65;
                    v67[5] = v68;
                    *(_QWORD *)((char *)v67 + 47) = *(_QWORD *)((char *)v780 + 7);
                    *((_BYTE *)v67 + 55) = v66;
                    v780[0] = 0;
                    *(_QWORD *)((char *)v780 + 7) = 0;
                    v69 = (std::__shared_weak_count *)v665;
                    v664 = (char *)(v67 + 3);
                    v665 = (std::string::size_type)v67;
                    if (v69)
                    {
                      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                      do
                        v71 = __ldaxr(p_shared_owners);
                      while (__stlxr(v71 - 1, p_shared_owners));
                      if (!v71)
                      {
                        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                        std::__shared_weak_count::__release_weak(v69);
                      }
                    }
                    __p[0] = v663;
                    v72 = (std::string::size_type)v664;
                    if (v663.__r_.__value_.__r.__words[2])
                    {
                      v73 = (unint64_t *)(v663.__r_.__value_.__r.__words[2] + 8);
                      do
                        v74 = __ldxr(v73);
                      while (__stxr(v74 + 1, v73));
                    }
                    v75 = (std::__shared_weak_count *)v665;
                    __p[1].__r_.__value_.__r.__words[0] = v72;
                    __p[1].__r_.__value_.__l.__size_ = v665;
                    if (v665)
                    {
                      v76 = (unint64_t *)(v665 + 8);
                      do
                        v77 = __ldxr(v76);
                      while (__stxr(v77 + 1, v76));
                      __p[1].__r_.__value_.__r.__words[2] = v72;
                      do
                        v78 = __ldaxr(v76);
                      while (__stlxr(v78 - 1, v76));
                      if (!v78)
                      {
                        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                        std::__shared_weak_count::__release_weak(v75);
                      }
                    }
                    else
                    {
                      __p[1].__r_.__value_.__r.__words[2] = v72;
                    }
                    v79 = (std::__shared_weak_count *)v663.__r_.__value_.__r.__words[2];
                    if (v663.__r_.__value_.__r.__words[2])
                    {
                      v80 = (unint64_t *)(v663.__r_.__value_.__r.__words[2] + 8);
                      do
                        v81 = __ldaxr(v80);
                      while (__stlxr(v81 - 1, v80));
                      if (!v81)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                    }
                    v82 = __p[0].__r_.__value_.__r.__words[0];
                    if (*(char *)(__p[1].__r_.__value_.__r.__words[2] + 31) >= 0)
                      v83 = __p[1].__r_.__value_.__r.__words[2] + 8;
                    else
                      v83 = *(_QWORD *)(__p[1].__r_.__value_.__r.__words[2] + 8);
                    v84 = _os_log_pack_fill();
                    *(_DWORD *)v84 = 136315138;
                    *(_QWORD *)(v84 + 4) = v83;
                    v85 = operator new();
                    v86 = *(unsigned __int8 *)(v631 + 39);
                    v87 = v628;
                    if ((v86 & 0x80u) != 0)
                    {
                      v87 = *(const char **)(v631 + 16);
                      v86 = *(_QWORD *)(v631 + 24);
                    }
                    *(_QWORD *)v85 = v82;
                    *(_OWORD *)(v85 + 8) = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1];
                    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v85 + 24) = *(_OWORD *)&__p[1].__r_.__value_.__l.__data_;
                    *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = 0uLL;
                    *(_QWORD *)(v85 + 40) = v87;
                    *(_QWORD *)(v85 + 48) = v86;
                    *(_BYTE *)(v85 + 56) = 2;
                    v666 = 0;
                    v663.__r_.__value_.__r.__words[0] = v85;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v640 + 24) + 40))(*(_QWORD *)(v640 + 24), &v663);
                    v88 = v663.__r_.__value_.__r.__words[0];
                    v663.__r_.__value_.__r.__words[0] = 0;
                    if (v88)
                    {
                      v89 = *(std::__shared_weak_count **)(v88 + 32);
                      if (v89)
                      {
                        v90 = (unint64_t *)&v89->__shared_owners_;
                        do
                          v91 = __ldaxr(v90);
                        while (__stlxr(v91 - 1, v90));
                        if (!v91)
                        {
                          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                          std::__shared_weak_count::__release_weak(v89);
                        }
                      }
                      v92 = *(std::__shared_weak_count **)(v88 + 16);
                      if (v92)
                      {
                        v93 = (unint64_t *)&v92->__shared_owners_;
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                        if (!v94)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
                      MEMORY[0x212BC6398](v88, 0x10F0C40B62ED6C6);
                      v95 = (uint64_t)v666;
                      v666 = 0;
                      if (v95)
                      {
                        v96 = *(std::__shared_weak_count **)(v95 + 32);
                        if (v96)
                        {
                          v97 = (unint64_t *)&v96->__shared_owners_;
                          do
                            v98 = __ldaxr(v97);
                          while (__stlxr(v98 - 1, v97));
                          if (!v98)
                          {
                            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                            std::__shared_weak_count::__release_weak(v96);
                          }
                        }
                        v99 = *(std::__shared_weak_count **)(v95 + 16);
                        if (v99)
                        {
                          v100 = (unint64_t *)&v99->__shared_owners_;
                          do
                            v101 = __ldaxr(v100);
                          while (__stlxr(v101 - 1, v100));
                          if (!v101)
                          {
                            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                            std::__shared_weak_count::__release_weak(v99);
                          }
                        }
                        MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
                      }
                    }
                    v102 = (std::__shared_weak_count *)__p[1].__r_.__value_.__l.__size_;
                    if (__p[1].__r_.__value_.__l.__size_)
                    {
                      v103 = (unint64_t *)(__p[1].__r_.__value_.__l.__size_ + 8);
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    v105 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
                    if (__p[0].__r_.__value_.__r.__words[2])
                    {
                      v106 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
LABEL_166:
                    if (v634)
                    {
                      v108 = (const char *)&__dst;
                      if (v661 < 0)
                        v108 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v650, "%s", v108);
                      sub_20E863570((uint64_t)&v650);
                    }
                    sub_20E863570((uint64_t)&v650);
                    v109 = v658;
                    if (v658)
                    {
                      v110 = (unint64_t *)&v658->__shared_owners_;
                      do
                        v111 = __ldaxr(v110);
                      while (__stlxr(v111 - 1, v110));
                      if (!v111)
                      {
                        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                        std::__shared_weak_count::__release_weak(v109);
                      }
                    }
                    if (SHIBYTE(v661) < 0)
                      operator delete(__dst);
                    *(_QWORD *)__src = *MEMORY[0x24BEDB7F0];
                    v112 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&__src[16] = v112;
                    *(_QWORD *)&__src[24] = MEMORY[0x24BEDB848] + 16;
                    if (SBYTE7(v670) < 0)
                      operator delete((void *)v669);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290]((char *)&v671 + 8);
                    goto LABEL_180;
                  }
                }
                memcpy(v61, __s, v60);
                goto LABEL_107;
              }
            }
            memmove(v52, v44, v45);
            goto LABEL_88;
          }
        }
        memmove(p_size, v47, v48);
        goto LABEL_80;
      }
    }
    memmove(p_dst, v39, v35);
    goto LABEL_60;
  }
LABEL_267:
  if (!sub_20FC02E88((_QWORD *)a1, a2))
    goto LABEL_356;
  sub_20F9B2A4C(&v666);
  if (*(int *)v666[7] > 3)
    goto LABEL_356;
  v325 = *((unsigned __int8 *)v666 + 72);
  v326 = sub_20E8C31DC((uint64_t)v666, "OSLogSurrogateAppender", 1, 0);
  v327 = v326;
  if (!v325 && !v326)
    goto LABEL_356;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v666;
  __p[0].__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p[0].__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(__p[1].__r_.__value_.__l.__data_) = 3;
  __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)"unknown file";
  LODWORD(__p[1].__r_.__value_.__r.__words[2]) = 1576;
  *(_QWORD *)&v779 = 0;
  *(_QWORD *)&v778 = "unknown function";
  *((_QWORD *)&v778 + 1) = 0;
  v328 = *(_QWORD *)__p[0].__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)__p[0].__r_.__value_.__l.__data_ + 39) < 0)
  {
    v330 = *(const char **)(v328 + 16);
    v329 = *(_QWORD *)(v328 + 24);
    v646 = *(_QWORD *)__p[0].__r_.__value_.__l.__data_ + 16;
    v332 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v332 & 1) != 0)
      goto LABEL_275;
  }
  else
  {
    v329 = *(unsigned __int8 *)(*(_QWORD *)__p[0].__r_.__value_.__l.__data_ + 39);
    v330 = (const char *)(*(_QWORD *)__p[0].__r_.__value_.__l.__data_ + 16);
    v646 = (uint64_t)v330;
    v331 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v331 & 1) != 0)
      goto LABEL_275;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__src);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
    if (__src[24] && (__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_275:
  if (byte_254A4A4F8[23] >= 0)
    v333 = byte_254A4A4F8;
  else
    v333 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v334 = byte_254A4A4F8[23];
  else
    v334 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__src = os_log_create(v333, v330);
  v335 = &__src[8];
  if (v334 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v334 >= 0x17)
  {
    v336 = v327;
    v337 = v330;
    v338 = v328;
    v339 = v325;
    v340 = (v334 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v334 | 7) != 0x17)
      v340 = v334 | 7;
    v341 = v340 + 1;
    v335 = operator new(v340 + 1);
    *(_QWORD *)&__src[24] = v341 | 0x8000000000000000;
    *(_QWORD *)&__src[8] = v335;
    *(_QWORD *)&__src[16] = v334;
    v325 = v339;
    v328 = v338;
    v330 = v337;
    v327 = v336;
    goto LABEL_288;
  }
  __src[31] = v334;
  if (v334)
LABEL_288:
    memmove(v335, v333, v334);
  v335[v334] = 0;
  __src[32] = 1;
  v342 = &__src[40];
  if (v329 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v329 >= 0x17)
  {
    v343 = (v329 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v329 | 7) != 0x17)
      v343 = v329 | 7;
    v344 = v343 + 1;
    v342 = operator new(v343 + 1);
    *(_QWORD *)&__src[56] = v344 | 0x8000000000000000;
    *(_QWORD *)&__src[40] = v342;
    *(_QWORD *)&__src[48] = v329;
  }
  else
  {
    __src[63] = v329;
    if (!v329)
      goto LABEL_297;
  }
  memmove(v342, v330, v329);
LABEL_297:
  v342[v329] = 0;
  __src[64] = 1;
  v345 = *(NSObject **)__src;
  if ((__src[63] & 0x80000000) != 0)
    operator delete(*(void **)&__src[40]);
  if (__src[32] && (__src[31] & 0x80000000) != 0)
    operator delete(*(void **)&__src[8]);
  if (*(_QWORD *)__src)
    os_release(*(void **)__src);
  if (v327 && *(_QWORD *)(v327 + 24))
  {
    v346 = _os_log_pack_size();
    v347 = (std::__shared_weak_count_vtbl *)operator new(v346, (std::align_val_t)8uLL);
    v348 = (std::__shared_weak_count *)operator new();
    v349 = v348;
    v348->__shared_owners_ = 0;
    v350 = (unint64_t *)&v348->__shared_owners_;
    v348->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v348->__shared_weak_owners_ = 0;
    v348[1].__vftable = v347;
    *(_QWORD *)__src = v347;
    *(_QWORD *)&__src[8] = v347;
    *(_QWORD *)&__src[16] = v348;
    do
      v351 = __ldxr(v350);
    while (__stxr(v351 + 1, v350));
    memset(&__src[24], 0, 24);
    do
      v352 = __ldaxr(v350);
    while (__stlxr(v352 - 1, v350));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v349);
    }
    v353 = *(_QWORD *)__src;
    *(_WORD *)_os_log_pack_fill() = 0;
    v354 = operator new();
    v355 = *(unsigned __int8 *)(v328 + 39);
    v356 = v646;
    if ((v355 & 0x80u) != 0)
    {
      v356 = *(_QWORD *)(v328 + 16);
      v355 = *(_QWORD *)(v328 + 24);
    }
    *(_QWORD *)v354 = v353;
    *(_OWORD *)(v354 + 8) = *(_OWORD *)&__src[8];
    *(_OWORD *)&__src[8] = 0uLL;
    *(_OWORD *)(v354 + 24) = *(_OWORD *)&__src[24];
    *(_QWORD *)&__src[24] = 0;
    *(_QWORD *)&__src[32] = 0;
    *(_QWORD *)(v354 + 40) = v356;
    *(_QWORD *)(v354 + 48) = v355;
    *(_BYTE *)(v354 + 56) = 1;
    v663.__r_.__value_.__r.__words[0] = 0;
    v650 = (uint64_t *)v354;
    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v327 + 24) + 40))(*(_QWORD *)(v327 + 24), &v650);
    v357 = v650;
    v650 = 0;
    if (v357)
    {
      v358 = (std::__shared_weak_count *)v357[4];
      if (v358)
      {
        v359 = (unint64_t *)&v358->__shared_owners_;
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v361 = (std::__shared_weak_count *)v357[2];
      if (v361)
      {
        v362 = (unint64_t *)&v361->__shared_owners_;
        do
          v363 = __ldaxr(v362);
        while (__stlxr(v363 - 1, v362));
        if (!v363)
        {
          ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
          std::__shared_weak_count::__release_weak(v361);
        }
      }
      MEMORY[0x212BC6398](v357, 0x10F0C40B62ED6C6);
      v364 = v663.__r_.__value_.__r.__words[0];
      v663.__r_.__value_.__r.__words[0] = 0;
      if (v364)
      {
        v365 = *(std::__shared_weak_count **)(v364 + 32);
        if (v365)
        {
          v366 = (unint64_t *)&v365->__shared_owners_;
          do
            v367 = __ldaxr(v366);
          while (__stlxr(v367 - 1, v366));
          if (!v367)
          {
            ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
            std::__shared_weak_count::__release_weak(v365);
          }
        }
        v368 = *(std::__shared_weak_count **)(v364 + 16);
        if (v368)
        {
          v369 = (unint64_t *)&v368->__shared_owners_;
          do
            v370 = __ldaxr(v369);
          while (__stlxr(v370 - 1, v369));
          if (!v370)
          {
            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
            std::__shared_weak_count::__release_weak(v368);
          }
        }
        MEMORY[0x212BC6398](v364, 0x10F0C40B62ED6C6);
      }
    }
    v371 = *(std::__shared_weak_count **)&__src[32];
    if (*(_QWORD *)&__src[32])
    {
      v372 = (unint64_t *)(*(_QWORD *)&__src[32] + 8);
      do
        v373 = __ldaxr(v372);
      while (__stlxr(v373 - 1, v372));
      if (!v373)
      {
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
    }
    v374 = *(std::__shared_weak_count **)&__src[16];
    if (*(_QWORD *)&__src[16])
    {
      v375 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
      do
        v376 = __ldaxr(v375);
      while (__stlxr(v376 - 1, v375));
      if (!v376)
      {
        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
        std::__shared_weak_count::__release_weak(v374);
      }
    }
  }
  else
  {
    os_log_type_enabled(v345, OS_LOG_TYPE_INFO);
    *(_WORD *)__src = 0;
    v377 = (void *)_os_log_send_and_compose_impl();
    if (v377)
      free(v377);
  }
  if (v325)
  {
    sub_20E8C003C((uint64_t)__p, "Reset the prior to previous window due to numerical failure in marginalziation.");
    sub_20E863570((uint64_t)__p);
  }
  sub_20E863570((uint64_t)__p);
  v378 = (std::__shared_weak_count *)v779;
  if ((_QWORD)v779)
  {
    v379 = (unint64_t *)(v779 + 8);
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
LABEL_356:
  if (!*(_BYTE *)(a1 + 43296))
  {
    v381 = *(unsigned int *)(a1 + 27768);
    if ((_DWORD)v381)
      bzero(*(void **)(a1 + 27752), 8 * v381);
  }
  a4[7] = v648;
  sub_20F9B2A4C(&v662);
  if (**(int **)(v662 + 56) <= 2)
  {
    v382 = *(unsigned __int8 *)(v662 + 72);
    v383 = sub_20E8C31DC(v662, "OSLogSurrogateAppender", 1, 0);
    v384 = v383;
    if (v382 || v383)
    {
      sub_20E863438((uint64_t)__src);
      v385 = sub_20E86A980(&__src[16], (uint64_t)"ExtractConditionalPriorFromLinearSystem(", 40);
      v650 = v642;
      LODWORD(rep) = v648;
      sub_210216370((uint64_t)&v650);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v386 = __p;
      else
        v386 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v387 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      else
        v387 = __p[0].__r_.__value_.__l.__size_;
      sub_20E86A980(v385, (uint64_t)v386, v387);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      sub_20E86A980(v385, (uint64_t)")", 1);
      v647 = v384;
      if ((v671 & 0x10) != 0)
      {
        v390 = *((_QWORD *)&v670 + 1);
        if (*((_QWORD *)&v670 + 1) < *(_QWORD *)&__src[72])
        {
          *((_QWORD *)&v670 + 1) = *(_QWORD *)&__src[72];
          v390 = *(_QWORD *)&__src[72];
        }
        v391 = *(const void **)&__src[64];
        v388 = v390 - *(_QWORD *)&__src[64];
        if ((unint64_t)(v390 - *(_QWORD *)&__src[64]) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_428;
      }
      else
      {
        if ((v671 & 8) == 0)
        {
          v388 = 0;
          HIBYTE(v661) = 0;
          v389 = (void **)&__dst;
          goto LABEL_383;
        }
        v391 = *(const void **)&__src[40];
        v388 = *(_QWORD *)&__src[56] - *(_QWORD *)&__src[40];
        if (*(_QWORD *)&__src[56] - *(_QWORD *)&__src[40] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_428:
          sub_20E860B7C();
      }
      if (v388 >= 0x17)
      {
        v392 = (v388 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v388 | 7) != 0x17)
          v392 = v388 | 7;
        v393 = v392 + 1;
        v389 = (void **)operator new(v392 + 1);
        v661 = v393 | 0x8000000000000000;
        __dst = v389;
        v660 = v388;
      }
      else
      {
        HIBYTE(v661) = v388;
        v389 = (void **)&__dst;
        if (!v388)
        {
LABEL_383:
          *((_BYTE *)v389 + v388) = 0;
          v650 = &v662;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v652 = std::chrono::system_clock::now().__d_.__rep_;
          v653 = 2;
          v654 = "unknown file";
          v655 = 1589;
          v658 = 0;
          v656 = "unknown function";
          v657 = 0;
          if (v661 >= 0)
            v394 = (void **)&__dst;
          else
            v394 = __dst;
          v395 = *v650;
          if (*(char *)(*v650 + 39) < 0)
          {
            v397 = *(const char **)(v395 + 16);
            v396 = *(_QWORD *)(v395 + 24);
          }
          else
          {
            v396 = *(unsigned __int8 *)(*v650 + 39);
            v397 = (const char *)(*v650 + 16);
          }
          v644 = *v650 + 16;
          v398 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v398 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
            if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v399 = byte_254A4A4F8;
          else
            v399 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v400 = byte_254A4A4F8[23];
          else
            v400 = *(_QWORD *)&byte_254A4A4F8[8];
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v399, v397);
          v401 = &__p[0].__r_.__value_.__l.__size_;
          if (v400 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v400 >= 0x17)
          {
            v402 = v382;
            v403 = (v400 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v400 | 7) != 0x17)
              v403 = v400 | 7;
            v404 = v403 + 1;
            v401 = (std::string::size_type *)operator new(v403 + 1);
            __p[1].__r_.__value_.__r.__words[0] = v404 | 0x8000000000000000;
            __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v401;
            __p[0].__r_.__value_.__r.__words[2] = v400;
            v382 = v402;
          }
          else
          {
            __p[1].__r_.__value_.__s.__data_[7] = v400;
            if (!v400)
            {
LABEL_404:
              *((_BYTE *)v401 + v400) = 0;
              __p[1].__r_.__value_.__s.__data_[8] = 1;
              v405 = &__p[1].__r_.__value_.__s.__data_[16];
              if (v396 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v406 = (const char *)v394;
              if (v396 >= 0x17)
              {
                v409 = (v396 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v396 | 7) != 0x17)
                  v409 = v396 | 7;
                v410 = v409 + 1;
                v407 = v647;
                v405 = (std::string::value_type *)operator new(v409 + 1);
                *((_QWORD *)&v778 + 1) = v410 | 0x8000000000000000;
                __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v405;
                *(_QWORD *)&v778 = v396;
              }
              else
              {
                HIBYTE(v778) = v396;
                v407 = v647;
                if (!v396)
                {
                  __p[1].__r_.__value_.__s.__data_[16] = 0;
                  LOBYTE(v779) = 1;
                  v408 = __p[0].__r_.__value_.__r.__words[0];
                  if ((SHIBYTE(v778) & 0x80000000) == 0)
                    goto LABEL_408;
                  goto LABEL_414;
                }
              }
              memmove(v405, v397, v396);
              v405[v396] = 0;
              LOBYTE(v779) = 1;
              v408 = __p[0].__r_.__value_.__r.__words[0];
              if ((SHIBYTE(v778) & 0x80000000) == 0)
              {
LABEL_408:
                if (!__p[1].__r_.__value_.__s.__data_[8])
                  goto LABEL_417;
                goto LABEL_415;
              }
LABEL_414:
              operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
              if (!__p[1].__r_.__value_.__s.__data_[8])
                goto LABEL_417;
LABEL_415:
              if (__p[1].__r_.__value_.__s.__data_[7] < 0)
                operator delete((void *)__p[0].__r_.__value_.__l.__size_);
LABEL_417:
              if (__p[0].__r_.__value_.__r.__words[0])
                os_release(__p[0].__r_.__value_.__l.__data_);
              if (!v407 || !*(_QWORD *)(v407 + 24))
              {
                os_log_type_enabled(v408, OS_LOG_TYPE_DEBUG);
                LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v406;
                v417 = (void *)_os_log_send_and_compose_impl();
                if (v417)
                  free(v417);
                goto LABEL_492;
              }
              v411 = _os_log_pack_size();
              v412 = operator new(v411, (std::align_val_t)8uLL);
              v413 = (_QWORD *)operator new();
              *v413 = &off_24C9ABB80;
              v413[1] = 0;
              v413[2] = 0;
              v413[3] = v412;
              v663.__r_.__value_.__r.__words[0] = (std::string::size_type)v412;
              v663.__r_.__value_.__l.__size_ = (std::string::size_type)v412;
              v665 = 0;
              v663.__r_.__value_.__r.__words[2] = (std::string::size_type)v413;
              v664 = 0;
              v414 = strlen(v406);
              if (v414 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v415 = v414;
              if (v414 >= 0x17)
              {
                v418 = (v414 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v414 | 7) != 0x17)
                  v418 = v414 | 7;
                v419 = v418 + 1;
                v416 = (uint64_t *)operator new(v418 + 1);
                *((_QWORD *)&v667 + 1) = v419 | 0x8000000000000000;
                v666 = v416;
                *(_QWORD *)&v667 = v415;
              }
              else
              {
                HIBYTE(v667) = v414;
                v416 = (uint64_t *)&v666;
                if (!v414)
                {
LABEL_433:
                  *((_BYTE *)v416 + v415) = 0;
                  v420 = (uint64_t)v666;
                  v780[0] = v667;
                  *(_QWORD *)((char *)v780 + 7) = *(_QWORD *)((char *)&v667 + 7);
                  v421 = HIBYTE(v667);
                  v422 = operator new(0x38uLL);
                  v422[1] = 0;
                  v422[2] = 0;
                  v422[3] = off_24C9ABC20;
                  *v422 = &off_24C9ABBD0;
                  v423 = v780[0];
                  v422[4] = v420;
                  v422[5] = v423;
                  *(_QWORD *)((char *)v422 + 47) = *(_QWORD *)((char *)v780 + 7);
                  *((_BYTE *)v422 + 55) = v421;
                  v780[0] = 0;
                  *(_QWORD *)((char *)v780 + 7) = 0;
                  v424 = (std::__shared_weak_count *)v665;
                  v664 = (char *)(v422 + 3);
                  v665 = (std::string::size_type)v422;
                  if (v424)
                  {
                    v425 = (unint64_t *)&v424->__shared_owners_;
                    do
                      v426 = __ldaxr(v425);
                    while (__stlxr(v426 - 1, v425));
                    if (!v426)
                    {
                      ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
                      std::__shared_weak_count::__release_weak(v424);
                    }
                  }
                  __p[0] = v663;
                  v427 = (std::string::size_type)v664;
                  if (v663.__r_.__value_.__r.__words[2])
                  {
                    v428 = (unint64_t *)(v663.__r_.__value_.__r.__words[2] + 8);
                    do
                      v429 = __ldxr(v428);
                    while (__stxr(v429 + 1, v428));
                  }
                  v430 = (std::__shared_weak_count *)v665;
                  __p[1].__r_.__value_.__r.__words[0] = v427;
                  __p[1].__r_.__value_.__l.__size_ = v665;
                  if (v665)
                  {
                    v431 = (unint64_t *)(v665 + 8);
                    do
                      v432 = __ldxr(v431);
                    while (__stxr(v432 + 1, v431));
                    __p[1].__r_.__value_.__r.__words[2] = v427;
                    do
                      v433 = __ldaxr(v431);
                    while (__stlxr(v433 - 1, v431));
                    if (!v433)
                    {
                      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                      std::__shared_weak_count::__release_weak(v430);
                    }
                  }
                  else
                  {
                    __p[1].__r_.__value_.__r.__words[2] = v427;
                  }
                  v434 = (std::__shared_weak_count *)v663.__r_.__value_.__r.__words[2];
                  if (v663.__r_.__value_.__r.__words[2])
                  {
                    v435 = (unint64_t *)(v663.__r_.__value_.__r.__words[2] + 8);
                    do
                      v436 = __ldaxr(v435);
                    while (__stlxr(v436 - 1, v435));
                    if (!v436)
                    {
                      ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
                      std::__shared_weak_count::__release_weak(v434);
                    }
                  }
                  v437 = __p[0].__r_.__value_.__r.__words[0];
                  if (*(char *)(__p[1].__r_.__value_.__r.__words[2] + 31) >= 0)
                    v438 = __p[1].__r_.__value_.__r.__words[2] + 8;
                  else
                    v438 = *(_QWORD *)(__p[1].__r_.__value_.__r.__words[2] + 8);
                  v439 = _os_log_pack_fill();
                  *(_DWORD *)v439 = 136315138;
                  *(_QWORD *)(v439 + 4) = v438;
                  v440 = operator new();
                  v441 = *(unsigned __int8 *)(v395 + 39);
                  v442 = v644;
                  if ((v441 & 0x80u) != 0)
                  {
                    v442 = *(_QWORD *)(v395 + 16);
                    v441 = *(_QWORD *)(v395 + 24);
                  }
                  *(_QWORD *)v440 = v437;
                  *(_OWORD *)(v440 + 8) = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1];
                  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v440 + 24) = *(_OWORD *)&__p[1].__r_.__value_.__l.__data_;
                  *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = 0uLL;
                  *(_QWORD *)(v440 + 40) = v442;
                  *(_QWORD *)(v440 + 48) = v441;
                  *(_BYTE *)(v440 + 56) = 2;
                  v666 = 0;
                  v663.__r_.__value_.__r.__words[0] = v440;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v407 + 24) + 40))(*(_QWORD *)(v407 + 24), &v663);
                  v443 = v663.__r_.__value_.__r.__words[0];
                  v663.__r_.__value_.__r.__words[0] = 0;
                  if (v443)
                  {
                    v444 = *(std::__shared_weak_count **)(v443 + 32);
                    if (v444)
                    {
                      v445 = (unint64_t *)&v444->__shared_owners_;
                      do
                        v446 = __ldaxr(v445);
                      while (__stlxr(v446 - 1, v445));
                      if (!v446)
                      {
                        ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
                        std::__shared_weak_count::__release_weak(v444);
                      }
                    }
                    v447 = *(std::__shared_weak_count **)(v443 + 16);
                    if (v447)
                    {
                      v448 = (unint64_t *)&v447->__shared_owners_;
                      do
                        v449 = __ldaxr(v448);
                      while (__stlxr(v449 - 1, v448));
                      if (!v449)
                      {
                        ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                        std::__shared_weak_count::__release_weak(v447);
                      }
                    }
                    MEMORY[0x212BC6398](v443, 0x10F0C40B62ED6C6);
                    v450 = (uint64_t)v666;
                    v666 = 0;
                    if (v450)
                    {
                      v451 = *(std::__shared_weak_count **)(v450 + 32);
                      if (v451)
                      {
                        v452 = (unint64_t *)&v451->__shared_owners_;
                        do
                          v453 = __ldaxr(v452);
                        while (__stlxr(v453 - 1, v452));
                        if (!v453)
                        {
                          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                          std::__shared_weak_count::__release_weak(v451);
                        }
                      }
                      v454 = *(std::__shared_weak_count **)(v450 + 16);
                      if (v454)
                      {
                        v455 = (unint64_t *)&v454->__shared_owners_;
                        do
                          v456 = __ldaxr(v455);
                        while (__stlxr(v456 - 1, v455));
                        if (!v456)
                        {
                          ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                          std::__shared_weak_count::__release_weak(v454);
                        }
                      }
                      MEMORY[0x212BC6398](v450, 0x10F0C40B62ED6C6);
                    }
                  }
                  v457 = (std::__shared_weak_count *)__p[1].__r_.__value_.__l.__size_;
                  if (__p[1].__r_.__value_.__l.__size_)
                  {
                    v458 = (unint64_t *)(__p[1].__r_.__value_.__l.__size_ + 8);
                    do
                      v459 = __ldaxr(v458);
                    while (__stlxr(v459 - 1, v458));
                    if (!v459)
                    {
                      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                      std::__shared_weak_count::__release_weak(v457);
                    }
                  }
                  v460 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
                  if (__p[0].__r_.__value_.__r.__words[2])
                  {
                    v461 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
                    do
                      v462 = __ldaxr(v461);
                    while (__stlxr(v462 - 1, v461));
                    if (!v462)
                    {
                      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                      std::__shared_weak_count::__release_weak(v460);
                    }
                  }
LABEL_492:
                  if (v382)
                  {
                    v463 = (const char *)&__dst;
                    if (v661 < 0)
                      v463 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&v650, "%s", v463);
                    sub_20E863570((uint64_t)&v650);
                  }
                  sub_20E863570((uint64_t)&v650);
                  v464 = v658;
                  if (v658)
                  {
                    v465 = (unint64_t *)&v658->__shared_owners_;
                    do
                      v466 = __ldaxr(v465);
                    while (__stlxr(v466 - 1, v465));
                    if (!v466)
                    {
                      ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                      std::__shared_weak_count::__release_weak(v464);
                    }
                  }
                  if (SHIBYTE(v661) < 0)
                    operator delete(__dst);
                  *(_QWORD *)__src = *MEMORY[0x24BEDB7F0];
                  v467 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)&__src[*(_QWORD *)(*(_QWORD *)__src - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  *(_QWORD *)&__src[16] = v467;
                  *(_QWORD *)&__src[24] = MEMORY[0x24BEDB848] + 16;
                  if (SBYTE7(v670) < 0)
                    operator delete((void *)v669);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290]((char *)&v671 + 8);
                  goto LABEL_506;
                }
              }
              memcpy(v416, v406, v415);
              goto LABEL_433;
            }
          }
          memmove(v401, v399, v400);
          goto LABEL_404;
        }
      }
      memmove(v389, v391, v388);
      goto LABEL_383;
    }
  }
LABEL_506:
  *(_DWORD *)__src = v648;
  result = sub_20FBFF664(a1, 1, __src, 1, 1, (uint64_t)a4);
  v469 = a4[4];
  if (*(_BYTE *)(a1 + 2146))
  {
    if (v469 <= 0xE)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1597, (uint64_t)"prior_info.info.rows() >= 15", 28, (uint64_t)"Invalid inertial-state prior info.", 34, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    v470 = 1;
  }
  else
  {
    if (v469 <= 5)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1600, (uint64_t)"prior_info.info.rows() >= 6", 27, (uint64_t)"Invalid pose prior info.", 24, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    v470 = 0;
  }
  a4[6] = v470;
  *(_BYTE *)(a1 + 45160) = 0;
  return result;
}

void sub_20FBFA9C0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xD58]) && SLOBYTE(STACK[0xD57]) < 0)
    operator delete((void *)STACK[0xD40]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x588]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
  {
    operator delete((void *)STACK[0x5D0]);
    sub_20E863784((uint64_t)&STACK[0x630]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

unint64_t sub_20FBFADEC(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  char *v57;
  unsigned int v58;
  char v59;
  const char *v60;
  uint64_t v61;
  uint64_t j;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  unint64_t v69;
  uint64_t k;
  _BYTE *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char **v92;
  char *v93;
  unsigned int *v94;
  unsigned int *v95;
  char *v96;
  unsigned int v97;
  int64_t v98;
  unint64_t v99;
  void **v100;
  size_t v101;
  _QWORD *v102;
  int v103;
  __int128 *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  __int128 *v144;
  uint64_t v145;
  uint64_t *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  double *v165;
  uint64_t v166;
  uint64_t v167;
  float64x2_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  float64x2_t v172;
  double v173;
  float64x2_t v174;
  double v175;
  float64x2_t v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  float64x2_t v214;
  double v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  float64x2_t v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  uint64_t v246;
  double *v247;
  float64x2_t v248;
  double v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  double *v255;
  unint64_t v256;
  size_t v257;
  const void **v258;
  uint64_t v259;
  uint64_t v260;
  double *v261;
  float64x2_t v262;
  double v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  double *v269;
  unint64_t v270;
  size_t v271;
  const void **v272;
  uint64_t v273;
  double *v274;
  double *v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  size_t v291;
  const char *v292;
  unsigned __int8 v293;
  unsigned __int8 v294;
  const char *v295;
  size_t v296;
  _BYTE *v297;
  unint64_t v298;
  const char *v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  NSObject *v307;
  size_t v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  std::__shared_weak_count *v311;
  unint64_t *p_shared_owners;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  std::string::size_type v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  void *v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t result;
  unsigned int v345;
  int v346;
  uint64_t v347;
  int v348;
  unint64_t v349;
  uint64_t v350;
  unsigned int v351;
  std::runtime_error *v352;
  const std::string::value_type *v353;
  std::string::size_type v354;
  std::string *v355;
  __int128 v356;
  std::string *v357;
  __int128 v358;
  size_t v359;
  std::string *v360;
  __int128 v361;
  char *v362;
  char *v363;
  unint64_t v364;
  unint64_t v365;
  unsigned int *v366;
  char *v367;
  unsigned int v368;
  char v369;
  const char *v370;
  uint64_t v371;
  int v372;
  unint64_t v373;
  uint64_t v374;
  unsigned int v375;
  std::runtime_error *exception;
  const std::string::value_type *v377;
  std::string::size_type v378;
  std::string *v379;
  __int128 v380;
  std::string *v381;
  __int128 v382;
  size_t v383;
  std::string *v384;
  __int128 v385;
  std::runtime_error *v386;
  _QWORD *v387;
  _BYTE *v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  size_t v392;
  _QWORD *v393;
  std::string *v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  char *v398;
  _QWORD *v399;
  _BYTE *v400;
  uint64_t v401;
  _QWORD *v402;
  _QWORD *v403;
  size_t v404;
  _QWORD *v405;
  std::string *v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  char *v410;
  std::runtime_error *v411;
  unsigned __int8 v412;
  uint64_t v413;
  const char *v414;
  NSObject *v415;
  std::string *v416;
  unsigned __int8 v417;
  uint64_t v418;
  const char *v419;
  NSObject *v420;
  std::string *v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  uint64_t v550;
  uint64_t v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  int v584;
  void **v585;
  uint64_t *v587;
  int v589;
  int v590;
  int v591;
  double **__vala;
  uint64_t v594;
  _DWORD *v595;
  _QWORD *v596;
  uint64_t v597;
  _BYTE v598[32];
  __int128 v599;
  __int128 v600;
  __int128 v601;
  _QWORD v602[2];
  unsigned __int8 v603;
  std::string *v604;
  std::string v605;
  int v606;
  const char *v607;
  int v608;
  const char *v609;
  uint64_t v610;
  uint64_t v611;
  std::string v612;
  uint64_t v613;
  char *category;
  uint64_t v615;
  const char *v616;
  uint64_t v617;
  _BYTE object[88];
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  uint64_t v726;
  uint64_t v727;

  v727 = *MEMORY[0x24BDAC8D0];
  v596 = (_QWORD *)(a1 + 5168);
  v591 = sub_20F921D44(a1 + 5168, 0);
  sub_20FB9CDC0((_QWORD *)a1);
  v7 = *(_QWORD *)(a1 + 5560);
  v8 = *(_QWORD *)(a1 + 5568);
  v595 = a3;
  while (v7 != v8)
  {
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_DWORD *)v7;
    v11 = *(uint64_t **)(a1 + 24);
    v12 = *(uint64_t **)(a1 + 32);
    if (v11 != v12)
    {
      while (*(_DWORD *)(v9 + 16) != *(_DWORD *)(*v11 + 32))
      {
        if (++v11 == v12)
          goto LABEL_18;
      }
    }
    if (v11 == v12)
    {
LABEL_18:
      if ((*(_BYTE *)(v9 + 4) & 6) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1628, (uint64_t)"id_variable.second.state.isMarginalized() || id_variable.second.state.isRemoved()", 81, (uint64_t)"SLAM variables not associated to an entry in front-end tracks should have been marked as marginalized or removed.", 113, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_331;
      }
    }
    else
    {
      v13 = *v11;
      if (((*(_BYTE *)(v9 + 4) & 6) != 0 || *(_DWORD *)(v13 + 520) != 2)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1638, (uint64_t)"!id_variable.second.state.isMarginalized() && !id_variable.second.state.isRemoved() && track_ptr->isPersistent()", 112, (uint64_t)"SLAM variables associated to an entry in front-end tracks should not have been marked as marginalized or removed, and the track is persistent.", 142, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_331;
      }
      v15 = *(uint64_t **)(v13 + 496);
      v14 = *(uint64_t **)(v13 + 504);
      v16 = *(v14 - 8);
      v17 = *((_DWORD *)v14 - 14);
      while (v15 != v14)
      {
        if (*((_DWORD *)v15 + 2) > v17)
        {
          v16 = *v15;
          v17 = *((_DWORD *)v15 + 2);
        }
        v15 += 8;
      }
      v18 = *(_QWORD *)(a1 + 8);
      v20 = (_QWORD *)(v18 + 56);
      v19 = *(uint64_t **)(v18 + 56);
      if (!v19)
        goto LABEL_33;
      v21 = (_QWORD *)(v18 + 56);
      do
      {
        v22 = v19[4];
        if (v22 < v16)
        {
          ++v19;
        }
        else if (v22 == v16)
        {
          if (*((_DWORD *)v19 + 10) < v17)
            ++v19;
          else
            v21 = v19;
        }
        else
        {
          v21 = v19;
        }
        v19 = (uint64_t *)*v19;
      }
      while (v19);
      if (v21 == v20 || (v23 = v21[4], v16 < v23) || v16 == v23 && *((_DWORD *)v21 + 10) > v17)
      {
LABEL_33:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1651, (uint64_t)"track_latest_state_with_obs_iter != this->viobadata_ref_.state_set->end()", 73, (uint64_t)"The state associated to the latest observation should be in state set.", 70, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_331;
        }
        v18 = *(_QWORD *)(a1 + 8);
        v21 = v20;
      }
      v24 = (_QWORD *)(v18 + 56);
      if (v21 == (_QWORD *)(v18 + 56))
      {
        v26 = -1;
        a3 = v595;
      }
      else
      {
        v25 = 0;
        a3 = v595;
        do
        {
          v26 = v25;
          v27 = (_QWORD *)v21[1];
          if (v27)
          {
            do
            {
              v28 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v28 = (_QWORD *)v21[2];
              v46 = *v28 == (_QWORD)v21;
              v21 = v28;
            }
            while (!v46);
          }
          v25 = v26 + 1;
          v21 = v28;
        }
        while (v28 != v24);
      }
      if (v26 > *(_DWORD *)(a1 + 1936))
      {
        *(_DWORD *)(v13 + 520) = 0;
        if (!sub_20FBCBB4C((uint64_t)v596, v10))
        {
          v603 = 10;
          strcpy((char *)v602, "SLAM track");
          v362 = *(char **)(a1 + 5560);
          v363 = *(char **)(a1 + 5568);
          if (v363 == v362)
            goto LABEL_360;
          v364 = (v363 - v362) >> 4;
          do
          {
            v365 = v364 >> 1;
            v366 = (unsigned int *)&v362[16 * (v364 >> 1)];
            v368 = *v366;
            v367 = (char *)(v366 + 4);
            v364 += ~(v364 >> 1);
            if (v368 < v10)
              v362 = v367;
            else
              v364 = v365;
          }
          while (v364);
          if (v362 == v363 || *(_DWORD *)v362 != v10)
          {
LABEL_360:
            v370 = "not found";
          }
          else
          {
            v369 = *(_BYTE *)(*((_QWORD *)v362 + 1) + 4);
            if ((v369 & 4) != 0)
            {
              v370 = "marginalized";
            }
            else if ((v369 & 1) != 0)
            {
              v370 = "new";
            }
            else if ((v369 & 2) != 0)
            {
              v370 = "removed";
            }
            else
            {
              v370 = "unknown";
            }
          }
          sub_20F9B2A4C(&v613);
          v371 = 0x617274204D414C53;
          if (**(int **)(v613 + 56) <= 5
            && ((v372 = *(unsigned __int8 *)(v613 + 72),
                 (v373 = sub_20E8C31DC(v613, "OSLogSurrogateAppender", 1, 0)) == 0)
              ? (v374 = 0)
              : (v374 = v373 + 16),
                v372 || v373))
          {
            sub_20E863438((uint64_t)object);
            v399 = sub_20E86A980(&object[16], (uint64_t)"Failed to marginalize state ", 28);
            std::to_string((std::string *)v598, v10);
            if (v598[23] >= 0)
              v400 = v598;
            else
              v400 = *(_BYTE **)v598;
            if (v598[23] >= 0)
              v401 = v598[23];
            else
              v401 = *(_QWORD *)&v598[8];
            v402 = sub_20E86A980(v399, (uint64_t)v400, v401);
            v403 = sub_20E86A980(v402, (uint64_t)": ", 2);
            v404 = strlen(v370);
            v405 = sub_20E86A980(v403, (uint64_t)v370, v404);
            sub_20E86A980(v405, (uint64_t)".", 1);
            if ((v598[23] & 0x80000000) != 0)
              operator delete(*(void **)v598);
            sub_20E923E88(object, &v612);
            v605.__r_.__value_.__r.__words[0] = (std::string::size_type)&v613;
            v605.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v605.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v606 = 5;
            v607 = "unknown file";
            v608 = 2809;
            v611 = 0;
            v609 = "unknown function";
            v610 = 0;
            if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v406 = &v612;
            else
              v406 = (std::string *)v612.__r_.__value_.__r.__words[0];
            v604 = v406;
            v407 = *(_QWORD *)v605.__r_.__value_.__l.__data_;
            v408 = (uint64_t *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 16);
            if (*(char *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v410 = *(char **)(v407 + 16);
              v409 = *(_QWORD *)(v407 + 24);
            }
            else
            {
              v409 = *(unsigned __int8 *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 39);
              v410 = (char *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 16);
            }
            category = v410;
            v615 = v409;
            v417 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v417 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v598);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v598);
              if (v598[24] && (v598[23] & 0x80000000) != 0)
                operator delete(*(void **)v598);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v418 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v419 = byte_254A4A4F8;
            }
            else
            {
              v418 = *(_QWORD *)&byte_254A4A4F8[8];
              v419 = *(const char **)byte_254A4A4F8;
            }
            v616 = v419;
            v617 = v418;
            *(_QWORD *)v598 = os_log_create(v419, category);
            sub_20E86E5A8(&v598[8], (uint64_t)&v616);
            sub_20E86E5A8((_QWORD *)&v599 + 1, (uint64_t)&category);
            v420 = *(NSObject **)v598;
            sub_20E86E44C((uint64_t)v598);
            sub_20FBAD060(v374, v408, v420, OS_LOG_TYPE_ERROR, (const char **)&v604);
            if (v372)
            {
              v421 = &v612;
              if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v421 = (std::string *)v612.__r_.__value_.__r.__words[0];
              sub_20E8C003C((uint64_t)&v605, "%s", (const char *)v421);
              sub_20E863570((uint64_t)&v605);
            }
            sub_20E863714((uint64_t)&v605);
            if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v612.__r_.__value_.__l.__data_);
            sub_20E863784((uint64_t)object);
            v375 = v603;
            v371 = v602[0];
          }
          else
          {
            v375 = 10;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          *((_BYTE *)&v612.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&v612, "marginalize ");
          if ((v375 & 0x80u) == 0)
            v377 = (const std::string::value_type *)v602;
          else
            v377 = (const std::string::value_type *)v371;
          if ((v375 & 0x80u) == 0)
            v378 = v375;
          else
            v378 = v602[1];
          v379 = std::string::append(&v612, v377, v378);
          v380 = *(_OWORD *)&v379->__r_.__value_.__l.__data_;
          v605.__r_.__value_.__r.__words[2] = v379->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v605.__r_.__value_.__l.__data_ = v380;
          v379->__r_.__value_.__l.__size_ = 0;
          v379->__r_.__value_.__r.__words[2] = 0;
          v379->__r_.__value_.__r.__words[0] = 0;
          v381 = std::string::append(&v605, " p ", 3uLL);
          v382 = *(_OWORD *)&v381->__r_.__value_.__l.__data_;
          *(_QWORD *)&v598[16] = *((_QWORD *)&v381->__r_.__value_.__l + 2);
          *(_OWORD *)v598 = v382;
          v381->__r_.__value_.__l.__size_ = 0;
          v381->__r_.__value_.__r.__words[2] = 0;
          v381->__r_.__value_.__r.__words[0] = 0;
          v383 = strlen(v370);
          v384 = std::string::append((std::string *)v598, v370, v383);
          v385 = *(_OWORD *)&v384->__r_.__value_.__l.__data_;
          *(_QWORD *)&object[16] = *((_QWORD *)&v384->__r_.__value_.__l + 2);
          *(_OWORD *)object = v385;
          v384->__r_.__value_.__l.__size_ = 0;
          v384->__r_.__value_.__r.__words[2] = 0;
          v384->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)object);
          exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
          __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        *(_WORD *)(a1 + 7828) = 0;
        *(_DWORD *)(a1 + 7824) = 0;
      }
    }
    v7 += 16;
  }
  v29 = *(_QWORD **)(a1 + 8);
  if (v29[8] < (unint64_t)(a2 + 1))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1018, (uint64_t)"this->viobadata_ref_.state_set->size() >= 1 + kept_idx", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_331:
      abort();
    }
    v29 = *(_QWORD **)(a1 + 8);
  }
  v30 = (_QWORD *)v29[6];
  v31 = v30[4];
  v594 = v30[5];
  v32 = (_QWORD *)v30[1];
  if (v32)
  {
    v33 = (_QWORD *)v30[1];
    do
    {
      v34 = v33;
      v33 = (_QWORD *)*v33;
    }
    while (v33);
  }
  else
  {
    v35 = (_QWORD *)v29[6];
    do
    {
      v34 = (_QWORD *)v35[2];
      v46 = *v34 == (_QWORD)v35;
      v35 = v34;
    }
    while (!v46);
  }
  if (a2)
  {
    if (v32)
    {
      do
      {
        v36 = v32;
        v32 = (_QWORD *)*v32;
      }
      while (v32);
    }
    else
    {
      v50 = (_QWORD *)v29[6];
      do
      {
        v36 = (_QWORD *)v50[2];
        v46 = *v36 == (_QWORD)v50;
        v50 = v36;
      }
      while (!v46);
    }
    v38 = v36[4];
    v37 = v36[5];
    v40 = v34[4];
    v39 = v34[5];
    if (*(_BYTE *)(a1 + 2117))
    {
LABEL_89:
      sub_20FC02220(a1, v594);
      v42 = *(_QWORD *)(a1 + 6136);
      i = *(_QWORD *)(a1 + 6144);
      if (v42 == i)
        goto LABEL_108;
      goto LABEL_93;
    }
  }
  else
  {
    v37 = v30[5];
    v38 = v30[4];
    v40 = v34[4];
    v39 = v34[5];
    if (*(_BYTE *)(a1 + 2117))
      goto LABEL_89;
  }
  v41 = v29 + 7;
  if (v30 != v29 + 7)
  {
    do
    {
      v44 = v30[4];
      v45 = *((_DWORD *)v30 + 10);
      v46 = v44 == v38 && v45 == (_DWORD)v37;
      if (!v46 && (v44 != v31 || v45 != (_DWORD)v594))
        sub_20FC02220(a1, v45);
      v48 = (_QWORD *)v30[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (_QWORD *)v30[2];
          v46 = *v49 == (_QWORD)v30;
          v30 = v49;
        }
        while (!v46);
      }
      v30 = v49;
    }
    while (v49 != v41);
  }
  v42 = *(_QWORD *)(a1 + 6136);
  for (i = *(_QWORD *)(a1 + 6144); v42 != i; v42 += 16)
  {
LABEL_93:
    if ((*(_BYTE *)(*(_QWORD *)(v42 + 8) + 4) & 6) == 0)
    {
      v51 = *(_DWORD *)v42;
      if (!sub_20FBCBD50((uint64_t)v596, *(_DWORD *)v42))
      {
        v603 = 10;
        strcpy((char *)v602, "track/line");
        v52 = *(char **)(a1 + 6136);
        v53 = *(char **)(a1 + 6144);
        if (v53 == v52)
          goto LABEL_332;
        v54 = (v53 - v52) >> 4;
        do
        {
          v55 = v54 >> 1;
          v56 = (unsigned int *)&v52[16 * (v54 >> 1)];
          v58 = *v56;
          v57 = (char *)(v56 + 4);
          v54 += ~(v54 >> 1);
          if (v58 < v51)
            v52 = v57;
          else
            v54 = v55;
        }
        while (v54);
        if (v52 == v53 || *(_DWORD *)v52 != v51)
        {
LABEL_332:
          v60 = "not found";
        }
        else
        {
          v59 = *(_BYTE *)(*((_QWORD *)v52 + 1) + 4);
          if ((v59 & 4) != 0)
          {
            v60 = "marginalized";
          }
          else if ((v59 & 1) != 0)
          {
            v60 = "new";
          }
          else if ((v59 & 2) != 0)
          {
            v60 = "removed";
          }
          else
          {
            v60 = "unknown";
          }
        }
        sub_20F9B2A4C(&v613);
        v347 = 0x696C2F6B63617274;
        if (**(int **)(v613 + 56) <= 5
          && ((v348 = *(unsigned __int8 *)(v613 + 72),
               (v349 = sub_20E8C31DC(v613, "OSLogSurrogateAppender", 1, 0)) == 0)
            ? (v350 = 0)
            : (v350 = v349 + 16),
              v348 || v349))
        {
          sub_20E863438((uint64_t)object);
          v387 = sub_20E86A980(&object[16], (uint64_t)"Failed to marginalize state ", 28);
          std::to_string((std::string *)v598, v51);
          if (v598[23] >= 0)
            v388 = v598;
          else
            v388 = *(_BYTE **)v598;
          if (v598[23] >= 0)
            v389 = v598[23];
          else
            v389 = *(_QWORD *)&v598[8];
          v390 = sub_20E86A980(v387, (uint64_t)v388, v389);
          v391 = sub_20E86A980(v390, (uint64_t)": ", 2);
          v392 = strlen(v60);
          v393 = sub_20E86A980(v391, (uint64_t)v60, v392);
          sub_20E86A980(v393, (uint64_t)".", 1);
          if ((v598[23] & 0x80000000) != 0)
            operator delete(*(void **)v598);
          sub_20E923E88(object, &v612);
          v605.__r_.__value_.__r.__words[0] = (std::string::size_type)&v613;
          v605.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v605.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v606 = 5;
          v607 = "unknown file";
          v608 = 2809;
          v611 = 0;
          v609 = "unknown function";
          v610 = 0;
          if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v394 = &v612;
          else
            v394 = (std::string *)v612.__r_.__value_.__r.__words[0];
          v604 = v394;
          v395 = *(_QWORD *)v605.__r_.__value_.__l.__data_;
          v396 = (uint64_t *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v398 = *(char **)(v395 + 16);
            v397 = *(_QWORD *)(v395 + 24);
          }
          else
          {
            v397 = *(unsigned __int8 *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 39);
            v398 = (char *)(*(_QWORD *)v605.__r_.__value_.__l.__data_ + 16);
          }
          category = v398;
          v615 = v397;
          v412 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v412 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v598);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v598);
            if (v598[24] && (v598[23] & 0x80000000) != 0)
              operator delete(*(void **)v598);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v413 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v414 = byte_254A4A4F8;
          }
          else
          {
            v413 = *(_QWORD *)&byte_254A4A4F8[8];
            v414 = *(const char **)byte_254A4A4F8;
          }
          v616 = v414;
          v617 = v413;
          *(_QWORD *)v598 = os_log_create(v414, category);
          sub_20E86E5A8(&v598[8], (uint64_t)&v616);
          sub_20E86E5A8((_QWORD *)&v599 + 1, (uint64_t)&category);
          v415 = *(NSObject **)v598;
          sub_20E86E44C((uint64_t)v598);
          sub_20FBAE26C(v350, v396, v415, OS_LOG_TYPE_ERROR, (const char **)&v604);
          if (v348)
          {
            v416 = &v612;
            if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v416 = (std::string *)v612.__r_.__value_.__r.__words[0];
            sub_20E8C003C((uint64_t)&v605, "%s", (const char *)v416);
            sub_20E863570((uint64_t)&v605);
          }
          sub_20E863714((uint64_t)&v605);
          if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v612.__r_.__value_.__l.__data_);
          sub_20E863784((uint64_t)object);
          v351 = v603;
          v347 = v602[0];
        }
        else
        {
          v351 = 10;
        }
        v352 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        *((_BYTE *)&v612.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&v612, "marginalize ");
        if ((v351 & 0x80u) == 0)
          v353 = (const std::string::value_type *)v602;
        else
          v353 = (const std::string::value_type *)v347;
        if ((v351 & 0x80u) == 0)
          v354 = v351;
        else
          v354 = v602[1];
        v355 = std::string::append(&v612, v353, v354);
        v356 = *(_OWORD *)&v355->__r_.__value_.__l.__data_;
        v605.__r_.__value_.__r.__words[2] = v355->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v605.__r_.__value_.__l.__data_ = v356;
        v355->__r_.__value_.__l.__size_ = 0;
        v355->__r_.__value_.__r.__words[2] = 0;
        v355->__r_.__value_.__r.__words[0] = 0;
        v357 = std::string::append(&v605, " p ", 3uLL);
        v358 = *(_OWORD *)&v357->__r_.__value_.__l.__data_;
        *(_QWORD *)&v598[16] = *((_QWORD *)&v357->__r_.__value_.__l + 2);
        *(_OWORD *)v598 = v358;
        v357->__r_.__value_.__l.__size_ = 0;
        v357->__r_.__value_.__r.__words[2] = 0;
        v357->__r_.__value_.__r.__words[0] = 0;
        v359 = strlen(v60);
        v360 = std::string::append((std::string *)v598, v60, v359);
        v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
        *(_QWORD *)&object[16] = *((_QWORD *)&v360->__r_.__value_.__l + 2);
        *(_OWORD *)object = v361;
        v360->__r_.__value_.__l.__size_ = 0;
        v360->__r_.__value_.__r.__words[2] = 0;
        v360->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v352, (const std::string *)object);
        v352->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
        __cxa_throw(v352, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      *(_WORD *)(a1 + 7828) = 0;
      *(_DWORD *)(a1 + 7824) = 0;
    }
  }
LABEL_108:
  v61 = *(_QWORD *)(a1 + 6472);
  for (j = *(_QWORD *)(a1 + 6480); v61 != j; v61 += 360)
  {
    if (*(_BYTE *)(v61 + 200) && !*(_BYTE *)(v61 + 201))
    {
      v63 = *(_QWORD *)(a1 + 72);
      v64 = *(_QWORD *)(a1 + 80);
      if (v63 == v64)
      {
LABEL_110:
        *(_WORD *)(v61 + 200) = 256;
      }
      else
      {
        while (*(_DWORD *)(v61 + 216) != *(_DWORD *)(*(_QWORD *)v63 + 32))
        {
          v63 += 8;
          if (v63 == v64)
            goto LABEL_110;
        }
        *(_BYTE *)(v61 + 202) = 0;
      }
    }
  }
  sub_20FC047EC((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 2117))
  {
    v69 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
    if (v69 >= 2)
    {
      for (k = 1; k != v69; ++k)
        sub_20FB9CFFC(a1, k, v65, v66, v67, v68);
    }
  }
  else
  {
    sub_20FB9CFFC(a1, a2, v65, v66, v67, v68);
  }
  sub_20FB9E8E0((_QWORD *)a1, (void **)(a1 + 67144), (uint64_t)&v605);
  v71 = (_BYTE *)(a1 + 7825);
  *(_DWORD *)(a1 + 7836) = 0;
  *(_BYTE *)(a1 + 7825) = 1;
  if (sub_20F89F3D0(a1 + 4856))
  {
    v386 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)v598, a2);
    sub_20E8B0848("system under-determined in marginalizer / synchronizeN ", (std::string *)v598, (std::string *)object);
    std::runtime_error::runtime_error(v386, (const std::string *)object);
    v386->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v386, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *v71 = 0;
  sub_20FC03218(a1);
  sub_20FC03704((_QWORD *)a1);
  sub_20FBFE268(a1, 0, v591);
  if (a5)
  {
    if (*(_BYTE *)(a1 + 2117))
    {
      v72 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 48);
      v73 = (_QWORD *)v72[1];
      if (v73)
      {
        do
        {
          v74 = v73;
          v73 = (_QWORD *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (_QWORD *)v72[2];
          v46 = *v74 == (_QWORD)v72;
          v72 = v74;
        }
        while (!v46);
      }
      v75 = (_QWORD *)v74[1];
      if (v75)
      {
        do
        {
          v76 = v75;
          v75 = (_QWORD *)*v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = (_QWORD *)v74[2];
          v46 = *v76 == (_QWORD)v74;
          v74 = v76;
        }
        while (!v46);
      }
      v77 = v76[5];
      *(_DWORD *)object = v39;
      *(_DWORD *)&object[4] = v77;
      sub_20FBFF664(a1, 2, object, 0, 0, a4);
    }
    else
    {
      *(_DWORD *)object = v594;
      *(_DWORD *)&object[4] = v39;
      sub_20FBFF664(a1, 2, object, 0, 0, a4);
    }
  }
  if (!*(_BYTE *)(a1 + 2117) && v38 == v40 && (_DWORD)v39 == (_DWORD)v37)
  {
    v78 = sub_20F921D44((uint64_t)v596, 0);
    if (!*(_BYTE *)(a1 + 1841))
    {
      sub_20FC02220(a1, v594);
      *v71 = 1;
      if (sub_20F89F3D0(a1 + 4856))
      {
        v411 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E8610C0(object, "marginalizer 3");
        std::runtime_error::runtime_error(v411, (const std::string *)object);
        v411->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
        __cxa_throw(v411, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      *v71 = 0;
      goto LABEL_228;
    }
    v79 = (_QWORD *)(a1 + 65632);
    v80 = *(_DWORD **)(a1 + 65632);
    *(_QWORD *)(a1 + 65640) = v80;
    *(_QWORD *)(a1 + 65664) = *(_QWORD *)(a1 + 65656);
    *(_QWORD *)(a1 + 65688) = *(_QWORD *)(a1 + 65680);
    *(_QWORD *)(a1 + 65712) = *(_QWORD *)(a1 + 65704);
    *(_QWORD *)(a1 + 65736) = *(_QWORD *)(a1 + 65728);
    *(_QWORD *)(a1 + 65760) = *(_QWORD *)(a1 + 65752);
    *(_QWORD *)(a1 + 65784) = *(_QWORD *)(a1 + 65776);
    *(_QWORD *)(a1 + 65808) = *(_QWORD *)(a1 + 65800);
    *(_QWORD *)(a1 + 65832) = *(_QWORD *)(a1 + 65824);
    v81 = *(_QWORD *)(a1 + 65872);
    *(_QWORD *)(a1 + 65856) = *(_QWORD *)(a1 + 65848);
    *(_QWORD *)(a1 + 65880) = v81;
    *(_QWORD *)(a1 + 65904) = *(_QWORD *)(a1 + 65896);
    *(_QWORD *)(a1 + 65928) = *(_QWORD *)(a1 + 65920);
    *(_QWORD *)(a1 + 65952) = *(_QWORD *)(a1 + 65944);
    *(_QWORD *)(a1 + 65976) = *(_QWORD *)(a1 + 65968);
    *(_QWORD *)(a1 + 66000) = *(_QWORD *)(a1 + 65992);
    *(_QWORD *)(a1 + 66024) = *(_QWORD *)(a1 + 66016);
    *(_QWORD *)(a1 + 66048) = *(_QWORD *)(a1 + 66040);
    *(_QWORD *)(a1 + 66072) = *(_QWORD *)(a1 + 66064);
    *(_QWORD *)(a1 + 66096) = *(_QWORD *)(a1 + 66088);
    if (*(_DWORD **)(a1 + 65648) == v80)
    {
      if (v80)
      {
        *(_QWORD *)(a1 + 65640) = v80;
        operator delete(v80);
        *v79 = 0;
        *(_QWORD *)(a1 + 65640) = 0;
        *(_QWORD *)(a1 + 65648) = 0;
      }
      v80 = operator new(4uLL);
      *v79 = v80;
      *(_QWORD *)(a1 + 65640) = v80;
      *(_QWORD *)(a1 + 65648) = v80 + 1;
    }
    *v80 = v594;
    *(_QWORD *)(a1 + 65640) = v80 + 1;
    if (*(_BYTE *)(a1 + 2146))
      v82 = (_QWORD *)(a1 + 65632);
    else
      v82 = (_QWORD *)(a1 + 65872);
    v83 = (_DWORD *)v82[3];
    v84 = (_DWORD *)v82[5];
    if (v84 == v83)
    {
      if (v84)
      {
        v82[4] = v84;
        operator delete(v84);
        v82[3] = 0;
        v82[4] = 0;
        v82[5] = 0;
      }
      v83 = operator new(4uLL);
      v82[4] = v83;
      v85 = v82 + 4;
      *(v85 - 1) = v83;
      v85[1] = v83 + 1;
    }
    else
    {
      v85 = v82 + 4;
    }
    v86 = a1 + 66352;
    *v83 = v594;
    *v85 = v83 + 1;
    sub_20F8EE574((char **)(a1 + 66352), (char **)(a1 + 43056));
    v584 = v78;
    v589 = v37;
    v87 = a1 + 66112;
    sub_20F8EE574((char **)(a1 + 66112), (char **)(a1 + 65632));
    sub_20FA43DFC(a1 + 66112, a1 + 65872);
    v88 = 0;
    __vala = (double **)(a1 + 67072);
    v585 = (void **)(a1 + 27752);
    do
    {
      v89 = v86 + 24 * v88;
      v90 = *(char **)v89;
      v93 = *(char **)(v89 + 8);
      v92 = (char **)(v89 + 8);
      v91 = v93;
      if (v90 != v93)
      {
        v94 = *(unsigned int **)(v87 + 24 * v88 + 8);
        v95 = *(unsigned int **)(v87 + 24 * v88);
        v96 = v90;
        while (v95 != v94)
        {
          v97 = *(_DWORD *)v96;
          if (*(_DWORD *)v96 >= *v95)
          {
            v96 += 4 * (*v95++ >= v97);
            if (v96 == v91)
              goto LABEL_166;
          }
          else
          {
            *(_DWORD *)v90 = v97;
            v90 += 4;
            v96 += 4;
            if (v96 == v91)
            {
LABEL_166:
              if (v90 == v91)
                goto LABEL_159;
              goto LABEL_170;
            }
          }
        }
        if (v96 != v90)
        {
          v98 = v91 - v96;
          memmove(v90, v96, v91 - v96);
          v90 += v98;
          if (v90 != *v92)
LABEL_170:
            *v92 = v90;
        }
      }
LABEL_159:
      ++v88;
    }
    while (v88 != 10);
    v99 = 9 * ((*(_QWORD *)(v86 + 32) - *(_QWORD *)(v86 + 24)) >> 2)
        + 6
        * (((*(_QWORD *)(v86 + 56) - *(_QWORD *)(v86 + 48)) >> 2)
         + ((*(_QWORD *)(v86 + 8) - *(_QWORD *)v86) >> 2)
         + ((*(_QWORD *)(v86 + 80) - *(_QWORD *)(v86 + 72)) >> 2))
        + ((*(_QWORD *)(v86 + 128) - *(_QWORD *)(v86 + 120)) >> 2)
        + ((*(_DWORD *)(v86 + 152) - *(_DWORD *)(v86 + 144)) & 0xFFFFFFFC)
        + ((*(_DWORD *)(v86 + 176) - *(_DWORD *)(v86 + 168)) & 0xFFFFFFFC)
        + 3
        * (((*(_QWORD *)(v86 + 200) - *(_QWORD *)(v86 + 192)) >> 2)
         + ((*(_QWORD *)(v86 + 104) - *(_QWORD *)(v86 + 96)) >> 2)
         + ((*(_QWORD *)(v86 + 224) - *(_QWORD *)(v86 + 216)) >> 2));
    v100 = (void **)(a1 + 27728);
    *(_DWORD *)(a1 + 27744) = v99;
    LODWORD(v37) = v589;
    v78 = v584;
    if (*(_QWORD *)(a1 + 27736) < v99)
    {
      if (*v100)
        MEMORY[0x212BC6368](*v100, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 27728) = 0;
      v101 = (8 * v99 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 27736) = v101 >> 3;
      *v100 = operator new(v101, (std::align_val_t)0x20uLL);
    }
    sub_20F8DF948(v596, a1 + 66352, (_QWORD *)(a1 + 27728));
    sub_20F8F2BC0(a1 + 65632, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66592);
    sub_20F8F2BC0(a1 + 66352, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66832);
    v102 = (_QWORD *)(a1 + 27856);
    sub_20F8FAA7C(a1 + 27856, (void **)(a1 + 67072), a1 + 67096, a1 + 66592, a1 + 66832);
    sub_20F8F2BC0(a1 + 65632, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66592);
    sub_20F8F2ED0(a1 + 27856, (void **)(a1 + 67096), a1 + 66592, (_DWORD **)(a1 + 66592));
    sub_20F8F2BC0(a1 + 66352, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 66592);
    v587 = (uint64_t *)(a1 + 67120);
    sub_20F8F2ED0(a1 + 27856, (void **)(a1 + 67120), a1 + 66592, (_DWORD **)(a1 + 66592));
    v103 = *(_DWORD *)(a1 + 67112);
    if (v103 != 6)
    {
      if (v103 != 15)
      {
        sub_20FBA3C5C(a1 + 67096);
        goto LABEL_212;
      }
      v104 = *(__int128 **)(a1 + 67096);
      if (*(_DWORD *)(a1 + 67088) == 15 && *(_DWORD *)(a1 + 67092) == 15)
      {
        v582 = *v104;
        v580 = v104[1];
        v578 = v104[2];
        v576 = v104[3];
        v574 = v104[4];
        v572 = v104[5];
        v570 = v104[6];
        v568 = v104[7];
        v566 = v104[8];
        v564 = v104[9];
        v562 = v104[10];
        v560 = v104[11];
        v558 = v104[12];
        v556 = v104[13];
        v554 = v104[14];
        v552 = v104[15];
        v550 = *((_QWORD *)v104 + 224);
        v546 = v104[17];
        v548 = v104[16];
        v542 = v104[19];
        v544 = v104[18];
        v538 = v104[21];
        v540 = v104[20];
        v534 = v104[23];
        v536 = v104[22];
        v530 = v104[25];
        v532 = v104[24];
        v526 = v104[27];
        v528 = v104[26];
        v522 = v104[29];
        v524 = v104[28];
        v518 = v104[31];
        v520 = v104[30];
        v514 = v104[33];
        v516 = v104[32];
        v510 = v104[35];
        v512 = v104[34];
        v506 = v104[37];
        v508 = v104[36];
        v502 = v104[39];
        v504 = v104[38];
        v498 = v104[41];
        v500 = v104[40];
        v494 = v104[43];
        v496 = v104[42];
        v490 = v104[45];
        v492 = v104[44];
        v486 = v104[47];
        v488 = v104[46];
        v482 = v104[49];
        v484 = v104[48];
        v478 = v104[51];
        v480 = v104[50];
        v474 = v104[53];
        v476 = v104[52];
        v470 = v104[55];
        v472 = v104[54];
        v466 = v104[57];
        v468 = v104[56];
        v462 = v104[59];
        v464 = v104[58];
        v458 = v104[61];
        v460 = v104[60];
        v454 = v104[63];
        v456 = v104[62];
        v450 = v104[65];
        v452 = v104[64];
        v446 = v104[67];
        v448 = v104[66];
        v442 = v104[69];
        v444 = v104[68];
        v438 = v104[71];
        v440 = v104[70];
        v434 = v104[73];
        v436 = v104[72];
        v430 = v104[75];
        v432 = v104[74];
        v426 = v104[77];
        v428 = v104[76];
        v422 = v104[79];
        v424 = v104[78];
        v105 = v104[80];
        v106 = v104[81];
        v107 = v104[82];
        v108 = v104[83];
        v109 = v104[84];
        v110 = v104[85];
        v111 = v104[86];
        v112 = v104[87];
        v113 = v104[88];
        v114 = v104[89];
        v115 = v104[90];
        v116 = v104[91];
        v117 = v104[92];
        v118 = v104[93];
        v119 = v104[94];
        v120 = v104[95];
        v121 = v104[96];
        v122 = v104[97];
        v123 = v104[98];
        v124 = v104[99];
        v125 = v104[100];
        v126 = v104[101];
        v127 = v104[102];
        v128 = v104[103];
        v129 = v104[104];
        v130 = v104[105];
        v131 = v104[106];
        v132 = v104[107];
        v133 = v104[108];
        v134 = v104[109];
        v135 = v104[110];
        v725 = v104[111];
        v724 = v135;
        v723 = v134;
        v722 = v133;
        v721 = v132;
        v720 = v131;
        v719 = v130;
        v718 = v129;
        v717 = v128;
        v716 = v127;
        v715 = v126;
        v714 = v125;
        v713 = v124;
        v712 = v123;
        v711 = v122;
        v710 = v121;
        v709 = v120;
        v708 = v119;
        v707 = v118;
        v706 = v117;
        v705 = v116;
        v704 = v115;
        v703 = v114;
        v702 = v113;
        v701 = v112;
        v700 = v111;
        v699 = v110;
        v698 = v109;
        v697 = v108;
        v696 = v107;
        v695 = v106;
        v694 = v105;
        v693 = v422;
        v692 = v424;
        v691 = v426;
        v690 = v428;
        v689 = v430;
        v688 = v432;
        v687 = v434;
        v686 = v436;
        v685 = v438;
        v684 = v440;
        v683 = v442;
        v682 = v444;
        v681 = v446;
        v680 = v448;
        v679 = v450;
        v677 = v454;
        v678 = v452;
        v675 = v458;
        v676 = v456;
        v673 = v462;
        v674 = v460;
        v671 = v466;
        v672 = v464;
        v669 = v470;
        v670 = v468;
        v667 = v474;
        v668 = v472;
        v665 = v478;
        v666 = v476;
        v663 = v482;
        v664 = v480;
        v661 = v486;
        v662 = v484;
        v659 = v490;
        v660 = v488;
        v657 = v494;
        v658 = v492;
        v655 = v498;
        v656 = v496;
        v653 = v502;
        v654 = v500;
        v651 = v506;
        v652 = v504;
        v649 = v510;
        v650 = v508;
        v647 = v514;
        v648 = v512;
        v645 = v518;
        v646 = v516;
        v643 = v522;
        v644 = v520;
        v641 = v526;
        v642 = v524;
        v639 = v530;
        v640 = v528;
        v637 = v534;
        v638 = v532;
        v635 = v538;
        v636 = v536;
        v633 = v542;
        v634 = v540;
        v631 = v546;
        v632 = v544;
        v630 = v548;
        v726 = v550;
        v629 = v552;
        v628 = v554;
        v627 = v556;
        v626 = v558;
        v625 = v560;
        v624 = v562;
        v623 = v564;
        v622 = v566;
        v621 = v568;
        v620 = v570;
        v619 = v572;
        *(_OWORD *)&object[72] = v574;
        *(_OWORD *)&object[56] = v576;
        *(_OWORD *)&object[40] = v578;
        *(_OWORD *)&object[24] = v580;
        *(_OWORD *)&object[8] = v582;
        *(_DWORD *)object = 2;
        *(_DWORD *)object = sub_20E8BE940() != 0;
        v136 = a1 + 67072;
        sub_20E8BE7C8(0, 0, 1, 1, 15, 15, (double *)&object[8], 15, 1.0, v137, v138, v139, v140, v141, v142, v143, *__vala, 15);
LABEL_211:
        *(_QWORD *)v598 = v136;
        *(_QWORD *)&object[8] = v598;
        *(_QWORD *)&object[16] = v136;
        *(_QWORD *)&object[24] = 0x3FF0000000000000;
        sub_20F2B8D98((uint64_t)v587, (uint64_t)object);
LABEL_212:
        sub_20F8D63EC(v585, (char **)(a1 + 66352));
        v276 = *(_DWORD *)(a1 + 67136);
        v277 = (*(_DWORD *)(a1 + 67140) * v276);
        if ((_DWORD)v277)
        {
          v278 = 0;
          v279 = *(_QWORD **)(a1 + 67120);
          v280 = 8 * v277;
          v281 = v279;
          do
          {
            v285 = 0;
            if (v278 <= HIDWORD(v278))
              v285 = v279[(v278 + v276 * HIDWORD(v278))];
            *v281++ = v285;
            v282 = (v278 + 1);
            v283 = v278 & 0xFFFFFFFF00000000;
            v284 = v283 | v282;
            v278 = v283 + 0x100000000;
            if (v276 > (int)v282)
              v278 = v284;
            v280 -= 8;
          }
          while (v280);
        }
        LODWORD(v612.__r_.__value_.__l.__data_) = 0;
        LODWORD(v602[0]) = 0;
        memset(object, 0, 80);
        v601 = 0u;
        v600 = 0u;
        v599 = 0u;
        memset(v598, 0, sizeof(v598));
        sub_20F8E03B8(v102, (int *)&v612, v602, object, v598);
        sub_20F8E0678((uint64_t)v102, v587, (unsigned int *)object, (unsigned int *)v598);
        v286 = *(unsigned int *)(a1 + 27768);
        if ((_DWORD)v286)
          bzero(*v585, 8 * v286);
        if (sub_20FC043E4((uint64_t)v596, v594))
        {
          *(_WORD *)(a1 + 7828) = 0;
          *(_DWORD *)(a1 + 7824) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2624, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_391;
        }
        if (sub_20FC045E8((uint64_t)v596, v594))
        {
          *(_WORD *)(a1 + 7828) = 0;
          *(_DWORD *)(a1 + 7824) = 0;
LABEL_227:
          sub_20F8D0830((uint64_t)v596);
LABEL_228:
          sub_20FBFE268(a1, 1, v78);
          a3 = v595;
          goto LABEL_229;
        }
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2629, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))goto LABEL_227;
LABEL_391:
        abort();
      }
      *(_DWORD *)object = 2;
      v583 = *v104;
      v581 = v104[1];
      v579 = v104[2];
      v577 = v104[3];
      v575 = v104[4];
      v573 = v104[5];
      v571 = v104[6];
      v569 = v104[7];
      v567 = v104[8];
      v565 = v104[9];
      v563 = v104[10];
      v561 = v104[11];
      v559 = v104[12];
      v557 = v104[13];
      v555 = v104[14];
      v553 = v104[15];
      v551 = *((_QWORD *)v104 + 224);
      v547 = v104[17];
      v549 = v104[16];
      v543 = v104[19];
      v545 = v104[18];
      v539 = v104[21];
      v541 = v104[20];
      v535 = v104[23];
      v537 = v104[22];
      v531 = v104[25];
      v533 = v104[24];
      v527 = v104[27];
      v529 = v104[26];
      v523 = v104[29];
      v525 = v104[28];
      v519 = v104[31];
      v521 = v104[30];
      v515 = v104[33];
      v517 = v104[32];
      v511 = v104[35];
      v513 = v104[34];
      v507 = v104[37];
      v509 = v104[36];
      v503 = v104[39];
      v505 = v104[38];
      v499 = v104[41];
      v501 = v104[40];
      v495 = v104[43];
      v497 = v104[42];
      v491 = v104[45];
      v493 = v104[44];
      v487 = v104[47];
      v489 = v104[46];
      v483 = v104[49];
      v485 = v104[48];
      v479 = v104[51];
      v481 = v104[50];
      v475 = v104[53];
      v477 = v104[52];
      v471 = v104[55];
      v473 = v104[54];
      v467 = v104[57];
      v469 = v104[56];
      v463 = v104[59];
      v465 = v104[58];
      v459 = v104[61];
      v461 = v104[60];
      v455 = v104[63];
      v457 = v104[62];
      v451 = v104[65];
      v453 = v104[64];
      v447 = v104[67];
      v449 = v104[66];
      v443 = v104[69];
      v445 = v104[68];
      v439 = v104[71];
      v441 = v104[70];
      v435 = v104[73];
      v437 = v104[72];
      v431 = v104[75];
      v433 = v104[74];
      v427 = v104[77];
      v429 = v104[76];
      v423 = v104[79];
      v425 = v104[78];
      v183 = v104[80];
      v184 = v104[81];
      v185 = v104[82];
      v186 = v104[83];
      v187 = v104[84];
      v188 = v104[85];
      v189 = v104[86];
      v190 = v104[87];
      v191 = v104[88];
      v192 = v104[89];
      v193 = v104[90];
      v194 = v104[91];
      v195 = v104[92];
      v196 = v104[93];
      v197 = v104[94];
      v198 = v104[95];
      v199 = v104[96];
      v200 = v104[97];
      v201 = v104[98];
      v202 = v104[99];
      v203 = v104[100];
      v204 = v104[101];
      v205 = v104[102];
      v206 = v104[103];
      v207 = v104[104];
      v208 = v104[105];
      v209 = v104[106];
      v210 = v104[107];
      v211 = v104[108];
      v212 = v104[109];
      v213 = v104[110];
      v725 = v104[111];
      v724 = v213;
      v723 = v212;
      v722 = v211;
      v721 = v210;
      v720 = v209;
      v719 = v208;
      v718 = v207;
      v717 = v206;
      v716 = v205;
      v715 = v204;
      v714 = v203;
      v713 = v202;
      v712 = v201;
      v711 = v200;
      v710 = v199;
      v709 = v198;
      v708 = v197;
      v707 = v196;
      v706 = v195;
      v705 = v194;
      v704 = v193;
      v703 = v192;
      v702 = v191;
      v701 = v190;
      v700 = v189;
      v699 = v188;
      v698 = v187;
      v697 = v186;
      v696 = v185;
      v695 = v184;
      v694 = v183;
      v693 = v423;
      v692 = v425;
      v691 = v427;
      v690 = v429;
      v689 = v431;
      v688 = v433;
      v687 = v435;
      v686 = v437;
      v685 = v439;
      v684 = v441;
      v683 = v443;
      v682 = v445;
      v681 = v447;
      v680 = v449;
      v679 = v451;
      v677 = v455;
      v678 = v453;
      v675 = v459;
      v676 = v457;
      v673 = v463;
      v674 = v461;
      v671 = v467;
      v672 = v465;
      v669 = v471;
      v670 = v469;
      v667 = v475;
      v668 = v473;
      v665 = v479;
      v666 = v477;
      v663 = v483;
      v664 = v481;
      v661 = v487;
      v662 = v485;
      v659 = v491;
      v660 = v489;
      v657 = v495;
      v658 = v493;
      v655 = v499;
      v656 = v497;
      v653 = v503;
      v654 = v501;
      v651 = v507;
      v652 = v505;
      v649 = v511;
      v650 = v509;
      v647 = v515;
      v648 = v513;
      v645 = v519;
      v646 = v517;
      v643 = v523;
      v644 = v521;
      v641 = v527;
      v642 = v525;
      v639 = v531;
      v640 = v529;
      v637 = v535;
      v638 = v533;
      v635 = v539;
      v636 = v537;
      v633 = v543;
      v634 = v541;
      v631 = v547;
      v632 = v545;
      v630 = v549;
      v726 = v551;
      v629 = v553;
      v628 = v555;
      v627 = v557;
      v626 = v559;
      v625 = v561;
      v624 = v563;
      v623 = v565;
      v622 = v567;
      v621 = v569;
      v620 = v571;
      v619 = v573;
      *(_OWORD *)&object[72] = v575;
      *(_OWORD *)&object[56] = v577;
      *(_OWORD *)&object[40] = v579;
      *(_OWORD *)&object[24] = v581;
      *(_OWORD *)&object[8] = v583;
      v136 = a1 + 67072;
      *(_DWORD *)object = sub_20E8BE940() != 0;
      v221 = *(unsigned int *)(a1 + 67088);
      if ((_DWORD)v221 == 15)
      {
        sub_20E8BE7C8(0, 0, 1, 1, 15, *(unsigned int *)(a1 + 67092), (double *)&object[8], 15, 1.0, v214, v215, v216, v217, v218, v219, v220, *(double **)(a1 + 67072), 15);
LABEL_210:
        v102 = (_QWORD *)(a1 + 27856);
        goto LABEL_211;
      }
      v260 = *(unsigned int *)(a1 + 67092);
      v261 = (double *)operator new((8 * (15 * v260) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v269 = v261;
      v270 = ((8 * (15 * v260) + 31) & 0xFFFFFFFE0uLL) >> 3;
      v37 = (v260 * v221);
      if (v270 >= v37)
      {
        v273 = v260 << 32;
        if (!(_DWORD)v37)
        {
          LODWORD(v37) = v589;
LABEL_208:
          sub_20E8BE7C8(0, 0, 1, 1, v221, v260, (double *)&object[8], 15, 1.0, v262, v263, v264, v265, v266, v267, v268, v269, v221);
          v275 = *__vala;
          *__vala = v269;
          *(_QWORD *)(a1 + 67080) = v270;
          v136 = a1 + 67072;
          *(_DWORD *)(a1 + 67088) = v221 | v273;
          *(_DWORD *)(a1 + 67092) = HIDWORD(v273);
          v78 = v584;
          if (v275)
            MEMORY[0x212BC6368](v275, 0x1000C8000313F17);
          goto LABEL_210;
        }
        v271 = 8 * v37;
        LODWORD(v37) = v589;
        v272 = (const void **)(a1 + 67072);
      }
      else
      {
        MEMORY[0x212BC6368](v261, 0x1000C8000313F17);
        v271 = 8 * v37;
        v269 = (double *)operator new((8 * v37 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v270 = ((8 * v37 + 31) & 0xFFFFFFFE0) >> 3;
        v272 = (const void **)(a1 + 67072);
        v221 = *(unsigned int *)(a1 + 67088);
        v260 = *(unsigned int *)(a1 + 67092);
        v273 = v260 << 32;
        LODWORD(v37) = v589;
      }
      memcpy(v269, *v272, v271);
      goto LABEL_208;
    }
    v144 = *(__int128 **)(a1 + 67096);
    v145 = *(unsigned int *)(a1 + 67088);
    if (*(_QWORD *)(a1 + 67088) == 0x600000006)
    {
      *(_DWORD *)object = 2;
      v146 = (uint64_t *)&object[8];
      v147 = *v144;
      v148 = v144[1];
      v149 = v144[2];
      v150 = v144[3];
      v151 = v144[4];
      v152 = v144[5];
      v153 = v144[6];
      v154 = v144[7];
      v155 = v144[8];
      v156 = v144[9];
      v157 = v144[10];
      v158 = v144[11];
      v159 = v144[12];
      v160 = v144[13];
      v161 = v144[14];
      v162 = v144[15];
      v163 = v144[17];
      v630 = v144[16];
      v631 = v163;
      v629 = v162;
      v628 = v161;
      v627 = v160;
      v626 = v159;
      v625 = v158;
      v624 = v157;
      v623 = v156;
      v622 = v155;
      v621 = v154;
      v620 = v153;
      v619 = v152;
      *(_OWORD *)&object[72] = v151;
      *(_OWORD *)&object[56] = v150;
      *(_OWORD *)&object[40] = v149;
      *(_OWORD *)&object[24] = v148;
      *(_OWORD *)&object[8] = v147;
      sub_20F215978((uint64_t)object);
      v164 = 0;
      v165 = *__vala;
      v166 = (uint64_t)(*__vala + 18);
      v136 = a1 + 67072;
      do
      {
        v172.f64[0] = *(float64_t *)(v166 - 144);
        v173 = *(double *)(v166 - 96);
        v174.f64[0] = *(float64_t *)(v166 - 48);
        v175 = *(double *)v166;
        v176.f64[0] = *(float64_t *)(v166 + 48);
        v177 = *(double *)(v166 + 96);
        if (v164)
        {
          v178 = *(double *)&object[v164 + 8];
          v172.f64[0] = v172.f64[0] - *v165 * v178;
          v173 = v173 - v165[6] * v178;
          v174.f64[0] = v174.f64[0] - v165[12] * v178;
          v175 = v175 - v165[18] * v178;
          v176.f64[0] = v176.f64[0] - v165[24] * v178;
          v177 = v177 - v165[30] * v178;
          if (v164 != 48)
          {
            v179 = *(double *)&object[v164 + 16];
            v172.f64[0] = v172.f64[0] - v165[1] * v179;
            v173 = v173 - v165[7] * v179;
            v174.f64[0] = v174.f64[0] - v165[13] * v179;
            v175 = v175 - v165[19] * v179;
            v176.f64[0] = v176.f64[0] - v165[25] * v179;
            v177 = v177 - v165[31] * v179;
            if (v164 != 96)
            {
              v180 = *(double *)&object[v164 + 24];
              v172.f64[0] = v172.f64[0] - v165[2] * v180;
              v173 = v173 - v165[8] * v180;
              v174.f64[0] = v174.f64[0] - v165[14] * v180;
              v175 = v175 - v165[20] * v180;
              v176.f64[0] = v176.f64[0] - v165[26] * v180;
              v177 = v177 - v165[32] * v180;
              if (v164 != 144)
              {
                v181 = *(double *)&object[v164 + 32];
                v172.f64[0] = v172.f64[0] - v165[3] * v181;
                v173 = v173 - v165[9] * v181;
                v174.f64[0] = v174.f64[0] - v165[15] * v181;
                v175 = v175 - v165[21] * v181;
                v176.f64[0] = v176.f64[0] - v165[27] * v181;
                v177 = v177 - v165[33] * v181;
                if (v164 != 192)
                {
                  v182 = *(double *)&object[v164 + 40];
                  v172.f64[0] = v172.f64[0] - v165[4] * v182;
                  v173 = v173 - v165[10] * v182;
                  v174.f64[0] = v174.f64[0] - v165[16] * v182;
                  v175 = v175 - v165[22] * v182;
                  v176.f64[0] = v176.f64[0] - v165[28] * v182;
                  v177 = v177 - v165[34] * v182;
                }
              }
            }
          }
        }
        v167 = *v146;
        v146 += 7;
        v168 = (float64x2_t)vdupq_lane_s64(v167, 0);
        v176.f64[1] = v177;
        v169 = (int8x16_t)vdivq_f64(v176, v168);
        v174.f64[1] = v175;
        v170 = (int8x16_t)vdivq_f64(v174, v168);
        v172.f64[1] = v173;
        v171 = (int8x16_t)vdivq_f64(v172, v168);
        *(_QWORD *)(v166 - 144) = v171.i64[0];
        *(_QWORD *)(v166 - 96) = vextq_s8(v171, v171, 8uLL).u64[0];
        *(_QWORD *)(v166 - 48) = v170.i64[0];
        *(_QWORD *)v166 = vextq_s8(v170, v170, 8uLL).u64[0];
        *(_QWORD *)(v166 + 48) = v169.i64[0];
        *(_QWORD *)(v166 + 96) = vextq_s8(v169, v169, 8uLL).u64[0];
        v164 += 48;
        v166 += 8;
      }
      while (v164 != 288);
      goto LABEL_211;
    }
    *(_DWORD *)object = 2;
    v222 = *v144;
    v223 = v144[1];
    v224 = v144[2];
    v225 = v144[3];
    v226 = v144[4];
    v227 = v144[5];
    v228 = v144[6];
    v229 = v144[7];
    v230 = v144[8];
    v231 = v144[9];
    v232 = v144[10];
    v233 = v144[11];
    v234 = v144[12];
    v235 = v144[13];
    v236 = v144[14];
    v237 = v144[15];
    v238 = v144[17];
    v630 = v144[16];
    v631 = v238;
    v629 = v237;
    v628 = v236;
    v627 = v235;
    v626 = v234;
    v625 = v233;
    v624 = v232;
    v623 = v231;
    v622 = v230;
    v621 = v229;
    v620 = v228;
    v619 = v227;
    *(_OWORD *)&object[72] = v226;
    *(_OWORD *)&object[56] = v225;
    *(_OWORD *)&object[40] = v224;
    *(_OWORD *)&object[24] = v223;
    *(_OWORD *)&object[8] = v222;
    sub_20F215978((uint64_t)object);
    if ((_DWORD)v145 == 6)
    {
      v136 = a1 + 67072;
      sub_20E8BE7C8(0, 0, 1, 1, 6, *(unsigned int *)(a1 + 67092), (double *)&object[8], 6, 1.0, v239, v240, v241, v242, v243, v244, v245, *(double **)(a1 + 67072), 6);
LABEL_203:
      v102 = (_QWORD *)(a1 + 27856);
      goto LABEL_211;
    }
    v246 = *(unsigned int *)(a1 + 67092);
    v247 = (double *)operator new((8 * (6 * v246) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v255 = v247;
    v256 = ((8 * (6 * v246) + 31) & 0xFFFFFFFE0uLL) >> 3;
    v37 = (v246 * v145);
    if (v256 >= v37)
    {
      v259 = v246 << 32;
      if (!(_DWORD)v37)
      {
        LODWORD(v37) = v589;
LABEL_201:
        sub_20E8BE7C8(0, 0, 1, 1, v145, v246, (double *)&object[8], 6, 1.0, v248, v249, v250, v251, v252, v253, v254, v255, v145);
        v274 = *__vala;
        *__vala = v255;
        *(_QWORD *)(a1 + 67080) = v256;
        v136 = a1 + 67072;
        *(_DWORD *)(a1 + 67088) = v145 | v259;
        *(_DWORD *)(a1 + 67092) = HIDWORD(v259);
        v78 = v584;
        if (v274)
          MEMORY[0x212BC6368](v274, 0x1000C8000313F17);
        goto LABEL_203;
      }
      v257 = 8 * v37;
      LODWORD(v37) = v589;
      v258 = (const void **)(a1 + 67072);
    }
    else
    {
      MEMORY[0x212BC6368](v247, 0x1000C8000313F17);
      v257 = 8 * v37;
      v255 = (double *)operator new((8 * v37 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v256 = ((8 * v37 + 31) & 0xFFFFFFFE0) >> 3;
      v258 = (const void **)(a1 + 67072);
      v145 = *(unsigned int *)(a1 + 67088);
      v246 = *(unsigned int *)(a1 + 67092);
      v259 = v246 << 32;
      LODWORD(v37) = v589;
    }
    memcpy(v255, *v258, v257);
    goto LABEL_201;
  }
LABEL_229:
  if (!sub_20FC02E88((_QWORD *)a1, a1 + 67144))
    goto LABEL_318;
  sub_20F9B2A4C(&v616);
  if (**((int **)v616 + 7) > 3)
    goto LABEL_318;
  v287 = *((unsigned __int8 *)v616 + 72);
  v288 = sub_20E8C31DC((uint64_t)v616, "OSLogSurrogateAppender", 1, 0);
  v289 = v288;
  if (!v287 && !v288)
    goto LABEL_318;
  *(_QWORD *)v598 = &v616;
  *(std::chrono::steady_clock::time_point *)&v598[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v598[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v598[24] = 3;
  *(_QWORD *)&v599 = "unknown file";
  DWORD2(v599) = 1277;
  *(_QWORD *)&v601 = 0;
  *(_QWORD *)&v600 = "unknown function";
  *((_QWORD *)&v600 + 1) = 0;
  v290 = **(_QWORD **)v598;
  if (*(char *)(**(_QWORD **)v598 + 39) < 0)
  {
    v292 = *(const char **)(v290 + 16);
    v291 = *(_QWORD *)(v290 + 24);
    v597 = **(_QWORD **)v598 + 16;
    v590 = v37;
    v294 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v294 & 1) != 0)
      goto LABEL_237;
  }
  else
  {
    v291 = *(unsigned __int8 *)(**(_QWORD **)v598 + 39);
    v292 = (const char *)(**(_QWORD **)v598 + 16);
    v597 = (uint64_t)v292;
    v590 = v37;
    v293 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v293 & 1) != 0)
      goto LABEL_237;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_237:
  if (byte_254A4A4F8[23] >= 0)
    v295 = byte_254A4A4F8;
  else
    v295 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v296 = byte_254A4A4F8[23];
  else
    v296 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v295, v292);
  v297 = &object[8];
  if (v296 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v296 >= 0x17)
  {
    v298 = v289;
    v299 = v292;
    v300 = v290;
    v301 = v287;
    v302 = (v296 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v296 | 7) != 0x17)
      v302 = v296 | 7;
    v303 = v302 + 1;
    v297 = operator new(v302 + 1);
    *(_QWORD *)&object[24] = v303 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v297;
    *(_QWORD *)&object[16] = v296;
    v287 = v301;
    v290 = v300;
    v292 = v299;
    v289 = v298;
    goto LABEL_250;
  }
  object[31] = v296;
  if (v296)
LABEL_250:
    memmove(v297, v295, v296);
  v297[v296] = 0;
  object[32] = 1;
  v304 = &object[40];
  if (v291 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  LODWORD(v37) = v590;
  if (v291 >= 0x17)
  {
    v305 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v291 | 7) != 0x17)
      v305 = v291 | 7;
    v306 = v305 + 1;
    v304 = operator new(v305 + 1);
    *(_QWORD *)&object[56] = v306 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v304;
    *(_QWORD *)&object[48] = v291;
  }
  else
  {
    object[63] = v291;
    if (!v291)
      goto LABEL_259;
  }
  memmove(v304, v292, v291);
LABEL_259:
  v304[v291] = 0;
  object[64] = 1;
  v307 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v289 && *(_QWORD *)(v289 + 24))
  {
    v308 = _os_log_pack_size();
    v309 = (std::__shared_weak_count_vtbl *)operator new(v308, (std::align_val_t)8uLL);
    v310 = (std::__shared_weak_count *)operator new();
    v311 = v310;
    v310->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v310->__shared_owners_;
    v310->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v310->__shared_weak_owners_ = 0;
    v310[1].__vftable = v309;
    *(_QWORD *)object = v309;
    *(_QWORD *)&object[8] = v309;
    *(_QWORD *)&object[16] = v310;
    do
      v313 = __ldxr(p_shared_owners);
    while (__stxr(v313 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v314 = __ldaxr(p_shared_owners);
    while (__stlxr(v314 - 1, p_shared_owners));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v311);
    }
    v315 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v316 = operator new();
    v317 = *(unsigned __int8 *)(v290 + 39);
    v318 = v597;
    if ((v317 & 0x80u) != 0)
    {
      v318 = *(_QWORD *)(v290 + 16);
      v317 = *(_QWORD *)(v290 + 24);
    }
    *(_QWORD *)v316 = v315;
    *(_OWORD *)(v316 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v316 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v316 + 40) = v318;
    *(_QWORD *)(v316 + 48) = v317;
    *(_BYTE *)(v316 + 56) = 1;
    v602[0] = 0;
    v612.__r_.__value_.__r.__words[0] = v316;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v289 + 24) + 40))(*(_QWORD *)(v289 + 24), &v612);
    v319 = v612.__r_.__value_.__r.__words[0];
    v612.__r_.__value_.__r.__words[0] = 0;
    a3 = v595;
    if (v319)
    {
      v320 = *(std::__shared_weak_count **)(v319 + 32);
      if (v320)
      {
        v321 = (unint64_t *)&v320->__shared_owners_;
        do
          v322 = __ldaxr(v321);
        while (__stlxr(v322 - 1, v321));
        if (!v322)
        {
          ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
          std::__shared_weak_count::__release_weak(v320);
        }
      }
      v323 = *(std::__shared_weak_count **)(v319 + 16);
      if (v323)
      {
        v324 = (unint64_t *)&v323->__shared_owners_;
        do
          v325 = __ldaxr(v324);
        while (__stlxr(v325 - 1, v324));
        if (!v325)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
      }
      MEMORY[0x212BC6398](v319, 0x10F0C40B62ED6C6);
      v326 = v602[0];
      v602[0] = 0;
      if (v326)
      {
        v327 = *(std::__shared_weak_count **)(v326 + 32);
        if (v327)
        {
          v328 = (unint64_t *)&v327->__shared_owners_;
          do
            v329 = __ldaxr(v328);
          while (__stlxr(v329 - 1, v328));
          if (!v329)
          {
            ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
            std::__shared_weak_count::__release_weak(v327);
          }
        }
        v330 = *(std::__shared_weak_count **)(v326 + 16);
        if (v330)
        {
          v331 = (unint64_t *)&v330->__shared_owners_;
          do
            v332 = __ldaxr(v331);
          while (__stlxr(v332 - 1, v331));
          if (!v332)
          {
            ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
            std::__shared_weak_count::__release_weak(v330);
          }
        }
        MEMORY[0x212BC6398](v326, 0x10F0C40B62ED6C6);
      }
    }
    v333 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v334 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v335 = __ldaxr(v334);
      while (__stlxr(v335 - 1, v334));
      if (!v335)
      {
        ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
        std::__shared_weak_count::__release_weak(v333);
      }
    }
    v336 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v337 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v338 = __ldaxr(v337);
      while (__stlxr(v338 - 1, v337));
      if (!v338)
      {
        ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
        std::__shared_weak_count::__release_weak(v336);
      }
    }
  }
  else
  {
    os_log_type_enabled(v307, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v339 = (void *)_os_log_send_and_compose_impl();
    a3 = v595;
    if (v339)
      free(v339);
  }
  if (v287)
  {
    sub_20E8C003C((uint64_t)v598, "Reset the prior to previous window due to numerical failure in marginalziation.");
    sub_20E863570((uint64_t)v598);
  }
  sub_20E863570((uint64_t)v598);
  v340 = (std::__shared_weak_count *)v601;
  if ((_QWORD)v601)
  {
    v341 = (unint64_t *)(v601 + 8);
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
LABEL_318:
  if (!*(_BYTE *)(a1 + 43296))
  {
    v343 = *(unsigned int *)(a1 + 27768);
    if ((_DWORD)v343)
      bzero(*(void **)(a1 + 27752), 8 * v343);
  }
  a3[7] = v37;
  *(_DWORD *)object = v37;
  result = sub_20FBFF664(a1, 1, object, 1, 1, (uint64_t)a3);
  v345 = a3[4];
  if (!*(_BYTE *)(a1 + 2146))
  {
    if (v345 > 5
      || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1300, (uint64_t)"prior_info.info.rows() >= 6", 27, (uint64_t)"Invalid pose prior info.", 24, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
    {
      v346 = 0;
      goto LABEL_328;
    }
LABEL_376:
    abort();
  }
  if (v345 <= 0xE)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1297, (uint64_t)"prior_info.info.rows() >= 15", 28, (uint64_t)"Invalid inertial-state prior info.", 34, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      goto LABEL_376;
  }
  v346 = 1;
LABEL_328:
  a3[6] = v346;
  return result;
}

void sub_20FBFDD2C(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (LOBYTE(STACK[0x598]) && SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x5F0]);
  if (SLOBYTE(STACK[0x657]) < 0)
    operator delete((void *)STACK[0x640]);
  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  STACK[0x680] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(unint64_t *)((char *)&STACK[0x680] + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  v5 = MEMORY[0x24BEDB848] + 16;
  STACK[0x690] = v4;
  STACK[0x698] = v5;
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete((void *)STACK[0x6D8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&STACK[0x700]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
  {
    operator delete((void *)STACK[0x5D0]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FBFE268(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v18;
  int v19;
  int v20;
  uint64_t result;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t i;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t j;
  unsigned __int8 v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t k;
  unsigned __int8 v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t m;
  unsigned __int8 v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t n;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  std::runtime_error *exception;
  std::string *v93;
  std::string::size_type size;
  void **v95;
  uint64_t v96;
  uint64_t *v97;
  const char *v98;
  const char *v99;
  unsigned __int8 v100;
  uint64_t v101;
  const char *v102;
  NSObject *v103;
  void **v104;
  void **v105;
  _QWORD v106[3];
  int v107;
  const char *v108;
  int v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  void *__p[2];
  char v114;
  std::string v115;
  uint64_t v116;
  _DWORD v117[4];
  _QWORD v118[33];
  const char *v119[2];
  std::string v120;
  char v121;
  _QWORD v122[4];
  _QWORD v123[3];

  v5 = (_QWORD *)(a1 + 5168);
  if (sub_20F8DE898(a1 + 5168, 0))
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2638, (uint64_t)"this->linear_system_.graph().template numberOfVariable<LandmarkVariableType>() == 0", 83, (uint64_t)"Number of landmarks should be zero.", 35, (void (*)(void **))sub_21023DDB0);
    v6 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v7 = qword_254A6DE40;
      v8 = qword_254A6DE48;
      while (v7 != v8)
      {
        v10 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v7;
        v9 = *(_QWORD *)(v7 + 8);
        v7 += 16;
        v10(v9, "this->linear_system_.graph().template numberOfVariable<LandmarkVariableType>() == 0", 83, "Number of landmarks should be zero.", 35);
      }
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      goto LABEL_163;
    qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfVariable<LandmarkVariableType>() == 0", 83, "Number of landmarks should be zero.", 35);
  }
  if (*(_BYTE *)(a1 + 2117))
    v12 = a3 - 1;
  else
    v12 = 2;
  if (!sub_20F921D44((uint64_t)v5, 0))
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2646, (uint64_t)"this->linear_system_.graph().template numberOfVariable<PoseVariableType>() > 0", 78, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v13 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v14 = qword_254A6DE40;
      v15 = qword_254A6DE48;
      while (v14 != v15)
      {
        v17 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v14;
        v16 = *(_QWORD *)(v14 + 8);
        v14 += 16;
        v17(v16, "this->linear_system_.graph().template numberOfVariable<PoseVariableType>() > 0", 78, "", 0);
      }
    }
    v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      goto LABEL_163;
    qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfVariable<PoseVariableType>() > 0", 78, "", 0);
  }
  if (sub_20F921D44((uint64_t)v5, 0) > v12)
  {
    sub_20E863438((uint64_t)v117);
    sub_20E86A980(v118, (uint64_t)"Assertion 'numberOfVariable<PoseVariableType>() <= ", 51);
    v86 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v86, (uint64_t)"' failed: call site #", 21);
    v87 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v87, (uint64_t)", original states: ", 19);
    v88 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v88, (uint64_t)", current states: ", 18);
    sub_20F921D44((uint64_t)v5, 0);
    std::ostream::operator<<();
    sub_20F9B2A4C(&v116);
    if (**(int **)(v116 + 56) <= 5)
    {
      v89 = *(unsigned __int8 *)(v116 + 72);
      v90 = sub_20E8C31DC(v116, "OSLogSurrogateAppender", 1, 0);
      v91 = v90 ? v90 + 16 : 0;
      if (v89 || v90)
      {
        sub_20E863438((uint64_t)&v115);
        sub_20E923E88(v117, &v120);
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v93 = &v120;
        else
          v93 = (std::string *)v120.__r_.__value_.__r.__words[0];
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
        else
          size = v120.__r_.__value_.__l.__size_;
        sub_20E86A980(&v115.__r_.__value_.__r.__words[2], (uint64_t)v93, size);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v120.__r_.__value_.__l.__data_);
        sub_20E923E88(&v115, __p);
        v106[0] = &v116;
        v106[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v106[2] = std::chrono::system_clock::now().__d_.__rep_;
        v107 = 5;
        v108 = "unknown file";
        v109 = 2654;
        v111 = 0;
        v112 = 0;
        v110 = "unknown function";
        if (v114 >= 0)
          v95 = __p;
        else
          v95 = (void **)__p[0];
        v105 = v95;
        v96 = *(_QWORD *)v106[0];
        v97 = (uint64_t *)(*(_QWORD *)v106[0] + 16);
        if (*(char *)(*(_QWORD *)v106[0] + 39) < 0)
        {
          v99 = *(const char **)(v96 + 16);
          v98 = *(const char **)(v96 + 24);
        }
        else
        {
          v98 = (const char *)*(unsigned __int8 *)(*(_QWORD *)v106[0] + 39);
          v99 = (const char *)(*(_QWORD *)v106[0] + 16);
        }
        v119[0] = v99;
        v119[1] = v98;
        v100 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v120);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v120);
          if (v121 && SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v120.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v101 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v102 = byte_254A4A4F8;
        }
        else
        {
          v101 = *(_QWORD *)&byte_254A4A4F8[8];
          v102 = *(const char **)byte_254A4A4F8;
        }
        v123[0] = v102;
        v123[1] = v101;
        v120.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v102, v119[0]);
        sub_20E86E5A8(&v120.__r_.__value_.__l.__size_, (uint64_t)v123);
        sub_20E86E5A8(v122, (uint64_t)v119);
        v103 = v120.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v120);
        sub_20FC03A08(v91, v97, v103, OS_LOG_TYPE_ERROR, (const char **)&v105);
        if (v89)
        {
          v104 = __p;
          if (v114 < 0)
            v104 = (void **)__p[0];
          sub_20E8C003C((uint64_t)v106, "%s", (const char *)v104);
          sub_20E863570((uint64_t)v106);
        }
        sub_20E863714((uint64_t)v106);
        if (v114 < 0)
          operator delete(__p[0]);
        sub_20E863784((uint64_t)&v115);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E923E88(v117, &v120);
    sub_20E8B0848("Too many states in the system: ", &v120, &v115);
    std::runtime_error::runtime_error(exception, &v115);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v19 = *(unsigned __int8 *)(a1 + 2146);
  v20 = sub_20F9222F0((uint64_t)v5, 0);
  result = sub_20F921D44((uint64_t)v5, 0);
  if (v19)
  {
    if (v20 == (_DWORD)result)
      goto LABEL_40;
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2661, (uint64_t)"this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v22 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v23 = qword_254A6DE40;
      v24 = qword_254A6DE48;
      while (v23 != v24)
      {
        v26 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v23;
        v25 = *(_QWORD *)(v23 + 8);
        v23 += 16;
        v26(v25, "this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, "", 0);
      }
    }
  }
  else
  {
    if (v20 == (_DWORD)result)
      goto LABEL_40;
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2665, (uint64_t)"this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v28 = qword_254A6DE40;
      v29 = qword_254A6DE48;
      while (v28 != v29)
      {
        v31 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v28;
        v30 = *(_QWORD *)(v28 + 8);
        v28 += 16;
        v31(v30, "this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, "", 0);
      }
    }
  }
  v32 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
  {
    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE78);
  }
  if (!byte_254A6DE68)
    goto LABEL_163;
  result = qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, "", 0);
LABEL_40:
  v33 = *(_QWORD *)(a1 + 6352);
  for (i = *(_QWORD *)(a1 + 6360); v33 != i; v33 += 8016)
  {
    if (*(_BYTE *)(v33 + 7689) && *(_QWORD *)(v33 + 24))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2675, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v36 = qword_254A6DE40;
        v37 = qword_254A6DE48;
        while (v36 != v37)
        {
          v39 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v36;
          v38 = *(_QWORD *)(v36 + 8);
          v36 += 16;
          v39(v38, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_163;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      i = *(_QWORD *)(a1 + 6360);
    }
  }
  if (*(_BYTE *)(a1 + 6760) || (result = sub_20F9210FC(v5), !(_DWORD)result))
  {
    v43 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 6624) - *(_QWORD *)(a1 + 6616)) >> 3);
  }
  else
  {
    v41 = *(_QWORD **)(a1 + 6616);
    v42 = *(_QWORD **)(a1 + 6624);
    if (v41 == v42)
      goto LABEL_85;
    v43 = 0;
    v44 = 0;
    do
    {
      if ((*(_BYTE *)(v41[7] + 4) & 6) == 0
        && (*(_BYTE *)(v41[8] + 4) & 6) == 0
        && (*(_BYTE *)(v41[9] + 4) & 6) == 0
        && (*(_BYTE *)(v41[10] + 4) & 6) == 0
        && (*(_BYTE *)(v41[11] + 4) & 6) == 0
        && (*(_BYTE *)(v41[12] + 4) & 6) == 0
        && (*(_BYTE *)(v41[13] + 4) & 6) == 0
        && (*(_BYTE *)(v41[14] + 4) & 6) == 0
        && (*(_BYTE *)(v41[15] + 4) & 6) == 0
        && (*(_BYTE *)(v41[16] + 4) & 6) == 0
        && (*(_BYTE *)(v41[17] + 4) & 6) == 0)
      {
        v43 = ++v44;
      }
      v41 += 27;
    }
    while (v41 != v42);
  }
  if (v43)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2678, (uint64_t)"this->linear_system_.graph().template numberOfFactor<LandmarkFactorType>() == 0", 79, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v45 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v46 = qword_254A6DE40;
      v47 = qword_254A6DE48;
      while (v46 != v47)
      {
        v49 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v46;
        v48 = *(_QWORD *)(v46 + 8);
        v46 += 16;
        v49(v48, "this->linear_system_.graph().template numberOfFactor<LandmarkFactorType>() == 0", 79, "", 0);
      }
    }
    v50 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
    {
      result = qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfFactor<LandmarkFactorType>() == 0", 79, "", 0);
      goto LABEL_85;
    }
LABEL_163:
    abort();
  }
LABEL_85:
  v51 = *(_QWORD *)(a1 + 6400);
  for (j = *(_QWORD *)(a1 + 6408); v51 != j; v51 += 144)
  {
    if (*(_BYTE *)(v51 + 40))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2689, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v53 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (byte_254A6DE68)
        v54 = byte_254A6DE70 == 0;
      else
        v54 = 0;
      if (!v54)
      {
        v55 = qword_254A6DE40;
        v56 = qword_254A6DE48;
        while (v55 != v56)
        {
          v58 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v55;
          v57 = *(_QWORD *)(v55 + 8);
          v55 += 16;
          v58(v57, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v59 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_163;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      j = *(_QWORD *)(a1 + 6408);
    }
  }
  v60 = *(_QWORD *)(a1 + 6424);
  for (k = *(_QWORD *)(a1 + 6432); v60 != k; v60 += 152)
  {
    if (*(_BYTE *)(v60 + 40))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2697, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v62 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (byte_254A6DE68)
        v63 = byte_254A6DE70 == 0;
      else
        v63 = 0;
      if (!v63)
      {
        v64 = qword_254A6DE40;
        v65 = qword_254A6DE48;
        while (v64 != v65)
        {
          v67 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v64;
          v66 = *(_QWORD *)(v64 + 8);
          v64 += 16;
          v67(v66, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v68 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_163;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      k = *(_QWORD *)(a1 + 6432);
    }
  }
  v69 = *(_QWORD *)(a1 + 6472);
  for (m = *(_QWORD *)(a1 + 6480); v69 != m; v69 += 360)
  {
    if (*(_BYTE *)(v69 + 200))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2703, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v71 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (byte_254A6DE68)
        v72 = byte_254A6DE70 == 0;
      else
        v72 = 0;
      if (!v72)
      {
        v73 = qword_254A6DE40;
        v74 = qword_254A6DE48;
        while (v73 != v74)
        {
          v76 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v73;
          v75 = *(_QWORD *)(v73 + 8);
          v73 += 16;
          v76(v75, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v77 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_163;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      m = *(_QWORD *)(a1 + 6480);
    }
  }
  v78 = *(_QWORD *)(a1 + 6448);
  for (n = *(_QWORD *)(a1 + 6456); v78 != n; v78 += 304)
  {
    if (*(_BYTE *)(v78 + 177) && !*(_BYTE *)(v78 + 296))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2708, (uint64_t)"!iter->second.factor.is_valid_factor() || iter->second.shouldRemove()", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v80 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v81 = qword_254A6DE40;
        v82 = qword_254A6DE48;
        while (v81 != v82)
        {
          v84 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v81;
          v83 = *(_QWORD *)(v81 + 8);
          v81 += 16;
          v84(v83, "!iter->second.factor.is_valid_factor() || iter->second.shouldRemove()", 69, "", 0);
        }
      }
      v85 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v85 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
      }
      if (!byte_254A6DE68)
        goto LABEL_163;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor() || iter->second.shouldRemove()", 69, "", 0);
      n = *(_QWORD *)(a1 + 6456);
    }
  }
  return result;
}

void sub_20FBFF4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (*(_BYTE *)(v63 - 152) && *(char *)(v63 - 153) < 0)
    operator delete(*(void **)(v63 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a12);
  if (a26 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a27);
    sub_20E863784((uint64_t)&a63);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a27);
  sub_20E863784((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20FBFF598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_20E863784((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_20FBFF5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  int v64;
  uint64_t v65;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v65 - 153) < 0)
  {
    operator delete(*(void **)(v65 - 176));
    if ((v64 & 1) == 0)
    {
LABEL_8:
      sub_20E863784((uint64_t)&a63);
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v63);
  sub_20E863784((uint64_t)&a63);
  _Unwind_Resume(a1);
}

unint64_t sub_20FBFF664(uint64_t a1, uint64_t a2, char *__src, int a4, int a5, uint64_t a6)
{
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  size_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  int v61;
  std::string::size_type size;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v87;
  _QWORD *v88;
  std::string *v89;
  std::string::size_type v90;
  _QWORD *v91;
  _QWORD *v92;
  std::string *p_p;
  std::string::size_type v94;
  char v95;
  size_t v96;
  __int128 *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  size_t v102;
  __int128 *p_dst;
  unint64_t v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  size_t v110;
  const char *v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  const char *v114;
  size_t v115;
  std::string::size_type *p_size;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  size_t v123;
  void *v124;
  _QWORD *v125;
  size_t v126;
  std::string::size_type v127;
  std::string *v128;
  void *v129;
  unint64_t v130;
  const void **v131;
  uint64_t v132;
  uint64_t v133;
  std::string::size_type v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  char *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  size_t v153;
  const char *v154;
  unsigned __int8 v155;
  const char *v156;
  size_t v157;
  std::string::size_type *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  size_t v165;
  void *v166;
  _QWORD *v167;
  size_t v168;
  std::string::size_type v169;
  std::string *v170;
  void *v171;
  int v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::string::size_type v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  std::string::size_type v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::string::size_type v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  const char *v202;
  std::__shared_weak_count *v203;
  unint64_t *p_shared_owners;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  std::string::size_type v209;
  char v210;
  _QWORD *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  char *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::string::size_type v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  std::string::size_type v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::string::size_type v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  const char *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t result;
  int v258;
  uint64_t v259;
  _QWORD *v260;
  std::string::size_type v261;
  std::string *v262;
  unint64_t v263;
  const void *v264;
  uint64_t v265;
  uint64_t v266;
  std::string *v267;
  uint64_t v268;
  const char *v269;
  size_t v270;
  unsigned __int8 v271;
  unsigned __int8 v272;
  const char *v273;
  size_t v274;
  std::string::size_type *v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  NSObject *v279;
  uint64_t v280;
  uint64_t v281;
  size_t v282;
  void *v283;
  _QWORD *v284;
  size_t v285;
  std::string::size_type v286;
  std::string *v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  std::string::size_type v291;
  char v292;
  _QWORD *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  void *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::string::size_type v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  const char *v313;
  std::string::size_type v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::string::size_type v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::string *v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v346;
  int **v348;
  int v349;
  uint64_t v350;
  void **v351;
  int v352;
  int v353;
  uint64_t v354;
  void **v355;
  uint64_t v356;
  int v357;
  unint64_t v358;
  const char *v359;
  std::string v360;
  char *v361;
  const char *v362;
  int v363;
  const char *v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  _QWORD v367[2];
  uint64_t v368;
  uint64_t v369;
  const void *v370;
  unint64_t v371;
  const void *v372;
  unint64_t v373;
  void *v374;
  char v375;
  unint64_t v376;
  int v377;
  _BYTE v378[152];
  uint64_t v379;
  std::string v380;
  char *v381;
  std::__shared_weak_count *v382;
  std::string __p;
  __int128 __dst;
  int64_t v385;
  std::string object;
  __int128 v387;
  void *v388;
  size_t v389;
  unint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  std::string v406;
  __int128 v407;
  char *v408;
  const char *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t v412[5];

  v412[2] = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)(a1 + 67200);
  *(_QWORD *)(a1 + 67208) = *(_QWORD *)(a1 + 67200);
  v10 = (_QWORD *)(a1 + 67224);
  *(_QWORD *)(a1 + 67232) = *(_QWORD *)(a1 + 67224);
  v355 = (void **)(a1 + 67248);
  *(_QWORD *)(a1 + 67256) = *(_QWORD *)(a1 + 67248);
  *(_QWORD *)(a1 + 67280) = *(_QWORD *)(a1 + 67272);
  *(_QWORD *)(a1 + 67304) = *(_QWORD *)(a1 + 67296);
  *(_QWORD *)(a1 + 67328) = *(_QWORD *)(a1 + 67320);
  v351 = (void **)(a1 + 67344);
  *(_QWORD *)(a1 + 67352) = *(_QWORD *)(a1 + 67344);
  *(_QWORD *)(a1 + 67376) = *(_QWORD *)(a1 + 67368);
  *(_QWORD *)(a1 + 67400) = *(_QWORD *)(a1 + 67392);
  v11 = &__src[4 * a2];
  *(_QWORD *)(a1 + 67424) = *(_QWORD *)(a1 + 67416);
  v12 = (4 * a2) >> 2;
  sub_20E867E00((_QWORD *)(a1 + 67200), __src, v11, v12);
  v348 = (int **)a1;
  if (*(_BYTE *)(a1 + 2146))
    sub_20E867E00(v10, __src, v11, v12);
  if (a4)
  {
    v13 = *(int **)(a1 + 5368);
    v14 = *(int **)(a1 + 5376);
    while (1)
    {
      if (v13 == v14)
        goto LABEL_30;
      if (*(_BYTE *)(*((_QWORD *)v13 + 1) + 20))
        break;
LABEL_7:
      v13 += 4;
    }
    v16 = *v13;
    v18 = (char *)v9[7];
    v17 = v9[8];
    if ((unint64_t)v18 < v17)
    {
      *(_DWORD *)v18 = v16;
      v15 = (uint64_t)(v18 + 4);
LABEL_6:
      v9[7] = v15;
      goto LABEL_7;
    }
    v19 = (char *)*v355;
    v20 = v18 - (_BYTE *)*v355;
    v21 = v20 >> 2;
    v22 = (v20 >> 2) + 1;
    if (v22 >> 62)
      sub_20E867F44();
    v23 = v17 - (_QWORD)v19;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 62)
LABEL_512:
        sub_20E877A38();
      v25 = operator new(4 * v24);
      v26 = &v25[4 * v21];
      *v26 = v16;
      v15 = (uint64_t)(v26 + 1);
      v27 = v18 - v19;
      if (v18 == v19)
        goto LABEL_28;
    }
    else
    {
      v25 = 0;
      v26 = (_DWORD *)(4 * v21);
      *(_DWORD *)(4 * v21) = v16;
      v15 = 4 * v21 + 4;
      v27 = v18 - v19;
      if (v18 == v19)
      {
LABEL_28:
        v9[6] = v26;
        v9[7] = v15;
        v9[8] = &v25[4 * v24];
        if (v19)
          operator delete(v19);
        goto LABEL_6;
      }
    }
    v28 = v27 - 4;
    if (v28 < 0x2C)
      goto LABEL_542;
    if ((unint64_t)(v18 - v25 - v20) < 0x20)
      goto LABEL_542;
    v29 = (v28 >> 2) + 1;
    v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v18[-v30];
    v26 = (_DWORD *)((char *)v26 - v30);
    v32 = &v25[4 * v21 - 16];
    v33 = v18 - 16;
    v34 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 8;
    }
    while (v34);
    v18 = v31;
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_542:
      do
      {
        v36 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v26 = v36;
      }
      while (v18 != v19);
    }
    goto LABEL_28;
  }
LABEL_30:
  if (a5)
  {
    v37 = v348[719];
    v38 = v348[720];
    while (1)
    {
      if (v37 == v38)
        goto LABEL_57;
      if (*(_BYTE *)(*((_QWORD *)v37 + 1) + 20))
        break;
LABEL_34:
      v37 += 4;
    }
    v40 = *v37;
    v42 = (char *)v9[19];
    v41 = v9[20];
    if ((unint64_t)v42 < v41)
    {
      *(_DWORD *)v42 = v40;
      v39 = (uint64_t)(v42 + 4);
LABEL_33:
      v9[19] = v39;
      goto LABEL_34;
    }
    v43 = (char *)*v351;
    v44 = v42 - (_BYTE *)*v351;
    v45 = v44 >> 2;
    v46 = (v44 >> 2) + 1;
    if (v46 >> 62)
      sub_20E867F44();
    v47 = v41 - (_QWORD)v43;
    if (v47 >> 1 > v46)
      v46 = v47 >> 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
      v48 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 62)
        goto LABEL_512;
      v49 = operator new(4 * v48);
      v50 = &v49[4 * v45];
      *v50 = v40;
      v39 = (uint64_t)(v50 + 1);
      v51 = v42 - v43;
      if (v42 == v43)
        goto LABEL_55;
    }
    else
    {
      v49 = 0;
      v50 = (_DWORD *)(4 * v45);
      *(_DWORD *)(4 * v45) = v40;
      v39 = 4 * v45 + 4;
      v51 = v42 - v43;
      if (v42 == v43)
      {
LABEL_55:
        v9[18] = v50;
        v9[19] = v39;
        v9[20] = &v49[4 * v48];
        if (v43)
          operator delete(v43);
        goto LABEL_33;
      }
    }
    v52 = v51 - 4;
    if (v52 < 0x2C)
      goto LABEL_543;
    if ((unint64_t)(v42 - v49 - v44) < 0x20)
      goto LABEL_543;
    v53 = (v52 >> 2) + 1;
    v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
    v55 = &v42[-v54];
    v50 = (_DWORD *)((char *)v50 - v54);
    v56 = &v49[4 * v45 - 16];
    v57 = v42 - 16;
    v58 = v53 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 8;
    }
    while (v58);
    v42 = v55;
    if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_543:
      do
      {
        v60 = *((_DWORD *)v42 - 1);
        v42 -= 4;
        *--v50 = v60;
      }
      while (v42 != v43);
    }
    goto LABEL_55;
  }
LABEL_57:
  sub_20F8F2BC0((uint64_t)v9, (uint64_t)(v348 + 5382), (uint64_t)dword_2103B93C4, (uint64_t)(v348 + 8430));
  sub_20F8F2ED0((uint64_t)(v348 + 3482), (void **)a6, (uint64_t)(v348 + 8430), v348 + 8430);
  sub_20F20B6B0(a6);
  v61 = *(_DWORD *)(a6 + 16);
  if (v61 != 12 && v61 != 30)
  {
    sub_20F8DFDDC(&object, (uint64_t)v9, (uint64_t)(v348 + 5382));
    size = object.__r_.__value_.__l.__size_;
    v63 = object.__r_.__value_.__r.__words[0];
    v64 = *((_QWORD *)&v387 + 1);
    v65 = v387;
    v66 = v390;
    v67 = v389;
    v68 = v393;
    v69 = v392;
    v70 = v395;
    v71 = v394;
    v352 = v399;
    v342 = v398;
    v349 = v401;
    v341 = v400;
    v346 = v403;
    v339 = v396;
    v340 = v402;
    v356 = v405;
    v343 = v397;
    v344 = v404;
    sub_20F9B2A4C(&v379);
    v72 = 9 * ((unint64_t)(v64 - v65) >> 2)
        + 6 * (((v66 - v67) >> 2) + ((size - v63) >> 2) + ((unint64_t)(v68 - v69) >> 2))
        + ((unint64_t)(v343 - v339) >> 2)
        + ((v352 - v342) & 0xFFFFFFFC)
        + ((v349 - v341) & 0xFFFFFFFC)
        + 3
        * (((unint64_t)(v346 - v340) >> 2)
         + ((unint64_t)(v70 - v71) >> 2)
         + ((unint64_t)(v356 - v344) >> 2));
    if (**(int **)(v379 + 56) > 2
      || (v73 = *(unsigned __int8 *)(v379 + 72),
          v74 = sub_20E8C31DC(v379, "OSLogSurrogateAppender", 1, 0),
          v75 = v74,
          !v73)
      && !v74)
    {
      if (!v72)
        goto LABEL_371;
      goto LABEL_63;
    }
    sub_20E863438((uint64_t)v367);
    v98 = sub_20E86A980(&v368, (uint64_t)"ExtractConditionalPriorFromLinearSystem:", 40);
    sub_20E86A980(v98, (uint64_t)"\n    states requested: ", 23);
    v99 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v99, (uint64_t)"\n    total dof requested: ", 26);
    v100 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v100, (uint64_t)"\n    total dof in prior: ", 25);
    v101 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v101, (uint64_t)"\n    missing variables dof: ", 28);
    std::ostream::operator<<();
    if ((v377 & 0x10) != 0)
    {
      v104 = v376;
      if (v376 < v373)
      {
        v376 = v373;
        v104 = v373;
      }
      v105 = v372;
      v102 = v104 - (_QWORD)v372;
      if (v104 - (unint64_t)v372 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_155;
    }
    else
    {
      if ((v377 & 8) == 0)
      {
        v102 = 0;
        HIBYTE(v385) = 0;
        p_dst = &__dst;
        goto LABEL_110;
      }
      v105 = v370;
      v102 = v371 - (_QWORD)v370;
      if (v371 - (unint64_t)v370 > 0x7FFFFFFFFFFFFFF7)
LABEL_155:
        sub_20E860B7C();
    }
    if (v102 >= 0x17)
    {
      v106 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v106 = v102 | 7;
      v107 = v106 + 1;
      p_dst = (__int128 *)operator new(v106 + 1);
      v385 = v107 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      *((_QWORD *)&__dst + 1) = v102;
    }
    else
    {
      HIBYTE(v385) = v102;
      p_dst = &__dst;
      if (!v102)
      {
LABEL_110:
        *((_BYTE *)p_dst + v102) = 0;
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v379;
        v360.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v360.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v361) = 2;
        v362 = "unknown file";
        v363 = 2907;
        v365 = 0;
        v366 = 0;
        v364 = "unknown function";
        if (v385 >= 0)
          v108 = (const char *)&__dst;
        else
          v108 = (const char *)__dst;
        v109 = *(_QWORD *)v360.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v111 = *(const char **)(v109 + 16);
          v110 = *(_QWORD *)(v109 + 24);
          v350 = *(_QWORD *)v360.__r_.__value_.__l.__data_ + 16;
          v358 = v75;
          v113 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v113 & 1) != 0)
            goto LABEL_117;
        }
        else
        {
          v110 = *(unsigned __int8 *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39);
          v111 = (const char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 16);
          v350 = (uint64_t)v111;
          v358 = v75;
          v112 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v112 & 1) != 0)
            goto LABEL_117;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v406);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v406);
          if ((_BYTE)v407 && SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v406.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_117:
        if (byte_254A4A4F8[23] >= 0)
          v114 = byte_254A4A4F8;
        else
          v114 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v115 = byte_254A4A4F8[23];
        else
          v115 = *(_QWORD *)&byte_254A4A4F8[8];
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v114, v111);
        p_size = &v406.__r_.__value_.__l.__size_;
        if (v115 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v115 >= 0x17)
        {
          v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v115 | 7) != 0x17)
            v117 = v115 | 7;
          v118 = v117 + 1;
          p_size = (std::string::size_type *)operator new(v117 + 1);
          v406.__r_.__value_.__r.__words[2] = v115;
          *(_QWORD *)&v407 = v118 | 0x8000000000000000;
          v406.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        }
        else
        {
          BYTE7(v407) = v115;
          if (!v115)
          {
LABEL_131:
            *((_BYTE *)p_size + v115) = 0;
            BYTE8(v407) = 1;
            v119 = (char *)&v408;
            if (v110 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v110 >= 0x17)
            {
              v120 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v110 | 7) != 0x17)
                v120 = v110 | 7;
              v121 = v120 + 1;
              v119 = (char *)operator new(v120 + 1);
              v409 = (const char *)v110;
              v410 = v121 | 0x8000000000000000;
              v408 = v119;
            }
            else
            {
              HIBYTE(v410) = v110;
              if (!v110)
              {
LABEL_139:
                v119[v110] = 0;
                LOBYTE(v411) = 1;
                v122 = v406.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v410) < 0)
                  operator delete(v408);
                if (BYTE8(v407) && SBYTE7(v407) < 0)
                  operator delete((void *)v406.__r_.__value_.__l.__size_);
                if (v406.__r_.__value_.__r.__words[0])
                  os_release(v406.__r_.__value_.__l.__data_);
                v353 = v73;
                if (!v358 || !*(_QWORD *)(v358 + 24))
                {
                  os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG);
                  LODWORD(v406.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v406.__r_.__value_.__r.__words + 4) = (std::string::size_type)v108;
                  v129 = (void *)_os_log_send_and_compose_impl();
                  if (v129)
                    free(v129);
LABEL_279:
                  if (v353)
                  {
                    v202 = (const char *)&__dst;
                    if (v385 < 0)
                      v202 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&v360, "%s", v202);
                    sub_20E863570((uint64_t)&v360);
                  }
                  sub_20E863570((uint64_t)&v360);
                  v203 = v366;
                  if (v366)
                  {
                    p_shared_owners = (unint64_t *)&v366->__shared_owners_;
                    do
                      v205 = __ldaxr(p_shared_owners);
                    while (__stlxr(v205 - 1, p_shared_owners));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                      std::__shared_weak_count::__release_weak(v203);
                    }
                  }
                  if (SHIBYTE(v385) < 0)
                    operator delete((void *)__dst);
                  v367[0] = *MEMORY[0x24BEDB7F0];
                  v206 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v367 + *(_QWORD *)(v367[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v368 = v206;
                  v369 = MEMORY[0x24BEDB848] + 16;
                  if (v375 < 0)
                    operator delete(v374);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v378);
                  if (!v72)
                    goto LABEL_371;
LABEL_63:
                  sub_20F9B2A4C(&v379);
                  if (**(int **)(v379 + 56) <= 2)
                  {
                    v76 = *(unsigned __int8 *)(v379 + 72);
                    v77 = sub_20E8C31DC(v379, "OSLogSurrogateAppender", 1, 0);
                    v78 = v77;
                    if (v76 || v77)
                    {
                      sub_20E863438((uint64_t)v367);
                      v79 = sub_20E86A980(&v368, (uint64_t)"ExtractConditionalPriorFromLinearSystem:", 40);
                      v80 = sub_20E86A980(v79, (uint64_t)"\n    missing poses dof: ", 24);
                      sub_20FC0400C(&v406, (uint64_t)&object, 0);
                      if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v81 = &v406;
                      else
                        v81 = (std::string *)v406.__r_.__value_.__r.__words[0];
                      if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v82 = HIBYTE(v406.__r_.__value_.__r.__words[2]);
                      else
                        v82 = v406.__r_.__value_.__l.__size_;
                      v83 = sub_20E86A980(v80, (uint64_t)v81, v82);
                      v84 = sub_20E86A980(v83, (uint64_t)"\n    missing vel_biases dof: ", 29);
                      sub_20FC0400C(&v360, (uint64_t)&object, 1u);
                      if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v85 = &v360;
                      else
                        v85 = (std::string *)v360.__r_.__value_.__r.__words[0];
                      if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v86 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
                      else
                        v86 = v360.__r_.__value_.__l.__size_;
                      v87 = sub_20E86A980(v84, (uint64_t)v85, v86);
                      v88 = sub_20E86A980(v87, (uint64_t)"\n    missing extrinsics dof: ", 29);
                      sub_20FC0400C(&v380, (uint64_t)&object, 2u);
                      if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v89 = &v380;
                      else
                        v89 = (std::string *)v380.__r_.__value_.__r.__words[0];
                      if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v90 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
                      else
                        v90 = v380.__r_.__value_.__l.__size_;
                      v91 = sub_20E86A980(v88, (uint64_t)v89, v90);
                      v92 = sub_20E86A980(v91, (uint64_t)"\n    missing intrinsic_calibs dof: ", 35);
                      sub_20FC0400C(&__p, (uint64_t)&object, 6u);
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_p = &__p;
                      else
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      else
                        v94 = __p.__r_.__value_.__l.__size_;
                      sub_20E86A980(v92, (uint64_t)p_p, v94);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__p.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_92:
                          if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_93;
                          goto LABEL_158;
                        }
                      }
                      else if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_92;
                      }
                      operator delete(v380.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_93:
                        if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_94;
                        goto LABEL_159;
                      }
LABEL_158:
                      operator delete(v360.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_94:
                        v95 = v377;
                        v357 = v76;
                        if ((v377 & 0x10) == 0)
                        {
LABEL_95:
                          if ((v95 & 8) == 0)
                          {
                            v96 = 0;
                            HIBYTE(v385) = 0;
                            v97 = &__dst;
                            goto LABEL_191;
                          }
                          v131 = &v370;
                          v130 = v371;
LABEL_183:
                          v148 = *v131;
                          v96 = v130 - (_QWORD)*v131;
                          if (v96 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          if (v96 >= 0x17)
                          {
                            v149 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v96 | 7) != 0x17)
                              v149 = v96 | 7;
                            v150 = v149 + 1;
                            v97 = (__int128 *)operator new(v149 + 1);
                            v385 = v150 | 0x8000000000000000;
                            *(_QWORD *)&__dst = v97;
                            *((_QWORD *)&__dst + 1) = v96;
                          }
                          else
                          {
                            HIBYTE(v385) = v130 - *(_BYTE *)v131;
                            v97 = &__dst;
                            if (!v96)
                            {
LABEL_191:
                              *((_BYTE *)v97 + v96) = 0;
                              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v379;
                              v360.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                              v360.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                              LODWORD(v361) = 2;
                              v362 = "unknown file";
                              v363 = 2929;
                              v365 = 0;
                              v366 = 0;
                              v364 = "unknown function";
                              if (v385 >= 0)
                                v151 = (const char *)&__dst;
                              else
                                v151 = (const char *)__dst;
                              v152 = *(_QWORD *)v360.__r_.__value_.__l.__data_;
                              if (*(char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39) < 0)
                              {
                                v154 = *(const char **)(v152 + 16);
                                v153 = *(_QWORD *)(v152 + 24);
                              }
                              else
                              {
                                v153 = *(unsigned __int8 *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39);
                                v154 = (const char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 16);
                              }
                              v354 = *(_QWORD *)v360.__r_.__value_.__l.__data_ + 16;
                              v155 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                              if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                              {
                                sub_20E9E46F8((uint64_t)&v406);
                                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v406);
                                if ((_BYTE)v407 && SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v406.__r_.__value_.__l.__data_);
                                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                __cxa_guard_release(&qword_254A4A510);
                              }
                              if (byte_254A4A4F8[23] >= 0)
                                v156 = byte_254A4A4F8;
                              else
                                v156 = *(const char **)byte_254A4A4F8;
                              if (byte_254A4A4F8[23] >= 0)
                                v157 = byte_254A4A4F8[23];
                              else
                                v157 = *(_QWORD *)&byte_254A4A4F8[8];
                              v406.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v156, v154);
                              v158 = &v406.__r_.__value_.__l.__size_;
                              if (v157 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              if (v157 >= 0x17)
                              {
                                v159 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v157 | 7) != 0x17)
                                  v159 = v157 | 7;
                                v160 = v159 + 1;
                                v158 = (std::string::size_type *)operator new(v159 + 1);
                                v406.__r_.__value_.__r.__words[2] = v157;
                                *(_QWORD *)&v407 = v160 | 0x8000000000000000;
                                v406.__r_.__value_.__l.__size_ = (std::string::size_type)v158;
                              }
                              else
                              {
                                BYTE7(v407) = v157;
                                if (!v157)
                                {
LABEL_212:
                                  *((_BYTE *)v158 + v157) = 0;
                                  BYTE8(v407) = 1;
                                  v161 = (char *)&v408;
                                  if (v153 > 0x7FFFFFFFFFFFFFF7)
                                    sub_20E860B7C();
                                  if (v153 >= 0x17)
                                  {
                                    v162 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v153 | 7) != 0x17)
                                      v162 = v153 | 7;
                                    v163 = v162 + 1;
                                    v161 = (char *)operator new(v162 + 1);
                                    v409 = (const char *)v153;
                                    v410 = v163 | 0x8000000000000000;
                                    v408 = v161;
                                  }
                                  else
                                  {
                                    HIBYTE(v410) = v153;
                                    if (!v153)
                                    {
LABEL_220:
                                      v161[v153] = 0;
                                      LOBYTE(v411) = 1;
                                      v164 = v406.__r_.__value_.__r.__words[0];
                                      if (SHIBYTE(v410) < 0)
                                        operator delete(v408);
                                      if (BYTE8(v407) && SBYTE7(v407) < 0)
                                        operator delete((void *)v406.__r_.__value_.__l.__size_);
                                      if (v406.__r_.__value_.__r.__words[0])
                                        os_release(v406.__r_.__value_.__l.__data_);
                                      if (!v78 || !*(_QWORD *)(v78 + 24))
                                      {
                                        os_log_type_enabled(v164, OS_LOG_TYPE_DEBUG);
                                        LODWORD(v406.__r_.__value_.__l.__data_) = 136315138;
                                        *(std::string::size_type *)((char *)v406.__r_.__value_.__r.__words + 4) = (std::string::size_type)v151;
                                        v171 = (void *)_os_log_send_and_compose_impl();
                                        v172 = v357;
                                        if (v171)
                                          free(v171);
                                        goto LABEL_357;
                                      }
                                      v165 = _os_log_pack_size();
                                      v166 = operator new(v165, (std::align_val_t)8uLL);
                                      v167 = (_QWORD *)operator new();
                                      *v167 = &off_24C9ABB80;
                                      v167[1] = 0;
                                      v167[2] = 0;
                                      v167[3] = v166;
                                      v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
                                      v380.__r_.__value_.__l.__size_ = (std::string::size_type)v166;
                                      v382 = 0;
                                      v380.__r_.__value_.__r.__words[2] = (std::string::size_type)v167;
                                      v381 = 0;
                                      v168 = strlen(v151);
                                      if (v168 > 0x7FFFFFFFFFFFFFF7)
                                        sub_20E860B7C();
                                      v169 = v168;
                                      if (v168 >= 0x17)
                                      {
                                        v207 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
                                        if ((v168 | 7) != 0x17)
                                          v207 = v168 | 7;
                                        v208 = v207 + 1;
                                        v170 = (std::string *)operator new(v207 + 1);
                                        __p.__r_.__value_.__r.__words[2] = v208 | 0x8000000000000000;
                                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                                        __p.__r_.__value_.__l.__size_ = v169;
                                      }
                                      else
                                      {
                                        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v168;
                                        v170 = &__p;
                                        if (!v168)
                                        {
LABEL_298:
                                          v170->__r_.__value_.__s.__data_[v169] = 0;
                                          v412[0] = __p.__r_.__value_.__l.__size_;
                                          v209 = __p.__r_.__value_.__r.__words[0];
                                          *(uint64_t *)((char *)v412 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
                                          v210 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                          v211 = operator new(0x38uLL);
                                          v211[1] = 0;
                                          v211[2] = 0;
                                          v211[3] = off_24C9ABC20;
                                          *v211 = &off_24C9ABBD0;
                                          v212 = v412[0];
                                          v211[4] = v209;
                                          v211[5] = v212;
                                          *(_QWORD *)((char *)v211 + 47) = *(uint64_t *)((char *)v412 + 7);
                                          *((_BYTE *)v211 + 55) = v210;
                                          memset(v412, 0, 15);
                                          v213 = v382;
                                          v381 = (char *)(v211 + 3);
                                          v382 = (std::__shared_weak_count *)v211;
                                          if (v213)
                                          {
                                            v214 = (unint64_t *)&v213->__shared_owners_;
                                            do
                                              v215 = __ldaxr(v214);
                                            while (__stlxr(v215 - 1, v214));
                                            if (!v215)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                                              std::__shared_weak_count::__release_weak(v213);
                                            }
                                          }
                                          v406 = v380;
                                          v216 = v381;
                                          if (v380.__r_.__value_.__r.__words[2])
                                          {
                                            v217 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                                            do
                                              v218 = __ldxr(v217);
                                            while (__stxr(v218 + 1, v217));
                                          }
                                          v219 = v382;
                                          *(_QWORD *)&v407 = v216;
                                          *((_QWORD *)&v407 + 1) = v382;
                                          if (v382)
                                          {
                                            v220 = (unint64_t *)&v382->__shared_owners_;
                                            do
                                              v221 = __ldxr(v220);
                                            while (__stxr(v221 + 1, v220));
                                            v408 = v216;
                                            do
                                              v222 = __ldaxr(v220);
                                            while (__stlxr(v222 - 1, v220));
                                            if (!v222)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                                              std::__shared_weak_count::__release_weak(v219);
                                            }
                                          }
                                          else
                                          {
                                            v408 = v216;
                                          }
                                          v223 = (std::__shared_weak_count *)v380.__r_.__value_.__r.__words[2];
                                          if (v380.__r_.__value_.__r.__words[2])
                                          {
                                            v224 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                                            do
                                              v225 = __ldaxr(v224);
                                            while (__stlxr(v225 - 1, v224));
                                            if (!v225)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                                              std::__shared_weak_count::__release_weak(v223);
                                            }
                                          }
                                          v226 = v406.__r_.__value_.__r.__words[0];
                                          if (v408[31] >= 0)
                                            v227 = v408 + 8;
                                          else
                                            v227 = (char *)*((_QWORD *)v408 + 1);
                                          v228 = _os_log_pack_fill();
                                          *(_DWORD *)v228 = 136315138;
                                          *(_QWORD *)(v228 + 4) = v227;
                                          v229 = operator new();
                                          v230 = *(unsigned __int8 *)(v152 + 39);
                                          v231 = v354;
                                          if ((v230 & 0x80u) != 0)
                                          {
                                            v231 = *(_QWORD *)(v152 + 16);
                                            v230 = *(_QWORD *)(v152 + 24);
                                          }
                                          *(_QWORD *)v229 = v226;
                                          *(_OWORD *)(v229 + 8) = *(_OWORD *)&v406.__r_.__value_.__r.__words[1];
                                          *(_OWORD *)&v406.__r_.__value_.__r.__words[1] = 0uLL;
                                          *(_OWORD *)(v229 + 24) = v407;
                                          v407 = 0uLL;
                                          *(_QWORD *)(v229 + 40) = v231;
                                          *(_QWORD *)(v229 + 48) = v230;
                                          *(_BYTE *)(v229 + 56) = 2;
                                          __p.__r_.__value_.__r.__words[0] = 0;
                                          v380.__r_.__value_.__r.__words[0] = v229;
                                          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v78 + 24) + 40))(*(_QWORD *)(v78 + 24), &v380);
                                          v232 = v380.__r_.__value_.__r.__words[0];
                                          v380.__r_.__value_.__r.__words[0] = 0;
                                          v172 = v357;
                                          if (v232)
                                          {
                                            v233 = *(std::__shared_weak_count **)(v232 + 32);
                                            if (v233)
                                            {
                                              v234 = (unint64_t *)&v233->__shared_owners_;
                                              do
                                                v235 = __ldaxr(v234);
                                              while (__stlxr(v235 - 1, v234));
                                              if (!v235)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                                                std::__shared_weak_count::__release_weak(v233);
                                              }
                                            }
                                            v236 = *(std::__shared_weak_count **)(v232 + 16);
                                            if (v236)
                                            {
                                              v237 = (unint64_t *)&v236->__shared_owners_;
                                              do
                                                v238 = __ldaxr(v237);
                                              while (__stlxr(v238 - 1, v237));
                                              if (!v238)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                                                std::__shared_weak_count::__release_weak(v236);
                                              }
                                            }
                                            MEMORY[0x212BC6398](v232, 0x10F0C40B62ED6C6);
                                            v239 = __p.__r_.__value_.__r.__words[0];
                                            __p.__r_.__value_.__r.__words[0] = 0;
                                            if (v239)
                                            {
                                              v240 = *(std::__shared_weak_count **)(v239 + 32);
                                              if (v240)
                                              {
                                                v241 = (unint64_t *)&v240->__shared_owners_;
                                                do
                                                  v242 = __ldaxr(v241);
                                                while (__stlxr(v242 - 1, v241));
                                                if (!v242)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                                                  std::__shared_weak_count::__release_weak(v240);
                                                }
                                              }
                                              v243 = *(std::__shared_weak_count **)(v239 + 16);
                                              if (v243)
                                              {
                                                v244 = (unint64_t *)&v243->__shared_owners_;
                                                do
                                                  v245 = __ldaxr(v244);
                                                while (__stlxr(v245 - 1, v244));
                                                if (!v245)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                                                  std::__shared_weak_count::__release_weak(v243);
                                                }
                                              }
                                              MEMORY[0x212BC6398](v239, 0x10F0C40B62ED6C6);
                                            }
                                          }
                                          v246 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                                          if (*((_QWORD *)&v407 + 1))
                                          {
                                            v247 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                                            do
                                              v248 = __ldaxr(v247);
                                            while (__stlxr(v248 - 1, v247));
                                            if (!v248)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                                              std::__shared_weak_count::__release_weak(v246);
                                            }
                                          }
                                          v249 = (std::__shared_weak_count *)v406.__r_.__value_.__r.__words[2];
                                          if (v406.__r_.__value_.__r.__words[2])
                                          {
                                            v250 = (unint64_t *)(v406.__r_.__value_.__r.__words[2] + 8);
                                            do
                                              v251 = __ldaxr(v250);
                                            while (__stlxr(v251 - 1, v250));
                                            if (!v251)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                                              std::__shared_weak_count::__release_weak(v249);
                                            }
                                          }
LABEL_357:
                                          if (v172)
                                          {
                                            v252 = (const char *)&__dst;
                                            if (v385 < 0)
                                              v252 = (const char *)__dst;
                                            sub_20E8C003C((uint64_t)&v360, "%s", v252);
                                            sub_20E863570((uint64_t)&v360);
                                          }
                                          sub_20E863570((uint64_t)&v360);
                                          v253 = v366;
                                          if (v366)
                                          {
                                            v254 = (unint64_t *)&v366->__shared_owners_;
                                            do
                                              v255 = __ldaxr(v254);
                                            while (__stlxr(v255 - 1, v254));
                                            if (!v255)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                                              std::__shared_weak_count::__release_weak(v253);
                                            }
                                          }
                                          if (SHIBYTE(v385) < 0)
                                            operator delete((void *)__dst);
                                          v367[0] = *MEMORY[0x24BEDB7F0];
                                          v256 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                          *(_QWORD *)((char *)v367 + *(_QWORD *)(v367[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                          v368 = v256;
                                          v369 = MEMORY[0x24BEDB848] + 16;
                                          if (v375 < 0)
                                            operator delete(v374);
                                          std::streambuf::~streambuf();
                                          std::iostream::~basic_iostream();
                                          MEMORY[0x212BC6290](v378);
                                          goto LABEL_371;
                                        }
                                      }
                                      memcpy(v170, v151, v169);
                                      goto LABEL_298;
                                    }
                                  }
                                  memmove(v161, v154, v153);
                                  goto LABEL_220;
                                }
                              }
                              memmove(v158, v156, v157);
                              goto LABEL_212;
                            }
                          }
                          memmove(v97, v148, v96);
                          goto LABEL_191;
                        }
LABEL_160:
                        v130 = v376;
                        if (v376 < v373)
                        {
                          v376 = v373;
                          v130 = v373;
                        }
                        v131 = &v372;
                        goto LABEL_183;
                      }
LABEL_159:
                      operator delete(v406.__r_.__value_.__l.__data_);
                      v95 = v377;
                      v357 = v76;
                      if ((v377 & 0x10) == 0)
                        goto LABEL_95;
                      goto LABEL_160;
                    }
                  }
LABEL_371:
                  sub_20F89E908((uint64_t)&object);
                  goto LABEL_372;
                }
                v123 = _os_log_pack_size();
                v124 = operator new(v123, (std::align_val_t)8uLL);
                v125 = (_QWORD *)operator new();
                *v125 = &off_24C9ABB80;
                v125[1] = 0;
                v125[2] = 0;
                v125[3] = v124;
                v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
                v380.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
                v382 = 0;
                v380.__r_.__value_.__r.__words[2] = (std::string::size_type)v125;
                v381 = 0;
                v126 = strlen(v108);
                if (v126 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v127 = v126;
                if (v126 >= 0x17)
                {
                  v132 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v126 | 7) != 0x17)
                    v132 = v126 | 7;
                  v133 = v132 + 1;
                  v128 = (std::string *)operator new(v132 + 1);
                  __p.__r_.__value_.__r.__words[2] = v133 | 0x8000000000000000;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
                  __p.__r_.__value_.__l.__size_ = v127;
                }
                else
                {
                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v126;
                  v128 = &__p;
                  if (!v126)
                  {
LABEL_167:
                    v128->__r_.__value_.__s.__data_[v127] = 0;
                    v412[0] = __p.__r_.__value_.__l.__size_;
                    v134 = __p.__r_.__value_.__r.__words[0];
                    *(uint64_t *)((char *)v412 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1]
                                                                               + 7);
                    v135 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    v136 = operator new(0x38uLL);
                    v136[1] = 0;
                    v136[2] = 0;
                    v136[3] = off_24C9ABC20;
                    *v136 = &off_24C9ABBD0;
                    v137 = v412[0];
                    v136[4] = v134;
                    v136[5] = v137;
                    *(_QWORD *)((char *)v136 + 47) = *(uint64_t *)((char *)v412 + 7);
                    *((_BYTE *)v136 + 55) = v135;
                    memset(v412, 0, 15);
                    v138 = v382;
                    v381 = (char *)(v136 + 3);
                    v382 = (std::__shared_weak_count *)v136;
                    if (v138)
                    {
                      v139 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    v406 = v380;
                    v141 = v381;
                    if (v380.__r_.__value_.__r.__words[2])
                    {
                      v142 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                      do
                        v143 = __ldxr(v142);
                      while (__stxr(v143 + 1, v142));
                    }
                    v144 = v382;
                    *(_QWORD *)&v407 = v141;
                    *((_QWORD *)&v407 + 1) = v382;
                    if (v382)
                    {
                      v145 = (unint64_t *)&v382->__shared_owners_;
                      do
                        v146 = __ldxr(v145);
                      while (__stxr(v146 + 1, v145));
                      v408 = v141;
                      do
                        v147 = __ldaxr(v145);
                      while (__stlxr(v147 - 1, v145));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                        std::__shared_weak_count::__release_weak(v144);
                      }
                    }
                    else
                    {
                      v408 = v141;
                    }
                    v173 = (std::__shared_weak_count *)v380.__r_.__value_.__r.__words[2];
                    if (v380.__r_.__value_.__r.__words[2])
                    {
                      v174 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                      do
                        v175 = __ldaxr(v174);
                      while (__stlxr(v175 - 1, v174));
                      if (!v175)
                      {
                        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                        std::__shared_weak_count::__release_weak(v173);
                      }
                    }
                    v176 = v406.__r_.__value_.__r.__words[0];
                    if (v408[31] >= 0)
                      v177 = v408 + 8;
                    else
                      v177 = (char *)*((_QWORD *)v408 + 1);
                    v178 = _os_log_pack_fill();
                    *(_DWORD *)v178 = 136315138;
                    *(_QWORD *)(v178 + 4) = v177;
                    v179 = operator new();
                    v180 = *(unsigned __int8 *)(v109 + 39);
                    v181 = v350;
                    if ((v180 & 0x80u) != 0)
                    {
                      v181 = *(_QWORD *)(v109 + 16);
                      v180 = *(_QWORD *)(v109 + 24);
                    }
                    *(_QWORD *)v179 = v176;
                    *(_OWORD *)(v179 + 8) = *(_OWORD *)&v406.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v406.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v179 + 24) = v407;
                    v407 = 0uLL;
                    *(_QWORD *)(v179 + 40) = v181;
                    *(_QWORD *)(v179 + 48) = v180;
                    *(_BYTE *)(v179 + 56) = 2;
                    __p.__r_.__value_.__r.__words[0] = 0;
                    v380.__r_.__value_.__r.__words[0] = v179;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v358 + 24) + 40))(*(_QWORD *)(v358 + 24), &v380);
                    v182 = v380.__r_.__value_.__r.__words[0];
                    v380.__r_.__value_.__r.__words[0] = 0;
                    if (v182)
                    {
                      v183 = *(std::__shared_weak_count **)(v182 + 32);
                      if (v183)
                      {
                        v184 = (unint64_t *)&v183->__shared_owners_;
                        do
                          v185 = __ldaxr(v184);
                        while (__stlxr(v185 - 1, v184));
                        if (!v185)
                        {
                          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                          std::__shared_weak_count::__release_weak(v183);
                        }
                      }
                      v186 = *(std::__shared_weak_count **)(v182 + 16);
                      if (v186)
                      {
                        v187 = (unint64_t *)&v186->__shared_owners_;
                        do
                          v188 = __ldaxr(v187);
                        while (__stlxr(v188 - 1, v187));
                        if (!v188)
                        {
                          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                          std::__shared_weak_count::__release_weak(v186);
                        }
                      }
                      MEMORY[0x212BC6398](v182, 0x10F0C40B62ED6C6);
                      v189 = __p.__r_.__value_.__r.__words[0];
                      __p.__r_.__value_.__r.__words[0] = 0;
                      if (v189)
                      {
                        v190 = *(std::__shared_weak_count **)(v189 + 32);
                        if (v190)
                        {
                          v191 = (unint64_t *)&v190->__shared_owners_;
                          do
                            v192 = __ldaxr(v191);
                          while (__stlxr(v192 - 1, v191));
                          if (!v192)
                          {
                            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                            std::__shared_weak_count::__release_weak(v190);
                          }
                        }
                        v193 = *(std::__shared_weak_count **)(v189 + 16);
                        if (v193)
                        {
                          v194 = (unint64_t *)&v193->__shared_owners_;
                          do
                            v195 = __ldaxr(v194);
                          while (__stlxr(v195 - 1, v194));
                          if (!v195)
                          {
                            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                            std::__shared_weak_count::__release_weak(v193);
                          }
                        }
                        MEMORY[0x212BC6398](v189, 0x10F0C40B62ED6C6);
                      }
                    }
                    v196 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                    if (*((_QWORD *)&v407 + 1))
                    {
                      v197 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                      do
                        v198 = __ldaxr(v197);
                      while (__stlxr(v198 - 1, v197));
                      if (!v198)
                      {
                        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                        std::__shared_weak_count::__release_weak(v196);
                      }
                    }
                    v199 = (std::__shared_weak_count *)v406.__r_.__value_.__r.__words[2];
                    if (v406.__r_.__value_.__r.__words[2])
                    {
                      v200 = (unint64_t *)(v406.__r_.__value_.__r.__words[2] + 8);
                      do
                        v201 = __ldaxr(v200);
                      while (__stlxr(v201 - 1, v200));
                      if (!v201)
                      {
                        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                        std::__shared_weak_count::__release_weak(v199);
                      }
                    }
                    goto LABEL_279;
                  }
                }
                memcpy(v128, v108, v127);
                goto LABEL_167;
              }
            }
            memmove(v119, v111, v110);
            goto LABEL_139;
          }
        }
        memmove(p_size, v114, v115);
        goto LABEL_131;
      }
    }
    memmove(p_dst, v105, v102);
    goto LABEL_110;
  }
LABEL_372:
  sub_20F9B2A4C(v412);
  result = v412[0];
  if (**(int **)(v412[0] + 56) > 2)
    return result;
  v258 = *(unsigned __int8 *)(v412[0] + 72);
  result = sub_20E8C31DC(v412[0], "OSLogSurrogateAppender", 1, 0);
  v259 = result;
  if (!v258 && !result)
    return result;
  sub_20E863438((uint64_t)v367);
  sub_20E86A980(&v368, (uint64_t)"ExtractConditionalPriorFromLinearSystem returns ", 48);
  v260 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v260, (uint64_t)" x ", 3);
  std::ostream::operator<<();
  if ((v377 & 0x10) != 0)
  {
    v263 = v376;
    if (v376 < v373)
    {
      v376 = v373;
      v263 = v373;
    }
    v264 = v372;
    v261 = v263 - (_QWORD)v372;
    if (v263 - (unint64_t)v372 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_433;
  }
  else
  {
    if ((v377 & 8) == 0)
    {
      v261 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      v262 = &__p;
      goto LABEL_388;
    }
    v264 = v370;
    v261 = v371 - (_QWORD)v370;
    if (v371 - (unint64_t)v370 > 0x7FFFFFFFFFFFFFF7)
LABEL_433:
      sub_20E860B7C();
  }
  if (v261 >= 0x17)
  {
    v265 = (v261 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v261 | 7) != 0x17)
      v265 = v261 | 7;
    v266 = v265 + 1;
    v262 = (std::string *)operator new(v265 + 1);
    __p.__r_.__value_.__r.__words[2] = v266 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
    __p.__r_.__value_.__l.__size_ = v261;
    goto LABEL_387;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v261;
  v262 = &__p;
  if (v261)
LABEL_387:
    memmove(v262, v264, v261);
LABEL_388:
  v262->__r_.__value_.__s.__data_[v261] = 0;
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v412;
  v406.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v406.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v407) = 2;
  *((_QWORD *)&v407 + 1) = "unknown file";
  LODWORD(v408) = 2934;
  v410 = 0;
  v411 = 0;
  v409 = "unknown function";
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v267 = &__p;
  else
    v267 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v268 = *(_QWORD *)v406.__r_.__value_.__l.__data_;
  v269 = (const char *)(*(_QWORD *)v406.__r_.__value_.__l.__data_ + 16);
  v359 = v269;
  if (*(char *)(*(_QWORD *)v406.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v269 = *(const char **)(v268 + 16);
    v270 = *(_QWORD *)(v268 + 24);
    v272 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v272 & 1) != 0)
      goto LABEL_395;
  }
  else
  {
    v270 = *(unsigned __int8 *)(*(_QWORD *)v406.__r_.__value_.__l.__data_ + 39);
    v271 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v271 & 1) != 0)
      goto LABEL_395;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v387 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_395:
  if (byte_254A4A4F8[23] >= 0)
    v273 = byte_254A4A4F8;
  else
    v273 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v274 = byte_254A4A4F8[23];
  else
    v274 = *(_QWORD *)&byte_254A4A4F8[8];
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v273, v269);
  v275 = &object.__r_.__value_.__l.__size_;
  if (v274 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v274 >= 0x17)
  {
    v276 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v274 | 7) != 0x17)
      v276 = v274 | 7;
    v277 = v276 + 1;
    v275 = (std::string::size_type *)operator new(v276 + 1);
    *(_QWORD *)&v387 = v277 | 0x8000000000000000;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v275;
    object.__r_.__value_.__r.__words[2] = v274;
    goto LABEL_408;
  }
  BYTE7(v387) = v274;
  if (v274)
LABEL_408:
    memmove(v275, v273, v274);
  *((_BYTE *)v275 + v274) = 0;
  BYTE8(v387) = 1;
  v278 = &v388;
  if (v270 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v270 >= 0x17)
  {
    v280 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v270 | 7) != 0x17)
      v280 = v270 | 7;
    v281 = v280 + 1;
    v278 = operator new(v280 + 1);
    v390 = v281 | 0x8000000000000000;
    v388 = v278;
    v389 = v270;
  }
  else
  {
    HIBYTE(v390) = v270;
    if (!v270)
    {
      LOBYTE(v388) = 0;
      v391 = 1;
      v279 = object.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v390) & 0x80000000) == 0)
        goto LABEL_413;
      goto LABEL_419;
    }
  }
  memmove(v278, v269, v270);
  *((_BYTE *)v278 + v270) = 0;
  v391 = 1;
  v279 = object.__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v390) & 0x80000000) == 0)
  {
LABEL_413:
    if (!BYTE8(v387))
      goto LABEL_422;
    goto LABEL_420;
  }
LABEL_419:
  operator delete(v388);
  if (!BYTE8(v387))
    goto LABEL_422;
LABEL_420:
  if (SBYTE7(v387) < 0)
    operator delete((void *)object.__r_.__value_.__l.__size_);
LABEL_422:
  if (object.__r_.__value_.__r.__words[0])
    os_release(object.__r_.__value_.__l.__data_);
  if (!v259 || !*(_QWORD *)(v259 + 24))
  {
    os_log_type_enabled(v279, OS_LOG_TYPE_DEBUG);
    LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v267;
    v288 = (void *)_os_log_send_and_compose_impl();
    if (v288)
      free(v288);
    goto LABEL_497;
  }
  v282 = _os_log_pack_size();
  v283 = operator new(v282, (std::align_val_t)8uLL);
  v284 = (_QWORD *)operator new();
  *v284 = &off_24C9ABB80;
  v284[1] = 0;
  v284[2] = 0;
  v284[3] = v283;
  v360.__r_.__value_.__r.__words[0] = (std::string::size_type)v283;
  v360.__r_.__value_.__l.__size_ = (std::string::size_type)v283;
  v361 = 0;
  v362 = 0;
  v360.__r_.__value_.__r.__words[2] = (std::string::size_type)v284;
  v285 = strlen((const char *)v267);
  if (v285 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v286 = v285;
  if (v285 >= 0x17)
  {
    v289 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v285 | 7) != 0x17)
      v289 = v285 | 7;
    v290 = v289 + 1;
    v287 = (std::string *)operator new(v289 + 1);
    v380.__r_.__value_.__r.__words[2] = v290 | 0x8000000000000000;
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v287;
    v380.__r_.__value_.__l.__size_ = v286;
    goto LABEL_437;
  }
  *((_BYTE *)&v380.__r_.__value_.__s + 23) = v285;
  v287 = &v380;
  if (v285)
LABEL_437:
    memcpy(v287, v267, v286);
  v287->__r_.__value_.__s.__data_[v286] = 0;
  *(_QWORD *)&__dst = v380.__r_.__value_.__l.__size_;
  v291 = v380.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&__dst + 7) = *(std::string::size_type *)((char *)&v380.__r_.__value_.__r.__words[1] + 7);
  v292 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
  v293 = operator new(0x38uLL);
  v293[1] = 0;
  v293[2] = 0;
  v293[3] = off_24C9ABC20;
  *v293 = &off_24C9ABBD0;
  v294 = __dst;
  v293[4] = v291;
  v293[5] = v294;
  *(_QWORD *)((char *)v293 + 47) = *(_QWORD *)((char *)&__dst + 7);
  *((_BYTE *)v293 + 55) = v292;
  *(_QWORD *)&__dst = 0;
  *(_QWORD *)((char *)&__dst + 7) = 0;
  v295 = (std::__shared_weak_count *)v362;
  v361 = (char *)(v293 + 3);
  v362 = (const char *)v293;
  if (v295)
  {
    v296 = (unint64_t *)&v295->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  object = v360;
  v298 = v361;
  if (v360.__r_.__value_.__r.__words[2])
  {
    v299 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
    do
      v300 = __ldxr(v299);
    while (__stxr(v300 + 1, v299));
  }
  v301 = (std::__shared_weak_count *)v362;
  *(_QWORD *)&v387 = v298;
  *((_QWORD *)&v387 + 1) = v362;
  if (v362)
  {
    v302 = (unint64_t *)(v362 + 8);
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
    v388 = v298;
    do
      v304 = __ldaxr(v302);
    while (__stlxr(v304 - 1, v302));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  else
  {
    v388 = v298;
  }
  v305 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
  if (v360.__r_.__value_.__r.__words[2])
  {
    v306 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  v308 = object.__r_.__value_.__r.__words[0];
  if (*((char *)v388 + 31) >= 0)
    v309 = (char *)v388 + 8;
  else
    v309 = (char *)*((_QWORD *)v388 + 1);
  v310 = _os_log_pack_fill();
  *(_DWORD *)v310 = 136315138;
  *(_QWORD *)(v310 + 4) = v309;
  v311 = operator new();
  v312 = *(unsigned __int8 *)(v268 + 39);
  v313 = v359;
  if ((v312 & 0x80u) != 0)
  {
    v313 = *(const char **)(v268 + 16);
    v312 = *(_QWORD *)(v268 + 24);
  }
  *(_QWORD *)v311 = v308;
  *(_OWORD *)(v311 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
  *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v311 + 24) = v387;
  v387 = 0uLL;
  *(_QWORD *)(v311 + 40) = v313;
  *(_QWORD *)(v311 + 48) = v312;
  *(_BYTE *)(v311 + 56) = 2;
  v380.__r_.__value_.__r.__words[0] = 0;
  v360.__r_.__value_.__r.__words[0] = v311;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v259 + 24) + 40))(*(_QWORD *)(v259 + 24), &v360);
  v314 = v360.__r_.__value_.__r.__words[0];
  v360.__r_.__value_.__r.__words[0] = 0;
  if (v314)
  {
    v315 = *(std::__shared_weak_count **)(v314 + 32);
    if (v315)
    {
      v316 = (unint64_t *)&v315->__shared_owners_;
      do
        v317 = __ldaxr(v316);
      while (__stlxr(v317 - 1, v316));
      if (!v317)
      {
        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
        std::__shared_weak_count::__release_weak(v315);
      }
    }
    v318 = *(std::__shared_weak_count **)(v314 + 16);
    if (v318)
    {
      v319 = (unint64_t *)&v318->__shared_owners_;
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
        std::__shared_weak_count::__release_weak(v318);
      }
    }
    MEMORY[0x212BC6398](v314, 0x10F0C40B62ED6C6);
    v321 = v380.__r_.__value_.__r.__words[0];
    v380.__r_.__value_.__r.__words[0] = 0;
    if (v321)
    {
      v322 = *(std::__shared_weak_count **)(v321 + 32);
      if (v322)
      {
        v323 = (unint64_t *)&v322->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
      v325 = *(std::__shared_weak_count **)(v321 + 16);
      if (v325)
      {
        v326 = (unint64_t *)&v325->__shared_owners_;
        do
          v327 = __ldaxr(v326);
        while (__stlxr(v327 - 1, v326));
        if (!v327)
        {
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
        }
      }
      MEMORY[0x212BC6398](v321, 0x10F0C40B62ED6C6);
    }
  }
  v328 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (*((_QWORD *)&v387 + 1))
  {
    v329 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
  v331 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
  if (object.__r_.__value_.__r.__words[2])
  {
    v332 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (!v333)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
    }
  }
LABEL_497:
  if (v258)
  {
    v334 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v334 = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_20E8C003C((uint64_t)&v406, "%s", (const char *)v334);
    sub_20E863570((uint64_t)&v406);
  }
  sub_20E863570((uint64_t)&v406);
  v335 = v411;
  if (v411)
  {
    v336 = (unint64_t *)&v411->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v367[0] = *MEMORY[0x24BEDB7F0];
  v338 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v367 + *(_QWORD *)(v367[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v368 = v338;
  v369 = MEMORY[0x24BEDB848] + 16;
  if (v375 < 0)
    operator delete(v374);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](v378);
}

void sub_20FC01DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  if (*(_BYTE *)(v69 - 168) && *(char *)(v69 - 169) < 0)
    operator delete(*(void **)(v69 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a59);
  if (SLOBYTE(STACK[0x35F]) < 0)
  {
    operator delete((void *)STACK[0x348]);
    sub_20E863784((uint64_t)&a69);
    sub_20F89E908((uint64_t)&STACK[0x360]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a69);
  sub_20F89E908((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC02220(uint64_t a1, unsigned int a2)
{
  std::string::size_type v2;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  char v15;
  const char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  char *v22;
  unsigned int v23;
  char v24;
  const char *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::string *v31;
  std::string::size_type size;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  std::runtime_error *v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  size_t v54;
  std::string *v55;
  __int128 v56;
  unsigned int v57;
  std::runtime_error *exception;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  size_t v65;
  std::string *v66;
  __int128 v67;
  _QWORD *v68;
  std::string *v69;
  std::string::size_type v70;
  _QWORD *v71;
  _QWORD *v72;
  size_t v73;
  _QWORD *v74;
  std::string *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  const char *v79;
  unsigned __int8 v80;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  std::string *v84;
  unsigned __int8 v85;
  uint64_t v86;
  const char *v87;
  NSObject *v88;
  std::string *v89;
  _QWORD v90[2];
  unsigned __int8 v91;
  std::string *v92;
  std::string v93;
  int v94;
  const char *v95;
  int v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  std::string v100;
  std::string v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  std::string v105;
  char v106;
  _QWORD v107[5];
  const char *v108;
  uint64_t v109;

  v5 = a1 + 5168;
  if (!sub_20FBCB744(a1 + 5168, a2))
  {
    v91 = 4;
    strcpy((char *)v90, "pose");
    v17 = *(char **)(a1 + 5176);
    v18 = *(char **)(a1 + 5184);
    if (v18 == v17)
      goto LABEL_33;
    v19 = (v18 - v17) >> 4;
    do
    {
      v20 = v19 >> 1;
      v21 = (unsigned int *)&v17[16 * (v19 >> 1)];
      v23 = *v21;
      v22 = (char *)(v21 + 4);
      v19 += ~(v19 >> 1);
      if (v23 < a2)
        v17 = v22;
      else
        v19 = v20;
    }
    while (v19);
    if (v17 == v18 || *(_DWORD *)v17 != a2)
    {
LABEL_33:
      v25 = "not found";
    }
    else
    {
      v24 = *(_BYTE *)(*((_QWORD *)v17 + 1) + 4);
      if ((v24 & 4) != 0)
      {
        v25 = "marginalized";
      }
      else if ((v24 & 1) != 0)
      {
        v25 = "new";
      }
      else if ((v24 & 2) != 0)
      {
        v25 = "removed";
      }
      else
      {
        v25 = "unknown";
      }
    }
    sub_20F9B2A4C(&v102);
    if (**(int **)(v102 + 56) > 5
      || ((v26 = *(unsigned __int8 *)(v102 + 72), (v27 = sub_20E8C31DC(v102, "OSLogSurrogateAppender", 1, 0)) == 0)
        ? (v28 = 0)
        : (v28 = v27 + 16),
          !v26 ? (v29 = v27 == 0) : (v29 = 0),
          v29))
    {
      v57 = 4;
    }
    else
    {
      sub_20E863438((uint64_t)&v101);
      v30 = sub_20E86A980(&v101.__r_.__value_.__r.__words[2], (uint64_t)"Failed to marginalize state ", 28);
      std::to_string(&v105, a2);
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v105;
      else
        v31 = (std::string *)v105.__r_.__value_.__r.__words[0];
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
      else
        size = v105.__r_.__value_.__l.__size_;
      v33 = sub_20E86A980(v30, (uint64_t)v31, size);
      v34 = sub_20E86A980(v33, (uint64_t)": ", 2);
      v35 = strlen(v25);
      v36 = sub_20E86A980(v34, (uint64_t)v25, v35);
      sub_20E86A980(v36, (uint64_t)".", 1);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      sub_20E923E88(&v101, &v100);
      v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      v93.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v93.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v94 = 5;
      v95 = "unknown file";
      v96 = 2809;
      v98 = 0;
      v99 = 0;
      v97 = "unknown function";
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v100;
      else
        v37 = (std::string *)v100.__r_.__value_.__r.__words[0];
      v92 = v37;
      v38 = *(_QWORD *)v93.__r_.__value_.__l.__data_;
      v39 = (uint64_t *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 16);
      if (*(char *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v41 = *(const char **)(v38 + 16);
        v40 = *(_QWORD *)(v38 + 24);
      }
      else
      {
        v40 = *(unsigned __int8 *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 39);
        v41 = (const char *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 16);
      }
      v103 = v41;
      v104 = v40;
      v80 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v105);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v105);
        if (v106 && SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v81 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v82 = byte_254A4A4F8;
      }
      else
      {
        v81 = *(_QWORD *)&byte_254A4A4F8[8];
        v82 = *(const char **)byte_254A4A4F8;
      }
      v108 = v82;
      v109 = v81;
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v82, v103);
      sub_20E86E5A8(&v105.__r_.__value_.__l.__size_, (uint64_t)&v108);
      sub_20E86E5A8(v107, (uint64_t)&v103);
      v83 = v105.__r_.__value_.__r.__words[0];
      sub_20E86E44C((uint64_t)&v105);
      sub_20FBAD664(v28, v39, v83, OS_LOG_TYPE_ERROR, (const char **)&v92);
      if (v26)
      {
        v84 = &v100;
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v84 = (std::string *)v100.__r_.__value_.__r.__words[0];
        sub_20E8C003C((uint64_t)&v93, "%s", (const char *)v84);
        sub_20E863570((uint64_t)&v93);
      }
      sub_20E863714((uint64_t)&v93);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      sub_20E863784((uint64_t)&v101);
      v57 = v91;
      v2 = v90[1];
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    *((_BYTE *)&v100.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v100, "marginalize ");
    if ((v57 & 0x80u) == 0)
      v59 = (const std::string::value_type *)v90;
    else
      v59 = (const std::string::value_type *)v90[0];
    if ((v57 & 0x80u) == 0)
      v60 = v57;
    else
      v60 = v2;
    v61 = std::string::append(&v100, v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v63 = std::string::append(&v93, " p ", 3uLL);
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    v65 = strlen(v25);
    v66 = std::string::append(&v105, v25, v65);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v101);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_WORD *)(a1 + 7828) = 0;
  *(_DWORD *)(a1 + 7824) = 0;
  if (*(_BYTE *)(a1 + 2146))
  {
    result = sub_20FBCB948(v5, a2);
    if ((result & 1) == 0)
    {
      v7 = a2;
      v91 = 12;
      strcpy((char *)v90, "vel_and_bias");
      v8 = *(char **)(a1 + 5272);
      v9 = *(char **)(a1 + 5280);
      if (v9 == v8)
        goto LABEL_55;
      v10 = (v9 - v8) >> 4;
      do
      {
        v11 = v10 >> 1;
        v12 = (unsigned int *)&v8[16 * (v10 >> 1)];
        v14 = *v12;
        v13 = (char *)(v12 + 4);
        v10 += ~(v10 >> 1);
        if (v14 < a2)
          v8 = v13;
        else
          v10 = v11;
      }
      while (v10);
      if (v8 == v9 || *(_DWORD *)v8 != a2)
      {
LABEL_55:
        v16 = "not found";
      }
      else
      {
        v15 = *(_BYTE *)(*((_QWORD *)v8 + 1) + 4);
        if ((v15 & 4) != 0)
        {
          v16 = "marginalized";
        }
        else if ((v15 & 1) != 0)
        {
          v16 = "new";
        }
        else if ((v15 & 2) != 0)
        {
          v16 = "removed";
        }
        else
        {
          v16 = "unknown";
        }
      }
      sub_20F9B2A4C(&v102);
      v42 = 0x5F646E615F6C6576;
      if (**(int **)(v102 + 56) <= 5
        && ((v43 = *(unsigned __int8 *)(v102 + 72), (v44 = sub_20E8C31DC(v102, "OSLogSurrogateAppender", 1, 0)) == 0)
          ? (v45 = 0)
          : (v45 = v44 + 16),
            v43 || v44))
      {
        sub_20E863438((uint64_t)&v101);
        v68 = sub_20E86A980(&v101.__r_.__value_.__r.__words[2], (uint64_t)"Failed to marginalize state ", 28);
        std::to_string(&v105, v7);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = &v105;
        else
          v69 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        else
          v70 = v105.__r_.__value_.__l.__size_;
        v71 = sub_20E86A980(v68, (uint64_t)v69, v70);
        v72 = sub_20E86A980(v71, (uint64_t)": ", 2);
        v73 = strlen(v16);
        v74 = sub_20E86A980(v72, (uint64_t)v16, v73);
        sub_20E86A980(v74, (uint64_t)".", 1);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        sub_20E923E88(&v101, &v100);
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
        v93.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v93.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v94 = 5;
        v95 = "unknown file";
        v96 = 2809;
        v98 = 0;
        v99 = 0;
        v97 = "unknown function";
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = &v100;
        else
          v75 = (std::string *)v100.__r_.__value_.__r.__words[0];
        v92 = v75;
        v76 = *(_QWORD *)v93.__r_.__value_.__l.__data_;
        v77 = (uint64_t *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v79 = *(const char **)(v76 + 16);
          v78 = *(_QWORD *)(v76 + 24);
        }
        else
        {
          v78 = *(unsigned __int8 *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 39);
          v79 = (const char *)(*(_QWORD *)v93.__r_.__value_.__l.__data_ + 16);
        }
        v103 = v79;
        v104 = v78;
        v85 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v105);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v105);
          if (v106 && SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v86 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v87 = byte_254A4A4F8;
        }
        else
        {
          v86 = *(_QWORD *)&byte_254A4A4F8[8];
          v87 = *(const char **)byte_254A4A4F8;
        }
        v108 = v87;
        v109 = v86;
        v105.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v87, v103);
        sub_20E86E5A8(&v105.__r_.__value_.__l.__size_, (uint64_t)&v108);
        sub_20E86E5A8(v107, (uint64_t)&v103);
        v88 = v105.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v105);
        sub_20FBADC68(v45, v77, v88, OS_LOG_TYPE_ERROR, (const char **)&v92);
        if (v43)
        {
          v89 = &v100;
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v89 = (std::string *)v100.__r_.__value_.__r.__words[0];
          sub_20E8C003C((uint64_t)&v93, "%s", (const char *)v89);
          sub_20E863570((uint64_t)&v93);
        }
        sub_20E863714((uint64_t)&v93);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        sub_20E863784((uint64_t)&v101);
        v46 = v91;
        v42 = v90[0];
      }
      else
      {
        v46 = 12;
      }
      v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      *((_BYTE *)&v100.__r_.__value_.__s + 23) = 12;
      strcpy((char *)&v100, "marginalize ");
      if ((v46 & 0x80u) == 0)
        v48 = (const std::string::value_type *)v90;
      else
        v48 = (const std::string::value_type *)v42;
      if ((v46 & 0x80u) == 0)
        v49 = v46;
      else
        v49 = v90[1];
      v50 = std::string::append(&v100, v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      v52 = std::string::append(&v93, " p ", 3uLL);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = strlen(v16);
      v55 = std::string::append(&v105, v16, v54);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v101.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v47, &v101);
      v47->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
      __cxa_throw(v47, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    result = sub_20FC045E8(v5, a2);
    if ((result & 1) == 0)
      return result;
  }
  *(_WORD *)(a1 + 7828) = 0;
  *(_DWORD *)(a1 + 7824) = 0;
  return result;
}

void sub_20FC02BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,_QWORD *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v57;

  if (*(_BYTE *)(v55 - 136) && *(char *)(v55 - 137) < 0)
    operator delete(*(void **)(v55 - 160));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  if (a35 < 0)
    operator delete(__p);
  a36 = (_QWORD *)*MEMORY[0x24BEDB7F0];
  v57 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD **)((char *)&a36 + *(a36 - 3)) = *(_QWORD **)(MEMORY[0x24BEDB7F0] + 64);
  a38 = v57;
  a39 = MEMORY[0x24BEDB848] + 16;
  if (a52 < 0)
    operator delete(a47);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a55);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC02E88(_QWORD *a1, uint64_t a2)
{
  void **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double *i;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  std::runtime_error *exception;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned int v35[4];

  *(_QWORD *)v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v3 = (void **)(a1 + 8397);
  v4 = a1 + 5264;
  v32 = 0u;
  v5 = a1 + 5066;
  v6 = a1 + 4868;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  v7 = a1 + 4670;
  v8 = a1 + 4472;
  v25 = a1 + 4274;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v9 = a1 + 3482;
  sub_20F8E03B8(a1 + 3482, (int *)&v35[1], v35, v31, &v26);
  if (v35[0] >= v35[1])
    v10 = v35[1];
  else
    v10 = v35[0];
  v11 = v10;
  *((_DWORD *)v3 + 4) = v10;
  if ((unint64_t)v3[1] < v10)
  {
    if (*v3)
    {
      MEMORY[0x212BC6368](*v3, 0x1000C8000313F17);
      v11 = *((_DWORD *)v3 + 4);
    }
    v12 = (8 * v10 + 31) & 0xFFFFFFFE0;
    *v3 = 0;
    v3[1] = (void *)(v12 >> 3);
    *v3 = operator new(v12, (std::align_val_t)0x20uLL);
  }
  if (v11)
    bzero(*v3, 8 * v11);
  (*(void (**)(_QWORD *, void **, _QWORD))(*v4 + 72))(v4, v3, DWORD2(v30));
  (*(void (**)(_QWORD *, void **, _QWORD))(*v5 + 72))(v5, v3, v30);
  (*(void (**)(_QWORD *, void **, _QWORD))(*v6 + 72))(v6, v3, DWORD2(v29));
  (*(void (**)(_QWORD *, void **, _QWORD))(*v7 + 72))(v7, v3, v29);
  (*(void (**)(_QWORD *, void **, _QWORD))(*v8 + 72))(v8, v3, DWORD2(v28));
  (*(void (**)(_QWORD *, void **, _QWORD))(*v25 + 72))(v25, v3, v28);
  (*(void (**)(_QWORD *, void **, _QWORD))(a1[4076] + 72))(a1 + 4076, v3, DWORD2(v27));
  (*(void (**)(_QWORD *, void **, _QWORD))(a1[3878] + 72))(a1 + 3878, v3, v27);
  (*(void (**)(_QWORD *, void **, _QWORD))(a1[3680] + 72))(a1 + 3680, v3, DWORD2(v26));
  (*(void (**)(_QWORD *, void **, _QWORD))(a1[3482] + 72))(v9, v3, v26);
  v13 = *((unsigned int *)v3 + 4);
  if (!(_DWORD)v13)
    return 0;
  v14 = (char *)*v3;
  v15 = 8 * v13;
  v16 = 8 * v13;
  for (i = (double *)*v3; *i >= 0.0; ++i)
  {
    v16 -= 8;
    if (!v16)
    {
      do
      {
        v14 += 8;
        v15 -= 8;
      }
      while (v15);
      return 0;
    }
  }
  v18 = *(_DWORD *)(a2 + 16);
  if (!v18
    || ((v19 = *(_DWORD *)(a2 + 20)) != 0 ? (v20 = v18 == (_DWORD)v13) : (v20 = 0),
        v20 ? (v21 = v19 == (_DWORD)v13) : (v21 = 0),
        !v21))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(v31, "marginalizer rollback failed");
    std::runtime_error::runtime_error(exception, (const std::string *)v31);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_20F20B6B0(a2);
  *(_QWORD *)v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_20F8E03B8(v9, (int *)&v35[1], v35, v31, &v26);
  sub_20F8E0678((uint64_t)v9, (uint64_t *)a2, (unsigned int *)v31, (unsigned int *)&v26);
  sub_20FB71700((uint64_t)a1);
  return 1;
}

void sub_20FC031E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t sub_20FC03218(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t v63;

  v1 = *(_QWORD *)(result + 6352);
  v2 = *(_QWORD *)(result + 6360);
  if (v1 != v2)
  {
    if ((unint64_t)(v2 - v1 - 8016) >> 4 < 0x1F5)
    {
      v3 = *(_QWORD *)(result + 6352);
      do
      {
LABEL_7:
        *(_QWORD *)(v3 + 24) = 0;
        v3 += 8016;
      }
      while (v3 != v2);
      goto LABEL_8;
    }
    v4 = (v2 - v1 - 8016) / 0x1F50uLL + 1;
    v3 = v1 + 8016 * (v4 & 0x1FFFFFFFFFFFFELL);
    v5 = v4 & 0x1FFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v1 + 24) = 0;
      *(_QWORD *)(v1 + 8040) = 0;
      v1 += 16032;
      v5 -= 2;
    }
    while (v5);
    if (v4 != (v4 & 0x1FFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_8:
  v6 = *(_QWORD *)(result + 6472);
  v7 = *(_QWORD *)(result + 6480);
  if (v6 == v7)
    goto LABEL_15;
  v8 = v7 - v6 - 360;
  if (v8 < 0x168)
  {
    v9 = *(_QWORD *)(result + 6472);
    do
    {
LABEL_14:
      *(_WORD *)(v9 + 200) = 256;
      v9 += 360;
    }
    while (v9 != v7);
    goto LABEL_15;
  }
  v10 = v8 / 0x168 + 1;
  v9 = v6 + 360 * (v10 & 0x1FFFFFFFFFFFFFELL);
  v11 = v10 & 0x1FFFFFFFFFFFFFELL;
  do
  {
    *(_WORD *)(v6 + 200) = 256;
    *(_WORD *)(v6 + 560) = 256;
    v6 += 720;
    v11 -= 2;
  }
  while (v11);
  if (v10 != (v10 & 0x1FFFFFFFFFFFFFELL))
    goto LABEL_14;
LABEL_15:
  v12 = *(_QWORD *)(result + 6400);
  v13 = *(_QWORD *)(result + 6408);
  if (v12 != v13)
  {
    v14 = v13 - v12 - 144;
    v15 = *(_QWORD *)(result + 6400);
    if (v14 < 0x90)
      goto LABEL_67;
    v16 = v14 / 0x90 + 1;
    v15 = v12 + 144 * (v16 & 0x3FFFFFFFFFFFFFELL);
    v17 = (_BYTE *)(v12 + 184);
    v18 = v16 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v17 - 144) = 0;
      *v17 = 0;
      v17 += 288;
      v18 -= 2;
    }
    while (v18);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_67:
      do
      {
        *(_BYTE *)(v15 + 40) = 0;
        v15 += 144;
      }
      while (v15 != v13);
    }
  }
  v19 = (_WORD *)(result + 6760);
  v20 = *(_QWORD *)(result + 6424);
  v21 = *(_QWORD *)(result + 6432);
  if (v20 != v21)
  {
    v22 = v21 - v20 - 152;
    v23 = *(_QWORD *)(result + 6424);
    if (v22 < 0x98)
      goto LABEL_68;
    v24 = v22 / 0x98 + 1;
    v23 = v20 + 152 * (v24 & 0x3FFFFFFFFFFFFFELL);
    v25 = (_BYTE *)(v20 + 192);
    v26 = v24 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v25 - 152) = 0;
      *v25 = 0;
      v25 += 304;
      v26 -= 2;
    }
    while (v26);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_68:
      do
      {
        *(_BYTE *)(v23 + 40) = 0;
        v23 += 152;
      }
      while (v23 != v21);
    }
  }
  v27 = *(_QWORD *)(result + 6448);
  v28 = *(_QWORD *)(result + 6456);
  v29 = v28 - v27;
  if (v28 != v27)
  {
    v30 = 0x86BCA1AF286BCA1BLL * (v29 >> 4);
    v31 = *(_QWORD **)(result + 6448);
    do
    {
      v32 = v30 >> 1;
      v33 = &v31[38 * (v30 >> 1)];
      v34 = *v33;
      v35 = v33 + 38;
      v30 += ~(v30 >> 1);
      if (v34 == -1)
        v30 = v32;
      else
        v31 = v35;
    }
    while (v30);
    if ((_QWORD *)v27 != v31)
    {
      v36 = (unint64_t)v31 - v27 - 304;
      v37 = *(_QWORD *)(result + 6448);
      if (v36 < 0x130)
        goto LABEL_69;
      v38 = v36 / 0x130 + 1;
      v37 = v27 + 304 * (v38 & 0x1FFFFFFFFFFFFFELL);
      v39 = v38 & 0x1FFFFFFFFFFFFFELL;
      v40 = *(_QWORD *)(result + 6448);
      do
      {
        *(_BYTE *)(v40 + 296) = 1;
        *(_BYTE *)(v40 + 600) = 1;
        v40 += 608;
        v39 -= 2;
      }
      while (v39);
      if (v38 != (v38 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_69:
        do
        {
          *(_BYTE *)(v37 + 296) = 1;
          v37 += 304;
        }
        while ((_QWORD *)v37 != v31);
      }
      *(_BYTE *)(result + 6762) = 0;
      *v19 = 256;
      *(_BYTE *)(result + 7829) = 0;
      *(_DWORD *)(result + 7824) = 0;
    }
    v41 = v29 - 304;
    if (v41 < 0x130)
    {
      v42 = v27;
      do
      {
LABEL_45:
        *(_WORD *)(v42 + 176) = 0;
        *(_QWORD *)(v42 + 168) = 0;
        v42 += 304;
      }
      while (v42 != v28);
      goto LABEL_46;
    }
    v43 = v41 / 0x130 + 1;
    v42 = v27 + 304 * (v43 & 0x1FFFFFFFFFFFFFELL);
    v44 = v43 & 0x1FFFFFFFFFFFFFELL;
    do
    {
      *(_WORD *)(v27 + 176) = 0;
      *(_WORD *)(v27 + 480) = 0;
      *(_QWORD *)(v27 + 168) = 0;
      *(_QWORD *)(v27 + 472) = 0;
      v27 += 608;
      v44 -= 2;
    }
    while (v44);
    if (v43 != (v43 & 0x1FFFFFFFFFFFFFELL))
      goto LABEL_45;
  }
LABEL_46:
  v45 = *(_QWORD *)(result + 6640);
  v46 = *(_QWORD *)(result + 6648);
  v47 = v46 - v45;
  if (v46 != v45)
  {
    v48 = *(_QWORD *)(result + 6640);
    v49 = 0xD37A6F4DE9BD37A7 * (v47 >> 3);
    v50 = (_QWORD *)v48;
    do
    {
      v51 = v49 >> 1;
      v52 = &v50[23 * (v49 >> 1)];
      v54 = *v52;
      v53 = v52 + 23;
      v49 += ~(v49 >> 1);
      v55 = v54 == -1;
      if (v54 == -1)
        v49 = v51;
      if (!v55)
        v50 = v53;
    }
    while (v49);
    if ((_QWORD *)v45 != v50)
    {
      v56 = (unint64_t)v50 - v45 - 184;
      v57 = *(_QWORD *)(result + 6640);
      if (v56 < 0xB8)
        goto LABEL_70;
      v58 = v56 / 0xB8 + 1;
      v57 = v45 + 184 * (v58 & 0x3FFFFFFFFFFFFFELL);
      v59 = (_BYTE *)(v45 + 360);
      v60 = v58 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(v59 - 184) = 1;
        *v59 = 1;
        v59 += 368;
        v60 -= 2;
      }
      while (v60);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_70:
        do
        {
          *(_BYTE *)(v57 + 176) = 1;
          v57 += 184;
        }
        while ((_QWORD *)v57 != v50);
      }
      *(_BYTE *)(result + 6762) = 0;
      *v19 = 256;
      *(_BYTE *)(result + 7829) = 0;
      *(_DWORD *)(result + 7824) = 0;
    }
    if ((unint64_t)(v47 - 184) < 0xB8)
      goto LABEL_71;
    v61 = (v47 - 184) / 0xB8uLL + 1;
    v48 = v45 + 184 * (v61 & 0x3FFFFFFFFFFFFFELL);
    v62 = (_BYTE *)(v45 + 232);
    v63 = v61 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v62 - 184) = 1;
      *v62 = 1;
      v62 += 368;
      v63 -= 2;
    }
    while (v63);
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_71:
      do
      {
        *(_BYTE *)(v48 + 48) = 1;
        v48 += 184;
      }
      while (v48 != v46);
    }
  }
  return result;
}

void sub_20FC03704(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  v2 = a1[788];
  v3 = a1[789];
  while (v2 != v3)
  {
    v4 = *(std::__shared_weak_count **)(v2 + 128);
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v2 += 280;
  }
  v7 = a1[779];
  v8 = a1[780];
  while (v7 != v8)
  {
    v9 = *(std::__shared_weak_count **)(v7 + 200);
    *(_QWORD *)(v7 + 192) = 0;
    *(_QWORD *)(v7 + 200) = 0;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 += 504;
  }
  v12 = a1[782];
  v13 = a1[783];
  while (v12 != v13)
  {
    v14 = *(std::__shared_weak_count **)(v12 + 128);
    *(_QWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 += 280;
  }
  v17 = a1[785];
  v18 = a1[786];
  while (v17 != v18)
  {
    v19 = *(std::__shared_weak_count **)(v17 + 128);
    *(_QWORD *)(v17 + 120) = 0;
    *(_QWORD *)(v17 + 128) = 0;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v17 += 280;
  }
  v22 = a1[812];
  v23 = a1[813];
  if (v22 != v23)
  {
    v24 = v23 - v22 - 112;
    v25 = a1[812];
    if (v24 < 0x70)
      goto LABEL_69;
    v26 = (((v24 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
    v25 = v22 + 112 * (v26 & 0x7FFFFFFFFFFFFFELL);
    v27 = (_BYTE *)(v22 + 152);
    v28 = v26 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v27 - 120) = 0;
      *(v27 - 8) = 0;
      *(v27 - 112) = 0;
      *v27 = 0;
      v27 += 224;
      v28 -= 2;
    }
    while (v28);
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_69:
      do
      {
        *(_BYTE *)(v25 + 32) = 0;
        *(_BYTE *)(v25 + 40) = 0;
        v25 += 112;
      }
      while (v25 != v23);
    }
  }
  v29 = a1[815];
  v30 = a1[816];
  while (v29 != v30)
  {
    if (*(_BYTE *)(v29 + 88))
      *(_BYTE *)(v29 + 88) = 0;
    v29 += 208;
  }
  v31 = a1[818];
  v32 = a1[819];
  while (v31 != v32)
  {
    if (*(_BYTE *)(v31 + 88))
      *(_BYTE *)(v31 + 88) = 0;
    v31 += 208;
  }
  v33 = a1[821];
  v34 = a1[822];
  while (v33 != v34)
  {
    if (*(_BYTE *)(v33 + 72))
      *(_BYTE *)(v33 + 72) = 0;
    v33 += 176;
  }
  v35 = a1[824];
  v36 = a1[825];
  while (v35 != v36)
  {
    if (*(_BYTE *)(v35 + 72))
      *(_BYTE *)(v35 + 72) = 0;
    v35 += 176;
  }
  for (i = a1[791]; i != a1[792]; i += 160)
  {
    v38 = *(std::__shared_weak_count **)(i + 56);
    *(_QWORD *)(i + 48) = 0;
    *(_QWORD *)(i + 56) = 0;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_20FC03A08(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FC03F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FC03FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC03FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC0400C(std::string *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::string::size_type v11;
  std::string *p_dst;
  unsigned int v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  std::string __dst;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;
  std::string v31;
  _QWORD v32[2];
  _QWORD v33[3];
  const void *v34;
  uint64_t v35;
  const void *v36;
  unint64_t v37;
  void *v38;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;

  v4 = (uint64_t *)(a2 + 24 * a3);
  sub_20E863438((uint64_t)v32);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 == v6)
  {
    v9 = *v4;
    v8 = *v4;
  }
  else
  {
    std::ostream::operator<<();
    for (i = v5 + 4; i != v6; i += 4)
    {
      sub_20E86A980(v33, (uint64_t)", ", 2);
      std::ostream::operator<<();
    }
    v8 = v4[1];
    v9 = *v4;
  }
  std::to_string(&v31, (v8 - v9) >> 2);
  if (v5 == v6)
  {
    v13 = 0;
    HIBYTE(v30) = 0;
    LOBYTE(__p[0]) = 0;
    goto LABEL_22;
  }
  if ((v41 & 0x10) != 0)
  {
    v14 = v40;
    if (v40 < v37)
    {
      v40 = v37;
      v14 = v37;
    }
    v15 = v36;
    v11 = v14 - (_QWORD)v36;
    if (v14 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_42;
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      v11 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_21;
    }
    v15 = v34;
    v11 = v35 - (_QWORD)v34;
    if ((unint64_t)(v35 - (_QWORD)v34) >= 0x7FFFFFFFFFFFFFF8)
LABEL_42:
      sub_20E860B7C();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
    p_dst = &__dst;
    if (!v11)
      goto LABEL_21;
  }
  memmove(p_dst, v15, v11);
LABEL_21:
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  v18 = std::string::insert(&__dst, 0, " {", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v28, "}", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v30 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v13 = HIBYTE(v30);
  v10 = __p[1];
LABEL_22:
  if ((v13 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v23 = v13;
  else
    v23 = (std::string::size_type)v10;
  v24 = std::string::append(&v31, (const std::string::value_type *)v22, v23);
  *a1 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (v5 == v6)
    goto LABEL_33;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_39;
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_39:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_35:
  v32[0] = *MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v33[0] = v25;
  v33[1] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete(v38);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v42);
}

void sub_20FC04334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_20E863784((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC043E4(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 6) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 2u;
  v13 = *(char **)(a1 + 1872);
  v14 = *(_QWORD *)(a1 + 1880);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1864);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1864) = v22;
        *(_QWORD *)(a1 + 1872) = v15;
        *(_QWORD *)(a1 + 1880) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1872) = v15;
  *(_BYTE *)(a1 + 1594) = 0;
  *(_WORD *)(a1 + 1592) = 256;
  return 1;
}

uint64_t sub_20FC045E8(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 104);
  v5 = *(char **)(a1 + 112);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 6) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 2u;
  v13 = *(char **)(a1 + 1896);
  v14 = *(_QWORD *)(a1 + 1904);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1888);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1888) = v22;
        *(_QWORD *)(a1 + 1896) = v15;
        *(_QWORD *)(a1 + 1904) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1896) = v15;
  *(_BYTE *)(a1 + 1594) = 0;
  *(_WORD *)(a1 + 1592) = 256;
  return 1;
}

uint64_t sub_20FC047EC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD **v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  unsigned int v28;
  uint64_t **v29;
  char *v30;
  char *v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  uint64_t **v50;

  v1 = a1;
  v2 = (uint64_t)(a1 + 8198);
  v3 = (_QWORD **)(a1 + 8201);
  v4 = (uint64_t **)(a1 + 8202);
  sub_20E86872C((uint64_t)(a1 + 8201), (_QWORD *)a1[8202]);
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 40) = 0;
  v50 = v4;
  *v4 = 0;
  v5 = v1[794];
  for (i = v1[795]; v5 != i; v5 += 8016)
  {
    if (*(_BYTE *)(v5 + 7680) && sub_20FC04C2C(v1, *(_DWORD *)(v5 + 7672), *(_DWORD *)(v5 + 7676)))
    {
      v13 = *(_DWORD *)(v5 + 8);
      v14 = v50;
      while (1)
      {
        v15 = *v14;
        v16 = v14;
        if (!*v14)
          break;
        while (1)
        {
          v14 = (uint64_t **)v15;
          v17 = *((_DWORD *)v15 + 8);
          if (v17 > v13)
            break;
          if (v17 >= v13)
            goto LABEL_4;
          v15 = v14[1];
          if (!v15)
          {
            v16 = v14 + 1;
            goto LABEL_14;
          }
        }
      }
LABEL_14:
      v18 = v1;
      v19 = v3;
      v20 = (uint64_t *)v14;
      v14 = (uint64_t **)operator new(0xED0uLL);
      *((_DWORD *)v14 + 8) = v13;
      bzero(v14 + 5, 0x798uLL);
      *((_BYTE *)v14 + 1976) = 1;
      v14[246] = (uint64_t *)&off_24CA00398;
      bzero(v14 + 249, 0x6F8uLL);
      v14[248] = (uint64_t *)0x3FF0000000000000;
      v14[264] = (uint64_t *)0x3FF0000000000000;
      v14[280] = (uint64_t *)0x3FF0000000000000;
      v14[296] = (uint64_t *)0x3FF0000000000000;
      v14[312] = (uint64_t *)0x3FF0000000000000;
      v14[328] = (uint64_t *)0x3FF0000000000000;
      v14[344] = (uint64_t *)0x3FF0000000000000;
      v14[360] = (uint64_t *)0x3FF0000000000000;
      v14[376] = (uint64_t *)0x3FF0000000000000;
      v14[392] = (uint64_t *)0x3FF0000000000000;
      v14[408] = (uint64_t *)0x3FF0000000000000;
      v14[424] = (uint64_t *)0x3FF0000000000000;
      v14[440] = (uint64_t *)0x3FF0000000000000;
      v14[456] = (uint64_t *)0x3FF0000000000000;
      v14[472] = (uint64_t *)0x3FF0000000000000;
      v14[473] = (uint64_t *)-1;
      *v14 = 0;
      v14[1] = 0;
      v14[2] = v20;
      v3 = v19;
      *v16 = (uint64_t *)v14;
      v21 = (uint64_t *)v14;
      v22 = (_QWORD *)**v19;
      if (v22)
      {
        *v19 = v22;
        v21 = *v16;
      }
      sub_20E868578(*(uint64_t **)(v2 + 32), v21);
      ++*(_QWORD *)(v2 + 40);
      v1 = v18;
LABEL_4:
      memcpy(v14 + 5, (const void *)(v5 + 3928), 0x708uLL);
      v7 = *(_OWORD *)(v5 + 5728);
      v8 = *(_OWORD *)(v5 + 5744);
      v9 = *(_OWORD *)(v5 + 5760);
      *((_OWORD *)v14 + 118) = *(_OWORD *)(v5 + 5776);
      *((_OWORD *)v14 + 117) = v9;
      *((_OWORD *)v14 + 116) = v8;
      *((_OWORD *)v14 + 115) = v7;
      v10 = *(_OWORD *)(v5 + 5792);
      v11 = *(_OWORD *)(v5 + 5808);
      v12 = *(_OWORD *)(v5 + 5824);
      v14[244] = *(uint64_t **)(v5 + 5840);
      *((_OWORD *)v14 + 121) = v12;
      *((_OWORD *)v14 + 120) = v11;
      *((_OWORD *)v14 + 119) = v10;
      *((_BYTE *)v14 + 1960) = *(_BYTE *)(v5 + 5848);
      *((_BYTE *)v14 + 1976) = *(_BYTE *)(v5 + 5864);
      memcpy(v14 + 248, (const void *)(v5 + 5872), 0x710uLL);
      i = v1[795];
    }
  }
  v23 = (char **)(v2 + 8);
  sub_20F89E9C8(v2, *(_QWORD **)(v2 + 8));
  *(_QWORD *)v2 = v2 + 8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v24 = v1[1];
  v25 = *(_QWORD **)(v24 + 48);
  v26 = (_QWORD *)(v24 + 56);
  if (v25 != (_QWORD *)(v24 + 56))
  {
    do
    {
      v27 = (char *)v25[6];
      v28 = *((_DWORD *)v25 + 10);
      v29 = (uint64_t **)(v2 + 8);
      v30 = (char *)(v2 + 8);
      v31 = *v23;
      if (*v23)
      {
        while (1)
        {
          while (1)
          {
            v30 = v31;
            v32 = *((_DWORD *)v31 + 8);
            if (v28 >= v32)
              break;
            v31 = *(char **)v30;
            v29 = (uint64_t **)v30;
            if (!*(_QWORD *)v30)
              goto LABEL_26;
          }
          if (v32 >= v28)
            break;
          v31 = (char *)*((_QWORD *)v30 + 1);
          if (!v31)
          {
            v29 = (uint64_t **)(v30 + 8);
            goto LABEL_26;
          }
        }
      }
      else
      {
LABEL_26:
        v33 = v30;
        v30 = (char *)operator new(0x368uLL);
        *((_DWORD *)v30 + 8) = v28;
        bzero(v30 + 40, 0x338uLL);
        *((_QWORD *)v30 + 108) = 0xBFF0000000000000;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = v33;
        *v29 = (uint64_t *)v30;
        v34 = **(_QWORD **)v2;
        v35 = (uint64_t *)v30;
        if (v34)
        {
          *(_QWORD *)v2 = v34;
          v35 = *v29;
        }
        sub_20E868578(*(uint64_t **)(v2 + 8), v35);
        ++*(_QWORD *)(v2 + 16);
      }
      v36 = *(_OWORD *)v27;
      v37 = *((_OWORD *)v27 + 1);
      *(_OWORD *)(v30 + 72) = *((_OWORD *)v27 + 2);
      *(_OWORD *)(v30 + 56) = v37;
      *(_OWORD *)(v30 + 40) = v36;
      v38 = *((_OWORD *)v27 + 3);
      v39 = *((_OWORD *)v27 + 4);
      v40 = *((_OWORD *)v27 + 5);
      *(_OWORD *)(v30 + 136) = *((_OWORD *)v27 + 6);
      *(_OWORD *)(v30 + 120) = v40;
      *(_OWORD *)(v30 + 104) = v39;
      *(_OWORD *)(v30 + 88) = v38;
      v41 = *((_OWORD *)v27 + 7);
      v42 = *((_OWORD *)v27 + 8);
      v43 = *((_OWORD *)v27 + 9);
      *((_QWORD *)v30 + 25) = *((_QWORD *)v27 + 20);
      *(_OWORD *)(v30 + 184) = v43;
      *(_OWORD *)(v30 + 168) = v42;
      *(_OWORD *)(v30 + 152) = v41;
      memcpy(v30 + 208, v27 + 168, 0x120uLL);
      memcpy(v30 + 496, v27 + 456, 0x120uLL);
      if (v30 + 40 != v27)
        sub_20EE62A1C((char **)v30 + 98, *((_QWORD *)v27 + 93), *((_QWORD *)v27 + 94), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v27 + 94) - *((_QWORD *)v27 + 93)) >> 3));
      v44 = *((_OWORD *)v27 + 48);
      *((_QWORD *)v30 + 103) = *((_QWORD *)v27 + 98);
      *(_OWORD *)(v30 + 808) = v44;
      v45 = *(_OWORD *)(v27 + 792);
      *((_QWORD *)v30 + 106) = *((_QWORD *)v27 + 101);
      *((_OWORD *)v30 + 52) = v45;
      *(_OWORD *)(v30 + 856) = *((_OWORD *)v27 + 51);
      v46 = (_QWORD *)v25[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v25[2];
          v48 = *v47 == (_QWORD)v25;
          v25 = v47;
        }
        while (!v48);
      }
      v25 = v47;
    }
    while (v47 != v26);
    v24 = v1[1];
  }
  return sub_20FBEE4FC((uint64_t)(v1 + 7987), v24 + 72);
}

BOOL sub_20FC04C2C(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  _BOOL8 result;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  char *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;

  v3 = a1[707];
  if (a1[708] == v3 || *(_DWORD *)v3 || !*(_BYTE *)(*(_QWORD *)(v3 + 8) + 40))
    return 0;
  v5 = (char *)a1[647];
  v6 = (char *)a1[648];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (v6 - v5) >> 4;
    v7 = (char *)a1[647];
    do
    {
      v9 = v8 >> 1;
      v10 = (unsigned int *)&v7[16 * (v8 >> 1)];
      v12 = *v10;
      v11 = (char *)(v10 + 4);
      v8 += ~(v8 >> 1);
      if (v12 < a2)
        v7 = v11;
      else
        v8 = v9;
    }
    while (v8);
  }
  if (v7 == v6 || *(_DWORD *)v7 != a2)
    v7 = (char *)a1[648];
  v13 = (char *)a1[659];
  v14 = (char *)a1[660];
  v15 = v13;
  if (v14 != v13)
  {
    v16 = (v14 - v13) >> 4;
    v15 = (char *)a1[659];
    do
    {
      v17 = v16 >> 1;
      v18 = (unsigned int *)&v15[16 * (v16 >> 1)];
      v20 = *v18;
      v19 = (char *)(v18 + 4);
      v16 += ~(v16 >> 1);
      if (v20 < a2)
        v15 = v19;
      else
        v16 = v17;
    }
    while (v16);
  }
  if (v15 == v14)
    return 0;
  result = 0;
  if (v7 != v6 && *(_DWORD *)v15 == a2)
  {
    if (!*(_BYTE *)(*((_QWORD *)v7 + 1) + 128) || !*(_BYTE *)(*((_QWORD *)v15 + 1) + 104))
      return 0;
    if (v6 != v5)
    {
      v21 = (v6 - v5) >> 4;
      do
      {
        v22 = v21 >> 1;
        v23 = (unsigned int *)&v5[16 * (v21 >> 1)];
        v25 = *v23;
        v24 = (char *)(v23 + 4);
        v21 += ~(v21 >> 1);
        if (v25 < a3)
          v5 = v24;
        else
          v21 = v22;
      }
      while (v21);
    }
    if (v5 == v6 || *(_DWORD *)v5 != a3)
      v5 = v6;
    if (v14 != v13)
    {
      v26 = (v14 - v13) >> 4;
      do
      {
        v27 = v26 >> 1;
        v28 = (unsigned int *)&v13[16 * (v26 >> 1)];
        v30 = *v28;
        v29 = (char *)(v28 + 4);
        v26 += ~(v26 >> 1);
        if (v30 < a3)
          v13 = v29;
        else
          v26 = v27;
      }
      while (v26);
    }
    if (v13 == v14)
      return 0;
    result = 0;
    if (v5 != v6 && *(_DWORD *)v13 == a3)
    {
      if (*(_BYTE *)(*((_QWORD *)v5 + 1) + 128))
        return *(_BYTE *)(*((_QWORD *)v13 + 1) + 104) != 0;
      return 0;
    }
  }
  return result;
}

void sub_20FC04DE0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FC05354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FC05378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC0538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

double sub_20FC053E4(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)a1 = &off_24CA03B08;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &off_24CA03B80;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 288) = &off_24CA03B08;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 532) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = &off_24CA03B08;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_QWORD *)(a1 + 576) = &off_24CA039A0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 820) = 0u;
  *(_QWORD *)(a1 + 720) = &off_24CA03A90;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 964) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1252) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1396) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1540) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_QWORD *)(a1 + 1440) = &off_24CA03D60;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1684) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_QWORD *)(a1 + 1584) = &off_24CA03DD8;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1828) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_QWORD *)(a1 + 1728) = &off_24CA03D60;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 1972) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_QWORD *)(a1 + 1872) = &off_24CA03D60;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2116) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_QWORD *)(a1 + 2016) = &off_24CA03BF8;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2260) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_QWORD *)(a1 + 2160) = &off_24CA03CE8;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2404) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_QWORD *)(a1 + 2304) = &off_24CA03BF8;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2548) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_QWORD *)(a1 + 2448) = &off_24CA03C70;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2692) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_QWORD *)(a1 + 2592) = &off_24CA03C70;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2836) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_QWORD *)(a1 + 2736) = &off_24CA03BF8;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 2980) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_QWORD *)(a1 + 2880) = &off_24CA03B08;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3124) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_QWORD *)(a1 + 3024) = &off_24CA03B80;
  *(_OWORD *)(a1 + 3288) = 0u;
  *(_OWORD *)(a1 + 3268) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3256) = 0u;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_QWORD *)(a1 + 3168) = &off_24CA03B08;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3412) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_QWORD *)(a1 + 3312) = &off_24CA03B08;
  *(_OWORD *)(a1 + 3576) = 0u;
  *(_OWORD *)(a1 + 3556) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3700) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_OWORD *)(a1 + 3688) = 0u;
  *(_OWORD *)(a1 + 3640) = 0u;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3608) = 0u;
  *(_OWORD *)(a1 + 3624) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3844) = 0u;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3784) = 0u;
  *(_OWORD *)(a1 + 3800) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_OWORD *)(a1 + 3988) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4132) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_OWORD *)(a1 + 4276) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4420) = 0u;
  *(_OWORD *)(a1 + 4392) = 0u;
  *(_OWORD *)(a1 + 4408) = 0u;
  *(_OWORD *)(a1 + 4360) = 0u;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(_QWORD *)(a1 + 4320) = &off_24CA03B08;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 4564) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4504) = 0u;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_QWORD *)(a1 + 4464) = &off_24CA03B80;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_OWORD *)(a1 + 4708) = 0u;
  *(_OWORD *)(a1 + 4680) = 0u;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_OWORD *)(a1 + 4664) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_QWORD *)(a1 + 4608) = &off_24CA03B08;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 4852) = 0u;
  *(_OWORD *)(a1 + 4824) = 0u;
  *(_OWORD *)(a1 + 4840) = 0u;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(_OWORD *)(a1 + 4808) = 0u;
  *(_OWORD *)(a1 + 4760) = 0u;
  *(_OWORD *)(a1 + 4776) = 0u;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_QWORD *)(a1 + 4752) = &off_24CA03B08;
  *(_QWORD *)(a1 + 7344) = &off_24CA03928;
  *(_OWORD *)(a1 + 7732) = 0u;
  *(_OWORD *)(a1 + 7704) = 0u;
  *(_OWORD *)(a1 + 7720) = 0u;
  *(_OWORD *)(a1 + 7672) = 0u;
  *(_OWORD *)(a1 + 7688) = 0u;
  *(_OWORD *)(a1 + 7640) = 0u;
  *(_OWORD *)(a1 + 7656) = 0u;
  *(_OWORD *)(a1 + 7876) = 0u;
  *(_OWORD *)(a1 + 7848) = 0u;
  *(_OWORD *)(a1 + 7864) = 0u;
  *(_OWORD *)(a1 + 7816) = 0u;
  *(_OWORD *)(a1 + 7832) = 0u;
  *(_OWORD *)(a1 + 7784) = 0u;
  *(_OWORD *)(a1 + 7800) = 0u;
  *(_OWORD *)(a1 + 8020) = 0u;
  *(_OWORD *)(a1 + 7992) = 0u;
  *(_OWORD *)(a1 + 8008) = 0u;
  *(_OWORD *)(a1 + 7960) = 0u;
  *(_OWORD *)(a1 + 7976) = 0u;
  *(_OWORD *)(a1 + 7928) = 0u;
  *(_OWORD *)(a1 + 7944) = 0u;
  *(_QWORD *)(a1 + 7920) = &off_24CA03838;
  *(_OWORD *)(a1 + 8164) = 0u;
  *(_OWORD *)(a1 + 8136) = 0u;
  *(_OWORD *)(a1 + 8152) = 0u;
  *(_OWORD *)(a1 + 8104) = 0u;
  *(_OWORD *)(a1 + 8120) = 0u;
  *(_OWORD *)(a1 + 8072) = 0u;
  *(_OWORD *)(a1 + 8088) = 0u;
  *(_OWORD *)(a1 + 8308) = 0u;
  *(_OWORD *)(a1 + 8280) = 0u;
  *(_OWORD *)(a1 + 8296) = 0u;
  *(_OWORD *)(a1 + 8248) = 0u;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_OWORD *)(a1 + 8216) = 0u;
  *(_OWORD *)(a1 + 8232) = 0u;
  *(_OWORD *)(a1 + 10520) = 0u;
  *(_OWORD *)(a1 + 10536) = 0u;
  *(_QWORD *)(a1 + 10512) = &off_24CA03658;
  *(_QWORD *)(a1 + 10792) = 0;
  *(_QWORD *)(a1 + 10784) = 0;
  *(_QWORD *)(a1 + 10776) = 0;
  *(_OWORD *)(a1 + 10612) = 0u;
  *(_OWORD *)(a1 + 10584) = 0u;
  *(_OWORD *)(a1 + 10600) = 0u;
  *(_OWORD *)(a1 + 10552) = 0u;
  *(_OWORD *)(a1 + 10568) = 0u;
  *(_QWORD *)(a1 + 10368) = &off_24CA03658;
  *(_QWORD *)(a1 + 10648) = 0;
  *(_QWORD *)(a1 + 10640) = 0;
  *(_QWORD *)(a1 + 10632) = 0;
  *(_OWORD *)(a1 + 10408) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_OWORD *)(a1 + 10376) = 0u;
  *(_OWORD *)(a1 + 10392) = 0u;
  *(_QWORD *)(a1 + 10488) = 0;
  *(_OWORD *)(a1 + 10468) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10232) = 0u;
  *(_OWORD *)(a1 + 10248) = 0u;
  *(_QWORD *)(a1 + 10224) = &off_24CA036D0;
  *(_QWORD *)(a1 + 10504) = 0;
  *(_QWORD *)(a1 + 10496) = 0;
  *(_OWORD *)(a1 + 8884) = 0u;
  *(_OWORD *)(a1 + 10324) = 0u;
  *(_OWORD *)(a1 + 10296) = 0u;
  *(_OWORD *)(a1 + 10312) = 0u;
  *(_OWORD *)(a1 + 10264) = 0u;
  *(_OWORD *)(a1 + 10280) = 0u;
  *(_OWORD *)(a1 + 8856) = 0u;
  *(_OWORD *)(a1 + 8872) = 0u;
  *(_QWORD *)(a1 + 10080) = &off_24CA03658;
  *(_QWORD *)(a1 + 10360) = 0;
  *(_QWORD *)(a1 + 10352) = 0;
  *(_QWORD *)(a1 + 10344) = 0;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(_OWORD *)(a1 + 10104) = 0u;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10088) = 0u;
  *(_OWORD *)(a1 + 10180) = 0u;
  *(_OWORD *)(a1 + 10168) = 0u;
  *(_QWORD *)(a1 + 10208) = 0;
  *(_QWORD *)(a1 + 10200) = 0;
  *(_OWORD *)(a1 + 10036) = 0u;
  *(_OWORD *)(a1 + 9944) = 0u;
  *(_OWORD *)(a1 + 9960) = 0u;
  *(_QWORD *)(a1 + 9936) = &off_24CA03220;
  *(_QWORD *)(a1 + 10216) = 0;
  *(_OWORD *)(a1 + 10008) = 0u;
  *(_OWORD *)(a1 + 10024) = 0u;
  *(_OWORD *)(a1 + 9976) = 0u;
  *(_OWORD *)(a1 + 9992) = 0u;
  *(_OWORD *)(a1 + 9800) = 0u;
  *(_OWORD *)(a1 + 9816) = 0u;
  *(_QWORD *)(a1 + 9792) = &off_24CA03310;
  *(_QWORD *)(a1 + 10072) = 0;
  *(_QWORD *)(a1 + 10064) = 0;
  *(_QWORD *)(a1 + 10056) = 0;
  *(_OWORD *)(a1 + 9892) = 0u;
  *(_OWORD *)(a1 + 9864) = 0u;
  *(_OWORD *)(a1 + 9880) = 0u;
  *(_OWORD *)(a1 + 9832) = 0u;
  *(_OWORD *)(a1 + 9848) = 0u;
  *(_OWORD *)(a1 + 9748) = 0u;
  *(_QWORD *)(a1 + 9648) = &off_24CA03310;
  *(_QWORD *)(a1 + 9928) = 0;
  *(_QWORD *)(a1 + 9920) = 0;
  *(_QWORD *)(a1 + 9912) = 0;
  *(_OWORD *)(a1 + 9720) = 0u;
  *(_OWORD *)(a1 + 9736) = 0u;
  *(_OWORD *)(a1 + 9688) = 0u;
  *(_OWORD *)(a1 + 9704) = 0u;
  *(_OWORD *)(a1 + 9656) = 0u;
  *(_OWORD *)(a1 + 9672) = 0u;
  *(_OWORD *)(a1 + 9604) = 0u;
  *(_QWORD *)(a1 + 9784) = 0;
  *(_QWORD *)(a1 + 9776) = 0;
  *(_QWORD *)(a1 + 9768) = 0;
  *(_OWORD *)(a1 + 9576) = 0u;
  *(_OWORD *)(a1 + 9592) = 0u;
  *(_OWORD *)(a1 + 9544) = 0u;
  *(_OWORD *)(a1 + 9560) = 0u;
  *(_OWORD *)(a1 + 9512) = 0u;
  *(_OWORD *)(a1 + 9528) = 0u;
  *(_QWORD *)(a1 + 9504) = &off_24CA03220;
  *(_QWORD *)(a1 + 9632) = 0;
  *(_QWORD *)(a1 + 9624) = 0;
  *(_OWORD *)(a1 + 9400) = 0u;
  *(_OWORD *)(a1 + 9416) = 0u;
  *(_OWORD *)(a1 + 9368) = 0u;
  *(_OWORD *)(a1 + 9384) = 0u;
  *(_QWORD *)(a1 + 9360) = &off_24CA03388;
  *(_QWORD *)(a1 + 9640) = 0;
  *(_OWORD *)(a1 + 8824) = 0u;
  *(_OWORD *)(a1 + 8840) = 0u;
  *(_OWORD *)(a1 + 9460) = 0u;
  *(_OWORD *)(a1 + 9432) = 0u;
  *(_OWORD *)(a1 + 9448) = 0u;
  *(_QWORD *)(a1 + 9480) = 0;
  *(_OWORD *)(a1 + 9224) = 0u;
  *(_OWORD *)(a1 + 9240) = 0u;
  *(_QWORD *)(a1 + 9216) = &off_24CA03220;
  *(_QWORD *)(a1 + 9496) = 0;
  *(_QWORD *)(a1 + 9488) = 0;
  *(_OWORD *)(a1 + 9316) = 0u;
  *(_OWORD *)(a1 + 9288) = 0u;
  *(_OWORD *)(a1 + 9304) = 0u;
  *(_OWORD *)(a1 + 9256) = 0u;
  *(_OWORD *)(a1 + 9272) = 0u;
  *(_OWORD *)(a1 + 9172) = 0u;
  *(_QWORD *)(a1 + 9072) = &off_24CA03400;
  *(_QWORD *)(a1 + 9352) = 0;
  *(_QWORD *)(a1 + 9344) = 0;
  *(_QWORD *)(a1 + 9336) = 0;
  *(_OWORD *)(a1 + 9144) = 0u;
  *(_OWORD *)(a1 + 9160) = 0u;
  *(_OWORD *)(a1 + 9112) = 0u;
  *(_OWORD *)(a1 + 9128) = 0u;
  *(_OWORD *)(a1 + 9080) = 0u;
  *(_OWORD *)(a1 + 9096) = 0u;
  *(_OWORD *)(a1 + 8792) = 0u;
  *(_OWORD *)(a1 + 8808) = 0u;
  *(_QWORD *)(a1 + 8928) = &off_24CA03400;
  *(_QWORD *)(a1 + 9208) = 0;
  *(_QWORD *)(a1 + 9200) = 0;
  *(_QWORD *)(a1 + 9192) = 0;
  *(_OWORD *)(a1 + 8968) = 0u;
  *(_OWORD *)(a1 + 8984) = 0u;
  *(_OWORD *)(a1 + 8936) = 0u;
  *(_OWORD *)(a1 + 8952) = 0u;
  *(_QWORD *)(a1 + 9048) = 0;
  *(_OWORD *)(a1 + 9028) = 0u;
  *(_OWORD *)(a1 + 9000) = 0u;
  *(_OWORD *)(a1 + 9016) = 0u;
  *(_OWORD *)(a1 + 8740) = 0u;
  *(_QWORD *)(a1 + 8784) = &off_24CA03478;
  *(_QWORD *)(a1 + 9064) = 0;
  *(_QWORD *)(a1 + 9056) = 0;
  *(_OWORD *)(a1 + 8712) = 0u;
  *(_OWORD *)(a1 + 8728) = 0u;
  *(_OWORD *)(a1 + 8680) = 0u;
  *(_OWORD *)(a1 + 8696) = 0u;
  *(_QWORD *)(a1 + 8904) = 0;
  *(_OWORD *)(a1 + 8648) = 0u;
  *(_OWORD *)(a1 + 8664) = 0u;
  *(_QWORD *)(a1 + 8640) = &off_24CA03400;
  *(_QWORD *)(a1 + 8920) = 0;
  *(_QWORD *)(a1 + 8912) = 0;
  *(_OWORD *)(a1 + 8452) = 0u;
  *(_OWORD *)(a1 + 8424) = 0u;
  *(_OWORD *)(a1 + 8440) = 0u;
  *(_OWORD *)(a1 + 8392) = 0u;
  *(_OWORD *)(a1 + 8408) = 0u;
  *(_OWORD *)(a1 + 8360) = 0u;
  *(_OWORD *)(a1 + 8376) = 0u;
  *(_QWORD *)(a1 + 8496) = &off_24CA03748;
  *(_QWORD *)(a1 + 8776) = 0;
  *(_QWORD *)(a1 + 8768) = 0;
  *(_QWORD *)(a1 + 8760) = 0;
  *(_OWORD *)(a1 + 8596) = 0u;
  *(_OWORD *)(a1 + 8536) = 0u;
  *(_OWORD *)(a1 + 8552) = 0u;
  *(_OWORD *)(a1 + 8504) = 0u;
  *(_OWORD *)(a1 + 8520) = 0u;
  *(_OWORD *)(a1 + 8568) = 0u;
  *(_OWORD *)(a1 + 8584) = 0u;
  *(_QWORD *)(a1 + 8624) = 0;
  *(_QWORD *)(a1 + 8616) = 0;
  *(_QWORD *)(a1 + 864) = &off_24CA039A0;
  *(_QWORD *)(a1 + 8208) = &off_24CA037C0;
  *(_QWORD *)(a1 + 8352) = &off_24CA037C0;
  *(_QWORD *)(a1 + 8632) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1008) = &off_24CA03A18;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 8488) = 0;
  *(_QWORD *)(a1 + 8480) = 0;
  *(_QWORD *)(a1 + 8472) = 0;
  *(_QWORD *)(a1 + 1152) = &off_24CA03A18;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_QWORD *)(a1 + 1296) = &off_24CA039A0;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_QWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 8064) = &off_24CA03748;
  *(_QWORD *)(a1 + 8344) = 0;
  *(_QWORD *)(a1 + 8336) = 0;
  *(_QWORD *)(a1 + 8328) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2728) = 0;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 8184) = 0;
  *(_QWORD *)(a1 + 3016) = 0;
  *(_QWORD *)(a1 + 3160) = 0;
  *(_QWORD *)(a1 + 3304) = 0;
  *(_QWORD *)(a1 + 3448) = 0;
  *(_QWORD *)(a1 + 8200) = 0;
  *(_QWORD *)(a1 + 0x2000) = 0;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_QWORD *)(a1 + 3456) = &off_24CA039A0;
  *(_QWORD *)(a1 + 3736) = 0;
  *(_QWORD *)(a1 + 8056) = 0;
  *(_QWORD *)(a1 + 8048) = 0;
  *(_QWORD *)(a1 + 8040) = 0;
  *(_QWORD *)(a1 + 3600) = &off_24CA03A90;
  *(_QWORD *)(a1 + 3880) = 0;
  *(_QWORD *)(a1 + 3744) = &off_24CA039A0;
  *(_QWORD *)(a1 + 4024) = 0;
  *(_QWORD *)(a1 + 3888) = &off_24CA03A18;
  *(_QWORD *)(a1 + 7776) = &off_24CA03748;
  *(_QWORD *)(a1 + 7632) = &off_24CA038B0;
  *(_QWORD *)(a1 + 7912) = 0;
  *(_QWORD *)(a1 + 7904) = 0;
  *(_QWORD *)(a1 + 7896) = 0;
  *(_QWORD *)(a1 + 4168) = 0;
  *(_QWORD *)(a1 + 4032) = &off_24CA03A18;
  *(_QWORD *)(a1 + 4312) = 0;
  *(_QWORD *)(a1 + 4176) = &off_24CA039A0;
  *(_QWORD *)(a1 + 4456) = 0;
  *(_QWORD *)(a1 + 4600) = 0;
  *(_QWORD *)(a1 + 7200) = &off_24CA038B0;
  *(_QWORD *)(a1 + 7488) = &off_24CA038B0;
  *(_QWORD *)(a1 + 7768) = 0;
  *(_QWORD *)(a1 + 7760) = 0;
  *(_QWORD *)(a1 + 7752) = 0;
  *(_OWORD *)(a1 + 7544) = 0u;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_OWORD *)(a1 + 7512) = 0u;
  *(_OWORD *)(a1 + 7528) = 0u;
  *(_OWORD *)(a1 + 7496) = 0u;
  *(_QWORD *)(a1 + 4744) = 0;
  *(_QWORD *)(a1 + 7624) = 0;
  *(_QWORD *)(a1 + 7616) = 0;
  *(_QWORD *)(a1 + 7608) = 0;
  *(_OWORD *)(a1 + 7588) = 0u;
  *(_OWORD *)(a1 + 7576) = 0u;
  *(_OWORD *)(a1 + 7384) = 0u;
  *(_OWORD *)(a1 + 7400) = 0u;
  *(_OWORD *)(a1 + 7352) = 0u;
  *(_OWORD *)(a1 + 7368) = 0u;
  *(_OWORD *)(a1 + 7444) = 0u;
  *(_OWORD *)(a1 + 7416) = 0u;
  *(_OWORD *)(a1 + 7432) = 0u;
  *(_QWORD *)(a1 + 7464) = 0;
  *(_OWORD *)(a1 + 7300) = 0u;
  *(_OWORD *)(a1 + 7272) = 0u;
  *(_OWORD *)(a1 + 7288) = 0u;
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_OWORD *)(a1 + 7224) = 0u;
  *(_QWORD *)(a1 + 7480) = 0;
  *(_QWORD *)(a1 + 7472) = 0;
  *(_OWORD *)(a1 + 7240) = 0u;
  *(_OWORD *)(a1 + 7256) = 0u;
  *(_QWORD *)(a1 + 7320) = 0;
  *(_OWORD *)(a1 + 7156) = 0u;
  *(_OWORD *)(a1 + 7064) = 0u;
  *(_OWORD *)(a1 + 7080) = 0u;
  *(_QWORD *)(a1 + 7056) = &off_24CA03220;
  *(_QWORD *)(a1 + 7336) = 0;
  *(_QWORD *)(a1 + 7328) = 0;
  *(_OWORD *)(a1 + 7128) = 0u;
  *(_OWORD *)(a1 + 7144) = 0u;
  *(_OWORD *)(a1 + 7096) = 0u;
  *(_OWORD *)(a1 + 7112) = 0u;
  *(_OWORD *)(a1 + 6920) = 0u;
  *(_OWORD *)(a1 + 6936) = 0u;
  *(_QWORD *)(a1 + 6912) = &off_24CA03310;
  *(_QWORD *)(a1 + 7192) = 0;
  *(_QWORD *)(a1 + 7184) = 0;
  *(_QWORD *)(a1 + 7176) = 0;
  *(_OWORD *)(a1 + 7012) = 0u;
  *(_OWORD *)(a1 + 6984) = 0u;
  *(_OWORD *)(a1 + 7000) = 0u;
  *(_OWORD *)(a1 + 6952) = 0u;
  *(_OWORD *)(a1 + 6968) = 0u;
  *(_OWORD *)(a1 + 6868) = 0u;
  *(_QWORD *)(a1 + 6768) = &off_24CA03310;
  *(_QWORD *)(a1 + 7048) = 0;
  *(_QWORD *)(a1 + 7040) = 0;
  *(_QWORD *)(a1 + 7032) = 0;
  *(_OWORD *)(a1 + 6840) = 0u;
  *(_OWORD *)(a1 + 6856) = 0u;
  *(_OWORD *)(a1 + 6808) = 0u;
  *(_OWORD *)(a1 + 6824) = 0u;
  *(_OWORD *)(a1 + 6776) = 0u;
  *(_OWORD *)(a1 + 6792) = 0u;
  *(_OWORD *)(a1 + 6724) = 0u;
  *(_QWORD *)(a1 + 6904) = 0;
  *(_QWORD *)(a1 + 6896) = 0;
  *(_QWORD *)(a1 + 6888) = 0;
  *(_OWORD *)(a1 + 6696) = 0u;
  *(_OWORD *)(a1 + 6712) = 0u;
  *(_OWORD *)(a1 + 6664) = 0u;
  *(_OWORD *)(a1 + 6680) = 0u;
  *(_OWORD *)(a1 + 6632) = 0u;
  *(_OWORD *)(a1 + 6648) = 0u;
  *(_QWORD *)(a1 + 6624) = &off_24CA03220;
  *(_OWORD *)(a1 + 6580) = 0u;
  *(_QWORD *)(a1 + 6752) = 0;
  *(_QWORD *)(a1 + 6744) = 0;
  *(_OWORD *)(a1 + 6552) = 0u;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6504) = 0u;
  *(_QWORD *)(a1 + 6480) = &off_24CA03388;
  *(_QWORD *)(a1 + 6760) = 0;
  *(_OWORD *)(a1 + 6520) = 0u;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_OWORD *)(a1 + 6436) = 0u;
  *(_QWORD *)(a1 + 6600) = 0;
  *(_OWORD *)(a1 + 6408) = 0u;
  *(_OWORD *)(a1 + 6424) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_QWORD *)(a1 + 6336) = &off_24CA03220;
  *(_QWORD *)(a1 + 6616) = 0;
  *(_QWORD *)(a1 + 6608) = 0;
  *(_OWORD *)(a1 + 6376) = 0u;
  *(_OWORD *)(a1 + 6392) = 0u;
  *(_QWORD *)(a1 + 6456) = 0;
  *(_OWORD *)(a1 + 6292) = 0u;
  *(_OWORD *)(a1 + 6200) = 0u;
  *(_OWORD *)(a1 + 6216) = 0u;
  *(_QWORD *)(a1 + 6192) = &off_24CA03400;
  *(_QWORD *)(a1 + 6472) = 0;
  *(_QWORD *)(a1 + 6464) = 0;
  *(_OWORD *)(a1 + 6264) = 0u;
  *(_OWORD *)(a1 + 6280) = 0u;
  *(_OWORD *)(a1 + 6232) = 0u;
  *(_OWORD *)(a1 + 6248) = 0u;
  *(_OWORD *)(a1 + 6056) = 0u;
  *(_OWORD *)(a1 + 6072) = 0u;
  *(_QWORD *)(a1 + 6048) = &off_24CA03400;
  *(_QWORD *)(a1 + 6328) = 0;
  *(_QWORD *)(a1 + 6320) = 0;
  *(_QWORD *)(a1 + 6312) = 0;
  *(_OWORD *)(a1 + 6148) = 0u;
  *(_OWORD *)(a1 + 6120) = 0u;
  *(_OWORD *)(a1 + 6136) = 0u;
  *(_OWORD *)(a1 + 6088) = 0u;
  *(_OWORD *)(a1 + 6104) = 0u;
  *(_OWORD *)(a1 + 6004) = 0u;
  *(_QWORD *)(a1 + 5904) = &off_24CA03478;
  *(_QWORD *)(a1 + 6184) = 0;
  *(_QWORD *)(a1 + 6176) = 0;
  *(_QWORD *)(a1 + 6168) = 0;
  *(_OWORD *)(a1 + 5976) = 0u;
  *(_OWORD *)(a1 + 5992) = 0u;
  *(_OWORD *)(a1 + 5944) = 0u;
  *(_OWORD *)(a1 + 5960) = 0u;
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_OWORD *)(a1 + 5928) = 0u;
  *(_OWORD *)(a1 + 5860) = 0u;
  *(_QWORD *)(a1 + 6040) = 0;
  *(_QWORD *)(a1 + 6032) = 0;
  *(_QWORD *)(a1 + 6024) = 0;
  *(_OWORD *)(a1 + 5832) = 0u;
  *(_OWORD *)(a1 + 5848) = 0u;
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_OWORD *)(a1 + 5816) = 0u;
  *(_OWORD *)(a1 + 5768) = 0u;
  *(_OWORD *)(a1 + 5784) = 0u;
  *(_QWORD *)(a1 + 5760) = &off_24CA03400;
  *(_QWORD *)(a1 + 5896) = 0;
  *(_QWORD *)(a1 + 5888) = 0;
  *(_QWORD *)(a1 + 5880) = 0;
  *(_OWORD *)(a1 + 5716) = 0u;
  *(_OWORD *)(a1 + 5656) = 0u;
  *(_OWORD *)(a1 + 5672) = 0u;
  *(_OWORD *)(a1 + 5624) = 0u;
  *(_OWORD *)(a1 + 5640) = 0u;
  *(_QWORD *)(a1 + 5616) = &off_24CA039A0;
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_OWORD *)(a1 + 5704) = 0u;
  *(_QWORD *)(a1 + 5744) = 0;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_OWORD *)(a1 + 5512) = 0u;
  *(_OWORD *)(a1 + 5528) = 0u;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_QWORD *)(a1 + 5472) = &off_24CA03A18;
  *(_QWORD *)(a1 + 5752) = 0;
  *(_QWORD *)(a1 + 4888) = 0;
  *(_OWORD *)(a1 + 5572) = 0u;
  *(_OWORD *)(a1 + 5544) = 0u;
  *(_OWORD *)(a1 + 5560) = 0u;
  *(_QWORD *)(a1 + 5592) = 0;
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_QWORD *)(a1 + 5328) = &off_24CA03A18;
  *(_QWORD *)(a1 + 5608) = 0;
  *(_QWORD *)(a1 + 5600) = 0;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5368) = 0u;
  *(_QWORD *)(a1 + 5184) = &off_24CA039A0;
  *(_QWORD *)(a1 + 5464) = 0;
  *(_OWORD *)(a1 + 5428) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5284) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_QWORD *)(a1 + 5320) = 0;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_QWORD *)(a1 + 5040) = &off_24CA03A90;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5140) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_QWORD *)(a1 + 4896) = &off_24CA039A0;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_QWORD *)(a1 + 5176) = 0;
  *(_QWORD *)(a1 + 5032) = 0;
  *(_OWORD *)(a1 + 4996) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 10756) = 0u;
  *(_OWORD *)(a1 + 10728) = 0u;
  *(_OWORD *)(a1 + 10744) = 0u;
  *(_OWORD *)(a1 + 10696) = 0u;
  *(_OWORD *)(a1 + 10712) = 0u;
  *(_OWORD *)(a1 + 10664) = 0u;
  *(_OWORD *)(a1 + 10680) = 0u;
  *(_QWORD *)(a1 + 10656) = &off_24CA034F0;
  *(_QWORD *)(a1 + 10936) = 0;
  *(_QWORD *)(a1 + 10928) = 0;
  *(_QWORD *)(a1 + 10920) = 0;
  *(_OWORD *)(a1 + 10900) = 0u;
  *(_OWORD *)(a1 + 10872) = 0u;
  *(_OWORD *)(a1 + 10888) = 0u;
  *(_OWORD *)(a1 + 10840) = 0u;
  *(_OWORD *)(a1 + 10856) = 0u;
  *(_OWORD *)(a1 + 10808) = 0u;
  *(_OWORD *)(a1 + 10824) = 0u;
  *(_QWORD *)(a1 + 10800) = &off_24CA035E0;
  *(_QWORD *)(a1 + 11080) = 0;
  *(_QWORD *)(a1 + 11072) = 0;
  *(_QWORD *)(a1 + 11064) = 0;
  *(_OWORD *)(a1 + 11044) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 10984) = 0u;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 10952) = 0u;
  *(_OWORD *)(a1 + 10968) = 0u;
  *(_QWORD *)(a1 + 10944) = &off_24CA034F0;
  *(_QWORD *)(a1 + 11224) = 0;
  *(_QWORD *)(a1 + 11216) = 0;
  *(_QWORD *)(a1 + 11208) = 0;
  *(_OWORD *)(a1 + 11188) = 0u;
  *(_OWORD *)(a1 + 11160) = 0u;
  *(_OWORD *)(a1 + 11176) = 0u;
  *(_OWORD *)(a1 + 11128) = 0u;
  *(_OWORD *)(a1 + 11144) = 0u;
  *(_OWORD *)(a1 + 11096) = 0u;
  *(_OWORD *)(a1 + 11112) = 0u;
  *(_QWORD *)(a1 + 11088) = &off_24CA03568;
  *(_QWORD *)(a1 + 11368) = 0;
  *(_QWORD *)(a1 + 11360) = 0;
  *(_QWORD *)(a1 + 11352) = 0;
  *(_OWORD *)(a1 + 11332) = 0u;
  *(_OWORD *)(a1 + 11304) = 0u;
  *(_OWORD *)(a1 + 11320) = 0u;
  *(_OWORD *)(a1 + 11272) = 0u;
  *(_OWORD *)(a1 + 11288) = 0u;
  *(_OWORD *)(a1 + 11240) = 0u;
  *(_OWORD *)(a1 + 11256) = 0u;
  *(_QWORD *)(a1 + 11232) = &off_24CA03568;
  *(_QWORD *)(a1 + 11512) = 0;
  *(_QWORD *)(a1 + 11504) = 0;
  *(_QWORD *)(a1 + 11496) = 0;
  *(_OWORD *)(a1 + 11476) = 0u;
  *(_OWORD *)(a1 + 11448) = 0u;
  *(_OWORD *)(a1 + 11464) = 0u;
  *(_OWORD *)(a1 + 11416) = 0u;
  *(_OWORD *)(a1 + 11432) = 0u;
  *(_OWORD *)(a1 + 11384) = 0u;
  *(_OWORD *)(a1 + 11400) = 0u;
  *(_QWORD *)(a1 + 11376) = &off_24CA034F0;
  *(_QWORD *)(a1 + 11656) = 0;
  *(_QWORD *)(a1 + 11648) = 0;
  *(_QWORD *)(a1 + 11640) = 0;
  *(_OWORD *)(a1 + 11620) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11528) = 0u;
  *(_OWORD *)(a1 + 11544) = 0u;
  *(_QWORD *)(a1 + 11520) = &off_24CA03658;
  *(_QWORD *)(a1 + 11800) = 0;
  *(_QWORD *)(a1 + 11792) = 0;
  *(_QWORD *)(a1 + 11784) = 0;
  *(_OWORD *)(a1 + 11764) = 0u;
  *(_OWORD *)(a1 + 11736) = 0u;
  *(_OWORD *)(a1 + 11752) = 0u;
  *(_OWORD *)(a1 + 11704) = 0u;
  *(_OWORD *)(a1 + 11720) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(_OWORD *)(a1 + 11688) = 0u;
  *(_QWORD *)(a1 + 11664) = &off_24CA036D0;
  *(_QWORD *)(a1 + 11944) = 0;
  *(_QWORD *)(a1 + 11936) = 0;
  *(_QWORD *)(a1 + 11928) = 0;
  *(_OWORD *)(a1 + 11908) = 0u;
  *(_OWORD *)(a1 + 11880) = 0u;
  *(_OWORD *)(a1 + 11896) = 0u;
  *(_OWORD *)(a1 + 11848) = 0u;
  *(_OWORD *)(a1 + 11864) = 0u;
  *(_OWORD *)(a1 + 11816) = 0u;
  *(_OWORD *)(a1 + 11832) = 0u;
  *(_QWORD *)(a1 + 11808) = &off_24CA03658;
  *(_QWORD *)(a1 + 12088) = 0;
  *(_QWORD *)(a1 + 12080) = 0;
  *(_QWORD *)(a1 + 12072) = 0;
  *(_OWORD *)(a1 + 12052) = 0u;
  *(_OWORD *)(a1 + 12024) = 0u;
  *(_OWORD *)(a1 + 12040) = 0u;
  *(_OWORD *)(a1 + 11992) = 0u;
  *(_OWORD *)(a1 + 12008) = 0u;
  *(_OWORD *)(a1 + 11960) = 0u;
  *(_OWORD *)(a1 + 11976) = 0u;
  *(_QWORD *)(a1 + 11952) = &off_24CA03658;
  *(_QWORD *)(a1 + 12232) = 0;
  *(_QWORD *)(a1 + 12224) = 0;
  *(_QWORD *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12196) = 0u;
  *(_OWORD *)(a1 + 12168) = 0u;
  *(_OWORD *)(a1 + 12184) = 0u;
  *(_OWORD *)(a1 + 12136) = 0u;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(_OWORD *)(a1 + 12104) = 0u;
  *(_OWORD *)(a1 + 12120) = 0u;
  *(_QWORD *)(a1 + 12096) = &off_24CA034F0;
  *(_QWORD *)(a1 + 12376) = 0;
  *(_QWORD *)(a1 + 12368) = 0;
  *(_QWORD *)(a1 + 12360) = 0;
  *(_OWORD *)(a1 + 12340) = 0u;
  *(_OWORD *)(a1 + 12312) = 0u;
  *(_OWORD *)(a1 + 12328) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_OWORD *)(a1 + 12296) = 0u;
  *(_OWORD *)(a1 + 12248) = 0u;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_QWORD *)(a1 + 12240) = &off_24CA035E0;
  *(_QWORD *)(a1 + 12520) = 0;
  *(_QWORD *)(a1 + 12512) = 0;
  *(_QWORD *)(a1 + 12504) = 0;
  *(_OWORD *)(a1 + 12484) = 0u;
  *(_OWORD *)(a1 + 12456) = 0u;
  *(_OWORD *)(a1 + 12472) = 0u;
  *(_OWORD *)(a1 + 12424) = 0u;
  *(_OWORD *)(a1 + 12440) = 0u;
  *(_OWORD *)(a1 + 12392) = 0u;
  *(_OWORD *)(a1 + 12408) = 0u;
  *(_QWORD *)(a1 + 12384) = &off_24CA034F0;
  *(_QWORD *)(a1 + 12664) = 0;
  *(_QWORD *)(a1 + 12656) = 0;
  *(_QWORD *)(a1 + 12648) = 0;
  *(_OWORD *)(a1 + 12628) = 0u;
  *(_OWORD *)(a1 + 12600) = 0u;
  *(_OWORD *)(a1 + 12616) = 0u;
  *(_OWORD *)(a1 + 12568) = 0u;
  *(_OWORD *)(a1 + 12584) = 0u;
  *(_OWORD *)(a1 + 12536) = 0u;
  *(_OWORD *)(a1 + 12552) = 0u;
  *(_QWORD *)(a1 + 12528) = &off_24CA03568;
  *(_QWORD *)(a1 + 12808) = 0;
  *(_QWORD *)(a1 + 12800) = 0;
  *(_QWORD *)(a1 + 12792) = 0;
  *(_OWORD *)(a1 + 12772) = 0u;
  *(_OWORD *)(a1 + 12744) = 0u;
  *(_OWORD *)(a1 + 12760) = 0u;
  *(_OWORD *)(a1 + 12712) = 0u;
  *(_OWORD *)(a1 + 12728) = 0u;
  *(_OWORD *)(a1 + 12680) = 0u;
  *(_OWORD *)(a1 + 12696) = 0u;
  *(_QWORD *)(a1 + 12672) = &off_24CA03568;
  *(_QWORD *)(a1 + 12952) = 0;
  *(_QWORD *)(a1 + 12944) = 0;
  *(_QWORD *)(a1 + 12936) = 0;
  *(_OWORD *)(a1 + 12916) = 0u;
  *(_OWORD *)(a1 + 12888) = 0u;
  *(_OWORD *)(a1 + 12904) = 0u;
  *(_OWORD *)(a1 + 12856) = 0u;
  *(_OWORD *)(a1 + 12872) = 0u;
  *(_OWORD *)(a1 + 12824) = 0u;
  *(_OWORD *)(a1 + 12840) = 0u;
  *(_QWORD *)(a1 + 12816) = &off_24CA034F0;
  *(_QWORD *)(a1 + 13096) = 0;
  *(_QWORD *)(a1 + 13088) = 0;
  *(_QWORD *)(a1 + 13080) = 0;
  *(_OWORD *)(a1 + 13060) = 0u;
  *(_OWORD *)(a1 + 13032) = 0u;
  *(_OWORD *)(a1 + 13048) = 0u;
  *(_OWORD *)(a1 + 13000) = 0u;
  *(_OWORD *)(a1 + 13016) = 0u;
  *(_OWORD *)(a1 + 12968) = 0u;
  *(_OWORD *)(a1 + 12984) = 0u;
  *(_QWORD *)(a1 + 12960) = &off_24CA03400;
  *(_QWORD *)(a1 + 13240) = 0;
  *(_QWORD *)(a1 + 13232) = 0;
  *(_QWORD *)(a1 + 13224) = 0;
  *(_OWORD *)(a1 + 13204) = 0u;
  *(_OWORD *)(a1 + 13176) = 0u;
  *(_OWORD *)(a1 + 13192) = 0u;
  *(_OWORD *)(a1 + 13144) = 0u;
  *(_OWORD *)(a1 + 13160) = 0u;
  *(_OWORD *)(a1 + 13112) = 0u;
  *(_OWORD *)(a1 + 13128) = 0u;
  *(_QWORD *)(a1 + 13104) = &off_24CA03478;
  *(_QWORD *)(a1 + 13384) = 0;
  *(_QWORD *)(a1 + 13376) = 0;
  *(_QWORD *)(a1 + 13368) = 0;
  *(_OWORD *)(a1 + 13348) = 0u;
  *(_OWORD *)(a1 + 13320) = 0u;
  *(_OWORD *)(a1 + 13336) = 0u;
  *(_OWORD *)(a1 + 13288) = 0u;
  *(_OWORD *)(a1 + 13304) = 0u;
  *(_OWORD *)(a1 + 13256) = 0u;
  *(_OWORD *)(a1 + 13272) = 0u;
  *(_QWORD *)(a1 + 13248) = &off_24CA03400;
  *(_QWORD *)(a1 + 13528) = 0;
  *(_QWORD *)(a1 + 13520) = 0;
  *(_QWORD *)(a1 + 13512) = 0;
  *(_OWORD *)(a1 + 13492) = 0u;
  *(_OWORD *)(a1 + 13464) = 0u;
  *(_OWORD *)(a1 + 13480) = 0u;
  *(_OWORD *)(a1 + 13432) = 0u;
  *(_OWORD *)(a1 + 13448) = 0u;
  *(_OWORD *)(a1 + 13400) = 0u;
  *(_OWORD *)(a1 + 13416) = 0u;
  *(_QWORD *)(a1 + 13392) = &off_24CA03400;
  *(_QWORD *)(a1 + 13672) = 0;
  *(_QWORD *)(a1 + 13664) = 0;
  *(_QWORD *)(a1 + 13656) = 0;
  *(_OWORD *)(a1 + 13636) = 0u;
  *(_OWORD *)(a1 + 13608) = 0u;
  *(_OWORD *)(a1 + 13624) = 0u;
  *(_OWORD *)(a1 + 13576) = 0u;
  *(_OWORD *)(a1 + 13592) = 0u;
  *(_OWORD *)(a1 + 13544) = 0u;
  *(_OWORD *)(a1 + 13560) = 0u;
  *(_QWORD *)(a1 + 13536) = &off_24CA03220;
  *(_QWORD *)(a1 + 13816) = 0;
  *(_QWORD *)(a1 + 13808) = 0;
  *(_QWORD *)(a1 + 13800) = 0;
  *(_OWORD *)(a1 + 13780) = 0u;
  *(_OWORD *)(a1 + 13752) = 0u;
  *(_OWORD *)(a1 + 13768) = 0u;
  *(_OWORD *)(a1 + 13720) = 0u;
  *(_OWORD *)(a1 + 13736) = 0u;
  *(_OWORD *)(a1 + 13688) = 0u;
  *(_OWORD *)(a1 + 13704) = 0u;
  *(_QWORD *)(a1 + 13680) = &off_24CA03388;
  *(_QWORD *)(a1 + 13960) = 0;
  *(_QWORD *)(a1 + 13952) = 0;
  *(_QWORD *)(a1 + 13944) = 0;
  *(_OWORD *)(a1 + 13924) = 0u;
  *(_OWORD *)(a1 + 13896) = 0u;
  *(_OWORD *)(a1 + 13912) = 0u;
  *(_OWORD *)(a1 + 13864) = 0u;
  *(_OWORD *)(a1 + 13880) = 0u;
  *(_OWORD *)(a1 + 13832) = 0u;
  *(_OWORD *)(a1 + 13848) = 0u;
  *(_QWORD *)(a1 + 13824) = &off_24CA03220;
  *(_QWORD *)(a1 + 14104) = 0;
  *(_QWORD *)(a1 + 14096) = 0;
  *(_QWORD *)(a1 + 14088) = 0;
  *(_OWORD *)(a1 + 14068) = 0u;
  *(_OWORD *)(a1 + 14040) = 0u;
  *(_OWORD *)(a1 + 14056) = 0u;
  *(_OWORD *)(a1 + 14008) = 0u;
  *(_OWORD *)(a1 + 14024) = 0u;
  *(_OWORD *)(a1 + 13976) = 0u;
  *(_OWORD *)(a1 + 13992) = 0u;
  *(_QWORD *)(a1 + 13968) = &off_24CA03310;
  *(_QWORD *)(a1 + 14248) = 0;
  *(_QWORD *)(a1 + 14240) = 0;
  *(_QWORD *)(a1 + 14232) = 0;
  *(_OWORD *)(a1 + 14212) = 0u;
  *(_OWORD *)(a1 + 14184) = 0u;
  *(_OWORD *)(a1 + 14200) = 0u;
  *(_OWORD *)(a1 + 14152) = 0u;
  *(_OWORD *)(a1 + 14168) = 0u;
  *(_OWORD *)(a1 + 14120) = 0u;
  *(_OWORD *)(a1 + 14136) = 0u;
  *(_QWORD *)(a1 + 14112) = &off_24CA03310;
  *(_QWORD *)(a1 + 14392) = 0;
  *(_QWORD *)(a1 + 14384) = 0;
  *(_QWORD *)(a1 + 14376) = 0;
  *(_OWORD *)(a1 + 14356) = 0u;
  *(_OWORD *)(a1 + 14328) = 0u;
  *(_OWORD *)(a1 + 14344) = 0u;
  *(_OWORD *)(a1 + 14296) = 0u;
  *(_OWORD *)(a1 + 14312) = 0u;
  *(_OWORD *)(a1 + 14264) = 0u;
  *(_OWORD *)(a1 + 14280) = 0u;
  *(_QWORD *)(a1 + 14256) = &off_24CA03220;
  return result;
}

_QWORD *sub_20FC063EC(_QWORD *result)
{
  result[1890] = result + 162;
  result[1891] = result + 342;
  result[1892] = result + 522;
  result[1893] = result + 702;
  result[1894] = result + 882;
  result[1895] = result + 1062;
  result[1896] = result + 1242;
  result[1897] = result + 1422;
  result[1898] = result + 1602;
  result[1899] = result + 1782;
  result[1880] = result + 144;
  result[1881] = result + 324;
  result[1882] = result + 504;
  result[1883] = result + 684;
  result[1884] = result + 864;
  result[1885] = result + 1044;
  result[1886] = result + 1224;
  result[1887] = result + 1404;
  result[1888] = result + 1584;
  result[1889] = result + 1764;
  result[1870] = result + 126;
  result[1871] = result + 306;
  result[1872] = result + 486;
  result[1873] = result + 666;
  result[1874] = result + 846;
  result[1875] = result + 1026;
  result[1876] = result + 1206;
  result[1877] = result + 1386;
  result[1878] = result + 1566;
  result[1879] = result + 1746;
  result[1860] = result + 108;
  result[1861] = result + 288;
  result[1862] = result + 468;
  result[1863] = result + 648;
  result[1864] = result + 828;
  result[1865] = result + 1008;
  result[1866] = result + 1188;
  result[1867] = result + 1368;
  result[1868] = result + 1548;
  result[1869] = result + 1728;
  result[1850] = result + 90;
  result[1851] = result + 270;
  result[1852] = result + 450;
  result[1853] = result + 630;
  result[1854] = result + 810;
  result[1855] = result + 990;
  result[1856] = result + 1170;
  result[1857] = result + 1350;
  result[1858] = result + 1530;
  result[1859] = result + 1710;
  result[1840] = result + 72;
  result[1841] = result + 252;
  result[1842] = result + 432;
  result[1843] = result + 612;
  result[1844] = result + 792;
  result[1845] = result + 972;
  result[1846] = result + 1152;
  result[1847] = result + 1332;
  result[1848] = result + 1512;
  result[1849] = result + 1692;
  result[1830] = result + 54;
  result[1831] = result + 234;
  result[1832] = result + 414;
  result[1833] = result + 594;
  result[1834] = result + 774;
  result[1835] = result + 954;
  result[1836] = result + 1134;
  result[1837] = result + 1314;
  result[1838] = result + 1494;
  result[1839] = result + 1674;
  result[1820] = result + 36;
  result[1821] = result + 216;
  result[1822] = result + 396;
  result[1823] = result + 576;
  result[1824] = result + 756;
  result[1825] = result + 936;
  result[1826] = result + 1116;
  result[1827] = result + 1296;
  result[1828] = result + 1476;
  result[1829] = result + 1656;
  result[1810] = result + 18;
  result[1811] = result + 198;
  result[1812] = result + 378;
  result[1813] = result + 558;
  result[1814] = result + 738;
  result[1815] = result + 918;
  result[1816] = result + 1098;
  result[1817] = result + 1278;
  result[1818] = result + 1458;
  result[1819] = result + 1638;
  result[1800] = result;
  result[1801] = result + 180;
  result[1802] = result + 360;
  result[1803] = result + 540;
  result[1804] = result + 720;
  result[1805] = result + 900;
  result[1806] = result + 1080;
  result[1807] = result + 1260;
  result[1808] = result + 1440;
  result[1809] = result + 1620;
  return result;
}

void sub_20FC06828(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA042C8;
  sub_20F8ADB48(a1 + 1952);
  v2 = (_QWORD *)a1[1951];
  if (v2 == a1 + 1948)
  {
    v3 = 4;
    v2 = a1 + 1948;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_20F89E908((uint64_t)(a1 + 1917));
  sub_20F8A4000(a1 + 17);
  v4 = a1[4];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FC068F0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v10[20];
  _QWORD v11[7];
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 17440);
  v3 = *(_QWORD *)(a1 + 17448);
  __asm { FMOV            V1.2D, #1.0 }
  v10[0] = _Q1;
  v10[1] = _Q1;
  v10[2] = _Q1;
  v10[3] = _Q1;
  v10[4] = _Q1;
  v10[5] = _Q1;
  v10[6] = _Q1;
  v10[7] = _Q1;
  v10[8] = _Q1;
  v10[9] = _Q1;
  v10[10] = _Q1;
  v10[11] = _Q1;
  v10[12] = _Q1;
  v10[13] = _Q1;
  v10[14] = _Q1;
  v10[15] = _Q1;
  v10[16] = _Q1;
  v10[17] = _Q1;
  v10[18] = _Q1;
  v10[19] = _Q1;
  v16 = 0;
  v15 = v3;
  v14 = 0;
  v12 = 0;
  v13 = a2;
  v11[0] = v2;
  v11[1] = &v12;
  v11[2] = v10;
  v11[3] = &v13;
  v11[4] = &v14;
  v11[5] = &v16;
  v11[6] = &v15;
  return sub_20FA5BE38(v11);
}

uint64_t sub_20FC06984(uint64_t a1)
{
  return **(_QWORD **)(a1 + 17440);
}

uint64_t sub_20FC06990(uint64_t a1)
{
  return **(_QWORD **)(a1 + 17440);
}

uint64_t sub_20FC0699C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 17440) + 8);
}

double sub_20FC069A8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)a1 = &off_24CA03B08;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &off_24CA03B80;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 288) = &off_24CA03B08;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 532) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = &off_24CA03B08;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_QWORD *)(a1 + 576) = &off_24CA039A0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 820) = 0u;
  *(_QWORD *)(a1 + 720) = &off_24CA03A90;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 964) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 864) = &off_24CA03A18;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1008) = &off_24CA03A18;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1252) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_QWORD *)(a1 + 1152) = &off_24CA039A0;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1396) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_QWORD *)(a1 + 1296) = &off_24CA039A0;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1540) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_QWORD *)(a1 + 1440) = &off_24CA03D60;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1684) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_QWORD *)(a1 + 1584) = &off_24CA03DD8;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1828) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_QWORD *)(a1 + 1728) = &off_24CA03D60;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 1972) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_QWORD *)(a1 + 1872) = &off_24CA03D60;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2116) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_QWORD *)(a1 + 2016) = &off_24CA03BF8;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2260) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_QWORD *)(a1 + 2160) = &off_24CA03CE8;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2404) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_QWORD *)(a1 + 2304) = &off_24CA03C70;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2548) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_QWORD *)(a1 + 2448) = &off_24CA03C70;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2692) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_QWORD *)(a1 + 2592) = &off_24CA03BF8;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2836) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_QWORD *)(a1 + 2736) = &off_24CA03BF8;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 2980) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_QWORD *)(a1 + 2880) = &off_24CA03B08;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3124) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_QWORD *)(a1 + 3024) = &off_24CA03B80;
  *(_OWORD *)(a1 + 3288) = 0u;
  *(_OWORD *)(a1 + 3268) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3256) = 0u;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_QWORD *)(a1 + 3168) = &off_24CA03B08;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3412) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_QWORD *)(a1 + 3312) = &off_24CA03B08;
  *(_OWORD *)(a1 + 3576) = 0u;
  *(_OWORD *)(a1 + 3556) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3700) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_OWORD *)(a1 + 3688) = 0u;
  *(_OWORD *)(a1 + 3640) = 0u;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3608) = 0u;
  *(_OWORD *)(a1 + 3624) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3844) = 0u;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3784) = 0u;
  *(_OWORD *)(a1 + 3800) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_OWORD *)(a1 + 3988) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4132) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_OWORD *)(a1 + 4276) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4420) = 0u;
  *(_OWORD *)(a1 + 4392) = 0u;
  *(_OWORD *)(a1 + 4408) = 0u;
  *(_OWORD *)(a1 + 4360) = 0u;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(_QWORD *)(a1 + 4320) = &off_24CA03B08;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_OWORD *)(a1 + 4564) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4504) = 0u;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_QWORD *)(a1 + 4464) = &off_24CA03B80;
  *(_OWORD *)(a1 + 4708) = 0u;
  *(_OWORD *)(a1 + 4680) = 0u;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_OWORD *)(a1 + 4664) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_QWORD *)(a1 + 4608) = &off_24CA03B08;
  *(_OWORD *)(a1 + 4852) = 0u;
  *(_OWORD *)(a1 + 4824) = 0u;
  *(_OWORD *)(a1 + 4840) = 0u;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(_OWORD *)(a1 + 4808) = 0u;
  *(_OWORD *)(a1 + 4760) = 0u;
  *(_OWORD *)(a1 + 4776) = 0u;
  *(_QWORD *)(a1 + 4752) = &off_24CA03B08;
  *(_OWORD *)(a1 + 5572) = 0u;
  *(_OWORD *)(a1 + 5544) = 0u;
  *(_OWORD *)(a1 + 5560) = 0u;
  *(_OWORD *)(a1 + 5512) = 0u;
  *(_OWORD *)(a1 + 5528) = 0u;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_OWORD *)(a1 + 5716) = 0u;
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_OWORD *)(a1 + 5704) = 0u;
  *(_OWORD *)(a1 + 5656) = 0u;
  *(_OWORD *)(a1 + 5672) = 0u;
  *(_OWORD *)(a1 + 5624) = 0u;
  *(_OWORD *)(a1 + 5640) = 0u;
  *(_OWORD *)(a1 + 5860) = 0u;
  *(_OWORD *)(a1 + 5832) = 0u;
  *(_OWORD *)(a1 + 5848) = 0u;
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_OWORD *)(a1 + 5816) = 0u;
  *(_OWORD *)(a1 + 5768) = 0u;
  *(_OWORD *)(a1 + 5784) = 0u;
  *(_OWORD *)(a1 + 7832) = 0u;
  *(_QWORD *)(a1 + 7776) = &off_24CA03748;
  *(_QWORD *)(a1 + 7920) = &off_24CA03838;
  *(_QWORD *)(a1 + 8352) = &off_24CA03748;
  *(_QWORD *)(a1 + 10784) = 0;
  *(_QWORD *)(a1 + 10776) = 0;
  *(_OWORD *)(a1 + 10552) = 0u;
  *(_OWORD *)(a1 + 10568) = 0u;
  *(_OWORD *)(a1 + 10520) = 0u;
  *(_OWORD *)(a1 + 10536) = 0u;
  *(_QWORD *)(a1 + 10512) = &off_24CA03658;
  *(_QWORD *)(a1 + 10792) = 0;
  *(_QWORD *)(a1 + 8496) = &off_24CA03748;
  *(_QWORD *)(a1 + 10632) = 0;
  *(_OWORD *)(a1 + 10612) = 0u;
  *(_OWORD *)(a1 + 10584) = 0u;
  *(_OWORD *)(a1 + 10600) = 0u;
  *(_OWORD *)(a1 + 10376) = 0u;
  *(_OWORD *)(a1 + 10392) = 0u;
  *(_QWORD *)(a1 + 10368) = &off_24CA03658;
  *(_QWORD *)(a1 + 10648) = 0;
  *(_QWORD *)(a1 + 10640) = 0;
  *(_OWORD *)(a1 + 10468) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10408) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_QWORD *)(a1 + 10224) = &off_24CA036D0;
  *(_QWORD *)(a1 + 10504) = 0;
  *(_QWORD *)(a1 + 10496) = 0;
  *(_QWORD *)(a1 + 10488) = 0;
  *(_OWORD *)(a1 + 10264) = 0u;
  *(_OWORD *)(a1 + 10280) = 0u;
  *(_OWORD *)(a1 + 10232) = 0u;
  *(_OWORD *)(a1 + 10248) = 0u;
  *(_QWORD *)(a1 + 10352) = 0;
  *(_QWORD *)(a1 + 10344) = 0;
  *(_OWORD *)(a1 + 10324) = 0u;
  *(_OWORD *)(a1 + 10296) = 0u;
  *(_OWORD *)(a1 + 10312) = 0u;
  *(_OWORD *)(a1 + 10088) = 0u;
  *(_OWORD *)(a1 + 10104) = 0u;
  *(_QWORD *)(a1 + 10080) = &off_24CA03658;
  *(_QWORD *)(a1 + 10360) = 0;
  *(_OWORD *)(a1 + 9460) = 0u;
  *(_OWORD *)(a1 + 10180) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(_OWORD *)(a1 + 10168) = 0u;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 9448) = 0u;
  *(_QWORD *)(a1 + 9936) = &off_24CA034F0;
  *(_QWORD *)(a1 + 10216) = 0;
  *(_QWORD *)(a1 + 10208) = 0;
  *(_QWORD *)(a1 + 10200) = 0;
  *(_OWORD *)(a1 + 9992) = 0u;
  *(_OWORD *)(a1 + 10008) = 0u;
  *(_OWORD *)(a1 + 9960) = 0u;
  *(_OWORD *)(a1 + 9976) = 0u;
  *(_OWORD *)(a1 + 9944) = 0u;
  *(_OWORD *)(a1 + 10036) = 0u;
  *(_OWORD *)(a1 + 10024) = 0u;
  *(_QWORD *)(a1 + 10072) = 0;
  *(_QWORD *)(a1 + 10064) = 0;
  *(_QWORD *)(a1 + 10056) = 0;
  *(_OWORD *)(a1 + 9832) = 0u;
  *(_OWORD *)(a1 + 9848) = 0u;
  *(_OWORD *)(a1 + 9800) = 0u;
  *(_OWORD *)(a1 + 9816) = 0u;
  *(_QWORD *)(a1 + 9792) = &off_24CA034F0;
  *(_OWORD *)(a1 + 9892) = 0u;
  *(_OWORD *)(a1 + 9864) = 0u;
  *(_OWORD *)(a1 + 9880) = 0u;
  *(_QWORD *)(a1 + 9912) = 0;
  *(_OWORD *)(a1 + 9748) = 0u;
  *(_OWORD *)(a1 + 9656) = 0u;
  *(_OWORD *)(a1 + 9672) = 0u;
  *(_QWORD *)(a1 + 9648) = &off_24CA03568;
  *(_QWORD *)(a1 + 9928) = 0;
  *(_QWORD *)(a1 + 9920) = 0;
  *(_OWORD *)(a1 + 9720) = 0u;
  *(_OWORD *)(a1 + 9736) = 0u;
  *(_OWORD *)(a1 + 9688) = 0u;
  *(_OWORD *)(a1 + 9704) = 0u;
  *(_OWORD *)(a1 + 9512) = 0u;
  *(_OWORD *)(a1 + 9528) = 0u;
  *(_QWORD *)(a1 + 9504) = &off_24CA03568;
  *(_QWORD *)(a1 + 9784) = 0;
  *(_QWORD *)(a1 + 9776) = 0;
  *(_QWORD *)(a1 + 9768) = 0;
  *(_OWORD *)(a1 + 9416) = 0u;
  *(_OWORD *)(a1 + 9432) = 0u;
  *(_OWORD *)(a1 + 9604) = 0u;
  *(_OWORD *)(a1 + 9576) = 0u;
  *(_OWORD *)(a1 + 9592) = 0u;
  *(_OWORD *)(a1 + 9544) = 0u;
  *(_OWORD *)(a1 + 9560) = 0u;
  *(_QWORD *)(a1 + 9360) = &off_24CA035E0;
  *(_QWORD *)(a1 + 9640) = 0;
  *(_QWORD *)(a1 + 9632) = 0;
  *(_QWORD *)(a1 + 9624) = 0;
  *(_OWORD *)(a1 + 9384) = 0u;
  *(_OWORD *)(a1 + 9400) = 0u;
  *(_OWORD *)(a1 + 9368) = 0u;
  *(_QWORD *)(a1 + 8784) = &off_24CA036D0;
  *(_QWORD *)(a1 + 9216) = &off_24CA034F0;
  *(_QWORD *)(a1 + 9496) = 0;
  *(_QWORD *)(a1 + 9488) = 0;
  *(_QWORD *)(a1 + 9480) = 0;
  *(_OWORD *)(a1 + 9272) = 0u;
  *(_OWORD *)(a1 + 9288) = 0u;
  *(_OWORD *)(a1 + 9240) = 0u;
  *(_OWORD *)(a1 + 9256) = 0u;
  *(_OWORD *)(a1 + 9224) = 0u;
  *(_OWORD *)(a1 + 9316) = 0u;
  *(_OWORD *)(a1 + 9304) = 0u;
  *(_QWORD *)(a1 + 9352) = 0;
  *(_QWORD *)(a1 + 9344) = 0;
  *(_QWORD *)(a1 + 9336) = 0;
  *(_OWORD *)(a1 + 9112) = 0u;
  *(_OWORD *)(a1 + 9128) = 0u;
  *(_OWORD *)(a1 + 9080) = 0u;
  *(_OWORD *)(a1 + 9096) = 0u;
  *(_QWORD *)(a1 + 9072) = &off_24CA03658;
  *(_OWORD *)(a1 + 6004) = 0u;
  *(_OWORD *)(a1 + 9172) = 0u;
  *(_OWORD *)(a1 + 9144) = 0u;
  *(_OWORD *)(a1 + 9160) = 0u;
  *(_QWORD *)(a1 + 9192) = 0;
  *(_OWORD *)(a1 + 8936) = 0u;
  *(_OWORD *)(a1 + 8952) = 0u;
  *(_QWORD *)(a1 + 8928) = &off_24CA03658;
  *(_QWORD *)(a1 + 9208) = 0;
  *(_QWORD *)(a1 + 9200) = 0;
  *(_OWORD *)(a1 + 9028) = 0u;
  *(_OWORD *)(a1 + 9000) = 0u;
  *(_OWORD *)(a1 + 9016) = 0u;
  *(_OWORD *)(a1 + 8968) = 0u;
  *(_OWORD *)(a1 + 8984) = 0u;
  *(_OWORD *)(a1 + 8792) = 0u;
  *(_OWORD *)(a1 + 8808) = 0u;
  *(_QWORD *)(a1 + 9064) = 0;
  *(_QWORD *)(a1 + 9056) = 0;
  *(_QWORD *)(a1 + 9048) = 0;
  *(_QWORD *)(a1 + 8640) = &off_24CA03658;
  *(_OWORD *)(a1 + 8840) = 0u;
  *(_OWORD *)(a1 + 8856) = 0u;
  *(_OWORD *)(a1 + 8824) = 0u;
  *(_OWORD *)(a1 + 5976) = 0u;
  *(_OWORD *)(a1 + 5992) = 0u;
  *(_QWORD *)(a1 + 8920) = 0;
  *(_QWORD *)(a1 + 8912) = 0;
  *(_QWORD *)(a1 + 8904) = 0;
  *(_OWORD *)(a1 + 8884) = 0u;
  *(_OWORD *)(a1 + 8872) = 0u;
  *(_OWORD *)(a1 + 8680) = 0u;
  *(_OWORD *)(a1 + 8696) = 0u;
  *(_OWORD *)(a1 + 8648) = 0u;
  *(_OWORD *)(a1 + 8664) = 0u;
  *(_OWORD *)(a1 + 8740) = 0u;
  *(_OWORD *)(a1 + 8712) = 0u;
  *(_OWORD *)(a1 + 8728) = 0u;
  *(_QWORD *)(a1 + 8768) = 0;
  *(_QWORD *)(a1 + 8760) = 0;
  *(_OWORD *)(a1 + 8536) = 0u;
  *(_OWORD *)(a1 + 8552) = 0u;
  *(_OWORD *)(a1 + 8504) = 0u;
  *(_OWORD *)(a1 + 8520) = 0u;
  *(_QWORD *)(a1 + 8776) = 0;
  *(_OWORD *)(a1 + 8596) = 0u;
  *(_OWORD *)(a1 + 8568) = 0u;
  *(_OWORD *)(a1 + 8584) = 0u;
  *(_QWORD *)(a1 + 8616) = 0;
  *(_OWORD *)(a1 + 8452) = 0u;
  *(_OWORD *)(a1 + 8360) = 0u;
  *(_OWORD *)(a1 + 8376) = 0u;
  *(_QWORD *)(a1 + 8632) = 0;
  *(_QWORD *)(a1 + 8624) = 0;
  *(_OWORD *)(a1 + 8424) = 0u;
  *(_OWORD *)(a1 + 8440) = 0u;
  *(_OWORD *)(a1 + 8392) = 0u;
  *(_OWORD *)(a1 + 8408) = 0u;
  *(_QWORD *)(a1 + 8064) = &off_24CA037C0;
  *(_QWORD *)(a1 + 8208) = &off_24CA037C0;
  *(_QWORD *)(a1 + 8488) = 0;
  *(_QWORD *)(a1 + 8480) = 0;
  *(_QWORD *)(a1 + 8472) = 0;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_OWORD *)(a1 + 8280) = 0u;
  *(_OWORD *)(a1 + 8232) = 0u;
  *(_OWORD *)(a1 + 8248) = 0u;
  *(_OWORD *)(a1 + 8216) = 0u;
  *(_OWORD *)(a1 + 8308) = 0u;
  *(_OWORD *)(a1 + 8296) = 0u;
  *(_QWORD *)(a1 + 8344) = 0;
  *(_QWORD *)(a1 + 8336) = 0;
  *(_QWORD *)(a1 + 8328) = 0;
  *(_OWORD *)(a1 + 8164) = 0u;
  *(_OWORD *)(a1 + 8104) = 0u;
  *(_OWORD *)(a1 + 8120) = 0u;
  *(_OWORD *)(a1 + 8072) = 0u;
  *(_OWORD *)(a1 + 8088) = 0u;
  *(_OWORD *)(a1 + 8136) = 0u;
  *(_OWORD *)(a1 + 8152) = 0u;
  *(_QWORD *)(a1 + 0x2000) = 0;
  *(_QWORD *)(a1 + 8184) = 0;
  *(_OWORD *)(a1 + 7960) = 0u;
  *(_OWORD *)(a1 + 7976) = 0u;
  *(_OWORD *)(a1 + 7928) = 0u;
  *(_OWORD *)(a1 + 7944) = 0u;
  *(_QWORD *)(a1 + 8200) = 0;
  *(_OWORD *)(a1 + 5944) = 0u;
  *(_OWORD *)(a1 + 5960) = 0u;
  *(_QWORD *)(a1 + 8048) = 0;
  *(_QWORD *)(a1 + 8040) = 0;
  *(_OWORD *)(a1 + 8020) = 0u;
  *(_OWORD *)(a1 + 7992) = 0u;
  *(_OWORD *)(a1 + 8008) = 0u;
  *(_OWORD *)(a1 + 7876) = 0u;
  *(_OWORD *)(a1 + 7784) = 0u;
  *(_OWORD *)(a1 + 7800) = 0u;
  *(_QWORD *)(a1 + 8056) = 0;
  *(_OWORD *)(a1 + 7848) = 0u;
  *(_OWORD *)(a1 + 7864) = 0u;
  *(_OWORD *)(a1 + 7816) = 0u;
  *(_QWORD *)(a1 + 7896) = 0;
  *(_OWORD *)(a1 + 7732) = 0u;
  *(_OWORD *)(a1 + 7640) = 0u;
  *(_OWORD *)(a1 + 7656) = 0u;
  *(_QWORD *)(a1 + 7632) = &off_24CA038B0;
  *(_QWORD *)(a1 + 7912) = 0;
  *(_QWORD *)(a1 + 7904) = 0;
  *(_OWORD *)(a1 + 7704) = 0u;
  *(_OWORD *)(a1 + 7720) = 0u;
  *(_OWORD *)(a1 + 7672) = 0u;
  *(_OWORD *)(a1 + 7688) = 0u;
  *(_OWORD *)(a1 + 7496) = 0u;
  *(_OWORD *)(a1 + 7512) = 0u;
  *(_QWORD *)(a1 + 7488) = &off_24CA038B0;
  *(_QWORD *)(a1 + 7768) = 0;
  *(_QWORD *)(a1 + 7760) = 0;
  *(_QWORD *)(a1 + 7752) = 0;
  *(_QWORD *)(a1 + 7200) = &off_24CA038B0;
  *(_OWORD *)(a1 + 7544) = 0u;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_OWORD *)(a1 + 7528) = 0u;
  *(_QWORD *)(a1 + 7624) = 0;
  *(_QWORD *)(a1 + 7616) = 0;
  *(_QWORD *)(a1 + 7608) = 0;
  *(_OWORD *)(a1 + 7588) = 0u;
  *(_OWORD *)(a1 + 7576) = 0u;
  *(_OWORD *)(a1 + 7384) = 0u;
  *(_OWORD *)(a1 + 7400) = 0u;
  *(_OWORD *)(a1 + 7352) = 0u;
  *(_OWORD *)(a1 + 7368) = 0u;
  *(_QWORD *)(a1 + 7344) = &off_24CA03928;
  *(_QWORD *)(a1 + 7464) = 0;
  *(_OWORD *)(a1 + 7444) = 0u;
  *(_OWORD *)(a1 + 7416) = 0u;
  *(_OWORD *)(a1 + 7432) = 0u;
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_OWORD *)(a1 + 7224) = 0u;
  *(_QWORD *)(a1 + 7480) = 0;
  *(_QWORD *)(a1 + 7472) = 0;
  *(_OWORD *)(a1 + 7300) = 0u;
  *(_OWORD *)(a1 + 7272) = 0u;
  *(_OWORD *)(a1 + 7288) = 0u;
  *(_OWORD *)(a1 + 7240) = 0u;
  *(_OWORD *)(a1 + 7256) = 0u;
  *(_OWORD *)(a1 + 7156) = 0u;
  *(_QWORD *)(a1 + 7056) = &off_24CA03220;
  *(_QWORD *)(a1 + 7336) = 0;
  *(_QWORD *)(a1 + 7328) = 0;
  *(_QWORD *)(a1 + 7320) = 0;
  *(_OWORD *)(a1 + 7128) = 0u;
  *(_OWORD *)(a1 + 7144) = 0u;
  *(_OWORD *)(a1 + 7096) = 0u;
  *(_OWORD *)(a1 + 7112) = 0u;
  *(_OWORD *)(a1 + 7064) = 0u;
  *(_OWORD *)(a1 + 7080) = 0u;
  *(_OWORD *)(a1 + 7012) = 0u;
  *(_QWORD *)(a1 + 7192) = 0;
  *(_QWORD *)(a1 + 7184) = 0;
  *(_QWORD *)(a1 + 7176) = 0;
  *(_OWORD *)(a1 + 6984) = 0u;
  *(_OWORD *)(a1 + 7000) = 0u;
  *(_OWORD *)(a1 + 6952) = 0u;
  *(_OWORD *)(a1 + 6968) = 0u;
  *(_OWORD *)(a1 + 6920) = 0u;
  *(_OWORD *)(a1 + 6936) = 0u;
  *(_QWORD *)(a1 + 6912) = &off_24CA03220;
  *(_QWORD *)(a1 + 7040) = 0;
  *(_QWORD *)(a1 + 7032) = 0;
  *(_OWORD *)(a1 + 6808) = 0u;
  *(_OWORD *)(a1 + 6824) = 0u;
  *(_OWORD *)(a1 + 6776) = 0u;
  *(_OWORD *)(a1 + 6792) = 0u;
  *(_QWORD *)(a1 + 6768) = &off_24CA03310;
  *(_QWORD *)(a1 + 7048) = 0;
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_OWORD *)(a1 + 5928) = 0u;
  *(_QWORD *)(a1 + 6888) = 0;
  *(_OWORD *)(a1 + 6868) = 0u;
  *(_OWORD *)(a1 + 6840) = 0u;
  *(_OWORD *)(a1 + 6856) = 0u;
  *(_OWORD *)(a1 + 6632) = 0u;
  *(_OWORD *)(a1 + 6648) = 0u;
  *(_QWORD *)(a1 + 6624) = &off_24CA03310;
  *(_QWORD *)(a1 + 6904) = 0;
  *(_QWORD *)(a1 + 6896) = 0;
  *(_OWORD *)(a1 + 6724) = 0u;
  *(_OWORD *)(a1 + 6696) = 0u;
  *(_OWORD *)(a1 + 6712) = 0u;
  *(_OWORD *)(a1 + 6664) = 0u;
  *(_OWORD *)(a1 + 6680) = 0u;
  *(_QWORD *)(a1 + 6480) = &off_24CA03388;
  *(_QWORD *)(a1 + 6760) = 0;
  *(_QWORD *)(a1 + 6752) = 0;
  *(_QWORD *)(a1 + 6744) = 0;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_OWORD *)(a1 + 6552) = 0u;
  *(_OWORD *)(a1 + 6504) = 0u;
  *(_OWORD *)(a1 + 6520) = 0u;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6580) = 0u;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(_QWORD *)(a1 + 6616) = 0;
  *(_QWORD *)(a1 + 6608) = 0;
  *(_QWORD *)(a1 + 6600) = 0;
  *(_OWORD *)(a1 + 6376) = 0u;
  *(_OWORD *)(a1 + 6392) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_QWORD *)(a1 + 6336) = &off_24CA03220;
  *(_OWORD *)(a1 + 6436) = 0u;
  *(_OWORD *)(a1 + 6408) = 0u;
  *(_OWORD *)(a1 + 6424) = 0u;
  *(_QWORD *)(a1 + 6456) = 0;
  *(_OWORD *)(a1 + 6292) = 0u;
  *(_OWORD *)(a1 + 6200) = 0u;
  *(_OWORD *)(a1 + 6216) = 0u;
  *(_QWORD *)(a1 + 6192) = &off_24CA03400;
  *(_QWORD *)(a1 + 6472) = 0;
  *(_QWORD *)(a1 + 6464) = 0;
  *(_OWORD *)(a1 + 6264) = 0u;
  *(_OWORD *)(a1 + 6280) = 0u;
  *(_OWORD *)(a1 + 6232) = 0u;
  *(_OWORD *)(a1 + 6248) = 0u;
  *(_OWORD *)(a1 + 6056) = 0u;
  *(_OWORD *)(a1 + 6072) = 0u;
  *(_QWORD *)(a1 + 6048) = &off_24CA03400;
  *(_QWORD *)(a1 + 6328) = 0;
  *(_QWORD *)(a1 + 6320) = 0;
  *(_QWORD *)(a1 + 6312) = 0;
  *(_QWORD *)(a1 + 2152) = 0;
  *(_OWORD *)(a1 + 6148) = 0u;
  *(_OWORD *)(a1 + 6120) = 0u;
  *(_OWORD *)(a1 + 6136) = 0u;
  *(_OWORD *)(a1 + 6088) = 0u;
  *(_OWORD *)(a1 + 6104) = 0u;
  *(_QWORD *)(a1 + 5904) = &off_24CA03478;
  *(_QWORD *)(a1 + 6184) = 0;
  *(_QWORD *)(a1 + 6176) = 0;
  *(_QWORD *)(a1 + 6168) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2728) = 0;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 6024) = 0;
  *(_QWORD *)(a1 + 3016) = 0;
  *(_QWORD *)(a1 + 3160) = 0;
  *(_QWORD *)(a1 + 3304) = 0;
  *(_QWORD *)(a1 + 5760) = &off_24CA03400;
  *(_QWORD *)(a1 + 6040) = 0;
  *(_QWORD *)(a1 + 6032) = 0;
  *(_QWORD *)(a1 + 3448) = 0;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_QWORD *)(a1 + 3456) = &off_24CA039A0;
  *(_QWORD *)(a1 + 5896) = 0;
  *(_QWORD *)(a1 + 5888) = 0;
  *(_QWORD *)(a1 + 5880) = 0;
  *(_QWORD *)(a1 + 3736) = 0;
  *(_QWORD *)(a1 + 3600) = &off_24CA03A90;
  *(_QWORD *)(a1 + 3880) = 0;
  *(_QWORD *)(a1 + 3744) = &off_24CA03A18;
  *(_QWORD *)(a1 + 4024) = 0;
  *(_QWORD *)(a1 + 5616) = &off_24CA039A0;
  *(_QWORD *)(a1 + 3888) = &off_24CA03A18;
  *(_QWORD *)(a1 + 4168) = 0;
  *(_QWORD *)(a1 + 5472) = &off_24CA039A0;
  *(_QWORD *)(a1 + 5752) = 0;
  *(_QWORD *)(a1 + 5744) = 0;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_QWORD *)(a1 + 4032) = &off_24CA039A0;
  *(_QWORD *)(a1 + 4312) = 0;
  *(_QWORD *)(a1 + 4176) = &off_24CA039A0;
  *(_QWORD *)(a1 + 4456) = 0;
  *(_QWORD *)(a1 + 4600) = 0;
  *(_QWORD *)(a1 + 5184) = &off_24CA03A18;
  *(_QWORD *)(a1 + 5328) = &off_24CA03A18;
  *(_QWORD *)(a1 + 5608) = 0;
  *(_QWORD *)(a1 + 5600) = 0;
  *(_QWORD *)(a1 + 5592) = 0;
  *(_OWORD *)(a1 + 5428) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5368) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_QWORD *)(a1 + 5464) = 0;
  *(_QWORD *)(a1 + 4744) = 0;
  *(_QWORD *)(a1 + 4888) = 0;
  *(_QWORD *)(a1 + 5040) = &off_24CA03A90;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5284) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_QWORD *)(a1 + 5320) = 0;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_OWORD *)(a1 + 5140) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_QWORD *)(a1 + 4896) = &off_24CA039A0;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_QWORD *)(a1 + 5176) = 0;
  *(_QWORD *)(a1 + 5032) = 0;
  *(_OWORD *)(a1 + 4996) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 10756) = 0u;
  *(_OWORD *)(a1 + 10728) = 0u;
  *(_OWORD *)(a1 + 10744) = 0u;
  *(_OWORD *)(a1 + 10696) = 0u;
  *(_OWORD *)(a1 + 10712) = 0u;
  *(_OWORD *)(a1 + 10664) = 0u;
  *(_OWORD *)(a1 + 10680) = 0u;
  *(_QWORD *)(a1 + 10656) = &off_24CA034F0;
  *(_QWORD *)(a1 + 10936) = 0;
  *(_QWORD *)(a1 + 10928) = 0;
  *(_QWORD *)(a1 + 10920) = 0;
  *(_OWORD *)(a1 + 10900) = 0u;
  *(_OWORD *)(a1 + 10872) = 0u;
  *(_OWORD *)(a1 + 10888) = 0u;
  *(_OWORD *)(a1 + 10840) = 0u;
  *(_OWORD *)(a1 + 10856) = 0u;
  *(_OWORD *)(a1 + 10808) = 0u;
  *(_OWORD *)(a1 + 10824) = 0u;
  *(_QWORD *)(a1 + 10800) = &off_24CA035E0;
  *(_QWORD *)(a1 + 11080) = 0;
  *(_QWORD *)(a1 + 11072) = 0;
  *(_QWORD *)(a1 + 11064) = 0;
  *(_OWORD *)(a1 + 11044) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 10984) = 0u;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 10952) = 0u;
  *(_OWORD *)(a1 + 10968) = 0u;
  *(_QWORD *)(a1 + 10944) = &off_24CA03568;
  *(_QWORD *)(a1 + 11224) = 0;
  *(_QWORD *)(a1 + 11216) = 0;
  *(_QWORD *)(a1 + 11208) = 0;
  *(_OWORD *)(a1 + 11188) = 0u;
  *(_OWORD *)(a1 + 11160) = 0u;
  *(_OWORD *)(a1 + 11176) = 0u;
  *(_OWORD *)(a1 + 11128) = 0u;
  *(_OWORD *)(a1 + 11144) = 0u;
  *(_OWORD *)(a1 + 11096) = 0u;
  *(_OWORD *)(a1 + 11112) = 0u;
  *(_QWORD *)(a1 + 11088) = &off_24CA03568;
  *(_QWORD *)(a1 + 11368) = 0;
  *(_QWORD *)(a1 + 11360) = 0;
  *(_QWORD *)(a1 + 11352) = 0;
  *(_OWORD *)(a1 + 11332) = 0u;
  *(_OWORD *)(a1 + 11304) = 0u;
  *(_OWORD *)(a1 + 11320) = 0u;
  *(_OWORD *)(a1 + 11272) = 0u;
  *(_OWORD *)(a1 + 11288) = 0u;
  *(_OWORD *)(a1 + 11240) = 0u;
  *(_OWORD *)(a1 + 11256) = 0u;
  *(_QWORD *)(a1 + 11232) = &off_24CA034F0;
  *(_QWORD *)(a1 + 11512) = 0;
  *(_QWORD *)(a1 + 11504) = 0;
  *(_QWORD *)(a1 + 11496) = 0;
  *(_OWORD *)(a1 + 11476) = 0u;
  *(_OWORD *)(a1 + 11448) = 0u;
  *(_OWORD *)(a1 + 11464) = 0u;
  *(_OWORD *)(a1 + 11416) = 0u;
  *(_OWORD *)(a1 + 11432) = 0u;
  *(_OWORD *)(a1 + 11384) = 0u;
  *(_OWORD *)(a1 + 11400) = 0u;
  *(_QWORD *)(a1 + 11376) = &off_24CA034F0;
  *(_QWORD *)(a1 + 11656) = 0;
  *(_QWORD *)(a1 + 11648) = 0;
  *(_QWORD *)(a1 + 11640) = 0;
  *(_OWORD *)(a1 + 11620) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11528) = 0u;
  *(_OWORD *)(a1 + 11544) = 0u;
  *(_QWORD *)(a1 + 11520) = &off_24CA03400;
  *(_QWORD *)(a1 + 11800) = 0;
  *(_QWORD *)(a1 + 11792) = 0;
  *(_QWORD *)(a1 + 11784) = 0;
  *(_OWORD *)(a1 + 11764) = 0u;
  *(_OWORD *)(a1 + 11736) = 0u;
  *(_OWORD *)(a1 + 11752) = 0u;
  *(_OWORD *)(a1 + 11704) = 0u;
  *(_OWORD *)(a1 + 11720) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(_OWORD *)(a1 + 11688) = 0u;
  *(_QWORD *)(a1 + 11664) = &off_24CA03478;
  *(_QWORD *)(a1 + 11944) = 0;
  *(_QWORD *)(a1 + 11936) = 0;
  *(_QWORD *)(a1 + 11928) = 0;
  *(_OWORD *)(a1 + 11908) = 0u;
  *(_OWORD *)(a1 + 11880) = 0u;
  *(_OWORD *)(a1 + 11896) = 0u;
  *(_OWORD *)(a1 + 11848) = 0u;
  *(_OWORD *)(a1 + 11864) = 0u;
  *(_OWORD *)(a1 + 11816) = 0u;
  *(_OWORD *)(a1 + 11832) = 0u;
  *(_QWORD *)(a1 + 11808) = &off_24CA03400;
  *(_QWORD *)(a1 + 12088) = 0;
  *(_QWORD *)(a1 + 12080) = 0;
  *(_QWORD *)(a1 + 12072) = 0;
  *(_OWORD *)(a1 + 12052) = 0u;
  *(_OWORD *)(a1 + 12024) = 0u;
  *(_OWORD *)(a1 + 12040) = 0u;
  *(_OWORD *)(a1 + 11992) = 0u;
  *(_OWORD *)(a1 + 12008) = 0u;
  *(_OWORD *)(a1 + 11960) = 0u;
  *(_OWORD *)(a1 + 11976) = 0u;
  *(_QWORD *)(a1 + 11952) = &off_24CA03400;
  *(_QWORD *)(a1 + 12232) = 0;
  *(_QWORD *)(a1 + 12224) = 0;
  *(_QWORD *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12196) = 0u;
  *(_OWORD *)(a1 + 12168) = 0u;
  *(_OWORD *)(a1 + 12184) = 0u;
  *(_OWORD *)(a1 + 12136) = 0u;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(_OWORD *)(a1 + 12104) = 0u;
  *(_OWORD *)(a1 + 12120) = 0u;
  *(_QWORD *)(a1 + 12096) = &off_24CA03220;
  *(_QWORD *)(a1 + 12376) = 0;
  *(_QWORD *)(a1 + 12368) = 0;
  *(_QWORD *)(a1 + 12360) = 0;
  *(_OWORD *)(a1 + 12340) = 0u;
  *(_OWORD *)(a1 + 12312) = 0u;
  *(_OWORD *)(a1 + 12328) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_OWORD *)(a1 + 12296) = 0u;
  *(_OWORD *)(a1 + 12248) = 0u;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_QWORD *)(a1 + 12240) = &off_24CA03388;
  *(_QWORD *)(a1 + 12520) = 0;
  *(_QWORD *)(a1 + 12512) = 0;
  *(_QWORD *)(a1 + 12504) = 0;
  *(_OWORD *)(a1 + 12484) = 0u;
  *(_OWORD *)(a1 + 12456) = 0u;
  *(_OWORD *)(a1 + 12472) = 0u;
  *(_OWORD *)(a1 + 12424) = 0u;
  *(_OWORD *)(a1 + 12440) = 0u;
  *(_OWORD *)(a1 + 12392) = 0u;
  *(_OWORD *)(a1 + 12408) = 0u;
  *(_QWORD *)(a1 + 12384) = &off_24CA03310;
  *(_QWORD *)(a1 + 12664) = 0;
  *(_QWORD *)(a1 + 12656) = 0;
  *(_QWORD *)(a1 + 12648) = 0;
  *(_OWORD *)(a1 + 12628) = 0u;
  *(_OWORD *)(a1 + 12600) = 0u;
  *(_OWORD *)(a1 + 12616) = 0u;
  *(_OWORD *)(a1 + 12568) = 0u;
  *(_OWORD *)(a1 + 12584) = 0u;
  *(_OWORD *)(a1 + 12536) = 0u;
  *(_OWORD *)(a1 + 12552) = 0u;
  *(_QWORD *)(a1 + 12528) = &off_24CA03310;
  *(_QWORD *)(a1 + 12808) = 0;
  *(_QWORD *)(a1 + 12800) = 0;
  *(_QWORD *)(a1 + 12792) = 0;
  *(_OWORD *)(a1 + 12772) = 0u;
  *(_OWORD *)(a1 + 12744) = 0u;
  *(_OWORD *)(a1 + 12760) = 0u;
  *(_OWORD *)(a1 + 12712) = 0u;
  *(_OWORD *)(a1 + 12728) = 0u;
  *(_OWORD *)(a1 + 12680) = 0u;
  *(_OWORD *)(a1 + 12696) = 0u;
  *(_QWORD *)(a1 + 12672) = &off_24CA03220;
  *(_QWORD *)(a1 + 12952) = 0;
  *(_QWORD *)(a1 + 12944) = 0;
  *(_QWORD *)(a1 + 12936) = 0;
  *(_OWORD *)(a1 + 12916) = 0u;
  *(_OWORD *)(a1 + 12888) = 0u;
  *(_OWORD *)(a1 + 12904) = 0u;
  *(_OWORD *)(a1 + 12856) = 0u;
  *(_OWORD *)(a1 + 12872) = 0u;
  *(_OWORD *)(a1 + 12824) = 0u;
  *(_OWORD *)(a1 + 12840) = 0u;
  *(_QWORD *)(a1 + 12816) = &off_24CA03220;
  *(_QWORD *)(a1 + 13096) = 0;
  *(_QWORD *)(a1 + 13088) = 0;
  *(_QWORD *)(a1 + 13080) = 0;
  *(_OWORD *)(a1 + 13060) = 0u;
  *(_OWORD *)(a1 + 13032) = 0u;
  *(_OWORD *)(a1 + 13048) = 0u;
  *(_OWORD *)(a1 + 13000) = 0u;
  *(_OWORD *)(a1 + 13016) = 0u;
  *(_OWORD *)(a1 + 12968) = 0u;
  *(_OWORD *)(a1 + 12984) = 0u;
  *(_QWORD *)(a1 + 12960) = &off_24CA03400;
  *(_QWORD *)(a1 + 13240) = 0;
  *(_QWORD *)(a1 + 13232) = 0;
  *(_QWORD *)(a1 + 13224) = 0;
  *(_OWORD *)(a1 + 13204) = 0u;
  *(_OWORD *)(a1 + 13176) = 0u;
  *(_OWORD *)(a1 + 13192) = 0u;
  *(_OWORD *)(a1 + 13144) = 0u;
  *(_OWORD *)(a1 + 13160) = 0u;
  *(_OWORD *)(a1 + 13112) = 0u;
  *(_OWORD *)(a1 + 13128) = 0u;
  *(_QWORD *)(a1 + 13104) = &off_24CA03478;
  *(_QWORD *)(a1 + 13384) = 0;
  *(_QWORD *)(a1 + 13376) = 0;
  *(_QWORD *)(a1 + 13368) = 0;
  *(_OWORD *)(a1 + 13348) = 0u;
  *(_OWORD *)(a1 + 13320) = 0u;
  *(_OWORD *)(a1 + 13336) = 0u;
  *(_OWORD *)(a1 + 13288) = 0u;
  *(_OWORD *)(a1 + 13304) = 0u;
  *(_OWORD *)(a1 + 13256) = 0u;
  *(_OWORD *)(a1 + 13272) = 0u;
  *(_QWORD *)(a1 + 13248) = &off_24CA03400;
  *(_QWORD *)(a1 + 13528) = 0;
  *(_QWORD *)(a1 + 13520) = 0;
  *(_QWORD *)(a1 + 13512) = 0;
  *(_OWORD *)(a1 + 13492) = 0u;
  *(_OWORD *)(a1 + 13464) = 0u;
  *(_OWORD *)(a1 + 13480) = 0u;
  *(_OWORD *)(a1 + 13432) = 0u;
  *(_OWORD *)(a1 + 13448) = 0u;
  *(_OWORD *)(a1 + 13400) = 0u;
  *(_OWORD *)(a1 + 13416) = 0u;
  *(_QWORD *)(a1 + 13392) = &off_24CA03400;
  *(_QWORD *)(a1 + 13672) = 0;
  *(_QWORD *)(a1 + 13664) = 0;
  *(_QWORD *)(a1 + 13656) = 0;
  *(_OWORD *)(a1 + 13636) = 0u;
  *(_OWORD *)(a1 + 13608) = 0u;
  *(_OWORD *)(a1 + 13624) = 0u;
  *(_OWORD *)(a1 + 13576) = 0u;
  *(_OWORD *)(a1 + 13592) = 0u;
  *(_OWORD *)(a1 + 13544) = 0u;
  *(_OWORD *)(a1 + 13560) = 0u;
  *(_QWORD *)(a1 + 13536) = &off_24CA03220;
  *(_QWORD *)(a1 + 13816) = 0;
  *(_QWORD *)(a1 + 13808) = 0;
  *(_QWORD *)(a1 + 13800) = 0;
  *(_OWORD *)(a1 + 13780) = 0u;
  *(_OWORD *)(a1 + 13752) = 0u;
  *(_OWORD *)(a1 + 13768) = 0u;
  *(_OWORD *)(a1 + 13720) = 0u;
  *(_OWORD *)(a1 + 13736) = 0u;
  *(_OWORD *)(a1 + 13688) = 0u;
  *(_OWORD *)(a1 + 13704) = 0u;
  *(_QWORD *)(a1 + 13680) = &off_24CA03388;
  *(_QWORD *)(a1 + 13960) = 0;
  *(_QWORD *)(a1 + 13952) = 0;
  *(_QWORD *)(a1 + 13944) = 0;
  *(_OWORD *)(a1 + 13924) = 0u;
  *(_OWORD *)(a1 + 13896) = 0u;
  *(_OWORD *)(a1 + 13912) = 0u;
  *(_OWORD *)(a1 + 13864) = 0u;
  *(_OWORD *)(a1 + 13880) = 0u;
  *(_OWORD *)(a1 + 13832) = 0u;
  *(_OWORD *)(a1 + 13848) = 0u;
  *(_QWORD *)(a1 + 13824) = &off_24CA03310;
  *(_QWORD *)(a1 + 14104) = 0;
  *(_QWORD *)(a1 + 14096) = 0;
  *(_QWORD *)(a1 + 14088) = 0;
  *(_OWORD *)(a1 + 14068) = 0u;
  *(_OWORD *)(a1 + 14040) = 0u;
  *(_OWORD *)(a1 + 14056) = 0u;
  *(_OWORD *)(a1 + 14008) = 0u;
  *(_OWORD *)(a1 + 14024) = 0u;
  *(_OWORD *)(a1 + 13976) = 0u;
  *(_OWORD *)(a1 + 13992) = 0u;
  *(_QWORD *)(a1 + 13968) = &off_24CA03310;
  *(_QWORD *)(a1 + 14248) = 0;
  *(_QWORD *)(a1 + 14240) = 0;
  *(_QWORD *)(a1 + 14232) = 0;
  *(_OWORD *)(a1 + 14212) = 0u;
  *(_OWORD *)(a1 + 14184) = 0u;
  *(_OWORD *)(a1 + 14200) = 0u;
  *(_OWORD *)(a1 + 14152) = 0u;
  *(_OWORD *)(a1 + 14168) = 0u;
  *(_OWORD *)(a1 + 14120) = 0u;
  *(_OWORD *)(a1 + 14136) = 0u;
  *(_QWORD *)(a1 + 14112) = &off_24CA03220;
  *(_QWORD *)(a1 + 14392) = 0;
  *(_QWORD *)(a1 + 14384) = 0;
  *(_QWORD *)(a1 + 14376) = 0;
  *(_OWORD *)(a1 + 14356) = 0u;
  *(_OWORD *)(a1 + 14328) = 0u;
  *(_OWORD *)(a1 + 14344) = 0u;
  *(_OWORD *)(a1 + 14296) = 0u;
  *(_OWORD *)(a1 + 14312) = 0u;
  *(_OWORD *)(a1 + 14264) = 0u;
  *(_OWORD *)(a1 + 14280) = 0u;
  *(_QWORD *)(a1 + 14256) = &off_24CA03220;
  return result;
}

void sub_20FC079C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FC079D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FC07A08(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20FC07A68()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FC07A7C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA04B40;
  result[1] = v3;
  return result;
}

uint64_t sub_20FC07AB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA04B40;
  a2[1] = v2;
  return result;
}

void sub_20FC07ACC(uint64_t a1, _DWORD **a2)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_20F903EA8(*a2);
  v4 = *(_DWORD *)(*(_QWORD *)(v3 + 57904) + 68);
  if (v4 >= 3)
  {
    if (v4 == 3)
    {
      v5 = lacc_hardware::LaccHardware::operator lacc::CallInterface &();
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v5 + 160))(v5, v2);
    }
  }
  else
  {
    free(v2);
  }
}

uint64_t sub_20FC07B38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDept"
                     "hVariableIdLb1ELNS2_5DepthE0EEEEC1ERNS2_16SharedVIOKernelsEEUlPNS_9FlatWorldEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOL"
                                "andmarkDepthVariableIdLb1ELNS2_5DepthE0EEEEC1ERNS2_16SharedVIOKernelsEEUlPNS_9FlatWorldEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDepthVariableIdLb1ELNS2_5DepthE0EEEEC1ERNS2_16SharedVIOKernelsEEUlPNS_9FlatWorldEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDepthVariableIdLb1ELNS2_5DepthE0EEEEC1ERNS2_16SharedVIOKernelsEEUlPNS_9FlatWorldEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FC07BA4()
{
  return &unk_24CA04BB0;
}

void sub_20FC07BB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;

  v2 = a1 + 45496;
  v3 = (_QWORD *)(a1 + 43736);
  sub_20FC07C74(a1);
  if (v3[3])
  {
    v4 = (_QWORD *)v3[2];
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v3[2] = 0;
    v6 = v3[1];
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*v3 + 8 * i) = 0;
    }
    v3[3] = 0;
  }
  sub_20FCCD180(a1 + 43808);
  sub_20F89E9C8(v2, *(_QWORD **)(v2 + 8));
  *(_QWORD *)v2 = v2 + 8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  sub_20E86872C(v2 + 24, *(_QWORD **)(v2 + 32));
  *(_QWORD *)(v2 + 24) = v2 + 32;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 32) = 0;
}

double sub_20FC07C74(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v3;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t j;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t k;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  double result;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;

  v2 = (_QWORD *)(a1 + 40560);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_DWORD *)(a1 + 25248);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 176) = xmmword_2103B83D0;
  *(_OWORD *)(a1 + 192) = xmmword_2103B83E0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 224) = xmmword_2103B83F0;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = _Q1;
  *(_QWORD *)(a1 + 304) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 400) = _Q1;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 2184) = 0;
  if (*(_QWORD *)(a1 + 3128))
  {
    v9 = *(_QWORD **)(a1 + 3120);
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    *(_QWORD *)(a1 + 3120) = 0;
    v11 = *(_QWORD *)(a1 + 3112);
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 3104) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 3128) = 0;
  }
  sub_20F20CEEC((_DWORD *)(a1 + 25256), 0, 1u);
  *(_OWORD *)(a1 + 25344) = 0u;
  *(_OWORD *)(a1 + 25328) = 0u;
  *(_OWORD *)(a1 + 25312) = 0u;
  *(_OWORD *)(a1 + 25296) = 0u;
  *(_OWORD *)(a1 + 25280) = 0u;
  sub_20FA48CFC((_QWORD *)(a1 + 25360));
  v2[1] = *v2;
  v2[4] = v2[3];
  v2[7] = v2[6];
  v2[10] = v2[9];
  v2[13] = v2[12];
  v2[16] = v2[15];
  v2[19] = v2[18];
  v2[22] = v2[21];
  v2[25] = v2[24];
  v2[28] = v2[27];
  *v3 = 0;
  v160 = a1 + 5216;
  v169 = a1 + 5216;
  v170 = &v160;
  v13 = *(_QWORD *)(a1 + 5264);
  v14 = *(char **)(a1 + 5272);
  if ((char *)v13 != v14 && (unint64_t)&v14[-v13] >= 0xF0)
  {
    sub_20F3C8408(v13, v14, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v14[-v13] >> 3), 1);
    v15 = *(_QWORD *)(a1 + 5264);
    v167 = *(_QWORD *)(a1 + 5272);
    v168 = v15;
    v164 = v15;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 5216;
    v162 = &v168;
    v163 = &v167;
    sub_20F3C8298(&v169, (uint64_t)&v164, &v161);
    v13 = *(_QWORD *)(a1 + 5264);
  }
  *(_DWORD *)(a1 + 5248) = 0;
  *(_QWORD *)(a1 + 5256) = 0;
  *(_QWORD *)(a1 + 5272) = v13;
  *(_QWORD *)(a1 + 5200) = *(_QWORD *)(a1 + 5192);
  v160 = a1 + 5312;
  v169 = a1 + 5312;
  v170 = &v160;
  v16 = *(_QWORD *)(a1 + 5360);
  v17 = *(char **)(a1 + 5368);
  if ((char *)v16 != v17 && (unint64_t)&v17[-v16] >= 0xF0)
  {
    sub_20F4F3E4C(v16, v17, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v17[-v16] >> 3), 1);
    v18 = *(_QWORD *)(a1 + 5360);
    v167 = *(_QWORD *)(a1 + 5368);
    v168 = v18;
    v164 = v18;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 5312;
    v162 = &v168;
    v163 = &v167;
    sub_20F4F3CDC(&v169, (uint64_t)&v164, &v161);
    v16 = *(_QWORD *)(a1 + 5360);
  }
  *(_DWORD *)(a1 + 5344) = 0;
  *(_QWORD *)(a1 + 5352) = 0;
  *(_QWORD *)(a1 + 5368) = v16;
  *(_QWORD *)(a1 + 5296) = *(_QWORD *)(a1 + 5288);
  v160 = a1 + 5408;
  v169 = a1 + 5408;
  v170 = &v160;
  v19 = *(_QWORD *)(a1 + 5456);
  v20 = *(char **)(a1 + 5464);
  if ((char *)v19 != v20 && (unint64_t)&v20[-v19] >= 0xF0)
  {
    sub_20F4F23E4(v19, v20, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v20[-v19] >> 3), 1);
    v21 = *(_QWORD *)(a1 + 5456);
    v167 = *(_QWORD *)(a1 + 5464);
    v168 = v21;
    v164 = v21;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 5408;
    v162 = &v168;
    v163 = &v167;
    sub_20F3C8FCC(&v169, (uint64_t)&v164, &v161);
    v19 = *(_QWORD *)(a1 + 5456);
  }
  *(_DWORD *)(a1 + 5440) = 0;
  *(_QWORD *)(a1 + 5448) = 0;
  *(_QWORD *)(a1 + 5464) = v19;
  *(_QWORD *)(a1 + 5392) = *(_QWORD *)(a1 + 5384);
  v160 = a1 + 5504;
  v169 = a1 + 5504;
  v170 = &v160;
  v22 = *(_QWORD *)(a1 + 5552);
  v23 = *(char **)(a1 + 5560);
  if ((char *)v22 != v23 && (unint64_t)&v23[-v22] >= 0xF0)
  {
    sub_20F8B12C8(v22, v23, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v23[-v22] >> 3), 1);
    v24 = *(_QWORD *)(a1 + 5552);
    v167 = *(_QWORD *)(a1 + 5560);
    v168 = v24;
    v164 = v24;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 5504;
    v162 = &v168;
    v163 = &v167;
    sub_20F3C8FCC(&v169, (uint64_t)&v164, &v161);
    v22 = *(_QWORD *)(a1 + 5552);
  }
  *(_DWORD *)(a1 + 5536) = 0;
  *(_QWORD *)(a1 + 5544) = 0;
  *(_QWORD *)(a1 + 5560) = v22;
  *(_QWORD *)(a1 + 5488) = *(_QWORD *)(a1 + 5480);
  v160 = a1 + 5600;
  v169 = a1 + 5600;
  v170 = &v160;
  v25 = *(_QWORD *)(a1 + 5648);
  v26 = *(char **)(a1 + 5656);
  if ((char *)v25 != v26 && (unint64_t)&v26[-v25] >= 0xF0)
  {
    sub_20F8B0704(v25, v26, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v26[-v25] >> 3), 1);
    v27 = *(_QWORD *)(a1 + 5648);
    v167 = *(_QWORD *)(a1 + 5656);
    v168 = v27;
    v164 = v27;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 5600;
    v162 = &v168;
    v163 = &v167;
    sub_20F8B0594(&v169, (uint64_t)&v164, &v161);
    v25 = *(_QWORD *)(a1 + 5648);
  }
  *(_DWORD *)(a1 + 5632) = 0;
  *(_QWORD *)(a1 + 5640) = 0;
  *(_QWORD *)(a1 + 5656) = v25;
  *(_QWORD *)(a1 + 5584) = *(_QWORD *)(a1 + 5576);
  v160 = a1 + 5696;
  v169 = a1 + 5696;
  v170 = &v160;
  v28 = *(_QWORD *)(a1 + 5744);
  v29 = *(char **)(a1 + 5752);
  if ((char *)v28 != v29 && (unint64_t)&v29[-v28] >= 0xF0)
  {
    sub_20F4F3118(v28, v29, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v29[-v28] >> 3), 1);
    v30 = *(_QWORD *)(a1 + 5744);
    v167 = *(_QWORD *)(a1 + 5752);
    v168 = v30;
    v164 = v30;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 5696;
    v162 = &v168;
    v163 = &v167;
    sub_20F4F2FA8(&v169, (uint64_t)&v164, &v161);
    v28 = *(_QWORD *)(a1 + 5744);
  }
  *(_DWORD *)(a1 + 5728) = 0;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_QWORD *)(a1 + 5752) = v28;
  *(_QWORD *)(a1 + 5680) = *(_QWORD *)(a1 + 5672);
  v160 = a1 + 5792;
  v169 = a1 + 5792;
  v170 = &v160;
  v31 = *(_QWORD *)(a1 + 5840);
  v32 = *(char **)(a1 + 5848);
  if ((char *)v31 != v32 && (unint64_t)&v32[-v31] >= 0xF0)
  {
    sub_20F8AF9D0(v31, v32, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v32[-v31] >> 3), 1);
    v33 = *(_QWORD *)(a1 + 5840);
    v167 = *(_QWORD *)(a1 + 5848);
    v168 = v33;
    v164 = v33;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 5792;
    v162 = &v168;
    v163 = &v167;
    sub_20F8AF860(&v169, (uint64_t)&v164, &v161);
    v31 = *(_QWORD *)(a1 + 5840);
  }
  *(_DWORD *)(a1 + 5824) = 0;
  *(_QWORD *)(a1 + 5832) = 0;
  *(_QWORD *)(a1 + 5848) = v31;
  *(_QWORD *)(a1 + 5776) = *(_QWORD *)(a1 + 5768);
  v164 = a1 + 5888;
  sub_20F4F10A8(a1 + 5888, (uint64_t)&v164);
  *(_DWORD *)(a1 + 5920) = 0;
  *(_QWORD *)(a1 + 5928) = 0;
  *(_QWORD *)(a1 + 5944) = *(_QWORD *)(a1 + 5936);
  *(_QWORD *)(a1 + 5872) = *(_QWORD *)(a1 + 5864);
  v164 = a1 + 5984;
  sub_20F4EFDC4(a1 + 5984, (uint64_t)&v164);
  *(_DWORD *)(a1 + 6016) = 0;
  *(_QWORD *)(a1 + 6024) = 0;
  *(_QWORD *)(a1 + 6040) = *(_QWORD *)(a1 + 6032);
  *(_QWORD *)(a1 + 5968) = *(_QWORD *)(a1 + 5960);
  v164 = a1 + 6080;
  sub_20F4EEAE0(a1 + 6080, (uint64_t)&v164);
  *(_DWORD *)(a1 + 6112) = 0;
  *(_QWORD *)(a1 + 6120) = 0;
  *(_QWORD *)(a1 + 6136) = *(_QWORD *)(a1 + 6128);
  *(_QWORD *)(a1 + 6064) = *(_QWORD *)(a1 + 6056);
  v160 = a1 + 6176;
  v169 = a1 + 6176;
  v170 = &v160;
  v34 = *(_QWORD *)(a1 + 6224);
  v35 = *(char **)(a1 + 6232);
  if ((char *)v34 != v35 && (unint64_t)&v35[-v34] >= 0xF0)
  {
    sub_20F393388(v34, v35, (uint64_t)&v164, 126 - 2 * __clz((uint64_t)&v35[-v34] >> 3), 1);
    v36 = *(_QWORD *)(a1 + 6224);
    v167 = *(_QWORD *)(a1 + 6232);
    v168 = v36;
    v164 = v36;
    v165 = v167;
    v166 = &v170;
    v161 = a1 + 6176;
    v162 = &v168;
    v163 = &v167;
    sub_20F2B24F4(&v169, (uint64_t)&v164, &v161);
    v34 = *(_QWORD *)(a1 + 6224);
  }
  *(_DWORD *)(a1 + 6208) = 0;
  *(_QWORD *)(a1 + 6216) = 0;
  *(_QWORD *)(a1 + 6232) = v34;
  *(_QWORD *)(a1 + 6160) = *(_QWORD *)(a1 + 6152);
  v37 = *(_QWORD *)(a1 + 6256);
  v38 = *(_QWORD *)(a1 + 6248);
  while (v37 != v38)
  {
    v39 = *(std::__shared_weak_count **)(v37 - 16);
    if (!v39)
      goto LABEL_39;
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      v42 = *(std::__shared_weak_count **)(v37 - 304);
      if (!v42)
        goto LABEL_33;
    }
    else
    {
LABEL_39:
      v42 = *(std::__shared_weak_count **)(v37 - 304);
      if (!v42)
        goto LABEL_33;
    }
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
LABEL_33:
    v37 -= 504;
  }
  *(_QWORD *)(a1 + 6256) = v38;
  v45 = *(_QWORD *)(a1 + 6280);
  v46 = *(_QWORD *)(a1 + 6272);
  while (v45 != v46)
  {
    v47 = *(std::__shared_weak_count **)(v45 - 16);
    if (!v47)
      goto LABEL_53;
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v50 = *(std::__shared_weak_count **)(v45 - 152);
      if (!v50)
        goto LABEL_47;
    }
    else
    {
LABEL_53:
      v50 = *(std::__shared_weak_count **)(v45 - 152);
      if (!v50)
        goto LABEL_47;
    }
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
LABEL_47:
    v45 -= 280;
  }
  *(_QWORD *)(a1 + 6280) = v46;
  v53 = *(_QWORD *)(a1 + 6304);
  v54 = *(_QWORD *)(a1 + 6296);
  while (v53 != v54)
  {
    v55 = *(std::__shared_weak_count **)(v53 - 16);
    if (!v55)
      goto LABEL_67;
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      v58 = *(std::__shared_weak_count **)(v53 - 152);
      if (!v58)
        goto LABEL_61;
    }
    else
    {
LABEL_67:
      v58 = *(std::__shared_weak_count **)(v53 - 152);
      if (!v58)
        goto LABEL_61;
    }
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
LABEL_61:
    v53 -= 280;
  }
  *(_QWORD *)(a1 + 6304) = v54;
  v61 = *(_QWORD *)(a1 + 6328);
  v62 = *(_QWORD *)(a1 + 6320);
  while (v61 != v62)
  {
    v63 = *(std::__shared_weak_count **)(v61 - 16);
    if (!v63)
      goto LABEL_81;
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      v66 = *(std::__shared_weak_count **)(v61 - 152);
      if (!v66)
        goto LABEL_75;
    }
    else
    {
LABEL_81:
      v66 = *(std::__shared_weak_count **)(v61 - 152);
      if (!v66)
        goto LABEL_75;
    }
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
LABEL_75:
    v61 -= 280;
  }
  *(_QWORD *)(a1 + 6328) = v62;
  v69 = *(_QWORD *)(a1 + 6352);
  v70 = *(_QWORD *)(a1 + 6344);
  while (v69 != v70)
  {
    v71 = *(std::__shared_weak_count **)(v69 - 16);
    if (!v71)
      goto LABEL_95;
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
      v74 = *(std::__shared_weak_count **)(v69 - 104);
      if (!v74)
        goto LABEL_89;
    }
    else
    {
LABEL_95:
      v74 = *(std::__shared_weak_count **)(v69 - 104);
      if (!v74)
        goto LABEL_89;
    }
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
LABEL_89:
    v69 -= 160;
  }
  *(_QWORD *)(a1 + 6352) = v70;
  v77 = *(_QWORD *)(a1 + 6376);
  for (j = *(_QWORD *)(a1 + 6368); v77 != j; v77 -= 9616)
  {
    v79 = *(std::__shared_weak_count **)(v77 - 16);
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  *(_QWORD *)(a1 + 6376) = j;
  v82 = *(_QWORD *)(a1 + 6400);
  for (k = *(_QWORD *)(a1 + 6392); v82 != k; v82 -= 5336)
  {
    v84 = *(std::__shared_weak_count **)(v82 - 16);
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
  }
  *(_QWORD *)(a1 + 6400) = k;
  v87 = *(_QWORD *)(a1 + 6424);
  v88 = *(_QWORD *)(a1 + 6416);
  while (2)
  {
    if (v87 != v88)
    {
      v89 = *(std::__shared_weak_count **)(v87 - 16);
      if (!v89)
        goto LABEL_125;
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
        v92 = *(std::__shared_weak_count **)(v87 - 112);
        if (v92)
        {
LABEL_126:
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      else
      {
LABEL_125:
        v92 = *(std::__shared_weak_count **)(v87 - 112);
        if (v92)
          goto LABEL_126;
      }
      v87 -= 144;
      continue;
    }
    break;
  }
  *(_QWORD *)(a1 + 6424) = v88;
  v95 = *(_QWORD *)(a1 + 6448);
  v96 = *(_QWORD *)(a1 + 6440);
  while (2)
  {
    if (v95 != v96)
    {
      v97 = *(std::__shared_weak_count **)(v95 - 16);
      if (!v97)
        goto LABEL_139;
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
        v100 = *(std::__shared_weak_count **)(v95 - 120);
        if (v100)
        {
LABEL_140:
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
      }
      else
      {
LABEL_139:
        v100 = *(std::__shared_weak_count **)(v95 - 120);
        if (v100)
          goto LABEL_140;
      }
      v95 -= 152;
      continue;
    }
    break;
  }
  *(_QWORD *)(a1 + 6448) = v96;
  v103 = *(_QWORD *)(a1 + 6472);
  v104 = *(_QWORD *)(a1 + 6464);
  while (v103 != v104)
  {
    v105 = *(std::__shared_weak_count **)(v103 - 16);
    if (v105)
    {
      v106 = (unint64_t *)&v105->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v103 -= 304;
  }
  *(_QWORD *)(a1 + 6472) = v104;
  v108 = *(_QWORD *)(a1 + 6496);
  v109 = *(_QWORD *)(a1 + 6488);
  while (v108 != v109)
  {
    v110 = *(std::__shared_weak_count **)(v108 - 16);
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v108 -= 360;
  }
  *(_QWORD *)(a1 + 6496) = v109;
  v113 = *(_QWORD *)(a1 + 6520);
  v114 = *(_QWORD *)(a1 + 6512);
  while (v113 != v114)
  {
    v115 = *(std::__shared_weak_count **)(v113 - 16);
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v113 -= 112;
  }
  *(_QWORD *)(a1 + 6520) = v114;
  v118 = *(_QWORD *)(a1 + 6544);
  v119 = *(_QWORD *)(a1 + 6536);
  while (v118 != v119)
  {
    v120 = *(std::__shared_weak_count **)(v118 - 16);
    if (v120)
    {
      v121 = (unint64_t *)&v120->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v118 -= 208;
  }
  *(_QWORD *)(a1 + 6544) = v119;
  v123 = *(_QWORD *)(a1 + 6568);
  v124 = *(_QWORD *)(a1 + 6560);
  while (v123 != v124)
  {
    v125 = *(std::__shared_weak_count **)(v123 - 16);
    if (v125)
    {
      v126 = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v123 -= 208;
  }
  *(_QWORD *)(a1 + 6568) = v124;
  v128 = *(_QWORD *)(a1 + 6592);
  v129 = *(_QWORD *)(a1 + 6584);
  while (v128 != v129)
  {
    v130 = *(std::__shared_weak_count **)(v128 - 16);
    if (v130)
    {
      v131 = (unint64_t *)&v130->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v128 -= 176;
  }
  *(_QWORD *)(a1 + 6592) = v129;
  v133 = *(_QWORD *)(a1 + 6616);
  v134 = *(_QWORD *)(a1 + 6608);
  while (v133 != v134)
  {
    v135 = *(std::__shared_weak_count **)(v133 - 16);
    if (v135)
    {
      v136 = (unint64_t *)&v135->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v133 -= 176;
  }
  *(_QWORD *)(a1 + 6616) = v134;
  v138 = *(_QWORD *)(a1 + 6640);
  v139 = *(_QWORD *)(a1 + 6632);
  while (v138 != v139)
  {
    v140 = *(std::__shared_weak_count **)(v138 - 16);
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v138 -= 216;
  }
  *(_QWORD *)(a1 + 6640) = v139;
  v143 = *(_QWORD *)(a1 + 6664);
  v144 = *(_QWORD *)(a1 + 6656);
  while (v143 != v144)
  {
    v145 = *(std::__shared_weak_count **)(v143 - 16);
    if (v145)
    {
      v146 = (unint64_t *)&v145->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v143 -= 184;
  }
  *(_QWORD *)(a1 + 6664) = v144;
  v148 = *(_QWORD *)(a1 + 6688);
  v149 = *(_QWORD *)(a1 + 6680);
  while (v148 != v149)
  {
    v150 = *(std::__shared_weak_count **)(v148 - 16);
    if (v150)
    {
      v151 = (unint64_t *)&v150->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v148 -= 208;
  }
  *(_QWORD *)(a1 + 6688) = v149;
  v153 = *(_QWORD *)(a1 + 6712);
  v154 = *(_QWORD *)(a1 + 6704);
  while (v153 != v154)
  {
    v155 = *(std::__shared_weak_count **)(v153 - 16);
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v153 -= 184;
  }
  *(_QWORD *)(a1 + 6712) = v154;
  v158 = *(void **)(a1 + 6728);
  if (v158)
  {
    *(_QWORD *)(a1 + 6736) = v158;
    operator delete(v158);
  }
  *(_QWORD *)(a1 + 6792) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 6760) = 0u;
  *(_OWORD *)(a1 + 6776) = 0u;
  *(_OWORD *)(a1 + 6728) = 0u;
  *(_OWORD *)(a1 + 6744) = 0u;
  *(_WORD *)(a1 + 6800) = 1;
  *(_BYTE *)(a1 + 6802) = 1;
  *(_DWORD *)(a1 + 7864) = 0;
  *(_WORD *)(a1 + 7868) = 0;
  return result;
}

uint64_t sub_20FC08CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  const void *v18;
  int64_t v19;
  char *v20;
  char *v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v18 = *(const void **)a5;
  v17 = *(_QWORD *)(a5 + 8);
  v19 = v17 - *(_QWORD *)a5;
  if (v17 != *(_QWORD *)a5)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - *(_QWORD *)a5);
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v20;
    v21 = &v20[8 * (v19 >> 3)];
    *(_QWORD *)(a1 + 40) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 32) = v21;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v22 = *(const void **)a6;
  v23 = *(_QWORD *)(a6 + 8) - *(_QWORD *)a6;
  if (v23)
  {
    if (v23 < 0)
      sub_20E867F44();
    v24 = (char *)operator new(v23);
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = v24;
    v25 = &v24[8 * (v23 >> 3)];
    *(_QWORD *)(a1 + 64) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 56) = v25;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a8;
  *(_QWORD *)(a1 + 104) = a9;
  *(_QWORD *)(a1 + 112) = a11;
  *(_QWORD *)(a1 + 120) = a12;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a13;
  if (a7)
  {
    v26 = (unint64_t)a7[2];
    if (v26)
      sub_20FC08F30((void **)(a1 + 72), v26);
    v27 = *a7;
    v28 = a7[1];
    v29 = **a7;
    if (v29 <= -2)
    {
      do
      {
        v30 = (__clz(__rbit64(((*v27 >> 7) & ~*v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v27 = (_QWORD *)((char *)v27 + v30);
        v28 += 32 * v30;
        v29 = *(char *)v27;
      }
      while (v29 < -1);
    }
    if (v29 != 255)
    {
      v31 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v31) = *((_QWORD *)v28 + 2);
        v33 = *((unsigned __int8 *)v27 + 1);
        v27 = (_QWORD *)((char *)v27 + 1);
        v32 = v33;
        v28 += 32;
        if ((char)v33 <= -2)
        {
          do
          {
            v34 = (__clz(__rbit64(((*v27 >> 7) & ~*v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v27 = (_QWORD *)((char *)v27 + v34);
            v28 += 32 * v34;
          }
          while (*(char *)v27 < -1);
          v32 = *(unsigned __int8 *)v27;
        }
        ++v31;
      }
      while (v32 != 255);
    }
  }
  return a1;
}

void sub_20FC08EC0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v2;
  if (*v2)
  {
    v1[10] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v4;
      if (!*v4)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[7] = v7;
  operator delete(v7);
  v8 = *v4;
  if (!*v4)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[4] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_20FC08F20()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20FC08EE4);
  JUMPOUT(0x20FC08EDCLL);
}

void sub_20FC08F30(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    v14 = 8 * a2;
    bzero(v5, 8 * a2);
    a1[1] = &v5[v14];
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[8 * v9];
    v16 = 8 * a2;
    v17 = &v13[8 * v12];
    bzero(v15, v16);
    v18 = &v15[v16];
    if (v5 != v7)
    {
      v19 = v5 - v7 - 8;
      if (v19 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_28;
      v20 = (v19 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v21];
      v15 -= v21;
      v22 = &v13[8 * v9 - 16];
      v23 = v5 - 16;
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v15 - 1) = v26;
          v15 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v18;
    a1[2] = v17;
    if (v6)
      operator delete(v6);
  }
}

void sub_20FC090CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t j;

  v2 = a1 + 65584;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 63824);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 176) = xmmword_2103B83D0;
  *(_OWORD *)(a1 + 192) = xmmword_2103B83E0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 224) = xmmword_2103B83F0;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = _Q1;
  *(_QWORD *)(a1 + 304) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 400) = _Q1;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 2184) = 0;
  if (*(_QWORD *)(a1 + 3128))
  {
    v9 = *(_QWORD **)(a1 + 3120);
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    *(_QWORD *)(a1 + 3120) = 0;
    v11 = *(_QWORD *)(a1 + 3112);
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 3104) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 3128) = 0;
  }
  sub_20FC09280(a1 + 4856);
  if (v3[3])
  {
    v13 = (_QWORD *)v3[2];
    if (v13)
    {
      do
      {
        v14 = (_QWORD *)*v13;
        operator delete(v13);
        v13 = v14;
      }
      while (v14);
    }
    v3[2] = 0;
    v15 = v3[1];
    if (v15)
    {
      for (j = 0; j != v15; ++j)
        *(_QWORD *)(*v3 + 8 * j) = 0;
    }
    v3[3] = 0;
  }
  sub_20FCCD180(a1 + 63896);
  sub_20F89E9C8(v2, *(_QWORD **)(v2 + 8));
  *(_QWORD *)v2 = v2 + 8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  sub_20E86872C(v2 + 24, *(_QWORD **)(v2 + 32));
  *(_QWORD *)(v2 + 24) = v2 + 32;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 32) = 0;
}

double sub_20FC09280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double result;
  char v7;

  v2 = a1 + 58056;
  v3 = a1 + 57768;
  v4 = (_QWORD *)(a1 + 38200);
  v5 = a1 + 22864;
  sub_20F20CEEC((_DWORD *)(a1 + 22896), 0, 1u);
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  sub_20F922E48((uint64_t)&v7, (_QWORD *)(a1 + 23000));
  v4[1] = *v4;
  v4[4] = v4[3];
  v4[7] = v4[6];
  v4[10] = v4[9];
  v4[13] = v4[12];
  v4[16] = v4[15];
  v4[19] = v4[18];
  v4[22] = v4[21];
  v4[25] = v4[24];
  v4[28] = v4[27];
  *(_DWORD *)(a1 + 22888) = 0;
  sub_20FC09400(a1 + 312);
  *(_WORD *)(a1 + 2972) = 0;
  *(_DWORD *)(a1 + 2968) = 0;
  *(_DWORD *)(*(_QWORD *)(v3 + 144) + 363816) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  if (*(_BYTE *)(v3 + 286))
    *(_BYTE *)(v3 + 286) = 0;
  *(_BYTE *)(a1 + 58008) = 0;
  *(_QWORD *)(a1 + 58000) = 0;
  *(_OWORD *)(a1 + 58012) = 0u;
  *(_DWORD *)(a1 + 58028) = 0;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)v3;
  sub_20E866BE0(v2, *(char **)(v2 + 8));
  *(_QWORD *)v2 = v2 + 8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_BYTE *)(v3 + 283) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 58080) = 0u;
  *(_OWORD *)(a1 + 58096) = 0u;
  *(_OWORD *)(a1 + 58108) = 0u;
  return result;
}

double sub_20FC09400(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t i;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t j;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  double result;
  char v121;
  uint64_t v122;

  v2 = a1 + 8;
  sub_20FC0A2F0((uint64_t)&v121, a1 + 8);
  sub_20FC0A238((uint64_t)&v121, v2);
  sub_20FC0A180((uint64_t)&v121, v2);
  sub_20FC0A0C8((uint64_t)&v121, v2);
  sub_20FC0A010((uint64_t)&v121, v2);
  sub_20FC09F50((uint64_t)&v121, v2);
  v122 = a1 + 608;
  sub_20F4F10A8(a1 + 608, (uint64_t)&v122);
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 584);
  v122 = a1 + 704;
  sub_20F4EFDC4(a1 + 704, (uint64_t)&v122);
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a1 + 752);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 680);
  v122 = a1 + 800;
  sub_20F4EEAE0(a1 + 800, (uint64_t)&v122);
  *(_DWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a1 + 776);
  sub_20FC09E90((uint64_t)&v121, v2);
  sub_20FC09DD0((uint64_t)&v121, v2);
  v3 = *(_QWORD *)(a1 + 1072);
  v4 = *(_QWORD *)(a1 + 1064);
  while (v3 != v4)
  {
    v5 = *(std::__shared_weak_count **)(v3 - 16);
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(std::__shared_weak_count **)(v3 - 304);
      if (!v8)
        goto LABEL_2;
    }
    else
    {
LABEL_8:
      v8 = *(std::__shared_weak_count **)(v3 - 304);
      if (!v8)
        goto LABEL_2;
    }
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
LABEL_2:
    v3 -= 504;
  }
  *(_QWORD *)(a1 + 1072) = v4;
  v11 = *(_QWORD *)(a1 + 1096);
  v12 = *(_QWORD *)(a1 + 1088);
  while (v11 != v12)
  {
    v13 = *(std::__shared_weak_count **)(v11 - 16);
    if (!v13)
      goto LABEL_22;
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = *(std::__shared_weak_count **)(v11 - 152);
      if (!v16)
        goto LABEL_16;
    }
    else
    {
LABEL_22:
      v16 = *(std::__shared_weak_count **)(v11 - 152);
      if (!v16)
        goto LABEL_16;
    }
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_16:
    v11 -= 280;
  }
  *(_QWORD *)(a1 + 1096) = v12;
  v19 = *(_QWORD *)(a1 + 1120);
  v20 = *(_QWORD *)(a1 + 1112);
  while (v19 != v20)
  {
    v21 = *(std::__shared_weak_count **)(v19 - 16);
    if (!v21)
      goto LABEL_36;
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v24 = *(std::__shared_weak_count **)(v19 - 152);
      if (!v24)
        goto LABEL_30;
    }
    else
    {
LABEL_36:
      v24 = *(std::__shared_weak_count **)(v19 - 152);
      if (!v24)
        goto LABEL_30;
    }
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
LABEL_30:
    v19 -= 280;
  }
  *(_QWORD *)(a1 + 1120) = v20;
  v27 = *(_QWORD *)(a1 + 1144);
  v28 = *(_QWORD *)(a1 + 1136);
  while (v27 != v28)
  {
    v29 = *(std::__shared_weak_count **)(v27 - 16);
    if (!v29)
      goto LABEL_50;
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v32 = *(std::__shared_weak_count **)(v27 - 152);
      if (!v32)
        goto LABEL_44;
    }
    else
    {
LABEL_50:
      v32 = *(std::__shared_weak_count **)(v27 - 152);
      if (!v32)
        goto LABEL_44;
    }
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_44:
    v27 -= 280;
  }
  *(_QWORD *)(a1 + 1144) = v28;
  v35 = *(_QWORD *)(a1 + 1168);
  v36 = *(_QWORD *)(a1 + 1160);
  while (v35 != v36)
  {
    v37 = *(std::__shared_weak_count **)(v35 - 16);
    if (!v37)
      goto LABEL_64;
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      v40 = *(std::__shared_weak_count **)(v35 - 104);
      if (!v40)
        goto LABEL_58;
    }
    else
    {
LABEL_64:
      v40 = *(std::__shared_weak_count **)(v35 - 104);
      if (!v40)
        goto LABEL_58;
    }
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
LABEL_58:
    v35 -= 160;
  }
  *(_QWORD *)(a1 + 1168) = v36;
  v43 = *(_QWORD *)(a1 + 1192);
  for (i = *(_QWORD *)(a1 + 1184); v43 != i; v43 -= 8016)
  {
    v45 = *(std::__shared_weak_count **)(v43 - 16);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  *(_QWORD *)(a1 + 1192) = i;
  v48 = *(_QWORD *)(a1 + 1216);
  for (j = *(_QWORD *)(a1 + 1208); v48 != j; v48 -= 5336)
  {
    v50 = *(std::__shared_weak_count **)(v48 - 16);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  *(_QWORD *)(a1 + 1216) = j;
  v53 = *(_QWORD *)(a1 + 1240);
  v54 = *(_QWORD *)(a1 + 1232);
  while (2)
  {
    if (v53 != v54)
    {
      v55 = *(std::__shared_weak_count **)(v53 - 16);
      if (!v55)
        goto LABEL_94;
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        v58 = *(std::__shared_weak_count **)(v53 - 112);
        if (v58)
        {
LABEL_95:
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
      else
      {
LABEL_94:
        v58 = *(std::__shared_weak_count **)(v53 - 112);
        if (v58)
          goto LABEL_95;
      }
      v53 -= 144;
      continue;
    }
    break;
  }
  *(_QWORD *)(a1 + 1240) = v54;
  v61 = *(_QWORD *)(a1 + 1264);
  v62 = *(_QWORD *)(a1 + 1256);
  while (2)
  {
    if (v61 != v62)
    {
      v63 = *(std::__shared_weak_count **)(v61 - 16);
      if (!v63)
        goto LABEL_108;
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        v66 = *(std::__shared_weak_count **)(v61 - 120);
        if (v66)
        {
LABEL_109:
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
      }
      else
      {
LABEL_108:
        v66 = *(std::__shared_weak_count **)(v61 - 120);
        if (v66)
          goto LABEL_109;
      }
      v61 -= 152;
      continue;
    }
    break;
  }
  *(_QWORD *)(a1 + 1264) = v62;
  v69 = *(_QWORD *)(a1 + 1288);
  v70 = *(_QWORD *)(a1 + 1280);
  while (v69 != v70)
  {
    v71 = *(std::__shared_weak_count **)(v69 - 16);
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v69 -= 304;
  }
  *(_QWORD *)(a1 + 1288) = v70;
  v74 = *(_QWORD *)(a1 + 1312);
  v75 = *(_QWORD *)(a1 + 1304);
  while (v74 != v75)
  {
    v76 = *(std::__shared_weak_count **)(v74 - 16);
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v74 -= 360;
  }
  *(_QWORD *)(a1 + 1312) = v75;
  v79 = *(_QWORD *)(a1 + 1336);
  v80 = *(_QWORD *)(a1 + 1328);
  while (v79 != v80)
  {
    v81 = *(std::__shared_weak_count **)(v79 - 16);
    if (v81)
    {
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v79 -= 112;
  }
  *(_QWORD *)(a1 + 1336) = v80;
  v84 = *(_QWORD *)(a1 + 1360);
  v85 = *(_QWORD *)(a1 + 1352);
  while (v84 != v85)
  {
    v86 = *(std::__shared_weak_count **)(v84 - 16);
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v84 -= 208;
  }
  *(_QWORD *)(a1 + 1360) = v85;
  v89 = *(_QWORD *)(a1 + 1384);
  v90 = *(_QWORD *)(a1 + 1376);
  while (v89 != v90)
  {
    v91 = *(std::__shared_weak_count **)(v89 - 16);
    if (v91)
    {
      v92 = (unint64_t *)&v91->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v89 -= 208;
  }
  *(_QWORD *)(a1 + 1384) = v90;
  v94 = *(_QWORD *)(a1 + 1408);
  v95 = *(_QWORD *)(a1 + 1400);
  while (v94 != v95)
  {
    v96 = *(std::__shared_weak_count **)(v94 - 16);
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v94 -= 176;
  }
  *(_QWORD *)(a1 + 1408) = v95;
  v99 = *(_QWORD *)(a1 + 1432);
  v100 = *(_QWORD *)(a1 + 1424);
  while (v99 != v100)
  {
    v101 = *(std::__shared_weak_count **)(v99 - 16);
    if (v101)
    {
      v102 = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v99 -= 176;
  }
  *(_QWORD *)(a1 + 1432) = v100;
  v104 = *(_QWORD *)(a1 + 1456);
  v105 = *(_QWORD *)(a1 + 1448);
  while (v104 != v105)
  {
    v106 = *(std::__shared_weak_count **)(v104 - 16);
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v104 -= 216;
  }
  *(_QWORD *)(a1 + 1456) = v105;
  v109 = *(_QWORD *)(a1 + 1480);
  v110 = *(_QWORD *)(a1 + 1472);
  while (v109 != v110)
  {
    v111 = *(std::__shared_weak_count **)(v109 - 16);
    if (v111)
    {
      v112 = (unint64_t *)&v111->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v109 -= 184;
  }
  *(_QWORD *)(a1 + 1480) = v110;
  v114 = *(_QWORD *)(a1 + 1504);
  v115 = *(_QWORD *)(a1 + 1496);
  while (v114 != v115)
  {
    v116 = *(std::__shared_weak_count **)(v114 - 16);
    if (v116)
    {
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v114 -= 208;
  }
  *(_QWORD *)(a1 + 1504) = v115;
  v119 = *(void **)(a1 + 1520);
  if (v119)
  {
    *(_QWORD *)(a1 + 1528) = v119;
    operator delete(v119);
  }
  *(_QWORD *)(a1 + 1584) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_WORD *)(a1 + 1592) = 1;
  *(_BYTE *)(a1 + 1594) = 1;
  return result;
}

uint64_t sub_20FC09DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 984;
  v7 = a2 + 984;
  v12 = a2 + 984;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 1032);
  v5 = *(char **)(a2 + 1040);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F393388(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 1032);
    v10 = *(_QWORD *)(a2 + 1040);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F2B24F4(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 1032);
  }
  *(_DWORD *)(a2 + 1016) = 0;
  *(_QWORD *)(a2 + 1024) = 0;
  *(_QWORD *)(a2 + 1040) = result;
  *(_QWORD *)(a2 + 968) = *(_QWORD *)(a2 + 960);
  return result;
}

uint64_t sub_20FC09E90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 888;
  v7 = a2 + 888;
  v12 = a2 + 888;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 936);
  v5 = *(char **)(a2 + 944);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F8AF9D0(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 936);
    v10 = *(_QWORD *)(a2 + 944);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F8AF860(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 936);
  }
  *(_DWORD *)(a2 + 920) = 0;
  *(_QWORD *)(a2 + 928) = 0;
  *(_QWORD *)(a2 + 944) = result;
  *(_QWORD *)(a2 + 872) = *(_QWORD *)(a2 + 864);
  return result;
}

uint64_t sub_20FC09F50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 504;
  v7 = a2 + 504;
  v12 = a2 + 504;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 552);
  v5 = *(char **)(a2 + 560);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F4F3118(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 552);
    v10 = *(_QWORD *)(a2 + 560);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F4F2FA8(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 552);
  }
  *(_DWORD *)(a2 + 536) = 0;
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a2 + 560) = result;
  *(_QWORD *)(a2 + 488) = *(_QWORD *)(a2 + 480);
  return result;
}

uint64_t sub_20FC0A010(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 408;
  v7 = a2 + 408;
  v12 = a2 + 408;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 456);
  v5 = *(char **)(a2 + 464);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F8B0704(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 456);
    v10 = *(_QWORD *)(a2 + 464);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F8B0594(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 456);
  }
  *(_DWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a2 + 464) = result;
  *(_QWORD *)(a2 + 392) = *(_QWORD *)(a2 + 384);
  return result;
}

uint64_t sub_20FC0A0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 312;
  v7 = a2 + 312;
  v12 = a2 + 312;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 360);
  v5 = *(char **)(a2 + 368);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F8B12C8(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 360);
    v10 = *(_QWORD *)(a2 + 368);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F3C8FCC(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 360);
  }
  *(_DWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 368) = result;
  *(_QWORD *)(a2 + 296) = *(_QWORD *)(a2 + 288);
  return result;
}

uint64_t sub_20FC0A180(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 216;
  v7 = a2 + 216;
  v12 = a2 + 216;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 264);
  v5 = *(char **)(a2 + 272);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F4F23E4(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 264);
    v10 = *(_QWORD *)(a2 + 272);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F3C8FCC(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 264);
  }
  *(_DWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 272) = result;
  *(_QWORD *)(a2 + 200) = *(_QWORD *)(a2 + 192);
  return result;
}

uint64_t sub_20FC0A238(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 120;
  v7 = a2 + 120;
  v12 = a2 + 120;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 168);
  v5 = *(char **)(a2 + 176);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F4F3E4C(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 168);
    v10 = *(_QWORD *)(a2 + 176);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F4F3CDC(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 168);
  }
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 176) = result;
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a2 + 96);
  return result;
}

uint64_t sub_20FC0A2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v3 = a2 + 24;
  v7 = a2 + 24;
  v12 = a2 + 24;
  v13 = &v7;
  result = *(_QWORD *)(a2 + 72);
  v5 = *(char **)(a2 + 80);
  if ((char *)result != v5 && (unint64_t)&v5[-result] >= 0xF0)
  {
    sub_20F3C8408(result, v5, (uint64_t)v9, 126 - 2 * __clz((uint64_t)&v5[-result] >> 3), 1);
    v6 = *(_QWORD *)(a2 + 72);
    v10 = *(_QWORD *)(a2 + 80);
    v11 = v6;
    v9[0] = v6;
    v9[1] = v10;
    v9[2] = &v13;
    v8[0] = v3;
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)&v10;
    sub_20F3C8298(&v12, (uint64_t)v9, v8);
    result = *(_QWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  return result;
}

uint64_t sub_20FC0A3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  const void *v18;
  int64_t v19;
  char *v20;
  char *v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v18 = *(const void **)a5;
  v17 = *(_QWORD *)(a5 + 8);
  v19 = v17 - *(_QWORD *)a5;
  if (v17 != *(_QWORD *)a5)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - *(_QWORD *)a5);
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v20;
    v21 = &v20[8 * (v19 >> 3)];
    *(_QWORD *)(a1 + 40) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 32) = v21;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v22 = *(const void **)a6;
  v23 = *(_QWORD *)(a6 + 8) - *(_QWORD *)a6;
  if (v23)
  {
    if (v23 < 0)
      sub_20E867F44();
    v24 = (char *)operator new(v23);
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = v24;
    v25 = &v24[8 * (v23 >> 3)];
    *(_QWORD *)(a1 + 64) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 56) = v25;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a8;
  *(_QWORD *)(a1 + 104) = a9;
  *(_QWORD *)(a1 + 112) = a11;
  *(_QWORD *)(a1 + 120) = a12;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a13;
  if (a7)
  {
    v26 = (unint64_t)a7[2];
    if (v26)
      sub_20FC08F30((void **)(a1 + 72), v26);
    v27 = *a7;
    v28 = a7[1];
    v29 = **a7;
    if (v29 <= -2)
    {
      do
      {
        v30 = (__clz(__rbit64(((*v27 >> 7) & ~*v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v27 = (_QWORD *)((char *)v27 + v30);
        v28 += 32 * v30;
        v29 = *(char *)v27;
      }
      while (v29 < -1);
    }
    if (v29 != 255)
    {
      v31 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v31) = *((_QWORD *)v28 + 2);
        v33 = *((unsigned __int8 *)v27 + 1);
        v27 = (_QWORD *)((char *)v27 + 1);
        v32 = v33;
        v28 += 32;
        if ((char)v33 <= -2)
        {
          do
          {
            v34 = (__clz(__rbit64(((*v27 >> 7) & ~*v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v27 = (_QWORD *)((char *)v27 + v34);
            v28 += 32 * v34;
          }
          while (*(char *)v27 < -1);
          v32 = *(unsigned __int8 *)v27;
        }
        ++v31;
      }
      while (v32 != 255);
    }
  }
  return a1;
}

void sub_20FC0A598(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v2;
  if (*v2)
  {
    v1[10] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v4;
      if (!*v4)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[7] = v7;
  operator delete(v7);
  v8 = *v4;
  if (!*v4)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[4] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_20FC0A5F8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20FC0A5BCLL);
  JUMPOUT(0x20FC0A5B4);
}

uint64_t sub_20FC0A608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  unsigned int v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t **v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __n128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 *v75;
  __int128 *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 *v79;
  __int128 *v80;
  unsigned int v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  int v85;
  void *v86;
  void *v87;
  void *v88;
  float64_t v89;
  float64_t v90;
  _QWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  void *v94;
  int v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  _DWORD *v116;
  int64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  float64x2_t *v122;
  float64x2_t *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v131;
  char *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  unsigned int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int v145;
  __int128 *v146;
  __int128 *v147;
  unint64_t v148;
  unint64_t v149;
  __int128 *v150;
  __int128 *v151;
  unsigned int v152;
  _QWORD *v153;
  _QWORD *v154;
  void *v155;
  int v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  _QWORD *v173;
  _QWORD *v174;
  void *v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  float64x2_t *v192;
  float64x2_t *v193;
  uint64_t v194;
  int v195;
  __int128 *v196;
  uint64_t v197;
  _QWORD *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  BOOL v205;
  __int16 v206;
  uint64_t v207;
  float64x2_t v209;
  int8x16_t v212;
  int8x16_t v213;
  float64x2_t v218;
  int64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  int8x16_t v224;
  char *v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  _BYTE *v233;
  _DWORD *v234;
  char *v235;
  int64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  _OWORD *v241;
  char *v242;
  uint64_t v243;
  __int128 v244;
  int v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  int v258;
  __int128 v259;
  uint64_t v260;
  unint64_t v261;
  __int128 *v262;
  _OWORD *i;
  __int128 v264;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  int v272;
  int8x16_t *v273;
  int8x16_t *v274;
  int8x16_t v275;
  uint64_t v276;
  double v277;
  uint64_t v278;
  double v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  double v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  float64x2_t *v297;
  uint64_t v298;
  uint64_t v299;
  int64x2_t v300;
  float64x2_t v301;
  __int128 v302;
  __int128 v303;
  int64x2_t v304;
  uint64_t v305;
  double v306;
  uint64_t v307;
  double v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  double v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int64x2_t v342;
  float64x2_t v343;
  double v344;
  double v345;
  int64x2_t v346;
  uint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  unsigned int v350;
  unsigned int v351;
  char *v352;
  char *v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  char *v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  _QWORD *v362;
  uint64_t v363;
  int v364;
  uint64_t *v365;
  uint64_t *v366;
  uint64_t v367;
  int v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  _QWORD *v384;
  unint64_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  _QWORD *v390;
  int v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int v403;
  char *v404;
  char *v405;
  unint64_t v406;
  unint64_t v407;
  char *v408;
  char *v409;
  unsigned int v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  _QWORD *v425;
  uint64_t v426;
  BOOL v427;
  _QWORD *v428;
  _QWORD *v429;
  uint64_t v430;
  _QWORD *v431;
  int v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int v437;
  unsigned int v438;
  float64_t *v439;
  float64x2_t v440;
  float64_t *v441;
  int v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  int v446;
  unsigned int v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  BOOL v452;
  uint64_t v453;
  unsigned int v454;
  unsigned int *v455;
  double *v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  uint64_t v464;
  char *v465;
  __int128 *v466;
  char *v467;
  unint64_t *v468;
  char *v469;
  char *v470;
  char *v471;
  unint64_t v472;
  unint64_t v473;
  unsigned int *v474;
  char *v475;
  unsigned int v476;
  _BOOL4 v477;
  uint64_t v478;
  __int128 v479;
  __int128 v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *p_shared_owners;
  unint64_t v484;
  float64_t v485;
  unint64_t *v486;
  unint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  unsigned int *v492;
  unsigned int *v493;
  double v494;
  int32x2_t v495;
  double v496;
  __int8 v497;
  double v498;
  uint64_t v499;
  char *v500;
  __int128 *v501;
  char *v502;
  unint64_t *v503;
  char *v504;
  char *v505;
  char *v506;
  unint64_t v507;
  unint64_t v508;
  unsigned int *v509;
  char *v510;
  unsigned int v511;
  _BOOL4 v512;
  uint64_t v513;
  __int128 v514;
  __int128 v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  float64_t v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  float64x2_t *v526;
  unsigned int *v527;
  unsigned int *v528;
  double v529;
  uint64_t v530;
  unsigned int v531;
  __int128 v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  double v536;
  double v537;
  double v538;
  double v539;
  float64_t v540;
  float64_t v541;
  float64_t v542;
  float64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  uint64_t v548;
  __int128 v549;
  __int128 v550;
  uint64_t v551;
  uint64_t v552;
  __int128 v553;
  uint64_t v554;
  uint64_t v555;
  double v556;
  float64x2_t v557;
  double v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  unint64_t *v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64_t v567;
  int v568;
  __int128 *v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  float64x2_t v574;
  float64x2_t v575;
  __n128 v576;
  float64x2_t v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  char *v587;
  __int128 *v588;
  char *v589;
  unint64_t *v590;
  char *v591;
  int64x2_t v592;
  int64x2_t *v593;
  uint64_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v601;
  int64x2_t v602;
  float64x2_t v604;
  float64x2_t v607;
  int8x16_t v608;
  unint64_t v609;
  unint64_t v610;
  __int128 v611;
  unint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unsigned int v618;
  char *v619;
  char *v620;
  unint64_t v621;
  unint64_t v622;
  char *v623;
  char *v624;
  unsigned int v625;
  _QWORD *v626;
  _QWORD *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  uint64_t v634;
  _QWORD *v635;
  _QWORD *v636;
  uint64_t v637;
  _QWORD *v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v643;
  int v644;
  char v645;
  __int128 v646;
  uint64_t v647;
  char *j;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  __int128 v652;
  uint64_t v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  uint64_t v657;
  __int128 v658;
  uint64_t v659;
  _QWORD *v660;
  unint64_t *v661;
  int v662;
  __int128 *v663;
  uint64_t v664;
  unint64_t v665;
  std::__shared_weak_count *v666;
  unint64_t *v667;
  unint64_t v668;
  float64_t v669;
  unint64_t *v670;
  unint64_t v671;
  int v672;
  unint64_t v673;
  std::__shared_weak_count *v674;
  unint64_t *v675;
  unint64_t v676;
  unint64_t *v677;
  uint64_t k;
  uint64_t v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  float64x2_t v693;
  float64x2_t v694;
  char v696;
  _QWORD *v697;
  _QWORD *v698;
  uint64_t v699;
  uint64_t *v700;
  uint64_t *v701;
  uint64_t *v702;
  char *v703;
  char *v704;
  char *v705;
  char *v706;
  unsigned int v707;
  uint64_t *v708;
  uint64_t *v709;
  double *v710;
  BOOL v711;
  BOOL v712;
  char *v713;
  unint64_t v714;
  unint64_t v715;
  unsigned int *v716;
  char *v717;
  unsigned int v718;
  char *v719;
  unint64_t v720;
  unint64_t v721;
  unsigned int *v722;
  char *v723;
  unsigned int v724;
  _QWORD *v725;
  _QWORD *v726;
  _QWORD *v727;
  _QWORD *v728;
  uint64_t v729;
  uint64_t v730;
  BOOL v731;
  _QWORD *v732;
  unint64_t v733;
  char *v734;
  char *v735;
  unint64_t v736;
  unint64_t v737;
  unint64_t *v738;
  unint64_t v739;
  char *v740;
  _BYTE *v741;
  int v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  uint64_t v748;
  _QWORD *v749;
  _QWORD *v750;
  uint64_t v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  double v758;
  uint64_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  _QWORD *v763;
  char *v764;
  std::__shared_weak_count *v765;
  int v766;
  unint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  size_t v771;
  const char *v772;
  int v773;
  unint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  size_t v778;
  const char *v779;
  unint64_t *v780;
  unint64_t v781;
  uint64_t v782;
  float64x2_t v783;
  float64x2_t v784;
  _QWORD *v785;
  char *v786;
  double v787;
  std::__shared_weak_count *v788;
  unint64_t *v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t v792;
  unsigned int v793;
  void **v794;
  unint64_t v795;
  int8x8_t v796;
  uint8x8_t v797;
  unint64_t v798;
  _QWORD *v799;
  _QWORD *v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  __int128 v804;
  unint64_t *v805;
  unint64_t v806;
  unint64_t v807;
  unint64_t *v808;
  unint64_t *v809;
  float64_t v810;
  unint64_t v811;
  _QWORD *v812;
  unint64_t v813;
  unint64_t *v814;
  _QWORD *v815;
  unint64_t v816;
  char v817;
  char *v818;
  char *v819;
  unint64_t v820;
  unint64_t v821;
  unsigned int *v822;
  char *v823;
  unsigned int v824;
  unint64_t v825;
  unint64_t *v826;
  unint64_t *v827;
  unint64_t *v828;
  __int128 v829;
  __int128 v830;
  unint64_t v831;
  unint64_t *v832;
  unint64_t *v833;
  unint64_t v834;
  __int128 v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  __int128 v839;
  __int128 v840;
  unint64_t v841;
  __int128 v842;
  std::__shared_weak_count *v843;
  unint64_t *v844;
  unint64_t v845;
  std::__shared_weak_count *v846;
  unint64_t *v847;
  unint64_t v848;
  std::__shared_weak_count *v849;
  unint64_t *v850;
  unint64_t v851;
  std::__shared_weak_count *v852;
  unint64_t *v853;
  unint64_t v854;
  std::__shared_weak_count *v855;
  unint64_t *v856;
  unint64_t v857;
  std::__shared_weak_count *v858;
  unint64_t *v859;
  unint64_t v860;
  _QWORD *v861;
  unsigned int v862;
  __int128 v863;
  uint64_t v864;
  unint64_t *v865;
  unint64_t v866;
  unsigned int v867;
  unint64_t v868;
  uint64_t v869;
  unint64_t *v870;
  unint64_t *v871;
  unint64_t *v872;
  unint64_t v873;
  unint64_t *v874;
  unint64_t v875;
  unint64_t *v876;
  unint64_t *v877;
  unint64_t v878;
  char v879;
  char *v880;
  char *v881;
  uint64_t v882;
  unint64_t v883;
  char *v884;
  unint64_t v885;
  unint64_t v886;
  unsigned int *v887;
  char *v888;
  unsigned int v889;
  uint64_t v890;
  unint64_t v891;
  unsigned int *v892;
  char *v893;
  unsigned int v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  float64_t v898;
  uint64_t v899;
  unint64_t *v900;
  unint64_t *v901;
  __int128 v902;
  __int128 v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t *v907;
  std::__shared_weak_count *v908;
  unint64_t *v909;
  unint64_t v910;
  unint64_t *v911;
  unint64_t v912;
  std::__shared_weak_count *v913;
  unint64_t *v914;
  unint64_t v915;
  unint64_t v916;
  void **v917;
  unint64_t v918;
  char *v919;
  std::__shared_weak_count *v920;
  unint64_t *v921;
  unint64_t v922;
  std::__shared_weak_count *v923;
  unint64_t *v924;
  unint64_t v925;
  std::__shared_weak_count *v926;
  unint64_t *v927;
  unint64_t v928;
  std::__shared_weak_count *v929;
  unint64_t *v930;
  unint64_t v931;
  std::__shared_weak_count *v932;
  unint64_t *v933;
  unint64_t v934;
  unint64_t *v935;
  std::__shared_weak_count *v936;
  unint64_t *v937;
  unint64_t v938;
  unint64_t *v939;
  unint64_t v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  unint64_t v943;
  unint64_t *v944;
  __int128 v945;
  __int128 v946;
  unint64_t v947;
  float64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  unint64_t v953;
  char *v954;
  __int128 v955;
  uint64_t v956;
  float64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  char v962;
  __int128 v963;
  __int128 v964;
  uint64_t v965;
  uint64_t v966;
  __int128 v967;
  __int128 v968;
  uint64_t v969;
  double *v970;
  float64_t v971;
  float64_t v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  std::__shared_weak_count *v976;
  unint64_t *v977;
  unint64_t v978;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  std::__shared_weak_count *v982;
  unint64_t *v983;
  unint64_t v984;
  std::__shared_weak_count *v985;
  unint64_t *v986;
  unint64_t v987;
  unint64_t v988;
  unint64_t v989;
  char *v990;
  unint64_t *v991;
  __int128 v992;
  __int128 v993;
  unint64_t v994;
  float64_t v995;
  uint64_t v996;
  unint64_t v997;
  char *v998;
  __int128 v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  char v1006;
  __int128 v1007;
  __int128 v1008;
  uint64_t v1009;
  uint64_t v1010;
  __int128 v1011;
  __int128 v1012;
  uint64_t v1013;
  double *v1014;
  float64_t v1015;
  float64_t v1016;
  std::__shared_weak_count *v1017;
  unint64_t *v1018;
  unint64_t v1019;
  std::__shared_weak_count *v1020;
  unint64_t *v1021;
  unint64_t v1022;
  std::__shared_weak_count *v1023;
  unint64_t *v1024;
  unint64_t v1025;
  std::__shared_weak_count *v1026;
  unint64_t *v1027;
  unint64_t v1028;
  std::__shared_weak_count *v1029;
  unint64_t *v1030;
  unint64_t v1031;
  unsigned __int8 v1032;
  const char *v1033;
  size_t v1034;
  _BYTE *v1035;
  unint64_t v1036;
  const char *v1037;
  uint64_t v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  _BYTE *v1043;
  uint64_t v1044;
  uint64_t v1045;
  NSObject *v1046;
  size_t v1047;
  std::__shared_weak_count_vtbl *v1048;
  std::__shared_weak_count *v1049;
  std::__shared_weak_count *v1050;
  unint64_t *v1051;
  unint64_t v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  float64_t v1058;
  std::__shared_weak_count *v1059;
  unint64_t *v1060;
  unint64_t v1061;
  std::__shared_weak_count *v1062;
  unint64_t *v1063;
  unint64_t v1064;
  void *v1065;
  std::__shared_weak_count *v1066;
  unint64_t *v1067;
  unint64_t v1068;
  std::__shared_weak_count *v1069;
  unint64_t *v1070;
  unint64_t v1071;
  std::__shared_weak_count *v1072;
  unint64_t *v1073;
  unint64_t v1074;
  std::__shared_weak_count *v1075;
  unint64_t *v1076;
  unint64_t v1077;
  void *v1078;
  std::__shared_weak_count *v1079;
  unint64_t *v1080;
  unint64_t v1081;
  uint64_t v1082;
  unint64_t v1083;
  std::__shared_weak_count *v1084;
  unint64_t *v1085;
  unint64_t v1086;
  unint64_t *v1087;
  unsigned __int8 v1088;
  const char *v1089;
  size_t v1090;
  _BYTE *v1091;
  unint64_t v1092;
  const char *v1093;
  uint64_t v1094;
  int v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  _BYTE *v1099;
  uint64_t v1100;
  uint64_t v1101;
  NSObject *v1102;
  size_t v1103;
  std::__shared_weak_count_vtbl *v1104;
  std::__shared_weak_count *v1105;
  std::__shared_weak_count *v1106;
  unint64_t *v1107;
  unint64_t v1108;
  unint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  float64_t v1114;
  std::__shared_weak_count *v1115;
  unint64_t *v1116;
  unint64_t v1117;
  std::__shared_weak_count *v1118;
  unint64_t *v1119;
  unint64_t v1120;
  void *v1121;
  std::__shared_weak_count *v1122;
  unint64_t *v1123;
  unint64_t v1124;
  std::__shared_weak_count *v1125;
  unint64_t *v1126;
  unint64_t v1127;
  std::__shared_weak_count *v1128;
  unint64_t *v1129;
  unint64_t v1130;
  std::__shared_weak_count *v1131;
  unint64_t *v1132;
  unint64_t v1133;
  void *v1134;
  unint64_t *v1135;
  uint64_t v1137;
  int v1138;
  uint64_t v1139;
  uint64_t *v1140;
  __int128 **v1141;
  __int128 **m;
  __int128 *v1143;
  __int128 v1144;
  int *v1145;
  int *n;
  uint64_t v1147;
  int v1148;
  uint64_t *v1149;
  _QWORD *v1150;
  _QWORD *v1151;
  uint64_t v1152;
  uint64_t ii;
  uint64_t v1154;
  void *v1155;
  unint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  _QWORD *v1161;
  _QWORD *v1162;
  void *v1163;
  _QWORD *v1164;
  _QWORD *v1165;
  void *v1166;
  int *v1167;
  int *v1168;
  char *v1169;
  char *v1170;
  void *v1171;
  _QWORD *v1172;
  uint64_t v1173;
  unsigned int v1174;
  uint64_t *v1175;
  uint64_t *v1176;
  uint64_t v1177;
  uint64_t v1178;
  size_t v1179;
  size_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  unint64_t v1185;
  unsigned int v1186;
  unint64_t v1187;
  unint64_t v1188;
  uint64_t v1189;
  unsigned int v1190;
  int v1192;
  uint64_t v1193;
  int *v1194;
  int *v1195;
  unint64_t v1196;
  int *v1197;
  uint64_t v1198;
  uint64_t *v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  __int128 **v1203;
  __int128 **v1204;
  __int128 *v1205;
  __int128 v1206;
  uint64_t v1207;
  int v1208;
  __n128 v1209;
  uint64_t *v1210;
  _QWORD *v1211;
  _QWORD *v1212;
  uint64_t v1213;
  uint64_t jj;
  uint64_t v1215;
  void *v1216;
  unint64_t v1217;
  uint64_t **v1218;
  uint64_t v1219;
  unint64_t v1220;
  _QWORD *v1221;
  _QWORD *v1222;
  void *v1223;
  _QWORD *v1224;
  _QWORD *v1225;
  void *v1226;
  int *v1227;
  int *v1228;
  uint64_t v1229;
  unsigned int v1230;
  uint64_t *v1231;
  uint64_t *v1232;
  uint64_t v1233;
  uint64_t v1234;
  size_t v1235;
  char *v1236;
  size_t v1237;
  char *v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  unint64_t v1243;
  unsigned int v1244;
  unint64_t v1245;
  unint64_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  BOOL v1249;
  int v1250;
  void *v1251;
  uint64_t v1252;
  uint64_t v1253;
  int *v1254;
  int *v1255;
  unint64_t v1256;
  int *v1257;
  uint64_t v1258;
  uint64_t *v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  __int128 **v1263;
  __int128 **v1264;
  __int128 *v1265;
  __int128 v1266;
  uint64_t v1267;
  int v1268;
  uint64_t *v1269;
  _QWORD *v1270;
  _QWORD *v1271;
  void *v1272;
  _QWORD *v1273;
  _QWORD *v1274;
  void *v1275;
  int *v1276;
  int *v1277;
  char *v1278;
  char *v1279;
  void *v1280;
  _QWORD *v1281;
  uint64_t v1282;
  unsigned int v1283;
  uint64_t *v1284;
  uint64_t *v1285;
  uint64_t v1286;
  uint64_t v1287;
  size_t v1288;
  size_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  unsigned int v1295;
  unint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unsigned int v1299;
  BOOL v1300;
  int v1301;
  float64x2_t v1302;
  _QWORD *v1303;
  _QWORD *v1304;
  int v1305;
  _QWORD *v1306;
  _QWORD *v1307;
  _QWORD *v1308;
  _QWORD *v1309;
  _QWORD *v1310;
  _QWORD *v1311;
  unsigned int v1312;
  uint64_t v1313;
  int64x2_t v1314;
  int64x2_t v1315;
  float64x2_t v1318;
  int8x16_t v1320;
  int8x16_t v1321;
  double v1322;
  float64x2_t v1325;
  int64x2_t v1326;
  _QWORD *v1328;
  _QWORD *v1329;
  __int128 *v1330;
  std::__shared_weak_count *v1331;
  int64x2_t v1332;
  uint64_t v1333;
  _QWORD *v1334;
  _QWORD *v1335;
  int8x8_t v1336;
  unint64_t v1337;
  uint8x8_t v1338;
  unint64_t v1339;
  uint64_t **v1340;
  uint64_t *v1341;
  uint64_t v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  uint64_t v1351;
  unint64_t *v1352;
  unint64_t v1353;
  std::__shared_weak_count *v1354;
  unint64_t *v1355;
  unint64_t v1356;
  _QWORD *v1357;
  _QWORD *v1358;
  unint64_t *v1359;
  unint64_t v1360;
  _QWORD *v1361;
  _QWORD *v1362;
  void *v1363;
  _QWORD *v1364;
  _QWORD *v1365;
  int v1366;
  _QWORD *v1367;
  _QWORD *v1368;
  _QWORD *v1369;
  _QWORD *v1370;
  _QWORD *v1371;
  _QWORD *v1372;
  unsigned int v1373;
  uint64_t v1374;
  float64_t v1375;
  float64_t v1376;
  float64x2_t v1377;
  uint64_t v1378;
  __int128 v1379;
  _QWORD *v1380;
  _QWORD *v1381;
  std::__shared_weak_count *v1382;
  uint64_t v1383;
  _QWORD *v1384;
  _QWORD *v1385;
  int8x8_t v1386;
  unint64_t v1387;
  uint8x8_t v1388;
  unint64_t v1389;
  uint64_t **v1390;
  uint64_t *v1391;
  uint64_t v1392;
  unint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  __int128 *v1397;
  unint64_t *v1398;
  unint64_t v1399;
  std::__shared_weak_count *v1400;
  unint64_t *v1401;
  unint64_t v1402;
  _QWORD *v1403;
  _QWORD *v1404;
  unint64_t *v1405;
  unint64_t v1406;
  _QWORD *v1407;
  _QWORD *v1408;
  void *v1409;
  _QWORD *v1410;
  unint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  _QWORD *v1419;
  _QWORD *v1420;
  __int128 v1421;
  _QWORD *v1422;
  _QWORD *v1423;
  int v1424;
  uint64_t *v1425;
  _OWORD *v1426;
  float64_t v1427;
  _QWORD *v1428;
  _QWORD *v1429;
  _QWORD *v1430;
  _QWORD *v1431;
  _QWORD *v1432;
  _QWORD *v1433;
  _QWORD *v1434;
  _QWORD *v1435;
  unint64_t kk;
  uint64_t v1437;
  uint64_t v1438;
  _QWORD *v1439;
  _QWORD *v1440;
  __int128 v1441;
  _QWORD *v1442;
  _QWORD *v1443;
  int v1444;
  uint64_t *v1445;
  _OWORD *v1446;
  float64_t v1447;
  _QWORD *v1448;
  _QWORD *v1449;
  _QWORD *v1450;
  _QWORD *v1451;
  uint64_t result;
  uint64_t v1453;
  void **v1454;
  void **v1455;
  _QWORD *v1456;
  _QWORD *v1457;
  int64_t v1458;
  __int128 v1459;
  unsigned __int16 *v1460;
  void **v1461;
  int8x16_t v1462;
  int v1463;
  double v1464;
  int8x16_t v1465;
  void **v1466;
  double v1467;
  uint64_t v1468;
  double v1469;
  int8x16_t v1470;
  int64x2_t v1471;
  unsigned int v1472;
  double v1473;
  double v1474;
  float64x2_t v1475;
  int v1476;
  double v1477;
  float64_t v1478;
  double v1479;
  int v1480;
  float64_t v1481;
  int64x2_t v1482;
  char v1483;
  __int128 v1484;
  __int128 v1485;
  int64x2_t v1486;
  float64_t v1487;
  double v1488;
  float64x2_t v1489;
  float64_t v1490;
  int64x2_t v1491;
  float64x2_t v1492;
  double v1493;
  float64x2_t v1494;
  double v1495;
  float64_t v1496;
  int64x2_t v1497;
  int64x2_t v1498;
  void *v1499[2];
  void *v1500[2];
  void *v1501[2];
  __int8 v1502;
  float64_t v1503;
  float64x2_t v1504;
  unsigned int v1505;
  uint64_t v1506;
  void *v1507;
  char v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  int64x2_t v1513;
  float64x2_t v1514;
  double v1515;
  _DWORD *v1516;
  _QWORD *v1517;
  float64x2_t v1518;
  uint64_t v1519;
  float64x2_t v1520;
  unsigned int *v1521;
  float64x2_t v1522;
  float64x2_t v1523;
  float64x2_t v1524;
  _QWORD *v1525;
  _BYTE *v1526;
  uint64_t *v1527;
  int64x2_t v1528;
  unsigned int v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  int v1533;
  void *v1534;
  void *v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  _BYTE v1540[48];
  __int128 v1541;
  __int128 v1542;
  _OWORD v1543[2];
  _OWORD v1544[2];
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  unint64_t v1548;
  void *v1549;
  void *v1550;
  int v1551;
  char v1552;
  __int128 v1553;
  __int128 v1554;
  __int128 v1555;
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  uint64_t v1567;
  uint64_t v1568;
  __int128 v1569;
  char *v1570;
  double *v1571[2];
  _BYTE v1572[44];
  void *v1573[2];
  _BYTE v1574[128];
  __int128 v1575;
  __int128 v1576;
  __int128 v1577;
  __int128 v1578;
  __n128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  void *v1584;
  int v1585;
  char v1586;
  unint64_t v1587;
  int v1588;
  __int16 v1589;
  char v1590;
  __int128 v1591;
  __int128 v1592;
  __int128 v1593;
  __int128 v1594;
  __int128 v1595;
  __int128 v1596;
  __int128 v1597;
  uint64_t v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  __int128 v1605;
  uint64_t v1606;
  __int128 v1607;
  __int128 v1608;
  __int128 v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  uint64_t v1614;
  __int128 v1615;
  __int128 v1616;
  __int128 v1617;
  __int128 v1618;
  __int128 v1619;
  __int128 v1620;
  __int128 v1621;
  uint64_t v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  __int128 v1629;
  uint64_t v1630;
  __int128 v1631;
  __int128 v1632;
  __int128 v1633;
  __int128 v1634;
  __int128 v1635;
  __int128 v1636;
  __int128 v1637;
  uint64_t v1638;
  __int128 v1639;
  __int128 v1640;
  __int128 v1641;
  __int128 v1642;
  __int128 v1643;
  __int128 v1644;
  __int128 v1645;
  uint64_t v1646;
  __int128 v1647;
  __int128 v1648;
  __int128 v1649;
  __int128 v1650;
  __int128 v1651;
  __int128 v1652;
  __int128 v1653;
  uint64_t v1654;
  __int128 v1655;
  __int128 v1656;
  __int128 v1657;
  __int128 v1658;
  __int128 v1659;
  __int128 v1660;
  __int128 v1661;
  uint64_t v1662;
  __int128 v1663;
  __int128 v1664;
  __int128 v1665;
  __int128 v1666;
  __int128 v1667;
  __int128 v1668;
  __int128 v1669;
  uint64_t v1670;
  void *v1671[2];
  void *v1672[2];
  __int128 v1673;
  __int128 v1674;
  __int128 v1675;
  __int128 v1676;
  __int128 v1677;
  uint64_t v1678;
  float64x2_t v1679[3];
  __int128 v1680;
  __int128 v1681;
  __int128 v1682;
  __int128 v1683;
  uint64_t v1684;
  __int128 v1685;
  __int128 v1686;
  __int128 v1687;
  __int128 v1688;
  __int128 v1689;
  __int128 v1690;
  __int128 v1691;
  __int128 v1692;
  __int128 v1693;
  __int128 v1694;
  __int128 v1695;
  __int128 v1696;
  _BYTE object[264];
  void *v1698;
  float64x2_t v1699;
  void *v1700[2];
  void *v1701[2];
  __int128 v1702;
  __int128 v1703;
  __int128 v1704;
  __int128 v1705;
  __int128 v1706;
  __int128 v1707;
  __int128 v1708;
  __int128 v1709;
  __int128 v1710;
  __int128 v1711;
  __int128 v1712;
  __int128 v1713;
  __int128 v1714;
  __int128 v1715;
  __int128 v1716;
  __int128 v1717;
  __int128 v1718;
  __int128 v1719;
  __int128 v1720;
  __int128 v1721;
  uint64_t v1722;
  double v1723;
  __int128 v1724;
  __int128 v1725;
  __int128 v1726;
  __int128 v1727;
  __int128 v1728;
  __int128 v1729;
  __int128 v1730;
  uint64_t v1731;
  float64_t v1732;
  __int128 v1733;
  __int128 v1734;
  __int128 v1735;
  __int128 v1736;
  __int128 v1737;
  __int128 v1738;
  __int128 v1739;
  uint64_t v1740;
  float64_t v1741;
  __int128 v1742;
  __int128 v1743;
  __int128 v1744;
  __int128 v1745;
  __int128 v1746;
  __int128 v1747;
  __int128 v1748;
  uint64_t v1749;
  float64_t v1750;
  __int128 v1751;
  __int128 v1752;
  __int128 v1753;
  __int128 v1754;
  __int128 v1755;
  __int128 v1756;
  __int128 v1757;
  uint64_t v1758;
  float64_t v1759;
  __int128 v1760;
  __int128 v1761;
  __int128 v1762;
  __int128 v1763;
  __int128 v1764;
  __int128 v1765;
  __int128 v1766;
  uint64_t v1767;
  float64_t v1768;
  __int128 v1769;
  __int128 v1770;
  __int128 v1771;
  __int128 v1772;
  __int128 v1773;
  __int128 v1774;
  __int128 v1775;
  uint64_t v1776;
  float64_t v1777;
  __int128 v1778;
  __int128 v1779;
  __int128 v1780;
  __int128 v1781;
  __int128 v1782;
  __int128 v1783;
  __int128 v1784;
  uint64_t v1785;
  float64_t v1786;
  __int128 v1787;
  __int128 v1788;
  __int128 v1789;
  __int128 v1790;
  __int128 v1791;
  __int128 v1792;
  __int128 v1793;
  uint64_t v1794;
  float64_t v1795;
  __int128 v1796;
  __int128 v1797;
  __int128 v1798;
  __int128 v1799;
  __int128 v1800;
  __int128 v1801;
  __int128 v1802;
  uint64_t v1803;
  float64_t v1804;
  uint64_t v1805;

  MEMORY[0x24BDAC7A8](a1);
  v1530 = v9;
  v1531 = v10;
  v1463 = v11;
  v13 = v12;
  v1525 = v14;
  v1468 = v15;
  v1805 = *MEMORY[0x24BDAC8D0];
  v1517 = v16;
  v1527 = v17;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16[1] - *v16) >> 3) != (v17[1] - *v17) >> 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4730, (uint64_t)"imu_measurements_validity_info.size() == state_ids.size()", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v18 = *(_QWORD *)(v1530 + 8216);
  v19 = *(unsigned __int8 *)(v18 + 1720);
  v20 = v18 + 864;
  v21 = v18 + 24;
  if (v19)
    v21 = v20;
  if (*(_BYTE *)(v21 + 418))
  {
    v22 = 1;
  }
  else if (*(_BYTE *)(v21 + 417))
  {
    v22 = *(_BYTE *)(v1530 + 7682) != 0;
  }
  else
  {
    v22 = 0;
  }
  sub_20FC14480(v1531, v22, 0);
  v23 = *(_QWORD *)(v1530 + 8216);
  v24 = *(unsigned __int8 *)(v23 + 1720);
  v25 = v23 + 864;
  v26 = v23 + 24;
  if (v24)
    v26 = v25;
  v1460 = v13;
  if (*(_BYTE *)(v26 + 419))
    v27 = *(_BYTE *)(v1530 + 7684) != 0;
  else
    v27 = 0;
  v28 = (_QWORD *)v1531;
  v1526 = (_BYTE *)(v1531 + 6800);
  v29 = 1;
  sub_20FC14480(v1531, v27, 1u);
  v37 = *(_QWORD *)(v1530 + 8216);
  v38 = *(unsigned __int8 *)(v37 + 1720);
  v39 = v37 + 864;
  v40 = v37 + 24;
  if (v38)
    v40 = v39;
  if (!*(_BYTE *)(v40 + 433))
  {
    if (*(_BYTE *)(v40 + 432))
      v29 = *(_BYTE *)(v1530 + 7686) != 0;
    else
      v29 = 0;
    v28 = (_QWORD *)v1531;
  }
  v41 = ((v28[746] - v28[745]) >> 4);
  v42 = (_QWORD *)v28[1];
  if (v41 != v42[39])
  {
    v43 = (uint64_t *)v42[47];
    if (!v43)
    {
      v41 = v42[39];
      goto LABEL_104;
    }
    v1466 = (void **)(v1531 + 7528);
    v1472 = v29;
    while (1)
    {
      v44 = *((_DWORD *)v43 + 4);
      v45 = *(char **)(v1531 + 5960);
      v46 = *(char **)(v1531 + 5968);
      if (v46 != v45)
      {
        v47 = (v46 - v45) >> 4;
        do
        {
          v48 = v47 >> 1;
          v49 = &v45[16 * (v47 >> 1)];
          v51 = *(_DWORD *)v49;
          v50 = v49 + 16;
          v47 += ~(v47 >> 1);
          if (v51 < v44)
            v45 = v50;
          else
            v47 = v48;
        }
        while (v47);
      }
      if (v45 != v46 && *(_DWORD *)v45 == v44)
        goto LABEL_25;
      LODWORD(v1573[0]) = *((_DWORD *)v43 + 4);
      BYTE4(v1573[0]) = 1;
      v1573[1] = v43 + 3;
      v1585 = 1065353216;
      v1586 = 0;
      v1581 = 0u;
      v1582 = 0u;
      v1583 = 0u;
      v1584 = 0;
      v52 = *(_OWORD *)(v43 + 5);
      *(_OWORD *)v1574 = *(_OWORD *)(v43 + 3);
      *(_OWORD *)&v1574[16] = v52;
      v53 = *(_OWORD *)(v43 + 9);
      v54 = *(_OWORD *)(v43 + 13);
      v55 = *(_OWORD *)(v43 + 7);
      *(_OWORD *)&v1574[64] = *(_OWORD *)(v43 + 11);
      *(_OWORD *)&v1574[80] = v54;
      *(_OWORD *)&v1574[32] = v55;
      *(_OWORD *)&v1574[48] = v53;
      v56 = *(_OWORD *)(v43 + 17);
      v57 = *(_OWORD *)(v43 + 21);
      v58 = *(_OWORD *)(v43 + 15);
      v1575 = *(_OWORD *)(v43 + 19);
      v1576 = v57;
      *(_OWORD *)&v1574[96] = v58;
      *(_OWORD *)&v1574[112] = v56;
      v59 = *(_OWORD *)(v43 + 25);
      v60 = *(_OWORD *)(v43 + 29);
      v61 = *(_OWORD *)(v43 + 23);
      v1579 = *(__n128 *)(v43 + 27);
      v1580 = v60;
      v1577 = v61;
      v1578 = v59;
      sub_20F6178A8((uint64_t)v1573);
      BYTE4(v1573[0]) = v29;
      v62 = (uint64_t **)*((_QWORD *)&v1583 + 1);
      v63 = *((_OWORD *)v1573[1] + 1);
      *(_OWORD *)v1574 = *(_OWORD *)v1573[1];
      *(_OWORD *)&v1574[16] = v63;
      v64 = *((_OWORD *)v1573[1] + 5);
      v66 = *((_OWORD *)v1573[1] + 2);
      v65 = *((_OWORD *)v1573[1] + 3);
      *(_OWORD *)&v1574[64] = *((_OWORD *)v1573[1] + 4);
      *(_OWORD *)&v1574[80] = v64;
      *(_OWORD *)&v1574[32] = v66;
      *(_OWORD *)&v1574[48] = v65;
      v67 = *((_OWORD *)v1573[1] + 9);
      v69 = *((_OWORD *)v1573[1] + 6);
      v68 = *((_OWORD *)v1573[1] + 7);
      v1575 = *((_OWORD *)v1573[1] + 8);
      v1576 = v67;
      *(_OWORD *)&v1574[96] = v69;
      *(_OWORD *)&v1574[112] = v68;
      v70 = *((__n128 *)v1573[1] + 12);
      v71 = *((_OWORD *)v1573[1] + 13);
      v73 = *((_OWORD *)v1573[1] + 10);
      v72 = *((_OWORD *)v1573[1] + 11);
      v1579 = v70;
      v1580 = v71;
      v1577 = v73;
      v1578 = v72;
      if (*((_QWORD *)&v1583 + 1))
      {
        do
        {
          v70.n128_f64[0] = sub_20F6182A0((char *)v62[5], (float64x2_t *)v1574, v70);
          v62 = (uint64_t **)*v62;
        }
        while (v62);
      }
      sub_20F6178A8((uint64_t)v1573);
      v74 = (int)v1573[0];
      v75 = *(__int128 **)(v1531 + 5960);
      v76 = *(__int128 **)(v1531 + 5968);
      if (v76 == v75)
      {
        v75 = *(__int128 **)(v1531 + 5968);
      }
      else
      {
        v77 = v76 - v75;
        do
        {
          v78 = v77 >> 1;
          v79 = &v75[v77 >> 1];
          v81 = *(_DWORD *)v79;
          v80 = v79 + 1;
          v77 += ~(v77 >> 1);
          if (v81 < LODWORD(v1573[0]))
            v75 = v80;
          else
            v77 = v78;
        }
        while (v77);
        if (v76 != v75 && LODWORD(v1573[0]) == *(_DWORD *)v75)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 184, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add calibration variable.", 35, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v82 = (_QWORD *)*((_QWORD *)&v1583 + 1);
          if (!*((_QWORD *)&v1583 + 1))
            goto LABEL_49;
          do
          {
LABEL_48:
            v83 = (_QWORD *)*v82;
            operator delete(v82);
            v82 = v83;
          }
          while (v83);
          goto LABEL_49;
        }
      }
      v85 = BYTE4(v1573[0]);
      LODWORD(v1532) = -1;
      BYTE4(v1532) = 1;
      v1533 = 0;
      v86 = v1573[0];
      v87 = v1573[1];
      v88 = *(void **)&v1581;
      v1534 = v1573[0];
      v1535 = v1573[1];
      v1543[1] = v1577;
      v1544[0] = v1578;
      v1544[1] = v1579;
      v1545 = v1580;
      *(_OWORD *)&v1540[32] = *(_OWORD *)&v1574[96];
      v1541 = *(_OWORD *)&v1574[112];
      v1542 = v1575;
      v1543[0] = v1576;
      v1538 = *(_OWORD *)&v1574[32];
      v1539 = *(_OWORD *)&v1574[48];
      *(_OWORD *)v1540 = *(_OWORD *)&v1574[64];
      *(_OWORD *)&v1540[16] = *(_OWORD *)&v1574[80];
      v1536 = *(_OWORD *)v1574;
      v1537 = *(_OWORD *)&v1574[16];
      v89 = *((double *)&v1581 + 1);
      v90 = *(double *)&v1582;
      v1546 = v1581;
      v1581 = 0uLL;
      v91 = (_QWORD *)*((_QWORD *)&v1582 + 1);
      v92 = v1583;
      *(_QWORD *)&v1583 = 0;
      v1582 = 0uLL;
      *(float64_t *)&v1547 = v90;
      *((_QWORD *)&v1547 + 1) = v91;
      v93 = (_QWORD *)*((_QWORD *)&v1583 + 1);
      v94 = v1584;
      v1548 = v92;
      v1549 = (void *)*((_QWORD *)&v1583 + 1);
      v1550 = v1584;
      v95 = v1585;
      v1551 = v1585;
      if (v1584)
      {
        v96 = *(_QWORD *)(*((_QWORD *)&v1583 + 1) + 8);
        if ((v92 & (v92 - 1)) != 0)
        {
          if (v96 >= v92)
            v96 %= v92;
        }
        else
        {
          v96 &= v92 - 1;
        }
        v91[v96] = &v1549;
        *((_QWORD *)&v1583 + 1) = 0;
        v1584 = 0;
        v86 = v1534;
        v87 = v1535;
        v89 = *((double *)&v1546 + 1);
        v88 = *(void **)&v1546;
        v91 = (_QWORD *)*((_QWORD *)&v1547 + 1);
        v90 = *(double *)&v1547;
        v92 = v1548;
        v93 = v1549;
        v94 = v1550;
        v95 = v1551;
      }
      v97 = v1586;
      v1552 = v1586;
      v1553 = 0u;
      v1554 = 0u;
      v1555 = 0u;
      v1556 = 0u;
      v1557 = 0u;
      v1558 = 0u;
      v1559 = 0u;
      v1560 = 0u;
      v1561 = 0u;
      v1562 = 0u;
      v1563 = 0u;
      v1564 = 0u;
      v1565 = 0u;
      v1566 = 0u;
      *(_DWORD *)object = v74;
      *(_DWORD *)&object[16] = v1533;
      *(_QWORD *)&object[8] = v1532;
      *(_QWORD *)&object[24] = v86;
      *(_QWORD *)&object[32] = v87;
      *(_OWORD *)&object[40] = v1536;
      *(_OWORD *)&object[56] = v1537;
      *(_OWORD *)&object[104] = *(_OWORD *)v1540;
      *(_OWORD *)&object[120] = *(_OWORD *)&v1540[16];
      *(_OWORD *)&object[72] = v1538;
      *(_OWORD *)&object[88] = v1539;
      *(_OWORD *)&object[168] = v1542;
      *(_OWORD *)&object[184] = v1543[0];
      *(_OWORD *)&object[136] = *(_OWORD *)&v1540[32];
      *(_OWORD *)&object[152] = v1541;
      *(_OWORD *)&object[232] = v1544[1];
      *(_OWORD *)&object[248] = v1545;
      *(_OWORD *)&object[200] = v1543[1];
      *(_OWORD *)&object[216] = v1544[0];
      v1698 = v88;
      v1699.f64[0] = v89;
      v1546 = 0u;
      v1547 = 0u;
      v1699.f64[1] = v90;
      v1700[0] = v91;
      v1548 = 0;
      v1700[1] = (void *)v92;
      v1701[0] = v93;
      v1701[1] = v94;
      LODWORD(v1702) = v95;
      if (v94)
      {
        v98 = v93[1];
        if ((v92 & (v92 - 1)) != 0)
        {
          if (v98 >= v92)
            v98 %= v92;
        }
        else
        {
          v98 &= v92 - 1;
        }
        v91[v98] = v1701;
        v1549 = 0;
        v1550 = 0;
      }
      BYTE8(v1702) = v97;
      v1713 = v1563;
      v1714 = v1564;
      v1715 = v1565;
      v1716 = v1566;
      v1709 = v1559;
      v1710 = v1560;
      v1711 = v1561;
      v1712 = v1562;
      v1705 = v1555;
      v1706 = v1556;
      v1707 = v1557;
      v1708 = v1558;
      v1703 = v1553;
      v1704 = v1554;
      sub_20F619554((char **)(v1531 + 5960), v75, (int *)object);
      v99 = v1701[0];
      if (v1701[0])
      {
        do
        {
          v100 = (_QWORD *)*v99;
          operator delete(v99);
          v99 = v100;
        }
        while (v100);
      }
      v101 = v1700[0];
      v1700[0] = 0;
      if (v101)
        operator delete(v101);
      if (*(double *)&v1698 != 0.0)
      {
        *(_QWORD *)&v1699.f64[0] = v1698;
        operator delete(v1698);
      }
      v102 = v1549;
      if (v1549)
      {
        do
        {
          v103 = (_QWORD *)*v102;
          operator delete(v102);
          v102 = v103;
        }
        while (v103);
      }
      v104 = (void *)*((_QWORD *)&v1547 + 1);
      *((_QWORD *)&v1547 + 1) = 0;
      if (v104)
        operator delete(v104);
      if ((_QWORD)v1546)
      {
        *((_QWORD *)&v1546 + 1) = v1546;
        operator delete((void *)v1546);
      }
      if (v85)
        break;
LABEL_100:
      *(_BYTE *)(v1531 + 6802) = 0;
      *v1526 = 0;
      *(_DWORD *)(v1531 + 7864) = 0;
      *(_BYTE *)(v1531 + 7868) = 0;
      v82 = (_QWORD *)*((_QWORD *)&v1583 + 1);
      if (*((_QWORD *)&v1583 + 1))
        goto LABEL_48;
LABEL_49:
      v84 = (void *)*((_QWORD *)&v1582 + 1);
      *((_QWORD *)&v1582 + 1) = 0;
      if (v84)
        operator delete(v84);
      if ((_QWORD)v1581)
      {
        *((_QWORD *)&v1581 + 1) = v1581;
        operator delete((void *)v1581);
      }
LABEL_25:
      v43 = (uint64_t *)*v43;
      if (!v43)
      {
        v42 = *(_QWORD **)(v1531 + 8);
        v41 = v42[39];
        goto LABEL_104;
      }
    }
    v105 = *(char **)(v1531 + 7536);
    v106 = *(_QWORD *)(v1531 + 7544);
    if ((unint64_t)v105 < v106)
    {
      *(_DWORD *)v105 = v74;
      v107 = (uint64_t)(v105 + 4);
LABEL_99:
      *(_QWORD *)(v1531 + 7536) = v107;
      v29 = v1472;
      goto LABEL_100;
    }
    v108 = (char *)*v1466;
    v109 = v105 - (_BYTE *)*v1466;
    v110 = v109 >> 2;
    v111 = (v109 >> 2) + 1;
    if (v111 >> 62)
      sub_20E867F44();
    v112 = v106 - (_QWORD)v108;
    if (v112 >> 1 > v111)
      v111 = v112 >> 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
      v113 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v113 = v111;
    if (v113)
    {
      if (v113 >> 62)
        sub_20E877A38();
      v114 = v113;
      v115 = operator new(4 * v113);
      v113 = v114;
      v116 = &v115[4 * v110];
      *v116 = v74;
      v107 = (uint64_t)(v116 + 1);
      v117 = v105 - v108;
      if (v105 == v108)
        goto LABEL_97;
    }
    else
    {
      v115 = 0;
      v116 = (_DWORD *)(4 * v110);
      *(_DWORD *)(4 * v110) = v74;
      v107 = 4 * v110 + 4;
      v117 = v105 - v108;
      if (v105 == v108)
      {
LABEL_97:
        *(_QWORD *)(v1531 + 7528) = v116;
        *(_QWORD *)(v1531 + 7536) = v107;
        *(_QWORD *)(v1531 + 7544) = &v115[4 * v113];
        if (v108)
          operator delete(v108);
        goto LABEL_99;
      }
    }
    v118 = v117 - 4;
    if (v118 < 0x2C)
      goto LABEL_1926;
    if ((unint64_t)(v105 - v115 - v109) < 0x20)
      goto LABEL_1926;
    v119 = (v118 >> 2) + 1;
    v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
    v121 = &v105[-v120];
    v116 = (_DWORD *)((char *)v116 - v120);
    v122 = (float64x2_t *)&v115[4 * v110 - 16];
    v123 = (float64x2_t *)(v105 - 16);
    v124 = v119 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *v123;
      v122[-1] = v123[-1];
      *v122 = v30;
      v122 -= 2;
      v123 -= 2;
      v124 -= 8;
    }
    while (v124);
    v105 = v121;
    if (v119 != (v119 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1926:
      do
      {
        v125 = *((_DWORD *)v105 - 1);
        v105 -= 4;
        *--v116 = v125;
      }
      while (v105 != v108);
    }
    goto LABEL_97;
  }
LABEL_104:
  if (v41 != ((*(_QWORD *)(v1531 + 6064) - *(_QWORD *)(v1531 + 6056)) >> 4))
  {
    v126 = *(_QWORD *)(v1530 + 8216);
    v127 = *(unsigned __int8 *)(v126 + 1720);
    v128 = v126 + 24;
    v129 = v126 + 864;
    if (!v127)
      v129 = v128;
    v130 = (uint64_t *)v42[52];
    if (v130)
    {
      v1508 = *(_BYTE *)(v129 + 434);
      v1461 = (void **)(v1531 + 7552);
      while (1)
      {
        v131 = *((_DWORD *)v130 + 4);
        v132 = *(char **)(v1531 + 6056);
        v133 = *(char **)(v1531 + 6064);
        if (v133 != v132)
        {
          v134 = (v133 - v132) >> 4;
          do
          {
            v135 = v134 >> 1;
            v136 = &v132[16 * (v134 >> 1)];
            v138 = *(_DWORD *)v136;
            v137 = v136 + 16;
            v134 += ~(v134 >> 1);
            if (v138 < v131)
              v132 = v137;
            else
              v134 = v135;
          }
          while (v134);
        }
        if (v132 != v133 && *(_DWORD *)v132 == v131)
          goto LABEL_109;
        LODWORD(v1573[0]) = *((_DWORD *)v130 + 4);
        BYTE4(v1573[0]) = 1;
        *(_QWORD *)&v1574[24] = 0;
        memset(&v1574[40], 0, 24);
        *(_OWORD *)&v1574[8] = 0u;
        v1573[1] = v130 + 3;
        *(_QWORD *)v1574 = 0x3FF0000000000000;
        *(_QWORD *)&v1574[32] = 0x3FF0000000000000;
        *(_QWORD *)&v1574[64] = 0x3FF0000000000000;
        memset(&v1574[72], 0, 56);
        LODWORD(v1575) = 1065353216;
        BYTE8(v1575) = 0;
        *(_OWORD *)v1574 = *(_OWORD *)(v130 + 3);
        v139 = *(_OWORD *)(v130 + 5);
        v140 = *(_OWORD *)(v130 + 7);
        v141 = *(_OWORD *)(v130 + 9);
        *(_QWORD *)&v1574[64] = v130[11];
        *(_OWORD *)&v1574[32] = v140;
        *(_OWORD *)&v1574[48] = v141;
        *(_OWORD *)&v1574[16] = v139;
        sub_20F811C04((uint64_t)v1573);
        BYTE4(v1573[0]) = v1508;
        *(_OWORD *)v1574 = *(_OWORD *)v1573[1];
        v143 = *((_OWORD *)v1573[1] + 2);
        v142 = *((_OWORD *)v1573[1] + 3);
        v144 = *((_OWORD *)v1573[1] + 1);
        *(_QWORD *)&v1574[64] = *((_QWORD *)v1573[1] + 8);
        *(_OWORD *)&v1574[32] = v143;
        *(_OWORD *)&v1574[48] = v142;
        *(_OWORD *)&v1574[16] = v144;
        sub_20F811C04((uint64_t)v1573);
        v145 = (int)v1573[0];
        v146 = *(__int128 **)(v1531 + 6056);
        v147 = *(__int128 **)(v1531 + 6064);
        if (v147 == v146)
        {
          v146 = *(__int128 **)(v1531 + 6064);
        }
        else
        {
          v148 = v147 - v146;
          do
          {
            v149 = v148 >> 1;
            v150 = &v146[v148 >> 1];
            v152 = *(_DWORD *)v150;
            v151 = v150 + 1;
            v148 += ~(v148 >> 1);
            if (v152 < LODWORD(v1573[0]))
              v146 = v151;
            else
              v148 = v149;
          }
          while (v148);
          if (v147 != v146 && LODWORD(v1573[0]) == *(_DWORD *)v146)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 184, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add calibration variable.", 35, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v153 = *(_QWORD **)&v1574[112];
            if (!*(_QWORD *)&v1574[112])
              goto LABEL_131;
            do
            {
LABEL_130:
              v154 = (_QWORD *)*v153;
              operator delete(v153);
              v153 = v154;
            }
            while (v154);
            goto LABEL_131;
          }
        }
        v156 = BYTE4(v1573[0]);
        LODWORD(v1532) = -1;
        BYTE4(v1532) = 1;
        v1533 = 0;
        v157 = v1573[0];
        v158 = v1573[1];
        v159 = *(_QWORD *)&v1574[72];
        v1534 = v1573[0];
        v1535 = v1573[1];
        v1538 = *(_OWORD *)&v1574[32];
        v1539 = *(_OWORD *)&v1574[48];
        *(_QWORD *)v1540 = *(_QWORD *)&v1574[64];
        v1536 = *(_OWORD *)v1574;
        v1537 = *(_OWORD *)&v1574[16];
        v160 = *(_QWORD *)&v1574[88];
        v161 = *(_QWORD *)&v1574[80];
        *(_QWORD *)&v1540[8] = *(_QWORD *)&v1574[72];
        *(_QWORD *)&v1540[16] = *(_QWORD *)&v1574[80];
        memset(&v1574[72], 0, 40);
        v162 = *(_QWORD *)&v1574[96];
        v163 = *(_QWORD *)&v1574[104];
        *(_QWORD *)&v1540[24] = v160;
        *(_QWORD *)&v1540[32] = *(_QWORD *)&v1574[96];
        v164 = *(_QWORD *)&v1574[112];
        v165 = *(_QWORD *)&v1574[120];
        *(_QWORD *)&v1540[40] = *(_QWORD *)&v1574[104];
        v1541 = *(_OWORD *)&v1574[112];
        v166 = v1575;
        LODWORD(v1542) = v1575;
        if (*(_QWORD *)&v1574[120])
        {
          v167 = *(_QWORD *)(*(_QWORD *)&v1574[112] + 8);
          if ((*(_QWORD *)&v1574[104] & (*(_QWORD *)&v1574[104] - 1)) != 0)
          {
            if (v167 >= *(_QWORD *)&v1574[104])
              v167 %= *(_QWORD *)&v1574[104];
          }
          else
          {
            v167 &= *(_QWORD *)&v1574[104] - 1;
          }
          *(_QWORD *)(*(_QWORD *)&v1574[96] + 8 * v167) = &v1541;
          *(_QWORD *)&v1574[112] = 0;
          *(_QWORD *)&v1574[120] = 0;
          v157 = v1534;
          v158 = v1535;
          v159 = *(_QWORD *)&v1540[8];
          v161 = *(_QWORD *)&v1540[16];
          v160 = *(_QWORD *)&v1540[24];
          v162 = *(_QWORD *)&v1540[32];
          v163 = *(_QWORD *)&v1540[40];
          v165 = *((_QWORD *)&v1541 + 1);
          v164 = v1541;
          v166 = v1542;
        }
        v168 = BYTE8(v1575);
        BYTE8(v1542) = BYTE8(v1575);
        *((_QWORD *)&v1543[1] + 1) = 0;
        *(_OWORD *)((char *)v1544 + 8) = 0u;
        *((_QWORD *)&v1544[1] + 1) = 0;
        *(_OWORD *)((char *)v1543 + 8) = 0u;
        *(_QWORD *)&v1543[0] = 0x3FF0000000000000;
        *(_QWORD *)&v1544[0] = 0x3FF0000000000000;
        *(_QWORD *)&v1545 = 0x3FF0000000000000;
        *(_DWORD *)object = v145;
        *(_QWORD *)&object[8] = v1532;
        *(_DWORD *)&object[16] = v1533;
        *(_QWORD *)&object[24] = v157;
        *(_QWORD *)&object[32] = v158;
        *(_QWORD *)&object[104] = *(_QWORD *)v1540;
        *(_OWORD *)&object[72] = v1538;
        *(_OWORD *)&object[88] = v1539;
        *(_OWORD *)&object[40] = v1536;
        *(_OWORD *)&object[56] = v1537;
        *(_QWORD *)&object[112] = v159;
        *(_QWORD *)&object[120] = v161;
        memset(&v1540[8], 0, 40);
        *(_QWORD *)&object[128] = v160;
        *(_QWORD *)&object[136] = v162;
        *(_QWORD *)&object[144] = v163;
        *(_QWORD *)&object[152] = v164;
        *(_QWORD *)&object[160] = v165;
        *(_DWORD *)&object[168] = v166;
        if (v165)
        {
          v169 = *(_QWORD *)(v164 + 8);
          if ((v163 & (v163 - 1)) != 0)
          {
            if (v169 >= v163)
              v169 %= v163;
          }
          else
          {
            v169 &= v163 - 1;
          }
          *(_QWORD *)(v162 + 8 * v169) = &object[152];
          v1541 = 0uLL;
        }
        object[176] = v168;
        *(_OWORD *)&object[216] = v1544[0];
        *(_OWORD *)&object[232] = v1544[1];
        *(_QWORD *)&object[248] = v1545;
        *(_OWORD *)&object[184] = v1543[0];
        *(_OWORD *)&object[200] = v1543[1];
        sub_20F61A4C4((char **)(v1531 + 6056), v146, (int *)object);
        v170 = *(_QWORD **)&object[152];
        if (*(_QWORD *)&object[152])
        {
          do
          {
            v171 = (_QWORD *)*v170;
            operator delete(v170);
            v170 = v171;
          }
          while (v171);
        }
        v172 = *(void **)&object[136];
        *(_QWORD *)&object[136] = 0;
        if (v172)
          operator delete(v172);
        if (*(_QWORD *)&object[112])
        {
          *(_QWORD *)&object[120] = *(_QWORD *)&object[112];
          operator delete(*(void **)&object[112]);
        }
        v173 = (_QWORD *)v1541;
        if ((_QWORD)v1541)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            operator delete(v173);
            v173 = v174;
          }
          while (v174);
        }
        v175 = *(void **)&v1540[32];
        *(_QWORD *)&v1540[32] = 0;
        if (v175)
          operator delete(v175);
        if (*(_QWORD *)&v1540[8])
        {
          *(_QWORD *)&v1540[16] = *(_QWORD *)&v1540[8];
          operator delete(*(void **)&v1540[8]);
        }
        if (v156)
          break;
LABEL_182:
        *(_BYTE *)(v1531 + 6802) = 0;
        *v1526 = 0;
        *(_DWORD *)(v1531 + 7864) = 0;
        *(_BYTE *)(v1531 + 7868) = 0;
        v153 = *(_QWORD **)&v1574[112];
        if (*(_QWORD *)&v1574[112])
          goto LABEL_130;
LABEL_131:
        v155 = *(void **)&v1574[96];
        *(_QWORD *)&v1574[96] = 0;
        if (v155)
          operator delete(v155);
        if (*(_QWORD *)&v1574[72])
        {
          *(_QWORD *)&v1574[80] = *(_QWORD *)&v1574[72];
          operator delete(*(void **)&v1574[72]);
        }
LABEL_109:
        v130 = (uint64_t *)*v130;
        if (!v130)
          goto LABEL_184;
      }
      v29 = *(_QWORD *)(v1531 + 7560);
      v176 = *(_QWORD *)(v1531 + 7568);
      if (v29 < v176)
      {
        *(_DWORD *)v29 = v145;
        v29 += 4;
        v177 = v29;
LABEL_181:
        *(_QWORD *)(v1531 + 7560) = v177;
        goto LABEL_182;
      }
      v178 = *v1461;
      v179 = v29 - (_QWORD)*v1461;
      v180 = v179 >> 2;
      v181 = (v179 >> 2) + 1;
      if (v181 >> 62)
        sub_20E867F44();
      v182 = v176 - (_QWORD)v178;
      if (v182 >> 1 > v181)
        v181 = v182 >> 1;
      if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL)
        v183 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v183 = v181;
      if (v183)
      {
        if (v183 >> 62)
          sub_20E877A38();
        v184 = v183;
        v185 = (char *)operator new(4 * v183);
        v183 = v184;
        v186 = &v185[4 * v180];
        *(_DWORD *)v186 = v145;
        v177 = (uint64_t)(v186 + 4);
        v187 = v29 - (_QWORD)v178;
        if ((void *)v29 == v178)
          goto LABEL_179;
      }
      else
      {
        v185 = 0;
        v186 = (char *)(4 * v180);
        *(_DWORD *)(4 * v180) = v145;
        v177 = 4 * v180 + 4;
        v187 = v29 - (_QWORD)v178;
        if ((void *)v29 == v178)
        {
LABEL_179:
          *(_QWORD *)(v1531 + 7552) = v186;
          *(_QWORD *)(v1531 + 7560) = v177;
          *(_QWORD *)(v1531 + 7568) = &v185[4 * v183];
          if (v178)
            operator delete(v178);
          goto LABEL_181;
        }
      }
      v188 = v187 - 4;
      if (v188 < 0x2C)
        goto LABEL_1927;
      if (v29 - (unint64_t)v185 - v179 < 0x20)
        goto LABEL_1927;
      v189 = (v188 >> 2) + 1;
      v190 = 4 * (v189 & 0x7FFFFFFFFFFFFFF8);
      v191 = v29 - v190;
      v186 -= v190;
      v192 = (float64x2_t *)&v185[4 * v180 - 16];
      v193 = (float64x2_t *)(v29 - 16);
      v194 = v189 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30 = *v193;
        v192[-1] = v193[-1];
        *v192 = v30;
        v192 -= 2;
        v193 -= 2;
        v194 -= 8;
      }
      while (v194);
      v29 = v191;
      if (v189 != (v189 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_1927:
        do
        {
          v195 = *(_DWORD *)(v29 - 4);
          v29 -= 4;
          *((_DWORD *)v186 - 1) = v195;
          v186 -= 4;
        }
        while ((void *)v29 != v178);
      }
      goto LABEL_179;
    }
  }
LABEL_184:
  v196 = *(__int128 **)(v1531 + 5488);
  if (v196 == *(__int128 **)(v1531 + 5480))
  {
    v29 = v1531;
    v200 = *(_QWORD *)(v1531 + 8);
    v201 = v200 + 1656;
    v202 = *(unsigned int *)(v200 + 1648);
    v30.f64[0] = *(float64_t *)(v200 + 1672);
    v1509 = v30;
    v30.f64[0] = *(float64_t *)(v200 + 1696);
    v1498 = *(int64x2_t *)(v200 + 1656);
    *(float64x2_t *)v1499 = v30;
    _D8 = *(double *)(v200 + 1720);
    v1528 = *(int64x2_t *)(v200 + 1704);
    v1493 = *(double *)(v200 + 1744);
    v1486 = *(int64x2_t *)(v200 + 1680);
    v1492 = *(float64x2_t *)(v200 + 1728);
    v204 = *(unsigned __int8 *)(v1531 + 1729);
    v205 = *(_BYTE *)(v1531 + 1729) == 0;
    v206 = *(unsigned __int8 *)(v1531 + 1789);
    v207 = sub_20FC17CF4(v1531 + 5504);
    _D19 = v1499[0];
    v209 = (float64x2_t)vzip1q_s64(v1498, v1486);
    _Q2 = (float64x2_t)vzip2q_s64(v1498, v1486);
    _Q17 = (float64x2_t)v1528;
    v212 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q2, 1);
    v213 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q2.f64[0], 0);
    _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v209, v1492.f64[0]), _Q2, v1492, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1509, *(int64x2_t *)v1499), v1493);
    _D4 = v1492.f64[1];
    __asm { FMLA            D2, D4, V17.D[1] }
    _Q2.f64[0] = _Q2.f64[0] + _D8 * v1493;
    v218 = vnegq_f64(_Q0);
    v219 = (int64x2_t)vextq_s8(v213, v212, 8uLL);
    v220 = (float64x2_t)vzip1q_s64(v1498, v219);
    v221 = (float64x2_t)vzip2q_s64((int64x2_t)v209, v219);
    *(_QWORD *)&_Q17.f64[1] = vdupq_laneq_s64(v1528, 1).u64[0];
    v222 = vmlsq_laneq_f64(vmulq_n_f64(v220, v218.f64[0]), v221, _Q0, 1);
    *(_DWORD *)v207 = -1;
    *(_BYTE *)(v207 + 4) = 1;
    *(_DWORD *)(v207 + 8) = 0;
    *(_QWORD *)(v207 + 16) = v202 | (v204 << 32);
    *(_QWORD *)(v207 + 24) = v201;
    *(float64_t *)(v207 + 48) = v1509.f64[0];
    *(_QWORD *)&v220.f64[1] = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
    *(float64x2_t *)(v207 + 32) = v220;
    _Q4 = vmulq_f64(v1509, v218);
    __asm
    {
      FMLS            D4, D19, V0.D[1]
      FMLS            D4, D8, V2.D[0]
    }
    *(void **)(v207 + 72) = v1499[0];
    *(_QWORD *)&v221.f64[1] = vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
    *(float64x2_t *)(v207 + 56) = v221;
    *(double *)(v207 + 96) = _D8;
    v224 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(v222, _Q17, _Q2.f64[0], 0));
    *(_QWORD *)&_Q17.f64[1] = vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
    *(float64x2_t *)(v207 + 80) = _Q17;
    *(_QWORD *)(v207 + 120) = *(_OWORD *)&vnegq_f64(_Q4);
    v224.i64[1] = vextq_s8(v224, v224, 8uLL).u64[0];
    *(int8x16_t *)(v207 + 104) = v224;
    *(_WORD *)(v207 + 128) = v206 | 0x100;
    *(_QWORD *)(v207 + 136) = 0x3FF0000000000000;
    *(_QWORD *)(v207 + 144) = 0;
    *(_QWORD *)(v207 + 152) = 0;
    *(_QWORD *)(v207 + 160) = 0;
    *(_QWORD *)(v207 + 168) = 0x3FF0000000000000;
    *(_QWORD *)(v207 + 176) = 0;
    *(_QWORD *)(v207 + 184) = 0;
    *(_QWORD *)(v207 + 192) = 0;
    *(_QWORD *)(v207 + 200) = 0x3FF0000000000000;
    *(_QWORD *)(v207 + 208) = 0;
    *(_QWORD *)(v207 + 216) = 0;
    *(_QWORD *)(v207 + 224) = 0;
    *(_DWORD *)object = v202;
    *(_QWORD *)&object[8] = v207;
    sub_20FC17A74((char **)(v1531 + 5480), v196, (uint64_t)object);
    if (v205)
      goto LABEL_210;
    v225 = *(char **)(v1531 + 7416);
    v226 = *(_QWORD *)(v1531 + 7424);
    if ((unint64_t)v225 < v226)
    {
      *(_DWORD *)v225 = v202;
      v227 = (uint64_t)(v225 + 4);
LABEL_209:
      v29 = v1531;
      *(_QWORD *)(v1531 + 7416) = v227;
LABEL_210:
      *(_BYTE *)(v1531 + 6802) = 0;
      *v1526 = 0;
      *(_BYTE *)(v29 + 7868) = 0;
      *(_DWORD *)(v29 + 7864) = 0;
      v197 = v1530;
      v198 = v1517;
      if (*(_BYTE *)(*(_QWORD *)(v1530 + 8216) + 1720))
        goto LABEL_186;
      goto LABEL_211;
    }
    v228 = *(char **)(v1531 + 7408);
    v229 = (v225 - v228) >> 2;
    v230 = v229 + 1;
    if ((unint64_t)(v229 + 1) >> 62)
      sub_20E867F44();
    v231 = v226 - (_QWORD)v228;
    if (v231 >> 1 > v230)
      v230 = v231 >> 1;
    if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL)
      v232 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v232 = v230;
    if (v232)
    {
      if (v232 >> 62)
        sub_20E877A38();
      v233 = operator new(4 * v232);
      v234 = &v233[4 * v229];
      v235 = &v233[4 * v232];
      *v234 = v202;
      v227 = (uint64_t)(v234 + 1);
      v236 = v225 - v228;
      if (v225 == v228)
        goto LABEL_207;
    }
    else
    {
      v233 = 0;
      v234 = (_DWORD *)(4 * v229);
      v235 = 0;
      *(_DWORD *)(4 * v229) = v202;
      v227 = 4 * v229 + 4;
      v236 = v225 - v228;
      if (v225 == v228)
      {
LABEL_207:
        *(_QWORD *)(v1531 + 7408) = v234;
        *(_QWORD *)(v1531 + 7416) = v227;
        *(_QWORD *)(v1531 + 7424) = v235;
        if (v228)
          operator delete(v228);
        goto LABEL_209;
      }
    }
    v237 = v236 - 4;
    if (v237 < 0x2C)
      goto LABEL_1928;
    if ((unint64_t)(v228 - v233) < 0x20)
      goto LABEL_1928;
    v238 = (v237 >> 2) + 1;
    v239 = 4 * (v238 & 0x7FFFFFFFFFFFFFF8);
    v240 = &v225[-v239];
    v234 = (_DWORD *)((char *)v234 - v239);
    v241 = &v233[4 * v229 - 16];
    v242 = v225 - 16;
    v243 = v238 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v244 = *(_OWORD *)v242;
      *(v241 - 1) = *((_OWORD *)v242 - 1);
      *v241 = v244;
      v241 -= 2;
      v242 -= 32;
      v243 -= 8;
    }
    while (v243);
    v225 = v240;
    if (v238 != (v238 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1928:
      do
      {
        v245 = *((_DWORD *)v225 - 1);
        v225 -= 4;
        *--v234 = v245;
      }
      while (v225 != v228);
    }
    goto LABEL_207;
  }
  v197 = v1530;
  v198 = v1517;
  if (*(_BYTE *)(*(_QWORD *)(v1530 + 8216) + 1720))
  {
LABEL_186:
    v199 = *(_DWORD *)(v197 + 1940);
    goto LABEL_212;
  }
LABEL_211:
  v199 = -1;
LABEL_212:
  v1529 = v199;
  v1483 = *(_BYTE *)(v1531 + 2149);
  *(_BYTE *)(v1531 + 2149) = 1;
  *((_QWORD *)&v1562 + 1) = &v1532;
  *((_QWORD *)&v246 + 1) = 0;
  v1563 = xmmword_2103B83C0;
  v248 = *v1527;
  v247 = v1527[1];
  v249 = v247 - *v1527;
  if ((unint64_t)v249 >= 0x29)
  {
    v250 = v249 >> 2;
    if ((unint64_t)(v249 >> 2) <= 0x14)
      v250 = 20;
    *(_QWORD *)&v1563 = v250;
    is_mul_ok(v250, 0x30uLL);
    v251 = operator new[]();
    if (*((uint64_t **)&v1562 + 1) != &v1532 && *((_QWORD *)&v1562 + 1))
      MEMORY[0x212BC6368]();
    *((_QWORD *)&v1562 + 1) = v251;
    v248 = *v1527;
    v247 = v1527[1];
    v249 = v247 - *v1527;
    v198 = v1517;
  }
  if (v247 != v248)
  {
    v252 = 0;
    v253 = v249 >> 2;
    v29 = (unint64_t)&v1532;
    do
    {
      v257 = *v198 + 40 * v252;
      if (*(_BYTE *)v257)
      {
        v258 = *(_DWORD *)(*v1527 + 4 * v252);
        v259 = *(_OWORD *)(v257 + 16);
        *(_OWORD *)&v1572[4] = *(_OWORD *)v257;
        *(_OWORD *)&v1572[20] = v259;
        *(_QWORD *)&v1572[36] = *(_QWORD *)(v257 + 32);
        v260 = *((_QWORD *)&v1563 + 1);
        v261 = *((_QWORD *)&v1563 + 1) + 1;
        if (*((_QWORD *)&v1563 + 1) + 1 <= (unint64_t)v1563)
        {
          v254 = *((_QWORD *)&v1562 + 1);
        }
        else
        {
          if (2 * (uint64_t)v1563 > v261)
            v261 = 2 * v1563;
          *(_QWORD *)&v1563 = v261;
          v262 = (__int128 *)*((_QWORD *)&v1562 + 1);
          is_mul_ok(v261, 0x30uLL);
          v254 = operator new[]();
          for (i = (_OWORD *)v254; v260; --v260)
          {
            v264 = *v262;
            v31 = v262[2];
            i[1] = v262[1];
            i[2] = v31;
            *i = v264;
            i += 3;
            v262 += 3;
          }
          _ZF = *((uint64_t **)&v1562 + 1) == &v1532 || *((_QWORD *)&v1562 + 1) == 0;
          if (!_ZF)
            MEMORY[0x212BC6368]();
          *((_QWORD *)&v1562 + 1) = v254;
          v260 = *((_QWORD *)&v1563 + 1);
          v198 = v1517;
        }
        v255 = v254 + 48 * v260;
        *(_DWORD *)v255 = v258;
        v256 = *(_OWORD *)&v1572[16];
        *(_OWORD *)(v255 + 4) = *(_OWORD *)v1572;
        *(_OWORD *)(v255 + 20) = v256;
        *((_QWORD *)&v246 + 1) = *(_QWORD *)&v1572[36];
        *(_OWORD *)(v255 + 32) = *(_OWORD *)&v1572[28];
        ++*((_QWORD *)&v1563 + 1);
      }
      ++v252;
    }
    while (v252 != v253);
  }
  v266 = *(_QWORD *)(v1530 + 8216);
  if (*(_BYTE *)(v1530 + 1931) && *(_BYTE *)(v266 + 1720))
  {
    v267 = v1530 + 12024;
    if (*(_BYTE *)v266)
    {
      v268 = *(_QWORD *)(v266 + 8);
      v269 = (_QWORD *)(v268 + 3104);
      if (v268 + 3104 == v267 || *(_QWORD *)(v268 + 3128) != 0)
        goto LABEL_250;
LABEL_249:
      *(_DWORD *)(v268 + 3136) = *(_DWORD *)(v1530 + 12056);
      sub_20F40AFF0(v269, *(uint64_t **)(v1530 + 12040), 0);
      v266 = *(_QWORD *)(v1530 + 8216);
      goto LABEL_250;
    }
    v268 = *(_QWORD *)(v266 + 16);
    v269 = (_QWORD *)(v268 + 3104);
    if (v268 + 3104 != v267 && *(_QWORD *)(v268 + 3128) == 0)
      goto LABEL_249;
  }
LABEL_250:
  v272 = *(unsigned __int8 *)(v266 + 1720);
  v273 = (int8x16_t *)(v266 + 864);
  v274 = (int8x16_t *)(v266 + 24);
  if (v272)
    v274 = v273;
  v275 = v274[21];
  *(_QWORD *)&v246 = v274[22].i64[0];
  *(_OWORD *)v1500 = v246;
  v1494 = (float64x2_t)v275;
  *(_QWORD *)&v246 = vextq_s8(v275, v275, 8uLL).u64[0];
  v1487 = *(double *)&v246;
  if (!v1463)
  {
    *(_QWORD *)(v1531 + 6768) = v1531 + 3152;
    *(_QWORD *)(v1531 + 6776) = *(_QWORD *)(v1531 + 8);
    v297 = (float64x2_t *)(v1531 + 176);
    if (*(_BYTE *)(v1531 + 2146))
      v298 = *(_QWORD *)(v1531 + 120);
    else
      v298 = 0;
    if (*(_BYTE *)(v1531 + 2146))
      v299 = v1531 + 176;
    else
      v299 = 0;
    *(_QWORD *)(v1531 + 6752) = v298;
    *(_QWORD *)(v1531 + 6760) = v299;
    sub_20FC17FB8((uint64_t *)v1531, *(double *)&v246, *(double *)v275.i64, *(double *)&v31, *(double *)&v32, *(double *)&v33, *(double *)&v34, v35, v36);
    v305 = *(_QWORD *)v1531;
    if (*(_QWORD *)v1531)
    {
      if (*(_BYTE *)(v1531 + 1317))
      {
        v306 = *(double *)v305;
        v307 = *(_QWORD *)(v305 + 8);
        v308 = *(double *)(v305 + 16);
        v309 = *(_QWORD *)(v305 + 24);
        v1679[0] = *(float64x2_t *)(v305 + 32);
        v1679[1].f64[0] = *(float64_t *)(v305 + 48);
        v310 = *(_QWORD *)(v305 + 56);
        *(_OWORD *)v1671 = *(_OWORD *)(v305 + 64);
        v1672[0] = *(void **)(v305 + 80);
        v311 = *(_OWORD *)(v305 + 88);
        *(_QWORD *)&v1664 = *(_QWORD *)(v305 + 104);
        v1663 = v311;
        v312 = *(_OWORD *)(v305 + 112);
        *(_QWORD *)&v1656 = *(_QWORD *)(v305 + 128);
        v1655 = v312;
        v313 = *(_OWORD *)(v305 + 136);
        *(_QWORD *)&v1648 = *(_QWORD *)(v305 + 152);
        v1647 = v313;
        v314 = *(_OWORD *)(v305 + 160);
        v315 = *(_OWORD *)(v305 + 176);
        v316 = *(_OWORD *)(v305 + 192);
        v317 = *(_OWORD *)(v305 + 208);
        *(_QWORD *)&object[64] = *(_QWORD *)(v305 + 224);
        *(_OWORD *)&object[48] = v317;
        *(_OWORD *)&object[32] = v316;
        *(_OWORD *)object = v314;
        *(_OWORD *)&object[16] = v315;
        v304 = *(int64x2_t *)(v305 + 232);
        v318 = *(_OWORD *)(v305 + 248);
        v319 = *(_OWORD *)(v305 + 264);
        v320 = *(_OWORD *)(v305 + 280);
        *(_QWORD *)&v1574[48] = *(_QWORD *)(v305 + 296);
        *(_OWORD *)&v1574[32] = v320;
        *(_OWORD *)&v1574[16] = v319;
        *(double *)(v1531 + 176) = v306 * *(double *)(v1531 + 1320);
        *(int64x2_t *)v1573 = v304;
        *(_OWORD *)v1574 = v318;
        v321 = v308 * *(double *)(v1531 + 1328);
        *(_QWORD *)(v1531 + 184) = v307;
        *(double *)(v1531 + 192) = v321;
        *(_QWORD *)(v1531 + 200) = v309;
        *(float64x2_t *)(v1531 + 208) = v1679[0];
        *(float64_t *)(v1531 + 224) = v1679[1].f64[0];
        *(_QWORD *)(v1531 + 232) = v310;
        v322 = *(_OWORD *)v1671;
        *(void **)(v1531 + 256) = v1672[0];
        *(_OWORD *)(v1531 + 240) = v322;
        v323 = v1663;
        *(_QWORD *)(v1531 + 280) = v1664;
        *(_OWORD *)(v1531 + 264) = v323;
        v324 = v1655;
        *(_QWORD *)(v1531 + 304) = v1656;
        *(_OWORD *)(v1531 + 288) = v324;
        v325 = v1647;
        *(_QWORD *)(v1531 + 328) = v1648;
        *(_OWORD *)(v1531 + 312) = v325;
        v326 = *(_OWORD *)object;
        v327 = *(_OWORD *)&object[16];
        v328 = *(_OWORD *)&object[32];
        v303 = *(_OWORD *)&object[48];
        *(_QWORD *)(v1531 + 400) = *(_QWORD *)&object[64];
        *(_OWORD *)(v1531 + 368) = v328;
        *(_OWORD *)(v1531 + 384) = v303;
        *(_OWORD *)(v1531 + 336) = v326;
        *(_OWORD *)(v1531 + 352) = v327;
        v301 = *(float64x2_t *)v1574;
        *(_OWORD *)(v1531 + 408) = *(_OWORD *)v1573;
        v300 = *(int64x2_t *)&v1574[16];
        v302 = *(_OWORD *)&v1574[32];
        *(_QWORD *)(v1531 + 472) = *(_QWORD *)&v1574[48];
        *(int64x2_t *)(v1531 + 440) = v300;
        *(_OWORD *)(v1531 + 456) = v302;
        *(float64x2_t *)(v1531 + 424) = v301;
      }
      else
      {
        v369 = *(_OWORD *)(v305 + 16);
        *v297 = *(float64x2_t *)v305;
        *(_OWORD *)(v1531 + 192) = v369;
        v370 = *(_OWORD *)(v305 + 32);
        *(_QWORD *)(v1531 + 224) = *(_QWORD *)(v305 + 48);
        *(_OWORD *)(v1531 + 208) = v370;
        *(_QWORD *)(v1531 + 232) = *(_QWORD *)(v305 + 56);
        v371 = *(_OWORD *)(v305 + 64);
        *(_QWORD *)(v1531 + 256) = *(_QWORD *)(v305 + 80);
        *(_OWORD *)(v1531 + 240) = v371;
        v372 = *(_OWORD *)(v305 + 88);
        *(_QWORD *)(v1531 + 280) = *(_QWORD *)(v305 + 104);
        *(_OWORD *)(v1531 + 264) = v372;
        v373 = *(_OWORD *)(v305 + 112);
        *(_QWORD *)(v1531 + 304) = *(_QWORD *)(v305 + 128);
        *(_OWORD *)(v1531 + 288) = v373;
        v374 = *(_OWORD *)(v305 + 136);
        *(_QWORD *)(v1531 + 328) = *(_QWORD *)(v305 + 152);
        *(_OWORD *)(v1531 + 312) = v374;
        v376 = *(_OWORD *)(v305 + 192);
        v375 = *(_OWORD *)(v305 + 208);
        v377 = *(_OWORD *)(v305 + 176);
        *(_QWORD *)(v1531 + 400) = *(_QWORD *)(v305 + 224);
        *(_OWORD *)(v1531 + 368) = v376;
        *(_OWORD *)(v1531 + 384) = v375;
        *(_OWORD *)(v1531 + 352) = v377;
        *(_OWORD *)(v1531 + 336) = *(_OWORD *)(v305 + 160);
        v378 = *(_OWORD *)(v305 + 264);
        v301 = *(float64x2_t *)(v305 + 280);
        v379 = *(_QWORD *)(v305 + 296);
        v302 = *(_OWORD *)(v305 + 248);
        *(_OWORD *)(v1531 + 424) = v302;
        *(_QWORD *)(v1531 + 472) = v379;
        *(_OWORD *)(v1531 + 440) = v378;
        *(float64x2_t *)(v1531 + 456) = v301;
        v300 = *(int64x2_t *)(v305 + 232);
        *(int64x2_t *)(v1531 + 408) = v300;
      }
    }
    v380 = *(_QWORD *)(v1531 + 8);
    v381 = *(_DWORD *)(v380 + 64);
    _CF = v381 >= v1529;
    v382 = v381 - v1529;
    if (_CF)
      v383 = v382;
    else
      v383 = 0;
    v384 = *(_QWORD **)(v380 + 48);
    v385 = v380 + 56;
    if (v384 != (_QWORD *)(v380 + 56))
    {
      v386 = 0;
      do
      {
        object[0] = 0;
        object[32] = 0;
        if (*((_QWORD *)&v1563 + 1))
        {
          v387 = 48 * *((_QWORD *)&v1563 + 1);
          v388 = *((_QWORD *)&v1562 + 1);
          while (*(_DWORD *)v388 != *((_DWORD *)v384 + 10))
          {
            v388 += 48;
            v387 -= 48;
            if (!v387)
              goto LABEL_325;
          }
        }
        else
        {
          v388 = *((_QWORD *)&v1562 + 1);
        }
        if (v388 != *((_QWORD *)&v1562 + 1) + 48 * *((_QWORD *)&v1563 + 1))
        {
          v1511 = *(float64x2_t *)(v388 + 32);
          v1520 = *(float64x2_t *)(v388 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v1520), (int32x4_t)vcgtzq_f64(v1511))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1878;
          }
          v301 = vmulq_f64(v1520, *v297);
          *(float64_t *)&v302 = v1511.f64[0];
          v300 = (int64x2_t)vmulq_f64(v1511, *(float64x2_t *)(v1531 + 192));
          *(int64x2_t *)&object[16] = v300;
          *(float64x2_t *)object = v301;
          object[32] = 1;
        }
LABEL_325:
        if ((sub_20FC19048(v1531, v384[4], v384[5], v386 < v383, v300, v301.f64[0], *(double *)&v302, *(double *)&v303, v304) & 1) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 188, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1878;
        }
        v389 = (_QWORD *)v384[1];
        if (v389)
        {
          do
          {
            v390 = v389;
            v389 = (_QWORD *)*v389;
          }
          while (v389);
        }
        else
        {
          do
          {
            v390 = (_QWORD *)v384[2];
            _ZF = *v390 == (_QWORD)v384;
            v384 = v390;
          }
          while (!_ZF);
        }
        ++v386;
        v384 = v390;
      }
      while (v390 != (_QWORD *)v385);
    }
    if (!*(_BYTE *)(v1531 + 2144))
      goto LABEL_402;
    v391 = sub_20FA56B40(v1531 + 5184, 0);
    *(_DWORD *)(v1531 + 2184) = v391;
    if (v391
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2036, (uint64_t)"num_optimized_slam_landmarks_ == 0", 34, (uint64_t)"No SLAM variable should exist at this point.", 44, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1878;
    }
    v392 = v1531;
    v394 = *(uint64_t **)(v1531 + 24);
    v393 = *(uint64_t **)(v1531 + 32);
    if (v394 == v393)
      goto LABEL_401;
    LODWORD(v1679[0].f64[0]) = 0;
    while (1)
    {
      v395 = *v394;
      if (*(_DWORD *)(*v394 + 520) != 2)
        goto LABEL_338;
      v396 = *(_QWORD *)(v1531 + 8);
      v399 = *(_QWORD *)(v396 + 56);
      v397 = v396 + 56;
      v398 = v399;
      if (v399)
      {
        do
        {
          v400 = v398;
          v398 = *(_QWORD *)(v398 + 8);
        }
        while (v398);
      }
      else
      {
        do
        {
          v400 = *(_QWORD *)(v397 + 16);
          _ZF = *(_QWORD *)v400 == v397;
          v397 = v400;
        }
        while (_ZF);
      }
      v401 = *(_QWORD *)(v395 + 496);
      v402 = *(_QWORD *)(v395 + 504);
      if (v401 != v402)
      {
        while (*(_QWORD *)v401 != *(_QWORD *)(v400 + 32) || *(_DWORD *)(v401 + 8) != *(_DWORD *)(v400 + 40))
        {
          v401 += 64;
          if (v401 == v402)
            goto LABEL_338;
        }
      }
      if (v401 == v402)
        goto LABEL_338;
      v403 = *(_DWORD *)(v395 + 32);
      v404 = *(char **)(v1531 + 5576);
      v405 = *(char **)(v1531 + 5584);
      if (v405 != v404)
      {
        v406 = (v405 - v404) >> 4;
        do
        {
          v407 = v406 >> 1;
          v408 = &v404[16 * (v406 >> 1)];
          v410 = *(_DWORD *)v408;
          v409 = v408 + 16;
          v406 += ~(v406 >> 1);
          if (v410 < v403)
            v404 = v409;
          else
            v406 = v407;
        }
        while (v406);
      }
      if (v404 != v405 && *(_DWORD *)v404 == v403)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2063, (uint64_t)"linear_system_.template findVariable<SLAMLandmarkVariableType>(landmarkID) == linear_system_.template endVariable<SLAMLandmarkVariableType>()", 141, (uint64_t)"There should not be any SLAM landmark Variable with this track ID.", 66, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1878;
        }
        v395 = *v394;
      }
      if (*(_BYTE *)(v395 + 488))
      {
        v411 = v395 + 40;
        *(_DWORD *)object = v403;
        object[4] = 1;
        *(_QWORD *)&object[8] = v395 + 40;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2065, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1878;
        }
        v411 = *v394 + 40;
        v412 = *(unsigned __int8 *)(*v394 + 488);
        if (*(_BYTE *)(*v394 + 488))
          v413 = *v394 + 40;
        else
          v413 = 0;
        *(_DWORD *)object = v403;
        object[4] = 1;
        *(_QWORD *)&object[8] = v413;
        if (!v412)
          goto LABEL_378;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v411 + 24))(v411))
      {
        v414 = *(_QWORD *)&object[8];
        *(_OWORD *)&object[16] = *(_OWORD *)(*(_QWORD *)&object[8] + 8);
        *(_QWORD *)&object[32] = *(_QWORD *)(*(_QWORD *)&object[8] + 24);
        _Q1 = *(_OWORD *)(*(_QWORD *)&object[8] + 64);
        _D3 = *(_QWORD *)(*(_QWORD *)&object[8] + 72);
        __asm { FMLA            D2, D3, V1.D[1] }
        if (fabs(sqrt(_D2 + *(double *)(v414 + 80) * *(double *)(v414 + 80)) + -1.0) > 0.000001
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1878;
        }
        object[4] = 0;
LABEL_373:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v414 + 24))(v414))
        {
          *(_OWORD *)&object[16] = *(_OWORD *)(v414 + 8);
          *(_QWORD *)&object[32] = *(_QWORD *)(v414 + 24);
          _Q1 = *(_OWORD *)(v414 + 64);
          _D3 = *(_QWORD *)(v414 + 72);
          __asm { FMLA            D2, D3, V1.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v414 + 80) * *(double *)(v414 + 80)) + -1.0) > 0.000001
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1878;
          }
          if (sub_20FC2870C(v1531 + 5184, (unsigned int *)object))
          {
            *(_BYTE *)(v1531 + 7868) = 0;
            *(_DWORD *)(v1531 + 7864) = 0;
          }
        }
        goto LABEL_378;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 798, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1878;
      }
      v414 = *(_QWORD *)&object[8];
      object[4] = 0;
      if (*(_QWORD *)&object[8])
        goto LABEL_373;
LABEL_378:
      ++*(_DWORD *)(v1531 + 2184);
      v421 = *(_QWORD *)(v1531 + 8);
      v385 = *(unsigned int *)(v400 + 40) | v385 & 0xFFFFFFFF00000000;
      v422 = *(_QWORD *)(v421 + 312);
      if (v422)
      {
        v423 = 0;
        v424 = *(void **)(v400 + 32);
        do
        {
          v425 = *(_QWORD **)(v421 + 296);
          if (v423 < 0)
          {
            v430 = v423;
            do
            {
              v431 = (_QWORD *)*v425;
              if (*v425)
              {
                do
                {
                  v429 = v431;
                  v431 = (_QWORD *)v431[1];
                }
                while (v431);
              }
              else
              {
                do
                {
                  v429 = (_QWORD *)v425[2];
                  _ZF = *v429 == (_QWORD)v425;
                  v425 = v429;
                }
                while (_ZF);
              }
              v425 = v429;
              _CF = __CFADD__(v430++, 1);
            }
            while (!_CF);
          }
          else if (v423)
          {
            v426 = v423;
            do
            {
              v428 = (_QWORD *)v425[1];
              if (v428)
              {
                do
                {
                  v429 = v428;
                  v428 = (_QWORD *)*v428;
                }
                while (v428);
              }
              else
              {
                do
                {
                  v429 = (_QWORD *)v425[2];
                  _ZF = *v429 == (_QWORD)v425;
                  v425 = v429;
                }
                while (!_ZF);
              }
              v425 = v429;
              v427 = v426-- <= 1;
            }
            while (!v427);
          }
          else
          {
            v429 = *(_QWORD **)(v421 + 296);
          }
          v432 = *((_DWORD *)v429 + 8);
          v1573[0] = v424;
          v1573[1] = (void *)v385;
          *(_DWORD *)v1574 = v432;
          sub_20FC24D84(v1531, (uint64_t)v1573, *v394, (unsigned int *)v1679);
          ++v423;
        }
        while (v423 != v422);
      }
LABEL_338:
      if (++v394 == v393)
      {
        v392 = v1531;
LABEL_401:
        sub_20FC1A874(v392);
LABEL_402:
        sub_20FC1B210((_QWORD *)v1531, *(unsigned int *)(v1531 + 2152), *(unsigned int *)(v1531 + 1920));
        sub_20FC147DC(v1530, (int64x2_t *)v1531);
        v433 = *(_QWORD *)(v1530 + 8216);
        v434 = *(unsigned __int8 *)(v433 + 1720);
        v435 = v433 + 864;
        v436 = v433 + 24;
        if (v434)
          v436 = v435;
        sub_20FC14978(v1531, *(unsigned __int8 *)(v1530 + 7688), *(unsigned __int8 *)(v436 + 360), v1494, v1487, *(float64x2_t *)v1500);
        v437 = *(_DWORD *)(v1530 + 8168);
        v438 = *(_DWORD *)(v1530 + 8172);
        v439 = (float64_t *)operator new((8 * v438 * v437 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v441 = v439;
        if (v438 * v437)
          memcpy(v439, *(const void **)(v1530 + 8152), 8 * v438 * v437);
        v442 = 0;
        v443 = 0;
        v444 = ((unint64_t)*(unsigned __int16 *)((char *)v1460 + 3) << 8) | ((unint64_t)*((unsigned __int8 *)v1460 + 5) << 24) | *((unsigned __int8 *)v1460 + 8);
        v445 = v444 | ((unint64_t)(*(unsigned __int16 *)((char *)v1460 + 9) | (*((unsigned __int8 *)v1460 + 11) << 16)) << 32);
        v1587 = *v1460 | ((unint64_t)*((unsigned __int8 *)v1460 + 2) << 16) | ((unint64_t)v1460[3] << 48) | ((unint64_t)v1460[6] << 24) | ((unint64_t)*((unsigned __int8 *)v1460 + 14) << 40);
        v446 = *(_DWORD *)(v1530 + 8176);
        v1588 = v444;
        v1590 = BYTE6(v445);
        v1589 = WORD2(v445);
        v447 = v437 + 1;
        v448 = 6;
        if (v446 == 1)
          v448 = 15;
        do
        {
          if (!*((_BYTE *)&v1587 + v443))
            v441[v442] = 1.0e10;
          ++v443;
          v442 += v447;
        }
        while (v448 != v443);
        v449 = *(_QWORD *)(v1530 + 8216);
        v450 = *(unsigned __int8 *)(v449 + 1720);
        v451 = v449 + 864;
        if (!*(_BYTE *)(v449 + 1720))
          v451 = v449 + 24;
        if (*(_BYTE *)(v451 + 416))
          v452 = *(_BYTE *)(v1531 + 2146) == 0;
        else
          v452 = 0;
        if (v452)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5206, (uint64_t)"!ba_->active_config().estimate_extrinsics || baid.parameters().use_IMU", 70, (uint64_t)"No extrinsics estimation in vision-only mode currently", 54, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v449 = *(_QWORD *)(v1530 + 8216);
          v450 = *(unsigned __int8 *)(v449 + 1720);
        }
        v453 = v449 + 864;
        if (!v450)
          v453 = v449 + 24;
        if (v438 >= v437)
          v454 = v437;
        else
          v454 = v438;
        if (v454 < 0x15 || !*(_BYTE *)(v453 + 416))
          goto LABEL_467;
        v455 = *(unsigned int **)(v1531 + 5384);
        v1521 = *(unsigned int **)(v1531 + 5392);
        if (v455 == v1521)
          goto LABEL_466;
        v456 = &v441[15 * v437 + 15];
        v457 = v456[v447];
        v458 = v456[2 * v447];
        v459 = v456[3 * v447];
        v460 = *v456;
        v461 = sqrt(*v456);
        v462 = sqrt(v457);
        v463 = sqrt(v458);
        v1488 = sqrt(v459);
        v1495 = v456[4 * v447];
        v1473 = sqrt(v1495);
        *(int64x2_t *)v1501 = vdupq_n_s64(0x7FF8000000000000uLL);
        v1477 = v456[5 * v447];
        v1469 = sqrt(v1477);
        while (2)
        {
          v464 = *v455;
          v465 = (char *)operator new(0x58uLL);
          v467 = v465;
          *((_QWORD *)v465 + 1) = 0;
          v468 = (unint64_t *)(v465 + 8);
          *((_QWORD *)v465 + 2) = 0;
          *(_QWORD *)v465 = &off_24CA016C8;
          *((_QWORD *)v465 + 3) = &off_24CA01718;
          v469 = v465 + 24;
          v465[32] = 1;
          if (v460 >= 1.0e-15
            && (*((double *)v465 + 5) = v461, v457 >= 1.0e-15)
            && (*((double *)v465 + 6) = v462, v458 >= 1.0e-15)
            && (*((double *)v465 + 7) = v463, v459 >= 1.0e-15)
            && (*((double *)v465 + 8) = v1488, v1495 >= 1.0e-15)
            && (*((double *)v465 + 9) = v1473, v1477 >= 1.0e-15))
          {
            *((double *)v465 + 10) = v1469;
            v465[32] = 1;
          }
          else
          {
            v465[32] = 0;
            *(_OWORD *)(v465 + 40) = *(_OWORD *)v1501;
            *(_OWORD *)(v465 + 56) = *(_OWORD *)v1501;
            *(_OWORD *)(v465 + 72) = *(_OWORD *)v1501;
          }
          *(_QWORD *)&v1679[0].f64[0] = v465 + 24;
          *(_QWORD *)&v1679[0].f64[1] = v465;
          v470 = *(char **)(v1531 + 5384);
          v471 = *(char **)(v1531 + 5392);
          if (v471 != v470)
          {
            v472 = (v471 - v470) >> 4;
            do
            {
              v473 = v472 >> 1;
              v474 = (unsigned int *)&v470[16 * (v472 >> 1)];
              v476 = *v474;
              v475 = (char *)(v474 + 4);
              v472 += ~(v472 >> 1);
              if (v476 < v464)
                v470 = v475;
              else
                v472 = v473;
            }
            while (v472);
          }
          if (v470 == v471 || *(_DWORD *)v470 != (_DWORD)v464)
          {
            v477 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v470 = v471;
            if (v477)
              abort();
          }
          v478 = *((_QWORD *)v470 + 1);
          v479 = *(_OWORD *)(v478 + 48);
          v480 = *(_OWORD *)(v478 + 80);
          *(_OWORD *)&object[48] = *(_OWORD *)(v478 + 64);
          *(_OWORD *)&object[64] = v480;
          *(_QWORD *)&object[80] = *(_QWORD *)(v478 + 96);
          *(_OWORD *)&object[32] = v479;
          *(_OWORD *)&object[16] = *(_OWORD *)(v478 + 32);
          *(_OWORD *)&object[88] = *(_OWORD *)(v478 + 104);
          *(_QWORD *)&object[104] = *(_QWORD *)(v478 + 120);
          *(_QWORD *)object = v464;
          *(_QWORD *)&object[112] = v469;
          *(_QWORD *)&object[120] = v467;
          do
            v481 = __ldxr(v468);
          while (__stxr(v481 + 1, v468));
          LODWORD(v1663) = v464;
          v1671[1] = 0;
          v1671[0] = 0;
          v1573[1] = 0;
          v1573[0] = 0;
          if ((sub_20FB8AB84((int64x2_t *)(v1531 + 5184), (__int128 *)object, &v1663, 0, 0, v466) & 1) != 0)
          {
            *(_BYTE *)(v1531 + 7868) = 0;
            *(_DWORD *)(v1531 + 7864) = 0;
            v482 = *(std::__shared_weak_count **)&object[120];
            if (!*(_QWORD *)&object[120])
              goto LABEL_457;
          }
          else
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 857, (uint64_t)"ret.second", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v482 = *(std::__shared_weak_count **)&object[120];
            if (!*(_QWORD *)&object[120])
            {
LABEL_457:
              v485 = v1679[0].f64[1];
              if (*(_QWORD *)&v1679[0].f64[1])
                goto LABEL_458;
              goto LABEL_430;
            }
          }
          p_shared_owners = (unint64_t *)&v482->__shared_owners_;
          do
            v484 = __ldaxr(p_shared_owners);
          while (__stlxr(v484 - 1, p_shared_owners));
          if (v484)
            goto LABEL_457;
          ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
          std::__shared_weak_count::__release_weak(v482);
          v485 = v1679[0].f64[1];
          if (*(_QWORD *)&v1679[0].f64[1])
          {
LABEL_458:
            v486 = (unint64_t *)(*(_QWORD *)&v485 + 8);
            do
              v487 = __ldaxr(v486);
            while (__stlxr(v487 - 1, v486));
            if (!v487)
            {
              (*(void (**)(float64_t))(**(_QWORD **)&v485 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v485));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v485);
            }
          }
LABEL_430:
          v455 += 4;
          if (v455 != v1521)
            continue;
          break;
        }
        v449 = *(_QWORD *)(v1530 + 8216);
LABEL_466:
        v450 = *(unsigned __int8 *)(v449 + 1720);
LABEL_467:
        if (v450)
        {
LABEL_468:
          MEMORY[0x212BC6368](v441, 0x1000C8000313F17);
          v488 = *(_QWORD *)(v1530 + 8216);
          v489 = *(unsigned __int8 *)(v488 + 1720);
          v490 = v488 + 864;
          if (!*(_BYTE *)(v488 + 1720))
            v490 = v488 + 24;
          __asm { FMOV            V1.2D, #1.0 }
          v1489 = _Q1;
          if (!*(_BYTE *)(v490 + 425))
            goto LABEL_507;
          v1512 = vdivq_f64(_Q1, *(float64x2_t *)(v490 + 288));
          if (vminnmvq_f64(vminnmq_f64(vminnmq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1512.f64[0], 0), (float64x2_t)vdupq_laneq_s64((int64x2_t)v1512, 1)), v1512)) > 0.0|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5318, (uint64_t)"prior_info.min() > 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v492 = *(unsigned int **)(v1531 + 5480);
            v493 = *(unsigned int **)(v1531 + 5488);
            if (v492 != v493)
            {
              v494 = sqrt(v1512.f64[0]);
              v495 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(v1512, (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL))));
              v496 = v1512.f64[1];
              v1502 = v495.i8[4];
              v497 = v495.i8[0];
              v1513 = vdupq_n_s64(0x7FF8000000000000uLL);
              v498 = sqrt(v496);
              do
              {
                v499 = *v492;
                v500 = (char *)operator new(0x58uLL);
                v502 = v500;
                *((_QWORD *)v500 + 1) = 0;
                v503 = (unint64_t *)(v500 + 8);
                *((_QWORD *)v500 + 2) = 0;
                *(_QWORD *)v500 = &off_24CA016C8;
                *((_QWORD *)v500 + 3) = &off_24CA01718;
                v504 = v500 + 24;
                v500[32] = 1;
                if ((v497 & 1) != 0
                  || (*((double *)v500 + 5) = v494,
                      *((double *)v500 + 6) = v494,
                      *((double *)v500 + 7) = v494,
                      (v1502 & 1) != 0))
                {
                  v500[32] = 0;
                  *(int64x2_t *)(v500 + 40) = v1513;
                  *(int64x2_t *)(v500 + 56) = v1513;
                  *(int64x2_t *)(v500 + 72) = v1513;
                }
                else
                {
                  *((double *)v500 + 8) = v498;
                  *((double *)v500 + 9) = v498;
                  *((double *)v500 + 10) = v498;
                  v500[32] = 1;
                }
                *(_QWORD *)&v1679[0].f64[0] = v500 + 24;
                *(_QWORD *)&v1679[0].f64[1] = v500;
                v505 = *(char **)(v1531 + 5480);
                v506 = *(char **)(v1531 + 5488);
                if (v506 != v505)
                {
                  v507 = (v506 - v505) >> 4;
                  do
                  {
                    v508 = v507 >> 1;
                    v509 = (unsigned int *)&v505[16 * (v507 >> 1)];
                    v511 = *v509;
                    v510 = (char *)(v509 + 4);
                    v507 += ~(v507 >> 1);
                    if (v511 < v499)
                      v505 = v510;
                    else
                      v507 = v508;
                  }
                  while (v507);
                }
                if (v505 == v506 || *(_DWORD *)v505 != (_DWORD)v499)
                {
                  v512 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v505 = v506;
                  if (v512)
                    abort();
                }
                v513 = *((_QWORD *)v505 + 1);
                v514 = *(_OWORD *)(v513 + 48);
                v515 = *(_OWORD *)(v513 + 80);
                *(_OWORD *)&object[48] = *(_OWORD *)(v513 + 64);
                *(_OWORD *)&object[64] = v515;
                *(_QWORD *)&object[80] = *(_QWORD *)(v513 + 96);
                *(_OWORD *)&object[32] = v514;
                *(_OWORD *)&object[16] = *(_OWORD *)(v513 + 32);
                *(_OWORD *)&object[88] = *(_OWORD *)(v513 + 104);
                *(_QWORD *)&object[104] = *(_QWORD *)(v513 + 120);
                *(_QWORD *)object = v499;
                *(_QWORD *)&object[112] = v504;
                *(_QWORD *)&object[120] = v502;
                do
                  v516 = __ldxr(v503);
                while (__stxr(v516 + 1, v503));
                LODWORD(v1663) = v499;
                v1671[1] = 0;
                v1671[0] = 0;
                v1573[1] = 0;
                v1573[0] = 0;
                if ((sub_20FBF1398((int64x2_t *)(v1531 + 5184), (__int128 *)object, &v1663, 0, 0, v501) & 1) != 0)
                {
                  *(_BYTE *)(v1531 + 7868) = 0;
                  *(_DWORD *)(v1531 + 7864) = 0;
                  v517 = *(std::__shared_weak_count **)&object[120];
                  if (!*(_QWORD *)&object[120])
                    goto LABEL_499;
                }
                else
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 881, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor. Likely duplicated factor ids.", 55, (void (*)(void **))sub_21023DDB0))
                  {
                    abort();
                  }
                  v517 = *(std::__shared_weak_count **)&object[120];
                  if (!*(_QWORD *)&object[120])
                  {
LABEL_499:
                    v520 = v1679[0].f64[1];
                    if (*(_QWORD *)&v1679[0].f64[1])
                      goto LABEL_500;
                    goto LABEL_475;
                  }
                }
                v518 = (unint64_t *)&v517->__shared_owners_;
                do
                  v519 = __ldaxr(v518);
                while (__stlxr(v519 - 1, v518));
                if (v519)
                  goto LABEL_499;
                ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
                std::__shared_weak_count::__release_weak(v517);
                v520 = v1679[0].f64[1];
                if (*(_QWORD *)&v1679[0].f64[1])
                {
LABEL_500:
                  v521 = (unint64_t *)(*(_QWORD *)&v520 + 8);
                  do
                    v522 = __ldaxr(v521);
                  while (__stlxr(v522 - 1, v521));
                  if (!v522)
                  {
                    (*(void (**)(float64_t))(**(_QWORD **)&v520 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v520));
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v520);
                  }
                }
LABEL_475:
                v492 += 4;
              }
              while (v492 != v493);
            }
            v488 = *(_QWORD *)(v1530 + 8216);
            v489 = *(unsigned __int8 *)(v488 + 1720);
LABEL_507:
            v523 = v488 + 864;
            if (!v489)
              v523 = v488 + 24;
            if (*(_BYTE *)(v523 + 417))
            {
              sub_20FC36F8C(v1531, 0, *(double *)(v523 + 112));
              v488 = *(_QWORD *)(v1530 + 8216);
              v489 = *(unsigned __int8 *)(v488 + 1720);
            }
            v524 = v488 + 864;
            if (!v489)
              v524 = v488 + 24;
            if (*(_BYTE *)(v524 + 419))
            {
              sub_20FC36F8C(v1531, 1u, *(double *)(v524 + 120));
              v488 = *(_QWORD *)(v1530 + 8216);
              v489 = *(unsigned __int8 *)(v488 + 1720);
            }
            v525 = v488 + 864;
            if (!v489)
              v525 = v488 + 24;
            if (!*(_BYTE *)(v525 + 426))
              goto LABEL_537;
            if (*(double *)(v525 + 128) > 0.0
              && *(double *)(v525 + 136) > 0.0
              && *(double *)(v525 + 144) > 0.0
              && *(double *)(v525 + 152) > 0.0)
            {
              goto LABEL_524;
            }
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5338, (uint64_t)"std::all_of(ba_->active_config().initial_intrinsics_bias_variance.begin(), ba_->active_config().initial_intrinsics_bias_variance.end(), [](const double d) { return d > 0; })",
                    173,
                    (uint64_t)"",
                    0,
                    (void (*)(void **))sub_21023DDB0))
            {
              v488 = *(_QWORD *)(v1530 + 8216);
              v489 = *(unsigned __int8 *)(v488 + 1720);
LABEL_524:
              if (v489)
                v526 = (float64x2_t *)(v488 + 864);
              else
                v526 = (float64x2_t *)(v488 + 24);
              v527 = *(unsigned int **)(v1531 + 5864);
              v528 = *(unsigned int **)(v1531 + 5872);
              if (v527 != v528)
              {
                v1514 = vdivq_f64(v1489, vsqrtq_f64(v526[9]));
                v1522 = vdivq_f64(v1489, vsqrtq_f64(v526[8]));
                v529 = vminnmvq_f64(vminnmq_f64(v1522, v1514));
                do
                {
                  v530 = *((_QWORD *)v527 + 1);
                  if (*(_BYTE *)(v530 + 20))
                  {
                    v531 = *v527;
                    *(_QWORD *)object = *v527;
                    v532 = *(_OWORD *)(v530 + 48);
                    *(_OWORD *)&object[16] = *(_OWORD *)(v530 + 32);
                    *(_OWORD *)&object[32] = v532;
                    *(float64x2_t *)&object[48] = v1522;
                    *(float64x2_t *)&object[64] = v1514;
                    object[80] = 1;
                    if (v529 <= 0.0
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
                    {
                      goto LABEL_1878;
                    }
                    LODWORD(v1671[0]) = v531;
                    v1679[0] = 0uLL;
                    v1573[1] = 0;
                    v1573[0] = 0;
                    if ((sub_20FB80AC8((int64x2_t *)(v1531 + 5184), (__int128 *)object, (unsigned int *)v1671, 0, 0) & 1) != 0)
                    {
                      *(_BYTE *)(v1531 + 7868) = 0;
                      *(_DWORD *)(v1531 + 7864) = 0;
                    }
                  }
                  v527 += 4;
                }
                while (v527 != v528);
                v488 = *(_QWORD *)(v1530 + 8216);
              }
              v489 = *(unsigned __int8 *)(v488 + 1720);
LABEL_537:
              v533 = v488 + 864;
              v534 = v488 + 24;
              if (v489)
                v534 = v533;
              if (*(_BYTE *)(v534 + 432))
              {
                *(double *)object = 1.0 / *(double *)(v534 + 256);
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                *(_QWORD *)&object[24] = *(_QWORD *)object;
                object[32] = 1;
              }
              else
              {
                object[0] = 0;
                object[32] = 0;
              }
              sub_20FC36C98(v1531, (uint64_t)object);
              v570 = *(_QWORD *)(v1530 + 8216);
              v571 = *(unsigned __int8 *)(v570 + 1720);
              v572 = v570 + 864;
              v573 = v570 + 24;
              if (v571)
                v573 = v572;
              if (*(_BYTE *)(v573 + 434))
              {
                v574 = *(float64x2_t *)(v573 + 264);
                v575 = vmulq_f64(v574, (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
                v574.f64[0] = *(double *)(v573 + 280) * 0.0174532925;
                *(float64x2_t *)object = vdivq_f64(v1489, v575);
                *(_QWORD *)&object[16] = *(_OWORD *)&vdivq_f64(v1489, v574);
                object[24] = 1;
              }
              else
              {
                object[0] = 0;
                object[24] = 0;
              }
              sub_20FC36DFC(v1531, (uint64_t)object);
              v578 = *(_QWORD *)(v1530 + 8216);
              v579 = *(unsigned __int8 *)(v578 + 1720);
              v580 = v578 + 864;
              if (!*(_BYTE *)(v578 + 1720))
                v580 = v578 + 24;
              if (*(_BYTE *)(v580 + 423))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v580 + 304));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1573[0]) = 0;
                v1574[8] = 0;
                v576 = sub_20FC33B98((int64x2_t *)v1531, (__n128 *)object, 5u, (__int128 *)v1573, 0);
                v578 = *(_QWORD *)(v1530 + 8216);
                v579 = *(unsigned __int8 *)(v578 + 1720);
              }
              v581 = v578 + 864;
              if (!v579)
                v581 = v578 + 24;
              if (*(_BYTE *)(v581 + 424))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v581 + 312));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1573[0]) = 0;
                v1574[8] = 0;
                v576 = sub_20FC33B98((int64x2_t *)v1531, (__n128 *)object, 6u, (__int128 *)v1573, 0);
                v578 = *(_QWORD *)(v1530 + 8216);
                v579 = *(unsigned __int8 *)(v578 + 1720);
              }
              v582 = v578 + 864;
              if (!v579)
                v582 = v578 + 24;
              if (*(_BYTE *)(v582 + 421))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v582 + 320));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1573[0]) = 0;
                v1574[8] = 0;
                v576 = sub_20FC33B98((int64x2_t *)v1531, (__n128 *)object, 3u, (__int128 *)v1573, 0);
                v578 = *(_QWORD *)(v1530 + 8216);
                v579 = *(unsigned __int8 *)(v578 + 1720);
              }
              v583 = v578 + 864;
              v584 = v578 + 24;
              if (v579)
                v584 = v583;
              if (*(_BYTE *)(v584 + 422))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v584 + 328));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1573[0]) = 0;
                v1574[8] = 0;
                v576 = sub_20FC33B98((int64x2_t *)v1531, (__n128 *)object, 4u, (__int128 *)v1573, 0);
              }
              goto LABEL_823;
            }
          }
LABEL_1878:
          abort();
        }
        v535 = *(_QWORD *)(*a9 + 48);
        v1515 = v441[v447];
        v440.f64[0] = *v441;
        v536 = v441[2 * v447];
        v537 = v441[3 * v447];
        v538 = v441[4 * v447];
        v539 = v441[5 * v447];
        v1523 = v440;
        if (*(_BYTE *)(v1531 + 2146))
        {
          v540 = v441[6 * v447];
          v541 = v441[7 * v447];
          v542 = v441[8 * v447];
          v543 = v441[9 * v447];
          v1478 = v441[10 * v447];
          v1481 = v441[11 * v447];
          v1490 = v441[12 * v447];
          v1496 = v441[13 * v447];
          v1503 = v441[14 * v447];
          if (*(_BYTE *)(v449 + 97))
          {
            v544 = *(_QWORD *)(v535 + 48);
            v545 = *(_QWORD *)(v544 + 16);
            v546 = *(_QWORD *)(v544 + 40);
            v547 = *(_OWORD *)(v544 + 24);
            v548 = *(_QWORD *)(v544 + 64);
            v549 = *(_OWORD *)(v544 + 48);
            *(_OWORD *)object = *(_OWORD *)v544;
            *(_OWORD *)&object[24] = v547;
            *(_QWORD *)&object[16] = v545;
            *(_QWORD *)&object[40] = v546;
            *(_OWORD *)&object[48] = v549;
            *(_QWORD *)&object[64] = v548;
            sub_20F1B6B0C((float64x2_t *)object);
            *(_OWORD *)&v1574[16] = *(_OWORD *)&object[32];
            *(_OWORD *)&v1574[32] = *(_OWORD *)&object[48];
            *(_OWORD *)v1574 = *(_OWORD *)&object[16];
            *(_OWORD *)v1573 = *(_OWORD *)object;
            v1575 = *(_OWORD *)(v544 + 72);
            *(_QWORD *)&v1576 = *(_QWORD *)(v544 + 88);
            v550 = *(_OWORD *)(v544 + 96);
            v551 = *(_QWORD *)(v544 + 136);
            *(_QWORD *)&v1574[48] = *(_QWORD *)&object[64];
            *(_QWORD *)&v1574[72] = v551;
            v552 = *(_QWORD *)(v544 + 112);
            *(_OWORD *)&v1574[80] = v550;
            *(_OWORD *)&v1574[56] = *(_OWORD *)(v544 + 120);
            v553 = *(_OWORD *)(v544 + 144);
            v554 = *(_QWORD *)(v544 + 160);
            *(_QWORD *)&v1574[96] = v552;
            *(_QWORD *)&v1574[120] = v554;
            *(_OWORD *)&v1574[104] = v553;
            v555 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1531 + 8) + 48) + 48);
            v1464 = *(double *)(v555 + 16);
            v1462 = *(int8x16_t *)v555;
            v1474 = *(double *)(v555 + 40);
            v1470 = *(int8x16_t *)(v555 + 24);
            v1467 = *(double *)(v555 + 64);
            v1465 = *(int8x16_t *)(v555 + 48);
            v1691 = 0u;
            v1692 = 0u;
            v1693 = 0u;
            v1694 = 0u;
            v1695 = 0u;
            v1696 = 0u;
            v1685 = 0u;
            v1686 = 0u;
            v1687 = 0u;
            v1688 = 0u;
            v1689 = 0u;
            v1690 = 0u;
            v1684 = 0;
            v1683 = 0u;
            v1682 = 0u;
            v1681 = 0u;
            v1680 = 0u;
            memset(v1679, 0, sizeof(v1679));
            v1678 = 0;
            v1677 = 0u;
            v1676 = 0u;
            v1675 = 0u;
            v1674 = 0u;
            v1673 = 0u;
            *(_OWORD *)v1672 = 0u;
            *(_OWORD *)v1671 = 0u;
            v1670 = 0;
            v1669 = 0u;
            v1668 = 0u;
            v1667 = 0u;
            v1666 = 0u;
            v1665 = 0u;
            v1664 = 0u;
            v1663 = 0u;
            v1662 = 0;
            v1661 = 0u;
            v1660 = 0u;
            v1659 = 0u;
            v1658 = 0u;
            v1657 = 0u;
            v1656 = 0u;
            v1655 = 0u;
            v1654 = 0;
            v1653 = 0u;
            v1652 = 0u;
            v1651 = 0u;
            v1650 = 0u;
            v1649 = 0u;
            v1648 = 0u;
            v1647 = 0u;
            v1646 = 0;
            v1645 = 0u;
            v1644 = 0u;
            v1643 = 0u;
            v1642 = 0u;
            v1641 = 0u;
            v1640 = 0u;
            v1639 = 0u;
            v1638 = 0;
            v1637 = 0u;
            v1636 = 0u;
            v1635 = 0u;
            v1634 = 0u;
            v1633 = 0u;
            v1632 = 0u;
            v1631 = 0u;
            v1630 = 0;
            v1629 = 0u;
            v1628 = 0u;
            v1627 = 0u;
            v1626 = 0u;
            v1625 = 0u;
            v1624 = 0u;
            v1623 = 0u;
            v1622 = 0;
            v1621 = 0u;
            v1620 = 0u;
            v1619 = 0u;
            v1618 = 0u;
            v1617 = 0u;
            v1616 = 0u;
            v1615 = 0u;
            v1614 = 0;
            v1613 = 0u;
            v1612 = 0u;
            v1611 = 0u;
            v1610 = 0u;
            v1609 = 0u;
            v1608 = 0u;
            v1607 = 0u;
            v1606 = 0;
            v1605 = 0u;
            v1604 = 0u;
            v1603 = 0u;
            v1602 = 0u;
            v1601 = 0u;
            v1600 = 0u;
            v1599 = 0u;
            v1598 = 0;
            v1597 = 0u;
            v1596 = 0u;
            v1595 = 0u;
            v1594 = 0u;
            v1593 = 0u;
            v1592 = 0u;
            v1591 = 0u;
            v556 = COERCE_DOUBLE(operator new(0x738uLL));
            v557.f64[0] = v1464;
            v557.f64[1] = v1474;
            v558 = *(double *)vextq_s8(v1462, v1462, 8uLL).i64;
            v559.f64[0] = v558;
            v559.f64[1] = *(double *)vextq_s8(v1470, v1470, 8uLL).i64;
            *(_QWORD *)&v560.f64[0] = v1462.i64[0];
            *(_QWORD *)&v560.f64[1] = v1470.i64[0];
            *(_QWORD *)&v561.f64[0] = v1465.i64[0];
            v561.f64[1] = *(double *)vextq_s8(v1465, v1465, 8uLL).i64;
            *(_QWORD *)(*(_QWORD *)&v556 + 8) = 0;
            v562 = (unint64_t *)(*(_QWORD *)&v556 + 8);
            *(_QWORD *)(*(_QWORD *)&v556 + 16) = 0;
            **(_QWORD **)&v556 = &off_24CA04BD0;
            *(_QWORD *)(*(_QWORD *)&v556 + 24) = &off_24CA00428;
            *(_BYTE *)(*(_QWORD *)&v556 + 32) = 1;
            *(_DWORD *)object = 2;
            v563 = vmulq_f64(v560, (float64x2_t)0);
            v564 = vmlaq_f64(vmlaq_f64(v563, (float64x2_t)0, v559), (float64x2_t)vdupq_n_s64(0x4202A05F20000000uLL), v557);
            v565 = vmlaq_f64(vmlaq_n_f64(v563, v559, v1515), (float64x2_t)0, v557);
            v566 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v560, v1523.f64[0]), (float64x2_t)0, v559), (float64x2_t)0, v557);
            *(float64x2_t *)&object[8] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v566, *(double *)v1462.i64), v565, v558), v564, v1464);
            v557.f64[0] = vmulq_f64(v561, (float64x2_t)0).f64[0];
            v567 = v557.f64[0] + v561.f64[1] * 0.0 + v1467 * 1.0e10;
            v557.f64[0] = v557.f64[0] + v561.f64[1] * v1515 + v1467 * 0.0;
            v559.f64[0] = vmulq_f64(v561, v1523).f64[0] + v561.f64[1] * 0.0 + v1467 * 0.0;
            *(double *)&object[24] = v559.f64[0] * *(double *)v1462.i64 + v557.f64[0] * v558 + v567 * v1464;
            *(_OWORD *)&object[64] = v1693;
            *(_OWORD *)&object[80] = v1694;
            *(_OWORD *)&object[96] = v1695;
            *(_OWORD *)&object[112] = v1696;
            *(_OWORD *)&object[32] = v1691;
            *(_OWORD *)&object[48] = v1692;
            *(float64x2_t *)&object[128] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v566, *(double *)v1470.i64), v565, v559.f64[1]), v564, v1474);
            *(_OWORD *)&object[184] = v1687;
            *(_OWORD *)&object[200] = v1688;
            *(_OWORD *)&object[216] = v1689;
            *(_OWORD *)&object[232] = v1690;
            *(_OWORD *)&object[152] = v1685;
            *(_OWORD *)&object[168] = v1686;
            *(float64x2_t *)&object[248] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v566, *(double *)v1465.i64), v565, v561.f64[1]), v564, v1467);
            *(double *)&object[144] = v559.f64[0] * *(double *)v1470.i64 + v557.f64[0] * v559.f64[1] + v567 * v1474;
            *(double *)&v1698 = v559.f64[0] * *(double *)v1465.i64 + v557.f64[0] * v561.f64[1] + v567 * v1467;
            v1702 = v1680;
            *(float64x2_t *)v1701 = v1679[2];
            *(float64x2_t *)v1700 = v1679[1];
            v1699 = v1679[0];
            *(_QWORD *)&v1706 = v1684;
            v1705 = v1683;
            v1704 = v1682;
            v1703 = v1681;
            *((double *)&v1706 + 1) = v537;
            v1710 = v1674;
            v1709 = v1673;
            v1708 = *(_OWORD *)v1672;
            v1707 = *(_OWORD *)v1671;
            *(_QWORD *)&v1714 = v1678;
            v1713 = v1677;
            v1712 = v1676;
            v1711 = v1675;
            *((double *)&v1714 + 1) = v538;
            v1718 = v1666;
            v1717 = v1665;
            v1716 = v1664;
            v1715 = v1663;
            v1722 = v1670;
            v1721 = v1669;
            v1720 = v1668;
            v1719 = v1667;
            v1723 = v539;
            v1727 = v1658;
            v1726 = v1657;
            v1725 = v1656;
            v1724 = v1655;
            v1731 = v1662;
            v1730 = v1661;
            v1729 = v1660;
            v1728 = v1659;
            v1732 = v540;
            v1736 = v1650;
            v1735 = v1649;
            v1734 = v1648;
            v1733 = v1647;
            v1740 = v1654;
            v1739 = v1653;
            v1738 = v1652;
            v1737 = v1651;
            v1741 = v541;
            v1745 = v1642;
            v1744 = v1641;
            v1743 = v1640;
            v1742 = v1639;
            v1749 = v1646;
            v1748 = v1645;
            v1747 = v1644;
            v1746 = v1643;
            v1750 = v542;
            v1754 = v1634;
            v1753 = v1633;
            v1752 = v1632;
            v1751 = v1631;
            v1758 = v1638;
            v1757 = v1637;
            v1756 = v1636;
            v1755 = v1635;
            v1759 = v543;
            v1763 = v1626;
            v1762 = v1625;
            v1761 = v1624;
            v1760 = v1623;
            v1767 = v1630;
            v1766 = v1629;
            v1765 = v1628;
            v1764 = v1627;
            v1768 = v1478;
            v1772 = v1618;
            v1771 = v1617;
            v1770 = v1616;
            v1769 = v1615;
            v1776 = v1622;
            v1775 = v1621;
            v1774 = v1620;
            v1773 = v1619;
            v1777 = v1481;
            v1781 = v1610;
            v1780 = v1609;
            v1779 = v1608;
            v1778 = v1607;
            v1785 = v1614;
            v1784 = v1613;
            v1783 = v1612;
            v1782 = v1611;
            v1786 = v1490;
            v1790 = v1602;
            v1789 = v1601;
            v1788 = v1600;
            v1787 = v1599;
            v1794 = v1606;
            v1793 = v1605;
            v1792 = v1604;
            v1791 = v1603;
            v1795 = v1496;
            v1799 = v1594;
            v1798 = v1593;
            v1797 = v1592;
            v1796 = v1591;
            v1803 = v1598;
            v1802 = v1597;
            v1801 = v1596;
            v1800 = v1595;
            v1804 = v1503;
            v568 = sub_20E8BE940();
            *(_DWORD *)object = v568 != 0;
            *(_BYTE *)(*(_QWORD *)&v556 + 32) = v568 == 0;
            if (v568)
            {
              memset_pattern16((void *)(*(_QWORD *)&v556 + 40), &unk_210315390, 0x708uLL);
            }
            else
            {
              v1571[0] = (double *)&object[8];
              sub_20F4D52BC(*(_QWORD *)&v556 + 40, v1571);
            }
            *(_BYTE *)(*(_QWORD *)&v556 + 1840) = 0;
            *((_QWORD *)&v1569 + 1) = *(_QWORD *)&v556 + 24;
            *(double *)&v1570 = v556;
            v664 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1531 + 8) + 48) + 40);
            *(_OWORD *)&object[144] = *(_OWORD *)&v1574[112];
            *(_OWORD *)&object[160] = v1575;
            *(_OWORD *)&object[80] = *(_OWORD *)&v1574[48];
            *(_OWORD *)&object[96] = *(_OWORD *)&v1574[64];
            *(_OWORD *)&object[128] = *(_OWORD *)&v1574[96];
            *(_OWORD *)&object[112] = *(_OWORD *)&v1574[80];
            *(_OWORD *)&object[16] = *(_OWORD *)v1573;
            *(_OWORD *)&object[32] = *(_OWORD *)v1574;
            *(_OWORD *)&object[64] = *(_OWORD *)&v1574[32];
            *(_OWORD *)&object[48] = *(_OWORD *)&v1574[16];
            *(_QWORD *)object = 0;
            *(_QWORD *)&object[176] = v1576;
            *(_QWORD *)&object[184] = *(_QWORD *)&v556 + 24;
            *(double *)&object[192] = v556;
            do
              v665 = __ldxr(v562);
            while (__stxr(v665 + 1, v562));
            *(_QWORD *)&v1569 = v664 | (v664 << 32);
            v1568 = 0;
            v1567 = 0;
            v1571[1] = 0;
            v1571[0] = 0;
            if ((sub_20FBEF3AC((int64x2_t *)(v1531 + 5184), (unint64_t *)object, &v1569, 0, 0, v569) & 1) != 0)
            {
              *(_BYTE *)(v1531 + 7868) = 0;
              *(_DWORD *)(v1531 + 7864) = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 930, (uint64_t)"ret.second", 10, (uint64_t)"Prior factor should be added.", 29, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v666 = *(std::__shared_weak_count **)&object[192];
            if (*(_QWORD *)&object[192])
            {
              v667 = (unint64_t *)(*(_QWORD *)&object[192] + 8);
              do
                v668 = __ldaxr(v667);
              while (__stlxr(v668 - 1, v667));
              if (!v668)
              {
                ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
                std::__shared_weak_count::__release_weak(v666);
              }
            }
            v669 = *(double *)&v1570;
            if (*(double *)&v1570 == 0.0)
              goto LABEL_468;
            v670 = (unint64_t *)(v1570 + 8);
            do
              v671 = __ldaxr(v670);
            while (__stlxr(v671 - 1, v670));
          }
          else
          {
            v649 = *(_QWORD *)(v535 + 48);
            v650 = *(_QWORD *)(v649 + 16);
            v651 = *(_QWORD *)(v649 + 40);
            v652 = *(_OWORD *)(v649 + 24);
            v653 = *(_QWORD *)(v649 + 64);
            v654 = *(_OWORD *)(v649 + 48);
            *(_OWORD *)object = *(_OWORD *)v649;
            *(_OWORD *)&object[24] = v652;
            *(_QWORD *)&object[16] = v650;
            *(_QWORD *)&object[40] = v651;
            *(_OWORD *)&object[48] = v654;
            *(_QWORD *)&object[64] = v653;
            sub_20F1B6B0C((float64x2_t *)object);
            *(_OWORD *)&v1574[16] = *(_OWORD *)&object[32];
            *(_OWORD *)&v1574[32] = *(_OWORD *)&object[48];
            *(_OWORD *)v1574 = *(_OWORD *)&object[16];
            *(_OWORD *)v1573 = *(_OWORD *)object;
            v1575 = *(_OWORD *)(v649 + 72);
            *(_QWORD *)&v1576 = *(_QWORD *)(v649 + 88);
            v655 = *(_OWORD *)(v649 + 96);
            v656 = *(_QWORD *)(v649 + 136);
            *(_QWORD *)&v1574[48] = *(_QWORD *)&object[64];
            *(_QWORD *)&v1574[72] = v656;
            v657 = *(_QWORD *)(v649 + 112);
            *(_OWORD *)&v1574[80] = v655;
            *(_OWORD *)&v1574[56] = *(_OWORD *)(v649 + 120);
            v658 = *(_OWORD *)(v649 + 144);
            v659 = *(_QWORD *)(v649 + 160);
            *(_QWORD *)&v1574[96] = v657;
            *(_QWORD *)&v1574[120] = v659;
            *(_OWORD *)&v1574[104] = v658;
            v660 = operator new(0x738uLL);
            v660[1] = 0;
            v661 = v660 + 1;
            v660[2] = 0;
            *v660 = &off_24CA04BD0;
            memset(&object[16], 0, 120);
            memset(&object[144], 0, 120);
            v1699 = 0u;
            *(_OWORD *)v1700 = 0u;
            *(_OWORD *)v1701 = 0u;
            v1702 = 0u;
            v1703 = 0u;
            v1704 = 0u;
            v1705 = 0u;
            *(_QWORD *)&v1706 = 0;
            *(_QWORD *)&v1714 = 0;
            v1713 = 0u;
            v1712 = 0u;
            v1711 = 0u;
            v1710 = 0u;
            v1709 = 0u;
            v1708 = 0u;
            v1707 = 0u;
            v1715 = 0u;
            v1716 = 0u;
            v1717 = 0u;
            v1718 = 0u;
            v1719 = 0u;
            v1720 = 0u;
            v1721 = 0u;
            v1722 = 0;
            v1724 = 0u;
            v1725 = 0u;
            v1726 = 0u;
            v1727 = 0u;
            v1728 = 0u;
            v1729 = 0u;
            v1730 = 0u;
            v1731 = 0;
            v1740 = 0;
            v1739 = 0u;
            v1738 = 0u;
            v1737 = 0u;
            v1736 = 0u;
            v1735 = 0u;
            v1734 = 0u;
            v1733 = 0u;
            v1749 = 0;
            v1748 = 0u;
            v1747 = 0u;
            v1746 = 0u;
            v1745 = 0u;
            v1744 = 0u;
            v1743 = 0u;
            v1742 = 0u;
            v1758 = 0;
            v1757 = 0u;
            v1756 = 0u;
            v1755 = 0u;
            v1754 = 0u;
            v1753 = 0u;
            v1752 = 0u;
            v1751 = 0u;
            v1767 = 0;
            v1766 = 0u;
            v1765 = 0u;
            v1764 = 0u;
            v1763 = 0u;
            v1762 = 0u;
            v1761 = 0u;
            v1760 = 0u;
            v1776 = 0;
            v1775 = 0u;
            v1774 = 0u;
            v1773 = 0u;
            v1772 = 0u;
            v1771 = 0u;
            v1770 = 0u;
            v1769 = 0u;
            v1785 = 0;
            v1784 = 0u;
            v1783 = 0u;
            v1782 = 0u;
            v1781 = 0u;
            v1780 = 0u;
            v1779 = 0u;
            v1778 = 0u;
            v1794 = 0;
            v1793 = 0u;
            v1792 = 0u;
            v1791 = 0u;
            v1790 = 0u;
            v1789 = 0u;
            v1788 = 0u;
            v1787 = 0u;
            v1803 = 0;
            v1802 = 0u;
            v1801 = 0u;
            v1800 = 0u;
            v1799 = 0u;
            v1798 = 0u;
            v1797 = 0u;
            v1796 = 0u;
            *((_BYTE *)v660 + 32) = 1;
            v660[3] = &off_24CA00428;
            *(_DWORD *)object = 2;
            *(float64_t *)&object[8] = v1523.f64[0];
            *(double *)&object[136] = v1515;
            *(double *)&v1698 = v536;
            *((double *)&v1706 + 1) = v537;
            *((double *)&v1714 + 1) = v538;
            v1723 = v539;
            v1732 = v540;
            v1741 = v541;
            v1750 = v542;
            v1759 = v543;
            v1768 = v1478;
            v1777 = v1481;
            v1786 = v1490;
            v1795 = v1496;
            v1804 = v1503;
            v662 = sub_20E8BE940();
            *(_DWORD *)object = v662 != 0;
            *((_BYTE *)v660 + 32) = v662 == 0;
            if (v662)
            {
              memset_pattern16(v660 + 5, &unk_210315390, 0x708uLL);
            }
            else
            {
              *(_QWORD *)&v1679[0].f64[0] = &object[8];
              sub_20F4D52BC((uint64_t)(v660 + 5), (double **)v1679);
            }
            *((_BYTE *)v660 + 1840) = 0;
            v1671[0] = v660 + 3;
            v1671[1] = v660;
            v1082 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1531 + 8) + 48) + 40);
            *(_OWORD *)&object[144] = *(_OWORD *)&v1574[112];
            *(_OWORD *)&object[160] = v1575;
            *(_OWORD *)&object[80] = *(_OWORD *)&v1574[48];
            *(_OWORD *)&object[96] = *(_OWORD *)&v1574[64];
            *(_OWORD *)&object[128] = *(_OWORD *)&v1574[96];
            *(_OWORD *)&object[112] = *(_OWORD *)&v1574[80];
            *(_OWORD *)&object[16] = *(_OWORD *)v1573;
            *(_OWORD *)&object[32] = *(_OWORD *)v1574;
            *(_OWORD *)&object[64] = *(_OWORD *)&v1574[32];
            *(_OWORD *)&object[48] = *(_OWORD *)&v1574[16];
            *(_QWORD *)object = 0;
            *(_QWORD *)&object[176] = v1576;
            *(_QWORD *)&object[184] = v660 + 3;
            *(_QWORD *)&object[192] = v660;
            do
              v1083 = __ldxr(v661);
            while (__stxr(v1083 + 1, v661));
            *(_QWORD *)&v1655 = v1082 | (v1082 << 32);
            v1663 = 0uLL;
            v1679[0] = 0uLL;
            if ((sub_20FBEF3AC((int64x2_t *)(v1531 + 5184), (unint64_t *)object, &v1655, 0, 0, v663) & 1) != 0)
            {
              *(_BYTE *)(v1531 + 7868) = 0;
              *(_DWORD *)(v1531 + 7864) = 0;
            }
            v1084 = *(std::__shared_weak_count **)&object[192];
            if (*(_QWORD *)&object[192])
            {
              v1085 = (unint64_t *)(*(_QWORD *)&object[192] + 8);
              do
                v1086 = __ldaxr(v1085);
              while (__stlxr(v1086 - 1, v1085));
              if (!v1086)
              {
                ((void (*)(std::__shared_weak_count *))v1084->__on_zero_shared)(v1084);
                std::__shared_weak_count::__release_weak(v1084);
              }
            }
            v669 = *(double *)&v1671[1];
            if (!v1671[1])
              goto LABEL_468;
            v1087 = (unint64_t *)((char *)v1671[1] + 8);
            do
              v671 = __ldaxr(v1087);
            while (__stlxr(v671 - 1, v1087));
          }
          goto LABEL_1306;
        }
        v585 = *(_QWORD *)(v535 + 48);
        v440.f64[0] = *(float64_t *)(v585 + 16);
        v1504 = v440;
        v440.f64[0] = *(float64_t *)(v585 + 40);
        v1497 = (int64x2_t)v440;
        _D8 = *(double *)(v585 + 64);
        v1491 = *(int64x2_t *)(v585 + 48);
        v1479 = *(double *)(v585 + 88);
        v1482 = *(int64x2_t *)v585;
        v1471 = *(int64x2_t *)(v585 + 24);
        v1475 = *(float64x2_t *)(v585 + 72);
        v587 = (char *)operator new(0x58uLL);
        v589 = v587;
        *((_QWORD *)v587 + 1) = 0;
        v590 = (unint64_t *)(v587 + 8);
        *((_QWORD *)v587 + 2) = 0;
        *((_QWORD *)v587 + 3) = &off_24CA01718;
        v591 = v587 + 24;
        *(_QWORD *)v587 = &off_24CA016C8;
        v587[32] = 1;
        if (v1523.f64[0] >= 1.0e-15
          && (*((double *)v587 + 5) = sqrt(v1523.f64[0]), v1515 >= 1.0e-15)
          && (*((double *)v587 + 6) = sqrt(v1515), v536 >= 1.0e-15)
          && (*((double *)v587 + 7) = sqrt(v536), v537 >= 1.0e-15)
          && (*((double *)v587 + 8) = sqrt(v537), v538 >= 1.0e-15)
          && (*((double *)v587 + 9) = sqrt(v538), v539 >= 1.0e-15))
        {
          *((double *)v587 + 10) = sqrt(v539);
          v587[32] = 1;
          *(_QWORD *)&v1679[0].f64[0] = v587 + 24;
          *(_QWORD *)&v1679[0].f64[1] = v587;
          v593 = (int64x2_t *)v1531;
          v594 = *(_QWORD *)(v1531 + 8);
          if (!*(_QWORD *)(v594 + 64))
          {
LABEL_574:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 968, (uint64_t)"!this->viobadata_ref_.state_set->empty()", 40, (uint64_t)"First VIOState must exist to add the prior.", 43, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v593 = (int64x2_t *)v1531;
            v594 = *(_QWORD *)(v1531 + 8);
          }
        }
        else
        {
          v587[32] = 0;
          v592 = vdupq_n_s64(0x7FF8000000000000uLL);
          *(int64x2_t *)(v587 + 40) = v592;
          *(int64x2_t *)(v587 + 56) = v592;
          *(int64x2_t *)(v587 + 72) = v592;
          *(_QWORD *)&v1679[0].f64[0] = v587 + 24;
          *(_QWORD *)&v1679[0].f64[1] = v587;
          v593 = (int64x2_t *)v1531;
          v594 = *(_QWORD *)(v1531 + 8);
          if (!*(_QWORD *)(v594 + 64))
            goto LABEL_574;
        }
        v595 = (float64x2_t)vzip1q_s64(v1482, v1471);
        v596 = (float64x2_t)vzip2q_s64(v1482, v1471);
        _D17 = v1497.i64[0];
        _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v595, v1475.f64[0]), v596, v1475, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1504, v1497), v1479);
        _Q18 = (float64x2_t)v1491;
        _D5 = v1475.f64[1];
        v601 = vnegq_f64(_Q2);
        v602 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v596.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v596, 1), 8uLL);
        __asm { FMLA            D3, D5, V18.D[1] }
        v604 = (float64x2_t)vzip1q_s64(v1482, v602);
        _Q16 = vmulq_f64(v1504, v601);
        _D3 = _D3 + _D8 * v1479;
        v607 = (float64x2_t)vzip2q_s64((int64x2_t)v595, v602);
        *(_QWORD *)&_Q18.f64[1] = vdupq_laneq_s64(v1491, 1).u64[0];
        __asm
        {
          FMLS            D16, D17, V2.D[1]
          FMLS            D16, D8, V3.D[0]
        }
        v608 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v604, v601.f64[0]), v607, _Q2, 1), _Q18, _D3, 0));
        v609 = vextq_s8((int8x16_t)v604, (int8x16_t)v604, 8uLL).u64[0];
        v610 = vextq_s8((int8x16_t)v607, (int8x16_t)v607, 8uLL).u64[0];
        *(_QWORD *)&v611 = v1491.i64[0];
        v612 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
        v613 = vextq_s8(v608, v608, 8uLL).u64[0];
        v614 = *(_OWORD *)&vnegq_f64(_Q16);
        v615 = *(_QWORD *)(v594 + 48);
        v616 = v593[392].i64[1];
        if (v616 == v593[392].i64[0])
          v617 = 0;
        else
          v617 = (*(_DWORD *)(v616 - 272) + 1);
        v672 = *(_DWORD *)(v615 + 40);
        *(_QWORD *)object = v617;
        *(_QWORD *)&v604.f64[1] = v609;
        *(float64x2_t *)&object[16] = v604;
        *(_QWORD *)&v607.f64[1] = v610;
        *(float64_t *)&object[32] = v1504.f64[0];
        *(_QWORD *)&object[56] = v1497.i64[0];
        *(float64x2_t *)&object[40] = v607;
        *((_QWORD *)&v611 + 1) = v612;
        *(_OWORD *)&object[64] = v611;
        *(double *)&object[80] = _D8;
        *(_QWORD *)&object[104] = v614;
        v608.i64[1] = v613;
        *(int8x16_t *)&object[88] = v608;
        *(_QWORD *)&object[112] = v591;
        *(_QWORD *)&object[120] = v589;
        do
          v673 = __ldxr(v590);
        while (__stxr(v673 + 1, v590));
        LODWORD(v1663) = v672;
        v1671[1] = 0;
        v1671[0] = 0;
        v1573[1] = 0;
        v1573[0] = 0;
        if ((sub_20FBF05E0(v593 + 324, (__int128 *)object, &v1663, 0, 0, v588) & 1) != 0)
        {
          *(_BYTE *)(v1531 + 7868) = 0;
          *(_DWORD *)(v1531 + 7864) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 988, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v674 = *(std::__shared_weak_count **)&object[120];
        if (*(_QWORD *)&object[120])
        {
          v675 = (unint64_t *)(*(_QWORD *)&object[120] + 8);
          do
            v676 = __ldaxr(v675);
          while (__stlxr(v676 - 1, v675));
          if (!v676)
          {
            ((void (*)(std::__shared_weak_count *))v674->__on_zero_shared)(v674);
            std::__shared_weak_count::__release_weak(v674);
          }
        }
        v669 = v1679[0].f64[1];
        if (!*(_QWORD *)&v1679[0].f64[1])
          goto LABEL_468;
        v677 = (unint64_t *)(*(_QWORD *)&v1679[0].f64[1] + 8);
        do
          v671 = __ldaxr(v677);
        while (__stlxr(v671 - 1, v677));
LABEL_1306:
        if (!v671)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v669 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v669));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v669);
        }
        goto LABEL_468;
      }
    }
  }
  v1480 = *(unsigned __int8 *)(v1530 + 11664);
  v1476 = *(unsigned __int8 *)(v1530 + 11672);
  v276 = *(_QWORD *)v1531;
  if (*(_QWORD *)v1531)
  {
    if (*(_BYTE *)(v1531 + 1317))
    {
      v277 = *(double *)v276;
      v278 = *(_QWORD *)(v276 + 8);
      v279 = *(double *)(v276 + 16);
      v280 = *(_QWORD *)(v276 + 24);
      v1679[0] = *(float64x2_t *)(v276 + 32);
      v1679[1].f64[0] = *(float64_t *)(v276 + 48);
      v281 = *(_QWORD *)(v276 + 56);
      *(_OWORD *)v1671 = *(_OWORD *)(v276 + 64);
      v1672[0] = *(void **)(v276 + 80);
      v282 = *(_OWORD *)(v276 + 88);
      *(_QWORD *)&v1664 = *(_QWORD *)(v276 + 104);
      v1663 = v282;
      v283 = *(_OWORD *)(v276 + 112);
      *(_QWORD *)&v1656 = *(_QWORD *)(v276 + 128);
      v1655 = v283;
      v284 = *(_OWORD *)(v276 + 136);
      *(_QWORD *)&v1648 = *(_QWORD *)(v276 + 152);
      v1647 = v284;
      v285 = *(_OWORD *)(v276 + 160);
      v286 = *(_OWORD *)(v276 + 176);
      v287 = *(_OWORD *)(v276 + 192);
      v288 = *(_OWORD *)(v276 + 208);
      *(_QWORD *)&object[64] = *(_QWORD *)(v276 + 224);
      *(_OWORD *)&object[48] = v288;
      *(_OWORD *)&object[32] = v287;
      *(_OWORD *)object = v285;
      *(_OWORD *)&object[16] = v286;
      v33 = *(_OWORD *)(v276 + 232);
      v34 = *(_OWORD *)(v276 + 248);
      v35 = *(int64x2_t *)(v276 + 264);
      v36 = *(int64x2_t *)(v276 + 280);
      *(_QWORD *)&v1574[48] = *(_QWORD *)(v276 + 296);
      *(int64x2_t *)&v1574[32] = v36;
      *(int64x2_t *)&v1574[16] = v35;
      v35.i64[0] = *(_QWORD *)(v1531 + 1320);
      *(double *)(v1531 + 176) = v277 * *(double *)v35.i64;
      *(_OWORD *)v1573 = v33;
      *(_OWORD *)v1574 = v34;
      v289 = v279 * *(double *)(v1531 + 1328);
      *(_QWORD *)(v1531 + 184) = v278;
      *(double *)(v1531 + 192) = v289;
      *(_QWORD *)(v1531 + 200) = v280;
      *(float64x2_t *)(v1531 + 208) = v1679[0];
      *(float64_t *)(v1531 + 224) = v1679[1].f64[0];
      *(_QWORD *)(v1531 + 232) = v281;
      v290 = *(_OWORD *)v1671;
      *(void **)(v1531 + 256) = v1672[0];
      *(_OWORD *)(v1531 + 240) = v290;
      v291 = v1663;
      *(_QWORD *)(v1531 + 280) = v1664;
      *(_OWORD *)(v1531 + 264) = v291;
      v292 = v1655;
      *(_QWORD *)(v1531 + 304) = v1656;
      *(_OWORD *)(v1531 + 288) = v292;
      v293 = v1647;
      *(_QWORD *)(v1531 + 328) = v1648;
      *(_OWORD *)(v1531 + 312) = v293;
      v294 = *(_OWORD *)object;
      v295 = *(_OWORD *)&object[16];
      v296 = *(_OWORD *)&object[32];
      v32 = *(_OWORD *)&object[48];
      *(_QWORD *)(v1531 + 400) = *(_QWORD *)&object[64];
      *(_OWORD *)(v1531 + 368) = v296;
      *(_OWORD *)(v1531 + 384) = v32;
      *(_OWORD *)(v1531 + 336) = v294;
      *(_OWORD *)(v1531 + 352) = v295;
      v275 = *(int8x16_t *)v1574;
      *(_OWORD *)(v1531 + 408) = *(_OWORD *)v1573;
      v246 = *(_OWORD *)&v1574[16];
      v31 = *(_OWORD *)&v1574[32];
      *(_QWORD *)(v1531 + 472) = *(_QWORD *)&v1574[48];
      *(_OWORD *)(v1531 + 440) = v246;
      *(_OWORD *)(v1531 + 456) = v31;
      *(int8x16_t *)(v1531 + 424) = v275;
    }
    else
    {
      v329 = *(_OWORD *)(v276 + 16);
      *(_OWORD *)(v1531 + 176) = *(_OWORD *)v276;
      *(_OWORD *)(v1531 + 192) = v329;
      v330 = *(_OWORD *)(v276 + 32);
      *(_QWORD *)(v1531 + 224) = *(_QWORD *)(v276 + 48);
      *(_OWORD *)(v1531 + 208) = v330;
      *(_QWORD *)(v1531 + 232) = *(_QWORD *)(v276 + 56);
      v331 = *(_OWORD *)(v276 + 64);
      *(_QWORD *)(v1531 + 256) = *(_QWORD *)(v276 + 80);
      *(_OWORD *)(v1531 + 240) = v331;
      v332 = *(_OWORD *)(v276 + 88);
      *(_QWORD *)(v1531 + 280) = *(_QWORD *)(v276 + 104);
      *(_OWORD *)(v1531 + 264) = v332;
      v333 = *(_OWORD *)(v276 + 112);
      *(_QWORD *)(v1531 + 304) = *(_QWORD *)(v276 + 128);
      *(_OWORD *)(v1531 + 288) = v333;
      v334 = *(_OWORD *)(v276 + 136);
      *(_QWORD *)(v1531 + 328) = *(_QWORD *)(v276 + 152);
      *(_OWORD *)(v1531 + 312) = v334;
      v336 = *(_OWORD *)(v276 + 192);
      v335 = *(_OWORD *)(v276 + 208);
      v337 = *(_OWORD *)(v276 + 176);
      *(_QWORD *)(v1531 + 400) = *(_QWORD *)(v276 + 224);
      *(_OWORD *)(v1531 + 368) = v336;
      *(_OWORD *)(v1531 + 384) = v335;
      *(_OWORD *)(v1531 + 352) = v337;
      *(_OWORD *)(v1531 + 336) = *(_OWORD *)(v276 + 160);
      v338 = *(_OWORD *)(v276 + 264);
      v275 = *(int8x16_t *)(v276 + 280);
      v339 = *(_QWORD *)(v276 + 296);
      v31 = *(_OWORD *)(v276 + 248);
      *(_OWORD *)(v1531 + 424) = v31;
      *(_QWORD *)(v1531 + 472) = v339;
      *(_OWORD *)(v1531 + 440) = v338;
      *(int8x16_t *)(v1531 + 456) = v275;
      v246 = *(_OWORD *)(v276 + 232);
      *(_OWORD *)(v1531 + 408) = v246;
    }
  }
  *(_QWORD *)(v1531 + 6768) = v1531 + 3152;
  *(_QWORD *)(v1531 + 6776) = *(_QWORD *)(v1531 + 8);
  if (*(_BYTE *)(v1531 + 2146))
    v340 = *(_QWORD *)(v1531 + 120);
  else
    v340 = 0;
  if (*(_BYTE *)(v1531 + 2146))
    v341 = v1531 + 176;
  else
    v341 = 0;
  *(_QWORD *)(v1531 + 6752) = v340;
  *(_QWORD *)(v1531 + 6760) = v341;
  sub_20FC17FB8((uint64_t *)v1531, *(double *)&v246, *(double *)v275.i64, *(double *)&v31, *(double *)&v32, *(double *)&v33, *(double *)&v34, v35, v36);
  v347 = *(_QWORD *)(v1531 + 8);
  v348 = *(_QWORD **)(v347 + 48);
  v349 = (_QWORD *)(v347 + 56);
  if (v348 != (_QWORD *)(v347 + 56))
  {
    v350 = *(_DWORD *)(v347 + 64);
    v29 = (unint64_t)"did_add_state";
    do
    {
      v351 = *((_DWORD *)v348 + 10);
      v352 = *(char **)(v1531 + 5192);
      v353 = *(char **)(v1531 + 5200);
      if (v353 != v352)
      {
        v354 = (v353 - v352) >> 4;
        do
        {
          v355 = v354 >> 1;
          v356 = &v352[16 * (v354 >> 1)];
          v358 = *(_DWORD *)v356;
          v357 = v356 + 16;
          v354 += ~(v354 >> 1);
          if (v358 < v351)
            v352 = v357;
          else
            v354 = v355;
        }
        while (v354);
      }
      if (v352 == v353 || *(_DWORD *)v352 != v351)
      {
        object[0] = 0;
        object[32] = 0;
        if (*((_QWORD *)&v1563 + 1))
        {
          v359 = 48 * *((_QWORD *)&v1563 + 1);
          v360 = *((_QWORD *)&v1562 + 1);
          while (*(_DWORD *)v360 != v351)
          {
            v360 += 48;
            v359 -= 48;
            if (!v359)
              goto LABEL_293;
          }
        }
        else
        {
          v360 = *((_QWORD *)&v1562 + 1);
        }
        if (v360 != *((_QWORD *)&v1562 + 1) + 48 * *((_QWORD *)&v1563 + 1))
        {
          v1510 = *(float64x2_t *)(v360 + 32);
          v1518 = *(float64x2_t *)(v360 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v1518), (int32x4_t)vcgtzq_f64(v1510))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1879;
          }
          v343 = vmulq_f64(v1518, *(float64x2_t *)(v1531 + 176));
          v344 = v1510.f64[0];
          v342 = (int64x2_t)vmulq_f64(v1510, *(float64x2_t *)(v1531 + 192));
          *(int64x2_t *)&object[16] = v342;
          *(float64x2_t *)object = v343;
          object[32] = 1;
        }
LABEL_293:
        if ((sub_20FC19048(v1531, v348[4], v348[5], v1529 < v350, v342, v343.f64[0], v344, v345, v346) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1109, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1879;
        }
      }
      v361 = (_QWORD *)v348[1];
      if (v361)
      {
        do
        {
          v362 = v361;
          v361 = (_QWORD *)*v361;
        }
        while (v361);
      }
      else
      {
        do
        {
          v362 = (_QWORD *)v348[2];
          _ZF = *v362 == (_QWORD)v348;
          v348 = v362;
        }
        while (!_ZF);
      }
      v348 = v362;
    }
    while (v362 != v349);
  }
  if (*(_BYTE *)(v1531 + 2144))
  {
    v363 = v1531;
    v1519 = *(unsigned int *)(v1531 + 1928);
    if ((_DWORD)v1519)
    {
      if (v1519 > *(_DWORD *)(v1531 + 1920)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1930, (uint64_t)"max_slam_point_tracks <= parameters_.ba_config.max_num_optimized_tracks", 71, (uint64_t)"Persistent SLAM landmarks should not be larger the maximum optimized tracks", 75, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1879;
      }
      v364 = sub_20FA56B40(v1531 + 5184, 0);
      v363 = v1531;
      *(_DWORD *)(v1531 + 2184) = v364;
      v365 = *(uint64_t **)(v1531 + 24);
      v366 = *(uint64_t **)(v1531 + 32);
      if (v365 != v366)
      {
        v367 = *(_QWORD *)(v1531 + 6664);
        if (v367 == *(_QWORD *)(v1531 + 6656))
          v368 = 0;
        else
          v368 = *(_DWORD *)(v367 - 176) + 1;
        LODWORD(v1679[0].f64[0]) = v368;
        do
        {
          if (*(_DWORD *)(*v365 + 520) == 2)
          {
            v618 = *(_DWORD *)(*v365 + 32);
            v619 = *(char **)(v1531 + 5576);
            v620 = *(char **)(v1531 + 5584);
            if (v620 != v619)
            {
              v621 = (v620 - v619) >> 4;
              do
              {
                v622 = v621 >> 1;
                v623 = &v619[16 * (v621 >> 1)];
                v625 = *(_DWORD *)v623;
                v624 = v623 + 16;
                v621 += ~(v621 >> 1);
                if (v625 < v618)
                  v619 = v624;
                else
                  v621 = v622;
              }
              while (v621);
            }
            if ((v619 == v620 || *(_DWORD *)v619 != v618)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1742, (uint64_t)"linear_system_.template findVariable<SLAMLandmarkVariableType>(landmarkID) != linear_system_.template endVariable<SLAMLandmarkVariableType>()", 141, (uint64_t)"The persistent track is not associated to a SLAM landmark variable", 66, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1879;
            }
            v626 = *(_QWORD **)(v1531 + 8);
            v627 = v626 + 7;
            v628 = v626[7];
            if (v628)
            {
              do
              {
                v629 = v628;
                v628 = *(_QWORD *)(v628 + 8);
              }
              while (v628);
            }
            else
            {
              do
              {
                v629 = v627[2];
                _ZF = *(_QWORD *)v629 == (_QWORD)v627;
                v627 = (_QWORD *)v629;
              }
              while (_ZF);
            }
            v29 = *(unsigned int *)(v629 + 40) | v29 & 0xFFFFFFFF00000000;
            v630 = v626[39];
            if (v630)
            {
              v631 = 0;
              v632 = *(_QWORD *)(v629 + 32);
              do
              {
                v633 = (_QWORD *)v626[37];
                if (v631 < 0)
                {
                  v637 = v631;
                  do
                  {
                    v638 = (_QWORD *)*v633;
                    if (*v633)
                    {
                      do
                      {
                        v636 = v638;
                        v638 = (_QWORD *)v638[1];
                      }
                      while (v638);
                    }
                    else
                    {
                      do
                      {
                        v636 = (_QWORD *)v633[2];
                        _ZF = *v636 == (_QWORD)v633;
                        v633 = v636;
                      }
                      while (_ZF);
                    }
                    v633 = v636;
                    _CF = __CFADD__(v637++, 1);
                  }
                  while (!_CF);
                }
                else if (v631)
                {
                  v634 = v631;
                  do
                  {
                    v635 = (_QWORD *)v633[1];
                    if (v635)
                    {
                      do
                      {
                        v636 = v635;
                        v635 = (_QWORD *)*v635;
                      }
                      while (v635);
                    }
                    else
                    {
                      do
                      {
                        v636 = (_QWORD *)v633[2];
                        _ZF = *v636 == (_QWORD)v633;
                        v633 = v636;
                      }
                      while (!_ZF);
                    }
                    v633 = v636;
                    v427 = v634-- <= 1;
                  }
                  while (!v427);
                }
                else
                {
                  v636 = (_QWORD *)v626[37];
                }
                v639 = *((_DWORD *)v636 + 8);
                *(_QWORD *)object = v632;
                *(_QWORD *)&object[8] = v29;
                *(_DWORD *)&object[16] = v639;
                sub_20FC24D84(v1531, (uint64_t)object, *v365, (unsigned int *)v1679);
                ++v631;
              }
              while (v631 != v630);
            }
          }
          ++v365;
        }
        while (v365 != v366);
        if (!(v1476 | v1480))
        {
          v640 = *(unsigned int *)(v1531 + 2184);
          v641 = (uint64_t)(*(_QWORD *)(v1531 + 32) - *(_QWORD *)(v1531 + 24)) >> 3;
          if ((_DWORD)v1519 != (_DWORD)v640 && v641 != v640)
          {
            v643 = *(_QWORD *)(v1531 + 2024);
            v644 = *(_DWORD *)(v1531 + 2100);
            v645 = *(_BYTE *)(v1531 + 2116);
            v646 = *(_OWORD *)(v1531 + 2008);
            *(_OWORD *)object = *(_OWORD *)(v1531 + 1992);
            *(_OWORD *)&object[16] = v646;
            *(_QWORD *)&object[32] = v643;
            *(_DWORD *)&object[40] = 15;
            *(_DWORD *)&object[44] = v644;
            object[48] = v645;
            *(_QWORD *)&object[56] = 0;
            sub_20FC23474((uint64_t)v1573, (uint64_t)object, (_QWORD *)v1531, v641 - 1);
            if (v1519 - v640 >= (unint64_t)(v641 - v640))
              v647 = v641 - v640;
            else
              v647 = v1519 - v640;
            for (j = (char *)v1573[1]; j != v1573[0]; j -= 16)
            {
              if ((sub_20FC241C4(v1531, *((_DWORD *)j - 2), (unsigned int *)v1679) & 1) != 0)
              {
                ++*(_DWORD *)(v1531 + 2184);
                if (!--v647)
                  goto LABEL_670;
              }
            }
            for (k = *(_QWORD *)&v1574[16]; k != *(_QWORD *)&v1574[8]; k -= 16)
            {
              if (sub_20FC241C4(v1531, *(_DWORD *)(k - 8), (unsigned int *)v1679))
              {
                ++*(_DWORD *)(v1531 + 2184);
                if (!--v647)
                  break;
              }
            }
LABEL_670:
            if (*(_QWORD *)&v1574[8])
            {
              *(_QWORD *)&v1574[16] = *(_QWORD *)&v1574[8];
              operator delete(*(void **)&v1574[8]);
            }
            if (v1573[0])
            {
              v1573[1] = v1573[0];
              operator delete(v1573[0]);
            }
          }
        }
        v363 = v1531;
      }
    }
    sub_20FC1A874(v363);
  }
  sub_20FC1B210((_QWORD *)v1531, *(unsigned int *)(v1531 + 2152), *(unsigned int *)(v1531 + 1920));
  sub_20FC147DC(v1530, (int64x2_t *)v1531);
  v679 = *(_QWORD *)(v1530 + 8216);
  v680 = *(unsigned __int8 *)(v679 + 1720);
  v681 = v679 + 864;
  v682 = v679 + 24;
  if (v680)
    v682 = v681;
  sub_20FC14978(v1531, *(unsigned __int8 *)(v1530 + 7688), *(unsigned __int8 *)(v682 + 360), v1494, v1487, *(float64x2_t *)v1500);
  v683 = *(_QWORD *)(v1530 + 8216);
  v684 = *(unsigned __int8 *)(v683 + 1720);
  v685 = v683 + 864;
  if (!*(_BYTE *)(v683 + 1720))
    v685 = v683 + 24;
  if (*(_BYTE *)(v685 + 417) && *(_BYTE *)(v1530 + 7682) && !*(_BYTE *)(v1530 + 7683))
  {
    sub_20FC36F8C(v1531, 0, *(double *)(v685 + 112));
    v683 = *(_QWORD *)(v1530 + 8216);
    v684 = *(unsigned __int8 *)(v683 + 1720);
    v686 = v683 + 864;
    if (!*(_BYTE *)(v683 + 1720))
      v686 = v683 + 24;
    if (*(_BYTE *)(v686 + 419))
      goto LABEL_686;
  }
  else
  {
    v686 = v683 + 864;
    if (!*(_BYTE *)(v683 + 1720))
      v686 = v683 + 24;
    if (*(_BYTE *)(v686 + 419))
    {
LABEL_686:
      if (*(_BYTE *)(v1530 + 7684) && !*(_BYTE *)(v1530 + 7685))
      {
        sub_20FC36F8C(v1531, 1u, *(double *)(v686 + 120));
        v683 = *(_QWORD *)(v1530 + 8216);
        v684 = *(unsigned __int8 *)(v683 + 1720);
      }
    }
  }
  v687 = v683 + 864;
  v688 = v683 + 24;
  if (v684)
    v688 = v687;
  if (*(_BYTE *)(v688 + 433) || *(_BYTE *)(v688 + 432) && *(_BYTE *)(v1530 + 7686) && !*(_BYTE *)(v1530 + 7687))
  {
    *(double *)object = 1.0 / *(double *)(v688 + 256);
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    *(_QWORD *)&object[16] = *(_QWORD *)object;
    *(_QWORD *)&object[24] = *(_QWORD *)object;
    object[32] = 1;
    sub_20FC36C98(v1531, (uint64_t)object);
  }
  else
  {
    object[0] = 0;
    object[32] = 0;
    sub_20FC36C98(v1531, (uint64_t)object);
  }
  v689 = *(_QWORD *)(v1530 + 8216);
  v690 = *(unsigned __int8 *)(v689 + 1720);
  v691 = v689 + 864;
  v692 = v689 + 24;
  if (v690)
    v692 = v691;
  if (*(_BYTE *)(v692 + 434))
  {
    v693 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    v694 = vmulq_f64(*(float64x2_t *)(v692 + 264), v693);
    v693.f64[0] = *(double *)(v692 + 280) * 0.0174532925;
    __asm { FMOV            V2.2D, #1.0 }
    *(float64x2_t *)object = vdivq_f64(_Q2, v694);
    *(_QWORD *)&object[16] = *(_OWORD *)&vdivq_f64(_Q2, v693);
    object[24] = 1;
  }
  else
  {
    object[0] = 0;
    object[24] = 0;
  }
  sub_20FC36DFC(v1531, (uint64_t)object);
  v696 = *(_BYTE *)(v1530 + 7688);
  *(_BYTE *)(v1530 + 7683) = *(_BYTE *)(v1530 + 7682);
  *(_BYTE *)(v1530 + 7685) = *(_BYTE *)(v1530 + 7684);
  *(_BYTE *)(v1530 + 7687) = *(_BYTE *)(v1530 + 7686);
  *(_BYTE *)(v1530 + 7689) = v696;
  v697 = *(_QWORD **)(v1531 + 45496);
  v698 = (_QWORD *)(v1531 + 45504);
  if (v697 != (_QWORD *)(v1531 + 45504))
  {
    v699 = *(_QWORD *)(v1531 + 8);
    v702 = *(uint64_t **)(v699 + 56);
    v700 = (uint64_t *)(v699 + 56);
    v701 = v702;
    if (v702)
    {
      v703 = *(char **)(v1531 + 5192);
      v704 = *(char **)(v1531 + 5200);
      v705 = *(char **)(v1531 + 5288);
      v706 = *(char **)(v1531 + 5296);
      do
      {
        v707 = *((_DWORD *)v697 + 8);
        v708 = v700;
        v709 = v701;
        do
        {
          while (v709[4])
          {
            v708 = v709;
            v709 = (uint64_t *)*v709;
            if (!v709)
              goto LABEL_716;
          }
          if (*((_DWORD *)v709 + 10) < v707)
            ++v709;
          else
            v708 = v709;
          v709 = (uint64_t *)*v709;
        }
        while (v709);
LABEL_716:
        if (v708 != v700 && !v708[4] && *((_DWORD *)v708 + 10) <= v707)
        {
          v710 = (double *)v708[6];
          if (v710)
          {
            v711 = *((double *)v697 + 5) == *v710;
            if (*((double *)v697 + 6) != v710[1])
              v711 = 0;
            if (*((double *)v697 + 7) != v710[2])
              v711 = 0;
            if (*((double *)v697 + 8) != v710[3])
              v711 = 0;
            if (*((double *)v697 + 9) != v710[4])
              v711 = 0;
            if (*((double *)v697 + 10) != v710[5])
              v711 = 0;
            if (*((double *)v697 + 11) != v710[6])
              v711 = 0;
            if (*((double *)v697 + 12) != v710[7])
              v711 = 0;
            if (*((double *)v697 + 13) != v710[8])
              v711 = 0;
            if (*((double *)v697 + 14) != v710[9])
              v711 = 0;
            if (*((double *)v697 + 15) != v710[10])
              v711 = 0;
            if (*((double *)v697 + 16) != v710[11])
              v711 = 0;
            if (*((double *)v697 + 17) != v710[12])
              v711 = 0;
            if (*((double *)v697 + 18) != v710[13])
              v711 = 0;
            if (*((double *)v697 + 19) != v710[14])
              v711 = 0;
            if (*((double *)v697 + 20) != v710[15])
              v711 = 0;
            if (*((double *)v697 + 21) != v710[16])
              v711 = 0;
            if (*((double *)v697 + 22) != v710[17])
              v711 = 0;
            if (*((double *)v697 + 23) != v710[18])
              v711 = 0;
            if (*((double *)v697 + 24) != v710[19])
              v711 = 0;
            v712 = *((double *)v697 + 25) == v710[20] && v711;
            v713 = v703;
            if (v704 != v703)
            {
              v713 = v703;
              v714 = (v704 - v703) >> 4;
              do
              {
                v715 = v714 >> 1;
                v716 = (unsigned int *)&v713[16 * (v714 >> 1)];
                v718 = *v716;
                v717 = (char *)(v716 + 4);
                v714 += ~(v714 >> 1);
                if (v718 < v707)
                  v713 = v717;
                else
                  v714 = v715;
              }
              while (v714);
            }
            if (v713 == v704 || *(_DWORD *)v713 != v707)
              v713 = v704;
            v719 = v705;
            if (v706 != v705)
            {
              v719 = v705;
              v720 = (v706 - v705) >> 4;
              do
              {
                v721 = v720 >> 1;
                v722 = (unsigned int *)&v719[16 * (v720 >> 1)];
                v724 = *v722;
                v723 = (char *)(v722 + 4);
                v720 += ~(v720 >> 1);
                if (v724 < v707)
                  v719 = v723;
                else
                  v720 = v721;
              }
              while (v720);
            }
            if (v719 == v706 || *(_DWORD *)v719 != v707)
              v719 = v706;
            if (v713 != v704)
              *(_BYTE *)(*((_QWORD *)v713 + 1) + 128) = v712;
            if (v719 != v706)
              *(_BYTE *)(*((_QWORD *)v719 + 1) + 104) = v712;
          }
        }
        v725 = (_QWORD *)v697[1];
        if (v725)
        {
          do
          {
            v726 = v725;
            v725 = (_QWORD *)*v725;
          }
          while (v725);
        }
        else
        {
          do
          {
            v726 = (_QWORD *)v697[2];
            _ZF = *v726 == (_QWORD)v697;
            v697 = v726;
          }
          while (!_ZF);
        }
        v697 = v726;
      }
      while (v726 != v698);
    }
    else
    {
      do
      {
        v727 = (_QWORD *)v697[1];
        if (v727)
        {
          do
          {
            v728 = v727;
            v727 = (_QWORD *)*v727;
          }
          while (v727);
        }
        else
        {
          do
          {
            v728 = (_QWORD *)v697[2];
            _ZF = *v728 == (_QWORD)v697;
            v697 = v728;
          }
          while (!_ZF);
        }
        v697 = v728;
      }
      while (v728 != v698);
    }
  }
  v729 = *(_QWORD *)(v1531 + 5672);
  v730 = *(_QWORD *)(v1531 + 5680);
  if (v730 == v729 || *(_DWORD *)v729)
  {
    v731 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v729 = v730;
    if (v731)
LABEL_1879:
      abort();
  }
  *(_BYTE *)(*(_QWORD *)(v729 + 8) + 40) = *(double *)(*(_QWORD *)(v1531 + 8) + 72) == *(double *)(v1531 + 43808);
  v732 = *(_QWORD **)(v1531 + 45520);
  if (v732 != (_QWORD *)(v1531 + 45528))
  {
    while (1)
    {
      v733 = *((unsigned int *)v732 + 8);
      v734 = *(char **)(v1531 + 6368);
      v735 = *(char **)(v1531 + 6376);
      if (v735 != v734)
      {
        v736 = 0x97A3FE4BD1FF25E9 * ((v735 - v734) >> 4);
        do
        {
          v737 = v736 >> 1;
          v738 = (unint64_t *)&v734[9616 * (v736 >> 1)];
          v739 = *v738;
          v740 = (char *)(v738 + 1202);
          v736 += ~(v736 >> 1);
          if (v739 < v733)
            v734 = v740;
          else
            v736 = v737;
        }
        while (v736);
      }
      if (v735 == v734 || *(_QWORD *)v734 != v733)
        goto LABEL_816;
      v741 = v734 + 5848;
      if (!sub_20FBEE348((_QWORD *)v1531, *((_DWORD *)v732 + 946), *((_DWORD *)v732 + 947)))
        break;
      v742 = v734[7680];
      memcpy(v734 + 3928, v732 + 5, 0x708uLL);
      v743 = *((_OWORD *)v732 + 116);
      v744 = *((_OWORD *)v732 + 117);
      v745 = *((_OWORD *)v732 + 118);
      *((_OWORD *)v734 + 358) = *((_OWORD *)v732 + 115);
      *((_OWORD *)v734 + 361) = v745;
      *((_OWORD *)v734 + 360) = v744;
      *((_OWORD *)v734 + 359) = v743;
      v746 = *((_OWORD *)v732 + 120);
      v747 = *((_OWORD *)v732 + 121);
      v748 = v732[244];
      *((_OWORD *)v734 + 362) = *((_OWORD *)v732 + 119);
      *((_QWORD *)v734 + 730) = v748;
      *((_OWORD *)v734 + 364) = v747;
      *((_OWORD *)v734 + 363) = v746;
      if (v742)
      {
        *v741 = *((_BYTE *)v732 + 1960);
        v734[5864] = *((_BYTE *)v732 + 1976);
        memcpy(v734 + 5872, v732 + 248, 0x710uLL);
        v749 = (_QWORD *)v732[1];
        if (v749)
          goto LABEL_817;
      }
      else
      {
        *v741 = *((_BYTE *)v732 + 1960);
        v734[5864] = *((_BYTE *)v732 + 1976);
        *((_QWORD *)v734 + 732) = &off_24CA00398;
        memcpy(v734 + 5872, v732 + 248, 0x708uLL);
        v751 = v732[473];
        v734[7680] = 1;
        *((_QWORD *)v734 + 959) = v751;
        v749 = (_QWORD *)v732[1];
        if (v749)
        {
          do
          {
LABEL_817:
            v750 = v749;
            v749 = (_QWORD *)*v749;
          }
          while (v749);
          goto LABEL_801;
        }
      }
      do
      {
LABEL_820:
        v750 = (_QWORD *)v732[2];
        _ZF = *v750 == (_QWORD)v732;
        v732 = v750;
      }
      while (!_ZF);
LABEL_801:
      v732 = v750;
      if (v750 == (_QWORD *)(v1531 + 45528))
        goto LABEL_823;
    }
    if (v734[7680])
      v734[7680] = 0;
LABEL_816:
    v749 = (_QWORD *)v732[1];
    if (v749)
      goto LABEL_817;
    goto LABEL_820;
  }
LABEL_823:
  *(_BYTE *)(v1531 + 2149) = v1483;
  v752 = *(_QWORD *)(v1530 + 8216);
  v753 = *(unsigned __int8 *)(v752 + 1720);
  v754 = v752 + 864;
  if (!*(_BYTE *)(v752 + 1720))
    v754 = v752 + 24;
  if (*(_BYTE *)(v754 + 426) && *(_BYTE *)(v754 + 428))
  {
    sub_20F873394(v1530);
    v752 = *(_QWORD *)(v1530 + 8216);
    v753 = *(unsigned __int8 *)(v752 + 1720);
  }
  v755 = v752 + 864;
  v756 = v752 + 24;
  if (v753)
    v756 = v755;
  if (*(_BYTE *)(v756 + 416) && *(_BYTE *)(v756 + 429))
    sub_20F8734C8(v1530);
  if (!*(_BYTE *)(v1468 + 1618))
    goto LABEL_1394;
  if (!*(_BYTE *)(v1531 + 1844))
  {
    sub_20F9B2A4C(&v1663);
    if (**(int **)(v1663 + 56) > 2)
      goto LABEL_1394;
    v766 = *(unsigned __int8 *)(v1663 + 72);
    v767 = sub_20E8C31DC(v1663, "OSLogSurrogateAppender", 1, 0);
    v768 = v767;
    if (!v766 && !v767)
      goto LABEL_1394;
    v1573[0] = &v1663;
    v1573[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v1574 = std::chrono::system_clock::now();
    *(_DWORD *)&v1574[8] = 2;
    *(_QWORD *)&v1574[16] = "unknown file";
    *(_DWORD *)&v1574[24] = 759;
    *(_QWORD *)&v1574[48] = 0;
    *(_QWORD *)&v1574[32] = "unknown function";
    *(_QWORD *)&v1574[40] = 0;
    v769 = *(_QWORD *)v1573[0];
    v770 = *(_QWORD *)v1573[0] + 16;
    if (*(char *)(*(_QWORD *)v1573[0] + 39) < 0)
    {
      v772 = *(const char **)(v769 + 16);
      v771 = *(_QWORD *)(v769 + 24);
    }
    else
    {
      v771 = *(unsigned __int8 *)(*(_QWORD *)v1573[0] + 39);
      v772 = (const char *)(*(_QWORD *)v1573[0] + 16);
    }
    v1032 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1032 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v1033 = byte_254A4A4F8;
    else
      v1033 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1034 = byte_254A4A4F8[23];
    else
      v1034 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v1033, v772);
    v1035 = &object[8];
    if (v1034 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1034 >= 0x17)
    {
      v1036 = v768;
      v1037 = v772;
      v1038 = v769;
      v1039 = v766;
      v1040 = v770;
      v1041 = (v1034 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1034 | 7) != 0x17)
        v1041 = v1034 | 7;
      v1042 = v1041 + 1;
      v1035 = operator new(v1041 + 1);
      *(_QWORD *)&object[24] = v1042 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v1035;
      *(_QWORD *)&object[16] = v1034;
      v770 = v1040;
      v766 = v1039;
      v769 = v1038;
      v772 = v1037;
      v768 = v1036;
    }
    else
    {
      object[31] = v1034;
      if (!v1034)
      {
LABEL_1224:
        v1035[v1034] = 0;
        object[32] = 1;
        v1043 = &object[40];
        if (v771 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v771 >= 0x17)
        {
          v1044 = (v771 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v771 | 7) != 0x17)
            v1044 = v771 | 7;
          v1045 = v1044 + 1;
          v1043 = operator new(v1044 + 1);
          *(_QWORD *)&object[56] = v1045 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v1043;
          *(_QWORD *)&object[48] = v771;
        }
        else
        {
          object[63] = v771;
          if (!v771)
            goto LABEL_1232;
        }
        memmove(v1043, v772, v771);
LABEL_1232:
        v1043[v771] = 0;
        object[64] = 1;
        v1046 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v768 && *(_QWORD *)(v768 + 24))
        {
          v1047 = _os_log_pack_size();
          v1048 = (std::__shared_weak_count_vtbl *)operator new(v1047, (std::align_val_t)8uLL);
          v1049 = (std::__shared_weak_count *)operator new();
          v1050 = v1049;
          v1049->__shared_owners_ = 0;
          v1051 = (unint64_t *)&v1049->__shared_owners_;
          v1049->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v1049->__shared_weak_owners_ = 0;
          v1049[1].__vftable = v1048;
          *(_QWORD *)object = v1048;
          *(_QWORD *)&object[8] = v1048;
          *(_QWORD *)&object[16] = v1049;
          do
            v1052 = __ldxr(v1051);
          while (__stxr(v1052 + 1, v1051));
          memset(&object[24], 0, 24);
          do
            v1053 = __ldaxr(v1051);
          while (__stlxr(v1053 - 1, v1051));
          if (!v1053)
          {
            ((void (*)(std::__shared_weak_count *))v1049->__on_zero_shared)(v1049);
            std::__shared_weak_count::__release_weak(v1050);
          }
          v1054 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v1055 = operator new();
          v1056 = *(unsigned __int8 *)(v769 + 39);
          if ((v1056 & 0x80u) == 0)
            v1057 = v770;
          else
            v1057 = *(_QWORD *)(v769 + 16);
          if ((v1056 & 0x80u) != 0)
            v1056 = *(_QWORD *)(v769 + 24);
          *(_QWORD *)v1055 = v1054;
          *(_OWORD *)(v1055 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v1055 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v1055 + 40) = v1057;
          *(_QWORD *)(v1055 + 48) = v1056;
          *(_BYTE *)(v1055 + 56) = 2;
          v1671[0] = 0;
          *(_QWORD *)&v1679[0].f64[0] = v1055;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v768 + 24) + 40))(*(_QWORD *)(v768 + 24), v1679);
          v1058 = v1679[0].f64[0];
          v1679[0].f64[0] = 0.0;
          if (v1058 != 0.0)
          {
            v1059 = *(std::__shared_weak_count **)(*(_QWORD *)&v1058 + 32);
            if (v1059)
            {
              v1060 = (unint64_t *)&v1059->__shared_owners_;
              do
                v1061 = __ldaxr(v1060);
              while (__stlxr(v1061 - 1, v1060));
              if (!v1061)
              {
                ((void (*)(std::__shared_weak_count *))v1059->__on_zero_shared)(v1059);
                std::__shared_weak_count::__release_weak(v1059);
              }
            }
            v1062 = *(std::__shared_weak_count **)(*(_QWORD *)&v1058 + 16);
            if (v1062)
            {
              v1063 = (unint64_t *)&v1062->__shared_owners_;
              do
                v1064 = __ldaxr(v1063);
              while (__stlxr(v1064 - 1, v1063));
              if (!v1064)
              {
                ((void (*)(std::__shared_weak_count *))v1062->__on_zero_shared)(v1062);
                std::__shared_weak_count::__release_weak(v1062);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v1058, 0x10F0C40B62ED6C6);
            v1065 = v1671[0];
            v1671[0] = 0;
            if (v1065)
            {
              v1066 = (std::__shared_weak_count *)*((_QWORD *)v1065 + 4);
              if (v1066)
              {
                v1067 = (unint64_t *)&v1066->__shared_owners_;
                do
                  v1068 = __ldaxr(v1067);
                while (__stlxr(v1068 - 1, v1067));
                if (!v1068)
                {
                  ((void (*)(std::__shared_weak_count *))v1066->__on_zero_shared)(v1066);
                  std::__shared_weak_count::__release_weak(v1066);
                }
              }
              v1069 = (std::__shared_weak_count *)*((_QWORD *)v1065 + 2);
              if (v1069)
              {
                v1070 = (unint64_t *)&v1069->__shared_owners_;
                do
                  v1071 = __ldaxr(v1070);
                while (__stlxr(v1071 - 1, v1070));
                if (!v1071)
                {
                  ((void (*)(std::__shared_weak_count *))v1069->__on_zero_shared)(v1069);
                  std::__shared_weak_count::__release_weak(v1069);
                }
              }
              MEMORY[0x212BC6398](v1065, 0x10F0C40B62ED6C6);
            }
          }
          v1072 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v1073 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v1074 = __ldaxr(v1073);
            while (__stlxr(v1074 - 1, v1073));
            if (!v1074)
            {
              ((void (*)(std::__shared_weak_count *))v1072->__on_zero_shared)(v1072);
              std::__shared_weak_count::__release_weak(v1072);
            }
          }
          v1075 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v1076 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v1077 = __ldaxr(v1076);
            while (__stlxr(v1077 - 1, v1076));
            if (!v1077)
            {
              ((void (*)(std::__shared_weak_count *))v1075->__on_zero_shared)(v1075);
              std::__shared_weak_count::__release_weak(v1075);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1046, OS_LOG_TYPE_DEBUG);
          *(_WORD *)object = 0;
          v1078 = (void *)_os_log_send_and_compose_impl();
          if (v1078)
            free(v1078);
        }
        if (v766)
        {
          sub_20E8C003C((uint64_t)v1573, "Stationary factors are disabled");
          sub_20E863570((uint64_t)v1573);
        }
        sub_20E863570((uint64_t)v1573);
        v1079 = *(std::__shared_weak_count **)&v1574[48];
        if (!*(_QWORD *)&v1574[48])
          goto LABEL_1394;
        v1080 = (unint64_t *)(*(_QWORD *)&v1574[48] + 8);
        do
          v1081 = __ldaxr(v1080);
        while (__stlxr(v1081 - 1, v1080));
LABEL_1392:
        if (!v1081)
        {
          ((void (*)(std::__shared_weak_count *))v1079->__on_zero_shared)(v1079);
          std::__shared_weak_count::__release_weak(v1079);
        }
        goto LABEL_1394;
      }
    }
    memmove(v1035, v1033, v1034);
    goto LABEL_1224;
  }
  if (!v1525[1])
  {
    sub_20F9B2A4C(&v1663);
    if (**(int **)(v1663 + 56) > 2)
      goto LABEL_1394;
    v773 = *(unsigned __int8 *)(v1663 + 72);
    v774 = sub_20E8C31DC(v1663, "OSLogSurrogateAppender", 1, 0);
    v775 = v774;
    if (!v773 && !v774)
      goto LABEL_1394;
    v1573[0] = &v1663;
    v1573[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v1574 = std::chrono::system_clock::now();
    *(_DWORD *)&v1574[8] = 2;
    *(_QWORD *)&v1574[16] = "unknown file";
    *(_DWORD *)&v1574[24] = 765;
    *(_QWORD *)&v1574[48] = 0;
    *(_QWORD *)&v1574[32] = "unknown function";
    *(_QWORD *)&v1574[40] = 0;
    v776 = *(_QWORD *)v1573[0];
    v777 = *(_QWORD *)v1573[0] + 16;
    if (*(char *)(*(_QWORD *)v1573[0] + 39) < 0)
    {
      v779 = *(const char **)(v776 + 16);
      v778 = *(_QWORD *)(v776 + 24);
    }
    else
    {
      v778 = *(unsigned __int8 *)(*(_QWORD *)v1573[0] + 39);
      v779 = (const char *)(*(_QWORD *)v1573[0] + 16);
    }
    v1088 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1088 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v1089 = byte_254A4A4F8;
    else
      v1089 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1090 = byte_254A4A4F8[23];
    else
      v1090 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v1089, v779);
    v1091 = &object[8];
    if (v1090 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1090 >= 0x17)
    {
      v1092 = v775;
      v1093 = v779;
      v1094 = v776;
      v1095 = v773;
      v1096 = v777;
      v1097 = (v1090 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1090 | 7) != 0x17)
        v1097 = v1090 | 7;
      v1098 = v1097 + 1;
      v1091 = operator new(v1097 + 1);
      *(_QWORD *)&object[24] = v1098 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v1091;
      *(_QWORD *)&object[16] = v1090;
      v777 = v1096;
      v773 = v1095;
      v776 = v1094;
      v779 = v1093;
      v775 = v1092;
    }
    else
    {
      object[31] = v1090;
      if (!v1090)
      {
LABEL_1324:
        v1091[v1090] = 0;
        object[32] = 1;
        v1099 = &object[40];
        if (v778 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v778 >= 0x17)
        {
          v1100 = (v778 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v778 | 7) != 0x17)
            v1100 = v778 | 7;
          v1101 = v1100 + 1;
          v1099 = operator new(v1100 + 1);
          *(_QWORD *)&object[56] = v1101 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v1099;
          *(_QWORD *)&object[48] = v778;
        }
        else
        {
          object[63] = v778;
          if (!v778)
            goto LABEL_1332;
        }
        memmove(v1099, v779, v778);
LABEL_1332:
        v1099[v778] = 0;
        object[64] = 1;
        v1102 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v775 && *(_QWORD *)(v775 + 24))
        {
          v1103 = _os_log_pack_size();
          v1104 = (std::__shared_weak_count_vtbl *)operator new(v1103, (std::align_val_t)8uLL);
          v1105 = (std::__shared_weak_count *)operator new();
          v1106 = v1105;
          v1105->__shared_owners_ = 0;
          v1107 = (unint64_t *)&v1105->__shared_owners_;
          v1105->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v1105->__shared_weak_owners_ = 0;
          v1105[1].__vftable = v1104;
          *(_QWORD *)object = v1104;
          *(_QWORD *)&object[8] = v1104;
          *(_QWORD *)&object[16] = v1105;
          do
            v1108 = __ldxr(v1107);
          while (__stxr(v1108 + 1, v1107));
          memset(&object[24], 0, 24);
          do
            v1109 = __ldaxr(v1107);
          while (__stlxr(v1109 - 1, v1107));
          if (!v1109)
          {
            ((void (*)(std::__shared_weak_count *))v1105->__on_zero_shared)(v1105);
            std::__shared_weak_count::__release_weak(v1106);
          }
          v1110 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v1111 = operator new();
          v1112 = *(unsigned __int8 *)(v776 + 39);
          if ((v1112 & 0x80u) == 0)
            v1113 = v777;
          else
            v1113 = *(_QWORD *)(v776 + 16);
          if ((v1112 & 0x80u) != 0)
            v1112 = *(_QWORD *)(v776 + 24);
          *(_QWORD *)v1111 = v1110;
          *(_OWORD *)(v1111 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v1111 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v1111 + 40) = v1113;
          *(_QWORD *)(v1111 + 48) = v1112;
          *(_BYTE *)(v1111 + 56) = 2;
          v1671[0] = 0;
          *(_QWORD *)&v1679[0].f64[0] = v1111;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v775 + 24) + 40))(*(_QWORD *)(v775 + 24), v1679);
          v1114 = v1679[0].f64[0];
          v1679[0].f64[0] = 0.0;
          if (v1114 != 0.0)
          {
            v1115 = *(std::__shared_weak_count **)(*(_QWORD *)&v1114 + 32);
            if (v1115)
            {
              v1116 = (unint64_t *)&v1115->__shared_owners_;
              do
                v1117 = __ldaxr(v1116);
              while (__stlxr(v1117 - 1, v1116));
              if (!v1117)
              {
                ((void (*)(std::__shared_weak_count *))v1115->__on_zero_shared)(v1115);
                std::__shared_weak_count::__release_weak(v1115);
              }
            }
            v1118 = *(std::__shared_weak_count **)(*(_QWORD *)&v1114 + 16);
            if (v1118)
            {
              v1119 = (unint64_t *)&v1118->__shared_owners_;
              do
                v1120 = __ldaxr(v1119);
              while (__stlxr(v1120 - 1, v1119));
              if (!v1120)
              {
                ((void (*)(std::__shared_weak_count *))v1118->__on_zero_shared)(v1118);
                std::__shared_weak_count::__release_weak(v1118);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v1114, 0x10F0C40B62ED6C6);
            v1121 = v1671[0];
            v1671[0] = 0;
            if (v1121)
            {
              v1122 = (std::__shared_weak_count *)*((_QWORD *)v1121 + 4);
              if (v1122)
              {
                v1123 = (unint64_t *)&v1122->__shared_owners_;
                do
                  v1124 = __ldaxr(v1123);
                while (__stlxr(v1124 - 1, v1123));
                if (!v1124)
                {
                  ((void (*)(std::__shared_weak_count *))v1122->__on_zero_shared)(v1122);
                  std::__shared_weak_count::__release_weak(v1122);
                }
              }
              v1125 = (std::__shared_weak_count *)*((_QWORD *)v1121 + 2);
              if (v1125)
              {
                v1126 = (unint64_t *)&v1125->__shared_owners_;
                do
                  v1127 = __ldaxr(v1126);
                while (__stlxr(v1127 - 1, v1126));
                if (!v1127)
                {
                  ((void (*)(std::__shared_weak_count *))v1125->__on_zero_shared)(v1125);
                  std::__shared_weak_count::__release_weak(v1125);
                }
              }
              MEMORY[0x212BC6398](v1121, 0x10F0C40B62ED6C6);
            }
          }
          v1128 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v1129 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v1130 = __ldaxr(v1129);
            while (__stlxr(v1130 - 1, v1129));
            if (!v1130)
            {
              ((void (*)(std::__shared_weak_count *))v1128->__on_zero_shared)(v1128);
              std::__shared_weak_count::__release_weak(v1128);
            }
          }
          v1131 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v1132 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v1133 = __ldaxr(v1132);
            while (__stlxr(v1133 - 1, v1132));
            if (!v1133)
            {
              ((void (*)(std::__shared_weak_count *))v1131->__on_zero_shared)(v1131);
              std::__shared_weak_count::__release_weak(v1131);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1102, OS_LOG_TYPE_DEBUG);
          *(_WORD *)object = 0;
          v1134 = (void *)_os_log_send_and_compose_impl();
          if (v1134)
            free(v1134);
        }
        if (v773)
        {
          sub_20E8C003C((uint64_t)v1573, "No stationary constraints");
          sub_20E863570((uint64_t)v1573);
        }
        sub_20E863570((uint64_t)v1573);
        v1079 = *(std::__shared_weak_count **)&v1574[48];
        if (!*(_QWORD *)&v1574[48])
          goto LABEL_1394;
        v1135 = (unint64_t *)(*(_QWORD *)&v1574[48] + 8);
        do
          v1081 = __ldaxr(v1135);
        while (__stlxr(v1081 - 1, v1135));
        goto LABEL_1392;
      }
    }
    memmove(v1091, v1089, v1090);
    goto LABEL_1324;
  }
  v757 = v1531 + 43736;
  v577.f64[0] = *(double *)(v1531 + 1384) * *(double *)(v1531 + 1384);
  v758 = *(double *)(v1531 + 1392);
  v759 = *(_QWORD *)(v1531 + 43776);
  if (!v759
    || (v576.n128_f64[0] = 1.0 / (*(double *)(v759 + 16) * *(double *)(v759 + 16)),
        v760 = vabdq_f64((float64x2_t)v576.n128_u64[0], (float64x2_t)*(unint64_t *)&v577.f64[0]),
        *(_QWORD *)&v761.f64[0] = *(_OWORD *)&vabdq_f64((float64x2_t)v576, v577),
        v761.f64[1] = NAN,
        v762 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v760, v761), v760), (float64x2_t)0),
        vmaxnmvq_f64(v762) > 2.22044605e-16))
  {
    v1524 = v577;
    v763 = operator new(0x30uLL);
    v763[1] = 0;
    v763[2] = 0;
    *v763 = &off_24CA04C20;
    v763[3] = &off_24CA04C70;
    v764 = (char *)(v763 + 3);
    if (v1524.f64[0] <= 1.0e-15)
    {
      v763[5] = 0x7FF8000000000000;
      *((_BYTE *)v763 + 32) = 0;
      v765 = *(std::__shared_weak_count **)(v1531 + 43784);
      *(_QWORD *)(v1531 + 43776) = v764;
      *(_QWORD *)(v1531 + 43784) = v763;
      if (!v765)
        goto LABEL_856;
    }
    else
    {
      v762.f64[1] = v1524.f64[1];
      v762.f64[0] = sqrt(v1524.f64[0]);
      *((double *)v763 + 5) = (1.0 / v762.f64[0] + 1.0 / v762.f64[0] + 1.0 / v762.f64[0]) / 3.0;
      *((_BYTE *)v763 + 32) = 1;
      v765 = *(std::__shared_weak_count **)(v1531 + 43784);
      *(_QWORD *)(v1531 + 43776) = v764;
      *(_QWORD *)(v1531 + 43784) = v763;
      if (!v765)
        goto LABEL_856;
    }
    v780 = (unint64_t *)&v765->__shared_owners_;
    do
      v781 = __ldaxr(v780);
    while (__stlxr(v781 - 1, v780));
    if (!v781)
    {
      ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
      std::__shared_weak_count::__release_weak(v765);
    }
  }
LABEL_856:
  v577.f64[0] = v758 * v758;
  v782 = *(_QWORD *)(v1531 + 43792);
  if (!v782
    || (v762.f64[0] = 1.0 / (*(double *)(v782 + 16) * *(double *)(v782 + 16)),
        v783 = vabdq_f64((float64x2_t)*(unint64_t *)&v762.f64[0], (float64x2_t)*(unint64_t *)&v577.f64[0]),
        *(_QWORD *)&v784.f64[0] = *(_OWORD *)&vabdq_f64(v762, v577),
        v784.f64[1] = NAN,
        vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v783, v784), v783), (float64x2_t)0)) > 2.22044605e-16))
  {
    v785 = operator new(0x30uLL);
    v785[1] = 0;
    v785[2] = 0;
    *v785 = &off_24CA04C20;
    v785[3] = &off_24CA04C70;
    v786 = (char *)(v785 + 3);
    if (v758 * v758 <= 1.0e-15)
    {
      v785[5] = 0x7FF8000000000000;
      *((_BYTE *)v785 + 32) = 0;
      v788 = *(std::__shared_weak_count **)(v1531 + 43800);
      *(_QWORD *)(v1531 + 43792) = v786;
      *(_QWORD *)(v1531 + 43800) = v785;
      if (!v788)
        goto LABEL_866;
    }
    else
    {
      v787 = sqrt(v758 * v758);
      *((double *)v785 + 5) = (1.0 / v787 + 1.0 / v787 + 1.0 / v787) / 3.0;
      *((_BYTE *)v785 + 32) = 1;
      v788 = *(std::__shared_weak_count **)(v1531 + 43800);
      *(_QWORD *)(v1531 + 43792) = v786;
      *(_QWORD *)(v1531 + 43800) = v785;
      if (!v788)
        goto LABEL_866;
    }
    v789 = (unint64_t *)&v788->__shared_owners_;
    do
      v790 = __ldaxr(v789);
    while (__stlxr(v790 - 1, v789));
    if (!v790)
    {
      ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
      std::__shared_weak_count::__release_weak(v788);
    }
  }
LABEL_866:
  v791 = v1525[1];
  if (v791)
  {
    v792 = 0;
    v793 = 0;
    v794 = v1672;
    v1516 = (_DWORD *)(v1531 + 7864);
    v1457 = (_QWORD *)(v1531 + 6432);
    v1456 = (_QWORD *)(v1531 + 6456);
    while (1)
    {
      if (((*(_QWORD *)(*v1525 + ((v792 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v792) & 1) == 0)
      {
        v792 = ++v793;
        goto LABEL_869;
      }
      v795 = *(unsigned int *)(*v1527 + 4 * v792);
      if ((v795 & 0x80000000) == 0)
        break;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 801, (uint64_t)"frameIDs[i] >= 0", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1879;
      }
      v795 = *(unsigned int *)(*v1527 + 4 * v792);
      v796 = *(int8x8_t *)(v757 + 8);
      if (v796)
        goto LABEL_876;
LABEL_895:
      *(_QWORD *)object = v795;
      sub_20EDC9EA8(v757, (unint64_t *)object, object);
LABEL_896:
      v804 = *(_OWORD *)(v757 + 40);
      v1639 = v804;
      if (*((_QWORD *)&v804 + 1))
      {
        v805 = (unint64_t *)(*((_QWORD *)&v804 + 1) + 8);
        do
          v806 = __ldxr(v805);
        while (__stxr(v806 + 1, v805));
        *(_OWORD *)v1672 = v804;
        do
          v807 = __ldxr(v805);
        while (__stxr(v807 + 1, v805));
      }
      else
      {
        v1672[0] = (void *)v804;
        v1672[1] = 0;
      }
      v1671[0] = (void *)v795;
      LOBYTE(v1673) = 1;
      v1631 = 0uLL;
      v1647 = 0uLL;
      v808 = *(unint64_t **)(v1531 + 6416);
      v809 = *(unint64_t **)(v1531 + 6424);
      if (v808 == v809)
      {
        v810 = *(double *)(v1531 + 6416);
      }
      else
      {
        v810 = *(double *)(v1531 + 6424);
        if (*(v809 - 18) >= v795)
        {
          v811 = 0x8E38E38E38E38E39 * (((char *)v809 - (char *)v808) >> 4);
          v812 = *(_QWORD **)(v1531 + 6416);
          do
          {
            v813 = v811 >> 1;
            v814 = &v812[18 * (v811 >> 1)];
            v816 = *v814;
            v815 = v814 + 18;
            v811 += ~(v811 >> 1);
            if (v816 < v795)
              v812 = v815;
            else
              v811 = v813;
          }
          while (v811);
          v810 = *(double *)(v1531 + 6424);
          if (v812 != v809)
          {
            v810 = *(double *)&v812;
            if (*v812 == v795)
              goto LABEL_957;
          }
        }
      }
      *(_OWORD *)v1573 = *(_OWORD *)v1671;
      *(_OWORD *)v1574 = v804;
      *v794 = 0;
      v794[1] = 0;
      v817 = 1;
      v1574[16] = 1;
      memset(&v1574[96], 0, 17);
      *(_QWORD *)&v1574[24] = 0;
      *(_QWORD *)&v1574[80] = 0xBFF0000000000000;
      v1574[88] = 0;
      v818 = *(char **)(v1531 + 5288);
      v819 = *(char **)(v1531 + 5296);
      if (v819 != v818)
      {
        v820 = (v819 - v818) >> 4;
        do
        {
          v821 = v820 >> 1;
          v822 = (unsigned int *)&v818[16 * (v820 >> 1)];
          v824 = *v822;
          v823 = (char *)(v822 + 4);
          v820 += ~(v820 >> 1);
          if (v824 < v795)
            v818 = v823;
          else
            v820 = v821;
        }
        while (v820);
        if (v818 == v819 || *(_DWORD *)v818 != v795)
        {
          v817 = 1;
          v846 = *(std::__shared_weak_count **)&v1574[8];
          if (!*(_QWORD *)&v1574[8])
            goto LABEL_949;
          goto LABEL_946;
        }
        v1505 = v793;
        *(_QWORD *)&v1574[24] = *((_QWORD *)v818 + 1);
        v825 = *(_QWORD *)&v1574[24];
        ++*(_DWORD *)(*((_QWORD *)v818 + 1) + 8);
        if (*(_BYTE *)(v825 + 20))
        {
          *(_QWORD *)object = v795;
          *(_OWORD *)&object[8] = *(_OWORD *)v1573;
          *(_OWORD *)&object[24] = v804;
          *(_QWORD *)v1574 = 0;
          *(_QWORD *)&v1574[8] = 0;
          object[40] = 1;
          *(_QWORD *)&object[48] = v825;
          *(_OWORD *)&object[56] = *(_OWORD *)&v1574[32];
          *(_QWORD *)&object[72] = *(_QWORD *)&v1574[48];
          *(_OWORD *)&object[80] = *(_OWORD *)&v1574[56];
          *(_OWORD *)&object[96] = *(_OWORD *)&v1574[72];
          object[112] = v1574[88];
          memset(&object[120], 0, 17);
          *(_QWORD *)&v1574[96] = 0;
          *(_QWORD *)&v1574[104] = 0;
          if (v809 != *(unint64_t **)&v810 && **(_QWORD **)&v810 == v795)
            goto LABEL_1130;
          v1458 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4);
          if ((unint64_t)v809 < *v1457)
          {
            if (*(unint64_t **)&v810 == v809)
            {
              *v809 = v795;
              v944 = &v808[2 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4)];
              *(_OWORD *)(v944 + 1) = *(_OWORD *)&object[8];
              *(_OWORD *)(v944 + 3) = v804;
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_BYTE *)v944 + 40) = 1;
              v944[6] = v825;
              v945 = *(_OWORD *)&object[56];
              v944[9] = *(_QWORD *)&object[72];
              *(_OWORD *)(v944 + 7) = v945;
              v946 = *(_OWORD *)&object[80];
              v944[12] = *(_QWORD *)&object[96];
              *((_OWORD *)v944 + 5) = v946;
              v947 = *(_QWORD *)&object[104];
              *((_BYTE *)v944 + 112) = object[112];
              v944[13] = v947;
              v944[15] = 0;
              v944[16] = 0;
              *(_QWORD *)&object[120] = 0;
              *(_QWORD *)&object[128] = 0;
              *((_BYTE *)v944 + 136) = 0;
              *(_QWORD *)(v1531 + 6424) = v809 + 18;
            }
            else
            {
              v1453 = v757;
              v1454 = v794;
              v1655 = *(_OWORD *)v1573;
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              v1679[0] = *(float64x2_t *)&v1574[32];
              v1679[1].f64[0] = *(float64_t *)&v1574[48];
              v1663 = *(_OWORD *)&v1574[56];
              *(_QWORD *)&v1664 = *(_QWORD *)&v1574[72];
              BYTE8(v1607) = v1574[88];
              *(_QWORD *)&v1607 = *(_QWORD *)&v1574[80];
              v826 = v809 - 18;
              v827 = v809;
              v828 = v809 - 18;
              *(_QWORD *)&object[120] = 0;
              *(_QWORD *)&object[128] = 0;
              if ((unint64_t)v809 >= 0x90)
              {
                do
                {
                  *v827 = *v828;
                  *(_OWORD *)(v827 + 1) = *(_OWORD *)(v828 + 1);
                  *(_OWORD *)(v827 + 3) = *(_OWORD *)(v828 + 3);
                  v828[3] = 0;
                  v828[4] = 0;
                  *((_BYTE *)v827 + 40) = *((_BYTE *)v828 + 40);
                  v827[6] = v828[6];
                  v829 = *(_OWORD *)(v828 + 7);
                  v827[9] = v828[9];
                  *(_OWORD *)(v827 + 7) = v829;
                  v830 = *((_OWORD *)v828 + 5);
                  v827[12] = v828[12];
                  *((_OWORD *)v827 + 5) = v830;
                  v831 = v828[13];
                  *((_BYTE *)v827 + 112) = *((_BYTE *)v828 + 112);
                  v827[13] = v831;
                  *(_OWORD *)(v827 + 15) = *(_OWORD *)(v828 + 15);
                  v828[15] = 0;
                  v828[16] = 0;
                  *((_BYTE *)v827 + 136) = *((_BYTE *)v828 + 136);
                  v827 += 18;
                  v828 += 18;
                }
                while (v828 < v809);
              }
              *(_QWORD *)(v1531 + 6424) = v827;
              if (v809 != (unint64_t *)(*(_QWORD *)&v810 + 144))
              {
                v832 = v809 - 18;
                v833 = v809;
                v1484 = v804;
                do
                {
                  v834 = *(v832 - 18);
                  v832 -= 18;
                  *(v833 - 18) = v834;
                  v833 -= 18;
                  *(_OWORD *)(v833 + 1) = *(_OWORD *)(v832 + 1);
                  v835 = *(_OWORD *)(v832 + 3);
                  v832[3] = 0;
                  v832[4] = 0;
                  v836 = (std::__shared_weak_count *)v833[4];
                  *(_OWORD *)(v833 + 3) = v835;
                  if (v836)
                  {
                    v837 = (unint64_t *)&v836->__shared_owners_;
                    do
                      v838 = __ldaxr(v837);
                    while (__stlxr(v838 - 1, v837));
                    if (!v838)
                    {
                      ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
                      std::__shared_weak_count::__release_weak(v836);
                      v804 = v1484;
                    }
                  }
                  *((_BYTE *)v809 - 104) = *((_BYTE *)v826 - 104);
                  *(v809 - 12) = *(v826 - 12);
                  v839 = *(_OWORD *)(v826 - 11);
                  *(v809 - 9) = *(v826 - 9);
                  *(_OWORD *)(v809 - 11) = v839;
                  v840 = *((_OWORD *)v826 - 4);
                  *(v809 - 6) = *(v826 - 6);
                  *((_OWORD *)v809 - 4) = v840;
                  v841 = *(v826 - 5);
                  *((_BYTE *)v809 - 32) = *((_BYTE *)v826 - 32);
                  *(v809 - 5) = v841;
                  v842 = *(_OWORD *)(v826 - 3);
                  *(v826 - 3) = 0;
                  *(v826 - 2) = 0;
                  v843 = (std::__shared_weak_count *)*(v809 - 2);
                  *(_OWORD *)(v809 - 3) = v842;
                  if (v843)
                  {
                    v844 = (unint64_t *)&v843->__shared_owners_;
                    do
                      v845 = __ldaxr(v844);
                    while (__stlxr(v845 - 1, v844));
                    if (!v845)
                    {
                      ((void (*)(std::__shared_weak_count *))v843->__on_zero_shared)(v843);
                      std::__shared_weak_count::__release_weak(v843);
                      v804 = v1484;
                    }
                  }
                  *((_BYTE *)v809 - 8) = *((_BYTE *)v826 - 8);
                  v809 = v833;
                  v826 = v832;
                }
                while (v832 != *(unint64_t **)&v810);
              }
              **(_QWORD **)&v810 = v795;
              v935 = &v808[2 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4)];
              *(_OWORD *)(v935 + 1) = v1655;
              v936 = (std::__shared_weak_count *)v935[4];
              *(_OWORD *)(v935 + 3) = v804;
              v757 = v1453;
              v794 = v1454;
              if (v936)
              {
                v937 = (unint64_t *)&v936->__shared_owners_;
                do
                  v938 = __ldaxr(v937);
                while (__stlxr(v938 - 1, v937));
                if (!v938)
                {
                  ((void (*)(std::__shared_weak_count *))v936->__on_zero_shared)(v936);
                  std::__shared_weak_count::__release_weak(v936);
                }
              }
              v939 = &v808[2 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4)];
              *((_BYTE *)v939 + 40) = 1;
              v939[6] = v825;
              *(float64x2_t *)(v939 + 7) = v1679[0];
              v939[9] = *(_QWORD *)&v1679[1].f64[0];
              *((_OWORD *)v939 + 5) = v1663;
              v940 = v1607;
              v939[12] = v1664;
              v939[13] = v940;
              *((_BYTE *)v939 + 112) = BYTE8(v1607);
              v941 = (std::__shared_weak_count *)v939[16];
              v939[15] = 0;
              v939[16] = 0;
              if (v941)
              {
                v942 = (unint64_t *)&v941->__shared_owners_;
                do
                  v943 = __ldaxr(v942);
                while (__stlxr(v943 - 1, v942));
                if (!v943)
                {
                  ((void (*)(std::__shared_weak_count *))v941->__on_zero_shared)(v941);
                  std::__shared_weak_count::__release_weak(v941);
                }
              }
              LOBYTE(v808[2 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4) + 17]) = 0;
            }
            goto LABEL_1125;
          }
          v916 = 0x8E38E38E38E38E39 * (((char *)v809 - (char *)v808) >> 4) + 1;
          if (v916 > 0x1C71C71C71C71C7)
            sub_20E867F44();
          v917 = v794;
          if (0x1C71C71C71C71C72 * ((uint64_t)(*v1457 - (_QWORD)v808) >> 4) > v916)
            v916 = 0x1C71C71C71C71C72 * ((uint64_t)(*v1457 - (_QWORD)v808) >> 4);
          if (0x8E38E38E38E38E39 * ((uint64_t)(*v1457 - (_QWORD)v808) >> 4) >= 0xE38E38E38E38E3)
            v918 = 0x1C71C71C71C71C7;
          else
            v918 = v916;
          *(_QWORD *)&v1679[2].f64[0] = v1531 + 6432;
          if (v918)
          {
            if (v918 > 0x1C71C71C71C71C7)
              sub_20E877A38();
            v919 = (char *)operator new(144 * v918);
          }
          else
          {
            v919 = 0;
          }
          *(_QWORD *)&v948 = &v919[16 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4)];
          *(_QWORD *)&v1679[0].f64[0] = v919;
          v1679[0].f64[1] = v948;
          v1679[1].f64[0] = v948;
          *(_QWORD *)&v1679[1].f64[1] = &v919[144 * v918];
          if (v1458 == v918)
          {
            v794 = v917;
            if ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) < 1)
            {
              if (v808 == *(unint64_t **)&v810)
                v953 = 1;
              else
                v953 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4);
              if (v953 > 0x1C71C71C71C71C7)
                sub_20E877A38();
              v954 = (char *)operator new(144 * v953);
              *(_QWORD *)&v948 = &v954[144 * (v953 >> 2)];
              *(_QWORD *)&v1679[0].f64[0] = v954;
              v1679[0].f64[1] = v948;
              *(_QWORD *)&v1679[1].f64[1] = &v954[144 * v953];
              if (v919)
                operator delete(v919);
              v952 = v795;
              v951 = *(_QWORD *)&v948;
            }
            else
            {
              v949 = v1458 + 2;
              if (v1458 >= -1)
                v949 = v1458 + 1;
              v950 = v949 >> 1;
              v951 = sub_20F91EC44(*(uint64_t *)&v948, *(uint64_t *)&v948, *(_QWORD *)&v948 - 144 * (v949 >> 1));
              *(_QWORD *)&v948 = *(_QWORD *)&v1679[0].f64[1] - 144 * v950;
              v1679[0].f64[1] = v948;
              v952 = *(_QWORD *)object;
            }
          }
          else
          {
            v952 = v795;
            v951 = (uint64_t)&v919[16 * ((uint64_t)(*(_QWORD *)&v810 - (_QWORD)v808) >> 4)];
            v794 = v917;
          }
          *(_QWORD *)v951 = v952;
          *(_OWORD *)(v951 + 8) = *(_OWORD *)&object[8];
          *(_OWORD *)(v951 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_BYTE *)(v951 + 40) = object[40];
          *(_QWORD *)(v951 + 48) = *(_QWORD *)&object[48];
          *(_OWORD *)(v951 + 56) = *(_OWORD *)&object[56];
          *(_QWORD *)(v951 + 72) = *(_QWORD *)&object[72];
          v955 = *(_OWORD *)&object[80];
          *(_QWORD *)(v951 + 96) = *(_QWORD *)&object[96];
          *(_OWORD *)(v951 + 80) = v955;
          v956 = *(_QWORD *)&object[104];
          *(_BYTE *)(v951 + 112) = object[112];
          *(_QWORD *)(v951 + 104) = v956;
          *(_OWORD *)(v951 + 120) = *(_OWORD *)&object[120];
          *(_QWORD *)&object[120] = 0;
          *(_QWORD *)&object[128] = 0;
          *(_BYTE *)(v951 + 136) = object[136];
          *(_QWORD *)&v957 = v951 + 144;
          *(_QWORD *)&v1679[1].f64[0] = v951 + 144;
          v958 = *(_QWORD *)(v1531 + 6416);
          if (v958 != *(_QWORD *)&v810)
          {
            v959 = 0;
            do
            {
              v960 = *(_QWORD *)&v948 + v959;
              v961 = *(_QWORD *)&v810 + v959;
              *(_QWORD *)(v960 - 144) = *(_QWORD *)(*(_QWORD *)&v810 + v959 - 144);
              *(_OWORD *)(v960 - 136) = *(_OWORD *)(*(_QWORD *)&v810 + v959 - 136);
              *(_OWORD *)(v960 - 120) = *(_OWORD *)(*(_QWORD *)&v810 + v959 - 120);
              v962 = *(_BYTE *)(*(_QWORD *)&v810 + v959 - 104);
              *(_QWORD *)(v961 - 120) = 0;
              *(_QWORD *)(v961 - 112) = 0;
              *(_BYTE *)(v960 - 104) = v962;
              *(_QWORD *)(v960 - 96) = *(_QWORD *)(*(_QWORD *)&v810 + v959 - 96);
              v963 = *(_OWORD *)(*(_QWORD *)&v810 + v959 - 88);
              *(_QWORD *)(v960 - 72) = *(_QWORD *)(*(_QWORD *)&v810 + v959 - 72);
              *(_OWORD *)(v960 - 88) = v963;
              v964 = *(_OWORD *)(*(_QWORD *)&v810 + v959 - 64);
              *(_QWORD *)(v960 - 48) = *(_QWORD *)(*(_QWORD *)&v810 + v959 - 48);
              *(_OWORD *)(v960 - 64) = v964;
              v965 = *(_QWORD *)(*(_QWORD *)&v810 + v959 - 40);
              *(_BYTE *)(v960 - 32) = *(_BYTE *)(*(_QWORD *)&v810 + v959 - 32);
              *(_QWORD *)(v960 - 40) = v965;
              *(_OWORD *)(v960 - 24) = *(_OWORD *)(*(_QWORD *)&v810 + v959 - 24);
              *(_QWORD *)(v961 - 24) = 0;
              *(_QWORD *)(v961 - 16) = 0;
              *(_BYTE *)(v960 - 8) = *(_BYTE *)(*(_QWORD *)&v810 + v959 - 8);
              v959 -= 144;
            }
            while (*(_QWORD *)&v810 + v959 != v958);
            v957 = v1679[1].f64[0];
            *(_QWORD *)&v948 += v959;
          }
          v1679[0].f64[1] = v948;
          v966 = *(_QWORD *)(v1531 + 6424);
          if (v966 == *(_QWORD *)&v810)
          {
            v970 = (double *)v1531;
          }
          else
          {
            do
            {
              **(_QWORD **)&v957 = **(_QWORD **)&v810;
              *(_OWORD *)(*(_QWORD *)&v957 + 8) = *(_OWORD *)(*(_QWORD *)&v810 + 8);
              *(_OWORD *)(*(_QWORD *)&v957 + 24) = *(_OWORD *)(*(_QWORD *)&v810 + 24);
              *(_QWORD *)(*(_QWORD *)&v810 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v810 + 32) = 0;
              *(_BYTE *)(*(_QWORD *)&v957 + 40) = *(_BYTE *)(*(_QWORD *)&v810 + 40);
              *(_QWORD *)(*(_QWORD *)&v957 + 48) = *(_QWORD *)(*(_QWORD *)&v810 + 48);
              v967 = *(_OWORD *)(*(_QWORD *)&v810 + 56);
              *(_QWORD *)(*(_QWORD *)&v957 + 72) = *(_QWORD *)(*(_QWORD *)&v810 + 72);
              *(_OWORD *)(*(_QWORD *)&v957 + 56) = v967;
              v968 = *(_OWORD *)(*(_QWORD *)&v810 + 80);
              *(_QWORD *)(*(_QWORD *)&v957 + 96) = *(_QWORD *)(*(_QWORD *)&v810 + 96);
              *(_OWORD *)(*(_QWORD *)&v957 + 80) = v968;
              v969 = *(_QWORD *)(*(_QWORD *)&v810 + 104);
              *(_BYTE *)(*(_QWORD *)&v957 + 112) = *(_BYTE *)(*(_QWORD *)&v810 + 112);
              *(_QWORD *)(*(_QWORD *)&v957 + 104) = v969;
              *(_OWORD *)(*(_QWORD *)&v957 + 120) = *(_OWORD *)(*(_QWORD *)&v810 + 120);
              *(_QWORD *)(*(_QWORD *)&v810 + 120) = 0;
              *(_QWORD *)(*(_QWORD *)&v810 + 128) = 0;
              *(_BYTE *)(*(_QWORD *)&v957 + 136) = *(_BYTE *)(*(_QWORD *)&v810 + 136);
              *(_QWORD *)&v957 += 144;
              *(_QWORD *)&v810 += 144;
            }
            while (*(_QWORD *)&v810 != v966);
            v948 = v1679[0].f64[1];
            v970 = (double *)v1531;
            v810 = *(double *)(v1531 + 6424);
          }
          v971 = v970[802];
          v970[802] = v948;
          v970[803] = v957;
          v972 = v970[804];
          v970[804] = v1679[1].f64[1];
          v1679[1].f64[1] = v972;
          v1679[0].f64[1] = v971;
          v1679[0].f64[0] = v971;
          if (*(_QWORD *)&v810 == *(_QWORD *)&v971)
          {
LABEL_1123:
            if (v810 != 0.0)
              operator delete(*(void **)&v810);
LABEL_1125:
            v979 = *(std::__shared_weak_count **)&object[128];
            if (*(_QWORD *)&object[128])
            {
              v980 = (unint64_t *)(*(_QWORD *)&object[128] + 8);
              do
                v981 = __ldaxr(v980);
              while (__stlxr(v981 - 1, v980));
              if (!v981)
              {
                ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
                std::__shared_weak_count::__release_weak(v979);
              }
            }
LABEL_1130:
            v982 = *(std::__shared_weak_count **)&object[32];
            v793 = v1505;
            if (*(_QWORD *)&object[32])
            {
              v983 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v984 = __ldaxr(v983);
              while (__stlxr(v984 - 1, v983));
              if (!v984)
              {
                ((void (*)(std::__shared_weak_count *))v982->__on_zero_shared)(v982);
                std::__shared_weak_count::__release_weak(v982);
              }
            }
            *(_BYTE *)(v1531 + 6802) = 0;
            *v1526 = 0;
            *(int64x2_t *)(v1531 + 6784) = vaddq_s64(*(int64x2_t *)(v1531 + 6784), (int64x2_t)xmmword_2103B84D0);
            v985 = *(std::__shared_weak_count **)&v1574[104];
            if (!*(_QWORD *)&v1574[104])
              goto LABEL_1139;
            v986 = (unint64_t *)(*(_QWORD *)&v1574[104] + 8);
            do
              v987 = __ldaxr(v986);
            while (__stlxr(v987 - 1, v986));
            if (!v987)
            {
              ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
              std::__shared_weak_count::__release_weak(v985);
              v817 = 0;
              v846 = *(std::__shared_weak_count **)&v1574[8];
              if (!*(_QWORD *)&v1574[8])
                goto LABEL_949;
            }
            else
            {
LABEL_1139:
              v817 = 0;
              v846 = *(std::__shared_weak_count **)&v1574[8];
              if (!*(_QWORD *)&v1574[8])
                goto LABEL_949;
            }
            goto LABEL_946;
          }
          while (2)
          {
            *(_QWORD *)&v1679[1].f64[0] = *(_QWORD *)&v810 - 144;
            v973 = *(std::__shared_weak_count **)(*(_QWORD *)&v810 - 16);
            if (!v973)
              goto LABEL_1115;
            v974 = (unint64_t *)&v973->__shared_owners_;
            do
              v975 = __ldaxr(v974);
            while (__stlxr(v975 - 1, v974));
            if (!v975)
            {
              ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
              std::__shared_weak_count::__release_weak(v973);
              v976 = *(std::__shared_weak_count **)(*(_QWORD *)&v810 - 112);
              if (v976)
              {
LABEL_1116:
                v977 = (unint64_t *)&v976->__shared_owners_;
                do
                  v978 = __ldaxr(v977);
                while (__stlxr(v978 - 1, v977));
                if (!v978)
                {
                  ((void (*)(std::__shared_weak_count *))v976->__on_zero_shared)(v976);
                  std::__shared_weak_count::__release_weak(v976);
                }
              }
            }
            else
            {
LABEL_1115:
              v976 = *(std::__shared_weak_count **)(*(_QWORD *)&v810 - 112);
              if (v976)
                goto LABEL_1116;
            }
            v810 = v1679[1].f64[0];
            if (*(_QWORD *)&v1679[1].f64[0] == *(_QWORD *)&v971)
            {
              v810 = v1679[0].f64[0];
              goto LABEL_1123;
            }
            continue;
          }
        }
        --*(_DWORD *)(v825 + 8);
        *(_QWORD *)&v1574[24] = 0;
        v817 = 1;
        v793 = v1505;
      }
      v846 = *(std::__shared_weak_count **)&v1574[8];
      if (!*(_QWORD *)&v1574[8])
        goto LABEL_949;
LABEL_946:
      v847 = (unint64_t *)&v846->__shared_owners_;
      do
        v848 = __ldaxr(v847);
      while (__stlxr(v848 - 1, v847));
      if (v848)
      {
LABEL_949:
        v849 = (std::__shared_weak_count *)*((_QWORD *)&v1647 + 1);
        if (*((_QWORD *)&v1647 + 1))
          goto LABEL_950;
        goto LABEL_955;
      }
      ((void (*)(std::__shared_weak_count *))v846->__on_zero_shared)(v846);
      std::__shared_weak_count::__release_weak(v846);
      v849 = (std::__shared_weak_count *)*((_QWORD *)&v1647 + 1);
      if (*((_QWORD *)&v1647 + 1))
      {
LABEL_950:
        v850 = (unint64_t *)&v849->__shared_owners_;
        do
          v851 = __ldaxr(v850);
        while (__stlxr(v851 - 1, v850));
        if (!v851)
        {
          ((void (*)(std::__shared_weak_count *))v849->__on_zero_shared)(v849);
          std::__shared_weak_count::__release_weak(v849);
        }
      }
LABEL_955:
      if ((v817 & 1) == 0)
      {
        *(_BYTE *)(v1531 + 7868) = 0;
        *v1516 = 0;
      }
LABEL_957:
      v852 = (std::__shared_weak_count *)*((_QWORD *)&v1631 + 1);
      if (!*((_QWORD *)&v1631 + 1))
        goto LABEL_961;
      v853 = (unint64_t *)(*((_QWORD *)&v1631 + 1) + 8);
      do
        v854 = __ldaxr(v853);
      while (__stlxr(v854 - 1, v853));
      if (!v854)
      {
        ((void (*)(std::__shared_weak_count *))v852->__on_zero_shared)(v852);
        std::__shared_weak_count::__release_weak(v852);
        v855 = (std::__shared_weak_count *)v1672[1];
        if (v1672[1])
        {
LABEL_962:
          v856 = (unint64_t *)&v855->__shared_owners_;
          do
            v857 = __ldaxr(v856);
          while (__stlxr(v857 - 1, v856));
          if (!v857)
          {
            ((void (*)(std::__shared_weak_count *))v855->__on_zero_shared)(v855);
            std::__shared_weak_count::__release_weak(v855);
          }
        }
      }
      else
      {
LABEL_961:
        v855 = (std::__shared_weak_count *)v1672[1];
        if (v1672[1])
          goto LABEL_962;
      }
      v858 = (std::__shared_weak_count *)*((_QWORD *)&v1639 + 1);
      if (!*((_QWORD *)&v1639 + 1))
        goto LABEL_971;
      v859 = (unint64_t *)(*((_QWORD *)&v1639 + 1) + 8);
      do
        v860 = __ldaxr(v859);
      while (__stlxr(v860 - 1, v859));
      if (!v860)
      {
        ((void (*)(std::__shared_weak_count *))v858->__on_zero_shared)(v858);
        std::__shared_weak_count::__release_weak(v858);
        v792 = ++v793;
        v861 = v1525;
        v791 = v1525[1];
        if (v791 <= v793)
          goto LABEL_869;
      }
      else
      {
LABEL_971:
        v792 = ++v793;
        v861 = v1525;
        v791 = v1525[1];
        if (v791 <= v793)
          goto LABEL_869;
      }
      if (((*(_QWORD *)(*v861 + ((v792 >> 3) & 0x1FFFFFF8)) >> v792) & 1) != 0)
      {
        v862 = *(_DWORD *)(*v1527 + 4 * v792);
        if ((v862 & 0x80000000) != 0)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 823, (uint64_t)"frameIDs[i + 1] >= 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1879;
          }
          v862 = *(_DWORD *)(*v1527 + 4 * v792);
          v863 = *(_OWORD *)(v757 + 56);
          v1623 = v863;
          v864 = *((_QWORD *)&v863 + 1);
          if (*((_QWORD *)&v863 + 1))
            goto LABEL_975;
        }
        else
        {
          v863 = *(_OWORD *)(v757 + 56);
          v1623 = v863;
          v864 = *((_QWORD *)&v863 + 1);
          if (*((_QWORD *)&v863 + 1))
          {
LABEL_975:
            v865 = (unint64_t *)(v864 + 8);
            do
              v866 = __ldxr(v865);
            while (__stxr(v866 + 1, v865));
            v867 = v793;
            *(_OWORD *)v1672 = v863;
            do
              v868 = __ldxr(v865);
            while (__stxr(v868 + 1, v865));
LABEL_985:
            v869 = 152;
            v1671[0] = (void *)v795;
            LOBYTE(v1673) = 1;
            v1615 = 0uLL;
            v1647 = 0uLL;
            v870 = *(unint64_t **)(v1531 + 6440);
            v871 = *(unint64_t **)(v1531 + 6448);
            if (v870 == v871)
            {
              v872 = *(unint64_t **)(v1531 + 6440);
            }
            else
            {
              v872 = *(unint64_t **)(v1531 + 6448);
              if (*(v871 - 19) >= v795)
              {
                v873 = 0x86BCA1AF286BCA1BLL * (v871 - v870);
                v874 = *(unint64_t **)(v1531 + 6440);
                do
                {
                  v875 = v873 >> 1;
                  v876 = &v874[19 * (v873 >> 1)];
                  v878 = *v876;
                  v877 = v876 + 19;
                  v873 += ~(v873 >> 1);
                  if (v878 < v795)
                    v874 = v877;
                  else
                    v873 = v875;
                }
                while (v873);
                v869 = 152;
                v872 = *(unint64_t **)(v1531 + 6448);
                if (v874 != v871)
                {
                  v872 = v874;
                  if (*v874 == v795)
                    goto LABEL_1056;
                }
              }
            }
            *(_OWORD *)v1573 = *(_OWORD *)v1671;
            *(_OWORD *)v1574 = v863;
            *v794 = 0;
            v794[1] = 0;
            v879 = 1;
            v1574[16] = 1;
            *(_QWORD *)&v1574[24] = 0;
            *(_QWORD *)&v1574[32] = 0;
            memset(&v1574[104], 0, 17);
            *(_QWORD *)&v1574[88] = 0xBFF0000000000000;
            v1574[96] = 0;
            v880 = *(char **)(v1531 + 5192);
            v881 = *(char **)(v1531 + 5200);
            v882 = v881 - v880;
            if (v881 != v880)
            {
              v883 = v882 >> 4;
              v884 = *(char **)(v1531 + 5192);
              v885 = v882 >> 4;
              do
              {
                v886 = v885 >> 1;
                v887 = (unsigned int *)&v884[16 * (v885 >> 1)];
                v889 = *v887;
                v888 = (char *)(v887 + 4);
                v885 += ~(v885 >> 1);
                if (v889 < v795)
                  v884 = v888;
                else
                  v885 = v886;
              }
              while (v885);
              if (v884 != v881 && *(_DWORD *)v884 == v795)
              {
                v890 = *((_QWORD *)v884 + 1);
                *(_QWORD *)&v1574[24] = v890;
                ++*(_DWORD *)(*((_QWORD *)v884 + 1) + 8);
                do
                {
                  v891 = v883 >> 1;
                  v892 = (unsigned int *)&v880[16 * (v883 >> 1)];
                  v894 = *v892;
                  v893 = (char *)(v892 + 4);
                  v883 += ~(v883 >> 1);
                  if (v894 < v862)
                    v880 = v893;
                  else
                    v883 = v891;
                }
                while (v883);
                if (v880 == v881 || *(_DWORD *)v880 != v862)
                {
                  if (v890)
                    --*(_DWORD *)(v890 + 8);
                }
                else
                {
                  v895 = *((_QWORD *)v880 + 1);
                  *(_QWORD *)&v1574[32] = v895;
                  ++*(_DWORD *)(*((_QWORD *)v880 + 1) + 8);
                  if (*(_BYTE *)(v890 + 20) || *(_BYTE *)(v895 + 20))
                  {
                    *(_QWORD *)object = v795;
                    *(_OWORD *)&object[8] = *(_OWORD *)v1573;
                    *(_OWORD *)&object[24] = v863;
                    *(_QWORD *)v1574 = 0;
                    *(_QWORD *)&v1574[8] = 0;
                    object[40] = 1;
                    *(_OWORD *)&object[48] = *(_OWORD *)&v1574[24];
                    *(_OWORD *)&object[64] = *(_OWORD *)&v1574[40];
                    *(_QWORD *)&object[80] = *(_QWORD *)&v1574[56];
                    *(_OWORD *)&object[104] = *(_OWORD *)&v1574[80];
                    *(_OWORD *)&object[88] = *(_OWORD *)&v1574[64];
                    object[120] = v1574[96];
                    memset(&object[128], 0, 17);
                    *(_QWORD *)&v1574[104] = 0;
                    *(_QWORD *)&v1574[112] = 0;
                    if (v871 == v872 || *v872 != v795)
                    {
                      v896 = (char *)v872 - (char *)v870;
                      v897 = ((char *)v872 - (char *)v870) / 152;
                      *(_QWORD *)&v898 = &v870[19 * v897];
                      if ((unint64_t)v871 >= *v1456)
                      {
                        v1455 = v794;
                        v988 = 1 - 0x79435E50D79435E5 * (v871 - v870);
                        if (v988 > 0x1AF286BCA1AF286)
                          sub_20E867F44();
                        if (0xD79435E50D79436 * ((uint64_t)(*v1456 - (_QWORD)v870) >> 3) > v988)
                          v988 = 0xD79435E50D79436 * ((uint64_t)(*v1456 - (_QWORD)v870) >> 3);
                        if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*v1456 - (_QWORD)v870) >> 3) >= 0xD79435E50D7943)
                          v989 = 0x1AF286BCA1AF286;
                        else
                          v989 = v988;
                        *(_QWORD *)&v1679[2].f64[0] = v1531 + 6456;
                        if (v989)
                        {
                          if (v989 > 0x1AF286BCA1AF286)
                            sub_20E877A38();
                          v990 = (char *)operator new(152 * v989);
                          v897 = ((char *)v872 - (char *)v870) / 152;
                          v896 = (char *)v872 - (char *)v870;
                        }
                        else
                        {
                          v990 = 0;
                        }
                        *(_QWORD *)&v995 = &v990[152 * v897];
                        *(_QWORD *)&v1679[0].f64[0] = v990;
                        v1679[0].f64[1] = v995;
                        v1679[1].f64[0] = v995;
                        *(_QWORD *)&v1679[1].f64[1] = &v990[152 * v989];
                        _ZF = v897 == v989;
                        v794 = v1455;
                        if (_ZF)
                        {
                          if (v896 < 1)
                          {
                            v1507 = v990;
                            if (v870 == v872)
                              v997 = 1;
                            else
                              v997 = 2 * v897;
                            if (v997 > 0x1AF286BCA1AF286)
                              sub_20E877A38();
                            v998 = (char *)operator new(152 * v997);
                            *(_QWORD *)&v995 = &v998[152 * (v997 >> 2)];
                            *(_QWORD *)&v1679[0].f64[0] = v998;
                            v1679[0].f64[1] = v995;
                            *(_QWORD *)&v1679[1].f64[1] = &v998[152 * v997];
                            if (v1507)
                              operator delete(v1507);
                          }
                          else
                          {
                            v996 = v897 + 2;
                            if (v897 >= -1)
                              v996 = v897 + 1;
                            *(_QWORD *)&v995 -= 152 * (v996 >> 1);
                            v1679[0].f64[1] = v995;
                          }
                        }
                        **(_QWORD **)&v995 = v795;
                        *(_OWORD *)(*(_QWORD *)&v995 + 8) = *(_OWORD *)v1573;
                        *(_OWORD *)(*(_QWORD *)&v995 + 24) = *(_OWORD *)&object[24];
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        *(_BYTE *)(*(_QWORD *)&v995 + 40) = object[40];
                        *(_OWORD *)(*(_QWORD *)&v995 + 48) = *(_OWORD *)&object[48];
                        *(_OWORD *)(*(_QWORD *)&v995 + 64) = *(_OWORD *)&object[64];
                        *(_QWORD *)(*(_QWORD *)&v995 + 80) = *(_QWORD *)&object[80];
                        v999 = *(_OWORD *)&object[88];
                        *(_QWORD *)(*(_QWORD *)&v995 + 104) = *(_QWORD *)&object[104];
                        *(_OWORD *)(*(_QWORD *)&v995 + 88) = v999;
                        v1000 = *(_QWORD *)&object[112];
                        *(_BYTE *)(*(_QWORD *)&v995 + 120) = object[120];
                        *(_QWORD *)(*(_QWORD *)&v995 + 112) = v1000;
                        *(_OWORD *)(*(_QWORD *)&v995 + 128) = *(_OWORD *)&object[128];
                        *(_QWORD *)&object[128] = 0;
                        *(_QWORD *)&object[136] = 0;
                        *(_BYTE *)(*(_QWORD *)&v995 + 144) = object[144];
                        v1001 = *(_QWORD *)&v995 + 152;
                        *(_QWORD *)&v1679[1].f64[0] = *(_QWORD *)&v995 + 152;
                        v1002 = *(_QWORD *)(v1531 + 6440);
                        if (v1002 != *(_QWORD *)&v898)
                        {
                          v1003 = 0;
                          do
                          {
                            v1004 = *(_QWORD *)&v995 + v1003;
                            v1005 = *(_QWORD *)&v898 + v1003;
                            *(_QWORD *)(v1004 - 152) = *(_QWORD *)(*(_QWORD *)&v898 + v1003 - 152);
                            *(_OWORD *)(v1004 - 144) = *(_OWORD *)(*(_QWORD *)&v898 + v1003 - 144);
                            *(_OWORD *)(v1004 - 128) = *(_OWORD *)(*(_QWORD *)&v898 + v1003 - 128);
                            v1006 = *(_BYTE *)(*(_QWORD *)&v898 + v1003 - 112);
                            *(_QWORD *)(v1005 - 128) = 0;
                            *(_QWORD *)(v1005 - 120) = 0;
                            *(_BYTE *)(v1004 - 112) = v1006;
                            *(_OWORD *)(v1004 - 104) = *(_OWORD *)(*(_QWORD *)&v898 + v1003 - 104);
                            v1007 = *(_OWORD *)(*(_QWORD *)&v898 + v1003 - 88);
                            *(_QWORD *)(v1004 - 72) = *(_QWORD *)(*(_QWORD *)&v898 + v1003 - 72);
                            *(_OWORD *)(v1004 - 88) = v1007;
                            v1008 = *(_OWORD *)(*(_QWORD *)&v898 + v1003 - 64);
                            *(_QWORD *)(v1004 - 48) = *(_QWORD *)(*(_QWORD *)&v898 + v1003 - 48);
                            *(_OWORD *)(v1004 - 64) = v1008;
                            v1009 = *(_QWORD *)(*(_QWORD *)&v898 + v1003 - 40);
                            *(_BYTE *)(v1004 - 32) = *(_BYTE *)(*(_QWORD *)&v898 + v1003 - 32);
                            *(_QWORD *)(v1004 - 40) = v1009;
                            *(_OWORD *)(v1004 - 24) = *(_OWORD *)(*(_QWORD *)&v898 + v1003 - 24);
                            *(_QWORD *)(v1005 - 24) = 0;
                            *(_QWORD *)(v1005 - 16) = 0;
                            *(_BYTE *)(v1004 - 8) = *(_BYTE *)(*(_QWORD *)&v898 + v1003 - 8);
                            v1003 -= 152;
                          }
                          while (*(_QWORD *)&v898 + v1003 != v1002);
                          *(_QWORD *)&v995 += v1003;
                        }
                        v1010 = *(_QWORD *)(v1531 + 6448);
                        if (v1010 == *(_QWORD *)&v898)
                        {
                          v1014 = (double *)v1531;
                        }
                        else
                        {
                          do
                          {
                            *(_QWORD *)v1001 = **(_QWORD **)&v898;
                            *(_OWORD *)(v1001 + 8) = *(_OWORD *)(*(_QWORD *)&v898 + 8);
                            *(_OWORD *)(v1001 + 24) = *(_OWORD *)(*(_QWORD *)&v898 + 24);
                            *(_QWORD *)(*(_QWORD *)&v898 + 24) = 0;
                            *(_QWORD *)(*(_QWORD *)&v898 + 32) = 0;
                            *(_BYTE *)(v1001 + 40) = *(_BYTE *)(*(_QWORD *)&v898 + 40);
                            *(_OWORD *)(v1001 + 48) = *(_OWORD *)(*(_QWORD *)&v898 + 48);
                            v1011 = *(_OWORD *)(*(_QWORD *)&v898 + 64);
                            *(_QWORD *)(v1001 + 80) = *(_QWORD *)(*(_QWORD *)&v898 + 80);
                            *(_OWORD *)(v1001 + 64) = v1011;
                            v1012 = *(_OWORD *)(*(_QWORD *)&v898 + 88);
                            *(_QWORD *)(v1001 + 104) = *(_QWORD *)(*(_QWORD *)&v898 + 104);
                            *(_OWORD *)(v1001 + 88) = v1012;
                            v1013 = *(_QWORD *)(*(_QWORD *)&v898 + 112);
                            *(_BYTE *)(v1001 + 120) = *(_BYTE *)(*(_QWORD *)&v898 + 120);
                            *(_QWORD *)(v1001 + 112) = v1013;
                            *(_OWORD *)(v1001 + 128) = *(_OWORD *)(*(_QWORD *)&v898 + 128);
                            *(_QWORD *)(*(_QWORD *)&v898 + 128) = 0;
                            *(_QWORD *)(*(_QWORD *)&v898 + 136) = 0;
                            *(_BYTE *)(v1001 + 144) = *(_BYTE *)(*(_QWORD *)&v898 + 144);
                            v1001 += 152;
                            *(_QWORD *)&v898 += 152;
                          }
                          while (*(_QWORD *)&v898 != v1010);
                          v1014 = (double *)v1531;
                          v898 = *(double *)(v1531 + 6448);
                        }
                        v1015 = v1014[805];
                        v1014[805] = v995;
                        *((_QWORD *)v1014 + 806) = v1001;
                        v1016 = v1014[807];
                        v1014[807] = v1679[1].f64[1];
                        v1679[1].f64[1] = v1016;
                        v1679[0].f64[1] = v1015;
                        v1679[0].f64[0] = v1015;
                        if (*(_QWORD *)&v898 != *(_QWORD *)&v1015)
                        {
                          do
                          {
                            *(_QWORD *)&v1679[1].f64[0] = *(_QWORD *)&v898 - 152;
                            v1017 = *(std::__shared_weak_count **)(*(_QWORD *)&v898 - 16);
                            if (v1017)
                            {
                              v1018 = (unint64_t *)&v1017->__shared_owners_;
                              do
                                v1019 = __ldaxr(v1018);
                              while (__stlxr(v1019 - 1, v1018));
                              if (!v1019)
                              {
                                ((void (*)(std::__shared_weak_count *))v1017->__on_zero_shared)(v1017);
                                std::__shared_weak_count::__release_weak(v1017);
                              }
                            }
                            v1020 = *(std::__shared_weak_count **)(*(_QWORD *)&v898 - 120);
                            if (v1020)
                            {
                              v1021 = (unint64_t *)&v1020->__shared_owners_;
                              do
                                v1022 = __ldaxr(v1021);
                              while (__stlxr(v1022 - 1, v1021));
                              if (!v1022)
                              {
                                ((void (*)(std::__shared_weak_count *))v1020->__on_zero_shared)(v1020);
                                std::__shared_weak_count::__release_weak(v1020);
                              }
                            }
                            v898 = v1679[1].f64[0];
                          }
                          while (*(_QWORD *)&v1679[1].f64[0] != *(_QWORD *)&v1015);
                          v898 = v1679[0].f64[0];
                        }
                        if (v898 != 0.0)
                          operator delete(*(void **)&v898);
                      }
                      else if (*(unint64_t **)&v898 == v871)
                      {
                        *v871 = v795;
                        v991 = &v870[19 * v897];
                        *(_OWORD *)(v991 + 1) = *(_OWORD *)&object[8];
                        *(_OWORD *)(v991 + 3) = v863;
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        *((_BYTE *)v991 + 40) = 1;
                        *((_OWORD *)v991 + 3) = *(_OWORD *)&object[48];
                        v992 = *(_OWORD *)&object[64];
                        v991[10] = *(_QWORD *)&object[80];
                        *((_OWORD *)v991 + 4) = v992;
                        v993 = *(_OWORD *)&object[88];
                        v991[13] = *(_QWORD *)&object[104];
                        *(_OWORD *)(v991 + 11) = v993;
                        v994 = *(_QWORD *)&object[112];
                        *((_BYTE *)v991 + 120) = object[120];
                        v991[14] = v994;
                        v991[16] = 0;
                        v991[17] = 0;
                        *(_QWORD *)&object[128] = 0;
                        *(_QWORD *)&object[136] = 0;
                        *((_BYTE *)v991 + 144) = 0;
                        *(_QWORD *)(v1531 + 6448) = v871 + 19;
                      }
                      else
                      {
                        v1506 = ((char *)v872 - (char *)v870) / 152;
                        v1485 = v863;
                        v1655 = *(_OWORD *)v1573;
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        v1459 = *(_OWORD *)&object[48];
                        v1679[0] = *(float64x2_t *)&v1574[40];
                        v1679[1].f64[0] = *(float64_t *)&v1574[56];
                        v1663 = *(_OWORD *)&v1574[64];
                        *(_QWORD *)&v1664 = *(_QWORD *)&v1574[80];
                        BYTE8(v1607) = v1574[96];
                        *(_QWORD *)&v1607 = *(_QWORD *)&v1574[88];
                        v899 = (uint64_t)(v871 - 19);
                        v900 = v871;
                        v901 = v871 - 19;
                        *(_QWORD *)&object[128] = 0;
                        *(_QWORD *)&object[136] = 0;
                        if ((unint64_t)v871 >= 0x98)
                        {
                          do
                          {
                            *v900 = *v901;
                            *(_OWORD *)(v900 + 1) = *(_OWORD *)(v901 + 1);
                            *(_OWORD *)(v900 + 3) = *(_OWORD *)(v901 + 3);
                            v901[3] = 0;
                            v901[4] = 0;
                            *((_BYTE *)v900 + 40) = *((_BYTE *)v901 + 40);
                            *((_OWORD *)v900 + 3) = *((_OWORD *)v901 + 3);
                            v902 = *((_OWORD *)v901 + 4);
                            v900[10] = v901[10];
                            *((_OWORD *)v900 + 4) = v902;
                            v903 = *(_OWORD *)(v901 + 11);
                            v900[13] = v901[13];
                            *(_OWORD *)(v900 + 11) = v903;
                            v904 = v901[14];
                            *((_BYTE *)v900 + 120) = *((_BYTE *)v901 + 120);
                            v900[14] = v904;
                            *((_OWORD *)v900 + 8) = *((_OWORD *)v901 + 8);
                            v901[16] = 0;
                            v901[17] = 0;
                            *((_BYTE *)v900 + 144) = *((_BYTE *)v901 + 144);
                            v900 += 19;
                            v901 += 19;
                          }
                          while (v901 < v871);
                        }
                        *(_QWORD *)(v1531 + 6448) = v900;
                        if (v871 != (unint64_t *)(*(_QWORD *)&v898 + 152))
                        {
                          v905 = ((uint64_t)v871 - *(_QWORD *)&v898 - 152) >> 3;
                          do
                          {
                            v899 = sub_20F91ED74(v899, (uint64_t)&v870[19 * v1506 - 19 + v905]) - 152;
                            v905 -= 19;
                          }
                          while (v905 * 8);
                        }
                        **(_QWORD **)&v898 = v795;
                        v906 = ((char *)v872 - (char *)v870) / 152;
                        v907 = &v870[19 * v1506];
                        *(_OWORD *)(v907 + 1) = v1655;
                        v908 = (std::__shared_weak_count *)v907[4];
                        *(_OWORD *)(v907 + 3) = v1485;
                        if (v908)
                        {
                          v909 = (unint64_t *)&v908->__shared_owners_;
                          do
                            v910 = __ldaxr(v909);
                          while (__stlxr(v910 - 1, v909));
                          if (!v910)
                          {
                            ((void (*)(std::__shared_weak_count *, uint64_t))v908->__on_zero_shared)(v908, v869);
                            std::__shared_weak_count::__release_weak(v908);
                            v906 = ((char *)v872 - (char *)v870) / 152;
                          }
                        }
                        v911 = &v870[19 * v906];
                        *((_BYTE *)v911 + 40) = 1;
                        *((_OWORD *)v911 + 3) = v1459;
                        *((float64x2_t *)v911 + 4) = v1679[0];
                        v911[10] = *(_QWORD *)&v1679[1].f64[0];
                        *(_OWORD *)(v911 + 11) = v1663;
                        v912 = v1607;
                        v911[13] = v1664;
                        v911[14] = v912;
                        *((_BYTE *)v911 + 120) = BYTE8(v1607);
                        v913 = (std::__shared_weak_count *)v911[17];
                        v911[16] = 0;
                        v911[17] = 0;
                        if (v913)
                        {
                          v914 = (unint64_t *)&v913->__shared_owners_;
                          do
                            v915 = __ldaxr(v914);
                          while (__stlxr(v915 - 1, v914));
                          if (!v915)
                          {
                            ((void (*)(std::__shared_weak_count *, uint64_t))v913->__on_zero_shared)(v913, v869);
                            std::__shared_weak_count::__release_weak(v913);
                            v906 = ((char *)v872 - (char *)v870) / 152;
                          }
                        }
                        LOBYTE(v870[19 * v906 + 18]) = 0;
                      }
                      v1023 = *(std::__shared_weak_count **)&object[136];
                      if (*(_QWORD *)&object[136])
                      {
                        v1024 = (unint64_t *)(*(_QWORD *)&object[136] + 8);
                        do
                          v1025 = __ldaxr(v1024);
                        while (__stlxr(v1025 - 1, v1024));
                        if (!v1025)
                        {
                          ((void (*)(std::__shared_weak_count *, uint64_t))v1023->__on_zero_shared)(v1023, v869);
                          std::__shared_weak_count::__release_weak(v1023);
                        }
                      }
                    }
                    v1026 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v1027 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v1028 = __ldaxr(v1027);
                      while (__stlxr(v1028 - 1, v1027));
                      if (!v1028)
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v1026->__on_zero_shared)(v1026, v869);
                        std::__shared_weak_count::__release_weak(v1026);
                      }
                    }
                    *(_BYTE *)(v1531 + 6802) = 0;
                    *v1526 = 0;
                    *(int64x2_t *)(v1531 + 6784) = vaddq_s64(*(int64x2_t *)(v1531 + 6784), (int64x2_t)xmmword_2103B84D0);
                    v1029 = *(std::__shared_weak_count **)&v1574[112];
                    if (*(_QWORD *)&v1574[112])
                    {
                      v1030 = (unint64_t *)(*(_QWORD *)&v1574[112] + 8);
                      do
                        v1031 = __ldaxr(v1030);
                      while (__stlxr(v1031 - 1, v1030));
                      if (!v1031)
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v1029->__on_zero_shared)(v1029, v869);
                        std::__shared_weak_count::__release_weak(v1029);
                      }
                    }
                    v879 = 0;
                    v920 = *(std::__shared_weak_count **)&v1574[8];
                    if (!*(_QWORD *)&v1574[8])
                    {
LABEL_1050:
                      v923 = (std::__shared_weak_count *)*((_QWORD *)&v1647 + 1);
                      if (!*((_QWORD *)&v1647 + 1))
                        goto LABEL_1054;
                      v924 = (unint64_t *)(*((_QWORD *)&v1647 + 1) + 8);
                      do
                        v925 = __ldaxr(v924);
                      while (__stlxr(v925 - 1, v924));
                      if (!v925)
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v923->__on_zero_shared)(v923, v869);
                        std::__shared_weak_count::__release_weak(v923);
                        if ((v879 & 1) != 0)
                        {
LABEL_1056:
                          v926 = (std::__shared_weak_count *)*((_QWORD *)&v1615 + 1);
                          v793 = v867;
                          if (*((_QWORD *)&v1615 + 1))
                          {
                            v927 = (unint64_t *)(*((_QWORD *)&v1615 + 1) + 8);
                            do
                              v928 = __ldaxr(v927);
                            while (__stlxr(v928 - 1, v927));
                            if (!v928)
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t))v926->__on_zero_shared)(v926, v869);
                              std::__shared_weak_count::__release_weak(v926);
                            }
                          }
                          v929 = (std::__shared_weak_count *)v1672[1];
                          if (v1672[1])
                          {
                            v930 = (unint64_t *)((char *)v1672[1] + 8);
                            do
                              v931 = __ldaxr(v930);
                            while (__stlxr(v931 - 1, v930));
                            if (!v931)
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t))v929->__on_zero_shared)(v929, v869);
                              std::__shared_weak_count::__release_weak(v929);
                            }
                          }
                          v932 = (std::__shared_weak_count *)*((_QWORD *)&v1623 + 1);
                          if (*((_QWORD *)&v1623 + 1))
                          {
                            v933 = (unint64_t *)(*((_QWORD *)&v1623 + 1) + 8);
                            do
                              v934 = __ldaxr(v933);
                            while (__stlxr(v934 - 1, v933));
                            if (!v934)
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t))v932->__on_zero_shared)(v932, v869);
                              std::__shared_weak_count::__release_weak(v932);
                            }
                          }
                          v791 = v1525[1];
                          goto LABEL_869;
                        }
                      }
                      else
                      {
LABEL_1054:
                        if ((v879 & 1) != 0)
                          goto LABEL_1056;
                      }
                      *(_BYTE *)(v1531 + 7868) = 0;
                      *v1516 = 0;
                      goto LABEL_1056;
                    }
LABEL_1046:
                    v921 = (unint64_t *)&v920->__shared_owners_;
                    do
                      v922 = __ldaxr(v921);
                    while (__stlxr(v922 - 1, v921));
                    if (!v922)
                    {
                      ((void (*)(std::__shared_weak_count *, uint64_t))v920->__on_zero_shared)(v920, v869);
                      std::__shared_weak_count::__release_weak(v920);
                    }
                    goto LABEL_1050;
                  }
                  --*(_DWORD *)(v890 + 8);
                  --*(_DWORD *)(v895 + 8);
                  *(_QWORD *)&v1574[32] = 0;
                  *(_QWORD *)&v1574[24] = 0;
                }
              }
              v879 = 1;
            }
            v920 = *(std::__shared_weak_count **)&v1574[8];
            if (!*(_QWORD *)&v1574[8])
              goto LABEL_1050;
            goto LABEL_1046;
          }
        }
        v867 = v793;
        v1672[0] = (void *)v863;
        v1672[1] = 0;
        goto LABEL_985;
      }
LABEL_869:
      if (v791 <= v792)
        goto LABEL_1394;
    }
    v796 = *(int8x8_t *)(v757 + 8);
    if (!*(_QWORD *)&v796)
      goto LABEL_895;
LABEL_876:
    v797 = (uint8x8_t)vcnt_s8(v796);
    v797.i16[0] = vaddlv_u8(v797);
    if (v797.u32[0] > 1uLL)
    {
      v798 = v795;
      if (*(_QWORD *)&v796 <= v795)
        v798 = v795 % *(_QWORD *)&v796;
    }
    else
    {
      v798 = (v796.i32[0] - 1) & v795;
    }
    v799 = *(_QWORD **)(*(_QWORD *)v757 + 8 * v798);
    if (v799)
    {
      v800 = (_QWORD *)*v799;
      if (v800)
      {
        if (v797.u32[0] < 2uLL)
        {
          v801 = *(_QWORD *)&v796 - 1;
          while (1)
          {
            v803 = v800[1];
            if (v803 == v795)
            {
              if (v800[2] == v795)
                goto LABEL_896;
            }
            else if ((v803 & v801) != v798)
            {
              goto LABEL_895;
            }
            v800 = (_QWORD *)*v800;
            if (!v800)
              goto LABEL_895;
          }
        }
        while (1)
        {
          v802 = v800[1];
          if (v802 == v795)
          {
            if (v800[2] == v795)
              goto LABEL_896;
          }
          else
          {
            if (v802 >= *(_QWORD *)&v796)
              v802 %= *(_QWORD *)&v796;
            if (v802 != v798)
              goto LABEL_895;
          }
          v800 = (_QWORD *)*v800;
          if (!v800)
            goto LABEL_895;
        }
      }
    }
    goto LABEL_895;
  }
LABEL_1394:
  sub_20FC14CB4(v1531);
  v1137 = *(_QWORD *)(v1530 + 8216);
  v1138 = *(unsigned __int8 *)(v1137 + 1720);
  v1139 = v1137 + 864;
  if (!*(_BYTE *)(v1137 + 1720))
    v1139 = v1137 + 24;
  if (*(_BYTE *)(v1139 + 428))
  {
    v1140 = *(uint64_t **)(v1530 + 7712);
    if (!v1140)
      goto LABEL_1474;
    while (!*((_BYTE *)v1140 + 20))
    {
      v1140 = (uint64_t *)*v1140;
      if (!v1140)
        goto LABEL_1474;
    }
  }
  if (*(_BYTE *)(v1139 + 426))
  {
    *(_OWORD *)v1574 = 0u;
    *(_OWORD *)v1573 = 0u;
    *(_DWORD *)&v1574[16] = 1065353216;
    v1141 = (__int128 **)a9[5];
    for (m = (__int128 **)a9[6]; v1141 != m; v1141 += 2)
    {
      v1143 = *v1141;
      v1144 = **v1141;
      *(_QWORD *)&object[16] = *((_QWORD *)*v1141 + 2);
      *(_OWORD *)object = v1144;
      *(_OWORD *)&object[24] = *(__int128 *)((char *)v1143 + 24);
      sub_20F61A180((uint64_t)v1573, (uint64_t *)object, (uint64_t)object);
    }
    v1145 = *(int **)(v1531 + 5864);
    for (n = *(int **)(v1531 + 5872); v1145 != n; v1145 += 4)
    {
      v1147 = *((_QWORD *)v1145 + 1);
      if (*(_BYTE *)(v1147 + 20))
      {
        v1148 = *v1145;
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 1065353216;
        v1149 = *(uint64_t **)v1574;
        if (*(_QWORD *)v1574)
        {
          do
          {
            if (*((_DWORD *)v1149 + 8) == v1148)
              sub_20F619C7C((uint64_t)object, v1149 + 2, (uint64_t)(v1149 + 2));
            v1149 = (uint64_t *)*v1149;
          }
          while (v1149);
        }
        if (*(_QWORD *)(v1147 + 88) != *(_QWORD *)(v1147 + 80)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 717, (uint64_t)"id_variable.second.variable.NumRegisteredTracks() == 0", 54, (uint64_t)"We should have zero tracks", 26, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (*(_QWORD *)(v1147 + 128))
        {
          v1150 = *(_QWORD **)(v1147 + 120);
          if (v1150)
          {
            do
            {
              v1151 = (_QWORD *)*v1150;
              operator delete(v1150);
              v1150 = v1151;
            }
            while (v1151);
          }
          *(_QWORD *)(v1147 + 120) = 0;
          v1152 = *(_QWORD *)(v1147 + 112);
          if (v1152)
          {
            for (ii = 0; ii != v1152; ++ii)
              *(_QWORD *)(*(_QWORD *)(v1147 + 104) + 8 * ii) = 0;
          }
          *(_QWORD *)(v1147 + 128) = 0;
        }
        v1154 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        v1155 = *(void **)(v1147 + 104);
        *(_QWORD *)(v1147 + 104) = v1154;
        if (v1155)
          operator delete(v1155);
        v1156 = *(_QWORD *)&object[8];
        v1157 = *(_QWORD *)&object[16];
        *(_QWORD *)(v1147 + 120) = *(_QWORD *)&object[16];
        *(_QWORD *)(v1147 + 112) = v1156;
        *(_QWORD *)&object[8] = 0;
        v1158 = *(_QWORD *)&object[24];
        *(_QWORD *)(v1147 + 128) = *(_QWORD *)&object[24];
        *(_DWORD *)(v1147 + 136) = *(_DWORD *)&object[32];
        if (v1158)
        {
          v1159 = *(_QWORD *)(v1157 + 8);
          if ((v1156 & (v1156 - 1)) != 0)
          {
            if (v1159 >= v1156)
              v1159 %= v1156;
          }
          else
          {
            v1159 &= v1156 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v1147 + 104) + 8 * v1159) = v1147 + 120;
          *(_QWORD *)&object[16] = 0;
          *(_QWORD *)&object[24] = 0;
        }
        v1160 = v1147 + 16;
        sub_20F6169C8(v1160);
        sub_20F616F2C(v1160);
        v1161 = *(_QWORD **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          do
          {
            v1162 = (_QWORD *)*v1161;
            operator delete(v1161);
            v1161 = v1162;
          }
          while (v1162);
        }
        v1163 = *(void **)object;
        *(_QWORD *)object = 0;
        if (v1163)
          operator delete(v1163);
      }
    }
    v1164 = *(_QWORD **)v1574;
    if (*(_QWORD *)v1574)
    {
      do
      {
        v1165 = (_QWORD *)*v1164;
        operator delete(v1164);
        v1164 = v1165;
      }
      while (v1165);
    }
    v1166 = v1573[0];
    v1573[0] = 0;
    if (v1166)
      operator delete(v1166);
    v1167 = *(int **)(v1531 + 5864);
    v1168 = *(int **)(v1531 + 5872);
    if (v1167 != v1168)
    {
      while (1)
      {
        v1173 = *((_QWORD *)v1167 + 1);
        if (!*(_BYTE *)(v1173 + 20))
          goto LABEL_1442;
        v1174 = *v1167;
        v1175 = *(uint64_t **)(v1531 + 24);
        v1176 = *(uint64_t **)(v1531 + 32);
        memset(object, 0, 24);
        v1177 = (char *)v1176 - (char *)v1175;
        if (v1176 != v1175)
          break;
        v1169 = 0;
        v1170 = 0;
        v1172 = (_QWORD *)(v1173 + 80);
        v1171 = *(void **)(v1173 + 80);
        if (v1171)
          goto LABEL_1440;
LABEL_1441:
        *(_QWORD *)(v1173 + 80) = v1169;
        *(_QWORD *)(v1173 + 88) = v1170;
        *(_QWORD *)(v1173 + 96) = *(_QWORD *)&object[16];
        sub_20F616F2C(v1173 + 16);
LABEL_1442:
        v1167 += 4;
        if (v1167 == v1168)
          goto LABEL_1473;
      }
      if ((unint64_t)v1177 > 0x5555555555555550)
        sub_20E867F44();
      v1178 = v1177 >> 3;
      v1179 = 24 * (v1177 >> 3);
      v1169 = (char *)operator new(v1179);
      *(_QWORD *)object = v1169;
      *(_QWORD *)&object[16] = &v1169[24 * v1178];
      v1180 = 24 * ((v1179 - 24) / 0x18) + 24;
      bzero(v1169, v1180);
      *(_QWORD *)&object[8] = &v1169[v1180];
      v1170 = v1169;
      do
      {
        v1182 = *v1175;
        if (*(_BYTE *)(*v1175 + 488) && *(_DWORD *)(v1182 + 88) == v1174)
        {
          v1183 = *(_QWORD *)(v1182 + 496);
          v1184 = *(_QWORD *)(v1182 + 504);
          v1185 = *(_QWORD *)(v1182 + 72);
          v1186 = *(_DWORD *)(v1182 + 80);
          if (v1184 != v1183)
          {
            v1187 = (v1184 - v1183) >> 6;
            while (1)
            {
              v1188 = v1187 >> 1;
              v1189 = v1183 + (v1187 >> 1 << 6);
              v1190 = *(_DWORD *)(v1189 + 16);
              _CF = v1190 >= v1174;
              if (v1190 != v1174)
                goto LABEL_1460;
              if (*(_QWORD *)v1189 >= v1185)
                break;
LABEL_1454:
              v1183 = v1189 + 64;
              v1188 = v1187 + ~v1188;
LABEL_1455:
              v1187 = v1188;
              if (!v1188)
                goto LABEL_1463;
            }
            if (*(_QWORD *)v1189 != v1185)
              goto LABEL_1455;
            _CF = *(_DWORD *)(v1189 + 8) >= v1186;
LABEL_1460:
            if (_CF)
              goto LABEL_1455;
            goto LABEL_1454;
          }
LABEL_1463:
          if (v1183 != v1184 && *(_DWORD *)(v1183 + 16) == v1174 && *(_QWORD *)v1183 == v1185)
          {
            v1192 = *(_DWORD *)(v1183 + 8);
            v1181 = v1183 + 24;
            if (v1192 != v1186)
              v1181 = 0;
          }
          else
          {
            v1181 = 0;
          }
          *(_DWORD *)v1170 = *(_QWORD *)(v1182 + 32);
          *((_QWORD *)v1170 + 1) = v1181;
          *((_QWORD *)v1170 + 2) = v1182 + 40;
          v1170 += 24;
        }
        ++v1175;
      }
      while (v1175 != v1176);
      if (v1170 != *(char **)&object[8])
        *(_QWORD *)&object[8] = v1170;
      v1172 = (_QWORD *)(v1173 + 80);
      v1171 = *(void **)(v1173 + 80);
      if (!v1171)
        goto LABEL_1441;
LABEL_1440:
      *(_QWORD *)(v1173 + 88) = v1171;
      operator delete(v1171);
      *v1172 = 0;
      v1172[1] = 0;
      v1172[2] = 0;
      goto LABEL_1441;
    }
LABEL_1473:
    v1137 = *(_QWORD *)(v1530 + 8216);
    v1138 = *(unsigned __int8 *)(v1137 + 1720);
  }
LABEL_1474:
  v1193 = v1137 + 864;
  if (!v1138)
    v1193 = v1137 + 24;
  if (*(_BYTE *)(v1193 + 432) && *(_BYTE *)(v1530 + 7686) || *(_BYTE *)(v1193 + 433))
  {
    v1194 = *(int **)(v1531 + 5960);
    v1195 = *(int **)(v1531 + 5968);
    if (v1194 != v1195)
    {
      v1196 = (char *)v1195 - (char *)v1194 - 16;
      v1197 = *(int **)(v1531 + 5960);
      if (v1196 < 0x10)
        goto LABEL_1929;
      v1198 = (v1196 >> 4) + 1;
      v1197 = &v1194[4 * (v1198 & 0x1FFFFFFFFFFFFFFELL)];
      v1199 = (uint64_t *)(v1194 + 6);
      v1200 = v1198 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v1201 = *(v1199 - 2);
        v1202 = *v1199;
        v1199 += 4;
        *(_BYTE *)(v1201 + 20) = 1;
        *(_BYTE *)(v1202 + 20) = 1;
        v1200 -= 2;
      }
      while (v1200);
      if (v1198 != (v1198 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_1929:
        do
        {
          *(_BYTE *)(*((_QWORD *)v1197 + 1) + 20) = 1;
          v1197 += 4;
        }
        while (v1197 != v1195);
      }
    }
    *(_OWORD *)v1574 = 0u;
    *(_OWORD *)v1573 = 0u;
    *(_DWORD *)&v1574[16] = 1065353216;
    v1203 = (__int128 **)a9[5];
    v1204 = (__int128 **)a9[6];
    if (v1203 != v1204)
    {
      do
      {
        v1205 = *v1203;
        v1206 = **v1203;
        *(_QWORD *)&object[16] = *((_QWORD *)*v1203 + 2);
        *(_OWORD *)object = v1206;
        *(_OWORD *)&object[24] = *(__int128 *)((char *)v1205 + 24);
        sub_20F61A180((uint64_t)v1573, (uint64_t *)object, (uint64_t)object);
        v1203 += 2;
      }
      while (v1203 != v1204);
      v1194 = *(int **)(v1531 + 5960);
      v1195 = *(int **)(v1531 + 5968);
    }
    for (; v1194 != v1195; v1194 += 4)
    {
      v1207 = *((_QWORD *)v1194 + 1);
      if (*(_BYTE *)(v1207 + 20))
      {
        v1208 = *v1194;
        v1209.n128_u32[1] = 0;
        v1209.n128_u64[1] = 0;
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 1065353216;
        v1210 = *(uint64_t **)v1574;
        if (*(_QWORD *)v1574)
        {
          do
          {
            if (*((_DWORD *)v1210 + 8) == v1208)
              sub_20F619C7C((uint64_t)object, v1210 + 2, (uint64_t)(v1210 + 2));
            v1210 = (uint64_t *)*v1210;
          }
          while (v1210);
        }
        if (*(_QWORD *)(v1207 + 264) != *(_QWORD *)(v1207 + 256)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 717, (uint64_t)"id_variable.second.variable.NumRegisteredTracks() == 0", 54, (uint64_t)"We should have zero tracks", 26, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (*(_QWORD *)(v1207 + 304))
        {
          v1211 = *(_QWORD **)(v1207 + 296);
          if (v1211)
          {
            do
            {
              v1212 = (_QWORD *)*v1211;
              operator delete(v1211);
              v1211 = v1212;
            }
            while (v1212);
          }
          *(_QWORD *)(v1207 + 296) = 0;
          v1213 = *(_QWORD *)(v1207 + 288);
          if (v1213)
          {
            for (jj = 0; jj != v1213; ++jj)
              *(_QWORD *)(*(_QWORD *)(v1207 + 280) + 8 * jj) = 0;
          }
          *(_QWORD *)(v1207 + 304) = 0;
        }
        v1215 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        v1216 = *(void **)(v1207 + 280);
        *(_QWORD *)(v1207 + 280) = v1215;
        if (v1216)
          operator delete(v1216);
        v1217 = *(_QWORD *)&object[8];
        v1218 = *(uint64_t ***)&object[16];
        *(_QWORD *)&object[8] = 0;
        v1219 = *(_QWORD *)&object[24];
        *(_QWORD *)(v1207 + 296) = *(_QWORD *)&object[16];
        *(_QWORD *)(v1207 + 304) = v1219;
        v1209.n128_u32[0] = *(_DWORD *)&object[32];
        *(_DWORD *)(v1207 + 312) = *(_DWORD *)&object[32];
        *(_QWORD *)(v1207 + 288) = v1217;
        if (v1219)
        {
          v1220 = (unint64_t)v1218[1];
          if ((v1217 & (v1217 - 1)) != 0)
          {
            if (v1220 >= v1217)
              v1220 %= v1217;
          }
          else
          {
            v1220 &= v1217 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v1207 + 280) + 8 * v1220) = v1207 + 296;
          *(_QWORD *)&object[16] = 0;
          *(_QWORD *)&object[24] = 0;
          v1218 = *(uint64_t ***)(v1207 + 296);
        }
        for (; v1218; v1218 = (uint64_t **)*v1218)
          v1209.n128_f64[0] = sub_20F6182A0((char *)v1218[5], (float64x2_t *)(v1207 + 32), v1209);
        sub_20F6178A8(v1207 + 16);
        v1221 = *(_QWORD **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          do
          {
            v1222 = (_QWORD *)*v1221;
            operator delete(v1221);
            v1221 = v1222;
          }
          while (v1222);
        }
        v1223 = *(void **)object;
        *(_QWORD *)object = 0;
        if (v1223)
          operator delete(v1223);
      }
    }
    v1224 = *(_QWORD **)v1574;
    if (*(_QWORD *)v1574)
    {
      do
      {
        v1225 = (_QWORD *)*v1224;
        operator delete(v1224);
        v1224 = v1225;
      }
      while (v1225);
    }
    v1226 = v1573[0];
    v1573[0] = 0;
    if (v1226)
      operator delete(v1226);
    v1227 = *(int **)(v1531 + 5960);
    v1228 = *(int **)(v1531 + 5968);
    if (v1227 != v1228)
    {
      while (1)
      {
        v1229 = *((_QWORD *)v1227 + 1);
        if (!*(_BYTE *)(v1229 + 20))
          goto LABEL_1526;
        v1230 = *v1227;
        v1231 = *(uint64_t **)(v1531 + 24);
        v1232 = *(uint64_t **)(v1531 + 32);
        memset(object, 0, 24);
        v1233 = (char *)v1232 - (char *)v1231;
        if (v1232 != v1231)
          break;
        v1236 = 0;
        v1238 = 0;
        v1251 = *(void **)(v1229 + 256);
        if (v1251)
          goto LABEL_1558;
LABEL_1525:
        *(_QWORD *)(v1229 + 256) = v1236;
        *(_QWORD *)(v1229 + 264) = v1238;
        *(_QWORD *)(v1229 + 272) = *(_QWORD *)&object[16];
        sub_20F6178A8(v1229 + 16);
LABEL_1526:
        v1227 += 4;
        if (v1227 == v1228)
          goto LABEL_1559;
      }
      if ((unint64_t)v1233 > 0x5555555555555550)
        sub_20E867F44();
      v1234 = v1233 >> 3;
      v1235 = 24 * (v1233 >> 3);
      v1236 = (char *)operator new(v1235);
      *(_QWORD *)object = v1236;
      *(_QWORD *)&object[16] = &v1236[24 * v1234];
      v1237 = 24 * ((v1235 - 24) / 0x18) + 24;
      bzero(v1236, v1237);
      *(_QWORD *)&object[8] = &v1236[v1237];
      v1238 = v1236;
      do
      {
        v1240 = *v1231;
        if (*(_BYTE *)(*v1231 + 488) && *(_DWORD *)(v1240 + 88) == v1230)
        {
          v1241 = *(_QWORD *)(v1240 + 496);
          v1242 = *(_QWORD *)(v1240 + 504);
          v1243 = *(_QWORD *)(v1240 + 72);
          v1244 = *(_DWORD *)(v1240 + 80);
          if (v1242 != v1241)
          {
            v1245 = (v1242 - v1241) >> 6;
            while (1)
            {
              v1246 = v1245 >> 1;
              v1247 = v1241 + (v1245 >> 1 << 6);
              v1248 = *(_DWORD *)(v1247 + 16);
              v1249 = v1248 >= v1230;
              if (v1248 != v1230)
                goto LABEL_1544;
              if (*(_QWORD *)v1247 >= v1243)
                break;
LABEL_1538:
              v1241 = v1247 + 64;
              v1246 = v1245 + ~v1246;
LABEL_1539:
              v1245 = v1246;
              if (!v1246)
                goto LABEL_1547;
            }
            if (*(_QWORD *)v1247 != v1243)
              goto LABEL_1539;
            v1249 = *(_DWORD *)(v1247 + 8) >= v1244;
LABEL_1544:
            if (v1249)
              goto LABEL_1539;
            goto LABEL_1538;
          }
LABEL_1547:
          if (v1241 != v1242 && *(_DWORD *)(v1241 + 16) == v1230 && *(_QWORD *)v1241 == v1243)
          {
            v1250 = *(_DWORD *)(v1241 + 8);
            v1239 = v1241 + 24;
            if (v1250 != v1244)
              v1239 = 0;
          }
          else
          {
            v1239 = 0;
          }
          *(_DWORD *)v1238 = *(_QWORD *)(v1240 + 32);
          *((_QWORD *)v1238 + 1) = v1239;
          *((_QWORD *)v1238 + 2) = v1240 + 40;
          v1238 += 24;
        }
        ++v1231;
      }
      while (v1231 != v1232);
      if (v1238 != *(char **)&object[8])
        *(_QWORD *)&object[8] = v1238;
      v1251 = *(void **)(v1229 + 256);
      if (!v1251)
        goto LABEL_1525;
LABEL_1558:
      *(_QWORD *)(v1229 + 264) = v1251;
      operator delete(v1251);
      *(_QWORD *)(v1229 + 256) = 0;
      *(_QWORD *)(v1229 + 264) = 0;
      *(_QWORD *)(v1229 + 272) = 0;
      goto LABEL_1525;
    }
LABEL_1559:
    v1137 = *(_QWORD *)(v1530 + 8216);
    v1138 = *(unsigned __int8 *)(v1137 + 1720);
  }
  v1252 = v1137 + 864;
  v1253 = v1137 + 24;
  if (v1138)
    v1253 = v1252;
  if (*(_BYTE *)(v1253 + 434))
  {
    v1254 = *(int **)(v1531 + 6056);
    v1255 = *(int **)(v1531 + 6064);
    if (v1254 != v1255)
    {
      v1256 = (char *)v1255 - (char *)v1254 - 16;
      v1257 = *(int **)(v1531 + 6056);
      if (v1256 < 0x10)
        goto LABEL_1930;
      v1258 = (v1256 >> 4) + 1;
      v1257 = &v1254[4 * (v1258 & 0x1FFFFFFFFFFFFFFELL)];
      v1259 = (uint64_t *)(v1254 + 6);
      v1260 = v1258 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v1261 = *(v1259 - 2);
        v1262 = *v1259;
        v1259 += 4;
        *(_BYTE *)(v1261 + 20) = 1;
        *(_BYTE *)(v1262 + 20) = 1;
        v1260 -= 2;
      }
      while (v1260);
      if (v1258 != (v1258 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_1930:
        do
        {
          *(_BYTE *)(*((_QWORD *)v1257 + 1) + 20) = 1;
          v1257 += 4;
        }
        while (v1257 != v1255);
      }
    }
    *(_OWORD *)v1574 = 0u;
    *(_OWORD *)v1573 = 0u;
    *(_DWORD *)&v1574[16] = 1065353216;
    v1263 = (__int128 **)a9[5];
    v1264 = (__int128 **)a9[6];
    if (v1263 != v1264)
    {
      do
      {
        v1265 = *v1263;
        v1266 = **v1263;
        *(_QWORD *)&object[16] = *((_QWORD *)*v1263 + 2);
        *(_OWORD *)object = v1266;
        *(_OWORD *)&object[24] = *(__int128 *)((char *)v1265 + 24);
        sub_20F61A180((uint64_t)v1573, (uint64_t *)object, (uint64_t)object);
        v1263 += 2;
      }
      while (v1263 != v1264);
      v1254 = *(int **)(v1531 + 6056);
      v1255 = *(int **)(v1531 + 6064);
    }
    for (; v1254 != v1255; v1254 += 4)
    {
      v1267 = *((_QWORD *)v1254 + 1);
      if (*(_BYTE *)(v1267 + 20))
      {
        v1268 = *v1254;
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 1065353216;
        v1269 = *(uint64_t **)v1574;
        if (*(_QWORD *)v1574)
        {
          do
          {
            if (*((_DWORD *)v1269 + 8) == v1268)
              sub_20F619C7C((uint64_t)object, v1269 + 2, (uint64_t)(v1269 + 2));
            v1269 = (uint64_t *)*v1269;
          }
          while (v1269);
        }
        if (*(_QWORD *)(v1267 + 112) != *(_QWORD *)(v1267 + 104)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 717, (uint64_t)"id_variable.second.variable.NumRegisteredTracks() == 0", 54, (uint64_t)"We should have zero tracks", 26, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        sub_20EB0F04C(v1267 + 128, (uint64_t *)object);
        sub_20F811C04(v1267 + 16);
        v1270 = *(_QWORD **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          do
          {
            v1271 = (_QWORD *)*v1270;
            operator delete(v1270);
            v1270 = v1271;
          }
          while (v1271);
        }
        v1272 = *(void **)object;
        *(_QWORD *)object = 0;
        if (v1272)
          operator delete(v1272);
      }
    }
    v1273 = *(_QWORD **)v1574;
    if (*(_QWORD *)v1574)
    {
      do
      {
        v1274 = (_QWORD *)*v1273;
        operator delete(v1273);
        v1273 = v1274;
      }
      while (v1274);
    }
    v1275 = v1573[0];
    v1573[0] = 0;
    if (v1275)
      operator delete(v1275);
    v1276 = *(int **)(v1531 + 6056);
    v1277 = *(int **)(v1531 + 6064);
    if (v1276 != v1277)
    {
      while (1)
      {
        v1282 = *((_QWORD *)v1276 + 1);
        if (!*(_BYTE *)(v1282 + 20))
          goto LABEL_1595;
        v1283 = *v1276;
        v1284 = *(uint64_t **)(v1531 + 24);
        v1285 = *(uint64_t **)(v1531 + 32);
        memset(object, 0, 24);
        v1286 = (char *)v1285 - (char *)v1284;
        if (v1285 != v1284)
          break;
        v1278 = 0;
        v1279 = 0;
        v1281 = (_QWORD *)(v1282 + 104);
        v1280 = *(void **)(v1282 + 104);
        if (v1280)
          goto LABEL_1593;
LABEL_1594:
        *(_QWORD *)(v1282 + 104) = v1279;
        *(_QWORD *)(v1282 + 112) = v1278;
        *(_QWORD *)(v1282 + 120) = *(_QWORD *)&object[16];
        sub_20F811E38(v1282 + 16);
LABEL_1595:
        v1276 += 4;
        if (v1276 == v1277)
          goto LABEL_1626;
      }
      if ((unint64_t)v1286 > 0x5555555555555550)
        sub_20E867F44();
      v1287 = v1286 >> 3;
      v1288 = 24 * (v1286 >> 3);
      v1279 = (char *)operator new(v1288);
      *(_QWORD *)object = v1279;
      *(_QWORD *)&object[16] = &v1279[24 * v1287];
      v1289 = 24 * ((v1288 - 24) / 0x18) + 24;
      bzero(v1279, v1289);
      *(_QWORD *)&object[8] = &v1279[v1289];
      v1278 = v1279;
      do
      {
        v1291 = *v1284;
        if (*(_BYTE *)(*v1284 + 488) && *(_DWORD *)(v1291 + 88) == v1283)
        {
          v1292 = *(_QWORD *)(v1291 + 496);
          v1293 = *(_QWORD *)(v1291 + 504);
          v1294 = *(_QWORD *)(v1291 + 72);
          v1295 = *(_DWORD *)(v1291 + 80);
          if (v1293 != v1292)
          {
            v1296 = (v1293 - v1292) >> 6;
            while (1)
            {
              v1297 = v1296 >> 1;
              v1298 = v1292 + (v1296 >> 1 << 6);
              v1299 = *(_DWORD *)(v1298 + 16);
              v1300 = v1299 >= v1283;
              if (v1299 != v1283)
                goto LABEL_1613;
              if (*(_QWORD *)v1298 >= v1294)
                break;
LABEL_1607:
              v1292 = v1298 + 64;
              v1297 = v1296 + ~v1297;
LABEL_1608:
              v1296 = v1297;
              if (!v1297)
                goto LABEL_1616;
            }
            if (*(_QWORD *)v1298 != v1294)
              goto LABEL_1608;
            v1300 = *(_DWORD *)(v1298 + 8) >= v1295;
LABEL_1613:
            if (v1300)
              goto LABEL_1608;
            goto LABEL_1607;
          }
LABEL_1616:
          if (v1292 != v1293 && *(_DWORD *)(v1292 + 16) == v1283 && *(_QWORD *)v1292 == v1294)
          {
            v1301 = *(_DWORD *)(v1292 + 8);
            v1290 = v1292 + 24;
            if (v1301 != v1295)
              v1290 = 0;
          }
          else
          {
            v1290 = 0;
          }
          *(_DWORD *)v1278 = *(_QWORD *)(v1291 + 32);
          *((_QWORD *)v1278 + 1) = v1290;
          *((_QWORD *)v1278 + 2) = v1291 + 40;
          v1278 += 24;
        }
        ++v1284;
      }
      while (v1284 != v1285);
      if (v1278 != *(char **)&object[8])
        *(_QWORD *)&object[8] = v1278;
      v1281 = (_QWORD *)(v1282 + 104);
      v1280 = *(void **)(v1282 + 104);
      if (!v1280)
        goto LABEL_1594;
LABEL_1593:
      *(_QWORD *)(v1282 + 112) = v1280;
      operator delete(v1280);
      *v1281 = 0;
      v1281[1] = 0;
      v1281[2] = 0;
      goto LABEL_1594;
    }
  }
LABEL_1626:
  if (*(_BYTE *)(v1468 + 1618))
  {
    if (!*(_BYTE *)(v1468 + 1619))
      goto LABEL_1774;
    goto LABEL_1702;
  }
  v1302.f64[1] = 0.0;
  *(_OWORD *)v1574 = 0u;
  *(_OWORD *)v1573 = 0u;
  *(_DWORD *)&v1574[16] = 1065353216;
  if (v1529)
  {
    v1303 = (_QWORD *)(*a9 + 56);
    v1304 = *(_QWORD **)(*a9 + 48);
    if (v1303 != v1304)
    {
      v1305 = 0;
      do
      {
        v1306 = (_QWORD *)*v1303;
        v1307 = (_QWORD *)*v1303;
        v1308 = v1303;
        if (*v1303)
        {
          do
          {
            v1309 = v1307;
            v1307 = (_QWORD *)v1307[1];
          }
          while (v1307);
        }
        else
        {
          do
          {
            v1309 = (_QWORD *)v1308[2];
            _ZF = *v1309 == (_QWORD)v1308;
            v1308 = v1309;
          }
          while (_ZF);
        }
        v1310 = v1303;
        if (v1306)
        {
          do
          {
            v1311 = v1306;
            v1306 = (_QWORD *)v1306[1];
          }
          while (v1306);
        }
        else
        {
          do
          {
            v1311 = (_QWORD *)v1310[2];
            _ZF = *v1311 == (_QWORD)v1310;
            v1310 = v1311;
          }
          while (_ZF);
        }
        v1312 = *((_DWORD *)v1309 + 10);
        v1313 = v1311[6];
        v1302.f64[0] = *(float64_t *)(v1313 + 16);
        v1314 = *(int64x2_t *)v1313;
        _Q2.i64[0] = *(_QWORD *)(v1313 + 40);
        v1315 = *(int64x2_t *)(v1313 + 24);
        _D4 = *(double *)(v1313 + 64);
        _Q5 = *(float64x2_t *)(v1313 + 48);
        v1318 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1313, v1315);
        _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1313, v1315);
        v1320 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v1321 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v1322 = *(double *)(v1313 + 88);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1318, *(double *)(v1313 + 72)), _Q3, *(float64x2_t *)(v1313 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1302, _Q2), v1322);
        _D16 = *(_QWORD *)(v1313 + 80);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v1322;
        v1325 = vnegq_f64(_Q21);
        *(_DWORD *)object = v1312;
        v1326 = (int64x2_t)vextq_s8(v1321, v1320, 8uLL);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)&object[24] = v1302.f64[0];
        *(int64x2_t *)&object[8] = vzip1q_s64(v1314, v1326);
        *(int64x2_t *)&object[32] = vzip2q_s64((int64x2_t)v1318, v1326);
        *(_QWORD *)&object[48] = _Q2.i64[0];
        *(double *)&object[72] = _D4;
        *(float64x2_t *)&object[56] = _Q5;
        _Q0 = vmulq_f64(v1302, v1325);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        *(float64x2_t *)&object[80] = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[8], v1325.f64[0]), *(float64x2_t *)&object[32], _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(_QWORD *)&object[96] = *(_OWORD *)&vnegq_f64(_Q0);
        sub_20FC37F68((float *)v1573, v1312, (uint64_t)object);
        v1328 = (_QWORD *)*v1303;
        if (*v1303)
        {
          do
          {
            v1329 = v1328;
            v1328 = (_QWORD *)v1328[1];
          }
          while (v1328);
        }
        else
        {
          do
          {
            v1329 = (_QWORD *)v1303[2];
            _ZF = *v1329 == (_QWORD)v1303;
            v1303 = v1329;
          }
          while (_ZF);
        }
        if (++v1305 >= v1529)
          break;
        v1303 = v1329;
      }
      while (v1329 != v1304);
    }
  }
  if (!*(_BYTE *)(v1531 + 2146))
  {
    v1331 = (std::__shared_weak_count *)operator new(0x58uLL);
    v1331->__shared_owners_ = 0;
    v1331->__shared_weak_owners_ = 0;
    v1331[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA01718;
    v1332 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    v1331->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA016C8;
    *(int64x2_t *)&v1331[1].__shared_weak_owners_ = v1332;
    *(int64x2_t *)&v1331[2].__shared_owners_ = v1332;
    v1331[3].std::__shared_count = (std::__shared_count)v1332;
    LOBYTE(v1331[1].__shared_owners_) = 1;
    v1671[0] = &v1331[1];
    v1671[1] = v1331;
    v1333 = *(_QWORD *)(v1531 + 8);
    v1334 = *(_QWORD **)(v1333 + 48);
    v1335 = (_QWORD *)(v1333 + 56);
    if (v1334 != (_QWORD *)(v1333 + 56))
    {
      v1336 = (int8x8_t)v1573[1];
      if (v1573[1])
      {
LABEL_1651:
        v1337 = *((unsigned int *)v1334 + 10);
        v1338 = (uint8x8_t)vcnt_s8(v1336);
        v1338.i16[0] = vaddlv_u8(v1338);
        if (v1338.u32[0] > 1uLL)
        {
          v1339 = *((unsigned int *)v1334 + 10);
          if (*(_QWORD *)&v1336 <= v1337)
            v1339 = v1337 % *(_QWORD *)&v1336;
        }
        else
        {
          v1339 = (v1336.i32[0] - 1) & v1337;
        }
        v1340 = (uint64_t **)*((_QWORD *)v1573[0] + v1339);
        if (v1340)
        {
          v1341 = *v1340;
          if (v1341)
          {
            if (v1338.u32[0] < 2uLL)
            {
              v1342 = *(_QWORD *)&v1336 - 1;
              while (1)
              {
                v1344 = v1341[1];
                if (v1344 == v1337)
                {
                  if (*((_DWORD *)v1341 + 4) == (_DWORD)v1337)
                    goto LABEL_1671;
                }
                else if ((v1344 & v1342) != v1339)
                {
                  goto LABEL_1686;
                }
                v1341 = (uint64_t *)*v1341;
                if (!v1341)
                  goto LABEL_1686;
              }
            }
            while (1)
            {
              v1343 = v1341[1];
              if (v1343 == v1337)
              {
                if (*((_DWORD *)v1341 + 4) == (_DWORD)v1337)
                {
LABEL_1671:
                  v1345 = *(_QWORD *)(v1531 + 6280);
                  if (v1345 == *(_QWORD *)(v1531 + 6272))
                    LODWORD(v1346) = 0;
                  else
                    v1346 = *(_QWORD *)(v1345 - 272) + 1;
                  v1347 = v1346;
                  *(_OWORD *)&object[16] = *(_OWORD *)(v1341 + 3);
                  v1348 = *(_OWORD *)(v1341 + 5);
                  v1349 = *(_OWORD *)(v1341 + 7);
                  v1350 = *(_OWORD *)(v1341 + 9);
                  *(_QWORD *)&object[80] = v1341[11];
                  *(_OWORD *)&object[48] = v1349;
                  *(_OWORD *)&object[64] = v1350;
                  *(_OWORD *)&object[32] = v1348;
                  v1351 = v1341[14];
                  *(_OWORD *)&object[88] = *((_OWORD *)v1341 + 6);
                  *(_QWORD *)&object[104] = v1351;
                  *(_QWORD *)object = v1347;
                  *(void **)&object[112] = v1671[0];
                  *(void **)&object[120] = v1671[1];
                  if (v1671[1])
                  {
                    v1352 = (unint64_t *)((char *)v1671[1] + 8);
                    do
                      v1353 = __ldxr(v1352);
                    while (__stxr(v1353 + 1, v1352));
                  }
                  LODWORD(v1655) = v1337;
                  v1663 = 0uLL;
                  v1679[0] = 0uLL;
                  if ((sub_20FBF05E0((int64x2_t *)(v1531 + 5184), (__int128 *)object, &v1655, 0, 0, v1330) & 1) != 0)
                  {
                    *(_BYTE *)(v1531 + 7868) = 0;
                    *(_DWORD *)(v1531 + 7864) = 0;
                    v1354 = *(std::__shared_weak_count **)&object[120];
                    if (!*(_QWORD *)&object[120])
                      goto LABEL_1686;
                  }
                  else
                  {
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1930, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    v1354 = *(std::__shared_weak_count **)&object[120];
                    if (!*(_QWORD *)&object[120])
                      goto LABEL_1686;
                  }
                  v1355 = (unint64_t *)&v1354->__shared_owners_;
                  do
                    v1356 = __ldaxr(v1355);
                  while (__stlxr(v1356 - 1, v1355));
                  if (!v1356)
                  {
                    ((void (*)(std::__shared_weak_count *))v1354->__on_zero_shared)(v1354);
                    std::__shared_weak_count::__release_weak(v1354);
                  }
                  goto LABEL_1686;
                }
              }
              else
              {
                if (v1343 >= *(_QWORD *)&v1336)
                  v1343 %= *(_QWORD *)&v1336;
                if (v1343 != v1339)
                  goto LABEL_1686;
              }
              v1341 = (uint64_t *)*v1341;
              if (!v1341)
                goto LABEL_1686;
            }
          }
        }
        while (1)
        {
LABEL_1686:
          v1357 = (_QWORD *)v1334[1];
          if (v1357)
          {
            do
            {
              v1358 = v1357;
              v1357 = (_QWORD *)*v1357;
            }
            while (v1357);
          }
          else
          {
            do
            {
              v1358 = (_QWORD *)v1334[2];
              _ZF = *v1358 == (_QWORD)v1334;
              v1334 = v1358;
            }
            while (!_ZF);
          }
          if (v1358 == v1335)
            break;
          v1336 = (int8x8_t)v1573[1];
          v1334 = v1358;
          if (v1573[1])
            goto LABEL_1651;
        }
        v1331 = (std::__shared_weak_count *)v1671[1];
        if (!v1671[1])
          goto LABEL_1697;
      }
      else
      {
        do
        {
          v1434 = (_QWORD *)v1334[1];
          if (v1434)
          {
            do
            {
              v1435 = v1434;
              v1434 = (_QWORD *)*v1434;
            }
            while (v1434);
          }
          else
          {
            do
            {
              v1435 = (_QWORD *)v1334[2];
              _ZF = *v1435 == (_QWORD)v1334;
              v1334 = v1435;
            }
            while (!_ZF);
          }
          v1334 = v1435;
        }
        while (v1435 != v1335);
      }
    }
    v1359 = (unint64_t *)&v1331->__shared_owners_;
    do
      v1360 = __ldaxr(v1359);
    while (__stlxr(v1360 - 1, v1359));
    if (!v1360)
    {
      ((void (*)(std::__shared_weak_count *))v1331->__on_zero_shared)(v1331);
      std::__shared_weak_count::__release_weak(v1331);
    }
  }
LABEL_1697:
  v1361 = *(_QWORD **)v1574;
  if (*(_QWORD *)v1574)
  {
    do
    {
      v1362 = (_QWORD *)*v1361;
      operator delete(v1361);
      v1361 = v1362;
    }
    while (v1362);
  }
  v1363 = v1573[0];
  v1573[0] = 0;
  if (v1363)
    operator delete(v1363);
  if (!*(_BYTE *)(v1468 + 1619))
    goto LABEL_1774;
LABEL_1702:
  *(_OWORD *)v1672 = 0u;
  *(_OWORD *)v1671 = 0u;
  LODWORD(v1673) = 1065353216;
  if (v1529)
  {
    v1364 = (_QWORD *)(*a9 + 56);
    v1365 = *(_QWORD **)(*a9 + 48);
    if (v1364 != v1365)
    {
      v1366 = 0;
      do
      {
        v1367 = (_QWORD *)*v1364;
        v1368 = (_QWORD *)*v1364;
        v1369 = v1364;
        if (*v1364)
        {
          do
          {
            v1370 = v1368;
            v1368 = (_QWORD *)v1368[1];
          }
          while (v1368);
        }
        else
        {
          do
          {
            v1370 = (_QWORD *)v1369[2];
            _ZF = *v1370 == (_QWORD)v1369;
            v1369 = v1370;
          }
          while (_ZF);
        }
        v1371 = v1364;
        if (v1367)
        {
          do
          {
            v1372 = v1367;
            v1367 = (_QWORD *)v1367[1];
          }
          while (v1367);
        }
        else
        {
          do
          {
            v1372 = (_QWORD *)v1371[2];
            _ZF = *v1372 == (_QWORD)v1371;
            v1371 = v1372;
          }
          while (_ZF);
        }
        v1373 = *((_DWORD *)v1370 + 10);
        v1374 = v1372[6];
        v1375 = *(double *)(v1374 + 16);
        v1376 = *(double *)(v1374 + 40);
        v1377 = *(float64x2_t *)(v1374 + 24);
        v1378 = *(_QWORD *)(v1374 + 64);
        v1379 = *(_OWORD *)(v1374 + 48);
        v1679[0] = *(float64x2_t *)v1374;
        v1679[1].f64[0] = v1375;
        *(float64x2_t *)((char *)&v1679[1] + 8) = v1377;
        v1679[2].f64[1] = v1376;
        v1680 = v1379;
        *(_QWORD *)&v1681 = v1378;
        sub_20F1B6B0C(v1679);
        *(float64x2_t *)&v1574[16] = v1679[2];
        *(_OWORD *)&v1574[32] = v1680;
        *(_QWORD *)&v1574[48] = v1681;
        *(float64x2_t *)v1574 = v1679[1];
        *(float64x2_t *)v1573 = v1679[0];
        v1575 = *(_OWORD *)(v1374 + 72);
        *(_QWORD *)&v1576 = *(_QWORD *)(v1374 + 88);
        *(_OWORD *)&v1574[80] = *(_OWORD *)(v1374 + 96);
        *(_QWORD *)&v1574[96] = *(_QWORD *)(v1374 + 112);
        *(_OWORD *)&v1574[56] = *(_OWORD *)(v1374 + 120);
        *(_QWORD *)&v1574[72] = *(_QWORD *)(v1374 + 136);
        *(_QWORD *)&v1574[120] = *(_QWORD *)(v1374 + 160);
        *(_OWORD *)&v1574[104] = *(_OWORD *)(v1374 + 144);
        *(_DWORD *)object = v1373;
        *(float64x2_t *)&object[8] = v1679[0];
        *(float64x2_t *)&object[24] = v1679[1];
        *(_OWORD *)&object[72] = *(_OWORD *)&v1574[48];
        *(_OWORD *)&object[88] = *(_OWORD *)&v1574[64];
        *(float64x2_t *)&object[40] = v1679[2];
        *(_OWORD *)&object[56] = v1680;
        *(_QWORD *)&object[168] = v1576;
        *(_OWORD *)&object[136] = *(_OWORD *)&v1574[112];
        *(_OWORD *)&object[152] = v1575;
        *(_OWORD *)&object[104] = *(_OWORD *)&v1574[80];
        *(_OWORD *)&object[120] = *(_OWORD *)&v1574[96];
        sub_20FC38434((float *)v1671, v1373, (uint64_t)object);
        v1380 = (_QWORD *)*v1364;
        if (*v1364)
        {
          do
          {
            v1381 = v1380;
            v1380 = (_QWORD *)v1380[1];
          }
          while (v1380);
        }
        else
        {
          do
          {
            v1381 = (_QWORD *)v1364[2];
            _ZF = *v1381 == (_QWORD)v1364;
            v1364 = v1381;
          }
          while (_ZF);
        }
        if (++v1366 >= v1529)
          break;
        v1364 = v1381;
      }
      while (v1381 != v1365);
    }
  }
  *(int64x2_t *)v1573 = vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  *(_OWORD *)v1574 = *(_OWORD *)v1573;
  *(_OWORD *)&v1574[16] = *(_OWORD *)v1573;
  *(_OWORD *)&v1574[32] = *(_OWORD *)v1573;
  *(_OWORD *)&v1574[48] = *(_OWORD *)v1573;
  *(_OWORD *)&v1574[64] = *(_OWORD *)v1573;
  *(_OWORD *)&v1574[80] = *(_OWORD *)v1573;
  *(_QWORD *)&v1574[96] = 0x3EB0C6F7A0B5ED8DLL;
  v1382 = (std::__shared_weak_count *)operator new(0x738uLL);
  sub_20FC372B0((uint64_t)v1382, (uint64_t *)v1573, 2);
  *(_QWORD *)&v1663 = v1382 + 1;
  *((_QWORD *)&v1663 + 1) = v1382;
  v1383 = *(_QWORD *)(v1531 + 8);
  v1384 = *(_QWORD **)(v1383 + 48);
  v1385 = (_QWORD *)(v1383 + 56);
  if (v1384 == (_QWORD *)(v1383 + 56))
  {
LABEL_1766:
    v1405 = (unint64_t *)&v1382->__shared_owners_;
    do
      v1406 = __ldaxr(v1405);
    while (__stlxr(v1406 - 1, v1405));
    if (!v1406)
    {
      ((void (*)(std::__shared_weak_count *))v1382->__on_zero_shared)(v1382);
      std::__shared_weak_count::__release_weak(v1382);
    }
    goto LABEL_1770;
  }
  v1386 = (int8x8_t)v1671[1];
  if (!v1671[1])
  {
    do
    {
      v1432 = (_QWORD *)v1384[1];
      if (v1432)
      {
        do
        {
          v1433 = v1432;
          v1432 = (_QWORD *)*v1432;
        }
        while (v1432);
      }
      else
      {
        do
        {
          v1433 = (_QWORD *)v1384[2];
          _ZF = *v1433 == (_QWORD)v1384;
          v1384 = v1433;
        }
        while (!_ZF);
      }
      v1384 = v1433;
    }
    while (v1433 != v1385);
    goto LABEL_1766;
  }
  while (2)
  {
    v1387 = *((unsigned int *)v1384 + 10);
    v1388 = (uint8x8_t)vcnt_s8(v1386);
    v1388.i16[0] = vaddlv_u8(v1388);
    if (v1388.u32[0] > 1uLL)
    {
      v1389 = *((unsigned int *)v1384 + 10);
      if (*(_QWORD *)&v1386 <= v1387)
        v1389 = v1387 % *(_QWORD *)&v1386;
    }
    else
    {
      v1389 = (v1386.i32[0] - 1) & v1387;
    }
    v1390 = (uint64_t **)*((_QWORD *)v1671[0] + v1389);
    if (!v1390 || (v1391 = *v1390) == 0)
    {
LABEL_1759:
      v1403 = (_QWORD *)v1384[1];
      if (!v1403)
        goto LABEL_1762;
      do
      {
LABEL_1760:
        v1404 = v1403;
        v1403 = (_QWORD *)*v1403;
      }
      while (v1403);
      goto LABEL_1764;
    }
    if (v1388.u32[0] < 2uLL)
    {
      v1392 = *(_QWORD *)&v1386 - 1;
      while (1)
      {
        v1394 = v1391[1];
        if (v1394 == v1387)
        {
          if (*((_DWORD *)v1391 + 4) == (_DWORD)v1387)
            goto LABEL_1743;
        }
        else if ((v1394 & v1392) != v1389)
        {
          goto LABEL_1759;
        }
        v1391 = (uint64_t *)*v1391;
        if (!v1391)
          goto LABEL_1759;
      }
    }
    while (1)
    {
      v1393 = v1391[1];
      if (v1393 == v1387)
        break;
      if (v1393 >= *(_QWORD *)&v1386)
        v1393 %= *(_QWORD *)&v1386;
      if (v1393 != v1389)
        goto LABEL_1759;
LABEL_1732:
      v1391 = (uint64_t *)*v1391;
      if (!v1391)
        goto LABEL_1759;
    }
    if (*((_DWORD *)v1391 + 4) != (_DWORD)v1387)
      goto LABEL_1732;
LABEL_1743:
    v1395 = *(_QWORD *)(v1531 + 6256);
    if (v1395 == *(_QWORD *)(v1531 + 6248))
      LODWORD(v1396) = 0;
    else
      v1396 = *(_QWORD *)(v1395 - 496) + 1;
    *(_QWORD *)object = v1396;
    memmove(&object[16], v1391 + 3, 0xA8uLL);
    *(_OWORD *)&object[184] = v1663;
    if (*((_QWORD *)&v1663 + 1))
    {
      v1398 = (unint64_t *)(*((_QWORD *)&v1663 + 1) + 8);
      do
        v1399 = __ldxr(v1398);
      while (__stxr(v1399 + 1, v1398));
    }
    *(_QWORD *)&v1647 = v1387 | (v1387 << 32);
    v1655 = 0uLL;
    v1679[0] = 0uLL;
    if ((sub_20FBEF3AC((int64x2_t *)(v1531 + 5184), (unint64_t *)object, &v1647, 0, 0, v1397) & 1) != 0)
    {
      *(_BYTE *)(v1531 + 7868) = 0;
      *(_DWORD *)(v1531 + 7864) = 0;
      v1400 = *(std::__shared_weak_count **)&object[192];
      if (!*(_QWORD *)&object[192])
        goto LABEL_1759;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1975, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add state prior factor [Moving Platform]", 50, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v1400 = *(std::__shared_weak_count **)&object[192];
      if (!*(_QWORD *)&object[192])
        goto LABEL_1759;
    }
    v1401 = (unint64_t *)&v1400->__shared_owners_;
    do
      v1402 = __ldaxr(v1401);
    while (__stlxr(v1402 - 1, v1401));
    if (v1402)
      goto LABEL_1759;
    ((void (*)(std::__shared_weak_count *))v1400->__on_zero_shared)(v1400);
    std::__shared_weak_count::__release_weak(v1400);
    v1403 = (_QWORD *)v1384[1];
    if (v1403)
      goto LABEL_1760;
    do
    {
LABEL_1762:
      v1404 = (_QWORD *)v1384[2];
      _ZF = *v1404 == (_QWORD)v1384;
      v1384 = v1404;
    }
    while (!_ZF);
LABEL_1764:
    if (v1404 != v1385)
    {
      v1386 = (int8x8_t)v1671[1];
      v1384 = v1404;
      if (!v1671[1])
        goto LABEL_1759;
      continue;
    }
    break;
  }
  v1382 = (std::__shared_weak_count *)*((_QWORD *)&v1663 + 1);
  if (*((_QWORD *)&v1663 + 1))
    goto LABEL_1766;
LABEL_1770:
  v1407 = v1672[0];
  if (v1672[0])
  {
    do
    {
      v1408 = (_QWORD *)*v1407;
      operator delete(v1407);
      v1407 = v1408;
    }
    while (v1408);
  }
  v1409 = v1671[0];
  v1671[0] = 0;
  if (v1409)
    operator delete(v1409);
LABEL_1774:
  *(_QWORD *)v1574 = 0;
  v1573[1] = 0;
  v1573[0] = &v1573[1];
  v1410 = *(_QWORD **)(v1531 + 8);
  v1411 = v1410[8];
  v1412 = v1410[39] * v1411;
  if (*(_BYTE *)(*(_QWORD *)(v1530 + 8216) + 1720))
  {
    v1413 = (v1527[1] - *v1527) >> 2;
    if (v1412 % (unint64_t)v1413)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4929, (uint64_t)"!(active_keyframes_view.size() % state_ids.size())", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v1411 = v1410[8];
      v1413 = (v1527[1] - *v1527) >> 2;
      v1412 = v1410[39] * v1411;
    }
    while (v1412 >= v1413)
    {
      v1414 = *(unsigned int *)(v1530 + 1940);
      if ((_DWORD)v1414)
      {
        v1415 = v1412 - v1414;
        v1416 = v1412;
        do
        {
          v1417 = --v1416 / v1411;
          v1418 = v1416 % v1411;
          v1419 = (_QWORD *)v1410[6];
          if (((v1416 % v1411) & 0x8000000000000000) != 0)
          {
            do
            {
              v1429 = (_QWORD *)*v1419;
              if (*v1419)
              {
                do
                {
                  v1420 = v1429;
                  v1429 = (_QWORD *)v1429[1];
                }
                while (v1429);
              }
              else
              {
                do
                {
                  v1420 = (_QWORD *)v1419[2];
                  _ZF = *v1420 == (_QWORD)v1419;
                  v1419 = v1420;
                }
                while (_ZF);
              }
              v1419 = v1420;
              _CF = __CFADD__(v1418++, 1);
            }
            while (!_CF);
          }
          else if (v1418)
          {
            do
            {
              v1428 = (_QWORD *)v1419[1];
              if (v1428)
              {
                do
                {
                  v1420 = v1428;
                  v1428 = (_QWORD *)*v1428;
                }
                while (v1428);
              }
              else
              {
                do
                {
                  v1420 = (_QWORD *)v1419[2];
                  _ZF = *v1420 == (_QWORD)v1419;
                  v1419 = v1420;
                }
                while (!_ZF);
              }
              v1419 = v1420;
              v427 = v1418-- <= 1;
            }
            while (!v427);
          }
          else
          {
            v1420 = (_QWORD *)v1410[6];
          }
          v1421 = *((_OWORD *)v1420 + 2);
          v1422 = (_QWORD *)v1410[37];
          if (v1417 < 0)
          {
            do
            {
              v1430 = (_QWORD *)*v1422;
              if (*v1422)
              {
                do
                {
                  v1423 = v1430;
                  v1430 = (_QWORD *)v1430[1];
                }
                while (v1430);
              }
              else
              {
                do
                {
                  v1423 = (_QWORD *)v1422[2];
                  _ZF = *v1423 == (_QWORD)v1422;
                  v1422 = v1423;
                }
                while (_ZF);
              }
              v1422 = v1423;
              _CF = __CFADD__(v1417++, 1);
            }
            while (!_CF);
          }
          else if (v1411 <= v1416)
          {
            do
            {
              v1431 = (_QWORD *)v1422[1];
              if (v1431)
              {
                do
                {
                  v1423 = v1431;
                  v1431 = (_QWORD *)*v1431;
                }
                while (v1431);
              }
              else
              {
                do
                {
                  v1423 = (_QWORD *)v1422[2];
                  _ZF = *v1423 == (_QWORD)v1422;
                  v1422 = v1423;
                }
                while (!_ZF);
              }
              v1422 = v1423;
              v427 = v1417-- <= 1;
            }
            while (!v427);
          }
          else
          {
            v1423 = (_QWORD *)v1410[37];
          }
          v1424 = *((_DWORD *)v1423 + 8);
          *(_OWORD *)object = v1421;
          *(_DWORD *)&object[16] = v1424;
          v1425 = sub_20F22F698((uint64_t **)v1573, (uint64_t *)&v1573[1], (uint64_t **)v1679, (uint64_t **)v1671, (unint64_t *)object);
          if (!*v1425)
          {
            v1426 = operator new(0x38uLL);
            v1426[2] = *(_OWORD *)object;
            *((_QWORD *)v1426 + 6) = *(_QWORD *)&object[16];
            v1427 = v1679[0].f64[0];
            *(_QWORD *)v1426 = 0;
            *((_QWORD *)v1426 + 1) = 0;
            *((float64_t *)v1426 + 2) = v1427;
            *v1425 = (uint64_t)v1426;
            if (*(_QWORD *)v1573[0])
            {
              v1573[0] = *(void **)v1573[0];
              v1426 = (_OWORD *)*v1425;
            }
            sub_20E868578((uint64_t *)v1573[1], (uint64_t *)v1426);
            ++*(_QWORD *)v1574;
          }
        }
        while (v1416 != v1415);
      }
      v1412 -= v1413;
    }
  }
  else if (v1412)
  {
    for (kk = 0; kk != v1412; ++kk)
    {
      v1437 = kk / v1411;
      v1438 = kk % v1411;
      v1439 = (_QWORD *)v1410[6];
      if (((kk % v1411) & 0x8000000000000000) != 0)
      {
        do
        {
          v1449 = (_QWORD *)*v1439;
          if (*v1439)
          {
            do
            {
              v1440 = v1449;
              v1449 = (_QWORD *)v1449[1];
            }
            while (v1449);
          }
          else
          {
            do
            {
              v1440 = (_QWORD *)v1439[2];
              _ZF = *v1440 == (_QWORD)v1439;
              v1439 = v1440;
            }
            while (_ZF);
          }
          v1439 = v1440;
          _CF = __CFADD__(v1438++, 1);
        }
        while (!_CF);
      }
      else if (v1438)
      {
        do
        {
          v1448 = (_QWORD *)v1439[1];
          if (v1448)
          {
            do
            {
              v1440 = v1448;
              v1448 = (_QWORD *)*v1448;
            }
            while (v1448);
          }
          else
          {
            do
            {
              v1440 = (_QWORD *)v1439[2];
              _ZF = *v1440 == (_QWORD)v1439;
              v1439 = v1440;
            }
            while (!_ZF);
          }
          v1439 = v1440;
          v427 = v1438-- <= 1;
        }
        while (!v427);
      }
      else
      {
        v1440 = (_QWORD *)v1410[6];
      }
      v1441 = *((_OWORD *)v1440 + 2);
      v1442 = (_QWORD *)v1410[37];
      if (v1437 < 0)
      {
        do
        {
          v1450 = (_QWORD *)*v1442;
          if (*v1442)
          {
            do
            {
              v1443 = v1450;
              v1450 = (_QWORD *)v1450[1];
            }
            while (v1450);
          }
          else
          {
            do
            {
              v1443 = (_QWORD *)v1442[2];
              _ZF = *v1443 == (_QWORD)v1442;
              v1442 = v1443;
            }
            while (_ZF);
          }
          v1442 = v1443;
          _CF = __CFADD__(v1437++, 1);
        }
        while (!_CF);
      }
      else if (v1411 <= kk)
      {
        do
        {
          v1451 = (_QWORD *)v1442[1];
          if (v1451)
          {
            do
            {
              v1443 = v1451;
              v1451 = (_QWORD *)*v1451;
            }
            while (v1451);
          }
          else
          {
            do
            {
              v1443 = (_QWORD *)v1442[2];
              _ZF = *v1443 == (_QWORD)v1442;
              v1442 = v1443;
            }
            while (!_ZF);
          }
          v1442 = v1443;
          v427 = v1437-- <= 1;
        }
        while (!v427);
      }
      else
      {
        v1443 = (_QWORD *)v1410[37];
      }
      v1444 = *((_DWORD *)v1443 + 8);
      *(_OWORD *)object = v1441;
      *(_DWORD *)&object[16] = v1444;
      v1445 = sub_20F22F698((uint64_t **)v1573, (uint64_t *)&v1573[1], (uint64_t **)v1679, (uint64_t **)v1671, (unint64_t *)object);
      if (!*v1445)
      {
        v1446 = operator new(0x38uLL);
        v1446[2] = *(_OWORD *)object;
        *((_QWORD *)v1446 + 6) = *(_QWORD *)&object[16];
        v1447 = v1679[0].f64[0];
        *(_QWORD *)v1446 = 0;
        *((_QWORD *)v1446 + 1) = 0;
        *((float64_t *)v1446 + 2) = v1447;
        *v1445 = (uint64_t)v1446;
        if (*(_QWORD *)v1573[0])
        {
          v1573[0] = *(void **)v1573[0];
          v1446 = (_OWORD *)*v1445;
        }
        sub_20E868578((uint64_t *)v1573[1], (uint64_t *)v1446);
        ++*(_QWORD *)v1574;
      }
    }
  }
  sub_20F88F474(*(_QWORD *)(v1530 + 8216), v1530, v1573);
  sub_20E86872C((uint64_t)v1573, (_QWORD *)v1573[1]);
  *((_QWORD *)&v1563 + 1) = 0;
  result = *((_QWORD *)&v1562 + 1);
  if (*((uint64_t **)&v1562 + 1) != &v1532 && *((_QWORD *)&v1562 + 1))
    return MEMORY[0x212BC6368](*((_QWORD *)&v1562 + 1), 0x1000C80EED21634);
  return result;
}

void sub_20FC13DD0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xCB8]) && SLOBYTE(STACK[0xCB7]) < 0)
    operator delete((void *)STACK[0xCA0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x490]);
  STACK[0x3F0] = 0;
  if ((unint64_t *)STACK[0x3E0] != &STACK[0x200] && STACK[0x3E0] != 0)
  {
    MEMORY[0x212BC6368]();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

__int32 *sub_20FC14480(uint64_t a1, char a2, unsigned __int32 __c)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  char *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  __int32 *v17;
  __int32 *v18;
  unint64_t v19;
  __int32 *result;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  const void *v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  _OWORD v33[7];
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v6 = *(char **)(a1 + 5672);
  v7 = *(char **)(a1 + 5680);
  if (v7 != v6)
  {
    v8 = (v7 - v6) >> 4;
    do
    {
      v9 = v8 >> 1;
      v10 = (unsigned int *)&v6[16 * (v8 >> 1)];
      v12 = *v10;
      v11 = (char *)(v10 + 4);
      v8 += ~(v8 >> 1);
      if (v12 < __c)
        v6 = v11;
      else
        v8 = v9;
    }
    while (v8);
  }
  if (v6 != v7 && *(_DWORD *)v6 == __c)
  {
    v13 = 0;
    goto LABEL_21;
  }
  if (__c)
    v14 = 104;
  else
    v14 = 96;
  v15 = *(_QWORD **)(a1 + v14);
  if (v15)
  {
    LODWORD(v44) = __c;
    BYTE4(v44) = 1;
    *((_QWORD *)&v44 + 1) = v15;
    BYTE8(v45) = 0;
LABEL_17:
    *(_QWORD *)&v45 = *v15;
    BYTE8(v45) = 0;
    v6 = sub_20FC17820(a1 + 5184, (unsigned int *)&v44);
    if (v16)
    {
      *(_BYTE *)(a1 + 7868) = 0;
      *(_DWORD *)(a1 + 7864) = 0;
    }
    goto LABEL_20;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3236, (uint64_t)"viobadata_time_offset", 21, (uint64_t)"Error the timeoffset variable is not set", 40, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *(_QWORD **)(a1 + v14);
  LODWORD(v44) = __c;
  BYTE4(v44) = 1;
  *((_QWORD *)&v44 + 1) = v15;
  if (v15)
    goto LABEL_17;
  v6 = *(char **)(a1 + 5680);
LABEL_20:
  v13 = 1;
LABEL_21:
  *(_BYTE *)(*((_QWORD *)v6 + 1) + 20) = a2;
  v17 = *(__int32 **)(a1 + 40680);
  v18 = *(__int32 **)(a1 + 40688);
  v19 = (char *)v18 - (char *)v17;
  result = wmemchr(v17, __c, v18 - v17);
  if (result)
    v18 = result;
  if ((v13 & 1) == 0 && (a2 & 1) == 0 && v18 != *(__int32 **)(a1 + 40688))
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    v21 = operator new(4uLL);
    v22 = (_DWORD *)(a1 + 25248);
    *v21 = __c;
    v36 = v21 + 1;
    v37 = v21 + 1;
    v35 = v21;
    v23 = *(_DWORD *)(a1 + 25340) + (((unint64_t)v18 - *(_QWORD *)(a1 + 40680)) >> 2);
    v24 = *(unsigned int *)(a1 + 25248);
    if ((unint64_t)(v19 >> 2) + v23 < v24)
    {
      v25 = (v24 + ~(_DWORD)v23);
      v26 = *(_QWORD *)(a1 + 25232);
      v27 = 8 * v25;
      v28 = operator new((8 * v25 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v29 = v28;
      if ((_DWORD)v25)
      {
        memmove(v28, (const void *)(v26 + 8 * (v23 + 1)), v27);
        memmove((void *)(v26 + 8 * v23), v29, v27);
      }
      MEMORY[0x212BC6368](v29, 0x1000C8000313F17);
      LODWORD(v24) = *v22;
    }
    v30 = (v24 - 1);
    *v22 = v30;
    if (*(_QWORD *)(a1 + 25240) < v30)
    {
      v31 = *(_QWORD *)(a1 + 25232);
      if (v31)
        MEMORY[0x212BC6368](v31, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 25232) = 0;
      v32 = (8 * v30 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 25240) = v32 >> 3;
      *(_QWORD *)(a1 + 25232) = operator new(v32, (std::align_val_t)0x20uLL);
    }
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    sub_20FA46484((_DWORD *)(a1 + 25256), (uint64_t)v33, (uint64_t)&v44);
    sub_20F89E908((uint64_t)&v44);
    return (__int32 *)sub_20F89E908((uint64_t)v33);
  }
  return result;
}

void sub_20FC14784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC14798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC147AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F89E908((uint64_t)&a39);
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC147C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC147DC(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;
  __int128 *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  unint64_t v17;
  char v18;
  unsigned int v19;

  v2 = *(_QWORD *)(a1 + 8216);
  v3 = *(unsigned __int8 *)(v2 + 1720);
  v4 = v2 + 864;
  v5 = v2 + 24;
  if (v3)
    v5 = v4;
  if (*(_BYTE *)(v5 + 423))
  {
    v7 = (_BYTE *)(a1 + 12512);
    if (*(_BYTE *)(a1 + 12512))
    {
      if (*(_BYTE *)(a1 + 7688))
      {
        v8 = (__int128 *)(a1 + 12488);
        v9 = *(unsigned __int8 *)(a1 + 664);
        if (*(_BYTE *)(a1 + 664))
        {
          if (v9 == 2)
          {
            v16.n128_u64[0] = sqrt(1.0 / *(double *)(a1 + 672));
            v16.n128_u64[1] = v16.n128_u64[0];
            v17 = v16.n128_u64[0];
            v18 = 1;
            sub_20FC33B98(a2, &v16, 5u, v8, 0xAu);
          }
          else if (v9 == 1)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4206, (uint64_t)"", 0, (uint64_t)"Should not be reached.", 22, (void (*)(void **))sub_21023DDB0);
            abort();
          }
        }
        else
        {
          *(_BYTE *)(a1 + 7688) = 0;
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 64);
          v11 = *v8;
          *(_QWORD *)(v10 + 128) = *(_QWORD *)(a1 + 12504);
          *(_OWORD *)(v10 + 112) = v11;
          v12 = *(unsigned __int8 **)(a1 + 8216);
          v13 = *v12;
          v14 = 8;
          if (!*v12)
            v14 = 16;
          if (*(_QWORD *)&v12[v14])
          {
            v16.n128_u64[1] = (unint64_t)(v12 + 8);
            v17 = (unint64_t)(v12 + 16);
            v15 = 1;
          }
          else
          {
            v13 = 0;
            v15 = 0;
          }
          v16.n128_u8[0] = v13;
          v18 = v15;
          v19 = 5;
          sub_20FB43148((uint64_t)&v16, &v19);
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 8216) + 1720) && *v7)
            *v7 = 0;
        }
      }
    }
  }
}

void sub_20FC14978(uint64_t a1, int a2, int a3, float64x2_t a4, float64_t a5, float64x2_t a6)
{
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  float64x2_t v53;
  uint64_t v54;

  a4.f64[1] = a5;
  v54 = *(_OWORD *)&vmulq_f64(a6, a6);
  v53 = vmulq_f64(a4, a4);
  v9 = *(char **)(a1 + 5768);
  v10 = *(char **)(a1 + 5776);
  if (v10 != v9)
  {
    v11 = (v10 - v9) >> 4;
    do
    {
      v12 = v11 >> 1;
      v13 = (unsigned int *)&v9[16 * (v11 >> 1)];
      v15 = *v13;
      v14 = (char *)(v13 + 4);
      v11 += ~(v11 >> 1);
      if (v15 < 5)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
  }
  if (v9 != v10 && *(_DWORD *)v9 == 5)
  {
    v16 = *((_QWORD *)v9 + 1);
    v17 = *(unsigned __int8 *)(v16 + 20);
    if (*(unsigned __int8 *)(a1 + 1727) != v17)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 329, (uint64_t)"variable.getFree() == ba_config.estimate_gyro_scale_factor", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_78;
      }
      v17 = *(unsigned __int8 *)(a1 + 1727);
    }
    *(_BYTE *)(v16 + 56) = a2;
    if (v17)
      v18 = a3 == 0;
    else
      v18 = 1;
    if (!v18 && a2 != 0)
      sub_20FC34E30(a1, 5u, &v53);
  }
  v20 = *(char **)(a1 + 5768);
  v21 = *(char **)(a1 + 5776);
  if (v21 != v20)
  {
    v22 = (v21 - v20) >> 4;
    do
    {
      v23 = v22 >> 1;
      v24 = (unsigned int *)&v20[16 * (v22 >> 1)];
      v26 = *v24;
      v25 = (char *)(v24 + 4);
      v22 += ~(v22 >> 1);
      if (v26 < 6)
        v20 = v25;
      else
        v22 = v23;
    }
    while (v22);
  }
  if (v20 != v21 && *(_DWORD *)v20 == 6)
  {
    v27 = *((_QWORD *)v20 + 1);
    v28 = *(unsigned __int8 *)(v27 + 20);
    if (*(unsigned __int8 *)(a1 + 1728) != v28)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 348, (uint64_t)"variable.getFree() == ba_config.estimate_gyro_skewness", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_78;
      }
      v28 = *(unsigned __int8 *)(a1 + 1728);
    }
    *(_BYTE *)(v27 + 56) = a2;
    if (v28)
      v29 = a3 == 0;
    else
      v29 = 1;
    if (!v29 && a2 != 0)
      sub_20FC34E30(a1, 6u, &v53);
  }
  v31 = *(char **)(a1 + 5768);
  v32 = *(char **)(a1 + 5776);
  if (v32 != v31)
  {
    v33 = (v32 - v31) >> 4;
    do
    {
      v34 = v33 >> 1;
      v35 = (unsigned int *)&v31[16 * (v33 >> 1)];
      v37 = *v35;
      v36 = (char *)(v35 + 4);
      v33 += ~(v33 >> 1);
      if (v37 < 3)
        v31 = v36;
      else
        v33 = v34;
    }
    while (v33);
  }
  if (v31 != v32 && *(_DWORD *)v31 == 3)
  {
    v38 = *((_QWORD *)v31 + 1);
    v39 = *(unsigned __int8 *)(v38 + 20);
    if (*(unsigned __int8 *)(a1 + 1725) != v39)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 367, (uint64_t)"variable.getFree() == ba_config.estimate_accel_scale_factor", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_78;
      }
      v39 = *(unsigned __int8 *)(a1 + 1725);
    }
    *(_BYTE *)(v38 + 56) = a2;
    if (v39)
      v40 = a3 == 0;
    else
      v40 = 1;
    if (!v40 && a2 != 0)
      sub_20FC34E30(a1, 3u, &v53);
  }
  v42 = *(char **)(a1 + 5768);
  v43 = *(char **)(a1 + 5776);
  if (v43 != v42)
  {
    v44 = (v43 - v42) >> 4;
    do
    {
      v45 = v44 >> 1;
      v46 = (unsigned int *)&v42[16 * (v44 >> 1)];
      v48 = *v46;
      v47 = (char *)(v46 + 4);
      v44 += ~(v44 >> 1);
      if (v48 < 4)
        v42 = v47;
      else
        v44 = v45;
    }
    while (v44);
  }
  if (v42 != v43 && *(_DWORD *)v42 == 4)
  {
    v49 = *((_QWORD *)v42 + 1);
    v50 = *(unsigned __int8 *)(v49 + 20);
    if (*(unsigned __int8 *)(a1 + 1726) == v50)
    {
LABEL_69:
      *(_BYTE *)(v49 + 56) = a2;
      if (v50)
        v51 = a3 == 0;
      else
        v51 = 1;
      if (!v51 && a2 != 0)
        sub_20FC34E30(a1, 4u, &v53);
      return;
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 386, (uint64_t)"variable.getFree() == ba_config.estimate_accel_skewness", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v50 = *(unsigned __int8 *)(a1 + 1726);
      goto LABEL_69;
    }
LABEL_78:
    abort();
  }
}

uint64_t sub_20FC14CB4(uint64_t result)
{
  uint64_t *v1;
  int64x2_t *v2;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  char v40;
  double v41;
  float64x2_t v42;
  double v43;
  char v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  _DWORD *v64;
  unsigned int v65;
  uint64_t v66;
  _DWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  _DWORD *v71;
  unsigned int v72;
  uint64_t v73;
  _DWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  _DWORD *v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  _DWORD *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  _DWORD *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int *v98;
  _DWORD *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  char *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  _QWORD *v127;
  __int128 *p_dst;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  int v132;
  uint64_t v133;
  _DWORD *v134;
  _DWORD *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  _DWORD *v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  _DWORD *v145;
  unsigned int v146;
  uint64_t v147;
  _QWORD *v148;
  __int128 *v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  const char *v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  _DWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  __int128 *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  unsigned int *v171;
  _DWORD *v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t v175;
  unsigned int *v176;
  _DWORD *v177;
  unsigned int v178;
  uint64_t v179;
  _QWORD *v180;
  __int128 *v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  const char *v187;
  uint64_t v188;
  _QWORD *v189;
  int v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  __int128 *v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int *v202;
  _DWORD *v203;
  unsigned int v204;
  unint64_t v205;
  unint64_t v206;
  unsigned int *v207;
  _DWORD *v208;
  unsigned int v209;
  uint64_t v210;
  _QWORD *v211;
  __int128 *v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  const char *v218;
  uint64_t v219;
  _QWORD *v220;
  int v221;
  uint64_t v222;
  _DWORD *v223;
  _DWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  __int128 *v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  unint64_t v231;
  unint64_t v232;
  unsigned int *v233;
  _DWORD *v234;
  unsigned int v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int *v238;
  _DWORD *v239;
  unsigned int v240;
  int v241;
  uint64_t v242;
  _QWORD *v243;
  __int128 *v244;
  uint64_t v245;
  _QWORD *v246;
  int v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  const char *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _DWORD *v255;
  _DWORD *v256;
  uint64_t v257;
  unsigned int v258;
  _QWORD *v259;
  __int128 *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  unint64_t v264;
  unint64_t v265;
  unsigned int *v266;
  _DWORD *v267;
  unsigned int v268;
  unint64_t v269;
  unint64_t v270;
  unsigned int *v271;
  _DWORD *v272;
  unsigned int v273;
  int v274;
  uint64_t v275;
  _QWORD *v276;
  __int128 *v277;
  uint64_t v278;
  _QWORD *v279;
  int v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  const char *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _DWORD *v288;
  _DWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  __int128 *v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  unint64_t v296;
  unint64_t v297;
  int *v298;
  _DWORD *v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  int *v303;
  _DWORD *v304;
  int v305;
  int v306;
  uint64_t v307;
  _QWORD *v308;
  __int128 *v309;
  uint64_t v310;
  _QWORD *v311;
  int v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  const char *v316;
  uint64_t v317;
  _QWORD *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  _QWORD *v322;
  __int128 *v323;
  uint64_t v324;
  _QWORD *v325;
  _QWORD *v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  char *v331;
  _QWORD *v332;
  __int128 *v333;
  uint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  BOOL v337;
  char v338;
  size_t v339;
  __int128 *v340;
  _QWORD *v341;
  __int128 *v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  unint64_t v346;
  const void **v347;
  const void *v348;
  uint64_t v349;
  uint64_t v350;
  std::string *v351;
  __int128 v352;
  std::string *v353;
  __int128 v354;
  void **v355;
  uint64_t v356;
  _BOOL4 v357;
  char *v358;
  char *v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  __int128 v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  char *v376;
  char *v377;
  __int128 v378;
  uint64_t v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  char *v384;
  __int128 v385;
  __int128 v386;
  unint64_t v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  unint64_t v396;
  uint64_t v397;
  int64x2_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  void *v403;
  char *v404;
  char *v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  unint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  _OWORD *v423;
  __int128 v424;
  _OWORD *v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  char *v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *p_shared_owners;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  _BOOL4 v461;
  _QWORD *v462;
  _QWORD *v463;
  uint64_t v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  uint64_t v468;
  char v469;
  char v470;
  char *v471;
  std::__shared_weak_count *v472;
  _QWORD *v473;
  float64x2_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  _QWORD *v480;
  int v481;
  int v482;
  int v483;
  char *v484;
  char *v485;
  int64x2_t v486;
  _BYTE *v487;
  uint64_t *v488;
  uint64_t *v489;
  __int128 *v490;
  double *v491;
  uint64_t v492;
  unsigned int v493;
  char *v494;
  int v495;
  unsigned int v496;
  unsigned int v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  std::string v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  uint64_t (**v507)();
  char v508;
  _BYTE v509[24];
  uint64_t (**v510)();
  char v511;
  _BYTE v512[24];
  __int128 v513;
  uint64_t v514;
  __int128 v515;
  __int128 v516;
  int v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  uint64_t v522;
  __int128 v523;
  uint64_t v524;
  unint64_t v525;
  char v526;
  uint64_t v527;
  std::__shared_weak_count *v528;
  char v529;
  int64x2_t v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  uint64_t (**v535)();
  void *v536;
  __int128 v537;
  unint64_t v538;
  uint64_t (**v539)();
  char v540[8];
  __int128 v541;
  uint64_t v542;
  __int128 v543;
  uint64_t v544;
  __int128 v545;
  __int128 v546;
  int v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  uint64_t v552;
  __int128 v553;
  uint64_t v554;
  unint64_t v555;
  char v556;
  __int128 v557;
  char v558;
  unint64_t v559;
  char v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  uint64_t v564;
  __int128 v565;
  uint64_t v566;
  void *__p[2];
  __int128 v568;
  void *v569[2];
  __int128 v570;
  __int128 __dst;
  __int128 v572;
  _QWORD *v573;
  __int128 v574;
  uint64_t v575;
  __int128 v576;
  uint64_t v577;
  uint64_t v578;

  v578 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(result + 72);
  v488 = *(uint64_t **)(result + 80);
  if (v1 != v488)
  {
    v2 = (int64x2_t *)result;
    v497 = 0;
    v487 = (_BYTE *)(result + 6800);
    v480 = (_QWORD *)(result + 5184);
    v475 = result + 7864;
    v473 = (_QWORD *)(result + 6504);
    __asm { FMOV            V0.2D, #1.0 }
    v474 = _Q0;
    v479 = MEMORY[0x24BEDB848] + 16;
    v477 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v478 = *MEMORY[0x24BEDB7F0];
    v476 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    while (1)
    {
      v8 = *v1;
      v9 = *v1 + 40;
      if (*(_BYTE *)(*v1 + 280))
      {
        v10 = *(uint64_t **)(v8 + 288);
        v11 = *(uint64_t **)(v8 + 296);
        if (v10 != v11)
          break;
        goto LABEL_554;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2314, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (!*(_BYTE *)(v8 + 280))
        v9 = 0;
      v10 = *(uint64_t **)(v8 + 288);
      v11 = *(uint64_t **)(v8 + 296);
      if (v10 != v11)
        break;
LABEL_554:
      if (!*v487)
      {
        v461 = sub_20F9210FC(v480);
        v462 = (_QWORD *)v2[406].i64[0];
        v463 = (_QWORD *)v2[405].i64[1];
        if (v461 && v463 != v462)
        {
          v464 = 0;
          do
          {
            if ((*(_BYTE *)(v463[28] + 4) & 6) == 0
              && (*(_BYTE *)(v463[29] + 4) & 6) == 0
              && (*(_BYTE *)(v463[30] + 4) & 6) == 0
              && (*(_BYTE *)(v463[31] + 4) & 6) == 0
              && (*(_BYTE *)(v463[32] + 4) & 6) == 0
              && (*(_BYTE *)(v463[33] + 4) & 6) == 0)
            {
              ++v464;
            }
            v463 += 45;
          }
          while (v463 != v462);
        }
      }
      result = kdebug_trace();
      if (++v1 == v488)
        return result;
    }
    v491 = (double *)v9;
    v492 = v8;
    v490 = (__int128 *)(v9 + 80);
    v12 = *(_QWORD *)(v9 + 160);
    v13 = *(_QWORD *)(v9 + 136);
    v14 = *(_DWORD *)(v9 + 144);
    v496 = v14 + 1;
    while (1)
    {
      v15 = *((_DWORD *)v10 + 2);
      if (v15 == v14)
        goto LABEL_14;
      v16 = v2->i64[1];
      v19 = *(uint64_t **)(v16 + 56);
      v17 = (_QWORD *)(v16 + 56);
      v18 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = *v10;
      v21 = v17;
      v22 = v18;
      do
      {
        v23 = v22[4];
        if (v23 < v20)
        {
          ++v22;
        }
        else if (v23 == v20)
        {
          if (*((_DWORD *)v22 + 10) < v15)
            ++v22;
          else
            v21 = v22;
        }
        else
        {
          v21 = v22;
        }
        v22 = (uint64_t *)*v22;
      }
      while (v22);
      if (v21 == v17 || (v24 = v21[4], v20 < v24) || v20 == v24 && *((_DWORD *)v21 + 10) > v15)
LABEL_28:
        v21 = v17;
      if (!v18)
        goto LABEL_14;
      v25 = v10[20];
      v26 = v17;
      do
      {
        v27 = v18[4];
        if (v27 < v13)
        {
          ++v18;
        }
        else if (v27 == v13)
        {
          if (*((_DWORD *)v18 + 10) < v14)
            ++v18;
          else
            v26 = v18;
        }
        else
        {
          v26 = v18;
        }
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      if (v26 == v17)
        goto LABEL_14;
      v28 = v26[4];
      if (v13 < v28 || v13 == v28 && *((_DWORD *)v26 + 10) > v14)
        goto LABEL_14;
      if (v21 == v17)
        goto LABEL_14;
      v29 = (_QWORD *)v21[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v21[2];
          _ZF = *v30 == (_QWORD)v21;
          v21 = v30;
        }
        while (!_ZF);
      }
      v31 = (_QWORD *)v26[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v26[2];
          _ZF = *v32 == (_QWORD)v26;
          v26 = v32;
        }
        while (!_ZF);
      }
      if (v30 == v17 || v32 == v17)
        goto LABEL_14;
      v34 = *(_QWORD *)(v492 + 24);
      v33 = *(_QWORD *)(v492 + 32);
      v502 = *((_OWORD *)v10 + 3);
      v500 = *v490;
      v501 = v490[1];
      v35 = v491[21];
      v36 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
      if (v35 <= 1.0e-15 || (v37.f64[0] = v491[25], v37.f64[0] <= 1.0e-15))
      {
        v40 = 0;
        v38 = NAN;
        v39 = v36;
        v41 = *((double *)v10 + 8);
        v493 = *(_DWORD *)(v2->i64[1] + 1648);
        if (v41 <= 1.0e-15)
          goto LABEL_69;
      }
      else if (v491[29] <= 1.0e-15)
      {
        v40 = 0;
        v39 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        v38 = NAN;
        v41 = *((double *)v10 + 8);
        v493 = *(_DWORD *)(v2->i64[1] + 1648);
        if (v41 <= 1.0e-15)
          goto LABEL_69;
      }
      else
      {
        v38 = 1.0 / sqrt(v35);
        v37.f64[1] = v491[29];
        v39 = vdivq_f64(v474, vsqrtq_f64(v37));
        v40 = 1;
        v41 = *((double *)v10 + 8);
        v493 = *(_DWORD *)(v2->i64[1] + 1648);
        if (v41 <= 1.0e-15)
          goto LABEL_69;
      }
      *(_QWORD *)&v42.f64[0] = v10[12];
      v36 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
      if (v42.f64[0] > 1.0e-15 && *((double *)v10 + 16) > 1.0e-15)
      {
        v43 = 1.0 / sqrt(v41);
        *(_QWORD *)&v42.f64[1] = v10[16];
        v36 = vdivq_f64(v474, vsqrtq_f64(v42));
        v44 = 1;
        goto LABEL_70;
      }
LABEL_69:
      v44 = 0;
      v43 = NAN;
LABEL_70:
      v498 = *(_OWORD *)(v10 + 17);
      v499 = v10[19];
      v45 = v15 + 1;
      v46 = (char *)v2[405].i64[1];
      v47 = (char *)v2[406].i64[0];
      v489 = v1;
      if (v46 == v47)
      {
        v48 = (char *)v2[405].i64[1];
      }
      else
      {
        v48 = (char *)v2[406].i64[0];
        if (*((_QWORD *)v47 - 45) >= (unint64_t)v497)
        {
          v49 = 0x4FA4FA4FA4FA4FA5 * ((v47 - v46) >> 3);
          v50 = (char *)v2[405].i64[1];
          do
          {
            v51 = v49 >> 1;
            v52 = (unint64_t *)&v50[360 * (v49 >> 1)];
            v53 = *v52;
            v54 = (char *)(v52 + 45);
            v49 += ~(v49 >> 1);
            if (v53 < v497)
              v50 = v54;
            else
              v49 = v51;
          }
          while (v49);
          v48 = (char *)v2[406].i64[0];
          if (v50 != v47)
          {
            v48 = v50;
            if (*(_QWORD *)v50 == v497)
            {
LABEL_157:
              v119 = 1;
              goto LABEL_159;
            }
          }
        }
      }
      *(_OWORD *)&v503.__r_.__value_.__r.__words[1] = *((_OWORD *)v10 + 2);
      v504 = v502;
      v505 = v500;
      v506 = v501;
      v508 = v40;
      v503.__r_.__value_.__r.__words[0] = v497;
      v507 = &off_24CA04D00;
      *(double *)v509 = v38;
      *(float64x2_t *)&v509[8] = v39;
      v511 = v44;
      v510 = &off_24CA04D00;
      *(float64x2_t *)&v512[8] = v36;
      v513 = v498;
      v514 = v499;
      *(double *)v512 = v43;
      *(_QWORD *)&v515 = v12;
      *((_QWORD *)&v515 + 1) = v25;
      LOWORD(v516) = 0;
      v55 = 1;
      BYTE2(v516) = 1;
      *((_QWORD *)&v516 + 1) = v34;
      v517 = v33;
      v518 = 0u;
      v519 = 0u;
      v520 = 0u;
      v527 = 0;
      v528 = 0;
      v525 = 0xBFF0000000000000;
      v526 = 0;
      v529 = 0;
      v56 = v2[324].i64[1];
      v57 = v2[325].i64[0];
      v58 = v57 - v56;
      if (v57 != v56)
      {
        v59 = v58 >> 4;
        v60 = v2[324].i64[1];
        v61 = v58 >> 4;
        do
        {
          v62 = v61 >> 1;
          v63 = (unsigned int *)(v60 + 16 * (v61 >> 1));
          v65 = *v63;
          v64 = v63 + 4;
          v61 += ~(v61 >> 1);
          if (v65 < v14)
            v60 = (uint64_t)v64;
          else
            v61 = v62;
        }
        while (v61);
        if (v60 == v57 || *(_DWORD *)v60 != v14)
          goto LABEL_155;
        v66 = *(_QWORD *)(v60 + 8);
        *(_QWORD *)&v518 = v66;
        ++*(_DWORD *)(*(_QWORD *)(v60 + 8) + 8);
        v67 = (_DWORD *)v56;
        v68 = v59;
        do
        {
          v69 = v68 >> 1;
          v70 = &v67[4 * (v68 >> 1)];
          v72 = *v70;
          v71 = v70 + 4;
          v68 += ~(v68 >> 1);
          if (v72 < v496)
            v67 = v71;
          else
            v68 = v69;
        }
        while (v68);
        if (v67 == (_DWORD *)v57 || *v67 != v496)
        {
          v93 = 0;
          v85 = 0;
          v80 = 0;
          v73 = 0;
          if (!v66)
            goto LABEL_147;
          goto LABEL_146;
        }
        v73 = *((_QWORD *)v67 + 1);
        *((_QWORD *)&v518 + 1) = v73;
        ++*(_DWORD *)(*((_QWORD *)v67 + 1) + 8);
        v74 = (_DWORD *)v56;
        v75 = v59;
        do
        {
          v76 = v75 >> 1;
          v77 = &v74[4 * (v75 >> 1)];
          v79 = *v77;
          v78 = v77 + 4;
          v75 += ~(v75 >> 1);
          if (v79 < v15)
            v74 = v78;
          else
            v75 = v76;
        }
        while (v75);
        if (v74 == (_DWORD *)v57 || *v74 != v15)
        {
          v93 = 0;
          v85 = 0;
          v80 = 0;
          if (!v66)
            goto LABEL_147;
          goto LABEL_146;
        }
        v80 = *((_QWORD *)v74 + 1);
        *(_QWORD *)&v519 = v80;
        ++*(_DWORD *)(*((_QWORD *)v74 + 1) + 8);
        do
        {
          v81 = v59 >> 1;
          v82 = (unsigned int *)(v56 + 16 * (v59 >> 1));
          v84 = *v82;
          v83 = v82 + 4;
          v59 += ~(v59 >> 1);
          if (v84 < v45)
            v56 = (uint64_t)v83;
          else
            v59 = v81;
        }
        while (v59);
        if (v56 == v57 || *(_DWORD *)v56 != v45)
        {
          v93 = 0;
          v85 = 0;
LABEL_145:
          if (!v66)
            goto LABEL_147;
LABEL_146:
          --*(_DWORD *)(v66 + 8);
LABEL_147:
          if (v73)
            --*(_DWORD *)(v73 + 8);
          if (v80)
            --*(_DWORD *)(v80 + 8);
          if (v85)
            --*(_DWORD *)(v85 + 8);
          if (v93)
            --*(_DWORD *)(v93 + 8);
          goto LABEL_155;
        }
        v85 = *(_QWORD *)(v56 + 8);
        *((_QWORD *)&v519 + 1) = v85;
        ++*(_DWORD *)(*(_QWORD *)(v56 + 8) + 8);
        v86 = v2[342].i64[1];
        v87 = v2[343].i64[0];
        if (v87 != v86)
        {
          v88 = (v87 - v86) >> 4;
          do
          {
            v89 = v88 >> 1;
            v90 = (unsigned int *)(v86 + 16 * (v88 >> 1));
            v92 = *v90;
            v91 = v90 + 4;
            v88 += ~(v88 >> 1);
            if (v92 < v493)
              v86 = (uint64_t)v91;
            else
              v88 = v89;
          }
          while (v88);
        }
        if (v86 == v87 || *(_DWORD *)v86 != v493)
        {
          v93 = 0;
          if (!v66)
            goto LABEL_147;
          goto LABEL_146;
        }
        v93 = *(_QWORD *)(v86 + 8);
        *(_QWORD *)&v520 = v93;
        ++*(_DWORD *)(*(_QWORD *)(v86 + 8) + 8);
        v94 = v2[354].i64[1];
        v95 = v2[355].i64[0];
        if (v95 != v94)
        {
          v96 = (v95 - v94) >> 4;
          do
          {
            v97 = v96 >> 1;
            v98 = (int *)(v94 + 16 * (v96 >> 1));
            v100 = *v98;
            v99 = v98 + 4;
            v96 += ~(v96 >> 1);
            if (v100)
              v96 = v97;
            else
              v94 = (uint64_t)v99;
          }
          while (v96);
        }
        if (v94 == v95 || *(_DWORD *)v94 != 1)
          goto LABEL_145;
        v101 = *(_QWORD *)(v94 + 8);
        *((_QWORD *)&v520 + 1) = v101;
        ++*(_DWORD *)(*(_QWORD *)(v94 + 8) + 8);
        if (!*(_BYTE *)(v66 + 20)
          && !*(_BYTE *)(v73 + 20)
          && !*(_BYTE *)(v80 + 20)
          && !*(_BYTE *)(v85 + 20)
          && !*(_BYTE *)(v93 + 20)
          && !*(_BYTE *)(v101 + 20))
        {
          --*(_DWORD *)(v66 + 8);
          --*(_DWORD *)(v73 + 8);
          v518 = 0u;
          --*(_DWORD *)(v80 + 8);
          --*(_DWORD *)(v85 + 8);
          v519 = 0u;
          --*(_DWORD *)(v93 + 8);
          *(_QWORD *)&v520 = 0;
          --*(_DWORD *)(v101 + 8);
LABEL_155:
          v55 = 1;
          goto LABEL_156;
        }
        v530.i64[0] = v497;
        v530.i64[1] = v497;
        v531 = *(_OWORD *)&v503.__r_.__value_.__r.__words[1];
        v532 = v504;
        v533 = v505;
        v534 = v506;
        LOBYTE(v536) = v40;
        v535 = &off_24CA04D00;
        v537 = *(_OWORD *)v509;
        v538 = *(_QWORD *)&v509[16];
        v540[0] = v44;
        v539 = &off_24CA04D00;
        v542 = *(_QWORD *)&v512[16];
        v541 = *(_OWORD *)v512;
        v543 = v513;
        v544 = v514;
        v545 = v515;
        v546 = v516;
        v547 = v517;
        v549 = v519;
        v550 = v520;
        v548 = v518;
        v552 = v522;
        v551 = v521;
        v554 = v524;
        v553 = v523;
        v556 = v526;
        v555 = v525;
        v557 = 0uLL;
        v527 = 0;
        v528 = 0;
        v558 = 0;
        if (v47 == v48 || *(_QWORD *)v48 != v497)
        {
          v102 = v48 - v46;
          v103 = 0x4FA4FA4FA4FA4FA5 * ((v48 - v46) >> 3);
          v494 = v48;
          v471 = v46;
          if ((unint64_t)v47 >= *v473)
          {
            v374 = 0x4FA4FA4FA4FA4FA5 * ((v47 - v46) >> 3) + 1;
            if (v374 > 0xB60B60B60B60B6)
              sub_20E867F44();
            if (0x9F49F49F49F49F4ALL * ((uint64_t)(*v473 - (_QWORD)v46) >> 3) > v374)
              v374 = 0x9F49F49F49F49F4ALL * ((uint64_t)(*v473 - (_QWORD)v46) >> 3);
            if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*v473 - (_QWORD)v46) >> 3)) >= 0x5B05B05B05B05BLL)
              v375 = 0xB60B60B60B60B6;
            else
              v375 = v374;
            v573 = v473;
            if (v375)
            {
              v485 = (char *)(v48 - v46);
              if (v375 > 0xB60B60B60B60B6)
                sub_20E877A38();
              v376 = (char *)operator new(360 * v375);
              v48 = v494;
              v46 = v471;
              v102 = (uint64_t)v485;
            }
            else
            {
              v376 = 0;
            }
            v397 = (uint64_t)&v376[360 * v103];
            *(_QWORD *)&__dst = v376;
            *((_QWORD *)&__dst + 1) = v397;
            *(_QWORD *)&v572 = v397;
            *((_QWORD *)&v572 + 1) = &v376[360 * v375];
            v398 = vdupq_n_s64(v497);
            if (v103 == v375)
            {
              if (v102 < 1)
              {
                v486 = v398;
                if (v46 == v48)
                  v402 = 1;
                else
                  v402 = 2 * v103;
                if (v402 > 0xB60B60B60B60B6)
                  sub_20E877A38();
                v403 = v376;
                v404 = (char *)operator new(360 * v402);
                v397 = (uint64_t)&v404[360 * (v402 >> 2)];
                *(_QWORD *)&__dst = v404;
                *((_QWORD *)&__dst + 1) = v397;
                *((_QWORD *)&v572 + 1) = &v404[360 * v402];
                if (v403)
                {
                  v405 = &v404[360 * (v402 >> 2)];
                  operator delete(v403);
                  v397 = (uint64_t)v405;
                  v401 = (uint64_t)v405;
                }
                else
                {
                  v401 = (uint64_t)&v404[360 * (v402 >> 2)];
                }
                v48 = v494;
                v398 = v486;
              }
              else
              {
                v399 = v103 + 2;
                if (v103 >= -1)
                  v399 = v103 + 1;
                v400 = v399 >> 1;
                v401 = sub_20F91EE88(v397, v397, v397 - 360 * (v399 >> 1));
                v397 = *((_QWORD *)&__dst + 1) - 360 * v400;
                *((_QWORD *)&__dst + 1) = v397;
                v398 = v530;
                v48 = v494;
              }
            }
            else
            {
              v401 = (uint64_t)&v376[360 * v103];
            }
            *(int64x2_t *)v401 = v398;
            v406 = v532;
            *(_OWORD *)(v401 + 16) = v531;
            *(_OWORD *)(v401 + 32) = v406;
            v407 = v534;
            *(_OWORD *)(v401 + 48) = v533;
            *(_OWORD *)(v401 + 64) = v407;
            *(_BYTE *)(v401 + 88) = (_BYTE)v536;
            *(_QWORD *)(v401 + 80) = &off_24CA04D00;
            v408 = v537;
            *(_QWORD *)(v401 + 112) = v538;
            *(_OWORD *)(v401 + 96) = v408;
            *(_BYTE *)(v401 + 128) = v540[0];
            *(_QWORD *)(v401 + 120) = &off_24CA04D00;
            v409 = v541;
            *(_QWORD *)(v401 + 152) = v542;
            *(_OWORD *)(v401 + 136) = v409;
            v410 = v543;
            *(_QWORD *)(v401 + 176) = v544;
            *(_OWORD *)(v401 + 160) = v410;
            v411 = v545;
            v412 = v546;
            *(_DWORD *)(v401 + 216) = v547;
            *(_OWORD *)(v401 + 200) = v412;
            *(_OWORD *)(v401 + 184) = v411;
            v413 = v548;
            v414 = v550;
            *(_OWORD *)(v401 + 240) = v549;
            *(_OWORD *)(v401 + 256) = v414;
            *(_OWORD *)(v401 + 224) = v413;
            v415 = v551;
            *(_QWORD *)(v401 + 288) = v552;
            *(_OWORD *)(v401 + 272) = v415;
            v416 = v553;
            *(_QWORD *)(v401 + 312) = v554;
            *(_OWORD *)(v401 + 296) = v416;
            v417 = v555;
            *(_BYTE *)(v401 + 328) = v556;
            *(_QWORD *)(v401 + 320) = v417;
            *(_OWORD *)(v401 + 336) = v557;
            v557 = 0uLL;
            *(_BYTE *)(v401 + 352) = v558;
            v418 = v401 + 360;
            *(_QWORD *)&v572 = v401 + 360;
            v419 = (char *)v2[405].i64[1];
            if (v419 != v48)
            {
              v420 = 0;
              do
              {
                v421 = v397 + v420;
                v422 = &v48[v420];
                *(_QWORD *)(v397 + v420 - 360) = *(_QWORD *)&v48[v420 - 360];
                *(_QWORD *)(v397 + v420 - 352) = *(_QWORD *)&v48[v420 - 352];
                v423 = (_OWORD *)(v397 + v420 - 344);
                v424 = *(_OWORD *)&v48[v420 - 328];
                *v423 = *(_OWORD *)&v48[v420 - 344];
                v423[1] = v424;
                v425 = (_OWORD *)(v397 + v420 - 312);
                v426 = *(_OWORD *)&v48[v420 - 296];
                *v425 = *(_OWORD *)&v48[v420 - 312];
                v425[1] = v426;
                *(_BYTE *)(v397 + v420 - 272) = v48[v420 - 272];
                *(_QWORD *)(v397 + v420 - 280) = &off_24CA04D00;
                v427 = *(_OWORD *)&v48[v420 - 264];
                *(_QWORD *)(v421 - 248) = *(_QWORD *)&v48[v420 - 248];
                *(_OWORD *)(v397 + v420 - 264) = v427;
                *(_BYTE *)(v421 - 232) = v48[v420 - 232];
                *(_QWORD *)(v421 - 240) = &off_24CA04D00;
                v428 = *(_OWORD *)&v48[v420 - 224];
                *(_QWORD *)(v421 - 208) = *(_QWORD *)&v48[v420 - 208];
                *(_OWORD *)(v421 - 224) = v428;
                v429 = *(_OWORD *)&v48[v420 - 200];
                *(_QWORD *)(v421 - 184) = *(_QWORD *)&v48[v420 - 184];
                *(_OWORD *)(v421 - 200) = v429;
                v430 = *(_OWORD *)&v48[v420 - 176];
                v431 = *(_OWORD *)&v48[v420 - 160];
                *(_DWORD *)(v421 - 144) = *(_DWORD *)&v48[v420 - 144];
                *(_OWORD *)(v421 - 176) = v430;
                *(_OWORD *)(v421 - 160) = v431;
                v432 = *(_OWORD *)&v48[v420 - 136];
                v433 = *(_OWORD *)&v48[v420 - 120];
                *(_OWORD *)(v421 - 104) = *(_OWORD *)&v48[v420 - 104];
                *(_OWORD *)(v421 - 120) = v433;
                *(_OWORD *)(v421 - 136) = v432;
                v434 = *(_OWORD *)&v48[v420 - 88];
                *(_QWORD *)(v421 - 72) = *(_QWORD *)&v48[v420 - 72];
                *(_OWORD *)(v421 - 88) = v434;
                v435 = *(_OWORD *)&v48[v420 - 64];
                *(_QWORD *)(v421 - 48) = *(_QWORD *)&v48[v420 - 48];
                *(_OWORD *)(v421 - 64) = v435;
                v436 = *(_QWORD *)&v48[v420 - 40];
                *(_BYTE *)(v421 - 32) = v48[v420 - 32];
                *(_QWORD *)(v421 - 40) = v436;
                *(_OWORD *)(v421 - 24) = *(_OWORD *)&v48[v420 - 24];
                *((_QWORD *)v422 - 3) = 0;
                *((_QWORD *)v422 - 2) = 0;
                *(_BYTE *)(v421 - 8) = v48[v420 - 8];
                v420 -= 360;
              }
              while (&v48[v420] != v419);
              v397 += v420;
            }
            v437 = (char *)v2[406].i64[0];
            if (v437 != v48)
            {
              do
              {
                *(_QWORD *)v418 = *(_QWORD *)v48;
                *(_QWORD *)(v418 + 8) = *((_QWORD *)v48 + 1);
                v438 = *((_OWORD *)v48 + 2);
                *(_OWORD *)(v418 + 16) = *((_OWORD *)v48 + 1);
                *(_OWORD *)(v418 + 32) = v438;
                v439 = *((_OWORD *)v48 + 4);
                *(_OWORD *)(v418 + 48) = *((_OWORD *)v48 + 3);
                *(_OWORD *)(v418 + 64) = v439;
                *(_BYTE *)(v418 + 88) = v48[88];
                *(_QWORD *)(v418 + 80) = &off_24CA04D00;
                v440 = *((_OWORD *)v48 + 6);
                *(_QWORD *)(v418 + 112) = *((_QWORD *)v48 + 14);
                *(_OWORD *)(v418 + 96) = v440;
                *(_BYTE *)(v418 + 128) = v48[128];
                *(_QWORD *)(v418 + 120) = &off_24CA04D00;
                v441 = *(_OWORD *)(v48 + 136);
                *(_QWORD *)(v418 + 152) = *((_QWORD *)v48 + 19);
                *(_OWORD *)(v418 + 136) = v441;
                v442 = *((_OWORD *)v48 + 10);
                *(_QWORD *)(v418 + 176) = *((_QWORD *)v48 + 22);
                *(_OWORD *)(v418 + 160) = v442;
                v443 = *(_OWORD *)(v48 + 184);
                v444 = *(_OWORD *)(v48 + 200);
                *(_DWORD *)(v418 + 216) = *((_DWORD *)v48 + 54);
                *(_OWORD *)(v418 + 200) = v444;
                *(_OWORD *)(v418 + 184) = v443;
                v445 = *((_OWORD *)v48 + 14);
                v446 = *((_OWORD *)v48 + 16);
                *(_OWORD *)(v418 + 240) = *((_OWORD *)v48 + 15);
                *(_OWORD *)(v418 + 256) = v446;
                *(_OWORD *)(v418 + 224) = v445;
                v447 = *((_OWORD *)v48 + 17);
                *(_QWORD *)(v418 + 288) = *((_QWORD *)v48 + 36);
                *(_OWORD *)(v418 + 272) = v447;
                v448 = *(_OWORD *)(v48 + 296);
                *(_QWORD *)(v418 + 312) = *((_QWORD *)v48 + 39);
                *(_OWORD *)(v418 + 296) = v448;
                v449 = *((_QWORD *)v48 + 40);
                *(_BYTE *)(v418 + 328) = v48[328];
                *(_QWORD *)(v418 + 320) = v449;
                *(_OWORD *)(v418 + 336) = *((_OWORD *)v48 + 21);
                *((_QWORD *)v48 + 42) = 0;
                *((_QWORD *)v48 + 43) = 0;
                *(_BYTE *)(v418 + 352) = v48[352];
                v418 += 360;
                v48 += 360;
              }
              while (v48 != v437);
              v48 = (char *)v2[406].i64[0];
            }
            v450 = (char *)v2[405].i64[1];
            v2[405].i64[1] = v397;
            v2[406].i64[0] = v418;
            v451 = v2[406].i64[1];
            v2[406].i64[1] = *((_QWORD *)&v572 + 1);
            *((_QWORD *)&v572 + 1) = v451;
            *(_QWORD *)&__dst = v450;
            *((_QWORD *)&__dst + 1) = v450;
            if (v48 != v450)
            {
              do
              {
                *(_QWORD *)&v572 = v48 - 360;
                v452 = (std::__shared_weak_count *)*((_QWORD *)v48 - 2);
                if (v452)
                {
                  p_shared_owners = (unint64_t *)&v452->__shared_owners_;
                  do
                    v454 = __ldaxr(p_shared_owners);
                  while (__stlxr(v454 - 1, p_shared_owners));
                  if (!v454)
                  {
                    ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                    std::__shared_weak_count::__release_weak(v452);
                  }
                }
                v48 = (char *)v572;
              }
              while ((char *)v572 != v450);
              v48 = (char *)__dst;
            }
            if (v48)
              operator delete(v48);
          }
          else if (v48 == v47)
          {
            *(_QWORD *)v47 = v497;
            v384 = &v46[8 * ((v48 - v46) >> 3)];
            *((_QWORD *)v384 + 1) = v497;
            v384 += 8;
            v385 = v531;
            *(_OWORD *)(v384 + 24) = v532;
            *(_OWORD *)(v384 + 8) = v385;
            v386 = v533;
            *(_OWORD *)(v384 + 56) = v534;
            *(_OWORD *)(v384 + 40) = v386;
            v384[80] = v40;
            *((_QWORD *)v384 + 9) = &off_24CA04D00;
            v387 = v538;
            *(_OWORD *)(v384 + 88) = v537;
            v384[120] = v44;
            *((_QWORD *)v384 + 13) = v387;
            *((_QWORD *)v384 + 14) = &off_24CA04D00;
            v388 = v541;
            *((_QWORD *)v384 + 18) = v542;
            *((_OWORD *)v384 + 8) = v388;
            v389 = v543;
            *((_QWORD *)v384 + 21) = v544;
            *(_OWORD *)(v384 + 152) = v389;
            v390 = v545;
            v391 = v546;
            *((_DWORD *)v384 + 52) = v547;
            *((_OWORD *)v384 + 11) = v390;
            *((_OWORD *)v384 + 12) = v391;
            v392 = v548;
            v393 = v549;
            *(_OWORD *)(v384 + 248) = v550;
            *(_OWORD *)(v384 + 232) = v393;
            *(_OWORD *)(v384 + 216) = v392;
            v394 = v551;
            *((_QWORD *)v384 + 35) = v552;
            *(_OWORD *)(v384 + 264) = v394;
            v395 = v553;
            *((_QWORD *)v384 + 38) = v554;
            *((_OWORD *)v384 + 18) = v395;
            v396 = v555;
            v384[320] = v556;
            *((_QWORD *)v384 + 39) = v396;
            *((_QWORD *)v384 + 41) = 0;
            *((_QWORD *)v384 + 42) = 0;
            v557 = 0uLL;
            v384[344] = 0;
            v2[406].i64[0] = (uint64_t)(v47 + 360);
          }
          else
          {
            v468 = 0x4FA4FA4FA4FA4FA5 * ((v48 - v46) >> 3);
            *(_OWORD *)v569 = *(_OWORD *)&v503.__r_.__value_.__r.__words[1];
            v570 = v504;
            *(_OWORD *)__p = v505;
            v568 = v506;
            v576 = *(_OWORD *)v509;
            v577 = *(_QWORD *)&v509[16];
            v575 = *(_QWORD *)&v512[16];
            v574 = *(_OWORD *)v512;
            v566 = v514;
            v565 = v513;
            LODWORD(v573) = v517;
            __dst = v515;
            v572 = v516;
            v465 = v549;
            v466 = v548;
            v467 = v550;
            v564 = v522;
            v563 = v521;
            v562 = v524;
            v561 = v523;
            v560 = v526;
            v559 = v525;
            v104 = v47 - 360;
            v105 = v47;
            v106 = v47 - 360;
            v557 = 0uLL;
            if ((unint64_t)v47 >= 0x168)
            {
              do
              {
                *(_QWORD *)v105 = *(_QWORD *)v106;
                *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
                v107 = *((_OWORD *)v106 + 2);
                *((_OWORD *)v105 + 1) = *((_OWORD *)v106 + 1);
                *((_OWORD *)v105 + 2) = v107;
                v108 = *((_OWORD *)v106 + 4);
                *((_OWORD *)v105 + 3) = *((_OWORD *)v106 + 3);
                *((_OWORD *)v105 + 4) = v108;
                v105[88] = v106[88];
                *((_QWORD *)v105 + 10) = &off_24CA04D00;
                v109 = *((_OWORD *)v106 + 6);
                *((_QWORD *)v105 + 14) = *((_QWORD *)v106 + 14);
                *((_OWORD *)v105 + 6) = v109;
                v105[128] = v106[128];
                *((_QWORD *)v105 + 15) = &off_24CA04D00;
                v110 = *(_OWORD *)(v106 + 136);
                *((_QWORD *)v105 + 19) = *((_QWORD *)v106 + 19);
                *(_OWORD *)(v105 + 136) = v110;
                v111 = *((_OWORD *)v106 + 10);
                *((_QWORD *)v105 + 22) = *((_QWORD *)v106 + 22);
                *((_OWORD *)v105 + 10) = v111;
                v112 = *(_OWORD *)(v106 + 184);
                v113 = *(_OWORD *)(v106 + 200);
                *((_DWORD *)v105 + 54) = *((_DWORD *)v106 + 54);
                *(_OWORD *)(v105 + 200) = v113;
                *(_OWORD *)(v105 + 184) = v112;
                v114 = *((_OWORD *)v106 + 14);
                v115 = *((_OWORD *)v106 + 16);
                *((_OWORD *)v105 + 15) = *((_OWORD *)v106 + 15);
                *((_OWORD *)v105 + 16) = v115;
                *((_OWORD *)v105 + 14) = v114;
                v116 = *((_OWORD *)v106 + 17);
                *((_QWORD *)v105 + 36) = *((_QWORD *)v106 + 36);
                *((_OWORD *)v105 + 17) = v116;
                v117 = *(_OWORD *)(v106 + 296);
                *((_QWORD *)v105 + 39) = *((_QWORD *)v106 + 39);
                *(_OWORD *)(v105 + 296) = v117;
                v118 = *((_QWORD *)v106 + 40);
                v105[328] = v106[328];
                *((_QWORD *)v105 + 40) = v118;
                *((_OWORD *)v105 + 21) = *((_OWORD *)v106 + 21);
                *((_QWORD *)v106 + 42) = 0;
                *((_QWORD *)v106 + 43) = 0;
                v105[352] = v106[352];
                v105 += 360;
                v106 += 360;
              }
              while (v106 < v47);
            }
            v2[406].i64[0] = (uint64_t)v105;
            if (v47 != v48 + 360)
            {
              v469 = v44;
              v470 = v40;
              do
              {
                v358 = v104 - 360;
                v359 = v47 - 360;
                *(_QWORD *)v359 = *((_QWORD *)v104 - 45);
                *((_QWORD *)v47 - 44) = *((_QWORD *)v104 - 44);
                v360 = *(_OWORD *)(v104 - 328);
                *((_OWORD *)v359 + 1) = *(_OWORD *)(v104 - 344);
                *((_OWORD *)v359 + 2) = v360;
                v361 = *(_OWORD *)(v104 - 296);
                *((_OWORD *)v359 + 3) = *(_OWORD *)(v104 - 312);
                *((_OWORD *)v359 + 4) = v361;
                v359[88] = *(v104 - 272);
                v362 = *(_OWORD *)(v104 - 264);
                *((_QWORD *)v47 - 31) = *((_QWORD *)v104 - 31);
                *((_OWORD *)v359 + 6) = v362;
                *(v47 - 232) = *(v104 - 232);
                v363 = *((_OWORD *)v104 - 14);
                *((_QWORD *)v47 - 26) = *((_QWORD *)v104 - 26);
                *((_OWORD *)v47 - 14) = v363;
                v364 = *(_OWORD *)(v104 - 200);
                *((_QWORD *)v47 - 23) = *((_QWORD *)v104 - 23);
                *(_OWORD *)(v47 - 200) = v364;
                v365 = *((_OWORD *)v104 - 11);
                v366 = *((_OWORD *)v104 - 10);
                *((_DWORD *)v47 - 36) = *((_DWORD *)v104 - 36);
                *((_OWORD *)v47 - 11) = v365;
                *((_OWORD *)v47 - 10) = v366;
                *((_QWORD *)v47 - 17) = *((_QWORD *)v104 - 17);
                *((_QWORD *)v47 - 16) = *((_QWORD *)v104 - 16);
                *((_QWORD *)v47 - 15) = *((_QWORD *)v104 - 15);
                *((_QWORD *)v47 - 14) = *((_QWORD *)v104 - 14);
                *((_QWORD *)v47 - 13) = *((_QWORD *)v104 - 13);
                *((_QWORD *)v47 - 12) = *((_QWORD *)v104 - 12);
                v367 = *(_OWORD *)(v104 - 88);
                *((_QWORD *)v47 - 9) = *((_QWORD *)v104 - 9);
                *(_OWORD *)(v47 - 88) = v367;
                v368 = *((_OWORD *)v104 - 4);
                *((_QWORD *)v47 - 6) = *((_QWORD *)v104 - 6);
                *((_OWORD *)v47 - 4) = v368;
                v369 = *((_QWORD *)v104 - 5);
                *(v47 - 32) = *(v104 - 32);
                *((_QWORD *)v47 - 5) = v369;
                v370 = *(_OWORD *)(v104 - 24);
                *((_QWORD *)v104 - 3) = 0;
                *((_QWORD *)v104 - 2) = 0;
                v371 = (std::__shared_weak_count *)*((_QWORD *)v47 - 2);
                *(_OWORD *)(v47 - 24) = v370;
                if (v371)
                {
                  v372 = (unint64_t *)&v371->__shared_owners_;
                  do
                    v373 = __ldaxr(v372);
                  while (__stlxr(v373 - 1, v372));
                  if (!v373)
                  {
                    v472 = v371;
                    v484 = v104;
                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                    std::__shared_weak_count::__release_weak(v472);
                    v359 = v47 - 360;
                    v104 = v484;
                    v44 = v469;
                    v40 = v470;
                    v46 = v471;
                    v48 = v494;
                  }
                }
                *(v47 - 8) = *(v104 - 8);
                v47 = v359;
                v104 = v358;
              }
              while (v358 != v48);
            }
            *(int64x2_t *)v48 = vdupq_n_s64(v497);
            v377 = &v46[360 * v468];
            *((_OWORD *)v377 + 1) = *(_OWORD *)v569;
            *((_OWORD *)v377 + 2) = v570;
            *((_OWORD *)v377 + 3) = *(_OWORD *)__p;
            *((_OWORD *)v377 + 4) = v568;
            v377[88] = v40;
            *((_OWORD *)v377 + 6) = v576;
            *((_QWORD *)v377 + 14) = v577;
            v377[128] = v44;
            *((_QWORD *)v377 + 19) = v575;
            *(_OWORD *)(v377 + 136) = v574;
            *((_QWORD *)v377 + 22) = v566;
            *((_OWORD *)v377 + 10) = v565;
            *((_DWORD *)v377 + 54) = (_DWORD)v573;
            *(_OWORD *)(v377 + 200) = v572;
            *(_OWORD *)(v377 + 184) = __dst;
            *((_OWORD *)v377 + 14) = v466;
            *((_OWORD *)v377 + 15) = v465;
            v378 = v563;
            *((_OWORD *)v377 + 16) = v467;
            *((_OWORD *)v377 + 17) = v378;
            *((_QWORD *)v377 + 36) = v564;
            v379 = v562;
            *(_OWORD *)(v377 + 296) = v561;
            v377[328] = v560;
            v380 = v559;
            *((_QWORD *)v377 + 39) = v379;
            *((_QWORD *)v377 + 40) = v380;
            v381 = (std::__shared_weak_count *)*((_QWORD *)v377 + 43);
            *((_QWORD *)v377 + 42) = 0;
            *((_QWORD *)v377 + 43) = 0;
            if (v381)
            {
              v382 = (unint64_t *)&v381->__shared_owners_;
              do
                v383 = __ldaxr(v382);
              while (__stlxr(v383 - 1, v382));
              if (!v383)
              {
                ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                std::__shared_weak_count::__release_weak(v381);
                v46 = v471;
              }
            }
            v46[360 * v468 + 352] = 0;
          }
          v455 = (std::__shared_weak_count *)*((_QWORD *)&v557 + 1);
          if (*((_QWORD *)&v557 + 1))
          {
            v456 = (unint64_t *)(*((_QWORD *)&v557 + 1) + 8);
            do
              v457 = __ldaxr(v456);
            while (__stlxr(v457 - 1, v456));
            if (!v457)
            {
              ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
              std::__shared_weak_count::__release_weak(v455);
            }
          }
        }
        v487[2] = 0;
        *v487 = 0;
        v2[424] = vaddq_s64(v2[424], (int64x2_t)xmmword_2103B84D0);
        v458 = v528;
        if (v528)
        {
          v459 = (unint64_t *)&v528->__shared_owners_;
          do
            v460 = __ldaxr(v459);
          while (__stlxr(v460 - 1, v459));
          if (!v460)
          {
            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
            std::__shared_weak_count::__release_weak(v458);
          }
        }
        v55 = 0;
      }
LABEL_156:
      if ((v55 & 1) != 0)
        goto LABEL_157;
      v119 = 0;
      *(_BYTE *)(v475 + 4) = 0;
      *(_DWORD *)v475 = 0;
LABEL_159:
      if (v119)
      {
        sub_20E863438((uint64_t)&v530);
        v120 = (char *)v2[354].i64[1];
        v121 = (char *)v2[355].i64[0];
        if (v121 != v120)
        {
          v122 = (v121 - v120) >> 4;
          do
          {
            v123 = v122 >> 1;
            v124 = &v120[16 * (v122 >> 1)];
            v126 = *(_DWORD *)v124;
            v125 = v124 + 16;
            v122 += ~(v122 >> 1);
            if (v126)
              v122 = v123;
            else
              v120 = v125;
          }
          while (v122);
        }
        if (v120 == v121 || *(_DWORD *)v120 != 1)
        {
          v132 = 1;
          v133 = v2[324].i64[1];
          v134 = (_DWORD *)v2[325].i64[0];
          v135 = (_DWORD *)v133;
          v136 = (uint64_t)v134 - v133;
          if (v134 == (_DWORD *)v133)
            goto LABEL_184;
        }
        else
        {
          v127 = sub_20E86A980(&v531, (uint64_t)"error: landmark variable ", 25);
          sub_20FC37B38((uint64_t)&__dst);
          if ((SBYTE7(v572) & 0x80u) == 0)
            p_dst = &__dst;
          else
            p_dst = (__int128 *)__dst;
          if ((SBYTE7(v572) & 0x80u) == 0)
            v129 = BYTE7(v572);
          else
            v129 = *((_QWORD *)&__dst + 1);
          v130 = sub_20E86A980(v127, (uint64_t)p_dst, v129);
          sub_20E86A980(v130, (uint64_t)" with ID ", 9);
          v131 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v131, (uint64_t)" was not found.\n", 16);
          if (SBYTE7(v572) < 0)
            operator delete((void *)__dst);
          v132 = 0;
          v133 = v2[324].i64[1];
          v134 = (_DWORD *)v2[325].i64[0];
          v135 = (_DWORD *)v133;
          v136 = (uint64_t)v134 - v133;
          if (v134 == (_DWORD *)v133)
          {
LABEL_184:
            if (v135 != v134 && *v135 == v14)
            {
              if (v134 != (_DWORD *)v133)
              {
                v142 = ((uint64_t)v134 - v133) >> 4;
                do
                {
                  v143 = v142 >> 1;
                  v144 = (unsigned int *)(v133 + 16 * (v142 >> 1));
                  v146 = *v144;
                  v145 = v144 + 4;
                  v142 += ~(v142 >> 1);
                  if (v146 < v14)
                    v133 = (uint64_t)v145;
                  else
                    v142 = v143;
                }
                while (v142);
              }
              v481 = v132;
              if ((_DWORD *)v133 == v134 || *(_DWORD *)v133 != v14)
                v133 = (uint64_t)v134;
              v147 = *(_QWORD *)(v133 + 8);
              v148 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
              sub_20F622E88((uint64_t)&__dst);
              if ((SBYTE7(v572) & 0x80u) == 0)
                v149 = &__dst;
              else
                v149 = (__int128 *)__dst;
              if ((SBYTE7(v572) & 0x80u) == 0)
                v150 = BYTE7(v572);
              else
                v150 = *((_QWORD *)&__dst + 1);
              v151 = sub_20E86A980(v148, (uint64_t)v149, v150);
              sub_20E86A980(v151, (uint64_t)" with ID ", 9);
              v152 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v152, (uint64_t)" found (", 8);
              v153 = (_QWORD *)std::ostream::operator<<();
              v154 = sub_20E86A980(v153, (uint64_t)", ", 2);
              if (*(_BYTE *)(v147 + 20))
                v155 = "free";
              else
                v155 = "fixed";
              if (*(_BYTE *)(v147 + 20))
                v156 = 4;
              else
                v156 = 5;
              v157 = sub_20E86A980(v154, (uint64_t)v155, v156);
              sub_20E86A980(v157, (uint64_t)")\n", 2);
              v158 = v481;
              if (SBYTE7(v572) < 0)
                operator delete((void *)__dst);
              v495 = *(unsigned __int8 *)(v147 + 20);
              v159 = v14 + 1;
              v160 = v2[324].i64[1];
              v161 = (_DWORD *)v2[325].i64[0];
              v162 = (_DWORD *)v160;
              v163 = (uint64_t)v161 - v160;
              if (v161 == (_DWORD *)v160)
                goto LABEL_225;
LABEL_220:
              v169 = v163 >> 4;
              v162 = (_DWORD *)v160;
              do
              {
                v170 = v169 >> 1;
                v171 = &v162[4 * (v169 >> 1)];
                v173 = *v171;
                v172 = v171 + 4;
                v169 += ~(v169 >> 1);
                if (v173 < v159)
                  v162 = v172;
                else
                  v169 = v170;
              }
              while (v169);
              goto LABEL_225;
            }
            v164 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
            sub_20F622E88((uint64_t)&__dst);
            if ((SBYTE7(v572) & 0x80u) == 0)
              v165 = &__dst;
            else
              v165 = (__int128 *)__dst;
            if ((SBYTE7(v572) & 0x80u) == 0)
              v166 = BYTE7(v572);
            else
              v166 = *((_QWORD *)&__dst + 1);
            v167 = sub_20E86A980(v164, (uint64_t)v165, v166);
            sub_20E86A980(v167, (uint64_t)" with ID ", 9);
            v168 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v168, (uint64_t)" not found\n", 11);
            v159 = v14 + 1;
            if (SBYTE7(v572) < 0)
              operator delete((void *)__dst);
            v158 = 0;
            v495 = 0;
            v160 = v2[324].i64[1];
            v161 = (_DWORD *)v2[325].i64[0];
            v162 = (_DWORD *)v160;
            v163 = (uint64_t)v161 - v160;
            if (v161 != (_DWORD *)v160)
              goto LABEL_220;
LABEL_225:
            if (v162 == v161 || *v162 != v159)
            {
              v195 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
              sub_20F622E88((uint64_t)&__dst);
              if ((SBYTE7(v572) & 0x80u) == 0)
                v196 = &__dst;
              else
                v196 = (__int128 *)__dst;
              if ((SBYTE7(v572) & 0x80u) == 0)
                v197 = BYTE7(v572);
              else
                v197 = *((_QWORD *)&__dst + 1);
              v198 = sub_20E86A980(v195, (uint64_t)v196, v197);
              sub_20E86A980(v198, (uint64_t)" with ID ", 9);
              v199 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v199, (uint64_t)" not found\n", 11);
              if (SBYTE7(v572) < 0)
              {
                operator delete((void *)__dst);
                v190 = 0;
                v191 = v2[324].i64[1];
                v192 = (_DWORD *)v2[325].i64[0];
                v193 = (_DWORD *)v191;
                v194 = (uint64_t)v192 - v191;
                if (v192 == (_DWORD *)v191)
                  goto LABEL_267;
              }
              else
              {
                v190 = 0;
                v191 = v2[324].i64[1];
                v192 = (_DWORD *)v2[325].i64[0];
                v193 = (_DWORD *)v191;
                v194 = (uint64_t)v192 - v191;
                if (v192 == (_DWORD *)v191)
                  goto LABEL_267;
              }
            }
            else
            {
              if (v161 != (_DWORD *)v160)
              {
                v174 = ((uint64_t)v161 - v160) >> 4;
                do
                {
                  v175 = v174 >> 1;
                  v176 = (unsigned int *)(v160 + 16 * (v174 >> 1));
                  v178 = *v176;
                  v177 = v176 + 4;
                  v174 += ~(v174 >> 1);
                  if (v178 < v159)
                    v160 = (uint64_t)v177;
                  else
                    v174 = v175;
                }
                while (v174);
              }
              v482 = v158;
              if ((_DWORD *)v160 == v161 || *(_DWORD *)v160 != v159)
                v160 = (uint64_t)v161;
              v179 = *(_QWORD *)(v160 + 8);
              v180 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
              sub_20F622E88((uint64_t)&__dst);
              if ((SBYTE7(v572) & 0x80u) == 0)
                v181 = &__dst;
              else
                v181 = (__int128 *)__dst;
              if ((SBYTE7(v572) & 0x80u) == 0)
                v182 = BYTE7(v572);
              else
                v182 = *((_QWORD *)&__dst + 1);
              v183 = sub_20E86A980(v180, (uint64_t)v181, v182);
              sub_20E86A980(v183, (uint64_t)" with ID ", 9);
              v184 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v184, (uint64_t)" found (", 8);
              v185 = (_QWORD *)std::ostream::operator<<();
              v186 = sub_20E86A980(v185, (uint64_t)", ", 2);
              if (*(_BYTE *)(v179 + 20))
                v187 = "free";
              else
                v187 = "fixed";
              if (*(_BYTE *)(v179 + 20))
                v188 = 4;
              else
                v188 = 5;
              v189 = sub_20E86A980(v186, (uint64_t)v187, v188);
              sub_20E86A980(v189, (uint64_t)")\n", 2);
              v190 = v482;
              if (SBYTE7(v572) < 0)
                operator delete((void *)__dst);
              v495 |= *(unsigned __int8 *)(v179 + 20);
              v191 = v2[324].i64[1];
              v192 = (_DWORD *)v2[325].i64[0];
              v193 = (_DWORD *)v191;
              v194 = (uint64_t)v192 - v191;
              if (v192 == (_DWORD *)v191)
              {
LABEL_267:
                if (v193 == v192 || *v193 != v15)
                {
                  v226 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                  sub_20F622E88((uint64_t)&__dst);
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v227 = &__dst;
                  else
                    v227 = (__int128 *)__dst;
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v228 = BYTE7(v572);
                  else
                    v228 = *((_QWORD *)&__dst + 1);
                  v229 = sub_20E86A980(v226, (uint64_t)v227, v228);
                  sub_20E86A980(v229, (uint64_t)" with ID ", 9);
                  v230 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v230, (uint64_t)" not found\n", 11);
                  if (SBYTE7(v572) < 0)
                  {
                    operator delete((void *)__dst);
                    v221 = 0;
                    v222 = v2[324].i64[1];
                    v223 = (_DWORD *)v2[325].i64[0];
                    v224 = (_DWORD *)v222;
                    v225 = (uint64_t)v223 - v222;
                    if (v223 == (_DWORD *)v222)
                      goto LABEL_309;
                  }
                  else
                  {
                    v221 = 0;
                    v222 = v2[324].i64[1];
                    v223 = (_DWORD *)v2[325].i64[0];
                    v224 = (_DWORD *)v222;
                    v225 = (uint64_t)v223 - v222;
                    if (v223 == (_DWORD *)v222)
                      goto LABEL_309;
                  }
                }
                else
                {
                  if (v192 != (_DWORD *)v191)
                  {
                    v205 = ((uint64_t)v192 - v191) >> 4;
                    do
                    {
                      v206 = v205 >> 1;
                      v207 = (unsigned int *)(v191 + 16 * (v205 >> 1));
                      v209 = *v207;
                      v208 = v207 + 4;
                      v205 += ~(v205 >> 1);
                      if (v209 < v15)
                        v191 = (uint64_t)v208;
                      else
                        v205 = v206;
                    }
                    while (v205);
                  }
                  v483 = v190;
                  if ((_DWORD *)v191 == v192 || *(_DWORD *)v191 != v15)
                    v191 = (uint64_t)v192;
                  v210 = *(_QWORD *)(v191 + 8);
                  v211 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                  sub_20F622E88((uint64_t)&__dst);
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v212 = &__dst;
                  else
                    v212 = (__int128 *)__dst;
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v213 = BYTE7(v572);
                  else
                    v213 = *((_QWORD *)&__dst + 1);
                  v214 = sub_20E86A980(v211, (uint64_t)v212, v213);
                  sub_20E86A980(v214, (uint64_t)" with ID ", 9);
                  v215 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v215, (uint64_t)" found (", 8);
                  v216 = (_QWORD *)std::ostream::operator<<();
                  v217 = sub_20E86A980(v216, (uint64_t)", ", 2);
                  if (*(_BYTE *)(v210 + 20))
                    v218 = "free";
                  else
                    v218 = "fixed";
                  if (*(_BYTE *)(v210 + 20))
                    v219 = 4;
                  else
                    v219 = 5;
                  v220 = sub_20E86A980(v217, (uint64_t)v218, v219);
                  sub_20E86A980(v220, (uint64_t)")\n", 2);
                  v221 = v483;
                  if (SBYTE7(v572) < 0)
                    operator delete((void *)__dst);
                  v495 |= *(unsigned __int8 *)(v210 + 20);
                  v222 = v2[324].i64[1];
                  v223 = (_DWORD *)v2[325].i64[0];
                  v224 = (_DWORD *)v222;
                  v225 = (uint64_t)v223 - v222;
                  if (v223 == (_DWORD *)v222)
                  {
LABEL_309:
                    if (v224 != v223 && *v224 == v45)
                    {
                      if (v223 != (_DWORD *)v222)
                      {
                        v236 = ((uint64_t)v223 - v222) >> 4;
                        do
                        {
                          v237 = v236 >> 1;
                          v238 = (unsigned int *)(v222 + 16 * (v236 >> 1));
                          v240 = *v238;
                          v239 = v238 + 4;
                          v236 += ~(v236 >> 1);
                          if (v240 < v45)
                            v222 = (uint64_t)v239;
                          else
                            v236 = v237;
                        }
                        while (v236);
                      }
                      v241 = v221;
                      if ((_DWORD *)v222 == v223 || *(_DWORD *)v222 != v45)
                        v222 = (uint64_t)v223;
                      v242 = *(_QWORD *)(v222 + 8);
                      v243 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                      sub_20F622E88((uint64_t)&__dst);
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v244 = &__dst;
                      else
                        v244 = (__int128 *)__dst;
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v245 = BYTE7(v572);
                      else
                        v245 = *((_QWORD *)&__dst + 1);
                      v246 = sub_20E86A980(v243, (uint64_t)v244, v245);
                      v247 = v241;
                      sub_20E86A980(v246, (uint64_t)" with ID ", 9);
                      v248 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v248, (uint64_t)" found (", 8);
                      v249 = (_QWORD *)std::ostream::operator<<();
                      v250 = sub_20E86A980(v249, (uint64_t)", ", 2);
                      if (*(_BYTE *)(v242 + 20))
                        v251 = "free";
                      else
                        v251 = "fixed";
                      if (*(_BYTE *)(v242 + 20))
                        v252 = 4;
                      else
                        v252 = 5;
                      v253 = sub_20E86A980(v250, (uint64_t)v251, v252);
                      sub_20E86A980(v253, (uint64_t)")\n", 2);
                      if (SBYTE7(v572) < 0)
                        operator delete((void *)__dst);
                      v495 |= *(unsigned __int8 *)(v242 + 20);
                      v254 = v2[342].i64[1];
                      v255 = (_DWORD *)v2[343].i64[0];
                      v256 = (_DWORD *)v254;
                      v257 = (uint64_t)v255 - v254;
                      v258 = v493;
                      if (v255 == (_DWORD *)v254)
                        goto LABEL_350;
LABEL_345:
                      v264 = v257 >> 4;
                      v256 = (_DWORD *)v254;
                      do
                      {
                        v265 = v264 >> 1;
                        v266 = &v256[4 * (v264 >> 1)];
                        v268 = *v266;
                        v267 = v266 + 4;
                        v264 += ~(v264 >> 1);
                        if (v268 < v258)
                          v256 = v267;
                        else
                          v264 = v265;
                      }
                      while (v264);
                      goto LABEL_350;
                    }
                    v259 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                    sub_20F622E88((uint64_t)&__dst);
                    if ((SBYTE7(v572) & 0x80u) == 0)
                      v260 = &__dst;
                    else
                      v260 = (__int128 *)__dst;
                    if ((SBYTE7(v572) & 0x80u) == 0)
                      v261 = BYTE7(v572);
                    else
                      v261 = *((_QWORD *)&__dst + 1);
                    v262 = sub_20E86A980(v259, (uint64_t)v260, v261);
                    sub_20E86A980(v262, (uint64_t)" with ID ", 9);
                    v263 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v263, (uint64_t)" not found\n", 11);
                    if (SBYTE7(v572) < 0)
                      operator delete((void *)__dst);
                    v247 = 0;
                    v254 = v2[342].i64[1];
                    v255 = (_DWORD *)v2[343].i64[0];
                    v256 = (_DWORD *)v254;
                    v257 = (uint64_t)v255 - v254;
                    v258 = v493;
                    if (v255 != (_DWORD *)v254)
                      goto LABEL_345;
LABEL_350:
                    if (v256 == v255 || *v256 != v493)
                    {
                      v291 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                      sub_20FC37D50((uint64_t)&__dst);
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v292 = &__dst;
                      else
                        v292 = (__int128 *)__dst;
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v293 = BYTE7(v572);
                      else
                        v293 = *((_QWORD *)&__dst + 1);
                      v294 = sub_20E86A980(v291, (uint64_t)v292, v293);
                      sub_20E86A980(v294, (uint64_t)" with ID ", 9);
                      v295 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v295, (uint64_t)" not found\n", 11);
                      if (SBYTE7(v572) < 0)
                      {
                        operator delete((void *)__dst);
                        v280 = 0;
                        v287 = v2[354].i64[1];
                        v288 = (_DWORD *)v2[355].i64[0];
                        v289 = (_DWORD *)v287;
                        v290 = (uint64_t)v288 - v287;
                        if (v288 == (_DWORD *)v287)
                          goto LABEL_392;
                      }
                      else
                      {
                        v280 = 0;
                        v287 = v2[354].i64[1];
                        v288 = (_DWORD *)v2[355].i64[0];
                        v289 = (_DWORD *)v287;
                        v290 = (uint64_t)v288 - v287;
                        if (v288 == (_DWORD *)v287)
                          goto LABEL_392;
                      }
                    }
                    else
                    {
                      if (v255 != (_DWORD *)v254)
                      {
                        v269 = ((uint64_t)v255 - v254) >> 4;
                        do
                        {
                          v270 = v269 >> 1;
                          v271 = (unsigned int *)(v254 + 16 * (v269 >> 1));
                          v273 = *v271;
                          v272 = v271 + 4;
                          v269 += ~(v269 >> 1);
                          if (v273 < v493)
                            v254 = (uint64_t)v272;
                          else
                            v269 = v270;
                        }
                        while (v269);
                      }
                      v274 = v247;
                      if ((_DWORD *)v254 == v255 || *(_DWORD *)v254 != v493)
                        v254 = (uint64_t)v255;
                      v275 = *(_QWORD *)(v254 + 8);
                      v276 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                      sub_20FC37D50((uint64_t)&__dst);
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v277 = &__dst;
                      else
                        v277 = (__int128 *)__dst;
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v278 = BYTE7(v572);
                      else
                        v278 = *((_QWORD *)&__dst + 1);
                      v279 = sub_20E86A980(v276, (uint64_t)v277, v278);
                      v280 = v274;
                      sub_20E86A980(v279, (uint64_t)" with ID ", 9);
                      v281 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v281, (uint64_t)" found (", 8);
                      v282 = (_QWORD *)std::ostream::operator<<();
                      v283 = sub_20E86A980(v282, (uint64_t)", ", 2);
                      if (*(_BYTE *)(v275 + 20))
                        v284 = "free";
                      else
                        v284 = "fixed";
                      if (*(_BYTE *)(v275 + 20))
                        v285 = 4;
                      else
                        v285 = 5;
                      v286 = sub_20E86A980(v283, (uint64_t)v284, v285);
                      sub_20E86A980(v286, (uint64_t)")\n", 2);
                      if (SBYTE7(v572) < 0)
                        operator delete((void *)__dst);
                      v495 |= *(unsigned __int8 *)(v275 + 20);
                      v287 = v2[354].i64[1];
                      v288 = (_DWORD *)v2[355].i64[0];
                      v289 = (_DWORD *)v287;
                      v290 = (uint64_t)v288 - v287;
                      if (v288 == (_DWORD *)v287)
                      {
LABEL_392:
                        if (v289 == v288 || *v289 != 1)
                        {
                          v322 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                          sub_20FC37B38((uint64_t)&__dst);
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v323 = &__dst;
                          else
                            v323 = (__int128 *)__dst;
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v324 = BYTE7(v572);
                          else
                            v324 = *((_QWORD *)&__dst + 1);
                          v325 = sub_20E86A980(v322, (uint64_t)v323, v324);
                          sub_20E86A980(v325, (uint64_t)" with ID ", 9);
                          v326 = (_QWORD *)std::ostream::operator<<();
                          sub_20E86A980(v326, (uint64_t)" not found\n", 11);
                          if (SBYTE7(v572) < 0)
                          {
                            operator delete((void *)__dst);
                            v312 = 0;
                            v319 = (char *)v2[405].i64[1];
                            v320 = (char *)v2[406].i64[0];
                            v321 = v320 - v319;
                            if (v320 == v319)
                              goto LABEL_445;
                          }
                          else
                          {
                            v312 = 0;
                            v319 = (char *)v2[405].i64[1];
                            v320 = (char *)v2[406].i64[0];
                            v321 = v320 - v319;
                            if (v320 == v319)
                              goto LABEL_445;
                          }
                        }
                        else
                        {
                          if (v288 != (_DWORD *)v287)
                          {
                            v301 = ((uint64_t)v288 - v287) >> 4;
                            do
                            {
                              v302 = v301 >> 1;
                              v303 = (int *)(v287 + 16 * (v301 >> 1));
                              v305 = *v303;
                              v304 = v303 + 4;
                              v301 += ~(v301 >> 1);
                              if (v305)
                                v301 = v302;
                              else
                                v287 = (uint64_t)v304;
                            }
                            while (v301);
                          }
                          v306 = v280;
                          if ((_DWORD *)v287 == v288 || *(_DWORD *)v287 != 1)
                            v287 = (uint64_t)v288;
                          v307 = *(_QWORD *)(v287 + 8);
                          v308 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                          sub_20FC37B38((uint64_t)&__dst);
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v309 = &__dst;
                          else
                            v309 = (__int128 *)__dst;
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v310 = BYTE7(v572);
                          else
                            v310 = *((_QWORD *)&__dst + 1);
                          v311 = sub_20E86A980(v308, (uint64_t)v309, v310);
                          v312 = v306;
                          sub_20E86A980(v311, (uint64_t)" with ID ", 9);
                          v313 = (_QWORD *)std::ostream::operator<<();
                          sub_20E86A980(v313, (uint64_t)" found (", 8);
                          v314 = (_QWORD *)std::ostream::operator<<();
                          v315 = sub_20E86A980(v314, (uint64_t)", ", 2);
                          if (*(_BYTE *)(v307 + 20))
                            v316 = "free";
                          else
                            v316 = "fixed";
                          if (*(_BYTE *)(v307 + 20))
                            v317 = 4;
                          else
                            v317 = 5;
                          v318 = sub_20E86A980(v315, (uint64_t)v316, v317);
                          sub_20E86A980(v318, (uint64_t)")\n", 2);
                          if (SBYTE7(v572) < 0)
                            operator delete((void *)__dst);
                          v495 |= *(unsigned __int8 *)(v307 + 20);
                          v319 = (char *)v2[405].i64[1];
                          v320 = (char *)v2[406].i64[0];
                          v321 = v320 - v319;
                          if (v320 == v319)
                          {
LABEL_445:
                            if (v495)
                            {
                              v337 = v312 != 0;
                              v338 = (char)v539;
                              if ((v539 & 0x10) == 0)
                                goto LABEL_447;
LABEL_457:
                              v346 = v538;
                              v347 = (const void **)&v534;
                              if (v538 < *((_QWORD *)&v534 + 1))
                              {
                                v538 = *((_QWORD *)&v534 + 1);
                                v346 = *((_QWORD *)&v534 + 1);
                                v347 = (const void **)&v534;
                              }
LABEL_460:
                              v348 = *v347;
                              v339 = v346 - (_QWORD)*v347;
                              if (v339 >= 0x7FFFFFFFFFFFFFF8)
                                sub_20E860B7C();
                              if (v339 >= 0x17)
                              {
                                v349 = (v339 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v339 | 7) != 0x17)
                                  v349 = v339 | 7;
                                v350 = v349 + 1;
                                v340 = (__int128 *)operator new(v349 + 1);
                                *((_QWORD *)&__dst + 1) = v339;
                                *(_QWORD *)&v572 = v350 | 0x8000000000000000;
                                *(_QWORD *)&__dst = v340;
                              }
                              else
                              {
                                BYTE7(v572) = v346 - *(_BYTE *)v347;
                                v340 = &__dst;
                                if (!v339)
                                  goto LABEL_468;
                              }
                              memmove(v340, v348, v339);
                              goto LABEL_468;
                            }
                            v341 = sub_20E86A980(&v531, (uint64_t)"error: factor ", 14);
                            sub_20F921478((uint64_t)&__dst);
                            if ((SBYTE7(v572) & 0x80u) == 0)
                              v342 = &__dst;
                            else
                              v342 = (__int128 *)__dst;
                            if ((SBYTE7(v572) & 0x80u) == 0)
                              v343 = BYTE7(v572);
                            else
                              v343 = *((_QWORD *)&__dst + 1);
                            v344 = sub_20E86A980(v341, (uint64_t)v342, v343);
                            sub_20E86A980(v344, (uint64_t)" with ID ", 9);
                            v345 = (_QWORD *)std::ostream::operator<<();
                            sub_20E86A980(v345, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
                            if (SBYTE7(v572) < 0)
                            {
                              operator delete((void *)__dst);
                              v337 = 0;
                              v338 = (char)v539;
                              if ((v539 & 0x10) != 0)
                                goto LABEL_457;
                            }
                            else
                            {
                              v337 = 0;
                              v338 = (char)v539;
                              if ((v539 & 0x10) != 0)
                                goto LABEL_457;
                            }
LABEL_447:
                            if ((v338 & 8) != 0)
                            {
                              v346 = *((_QWORD *)&v533 + 1);
                              v347 = (const void **)&v532 + 1;
                              goto LABEL_460;
                            }
                            v339 = 0;
                            BYTE7(v572) = 0;
                            v340 = &__dst;
LABEL_468:
                            *((_BYTE *)v340 + v339) = 0;
                            *(_OWORD *)&v503.__r_.__value_.__l.__data_ = __dst;
                            v503.__r_.__value_.__r.__words[2] = v572;
                            LOBYTE(v504) = v337;
                            v530.i64[0] = v478;
                            *(uint64_t *)((char *)v530.i64 + *(_QWORD *)(v478 - 24)) = v477;
                            *(_QWORD *)&v531 = v476;
                            *((_QWORD *)&v531 + 1) = v479;
                            if (SHIBYTE(v537) < 0)
                              operator delete(v536);
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            MEMORY[0x212BC6290](v540);
                            v351 = std::string::insert(&v503, 0, "Failed to add the factor into linear system. This could be due to duplicated factor IDs ('", 0x5AuLL);
                            v352 = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
                            *(_QWORD *)&v568 = *((_QWORD *)&v351->__r_.__value_.__l + 2);
                            *(_OWORD *)__p = v352;
                            v351->__r_.__value_.__l.__size_ = 0;
                            v351->__r_.__value_.__r.__words[2] = 0;
                            v351->__r_.__value_.__r.__words[0] = 0;
                            v353 = std::string::append((std::string *)__p, "').", 3uLL);
                            v354 = *(_OWORD *)&v353->__r_.__value_.__l.__data_;
                            *(_QWORD *)&v570 = *((_QWORD *)&v353->__r_.__value_.__l + 2);
                            *(_OWORD *)v569 = v354;
                            v353->__r_.__value_.__l.__size_ = 0;
                            v353->__r_.__value_.__r.__words[2] = 0;
                            v353->__r_.__value_.__r.__words[0] = 0;
                            if ((SBYTE7(v570) & 0x80u) == 0)
                              v355 = v569;
                            else
                              v355 = (void **)v569[0];
                            if ((SBYTE7(v570) & 0x80u) == 0)
                              v356 = BYTE7(v570);
                            else
                              v356 = (uint64_t)v569[1];
                            v357 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPlaneFactorUtil.h", 76, (uint64_t)"result", 6, (uint64_t)v355, v356, (void (*)(void **))sub_21023DDB0);
                            if (SBYTE7(v570) < 0)
                            {
                              operator delete(v569[0]);
                              if ((SBYTE7(v568) & 0x80000000) == 0)
                                goto LABEL_480;
LABEL_11:
                              operator delete(__p[0]);
                              if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
                                goto LABEL_481;
                            }
                            else
                            {
                              if (SBYTE7(v568) < 0)
                                goto LABEL_11;
LABEL_480:
                              if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
                              {
LABEL_481:
                                operator delete(v503.__r_.__value_.__l.__data_);
                                if (v357)
LABEL_572:
                                  abort();
                                goto LABEL_13;
                              }
                            }
                            if (v357)
                              goto LABEL_572;
                            goto LABEL_13;
                          }
                        }
                        v327 = 0x4FA4FA4FA4FA4FA5 * (v321 >> 3);
                        do
                        {
                          v328 = v327 >> 1;
                          v329 = (unint64_t *)&v319[360 * (v327 >> 1)];
                          v330 = *v329;
                          v331 = (char *)(v329 + 45);
                          v327 += ~(v327 >> 1);
                          if (v330 < v497)
                            v319 = v331;
                          else
                            v327 = v328;
                        }
                        while (v327);
                        if (v320 != v319 && *(_QWORD *)v319 == v497)
                        {
                          v332 = sub_20E86A980(&v531, (uint64_t)"error: factor ", 14);
                          sub_20F921478((uint64_t)&__dst);
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v333 = &__dst;
                          else
                            v333 = (__int128 *)__dst;
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v334 = BYTE7(v572);
                          else
                            v334 = *((_QWORD *)&__dst + 1);
                          v335 = sub_20E86A980(v332, (uint64_t)v333, v334);
                          sub_20E86A980(v335, (uint64_t)" with the same ID ", 18);
                          v336 = (_QWORD *)std::ostream::operator<<();
                          sub_20E86A980(v336, (uint64_t)" already exists.\n", 17);
                          if (SBYTE7(v572) < 0)
                            operator delete((void *)__dst);
                          v312 = 0;
                        }
                        goto LABEL_445;
                      }
                    }
                    v296 = v290 >> 4;
                    v289 = (_DWORD *)v287;
                    do
                    {
                      v297 = v296 >> 1;
                      v298 = &v289[4 * (v296 >> 1)];
                      v300 = *v298;
                      v299 = v298 + 4;
                      v296 += ~(v296 >> 1);
                      if (v300)
                        v296 = v297;
                      else
                        v289 = v299;
                    }
                    while (v296);
                    goto LABEL_392;
                  }
                }
                v231 = v225 >> 4;
                v224 = (_DWORD *)v222;
                do
                {
                  v232 = v231 >> 1;
                  v233 = &v224[4 * (v231 >> 1)];
                  v235 = *v233;
                  v234 = v233 + 4;
                  v231 += ~(v231 >> 1);
                  if (v235 < v45)
                    v224 = v234;
                  else
                    v231 = v232;
                }
                while (v231);
                goto LABEL_309;
              }
            }
            v200 = v194 >> 4;
            v193 = (_DWORD *)v191;
            do
            {
              v201 = v200 >> 1;
              v202 = &v193[4 * (v200 >> 1)];
              v204 = *v202;
              v203 = v202 + 4;
              v200 += ~(v200 >> 1);
              if (v204 < v15)
                v193 = v203;
              else
                v200 = v201;
            }
            while (v200);
            goto LABEL_267;
          }
        }
        v137 = v136 >> 4;
        v135 = (_DWORD *)v133;
        do
        {
          v138 = v137 >> 1;
          v139 = &v135[4 * (v137 >> 1)];
          v141 = *v139;
          v140 = v139 + 4;
          v137 += ~(v137 >> 1);
          if (v141 < v14)
            v135 = v140;
          else
            v137 = v138;
        }
        while (v137);
        goto LABEL_184;
      }
LABEL_13:
      ++v497;
      v1 = v489;
LABEL_14:
      v10 += 21;
      if (v10 == v11)
        goto LABEL_554;
    }
  }
  return result;
}

void sub_20FC176D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FC37AAC(v1 - 240);
  sub_20F8AF10C((uint64_t)&STACK[0x3E0]);
  sub_20F8AF174((uint64_t)&STACK[0x280]);
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_20FC17718(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

char *sub_20FC17820(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  char *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  _BYTE v35[36];
  unsigned int v36;
  uint64_t v37;

  v3 = *a2;
  v5 = *(__int128 **)(a1 + 488);
  v4 = *(char **)(a1 + 496);
  if (v4 == (char *)v5)
  {
    v5 = *(__int128 **)(a1 + 496);
    goto LABEL_11;
  }
  v6 = (v4 - (char *)v5) >> 4;
  do
  {
    v7 = v6 >> 1;
    v8 = &v5[v6 >> 1];
    v10 = *(_DWORD *)v8;
    v9 = v8 + 1;
    v6 += ~(v6 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v6 = v7;
  }
  while (v6);
  if (v4 == (char *)v5 || v3 != *(_DWORD *)v5)
  {
LABEL_11:
    v11 = *((unsigned __int8 *)a2 + 4);
    *(_OWORD *)&v35[4] = *(_OWORD *)a2;
    *(_OWORD *)&v35[20] = *((_OWORD *)a2 + 1);
    v12 = sub_20F619254(a1 + 512);
    *(_DWORD *)v12 = -1;
    *(_BYTE *)(v12 + 4) = 1;
    *(_DWORD *)(v12 + 8) = 0;
    *(_OWORD *)(v12 + 12) = *(_OWORD *)v35;
    *(_OWORD *)(v12 + 28) = *(_OWORD *)&v35[16];
    *(_DWORD *)(v12 + 44) = *(_DWORD *)&v35[32];
    v36 = v3;
    v37 = v12;
    v4 = sub_20F618FEC((char **)(a1 + 488), v5, (uint64_t)&v36);
    if (!v11)
    {
LABEL_34:
      *(_BYTE *)(a1 + 1618) = 0;
      *(_BYTE *)(a1 + 1616) = 0;
      return v4;
    }
    v13 = *(char **)(a1 + 2280);
    v14 = *(_QWORD *)(a1 + 2288);
    if ((unint64_t)v13 < v14)
    {
      *(_DWORD *)v13 = v3;
      v15 = (uint64_t)(v13 + 4);
LABEL_33:
      *(_QWORD *)(a1 + 2280) = v15;
      goto LABEL_34;
    }
    v16 = *(char **)(a1 + 2272);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = v3;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_31;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = v3;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_31:
        *(_QWORD *)(a1 + 2272) = v22;
        *(_QWORD *)(a1 + 2280) = v15;
        *(_QWORD *)(a1 + 2288) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_33;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_40;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_40;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_40:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_31;
  }
  return v4;
}

void sub_20FC17A74(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 *v28;
  char *v29;
  __int128 *i;
  __int128 v31;
  char *v32;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (!v21)
  {
    v22 = 0;
    v23 = (char *)(16 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_31;
    goto LABEL_21;
  }
  if (v21 >> 60)
    sub_20E877A38();
  v22 = (char *)operator new(16 * v21);
  v23 = &v22[16 * v8];
  v24 = &v22[16 * v21];
  if (v8 == v21)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  if (v6 == v9)
  {
    v29 = v23;
    i = (__int128 *)a1[1];
    if (i == v9)
      goto LABEL_36;
    goto LABEL_35;
  }
  v28 = v9;
  do
  {
    v29 = v23 - 16;
    *((_OWORD *)v23 - 1) = *--v28;
    v23 -= 16;
  }
  while (v28 != v6);
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
LABEL_35:
    v31 = *v9++;
    *(_OWORD *)v27 = v31;
  }
LABEL_36:
  v32 = *a1;
  *a1 = v29;
  a1[1] = v27;
  a1[2] = v24;
  if (v32)
    operator delete(v32);
}

void sub_20FC17CDC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FC17CF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  double *v29;
  const double *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  float64x2x2_t v36;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 232 * v5;
    }
    v7 = 232 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 1856;
    v8 = *(_QWORD *)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v9 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v10 = v9;
      v12 = *(char **)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v12 >= v11)
      {
        v15 = *(char **)(a1 + 8);
        v16 = (v12 - v15) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          sub_20E867F44();
        v18 = v11 - (_QWORD)v15;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 60)
            sub_20E877A38();
          v20 = (char *)operator new(16 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = MEMORY[0x24BDAE450];
        v22 = &v20[16 * v16];
        v23 = &v20[16 * v19];
        *(_QWORD *)v22 = v10;
        *((_QWORD *)v22 + 1) = v21;
        v14 = v22 + 16;
        if (v12 == v15)
        {
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(a1 + 24) = v23;
        }
        else
        {
          v24 = v12 - v15 - 16;
          if (v24 < 0x90
            || &v12[-(v24 & 0xFFFFFFFFFFFFFFF0) - 16] < v22
            && &v20[v12 - v15 - (v24 & 0xFFFFFFFFFFFFFFF0) - 16] < v12)
          {
            goto LABEL_28;
          }
          v25 = (v24 >> 4) + 1;
          v26 = 16 * (v25 & 0x1FFFFFFFFFFFFFFELL);
          v27 = &v22[-v26];
          v28 = &v12[-v26];
          v29 = (double *)(v22 - 32);
          v30 = (const double *)(v12 - 32);
          v31 = v25 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v36 = vld2q_f64(v30);
            v30[2] = 0.0;
            *v30 = 0.0;
            v30 -= 4;
            vst2q_f64(v29, v36);
            v29 -= 4;
            v31 -= 2;
          }
          while (v31);
          v22 = v27;
          v12 = v28;
          if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_28:
            v27 = v22;
            do
            {
              v32 = *((_QWORD *)v12 - 2);
              v12 -= 16;
              *(_QWORD *)v12 = 0;
              *((_QWORD *)v27 - 2) = v32;
              v27 -= 16;
              *((_QWORD *)v27 + 1) = *((_QWORD *)v12 + 1);
            }
            while (v12 != v15);
          }
          v12 = *(char **)(a1 + 8);
          v33 = *(char **)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v27;
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(a1 + 24) = v23;
          if (v33 != v12)
          {
            v34 = v33;
            do
            {
              v35 = *((_QWORD *)v34 - 2);
              v34 -= 16;
              *(_QWORD *)v34 = 0;
              if (v35)
                (*((void (**)(void))v33 - 1))();
              v33 = v34;
            }
            while (v34 != v12);
          }
        }
        if (v12)
          operator delete(v12);
      }
      else
      {
        v13 = MEMORY[0x24BDAE450];
        *(_QWORD *)v12 = v9;
        *((_QWORD *)v12 + 1) = v13;
        v14 = v12 + 16;
      }
      *(_QWORD *)(a1 + 16) = v14;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20FC17FB8(uint64_t *a1, double a2, double a3, double a4, double a5, double a6, double a7, int64x2_t a8, int64x2_t a9)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char **v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  __int128 *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  __int128 *v27;
  unsigned int v28;
  int64x2_t v29;
  int64x2_t v30;
  double v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float64x2_t v48;
  __int16 v49;
  int64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  unsigned int v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  unsigned int v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  char v94;
  int v95;
  __int128 *v96;
  __int128 *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  __int128 *v101;
  unsigned int v102;
  _QWORD *v103;
  _QWORD *v104;
  void *v105;
  int v106;
  uint64_t v107;
  __int128 *v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  void *v115;
  int v116;
  unint64_t v117;
  __int16 v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void *v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  int *v126;
  unint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  int *v137;
  int64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  _OWORD *v143;
  int *v144;
  uint64_t v145;
  __int128 v146;
  int v147;
  char *v148;
  char *v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  char *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char *result;
  char *v159;
  char *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int *v163;
  char *v164;
  unsigned int v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  char *v169;
  unint64_t v170;
  unsigned int *v171;
  char *v172;
  unsigned int v173;
  uint64_t v174;
  char v175;
  unint64_t v176;
  char *v177;
  unint64_t v178;
  unsigned int *v179;
  char *v180;
  unsigned int v181;
  uint64_t v182;
  char v183;
  unint64_t v184;
  unint64_t v185;
  unsigned int *v186;
  char *v187;
  unsigned int v188;
  uint64_t v189;
  char v190;
  void **v191;
  uint64_t *v192;
  void **v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float64x2_t v198;
  int8x16_t v199;
  float64_t v200;
  uint64_t v201;
  char v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  unint64_t v207;
  uint64_t v208;
  __int128 *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  void *v216;
  int v217;
  __int16 v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  __int128 *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  unint64_t v228;
  void *v229;
  void *v230;
  int v231;
  __int16 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  int v236;
  char v237;
  uint64_t v238;
  __int128 v239;
  __int128 *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  void *v244;
  void *v245;
  uint64_t v246;
  void *v247;
  unint64_t v248;
  void *v249[2];
  int v250;
  __int16 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;

  v206 = a1 + 850;
  v10 = (_QWORD *)a1[1];
  v11 = (_QWORD *)v10[37];
  v12 = v10 + 38;
  if (v11 != v10 + 38)
  {
    v13 = (char **)(a1 + 673);
    v14 = a1 + 983;
    v194 = (uint64_t)(a1 + 676);
    v192 = a1 + 983;
    v193 = (void **)(a1 + 923);
    while (1)
    {
      v15 = *((unsigned int *)v11 + 8);
      v16 = (__int128 *)a1[673];
      v17 = (__int128 *)a1[674];
      v18 = v16;
      if (v17 != v16)
      {
        v19 = v17 - v16;
        v18 = (__int128 *)a1[673];
        do
        {
          v20 = v19 >> 1;
          v21 = (unsigned int *)&v18[v19 >> 1];
          v23 = *v21;
          v22 = (__int128 *)(v21 + 4);
          v19 += ~(v19 >> 1);
          if (v23 < v15)
            v18 = v22;
          else
            v19 = v20;
        }
        while (v19);
      }
      if (v18 != v17 && *(_DWORD *)v18 == (_DWORD)v15)
        goto LABEL_47;
      if (v17 == v16)
      {
        v16 = (__int128 *)a1[674];
      }
      else
      {
        v24 = v17 - v16;
        do
        {
          v25 = v24 >> 1;
          v26 = (unsigned int *)&v16[v24 >> 1];
          v28 = *v26;
          v27 = (__int128 *)(v26 + 4);
          v24 += ~(v24 >> 1);
          if (v28 < v15)
            v16 = v27;
          else
            v24 = v25;
        }
        while (v24);
      }
      v29 = *(int64x2_t *)(v11 + 5);
      a9.i64[0] = v11[7];
      v30 = *((int64x2_t *)v11 + 4);
      _D8 = *((double *)v11 + 13);
      v32 = *((double *)v11 + 16);
      v33 = *((unsigned __int8 *)a1 + 1720);
      v207 = v207 & 0xFFFFFF0000000000 | v15 | (v33 << 32);
      if (v17 != v16 && (_DWORD)v15 == *(_DWORD *)v16)
        goto LABEL_47;
      v34 = (float64x2_t)vzip1q_s64(v29, v30);
      _Q3 = (float64x2_t)vzip2q_s64(v29, v30);
      _Q18 = *(float64x2_t *)(v11 + 11);
      a8.i64[0] = v11[10];
      v37 = (float64x2_t)vzip1q_s64(a9, a8);
      v195 = v11[7];
      v196 = v11[10];
      v38 = (float64x2_t)a9;
      v39 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v40 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *((double *)v11 + 14)), _Q3, *((float64x2_t *)v11 + 7), 1), v37, v32);
      _D2 = v11[15];
      __asm { FMLA            D3, D2, V18.D[1] }
      _D1 = _Q3.f64[0] + _D8 * v32;
      v48 = vnegq_f64(_Q17);
      v49 = *((unsigned __int8 *)a1 + 1788) | 0x100;
      v50 = (int64x2_t)vextq_s8(v40, v39, 8uLL);
      v198 = (float64x2_t)vzip1q_s64(v29, v50);
      v51 = (float64x2_t)vzip2q_s64((int64x2_t)v34, v50);
      *(_QWORD *)&_Q18.f64[1] = vdupq_laneq_s64((int64x2_t)_Q18, 1).u64[0];
      v201 = v11[11];
      v203 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
      v204 = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
      v52 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v198, v48.f64[0]), v51, _Q17, 1), _Q18, _D1, 0);
      _Q2 = vmulq_f64(v38, v48);
      __asm
      {
        FMLS            D2, D19, V17.D[1]
        FMLS            D2, D8, V1.D[0]
      }
      v199 = (int8x16_t)vnegq_f64(v52);
      v200 = v51.f64[0];
      v197 = *(_OWORD *)&vnegq_f64(_Q2);
      v54 = sub_20F61B11C(v194);
      *(_DWORD *)v54 = -1;
      *(_BYTE *)(v54 + 4) = 1;
      *(_DWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v54 + 16) = v207;
      *(_QWORD *)(v54 + 24) = v11 + 5;
      *(_QWORD *)(v54 + 48) = v195;
      *(float64_t *)&v55 = v198.f64[0];
      *((_QWORD *)&v55 + 1) = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u64[0];
      *(_OWORD *)(v54 + 32) = v55;
      *(_QWORD *)(v54 + 72) = v196;
      *(float64_t *)&v55 = v200;
      *((_QWORD *)&v55 + 1) = v204;
      *(_OWORD *)(v54 + 56) = v55;
      *(double *)(v54 + 96) = _D8;
      *(_QWORD *)&v56 = v201;
      *((_QWORD *)&v56 + 1) = v203;
      *(_OWORD *)(v54 + 80) = v56;
      *(_QWORD *)(v54 + 120) = v197;
      *(_QWORD *)&v55 = v199.i64[0];
      *((_QWORD *)&v55 + 1) = vextq_s8(v199, v199, 8uLL).u64[0];
      *(_OWORD *)(v54 + 104) = v55;
      *(_WORD *)(v54 + 128) = v49;
      *(_QWORD *)(v54 + 136) = 0x3FF0000000000000;
      *(_QWORD *)(v54 + 144) = 0;
      *(_QWORD *)(v54 + 152) = 0;
      *(_QWORD *)(v54 + 160) = 0;
      *(_QWORD *)(v54 + 168) = 0x3FF0000000000000;
      *(_QWORD *)(v54 + 176) = 0;
      *(_QWORD *)(v54 + 184) = 0;
      *(_QWORD *)(v54 + 192) = 0;
      *(_QWORD *)(v54 + 200) = 0x3FF0000000000000;
      *(_QWORD *)(v54 + 208) = 0;
      *(_QWORD *)(v54 + 216) = 0;
      *(_QWORD *)(v54 + 224) = 0;
      v236 = v15;
      v238 = v54;
      sub_20F61AEB4(v13, v16, (uint64_t)&v236);
      if ((_DWORD)v33)
        break;
LABEL_46:
      v206[2] = 0;
      *v206 = 0;
      *(_DWORD *)v14 = 0;
      *((_BYTE *)v14 + 4) = 0;
LABEL_47:
      v80 = (_QWORD *)v11[1];
      if (v80)
      {
        do
        {
          v81 = v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (_QWORD *)v11[2];
          _ZF = *v81 == (_QWORD)v11;
          v11 = v81;
        }
        while (!_ZF);
      }
      v11 = v81;
      if (v81 == v12)
      {
        v10 = (_QWORD *)a1[1];
        goto LABEL_54;
      }
    }
    v57 = (char *)a1[924];
    v58 = a1[925];
    if ((unint64_t)v57 < v58)
    {
      *(_DWORD *)v57 = v15;
      v59 = (uint64_t)(v57 + 4);
LABEL_45:
      a1[924] = v59;
      goto LABEL_46;
    }
    v60 = v13;
    v61 = v12;
    v62 = (char *)*v193;
    v63 = v57 - (_BYTE *)*v193;
    v64 = v63 >> 2;
    v65 = (v63 >> 2) + 1;
    if (v65 >> 62)
      sub_20E867F44();
    v66 = v58 - (_QWORD)v62;
    if (v66 >> 1 > v65)
      v65 = v66 >> 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
      v65 = 0x3FFFFFFFFFFFFFFFLL;
    v205 = v65;
    if (v65)
    {
      if (v65 >> 62)
        sub_20E877A38();
      v67 = operator new(4 * v65);
      v68 = &v67[4 * v64];
      *v68 = v15;
      v59 = (uint64_t)(v68 + 1);
      v69 = v57 - v62;
      if (v57 != v62)
        goto LABEL_33;
    }
    else
    {
      v67 = 0;
      v68 = (_DWORD *)(4 * v64);
      *(_DWORD *)(4 * v64) = v15;
      v59 = 4 * v64 + 4;
      v69 = v57 - v62;
      if (v57 != v62)
      {
LABEL_33:
        v70 = v69 - 4;
        if (v70 >= 0x2C)
        {
          v71 = v57 - v67 - v63;
          v12 = v61;
          v13 = v60;
          if (v71 >= 0x20)
          {
            v72 = (v70 >> 2) + 1;
            v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
            v74 = &v57[-v73];
            v68 = (_DWORD *)((char *)v68 - v73);
            v75 = &v67[4 * v64 - 16];
            v76 = v57 - 16;
            v77 = v72 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v78 = *(_OWORD *)v76;
              *(v75 - 1) = *((_OWORD *)v76 - 1);
              *v75 = v78;
              v75 -= 2;
              v76 -= 32;
              v77 -= 8;
            }
            while (v77);
            v57 = v74;
            if (v72 == (v72 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_42;
          }
        }
        else
        {
          v12 = v61;
          v13 = v60;
        }
        do
        {
          v79 = *((_DWORD *)v57 - 1);
          v57 -= 4;
          *--v68 = v79;
        }
        while (v57 != v62);
LABEL_42:
        a1[923] = (uint64_t)v68;
        a1[924] = v59;
        a1[925] = (uint64_t)&v67[4 * v205];
        if (v62)
          operator delete(v62);
        v14 = v192;
        goto LABEL_45;
      }
    }
    v12 = v61;
    v13 = v60;
    goto LABEL_42;
  }
LABEL_54:
  v82 = (uint64_t *)v10[42];
  if (v82)
  {
    v202 = *((_BYTE *)a1 + 1730);
    v191 = (void **)(a1 + 938);
    while (1)
    {
      v83 = *((_DWORD *)v82 + 4);
      v84 = (char *)a1[733];
      v85 = (char *)a1[734];
      if (v85 != v84)
      {
        v86 = (v85 - v84) >> 4;
        do
        {
          v87 = v86 >> 1;
          v88 = &v84[16 * (v86 >> 1)];
          v90 = *(_DWORD *)v88;
          v89 = v88 + 16;
          v86 += ~(v86 >> 1);
          if (v90 < v83)
            v84 = v89;
          else
            v86 = v87;
        }
        while (v86);
      }
      if (v84 != v85 && *(_DWORD *)v84 == v83)
        goto LABEL_56;
      LODWORD(v208) = *((_DWORD *)v82 + 4);
      BYTE4(v208) = 1;
      v209 = (__int128 *)(v82 + 3);
      v213 = 0u;
      v214 = 0u;
      v215 = 0u;
      v216 = 0;
      v217 = 1065353216;
      v218 = 1;
      v91 = *(_OWORD *)(v82 + 5);
      v210 = *(_OWORD *)(v82 + 3);
      v211 = v91;
      v92 = v82[7];
      BYTE8(v212) = *((_BYTE *)v82 + 64);
      *(_QWORD *)&v212 = v92;
      sub_20F6169C8((uint64_t)&v208);
      sub_20F616F2C((uint64_t)&v208);
      BYTE4(v208) = v202;
      v93 = v209[1];
      v210 = *v209;
      v211 = v93;
      v94 = *((_BYTE *)v209 + 40);
      *(_QWORD *)&v212 = *((_QWORD *)v209 + 4);
      BYTE8(v212) = v94;
      sub_20F6169C8((uint64_t)&v208);
      sub_20F616F2C((uint64_t)&v208);
      v95 = v208;
      v96 = (__int128 *)a1[733];
      v97 = (__int128 *)a1[734];
      if (v97 == v96)
      {
        v96 = (__int128 *)a1[734];
      }
      else
      {
        v98 = v97 - v96;
        do
        {
          v99 = v98 >> 1;
          v100 = (unsigned int *)&v96[v98 >> 1];
          v102 = *v100;
          v101 = (__int128 *)(v100 + 4);
          v98 += ~(v98 >> 1);
          if (v102 < v208)
            v96 = v101;
          else
            v98 = v99;
        }
        while (v98);
        if (v97 != v96 && (_DWORD)v208 == *(_DWORD *)v96)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 184, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add calibration variable.", 35, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v103 = (_QWORD *)*((_QWORD *)&v215 + 1);
          if (!*((_QWORD *)&v215 + 1))
            goto LABEL_78;
          do
          {
LABEL_77:
            v104 = (_QWORD *)*v103;
            operator delete(v103);
            v103 = v104;
          }
          while (v104);
          goto LABEL_78;
        }
      }
      v106 = BYTE4(v208);
      LODWORD(v219) = -1;
      BYTE4(v219) = 1;
      v220 = 0;
      v107 = v208;
      v108 = v209;
      v110 = (void *)*((_QWORD *)&v213 + 1);
      v109 = (void *)v213;
      v221 = v208;
      v222 = v209;
      v223 = v210;
      v224 = v211;
      v225 = v212;
      v111 = (_QWORD *)*((_QWORD *)&v214 + 1);
      v112 = v214;
      v226 = v213;
      v213 = 0uLL;
      v114 = (_QWORD *)*((_QWORD *)&v215 + 1);
      v113 = v215;
      v227 = v214;
      v214 = 0uLL;
      *(_QWORD *)&v215 = 0;
      v115 = v216;
      v228 = v113;
      v229 = (void *)*((_QWORD *)&v215 + 1);
      v230 = v216;
      v116 = v217;
      v231 = v217;
      if (v216)
      {
        v117 = *(_QWORD *)(*((_QWORD *)&v215 + 1) + 8);
        if ((v113 & (v113 - 1)) != 0)
        {
          if (v117 >= v113)
            v117 %= v113;
        }
        else
        {
          v117 &= v113 - 1;
        }
        v111[v117] = &v229;
        *((_QWORD *)&v215 + 1) = 0;
        v216 = 0;
        v107 = v221;
        v108 = v222;
        v110 = (void *)*((_QWORD *)&v226 + 1);
        v109 = (void *)v226;
        v111 = (_QWORD *)*((_QWORD *)&v227 + 1);
        v112 = v227;
        v113 = v228;
        v114 = v229;
        v115 = v230;
        v116 = v231;
      }
      v118 = v218;
      v232 = v218;
      BYTE8(v235) = 0;
      v233 = 0u;
      v234 = 0u;
      LOBYTE(v235) = 0;
      v236 = v95;
      v238 = v219;
      LODWORD(v239) = v220;
      *((_QWORD *)&v239 + 1) = v107;
      v240 = v108;
      v241 = v223;
      v242 = v224;
      v243 = v225;
      v244 = v109;
      v245 = v110;
      v226 = 0u;
      v227 = 0u;
      v246 = v112;
      v247 = v111;
      v228 = 0;
      v248 = v113;
      v249[0] = v114;
      v249[1] = v115;
      v250 = v116;
      if (v115)
      {
        v119 = v114[1];
        if ((v113 & (v113 - 1)) != 0)
        {
          if (v119 >= v113)
            v119 %= v113;
        }
        else
        {
          v119 &= v113 - 1;
        }
        v111[v119] = v249;
        v229 = 0;
        v230 = 0;
        v118 = v232;
      }
      v251 = v118;
      v252 = v233;
      v253 = v234;
      v254 = v235;
      sub_20F61B41C((char **)a1 + 733, v96, &v236);
      v120 = v249[0];
      if (v249[0])
      {
        do
        {
          v121 = (_QWORD *)*v120;
          operator delete(v120);
          v120 = v121;
        }
        while (v121);
      }
      v122 = v247;
      v247 = 0;
      if (v122)
        operator delete(v122);
      if (v244)
      {
        v245 = v244;
        operator delete(v244);
      }
      v123 = v229;
      if (v229)
      {
        do
        {
          v124 = (_QWORD *)*v123;
          operator delete(v123);
          v123 = v124;
        }
        while (v124);
      }
      v125 = (void *)*((_QWORD *)&v227 + 1);
      *((_QWORD *)&v227 + 1) = 0;
      if (v125)
        operator delete(v125);
      if ((_QWORD)v226)
      {
        *((_QWORD *)&v226 + 1) = v226;
        operator delete((void *)v226);
      }
      if (v106)
        break;
LABEL_129:
      v206[2] = 0;
      *v206 = 0;
      *((_DWORD *)a1 + 1966) = 0;
      *((_BYTE *)a1 + 7868) = 0;
      v103 = (_QWORD *)*((_QWORD *)&v215 + 1);
      if (*((_QWORD *)&v215 + 1))
        goto LABEL_77;
LABEL_78:
      v105 = (void *)*((_QWORD *)&v214 + 1);
      *((_QWORD *)&v214 + 1) = 0;
      if (v105)
        operator delete(v105);
      if ((_QWORD)v213)
      {
        *((_QWORD *)&v213 + 1) = v213;
        operator delete((void *)v213);
      }
LABEL_56:
      v82 = (uint64_t *)*v82;
      if (!v82)
        goto LABEL_131;
    }
    v126 = (int *)a1[939];
    v127 = a1[940];
    if ((unint64_t)v126 < v127)
    {
      *v126 = v95;
      v128 = (uint64_t)(v126 + 1);
LABEL_128:
      a1[939] = v128;
      goto LABEL_129;
    }
    v129 = (int *)*v191;
    v130 = (char *)v126 - (_BYTE *)*v191;
    v131 = v130 >> 2;
    v132 = (v130 >> 2) + 1;
    if (v132 >> 62)
      sub_20E867F44();
    v133 = v127 - (_QWORD)v129;
    if (v133 >> 1 > v132)
      v132 = v133 >> 1;
    if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
      v134 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v134 = v132;
    if (v134)
    {
      if (v134 >> 62)
        sub_20E877A38();
      v135 = v134;
      v136 = operator new(4 * v134);
      v134 = v135;
      v137 = (int *)&v136[4 * v131];
      *v137 = v95;
      v128 = (uint64_t)(v137 + 1);
      v138 = (char *)v126 - (char *)v129;
      if (v126 == v129)
        goto LABEL_126;
    }
    else
    {
      v136 = 0;
      v137 = (int *)(4 * v131);
      *(_DWORD *)(4 * v131) = v95;
      v128 = 4 * v131 + 4;
      v138 = (char *)v126 - (char *)v129;
      if (v126 == v129)
      {
LABEL_126:
        a1[938] = (uint64_t)v137;
        a1[939] = v128;
        a1[940] = (uint64_t)&v136[4 * v134];
        if (v129)
          operator delete(v129);
        goto LABEL_128;
      }
    }
    v139 = v138 - 4;
    if (v139 < 0x2C)
      goto LABEL_204;
    if ((unint64_t)((char *)v126 - v136 - v130) < 0x20)
      goto LABEL_204;
    v140 = (v139 >> 2) + 1;
    v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
    v142 = &v126[v141 / 0xFFFFFFFFFFFFFFFCLL];
    v137 = (int *)((char *)v137 - v141);
    v143 = &v136[4 * v131 - 16];
    v144 = v126 - 4;
    v145 = v140 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v146 = *(_OWORD *)v144;
      *(v143 - 1) = *((_OWORD *)v144 - 1);
      *v143 = v146;
      v143 -= 2;
      v144 -= 8;
      v145 -= 8;
    }
    while (v145);
    v126 = v142;
    if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_204:
      do
      {
        v147 = *--v126;
        *--v137 = v147;
      }
      while (v126 != v129);
    }
    goto LABEL_126;
  }
LABEL_131:
  v148 = (char *)a1[709];
  v149 = (char *)a1[710];
  if (v149 != v148)
  {
    v150 = (v149 - v148) >> 4;
    do
    {
      v151 = v150 >> 1;
      v152 = (unsigned int *)&v148[16 * (v150 >> 1)];
      v154 = *v152;
      v153 = (char *)(v152 + 4);
      v150 += ~(v150 >> 1);
      if (v154 < 2)
        v148 = v153;
      else
        v150 = v151;
    }
    while (v150);
  }
  if (v148 == v149 || *(_DWORD *)v148 != 2)
  {
    v155 = a1[1];
    if (!v155)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 788, (uint64_t)"viobadata_ref_.state_set && viobadata_ref_.state_set->sensor_calibration_set()", 78, (uint64_t)"Error the sensor_calibration_set is not set", 43, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_201;
      }
      v155 = a1[1];
    }
    v236 = 2;
    v156 = *(_QWORD *)(v155 + 88);
    v237 = 1;
    v238 = v155 + 88;
    *(_QWORD *)&v239 = v156;
    BYTE8(v239) = 0;
    v148 = sub_20FC17820((uint64_t)(a1 + 648), (unsigned int *)&v236);
    if (v157)
    {
      *((_BYTE *)a1 + 7868) = 0;
      *((_DWORD *)a1 + 1966) = 0;
    }
  }
  *(_BYTE *)(*((_QWORD *)v148 + 1) + 20) = *((_BYTE *)a1 + 1724);
  result = (char *)a1[721];
  v159 = (char *)a1[722];
  v160 = result;
  if (v159 != result)
  {
    v161 = (v159 - result) >> 4;
    v160 = (char *)a1[721];
    do
    {
      v162 = v161 >> 1;
      v163 = (unsigned int *)&v160[16 * (v161 >> 1)];
      v165 = *v163;
      v164 = (char *)(v163 + 4);
      v161 += ~(v161 >> 1);
      if (v165 < 3)
        v160 = v164;
      else
        v161 = v162;
    }
    while (v161);
  }
  if (v160 == v159 || *(_DWORD *)v160 != 3)
  {
    if (!a1[1]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 844, (uint64_t)"viobadata_ref_.state_set && viobadata_ref_.state_set->sensor_calibration_set()", 78, (uint64_t)"Error the sensor_calibration_set is not set", 43, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_201;
    }
    v166 = *a1;
    v236 = 3;
    v237 = 1;
    v238 = v166 + 64;
    LOBYTE(v241) = 1;
    v239 = *(_OWORD *)(v166 + 64);
    v240 = *(__int128 **)(v166 + 80);
    v160 = sub_20FC1C60C((uint64_t)(a1 + 648), (unsigned int *)&v236);
    if (v167)
    {
      *((_BYTE *)a1 + 7868) = 0;
      *((_DWORD *)a1 + 1966) = 0;
    }
    result = (char *)a1[721];
    v159 = (char *)a1[722];
  }
  *(_BYTE *)(*((_QWORD *)v160 + 1) + 20) = *((_BYTE *)a1 + 1725);
  if (v159 == result)
    goto LABEL_205;
  v168 = (v159 - result) >> 4;
  v169 = result;
  do
  {
    v170 = v168 >> 1;
    v171 = (unsigned int *)&v169[16 * (v168 >> 1)];
    v173 = *v171;
    v172 = (char *)(v171 + 4);
    v168 += ~(v168 >> 1);
    if (v173 < 4)
      v169 = v172;
    else
      v168 = v170;
  }
  while (v168);
  if (v169 == v159 || *(_DWORD *)v169 != 4)
  {
LABEL_205:
    if (!a1[1]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 844, (uint64_t)"viobadata_ref_.state_set && viobadata_ref_.state_set->sensor_calibration_set()", 78, (uint64_t)"Error the sensor_calibration_set is not set", 43, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_201;
    }
    v174 = *a1;
    v236 = 4;
    v237 = 1;
    v238 = v174 + 88;
    LOBYTE(v241) = 1;
    v239 = *(_OWORD *)(v174 + 88);
    v240 = *(__int128 **)(v174 + 104);
    v169 = sub_20FC1C60C((uint64_t)(a1 + 648), (unsigned int *)&v236);
    if (v175)
    {
      *((_BYTE *)a1 + 7868) = 0;
      *((_DWORD *)a1 + 1966) = 0;
    }
    result = (char *)a1[721];
    v159 = (char *)a1[722];
  }
  *(_BYTE *)(*((_QWORD *)v169 + 1) + 20) = *((_BYTE *)a1 + 1726);
  if (v159 == result)
    goto LABEL_206;
  v176 = (v159 - result) >> 4;
  v177 = result;
  do
  {
    v178 = v176 >> 1;
    v179 = (unsigned int *)&v177[16 * (v176 >> 1)];
    v181 = *v179;
    v180 = (char *)(v179 + 4);
    v176 += ~(v176 >> 1);
    if (v181 < 5)
      v177 = v180;
    else
      v176 = v178;
  }
  while (v176);
  if (v177 == v159 || *(_DWORD *)v177 != 5)
  {
LABEL_206:
    if (!a1[1]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 844, (uint64_t)"viobadata_ref_.state_set && viobadata_ref_.state_set->sensor_calibration_set()", 78, (uint64_t)"Error the sensor_calibration_set is not set", 43, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_201;
    }
    v182 = *a1;
    v236 = 5;
    v237 = 1;
    v238 = v182 + 112;
    LOBYTE(v241) = 1;
    v239 = *(_OWORD *)(v182 + 112);
    v240 = *(__int128 **)(v182 + 128);
    v177 = sub_20FC1C60C((uint64_t)(a1 + 648), (unsigned int *)&v236);
    if (v183)
    {
      *((_BYTE *)a1 + 7868) = 0;
      *((_DWORD *)a1 + 1966) = 0;
    }
    result = (char *)a1[721];
    v159 = (char *)a1[722];
  }
  *(_BYTE *)(*((_QWORD *)v177 + 1) + 20) = *((_BYTE *)a1 + 1727);
  if (v159 == result)
    goto LABEL_207;
  v184 = (v159 - result) >> 4;
  do
  {
    v185 = v184 >> 1;
    v186 = (unsigned int *)&result[16 * (v184 >> 1)];
    v188 = *v186;
    v187 = (char *)(v186 + 4);
    v184 += ~(v184 >> 1);
    if (v188 < 6)
      result = v187;
    else
      v184 = v185;
  }
  while (v184);
  if (result == v159 || *(_DWORD *)result != 6)
  {
LABEL_207:
    if (a1[1]
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 844, (uint64_t)"viobadata_ref_.state_set && viobadata_ref_.state_set->sensor_calibration_set()", 78, (uint64_t)"Error the sensor_calibration_set is not set", 43, (void (*)(void **))sub_21023DDB0))
    {
      v189 = *a1;
      v236 = 6;
      v237 = 1;
      v238 = v189 + 136;
      LOBYTE(v241) = 1;
      v239 = *(_OWORD *)(v189 + 136);
      v240 = *(__int128 **)(v189 + 152);
      result = sub_20FC1C60C((uint64_t)(a1 + 648), (unsigned int *)&v236);
      if (v190)
      {
        *((_BYTE *)a1 + 7868) = 0;
        *((_DWORD *)a1 + 1966) = 0;
      }
      goto LABEL_195;
    }
LABEL_201:
    abort();
  }
LABEL_195:
  *(_BYTE *)(*((_QWORD *)result + 1) + 20) = *((_BYTE *)a1 + 1728);
  return result;
}

void sub_20FC18F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,_QWORD *__p)
{
  _QWORD *v54;
  _QWORD *v55;
  void *v56;

  v54 = __p;
  if (__p)
  {
    do
    {
      v55 = (_QWORD *)*v54;
      operator delete(v54);
      v54 = v55;
    }
    while (v55);
  }
  if (a51)
  {
    operator delete(a51);
    v56 = a48;
    if (!a48)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v56 = a48;
    if (!a48)
      goto LABEL_5;
  }
  operator delete(v56);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC19048(uint64_t a1, unint64_t a2, unsigned int a3, char a4, int64x2_t _Q0, double a6, double a7, double a8, int64x2_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  __int128 *v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  int v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  const char *v92;
  size_t v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t result;
  int64x2_t v141;
  int64x2_t v142;
  int8x16_t v143;
  double v145;
  char v147;
  __int128 *v148;
  __int128 *v149;
  uint64_t v150;
  float64x2_t v151;
  unint64_t v152;
  float64x2_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v161;
  uint64_t v167;
  __int128 v168;
  char *v169;
  unint64_t v170;
  _DWORD *v171;
  char *v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  _DWORD *v179;
  char *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  _OWORD *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  __int128 *v193;
  unsigned int v194;
  uint64_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  char *v200;
  unint64_t v201;
  _DWORD *v202;
  char *v203;
  int64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _BYTE *v209;
  _DWORD *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  _OWORD *v215;
  char *v216;
  uint64_t v217;
  __int128 v218;
  int v219;
  char v220;
  _BOOL4 v221;
  char v222;
  _QWORD *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unsigned __int8 v227;
  unint64_t v228;
  _QWORD *v229;
  char v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  double v241;
  float64_t v242;
  unint64_t v243;
  float64x2_t v244;
  uint64_t v245;
  float64_t v246;
  int8x16_t v247;
  char v248;
  int8x16_t v249;
  unint64_t v250;
  int8x16_t v251;
  unint64_t v252;
  int8x16_t v253;
  unint64_t v254;
  int8x16_t v255;
  char **v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  _BYTE *v260;
  int v261;
  const char *v262;
  __int128 v263;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v265;
  const char *v266;
  int v267;
  const char *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  uint64_t v271;
  _QWORD v272[2];
  uint64_t v273;
  _BYTE v274[40];
  void **v275;
  size_t v276;
  unint64_t v277;
  char v278;
  uint64_t v279;

  v279 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 2145))
  {
    v12 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(v12 + 48);
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_DWORD *)(v13 + 40);
    _ZF = a2 == v14 && a3 == v15;
    if (_ZF)
      a4 = 1;
  }
  v20 = *(uint64_t **)(v12 + 56);
  v18 = (uint64_t *)(v12 + 56);
  v19 = v20;
  if (!v20)
    goto LABEL_34;
  v21 = v18;
  do
  {
    v22 = v19[4];
    if (v22 < a2)
    {
      ++v19;
    }
    else if (v22 == a2)
    {
      if (*((_DWORD *)v19 + 10) < a3)
        ++v19;
      else
        v21 = v19;
    }
    else
    {
      v21 = v19;
    }
    v19 = (uint64_t *)*v19;
  }
  while (v19);
  if (v21 == v18 || (v23 = v21[4], a2 < v23) || a2 == v23 && *((_DWORD *)v21 + 10) > a3 || (v24 = v21[6]) == 0)
  {
LABEL_34:
    sub_20F9B2A4C(&v271);
    if (**(int **)(v271 + 56) > 5)
      goto LABEL_122;
    v34 = *(unsigned __int8 *)(v271 + 72);
    v35 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && !v35)
      goto LABEL_122;
    v261 = v34;
    *(_QWORD *)&v263 = &v271;
    *((std::chrono::steady_clock::time_point *)&v263 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v265 = 5;
    v266 = "unknown file";
    v267 = 556;
    v269 = 0;
    v270 = 0;
    v268 = "unknown function";
    v37 = v271;
    v38 = (const char *)(v271 + 16);
    v259 = v271 + 16;
    if (*(char *)(v271 + 39) < 0)
    {
      v38 = *(const char **)(v271 + 16);
      v39 = *(_QWORD *)(v271 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v41 & 1) != 0)
        goto LABEL_41;
    }
    else
    {
      v39 = *(unsigned __int8 *)(v271 + 39);
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) != 0)
        goto LABEL_41;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v274);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v274);
      if (v274[24] && (v274[23] & 0x80000000) != 0)
        operator delete(*(void **)v274);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_41:
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v274 = os_log_create(v42, v38);
    v44 = &v274[8];
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v45 = v43 | 7;
      v46 = v45 + 1;
      v44 = operator new(v45 + 1);
      *(_QWORD *)&v274[16] = v43;
      *(_QWORD *)&v274[24] = v46 | 0x8000000000000000;
      *(_QWORD *)&v274[8] = v44;
    }
    else
    {
      v274[31] = v43;
      if (!v43)
      {
LABEL_55:
        v44[v43] = 0;
        v274[32] = 1;
        v47 = (void **)&v275;
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v39 >= 0x17)
        {
          v49 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v49 = v39 | 7;
          v50 = v49 + 1;
          v47 = (void **)operator new(v49 + 1);
          v276 = v39;
          v277 = v50 | 0x8000000000000000;
          v275 = v47;
        }
        else
        {
          HIBYTE(v277) = v39;
          if (!v39)
          {
            LOBYTE(v275) = 0;
            v278 = 1;
            v48 = *(NSObject **)v274;
            if ((SHIBYTE(v277) & 0x80000000) == 0)
              goto LABEL_59;
            goto LABEL_65;
          }
        }
        memmove(v47, v38, v39);
        *((_BYTE *)v47 + v39) = 0;
        v278 = 1;
        v48 = *(NSObject **)v274;
        if ((SHIBYTE(v277) & 0x80000000) == 0)
        {
LABEL_59:
          if (!v274[32])
            goto LABEL_68;
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v275);
        if (!v274[32])
        {
LABEL_68:
          if (*(_QWORD *)v274)
            os_release(*(void **)v274);
          if (v36 && *(_QWORD *)(v36 + 24))
          {
            v51 = _os_log_pack_size();
            v52 = (std::__shared_weak_count_vtbl *)operator new(v51, (std::align_val_t)8uLL);
            v53 = (std::__shared_weak_count *)operator new();
            v54 = v53;
            v53->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v53->__shared_owners_;
            v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v53->__shared_weak_owners_ = 0;
            v53[1].__vftable = v52;
            *(_QWORD *)v274 = v52;
            *(_QWORD *)&v274[8] = v52;
            *(_QWORD *)&v274[16] = v53;
            do
              v56 = __ldxr(p_shared_owners);
            while (__stxr(v56 + 1, p_shared_owners));
            *(_QWORD *)&v274[24] = 0;
            *(_QWORD *)&v274[32] = 0;
            v275 = 0;
            do
              v57 = __ldaxr(p_shared_owners);
            while (__stlxr(v57 - 1, p_shared_owners));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v54);
            }
            v58 = *(_QWORD *)v274;
            v59 = (_DWORD *)_os_log_pack_fill();
            *v59 = 67109120;
            v59[1] = a3;
            v60 = operator new();
            v61 = *(unsigned __int8 *)(v37 + 39);
            v62 = v259;
            if ((v61 & 0x80u) != 0)
            {
              v62 = *(_QWORD *)(v37 + 16);
              v61 = *(_QWORD *)(v37 + 24);
            }
            *(_QWORD *)v60 = v58;
            *(_OWORD *)(v60 + 8) = *(_OWORD *)&v274[8];
            *(_QWORD *)&v274[8] = 0;
            *(_QWORD *)&v274[16] = 0;
            *(_OWORD *)(v60 + 24) = *(_OWORD *)&v274[24];
            *(_QWORD *)&v274[24] = 0;
            *(_QWORD *)&v274[32] = 0;
            *(_QWORD *)(v60 + 40) = v62;
            *(_QWORD *)(v60 + 48) = v61;
            *(_BYTE *)(v60 + 56) = 16;
            v273 = 0;
            v272[0] = v60;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), v272);
            v63 = v272[0];
            v272[0] = 0;
            if (v63)
            {
              v64 = *(std::__shared_weak_count **)(v63 + 32);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v67 = *(std::__shared_weak_count **)(v63 + 16);
              if (v67)
              {
                v68 = (unint64_t *)&v67->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
              v70 = v273;
              v273 = 0;
              if (v70)
              {
                v71 = *(std::__shared_weak_count **)(v70 + 32);
                if (v71)
                {
                  v72 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                v74 = *(std::__shared_weak_count **)(v70 + 16);
                if (v74)
                {
                  v75 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                MEMORY[0x212BC6398](v70, 0x10F0C40B62ED6C6);
              }
            }
            v77 = *(std::__shared_weak_count **)&v274[32];
            v78 = v261;
            if (*(_QWORD *)&v274[32])
            {
              v79 = (unint64_t *)(*(_QWORD *)&v274[32] + 8);
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            v81 = *(std::__shared_weak_count **)&v274[16];
            if (*(_QWORD *)&v274[16])
            {
              v82 = (unint64_t *)(*(_QWORD *)&v274[16] + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
          }
          else
          {
            os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v274 = 67109120;
            *(_DWORD *)&v274[4] = a3;
            v84 = (void *)_os_log_send_and_compose_impl();
            v78 = v261;
            if (v84)
              free(v84);
          }
          if (v78)
          {
            sub_20E8C003C((uint64_t)&v263, "The requested IMU State (%d) does not exist in the StateSet", a3);
            sub_20E863570((uint64_t)&v263);
          }
          sub_20E863570((uint64_t)&v263);
          v85 = v270;
          if (v270)
          {
            v86 = (unint64_t *)&v270->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
LABEL_122:
          sub_20F9B2A4C(&v271);
          if (**(int **)(v271 + 56) > 5)
            return 0;
          v88 = *(unsigned __int8 *)(v271 + 72);
          v89 = *(_BYTE *)(v271 + 72) != 0;
          v90 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
          if (((v90 == 0) & ~v89) != 0)
            return 0;
          *(_QWORD *)&v263 = &v271;
          *((std::chrono::steady_clock::time_point *)&v263 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v265 = 5;
          v266 = "unknown file";
          v267 = 244;
          v269 = 0;
          v270 = 0;
          v268 = "unknown function";
          v91 = *(_QWORD *)v263;
          v92 = (const char *)(*(_QWORD *)v263 + 16);
          v262 = v92;
          if (*(char *)(*(_QWORD *)v263 + 39) < 0)
          {
            v92 = *(const char **)(v91 + 16);
            v93 = *(_QWORD *)(v91 + 24);
            v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v95 & 1) != 0)
              goto LABEL_128;
          }
          else
          {
            v93 = *(unsigned __int8 *)(*(_QWORD *)v263 + 39);
            v94 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v94 & 1) != 0)
              goto LABEL_128;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v274);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v274);
            if (v274[24] && (v274[23] & 0x80000000) != 0)
              operator delete(*(void **)v274);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_128:
          if (byte_254A4A4F8[23] >= 0)
            v96 = byte_254A4A4F8;
          else
            v96 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v97 = byte_254A4A4F8[23];
          else
            v97 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v274 = os_log_create(v96, v92);
          v98 = &v274[8];
          if (v97 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v97 >= 0x17)
          {
            v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v97 | 7) != 0x17)
              v99 = v97 | 7;
            v100 = v99 + 1;
            v98 = operator new(v99 + 1);
            *(_QWORD *)&v274[16] = v97;
            *(_QWORD *)&v274[24] = v100 | 0x8000000000000000;
            *(_QWORD *)&v274[8] = v98;
          }
          else
          {
            v274[31] = v97;
            if (!v97)
            {
LABEL_142:
              v98[v97] = 0;
              v274[32] = 1;
              v101 = (void **)&v275;
              if (v93 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v93 >= 0x17)
              {
                v103 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v93 | 7) != 0x17)
                  v103 = v93 | 7;
                v104 = v103 + 1;
                v101 = (void **)operator new(v103 + 1);
                v276 = v93;
                v277 = v104 | 0x8000000000000000;
                v275 = v101;
              }
              else
              {
                HIBYTE(v277) = v93;
                if (!v93)
                {
                  LOBYTE(v275) = 0;
                  v278 = 1;
                  v102 = *(NSObject **)v274;
                  if ((SHIBYTE(v277) & 0x80000000) == 0)
                    goto LABEL_146;
                  goto LABEL_152;
                }
              }
              memmove(v101, v92, v93);
              *((_BYTE *)v101 + v93) = 0;
              v278 = 1;
              v102 = *(NSObject **)v274;
              if ((SHIBYTE(v277) & 0x80000000) == 0)
              {
LABEL_146:
                if (!v274[32])
                  goto LABEL_155;
                goto LABEL_153;
              }
LABEL_152:
              operator delete(v275);
              if (!v274[32])
              {
LABEL_155:
                if (*(_QWORD *)v274)
                  os_release(*(void **)v274);
                if (v90 && *(_QWORD *)(v90 + 24))
                {
                  v105 = _os_log_pack_size();
                  v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
                  v107 = (std::__shared_weak_count *)operator new();
                  v108 = v107;
                  v107->__shared_owners_ = 0;
                  v109 = (unint64_t *)&v107->__shared_owners_;
                  v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v107->__shared_weak_owners_ = 0;
                  v107[1].__vftable = v106;
                  *(_QWORD *)v274 = v106;
                  *(_QWORD *)&v274[8] = v106;
                  *(_QWORD *)&v274[16] = v107;
                  do
                    v110 = __ldxr(v109);
                  while (__stxr(v110 + 1, v109));
                  *(_QWORD *)&v274[24] = 0;
                  *(_QWORD *)&v274[32] = 0;
                  v275 = 0;
                  do
                    v111 = __ldaxr(v109);
                  while (__stlxr(v111 - 1, v109));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                  v112 = *(_QWORD *)v274;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v113 = operator new();
                  v114 = *(unsigned __int8 *)(v91 + 39);
                  v115 = v262;
                  if ((v114 & 0x80u) != 0)
                  {
                    v115 = *(const char **)(v91 + 16);
                    v114 = *(_QWORD *)(v91 + 24);
                  }
                  *(_QWORD *)v113 = v112;
                  *(_OWORD *)(v113 + 8) = *(_OWORD *)&v274[8];
                  *(_QWORD *)&v274[8] = 0;
                  *(_QWORD *)&v274[16] = 0;
                  *(_OWORD *)(v113 + 24) = *(_OWORD *)&v274[24];
                  *(_QWORD *)&v274[24] = 0;
                  *(_QWORD *)&v274[32] = 0;
                  *(_QWORD *)(v113 + 40) = v115;
                  *(_QWORD *)(v113 + 48) = v114;
                  *(_BYTE *)(v113 + 56) = 16;
                  v273 = 0;
                  v272[0] = v113;
                  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v90 + 24) + 40))(*(_QWORD *)(v90 + 24), v272);
                  v116 = v272[0];
                  v272[0] = 0;
                  if (v116)
                  {
                    v117 = *(std::__shared_weak_count **)(v116 + 32);
                    if (v117)
                    {
                      v118 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v119 = __ldaxr(v118);
                      while (__stlxr(v119 - 1, v118));
                      if (!v119)
                      {
                        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                        std::__shared_weak_count::__release_weak(v117);
                      }
                    }
                    v120 = *(std::__shared_weak_count **)(v116 + 16);
                    if (v120)
                    {
                      v121 = (unint64_t *)&v120->__shared_owners_;
                      do
                        v122 = __ldaxr(v121);
                      while (__stlxr(v122 - 1, v121));
                      if (!v122)
                      {
                        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                        std::__shared_weak_count::__release_weak(v120);
                      }
                    }
                    MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
                    v123 = v273;
                    v273 = 0;
                    if (v123)
                    {
                      v124 = *(std::__shared_weak_count **)(v123 + 32);
                      if (v124)
                      {
                        v125 = (unint64_t *)&v124->__shared_owners_;
                        do
                          v126 = __ldaxr(v125);
                        while (__stlxr(v126 - 1, v125));
                        if (!v126)
                        {
                          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                          std::__shared_weak_count::__release_weak(v124);
                        }
                      }
                      v127 = *(std::__shared_weak_count **)(v123 + 16);
                      if (v127)
                      {
                        v128 = (unint64_t *)&v127->__shared_owners_;
                        do
                          v129 = __ldaxr(v128);
                        while (__stlxr(v129 - 1, v128));
                        if (!v129)
                        {
                          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                          std::__shared_weak_count::__release_weak(v127);
                        }
                      }
                      MEMORY[0x212BC6398](v123, 0x10F0C40B62ED6C6);
                    }
                  }
                  v130 = *(std::__shared_weak_count **)&v274[32];
                  if (*(_QWORD *)&v274[32])
                  {
                    v131 = (unint64_t *)(*(_QWORD *)&v274[32] + 8);
                    do
                      v132 = __ldaxr(v131);
                    while (__stlxr(v132 - 1, v131));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                  }
                  v133 = *(std::__shared_weak_count **)&v274[16];
                  if (*(_QWORD *)&v274[16])
                  {
                    v134 = (unint64_t *)(*(_QWORD *)&v274[16] + 8);
                    do
                      v135 = __ldaxr(v134);
                    while (__stlxr(v135 - 1, v134));
                    if (!v135)
                    {
                      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                      std::__shared_weak_count::__release_weak(v133);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v102, OS_LOG_TYPE_ERROR);
                  *(_WORD *)v274 = 0;
                  v136 = (void *)_os_log_send_and_compose_impl();
                  if (v136)
                    free(v136);
                }
                if (v88)
                {
                  sub_20E8C003C((uint64_t)&v263, "Unable to add IMU State");
                  sub_20E863570((uint64_t)&v263);
                }
                sub_20E863570((uint64_t)&v263);
                v137 = v270;
                if (v270)
                {
                  v138 = (unint64_t *)&v270->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                return 0;
              }
LABEL_153:
              if ((v274[31] & 0x80000000) != 0)
                operator delete(*(void **)&v274[8]);
              goto LABEL_155;
            }
          }
          memmove(v98, v96, v97);
          goto LABEL_142;
        }
LABEL_66:
        if ((v274[31] & 0x80000000) != 0)
          operator delete(*(void **)&v274[8]);
        goto LABEL_68;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_55;
  }
  v260 = (_BYTE *)(a1 + 6800);
  v25 = a3;
  if ((a4 & 1) != 0 || (v25 = a3 | 0x100000000, v26 = v25, !*(_BYTE *)(a1 + 2146)))
    v26 = a3;
  v27 = *(__int128 **)(a1 + 5192);
  v28 = *(__int128 **)(a1 + 5200);
  if (v28 == v27)
  {
    v27 = *(__int128 **)(a1 + 5200);
  }
  else
  {
    v29 = v28 - v27;
    do
    {
      v30 = v29 >> 1;
      v31 = (unsigned int *)&v27[v29 >> 1];
      v33 = *v31;
      v32 = (__int128 *)(v31 + 4);
      v29 += ~(v29 >> 1);
      if (v33 < v25)
        v27 = v32;
      else
        v29 = v30;
    }
    while (v29);
  }
  v141 = *(int64x2_t *)v24;
  v142 = *(int64x2_t *)(v24 + 24);
  _Q0.i64[0] = *(_QWORD *)(v24 + 40);
  v143 = *(int8x16_t *)(v24 + 48);
  _Q3 = *(float64x2_t *)(v24 + 72);
  v145 = *(double *)(v24 + 88);
  _D17 = *(double *)(v24 + 64);
  v258 = a4;
  if (v28 == v27 || *(_DWORD *)v27 != (_DWORD)v25)
  {
    v151 = (float64x2_t)vzip1q_s64(v141, v142);
    v152 = vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL).u64[0];
    _Q5 = (float64x2_t)vzip2q_s64(v141, v142);
    a9.i64[0] = *(_QWORD *)(v24 + 16);
    v154 = (float64x2_t)vzip1q_s64(a9, _Q0);
    v155 = vextq_s8((int8x16_t)_Q5, (int8x16_t)vdupq_laneq_s64((int64x2_t)v143, 1), 8uLL);
    v156 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0), v155, 8uLL);
    v157 = (float64x2_t)vzip1q_s64((int64x2_t)v151, (int64x2_t)v156);
    *(_QWORD *)&v151.f64[1] = v152;
    v246 = v154.f64[0];
    v252 = v152;
    v254 = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
    *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    v158 = vmlaq_laneq_f64(vmulq_n_f64(v151, _Q3.f64[0]), _Q5, _Q3, 1);
    _Q5.f64[0] = v154.f64[0];
    *(_QWORD *)&_Q5.f64[1] = v254;
    _D6 = vextq_s8(v143, v143, 8uLL).u64[0];
    _Q7 = vmlaq_n_f64(v158, _Q5, v145);
    v250 = vextq_s8(v156, v156, 8uLL).u64[0];
    v161 = vnegq_f64(_Q7);
    __asm { FMLA            D5, D6, V3.D[1] }
    _Q3 = vmulq_f64(v154, v161);
    _D2 = _Q5.f64[0] + _D17 * v145;
    *(_QWORD *)&_Q5.f64[0] = v152;
    *(_QWORD *)&_Q5.f64[1] = v250;
    __asm
    {
      FMLS            D3, D0, V7.D[1]
      FMLS            D3, D17, V2.D[0]
    }
    v242 = v157.f64[0];
    v243 = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
    v244 = (float64x2_t)vzip1q_s64((int64x2_t)v143, vdupq_laneq_s64((int64x2_t)v155, 1));
    v247 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v157, v161.f64[0]), _Q5, _Q7, 1), v244, _D2, 0));
    v245 = *(_OWORD *)&vnegq_f64(_Q3);
    v256 = (char **)(a1 + 5192);
    v263 = *(_OWORD *)(v24 + 792);
    rep = *(_QWORD *)(v24 + 808);
    *(_OWORD *)&v274[7] = *(_OWORD *)(v24 + 768);
    *(_QWORD *)&v274[23] = *(_QWORD *)(v24 + 784);
    v241 = _D17;
    v167 = sub_20F61BD6C(a1 + 5216);
    *(_DWORD *)v167 = -1;
    *(_BYTE *)(v167 + 4) = 1;
    *(_DWORD *)(v167 + 8) = 0;
    *(_QWORD *)(v167 + 16) = v25;
    *(_QWORD *)(v167 + 24) = v24;
    *(float64_t *)(v167 + 48) = v246;
    *(float64_t *)&v168 = v242;
    *((_QWORD *)&v168 + 1) = v243;
    *(_OWORD *)(v167 + 32) = v168;
    *(_QWORD *)(v167 + 72) = v254;
    *(_QWORD *)&v168 = v252;
    *((_QWORD *)&v168 + 1) = v250;
    *(_OWORD *)(v167 + 56) = v168;
    *(float64_t *)&v168 = v244.f64[0];
    *((_QWORD *)&v168 + 1) = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
    *(double *)(v167 + 96) = v241;
    *(_OWORD *)(v167 + 80) = v168;
    *(_QWORD *)(v167 + 120) = v245;
    *(_QWORD *)&v168 = v247.i64[0];
    *((_QWORD *)&v168 + 1) = vextq_s8(v247, v247, 8uLL).u64[0];
    *(_OWORD *)(v167 + 104) = v168;
    *(_BYTE *)(v167 + 128) = 0;
    *(_OWORD *)(v167 + 136) = *(_OWORD *)&v274[7];
    *(_QWORD *)(v167 + 152) = *(_QWORD *)&v274[23];
    *(_OWORD *)(v167 + 160) = v263;
    *(_QWORD *)(v167 + 176) = rep;
    *(_QWORD *)(v167 + 184) = 0x3FF0000000000000;
    *(_QWORD *)(v167 + 192) = 0;
    *(_QWORD *)(v167 + 200) = 0;
    *(_QWORD *)(v167 + 208) = 0;
    *(_QWORD *)(v167 + 216) = 0x3FF0000000000000;
    *(_QWORD *)(v167 + 224) = 0;
    *(_QWORD *)(v167 + 232) = 0;
    *(_QWORD *)(v167 + 240) = 0;
    *(_QWORD *)(v167 + 248) = 0x3FF0000000000000;
    *(_QWORD *)(v167 + 264) = 0;
    *(_QWORD *)(v167 + 272) = 0;
    *(_QWORD *)(v167 + 256) = 0;
    LODWORD(v272[0]) = v25;
    v272[1] = v167;
    sub_20F61BB04(v256, v27, (uint64_t)v272);
    if ((v25 & 0x100000000) != 0)
    {
      v169 = *(char **)(a1 + 7344);
      v170 = *(_QWORD *)(a1 + 7352);
      if ((unint64_t)v169 >= v170)
      {
        v172 = *(char **)(a1 + 7336);
        v173 = v169 - v172;
        v174 = (v169 - v172) >> 2;
        v175 = v174 + 1;
        if ((unint64_t)(v174 + 1) >> 62)
          sub_20E867F44();
        v176 = v170 - (_QWORD)v172;
        if (v176 >> 1 > v175)
          v175 = v176 >> 1;
        if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
          v177 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v177 = v175;
        if (v177)
        {
          if (v177 >> 62)
            sub_20E877A38();
          v178 = operator new(4 * v177);
          v174 = (v169 - v172) >> 2;
          v173 = v169 - v172;
        }
        else
        {
          v178 = 0;
        }
        v179 = &v178[4 * v174];
        v180 = &v178[4 * v177];
        *v179 = v25;
        v171 = v179 + 1;
        if (v169 != v172)
        {
          v181 = v169 - v172 - 4;
          if (v181 < 0x2C)
            goto LABEL_325;
          if ((unint64_t)(v169 - v178 - v173) < 0x20)
            goto LABEL_325;
          v182 = (v181 >> 2) + 1;
          v183 = 4 * (v182 & 0x7FFFFFFFFFFFFFF8);
          v184 = &v169[-v183];
          v179 = (_DWORD *)((char *)v179 - v183);
          v185 = &v178[4 * v174 - 16];
          v186 = v169 - 16;
          v187 = v182 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v188 = *(_OWORD *)v186;
            *(v185 - 1) = *((_OWORD *)v186 - 1);
            *v185 = v188;
            v185 -= 2;
            v186 -= 32;
            v187 -= 8;
          }
          while (v187);
          v169 = v184;
          if (v182 != (v182 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_325:
            do
            {
              v189 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *--v179 = v189;
            }
            while (v169 != v172);
          }
        }
        *(_QWORD *)(a1 + 7336) = v179;
        *(_QWORD *)(a1 + 7344) = v171;
        *(_QWORD *)(a1 + 7352) = v180;
        if (v172)
          operator delete(v172);
      }
      else
      {
        *(_DWORD *)v169 = v25;
        v171 = v169 + 4;
      }
      *(_QWORD *)(a1 + 7344) = v171;
    }
    v260[2] = 0;
    *v260 = 0;
    *(_BYTE *)(a1 + 7868) = 0;
    *(_DWORD *)(a1 + 7864) = 0;
    v147 = 1;
    v148 = *(__int128 **)(a1 + 5288);
    v149 = *(__int128 **)(a1 + 5296);
    v150 = (char *)v149 - (char *)v148;
    if (v149 == v148)
      goto LABEL_214;
  }
  else
  {
    v147 = 0;
    v148 = *(__int128 **)(a1 + 5288);
    v149 = *(__int128 **)(a1 + 5296);
    v150 = (char *)v149 - (char *)v148;
    if (v149 == v148)
    {
LABEL_214:
      v148 = v149;
      goto LABEL_244;
    }
  }
  v190 = v150 >> 4;
  do
  {
    v191 = v190 >> 1;
    v192 = (unsigned int *)&v148[v190 >> 1];
    v194 = *v192;
    v193 = (__int128 *)(v192 + 4);
    v190 += ~(v190 >> 1);
    if (v194 < v26)
      v148 = v193;
    else
      v190 = v191;
  }
  while (v190);
LABEL_244:
  if (v149 != v148 && *(_DWORD *)v148 == (_DWORD)v26)
    goto LABEL_270;
  v249 = *(int8x16_t *)(v24 + 96);
  v251 = *(int8x16_t *)(v24 + 112);
  v253 = *(int8x16_t *)(v24 + 128);
  v255 = *(int8x16_t *)(v24 + 144);
  v257 = *(_QWORD *)(v24 + 160);
  v248 = v147;
  v195 = sub_20F61C2D4(a1 + 5312);
  v197 = v253;
  v196 = v255;
  v199 = v249;
  v198 = v251;
  *(_DWORD *)v195 = -1;
  *(_BYTE *)(v195 + 4) = 1;
  *(_DWORD *)(v195 + 8) = 0;
  *(_QWORD *)(v195 + 16) = v26;
  *(_QWORD *)(v195 + 24) = v24;
  v199.i64[1] = vextq_s8(v199, v199, 8uLL).u64[0];
  v198.i64[1] = vextq_s8(v198, v198, 8uLL).u64[0];
  *(int8x16_t *)(v195 + 32) = v199;
  *(int8x16_t *)(v195 + 48) = v198;
  v197.i64[1] = vextq_s8(v197, v197, 8uLL).u64[0];
  v196.i64[1] = vextq_s8(v196, v196, 8uLL).u64[0];
  *(_QWORD *)(v195 + 96) = v257;
  *(int8x16_t *)(v195 + 64) = v197;
  *(int8x16_t *)(v195 + 80) = v196;
  *(_BYTE *)(v195 + 104) = 0;
  *(_DWORD *)v274 = v26;
  *(_QWORD *)&v274[8] = v195;
  sub_20F61C06C((char **)(a1 + 5288), v148, (uint64_t)v274);
  if ((v26 & 0x100000000) != 0)
  {
    v200 = *(char **)(a1 + 7368);
    v201 = *(_QWORD *)(a1 + 7376);
    if ((unint64_t)v200 >= v201)
    {
      v203 = *(char **)(a1 + 7360);
      v204 = v200 - v203;
      v205 = (v200 - v203) >> 2;
      v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62)
        sub_20E867F44();
      v207 = v201 - (_QWORD)v203;
      if (v207 >> 1 > v206)
        v206 = v207 >> 1;
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL)
        v208 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v208 = v206;
      if (v208)
      {
        if (v208 >> 62)
          sub_20E877A38();
        v209 = operator new(4 * v208);
        v204 = v200 - v203;
      }
      else
      {
        v209 = 0;
      }
      v210 = &v209[4 * v205];
      *v210 = v26;
      v202 = v210 + 1;
      if (v200 != v203)
      {
        v211 = v200 - v203 - 4;
        if (v211 < 0x2C)
          goto LABEL_326;
        if ((unint64_t)(v200 - v209 - v204) < 0x20)
          goto LABEL_326;
        v212 = (v211 >> 2) + 1;
        v213 = 4 * (v212 & 0x7FFFFFFFFFFFFFF8);
        v214 = &v200[-v213];
        v210 = (_DWORD *)((char *)v210 - v213);
        v215 = &v209[4 * v205 - 16];
        v216 = v200 - 16;
        v217 = v212 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v218 = *(_OWORD *)v216;
          *(v215 - 1) = *((_OWORD *)v216 - 1);
          *v215 = v218;
          v215 -= 2;
          v216 -= 32;
          v217 -= 8;
        }
        while (v217);
        v200 = v214;
        if (v212 != (v212 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_326:
          do
          {
            v219 = *((_DWORD *)v200 - 1);
            v200 -= 4;
            *--v210 = v219;
          }
          while (v200 != v203);
        }
      }
      *(_QWORD *)(a1 + 7360) = v210;
      *(_QWORD *)(a1 + 7368) = v202;
      *(_QWORD *)(a1 + 7376) = &v209[4 * v208];
      if (v203)
        operator delete(v203);
    }
    else
    {
      *(_DWORD *)v200 = v26;
      v202 = v200 + 4;
    }
    *(_QWORD *)(a1 + 7368) = v202;
  }
  v260[2] = 0;
  *v260 = 0;
  *(_BYTE *)(a1 + 7868) = 0;
  *(_DWORD *)(a1 + 7864) = 0;
  v220 = v258;
  if ((v248 & 1) == 0)
  {
LABEL_270:
    v221 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 582, (uint64_t)"ret.second && ret2.second", 25, (uint64_t)"Failed to add PoseVariable or VelAndBiasVariable.", 49, (void (*)(void **))sub_21023DDB0);
    v220 = v258;
    if (v221)
      abort();
  }
  if (*(_BYTE *)(a1 + 2146))
    v222 = v220;
  else
    v222 = 1;
  if ((v222 & 1) == 0)
  {
    v223 = *(_QWORD **)(a1 + 8);
    v224 = v223[8];
    v225 = v223[39] * v224;
    if (v225)
    {
      v226 = 0;
      v227 = 0;
      v228 = 0;
      v229 = (_QWORD *)v223[6];
      v230 = 1;
      while (1)
      {
        v231 = v228 % v224;
        if (((v228 % v224) & 0x8000000000000000) != 0)
        {
          v236 = v229;
          do
          {
            v237 = (_QWORD *)*v236;
            if (*v236)
            {
              do
              {
                v232 = v237;
                v237 = (_QWORD *)v237[1];
              }
              while (v237);
            }
            else
            {
              do
              {
                v232 = (_QWORD *)v236[2];
                _ZF = *v232 == (_QWORD)v236;
                v236 = v232;
              }
              while (_ZF);
            }
            v236 = v232;
          }
          while (!__CFADD__(v231++, 1));
        }
        else
        {
          v232 = v229;
          if (v231)
          {
            v233 = v229;
            do
            {
              v235 = (_QWORD *)v233[1];
              if (v235)
              {
                do
                {
                  v232 = v235;
                  v235 = (_QWORD *)*v235;
                }
                while (v235);
              }
              else
              {
                do
                {
                  v232 = (_QWORD *)v233[2];
                  _ZF = *v232 == (_QWORD)v233;
                  v233 = v232;
                }
                while (!_ZF);
              }
              v233 = v232;
            }
            while (v231-- > 1);
          }
        }
        v238 = v232[4];
        v239 = v232[5];
        if (v238 == a2 && a3 == (_DWORD)v239)
          break;
        v230 = 0;
        v226 = v238 & 0xFFFFFFFFFFFFFF00;
        ++v228;
        result = 1;
        v227 = v238;
        if (v228 == v225)
          return result;
      }
      if ((v230 & 1) == 0 && a2 == (v227 | v226))
        sub_20FC1CD30(a1);
    }
  }
  return 1;
}

void sub_20FC1A6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  if (*(_BYTE *)(v47 - 152))
  {
    if (*(char *)(v47 - 153) < 0)
      operator delete(*(void **)(v47 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20FC1A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  sub_20E86E8C4((uint64_t *)(v47 - 200));
  sub_20E86E8C4((uint64_t *)(v47 - 184));
  sub_20E86E658(v47 - 176);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20FC1A794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20FC1A7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FC1A874(uint64_t a1)
{
  _QWORD *result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v33;
  _BOOL4 v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  double *v65;
  double v67;
  float64x2_t v70;
  double v72;
  double v73;
  double v75;
  uint64_t v86;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  double *v95;
  uint64_t v96;
  double *v97;
  double v99;
  float64x2_t v102;
  double v104;
  double v105;
  double v107;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t *v123;
  uint64_t v124;
  __int128 v125;
  unsigned int v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unsigned int v137;
  __int128 v138;
  unsigned int v139;
  __int128 v140;
  double v141;

  sub_20FC28E88((int64x2_t *)a1, *(unsigned int *)(a1 + 2152), *(double *)(a1 + 2168));
  result = *(_QWORD **)(a1 + 8);
  v3 = result[8];
  v4 = result[39] * v3;
  if (v4)
  {
    v5 = a1;
    v6 = 0;
    v131 = a1 + 4856;
    v130 = a1 + 5184;
    v129 = a1 + 7864;
    v134 = *(_QWORD **)(a1 + 8);
    v135 = a1;
    v132 = result[39] * v3;
    v133 = result[8];
    while (1)
    {
      v7 = v6 / v3;
      v8 = v6 % v3;
      v9 = (_QWORD *)result[6];
      if (((v6 % v3) & 0x8000000000000000) != 0)
      {
        do
        {
          v21 = (_QWORD *)*v9;
          if (*v9)
          {
            do
            {
              v10 = v21;
              v21 = (_QWORD *)v21[1];
            }
            while (v21);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v9[2];
              _ZF = *v10 == (_QWORD)v9;
              v9 = v10;
            }
            while (_ZF);
          }
          v9 = v10;
          _CF = __CFADD__(v8++, 1);
        }
        while (!_CF);
      }
      else if (v8)
      {
        do
        {
          v20 = (_QWORD *)v9[1];
          if (v20)
          {
            do
            {
              v10 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v9[2];
              _ZF = *v10 == (_QWORD)v9;
              v9 = v10;
            }
            while (!_ZF);
          }
          v9 = v10;
          v19 = v8-- <= 1;
        }
        while (!v19);
      }
      else
      {
        v10 = (_QWORD *)result[6];
      }
      v11 = *((_OWORD *)v10 + 2);
      v12 = (_QWORD *)result[37];
      if (v7 < 0)
      {
        do
        {
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            do
            {
              v13 = v22;
              v22 = (_QWORD *)v22[1];
            }
            while (v22);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v12[2];
              _ZF = *v13 == (_QWORD)v12;
              v12 = v13;
            }
            while (_ZF);
          }
          v12 = v13;
          _CF = __CFADD__(v7++, 1);
        }
        while (!_CF);
      }
      else if (v3 <= v6)
      {
        do
        {
          v23 = (_QWORD *)v12[1];
          if (v23)
          {
            do
            {
              v13 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v12[2];
              _ZF = *v13 == (_QWORD)v12;
              v12 = v13;
            }
            while (!_ZF);
          }
          v12 = v13;
          v19 = v7-- <= 1;
        }
        while (!v19);
      }
      else
      {
        v13 = (_QWORD *)result[37];
      }
      v14 = *((_DWORD *)v13 + 8);
      v138 = v11;
      v139 = v14;
      v16 = *(uint64_t **)(v5 + 48);
      v15 = *(uint64_t **)(v5 + 56);
      if (v16 != v15)
        break;
LABEL_3:
      if (++v6 == v4)
        return result;
    }
    v17 = *(_QWORD *)(v5 + 6688);
    if (v17 == *(_QWORD *)(v5 + 6680))
      v18 = 0;
    else
      v18 = *(_DWORD *)(v17 - 200) + 1;
    v24 = *(unsigned int *)(v5 + 2152);
LABEL_43:
    v25 = *v16;
    v26 = *(_QWORD *)(*v16 + 984);
    v27 = *(_QWORD *)(*v16 + 976);
    v28 = 0x86BCA1AF286BCA1BLL * ((v26 - v27) >> 3);
    if (v28 < v24 || v26 == v27)
      goto LABEL_42;
    while (1)
    {
      v29 = v28 >> 1;
      v30 = v27 + 152 * (v28 >> 1);
      v31 = *(_DWORD *)(v30 + 16);
      _CF = v31 >= v139;
      if (v31 != v139)
        goto LABEL_52;
      if (*(_QWORD *)v30 >= (unint64_t)v138)
        break;
LABEL_46:
      v27 = v30 + 152;
      v29 = v28 + ~v29;
LABEL_47:
      v28 = v29;
      if (!v29)
      {
        if (v27 == v26
          || *(_DWORD *)(v27 + 16) != v139
          || *(_QWORD *)v27 != (_QWORD)v138
          || *(_DWORD *)(v27 + 8) != DWORD2(v138))
        {
          goto LABEL_42;
        }
        v137 = v18;
        v33 = *(_DWORD *)(v25 + 32);
        if (!*(_BYTE *)(v25 + 968))
        {
          v34 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1466, (uint64_t)"line_track_ptr->getStructure()", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v5 = v135;
          if (v34)
            goto LABEL_123;
        }
        v35 = *(char **)(v5 + 6152);
        v36 = *(char **)(v5 + 6160);
        v37 = v35;
        if (v36 != v35)
        {
          v38 = (v36 - v35) >> 4;
          v37 = *(char **)(v5 + 6152);
          do
          {
            v39 = v38 >> 1;
            v40 = (unsigned int *)&v37[16 * (v38 >> 1)];
            v42 = *v40;
            v41 = (char *)(v40 + 4);
            v38 += ~(v38 >> 1);
            if (v42 < v33)
              v37 = v41;
            else
              v38 = v39;
          }
          while (v38);
        }
        if (v37 == v36 || *(_DWORD *)v37 != v33)
          v37 = *(char **)(v5 + 6160);
        v43 = v33 + 1;
        if (v36 != v35)
        {
          v44 = (v36 - v35) >> 4;
          do
          {
            v45 = v44 >> 1;
            v46 = (unsigned int *)&v35[16 * (v44 >> 1)];
            v48 = *v46;
            v47 = (char *)(v46 + 4);
            v44 += ~(v44 >> 1);
            if (v48 < v43)
              v35 = v47;
            else
              v44 = v45;
          }
          while (v44);
        }
        if (v35 == v36 || *(_DWORD *)v35 != v43)
          v35 = *(char **)(v5 + 6160);
        v49 = *v16;
        v136 = v6;
        if (v37 != v36 || v35 != v36)
          goto LABEL_109;
        v50 = v49 + 40;
        v51 = *(unsigned __int8 *)(v49 + 968);
        if (*(_BYTE *)(v49 + 968))
          v52 = v49 + 40;
        else
          v52 = 0;
        LODWORD(v140) = v33;
        BYTE4(v140) = 1;
        *((_QWORD *)&v140 + 1) = v52;
        if (!v51)
          goto LABEL_95;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v49 + 40))
        {
          _Q1 = *(_OWORD *)(v49 + 104);
          _D3 = *(_QWORD *)(v49 + 112);
          __asm { FMLA            D2, D3, V1.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v49 + 120) * *(double *)(v49 + 120)) + -1.0) > 0.000001)
          {
            v58 = 82;
            v59 = "std::fabs(anchor_direction().norm2() - 1) <= 1e-6";
            v60 = 49;
            goto LABEL_89;
          }
          goto LABEL_90;
        }
        v58 = 44;
        v59 = "initializeImpl()";
        v60 = 16;
LABEL_89:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", v58, (uint64_t)v59, v60, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_123;
        }
LABEL_90:
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v49 + 40))
          goto LABEL_95;
        v61 = *(uint64_t **)(v49 + 136);
        v62 = *v61;
        v63 = (double *)v61[2];
        v64 = v61[4];
        v65 = (double *)v61[6];
        _D1 = *(double *)(v49 + 56) - v63[1];
        v67 = *(double *)(v49 + 64) - v63[2];
        _Q3.f64[0] = *(float64_t *)(v62 + 16);
        _Q7 = *(_OWORD *)(v62 + 48);
        _Q3.f64[1] = *(float64_t *)(v62 + 40);
        v70 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v62, *(int64x2_t *)(v62 + 24)), *(double *)(v49 + 48) - *v63), (float64x2_t)vzip2q_s64(*(int64x2_t *)v62, *(int64x2_t *)(v62 + 24)), _D1), _Q3, v67);
        __asm { FMLA            D2, D1, V7.D[1] }
        v72 = _D2 + *(double *)(v62 + 64) * v67;
        v73 = v70.f64[0] - *v65;
        _D2 = v70.f64[1] - v65[1];
        v75 = v72 - v65[2];
        _Q3.f64[0] = *(float64_t *)(v64 + 16);
        _Q4 = *(int64x2_t *)v64;
        _Q6 = *(int64x2_t *)(v64 + 24);
        _Q16 = *(_OWORD *)(v64 + 48);
        __asm { FMLA            D19, D2, V4.D[1] }
        _Q3.f64[1] = *(float64_t *)(v64 + 40);
        _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v64, _Q6), v73), (float64x2_t)vzip2q_s64(*(int64x2_t *)v64, _Q6), _D2), _Q3, v75);
        __asm
        {
          FMLA            D3, D2, V16.D[1]
          FMLA            D1, D2, V6.D[1]
        }
        _D1 = _D1 + v75 * _Q3.f64[1];
        __asm { FMLA            D2, D1, V17.D[1] }
        v141 = sqrt(_D2 + (_Q3.f64[0] + v75 * *(double *)(v64 + 64)) * (_Q3.f64[0] + *(double *)(v64 + 64) * v75));
        _Q1 = *(_OWORD *)(v49 + 104);
        _Q3.f64[0] = *(float64_t *)(v49 + 112);
        __asm { FMLA            D2, D3, V1.D[1] }
        if (fabs(sqrt(_D2 + *(double *)(v49 + 120) * *(double *)(v49 + 120)) + -1.0) > 0.000001
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_123;
        }
        if (sub_20FC2EA9C(v130, (unsigned int *)&v140))
        {
          *(_BYTE *)(v129 + 4) = 0;
          *(_DWORD *)v129 = 0;
        }
LABEL_95:
        if (*(_BYTE *)(*v16 + 968))
          v86 = *v16 + 40;
        else
          v86 = 0;
        LODWORD(v140) = v33 + 1;
        BYTE4(v140) = 1;
        *((_QWORD *)&v140 + 1) = v86 + 448;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v86 + 448) + 24))(v86 + 448))
        {
          _Q1 = *(_OWORD *)(v86 + 512);
          _D3 = *(_QWORD *)(v86 + 520);
          __asm { FMLA            D2, D3, V1.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v86 + 528) * *(double *)(v86 + 528)) + -1.0) > 0.000001)
          {
            v90 = 82;
            v91 = "std::fabs(anchor_direction().norm2() - 1) <= 1e-6";
            v92 = 49;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        v90 = 44;
        v91 = "initializeImpl()";
        v92 = 16;
LABEL_102:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", v90, (uint64_t)v91, v92, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_123;
        }
LABEL_103:
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v86 + 448) + 24))(v86 + 448))
          goto LABEL_108;
        v93 = *(uint64_t **)(v86 + 544);
        v94 = *v93;
        v95 = (double *)v93[2];
        v96 = v93[4];
        v97 = (double *)v93[6];
        _D1 = *(double *)(v86 + 464) - v95[1];
        v99 = *(double *)(v86 + 472) - v95[2];
        _Q3.f64[0] = *(float64_t *)(v94 + 16);
        _Q7 = *(_OWORD *)(v94 + 48);
        _Q3.f64[1] = *(float64_t *)(v94 + 40);
        v102 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v94, *(int64x2_t *)(v94 + 24)), *(double *)(v86 + 456) - *v95), (float64x2_t)vzip2q_s64(*(int64x2_t *)v94, *(int64x2_t *)(v94 + 24)), _D1), _Q3, v99);
        __asm { FMLA            D2, D1, V7.D[1] }
        v104 = _D2 + *(double *)(v94 + 64) * v99;
        v105 = v102.f64[0] - *v97;
        _D2 = v102.f64[1] - v97[1];
        v107 = v104 - v97[2];
        _Q3.f64[0] = *(float64_t *)(v96 + 16);
        _Q4 = *(int64x2_t *)v96;
        _Q6 = *(int64x2_t *)(v96 + 24);
        _Q16 = *(_OWORD *)(v96 + 48);
        __asm { FMLA            D19, D2, V4.D[1] }
        _Q3.f64[1] = *(float64_t *)(v96 + 40);
        _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v96, _Q6), v105), (float64x2_t)vzip2q_s64(*(int64x2_t *)v96, _Q6), _D2), _Q3, v107);
        __asm
        {
          FMLA            D3, D2, V16.D[1]
          FMLA            D1, D2, V6.D[1]
        }
        _D1 = _D1 + v107 * _Q3.f64[1];
        __asm { FMLA            D2, D1, V17.D[1] }
        v141 = sqrt(_D2 + (_Q3.f64[0] + v107 * *(double *)(v96 + 64)) * (_Q3.f64[0] + *(double *)(v96 + 64) * v107));
        _Q1 = *(_OWORD *)(v86 + 512);
        _Q3.f64[0] = *(float64_t *)(v86 + 520);
        __asm { FMLA            D2, D3, V1.D[1] }
        if (fabs(sqrt(_D2 + *(double *)(v86 + 528) * *(double *)(v86 + 528)) + -1.0) > 0.000001
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_123:
          abort();
        }
        if (sub_20FC2EA9C(v130, (unsigned int *)&v140))
        {
          *(_BYTE *)(v129 + 4) = 0;
          *(_DWORD *)v129 = 0;
        }
LABEL_108:
        v49 = *v16;
        v5 = v135;
LABEL_109:
        v118 = v49 + 40;
        if (!*(_BYTE *)(v49 + 968))
          v118 = 0;
        v119 = *(_DWORD *)(v118 + 904);
        v120 = *(_DWORD *)(v118 + 912);
        _ZF = v120 == v139 && *(_QWORD *)(v118 + 896) == (_QWORD)v138;
        if (_ZF && v119 == DWORD2(v138))
        {
          v3 = v133;
          result = v134;
          v4 = v132;
          v6 = v136;
          v18 = v137;
        }
        else
        {
          v123 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v5 + 8) + 1784), (uint64_t *)&v138);
          if (v123)
            v124 = v123[13];
          else
            v124 = 0;
          v125 = *(_OWORD *)(v27 + 32);
          v141 = *(double *)(v27 + 48);
          v140 = v125;
          v126 = v33;
          v127 = v124;
          sub_20FC2EF4C(v119, v120, DWORD2(v138), v139, v126, v124, (uint64_t)&v140, v137, *(double *)(v27 + 144), v131);
          v128 = *(_OWORD *)(v27 + 32);
          v141 = *(double *)(v27 + 48);
          v140 = v128;
          sub_20FC2EF4C(v119, v120, DWORD2(v138), v139, v43, v127, (uint64_t)&v140, v137 + 1, *(double *)(v27 + 144), v131);
          v18 = v137 + 2;
          result = v134;
          v5 = v135;
          v4 = v132;
          v3 = v133;
          v6 = v136;
        }
LABEL_42:
        if (++v16 == v15)
          goto LABEL_3;
        goto LABEL_43;
      }
    }
    if (*(_QWORD *)v30 != (_QWORD)v138)
      goto LABEL_47;
    _CF = *(_DWORD *)(v30 + 8) >= DWORD2(v138);
LABEL_52:
    if (_CF)
      goto LABEL_47;
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_20FC1B210(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _BOOL4 v21;
  unsigned int v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  char *v28;
  unsigned int v29;
  int v30;
  char v31;
  int v32;
  _QWORD *v34;
  unint64_t v35;
  int64x2_t *v36;
  uint64_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  uint64_t v41;
  unsigned int v42;
  char v43;
  __int128 v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  char *v81;
  unsigned int v82;
  double *v83;
  double v84;
  uint64_t v85;
  double *v87;
  int64x2_t *v88;
  double *v89;
  double v90;
  double v91;
  float64x2_t v92;
  float64x2_t v94;
  double v99;
  double v101;
  double v103;
  unint64_t v104;
  float v105;
  float v106;
  float v107;
  double v108;
  int8x8_t v109;
  unint64_t v110;
  uint8x8_t v111;
  unint64_t v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  char *v124;
  unsigned int v125;
  char *v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int *v130;
  char *v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  double *v144;
  int64x2_t *v145;
  double *v146;
  double v147;
  double v148;
  float64x2_t v149;
  float64x2_t v151;
  double v153;
  double v155;
  double v157;
  double *v158;
  float v159;
  float v160;
  float v161;
  double v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  double *v176;
  int64x2_t *v177;
  double *v178;
  double v179;
  double v180;
  float64x2_t v181;
  float64x2_t v183;
  double v185;
  double v187;
  double v189;
  unint64_t v190;
  double *v191;
  float v192;
  float v193;
  float v194;
  double v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  unsigned int v199;
  _QWORD *v200;
  unint64_t v201;
  char *v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int *v206;
  char *v207;
  unsigned int v208;
  int8x8_t v209;
  uint8x8_t v210;
  unint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL4 v219;
  unsigned int *v220;
  unint64_t v221;
  char *v222;
  char *v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  char *v227;
  unsigned int v228;
  int8x8_t v229;
  uint8x8_t v230;
  unint64_t v231;
  uint64_t **v232;
  uint64_t *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  BOOL v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t *v246;
  int64x2_t **v247;
  uint64_t v250;
  float64x2_t v251;
  _QWORD *v252;
  uint64_t *v253;
  float64x2_t v254;
  float64x2_t v255;
  unint64_t v256;
  uint64_t v257;
  void *__p;
  unsigned int *v259;
  unsigned int *v260;
  unsigned int *v261;
  int64x2_t v262;
  __int128 v263;
  uint64_t v264;
  int v265;
  unsigned int v266;
  char v267;
  uint64_t v268;

  v3 = a1;
  v4 = a1[3];
  v5 = a1[4];
  if (v4 != v5)
  {
    v6 = a2;
    do
    {
      if (v6 > (uint64_t)(*(_QWORD *)(*(_QWORD *)v4 + 504) - *(_QWORD *)(*(_QWORD *)v4 + 496)) >> 6)
      {
        v7 = *(_DWORD *)(*(_QWORD *)v4 + 32);
        v8 = (char *)v3[769];
        v9 = (char *)v3[770];
        if (v9 != v8)
        {
          v10 = (v9 - v8) >> 4;
          do
          {
            v11 = v10 >> 1;
            v12 = (unsigned int *)&v8[16 * (v10 >> 1)];
            v14 = *v12;
            v13 = (char *)(v12 + 4);
            v10 += ~(v10 >> 1);
            if (v14 < v7)
              v8 = v13;
            else
              v10 = v11;
          }
          while (v10);
        }
        if (v8 != v9 && *(_DWORD *)v8 == v7)
        {
          if (sub_20FBD9AF8((uint64_t)(v3 + 648), v7))
          {
            *((_WORD *)v3 + 3934) = 0;
            *((_DWORD *)v3 + 1966) = 0;
          }
          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2372, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_278;
          }
          *(_DWORD *)(*(_QWORD *)v4 + 520) = 0;
          v6 = a2;
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  v250 = (uint64_t)(v3 + 648);
  v15 = *((_DWORD *)v3 + 546) + sub_20FA59E8C((uint64_t)(v3 + 648), 0);
  v16 = a3 < (uint64_t)(v3[4] - v3[3]) >> 3 && v15 > a3;
  if (v16)
  {
    v245 = v3;
    if (*((_BYTE *)v3 + 2104))
    {
      v34 = (_QWORD *)v3[1];
      v35 = v34[8];
      v36 = (int64x2_t *)v34[6];
      if ((v35 & 0x1FFFFFFFELL) != 0)
      {
        v37 = (v35 >> 1);
        do
        {
          v38 = (int64x2_t *)v36->i64[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (int64x2_t *)v38->i64[0];
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (int64x2_t *)v36[1].i64[0];
              _ZF = v39->i64[0] == (_QWORD)v36;
              v36 = v39;
            }
            while (!_ZF);
          }
          v36 = v39;
          v16 = v37-- <= 1;
        }
        while (!v16);
      }
      else
      {
        v39 = (int64x2_t *)v34[6];
      }
      v55 = v34[225];
      v262 = v39[2];
      v56 = (_QWORD *)v34[37];
      if (v56 == v34 + 38)
      {
        v57 = (uint64_t *)(v55 + 40);
LABEL_66:
        v247 = (int64x2_t **)v57;
      }
      else
      {
        do
        {
          LODWORD(v263) = *((_DWORD *)v56 + 8);
          v58 = sub_20E9DF85C(v34 + 223, v262.i64);
          if (v58)
          {
            v57 = v58 + 5;
            goto LABEL_66;
          }
          v59 = (_QWORD *)v56[1];
          if (v59)
          {
            do
            {
              v60 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (_QWORD *)v56[2];
              _ZF = *v60 == (_QWORD)v56;
              v56 = v60;
            }
            while (!_ZF);
          }
          v34 = (_QWORD *)v3[1];
          v56 = v60;
        }
        while (v60 != v34 + 38);
        v247 = 0;
      }
      v61 = (uint64_t)(v3[4] - v3[3]) >> 3;
      v262 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v253 = v3 + 396;
      sub_20F623C14((uint64_t)(v3 + 396), v61, &v262);
      v257 = *(_QWORD *)(v3[1] + 48);
      __p = &v262;
      v62 = v3[3];
      v63 = (uint64_t *)v3[4];
      v64 = 126 - 2 * __clz((uint64_t)((uint64_t)v63 - v62) >> 3);
      v262.i64[0] = (uint64_t)v3;
      v262.i64[1] = (uint64_t)&v257;
      if (v63 == (uint64_t *)v62)
        v65 = 0;
      else
        v65 = v64;
      sub_20FC31EB8(v62, v63, (_QWORD ***)&__p, v65, 1);
      v252 = v3 + 402;
      bzero(v3 + 402, 0x480uLL);
      v66 = v3 + 399;
      v67 = (uint64_t)(v3[4] - v3[3]) >> 3;
      LOBYTE(__p) = 0;
      sub_20EDCA4D0((uint64_t)(v3 + 399), v67, &__p);
      v69 = v3[3];
      v68 = v3[4];
      v246 = v3 + 399;
      if (v68 == v69)
      {
        v71 = 0;
        v70 = 0;
        v243 = v3[4];
        v69 = v243;
        if (a3)
          goto LABEL_147;
LABEL_270:
        v240 = v243;
        if (v243 != v69)
        {
          v241 = 0;
          while (1)
          {
            if (((*(_QWORD *)(*v246 + ((v241 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v241) & 1) == 0)
            {
              v242 = *(_QWORD *)(v69 + 8 * v241);
              if (sub_20FBD9AF8(v250, *(_DWORD *)(v242 + 32)))
              {
                *((_WORD *)v3 + 3934) = 0;
                *((_DWORD *)v3 + 1966) = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2285, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_278;
              }
              *(_DWORD *)(v242 + 520) = 0;
              v69 = v3[3];
              v240 = v3[4];
            }
            if (++v241 >= (v240 - v69) >> 3)
              goto LABEL_22;
          }
        }
        goto LABEL_22;
      }
      v70 = 0;
      v71 = 0;
      v72 = 0;
      if ((unint64_t)((v68 - v69) >> 3) <= 1)
        v73 = 1;
      else
        v73 = (v68 - v69) >> 3;
LABEL_77:
      v74 = *(_QWORD *)(v69 + 8 * v72);
      v75 = *(_QWORD *)(v74 + 32);
      if (*(_DWORD *)(v74 + 520) == 2)
      {
        v76 = (char *)v3[697];
        v77 = (char *)v3[698];
        if (v77 != v76)
        {
          v78 = (v77 - v76) >> 4;
          do
          {
            v79 = v78 >> 1;
            v80 = (unsigned int *)&v76[16 * (v78 >> 1)];
            v82 = *v80;
            v81 = (char *)(v80 + 4);
            v78 += ~(v78 >> 1);
            if (v82 < v75)
              v76 = v81;
            else
              v78 = v79;
          }
          while (v78);
        }
        if (v76 != v77 && *(_DWORD *)v76 == (_DWORD)v75)
          goto LABEL_86;
      }
      v109 = (int8x8_t)v3[389];
      if (!*(_QWORD *)&v109)
        goto LABEL_121;
      v110 = *(_QWORD *)(v74 + 32);
      v111 = (uint8x8_t)vcnt_s8(v109);
      v111.i16[0] = vaddlv_u8(v111);
      if (v111.u32[0] > 1uLL)
      {
        v112 = *(_QWORD *)(v74 + 32);
        if (*(_QWORD *)&v109 <= v110)
          v112 = v110 % *(_QWORD *)&v109;
      }
      else
      {
        v112 = (v109.i32[0] - 1) & v110;
      }
      v113 = *(uint64_t ***)(v3[388] + 8 * v112);
      if (!v113 || (v114 = *v113) == 0)
      {
LABEL_121:
        v126 = (char *)v3[769];
        v127 = (char *)v3[770];
        if (v127 != v126)
        {
          v128 = (v127 - v126) >> 4;
          do
          {
            v129 = v128 >> 1;
            v130 = (unsigned int *)&v126[16 * (v128 >> 1)];
            v132 = *v130;
            v131 = (char *)(v130 + 4);
            v128 += ~(v128 >> 1);
            if (v132 < v75)
              v126 = v131;
            else
              v128 = v129;
          }
          while (v128);
        }
        if (v126 == v127 || *(_DWORD *)v126 != (_DWORD)v75)
        {
          *(_QWORD *)(*v66 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
          ++v71;
        }
        goto LABEL_76;
      }
      if (v111.u32[0] < 2uLL)
      {
        v115 = *(_QWORD *)&v109 - 1;
        while (1)
        {
          v117 = v114[1];
          if (v117 == v110)
          {
            if (*((_DWORD *)v114 + 4) == (_DWORD)v75)
              goto LABEL_113;
          }
          else if ((v117 & v115) != v112)
          {
            goto LABEL_121;
          }
          v114 = (uint64_t *)*v114;
          if (!v114)
            goto LABEL_121;
        }
      }
      while (1)
      {
        v116 = v114[1];
        if (v116 == v110)
        {
          if (*((_DWORD *)v114 + 4) == (_DWORD)v75)
          {
LABEL_113:
            v119 = (char *)v3[769];
            v120 = (char *)v3[770];
            if (v120 != v119)
            {
              v121 = (v120 - v119) >> 4;
              do
              {
                v122 = v121 >> 1;
                v123 = (unsigned int *)&v119[16 * (v121 >> 1)];
                v125 = *v123;
                v124 = (char *)(v123 + 4);
                v121 += ~(v121 >> 1);
                if (v125 < v75)
                  v119 = v124;
                else
                  v121 = v122;
              }
              while (v121);
            }
            if (v119 == v120 || *(_DWORD *)v119 != (_DWORD)v75)
              goto LABEL_121;
LABEL_86:
            v83 = (double *)(*v253 + 16 * v72);
            v84 = *v83;
            if (*v83 <= 6.28318531)
            {
              v108 = v83[1];
            }
            else
            {
              v85 = v74 + 40;
              if (!*(_BYTE *)(v74 + 488))
                v85 = 0;
              _Q1 = *(_OWORD *)(v85 + 8);
              v87 = (double *)v247[2];
              v88 = v247[4];
              v89 = (double *)v247[6];
              v90 = *(double *)&_Q1 - *v87;
              *(double *)&_Q1 = *((double *)&_Q1 + 1) - v87[1];
              v91 = *(double *)(v85 + 24) - v87[2];
              *(_QWORD *)&v92.f64[0] = (*v247)[1].i64[0];
              _Q7 = (*v247)[3];
              *(_QWORD *)&v92.f64[1] = (*v247)[2].i64[1];
              v94 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), v90), (float64x2_t)vzip2q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), *(double *)&_Q1), v92, v91);
              __asm { FMLA            D2, D1, V7.D[1] }
              v99 = _D2 + *(double *)(*v247)[4].i64 * v91;
              _D2 = v94.f64[1] - v89[1];
              v101 = v99 - v89[2];
              *(_QWORD *)&v92.f64[0] = v88[1].i64[0];
              _Q7 = v88[3];
              *(_QWORD *)&v92.f64[1] = v88[2].i64[1];
              v254 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v88, *(int64x2_t *)((char *)v88 + 24)), v94.f64[0] - *v89), (float64x2_t)vzip2q_s64(*v88, *(int64x2_t *)((char *)v88 + 24)), _D2), v92, v101);
              __asm { FMLA            D1, D2, V7.D[1] }
              v103 = *(double *)&_Q1 + *(double *)v88[4].i64 * v101;
              *(float *)&v101 = v254.f64[0];
              *(float *)&_Q1 = v103;
              v104 = v70;
              v84 = atan2f(*(float *)&v101, *(float *)&_Q1) + 3.14159265;
              *v83 = v84;
              v105 = v254.f64[1];
              v106 = sqrt(vmulq_f64(v254, v254).f64[0] + v103 * v103);
              v107 = atan2f(v105, v106);
              v70 = v104;
              v108 = v107 + 1.57079633;
              v83[1] = v108;
            }
            v118 = (unint64_t)(v84 * 3.81971863) - ((unint64_t)(v84 * 3.81971863) == 24);
            ++*((_DWORD *)&v252[6 * v118]
              + (unint64_t)(v108 * 3.81971863)
              - ((unint64_t)(v108 * 3.81971863) == 12));
            ++v70;
            ++v71;
            *(_QWORD *)(*v66 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
LABEL_76:
            if (++v72 == v73)
            {
              v133 = 0;
              v134 = 0;
              do
              {
                if ((*(_QWORD *)(*v66 + 8 * (v134 >> 6)) & (1 << v134)) == 0)
                {
                  v135 = *(_QWORD *)(v69 + 8 * v134);
                  v136 = *(_QWORD *)(v135 + 496);
                  v137 = *(_QWORD *)(v135 + 504);
                  if (*((unsigned int *)v3 + 528) <= (unint64_t)((v137 - v136) >> 6))
                  {
                    v138 = v70;
                    if (sub_20F8830B0(v136, v137) < (unint64_t)*((unsigned int *)v3 + 527))
                    {
                      v70 = v138;
                    }
                    else
                    {
                      v70 = v138 + 1;
                      ++v71;
                      *(_QWORD *)(*v66 + 8 * (v134 >> 6)) |= 1 << v134;
                      if (v138 + 1 >= a3)
                      {
                        v69 = v3[3];
                        v243 = v3[4];
                        goto LABEL_270;
                      }
                      v139 = *v253;
                      v140 = *(double *)(*v253 + v133);
                      if (v140 <= 6.28318531)
                      {
                        v162 = *(double *)(v139 + v133 + 8);
                      }
                      else
                      {
                        v141 = *(_QWORD *)(v3[3] + 8 * v134);
                        if (*(_BYTE *)(v141 + 488))
                          v142 = v141 + 40;
                        else
                          v142 = 0;
                        _Q1 = *(_OWORD *)(v142 + 8);
                        v144 = (double *)v247[2];
                        v145 = v247[4];
                        v146 = (double *)v247[6];
                        v147 = *(double *)&_Q1 - *v144;
                        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v144[1];
                        v148 = *(double *)(v142 + 24) - v144[2];
                        *(_QWORD *)&v149.f64[0] = (*v247)[1].i64[0];
                        _Q7 = (*v247)[3];
                        *(_QWORD *)&v149.f64[1] = (*v247)[2].i64[1];
                        v151 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), v147), (float64x2_t)vzip2q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), *(double *)&_Q1), v149, v148);
                        __asm { FMLA            D2, D1, V7.D[1] }
                        v153 = _D2 + *(double *)(*v247)[4].i64 * v148;
                        _D2 = v151.f64[1] - v146[1];
                        v155 = v153 - v146[2];
                        *(_QWORD *)&v149.f64[0] = v145[1].i64[0];
                        _Q7 = v145[3];
                        *(_QWORD *)&v149.f64[1] = v145[2].i64[1];
                        v255 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v145, *(int64x2_t *)((char *)v145 + 24)), v151.f64[0] - *v146), (float64x2_t)vzip2q_s64(*v145, *(int64x2_t *)((char *)v145 + 24)), _D2), v149, v155);
                        __asm { FMLA            D1, D2, V7.D[1] }
                        v157 = *(double *)&_Q1 + *(double *)v145[4].i64 * v155;
                        *(float *)&v155 = v255.f64[0];
                        *(float *)&_Q1 = v157;
                        v140 = atan2f(*(float *)&v155, *(float *)&_Q1) + 3.14159265;
                        v158 = (double *)(v139 + v133);
                        *v158 = v140;
                        v159 = v255.f64[1];
                        v160 = sqrt(vmulq_f64(v255, v255).f64[0] + v157 * v157);
                        v161 = atan2f(v159, v160);
                        v70 = v138 + 1;
                        v162 = v161 + 1.57079633;
                        v158[1] = v162;
                      }
                      v163 = (unint64_t)(v140 * 3.81971863) - ((unint64_t)(v140 * 3.81971863) == 24);
                      v164 = 4 * ((unint64_t)(v162 * 3.81971863) - ((unint64_t)(v162 * 3.81971863) == 12));
                      ++*(_DWORD *)((char *)&v252[6 * v163] + v164);
                    }
                  }
                }
                ++v134;
                v69 = v3[3];
                v133 += 16;
              }
              while (v134 < (v3[4] - v69) >> 3);
              v243 = v3[4];
              if (v70 >= a3)
                goto LABEL_270;
LABEL_147:
              v165 = (v243 - v69) >> 3;
              if (v243 == v69)
              {
                if (v71 < v165)
                {
                  while (1)
                    ;
                }
                goto LABEL_270;
              }
              v166 = 1;
              v244 = v69;
LABEL_152:
              if (v71 >= v165)
                goto LABEL_270;
              v256 = v71;
              v167 = 0;
              v168 = 0;
              v169 = *v246;
              while (1)
              {
                v170 = *(_QWORD *)(v169 + 8 * (v168 >> 6));
                if ((v170 & (1 << v168)) == 0)
                {
                  v171 = *v253;
                  v172 = *(double *)(*v253 + v167);
                  if (v172 <= 6.28318531)
                  {
                    v195 = *(double *)(v171 + v167 + 8);
                  }
                  else
                  {
                    v173 = *(_QWORD *)(v69 + 8 * v168);
                    v174 = *(_BYTE *)(v173 + 488) ? v173 + 40 : 0;
                    _Q1 = *(_OWORD *)(v174 + 8);
                    v176 = (double *)v247[2];
                    v177 = v247[4];
                    v178 = (double *)v247[6];
                    v179 = *(double *)&_Q1 - *v176;
                    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v176[1];
                    v180 = *(double *)(v174 + 24) - v176[2];
                    *(_QWORD *)&v181.f64[0] = (*v247)[1].i64[0];
                    _Q7 = (*v247)[3];
                    *(_QWORD *)&v181.f64[1] = (*v247)[2].i64[1];
                    v183 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), v179), (float64x2_t)vzip2q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), *(double *)&_Q1), v181, v180);
                    __asm { FMLA            D2, D1, V7.D[1] }
                    v185 = _D2 + *(double *)(*v247)[4].i64 * v180;
                    _D2 = v183.f64[1] - v178[1];
                    v187 = v185 - v178[2];
                    *(_QWORD *)&v181.f64[0] = v177[1].i64[0];
                    _Q7 = v177[3];
                    *(_QWORD *)&v181.f64[1] = v177[2].i64[1];
                    v251 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v177, *(int64x2_t *)((char *)v177 + 24)), v183.f64[0] - *v178), (float64x2_t)vzip2q_s64(*v177, *(int64x2_t *)((char *)v177 + 24)), _D2), v181, v187);
                    __asm { FMLA            D1, D2, V7.D[1] }
                    v189 = *(double *)&_Q1 + *(double *)v177[4].i64 * v187;
                    *(float *)&v187 = v251.f64[0];
                    *(float *)&_Q1 = v189;
                    v190 = v70;
                    v172 = atan2f(*(float *)&v187, *(float *)&_Q1) + 3.14159265;
                    v191 = (double *)(v171 + v167);
                    *v191 = v172;
                    v192 = v251.f64[1];
                    v193 = sqrt(vmulq_f64(v251, v251).f64[0] + v189 * v189);
                    v194 = atan2f(v192, v193);
                    v70 = v190;
                    v69 = v244;
                    v195 = v194 + 1.57079633;
                    v191[1] = v195;
                  }
                  v196 = (unint64_t)(v195 * 3.81971863) - ((unint64_t)(v195 * 3.81971863) == 12);
                  v197 = &v252[6
                             * ((unint64_t)(v172 * 3.81971863) - ((unint64_t)(v172 * 3.81971863) == 24))];
                  v198 = *((unsigned int *)v197 + v196);
                  if (v166 > v198)
                  {
                    ++v70;
                    ++v256;
                    *(_QWORD *)(v169 + 8 * (v168 >> 6)) = v170 | (1 << v168);
                    if (v70 >= a3)
                    {
LABEL_151:
                      ++v166;
                      v71 = v256;
                      if (v70 >= a3)
                        goto LABEL_270;
                      goto LABEL_152;
                    }
                    *((_DWORD *)v197 + v196) = v198 + 1;
                  }
                }
                ++v168;
                v167 += 16;
                if (v165 == v168)
                  goto LABEL_151;
              }
            }
            goto LABEL_77;
          }
        }
        else
        {
          if (v116 >= *(_QWORD *)&v109)
            v116 %= *(_QWORD *)&v109;
          if (v116 != v112)
            goto LABEL_121;
        }
        v114 = (uint64_t *)*v114;
        if (!v114)
          goto LABEL_121;
      }
    }
    v41 = v3[253];
    v42 = *((_DWORD *)v3 + 525);
    v43 = *((_BYTE *)v3 + 2116);
    v44 = *(_OWORD *)(v3 + 251);
    v262 = *(int64x2_t *)(v3 + 249);
    v263 = v44;
    v264 = v41;
    v265 = 15;
    v266 = v42;
    v267 = v43;
    v268 = 0;
    sub_20FC23474((uint64_t)&__p, (uint64_t)&v262, v3, a3);
    v46 = (unsigned int *)__p;
    v45 = v259;
    v47 = ((unint64_t)((char *)v259 - (_BYTE *)__p) >> 4) - v268;
    v48 = v260;
    v49 = (unint64_t)((char *)v261 - (char *)v260) >> 4;
    v50 = v49 - HIDWORD(v268);
    v51 = v49 - HIDWORD(v268) + v47;
    v52 = a3 - (v268 + HIDWORD(v268));
    v53 = v51 - v52;
    if (v51 > v52)
    {
      if ((_DWORD)v49 == HIDWORD(v268))
      {
        v54 = 0;
      }
      else if (v50 < v266 || v53 > v51 - v266)
      {
        if (v50 >= v52)
          v54 = v50 - v52;
        else
          v54 = 0;
        v53 -= v54;
      }
      else
      {
        _CF = v47 >= v52 - v266;
        v199 = v47 - (v52 - v266);
        if (!_CF)
          v199 = 0;
        v54 = v53 - v199;
        v53 = v199;
      }
      v200 = v3 + 983;
      if (__p != v259 && v53)
      {
        do
        {
          v201 = v46[2];
          v202 = (char *)v245[769];
          v203 = (char *)v245[770];
          if (v203 != v202)
          {
            v204 = (v203 - v202) >> 4;
            do
            {
              v205 = v204 >> 1;
              v206 = (unsigned int *)&v202[16 * (v204 >> 1)];
              v208 = *v206;
              v207 = (char *)(v206 + 4);
              v204 += ~(v204 >> 1);
              if (v208 < v201)
                v202 = v207;
              else
                v204 = v205;
            }
            while (v204);
          }
          if (v202 == v203 || *(_DWORD *)v202 != (_DWORD)v201)
            v202 = (char *)v245[770];
          v209 = (int8x8_t)v245[389];
          if (v209)
          {
            v210 = (uint8x8_t)vcnt_s8(v209);
            v210.i16[0] = vaddlv_u8(v210);
            if (v210.u32[0] > 1uLL)
            {
              v211 = v46[2];
              if (*(_QWORD *)&v209 <= v201)
                v211 = v201 % *(_QWORD *)&v209;
            }
            else
            {
              v211 = (v209.i32[0] - 1) & v201;
            }
            v212 = *(uint64_t ***)(v245[388] + 8 * v211);
            if (v212)
            {
              v213 = *v212;
              if (v213)
              {
                if (v210.u32[0] < 2uLL)
                {
                  v214 = *(_QWORD *)&v209 - 1;
                  while (1)
                  {
                    v216 = v213[1];
                    if (v216 == v201)
                    {
                      if (*((_DWORD *)v213 + 4) == (_DWORD)v201)
                        goto LABEL_179;
                    }
                    else if ((v216 & v214) != v211)
                    {
                      goto LABEL_209;
                    }
                    v213 = (uint64_t *)*v213;
                    if (!v213)
                      goto LABEL_209;
                  }
                }
                do
                {
                  v215 = v213[1];
                  if (v215 == v201)
                  {
                    if (*((_DWORD *)v213 + 4) == (_DWORD)v201)
                      goto LABEL_179;
                  }
                  else
                  {
                    if (v215 >= *(_QWORD *)&v209)
                      v215 %= *(_QWORD *)&v209;
                    if (v215 != v211)
                      break;
                  }
                  v213 = (uint64_t *)*v213;
                }
                while (v213);
              }
            }
          }
LABEL_209:
          if (v202 != v203)
          {
            if (sub_20FBD9AF8(v250, v201))
            {
              *((_WORD *)v200 + 2) = 0;
              *(_DWORD *)v200 = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
            {
LABEL_279:
              abort();
            }
            v217 = v245[3];
            v218 = v245[4];
            if (v217 != v218)
            {
              while (v46[2] != *(_DWORD *)(*(_QWORD *)v217 + 32))
              {
                v217 += 8;
                if (v217 == v218)
                  goto LABEL_216;
              }
            }
            if (v217 == v218)
            {
LABEL_216:
              v219 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
              v217 = v218;
              if (v219)
LABEL_262:
                abort();
            }
            *(_DWORD *)(*(_QWORD *)v217 + 520) = 0;
            if (!--v53)
              break;
          }
LABEL_179:
          v46 += 4;
        }
        while (v46 != v45);
        v48 = v260;
      }
      if (v54)
      {
        v220 = v261;
        if (v48 != v261)
        {
          do
          {
            v221 = v48[2];
            v222 = (char *)v245[769];
            v223 = (char *)v245[770];
            if (v223 != v222)
            {
              v224 = (v223 - v222) >> 4;
              do
              {
                v225 = v224 >> 1;
                v226 = (unsigned int *)&v222[16 * (v224 >> 1)];
                v228 = *v226;
                v227 = (char *)(v226 + 4);
                v224 += ~(v224 >> 1);
                if (v228 < v221)
                  v222 = v227;
                else
                  v224 = v225;
              }
              while (v224);
            }
            if (v222 == v223 || *(_DWORD *)v222 != (_DWORD)v221)
              v222 = (char *)v245[770];
            v229 = (int8x8_t)v245[389];
            if (v229)
            {
              v230 = (uint8x8_t)vcnt_s8(v229);
              v230.i16[0] = vaddlv_u8(v230);
              if (v230.u32[0] >= 2uLL)
              {
                v231 = v48[2];
                if (*(_QWORD *)&v229 <= v221)
                  v231 = v221 % *(_QWORD *)&v229;
              }
              else
              {
                v231 = (v229.i32[0] - 1) & v221;
              }
              v232 = *(uint64_t ***)(v245[388] + 8 * v231);
              if (v232)
              {
                v233 = *v232;
                if (v233)
                {
                  if (v230.u32[0] < 2uLL)
                  {
                    v234 = *(_QWORD *)&v229 - 1;
                    while (1)
                    {
                      v236 = v233[1];
                      if (v236 == v221)
                      {
                        if (*((_DWORD *)v233 + 4) == (_DWORD)v221)
                          goto LABEL_224;
                      }
                      else if ((v236 & v234) != v231)
                      {
                        goto LABEL_254;
                      }
                      v233 = (uint64_t *)*v233;
                      if (!v233)
                        goto LABEL_254;
                    }
                  }
                  do
                  {
                    v235 = v233[1];
                    if (v235 == v221)
                    {
                      if (*((_DWORD *)v233 + 4) == (_DWORD)v221)
                        goto LABEL_224;
                    }
                    else
                    {
                      if (v235 >= *(_QWORD *)&v229)
                        v235 %= *(_QWORD *)&v229;
                      if (v235 != v231)
                        break;
                    }
                    v233 = (uint64_t *)*v233;
                  }
                  while (v233);
                }
              }
            }
LABEL_254:
            if (v222 != v223)
            {
              if ((sub_20FBD9AF8(v250, v221) & 1) != 0)
              {
                *((_WORD *)v200 + 2) = 0;
                *(_DWORD *)v200 = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_279;
              }
              v237 = v245[3];
              v238 = v245[4];
              if (v237 != v238)
              {
                while (v48[2] != *(_DWORD *)(*(_QWORD *)v237 + 32))
                {
                  v237 += 8;
                  if (v237 == v238)
                    goto LABEL_261;
                }
              }
              if (v237 == v238)
              {
LABEL_261:
                v239 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                v237 = v238;
                if (v239)
                  goto LABEL_262;
              }
              *(_DWORD *)(*(_QWORD *)v237 + 520) = 0;
              if (!--v54)
                break;
            }
LABEL_224:
            v48 += 4;
          }
          while (v48 != v220);
          v48 = v260;
        }
      }
      v3 = v245;
    }
    if (v48)
    {
      v261 = v48;
      operator delete(v48);
    }
    if (__p)
    {
      v259 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
LABEL_22:
  v17 = v3[6];
  v18 = v3[7];
  v19 = a2;
  if (v17 != v18)
  {
    v20 = v3 + 983;
    while (1)
    {
      if (0x86BCA1AF286BCA1BLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v17 + 984) - *(_QWORD *)(*(_QWORD *)v17 + 976)) >> 3) < v19)
      {
        v22 = *(_DWORD *)(*(_QWORD *)v17 + 32);
        v23 = (char *)v3[769];
        v24 = (char *)v3[770];
        if (v24 != v23)
        {
          v25 = (v24 - v23) >> 4;
          do
          {
            v26 = v25 >> 1;
            v27 = (unsigned int *)&v23[16 * (v25 >> 1)];
            v29 = *v27;
            v28 = (char *)(v27 + 4);
            v25 += ~(v25 >> 1);
            if (v29 < v22)
              v23 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        if (v23 != v24 && *(_DWORD *)v23 == v22)
        {
          v30 = sub_20FBD9AF8(v250, v22);
          v31 = v30;
          if (v30)
          {
            *((_WORD *)v3 + 3934) = 0;
            *v20 = 0;
          }
          v32 = sub_20FBD9AF8(v250, *(_DWORD *)(*(_QWORD *)v17 + 32) + 1);
          v19 = a2;
          if (!v32 || (*((_WORD *)v3 + 3934) = 0, *v20 = 0, (v31 & 1) == 0))
          {
            v21 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2413, (uint64_t)"ret", 3, (uint64_t)"Failed to remove end point variables.", 37, (void (*)(void **))sub_21023DDB0);
            v19 = a2;
            if (v21)
              break;
          }
        }
      }
      v17 += 8;
      if (v17 == v18)
        goto LABEL_40;
    }
LABEL_278:
    abort();
  }
LABEL_40:
  sub_20FA59E8C(v250, 0);
  return kdebug_trace();
}

void sub_20FC1C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC1C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC1C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC1C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC1C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC1C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20FC1C60C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  unint64_t v25;
  uint64_t (*v26)(_QWORD);
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t (*v34)(_QWORD);
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  double *v42;
  const double *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  __int128 *v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  char *v70;
  char *v71;
  char *v72;
  char *i;
  __int128 v74;
  void *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  unsigned int *v85;
  char *v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  unsigned int v96;
  int v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  float64x2x2_t v102;

  v3 = *a2;
  v4 = *(char **)(a1 + 584);
  v5 = *(char **)(a1 + 592);
  if (v5 == v4)
  {
    v4 = *(char **)(a1 + 592);
    goto LABEL_11;
  }
  v6 = (v5 - v4) >> 4;
  do
  {
    v7 = v6 >> 1;
    v8 = &v4[16 * (v6 >> 1)];
    v10 = *(_DWORD *)v8;
    v9 = v8 + 16;
    v6 += ~(v6 >> 1);
    if (v10 < v3)
      v4 = v9;
    else
      v6 = v7;
  }
  while (v6);
  if (v5 == v4 || v3 != *(_DWORD *)v4)
  {
LABEL_11:
    v11 = *((unsigned __int8 *)a2 + 4);
    v12 = *(_QWORD *)a2;
    v13 = *((_QWORD *)a2 + 1);
    v100 = *((_OWORD *)a2 + 1);
    v101 = *((_QWORD *)a2 + 4);
    v14 = *((_BYTE *)a2 + 40);
    if (v5 != v4 && v3 == *(_DWORD *)v4)
      goto LABEL_72;
    v15 = *(_QWORD *)(a1 + 664);
    if (*(_QWORD *)(a1 + 656) != v15)
    {
      v16 = *(_QWORD *)(v15 - 8);
      *(_QWORD *)(a1 + 664) = v15 - 8;
      goto LABEL_52;
    }
    v17 = *(unsigned int *)(a1 + 640);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a1 + 648);
      if (v18 < 8 << (v17 - 1))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 16 * (v17 - 1));
        *(_QWORD *)(a1 + 648) = v18 + 1;
        v16 = v19 + 88 * v18;
        goto LABEL_52;
      }
      v20 = 88 * (16 << (v17 - 1));
      v21 = *(_QWORD *)(a1 + 616);
      if (v17 == (*(_QWORD *)(a1 + 624) - v21) >> 4)
        goto LABEL_21;
    }
    else
    {
      v20 = 704;
      v21 = *(_QWORD *)(a1 + 616);
      if (v17 == (*(_QWORD *)(a1 + 624) - v21) >> 4)
      {
LABEL_21:
        v98 = v11;
        v22 = malloc_type_aligned_alloc(8uLL, v20, 0x8BB35E2BuLL);
        v23 = v22;
        v24 = *(char **)(a1 + 624);
        v25 = *(_QWORD *)(a1 + 632);
        if ((unint64_t)v24 >= v25)
        {
          v28 = *(char **)(a1 + 616);
          v29 = (v24 - v28) >> 4;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60)
            sub_20E867F44();
          v31 = v25 - (_QWORD)v28;
          if (v31 >> 3 > v30)
            v30 = v31 >> 3;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 >> 60)
              goto LABEL_117;
            v33 = (char *)operator new(16 * v32);
            v29 = (v24 - v28) >> 4;
          }
          else
          {
            v33 = 0;
          }
          v34 = MEMORY[0x24BDAE450];
          v35 = &v33[16 * v29];
          v36 = &v33[16 * v32];
          *(_QWORD *)v35 = v23;
          *((_QWORD *)v35 + 1) = v34;
          v27 = v35 + 16;
          if (v24 == v28)
          {
            *(_QWORD *)(a1 + 616) = v35;
            *(_QWORD *)(a1 + 624) = v27;
            *(_QWORD *)(a1 + 632) = v36;
          }
          else
          {
            v37 = v24 - v28 - 16;
            if (v37 < 0x90
              || &v24[-(v37 & 0xFFFFFFFFFFFFFFF0) - 16] < v35
              && &v33[v24 - v28 - (v37 & 0xFFFFFFFFFFFFFFF0) - 16] < v24)
            {
              goto LABEL_40;
            }
            v38 = (v37 >> 4) + 1;
            v39 = 16 * (v38 & 0x1FFFFFFFFFFFFFFELL);
            v40 = &v35[-v39];
            v41 = &v24[-v39];
            v42 = (double *)(v35 - 32);
            v43 = (const double *)(v24 - 32);
            v44 = v38 & 0x1FFFFFFFFFFFFFFELL;
            do
            {
              v102 = vld2q_f64(v43);
              v43[2] = 0.0;
              *v43 = 0.0;
              v43 -= 4;
              vst2q_f64(v42, v102);
              v42 -= 4;
              v44 -= 2;
            }
            while (v44);
            v35 = v40;
            v24 = v41;
            if (v38 != (v38 & 0x1FFFFFFFFFFFFFFELL))
            {
LABEL_40:
              v40 = v35;
              do
              {
                v45 = *((_QWORD *)v24 - 2);
                v24 -= 16;
                *(_QWORD *)v24 = 0;
                *((_QWORD *)v40 - 2) = v45;
                v40 -= 16;
                *((_QWORD *)v40 + 1) = *((_QWORD *)v24 + 1);
              }
              while (v24 != v28);
            }
            v24 = *(char **)(a1 + 616);
            v46 = *(char **)(a1 + 624);
            *(_QWORD *)(a1 + 616) = v40;
            *(_QWORD *)(a1 + 624) = v27;
            *(_QWORD *)(a1 + 632) = v36;
            if (v46 != v24)
            {
              v47 = v46;
              do
              {
                v48 = *((_QWORD *)v47 - 2);
                v47 -= 16;
                *(_QWORD *)v47 = 0;
                if (v48)
                  (*((void (**)(void))v46 - 1))();
                v46 = v47;
              }
              while (v47 != v24);
            }
          }
          if (v24)
            operator delete(v24);
        }
        else
        {
          v26 = MEMORY[0x24BDAE450];
          *(_QWORD *)v24 = v22;
          *((_QWORD *)v24 + 1) = v26;
          v27 = v24 + 16;
        }
        *(_QWORD *)(a1 + 624) = v27;
        v17 = *(unsigned int *)(a1 + 640);
        v21 = *(_QWORD *)(a1 + 616);
        v11 = v98;
      }
    }
    *(_DWORD *)(a1 + 640) = v17 + 1;
    *(_QWORD *)(a1 + 648) = 1;
    v16 = *(_QWORD *)(v21 + 16 * v17);
LABEL_52:
    *(_DWORD *)v16 = -1;
    *(_BYTE *)(v16 + 4) = 1;
    *(_DWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = v12;
    *(_QWORD *)(v16 + 24) = v13;
    *(_QWORD *)(v16 + 48) = v101;
    *(_OWORD *)(v16 + 32) = v100;
    *(_BYTE *)(v16 + 56) = v14;
    v49 = *(char **)(a1 + 584);
    v50 = v4 - v49;
    v51 = (v4 - v49) >> 4;
    v5 = &v49[(v4 - v49) & 0xFFFFFFFFFFFFFFF0];
    v52 = *(_QWORD *)(a1 + 592);
    v53 = *(_QWORD *)(a1 + 600);
    if (v52 < v53)
    {
      if (v5 != (char *)v52)
      {
        v54 = v5 + 16;
        v55 = (__int128 *)(v52 - 16);
        v56 = *(_OWORD **)(a1 + 592);
        if (v52 >= 0x10)
        {
          do
          {
            v57 = *v55++;
            *v56++ = v57;
          }
          while ((unint64_t)v55 < v52);
        }
        *(_QWORD *)(a1 + 592) = v56;
        if ((char *)v52 != v54)
        {
          v58 = (uint64_t)(v52 - (_QWORD)v54) >> 4;
          v59 = (_QWORD *)(v52 - 8);
          v60 = 16 * v58;
          do
          {
            *((_DWORD *)v59 - 2) = *(_DWORD *)&v5[v60 - 16];
            *v59 = *(_QWORD *)&v5[v60 - 8];
            v59 -= 2;
            v60 -= 16;
          }
          while (v60);
        }
        *(_DWORD *)v5 = v3;
        *(_QWORD *)&v49[16 * v51 + 8] = v16;
        if (!v11)
          goto LABEL_115;
        goto LABEL_93;
      }
      *(_DWORD *)v5 = v3;
      *((_QWORD *)v5 + 1) = v16;
      *(_QWORD *)(a1 + 592) = v5 + 16;
LABEL_72:
      if (!v11)
        goto LABEL_115;
      goto LABEL_93;
    }
    v61 = ((uint64_t)(v52 - (_QWORD)v49) >> 4) + 1;
    if (v61 >> 60)
      sub_20E867F44();
    v62 = v53 - (_QWORD)v49;
    if (v62 >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    v99 = v11;
    if (v63)
    {
      if (v63 >> 60)
        goto LABEL_117;
      v64 = (char *)operator new(16 * v63);
      v51 = (v4 - v49) >> 4;
      v65 = &v64[16 * v51];
      v66 = &v64[16 * v63];
      if (v51 != v63)
        goto LABEL_85;
    }
    else
    {
      v64 = 0;
      v65 = (char *)(16 * v51);
      v66 = 0;
      if (v51)
        goto LABEL_85;
    }
    if (v50 < 1)
    {
      if (v4 == v49)
        v68 = 1;
      else
        v68 = v50 >> 3;
      if (v68 >> 60)
        sub_20E877A38();
      v65 = (char *)operator new(16 * v68);
      v66 = &v65[16 * v68];
      if (v64)
      {
        operator delete(v64);
        v66 = &v65[16 * v68];
        v49 = *(char **)(a1 + 584);
      }
    }
    else
    {
      v67 = v51 + 2;
      if (v51 >= -1)
        v67 = v51 + 1;
      v65 -= 16 * (v67 >> 1);
    }
LABEL_85:
    *(_DWORD *)v65 = v3;
    *((_QWORD *)v65 + 1) = v16;
    v69 = v65 + 16;
    v70 = v65;
    if (v49 != v5)
    {
      v71 = v5;
      v72 = v65;
      do
      {
        v70 = v72 - 16;
        *((_OWORD *)v72 - 1) = *((_OWORD *)v71 - 1);
        v71 -= 16;
        v72 -= 16;
      }
      while (v71 != v49);
    }
    for (i = *(char **)(a1 + 592); v5 != i; ++v69)
    {
      v74 = *(_OWORD *)v5;
      v5 += 16;
      *v69 = v74;
    }
    v75 = *(void **)(a1 + 584);
    *(_QWORD *)(a1 + 584) = v70;
    *(_QWORD *)(a1 + 592) = v69;
    *(_QWORD *)(a1 + 600) = v66;
    if (v75)
      operator delete(v75);
    v5 = v65;
    if (!v99)
      goto LABEL_115;
LABEL_93:
    v76 = *(char **)(a1 + 2304);
    v77 = *(_QWORD *)(a1 + 2312);
    if ((unint64_t)v76 < v77)
    {
      *(_DWORD *)v76 = v3;
      v78 = (uint64_t)(v76 + 4);
LABEL_114:
      *(_QWORD *)(a1 + 2304) = v78;
LABEL_115:
      *(_BYTE *)(a1 + 1618) = 0;
      *(_BYTE *)(a1 + 1616) = 0;
      return v5;
    }
    v79 = *(char **)(a1 + 2296);
    v80 = (v76 - v79) >> 2;
    v81 = v80 + 1;
    if ((unint64_t)(v80 + 1) >> 62)
      sub_20E867F44();
    v82 = v77 - (_QWORD)v79;
    if (v82 >> 1 > v81)
      v81 = v82 >> 1;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
      v83 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v83 = v81;
    if (!v83)
    {
      v84 = 0;
      v85 = (unsigned int *)(4 * v80);
      v86 = 0;
      *(_DWORD *)(4 * v80) = v3;
      v78 = 4 * v80 + 4;
      v87 = v76 - v79;
      if (v76 == v79)
        goto LABEL_112;
      goto LABEL_106;
    }
    if (!(v83 >> 62))
    {
      v84 = operator new(4 * v83);
      v85 = (unsigned int *)&v84[4 * v80];
      v86 = &v84[4 * v83];
      *v85 = v3;
      v78 = (uint64_t)(v85 + 1);
      v87 = v76 - v79;
      if (v76 == v79)
      {
LABEL_112:
        *(_QWORD *)(a1 + 2296) = v85;
        *(_QWORD *)(a1 + 2304) = v78;
        *(_QWORD *)(a1 + 2312) = v86;
        if (v79)
          operator delete(v79);
        goto LABEL_114;
      }
LABEL_106:
      v88 = v87 - 4;
      if (v88 < 0x2C)
        goto LABEL_124;
      if ((unint64_t)(v79 - v84) < 0x20)
        goto LABEL_124;
      v89 = (v88 >> 2) + 1;
      v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
      v91 = &v76[-v90];
      v85 = (unsigned int *)((char *)v85 - v90);
      v92 = &v84[4 * v80 - 16];
      v93 = v76 - 16;
      v94 = v89 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v95 = *(_OWORD *)v93;
        *(v92 - 1) = *((_OWORD *)v93 - 1);
        *v92 = v95;
        v92 -= 2;
        v93 -= 32;
        v94 -= 8;
      }
      while (v94);
      v76 = v91;
      if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_124:
        do
        {
          v96 = *((_DWORD *)v76 - 1);
          v76 -= 4;
          *--v85 = v96;
        }
        while (v76 != v79);
      }
      goto LABEL_112;
    }
LABEL_117:
    sub_20E877A38();
  }
  return v5;
}

void sub_20FC1CD14(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FC1CD30(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  char *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  int64x2_t *v10;
  int64x2_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  char v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  char *v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  _DWORD *v143;
  uint64_t v144;
  _DWORD *v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  _DWORD *v149;
  unsigned int v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  _DWORD *v154;
  unint64_t v155;
  unint64_t v156;
  unsigned int *v157;
  _DWORD *v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int *v163;
  _DWORD *v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int *v169;
  _DWORD *v170;
  unsigned int v171;
  uint64_t v172;
  _DWORD *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  int64x2_t *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unsigned int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int *v206;
  _DWORD *v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int *v215;
  _DWORD *v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unsigned int *v221;
  _DWORD *v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int *v227;
  _DWORD *v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  _QWORD *v233;
  int64x2_t *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v247;
  uint64_t v248;
  size_t v249;
  const char *v250;
  unsigned __int8 v251;
  const char *v252;
  size_t v253;
  _BYTE *v254;
  unint64_t v255;
  const char *v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  size_t v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  void *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unsigned int *v309;
  _DWORD *v310;
  unsigned int v311;
  uint64_t v312;
  _DWORD *v313;
  uint64_t v314;
  _DWORD *v315;
  unint64_t v316;
  unint64_t v317;
  unsigned int *v318;
  _DWORD *v319;
  unsigned int v320;
  uint64_t v321;
  _DWORD *v322;
  unint64_t v323;
  unint64_t v324;
  unsigned int *v325;
  _DWORD *v326;
  unsigned int v327;
  uint64_t v328;
  _DWORD *v329;
  unint64_t v330;
  unint64_t v331;
  unsigned int *v332;
  _DWORD *v333;
  unsigned int v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unsigned int *v338;
  _DWORD *v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v357;
  uint64_t v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  uint64_t v386;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  uint64_t v401;
  _QWORD *v402;
  char v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  char *v432;
  uint64_t v433;
  _QWORD *v434;
  __int128 v435;
  uint64_t v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  uint64_t v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  uint64_t v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  uint64_t v480;
  unint64_t v481;
  char *v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  uint64_t v521;
  _QWORD *v522;
  unint64_t v523;
  _QWORD *v524;
  char *v527;
  char *v528;
  uint64_t v529;
  __int128 v530;
  uint64_t v531;
  uint64_t v532;
  char *v533;
  __int128 v534;
  uint64_t v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  uint64_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  uint64_t v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  uint64_t v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  uint64_t v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  uint64_t v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  uint64_t v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  uint64_t v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  uint64_t v567;
  __int128 v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  __int128 v572;
  _QWORD *v573;
  char *v575;
  __int128 v576;
  char *v577;
  __int128 v578;
  __int128 v579;
  uint64_t v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  uint64_t v590;
  _QWORD *v592;
  uint64_t v593;
  _QWORD *v594;
  char *v595;
  __int128 v598;
  uint64_t v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  uint64_t v626;
  uint64_t v627;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  uint64_t v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  uint64_t v642;
  _QWORD *v643;
  char v645;
  uint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  unint64_t *v652;
  unint64_t v653;
  std::__shared_weak_count *v654;
  uint64_t v655;
  uint64_t v656;
  char *v657;
  unint64_t v658;
  char *v659;
  char *v660;
  unint64_t v661;
  char *v662;
  _QWORD *v663;
  char *v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  uint64_t v686;
  char v687;
  char *v689;
  __int128 v693;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  uint64_t v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  char *v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  uint64_t v715;
  unint64_t v717;
  unint64_t v718;
  char *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  __int128 v723;
  uint64_t v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  uint64_t v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  char *v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  char *v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  char *v768;
  char *v769;
  char *v770;
  char *v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  unint64_t v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  char *v797;
  char *v798;
  uint64_t v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  _OWORD *v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  _OWORD *v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  _BYTE *v826;
  __int128 v829;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  uint64_t v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  uint64_t v843;
  _BYTE *v844;
  char *v845;
  uint64_t v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  unint64_t v856;
  char *v857;
  uint64_t v858;
  unint64_t v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  uint64_t v881;
  char v882;
  unint64_t v884;
  __int128 v888;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  uint64_t v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  unint64_t v904;
  __int128 v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  uint64_t v910;
  char *v912;
  uint64_t v913;
  std::__shared_weak_count *v914;
  unint64_t *v915;
  unint64_t v916;
  unint64_t *v917;
  unint64_t v918;
  unsigned int v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  __int128 v947;
  __int128 v948;
  uint64_t v949;
  __int128 v950;
  char v951;
  _QWORD *v952;
  char v953;
  uint64_t v954;
  __int128 v955;
  char v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  uint64_t v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  char v965;
  void *v966[2];
  void *v967[2];
  uint64_t v968;
  void *v969[2];
  void *v970[2];
  __int128 v971;
  __int128 v972;
  void *__dst[2];
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  _QWORD *v978;
  uint64_t v979;
  uint64_t v980;
  void *v981[2];
  void *v982[2];
  char *v983;
  __int128 v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  void *v989[2];
  uint64_t v990;
  void *v991[2];
  uint64_t v992;
  __int128 v993;
  char *v994;
  char *v995;
  _QWORD *v996;
  uint64_t v997;
  __int128 v998;
  _QWORD *v999;
  _QWORD *v1000;
  double v1001;
  __int128 v1002;
  uint64_t v1003;
  _QWORD *v1004;
  _QWORD *v1005;
  char *v1006;
  double v1007;
  uint64_t v1008;
  _QWORD *v1009;
  _QWORD *v1010;
  char *v1011;
  _QWORD *v1012;
  int64x2_t *v1013;
  int64x2_t *v1014;
  double v1015;
  unsigned int v1016;
  _QWORD *v1017;
  uint64_t v1018;
  unint64_t v1019;
  _QWORD *v1020;
  _QWORD *v1021;
  _QWORD *v1022;
  uint64_t v1023;
  _QWORD *v1024;
  int64x2_t *v1025;
  uint64_t v1026;
  char *v1027;
  char *v1028;
  __int128 v1029;
  std::__shared_weak_count *v1030;
  uint64_t v1031;
  char v1032;
  __int128 v1033;
  uint64_t v1034;
  __int128 v1035;
  uint64_t v1036;
  __int128 v1037;
  uint64_t v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  uint64_t v1042;
  __int128 v1043;
  uint64_t v1044;
  __int128 v1045;
  __int128 v1046;
  uint64_t v1047;
  _BYTE v1048[1856];
  _OWORD v1049[247];
  uint64_t v1050;
  char v1051;
  char v1052;
  _BYTE v1053[1800];
  uint64_t v1054;
  char v1055;
  __int16 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  uint64_t v1064;
  _BYTE v1065[360];
  _BYTE v1066[360];
  _BYTE v1067[360];
  _BYTE v1068[360];
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  uint64_t v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  uint64_t v1089;
  unint64_t v1090;
  char v1091;
  __int128 v1092;
  char v1093;
  _BYTE v1094[24];
  uint64_t v1095;
  _BYTE v1096[5696];
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  uint64_t v1104;
  char v1105;
  uint64_t (**v1106)();
  char v1107;
  _BYTE v1108[1800];
  uint64_t v1109;
  char v1110;
  __int16 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  uint64_t v1119;
  _BYTE v1120[360];
  _BYTE v1121[360];
  _BYTE v1122[360];
  _BYTE v1123[360];
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  uint64_t v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  uint64_t v1144;
  unint64_t v1145;
  char v1146;
  __int128 v1147;
  char v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  uint64_t v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  uint64_t v1164;
  _BYTE v1165[1800];
  _QWORD v1166[81];
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  uint64_t v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  uint64_t v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  uint64_t v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  uint64_t v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  uint64_t v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  uint64_t v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  uint64_t v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  uint64_t v1206;
  _OWORD v1207[113];
  _BYTE object[1888];
  _OWORD v1209[247];
  uint64_t v1210;
  char v1211;
  uint64_t (**v1212)();
  char v1213;
  _BYTE v1214[1800];
  uint64_t v1215;
  char v1216;
  __int16 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  uint64_t v1225;
  _BYTE v1226[360];
  _BYTE v1227[360];
  _BYTE v1228[360];
  _BYTE v1229[360];
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  uint64_t v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  uint64_t v1250;
  unint64_t v1251;
  char v1252;
  uint64_t v1253;
  std::__shared_weak_count *v1254;
  char v1255;
  int64x2_t *v1256;
  uint64_t v1257;

  MEMORY[0x24BDAC7A8](a1);
  v6 = v5;
  v7 = v4;
  v8 = v2;
  v9 = v1;
  v11 = v10;
  v1257 = *MEMORY[0x24BDAC8D0];
  v12 = v10->i64[1];
  v15 = *(uint64_t **)(v12 + 56);
  v13 = (uint64_t *)(v12 + 56);
  v14 = v15;
  if (v15)
  {
    v16 = v13;
    v17 = v13;
    v18 = v14;
    do
    {
      v19 = v18[4];
      if (v19 < v1)
      {
        ++v18;
      }
      else if (v19 == v1)
      {
        if (*((_DWORD *)v18 + 10) < v2)
          ++v18;
        else
          v17 = v18;
      }
      else
      {
        v17 = v18;
      }
      v18 = (uint64_t *)*v18;
    }
    while (v18);
    if (v17 == v13)
    {
      v21 = 0;
    }
    else
    {
      v20 = v17[4];
      if (v1 >= v20)
      {
        if (v1 == v20 && *((_DWORD *)v17 + 10) > v2)
          v21 = 0;
        else
          v21 = v17[6];
      }
      else
      {
        v21 = 0;
      }
    }
    do
    {
      v23 = v14[4];
      if (v23 < v3)
      {
        ++v14;
      }
      else if (v23 == v3)
      {
        if (*((_DWORD *)v14 + 10) < v4)
          ++v14;
        else
          v16 = v14;
      }
      else
      {
        v16 = v14;
      }
      v14 = (uint64_t *)*v14;
    }
    while (v14);
    if (v16 == v13 || (v24 = v16[4], v3 < v24) || v3 == v24 && *((_DWORD *)v16 + 10) > v4)
    {
      v22 = 0;
    }
    else
    {
      v22 = v16[6];
      if (v21 && v22)
        goto LABEL_32;
    }
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 594, (uint64_t)"curr_state && prev_state", 24, (uint64_t)"[VIOBABase]: Cannot find the state IDs.", 39, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_32:
  v1026 = v8;
  v1025 = v11 + 425;
  if (!v11[134].i8[4])
    goto LABEL_71;
  v25 = (uint64_t *)v11[8].i64[1];
  if (!v25)
    goto LABEL_71;
  v27 = *v25;
  v26 = v25[1];
  if (v26 != v27)
  {
    v28 = 0x80BFA02FE80BFA03 * ((v26 - v27) >> 4);
    do
    {
      v29 = v28 >> 1;
      v30 = v27 + 2736 * (v28 >> 1);
      if (*(_QWORD *)v30 < v9 || *(_QWORD *)v30 == v9 && *(_DWORD *)(v30 + 8) < v8)
      {
        v27 = v30 + 2736;
        v29 = v28 + ~v29;
      }
      v28 = v29;
    }
    while (v29);
  }
  if (v27 == v26 || *(_QWORD *)v27 != v9 || *(_DWORD *)(v27 + 8) != v8)
  {
LABEL_71:
    v121 = *(_QWORD *)(v21 + 824);
    v122 = *(_QWORD *)(v22 + 824);
    v11[422].i64[0] = v11[7].i64[1];
    v11[422].i64[1] = (uint64_t)v11[11].i64;
    sub_20F61F108((uint64_t)v11[30].i64, v1166);
    v123 = v1166[0];
    v124 = v6[32];
    if (v6[32])
    {
      v125 = *v6;
      v1207[0] = *(_OWORD *)(v6 + 1);
      *(_OWORD *)((char *)v1207 + 15) = *((_OWORD *)v6 + 1);
      v126 = v1166[0];
      if (v1166[0])
        goto LABEL_77;
    }
    else
    {
      v125 = 0;
      v126 = v1166[0];
      if (v1166[0])
        goto LABEL_77;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 179, (uint64_t)"sqrt_I_ != nullptr", 18, (uint64_t)"Covariance cannot be nullptr", 28, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v126 = v1166[0];
LABEL_77:
    v127 = (std::__shared_weak_count *)v1166[1];
    *(_QWORD *)&v1157 = v126;
    *((_QWORD *)&v1157 + 1) = v1166[1];
    v1166[1] = 0;
    v1166[0] = 0;
    *(_OWORD *)v1165 = __PAIR128__(*((unint64_t *)&v1157 + 1), v126);
    if (*((_QWORD *)&v1157 + 1))
    {
      p_shared_owners = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldxr(p_shared_owners);
      while (__stxr(v129 + 1, p_shared_owners));
    }
    v130 = (char *)v11[398].i64[0];
    v131 = (char *)v11[398].i64[1];
    if (v130 == v131)
    {
      v131 = (char *)v11[398].i64[0];
    }
    else if (*((_QWORD *)v131 - 1202) >= (unint64_t)v8)
    {
      v132 = 0x97A3FE4BD1FF25E9 * ((v131 - v130) >> 4);
      do
      {
        v133 = v132 >> 1;
        v134 = (unint64_t *)&v130[9616 * (v132 >> 1)];
        v135 = *v134;
        v136 = (char *)(v134 + 1202);
        v132 += ~(v132 >> 1);
        if (v135 < v8)
          v130 = v136;
        else
          v132 = v133;
      }
      while (v132);
      if (v130 != v131)
      {
        v131 = v130;
        if (*(_QWORD *)v130 == v8)
        {
          v137 = 0;
          if (!v127)
            goto LABEL_169;
          goto LABEL_165;
        }
      }
    }
    if (v127)
    {
      v138 = (unint64_t *)&v127->__shared_owners_;
      do
        v139 = __ldxr(v138);
      while (__stxr(v139 + 1, v138));
    }
    *(_QWORD *)&v1046 = v8;
    v1047 = v123;
    v1048[0] = 0;
    v1048[32] = 0;
    if (v124)
    {
      v1048[0] = v125;
      *(_OWORD *)&v1048[1] = v1207[0];
      *(_OWORD *)&v1048[16] = *(_OWORD *)((char *)v1207 + 15);
      v1048[32] = 1;
    }
    *(_QWORD *)&v1048[40] = v122;
    *(_QWORD *)&v1048[48] = v121;
    BYTE8(v1049[127]) = 0;
    v1055 = 0;
    v1056 = 257;
    v1069 = 0u;
    v1070 = 0u;
    v1071 = 0u;
    v1072 = 0u;
    v1073 = 0u;
    *(_QWORD *)&v1092 = v126;
    *((_QWORD *)&v1092 + 1) = v127;
    if (v127)
    {
      v140 = (unint64_t *)&v127->__shared_owners_;
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
      v1090 = 0xBFF0000000000000;
      v1091 = 0;
      v1093 = 0;
      do
        v142 = __ldaxr(v140);
      while (__stlxr(v142 - 1, v140));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    else
    {
      v1090 = 0xBFF0000000000000;
      v1091 = 0;
      v1093 = 0;
    }
    v143 = (_DWORD *)v11[324].i64[1];
    v144 = v11[325].i64[0];
    v145 = v143;
    if ((_DWORD *)v144 != v143)
    {
      v146 = (v144 - (uint64_t)v143) >> 4;
      v145 = (_DWORD *)v11[324].i64[1];
      do
      {
        v147 = v146 >> 1;
        v148 = &v145[4 * (v146 >> 1)];
        v150 = *v148;
        v149 = v148 + 4;
        v146 += ~(v146 >> 1);
        if (v150 < v7)
          v145 = v149;
        else
          v146 = v147;
      }
      while (v146);
    }
    if (v145 == (_DWORD *)v144 || *v145 != v7)
      goto LABEL_139;
    v151 = *((_QWORD *)v145 + 1);
    *(_QWORD *)&v1069 = v151;
    ++*(_DWORD *)(*((_QWORD *)v145 + 1) + 8);
    v152 = (_DWORD *)v11[330].i64[1];
    v153 = v11[331].i64[0];
    v154 = v152;
    if ((_DWORD *)v153 != v152)
    {
      v155 = (v153 - (uint64_t)v152) >> 4;
      v154 = (_DWORD *)v11[330].i64[1];
      do
      {
        v156 = v155 >> 1;
        v157 = &v154[4 * (v155 >> 1)];
        v159 = *v157;
        v158 = v157 + 4;
        v155 += ~(v155 >> 1);
        if (v159 < v7)
          v154 = v158;
        else
          v155 = v156;
      }
      while (v155);
    }
    if (v154 == (_DWORD *)v153 || *v154 != v7)
      goto LABEL_139;
    v160 = *((_QWORD *)v154 + 1);
    *((_QWORD *)&v1069 + 1) = v160;
    ++*(_DWORD *)(*((_QWORD *)v154 + 1) + 8);
    if ((_DWORD *)v144 != v143)
    {
      v161 = (v144 - (uint64_t)v143) >> 4;
      do
      {
        v162 = v161 >> 1;
        v163 = &v143[4 * (v161 >> 1)];
        v165 = *v163;
        v164 = v163 + 4;
        v161 += ~(v161 >> 1);
        if (v165 < v8)
          v143 = v164;
        else
          v161 = v162;
      }
      while (v161);
    }
    if (v143 == (_DWORD *)v144 || *v143 != v8)
      goto LABEL_139;
    v166 = *((_QWORD *)v143 + 1);
    *(_QWORD *)&v1070 = v166;
    ++*(_DWORD *)(*((_QWORD *)v143 + 1) + 8);
    if ((_DWORD *)v153 != v152)
    {
      v167 = (v153 - (uint64_t)v152) >> 4;
      do
      {
        v168 = v167 >> 1;
        v169 = &v152[4 * (v167 >> 1)];
        v171 = *v169;
        v170 = v169 + 4;
        v167 += ~(v167 >> 1);
        if (v171 < v8)
          v152 = v170;
        else
          v167 = v168;
      }
      while (v167);
    }
    if (v152 == (_DWORD *)v153)
      goto LABEL_139;
    if (*v152 != v8)
      goto LABEL_139;
    v172 = *((_QWORD *)v152 + 1);
    *((_QWORD *)&v1070 + 1) = v172;
    ++*(_DWORD *)(*((_QWORD *)v152 + 1) + 8);
    v173 = (_DWORD *)v11[354].i64[1];
    v174 = v11[355].i64[0];
    if ((_DWORD *)v174 == v173 || *v173)
      goto LABEL_139;
    v306 = *((_QWORD *)v173 + 1);
    *(_QWORD *)&v1071 = v306;
    ++*(_DWORD *)(*((_QWORD *)v173 + 1) + 8);
    v307 = (v174 - (uint64_t)v173) >> 4;
    do
    {
      v308 = v307 >> 1;
      v309 = &v173[4 * (v307 >> 1)];
      v311 = *v309;
      v310 = v309 + 4;
      v307 += ~(v307 >> 1);
      if (v311 < 2)
        v173 = v310;
      else
        v307 = v308;
    }
    while (v307);
    if (v173 == (_DWORD *)v174 || *v173 != 2)
      goto LABEL_139;
    v312 = *((_QWORD *)v173 + 1);
    *((_QWORD *)&v1071 + 1) = v312;
    ++*(_DWORD *)(*((_QWORD *)v173 + 1) + 8);
    v313 = (_DWORD *)v11[360].i64[1];
    v314 = v11[361].i64[0];
    v315 = v313;
    if ((_DWORD *)v314 != v313)
    {
      v316 = (v314 - (uint64_t)v313) >> 4;
      v315 = (_DWORD *)v11[360].i64[1];
      do
      {
        v317 = v316 >> 1;
        v318 = &v315[4 * (v316 >> 1)];
        v320 = *v318;
        v319 = v318 + 4;
        v316 += ~(v316 >> 1);
        if (v320 < 3)
          v315 = v319;
        else
          v316 = v317;
      }
      while (v316);
    }
    if (v315 == (_DWORD *)v314 || *v315 != 3)
      goto LABEL_139;
    v321 = *((_QWORD *)v315 + 1);
    *(_QWORD *)&v1072 = v321;
    ++*(_DWORD *)(*((_QWORD *)v315 + 1) + 8);
    v322 = v313;
    if ((_DWORD *)v314 != v313)
    {
      v323 = (v314 - (uint64_t)v313) >> 4;
      v322 = v313;
      do
      {
        v324 = v323 >> 1;
        v325 = &v322[4 * (v323 >> 1)];
        v327 = *v325;
        v326 = v325 + 4;
        v323 += ~(v323 >> 1);
        if (v327 < 4)
          v322 = v326;
        else
          v323 = v324;
      }
      while (v323);
    }
    if (v322 == (_DWORD *)v314 || *v322 != 4)
      goto LABEL_139;
    v1014 = v11;
    v328 = *((_QWORD *)v322 + 1);
    *((_QWORD *)&v1072 + 1) = v328;
    ++*(_DWORD *)(*((_QWORD *)v322 + 1) + 8);
    v329 = v313;
    if ((_DWORD *)v314 != v313)
    {
      v330 = (v314 - (uint64_t)v313) >> 4;
      v329 = v313;
      do
      {
        v331 = v330 >> 1;
        v332 = &v329[4 * (v330 >> 1)];
        v334 = *v332;
        v333 = v332 + 4;
        v330 += ~(v330 >> 1);
        if (v334 < 5)
          v329 = v333;
        else
          v330 = v331;
      }
      while (v330);
    }
    if (v329 == (_DWORD *)v314 || *v329 != 5)
      goto LABEL_139;
    v335 = *((_QWORD *)v329 + 1);
    *(_QWORD *)&v1073 = v335;
    ++*(_DWORD *)(*((_QWORD *)v329 + 1) + 8);
    if ((_DWORD *)v314 != v313)
    {
      v336 = (v314 - (uint64_t)v313) >> 4;
      do
      {
        v337 = v336 >> 1;
        v338 = &v313[4 * (v336 >> 1)];
        v340 = *v338;
        v339 = v338 + 4;
        v336 += ~(v336 >> 1);
        if (v340 < 6)
          v313 = v339;
        else
          v336 = v337;
      }
      while (v336);
    }
    if (v313 == (_DWORD *)v314 || *v313 != 6)
    {
LABEL_139:
      if ((_QWORD)v1069)
        --*(_DWORD *)(v1069 + 8);
      if (*((_QWORD *)&v1069 + 1))
        --*(_DWORD *)(*((_QWORD *)&v1069 + 1) + 8);
      if ((_QWORD)v1070)
        --*(_DWORD *)(v1070 + 8);
      if (*((_QWORD *)&v1070 + 1))
        --*(_DWORD *)(*((_QWORD *)&v1070 + 1) + 8);
      if ((_QWORD)v1071)
        --*(_DWORD *)(v1071 + 8);
      if (*((_QWORD *)&v1071 + 1))
        --*(_DWORD *)(*((_QWORD *)&v1071 + 1) + 8);
      if ((_QWORD)v1072)
        --*(_DWORD *)(v1072 + 8);
      if (*((_QWORD *)&v1072 + 1))
        --*(_DWORD *)(*((_QWORD *)&v1072 + 1) + 8);
      if ((_QWORD)v1073)
        --*(_DWORD *)(v1073 + 8);
      v137 = 0;
      if (*((_QWORD *)&v1073 + 1))
        --*(_DWORD *)(*((_QWORD *)&v1073 + 1) + 8);
    }
    else
    {
      v341 = *((_QWORD *)v313 + 1);
      *((_QWORD *)&v1073 + 1) = v341;
      ++*(_DWORD *)(*((_QWORD *)v313 + 1) + 8);
      if (*(_BYTE *)(v151 + 20)
        || *(_BYTE *)(v160 + 20)
        || *(_BYTE *)(v166 + 20)
        || *(_BYTE *)(v172 + 20)
        || *(_BYTE *)(v306 + 20)
        || *(_BYTE *)(v312 + 20)
        || *(_BYTE *)(v321 + 20)
        || *(_BYTE *)(v328 + 20)
        || *(_BYTE *)(v335 + 20)
        || *(_BYTE *)(v341 + 20))
      {
        *(_OWORD *)&v1094[8] = v1046;
        *(_QWORD *)v1094 = v8;
        v1095 = v1047;
        v1096[0] = 0;
        v1096[32] = 0;
        if (v1048[32])
        {
          *(_OWORD *)v1096 = *(_OWORD *)v1048;
          *(_OWORD *)&v1096[16] = *(_OWORD *)&v1048[16];
          v1096[32] = 1;
        }
        *(_OWORD *)&v1096[40] = *(_OWORD *)&v1048[40];
        memcpy(&v1096[56], &v1048[56], 0x708uLL);
        memcpy(&v1096[1856], v1049, 0x708uLL);
        *(_OWORD *)&v1096[3720] = *(_OWORD *)((char *)&v1049[116] + 8);
        *(_OWORD *)&v1096[3736] = *(_OWORD *)((char *)&v1049[117] + 8);
        *(_OWORD *)&v1096[3752] = *(_OWORD *)((char *)&v1049[118] + 8);
        *(_OWORD *)&v1096[3656] = *(_OWORD *)((char *)&v1049[112] + 8);
        *(_OWORD *)&v1096[3672] = *(_OWORD *)((char *)&v1049[113] + 8);
        *(_OWORD *)&v1096[3688] = *(_OWORD *)((char *)&v1049[114] + 8);
        *(_OWORD *)&v1096[3704] = *(_OWORD *)((char *)&v1049[115] + 8);
        *(_OWORD *)&v1096[3840] = v1049[124];
        *(_OWORD *)&v1096[3856] = v1049[125];
        *(_OWORD *)&v1096[3872] = v1049[126];
        *(_OWORD *)&v1096[3776] = v1049[120];
        *(_OWORD *)&v1096[3792] = v1049[121];
        *(_OWORD *)&v1096[3808] = v1049[122];
        *(_QWORD *)&v1096[3768] = *((_QWORD *)&v1049[119] + 1);
        *(_QWORD *)&v1096[3888] = *(_QWORD *)&v1049[127];
        *(_OWORD *)&v1096[3824] = v1049[123];
        v1096[3896] = 0;
        v1110 = 0;
        if (v1055)
        {
          memcpy(&v1096[3896], (char *)&v1049[127] + 8, 0x708uLL);
          v1101 = v1049[244];
          v1102 = v1049[245];
          v1103 = v1049[246];
          v1097 = v1049[240];
          v1098 = v1049[241];
          v1099 = v1049[242];
          v1104 = v1050;
          v1100 = v1049[243];
          v956 = v1051;
          v1105 = v1051;
          v953 = v1052;
          v1107 = v1052;
          v1106 = &off_24CA00398;
          memcpy(v1108, v1053, sizeof(v1108));
          v954 = v1054;
          v1109 = v1054;
          v1110 = 1;
        }
        v1116 = v1061;
        v1117 = v1062;
        v1118 = v1063;
        v1112 = v1057;
        v1113 = v1058;
        v1114 = v1059;
        v1111 = v1056;
        v1119 = v1064;
        v1115 = v1060;
        memcpy(v1120, v1065, sizeof(v1120));
        memcpy(v1121, v1066, sizeof(v1121));
        memcpy(v1122, v1067, sizeof(v1122));
        memcpy(v1123, v1068, sizeof(v1123));
        v1125 = v1070;
        v1126 = v1071;
        v1127 = v1072;
        v1128 = v1073;
        v1124 = v1069;
        v1133 = v1078;
        v1134 = v1079;
        v1135 = v1080;
        v1129 = v1074;
        v1130 = v1075;
        v1131 = v1076;
        v1132 = v1077;
        v1143 = v1088;
        v1142 = v1087;
        v1141 = v1086;
        v1140 = v1085;
        v1139 = v1084;
        v1138 = v1083;
        v1136 = v1081;
        v1137 = v1082;
        v1144 = v1089;
        v1146 = v1091;
        v1145 = v1090;
        v960 = v1092;
        v1147 = v1092;
        v654 = (std::__shared_weak_count *)*((_QWORD *)&v1092 + 1);
        v1092 = 0uLL;
        v1148 = v1093;
        v995 = (char *)v11[398].i64[1];
        if (v995 == v131 || *(_QWORD *)v131 != v8)
        {
          v655 = v11[398].i64[0];
          v656 = (uint64_t)&v131[-v655];
          v983 = (char *)v655;
          v980 = (uint64_t)&v131[-v655] / 9616;
          v657 = (char *)(v655 + 9616 * v980);
          v658 = v11[399].u64[0];
          if ((unint64_t)v995 >= v658)
          {
            v717 = 0x97A3FE4BD1FF25E9 * ((uint64_t)&v995[-v655] >> 4) + 1;
            if (v717 > 0x6D0B803685C01)
              sub_20E867F44();
            if (0x2F47FC97A3FE4BD2 * ((uint64_t)(v658 - v655) >> 4) > v717)
              v717 = 0x2F47FC97A3FE4BD2 * ((uint64_t)(v658 - v655) >> 4);
            if (0x97A3FE4BD1FF25E9 * ((uint64_t)(v658 - v655) >> 4) >= 0x3685C01B42E00)
              v718 = 0x6D0B803685C01;
            else
              v718 = v717;
            *(_QWORD *)&object[32] = v11 + 399;
            if (v718)
            {
              if (v718 > 0x6D0B803685C01)
                sub_20E877A38();
              v719 = (char *)operator new(9616 * v718);
            }
            else
            {
              v719 = 0;
            }
            *(_QWORD *)object = v719;
            *(_QWORD *)&object[8] = &v719[9616 * v980];
            v1018 = *(_QWORD *)&object[8];
            *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
            *(_QWORD *)&object[24] = &v719[9616 * v718];
            if (v980 == v718)
            {
              if (v656 < 1)
              {
                if (v983 == v131)
                  v775 = 1;
                else
                  v775 = 2 * v980;
                if (v775 > 0x6D0B803685C01)
                  sub_20E877A38();
                *(_QWORD *)object = operator new(9616 * v775);
                *(_QWORD *)&object[8] = *(_QWORD *)object + 9616 * (v775 >> 2);
                v1018 = *(_QWORD *)&object[8];
                *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                *(_QWORD *)&object[24] = *(_QWORD *)object + 9616 * v775;
                if (v719)
                  operator delete(v719);
              }
              else
              {
                v766 = v980 + 2;
                if (v980 >= -1)
                  v766 = v980 + 1;
                v1018 = *(_QWORD *)&object[8] - 9616 * (v766 >> 1);
                *(_QWORD *)&object[16] = v1018;
                *(_QWORD *)&object[8] = v1018;
              }
            }
            *(_QWORD *)v1018 = v1026;
            *(_OWORD *)(v1018 + 8) = v1046;
            *(_QWORD *)(v1018 + 24) = v1095;
            *(_BYTE *)(v1018 + 32) = 0;
            *(_BYTE *)(v1018 + 64) = 0;
            if (v1096[32])
            {
              v776 = *(_OWORD *)&v1096[16];
              *(_OWORD *)(v1018 + 32) = *(_OWORD *)v1096;
              *(_OWORD *)(v1018 + 48) = v776;
              *(_BYTE *)(v1018 + 64) = 1;
            }
            *(_OWORD *)(v1018 + 72) = *(_OWORD *)&v1096[40];
            memcpy((void *)(v1018 + 88), &v1096[56], 0x708uLL);
            memcpy((void *)(v1018 + 1888), &v1096[1856], 0x708uLL);
            v777 = *(_OWORD *)&v1096[3688];
            *(_OWORD *)(v1018 + 3736) = *(_OWORD *)&v1096[3704];
            *(_OWORD *)(v1018 + 3720) = v777;
            v778 = *(_OWORD *)&v1096[3656];
            *(_OWORD *)(v1018 + 3704) = *(_OWORD *)&v1096[3672];
            *(_OWORD *)(v1018 + 3688) = v778;
            *(_QWORD *)(v1018 + 3800) = *(_QWORD *)&v1096[3768];
            *(_OWORD *)(v1018 + 3784) = *(_OWORD *)&v1096[3752];
            v779 = *(_OWORD *)&v1096[3720];
            *(_OWORD *)(v1018 + 3768) = *(_OWORD *)&v1096[3736];
            *(_OWORD *)(v1018 + 3752) = v779;
            v780 = *(_OWORD *)&v1096[3792];
            *(_OWORD *)(v1018 + 3808) = *(_OWORD *)&v1096[3776];
            *(_OWORD *)(v1018 + 3824) = v780;
            v781 = *(_OWORD *)&v1096[3824];
            *(_OWORD *)(v1018 + 3840) = *(_OWORD *)&v1096[3808];
            *(_OWORD *)(v1018 + 3856) = v781;
            *(_OWORD *)(v1018 + 3904) = *(_OWORD *)&v1096[3872];
            v782 = *(_OWORD *)&v1096[3840];
            *(_OWORD *)(v1018 + 3888) = *(_OWORD *)&v1096[3856];
            *(_QWORD *)(v1018 + 3920) = *(_QWORD *)&v1096[3888];
            *(_OWORD *)(v1018 + 3872) = v782;
            *(_BYTE *)(v1018 + 3928) = 0;
            *(_BYTE *)(v1018 + 7680) = 0;
            if (v1110)
            {
              memcpy((void *)(v1018 + 3928), &v1096[3896], 0x708uLL);
              *(_OWORD *)(v1018 + 5792) = v1101;
              *(_OWORD *)(v1018 + 5808) = v1102;
              *(_OWORD *)(v1018 + 5824) = v1103;
              *(_QWORD *)(v1018 + 5840) = v1104;
              *(_OWORD *)(v1018 + 5728) = v1097;
              *(_OWORD *)(v1018 + 5744) = v1098;
              *(_OWORD *)(v1018 + 5760) = v1099;
              *(_OWORD *)(v1018 + 5776) = v1100;
              *(_BYTE *)(v1018 + 5848) = v1105;
              *(_BYTE *)(v1018 + 5864) = v1107;
              *(_QWORD *)(v1018 + 5856) = &off_24CA00398;
              memcpy((void *)(v1018 + 5872), v1108, 0x708uLL);
              *(_QWORD *)(v1018 + 7672) = v1109;
              *(_BYTE *)(v1018 + 7680) = 1;
            }
            *(_WORD *)(v1018 + 7688) = v1111;
            v783 = v1117;
            *(_OWORD *)(v1018 + 7760) = v1116;
            *(_OWORD *)(v1018 + 7776) = v783;
            *(_OWORD *)(v1018 + 7792) = v1118;
            v784 = v1113;
            *(_OWORD *)(v1018 + 7696) = v1112;
            *(_OWORD *)(v1018 + 7712) = v784;
            v785 = v1115;
            *(_OWORD *)(v1018 + 7728) = v1114;
            *(_QWORD *)(v1018 + 7808) = v1119;
            *(_OWORD *)(v1018 + 7744) = v785;
            memcpy((void *)(v1018 + 7816), v1120, 0x168uLL);
            memcpy((void *)(v1018 + 8176), v1121, 0x168uLL);
            memcpy((void *)(v1018 + 8536), v1122, 0x168uLL);
            memcpy((void *)(v1018 + 8896), v1123, 0x168uLL);
            v786 = v1125;
            *(_OWORD *)(v1018 + 9256) = v1124;
            *(_OWORD *)(v1018 + 9320) = v1128;
            v787 = v1126;
            *(_OWORD *)(v1018 + 9304) = v1127;
            *(_OWORD *)(v1018 + 9288) = v787;
            *(_OWORD *)(v1018 + 9272) = v786;
            v788 = v1131;
            *(_OWORD *)(v1018 + 9384) = v1132;
            *(_OWORD *)(v1018 + 9368) = v788;
            v789 = v1129;
            *(_OWORD *)(v1018 + 9352) = v1130;
            *(_OWORD *)(v1018 + 9336) = v789;
            *(_QWORD *)(v1018 + 9448) = v1136;
            *(_OWORD *)(v1018 + 9432) = v1135;
            v790 = v1133;
            *(_OWORD *)(v1018 + 9416) = v1134;
            *(_OWORD *)(v1018 + 9400) = v790;
            v791 = v1138;
            *(_OWORD *)(v1018 + 9456) = v1137;
            *(_OWORD *)(v1018 + 9472) = v791;
            v792 = v1140;
            *(_OWORD *)(v1018 + 9488) = v1139;
            *(_OWORD *)(v1018 + 9552) = v1143;
            v793 = v1141;
            *(_OWORD *)(v1018 + 9536) = v1142;
            *(_OWORD *)(v1018 + 9520) = v793;
            *(_QWORD *)(v1018 + 9568) = v1144;
            *(_OWORD *)(v1018 + 9504) = v792;
            v794 = v1145;
            *(_BYTE *)(v1018 + 9584) = v1146;
            *(_QWORD *)(v1018 + 9576) = v794;
            *(_OWORD *)(v1018 + 9592) = v1147;
            v1147 = 0uLL;
            *(_BYTE *)(v1018 + 9608) = v1148;
            v795 = v1018 + 9616;
            *(_QWORD *)&object[16] = v1018 + 9616;
            v1011 = (char *)v11[398].i64[0];
            if (v1011 != v657)
            {
              v796 = 0;
              v797 = &v983[9616 * v980];
              v1027 = v797 - 9616;
              v1006 = v797 - 9552;
              v798 = v797 - 19232;
              v1023 = v1018 - 5688;
              do
              {
                _X19 = &v798[v796];
                v826 = (_BYTE *)(v1023 + v796);
                __asm { PRFM            #0, [X19] }
                *(_QWORD *)(v1023 + v796 - 3928) = *(_QWORD *)&v1027[v796];
                *((_OWORD *)v826 - 245) = *(_OWORD *)&v798[v796 + 9624];
                *((_QWORD *)v826 - 488) = *(_QWORD *)&v798[v796 + 9640];
                *(v826 - 3896) = 0;
                *(v826 - 3864) = 0;
                __asm { PRFM            #0, [X19,#0x40] }
                if (v1006[v796])
                {
                  v829 = *((_OWORD *)_X19 + 604);
                  *(_OWORD *)(v826 - 3896) = *((_OWORD *)_X19 + 603);
                  *(_OWORD *)(v826 - 3880) = v829;
                  *(v826 - 3864) = 1;
                }
                _X26 = _X19 + 7680;
                *((_OWORD *)v826 - 241) = *(_OWORD *)(_X19 + 9688);
                memcpy(v826 - 3840, _X19 + 9704, 0x708uLL);
                memcpy(v826 - 2040, _X19 + 11504, 0x708uLL);
                v831 = *(_OWORD *)(_X19 + 13304);
                v832 = *(_OWORD *)(_X19 + 13320);
                v833 = *(_OWORD *)(_X19 + 13352);
                *((_OWORD *)v826 - 13) = *(_OWORD *)(_X19 + 13336);
                *((_OWORD *)v826 - 12) = v833;
                *((_OWORD *)v826 - 15) = v831;
                *((_OWORD *)v826 - 14) = v832;
                v834 = *(_OWORD *)(_X19 + 13368);
                v835 = *(_OWORD *)(_X19 + 13384);
                v836 = *(_OWORD *)(_X19 + 13400);
                *((_QWORD *)v826 - 16) = *((_QWORD *)_X19 + 1677);
                *((_OWORD *)v826 - 10) = v835;
                *((_OWORD *)v826 - 9) = v836;
                *((_OWORD *)v826 - 11) = v834;
                v837 = *((_QWORD *)_X19 + 1692);
                v838 = *((_OWORD *)_X19 + 843);
                v839 = *((_OWORD *)_X19 + 844);
                *(_OWORD *)(v826 - 24) = *((_OWORD *)_X19 + 845);
                *(_OWORD *)(v826 - 40) = v839;
                *(_OWORD *)(v826 - 56) = v838;
                *((_QWORD *)v826 - 1) = v837;
                v840 = *((_OWORD *)_X19 + 839);
                v841 = *((_OWORD *)_X19 + 840);
                v842 = *((_OWORD *)_X19 + 841);
                *(_OWORD *)(v826 - 72) = *((_OWORD *)_X19 + 842);
                *(_OWORD *)(v826 - 88) = v842;
                *(_OWORD *)(v826 - 104) = v841;
                *(_OWORD *)(v826 - 120) = v840;
                *v826 = 0;
                v843 = v1018 + v796;
                v844 = (_BYTE *)(v1018 + v796 - 1936);
                *v844 = 0;
                v845 = &v657[v796];
                __asm { PRFM            #0, [X26] }
                if (v657[v796 - 1936])
                {
                  _X26 = _X19 + 5848;
                  memcpy(v826, &v798[v796 + 13544], 0x708uLL);
                  v848 = v843 - 3888;
                  v849 = *(_OWORD *)&v798[v796 + 15360];
                  v850 = *(_OWORD *)&v798[v796 + 15392];
                  v851 = *(_OWORD *)&v798[v796 + 15344];
                  *(_OWORD *)(v848 + 32) = *(_OWORD *)&v798[v796 + 15376];
                  *(_OWORD *)(v848 + 48) = v850;
                  *(_OWORD *)v848 = v851;
                  *(_OWORD *)(v848 + 16) = v849;
                  v852 = *(_OWORD *)&v798[v796 + 15424];
                  v853 = *(_OWORD *)&v798[v796 + 15440];
                  v854 = *(_OWORD *)&v798[v796 + 15408];
                  *(_QWORD *)(v848 + 112) = *(_QWORD *)&v798[v796 + 15456];
                  *(_OWORD *)(v848 + 80) = v852;
                  *(_OWORD *)(v848 + 96) = v853;
                  *(_OWORD *)(v848 + 64) = v854;
                  __asm { PRFM            #0, [X26] }
                  *(_BYTE *)(v843 - 3768) = *(v845 - 3768);
                  *(_BYTE *)(v843 - 3752) = *(v845 - 3752);
                  *(_QWORD *)(v843 - 3760) = &off_24CA00398;
                  memcpy((void *)(v843 - 3744), &v798[v796 + 15488], 0x708uLL);
                  *(_QWORD *)(v1023 + v796 + 3744) = *(_QWORD *)&v1027[v796 + 7672];
                  *v844 = 1;
                }
                _X19 = _X19 + 9592;
                *(_WORD *)(v843 - 1928) = *((_WORD *)v845 - 964);
                v800 = v843 - 1920;
                v801 = *(_OWORD *)&v798[v796 + 17312];
                v802 = *(_OWORD *)&v798[v796 + 17328];
                v803 = *(_OWORD *)&v798[v796 + 17360];
                *(_OWORD *)(v800 + 32) = *(_OWORD *)&v798[v796 + 17344];
                *(_OWORD *)(v800 + 48) = v803;
                *(_OWORD *)v800 = v801;
                *(_OWORD *)(v800 + 16) = v802;
                v804 = *(_OWORD *)&v798[v796 + 17376];
                v805 = *(_OWORD *)&v798[v796 + 17392];
                v806 = *(_OWORD *)&v798[v796 + 17408];
                *(_QWORD *)(v800 + 112) = *(_QWORD *)&v798[v796 + 17424];
                *(_OWORD *)(v800 + 80) = v805;
                *(_OWORD *)(v800 + 96) = v806;
                *(_OWORD *)(v800 + 64) = v804;
                memcpy((void *)(v843 - 1800), &v798[v796 + 17432], 0x168uLL);
                memcpy((void *)(v843 - 1440), &v798[v796 + 17792], 0x168uLL);
                memcpy((void *)(v843 - 1080), &v798[v796 + 18152], 0x168uLL);
                memcpy((void *)(v843 - 720), &v798[v796 + 18512], 0x168uLL);
                v807 = (_OWORD *)(v843 - 360);
                *v807 = *(_OWORD *)&v798[v796 + 18872];
                v808 = *(_OWORD *)&v798[v796 + 18888];
                v809 = *(_OWORD *)&v798[v796 + 18904];
                v810 = *(_OWORD *)&v798[v796 + 18936];
                v807[3] = *(_OWORD *)&v798[v796 + 18920];
                v807[4] = v810;
                v807[1] = v808;
                v807[2] = v809;
                v811 = (_OWORD *)(v843 - 280);
                v813 = *(_OWORD *)&v798[v796 + 18984];
                v812 = *(_OWORD *)&v798[v796 + 19000];
                v814 = *(_OWORD *)&v798[v796 + 18968];
                *v811 = *(_OWORD *)&v798[v796 + 18952];
                v811[1] = v814;
                *(_OWORD *)(v843 - 248) = v813;
                *(_OWORD *)(v843 - 232) = v812;
                v816 = *(_OWORD *)&v798[v796 + 19032];
                v815 = *(_OWORD *)&v798[v796 + 19048];
                v817 = *(_OWORD *)&v798[v796 + 19016];
                *(_QWORD *)(v843 - 168) = *(_QWORD *)&v798[v796 + 19064];
                *(_OWORD *)(v843 - 216) = v817;
                *(_OWORD *)(v843 - 184) = v815;
                *(_OWORD *)(v843 - 200) = v816;
                v818 = *(_OWORD *)&v798[v796 + 19088];
                v819 = *(_OWORD *)&v798[v796 + 19120];
                v820 = *(_OWORD *)&v798[v796 + 19072];
                *(_OWORD *)(v843 - 128) = *(_OWORD *)&v798[v796 + 19104];
                *(_OWORD *)(v843 - 112) = v819;
                *(_OWORD *)(v843 - 160) = v820;
                *(_OWORD *)(v843 - 144) = v818;
                v821 = *(_OWORD *)&v798[v796 + 19152];
                v822 = *(_OWORD *)&v798[v796 + 19168];
                v823 = *(_OWORD *)&v798[v796 + 19136];
                *(_QWORD *)(v843 - 48) = *(_QWORD *)&v798[v796 + 19184];
                *(_OWORD *)(v843 - 80) = v821;
                *(_OWORD *)(v843 - 64) = v822;
                *(_OWORD *)(v843 - 96) = v823;
                LOBYTE(v811) = v798[v796 + 19200];
                *(_QWORD *)(v843 - 40) = *(_QWORD *)&v798[v796 + 19192];
                *(_BYTE *)(v843 - 32) = (_BYTE)v811;
                __asm { PRFM            #0, [X19] }
                *(_OWORD *)(v843 - 24) = *(_OWORD *)(v845 - 24);
                *((_QWORD *)v845 - 3) = 0;
                *((_QWORD *)v845 - 2) = 0;
                *(_BYTE *)(v843 - 8) = *(v845 - 8);
                v796 -= 9616;
              }
              while (&v657[v796] != v1011);
              v795 = *(_QWORD *)&object[16];
              v1018 += v796;
            }
            v1028 = (char *)v1014[398].i64[1];
            if (v1028 != v657)
            {
              v856 = 0;
              v857 = &v983[9616 * v980];
              v1024 = v857 + 9608;
              v1000 = v857 + 5864;
              v996 = v857 + 5848;
              v1012 = v857 + 7680;
              v858 = v795 + 7680;
              do
              {
                v884 = v795 + v856;
                _X19 = &v657[v856];
                __asm { PRFM            #0, [X19,#0x2590] }
                *(_QWORD *)v884 = *(_QWORD *)&v657[v856];
                *(_OWORD *)(v884 + 8) = *(_OWORD *)&v657[v856 + 8];
                *(_QWORD *)(v884 + 24) = *(_QWORD *)&v657[v856 + 24];
                *(_BYTE *)(v795 + v856 + 32) = 0;
                *(_BYTE *)(v884 + 64) = 0;
                __asm { PRFM            #0, [X19,#0x25D0] }
                if (v657[v856 + 64])
                {
                  v888 = *((_OWORD *)_X19 + 3);
                  *(_OWORD *)(v795 + v856 + 32) = *((_OWORD *)_X19 + 2);
                  *(_OWORD *)(v795 + v856 + 48) = v888;
                  *(_BYTE *)(v884 + 64) = 1;
                }
                _X22 = _X19 + 17296;
                *(_OWORD *)(v884 + 72) = *(_OWORD *)(_X19 + 72);
                memcpy((void *)(v884 + 88), _X19 + 88, 0x708uLL);
                memcpy((void *)(v884 + 1888), _X19 + 1888, 0x708uLL);
                v890 = *(_OWORD *)(_X19 + 3688);
                v891 = *(_OWORD *)(_X19 + 3704);
                v892 = *(_OWORD *)(_X19 + 3736);
                *(_OWORD *)(v884 + 3720) = *(_OWORD *)(_X19 + 3720);
                *(_OWORD *)(v884 + 3736) = v892;
                *(_OWORD *)(v884 + 3688) = v890;
                *(_OWORD *)(v884 + 3704) = v891;
                v893 = *(_OWORD *)(_X19 + 3752);
                v894 = *(_OWORD *)(_X19 + 3768);
                v895 = *(_OWORD *)(_X19 + 3784);
                *(_QWORD *)(v884 + 3800) = *((_QWORD *)_X19 + 475);
                *(_OWORD *)(v884 + 3768) = v894;
                *(_OWORD *)(v884 + 3784) = v895;
                *(_OWORD *)(v884 + 3752) = v893;
                v896 = *((_QWORD *)_X19 + 490);
                v897 = *((_OWORD *)_X19 + 242);
                v898 = *((_OWORD *)_X19 + 243);
                *(_OWORD *)(v884 + 3904) = *((_OWORD *)_X19 + 244);
                *(_OWORD *)(v884 + 3888) = v898;
                *(_OWORD *)(v884 + 3872) = v897;
                *(_QWORD *)(v884 + 3920) = v896;
                v899 = *((_OWORD *)_X19 + 238);
                v900 = *((_OWORD *)_X19 + 239);
                v901 = *((_OWORD *)_X19 + 240);
                *(_OWORD *)(v884 + 3856) = *((_OWORD *)_X19 + 241);
                *(_OWORD *)(v884 + 3840) = v901;
                *(_OWORD *)(v884 + 3824) = v900;
                *(_OWORD *)(v884 + 3808) = v899;
                *(_BYTE *)(v884 + 3928) = 0;
                *(_BYTE *)(v858 + v856) = 0;
                __asm { PRFM            #0, [X22] }
                if (LOBYTE(v1012[v856 / 8]))
                {
                  _X22 = _X19 + 15464;
                  memcpy((void *)(v884 + 3928), &v657[v856 + 3928], 0x708uLL);
                  v904 = v795 + v856;
                  v905 = *(_OWORD *)&v657[v856 + 5744];
                  v906 = *(_OWORD *)&v657[v856 + 5760];
                  v907 = *(_OWORD *)&v657[v856 + 5776];
                  *(_OWORD *)(v904 + 5728) = *(_OWORD *)&v657[v856 + 5728];
                  *(_OWORD *)(v904 + 5776) = v907;
                  *(_OWORD *)(v904 + 5760) = v906;
                  *(_OWORD *)(v904 + 5744) = v905;
                  v908 = *(_OWORD *)&v657[v856 + 5808];
                  v909 = *(_OWORD *)&v657[v856 + 5824];
                  v910 = *(_QWORD *)&v657[v856 + 5840];
                  *(_OWORD *)(v904 + 5792) = *(_OWORD *)&v657[v856 + 5792];
                  *(_QWORD *)(v904 + 5840) = v910;
                  *(_OWORD *)(v904 + 5824) = v909;
                  *(_OWORD *)(v904 + 5808) = v908;
                  __asm { PRFM            #0, [X22] }
                  *(_BYTE *)(v795 + 5848 + v856) = v996[v856 / 8];
                  *(_BYTE *)(v795 + 5864 + v856) = v1000[v856 / 8];
                  *(_QWORD *)(v904 + 5856) = &off_24CA00398;
                  memcpy((void *)(v795 + v856 + 5872), &v657[v856 + 5872], 0x708uLL);
                  *(_QWORD *)(v904 + 7672) = *(_QWORD *)&v657[v856 + 7672];
                  *(_BYTE *)(v858 + v856) = 1;
                }
                _X26 = _X19 + 19208;
                v860 = v795 + v856;
                *(_WORD *)(v860 + 7688) = *(_WORD *)&v657[v856 + 7688];
                v861 = *(_OWORD *)&v657[v856 + 7696];
                v862 = *(_OWORD *)&v657[v856 + 7712];
                v863 = *(_OWORD *)&v657[v856 + 7728];
                *(_OWORD *)(v860 + 7744) = *(_OWORD *)&v657[v856 + 7744];
                *(_OWORD *)(v860 + 7728) = v863;
                *(_OWORD *)(v860 + 7712) = v862;
                *(_OWORD *)(v860 + 7696) = v861;
                v864 = *(_OWORD *)&v657[v856 + 7760];
                v865 = *(_OWORD *)&v657[v856 + 7776];
                v866 = *(_OWORD *)&v657[v856 + 7792];
                *(_QWORD *)(v860 + 7808) = *(_QWORD *)&v657[v856 + 7808];
                *(_OWORD *)(v860 + 7792) = v866;
                *(_OWORD *)(v860 + 7776) = v865;
                *(_OWORD *)(v860 + 7760) = v864;
                memcpy((void *)(v795 + v856 + 7816), &v657[v856 + 7816], 0x168uLL);
                memcpy((void *)(v795 + v856 + 8176), &v657[v856 + 8176], 0x168uLL);
                memcpy((void *)(v795 + v856 + 8536), &v657[v856 + 8536], 0x168uLL);
                memcpy((void *)(v795 + v856 + 8896), &v657[v856 + 8896], 0x168uLL);
                *(_OWORD *)(v860 + 9256) = *(_OWORD *)&v657[v856 + 9256];
                v867 = *(_OWORD *)&v657[v856 + 9272];
                v868 = *(_OWORD *)&v657[v856 + 9288];
                v869 = *(_OWORD *)&v657[v856 + 9320];
                *(_OWORD *)(v860 + 9304) = *(_OWORD *)&v657[v856 + 9304];
                *(_OWORD *)(v860 + 9320) = v869;
                *(_OWORD *)(v860 + 9272) = v867;
                *(_OWORD *)(v860 + 9288) = v868;
                v871 = *(_OWORD *)&v657[v856 + 9368];
                v870 = *(_OWORD *)&v657[v856 + 9384];
                v872 = *(_OWORD *)&v657[v856 + 9352];
                *(_OWORD *)(v860 + 9336) = *(_OWORD *)&v657[v856 + 9336];
                *(_OWORD *)(v860 + 9352) = v872;
                *(_OWORD *)(v860 + 9368) = v871;
                *(_OWORD *)(v860 + 9384) = v870;
                v874 = *(_OWORD *)&v657[v856 + 9416];
                v873 = *(_OWORD *)&v657[v856 + 9432];
                v875 = *(_OWORD *)&v657[v856 + 9400];
                *(_QWORD *)(v860 + 9448) = *(_QWORD *)&v657[v856 + 9448];
                *(_OWORD *)(v860 + 9416) = v874;
                *(_OWORD *)(v860 + 9432) = v873;
                *(_OWORD *)(v860 + 9400) = v875;
                v876 = *(_OWORD *)&v657[v856 + 9472];
                v877 = *(_OWORD *)&v657[v856 + 9488];
                v878 = *(_OWORD *)&v657[v856 + 9504];
                *(_OWORD *)(v860 + 9456) = *(_OWORD *)&v657[v856 + 9456];
                *(_OWORD *)(v860 + 9504) = v878;
                *(_OWORD *)(v860 + 9488) = v877;
                *(_OWORD *)(v860 + 9472) = v876;
                v879 = *(_OWORD *)&v657[v856 + 9536];
                v880 = *(_OWORD *)&v657[v856 + 9552];
                v881 = *(_QWORD *)&v657[v856 + 9568];
                *(_OWORD *)(v860 + 9520) = *(_OWORD *)&v657[v856 + 9520];
                *(_QWORD *)(v860 + 9568) = v881;
                *(_OWORD *)(v860 + 9552) = v880;
                *(_OWORD *)(v860 + 9536) = v879;
                v882 = v657[v856 + 9584];
                *(_QWORD *)(v860 + 9576) = *(_QWORD *)&v657[v856 + 9576];
                *(_BYTE *)(v860 + 9584) = v882;
                __asm { PRFM            #0, [X26] }
                *(_QWORD *)(v860 + 9592) = *(_QWORD *)&v657[v856 + 9592];
                *(_QWORD *)(v860 + 9600) = *(_QWORD *)&v657[v856 + 9600];
                *(_OWORD *)&v657[v856 + 9592] = 0u;
                *(_BYTE *)(v795 + 9608 + v856) = v1024[v856 / 8];
                v856 += 9616;
              }
              while (&v657[v856] != v1028);
              v657 = (char *)v1014[398].i64[1];
              v795 += v856;
            }
            v912 = (char *)v1014[398].i64[0];
            v1014[398].i64[0] = v1018;
            v1014[398].i64[1] = v795;
            v913 = v1014[399].i64[0];
            v1014[399].i64[0] = *(_QWORD *)&object[24];
            *(_QWORD *)&object[24] = v913;
            *(_QWORD *)&object[8] = v912;
            *(_QWORD *)object = v912;
            if (v657 != v912)
            {
              do
              {
                *(_QWORD *)&object[16] = v657 - 9616;
                v914 = (std::__shared_weak_count *)*((_QWORD *)v657 - 2);
                if (v914)
                {
                  v915 = (unint64_t *)&v914->__shared_owners_;
                  do
                    v916 = __ldaxr(v915);
                  while (__stlxr(v916 - 1, v915));
                  if (!v916)
                  {
                    ((void (*)(std::__shared_weak_count *))v914->__on_zero_shared)(v914);
                    std::__shared_weak_count::__release_weak(v914);
                  }
                }
                v657 = *(char **)&object[16];
              }
              while (*(char **)&object[16] != v912);
              v657 = *(char **)object;
            }
            if (v657)
              operator delete(v657);
          }
          else
          {
            v659 = (char *)v11[398].i64[1];
            if (v657 == v995)
            {
              *(_QWORD *)v995 = v1026;
              v720 = v655 + 9616 * v980;
              *(_OWORD *)(v720 + 8) = *(_OWORD *)&v1094[8];
              v721 = v1095;
              *(_BYTE *)(v720 + 32) = 0;
              v722 = v720 + 32;
              *(_QWORD *)(v722 - 8) = v721;
              *(_BYTE *)(v722 + 32) = 0;
              if (v1096[32])
              {
                v723 = *(_OWORD *)&v1096[16];
                *(_OWORD *)v722 = *(_OWORD *)v1096;
                *(_OWORD *)(v722 + 16) = v723;
                *(_BYTE *)(v722 + 32) = 1;
              }
              v724 = v655 + 9616 * v980;
              *(_OWORD *)(v724 + 72) = *(_OWORD *)&v1096[40];
              memcpy((void *)(v724 + 88), &v1096[56], 0x708uLL);
              memcpy((void *)(v724 + 1888), &v1096[1856], 0x708uLL);
              v725 = *(_OWORD *)&v1096[3656];
              v726 = *(_OWORD *)&v1096[3672];
              v727 = *(_OWORD *)&v1096[3688];
              *(_OWORD *)(v724 + 3736) = *(_OWORD *)&v1096[3704];
              *(_OWORD *)(v724 + 3720) = v727;
              *(_OWORD *)(v724 + 3704) = v726;
              *(_OWORD *)(v724 + 3688) = v725;
              v728 = *(_OWORD *)&v1096[3720];
              v729 = *(_OWORD *)&v1096[3736];
              v730 = *(_OWORD *)&v1096[3752];
              *(_QWORD *)(v724 + 3800) = *(_QWORD *)&v1096[3768];
              *(_OWORD *)(v724 + 3784) = v730;
              *(_OWORD *)(v724 + 3768) = v729;
              *(_OWORD *)(v724 + 3752) = v728;
              v731 = *(_QWORD *)&v1096[3888];
              v732 = *(_OWORD *)&v1096[3840];
              v733 = *(_OWORD *)&v1096[3856];
              *(_OWORD *)(v724 + 3904) = *(_OWORD *)&v1096[3872];
              *(_OWORD *)(v724 + 3888) = v733;
              *(_OWORD *)(v724 + 3872) = v732;
              *(_QWORD *)(v724 + 3920) = v731;
              v734 = *(_OWORD *)&v1096[3776];
              v735 = *(_OWORD *)&v1096[3792];
              v736 = *(_OWORD *)&v1096[3808];
              *(_OWORD *)(v724 + 3856) = *(_OWORD *)&v1096[3824];
              *(_OWORD *)(v724 + 3840) = v736;
              *(_OWORD *)(v724 + 3824) = v735;
              *(_OWORD *)(v724 + 3808) = v734;
              *(_BYTE *)(v724 + 3928) = 0;
              *(_BYTE *)(v724 + 7680) = 0;
              if (v1110)
              {
                memcpy((void *)(v724 + 3928), &v1096[3896], 0x708uLL);
                v737 = &v983[9616 * v980];
                v738 = v1097;
                v739 = v1098;
                v740 = v1099;
                *((_OWORD *)v737 + 361) = v1100;
                *((_OWORD *)v737 + 360) = v740;
                *((_OWORD *)v737 + 359) = v739;
                *((_OWORD *)v737 + 358) = v738;
                v741 = v1101;
                v742 = v1102;
                v743 = v1103;
                *((_QWORD *)v737 + 730) = v1104;
                *((_OWORD *)v737 + 364) = v743;
                *((_OWORD *)v737 + 363) = v742;
                *((_OWORD *)v737 + 362) = v741;
                v737[5848] = v1105;
                v737[5864] = v1107;
                *((_QWORD *)v737 + 732) = &off_24CA00398;
                memcpy(v737 + 5872, v1108, 0x708uLL);
                *((_QWORD *)v737 + 959) = v1109;
                *(_BYTE *)(v724 + 7680) = 1;
              }
              v744 = &v983[9616 * v980];
              *((_WORD *)v744 + 3844) = v1111;
              v745 = v1112;
              v746 = v1113;
              v747 = v1114;
              *((_OWORD *)v744 + 484) = v1115;
              *((_OWORD *)v744 + 483) = v747;
              *((_OWORD *)v744 + 482) = v746;
              *((_OWORD *)v744 + 481) = v745;
              v748 = v1116;
              v749 = v1117;
              v750 = v1118;
              *((_QWORD *)v744 + 976) = v1119;
              *((_OWORD *)v744 + 487) = v750;
              *((_OWORD *)v744 + 486) = v749;
              *((_OWORD *)v744 + 485) = v748;
              memcpy(v744 + 7816, v1120, 0x168uLL);
              memcpy(v744 + 8176, v1121, 0x168uLL);
              memcpy(v744 + 8536, v1122, 0x168uLL);
              memcpy(v744 + 8896, v1123, 0x168uLL);
              *(_OWORD *)(v744 + 9256) = v1124;
              v751 = v1125;
              v752 = v1126;
              v753 = v1127;
              *(_OWORD *)(v744 + 9320) = v1128;
              *(_OWORD *)(v744 + 9304) = v753;
              *(_OWORD *)(v744 + 9288) = v752;
              *(_OWORD *)(v744 + 9272) = v751;
              v755 = v1131;
              v754 = v1132;
              v756 = v1130;
              *(_OWORD *)(v744 + 9336) = v1129;
              *(_OWORD *)(v744 + 9352) = v756;
              *(_OWORD *)(v744 + 9368) = v755;
              *(_OWORD *)(v744 + 9384) = v754;
              v758 = v1134;
              v757 = v1135;
              v759 = v1133;
              *((_QWORD *)v744 + 1181) = v1136;
              *(_OWORD *)(v744 + 9400) = v759;
              *(_OWORD *)(v744 + 9432) = v757;
              *(_OWORD *)(v744 + 9416) = v758;
              v760 = v1139;
              v761 = v1140;
              v762 = v1138;
              *((_OWORD *)v744 + 591) = v1137;
              *((_OWORD *)v744 + 594) = v761;
              *((_OWORD *)v744 + 593) = v760;
              *((_OWORD *)v744 + 592) = v762;
              v764 = v1142;
              v763 = v1143;
              v765 = v1144;
              *((_OWORD *)v744 + 595) = v1141;
              *((_QWORD *)v744 + 1196) = v765;
              *((_OWORD *)v744 + 597) = v763;
              *((_OWORD *)v744 + 596) = v764;
              LOBYTE(v765) = v1146;
              *((_QWORD *)v744 + 1197) = v1145;
              v744[9584] = v765;
              *(_OWORD *)(v744 + 9592) = v1147;
              v1147 = 0uLL;
              v744[9608] = v1148;
              v11[398].i64[1] = (uint64_t)(v995 + 9616);
            }
            else
            {
              v1256 = v11 + 399;
              *(_OWORD *)&object[8] = v1046;
              *(_QWORD *)object = v1026;
              *(_QWORD *)&object[24] = v1047;
              object[32] = 0;
              object[64] = 0;
              if (v1048[32])
              {
                *(_OWORD *)&object[32] = *(_OWORD *)v1096;
                *(_OWORD *)&object[48] = *(_OWORD *)&v1096[16];
                object[64] = 1;
              }
              *(_OWORD *)&object[72] = *(_OWORD *)&v1048[40];
              memcpy(&object[88], &v1048[56], 0x708uLL);
              memcpy(v1209, v1049, 0x708uLL);
              *(_OWORD *)((char *)&v1209[116] + 8) = *(_OWORD *)((char *)&v1049[116] + 8);
              *(_OWORD *)((char *)&v1209[117] + 8) = *(_OWORD *)((char *)&v1049[117] + 8);
              *(_OWORD *)((char *)&v1209[118] + 8) = *(_OWORD *)((char *)&v1049[118] + 8);
              *(_OWORD *)((char *)&v1209[112] + 8) = *(_OWORD *)((char *)&v1049[112] + 8);
              *(_OWORD *)((char *)&v1209[113] + 8) = *(_OWORD *)((char *)&v1049[113] + 8);
              *(_OWORD *)((char *)&v1209[114] + 8) = *(_OWORD *)((char *)&v1049[114] + 8);
              *(_OWORD *)((char *)&v1209[115] + 8) = *(_OWORD *)((char *)&v1049[115] + 8);
              v1209[124] = v1049[124];
              v1209[125] = v1049[125];
              v1209[126] = v1049[126];
              v1209[120] = v1049[120];
              v1209[121] = v1049[121];
              v1209[122] = v1049[122];
              *((_QWORD *)&v1209[119] + 1) = *((_QWORD *)&v1049[119] + 1);
              *(_QWORD *)&v1209[127] = *(_QWORD *)&v1049[127];
              v1209[123] = v1049[123];
              BYTE8(v1209[127]) = 0;
              v1216 = 0;
              if (v1055)
              {
                memcpy((char *)&v1209[127] + 8, &v1096[3896], 0x708uLL);
                v1209[244] = v1101;
                v1209[245] = v1102;
                v1209[246] = v1103;
                v1210 = v1104;
                v1209[240] = v1097;
                v1209[241] = v1098;
                v1209[242] = v1099;
                v1211 = v956;
                v1213 = v953;
                v1209[243] = v1100;
                v1212 = &off_24CA00398;
                memcpy(v1214, v1108, sizeof(v1214));
                v1215 = v954;
                v1216 = 1;
              }
              v1222 = v1061;
              v1223 = v1062;
              v1224 = v1063;
              v1218 = v1057;
              v1219 = v1058;
              v1220 = v1059;
              v1217 = v1056;
              v1225 = v1064;
              v1221 = v1060;
              memcpy(v1226, v1065, sizeof(v1226));
              memcpy(v1227, v1066, sizeof(v1227));
              memcpy(v1228, v1067, sizeof(v1228));
              memcpy(v1229, v1068, sizeof(v1229));
              v1231 = v1070;
              v1232 = v1071;
              v1233 = v1072;
              v1234 = v1073;
              v1230 = v1069;
              v1239 = v1078;
              v1240 = v1079;
              v1241 = v1080;
              v1235 = v1074;
              v1236 = v1075;
              v1237 = v1076;
              v1238 = v1077;
              v1249 = v1088;
              v1248 = v1087;
              v1247 = v1086;
              v1246 = v1085;
              v1245 = v1084;
              v1244 = v1083;
              v1242 = v1081;
              v1243 = v1082;
              v1250 = v1089;
              v1252 = v1091;
              v1251 = v1090;
              v1253 = v960;
              v1254 = v654;
              v1147 = 0uLL;
              v660 = v995 - 9616;
              v1255 = v1093;
              if ((unint64_t)v995 >= 0x2590)
              {
                v661 = 0;
                v662 = &v983[9616 * v980 + 16 * ((v995 - (v657 + 9616)) >> 4)];
                v1022 = v662 + 9608;
                v1005 = v662 + 5864;
                v999 = v662 + 5848;
                v1017 = v662 + 7680;
                v663 = v995 + 7680;
                do
                {
                  v689 = &v995[v661];
                  _X19 = &v660[v661];
                  __asm { PRFM            #0, [X19,#0x2590] }
                  *(_QWORD *)v689 = *(_QWORD *)&v660[v661];
                  *(_OWORD *)(v689 + 8) = *(_OWORD *)&v660[v661 + 8];
                  *((_QWORD *)v689 + 3) = *(_QWORD *)&v660[v661 + 24];
                  v689[32] = 0;
                  v689[64] = 0;
                  __asm { PRFM            #0, [X19,#0x25D0] }
                  if (v660[v661 + 64])
                  {
                    v693 = *((_OWORD *)_X19 + 3);
                    *((_OWORD *)v689 + 2) = *((_OWORD *)_X19 + 2);
                    *((_OWORD *)v689 + 3) = v693;
                    v689[64] = 1;
                  }
                  _X26 = _X19 + 17296;
                  *(_OWORD *)(v689 + 72) = *(_OWORD *)(_X19 + 72);
                  memcpy(v689 + 88, _X19 + 88, 0x708uLL);
                  memcpy(v689 + 1888, _X19 + 1888, 0x708uLL);
                  v695 = *(_OWORD *)(_X19 + 3688);
                  v696 = *(_OWORD *)(_X19 + 3704);
                  v697 = *(_OWORD *)(_X19 + 3736);
                  *(_OWORD *)(v689 + 3720) = *(_OWORD *)(_X19 + 3720);
                  *(_OWORD *)(v689 + 3736) = v697;
                  *(_OWORD *)(v689 + 3688) = v695;
                  *(_OWORD *)(v689 + 3704) = v696;
                  v698 = *(_OWORD *)(_X19 + 3752);
                  v699 = *(_OWORD *)(_X19 + 3768);
                  v700 = *(_OWORD *)(_X19 + 3784);
                  *((_QWORD *)v689 + 475) = *((_QWORD *)_X19 + 475);
                  *(_OWORD *)(v689 + 3768) = v699;
                  *(_OWORD *)(v689 + 3784) = v700;
                  *(_OWORD *)(v689 + 3752) = v698;
                  v701 = *((_QWORD *)_X19 + 490);
                  v702 = *((_OWORD *)_X19 + 242);
                  v703 = *((_OWORD *)_X19 + 243);
                  *((_OWORD *)v689 + 244) = *((_OWORD *)_X19 + 244);
                  *((_OWORD *)v689 + 243) = v703;
                  *((_OWORD *)v689 + 242) = v702;
                  *((_QWORD *)v689 + 490) = v701;
                  v704 = *((_OWORD *)_X19 + 238);
                  v705 = *((_OWORD *)_X19 + 239);
                  v706 = *((_OWORD *)_X19 + 240);
                  *((_OWORD *)v689 + 241) = *((_OWORD *)_X19 + 241);
                  *((_OWORD *)v689 + 240) = v706;
                  *((_OWORD *)v689 + 239) = v705;
                  *((_OWORD *)v689 + 238) = v704;
                  v689[3928] = 0;
                  LOBYTE(v663[v661 / 8]) = 0;
                  __asm { PRFM            #0, [X26] }
                  if (LOBYTE(v1017[v661 / 8]))
                  {
                    _X26 = _X19 + 15464;
                    memcpy(v689 + 3928, &v660[v661 + 3928], 0x708uLL);
                    v709 = &v995[v661];
                    v710 = *(_OWORD *)&v660[v661 + 5744];
                    v711 = *(_OWORD *)&v660[v661 + 5760];
                    v712 = *(_OWORD *)&v660[v661 + 5776];
                    *((_OWORD *)v709 + 358) = *(_OWORD *)&v660[v661 + 5728];
                    *((_OWORD *)v709 + 361) = v712;
                    *((_OWORD *)v709 + 360) = v711;
                    *((_OWORD *)v709 + 359) = v710;
                    v713 = *(_OWORD *)&v660[v661 + 5808];
                    v714 = *(_OWORD *)&v660[v661 + 5824];
                    v715 = *(_QWORD *)&v660[v661 + 5840];
                    *((_OWORD *)v709 + 362) = *(_OWORD *)&v660[v661 + 5792];
                    *((_QWORD *)v709 + 730) = v715;
                    *((_OWORD *)v709 + 364) = v714;
                    *((_OWORD *)v709 + 363) = v713;
                    __asm { PRFM            #0, [X26] }
                    v995[v661 + 5848] = v999[v661 / 8];
                    v995[v661 + 5864] = v1005[v661 / 8];
                    *((_QWORD *)v709 + 732) = &off_24CA00398;
                    memcpy(&v995[v661 + 5872], &v660[v661 + 5872], 0x708uLL);
                    *((_QWORD *)v709 + 959) = *(_QWORD *)&v660[v661 + 7672];
                    LOBYTE(v663[v661 / 8]) = 1;
                  }
                  _X25 = _X19 + 19208;
                  v665 = &v995[v661];
                  *((_WORD *)v665 + 3844) = *(_WORD *)&v660[v661 + 7688];
                  v666 = *(_OWORD *)&v660[v661 + 7696];
                  v667 = *(_OWORD *)&v660[v661 + 7712];
                  v668 = *(_OWORD *)&v660[v661 + 7728];
                  *((_OWORD *)v665 + 484) = *(_OWORD *)&v660[v661 + 7744];
                  *((_OWORD *)v665 + 483) = v668;
                  *((_OWORD *)v665 + 482) = v667;
                  *((_OWORD *)v665 + 481) = v666;
                  v669 = *(_OWORD *)&v660[v661 + 7760];
                  v670 = *(_OWORD *)&v660[v661 + 7776];
                  v671 = *(_OWORD *)&v660[v661 + 7792];
                  *((_QWORD *)v665 + 976) = *(_QWORD *)&v660[v661 + 7808];
                  *((_OWORD *)v665 + 487) = v671;
                  *((_OWORD *)v665 + 486) = v670;
                  *((_OWORD *)v665 + 485) = v669;
                  memcpy(&v995[v661 + 7816], &v660[v661 + 7816], 0x168uLL);
                  memcpy(&v995[v661 + 8176], &v660[v661 + 8176], 0x168uLL);
                  memcpy(&v995[v661 + 8536], &v660[v661 + 8536], 0x168uLL);
                  memcpy(&v995[v661 + 8896], &v660[v661 + 8896], 0x178uLL);
                  v672 = *(_OWORD *)&v660[v661 + 9272];
                  v673 = *(_OWORD *)&v660[v661 + 9288];
                  v674 = *(_OWORD *)&v660[v661 + 9320];
                  *(_OWORD *)(v665 + 9304) = *(_OWORD *)&v660[v661 + 9304];
                  *(_OWORD *)(v665 + 9320) = v674;
                  *(_OWORD *)(v665 + 9272) = v672;
                  *(_OWORD *)(v665 + 9288) = v673;
                  v676 = *(_OWORD *)&v660[v661 + 9368];
                  v675 = *(_OWORD *)&v660[v661 + 9384];
                  v677 = *(_OWORD *)&v660[v661 + 9352];
                  *(_OWORD *)(v665 + 9336) = *(_OWORD *)&v660[v661 + 9336];
                  *(_OWORD *)(v665 + 9352) = v677;
                  *(_OWORD *)(v665 + 9368) = v676;
                  *(_OWORD *)(v665 + 9384) = v675;
                  v679 = *(_OWORD *)&v660[v661 + 9416];
                  v678 = *(_OWORD *)&v660[v661 + 9432];
                  v680 = *(_OWORD *)&v660[v661 + 9400];
                  *((_QWORD *)v665 + 1181) = *(_QWORD *)&v660[v661 + 9448];
                  *(_OWORD *)(v665 + 9416) = v679;
                  *(_OWORD *)(v665 + 9432) = v678;
                  *(_OWORD *)(v665 + 9400) = v680;
                  v681 = *(_OWORD *)&v660[v661 + 9472];
                  v682 = *(_OWORD *)&v660[v661 + 9488];
                  v683 = *(_OWORD *)&v660[v661 + 9504];
                  *((_OWORD *)v665 + 591) = *(_OWORD *)&v660[v661 + 9456];
                  *((_OWORD *)v665 + 594) = v683;
                  *((_OWORD *)v665 + 593) = v682;
                  *((_OWORD *)v665 + 592) = v681;
                  v684 = *(_OWORD *)&v660[v661 + 9536];
                  v685 = *(_OWORD *)&v660[v661 + 9552];
                  v686 = *(_QWORD *)&v660[v661 + 9568];
                  *((_OWORD *)v665 + 595) = *(_OWORD *)&v660[v661 + 9520];
                  *((_QWORD *)v665 + 1196) = v686;
                  *((_OWORD *)v665 + 597) = v685;
                  *((_OWORD *)v665 + 596) = v684;
                  v687 = v660[v661 + 9584];
                  *((_QWORD *)v665 + 1197) = *(_QWORD *)&v660[v661 + 9576];
                  v665[9584] = v687;
                  __asm { PRFM            #0, [X25] }
                  *((_QWORD *)v665 + 1199) = *(_QWORD *)&v660[v661 + 9592];
                  *((_QWORD *)v665 + 1200) = *(_QWORD *)&v660[v661 + 9600];
                  *(_OWORD *)&v660[v661 + 9592] = 0u;
                  v995[v661 + 9608] = v1022[v661 / 8];
                  v661 += 9616;
                }
                while (&v660[v661] < v995);
                v659 = &v995[v661];
              }
              v1014[398].i64[1] = (uint64_t)v659;
              if (v995 != v657 + 9616)
              {
                v767 = 0;
                v768 = &v983[9616 * v980 + 16 * ((v995 - (v657 + 9616)) >> 4)];
                v769 = v768 - 9608;
                v770 = v768 - 9616;
                do
                {
                  *(_QWORD *)&v995[v767 - 9616] = *(_QWORD *)&v770[v767];
                  sub_20FA553A0((uint64_t)&v995[v767 - 9608], (uint64_t)&v769[v767]);
                  v995[v767 - 8] = v660[v767 - 8];
                  v767 -= 9616;
                }
                while (-16 * ((v995 - (v657 + 9616)) >> 4) != v767);
              }
              *(_QWORD *)v657 = v1026;
              v771 = &v983[9616 * v980];
              sub_20FA553A0((uint64_t)(v771 + 8), (uint64_t)&object[8]);
              v771[9608] = v1255;
              v772 = v1254;
              if (v1254)
              {
                v773 = (unint64_t *)&v1254->__shared_owners_;
                do
                  v774 = __ldaxr(v773);
                while (__stlxr(v774 - 1, v773));
                if (!v774)
                {
                  ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
                  std::__shared_weak_count::__release_weak(v772);
                }
              }
            }
          }
          v654 = (std::__shared_weak_count *)*((_QWORD *)&v1147 + 1);
        }
        if (v654)
        {
          v917 = (unint64_t *)&v654->__shared_owners_;
          do
            v918 = __ldaxr(v917);
          while (__stlxr(v918 - 1, v917));
          if (!v918)
          {
            ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
            std::__shared_weak_count::__release_weak(v654);
          }
        }
        v1025->i8[2] = 0;
        v1025->i8[0] = 0;
        v11 = v1014;
        v1014[424] = vaddq_s64(v1014[424], (int64x2_t)xmmword_2103B4900);
        v137 = 1;
      }
      else
      {
        v137 = 0;
        --*(_DWORD *)(v151 + 8);
        --*(_DWORD *)(v160 + 8);
        v1069 = 0u;
        --*(_DWORD *)(v166 + 8);
        --*(_DWORD *)(v172 + 8);
        v1070 = 0u;
        --*(_DWORD *)(v306 + 8);
        --*(_DWORD *)(v312 + 8);
        v1071 = 0u;
        --*(_DWORD *)(v321 + 8);
        --*(_DWORD *)(v328 + 8);
        v1072 = 0u;
        --*(_DWORD *)(v335 + 8);
        --*(_DWORD *)(v341 + 8);
        v1073 = 0u;
      }
    }
    v175 = (std::__shared_weak_count *)*((_QWORD *)&v1092 + 1);
    if (*((_QWORD *)&v1092 + 1))
    {
      v176 = (unint64_t *)(*((_QWORD *)&v1092 + 1) + 8);
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    v127 = *(std::__shared_weak_count **)&v1165[8];
    if (!*(_QWORD *)&v1165[8])
    {
LABEL_169:
      if (v137)
      {
        v11[491].i8[12] = 0;
        v11[491].i32[2] = 0;
      }
      v180 = (std::__shared_weak_count *)*((_QWORD *)&v1157 + 1);
      if (!*((_QWORD *)&v1157 + 1))
        goto LABEL_175;
      v181 = (unint64_t *)(*((_QWORD *)&v1157 + 1) + 8);
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
        if (!v137)
        {
LABEL_176:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactorUtil.h", 121, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
      }
      else
      {
LABEL_175:
        if (!v137)
          goto LABEL_176;
      }
      v183 = (std::__shared_weak_count *)v1166[1];
      if (!v1166[1])
        return;
      v184 = (unint64_t *)(v1166[1] + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      goto LABEL_182;
    }
LABEL_165:
    v178 = (unint64_t *)&v127->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
    goto LABEL_169;
  }
  v1029 = 0uLL;
  if (v11[82].i8[5])
  {
    v31 = &v11[31].u64[1];
    v32 = v11[31].i64[1];
    if (!v32)
    {
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)&object[72] = _Q0;
      *(_OWORD *)&object[88] = _Q0;
      *(_OWORD *)&object[104] = _Q0;
      *(double *)object = *(double *)v11[83].i64 * *(double *)v11[83].i64;
      *(_QWORD *)&object[8] = *(_QWORD *)object;
      *(_QWORD *)&object[16] = *(_QWORD *)object;
      *(_QWORD *)&object[24] = *(_QWORD *)object;
      *(_QWORD *)&object[32] = *(_QWORD *)object;
      *(_QWORD *)&object[40] = *(_QWORD *)object;
      *(double *)&object[48] = *(double *)&v11[82].i64[1] * *(double *)&v11[82].i64[1];
      *(_QWORD *)&object[56] = *(_QWORD *)&object[48];
      *(_QWORD *)&object[64] = *(_QWORD *)&object[48];
      LODWORD(v1046) = 0;
      sub_20F61C5D4((double *)object, (unsigned int *)&v1046, v1094);
      v37 = *(_OWORD *)v1094;
      *(_OWORD *)v1094 = 0uLL;
      v38 = (std::__shared_weak_count *)v11[32].i64[0];
      *(_OWORD *)v31 = v37;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)&v1094[8];
      if (*(_QWORD *)&v1094[8])
      {
        v42 = (unint64_t *)(*(_QWORD *)&v1094[8] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v32 = *v31;
    }
    v44 = v11[32].i64[0];
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    *(_QWORD *)&v1029 = v32;
    *((_QWORD *)&v1029 + 1) = v44;
  }
  v919 = *(_DWORD *)(v27 + 40);
  v47 = *(_DWORD *)(v27 + 24);
  if (*((_QWORD *)&v1029 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v1029 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v1007 = *(double *)(v27 + 2720);
  v1015 = *(double *)(v27 + 2728);
  *(_QWORD *)&v1046 = v1026;
  v1001 = *(double *)(v27 + 1616);
  bzero(&object[8], 0x6F8uLL);
  *(_QWORD *)object = 0x3FF0000000000000;
  *(_QWORD *)&object[128] = 0x3FF0000000000000;
  *(_QWORD *)&object[256] = 0x3FF0000000000000;
  *(_QWORD *)&object[384] = 0x3FF0000000000000;
  *(_QWORD *)&object[512] = 0x3FF0000000000000;
  *(_QWORD *)&object[640] = 0x3FF0000000000000;
  *(_QWORD *)&object[768] = 0x3FF0000000000000;
  *(_QWORD *)&object[896] = 0x3FF0000000000000;
  *(_QWORD *)&object[1024] = 0x3FF0000000000000;
  v992 = *(_QWORD *)(v27 + 2112);
  v984 = *(_OWORD *)(v27 + 2096);
  v50 = *(_OWORD *)(v27 + 2064);
  v971 = *(_OWORD *)(v27 + 2080);
  v990 = *(_QWORD *)(v27 + 2184);
  *(_OWORD *)v981 = *(_OWORD *)(v27 + 2168);
  *(_OWORD *)v970 = *(_OWORD *)(v27 + 2152);
  v51 = *(_OWORD *)(v27 + 2136);
  v52 = *(_OWORD *)(v27 + 2120);
  v997 = *(_QWORD *)(v27 + 2256);
  v53 = *(_OWORD *)(v27 + 2224);
  v976 = *(_OWORD *)(v27 + 2240);
  v55 = *(_OWORD *)(v27 + 2192);
  v54 = *(_OWORD *)(v27 + 2208);
  v988 = *(_QWORD *)(v27 + 2328);
  v56 = *(_OWORD *)(v27 + 2264);
  v57 = *(_OWORD *)(v27 + 2312);
  v58 = *(_OWORD *)(v27 + 2296);
  v59 = *(_OWORD *)(v27 + 2280);
  v987 = *(_QWORD *)(v27 + 2400);
  v60 = *(_OWORD *)(v27 + 2368);
  v974 = *(_OWORD *)(v27 + 2384);
  v61 = *(_OWORD *)(v27 + 2336);
  v62 = *(_OWORD *)(v27 + 2352);
  v64 = *(_OWORD *)(v27 + 2440);
  v63 = *(_OWORD *)(v27 + 2456);
  v66 = *(_OWORD *)(v27 + 2408);
  v65 = *(_OWORD *)(v27 + 2424);
  v67 = *(_QWORD *)(v27 + 2472);
  v68 = *(_QWORD *)(v27 + 2544);
  v69 = *(_OWORD *)(v27 + 2512);
  v70 = *(_OWORD *)(v27 + 2528);
  v71 = *(_OWORD *)(v27 + 2480);
  v72 = *(_OWORD *)(v27 + 2496);
  v73 = *(_QWORD *)(v27 + 2616);
  v74 = *(_OWORD *)(v27 + 2584);
  v75 = *(_OWORD *)(v27 + 2600);
  v76 = *(_OWORD *)(v27 + 2552);
  v77 = *(_OWORD *)(v27 + 2568);
  v986 = *(_QWORD *)(v27 + 2688);
  v78 = *(_OWORD *)(v27 + 2656);
  *(_OWORD *)__dst = *(_OWORD *)(v27 + 2672);
  v79 = *(_OWORD *)(v27 + 2624);
  v80 = *(_OWORD *)(v27 + 2640);
  *(_OWORD *)object = *(_OWORD *)(v27 + 2048);
  *(_OWORD *)&object[16] = v50;
  *(_OWORD *)&object[32] = v971;
  *(_OWORD *)&object[48] = v984;
  *(_OWORD *)&object[120] = v52;
  *(_OWORD *)&object[136] = v51;
  *(_OWORD *)&object[152] = *(_OWORD *)v970;
  *(_OWORD *)&object[168] = *(_OWORD *)v981;
  *(_QWORD *)&object[64] = v992;
  *(_QWORD *)&object[184] = v990;
  *(_OWORD *)&object[240] = v55;
  *(_OWORD *)&object[256] = v54;
  *(_OWORD *)&object[272] = v53;
  *(_OWORD *)&object[288] = v976;
  *(_OWORD *)&object[360] = v56;
  *(_OWORD *)&object[376] = v59;
  *(_OWORD *)&object[392] = v58;
  *(_OWORD *)&object[408] = v57;
  *(_QWORD *)&object[424] = v988;
  *(_OWORD *)&object[480] = v61;
  *(_OWORD *)&object[496] = v62;
  *(_OWORD *)&object[512] = v60;
  *(_OWORD *)&object[528] = v974;
  *(_QWORD *)&object[544] = v987;
  *(_OWORD *)&object[600] = v66;
  *(_OWORD *)&object[616] = v65;
  *(_OWORD *)&object[632] = v64;
  *(_OWORD *)&object[648] = v63;
  *(_QWORD *)&object[664] = v67;
  *(_OWORD *)&object[720] = v71;
  *(_OWORD *)&object[736] = v72;
  *(_OWORD *)&object[752] = v69;
  *(_OWORD *)&object[768] = v70;
  *(_QWORD *)&object[784] = v68;
  *(_OWORD *)&object[840] = v76;
  *(_OWORD *)&object[856] = v77;
  *(_OWORD *)&object[872] = v74;
  *(_OWORD *)&object[888] = v75;
  *(_QWORD *)&object[904] = v73;
  *(_OWORD *)&object[960] = v79;
  *(_OWORD *)&object[976] = v80;
  *(_OWORD *)&object[992] = v78;
  *(_OWORD *)&object[1008] = *(_OWORD *)__dst;
  *(_QWORD *)&object[1024] = v986;
  *(_QWORD *)&object[304] = v997;
  *(double *)&object[1152] = v1007 * v1007 * v1001;
  *(double *)&object[1280] = *(double *)&object[1152];
  *(double *)&object[1408] = *(double *)&object[1152];
  *(double *)&object[1536] = v1015 * v1015 * v1001;
  *(double *)&object[1664] = *(double *)&object[1536];
  *(double *)&object[1792] = *(double *)&object[1536];
  sub_20F61DEF0((float64x2_t *)object, (uint64_t)&v1047);
  *(_QWORD *)&v66 = vdupq_laneq_s64(*(int64x2_t *)&v1048[248], 1).u64[0];
  *((_QWORD *)&v66 + 1) = *(_QWORD *)&v1048[376];
  *(_QWORD *)&v81 = vdupq_laneq_s64(*(int64x2_t *)&v1048[488], 1).u64[0];
  *((_QWORD *)&v81 + 1) = *(_QWORD *)&v1048[616];
  v1002 = v81;
  *(_QWORD *)&v81 = vdupq_laneq_s64(*(int64x2_t *)&v1048[728], 1).u64[0];
  *((_QWORD *)&v81 + 1) = *(_QWORD *)&v1048[856];
  *(_OWORD *)v991 = v81;
  *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1048[968], 1).u64[0];
  *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1048[1096];
  *(_OWORD *)v982 = v82;
  *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1208], 1).u64[0];
  *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1048[1336];
  v975 = v82;
  *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1448], 1).u64[0];
  *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1048[1576];
  *(_OWORD *)v967 = v82;
  *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1048[264], 1).u64[0];
  *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1048[392];
  *(_OWORD *)v989 = v82;
  *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1048[504], 1).u64[0];
  *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1048[632];
  v977 = v83;
  *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1048[744], 1).u64[0];
  *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1048[872];
  *(_OWORD *)v969 = v83;
  *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1048[984], 1).u64[0];
  *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1048[1112];
  v964 = v83;
  *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1224], 1).u64[0];
  *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1048[1352];
  v962 = v83;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1464], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[1592];
  v957 = v84;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[280], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[408];
  v972 = v84;
  *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1048[520], 1).u64[0];
  *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1048[648];
  *(_OWORD *)v966 = v85;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[760], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[888];
  v961 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1000], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1128];
  v958 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1240], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[1368];
  v950 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1480], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1608];
  v945 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[296], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[424];
  v963 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[536], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[664];
  v959 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[776], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[904];
  v947 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1016], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1144];
  v944 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1256], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[1384];
  v940 = v84;
  *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1496], 1).u64[0];
  *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1048[1624];
  v938 = v85;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[312], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[440];
  v955 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[552], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[680];
  v948 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[792], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[920];
  v943 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1032], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1160];
  v939 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1272], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[1400];
  v935 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1512], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1640];
  v933 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[328], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[456];
  v946 = v84;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[568], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[696];
  v942 = v84;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[808], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[936];
  v937 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1048], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1176];
  v934 = v86;
  *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1288], 1).u64[0];
  *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1048[1416];
  v932 = v85;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1528], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1656];
  v930 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[344], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[472];
  v941 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[584], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[712];
  v936 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[824], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[952];
  v931 = v84;
  *(_QWORD *)&v86 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1064], 1).u64[0];
  *((_QWORD *)&v86 + 1) = *(_QWORD *)&v1048[1192];
  v929 = v86;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1304], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[1432];
  v928 = v84;
  *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1048[1544], 1).u64[0];
  *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1048[1672];
  v927 = v84;
  v87 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)&v53 = *(_QWORD *)(v27 + 1616);
  *(_OWORD *)&v1048[1808] = *(_OWORD *)(v27 + 48);
  *(_QWORD *)&v1048[1824] = v87;
  v88 = *(_QWORD *)(v27 + 88);
  *(_OWORD *)&v1048[1832] = *(_OWORD *)(v27 + 72);
  *(_QWORD *)&v1048[1848] = v88;
  v89 = *(_OWORD *)(v27 + 112);
  v1049[0] = *(_OWORD *)(v27 + 96);
  v1049[1] = v89;
  v1049[2] = *(_OWORD *)(v27 + 128);
  v90 = *(_QWORD *)(v27 + 192);
  v91 = *(_OWORD *)(v27 + 144);
  v92 = *(_OWORD *)(v27 + 176);
  v1049[4] = *(_OWORD *)(v27 + 160);
  v1049[5] = v92;
  v1049[3] = v91;
  *(_QWORD *)&v1049[6] = v90;
  *(_OWORD *)((char *)&v1049[6] + 8) = *(_OWORD *)(v27 + 200);
  v93 = *(_QWORD *)(v27 + 264);
  v94 = *(_OWORD *)(v27 + 216);
  v95 = *(_OWORD *)(v27 + 232);
  *(_OWORD *)((char *)&v1049[9] + 8) = *(_OWORD *)(v27 + 248);
  *(_OWORD *)((char *)&v1049[8] + 8) = v95;
  *(_OWORD *)((char *)&v1049[7] + 8) = v94;
  *((_QWORD *)&v1049[10] + 1) = v93;
  v1049[11] = *(_OWORD *)(v27 + 272);
  v96 = *(_QWORD *)(v27 + 336);
  v97 = *(_OWORD *)(v27 + 288);
  v98 = *(_OWORD *)(v27 + 320);
  v1049[13] = *(_OWORD *)(v27 + 304);
  v1049[14] = v98;
  v1049[12] = v97;
  *(_QWORD *)&v1049[15] = v96;
  *(_OWORD *)((char *)&v1049[15] + 8) = *(_OWORD *)(v27 + 344);
  v99 = *(_QWORD *)(v27 + 408);
  v100 = *(_OWORD *)(v27 + 360);
  v101 = *(_OWORD *)(v27 + 376);
  *(_OWORD *)((char *)&v1049[18] + 8) = *(_OWORD *)(v27 + 392);
  *(_OWORD *)((char *)&v1049[17] + 8) = v101;
  *(_OWORD *)((char *)&v1049[16] + 8) = v100;
  *((_QWORD *)&v1049[19] + 1) = v99;
  v1049[20] = *(_OWORD *)(v27 + 416);
  v102 = *(_QWORD *)(v27 + 480);
  v103 = *(_OWORD *)(v27 + 432);
  v104 = *(_OWORD *)(v27 + 464);
  v1049[22] = *(_OWORD *)(v27 + 448);
  v1049[23] = v104;
  v1049[21] = v103;
  *(_QWORD *)&v1049[24] = v102;
  *(_OWORD *)((char *)&v1049[24] + 8) = *(_OWORD *)(v27 + 488);
  v105 = *(_QWORD *)(v27 + 552);
  v106 = *(_OWORD *)(v27 + 504);
  v107 = *(_OWORD *)(v27 + 520);
  *(_OWORD *)((char *)&v1049[27] + 8) = *(_OWORD *)(v27 + 536);
  *(_OWORD *)((char *)&v1049[26] + 8) = v107;
  *(_OWORD *)((char *)&v1049[25] + 8) = v106;
  *((_QWORD *)&v1049[28] + 1) = v105;
  v1049[29] = *(_OWORD *)(v27 + 560);
  v108 = *(_QWORD *)(v27 + 624);
  v109 = *(_OWORD *)(v27 + 576);
  v110 = *(_OWORD *)(v27 + 608);
  v1049[31] = *(_OWORD *)(v27 + 592);
  v1049[32] = v110;
  v1049[30] = v109;
  *(_QWORD *)&v1049[33] = v108;
  *(_OWORD *)((char *)&v1049[33] + 8) = *(_OWORD *)(v27 + 632);
  v111 = *(_QWORD *)(v27 + 696);
  v112 = *(_OWORD *)(v27 + 648);
  v113 = *(_OWORD *)(v27 + 664);
  *(_OWORD *)((char *)&v1049[36] + 8) = *(_OWORD *)(v27 + 680);
  *(_OWORD *)((char *)&v1049[35] + 8) = v113;
  *(_OWORD *)((char *)&v1049[34] + 8) = v112;
  *(_QWORD *)&v112 = *(_QWORD *)&v1048[120];
  *((_QWORD *)&v112 + 1) = *(_QWORD *)&v1048[240];
  v926 = v112;
  *(_QWORD *)&v112 = *(_QWORD *)&v1048[360];
  *((_QWORD *)&v112 + 1) = *(_QWORD *)&v1048[480];
  v925 = v112;
  *(_QWORD *)&v112 = *(_QWORD *)&v1048[600];
  *((_QWORD *)&v112 + 1) = *(_QWORD *)&v1048[720];
  v924 = v112;
  *(_QWORD *)&v112 = *(_QWORD *)&v1048[840];
  *((_QWORD *)&v112 + 1) = *(_QWORD *)&v1048[960];
  v923 = v112;
  *(_QWORD *)&v112 = *(_QWORD *)&v1048[1080];
  *((_QWORD *)&v112 + 1) = *(_QWORD *)&v1048[1200];
  v922 = v112;
  *(_QWORD *)&v112 = *(_QWORD *)&v1048[1320];
  *((_QWORD *)&v112 + 1) = *(_QWORD *)&v1048[1440];
  v921 = v112;
  *(_QWORD *)&v112 = *(_QWORD *)&v1048[1560];
  *((_QWORD *)&v112 + 1) = *(_QWORD *)&v1048[1680];
  v920 = v112;
  *((_QWORD *)&v1049[37] + 1) = v111;
  memcpy(&v1049[38], (const void *)(v27 + 704), 0x288uLL);
  v114 = *(_QWORD *)(v27 + 1368);
  *(_OWORD *)((char *)&v1049[78] + 8) = *(_OWORD *)(v27 + 1352);
  *((_QWORD *)&v1049[79] + 1) = v114;
  v115 = *(_QWORD *)(v27 + 1392);
  v1049[80] = *(_OWORD *)(v27 + 1376);
  *(int64x2_t *)((char *)&v1049[86] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1208], *(int64x2_t *)&v1048[1328]);
  *(int64x2_t *)((char *)&v1049[87] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1448], *(int64x2_t *)&v1048[1568]);
  *(int64x2_t *)((char *)&v1049[84] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[728], *(int64x2_t *)&v1048[848]);
  *(int64x2_t *)((char *)&v1049[85] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[968], *(int64x2_t *)&v1048[1088]);
  *(_QWORD *)&v1049[96] = *(_QWORD *)&v1048[1696];
  *((_QWORD *)&v1049[88] + 1) = *(_QWORD *)&v1048[1688];
  *(int64x2_t *)((char *)&v1049[82] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[248], *(int64x2_t *)&v1048[368]);
  *(int64x2_t *)((char *)&v1049[83] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[488], *(int64x2_t *)&v1048[608]);
  *(int64x2_t *)((char *)&v1049[81] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[8], *(int64x2_t *)&v1048[128]);
  v1049[95] = *(_OWORD *)v967;
  v1049[94] = v975;
  v1049[93] = *(_OWORD *)v982;
  v1049[92] = *(_OWORD *)v991;
  v1049[91] = v1002;
  v1049[90] = v66;
  v1049[89] = vzip2q_s64(*(int64x2_t *)&v1048[8], *(int64x2_t *)&v1048[128]);
  *(int64x2_t *)((char *)&v1049[101] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1224], *(int64x2_t *)&v1048[1344]);
  *(int64x2_t *)((char *)&v1049[102] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1464], *(int64x2_t *)&v1048[1584]);
  *(int64x2_t *)((char *)&v1049[99] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[744], *(int64x2_t *)&v1048[864]);
  *(int64x2_t *)((char *)&v1049[100] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[984], *(int64x2_t *)&v1048[1104]);
  *(_QWORD *)&v1049[111] = *(_QWORD *)&v1048[1712];
  *((_QWORD *)&v1049[103] + 1) = *(_QWORD *)&v1048[1704];
  *(int64x2_t *)((char *)&v1049[97] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[264], *(int64x2_t *)&v1048[384]);
  *(int64x2_t *)((char *)&v1049[98] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[504], *(int64x2_t *)&v1048[624]);
  *(int64x2_t *)((char *)&v1049[96] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[24], *(int64x2_t *)&v1048[144]);
  v1049[109] = v962;
  v1049[110] = v957;
  v1049[107] = *(_OWORD *)v969;
  v1049[108] = v964;
  v1049[105] = *(_OWORD *)v989;
  v1049[106] = v977;
  v1049[104] = vzip2q_s64(*(int64x2_t *)&v1048[24], *(int64x2_t *)&v1048[144]);
  *(int64x2_t *)((char *)&v1049[116] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1240], *(int64x2_t *)&v1048[1360]);
  *(int64x2_t *)((char *)&v1049[117] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1480], *(int64x2_t *)&v1048[1600]);
  *(int64x2_t *)((char *)&v1049[114] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[760], *(int64x2_t *)&v1048[880]);
  *(int64x2_t *)((char *)&v1049[115] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1000], *(int64x2_t *)&v1048[1120]);
  *(int64x2_t *)((char *)&v1049[112] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[280], *(int64x2_t *)&v1048[400]);
  *(int64x2_t *)((char *)&v1049[113] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[520], *(int64x2_t *)&v1048[640]);
  *(int64x2_t *)((char *)&v1049[111] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[40], *(int64x2_t *)&v1048[160]);
  *(_QWORD *)&v1049[126] = *(_QWORD *)&v1048[1728];
  *((_QWORD *)&v1049[118] + 1) = *(_QWORD *)&v1048[1720];
  v1049[124] = v950;
  v1049[125] = v945;
  v1049[122] = v961;
  v1049[123] = v958;
  v1049[120] = v972;
  v1049[121] = *(_OWORD *)v966;
  v1049[119] = vzip2q_s64(*(int64x2_t *)&v1048[40], *(int64x2_t *)&v1048[160]);
  *(int64x2_t *)((char *)&v1049[131] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1256], *(int64x2_t *)&v1048[1376]);
  *(int64x2_t *)((char *)&v1049[132] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1496], *(int64x2_t *)&v1048[1616]);
  *(int64x2_t *)((char *)&v1049[129] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[776], *(int64x2_t *)&v1048[896]);
  *(int64x2_t *)((char *)&v1049[130] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1016], *(int64x2_t *)&v1048[1136]);
  *(int64x2_t *)((char *)&v1049[127] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[296], *(int64x2_t *)&v1048[416]);
  *(int64x2_t *)((char *)&v1049[128] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[536], *(int64x2_t *)&v1048[656]);
  *(int64x2_t *)((char *)&v1049[126] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[56], *(int64x2_t *)&v1048[176]);
  *(_QWORD *)&v1049[141] = *(_QWORD *)&v1048[1744];
  *((_QWORD *)&v1049[133] + 1) = *(_QWORD *)&v1048[1736];
  v1049[139] = v940;
  v1049[140] = v938;
  v1049[137] = v947;
  v1049[138] = v944;
  v1049[135] = v963;
  v1049[136] = v959;
  v1049[134] = vzip2q_s64(*(int64x2_t *)&v1048[56], *(int64x2_t *)&v1048[176]);
  *(int64x2_t *)((char *)&v1049[147] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1512], *(int64x2_t *)&v1048[1632]);
  *(int64x2_t *)((char *)&v1049[146] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1272], *(int64x2_t *)&v1048[1392]);
  *(int64x2_t *)((char *)&v1049[144] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[792], *(int64x2_t *)&v1048[912]);
  *(int64x2_t *)((char *)&v1049[145] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1032], *(int64x2_t *)&v1048[1152]);
  *(int64x2_t *)((char *)&v1049[142] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[312], *(int64x2_t *)&v1048[432]);
  *(int64x2_t *)((char *)&v1049[143] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[552], *(int64x2_t *)&v1048[672]);
  *(int64x2_t *)((char *)&v1049[141] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[72], *(int64x2_t *)&v1048[192]);
  *(_QWORD *)&v1049[156] = *(_QWORD *)&v1048[1760];
  *((_QWORD *)&v1049[148] + 1) = *(_QWORD *)&v1048[1752];
  v1049[154] = v935;
  v1049[155] = v933;
  v1049[152] = v943;
  v1049[153] = v939;
  v1049[150] = v955;
  v1049[151] = v948;
  v1049[149] = vzip2q_s64(*(int64x2_t *)&v1048[72], *(int64x2_t *)&v1048[192]);
  *(int64x2_t *)((char *)&v1049[162] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1528], *(int64x2_t *)&v1048[1648]);
  *(int64x2_t *)((char *)&v1049[161] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1288], *(int64x2_t *)&v1048[1408]);
  *(int64x2_t *)((char *)&v1049[160] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1048], *(int64x2_t *)&v1048[1168]);
  *(int64x2_t *)((char *)&v1049[159] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[808], *(int64x2_t *)&v1048[928]);
  *(int64x2_t *)((char *)&v1049[158] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[568], *(int64x2_t *)&v1048[688]);
  *(int64x2_t *)((char *)&v1049[157] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[328], *(int64x2_t *)&v1048[448]);
  *(int64x2_t *)((char *)&v1049[156] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[88], *(int64x2_t *)&v1048[208]);
  *(_QWORD *)&v1049[171] = *(_QWORD *)&v1048[1776];
  *((_QWORD *)&v1049[163] + 1) = *(_QWORD *)&v1048[1768];
  v1049[169] = v932;
  v1049[170] = v930;
  v1049[167] = v937;
  v1049[168] = v934;
  v1049[165] = v946;
  v1049[166] = v942;
  v1049[164] = vzip2q_s64(*(int64x2_t *)&v1048[88], *(int64x2_t *)&v1048[208]);
  *(int64x2_t *)((char *)&v1049[177] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1544], *(int64x2_t *)&v1048[1664]);
  *(int64x2_t *)((char *)&v1049[176] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1304], *(int64x2_t *)&v1048[1424]);
  *(int64x2_t *)((char *)&v1049[175] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[1064], *(int64x2_t *)&v1048[1184]);
  *(int64x2_t *)((char *)&v1049[174] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[824], *(int64x2_t *)&v1048[944]);
  *(int64x2_t *)((char *)&v1049[173] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[584], *(int64x2_t *)&v1048[704]);
  *(int64x2_t *)((char *)&v1049[172] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[344], *(int64x2_t *)&v1048[464]);
  *(int64x2_t *)((char *)&v1049[171] + 8) = vzip1q_s64(*(int64x2_t *)&v1048[104], *(int64x2_t *)&v1048[224]);
  *(_QWORD *)&v1049[186] = *(_QWORD *)&v1048[1792];
  *((_QWORD *)&v1049[178] + 1) = *(_QWORD *)&v1048[1784];
  v1049[184] = v928;
  v1049[185] = v927;
  v1049[182] = v931;
  v1049[183] = v929;
  v1049[180] = v941;
  v1049[181] = v936;
  v1049[179] = vzip2q_s64(*(int64x2_t *)&v1048[104], *(int64x2_t *)&v1048[224]);
  *((_QWORD *)&v1049[193] + 1) = *(_QWORD *)&v1048[1800];
  *(_OWORD *)((char *)&v1049[192] + 8) = v920;
  *(_OWORD *)((char *)&v1049[191] + 8) = v921;
  *(_OWORD *)((char *)&v1049[190] + 8) = v922;
  *(_OWORD *)((char *)&v1049[189] + 8) = v923;
  *(_OWORD *)((char *)&v1049[188] + 8) = v924;
  *(_QWORD *)&v1049[81] = v115;
  *(_OWORD *)((char *)&v1049[187] + 8) = v925;
  *(_OWORD *)((char *)&v1049[186] + 8) = v926;
  v116 = *(_OWORD *)(v27 + 2696);
  *(_QWORD *)&v1049[195] = *(_QWORD *)(v27 + 2712);
  v1049[194] = v116;
  *((_QWORD *)&v1049[195] + 1) = v53;
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v1029 + 1);
  if (*((_QWORD *)&v1029 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v1029 + 1) + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    v1030 = (std::__shared_weak_count *)*((_QWORD *)&v1029 + 1);
    do
      v120 = __ldxr(v118);
    while (__stxr(v120 + 1, v118));
  }
  else
  {
    v1030 = 0;
  }
  v186 = (_QWORD *)v11[399].i64[1];
  v187 = (_QWORD *)v11[400].i64[0];
  v1016 = v47;
  v1013 = v11;
  if (v186 == v187)
  {
    v187 = (_QWORD *)v11[399].i64[1];
  }
  else if (*(v187 - 667) >= (unint64_t)v1046)
  {
    v188 = 0x4515E08719B71393 * (v187 - v186);
    do
    {
      v189 = v188 >> 1;
      v190 = &v186[667 * (v188 >> 1)];
      v191 = *v190;
      v192 = v190 + 667;
      v188 += ~(v188 >> 1);
      if (v191 < (unint64_t)v1046)
        v186 = v192;
      else
        v188 = v189;
    }
    while (v188);
    if (v186 != v187)
    {
      v187 = v186;
      if (*v186 == (_QWORD)v1046)
      {
        v193 = 0;
        v194 = v11;
        goto LABEL_266;
      }
    }
  }
  v978 = v187;
  v985 = v1046;
  if (*((_QWORD *)&v1029 + 1))
  {
    v195 = (unint64_t *)(*((_QWORD *)&v1029 + 1) + 8);
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 1, v195));
  }
  *(_OWORD *)v1094 = v1046;
  LOBYTE(v1095) = v1048[0];
  *(_QWORD *)&v1094[16] = &off_24CA00398;
  memcpy(v1096, &v1048[8], 0x708uLL);
  *(_OWORD *)&v1096[1800] = *(_OWORD *)&v1048[1808];
  *(_QWORD *)&v1096[1816] = *(_QWORD *)&v1048[1824];
  *(_OWORD *)&v1096[1824] = *(_OWORD *)&v1048[1832];
  *(_QWORD *)&v1096[1840] = *(_QWORD *)&v1048[1848];
  *(_OWORD *)&v1096[1848] = v1049[0];
  *(_OWORD *)&v1096[1864] = v1049[1];
  *(_OWORD *)&v1096[1912] = v1049[4];
  *(_OWORD *)&v1096[1928] = v1049[5];
  *(_OWORD *)&v1096[1880] = v1049[2];
  *(_OWORD *)&v1096[1896] = v1049[3];
  *(_QWORD *)&v1096[1944] = *(_QWORD *)&v1049[6];
  *(_QWORD *)&v1096[2016] = *((_QWORD *)&v1049[10] + 1);
  *(_OWORD *)&v1096[2000] = *(_OWORD *)((char *)&v1049[9] + 8);
  *(_OWORD *)&v1096[1984] = *(_OWORD *)((char *)&v1049[8] + 8);
  *(_OWORD *)&v1096[1968] = *(_OWORD *)((char *)&v1049[7] + 8);
  *(_OWORD *)&v1096[1952] = *(_OWORD *)((char *)&v1049[6] + 8);
  *(_OWORD *)&v1096[2056] = v1049[13];
  *(_OWORD *)&v1096[2072] = v1049[14];
  *(_OWORD *)&v1096[2024] = v1049[11];
  *(_OWORD *)&v1096[2040] = v1049[12];
  *(_QWORD *)&v1096[2088] = *(_QWORD *)&v1049[15];
  *(_OWORD *)&v1096[2096] = *(_OWORD *)((char *)&v1049[15] + 8);
  *(_QWORD *)&v1096[2160] = *((_QWORD *)&v1049[19] + 1);
  *(_OWORD *)&v1096[2144] = *(_OWORD *)((char *)&v1049[18] + 8);
  *(_OWORD *)&v1096[2128] = *(_OWORD *)((char *)&v1049[17] + 8);
  *(_OWORD *)&v1096[2112] = *(_OWORD *)((char *)&v1049[16] + 8);
  *(_OWORD *)&v1096[2200] = v1049[22];
  *(_OWORD *)&v1096[2216] = v1049[23];
  *(_OWORD *)&v1096[2168] = v1049[20];
  *(_OWORD *)&v1096[2184] = v1049[21];
  *(_QWORD *)&v1096[2232] = *(_QWORD *)&v1049[24];
  *(_OWORD *)&v1096[2240] = *(_OWORD *)((char *)&v1049[24] + 8);
  *(_QWORD *)&v1096[2304] = *((_QWORD *)&v1049[28] + 1);
  *(_OWORD *)&v1096[2288] = *(_OWORD *)((char *)&v1049[27] + 8);
  *(_OWORD *)&v1096[2272] = *(_OWORD *)((char *)&v1049[26] + 8);
  *(_OWORD *)&v1096[2256] = *(_OWORD *)((char *)&v1049[25] + 8);
  *(_OWORD *)&v1096[2344] = v1049[31];
  *(_OWORD *)&v1096[2360] = v1049[32];
  *(_OWORD *)&v1096[2312] = v1049[29];
  *(_OWORD *)&v1096[2328] = v1049[30];
  *(_QWORD *)&v1096[2376] = *(_QWORD *)&v1049[33];
  *(_OWORD *)&v1096[2384] = *(_OWORD *)((char *)&v1049[33] + 8);
  *(_QWORD *)&v1096[2448] = *((_QWORD *)&v1049[37] + 1);
  *(_OWORD *)&v1096[2432] = *(_OWORD *)((char *)&v1049[36] + 8);
  *(_OWORD *)&v1096[2416] = *(_OWORD *)((char *)&v1049[35] + 8);
  *(_OWORD *)&v1096[2400] = *(_OWORD *)((char *)&v1049[34] + 8);
  memcpy(&v1096[2456], &v1049[38], 0x288uLL);
  *(_OWORD *)&v1096[3104] = *(_OWORD *)((char *)&v1049[78] + 8);
  *(_QWORD *)&v1096[3120] = *((_QWORD *)&v1049[79] + 1);
  *(_OWORD *)&v1096[3128] = v1049[80];
  *(_QWORD *)&v1096[3144] = *(_QWORD *)&v1049[81];
  memcpy(&v1096[3152], (char *)&v1049[81] + 8, 0x708uLL);
  *(_OWORD *)&v1096[4952] = v1049[194];
  *(_OWORD *)&v1096[4968] = v1049[195];
  memset(&v1096[4984], 0, 32);
  *(_OWORD *)&v1096[5272] = v1029;
  if (*((_QWORD *)&v1029 + 1))
  {
    v197 = (unint64_t *)(*((_QWORD *)&v1029 + 1) + 8);
    v194 = v11;
    v198 = v47;
    do
      v199 = __ldxr(v197);
    while (__stxr(v199 + 1, v197));
    *(_QWORD *)&v1096[5256] = 0xBFF0000000000000;
    v1096[5264] = 0;
    v1096[5288] = 0;
    do
      v200 = __ldaxr(v197);
    while (__stlxr(v200 - 1, v197));
    if (!v200)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1029 + 1) + 16))(*((_QWORD *)&v1029 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1029 + 1));
    }
  }
  else
  {
    *(_QWORD *)&v1096[5256] = 0xBFF0000000000000;
    v1096[5264] = 0;
    v1096[5288] = 0;
    v194 = v11;
    v198 = v47;
  }
  v201 = v194[324].i64[1];
  v202 = v194[325].i64[0];
  v203 = v201;
  if (v202 != v201)
  {
    v204 = (v202 - v201) >> 4;
    v203 = v194[324].i64[1];
    do
    {
      v205 = v204 >> 1;
      v206 = (unsigned int *)(v203 + 16 * (v204 >> 1));
      v208 = *v206;
      v207 = v206 + 4;
      v204 += ~(v204 >> 1);
      if (v208 < v198)
        v203 = (uint64_t)v207;
      else
        v204 = v205;
    }
    while (v204);
  }
  if (v203 == v202 || *(_DWORD *)v203 != v198)
    goto LABEL_252;
  v209 = *(_QWORD *)(v203 + 8);
  *(_QWORD *)&v1096[4984] = v209;
  ++*(_DWORD *)(*(_QWORD *)(v203 + 8) + 8);
  v210 = v194[330].i64[1];
  v211 = v194[331].i64[0];
  v212 = v210;
  if (v211 != v210)
  {
    v213 = (v211 - v210) >> 4;
    v212 = v194[330].i64[1];
    do
    {
      v214 = v213 >> 1;
      v215 = (unsigned int *)(v212 + 16 * (v213 >> 1));
      v217 = *v215;
      v216 = v215 + 4;
      v213 += ~(v213 >> 1);
      if (v217 < v198)
        v212 = (uint64_t)v216;
      else
        v213 = v214;
    }
    while (v213);
  }
  if (v212 == v211 || *(_DWORD *)v212 != v198)
    goto LABEL_252;
  v218 = *(_QWORD *)(v212 + 8);
  *(_QWORD *)&v1096[4992] = v218;
  ++*(_DWORD *)(*(_QWORD *)(v212 + 8) + 8);
  if (v202 != v201)
  {
    v219 = (v202 - v201) >> 4;
    do
    {
      v220 = v219 >> 1;
      v221 = (unsigned int *)(v201 + 16 * (v219 >> 1));
      v223 = *v221;
      v222 = v221 + 4;
      v219 += ~(v219 >> 1);
      if (v223 < v919)
        v201 = (uint64_t)v222;
      else
        v219 = v220;
    }
    while (v219);
  }
  if (v201 == v202 || *(_DWORD *)v201 != v919)
    goto LABEL_252;
  v224 = *(_QWORD *)(v201 + 8);
  *(_QWORD *)&v1096[5000] = v224;
  ++*(_DWORD *)(*(_QWORD *)(v201 + 8) + 8);
  if (v211 != v210)
  {
    v225 = (v211 - v210) >> 4;
    do
    {
      v226 = v225 >> 1;
      v227 = (unsigned int *)(v210 + 16 * (v225 >> 1));
      v229 = *v227;
      v228 = v227 + 4;
      v225 += ~(v225 >> 1);
      if (v229 < v919)
        v210 = (uint64_t)v228;
      else
        v225 = v226;
    }
    while (v225);
  }
  if (v210 == v211 || *(_DWORD *)v210 != v919)
  {
LABEL_252:
    if (*(_QWORD *)&v1096[4984])
      --*(_DWORD *)(*(_QWORD *)&v1096[4984] + 8);
    if (*(_QWORD *)&v1096[4992])
      --*(_DWORD *)(*(_QWORD *)&v1096[4992] + 8);
    if (*(_QWORD *)&v1096[5000])
      --*(_DWORD *)(*(_QWORD *)&v1096[5000] + 8);
    v193 = 0;
    if (*(_QWORD *)&v1096[5008])
      --*(_DWORD *)(*(_QWORD *)&v1096[5008] + 8);
  }
  else
  {
    v230 = *(_QWORD *)(v210 + 8);
    *(_QWORD *)&v1096[5008] = v230;
    ++*(_DWORD *)(*(_QWORD *)(v210 + 8) + 8);
    if (*(_BYTE *)(v209 + 20) || *(_BYTE *)(v218 + 20) || *(_BYTE *)(v224 + 20) || *(_BYTE *)(v230 + 20))
    {
      *(_OWORD *)&object[8] = *(_OWORD *)v1094;
      v965 = v1095;
      object[32] = v1095;
      *(_QWORD *)object = v985;
      *(_QWORD *)&object[24] = &off_24CA00398;
      memcpy(&object[40], v1096, 0x708uLL);
      *(_OWORD *)&object[1840] = *(_OWORD *)&v1096[1800];
      *(_OWORD *)&object[1864] = *(_OWORD *)&v1096[1824];
      v1209[0] = *(_OWORD *)&v1096[1848];
      v1209[1] = *(_OWORD *)&v1096[1864];
      v1209[2] = *(_OWORD *)&v1096[1880];
      v1209[5] = *(_OWORD *)&v1096[1928];
      v1209[4] = *(_OWORD *)&v1096[1912];
      v1209[3] = *(_OWORD *)&v1096[1896];
      *(_OWORD *)((char *)&v1209[6] + 8) = *(_OWORD *)&v1096[1952];
      *(_OWORD *)((char *)&v1209[9] + 8) = *(_OWORD *)&v1096[2000];
      *(_OWORD *)((char *)&v1209[8] + 8) = *(_OWORD *)&v1096[1984];
      *(_OWORD *)((char *)&v1209[7] + 8) = *(_OWORD *)&v1096[1968];
      v1209[13] = *(_OWORD *)&v1096[2056];
      v1209[14] = *(_OWORD *)&v1096[2072];
      v1209[11] = *(_OWORD *)&v1096[2024];
      v1209[12] = *(_OWORD *)&v1096[2040];
      *(_OWORD *)((char *)&v1209[15] + 8) = *(_OWORD *)&v1096[2096];
      *(_OWORD *)((char *)&v1209[18] + 8) = *(_OWORD *)&v1096[2144];
      *(_OWORD *)((char *)&v1209[17] + 8) = *(_OWORD *)&v1096[2128];
      *(_OWORD *)((char *)&v1209[16] + 8) = *(_OWORD *)&v1096[2112];
      v1209[22] = *(_OWORD *)&v1096[2200];
      v1209[23] = *(_OWORD *)&v1096[2216];
      v1209[20] = *(_OWORD *)&v1096[2168];
      v1209[21] = *(_OWORD *)&v1096[2184];
      *(_OWORD *)((char *)&v1209[24] + 8) = *(_OWORD *)&v1096[2240];
      *(_OWORD *)((char *)&v1209[27] + 8) = *(_OWORD *)&v1096[2288];
      *(_OWORD *)((char *)&v1209[26] + 8) = *(_OWORD *)&v1096[2272];
      *(_OWORD *)((char *)&v1209[25] + 8) = *(_OWORD *)&v1096[2256];
      v1209[31] = *(_OWORD *)&v1096[2344];
      v1209[32] = *(_OWORD *)&v1096[2360];
      v1209[29] = *(_OWORD *)&v1096[2312];
      v1209[30] = *(_OWORD *)&v1096[2328];
      *(_OWORD *)((char *)&v1209[33] + 8) = *(_OWORD *)&v1096[2384];
      *(_OWORD *)((char *)&v1209[36] + 8) = *(_OWORD *)&v1096[2432];
      *(_OWORD *)((char *)&v1209[35] + 8) = *(_OWORD *)&v1096[2416];
      *(_QWORD *)&object[1856] = *(_QWORD *)&v1096[1816];
      *(_QWORD *)&object[1880] = *(_QWORD *)&v1096[1840];
      *(_QWORD *)&v1209[6] = *(_QWORD *)&v1096[1944];
      *((_QWORD *)&v1209[10] + 1) = *(_QWORD *)&v1096[2016];
      *(_QWORD *)&v1209[15] = *(_QWORD *)&v1096[2088];
      *((_QWORD *)&v1209[19] + 1) = *(_QWORD *)&v1096[2160];
      *(_QWORD *)&v1209[24] = *(_QWORD *)&v1096[2232];
      *((_QWORD *)&v1209[28] + 1) = *(_QWORD *)&v1096[2304];
      *(_QWORD *)&v1209[33] = *(_QWORD *)&v1096[2376];
      *((_QWORD *)&v1209[37] + 1) = *(_QWORD *)&v1096[2448];
      *(_OWORD *)((char *)&v1209[34] + 8) = *(_OWORD *)&v1096[2400];
      memcpy(&v1209[38], &v1096[2456], 0x288uLL);
      *(_OWORD *)((char *)&v1209[78] + 8) = *(_OWORD *)&v1096[3104];
      *((_QWORD *)&v1209[79] + 1) = *(_QWORD *)&v1096[3120];
      v1209[80] = *(_OWORD *)&v1096[3128];
      *(_QWORD *)&v1209[81] = *(_QWORD *)&v1096[3144];
      memcpy((char *)&v1209[81] + 8, &v1096[3152], 0x708uLL);
      v1209[194] = *(_OWORD *)&v1096[4952];
      v1209[195] = *(_OWORD *)&v1096[4968];
      v1209[196] = *(_OWORD *)&v1096[4984];
      v1209[197] = *(_OWORD *)&v1096[5000];
      *(_QWORD *)&v1209[205] = *(_QWORD *)&v1096[5128];
      v1209[204] = *(_OWORD *)&v1096[5112];
      v1209[203] = *(_OWORD *)&v1096[5096];
      v1209[202] = *(_OWORD *)&v1096[5080];
      v1209[201] = *(_OWORD *)&v1096[5064];
      v1209[200] = *(_OWORD *)&v1096[5048];
      v1209[199] = *(_OWORD *)&v1096[5032];
      v1209[198] = *(_OWORD *)&v1096[5016];
      *(_OWORD *)((char *)&v1209[208] + 8) = *(_OWORD *)&v1096[5184];
      *(_OWORD *)((char *)&v1209[207] + 8) = *(_OWORD *)&v1096[5168];
      *(_OWORD *)((char *)&v1209[206] + 8) = *(_OWORD *)&v1096[5152];
      *(_OWORD *)((char *)&v1209[205] + 8) = *(_OWORD *)&v1096[5136];
      *(_OWORD *)((char *)&v1209[211] + 8) = *(_OWORD *)&v1096[5232];
      *(_OWORD *)((char *)&v1209[210] + 8) = *(_OWORD *)&v1096[5216];
      *(_OWORD *)((char *)&v1209[209] + 8) = *(_OWORD *)&v1096[5200];
      *((_QWORD *)&v1209[212] + 1) = *(_QWORD *)&v1096[5248];
      BYTE8(v1209[213]) = v1096[5264];
      *(_QWORD *)&v1209[213] = *(_QWORD *)&v1096[5256];
      v231 = *(_QWORD *)&v1096[5272];
      v1209[214] = *(_OWORD *)&v1096[5272];
      v232 = *(std::__shared_weak_count **)&v1096[5280];
      *(_OWORD *)&v1096[5272] = 0uLL;
      LOBYTE(v1209[215]) = v1096[5288];
      v233 = (_QWORD *)v194[400].i64[0];
      if (v233 == v978 || *v978 != v985)
      {
        v342 = v194[399].i64[1];
        v343 = (uint64_t)v978 - v342;
        v968 = ((uint64_t)v978 - v342) / 5336;
        v344 = (_QWORD *)(v342 + 5336 * v968);
        v345 = v194[400].u64[1];
        if ((unint64_t)v233 >= v345)
        {
          v430 = 0x4515E08719B71393 * (((uint64_t)v233 - v342) >> 3) + 1;
          if (v430 > 0xC4827EA81BA25)
            sub_20E867F44();
          if (0x8A2BC10E336E2726 * ((uint64_t)(v345 - v342) >> 3) > v430)
            v430 = 0x8A2BC10E336E2726 * ((uint64_t)(v345 - v342) >> 3);
          if ((unint64_t)(0x4515E08719B71393 * ((uint64_t)(v345 - v342) >> 3)) >= 0x62413F540DD12)
            v431 = 0xC4827EA81BA25;
          else
            v431 = v430;
          *(_QWORD *)&v1207[2] = (char *)v194 + 6408;
          v952 = (_QWORD *)v342;
          if (v431)
          {
            if (v431 > 0xC4827EA81BA25)
              sub_20E877A38();
            v432 = (char *)operator new(5336 * v431);
          }
          else
          {
            v432 = 0;
          }
          v478 = v968;
          v479 = &v432[5336 * v968];
          *(_QWORD *)&v1207[0] = v432;
          *((_QWORD *)&v1207[0] + 1) = v479;
          *(_QWORD *)&v1207[1] = v479;
          *((_QWORD *)&v1207[1] + 1) = &v432[5336 * v431];
          if (v968 == v431)
          {
            if (v343 < 1)
            {
              if (v952 == v978)
                v481 = 1;
              else
                v481 = 2 * v968;
              if (v481 > 0xC4827EA81BA25)
                sub_20E877A38();
              v482 = (char *)operator new(5336 * v481);
              v479 = &v482[5336 * (v481 >> 2)];
              *(_QWORD *)&v1207[0] = v482;
              *((_QWORD *)&v1207[0] + 1) = v479;
              *((_QWORD *)&v1207[1] + 1) = &v482[5336 * v481];
              if (v432)
                operator delete(v432);
              v478 = v968;
            }
            else
            {
              v480 = v968 + 2;
              if (v968 >= -1)
                v480 = v968 + 1;
              v479 -= 5336 * (v480 >> 1);
              *((_QWORD *)&v1207[0] + 1) = v479;
            }
          }
          *(_QWORD *)v479 = v985;
          *(_OWORD *)(v479 + 8) = *(_OWORD *)v1094;
          v479[32] = object[32];
          *((_QWORD *)v479 + 3) = &off_24CA00398;
          memcpy(v479 + 40, &object[40], 0x708uLL);
          *((_QWORD *)v479 + 232) = *(_QWORD *)&object[1856];
          *((_OWORD *)v479 + 115) = *(_OWORD *)&object[1840];
          *((_QWORD *)v479 + 235) = *(_QWORD *)&object[1880];
          *(_OWORD *)(v479 + 1864) = *(_OWORD *)&object[1864];
          v483 = v1209[1];
          *((_OWORD *)v479 + 118) = v1209[0];
          *((_OWORD *)v479 + 119) = v483;
          v484 = v1209[3];
          *((_OWORD *)v479 + 120) = v1209[2];
          v485 = v1209[4];
          v486 = v1209[5];
          *((_QWORD *)v479 + 248) = *(_QWORD *)&v1209[6];
          *((_OWORD *)v479 + 123) = v486;
          *((_OWORD *)v479 + 122) = v485;
          *((_OWORD *)v479 + 121) = v484;
          v487 = *(_OWORD *)((char *)&v1209[7] + 8);
          *(_OWORD *)(v479 + 1992) = *(_OWORD *)((char *)&v1209[6] + 8);
          v488 = *(_OWORD *)((char *)&v1209[8] + 8);
          v489 = *(_OWORD *)((char *)&v1209[9] + 8);
          *((_QWORD *)v479 + 257) = *((_QWORD *)&v1209[10] + 1);
          *(_OWORD *)(v479 + 2040) = v489;
          *(_OWORD *)(v479 + 2024) = v488;
          *(_OWORD *)(v479 + 2008) = v487;
          v490 = v1209[12];
          *((_OWORD *)v479 + 129) = v1209[11];
          v491 = v1209[13];
          v492 = v1209[14];
          *((_QWORD *)v479 + 266) = *(_QWORD *)&v1209[15];
          *((_OWORD *)v479 + 132) = v492;
          *((_OWORD *)v479 + 131) = v491;
          *((_OWORD *)v479 + 130) = v490;
          v493 = *(_OWORD *)((char *)&v1209[16] + 8);
          *(_OWORD *)(v479 + 2136) = *(_OWORD *)((char *)&v1209[15] + 8);
          v494 = *(_OWORD *)((char *)&v1209[17] + 8);
          v495 = *(_OWORD *)((char *)&v1209[18] + 8);
          *((_QWORD *)v479 + 275) = *((_QWORD *)&v1209[19] + 1);
          *(_OWORD *)(v479 + 2184) = v495;
          *(_OWORD *)(v479 + 2168) = v494;
          *(_OWORD *)(v479 + 2152) = v493;
          v496 = v1209[21];
          *((_OWORD *)v479 + 138) = v1209[20];
          v497 = v1209[22];
          v498 = v1209[23];
          *((_QWORD *)v479 + 284) = *(_QWORD *)&v1209[24];
          *((_OWORD *)v479 + 141) = v498;
          *((_OWORD *)v479 + 140) = v497;
          *((_OWORD *)v479 + 139) = v496;
          v499 = *(_OWORD *)((char *)&v1209[25] + 8);
          *(_OWORD *)(v479 + 2280) = *(_OWORD *)((char *)&v1209[24] + 8);
          v500 = *(_OWORD *)((char *)&v1209[26] + 8);
          v501 = *(_OWORD *)((char *)&v1209[27] + 8);
          *((_QWORD *)v479 + 293) = *((_QWORD *)&v1209[28] + 1);
          *(_OWORD *)(v479 + 2328) = v501;
          *(_OWORD *)(v479 + 2312) = v500;
          *(_OWORD *)(v479 + 2296) = v499;
          v502 = v1209[30];
          *((_OWORD *)v479 + 147) = v1209[29];
          v503 = v1209[31];
          v504 = v1209[32];
          *((_QWORD *)v479 + 302) = *(_QWORD *)&v1209[33];
          *((_OWORD *)v479 + 150) = v504;
          *((_OWORD *)v479 + 149) = v503;
          *((_OWORD *)v479 + 148) = v502;
          v505 = *(_OWORD *)((char *)&v1209[34] + 8);
          *(_OWORD *)(v479 + 2424) = *(_OWORD *)((char *)&v1209[33] + 8);
          v506 = *(_OWORD *)((char *)&v1209[35] + 8);
          v507 = *(_OWORD *)((char *)&v1209[36] + 8);
          *((_QWORD *)v479 + 311) = *((_QWORD *)&v1209[37] + 1);
          *(_OWORD *)(v479 + 2472) = v507;
          *(_OWORD *)(v479 + 2456) = v506;
          *(_OWORD *)(v479 + 2440) = v505;
          memcpy(v479 + 2496, &v1209[38], 0x288uLL);
          *(_OWORD *)(v479 + 3144) = *(_OWORD *)((char *)&v1209[78] + 8);
          *((_QWORD *)v479 + 395) = *((_QWORD *)&v1209[79] + 1);
          *((_OWORD *)v479 + 198) = v1209[80];
          *((_QWORD *)v479 + 398) = *(_QWORD *)&v1209[81];
          memcpy(v479 + 3192, (char *)&v1209[81] + 8, 0x708uLL);
          *((_QWORD *)v479 + 626) = *(_QWORD *)&v1209[195];
          *((_OWORD *)v479 + 312) = v1209[194];
          *((_QWORD *)v479 + 627) = *((_QWORD *)&v1209[195] + 1);
          v508 = v1209[197];
          *((_OWORD *)v479 + 314) = v1209[196];
          *((_OWORD *)v479 + 315) = v508;
          v509 = v1209[198];
          v510 = v1209[199];
          v511 = v1209[200];
          *((_OWORD *)v479 + 319) = v1209[201];
          *((_OWORD *)v479 + 318) = v511;
          *((_OWORD *)v479 + 317) = v510;
          *((_OWORD *)v479 + 316) = v509;
          v512 = v1209[202];
          v513 = v1209[203];
          v514 = v1209[204];
          *((_QWORD *)v479 + 646) = *(_QWORD *)&v1209[205];
          *((_OWORD *)v479 + 322) = v514;
          *((_OWORD *)v479 + 321) = v513;
          *((_OWORD *)v479 + 320) = v512;
          v515 = *(_OWORD *)((char *)&v1209[205] + 8);
          v516 = *(_OWORD *)((char *)&v1209[206] + 8);
          v517 = *(_OWORD *)((char *)&v1209[207] + 8);
          *(_OWORD *)(v479 + 5224) = *(_OWORD *)((char *)&v1209[208] + 8);
          *(_OWORD *)(v479 + 5208) = v517;
          *(_OWORD *)(v479 + 5192) = v516;
          *(_OWORD *)(v479 + 5176) = v515;
          v518 = *(_OWORD *)((char *)&v1209[209] + 8);
          v519 = *(_OWORD *)((char *)&v1209[210] + 8);
          v520 = *(_OWORD *)((char *)&v1209[211] + 8);
          *((_QWORD *)v479 + 661) = *((_QWORD *)&v1209[212] + 1);
          *(_OWORD *)(v479 + 5272) = v520;
          *(_OWORD *)(v479 + 5256) = v519;
          *(_OWORD *)(v479 + 5240) = v518;
          v521 = *(_QWORD *)&v1209[213];
          v479[5304] = BYTE8(v1209[213]);
          *((_QWORD *)v479 + 662) = v521;
          *((_OWORD *)v479 + 332) = v1209[214];
          v479[5328] = v1209[215];
          v1209[214] = 0uLL;
          *(_QWORD *)&v1207[1] = v479 + 5336;
          v522 = (_QWORD *)v194[399].i64[1];
          v994 = v479 + 5336;
          if (v522 != v344)
          {
            v523 = 0;
            v524 = &v952[667 * v478];
            v1020 = v524 - 667;
            v1009 = v524 - 1334;
            v1004 = v524 - 663;
            do
            {
              _X25 = &v1009[v523];
              __asm { PRFM            #0, [X25] }
              *(_QWORD *)&v479[v523 * 8 - 5336] = v1020[v523];
              v527 = &v479[v523 * 8 - 5296];
              *((_OWORD *)v527 - 2) = *(_OWORD *)&v1009[v523 + 668];
              v479[v523 * 8 - 5304] = v1004[v523];
              *((_QWORD *)v527 - 2) = &off_24CA00398;
              memcpy(v527, &v1009[v523 + 672], 0x708uLL);
              v528 = &v479[v523 * 8];
              v529 = (uint64_t)&v479[v523 * 8 - 3496];
              v530 = *(_OWORD *)&v1009[v523 + 897];
              *(_QWORD *)(v529 + 16) = v1009[v523 + 899];
              *(_OWORD *)v529 = v530;
              v531 = (uint64_t)&v479[v523 * 8 - 3472];
              v532 = v1009[v523 + 902];
              *(_OWORD *)v531 = *(_OWORD *)&v1009[v523 + 900];
              *(_QWORD *)(v531 + 16) = v532;
              v533 = &v479[v523 * 8 - 3448];
              v534 = *(_OWORD *)&v1009[v523 + 905];
              *(_OWORD *)v533 = *(_OWORD *)&v1009[v523 + 903];
              *((_OWORD *)v533 + 1) = v534;
              v535 = (uint64_t)&v479[v523 * 8 - 3416];
              *(_OWORD *)v535 = *(_OWORD *)&v1009[v523 + 907];
              v537 = *(_OWORD *)&v1009[v523 + 911];
              v536 = *(_OWORD *)&v1009[v523 + 913];
              v538 = *(_OWORD *)&v1009[v523 + 909];
              *(_QWORD *)(v535 + 64) = v1009[v523 + 915];
              *(_OWORD *)(v535 + 32) = v537;
              *(_OWORD *)(v535 + 48) = v536;
              *(_OWORD *)(v535 + 16) = v538;
              v539 = (uint64_t)&v479[v523 * 8 - 3344];
              v540 = *(_OWORD *)&v1009[v523 + 920];
              v541 = *(_OWORD *)&v1009[v523 + 922];
              v542 = *(_OWORD *)&v1009[v523 + 918];
              *(_QWORD *)(v539 + 64) = v1009[v523 + 924];
              *(_OWORD *)(v539 + 32) = v540;
              *(_OWORD *)(v539 + 48) = v541;
              *(_OWORD *)(v539 + 16) = v542;
              *(_OWORD *)v539 = *(_OWORD *)&v1009[v523 + 916];
              v543 = (uint64_t)&v479[v523 * 8 - 3272];
              v544 = *(_OWORD *)&v1009[v523 + 927];
              v545 = *(_OWORD *)&v1009[v523 + 929];
              v546 = *(_OWORD *)&v1009[v523 + 931];
              *(_QWORD *)(v543 + 64) = v1009[v523 + 933];
              *(_OWORD *)(v543 + 32) = v545;
              *(_OWORD *)(v543 + 48) = v546;
              *(_OWORD *)(v543 + 16) = v544;
              *(_OWORD *)v543 = *(_OWORD *)&v1009[v523 + 925];
              v547 = (uint64_t)&v479[v523 * 8 - 3200];
              v548 = *(_OWORD *)&v1009[v523 + 936];
              v549 = *(_OWORD *)&v1009[v523 + 938];
              v550 = *(_OWORD *)&v1009[v523 + 940];
              *(_QWORD *)(v547 + 64) = v1009[v523 + 942];
              *(_OWORD *)(v547 + 32) = v549;
              *(_OWORD *)(v547 + 48) = v550;
              *(_OWORD *)(v547 + 16) = v548;
              *(_OWORD *)v547 = *(_OWORD *)&v1009[v523 + 934];
              v551 = (uint64_t)&v479[v523 * 8 - 3128];
              v552 = *(_OWORD *)&v1009[v523 + 945];
              v553 = *(_OWORD *)&v1009[v523 + 947];
              v554 = *(_OWORD *)&v1009[v523 + 949];
              *(_QWORD *)(v551 + 64) = v1009[v523 + 951];
              *(_OWORD *)(v551 + 32) = v553;
              *(_OWORD *)(v551 + 48) = v554;
              *(_OWORD *)(v551 + 16) = v552;
              *(_OWORD *)v551 = *(_OWORD *)&v1009[v523 + 943];
              v555 = (uint64_t)&v479[v523 * 8 - 3056];
              v556 = *(_OWORD *)&v1009[v523 + 954];
              v557 = *(_OWORD *)&v1009[v523 + 956];
              v558 = *(_OWORD *)&v1009[v523 + 958];
              *(_QWORD *)(v555 + 64) = v1009[v523 + 960];
              *(_OWORD *)(v555 + 32) = v557;
              *(_OWORD *)(v555 + 48) = v558;
              *(_OWORD *)(v555 + 16) = v556;
              *(_OWORD *)v555 = *(_OWORD *)&v1009[v523 + 952];
              v559 = (uint64_t)&v479[v523 * 8 - 2984];
              v560 = *(_OWORD *)&v1009[v523 + 963];
              v561 = *(_OWORD *)&v1009[v523 + 965];
              v562 = *(_OWORD *)&v1009[v523 + 967];
              *(_QWORD *)(v559 + 64) = v1009[v523 + 969];
              *(_OWORD *)(v559 + 32) = v561;
              *(_OWORD *)(v559 + 48) = v562;
              *(_OWORD *)(v559 + 16) = v560;
              *(_OWORD *)v559 = *(_OWORD *)&v1009[v523 + 961];
              v563 = (uint64_t)&v479[v523 * 8 - 2912];
              v564 = *(_OWORD *)&v1009[v523 + 972];
              v565 = *(_OWORD *)&v1009[v523 + 974];
              v566 = *(_OWORD *)&v1009[v523 + 976];
              *(_QWORD *)(v563 + 64) = v1009[v523 + 978];
              *(_OWORD *)(v563 + 32) = v565;
              *(_OWORD *)(v563 + 48) = v566;
              *(_OWORD *)(v563 + 16) = v564;
              *(_OWORD *)v563 = *(_OWORD *)&v1009[v523 + 970];
              memcpy(&v479[v523 * 8 - 2840], &v1009[v523 + 979], 0x288uLL);
              v567 = (uint64_t)&v479[v523 * 8 - 2192];
              v568 = *(_OWORD *)&v1009[v523 + 1060];
              *(_QWORD *)(v567 + 16) = v1009[v523 + 1062];
              *(_OWORD *)v567 = v568;
              v569 = (uint64_t)&v479[v523 * 8 - 2168];
              v570 = v1009[v523 + 1065];
              *(_OWORD *)v569 = *(_OWORD *)&v1009[v523 + 1063];
              *(_QWORD *)(v569 + 16) = v570;
              memcpy(&v479[v523 * 8 - 2144], &v1009[v523 + 1066], 0x708uLL);
              v571 = (uint64_t)&v479[v523 * 8 - 344];
              v572 = *(_OWORD *)&v1009[v523 + 1291];
              *(_QWORD *)(v571 + 16) = v1009[v523 + 1293];
              *(_OWORD *)v571 = v572;
              v573 = &v344[v523];
              __asm { PRFM            #0, [X25,#0x1398] }
              v575 = &v479[v523 * 8 - 312];
              *((_QWORD *)v528 - 40) = v344[v523 - 40];
              v576 = *(_OWORD *)&v1009[v523 + 1297];
              v577 = &v479[v523 * 8 - 280];
              *(_OWORD *)v575 = *(_OWORD *)&v1009[v523 + 1295];
              *((_OWORD *)v575 + 1) = v576;
              v579 = *(_OWORD *)&v1009[v523 + 1309];
              v578 = *(_OWORD *)&v1009[v523 + 1311];
              v580 = v1009[v523 + 1313];
              *(_OWORD *)(v528 - 216) = *(_OWORD *)&v1009[v523 + 1307];
              *((_QWORD *)v528 - 21) = v580;
              *(_OWORD *)(v528 - 184) = v578;
              *(_OWORD *)(v528 - 200) = v579;
              v581 = *(_OWORD *)&v1009[v523 + 1299];
              v582 = *(_OWORD *)&v1009[v523 + 1301];
              v583 = *(_OWORD *)&v1009[v523 + 1303];
              *(_OWORD *)(v528 - 232) = *(_OWORD *)&v1009[v523 + 1305];
              *(_OWORD *)(v528 - 248) = v583;
              *(_OWORD *)v577 = v581;
              *((_OWORD *)v577 + 1) = v582;
              v584 = *(_OWORD *)&v1009[v523 + 1324];
              v585 = *(_OWORD *)&v1009[v523 + 1326];
              v586 = *(_OWORD *)&v1009[v523 + 1322];
              *((_QWORD *)v528 - 6) = v1009[v523 + 1328];
              *((_OWORD *)v528 - 5) = v584;
              *((_OWORD *)v528 - 4) = v585;
              *((_OWORD *)v528 - 6) = v586;
              v587 = *(_OWORD *)&v1009[v523 + 1314];
              v588 = *(_OWORD *)&v1009[v523 + 1316];
              v589 = *(_OWORD *)&v1009[v523 + 1320];
              *((_OWORD *)v528 - 8) = *(_OWORD *)&v1009[v523 + 1318];
              *((_OWORD *)v528 - 7) = v589;
              *((_OWORD *)v528 - 10) = v587;
              *((_OWORD *)v528 - 9) = v588;
              v590 = v1009[v523 + 1329];
              *(v528 - 32) = v1009[v523 + 1330];
              *((_QWORD *)v528 - 5) = v590;
              __asm { PRFM            #0, [X25,#0x14C0] }
              *(_OWORD *)(v528 - 24) = *(_OWORD *)&v344[v523 - 3];
              *(v573 - 3) = 0;
              *(v573 - 2) = 0;
              *(v528 - 8) = v344[v523 - 1];
              v523 -= 667;
            }
            while (&v344[v523] != v522);
            v479 += v523 * 8;
            v194 = v11;
          }
          v592 = (_QWORD *)v194[400].i64[0];
          if (v592 == v344)
          {
            v646 = (uint64_t)v994;
          }
          else
          {
            v593 = 0;
            v594 = &v952[667 * v968];
            v1021 = v594 + 666;
            v1010 = v594 + 664;
            do
            {
              v595 = &v994[v593 * 8];
              _X28 = &v344[v593];
              __asm { PRFM            #0, [X28,#0x29B0] }
              *(_QWORD *)v595 = v344[v593];
              *(_OWORD *)(v595 + 8) = *(_OWORD *)&v344[v593 + 1];
              v595[32] = v344[v593 + 4];
              *((_QWORD *)v595 + 3) = &off_24CA00398;
              memcpy(&v994[v593 * 8 + 40], &v344[v593 + 5], 0x708uLL);
              v598 = *(_OWORD *)&v344[v593 + 230];
              *((_QWORD *)v595 + 232) = v344[v593 + 232];
              *((_OWORD *)v595 + 115) = v598;
              v599 = v344[v593 + 235];
              *(_OWORD *)(v595 + 1864) = *(_OWORD *)&v344[v593 + 233];
              *((_QWORD *)v595 + 235) = v599;
              v600 = *(_OWORD *)&v344[v593 + 238];
              *((_OWORD *)v595 + 118) = *(_OWORD *)&v344[v593 + 236];
              *((_OWORD *)v595 + 119) = v600;
              *((_OWORD *)v595 + 120) = *(_OWORD *)&v344[v593 + 240];
              v601 = *(_OWORD *)&v344[v593 + 244];
              v602 = *(_OWORD *)&v344[v593 + 246];
              v603 = v344[v593 + 248];
              *((_OWORD *)v595 + 121) = *(_OWORD *)&v344[v593 + 242];
              *((_QWORD *)v595 + 248) = v603;
              *((_OWORD *)v595 + 123) = v602;
              *((_OWORD *)v595 + 122) = v601;
              v605 = *(_OWORD *)&v344[v593 + 253];
              v604 = *(_OWORD *)&v344[v593 + 255];
              v606 = *(_OWORD *)&v344[v593 + 251];
              *((_QWORD *)v595 + 257) = v344[v593 + 257];
              *(_OWORD *)(v595 + 2024) = v605;
              *(_OWORD *)(v595 + 2040) = v604;
              *(_OWORD *)(v595 + 2008) = v606;
              *(_OWORD *)(v595 + 1992) = *(_OWORD *)&v344[v593 + 249];
              v607 = *(_OWORD *)&v344[v593 + 260];
              v608 = *(_OWORD *)&v344[v593 + 262];
              v609 = *(_OWORD *)&v344[v593 + 264];
              *((_QWORD *)v595 + 266) = v344[v593 + 266];
              *((_OWORD *)v595 + 132) = v609;
              *((_OWORD *)v595 + 131) = v608;
              *((_OWORD *)v595 + 130) = v607;
              *((_OWORD *)v595 + 129) = *(_OWORD *)&v344[v593 + 258];
              v610 = *(_OWORD *)&v344[v593 + 269];
              v611 = *(_OWORD *)&v344[v593 + 271];
              v612 = *(_OWORD *)&v344[v593 + 273];
              *((_QWORD *)v595 + 275) = v344[v593 + 275];
              *(_OWORD *)(v595 + 2168) = v611;
              *(_OWORD *)(v595 + 2184) = v612;
              *(_OWORD *)(v595 + 2152) = v610;
              *(_OWORD *)(v595 + 2136) = *(_OWORD *)&v344[v593 + 267];
              v613 = *(_OWORD *)&v344[v593 + 278];
              v614 = *(_OWORD *)&v344[v593 + 280];
              v615 = *(_OWORD *)&v344[v593 + 282];
              *((_QWORD *)v595 + 284) = v344[v593 + 284];
              *((_OWORD *)v595 + 141) = v615;
              *((_OWORD *)v595 + 140) = v614;
              *((_OWORD *)v595 + 139) = v613;
              *((_OWORD *)v595 + 138) = *(_OWORD *)&v344[v593 + 276];
              v616 = *(_OWORD *)&v344[v593 + 287];
              v617 = *(_OWORD *)&v344[v593 + 289];
              v618 = *(_OWORD *)&v344[v593 + 291];
              *((_QWORD *)v595 + 293) = v344[v593 + 293];
              *(_OWORD *)(v595 + 2312) = v617;
              *(_OWORD *)(v595 + 2328) = v618;
              *(_OWORD *)(v595 + 2296) = v616;
              *(_OWORD *)(v595 + 2280) = *(_OWORD *)&v344[v593 + 285];
              v619 = *(_OWORD *)&v344[v593 + 296];
              v620 = *(_OWORD *)&v344[v593 + 298];
              v621 = *(_OWORD *)&v344[v593 + 300];
              *((_QWORD *)v595 + 302) = v344[v593 + 302];
              *((_OWORD *)v595 + 150) = v621;
              *((_OWORD *)v595 + 149) = v620;
              *((_OWORD *)v595 + 148) = v619;
              *((_OWORD *)v595 + 147) = *(_OWORD *)&v344[v593 + 294];
              v622 = *(_OWORD *)&v344[v593 + 305];
              v623 = *(_OWORD *)&v344[v593 + 307];
              v624 = *(_OWORD *)&v344[v593 + 309];
              *((_QWORD *)v595 + 311) = v344[v593 + 311];
              *(_OWORD *)(v595 + 2456) = v623;
              *(_OWORD *)(v595 + 2472) = v624;
              *(_OWORD *)(v595 + 2440) = v622;
              *(_OWORD *)(v595 + 2424) = *(_OWORD *)&v344[v593 + 303];
              memcpy(&v994[v593 * 8 + 2496], &v344[v593 + 312], 0x288uLL);
              v625 = *(_OWORD *)&v344[v593 + 393];
              *((_QWORD *)v595 + 395) = v344[v593 + 395];
              *(_OWORD *)(v595 + 3144) = v625;
              v626 = v344[v593 + 398];
              *((_OWORD *)v595 + 198) = *(_OWORD *)&v344[v593 + 396];
              *((_QWORD *)v595 + 398) = v626;
              memcpy(&v994[v593 * 8 + 3192], &v344[v593 + 399], 0x708uLL);
              v627 = v344[v593 + 626];
              *((_OWORD *)v595 + 312) = *(_OWORD *)&v344[v593 + 624];
              *((_QWORD *)v595 + 626) = v627;
              __asm { PRFM            #0, [X28,#0x3D48] }
              *((_QWORD *)v595 + 627) = v344[v593 + 627];
              v629 = *(_OWORD *)&v344[v593 + 628];
              *((_OWORD *)v595 + 315) = *(_OWORD *)&v344[v593 + 630];
              *((_OWORD *)v595 + 314) = v629;
              v630 = *(_OWORD *)&v344[v593 + 642];
              v631 = *(_OWORD *)&v344[v593 + 644];
              v632 = v344[v593 + 646];
              *((_OWORD *)v595 + 320) = *(_OWORD *)&v344[v593 + 640];
              *((_QWORD *)v595 + 646) = v632;
              *((_OWORD *)v595 + 322) = v631;
              *((_OWORD *)v595 + 321) = v630;
              v633 = *(_OWORD *)&v344[v593 + 632];
              v634 = *(_OWORD *)&v344[v593 + 634];
              v635 = *(_OWORD *)&v344[v593 + 636];
              *((_OWORD *)v595 + 319) = *(_OWORD *)&v344[v593 + 638];
              *((_OWORD *)v595 + 318) = v635;
              *((_OWORD *)v595 + 317) = v634;
              *((_OWORD *)v595 + 316) = v633;
              v637 = *(_OWORD *)&v344[v593 + 657];
              v636 = *(_OWORD *)&v344[v593 + 659];
              v638 = *(_OWORD *)&v344[v593 + 655];
              *((_QWORD *)v595 + 661) = v344[v593 + 661];
              *(_OWORD *)(v595 + 5256) = v637;
              *(_OWORD *)(v595 + 5272) = v636;
              *(_OWORD *)(v595 + 5240) = v638;
              v639 = *(_OWORD *)&v344[v593 + 647];
              v640 = *(_OWORD *)&v344[v593 + 649];
              v641 = *(_OWORD *)&v344[v593 + 653];
              *(_OWORD *)(v595 + 5208) = *(_OWORD *)&v344[v593 + 651];
              *(_OWORD *)(v595 + 5224) = v641;
              *(_OWORD *)(v595 + 5176) = v639;
              *(_OWORD *)(v595 + 5192) = v640;
              v642 = v344[v593 + 662];
              v595[5304] = v344[v593 + 663];
              v643 = &v1010[v593];
              *((_QWORD *)v595 + 662) = v642;
              __asm { PRFM            #0, [X28,#0x3E70] }
              *((_OWORD *)v595 + 332) = *(_OWORD *)&v1010[v593];
              v645 = v1021[v593];
              *v643 = 0;
              v643[1] = 0;
              v595[5328] = v645;
              v593 += 667;
            }
            while (&v344[v593] != v592);
            v194 = v1013;
            v344 = (_QWORD *)v1013[400].i64[0];
            v646 = (uint64_t)&v994[v593 * 8];
          }
          v647 = (_QWORD *)v194[399].i64[1];
          v194[399].i64[1] = (uint64_t)v479;
          v194[400].i64[0] = v646;
          v648 = v194[400].i64[1];
          v194[400].i64[1] = *((_QWORD *)&v1207[1] + 1);
          *((_QWORD *)&v1207[1] + 1) = v648;
          *((_QWORD *)&v1207[0] + 1) = v647;
          *(_QWORD *)&v1207[0] = v647;
          if (v344 != v647)
          {
            do
            {
              *(_QWORD *)&v1207[1] = v344 - 667;
              v649 = (std::__shared_weak_count *)*(v344 - 2);
              if (v649)
              {
                v650 = (unint64_t *)&v649->__shared_owners_;
                do
                  v651 = __ldaxr(v650);
                while (__stlxr(v651 - 1, v650));
                if (!v651)
                {
                  ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                  std::__shared_weak_count::__release_weak(v649);
                }
              }
              v344 = *(_QWORD **)&v1207[1];
            }
            while (*(_QWORD **)&v1207[1] != v647);
            v344 = *(_QWORD **)&v1207[0];
          }
          v234 = v1025;
          if (v344)
            operator delete(v344);
        }
        else
        {
          v949 = v231;
          v951 = v1096[5288];
          v979 = *(_QWORD *)&v1096[4976];
          if (v344 == v233)
          {
            *v233 = v985;
            v433 = v342 + 5336 * v968;
            *(_OWORD *)(v433 + 8) = *(_OWORD *)&object[8];
            *(_BYTE *)(v433 + 32) = object[32];
            *(_QWORD *)(v433 + 24) = &off_24CA00398;
            v434 = v233;
            memcpy((void *)(v433 + 40), &object[40], 0x708uLL);
            v435 = *(_OWORD *)&object[1840];
            *(_QWORD *)(v433 + 1856) = *(_QWORD *)&object[1856];
            *(_OWORD *)(v433 + 1840) = v435;
            v436 = *(_QWORD *)&object[1880];
            *(_OWORD *)(v433 + 1864) = *(_OWORD *)&object[1864];
            *(_QWORD *)(v433 + 1880) = v436;
            v437 = v1209[1];
            *(_OWORD *)(v433 + 1888) = v1209[0];
            *(_OWORD *)(v433 + 1904) = v437;
            *(_OWORD *)(v433 + 1920) = v1209[2];
            v439 = v1209[4];
            v438 = v1209[5];
            v440 = *(_QWORD *)&v1209[6];
            *(_OWORD *)(v433 + 1936) = v1209[3];
            *(_QWORD *)(v433 + 1984) = v440;
            *(_OWORD *)(v433 + 1968) = v438;
            *(_OWORD *)(v433 + 1952) = v439;
            v442 = *(_OWORD *)((char *)&v1209[8] + 8);
            v441 = *(_OWORD *)((char *)&v1209[9] + 8);
            v443 = *(_OWORD *)((char *)&v1209[7] + 8);
            *(_QWORD *)(v433 + 2056) = *((_QWORD *)&v1209[10] + 1);
            *(_OWORD *)(v433 + 2008) = v443;
            *(_OWORD *)(v433 + 2040) = v441;
            *(_OWORD *)(v433 + 2024) = v442;
            *(_OWORD *)(v433 + 1992) = *(_OWORD *)((char *)&v1209[6] + 8);
            v444 = v1209[12];
            v445 = v1209[13];
            v446 = v1209[14];
            *(_QWORD *)(v433 + 2128) = *(_QWORD *)&v1209[15];
            *(_OWORD *)(v433 + 2112) = v446;
            *(_OWORD *)(v433 + 2096) = v445;
            *(_OWORD *)(v433 + 2080) = v444;
            *(_OWORD *)(v433 + 2064) = v1209[11];
            v447 = *(_OWORD *)((char *)&v1209[16] + 8);
            v448 = *(_OWORD *)((char *)&v1209[17] + 8);
            v449 = *(_OWORD *)((char *)&v1209[18] + 8);
            *(_QWORD *)(v433 + 2200) = *((_QWORD *)&v1209[19] + 1);
            *(_OWORD *)(v433 + 2184) = v449;
            *(_OWORD *)(v433 + 2168) = v448;
            *(_OWORD *)(v433 + 2152) = v447;
            *(_OWORD *)(v433 + 2136) = *(_OWORD *)((char *)&v1209[15] + 8);
            v450 = v1209[21];
            v451 = v1209[22];
            v452 = v1209[23];
            *(_QWORD *)(v433 + 2272) = *(_QWORD *)&v1209[24];
            *(_OWORD *)(v433 + 2256) = v452;
            *(_OWORD *)(v433 + 2240) = v451;
            *(_OWORD *)(v433 + 2224) = v450;
            *(_OWORD *)(v433 + 2208) = v1209[20];
            v453 = *(_OWORD *)((char *)&v1209[25] + 8);
            v454 = *(_OWORD *)((char *)&v1209[26] + 8);
            v455 = *(_OWORD *)((char *)&v1209[27] + 8);
            *(_QWORD *)(v433 + 2344) = *((_QWORD *)&v1209[28] + 1);
            *(_OWORD *)(v433 + 2328) = v455;
            *(_OWORD *)(v433 + 2312) = v454;
            *(_OWORD *)(v433 + 2296) = v453;
            *(_OWORD *)(v433 + 2280) = *(_OWORD *)((char *)&v1209[24] + 8);
            v456 = v1209[30];
            v457 = v1209[31];
            v458 = v1209[32];
            *(_QWORD *)(v433 + 2416) = *(_QWORD *)&v1209[33];
            *(_OWORD *)(v433 + 2400) = v458;
            *(_OWORD *)(v433 + 2384) = v457;
            *(_OWORD *)(v433 + 2368) = v456;
            *(_OWORD *)(v433 + 2352) = v1209[29];
            v459 = *(_OWORD *)((char *)&v1209[34] + 8);
            v460 = *(_OWORD *)((char *)&v1209[35] + 8);
            v461 = *(_OWORD *)((char *)&v1209[36] + 8);
            *(_QWORD *)(v433 + 2488) = *((_QWORD *)&v1209[37] + 1);
            *(_OWORD *)(v433 + 2472) = v461;
            *(_OWORD *)(v433 + 2456) = v460;
            *(_OWORD *)(v433 + 2440) = v459;
            *(_OWORD *)(v433 + 2424) = *(_OWORD *)((char *)&v1209[33] + 8);
            memcpy((void *)(v433 + 2496), &v1209[38], 0x288uLL);
            v462 = *(_OWORD *)((char *)&v1209[78] + 8);
            *(_QWORD *)(v433 + 3160) = *((_QWORD *)&v1209[79] + 1);
            *(_OWORD *)(v433 + 3144) = v462;
            v463 = *(_QWORD *)&v1209[81];
            *(_OWORD *)(v433 + 3168) = v1209[80];
            *(_QWORD *)(v433 + 3184) = v463;
            memcpy((void *)(v433 + 3192), (char *)&v1209[81] + 8, 0x708uLL);
            v464 = v1209[194];
            *(_QWORD *)(v433 + 5008) = *(_QWORD *)&v1209[195];
            *(_OWORD *)(v433 + 4992) = v464;
            *(_QWORD *)(v433 + 5016) = *((_QWORD *)&v1209[195] + 1);
            v465 = v1209[196];
            *(_OWORD *)(v433 + 5040) = v1209[197];
            *(_OWORD *)(v433 + 5024) = v465;
            v466 = v1209[200];
            v467 = v1209[201];
            v468 = v1209[199];
            *(_OWORD *)(v433 + 5056) = v1209[198];
            *(_OWORD *)(v433 + 5104) = v467;
            *(_OWORD *)(v433 + 5088) = v466;
            *(_OWORD *)(v433 + 5072) = v468;
            v470 = v1209[203];
            v469 = v1209[204];
            v471 = *(_QWORD *)&v1209[205];
            *(_OWORD *)(v433 + 5120) = v1209[202];
            *(_QWORD *)(v433 + 5168) = v471;
            *(_OWORD *)(v433 + 5152) = v469;
            *(_OWORD *)(v433 + 5136) = v470;
            v472 = *(_OWORD *)((char *)&v1209[207] + 8);
            v473 = *(_OWORD *)((char *)&v1209[208] + 8);
            v474 = *(_OWORD *)((char *)&v1209[206] + 8);
            *(_OWORD *)(v433 + 5176) = *(_OWORD *)((char *)&v1209[205] + 8);
            *(_OWORD *)(v433 + 5224) = v473;
            *(_OWORD *)(v433 + 5208) = v472;
            *(_OWORD *)(v433 + 5192) = v474;
            v476 = *(_OWORD *)((char *)&v1209[210] + 8);
            v475 = *(_OWORD *)((char *)&v1209[211] + 8);
            v477 = *((_QWORD *)&v1209[212] + 1);
            *(_OWORD *)(v433 + 5240) = *(_OWORD *)((char *)&v1209[209] + 8);
            *(_QWORD *)(v433 + 5288) = v477;
            *(_OWORD *)(v433 + 5272) = v475;
            *(_OWORD *)(v433 + 5256) = v476;
            LOBYTE(v477) = BYTE8(v1209[213]);
            *(_QWORD *)(v433 + 5296) = *(_QWORD *)&v1209[213];
            *(_BYTE *)(v433 + 5304) = v477;
            *(_OWORD *)(v433 + 5312) = v1209[214];
            v1209[214] = 0uLL;
            *(_BYTE *)(v433 + 5328) = v1209[215];
            v194[400].i64[0] = (uint64_t)(v434 + 667);
            v234 = v11 + 425;
          }
          else
          {
            v346 = v194[399].i64[1];
            v1045 = *(_OWORD *)v1094;
            v1019 = v194[400].u64[0];
            memcpy((char *)v1207 + 7, v1096, 0x708uLL);
            v1043 = *(_OWORD *)&v1096[1800];
            v1044 = *(_QWORD *)&v1096[1816];
            v1041 = *(_OWORD *)&v1096[1824];
            v1042 = *(_QWORD *)&v1096[1840];
            v1039 = *(_OWORD *)&v1096[1848];
            v1040 = *(_OWORD *)&v1096[1864];
            v1206 = *(_QWORD *)&v1096[1944];
            v1205 = *(_OWORD *)&v1096[1928];
            v1204 = *(_OWORD *)&v1096[1912];
            v1203 = *(_OWORD *)&v1096[1896];
            v1202 = *(_OWORD *)&v1096[1880];
            v1201 = *(_QWORD *)&v1096[2016];
            v1200 = *(_OWORD *)&v1096[2000];
            v1199 = *(_OWORD *)&v1096[1984];
            v1197 = *(_OWORD *)&v1096[1952];
            v1198 = *(_OWORD *)&v1096[1968];
            v1196 = *(_QWORD *)&v1096[2088];
            v1195 = *(_OWORD *)&v1096[2072];
            v1194 = *(_OWORD *)&v1096[2056];
            v1192 = *(_OWORD *)&v1096[2024];
            v1193 = *(_OWORD *)&v1096[2040];
            v1191 = *(_QWORD *)&v1096[2160];
            v1190 = *(_OWORD *)&v1096[2144];
            v1189 = *(_OWORD *)&v1096[2128];
            v1187 = *(_OWORD *)&v1096[2096];
            v1188 = *(_OWORD *)&v1096[2112];
            v1186 = *(_QWORD *)&v1096[2232];
            v1185 = *(_OWORD *)&v1096[2216];
            v1184 = *(_OWORD *)&v1096[2200];
            v1182 = *(_OWORD *)&v1096[2168];
            v1183 = *(_OWORD *)&v1096[2184];
            v1181 = *(_QWORD *)&v1096[2304];
            v1180 = *(_OWORD *)&v1096[2288];
            v1179 = *(_OWORD *)&v1096[2272];
            v1177 = *(_OWORD *)&v1096[2240];
            v1178 = *(_OWORD *)&v1096[2256];
            v1176 = *(_QWORD *)&v1096[2376];
            v1175 = *(_OWORD *)&v1096[2360];
            v1174 = *(_OWORD *)&v1096[2344];
            v1172 = *(_OWORD *)&v1096[2312];
            v1173 = *(_OWORD *)&v1096[2328];
            v1171 = *(_QWORD *)&v1096[2448];
            v1170 = *(_OWORD *)&v1096[2432];
            v1169 = *(_OWORD *)&v1096[2416];
            v1167 = *(_OWORD *)&v1096[2384];
            v1168 = *(_OWORD *)&v1096[2400];
            memcpy(v1166, &v1096[2456], sizeof(v1166));
            v1037 = *(_OWORD *)&v1096[3104];
            v1038 = *(_QWORD *)&v1096[3120];
            v1035 = *(_OWORD *)&v1096[3128];
            v1036 = *(_QWORD *)&v1096[3144];
            memcpy(v1165, &v1096[3152], sizeof(v1165));
            v347 = v1019;
            v1033 = *(_OWORD *)&v1096[4952];
            v1034 = *(_QWORD *)&v1096[4968];
            v998 = v1209[196];
            v993 = v1209[197];
            v1161 = *(_OWORD *)&v1096[5080];
            v1162 = *(_OWORD *)&v1096[5096];
            v1163 = *(_OWORD *)&v1096[5112];
            v1164 = *(_QWORD *)&v1096[5128];
            v1157 = *(_OWORD *)&v1096[5016];
            v1158 = *(_OWORD *)&v1096[5032];
            v1159 = *(_OWORD *)&v1096[5048];
            v1160 = *(_OWORD *)&v1096[5064];
            v1152 = *(_OWORD *)&v1096[5184];
            v1151 = *(_OWORD *)&v1096[5168];
            v1150 = *(_OWORD *)&v1096[5152];
            v1149 = *(_OWORD *)&v1096[5136];
            v1156 = *(_QWORD *)&v1096[5248];
            v1155 = *(_OWORD *)&v1096[5232];
            v1154 = *(_OWORD *)&v1096[5216];
            v1153 = *(_OWORD *)&v1096[5200];
            v348 = v344 + 667;
            v1032 = v1096[5264];
            v1031 = *(_QWORD *)&v1096[5256];
            v349 = 0x4515E08719B71393 * ((uint64_t)(v1019 - (_QWORD)(v344 + 667)) >> 3);
            v350 = v1019 - 5336;
            v351 = v1019;
            v1209[214] = 0uLL;
            if (v1019 - 5336 < v1019)
            {
              v352 = 0;
              v353 = 5336 * v968 + 8 * ((uint64_t)(v1019 - (_QWORD)(v344 + 667)) >> 3) + v346;
              v1008 = v353 + 5328;
              v1003 = v353 + 5312;
              do
              {
                v354 = v347 + v352;
                _X23 = v350 + v352;
                __asm { PRFM            #0, [X23,#0x29B0] }
                *(_QWORD *)v354 = *(_QWORD *)(v350 + v352);
                *(_OWORD *)(v354 + 8) = *(_OWORD *)(v350 + v352 + 8);
                *(_BYTE *)(v354 + 32) = *(_BYTE *)(v350 + v352 + 32);
                *(_QWORD *)(v354 + 24) = &off_24CA00398;
                memcpy((void *)(v347 + v352 + 40), (const void *)(v350 + v352 + 40), 0x708uLL);
                v357 = *(_OWORD *)(v350 + v352 + 1840);
                *(_QWORD *)(v354 + 1856) = *(_QWORD *)(v350 + v352 + 1856);
                *(_OWORD *)(v354 + 1840) = v357;
                v358 = *(_QWORD *)(v350 + v352 + 1880);
                *(_OWORD *)(v354 + 1864) = *(_OWORD *)(v350 + v352 + 1864);
                *(_QWORD *)(v354 + 1880) = v358;
                v359 = *(_OWORD *)(v350 + v352 + 1904);
                *(_OWORD *)(v354 + 1888) = *(_OWORD *)(v350 + v352 + 1888);
                *(_OWORD *)(v354 + 1904) = v359;
                *(_OWORD *)(v354 + 1920) = *(_OWORD *)(v350 + v352 + 1920);
                v360 = *(_OWORD *)(v350 + v352 + 1952);
                v361 = *(_OWORD *)(v350 + v352 + 1968);
                v362 = *(_QWORD *)(v350 + v352 + 1984);
                *(_OWORD *)(v354 + 1936) = *(_OWORD *)(v350 + v352 + 1936);
                *(_QWORD *)(v354 + 1984) = v362;
                *(_OWORD *)(v354 + 1968) = v361;
                *(_OWORD *)(v354 + 1952) = v360;
                v364 = *(_OWORD *)(v350 + v352 + 2024);
                v363 = *(_OWORD *)(v350 + v352 + 2040);
                v365 = *(_OWORD *)(v350 + v352 + 2008);
                *(_QWORD *)(v354 + 2056) = *(_QWORD *)(v350 + v352 + 2056);
                *(_OWORD *)(v354 + 2024) = v364;
                *(_OWORD *)(v354 + 2040) = v363;
                *(_OWORD *)(v354 + 2008) = v365;
                *(_OWORD *)(v354 + 1992) = *(_OWORD *)(v350 + v352 + 1992);
                v366 = *(_OWORD *)(v350 + v352 + 2080);
                v367 = *(_OWORD *)(v350 + v352 + 2096);
                v368 = *(_OWORD *)(v350 + v352 + 2112);
                *(_QWORD *)(v354 + 2128) = *(_QWORD *)(v350 + v352 + 2128);
                *(_OWORD *)(v354 + 2112) = v368;
                *(_OWORD *)(v354 + 2096) = v367;
                *(_OWORD *)(v354 + 2080) = v366;
                *(_OWORD *)(v354 + 2064) = *(_OWORD *)(v350 + v352 + 2064);
                v369 = *(_OWORD *)(v350 + v352 + 2152);
                v370 = *(_OWORD *)(v350 + v352 + 2168);
                v371 = *(_OWORD *)(v350 + v352 + 2184);
                *(_QWORD *)(v354 + 2200) = *(_QWORD *)(v350 + v352 + 2200);
                *(_OWORD *)(v354 + 2168) = v370;
                *(_OWORD *)(v354 + 2184) = v371;
                *(_OWORD *)(v354 + 2152) = v369;
                *(_OWORD *)(v354 + 2136) = *(_OWORD *)(v350 + v352 + 2136);
                v372 = *(_OWORD *)(v350 + v352 + 2224);
                v373 = *(_OWORD *)(v350 + v352 + 2240);
                v374 = *(_OWORD *)(v350 + v352 + 2256);
                *(_QWORD *)(v354 + 2272) = *(_QWORD *)(v350 + v352 + 2272);
                *(_OWORD *)(v354 + 2256) = v374;
                *(_OWORD *)(v354 + 2240) = v373;
                *(_OWORD *)(v354 + 2224) = v372;
                *(_OWORD *)(v354 + 2208) = *(_OWORD *)(v350 + v352 + 2208);
                v375 = *(_OWORD *)(v350 + v352 + 2296);
                v376 = *(_OWORD *)(v350 + v352 + 2312);
                v377 = *(_OWORD *)(v350 + v352 + 2328);
                *(_QWORD *)(v354 + 2344) = *(_QWORD *)(v350 + v352 + 2344);
                *(_OWORD *)(v354 + 2312) = v376;
                *(_OWORD *)(v354 + 2328) = v377;
                *(_OWORD *)(v354 + 2296) = v375;
                *(_OWORD *)(v354 + 2280) = *(_OWORD *)(v350 + v352 + 2280);
                v378 = *(_OWORD *)(v350 + v352 + 2368);
                v379 = *(_OWORD *)(v350 + v352 + 2384);
                v380 = *(_OWORD *)(v350 + v352 + 2400);
                *(_QWORD *)(v354 + 2416) = *(_QWORD *)(v350 + v352 + 2416);
                *(_OWORD *)(v354 + 2400) = v380;
                *(_OWORD *)(v354 + 2384) = v379;
                *(_OWORD *)(v354 + 2368) = v378;
                *(_OWORD *)(v354 + 2352) = *(_OWORD *)(v350 + v352 + 2352);
                v381 = *(_OWORD *)(v350 + v352 + 2440);
                v382 = *(_OWORD *)(v350 + v352 + 2456);
                v383 = *(_OWORD *)(v350 + v352 + 2472);
                *(_QWORD *)(v354 + 2488) = *(_QWORD *)(v350 + v352 + 2488);
                *(_OWORD *)(v354 + 2456) = v382;
                *(_OWORD *)(v354 + 2472) = v383;
                *(_OWORD *)(v354 + 2440) = v381;
                *(_OWORD *)(v354 + 2424) = *(_OWORD *)(v350 + v352 + 2424);
                memcpy((void *)(v354 + 2496), (const void *)(v350 + v352 + 2496), 0x288uLL);
                v384 = *(_OWORD *)(v350 + v352 + 3144);
                *(_QWORD *)(v354 + 3160) = *(_QWORD *)(v350 + v352 + 3160);
                *(_OWORD *)(v354 + 3144) = v384;
                v385 = *(_QWORD *)(v350 + v352 + 3184);
                *(_OWORD *)(v354 + 3168) = *(_OWORD *)(v350 + v352 + 3168);
                *(_QWORD *)(v354 + 3184) = v385;
                memcpy((void *)(v354 + 3192), (const void *)(v350 + v352 + 3192), 0x708uLL);
                v347 = v1019;
                v386 = *(_QWORD *)(v350 + v352 + 5008);
                *(_OWORD *)(v354 + 4992) = *(_OWORD *)(v350 + v352 + 4992);
                *(_QWORD *)(v354 + 5008) = v386;
                __asm { PRFM            #0, [X23,#0x3D48] }
                *(_QWORD *)(v354 + 5016) = *(_QWORD *)(v350 + v352 + 5016);
                v388 = *(_OWORD *)(v350 + v352 + 5024);
                *(_OWORD *)(v354 + 5040) = *(_OWORD *)(v350 + v352 + 5040);
                *(_OWORD *)(v354 + 5024) = v388;
                v389 = *(_OWORD *)(v350 + v352 + 5136);
                v390 = *(_OWORD *)(v350 + v352 + 5152);
                v391 = *(_QWORD *)(v350 + v352 + 5168);
                *(_OWORD *)(v354 + 5120) = *(_OWORD *)(v350 + v352 + 5120);
                *(_QWORD *)(v354 + 5168) = v391;
                *(_OWORD *)(v354 + 5152) = v390;
                *(_OWORD *)(v354 + 5136) = v389;
                v392 = *(_OWORD *)(v350 + v352 + 5056);
                v393 = *(_OWORD *)(v350 + v352 + 5072);
                v394 = *(_OWORD *)(v350 + v352 + 5088);
                *(_OWORD *)(v354 + 5104) = *(_OWORD *)(v350 + v352 + 5104);
                *(_OWORD *)(v354 + 5088) = v394;
                *(_OWORD *)(v354 + 5072) = v393;
                *(_OWORD *)(v354 + 5056) = v392;
                v396 = *(_OWORD *)(v350 + v352 + 5256);
                v395 = *(_OWORD *)(v350 + v352 + 5272);
                v397 = *(_OWORD *)(v350 + v352 + 5240);
                *(_QWORD *)(v354 + 5288) = *(_QWORD *)(v350 + v352 + 5288);
                *(_OWORD *)(v354 + 5256) = v396;
                *(_OWORD *)(v354 + 5272) = v395;
                *(_OWORD *)(v354 + 5240) = v397;
                v398 = *(_OWORD *)(v350 + v352 + 5176);
                v399 = *(_OWORD *)(v350 + v352 + 5192);
                v400 = *(_OWORD *)(v350 + v352 + 5224);
                *(_OWORD *)(v354 + 5208) = *(_OWORD *)(v350 + v352 + 5208);
                *(_OWORD *)(v354 + 5224) = v400;
                *(_OWORD *)(v354 + 5176) = v398;
                *(_OWORD *)(v354 + 5192) = v399;
                v401 = *(_QWORD *)(v350 + v352 + 5296);
                *(_BYTE *)(v354 + 5304) = *(_BYTE *)(v350 + v352 + 5304);
                v402 = (_QWORD *)(v1003 + v352);
                *(_QWORD *)(v354 + 5296) = v401;
                __asm { PRFM            #0, [X23,#0x3E70] }
                *(_OWORD *)(v354 + 5312) = *(_OWORD *)(v1003 + v352);
                v404 = *(_BYTE *)(v1008 + v352);
                *v402 = 0;
                v402[1] = 0;
                *(_BYTE *)(v354 + 5328) = v404;
                v352 += 5336;
              }
              while (v350 + v352 < v1019);
              v351 = v1019 + v352;
              v194 = v1013;
              v349 = 0x4515E08719B71393 * ((uint64_t)(v1019 - (_QWORD)(v344 + 667)) >> 3);
              v348 = v344 + 667;
            }
            v194[400].i64[0] = v351;
            if ((_QWORD *)v347 != v348)
            {
              v405 = v347 - 5336;
              v406 = 5336 * v349;
              do
              {
                v405 = sub_20F5B6B10(v405, 5336 * v968 + v346 - 5336 + v406) - 5336;
                v406 -= 5336;
              }
              while (v406);
            }
            *v344 = v985;
            v407 = v346 + 5336 * v968;
            *(_OWORD *)(v407 + 8) = v1045;
            *(_BYTE *)(v407 + 32) = v965;
            memcpy((void *)(v407 + 40), (char *)v1207 + 7, 0x708uLL);
            *(_OWORD *)(v407 + 1840) = v1043;
            *(_OWORD *)(v407 + 1864) = v1041;
            *(_OWORD *)(v407 + 1888) = v1039;
            *(_OWORD *)(v407 + 1904) = v1040;
            v408 = v1203;
            *(_OWORD *)(v407 + 1920) = v1202;
            v409 = v1204;
            *(_OWORD *)(v407 + 1968) = v1205;
            *(_OWORD *)(v407 + 1952) = v409;
            *(_OWORD *)(v407 + 1936) = v408;
            v410 = v1198;
            *(_OWORD *)(v407 + 1992) = v1197;
            v411 = v1199;
            *(_OWORD *)(v407 + 2040) = v1200;
            *(_OWORD *)(v407 + 2024) = v411;
            *(_OWORD *)(v407 + 2008) = v410;
            v412 = v1195;
            *(_OWORD *)(v407 + 2096) = v1194;
            *(_OWORD *)(v407 + 2112) = v412;
            v413 = v1193;
            *(_OWORD *)(v407 + 2064) = v1192;
            *(_OWORD *)(v407 + 2080) = v413;
            v414 = v1188;
            *(_OWORD *)(v407 + 2136) = v1187;
            v415 = v1189;
            *(_OWORD *)(v407 + 2184) = v1190;
            *(_OWORD *)(v407 + 2168) = v415;
            *(_OWORD *)(v407 + 2152) = v414;
            v416 = v1185;
            *(_OWORD *)(v407 + 2240) = v1184;
            *(_OWORD *)(v407 + 2256) = v416;
            v417 = v1183;
            *(_OWORD *)(v407 + 2208) = v1182;
            *(_OWORD *)(v407 + 2224) = v417;
            v418 = v1178;
            *(_OWORD *)(v407 + 2280) = v1177;
            v419 = v1179;
            *(_OWORD *)(v407 + 2328) = v1180;
            *(_OWORD *)(v407 + 2312) = v419;
            *(_OWORD *)(v407 + 2296) = v418;
            v420 = v1175;
            *(_OWORD *)(v407 + 2384) = v1174;
            *(_OWORD *)(v407 + 2400) = v420;
            v421 = v1173;
            *(_OWORD *)(v407 + 2352) = v1172;
            *(_OWORD *)(v407 + 2368) = v421;
            v422 = v1168;
            *(_OWORD *)(v407 + 2424) = v1167;
            v423 = v1169;
            *(_OWORD *)(v407 + 2472) = v1170;
            *(_OWORD *)(v407 + 2456) = v423;
            *(_QWORD *)(v407 + 1856) = v1044;
            *(_QWORD *)(v407 + 1880) = v1042;
            *(_QWORD *)(v407 + 1984) = v1206;
            *(_QWORD *)(v407 + 2056) = v1201;
            *(_QWORD *)(v407 + 2128) = v1196;
            *(_QWORD *)(v407 + 2200) = v1191;
            *(_QWORD *)(v407 + 2272) = v1186;
            *(_QWORD *)(v407 + 2344) = v1181;
            *(_QWORD *)(v407 + 2416) = v1176;
            *(_QWORD *)(v407 + 2488) = v1171;
            *(_OWORD *)(v407 + 2440) = v422;
            memcpy((void *)(v407 + 2496), v1166, 0x288uLL);
            *(_OWORD *)(v407 + 3144) = v1037;
            *(_QWORD *)(v407 + 3160) = v1038;
            *(_OWORD *)(v407 + 3168) = v1035;
            *(_QWORD *)(v407 + 3184) = v1036;
            memcpy((void *)(v407 + 3192), v1165, 0x708uLL);
            *(_OWORD *)(v407 + 4992) = v1033;
            *(_QWORD *)(v407 + 5008) = v1034;
            *(_QWORD *)(v407 + 5016) = v979;
            *(_OWORD *)(v407 + 5024) = v998;
            *(_OWORD *)(v407 + 5040) = v993;
            *(_OWORD *)(v407 + 5120) = v1161;
            *(_OWORD *)(v407 + 5136) = v1162;
            *(_OWORD *)(v407 + 5152) = v1163;
            *(_QWORD *)(v407 + 5168) = v1164;
            *(_OWORD *)(v407 + 5056) = v1157;
            *(_OWORD *)(v407 + 5072) = v1158;
            *(_OWORD *)(v407 + 5088) = v1159;
            *(_OWORD *)(v407 + 5104) = v1160;
            *(_QWORD *)(v407 + 5288) = v1156;
            *(_OWORD *)(v407 + 5272) = v1155;
            v424 = v1153;
            *(_OWORD *)(v407 + 5256) = v1154;
            *(_OWORD *)(v407 + 5240) = v424;
            v425 = v1151;
            *(_OWORD *)(v407 + 5224) = v1152;
            *(_OWORD *)(v407 + 5208) = v425;
            v426 = v1149;
            *(_OWORD *)(v407 + 5192) = v1150;
            *(_OWORD *)(v407 + 5176) = v426;
            *(_BYTE *)(v407 + 5304) = v1032;
            *(_QWORD *)(v407 + 5296) = v1031;
            *(_QWORD *)(v407 + 5312) = v949;
            v427 = *(std::__shared_weak_count **)(v407 + 5320);
            *(_QWORD *)(v407 + 5320) = v232;
            if (v427)
            {
              v428 = (unint64_t *)&v427->__shared_owners_;
              do
                v429 = __ldaxr(v428);
              while (__stlxr(v429 - 1, v428));
              if (!v429)
              {
                ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
                std::__shared_weak_count::__release_weak(v427);
              }
            }
            *(_BYTE *)(v346 + 5336 * v968 + 5328) = v951;
            v234 = v1025;
          }
        }
        v232 = (std::__shared_weak_count *)*((_QWORD *)&v1209[214] + 1);
      }
      else
      {
        v234 = v11 + 425;
      }
      if (v232)
      {
        v652 = (unint64_t *)&v232->__shared_owners_;
        do
          v653 = __ldaxr(v652);
        while (__stlxr(v653 - 1, v652));
        if (!v653)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      v234->i8[2] = 0;
      v234->i8[0] = 0;
      v194[424] = vaddq_s64(v194[424], (int64x2_t)xmmword_2103B4900);
      v193 = 1;
    }
    else
    {
      v193 = 0;
      --*(_DWORD *)(v209 + 8);
      --*(_DWORD *)(v218 + 8);
      *(_OWORD *)&v1096[4984] = 0u;
      --*(_DWORD *)(v224 + 8);
      --*(_DWORD *)(v230 + 8);
      *(_OWORD *)&v1096[5000] = 0u;
    }
  }
  v235 = *(std::__shared_weak_count **)&v1096[5280];
  if (*(_QWORD *)&v1096[5280])
  {
    v236 = (unint64_t *)(*(_QWORD *)&v1096[5280] + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v117 = v1030;
LABEL_266:
  if (v117)
  {
    v238 = (unint64_t *)&v117->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      v240 = v117;
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  if (v193)
  {
    v194[491].i8[12] = 0;
    v194[491].i32[2] = 0;
  }
  if (*((_QWORD *)&v1029 + 1))
  {
    v241 = (unint64_t *)(*((_QWORD *)&v1029 + 1) + 8);
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1029 + 1) + 16))(*((_QWORD *)&v1029 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1029 + 1));
    }
  }
  if (!v193)
  {
    sub_20F9B2A4C(v1165);
    if (**(int **)(*(_QWORD *)v1165 + 56) <= 4)
    {
      v243 = *(unsigned __int8 *)(*(_QWORD *)v1165 + 72);
      v244 = sub_20E8C31DC(*(uint64_t *)v1165, "OSLogSurrogateAppender", 1, 0);
      v245 = v244;
      if (v243 || v244 != 0)
      {
        *(_QWORD *)v1094 = v1165;
        *(std::chrono::steady_clock::time_point *)&v1094[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v1094[16] = std::chrono::system_clock::now();
        LODWORD(v1095) = 4;
        *(_QWORD *)v1096 = "unknown file";
        *(_DWORD *)&v1096[8] = 184;
        *(_QWORD *)&v1096[32] = 0;
        *(_QWORD *)&v1096[16] = "unknown function";
        *(_QWORD *)&v1096[24] = 0;
        v247 = **(_QWORD **)v1094;
        v248 = **(_QWORD **)v1094 + 16;
        if (*(char *)(**(_QWORD **)v1094 + 39) < 0)
        {
          v250 = *(const char **)(v247 + 16);
          v249 = *(_QWORD *)(v247 + 24);
        }
        else
        {
          v249 = *(unsigned __int8 *)(**(_QWORD **)v1094 + 39);
          v250 = (const char *)(**(_QWORD **)v1094 + 16);
        }
        v251 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v252 = byte_254A4A4F8;
        else
          v252 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v253 = byte_254A4A4F8[23];
        else
          v253 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v252, v250);
        v254 = &object[8];
        if (v253 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v253 >= 0x17)
        {
          v255 = v245;
          v256 = v250;
          v257 = v247;
          v258 = v243;
          v259 = v248;
          v260 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v253 | 7) != 0x17)
            v260 = v253 | 7;
          v261 = v260 + 1;
          v254 = operator new(v260 + 1);
          *(_QWORD *)&object[24] = v261 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v254;
          *(_QWORD *)&object[16] = v253;
          v248 = v259;
          v243 = v258;
          v247 = v257;
          v250 = v256;
          v245 = v255;
        }
        else
        {
          object[31] = v253;
          if (!v253)
          {
LABEL_302:
            v254[v253] = 0;
            object[32] = 1;
            v262 = &object[40];
            if (v249 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v249 >= 0x17)
            {
              v264 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v249 | 7) != 0x17)
                v264 = v249 | 7;
              v265 = v264 + 1;
              v262 = operator new(v264 + 1);
              *(_QWORD *)&object[56] = v265 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v262;
              *(_QWORD *)&object[48] = v249;
              v263 = v1016;
            }
            else
            {
              object[63] = v249;
              v263 = v1016;
              if (!v249)
                goto LABEL_310;
            }
            memmove(v262, v250, v249);
LABEL_310:
            v262[v249] = 0;
            object[64] = 1;
            v266 = *(NSObject **)object;
            if ((object[63] & 0x80000000) != 0)
              operator delete(*(void **)&object[40]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v245 && *(_QWORD *)(v245 + 24))
            {
              v267 = _os_log_pack_size();
              v268 = (std::__shared_weak_count_vtbl *)operator new(v267, (std::align_val_t)8uLL);
              v269 = (std::__shared_weak_count *)operator new();
              v270 = v269;
              v269->__shared_owners_ = 0;
              v271 = (unint64_t *)&v269->__shared_owners_;
              v269->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v269->__shared_weak_owners_ = 0;
              v269[1].__vftable = v268;
              *(_QWORD *)object = v268;
              *(_QWORD *)&object[8] = v268;
              *(_QWORD *)&object[16] = v269;
              do
                v272 = __ldxr(v271);
              while (__stxr(v272 + 1, v271));
              memset(&object[24], 0, 24);
              do
                v273 = __ldaxr(v271);
              while (__stlxr(v273 - 1, v271));
              if (!v273)
              {
                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                std::__shared_weak_count::__release_weak(v270);
              }
              v274 = *(_QWORD *)object;
              v275 = _os_log_pack_fill();
              *(_DWORD *)v275 = 134218496;
              *(_QWORD *)(v275 + 4) = v1026;
              *(_WORD *)(v275 + 12) = 1024;
              *(_DWORD *)(v275 + 14) = v1016;
              *(_WORD *)(v275 + 18) = 1024;
              *(_DWORD *)(v275 + 20) = v919;
              v276 = operator new();
              v277 = *(unsigned __int8 *)(v247 + 39);
              if ((v277 & 0x80u) == 0)
                v278 = v248;
              else
                v278 = *(_QWORD *)(v247 + 16);
              if ((v277 & 0x80u) != 0)
                v277 = *(_QWORD *)(v247 + 24);
              *(_QWORD *)v276 = v274;
              *(_OWORD *)(v276 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v276 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v276 + 40) = v278;
              *(_QWORD *)(v276 + 48) = v277;
              *(_BYTE *)(v276 + 56) = 16;
              *(_QWORD *)&v1207[0] = 0;
              *(_QWORD *)&v1046 = v276;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v245 + 24) + 40))(*(_QWORD *)(v245 + 24), &v1046);
              v279 = v1046;
              *(_QWORD *)&v1046 = 0;
              v263 = v1016;
              if (v279)
              {
                v280 = *(std::__shared_weak_count **)(v279 + 32);
                if (v280)
                {
                  v281 = (unint64_t *)&v280->__shared_owners_;
                  do
                    v282 = __ldaxr(v281);
                  while (__stlxr(v282 - 1, v281));
                  if (!v282)
                  {
                    ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                    std::__shared_weak_count::__release_weak(v280);
                  }
                }
                v283 = *(std::__shared_weak_count **)(v279 + 16);
                if (v283)
                {
                  v284 = (unint64_t *)&v283->__shared_owners_;
                  do
                    v285 = __ldaxr(v284);
                  while (__stlxr(v285 - 1, v284));
                  if (!v285)
                  {
                    ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                    std::__shared_weak_count::__release_weak(v283);
                  }
                }
                MEMORY[0x212BC6398](v279, 0x10F0C40B62ED6C6);
                v286 = *(_QWORD *)&v1207[0];
                *(_QWORD *)&v1207[0] = 0;
                if (v286)
                {
                  v287 = *(std::__shared_weak_count **)(v286 + 32);
                  if (v287)
                  {
                    v288 = (unint64_t *)&v287->__shared_owners_;
                    do
                      v289 = __ldaxr(v288);
                    while (__stlxr(v289 - 1, v288));
                    if (!v289)
                    {
                      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                      std::__shared_weak_count::__release_weak(v287);
                    }
                  }
                  v290 = *(std::__shared_weak_count **)(v286 + 16);
                  if (v290)
                  {
                    v291 = (unint64_t *)&v290->__shared_owners_;
                    do
                      v292 = __ldaxr(v291);
                    while (__stlxr(v292 - 1, v291));
                    if (!v292)
                    {
                      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                      std::__shared_weak_count::__release_weak(v290);
                    }
                  }
                  MEMORY[0x212BC6398](v286, 0x10F0C40B62ED6C6);
                }
              }
              v293 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v294 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v295 = __ldaxr(v294);
                while (__stlxr(v295 - 1, v294));
                if (!v295)
                {
                  ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                  std::__shared_weak_count::__release_weak(v293);
                }
              }
              v296 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v297 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v298 = __ldaxr(v297);
                while (__stlxr(v298 - 1, v297));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                  std::__shared_weak_count::__release_weak(v296);
                }
              }
            }
            else
            {
              os_log_type_enabled(v266, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 134218496;
              *(_QWORD *)&object[4] = v1026;
              *(_WORD *)&object[12] = 1024;
              *(_DWORD *)&object[14] = v263;
              *(_WORD *)&object[18] = 1024;
              *(_DWORD *)&object[20] = v919;
              v299 = (void *)_os_log_send_and_compose_impl();
              if (v299)
                free(v299);
            }
            if (v243)
            {
              sub_20E8C003C((uint64_t)v1094, "Failed to add the pre-integrated factor: %zu, state: %d -> %d.\n", v1026, v263, v919);
              sub_20E863570((uint64_t)v1094);
            }
            sub_20E863570((uint64_t)v1094);
            v300 = *(std::__shared_weak_count **)&v1096[32];
            if (*(_QWORD *)&v1096[32])
            {
              v301 = (unint64_t *)(*(_QWORD *)&v1096[32] + 8);
              do
                v302 = __ldaxr(v301);
              while (__stlxr(v302 - 1, v301));
              if (!v302)
              {
                ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                std::__shared_weak_count::__release_weak(v300);
              }
            }
            goto LABEL_372;
          }
        }
        memmove(v254, v252, v253);
        goto LABEL_302;
      }
    }
  }
LABEL_372:
  if (*((_QWORD *)&v1029 + 1))
  {
    v303 = (unint64_t *)(*((_QWORD *)&v1029 + 1) + 8);
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1029 + 1) + 16))(*((_QWORD *)&v1029 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1029 + 1));
    }
  }
  v183 = (std::__shared_weak_count *)*((_QWORD *)&v1029 + 1);
  if (*((_QWORD *)&v1029 + 1))
  {
    v305 = (unint64_t *)(*((_QWORD *)&v1029 + 1) + 8);
    do
      v185 = __ldaxr(v305);
    while (__stlxr(v185 - 1, v305));
LABEL_182:
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
}

void sub_20FC2319C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x67D8]))
  {
    if (SLOBYTE(STACK[0x67D7]) < 0)
      operator delete((void *)STACK[0x67C0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x2E10]);
  sub_20E86665C((uint64_t)&STACK[0x760]);
  sub_20E86665C((uint64_t)&STACK[0x770]);
  _Unwind_Resume(a1);
}

void sub_20FC2336C(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x760]);
  sub_20E86665C((uint64_t)&STACK[0x770]);
  _Unwind_Resume(a1);
}

void sub_20FC233A0(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x5BA8]);
  _Unwind_Resume(a1);
}

void sub_20FC233B8(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x5BA8]);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC233DC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 9616;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FC23474(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  _QWORD *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  size_t v35;
  double *v36;
  char *v37;
  __int128 v38;
  double v39;
  double v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int32 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unsigned int v57;
  _BYTE *v58;
  unint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  _BYTE *v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  double v73;
  int v74;
  double v75;
  int32x2_t v76;
  double v77;
  double v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  float32x2_t v91;
  float v92;
  float64x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int32 *v106;
  __int32 *v107;
  __int32 *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  double *v121;
  double *v122;
  char *v123;
  double *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  const std::nothrow_t *v134;
  unint64_t v135;
  double *v136;
  BOOL v137;
  double v138;
  double *v139;
  uint64_t v140;
  unint64_t v141;
  double *v142;
  const std::nothrow_t *v143;
  unint64_t v144;
  double *v145;
  _BYTE *v146;
  double *v147;
  double **v148;
  uint64_t v149;
  float64_t v150;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  void *__p;
  _BYTE *v161;
  char *v162;
  void *v163;
  __int32 *v164;
  char *v165;

  v6 = a3[3];
  v5 = a3[4];
  v7 = v5 - v6;
  if ((v5 - v6) >> 3 <= a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOTrackClassifier.h", 84, (uint64_t)"num_frontend_tracks_to_keep < num_frontend_tracks", 49, (uint64_t)"Pruning tracks not required.", 28, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v8 = (_QWORD *)a3[1];
  v9 = v8[39];
  v154 = (v5 - v6) >> 3;
  v157 = v6;
  if (!v9)
  {
    v11 = 0;
    v10 = 0;
    v12 = (_QWORD *)v8[37];
    v156 = a2;
    if (v12 == v8 + 38)
      goto LABEL_49;
    goto LABEL_8;
  }
  if (v9 >> 62)
    sub_20E867F44();
  v10 = (char *)operator new(4 * v9);
  v11 = &v10[4 * v9];
  v163 = v10;
  v164 = (__int32 *)v10;
  v165 = v11;
  v12 = (_QWORD *)v8[37];
  v156 = a2;
  if (v12 != v8 + 38)
  {
LABEL_8:
    v149 = v5;
    v152 = v7;
    v13 = v10;
    v14 = v10;
    while (1)
    {
      if (!(unsigned __int16)*((_DWORD *)v12 + 8))
        goto LABEL_13;
      v15 = HIWORD(*((_DWORD *)v12 + 8));
      if (v13 < v11)
      {
        *(_DWORD *)v13 = v15;
        v13 += 4;
        v10 = v13;
        a2 = v156;
LABEL_13:
        v16 = (_QWORD *)v12[1];
        if (v16)
          goto LABEL_30;
        goto LABEL_32;
      }
      v17 = (v13 - v14) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
      {
        v164 = (__int32 *)v10;
        sub_20E867F44();
      }
      if ((v11 - v14) >> 1 > v18)
        v18 = (v11 - v14) >> 1;
      if ((unint64_t)(v11 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 >> 62)
        {
          v164 = (__int32 *)v10;
          sub_20E877A38();
        }
        v20 = operator new(4 * v19);
        v21 = &v20[4 * v17];
        *(_DWORD *)v21 = v15;
        v10 = v21 + 4;
        v22 = v13 - v14;
        if (v13 != v14)
        {
LABEL_24:
          v23 = v22 - 4;
          a2 = v156;
          if (v23 < 0xBC)
          {
            v24 = v13;
            goto LABEL_26;
          }
          v28 = (v13 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v20[v13 - v14 - 4 - v28] > &v20[v13 - v14 - 4])
          {
            v24 = v13;
            goto LABEL_26;
          }
          if (&v13[-v28 - 4] > v13 - 4)
          {
            v24 = v13;
            goto LABEL_26;
          }
          if ((unint64_t)(v14 - v20) < 0x20)
          {
            v24 = v13;
            goto LABEL_26;
          }
          v29 = (v23 >> 2) + 1;
          v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
          v24 = &v13[-v30];
          v21 -= v30;
          v31 = &v20[4 * v17 - 16];
          v32 = v13 - 16;
          v33 = v29 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 32;
            v33 -= 8;
          }
          while (v33);
          if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_26:
              v25 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v21 - 1) = v25;
              v21 -= 4;
            }
            while (v24 != v14);
          }
          v11 = &v20[4 * v19];
          v163 = v21;
          v165 = v11;
          if (!v14)
            goto LABEL_29;
LABEL_28:
          operator delete(v14);
          goto LABEL_29;
        }
      }
      else
      {
        v20 = 0;
        v21 = (char *)(4 * v17);
        *(_DWORD *)(4 * v17) = v15;
        v10 = (char *)(4 * v17 + 4);
        v22 = v13 - v14;
        if (v13 != v14)
          goto LABEL_24;
      }
      a2 = v156;
      v11 = &v20[4 * v19];
      v163 = v21;
      v165 = v11;
      if (v14)
        goto LABEL_28;
LABEL_29:
      v13 = v10;
      v14 = v21;
      v16 = (_QWORD *)v12[1];
      if (v16)
      {
        do
        {
LABEL_30:
          v26 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
        goto LABEL_9;
      }
      do
      {
LABEL_32:
        v26 = (_QWORD *)v12[2];
        _ZF = *v26 == (_QWORD)v12;
        v12 = v26;
      }
      while (!_ZF);
LABEL_9:
      v8 = (_QWORD *)a3[1];
      v12 = v26;
      if (v26 == v8 + 38)
      {
        v164 = (__int32 *)v10;
        v7 = v152;
        v5 = v149;
        break;
      }
    }
  }
LABEL_49:
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (v5 == v157)
  {
    v36 = 0;
    v148 = (double **)(a1 + 24);
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF9)
      sub_20E867F44();
    v35 = 2 * v7;
    v36 = (double *)operator new(v35);
    *(_QWORD *)a1 = v36;
    *(_QWORD *)(a1 + 8) = v36;
    *(_QWORD *)(a1 + 16) = &v36[2 * v154];
    v37 = (char *)operator new(v35);
    *(_QWORD *)(a1 + 24) = v37;
    *(_QWORD *)(a1 + 32) = v37;
    v148 = (double **)(a1 + 24);
    *(_QWORD *)(a1 + 40) = &v37[16 * v154];
  }
  __p = operator new(0x10uLL);
  v161 = __p;
  v162 = (char *)__p + 16;
  v41 = (uint64_t *)a3[3];
  v42 = (uint64_t)v36;
  v155 = (uint64_t *)a3[4];
  if (v41 != v155)
  {
    v153 = (uint64_t *)v8[6];
    v43 = (uint64_t *)a1;
    while (1)
    {
      v47 = *(_QWORD *)(*v41 + 496);
      v48 = *(unsigned __int16 *)(v47 + 18);
      v49 = (unint64_t)(*(_QWORD *)(*v41 + 504) - v47) >> 6;
      if (!(_DWORD)v49)
      {
        v73 = -1000.0;
        v74 = *(_DWORD *)(*v41 + 32);
        if (!*(_BYTE *)(a2 + 48))
          goto LABEL_154;
        goto LABEL_150;
      }
      v161 = __p;
      v50 = *v41;
      v52 = *(uint64_t **)(*v41 + 496);
      v51 = *(uint64_t **)(*v41 + 504);
      if (v52 != v51)
        break;
      v53 = a3[1];
      v54 = (uint64_t *)(v53 + 56);
      v55 = *(uint64_t **)(v53 + 56);
      v56 = v153;
      if (!v55)
        goto LABEL_88;
LABEL_77:
      v64 = *v52;
      v65 = *((_DWORD *)v52 + 2);
      v66 = v54;
      do
      {
        v67 = v55[4];
        if (v67 < v64)
        {
          ++v55;
        }
        else if (v67 == v64)
        {
          if (*((_DWORD *)v55 + 10) < v65)
            ++v55;
          else
            v66 = v55;
        }
        else
        {
          v66 = v55;
        }
        v55 = (uint64_t *)*v55;
      }
      while (v55);
      if (v66 == v54 || (v68 = v66[4], v64 < v68) || v64 == v68 && *((_DWORD *)v66 + 10) > v65)
LABEL_88:
        v66 = v54;
      if (v56 == v66)
      {
        v69 = 0;
      }
      else
      {
        v69 = 0;
        v70 = v56;
        do
        {
          v71 = (uint64_t *)v70[1];
          if (v71)
          {
            do
            {
              v72 = v71;
              v71 = (uint64_t *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v72 = (uint64_t *)v70[2];
              _ZF = *v72 == (_QWORD)v70;
              v70 = v72;
            }
            while (!_ZF);
          }
          ++v69;
          v70 = v72;
        }
        while (v72 != v66);
      }
      v75 = *(double *)(a2 + 24);
      v76.i32[1] = 0;
      v158 = 0.0;
      if (v75 == 0.0)
      {
        v77 = 0.0;
        v78 = *(double *)(a2 + 32);
        if (v78 == 0.0)
          goto LABEL_149;
        goto LABEL_144;
      }
      if (*(_QWORD *)(v50 + 504) - (_QWORD)v52 <= 0x7FuLL)
      {
        LODWORD(v75) = *(_DWORD *)(a2 + 40);
        v77 = (double)*(unint64_t *)&v75;
        v78 = *(double *)(a2 + 32);
        if (v78 == 0.0)
          goto LABEL_149;
LABEL_144:
        v97 = *(_QWORD *)(v50 + 496);
        v98 = *(_QWORD *)(v50 + 504);
        while (v98 != v97)
        {
          v99 = v98 - 64;
          v100 = *(_DWORD *)(v98 - 48);
          v98 -= 64;
          if (v100 == *(_DWORD *)(v97 + 16))
          {
            v97 = v99 + 64;
            break;
          }
        }
        _Q2 = *(_OWORD *)(v97 - 24);
        _D3 = *(_QWORD *)(v97 - 16);
        __asm { FMLA            D4, D3, V2.D[1] }
        v158 = _D4;
        goto LABEL_149;
      }
      v79 = *((_DWORD *)v52 + 4);
      v80 = *(_QWORD *)(v53 + 1768);
      if (!v80)
        goto LABEL_118;
      v81 = v53 + 1768;
      v82 = v53 + 1768;
      do
      {
        v83 = *(_DWORD *)(v80 + 32);
        _CF = v83 >= v79;
        if (v83 >= v79)
          v85 = (uint64_t *)v80;
        else
          v85 = (uint64_t *)(v80 + 8);
        if (_CF)
          v82 = v80;
        v80 = *v85;
      }
      while (*v85);
      if (v82 != v81 && *(_DWORD *)(v82 + 32) <= v79)
      {
        v86 = *(_QWORD *)(v82 + 40);
        v87 = *(_DWORD *)(v86 + 992);
        if (v87 != -1)
        {
LABEL_119:
          if (v87 <= 7)
            goto LABEL_120;
          goto LABEL_128;
        }
      }
      else
      {
LABEL_118:
        v86 = 0;
        v87 = MEMORY[0x3E0];
        if (MEMORY[0x3E0] != -1)
          goto LABEL_119;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_221;
      }
      v87 = *(_DWORD *)(v86 + 992);
      if (v87 <= 7)
      {
LABEL_120:
        if (!v87)
          goto LABEL_220;
LABEL_129:
        v150 = *(double *)(v86 + 16);
        goto LABEL_130;
      }
LABEL_128:
      if (v87 < 0xF)
        goto LABEL_129;
      v150 = *(double *)(v86 + 16);
      if (v87 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_221;
        }
        if (!*(_DWORD *)(v86 + 992))
        {
LABEL_220:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_221:
          abort();
        }
      }
LABEL_130:
      v88 = *(_QWORD *)(v50 + 496);
      v89 = *(_QWORD *)(v50 + 504);
      if (v88 == v89)
      {
        v76.i32[0] = 0;
        v91 = 0;
      }
      else
      {
        v90 = 0;
        v91 = 0;
        v92 = 1.0;
        v76.i32[0] = 0;
        do
        {
          while (*(_DWORD *)(v88 + 16) != v79)
          {
            v39 = v40;
            v88 += 64;
            if (v88 == v89)
              goto LABEL_139;
          }
          v39 = *(double *)(v88 + 32);
          if ((v90 & 1) != 0)
          {
            v91 = vadd_f32(v91, vmul_n_f32(vsub_f32(*(float32x2_t *)&v39, *(float32x2_t *)&v40), v92));
            *(float *)v76.i32 = *(float *)v76.i32 + v92;
            v92 = v92 * 1.2;
          }
          v90 = 1;
          v88 += 64;
          v40 = v39;
        }
        while (v88 != v89);
      }
LABEL_139:
      v93.f64[0] = v150;
      v93.f64[1] = *(float64_t *)(v86 + 40);
      *(float32x2_t *)&v93.f64[0] = vcvt_f32_f64(v93);
      v94 = vdiv_f32(v91, (float32x2_t)vdup_lane_s32(v76, 0));
      v95 = vdiv_f32(vsub_f32((float32x2_t)vand_s8((int8x8_t)vadd_f32(*(float32x2_t *)&v93.f64[0], *(float32x2_t *)&v93.f64[0]), (int8x8_t)vcgtz_f32(v94)), *(float32x2_t *)&v39), v94);
      if (v95.f32[1] < v95.f32[0])
        v95.f32[0] = v95.f32[1];
      v96 = fmaxf(v95.f32[0], 0.0);
      if (v96 >= (float)*(unsigned int *)(a2 + 40))
        v96 = (float)*(unsigned int *)(a2 + 40);
      v77 = v96;
      v50 = *v41;
      v43 = (uint64_t *)a1;
      v78 = *(double *)(a2 + 32);
      if (v78 != 0.0)
        goto LABEL_144;
LABEL_149:
      v40 = *(double *)(a2 + 16);
      v39 = v40 * (double)v69;
      *(double *)&v38 = v77 * *(double *)(a2 + 24)
                      + v39
                      + *(double *)(a2 + 8) * (double)v49
                      + *(double *)a2 * (double)(unint64_t)(((v161 - (_BYTE *)__p) >> 2) - 1);
      v73 = v78 * v158 + *(double *)&v38;
      v74 = *(_DWORD *)(v50 + 32);
      if (!*(_BYTE *)(a2 + 48))
        goto LABEL_154;
LABEL_150:
      v106 = v164;
      v107 = wmemchr((__int32 *)v163, v48, ((char *)v164 - (_BYTE *)v163) >> 2);
      if (v107)
        v108 = v107;
      else
        v108 = v106;
      if (v108 != v106 || v163 == v164)
      {
LABEL_154:
        v110 = (char *)v43[1];
        v109 = v43[2];
        if ((unint64_t)v110 < v109)
        {
          *(double *)v110 = v73;
          *((_DWORD *)v110 + 2) = v74;
          v44 = v110 + 16;
        }
        else
        {
          v111 = (char *)*v43;
          v112 = (uint64_t)&v110[-*v43] >> 4;
          v113 = v112 + 1;
          if ((unint64_t)(v112 + 1) >> 60)
            goto LABEL_216;
          v114 = v109 - (_QWORD)v111;
          if (v114 >> 3 > v113)
            v113 = v114 >> 3;
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
            v115 = 0xFFFFFFFFFFFFFFFLL;
          else
            v115 = v113;
          if (v115)
          {
            if (v115 >> 60)
              goto LABEL_218;
            v116 = (char *)operator new(16 * v115);
            v117 = (uint64_t)&v116[16 * v112];
            *(double *)v117 = v73;
            *(_DWORD *)(v117 + 8) = v74;
            v118 = v117;
            if (v110 != v111)
            {
LABEL_164:
              a2 = v156;
              do
              {
                v38 = *((_OWORD *)v110 - 1);
                *(_OWORD *)(v118 - 16) = v38;
                v118 -= 16;
                v110 -= 16;
              }
              while (v110 != v111);
              v110 = (char *)*v43;
              v119 = &v116[16 * v115];
              v44 = (char *)(v117 + 16);
              *v43 = v118;
              v43[1] = v117 + 16;
              v43[2] = (uint64_t)v119;
              if (!v110)
                goto LABEL_56;
              goto LABEL_173;
            }
          }
          else
          {
            v116 = 0;
            v117 = 16 * v112;
            *(double *)v117 = v73;
            *(_DWORD *)(v117 + 8) = v74;
            v118 = 16 * v112;
            if (v110 != v111)
              goto LABEL_164;
          }
          a2 = v156;
          v123 = &v116[16 * v115];
          v44 = (char *)(v117 + 16);
          *v43 = v118;
          v43[1] = v117 + 16;
          v43[2] = (uint64_t)v123;
          if (v110)
LABEL_173:
            operator delete(v110);
        }
LABEL_56:
        v43[1] = (uint64_t)v44;
        v45 = *v41++;
        v46 = *(_DWORD *)(a2 + 56);
        if (*(_DWORD *)(v45 + 520) == 2)
          ++v46;
        *(_DWORD *)(a2 + 56) = v46;
        if (v41 == v155)
          goto LABEL_198;
      }
      else
      {
        v121 = (double *)v43[4];
        v120 = v43[5];
        if ((unint64_t)v121 >= v120)
        {
          v124 = *v148;
          v125 = ((char *)v121 - (char *)*v148) >> 4;
          v126 = v125 + 1;
          if (!((unint64_t)(v125 + 1) >> 60))
          {
            v127 = v120 - (_QWORD)v124;
            if (v127 >> 3 > v126)
              v126 = v127 >> 3;
            if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
              v128 = 0xFFFFFFFFFFFFFFFLL;
            else
              v128 = v126;
            if (!v128)
            {
              v129 = 0;
              v130 = 16 * v125;
              *(double *)v130 = v73;
              *(_DWORD *)(v130 + 8) = v74;
              v131 = 16 * v125;
              if (v121 != v124)
                goto LABEL_183;
              goto LABEL_196;
            }
            if (!(v128 >> 60))
            {
              v129 = (char *)operator new(16 * v128);
              v130 = (uint64_t)&v129[16 * v125];
              *(double *)v130 = v73;
              *(_DWORD *)(v130 + 8) = v74;
              v131 = v130;
              if (v121 != v124)
              {
LABEL_183:
                a2 = v156;
                do
                {
                  v38 = *((_OWORD *)v121 - 1);
                  *(_OWORD *)(v131 - 16) = v38;
                  v131 -= 16;
                  v121 -= 2;
                }
                while (v121 != v124);
                v121 = v124;
                v122 = (double *)(v130 + 16);
                v43[3] = v131;
                v43[4] = v130 + 16;
                v43[5] = (uint64_t)&v129[16 * v128];
                if (!v121)
                  goto LABEL_187;
LABEL_186:
                operator delete(v121);
                goto LABEL_187;
              }
LABEL_196:
              a2 = v156;
              v122 = (double *)(v130 + 16);
              v43[3] = v131;
              v43[4] = v130 + 16;
              v43[5] = (uint64_t)&v129[16 * v128];
              if (!v121)
                goto LABEL_187;
              goto LABEL_186;
            }
LABEL_218:
            sub_20E877A38();
          }
LABEL_216:
          sub_20E867F44();
        }
        *v121 = v73;
        *((_DWORD *)v121 + 2) = v74;
        v122 = v121 + 2;
LABEL_187:
        v43[4] = (uint64_t)v122;
        v132 = *v41++;
        v133 = *(_DWORD *)(a2 + 60);
        if (*(_DWORD *)(v132 + 520) == 2)
          ++v133;
        *(_DWORD *)(a2 + 60) = v133;
        if (v41 == v155)
        {
LABEL_198:
          v42 = *v43;
          v36 = (double *)v43[1];
          goto LABEL_199;
        }
      }
    }
    while (1)
    {
      v57 = *((_DWORD *)v52 + 4);
      v58 = __p;
      if (v161 == __p)
      {
        v58 = v161;
      }
      else
      {
        v59 = (v161 - (_BYTE *)__p) >> 2;
        do
        {
          v60 = v59 >> 1;
          v61 = &v58[4 * (v59 >> 1)];
          v63 = *v61;
          v62 = v61 + 1;
          v59 += ~(v59 >> 1);
          if (v63 < v57)
            v58 = v62;
          else
            v59 = v60;
        }
        while (v59);
        if (v161 != v58 && *(_DWORD *)v58 == v57)
          goto LABEL_64;
      }
      sub_20EDB3C7C(&__p, v58, (char *)v52 + 16);
LABEL_64:
      v52 += 8;
      if (v52 == v51)
      {
        v50 = *v41;
        v52 = *(uint64_t **)(*v41 + 496);
        v53 = a3[1];
        v54 = (uint64_t *)(v53 + 56);
        v55 = *(uint64_t **)(v53 + 56);
        v56 = v153;
        if (v55)
          goto LABEL_77;
        goto LABEL_88;
      }
    }
  }
LABEL_199:
  if ((uint64_t)v36 - v42 < 1)
  {
LABEL_203:
    v138 = sub_20FC28248(v42, v36, ((uint64_t)v36 - v42) >> 4, 0, 0, *(double *)&v38);
    v140 = *(_QWORD *)(a1 + 24);
    v139 = *(double **)(a1 + 32);
    v141 = ((uint64_t)v139 - v140) >> 4;
    if ((uint64_t)v139 - v140 >= 1)
      goto LABEL_206;
LABEL_209:
    sub_20FC28248(v140, v139, v141, 0, 0, v138);
    v146 = __p;
    if (!__p)
      goto LABEL_211;
    goto LABEL_210;
  }
  v134 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v135 = ((uint64_t)v36 - v42) >> 4;
  while (1)
  {
    v136 = (double *)operator new(16 * v135, v134);
    if (v136)
      break;
    v137 = v135 > 1;
    v135 >>= 1;
    if (!v137)
      goto LABEL_203;
  }
  v142 = v136;
  sub_20FC28248(v42, v36, ((uint64_t)v36 - v42) >> 4, v136, v135, *(double *)&v38);
  operator delete(v142);
  v140 = *(_QWORD *)(a1 + 24);
  v139 = *(double **)(a1 + 32);
  v141 = ((uint64_t)v139 - v140) >> 4;
  if ((uint64_t)v139 - v140 < 1)
    goto LABEL_209;
LABEL_206:
  v143 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v144 = v141;
  while (1)
  {
    v145 = (double *)operator new(16 * v144, v143);
    if (v145)
      break;
    v137 = v144 > 1;
    v144 >>= 1;
    if (!v137)
      goto LABEL_209;
  }
  v147 = v145;
  sub_20FC28248(v140, v139, v141, v145, v144, v138);
  operator delete(v147);
  v146 = __p;
  if (__p)
  {
LABEL_210:
    v161 = v146;
    operator delete(v146);
  }
LABEL_211:
  if (v163)
  {
    v164 = (__int32 *)v163;
    operator delete(v163);
  }
}

void sub_20FC24148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  sub_20E9AA8C8(a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC241C4(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  float64x2_t **v13;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  double v18;
  float64x2_t *v20;
  double v21;
  float64x2_t v23;
  float64x2_t *v24;
  int64x2_t v25;
  unint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v36;
  float64x2_t v37;
  int8x16_t v38;
  float64x2_t *v39;
  double v40;
  float64x2_t v41;
  uint64_t v44;
  unint64_t v45;
  int64x2_t v47;
  int64x2_t v48;
  float64x2_t v51;
  float64_t v52;
  int8x16_t v53;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t *v59;
  float64x2_t v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  double v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  float64x2_t v70;
  int64x2_t v71;
  uint64_t v72;
  double v73;
  float64x2_t v75;
  float64x2_t v79;
  float64x2_t v80;
  unint64_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  double v90;
  float64x2_t v91;
  double v95;
  int8x16_t v96;
  double v97;
  uint64_t v98;
  float64x2_t v99;
  int64x2_t v101;
  int64x2_t v102;
  float64x2_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  double v120;
  uint64_t *v122;
  uint64_t v123;
  double *v124;
  uint64_t v125;
  double *v126;
  double v127;
  double v128;
  float64x2_t v131;
  double v133;
  double v135;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t i;
  int v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  __int128 v169;
  _QWORD *v170;
  _QWORD *v171;
  BOOL v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  float64_t v177;
  unint64_t v178;
  float64x2_t v179;
  float64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;

  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  if (v6 != v7)
  {
    while (*(_DWORD *)(*v6 + 32) != a2)
    {
      if (++v6 == v7)
        goto LABEL_6;
    }
  }
  if (v6 == v7)
  {
LABEL_6:
    v8 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1802, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
    v6 = v7;
    if (v8)
      goto LABEL_119;
  }
  v9 = *v6;
  if (*(_DWORD *)(*v6 + 520) == 2
    || *(unsigned int *)(a1 + 1932) > (unint64_t)((uint64_t)(*(_QWORD *)(v9 + 504) - *(_QWORD *)(v9 + 496)) >> 6))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 1940))
  {
    if (*(_BYTE *)(v9 + 488))
      v11 = v9 + 40;
    else
      v11 = 0;
    v181 = *(_OWORD *)(v11 + 32);
    *(_QWORD *)&v182 = *(_QWORD *)(v11 + 48);
    v12 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 8) + 1784), (uint64_t *)&v181);
    v13 = (float64x2_t **)(v12 + 5);
    if (!v12)
      v13 = 0;
    _Q6.f64[0] = (*v13)[1].f64[0];
    v15 = **v13;
    v16 = (*v13)[2].f64[1];
    v17 = *(float64x2_t *)((char *)*v13 + 24);
    v18 = (*v13)[4].f64[0];
    _Q3 = (*v13)[3];
    v20 = v13[2];
    v21 = v20[1].f64[0];
    _Q16 = *v20;
    v23 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v15, (int64x2_t)v17), v20->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v15, (int64x2_t)v17), *v20, 1);
    v24 = v13[4];
    v25 = *(int64x2_t *)((char *)&v24[1] + 8);
    _Q17 = v24[3];
    v27 = *(_QWORD *)&v24[3].f64[0];
    v28 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v24, v25);
    v29 = vmulq_n_f64(v28, _Q6.f64[0]);
    v30 = vmulq_n_f64((float64x2_t)v27, _Q6.f64[0]);
    _Q6.f64[1] = v16;
    v31 = vmlaq_n_f64(v23, _Q6, v21);
    _Q16.f64[0] = _Q16.f64[1];
    __asm { FMLA            D6, D16, V3.D[1] }
    _Q6.f64[0] = _Q6.f64[0] + v18 * v21;
    *(_QWORD *)&v36 = *(_OWORD *)&vnegq_f64(v31);
    _Q16.f64[0] = v24[1].f64[0];
    v37 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v24, v25);
    _Q16.f64[1] = v24[2].f64[1];
    v38 = vextq_s8((int8x16_t)v37, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q17, 1), 8uLL);
    v39 = v13[6];
    v40 = v39[1].f64[0];
    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v39->f64[0]), v37, *v39, 1), _Q16, v40);
    _D26 = v39->f64[1];
    __asm { FMLA            D28, D26, V17.D[1] }
    _Q17.f64[0] = _D28 + v24[4].f64[0] * v40;
    v44 = v38.i64[1];
    *(_QWORD *)&v37.f64[1] = v38.i64[0];
    v45 = *(_QWORD *)&v24[4].f64[0];
    __asm { FMOV            V24.2D, #1.0 }
    v177 = _Q24.f64[1];
    *(_QWORD *)&_Q24.f64[0] = *(_OWORD *)&vnegq_f64(_Q17);
    v47 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, v15.f64[0]), v37, v17.f64[0]), _Q16, _Q3.f64[0]), (float64x2_t)0, v41);
    v48 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v28, v15, 1), v37, v17, 1), _Q16, _Q3, 1), (float64x2_t)0, v41);
    _Q22 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v29, v37, v16), _Q16, v18), (float64x2_t)0, v41);
    *(_QWORD *)&v30.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v30, (float64x2_t)(unint64_t)v44, v16), (float64x2_t)v45, v18), (float64x2_t)0, _Q24);
    _Q0 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v28, v36), v37, v31, 1), _Q16, _Q6.f64[0], 0), v41);
    v51 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v27, v36), (float64x2_t)(unint64_t)v44, v31, 1), (float64x2_t)v45, _Q6.f64[0], 0), _Q17);
    v52 = v51.f64[0];
    *(_QWORD *)&v51.f64[0] = *(_QWORD *)&_Q0.f64[0] ^ 0x8000000000000000;
    v53 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64(v47, v48), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q0.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q0.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64(v47, v48)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v52 ^ 0x8000000000000000), (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v27, v15.f64[0]), (float64x2_t)(unint64_t)v44, v17.f64[0]), (float64x2_t)v45, _Q3.f64[0]), (float64x2_t)0, _Q24), (int64x2_t)vmlaq_f64(
                                                   vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v27, v15, 1), (float64x2_t)(unint64_t)v44, v17, 1), (float64x2_t)v45, _Q3, 1), (float64x2_t)0, _Q24)));
    _Q1 = vmulq_f64(_Q22, v51);
    *(_QWORD *)&_Q0.f64[0] = *(_QWORD *)&_Q0.f64[1] ^ 0x8000000000000000;
    __asm { FMLA            D1, D0, V22.D[1] }
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], COERCE_DOUBLE(*(_QWORD *)&v52 ^ 0x8000000000000000), v30.f64[0]);
    v179 = _Q1;
    v180 = *(double *)v53.i64;
    v56 = *(__int128 **)(v9 + 496);
    v55 = *(__int128 **)(v9 + 504);
    v57 = *((_QWORD *)v55 - 6);
    v178 = vextq_s8(v53, v53, 8uLL).u64[0];
    v184 = *(v55 - 4);
    v185 = v57;
    while (v56 != v55)
    {
      if (*((_DWORD *)v56 + 2) > DWORD2(v184))
      {
        v58 = *v56;
        LODWORD(v185) = *((_DWORD *)v56 + 4);
        v184 = v58;
      }
      v56 += 4;
    }
    v59 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 8) + 1784), (uint64_t *)&v184);
    if (*(_BYTE *)(v9 + 488))
      v61 = v9 + 40;
    else
      v61 = 0;
    v62 = *(float64x2_t *)(v61 + 8);
    v60.f64[0] = *(float64_t *)(v61 + 24);
    v63.f64[0] = v180;
    *(_QWORD *)&v63.f64[1] = v178;
    v64 = vsubq_f64(v63, v62);
    *(_QWORD *)&v65 = *(_OWORD *)&vsubq_f64(v179, v60);
    v66 = 1.0;
    if (fabs(v64.f64[0]) >= 1.0e-10 || fabs(v64.f64[1]) >= 1.0e-10 || fabs(v65) >= 1.0e-10)
    {
      v67 = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
      v68 = v59 + 5;
      if (!v59)
        v68 = 0;
      v69 = v68[4];
      v70.f64[0] = *(float64_t *)(v69 + 16);
      v71 = *(int64x2_t *)(v69 + 24);
      v70.f64[1] = *(float64_t *)(v69 + 40);
      v72 = v68[6];
      v73 = *(double *)(v72 + 16);
      _Q17 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v69, v71);
      v75 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v69, v71);
      _Q23 = *(float64x2_t *)(v69 + 48);
      _Q22 = vmulq_f64(_Q23, *(float64x2_t *)v72);
      _D20 = *(_QWORD *)(v72 + 8);
      __asm { FMLA            D22, D20, V23.D[1] }
      _Q22.f64[0] = _Q22.f64[0] + *(double *)(v69 + 64) * v73;
      v79.f64[1] = v177;
      *(_QWORD *)&v79.f64[0] = *(_OWORD *)&vnegq_f64(_Q22);
      v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, *(double *)v72), _Q17, *(float64x2_t *)v72, 1), v70, v73);
      v81 = *(_QWORD *)(v69 + 64);
      v82 = (float64x2_t *)*v68;
      v83 = *(float64x2_t *)*v68;
      v84.f64[0] = *(float64_t *)(*v68 + 16);
      v85 = *(float64x2_t *)(*v68 + 24);
      v86 = _Q23.f64[0];
      v87 = vmulq_n_f64(v75, v84.f64[0]);
      v88 = vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q23.f64[0], v84.f64[0]);
      v84.f64[1] = *(float64_t *)(*v68 + 40);
      v89 = v68[2];
      v90 = *(double *)(v89 + 16);
      v91 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v83, (int64x2_t)v85), *(double *)v89), (float64x2_t)vzip2q_s64((int64x2_t)v83, (int64x2_t)v85), *(float64x2_t *)v89, 1), v84, v90);
      v84.f64[0] = v82[4].f64[0];
      _Q31 = v82[3];
      _D30 = *(_QWORD *)(v89 + 8);
      __asm { FMLA            D9, D30, V31.D[1] }
      v95 = _D9 + v84.f64[0] * v90;
      v96 = vextq_s8((int8x16_t)_Q17, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q23, 1), 8uLL);
      *(_QWORD *)&_Q17.f64[1] = v96.i64[0];
      *(_QWORD *)&v97 = *(_OWORD *)&vnegq_f64(v91);
      v98 = v96.i64[1];
      v99 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v75, v97), _Q17, v91, 1), v70, v95, 0), v80);
      _Q25 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v87, _Q17, v84.f64[1]), v70, v84.f64[0]), (float64x2_t)0, v80);
      v101 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v75, v83, 1), _Q17, v85, 1), v70, _Q31, 1), (float64x2_t)0, v80);
      v102 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v75, v83.f64[0]), _Q17, v85.f64[0]), v70, _Q31.f64[0]), (float64x2_t)0, v80);
      *(_QWORD *)&_Q17.f64[0] = *(_QWORD *)&v99.f64[0] ^ 0x8000000000000000;
      _Q7 = vmulq_f64(_Q25, _Q17);
      *(_QWORD *)&_Q17.f64[0] = *(_QWORD *)&v99.f64[1] ^ 0x8000000000000000;
      __asm { FMLA            D7, D17, V25.D[1] }
      *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v86, v97), (float64x2_t)(unint64_t)v98, v91, 1), (float64x2_t)v81, v95, 0), _Q22) ^ 0x8000000000000000;
      _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], _Q17.f64[0], vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v88, (float64x2_t)(unint64_t)v98, v84.f64[1]), (float64x2_t)v81, v84.f64[0]), (float64x2_t)0, v79).f64[0]);
      *(_QWORD *)&v62.f64[1] = v67;
      v104 = vsubq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64(v102, v101), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v99.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v99.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64(v102, v101)), (float64x2_t)vdupq_n_s64(*(unint64_t *)&_Q17.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v86, v83.f64[0]), (float64x2_t)(unint64_t)v98, v85.f64[0]), (float64x2_t)v81, _Q31.f64[0]), (float64x2_t)0, v79),
                                (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v86, v83, 1), (float64x2_t)(unint64_t)v98, v85, 1), (float64x2_t)v81, _Q31, 1), (float64x2_t)0, v79))), v62);
      *(_QWORD *)&v105 = *(_OWORD *)&vsubq_f64(_Q7, v60);
      if (fabs(v104.f64[0]) >= 1.0e-10 || fabs(v104.f64[1]) >= 1.0e-10 || fabs(v105) >= 1.0e-10)
      {
        v64.f64[1] = *(double *)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).i64;
        v104.f64[1] = *(double *)vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).i64;
        v66 = (vmulq_f64(v64, v104).f64[0] + v64.f64[1] * v104.f64[1] + v65 * v105)
            / sqrt((vmulq_f64(v64, v64).f64[0] + v64.f64[1] * v64.f64[1] + v65 * v65)* (vmulq_f64(v104, v104).f64[0] + v104.f64[1] * v104.f64[1] + v105 * v105));
      }
    }
    if (fmin(v66, 1.0) > cos(*(double *)(a1 + 1944) * 0.0174532925))
    {
      if (!*(_BYTE *)(a1 + 1952))
        return 0;
      v106 = *(_QWORD *)(v9 + 496);
      v107 = *(_QWORD *)(v9 + 504);
      if (v106 == v107 || *(_DWORD *)(v106 + 16) == *(_DWORD *)(v107 - 48))
        return 0;
    }
  }
  if (*(_BYTE *)(a1 + 1954))
  {
    v108 = *(_QWORD *)(v9 + 496);
    v109 = *(_QWORD *)(v9 + 504);
    if (v108 == v109 || *(_DWORD *)(v108 + 16) == *(_DWORD *)(v109 - 48))
      return 0;
  }
  if (*(_BYTE *)(a1 + 1953))
  {
    v110 = *(_QWORD *)(a1 + 8);
    v113 = *(_QWORD *)(v110 + 56);
    v111 = v110 + 56;
    v112 = v113;
    if (v113)
    {
      do
      {
        v114 = v112;
        v112 = *(_QWORD *)(v112 + 8);
      }
      while (v112);
    }
    else
    {
      do
      {
        v114 = *(_QWORD *)(v111 + 16);
        _ZF = *(_QWORD *)v114 == v111;
        v111 = v114;
      }
      while (_ZF);
    }
    v115 = *(_QWORD *)(v9 + 496);
    v116 = *(_QWORD *)(v9 + 504);
    if (v115 != v116)
    {
      v117 = *(_QWORD *)(v114 + 32);
      v118 = *(_DWORD *)(v114 + 40);
      while (*(_QWORD *)v115 != v117 || *(_DWORD *)(v115 + 8) != v118)
      {
        result = 0;
        v115 += 64;
        if (v115 == v116)
          return result;
      }
    }
    if (v115 == v116)
      return 0;
  }
  if (*(_BYTE *)(a1 + 1955))
  {
    v119 = v9 + 40;
    if (!*(_BYTE *)(v9 + 488))
      v119 = 0;
    v120 = *(double *)(v119 + 24);
    _Q1 = *(_OWORD *)(v119 + 8);
    v122 = *(uint64_t **)(v119 + 96);
    v123 = *v122;
    v124 = (double *)v122[2];
    v125 = v122[4];
    v126 = (double *)v122[6];
    v127 = *(double *)&_Q1 - *v124;
    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v124[1];
    v128 = v120 - v124[2];
    _Q3.f64[0] = *(float64_t *)(v123 + 16);
    _Q7 = *(_OWORD *)(v123 + 48);
    _Q3.f64[1] = *(float64_t *)(v123 + 40);
    v131 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v123, *(int64x2_t *)(v123 + 24)), v127), (float64x2_t)vzip2q_s64(*(int64x2_t *)v123, *(int64x2_t *)(v123 + 24)), *(double *)&_Q1), _Q3, v128);
    __asm { FMLA            D2, D1, V7.D[1] }
    v133 = _D2 + *(double *)(v123 + 64) * v128;
    *(double *)&_Q1 = v131.f64[0] - *v126;
    _D2 = v131.f64[1] - v126[1];
    v135 = v133 - v126[2];
    _Q3.f64[0] = *(float64_t *)(v125 + 16);
    _Q4 = *(int64x2_t *)v125;
    _Q6 = *(int64x2_t *)(v125 + 24);
    _Q16 = *(_OWORD *)(v125 + 48);
    __asm { FMLA            D18, D2, V4.D[1] }
    _Q3.f64[1] = *(float64_t *)(v125 + 40);
    _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v125, _Q6), *(double *)&_Q1), (float64x2_t)vzip2q_s64(*(int64x2_t *)v125, _Q6), _D2), _Q3, v135);
    __asm
    {
      FMLA            D3, D2, V16.D[1]
      FMLA            D1, D2, V6.D[1]
    }
    *(double *)&_Q1 = *(double *)&_Q1 + v135 * _Q3.f64[1];
    __asm { FMLA            D2, D1, V17.D[1] }
    if (sqrt(_D2 + (_Q3.f64[0] + v135 * *(double *)(v125 + 64)) * (_Q3.f64[0] + *(double *)(v125 + 64) * v135)) > *(double *)(a1 + 1960))
      return 0;
  }
  v142 = *(char **)(a1 + 5576);
  v143 = *(char **)(a1 + 5584);
  if (v143 != v142)
  {
    v144 = (v143 - v142) >> 4;
    do
    {
      v145 = v144 >> 1;
      v146 = &v142[16 * (v144 >> 1)];
      v148 = *(_DWORD *)v146;
      v147 = v146 + 16;
      v144 += ~(v144 >> 1);
      if (v148 < a2)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
  if (v142 != v143
    && *(_DWORD *)v142 == a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1869, (uint64_t)"linear_system_.template findVariable<SLAMLandmarkVariableType>(landmarkID) == linear_system_.template endVariable<SLAMLandmarkVariableType>()", 141, (uint64_t)"There should not be any SLAM landmark Variable with this track ID.", 66, (void (*)(void **))sub_21023DDB0))
  {
LABEL_119:
    abort();
  }
  if (*(_BYTE *)(v9 + 488))
  {
    LODWORD(v181) = a2;
    BYTE4(v181) = 1;
    *((_QWORD *)&v181 + 1) = v9 + 40;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1871, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_119;
    }
    v149 = *(unsigned __int8 *)(v9 + 488);
    if (*(_BYTE *)(v9 + 488))
      v150 = v9 + 40;
    else
      v150 = 0;
    LODWORD(v181) = a2;
    BYTE4(v181) = 1;
    *((_QWORD *)&v181 + 1) = v150;
    if (!v149)
      goto LABEL_83;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 24))(v9 + 40))
  {
    v182 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 8);
    v183 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 24);
    _Q1 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 64);
    _D3 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 72);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (fabs(sqrt(_D2 + *(double *)(*((_QWORD *)&v181 + 1) + 80) * *(double *)(*((_QWORD *)&v181 + 1) + 80)) + -1.0) <= 0.000001)
      goto LABEL_77;
    v154 = "std::fabs(anchor_direction().norm2() - 1) <= 1e-6";
    v155 = 811;
    v156 = 49;
  }
  else
  {
    v154 = "initializeImpl()";
    v155 = 798;
    v156 = 16;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", v155, (uint64_t)v154, v156, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_119;
  }
LABEL_77:
  if (*((_QWORD *)&v181 + 1)
    && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v181 + 1) + 24))(*((_QWORD *)&v181 + 1)))
  {
    v182 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 8);
    v183 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 24);
    _Q1 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 64);
    _D3 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 72);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (fabs(sqrt(_D2 + *(double *)(*((_QWORD *)&v181 + 1) + 80) * *(double *)(*((_QWORD *)&v181 + 1) + 80)) + -1.0) <= 0.000001
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      if (sub_20FC2870C(a1 + 5184, (unsigned int *)&v181))
      {
        *(_BYTE *)(a1 + 7868) = 0;
        *(_DWORD *)(a1 + 7864) = 0;
      }
      goto LABEL_83;
    }
    goto LABEL_119;
  }
LABEL_83:
  v160 = *(_QWORD **)(a1 + 8);
  v161 = v160[8];
  v162 = v160[39] * v161;
  if (v162)
  {
    for (i = 0; i != v162; ++i)
    {
      v165 = i / v161;
      v166 = i % v161;
      v167 = (_QWORD *)v160[6];
      if (((i % v161) & 0x8000000000000000) != 0)
      {
        do
        {
          v174 = (_QWORD *)*v167;
          if (*v167)
          {
            do
            {
              v168 = v174;
              v174 = (_QWORD *)v174[1];
            }
            while (v174);
          }
          else
          {
            do
            {
              v168 = (_QWORD *)v167[2];
              _ZF = *v168 == (_QWORD)v167;
              v167 = v168;
            }
            while (_ZF);
          }
          v167 = v168;
          _CF = __CFADD__(v166++, 1);
        }
        while (!_CF);
      }
      else if (v166)
      {
        do
        {
          v173 = (_QWORD *)v167[1];
          if (v173)
          {
            do
            {
              v168 = v173;
              v173 = (_QWORD *)*v173;
            }
            while (v173);
          }
          else
          {
            do
            {
              v168 = (_QWORD *)v167[2];
              _ZF = *v168 == (_QWORD)v167;
              v167 = v168;
            }
            while (!_ZF);
          }
          v167 = v168;
          v172 = v166-- <= 1;
        }
        while (!v172);
      }
      else
      {
        v168 = (_QWORD *)v160[6];
      }
      v169 = *((_OWORD *)v168 + 2);
      v170 = (_QWORD *)v160[37];
      if (v165 < 0)
      {
        do
        {
          v175 = (_QWORD *)*v170;
          if (*v170)
          {
            do
            {
              v171 = v175;
              v175 = (_QWORD *)v175[1];
            }
            while (v175);
          }
          else
          {
            do
            {
              v171 = (_QWORD *)v170[2];
              _ZF = *v171 == (_QWORD)v170;
              v170 = v171;
            }
            while (_ZF);
          }
          v170 = v171;
          _CF = __CFADD__(v165++, 1);
        }
        while (!_CF);
      }
      else if (v161 <= i)
      {
        do
        {
          v176 = (_QWORD *)v170[1];
          if (v176)
          {
            do
            {
              v171 = v176;
              v176 = (_QWORD *)*v176;
            }
            while (v176);
          }
          else
          {
            do
            {
              v171 = (_QWORD *)v170[2];
              _ZF = *v171 == (_QWORD)v170;
              v170 = v171;
            }
            while (!_ZF);
          }
          v170 = v171;
          v172 = v165-- <= 1;
        }
        while (!v172);
      }
      else
      {
        v171 = (_QWORD *)v160[37];
      }
      v164 = *((_DWORD *)v171 + 8);
      v184 = v169;
      LODWORD(v185) = v164;
      sub_20FC24D84(a1, (uint64_t)&v184, v9, a3);
    }
  }
  *(_DWORD *)(v9 + 520) = 2;
  return 1;
}

void sub_20FC24D84(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  double v22;
  double v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  std::string::size_type v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  int64x2_t *v32;
  unint64_t *v33;
  int64x2_t *v34;
  unint64_t v35;
  int64x2_t *v36;
  unint64_t v37;
  unint64_t *v38;
  int64x2_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  char *v46;
  unsigned int v47;
  std::string::size_type v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  char *v54;
  unsigned int v55;
  std::string::size_type v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  char *v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  char *v78;
  unsigned int v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  char *v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  __n128 *v92;
  __n128 v93;
  __n128 v94;
  unint64_t v95;
  int64x2_t *v96;
  int64x2_t *v97;
  unint64_t *v98;
  char v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unsigned int v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  unsigned int v127;
  _QWORD *v128;
  void **v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  int v133;
  char *v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  char *v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  char *v145;
  unsigned int v146;
  uint64_t v147;
  _QWORD *v148;
  void **v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  const char *v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  _QWORD *v159;
  void **v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  char *v164;
  char *v165;
  char *v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int *v169;
  char *v170;
  unsigned int v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int *v174;
  char *v175;
  unsigned int v176;
  uint64_t v177;
  _QWORD *v178;
  void **v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  const char *v185;
  uint64_t v186;
  _QWORD *v187;
  int v188;
  _QWORD *v189;
  void **v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  char *v194;
  char *v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int *v199;
  char *v200;
  unsigned int v201;
  unint64_t v202;
  unint64_t v203;
  unsigned int *v204;
  char *v205;
  unsigned int v206;
  uint64_t v207;
  _QWORD *v208;
  void **v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  const char *v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  void **v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  char *v223;
  char *v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int *v228;
  char *v229;
  unsigned int v230;
  unint64_t v231;
  unint64_t v232;
  unsigned int *v233;
  char *v234;
  unsigned int v235;
  uint64_t v236;
  _QWORD *v237;
  void **v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  const char *v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  void **v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  char *v252;
  char *v253;
  char *v254;
  unint64_t v255;
  unint64_t v256;
  unsigned int *v257;
  char *v258;
  unsigned int v259;
  unint64_t v260;
  unint64_t v261;
  unsigned int *v262;
  char *v263;
  unsigned int v264;
  uint64_t v265;
  _QWORD *v266;
  void **v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  const char *v273;
  uint64_t v274;
  _QWORD *v275;
  int v276;
  _QWORD *v277;
  void **v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  char *v282;
  char *v283;
  char *v284;
  unint64_t v285;
  unint64_t v286;
  unsigned int *v287;
  char *v288;
  unsigned int v289;
  unint64_t v290;
  unint64_t v291;
  unsigned int *v292;
  char *v293;
  unsigned int v294;
  uint64_t v295;
  _QWORD *v296;
  void **v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  const char *v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  void **v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t *v315;
  _QWORD *v316;
  unint64_t v317;
  _QWORD *v318;
  void **v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  BOOL v323;
  char v324;
  size_t v325;
  void *v326;
  _QWORD *v327;
  void **v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  double v332;
  const void **v333;
  const void *v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  std::string *v338;
  simd_double2 v339;
  std::string *v340;
  simd_double2 v341;
  uint64_t v342;
  uint64_t v343;
  _BOOL4 v344;
  _DWORD *v345;
  _QWORD *v346;
  unint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t *v352;
  _QWORD *v353;
  unint64_t v354;
  uint64_t v355;
  char v356;
  __int16 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v377;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  unint64_t v391;
  unsigned int v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unsigned int v396;
  BOOL v397;
  int v398;
  _DWORD *v399;
  unint64_t v400;
  int64x2_t v401;
  uint64_t v402;
  int64x2_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t *v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  uint64_t *v415;
  __n128 v416;
  __n128 v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  __n128 v421;
  __n128 v422;
  unint64_t v423;
  char *v424;
  int64x2_t *v425;
  unint64_t v426;
  char *v427;
  __int8 *v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  int64x2_t *v433;
  int64x2_t *v434;
  int64x2_t v435;
  int64x2_t v436;
  uint64_t v437;
  int64x2_t *v438;
  uint64_t v439;
  int64x2_t *v440;
  std::__shared_weak_count *v441;
  unint64_t *p_shared_owners;
  unint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  uint64_t *v446;
  unint64_t v447;
  char *v448;
  uint64_t v449;
  __n128 v450;
  __int128 v451;
  __n128 v452;
  int64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  int v456;
  int64x2_t *v457;
  unsigned int *v458;
  int v459;
  unint64_t *v460;
  __n128 *v461;
  int64x2_t *v462;
  simd_double2x2 v463;
  simd_double2x2 v464;
  float64x2_t __src;
  __n128 v466;
  __n128 v467;
  __n128 v468;
  __n128 v469;
  void *v470[2];
  __n128 v471;
  simd_double2 v472;
  __n128 v473;
  unint64_t v474;
  char v475;
  __n128 v476;
  char v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  void *__p[2];
  _BYTE v482[24];
  double v483;
  float64x2_t v484;
  double v485;
  uint64_t v486;
  std::__shared_weak_count *v487;
  uint64_t v488;
  std::__shared_weak_count *v489;
  std::string v490[3];
  __int128 v491;
  __n128 v492;
  simd_double2 v493;
  __n128 v494;
  unint64_t v495;
  char v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  char v499;
  unint64_t v500;
  char v501;
  __n128 v502;

  v9 = *(_QWORD *)(a3 + 496);
  v8 = *(_QWORD *)(a3 + 504);
  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a2 + 16);
  if (v8 != v9)
  {
    v13 = (v8 - v9) >> 6;
    while (1)
    {
      v14 = v13 >> 1;
      v15 = v9 + (v13 >> 1 << 6);
      v16 = *(_DWORD *)(v15 + 16);
      _CF = v16 >= v12;
      if (v16 != v12)
        goto LABEL_9;
      if (*(_QWORD *)v15 >= v10)
        break;
LABEL_3:
      v9 = v15 + 64;
      v14 = v13 + ~v14;
LABEL_4:
      v13 = v14;
      if (!v14)
        goto LABEL_12;
    }
    if (*(_QWORD *)v15 != v10)
      goto LABEL_4;
    _CF = *(_DWORD *)(v15 + 8) >= v11;
LABEL_9:
    if (_CF)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v9 == v8 || *(_DWORD *)(v9 + 16) != v12 || *(_QWORD *)v9 != v10 || *(_DWORD *)(v9 + 8) != v11)
    return;
  v18 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 8) + 1784), (uint64_t *)a2);
  if (v18)
    v27 = v18[13];
  else
    v27 = 0;
  v28 = *(_DWORD *)(a2 + 8);
  v29 = *(_DWORD *)(a2 + 16);
  v30 = *(_DWORD *)(a3 + 32);
  v21.n128_u64[0] = *(_QWORD *)(v9 + 32);
  v19.n128_u32[0] = *(_DWORD *)(v9 + 56);
  v20.n128_u64[0] = *(_QWORD *)(a1 + 2176);
  v458 = a4;
  v31 = *a4;
  v487 = 0;
  v486 = 0;
  v489 = 0;
  v488 = 0;
  v32 = *(int64x2_t **)(a1 + 6656);
  v33 = *(unint64_t **)(a1 + 6664);
  if (v32 == (int64x2_t *)v33)
  {
    v34 = *(int64x2_t **)(a1 + 6656);
  }
  else
  {
    v34 = *(int64x2_t **)(a1 + 6664);
    if (*(v33 - 23) >= v31)
    {
      v35 = 0xD37A6F4DE9BD37A7 * (((char *)v33 - (char *)v32) >> 3);
      v36 = *(int64x2_t **)(a1 + 6656);
      do
      {
        v37 = v35 >> 1;
        v38 = (unint64_t *)v36 + 23 * (v35 >> 1);
        v40 = *v38;
        v39 = (int64x2_t *)(v38 + 23);
        v35 += ~(v35 >> 1);
        if (v40 < v31)
          v36 = v39;
        else
          v35 = v37;
      }
      while (v35);
      v34 = *(int64x2_t **)(a1 + 6664);
      if (v36 != (int64x2_t *)v33)
      {
        v34 = v36;
        if (v36->i64[0] == v31)
        {
LABEL_113:
          v103 = 1;
          v104 = v487;
          if (!v487)
            goto LABEL_120;
          goto LABEL_116;
        }
      }
    }
  }
  v21 = (__n128)vcvtq_f64_f32((float32x2_t)v21.n128_u64[0]);
  *(__n128 *)&v490[0].__r_.__value_.__r.__words[1] = v21;
  v490[0].__r_.__value_.__r.__words[0] = v31;
  v490[1].__r_.__value_.__r.__words[0] = v27;
  *(double *)&v490[1].__r_.__value_.__l.__size_ = v20.n128_f64[0] * v19.n128_f32[0];
  v490[1].__r_.__value_.__s.__data_[16] = 0;
  v19 = 0uLL;
  *(_OWORD *)&v490[2].__r_.__value_.__r.__words[1] = 0u;
  v491 = 0u;
  v492 = 0u;
  v498 = 0;
  v497 = 0;
  v490[2].__r_.__value_.__r.__words[0] = a1 + 3144;
  v495 = 0xBFF0000000000000;
  v496 = 0;
  v499 = 0;
  v41 = *(char **)(a1 + 5384);
  v42 = *(char **)(a1 + 5392);
  if (v42 == v41)
    goto LABEL_107;
  v43 = (v42 - v41) >> 4;
  do
  {
    v44 = v43 >> 1;
    v45 = (unsigned int *)&v41[16 * (v43 >> 1)];
    v47 = *v45;
    v46 = (char *)(v45 + 4);
    v43 += ~(v43 >> 1);
    if (v47 < v29)
      v41 = v46;
    else
      v43 = v44;
  }
  while (v43);
  if (v41 == v42 || *(_DWORD *)v41 != v29)
  {
LABEL_107:
    v99 = 1;
    v100 = v489;
    if (!v489)
      goto LABEL_112;
    goto LABEL_108;
  }
  v48 = *((_QWORD *)v41 + 1);
  v490[2].__r_.__value_.__l.__size_ = v48;
  ++*(_DWORD *)(*((_QWORD *)v41 + 1) + 8);
  v49 = *(char **)(a1 + 5192);
  v50 = *(char **)(a1 + 5200);
  if (v50 != v49)
  {
    v51 = (v50 - v49) >> 4;
    do
    {
      v52 = v51 >> 1;
      v53 = (unsigned int *)&v49[16 * (v51 >> 1)];
      v55 = *v53;
      v54 = (char *)(v53 + 4);
      v51 += ~(v51 >> 1);
      if (v55 < v28)
        v49 = v54;
      else
        v51 = v52;
    }
    while (v51);
  }
  if (v49 == v50 || *(_DWORD *)v49 != v28)
  {
    v80 = 0;
    v72 = 0;
    v64 = 0;
    v56 = 0;
LABEL_97:
    if (v48)
      --*(_DWORD *)(v48 + 8);
    if (v56)
      --*(_DWORD *)(v56 + 8);
    if (v64)
      --*(_DWORD *)(v64 + 8);
    if (v72)
      --*(_DWORD *)(v72 + 8);
    if (v80)
      --*(_DWORD *)(v80 + 8);
    goto LABEL_107;
  }
  v56 = *((_QWORD *)v49 + 1);
  v490[2].__r_.__value_.__r.__words[2] = v56;
  ++*(_DWORD *)(*((_QWORD *)v49 + 1) + 8);
  v57 = *(char **)(a1 + 5864);
  v58 = *(char **)(a1 + 5872);
  if (v58 != v57)
  {
    v59 = (v58 - v57) >> 4;
    do
    {
      v60 = v59 >> 1;
      v61 = (unsigned int *)&v57[16 * (v59 >> 1)];
      v63 = *v61;
      v62 = (char *)(v61 + 4);
      v59 += ~(v59 >> 1);
      if (v63 < v29)
        v57 = v62;
      else
        v59 = v60;
    }
    while (v59);
  }
  if (v57 == v58 || *(_DWORD *)v57 != v29)
  {
    v80 = 0;
    v72 = 0;
    v64 = 0;
    goto LABEL_97;
  }
  v64 = *((_QWORD *)v57 + 1);
  *(_QWORD *)&v491 = v64;
  ++*(_DWORD *)(*((_QWORD *)v57 + 1) + 8);
  v65 = *(char **)(a1 + 5960);
  v66 = *(char **)(a1 + 5968);
  if (v66 != v65)
  {
    v67 = (v66 - v65) >> 4;
    do
    {
      v68 = v67 >> 1;
      v69 = (unsigned int *)&v65[16 * (v67 >> 1)];
      v71 = *v69;
      v70 = (char *)(v69 + 4);
      v67 += ~(v67 >> 1);
      if (v71 < v29)
        v65 = v70;
      else
        v67 = v68;
    }
    while (v67);
  }
  if (v65 == v66 || *(_DWORD *)v65 != v29)
  {
    v80 = 0;
    v72 = 0;
    goto LABEL_97;
  }
  v72 = *((_QWORD *)v65 + 1);
  *((_QWORD *)&v491 + 1) = v72;
  ++*(_DWORD *)(*((_QWORD *)v65 + 1) + 8);
  v73 = *(char **)(a1 + 6056);
  v74 = *(char **)(a1 + 6064);
  if (v74 != v73)
  {
    v75 = (v74 - v73) >> 4;
    do
    {
      v76 = v75 >> 1;
      v77 = (unsigned int *)&v73[16 * (v75 >> 1)];
      v79 = *v77;
      v78 = (char *)(v77 + 4);
      v75 += ~(v75 >> 1);
      if (v79 < v29)
        v73 = v78;
      else
        v75 = v76;
    }
    while (v75);
  }
  if (v73 == v74 || *(_DWORD *)v73 != v29)
  {
    v80 = 0;
    goto LABEL_97;
  }
  v80 = *((_QWORD *)v73 + 1);
  v492.n128_u64[0] = v80;
  ++*(_DWORD *)(*((_QWORD *)v73 + 1) + 8);
  v81 = *(char **)(a1 + 5576);
  v82 = *(char **)(a1 + 5584);
  if (v82 != v81)
  {
    v83 = (v82 - v81) >> 4;
    do
    {
      v84 = v83 >> 1;
      v85 = (unsigned int *)&v81[16 * (v83 >> 1)];
      v87 = *v85;
      v86 = (char *)(v85 + 4);
      v83 += ~(v83 >> 1);
      if (v87 < v30)
        v81 = v86;
      else
        v83 = v84;
    }
    while (v83);
  }
  if (v81 == v82)
    goto LABEL_97;
  v462 = v34;
  if (*(_DWORD *)v81 != v30)
    goto LABEL_97;
  v88 = *((_QWORD *)v81 + 1);
  v492.n128_u64[1] = v88;
  ++*(_DWORD *)(*((_QWORD *)v81 + 1) + 8);
  if (!*(_BYTE *)(v48 + 20)
    && !*(_BYTE *)(v56 + 20)
    && !*(_BYTE *)(v64 + 20)
    && !*(_BYTE *)(v72 + 20)
    && !*(_BYTE *)(v80 + 20)
    && !*(_BYTE *)(v88 + 20))
  {
    --*(_DWORD *)(v48 + 8);
    --*(_DWORD *)(v56 + 8);
    v19 = 0uLL;
    *(_OWORD *)&v490[2].__r_.__value_.__r.__words[1] = 0u;
    --*(_DWORD *)(v64 + 8);
    --*(_DWORD *)(v72 + 8);
    v491 = 0u;
    --*(_DWORD *)(v80 + 8);
    v492.n128_u64[0] = 0;
    --*(_DWORD *)(v88 + 8);
    v99 = 1;
    v100 = v489;
    if (!v489)
      goto LABEL_112;
    goto LABEL_108;
  }
  *(_QWORD *)&__src.f64[0] = v31;
  *(_QWORD *)&__src.f64[1] = v31;
  v21 = *(__n128 *)&v490[1].__r_.__value_.__r.__words[2];
  v466 = *(__n128 *)&v490[0].__r_.__value_.__r.__words[1];
  v467 = *(__n128 *)&v490[1].__r_.__value_.__l.__data_;
  v468 = *(__n128 *)&v490[1].__r_.__value_.__r.__words[2];
  v469 = *(__n128 *)&v490[2].__r_.__value_.__r.__words[1];
  *(_OWORD *)v470 = v491;
  v471 = v492;
  v472 = v493;
  v473 = v494;
  v474 = v495;
  v475 = v496;
  v476 = 0uLL;
  v497 = 0;
  v498 = 0;
  v477 = 0;
  if (v33 == (unint64_t *)v34 || v34->i64[0] != v31)
  {
    v449 = (char *)v34 - (char *)v32;
    v453 = 0xD37A6F4DE9BD37A7 * (((char *)v34 - (char *)v32) >> 3);
    v89 = *(_QWORD *)(a1 + 6672);
    if ((unint64_t)v33 >= v89)
    {
      v407 = 0xD37A6F4DE9BD37A7 * (((char *)v33 - (char *)v32) >> 3) + 1;
      if (v407 > 0x1642C8590B21642)
        sub_20E867F44();
      v408 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v89 - (_QWORD)v32) >> 3);
      v409 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v89 - (_QWORD)v32) >> 3);
      if (v409 > v407)
        v407 = v409;
      if (v408 >= 0xB21642C8590B21)
        v410 = 0x1642C8590B21642;
      else
        v410 = v407;
      *(_QWORD *)&v482[16] = a1 + 6672;
      if (v410)
      {
        if (v410 > 0x1642C8590B21642)
          sub_20E877A38();
        v448 = (char *)operator new(184 * v410);
      }
      else
      {
        v448 = 0;
      }
      __p[0] = v448;
      __p[1] = &v448[184 * v453];
      v461 = (__n128 *)__p[1];
      *(void **)v482 = __p[1];
      *(_QWORD *)&v482[8] = &v448[184 * v410];
      if (v453 == v410)
      {
        if (v449 < 1)
        {
          if (v32 == v462)
            v420 = 1;
          else
            v420 = 2 * v453;
          if (v420 > 0x1642C8590B21642)
            sub_20E877A38();
          __p[0] = operator new(184 * v420);
          v461 = (__n128 *)((char *)__p[0] + 184 * (v420 >> 2));
          __p[1] = v461;
          *(_QWORD *)&v482[8] = (char *)__p[0] + 184 * v420;
          if (v448)
            operator delete(v448);
        }
        else
        {
          v419 = v453 + 2;
          if (v453 >= -1)
            v419 = v453 + 1;
          v461 = (__n128 *)((char *)__p[1] - 184 * (v419 >> 1));
          __p[1] = v461;
        }
      }
      v461->n128_u64[0] = v31;
      v461->n128_u64[1] = v31;
      v461[1] = v466;
      v421 = v468;
      v461[2] = v467;
      v461[3] = v421;
      v422 = *(__n128 *)v470;
      v461[4] = v469;
      v461[5] = v422;
      v461[6] = v471;
      v461[7] = (__n128)v472;
      v461[8] = v473;
      v423 = v474;
      v461[9].n128_u8[8] = v475;
      v461[9].n128_u64[0] = v423;
      v461[10] = v476;
      v476 = 0uLL;
      v461[11].n128_u8[0] = v477;
      v424 = &v461[11].n128_i8[8];
      *(_QWORD *)v482 = (char *)v461 + 184;
      v425 = *(int64x2_t **)(a1 + 6656);
      if (v425 != v462)
      {
        v426 = 0;
        do
        {
          v427 = (char *)v461 + v426;
          v428 = &v462->i8[v426];
          *((_QWORD *)v427 - 23) = *(_QWORD *)((char *)&v462[-11] + v426 - 8);
          *((_QWORD *)v427 - 22) = v462[-11].i64[v426 / 8];
          *(int64x2_t *)(v427 - 168) = *(int64x2_t *)((char *)&v462[-10] + v426 - 8);
          v429 = *(__int128 *)((char *)&v462[-9] + v426 - 8);
          *(int64x2_t *)(v427 - 136) = *(int64x2_t *)((char *)&v462[-8] + v426 - 8);
          *(_OWORD *)(v427 - 152) = v429;
          v430 = *(__int128 *)((char *)&v462[-7] + v426 - 8);
          v431 = *(__int128 *)((char *)&v462[-6] + v426 - 8);
          v21 = *(__n128 *)((char *)&v462[-5] + v426 - 8);
          *(__n128 *)(v427 - 88) = v21;
          *(_OWORD *)(v427 - 104) = v431;
          *(_OWORD *)(v427 - 120) = v430;
          *(int64x2_t *)(v427 - 72) = *(int64x2_t *)((char *)&v462[-4] + v426 - 8);
          *(int64x2_t *)(v427 - 56) = *(int64x2_t *)((char *)&v462[-3] + v426 - 8);
          v432 = *(_QWORD *)((char *)&v462[-2] + v426 - 8);
          *(v427 - 32) = v462[-2].i8[v426];
          *((_QWORD *)v427 - 5) = v432;
          *(int64x2_t *)(v427 - 24) = *(int64x2_t *)((char *)&v462[-1] + v426 - 8);
          *((_QWORD *)v428 - 3) = 0;
          *((_QWORD *)v428 - 2) = 0;
          *(v427 - 8) = v462->i8[v426 - 8];
          v426 -= 184;
        }
        while (&v462->i8[v426] != (__int8 *)v425);
        v461 = (__n128 *)((char *)v461 + v426);
      }
      v433 = *(int64x2_t **)(a1 + 6664);
      if (v433 != v462)
      {
        v434 = v462;
        do
        {
          *(_QWORD *)v424 = v434->i64[0];
          *((_QWORD *)v424 + 1) = v434->i64[1];
          *((int64x2_t *)v424 + 1) = v434[1];
          v435 = v434[3];
          *((int64x2_t *)v424 + 2) = v434[2];
          *((int64x2_t *)v424 + 3) = v435;
          v436 = v434[4];
          v21 = (__n128)v434[6];
          *((int64x2_t *)v424 + 5) = v434[5];
          *((__n128 *)v424 + 6) = v21;
          *((int64x2_t *)v424 + 4) = v436;
          *((int64x2_t *)v424 + 7) = v434[7];
          *((int64x2_t *)v424 + 8) = v434[8];
          v437 = v434[9].i64[0];
          v424[152] = v434[9].i8[8];
          *((_QWORD *)v424 + 18) = v437;
          *((int64x2_t *)v424 + 10) = v434[10];
          v434[10].i64[0] = 0;
          v434[10].i64[1] = 0;
          v424[176] = v434[11].i8[0];
          v424 += 184;
          v434 = (int64x2_t *)((char *)v434 + 184);
        }
        while (v434 != v433);
        v462 = *(int64x2_t **)(a1 + 6664);
      }
      v438 = *(int64x2_t **)(a1 + 6656);
      *(_QWORD *)(a1 + 6656) = v461;
      *(_QWORD *)(a1 + 6664) = v424;
      v439 = *(_QWORD *)(a1 + 6672);
      *(_QWORD *)(a1 + 6672) = *(_QWORD *)&v482[8];
      *(_QWORD *)&v482[8] = v439;
      __p[1] = v438;
      __p[0] = v438;
      if (v462 != v438)
      {
        v440 = v462;
        do
        {
          *(_QWORD *)v482 = (char *)v440 - 184;
          v441 = (std::__shared_weak_count *)v440[-1].i64[0];
          if (v441)
          {
            p_shared_owners = (unint64_t *)&v441->__shared_owners_;
            do
              v443 = __ldaxr(p_shared_owners);
            while (__stlxr(v443 - 1, p_shared_owners));
            if (!v443)
            {
              ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
              std::__shared_weak_count::__release_weak(v441);
            }
          }
          v440 = *(int64x2_t **)v482;
        }
        while (*(int64x2_t **)v482 != v438);
        v462 = (int64x2_t *)__p[0];
      }
      if (v462)
        operator delete(v462);
    }
    else if (v34 == (int64x2_t *)v33)
    {
      *v33 = v31;
      v415 = &v32->i64[((char *)v34 - (char *)v32) >> 3];
      v415[1] = v31;
      *((__n128 *)v415 + 1) = v466;
      v416 = v468;
      *((__n128 *)v415 + 2) = v467;
      *((__n128 *)v415 + 3) = v416;
      v417 = v469;
      v21 = v471;
      *((_OWORD *)v415 + 5) = *(_OWORD *)v470;
      *((__n128 *)v415 + 6) = v21;
      *((__n128 *)v415 + 4) = v417;
      *((simd_double2 *)v415 + 7) = v472;
      *((__n128 *)v415 + 8) = v473;
      v418 = v474;
      *((_BYTE *)v415 + 152) = v475;
      v415[18] = v418;
      v415[20] = 0;
      v415[21] = 0;
      v476 = 0uLL;
      *((_BYTE *)v415 + 176) = 0;
      *(_QWORD *)(a1 + 6664) = v33 + 23;
    }
    else
    {
      v464.columns[0] = *(simd_double2 *)&v490[0].__r_.__value_.__r.__words[1];
      *(_OWORD *)__p = *(_OWORD *)&v490[1].__r_.__value_.__l.__data_;
      *(_OWORD *)v482 = *(_OWORD *)&v490[1].__r_.__value_.__r.__words[2];
      v21 = v469;
      v451 = *(_OWORD *)v470;
      v452 = v469;
      v450 = v471;
      v463.columns[0] = v493;
      v502 = v494;
      v501 = v496;
      v500 = v495;
      v90 = v33;
      v476 = 0uLL;
      v91 = v33 - 23;
      if ((unint64_t)v33 >= 0xB8)
      {
        v92 = (__n128 *)(v33 - 23);
        v90 = v33;
        do
        {
          *v90 = v92->n128_u64[0];
          v90[1] = v92->n128_u64[1];
          *((__n128 *)v90 + 1) = v92[1];
          v93 = v92[3];
          *((__n128 *)v90 + 2) = v92[2];
          *((__n128 *)v90 + 3) = v93;
          v94 = v92[4];
          v21 = v92[6];
          *((__n128 *)v90 + 5) = v92[5];
          *((__n128 *)v90 + 6) = v21;
          *((__n128 *)v90 + 4) = v94;
          *((__n128 *)v90 + 7) = v92[7];
          *((__n128 *)v90 + 8) = v92[8];
          v95 = v92[9].n128_u64[0];
          *((_BYTE *)v90 + 152) = v92[9].n128_u8[8];
          v90[18] = v95;
          *((__n128 *)v90 + 10) = v92[10];
          v92[10].n128_u64[0] = 0;
          v92[10].n128_u64[1] = 0;
          *((_BYTE *)v90 + 176) = v92[11].n128_u8[0];
          v90 += 23;
          v92 = (__n128 *)((char *)v92 + 184);
        }
        while (v92 < (__n128 *)v33);
      }
      *(_QWORD *)(a1 + 6664) = v90;
      v96 = v34;
      if (v33 != &v34[11].u64[1])
      {
        v97 = (int64x2_t *)(v33 - 23);
        v98 = v33;
        do
        {
          v400 = v97[-12].u64[1];
          v97 = (int64x2_t *)((char *)v97 - 184);
          *(v98 - 23) = v400;
          v98 -= 23;
          v98[1] = v97->u64[1];
          *((int64x2_t *)v98 + 1) = v97[1];
          v401 = v97[3];
          *((int64x2_t *)v98 + 2) = v97[2];
          *((int64x2_t *)v98 + 3) = v401;
          v98[8] = v97[4].u64[0];
          v98[9] = v97[4].u64[1];
          v98[10] = v97[5].u64[0];
          v98[11] = v97[5].u64[1];
          v98[12] = v97[6].u64[0];
          v98[13] = v97[6].u64[1];
          *((int64x2_t *)v98 + 7) = v97[7];
          *((int64x2_t *)v98 + 8) = v97[8];
          v402 = v97[9].i64[0];
          *((_BYTE *)v98 + 152) = v97[9].i8[8];
          v98[18] = v402;
          v403 = v97[10];
          v97[10].i64[0] = 0;
          v97[10].i64[1] = 0;
          v404 = (std::__shared_weak_count *)v98[21];
          *((int64x2_t *)v98 + 10) = v403;
          if (v404)
          {
            v405 = (unint64_t *)&v404->__shared_owners_;
            do
              v406 = __ldaxr(v405);
            while (__stlxr(v406 - 1, v405));
            if (!v406)
            {
              v454 = v404;
              v455 = v98;
              v460 = v91;
              v457 = v97;
              ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
              std::__shared_weak_count::__release_weak(v454);
              v98 = v455;
              v97 = v457;
              v91 = v460;
              v96 = v462;
            }
          }
          *((_BYTE *)v33 - 8) = *((_BYTE *)v91 - 8);
          v33 = v98;
          v91 = (unint64_t *)v97;
        }
        while (v97 != v96);
      }
      *v96 = vdupq_n_s64(v31);
      v411 = &v32->i64[23 * v453];
      *((_OWORD *)v411 + 1) = v464.columns[0];
      *((_OWORD *)v411 + 2) = *(_OWORD *)__p;
      *((_OWORD *)v411 + 3) = *(_OWORD *)v482;
      *((__n128 *)v411 + 4) = v452;
      *((_OWORD *)v411 + 5) = v451;
      *((__n128 *)v411 + 6) = v450;
      *((_OWORD *)v411 + 7) = v463.columns[0];
      *((__n128 *)v411 + 8) = v502;
      v411[18] = v500;
      *((_BYTE *)v411 + 152) = v501;
      v412 = (std::__shared_weak_count *)v411[21];
      v411[20] = 0;
      v411[21] = 0;
      if (v412)
      {
        v413 = (unint64_t *)&v412->__shared_owners_;
        do
          v414 = __ldaxr(v413);
        while (__stlxr(v414 - 1, v413));
        if (!v414)
        {
          ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
          std::__shared_weak_count::__release_weak(v412);
        }
      }
      v32[11].i8[184 * v453] = 0;
    }
    if (v476.n128_u64[1])
    {
      v444 = (unint64_t *)(v476.n128_u64[1] + 8);
      do
        v445 = __ldaxr(v444);
      while (__stlxr(v445 - 1, v444));
      if (!v445)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v476.n128_u64[1] + 16))(v476.n128_u64[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v476.n128_u64[1]);
      }
    }
  }
  *(_BYTE *)(a1 + 6802) = 0;
  *(_BYTE *)(a1 + 6800) = 0;
  v20 = (__n128)xmmword_210378060;
  v19 = (__n128)vaddq_s64(*(int64x2_t *)(a1 + 6784), (int64x2_t)xmmword_210378060);
  *(__n128 *)(a1 + 6784) = v19;
  if (v498)
  {
    v446 = &v498->__shared_owners_;
    do
      v447 = __ldaxr((unint64_t *)v446);
    while (__stlxr(v447 - 1, (unint64_t *)v446));
    if (!v447)
    {
      ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
      std::__shared_weak_count::__release_weak(v498);
    }
  }
  v99 = 0;
  v100 = v489;
  if (v489)
  {
LABEL_108:
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
LABEL_112:
  if ((v99 & 1) != 0)
    goto LABEL_113;
  v103 = 0;
  *(_BYTE *)(a1 + 7868) = 0;
  *(_DWORD *)(a1 + 7864) = 0;
  v104 = v487;
  if (!v487)
    goto LABEL_120;
LABEL_116:
  v105 = (unint64_t *)&v104->__shared_owners_;
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128))v104->__on_zero_shared)(v104, v19, v20, v21);
    std::__shared_weak_count::__release_weak(v104);
  }
LABEL_120:
  if (v103)
  {
    v107 = *(char **)(a1 + 5576);
    v108 = *(char **)(a1 + 5584);
    if (v108 != v107)
    {
      v109 = (v108 - v107) >> 4;
      do
      {
        v110 = v109 >> 1;
        v111 = &v107[16 * (v109 >> 1)];
        v113 = *(_DWORD *)v111;
        v112 = v111 + 16;
        v109 += ~(v109 >> 1);
        if (v113 < v30)
          v107 = v112;
        else
          v109 = v110;
      }
      while (v109);
    }
    if ((v107 == v108 || *(_DWORD *)v107 != v30)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 857, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_476;
    }
    v114 = *(_QWORD **)(a1 + 6656);
    v115 = *(_QWORD **)(a1 + 6664);
    if (v115 != v114)
    {
      v116 = 0xD37A6F4DE9BD37A7 * (v115 - v114);
      do
      {
        v117 = v116 >> 1;
        v118 = &v114[23 * (v116 >> 1)];
        v120 = *v118;
        v119 = v118 + 23;
        v116 += ~(v116 >> 1);
        if (v120 < v31)
          v114 = v119;
        else
          v116 = v117;
      }
      while (v116);
      if (v115 != v114
        && *v114 == v31
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 862, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_476;
      }
    }
    sub_20E863438((uint64_t)&__src);
    v121 = *(char **)(a1 + 5576);
    v122 = *(char **)(a1 + 5584);
    if (v122 != v121)
    {
      v123 = (v122 - v121) >> 4;
      do
      {
        v124 = v123 >> 1;
        v125 = &v121[16 * (v123 >> 1)];
        v127 = *(_DWORD *)v125;
        v126 = v125 + 16;
        v123 += ~(v123 >> 1);
        if (v127 < v30)
          v121 = v126;
        else
          v123 = v124;
      }
      while (v123);
    }
    if (v121 == v122 || *(_DWORD *)v121 != v30)
    {
      v133 = 1;
    }
    else
    {
      v128 = sub_20E86A980(&v466, (uint64_t)"error: landmark variable ", 25);
      sub_20FC273AC((uint64_t)__p);
      if (v482[7] >= 0)
        v129 = __p;
      else
        v129 = (void **)__p[0];
      if (v482[7] >= 0)
        v130 = v482[7];
      else
        v130 = (uint64_t)__p[1];
      v131 = sub_20E86A980(v128, (uint64_t)v129, v130);
      sub_20E86A980(v131, (uint64_t)" with ID ", 9);
      v132 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v132, (uint64_t)" was not found.\n", 16);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v133 = 0;
    }
    v134 = *(char **)(a1 + 5384);
    v135 = *(char **)(a1 + 5392);
    v136 = v134;
    if (v135 != v134)
    {
      v137 = (v135 - v134) >> 4;
      v136 = *(char **)(a1 + 5384);
      do
      {
        v138 = v137 >> 1;
        v139 = (unsigned int *)&v136[16 * (v137 >> 1)];
        v141 = *v139;
        v140 = (char *)(v139 + 4);
        v137 += ~(v137 >> 1);
        if (v141 < v29)
          v136 = v140;
        else
          v137 = v138;
      }
      while (v137);
    }
    if (v136 == v135 || *(_DWORD *)v136 != v29)
    {
      v159 = sub_20E86A980(&v466, (uint64_t)"error: variable ", 16);
      sub_20F622C70((uint64_t)__p);
      if (v482[7] >= 0)
        v160 = __p;
      else
        v160 = (void **)__p[0];
      if (v482[7] >= 0)
        v161 = v482[7];
      else
        v161 = (uint64_t)__p[1];
      v162 = sub_20E86A980(v159, (uint64_t)v160, v161);
      sub_20E86A980(v162, (uint64_t)" with ID ", 9);
      v163 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v163, (uint64_t)" not found\n", 11);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v158 = 0;
      v459 = 0;
    }
    else
    {
      if (v135 != v134)
      {
        v142 = (v135 - v134) >> 4;
        do
        {
          v143 = v142 >> 1;
          v144 = (unsigned int *)&v134[16 * (v142 >> 1)];
          v146 = *v144;
          v145 = (char *)(v144 + 4);
          v142 += ~(v142 >> 1);
          if (v146 < v29)
            v134 = v145;
          else
            v142 = v143;
        }
        while (v142);
      }
      v456 = v133;
      if (v134 == v135 || *(_DWORD *)v134 != v29)
        v134 = *(char **)(a1 + 5392);
      v147 = *((_QWORD *)v134 + 1);
      v148 = sub_20E86A980(&v466, (uint64_t)"debug: variable ", 16);
      sub_20F622C70((uint64_t)__p);
      if (v482[7] >= 0)
        v149 = __p;
      else
        v149 = (void **)__p[0];
      if (v482[7] >= 0)
        v150 = v482[7];
      else
        v150 = (uint64_t)__p[1];
      v151 = sub_20E86A980(v148, (uint64_t)v149, v150);
      sub_20E86A980(v151, (uint64_t)" with ID ", 9);
      v152 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v152, (uint64_t)" found (", 8);
      v153 = (_QWORD *)std::ostream::operator<<();
      v154 = sub_20E86A980(v153, (uint64_t)", ", 2);
      if (*(_BYTE *)(v147 + 20))
        v155 = "free";
      else
        v155 = "fixed";
      if (*(_BYTE *)(v147 + 20))
        v156 = 4;
      else
        v156 = 5;
      v157 = sub_20E86A980(v154, (uint64_t)v155, v156);
      sub_20E86A980(v157, (uint64_t)")\n", 2);
      v158 = v456;
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v459 = *(unsigned __int8 *)(v147 + 20);
    }
    v164 = *(char **)(a1 + 5192);
    v165 = *(char **)(a1 + 5200);
    v166 = v164;
    if (v165 != v164)
    {
      v167 = (v165 - v164) >> 4;
      v166 = *(char **)(a1 + 5192);
      do
      {
        v168 = v167 >> 1;
        v169 = (unsigned int *)&v166[16 * (v167 >> 1)];
        v171 = *v169;
        v170 = (char *)(v169 + 4);
        v167 += ~(v167 >> 1);
        if (v171 < v28)
          v166 = v170;
        else
          v167 = v168;
      }
      while (v167);
    }
    if (v166 == v165 || *(_DWORD *)v166 != v28)
    {
      v189 = sub_20E86A980(&v466, (uint64_t)"error: variable ", 16);
      sub_20F622E88((uint64_t)__p);
      if (v482[7] >= 0)
        v190 = __p;
      else
        v190 = (void **)__p[0];
      if (v482[7] >= 0)
        v191 = v482[7];
      else
        v191 = (uint64_t)__p[1];
      v192 = sub_20E86A980(v189, (uint64_t)v190, v191);
      sub_20E86A980(v192, (uint64_t)" with ID ", 9);
      v193 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v193, (uint64_t)" not found\n", 11);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v188 = 0;
    }
    else
    {
      if (v165 != v164)
      {
        v172 = (v165 - v164) >> 4;
        do
        {
          v173 = v172 >> 1;
          v174 = (unsigned int *)&v164[16 * (v172 >> 1)];
          v176 = *v174;
          v175 = (char *)(v174 + 4);
          v172 += ~(v172 >> 1);
          if (v176 < v28)
            v164 = v175;
          else
            v172 = v173;
        }
        while (v172);
      }
      if (v164 == v165 || *(_DWORD *)v164 != v28)
        v164 = *(char **)(a1 + 5200);
      v177 = *((_QWORD *)v164 + 1);
      v178 = sub_20E86A980(&v466, (uint64_t)"debug: variable ", 16);
      sub_20F622E88((uint64_t)__p);
      if (v482[7] >= 0)
        v179 = __p;
      else
        v179 = (void **)__p[0];
      if (v482[7] >= 0)
        v180 = v482[7];
      else
        v180 = (uint64_t)__p[1];
      v181 = sub_20E86A980(v178, (uint64_t)v179, v180);
      sub_20E86A980(v181, (uint64_t)" with ID ", 9);
      v182 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v182, (uint64_t)" found (", 8);
      v183 = (_QWORD *)std::ostream::operator<<();
      v184 = sub_20E86A980(v183, (uint64_t)", ", 2);
      if (*(_BYTE *)(v177 + 20))
        v185 = "free";
      else
        v185 = "fixed";
      if (*(_BYTE *)(v177 + 20))
        v186 = 4;
      else
        v186 = 5;
      v187 = sub_20E86A980(v184, (uint64_t)v185, v186);
      sub_20E86A980(v187, (uint64_t)")\n", 2);
      v188 = v158;
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v459 |= *(unsigned __int8 *)(v177 + 20);
    }
    v194 = *(char **)(a1 + 5864);
    v195 = *(char **)(a1 + 5872);
    v196 = v194;
    if (v195 != v194)
    {
      v197 = (v195 - v194) >> 4;
      v196 = *(char **)(a1 + 5864);
      do
      {
        v198 = v197 >> 1;
        v199 = (unsigned int *)&v196[16 * (v197 >> 1)];
        v201 = *v199;
        v200 = (char *)(v199 + 4);
        v197 += ~(v197 >> 1);
        if (v201 < v29)
          v196 = v200;
        else
          v197 = v198;
      }
      while (v197);
    }
    if (v196 == v195 || *(_DWORD *)v196 != v29)
    {
      v218 = sub_20E86A980(&v466, (uint64_t)"error: variable ", 16);
      sub_20F6230A4((uint64_t)__p);
      if (v482[7] >= 0)
        v219 = __p;
      else
        v219 = (void **)__p[0];
      if (v482[7] >= 0)
        v220 = v482[7];
      else
        v220 = (uint64_t)__p[1];
      v221 = sub_20E86A980(v218, (uint64_t)v219, v220);
      sub_20E86A980(v221, (uint64_t)" with ID ", 9);
      v222 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v222, (uint64_t)" not found\n", 11);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v188 = 0;
    }
    else
    {
      if (v195 != v194)
      {
        v202 = (v195 - v194) >> 4;
        do
        {
          v203 = v202 >> 1;
          v204 = (unsigned int *)&v194[16 * (v202 >> 1)];
          v206 = *v204;
          v205 = (char *)(v204 + 4);
          v202 += ~(v202 >> 1);
          if (v206 < v29)
            v194 = v205;
          else
            v202 = v203;
        }
        while (v202);
      }
      if (v194 == v195 || *(_DWORD *)v194 != v29)
        v194 = *(char **)(a1 + 5872);
      v207 = *((_QWORD *)v194 + 1);
      v208 = sub_20E86A980(&v466, (uint64_t)"debug: variable ", 16);
      sub_20F6230A4((uint64_t)__p);
      if (v482[7] >= 0)
        v209 = __p;
      else
        v209 = (void **)__p[0];
      if (v482[7] >= 0)
        v210 = v482[7];
      else
        v210 = (uint64_t)__p[1];
      v211 = sub_20E86A980(v208, (uint64_t)v209, v210);
      sub_20E86A980(v211, (uint64_t)" with ID ", 9);
      v212 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v212, (uint64_t)" found (", 8);
      v213 = (_QWORD *)std::ostream::operator<<();
      v214 = sub_20E86A980(v213, (uint64_t)", ", 2);
      if (*(_BYTE *)(v207 + 20))
        v215 = "free";
      else
        v215 = "fixed";
      if (*(_BYTE *)(v207 + 20))
        v216 = 4;
      else
        v216 = 5;
      v217 = sub_20E86A980(v214, (uint64_t)v215, v216);
      sub_20E86A980(v217, (uint64_t)")\n", 2);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v459 |= *(unsigned __int8 *)(v207 + 20);
    }
    v223 = *(char **)(a1 + 5960);
    v224 = *(char **)(a1 + 5968);
    v225 = v223;
    if (v224 != v223)
    {
      v226 = (v224 - v223) >> 4;
      v225 = *(char **)(a1 + 5960);
      do
      {
        v227 = v226 >> 1;
        v228 = (unsigned int *)&v225[16 * (v226 >> 1)];
        v230 = *v228;
        v229 = (char *)(v228 + 4);
        v226 += ~(v226 >> 1);
        if (v230 < v29)
          v225 = v229;
        else
          v226 = v227;
      }
      while (v226);
    }
    if (v225 == v224 || *(_DWORD *)v225 != v29)
    {
      v247 = sub_20E86A980(&v466, (uint64_t)"error: variable ", 16);
      sub_20F6232BC((uint64_t)__p);
      if (v482[7] >= 0)
        v248 = __p;
      else
        v248 = (void **)__p[0];
      if (v482[7] >= 0)
        v249 = v482[7];
      else
        v249 = (uint64_t)__p[1];
      v250 = sub_20E86A980(v247, (uint64_t)v248, v249);
      sub_20E86A980(v250, (uint64_t)" with ID ", 9);
      v251 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v251, (uint64_t)" not found\n", 11);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v188 = 0;
    }
    else
    {
      if (v224 != v223)
      {
        v231 = (v224 - v223) >> 4;
        do
        {
          v232 = v231 >> 1;
          v233 = (unsigned int *)&v223[16 * (v231 >> 1)];
          v235 = *v233;
          v234 = (char *)(v233 + 4);
          v231 += ~(v231 >> 1);
          if (v235 < v29)
            v223 = v234;
          else
            v231 = v232;
        }
        while (v231);
      }
      if (v223 == v224 || *(_DWORD *)v223 != v29)
        v223 = *(char **)(a1 + 5968);
      v236 = *((_QWORD *)v223 + 1);
      v237 = sub_20E86A980(&v466, (uint64_t)"debug: variable ", 16);
      sub_20F6232BC((uint64_t)__p);
      if (v482[7] >= 0)
        v238 = __p;
      else
        v238 = (void **)__p[0];
      if (v482[7] >= 0)
        v239 = v482[7];
      else
        v239 = (uint64_t)__p[1];
      v240 = sub_20E86A980(v237, (uint64_t)v238, v239);
      sub_20E86A980(v240, (uint64_t)" with ID ", 9);
      v241 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v241, (uint64_t)" found (", 8);
      v242 = (_QWORD *)std::ostream::operator<<();
      v243 = sub_20E86A980(v242, (uint64_t)", ", 2);
      if (*(_BYTE *)(v236 + 20))
        v244 = "free";
      else
        v244 = "fixed";
      if (*(_BYTE *)(v236 + 20))
        v245 = 4;
      else
        v245 = 5;
      v246 = sub_20E86A980(v243, (uint64_t)v244, v245);
      sub_20E86A980(v246, (uint64_t)")\n", 2);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v459 |= *(unsigned __int8 *)(v236 + 20);
    }
    v252 = *(char **)(a1 + 6056);
    v253 = *(char **)(a1 + 6064);
    v254 = v252;
    if (v253 != v252)
    {
      v255 = (v253 - v252) >> 4;
      v254 = *(char **)(a1 + 6056);
      do
      {
        v256 = v255 >> 1;
        v257 = (unsigned int *)&v254[16 * (v255 >> 1)];
        v259 = *v257;
        v258 = (char *)(v257 + 4);
        v255 += ~(v255 >> 1);
        if (v259 < v29)
          v254 = v258;
        else
          v255 = v256;
      }
      while (v255);
    }
    if (v254 == v253 || *(_DWORD *)v254 != v29)
    {
      v277 = sub_20E86A980(&v466, (uint64_t)"error: variable ", 16);
      sub_20F6234D8((uint64_t)__p);
      if (v482[7] >= 0)
        v278 = __p;
      else
        v278 = (void **)__p[0];
      if (v482[7] >= 0)
        v279 = v482[7];
      else
        v279 = (uint64_t)__p[1];
      v280 = sub_20E86A980(v277, (uint64_t)v278, v279);
      sub_20E86A980(v280, (uint64_t)" with ID ", 9);
      v281 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v281, (uint64_t)" not found\n", 11);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v276 = 0;
    }
    else
    {
      if (v253 != v252)
      {
        v260 = (v253 - v252) >> 4;
        do
        {
          v261 = v260 >> 1;
          v262 = (unsigned int *)&v252[16 * (v260 >> 1)];
          v264 = *v262;
          v263 = (char *)(v262 + 4);
          v260 += ~(v260 >> 1);
          if (v264 < v29)
            v252 = v263;
          else
            v260 = v261;
        }
        while (v260);
      }
      if (v252 == v253 || *(_DWORD *)v252 != v29)
        v252 = *(char **)(a1 + 6064);
      v265 = *((_QWORD *)v252 + 1);
      v266 = sub_20E86A980(&v466, (uint64_t)"debug: variable ", 16);
      sub_20F6234D8((uint64_t)__p);
      if (v482[7] >= 0)
        v267 = __p;
      else
        v267 = (void **)__p[0];
      if (v482[7] >= 0)
        v268 = v482[7];
      else
        v268 = (uint64_t)__p[1];
      v269 = sub_20E86A980(v266, (uint64_t)v267, v268);
      sub_20E86A980(v269, (uint64_t)" with ID ", 9);
      v270 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v270, (uint64_t)" found (", 8);
      v271 = (_QWORD *)std::ostream::operator<<();
      v272 = sub_20E86A980(v271, (uint64_t)", ", 2);
      if (*(_BYTE *)(v265 + 20))
        v273 = "free";
      else
        v273 = "fixed";
      if (*(_BYTE *)(v265 + 20))
        v274 = 4;
      else
        v274 = 5;
      v275 = sub_20E86A980(v272, (uint64_t)v273, v274);
      sub_20E86A980(v275, (uint64_t)")\n", 2);
      v276 = v188;
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v459 |= *(unsigned __int8 *)(v265 + 20);
    }
    v282 = *(char **)(a1 + 5576);
    v283 = *(char **)(a1 + 5584);
    v284 = v282;
    if (v283 != v282)
    {
      v285 = (v283 - v282) >> 4;
      v284 = *(char **)(a1 + 5576);
      do
      {
        v286 = v285 >> 1;
        v287 = (unsigned int *)&v284[16 * (v285 >> 1)];
        v289 = *v287;
        v288 = (char *)(v287 + 4);
        v285 += ~(v285 >> 1);
        if (v289 < v30)
          v284 = v288;
        else
          v285 = v286;
      }
      while (v285);
    }
    if (v284 == v283 || *(_DWORD *)v284 != v30)
    {
      v306 = sub_20E86A980(&v466, (uint64_t)"error: variable ", 16);
      sub_20FC273AC((uint64_t)__p);
      if (v482[7] >= 0)
        v307 = __p;
      else
        v307 = (void **)__p[0];
      if (v482[7] >= 0)
        v308 = v482[7];
      else
        v308 = (uint64_t)__p[1];
      v309 = sub_20E86A980(v306, (uint64_t)v307, v308);
      sub_20E86A980(v309, (uint64_t)" with ID ", 9);
      v310 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v310, (uint64_t)" not found\n", 11);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v276 = 0;
    }
    else
    {
      if (v283 != v282)
      {
        v290 = (v283 - v282) >> 4;
        do
        {
          v291 = v290 >> 1;
          v292 = (unsigned int *)&v282[16 * (v290 >> 1)];
          v294 = *v292;
          v293 = (char *)(v292 + 4);
          v290 += ~(v290 >> 1);
          if (v294 < v30)
            v282 = v293;
          else
            v290 = v291;
        }
        while (v290);
      }
      if (v282 == v283 || *(_DWORD *)v282 != v30)
        v282 = *(char **)(a1 + 5584);
      v295 = *((_QWORD *)v282 + 1);
      v296 = sub_20E86A980(&v466, (uint64_t)"debug: variable ", 16);
      sub_20FC273AC((uint64_t)__p);
      if (v482[7] >= 0)
        v297 = __p;
      else
        v297 = (void **)__p[0];
      if (v482[7] >= 0)
        v298 = v482[7];
      else
        v298 = (uint64_t)__p[1];
      v299 = sub_20E86A980(v296, (uint64_t)v297, v298);
      sub_20E86A980(v299, (uint64_t)" with ID ", 9);
      v300 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v300, (uint64_t)" found (", 8);
      v301 = (_QWORD *)std::ostream::operator<<();
      v302 = sub_20E86A980(v301, (uint64_t)", ", 2);
      if (*(_BYTE *)(v295 + 20))
        v303 = "free";
      else
        v303 = "fixed";
      if (*(_BYTE *)(v295 + 20))
        v304 = 4;
      else
        v304 = 5;
      v305 = sub_20E86A980(v302, (uint64_t)v303, v304);
      sub_20E86A980(v305, (uint64_t)")\n", 2);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v459 |= *(unsigned __int8 *)(v295 + 20);
    }
    v311 = *(_QWORD **)(a1 + 6656);
    v312 = *(_QWORD **)(a1 + 6664);
    if (v312 != v311)
    {
      v313 = 0xD37A6F4DE9BD37A7 * (v312 - v311);
      do
      {
        v314 = v313 >> 1;
        v315 = &v311[23 * (v313 >> 1)];
        v317 = *v315;
        v316 = v315 + 23;
        v313 += ~(v313 >> 1);
        if (v317 < v31)
          v311 = v316;
        else
          v313 = v314;
      }
      while (v313);
      if (v312 != v311 && *v311 == v31)
      {
        v318 = sub_20E86A980(&v466, (uint64_t)"error: factor ", 14);
        sub_20F921690((uint64_t)__p);
        if (v482[7] >= 0)
          v319 = __p;
        else
          v319 = (void **)__p[0];
        if (v482[7] >= 0)
          v320 = v482[7];
        else
          v320 = (uint64_t)__p[1];
        v321 = sub_20E86A980(v318, (uint64_t)v319, v320);
        sub_20E86A980(v321, (uint64_t)" with the same ID ", 18);
        v322 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v322, (uint64_t)" already exists.\n", 17);
        if ((v482[7] & 0x80000000) != 0)
          operator delete(__p[0]);
        v276 = 0;
      }
    }
    if (v459)
    {
      v323 = v276 != 0;
      v324 = LOBYTE(v472.f64[1]);
      if ((LOBYTE(v472.f64[1]) & 0x10) == 0)
      {
LABEL_422:
        if ((v324 & 8) == 0)
        {
          v325 = 0;
          v482[7] = 0;
          v326 = __p;
          goto LABEL_445;
        }
        v333 = (const void **)&v467.n128_u64[1];
        v332 = v468.n128_f64[1];
LABEL_437:
        v334 = *v333;
        v325 = *(_QWORD *)&v332 - (_QWORD)*v333;
        if (v325 >= 0x7FFFFFFFFFFFFFF8)
          sub_20E860B7C();
        if (v325 >= 0x17)
        {
          v335 = (v325 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v325 | 7) != 0x17)
            v335 = v325 | 7;
          v336 = v335 + 1;
          v326 = operator new(v335 + 1);
          *(_QWORD *)v482 = v336 | 0x8000000000000000;
          __p[0] = v326;
          __p[1] = (void *)v325;
        }
        else
        {
          v482[7] = LOBYTE(v332) - *(_BYTE *)v333;
          v326 = __p;
          if (!v325)
          {
LABEL_445:
            *((_BYTE *)v326 + v325) = 0;
            *(_OWORD *)&v490[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v490[0].__r_.__value_.__r.__words[2] = *(_QWORD *)v482;
            v490[1].__r_.__value_.__s.__data_[0] = v323;
            __src.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
            v337 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
            *(float64_t *)((char *)__src.f64 + *(_QWORD *)(*(_QWORD *)&__src.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
            v466.n128_u64[0] = v337;
            v466.n128_u64[1] = MEMORY[0x24BEDB848] + 16;
            if (v471.n128_i8[15] < 0)
              operator delete(v470[1]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x212BC6290](&v473);
            v338 = std::string::insert(v490, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
            v339 = *(simd_double2 *)&v338->__r_.__value_.__l.__data_;
            *(_QWORD *)&v463.columns[1].f64[0] = v338->__r_.__value_.__r.__words[2];
            v463.columns[0] = v339;
            v338->__r_.__value_.__l.__size_ = 0;
            v338->__r_.__value_.__r.__words[2] = 0;
            v338->__r_.__value_.__r.__words[0] = 0;
            v340 = std::string::append((std::string *)&v463, "').", 3uLL);
            v341 = *(simd_double2 *)&v340->__r_.__value_.__l.__data_;
            *(_QWORD *)&v464.columns[1].f64[0] = v340->__r_.__value_.__r.__words[2];
            v464.columns[0] = v341;
            v340->__r_.__value_.__l.__size_ = 0;
            v340->__r_.__value_.__r.__words[2] = 0;
            v340->__r_.__value_.__r.__words[0] = 0;
            if (v464.columns[1].f64[0] >= 0.0)
              v342 = (uint64_t)&v464;
            else
              v342 = *(_QWORD *)&v464.columns[0].f64[0];
            if (v464.columns[1].f64[0] >= 0.0)
              v343 = HIBYTE(v464.columns[1].f64[0]);
            else
              v343 = *(_QWORD *)&v464.columns[0].f64[1];
            v344 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 871, (uint64_t)"ret.second", 10, v342, v343, (void (*)(void **))sub_21023DDB0);
            if (SHIBYTE(v464.columns[1].f64[0]) < 0)
            {
              operator delete(*(void **)&v464.columns[0].f64[0]);
              if ((SHIBYTE(v463.columns[1].f64[0]) & 0x80000000) == 0)
              {
LABEL_455:
                if ((SHIBYTE(v490[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_456;
                goto LABEL_475;
              }
            }
            else if ((SHIBYTE(v463.columns[1].f64[0]) & 0x80000000) == 0)
            {
              goto LABEL_455;
            }
            operator delete(*(void **)&v463.columns[0].f64[0]);
            if ((SHIBYTE(v490[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_456:
              if (!v344)
                goto LABEL_457;
LABEL_476:
              abort();
            }
LABEL_475:
            operator delete(v490[0].__r_.__value_.__l.__data_);
            if (!v344)
              goto LABEL_457;
            goto LABEL_476;
          }
        }
        memmove(v326, v334, v325);
        goto LABEL_445;
      }
    }
    else
    {
      v327 = sub_20E86A980(&v466, (uint64_t)"error: factor ", 14);
      sub_20F921690((uint64_t)__p);
      if (v482[7] >= 0)
        v328 = __p;
      else
        v328 = (void **)__p[0];
      if (v482[7] >= 0)
        v329 = v482[7];
      else
        v329 = (uint64_t)__p[1];
      v330 = sub_20E86A980(v327, (uint64_t)v328, v329);
      sub_20E86A980(v330, (uint64_t)" with ID ", 9);
      v331 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v331, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
      if ((v482[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v323 = 0;
      v324 = LOBYTE(v472.f64[1]);
      if ((LOBYTE(v472.f64[1]) & 0x10) == 0)
        goto LABEL_422;
    }
    v332 = v472.f64[0];
    if (*(_QWORD *)&v472.f64[0] < v469.n128_u64[1])
    {
      *(_QWORD *)&v472.f64[0] = v469.n128_u64[1];
      v332 = v469.n128_f64[1];
    }
    v333 = (const void **)&v469;
    goto LABEL_437;
  }
LABEL_457:
  v345 = v458;
  if (*(_BYTE *)(a1 + 1968) && *(_DWORD *)(a3 + 520) == 2)
  {
    v347 = *v458;
    v348 = *(_QWORD **)(a1 + 6656);
    v349 = *(_QWORD **)(a1 + 6664);
    if (v349 != v348)
    {
      v350 = 0xD37A6F4DE9BD37A7 * (v349 - v348);
      do
      {
        v351 = v350 >> 1;
        v352 = &v348[23 * (v350 >> 1)];
        v354 = *v352;
        v353 = v352 + 23;
        v350 += ~(v350 >> 1);
        if (v354 < v347)
          v348 = v353;
        else
          v350 = v351;
      }
      while (v350);
    }
    if (v349 == v348 || *v348 != v347)
      v348 = *(_QWORD **)(a1 + 6664);
    v355 = *(_BYTE *)(a3 + 488) ? a3 + 40 : 0;
    v356 = *(_BYTE *)(v355 + 56);
    v357 = *(_WORD *)(v355 + 57);
    *(_BYTE *)(v355 + 56) = 0;
    *(_WORD *)(v355 + 57) = 0;
    v346 = (_QWORD *)(a1 + 40560);
    if (((v346[4] - v346[3]) >> 2)
       + ((v346[1] - *v346) >> 2)
       + ((v346[7] - v346[6]) >> 2)
       + ((v346[10] - v346[9]) >> 2)
       + ((v346[13] - v346[12]) >> 2)
       + ((v346[16] - v346[15]) >> 2)
       + ((v346[19] - v346[18]) >> 2)
       + ((v346[22] - v346[21]) >> 2)
       + ((v346[25] - v346[24]) >> 2)
       + ((v346[28] - v346[27]) >> 2))
    {
      LODWORD(__src.f64[0]) = *(_QWORD *)(a3 + 32);
      sub_20FB81A74((char **)(a1 + 4464), &__src, (_BYTE *)__src.f64 + 4);
      sub_20F8F2BC0(a1 + 4368, a1 + 40560, (uint64_t)dword_2103B9910, a1 + 4608);
      LOBYTE(__src.f64[0]) = 0;
      memset(v490, 0, sizeof(v490));
      sub_20FC275C4(a1 + 25360, (uint64_t)v490, (unsigned int **)(a1 + 4608), (_DWORD **)(a1 + 4608), (char *)&__src);
      *(_QWORD *)&v358 = v490[1].__r_.__value_.__l.__size_;
      *(_QWORD *)&v359 = v490[2].__r_.__value_.__l.__data_;
      *(_QWORD *)&v360 = v490[0].__r_.__value_.__r.__words[0];
      *((_QWORD *)&v360 + 1) = v490[1].__r_.__value_.__l.__data_;
      *((_QWORD *)&v358 + 1) = v490[2].__r_.__value_.__l.__size_;
      *((_QWORD *)&v359 + 1) = vdupq_laneq_s64(*(int64x2_t *)&v490[0].__r_.__value_.__r.__words[2], 1).u64[0];
      *(_OWORD *)&v490[0].__r_.__value_.__r.__words[2] = v359;
      *(_OWORD *)&v490[1].__r_.__value_.__r.__words[1] = v358;
      *(_OWORD *)&v490[0].__r_.__value_.__l.__data_ = v360;
      v361 = sub_20E8BE424((uint64_t)__p);
      sub_20FC78414((uint64_t)(v348 + 1), v348 + 8, (uint64_t)&v502, &__src, v361, v362, v363, v364, v365, v366, v367);
      v368 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v478, *(double *)__p), v479, *(float64x2_t *)__p, 1), v480, *(double *)v482);
      v369 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v478, *(double *)&v482[8]), v479, *(float64x2_t *)&v482[8], 1), v480, v483);
      v370 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v478, v484.f64[0]), v479, v484, 1), v480, v485);
      v371 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v368, v478.f64[0]), v369, v479.f64[0]), v370, v480.f64[0]);
      v464.columns[0].f64[1] = v371.f64[1];
      v372 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v368, v478, 1), v369, v479, 1), v370, v480, 1);
      v371.f64[1] = v372.f64[1];
      v464.columns[1].f64[0] = v372.f64[0];
      __asm { FMOV            V0.2D, #1.0 }
      v377 = vaddq_f64(v371, _Q0);
      v464.columns[1].f64[1] = v377.f64[1];
      v464.columns[0].f64[0] = v377.f64[0];
      sub_20E8BE3B0(&v464, &v463);
      _V1.D[1] = v502.n128_i64[1];
      _D0 = v463.columns[0].f64[1];
      __asm { FMLA            D3, D0, V1.D[1] }
      _D0 = v463.columns[1].f64[1];
      __asm
      {
        FMLA            D4, D0, V1.D[1]
        FMLA            D0, D4, V1.D[1]
      }
    }
    else
    {
      sub_20FC77D28((uint64_t)(v348 + 1), v348 + 8, (uint64_t)&__src, v19.n128_f64[0], v20.n128_f64[0], v21.n128_f64[0], v22, v23, v24, v25, v26);
      _V1.D[1] = __src.f64[1];
      _D2 = __src.f64[1];
      __asm { FMLA            D0, D2, V1.D[1] }
    }
    v386 = *(_BYTE *)(a3 + 488) ? a3 + 40 : 0;
    *(_BYTE *)(v386 + 56) = v356;
    *(_WORD *)(v386 + 57) = v357;
    v345 = v458;
    if (_D0 > *(double *)(a1 + 1976))
    {
      *((_BYTE *)v348 + 48) = 1;
      v387 = *(_QWORD *)(a3 + 496);
      v388 = *(_QWORD *)(a3 + 504);
      v389 = *(_DWORD *)(a2 + 8);
      v390 = v388 - v387;
      if (v388 != v387)
      {
        v391 = *(_QWORD *)a2;
        v392 = *(_DWORD *)(a2 + 16);
        v393 = v390 >> 6;
        while (1)
        {
          v394 = v393 >> 1;
          v395 = v387 + (v393 >> 1 << 6);
          v396 = *(_DWORD *)(v395 + 16);
          v397 = v396 >= v392;
          if (v396 != v392)
            goto LABEL_490;
          if (*(_QWORD *)v395 >= v391)
            break;
LABEL_484:
          v387 = v395 + 64;
          v394 = v393 + ~v394;
LABEL_485:
          v393 = v394;
          if (!v394)
            goto LABEL_493;
        }
        if (*(_QWORD *)v395 != v391)
          goto LABEL_485;
        v397 = *(_DWORD *)(v395 + 8) >= v389;
LABEL_490:
        if (v397)
          goto LABEL_485;
        goto LABEL_484;
      }
LABEL_493:
      v398 = *(_DWORD *)(v387 + 8);
      v399 = (_DWORD *)(v387 + 24);
      if (v398 != v389)
        v399 = 0;
      *v399 = 0;
    }
  }
  ++*v345;
}

void sub_20FC271EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20FC27320((uint64_t)&STACK[0x270]);
  sub_20F8AEF04((uint64_t)&a35);
  sub_20F8AEF6C((uint64_t)&STACK[0x2E0]);
  sub_20E86665C((uint64_t)&STACK[0x2D0]);
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void sub_20FC27238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (SLOBYTE(STACK[0x287]) < 0)
  {
    operator delete((void *)STACK[0x270]);
    sub_20E863784((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC27320(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20FC273AC(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DCA20;
  strcpy(v2, "cv3d::vio::VIOLandmarkVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 38, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20FC275A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FC275C4(uint64_t a1, uint64_t a2, unsigned int **a3, _DWORD **a4, char *a5)
{
  unsigned int **v7;
  unsigned int **v10;

  v7 = a3;
  v10 = a3 + 27;
  sub_20FC277CC(a1 + 7056, a2, a3 + 27, a4[12], a4[13], *a5);
  sub_20FC27AB4(a1 + 8496, a2, v10, a4[15], a4[16], *a5);
  sub_20FC277CC(a1 + 9936, a2, v10, a4[18], a4[19], *a5);
  sub_20FC277CC(a1 + 14256, a2, v10, a4[27], a4[28], *a5);
  sub_20FC277CC(a1 + 6624, a2, v7 + 18, a4[12], a4[13], *a5);
  sub_20FC27AB4(a1 + 8064, a2, v7 + 18, a4[15], a4[16], *a5);
  sub_20FC277CC(a1 + 9504, a2, v7 + 18, a4[18], a4[19], *a5);
  sub_20FC277CC(a1 + 13824, a2, v7 + 18, a4[27], a4[28], *a5);
  sub_20FC27D50(a1 + 6480, a2, v7 + 15, a4[12], a4[13], *a5);
  sub_20FC27FEC(a1 + 7920, a2, v7 + 15, a4[15], a4[16], *a5);
  sub_20FC27D50(a1 + 9360, a2, v7 + 15, a4[18], a4[19], *a5);
  sub_20FC27D50(a1 + 13680, a2, v7 + 15, a4[27], a4[28], *a5);
  v7 += 12;
  sub_20FC277CC(a1 + 6336, a2, v7, a4[12], a4[13], *a5);
  sub_20FC27AB4(a1 + 7776, a2, v7, a4[15], a4[16], *a5);
  sub_20FC277CC(a1 + 9216, a2, v7, a4[18], a4[19], *a5);
  return sub_20FC277CC(a1 + 13536, a2, v7, a4[27], a4[28], *a5);
}

uint64_t sub_20FC277CC(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int128 v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(int8x16_t *)v22;
                  v24 = *(_QWORD *)(v22 + 16);
                  *(_QWORD *)&v25 = vextq_s8(v23, v23, 8uLL).u64[0];
                  v26 = *(int8x16_t *)(v22 + 24);
                  v27 = *(_QWORD *)(v22 + 40);
                  v28 = *(int8x16_t *)(v22 + 48);
                  v29 = *(_QWORD *)(v22 + 64);
                  v30 = vextq_s8(v28, v28, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v31 = a2 + 8 * (3 * v20 + v21);
                    *(_QWORD *)(v31 + 16) = v24;
                    v23.i64[1] = v25;
                    *(int8x16_t *)v31 = v23;
                    *(_QWORD *)&v25 = v26.i64[0];
                  }
                  else
                  {
                    v31 = a2 + 8 * (3 * v21 + v20);
                    v23.i64[1] = *(_QWORD *)(v22 + 24);
                    v32 = *(_QWORD *)(v22 + 40);
                    *(_QWORD *)(v31 + 16) = v28.i64[0];
                    *(int8x16_t *)v31 = v23;
                    v27 = v30;
                    v28.i64[0] = v24;
                    v30 = v32;
                  }
                  *(_QWORD *)(v31 + 40) = v27;
                  *((_QWORD *)&v25 + 1) = vextq_s8(v26, v26, 8uLL).u64[0];
                  *(_OWORD *)(v31 + 24) = v25;
                  *(_QWORD *)(v31 + 64) = v29;
                  v28.i64[1] = v30;
                  *(int8x16_t *)(v31 + 48) = v28;
                  v9 = v18;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v33 = v8 + 1;
                    while (v33 != v11)
                    {
                      ++v9;
                      v34 = *v33++;
                      v19 = v34;
                      if (v34 != -1)
                      {
                        v8 = v33 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v35 = *(_QWORD *)(result + 88);
        v36 = (*(_DWORD *)(result + 112) * *a4);
        v37 = (uint64_t *)(v35 + 8 * v36);
        v38 = *(_DWORD *)(result + 8);
        v39 = (v36 + v38);
        v40 = (uint64_t *)(v35 + 8 * v39);
        if (v38 && *v37 == -1)
        {
          v54 = 8 * v39 - 8 * v36 - 8;
          v55 = 1;
          v56 = v37;
          while (1)
          {
            v41 = v55;
            if (!v54)
              break;
            v37 = v56 + 1;
            v57 = v56[1];
            ++v55;
            v54 -= 8;
            ++v56;
            if (v57 != -1)
              goto LABEL_38;
          }
          v37 = v40;
        }
        else
        {
          v41 = 0;
        }
LABEL_38:
        v42 = *a3;
        v43 = a3[1];
        while (v42 != v43 && v37 != v40)
        {
          v44 = *v42;
          if (*v42 > v41)
          {
            v45 = v37 + 1;
            while (v45 != v40)
            {
              ++v41;
              v46 = *v45++;
              if (v46 != -1 && v44 <= v41)
              {
                v37 = v45 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v44 == v41)
          {
            v48 = *(_QWORD *)(result + 16) + 8 * *v37;
            v49 = a2 + 8 * (3 * a4[1] + v42[1]);
            v50 = *(_QWORD *)(v48 + 64);
            v51 = *(_OWORD *)(v48 + 48);
            v52 = *(_OWORD *)v48;
            v53 = *(_OWORD *)(v48 + 16);
            *(_OWORD *)(v49 + 32) = *(_OWORD *)(v48 + 32);
            *(_OWORD *)(v49 + 48) = v51;
            *(_QWORD *)(v49 + 64) = v50;
            *(_OWORD *)v49 = v52;
            *(_OWORD *)(v49 + 16) = v53;
            v41 = v44;
          }
          v42 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FC27AB4(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = *(_QWORD *)(result + 16) + 8 * v20;
                v24 = *(int8x16_t *)v23;
                v25 = *(_QWORD *)(v23 + 16);
                v26 = vextq_s8(v24, v24, 8uLL).u64[0];
                if (v21 >= v22)
                {
                  v30 = (int8x16_t *)(a2 + 8 * (3 * v21 + v22));
                  v30[1].i64[0] = v25;
                  v24.i64[1] = v26;
                  *v30 = v24;
                }
                else
                {
                  v27 = (_QWORD *)(a2 + 8 * (3 * v22 + v21));
                  *v27 = v24.i64[0];
                  v27[3] = v26;
                  v27[6] = v25;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v28 = v8 + 1;
                  while (v28 != v11)
                  {
                    ++v12;
                    v29 = *v28++;
                    v20 = v29;
                    if (v29 != -1)
                    {
                      v8 = v28 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v31 = *(_QWORD *)(result + 88);
        v32 = (*(_DWORD *)(result + 112) * *a4);
        v33 = (uint64_t *)(v31 + 8 * v32);
        v34 = *(_DWORD *)(result + 8);
        v35 = (v32 + v34);
        v36 = (uint64_t *)(v31 + 8 * v35);
        if (v34 && *v33 == -1)
        {
          v48 = 8 * v35 - 8 * v32 - 8;
          v49 = 1;
          v50 = v33;
          while (1)
          {
            v37 = v49;
            if (!v48)
              break;
            v33 = v50 + 1;
            v51 = v50[1];
            ++v49;
            v48 -= 8;
            ++v50;
            if (v51 != -1)
              goto LABEL_38;
          }
          v33 = v36;
        }
        else
        {
          v37 = 0;
        }
LABEL_38:
        v38 = *a3;
        v39 = a3[1];
        while (v38 != v39 && v33 != v36)
        {
          v40 = *v38;
          if (*v38 > v37)
          {
            v41 = v33 + 1;
            while (v41 != v36)
            {
              ++v37;
              v42 = *v41++;
              if (v42 != -1 && v40 <= v37)
              {
                v33 = v41 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v40 == v37)
          {
            v44 = *(_QWORD *)(result + 16) + 8 * *v33;
            v45 = *(_OWORD *)v44;
            v46 = *(_QWORD *)(v44 + 16);
            v47 = a2 + 8 * (3 * a4[1] + v38[1]);
            *(_QWORD *)(v47 + 16) = v46;
            *(_OWORD *)v47 = v45;
            v37 = v40;
          }
          v38 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FC27D50(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                *(_QWORD *)&v24 = *v23;
                v25 = v23[1];
                v26 = v23[2];
                if (v21 >= v22)
                {
                  v30 = (_QWORD *)(a2 + 8 * (3 * v21 + v22));
                  *v30 = v24;
                  v30[3] = v25;
                  v30[6] = v26;
                }
                else
                {
                  *((_QWORD *)&v24 + 1) = v23[1];
                  v27 = a2 + 8 * (3 * v22 + v21);
                  *(_QWORD *)(v27 + 16) = v26;
                  *(_OWORD *)v27 = v24;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v28 = v8 + 1;
                  while (v28 != v11)
                  {
                    ++v12;
                    v29 = *v28++;
                    v20 = v29;
                    if (v29 != -1)
                    {
                      v8 = v28 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v31 = *(_QWORD *)(result + 88);
        v32 = (*(_DWORD *)(result + 112) * *a4);
        v33 = (uint64_t *)(v31 + 8 * v32);
        v34 = *(_DWORD *)(result + 8);
        v35 = (v32 + v34);
        v36 = (uint64_t *)(v31 + 8 * v35);
        if (v34 && *v33 == -1)
        {
          v48 = 8 * v35 - 8 * v32 - 8;
          v49 = 1;
          v50 = v33;
          while (1)
          {
            v37 = v49;
            if (!v48)
              break;
            v33 = v50 + 1;
            v51 = v50[1];
            ++v49;
            v48 -= 8;
            ++v50;
            if (v51 != -1)
              goto LABEL_38;
          }
          v33 = v36;
        }
        else
        {
          v37 = 0;
        }
LABEL_38:
        v38 = *a3;
        v39 = a3[1];
        while (v38 != v39 && v33 != v36)
        {
          v40 = *v38;
          if (*v38 > v37)
          {
            v41 = v33 + 1;
            while (v41 != v36)
            {
              ++v37;
              v42 = *v41++;
              if (v42 != -1 && v40 <= v37)
              {
                v33 = v41 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v40 == v37)
          {
            v44 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v33);
            v45 = (_QWORD *)(a2 + 8 * (3 * a4[1] + v38[1]));
            v46 = v44[1];
            v47 = v44[2];
            *v45 = *v44;
            v45[3] = v46;
            v45[6] = v47;
            v37 = v40;
          }
          v38 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FC27FEC(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                if (v21 <= v22)
                  v24 = v13[1];
                else
                  v24 = a4[1];
                if (v21 >= v22)
                  v21 = v13[1];
                *(_QWORD *)(a2 + 8 * (3 * v24 + v21)) = v23;
                v12 = v19;
              }
              else
              {
LABEL_26:
                if (v19 >= v12)
                {
                  v25 = v8 + 1;
                  while (v25 != v11)
                  {
                    ++v12;
                    v26 = *v25++;
                    v20 = v26;
                    if (v26 != -1)
                    {
                      v8 = v25 - 1;
                      if (v19 != v12)
                        goto LABEL_26;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v27 = *(_QWORD *)(result + 88);
        v28 = (*(_DWORD *)(result + 112) * *a4);
        v29 = (uint64_t *)(v27 + 8 * v28);
        v30 = *(_DWORD *)(result + 8);
        v31 = (v28 + v30);
        v32 = (uint64_t *)(v27 + 8 * v31);
        if (v30 && *v29 == -1)
        {
          v40 = 8 * v31 - 8 * v28 - 8;
          v41 = 1;
          v42 = v29;
          while (1)
          {
            v33 = v41;
            if (!v40)
              break;
            v29 = v42 + 1;
            v43 = v42[1];
            ++v41;
            v40 -= 8;
            ++v42;
            if (v43 != -1)
              goto LABEL_40;
          }
          v29 = v32;
        }
        else
        {
          v33 = 0;
        }
LABEL_40:
        v34 = *a3;
        v35 = a3[1];
        while (v34 != v35 && v29 != v32)
        {
          v36 = *v34;
          if (*v34 > v33)
          {
            v37 = v29 + 1;
            while (v37 != v32)
            {
              ++v33;
              v38 = *v37++;
              if (v38 != -1 && v36 <= v33)
              {
                v29 = v37 - 1;
                goto LABEL_52;
              }
            }
            break;
          }
LABEL_52:
          if (v36 == v33)
          {
            *(_QWORD *)(a2 + 8 * (3 * a4[1] + v34[1])) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v29);
            v33 = v36;
          }
          v34 += 2;
        }
      }
    }
  }
  return result;
}

double sub_20FC28248(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, double result)
{
  uint64_t v7;
  double v8;
  int v9;
  double *v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  __n128 v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result = *(a2 - 2);
      v8 = *(double *)a1;
      if (result < *(double *)a1)
      {
        *(double *)a1 = result;
        *(a2 - 2) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v17 = (double *)(a1 + 16);
        if ((double *)(a1 + 16) != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v21 = v17;
            result = *v17;
            v22 = *(double *)v19;
            if (*v17 < *(double *)v19)
            {
              v23 = *(_DWORD *)(v19 + 24);
              v24 = v18;
              do
              {
                v25 = a1 + v24;
                *(double *)(v25 + 16) = v22;
                *(_DWORD *)(v25 + 24) = *(_DWORD *)(a1 + v24 + 8);
                if (!v24)
                {
                  v20 = a1;
                  goto LABEL_13;
                }
                v22 = *(double *)(v25 - 16);
                v24 -= 16;
              }
              while (result < v22);
              v20 = a1 + v24 + 16;
LABEL_13:
              *(double *)v20 = result;
              *(_DWORD *)(v20 + 8) = v23;
            }
            v17 = v21 + 2;
            v18 += 16;
            v19 = (uint64_t)v21;
          }
          while (v21 + 2 != a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = (double *)(a1 + 16 * (a3 >> 1));
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20FC284C0((double *)a1, v14, v15, a4);
        v26 = &v12[2 * v13];
        sub_20FC284C0((double *)(v7 + 16 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26);
        v27 = &v12[2 * a3];
        v28 = v26;
        while (v28 != v27)
        {
          result = *v28;
          v31 = *v12;
          if (*v28 >= *v12)
          {
            v29 = v12;
            v12 += 2;
            result = v31;
          }
          else
          {
            v29 = v28;
            v28 += 2;
          }
          v30 = *((_DWORD *)v29 + 2);
          *(double *)v7 = result;
          *(_DWORD *)(v7 + 8) = v30;
          v7 += 16;
          if (v12 == v26)
          {
            if (v28 != v27)
            {
              v35 = 0;
              do
              {
                v36 = &v28[v35];
                v37 = v7 + v35 * 8;
                result = v28[v35];
                *(double *)v37 = result;
                *(_DWORD *)(v37 + 8) = LODWORD(v28[v35 + 1]);
                v35 += 2;
              }
              while (v36 + 2 != v27);
            }
            return result;
          }
        }
        if (v12 != v26)
        {
          v32 = 0;
          do
          {
            v33 = &v12[v32];
            v34 = v7 + v32 * 8;
            result = v12[v32];
            *(double *)v34 = result;
            *(_DWORD *)(v34 + 8) = LODWORD(v12[v32 + 1]);
            v32 += 2;
          }
          while (v33 + 2 != v26);
        }
      }
      else
      {
        sub_20FC28248(a1, v14, v15, a4, a5);
        sub_20FC28248(v7 + 16 * (a3 >> 1), a2, a3 - (a3 >> 1), v12, a5);
        return sub_20F626330((double *)v7, (double *)(v7 + 16 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v12, a5, v16);
      }
    }
  }
  return result;
}

double *sub_20FC284C0(double *result, double *a2, unint64_t a3, double *a4)
{
  double *v4;
  double *v7;
  double *v8;
  __int128 v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      if (*(a2 - 2) >= *result)
      {
        *(_OWORD *)a4 = *(_OWORD *)result;
        v9 = *(_OWORD *)v8;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        v9 = *(_OWORD *)result;
      }
      *((_OWORD *)a4 + 1) = v9;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = a3 >> 1;
      v20 = 2 * (a3 >> 1);
      v21 = &result[v20];
      sub_20FC28248(result, &result[v20], a3 >> 1, a4, a3 >> 1);
      result = (double *)sub_20FC28248(&v7[v20], a2, a3 - v19, &v4[v20], a3 - v19);
      v22 = &v7[v20];
      while (v22 != a2)
      {
        if (*v22 >= *v7)
        {
          v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v4 = v23;
          v4 += 2;
          if (v7 == v21)
            goto LABEL_28;
        }
        else
        {
          v24 = *(_OWORD *)v22;
          v22 += 2;
          *(_OWORD *)v4 = v24;
          v4 += 2;
          if (v7 == v21)
          {
LABEL_28:
            if (v22 != a2)
            {
              v25 = 0;
              do
              {
                *(_OWORD *)&v4[v25] = *(_OWORD *)&v22[v25];
                v25 += 2;
              }
              while (&v22[v25] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v21)
      {
        v26 = 0;
        do
        {
          *(_OWORD *)&v4[v26] = *(_OWORD *)&v7[v26];
          v26 += 2;
        }
        while (&v7[v26] != v21);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v10 = result + 2;
      if (result + 2 != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          while (1)
          {
            v14 = v10;
            v15 = *v13;
            v13 += 2;
            if (*v10 < v15)
              break;
            *(_OWORD *)v13 = *(_OWORD *)v10;
            v10 += 2;
            v11 += 16;
            v12 = v13;
            v7 = v14;
            if (v14 + 2 == a2)
              return result;
          }
          *(_OWORD *)v13 = *(_OWORD *)v12;
          v16 = a4;
          if (v12 != a4)
          {
            v17 = v11;
            while (1)
            {
              v16 = (double *)((char *)a4 + v17);
              v18 = *(double *)((char *)a4 + v17 - 16);
              if (*v14 >= v18)
                break;
              *v16 = v18;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v16 - 2);
              v17 -= 16;
              if (!v17)
              {
                v16 = a4;
                break;
              }
            }
          }
          *v16 = *v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v7 + 6);
          v10 = v14 + 2;
          v11 += 16;
          v12 = v13;
          v7 = v14;
        }
        while (v14 + 2 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_20FC2870C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unsigned int *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;

  v3 = *a2;
  v5 = *(__int128 **)(a1 + 392);
  v4 = *(__int128 **)(a1 + 400);
  if (v4 == v5)
  {
    v5 = *(__int128 **)(a1 + 400);
  }
  else
  {
    v6 = v4 - v5;
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v5 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v4 != v5 && v3 == *(_DWORD *)v5)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  v13 = *(_QWORD *)a2;
  v14 = *((_QWORD *)a2 + 1);
  v37 = *((_OWORD *)a2 + 1);
  v38 = *((_QWORD *)a2 + 4);
  v15 = sub_20FC28BC4(a1 + 416);
  *(_DWORD *)v15 = -1;
  *(_BYTE *)(v15 + 4) = 1;
  *(_DWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v14;
  *(_OWORD *)(v15 + 32) = v37;
  *(_QWORD *)(v15 + 48) = v38;
  v39 = v3;
  v40 = v15;
  sub_20FC28960((char **)(a1 + 392), v5, (uint64_t)&v39);
  if (v12)
  {
    v16 = *(char **)(a1 + 2256);
    v17 = *(_QWORD *)(a1 + 2264);
    if ((unint64_t)v16 < v17)
    {
      *(_DWORD *)v16 = v3;
      v18 = (uint64_t)(v16 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 2256) = v18;
      goto LABEL_35;
    }
    v19 = *(char **)(a1 + 2248);
    v20 = (v16 - v19) >> 2;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      sub_20E867F44();
    v22 = v17 - (_QWORD)v19;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        sub_20E877A38();
      v24 = operator new(4 * v23);
      v25 = (unsigned int *)&v24[4 * v20];
      v26 = &v24[4 * v23];
      *v25 = v3;
      v18 = (uint64_t)(v25 + 1);
      v27 = v16 - v19;
      if (v16 == v19)
        goto LABEL_32;
    }
    else
    {
      v24 = 0;
      v25 = (unsigned int *)(4 * v20);
      v26 = 0;
      *(_DWORD *)(4 * v20) = v3;
      v18 = 4 * v20 + 4;
      v27 = v16 - v19;
      if (v16 == v19)
      {
LABEL_32:
        *(_QWORD *)(a1 + 2248) = v25;
        *(_QWORD *)(a1 + 2256) = v18;
        *(_QWORD *)(a1 + 2264) = v26;
        if (v19)
          operator delete(v19);
        goto LABEL_34;
      }
    }
    v28 = v27 - 4;
    if (v28 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v19 - v24) < 0x20)
      goto LABEL_41;
    v29 = (v28 >> 2) + 1;
    v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v16[-v30];
    v25 = (unsigned int *)((char *)v25 - v30);
    v32 = &v24[4 * v20 - 16];
    v33 = v16 - 16;
    v34 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 8;
    }
    while (v34);
    v16 = v31;
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v36 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v25 = v36;
      }
      while (v16 != v19);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 1618) = 0;
  *(_BYTE *)(a1 + 1616) = 0;
  return 1;
}

char *sub_20FC28960(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20FC28BAC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FC28BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  double *v29;
  const double *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  float64x2x2_t v36;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 80 * v5;
    }
    v7 = 80 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 640;
    v8 = *(_QWORD *)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v9 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v10 = v9;
      v12 = *(char **)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v12 >= v11)
      {
        v15 = *(char **)(a1 + 8);
        v16 = (v12 - v15) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          sub_20E867F44();
        v18 = v11 - (_QWORD)v15;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 60)
            sub_20E877A38();
          v20 = (char *)operator new(16 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = MEMORY[0x24BDAE450];
        v22 = &v20[16 * v16];
        v23 = &v20[16 * v19];
        *(_QWORD *)v22 = v10;
        *((_QWORD *)v22 + 1) = v21;
        v14 = v22 + 16;
        if (v12 == v15)
        {
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(a1 + 24) = v23;
        }
        else
        {
          v24 = v12 - v15 - 16;
          if (v24 < 0x90
            || &v12[-(v24 & 0xFFFFFFFFFFFFFFF0) - 16] < v22
            && &v20[v12 - v15 - (v24 & 0xFFFFFFFFFFFFFFF0) - 16] < v12)
          {
            goto LABEL_28;
          }
          v25 = (v24 >> 4) + 1;
          v26 = 16 * (v25 & 0x1FFFFFFFFFFFFFFELL);
          v27 = &v22[-v26];
          v28 = &v12[-v26];
          v29 = (double *)(v22 - 32);
          v30 = (const double *)(v12 - 32);
          v31 = v25 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v36 = vld2q_f64(v30);
            v30[2] = 0.0;
            *v30 = 0.0;
            v30 -= 4;
            vst2q_f64(v29, v36);
            v29 -= 4;
            v31 -= 2;
          }
          while (v31);
          v22 = v27;
          v12 = v28;
          if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_28:
            v27 = v22;
            do
            {
              v32 = *((_QWORD *)v12 - 2);
              v12 -= 16;
              *(_QWORD *)v12 = 0;
              *((_QWORD *)v27 - 2) = v32;
              v27 -= 16;
              *((_QWORD *)v27 + 1) = *((_QWORD *)v12 + 1);
            }
            while (v12 != v15);
          }
          v12 = *(char **)(a1 + 8);
          v33 = *(char **)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v27;
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(a1 + 24) = v23;
          if (v33 != v12)
          {
            v34 = v33;
            do
            {
              v35 = *((_QWORD *)v34 - 2);
              v34 -= 16;
              *(_QWORD *)v34 = 0;
              if (v35)
                (*((void (**)(void))v33 - 1))();
              v33 = v34;
            }
            while (v34 != v12);
          }
        }
        if (v12)
          operator delete(v12);
      }
      else
      {
        v13 = MEMORY[0x24BDAE450];
        *(_QWORD *)v12 = v9;
        *((_QWORD *)v12 + 1) = v13;
        v14 = v12 + 16;
      }
      *(_QWORD *)(a1 + 16) = v14;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

void sub_20FC28E88(int64x2_t *a1, unint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned __int32 v17;
  unint64_t v18;
  uint64_t v19;
  float32x2_t *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unsigned __int32 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  double *v44;
  double v46;
  float64x2_t v49;
  double v51;
  double v52;
  double v54;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unsigned int v78;
  uint64_t *v81;
  __n128 v82;
  std::string::size_type v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unsigned int v89;
  unsigned int v90;
  __n128 v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t *v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int *v114;
  _DWORD *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  _DWORD *v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int *v129;
  _DWORD *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int *v137;
  _DWORD *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int *v145;
  _DWORD *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int *v153;
  _DWORD *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned __int32 *v161;
  _DWORD *v162;
  unsigned __int32 v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int *v182;
  _DWORD *v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unsigned int *v187;
  _DWORD *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int *v196;
  _DWORD *v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int *v202;
  _DWORD *v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int *v211;
  _DWORD *v212;
  unsigned int v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unsigned int *v217;
  _DWORD *v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  _DWORD *v227;
  unsigned int v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int *v232;
  _DWORD *v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unsigned int *v241;
  _DWORD *v242;
  unsigned int v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int *v247;
  _DWORD *v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unsigned __int32 *v255;
  _DWORD *v256;
  unsigned __int32 v257;
  uint64_t v258;
  char *v259;
  char *v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  char *v267;
  char v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  int v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  char *v276;
  char *v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  unsigned __int32 v282;
  _QWORD *v283;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v286;
  _QWORD *v287;
  int v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD *v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unsigned int *v295;
  _DWORD *v296;
  unsigned int v297;
  unint64_t v298;
  unint64_t v299;
  unsigned int *v300;
  _DWORD *v301;
  unsigned int v302;
  uint64_t v303;
  _QWORD *v304;
  std::string *v305;
  std::string::size_type v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  const char *v311;
  uint64_t v312;
  _QWORD *v313;
  int v314;
  uint64_t v315;
  _DWORD *v316;
  _DWORD *v317;
  uint64_t v318;
  _QWORD *v319;
  std::string *v320;
  std::string::size_type v321;
  _QWORD *v322;
  _QWORD *v323;
  unint64_t v324;
  unint64_t v325;
  unsigned int *v326;
  _DWORD *v327;
  unsigned int v328;
  unint64_t v329;
  unint64_t v330;
  unsigned int *v331;
  _DWORD *v332;
  unsigned int v333;
  uint64_t v334;
  _QWORD *v335;
  std::string *v336;
  std::string::size_type v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  const char *v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _DWORD *v346;
  _DWORD *v347;
  uint64_t v348;
  _QWORD *v349;
  std::string *v350;
  std::string::size_type v351;
  _QWORD *v352;
  _QWORD *v353;
  unint64_t v354;
  unint64_t v355;
  unsigned int *v356;
  _DWORD *v357;
  unsigned int v358;
  unint64_t v359;
  unint64_t v360;
  unsigned int *v361;
  _DWORD *v362;
  unsigned int v363;
  uint64_t v364;
  _QWORD *v365;
  std::string *v366;
  std::string::size_type v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  const char *v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  _DWORD *v376;
  _DWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  std::string *v380;
  std::string::size_type v381;
  _QWORD *v382;
  _QWORD *v383;
  unint64_t v384;
  unint64_t v385;
  unsigned int *v386;
  _DWORD *v387;
  unsigned int v388;
  unint64_t v389;
  unint64_t v390;
  unsigned int *v391;
  _DWORD *v392;
  unsigned int v393;
  uint64_t v394;
  _QWORD *v395;
  std::string *v396;
  std::string::size_type v397;
  _QWORD *v398;
  _QWORD *v399;
  _QWORD *v400;
  _QWORD *v401;
  const char *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _DWORD *v406;
  _DWORD *v407;
  uint64_t v408;
  _QWORD *v409;
  std::string *v410;
  std::string::size_type v411;
  _QWORD *v412;
  _QWORD *v413;
  unint64_t v414;
  unint64_t v415;
  unsigned int *v416;
  _DWORD *v417;
  unsigned int v418;
  unint64_t v419;
  unint64_t v420;
  unsigned int *v421;
  _DWORD *v422;
  unsigned int v423;
  uint64_t v424;
  _QWORD *v425;
  std::string *v426;
  std::string::size_type v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  const char *v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  _DWORD *v436;
  _DWORD *v437;
  uint64_t v438;
  _QWORD *v439;
  std::string *v440;
  std::string::size_type v441;
  _QWORD *v442;
  _QWORD *v443;
  unint64_t v444;
  unint64_t v445;
  unsigned int *v446;
  _DWORD *v447;
  unsigned int v448;
  unint64_t v449;
  unint64_t v450;
  unsigned int *v451;
  _DWORD *v452;
  unsigned int v453;
  uint64_t v454;
  _QWORD *v455;
  std::string *v456;
  std::string::size_type v457;
  _QWORD *v458;
  _QWORD *v459;
  _QWORD *v460;
  _QWORD *v461;
  const char *v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  _DWORD *v466;
  _DWORD *v467;
  uint64_t v468;
  _QWORD *v469;
  std::string *v470;
  std::string::size_type v471;
  _QWORD *v472;
  _QWORD *v473;
  unint64_t v474;
  unint64_t v475;
  unsigned __int32 *v476;
  _DWORD *v477;
  unsigned __int32 v478;
  unint64_t v479;
  unint64_t v480;
  unsigned __int32 *v481;
  _DWORD *v482;
  unsigned __int32 v483;
  uint64_t v484;
  _QWORD *v485;
  std::string *v486;
  std::string::size_type v487;
  _QWORD *v488;
  _QWORD *v489;
  _QWORD *v490;
  _QWORD *v491;
  const char *v492;
  uint64_t v493;
  _QWORD *v494;
  char *v495;
  char *v496;
  uint64_t v497;
  _QWORD *v498;
  std::string *v499;
  std::string::size_type v500;
  _QWORD *v501;
  _QWORD *v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t *v505;
  char *v506;
  unint64_t v507;
  _QWORD *v508;
  std::string *v509;
  std::string::size_type v510;
  _QWORD *v511;
  _QWORD *v512;
  BOOL v513;
  char v514;
  std::string::size_type v515;
  std::string *v516;
  _QWORD *v517;
  std::string *v518;
  std::string::size_type v519;
  _QWORD *v520;
  _QWORD *v521;
  uint64_t v522;
  std::string::size_type *p_size;
  const void *v524;
  uint64_t v525;
  uint64_t v526;
  std::string *v527;
  __int128 v528;
  std::string *v529;
  __int128 v530;
  void **v531;
  uint64_t v532;
  _BOOL4 v533;
  uint64_t v534;
  __int128 v535;
  uint64_t v536;
  __int128 v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  void *v543;
  char *v544;
  __int128 v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  char *v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  std::string::size_type v555;
  int64x2_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  char v560;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  int v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  char *v568;
  char *v569;
  unint64_t v570;
  unint64_t v571;
  char *v572;
  char *v573;
  unsigned __int32 v574;
  _QWORD *v575;
  _QWORD *v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t *v579;
  _QWORD *v580;
  unint64_t v581;
  char *v582;
  char *v583;
  unint64_t v584;
  unint64_t v585;
  char *v586;
  char *v587;
  unsigned __int32 v588;
  _QWORD *v589;
  std::string *v590;
  std::string::size_type v591;
  _QWORD *v592;
  _QWORD *v593;
  int v594;
  uint64_t v595;
  _DWORD *v596;
  _DWORD *v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unsigned int *v601;
  _DWORD *v602;
  unsigned int v603;
  unint64_t v604;
  unint64_t v605;
  unsigned int *v606;
  _DWORD *v607;
  unsigned int v608;
  uint64_t v609;
  _QWORD *v610;
  std::string *v611;
  std::string::size_type v612;
  _QWORD *v613;
  _QWORD *v614;
  _QWORD *v615;
  _QWORD *v616;
  const char *v617;
  uint64_t v618;
  _QWORD *v619;
  uint64_t v620;
  _DWORD *v621;
  _DWORD *v622;
  uint64_t v623;
  _QWORD *v624;
  std::string *v625;
  std::string::size_type v626;
  _QWORD *v627;
  _QWORD *v628;
  unint64_t v629;
  unint64_t v630;
  unsigned int *v631;
  _DWORD *v632;
  unsigned int v633;
  unint64_t v634;
  unint64_t v635;
  unsigned int *v636;
  _DWORD *v637;
  unsigned int v638;
  uint64_t v639;
  _QWORD *v640;
  std::string *v641;
  std::string::size_type v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  const char *v647;
  uint64_t v648;
  _QWORD *v649;
  uint64_t v650;
  _DWORD *v651;
  _DWORD *v652;
  uint64_t v653;
  _QWORD *v654;
  std::string *v655;
  std::string::size_type v656;
  _QWORD *v657;
  _QWORD *v658;
  unint64_t v659;
  unint64_t v660;
  unsigned int *v661;
  _DWORD *v662;
  unsigned int v663;
  unint64_t v664;
  unint64_t v665;
  unsigned int *v666;
  _DWORD *v667;
  unsigned int v668;
  uint64_t v669;
  _QWORD *v670;
  std::string *v671;
  std::string::size_type v672;
  _QWORD *v673;
  _QWORD *v674;
  _QWORD *v675;
  _QWORD *v676;
  const char *v677;
  uint64_t v678;
  _QWORD *v679;
  uint64_t v680;
  _DWORD *v681;
  _DWORD *v682;
  uint64_t v683;
  _QWORD *v684;
  std::string *v685;
  std::string::size_type v686;
  _QWORD *v687;
  _QWORD *v688;
  unint64_t v689;
  unint64_t v690;
  unsigned int *v691;
  _DWORD *v692;
  unsigned int v693;
  unint64_t v694;
  unint64_t v695;
  unsigned int *v696;
  _DWORD *v697;
  unsigned int v698;
  uint64_t v699;
  _QWORD *v700;
  std::string *v701;
  std::string::size_type v702;
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  _QWORD *v706;
  const char *v707;
  uint64_t v708;
  _QWORD *v709;
  uint64_t v710;
  _DWORD *v711;
  _DWORD *v712;
  uint64_t v713;
  _QWORD *v714;
  std::string *v715;
  std::string::size_type v716;
  _QWORD *v717;
  _QWORD *v718;
  unint64_t v719;
  unint64_t v720;
  unsigned int *v721;
  _DWORD *v722;
  unsigned int v723;
  unint64_t v724;
  unint64_t v725;
  unsigned int *v726;
  _DWORD *v727;
  unsigned int v728;
  uint64_t v729;
  _QWORD *v730;
  std::string *v731;
  std::string::size_type v732;
  _QWORD *v733;
  _QWORD *v734;
  _QWORD *v735;
  _QWORD *v736;
  const char *v737;
  uint64_t v738;
  _QWORD *v739;
  uint64_t v740;
  _DWORD *v741;
  _DWORD *v742;
  uint64_t v743;
  _QWORD *v744;
  std::string *v745;
  std::string::size_type v746;
  _QWORD *v747;
  _QWORD *v748;
  unint64_t v749;
  unint64_t v750;
  unsigned int *v751;
  _DWORD *v752;
  unsigned int v753;
  unint64_t v754;
  unint64_t v755;
  unsigned int *v756;
  _DWORD *v757;
  unsigned int v758;
  uint64_t v759;
  _QWORD *v760;
  std::string *v761;
  std::string::size_type v762;
  _QWORD *v763;
  _QWORD *v764;
  _QWORD *v765;
  _QWORD *v766;
  const char *v767;
  uint64_t v768;
  _QWORD *v769;
  uint64_t v770;
  _DWORD *v771;
  _DWORD *v772;
  uint64_t v773;
  _QWORD *v774;
  std::string *v775;
  std::string::size_type v776;
  _QWORD *v777;
  _QWORD *v778;
  unint64_t v779;
  unint64_t v780;
  unsigned int *v781;
  _DWORD *v782;
  unsigned int v783;
  unint64_t v784;
  unint64_t v785;
  unsigned int *v786;
  _DWORD *v787;
  unsigned int v788;
  uint64_t v789;
  _QWORD *v790;
  std::string *v791;
  std::string::size_type v792;
  _QWORD *v793;
  _QWORD *v794;
  _QWORD *v795;
  _QWORD *v796;
  const char *v797;
  uint64_t v798;
  _QWORD *v799;
  uint64_t v800;
  _DWORD *v801;
  _DWORD *v802;
  uint64_t v803;
  _QWORD *v804;
  std::string *v805;
  std::string::size_type v806;
  _QWORD *v807;
  _QWORD *v808;
  unint64_t v809;
  unint64_t v810;
  unsigned int *v811;
  _DWORD *v812;
  unsigned int v813;
  unint64_t v814;
  unint64_t v815;
  unsigned int *v816;
  _DWORD *v817;
  unsigned int v818;
  uint64_t v819;
  _QWORD *v820;
  std::string *v821;
  std::string::size_type v822;
  _QWORD *v823;
  _QWORD *v824;
  _QWORD *v825;
  _QWORD *v826;
  const char *v827;
  uint64_t v828;
  _QWORD *v829;
  uint64_t v830;
  _DWORD *v831;
  _DWORD *v832;
  uint64_t v833;
  _QWORD *v834;
  std::string *v835;
  std::string::size_type v836;
  _QWORD *v837;
  _QWORD *v838;
  unint64_t v839;
  unint64_t v840;
  unsigned int *v841;
  _DWORD *v842;
  unsigned int v843;
  unint64_t v844;
  unint64_t v845;
  unsigned int *v846;
  _DWORD *v847;
  unsigned int v848;
  uint64_t v849;
  _QWORD *v850;
  std::string *v851;
  std::string::size_type v852;
  _QWORD *v853;
  _QWORD *v854;
  _QWORD *v855;
  _QWORD *v856;
  const char *v857;
  uint64_t v858;
  _QWORD *v859;
  uint64_t v860;
  _DWORD *v861;
  _DWORD *v862;
  uint64_t v863;
  _QWORD *v864;
  std::string *v865;
  std::string::size_type v866;
  _QWORD *v867;
  _QWORD *v868;
  unint64_t v869;
  unint64_t v870;
  unsigned int *v871;
  _DWORD *v872;
  unsigned int v873;
  unint64_t v874;
  unint64_t v875;
  unsigned int *v876;
  _DWORD *v877;
  unsigned int v878;
  uint64_t v879;
  _QWORD *v880;
  std::string *v881;
  std::string::size_type v882;
  _QWORD *v883;
  _QWORD *v884;
  _QWORD *v885;
  _QWORD *v886;
  const char *v887;
  uint64_t v888;
  _QWORD *v889;
  uint64_t v890;
  _DWORD *v891;
  _DWORD *v892;
  uint64_t v893;
  _QWORD *v894;
  std::string *v895;
  std::string::size_type v896;
  _QWORD *v897;
  _QWORD *v898;
  unint64_t v899;
  unint64_t v900;
  unsigned __int32 *v901;
  _DWORD *v902;
  unsigned __int32 v903;
  unint64_t v904;
  unint64_t v905;
  unsigned __int32 *v906;
  _DWORD *v907;
  unsigned __int32 v908;
  uint64_t v909;
  _QWORD *v910;
  std::string *v911;
  std::string::size_type v912;
  _QWORD *v913;
  _QWORD *v914;
  _QWORD *v915;
  _QWORD *v916;
  const char *v917;
  uint64_t v918;
  _QWORD *v919;
  char *v920;
  char *v921;
  uint64_t v922;
  _QWORD *v923;
  std::string *v924;
  std::string::size_type v925;
  _QWORD *v926;
  _QWORD *v927;
  unint64_t v928;
  unint64_t v929;
  unint64_t *v930;
  char *v931;
  unint64_t v932;
  _QWORD *v933;
  std::string *v934;
  std::string::size_type v935;
  _QWORD *v936;
  _QWORD *v937;
  BOOL v938;
  char v939;
  std::string::size_type v940;
  std::string *v941;
  _QWORD *v942;
  std::string *v943;
  std::string::size_type v944;
  _QWORD *v945;
  _QWORD *v946;
  uint64_t v947;
  std::string::size_type *v948;
  const void *v949;
  uint64_t v950;
  uint64_t v951;
  std::string *v952;
  __int128 v953;
  std::string *v954;
  __int128 v955;
  void **v956;
  uint64_t v957;
  _BOOL4 v958;
  unint64_t v959;
  void *v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  uint64_t v965;
  uint64_t v966;
  char *v967;
  uint64_t v968;
  std::string::size_type v969;
  char *v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  uint64_t v975;
  char *v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  uint64_t v981;
  std::string::size_type v982;
  std::string::size_type v983;
  std::__shared_weak_count *v984;
  unint64_t *p_shared_owners;
  unint64_t v986;
  std::__shared_weak_count *v987;
  unint64_t *v988;
  unint64_t v989;
  std::__shared_weak_count *v990;
  unint64_t *v991;
  unint64_t v992;
  uint64_t v993;
  char *v994;
  __int128 v995;
  uint64_t v996;
  __int128 v997;
  std::__shared_weak_count *v998;
  std::__shared_weak_count *v999;
  unint64_t *v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  char *v1004;
  __int128 v1005;
  unint64_t v1006;
  std::__shared_weak_count *v1007;
  unint64_t *v1008;
  unint64_t v1009;
  char *v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  uint64_t v1014;
  __int128 v1015;
  unint64_t v1016;
  std::string::size_type v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  unint64_t v1025;
  uint64_t v1026;
  char *v1027;
  uint64_t v1028;
  std::string::size_type v1029;
  char *v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  __int128 v1035;
  uint64_t v1036;
  char *v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  uint64_t v1041;
  __int128 v1042;
  uint64_t v1043;
  std::string::size_type v1044;
  std::string::size_type v1045;
  std::__shared_weak_count *v1046;
  unint64_t *v1047;
  unint64_t v1048;
  std::__shared_weak_count *v1049;
  unint64_t *v1050;
  unint64_t v1051;
  std::__shared_weak_count *v1052;
  unint64_t *v1053;
  unint64_t v1054;
  uint64_t v1055;
  __int128 v1056;
  __int128 v1057;
  uint64_t v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  int64_t v1065;
  int64_t v1066;
  std::__shared_weak_count *v1067;
  std::__shared_weak_count *v1068;
  char *v1069;
  std::__shared_weak_count *v1070;
  std::__shared_weak_count *v1071[2];
  std::__shared_weak_count *v1072[2];
  uint64_t v1073;
  char *v1074;
  char *v1075;
  void *v1076;
  uint64_t *v1077;
  int64x2_t *v1078;
  int64x2_t *v1079;
  uint64_t i64;
  uint64_t v1081;
  unint64_t v1082;
  uint64_t v1083;
  uint64_t *v1084;
  uint64_t *v1085;
  uint64_t v1086;
  __int8 *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  std::string::size_type v1091;
  uint64_t *v1092;
  uint64_t v1093;
  uint64_t *v1094;
  char *v1095;
  char *v1096;
  int v1097;
  unsigned int v1098;
  uint64_t v1099;
  uint64_t v1100;
  unsigned int v1101;
  uint64_t *v1102[7];
  uint64_t *v1103;
  uint64_t v1104;
  unint64_t v1105;
  unint64_t v1106;
  std::string v1107;
  void *v1108[2];
  int64_t v1109;
  uint64_t v1110;
  std::__shared_weak_count *v1111;
  uint64_t v1112;
  std::__shared_weak_count *v1113;
  std::string v1114;
  std::string v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  _BYTE v1119[40];
  __int128 v1120;
  __int128 v1121;
  unint64_t v1122;
  char v1123;
  uint64_t v1124;
  std::__shared_weak_count *v1125;
  char v1126;
  std::string __p;
  std::string::size_type v1128;
  int64x2_t *v1129;
  unint64_t v1130;
  char v1131;
  __int128 v1132;
  int64x2_t v1133;
  __int128 v1134;
  std::string v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  _BYTE v1139[40];
  __int128 v1140;
  __int128 v1141;
  unint64_t v1142;
  char v1143;
  __int128 v1144;
  char v1145;

  v4 = a1[1].i64[1];
  v3 = a1[2].i64[0];
  if (v4 != v3)
  {
    v1085 = (uint64_t *)a1->i64[1];
    v1084 = (uint64_t *)v1085[8];
    if (v1084)
    {
      v6 = v1085[39];
      if (v6)
      {
        v8 = a1[415].i64[0];
        v9 = v8 == a1[414].i64[1] ? 0 : *(_DWORD *)(v8 - 208) + 1;
        v1078 = a1 + 425;
        i64 = (uint64_t)a1[324].i64;
        v10 = a1[419].i64[1];
        v11 = v10 == a1[419].i64[0] ? 0 : *(_DWORD *)(v10 - 176) + 1;
        v12 = (uint64_t *)(v6 * (_QWORD)v1084);
        v13 = v9 <= v11 ? v11 : v9;
        v1098 = v13;
        v1087 = &a1[491].i8[8];
        v1091 = (std::string::size_type)&a1[196].u64[1];
        v1077 = &a1[415].i64[1];
        v1090 = *MEMORY[0x24BEDB7F0];
        v1079 = a1 + 420;
        v1088 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v1089 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v1082 = a2;
        v1083 = MEMORY[0x24BEDB848] + 16;
        v1081 = a1[2].i64[0];
        v1092 = v12;
        while (1)
        {
          v14 = *(_QWORD *)v4;
          v15 = *(uint64_t **)(*(_QWORD *)v4 + 496);
          v16 = *(uint64_t **)(*(_QWORD *)v4 + 504);
          if (a2 <= ((char *)v16 - (char *)v15) >> 6 && *(_DWORD *)(v14 + 520) != 2)
            break;
LABEL_15:
          v4 += 8;
          if (v4 == v3)
            return;
        }
        v17 = *(_DWORD *)(v14 + 32);
        v18 = *(_QWORD *)(a1->i64[1] + 64);
        v1104 = a1->i64[1];
        v1105 = v18;
        v1106 = 0;
        v1103 = v15;
        v1102[0] = &v1104;
        v1102[1] = (uint64_t *)&v1103;
        v1102[2] = v1085;
        v1102[3] = v1084;
        v1102[4] = v12;
        v1102[5] = v16;
        v1102[6] = (uint64_t *)v14;
        v19 = sub_20F6236F0(v1102);
        if (v19)
        {
          v20 = (float32x2_t *)v19;
          if (!*(_BYTE *)(*(_QWORD *)v4 + 488)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1321, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
LABEL_1428:
            abort();
          }
          v21 = (char *)a1[384].i64[1];
          v22 = (char *)a1[385].i64[0];
          if (v22 != v21)
          {
            v23 = (v22 - v21) >> 4;
            do
            {
              v24 = v23 >> 1;
              v25 = &v21[16 * (v23 >> 1)];
              v27 = *(_DWORD *)v25;
              v26 = v25 + 16;
              v23 += ~(v23 >> 1);
              if (v27 < v17)
                v21 = v26;
              else
                v23 = v24;
            }
            while (v23);
          }
          v1094 = v16;
          if (v21 == v22)
          {
            v29 = *(_QWORD *)v4;
          }
          else
          {
            v28 = *(_DWORD *)v21;
            v29 = *(_QWORD *)v4;
            if (v28 == v17)
              goto LABEL_47;
          }
          v30 = v29 + 40;
          v31 = *(unsigned __int8 *)(v29 + 488);
          if (v31)
            v32 = v30;
          else
            v32 = 0;
          v1133.i32[0] = v17;
          v1133.i8[4] = 1;
          v1133.i64[1] = v32;
          if (v31)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30))
            {
              v33 = v1133.i64[1];
              _Q1 = *(_OWORD *)(v1133.i64[1] + 64);
              _D3 = *(_QWORD *)(v1133.i64[1] + 72);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *(double *)(v1133.i64[1] + 80) * *(double *)(v1133.i64[1] + 80)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1428;
              }
            }
            else
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1428;
              }
              v33 = v1133.i64[1];
              if (!v1133.i64[1])
                goto LABEL_46;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33))
            {
              v40 = *(uint64_t **)(v33 + 96);
              v41 = *v40;
              v42 = (double *)v40[2];
              v43 = v40[4];
              v44 = (double *)v40[6];
              _D1 = *(double *)(v33 + 16) - v42[1];
              v46 = *(double *)(v33 + 24) - v42[2];
              _Q3.f64[0] = *(float64_t *)(v41 + 16);
              _Q7 = *(_OWORD *)(v41 + 48);
              _Q3.f64[1] = *(float64_t *)(v41 + 40);
              v49 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v41, *(int64x2_t *)(v41 + 24)), *(double *)(v33 + 8) - *v42), (float64x2_t)vzip2q_s64(*(int64x2_t *)v41, *(int64x2_t *)(v41 + 24)), _D1), _Q3, v46);
              __asm { FMLA            D2, D1, V7.D[1] }
              v51 = _D2 + *(double *)(v41 + 64) * v46;
              v52 = v49.f64[0] - *v44;
              _D2 = v49.f64[1] - v44[1];
              v54 = v51 - v44[2];
              _Q3.f64[0] = *(float64_t *)(v43 + 16);
              _Q4 = *(int64x2_t *)v43;
              _Q6 = *(int64x2_t *)(v43 + 24);
              _Q16 = *(_OWORD *)(v43 + 48);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q3.f64[1] = *(float64_t *)(v43 + 40);
              _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v43, _Q6), v52), (float64x2_t)vzip2q_s64(*(int64x2_t *)v43, _Q6), _D2), _Q3, v54);
              __asm
              {
                FMLA            D3, D2, V16.D[1]
                FMLA            D1, D2, V6.D[1]
              }
              _D1 = _D1 + v54 * _Q3.f64[1];
              __asm { FMLA            D2, D1, V17.D[1] }
              *(_QWORD *)&v1134 = sqrt(_D2+ (_Q3.f64[0] + v54 * *(double *)(v43 + 64))* (_Q3.f64[0] + *(double *)(v43 + 64) * v54));
              _Q1 = *(_OWORD *)(v33 + 64);
              _Q3.f64[0] = *(float64_t *)(v33 + 72);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *(double *)(v33 + 80) * *(double *)(v33 + 80)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1428;
              }
              if (sub_20FC2EA9C(i64, (unsigned int *)&v1133))
              {
                v1087[4] = 0;
                *(_DWORD *)v1087 = 0;
              }
            }
          }
LABEL_46:
          v29 = *(_QWORD *)v4;
          *(_DWORD *)(*(_QWORD *)v4 + 520) = 1;
          v16 = v1094;
LABEL_47:
          v1086 = v4;
          if (*(_BYTE *)(v29 + 488))
            v65 = v29 + 40;
          else
            v65 = 0;
          v66 = *(_QWORD *)(v65 + 32);
          v67 = *(_DWORD *)(v65 + 40);
          v68 = *(_DWORD *)(v65 + 48);
          v1093 = v66;
          while (1)
          {
            v69 = v1106;
            v70 = v1106 / v1105;
            v71 = v1106 % v1105;
            v72 = *(_QWORD **)(v1104 + 48);
            if (((v1106 % v1105) & 0x8000000000000000) != 0)
            {
              do
              {
                v86 = (_QWORD *)*v72;
                if (*v72)
                {
                  do
                  {
                    v73 = v86;
                    v86 = (_QWORD *)v86[1];
                  }
                  while (v86);
                }
                else
                {
                  do
                  {
                    v73 = (_QWORD *)v72[2];
                    _ZF = *v73 == (_QWORD)v72;
                    v72 = v73;
                  }
                  while (_ZF);
                }
                v72 = v73;
                _CF = __CFADD__(v71++, 1);
              }
              while (!_CF);
            }
            else if (v71)
            {
              do
              {
                v85 = (_QWORD *)v72[1];
                if (v85)
                {
                  do
                  {
                    v73 = v85;
                    v85 = (_QWORD *)*v85;
                  }
                  while (v85);
                }
                else
                {
                  do
                  {
                    v73 = (_QWORD *)v72[2];
                    _ZF = *v73 == (_QWORD)v72;
                    v72 = v73;
                  }
                  while (!_ZF);
                }
                v72 = v73;
                v84 = v71-- <= 1;
              }
              while (!v84);
            }
            else
            {
              v73 = *(_QWORD **)(v1104 + 48);
            }
            v74 = v73[4];
            v75 = v73[5];
            v76 = *(_QWORD **)(v1104 + 296);
            if (v70 < 0)
            {
              do
              {
                v87 = (_QWORD *)*v76;
                if (*v76)
                {
                  do
                  {
                    v77 = v87;
                    v87 = (_QWORD *)v87[1];
                  }
                  while (v87);
                }
                else
                {
                  do
                  {
                    v77 = (_QWORD *)v76[2];
                    _ZF = *v77 == (_QWORD)v76;
                    v76 = v77;
                  }
                  while (_ZF);
                }
                v76 = v77;
                _CF = __CFADD__(v70++, 1);
              }
              while (!_CF);
            }
            else if (v1105 <= v1106)
            {
              do
              {
                v88 = (_QWORD *)v76[1];
                if (v88)
                {
                  do
                  {
                    v77 = v88;
                    v88 = (_QWORD *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    v77 = (_QWORD *)v76[2];
                    _ZF = *v77 == (_QWORD)v76;
                    v76 = v77;
                  }
                  while (!_ZF);
                }
                v76 = v77;
                v84 = v70-- <= 1;
              }
              while (!v84);
            }
            else
            {
              v77 = *(_QWORD **)(v1104 + 296);
            }
            v78 = *((_DWORD *)v77 + 8);
            v1099 = v74;
            v1100 = v75;
            v1101 = v78;
            _ZF = v68 == v78 && v66 == v74;
            if (_ZF && v67 == (_DWORD)v75)
              goto LABEL_1315;
            v81 = sub_20E9DF85C((_QWORD *)(a1->i64[1] + 1784), &v1099);
            if (v81)
              v83 = v81[13];
            else
              v83 = 0;
            v89 = v1101;
            v90 = v1100;
            v91 = (__n128)vcvtq_f64_f32(v20[1]);
            v82.n128_f64[0] = v20[4].f32[0] * a3;
            if (v68 == v1101)
            {
              v1111 = 0;
              v1110 = 0;
              v1113 = 0;
              v1112 = 0;
              v92 = (char *)a1[419].i64[0];
              v93 = (char *)a1[419].i64[1];
              if (v92 == v93)
              {
                v94 = (char *)a1[419].i64[0];
              }
              else
              {
                v94 = (char *)a1[419].i64[1];
                if (*((_QWORD *)v93 - 23) >= (unint64_t)v1098)
                {
                  v95 = 0xD37A6F4DE9BD37A7 * ((v93 - v92) >> 3);
                  v96 = (char *)a1[419].i64[0];
                  do
                  {
                    v97 = v95 >> 1;
                    v98 = (unint64_t *)&v96[184 * (v95 >> 1)];
                    v100 = *v98;
                    v99 = (char *)(v98 + 23);
                    v95 += ~(v95 >> 1);
                    if (v100 < v1098)
                      v96 = v99;
                    else
                      v95 = v97;
                  }
                  while (v95);
                  v94 = (char *)a1[419].i64[1];
                  if (v96 != v93)
                  {
                    v94 = v96;
                    if (*(_QWORD *)v96 == v1098)
                      goto LABEL_321;
                  }
                }
              }
              *(__n128 *)&v1114.__r_.__value_.__r.__words[1] = v91;
              v1114.__r_.__value_.__r.__words[0] = v1098;
              v1115.__r_.__value_.__r.__words[0] = v1091;
              v1115.__r_.__value_.__l.__size_ = v83;
              v1115.__r_.__value_.__r.__words[2] = v82.n128_u64[0];
              v82 = 0uLL;
              v1116 = 0u;
              v1117 = 0u;
              v1118 = 0u;
              *(_QWORD *)v1119 = 0;
              v1121 = 0uLL;
              *(_QWORD *)&v1120 = 0xBFF0000000000000;
              BYTE8(v1120) = 0;
              LOBYTE(v1122) = 0;
              v110 = a1[336].i64[1];
              v111 = a1[337].i64[0];
              if (v111 != v110)
              {
                v112 = (v111 - v110) >> 4;
                do
                {
                  v113 = v112 >> 1;
                  v114 = (unsigned int *)(v110 + 16 * (v112 >> 1));
                  v116 = *v114;
                  v115 = v114 + 4;
                  v112 += ~(v112 >> 1);
                  if (v116 < v68)
                    v110 = (uint64_t)v115;
                  else
                    v112 = v113;
                }
                while (v112);
                if (v110 != v111 && *(_DWORD *)v110 == v68)
                {
                  v117 = *(_QWORD *)(v110 + 8);
                  *(_QWORD *)&v1116 = v117;
                  ++*(_DWORD *)(*(_QWORD *)(v110 + 8) + 8);
                  v118 = a1[324].i64[1];
                  v119 = a1[325].i64[0];
                  v120 = v118;
                  if (v119 != v118)
                  {
                    v121 = (v119 - v118) >> 4;
                    v120 = a1[324].i64[1];
                    do
                    {
                      v122 = v121 >> 1;
                      v123 = (unsigned int *)(v120 + 16 * (v121 >> 1));
                      v125 = *v123;
                      v124 = v123 + 4;
                      v121 += ~(v121 >> 1);
                      if (v125 < v67)
                        v120 = (uint64_t)v124;
                      else
                        v121 = v122;
                    }
                    while (v121);
                  }
                  if (v120 == v119 || *(_DWORD *)v120 != v67)
                  {
                    v156 = 0;
                    v148 = 0;
                    v140 = 0;
                    v132 = 0;
                    v126 = 0;
                  }
                  else
                  {
                    v126 = *(_QWORD *)(v120 + 8);
                    *((_QWORD *)&v1116 + 1) = v126;
                    ++*(_DWORD *)(*(_QWORD *)(v120 + 8) + 8);
                    if (v119 != v118)
                    {
                      v127 = (v119 - v118) >> 4;
                      do
                      {
                        v128 = v127 >> 1;
                        v129 = (unsigned int *)(v118 + 16 * (v127 >> 1));
                        v131 = *v129;
                        v130 = v129 + 4;
                        v127 += ~(v127 >> 1);
                        if (v131 < v90)
                          v118 = (uint64_t)v130;
                        else
                          v127 = v128;
                      }
                      while (v127);
                    }
                    if (v118 == v119 || *(_DWORD *)v118 != v90)
                    {
                      v156 = 0;
                      v148 = 0;
                      v140 = 0;
                      v132 = 0;
                    }
                    else
                    {
                      v132 = *(_QWORD *)(v118 + 8);
                      *(_QWORD *)&v1117 = v132;
                      ++*(_DWORD *)(*(_QWORD *)(v118 + 8) + 8);
                      v133 = a1[366].i64[1];
                      v134 = a1[367].i64[0];
                      if (v134 != v133)
                      {
                        v135 = (v134 - v133) >> 4;
                        do
                        {
                          v136 = v135 >> 1;
                          v137 = (unsigned int *)(v133 + 16 * (v135 >> 1));
                          v139 = *v137;
                          v138 = v137 + 4;
                          v135 += ~(v135 >> 1);
                          if (v139 < v68)
                            v133 = (uint64_t)v138;
                          else
                            v135 = v136;
                        }
                        while (v135);
                      }
                      if (v133 == v134 || *(_DWORD *)v133 != v68)
                      {
                        v156 = 0;
                        v148 = 0;
                        v140 = 0;
                      }
                      else
                      {
                        v140 = *(_QWORD *)(v133 + 8);
                        *((_QWORD *)&v1117 + 1) = v140;
                        ++*(_DWORD *)(*(_QWORD *)(v133 + 8) + 8);
                        v141 = a1[372].i64[1];
                        v142 = a1[373].i64[0];
                        if (v142 != v141)
                        {
                          v143 = (v142 - v141) >> 4;
                          do
                          {
                            v144 = v143 >> 1;
                            v145 = (unsigned int *)(v141 + 16 * (v143 >> 1));
                            v147 = *v145;
                            v146 = v145 + 4;
                            v143 += ~(v143 >> 1);
                            if (v147 < v68)
                              v141 = (uint64_t)v146;
                            else
                              v143 = v144;
                          }
                          while (v143);
                        }
                        if (v141 == v142 || *(_DWORD *)v141 != v68)
                        {
                          v156 = 0;
                          v148 = 0;
                        }
                        else
                        {
                          v148 = *(_QWORD *)(v141 + 8);
                          *(_QWORD *)&v1118 = v148;
                          ++*(_DWORD *)(*(_QWORD *)(v141 + 8) + 8);
                          v149 = a1[378].i64[1];
                          v150 = a1[379].i64[0];
                          if (v150 != v149)
                          {
                            v151 = (v150 - v149) >> 4;
                            do
                            {
                              v152 = v151 >> 1;
                              v153 = (unsigned int *)(v149 + 16 * (v151 >> 1));
                              v155 = *v153;
                              v154 = v153 + 4;
                              v151 += ~(v151 >> 1);
                              if (v155 < v68)
                                v149 = (uint64_t)v154;
                              else
                                v151 = v152;
                            }
                            while (v151);
                          }
                          if (v149 == v150 || *(_DWORD *)v149 != v68)
                          {
                            v156 = 0;
                          }
                          else
                          {
                            v156 = *(_QWORD *)(v149 + 8);
                            *((_QWORD *)&v1118 + 1) = v156;
                            ++*(_DWORD *)(*(_QWORD *)(v149 + 8) + 8);
                            v157 = a1[384].i64[1];
                            v158 = a1[385].i64[0];
                            if (v158 != v157)
                            {
                              v159 = (v158 - v157) >> 4;
                              do
                              {
                                v160 = v159 >> 1;
                                v161 = (unsigned __int32 *)(v157 + 16 * (v159 >> 1));
                                v163 = *v161;
                                v162 = v161 + 4;
                                v159 += ~(v159 >> 1);
                                if (v163 < v17)
                                  v157 = (uint64_t)v162;
                                else
                                  v159 = v160;
                              }
                              while (v159);
                            }
                            if (v157 != v158 && *(_DWORD *)v157 == v17)
                            {
                              v164 = *(_QWORD *)(v157 + 8);
                              *(_QWORD *)v1119 = v164;
                              ++*(_DWORD *)(*(_QWORD *)(v157 + 8) + 8);
                              if (*(_BYTE *)(v117 + 20)
                                || *(_BYTE *)(v126 + 20)
                                || *(_BYTE *)(v132 + 20)
                                || *(_BYTE *)(v140 + 20)
                                || *(_BYTE *)(v148 + 20)
                                || *(_BYTE *)(v156 + 20)
                                || *(_BYTE *)(v164 + 20))
                              {
                                v1133.i64[0] = v1098;
                                v1133.i64[1] = v1098;
                                v1134 = *(_OWORD *)&v1114.__r_.__value_.__r.__words[1];
                                v1135 = v1115;
                                v1136 = v1116;
                                v1137 = v1117;
                                v1138 = v1118;
                                *(_QWORD *)v1139 = *(_QWORD *)v1119;
                                *(_OWORD *)&v1139[8] = *(_OWORD *)&v1119[8];
                                *(_OWORD *)&v1139[24] = *(_OWORD *)&v1119[24];
                                *(_QWORD *)&v1140 = v1120;
                                BYTE8(v1140) = BYTE8(v1120);
                                v1141 = 0uLL;
                                v1121 = 0uLL;
                                LOBYTE(v1142) = 0;
                                if (v93 == v94 || *(_QWORD *)v94 != v1098)
                                {
                                  if ((unint64_t)v93 >= v1079->i64[0])
                                  {
                                    v1066 = 0xD37A6F4DE9BD37A7 * ((v94 - v92) >> 3);
                                    v541 = 0xD37A6F4DE9BD37A7 * ((v93 - v92) >> 3) + 1;
                                    if (v541 > 0x1642C8590B21642)
                                      sub_20E867F44();
                                    if (0xA6F4DE9BD37A6F4ELL * ((v1079->i64[0] - (uint64_t)v92) >> 3) > v541)
                                      v541 = 0xA6F4DE9BD37A6F4ELL * ((v1079->i64[0] - (uint64_t)v92) >> 3);
                                    if (0xD37A6F4DE9BD37A7 * ((v1079->i64[0] - (uint64_t)v92) >> 3) >= 0xB21642C8590B21)
                                      v542 = 0x1642C8590B21642;
                                    else
                                      v542 = v541;
                                    v1129 = v1079;
                                    if (v542)
                                    {
                                      if (v542 > 0x1642C8590B21642)
                                        sub_20E877A38();
                                      v543 = operator new(184 * v542);
                                    }
                                    else
                                    {
                                      v543 = 0;
                                    }
                                    v555 = (std::string::size_type)v543 + 8 * ((v94 - v92) >> 3);
                                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v543;
                                    __p.__r_.__value_.__l.__size_ = v555;
                                    __p.__r_.__value_.__r.__words[2] = v555;
                                    v1128 = (std::string::size_type)v543 + 184 * v542;
                                    v556 = vdupq_n_s64(v1098);
                                    if (v1066 == v542)
                                    {
                                      v1076 = v543;
                                      *(int64x2_t *)v1071 = v556;
                                      if (v94 - v92 < 1)
                                      {
                                        if (v92 == v94)
                                          v959 = 1;
                                        else
                                          v959 = 0xA6F4DE9BD37A6F4ELL * ((v94 - v92) >> 3);
                                        if (v959 > 0x1642C8590B21642)
                                          sub_20E877A38();
                                        v960 = operator new(184 * v959);
                                        v555 = (std::string::size_type)v960 + 184 * (v959 >> 2);
                                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v960;
                                        __p.__r_.__value_.__l.__size_ = v555;
                                        v1128 = (std::string::size_type)v960 + 184 * v959;
                                        if (v1076)
                                          operator delete(v1076);
                                        v559 = v555;
                                        v556 = *(int64x2_t *)v1071;
                                      }
                                      else
                                      {
                                        v557 = v1066 + 2;
                                        if (v1066 >= -1)
                                          v557 = v1066 + 1;
                                        v558 = v557 >> 1;
                                        v559 = sub_20FA5579C((uint64_t)v543 + 184 * v1066, v555, v555 - 184 * (v557 >> 1));
                                        v555 = __p.__r_.__value_.__l.__size_ - 184 * v558;
                                        __p.__r_.__value_.__l.__size_ = v555;
                                        v556 = v1133;
                                      }
                                    }
                                    else
                                    {
                                      v559 = (uint64_t)v543 + 8 * ((v94 - v92) >> 3);
                                    }
                                    *(int64x2_t *)v559 = v556;
                                    *(_OWORD *)(v559 + 16) = v1134;
                                    v961 = *(_OWORD *)&v1135.__r_.__value_.__l.__data_;
                                    *(_QWORD *)(v559 + 48) = *((_QWORD *)&v1135.__r_.__value_.__l + 2);
                                    *(_OWORD *)(v559 + 32) = v961;
                                    v962 = v1136;
                                    v963 = v1137;
                                    v964 = v1138;
                                    *(_QWORD *)(v559 + 104) = *(_QWORD *)v1139;
                                    *(_OWORD *)(v559 + 88) = v964;
                                    *(_OWORD *)(v559 + 72) = v963;
                                    *(_OWORD *)(v559 + 56) = v962;
                                    *(_OWORD *)(v559 + 112) = *(_OWORD *)&v1139[8];
                                    *(_OWORD *)(v559 + 128) = *(_OWORD *)&v1139[24];
                                    v965 = v1140;
                                    *(_BYTE *)(v559 + 152) = BYTE8(v1140);
                                    *(_QWORD *)(v559 + 144) = v965;
                                    *(_OWORD *)(v559 + 160) = v1141;
                                    v1141 = 0uLL;
                                    *(_BYTE *)(v559 + 176) = v1142;
                                    v966 = v559 + 184;
                                    __p.__r_.__value_.__r.__words[2] = v559 + 184;
                                    v967 = (char *)a1[419].i64[0];
                                    if (v967 != v94)
                                    {
                                      v968 = 0;
                                      do
                                      {
                                        v969 = v555 + v968;
                                        v970 = &v94[v968];
                                        *(_QWORD *)(v969 - 184) = *(_QWORD *)&v94[v968 - 184];
                                        *(_QWORD *)(v969 - 176) = *(_QWORD *)&v94[v968 - 176];
                                        *(_OWORD *)(v969 - 168) = *(_OWORD *)&v94[v968 - 168];
                                        v971 = *(_OWORD *)&v94[v968 - 152];
                                        *(_QWORD *)(v969 - 136) = *(_QWORD *)&v94[v968 - 136];
                                        *(_OWORD *)(v969 - 152) = v971;
                                        v972 = *(_OWORD *)&v94[v968 - 128];
                                        v973 = *(_OWORD *)&v94[v968 - 112];
                                        v974 = *(_OWORD *)&v94[v968 - 96];
                                        *(_QWORD *)(v969 - 80) = *(_QWORD *)&v94[v968 - 80];
                                        *(_OWORD *)(v969 - 112) = v973;
                                        *(_OWORD *)(v969 - 96) = v974;
                                        *(_OWORD *)(v969 - 128) = v972;
                                        *(_OWORD *)(v969 - 72) = *(_OWORD *)&v94[v968 - 72];
                                        *(_OWORD *)(v969 - 56) = *(_OWORD *)&v94[v968 - 56];
                                        v975 = *(_QWORD *)&v94[v968 - 40];
                                        *(_BYTE *)(v969 - 32) = v94[v968 - 32];
                                        *(_QWORD *)(v969 - 40) = v975;
                                        *(_OWORD *)(v969 - 24) = *(_OWORD *)&v94[v968 - 24];
                                        *((_QWORD *)v970 - 3) = 0;
                                        *((_QWORD *)v970 - 2) = 0;
                                        *(_BYTE *)(v969 - 8) = v94[v968 - 8];
                                        v968 -= 184;
                                      }
                                      while (&v94[v968] != v967);
                                      v555 += v968;
                                    }
                                    v976 = (char *)a1[419].i64[1];
                                    if (v976 != v94)
                                    {
                                      do
                                      {
                                        *(_QWORD *)v966 = *(_QWORD *)v94;
                                        *(_QWORD *)(v966 + 8) = *((_QWORD *)v94 + 1);
                                        *(_OWORD *)(v966 + 16) = *((_OWORD *)v94 + 1);
                                        v977 = *((_OWORD *)v94 + 2);
                                        *(_QWORD *)(v966 + 48) = *((_QWORD *)v94 + 6);
                                        *(_OWORD *)(v966 + 32) = v977;
                                        v978 = *(_OWORD *)(v94 + 56);
                                        v979 = *(_OWORD *)(v94 + 72);
                                        v980 = *(_OWORD *)(v94 + 88);
                                        *(_QWORD *)(v966 + 104) = *((_QWORD *)v94 + 13);
                                        *(_OWORD *)(v966 + 88) = v980;
                                        *(_OWORD *)(v966 + 72) = v979;
                                        *(_OWORD *)(v966 + 56) = v978;
                                        *(_OWORD *)(v966 + 112) = *((_OWORD *)v94 + 7);
                                        *(_OWORD *)(v966 + 128) = *((_OWORD *)v94 + 8);
                                        v981 = *((_QWORD *)v94 + 18);
                                        *(_BYTE *)(v966 + 152) = v94[152];
                                        *(_QWORD *)(v966 + 144) = v981;
                                        *(_OWORD *)(v966 + 160) = *((_OWORD *)v94 + 10);
                                        *((_QWORD *)v94 + 20) = 0;
                                        *((_QWORD *)v94 + 21) = 0;
                                        *(_BYTE *)(v966 + 176) = v94[176];
                                        v966 += 184;
                                        v94 += 184;
                                      }
                                      while (v94 != v976);
                                      v94 = (char *)a1[419].i64[1];
                                    }
                                    v982 = a1[419].u64[0];
                                    a1[419].i64[0] = v555;
                                    a1[419].i64[1] = v966;
                                    v983 = a1[420].u64[0];
                                    a1[420].i64[0] = v1128;
                                    v1128 = v983;
                                    __p.__r_.__value_.__l.__size_ = v982;
                                    __p.__r_.__value_.__r.__words[0] = v982;
                                    if (v94 != (char *)v982)
                                    {
                                      do
                                      {
                                        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v94 - 184);
                                        v984 = (std::__shared_weak_count *)*((_QWORD *)v94 - 2);
                                        if (v984)
                                        {
                                          p_shared_owners = (unint64_t *)&v984->__shared_owners_;
                                          do
                                            v986 = __ldaxr(p_shared_owners);
                                          while (__stlxr(v986 - 1, p_shared_owners));
                                          if (!v986)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v984->__on_zero_shared)(v984);
                                            std::__shared_weak_count::__release_weak(v984);
                                          }
                                        }
                                        v94 = (char *)__p.__r_.__value_.__r.__words[2];
                                      }
                                      while (__p.__r_.__value_.__r.__words[2] != v982);
                                      v94 = (char *)__p.__r_.__value_.__r.__words[0];
                                    }
                                    if (v94)
                                      operator delete(v94);
                                  }
                                  else if (v94 == v93)
                                  {
                                    *(_QWORD *)v93 = v1098;
                                    v549 = &v92[8 * ((v94 - v92) >> 3)];
                                    *((_QWORD *)v549 + 1) = v1098;
                                    *((_OWORD *)v549 + 1) = v1134;
                                    v550 = *(_OWORD *)&v1135.__r_.__value_.__l.__data_;
                                    *((_QWORD *)v549 + 6) = *((_QWORD *)&v1135.__r_.__value_.__l + 2);
                                    *((_OWORD *)v549 + 2) = v550;
                                    v551 = v1136;
                                    v552 = v1137;
                                    v553 = v1138;
                                    *((_QWORD *)v549 + 13) = *(_QWORD *)v1139;
                                    *(_OWORD *)(v549 + 88) = v553;
                                    *(_OWORD *)(v549 + 72) = v552;
                                    *(_OWORD *)(v549 + 56) = v551;
                                    *((_OWORD *)v549 + 7) = *(_OWORD *)&v1139[8];
                                    *((_OWORD *)v549 + 8) = *(_OWORD *)&v1139[24];
                                    v554 = v1140;
                                    v549[152] = BYTE8(v1140);
                                    *((_QWORD *)v549 + 18) = v554;
                                    *((_QWORD *)v549 + 20) = 0;
                                    *((_QWORD *)v549 + 21) = 0;
                                    v1141 = 0uLL;
                                    v549[176] = 0;
                                    a1[419].i64[1] = (uint64_t)(v93 + 184);
                                  }
                                  else
                                  {
                                    *(_OWORD *)v1108 = *(_OWORD *)&v1114.__r_.__value_.__r.__words[1];
                                    __p = v1115;
                                    v1062 = v1137;
                                    v1064 = v1136;
                                    v1060 = v1138;
                                    v1058 = *(_QWORD *)v1139;
                                    *(_OWORD *)&v1107.__r_.__value_.__l.__data_ = *(_OWORD *)&v1119[8];
                                    v1132 = *(_OWORD *)&v1119[24];
                                    v1131 = BYTE8(v1120);
                                    v1130 = v1120;
                                    v165 = v93 - 184;
                                    v166 = v93;
                                    v167 = v93 - 184;
                                    v1141 = 0uLL;
                                    if ((unint64_t)v93 >= 0xB8)
                                    {
                                      do
                                      {
                                        *(_QWORD *)v166 = *(_QWORD *)v167;
                                        *((_QWORD *)v166 + 1) = *((_QWORD *)v167 + 1);
                                        *((_OWORD *)v166 + 1) = *((_OWORD *)v167 + 1);
                                        v168 = *((_OWORD *)v167 + 2);
                                        *((_QWORD *)v166 + 6) = *((_QWORD *)v167 + 6);
                                        *((_OWORD *)v166 + 2) = v168;
                                        v169 = *(_OWORD *)(v167 + 56);
                                        v170 = *(_OWORD *)(v167 + 72);
                                        v171 = *(_OWORD *)(v167 + 88);
                                        *((_QWORD *)v166 + 13) = *((_QWORD *)v167 + 13);
                                        *(_OWORD *)(v166 + 88) = v171;
                                        *(_OWORD *)(v166 + 72) = v170;
                                        *(_OWORD *)(v166 + 56) = v169;
                                        *((_OWORD *)v166 + 7) = *((_OWORD *)v167 + 7);
                                        *((_OWORD *)v166 + 8) = *((_OWORD *)v167 + 8);
                                        v172 = *((_QWORD *)v167 + 18);
                                        v166[152] = v167[152];
                                        *((_QWORD *)v166 + 18) = v172;
                                        *((_OWORD *)v166 + 10) = *((_OWORD *)v167 + 10);
                                        *((_QWORD *)v167 + 20) = 0;
                                        *((_QWORD *)v167 + 21) = 0;
                                        v166[176] = v167[176];
                                        v166 += 184;
                                        v167 += 184;
                                      }
                                      while (v167 < v93);
                                    }
                                    a1[419].i64[1] = (uint64_t)v166;
                                    if (v93 != v94 + 184)
                                    {
                                      v173 = v93 - 184;
                                      v174 = v93;
                                      do
                                      {
                                        v534 = *((_QWORD *)v173 - 23);
                                        v173 -= 184;
                                        *((_QWORD *)v174 - 23) = v534;
                                        v174 -= 184;
                                        *((_QWORD *)v174 + 1) = *((_QWORD *)v173 + 1);
                                        *((_OWORD *)v174 + 1) = *((_OWORD *)v173 + 1);
                                        v535 = *((_OWORD *)v173 + 2);
                                        *((_QWORD *)v174 + 6) = *((_QWORD *)v173 + 6);
                                        *((_OWORD *)v174 + 2) = v535;
                                        *((_QWORD *)v174 + 7) = *((_QWORD *)v173 + 7);
                                        *((_QWORD *)v174 + 8) = *((_QWORD *)v173 + 8);
                                        *((_QWORD *)v174 + 9) = *((_QWORD *)v173 + 9);
                                        *((_QWORD *)v174 + 10) = *((_QWORD *)v173 + 10);
                                        *((_QWORD *)v174 + 11) = *((_QWORD *)v173 + 11);
                                        *((_QWORD *)v174 + 12) = *((_QWORD *)v173 + 12);
                                        *((_QWORD *)v174 + 13) = *((_QWORD *)v173 + 13);
                                        *((_OWORD *)v174 + 7) = *((_OWORD *)v173 + 7);
                                        *((_OWORD *)v174 + 8) = *((_OWORD *)v173 + 8);
                                        v536 = *((_QWORD *)v173 + 18);
                                        v174[152] = v173[152];
                                        *((_QWORD *)v174 + 18) = v536;
                                        v537 = *((_OWORD *)v173 + 10);
                                        *((_QWORD *)v173 + 20) = 0;
                                        *((_QWORD *)v173 + 21) = 0;
                                        v538 = (std::__shared_weak_count *)*((_QWORD *)v174 + 21);
                                        *((_OWORD *)v174 + 10) = v537;
                                        if (v538)
                                        {
                                          v539 = (unint64_t *)&v538->__shared_owners_;
                                          do
                                            v540 = __ldaxr(v539);
                                          while (__stlxr(v540 - 1, v539));
                                          if (!v540)
                                          {
                                            v1070 = v538;
                                            v1096 = v165;
                                            v1075 = v174;
                                            ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
                                            std::__shared_weak_count::__release_weak(v1070);
                                            v174 = v1075;
                                            v165 = v1096;
                                          }
                                        }
                                        *(v93 - 8) = *(v165 - 8);
                                        v93 = v174;
                                        v165 = v173;
                                      }
                                      while (v173 != v94);
                                    }
                                    *(int64x2_t *)v94 = vdupq_n_s64(v1098);
                                    v544 = &v92[8 * ((v94 - v92) >> 3)];
                                    *((_OWORD *)v544 + 1) = *(_OWORD *)v1108;
                                    *(std::string *)(v544 + 32) = __p;
                                    *(_OWORD *)(v544 + 56) = v1064;
                                    *(_OWORD *)(v544 + 72) = v1062;
                                    *(_OWORD *)(v544 + 88) = v1060;
                                    *((_QWORD *)v544 + 13) = v1058;
                                    v545 = v1132;
                                    *((_OWORD *)v544 + 7) = *(_OWORD *)&v1107.__r_.__value_.__l.__data_;
                                    *((_OWORD *)v544 + 8) = v545;
                                    v544[152] = v1131;
                                    *((_QWORD *)v544 + 18) = v1130;
                                    v546 = (std::__shared_weak_count *)*((_QWORD *)v544 + 21);
                                    *((_QWORD *)v544 + 20) = 0;
                                    *((_QWORD *)v544 + 21) = 0;
                                    if (v546)
                                    {
                                      v547 = (unint64_t *)&v546->__shared_owners_;
                                      do
                                        v548 = __ldaxr(v547);
                                      while (__stlxr(v548 - 1, v547));
                                      if (!v548)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                                        std::__shared_weak_count::__release_weak(v546);
                                      }
                                    }
                                    v92[8 * ((v94 - v92) >> 3) + 176] = 0;
                                  }
                                  v987 = (std::__shared_weak_count *)*((_QWORD *)&v1141 + 1);
                                  if (*((_QWORD *)&v1141 + 1))
                                  {
                                    v988 = (unint64_t *)(*((_QWORD *)&v1141 + 1) + 8);
                                    do
                                      v989 = __ldaxr(v988);
                                    while (__stlxr(v989 - 1, v988));
                                    if (!v989)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v987->__on_zero_shared)(v987);
                                      std::__shared_weak_count::__release_weak(v987);
                                    }
                                  }
                                }
                                v1078->i8[2] = 0;
                                v1078->i8[0] = 0;
                                v91 = (__n128)xmmword_210378060;
                                v82 = (__n128)vaddq_s64(a1[424], (int64x2_t)xmmword_210378060);
                                a1[424] = (int64x2_t)v82;
                                v990 = (std::__shared_weak_count *)*((_QWORD *)&v1121 + 1);
                                if (*((_QWORD *)&v1121 + 1))
                                {
                                  v991 = (unint64_t *)(*((_QWORD *)&v1121 + 1) + 8);
                                  do
                                    v992 = __ldaxr(v991);
                                  while (__stlxr(v992 - 1, v991));
                                  if (!v992)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v990->__on_zero_shared)(v990);
                                    std::__shared_weak_count::__release_weak(v990);
                                  }
                                }
                                v268 = 0;
                                v269 = v1113;
                                if (!v1113)
                                {
LABEL_320:
                                  if ((v268 & 1) != 0)
                                  {
LABEL_321:
                                    v272 = 1;
                                    v273 = v1111;
                                    if (!v1111)
                                      goto LABEL_327;
                                  }
                                  else
                                  {
                                    v272 = 0;
                                    v1087[4] = 0;
                                    *(_DWORD *)v1087 = 0;
                                    v273 = v1111;
                                    if (!v1111)
                                      goto LABEL_327;
                                  }
                                  v274 = (unint64_t *)&v273->__shared_owners_;
                                  do
                                    v275 = __ldaxr(v274);
                                  while (__stlxr(v275 - 1, v274));
                                  if (v275)
                                  {
LABEL_327:
                                    if (v272)
                                      goto LABEL_328;
                                    goto LABEL_1314;
                                  }
                                  ((void (*)(std::__shared_weak_count *, __n128, __n128))v273->__on_zero_shared)(v273, v82, v91);
                                  std::__shared_weak_count::__release_weak(v273);
                                  if (v272)
                                  {
LABEL_328:
                                    sub_20E863438((uint64_t)&v1133);
                                    v276 = (char *)a1[384].i64[1];
                                    v277 = (char *)a1[385].i64[0];
                                    if (v277 != v276)
                                    {
                                      v278 = (v277 - v276) >> 4;
                                      do
                                      {
                                        v279 = v278 >> 1;
                                        v280 = &v276[16 * (v278 >> 1)];
                                        v282 = *(_DWORD *)v280;
                                        v281 = v280 + 16;
                                        v278 += ~(v278 >> 1);
                                        if (v282 < v17)
                                          v276 = v281;
                                        else
                                          v278 = v279;
                                      }
                                      while (v278);
                                    }
                                    if (v276 == v277 || *(_DWORD *)v276 != v17)
                                    {
                                      v288 = 1;
                                      v289 = a1[336].i64[1];
                                      v290 = (_DWORD *)a1[337].i64[0];
                                      v291 = (_DWORD *)v289;
                                      v292 = (uint64_t)v290 - v289;
                                      if (v290 == (_DWORD *)v289)
                                        goto LABEL_352;
                                    }
                                    else
                                    {
                                      v283 = sub_20E86A980(&v1134, (uint64_t)"error: landmark variable ", 25);
                                      sub_20F622838((uint64_t)&__p);
                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        p_p = &__p;
                                      else
                                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                      else
                                        size = __p.__r_.__value_.__l.__size_;
                                      v286 = sub_20E86A980(v283, (uint64_t)p_p, size);
                                      sub_20E86A980(v286, (uint64_t)" with ID ", 9);
                                      v287 = (_QWORD *)std::ostream::operator<<();
                                      sub_20E86A980(v287, (uint64_t)" was not found.\n", 16);
                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__p.__r_.__value_.__l.__data_);
                                      v288 = 0;
                                      v289 = a1[336].i64[1];
                                      v290 = (_DWORD *)a1[337].i64[0];
                                      v291 = (_DWORD *)v289;
                                      v292 = (uint64_t)v290 - v289;
                                      if (v290 == (_DWORD *)v289)
                                      {
LABEL_352:
                                        if (v291 != v290 && *v291 == v68)
                                        {
                                          if (v290 != (_DWORD *)v289)
                                          {
                                            v298 = ((uint64_t)v290 - v289) >> 4;
                                            do
                                            {
                                              v299 = v298 >> 1;
                                              v300 = (unsigned int *)(v289 + 16 * (v298 >> 1));
                                              v302 = *v300;
                                              v301 = v300 + 4;
                                              v298 += ~(v298 >> 1);
                                              if (v302 < v68)
                                                v289 = (uint64_t)v301;
                                              else
                                                v298 = v299;
                                            }
                                            while (v298);
                                          }
                                          if ((_DWORD *)v289 == v290 || *(_DWORD *)v289 != v68)
                                            v289 = (uint64_t)v290;
                                          v303 = *(_QWORD *)(v289 + 8);
                                          v304 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                          sub_20F622C70((uint64_t)&__p);
                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v305 = &__p;
                                          else
                                            v305 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v306 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                          else
                                            v306 = __p.__r_.__value_.__l.__size_;
                                          v307 = sub_20E86A980(v304, (uint64_t)v305, v306);
                                          sub_20E86A980(v307, (uint64_t)" with ID ", 9);
                                          v308 = (_QWORD *)std::ostream::operator<<();
                                          sub_20E86A980(v308, (uint64_t)" found (", 8);
                                          v309 = (_QWORD *)std::ostream::operator<<();
                                          v310 = sub_20E86A980(v309, (uint64_t)", ", 2);
                                          if (*(_BYTE *)(v303 + 20))
                                            v311 = "free";
                                          else
                                            v311 = "fixed";
                                          if (*(_BYTE *)(v303 + 20))
                                            v312 = 4;
                                          else
                                            v312 = 5;
                                          v313 = sub_20E86A980(v310, (uint64_t)v311, v312);
                                          sub_20E86A980(v313, (uint64_t)")\n", 2);
                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(__p.__r_.__value_.__l.__data_);
                                          v314 = *(unsigned __int8 *)(v303 + 20);
                                          v315 = a1[324].i64[1];
                                          v316 = (_DWORD *)a1[325].i64[0];
                                          v317 = (_DWORD *)v315;
                                          v318 = (uint64_t)v316 - v315;
                                          if (v316 == (_DWORD *)v315)
                                            goto LABEL_393;
LABEL_388:
                                          v324 = v318 >> 4;
                                          v317 = (_DWORD *)v315;
                                          do
                                          {
                                            v325 = v324 >> 1;
                                            v326 = &v317[4 * (v324 >> 1)];
                                            v328 = *v326;
                                            v327 = v326 + 4;
                                            v324 += ~(v324 >> 1);
                                            if (v328 < v67)
                                              v317 = v327;
                                            else
                                              v324 = v325;
                                          }
                                          while (v324);
                                          goto LABEL_393;
                                        }
                                        v319 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                        sub_20F622C70((uint64_t)&__p);
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v320 = &__p;
                                        else
                                          v320 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v321 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                        else
                                          v321 = __p.__r_.__value_.__l.__size_;
                                        v322 = sub_20E86A980(v319, (uint64_t)v320, v321);
                                        sub_20E86A980(v322, (uint64_t)" with ID ", 9);
                                        v323 = (_QWORD *)std::ostream::operator<<();
                                        sub_20E86A980(v323, (uint64_t)" not found\n", 11);
                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                        v288 = 0;
                                        v314 = 0;
                                        v315 = a1[324].i64[1];
                                        v316 = (_DWORD *)a1[325].i64[0];
                                        v317 = (_DWORD *)v315;
                                        v318 = (uint64_t)v316 - v315;
                                        if (v316 != (_DWORD *)v315)
                                          goto LABEL_388;
LABEL_393:
                                        if (v317 == v316 || *v317 != v67)
                                        {
                                          v349 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                          sub_20F622E88((uint64_t)&__p);
                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v350 = &__p;
                                          else
                                            v350 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v351 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                          else
                                            v351 = __p.__r_.__value_.__l.__size_;
                                          v352 = sub_20E86A980(v349, (uint64_t)v350, v351);
                                          sub_20E86A980(v352, (uint64_t)" with ID ", 9);
                                          v353 = (_QWORD *)std::ostream::operator<<();
                                          sub_20E86A980(v353, (uint64_t)" not found\n", 11);
                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                          {
                                            operator delete(__p.__r_.__value_.__l.__data_);
                                            v288 = 0;
                                            v345 = a1[324].i64[1];
                                            v346 = (_DWORD *)a1[325].i64[0];
                                            v347 = (_DWORD *)v345;
                                            v348 = (uint64_t)v346 - v345;
                                            if (v346 == (_DWORD *)v345)
                                              goto LABEL_437;
                                          }
                                          else
                                          {
                                            v288 = 0;
                                            v345 = a1[324].i64[1];
                                            v346 = (_DWORD *)a1[325].i64[0];
                                            v347 = (_DWORD *)v345;
                                            v348 = (uint64_t)v346 - v345;
                                            if (v346 == (_DWORD *)v345)
                                              goto LABEL_437;
                                          }
                                        }
                                        else
                                        {
                                          if (v316 != (_DWORD *)v315)
                                          {
                                            v329 = ((uint64_t)v316 - v315) >> 4;
                                            do
                                            {
                                              v330 = v329 >> 1;
                                              v331 = (unsigned int *)(v315 + 16 * (v329 >> 1));
                                              v333 = *v331;
                                              v332 = v331 + 4;
                                              v329 += ~(v329 >> 1);
                                              if (v333 < v67)
                                                v315 = (uint64_t)v332;
                                              else
                                                v329 = v330;
                                            }
                                            while (v329);
                                          }
                                          if ((_DWORD *)v315 == v316 || *(_DWORD *)v315 != v67)
                                            v315 = (uint64_t)v316;
                                          v334 = *(_QWORD *)(v315 + 8);
                                          v335 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                          sub_20F622E88((uint64_t)&__p);
                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v336 = &__p;
                                          else
                                            v336 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v337 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                          else
                                            v337 = __p.__r_.__value_.__l.__size_;
                                          v338 = sub_20E86A980(v335, (uint64_t)v336, v337);
                                          sub_20E86A980(v338, (uint64_t)" with ID ", 9);
                                          v339 = (_QWORD *)std::ostream::operator<<();
                                          sub_20E86A980(v339, (uint64_t)" found (", 8);
                                          v340 = (_QWORD *)std::ostream::operator<<();
                                          v341 = sub_20E86A980(v340, (uint64_t)", ", 2);
                                          if (*(_BYTE *)(v334 + 20))
                                            v342 = "free";
                                          else
                                            v342 = "fixed";
                                          if (*(_BYTE *)(v334 + 20))
                                            v343 = 4;
                                          else
                                            v343 = 5;
                                          v344 = sub_20E86A980(v341, (uint64_t)v342, v343);
                                          sub_20E86A980(v344, (uint64_t)")\n", 2);
                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(__p.__r_.__value_.__l.__data_);
                                          v314 |= *(unsigned __int8 *)(v334 + 20);
                                          v345 = a1[324].i64[1];
                                          v346 = (_DWORD *)a1[325].i64[0];
                                          v347 = (_DWORD *)v345;
                                          v348 = (uint64_t)v346 - v345;
                                          if (v346 == (_DWORD *)v345)
                                          {
LABEL_437:
                                            if (v347 == v346 || *v347 != v90)
                                            {
                                              v379 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                              sub_20F622E88((uint64_t)&__p);
                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                v380 = &__p;
                                              else
                                                v380 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                v381 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                              else
                                                v381 = __p.__r_.__value_.__l.__size_;
                                              v382 = sub_20E86A980(v379, (uint64_t)v380, v381);
                                              sub_20E86A980(v382, (uint64_t)" with ID ", 9);
                                              v383 = (_QWORD *)std::ostream::operator<<();
                                              sub_20E86A980(v383, (uint64_t)" not found\n", 11);
                                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                              {
                                                operator delete(__p.__r_.__value_.__l.__data_);
                                                v288 = 0;
                                                v375 = a1[366].i64[1];
                                                v376 = (_DWORD *)a1[367].i64[0];
                                                v377 = (_DWORD *)v375;
                                                v378 = (uint64_t)v376 - v375;
                                                if (v376 == (_DWORD *)v375)
                                                  goto LABEL_479;
                                              }
                                              else
                                              {
                                                v288 = 0;
                                                v375 = a1[366].i64[1];
                                                v376 = (_DWORD *)a1[367].i64[0];
                                                v377 = (_DWORD *)v375;
                                                v378 = (uint64_t)v376 - v375;
                                                if (v376 == (_DWORD *)v375)
                                                  goto LABEL_479;
                                              }
                                            }
                                            else
                                            {
                                              if (v346 != (_DWORD *)v345)
                                              {
                                                v359 = ((uint64_t)v346 - v345) >> 4;
                                                do
                                                {
                                                  v360 = v359 >> 1;
                                                  v361 = (unsigned int *)(v345 + 16 * (v359 >> 1));
                                                  v363 = *v361;
                                                  v362 = v361 + 4;
                                                  v359 += ~(v359 >> 1);
                                                  if (v363 < v90)
                                                    v345 = (uint64_t)v362;
                                                  else
                                                    v359 = v360;
                                                }
                                                while (v359);
                                              }
                                              if ((_DWORD *)v345 == v346 || *(_DWORD *)v345 != v90)
                                                v345 = (uint64_t)v346;
                                              v364 = *(_QWORD *)(v345 + 8);
                                              v365 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                              sub_20F622E88((uint64_t)&__p);
                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                v366 = &__p;
                                              else
                                                v366 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                v367 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                              else
                                                v367 = __p.__r_.__value_.__l.__size_;
                                              v368 = sub_20E86A980(v365, (uint64_t)v366, v367);
                                              sub_20E86A980(v368, (uint64_t)" with ID ", 9);
                                              v369 = (_QWORD *)std::ostream::operator<<();
                                              sub_20E86A980(v369, (uint64_t)" found (", 8);
                                              v370 = (_QWORD *)std::ostream::operator<<();
                                              v371 = sub_20E86A980(v370, (uint64_t)", ", 2);
                                              if (*(_BYTE *)(v364 + 20))
                                                v372 = "free";
                                              else
                                                v372 = "fixed";
                                              if (*(_BYTE *)(v364 + 20))
                                                v373 = 4;
                                              else
                                                v373 = 5;
                                              v374 = sub_20E86A980(v371, (uint64_t)v372, v373);
                                              sub_20E86A980(v374, (uint64_t)")\n", 2);
                                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                operator delete(__p.__r_.__value_.__l.__data_);
                                              v314 |= *(unsigned __int8 *)(v364 + 20);
                                              v375 = a1[366].i64[1];
                                              v376 = (_DWORD *)a1[367].i64[0];
                                              v377 = (_DWORD *)v375;
                                              v378 = (uint64_t)v376 - v375;
                                              if (v376 == (_DWORD *)v375)
                                              {
LABEL_479:
                                                if (v377 == v376 || *v377 != v68)
                                                {
                                                  v409 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                                  sub_20F6230A4((uint64_t)&__p);
                                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                    v410 = &__p;
                                                  else
                                                    v410 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                    v411 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                  else
                                                    v411 = __p.__r_.__value_.__l.__size_;
                                                  v412 = sub_20E86A980(v409, (uint64_t)v410, v411);
                                                  sub_20E86A980(v412, (uint64_t)" with ID ", 9);
                                                  v413 = (_QWORD *)std::ostream::operator<<();
                                                  sub_20E86A980(v413, (uint64_t)" not found\n", 11);
                                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                  {
                                                    operator delete(__p.__r_.__value_.__l.__data_);
                                                    v288 = 0;
                                                    v405 = a1[372].i64[1];
                                                    v406 = (_DWORD *)a1[373].i64[0];
                                                    v407 = (_DWORD *)v405;
                                                    v408 = (uint64_t)v406 - v405;
                                                    if (v406 == (_DWORD *)v405)
                                                      goto LABEL_521;
                                                  }
                                                  else
                                                  {
                                                    v288 = 0;
                                                    v405 = a1[372].i64[1];
                                                    v406 = (_DWORD *)a1[373].i64[0];
                                                    v407 = (_DWORD *)v405;
                                                    v408 = (uint64_t)v406 - v405;
                                                    if (v406 == (_DWORD *)v405)
                                                      goto LABEL_521;
                                                  }
                                                }
                                                else
                                                {
                                                  if (v376 != (_DWORD *)v375)
                                                  {
                                                    v389 = ((uint64_t)v376 - v375) >> 4;
                                                    do
                                                    {
                                                      v390 = v389 >> 1;
                                                      v391 = (unsigned int *)(v375 + 16 * (v389 >> 1));
                                                      v393 = *v391;
                                                      v392 = v391 + 4;
                                                      v389 += ~(v389 >> 1);
                                                      if (v393 < v68)
                                                        v375 = (uint64_t)v392;
                                                      else
                                                        v389 = v390;
                                                    }
                                                    while (v389);
                                                  }
                                                  if ((_DWORD *)v375 == v376 || *(_DWORD *)v375 != v68)
                                                    v375 = (uint64_t)v376;
                                                  v394 = *(_QWORD *)(v375 + 8);
                                                  v395 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                                  sub_20F6230A4((uint64_t)&__p);
                                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                    v396 = &__p;
                                                  else
                                                    v396 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                    v397 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                  else
                                                    v397 = __p.__r_.__value_.__l.__size_;
                                                  v398 = sub_20E86A980(v395, (uint64_t)v396, v397);
                                                  sub_20E86A980(v398, (uint64_t)" with ID ", 9);
                                                  v399 = (_QWORD *)std::ostream::operator<<();
                                                  sub_20E86A980(v399, (uint64_t)" found (", 8);
                                                  v400 = (_QWORD *)std::ostream::operator<<();
                                                  v401 = sub_20E86A980(v400, (uint64_t)", ", 2);
                                                  if (*(_BYTE *)(v394 + 20))
                                                    v402 = "free";
                                                  else
                                                    v402 = "fixed";
                                                  if (*(_BYTE *)(v394 + 20))
                                                    v403 = 4;
                                                  else
                                                    v403 = 5;
                                                  v404 = sub_20E86A980(v401, (uint64_t)v402, v403);
                                                  sub_20E86A980(v404, (uint64_t)")\n", 2);
                                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                    operator delete(__p.__r_.__value_.__l.__data_);
                                                  v314 |= *(unsigned __int8 *)(v394 + 20);
                                                  v405 = a1[372].i64[1];
                                                  v406 = (_DWORD *)a1[373].i64[0];
                                                  v407 = (_DWORD *)v405;
                                                  v408 = (uint64_t)v406 - v405;
                                                  if (v406 == (_DWORD *)v405)
                                                  {
LABEL_521:
                                                    if (v407 == v406 || *v407 != v68)
                                                    {
                                                      v439 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                                      sub_20F6232BC((uint64_t)&__p);
                                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                        v440 = &__p;
                                                      else
                                                        v440 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                        v441 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                      else
                                                        v441 = __p.__r_.__value_.__l.__size_;
                                                      v442 = sub_20E86A980(v439, (uint64_t)v440, v441);
                                                      sub_20E86A980(v442, (uint64_t)" with ID ", 9);
                                                      v443 = (_QWORD *)std::ostream::operator<<();
                                                      sub_20E86A980(v443, (uint64_t)" not found\n", 11);
                                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                      {
                                                        operator delete(__p.__r_.__value_.__l.__data_);
                                                        v288 = 0;
                                                        v435 = a1[378].i64[1];
                                                        v436 = (_DWORD *)a1[379].i64[0];
                                                        v437 = (_DWORD *)v435;
                                                        v438 = (uint64_t)v436 - v435;
                                                        if (v436 == (_DWORD *)v435)
                                                          goto LABEL_563;
                                                      }
                                                      else
                                                      {
                                                        v288 = 0;
                                                        v435 = a1[378].i64[1];
                                                        v436 = (_DWORD *)a1[379].i64[0];
                                                        v437 = (_DWORD *)v435;
                                                        v438 = (uint64_t)v436 - v435;
                                                        if (v436 == (_DWORD *)v435)
                                                          goto LABEL_563;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if (v406 != (_DWORD *)v405)
                                                      {
                                                        v419 = ((uint64_t)v406 - v405) >> 4;
                                                        do
                                                        {
                                                          v420 = v419 >> 1;
                                                          v421 = (unsigned int *)(v405 + 16 * (v419 >> 1));
                                                          v423 = *v421;
                                                          v422 = v421 + 4;
                                                          v419 += ~(v419 >> 1);
                                                          if (v423 < v68)
                                                            v405 = (uint64_t)v422;
                                                          else
                                                            v419 = v420;
                                                        }
                                                        while (v419);
                                                      }
                                                      if ((_DWORD *)v405 == v406 || *(_DWORD *)v405 != v68)
                                                        v405 = (uint64_t)v406;
                                                      v424 = *(_QWORD *)(v405 + 8);
                                                      v425 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                                      sub_20F6232BC((uint64_t)&__p);
                                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                        v426 = &__p;
                                                      else
                                                        v426 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                        v427 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                      else
                                                        v427 = __p.__r_.__value_.__l.__size_;
                                                      v428 = sub_20E86A980(v425, (uint64_t)v426, v427);
                                                      sub_20E86A980(v428, (uint64_t)" with ID ", 9);
                                                      v429 = (_QWORD *)std::ostream::operator<<();
                                                      sub_20E86A980(v429, (uint64_t)" found (", 8);
                                                      v430 = (_QWORD *)std::ostream::operator<<();
                                                      v431 = sub_20E86A980(v430, (uint64_t)", ", 2);
                                                      if (*(_BYTE *)(v424 + 20))
                                                        v432 = "free";
                                                      else
                                                        v432 = "fixed";
                                                      if (*(_BYTE *)(v424 + 20))
                                                        v433 = 4;
                                                      else
                                                        v433 = 5;
                                                      v434 = sub_20E86A980(v431, (uint64_t)v432, v433);
                                                      sub_20E86A980(v434, (uint64_t)")\n", 2);
                                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                        operator delete(__p.__r_.__value_.__l.__data_);
                                                      v314 |= *(unsigned __int8 *)(v424 + 20);
                                                      v435 = a1[378].i64[1];
                                                      v436 = (_DWORD *)a1[379].i64[0];
                                                      v437 = (_DWORD *)v435;
                                                      v438 = (uint64_t)v436 - v435;
                                                      if (v436 == (_DWORD *)v435)
                                                      {
LABEL_563:
                                                        if (v437 == v436 || *v437 != v68)
                                                        {
                                                          v469 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                                          sub_20F6234D8((uint64_t)&__p);
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v470 = &__p;
                                                          else
                                                            v470 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v471 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                          else
                                                            v471 = __p.__r_.__value_.__l.__size_;
                                                          v472 = sub_20E86A980(v469, (uint64_t)v470, v471);
                                                          sub_20E86A980(v472, (uint64_t)" with ID ", 9);
                                                          v473 = (_QWORD *)std::ostream::operator<<();
                                                          sub_20E86A980(v473, (uint64_t)" not found\n", 11);
                                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          {
                                                            operator delete(__p.__r_.__value_.__l.__data_);
                                                            v288 = 0;
                                                            v465 = a1[384].i64[1];
                                                            v466 = (_DWORD *)a1[385].i64[0];
                                                            v467 = (_DWORD *)v465;
                                                            v468 = (uint64_t)v466 - v465;
                                                            if (v466 == (_DWORD *)v465)
                                                              goto LABEL_605;
                                                          }
                                                          else
                                                          {
                                                            v288 = 0;
                                                            v465 = a1[384].i64[1];
                                                            v466 = (_DWORD *)a1[385].i64[0];
                                                            v467 = (_DWORD *)v465;
                                                            v468 = (uint64_t)v466 - v465;
                                                            if (v466 == (_DWORD *)v465)
                                                              goto LABEL_605;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if (v436 != (_DWORD *)v435)
                                                          {
                                                            v449 = ((uint64_t)v436 - v435) >> 4;
                                                            do
                                                            {
                                                              v450 = v449 >> 1;
                                                              v451 = (unsigned int *)(v435 + 16 * (v449 >> 1));
                                                              v453 = *v451;
                                                              v452 = v451 + 4;
                                                              v449 += ~(v449 >> 1);
                                                              if (v453 < v68)
                                                                v435 = (uint64_t)v452;
                                                              else
                                                                v449 = v450;
                                                            }
                                                            while (v449);
                                                          }
                                                          if ((_DWORD *)v435 == v436 || *(_DWORD *)v435 != v68)
                                                            v435 = (uint64_t)v436;
                                                          v454 = *(_QWORD *)(v435 + 8);
                                                          v455 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                                          sub_20F6234D8((uint64_t)&__p);
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v456 = &__p;
                                                          else
                                                            v456 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v457 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                          else
                                                            v457 = __p.__r_.__value_.__l.__size_;
                                                          v458 = sub_20E86A980(v455, (uint64_t)v456, v457);
                                                          sub_20E86A980(v458, (uint64_t)" with ID ", 9);
                                                          v459 = (_QWORD *)std::ostream::operator<<();
                                                          sub_20E86A980(v459, (uint64_t)" found (", 8);
                                                          v460 = (_QWORD *)std::ostream::operator<<();
                                                          v461 = sub_20E86A980(v460, (uint64_t)", ", 2);
                                                          if (*(_BYTE *)(v454 + 20))
                                                            v462 = "free";
                                                          else
                                                            v462 = "fixed";
                                                          if (*(_BYTE *)(v454 + 20))
                                                            v463 = 4;
                                                          else
                                                            v463 = 5;
                                                          v464 = sub_20E86A980(v461, (uint64_t)v462, v463);
                                                          sub_20E86A980(v464, (uint64_t)")\n", 2);
                                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                            operator delete(__p.__r_.__value_.__l.__data_);
                                                          v314 |= *(unsigned __int8 *)(v454 + 20);
                                                          v465 = a1[384].i64[1];
                                                          v466 = (_DWORD *)a1[385].i64[0];
                                                          v467 = (_DWORD *)v465;
                                                          v468 = (uint64_t)v466 - v465;
                                                          if (v466 == (_DWORD *)v465)
                                                          {
LABEL_605:
                                                            if (v467 == v466 || *v467 != v17)
                                                            {
                                                              v498 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                                              sub_20F622838((uint64_t)&__p);
                                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                v499 = &__p;
                                                              else
                                                                v499 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                v500 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                              else
                                                                v500 = __p.__r_.__value_.__l.__size_;
                                                              v501 = sub_20E86A980(v498, (uint64_t)v499, v500);
                                                              sub_20E86A980(v501, (uint64_t)" with ID ", 9);
                                                              v502 = (_QWORD *)std::ostream::operator<<();
                                                              sub_20E86A980(v502, (uint64_t)" not found\n", 11);
                                                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                              {
                                                                operator delete(__p.__r_.__value_.__l.__data_);
                                                                v288 = 0;
                                                                v495 = (char *)a1[419].i64[0];
                                                                v496 = (char *)a1[419].i64[1];
                                                                v497 = v496 - v495;
                                                                if (v496 == v495)
                                                                  goto LABEL_658;
                                                              }
                                                              else
                                                              {
                                                                v288 = 0;
                                                                v495 = (char *)a1[419].i64[0];
                                                                v496 = (char *)a1[419].i64[1];
                                                                v497 = v496 - v495;
                                                                if (v496 == v495)
                                                                  goto LABEL_658;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if (v466 != (_DWORD *)v465)
                                                              {
                                                                v479 = ((uint64_t)v466 - v465) >> 4;
                                                                do
                                                                {
                                                                  v480 = v479 >> 1;
                                                                  v481 = (unsigned __int32 *)(v465 + 16 * (v479 >> 1));
                                                                  v483 = *v481;
                                                                  v482 = v481 + 4;
                                                                  v479 += ~(v479 >> 1);
                                                                  if (v483 < v17)
                                                                    v465 = (uint64_t)v482;
                                                                  else
                                                                    v479 = v480;
                                                                }
                                                                while (v479);
                                                              }
                                                              if ((_DWORD *)v465 == v466 || *(_DWORD *)v465 != v17)
                                                                v465 = (uint64_t)v466;
                                                              v484 = *(_QWORD *)(v465 + 8);
                                                              v485 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                                              sub_20F622838((uint64_t)&__p);
                                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                v486 = &__p;
                                                              else
                                                                v486 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                v487 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                              else
                                                                v487 = __p.__r_.__value_.__l.__size_;
                                                              v488 = sub_20E86A980(v485, (uint64_t)v486, v487);
                                                              sub_20E86A980(v488, (uint64_t)" with ID ", 9);
                                                              v489 = (_QWORD *)std::ostream::operator<<();
                                                              sub_20E86A980(v489, (uint64_t)" found (", 8);
                                                              v490 = (_QWORD *)std::ostream::operator<<();
                                                              v491 = sub_20E86A980(v490, (uint64_t)", ", 2);
                                                              if (*(_BYTE *)(v484 + 20))
                                                                v492 = "free";
                                                              else
                                                                v492 = "fixed";
                                                              if (*(_BYTE *)(v484 + 20))
                                                                v493 = 4;
                                                              else
                                                                v493 = 5;
                                                              v494 = sub_20E86A980(v491, (uint64_t)v492, v493);
                                                              sub_20E86A980(v494, (uint64_t)")\n", 2);
                                                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                                operator delete(__p.__r_.__value_.__l.__data_);
                                                              v314 |= *(unsigned __int8 *)(v484 + 20);
                                                              v495 = (char *)a1[419].i64[0];
                                                              v496 = (char *)a1[419].i64[1];
                                                              v497 = v496 - v495;
                                                              if (v496 == v495)
                                                              {
LABEL_658:
                                                                if (v314)
                                                                {
                                                                  v513 = v288 != 0;
                                                                  v514 = v1139[16];
                                                                  if ((v1139[16] & 0x10) == 0)
                                                                    goto LABEL_660;
LABEL_670:
                                                                  v522 = *(_QWORD *)&v1139[8];
                                                                  p_size = (std::string::size_type *)&v1136 + 1;
                                                                  if (*(_QWORD *)&v1139[8] < (unint64_t)v1137)
                                                                  {
                                                                    *(_QWORD *)&v1139[8] = v1137;
                                                                    v522 = v1137;
                                                                    p_size = (std::string::size_type *)&v1136 + 1;
                                                                  }
LABEL_673:
                                                                  v524 = (const void *)*p_size;
                                                                  v515 = v522 - *p_size;
                                                                  if (v515 > 0x7FFFFFFFFFFFFFF7)
                                                                    sub_20E860B7C();
                                                                  if (v515 >= 0x17)
                                                                  {
                                                                    v525 = (v515 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                    if ((v515 | 7) != 0x17)
                                                                      v525 = v515 | 7;
                                                                    v526 = v525 + 1;
                                                                    v516 = (std::string *)operator new(v525 + 1);
                                                                    __p.__r_.__value_.__r.__words[2] = v526 | 0x8000000000000000;
                                                                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v516;
                                                                    __p.__r_.__value_.__l.__size_ = v515;
                                                                  }
                                                                  else
                                                                  {
                                                                    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v522 - *(_BYTE *)p_size;
                                                                    v516 = &__p;
                                                                    if (!v515)
                                                                      goto LABEL_681;
                                                                  }
                                                                  memmove(v516, v524, v515);
                                                                }
                                                                else
                                                                {
                                                                  v517 = sub_20E86A980(&v1134, (uint64_t)"error: factor ", 14);
                                                                  sub_20FC2ED2C((uint64_t)&__p);
                                                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                    v518 = &__p;
                                                                  else
                                                                    v518 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                    v519 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                                  else
                                                                    v519 = __p.__r_.__value_.__l.__size_;
                                                                  v520 = sub_20E86A980(v517, (uint64_t)v518, v519);
                                                                  sub_20E86A980(v520, (uint64_t)" with ID ", 9);
                                                                  v521 = (_QWORD *)std::ostream::operator<<();
                                                                  sub_20E86A980(v521, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
                                                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                                  {
                                                                    operator delete(__p.__r_.__value_.__l.__data_);
                                                                    v513 = 0;
                                                                    v514 = v1139[16];
                                                                    if ((v1139[16] & 0x10) != 0)
                                                                      goto LABEL_670;
                                                                  }
                                                                  else
                                                                  {
                                                                    v513 = 0;
                                                                    v514 = v1139[16];
                                                                    if ((v1139[16] & 0x10) != 0)
                                                                      goto LABEL_670;
                                                                  }
LABEL_660:
                                                                  if ((v514 & 8) != 0)
                                                                  {
                                                                    v522 = v1136;
                                                                    p_size = &v1135.__r_.__value_.__l.__size_;
                                                                    goto LABEL_673;
                                                                  }
                                                                  v515 = 0;
                                                                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
                                                                  v516 = &__p;
                                                                }
LABEL_681:
                                                                v516->__r_.__value_.__s.__data_[v515] = 0;
                                                                v1114 = __p;
                                                                v1115.__r_.__value_.__s.__data_[0] = v513;
                                                                v1133.i64[0] = v1090;
                                                                *(uint64_t *)((char *)v1133.i64 + *(_QWORD *)(v1090 - 24)) = v1089;
                                                                *(_QWORD *)&v1134 = v1088;
                                                                *((_QWORD *)&v1134 + 1) = v1083;
                                                                if ((v1139[7] & 0x80000000) != 0)
                                                                  operator delete((void *)v1138);
                                                                std::streambuf::~streambuf();
                                                                std::iostream::~basic_iostream();
                                                                MEMORY[0x212BC6290](&v1139[24]);
                                                                v527 = std::string::insert(&v1114, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
                                                                v528 = *(_OWORD *)&v527->__r_.__value_.__l.__data_;
                                                                v1107.__r_.__value_.__r.__words[2] = v527->__r_.__value_.__r.__words[2];
                                                                *(_OWORD *)&v1107.__r_.__value_.__l.__data_ = v528;
                                                                v527->__r_.__value_.__l.__size_ = 0;
                                                                v527->__r_.__value_.__r.__words[2] = 0;
                                                                v527->__r_.__value_.__r.__words[0] = 0;
                                                                v529 = std::string::append(&v1107, "').", 3uLL);
                                                                v530 = *(_OWORD *)&v529->__r_.__value_.__l.__data_;
                                                                v1109 = v529->__r_.__value_.__r.__words[2];
                                                                *(_OWORD *)v1108 = v530;
                                                                v529->__r_.__value_.__l.__size_ = 0;
                                                                v529->__r_.__value_.__r.__words[2] = 0;
                                                                v529->__r_.__value_.__r.__words[0] = 0;
                                                                if (v1109 >= 0)
                                                                  v531 = v1108;
                                                                else
                                                                  v531 = (void **)v1108[0];
                                                                if (v1109 >= 0)
                                                                  v532 = HIBYTE(v1109);
                                                                else
                                                                  v532 = (uint64_t)v1108[1];
                                                                v533 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 366, (uint64_t)"ret.second", 10, (uint64_t)v531, v532, (void (*)(void **))sub_21023DDB0);
                                                                goto LABEL_1306;
                                                              }
                                                            }
                                                            v503 = 0xD37A6F4DE9BD37A7 * (v497 >> 3);
                                                            do
                                                            {
                                                              v504 = v503 >> 1;
                                                              v505 = (unint64_t *)&v495[184 * (v503 >> 1)];
                                                              v507 = *v505;
                                                              v506 = (char *)(v505 + 23);
                                                              v503 += ~(v503 >> 1);
                                                              if (v507 < v1098)
                                                                v495 = v506;
                                                              else
                                                                v503 = v504;
                                                            }
                                                            while (v503);
                                                            if (v496 != v495 && *(_QWORD *)v495 == v1098)
                                                            {
                                                              v508 = sub_20E86A980(&v1134, (uint64_t)"error: factor ", 14);
                                                              sub_20FC2ED2C((uint64_t)&__p);
                                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                v509 = &__p;
                                                              else
                                                                v509 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                v510 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                              else
                                                                v510 = __p.__r_.__value_.__l.__size_;
                                                              v511 = sub_20E86A980(v508, (uint64_t)v509, v510);
                                                              sub_20E86A980(v511, (uint64_t)" with the same ID ", 18);
                                                              v512 = (_QWORD *)std::ostream::operator<<();
                                                              sub_20E86A980(v512, (uint64_t)" already exists.\n", 17);
                                                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                                operator delete(__p.__r_.__value_.__l.__data_);
                                                              v288 = 0;
                                                            }
                                                            goto LABEL_658;
                                                          }
                                                        }
                                                        v474 = v468 >> 4;
                                                        v467 = (_DWORD *)v465;
                                                        do
                                                        {
                                                          v475 = v474 >> 1;
                                                          v476 = &v467[4 * (v474 >> 1)];
                                                          v478 = *v476;
                                                          v477 = v476 + 4;
                                                          v474 += ~(v474 >> 1);
                                                          if (v478 < v17)
                                                            v467 = v477;
                                                          else
                                                            v474 = v475;
                                                        }
                                                        while (v474);
                                                        goto LABEL_605;
                                                      }
                                                    }
                                                    v444 = v438 >> 4;
                                                    v437 = (_DWORD *)v435;
                                                    do
                                                    {
                                                      v445 = v444 >> 1;
                                                      v446 = &v437[4 * (v444 >> 1)];
                                                      v448 = *v446;
                                                      v447 = v446 + 4;
                                                      v444 += ~(v444 >> 1);
                                                      if (v448 < v68)
                                                        v437 = v447;
                                                      else
                                                        v444 = v445;
                                                    }
                                                    while (v444);
                                                    goto LABEL_563;
                                                  }
                                                }
                                                v414 = v408 >> 4;
                                                v407 = (_DWORD *)v405;
                                                do
                                                {
                                                  v415 = v414 >> 1;
                                                  v416 = &v407[4 * (v414 >> 1)];
                                                  v418 = *v416;
                                                  v417 = v416 + 4;
                                                  v414 += ~(v414 >> 1);
                                                  if (v418 < v68)
                                                    v407 = v417;
                                                  else
                                                    v414 = v415;
                                                }
                                                while (v414);
                                                goto LABEL_521;
                                              }
                                            }
                                            v384 = v378 >> 4;
                                            v377 = (_DWORD *)v375;
                                            do
                                            {
                                              v385 = v384 >> 1;
                                              v386 = &v377[4 * (v384 >> 1)];
                                              v388 = *v386;
                                              v387 = v386 + 4;
                                              v384 += ~(v384 >> 1);
                                              if (v388 < v68)
                                                v377 = v387;
                                              else
                                                v384 = v385;
                                            }
                                            while (v384);
                                            goto LABEL_479;
                                          }
                                        }
                                        v354 = v348 >> 4;
                                        v347 = (_DWORD *)v345;
                                        do
                                        {
                                          v355 = v354 >> 1;
                                          v356 = &v347[4 * (v354 >> 1)];
                                          v358 = *v356;
                                          v357 = v356 + 4;
                                          v354 += ~(v354 >> 1);
                                          if (v358 < v90)
                                            v347 = v357;
                                          else
                                            v354 = v355;
                                        }
                                        while (v354);
                                        goto LABEL_437;
                                      }
                                    }
                                    v293 = v292 >> 4;
                                    v291 = (_DWORD *)v289;
                                    do
                                    {
                                      v294 = v293 >> 1;
                                      v295 = &v291[4 * (v293 >> 1)];
                                      v297 = *v295;
                                      v296 = v295 + 4;
                                      v293 += ~(v293 >> 1);
                                      if (v297 < v68)
                                        v291 = v296;
                                      else
                                        v293 = v294;
                                    }
                                    while (v293);
                                    goto LABEL_352;
                                  }
                                  goto LABEL_1314;
                                }
                              }
                              else
                              {
                                --*(_DWORD *)(v117 + 8);
                                --*(_DWORD *)(v126 + 8);
                                v82 = 0uLL;
                                v1116 = 0u;
                                --*(_DWORD *)(v132 + 8);
                                --*(_DWORD *)(v140 + 8);
                                v1117 = 0u;
                                --*(_DWORD *)(v148 + 8);
                                --*(_DWORD *)(v156 + 8);
                                v1118 = 0u;
                                --*(_DWORD *)(v164 + 8);
                                v268 = 1;
                                v269 = v1113;
                                if (!v1113)
                                  goto LABEL_320;
                              }
LABEL_316:
                              v270 = (unint64_t *)&v269->__shared_owners_;
                              do
                                v271 = __ldaxr(v270);
                              while (__stlxr(v271 - 1, v270));
                              if (!v271)
                              {
                                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                                std::__shared_weak_count::__release_weak(v269);
                              }
                              goto LABEL_320;
                            }
                          }
                        }
                      }
                    }
                  }
                  if (v117)
                    --*(_DWORD *)(v117 + 8);
                  if (v126)
                    --*(_DWORD *)(v126 + 8);
                  if (v132)
                    --*(_DWORD *)(v132 + 8);
                  if (v140)
                    --*(_DWORD *)(v140 + 8);
                  if (v148)
                    --*(_DWORD *)(v148 + 8);
                  if (v156)
                    --*(_DWORD *)(v156 + 8);
                }
              }
              v268 = 1;
              v269 = v1113;
              if (!v1113)
                goto LABEL_320;
              goto LABEL_316;
            }
            v1111 = 0;
            v1110 = 0;
            v1113 = 0;
            v1112 = 0;
            v101 = (char *)a1[414].i64[1];
            v102 = (char *)a1[415].i64[0];
            if (v101 == v102)
            {
              v103 = (char *)a1[414].i64[1];
            }
            else
            {
              v103 = (char *)a1[415].i64[0];
              if (*((_QWORD *)v102 - 27) >= (unint64_t)v1098)
              {
                v104 = 0x84BDA12F684BDA13 * ((v102 - v101) >> 3);
                v105 = (char *)a1[414].i64[1];
                do
                {
                  v106 = v104 >> 1;
                  v107 = (unint64_t *)&v105[216 * (v104 >> 1)];
                  v109 = *v107;
                  v108 = (char *)(v107 + 27);
                  v104 += ~(v104 >> 1);
                  if (v109 < v1098)
                    v105 = v108;
                  else
                    v104 = v106;
                }
                while (v104);
                v103 = (char *)a1[415].i64[0];
                if (v105 != v102)
                {
                  v103 = v105;
                  if (*(_QWORD *)v105 == v1098)
                    goto LABEL_751;
                }
              }
            }
            *(__n128 *)&v1114.__r_.__value_.__r.__words[1] = v91;
            v1114.__r_.__value_.__r.__words[0] = v1098;
            v1115.__r_.__value_.__r.__words[0] = v1091;
            v1115.__r_.__value_.__l.__size_ = v83;
            v1115.__r_.__value_.__r.__words[2] = v82.n128_u64[0];
            v82 = 0uLL;
            v1116 = 0u;
            v1117 = 0u;
            v1118 = 0u;
            memset(v1119, 0, sizeof(v1119));
            v1124 = 0;
            v1125 = 0;
            v1122 = 0xBFF0000000000000;
            v1123 = 0;
            v1126 = 0;
            v175 = a1[336].i64[1];
            v176 = a1[337].i64[0];
            v177 = v176 - v175;
            if (v176 == v175)
              goto LABEL_745;
            v178 = v177 >> 4;
            v179 = a1[336].i64[1];
            v180 = v177 >> 4;
            do
            {
              v181 = v180 >> 1;
              v182 = (unsigned int *)(v179 + 16 * (v180 >> 1));
              v184 = *v182;
              v183 = v182 + 4;
              v180 += ~(v180 >> 1);
              if (v184 < v68)
                v179 = (uint64_t)v183;
              else
                v180 = v181;
            }
            while (v180);
            if (v179 == v176 || *(_DWORD *)v179 != v68)
              goto LABEL_745;
            v185 = *(_QWORD *)(v179 + 8);
            *(_QWORD *)&v1116 = v185;
            ++*(_DWORD *)(*(_QWORD *)(v179 + 8) + 8);
            do
            {
              v186 = v178 >> 1;
              v187 = (unsigned int *)(v175 + 16 * (v178 >> 1));
              v189 = *v187;
              v188 = v187 + 4;
              v178 += ~(v178 >> 1);
              if (v189 < v89)
                v175 = (uint64_t)v188;
              else
                v178 = v186;
            }
            while (v178);
            if (v175 == v176 || *(_DWORD *)v175 != v89)
            {
              v250 = 0;
              v244 = 0;
              v235 = 0;
              v229 = 0;
              v220 = 0;
              v214 = 0;
              v205 = 0;
              v199 = 0;
              v190 = 0;
              goto LABEL_725;
            }
            v190 = *(_QWORD *)(v175 + 8);
            *((_QWORD *)&v1116 + 1) = v190;
            ++*(_DWORD *)(*(_QWORD *)(v175 + 8) + 8);
            v191 = a1[324].i64[1];
            v192 = a1[325].i64[0];
            v193 = v191;
            if (v192 != v191)
            {
              v194 = (v192 - v191) >> 4;
              v193 = a1[324].i64[1];
              do
              {
                v195 = v194 >> 1;
                v196 = (unsigned int *)(v193 + 16 * (v194 >> 1));
                v198 = *v196;
                v197 = v196 + 4;
                v194 += ~(v194 >> 1);
                if (v198 < v67)
                  v193 = (uint64_t)v197;
                else
                  v194 = v195;
              }
              while (v194);
            }
            if (v193 == v192 || *(_DWORD *)v193 != v67)
            {
              v250 = 0;
              v244 = 0;
              v235 = 0;
              v229 = 0;
              v220 = 0;
              v214 = 0;
              v205 = 0;
              v199 = 0;
              goto LABEL_725;
            }
            v199 = *(_QWORD *)(v193 + 8);
            *(_QWORD *)&v1117 = v199;
            ++*(_DWORD *)(*(_QWORD *)(v193 + 8) + 8);
            if (v192 != v191)
            {
              v200 = (v192 - v191) >> 4;
              do
              {
                v201 = v200 >> 1;
                v202 = (unsigned int *)(v191 + 16 * (v200 >> 1));
                v204 = *v202;
                v203 = v202 + 4;
                v200 += ~(v200 >> 1);
                if (v204 < v90)
                  v191 = (uint64_t)v203;
                else
                  v200 = v201;
              }
              while (v200);
            }
            if (v191 == v192 || *(_DWORD *)v191 != v90)
            {
              v250 = 0;
              v244 = 0;
              v235 = 0;
              v229 = 0;
              v220 = 0;
              v214 = 0;
              v205 = 0;
              goto LABEL_725;
            }
            v205 = *(_QWORD *)(v191 + 8);
            *((_QWORD *)&v1117 + 1) = v205;
            ++*(_DWORD *)(*(_QWORD *)(v191 + 8) + 8);
            v206 = a1[366].i64[1];
            v207 = a1[367].i64[0];
            v208 = v206;
            if (v207 != v206)
            {
              v209 = (v207 - v206) >> 4;
              v208 = a1[366].i64[1];
              do
              {
                v210 = v209 >> 1;
                v211 = (unsigned int *)(v208 + 16 * (v209 >> 1));
                v213 = *v211;
                v212 = v211 + 4;
                v209 += ~(v209 >> 1);
                if (v213 < v68)
                  v208 = (uint64_t)v212;
                else
                  v209 = v210;
              }
              while (v209);
            }
            if (v208 == v207 || *(_DWORD *)v208 != v68)
            {
              v250 = 0;
              v244 = 0;
              v235 = 0;
              v229 = 0;
              v220 = 0;
              v214 = 0;
              goto LABEL_725;
            }
            v214 = *(_QWORD *)(v208 + 8);
            *(_QWORD *)&v1118 = v214;
            ++*(_DWORD *)(*(_QWORD *)(v208 + 8) + 8);
            if (v207 != v206)
            {
              v215 = (v207 - v206) >> 4;
              do
              {
                v216 = v215 >> 1;
                v217 = (unsigned int *)(v206 + 16 * (v215 >> 1));
                v219 = *v217;
                v218 = v217 + 4;
                v215 += ~(v215 >> 1);
                if (v219 < v89)
                  v206 = (uint64_t)v218;
                else
                  v215 = v216;
              }
              while (v215);
            }
            if (v206 == v207 || *(_DWORD *)v206 != v89)
            {
              v250 = 0;
              v244 = 0;
              v235 = 0;
              v229 = 0;
              v220 = 0;
              goto LABEL_725;
            }
            v220 = *(_QWORD *)(v206 + 8);
            *((_QWORD *)&v1118 + 1) = v220;
            ++*(_DWORD *)(*(_QWORD *)(v206 + 8) + 8);
            v221 = a1[372].i64[1];
            v222 = a1[373].i64[0];
            v223 = v221;
            if (v222 != v221)
            {
              v224 = (v222 - v221) >> 4;
              v223 = a1[372].i64[1];
              do
              {
                v225 = v224 >> 1;
                v226 = (unsigned int *)(v223 + 16 * (v224 >> 1));
                v228 = *v226;
                v227 = v226 + 4;
                v224 += ~(v224 >> 1);
                if (v228 < v68)
                  v223 = (uint64_t)v227;
                else
                  v224 = v225;
              }
              while (v224);
            }
            if (v223 == v222 || *(_DWORD *)v223 != v68)
            {
              v250 = 0;
              v244 = 0;
              v235 = 0;
              v229 = 0;
              goto LABEL_725;
            }
            v229 = *(_QWORD *)(v223 + 8);
            *(_QWORD *)v1119 = v229;
            ++*(_DWORD *)(*(_QWORD *)(v223 + 8) + 8);
            if (v222 != v221)
            {
              v230 = (v222 - v221) >> 4;
              do
              {
                v231 = v230 >> 1;
                v232 = (unsigned int *)(v221 + 16 * (v230 >> 1));
                v234 = *v232;
                v233 = v232 + 4;
                v230 += ~(v230 >> 1);
                if (v234 < v89)
                  v221 = (uint64_t)v233;
                else
                  v230 = v231;
              }
              while (v230);
            }
            if (v221 == v222 || *(_DWORD *)v221 != v89)
            {
              v250 = 0;
              v244 = 0;
              v235 = 0;
              goto LABEL_725;
            }
            v235 = *(_QWORD *)(v221 + 8);
            *(_QWORD *)&v1119[8] = v235;
            ++*(_DWORD *)(*(_QWORD *)(v221 + 8) + 8);
            v236 = a1[378].i64[1];
            v237 = a1[379].i64[0];
            v238 = v236;
            if (v237 != v236)
            {
              v239 = (v237 - v236) >> 4;
              v238 = a1[378].i64[1];
              do
              {
                v240 = v239 >> 1;
                v241 = (unsigned int *)(v238 + 16 * (v239 >> 1));
                v243 = *v241;
                v242 = v241 + 4;
                v239 += ~(v239 >> 1);
                if (v243 < v68)
                  v238 = (uint64_t)v242;
                else
                  v239 = v240;
              }
              while (v239);
            }
            if (v238 == v237 || *(_DWORD *)v238 != v68)
            {
              v250 = 0;
              v244 = 0;
              goto LABEL_725;
            }
            v1095 = v103;
            v244 = *(_QWORD *)(v238 + 8);
            *(_QWORD *)&v1119[16] = v244;
            ++*(_DWORD *)(*(_QWORD *)(v238 + 8) + 8);
            if (v237 != v236)
            {
              v245 = (v237 - v236) >> 4;
              do
              {
                v246 = v245 >> 1;
                v247 = (unsigned int *)(v236 + 16 * (v245 >> 1));
                v249 = *v247;
                v248 = v247 + 4;
                v245 += ~(v245 >> 1);
                if (v249 < v89)
                  v236 = (uint64_t)v248;
                else
                  v245 = v246;
              }
              while (v245);
            }
            if (v236 == v237 || *(_DWORD *)v236 != v89)
            {
              v250 = 0;
LABEL_725:
              if (v185)
                --*(_DWORD *)(v185 + 8);
              if (v190)
                --*(_DWORD *)(v190 + 8);
              if (v199)
                --*(_DWORD *)(v199 + 8);
              if (v205)
                --*(_DWORD *)(v205 + 8);
              if (v214)
                --*(_DWORD *)(v214 + 8);
              if (v220)
                --*(_DWORD *)(v220 + 8);
              if (v229)
                --*(_DWORD *)(v229 + 8);
              if (v235)
                --*(_DWORD *)(v235 + 8);
              if (v244)
                --*(_DWORD *)(v244 + 8);
              if (v250)
                --*(_DWORD *)(v250 + 8);
LABEL_745:
              v560 = 1;
              v561 = v1113;
              if (!v1113)
                goto LABEL_750;
LABEL_746:
              v562 = (unint64_t *)&v561->__shared_owners_;
              do
                v563 = __ldaxr(v562);
              while (__stlxr(v563 - 1, v562));
              if (!v563)
              {
                ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
                std::__shared_weak_count::__release_weak(v561);
              }
              goto LABEL_750;
            }
            v250 = *(_QWORD *)(v236 + 8);
            *(_QWORD *)&v1119[24] = v250;
            ++*(_DWORD *)(*(_QWORD *)(v236 + 8) + 8);
            v251 = a1[384].i64[1];
            v252 = a1[385].i64[0];
            if (v252 != v251)
            {
              v253 = (v252 - v251) >> 4;
              do
              {
                v254 = v253 >> 1;
                v255 = (unsigned __int32 *)(v251 + 16 * (v253 >> 1));
                v257 = *v255;
                v256 = v255 + 4;
                v253 += ~(v253 >> 1);
                if (v257 < v17)
                  v251 = (uint64_t)v256;
                else
                  v253 = v254;
              }
              while (v253);
            }
            if (v251 == v252 || *(_DWORD *)v251 != v17)
              goto LABEL_725;
            v258 = *(_QWORD *)(v251 + 8);
            *(_QWORD *)&v1119[32] = v258;
            ++*(_DWORD *)(*(_QWORD *)(v251 + 8) + 8);
            if (!*(_BYTE *)(v185 + 20)
              && !*(_BYTE *)(v190 + 20)
              && !*(_BYTE *)(v199 + 20)
              && !*(_BYTE *)(v205 + 20)
              && !*(_BYTE *)(v214 + 20)
              && !*(_BYTE *)(v220 + 20)
              && !*(_BYTE *)(v229 + 20)
              && !*(_BYTE *)(v235 + 20)
              && !*(_BYTE *)(v244 + 20)
              && !*(_BYTE *)(v250 + 20)
              && !*(_BYTE *)(v258 + 20))
            {
              --*(_DWORD *)(v185 + 8);
              --*(_DWORD *)(v190 + 8);
              v82 = 0uLL;
              v1116 = 0u;
              --*(_DWORD *)(v199 + 8);
              --*(_DWORD *)(v205 + 8);
              v1117 = 0u;
              --*(_DWORD *)(v214 + 8);
              --*(_DWORD *)(v220 + 8);
              v1118 = 0u;
              --*(_DWORD *)(v229 + 8);
              --*(_DWORD *)(v235 + 8);
              *(_OWORD *)v1119 = 0u;
              --*(_DWORD *)(v244 + 8);
              --*(_DWORD *)(v250 + 8);
              *(_OWORD *)&v1119[16] = 0u;
              --*(_DWORD *)(v258 + 8);
              v560 = 1;
              v561 = v1113;
              if (!v1113)
                goto LABEL_750;
              goto LABEL_746;
            }
            v1133.i64[0] = v1098;
            v1133.i64[1] = v1098;
            v1134 = *(_OWORD *)&v1114.__r_.__value_.__r.__words[1];
            v1135 = v1115;
            v1138 = v1118;
            *(_OWORD *)v1139 = *(_OWORD *)v1119;
            *(_OWORD *)&v1139[16] = *(_OWORD *)&v1119[16];
            *(_QWORD *)&v1139[32] = *(_QWORD *)&v1119[32];
            v1136 = v1116;
            v1137 = v1117;
            v1140 = v1120;
            v1141 = v1121;
            v1142 = v1122;
            v1143 = v1123;
            v1144 = 0uLL;
            v1124 = 0;
            v1125 = 0;
            v1145 = 0;
            if (v102 == v103 || *(_QWORD *)v103 != v1098)
              break;
LABEL_1418:
            v1078->i8[2] = 0;
            v1078->i8[0] = 0;
            v91 = (__n128)xmmword_210378060;
            v82 = (__n128)vaddq_s64(a1[424], (int64x2_t)xmmword_210378060);
            a1[424] = (int64x2_t)v82;
            v1052 = v1125;
            if (v1125)
            {
              v1053 = (unint64_t *)&v1125->__shared_owners_;
              do
                v1054 = __ldaxr(v1053);
              while (__stlxr(v1054 - 1, v1053));
              if (!v1054)
              {
                ((void (*)(std::__shared_weak_count *))v1052->__on_zero_shared)(v1052);
                std::__shared_weak_count::__release_weak(v1052);
              }
            }
            v560 = 0;
            v561 = v1113;
            if (v1113)
              goto LABEL_746;
LABEL_750:
            if ((v560 & 1) == 0)
            {
              v564 = 0;
              v1087[4] = 0;
              *(_DWORD *)v1087 = 0;
              v565 = v1111;
              if (!v1111)
                goto LABEL_757;
              goto LABEL_754;
            }
LABEL_751:
            v564 = 1;
            v565 = v1111;
            if (!v1111)
              goto LABEL_757;
LABEL_754:
            v566 = (unint64_t *)&v565->__shared_owners_;
            do
              v567 = __ldaxr(v566);
            while (__stlxr(v567 - 1, v566));
            if (v567)
            {
LABEL_757:
              if (v564)
                goto LABEL_758;
              goto LABEL_1314;
            }
            ((void (*)(std::__shared_weak_count *, __n128, __n128))v565->__on_zero_shared)(v565, v82, v91);
            std::__shared_weak_count::__release_weak(v565);
            if (v564)
            {
LABEL_758:
              v568 = (char *)a1[384].i64[1];
              v569 = (char *)a1[385].i64[0];
              if (v569 != v568)
              {
                v570 = (v569 - v568) >> 4;
                do
                {
                  v571 = v570 >> 1;
                  v572 = &v568[16 * (v570 >> 1)];
                  v574 = *(_DWORD *)v572;
                  v573 = v572 + 16;
                  v570 += ~(v570 >> 1);
                  if (v574 < v17)
                    v568 = v573;
                  else
                    v570 = v571;
                }
                while (v570);
              }
              if ((v568 == v569 || *(_DWORD *)v568 != v17)
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 268, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1428;
              }
              v575 = (_QWORD *)a1[414].i64[1];
              v576 = (_QWORD *)a1[415].i64[0];
              if (v576 != v575)
              {
                v577 = 0x84BDA12F684BDA13 * (v576 - v575);
                do
                {
                  v578 = v577 >> 1;
                  v579 = &v575[27 * (v577 >> 1)];
                  v581 = *v579;
                  v580 = v579 + 27;
                  v577 += ~(v577 >> 1);
                  if (v581 < v1098)
                    v575 = v580;
                  else
                    v577 = v578;
                }
                while (v577);
                if (v576 != v575
                  && *v575 == v1098
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 273, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1428;
                }
              }
              sub_20E863438((uint64_t)&v1133);
              v582 = (char *)a1[384].i64[1];
              v583 = (char *)a1[385].i64[0];
              if (v583 != v582)
              {
                v584 = (v583 - v582) >> 4;
                do
                {
                  v585 = v584 >> 1;
                  v586 = &v582[16 * (v584 >> 1)];
                  v588 = *(_DWORD *)v586;
                  v587 = v586 + 16;
                  v584 += ~(v584 >> 1);
                  if (v588 < v17)
                    v582 = v587;
                  else
                    v584 = v585;
                }
                while (v584);
              }
              if (v582 == v583 || *(_DWORD *)v582 != v17)
              {
                v594 = 1;
                v595 = a1[336].i64[1];
                v596 = (_DWORD *)a1[337].i64[0];
                v597 = (_DWORD *)v595;
                v598 = (uint64_t)v596 - v595;
                if (v596 == (_DWORD *)v595)
                  goto LABEL_800;
              }
              else
              {
                v589 = sub_20E86A980(&v1134, (uint64_t)"error: landmark variable ", 25);
                sub_20F622838((uint64_t)&__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v590 = &__p;
                else
                  v590 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v591 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v591 = __p.__r_.__value_.__l.__size_;
                v592 = sub_20E86A980(v589, (uint64_t)v590, v591);
                sub_20E86A980(v592, (uint64_t)" with ID ", 9);
                v593 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v593, (uint64_t)" was not found.\n", 16);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v594 = 0;
                v595 = a1[336].i64[1];
                v596 = (_DWORD *)a1[337].i64[0];
                v597 = (_DWORD *)v595;
                v598 = (uint64_t)v596 - v595;
                if (v596 == (_DWORD *)v595)
                {
LABEL_800:
                  if (v597 != v596 && *v597 == v68)
                  {
                    if (v596 != (_DWORD *)v595)
                    {
                      v604 = ((uint64_t)v596 - v595) >> 4;
                      do
                      {
                        v605 = v604 >> 1;
                        v606 = (unsigned int *)(v595 + 16 * (v604 >> 1));
                        v608 = *v606;
                        v607 = v606 + 4;
                        v604 += ~(v604 >> 1);
                        if (v608 < v68)
                          v595 = (uint64_t)v607;
                        else
                          v604 = v605;
                      }
                      while (v604);
                    }
                    if ((_DWORD *)v595 == v596 || *(_DWORD *)v595 != v68)
                      v595 = (uint64_t)v596;
                    v609 = *(_QWORD *)(v595 + 8);
                    v610 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                    sub_20F622C70((uint64_t)&__p);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v611 = &__p;
                    else
                      v611 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v612 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    else
                      v612 = __p.__r_.__value_.__l.__size_;
                    v613 = sub_20E86A980(v610, (uint64_t)v611, v612);
                    sub_20E86A980(v613, (uint64_t)" with ID ", 9);
                    v614 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v614, (uint64_t)" found (", 8);
                    v615 = (_QWORD *)std::ostream::operator<<();
                    v616 = sub_20E86A980(v615, (uint64_t)", ", 2);
                    if (*(_BYTE *)(v609 + 20))
                      v617 = "free";
                    else
                      v617 = "fixed";
                    if (*(_BYTE *)(v609 + 20))
                      v618 = 4;
                    else
                      v618 = 5;
                    v619 = sub_20E86A980(v616, (uint64_t)v617, v618);
                    sub_20E86A980(v619, (uint64_t)")\n", 2);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    v1097 = *(unsigned __int8 *)(v609 + 20);
                    v620 = a1[336].i64[1];
                    v621 = (_DWORD *)a1[337].i64[0];
                    v622 = (_DWORD *)v620;
                    v623 = (uint64_t)v621 - v620;
                    if (v621 == (_DWORD *)v620)
                      goto LABEL_841;
LABEL_836:
                    v629 = v623 >> 4;
                    v622 = (_DWORD *)v620;
                    do
                    {
                      v630 = v629 >> 1;
                      v631 = &v622[4 * (v629 >> 1)];
                      v633 = *v631;
                      v632 = v631 + 4;
                      v629 += ~(v629 >> 1);
                      if (v633 < v89)
                        v622 = v632;
                      else
                        v629 = v630;
                    }
                    while (v629);
                    goto LABEL_841;
                  }
                  v624 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                  sub_20F622C70((uint64_t)&__p);
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v625 = &__p;
                  else
                    v625 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v626 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  else
                    v626 = __p.__r_.__value_.__l.__size_;
                  v627 = sub_20E86A980(v624, (uint64_t)v625, v626);
                  sub_20E86A980(v627, (uint64_t)" with ID ", 9);
                  v628 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v628, (uint64_t)" not found\n", 11);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v594 = 0;
                  v1097 = 0;
                  v620 = a1[336].i64[1];
                  v621 = (_DWORD *)a1[337].i64[0];
                  v622 = (_DWORD *)v620;
                  v623 = (uint64_t)v621 - v620;
                  if (v621 != (_DWORD *)v620)
                    goto LABEL_836;
LABEL_841:
                  if (v622 == v621 || *v622 != v89)
                  {
                    v654 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                    sub_20F622C70((uint64_t)&__p);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v655 = &__p;
                    else
                      v655 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v656 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    else
                      v656 = __p.__r_.__value_.__l.__size_;
                    v657 = sub_20E86A980(v654, (uint64_t)v655, v656);
                    sub_20E86A980(v657, (uint64_t)" with ID ", 9);
                    v658 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v658, (uint64_t)" not found\n", 11);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__p.__r_.__value_.__l.__data_);
                      v594 = 0;
                      v650 = a1[324].i64[1];
                      v651 = (_DWORD *)a1[325].i64[0];
                      v652 = (_DWORD *)v650;
                      v653 = (uint64_t)v651 - v650;
                      if (v651 == (_DWORD *)v650)
                        goto LABEL_885;
                    }
                    else
                    {
                      v594 = 0;
                      v650 = a1[324].i64[1];
                      v651 = (_DWORD *)a1[325].i64[0];
                      v652 = (_DWORD *)v650;
                      v653 = (uint64_t)v651 - v650;
                      if (v651 == (_DWORD *)v650)
                        goto LABEL_885;
                    }
                  }
                  else
                  {
                    if (v621 != (_DWORD *)v620)
                    {
                      v634 = ((uint64_t)v621 - v620) >> 4;
                      do
                      {
                        v635 = v634 >> 1;
                        v636 = (unsigned int *)(v620 + 16 * (v634 >> 1));
                        v638 = *v636;
                        v637 = v636 + 4;
                        v634 += ~(v634 >> 1);
                        if (v638 < v89)
                          v620 = (uint64_t)v637;
                        else
                          v634 = v635;
                      }
                      while (v634);
                    }
                    if ((_DWORD *)v620 == v621 || *(_DWORD *)v620 != v89)
                      v620 = (uint64_t)v621;
                    v639 = *(_QWORD *)(v620 + 8);
                    v640 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                    sub_20F622C70((uint64_t)&__p);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v641 = &__p;
                    else
                      v641 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v642 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    else
                      v642 = __p.__r_.__value_.__l.__size_;
                    v643 = sub_20E86A980(v640, (uint64_t)v641, v642);
                    sub_20E86A980(v643, (uint64_t)" with ID ", 9);
                    v644 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v644, (uint64_t)" found (", 8);
                    v645 = (_QWORD *)std::ostream::operator<<();
                    v646 = sub_20E86A980(v645, (uint64_t)", ", 2);
                    if (*(_BYTE *)(v639 + 20))
                      v647 = "free";
                    else
                      v647 = "fixed";
                    if (*(_BYTE *)(v639 + 20))
                      v648 = 4;
                    else
                      v648 = 5;
                    v649 = sub_20E86A980(v646, (uint64_t)v647, v648);
                    sub_20E86A980(v649, (uint64_t)")\n", 2);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    v1097 |= *(unsigned __int8 *)(v639 + 20);
                    v650 = a1[324].i64[1];
                    v651 = (_DWORD *)a1[325].i64[0];
                    v652 = (_DWORD *)v650;
                    v653 = (uint64_t)v651 - v650;
                    if (v651 == (_DWORD *)v650)
                    {
LABEL_885:
                      if (v652 == v651 || *v652 != v67)
                      {
                        v684 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                        sub_20F622E88((uint64_t)&__p);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v685 = &__p;
                        else
                          v685 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v686 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        else
                          v686 = __p.__r_.__value_.__l.__size_;
                        v687 = sub_20E86A980(v684, (uint64_t)v685, v686);
                        sub_20E86A980(v687, (uint64_t)" with ID ", 9);
                        v688 = (_QWORD *)std::ostream::operator<<();
                        sub_20E86A980(v688, (uint64_t)" not found\n", 11);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__p.__r_.__value_.__l.__data_);
                          v594 = 0;
                          v680 = a1[324].i64[1];
                          v681 = (_DWORD *)a1[325].i64[0];
                          v682 = (_DWORD *)v680;
                          v683 = (uint64_t)v681 - v680;
                          if (v681 == (_DWORD *)v680)
                            goto LABEL_927;
                        }
                        else
                        {
                          v594 = 0;
                          v680 = a1[324].i64[1];
                          v681 = (_DWORD *)a1[325].i64[0];
                          v682 = (_DWORD *)v680;
                          v683 = (uint64_t)v681 - v680;
                          if (v681 == (_DWORD *)v680)
                            goto LABEL_927;
                        }
                      }
                      else
                      {
                        if (v651 != (_DWORD *)v650)
                        {
                          v664 = ((uint64_t)v651 - v650) >> 4;
                          do
                          {
                            v665 = v664 >> 1;
                            v666 = (unsigned int *)(v650 + 16 * (v664 >> 1));
                            v668 = *v666;
                            v667 = v666 + 4;
                            v664 += ~(v664 >> 1);
                            if (v668 < v67)
                              v650 = (uint64_t)v667;
                            else
                              v664 = v665;
                          }
                          while (v664);
                        }
                        if ((_DWORD *)v650 == v651 || *(_DWORD *)v650 != v67)
                          v650 = (uint64_t)v651;
                        v669 = *(_QWORD *)(v650 + 8);
                        v670 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                        sub_20F622E88((uint64_t)&__p);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v671 = &__p;
                        else
                          v671 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v672 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        else
                          v672 = __p.__r_.__value_.__l.__size_;
                        v673 = sub_20E86A980(v670, (uint64_t)v671, v672);
                        sub_20E86A980(v673, (uint64_t)" with ID ", 9);
                        v674 = (_QWORD *)std::ostream::operator<<();
                        sub_20E86A980(v674, (uint64_t)" found (", 8);
                        v675 = (_QWORD *)std::ostream::operator<<();
                        v676 = sub_20E86A980(v675, (uint64_t)", ", 2);
                        if (*(_BYTE *)(v669 + 20))
                          v677 = "free";
                        else
                          v677 = "fixed";
                        if (*(_BYTE *)(v669 + 20))
                          v678 = 4;
                        else
                          v678 = 5;
                        v679 = sub_20E86A980(v676, (uint64_t)v677, v678);
                        sub_20E86A980(v679, (uint64_t)")\n", 2);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                        v1097 |= *(unsigned __int8 *)(v669 + 20);
                        v680 = a1[324].i64[1];
                        v681 = (_DWORD *)a1[325].i64[0];
                        v682 = (_DWORD *)v680;
                        v683 = (uint64_t)v681 - v680;
                        if (v681 == (_DWORD *)v680)
                        {
LABEL_927:
                          if (v682 == v681 || *v682 != v90)
                          {
                            v714 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                            sub_20F622E88((uint64_t)&__p);
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v715 = &__p;
                            else
                              v715 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v716 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                            else
                              v716 = __p.__r_.__value_.__l.__size_;
                            v717 = sub_20E86A980(v714, (uint64_t)v715, v716);
                            sub_20E86A980(v717, (uint64_t)" with ID ", 9);
                            v718 = (_QWORD *)std::ostream::operator<<();
                            sub_20E86A980(v718, (uint64_t)" not found\n", 11);
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(__p.__r_.__value_.__l.__data_);
                              v594 = 0;
                              v710 = a1[366].i64[1];
                              v711 = (_DWORD *)a1[367].i64[0];
                              v712 = (_DWORD *)v710;
                              v713 = (uint64_t)v711 - v710;
                              if (v711 == (_DWORD *)v710)
                                goto LABEL_969;
                            }
                            else
                            {
                              v594 = 0;
                              v710 = a1[366].i64[1];
                              v711 = (_DWORD *)a1[367].i64[0];
                              v712 = (_DWORD *)v710;
                              v713 = (uint64_t)v711 - v710;
                              if (v711 == (_DWORD *)v710)
                                goto LABEL_969;
                            }
                          }
                          else
                          {
                            if (v681 != (_DWORD *)v680)
                            {
                              v694 = ((uint64_t)v681 - v680) >> 4;
                              do
                              {
                                v695 = v694 >> 1;
                                v696 = (unsigned int *)(v680 + 16 * (v694 >> 1));
                                v698 = *v696;
                                v697 = v696 + 4;
                                v694 += ~(v694 >> 1);
                                if (v698 < v90)
                                  v680 = (uint64_t)v697;
                                else
                                  v694 = v695;
                              }
                              while (v694);
                            }
                            if ((_DWORD *)v680 == v681 || *(_DWORD *)v680 != v90)
                              v680 = (uint64_t)v681;
                            v699 = *(_QWORD *)(v680 + 8);
                            v700 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                            sub_20F622E88((uint64_t)&__p);
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v701 = &__p;
                            else
                              v701 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v702 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                            else
                              v702 = __p.__r_.__value_.__l.__size_;
                            v703 = sub_20E86A980(v700, (uint64_t)v701, v702);
                            sub_20E86A980(v703, (uint64_t)" with ID ", 9);
                            v704 = (_QWORD *)std::ostream::operator<<();
                            sub_20E86A980(v704, (uint64_t)" found (", 8);
                            v705 = (_QWORD *)std::ostream::operator<<();
                            v706 = sub_20E86A980(v705, (uint64_t)", ", 2);
                            if (*(_BYTE *)(v699 + 20))
                              v707 = "free";
                            else
                              v707 = "fixed";
                            if (*(_BYTE *)(v699 + 20))
                              v708 = 4;
                            else
                              v708 = 5;
                            v709 = sub_20E86A980(v706, (uint64_t)v707, v708);
                            sub_20E86A980(v709, (uint64_t)")\n", 2);
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p.__r_.__value_.__l.__data_);
                            v1097 |= *(unsigned __int8 *)(v699 + 20);
                            v710 = a1[366].i64[1];
                            v711 = (_DWORD *)a1[367].i64[0];
                            v712 = (_DWORD *)v710;
                            v713 = (uint64_t)v711 - v710;
                            if (v711 == (_DWORD *)v710)
                            {
LABEL_969:
                              if (v712 == v711 || *v712 != v68)
                              {
                                v744 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                sub_20F6230A4((uint64_t)&__p);
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v745 = &__p;
                                else
                                  v745 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v746 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                else
                                  v746 = __p.__r_.__value_.__l.__size_;
                                v747 = sub_20E86A980(v744, (uint64_t)v745, v746);
                                sub_20E86A980(v747, (uint64_t)" with ID ", 9);
                                v748 = (_QWORD *)std::ostream::operator<<();
                                sub_20E86A980(v748, (uint64_t)" not found\n", 11);
                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(__p.__r_.__value_.__l.__data_);
                                  v594 = 0;
                                  v740 = a1[366].i64[1];
                                  v741 = (_DWORD *)a1[367].i64[0];
                                  v742 = (_DWORD *)v740;
                                  v743 = (uint64_t)v741 - v740;
                                  if (v741 == (_DWORD *)v740)
                                    goto LABEL_1011;
                                }
                                else
                                {
                                  v594 = 0;
                                  v740 = a1[366].i64[1];
                                  v741 = (_DWORD *)a1[367].i64[0];
                                  v742 = (_DWORD *)v740;
                                  v743 = (uint64_t)v741 - v740;
                                  if (v741 == (_DWORD *)v740)
                                    goto LABEL_1011;
                                }
                              }
                              else
                              {
                                if (v711 != (_DWORD *)v710)
                                {
                                  v724 = ((uint64_t)v711 - v710) >> 4;
                                  do
                                  {
                                    v725 = v724 >> 1;
                                    v726 = (unsigned int *)(v710 + 16 * (v724 >> 1));
                                    v728 = *v726;
                                    v727 = v726 + 4;
                                    v724 += ~(v724 >> 1);
                                    if (v728 < v68)
                                      v710 = (uint64_t)v727;
                                    else
                                      v724 = v725;
                                  }
                                  while (v724);
                                }
                                if ((_DWORD *)v710 == v711 || *(_DWORD *)v710 != v68)
                                  v710 = (uint64_t)v711;
                                v729 = *(_QWORD *)(v710 + 8);
                                v730 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                sub_20F6230A4((uint64_t)&__p);
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v731 = &__p;
                                else
                                  v731 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v732 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                else
                                  v732 = __p.__r_.__value_.__l.__size_;
                                v733 = sub_20E86A980(v730, (uint64_t)v731, v732);
                                sub_20E86A980(v733, (uint64_t)" with ID ", 9);
                                v734 = (_QWORD *)std::ostream::operator<<();
                                sub_20E86A980(v734, (uint64_t)" found (", 8);
                                v735 = (_QWORD *)std::ostream::operator<<();
                                v736 = sub_20E86A980(v735, (uint64_t)", ", 2);
                                if (*(_BYTE *)(v729 + 20))
                                  v737 = "free";
                                else
                                  v737 = "fixed";
                                if (*(_BYTE *)(v729 + 20))
                                  v738 = 4;
                                else
                                  v738 = 5;
                                v739 = sub_20E86A980(v736, (uint64_t)v737, v738);
                                sub_20E86A980(v739, (uint64_t)")\n", 2);
                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(__p.__r_.__value_.__l.__data_);
                                v1097 |= *(unsigned __int8 *)(v729 + 20);
                                v740 = a1[366].i64[1];
                                v741 = (_DWORD *)a1[367].i64[0];
                                v742 = (_DWORD *)v740;
                                v743 = (uint64_t)v741 - v740;
                                if (v741 == (_DWORD *)v740)
                                {
LABEL_1011:
                                  if (v742 == v741 || *v742 != v89)
                                  {
                                    v774 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                    sub_20F6230A4((uint64_t)&__p);
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v775 = &__p;
                                    else
                                      v775 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v776 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                    else
                                      v776 = __p.__r_.__value_.__l.__size_;
                                    v777 = sub_20E86A980(v774, (uint64_t)v775, v776);
                                    sub_20E86A980(v777, (uint64_t)" with ID ", 9);
                                    v778 = (_QWORD *)std::ostream::operator<<();
                                    sub_20E86A980(v778, (uint64_t)" not found\n", 11);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                      v594 = 0;
                                      v770 = a1[372].i64[1];
                                      v771 = (_DWORD *)a1[373].i64[0];
                                      v772 = (_DWORD *)v770;
                                      v773 = (uint64_t)v771 - v770;
                                      if (v771 == (_DWORD *)v770)
                                        goto LABEL_1053;
                                    }
                                    else
                                    {
                                      v594 = 0;
                                      v770 = a1[372].i64[1];
                                      v771 = (_DWORD *)a1[373].i64[0];
                                      v772 = (_DWORD *)v770;
                                      v773 = (uint64_t)v771 - v770;
                                      if (v771 == (_DWORD *)v770)
                                        goto LABEL_1053;
                                    }
                                  }
                                  else
                                  {
                                    if (v741 != (_DWORD *)v740)
                                    {
                                      v754 = ((uint64_t)v741 - v740) >> 4;
                                      do
                                      {
                                        v755 = v754 >> 1;
                                        v756 = (unsigned int *)(v740 + 16 * (v754 >> 1));
                                        v758 = *v756;
                                        v757 = v756 + 4;
                                        v754 += ~(v754 >> 1);
                                        if (v758 < v89)
                                          v740 = (uint64_t)v757;
                                        else
                                          v754 = v755;
                                      }
                                      while (v754);
                                    }
                                    if ((_DWORD *)v740 == v741 || *(_DWORD *)v740 != v89)
                                      v740 = (uint64_t)v741;
                                    v759 = *(_QWORD *)(v740 + 8);
                                    v760 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                    sub_20F6230A4((uint64_t)&__p);
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v761 = &__p;
                                    else
                                      v761 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v762 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                    else
                                      v762 = __p.__r_.__value_.__l.__size_;
                                    v763 = sub_20E86A980(v760, (uint64_t)v761, v762);
                                    sub_20E86A980(v763, (uint64_t)" with ID ", 9);
                                    v764 = (_QWORD *)std::ostream::operator<<();
                                    sub_20E86A980(v764, (uint64_t)" found (", 8);
                                    v765 = (_QWORD *)std::ostream::operator<<();
                                    v766 = sub_20E86A980(v765, (uint64_t)", ", 2);
                                    if (*(_BYTE *)(v759 + 20))
                                      v767 = "free";
                                    else
                                      v767 = "fixed";
                                    if (*(_BYTE *)(v759 + 20))
                                      v768 = 4;
                                    else
                                      v768 = 5;
                                    v769 = sub_20E86A980(v766, (uint64_t)v767, v768);
                                    sub_20E86A980(v769, (uint64_t)")\n", 2);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                    v1097 |= *(unsigned __int8 *)(v759 + 20);
                                    v770 = a1[372].i64[1];
                                    v771 = (_DWORD *)a1[373].i64[0];
                                    v772 = (_DWORD *)v770;
                                    v773 = (uint64_t)v771 - v770;
                                    if (v771 == (_DWORD *)v770)
                                    {
LABEL_1053:
                                      if (v772 == v771 || *v772 != v68)
                                      {
                                        v804 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                        sub_20F6232BC((uint64_t)&__p);
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v805 = &__p;
                                        else
                                          v805 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v806 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                        else
                                          v806 = __p.__r_.__value_.__l.__size_;
                                        v807 = sub_20E86A980(v804, (uint64_t)v805, v806);
                                        sub_20E86A980(v807, (uint64_t)" with ID ", 9);
                                        v808 = (_QWORD *)std::ostream::operator<<();
                                        sub_20E86A980(v808, (uint64_t)" not found\n", 11);
                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                          v594 = 0;
                                          v800 = a1[372].i64[1];
                                          v801 = (_DWORD *)a1[373].i64[0];
                                          v802 = (_DWORD *)v800;
                                          v803 = (uint64_t)v801 - v800;
                                          if (v801 == (_DWORD *)v800)
                                            goto LABEL_1095;
                                        }
                                        else
                                        {
                                          v594 = 0;
                                          v800 = a1[372].i64[1];
                                          v801 = (_DWORD *)a1[373].i64[0];
                                          v802 = (_DWORD *)v800;
                                          v803 = (uint64_t)v801 - v800;
                                          if (v801 == (_DWORD *)v800)
                                            goto LABEL_1095;
                                        }
                                      }
                                      else
                                      {
                                        if (v771 != (_DWORD *)v770)
                                        {
                                          v784 = ((uint64_t)v771 - v770) >> 4;
                                          do
                                          {
                                            v785 = v784 >> 1;
                                            v786 = (unsigned int *)(v770 + 16 * (v784 >> 1));
                                            v788 = *v786;
                                            v787 = v786 + 4;
                                            v784 += ~(v784 >> 1);
                                            if (v788 < v68)
                                              v770 = (uint64_t)v787;
                                            else
                                              v784 = v785;
                                          }
                                          while (v784);
                                        }
                                        if ((_DWORD *)v770 == v771 || *(_DWORD *)v770 != v68)
                                          v770 = (uint64_t)v771;
                                        v789 = *(_QWORD *)(v770 + 8);
                                        v790 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                        sub_20F6232BC((uint64_t)&__p);
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v791 = &__p;
                                        else
                                          v791 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v792 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                        else
                                          v792 = __p.__r_.__value_.__l.__size_;
                                        v793 = sub_20E86A980(v790, (uint64_t)v791, v792);
                                        sub_20E86A980(v793, (uint64_t)" with ID ", 9);
                                        v794 = (_QWORD *)std::ostream::operator<<();
                                        sub_20E86A980(v794, (uint64_t)" found (", 8);
                                        v795 = (_QWORD *)std::ostream::operator<<();
                                        v796 = sub_20E86A980(v795, (uint64_t)", ", 2);
                                        if (*(_BYTE *)(v789 + 20))
                                          v797 = "free";
                                        else
                                          v797 = "fixed";
                                        if (*(_BYTE *)(v789 + 20))
                                          v798 = 4;
                                        else
                                          v798 = 5;
                                        v799 = sub_20E86A980(v796, (uint64_t)v797, v798);
                                        sub_20E86A980(v799, (uint64_t)")\n", 2);
                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                        v1097 |= *(unsigned __int8 *)(v789 + 20);
                                        v800 = a1[372].i64[1];
                                        v801 = (_DWORD *)a1[373].i64[0];
                                        v802 = (_DWORD *)v800;
                                        v803 = (uint64_t)v801 - v800;
                                        if (v801 == (_DWORD *)v800)
                                        {
LABEL_1095:
                                          if (v802 == v801 || *v802 != v89)
                                          {
                                            v834 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                            sub_20F6232BC((uint64_t)&__p);
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v835 = &__p;
                                            else
                                              v835 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v836 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                            else
                                              v836 = __p.__r_.__value_.__l.__size_;
                                            v837 = sub_20E86A980(v834, (uint64_t)v835, v836);
                                            sub_20E86A980(v837, (uint64_t)" with ID ", 9);
                                            v838 = (_QWORD *)std::ostream::operator<<();
                                            sub_20E86A980(v838, (uint64_t)" not found\n", 11);
                                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                            {
                                              operator delete(__p.__r_.__value_.__l.__data_);
                                              v594 = 0;
                                              v830 = a1[378].i64[1];
                                              v831 = (_DWORD *)a1[379].i64[0];
                                              v832 = (_DWORD *)v830;
                                              v833 = (uint64_t)v831 - v830;
                                              if (v831 == (_DWORD *)v830)
                                                goto LABEL_1137;
                                            }
                                            else
                                            {
                                              v594 = 0;
                                              v830 = a1[378].i64[1];
                                              v831 = (_DWORD *)a1[379].i64[0];
                                              v832 = (_DWORD *)v830;
                                              v833 = (uint64_t)v831 - v830;
                                              if (v831 == (_DWORD *)v830)
                                                goto LABEL_1137;
                                            }
                                          }
                                          else
                                          {
                                            if (v801 != (_DWORD *)v800)
                                            {
                                              v814 = ((uint64_t)v801 - v800) >> 4;
                                              do
                                              {
                                                v815 = v814 >> 1;
                                                v816 = (unsigned int *)(v800 + 16 * (v814 >> 1));
                                                v818 = *v816;
                                                v817 = v816 + 4;
                                                v814 += ~(v814 >> 1);
                                                if (v818 < v89)
                                                  v800 = (uint64_t)v817;
                                                else
                                                  v814 = v815;
                                              }
                                              while (v814);
                                            }
                                            if ((_DWORD *)v800 == v801 || *(_DWORD *)v800 != v89)
                                              v800 = (uint64_t)v801;
                                            v819 = *(_QWORD *)(v800 + 8);
                                            v820 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                            sub_20F6232BC((uint64_t)&__p);
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v821 = &__p;
                                            else
                                              v821 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v822 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                            else
                                              v822 = __p.__r_.__value_.__l.__size_;
                                            v823 = sub_20E86A980(v820, (uint64_t)v821, v822);
                                            sub_20E86A980(v823, (uint64_t)" with ID ", 9);
                                            v824 = (_QWORD *)std::ostream::operator<<();
                                            sub_20E86A980(v824, (uint64_t)" found (", 8);
                                            v825 = (_QWORD *)std::ostream::operator<<();
                                            v826 = sub_20E86A980(v825, (uint64_t)", ", 2);
                                            if (*(_BYTE *)(v819 + 20))
                                              v827 = "free";
                                            else
                                              v827 = "fixed";
                                            if (*(_BYTE *)(v819 + 20))
                                              v828 = 4;
                                            else
                                              v828 = 5;
                                            v829 = sub_20E86A980(v826, (uint64_t)v827, v828);
                                            sub_20E86A980(v829, (uint64_t)")\n", 2);
                                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(__p.__r_.__value_.__l.__data_);
                                            v1097 |= *(unsigned __int8 *)(v819 + 20);
                                            v830 = a1[378].i64[1];
                                            v831 = (_DWORD *)a1[379].i64[0];
                                            v832 = (_DWORD *)v830;
                                            v833 = (uint64_t)v831 - v830;
                                            if (v831 == (_DWORD *)v830)
                                            {
LABEL_1137:
                                              if (v832 == v831 || *v832 != v68)
                                              {
                                                v864 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                                sub_20F6234D8((uint64_t)&__p);
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v865 = &__p;
                                                else
                                                  v865 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v866 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                else
                                                  v866 = __p.__r_.__value_.__l.__size_;
                                                v867 = sub_20E86A980(v864, (uint64_t)v865, v866);
                                                sub_20E86A980(v867, (uint64_t)" with ID ", 9);
                                                v868 = (_QWORD *)std::ostream::operator<<();
                                                sub_20E86A980(v868, (uint64_t)" not found\n", 11);
                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                {
                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                  v594 = 0;
                                                  v860 = a1[378].i64[1];
                                                  v861 = (_DWORD *)a1[379].i64[0];
                                                  v862 = (_DWORD *)v860;
                                                  v863 = (uint64_t)v861 - v860;
                                                  if (v861 == (_DWORD *)v860)
                                                    goto LABEL_1179;
                                                }
                                                else
                                                {
                                                  v594 = 0;
                                                  v860 = a1[378].i64[1];
                                                  v861 = (_DWORD *)a1[379].i64[0];
                                                  v862 = (_DWORD *)v860;
                                                  v863 = (uint64_t)v861 - v860;
                                                  if (v861 == (_DWORD *)v860)
                                                    goto LABEL_1179;
                                                }
                                              }
                                              else
                                              {
                                                if (v831 != (_DWORD *)v830)
                                                {
                                                  v844 = ((uint64_t)v831 - v830) >> 4;
                                                  do
                                                  {
                                                    v845 = v844 >> 1;
                                                    v846 = (unsigned int *)(v830 + 16 * (v844 >> 1));
                                                    v848 = *v846;
                                                    v847 = v846 + 4;
                                                    v844 += ~(v844 >> 1);
                                                    if (v848 < v68)
                                                      v830 = (uint64_t)v847;
                                                    else
                                                      v844 = v845;
                                                  }
                                                  while (v844);
                                                }
                                                if ((_DWORD *)v830 == v831 || *(_DWORD *)v830 != v68)
                                                  v830 = (uint64_t)v831;
                                                v849 = *(_QWORD *)(v830 + 8);
                                                v850 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                                sub_20F6234D8((uint64_t)&__p);
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v851 = &__p;
                                                else
                                                  v851 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v852 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                else
                                                  v852 = __p.__r_.__value_.__l.__size_;
                                                v853 = sub_20E86A980(v850, (uint64_t)v851, v852);
                                                sub_20E86A980(v853, (uint64_t)" with ID ", 9);
                                                v854 = (_QWORD *)std::ostream::operator<<();
                                                sub_20E86A980(v854, (uint64_t)" found (", 8);
                                                v855 = (_QWORD *)std::ostream::operator<<();
                                                v856 = sub_20E86A980(v855, (uint64_t)", ", 2);
                                                if (*(_BYTE *)(v849 + 20))
                                                  v857 = "free";
                                                else
                                                  v857 = "fixed";
                                                if (*(_BYTE *)(v849 + 20))
                                                  v858 = 4;
                                                else
                                                  v858 = 5;
                                                v859 = sub_20E86A980(v856, (uint64_t)v857, v858);
                                                sub_20E86A980(v859, (uint64_t)")\n", 2);
                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                v1097 |= *(unsigned __int8 *)(v849 + 20);
                                                v860 = a1[378].i64[1];
                                                v861 = (_DWORD *)a1[379].i64[0];
                                                v862 = (_DWORD *)v860;
                                                v863 = (uint64_t)v861 - v860;
                                                if (v861 == (_DWORD *)v860)
                                                {
LABEL_1179:
                                                  if (v862 == v861 || *v862 != v89)
                                                  {
                                                    v894 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                                    sub_20F6234D8((uint64_t)&__p);
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v895 = &__p;
                                                    else
                                                      v895 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v896 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                    else
                                                      v896 = __p.__r_.__value_.__l.__size_;
                                                    v897 = sub_20E86A980(v894, (uint64_t)v895, v896);
                                                    sub_20E86A980(v897, (uint64_t)" with ID ", 9);
                                                    v898 = (_QWORD *)std::ostream::operator<<();
                                                    sub_20E86A980(v898, (uint64_t)" not found\n", 11);
                                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                    {
                                                      operator delete(__p.__r_.__value_.__l.__data_);
                                                      v594 = 0;
                                                      v890 = a1[384].i64[1];
                                                      v891 = (_DWORD *)a1[385].i64[0];
                                                      v892 = (_DWORD *)v890;
                                                      v893 = (uint64_t)v891 - v890;
                                                      if (v891 == (_DWORD *)v890)
                                                        goto LABEL_1221;
                                                    }
                                                    else
                                                    {
                                                      v594 = 0;
                                                      v890 = a1[384].i64[1];
                                                      v891 = (_DWORD *)a1[385].i64[0];
                                                      v892 = (_DWORD *)v890;
                                                      v893 = (uint64_t)v891 - v890;
                                                      if (v891 == (_DWORD *)v890)
                                                        goto LABEL_1221;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v861 != (_DWORD *)v860)
                                                    {
                                                      v874 = ((uint64_t)v861 - v860) >> 4;
                                                      do
                                                      {
                                                        v875 = v874 >> 1;
                                                        v876 = (unsigned int *)(v860 + 16 * (v874 >> 1));
                                                        v878 = *v876;
                                                        v877 = v876 + 4;
                                                        v874 += ~(v874 >> 1);
                                                        if (v878 < v89)
                                                          v860 = (uint64_t)v877;
                                                        else
                                                          v874 = v875;
                                                      }
                                                      while (v874);
                                                    }
                                                    if ((_DWORD *)v860 == v861 || *(_DWORD *)v860 != v89)
                                                      v860 = (uint64_t)v861;
                                                    v879 = *(_QWORD *)(v860 + 8);
                                                    v880 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                                    sub_20F6234D8((uint64_t)&__p);
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v881 = &__p;
                                                    else
                                                      v881 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v882 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                    else
                                                      v882 = __p.__r_.__value_.__l.__size_;
                                                    v883 = sub_20E86A980(v880, (uint64_t)v881, v882);
                                                    sub_20E86A980(v883, (uint64_t)" with ID ", 9);
                                                    v884 = (_QWORD *)std::ostream::operator<<();
                                                    sub_20E86A980(v884, (uint64_t)" found (", 8);
                                                    v885 = (_QWORD *)std::ostream::operator<<();
                                                    v886 = sub_20E86A980(v885, (uint64_t)", ", 2);
                                                    if (*(_BYTE *)(v879 + 20))
                                                      v887 = "free";
                                                    else
                                                      v887 = "fixed";
                                                    if (*(_BYTE *)(v879 + 20))
                                                      v888 = 4;
                                                    else
                                                      v888 = 5;
                                                    v889 = sub_20E86A980(v886, (uint64_t)v887, v888);
                                                    sub_20E86A980(v889, (uint64_t)")\n", 2);
                                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(__p.__r_.__value_.__l.__data_);
                                                    v1097 |= *(unsigned __int8 *)(v879 + 20);
                                                    v890 = a1[384].i64[1];
                                                    v891 = (_DWORD *)a1[385].i64[0];
                                                    v892 = (_DWORD *)v890;
                                                    v893 = (uint64_t)v891 - v890;
                                                    if (v891 == (_DWORD *)v890)
                                                    {
LABEL_1221:
                                                      if (v892 == v891 || *v892 != v17)
                                                      {
                                                        v923 = sub_20E86A980(&v1134, (uint64_t)"error: variable ", 16);
                                                        sub_20F622838((uint64_t)&__p);
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v924 = &__p;
                                                        else
                                                          v924 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v925 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                        else
                                                          v925 = __p.__r_.__value_.__l.__size_;
                                                        v926 = sub_20E86A980(v923, (uint64_t)v924, v925);
                                                        sub_20E86A980(v926, (uint64_t)" with ID ", 9);
                                                        v927 = (_QWORD *)std::ostream::operator<<();
                                                        sub_20E86A980(v927, (uint64_t)" not found\n", 11);
                                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                        {
                                                          operator delete(__p.__r_.__value_.__l.__data_);
                                                          v594 = 0;
                                                          v920 = (char *)a1[414].i64[1];
                                                          v921 = (char *)a1[415].i64[0];
                                                          v922 = v921 - v920;
                                                          if (v921 == v920)
                                                            goto LABEL_1274;
                                                        }
                                                        else
                                                        {
                                                          v594 = 0;
                                                          v920 = (char *)a1[414].i64[1];
                                                          v921 = (char *)a1[415].i64[0];
                                                          v922 = v921 - v920;
                                                          if (v921 == v920)
                                                            goto LABEL_1274;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (v891 != (_DWORD *)v890)
                                                        {
                                                          v904 = ((uint64_t)v891 - v890) >> 4;
                                                          do
                                                          {
                                                            v905 = v904 >> 1;
                                                            v906 = (unsigned __int32 *)(v890 + 16 * (v904 >> 1));
                                                            v908 = *v906;
                                                            v907 = v906 + 4;
                                                            v904 += ~(v904 >> 1);
                                                            if (v908 < v17)
                                                              v890 = (uint64_t)v907;
                                                            else
                                                              v904 = v905;
                                                          }
                                                          while (v904);
                                                        }
                                                        if ((_DWORD *)v890 == v891 || *(_DWORD *)v890 != v17)
                                                          v890 = (uint64_t)v891;
                                                        v909 = *(_QWORD *)(v890 + 8);
                                                        v910 = sub_20E86A980(&v1134, (uint64_t)"debug: variable ", 16);
                                                        sub_20F622838((uint64_t)&__p);
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v911 = &__p;
                                                        else
                                                          v911 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v912 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                        else
                                                          v912 = __p.__r_.__value_.__l.__size_;
                                                        v913 = sub_20E86A980(v910, (uint64_t)v911, v912);
                                                        sub_20E86A980(v913, (uint64_t)" with ID ", 9);
                                                        v914 = (_QWORD *)std::ostream::operator<<();
                                                        sub_20E86A980(v914, (uint64_t)" found (", 8);
                                                        v915 = (_QWORD *)std::ostream::operator<<();
                                                        v916 = sub_20E86A980(v915, (uint64_t)", ", 2);
                                                        if (*(_BYTE *)(v909 + 20))
                                                          v917 = "free";
                                                        else
                                                          v917 = "fixed";
                                                        if (*(_BYTE *)(v909 + 20))
                                                          v918 = 4;
                                                        else
                                                          v918 = 5;
                                                        v919 = sub_20E86A980(v916, (uint64_t)v917, v918);
                                                        sub_20E86A980(v919, (uint64_t)")\n", 2);
                                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          operator delete(__p.__r_.__value_.__l.__data_);
                                                        v1097 |= *(unsigned __int8 *)(v909 + 20);
                                                        v920 = (char *)a1[414].i64[1];
                                                        v921 = (char *)a1[415].i64[0];
                                                        v922 = v921 - v920;
                                                        if (v921 == v920)
                                                        {
LABEL_1274:
                                                          if (v1097)
                                                          {
                                                            v938 = v594 != 0;
                                                            v939 = v1139[16];
                                                            if ((v1139[16] & 0x10) == 0)
                                                              goto LABEL_1276;
LABEL_1286:
                                                            v947 = *(_QWORD *)&v1139[8];
                                                            v948 = (std::string::size_type *)&v1136 + 1;
                                                            if (*(_QWORD *)&v1139[8] < (unint64_t)v1137)
                                                            {
                                                              *(_QWORD *)&v1139[8] = v1137;
                                                              v947 = v1137;
                                                              v948 = (std::string::size_type *)&v1136 + 1;
                                                            }
LABEL_1289:
                                                            v949 = (const void *)*v948;
                                                            v940 = v947 - *v948;
                                                            if (v940 > 0x7FFFFFFFFFFFFFF7)
                                                              sub_20E860B7C();
                                                            if (v940 >= 0x17)
                                                            {
                                                              v950 = (v940 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                              if ((v940 | 7) != 0x17)
                                                                v950 = v940 | 7;
                                                              v951 = v950 + 1;
                                                              v941 = (std::string *)operator new(v950 + 1);
                                                              __p.__r_.__value_.__r.__words[2] = v951 | 0x8000000000000000;
                                                              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v941;
                                                              __p.__r_.__value_.__l.__size_ = v940;
                                                            }
                                                            else
                                                            {
                                                              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v947 - *(_BYTE *)v948;
                                                              v941 = &__p;
                                                              if (!v940)
                                                                goto LABEL_1297;
                                                            }
                                                            memmove(v941, v949, v940);
                                                            goto LABEL_1297;
                                                          }
                                                          v942 = sub_20E86A980(&v1134, (uint64_t)"error: factor ", 14);
                                                          sub_20F622A50((uint64_t)&__p);
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v943 = &__p;
                                                          else
                                                            v943 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v944 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                          else
                                                            v944 = __p.__r_.__value_.__l.__size_;
                                                          v945 = sub_20E86A980(v942, (uint64_t)v943, v944);
                                                          sub_20E86A980(v945, (uint64_t)" with ID ", 9);
                                                          v946 = (_QWORD *)std::ostream::operator<<();
                                                          sub_20E86A980(v946, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
                                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          {
                                                            operator delete(__p.__r_.__value_.__l.__data_);
                                                            v938 = 0;
                                                            v939 = v1139[16];
                                                            if ((v1139[16] & 0x10) != 0)
                                                              goto LABEL_1286;
                                                          }
                                                          else
                                                          {
                                                            v938 = 0;
                                                            v939 = v1139[16];
                                                            if ((v1139[16] & 0x10) != 0)
                                                              goto LABEL_1286;
                                                          }
LABEL_1276:
                                                          if ((v939 & 8) != 0)
                                                          {
                                                            v947 = v1136;
                                                            v948 = &v1135.__r_.__value_.__l.__size_;
                                                            goto LABEL_1289;
                                                          }
                                                          v940 = 0;
                                                          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
                                                          v941 = &__p;
LABEL_1297:
                                                          v941->__r_.__value_.__s.__data_[v940] = 0;
                                                          v1114 = __p;
                                                          v1115.__r_.__value_.__s.__data_[0] = v938;
                                                          v1133.i64[0] = v1090;
                                                          *(uint64_t *)((char *)v1133.i64 + *(_QWORD *)(v1090 - 24)) = v1089;
                                                          *(_QWORD *)&v1134 = v1088;
                                                          *((_QWORD *)&v1134 + 1) = MEMORY[0x24BEDB848] + 16;
                                                          if ((v1139[7] & 0x80000000) != 0)
                                                            operator delete((void *)v1138);
                                                          std::streambuf::~streambuf();
                                                          std::iostream::~basic_iostream();
                                                          MEMORY[0x212BC6290](&v1139[24]);
                                                          v952 = std::string::insert(&v1114, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
                                                          v953 = *(_OWORD *)&v952->__r_.__value_.__l.__data_;
                                                          v1107.__r_.__value_.__r.__words[2] = v952->__r_.__value_.__r.__words[2];
                                                          *(_OWORD *)&v1107.__r_.__value_.__l.__data_ = v953;
                                                          v952->__r_.__value_.__l.__size_ = 0;
                                                          v952->__r_.__value_.__r.__words[2] = 0;
                                                          v952->__r_.__value_.__r.__words[0] = 0;
                                                          v954 = std::string::append(&v1107, "').", 3uLL);
                                                          v955 = *(_OWORD *)&v954->__r_.__value_.__l.__data_;
                                                          v1109 = v954->__r_.__value_.__r.__words[2];
                                                          *(_OWORD *)v1108 = v955;
                                                          v954->__r_.__value_.__l.__size_ = 0;
                                                          v954->__r_.__value_.__r.__words[2] = 0;
                                                          v954->__r_.__value_.__r.__words[0] = 0;
                                                          if (v1109 >= 0)
                                                            v956 = v1108;
                                                          else
                                                            v956 = (void **)v1108[0];
                                                          if (v1109 >= 0)
                                                            v957 = HIBYTE(v1109);
                                                          else
                                                            v957 = (uint64_t)v1108[1];
                                                          v533 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 282, (uint64_t)"ret.second", 10, (uint64_t)v956, v957, (void (*)(void **))sub_21023DDB0);
LABEL_1306:
                                                          v958 = v533;
                                                          if (SHIBYTE(v1109) < 0)
                                                          {
                                                            operator delete(v1108[0]);
                                                            if ((SHIBYTE(v1107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                              goto LABEL_1308;
                                                          }
                                                          else if ((SHIBYTE(v1107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                          {
LABEL_1308:
                                                            if (SHIBYTE(v1114.__r_.__value_.__r.__words[2]) < 0)
                                                              goto LABEL_1313;
LABEL_1309:
                                                            if (v958)
                                                              goto LABEL_1428;
                                                            goto LABEL_1314;
                                                          }
                                                          operator delete(v1107.__r_.__value_.__l.__data_);
                                                          if (SHIBYTE(v1114.__r_.__value_.__r.__words[2]) < 0)
                                                          {
LABEL_1313:
                                                            operator delete(v1114.__r_.__value_.__l.__data_);
                                                            if (v958)
                                                              goto LABEL_1428;
                                                            goto LABEL_1314;
                                                          }
                                                          goto LABEL_1309;
                                                        }
                                                      }
                                                      v928 = 0x84BDA12F684BDA13 * (v922 >> 3);
                                                      do
                                                      {
                                                        v929 = v928 >> 1;
                                                        v930 = (unint64_t *)&v920[216 * (v928 >> 1)];
                                                        v932 = *v930;
                                                        v931 = (char *)(v930 + 27);
                                                        v928 += ~(v928 >> 1);
                                                        if (v932 < v1098)
                                                          v920 = v931;
                                                        else
                                                          v928 = v929;
                                                      }
                                                      while (v928);
                                                      if (v921 != v920 && *(_QWORD *)v920 == v1098)
                                                      {
                                                        v933 = sub_20E86A980(&v1134, (uint64_t)"error: factor ", 14);
                                                        sub_20F622A50((uint64_t)&__p);
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v934 = &__p;
                                                        else
                                                          v934 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v935 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                        else
                                                          v935 = __p.__r_.__value_.__l.__size_;
                                                        v936 = sub_20E86A980(v933, (uint64_t)v934, v935);
                                                        sub_20E86A980(v936, (uint64_t)" with the same ID ", 18);
                                                        v937 = (_QWORD *)std::ostream::operator<<();
                                                        sub_20E86A980(v937, (uint64_t)" already exists.\n", 17);
                                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          operator delete(__p.__r_.__value_.__l.__data_);
                                                        v594 = 0;
                                                      }
                                                      goto LABEL_1274;
                                                    }
                                                  }
                                                  v899 = v893 >> 4;
                                                  v892 = (_DWORD *)v890;
                                                  do
                                                  {
                                                    v900 = v899 >> 1;
                                                    v901 = &v892[4 * (v899 >> 1)];
                                                    v903 = *v901;
                                                    v902 = v901 + 4;
                                                    v899 += ~(v899 >> 1);
                                                    if (v903 < v17)
                                                      v892 = v902;
                                                    else
                                                      v899 = v900;
                                                  }
                                                  while (v899);
                                                  goto LABEL_1221;
                                                }
                                              }
                                              v869 = v863 >> 4;
                                              v862 = (_DWORD *)v860;
                                              do
                                              {
                                                v870 = v869 >> 1;
                                                v871 = &v862[4 * (v869 >> 1)];
                                                v873 = *v871;
                                                v872 = v871 + 4;
                                                v869 += ~(v869 >> 1);
                                                if (v873 < v89)
                                                  v862 = v872;
                                                else
                                                  v869 = v870;
                                              }
                                              while (v869);
                                              goto LABEL_1179;
                                            }
                                          }
                                          v839 = v833 >> 4;
                                          v832 = (_DWORD *)v830;
                                          do
                                          {
                                            v840 = v839 >> 1;
                                            v841 = &v832[4 * (v839 >> 1)];
                                            v843 = *v841;
                                            v842 = v841 + 4;
                                            v839 += ~(v839 >> 1);
                                            if (v843 < v68)
                                              v832 = v842;
                                            else
                                              v839 = v840;
                                          }
                                          while (v839);
                                          goto LABEL_1137;
                                        }
                                      }
                                      v809 = v803 >> 4;
                                      v802 = (_DWORD *)v800;
                                      do
                                      {
                                        v810 = v809 >> 1;
                                        v811 = &v802[4 * (v809 >> 1)];
                                        v813 = *v811;
                                        v812 = v811 + 4;
                                        v809 += ~(v809 >> 1);
                                        if (v813 < v89)
                                          v802 = v812;
                                        else
                                          v809 = v810;
                                      }
                                      while (v809);
                                      goto LABEL_1095;
                                    }
                                  }
                                  v779 = v773 >> 4;
                                  v772 = (_DWORD *)v770;
                                  do
                                  {
                                    v780 = v779 >> 1;
                                    v781 = &v772[4 * (v779 >> 1)];
                                    v783 = *v781;
                                    v782 = v781 + 4;
                                    v779 += ~(v779 >> 1);
                                    if (v783 < v68)
                                      v772 = v782;
                                    else
                                      v779 = v780;
                                  }
                                  while (v779);
                                  goto LABEL_1053;
                                }
                              }
                              v749 = v743 >> 4;
                              v742 = (_DWORD *)v740;
                              do
                              {
                                v750 = v749 >> 1;
                                v751 = &v742[4 * (v749 >> 1)];
                                v753 = *v751;
                                v752 = v751 + 4;
                                v749 += ~(v749 >> 1);
                                if (v753 < v89)
                                  v742 = v752;
                                else
                                  v749 = v750;
                              }
                              while (v749);
                              goto LABEL_1011;
                            }
                          }
                          v719 = v713 >> 4;
                          v712 = (_DWORD *)v710;
                          do
                          {
                            v720 = v719 >> 1;
                            v721 = &v712[4 * (v719 >> 1)];
                            v723 = *v721;
                            v722 = v721 + 4;
                            v719 += ~(v719 >> 1);
                            if (v723 < v68)
                              v712 = v722;
                            else
                              v719 = v720;
                          }
                          while (v719);
                          goto LABEL_969;
                        }
                      }
                      v689 = v683 >> 4;
                      v682 = (_DWORD *)v680;
                      do
                      {
                        v690 = v689 >> 1;
                        v691 = &v682[4 * (v689 >> 1)];
                        v693 = *v691;
                        v692 = v691 + 4;
                        v689 += ~(v689 >> 1);
                        if (v693 < v90)
                          v682 = v692;
                        else
                          v689 = v690;
                      }
                      while (v689);
                      goto LABEL_927;
                    }
                  }
                  v659 = v653 >> 4;
                  v652 = (_DWORD *)v650;
                  do
                  {
                    v660 = v659 >> 1;
                    v661 = &v652[4 * (v659 >> 1)];
                    v663 = *v661;
                    v662 = v661 + 4;
                    v659 += ~(v659 >> 1);
                    if (v663 < v67)
                      v652 = v662;
                    else
                      v659 = v660;
                  }
                  while (v659);
                  goto LABEL_885;
                }
              }
              v599 = v598 >> 4;
              v597 = (_DWORD *)v595;
              do
              {
                v600 = v599 >> 1;
                v601 = &v597[4 * (v599 >> 1)];
                v603 = *v601;
                v602 = v601 + 4;
                v599 += ~(v599 >> 1);
                if (v603 < v68)
                  v597 = v602;
                else
                  v599 = v600;
              }
              while (v599);
              goto LABEL_800;
            }
LABEL_1314:
            ++v1098;
            v69 = v1106;
            v12 = v1092;
            v66 = v1093;
            v16 = v1094;
LABEL_1315:
            v1106 = v69 + 1;
            if ((uint64_t *)(v69 + 1) != v12)
            {
              v1103 += 8;
              if (v1103 != v16)
              {
                v20 = (float32x2_t *)sub_20F6236F0(v1102);
                if (v20)
                  continue;
              }
            }
            v3 = v1081;
            a2 = v1082;
            v4 = v1086;
            goto LABEL_15;
          }
          v1073 = v103 - v101;
          v1065 = 0x84BDA12F684BDA13 * ((v103 - v101) >> 3);
          if ((unint64_t)v102 < *v1077)
          {
            if (v103 == v102)
            {
              *(_QWORD *)v102 = v1098;
              v1010 = &v101[8 * ((v103 - v101) >> 3)];
              *((_QWORD *)v1010 + 1) = v1098;
              *((_OWORD *)v1010 + 1) = v1134;
              v1011 = *(_OWORD *)&v1135.__r_.__value_.__l.__data_;
              *((_QWORD *)v1010 + 6) = *((_QWORD *)&v1135.__r_.__value_.__l + 2);
              *((_OWORD *)v1010 + 2) = v1011;
              v1013 = *(_OWORD *)v1139;
              v1012 = *(_OWORD *)&v1139[16];
              v1014 = *(_QWORD *)&v1139[32];
              *(_OWORD *)(v1010 + 88) = v1138;
              *((_QWORD *)v1010 + 17) = v1014;
              *(_OWORD *)(v1010 + 120) = v1012;
              *(_OWORD *)(v1010 + 104) = v1013;
              v1015 = v1136;
              *(_OWORD *)(v1010 + 72) = v1137;
              *(_OWORD *)(v1010 + 56) = v1015;
              *((_OWORD *)v1010 + 9) = v1140;
              *((_OWORD *)v1010 + 10) = v1141;
              v1016 = v1142;
              v1010[184] = v1143;
              *((_QWORD *)v1010 + 22) = v1016;
              *((_QWORD *)v1010 + 24) = 0;
              *((_QWORD *)v1010 + 25) = 0;
              v1144 = 0uLL;
              v1010[208] = 0;
              a1[415].i64[0] = (uint64_t)(v102 + 216);
            }
            else
            {
              *(_OWORD *)v1108 = *(_OWORD *)&v1114.__r_.__value_.__r.__words[1];
              __p = v1115;
              v1061 = v1137;
              v1063 = v1136;
              v1057 = *(_OWORD *)v1139;
              v1059 = v1138;
              v1056 = *(_OWORD *)&v1139[16];
              v1055 = *(_QWORD *)&v1139[32];
              *(_OWORD *)&v1107.__r_.__value_.__l.__data_ = v1120;
              v1132 = v1121;
              v1131 = v1123;
              v1130 = v1122;
              v259 = v102;
              v260 = v102 - 216;
              v1144 = 0uLL;
              v1069 = v102 - 216;
              if ((unint64_t)v102 >= 0xD8)
              {
                do
                {
                  *(_QWORD *)v259 = *(_QWORD *)v260;
                  *((_QWORD *)v259 + 1) = *((_QWORD *)v260 + 1);
                  *((_OWORD *)v259 + 1) = *((_OWORD *)v260 + 1);
                  v261 = *((_OWORD *)v260 + 2);
                  *((_QWORD *)v259 + 6) = *((_QWORD *)v260 + 6);
                  *((_OWORD *)v259 + 2) = v261;
                  v262 = *(_OWORD *)(v260 + 104);
                  v263 = *(_OWORD *)(v260 + 120);
                  v264 = *((_QWORD *)v260 + 17);
                  *(_OWORD *)(v259 + 88) = *(_OWORD *)(v260 + 88);
                  *((_QWORD *)v259 + 17) = v264;
                  *(_OWORD *)(v259 + 120) = v263;
                  *(_OWORD *)(v259 + 104) = v262;
                  v265 = *(_OWORD *)(v260 + 56);
                  *(_OWORD *)(v259 + 72) = *(_OWORD *)(v260 + 72);
                  *(_OWORD *)(v259 + 56) = v265;
                  *((_OWORD *)v259 + 9) = *((_OWORD *)v260 + 9);
                  *((_OWORD *)v259 + 10) = *((_OWORD *)v260 + 10);
                  v266 = *((_QWORD *)v260 + 22);
                  v259[184] = v260[184];
                  *((_QWORD *)v259 + 22) = v266;
                  *((_OWORD *)v259 + 12) = *((_OWORD *)v260 + 12);
                  *((_QWORD *)v260 + 24) = 0;
                  *((_QWORD *)v260 + 25) = 0;
                  v259[208] = v260[208];
                  v259 += 216;
                  v260 += 216;
                }
                while (v260 < v102);
              }
              a1[415].i64[0] = (uint64_t)v259;
              if (v102 != v103 + 216)
              {
                v267 = v102 - 216;
                v1074 = v102;
                do
                {
                  v993 = *((_QWORD *)v267 - 27);
                  v267 -= 216;
                  *((_QWORD *)v1074 - 27) = v993;
                  v994 = v1074 - 216;
                  *((_QWORD *)v994 + 1) = *((_QWORD *)v267 + 1);
                  *((_OWORD *)v994 + 1) = *((_OWORD *)v267 + 1);
                  v995 = *((_OWORD *)v267 + 2);
                  *((_QWORD *)v994 + 6) = *((_QWORD *)v267 + 6);
                  *((_OWORD *)v994 + 2) = v995;
                  *((_QWORD *)v994 + 7) = *((_QWORD *)v267 + 7);
                  *((_QWORD *)v994 + 8) = *((_QWORD *)v267 + 8);
                  *((_QWORD *)v994 + 9) = *((_QWORD *)v267 + 9);
                  *((_QWORD *)v994 + 10) = *((_QWORD *)v267 + 10);
                  *((_QWORD *)v994 + 11) = *((_QWORD *)v267 + 11);
                  *((_QWORD *)v994 + 12) = *((_QWORD *)v267 + 12);
                  *((_QWORD *)v994 + 13) = *((_QWORD *)v267 + 13);
                  *((_QWORD *)v994 + 14) = *((_QWORD *)v267 + 14);
                  *((_QWORD *)v994 + 15) = *((_QWORD *)v267 + 15);
                  *((_QWORD *)v994 + 16) = *((_QWORD *)v267 + 16);
                  *((_QWORD *)v994 + 17) = *((_QWORD *)v267 + 17);
                  *((_OWORD *)v994 + 9) = *((_OWORD *)v267 + 9);
                  *((_OWORD *)v994 + 10) = *((_OWORD *)v267 + 10);
                  v996 = *((_QWORD *)v267 + 22);
                  v994[184] = v267[184];
                  *((_QWORD *)v994 + 22) = v996;
                  v997 = *((_OWORD *)v267 + 12);
                  *((_QWORD *)v267 + 24) = 0;
                  *((_QWORD *)v267 + 25) = 0;
                  v998 = (std::__shared_weak_count *)*((_QWORD *)v1074 - 2);
                  v1074 -= 216;
                  *((_OWORD *)v994 + 12) = v997;
                  if (v998)
                  {
                    v999 = v998;
                    v1000 = (unint64_t *)&v998->__shared_owners_;
                    do
                      v1001 = __ldaxr(v1000);
                    while (__stlxr(v1001 - 1, v1000));
                    if (!v1001)
                    {
                      v1067 = v999;
                      ((void (*)(std::__shared_weak_count *))v999->__on_zero_shared)(v999);
                      std::__shared_weak_count::__release_weak(v1067);
                    }
                  }
                  *(v102 - 8) = *(v1069 - 8);
                  v102 = v1074;
                  v1069 = v267;
                }
                while (v267 != v1095);
              }
              *(int64x2_t *)v1095 = vdupq_n_s64(v1098);
              v1004 = &v101[216 * v1065];
              *((_OWORD *)v1004 + 1) = *(_OWORD *)v1108;
              *(std::string *)(v1004 + 32) = __p;
              *(_OWORD *)(v1004 + 56) = v1063;
              *(_OWORD *)(v1004 + 72) = v1061;
              *(_OWORD *)(v1004 + 88) = v1059;
              *(_OWORD *)(v1004 + 104) = v1057;
              *(_OWORD *)(v1004 + 120) = v1056;
              *((_QWORD *)v1004 + 17) = v1055;
              v1005 = v1132;
              *((_OWORD *)v1004 + 9) = *(_OWORD *)&v1107.__r_.__value_.__l.__data_;
              *((_OWORD *)v1004 + 10) = v1005;
              v1006 = v1130;
              v1004[184] = v1131;
              *((_QWORD *)v1004 + 22) = v1006;
              v1007 = (std::__shared_weak_count *)*((_QWORD *)v1004 + 25);
              *((_QWORD *)v1004 + 24) = 0;
              *((_QWORD *)v1004 + 25) = 0;
              if (v1007)
              {
                v1008 = (unint64_t *)&v1007->__shared_owners_;
                do
                  v1009 = __ldaxr(v1008);
                while (__stlxr(v1009 - 1, v1008));
                if (!v1009)
                {
                  ((void (*)(std::__shared_weak_count *))v1007->__on_zero_shared)(v1007);
                  std::__shared_weak_count::__release_weak(v1007);
                }
              }
              v101[216 * v1065 + 208] = 0;
            }
LABEL_1413:
            v1049 = (std::__shared_weak_count *)*((_QWORD *)&v1144 + 1);
            if (*((_QWORD *)&v1144 + 1))
            {
              v1050 = (unint64_t *)(*((_QWORD *)&v1144 + 1) + 8);
              do
                v1051 = __ldaxr(v1050);
              while (__stlxr(v1051 - 1, v1050));
              if (!v1051)
              {
                ((void (*)(std::__shared_weak_count *))v1049->__on_zero_shared)(v1049);
                std::__shared_weak_count::__release_weak(v1049);
              }
            }
            goto LABEL_1418;
          }
          v1002 = 1 - 0x7B425ED097B425EDLL * ((v102 - v101) >> 3);
          if (v1002 > 0x12F684BDA12F684)
            sub_20E867F44();
          if (0x97B425ED097B426 * ((*v1077 - (uint64_t)v101) >> 3) > v1002)
            v1002 = 0x97B425ED097B426 * ((*v1077 - (uint64_t)v101) >> 3);
          if (0x84BDA12F684BDA13 * ((*v1077 - (uint64_t)v101) >> 3) >= 0x97B425ED097B42)
            v1003 = 0x12F684BDA12F684;
          else
            v1003 = v1002;
          v1129 = (int64x2_t *)v1077;
          if (v1003)
          {
            if (v1003 > 0x12F684BDA12F684)
              sub_20E877A38();
            v1068 = (std::__shared_weak_count *)operator new(216 * v1003);
          }
          else
          {
            v1068 = 0;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1068;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v1068 + 9 * v1065);
          v1017 = __p.__r_.__value_.__l.__size_;
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          v1128 = (std::string::size_type)&v1068[9 * v1003];
          *(int64x2_t *)v1072 = vdupq_n_s64(v1098);
          if (v1065 == v1003)
          {
            if (v1073 >= 1)
            {
              v1018 = v1065 + 2;
              if (v1065 >= -1)
                v1018 = v1065 + 1;
              v1019 = v1018 >> 1;
              v1020 = sub_20F5B6E44((uint64_t)(v1068 + 9 * v1065), (uint64_t)(v1068 + 9 * v1065), __p.__r_.__value_.__l.__size_ - 216 * (v1018 >> 1));
              v1017 = __p.__r_.__value_.__l.__size_ - 216 * v1019;
              __p.__r_.__value_.__l.__size_ = v1017;
              *(int64x2_t *)v1072 = v1133;
              goto LABEL_1395;
            }
            if (v101 == v1095)
              v1021 = 1;
            else
              v1021 = 2 * v1065;
            if (v1021 > 0x12F684BDA12F684)
              sub_20E877A38();
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(216 * v1021);
            v1017 = __p.__r_.__value_.__r.__words[0] + 216 * (v1021 >> 2);
            __p.__r_.__value_.__l.__size_ = v1017;
            v1128 = __p.__r_.__value_.__r.__words[0] + 216 * v1021;
            if (v1068)
              operator delete(v1068);
          }
          v1020 = v1017;
LABEL_1395:
          v1022 = v1134;
          *(_OWORD *)v1020 = *(_OWORD *)v1072;
          *(_OWORD *)(v1020 + 16) = v1022;
          *(std::string *)(v1020 + 32) = v1135;
          v1023 = *(_OWORD *)v1139;
          *(_OWORD *)(v1020 + 88) = v1138;
          *(_OWORD *)(v1020 + 104) = v1023;
          *(_OWORD *)(v1020 + 120) = *(_OWORD *)&v1139[16];
          v1024 = v1137;
          *(_OWORD *)(v1020 + 56) = v1136;
          *(_QWORD *)(v1020 + 136) = *(_QWORD *)&v1139[32];
          *(_OWORD *)(v1020 + 72) = v1024;
          *(_OWORD *)(v1020 + 144) = v1140;
          *(_OWORD *)(v1020 + 160) = v1141;
          v1025 = v1142;
          *(_BYTE *)(v1020 + 184) = v1143;
          *(_QWORD *)(v1020 + 176) = v1025;
          *(_OWORD *)(v1020 + 192) = v1144;
          v1144 = 0uLL;
          *(_BYTE *)(v1020 + 208) = v1145;
          v1026 = v1020 + 216;
          __p.__r_.__value_.__r.__words[2] = v1020 + 216;
          v1027 = (char *)a1[414].i64[1];
          if (v1027 != v1095)
          {
            v1028 = 0;
            do
            {
              v1029 = v1017 + v1028;
              v1030 = &v1095[v1028];
              *(_QWORD *)(v1029 - 216) = *(_QWORD *)&v1095[v1028 - 216];
              *(_QWORD *)(v1029 - 208) = *(_QWORD *)&v1095[v1028 - 208];
              *(_OWORD *)(v1029 - 200) = *(_OWORD *)&v1095[v1028 - 200];
              v1031 = *(_OWORD *)&v1095[v1028 - 184];
              *(_QWORD *)(v1029 - 168) = *(_QWORD *)&v1095[v1028 - 168];
              *(_OWORD *)(v1029 - 184) = v1031;
              v1033 = *(_OWORD *)&v1095[v1028 - 112];
              v1032 = *(_OWORD *)&v1095[v1028 - 96];
              v1034 = *(_OWORD *)&v1095[v1028 - 128];
              *(_QWORD *)(v1029 - 80) = *(_QWORD *)&v1095[v1028 - 80];
              *(_OWORD *)(v1029 - 112) = v1033;
              *(_OWORD *)(v1029 - 96) = v1032;
              *(_OWORD *)(v1029 - 128) = v1034;
              v1035 = *(_OWORD *)&v1095[v1028 - 144];
              *(_OWORD *)(v1029 - 160) = *(_OWORD *)&v1095[v1028 - 160];
              *(_OWORD *)(v1029 - 144) = v1035;
              *(_OWORD *)(v1029 - 72) = *(_OWORD *)&v1095[v1028 - 72];
              *(_OWORD *)(v1029 - 56) = *(_OWORD *)&v1095[v1028 - 56];
              v1036 = *(_QWORD *)&v1095[v1028 - 40];
              *(_BYTE *)(v1029 - 32) = v1095[v1028 - 32];
              *(_QWORD *)(v1029 - 40) = v1036;
              *(_OWORD *)(v1029 - 24) = *(_OWORD *)&v1095[v1028 - 24];
              *((_QWORD *)v1030 - 3) = 0;
              *((_QWORD *)v1030 - 2) = 0;
              *(_BYTE *)(v1029 - 8) = v1095[v1028 - 8];
              v1028 -= 216;
            }
            while (&v1095[v1028] != v1027);
            v1017 += v1028;
          }
          v1037 = (char *)a1[415].i64[0];
          if (v1037 != v1095)
          {
            do
            {
              *(_QWORD *)v1026 = *(_QWORD *)v1095;
              *(_QWORD *)(v1026 + 8) = *((_QWORD *)v1095 + 1);
              *(_OWORD *)(v1026 + 16) = *((_OWORD *)v1095 + 1);
              v1038 = *((_OWORD *)v1095 + 2);
              *(_QWORD *)(v1026 + 48) = *((_QWORD *)v1095 + 6);
              *(_OWORD *)(v1026 + 32) = v1038;
              v1039 = *(_OWORD *)(v1095 + 104);
              v1040 = *(_OWORD *)(v1095 + 120);
              v1041 = *((_QWORD *)v1095 + 17);
              *(_OWORD *)(v1026 + 88) = *(_OWORD *)(v1095 + 88);
              *(_QWORD *)(v1026 + 136) = v1041;
              *(_OWORD *)(v1026 + 120) = v1040;
              *(_OWORD *)(v1026 + 104) = v1039;
              v1042 = *(_OWORD *)(v1095 + 56);
              *(_OWORD *)(v1026 + 72) = *(_OWORD *)(v1095 + 72);
              *(_OWORD *)(v1026 + 56) = v1042;
              *(_OWORD *)(v1026 + 144) = *((_OWORD *)v1095 + 9);
              *(_OWORD *)(v1026 + 160) = *((_OWORD *)v1095 + 10);
              v1043 = *((_QWORD *)v1095 + 22);
              *(_BYTE *)(v1026 + 184) = v1095[184];
              *(_QWORD *)(v1026 + 176) = v1043;
              *(_OWORD *)(v1026 + 192) = *((_OWORD *)v1095 + 12);
              *((_QWORD *)v1095 + 24) = 0;
              *((_QWORD *)v1095 + 25) = 0;
              *(_BYTE *)(v1026 + 208) = v1095[208];
              v1026 += 216;
              v1095 += 216;
            }
            while (v1095 != v1037);
            v1095 = (char *)a1[415].i64[0];
          }
          v1044 = a1[414].u64[1];
          a1[414].i64[1] = v1017;
          a1[415].i64[0] = v1026;
          v1045 = a1[415].u64[1];
          a1[415].i64[1] = v1128;
          v1128 = v1045;
          __p.__r_.__value_.__l.__size_ = v1044;
          __p.__r_.__value_.__r.__words[0] = v1044;
          if (v1095 != (char *)v1044)
          {
            do
            {
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v1095 - 216);
              v1046 = (std::__shared_weak_count *)*((_QWORD *)v1095 - 2);
              if (v1046)
              {
                v1047 = (unint64_t *)&v1046->__shared_owners_;
                do
                  v1048 = __ldaxr(v1047);
                while (__stlxr(v1048 - 1, v1047));
                if (!v1048)
                {
                  ((void (*)(std::__shared_weak_count *))v1046->__on_zero_shared)(v1046);
                  std::__shared_weak_count::__release_weak(v1046);
                }
              }
              v1095 = (char *)__p.__r_.__value_.__r.__words[2];
            }
            while (__p.__r_.__value_.__r.__words[2] != v1044);
            v1095 = (char *)__p.__r_.__value_.__r.__words[0];
          }
          if (v1095)
            operator delete(v1095);
          goto LABEL_1413;
        }
      }
    }
  }
}

void sub_20FC2E88C(_Unwind_Exception *a1)
{
  sub_20FC27320((uint64_t)&STACK[0x3A0]);
  sub_20F8AEF04((uint64_t)&STACK[0x3F0]);
  sub_20F8AEF6C((uint64_t)&STACK[0x2D0]);
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  sub_20E86665C((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_20FC2E914(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x3F0]);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC2EA9C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(__int128 **)(a1 + 968);
  v5 = *(__int128 **)(a1 + 976);
  if (v5 == v4)
  {
    v4 = *(__int128 **)(a1 + 976);
  }
  else
  {
    v6 = v5 - v4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v5 != v4 && v3 == *(_DWORD *)v4)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  *(_OWORD *)&v38[4] = *(_OWORD *)a2;
  *(_QWORD *)&v38[20] = *((_QWORD *)a2 + 2);
  v13 = v12 == 0;
  v14 = sub_20F398160(a1 + 992);
  *(_DWORD *)v14 = -1;
  *(_BYTE *)(v14 + 4) = 1;
  *(_DWORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 12) = *(_OWORD *)v38;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)&v38[12];
  v36 = v3;
  v37 = v14;
  sub_20F397EF8((char **)(a1 + 968), v4, (uint64_t)&v36);
  if (!v13)
  {
    v15 = *(char **)(a1 + 2400);
    v16 = *(_QWORD *)(a1 + 2408);
    if ((unint64_t)v15 < v16)
    {
      *(_DWORD *)v15 = v3;
      v17 = (uint64_t)(v15 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 2400) = v17;
      goto LABEL_35;
    }
    v18 = *(char **)(a1 + 2392);
    v19 = (v15 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = (unsigned int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v3;
      v17 = (uint64_t)(v24 + 1);
      v26 = v15 - v18;
      if (v15 == v18)
        goto LABEL_32;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      v17 = 4 * v19 + 4;
      v26 = v15 - v18;
      if (v15 == v18)
      {
LABEL_32:
        *(_QWORD *)(a1 + 2392) = v24;
        *(_QWORD *)(a1 + 2400) = v17;
        *(_QWORD *)(a1 + 2408) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_34;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_41;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v15[-v29];
    v24 = (unsigned int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v15 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v15 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v35 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v24 = v35;
      }
      while (v15 != v18);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 1618) = 0;
  *(_BYTE *)(a1 + 1616) = 0;
  return 1;
}

char *sub_20FC2ED2C(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DBFA0;
  strcpy(v2, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactorMono<double, true, Depth::Regular>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 77, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    if (result)
    {
      v10 = result - (_BYTE *)v9;
      if (result - (_BYTE *)v9 != -1)
      {
        if ((char)v4 < 0)
        {
          if (v6 >= v10)
          {
            *(_QWORD *)(a1 + 8) = v10;
            goto LABEL_15;
          }
        }
        else if (v10 <= v4)
        {
          *(_BYTE *)(a1 + 23) = v10 & 0x7F;
          v7 = (_QWORD *)a1;
LABEL_15:
          *((_BYTE *)v7 + v10) = 0;
          result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
          v4 = *(unsigned __int8 *)(a1 + 23);
          v7 = *(_QWORD **)a1;
          v6 = *(_QWORD *)(a1 + 8);
          v5 = *(_BYTE *)(a1 + 23);
          goto LABEL_16;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_16:
  if (v5 < 0)
  {
    v11 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v11 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v12 = &v11[v6];
    v13 = v6;
    result = v11;
    do
    {
      result = (char *)memchr(result, 99, v13 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v12 && result == v11)
        {
          v15 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
        }
        break;
      }
      ++result;
      v13 = v12 - result;
    }
    while (v12 - result >= 5);
    if (v6 >= 7)
    {
      result = v11;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v12 && result == v11)
          {
            v15 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
          }
          return result;
        }
        ++result;
        v6 = v12 - result;
      }
      while (v12 - result >= 7);
    }
  }
  return result;
}

void sub_20FC2EF2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FC2EF4C(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, uint64_t a10)
{
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  char *v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  char *v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  char *v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  char *v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  char *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t v101;
  std::__shared_count *v102;
  std::__shared_weak_count *v103;
  unsigned int v104;
  BOOL v105;
  uint64_t shared_owners;
  unint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  char v119;
  std::__shared_weak_count *size;
  unint64_t *v121;
  unint64_t v122;
  int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  char *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  unsigned int v133;
  _QWORD *v134;
  std::string *p_p;
  std::string::size_type v136;
  _QWORD *v137;
  _QWORD *v138;
  int v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int *v146;
  char *v147;
  unsigned int v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  char *v152;
  unsigned int v153;
  uint64_t v154;
  _QWORD *v155;
  std::string *v156;
  std::string::size_type v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  const char *v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  std::string *v171;
  std::string::size_type v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int *v177;
  char *v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int *v182;
  char *v183;
  unsigned int v184;
  uint64_t v185;
  _QWORD *v186;
  std::string *v187;
  std::string::size_type v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  const char *v193;
  uint64_t v194;
  _QWORD *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  std::string *v201;
  std::string::size_type v202;
  _QWORD *v203;
  _QWORD *v204;
  unint64_t v205;
  unint64_t v206;
  unsigned int *v207;
  char *v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int *v212;
  char *v213;
  unsigned int v214;
  uint64_t v215;
  _QWORD *v216;
  std::string *v217;
  std::string::size_type v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  const char *v223;
  uint64_t v224;
  _QWORD *v225;
  int v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  _QWORD *v231;
  std::string *v232;
  std::string::size_type v233;
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int *v238;
  char *v239;
  unsigned int v240;
  unint64_t v241;
  unint64_t v242;
  unsigned int *v243;
  char *v244;
  unsigned int v245;
  uint64_t v246;
  _QWORD *v247;
  std::string *v248;
  std::string::size_type v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  const char *v254;
  uint64_t v255;
  _QWORD *v256;
  int v257;
  char *v258;
  char *v259;
  char *v260;
  uint64_t v261;
  _QWORD *v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  _QWORD *v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int *v269;
  char *v270;
  unsigned int v271;
  unint64_t v272;
  unint64_t v273;
  unsigned int *v274;
  char *v275;
  unsigned int v276;
  uint64_t v277;
  _QWORD *v278;
  std::string *v279;
  std::string::size_type v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  const char *v285;
  uint64_t v286;
  _QWORD *v287;
  char *v288;
  char *v289;
  char *v290;
  uint64_t v291;
  _QWORD *v292;
  std::string *v293;
  std::string::size_type v294;
  _QWORD *v295;
  _QWORD *v296;
  unint64_t v297;
  unint64_t v298;
  unsigned int *v299;
  char *v300;
  unsigned int v301;
  unint64_t v302;
  unint64_t v303;
  unsigned int *v304;
  char *v305;
  unsigned int v306;
  uint64_t v307;
  _QWORD *v308;
  std::string *v309;
  std::string::size_type v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  const char *v315;
  uint64_t v316;
  _QWORD *v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  _QWORD *v322;
  std::string *v323;
  std::string::size_type v324;
  _QWORD *v325;
  _QWORD *v326;
  unint64_t v327;
  unint64_t v328;
  unsigned int *v329;
  char *v330;
  unsigned int v331;
  unint64_t v332;
  unint64_t v333;
  unsigned int *v334;
  char *v335;
  unsigned int v336;
  uint64_t v337;
  _QWORD *v338;
  std::string *v339;
  std::string::size_type v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  const char *v345;
  uint64_t v346;
  _QWORD *v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  _QWORD *v352;
  std::string *v353;
  std::string::size_type v354;
  _QWORD *v355;
  _QWORD *v356;
  unint64_t v357;
  unint64_t v358;
  unsigned int *v359;
  char *v360;
  unsigned int v361;
  unint64_t v362;
  unint64_t v363;
  unsigned int *v364;
  char *v365;
  unsigned int v366;
  uint64_t v367;
  _QWORD *v368;
  std::string *v369;
  std::string::size_type v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  const char *v375;
  uint64_t v376;
  _QWORD *v377;
  char *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  _QWORD *v382;
  std::string *v383;
  std::string::size_type v384;
  _QWORD *v385;
  _QWORD *v386;
  unint64_t v387;
  unint64_t v388;
  unsigned int *v389;
  char *v390;
  unsigned int v391;
  unint64_t v392;
  unint64_t v393;
  unsigned int *v394;
  char *v395;
  unsigned int v396;
  uint64_t v397;
  _QWORD *v398;
  std::string *v399;
  std::string::size_type v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  _QWORD *v404;
  const char *v405;
  uint64_t v406;
  _QWORD *v407;
  int v408;
  char *v409;
  char *v410;
  char *v411;
  uint64_t v412;
  _QWORD *v413;
  std::string *v414;
  std::string::size_type v415;
  _QWORD *v416;
  _QWORD *v417;
  unint64_t v418;
  unint64_t v419;
  unsigned int *v420;
  char *v421;
  unsigned int v422;
  unint64_t v423;
  unint64_t v424;
  unsigned int *v425;
  char *v426;
  unsigned int v427;
  uint64_t v428;
  _QWORD *v429;
  std::string *v430;
  std::string::size_type v431;
  _QWORD *v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  const char *v436;
  uint64_t v437;
  _QWORD *v438;
  char *v439;
  char *v440;
  char *v441;
  uint64_t v442;
  _QWORD *v443;
  std::string *v444;
  std::string::size_type v445;
  _QWORD *v446;
  _QWORD *v447;
  unint64_t v448;
  unint64_t v449;
  unsigned int *v450;
  char *v451;
  unsigned int v452;
  unint64_t v453;
  unint64_t v454;
  unsigned int *v455;
  char *v456;
  unsigned int v457;
  int v458;
  uint64_t v459;
  _QWORD *v460;
  std::string *v461;
  std::string::size_type v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  const char *v467;
  uint64_t v468;
  _QWORD *v469;
  char *v470;
  char *v471;
  uint64_t v472;
  _QWORD *v473;
  std::string *v474;
  std::string::size_type v475;
  _QWORD *v476;
  _QWORD *v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t *v480;
  char *v481;
  unint64_t v482;
  _QWORD *v483;
  std::string *v484;
  std::string::size_type v485;
  _QWORD *v486;
  _QWORD *v487;
  BOOL v488;
  char v489;
  std::string::size_type v490;
  std::string *v491;
  _QWORD *v492;
  std::string *v493;
  std::string::size_type v494;
  _QWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  const void *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  std::string *v502;
  __int128 v503;
  std::string *v504;
  __int128 v505;
  void **v506;
  uint64_t v507;
  _BOOL4 v508;
  unint64_t v509;
  __int128 v510;
  __int128 v511;
  unint64_t v512;
  __int128 v513;
  std::__shared_weak_count *v514;
  std::__shared_weak_count *v515;
  unint64_t *p_shared_owners;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  char *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  unint64_t *v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  unint64_t v533;
  unint64_t v534;
  std::string::size_type v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  char *v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t *v546;
  uint64_t v547;
  std::string::size_type v548;
  char *v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  unint64_t v556;
  unint64_t *v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  unint64_t v564;
  std::string::size_type v565;
  char *v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  unint64_t *v570;
  unint64_t v571;
  uint64_t *v572;
  unint64_t v573;
  unint64_t v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  unint64_t v580;
  unint64_t v581;
  int64x2_t v582;
  uint64_t v583;
  std::__shared_weak_count *v584;
  std::__shared_weak_count *v585;
  unint64_t v586;
  int v587;
  int v588;
  char *v589;
  char *v590;
  unint64_t *v591;
  std::string v592;
  uint64_t v593;
  std::__shared_weak_count *v594;
  _BYTE v595[32];
  __int128 v596;
  double v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  char v607;
  uint64_t v608;
  std::__shared_weak_count *v609;
  char v610;
  std::string __p;
  char *v612;
  uint64_t v613;
  unint64_t v614;
  char v615;
  void *v616[2];
  double v617;
  int64x2_t v618;
  __int128 v619;
  unint64_t v620;
  __int128 v621;
  double v622;
  __int128 v623;
  void *v624[2];
  __int128 v625;
  __int128 v626;
  __int128 v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  unint64_t v631;
  char v632;
  __int128 v633;
  char v634;

  v15 = a10;
  v16 = a8;
  v593 = 0;
  v594 = 0;
  *(_OWORD *)&v592.__r_.__value_.__l.__data_ = 0uLL;
  v17 = *(unint64_t **)(a10 + 1824);
  v18 = *(unint64_t **)(a10 + 1832);
  if (v17 == v18)
  {
    v19 = *(unint64_t **)(a10 + 1824);
  }
  else
  {
    v19 = *(unint64_t **)(a10 + 1832);
    if (*(v18 - 26) >= a8)
    {
      v20 = 0x4EC4EC4EC4EC4EC5 * (((char *)v18 - (char *)v17) >> 4);
      v21 = *(unint64_t **)(a10 + 1824);
      do
      {
        v22 = v20 >> 1;
        v23 = &v21[26 * (v20 >> 1)];
        v25 = *v23;
        v24 = v23 + 26;
        v20 += ~(v20 >> 1);
        if (v25 < a8)
          v21 = v24;
        else
          v20 = v22;
      }
      while (v20);
      v19 = *(unint64_t **)(a10 + 1832);
      if (v21 != v18)
      {
        v19 = v21;
        if (*v21 == a8)
        {
LABEL_157:
          v123 = 1;
          v124 = v594;
          if (!v594)
            goto LABEL_163;
          goto LABEL_160;
        }
      }
    }
  }
  *(_QWORD *)v595 = a8;
  *(_OWORD *)&v595[8] = *(_OWORD *)a7;
  *(_QWORD *)&v595[24] = *(_QWORD *)(a7 + 16);
  *(_QWORD *)&v596 = 0;
  *((_QWORD *)&v596 + 1) = a6;
  v597 = a9;
  v598 = 0u;
  v599 = 0u;
  v600 = 0u;
  v601 = 0u;
  v602 = 0u;
  v608 = 0;
  v609 = 0;
  v603 = 0;
  v606 = 0xBFF0000000000000;
  v607 = 0;
  v610 = 0;
  v26 = *(char **)(a10 + 528);
  v27 = *(char **)(a10 + 536);
  v28 = v27 - v26;
  if (v27 == v26)
    goto LABEL_151;
  v29 = v28 >> 4;
  v30 = *(char **)(a10 + 528);
  v31 = v28 >> 4;
  do
  {
    v32 = v31 >> 1;
    v33 = (unsigned int *)&v30[16 * (v31 >> 1)];
    v35 = *v33;
    v34 = (char *)(v33 + 4);
    v31 += ~(v31 >> 1);
    if (v35 < a2)
      v30 = v34;
    else
      v31 = v32;
  }
  while (v31);
  if (v30 == v27 || *(_DWORD *)v30 != a2)
  {
LABEL_151:
    v119 = 1;
    size = (std::__shared_weak_count *)v592.__r_.__value_.__l.__size_;
    if (!v592.__r_.__value_.__l.__size_)
      goto LABEL_156;
    goto LABEL_152;
  }
  v36 = *((_QWORD *)v30 + 1);
  *(_QWORD *)&v598 = v36;
  ++*(_DWORD *)(*((_QWORD *)v30 + 1) + 8);
  do
  {
    v37 = v29 >> 1;
    v38 = (unsigned int *)&v26[16 * (v29 >> 1)];
    v40 = *v38;
    v39 = (char *)(v38 + 4);
    v29 += ~(v29 >> 1);
    if (v40 < a4)
      v26 = v39;
    else
      v29 = v37;
  }
  while (v29);
  if (v26 == v27 || *(_DWORD *)v26 != a4)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    v56 = 0;
    v50 = 0;
    v41 = 0;
LABEL_131:
    if (v36)
      --*(_DWORD *)(v36 + 8);
    if (v41)
      --*(_DWORD *)(v41 + 8);
    if (v50)
      --*(_DWORD *)(v50 + 8);
    if (v56)
      --*(_DWORD *)(v56 + 8);
    if (v65)
      --*(_DWORD *)(v65 + 8);
    if (v71)
      --*(_DWORD *)(v71 + 8);
    if (v79)
      --*(_DWORD *)(v79 + 8);
    if (v85)
      --*(_DWORD *)(v85 + 8);
    if (v93)
      --*(_DWORD *)(v93 + 8);
    if (v99)
      --*(_DWORD *)(v99 + 8);
    goto LABEL_151;
  }
  v41 = *((_QWORD *)v26 + 1);
  *((_QWORD *)&v598 + 1) = v41;
  ++*(_DWORD *)(*((_QWORD *)v26 + 1) + 8);
  v43 = *(char **)(a10 + 336);
  v42 = *(char **)(a10 + 344);
  v44 = v43;
  if (v42 != v43)
  {
    v45 = (v42 - v43) >> 4;
    v44 = *(char **)(a10 + 336);
    do
    {
      v46 = v45 >> 1;
      v47 = (unsigned int *)&v44[16 * (v45 >> 1)];
      v49 = *v47;
      v48 = (char *)(v47 + 4);
      v45 += ~(v45 >> 1);
      if (v49 < a1)
        v44 = v48;
      else
        v45 = v46;
    }
    while (v45);
  }
  if (v44 == v42 || *(_DWORD *)v44 != a1)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    v56 = 0;
    v50 = 0;
    goto LABEL_131;
  }
  v50 = *((_QWORD *)v44 + 1);
  *(_QWORD *)&v599 = v50;
  ++*(_DWORD *)(*((_QWORD *)v44 + 1) + 8);
  if (v42 != v43)
  {
    v51 = (v42 - v43) >> 4;
    do
    {
      v52 = v51 >> 1;
      v53 = (unsigned int *)&v43[16 * (v51 >> 1)];
      v55 = *v53;
      v54 = (char *)(v53 + 4);
      v51 += ~(v51 >> 1);
      if (v55 < a3)
        v43 = v54;
      else
        v51 = v52;
    }
    while (v51);
  }
  if (v43 == v42 || *(_DWORD *)v43 != a3)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    v56 = 0;
    goto LABEL_131;
  }
  v56 = *((_QWORD *)v43 + 1);
  *((_QWORD *)&v599 + 1) = v56;
  ++*(_DWORD *)(*((_QWORD *)v43 + 1) + 8);
  v57 = *(char **)(a10 + 1008);
  v58 = *(char **)(a10 + 1016);
  v59 = v57;
  if (v58 != v57)
  {
    v60 = (v58 - v57) >> 4;
    v59 = *(char **)(a10 + 1008);
    do
    {
      v61 = v60 >> 1;
      v62 = (unsigned int *)&v59[16 * (v60 >> 1)];
      v64 = *v62;
      v63 = (char *)(v62 + 4);
      v60 += ~(v60 >> 1);
      if (v64 < a2)
        v59 = v63;
      else
        v60 = v61;
    }
    while (v60);
  }
  if (v59 == v58 || *(_DWORD *)v59 != a2)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    goto LABEL_131;
  }
  v65 = *((_QWORD *)v59 + 1);
  *(_QWORD *)&v600 = v65;
  ++*(_DWORD *)(*((_QWORD *)v59 + 1) + 8);
  if (v58 != v57)
  {
    v66 = (v58 - v57) >> 4;
    do
    {
      v67 = v66 >> 1;
      v68 = (unsigned int *)&v57[16 * (v66 >> 1)];
      v70 = *v68;
      v69 = (char *)(v68 + 4);
      v66 += ~(v66 >> 1);
      if (v70 < a4)
        v57 = v69;
      else
        v66 = v67;
    }
    while (v66);
  }
  if (v57 == v58 || *(_DWORD *)v57 != a4)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    goto LABEL_131;
  }
  v71 = *((_QWORD *)v57 + 1);
  *((_QWORD *)&v600 + 1) = v71;
  ++*(_DWORD *)(*((_QWORD *)v57 + 1) + 8);
  v72 = *(char **)(a10 + 1104);
  v73 = v72;
  v589 = *(char **)(a10 + 1112);
  if (v589 != v72)
  {
    v74 = (v589 - v72) >> 4;
    v73 = *(char **)(a10 + 1104);
    do
    {
      v75 = v74 >> 1;
      v76 = (unsigned int *)&v73[16 * (v74 >> 1)];
      v78 = *v76;
      v77 = (char *)(v76 + 4);
      v74 += ~(v74 >> 1);
      if (v78 < a2)
        v73 = v77;
      else
        v74 = v75;
    }
    while (v74);
  }
  if (v73 == v589 || *(_DWORD *)v73 != a2)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    goto LABEL_131;
  }
  v79 = *((_QWORD *)v73 + 1);
  *(_QWORD *)&v601 = v79;
  ++*(_DWORD *)(*((_QWORD *)v73 + 1) + 8);
  if (v589 != v72)
  {
    v80 = (v589 - v72) >> 4;
    do
    {
      v81 = v80 >> 1;
      v82 = (unsigned int *)&v72[16 * (v80 >> 1)];
      v84 = *v82;
      v83 = (char *)(v82 + 4);
      v80 += ~(v80 >> 1);
      if (v84 < a4)
        v72 = v83;
      else
        v80 = v81;
    }
    while (v80);
  }
  if (v72 == v589 || *(_DWORD *)v72 != a4)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    goto LABEL_131;
  }
  v586 = v16;
  v85 = *((_QWORD *)v72 + 1);
  *((_QWORD *)&v601 + 1) = v85;
  ++*(_DWORD *)(*((_QWORD *)v72 + 1) + 8);
  v86 = *(char **)(a10 + 1200);
  v87 = v86;
  v590 = *(char **)(a10 + 1208);
  if (v590 != v86)
  {
    v88 = (v590 - v86) >> 4;
    v87 = *(char **)(a10 + 1200);
    do
    {
      v89 = v88 >> 1;
      v90 = (unsigned int *)&v87[16 * (v88 >> 1)];
      v92 = *v90;
      v91 = (char *)(v90 + 4);
      v88 += ~(v88 >> 1);
      if (v92 < a2)
        v87 = v91;
      else
        v88 = v89;
    }
    while (v88);
  }
  if (v87 == v590 || *(_DWORD *)v87 != a2)
  {
    v99 = 0;
    v93 = 0;
LABEL_130:
    v16 = v586;
    v15 = a10;
    goto LABEL_131;
  }
  v93 = *((_QWORD *)v87 + 1);
  *(_QWORD *)&v602 = v93;
  ++*(_DWORD *)(*((_QWORD *)v87 + 1) + 8);
  if (v590 != v86)
  {
    v94 = (v590 - v86) >> 4;
    do
    {
      v95 = v94 >> 1;
      v96 = (unsigned int *)&v86[16 * (v94 >> 1)];
      v98 = *v96;
      v97 = (char *)(v96 + 4);
      v94 += ~(v94 >> 1);
      if (v98 < a4)
        v86 = v97;
      else
        v94 = v95;
    }
    while (v94);
  }
  if (v86 == v590 || *(_DWORD *)v86 != a4)
  {
    v99 = 0;
    goto LABEL_130;
  }
  v99 = *((_QWORD *)v86 + 1);
  *((_QWORD *)&v602 + 1) = v99;
  ++*(_DWORD *)(*((_QWORD *)v86 + 1) + 8);
  v100 = *(std::__shared_weak_count **)(a10 + 1296);
  v584 = *(std::__shared_weak_count **)(a10 + 1304);
  if (v584 != v100)
  {
    v101 = ((char *)v584 - (char *)v100) >> 4;
    do
    {
      v102 = (std::__shared_weak_count *)((char *)v100 + 16 * (v101 >> 1));
      v104 = v102->__vftable;
      v103 = (std::__shared_weak_count *)&v102[1];
      v105 = v104 >= a5;
      if (v104 >= a5)
        v101 >>= 1;
      else
        v101 += ~(v101 >> 1);
      if (!v105)
        v100 = v103;
    }
    while (v101);
  }
  if (v100 == v584 || LODWORD(v100->__vftable) != a5)
    goto LABEL_130;
  shared_owners = v100->__shared_owners_;
  v603 = shared_owners;
  ++*(_DWORD *)(v100->__shared_owners_ + 8);
  if (!*(_BYTE *)(v36 + 20)
    && !*(_BYTE *)(v41 + 20)
    && !*(_BYTE *)(v50 + 20)
    && !*(_BYTE *)(v56 + 20)
    && !*(_BYTE *)(v65 + 20)
    && !*(_BYTE *)(v71 + 20)
    && !*(_BYTE *)(v79 + 20)
    && !*(_BYTE *)(v85 + 20)
    && !*(_BYTE *)(v93 + 20)
    && !*(_BYTE *)(v99 + 20)
    && !*(_BYTE *)(shared_owners + 20))
  {
    --*(_DWORD *)(v36 + 8);
    --*(_DWORD *)(v41 + 8);
    v598 = 0u;
    --*(_DWORD *)(v50 + 8);
    --*(_DWORD *)(v56 + 8);
    v599 = 0u;
    --*(_DWORD *)(v65 + 8);
    --*(_DWORD *)(v71 + 8);
    v600 = 0u;
    --*(_DWORD *)(v79 + 8);
    --*(_DWORD *)(v85 + 8);
    v601 = 0u;
    --*(_DWORD *)(v93 + 8);
    --*(_DWORD *)(v99 + 8);
    v602 = 0u;
    --*(_DWORD *)(shared_owners + 8);
    v119 = 1;
    v16 = v586;
    v15 = a10;
    size = (std::__shared_weak_count *)v592.__r_.__value_.__l.__size_;
    if (!v592.__r_.__value_.__l.__size_)
      goto LABEL_156;
    goto LABEL_152;
  }
  v618.i64[0] = v586;
  v618.i64[1] = v586;
  v619 = *(_OWORD *)&v595[8];
  v621 = v596;
  v620 = *(_QWORD *)&v595[24];
  v622 = v597;
  v625 = v600;
  v626 = v601;
  v627 = v602;
  v623 = v598;
  *(_OWORD *)v624 = v599;
  v628 = v603;
  v580 = v604;
  v581 = v605;
  v629 = v604;
  v630 = v605;
  v631 = v606;
  v632 = v607;
  v633 = 0uLL;
  v608 = 0;
  v609 = 0;
  v634 = 0;
  if (v18 == v19 || *v19 != v586)
  {
    v583 = 0x4EC4EC4EC4EC4EC5 * (((char *)v19 - (char *)v17) >> 4);
    v107 = *(_QWORD *)(a10 + 1840);
    if ((unint64_t)v18 < v107)
    {
      if (v19 == v18)
      {
        *v18 = v586;
        v527 = &v17[2 * (((char *)v19 - (char *)v17) >> 4)];
        v527[1] = v586;
        v528 = v619;
        v527[4] = v620;
        *((_OWORD *)v527 + 1) = v528;
        v529 = v621;
        *((double *)v527 + 7) = v622;
        *(_OWORD *)(v527 + 5) = v529;
        v530 = *(_OWORD *)v624;
        *((_OWORD *)v527 + 4) = v623;
        *((_OWORD *)v527 + 5) = v530;
        v531 = v625;
        v532 = v627;
        v533 = v628;
        *((_OWORD *)v527 + 7) = v626;
        *((_OWORD *)v527 + 8) = v532;
        *((_OWORD *)v527 + 6) = v531;
        v527[18] = v533;
        v527[19] = v580;
        v527[20] = v581;
        v534 = v631;
        *((_BYTE *)v527 + 176) = v632;
        v527[21] = v534;
        v527[23] = 0;
        v527[24] = 0;
        v633 = 0uLL;
        *((_BYTE *)v527 + 200) = 0;
        *(_QWORD *)(a10 + 1832) = v18 + 26;
      }
      else
      {
        __p = *(std::string *)&v595[8];
        *(_OWORD *)v616 = v596;
        v617 = v597;
        v578 = *(_OWORD *)v624;
        v579 = v623;
        v576 = v626;
        v577 = v625;
        v575 = v627;
        v615 = v607;
        v614 = v606;
        v633 = 0uLL;
        v108 = v18;
        v574 = v628;
        v591 = v18 - 26;
        if ((unint64_t)v18 >= 0xD0)
        {
          v109 = v18 - 26;
          v108 = v18;
          do
          {
            *v108 = *v109;
            v108[1] = v109[1];
            v110 = *((_OWORD *)v109 + 1);
            v108[4] = v109[4];
            *((_OWORD *)v108 + 1) = v110;
            v111 = *(_OWORD *)(v109 + 5);
            v108[7] = v109[7];
            *(_OWORD *)(v108 + 5) = v111;
            v113 = *((_OWORD *)v109 + 7);
            v112 = *((_OWORD *)v109 + 8);
            v114 = *((_OWORD *)v109 + 6);
            v108[18] = v109[18];
            *((_OWORD *)v108 + 7) = v113;
            *((_OWORD *)v108 + 8) = v112;
            *((_OWORD *)v108 + 6) = v114;
            v115 = *((_OWORD *)v109 + 5);
            *((_OWORD *)v108 + 4) = *((_OWORD *)v109 + 4);
            *((_OWORD *)v108 + 5) = v115;
            v108[19] = v109[19];
            v108[20] = v109[20];
            v116 = v109[21];
            *((_BYTE *)v108 + 176) = *((_BYTE *)v109 + 176);
            v108[21] = v116;
            *(_OWORD *)(v108 + 23) = *(_OWORD *)(v109 + 23);
            v109[23] = 0;
            v109[24] = 0;
            *((_BYTE *)v108 + 200) = *((_BYTE *)v109 + 200);
            v108 += 26;
            v109 += 26;
          }
          while (v109 < v18);
        }
        *(_QWORD *)(a10 + 1832) = v108;
        if (v18 != v19 + 26)
        {
          v117 = v18 - 26;
          v118 = v18;
          do
          {
            v509 = *(v117 - 26);
            v117 -= 26;
            *(v118 - 26) = v509;
            v118 -= 26;
            v118[1] = v117[1];
            v510 = *((_OWORD *)v117 + 1);
            v118[4] = v117[4];
            *((_OWORD *)v118 + 1) = v510;
            v511 = *(_OWORD *)(v117 + 5);
            v118[7] = v117[7];
            *(_OWORD *)(v118 + 5) = v511;
            v118[8] = v117[8];
            v118[9] = v117[9];
            v118[10] = v117[10];
            v118[11] = v117[11];
            v118[12] = v117[12];
            v118[13] = v117[13];
            v118[14] = v117[14];
            v118[15] = v117[15];
            v118[16] = v117[16];
            v118[17] = v117[17];
            v118[18] = v117[18];
            v118[19] = v117[19];
            v118[20] = v117[20];
            v512 = v117[21];
            *((_BYTE *)v118 + 176) = *((_BYTE *)v117 + 176);
            v118[21] = v512;
            v513 = *(_OWORD *)(v117 + 23);
            v117[23] = 0;
            v117[24] = 0;
            v514 = (std::__shared_weak_count *)v118[24];
            *(_OWORD *)(v118 + 23) = v513;
            if (v514)
            {
              v515 = v514;
              p_shared_owners = (unint64_t *)&v514->__shared_owners_;
              do
                v517 = __ldaxr(p_shared_owners);
              while (__stlxr(v517 - 1, p_shared_owners));
              if (!v517)
              {
                v585 = v515;
                ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                std::__shared_weak_count::__release_weak(v585);
              }
            }
            *((_BYTE *)v18 - 8) = *((_BYTE *)v591 - 8);
            v18 = v118;
            v591 = v117;
          }
          while (v117 != v19);
        }
        *(int64x2_t *)v19 = vdupq_n_s64(v586);
        v522 = &v17[2 * (((char *)v19 - (char *)v17) >> 4)];
        *(std::string *)(v522 + 2) = __p;
        *(_OWORD *)(v522 + 5) = *(_OWORD *)v616;
        *((double *)v522 + 7) = v617;
        *((_OWORD *)v522 + 4) = v579;
        *((_OWORD *)v522 + 5) = v578;
        *((_OWORD *)v522 + 6) = v577;
        *((_OWORD *)v522 + 7) = v576;
        *((_OWORD *)v522 + 8) = v575;
        v522[18] = v574;
        v522[19] = v580;
        v523 = v614;
        *((_BYTE *)v522 + 176) = v615;
        v522[20] = v581;
        v522[21] = v523;
        v524 = (std::__shared_weak_count *)v522[24];
        v522[23] = 0;
        v522[24] = 0;
        if (v524)
        {
          v525 = (unint64_t *)&v524->__shared_owners_;
          do
            v526 = __ldaxr(v525);
          while (__stlxr(v526 - 1, v525));
          if (!v526)
          {
            ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
            std::__shared_weak_count::__release_weak(v524);
          }
        }
        LOBYTE(v17[2 * (((char *)v19 - (char *)v17) >> 4) + 25]) = 0;
      }
LABEL_748:
      if (*((_QWORD *)&v633 + 1))
      {
        v570 = (unint64_t *)(*((_QWORD *)&v633 + 1) + 8);
        do
          v571 = __ldaxr(v570);
        while (__stlxr(v571 - 1, v570));
        if (!v571)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v633 + 1) + 16))(*((_QWORD *)&v633 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v633 + 1));
        }
      }
      goto LABEL_753;
    }
    v518 = 0x4EC4EC4EC4EC4EC5 * (((char *)v18 - (char *)v17) >> 4) + 1;
    if (v518 > 0x13B13B13B13B13BLL)
      sub_20E867F44();
    v519 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v107 - (_QWORD)v17) >> 4);
    if (2 * v519 > v518)
      v518 = 2 * v519;
    if (v519 >= 0x9D89D89D89D89DLL)
      v520 = 0x13B13B13B13B13BLL;
    else
      v520 = v518;
    v613 = a10 + 1840;
    if (v520)
    {
      if (v520 > 0x13B13B13B13B13BLL)
        sub_20E877A38();
      v521 = (char *)operator new(208 * v520);
    }
    else
    {
      v521 = 0;
    }
    v535 = (std::string::size_type)&v521[16 * (((char *)v19 - (char *)v17) >> 4)];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v521;
    __p.__r_.__value_.__l.__size_ = v535;
    __p.__r_.__value_.__r.__words[2] = v535;
    v612 = &v521[208 * v520];
    v582 = vdupq_n_s64(v586);
    if (v583 == v520)
    {
      if ((char *)v19 - (char *)v17 >= 1)
      {
        v536 = v583 + 2;
        if (v583 >= -1)
          v536 = v583 + 1;
        v537 = v536 >> 1;
        v538 = sub_20F91F01C((uint64_t)&v521[208 * v583], (uint64_t)&v521[208 * v583], v535 - 208 * (v536 >> 1));
        v535 = __p.__r_.__value_.__l.__size_ - 208 * v537;
        __p.__r_.__value_.__l.__size_ = v535;
        v582 = v618;
        goto LABEL_730;
      }
      if (v17 == v19)
        v539 = 1;
      else
        v539 = 0x9D89D89D89D89D8ALL * (((char *)v19 - (char *)v17) >> 4);
      if (v539 > 0x13B13B13B13B13BLL)
        sub_20E877A38();
      v540 = (char *)operator new(208 * v539);
      v535 = (std::string::size_type)&v540[208 * (v539 >> 2)];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v540;
      __p.__r_.__value_.__l.__size_ = v535;
      v612 = &v540[208 * v539];
      if (v521)
        operator delete(v521);
    }
    v538 = v535;
LABEL_730:
    v541 = v619;
    *(int64x2_t *)v538 = v582;
    *(_OWORD *)(v538 + 16) = v541;
    *(_QWORD *)(v538 + 32) = v620;
    *(double *)(v538 + 56) = v622;
    *(_OWORD *)(v538 + 40) = v621;
    v542 = v626;
    *(_OWORD *)(v538 + 96) = v625;
    *(_OWORD *)(v538 + 112) = v542;
    *(_OWORD *)(v538 + 128) = v627;
    *(_QWORD *)(v538 + 144) = v628;
    v543 = *(_OWORD *)v624;
    *(_OWORD *)(v538 + 64) = v623;
    *(_OWORD *)(v538 + 80) = v543;
    *(_QWORD *)(v538 + 152) = v629;
    *(_QWORD *)(v538 + 160) = v630;
    v544 = v631;
    *(_BYTE *)(v538 + 176) = v632;
    *(_QWORD *)(v538 + 168) = v544;
    *(_OWORD *)(v538 + 184) = v633;
    v633 = 0uLL;
    *(_BYTE *)(v538 + 200) = v634;
    v545 = v538 + 208;
    __p.__r_.__value_.__r.__words[2] = v538 + 208;
    v546 = *(unint64_t **)(a10 + 1824);
    if (v546 != v19)
    {
      v547 = 0;
      do
      {
        v548 = v535 + v547 * 8;
        v549 = (char *)&v19[v547];
        *(_QWORD *)(v548 - 208) = v19[v547 - 26];
        *(_QWORD *)(v548 - 200) = v19[v547 - 25];
        v550 = *(_OWORD *)&v19[v547 - 24];
        *(_QWORD *)(v548 - 176) = v19[v547 - 22];
        *(_OWORD *)(v548 - 192) = v550;
        v551 = *(_OWORD *)&v19[v547 - 21];
        *(_QWORD *)(v548 - 152) = v19[v547 - 19];
        *(_OWORD *)(v548 - 168) = v551;
        v553 = *(_OWORD *)&v19[v547 - 12];
        v552 = *(_OWORD *)&v19[v547 - 10];
        v554 = *(_OWORD *)&v19[v547 - 14];
        *(_QWORD *)(v548 - 64) = v19[v547 - 8];
        *(_OWORD *)(v548 - 96) = v553;
        *(_OWORD *)(v548 - 80) = v552;
        *(_OWORD *)(v548 - 112) = v554;
        v555 = *(_OWORD *)&v19[v547 - 16];
        *(_OWORD *)(v548 - 144) = *(_OWORD *)&v19[v547 - 18];
        *(_OWORD *)(v548 - 128) = v555;
        *(_QWORD *)(v548 - 56) = v19[v547 - 7];
        *(_QWORD *)(v548 - 48) = v19[v547 - 6];
        v556 = v19[v547 - 5];
        *(_BYTE *)(v548 - 32) = v19[v547 - 4];
        *(_QWORD *)(v548 - 40) = v556;
        *(_OWORD *)(v548 - 24) = *(_OWORD *)&v19[v547 - 3];
        *((_QWORD *)v549 - 3) = 0;
        *((_QWORD *)v549 - 2) = 0;
        *(_BYTE *)(v548 - 8) = v19[v547 - 1];
        v547 -= 26;
      }
      while (&v19[v547] != v546);
      v545 = __p.__r_.__value_.__r.__words[2];
      v535 += v547 * 8;
    }
    v557 = *(unint64_t **)(a10 + 1832);
    if (v557 != v19)
    {
      do
      {
        *(_QWORD *)v545 = *v19;
        *(_QWORD *)(v545 + 8) = v19[1];
        v558 = *((_OWORD *)v19 + 1);
        *(_QWORD *)(v545 + 32) = v19[4];
        *(_OWORD *)(v545 + 16) = v558;
        v559 = *(_OWORD *)(v19 + 5);
        *(_QWORD *)(v545 + 56) = v19[7];
        *(_OWORD *)(v545 + 40) = v559;
        v561 = *((_OWORD *)v19 + 7);
        v560 = *((_OWORD *)v19 + 8);
        v562 = *((_OWORD *)v19 + 6);
        *(_QWORD *)(v545 + 144) = v19[18];
        *(_OWORD *)(v545 + 112) = v561;
        *(_OWORD *)(v545 + 128) = v560;
        *(_OWORD *)(v545 + 96) = v562;
        v563 = *((_OWORD *)v19 + 5);
        *(_OWORD *)(v545 + 64) = *((_OWORD *)v19 + 4);
        *(_OWORD *)(v545 + 80) = v563;
        *(_QWORD *)(v545 + 152) = v19[19];
        *(_QWORD *)(v545 + 160) = v19[20];
        v564 = v19[21];
        *(_BYTE *)(v545 + 176) = *((_BYTE *)v19 + 176);
        *(_QWORD *)(v545 + 168) = v564;
        *(_OWORD *)(v545 + 184) = *(_OWORD *)(v19 + 23);
        v19[23] = 0;
        v19[24] = 0;
        *(_BYTE *)(v545 + 200) = *((_BYTE *)v19 + 200);
        v545 += 208;
        v19 += 26;
      }
      while (v19 != v557);
      v19 = *(unint64_t **)(a10 + 1832);
    }
    v565 = *(_QWORD *)(a10 + 1824);
    *(_QWORD *)(a10 + 1824) = v535;
    *(_QWORD *)(a10 + 1832) = v545;
    v566 = *(char **)(a10 + 1840);
    *(_QWORD *)(a10 + 1840) = v612;
    v612 = v566;
    __p.__r_.__value_.__r.__words[0] = v565;
    __p.__r_.__value_.__l.__size_ = v565;
    if (v19 != (unint64_t *)v565)
    {
      do
      {
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v19 - 26);
        v567 = (std::__shared_weak_count *)*(v19 - 2);
        if (v567)
        {
          v568 = (unint64_t *)&v567->__shared_owners_;
          do
            v569 = __ldaxr(v568);
          while (__stlxr(v569 - 1, v568));
          if (!v569)
          {
            ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
            std::__shared_weak_count::__release_weak(v567);
          }
        }
        v19 = (unint64_t *)__p.__r_.__value_.__r.__words[2];
      }
      while (__p.__r_.__value_.__r.__words[2] != v565);
      v19 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
    }
    if (v19)
      operator delete(v19);
    goto LABEL_748;
  }
LABEL_753:
  *(_BYTE *)(a10 + 1946) = 0;
  *(_BYTE *)(a10 + 1944) = 0;
  *(int64x2_t *)(a10 + 1928) = vaddq_s64(*(int64x2_t *)(a10 + 1928), vdupq_n_s64(1uLL));
  if (v609)
  {
    v572 = &v609->__shared_owners_;
    do
      v573 = __ldaxr((unint64_t *)v572);
    while (__stlxr(v573 - 1, (unint64_t *)v572));
    if (!v573)
    {
      ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
      std::__shared_weak_count::__release_weak(v609);
    }
  }
  v119 = 0;
  v16 = v586;
  v15 = a10;
  size = (std::__shared_weak_count *)v592.__r_.__value_.__l.__size_;
  if (v592.__r_.__value_.__l.__size_)
  {
LABEL_152:
    v121 = (unint64_t *)&size->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_156:
  if ((v119 & 1) != 0)
    goto LABEL_157;
  v123 = 0;
  *(_BYTE *)(v15 + 3012) = 0;
  *(_DWORD *)(v15 + 3008) = 0;
  v124 = v594;
  if (!v594)
    goto LABEL_163;
LABEL_160:
  v125 = (unint64_t *)&v124->__shared_owners_;
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
    if (!v123)
      return;
    goto LABEL_164;
  }
LABEL_163:
  if (!v123)
    return;
LABEL_164:
  sub_20E863438((uint64_t)&v618);
  v127 = *(char **)(v15 + 1296);
  v128 = *(char **)(v15 + 1304);
  if (v128 != v127)
  {
    v129 = (v128 - v127) >> 4;
    do
    {
      v130 = v129 >> 1;
      v131 = &v127[16 * (v129 >> 1)];
      v133 = *(_DWORD *)v131;
      v132 = v131 + 16;
      v129 += ~(v129 >> 1);
      if (v133 < a5)
        v127 = v132;
      else
        v129 = v130;
    }
    while (v129);
  }
  if (v127 == v128 || *(_DWORD *)v127 != a5)
  {
    v139 = 1;
    v140 = *(char **)(v15 + 528);
    v141 = *(char **)(v15 + 536);
    v142 = v140;
    v143 = v141 - v140;
    if (v141 == v140)
      goto LABEL_188;
    goto LABEL_183;
  }
  v134 = sub_20E86A980(&v619, (uint64_t)"error: landmark variable ", 25);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v136 = __p.__r_.__value_.__l.__size_;
  v137 = sub_20E86A980(v134, (uint64_t)p_p, v136);
  sub_20E86A980(v137, (uint64_t)" with ID ", 9);
  v138 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v138, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v139 = 0;
  v140 = *(char **)(v15 + 528);
  v141 = *(char **)(v15 + 536);
  v142 = v140;
  v143 = v141 - v140;
  if (v141 != v140)
  {
LABEL_183:
    v144 = v143 >> 4;
    v142 = v140;
    do
    {
      v145 = v144 >> 1;
      v146 = (unsigned int *)&v142[16 * (v144 >> 1)];
      v148 = *v146;
      v147 = (char *)(v146 + 4);
      v144 += ~(v144 >> 1);
      if (v148 < a2)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
LABEL_188:
  if (v142 != v141 && *(_DWORD *)v142 == a2)
  {
    if (v141 != v140)
    {
      v149 = (v141 - v140) >> 4;
      do
      {
        v150 = v149 >> 1;
        v151 = (unsigned int *)&v140[16 * (v149 >> 1)];
        v153 = *v151;
        v152 = (char *)(v151 + 4);
        v149 += ~(v149 >> 1);
        if (v153 < a2)
          v140 = v152;
        else
          v149 = v150;
      }
      while (v149);
    }
    v587 = v139;
    if (v140 == v141 || *(_DWORD *)v140 != a2)
      v140 = v141;
    v154 = *((_QWORD *)v140 + 1);
    v155 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v156 = &__p;
    else
      v156 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v157 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v157 = __p.__r_.__value_.__l.__size_;
    v158 = sub_20E86A980(v155, (uint64_t)v156, v157);
    sub_20E86A980(v158, (uint64_t)" with ID ", 9);
    v159 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v159, (uint64_t)" found (", 8);
    v160 = (_QWORD *)std::ostream::operator<<();
    v161 = sub_20E86A980(v160, (uint64_t)", ", 2);
    if (*(_BYTE *)(v154 + 20))
      v162 = "free";
    else
      v162 = "fixed";
    if (*(_BYTE *)(v154 + 20))
      v163 = 4;
    else
      v163 = 5;
    v164 = sub_20E86A980(v161, (uint64_t)v162, v163);
    sub_20E86A980(v164, (uint64_t)")\n", 2);
    v165 = v587;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 = *(unsigned __int8 *)(v154 + 20);
    v166 = *(char **)(v15 + 528);
    v167 = *(char **)(v15 + 536);
    v168 = v166;
    v169 = v167 - v166;
    if (v167 == v166)
      goto LABEL_229;
LABEL_224:
    v175 = v169 >> 4;
    v168 = v166;
    do
    {
      v176 = v175 >> 1;
      v177 = (unsigned int *)&v168[16 * (v175 >> 1)];
      v179 = *v177;
      v178 = (char *)(v177 + 4);
      v175 += ~(v175 >> 1);
      if (v179 < a4)
        v168 = v178;
      else
        v175 = v176;
    }
    while (v175);
    goto LABEL_229;
  }
  v170 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v171 = &__p;
  else
    v171 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v172 = __p.__r_.__value_.__l.__size_;
  v173 = sub_20E86A980(v170, (uint64_t)v171, v172);
  sub_20E86A980(v173, (uint64_t)" with ID ", 9);
  v174 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v174, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v165 = 0;
  v588 = 0;
  v166 = *(char **)(v15 + 528);
  v167 = *(char **)(v15 + 536);
  v168 = v166;
  v169 = v167 - v166;
  if (v167 != v166)
    goto LABEL_224;
LABEL_229:
  if (v168 != v167 && *(_DWORD *)v168 == a4)
  {
    if (v167 != v166)
    {
      v180 = (v167 - v166) >> 4;
      do
      {
        v181 = v180 >> 1;
        v182 = (unsigned int *)&v166[16 * (v180 >> 1)];
        v184 = *v182;
        v183 = (char *)(v182 + 4);
        v180 += ~(v180 >> 1);
        if (v184 < a4)
          v166 = v183;
        else
          v180 = v181;
      }
      while (v180);
    }
    if (v166 == v167 || *(_DWORD *)v166 != a4)
      v166 = v167;
    v185 = *((_QWORD *)v166 + 1);
    v186 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v187 = &__p;
    else
      v187 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v188 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v188 = __p.__r_.__value_.__l.__size_;
    v189 = sub_20E86A980(v186, (uint64_t)v187, v188);
    sub_20E86A980(v189, (uint64_t)" with ID ", 9);
    v190 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v190, (uint64_t)" found (", 8);
    v191 = (_QWORD *)std::ostream::operator<<();
    v192 = sub_20E86A980(v191, (uint64_t)", ", 2);
    if (*(_BYTE *)(v185 + 20))
      v193 = "free";
    else
      v193 = "fixed";
    if (*(_BYTE *)(v185 + 20))
      v194 = 4;
    else
      v194 = 5;
    v195 = sub_20E86A980(v192, (uint64_t)v193, v194);
    sub_20E86A980(v195, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v185 + 20);
    v196 = *(char **)(v15 + 336);
    v197 = *(char **)(v15 + 344);
    v198 = v196;
    v199 = v197 - v196;
    if (v197 == v196)
      goto LABEL_270;
LABEL_265:
    v205 = v199 >> 4;
    v198 = v196;
    do
    {
      v206 = v205 >> 1;
      v207 = (unsigned int *)&v198[16 * (v205 >> 1)];
      v209 = *v207;
      v208 = (char *)(v207 + 4);
      v205 += ~(v205 >> 1);
      if (v209 < a1)
        v198 = v208;
      else
        v205 = v206;
    }
    while (v205);
    goto LABEL_270;
  }
  v200 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v201 = &__p;
  else
    v201 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v202 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v202 = __p.__r_.__value_.__l.__size_;
  v203 = sub_20E86A980(v200, (uint64_t)v201, v202);
  sub_20E86A980(v203, (uint64_t)" with ID ", 9);
  v204 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v204, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v165 = 0;
  v196 = *(char **)(v15 + 336);
  v197 = *(char **)(v15 + 344);
  v198 = v196;
  v199 = v197 - v196;
  if (v197 != v196)
    goto LABEL_265;
LABEL_270:
  if (v198 != v197 && *(_DWORD *)v198 == a1)
  {
    if (v197 != v196)
    {
      v210 = (v197 - v196) >> 4;
      do
      {
        v211 = v210 >> 1;
        v212 = (unsigned int *)&v196[16 * (v210 >> 1)];
        v214 = *v212;
        v213 = (char *)(v212 + 4);
        v210 += ~(v210 >> 1);
        if (v214 < a1)
          v196 = v213;
        else
          v210 = v211;
      }
      while (v210);
    }
    if (v196 == v197 || *(_DWORD *)v196 != a1)
      v196 = v197;
    v215 = *((_QWORD *)v196 + 1);
    v216 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v217 = &__p;
    else
      v217 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v218 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v218 = __p.__r_.__value_.__l.__size_;
    v219 = sub_20E86A980(v216, (uint64_t)v217, v218);
    sub_20E86A980(v219, (uint64_t)" with ID ", 9);
    v220 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v220, (uint64_t)" found (", 8);
    v221 = (_QWORD *)std::ostream::operator<<();
    v222 = sub_20E86A980(v221, (uint64_t)", ", 2);
    if (*(_BYTE *)(v215 + 20))
      v223 = "free";
    else
      v223 = "fixed";
    if (*(_BYTE *)(v215 + 20))
      v224 = 4;
    else
      v224 = 5;
    v225 = sub_20E86A980(v222, (uint64_t)v223, v224);
    sub_20E86A980(v225, (uint64_t)")\n", 2);
    v226 = v165;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v215 + 20);
    v227 = *(char **)(v15 + 336);
    v228 = *(char **)(v15 + 344);
    v229 = v227;
    v230 = v228 - v227;
    if (v228 == v227)
      goto LABEL_311;
LABEL_306:
    v236 = v230 >> 4;
    v229 = v227;
    do
    {
      v237 = v236 >> 1;
      v238 = (unsigned int *)&v229[16 * (v236 >> 1)];
      v240 = *v238;
      v239 = (char *)(v238 + 4);
      v236 += ~(v236 >> 1);
      if (v240 < a3)
        v229 = v239;
      else
        v236 = v237;
    }
    while (v236);
    goto LABEL_311;
  }
  v231 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v232 = &__p;
  else
    v232 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v233 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v233 = __p.__r_.__value_.__l.__size_;
  v234 = sub_20E86A980(v231, (uint64_t)v232, v233);
  sub_20E86A980(v234, (uint64_t)" with ID ", 9);
  v235 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v235, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v226 = 0;
  v227 = *(char **)(v15 + 336);
  v228 = *(char **)(v15 + 344);
  v229 = v227;
  v230 = v228 - v227;
  if (v228 != v227)
    goto LABEL_306;
LABEL_311:
  if (v229 != v228 && *(_DWORD *)v229 == a3)
  {
    if (v228 != v227)
    {
      v241 = (v228 - v227) >> 4;
      do
      {
        v242 = v241 >> 1;
        v243 = (unsigned int *)&v227[16 * (v241 >> 1)];
        v245 = *v243;
        v244 = (char *)(v243 + 4);
        v241 += ~(v241 >> 1);
        if (v245 < a3)
          v227 = v244;
        else
          v241 = v242;
      }
      while (v241);
    }
    if (v227 == v228 || *(_DWORD *)v227 != a3)
      v227 = v228;
    v246 = *((_QWORD *)v227 + 1);
    v247 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v248 = &__p;
    else
      v248 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v249 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v249 = __p.__r_.__value_.__l.__size_;
    v250 = sub_20E86A980(v247, (uint64_t)v248, v249);
    sub_20E86A980(v250, (uint64_t)" with ID ", 9);
    v251 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v251, (uint64_t)" found (", 8);
    v252 = (_QWORD *)std::ostream::operator<<();
    v253 = sub_20E86A980(v252, (uint64_t)", ", 2);
    if (*(_BYTE *)(v246 + 20))
      v254 = "free";
    else
      v254 = "fixed";
    if (*(_BYTE *)(v246 + 20))
      v255 = 4;
    else
      v255 = 5;
    v256 = sub_20E86A980(v253, (uint64_t)v254, v255);
    sub_20E86A980(v256, (uint64_t)")\n", 2);
    v257 = v226;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v246 + 20);
    v258 = *(char **)(v15 + 1008);
    v259 = *(char **)(v15 + 1016);
    v260 = v258;
    v261 = v259 - v258;
    if (v259 == v258)
      goto LABEL_352;
LABEL_347:
    v267 = v261 >> 4;
    v260 = v258;
    do
    {
      v268 = v267 >> 1;
      v269 = (unsigned int *)&v260[16 * (v267 >> 1)];
      v271 = *v269;
      v270 = (char *)(v269 + 4);
      v267 += ~(v267 >> 1);
      if (v271 < a2)
        v260 = v270;
      else
        v267 = v268;
    }
    while (v267);
    goto LABEL_352;
  }
  v262 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v263 = &__p;
  else
    v263 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v264 = __p.__r_.__value_.__l.__size_;
  v265 = sub_20E86A980(v262, (uint64_t)v263, v264);
  sub_20E86A980(v265, (uint64_t)" with ID ", 9);
  v266 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v266, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v258 = *(char **)(v15 + 1008);
  v259 = *(char **)(v15 + 1016);
  v260 = v258;
  v261 = v259 - v258;
  if (v259 != v258)
    goto LABEL_347;
LABEL_352:
  if (v260 != v259 && *(_DWORD *)v260 == a2)
  {
    if (v259 != v258)
    {
      v272 = (v259 - v258) >> 4;
      do
      {
        v273 = v272 >> 1;
        v274 = (unsigned int *)&v258[16 * (v272 >> 1)];
        v276 = *v274;
        v275 = (char *)(v274 + 4);
        v272 += ~(v272 >> 1);
        if (v276 < a2)
          v258 = v275;
        else
          v272 = v273;
      }
      while (v272);
    }
    if (v258 == v259 || *(_DWORD *)v258 != a2)
      v258 = v259;
    v277 = *((_QWORD *)v258 + 1);
    v278 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v279 = &__p;
    else
      v279 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v280 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v280 = __p.__r_.__value_.__l.__size_;
    v281 = sub_20E86A980(v278, (uint64_t)v279, v280);
    sub_20E86A980(v281, (uint64_t)" with ID ", 9);
    v282 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v282, (uint64_t)" found (", 8);
    v283 = (_QWORD *)std::ostream::operator<<();
    v284 = sub_20E86A980(v283, (uint64_t)", ", 2);
    if (*(_BYTE *)(v277 + 20))
      v285 = "free";
    else
      v285 = "fixed";
    if (*(_BYTE *)(v277 + 20))
      v286 = 4;
    else
      v286 = 5;
    v287 = sub_20E86A980(v284, (uint64_t)v285, v286);
    sub_20E86A980(v287, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v277 + 20);
    v288 = *(char **)(v15 + 1008);
    v289 = *(char **)(v15 + 1016);
    v290 = v288;
    v291 = v289 - v288;
    if (v289 == v288)
      goto LABEL_393;
LABEL_388:
    v297 = v291 >> 4;
    v290 = v288;
    do
    {
      v298 = v297 >> 1;
      v299 = (unsigned int *)&v290[16 * (v297 >> 1)];
      v301 = *v299;
      v300 = (char *)(v299 + 4);
      v297 += ~(v297 >> 1);
      if (v301 < a4)
        v290 = v300;
      else
        v297 = v298;
    }
    while (v297);
    goto LABEL_393;
  }
  v292 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v293 = &__p;
  else
    v293 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v294 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v294 = __p.__r_.__value_.__l.__size_;
  v295 = sub_20E86A980(v292, (uint64_t)v293, v294);
  sub_20E86A980(v295, (uint64_t)" with ID ", 9);
  v296 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v296, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v288 = *(char **)(v15 + 1008);
  v289 = *(char **)(v15 + 1016);
  v290 = v288;
  v291 = v289 - v288;
  if (v289 != v288)
    goto LABEL_388;
LABEL_393:
  if (v290 != v289 && *(_DWORD *)v290 == a4)
  {
    if (v289 != v288)
    {
      v302 = (v289 - v288) >> 4;
      do
      {
        v303 = v302 >> 1;
        v304 = (unsigned int *)&v288[16 * (v302 >> 1)];
        v306 = *v304;
        v305 = (char *)(v304 + 4);
        v302 += ~(v302 >> 1);
        if (v306 < a4)
          v288 = v305;
        else
          v302 = v303;
      }
      while (v302);
    }
    if (v288 == v289 || *(_DWORD *)v288 != a4)
      v288 = v289;
    v307 = *((_QWORD *)v288 + 1);
    v308 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v309 = &__p;
    else
      v309 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v310 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v310 = __p.__r_.__value_.__l.__size_;
    v311 = sub_20E86A980(v308, (uint64_t)v309, v310);
    sub_20E86A980(v311, (uint64_t)" with ID ", 9);
    v312 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v312, (uint64_t)" found (", 8);
    v313 = (_QWORD *)std::ostream::operator<<();
    v314 = sub_20E86A980(v313, (uint64_t)", ", 2);
    if (*(_BYTE *)(v307 + 20))
      v315 = "free";
    else
      v315 = "fixed";
    if (*(_BYTE *)(v307 + 20))
      v316 = 4;
    else
      v316 = 5;
    v317 = sub_20E86A980(v314, (uint64_t)v315, v316);
    sub_20E86A980(v317, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v307 + 20);
    v318 = *(char **)(v15 + 1104);
    v319 = *(char **)(v15 + 1112);
    v320 = v318;
    v321 = v319 - v318;
    if (v319 == v318)
      goto LABEL_434;
LABEL_429:
    v327 = v321 >> 4;
    v320 = v318;
    do
    {
      v328 = v327 >> 1;
      v329 = (unsigned int *)&v320[16 * (v327 >> 1)];
      v331 = *v329;
      v330 = (char *)(v329 + 4);
      v327 += ~(v327 >> 1);
      if (v331 < a2)
        v320 = v330;
      else
        v327 = v328;
    }
    while (v327);
    goto LABEL_434;
  }
  v322 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v323 = &__p;
  else
    v323 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v324 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v324 = __p.__r_.__value_.__l.__size_;
  v325 = sub_20E86A980(v322, (uint64_t)v323, v324);
  sub_20E86A980(v325, (uint64_t)" with ID ", 9);
  v326 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v326, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v318 = *(char **)(v15 + 1104);
  v319 = *(char **)(v15 + 1112);
  v320 = v318;
  v321 = v319 - v318;
  if (v319 != v318)
    goto LABEL_429;
LABEL_434:
  if (v320 != v319 && *(_DWORD *)v320 == a2)
  {
    if (v319 != v318)
    {
      v332 = (v319 - v318) >> 4;
      do
      {
        v333 = v332 >> 1;
        v334 = (unsigned int *)&v318[16 * (v332 >> 1)];
        v336 = *v334;
        v335 = (char *)(v334 + 4);
        v332 += ~(v332 >> 1);
        if (v336 < a2)
          v318 = v335;
        else
          v332 = v333;
      }
      while (v332);
    }
    if (v318 == v319 || *(_DWORD *)v318 != a2)
      v318 = v319;
    v337 = *((_QWORD *)v318 + 1);
    v338 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v339 = &__p;
    else
      v339 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v340 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v340 = __p.__r_.__value_.__l.__size_;
    v341 = sub_20E86A980(v338, (uint64_t)v339, v340);
    sub_20E86A980(v341, (uint64_t)" with ID ", 9);
    v342 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v342, (uint64_t)" found (", 8);
    v343 = (_QWORD *)std::ostream::operator<<();
    v344 = sub_20E86A980(v343, (uint64_t)", ", 2);
    if (*(_BYTE *)(v337 + 20))
      v345 = "free";
    else
      v345 = "fixed";
    if (*(_BYTE *)(v337 + 20))
      v346 = 4;
    else
      v346 = 5;
    v347 = sub_20E86A980(v344, (uint64_t)v345, v346);
    sub_20E86A980(v347, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v337 + 20);
    v348 = *(char **)(v15 + 1104);
    v349 = *(char **)(v15 + 1112);
    v350 = v348;
    v351 = v349 - v348;
    if (v349 == v348)
      goto LABEL_475;
LABEL_470:
    v357 = v351 >> 4;
    v350 = v348;
    do
    {
      v358 = v357 >> 1;
      v359 = (unsigned int *)&v350[16 * (v357 >> 1)];
      v361 = *v359;
      v360 = (char *)(v359 + 4);
      v357 += ~(v357 >> 1);
      if (v361 < a4)
        v350 = v360;
      else
        v357 = v358;
    }
    while (v357);
    goto LABEL_475;
  }
  v352 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v353 = &__p;
  else
    v353 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v354 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v354 = __p.__r_.__value_.__l.__size_;
  v355 = sub_20E86A980(v352, (uint64_t)v353, v354);
  sub_20E86A980(v355, (uint64_t)" with ID ", 9);
  v356 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v356, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v348 = *(char **)(v15 + 1104);
  v349 = *(char **)(v15 + 1112);
  v350 = v348;
  v351 = v349 - v348;
  if (v349 != v348)
    goto LABEL_470;
LABEL_475:
  if (v350 != v349 && *(_DWORD *)v350 == a4)
  {
    if (v349 != v348)
    {
      v362 = (v349 - v348) >> 4;
      do
      {
        v363 = v362 >> 1;
        v364 = (unsigned int *)&v348[16 * (v362 >> 1)];
        v366 = *v364;
        v365 = (char *)(v364 + 4);
        v362 += ~(v362 >> 1);
        if (v366 < a4)
          v348 = v365;
        else
          v362 = v363;
      }
      while (v362);
    }
    if (v348 == v349 || *(_DWORD *)v348 != a4)
      v348 = v349;
    v367 = *((_QWORD *)v348 + 1);
    v368 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v369 = &__p;
    else
      v369 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v370 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v370 = __p.__r_.__value_.__l.__size_;
    v371 = sub_20E86A980(v368, (uint64_t)v369, v370);
    sub_20E86A980(v371, (uint64_t)" with ID ", 9);
    v372 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v372, (uint64_t)" found (", 8);
    v373 = (_QWORD *)std::ostream::operator<<();
    v374 = sub_20E86A980(v373, (uint64_t)", ", 2);
    if (*(_BYTE *)(v367 + 20))
      v375 = "free";
    else
      v375 = "fixed";
    if (*(_BYTE *)(v367 + 20))
      v376 = 4;
    else
      v376 = 5;
    v377 = sub_20E86A980(v374, (uint64_t)v375, v376);
    sub_20E86A980(v377, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v367 + 20);
    v378 = *(char **)(v15 + 1200);
    v379 = *(char **)(v15 + 1208);
    v380 = v378;
    v381 = v379 - v378;
    if (v379 == v378)
      goto LABEL_516;
LABEL_511:
    v387 = v381 >> 4;
    v380 = v378;
    do
    {
      v388 = v387 >> 1;
      v389 = (unsigned int *)&v380[16 * (v387 >> 1)];
      v391 = *v389;
      v390 = (char *)(v389 + 4);
      v387 += ~(v387 >> 1);
      if (v391 < a2)
        v380 = v390;
      else
        v387 = v388;
    }
    while (v387);
    goto LABEL_516;
  }
  v382 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v383 = &__p;
  else
    v383 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v384 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v384 = __p.__r_.__value_.__l.__size_;
  v385 = sub_20E86A980(v382, (uint64_t)v383, v384);
  sub_20E86A980(v385, (uint64_t)" with ID ", 9);
  v386 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v386, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v378 = *(char **)(v15 + 1200);
  v379 = *(char **)(v15 + 1208);
  v380 = v378;
  v381 = v379 - v378;
  if (v379 != v378)
    goto LABEL_511;
LABEL_516:
  if (v380 != v379 && *(_DWORD *)v380 == a2)
  {
    if (v379 != v378)
    {
      v392 = (v379 - v378) >> 4;
      do
      {
        v393 = v392 >> 1;
        v394 = (unsigned int *)&v378[16 * (v392 >> 1)];
        v396 = *v394;
        v395 = (char *)(v394 + 4);
        v392 += ~(v392 >> 1);
        if (v396 < a2)
          v378 = v395;
        else
          v392 = v393;
      }
      while (v392);
    }
    if (v378 == v379 || *(_DWORD *)v378 != a2)
      v378 = v379;
    v397 = *((_QWORD *)v378 + 1);
    v398 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v399 = &__p;
    else
      v399 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v400 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v400 = __p.__r_.__value_.__l.__size_;
    v401 = sub_20E86A980(v398, (uint64_t)v399, v400);
    sub_20E86A980(v401, (uint64_t)" with ID ", 9);
    v402 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v402, (uint64_t)" found (", 8);
    v403 = (_QWORD *)std::ostream::operator<<();
    v404 = sub_20E86A980(v403, (uint64_t)", ", 2);
    if (*(_BYTE *)(v397 + 20))
      v405 = "free";
    else
      v405 = "fixed";
    if (*(_BYTE *)(v397 + 20))
      v406 = 4;
    else
      v406 = 5;
    v407 = sub_20E86A980(v404, (uint64_t)v405, v406);
    sub_20E86A980(v407, (uint64_t)")\n", 2);
    v408 = v257;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v397 + 20);
    v409 = *(char **)(v15 + 1200);
    v410 = *(char **)(v15 + 1208);
    v411 = v409;
    v412 = v410 - v409;
    if (v410 == v409)
      goto LABEL_557;
LABEL_552:
    v418 = v412 >> 4;
    v411 = v409;
    do
    {
      v419 = v418 >> 1;
      v420 = (unsigned int *)&v411[16 * (v418 >> 1)];
      v422 = *v420;
      v421 = (char *)(v420 + 4);
      v418 += ~(v418 >> 1);
      if (v422 < a4)
        v411 = v421;
      else
        v418 = v419;
    }
    while (v418);
    goto LABEL_557;
  }
  v413 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v414 = &__p;
  else
    v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v415 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v415 = __p.__r_.__value_.__l.__size_;
  v416 = sub_20E86A980(v413, (uint64_t)v414, v415);
  sub_20E86A980(v416, (uint64_t)" with ID ", 9);
  v417 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v417, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v408 = 0;
  v409 = *(char **)(v15 + 1200);
  v410 = *(char **)(v15 + 1208);
  v411 = v409;
  v412 = v410 - v409;
  if (v410 != v409)
    goto LABEL_552;
LABEL_557:
  if (v411 != v410 && *(_DWORD *)v411 == a4)
  {
    if (v410 != v409)
    {
      v423 = (v410 - v409) >> 4;
      do
      {
        v424 = v423 >> 1;
        v425 = (unsigned int *)&v409[16 * (v423 >> 1)];
        v427 = *v425;
        v426 = (char *)(v425 + 4);
        v423 += ~(v423 >> 1);
        if (v427 < a4)
          v409 = v426;
        else
          v423 = v424;
      }
      while (v423);
    }
    if (v409 == v410 || *(_DWORD *)v409 != a4)
      v409 = v410;
    v428 = *((_QWORD *)v409 + 1);
    v429 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v430 = &__p;
    else
      v430 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v431 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v431 = __p.__r_.__value_.__l.__size_;
    v432 = sub_20E86A980(v429, (uint64_t)v430, v431);
    sub_20E86A980(v432, (uint64_t)" with ID ", 9);
    v433 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v433, (uint64_t)" found (", 8);
    v434 = (_QWORD *)std::ostream::operator<<();
    v435 = sub_20E86A980(v434, (uint64_t)", ", 2);
    if (*(_BYTE *)(v428 + 20))
      v436 = "free";
    else
      v436 = "fixed";
    if (*(_BYTE *)(v428 + 20))
      v437 = 4;
    else
      v437 = 5;
    v438 = sub_20E86A980(v435, (uint64_t)v436, v437);
    sub_20E86A980(v438, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v428 + 20);
    v439 = *(char **)(v15 + 1296);
    v440 = *(char **)(v15 + 1304);
    v441 = v439;
    v442 = v440 - v439;
    if (v440 == v439)
      goto LABEL_598;
LABEL_593:
    v448 = v442 >> 4;
    v441 = v439;
    do
    {
      v449 = v448 >> 1;
      v450 = (unsigned int *)&v441[16 * (v448 >> 1)];
      v452 = *v450;
      v451 = (char *)(v450 + 4);
      v448 += ~(v448 >> 1);
      if (v452 < a5)
        v441 = v451;
      else
        v448 = v449;
    }
    while (v448);
    goto LABEL_598;
  }
  v443 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v444 = &__p;
  else
    v444 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v445 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v445 = __p.__r_.__value_.__l.__size_;
  v446 = sub_20E86A980(v443, (uint64_t)v444, v445);
  sub_20E86A980(v446, (uint64_t)" with ID ", 9);
  v447 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v447, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v408 = 0;
  v439 = *(char **)(v15 + 1296);
  v440 = *(char **)(v15 + 1304);
  v441 = v439;
  v442 = v440 - v439;
  if (v440 != v439)
    goto LABEL_593;
LABEL_598:
  if (v441 == v440 || *(_DWORD *)v441 != a5)
  {
    v473 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
    sub_20F622838((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v474 = &__p;
    else
      v474 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v475 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v475 = __p.__r_.__value_.__l.__size_;
    v476 = sub_20E86A980(v473, (uint64_t)v474, v475);
    sub_20E86A980(v476, (uint64_t)" with ID ", 9);
    v477 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v477, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v458 = 0;
      v470 = *(char **)(v15 + 1824);
      v471 = *(char **)(v15 + 1832);
      v472 = v471 - v470;
      if (v471 == v470)
        goto LABEL_653;
    }
    else
    {
      v458 = 0;
      v470 = *(char **)(v15 + 1824);
      v471 = *(char **)(v15 + 1832);
      v472 = v471 - v470;
      if (v471 == v470)
        goto LABEL_653;
    }
    goto LABEL_637;
  }
  if (v440 != v439)
  {
    v453 = (v440 - v439) >> 4;
    do
    {
      v454 = v453 >> 1;
      v455 = (unsigned int *)&v439[16 * (v453 >> 1)];
      v457 = *v455;
      v456 = (char *)(v455 + 4);
      v453 += ~(v453 >> 1);
      if (v457 < a5)
        v439 = v456;
      else
        v453 = v454;
    }
    while (v453);
  }
  v458 = v408;
  if (v439 == v440 || *(_DWORD *)v439 != a5)
    v439 = v440;
  v459 = *((_QWORD *)v439 + 1);
  v460 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v461 = &__p;
  else
    v461 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v462 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v462 = __p.__r_.__value_.__l.__size_;
  v463 = sub_20E86A980(v460, (uint64_t)v461, v462);
  sub_20E86A980(v463, (uint64_t)" with ID ", 9);
  v464 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v464, (uint64_t)" found (", 8);
  v465 = (_QWORD *)std::ostream::operator<<();
  v466 = sub_20E86A980(v465, (uint64_t)", ", 2);
  if (*(_BYTE *)(v459 + 20))
    v467 = "free";
  else
    v467 = "fixed";
  if (*(_BYTE *)(v459 + 20))
    v468 = 4;
  else
    v468 = 5;
  v469 = sub_20E86A980(v466, (uint64_t)v467, v468);
  sub_20E86A980(v469, (uint64_t)")\n", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v588 |= *(unsigned __int8 *)(v459 + 20);
  v470 = *(char **)(v15 + 1824);
  v471 = *(char **)(v15 + 1832);
  v472 = v471 - v470;
  if (v471 != v470)
  {
LABEL_637:
    v478 = 0x4EC4EC4EC4EC4EC5 * (v472 >> 4);
    do
    {
      v479 = v478 >> 1;
      v480 = (unint64_t *)&v470[208 * (v478 >> 1)];
      v482 = *v480;
      v481 = (char *)(v480 + 26);
      v478 += ~(v478 >> 1);
      if (v482 < v16)
        v470 = v481;
      else
        v478 = v479;
    }
    while (v478);
    if (v471 != v470 && *(_QWORD *)v470 == v16)
    {
      v483 = sub_20E86A980(&v619, (uint64_t)"error: factor ", 14);
      sub_20F9218B0((uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v484 = &__p;
      else
        v484 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v485 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v485 = __p.__r_.__value_.__l.__size_;
      v486 = sub_20E86A980(v483, (uint64_t)v484, v485);
      sub_20E86A980(v486, (uint64_t)" with the same ID ", 18);
      v487 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v487, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v458 = 0;
    }
  }
LABEL_653:
  if (v588)
  {
    v488 = v458 != 0;
    v489 = BYTE8(v626);
    if ((BYTE8(v626) & 0x10) == 0)
      goto LABEL_655;
LABEL_666:
    v497 = v626;
    if ((unint64_t)v626 < *((_QWORD *)&v623 + 1))
    {
      *(_QWORD *)&v626 = *((_QWORD *)&v623 + 1);
      v497 = *((_QWORD *)&v623 + 1);
    }
    v498 = (const void *)v623;
    v490 = v497 - v623;
    if ((unint64_t)(v497 - v623) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_694;
    goto LABEL_669;
  }
  v492 = sub_20E86A980(&v619, (uint64_t)"error: factor ", 14);
  sub_20F9218B0((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v493 = &__p;
  else
    v493 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v494 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v494 = __p.__r_.__value_.__l.__size_;
  v495 = sub_20E86A980(v492, (uint64_t)v493, v494);
  sub_20E86A980(v495, (uint64_t)" with ID ", 9);
  v496 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v496, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v488 = 0;
  v489 = BYTE8(v626);
  if ((BYTE8(v626) & 0x10) != 0)
    goto LABEL_666;
LABEL_655:
  if ((v489 & 8) == 0)
  {
    v490 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v491 = &__p;
    goto LABEL_676;
  }
  v498 = (const void *)v621;
  v490 = *(_QWORD *)&v622 - v621;
  if (*(_QWORD *)&v622 - (_QWORD)v621 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_694:
    sub_20E860B7C();
LABEL_669:
  if (v490 >= 0x17)
  {
    v499 = (v490 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v490 | 7) != 0x17)
      v499 = v490 | 7;
    v500 = v499 + 1;
    v491 = (std::string *)operator new(v499 + 1);
    __p.__r_.__value_.__l.__size_ = v490;
    __p.__r_.__value_.__r.__words[2] = v500 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v491;
    goto LABEL_675;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v490;
  v491 = &__p;
  if (v490)
LABEL_675:
    memmove(v491, v498, v490);
LABEL_676:
  v491->__r_.__value_.__s.__data_[v490] = 0;
  *(std::string *)v595 = __p;
  v595[24] = v488;
  v618.i64[0] = *MEMORY[0x24BEDB7F0];
  v501 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v618.i64 + *(_QWORD *)(v618.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v619 = v501;
  *((_QWORD *)&v619 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v625) < 0)
    operator delete(v624[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v627);
  v502 = std::string::insert((std::string *)v595, 0, "Failed to add the factor into linear system. This could be due to duplicated factor IDs ('", 0x5AuLL);
  v503 = *(_OWORD *)&v502->__r_.__value_.__l.__data_;
  v592.__r_.__value_.__r.__words[2] = v502->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v592.__r_.__value_.__l.__data_ = v503;
  v502->__r_.__value_.__l.__size_ = 0;
  v502->__r_.__value_.__r.__words[2] = 0;
  v502->__r_.__value_.__r.__words[0] = 0;
  v504 = std::string::append(&v592, "').", 3uLL);
  v505 = *(_OWORD *)&v504->__r_.__value_.__l.__data_;
  v617 = *(double *)&v504->__r_.__value_.__r.__words[2];
  *(_OWORD *)v616 = v505;
  v504->__r_.__value_.__l.__size_ = 0;
  v504->__r_.__value_.__r.__words[2] = 0;
  v504->__r_.__value_.__r.__words[0] = 0;
  if (v617 >= 0.0)
    v506 = v616;
  else
    v506 = (void **)v616[0];
  if (v617 >= 0.0)
    v507 = HIBYTE(v617);
  else
    v507 = (uint64_t)v616[1];
  v508 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLineSegmentFactorUtil.h", 102, (uint64_t)"result", 6, (uint64_t)v506, v507, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v617) < 0)
  {
    operator delete(v616[0]);
    if ((SHIBYTE(v592.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_686:
      if ((v595[23] & 0x80000000) == 0)
        goto LABEL_687;
      goto LABEL_691;
    }
  }
  else if ((SHIBYTE(v592.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_686;
  }
  operator delete(v592.__r_.__value_.__l.__data_);
  if ((v595[23] & 0x80000000) == 0)
  {
LABEL_687:
    if (!v508)
      return;
LABEL_692:
    abort();
  }
LABEL_691:
  operator delete(*(void **)v595);
  if (v508)
    goto LABEL_692;
}

void sub_20FC31D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20FB817A8((uint64_t)&a63);
  sub_20F4ACD60((uint64_t)&STACK[0x210]);
  sub_20F8AEE9C((uint64_t)&a37);
  sub_20E86665C((uint64_t)&a31);
  sub_20E86665C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20FC31DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (a68 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&STACK[0x210]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

unint64_t sub_20FC31EB8(unint64_t result, uint64_t *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  _QWORD ***v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  BOOL v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  BOOL v177;
  char v178;
  _QWORD **v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  uint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  int64_t v213;
  int64_t v214;
  _QWORD ***v215;
  int64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD **v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD **v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  _BOOL4 v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  unint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  _QWORD **v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  int64_t v314;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v319;

  v7 = (uint64_t *)result;
LABEL_2:
  v311 = a2 - 2;
  v313 = a2 - 1;
  v310 = a2 - 3;
  v8 = a3;
  v317 = a2;
  while (2)
  {
    v9 = v7;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v167 = *(a2 - 1);
        v168 = *v7;
        result = sub_20F625764(*a3, *(uint64_t **)(v167 + 496), *(_QWORD *)(v167 + 504), *(uint64_t **)(*v7 + 496), *(_QWORD *)(*v7 + 504));
        if ((_DWORD)result)
        {
          *v7 = v167;
          *(a2 - 1) = v168;
        }
        return result;
      case 3:
        return sub_20FC33704(v7, v7 + 1, v313, a3);
      case 4:
        v169 = v7 + 1;
        v170 = v7 + 2;
        sub_20FC33704(v7, v7 + 1, v7 + 2, a3);
        v171 = *(a2 - 1);
        v172 = v7[2];
        result = sub_20F625764(*a3, *(uint64_t **)(v171 + 496), *(_QWORD *)(v171 + 504), *(uint64_t **)(v172 + 496), *(_QWORD *)(v172 + 504));
        if ((_DWORD)result)
        {
          *v170 = v171;
          *(a2 - 1) = v172;
          v173 = *v170;
          v174 = *v169;
          result = sub_20F625764(*a3, *(uint64_t **)(*v170 + 496), *(_QWORD *)(*v170 + 504), *(uint64_t **)(*v169 + 496), *(_QWORD *)(*v169 + 504));
          if ((_DWORD)result)
          {
            v7[1] = v173;
            v7[2] = v174;
            v175 = *v7;
            result = sub_20F625764(*a3, *(uint64_t **)(v173 + 496), *(_QWORD *)(v173 + 504), *(uint64_t **)(*v7 + 496), *(_QWORD *)(*v7 + 504));
            if ((_DWORD)result)
            {
              *v7 = v173;
              v7[1] = v175;
            }
          }
        }
        return result;
      case 5:
        return sub_20FC33A34(v7, v7 + 1, v7 + 2, v7 + 3, v313, a3);
      default:
        if (v10 > 191)
        {
          v319 = v7;
          if (!a4)
          {
            if (v7 != a2)
            {
              v312 = (char *)a2 - (char *)v7;
              v213 = (unint64_t)(v11 - 2) >> 1;
              v214 = v213;
              v215 = a3;
              do
              {
                v216 = v214;
                if (v213 >= v214)
                {
                  v314 = v214;
                  v217 = (2 * v214) | 1;
                  v218 = v319;
                  v219 = &v319[v217];
                  v220 = 2 * v214 + 2;
                  v221 = *v215;
                  if (v220 >= v11)
                  {
                    v222 = *v219;
                  }
                  else
                  {
                    v222 = *v219;
                    v223 = v219[1];
                    v224 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 496), *(_QWORD *)(*v219 + 504), *(uint64_t **)(v223 + 496), *(_QWORD *)(v223 + 504));
                    if (v224)
                    {
                      v222 = v223;
                      ++v219;
                    }
                    v218 = v319;
                    if (v224)
                      v217 = v220;
                  }
                  v216 = v314;
                  v225 = &v218[v314];
                  v226 = *v225;
                  result = sub_20F625764(v221, *(uint64_t **)(v222 + 496), *(_QWORD *)(v222 + 504), *(uint64_t **)(*v225 + 496), *(_QWORD *)(*v225 + 504));
                  if ((result & 1) == 0)
                  {
                    v316 = v226;
                    while (1)
                    {
                      v231 = v219;
                      *v225 = v222;
                      if (v213 < v217)
                        break;
                      v232 = (2 * v217) | 1;
                      v219 = &v319[v232];
                      v217 = 2 * v217 + 2;
                      v233 = *v215;
                      if (v217 < v11)
                      {
                        v222 = *v219;
                        v227 = v11;
                        v228 = v213;
                        v229 = v219[1];
                        v230 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 496), *(_QWORD *)(*v219 + 504), *(uint64_t **)(v229 + 496), *(_QWORD *)(v229 + 504));
                        if (v230)
                          v222 = v229;
                        v213 = v228;
                        v11 = v227;
                        v226 = v316;
                        if (v230)
                          ++v219;
                        v215 = a3;
                        if (!v230)
                          v217 = v232;
                        result = sub_20F625764(v233, *(uint64_t **)(v222 + 496), *(_QWORD *)(v222 + 504), *(uint64_t **)(v316 + 496), *(_QWORD *)(v316 + 504));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                      else
                      {
                        v222 = *v219;
                        v217 = v232;
                        result = sub_20F625764(*v215, *(uint64_t **)(*v219 + 496), *(_QWORD *)(*v219 + 504), *(uint64_t **)(v226 + 496), *(_QWORD *)(v226 + 504));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                    }
                    *v231 = v226;
                    v216 = v314;
                  }
                }
                v214 = v216 - 1;
              }
              while (v216);
              v234 = v312 >> 3;
              v235 = v317;
              do
              {
                v237 = 0;
                v238 = *v319;
                v239 = v319;
                do
                {
                  v241 = &v239[v237 + 1];
                  v242 = (2 * v237) | 1;
                  v243 = 2 * v237 + 2;
                  if (v243 < v234)
                  {
                    v244 = v241[1];
                    v245 = *(uint64_t **)(*v241 + 496);
                    v246 = (uint64_t)(*(_QWORD *)(*v241 + 504) - (_QWORD)v245) >> 6;
                    result = *(_QWORD *)(v244 + 496);
                    v247 = (uint64_t)(*(_QWORD *)(v244 + 504) - result) >> 6;
                    if (v246 == v247)
                    {
                      v248 = (**a3)[1];
                      v251 = *(_QWORD *)(v248 + 56);
                      v249 = v248 + 56;
                      v250 = v251;
                      if (!v251)
                        goto LABEL_455;
                      v252 = *v245;
                      v253 = *((_DWORD *)v245 + 2);
                      v254 = v249;
                      v255 = v250;
                      do
                      {
                        v256 = *(_QWORD *)(v255 + 32);
                        if (v256 < v252)
                        {
                          v255 += 8;
                        }
                        else if (v256 == v252)
                        {
                          if (*(_DWORD *)(v255 + 40) < v253)
                            v255 += 8;
                          else
                            v254 = v255;
                        }
                        else
                        {
                          v254 = v255;
                        }
                        v255 = *(_QWORD *)v255;
                      }
                      while (v255);
                      if (v254 == v249
                        || (v257 = *(_QWORD *)(v254 + 32), v252 < v257)
                        || v252 == v257 && *(_DWORD *)(v254 + 40) > v253)
                      {
LABEL_455:
                        v254 = v249;
                      }
                      v258 = (_QWORD *)*(*a3)[1];
                      if (v258 == (_QWORD *)v254)
                      {
                        v259 = 0;
                      }
                      else
                      {
                        v259 = 0;
                        v260 = (_QWORD *)*(*a3)[1];
                        do
                        {
                          v261 = (_QWORD *)v260[1];
                          if (v261)
                          {
                            do
                            {
                              v262 = v261;
                              v261 = (_QWORD *)*v261;
                            }
                            while (v261);
                          }
                          else
                          {
                            do
                            {
                              v262 = (_QWORD *)v260[2];
                              v177 = *v262 == (_QWORD)v260;
                              v260 = v262;
                            }
                            while (!v177);
                          }
                          ++v259;
                          v260 = v262;
                        }
                        while (v262 != (_QWORD *)v254);
                      }
                      if (!v250)
                        goto LABEL_480;
                      v263 = *(_QWORD *)result;
                      v264 = *(_DWORD *)(result + 8);
                      result = v249;
                      do
                      {
                        v265 = *(_QWORD *)(v250 + 32);
                        if (v265 < v263)
                        {
                          v250 += 8;
                        }
                        else if (v265 == v263)
                        {
                          if (*(_DWORD *)(v250 + 40) < v264)
                            v250 += 8;
                          else
                            result = v250;
                        }
                        else
                        {
                          result = v250;
                        }
                        v250 = *(_QWORD *)v250;
                      }
                      while (v250);
                      if (result == v249
                        || (v266 = *(_QWORD *)(result + 32), v263 < v266)
                        || v263 == v266 && *(_DWORD *)(result + 40) > v264)
                      {
LABEL_480:
                        result = v249;
                      }
                      if (v258 == (_QWORD *)result)
                      {
                        v267 = 0;
                      }
                      else
                      {
                        v267 = 0;
                        do
                        {
                          v268 = (_QWORD *)v258[1];
                          if (v268)
                          {
                            do
                            {
                              v269 = v268;
                              v268 = (_QWORD *)*v268;
                            }
                            while (v268);
                          }
                          else
                          {
                            do
                            {
                              v269 = (_QWORD *)v258[2];
                              v177 = *v269 == (_QWORD)v258;
                              v258 = v269;
                            }
                            while (!v177);
                          }
                          ++v267;
                          v258 = v269;
                        }
                        while (v269 != (_QWORD *)result);
                      }
                      v240 = v259 > v267;
                    }
                    else
                    {
                      v240 = v246 > v247;
                    }
                    if (v240)
                    {
                      ++v241;
                      v242 = v243;
                    }
                  }
                  *v239 = *v241;
                  v239 = v241;
                  v237 = v242;
                }
                while (v242 <= (uint64_t)((unint64_t)(v234 - 2) >> 1));
                if (v241 == --v235)
                {
                  *v241 = v238;
                }
                else
                {
                  *v241 = *v235;
                  *v235 = v238;
                  v270 = (char *)v241 - (char *)v319 + 8;
                  if (v270 >= 9)
                  {
                    v271 = (((unint64_t)v270 >> 3) - 2) >> 1;
                    v272 = &v319[v271];
                    v273 = *v272;
                    v274 = *v241;
                    result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 496), *(_QWORD *)(*v272 + 504), *(uint64_t **)(*v241 + 496), *(_QWORD *)(*v241 + 504));
                    if ((_DWORD)result)
                    {
                      v275 = v235;
                      do
                      {
                        v276 = v272;
                        *v241 = v273;
                        if (!v271)
                          break;
                        v271 = (v271 - 1) >> 1;
                        v272 = &v319[v271];
                        v273 = *v272;
                        result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 496), *(_QWORD *)(*v272 + 504), *(uint64_t **)(v274 + 496), *(_QWORD *)(v274 + 504));
                        v241 = v276;
                      }
                      while ((result & 1) != 0);
                      *v276 = v274;
                      v235 = v275;
                    }
                  }
                }
              }
              while (v234-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            sub_20FC33704(v13, v7, v313, v8);
            --a4;
            v16 = *v7;
            v17 = *v8;
            if ((a5 & 1) != 0)
            {
LABEL_11:
              v20 = a4;
              v19 = *(_QWORD *)(v16 + 496);
              v18 = *(_QWORD *)(v16 + 504);
              goto LABEL_12;
            }
          }
          else
          {
            sub_20FC33704(v7, v13, v313, v8);
            v14 = v12;
            sub_20FC33704(v7 + 1, &v7[v14 - 1], v311, a3);
            sub_20FC33704(v7 + 2, &v7[v14 + 1], v310, a3);
            sub_20FC33704(&v7[v14 - 1], v13, &v7[v14 + 1], a3);
            v15 = *v7;
            *v7 = v7[v14];
            v7[v14] = v15;
            v8 = a3;
            --a4;
            v16 = *v7;
            v17 = *a3;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v19 = *(_QWORD *)(v16 + 496);
          v18 = *(_QWORD *)(v16 + 504);
          if (!sub_20F625764(v17, *(uint64_t **)(*(v7 - 1) + 496), *(_QWORD *)(*(v7 - 1) + 504), (uint64_t *)v19, v18))
          {
            result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v313 + 496), *(_QWORD *)(*v313 + 504));
            if ((result & 1) != 0)
            {
              do
              {
                v112 = v7[1];
                ++v7;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v112 + 496), *(_QWORD *)(v112 + 504));
              }
              while ((result & 1) == 0);
            }
            else
            {
              v113 = v7 + 1;
              do
              {
                v7 = v113;
                if (v113 >= v317)
                  break;
                ++v113;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v7 + 496), *(_QWORD *)(*v7 + 504));
              }
              while (!(_DWORD)result);
            }
            v114 = v317;
            if (v7 < v317)
            {
              v114 = v317;
              do
              {
                v115 = *--v114;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v115 + 496), *(_QWORD *)(v115 + 504));
              }
              while ((result & 1) != 0);
            }
            if (v7 >= v114)
            {
              a2 = v317;
            }
            else
            {
              v116 = *v7;
              v117 = *v114;
              a2 = v317;
              do
              {
                *v7 = v117;
                *v114 = v116;
                v118 = *(_QWORD *)(v16 + 496);
                v119 = (*(_QWORD *)(v16 + 504) - v118) >> 6;
                v120 = *v8;
                do
                {
                  while (1)
                  {
                    v121 = v7[1];
                    ++v7;
                    v116 = v121;
                    v122 = *(_QWORD *)(v121 + 496);
                    v123 = (*(_QWORD *)(v121 + 504) - v122) >> 6;
                    if (v119 == v123)
                      break;
                    if (v119 > v123)
                      goto LABEL_265;
                  }
                  v124 = (*v120)[1];
                  v127 = *(_QWORD *)(v124 + 56);
                  v125 = v124 + 56;
                  v126 = v127;
                  if (!v127)
                    goto LABEL_226;
                  v128 = *(_QWORD *)v118;
                  v129 = *(_DWORD *)(v118 + 8);
                  v130 = v125;
                  result = v126;
                  do
                  {
                    v131 = *(_QWORD *)(result + 32);
                    if (v131 < v128)
                    {
                      result += 8;
                    }
                    else if (v131 == v128)
                    {
                      if (*(_DWORD *)(result + 40) < v129)
                        result += 8;
                      else
                        v130 = result;
                    }
                    else
                    {
                      v130 = result;
                    }
                    result = *(_QWORD *)result;
                  }
                  while (result);
                  if (v130 == v125
                    || (result = *(_QWORD *)(v130 + 32), v128 < result)
                    || v128 == result && *(_DWORD *)(v130 + 40) > v129)
                  {
LABEL_226:
                    v130 = v125;
                  }
                  v132 = (_QWORD *)*v120[1];
                  if (v132 == (_QWORD *)v130)
                  {
                    v133 = 0;
                  }
                  else
                  {
                    v133 = 0;
                    result = *v120[1];
                    do
                    {
                      v134 = *(_QWORD **)(result + 8);
                      if (v134)
                      {
                        do
                        {
                          v135 = v134;
                          v134 = (_QWORD *)*v134;
                        }
                        while (v134);
                      }
                      else
                      {
                        do
                        {
                          v135 = *(_QWORD **)(result + 16);
                          v177 = *v135 == result;
                          result = (unint64_t)v135;
                        }
                        while (!v177);
                      }
                      ++v133;
                      result = (unint64_t)v135;
                    }
                    while (v135 != (_QWORD *)v130);
                  }
                  if (!v126)
                    goto LABEL_251;
                  result = *(_QWORD *)v122;
                  v136 = *(_DWORD *)(v122 + 8);
                  v137 = v125;
                  do
                  {
                    v138 = *(_QWORD *)(v126 + 32);
                    if (v138 < result)
                    {
                      v126 += 8;
                    }
                    else if (v138 == result)
                    {
                      if (*(_DWORD *)(v126 + 40) < v136)
                        v126 += 8;
                      else
                        v137 = v126;
                    }
                    else
                    {
                      v137 = v126;
                    }
                    v126 = *(_QWORD *)v126;
                  }
                  while (v126);
                  if (v137 == v125
                    || (v139 = *(_QWORD *)(v137 + 32), result < v139)
                    || result == v139 && *(_DWORD *)(v137 + 40) > v136)
                  {
LABEL_251:
                    v137 = v125;
                  }
                  if (v132 == (_QWORD *)v137)
                  {
                    v140 = 0;
                  }
                  else
                  {
                    v140 = 0;
                    do
                    {
                      v141 = (_QWORD *)v132[1];
                      if (v141)
                      {
                        do
                        {
                          v142 = v141;
                          v141 = (_QWORD *)*v141;
                        }
                        while (v141);
                      }
                      else
                      {
                        do
                        {
                          v142 = (_QWORD *)v132[2];
                          v177 = *v142 == (_QWORD)v132;
                          v132 = v142;
                        }
                        while (!v177);
                      }
                      ++v140;
                      v132 = v142;
                    }
                    while (v142 != (_QWORD *)v137);
                  }
                }
                while (v133 <= v140);
                do
                {
LABEL_265:
                  while (1)
                  {
                    v143 = *--v114;
                    v117 = v143;
                    v144 = *(unint64_t **)(v143 + 496);
                    v145 = (uint64_t)(*(_QWORD *)(v143 + 504) - (_QWORD)v144) >> 6;
                    if (v119 == v145)
                      break;
                    if (v119 <= v145)
                      goto LABEL_208;
                  }
                  v146 = (*v120)[1];
                  v149 = *(_QWORD *)(v146 + 56);
                  v147 = v146 + 56;
                  v148 = v149;
                  if (!v149)
                    goto LABEL_280;
                  v150 = *(_QWORD *)v118;
                  v151 = *(_DWORD *)(v118 + 8);
                  result = v147;
                  v152 = v148;
                  do
                  {
                    v153 = *(_QWORD *)(v152 + 32);
                    if (v153 < v150)
                    {
                      v152 += 8;
                    }
                    else if (v153 == v150)
                    {
                      if (*(_DWORD *)(v152 + 40) < v151)
                        v152 += 8;
                      else
                        result = v152;
                    }
                    else
                    {
                      result = v152;
                    }
                    v152 = *(_QWORD *)v152;
                  }
                  while (v152);
                  if (result == v147
                    || (v154 = *(_QWORD *)(result + 32), v150 < v154)
                    || v150 == v154 && *(_DWORD *)(result + 40) > v151)
                  {
LABEL_280:
                    result = v147;
                  }
                  v155 = (unint64_t *)*v120[1];
                  if (v155 == (unint64_t *)result)
                  {
                    v156 = 0;
                  }
                  else
                  {
                    v156 = 0;
                    v157 = (_QWORD *)*v120[1];
                    do
                    {
                      v158 = (_QWORD *)v157[1];
                      if (v158)
                      {
                        do
                        {
                          v159 = v158;
                          v158 = (_QWORD *)*v158;
                        }
                        while (v158);
                      }
                      else
                      {
                        do
                        {
                          v159 = (_QWORD *)v157[2];
                          v177 = *v159 == (_QWORD)v157;
                          v157 = v159;
                        }
                        while (!v177);
                      }
                      ++v156;
                      v157 = v159;
                    }
                    while (v159 != (_QWORD *)result);
                  }
                  if (!v148)
                    goto LABEL_305;
                  v160 = *v144;
                  result = *((unsigned int *)v144 + 2);
                  v161 = v147;
                  do
                  {
                    v162 = *(_QWORD *)(v148 + 32);
                    if (v162 < v160)
                    {
                      v148 += 8;
                    }
                    else if (v162 == v160)
                    {
                      if (*(_DWORD *)(v148 + 40) < result)
                        v148 += 8;
                      else
                        v161 = v148;
                    }
                    else
                    {
                      v161 = v148;
                    }
                    v148 = *(_QWORD *)v148;
                  }
                  while (v148);
                  if (v161 == v147
                    || (v163 = *(_QWORD *)(v161 + 32), v160 < v163)
                    || v160 == v163 && *(_DWORD *)(v161 + 40) > result)
                  {
LABEL_305:
                    v161 = v147;
                  }
                  if (v155 == (unint64_t *)v161)
                  {
                    v164 = 0;
                  }
                  else
                  {
                    v164 = 0;
                    do
                    {
                      result = v155[1];
                      if (result)
                      {
                        do
                        {
                          v165 = (unint64_t *)result;
                          result = *(_QWORD *)result;
                        }
                        while (result);
                      }
                      else
                      {
                        do
                        {
                          v165 = (unint64_t *)v155[2];
                          result = *v165;
                          v177 = *v165 == (_QWORD)v155;
                          v155 = v165;
                        }
                        while (!v177);
                      }
                      ++v164;
                      v155 = v165;
                    }
                    while (v165 != (unint64_t *)v161);
                  }
                }
                while (v156 > v164);
LABEL_208:
                ;
              }
              while (v7 < v114);
            }
            v166 = v7 - 1;
            if (v7 - 1 != v9)
              *v9 = *v166;
            a5 = 0;
            *v166 = v16;
            continue;
          }
          v20 = a4;
LABEL_12:
          v21 = (v18 - v19) >> 6;
          do
          {
            while (1)
            {
              v22 = v7;
              v24 = v7[1];
              ++v7;
              v23 = v24;
              v25 = *(uint64_t **)(v24 + 496);
              v26 = (uint64_t)(*(_QWORD *)(v24 + 504) - (_QWORD)v25) >> 6;
              if (v26 == v21)
                break;
              if (v26 <= v21)
                goto LABEL_69;
            }
            v27 = (*v17)[1];
            v30 = *(uint64_t **)(v27 + 56);
            v28 = (uint64_t *)(v27 + 56);
            v29 = v30;
            if (!v30)
              goto LABEL_27;
            v31 = *v25;
            v32 = *((_DWORD *)v25 + 2);
            v33 = v28;
            v34 = v29;
            do
            {
              v35 = v34[4];
              if (v35 < v31)
              {
                ++v34;
              }
              else if (v35 == v31)
              {
                if (*((_DWORD *)v34 + 10) < v32)
                  ++v34;
                else
                  v33 = v34;
              }
              else
              {
                v33 = v34;
              }
              v34 = (uint64_t *)*v34;
            }
            while (v34);
            if (v33 == v28 || (v36 = v33[4], v31 < v36) || v31 == v36 && *((_DWORD *)v33 + 10) > v32)
LABEL_27:
              v33 = v28;
            v37 = (uint64_t *)*v17[1];
            if (v37 == v33)
            {
              v38 = 0;
            }
            else
            {
              v38 = 0;
              v39 = (uint64_t *)*v17[1];
              do
              {
                v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    v41 = v40;
                    v40 = (uint64_t *)*v40;
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    v41 = (uint64_t *)v39[2];
                    v177 = *v41 == (_QWORD)v39;
                    v39 = v41;
                  }
                  while (!v177);
                }
                ++v38;
                v39 = v41;
              }
              while (v41 != v33);
            }
            if (!v29)
              goto LABEL_50;
            v42 = *(_QWORD *)v19;
            v43 = *(_DWORD *)(v19 + 8);
            v44 = v28;
            do
            {
              v45 = v29[4];
              if (v45 < v42)
              {
                ++v29;
              }
              else if (v45 == v42)
              {
                if (*((_DWORD *)v29 + 10) < v43)
                  ++v29;
                else
                  v44 = v29;
              }
              else
              {
                v44 = v29;
              }
              v29 = (uint64_t *)*v29;
            }
            while (v29);
            if (v44 == v28 || (v46 = v44[4], v42 < v46) || v42 == v46 && *((_DWORD *)v44 + 10) > v43)
LABEL_50:
              v44 = v28;
            if (v37 == v44)
            {
              v47 = 0;
            }
            else
            {
              v47 = 0;
              do
              {
                v48 = (uint64_t *)v37[1];
                if (v48)
                {
                  do
                  {
                    v49 = v48;
                    v48 = (uint64_t *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    v49 = (uint64_t *)v37[2];
                    v177 = *v49 == (_QWORD)v37;
                    v37 = v49;
                  }
                  while (!v177);
                }
                ++v47;
                v37 = v49;
              }
              while (v49 != v44);
            }
          }
          while (v38 > v47);
LABEL_69:
          v50 = v317;
          if (v22 == v319)
          {
            v50 = v317;
            do
            {
              if (v7 >= v50)
                break;
              v52 = *--v50;
            }
            while (!sub_20F625764(v17, *(uint64_t **)(v52 + 496), *(_QWORD *)(v52 + 504), (uint64_t *)v19, v18));
          }
          else
          {
            do
              v51 = *--v50;
            while (!sub_20F625764(v17, *(uint64_t **)(v51 + 496), *(_QWORD *)(v51 + 504), (uint64_t *)v19, v18));
          }
          a2 = v317;
          if (v7 < v50)
          {
            v53 = *v50;
            v54 = v7;
            v55 = v50;
            do
            {
              *v54 = v53;
              *v55 = v23;
              v56 = *(uint64_t **)(v16 + 496);
              v57 = (uint64_t)(*(_QWORD *)(v16 + 504) - (_QWORD)v56) >> 6;
              v58 = *v8;
              do
              {
                while (1)
                {
                  v22 = v54;
                  v59 = v54[1];
                  ++v54;
                  v23 = v59;
                  v60 = *(uint64_t **)(v59 + 496);
                  v61 = (uint64_t)(*(_QWORD *)(v59 + 504) - (_QWORD)v60) >> 6;
                  if (v61 == v57)
                    break;
                  if (v61 <= v57)
                    goto LABEL_136;
                }
                v62 = (*v58)[1];
                v65 = *(uint64_t **)(v62 + 56);
                v63 = (uint64_t *)(v62 + 56);
                v64 = v65;
                if (!v65)
                  goto LABEL_93;
                v66 = *v60;
                v67 = *((_DWORD *)v60 + 2);
                v68 = v63;
                v69 = v64;
                do
                {
                  v70 = v69[4];
                  if (v70 < v66)
                  {
                    ++v69;
                  }
                  else if (v70 == v66)
                  {
                    if (*((_DWORD *)v69 + 10) < v67)
                      ++v69;
                    else
                      v68 = v69;
                  }
                  else
                  {
                    v68 = v69;
                  }
                  v69 = (uint64_t *)*v69;
                }
                while (v69);
                if (v68 == v63 || (v71 = v68[4], v66 < v71) || v66 == v71 && *((_DWORD *)v68 + 10) > v67)
LABEL_93:
                  v68 = v63;
                v72 = (uint64_t *)*v58[1];
                if (v72 == v68)
                {
                  v73 = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = (uint64_t *)*v58[1];
                  do
                  {
                    v75 = (uint64_t *)v74[1];
                    if (v75)
                    {
                      do
                      {
                        v76 = v75;
                        v75 = (uint64_t *)*v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      do
                      {
                        v76 = (uint64_t *)v74[2];
                        v177 = *v76 == (_QWORD)v74;
                        v74 = v76;
                      }
                      while (!v177);
                    }
                    ++v73;
                    v74 = v76;
                  }
                  while (v76 != v68);
                }
                if (!v64)
                  goto LABEL_116;
                v77 = *v56;
                v78 = *((_DWORD *)v56 + 2);
                v79 = v63;
                do
                {
                  v80 = v64[4];
                  if (v80 < v77)
                  {
                    ++v64;
                  }
                  else if (v80 == v77)
                  {
                    if (*((_DWORD *)v64 + 10) < v78)
                      ++v64;
                    else
                      v79 = v64;
                  }
                  else
                  {
                    v79 = v64;
                  }
                  v64 = (uint64_t *)*v64;
                }
                while (v64);
                if (v79 == v63 || (v81 = v79[4], v77 < v81) || v77 == v81 && *((_DWORD *)v79 + 10) > v78)
LABEL_116:
                  v79 = v63;
                if (v72 == v79)
                {
                  v82 = 0;
                }
                else
                {
                  v82 = 0;
                  do
                  {
                    v83 = (uint64_t *)v72[1];
                    if (v83)
                    {
                      do
                      {
                        v84 = v83;
                        v83 = (uint64_t *)*v83;
                      }
                      while (v83);
                    }
                    else
                    {
                      do
                      {
                        v84 = (uint64_t *)v72[2];
                        v177 = *v84 == (_QWORD)v72;
                        v72 = v84;
                      }
                      while (!v177);
                    }
                    ++v82;
                    v72 = v84;
                  }
                  while (v84 != v79);
                }
              }
              while (v73 > v82);
              do
              {
LABEL_136:
                while (1)
                {
                  v85 = *--v55;
                  v53 = v85;
                  v86 = *(uint64_t **)(v85 + 496);
                  v87 = (uint64_t)(*(_QWORD *)(v85 + 504) - (_QWORD)v86) >> 6;
                  if (v87 == v57)
                    break;
                  if (v87 > v57)
                    goto LABEL_77;
                }
                v88 = (*v58)[1];
                v91 = *(uint64_t **)(v88 + 56);
                v89 = (uint64_t *)(v88 + 56);
                v90 = v91;
                if (!v91)
                  goto LABEL_149;
                v92 = *v86;
                v93 = *((_DWORD *)v86 + 2);
                v94 = v89;
                v95 = v90;
                do
                {
                  v96 = v95[4];
                  if (v96 < v92)
                  {
                    ++v95;
                  }
                  else if (v96 == v92)
                  {
                    if (*((_DWORD *)v95 + 10) < v93)
                      ++v95;
                    else
                      v94 = v95;
                  }
                  else
                  {
                    v94 = v95;
                  }
                  v95 = (uint64_t *)*v95;
                }
                while (v95);
                if (v94 == v89 || (v97 = v94[4], v92 < v97) || v92 == v97 && *((_DWORD *)v94 + 10) > v93)
LABEL_149:
                  v94 = v89;
                v98 = (uint64_t *)*v58[1];
                if (v98 == v94)
                {
                  v99 = 0;
                }
                else
                {
                  v99 = 0;
                  v100 = (uint64_t *)*v58[1];
                  do
                  {
                    v101 = (uint64_t *)v100[1];
                    if (v101)
                    {
                      do
                      {
                        v102 = v101;
                        v101 = (uint64_t *)*v101;
                      }
                      while (v101);
                    }
                    else
                    {
                      do
                      {
                        v102 = (uint64_t *)v100[2];
                        v177 = *v102 == (_QWORD)v100;
                        v100 = v102;
                      }
                      while (!v177);
                    }
                    ++v99;
                    v100 = v102;
                  }
                  while (v102 != v94);
                }
                if (!v90)
                  goto LABEL_172;
                v103 = *v56;
                v104 = *((_DWORD *)v56 + 2);
                v105 = v89;
                do
                {
                  v106 = v90[4];
                  if (v106 < v103)
                  {
                    ++v90;
                  }
                  else if (v106 == v103)
                  {
                    if (*((_DWORD *)v90 + 10) < v104)
                      ++v90;
                    else
                      v105 = v90;
                  }
                  else
                  {
                    v105 = v90;
                  }
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                if (v105 == v89 || (v107 = v105[4], v103 < v107) || v103 == v107 && *((_DWORD *)v105 + 10) > v104)
LABEL_172:
                  v105 = v89;
                if (v98 == v105)
                {
                  v108 = 0;
                }
                else
                {
                  v108 = 0;
                  do
                  {
                    v109 = (uint64_t *)v98[1];
                    if (v109)
                    {
                      do
                      {
                        v110 = v109;
                        v109 = (uint64_t *)*v109;
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        v110 = (uint64_t *)v98[2];
                        v177 = *v110 == (_QWORD)v98;
                        v98 = v110;
                      }
                      while (!v177);
                    }
                    ++v108;
                    v98 = v110;
                  }
                  while (v110 != v105);
                }
              }
              while (v99 <= v108);
LABEL_77:
              ;
            }
            while (v54 < v55);
          }
          if (v22 != v319)
            *v319 = *v22;
          *v22 = v16;
          a4 = v20;
          if (v7 < v50)
            goto LABEL_196;
          v111 = sub_20FC33810(v319, v22, v8);
          v7 = v22 + 1;
          result = sub_20FC33810(v22 + 1, v317, v8);
          if (!(_DWORD)result)
          {
            if (v111)
              continue;
LABEL_196:
            result = sub_20FC31EB8(v319, v22, v8, v20, a5 & 1);
            a5 = 0;
            v7 = v22 + 1;
            continue;
          }
          a2 = v22;
          v7 = v319;
          if (v111)
            return result;
          goto LABEL_2;
        }
        v176 = v7 + 1;
        v177 = v7 == a2 || v176 == a2;
        v178 = v177;
        if ((a5 & 1) != 0)
        {
          if ((v178 & 1) == 0)
          {
            v179 = *a3;
            v180 = v7;
            do
            {
              v182 = v176;
              v183 = *v180;
              v184 = v180[1];
              result = sub_20F625764(v179, *(uint64_t **)(v184 + 496), *(_QWORD *)(v184 + 504), *(uint64_t **)(*v180 + 496), *(_QWORD *)(*v180 + 504));
              if ((_DWORD)result)
              {
                v180[1] = v183;
                v181 = v7;
                if (v180 != v7)
                {
                  v185 = v180;
                  do
                  {
                    v187 = *--v185;
                    v186 = v187;
                    v188 = *(_QWORD *)(v184 + 496);
                    v189 = (*(_QWORD *)(v184 + 504) - v188) >> 6;
                    v190 = *(uint64_t **)(v187 + 496);
                    v191 = (uint64_t)(*(_QWORD *)(v187 + 504) - (_QWORD)v190) >> 6;
                    if (v189 == v191)
                    {
                      v192 = (**a3)[1];
                      v195 = *(uint64_t **)(v192 + 56);
                      v193 = (unint64_t *)(v192 + 56);
                      v194 = v195;
                      if (!v195)
                        goto LABEL_363;
                      v196 = *(_QWORD *)v188;
                      v197 = *(_DWORD *)(v188 + 8);
                      v198 = v193;
                      v199 = v194;
                      do
                      {
                        result = v199[4];
                        if (result < v196)
                        {
                          ++v199;
                        }
                        else if (result == v196)
                        {
                          result = *((_DWORD *)v199 + 10) < v197;
                          if (*((_DWORD *)v199 + 10) < v197)
                            ++v199;
                          else
                            v198 = (unint64_t *)v199;
                        }
                        else
                        {
                          v198 = (unint64_t *)v199;
                        }
                        v199 = (uint64_t *)*v199;
                      }
                      while (v199);
                      if (v198 == v193
                        || (v200 = v198[4], v196 < v200)
                        || v196 == v200 && *((_DWORD *)v198 + 10) > v197)
                      {
LABEL_363:
                        v198 = v193;
                      }
                      v201 = (unint64_t *)*(*a3)[1];
                      if (v201 == v198)
                      {
                        v202 = 0;
                      }
                      else
                      {
                        v202 = 0;
                        v203 = (unint64_t *)*(*a3)[1];
                        do
                        {
                          result = v203[1];
                          if (result)
                          {
                            do
                            {
                              v204 = (unint64_t *)result;
                              result = *(_QWORD *)result;
                            }
                            while (result);
                          }
                          else
                          {
                            do
                            {
                              v204 = (unint64_t *)v203[2];
                              result = *v204;
                              v177 = *v204 == (_QWORD)v203;
                              v203 = v204;
                            }
                            while (!v177);
                          }
                          ++v202;
                          v203 = v204;
                        }
                        while (v204 != v198);
                      }
                      if (!v194)
                        goto LABEL_386;
                      v205 = *v190;
                      v206 = *((_DWORD *)v190 + 2);
                      v207 = v193;
                      do
                      {
                        v208 = v194[4];
                        if (v208 < v205)
                        {
                          ++v194;
                        }
                        else if (v208 == v205)
                        {
                          result = (unint64_t)(v194 + 1);
                          if (*((_DWORD *)v194 + 10) < v206)
                            ++v194;
                          else
                            v207 = (unint64_t *)v194;
                        }
                        else
                        {
                          v207 = (unint64_t *)v194;
                        }
                        v194 = (uint64_t *)*v194;
                      }
                      while (v194);
                      if (v207 == v193
                        || (v209 = v207[4], v205 < v209)
                        || v205 == v209 && *((_DWORD *)v207 + 10) > v206)
                      {
LABEL_386:
                        v207 = v193;
                      }
                      if (v201 == v207)
                      {
                        v210 = 0;
                      }
                      else
                      {
                        v210 = 0;
                        do
                        {
                          v211 = (unint64_t *)v201[1];
                          if (v211)
                          {
                            do
                            {
                              v212 = v211;
                              v211 = (unint64_t *)*v211;
                            }
                            while (v211);
                          }
                          else
                          {
                            do
                            {
                              v212 = (unint64_t *)v201[2];
                              v177 = *v212 == (_QWORD)v201;
                              v201 = v212;
                            }
                            while (!v177);
                          }
                          ++v210;
                          v201 = v212;
                        }
                        while (v212 != v207);
                      }
                      if (v202 <= v210)
                      {
LABEL_342:
                        v181 = v180;
                        goto LABEL_343;
                      }
                    }
                    else if (v189 <= v191)
                    {
                      goto LABEL_342;
                    }
                    *v180 = v186;
                    v180 = v185;
                  }
                  while (v185 != v7);
                  v181 = v7;
                }
LABEL_343:
                *v181 = v184;
                v179 = *a3;
              }
              v176 = v182 + 1;
              v180 = v182;
            }
            while (v182 + 1 != a2);
          }
        }
        else if ((v178 & 1) == 0)
        {
          v277 = *a3;
          do
          {
            v278 = v176;
            v280 = *v9;
            v279 = v9[1];
            result = sub_20F625764(v277, *(uint64_t **)(v279 + 496), *(_QWORD *)(v279 + 504), *(uint64_t **)(*v9 + 496), *(_QWORD *)(*v9 + 504));
            if ((_DWORD)result)
            {
              v281 = v278;
              do
              {
                while (1)
                {
                  *v281 = v280;
                  v281 = v9;
                  v282 = *--v9;
                  v280 = v282;
                  v283 = *(uint64_t **)(v279 + 496);
                  v284 = (uint64_t)(*(_QWORD *)(v279 + 504) - (_QWORD)v283) >> 6;
                  v285 = *(uint64_t **)(v282 + 496);
                  v286 = (uint64_t)(*(_QWORD *)(v282 + 504) - (_QWORD)v285) >> 6;
                  if (v284 == v286)
                    break;
                  if (v284 <= v286)
                    goto LABEL_502;
                }
                v287 = (**a3)[1];
                v290 = *(uint64_t **)(v287 + 56);
                v288 = (uint64_t *)(v287 + 56);
                v289 = v290;
                if (!v290)
                  goto LABEL_522;
                v291 = *v283;
                v292 = *((_DWORD *)v283 + 2);
                v293 = v288;
                v294 = v289;
                do
                {
                  v295 = v294[4];
                  if (v295 < v291)
                  {
                    ++v294;
                  }
                  else if (v295 == v291)
                  {
                    result = (unint64_t)(v294 + 1);
                    if (*((_DWORD *)v294 + 10) < v292)
                      ++v294;
                    else
                      v293 = v294;
                  }
                  else
                  {
                    v293 = v294;
                  }
                  v294 = (uint64_t *)*v294;
                }
                while (v294);
                if (v293 == v288 || (v296 = v293[4], v291 < v296) || v291 == v296 && *((_DWORD *)v293 + 10) > v292)
LABEL_522:
                  v293 = v288;
                v297 = (uint64_t *)*(*a3)[1];
                if (v297 == v293)
                {
                  v298 = 0;
                }
                else
                {
                  v298 = 0;
                  v299 = (uint64_t *)*(*a3)[1];
                  do
                  {
                    v300 = (uint64_t *)v299[1];
                    if (v300)
                    {
                      do
                      {
                        v301 = v300;
                        v300 = (uint64_t *)*v300;
                      }
                      while (v300);
                    }
                    else
                    {
                      do
                      {
                        v301 = (uint64_t *)v299[2];
                        v177 = *v301 == (_QWORD)v299;
                        v299 = v301;
                      }
                      while (!v177);
                    }
                    ++v298;
                    v299 = v301;
                  }
                  while (v301 != v293);
                }
                if (!v289)
                  goto LABEL_547;
                v302 = *v285;
                v303 = *((_DWORD *)v285 + 2);
                v304 = v288;
                do
                {
                  v305 = v289[4];
                  if (v305 < v302)
                  {
                    ++v289;
                  }
                  else if (v305 == v302)
                  {
                    if (*((_DWORD *)v289 + 10) < v303)
                      ++v289;
                    else
                      v304 = v289;
                  }
                  else
                  {
                    v304 = v289;
                  }
                  v289 = (uint64_t *)*v289;
                }
                while (v289);
                if (v304 == v288 || (v306 = v304[4], v302 < v306) || v302 == v306 && *((_DWORD *)v304 + 10) > v303)
LABEL_547:
                  v304 = v288;
                if (v297 == v304)
                {
                  v307 = 0;
                }
                else
                {
                  v307 = 0;
                  do
                  {
                    v308 = (uint64_t *)v297[1];
                    if (v308)
                    {
                      do
                      {
                        v309 = v308;
                        v308 = (uint64_t *)*v308;
                      }
                      while (v308);
                    }
                    else
                    {
                      do
                      {
                        v309 = (uint64_t *)v297[2];
                        v177 = *v309 == (_QWORD)v297;
                        v297 = v309;
                      }
                      while (!v177);
                    }
                    ++v307;
                    v297 = v309;
                  }
                  while (v309 != v304);
                }
              }
              while (v298 > v307);
LABEL_502:
              *v281 = v279;
              v277 = *a3;
            }
            v176 = v278 + 1;
            v9 = v278;
          }
          while (v278 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20FC33704(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD ***a4)
{
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *a4;
  v8 = *a2;
  v9 = *a1;
  v10 = *(uint64_t **)(*a2 + 496);
  v11 = *(_QWORD *)(*a2 + 504);
  v12 = sub_20F625764(*a4, v10, v11, *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504));
  v13 = *a3;
  result = sub_20F625764(v7, *(uint64_t **)(*a3 + 496), *(_QWORD *)(*a3 + 504), v10, v11);
  if (v12)
  {
    if (result)
    {
      *a1 = v13;
    }
    else
    {
      *a1 = v8;
      *a2 = v9;
      v17 = *a3;
      result = sub_20F625764(*a4, *(uint64_t **)(*a3 + 496), *(_QWORD *)(*a3 + 504), *(uint64_t **)(v9 + 496), *(_QWORD *)(v9 + 504));
      if (!result)
        return result;
      *a2 = v17;
    }
    *a3 = v9;
  }
  else if (result)
  {
    *a2 = v13;
    *a3 = v8;
    v15 = *a2;
    v16 = *a1;
    result = sub_20F625764(*a4, *(uint64_t **)(*a2 + 496), *(_QWORD *)(*a2 + 504), *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504));
    if (result)
    {
      *a1 = v15;
      *a2 = v16;
    }
  }
  return result;
}

BOOL sub_20FC33810(uint64_t *a1, uint64_t *a2, _QWORD ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_20F625764(*a3, *(uint64_t **)(v8 + 496), *(_QWORD *)(v8 + 504), *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20FC33704(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v19 = a1 + 2;
      sub_20FC33704(a1, a1 + 1, a1 + 2, a3);
      v20 = *(a2 - 1);
      v21 = a1[2];
      if (sub_20F625764(*a3, *(uint64_t **)(v20 + 496), *(_QWORD *)(v20 + 504), *(uint64_t **)(v21 + 496), *(_QWORD *)(v21 + 504)))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = a1[1];
        if (sub_20F625764(*a3, *(uint64_t **)(*v19 + 496), *(_QWORD *)(*v19 + 504), *(uint64_t **)(v23 + 496), *(_QWORD *)(v23 + 504)))
        {
          a1[1] = v22;
          a1[2] = v23;
          v24 = *a3;
          v25 = *a1;
          if (sub_20F625764(v24, *(uint64_t **)(v22 + 496), *(_QWORD *)(v22 + 504), *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504)))
          {
            *a1 = v22;
            a1[1] = v25;
          }
        }
      }
      return 1;
    case 5:
      sub_20FC33A34(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20FC33704(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (sub_20F625764(*a3, *(uint64_t **)(*v11 + 496), *(_QWORD *)(*v11 + 504), *(uint64_t **)(v15 + 496), *(_QWORD *)(v15 + 504)))
    {
      break;
    }
LABEL_13:
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
  v16 = v13;
  do
  {
    *(uint64_t *)((char *)a1 + v16) = v15;
    v17 = v16 - 8;
    if (v16 == 8)
    {
      *a1 = v14;
      if (++v12 != 8)
        goto LABEL_13;
      return v11 + 1 == a2;
    }
    v15 = *(uint64_t *)((char *)a1 + v16 - 16);
    v18 = sub_20F625764(*a3, *(uint64_t **)(v14 + 496), *(_QWORD *)(v14 + 504), *(uint64_t **)(v15 + 496), *(_QWORD *)(v15 + 504));
    v16 = v17;
  }
  while (v18);
  *(uint64_t *)((char *)a1 + v17) = v14;
  if (++v12 != 8)
    goto LABEL_13;
  return v11 + 1 == a2;
}

BOOL sub_20FC33A34(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD ***a6)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;

  sub_20FC33704(a1, a2, a3, a6);
  v12 = *a6;
  v13 = *a4;
  v14 = *a3;
  if (sub_20F625764(*a6, *(uint64_t **)(*a4 + 496), *(_QWORD *)(*a4 + 504), *(uint64_t **)(*a3 + 496), *(_QWORD *)(*a3 + 504)))
  {
    *a3 = v13;
    *a4 = v14;
    v12 = *a6;
    v15 = *a3;
    v16 = *a2;
    if (sub_20F625764(*a6, *(uint64_t **)(*a3 + 496), *(_QWORD *)(*a3 + 504), *(uint64_t **)(*a2 + 496), *(_QWORD *)(*a2 + 504)))
    {
      *a2 = v15;
      *a3 = v16;
      v12 = *a6;
      v17 = *a2;
      v18 = *a1;
      if (sub_20F625764(*a6, *(uint64_t **)(*a2 + 496), *(_QWORD *)(*a2 + 504), *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504)))
      {
        *a1 = v17;
        *a2 = v18;
        v12 = *a6;
      }
    }
  }
  v19 = *a5;
  v20 = *a4;
  result = sub_20F625764(v12, *(uint64_t **)(*a5 + 496), *(_QWORD *)(*a5 + 504), *(uint64_t **)(*a4 + 496), *(_QWORD *)(*a4 + 504));
  if (result)
  {
    *a4 = v19;
    *a5 = v20;
    v22 = *a4;
    v23 = *a3;
    result = sub_20F625764(*a6, *(uint64_t **)(*a4 + 496), *(_QWORD *)(*a4 + 504), *(uint64_t **)(*a3 + 496), *(_QWORD *)(*a3 + 504));
    if (result)
    {
      *a3 = v22;
      *a4 = v23;
      v24 = *a3;
      v25 = *a2;
      result = sub_20F625764(*a6, *(uint64_t **)(*a3 + 496), *(_QWORD *)(*a3 + 504), *(uint64_t **)(*a2 + 496), *(_QWORD *)(*a2 + 504));
      if (result)
      {
        *a2 = v24;
        *a3 = v25;
        v26 = *a6;
        v27 = *a2;
        v28 = *a1;
        result = sub_20F625764(v26, *(uint64_t **)(*a2 + 496), *(_QWORD *)(*a2 + 504), *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504));
        if (result)
        {
          *a1 = v27;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

__n128 sub_20FC33B98(int64x2_t *a1, __n128 *a2, unsigned int a3, __int128 *a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  _BOOL4 v17;
  __n128 result;
  uint64_t v19;
  __int128 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  const char *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  os_log_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  float64x2_t v89;
  unsigned __int8 v90;
  const char *v91;
  size_t v92;
  _BYTE *v93;
  unint64_t v94;
  const char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  float64x2_t *v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  size_t v103;
  NSObject *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  unint64_t v109;
  os_log_t v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __n128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  __n128 *v146;
  uint64_t *v147;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v149;
  int v150;
  const char *v151;
  int v152;
  const char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_t v161;
  _BYTE v162[32];
  float64x2_t v163;
  unint64_t v164;
  char v165;
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v10 = a1[360].i64[1];
  v11 = a1[361].i64[0];
  if (v11 != v10)
  {
    v12 = (v11 - v10) >> 4;
    do
    {
      v13 = v12 >> 1;
      v14 = (unsigned int *)(v10 + 16 * (v12 >> 1));
      v16 = *v14;
      v15 = v14 + 4;
      v12 += ~(v12 >> 1);
      if (v16 < a3)
        v10 = (uint64_t)v15;
      else
        v12 = v13;
    }
    while (v12);
  }
  if (v10 == v11 || *(_DWORD *)v10 != a3)
  {
    v17 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 920, (uint64_t)"var_iter != this->linearSystem().template endVariable<typename Traits::IMUScaleSkewnessVariable>()", 98, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v10 = v11;
    if (v17)
      abort();
  }
  v19 = *(_QWORD *)(v10 + 8);
  if (*(_BYTE *)(v19 + 20))
  {
    v20 = (__int128 *)(v19 + 32);
    if (*((_BYTE *)a4 + 24))
    {
      v20 = a4;
      v21 = a5;
    }
    else
    {
      v21 = a3;
    }
    v157 = *v20;
    v158 = *((_QWORD *)v20 + 2);
    v22 = a1[413].i64[0];
    v23 = a1[413].i64[1];
    if (v23 != v22)
    {
      v24 = 0x2E8BA2E8BA2E8BA3 * ((v23 - v22) >> 4);
      do
      {
        v25 = v24 >> 1;
        v26 = (unint64_t *)(v22 + 176 * (v24 >> 1));
        v28 = *v26;
        v27 = v26 + 22;
        v24 += ~(v24 >> 1);
        if (v28 < v21)
          v22 = (uint64_t)v27;
        else
          v24 = v25;
      }
      while (v24);
    }
    if (v23 != v22 && *(_QWORD *)v22 == v21)
    {
      sub_20F9B2A4C(&v156);
      if (**(int **)(v156 + 56) > 2
        || (v29 = *(unsigned __int8 *)(v156 + 72),
            v30 = sub_20E8C31DC(v156, "OSLogSurrogateAppender", 1, 0),
            v31 = v30,
            !v29)
        && !v30)
      {
LABEL_207:
        result.n128_u64[0] = v157;
        *(_OWORD *)(v22 + 24) = v157;
        *(_QWORD *)(v22 + 40) = v158;
        v139 = (__n128 *)(v22 + 48);
        if (*(unsigned __int8 *)(v22 + 72) == a2[1].n128_u8[8])
        {
          if (*(_BYTE *)(v22 + 72))
          {
            result = *a2;
            *(_QWORD *)(v22 + 64) = a2[1].n128_u64[0];
            *v139 = result;
          }
        }
        else if (*(_BYTE *)(v22 + 72))
        {
          *(_BYTE *)(v22 + 72) = 0;
        }
        else
        {
          result = *a2;
          *(_QWORD *)(v22 + 64) = a2[1].n128_u64[0];
          *v139 = result;
          *(_BYTE *)(v22 + 72) = 1;
        }
        return result;
      }
      v147 = &v156;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v149 = std::chrono::system_clock::now().__d_.__rep_;
      v150 = 2;
      v151 = "unknown file";
      v152 = 945;
      v154 = 0;
      v155 = 0;
      v153 = "unknown function";
      v143 = v156;
      if (*(char *)(v156 + 39) < 0)
      {
        v33 = *(const char **)(v156 + 16);
        v32 = *(_QWORD *)(v156 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(v156 + 39);
        v33 = (const char *)(v156 + 16);
      }
      v142 = v156 + 16;
      v146 = a2;
      v90 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v161);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v161);
        if (v162[16] && (v162[15] & 0x80000000) != 0)
          operator delete(v161);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v91 = byte_254A4A4F8;
      else
        v91 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v92 = byte_254A4A4F8[23];
      else
        v92 = *(_QWORD *)&byte_254A4A4F8[8];
      v161 = os_log_create(v91, v33);
      v93 = v162;
      if (v92 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v92 >= 0x17)
      {
        v94 = v31;
        v95 = v33;
        v96 = v29;
        v97 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v92 | 7) != 0x17)
          v97 = v92 | 7;
        v98 = v97 + 1;
        v93 = operator new(v97 + 1);
        *(_QWORD *)&v162[8] = v92;
        *(_QWORD *)&v162[16] = v98 | 0x8000000000000000;
        *(_QWORD *)v162 = v93;
        v29 = v96;
        v33 = v95;
        v31 = v94;
      }
      else
      {
        v162[23] = v92;
        if (!v92)
        {
LABEL_140:
          v93[v92] = 0;
          v162[24] = 1;
          v99 = &v163;
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          a2 = v146;
          if (v32 >= 0x17)
          {
            v100 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v100 = v32 | 7;
            v101 = v100 + 1;
            v99 = (float64x2_t *)operator new(v100 + 1);
            *(_QWORD *)&v163.f64[1] = v32;
            v164 = v101 | 0x8000000000000000;
            *(_QWORD *)&v163.f64[0] = v99;
          }
          else
          {
            HIBYTE(v164) = v32;
            if (!v32)
              goto LABEL_148;
          }
          memmove(v99, v33, v32);
LABEL_148:
          *((_BYTE *)v99->f64 + v32) = 0;
          v165 = 1;
          v102 = v161;
          if (SHIBYTE(v164) < 0)
            operator delete(*(void **)&v163.f64[0]);
          if (v162[24] && (v162[23] & 0x80000000) != 0)
            operator delete(*(void **)v162);
          if (v161)
            os_release(v161);
          if (v31 && *(_QWORD *)(v31 + 24))
          {
            v103 = _os_log_pack_size();
            v104 = operator new(v103, (std::align_val_t)8uLL);
            v105 = (std::__shared_weak_count *)operator new();
            v106 = v105;
            v105->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v105->__shared_owners_;
            v105->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v105->__shared_weak_owners_ = 0;
            v105[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
            v161 = v104;
            *(_QWORD *)v162 = v104;
            *(_QWORD *)&v162[8] = v105;
            do
              v108 = __ldxr(p_shared_owners);
            while (__stxr(v108 + 1, p_shared_owners));
            *(_QWORD *)&v162[16] = 0;
            *(_QWORD *)&v162[24] = 0;
            v163.f64[0] = 0.0;
            do
              v109 = __ldaxr(p_shared_owners);
            while (__stlxr(v109 - 1, p_shared_owners));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v106);
            }
            v110 = v161;
            v111 = (_DWORD *)_os_log_pack_fill();
            *v111 = 67109120;
            v111[1] = v21;
            v112 = operator new();
            v113 = *(unsigned __int8 *)(v143 + 39);
            v114 = v142;
            if ((v113 & 0x80u) != 0)
            {
              v114 = *(_QWORD *)(v143 + 16);
              v113 = *(_QWORD *)(v143 + 24);
            }
            *(_QWORD *)v112 = v110;
            *(_OWORD *)(v112 + 8) = *(_OWORD *)v162;
            *(_QWORD *)v162 = 0;
            *(_QWORD *)&v162[8] = 0;
            *(_OWORD *)(v112 + 24) = *(_OWORD *)&v162[16];
            *(_QWORD *)&v162[16] = 0;
            *(_QWORD *)&v162[24] = 0;
            *(_QWORD *)(v112 + 40) = v114;
            *(_QWORD *)(v112 + 48) = v113;
            *(_BYTE *)(v112 + 56) = 2;
            v159 = 0;
            v160 = v112;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v160);
            v115 = v160;
            v160 = 0;
            if (v115)
            {
              v116 = *(std::__shared_weak_count **)(v115 + 32);
              if (v116)
              {
                v117 = (unint64_t *)&v116->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              v119 = *(std::__shared_weak_count **)(v115 + 16);
              if (v119)
              {
                v120 = (unint64_t *)&v119->__shared_owners_;
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              MEMORY[0x212BC6398](v115, 0x10F0C40B62ED6C6);
              v122 = v159;
              v159 = 0;
              if (v122)
              {
                v123 = *(std::__shared_weak_count **)(v122 + 32);
                if (v123)
                {
                  v124 = (unint64_t *)&v123->__shared_owners_;
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
                v126 = *(std::__shared_weak_count **)(v122 + 16);
                if (v126)
                {
                  v127 = (unint64_t *)&v126->__shared_owners_;
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                MEMORY[0x212BC6398](v122, 0x10F0C40B62ED6C6);
              }
            }
            v129 = *(std::__shared_weak_count **)&v162[24];
            if (*(_QWORD *)&v162[24])
            {
              v130 = (unint64_t *)(*(_QWORD *)&v162[24] + 8);
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = *(std::__shared_weak_count **)&v162[8];
            if (*(_QWORD *)&v162[8])
            {
              v133 = (unint64_t *)(*(_QWORD *)&v162[8] + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          else
          {
            os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG);
            LODWORD(v161) = 67109120;
            HIDWORD(v161) = v21;
            v135 = (void *)_os_log_send_and_compose_impl();
            if (v135)
              free(v135);
          }
          if (v29)
          {
            sub_20E8C003C((uint64_t)&v147, "Update existing IMU intrinsic prior factor with factor ID: %d.", v21);
            sub_20E863570((uint64_t)&v147);
          }
          sub_20E863570((uint64_t)&v147);
          v136 = v155;
          if (v155)
          {
            v137 = (unint64_t *)&v155->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          goto LABEL_207;
        }
      }
      memmove(v93, v91, v92);
      goto LABEL_140;
    }
    sub_20F9B2A4C(&v156);
    if (**(int **)(v156 + 56) > 2)
      goto LABEL_117;
    v34 = *(unsigned __int8 *)(v156 + 72);
    v35 = sub_20E8C31DC(v156, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && v35 == 0)
      goto LABEL_117;
    v144 = v34;
    v147 = &v156;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v149 = std::chrono::system_clock::now().__d_.__rep_;
    v150 = 2;
    v151 = "unknown file";
    v152 = 936;
    v154 = 0;
    v155 = 0;
    v153 = "unknown function";
    v141 = v156;
    if (*(char *)(v156 + 39) < 0)
    {
      v39 = *(const char **)(v156 + 16);
      v38 = *(_QWORD *)(v156 + 24);
      v140 = v156 + 16;
      v145 = v36;
      v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v41 & 1) != 0)
        goto LABEL_36;
    }
    else
    {
      v38 = *(unsigned __int8 *)(v156 + 39);
      v39 = (const char *)(v156 + 16);
      v140 = v156 + 16;
      v145 = v36;
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) != 0)
        goto LABEL_36;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v161);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v161);
      if (v162[16] && (v162[15] & 0x80000000) != 0)
        operator delete(v161);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_36:
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    v161 = os_log_create(v42, v39);
    v44 = v162;
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = a2;
      v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v46 = v43 | 7;
      v47 = v46 + 1;
      v44 = operator new(v46 + 1);
      *(_QWORD *)&v162[8] = v43;
      *(_QWORD *)&v162[16] = v47 | 0x8000000000000000;
      *(_QWORD *)v162 = v44;
      a2 = v45;
    }
    else
    {
      v162[23] = v43;
      if (!v43)
      {
LABEL_50:
        v44[v43] = 0;
        v162[24] = 1;
        v48 = &v163;
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v38 >= 0x17)
        {
          v49 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v49 = v38 | 7;
          v50 = v49 + 1;
          v48 = (float64x2_t *)operator new(v49 + 1);
          *(_QWORD *)&v163.f64[1] = v38;
          v164 = v50 | 0x8000000000000000;
          *(_QWORD *)&v163.f64[0] = v48;
        }
        else
        {
          HIBYTE(v164) = v38;
          if (!v38)
            goto LABEL_58;
        }
        memmove(v48, v39, v38);
LABEL_58:
        *((_BYTE *)v48->f64 + v38) = 0;
        v165 = 1;
        v51 = v161;
        if (SHIBYTE(v164) < 0)
          operator delete(*(void **)&v163.f64[0]);
        if (v162[24] && (v162[23] & 0x80000000) != 0)
          operator delete(*(void **)v162);
        if (v161)
          os_release(v161);
        if (v145 && *(_QWORD *)(v145 + 24))
        {
          v52 = _os_log_pack_size();
          v53 = operator new(v52, (std::align_val_t)8uLL);
          v54 = (std::__shared_weak_count *)operator new();
          v55 = v54;
          v54->__shared_owners_ = 0;
          v56 = (unint64_t *)&v54->__shared_owners_;
          v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v54->__shared_weak_owners_ = 0;
          v54[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
          v161 = v53;
          *(_QWORD *)v162 = v53;
          *(_QWORD *)&v162[8] = v54;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          *(_QWORD *)&v162[16] = 0;
          *(_QWORD *)&v162[24] = 0;
          v163.f64[0] = 0.0;
          do
            v58 = __ldaxr(v56);
          while (__stlxr(v58 - 1, v56));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v55);
          }
          v59 = v161;
          v60 = (_DWORD *)_os_log_pack_fill();
          *v60 = 67109120;
          v60[1] = v21;
          v61 = operator new();
          v62 = *(unsigned __int8 *)(v141 + 39);
          v63 = v140;
          if ((v62 & 0x80u) != 0)
          {
            v63 = *(_QWORD *)(v141 + 16);
            v62 = *(_QWORD *)(v141 + 24);
          }
          *(_QWORD *)v61 = v59;
          *(_OWORD *)(v61 + 8) = *(_OWORD *)v162;
          *(_QWORD *)v162 = 0;
          *(_QWORD *)&v162[8] = 0;
          *(_OWORD *)(v61 + 24) = *(_OWORD *)&v162[16];
          *(_QWORD *)&v162[16] = 0;
          *(_QWORD *)&v162[24] = 0;
          *(_QWORD *)(v61 + 40) = v63;
          *(_QWORD *)(v61 + 48) = v62;
          *(_BYTE *)(v61 + 56) = 2;
          v159 = 0;
          v160 = v61;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v145 + 24) + 40))(*(_QWORD *)(v145 + 24), &v160);
          v64 = v160;
          v160 = 0;
          if (v64)
          {
            v65 = *(std::__shared_weak_count **)(v64 + 32);
            if (v65)
            {
              v66 = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v68 = *(std::__shared_weak_count **)(v64 + 16);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
            v71 = v159;
            v159 = 0;
            if (v71)
            {
              v72 = *(std::__shared_weak_count **)(v71 + 32);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = *(std::__shared_weak_count **)(v71 + 16);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
            }
          }
          v78 = *(std::__shared_weak_count **)&v162[24];
          v79 = v144;
          if (*(_QWORD *)&v162[24])
          {
            v80 = (unint64_t *)(*(_QWORD *)&v162[24] + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v82 = *(std::__shared_weak_count **)&v162[8];
          if (*(_QWORD *)&v162[8])
          {
            v83 = (unint64_t *)(*(_QWORD *)&v162[8] + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
        }
        else
        {
          os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG);
          LODWORD(v161) = 67109120;
          HIDWORD(v161) = v21;
          v85 = (void *)_os_log_send_and_compose_impl();
          v79 = v144;
          if (v85)
            free(v85);
        }
        if (v79)
        {
          sub_20E8C003C((uint64_t)&v147, "Add a new IMU intrinsic prior factor with factor ID: %d.", v21);
          sub_20E863570((uint64_t)&v147);
        }
        sub_20E863570((uint64_t)&v147);
        v86 = v155;
        if (v155)
        {
          v87 = (unint64_t *)&v155->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
LABEL_117:
        v161 = (os_log_t)v21;
        *(_OWORD *)&v162[8] = v157;
        *(_QWORD *)&v162[24] = v158;
        LOBYTE(v163.f64[0]) = 0;
        v165 = 0;
        if (a2[1].n128_u8[8])
        {
          v164 = a2[1].n128_u64[0];
          v163 = *(float64x2_t *)a2;
          v165 = 1;
          v89 = (float64x2_t)vdupq_lane_s64(0x7FF8000000000000, 0);
          *(_QWORD *)&v89.f64[0] = v164;
          if (vminnmvq_f64(vminnmq_f64(v163, v89)) <= 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        LODWORD(v160) = a3;
        v147 = 0;
        rep = 0;
        if ((sub_20FBF44EC(a1 + 324, (__int128 *)&v161, (unsigned int *)&v160, 0, 0) & 1) != 0)
        {
          a1[491].i8[12] = 0;
          a1[491].i32[2] = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 942, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add imu calibration prior factor", 42, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        return result;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_50;
  }
  return result;
}

void sub_20FC34C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  if (*(_BYTE *)(v9 - 152))
  {
    if (*(char *)(v9 - 153) < 0)
      operator delete(*(void **)(v9 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC34C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  sub_20E86E8C4(&a32);
  sub_20E86E8C4(&a31);
  sub_20E86E658(v32 - 176);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20FC34D04()
{
  JUMPOUT(0x20FC34D0CLL);
}

void sub_20FC34D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC34D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC34D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  if (*(_BYTE *)(v9 - 144) && *(char *)(v9 - 145) < 0)
    operator delete(*(void **)(v9 - 168));
  v11 = *(void **)(v9 - 176);
  if (v11)
    os_release(v11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC34DF4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FC34E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC34E30(uint64_t a1, unsigned __int32 a2, float64x2_t *a3)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int32 *v21;
  char *v22;
  unsigned __int32 v23;
  __int32 **v24;
  unsigned __int32 *v25;
  unsigned __int32 *v26;
  _QWORD *v27;
  __int32 *v28;
  __int32 *v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  float64x2_t v33;
  __int128 v34;
  float64x2_t v35;
  float64x2_t v36;
  float64_t v37;
  float64x2_t v38;
  __int32 *v39;
  __int32 *v40;
  __int32 *v41;
  void **v42;
  uint64_t v43;
  double *v44;
  double *v45;
  size_t v46;
  double *v47;
  unsigned __int8 v48;
  const char *v49;
  size_t v50;
  void **v51;
  unint64_t v52;
  const char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  size_t v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  size_t v94;
  char *v95;
  char *v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  int64x2_t *v100;
  int64x2_t *v101;
  int64x2_t *v102;
  uint64_t v103;
  int64x2_t v104;
  int8x16_t v105;
  unsigned int v106;
  unsigned int v107;
  double *v108;
  double *v109;
  size_t v110;
  void **v111;
  _QWORD *v112;
  int v113;
  int v114;
  char *v115;
  size_t v116;
  uint64_t v117;
  int v118;
  size_t v119;
  char *v120;
  char *v121;
  int v122;
  size_t v123;
  uint64_t v124;
  double *v125;
  unint64_t v126;
  double *v127;
  double *v128;
  unint64_t v129;
  uint64_t v130;
  float64x2_t *v131;
  float64x2_t *v132;
  uint64_t v133;
  float64x2_t v134;
  double *v135;
  double v136;
  _QWORD *v137;
  float64x2_t *v138;
  __n128 v139;
  BOOL v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  size_t v146;
  char *v147;
  unsigned int v148;
  unsigned __int8 v149;
  uint64_t v150;
  const char *v151;
  NSObject *v152;
  uint64_t *v153;
  int8x8_t v154;
  int8x16_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  int64x2_t v158;
  uint64_t v159;
  uint64_t v160;
  int64x2_t v161;
  int8x16_t v162;
  unint64_t v163;
  int v164;
  double *v165;
  _QWORD *v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  BOOL v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  double *v176;
  uint64_t v177;
  unint64_t v178;
  double *v179;
  uint64_t v180;
  double *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  double v185;
  _QWORD *v186;
  uint64_t v187;
  int8x8_t v188;
  float64_t v189;
  int8x16_t v190;
  uint64_t v191;
  int8x16_t v192;
  void **v193;
  uint64_t v194[2];
  __int128 v195;
  float64x2_t v196;
  float64x2_t v197;
  __int128 v198;
  float64_t v199;
  __int128 v200;
  int64x2_t v201;
  float64x2_t v202;
  __int128 v203;
  float64_t v204;
  void *object[6];
  __int128 v206;
  __int128 v207;
  char *category;
  size_t v209;
  int __lda;
  int64x2_t v211;
  _QWORD *v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  if (a3->f64[0] < 2.22044605e-16 || a3->f64[1] < 2.22044605e-16 || a3[1].f64[0] < 2.22044605e-16)
  {
    sub_20F9B2A4C(&v211);
    if (**(int **)(v211.i64[0] + 56) > 2)
      return;
    v5 = *(unsigned __int8 *)(v211.i64[0] + 72);
    v6 = sub_20E8C31DC(v211.i64[0], "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (!v5 && v6 == 0)
      return;
    *(_QWORD *)&v214 = &v211;
    *((std::chrono::steady_clock::time_point *)&v214 + 1) = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v215 = std::chrono::system_clock::now();
    DWORD2(v215) = 2;
    *(_QWORD *)&v216 = "unknown file";
    DWORD2(v216) = 476;
    *((_QWORD *)&v217 + 1) = 0;
    *(_QWORD *)&v218 = 0;
    *(_QWORD *)&v217 = "unknown function";
    v9 = *(_QWORD *)v214;
    v10 = *(_QWORD *)v214 + 16;
    if (*(char *)(*(_QWORD *)v214 + 39) < 0)
    {
      v12 = *(const char **)(v9 + 16);
      v11 = *(_QWORD *)(v9 + 24);
      v48 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v48 & 1) != 0)
        goto LABEL_51;
    }
    else
    {
      v11 = *(unsigned __int8 *)(*(_QWORD *)v214 + 39);
      v12 = (const char *)(v9 + 16);
      v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v13 & 1) != 0)
        goto LABEL_51;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_51:
    if (byte_254A4A4F8[23] >= 0)
      v49 = byte_254A4A4F8;
    else
      v49 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v50 = byte_254A4A4F8[23];
    else
      v50 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v49, v12);
    v51 = &object[1];
    if (v50 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v50 >= 0x17)
    {
      v52 = v7;
      v53 = v12;
      v54 = v9;
      v55 = v5;
      v56 = v10;
      v57 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v57 = v50 | 7;
      v58 = v57 + 1;
      v51 = (void **)operator new(v57 + 1);
      object[2] = (void *)v50;
      object[3] = (void *)(v58 | 0x8000000000000000);
      object[1] = v51;
      v10 = v56;
      v5 = v55;
      v9 = v54;
      v12 = v53;
      v7 = v52;
    }
    else
    {
      HIBYTE(object[3]) = v50;
      if (!v50)
      {
LABEL_65:
        *((_BYTE *)v51 + v50) = 0;
        LOBYTE(object[4]) = 1;
        v59 = &object[5];
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v11 >= 0x17)
        {
          v60 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v60 = v11 | 7;
          v61 = v60 + 1;
          v59 = (void **)operator new(v60 + 1);
          *(_QWORD *)&v206 = v11;
          *((_QWORD *)&v206 + 1) = v61 | 0x8000000000000000;
          object[5] = v59;
        }
        else
        {
          HIBYTE(v206) = v11;
          if (!v11)
            goto LABEL_73;
        }
        memmove(v59, v12, v11);
LABEL_73:
        *((_BYTE *)v59 + v11) = 0;
        LOBYTE(v207) = 1;
        v62 = object[0];
        if (SHIBYTE(v206) < 0)
          operator delete(object[5]);
        if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v7 && *(_QWORD *)(v7 + 24))
        {
          v63 = _os_log_pack_size();
          v64 = (std::__shared_weak_count_vtbl *)operator new(v63, (std::align_val_t)8uLL);
          v65 = (std::__shared_weak_count *)operator new();
          v66 = v65;
          v65->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v65->__shared_owners_;
          v65->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v65->__shared_weak_owners_ = 0;
          v65[1].__vftable = v64;
          object[0] = v64;
          object[1] = v64;
          object[2] = v65;
          do
            v68 = __ldxr(p_shared_owners);
          while (__stxr(v68 + 1, p_shared_owners));
          memset(&object[3], 0, 24);
          do
            v69 = __ldaxr(p_shared_owners);
          while (__stlxr(v69 - 1, p_shared_owners));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v66);
          }
          v70 = object[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v71 = operator new();
          v72 = *(unsigned __int8 *)(v9 + 39);
          if ((v72 & 0x80u) == 0)
            v73 = v10;
          else
            v73 = *(_QWORD *)(v9 + 16);
          if ((v72 & 0x80u) != 0)
            v72 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)v71 = v70;
          *(_OWORD *)(v71 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v71 + 24) = *(_OWORD *)&object[3];
          object[3] = 0;
          object[4] = 0;
          *(_QWORD *)(v71 + 40) = v73;
          *(_QWORD *)(v71 + 48) = v72;
          *(_BYTE *)(v71 + 56) = 2;
          *(_QWORD *)&v195 = 0;
          *(_QWORD *)&v200 = v71;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v200);
          v74 = v200;
          *(_QWORD *)&v200 = 0;
          if (v74)
          {
            v75 = *(std::__shared_weak_count **)(v74 + 32);
            if (v75)
            {
              v76 = (unint64_t *)&v75->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            v78 = *(std::__shared_weak_count **)(v74 + 16);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            MEMORY[0x212BC6398](v74, 0x10F0C40B62ED6C6);
            *(_QWORD *)&v195 = 0;
          }
          v81 = (std::__shared_weak_count *)object[4];
          if (object[4])
          {
            v82 = (unint64_t *)((char *)object[4] + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          v84 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v85 = (unint64_t *)((char *)object[2] + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        else
        {
          os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG);
          LOWORD(object[0]) = 0;
          v87 = (void *)_os_log_send_and_compose_impl();
          if (v87)
            free(v87);
        }
        if (v5)
        {
          sub_20E8C003C((uint64_t)&v214, "Limit the amount of noise used in error propagation; inverse noise should be GT 0.");
          sub_20E863570((uint64_t)&v214);
        }
        sub_20E863570((uint64_t)&v214);
        v88 = (std::__shared_weak_count *)v218;
        if ((_QWORD)v218)
        {
          v89 = (unint64_t *)(v218 + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        return;
      }
    }
    memmove(v51, v49, v50);
    goto LABEL_65;
  }
  v17 = *(char **)(a1 + 5768);
  v18 = *(char **)(a1 + 5776);
  if (v18 != v17)
  {
    v19 = (v18 - v17) >> 4;
    do
    {
      v20 = v19 >> 1;
      v21 = (unsigned __int32 *)&v17[16 * (v19 >> 1)];
      v23 = *v21;
      v22 = (char *)(v21 + 4);
      v19 += ~(v19 >> 1);
      if (v23 < a2)
        v17 = v22;
      else
        v19 = v20;
    }
    while (v19);
  }
  if (v17 != v18 && *(_DWORD *)v17 == a2)
  {
    *(_QWORD *)(a1 + 47608) = *(_QWORD *)(a1 + 47600);
    v24 = (__int32 **)(a1 + 40704);
    *(_QWORD *)(a1 + 47632) = *(_QWORD *)(a1 + 47624);
    *(_QWORD *)(a1 + 47656) = *(_QWORD *)(a1 + 47648);
    *(_QWORD *)(a1 + 47680) = *(_QWORD *)(a1 + 47672);
    *(_QWORD *)(a1 + 47704) = *(_QWORD *)(a1 + 47696);
    *(_QWORD *)(a1 + 47728) = *(_QWORD *)(a1 + 47720);
    v25 = *(unsigned __int32 **)(a1 + 47760);
    *(_QWORD *)(a1 + 47776) = *(_QWORD *)(a1 + 47768);
    *(_QWORD *)(a1 + 47800) = *(_QWORD *)(a1 + 47792);
    *(_QWORD *)(a1 + 47824) = *(_QWORD *)(a1 + 47816);
    v27 = (_QWORD *)(a1 + 47744);
    v26 = *(unsigned __int32 **)(a1 + 47744);
    *(_QWORD *)(a1 + 47752) = v26;
    if (v25 == v26)
    {
      if (v26)
      {
        *(_QWORD *)(a1 + 47752) = v26;
        operator delete(v26);
        *v27 = 0;
        *(_QWORD *)(a1 + 47752) = 0;
        *(_QWORD *)(a1 + 47760) = 0;
      }
      v30 = operator new(4uLL);
      *(_QWORD *)(a1 + 47744) = v30;
      *(_QWORD *)(a1 + 47752) = v30;
      *(_QWORD *)(a1 + 47760) = v30 + 1;
      *v30 = a2;
      *(_QWORD *)(a1 + 47752) = v30 + 1;
      v28 = *v24;
      v29 = *(__int32 **)(a1 + 40712);
      if (*v24 != v29)
      {
LABEL_31:
        while (*v28 != a2)
        {
          if (++v28 == v29)
            return;
        }
      }
    }
    else
    {
      *v26 = a2;
      *(_QWORD *)(a1 + 47752) = v26 + 1;
      v28 = *v24;
      v29 = *(__int32 **)(a1 + 40712);
      if (*v24 != v29)
        goto LABEL_31;
    }
    if (v28 != v29)
    {
      sub_20F8F2BC0(a1 + 47600, a1 + 40560, (uint64_t)dword_2103B9910, a1 + 47840);
      v31 = a1 + 48080;
      v32 = (_QWORD *)(a1 + 25360);
      LOBYTE(object[0]) = 0;
      v200 = 0u;
      v201 = 0u;
      v202 = 0u;
      v203 = 0u;
      v204 = 0.0;
      sub_20FC275C4(a1 + 25360, (uint64_t)&v200, (unsigned int **)(a1 + 47840), (_DWORD **)(a1 + 47840), (char *)object);
      *(_QWORD *)&v33.f64[0] = v203;
      *(_QWORD *)&v34 = v200;
      v35 = (float64x2_t)vdupq_laneq_s64(v201, 1);
      v187 = v200;
      v189 = v202.f64[0];
      *((_QWORD *)&v34 + 1) = v201.i64[1];
      v36.f64[0] = v202.f64[0];
      v36.f64[1] = *((float64_t *)&v203 + 1);
      v37 = v204;
      v33.f64[1] = v35.f64[0];
      v202 = v36;
      v200 = v34;
      v201 = (int64x2_t)v33;
      v199 = v204;
      v195 = v34;
      v196 = v33;
      v36.f64[1] = *((float64_t *)&v203 + 1);
      v197 = v202;
      v198 = v203;
      *(_QWORD *)&v33.f64[0] = v34;
      v36.f64[0] = v204;
      v33.f64[1] = v202.f64[0];
      v35.f64[0] = a3[1].f64[0];
      v38 = vaddq_f64(v33, *a3);
      v197.f64[0] = v38.f64[1];
      *(float64_t *)&v195 = v38.f64[0];
      *(_QWORD *)&v199 = *(_OWORD *)&vaddq_f64(v36, v35);
      sub_20FA5A44C((_QWORD *)(a1 + 25360), (void **)(a1 + 48080));
      v39 = *(__int32 **)(a1 + 40712);
      v40 = wmemchr(*v24, a2, v39 - *v24);
      if (v40)
        v41 = v40;
      else
        v41 = v39;
      if (v41 == *(__int32 **)(a1 + 40712)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 535, (uint64_t)"prior_var_iter != variable_ids.end()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v191 = 3 * ((unint64_t)((char *)v41 - (char *)*v24) >> 2) + *(_DWORD *)(a1 + 25344);
      v42 = (void **)(a1 + 48104);
      v43 = *(unsigned int *)(a1 + 48096);
      v44 = *(double **)v31;
      if (*(_QWORD *)(a1 + 48120) == (v43 | 0x300000000))
      {
        v45 = (double *)*v42;
      }
      else
      {
        v45 = (double *)*v42;
        if (v44 == *v42)
        {
          v91 = (char *)operator new((8 * (3 * v43) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          v92 = v91;
          v186 = (_QWORD *)(a1 + 25360);
          v93 = ((8 * (3 * v43) + 31) & 0xFFFFFFFE0uLL) >> 3;
          if ((_DWORD)v43)
          {
            memmove(v91, &v44[(v191 * v43)], 8 * v43);
            v42 = (void **)(a1 + 48104);
            memmove(&v92[8 * v43], &v44[(v43 + v191 * v43)], 8 * v43);
            memmove(&v92[8 * v43 + 8 * v43], &v44[((v191 + 2) * v43)], 8 * v43);
            v93 = ((8 * (3 * v43) + 31) & 0xFFFFFFFE0uLL) >> 3;
          }
          *(_QWORD *)(a1 + 48104) = v92;
          *(_QWORD *)(a1 + 48112) = v93;
          *(_DWORD *)(a1 + 48120) = v43;
          *(_DWORD *)(a1 + 48124) = 3;
          goto LABEL_130;
        }
        *(_DWORD *)(a1 + 48120) = v43;
        *(_DWORD *)(a1 + 48124) = 3;
        if (*(_QWORD *)(a1 + 48112) < (unint64_t)(3 * v43))
        {
          if (v45)
            MEMORY[0x212BC6368](v45, 0x1000C8000313F17);
          v46 = (24 * v43 + 31) & 0x3FFFFFFFE0;
          *(_QWORD *)(a1 + 48104) = 0;
          *(_QWORD *)(a1 + 48112) = v46 >> 3;
          v45 = (double *)operator new(v46, (std::align_val_t)0x20uLL);
          *v42 = v45;
        }
      }
      if (v44 != v45)
      {
        if ((_DWORD)v43)
        {
          memmove(v45, &v44[(v191 * v43)], 8 * v43);
          v47 = &v45[v43];
          v42 = (void **)(a1 + 48104);
          memmove(v47, &v44[(v43 + v191 * v43)], 8 * v43);
          v32 = (_QWORD *)(a1 + 25360);
          memmove(&v47[v43], &v44[((v191 + 2) * v43)], 8 * v43);
        }
        goto LABEL_132;
      }
      v94 = (8 * (*(_DWORD *)(a1 + 48124) * *(_DWORD *)(a1 + 48120)) + 31) & 0xFFFFFFFE0;
      v95 = (char *)operator new(v94, (std::align_val_t)0x20uLL);
      v96 = v95;
      v186 = (_QWORD *)(a1 + 25360);
      v97 = v94 >> 3;
      if ((_DWORD)v43)
      {
        memmove(v95, &v44[(v191 * v43)], 8 * v43);
        v42 = (void **)(a1 + 48104);
        memmove(&v96[8 * v43], &v44[(v43 + v191 * v43)], 8 * v43);
        memmove(&v96[8 * v43 + 8 * v43], &v44[((v191 + 2) * v43)], 8 * v43);
        v97 = v94 >> 3;
      }
      *(_QWORD *)(a1 + 48104) = v96;
      *(_QWORD *)(a1 + 48112) = v97;
LABEL_130:
      v32 = v186;
      if (v44)
        MEMORY[0x212BC6368](v44, 0x1000C8000313F17);
LABEL_132:
      v98 = *(unsigned int *)(a1 + 48120);
      v99 = v191;
      v100 = (int64x2_t *)(*(_QWORD *)(a1 + 48104) + 8 * v191);
      v101 = (int64x2_t *)((char *)v100 + 8 * v98);
      v102 = &v100[v98];
      v103 = v102[1].i64[0];
      v104 = *v102;
      v105 = vextq_s8((int8x16_t)vdupq_lane_s64(v101->i64[0], 0), (int8x16_t)vdupq_laneq_s64(*v101, 1), 8uLL);
      *v100 = vzip1q_s64(*v100, *v101);
      v100[1].i64[0] = v104.i64[0];
      v101[1].i64[0] = v104.i64[1];
      *v101 = (int64x2_t)v105;
      v102[1].i64[0] = v103;
      *v102 = v104;
      v106 = v191 + 3;
      LODWORD(v102) = *(_DWORD *)(a1 + 48120);
      v107 = (_DWORD)v102 - v191 - 3;
      LODWORD(v100) = *(_DWORD *)(a1 + 48096);
      v108 = *(double **)v31;
      LODWORD(object[0]) = 3;
      HIDWORD(object[0]) = v107;
      LODWORD(object[1]) = (_DWORD)v100;
      object[2] = &v108[(v191 + (_DWORD)v100 * (v191 + 3))];
      LODWORD(object[3]) = v191 + (_DWORD)v100 * (v191 + 3);
      v109 = *(double **)(a1 + 48104);
      *(_QWORD *)&v214 = v107 | 0x300000000;
      DWORD2(v214) = (_DWORD)v102;
      *(_QWORD *)&v215 = &v109[(v191 + 3)];
      DWORD2(v215) = v191 + 3;
      if (v108 == v109)
      {
        v110 = (24 * v107 + 31) & 0xFFFFFFFE0;
        v211.i64[1] = v110 >> 3;
        v111 = v42;
        v112 = v32;
        v211.i64[0] = (uint64_t)operator new(v110, (std::align_val_t)0x20uLL);
        v212 = (_QWORD *)(v107 | 0x300000000);
        sub_20F208630(&v211, (uint64_t)object);
        if ((_DWORD)v212)
        {
          v113 = HIDWORD(v212);
          if (HIDWORD(v212))
          {
            v114 = 0;
            v115 = (char *)v211.i64[0];
            v116 = 8 * v212;
            v117 = 8 * (int)v212;
            do
            {
              memmove((void *)(v215 - 8 * DWORD2(v215) + 8 * (DWORD2(v215) + DWORD2(v214) * v114++)), v115, v116);
              v115 += v117;
            }
            while (v113 != v114);
          }
        }
        if (v211.i64[0])
          MEMORY[0x212BC6368](v211.i64[0], 0x1000C8000313F17);
        v32 = v112;
        v99 = v191;
        v42 = v111;
        v106 = v191 + 3;
      }
      else
      {
        sub_20F208E50((uint64_t)&v214, (uint64_t)object);
      }
      sub_20E8BE424((uint64_t)object);
      v194[0] = (uint64_t)v42;
      v194[1] = (uint64_t)object;
      v193 = v42;
      v211.i64[1] = (uint64_t)v194;
      v212 = &v193;
      v213 = 0x3FF0000000000000;
      if (*(_QWORD *)(a1 + 48104) != *(_QWORD *)v31)
      {
        v118 = *(_DWORD *)(a1 + 48120);
        if (!v118)
          goto LABEL_158;
        if (!(v118 * *(_DWORD *)(a1 + 48124)))
          goto LABEL_158;
        v119 = (8 * (3 * v118) + 31) & 0xFFFFFFFE0;
        v209 = v119 >> 3;
        category = (char *)operator new(v119, (std::align_val_t)0x20uLL);
        __lda = v118;
        *((_QWORD *)&v214 + 1) = v42;
        *(_QWORD *)&v215 = object;
        *((_QWORD *)&v215 + 1) = 0x3FF0000000000000;
        sub_20FC3675C((uint64_t)&category, (uint64_t)&v214);
        v120 = category;
        sub_20E8BE654(0, 1, *(_DWORD *)(v194[0] + 16), *((_DWORD *)v193 + 4), 3, (const double *)category, __lda, (double *)*v193, -1.0, 1.0, *((_DWORD *)v193 + 4), *(double **)v31, *(_DWORD *)(a1 + 48096));
        if (!v120)
        {
LABEL_158:
          object[1] = (void *)4;
          v137 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
          object[0] = v137;
          LODWORD(object[2]) = 3;
          *v137 = v187;
          *((float64_t *)v137 + 1) = v189;
          *((float64_t *)v137 + 2) = v37;
          *((_QWORD *)&v214 + 1) = 4;
          v138 = (float64x2_t *)operator new(0x20uLL, (std::align_val_t)0x20uLL);
          *(_QWORD *)&v214 = v138;
          LODWORD(v215) = 3;
          v139 = *(__n128 *)a3;
          *v138 = *a3;
          v138[1].f64[0] = a3[1].f64[0];
          v139.n128_u64[0] = *(_QWORD *)(a1 + 2080);
          v140 = sub_20FC8C504((uint64_t)object, (double **)&v214, a1 + 48128, v139);
          if ((_QWORD)v214)
            MEMORY[0x212BC6368](v214, 0x1000C8000313F17);
          if (object[0])
            MEMORY[0x212BC6368](object[0], 0x1000C8000313F17);
          if (!v140)
          {
            v148 = *(_DWORD *)(v31 + 16);
LABEL_199:
            v177 = *(_DWORD *)(v31 + 20) * v148;
            if ((_DWORD)v177)
            {
              v178 = 0;
              v179 = *(double **)v31;
              v180 = 8 * v177;
              v181 = *(double **)v31;
              do
              {
                v185 = 0.0;
                if (v178 <= HIDWORD(v178))
                  v185 = v179[v178 + v148 * HIDWORD(v178)];
                *v181++ = v185;
                v182 = (v178 + 1);
                v183 = v178 & 0xFFFFFFFF00000000;
                v184 = v183 | v182;
                v178 = v183 + 0x100000000;
                if ((int)v148 > (int)v182)
                  v178 = v184;
                v180 -= 8;
              }
              while (v180);
            }
            v211.i32[0] = 0;
            LODWORD(category) = 0;
            v206 = 0u;
            v207 = 0u;
            memset(object, 0, sizeof(object));
            v217 = 0u;
            v218 = 0u;
            v215 = 0u;
            v216 = 0u;
            v214 = 0u;
            sub_20FA51FC8(v32, v211.i32, &category, object, &v214);
            sub_20FB82144((uint64_t)v32, (uint64_t *)v31, (unsigned int *)object, (unsigned int *)&v214);
            return;
          }
          sub_20F9B2A4C(v194);
          if (**(int **)(v194[0] + 56) <= 3)
          {
            v141 = *(unsigned __int8 *)(v194[0] + 72);
            v142 = sub_20E8C31DC(v194[0], "OSLogSurrogateAppender", 1, 0);
            v143 = v142 ? v142 + 16 : 0;
            if (v141 || v142)
            {
              *(_QWORD *)&v214 = v194;
              *((std::chrono::steady_clock::time_point *)&v214 + 1) = std::chrono::steady_clock::now();
              *(std::chrono::system_clock::time_point *)&v215 = std::chrono::system_clock::now();
              DWORD2(v215) = 3;
              *(_QWORD *)&v216 = "unknown file";
              DWORD2(v216) = 570;
              *((_QWORD *)&v217 + 1) = 0;
              *(_QWORD *)&v218 = 0;
              *(_QWORD *)&v217 = "unknown function";
              v144 = *(_QWORD *)v214;
              v145 = (uint64_t *)(*(_QWORD *)v214 + 16);
              if (*(char *)(*(_QWORD *)v214 + 39) < 0)
              {
                v147 = *(char **)(v144 + 16);
                v146 = *(_QWORD *)(v144 + 24);
              }
              else
              {
                v146 = *(unsigned __int8 *)(*(_QWORD *)v214 + 39);
                v147 = (char *)(*(_QWORD *)v214 + 16);
              }
              category = v147;
              v209 = v146;
              v149 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)object);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
                  operator delete(object[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v99 = v191;
              }
              v150 = byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v151 = byte_254A4A4F8;
              }
              else
              {
                v150 = *(_QWORD *)&byte_254A4A4F8[8];
                v151 = *(const char **)byte_254A4A4F8;
              }
              v211.i64[0] = (uint64_t)v151;
              v211.i64[1] = v150;
              object[0] = os_log_create(v151, category);
              sub_20E86E5A8(&object[1], (uint64_t)&v211);
              sub_20E86E5A8(&object[5], (uint64_t)&category);
              v152 = object[0];
              sub_20E86E44C((uint64_t)object);
              sub_20FC368AC(v143, v145, v152, OS_LOG_TYPE_INFO);
              if (v141)
              {
                sub_20E8C003C((uint64_t)&v214, "Special case to handle Err. Propagation order of magnitude disparity.");
                sub_20E863570((uint64_t)&v214);
              }
              sub_20E863714((uint64_t)&v214);
            }
          }
          v148 = *(_DWORD *)(v31 + 16);
          v153 = (uint64_t *)(*(_QWORD *)v31 + 8 * (v148 + 1) * v99);
          v154 = (int8x8_t)v153[2 * v148 + 2];
          v155.i64[0] = *v153;
          v155.i64[1] = v153[v148 + 1];
          v192 = v155;
          v156 = *(unsigned __int8 **)(v31 + 48);
          v157 = *v156;
          v188 = *(int8x8_t *)&a3[1].f64[0];
          v158 = *(int64x2_t *)a3;
          v190 = *(int8x16_t *)a3;
          v159 = v156[1];
          v160 = v156[2];
          if (v148 != *(_DWORD *)(v31 + 20))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 322, (uint64_t)"hessian.rows() == hessian.columns()", 35, (uint64_t)"Hessian matrix should be square.", 32, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_215;
            }
            v148 = *(_DWORD *)(v31 + 16);
          }
          if (v106 <= v148)
          {
LABEL_186:
            v158.i64[0] = v160;
            v161.i64[0] = v157;
            v161.i64[1] = v159;
            *(int8x8_t *)v158.i8 = vbsl_s8((int8x8_t)*(_OWORD *)&vceqzq_s64(v158), v154, v188);
            v162 = vbslq_s8((int8x16_t)vceqzq_s64(v161), v192, v190);
            v163 = vextq_s8(v162, v162, 8uLL).u64[0];
            v164 = v148 * v99;
            v165 = *(double **)v31;
            v166 = (_QWORD *)(*(_QWORD *)v31 + 8 * (v148 * v99 + v99));
            if (v148)
            {
              v167 = (unint64_t)(v148 - 3) << 32;
              v168 = (_QWORD *)(*(_QWORD *)v31 + 8 * (v164 + v99));
              do
              {
                *v168 = 0;
                v169 = HIDWORD(v167);
                v170 = (int)v167 < 2;
                if ((int)v167 < 2)
                  v169 = 0;
                v171 = &v168[v169];
                v172 = (v167 + 1);
                v173 = v167 & 0xFFFFFFFF00000000;
                if (!v170)
                  v172 = 0;
                v167 = v172 | v173;
                v168 = v171 + 1;
              }
              while (v168 != &v166[3 * v148]);
            }
            *v166 = v162.i64[0];
            v166[v148 + 1] = v163;
            v166[2 * v148 + 2] = v158.i64[0];
            if ((_DWORD)v99)
            {
              bzero(&v165[v164], 8 * v99);
              bzero(&v165[v148 + v164], 8 * v99);
              bzero(&v165[v148 * ((_DWORD)v99 + 2)], 8 * v99);
            }
            if (v148 > v106)
            {
              v174 = v148 - v99 - 3;
              if (v148 - (_DWORD)v99 != 3)
              {
                v175 = v148 * v106 + v99;
                do
                {
                  v176 = &v165[v175];
                  *v176 = 0.0;
                  v176[1] = 0.0;
                  v176[2] = 0.0;
                  v175 += v148;
                  --v174;
                }
                while (v174);
              }
            }
            goto LABEL_199;
          }
          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 323, (uint64_t)"(variable_offset + DIM) <= hessian.rows()", 41, (uint64_t)"Indices exceed matrix bounds.", 29, (void (*)(void **))sub_21023DDB0))
          {
            v148 = *(_DWORD *)(v31 + 16);
            goto LABEL_186;
          }
LABEL_215:
          abort();
        }
        v121 = v120;
LABEL_157:
        MEMORY[0x212BC6368](v121, 0x1000C8000313F17);
        goto LABEL_158;
      }
      v122 = *(_DWORD *)(a1 + 48120);
      v123 = (8 * (v122 * v122) + 31) & 0xFFFFFFFE0;
      *((_QWORD *)&v214 + 1) = v123 >> 3;
      *(_QWORD *)&v214 = operator new(v123, (std::align_val_t)0x20uLL);
      LODWORD(v215) = v122;
      DWORD1(v215) = v122;
      sub_20FC3652C((uint64_t)&v214, (uint64_t)&v211);
      v124 = (*(_DWORD *)(a1 + 48100) * *(_DWORD *)(a1 + 48096));
      v121 = (char *)v214;
      if ((_DWORD)v124)
      {
        v125 = *(double **)v31;
        v126 = (v124 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v126 < 9)
        {
          v127 = (double *)v214;
          v128 = *(double **)v31;
LABEL_154:
          v135 = &v125[v124];
          do
          {
            v136 = *v127++;
            *v128 = *v128 - v136;
            ++v128;
          }
          while (v128 != v135);
          goto LABEL_156;
        }
        if ((unint64_t)v125 < (uint64_t)v214 + 8 * v124)
        {
          v127 = (double *)v214;
          v128 = *(double **)v31;
          if ((unint64_t)v214 < (unint64_t)&v125[v124])
            goto LABEL_154;
        }
        v129 = v126 + 1;
        v130 = v129 & 0x3FFFFFFFFFFFFFFCLL;
        v127 = (double *)(v214 + v130 * 8);
        v128 = &v125[v130];
        v131 = (float64x2_t *)(v125 + 2);
        v132 = (float64x2_t *)(v214 + 16);
        v133 = v129 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = vsubq_f64(*v131, *v132);
          v131[-1] = vsubq_f64(v131[-1], v132[-1]);
          *v131 = v134;
          v131 += 2;
          v132 += 2;
          v133 -= 4;
        }
        while (v133);
        if (v129 != (v129 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_154;
      }
LABEL_156:
      if (!v121)
        goto LABEL_158;
      goto LABEL_157;
    }
  }
}

void sub_20FC362C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  uint64_t v51;

  if (a51)
  {
    if (a50 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v51 - 208);
  _Unwind_Resume(a1);
}

void sub_20FC3630C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20FC36320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *object,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  if (a52 && a51 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v59 - 208);
  _Unwind_Resume(a1);
}

void sub_20FC3651C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20FC3652C(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  const double *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  size_t v19;
  int v20[2];
  size_t v21;
  int __lda;
  void *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4)
  {
    v16 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v17 = *(_DWORD *)(v5 + 16);
    v18 = (8 * v17 * v16 + 31) & 0xFFFFFFFE0;
    v24 = v18 >> 3;
    v23 = operator new(v18, (std::align_val_t)0x20uLL);
    v25 = __PAIR64__(v17, v16);
    sub_20FC3652C(&v23, a2);
    v15 = *(void **)a1;
    v19 = v24;
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v19;
    *(_QWORD *)(a1 + 16) = v25;
    if (!v15)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = *(_DWORD *)(*v6 + 16);
  if (v8 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v9 = (8 * (3 * v8) + 31) & 0xFFFFFFFE0;
    v21 = v9 >> 3;
    *(_QWORD *)v20 = operator new(v9, (std::align_val_t)0x20uLL);
    __lda = v8;
    v10 = v6[1];
    v24 = v7;
    v25 = v10;
    v26 = 0x3FF0000000000000;
    sub_20FC3675C((uint64_t)v20, (uint64_t)&v23);
    v11 = **(_QWORD **)(a2 + 16);
    v12 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v13 = *(double *)(a2 + 24);
    v14 = *(const double **)v20;
    sub_20E8BE654(0, 1, v12, *(_DWORD *)(v11 + 16), 3, *(const double **)v20, __lda, *(double **)v11, v13, 0.0, *(_DWORD *)(v11 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
    if (!v14)
      return;
    v15 = (void *)v14;
LABEL_9:
    MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_20FC36714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FC3675C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  int v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  int v16;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(double **)a1;
  if (*(double **)v4 == v5 || (v6 = *(double **)(a2 + 16), v6 == v5))
  {
    v9 = *(_DWORD *)(v4 + 16);
    v10 = (8 * (3 * v9) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    v16 = v9;
    sub_20FC3675C(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 16);
    v8 = *(_DWORD *)(v4 + 20);
    if (v8 * v7)
    {
      sub_20E8BE654(0, 0, v7, 3, v8, *(const double **)v4, v7, v6, *(double *)(a2 + 24), 0.0, 3, v5, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 16);
      if (v13)
        bzero(v5, 8 * (3 * v13));
    }
  }
}

void sub_20FC36884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FC368AC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FC36C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC36C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC36C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC36C98(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  float64x2_t v11;
  unsigned int v12;
  __int128 v13[3];
  float64x2_t v14;
  float64x2_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(unsigned int **)(result + 5960);
  v3 = *(unsigned int **)(result + 5968);
  if (v2 != v3)
  {
    v5 = (int64x2_t *)(result + 5184);
    v6 = result + 7864;
    do
    {
      v7 = *((_QWORD *)v2 + 1);
      if (*(_BYTE *)(v7 + 20))
      {
        v8 = *v2;
        v9 = *(_OWORD *)(v7 + 32);
        v10 = *(_OWORD *)(v7 + 48);
        *(_QWORD *)&v13[0] = *v2;
        v13[2] = v10;
        v13[1] = v9;
        LOBYTE(v14.f64[0]) = 0;
        v16 = 0;
        if (*(_BYTE *)(a2 + 32))
        {
          v11 = *(float64x2_t *)(a2 + 16);
          v14 = *(float64x2_t *)a2;
          v15 = v11;
          v16 = 1;
          if (vminnmvq_f64(vminnmq_f64(v14, v11)) <= 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        v12 = v8;
        v17 = 0;
        v18 = 0;
        result = sub_20FBF2AB4(v5, v13, &v12, 0, 0);
        if ((result & 1) != 0)
        {
          *(_BYTE *)(v6 + 4) = 0;
          *(_DWORD *)v6 = 0;
        }
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20FC36DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C(v9 - 96);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC36DFC(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  unsigned int v10;
  __int128 v11[2];
  uint64_t v12;
  float64x2_t v13;
  float64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(unsigned int **)(result + 6056);
  v3 = *(unsigned int **)(result + 6064);
  if (v2 != v3)
  {
    v5 = (int64x2_t *)(result + 5184);
    v6 = result + 7864;
    do
    {
      v7 = *((_QWORD *)v2 + 1);
      if (*(_BYTE *)(v7 + 20))
      {
        v8 = *v2;
        v16 = 0uLL;
        v17 = 0;
        sub_20E9733B8((float64x2_t *)(v7 + 32), (double *)&v16);
        v11[1] = v16;
        v12 = v17;
        *(_QWORD *)&v11[0] = v8;
        LOBYTE(v13.f64[0]) = 0;
        v15 = 0;
        if (*(_BYTE *)(a2 + 24))
        {
          v14 = *(double *)(a2 + 16);
          v13 = *(float64x2_t *)a2;
          v15 = 1;
          v9 = (float64x2_t)vdupq_lane_s64(0x7FF8000000000000, 0);
          v9.f64[0] = v14;
          if (vminnmvq_f64(vminnmq_f64(v13, v9)) <= 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        v10 = v8;
        v16 = 0uLL;
        result = sub_20FBF3794(v5, v11, &v10, 0, 0);
        if ((result & 1) != 0)
        {
          *(_BYTE *)(v6 + 4) = 0;
          *(_DWORD *)v6 = 0;
        }
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20FC36F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC36F8C(uint64_t result, unsigned int a2, double a3)
{
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t v29[3];
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v5 = (int64x2_t *)result;
  if (a3 <= 0.0)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3287, (uint64_t)"prior_variance > 0", 18, (uint64_t)"Input variance is smaller than zero", 35, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_34;
  }
  v6 = v5[354].i64[1];
  v7 = v5[355].i64[0];
  if (v7 != v6)
  {
    v8 = (v7 - v6) >> 4;
    do
    {
      v9 = v8 >> 1;
      v10 = (unsigned int *)(v6 + 16 * (v8 >> 1));
      v12 = *v10;
      v11 = v10 + 4;
      v8 += ~(v8 >> 1);
      if (v12 < a2)
        v6 = (uint64_t)v11;
      else
        v8 = v9;
    }
    while (v8);
  }
  if (v6 == v7 || *(_DWORD *)v6 != a2)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v6 = v7;
    if ((_DWORD)result)
      goto LABEL_34;
  }
  v13 = *(_QWORD *)(v6 + 8);
  if (!*(_BYTE *)(v13 + 20))
    return result;
  v14 = v5[407].i64[0];
  v15 = (_QWORD *)v5[407].i64[1];
  if (v15 != (_QWORD *)v14)
  {
    v16 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v15 - v14) >> 4);
    v17 = (_QWORD *)v5[407].i64[0];
    v18 = v16;
    do
    {
      v19 = v18 >> 1;
      v20 = &v17[14 * (v18 >> 1)];
      v22 = *v20;
      v21 = v20 + 14;
      result = v22;
      v18 += ~(v18 >> 1);
      if (v22 < a2)
        v17 = v21;
      else
        v18 = v19;
    }
    while (v18);
    if (v15 != v17 && *v17 == a2)
    {
      do
      {
        v23 = v16 >> 1;
        v24 = (unint64_t *)(v14 + 112 * (v16 >> 1));
        v26 = *v24;
        v25 = v24 + 14;
        v16 += ~(v16 >> 1);
        if (v26 < a2)
          v14 = (uint64_t)v25;
        else
          v16 = v23;
      }
      while (v16);
      if (v15 == (_QWORD *)v14 || *(_QWORD *)v14 != a2)
        v14 = v5[407].i64[1];
      *(double *)(v14 + 32) = 1.0 / sqrt(a3);
      *(_BYTE *)(v14 + 40) = 1;
      return result;
    }
  }
  v27 = *(unint64_t **)(v13 + 24);
  v29[0] = a2;
  v29[2] = *v27;
  v30 = 1.0 / sqrt(a3);
  v31 = 1;
  if (v30 <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 507, (uint64_t)"*prior_inverse_sigma > 0", 24, (uint64_t)"The prior variance cannot be smaller or equal to 0", 50, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_34;
  }
  v28 = a2;
  v32 = 0;
  v33 = 0;
  result = sub_20FBF2150(v5 + 324, v29, &v28, 0, 0);
  if ((result & 1) != 0)
  {
    v5[491].i8[12] = 0;
    v5[491].i32[2] = 0;
    return result;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3305, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor. This should never happen.", 51, (void (*)(void **))sub_21023DDB0);
  if ((_DWORD)result)
LABEL_34:
    abort();
  return result;
}

void sub_20FC37244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20E86665C((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC37260(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FC37270(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FC372A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20FC372B0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24CA04BD0;
  v4 = a2[1];
  v12 = *a2;
  v21 = v4;
  v5 = a2[3];
  v30 = a2[2];
  v39 = v5;
  v6 = a2[5];
  v48 = a2[4];
  v57 = v6;
  v7 = a2[7];
  v66 = a2[6];
  v75 = v7;
  v8 = a2[9];
  v84 = a2[8];
  v93 = v8;
  v9 = a2[11];
  v102 = a2[10];
  v111 = v9;
  v10 = a2[13];
  v120 = a2[12];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  v56 = 0;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  v65 = 0;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v67 = 0u;
  v74 = 0;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v76 = 0u;
  v83 = 0;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v85 = 0u;
  v92 = 0;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v94 = 0u;
  v101 = 0;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v103 = 0u;
  v110 = 0;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v112 = 0u;
  v119 = 0;
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  v123 = 0u;
  v121 = 0u;
  v128 = 0;
  v129 = v10;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v130 = 0u;
  v137 = 0;
  v138 = a2[14];
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = &off_24CA00428;
  sub_20F9B2B40((_BYTE *)(a1 + 24), (float64x2_t *)&v12, a3);
  return a1;
}

void sub_20FC374C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double sub_20FC374D8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 1.0 / (*(double *)(a1 + 16) * *(double *)(a1 + 16));
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

void sub_20FC37508(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FC37518(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FC37548(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20FC3755C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FC37570()
{
  return 2;
}

float64x2_t sub_20FC37578(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v5;
  float64x2_t result;

  a4.f64[0] = *(float64_t *)(a1 + 16);
  a5.f64[0] = a2[1].f64[0];
  v5 = *(_OWORD *)&vmulq_f64(a5, a4);
  result = vmulq_n_f64(*a2, a4.f64[0]);
  *(float64x2_t *)a3 = result;
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

float64_t sub_20FC37598(uint64_t a1, float64x2_t *a2, float64x2_t a3, float64x2_t a4)
{
  float64x2_t v4;

  a3.f64[0] = *(float64_t *)(a1 + 16);
  a4.f64[0] = a2[1].f64[0];
  v4 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3.f64[0], 0);
  *(_QWORD *)&a3.f64[0] = *(_OWORD *)&vdivq_f64(a4, a3);
  *a2 = vdivq_f64(*a2, v4);
  a2[1].f64[0] = a3.f64[0];
  return a3.f64[0];
}

float64_t sub_20FC375BC(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t v6;

  a4.f64[0] = *(float64_t *)(a1 + 16);
  a5.f64[0] = a2[1].f64[0];
  v5 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4.f64[0], 0);
  *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vdivq_f64(a5, a4);
  v6 = vdivq_f64(*a2, v5);
  a3[1].f64[0] = a4.f64[0];
  *a3 = v6;
  return a4.f64[0];
}

double sub_20FC375E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double result;

  result = *(double *)(a1 + 16) * a3;
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_20FC37608@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16) * *(double *)(a1 + 16);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

uint64_t sub_20FC37630(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(std::__shared_weak_count **)(i - 112);
      if (!v7)
        continue;
    }
    else
    {
LABEL_8:
      v7 = *(std::__shared_weak_count **)(i - 112);
      if (!v7)
        continue;
    }
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FC37700(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(std::__shared_weak_count **)(i - 120);
      if (!v7)
        continue;
    }
    else
    {
LABEL_8:
      v7 = *(std::__shared_weak_count **)(i - 120);
      if (!v7)
        continue;
    }
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FC377D0()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FC377E4()
{
  return 1;
}

float64x2_t sub_20FC377EC(float64x2_t *a1, float64x2_t *a2, uint64_t a3, double a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t result;

  a5.f64[0] = a2[1].f64[0];
  a6.f64[0] = a1[2].f64[0];
  result = vmulq_f64(*a2, a1[1]);
  *(_QWORD *)(a3 + 16) = *(_OWORD *)&vmulq_f64(a5, a6);
  *(float64x2_t *)a3 = result;
  return result;
}

float64_t sub_20FC37818(float64x2_t *a1, float64x2_t *a2, double a3, double a4, float64x2_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, float64x2_t **a12, uint64_t a13, uint64_t a14, uint64_t a15, float64x2_t a16, uint64_t a17, float64x2_t ***a18)
{
  float64x2_t v23;
  double v24;
  double v25;
  float64_t result;
  float64x2_t *vars8;

  vars8 = a1 + 1;
  a12 = &vars8;
  a13 = 0x3EB0C6F7A0B5ED8DLL;
  a18 = &a12;
  a16.f64[0] = a2[1].f64[0];
  *(_QWORD *)&a16.f64[1] = &a18;
  __asm { FMOV            V5.2D, #1.0 }
  v23 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q5, a1[1]), (int8x16_t)vcgtq_f64((float64x2_t)vdupq_lane_s64(0x3EB0C6F7A0B5ED8DLL, 0), vabsq_f64(a1[1])));
  v24 = a1[2].f64[0];
  _Q5.f64[0] = fabs(v24);
  v25 = 1.0 / v24;
  a5.f64[0] = 0.0;
  if (_Q5.f64[0] >= 0.000001)
    a5.f64[0] = v25;
  *(_QWORD *)&result = *(_OWORD *)&vmulq_f64(a16, a5);
  *a2 = vmulq_f64(*a2, v23);
  a2[1].f64[0] = result;
  return result;
}

float64_t sub_20FC378D0(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, double a4, double a5, float64x2_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, float64x2_t **a12, uint64_t a13, uint64_t a14, uint64_t a15, float64x2_t a16, uint64_t a17, float64x2_t ***a18)
{
  float64x2_t v23;
  double v24;
  double v25;
  float64_t result;
  float64x2_t *vars8;

  vars8 = a1 + 1;
  a12 = &vars8;
  a13 = 0x3EB0C6F7A0B5ED8DLL;
  a18 = &a12;
  a16.f64[0] = a2[1].f64[0];
  *(_QWORD *)&a16.f64[1] = &a18;
  __asm { FMOV            V5.2D, #1.0 }
  v23 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q5, a1[1]), (int8x16_t)vcgtq_f64((float64x2_t)vdupq_lane_s64(0x3EB0C6F7A0B5ED8DLL, 0), vabsq_f64(a1[1])));
  v24 = a1[2].f64[0];
  _Q5.f64[0] = fabs(v24);
  v25 = 1.0 / v24;
  a6.f64[0] = 0.0;
  if (_Q5.f64[0] >= 0.000001)
    a6.f64[0] = v25;
  *(_QWORD *)&result = *(_OWORD *)&vmulq_f64(a16, a6);
  *a3 = vmulq_f64(*a2, v23);
  a3[1].f64[0] = result;
  return result;
}

float64x2_t sub_20FC37988@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q1>)
{
  uint64_t v4;
  float64x2_t result;

  a4.f64[0] = a1[2].f64[0];
  v4 = *(_OWORD *)&vmulq_f64(a3, a4);
  result = vmulq_n_f64(a1[1], a3.f64[0]);
  *(float64_t *)a2 = result.f64[0];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(float64_t *)(a2 + 32) = result.f64[1];
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 64) = v4;
  return result;
}

double sub_20FC379BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  float64x2_t v3;

  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)&result = *(_OWORD *)&vmulq_f64((float64x2_t)*(unint64_t *)(a1 + 32), (float64x2_t)*(unint64_t *)(a1 + 32));
  v3 = vmulq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a1 + 16));
  *(float64_t *)a2 = v3.f64[0];
  *(float64_t *)(a2 + 32) = v3.f64[1];
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_20FC379F4@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  unint64_t v11;
  double result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = fabs(v2);
  v5 = 1.0 / v2;
  if (v4 < 1.0e-15)
    v5 = 0.0;
  v6 = fabs(v3);
  v7 = 1.0 / v3;
  if (v6 < 1.0e-15)
    v7 = 0.0;
  v8 = a1[4];
  v9 = 1.0 / v8;
  if (fabs(v8) < 1.0e-15)
    v9 = 0.0;
  v10.f64[0] = 0.0;
  v10.f64[1] = v7;
  *(double *)&v11 = v5 * 0.0;
  *(double *)(a2 + 16) = v5 * 0.0 + 0.0 + v9 * 0.0;
  *(float64x2_t *)a2 = vaddq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v5, v5), (float64x2_t)0, v10), (float64x2_t)0);
  *(double *)(a2 + 40) = v7 * 0.0 + 0.0 + v9 * 0.0;
  *(float64x2_t *)(a2 + 24) = vaddq_f64(vmlaq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(v5 * 0.0), v10, v7), (float64x2_t)0);
  result = v9 * v9 + 0.0;
  *(double *)(a2 + 64) = result;
  *(float64x2_t *)(a2 + 48) = vmlaq_n_f64(vmlaq_f64((float64x2_t)v11, (float64x2_t)0, v10), (float64x2_t)0, v9);
  return result;
}

uint64_t sub_20FC37AAC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 360;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20FC37B38(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DBF70;
  strcpy(v2, "cv3d::vio::TimeOffsetVariable]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 29, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20FC37D30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20FC37D50(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DBF00;
  strcpy(v2, "cv3d::vio::VIODepthExtrinsicsVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 45, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20FC37F48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FC37F68(float *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  unint64_t v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (char *)operator new(0x78uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v13 + 72) = *(_OWORD *)(a3 + 56);
  *((_QWORD *)v13 + 11) = *(_QWORD *)(a3 + 72);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *((_OWORD *)v13 + 6) = *(_OWORD *)(a3 + 80);
  *((_QWORD *)v13 + 14) = *(_QWORD *)(a3 + 96);
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    v16 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *(_QWORD *)v13 = *v17;
LABEL_90:
    *v17 = v13;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_20E877A38();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
      goto LABEL_68;
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
      goto LABEL_68;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v6 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 == v27)
        goto LABEL_62;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
      {
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
LABEL_62:
        v25 = v36;
        v36 = (_QWORD *)*v36;
        if (!v36)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
        v25 = v36;
        v36 = (_QWORD *)*v36;
        v27 = v38;
        if (!v36)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (prime <= v33)
      prime = v33;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = *((_QWORD *)a1 + 1);
  }
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v6)
    v6 %= v7;
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *(_QWORD *)v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v16[v6] = a1 + 4;
  if (*(_QWORD *)v13)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*((_QWORD *)a1 + 3);
}

void sub_20FC38420(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20FC38434(float *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  unint64_t v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (char *)operator new(0xC0uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v13 + 136) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(v13 + 152) = *(_OWORD *)(a3 + 136);
  *(_OWORD *)(v13 + 168) = *(_OWORD *)(a3 + 152);
  *((_QWORD *)v13 + 23) = *(_QWORD *)(a3 + 168);
  *(_OWORD *)(v13 + 72) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(v13 + 88) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(v13 + 104) = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(v13 + 120) = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a3 + 40);
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    v16 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *(_QWORD *)v13 = *v17;
LABEL_90:
    *v17 = v13;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_20E877A38();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
      goto LABEL_68;
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
      goto LABEL_68;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v6 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 == v27)
        goto LABEL_62;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
      {
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
LABEL_62:
        v25 = v36;
        v36 = (_QWORD *)*v36;
        if (!v36)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
        v25 = v36;
        v36 = (_QWORD *)*v36;
        v27 = v38;
        if (!v36)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (prime <= v33)
      prime = v33;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = *((_QWORD *)a1 + 1);
  }
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v6)
    v6 %= v7;
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *(_QWORD *)v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v16[v6] = a1 + 4;
  if (*(_QWORD *)v13)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*((_QWORD *)a1 + 3);
}

void sub_20FC3890C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC38920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  float64x2_t v30;
  float64x2_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int64x2_t v36;
  int64x2_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t **v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __n128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 *v75;
  __int128 *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 *v79;
  __int128 *v80;
  unsigned int v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  int v85;
  void *v86;
  void *v87;
  void *v88;
  float64_t v89;
  float64_t v90;
  _QWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  void *v94;
  int v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  _DWORD *v116;
  int64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  float64x2_t *v122;
  float64x2_t *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v131;
  char *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  unsigned int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int v145;
  __int128 *v146;
  __int128 *v147;
  unint64_t v148;
  unint64_t v149;
  __int128 *v150;
  __int128 *v151;
  unsigned int v152;
  _QWORD *v153;
  _QWORD *v154;
  void *v155;
  int v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  _QWORD *v173;
  _QWORD *v174;
  void *v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  float64x2_t *v192;
  float64x2_t *v193;
  uint64_t v194;
  int v195;
  __int128 *v196;
  uint64_t v197;
  _QWORD *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  BOOL v205;
  __int16 v206;
  uint64_t v207;
  float64x2_t v209;
  int8x16_t v212;
  int8x16_t v213;
  float64x2_t v218;
  int64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  int8x16_t v224;
  char *v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  _BYTE *v233;
  _DWORD *v234;
  char *v235;
  int64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  _OWORD *v241;
  char *v242;
  uint64_t v243;
  __int128 v244;
  int v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  __int128 v258;
  uint64_t v259;
  unint64_t v260;
  __int128 *v261;
  _OWORD *i;
  __int128 v263;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v271;
  double v272;
  uint64_t v273;
  double v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  double v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  float64x2_t *v292;
  uint64_t v293;
  uint64_t v294;
  int64x2_t v295;
  float64x2_t v296;
  __int128 v297;
  __int128 v298;
  int64x2_t v299;
  uint64_t v300;
  double v301;
  uint64_t v302;
  double v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  double v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int64x2_t v337;
  float64x2_t v338;
  double v339;
  double v340;
  int64x2_t v341;
  uint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  unsigned int v345;
  unsigned int v346;
  char *v347;
  char *v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  char *v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  uint64_t v358;
  int v359;
  uint64_t *v360;
  uint64_t *v361;
  uint64_t v362;
  int v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  _QWORD *v379;
  unint64_t v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  _QWORD *v385;
  int v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int v398;
  char *v399;
  char *v400;
  unint64_t v401;
  unint64_t v402;
  char *v403;
  char *v404;
  unsigned int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  _QWORD *v420;
  uint64_t v421;
  BOOL v422;
  _QWORD *v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  float64_t *v430;
  float64x2_t v431;
  float64_t *v432;
  int v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  int v437;
  unsigned int v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  BOOL v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int *v446;
  double *v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  uint64_t v455;
  char *v456;
  __int128 *v457;
  char *v458;
  unint64_t *v459;
  char *v460;
  char *v461;
  char *v462;
  unint64_t v463;
  unint64_t v464;
  unsigned int *v465;
  char *v466;
  unsigned int v467;
  _BOOL4 v468;
  uint64_t v469;
  __int128 v470;
  __int128 v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *p_shared_owners;
  unint64_t v475;
  float64_t v476;
  unint64_t *v477;
  unint64_t v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  unsigned int *v483;
  unsigned int *v484;
  double v485;
  int32x2_t v486;
  double v487;
  __int8 v488;
  double v489;
  uint64_t v490;
  char *v491;
  __int128 *v492;
  char *v493;
  unint64_t *v494;
  char *v495;
  char *v496;
  char *v497;
  unint64_t v498;
  unint64_t v499;
  unsigned int *v500;
  char *v501;
  unsigned int v502;
  _BOOL4 v503;
  uint64_t v504;
  __int128 v505;
  __int128 v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  float64_t v511;
  unint64_t *v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  float64x2_t *v517;
  unsigned int *v518;
  unsigned int *v519;
  double v520;
  uint64_t v521;
  unsigned int v522;
  __int128 v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  double v527;
  double v528;
  double v529;
  double v530;
  float64_t v531;
  float64_t v532;
  float64_t v533;
  float64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  __int128 v538;
  uint64_t v539;
  __int128 v540;
  __int128 v541;
  uint64_t v542;
  uint64_t v543;
  __int128 v544;
  uint64_t v545;
  uint64_t v546;
  double v547;
  float64x2_t v548;
  double v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  unint64_t *v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64_t v558;
  int v559;
  __int128 *v560;
  uint64_t v561;
  int v562;
  uint64_t v563;
  uint64_t v564;
  float64x2_t v565;
  float64x2_t v566;
  __n128 v567;
  float64x2_t v568;
  uint64_t v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  char *v578;
  __int128 *v579;
  char *v580;
  unint64_t *v581;
  char *v582;
  int64x2_t v583;
  uint64_t v584;
  uint64_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v592;
  int64x2_t v593;
  float64x2_t v595;
  float64x2_t v598;
  int8x16_t v599;
  unint64_t v600;
  unint64_t v601;
  __int128 v602;
  unint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int v609;
  char *v610;
  char *v611;
  unint64_t v612;
  unint64_t v613;
  char *v614;
  char *v615;
  unsigned int v616;
  _QWORD *v617;
  _QWORD *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  _QWORD *v626;
  _QWORD *v627;
  uint64_t v628;
  _QWORD *v629;
  int v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v634;
  int v635;
  char v636;
  __int128 v637;
  uint64_t v638;
  char *j;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  __int128 v643;
  uint64_t v644;
  __int128 v645;
  __int128 v646;
  uint64_t v647;
  uint64_t v648;
  __int128 v649;
  uint64_t v650;
  _QWORD *v651;
  unint64_t *v652;
  int v653;
  __int128 *v654;
  uint64_t v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  float64_t v660;
  unint64_t *v661;
  unint64_t v662;
  int v663;
  unint64_t v664;
  std::__shared_weak_count *v665;
  unint64_t *v666;
  unint64_t v667;
  unint64_t *v668;
  uint64_t k;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  uint64_t v679;
  float64x2_t v680;
  float64x2_t v681;
  char v683;
  _QWORD *v684;
  _QWORD *v685;
  uint64_t v686;
  uint64_t *v687;
  uint64_t *v688;
  uint64_t *v689;
  char *v690;
  char *v691;
  char *v692;
  char *v693;
  unsigned int v694;
  uint64_t *v695;
  uint64_t *v696;
  double *v697;
  BOOL v698;
  BOOL v699;
  char *v700;
  unint64_t v701;
  unint64_t v702;
  unsigned int *v703;
  char *v704;
  unsigned int v705;
  char *v706;
  unint64_t v707;
  unint64_t v708;
  unsigned int *v709;
  char *v710;
  unsigned int v711;
  _QWORD *v712;
  _QWORD *v713;
  _QWORD *v714;
  _QWORD *v715;
  uint64_t v716;
  uint64_t v717;
  BOOL v718;
  _QWORD *v719;
  unint64_t v720;
  char *v721;
  char *v722;
  unint64_t v723;
  unint64_t v724;
  unint64_t *v725;
  unint64_t v726;
  char *v727;
  _BYTE *v728;
  int v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  uint64_t v735;
  _QWORD *v736;
  _QWORD *v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  _QWORD *v744;
  double v745;
  uint64_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  _QWORD *v750;
  char *v751;
  std::__shared_weak_count *v752;
  int v753;
  unint64_t v754;
  unint64_t v755;
  uint64_t v756;
  uint64_t v757;
  size_t v758;
  const char *v759;
  int v760;
  unint64_t v761;
  unint64_t v762;
  uint64_t v763;
  uint64_t v764;
  size_t v765;
  const char *v766;
  unint64_t *v767;
  unint64_t v768;
  uint64_t v769;
  float64x2_t v770;
  float64x2_t v771;
  _QWORD *v772;
  char *v773;
  double v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  unint64_t v778;
  unint64_t v779;
  unsigned int v780;
  unint64_t v781;
  int8x8_t v782;
  uint8x8_t v783;
  unint64_t v784;
  _QWORD *v785;
  _QWORD *v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t v789;
  void *v790;
  unint64_t *v791;
  unint64_t *v792;
  unint64_t v793;
  unint64_t v794;
  unint64_t *v795;
  unint64_t *v796;
  float64_t v797;
  unint64_t v798;
  _QWORD *v799;
  unint64_t v800;
  unint64_t *v801;
  _QWORD *v802;
  unint64_t v803;
  char v804;
  char *v805;
  char *v806;
  unint64_t v807;
  unint64_t v808;
  unsigned int *v809;
  char *v810;
  unsigned int v811;
  unint64_t v812;
  unint64_t *v813;
  unint64_t *v814;
  unint64_t *v815;
  __int128 v816;
  __int128 v817;
  unint64_t v818;
  unint64_t *v819;
  unint64_t *v820;
  unint64_t v821;
  __int128 v822;
  std::__shared_weak_count *v823;
  unint64_t *v824;
  unint64_t v825;
  __int128 v826;
  __int128 v827;
  unint64_t v828;
  __int128 v829;
  std::__shared_weak_count *v830;
  unint64_t *v831;
  unint64_t v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  unint64_t v844;
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  _QWORD *v848;
  unsigned int v849;
  void *v850;
  unint64_t *v851;
  unint64_t *v852;
  unint64_t v853;
  unsigned int v854;
  unint64_t v855;
  uint64_t v856;
  unint64_t *v857;
  unint64_t *v858;
  unint64_t *v859;
  unint64_t v860;
  unint64_t *v861;
  unint64_t v862;
  unint64_t *v863;
  unint64_t *v864;
  unint64_t v865;
  char v866;
  char *v867;
  char *v868;
  uint64_t v869;
  unint64_t v870;
  char *v871;
  unint64_t v872;
  unint64_t v873;
  unsigned int *v874;
  char *v875;
  unsigned int v876;
  uint64_t v877;
  unint64_t v878;
  unsigned int *v879;
  char *v880;
  unsigned int v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  float64_t v885;
  uint64_t v886;
  unint64_t *v887;
  unint64_t *v888;
  __int128 v889;
  __int128 v890;
  unint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t *v894;
  std::__shared_weak_count *v895;
  unint64_t *v896;
  unint64_t v897;
  unint64_t *v898;
  unint64_t v899;
  std::__shared_weak_count *v900;
  unint64_t *v901;
  unint64_t v902;
  unint64_t v903;
  unsigned int v904;
  _QWORD *v905;
  unint64_t v906;
  char *v907;
  std::__shared_weak_count *v908;
  unint64_t *v909;
  unint64_t v910;
  std::__shared_weak_count *v911;
  unint64_t *v912;
  unint64_t v913;
  std::__shared_weak_count *v914;
  unint64_t *v915;
  unint64_t v916;
  std::__shared_weak_count *v917;
  unint64_t *v918;
  unint64_t v919;
  std::__shared_weak_count *v920;
  unint64_t *v921;
  unint64_t v922;
  unint64_t *v923;
  std::__shared_weak_count *v924;
  unint64_t *v925;
  unint64_t v926;
  unint64_t *v927;
  unint64_t v928;
  std::__shared_weak_count *v929;
  unint64_t *v930;
  unint64_t v931;
  unint64_t *v932;
  __int128 v933;
  __int128 v934;
  unint64_t v935;
  float64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  unint64_t v940;
  unint64_t v941;
  char *v942;
  __int128 v943;
  uint64_t v944;
  float64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  char v950;
  __int128 v951;
  __int128 v952;
  uint64_t v953;
  uint64_t v954;
  __int128 v955;
  __int128 v956;
  uint64_t v957;
  double *v958;
  float64_t v959;
  float64_t v960;
  std::__shared_weak_count *v961;
  unint64_t *v962;
  unint64_t v963;
  std::__shared_weak_count *v964;
  unint64_t *v965;
  unint64_t v966;
  std::__shared_weak_count *v967;
  unint64_t *v968;
  unint64_t v969;
  std::__shared_weak_count *v970;
  unint64_t *v971;
  unint64_t v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  unint64_t v976;
  unint64_t v977;
  char *v978;
  unint64_t *v979;
  __int128 v980;
  __int128 v981;
  unint64_t v982;
  float64_t v983;
  uint64_t v984;
  unint64_t v985;
  char *v986;
  __int128 v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  char v994;
  __int128 v995;
  __int128 v996;
  uint64_t v997;
  uint64_t v998;
  __int128 v999;
  __int128 v1000;
  uint64_t v1001;
  double *v1002;
  float64_t v1003;
  float64_t v1004;
  std::__shared_weak_count *v1005;
  unint64_t *v1006;
  unint64_t v1007;
  std::__shared_weak_count *v1008;
  unint64_t *v1009;
  unint64_t v1010;
  std::__shared_weak_count *v1011;
  unint64_t *v1012;
  unint64_t v1013;
  std::__shared_weak_count *v1014;
  unint64_t *v1015;
  unint64_t v1016;
  std::__shared_weak_count *v1017;
  unint64_t *v1018;
  unint64_t v1019;
  unsigned __int8 v1020;
  const char *v1021;
  size_t v1022;
  _BYTE *v1023;
  unint64_t v1024;
  const char *v1025;
  uint64_t v1026;
  int v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  _BYTE *v1031;
  uint64_t v1032;
  uint64_t v1033;
  NSObject *v1034;
  size_t v1035;
  std::__shared_weak_count_vtbl *v1036;
  std::__shared_weak_count *v1037;
  std::__shared_weak_count *v1038;
  unint64_t *v1039;
  unint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  float64_t v1046;
  std::__shared_weak_count *v1047;
  unint64_t *v1048;
  unint64_t v1049;
  std::__shared_weak_count *v1050;
  unint64_t *v1051;
  unint64_t v1052;
  void *v1053;
  std::__shared_weak_count *v1054;
  unint64_t *v1055;
  unint64_t v1056;
  std::__shared_weak_count *v1057;
  unint64_t *v1058;
  unint64_t v1059;
  std::__shared_weak_count *v1060;
  unint64_t *v1061;
  unint64_t v1062;
  std::__shared_weak_count *v1063;
  unint64_t *v1064;
  unint64_t v1065;
  void *v1066;
  std::__shared_weak_count *v1067;
  unint64_t *v1068;
  unint64_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  std::__shared_weak_count *v1072;
  unint64_t *v1073;
  unint64_t v1074;
  unint64_t *v1075;
  unsigned __int8 v1076;
  const char *v1077;
  size_t v1078;
  _BYTE *v1079;
  unint64_t v1080;
  const char *v1081;
  uint64_t v1082;
  int v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  _BYTE *v1087;
  uint64_t v1088;
  uint64_t v1089;
  NSObject *v1090;
  size_t v1091;
  std::__shared_weak_count_vtbl *v1092;
  std::__shared_weak_count *v1093;
  std::__shared_weak_count *v1094;
  unint64_t *v1095;
  unint64_t v1096;
  unint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  float64_t v1102;
  std::__shared_weak_count *v1103;
  unint64_t *v1104;
  unint64_t v1105;
  std::__shared_weak_count *v1106;
  unint64_t *v1107;
  unint64_t v1108;
  void *v1109;
  std::__shared_weak_count *v1110;
  unint64_t *v1111;
  unint64_t v1112;
  std::__shared_weak_count *v1113;
  unint64_t *v1114;
  unint64_t v1115;
  std::__shared_weak_count *v1116;
  unint64_t *v1117;
  unint64_t v1118;
  std::__shared_weak_count *v1119;
  unint64_t *v1120;
  unint64_t v1121;
  void *v1122;
  unint64_t *v1123;
  uint64_t v1125;
  int v1126;
  uint64_t v1127;
  uint64_t *v1128;
  __int128 **v1129;
  __int128 **m;
  __int128 *v1131;
  __int128 v1132;
  int *v1133;
  int *n;
  uint64_t v1135;
  int v1136;
  uint64_t *v1137;
  _QWORD *v1138;
  _QWORD *v1139;
  uint64_t v1140;
  uint64_t ii;
  uint64_t v1142;
  void *v1143;
  unint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  uint64_t v1148;
  _QWORD *v1149;
  _QWORD *v1150;
  void *v1151;
  _QWORD *v1152;
  _QWORD *v1153;
  void *v1154;
  int *v1155;
  int *v1156;
  char *v1157;
  char *v1158;
  void *v1159;
  _QWORD *v1160;
  uint64_t v1161;
  unsigned int v1162;
  uint64_t *v1163;
  uint64_t *v1164;
  uint64_t v1165;
  uint64_t v1166;
  size_t v1167;
  size_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  unint64_t v1173;
  unsigned int v1174;
  unint64_t v1175;
  unint64_t v1176;
  uint64_t v1177;
  unsigned int v1178;
  int v1180;
  uint64_t v1181;
  int *v1182;
  int *v1183;
  unint64_t v1184;
  int *v1185;
  uint64_t v1186;
  uint64_t *v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  __int128 **v1191;
  __int128 **v1192;
  __int128 *v1193;
  __int128 v1194;
  uint64_t v1195;
  int v1196;
  __n128 v1197;
  uint64_t *v1198;
  _QWORD *v1199;
  _QWORD *v1200;
  uint64_t v1201;
  uint64_t jj;
  uint64_t v1203;
  void *v1204;
  unint64_t v1205;
  uint64_t **v1206;
  uint64_t v1207;
  unint64_t v1208;
  _QWORD *v1209;
  _QWORD *v1210;
  void *v1211;
  _QWORD *v1212;
  _QWORD *v1213;
  void *v1214;
  int *v1215;
  int *v1216;
  uint64_t v1217;
  unsigned int v1218;
  uint64_t *v1219;
  uint64_t *v1220;
  uint64_t v1221;
  uint64_t v1222;
  size_t v1223;
  char *v1224;
  size_t v1225;
  char *v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  unint64_t v1231;
  unsigned int v1232;
  unint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  unsigned int v1236;
  BOOL v1237;
  int v1238;
  void *v1239;
  uint64_t v1240;
  uint64_t v1241;
  int *v1242;
  int *v1243;
  unint64_t v1244;
  int *v1245;
  uint64_t v1246;
  uint64_t *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  __int128 **v1251;
  __int128 **v1252;
  __int128 *v1253;
  __int128 v1254;
  uint64_t v1255;
  int v1256;
  uint64_t *v1257;
  _QWORD *v1258;
  _QWORD *v1259;
  void *v1260;
  _QWORD *v1261;
  _QWORD *v1262;
  void *v1263;
  int *v1264;
  int *v1265;
  uint64_t v1266;
  unsigned int v1267;
  uint64_t *v1268;
  uint64_t *v1269;
  uint64_t v1270;
  uint64_t v1271;
  size_t v1272;
  char *v1273;
  size_t v1274;
  char *v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  unsigned int v1281;
  unint64_t v1282;
  unint64_t v1283;
  uint64_t v1284;
  unsigned int v1285;
  BOOL v1286;
  int v1287;
  void *v1288;
  _QWORD *v1289;
  float64x2_t v1290;
  _QWORD *v1291;
  _QWORD *v1292;
  int v1293;
  _QWORD *v1294;
  _QWORD *v1295;
  _QWORD *v1296;
  _QWORD *v1297;
  _QWORD *v1298;
  _QWORD *v1299;
  unsigned int v1300;
  uint64_t v1301;
  int64x2_t v1302;
  int64x2_t v1303;
  float64x2_t v1306;
  int8x16_t v1308;
  int8x16_t v1309;
  double v1310;
  float64x2_t v1313;
  int64x2_t v1314;
  _QWORD *v1316;
  _QWORD *v1317;
  __int128 *v1318;
  std::__shared_weak_count *v1319;
  int64x2_t v1320;
  uint64_t v1321;
  _QWORD *v1322;
  _QWORD *v1323;
  int8x8_t v1324;
  unint64_t v1325;
  uint8x8_t v1326;
  unint64_t v1327;
  uint64_t **v1328;
  uint64_t *v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  __int128 v1336;
  __int128 v1337;
  __int128 v1338;
  uint64_t v1339;
  unint64_t *v1340;
  unint64_t v1341;
  std::__shared_weak_count *v1342;
  unint64_t *v1343;
  unint64_t v1344;
  _QWORD *v1345;
  _QWORD *v1346;
  unint64_t *v1347;
  unint64_t v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  void *v1351;
  _QWORD *v1352;
  _QWORD *v1353;
  int v1354;
  _QWORD *v1355;
  _QWORD *v1356;
  _QWORD *v1357;
  _QWORD *v1358;
  _QWORD *v1359;
  _QWORD *v1360;
  unsigned int v1361;
  uint64_t v1362;
  float64_t v1363;
  float64_t v1364;
  float64x2_t v1365;
  uint64_t v1366;
  __int128 v1367;
  _QWORD *v1368;
  _QWORD *v1369;
  std::__shared_weak_count *v1370;
  uint64_t v1371;
  _QWORD *v1372;
  _QWORD *v1373;
  int8x8_t v1374;
  unint64_t v1375;
  uint8x8_t v1376;
  unint64_t v1377;
  uint64_t **v1378;
  uint64_t *v1379;
  uint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  __int128 *v1385;
  unint64_t *v1386;
  unint64_t v1387;
  std::__shared_weak_count *v1388;
  unint64_t *v1389;
  unint64_t v1390;
  _QWORD *v1391;
  _QWORD *v1392;
  unint64_t *v1393;
  unint64_t v1394;
  _QWORD *v1395;
  _QWORD *v1396;
  void *v1397;
  _QWORD *v1398;
  unint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  unint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  _QWORD *v1407;
  _QWORD *v1408;
  __int128 v1409;
  _QWORD *v1410;
  _QWORD *v1411;
  int v1412;
  uint64_t *v1413;
  _OWORD *v1414;
  float64_t v1415;
  _QWORD *v1416;
  _QWORD *v1417;
  _QWORD *v1418;
  _QWORD *v1419;
  _QWORD *v1420;
  _QWORD *v1421;
  _QWORD *v1422;
  _QWORD *v1423;
  unint64_t kk;
  uint64_t v1425;
  uint64_t v1426;
  _QWORD *v1427;
  _QWORD *v1428;
  __int128 v1429;
  _QWORD *v1430;
  _QWORD *v1431;
  int v1432;
  uint64_t *v1433;
  _OWORD *v1434;
  float64_t v1435;
  _QWORD *v1436;
  _QWORD *v1437;
  _QWORD *v1438;
  _QWORD *v1439;
  uint64_t result;
  unint64_t v1441;
  unsigned int v1442;
  _QWORD *v1443;
  __int128 v1444;
  _QWORD *v1445;
  _QWORD *v1446;
  int64_t v1447;
  uint64_t v1448;
  unsigned __int16 *v1449;
  _QWORD *v1450;
  void **v1451;
  int v1452;
  int64x2_t *v1453;
  int8x16_t v1454;
  void **v1455;
  double v1456;
  uint64_t v1457;
  int8x16_t v1458;
  double v1459;
  double v1460;
  int8x16_t v1461;
  int64x2_t v1462;
  double v1463;
  double v1464;
  float64x2_t v1465;
  double v1466;
  float64_t v1467;
  double v1468;
  int64x2_t v1469;
  float64_t v1470;
  int64x2_t v1471;
  float64x2_t v1472;
  double v1473;
  float64x2_t v1474;
  float64_t v1475;
  int64x2_t v1476;
  double v1477;
  char v1478;
  int64x2_t v1479;
  int v1480;
  double v1481;
  float64_t v1482;
  int64x2_t v1483;
  int64x2_t v1484;
  BOOL v1485;
  char v1486;
  float64x2_t v1487;
  int v1488;
  int64x2_t v1489;
  __int8 v1490;
  float64_t v1491;
  float64x2_t v1492;
  _DWORD *v1493;
  _QWORD *v1494;
  float64x2_t v1495;
  float64x2_t v1496;
  int64x2_t v1497;
  int64x2_t v1498;
  float64x2_t v1499;
  double v1500;
  _QWORD *v1501;
  _BYTE *v1502;
  float64x2_t v1503;
  uint64_t v1504;
  float64x2_t v1505;
  unsigned int *v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  uint64_t *v1510;
  int64x2_t v1511;
  unsigned int v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  int v1516;
  void *v1517;
  void *v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  _BYTE v1523[48];
  __int128 v1524;
  __int128 v1525;
  _OWORD v1526[2];
  _OWORD v1527[2];
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  unint64_t v1531;
  void *v1532;
  void *v1533;
  int v1534;
  char v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  __int128 v1542;
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  uint64_t v1550;
  uint64_t v1551;
  __int128 v1552;
  char *v1553;
  double *v1554[2];
  _BYTE v1555[44];
  void *v1556[2];
  _BYTE v1557[128];
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __n128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  void *v1567;
  int v1568;
  char v1569;
  unint64_t v1570;
  int v1571;
  __int16 v1572;
  char v1573;
  __int128 v1574;
  __int128 v1575;
  __int128 v1576;
  __int128 v1577;
  __int128 v1578;
  __int128 v1579;
  __int128 v1580;
  uint64_t v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  __int128 v1587;
  __int128 v1588;
  uint64_t v1589;
  __int128 v1590;
  __int128 v1591;
  __int128 v1592;
  __int128 v1593;
  __int128 v1594;
  __int128 v1595;
  __int128 v1596;
  uint64_t v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  uint64_t v1605;
  __int128 v1606;
  __int128 v1607;
  __int128 v1608;
  __int128 v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  uint64_t v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  __int128 v1617;
  __int128 v1618;
  __int128 v1619;
  __int128 v1620;
  uint64_t v1621;
  __int128 v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  uint64_t v1629;
  __int128 v1630;
  __int128 v1631;
  __int128 v1632;
  __int128 v1633;
  __int128 v1634;
  __int128 v1635;
  __int128 v1636;
  uint64_t v1637;
  __int128 v1638;
  __int128 v1639;
  __int128 v1640;
  __int128 v1641;
  __int128 v1642;
  __int128 v1643;
  __int128 v1644;
  uint64_t v1645;
  __int128 v1646;
  __int128 v1647;
  __int128 v1648;
  __int128 v1649;
  __int128 v1650;
  __int128 v1651;
  __int128 v1652;
  uint64_t v1653;
  void *v1654[2];
  void *v1655[2];
  __int128 v1656;
  __int128 v1657;
  __int128 v1658;
  __int128 v1659;
  __int128 v1660;
  uint64_t v1661;
  float64x2_t v1662[3];
  __int128 v1663;
  __int128 v1664;
  __int128 v1665;
  __int128 v1666;
  uint64_t v1667;
  __int128 v1668;
  __int128 v1669;
  __int128 v1670;
  __int128 v1671;
  __int128 v1672;
  __int128 v1673;
  __int128 v1674;
  __int128 v1675;
  __int128 v1676;
  __int128 v1677;
  __int128 v1678;
  __int128 v1679;
  _BYTE object[264];
  void *v1681;
  float64x2_t v1682;
  void *v1683[2];
  void *v1684[2];
  __int128 v1685;
  __int128 v1686;
  __int128 v1687;
  __int128 v1688;
  __int128 v1689;
  __int128 v1690;
  __int128 v1691;
  __int128 v1692;
  __int128 v1693;
  __int128 v1694;
  __int128 v1695;
  __int128 v1696;
  __int128 v1697;
  __int128 v1698;
  __int128 v1699;
  __int128 v1700;
  __int128 v1701;
  __int128 v1702;
  __int128 v1703;
  __int128 v1704;
  uint64_t v1705;
  double v1706;
  __int128 v1707;
  __int128 v1708;
  __int128 v1709;
  __int128 v1710;
  __int128 v1711;
  __int128 v1712;
  __int128 v1713;
  uint64_t v1714;
  float64_t v1715;
  __int128 v1716;
  __int128 v1717;
  __int128 v1718;
  __int128 v1719;
  __int128 v1720;
  __int128 v1721;
  __int128 v1722;
  uint64_t v1723;
  float64_t v1724;
  __int128 v1725;
  __int128 v1726;
  __int128 v1727;
  __int128 v1728;
  __int128 v1729;
  __int128 v1730;
  __int128 v1731;
  uint64_t v1732;
  float64_t v1733;
  __int128 v1734;
  __int128 v1735;
  __int128 v1736;
  __int128 v1737;
  __int128 v1738;
  __int128 v1739;
  __int128 v1740;
  uint64_t v1741;
  float64_t v1742;
  __int128 v1743;
  __int128 v1744;
  __int128 v1745;
  __int128 v1746;
  __int128 v1747;
  __int128 v1748;
  __int128 v1749;
  uint64_t v1750;
  float64_t v1751;
  __int128 v1752;
  __int128 v1753;
  __int128 v1754;
  __int128 v1755;
  __int128 v1756;
  __int128 v1757;
  __int128 v1758;
  uint64_t v1759;
  float64_t v1760;
  __int128 v1761;
  __int128 v1762;
  __int128 v1763;
  __int128 v1764;
  __int128 v1765;
  __int128 v1766;
  __int128 v1767;
  uint64_t v1768;
  float64_t v1769;
  __int128 v1770;
  __int128 v1771;
  __int128 v1772;
  __int128 v1773;
  __int128 v1774;
  __int128 v1775;
  __int128 v1776;
  uint64_t v1777;
  float64_t v1778;
  __int128 v1779;
  __int128 v1780;
  __int128 v1781;
  __int128 v1782;
  __int128 v1783;
  __int128 v1784;
  __int128 v1785;
  uint64_t v1786;
  float64_t v1787;
  uint64_t v1788;

  MEMORY[0x24BDAC7A8](a1);
  v1513 = v10;
  v1514 = v11;
  v1452 = v12;
  v14 = v13;
  v1501 = v15;
  v1457 = v16;
  v1788 = *MEMORY[0x24BDAC8D0];
  v1494 = v17;
  v1510 = v18;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17[1] - *v17) >> 3) != (v18[1] - *v18) >> 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4730, (uint64_t)"imu_measurements_validity_info.size() == state_ids.size()", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v19 = *(_QWORD *)(v1513 + 8216);
  v20 = *(unsigned __int8 *)(v19 + 1720);
  v21 = v19 + 864;
  v22 = v19 + 24;
  if (v20)
    v22 = v21;
  if (*(_BYTE *)(v22 + 418))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(v22 + 417))
  {
    v23 = *(_BYTE *)(v1513 + 7682) != 0;
  }
  else
  {
    v23 = 0;
  }
  sub_20FC42718(v1514, v23, 0);
  v24 = *(_QWORD *)(v1513 + 8216);
  v25 = *(unsigned __int8 *)(v24 + 1720);
  v26 = v24 + 864;
  v27 = v24 + 24;
  if (v25)
    v27 = v26;
  v1449 = v14;
  if (*(_BYTE *)(v27 + 419))
    v28 = *(_BYTE *)(v1513 + 7684) != 0;
  else
    v28 = 0;
  v29 = (_QWORD *)v1514;
  v1502 = (_BYTE *)(v1514 + 6760);
  v1485 = 1;
  sub_20FC42718(v1514, v28, 1u);
  v38 = *(_QWORD *)(v1513 + 8216);
  v39 = *(unsigned __int8 *)(v38 + 1720);
  v40 = v38 + 864;
  v41 = v38 + 24;
  if (v39)
    v41 = v40;
  if (!*(_BYTE *)(v41 + 433))
  {
    if (*(_BYTE *)(v41 + 432))
      v1485 = *(_BYTE *)(v1513 + 7686) != 0;
    else
      v1485 = 0;
    v29 = (_QWORD *)v1514;
  }
  v42 = ((v29[732] - v29[731]) >> 4);
  v43 = (_QWORD *)v29[1];
  if (v42 != v43[39])
  {
    v9 = v43[47];
    if (!v9)
    {
      v42 = v43[39];
      goto LABEL_104;
    }
    v1455 = (void **)(v1514 + 7464);
    while (1)
    {
      v44 = *(_DWORD *)(v9 + 16);
      v45 = *(char **)(v1514 + 5848);
      v46 = *(char **)(v1514 + 5856);
      if (v46 != v45)
      {
        v47 = (v46 - v45) >> 4;
        do
        {
          v48 = v47 >> 1;
          v49 = &v45[16 * (v47 >> 1)];
          v51 = *(_DWORD *)v49;
          v50 = v49 + 16;
          v47 += ~(v47 >> 1);
          if (v51 < v44)
            v45 = v50;
          else
            v47 = v48;
        }
        while (v47);
      }
      if (v45 != v46 && *(_DWORD *)v45 == v44)
        goto LABEL_25;
      LODWORD(v1556[0]) = *(_DWORD *)(v9 + 16);
      BYTE4(v1556[0]) = 1;
      v1556[1] = (void *)(v9 + 24);
      v1568 = 1065353216;
      v1569 = 0;
      v1564 = 0u;
      v1565 = 0u;
      v1566 = 0u;
      v1567 = 0;
      v52 = *(_OWORD *)(v9 + 40);
      *(_OWORD *)v1557 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)&v1557[16] = v52;
      v53 = *(_OWORD *)(v9 + 72);
      v54 = *(_OWORD *)(v9 + 104);
      v55 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)&v1557[64] = *(_OWORD *)(v9 + 88);
      *(_OWORD *)&v1557[80] = v54;
      *(_OWORD *)&v1557[32] = v55;
      *(_OWORD *)&v1557[48] = v53;
      v56 = *(_OWORD *)(v9 + 136);
      v57 = *(_OWORD *)(v9 + 168);
      v58 = *(_OWORD *)(v9 + 120);
      v1558 = *(_OWORD *)(v9 + 152);
      v1559 = v57;
      *(_OWORD *)&v1557[96] = v58;
      *(_OWORD *)&v1557[112] = v56;
      v59 = *(_OWORD *)(v9 + 200);
      v60 = *(_OWORD *)(v9 + 232);
      v61 = *(_OWORD *)(v9 + 184);
      v1562 = *(__n128 *)(v9 + 216);
      v1563 = v60;
      v1560 = v61;
      v1561 = v59;
      sub_20F6178A8((uint64_t)v1556);
      BYTE4(v1556[0]) = v1485;
      v62 = (uint64_t **)*((_QWORD *)&v1566 + 1);
      v63 = *((_OWORD *)v1556[1] + 1);
      *(_OWORD *)v1557 = *(_OWORD *)v1556[1];
      *(_OWORD *)&v1557[16] = v63;
      v64 = *((_OWORD *)v1556[1] + 5);
      v66 = *((_OWORD *)v1556[1] + 2);
      v65 = *((_OWORD *)v1556[1] + 3);
      *(_OWORD *)&v1557[64] = *((_OWORD *)v1556[1] + 4);
      *(_OWORD *)&v1557[80] = v64;
      *(_OWORD *)&v1557[32] = v66;
      *(_OWORD *)&v1557[48] = v65;
      v67 = *((_OWORD *)v1556[1] + 9);
      v69 = *((_OWORD *)v1556[1] + 6);
      v68 = *((_OWORD *)v1556[1] + 7);
      v1558 = *((_OWORD *)v1556[1] + 8);
      v1559 = v67;
      *(_OWORD *)&v1557[96] = v69;
      *(_OWORD *)&v1557[112] = v68;
      v70 = *((__n128 *)v1556[1] + 12);
      v71 = *((_OWORD *)v1556[1] + 13);
      v73 = *((_OWORD *)v1556[1] + 10);
      v72 = *((_OWORD *)v1556[1] + 11);
      v1562 = v70;
      v1563 = v71;
      v1560 = v73;
      v1561 = v72;
      if (*((_QWORD *)&v1566 + 1))
      {
        do
        {
          v70.n128_f64[0] = sub_20F6182A0((char *)v62[5], (float64x2_t *)v1557, v70);
          v62 = (uint64_t **)*v62;
        }
        while (v62);
      }
      sub_20F6178A8((uint64_t)v1556);
      v74 = (int)v1556[0];
      v75 = *(__int128 **)(v1514 + 5848);
      v76 = *(__int128 **)(v1514 + 5856);
      if (v76 == v75)
      {
        v75 = *(__int128 **)(v1514 + 5856);
      }
      else
      {
        v77 = v76 - v75;
        do
        {
          v78 = v77 >> 1;
          v79 = &v75[v77 >> 1];
          v81 = *(_DWORD *)v79;
          v80 = v79 + 1;
          v77 += ~(v77 >> 1);
          if (v81 < LODWORD(v1556[0]))
            v75 = v80;
          else
            v77 = v78;
        }
        while (v77);
        if (v76 != v75 && LODWORD(v1556[0]) == *(_DWORD *)v75)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 184, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add calibration variable.", 35, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v82 = (_QWORD *)*((_QWORD *)&v1566 + 1);
          if (!*((_QWORD *)&v1566 + 1))
            goto LABEL_49;
          do
          {
LABEL_48:
            v83 = (_QWORD *)*v82;
            operator delete(v82);
            v82 = v83;
          }
          while (v83);
          goto LABEL_49;
        }
      }
      v85 = BYTE4(v1556[0]);
      LODWORD(v1515) = -1;
      BYTE4(v1515) = 1;
      v1516 = 0;
      v86 = v1556[0];
      v87 = v1556[1];
      v88 = *(void **)&v1564;
      v1517 = v1556[0];
      v1518 = v1556[1];
      v1526[1] = v1560;
      v1527[0] = v1561;
      v1527[1] = v1562;
      v1528 = v1563;
      *(_OWORD *)&v1523[32] = *(_OWORD *)&v1557[96];
      v1524 = *(_OWORD *)&v1557[112];
      v1525 = v1558;
      v1526[0] = v1559;
      v1521 = *(_OWORD *)&v1557[32];
      v1522 = *(_OWORD *)&v1557[48];
      *(_OWORD *)v1523 = *(_OWORD *)&v1557[64];
      *(_OWORD *)&v1523[16] = *(_OWORD *)&v1557[80];
      v1519 = *(_OWORD *)v1557;
      v1520 = *(_OWORD *)&v1557[16];
      v89 = *((double *)&v1564 + 1);
      v90 = *(double *)&v1565;
      v1529 = v1564;
      v1564 = 0uLL;
      v91 = (_QWORD *)*((_QWORD *)&v1565 + 1);
      v92 = v1566;
      *(_QWORD *)&v1566 = 0;
      v1565 = 0uLL;
      *(float64_t *)&v1530 = v90;
      *((_QWORD *)&v1530 + 1) = v91;
      v93 = (_QWORD *)*((_QWORD *)&v1566 + 1);
      v94 = v1567;
      v1531 = v92;
      v1532 = (void *)*((_QWORD *)&v1566 + 1);
      v1533 = v1567;
      v95 = v1568;
      v1534 = v1568;
      if (v1567)
      {
        v96 = *(_QWORD *)(*((_QWORD *)&v1566 + 1) + 8);
        if ((v92 & (v92 - 1)) != 0)
        {
          if (v96 >= v92)
            v96 %= v92;
        }
        else
        {
          v96 &= v92 - 1;
        }
        v91[v96] = &v1532;
        *((_QWORD *)&v1566 + 1) = 0;
        v1567 = 0;
        v86 = v1517;
        v87 = v1518;
        v89 = *((double *)&v1529 + 1);
        v88 = *(void **)&v1529;
        v91 = (_QWORD *)*((_QWORD *)&v1530 + 1);
        v90 = *(double *)&v1530;
        v92 = v1531;
        v93 = v1532;
        v94 = v1533;
        v95 = v1534;
      }
      v97 = v1569;
      v1535 = v1569;
      v1536 = 0u;
      v1537 = 0u;
      v1538 = 0u;
      v1539 = 0u;
      v1540 = 0u;
      v1541 = 0u;
      v1542 = 0u;
      v1543 = 0u;
      v1544 = 0u;
      v1545 = 0u;
      v1546 = 0u;
      v1547 = 0u;
      v1548 = 0u;
      v1549 = 0u;
      *(_DWORD *)object = v74;
      *(_DWORD *)&object[16] = v1516;
      *(_QWORD *)&object[8] = v1515;
      *(_QWORD *)&object[24] = v86;
      *(_QWORD *)&object[32] = v87;
      *(_OWORD *)&object[40] = v1519;
      *(_OWORD *)&object[56] = v1520;
      *(_OWORD *)&object[104] = *(_OWORD *)v1523;
      *(_OWORD *)&object[120] = *(_OWORD *)&v1523[16];
      *(_OWORD *)&object[72] = v1521;
      *(_OWORD *)&object[88] = v1522;
      *(_OWORD *)&object[168] = v1525;
      *(_OWORD *)&object[184] = v1526[0];
      *(_OWORD *)&object[136] = *(_OWORD *)&v1523[32];
      *(_OWORD *)&object[152] = v1524;
      *(_OWORD *)&object[232] = v1527[1];
      *(_OWORD *)&object[248] = v1528;
      *(_OWORD *)&object[200] = v1526[1];
      *(_OWORD *)&object[216] = v1527[0];
      v1681 = v88;
      v1682.f64[0] = v89;
      v1529 = 0u;
      v1530 = 0u;
      v1682.f64[1] = v90;
      v1683[0] = v91;
      v1531 = 0;
      v1683[1] = (void *)v92;
      v1684[0] = v93;
      v1684[1] = v94;
      LODWORD(v1685) = v95;
      if (v94)
      {
        v98 = v93[1];
        if ((v92 & (v92 - 1)) != 0)
        {
          if (v98 >= v92)
            v98 %= v92;
        }
        else
        {
          v98 &= v92 - 1;
        }
        v91[v98] = v1684;
        v1532 = 0;
        v1533 = 0;
      }
      BYTE8(v1685) = v97;
      v1696 = v1546;
      v1697 = v1547;
      v1698 = v1548;
      v1699 = v1549;
      v1692 = v1542;
      v1693 = v1543;
      v1694 = v1544;
      v1695 = v1545;
      v1688 = v1538;
      v1689 = v1539;
      v1690 = v1540;
      v1691 = v1541;
      v1686 = v1536;
      v1687 = v1537;
      sub_20F619554((char **)(v1514 + 5848), v75, (int *)object);
      v99 = v1684[0];
      if (v1684[0])
      {
        do
        {
          v100 = (_QWORD *)*v99;
          operator delete(v99);
          v99 = v100;
        }
        while (v100);
      }
      v101 = v1683[0];
      v1683[0] = 0;
      if (v101)
        operator delete(v101);
      if (*(double *)&v1681 != 0.0)
      {
        *(_QWORD *)&v1682.f64[0] = v1681;
        operator delete(v1681);
      }
      v102 = v1532;
      if (v1532)
      {
        do
        {
          v103 = (_QWORD *)*v102;
          operator delete(v102);
          v102 = v103;
        }
        while (v103);
      }
      v104 = (void *)*((_QWORD *)&v1530 + 1);
      *((_QWORD *)&v1530 + 1) = 0;
      if (v104)
        operator delete(v104);
      if ((_QWORD)v1529)
      {
        *((_QWORD *)&v1529 + 1) = v1529;
        operator delete((void *)v1529);
      }
      if (v85)
        break;
LABEL_100:
      *(_BYTE *)(v1514 + 6762) = 0;
      *v1502 = 0;
      *(_DWORD *)(v1514 + 7824) = 0;
      *(_BYTE *)(v1514 + 7828) = 0;
      v82 = (_QWORD *)*((_QWORD *)&v1566 + 1);
      if (*((_QWORD *)&v1566 + 1))
        goto LABEL_48;
LABEL_49:
      v84 = (void *)*((_QWORD *)&v1565 + 1);
      *((_QWORD *)&v1565 + 1) = 0;
      if (v84)
        operator delete(v84);
      if ((_QWORD)v1564)
      {
        *((_QWORD *)&v1564 + 1) = v1564;
        operator delete((void *)v1564);
      }
LABEL_25:
      v9 = *(_QWORD *)v9;
      if (!v9)
      {
        v43 = *(_QWORD **)(v1514 + 8);
        v42 = v43[39];
        goto LABEL_104;
      }
    }
    v105 = *(char **)(v1514 + 7472);
    v106 = *(_QWORD *)(v1514 + 7480);
    if ((unint64_t)v105 < v106)
    {
      *(_DWORD *)v105 = v74;
      v107 = (uint64_t)(v105 + 4);
LABEL_99:
      *(_QWORD *)(v1514 + 7472) = v107;
      goto LABEL_100;
    }
    v108 = (char *)*v1455;
    v109 = v105 - (_BYTE *)*v1455;
    v110 = v109 >> 2;
    v111 = (v109 >> 2) + 1;
    if (v111 >> 62)
      sub_20E867F44();
    v112 = v106 - (_QWORD)v108;
    if (v112 >> 1 > v111)
      v111 = v112 >> 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
      v113 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v113 = v111;
    if (v113)
    {
      if (v113 >> 62)
        sub_20E877A38();
      v114 = v113;
      v115 = operator new(4 * v113);
      v113 = v114;
      v116 = &v115[4 * v110];
      *v116 = v74;
      v107 = (uint64_t)(v116 + 1);
      v117 = v105 - v108;
      if (v105 == v108)
        goto LABEL_97;
    }
    else
    {
      v115 = 0;
      v116 = (_DWORD *)(4 * v110);
      *(_DWORD *)(4 * v110) = v74;
      v107 = 4 * v110 + 4;
      v117 = v105 - v108;
      if (v105 == v108)
      {
LABEL_97:
        *(_QWORD *)(v1514 + 7464) = v116;
        *(_QWORD *)(v1514 + 7472) = v107;
        *(_QWORD *)(v1514 + 7480) = &v115[4 * v113];
        if (v108)
          operator delete(v108);
        goto LABEL_99;
      }
    }
    v118 = v117 - 4;
    if (v118 < 0x2C)
      goto LABEL_1920;
    if ((unint64_t)(v105 - v115 - v109) < 0x20)
      goto LABEL_1920;
    v119 = (v118 >> 2) + 1;
    v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
    v121 = &v105[-v120];
    v116 = (_DWORD *)((char *)v116 - v120);
    v122 = (float64x2_t *)&v115[4 * v110 - 16];
    v123 = (float64x2_t *)(v105 - 16);
    v124 = v119 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = v123[-1];
      v30 = *v123;
      v122[-1] = v31;
      *v122 = v30;
      v122 -= 2;
      v123 -= 2;
      v124 -= 8;
    }
    while (v124);
    v105 = v121;
    if (v119 != (v119 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1920:
      do
      {
        v125 = *((_DWORD *)v105 - 1);
        v105 -= 4;
        *--v116 = v125;
      }
      while (v105 != v108);
    }
    goto LABEL_97;
  }
LABEL_104:
  if (v42 != ((*(_QWORD *)(v1514 + 5952) - *(_QWORD *)(v1514 + 5944)) >> 4))
  {
    v126 = *(_QWORD *)(v1513 + 8216);
    v127 = *(unsigned __int8 *)(v126 + 1720);
    v128 = v126 + 24;
    v129 = v126 + 864;
    if (!v127)
      v129 = v128;
    v130 = (uint64_t *)v43[52];
    if (v130)
    {
      v1486 = *(_BYTE *)(v129 + 434);
      v1451 = (void **)(v1514 + 7488);
      while (1)
      {
        v131 = *((_DWORD *)v130 + 4);
        v132 = *(char **)(v1514 + 5944);
        v133 = *(char **)(v1514 + 5952);
        if (v133 != v132)
        {
          v134 = (v133 - v132) >> 4;
          do
          {
            v135 = v134 >> 1;
            v136 = &v132[16 * (v134 >> 1)];
            v138 = *(_DWORD *)v136;
            v137 = v136 + 16;
            v134 += ~(v134 >> 1);
            if (v138 < v131)
              v132 = v137;
            else
              v134 = v135;
          }
          while (v134);
        }
        if (v132 != v133 && *(_DWORD *)v132 == v131)
          goto LABEL_109;
        LODWORD(v1556[0]) = *((_DWORD *)v130 + 4);
        BYTE4(v1556[0]) = 1;
        *(_QWORD *)&v1557[24] = 0;
        memset(&v1557[40], 0, 24);
        *(_OWORD *)&v1557[8] = 0u;
        v1556[1] = v130 + 3;
        *(_QWORD *)v1557 = 0x3FF0000000000000;
        *(_QWORD *)&v1557[32] = 0x3FF0000000000000;
        *(_QWORD *)&v1557[64] = 0x3FF0000000000000;
        memset(&v1557[72], 0, 56);
        LODWORD(v1558) = 1065353216;
        BYTE8(v1558) = 0;
        *(_OWORD *)v1557 = *(_OWORD *)(v130 + 3);
        v139 = *(_OWORD *)(v130 + 5);
        v140 = *(_OWORD *)(v130 + 7);
        v141 = *(_OWORD *)(v130 + 9);
        *(_QWORD *)&v1557[64] = v130[11];
        *(_OWORD *)&v1557[32] = v140;
        *(_OWORD *)&v1557[48] = v141;
        *(_OWORD *)&v1557[16] = v139;
        sub_20F811C04((uint64_t)v1556);
        BYTE4(v1556[0]) = v1486;
        *(_OWORD *)v1557 = *(_OWORD *)v1556[1];
        v143 = *((_OWORD *)v1556[1] + 2);
        v142 = *((_OWORD *)v1556[1] + 3);
        v144 = *((_OWORD *)v1556[1] + 1);
        *(_QWORD *)&v1557[64] = *((_QWORD *)v1556[1] + 8);
        *(_OWORD *)&v1557[32] = v143;
        *(_OWORD *)&v1557[48] = v142;
        *(_OWORD *)&v1557[16] = v144;
        sub_20F811C04((uint64_t)v1556);
        v145 = (int)v1556[0];
        v146 = *(__int128 **)(v1514 + 5944);
        v147 = *(__int128 **)(v1514 + 5952);
        if (v147 == v146)
        {
          v146 = *(__int128 **)(v1514 + 5952);
        }
        else
        {
          v148 = v147 - v146;
          do
          {
            v149 = v148 >> 1;
            v150 = &v146[v148 >> 1];
            v152 = *(_DWORD *)v150;
            v151 = v150 + 1;
            v148 += ~(v148 >> 1);
            if (v152 < LODWORD(v1556[0]))
              v146 = v151;
            else
              v148 = v149;
          }
          while (v148);
          if (v147 != v146 && LODWORD(v1556[0]) == *(_DWORD *)v146)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 184, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add calibration variable.", 35, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v153 = *(_QWORD **)&v1557[112];
            if (!*(_QWORD *)&v1557[112])
              goto LABEL_131;
            do
            {
LABEL_130:
              v154 = (_QWORD *)*v153;
              operator delete(v153);
              v153 = v154;
            }
            while (v154);
            goto LABEL_131;
          }
        }
        v156 = BYTE4(v1556[0]);
        LODWORD(v1515) = -1;
        BYTE4(v1515) = 1;
        v1516 = 0;
        v157 = v1556[0];
        v158 = v1556[1];
        v159 = *(_QWORD *)&v1557[72];
        v1517 = v1556[0];
        v1518 = v1556[1];
        v1521 = *(_OWORD *)&v1557[32];
        v1522 = *(_OWORD *)&v1557[48];
        *(_QWORD *)v1523 = *(_QWORD *)&v1557[64];
        v1519 = *(_OWORD *)v1557;
        v1520 = *(_OWORD *)&v1557[16];
        v160 = *(_QWORD *)&v1557[88];
        v161 = *(_QWORD *)&v1557[80];
        *(_QWORD *)&v1523[8] = *(_QWORD *)&v1557[72];
        *(_QWORD *)&v1523[16] = *(_QWORD *)&v1557[80];
        memset(&v1557[72], 0, 40);
        v162 = *(_QWORD *)&v1557[96];
        v163 = *(_QWORD *)&v1557[104];
        *(_QWORD *)&v1523[24] = v160;
        *(_QWORD *)&v1523[32] = *(_QWORD *)&v1557[96];
        v164 = *(_QWORD *)&v1557[112];
        v165 = *(_QWORD *)&v1557[120];
        *(_QWORD *)&v1523[40] = *(_QWORD *)&v1557[104];
        v1524 = *(_OWORD *)&v1557[112];
        v166 = v1558;
        LODWORD(v1525) = v1558;
        if (*(_QWORD *)&v1557[120])
        {
          v167 = *(_QWORD *)(*(_QWORD *)&v1557[112] + 8);
          if ((*(_QWORD *)&v1557[104] & (*(_QWORD *)&v1557[104] - 1)) != 0)
          {
            if (v167 >= *(_QWORD *)&v1557[104])
              v167 %= *(_QWORD *)&v1557[104];
          }
          else
          {
            v167 &= *(_QWORD *)&v1557[104] - 1;
          }
          *(_QWORD *)(*(_QWORD *)&v1557[96] + 8 * v167) = &v1524;
          *(_QWORD *)&v1557[112] = 0;
          *(_QWORD *)&v1557[120] = 0;
          v157 = v1517;
          v158 = v1518;
          v159 = *(_QWORD *)&v1523[8];
          v161 = *(_QWORD *)&v1523[16];
          v160 = *(_QWORD *)&v1523[24];
          v162 = *(_QWORD *)&v1523[32];
          v163 = *(_QWORD *)&v1523[40];
          v165 = *((_QWORD *)&v1524 + 1);
          v164 = v1524;
          v166 = v1525;
        }
        v168 = BYTE8(v1558);
        BYTE8(v1525) = BYTE8(v1558);
        *((_QWORD *)&v1526[1] + 1) = 0;
        *(_OWORD *)((char *)v1527 + 8) = 0u;
        *((_QWORD *)&v1527[1] + 1) = 0;
        *(_OWORD *)((char *)v1526 + 8) = 0u;
        *(_QWORD *)&v1526[0] = 0x3FF0000000000000;
        *(_QWORD *)&v1527[0] = 0x3FF0000000000000;
        *(_QWORD *)&v1528 = 0x3FF0000000000000;
        *(_DWORD *)object = v145;
        *(_QWORD *)&object[8] = v1515;
        *(_DWORD *)&object[16] = v1516;
        *(_QWORD *)&object[24] = v157;
        *(_QWORD *)&object[32] = v158;
        *(_QWORD *)&object[104] = *(_QWORD *)v1523;
        *(_OWORD *)&object[72] = v1521;
        *(_OWORD *)&object[88] = v1522;
        *(_OWORD *)&object[40] = v1519;
        *(_OWORD *)&object[56] = v1520;
        *(_QWORD *)&object[112] = v159;
        *(_QWORD *)&object[120] = v161;
        memset(&v1523[8], 0, 40);
        *(_QWORD *)&object[128] = v160;
        *(_QWORD *)&object[136] = v162;
        *(_QWORD *)&object[144] = v163;
        *(_QWORD *)&object[152] = v164;
        *(_QWORD *)&object[160] = v165;
        *(_DWORD *)&object[168] = v166;
        if (v165)
        {
          v169 = *(_QWORD *)(v164 + 8);
          if ((v163 & (v163 - 1)) != 0)
          {
            if (v169 >= v163)
              v169 %= v163;
          }
          else
          {
            v169 &= v163 - 1;
          }
          *(_QWORD *)(v162 + 8 * v169) = &object[152];
          v1524 = 0uLL;
        }
        object[176] = v168;
        *(_OWORD *)&object[216] = v1527[0];
        *(_OWORD *)&object[232] = v1527[1];
        *(_QWORD *)&object[248] = v1528;
        *(_OWORD *)&object[184] = v1526[0];
        *(_OWORD *)&object[200] = v1526[1];
        sub_20F61A4C4((char **)(v1514 + 5944), v146, (int *)object);
        v170 = *(_QWORD **)&object[152];
        if (*(_QWORD *)&object[152])
        {
          do
          {
            v171 = (_QWORD *)*v170;
            operator delete(v170);
            v170 = v171;
          }
          while (v171);
        }
        v172 = *(void **)&object[136];
        *(_QWORD *)&object[136] = 0;
        if (v172)
          operator delete(v172);
        if (*(_QWORD *)&object[112])
        {
          *(_QWORD *)&object[120] = *(_QWORD *)&object[112];
          operator delete(*(void **)&object[112]);
        }
        v173 = (_QWORD *)v1524;
        if ((_QWORD)v1524)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            operator delete(v173);
            v173 = v174;
          }
          while (v174);
        }
        v175 = *(void **)&v1523[32];
        *(_QWORD *)&v1523[32] = 0;
        if (v175)
          operator delete(v175);
        if (*(_QWORD *)&v1523[8])
        {
          *(_QWORD *)&v1523[16] = *(_QWORD *)&v1523[8];
          operator delete(*(void **)&v1523[8]);
        }
        if (v156)
          break;
LABEL_182:
        *(_BYTE *)(v1514 + 6762) = 0;
        *v1502 = 0;
        *(_DWORD *)(v1514 + 7824) = 0;
        *(_BYTE *)(v1514 + 7828) = 0;
        v153 = *(_QWORD **)&v1557[112];
        if (*(_QWORD *)&v1557[112])
          goto LABEL_130;
LABEL_131:
        v155 = *(void **)&v1557[96];
        *(_QWORD *)&v1557[96] = 0;
        if (v155)
          operator delete(v155);
        if (*(_QWORD *)&v1557[72])
        {
          *(_QWORD *)&v1557[80] = *(_QWORD *)&v1557[72];
          operator delete(*(void **)&v1557[72]);
        }
LABEL_109:
        v130 = (uint64_t *)*v130;
        if (!v130)
          goto LABEL_184;
      }
      v9 = *(_QWORD *)(v1514 + 7496);
      v176 = *(_QWORD *)(v1514 + 7504);
      if (v9 < v176)
      {
        *(_DWORD *)v9 = v145;
        v9 += 4;
        v177 = v9;
LABEL_181:
        *(_QWORD *)(v1514 + 7496) = v177;
        goto LABEL_182;
      }
      v178 = *v1451;
      v179 = v9 - (_QWORD)*v1451;
      v180 = v179 >> 2;
      v181 = (v179 >> 2) + 1;
      if (v181 >> 62)
        sub_20E867F44();
      v182 = v176 - (_QWORD)v178;
      if (v182 >> 1 > v181)
        v181 = v182 >> 1;
      if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL)
        v183 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v183 = v181;
      if (v183)
      {
        if (v183 >> 62)
          sub_20E877A38();
        v184 = v183;
        v185 = (char *)operator new(4 * v183);
        v183 = v184;
        v186 = &v185[4 * v180];
        *(_DWORD *)v186 = v145;
        v177 = (uint64_t)(v186 + 4);
        v187 = v9 - (_QWORD)v178;
        if ((void *)v9 == v178)
          goto LABEL_179;
      }
      else
      {
        v185 = 0;
        v186 = (char *)(4 * v180);
        *(_DWORD *)(4 * v180) = v145;
        v177 = 4 * v180 + 4;
        v187 = v9 - (_QWORD)v178;
        if ((void *)v9 == v178)
        {
LABEL_179:
          *(_QWORD *)(v1514 + 7488) = v186;
          *(_QWORD *)(v1514 + 7496) = v177;
          *(_QWORD *)(v1514 + 7504) = &v185[4 * v183];
          if (v178)
            operator delete(v178);
          goto LABEL_181;
        }
      }
      v188 = v187 - 4;
      if (v188 < 0x2C)
        goto LABEL_1921;
      if (v9 - (unint64_t)v185 - v179 < 0x20)
        goto LABEL_1921;
      v189 = (v188 >> 2) + 1;
      v190 = 4 * (v189 & 0x7FFFFFFFFFFFFFF8);
      v191 = v9 - v190;
      v186 -= v190;
      v192 = (float64x2_t *)&v185[4 * v180 - 16];
      v193 = (float64x2_t *)(v9 - 16);
      v194 = v189 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v31 = v193[-1];
        v30 = *v193;
        v192[-1] = v31;
        *v192 = v30;
        v192 -= 2;
        v193 -= 2;
        v194 -= 8;
      }
      while (v194);
      v9 = v191;
      if (v189 != (v189 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_1921:
        do
        {
          v195 = *(_DWORD *)(v9 - 4);
          v9 -= 4;
          *((_DWORD *)v186 - 1) = v195;
          v186 -= 4;
        }
        while ((void *)v9 != v178);
      }
      goto LABEL_179;
    }
  }
LABEL_184:
  v196 = *(__int128 **)(v1514 + 5472);
  if (v196 == *(__int128 **)(v1514 + 5464))
  {
    v9 = v1514;
    v200 = *(_QWORD *)(v1514 + 8);
    v201 = v200 + 1656;
    v202 = *(unsigned int *)(v200 + 1648);
    v30.f64[0] = *(float64_t *)(v200 + 1672);
    v1487 = v30;
    v30.f64[0] = *(float64_t *)(v200 + 1696);
    v1479 = *(int64x2_t *)(v200 + 1656);
    v1484 = (int64x2_t)v30;
    _D8 = *(double *)(v200 + 1720);
    v1511 = *(int64x2_t *)(v200 + 1704);
    v1477 = *(double *)(v200 + 1744);
    v1469 = *(int64x2_t *)(v200 + 1680);
    v1472 = *(float64x2_t *)(v200 + 1728);
    v204 = *(unsigned __int8 *)(v1514 + 1729);
    v205 = *(_BYTE *)(v1514 + 1729) == 0;
    v206 = *(unsigned __int8 *)(v1514 + 1789);
    v207 = sub_20FC17CF4(v1514 + 5488);
    _D19 = v1484.i64[0];
    v209 = (float64x2_t)vzip1q_s64(v1479, v1469);
    _Q2 = (float64x2_t)vzip2q_s64(v1479, v1469);
    _Q17 = (float64x2_t)v1511;
    v212 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q2, 1);
    v213 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q2.f64[0], 0);
    _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v209, v1472.f64[0]), _Q2, v1472, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1487, v1484), v1477);
    _D4 = v1472.f64[1];
    __asm { FMLA            D2, D4, V17.D[1] }
    _Q2.f64[0] = _Q2.f64[0] + _D8 * v1477;
    v218 = vnegq_f64(_Q0);
    v219 = (int64x2_t)vextq_s8(v213, v212, 8uLL);
    v220 = (float64x2_t)vzip1q_s64(v1479, v219);
    v221 = (float64x2_t)vzip2q_s64((int64x2_t)v209, v219);
    *(_QWORD *)&_Q17.f64[1] = vdupq_laneq_s64(v1511, 1).u64[0];
    v222 = vmlsq_laneq_f64(vmulq_n_f64(v220, v218.f64[0]), v221, _Q0, 1);
    *(_DWORD *)v207 = -1;
    *(_BYTE *)(v207 + 4) = 1;
    *(_DWORD *)(v207 + 8) = 0;
    *(_QWORD *)(v207 + 16) = v202 | (v204 << 32);
    *(_QWORD *)(v207 + 24) = v201;
    *(float64_t *)(v207 + 48) = v1487.f64[0];
    *(_QWORD *)&v220.f64[1] = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
    *(float64x2_t *)(v207 + 32) = v220;
    _Q4 = vmulq_f64(v1487, v218);
    __asm
    {
      FMLS            D4, D19, V0.D[1]
      FMLS            D4, D8, V2.D[0]
    }
    *(_QWORD *)(v207 + 72) = v1484.i64[0];
    *(_QWORD *)&v221.f64[1] = vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
    *(float64x2_t *)(v207 + 56) = v221;
    *(double *)(v207 + 96) = _D8;
    v224 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(v222, _Q17, _Q2.f64[0], 0));
    *(_QWORD *)&_Q17.f64[1] = vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
    *(float64x2_t *)(v207 + 80) = _Q17;
    *(_QWORD *)(v207 + 120) = *(_OWORD *)&vnegq_f64(_Q4);
    v224.i64[1] = vextq_s8(v224, v224, 8uLL).u64[0];
    *(int8x16_t *)(v207 + 104) = v224;
    *(_WORD *)(v207 + 128) = v206 | 0x100;
    *(_QWORD *)(v207 + 136) = 0x3FF0000000000000;
    *(_QWORD *)(v207 + 144) = 0;
    *(_QWORD *)(v207 + 152) = 0;
    *(_QWORD *)(v207 + 160) = 0;
    *(_QWORD *)(v207 + 168) = 0x3FF0000000000000;
    *(_QWORD *)(v207 + 176) = 0;
    *(_QWORD *)(v207 + 184) = 0;
    *(_QWORD *)(v207 + 192) = 0;
    *(_QWORD *)(v207 + 200) = 0x3FF0000000000000;
    *(_QWORD *)(v207 + 208) = 0;
    *(_QWORD *)(v207 + 216) = 0;
    *(_QWORD *)(v207 + 224) = 0;
    *(_DWORD *)object = v202;
    *(_QWORD *)&object[8] = v207;
    sub_20FC17A74((char **)(v1514 + 5464), v196, (uint64_t)object);
    if (v205)
      goto LABEL_210;
    v225 = *(char **)(v1514 + 7376);
    v226 = *(_QWORD *)(v1514 + 7384);
    if ((unint64_t)v225 < v226)
    {
      *(_DWORD *)v225 = v202;
      v227 = (uint64_t)(v225 + 4);
LABEL_209:
      v9 = v1514;
      *(_QWORD *)(v1514 + 7376) = v227;
LABEL_210:
      *(_BYTE *)(v1514 + 6762) = 0;
      *v1502 = 0;
      *(_BYTE *)(v9 + 7828) = 0;
      *(_DWORD *)(v9 + 7824) = 0;
      v197 = v1513;
      v198 = v1494;
      if (*(_BYTE *)(*(_QWORD *)(v1513 + 8216) + 1720))
        goto LABEL_186;
      goto LABEL_211;
    }
    v228 = *(char **)(v1514 + 7368);
    v229 = (v225 - v228) >> 2;
    v230 = v229 + 1;
    if ((unint64_t)(v229 + 1) >> 62)
      sub_20E867F44();
    v231 = v226 - (_QWORD)v228;
    if (v231 >> 1 > v230)
      v230 = v231 >> 1;
    if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL)
      v232 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v232 = v230;
    if (v232)
    {
      if (v232 >> 62)
        sub_20E877A38();
      v233 = operator new(4 * v232);
      v234 = &v233[4 * v229];
      v235 = &v233[4 * v232];
      *v234 = v202;
      v227 = (uint64_t)(v234 + 1);
      v236 = v225 - v228;
      if (v225 == v228)
        goto LABEL_207;
    }
    else
    {
      v233 = 0;
      v234 = (_DWORD *)(4 * v229);
      v235 = 0;
      *(_DWORD *)(4 * v229) = v202;
      v227 = 4 * v229 + 4;
      v236 = v225 - v228;
      if (v225 == v228)
      {
LABEL_207:
        *(_QWORD *)(v1514 + 7368) = v234;
        *(_QWORD *)(v1514 + 7376) = v227;
        *(_QWORD *)(v1514 + 7384) = v235;
        if (v228)
          operator delete(v228);
        goto LABEL_209;
      }
    }
    v237 = v236 - 4;
    if (v237 < 0x2C)
      goto LABEL_1922;
    if ((unint64_t)(v228 - v233) < 0x20)
      goto LABEL_1922;
    v238 = (v237 >> 2) + 1;
    v239 = 4 * (v238 & 0x7FFFFFFFFFFFFFF8);
    v240 = &v225[-v239];
    v234 = (_DWORD *)((char *)v234 - v239);
    v241 = &v233[4 * v229 - 16];
    v242 = v225 - 16;
    v243 = v238 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *((float64x2_t *)v242 - 1);
      v244 = *(_OWORD *)v242;
      *(v241 - 1) = v31;
      *v241 = v244;
      v241 -= 2;
      v242 -= 32;
      v243 -= 8;
    }
    while (v243);
    v225 = v240;
    if (v238 != (v238 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1922:
      do
      {
        v245 = *((_DWORD *)v225 - 1);
        v225 -= 4;
        *--v234 = v245;
      }
      while (v225 != v228);
    }
    goto LABEL_207;
  }
  v197 = v1513;
  v198 = v1494;
  if (*(_BYTE *)(*(_QWORD *)(v1513 + 8216) + 1720))
  {
LABEL_186:
    v199 = *(_DWORD *)(v197 + 1940);
    goto LABEL_212;
  }
LABEL_211:
  v199 = -1;
LABEL_212:
  v1512 = v199;
  v1478 = *(_BYTE *)(v1514 + 2149);
  *(_BYTE *)(v1514 + 2149) = 1;
  *((_QWORD *)&v1545 + 1) = &v1515;
  *(_QWORD *)&v246 = 10;
  v1546 = xmmword_2103B83C0;
  v248 = *v1510;
  v247 = v1510[1];
  v249 = v247 - *v1510;
  if ((unint64_t)v249 >= 0x29)
  {
    v250 = v249 >> 2;
    if ((unint64_t)(v249 >> 2) <= 0x14)
      v250 = 20;
    *(_QWORD *)&v1546 = v250;
    is_mul_ok(v250, 0x30uLL);
    v251 = operator new[]();
    if (*((uint64_t **)&v1545 + 1) != &v1515 && *((_QWORD *)&v1545 + 1))
      MEMORY[0x212BC6368]();
    *((_QWORD *)&v1545 + 1) = v251;
    v248 = *v1510;
    v247 = v1510[1];
    v249 = v247 - *v1510;
    v198 = v1494;
  }
  if (v247 != v248)
  {
    v252 = 0;
    v253 = v249 >> 2;
    v9 = (unint64_t)&v1515;
    do
    {
      v256 = *v198 + 40 * v252;
      if (*(_BYTE *)v256)
      {
        v257 = *(_DWORD *)(*v1510 + 4 * v252);
        v258 = *(_OWORD *)(v256 + 16);
        *(_OWORD *)&v1555[4] = *(_OWORD *)v256;
        *(_OWORD *)&v1555[20] = v258;
        *(_QWORD *)&v1555[36] = *(_QWORD *)(v256 + 32);
        v259 = *((_QWORD *)&v1546 + 1);
        v260 = *((_QWORD *)&v1546 + 1) + 1;
        if (*((_QWORD *)&v1546 + 1) + 1 <= (unint64_t)v1546)
        {
          v254 = *((_QWORD *)&v1545 + 1);
        }
        else
        {
          if (2 * (uint64_t)v1546 > v260)
            v260 = 2 * v1546;
          *(_QWORD *)&v1546 = v260;
          v261 = (__int128 *)*((_QWORD *)&v1545 + 1);
          is_mul_ok(v260, 0x30uLL);
          v254 = operator new[]();
          for (i = (_OWORD *)v254; v259; --v259)
          {
            v263 = *v261;
            v32 = v261[2];
            i[1] = v261[1];
            i[2] = v32;
            *i = v263;
            i += 3;
            v261 += 3;
          }
          _ZF = *((uint64_t **)&v1545 + 1) == &v1515 || *((_QWORD *)&v1545 + 1) == 0;
          if (!_ZF)
            MEMORY[0x212BC6368]();
          *((_QWORD *)&v1545 + 1) = v254;
          v259 = *((_QWORD *)&v1546 + 1);
          v198 = v1494;
        }
        v255 = v254 + 48 * v259;
        *(_DWORD *)v255 = v257;
        v31 = *(float64x2_t *)&v1555[16];
        *(_OWORD *)(v255 + 4) = *(_OWORD *)v1555;
        *(float64x2_t *)(v255 + 20) = v31;
        *(_QWORD *)&v246 = *(_QWORD *)&v1555[28];
        *(_OWORD *)(v255 + 32) = *(_OWORD *)&v1555[28];
        ++*((_QWORD *)&v1546 + 1);
      }
      ++v252;
    }
    while (v252 != v253);
  }
  if (*(_BYTE *)(v1513 + 1931))
  {
    v265 = *(_QWORD *)(v1513 + 8216);
    if (*(_BYTE *)(v265 + 1720))
    {
      v266 = v1513 + 12024;
      if (*(_BYTE *)v265)
      {
        v267 = *(_QWORD *)(v265 + 8);
        v268 = (_QWORD *)(v267 + 3104);
        if (v267 + 3104 == v266 || *(_QWORD *)(v267 + 3128) != 0)
          goto LABEL_250;
LABEL_249:
        *(_DWORD *)(v267 + 3136) = *(_DWORD *)(v1513 + 12056);
        sub_20F40AFF0(v268, *(uint64_t **)(v1513 + 12040), 0);
        goto LABEL_250;
      }
      v267 = *(_QWORD *)(v265 + 16);
      v268 = (_QWORD *)(v267 + 3104);
      if (v267 + 3104 != v266 && *(_QWORD *)(v267 + 3128) == 0)
        goto LABEL_249;
    }
  }
LABEL_250:
  if (!v1452)
  {
    *(_QWORD *)(v1514 + 6728) = v1514 + 3152;
    *(_QWORD *)(v1514 + 6736) = *(_QWORD *)(v1514 + 8);
    v292 = (float64x2_t *)(v1514 + 176);
    if (*(_BYTE *)(v1514 + 2146))
      v293 = *(_QWORD *)(v1514 + 120);
    else
      v293 = 0;
    if (*(_BYTE *)(v1514 + 2146))
      v294 = v1514 + 176;
    else
      v294 = 0;
    *(_QWORD *)(v1514 + 6712) = v293;
    *(_QWORD *)(v1514 + 6720) = v294;
    sub_20FC45984(v1514, *(double *)&v246, v31.f64[0], *(double *)&v32, *(double *)&v33, *(double *)&v34, *(double *)&v35, v36, v37);
    v300 = *(_QWORD *)v1514;
    if (*(_QWORD *)v1514)
    {
      if (*(_BYTE *)(v1514 + 1317))
      {
        v301 = *(double *)v300;
        v302 = *(_QWORD *)(v300 + 8);
        v303 = *(double *)(v300 + 16);
        v304 = *(_QWORD *)(v300 + 24);
        v1662[0] = *(float64x2_t *)(v300 + 32);
        v1662[1].f64[0] = *(float64_t *)(v300 + 48);
        v305 = *(_QWORD *)(v300 + 56);
        *(_OWORD *)v1654 = *(_OWORD *)(v300 + 64);
        v1655[0] = *(void **)(v300 + 80);
        v306 = *(_OWORD *)(v300 + 88);
        *(_QWORD *)&v1647 = *(_QWORD *)(v300 + 104);
        v1646 = v306;
        v307 = *(_OWORD *)(v300 + 112);
        *(_QWORD *)&v1639 = *(_QWORD *)(v300 + 128);
        v1638 = v307;
        v308 = *(_OWORD *)(v300 + 136);
        *(_QWORD *)&v1631 = *(_QWORD *)(v300 + 152);
        v1630 = v308;
        v309 = *(_OWORD *)(v300 + 160);
        v310 = *(_OWORD *)(v300 + 176);
        v311 = *(_OWORD *)(v300 + 192);
        v312 = *(_OWORD *)(v300 + 208);
        *(_QWORD *)&object[64] = *(_QWORD *)(v300 + 224);
        *(_OWORD *)&object[48] = v312;
        *(_OWORD *)&object[32] = v311;
        *(_OWORD *)object = v309;
        *(_OWORD *)&object[16] = v310;
        v299 = *(int64x2_t *)(v300 + 232);
        v313 = *(_OWORD *)(v300 + 248);
        v314 = *(_OWORD *)(v300 + 264);
        v315 = *(_OWORD *)(v300 + 280);
        *(_QWORD *)&v1557[48] = *(_QWORD *)(v300 + 296);
        *(_OWORD *)&v1557[32] = v315;
        *(_OWORD *)&v1557[16] = v314;
        *(double *)(v1514 + 176) = v301 * *(double *)(v1514 + 1320);
        *(int64x2_t *)v1556 = v299;
        *(_OWORD *)v1557 = v313;
        v316 = v303 * *(double *)(v1514 + 1328);
        *(_QWORD *)(v1514 + 184) = v302;
        *(double *)(v1514 + 192) = v316;
        *(_QWORD *)(v1514 + 200) = v304;
        *(float64x2_t *)(v1514 + 208) = v1662[0];
        *(float64_t *)(v1514 + 224) = v1662[1].f64[0];
        *(_QWORD *)(v1514 + 232) = v305;
        v317 = *(_OWORD *)v1654;
        *(void **)(v1514 + 256) = v1655[0];
        *(_OWORD *)(v1514 + 240) = v317;
        v318 = v1646;
        *(_QWORD *)(v1514 + 280) = v1647;
        *(_OWORD *)(v1514 + 264) = v318;
        v319 = v1638;
        *(_QWORD *)(v1514 + 304) = v1639;
        *(_OWORD *)(v1514 + 288) = v319;
        v320 = v1630;
        *(_QWORD *)(v1514 + 328) = v1631;
        *(_OWORD *)(v1514 + 312) = v320;
        v321 = *(_OWORD *)object;
        v322 = *(_OWORD *)&object[16];
        v323 = *(_OWORD *)&object[32];
        v298 = *(_OWORD *)&object[48];
        *(_QWORD *)(v1514 + 400) = *(_QWORD *)&object[64];
        *(_OWORD *)(v1514 + 368) = v323;
        *(_OWORD *)(v1514 + 384) = v298;
        *(_OWORD *)(v1514 + 336) = v321;
        *(_OWORD *)(v1514 + 352) = v322;
        v296 = *(float64x2_t *)v1557;
        *(_OWORD *)(v1514 + 408) = *(_OWORD *)v1556;
        v295 = *(int64x2_t *)&v1557[16];
        v297 = *(_OWORD *)&v1557[32];
        *(_QWORD *)(v1514 + 472) = *(_QWORD *)&v1557[48];
        *(int64x2_t *)(v1514 + 440) = v295;
        *(_OWORD *)(v1514 + 456) = v297;
        *(float64x2_t *)(v1514 + 424) = v296;
      }
      else
      {
        v364 = *(_OWORD *)(v300 + 16);
        *v292 = *(float64x2_t *)v300;
        *(_OWORD *)(v1514 + 192) = v364;
        v365 = *(_OWORD *)(v300 + 32);
        *(_QWORD *)(v1514 + 224) = *(_QWORD *)(v300 + 48);
        *(_OWORD *)(v1514 + 208) = v365;
        *(_QWORD *)(v1514 + 232) = *(_QWORD *)(v300 + 56);
        v366 = *(_OWORD *)(v300 + 64);
        *(_QWORD *)(v1514 + 256) = *(_QWORD *)(v300 + 80);
        *(_OWORD *)(v1514 + 240) = v366;
        v367 = *(_OWORD *)(v300 + 88);
        *(_QWORD *)(v1514 + 280) = *(_QWORD *)(v300 + 104);
        *(_OWORD *)(v1514 + 264) = v367;
        v368 = *(_OWORD *)(v300 + 112);
        *(_QWORD *)(v1514 + 304) = *(_QWORD *)(v300 + 128);
        *(_OWORD *)(v1514 + 288) = v368;
        v369 = *(_OWORD *)(v300 + 136);
        *(_QWORD *)(v1514 + 328) = *(_QWORD *)(v300 + 152);
        *(_OWORD *)(v1514 + 312) = v369;
        v371 = *(_OWORD *)(v300 + 192);
        v370 = *(_OWORD *)(v300 + 208);
        v372 = *(_OWORD *)(v300 + 176);
        *(_QWORD *)(v1514 + 400) = *(_QWORD *)(v300 + 224);
        *(_OWORD *)(v1514 + 368) = v371;
        *(_OWORD *)(v1514 + 384) = v370;
        *(_OWORD *)(v1514 + 352) = v372;
        *(_OWORD *)(v1514 + 336) = *(_OWORD *)(v300 + 160);
        v373 = *(_OWORD *)(v300 + 264);
        v296 = *(float64x2_t *)(v300 + 280);
        v374 = *(_QWORD *)(v300 + 296);
        v297 = *(_OWORD *)(v300 + 248);
        *(_OWORD *)(v1514 + 424) = v297;
        *(_QWORD *)(v1514 + 472) = v374;
        *(_OWORD *)(v1514 + 440) = v373;
        *(float64x2_t *)(v1514 + 456) = v296;
        v295 = *(int64x2_t *)(v300 + 232);
        *(int64x2_t *)(v1514 + 408) = v295;
      }
    }
    v375 = *(_QWORD *)(v1514 + 8);
    v376 = *(_DWORD *)(v375 + 64);
    _CF = v376 >= v1512;
    v377 = v376 - v1512;
    if (_CF)
      v378 = v377;
    else
      v378 = 0;
    v379 = *(_QWORD **)(v375 + 48);
    v380 = v375 + 56;
    if (v379 != (_QWORD *)(v375 + 56))
    {
      v381 = 0;
      do
      {
        object[0] = 0;
        object[32] = 0;
        if (*((_QWORD *)&v1546 + 1))
        {
          v382 = 48 * *((_QWORD *)&v1546 + 1);
          v383 = *((_QWORD *)&v1545 + 1);
          while (*(_DWORD *)v383 != *((_DWORD *)v379 + 10))
          {
            v383 += 48;
            v382 -= 48;
            if (!v382)
              goto LABEL_323;
          }
        }
        else
        {
          v383 = *((_QWORD *)&v1545 + 1);
        }
        if (v383 != *((_QWORD *)&v1545 + 1) + 48 * *((_QWORD *)&v1546 + 1))
        {
          v1496 = *(float64x2_t *)(v383 + 32);
          v1505 = *(float64x2_t *)(v383 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v1505), (int32x4_t)vcgtzq_f64(v1496))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1872;
          }
          v296 = vmulq_f64(v1505, *v292);
          *(float64_t *)&v297 = v1496.f64[0];
          v295 = (int64x2_t)vmulq_f64(v1496, *(float64x2_t *)(v1514 + 192));
          *(int64x2_t *)&object[16] = v295;
          *(float64x2_t *)object = v296;
          object[32] = 1;
        }
LABEL_323:
        if ((sub_20FC46568(v1514, v379[4], v379[5], v381 < v378, v295, v296.f64[0], *(double *)&v297, *(double *)&v298, v299) & 1) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 188, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1872;
        }
        v384 = (_QWORD *)v379[1];
        if (v384)
        {
          do
          {
            v385 = v384;
            v384 = (_QWORD *)*v384;
          }
          while (v384);
        }
        else
        {
          do
          {
            v385 = (_QWORD *)v379[2];
            _ZF = *v385 == (_QWORD)v379;
            v379 = v385;
          }
          while (!_ZF);
        }
        ++v381;
        v379 = v385;
      }
      while (v385 != (_QWORD *)v380);
    }
    if (!*(_BYTE *)(v1514 + 2144))
      goto LABEL_400;
    v386 = sub_20F92289C(v1514 + 5168, 0);
    *(_DWORD *)(v1514 + 2184) = v386;
    if (v386
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2036, (uint64_t)"num_optimized_slam_landmarks_ == 0", 34, (uint64_t)"No SLAM variable should exist at this point.", 44, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1872;
    }
    v387 = v1514;
    v389 = *(uint64_t **)(v1514 + 24);
    v388 = *(uint64_t **)(v1514 + 32);
    if (v389 == v388)
      goto LABEL_399;
    LODWORD(v1662[0].f64[0]) = 0;
    while (1)
    {
      v390 = *v389;
      if (*(_DWORD *)(*v389 + 520) != 2)
        goto LABEL_336;
      v391 = *(_QWORD *)(v1514 + 8);
      v394 = *(_QWORD *)(v391 + 56);
      v392 = v391 + 56;
      v393 = v394;
      if (v394)
      {
        do
        {
          v395 = v393;
          v393 = *(_QWORD *)(v393 + 8);
        }
        while (v393);
      }
      else
      {
        do
        {
          v395 = *(_QWORD *)(v392 + 16);
          _ZF = *(_QWORD *)v395 == v392;
          v392 = v395;
        }
        while (_ZF);
      }
      v396 = *(_QWORD *)(v390 + 496);
      v397 = *(_QWORD *)(v390 + 504);
      if (v396 != v397)
      {
        while (*(_QWORD *)v396 != *(_QWORD *)(v395 + 32) || *(_DWORD *)(v396 + 8) != *(_DWORD *)(v395 + 40))
        {
          v396 += 64;
          if (v396 == v397)
            goto LABEL_336;
        }
      }
      if (v396 == v397)
        goto LABEL_336;
      v398 = *(_DWORD *)(v390 + 32);
      v399 = *(char **)(v1514 + 5560);
      v400 = *(char **)(v1514 + 5568);
      if (v400 != v399)
      {
        v401 = (v400 - v399) >> 4;
        do
        {
          v402 = v401 >> 1;
          v403 = &v399[16 * (v401 >> 1)];
          v405 = *(_DWORD *)v403;
          v404 = v403 + 16;
          v401 += ~(v401 >> 1);
          if (v405 < v398)
            v399 = v404;
          else
            v401 = v402;
        }
        while (v401);
      }
      if (v399 != v400 && *(_DWORD *)v399 == v398)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2063, (uint64_t)"linear_system_.template findVariable<SLAMLandmarkVariableType>(landmarkID) == linear_system_.template endVariable<SLAMLandmarkVariableType>()", 141, (uint64_t)"There should not be any SLAM landmark Variable with this track ID.", 66, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1872;
        }
        v390 = *v389;
      }
      if (*(_BYTE *)(v390 + 488))
      {
        v406 = v390 + 40;
        *(_DWORD *)object = v398;
        object[4] = 1;
        *(_QWORD *)&object[8] = v390 + 40;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2065, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1872;
        }
        v406 = *v389 + 40;
        v407 = *(unsigned __int8 *)(*v389 + 488);
        if (*(_BYTE *)(*v389 + 488))
          v408 = *v389 + 40;
        else
          v408 = 0;
        *(_DWORD *)object = v398;
        object[4] = 1;
        *(_QWORD *)&object[8] = v408;
        if (!v407)
          goto LABEL_376;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v406 + 24))(v406))
      {
        v409 = *(_QWORD *)&object[8];
        *(_OWORD *)&object[16] = *(_OWORD *)(*(_QWORD *)&object[8] + 8);
        *(_QWORD *)&object[32] = *(_QWORD *)(*(_QWORD *)&object[8] + 24);
        _Q1 = *(_OWORD *)(*(_QWORD *)&object[8] + 64);
        _D3 = *(_QWORD *)(*(_QWORD *)&object[8] + 72);
        __asm { FMLA            D2, D3, V1.D[1] }
        if (fabs(sqrt(_D2 + *(double *)(v409 + 80) * *(double *)(v409 + 80)) + -1.0) > 0.000001
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1872;
        }
        object[4] = 0;
LABEL_371:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v409 + 24))(v409))
        {
          *(_OWORD *)&object[16] = *(_OWORD *)(v409 + 8);
          *(_QWORD *)&object[32] = *(_QWORD *)(v409 + 24);
          _Q1 = *(_OWORD *)(v409 + 64);
          _D3 = *(_QWORD *)(v409 + 72);
          __asm { FMLA            D2, D3, V1.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v409 + 80) * *(double *)(v409 + 80)) + -1.0) > 0.000001
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1872;
          }
          if (sub_20FC53F58(v1514 + 5168, (unsigned int *)object))
          {
            *(_BYTE *)(v1514 + 7828) = 0;
            *(_DWORD *)(v1514 + 7824) = 0;
          }
        }
        goto LABEL_376;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 798, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1872;
      }
      v409 = *(_QWORD *)&object[8];
      object[4] = 0;
      if (*(_QWORD *)&object[8])
        goto LABEL_371;
LABEL_376:
      ++*(_DWORD *)(v1514 + 2184);
      v416 = *(_QWORD *)(v1514 + 8);
      v380 = *(unsigned int *)(v395 + 40) | v380 & 0xFFFFFFFF00000000;
      v417 = *(_QWORD *)(v416 + 312);
      if (v417)
      {
        v418 = 0;
        v419 = *(void **)(v395 + 32);
        do
        {
          v420 = *(_QWORD **)(v416 + 296);
          if (v418 < 0)
          {
            v425 = v418;
            do
            {
              v426 = (_QWORD *)*v420;
              if (*v420)
              {
                do
                {
                  v424 = v426;
                  v426 = (_QWORD *)v426[1];
                }
                while (v426);
              }
              else
              {
                do
                {
                  v424 = (_QWORD *)v420[2];
                  _ZF = *v424 == (_QWORD)v420;
                  v420 = v424;
                }
                while (_ZF);
              }
              v420 = v424;
              _CF = __CFADD__(v425++, 1);
            }
            while (!_CF);
          }
          else if (v418)
          {
            v421 = v418;
            do
            {
              v423 = (_QWORD *)v420[1];
              if (v423)
              {
                do
                {
                  v424 = v423;
                  v423 = (_QWORD *)*v423;
                }
                while (v423);
              }
              else
              {
                do
                {
                  v424 = (_QWORD *)v420[2];
                  _ZF = *v424 == (_QWORD)v420;
                  v420 = v424;
                }
                while (!_ZF);
              }
              v420 = v424;
              v422 = v421-- <= 1;
            }
            while (!v422);
          }
          else
          {
            v424 = *(_QWORD **)(v416 + 296);
          }
          v427 = *((_DWORD *)v424 + 8);
          v1556[0] = v419;
          v1556[1] = (void *)v380;
          *(_DWORD *)v1557 = v427;
          sub_20FC512F0(v1514, (uint64_t)v1556, *v389, (unsigned int *)v1662);
          ++v418;
        }
        while (v418 != v417);
      }
LABEL_336:
      if (++v389 == v388)
      {
        v387 = v1514;
LABEL_399:
        sub_20FC47D94(v387);
LABEL_400:
        sub_20FC48730((_QWORD *)v1514, *(unsigned int *)(v1514 + 2152), *(unsigned int *)(v1514 + 1920));
        sub_20FC42C7C(v1513, v1514);
        v428 = *(_DWORD *)(v1513 + 8168);
        v429 = *(_DWORD *)(v1513 + 8172);
        v430 = (float64_t *)operator new((8 * v429 * v428 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v432 = v430;
        if (v429 * v428)
          memcpy(v430, *(const void **)(v1513 + 8152), 8 * v429 * v428);
        v433 = 0;
        v434 = 0;
        v435 = ((unint64_t)*(unsigned __int16 *)((char *)v1449 + 3) << 8) | ((unint64_t)*((unsigned __int8 *)v1449 + 5) << 24) | *((unsigned __int8 *)v1449 + 8);
        v436 = v435 | ((unint64_t)(*(unsigned __int16 *)((char *)v1449 + 9) | (*((unsigned __int8 *)v1449 + 11) << 16)) << 32);
        v1570 = *v1449 | ((unint64_t)*((unsigned __int8 *)v1449 + 2) << 16) | ((unint64_t)v1449[3] << 48) | ((unint64_t)v1449[6] << 24) | ((unint64_t)*((unsigned __int8 *)v1449 + 14) << 40);
        v437 = *(_DWORD *)(v1513 + 8176);
        v1571 = v435;
        v1573 = BYTE6(v436);
        v1572 = WORD2(v436);
        v438 = v428 + 1;
        v439 = 6;
        if (v437 == 1)
          v439 = 15;
        do
        {
          if (!*((_BYTE *)&v1570 + v434))
            v432[v433] = 1.0e10;
          ++v434;
          v433 += v438;
        }
        while (v439 != v434);
        v440 = *(_QWORD *)(v1513 + 8216);
        v441 = *(unsigned __int8 *)(v440 + 1720);
        v442 = v440 + 864;
        if (!*(_BYTE *)(v440 + 1720))
          v442 = v440 + 24;
        if (*(_BYTE *)(v442 + 416))
          v443 = *(_BYTE *)(v1514 + 2146) == 0;
        else
          v443 = 0;
        if (v443)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5206, (uint64_t)"!ba_->active_config().estimate_extrinsics || baid.parameters().use_IMU", 70, (uint64_t)"No extrinsics estimation in vision-only mode currently", 54, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v440 = *(_QWORD *)(v1513 + 8216);
          v441 = *(unsigned __int8 *)(v440 + 1720);
        }
        v444 = v440 + 864;
        if (!v441)
          v444 = v440 + 24;
        if (v429 >= v428)
          v445 = v428;
        else
          v445 = v429;
        if (v445 < 0x15 || !*(_BYTE *)(v444 + 416))
          goto LABEL_463;
        v446 = *(unsigned int **)(v1514 + 5368);
        v1506 = *(unsigned int **)(v1514 + 5376);
        if (v446 == v1506)
          goto LABEL_462;
        v447 = &v432[15 * v428 + 15];
        v448 = v447[v438];
        v449 = v447[2 * v438];
        v450 = v447[3 * v438];
        v451 = *v447;
        v452 = sqrt(*v447);
        v453 = sqrt(v448);
        v454 = sqrt(v449);
        v1473 = sqrt(v450);
        v1481 = v447[4 * v438];
        v1463 = sqrt(v1481);
        v1489 = vdupq_n_s64(0x7FF8000000000000uLL);
        v1466 = v447[5 * v438];
        v1460 = sqrt(v1466);
        while (2)
        {
          v455 = *v446;
          v456 = (char *)operator new(0x58uLL);
          v458 = v456;
          *((_QWORD *)v456 + 1) = 0;
          v459 = (unint64_t *)(v456 + 8);
          *((_QWORD *)v456 + 2) = 0;
          *(_QWORD *)v456 = &off_24CA016C8;
          *((_QWORD *)v456 + 3) = &off_24CA01718;
          v460 = v456 + 24;
          v456[32] = 1;
          if (v451 >= 1.0e-15
            && (*((double *)v456 + 5) = v452, v448 >= 1.0e-15)
            && (*((double *)v456 + 6) = v453, v449 >= 1.0e-15)
            && (*((double *)v456 + 7) = v454, v450 >= 1.0e-15)
            && (*((double *)v456 + 8) = v1473, v1481 >= 1.0e-15)
            && (*((double *)v456 + 9) = v1463, v1466 >= 1.0e-15))
          {
            *((double *)v456 + 10) = v1460;
            v456[32] = 1;
          }
          else
          {
            v456[32] = 0;
            *(int64x2_t *)(v456 + 40) = v1489;
            *(int64x2_t *)(v456 + 56) = v1489;
            *(int64x2_t *)(v456 + 72) = v1489;
          }
          *(_QWORD *)&v1662[0].f64[0] = v456 + 24;
          *(_QWORD *)&v1662[0].f64[1] = v456;
          v461 = *(char **)(v1514 + 5368);
          v462 = *(char **)(v1514 + 5376);
          if (v462 != v461)
          {
            v463 = (v462 - v461) >> 4;
            do
            {
              v464 = v463 >> 1;
              v465 = (unsigned int *)&v461[16 * (v463 >> 1)];
              v467 = *v465;
              v466 = (char *)(v465 + 4);
              v463 += ~(v463 >> 1);
              if (v467 < v455)
                v461 = v466;
              else
                v463 = v464;
            }
            while (v463);
          }
          if (v461 == v462 || *(_DWORD *)v461 != (_DWORD)v455)
          {
            v468 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v461 = v462;
            if (v468)
              abort();
          }
          v469 = *((_QWORD *)v461 + 1);
          v470 = *(_OWORD *)(v469 + 48);
          v471 = *(_OWORD *)(v469 + 80);
          *(_OWORD *)&object[48] = *(_OWORD *)(v469 + 64);
          *(_OWORD *)&object[64] = v471;
          *(_QWORD *)&object[80] = *(_QWORD *)(v469 + 96);
          *(_OWORD *)&object[32] = v470;
          *(_OWORD *)&object[16] = *(_OWORD *)(v469 + 32);
          *(_OWORD *)&object[88] = *(_OWORD *)(v469 + 104);
          *(_QWORD *)&object[104] = *(_QWORD *)(v469 + 120);
          *(_QWORD *)object = v455;
          *(_QWORD *)&object[112] = v460;
          *(_QWORD *)&object[120] = v458;
          do
            v472 = __ldxr(v459);
          while (__stxr(v472 + 1, v459));
          LODWORD(v1646) = v455;
          v1654[1] = 0;
          v1654[0] = 0;
          v1556[1] = 0;
          v1556[0] = 0;
          if ((sub_20FB8FE18(v1514 + 5168, (__int128 *)object, &v1646, 0, 0, v457) & 1) != 0)
          {
            *(_BYTE *)(v1514 + 7828) = 0;
            *(_DWORD *)(v1514 + 7824) = 0;
            v473 = *(std::__shared_weak_count **)&object[120];
            if (!*(_QWORD *)&object[120])
              goto LABEL_453;
          }
          else
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 857, (uint64_t)"ret.second", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v473 = *(std::__shared_weak_count **)&object[120];
            if (!*(_QWORD *)&object[120])
            {
LABEL_453:
              v476 = v1662[0].f64[1];
              if (*(_QWORD *)&v1662[0].f64[1])
                goto LABEL_454;
              goto LABEL_426;
            }
          }
          p_shared_owners = (unint64_t *)&v473->__shared_owners_;
          do
            v475 = __ldaxr(p_shared_owners);
          while (__stlxr(v475 - 1, p_shared_owners));
          if (v475)
            goto LABEL_453;
          ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
          std::__shared_weak_count::__release_weak(v473);
          v476 = v1662[0].f64[1];
          if (*(_QWORD *)&v1662[0].f64[1])
          {
LABEL_454:
            v477 = (unint64_t *)(*(_QWORD *)&v476 + 8);
            do
              v478 = __ldaxr(v477);
            while (__stlxr(v478 - 1, v477));
            if (!v478)
            {
              (*(void (**)(float64_t))(**(_QWORD **)&v476 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v476));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v476);
            }
          }
LABEL_426:
          v446 += 4;
          if (v446 != v1506)
            continue;
          break;
        }
        v440 = *(_QWORD *)(v1513 + 8216);
LABEL_462:
        v441 = *(unsigned __int8 *)(v440 + 1720);
LABEL_463:
        if (v441)
        {
LABEL_464:
          MEMORY[0x212BC6368](v432, 0x1000C8000313F17);
          v479 = *(_QWORD *)(v1513 + 8216);
          v480 = *(unsigned __int8 *)(v479 + 1720);
          v481 = v479 + 864;
          if (!*(_BYTE *)(v479 + 1720))
            v481 = v479 + 24;
          __asm { FMOV            V1.2D, #1.0 }
          v1474 = _Q1;
          if (!*(_BYTE *)(v481 + 425))
            goto LABEL_503;
          v1497 = (int64x2_t)vdivq_f64(_Q1, *(float64x2_t *)(v481 + 288));
          if (vminnmvq_f64(vminnmq_f64(vminnmq_f64((float64x2_t)vdupq_lane_s64(v1497.i64[0], 0), (float64x2_t)vdupq_laneq_s64(v1497, 1)), (float64x2_t)v1497)) > 0.0|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5318, (uint64_t)"prior_info.min() > 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v483 = *(unsigned int **)(v1514 + 5464);
            v484 = *(unsigned int **)(v1514 + 5472);
            if (v483 != v484)
            {
              v485 = sqrt(*(double *)v1497.i64);
              v486 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)v1497, (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL))));
              v487 = *(double *)&v1497.i64[1];
              v1490 = v486.i8[4];
              v488 = v486.i8[0];
              v1498 = vdupq_n_s64(0x7FF8000000000000uLL);
              v489 = sqrt(v487);
              do
              {
                v490 = *v483;
                v491 = (char *)operator new(0x58uLL);
                v493 = v491;
                *((_QWORD *)v491 + 1) = 0;
                v494 = (unint64_t *)(v491 + 8);
                *((_QWORD *)v491 + 2) = 0;
                *(_QWORD *)v491 = &off_24CA016C8;
                *((_QWORD *)v491 + 3) = &off_24CA01718;
                v495 = v491 + 24;
                v491[32] = 1;
                if ((v488 & 1) != 0
                  || (*((double *)v491 + 5) = v485,
                      *((double *)v491 + 6) = v485,
                      *((double *)v491 + 7) = v485,
                      (v1490 & 1) != 0))
                {
                  v491[32] = 0;
                  *(int64x2_t *)(v491 + 40) = v1498;
                  *(int64x2_t *)(v491 + 56) = v1498;
                  *(int64x2_t *)(v491 + 72) = v1498;
                }
                else
                {
                  *((double *)v491 + 8) = v489;
                  *((double *)v491 + 9) = v489;
                  *((double *)v491 + 10) = v489;
                  v491[32] = 1;
                }
                *(_QWORD *)&v1662[0].f64[0] = v491 + 24;
                *(_QWORD *)&v1662[0].f64[1] = v491;
                v496 = *(char **)(v1514 + 5464);
                v497 = *(char **)(v1514 + 5472);
                if (v497 != v496)
                {
                  v498 = (v497 - v496) >> 4;
                  do
                  {
                    v499 = v498 >> 1;
                    v500 = (unsigned int *)&v496[16 * (v498 >> 1)];
                    v502 = *v500;
                    v501 = (char *)(v500 + 4);
                    v498 += ~(v498 >> 1);
                    if (v502 < v490)
                      v496 = v501;
                    else
                      v498 = v499;
                  }
                  while (v498);
                }
                if (v496 == v497 || *(_DWORD *)v496 != (_DWORD)v490)
                {
                  v503 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v496 = v497;
                  if (v503)
                    abort();
                }
                v504 = *((_QWORD *)v496 + 1);
                v505 = *(_OWORD *)(v504 + 48);
                v506 = *(_OWORD *)(v504 + 80);
                *(_OWORD *)&object[48] = *(_OWORD *)(v504 + 64);
                *(_OWORD *)&object[64] = v506;
                *(_QWORD *)&object[80] = *(_QWORD *)(v504 + 96);
                *(_OWORD *)&object[32] = v505;
                *(_OWORD *)&object[16] = *(_OWORD *)(v504 + 32);
                *(_OWORD *)&object[88] = *(_OWORD *)(v504 + 104);
                *(_QWORD *)&object[104] = *(_QWORD *)(v504 + 120);
                *(_QWORD *)object = v490;
                *(_QWORD *)&object[112] = v495;
                *(_QWORD *)&object[120] = v493;
                do
                  v507 = __ldxr(v494);
                while (__stxr(v507 + 1, v494));
                LODWORD(v1646) = v490;
                v1654[1] = 0;
                v1654[0] = 0;
                v1556[1] = 0;
                v1556[0] = 0;
                if ((sub_20FBB0864(v1514 + 5168, (__int128 *)object, &v1646, 0, 0, v492) & 1) != 0)
                {
                  *(_BYTE *)(v1514 + 7828) = 0;
                  *(_DWORD *)(v1514 + 7824) = 0;
                  v508 = *(std::__shared_weak_count **)&object[120];
                  if (!*(_QWORD *)&object[120])
                    goto LABEL_495;
                }
                else
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 881, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor. Likely duplicated factor ids.", 55, (void (*)(void **))sub_21023DDB0))
                  {
                    abort();
                  }
                  v508 = *(std::__shared_weak_count **)&object[120];
                  if (!*(_QWORD *)&object[120])
                  {
LABEL_495:
                    v511 = v1662[0].f64[1];
                    if (*(_QWORD *)&v1662[0].f64[1])
                      goto LABEL_496;
                    goto LABEL_471;
                  }
                }
                v509 = (unint64_t *)&v508->__shared_owners_;
                do
                  v510 = __ldaxr(v509);
                while (__stlxr(v510 - 1, v509));
                if (v510)
                  goto LABEL_495;
                ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
                std::__shared_weak_count::__release_weak(v508);
                v511 = v1662[0].f64[1];
                if (*(_QWORD *)&v1662[0].f64[1])
                {
LABEL_496:
                  v512 = (unint64_t *)(*(_QWORD *)&v511 + 8);
                  do
                    v513 = __ldaxr(v512);
                  while (__stlxr(v513 - 1, v512));
                  if (!v513)
                  {
                    (*(void (**)(float64_t))(**(_QWORD **)&v511 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v511));
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v511);
                  }
                }
LABEL_471:
                v483 += 4;
              }
              while (v483 != v484);
            }
            v479 = *(_QWORD *)(v1513 + 8216);
            v480 = *(unsigned __int8 *)(v479 + 1720);
LABEL_503:
            v514 = v479 + 864;
            if (!v480)
              v514 = v479 + 24;
            if (*(_BYTE *)(v514 + 417))
            {
              sub_20FC5DCB8(v1514, 0, *(double *)(v514 + 112));
              v479 = *(_QWORD *)(v1513 + 8216);
              v480 = *(unsigned __int8 *)(v479 + 1720);
            }
            v515 = v479 + 864;
            if (!v480)
              v515 = v479 + 24;
            if (*(_BYTE *)(v515 + 419))
            {
              sub_20FC5DCB8(v1514, 1u, *(double *)(v515 + 120));
              v479 = *(_QWORD *)(v1513 + 8216);
              v480 = *(unsigned __int8 *)(v479 + 1720);
            }
            v516 = v479 + 864;
            if (!v480)
              v516 = v479 + 24;
            if (!*(_BYTE *)(v516 + 426))
              goto LABEL_533;
            if (*(double *)(v516 + 128) > 0.0
              && *(double *)(v516 + 136) > 0.0
              && *(double *)(v516 + 144) > 0.0
              && *(double *)(v516 + 152) > 0.0)
            {
              goto LABEL_520;
            }
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5338, (uint64_t)"std::all_of(ba_->active_config().initial_intrinsics_bias_variance.begin(), ba_->active_config().initial_intrinsics_bias_variance.end(), [](const double d) { return d > 0; })",
                    173,
                    (uint64_t)"",
                    0,
                    (void (*)(void **))sub_21023DDB0))
            {
              v479 = *(_QWORD *)(v1513 + 8216);
              v480 = *(unsigned __int8 *)(v479 + 1720);
LABEL_520:
              if (v480)
                v517 = (float64x2_t *)(v479 + 864);
              else
                v517 = (float64x2_t *)(v479 + 24);
              v518 = *(unsigned int **)(v1514 + 5752);
              v519 = *(unsigned int **)(v1514 + 5760);
              if (v518 != v519)
              {
                v1507 = vdivq_f64(v1474, vsqrtq_f64(v517[8]));
                v1499 = vdivq_f64(v1474, vsqrtq_f64(v517[9]));
                v520 = vminnmvq_f64(vminnmq_f64(v1507, v1499));
                do
                {
                  v521 = *((_QWORD *)v518 + 1);
                  if (*(_BYTE *)(v521 + 20))
                  {
                    v522 = *v518;
                    *(_QWORD *)object = *v518;
                    v523 = *(_OWORD *)(v521 + 48);
                    *(_OWORD *)&object[16] = *(_OWORD *)(v521 + 32);
                    *(_OWORD *)&object[32] = v523;
                    *(float64x2_t *)&object[48] = v1507;
                    *(float64x2_t *)&object[64] = v1499;
                    object[80] = 1;
                    if (v520 <= 0.0
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
                    {
                      goto LABEL_1872;
                    }
                    LODWORD(v1654[0]) = v522;
                    v1662[0] = 0uLL;
                    v1556[1] = 0;
                    v1556[0] = 0;
                    if ((sub_20FB86290(v1514 + 5168, (__int128 *)object, (unsigned int *)v1654, 0, 0) & 1) != 0)
                    {
                      *(_BYTE *)(v1514 + 7828) = 0;
                      *(_DWORD *)(v1514 + 7824) = 0;
                    }
                  }
                  v518 += 4;
                }
                while (v518 != v519);
                v479 = *(_QWORD *)(v1513 + 8216);
              }
              v480 = *(unsigned __int8 *)(v479 + 1720);
LABEL_533:
              v524 = v479 + 864;
              v525 = v479 + 24;
              if (v480)
                v525 = v524;
              if (*(_BYTE *)(v525 + 432))
              {
                *(double *)object = 1.0 / *(double *)(v525 + 256);
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                *(_QWORD *)&object[24] = *(_QWORD *)object;
                object[32] = 1;
              }
              else
              {
                object[0] = 0;
                object[32] = 0;
              }
              sub_20FC5D9C4(v1514, (uint64_t)object);
              v561 = *(_QWORD *)(v1513 + 8216);
              v562 = *(unsigned __int8 *)(v561 + 1720);
              v563 = v561 + 864;
              v564 = v561 + 24;
              if (v562)
                v564 = v563;
              if (*(_BYTE *)(v564 + 434))
              {
                v565 = *(float64x2_t *)(v564 + 264);
                v566 = vmulq_f64(v565, (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
                v565.f64[0] = *(double *)(v564 + 280) * 0.0174532925;
                *(float64x2_t *)object = vdivq_f64(v1474, v566);
                *(_QWORD *)&object[16] = *(_OWORD *)&vdivq_f64(v1474, v565);
                object[24] = 1;
              }
              else
              {
                object[0] = 0;
                object[24] = 0;
              }
              sub_20FC5DB28(v1514, (uint64_t)object);
              v569 = *(_QWORD *)(v1513 + 8216);
              v570 = *(unsigned __int8 *)(v569 + 1720);
              v571 = v569 + 864;
              if (!*(_BYTE *)(v569 + 1720))
                v571 = v569 + 24;
              if (*(_BYTE *)(v571 + 423))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v571 + 304));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1556[0]) = 0;
                v1557[8] = 0;
                v567 = sub_20FC5C72C(v1514, (__n128 *)object, 5u, (__int128 *)v1556, 0);
                v569 = *(_QWORD *)(v1513 + 8216);
                v570 = *(unsigned __int8 *)(v569 + 1720);
              }
              v572 = v569 + 864;
              if (!v570)
                v572 = v569 + 24;
              if (*(_BYTE *)(v572 + 424))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v572 + 312));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1556[0]) = 0;
                v1557[8] = 0;
                v567 = sub_20FC5C72C(v1514, (__n128 *)object, 6u, (__int128 *)v1556, 0);
                v569 = *(_QWORD *)(v1513 + 8216);
                v570 = *(unsigned __int8 *)(v569 + 1720);
              }
              v573 = v569 + 864;
              if (!v570)
                v573 = v569 + 24;
              if (*(_BYTE *)(v573 + 421))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v573 + 320));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1556[0]) = 0;
                v1557[8] = 0;
                v567 = sub_20FC5C72C(v1514, (__n128 *)object, 3u, (__int128 *)v1556, 0);
                v569 = *(_QWORD *)(v1513 + 8216);
                v570 = *(unsigned __int8 *)(v569 + 1720);
              }
              v574 = v569 + 864;
              v575 = v569 + 24;
              if (v570)
                v575 = v574;
              if (*(_BYTE *)(v575 + 422))
              {
                *(_QWORD *)object = sqrt(1.0 / *(double *)(v575 + 328));
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object;
                object[24] = 1;
                LOBYTE(v1556[0]) = 0;
                v1557[8] = 0;
                v567 = sub_20FC5C72C(v1514, (__n128 *)object, 4u, (__int128 *)v1556, 0);
              }
              goto LABEL_817;
            }
          }
LABEL_1872:
          abort();
        }
        v526 = *(_QWORD *)(*a9 + 48);
        v1500 = v432[v438];
        v431.f64[0] = *v432;
        v527 = v432[2 * v438];
        v528 = v432[3 * v438];
        v529 = v432[4 * v438];
        v530 = v432[5 * v438];
        v1508 = v431;
        if (*(_BYTE *)(v1514 + 2146))
        {
          v531 = v432[6 * v438];
          v532 = v432[7 * v438];
          v533 = v432[8 * v438];
          v534 = v432[9 * v438];
          v1467 = v432[10 * v438];
          v1470 = v432[11 * v438];
          v1475 = v432[12 * v438];
          v1482 = v432[13 * v438];
          v1491 = v432[14 * v438];
          if (*(_BYTE *)(v440 + 97))
          {
            v535 = *(_QWORD *)(v526 + 48);
            v536 = *(_QWORD *)(v535 + 16);
            v537 = *(_QWORD *)(v535 + 40);
            v538 = *(_OWORD *)(v535 + 24);
            v539 = *(_QWORD *)(v535 + 64);
            v540 = *(_OWORD *)(v535 + 48);
            *(_OWORD *)object = *(_OWORD *)v535;
            *(_OWORD *)&object[24] = v538;
            *(_QWORD *)&object[16] = v536;
            *(_QWORD *)&object[40] = v537;
            *(_OWORD *)&object[48] = v540;
            *(_QWORD *)&object[64] = v539;
            sub_20F1B6B0C((float64x2_t *)object);
            *(_OWORD *)&v1557[16] = *(_OWORD *)&object[32];
            *(_OWORD *)&v1557[32] = *(_OWORD *)&object[48];
            *(_OWORD *)v1557 = *(_OWORD *)&object[16];
            *(_OWORD *)v1556 = *(_OWORD *)object;
            v1558 = *(_OWORD *)(v535 + 72);
            *(_QWORD *)&v1559 = *(_QWORD *)(v535 + 88);
            v541 = *(_OWORD *)(v535 + 96);
            v542 = *(_QWORD *)(v535 + 136);
            *(_QWORD *)&v1557[48] = *(_QWORD *)&object[64];
            *(_QWORD *)&v1557[72] = v542;
            v543 = *(_QWORD *)(v535 + 112);
            *(_OWORD *)&v1557[80] = v541;
            *(_OWORD *)&v1557[56] = *(_OWORD *)(v535 + 120);
            v544 = *(_OWORD *)(v535 + 144);
            v545 = *(_QWORD *)(v535 + 160);
            *(_QWORD *)&v1557[96] = v543;
            *(_QWORD *)&v1557[120] = v545;
            *(_OWORD *)&v1557[104] = v544;
            v546 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1514 + 8) + 48) + 48);
            v1456 = *(double *)(v546 + 16);
            v1454 = *(int8x16_t *)v546;
            v1464 = *(double *)(v546 + 40);
            v1459 = *(double *)(v546 + 64);
            v1461 = *(int8x16_t *)(v546 + 24);
            v1458 = *(int8x16_t *)(v546 + 48);
            v1674 = 0u;
            v1675 = 0u;
            v1676 = 0u;
            v1677 = 0u;
            v1678 = 0u;
            v1679 = 0u;
            v1668 = 0u;
            v1669 = 0u;
            v1670 = 0u;
            v1671 = 0u;
            v1672 = 0u;
            v1673 = 0u;
            v1667 = 0;
            v1666 = 0u;
            v1665 = 0u;
            v1664 = 0u;
            v1663 = 0u;
            memset(v1662, 0, sizeof(v1662));
            v1661 = 0;
            v1660 = 0u;
            v1659 = 0u;
            v1658 = 0u;
            v1657 = 0u;
            v1656 = 0u;
            *(_OWORD *)v1655 = 0u;
            *(_OWORD *)v1654 = 0u;
            v1653 = 0;
            v1652 = 0u;
            v1651 = 0u;
            v1650 = 0u;
            v1649 = 0u;
            v1648 = 0u;
            v1647 = 0u;
            v1646 = 0u;
            v1645 = 0;
            v1644 = 0u;
            v1643 = 0u;
            v1642 = 0u;
            v1641 = 0u;
            v1640 = 0u;
            v1639 = 0u;
            v1638 = 0u;
            v1637 = 0;
            v1636 = 0u;
            v1635 = 0u;
            v1634 = 0u;
            v1633 = 0u;
            v1632 = 0u;
            v1631 = 0u;
            v1630 = 0u;
            v1629 = 0;
            v1628 = 0u;
            v1627 = 0u;
            v1626 = 0u;
            v1625 = 0u;
            v1624 = 0u;
            v1623 = 0u;
            v1622 = 0u;
            v1621 = 0;
            v1620 = 0u;
            v1619 = 0u;
            v1618 = 0u;
            v1617 = 0u;
            v1616 = 0u;
            v1615 = 0u;
            v1614 = 0u;
            v1613 = 0;
            v1612 = 0u;
            v1611 = 0u;
            v1610 = 0u;
            v1609 = 0u;
            v1608 = 0u;
            v1607 = 0u;
            v1606 = 0u;
            v1605 = 0;
            v1604 = 0u;
            v1603 = 0u;
            v1602 = 0u;
            v1601 = 0u;
            v1600 = 0u;
            v1599 = 0u;
            v1598 = 0u;
            v1597 = 0;
            v1596 = 0u;
            v1595 = 0u;
            v1594 = 0u;
            v1593 = 0u;
            v1592 = 0u;
            v1591 = 0u;
            v1590 = 0u;
            v1589 = 0;
            v1588 = 0u;
            v1587 = 0u;
            v1586 = 0u;
            v1585 = 0u;
            v1584 = 0u;
            v1583 = 0u;
            v1582 = 0u;
            v1581 = 0;
            v1580 = 0u;
            v1579 = 0u;
            v1578 = 0u;
            v1577 = 0u;
            v1576 = 0u;
            v1575 = 0u;
            v1574 = 0u;
            v547 = COERCE_DOUBLE(operator new(0x738uLL));
            v548.f64[0] = v1456;
            v548.f64[1] = v1464;
            v549 = *(double *)vextq_s8(v1454, v1454, 8uLL).i64;
            v550.f64[0] = v549;
            v550.f64[1] = *(double *)vextq_s8(v1461, v1461, 8uLL).i64;
            *(_QWORD *)&v551.f64[0] = v1454.i64[0];
            *(_QWORD *)&v551.f64[1] = v1461.i64[0];
            *(_QWORD *)&v552.f64[0] = v1458.i64[0];
            v552.f64[1] = *(double *)vextq_s8(v1458, v1458, 8uLL).i64;
            *(_QWORD *)(*(_QWORD *)&v547 + 8) = 0;
            v553 = (unint64_t *)(*(_QWORD *)&v547 + 8);
            *(_QWORD *)(*(_QWORD *)&v547 + 16) = 0;
            **(_QWORD **)&v547 = &off_24CA04BD0;
            *(_QWORD *)(*(_QWORD *)&v547 + 24) = &off_24CA00428;
            *(_BYTE *)(*(_QWORD *)&v547 + 32) = 1;
            *(_DWORD *)object = 2;
            v554 = vmulq_f64(v551, (float64x2_t)0);
            v555 = vmlaq_f64(vmlaq_f64(v554, (float64x2_t)0, v550), (float64x2_t)vdupq_n_s64(0x4202A05F20000000uLL), v548);
            v556 = vmlaq_f64(vmlaq_n_f64(v554, v550, v1500), (float64x2_t)0, v548);
            v557 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v551, v1508.f64[0]), (float64x2_t)0, v550), (float64x2_t)0, v548);
            *(float64x2_t *)&object[8] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, *(double *)v1454.i64), v556, v549), v555, v1456);
            v548.f64[0] = vmulq_f64(v552, (float64x2_t)0).f64[0];
            v558 = v548.f64[0] + v552.f64[1] * 0.0 + v1459 * 1.0e10;
            v548.f64[0] = v548.f64[0] + v552.f64[1] * v1500 + v1459 * 0.0;
            v550.f64[0] = vmulq_f64(v552, v1508).f64[0] + v552.f64[1] * 0.0 + v1459 * 0.0;
            *(double *)&object[24] = v550.f64[0] * *(double *)v1454.i64 + v548.f64[0] * v549 + v558 * v1456;
            *(_OWORD *)&object[64] = v1676;
            *(_OWORD *)&object[80] = v1677;
            *(_OWORD *)&object[96] = v1678;
            *(_OWORD *)&object[112] = v1679;
            *(_OWORD *)&object[32] = v1674;
            *(_OWORD *)&object[48] = v1675;
            *(float64x2_t *)&object[128] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, *(double *)v1461.i64), v556, v550.f64[1]), v555, v1464);
            *(_OWORD *)&object[184] = v1670;
            *(_OWORD *)&object[200] = v1671;
            *(_OWORD *)&object[216] = v1672;
            *(_OWORD *)&object[232] = v1673;
            *(_OWORD *)&object[152] = v1668;
            *(_OWORD *)&object[168] = v1669;
            *(float64x2_t *)&object[248] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v557, *(double *)v1458.i64), v556, v552.f64[1]), v555, v1459);
            *(double *)&object[144] = v550.f64[0] * *(double *)v1461.i64 + v548.f64[0] * v550.f64[1] + v558 * v1464;
            *(double *)&v1681 = v550.f64[0] * *(double *)v1458.i64 + v548.f64[0] * v552.f64[1] + v558 * v1459;
            v1685 = v1663;
            *(float64x2_t *)v1684 = v1662[2];
            *(float64x2_t *)v1683 = v1662[1];
            v1682 = v1662[0];
            *(_QWORD *)&v1689 = v1667;
            v1688 = v1666;
            v1687 = v1665;
            v1686 = v1664;
            *((double *)&v1689 + 1) = v528;
            v1693 = v1657;
            v1692 = v1656;
            v1691 = *(_OWORD *)v1655;
            v1690 = *(_OWORD *)v1654;
            *(_QWORD *)&v1697 = v1661;
            v1696 = v1660;
            v1695 = v1659;
            v1694 = v1658;
            *((double *)&v1697 + 1) = v529;
            v1701 = v1649;
            v1700 = v1648;
            v1699 = v1647;
            v1698 = v1646;
            v1705 = v1653;
            v1704 = v1652;
            v1703 = v1651;
            v1702 = v1650;
            v1706 = v530;
            v1710 = v1641;
            v1709 = v1640;
            v1708 = v1639;
            v1707 = v1638;
            v1714 = v1645;
            v1713 = v1644;
            v1712 = v1643;
            v1711 = v1642;
            v1715 = v531;
            v1719 = v1633;
            v1718 = v1632;
            v1717 = v1631;
            v1716 = v1630;
            v1723 = v1637;
            v1722 = v1636;
            v1721 = v1635;
            v1720 = v1634;
            v1724 = v532;
            v1728 = v1625;
            v1727 = v1624;
            v1726 = v1623;
            v1725 = v1622;
            v1732 = v1629;
            v1731 = v1628;
            v1730 = v1627;
            v1729 = v1626;
            v1733 = v533;
            v1737 = v1617;
            v1736 = v1616;
            v1735 = v1615;
            v1734 = v1614;
            v1741 = v1621;
            v1740 = v1620;
            v1739 = v1619;
            v1738 = v1618;
            v1742 = v534;
            v1746 = v1609;
            v1745 = v1608;
            v1744 = v1607;
            v1743 = v1606;
            v1750 = v1613;
            v1749 = v1612;
            v1748 = v1611;
            v1747 = v1610;
            v1751 = v1467;
            v1755 = v1601;
            v1754 = v1600;
            v1753 = v1599;
            v1752 = v1598;
            v1759 = v1605;
            v1758 = v1604;
            v1757 = v1603;
            v1756 = v1602;
            v1760 = v1470;
            v1764 = v1593;
            v1763 = v1592;
            v1762 = v1591;
            v1761 = v1590;
            v1768 = v1597;
            v1767 = v1596;
            v1766 = v1595;
            v1765 = v1594;
            v1769 = v1475;
            v1773 = v1585;
            v1772 = v1584;
            v1771 = v1583;
            v1770 = v1582;
            v1777 = v1589;
            v1776 = v1588;
            v1775 = v1587;
            v1774 = v1586;
            v1778 = v1482;
            v1782 = v1577;
            v1781 = v1576;
            v1780 = v1575;
            v1779 = v1574;
            v1786 = v1581;
            v1785 = v1580;
            v1784 = v1579;
            v1783 = v1578;
            v1787 = v1491;
            v559 = sub_20E8BE940();
            *(_DWORD *)object = v559 != 0;
            *(_BYTE *)(*(_QWORD *)&v547 + 32) = v559 == 0;
            if (v559)
            {
              memset_pattern16((void *)(*(_QWORD *)&v547 + 40), &unk_210315390, 0x708uLL);
            }
            else
            {
              v1554[0] = (double *)&object[8];
              sub_20F4D52BC(*(_QWORD *)&v547 + 40, v1554);
            }
            *(_BYTE *)(*(_QWORD *)&v547 + 1840) = 0;
            *((_QWORD *)&v1552 + 1) = *(_QWORD *)&v547 + 24;
            *(double *)&v1553 = v547;
            v655 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1514 + 8) + 48) + 40);
            *(_OWORD *)&object[144] = *(_OWORD *)&v1557[112];
            *(_OWORD *)&object[160] = v1558;
            *(_OWORD *)&object[80] = *(_OWORD *)&v1557[48];
            *(_OWORD *)&object[96] = *(_OWORD *)&v1557[64];
            *(_OWORD *)&object[128] = *(_OWORD *)&v1557[96];
            *(_OWORD *)&object[112] = *(_OWORD *)&v1557[80];
            *(_OWORD *)&object[16] = *(_OWORD *)v1556;
            *(_OWORD *)&object[32] = *(_OWORD *)v1557;
            *(_OWORD *)&object[64] = *(_OWORD *)&v1557[32];
            *(_OWORD *)&object[48] = *(_OWORD *)&v1557[16];
            *(_QWORD *)object = 0;
            *(_QWORD *)&object[176] = v1559;
            *(_QWORD *)&object[184] = *(_QWORD *)&v547 + 24;
            *(double *)&object[192] = v547;
            do
              v656 = __ldxr(v553);
            while (__stxr(v656 + 1, v553));
            *(_QWORD *)&v1552 = v655 | (v655 << 32);
            v1551 = 0;
            v1550 = 0;
            v1554[1] = 0;
            v1554[0] = 0;
            if ((sub_20FBAE870(v1514 + 5168, (unint64_t *)object, &v1552, 0, 0, v560) & 1) != 0)
            {
              *(_BYTE *)(v1514 + 7828) = 0;
              *(_DWORD *)(v1514 + 7824) = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 930, (uint64_t)"ret.second", 10, (uint64_t)"Prior factor should be added.", 29, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v657 = *(std::__shared_weak_count **)&object[192];
            if (*(_QWORD *)&object[192])
            {
              v658 = (unint64_t *)(*(_QWORD *)&object[192] + 8);
              do
                v659 = __ldaxr(v658);
              while (__stlxr(v659 - 1, v658));
              if (!v659)
              {
                ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
                std::__shared_weak_count::__release_weak(v657);
              }
            }
            v660 = *(double *)&v1553;
            if (*(double *)&v1553 == 0.0)
              goto LABEL_464;
            v661 = (unint64_t *)(v1553 + 8);
            do
              v662 = __ldaxr(v661);
            while (__stlxr(v662 - 1, v661));
          }
          else
          {
            v640 = *(_QWORD *)(v526 + 48);
            v641 = *(_QWORD *)(v640 + 16);
            v642 = *(_QWORD *)(v640 + 40);
            v643 = *(_OWORD *)(v640 + 24);
            v644 = *(_QWORD *)(v640 + 64);
            v645 = *(_OWORD *)(v640 + 48);
            *(_OWORD *)object = *(_OWORD *)v640;
            *(_OWORD *)&object[24] = v643;
            *(_QWORD *)&object[16] = v641;
            *(_QWORD *)&object[40] = v642;
            *(_OWORD *)&object[48] = v645;
            *(_QWORD *)&object[64] = v644;
            sub_20F1B6B0C((float64x2_t *)object);
            *(_OWORD *)&v1557[16] = *(_OWORD *)&object[32];
            *(_OWORD *)&v1557[32] = *(_OWORD *)&object[48];
            *(_OWORD *)v1557 = *(_OWORD *)&object[16];
            *(_OWORD *)v1556 = *(_OWORD *)object;
            v1558 = *(_OWORD *)(v640 + 72);
            *(_QWORD *)&v1559 = *(_QWORD *)(v640 + 88);
            v646 = *(_OWORD *)(v640 + 96);
            v647 = *(_QWORD *)(v640 + 136);
            *(_QWORD *)&v1557[48] = *(_QWORD *)&object[64];
            *(_QWORD *)&v1557[72] = v647;
            v648 = *(_QWORD *)(v640 + 112);
            *(_OWORD *)&v1557[80] = v646;
            *(_OWORD *)&v1557[56] = *(_OWORD *)(v640 + 120);
            v649 = *(_OWORD *)(v640 + 144);
            v650 = *(_QWORD *)(v640 + 160);
            *(_QWORD *)&v1557[96] = v648;
            *(_QWORD *)&v1557[120] = v650;
            *(_OWORD *)&v1557[104] = v649;
            v651 = operator new(0x738uLL);
            v651[1] = 0;
            v652 = v651 + 1;
            v651[2] = 0;
            *v651 = &off_24CA04BD0;
            memset(&object[16], 0, 120);
            memset(&object[144], 0, 120);
            v1682 = 0u;
            *(_OWORD *)v1683 = 0u;
            *(_OWORD *)v1684 = 0u;
            v1685 = 0u;
            v1686 = 0u;
            v1687 = 0u;
            v1688 = 0u;
            *(_QWORD *)&v1689 = 0;
            *(_QWORD *)&v1697 = 0;
            v1696 = 0u;
            v1695 = 0u;
            v1694 = 0u;
            v1693 = 0u;
            v1692 = 0u;
            v1691 = 0u;
            v1690 = 0u;
            v1698 = 0u;
            v1699 = 0u;
            v1700 = 0u;
            v1701 = 0u;
            v1702 = 0u;
            v1703 = 0u;
            v1704 = 0u;
            v1705 = 0;
            v1707 = 0u;
            v1708 = 0u;
            v1709 = 0u;
            v1710 = 0u;
            v1711 = 0u;
            v1712 = 0u;
            v1713 = 0u;
            v1714 = 0;
            v1723 = 0;
            v1722 = 0u;
            v1721 = 0u;
            v1720 = 0u;
            v1719 = 0u;
            v1718 = 0u;
            v1717 = 0u;
            v1716 = 0u;
            v1732 = 0;
            v1731 = 0u;
            v1730 = 0u;
            v1729 = 0u;
            v1728 = 0u;
            v1727 = 0u;
            v1726 = 0u;
            v1725 = 0u;
            v1741 = 0;
            v1740 = 0u;
            v1739 = 0u;
            v1738 = 0u;
            v1737 = 0u;
            v1736 = 0u;
            v1735 = 0u;
            v1734 = 0u;
            v1750 = 0;
            v1749 = 0u;
            v1748 = 0u;
            v1747 = 0u;
            v1746 = 0u;
            v1745 = 0u;
            v1744 = 0u;
            v1743 = 0u;
            v1759 = 0;
            v1758 = 0u;
            v1757 = 0u;
            v1756 = 0u;
            v1755 = 0u;
            v1754 = 0u;
            v1753 = 0u;
            v1752 = 0u;
            v1768 = 0;
            v1767 = 0u;
            v1766 = 0u;
            v1765 = 0u;
            v1764 = 0u;
            v1763 = 0u;
            v1762 = 0u;
            v1761 = 0u;
            v1777 = 0;
            v1776 = 0u;
            v1775 = 0u;
            v1774 = 0u;
            v1773 = 0u;
            v1772 = 0u;
            v1771 = 0u;
            v1770 = 0u;
            v1786 = 0;
            v1785 = 0u;
            v1784 = 0u;
            v1783 = 0u;
            v1782 = 0u;
            v1781 = 0u;
            v1780 = 0u;
            v1779 = 0u;
            *((_BYTE *)v651 + 32) = 1;
            v651[3] = &off_24CA00428;
            *(_DWORD *)object = 2;
            *(float64_t *)&object[8] = v1508.f64[0];
            *(double *)&object[136] = v1500;
            *(double *)&v1681 = v527;
            *((double *)&v1689 + 1) = v528;
            *((double *)&v1697 + 1) = v529;
            v1706 = v530;
            v1715 = v531;
            v1724 = v532;
            v1733 = v533;
            v1742 = v534;
            v1751 = v1467;
            v1760 = v1470;
            v1769 = v1475;
            v1778 = v1482;
            v1787 = v1491;
            v653 = sub_20E8BE940();
            *(_DWORD *)object = v653 != 0;
            *((_BYTE *)v651 + 32) = v653 == 0;
            if (v653)
            {
              memset_pattern16(v651 + 5, &unk_210315390, 0x708uLL);
            }
            else
            {
              *(_QWORD *)&v1662[0].f64[0] = &object[8];
              sub_20F4D52BC((uint64_t)(v651 + 5), (double **)v1662);
            }
            *((_BYTE *)v651 + 1840) = 0;
            v1654[0] = v651 + 3;
            v1654[1] = v651;
            v1070 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1514 + 8) + 48) + 40);
            *(_OWORD *)&object[144] = *(_OWORD *)&v1557[112];
            *(_OWORD *)&object[160] = v1558;
            *(_OWORD *)&object[80] = *(_OWORD *)&v1557[48];
            *(_OWORD *)&object[96] = *(_OWORD *)&v1557[64];
            *(_OWORD *)&object[128] = *(_OWORD *)&v1557[96];
            *(_OWORD *)&object[112] = *(_OWORD *)&v1557[80];
            *(_OWORD *)&object[16] = *(_OWORD *)v1556;
            *(_OWORD *)&object[32] = *(_OWORD *)v1557;
            *(_OWORD *)&object[64] = *(_OWORD *)&v1557[32];
            *(_OWORD *)&object[48] = *(_OWORD *)&v1557[16];
            *(_QWORD *)object = 0;
            *(_QWORD *)&object[176] = v1559;
            *(_QWORD *)&object[184] = v651 + 3;
            *(_QWORD *)&object[192] = v651;
            do
              v1071 = __ldxr(v652);
            while (__stxr(v1071 + 1, v652));
            *(_QWORD *)&v1638 = v1070 | (v1070 << 32);
            v1646 = 0uLL;
            v1662[0] = 0uLL;
            if ((sub_20FBAE870(v1514 + 5168, (unint64_t *)object, &v1638, 0, 0, v654) & 1) != 0)
            {
              *(_BYTE *)(v1514 + 7828) = 0;
              *(_DWORD *)(v1514 + 7824) = 0;
            }
            v1072 = *(std::__shared_weak_count **)&object[192];
            if (*(_QWORD *)&object[192])
            {
              v1073 = (unint64_t *)(*(_QWORD *)&object[192] + 8);
              do
                v1074 = __ldaxr(v1073);
              while (__stlxr(v1074 - 1, v1073));
              if (!v1074)
              {
                ((void (*)(std::__shared_weak_count *))v1072->__on_zero_shared)(v1072);
                std::__shared_weak_count::__release_weak(v1072);
              }
            }
            v660 = *(double *)&v1654[1];
            if (!v1654[1])
              goto LABEL_464;
            v1075 = (unint64_t *)((char *)v1654[1] + 8);
            do
              v662 = __ldaxr(v1075);
            while (__stlxr(v662 - 1, v1075));
          }
          goto LABEL_1300;
        }
        v576 = *(_QWORD *)(v526 + 48);
        v431.f64[0] = *(float64_t *)(v576 + 16);
        v1492 = v431;
        v431.f64[0] = *(float64_t *)(v576 + 40);
        v1483 = (int64x2_t)v431;
        _D8 = *(double *)(v576 + 64);
        v1471 = *(int64x2_t *)v576;
        v1476 = *(int64x2_t *)(v576 + 48);
        v1468 = *(double *)(v576 + 88);
        v1462 = *(int64x2_t *)(v576 + 24);
        v1465 = *(float64x2_t *)(v576 + 72);
        v578 = (char *)operator new(0x58uLL);
        v580 = v578;
        *((_QWORD *)v578 + 1) = 0;
        v581 = (unint64_t *)(v578 + 8);
        *((_QWORD *)v578 + 2) = 0;
        *((_QWORD *)v578 + 3) = &off_24CA01718;
        v582 = v578 + 24;
        *(_QWORD *)v578 = &off_24CA016C8;
        v578[32] = 1;
        if (v1508.f64[0] >= 1.0e-15
          && (*((double *)v578 + 5) = sqrt(v1508.f64[0]), v1500 >= 1.0e-15)
          && (*((double *)v578 + 6) = sqrt(v1500), v527 >= 1.0e-15)
          && (*((double *)v578 + 7) = sqrt(v527), v528 >= 1.0e-15)
          && (*((double *)v578 + 8) = sqrt(v528), v529 >= 1.0e-15)
          && (*((double *)v578 + 9) = sqrt(v529), v530 >= 1.0e-15))
        {
          *((double *)v578 + 10) = sqrt(v530);
          v578[32] = 1;
          *(_QWORD *)&v1662[0].f64[0] = v578 + 24;
          *(_QWORD *)&v1662[0].f64[1] = v578;
          v584 = v1514;
          v585 = *(_QWORD *)(v1514 + 8);
          if (!*(_QWORD *)(v585 + 64))
          {
LABEL_570:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 968, (uint64_t)"!this->viobadata_ref_.state_set->empty()", 40, (uint64_t)"First VIOState must exist to add the prior.", 43, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v584 = v1514;
            v585 = *(_QWORD *)(v1514 + 8);
          }
        }
        else
        {
          v578[32] = 0;
          v583 = vdupq_n_s64(0x7FF8000000000000uLL);
          *(int64x2_t *)(v578 + 40) = v583;
          *(int64x2_t *)(v578 + 56) = v583;
          *(int64x2_t *)(v578 + 72) = v583;
          *(_QWORD *)&v1662[0].f64[0] = v578 + 24;
          *(_QWORD *)&v1662[0].f64[1] = v578;
          v584 = v1514;
          v585 = *(_QWORD *)(v1514 + 8);
          if (!*(_QWORD *)(v585 + 64))
            goto LABEL_570;
        }
        v586 = (float64x2_t)vzip1q_s64(v1471, v1462);
        v587 = (float64x2_t)vzip2q_s64(v1471, v1462);
        _D17 = v1483.i64[0];
        _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v586, v1465.f64[0]), v587, v1465, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1492, v1483), v1468);
        _Q18 = (float64x2_t)v1476;
        _D5 = v1465.f64[1];
        v592 = vnegq_f64(_Q2);
        v593 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v587.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v587, 1), 8uLL);
        __asm { FMLA            D3, D5, V18.D[1] }
        v595 = (float64x2_t)vzip1q_s64(v1471, v593);
        _Q16 = vmulq_f64(v1492, v592);
        _D3 = _D3 + _D8 * v1468;
        v598 = (float64x2_t)vzip2q_s64((int64x2_t)v586, v593);
        *(_QWORD *)&_Q18.f64[1] = vdupq_laneq_s64(v1476, 1).u64[0];
        __asm
        {
          FMLS            D16, D17, V2.D[1]
          FMLS            D16, D8, V3.D[0]
        }
        v599 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v595, v592.f64[0]), v598, _Q2, 1), _Q18, _D3, 0));
        v600 = vextq_s8((int8x16_t)v595, (int8x16_t)v595, 8uLL).u64[0];
        v601 = vextq_s8((int8x16_t)v598, (int8x16_t)v598, 8uLL).u64[0];
        *(_QWORD *)&v602 = v1476.i64[0];
        v603 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
        v604 = vextq_s8(v599, v599, 8uLL).u64[0];
        v605 = *(_OWORD *)&vnegq_f64(_Q16);
        v606 = *(_QWORD *)(v585 + 48);
        v607 = *(_QWORD *)(v584 + 6264);
        if (v607 == *(_QWORD *)(v584 + 6256))
          v608 = 0;
        else
          v608 = (*(_DWORD *)(v607 - 272) + 1);
        v663 = *(_DWORD *)(v606 + 40);
        *(_QWORD *)object = v608;
        *(_QWORD *)&v595.f64[1] = v600;
        *(float64x2_t *)&object[16] = v595;
        *(_QWORD *)&v598.f64[1] = v601;
        *(float64_t *)&object[32] = v1492.f64[0];
        *(_QWORD *)&object[56] = v1483.i64[0];
        *(float64x2_t *)&object[40] = v598;
        *((_QWORD *)&v602 + 1) = v603;
        *(_OWORD *)&object[64] = v602;
        *(double *)&object[80] = _D8;
        *(_QWORD *)&object[104] = v605;
        v599.i64[1] = v604;
        *(int8x16_t *)&object[88] = v599;
        *(_QWORD *)&object[112] = v582;
        *(_QWORD *)&object[120] = v580;
        do
          v664 = __ldxr(v581);
        while (__stxr(v664 + 1, v581));
        LODWORD(v1646) = v663;
        v1654[1] = 0;
        v1654[0] = 0;
        v1556[1] = 0;
        v1556[0] = 0;
        if ((sub_20FBAFAA8(v584 + 5168, (__int128 *)object, &v1646, 0, 0, v579) & 1) != 0)
        {
          *(_BYTE *)(v1514 + 7828) = 0;
          *(_DWORD *)(v1514 + 7824) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 988, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v665 = *(std::__shared_weak_count **)&object[120];
        if (*(_QWORD *)&object[120])
        {
          v666 = (unint64_t *)(*(_QWORD *)&object[120] + 8);
          do
            v667 = __ldaxr(v666);
          while (__stlxr(v667 - 1, v666));
          if (!v667)
          {
            ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
            std::__shared_weak_count::__release_weak(v665);
          }
        }
        v660 = v1662[0].f64[1];
        if (!*(_QWORD *)&v1662[0].f64[1])
          goto LABEL_464;
        v668 = (unint64_t *)(*(_QWORD *)&v1662[0].f64[1] + 8);
        do
          v662 = __ldaxr(v668);
        while (__stlxr(v662 - 1, v668));
LABEL_1300:
        if (!v662)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v660 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v660));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v660);
        }
        goto LABEL_464;
      }
    }
  }
  v1488 = *(unsigned __int8 *)(v1513 + 11664);
  v1480 = *(unsigned __int8 *)(v1513 + 11672);
  v271 = *(_QWORD *)v1514;
  if (*(_QWORD *)v1514)
  {
    if (*(_BYTE *)(v1514 + 1317))
    {
      v272 = *(double *)v271;
      v273 = *(_QWORD *)(v271 + 8);
      v274 = *(double *)(v271 + 16);
      v275 = *(_QWORD *)(v271 + 24);
      v1662[0] = *(float64x2_t *)(v271 + 32);
      v1662[1].f64[0] = *(float64_t *)(v271 + 48);
      v276 = *(_QWORD *)(v271 + 56);
      *(_OWORD *)v1654 = *(_OWORD *)(v271 + 64);
      v1655[0] = *(void **)(v271 + 80);
      v277 = *(_OWORD *)(v271 + 88);
      *(_QWORD *)&v1647 = *(_QWORD *)(v271 + 104);
      v1646 = v277;
      v278 = *(_OWORD *)(v271 + 112);
      *(_QWORD *)&v1639 = *(_QWORD *)(v271 + 128);
      v1638 = v278;
      v279 = *(_OWORD *)(v271 + 136);
      *(_QWORD *)&v1631 = *(_QWORD *)(v271 + 152);
      v1630 = v279;
      v280 = *(_OWORD *)(v271 + 160);
      v281 = *(_OWORD *)(v271 + 176);
      v282 = *(_OWORD *)(v271 + 192);
      v283 = *(_OWORD *)(v271 + 208);
      *(_QWORD *)&object[64] = *(_QWORD *)(v271 + 224);
      *(_OWORD *)&object[48] = v283;
      *(_OWORD *)&object[32] = v282;
      *(_OWORD *)object = v280;
      *(_OWORD *)&object[16] = v281;
      v34 = *(_OWORD *)(v271 + 232);
      v35 = *(_OWORD *)(v271 + 248);
      v36 = *(int64x2_t *)(v271 + 264);
      v37 = *(int64x2_t *)(v271 + 280);
      *(_QWORD *)&v1557[48] = *(_QWORD *)(v271 + 296);
      *(int64x2_t *)&v1557[32] = v37;
      *(int64x2_t *)&v1557[16] = v36;
      v36.i64[0] = *(_QWORD *)(v1514 + 1320);
      *(double *)(v1514 + 176) = v272 * *(double *)v36.i64;
      *(_OWORD *)v1556 = v34;
      *(_OWORD *)v1557 = v35;
      v284 = v274 * *(double *)(v1514 + 1328);
      *(_QWORD *)(v1514 + 184) = v273;
      *(double *)(v1514 + 192) = v284;
      *(_QWORD *)(v1514 + 200) = v275;
      *(float64x2_t *)(v1514 + 208) = v1662[0];
      *(float64_t *)(v1514 + 224) = v1662[1].f64[0];
      *(_QWORD *)(v1514 + 232) = v276;
      v285 = *(_OWORD *)v1654;
      *(void **)(v1514 + 256) = v1655[0];
      *(_OWORD *)(v1514 + 240) = v285;
      v286 = v1646;
      *(_QWORD *)(v1514 + 280) = v1647;
      *(_OWORD *)(v1514 + 264) = v286;
      v287 = v1638;
      *(_QWORD *)(v1514 + 304) = v1639;
      *(_OWORD *)(v1514 + 288) = v287;
      v288 = v1630;
      *(_QWORD *)(v1514 + 328) = v1631;
      *(_OWORD *)(v1514 + 312) = v288;
      v289 = *(_OWORD *)object;
      v290 = *(_OWORD *)&object[16];
      v291 = *(_OWORD *)&object[32];
      v33 = *(_OWORD *)&object[48];
      *(_QWORD *)(v1514 + 400) = *(_QWORD *)&object[64];
      *(_OWORD *)(v1514 + 368) = v291;
      *(_OWORD *)(v1514 + 384) = v33;
      *(_OWORD *)(v1514 + 336) = v289;
      *(_OWORD *)(v1514 + 352) = v290;
      v31 = *(float64x2_t *)v1557;
      *(_OWORD *)(v1514 + 408) = *(_OWORD *)v1556;
      v246 = *(_OWORD *)&v1557[16];
      v32 = *(_OWORD *)&v1557[32];
      *(_QWORD *)(v1514 + 472) = *(_QWORD *)&v1557[48];
      *(_OWORD *)(v1514 + 440) = v246;
      *(_OWORD *)(v1514 + 456) = v32;
      *(float64x2_t *)(v1514 + 424) = v31;
    }
    else
    {
      v324 = *(_OWORD *)(v271 + 16);
      *(_OWORD *)(v1514 + 176) = *(_OWORD *)v271;
      *(_OWORD *)(v1514 + 192) = v324;
      v325 = *(_OWORD *)(v271 + 32);
      *(_QWORD *)(v1514 + 224) = *(_QWORD *)(v271 + 48);
      *(_OWORD *)(v1514 + 208) = v325;
      *(_QWORD *)(v1514 + 232) = *(_QWORD *)(v271 + 56);
      v326 = *(_OWORD *)(v271 + 64);
      *(_QWORD *)(v1514 + 256) = *(_QWORD *)(v271 + 80);
      *(_OWORD *)(v1514 + 240) = v326;
      v327 = *(_OWORD *)(v271 + 88);
      *(_QWORD *)(v1514 + 280) = *(_QWORD *)(v271 + 104);
      *(_OWORD *)(v1514 + 264) = v327;
      v328 = *(_OWORD *)(v271 + 112);
      *(_QWORD *)(v1514 + 304) = *(_QWORD *)(v271 + 128);
      *(_OWORD *)(v1514 + 288) = v328;
      v329 = *(_OWORD *)(v271 + 136);
      *(_QWORD *)(v1514 + 328) = *(_QWORD *)(v271 + 152);
      *(_OWORD *)(v1514 + 312) = v329;
      v331 = *(_OWORD *)(v271 + 192);
      v330 = *(_OWORD *)(v271 + 208);
      v332 = *(_OWORD *)(v271 + 176);
      *(_QWORD *)(v1514 + 400) = *(_QWORD *)(v271 + 224);
      *(_OWORD *)(v1514 + 368) = v331;
      *(_OWORD *)(v1514 + 384) = v330;
      *(_OWORD *)(v1514 + 352) = v332;
      *(_OWORD *)(v1514 + 336) = *(_OWORD *)(v271 + 160);
      v333 = *(_OWORD *)(v271 + 264);
      v31 = *(float64x2_t *)(v271 + 280);
      v334 = *(_QWORD *)(v271 + 296);
      v32 = *(_OWORD *)(v271 + 248);
      *(_OWORD *)(v1514 + 424) = v32;
      *(_QWORD *)(v1514 + 472) = v334;
      *(_OWORD *)(v1514 + 440) = v333;
      *(float64x2_t *)(v1514 + 456) = v31;
      v246 = *(_OWORD *)(v271 + 232);
      *(_OWORD *)(v1514 + 408) = v246;
    }
  }
  *(_QWORD *)(v1514 + 6728) = v1514 + 3152;
  *(_QWORD *)(v1514 + 6736) = *(_QWORD *)(v1514 + 8);
  if (*(_BYTE *)(v1514 + 2146))
    v335 = *(_QWORD *)(v1514 + 120);
  else
    v335 = 0;
  if (*(_BYTE *)(v1514 + 2146))
    v336 = v1514 + 176;
  else
    v336 = 0;
  *(_QWORD *)(v1514 + 6712) = v335;
  *(_QWORD *)(v1514 + 6720) = v336;
  sub_20FC45984(v1514, *(double *)&v246, v31.f64[0], *(double *)&v32, *(double *)&v33, *(double *)&v34, *(double *)&v35, v36, v37);
  v342 = *(_QWORD *)(v1514 + 8);
  v343 = *(_QWORD **)(v342 + 48);
  v344 = (_QWORD *)(v342 + 56);
  if (v343 != (_QWORD *)(v342 + 56))
  {
    v345 = *(_DWORD *)(v342 + 64);
    v9 = (unint64_t)"did_add_state";
    do
    {
      v346 = *((_DWORD *)v343 + 10);
      v347 = *(char **)(v1514 + 5176);
      v348 = *(char **)(v1514 + 5184);
      if (v348 != v347)
      {
        v349 = (v348 - v347) >> 4;
        do
        {
          v350 = v349 >> 1;
          v351 = &v347[16 * (v349 >> 1)];
          v353 = *(_DWORD *)v351;
          v352 = v351 + 16;
          v349 += ~(v349 >> 1);
          if (v353 < v346)
            v347 = v352;
          else
            v349 = v350;
        }
        while (v349);
      }
      if (v347 == v348 || *(_DWORD *)v347 != v346)
      {
        object[0] = 0;
        object[32] = 0;
        if (*((_QWORD *)&v1546 + 1))
        {
          v354 = 48 * *((_QWORD *)&v1546 + 1);
          v355 = *((_QWORD *)&v1545 + 1);
          while (*(_DWORD *)v355 != v346)
          {
            v355 += 48;
            v354 -= 48;
            if (!v354)
              goto LABEL_291;
          }
        }
        else
        {
          v355 = *((_QWORD *)&v1545 + 1);
        }
        if (v355 != *((_QWORD *)&v1545 + 1) + 48 * *((_QWORD *)&v1546 + 1))
        {
          v1495 = *(float64x2_t *)(v355 + 32);
          v1503 = *(float64x2_t *)(v355 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v1503), (int32x4_t)vcgtzq_f64(v1495))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1873;
          }
          v338 = vmulq_f64(v1503, *(float64x2_t *)(v1514 + 176));
          v339 = v1495.f64[0];
          v337 = (int64x2_t)vmulq_f64(v1495, *(float64x2_t *)(v1514 + 192));
          *(int64x2_t *)&object[16] = v337;
          *(float64x2_t *)object = v338;
          object[32] = 1;
        }
LABEL_291:
        if ((sub_20FC46568(v1514, v343[4], v343[5], v1512 < v345, v337, v338.f64[0], v339, v340, v341) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1109, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1873;
        }
      }
      v356 = (_QWORD *)v343[1];
      if (v356)
      {
        do
        {
          v357 = v356;
          v356 = (_QWORD *)*v356;
        }
        while (v356);
      }
      else
      {
        do
        {
          v357 = (_QWORD *)v343[2];
          _ZF = *v357 == (_QWORD)v343;
          v343 = v357;
        }
        while (!_ZF);
      }
      v343 = v357;
    }
    while (v357 != v344);
  }
  if (*(_BYTE *)(v1514 + 2144))
  {
    v358 = v1514;
    v1504 = *(unsigned int *)(v1514 + 1928);
    if ((_DWORD)v1504)
    {
      if (v1504 > *(_DWORD *)(v1514 + 1920)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1930, (uint64_t)"max_slam_point_tracks <= parameters_.ba_config.max_num_optimized_tracks", 71, (uint64_t)"Persistent SLAM landmarks should not be larger the maximum optimized tracks", 75, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1873;
      }
      v359 = sub_20F92289C(v1514 + 5168, 0);
      v358 = v1514;
      *(_DWORD *)(v1514 + 2184) = v359;
      v360 = *(uint64_t **)(v1514 + 24);
      v361 = *(uint64_t **)(v1514 + 32);
      if (v360 != v361)
      {
        v362 = *(_QWORD *)(v1514 + 6648);
        if (v362 == *(_QWORD *)(v1514 + 6640))
          v363 = 0;
        else
          v363 = *(_DWORD *)(v362 - 176) + 1;
        LODWORD(v1662[0].f64[0]) = v363;
        do
        {
          if (*(_DWORD *)(*v360 + 520) == 2)
          {
            v609 = *(_DWORD *)(*v360 + 32);
            v610 = *(char **)(v1514 + 5560);
            v611 = *(char **)(v1514 + 5568);
            if (v611 != v610)
            {
              v612 = (v611 - v610) >> 4;
              do
              {
                v613 = v612 >> 1;
                v614 = &v610[16 * (v612 >> 1)];
                v616 = *(_DWORD *)v614;
                v615 = v614 + 16;
                v612 += ~(v612 >> 1);
                if (v616 < v609)
                  v610 = v615;
                else
                  v612 = v613;
              }
              while (v612);
            }
            if ((v610 == v611 || *(_DWORD *)v610 != v609)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1742, (uint64_t)"linear_system_.template findVariable<SLAMLandmarkVariableType>(landmarkID) != linear_system_.template endVariable<SLAMLandmarkVariableType>()", 141, (uint64_t)"The persistent track is not associated to a SLAM landmark variable", 66, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1873;
            }
            v617 = *(_QWORD **)(v1514 + 8);
            v618 = v617 + 7;
            v619 = v617[7];
            if (v619)
            {
              do
              {
                v620 = v619;
                v619 = *(_QWORD *)(v619 + 8);
              }
              while (v619);
            }
            else
            {
              do
              {
                v620 = v618[2];
                _ZF = *(_QWORD *)v620 == (_QWORD)v618;
                v618 = (_QWORD *)v620;
              }
              while (_ZF);
            }
            v9 = *(unsigned int *)(v620 + 40) | v9 & 0xFFFFFFFF00000000;
            v621 = v617[39];
            if (v621)
            {
              v622 = 0;
              v623 = *(_QWORD *)(v620 + 32);
              do
              {
                v624 = (_QWORD *)v617[37];
                if (v622 < 0)
                {
                  v628 = v622;
                  do
                  {
                    v629 = (_QWORD *)*v624;
                    if (*v624)
                    {
                      do
                      {
                        v627 = v629;
                        v629 = (_QWORD *)v629[1];
                      }
                      while (v629);
                    }
                    else
                    {
                      do
                      {
                        v627 = (_QWORD *)v624[2];
                        _ZF = *v627 == (_QWORD)v624;
                        v624 = v627;
                      }
                      while (_ZF);
                    }
                    v624 = v627;
                    _CF = __CFADD__(v628++, 1);
                  }
                  while (!_CF);
                }
                else if (v622)
                {
                  v625 = v622;
                  do
                  {
                    v626 = (_QWORD *)v624[1];
                    if (v626)
                    {
                      do
                      {
                        v627 = v626;
                        v626 = (_QWORD *)*v626;
                      }
                      while (v626);
                    }
                    else
                    {
                      do
                      {
                        v627 = (_QWORD *)v624[2];
                        _ZF = *v627 == (_QWORD)v624;
                        v624 = v627;
                      }
                      while (!_ZF);
                    }
                    v624 = v627;
                    v422 = v625-- <= 1;
                  }
                  while (!v422);
                }
                else
                {
                  v627 = (_QWORD *)v617[37];
                }
                v630 = *((_DWORD *)v627 + 8);
                *(_QWORD *)object = v623;
                *(_QWORD *)&object[8] = v9;
                *(_DWORD *)&object[16] = v630;
                sub_20FC512F0(v1514, (uint64_t)object, *v360, (unsigned int *)v1662);
                ++v622;
              }
              while (v622 != v621);
            }
          }
          ++v360;
        }
        while (v360 != v361);
        if (!(v1480 | v1488))
        {
          v631 = *(unsigned int *)(v1514 + 2184);
          v632 = (uint64_t)(*(_QWORD *)(v1514 + 32) - *(_QWORD *)(v1514 + 24)) >> 3;
          if ((_DWORD)v1504 != (_DWORD)v631 && v632 != v631)
          {
            v634 = *(_QWORD *)(v1514 + 2024);
            v635 = *(_DWORD *)(v1514 + 2100);
            v636 = *(_BYTE *)(v1514 + 2116);
            v637 = *(_OWORD *)(v1514 + 2008);
            *(_OWORD *)object = *(_OWORD *)(v1514 + 1992);
            *(_OWORD *)&object[16] = v637;
            *(_QWORD *)&object[32] = v634;
            *(_DWORD *)&object[40] = 15;
            *(_DWORD *)&object[44] = v635;
            object[48] = v636;
            *(_QWORD *)&object[56] = 0;
            sub_20FC4F9E0((uint64_t)v1556, (uint64_t)object, (_QWORD *)v1514, v632 - 1);
            if (v1504 - v631 >= (unint64_t)(v632 - v631))
              v638 = v632 - v631;
            else
              v638 = v1504 - v631;
            for (j = (char *)v1556[1]; j != v1556[0]; j -= 16)
            {
              if ((sub_20FC50730(v1514, *((_DWORD *)j - 2), (unsigned int *)v1662) & 1) != 0)
              {
                ++*(_DWORD *)(v1514 + 2184);
                if (!--v638)
                  goto LABEL_666;
              }
            }
            for (k = *(_QWORD *)&v1557[16]; k != *(_QWORD *)&v1557[8]; k -= 16)
            {
              if (sub_20FC50730(v1514, *(_DWORD *)(k - 8), (unsigned int *)v1662))
              {
                ++*(_DWORD *)(v1514 + 2184);
                if (!--v638)
                  break;
              }
            }
LABEL_666:
            if (*(_QWORD *)&v1557[8])
            {
              *(_QWORD *)&v1557[16] = *(_QWORD *)&v1557[8];
              operator delete(*(void **)&v1557[8]);
            }
            if (v1556[0])
            {
              v1556[1] = v1556[0];
              operator delete(v1556[0]);
            }
          }
        }
        v358 = v1514;
      }
    }
    sub_20FC47D94(v358);
  }
  sub_20FC48730((_QWORD *)v1514, *(unsigned int *)(v1514 + 2152), *(unsigned int *)(v1514 + 1920));
  sub_20FC42C7C(v1513, v1514);
  v670 = *(_QWORD *)(v1513 + 8216);
  v671 = *(unsigned __int8 *)(v670 + 1720);
  v672 = v670 + 864;
  if (!*(_BYTE *)(v670 + 1720))
    v672 = v670 + 24;
  if (*(_BYTE *)(v672 + 417) && *(_BYTE *)(v1513 + 7682) && !*(_BYTE *)(v1513 + 7683))
  {
    sub_20FC5DCB8(v1514, 0, *(double *)(v672 + 112));
    v670 = *(_QWORD *)(v1513 + 8216);
    v671 = *(unsigned __int8 *)(v670 + 1720);
    v673 = v670 + 864;
    if (!*(_BYTE *)(v670 + 1720))
      v673 = v670 + 24;
    if (*(_BYTE *)(v673 + 419))
      goto LABEL_680;
  }
  else
  {
    v673 = v670 + 864;
    if (!*(_BYTE *)(v670 + 1720))
      v673 = v670 + 24;
    if (*(_BYTE *)(v673 + 419))
    {
LABEL_680:
      if (*(_BYTE *)(v1513 + 7684) && !*(_BYTE *)(v1513 + 7685))
      {
        sub_20FC5DCB8(v1514, 1u, *(double *)(v673 + 120));
        v670 = *(_QWORD *)(v1513 + 8216);
        v671 = *(unsigned __int8 *)(v670 + 1720);
      }
    }
  }
  v674 = v670 + 864;
  v675 = v670 + 24;
  if (v671)
    v675 = v674;
  if (*(_BYTE *)(v675 + 433) || *(_BYTE *)(v675 + 432) && *(_BYTE *)(v1513 + 7686) && !*(_BYTE *)(v1513 + 7687))
  {
    *(double *)object = 1.0 / *(double *)(v675 + 256);
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    *(_QWORD *)&object[16] = *(_QWORD *)object;
    *(_QWORD *)&object[24] = *(_QWORD *)object;
    object[32] = 1;
    sub_20FC5D9C4(v1514, (uint64_t)object);
  }
  else
  {
    object[0] = 0;
    object[32] = 0;
    sub_20FC5D9C4(v1514, (uint64_t)object);
  }
  v676 = *(_QWORD *)(v1513 + 8216);
  v677 = *(unsigned __int8 *)(v676 + 1720);
  v678 = v676 + 864;
  v679 = v676 + 24;
  if (v677)
    v679 = v678;
  if (*(_BYTE *)(v679 + 434))
  {
    v680 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    v681 = vmulq_f64(*(float64x2_t *)(v679 + 264), v680);
    v680.f64[0] = *(double *)(v679 + 280) * 0.0174532925;
    __asm { FMOV            V2.2D, #1.0 }
    *(float64x2_t *)object = vdivq_f64(_Q2, v681);
    *(_QWORD *)&object[16] = *(_OWORD *)&vdivq_f64(_Q2, v680);
    object[24] = 1;
  }
  else
  {
    object[0] = 0;
    object[24] = 0;
  }
  sub_20FC5DB28(v1514, (uint64_t)object);
  v683 = *(_BYTE *)(v1513 + 7688);
  *(_BYTE *)(v1513 + 7683) = *(_BYTE *)(v1513 + 7682);
  *(_BYTE *)(v1513 + 7685) = *(_BYTE *)(v1513 + 7684);
  *(_BYTE *)(v1513 + 7687) = *(_BYTE *)(v1513 + 7686);
  *(_BYTE *)(v1513 + 7689) = v683;
  v684 = *(_QWORD **)(v1514 + 65584);
  v685 = (_QWORD *)(v1514 + 65592);
  if (v684 != (_QWORD *)(v1514 + 65592))
  {
    v686 = *(_QWORD *)(v1514 + 8);
    v689 = *(uint64_t **)(v686 + 56);
    v687 = (uint64_t *)(v686 + 56);
    v688 = v689;
    if (v689)
    {
      v690 = *(char **)(v1514 + 5176);
      v691 = *(char **)(v1514 + 5184);
      v692 = *(char **)(v1514 + 5272);
      v693 = *(char **)(v1514 + 5280);
      do
      {
        v694 = *((_DWORD *)v684 + 8);
        v695 = v687;
        v696 = v688;
        do
        {
          while (v696[4])
          {
            v695 = v696;
            v696 = (uint64_t *)*v696;
            if (!v696)
              goto LABEL_710;
          }
          if (*((_DWORD *)v696 + 10) < v694)
            ++v696;
          else
            v695 = v696;
          v696 = (uint64_t *)*v696;
        }
        while (v696);
LABEL_710:
        if (v695 != v687 && !v695[4] && *((_DWORD *)v695 + 10) <= v694)
        {
          v697 = (double *)v695[6];
          if (v697)
          {
            v698 = *((double *)v684 + 5) == *v697;
            if (*((double *)v684 + 6) != v697[1])
              v698 = 0;
            if (*((double *)v684 + 7) != v697[2])
              v698 = 0;
            if (*((double *)v684 + 8) != v697[3])
              v698 = 0;
            if (*((double *)v684 + 9) != v697[4])
              v698 = 0;
            if (*((double *)v684 + 10) != v697[5])
              v698 = 0;
            if (*((double *)v684 + 11) != v697[6])
              v698 = 0;
            if (*((double *)v684 + 12) != v697[7])
              v698 = 0;
            if (*((double *)v684 + 13) != v697[8])
              v698 = 0;
            if (*((double *)v684 + 14) != v697[9])
              v698 = 0;
            if (*((double *)v684 + 15) != v697[10])
              v698 = 0;
            if (*((double *)v684 + 16) != v697[11])
              v698 = 0;
            if (*((double *)v684 + 17) != v697[12])
              v698 = 0;
            if (*((double *)v684 + 18) != v697[13])
              v698 = 0;
            if (*((double *)v684 + 19) != v697[14])
              v698 = 0;
            if (*((double *)v684 + 20) != v697[15])
              v698 = 0;
            if (*((double *)v684 + 21) != v697[16])
              v698 = 0;
            if (*((double *)v684 + 22) != v697[17])
              v698 = 0;
            if (*((double *)v684 + 23) != v697[18])
              v698 = 0;
            if (*((double *)v684 + 24) != v697[19])
              v698 = 0;
            v699 = *((double *)v684 + 25) == v697[20] && v698;
            v700 = v690;
            if (v691 != v690)
            {
              v700 = v690;
              v701 = (v691 - v690) >> 4;
              do
              {
                v702 = v701 >> 1;
                v703 = (unsigned int *)&v700[16 * (v701 >> 1)];
                v705 = *v703;
                v704 = (char *)(v703 + 4);
                v701 += ~(v701 >> 1);
                if (v705 < v694)
                  v700 = v704;
                else
                  v701 = v702;
              }
              while (v701);
            }
            if (v700 == v691 || *(_DWORD *)v700 != v694)
              v700 = v691;
            v706 = v692;
            if (v693 != v692)
            {
              v706 = v692;
              v707 = (v693 - v692) >> 4;
              do
              {
                v708 = v707 >> 1;
                v709 = (unsigned int *)&v706[16 * (v707 >> 1)];
                v711 = *v709;
                v710 = (char *)(v709 + 4);
                v707 += ~(v707 >> 1);
                if (v711 < v694)
                  v706 = v710;
                else
                  v707 = v708;
              }
              while (v707);
            }
            if (v706 == v693 || *(_DWORD *)v706 != v694)
              v706 = v693;
            if (v700 != v691)
              *(_BYTE *)(*((_QWORD *)v700 + 1) + 128) = v699;
            if (v706 != v693)
              *(_BYTE *)(*((_QWORD *)v706 + 1) + 104) = v699;
          }
        }
        v712 = (_QWORD *)v684[1];
        if (v712)
        {
          do
          {
            v713 = v712;
            v712 = (_QWORD *)*v712;
          }
          while (v712);
        }
        else
        {
          do
          {
            v713 = (_QWORD *)v684[2];
            _ZF = *v713 == (_QWORD)v684;
            v684 = v713;
          }
          while (!_ZF);
        }
        v684 = v713;
      }
      while (v713 != v685);
    }
    else
    {
      do
      {
        v714 = (_QWORD *)v684[1];
        if (v714)
        {
          do
          {
            v715 = v714;
            v714 = (_QWORD *)*v714;
          }
          while (v714);
        }
        else
        {
          do
          {
            v715 = (_QWORD *)v684[2];
            _ZF = *v715 == (_QWORD)v684;
            v684 = v715;
          }
          while (!_ZF);
        }
        v684 = v715;
      }
      while (v715 != v685);
    }
  }
  v716 = *(_QWORD *)(v1514 + 5656);
  v717 = *(_QWORD *)(v1514 + 5664);
  if (v717 == v716 || *(_DWORD *)v716)
  {
    v718 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v716 = v717;
    if (v718)
LABEL_1873:
      abort();
  }
  *(_BYTE *)(*(_QWORD *)(v716 + 8) + 40) = *(double *)(*(_QWORD *)(v1514 + 8) + 72) == *(double *)(v1514 + 63896);
  v719 = *(_QWORD **)(v1514 + 65608);
  if (v719 != (_QWORD *)(v1514 + 65616))
  {
    while (1)
    {
      v720 = *((unsigned int *)v719 + 8);
      v721 = *(char **)(v1514 + 6352);
      v722 = *(char **)(v1514 + 6360);
      if (v722 != v721)
      {
        v723 = 0x2F028E0D4911E25DLL * ((v722 - v721) >> 4);
        do
        {
          v724 = v723 >> 1;
          v725 = (unint64_t *)&v721[8016 * (v723 >> 1)];
          v726 = *v725;
          v727 = (char *)(v725 + 1002);
          v723 += ~(v723 >> 1);
          if (v726 < v720)
            v721 = v727;
          else
            v723 = v724;
        }
        while (v723);
      }
      if (v722 == v721 || *(_QWORD *)v721 != v720)
        goto LABEL_810;
      v728 = v721 + 5848;
      if (!sub_20FC04C2C((_QWORD *)v1514, *((_DWORD *)v719 + 946), *((_DWORD *)v719 + 947)))
        break;
      v729 = v721[7680];
      memcpy(v721 + 3928, v719 + 5, 0x708uLL);
      v730 = *((_OWORD *)v719 + 116);
      v731 = *((_OWORD *)v719 + 117);
      v732 = *((_OWORD *)v719 + 118);
      *((_OWORD *)v721 + 358) = *((_OWORD *)v719 + 115);
      *((_OWORD *)v721 + 361) = v732;
      *((_OWORD *)v721 + 360) = v731;
      *((_OWORD *)v721 + 359) = v730;
      v733 = *((_OWORD *)v719 + 120);
      v734 = *((_OWORD *)v719 + 121);
      v735 = v719[244];
      *((_OWORD *)v721 + 362) = *((_OWORD *)v719 + 119);
      *((_QWORD *)v721 + 730) = v735;
      *((_OWORD *)v721 + 364) = v734;
      *((_OWORD *)v721 + 363) = v733;
      if (v729)
      {
        *v728 = *((_BYTE *)v719 + 1960);
        v721[5864] = *((_BYTE *)v719 + 1976);
        memcpy(v721 + 5872, v719 + 248, 0x710uLL);
        v736 = (_QWORD *)v719[1];
        if (v736)
          goto LABEL_811;
      }
      else
      {
        *v728 = *((_BYTE *)v719 + 1960);
        v721[5864] = *((_BYTE *)v719 + 1976);
        *((_QWORD *)v721 + 732) = &off_24CA00398;
        memcpy(v721 + 5872, v719 + 248, 0x708uLL);
        v738 = v719[473];
        v721[7680] = 1;
        *((_QWORD *)v721 + 959) = v738;
        v736 = (_QWORD *)v719[1];
        if (v736)
        {
          do
          {
LABEL_811:
            v737 = v736;
            v736 = (_QWORD *)*v736;
          }
          while (v736);
          goto LABEL_795;
        }
      }
      do
      {
LABEL_814:
        v737 = (_QWORD *)v719[2];
        _ZF = *v737 == (_QWORD)v719;
        v719 = v737;
      }
      while (!_ZF);
LABEL_795:
      v719 = v737;
      if (v737 == (_QWORD *)(v1514 + 65616))
        goto LABEL_817;
    }
    if (v721[7680])
      v721[7680] = 0;
LABEL_810:
    v736 = (_QWORD *)v719[1];
    if (v736)
      goto LABEL_811;
    goto LABEL_814;
  }
LABEL_817:
  *(_BYTE *)(v1514 + 2149) = v1478;
  v739 = *(_QWORD *)(v1513 + 8216);
  v740 = *(unsigned __int8 *)(v739 + 1720);
  v741 = v739 + 864;
  if (!*(_BYTE *)(v739 + 1720))
    v741 = v739 + 24;
  if (*(_BYTE *)(v741 + 426) && *(_BYTE *)(v741 + 428))
  {
    sub_20F873394(v1513);
    v739 = *(_QWORD *)(v1513 + 8216);
    v740 = *(unsigned __int8 *)(v739 + 1720);
  }
  v742 = v739 + 864;
  v743 = v739 + 24;
  if (v740)
    v743 = v742;
  if (*(_BYTE *)(v743 + 416) && *(_BYTE *)(v743 + 429))
    sub_20F8734C8(v1513);
  if (!*(_BYTE *)(v1457 + 1618))
    goto LABEL_1388;
  if (!*(_BYTE *)(v1514 + 1844))
  {
    sub_20F9B2A4C(&v1646);
    if (**(int **)(v1646 + 56) > 2)
      goto LABEL_1388;
    v753 = *(unsigned __int8 *)(v1646 + 72);
    v754 = sub_20E8C31DC(v1646, "OSLogSurrogateAppender", 1, 0);
    v755 = v754;
    if (!v753 && !v754)
      goto LABEL_1388;
    v1556[0] = &v1646;
    v1556[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v1557 = std::chrono::system_clock::now();
    *(_DWORD *)&v1557[8] = 2;
    *(_QWORD *)&v1557[16] = "unknown file";
    *(_DWORD *)&v1557[24] = 759;
    *(_QWORD *)&v1557[48] = 0;
    *(_QWORD *)&v1557[32] = "unknown function";
    *(_QWORD *)&v1557[40] = 0;
    v756 = *(_QWORD *)v1556[0];
    v757 = *(_QWORD *)v1556[0] + 16;
    if (*(char *)(*(_QWORD *)v1556[0] + 39) < 0)
    {
      v759 = *(const char **)(v756 + 16);
      v758 = *(_QWORD *)(v756 + 24);
    }
    else
    {
      v758 = *(unsigned __int8 *)(*(_QWORD *)v1556[0] + 39);
      v759 = (const char *)(*(_QWORD *)v1556[0] + 16);
    }
    v1020 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1020 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v1021 = byte_254A4A4F8;
    else
      v1021 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1022 = byte_254A4A4F8[23];
    else
      v1022 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v1021, v759);
    v1023 = &object[8];
    if (v1022 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1022 >= 0x17)
    {
      v1024 = v755;
      v1025 = v759;
      v1026 = v756;
      v1027 = v753;
      v1028 = v757;
      v1029 = (v1022 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1022 | 7) != 0x17)
        v1029 = v1022 | 7;
      v1030 = v1029 + 1;
      v1023 = operator new(v1029 + 1);
      *(_QWORD *)&object[24] = v1030 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v1023;
      *(_QWORD *)&object[16] = v1022;
      v757 = v1028;
      v753 = v1027;
      v756 = v1026;
      v759 = v1025;
      v755 = v1024;
    }
    else
    {
      object[31] = v1022;
      if (!v1022)
      {
LABEL_1218:
        v1023[v1022] = 0;
        object[32] = 1;
        v1031 = &object[40];
        if (v758 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v758 >= 0x17)
        {
          v1032 = (v758 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v758 | 7) != 0x17)
            v1032 = v758 | 7;
          v1033 = v1032 + 1;
          v1031 = operator new(v1032 + 1);
          *(_QWORD *)&object[56] = v1033 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v1031;
          *(_QWORD *)&object[48] = v758;
        }
        else
        {
          object[63] = v758;
          if (!v758)
            goto LABEL_1226;
        }
        memmove(v1031, v759, v758);
LABEL_1226:
        v1031[v758] = 0;
        object[64] = 1;
        v1034 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v755 && *(_QWORD *)(v755 + 24))
        {
          v1035 = _os_log_pack_size();
          v1036 = (std::__shared_weak_count_vtbl *)operator new(v1035, (std::align_val_t)8uLL);
          v1037 = (std::__shared_weak_count *)operator new();
          v1038 = v1037;
          v1037->__shared_owners_ = 0;
          v1039 = (unint64_t *)&v1037->__shared_owners_;
          v1037->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v1037->__shared_weak_owners_ = 0;
          v1037[1].__vftable = v1036;
          *(_QWORD *)object = v1036;
          *(_QWORD *)&object[8] = v1036;
          *(_QWORD *)&object[16] = v1037;
          do
            v1040 = __ldxr(v1039);
          while (__stxr(v1040 + 1, v1039));
          memset(&object[24], 0, 24);
          do
            v1041 = __ldaxr(v1039);
          while (__stlxr(v1041 - 1, v1039));
          if (!v1041)
          {
            ((void (*)(std::__shared_weak_count *))v1037->__on_zero_shared)(v1037);
            std::__shared_weak_count::__release_weak(v1038);
          }
          v1042 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v1043 = operator new();
          v1044 = *(unsigned __int8 *)(v756 + 39);
          if ((v1044 & 0x80u) == 0)
            v1045 = v757;
          else
            v1045 = *(_QWORD *)(v756 + 16);
          if ((v1044 & 0x80u) != 0)
            v1044 = *(_QWORD *)(v756 + 24);
          *(_QWORD *)v1043 = v1042;
          *(_OWORD *)(v1043 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v1043 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v1043 + 40) = v1045;
          *(_QWORD *)(v1043 + 48) = v1044;
          *(_BYTE *)(v1043 + 56) = 2;
          v1654[0] = 0;
          *(_QWORD *)&v1662[0].f64[0] = v1043;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v755 + 24) + 40))(*(_QWORD *)(v755 + 24), v1662);
          v1046 = v1662[0].f64[0];
          v1662[0].f64[0] = 0.0;
          if (v1046 != 0.0)
          {
            v1047 = *(std::__shared_weak_count **)(*(_QWORD *)&v1046 + 32);
            if (v1047)
            {
              v1048 = (unint64_t *)&v1047->__shared_owners_;
              do
                v1049 = __ldaxr(v1048);
              while (__stlxr(v1049 - 1, v1048));
              if (!v1049)
              {
                ((void (*)(std::__shared_weak_count *))v1047->__on_zero_shared)(v1047);
                std::__shared_weak_count::__release_weak(v1047);
              }
            }
            v1050 = *(std::__shared_weak_count **)(*(_QWORD *)&v1046 + 16);
            if (v1050)
            {
              v1051 = (unint64_t *)&v1050->__shared_owners_;
              do
                v1052 = __ldaxr(v1051);
              while (__stlxr(v1052 - 1, v1051));
              if (!v1052)
              {
                ((void (*)(std::__shared_weak_count *))v1050->__on_zero_shared)(v1050);
                std::__shared_weak_count::__release_weak(v1050);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v1046, 0x10F0C40B62ED6C6);
            v1053 = v1654[0];
            v1654[0] = 0;
            if (v1053)
            {
              v1054 = (std::__shared_weak_count *)*((_QWORD *)v1053 + 4);
              if (v1054)
              {
                v1055 = (unint64_t *)&v1054->__shared_owners_;
                do
                  v1056 = __ldaxr(v1055);
                while (__stlxr(v1056 - 1, v1055));
                if (!v1056)
                {
                  ((void (*)(std::__shared_weak_count *))v1054->__on_zero_shared)(v1054);
                  std::__shared_weak_count::__release_weak(v1054);
                }
              }
              v1057 = (std::__shared_weak_count *)*((_QWORD *)v1053 + 2);
              if (v1057)
              {
                v1058 = (unint64_t *)&v1057->__shared_owners_;
                do
                  v1059 = __ldaxr(v1058);
                while (__stlxr(v1059 - 1, v1058));
                if (!v1059)
                {
                  ((void (*)(std::__shared_weak_count *))v1057->__on_zero_shared)(v1057);
                  std::__shared_weak_count::__release_weak(v1057);
                }
              }
              MEMORY[0x212BC6398](v1053, 0x10F0C40B62ED6C6);
            }
          }
          v1060 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v1061 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v1062 = __ldaxr(v1061);
            while (__stlxr(v1062 - 1, v1061));
            if (!v1062)
            {
              ((void (*)(std::__shared_weak_count *))v1060->__on_zero_shared)(v1060);
              std::__shared_weak_count::__release_weak(v1060);
            }
          }
          v1063 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v1064 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v1065 = __ldaxr(v1064);
            while (__stlxr(v1065 - 1, v1064));
            if (!v1065)
            {
              ((void (*)(std::__shared_weak_count *))v1063->__on_zero_shared)(v1063);
              std::__shared_weak_count::__release_weak(v1063);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1034, OS_LOG_TYPE_DEBUG);
          *(_WORD *)object = 0;
          v1066 = (void *)_os_log_send_and_compose_impl();
          if (v1066)
            free(v1066);
        }
        if (v753)
        {
          sub_20E8C003C((uint64_t)v1556, "Stationary factors are disabled");
          sub_20E863570((uint64_t)v1556);
        }
        sub_20E863570((uint64_t)v1556);
        v1067 = *(std::__shared_weak_count **)&v1557[48];
        if (!*(_QWORD *)&v1557[48])
          goto LABEL_1388;
        v1068 = (unint64_t *)(*(_QWORD *)&v1557[48] + 8);
        do
          v1069 = __ldaxr(v1068);
        while (__stlxr(v1069 - 1, v1068));
LABEL_1386:
        if (!v1069)
        {
          ((void (*)(std::__shared_weak_count *))v1067->__on_zero_shared)(v1067);
          std::__shared_weak_count::__release_weak(v1067);
        }
        goto LABEL_1388;
      }
    }
    memmove(v1023, v1021, v1022);
    goto LABEL_1218;
  }
  if (!v1501[1])
  {
    sub_20F9B2A4C(&v1646);
    if (**(int **)(v1646 + 56) > 2)
      goto LABEL_1388;
    v760 = *(unsigned __int8 *)(v1646 + 72);
    v761 = sub_20E8C31DC(v1646, "OSLogSurrogateAppender", 1, 0);
    v762 = v761;
    if (!v760 && !v761)
      goto LABEL_1388;
    v1556[0] = &v1646;
    v1556[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v1557 = std::chrono::system_clock::now();
    *(_DWORD *)&v1557[8] = 2;
    *(_QWORD *)&v1557[16] = "unknown file";
    *(_DWORD *)&v1557[24] = 765;
    *(_QWORD *)&v1557[48] = 0;
    *(_QWORD *)&v1557[32] = "unknown function";
    *(_QWORD *)&v1557[40] = 0;
    v763 = *(_QWORD *)v1556[0];
    v764 = *(_QWORD *)v1556[0] + 16;
    if (*(char *)(*(_QWORD *)v1556[0] + 39) < 0)
    {
      v766 = *(const char **)(v763 + 16);
      v765 = *(_QWORD *)(v763 + 24);
    }
    else
    {
      v765 = *(unsigned __int8 *)(*(_QWORD *)v1556[0] + 39);
      v766 = (const char *)(*(_QWORD *)v1556[0] + 16);
    }
    v1076 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1076 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v1077 = byte_254A4A4F8;
    else
      v1077 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1078 = byte_254A4A4F8[23];
    else
      v1078 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v1077, v766);
    v1079 = &object[8];
    if (v1078 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1078 >= 0x17)
    {
      v1080 = v762;
      v1081 = v766;
      v1082 = v763;
      v1083 = v760;
      v1084 = v764;
      v1085 = (v1078 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1078 | 7) != 0x17)
        v1085 = v1078 | 7;
      v1086 = v1085 + 1;
      v1079 = operator new(v1085 + 1);
      *(_QWORD *)&object[24] = v1086 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v1079;
      *(_QWORD *)&object[16] = v1078;
      v764 = v1084;
      v760 = v1083;
      v763 = v1082;
      v766 = v1081;
      v762 = v1080;
    }
    else
    {
      object[31] = v1078;
      if (!v1078)
      {
LABEL_1318:
        v1079[v1078] = 0;
        object[32] = 1;
        v1087 = &object[40];
        if (v765 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v765 >= 0x17)
        {
          v1088 = (v765 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v765 | 7) != 0x17)
            v1088 = v765 | 7;
          v1089 = v1088 + 1;
          v1087 = operator new(v1088 + 1);
          *(_QWORD *)&object[56] = v1089 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v1087;
          *(_QWORD *)&object[48] = v765;
        }
        else
        {
          object[63] = v765;
          if (!v765)
            goto LABEL_1326;
        }
        memmove(v1087, v766, v765);
LABEL_1326:
        v1087[v765] = 0;
        object[64] = 1;
        v1090 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v762 && *(_QWORD *)(v762 + 24))
        {
          v1091 = _os_log_pack_size();
          v1092 = (std::__shared_weak_count_vtbl *)operator new(v1091, (std::align_val_t)8uLL);
          v1093 = (std::__shared_weak_count *)operator new();
          v1094 = v1093;
          v1093->__shared_owners_ = 0;
          v1095 = (unint64_t *)&v1093->__shared_owners_;
          v1093->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v1093->__shared_weak_owners_ = 0;
          v1093[1].__vftable = v1092;
          *(_QWORD *)object = v1092;
          *(_QWORD *)&object[8] = v1092;
          *(_QWORD *)&object[16] = v1093;
          do
            v1096 = __ldxr(v1095);
          while (__stxr(v1096 + 1, v1095));
          memset(&object[24], 0, 24);
          do
            v1097 = __ldaxr(v1095);
          while (__stlxr(v1097 - 1, v1095));
          if (!v1097)
          {
            ((void (*)(std::__shared_weak_count *))v1093->__on_zero_shared)(v1093);
            std::__shared_weak_count::__release_weak(v1094);
          }
          v1098 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v1099 = operator new();
          v1100 = *(unsigned __int8 *)(v763 + 39);
          if ((v1100 & 0x80u) == 0)
            v1101 = v764;
          else
            v1101 = *(_QWORD *)(v763 + 16);
          if ((v1100 & 0x80u) != 0)
            v1100 = *(_QWORD *)(v763 + 24);
          *(_QWORD *)v1099 = v1098;
          *(_OWORD *)(v1099 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v1099 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v1099 + 40) = v1101;
          *(_QWORD *)(v1099 + 48) = v1100;
          *(_BYTE *)(v1099 + 56) = 2;
          v1654[0] = 0;
          *(_QWORD *)&v1662[0].f64[0] = v1099;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v762 + 24) + 40))(*(_QWORD *)(v762 + 24), v1662);
          v1102 = v1662[0].f64[0];
          v1662[0].f64[0] = 0.0;
          if (v1102 != 0.0)
          {
            v1103 = *(std::__shared_weak_count **)(*(_QWORD *)&v1102 + 32);
            if (v1103)
            {
              v1104 = (unint64_t *)&v1103->__shared_owners_;
              do
                v1105 = __ldaxr(v1104);
              while (__stlxr(v1105 - 1, v1104));
              if (!v1105)
              {
                ((void (*)(std::__shared_weak_count *))v1103->__on_zero_shared)(v1103);
                std::__shared_weak_count::__release_weak(v1103);
              }
            }
            v1106 = *(std::__shared_weak_count **)(*(_QWORD *)&v1102 + 16);
            if (v1106)
            {
              v1107 = (unint64_t *)&v1106->__shared_owners_;
              do
                v1108 = __ldaxr(v1107);
              while (__stlxr(v1108 - 1, v1107));
              if (!v1108)
              {
                ((void (*)(std::__shared_weak_count *))v1106->__on_zero_shared)(v1106);
                std::__shared_weak_count::__release_weak(v1106);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v1102, 0x10F0C40B62ED6C6);
            v1109 = v1654[0];
            v1654[0] = 0;
            if (v1109)
            {
              v1110 = (std::__shared_weak_count *)*((_QWORD *)v1109 + 4);
              if (v1110)
              {
                v1111 = (unint64_t *)&v1110->__shared_owners_;
                do
                  v1112 = __ldaxr(v1111);
                while (__stlxr(v1112 - 1, v1111));
                if (!v1112)
                {
                  ((void (*)(std::__shared_weak_count *))v1110->__on_zero_shared)(v1110);
                  std::__shared_weak_count::__release_weak(v1110);
                }
              }
              v1113 = (std::__shared_weak_count *)*((_QWORD *)v1109 + 2);
              if (v1113)
              {
                v1114 = (unint64_t *)&v1113->__shared_owners_;
                do
                  v1115 = __ldaxr(v1114);
                while (__stlxr(v1115 - 1, v1114));
                if (!v1115)
                {
                  ((void (*)(std::__shared_weak_count *))v1113->__on_zero_shared)(v1113);
                  std::__shared_weak_count::__release_weak(v1113);
                }
              }
              MEMORY[0x212BC6398](v1109, 0x10F0C40B62ED6C6);
            }
          }
          v1116 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v1117 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v1118 = __ldaxr(v1117);
            while (__stlxr(v1118 - 1, v1117));
            if (!v1118)
            {
              ((void (*)(std::__shared_weak_count *))v1116->__on_zero_shared)(v1116);
              std::__shared_weak_count::__release_weak(v1116);
            }
          }
          v1119 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v1120 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v1121 = __ldaxr(v1120);
            while (__stlxr(v1121 - 1, v1120));
            if (!v1121)
            {
              ((void (*)(std::__shared_weak_count *))v1119->__on_zero_shared)(v1119);
              std::__shared_weak_count::__release_weak(v1119);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1090, OS_LOG_TYPE_DEBUG);
          *(_WORD *)object = 0;
          v1122 = (void *)_os_log_send_and_compose_impl();
          if (v1122)
            free(v1122);
        }
        if (v760)
        {
          sub_20E8C003C((uint64_t)v1556, "No stationary constraints");
          sub_20E863570((uint64_t)v1556);
        }
        sub_20E863570((uint64_t)v1556);
        v1067 = *(std::__shared_weak_count **)&v1557[48];
        if (!*(_QWORD *)&v1557[48])
          goto LABEL_1388;
        v1123 = (unint64_t *)(*(_QWORD *)&v1557[48] + 8);
        do
          v1069 = __ldaxr(v1123);
        while (__stlxr(v1069 - 1, v1123));
        goto LABEL_1386;
      }
    }
    memmove(v1079, v1077, v1078);
    goto LABEL_1318;
  }
  v744 = (_QWORD *)(v1514 + 63824);
  v568.f64[0] = *(double *)(v1514 + 1384) * *(double *)(v1514 + 1384);
  v745 = *(double *)(v1514 + 1392);
  v746 = *(_QWORD *)(v1514 + 63864);
  if (!v746
    || (v567.n128_f64[0] = 1.0 / (*(double *)(v746 + 16) * *(double *)(v746 + 16)),
        v747 = vabdq_f64((float64x2_t)v567.n128_u64[0], (float64x2_t)*(unint64_t *)&v568.f64[0]),
        *(_QWORD *)&v748.f64[0] = *(_OWORD *)&vabdq_f64((float64x2_t)v567, v568),
        v748.f64[1] = NAN,
        v749 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v747, v748), v747), (float64x2_t)0),
        vmaxnmvq_f64(v749) > 2.22044605e-16))
  {
    v1509 = v568;
    v750 = operator new(0x30uLL);
    v750[1] = 0;
    v750[2] = 0;
    *v750 = &off_24CA04C20;
    v750[3] = &off_24CA04C70;
    v751 = (char *)(v750 + 3);
    if (v1509.f64[0] <= 1.0e-15)
    {
      v750[5] = 0x7FF8000000000000;
      *((_BYTE *)v750 + 32) = 0;
      v752 = *(std::__shared_weak_count **)(v1514 + 63872);
      *(_QWORD *)(v1514 + 63864) = v751;
      *(_QWORD *)(v1514 + 63872) = v750;
      if (!v752)
        goto LABEL_850;
    }
    else
    {
      v749.f64[1] = v1509.f64[1];
      v749.f64[0] = sqrt(v1509.f64[0]);
      *((double *)v750 + 5) = (1.0 / v749.f64[0] + 1.0 / v749.f64[0] + 1.0 / v749.f64[0]) / 3.0;
      *((_BYTE *)v750 + 32) = 1;
      v752 = *(std::__shared_weak_count **)(v1514 + 63872);
      *(_QWORD *)(v1514 + 63864) = v751;
      *(_QWORD *)(v1514 + 63872) = v750;
      if (!v752)
        goto LABEL_850;
    }
    v767 = (unint64_t *)&v752->__shared_owners_;
    do
      v768 = __ldaxr(v767);
    while (__stlxr(v768 - 1, v767));
    if (!v768)
    {
      ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
      std::__shared_weak_count::__release_weak(v752);
    }
  }
LABEL_850:
  v568.f64[0] = v745 * v745;
  v769 = *(_QWORD *)(v1514 + 63880);
  if (!v769
    || (v749.f64[0] = 1.0 / (*(double *)(v769 + 16) * *(double *)(v769 + 16)),
        v770 = vabdq_f64((float64x2_t)*(unint64_t *)&v749.f64[0], (float64x2_t)*(unint64_t *)&v568.f64[0]),
        *(_QWORD *)&v771.f64[0] = *(_OWORD *)&vabdq_f64(v749, v568),
        v771.f64[1] = NAN,
        vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v770, v771), v770), (float64x2_t)0)) > 2.22044605e-16))
  {
    v772 = operator new(0x30uLL);
    v772[1] = 0;
    v772[2] = 0;
    *v772 = &off_24CA04C20;
    v772[3] = &off_24CA04C70;
    v773 = (char *)(v772 + 3);
    if (v745 * v745 <= 1.0e-15)
    {
      v772[5] = 0x7FF8000000000000;
      *((_BYTE *)v772 + 32) = 0;
      v775 = *(std::__shared_weak_count **)(v1514 + 63888);
      *(_QWORD *)(v1514 + 63880) = v773;
      *(_QWORD *)(v1514 + 63888) = v772;
      if (!v775)
        goto LABEL_860;
    }
    else
    {
      v774 = sqrt(v745 * v745);
      *((double *)v772 + 5) = (1.0 / v774 + 1.0 / v774 + 1.0 / v774) / 3.0;
      *((_BYTE *)v772 + 32) = 1;
      v775 = *(std::__shared_weak_count **)(v1514 + 63888);
      *(_QWORD *)(v1514 + 63880) = v773;
      *(_QWORD *)(v1514 + 63888) = v772;
      if (!v775)
        goto LABEL_860;
    }
    v776 = (unint64_t *)&v775->__shared_owners_;
    do
      v777 = __ldaxr(v776);
    while (__stlxr(v777 - 1, v776));
    if (!v777)
    {
      ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
      std::__shared_weak_count::__release_weak(v775);
    }
  }
LABEL_860:
  v778 = v1501[1];
  if (v778)
  {
    v779 = 0;
    v780 = 0;
    v1453 = (int64x2_t *)(v1514 + 6744);
    v1493 = (_DWORD *)(v1514 + 7824);
    v1450 = (_QWORD *)(v1514 + 6416);
    v1446 = (_QWORD *)(v1514 + 6440);
    while (1)
    {
      if (((*(_QWORD *)(*v1501 + ((v779 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v779) & 1) == 0)
      {
        v779 = ++v780;
        goto LABEL_863;
      }
      v781 = *(unsigned int *)(*v1510 + 4 * v779);
      if ((v781 & 0x80000000) == 0)
        break;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 801, (uint64_t)"frameIDs[i] >= 0", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1873;
      }
      v781 = *(unsigned int *)(*v1510 + 4 * v779);
      v782 = (int8x8_t)v744[1];
      if (v782)
        goto LABEL_870;
LABEL_889:
      *(_QWORD *)object = v781;
      sub_20EDC9EA8((uint64_t)v744, (unint64_t *)object, object);
LABEL_890:
      v790 = (void *)v744[5];
      v791 = (unint64_t *)v744[6];
      *(_QWORD *)&v1622 = v790;
      *((_QWORD *)&v1622 + 1) = v791;
      if (v791)
      {
        v792 = v791 + 1;
        do
          v793 = __ldxr(v792);
        while (__stxr(v793 + 1, v792));
        v1655[0] = v790;
        v1655[1] = v791;
        do
          v794 = __ldxr(v792);
        while (__stxr(v794 + 1, v792));
      }
      else
      {
        v1655[0] = v790;
        v1655[1] = 0;
      }
      v1654[0] = (void *)v781;
      LOBYTE(v1656) = 1;
      v1614 = 0uLL;
      v1630 = 0uLL;
      v795 = *(unint64_t **)(v1514 + 6400);
      v796 = *(unint64_t **)(v1514 + 6408);
      if (v795 == v796)
      {
        v797 = *(double *)(v1514 + 6400);
      }
      else
      {
        v797 = *(double *)(v1514 + 6408);
        if (*(v796 - 18) >= v781)
        {
          v798 = 0x8E38E38E38E38E39 * (((char *)v796 - (char *)v795) >> 4);
          v799 = *(_QWORD **)(v1514 + 6400);
          do
          {
            v800 = v798 >> 1;
            v801 = &v799[18 * (v798 >> 1)];
            v803 = *v801;
            v802 = v801 + 18;
            v798 += ~(v798 >> 1);
            if (v803 < v781)
              v799 = v802;
            else
              v798 = v800;
          }
          while (v798);
          v797 = *(double *)(v1514 + 6408);
          if (v799 != v796)
          {
            v797 = *(double *)&v799;
            if (*v799 == v781)
              goto LABEL_949;
          }
        }
      }
      *(_OWORD *)v1556 = *(_OWORD *)v1654;
      *(_QWORD *)v1557 = v790;
      *(_QWORD *)&v1557[8] = v791;
      v1655[0] = 0;
      v1655[1] = 0;
      v804 = 1;
      v1557[16] = 1;
      memset(&v1557[96], 0, 17);
      *(_QWORD *)&v1557[24] = 0;
      *(_QWORD *)&v1557[80] = 0xBFF0000000000000;
      v1557[88] = 0;
      v805 = *(char **)(v1514 + 5272);
      v806 = *(char **)(v1514 + 5280);
      if (v806 == v805)
        goto LABEL_938;
      v807 = (v806 - v805) >> 4;
      do
      {
        v808 = v807 >> 1;
        v809 = (unsigned int *)&v805[16 * (v807 >> 1)];
        v811 = *v809;
        v810 = (char *)(v809 + 4);
        v807 += ~(v807 >> 1);
        if (v811 < v781)
          v805 = v810;
        else
          v807 = v808;
      }
      while (v807);
      if (v805 == v806 || *(_DWORD *)v805 != v781)
        goto LABEL_937;
      *(_QWORD *)&v1557[24] = *((_QWORD *)v805 + 1);
      v812 = *(_QWORD *)&v1557[24];
      ++*(_DWORD *)(*((_QWORD *)v805 + 1) + 8);
      if (!*(_BYTE *)(v812 + 20))
      {
        --*(_DWORD *)(v812 + 8);
        *(_QWORD *)&v1557[24] = 0;
LABEL_937:
        v804 = 1;
LABEL_938:
        v833 = *(std::__shared_weak_count **)&v1557[8];
        if (*(_QWORD *)&v1557[8])
          goto LABEL_939;
        goto LABEL_943;
      }
      *(_OWORD *)&object[8] = *(_OWORD *)v1556;
      *(_QWORD *)object = v781;
      *(_QWORD *)&object[24] = v790;
      *(_QWORD *)&object[32] = v791;
      *(_QWORD *)v1557 = 0;
      *(_QWORD *)&v1557[8] = 0;
      object[40] = 1;
      *(_QWORD *)&object[48] = v812;
      *(_OWORD *)&object[56] = *(_OWORD *)&v1557[32];
      *(_QWORD *)&object[72] = *(_QWORD *)&v1557[48];
      *(_OWORD *)&object[80] = *(_OWORD *)&v1557[56];
      *(_OWORD *)&object[96] = *(_OWORD *)&v1557[72];
      object[112] = v1557[88];
      memset(&object[120], 0, 17);
      *(_QWORD *)&v1557[96] = 0;
      *(_QWORD *)&v1557[104] = 0;
      if (v796 != *(unint64_t **)&v797 && **(_QWORD **)&v797 == v781)
        goto LABEL_1124;
      v1447 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4);
      if ((unint64_t)v796 >= *v1450)
      {
        v903 = 0x8E38E38E38E38E39 * (((char *)v796 - (char *)v795) >> 4) + 1;
        if (v903 > 0x1C71C71C71C71C7)
          sub_20E867F44();
        v904 = v780;
        v905 = v744;
        if (0x1C71C71C71C71C72 * ((uint64_t)(*v1450 - (_QWORD)v795) >> 4) > v903)
          v903 = 0x1C71C71C71C71C72 * ((uint64_t)(*v1450 - (_QWORD)v795) >> 4);
        if (0x8E38E38E38E38E39 * ((uint64_t)(*v1450 - (_QWORD)v795) >> 4) >= 0xE38E38E38E38E3)
          v906 = 0x1C71C71C71C71C7;
        else
          v906 = v903;
        *(_QWORD *)&v1662[2].f64[0] = v1514 + 6416;
        if (v906)
        {
          if (v906 > 0x1C71C71C71C71C7)
            sub_20E877A38();
          v907 = (char *)operator new(144 * v906);
        }
        else
        {
          v907 = 0;
        }
        *(_QWORD *)&v936 = &v907[16 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4)];
        *(_QWORD *)&v1662[0].f64[0] = v907;
        v1662[0].f64[1] = v936;
        v1662[1].f64[0] = v936;
        *(_QWORD *)&v1662[1].f64[1] = &v907[144 * v906];
        if (v1447 == v906)
        {
          v744 = v905;
          if ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) < 1)
          {
            if (v795 == *(unint64_t **)&v797)
              v941 = 1;
            else
              v941 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4);
            if (v941 > 0x1C71C71C71C71C7)
              sub_20E877A38();
            v780 = v904;
            v942 = (char *)operator new(144 * v941);
            *(_QWORD *)&v936 = &v942[144 * (v941 >> 2)];
            *(_QWORD *)&v1662[0].f64[0] = v942;
            v1662[0].f64[1] = v936;
            *(_QWORD *)&v1662[1].f64[1] = &v942[144 * v941];
            if (v907)
              operator delete(v907);
            v940 = v781;
            v939 = *(_QWORD *)&v936;
          }
          else
          {
            v937 = v1447 + 2;
            if (v1447 >= -1)
              v937 = v1447 + 1;
            v938 = v937 >> 1;
            v939 = sub_20F91EC44(*(uint64_t *)&v936, *(uint64_t *)&v936, *(_QWORD *)&v936 - 144 * (v937 >> 1));
            v780 = v904;
            *(_QWORD *)&v936 = *(_QWORD *)&v1662[0].f64[1] - 144 * v938;
            v1662[0].f64[1] = v936;
            v940 = *(_QWORD *)object;
          }
        }
        else
        {
          v940 = v781;
          v939 = (uint64_t)&v907[16 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4)];
          v744 = v905;
          v780 = v904;
        }
        *(_QWORD *)v939 = v940;
        *(_OWORD *)(v939 + 8) = *(_OWORD *)&object[8];
        *(_OWORD *)(v939 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *(_BYTE *)(v939 + 40) = object[40];
        *(_QWORD *)(v939 + 48) = *(_QWORD *)&object[48];
        *(_OWORD *)(v939 + 56) = *(_OWORD *)&object[56];
        *(_QWORD *)(v939 + 72) = *(_QWORD *)&object[72];
        v943 = *(_OWORD *)&object[80];
        *(_QWORD *)(v939 + 96) = *(_QWORD *)&object[96];
        *(_OWORD *)(v939 + 80) = v943;
        v944 = *(_QWORD *)&object[104];
        *(_BYTE *)(v939 + 112) = object[112];
        *(_QWORD *)(v939 + 104) = v944;
        *(_OWORD *)(v939 + 120) = *(_OWORD *)&object[120];
        *(_QWORD *)&object[120] = 0;
        *(_QWORD *)&object[128] = 0;
        *(_BYTE *)(v939 + 136) = object[136];
        *(_QWORD *)&v945 = v939 + 144;
        *(_QWORD *)&v1662[1].f64[0] = v939 + 144;
        v946 = *(_QWORD *)(v1514 + 6400);
        if (v946 != *(_QWORD *)&v797)
        {
          v947 = 0;
          do
          {
            v948 = *(_QWORD *)&v936 + v947;
            v949 = *(_QWORD *)&v797 + v947;
            *(_QWORD *)(v948 - 144) = *(_QWORD *)(*(_QWORD *)&v797 + v947 - 144);
            *(_OWORD *)(v948 - 136) = *(_OWORD *)(*(_QWORD *)&v797 + v947 - 136);
            *(_OWORD *)(v948 - 120) = *(_OWORD *)(*(_QWORD *)&v797 + v947 - 120);
            v950 = *(_BYTE *)(*(_QWORD *)&v797 + v947 - 104);
            *(_QWORD *)(v949 - 120) = 0;
            *(_QWORD *)(v949 - 112) = 0;
            *(_BYTE *)(v948 - 104) = v950;
            *(_QWORD *)(v948 - 96) = *(_QWORD *)(*(_QWORD *)&v797 + v947 - 96);
            v951 = *(_OWORD *)(*(_QWORD *)&v797 + v947 - 88);
            *(_QWORD *)(v948 - 72) = *(_QWORD *)(*(_QWORD *)&v797 + v947 - 72);
            *(_OWORD *)(v948 - 88) = v951;
            v952 = *(_OWORD *)(*(_QWORD *)&v797 + v947 - 64);
            *(_QWORD *)(v948 - 48) = *(_QWORD *)(*(_QWORD *)&v797 + v947 - 48);
            *(_OWORD *)(v948 - 64) = v952;
            v953 = *(_QWORD *)(*(_QWORD *)&v797 + v947 - 40);
            *(_BYTE *)(v948 - 32) = *(_BYTE *)(*(_QWORD *)&v797 + v947 - 32);
            *(_QWORD *)(v948 - 40) = v953;
            *(_OWORD *)(v948 - 24) = *(_OWORD *)(*(_QWORD *)&v797 + v947 - 24);
            *(_QWORD *)(v949 - 24) = 0;
            *(_QWORD *)(v949 - 16) = 0;
            *(_BYTE *)(v948 - 8) = *(_BYTE *)(*(_QWORD *)&v797 + v947 - 8);
            v947 -= 144;
          }
          while (*(_QWORD *)&v797 + v947 != v946);
          v945 = v1662[1].f64[0];
          *(_QWORD *)&v936 += v947;
        }
        v1662[0].f64[1] = v936;
        v954 = *(_QWORD *)(v1514 + 6408);
        if (v954 == *(_QWORD *)&v797)
        {
          v958 = (double *)v1514;
        }
        else
        {
          do
          {
            **(_QWORD **)&v945 = **(_QWORD **)&v797;
            *(_OWORD *)(*(_QWORD *)&v945 + 8) = *(_OWORD *)(*(_QWORD *)&v797 + 8);
            *(_OWORD *)(*(_QWORD *)&v945 + 24) = *(_OWORD *)(*(_QWORD *)&v797 + 24);
            *(_QWORD *)(*(_QWORD *)&v797 + 24) = 0;
            *(_QWORD *)(*(_QWORD *)&v797 + 32) = 0;
            *(_BYTE *)(*(_QWORD *)&v945 + 40) = *(_BYTE *)(*(_QWORD *)&v797 + 40);
            *(_QWORD *)(*(_QWORD *)&v945 + 48) = *(_QWORD *)(*(_QWORD *)&v797 + 48);
            v955 = *(_OWORD *)(*(_QWORD *)&v797 + 56);
            *(_QWORD *)(*(_QWORD *)&v945 + 72) = *(_QWORD *)(*(_QWORD *)&v797 + 72);
            *(_OWORD *)(*(_QWORD *)&v945 + 56) = v955;
            v956 = *(_OWORD *)(*(_QWORD *)&v797 + 80);
            *(_QWORD *)(*(_QWORD *)&v945 + 96) = *(_QWORD *)(*(_QWORD *)&v797 + 96);
            *(_OWORD *)(*(_QWORD *)&v945 + 80) = v956;
            v957 = *(_QWORD *)(*(_QWORD *)&v797 + 104);
            *(_BYTE *)(*(_QWORD *)&v945 + 112) = *(_BYTE *)(*(_QWORD *)&v797 + 112);
            *(_QWORD *)(*(_QWORD *)&v945 + 104) = v957;
            *(_OWORD *)(*(_QWORD *)&v945 + 120) = *(_OWORD *)(*(_QWORD *)&v797 + 120);
            *(_QWORD *)(*(_QWORD *)&v797 + 120) = 0;
            *(_QWORD *)(*(_QWORD *)&v797 + 128) = 0;
            *(_BYTE *)(*(_QWORD *)&v945 + 136) = *(_BYTE *)(*(_QWORD *)&v797 + 136);
            *(_QWORD *)&v945 += 144;
            *(_QWORD *)&v797 += 144;
          }
          while (*(_QWORD *)&v797 != v954);
          v936 = v1662[0].f64[1];
          v958 = (double *)v1514;
          v797 = *(double *)(v1514 + 6408);
        }
        v959 = v958[800];
        v958[800] = v936;
        v958[801] = v945;
        v960 = v958[802];
        v958[802] = v1662[1].f64[1];
        v1662[1].f64[1] = v960;
        v1662[0].f64[1] = v959;
        v1662[0].f64[0] = v959;
        if (*(_QWORD *)&v797 == *(_QWORD *)&v959)
        {
LABEL_1117:
          if (v797 != 0.0)
            operator delete(*(void **)&v797);
          goto LABEL_1119;
        }
        while (2)
        {
          *(_QWORD *)&v1662[1].f64[0] = *(_QWORD *)&v797 - 144;
          v961 = *(std::__shared_weak_count **)(*(_QWORD *)&v797 - 16);
          if (!v961)
            goto LABEL_1109;
          v962 = (unint64_t *)&v961->__shared_owners_;
          do
            v963 = __ldaxr(v962);
          while (__stlxr(v963 - 1, v962));
          if (!v963)
          {
            ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
            std::__shared_weak_count::__release_weak(v961);
            v964 = *(std::__shared_weak_count **)(*(_QWORD *)&v797 - 112);
            if (v964)
            {
LABEL_1110:
              v965 = (unint64_t *)&v964->__shared_owners_;
              do
                v966 = __ldaxr(v965);
              while (__stlxr(v966 - 1, v965));
              if (!v966)
              {
                ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
                std::__shared_weak_count::__release_weak(v964);
              }
            }
          }
          else
          {
LABEL_1109:
            v964 = *(std::__shared_weak_count **)(*(_QWORD *)&v797 - 112);
            if (v964)
              goto LABEL_1110;
          }
          v797 = v1662[1].f64[0];
          if (*(_QWORD *)&v1662[1].f64[0] == *(_QWORD *)&v959)
          {
            v797 = v1662[0].f64[0];
            goto LABEL_1117;
          }
          continue;
        }
      }
      if (*(unint64_t **)&v797 == v796)
      {
        *v796 = v781;
        v932 = &v795[2 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4)];
        *(_OWORD *)(v932 + 1) = *(_OWORD *)&object[8];
        v932[3] = (unint64_t)v790;
        v932[4] = (unint64_t)v791;
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *((_BYTE *)v932 + 40) = 1;
        v932[6] = v812;
        v933 = *(_OWORD *)&object[56];
        v932[9] = *(_QWORD *)&object[72];
        *(_OWORD *)(v932 + 7) = v933;
        v934 = *(_OWORD *)&object[80];
        v932[12] = *(_QWORD *)&object[96];
        *((_OWORD *)v932 + 5) = v934;
        v935 = *(_QWORD *)&object[104];
        *((_BYTE *)v932 + 112) = object[112];
        v932[13] = v935;
        v932[15] = 0;
        v932[16] = 0;
        *(_QWORD *)&object[120] = 0;
        *(_QWORD *)&object[128] = 0;
        *((_BYTE *)v932 + 136) = 0;
        *(_QWORD *)(v1514 + 6408) = v796 + 18;
      }
      else
      {
        v1442 = v780;
        v1443 = v744;
        v1638 = *(_OWORD *)v1556;
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        v1662[0] = *(float64x2_t *)&v1557[32];
        v1662[1].f64[0] = *(float64_t *)&v1557[48];
        v1646 = *(_OWORD *)&v1557[56];
        *(_QWORD *)&v1647 = *(_QWORD *)&v1557[72];
        BYTE8(v1590) = v1557[88];
        *(_QWORD *)&v1590 = *(_QWORD *)&v1557[80];
        v813 = v796 - 18;
        v814 = v796;
        v815 = v796 - 18;
        *(_QWORD *)&object[120] = 0;
        *(_QWORD *)&object[128] = 0;
        if ((unint64_t)v796 >= 0x90)
        {
          do
          {
            *v814 = *v815;
            *(_OWORD *)(v814 + 1) = *(_OWORD *)(v815 + 1);
            *(_OWORD *)(v814 + 3) = *(_OWORD *)(v815 + 3);
            v815[3] = 0;
            v815[4] = 0;
            *((_BYTE *)v814 + 40) = *((_BYTE *)v815 + 40);
            v814[6] = v815[6];
            v816 = *(_OWORD *)(v815 + 7);
            v814[9] = v815[9];
            *(_OWORD *)(v814 + 7) = v816;
            v817 = *((_OWORD *)v815 + 5);
            v814[12] = v815[12];
            *((_OWORD *)v814 + 5) = v817;
            v818 = v815[13];
            *((_BYTE *)v814 + 112) = *((_BYTE *)v815 + 112);
            v814[13] = v818;
            *(_OWORD *)(v814 + 15) = *(_OWORD *)(v815 + 15);
            v815[15] = 0;
            v815[16] = 0;
            *((_BYTE *)v814 + 136) = *((_BYTE *)v815 + 136);
            v814 += 18;
            v815 += 18;
          }
          while (v815 < v796);
        }
        v1441 = v812;
        *(_QWORD *)(v1514 + 6408) = v814;
        if (v796 != (unint64_t *)(*(_QWORD *)&v797 + 144))
        {
          v819 = v796 - 18;
          v820 = v796;
          do
          {
            v821 = *(v819 - 18);
            v819 -= 18;
            *(v820 - 18) = v821;
            v820 -= 18;
            *(_OWORD *)(v820 + 1) = *(_OWORD *)(v819 + 1);
            v822 = *(_OWORD *)(v819 + 3);
            v819[3] = 0;
            v819[4] = 0;
            v823 = (std::__shared_weak_count *)v820[4];
            *(_OWORD *)(v820 + 3) = v822;
            if (v823)
            {
              v824 = (unint64_t *)&v823->__shared_owners_;
              do
                v825 = __ldaxr(v824);
              while (__stlxr(v825 - 1, v824));
              if (!v825)
              {
                ((void (*)(std::__shared_weak_count *))v823->__on_zero_shared)(v823);
                std::__shared_weak_count::__release_weak(v823);
              }
            }
            *((_BYTE *)v796 - 104) = *((_BYTE *)v813 - 104);
            *(v796 - 12) = *(v813 - 12);
            v826 = *(_OWORD *)(v813 - 11);
            *(v796 - 9) = *(v813 - 9);
            *(_OWORD *)(v796 - 11) = v826;
            v827 = *((_OWORD *)v813 - 4);
            *(v796 - 6) = *(v813 - 6);
            *((_OWORD *)v796 - 4) = v827;
            v828 = *(v813 - 5);
            *((_BYTE *)v796 - 32) = *((_BYTE *)v813 - 32);
            *(v796 - 5) = v828;
            v829 = *(_OWORD *)(v813 - 3);
            *(v813 - 3) = 0;
            *(v813 - 2) = 0;
            v830 = (std::__shared_weak_count *)*(v796 - 2);
            *(_OWORD *)(v796 - 3) = v829;
            if (v830)
            {
              v831 = (unint64_t *)&v830->__shared_owners_;
              do
                v832 = __ldaxr(v831);
              while (__stlxr(v832 - 1, v831));
              if (!v832)
              {
                ((void (*)(std::__shared_weak_count *))v830->__on_zero_shared)(v830);
                std::__shared_weak_count::__release_weak(v830);
              }
            }
            *((_BYTE *)v796 - 8) = *((_BYTE *)v813 - 8);
            v796 = v820;
            v813 = v819;
          }
          while (v819 != *(unint64_t **)&v797);
        }
        **(_QWORD **)&v797 = v781;
        v923 = &v795[2 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4)];
        *(_OWORD *)(v923 + 1) = v1638;
        v924 = (std::__shared_weak_count *)v923[4];
        v923[3] = (unint64_t)v790;
        v923[4] = (unint64_t)v791;
        v744 = v1443;
        v780 = v1442;
        if (v924)
        {
          v925 = (unint64_t *)&v924->__shared_owners_;
          do
            v926 = __ldaxr(v925);
          while (__stlxr(v926 - 1, v925));
          if (!v926)
          {
            ((void (*)(std::__shared_weak_count *))v924->__on_zero_shared)(v924);
            std::__shared_weak_count::__release_weak(v924);
          }
        }
        v927 = &v795[2 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4)];
        *((_BYTE *)v927 + 40) = 1;
        v927[6] = v1441;
        *(float64x2_t *)(v927 + 7) = v1662[0];
        v927[9] = *(_QWORD *)&v1662[1].f64[0];
        *((_OWORD *)v927 + 5) = v1646;
        v928 = v1590;
        v927[12] = v1647;
        v927[13] = v928;
        *((_BYTE *)v927 + 112) = BYTE8(v1590);
        v929 = (std::__shared_weak_count *)v927[16];
        v927[15] = 0;
        v927[16] = 0;
        if (v929)
        {
          v930 = (unint64_t *)&v929->__shared_owners_;
          do
            v931 = __ldaxr(v930);
          while (__stlxr(v931 - 1, v930));
          if (!v931)
          {
            ((void (*)(std::__shared_weak_count *))v929->__on_zero_shared)(v929);
            std::__shared_weak_count::__release_weak(v929);
          }
        }
        LOBYTE(v795[2 * ((uint64_t)(*(_QWORD *)&v797 - (_QWORD)v795) >> 4) + 17]) = 0;
      }
LABEL_1119:
      v967 = *(std::__shared_weak_count **)&object[128];
      if (*(_QWORD *)&object[128])
      {
        v968 = (unint64_t *)(*(_QWORD *)&object[128] + 8);
        do
          v969 = __ldaxr(v968);
        while (__stlxr(v969 - 1, v968));
        if (!v969)
        {
          ((void (*)(std::__shared_weak_count *))v967->__on_zero_shared)(v967);
          std::__shared_weak_count::__release_weak(v967);
        }
      }
LABEL_1124:
      v970 = *(std::__shared_weak_count **)&object[32];
      if (*(_QWORD *)&object[32])
      {
        v971 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
        do
          v972 = __ldaxr(v971);
        while (__stlxr(v972 - 1, v971));
        if (!v972)
        {
          ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
          std::__shared_weak_count::__release_weak(v970);
        }
      }
      *(_BYTE *)(v1514 + 6762) = 0;
      *(_BYTE *)(v1514 + 6760) = 0;
      *v1453 = vaddq_s64(*v1453, (int64x2_t)xmmword_2103B84D0);
      v973 = *(std::__shared_weak_count **)&v1557[104];
      if (!*(_QWORD *)&v1557[104])
        goto LABEL_1133;
      v974 = (unint64_t *)(*(_QWORD *)&v1557[104] + 8);
      do
        v975 = __ldaxr(v974);
      while (__stlxr(v975 - 1, v974));
      if (!v975)
      {
        ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
        std::__shared_weak_count::__release_weak(v973);
        v804 = 0;
        v833 = *(std::__shared_weak_count **)&v1557[8];
        if (*(_QWORD *)&v1557[8])
        {
LABEL_939:
          v834 = (unint64_t *)&v833->__shared_owners_;
          do
            v835 = __ldaxr(v834);
          while (__stlxr(v835 - 1, v834));
          if (!v835)
          {
            ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
            std::__shared_weak_count::__release_weak(v833);
          }
        }
      }
      else
      {
LABEL_1133:
        v804 = 0;
        v833 = *(std::__shared_weak_count **)&v1557[8];
        if (*(_QWORD *)&v1557[8])
          goto LABEL_939;
      }
LABEL_943:
      v836 = (std::__shared_weak_count *)*((_QWORD *)&v1630 + 1);
      if (*((_QWORD *)&v1630 + 1))
      {
        v837 = (unint64_t *)(*((_QWORD *)&v1630 + 1) + 8);
        do
          v838 = __ldaxr(v837);
        while (__stlxr(v838 - 1, v837));
        if (!v838)
        {
          ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
          std::__shared_weak_count::__release_weak(v836);
          if ((v804 & 1) != 0)
            goto LABEL_949;
LABEL_948:
          *(_BYTE *)(v1514 + 7828) = 0;
          *v1493 = 0;
          goto LABEL_949;
        }
      }
      if ((v804 & 1) == 0)
        goto LABEL_948;
LABEL_949:
      v839 = (std::__shared_weak_count *)*((_QWORD *)&v1614 + 1);
      if (!*((_QWORD *)&v1614 + 1))
        goto LABEL_953;
      v840 = (unint64_t *)(*((_QWORD *)&v1614 + 1) + 8);
      do
        v841 = __ldaxr(v840);
      while (__stlxr(v841 - 1, v840));
      if (!v841)
      {
        ((void (*)(std::__shared_weak_count *))v839->__on_zero_shared)(v839);
        std::__shared_weak_count::__release_weak(v839);
        v842 = (std::__shared_weak_count *)v1655[1];
        if (v1655[1])
        {
LABEL_954:
          v843 = (unint64_t *)&v842->__shared_owners_;
          do
            v844 = __ldaxr(v843);
          while (__stlxr(v844 - 1, v843));
          if (!v844)
          {
            ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
            std::__shared_weak_count::__release_weak(v842);
          }
        }
      }
      else
      {
LABEL_953:
        v842 = (std::__shared_weak_count *)v1655[1];
        if (v1655[1])
          goto LABEL_954;
      }
      v845 = (std::__shared_weak_count *)*((_QWORD *)&v1622 + 1);
      if (!*((_QWORD *)&v1622 + 1))
        goto LABEL_963;
      v846 = (unint64_t *)(*((_QWORD *)&v1622 + 1) + 8);
      do
        v847 = __ldaxr(v846);
      while (__stlxr(v847 - 1, v846));
      if (!v847)
      {
        ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
        std::__shared_weak_count::__release_weak(v845);
        v779 = ++v780;
        v848 = v1501;
        v778 = v1501[1];
        if (v778 <= v780)
          goto LABEL_863;
      }
      else
      {
LABEL_963:
        v779 = ++v780;
        v848 = v1501;
        v778 = v1501[1];
        if (v778 <= v780)
          goto LABEL_863;
      }
      if (((*(_QWORD *)(*v848 + ((v779 >> 3) & 0x1FFFFFF8)) >> v779) & 1) != 0)
      {
        v849 = *(_DWORD *)(*v1510 + 4 * v779);
        if ((v849 & 0x80000000) != 0)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 823, (uint64_t)"frameIDs[i + 1] >= 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1873;
          }
          v849 = *(_DWORD *)(*v1510 + 4 * v779);
          v850 = (void *)v744[7];
          v851 = (unint64_t *)v744[8];
          *(_QWORD *)&v1606 = v850;
          *((_QWORD *)&v1606 + 1) = v851;
          if (v851)
            goto LABEL_967;
        }
        else
        {
          v850 = (void *)v744[7];
          v851 = (unint64_t *)v744[8];
          *(_QWORD *)&v1606 = v850;
          *((_QWORD *)&v1606 + 1) = v851;
          if (v851)
          {
LABEL_967:
            v852 = v851 + 1;
            do
              v853 = __ldxr(v852);
            while (__stxr(v853 + 1, v852));
            v854 = v780;
            v1655[0] = v850;
            v1655[1] = v851;
            do
              v855 = __ldxr(v852);
            while (__stxr(v855 + 1, v852));
LABEL_979:
            v856 = 152;
            v1654[0] = (void *)v781;
            LOBYTE(v1656) = 1;
            v1598 = 0uLL;
            v1630 = 0uLL;
            v857 = *(unint64_t **)(v1514 + 6424);
            v858 = *(unint64_t **)(v1514 + 6432);
            if (v857 == v858)
            {
              v859 = *(unint64_t **)(v1514 + 6424);
            }
            else
            {
              v859 = *(unint64_t **)(v1514 + 6432);
              if (*(v858 - 19) >= v781)
              {
                v860 = 0x86BCA1AF286BCA1BLL * (v858 - v857);
                v861 = *(unint64_t **)(v1514 + 6424);
                do
                {
                  v862 = v860 >> 1;
                  v863 = &v861[19 * (v860 >> 1)];
                  v865 = *v863;
                  v864 = v863 + 19;
                  v860 += ~(v860 >> 1);
                  if (v865 < v781)
                    v861 = v864;
                  else
                    v860 = v862;
                }
                while (v860);
                v856 = 152;
                v859 = *(unint64_t **)(v1514 + 6432);
                if (v861 != v858)
                {
                  v859 = v861;
                  if (*v861 == v781)
                    goto LABEL_1050;
                }
              }
            }
            *(_OWORD *)v1556 = *(_OWORD *)v1654;
            *(_QWORD *)v1557 = v850;
            *(_QWORD *)&v1557[8] = v851;
            v1655[0] = 0;
            v1655[1] = 0;
            v866 = 1;
            v1557[16] = 1;
            *(_QWORD *)&v1557[24] = 0;
            *(_QWORD *)&v1557[32] = 0;
            memset(&v1557[104], 0, 17);
            *(_QWORD *)&v1557[88] = 0xBFF0000000000000;
            v1557[96] = 0;
            v867 = *(char **)(v1514 + 5176);
            v868 = *(char **)(v1514 + 5184);
            v869 = v868 - v867;
            if (v868 != v867)
            {
              v870 = v869 >> 4;
              v871 = *(char **)(v1514 + 5176);
              v872 = v869 >> 4;
              do
              {
                v873 = v872 >> 1;
                v874 = (unsigned int *)&v871[16 * (v872 >> 1)];
                v876 = *v874;
                v875 = (char *)(v874 + 4);
                v872 += ~(v872 >> 1);
                if (v876 < v781)
                  v871 = v875;
                else
                  v872 = v873;
              }
              while (v872);
              if (v871 != v868 && *(_DWORD *)v871 == v781)
              {
                v877 = *((_QWORD *)v871 + 1);
                *(_QWORD *)&v1557[24] = v877;
                ++*(_DWORD *)(*((_QWORD *)v871 + 1) + 8);
                do
                {
                  v878 = v870 >> 1;
                  v879 = (unsigned int *)&v867[16 * (v870 >> 1)];
                  v881 = *v879;
                  v880 = (char *)(v879 + 4);
                  v870 += ~(v870 >> 1);
                  if (v881 < v849)
                    v867 = v880;
                  else
                    v870 = v878;
                }
                while (v870);
                if (v867 == v868 || *(_DWORD *)v867 != v849)
                {
                  if (v877)
                    --*(_DWORD *)(v877 + 8);
                }
                else
                {
                  v882 = *((_QWORD *)v867 + 1);
                  *(_QWORD *)&v1557[32] = v882;
                  ++*(_DWORD *)(*((_QWORD *)v867 + 1) + 8);
                  if (*(_BYTE *)(v877 + 20) || *(_BYTE *)(v882 + 20))
                  {
                    *(_OWORD *)&object[8] = *(_OWORD *)v1556;
                    *(_QWORD *)object = v781;
                    *(_QWORD *)&object[24] = v850;
                    *(_QWORD *)&object[32] = v851;
                    *(_QWORD *)v1557 = 0;
                    *(_QWORD *)&v1557[8] = 0;
                    object[40] = 1;
                    *(_OWORD *)&object[48] = *(_OWORD *)&v1557[24];
                    *(_OWORD *)&object[64] = *(_OWORD *)&v1557[40];
                    *(_QWORD *)&object[80] = *(_QWORD *)&v1557[56];
                    *(_OWORD *)&object[104] = *(_OWORD *)&v1557[80];
                    *(_OWORD *)&object[88] = *(_OWORD *)&v1557[64];
                    object[120] = v1557[96];
                    memset(&object[128], 0, 17);
                    *(_QWORD *)&v1557[104] = 0;
                    *(_QWORD *)&v1557[112] = 0;
                    if (v858 == v859 || *v859 != v781)
                    {
                      v883 = (char *)v859 - (char *)v857;
                      v884 = ((char *)v859 - (char *)v857) / 152;
                      *(_QWORD *)&v885 = &v857[19 * v884];
                      if ((unint64_t)v858 >= *v1446)
                      {
                        v1445 = v744;
                        v976 = 1 - 0x79435E50D79435E5 * (v858 - v857);
                        if (v976 > 0x1AF286BCA1AF286)
                          sub_20E867F44();
                        if (0xD79435E50D79436 * ((uint64_t)(*v1446 - (_QWORD)v857) >> 3) > v976)
                          v976 = 0xD79435E50D79436 * ((uint64_t)(*v1446 - (_QWORD)v857) >> 3);
                        if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*v1446 - (_QWORD)v857) >> 3) >= 0xD79435E50D7943)
                          v977 = 0x1AF286BCA1AF286;
                        else
                          v977 = v976;
                        *(_QWORD *)&v1662[2].f64[0] = v1514 + 6440;
                        if (v977)
                        {
                          if (v977 > 0x1AF286BCA1AF286)
                            sub_20E877A38();
                          v978 = (char *)operator new(152 * v977);
                          v884 = ((char *)v859 - (char *)v857) / 152;
                          v883 = (char *)v859 - (char *)v857;
                        }
                        else
                        {
                          v978 = 0;
                        }
                        *(_QWORD *)&v983 = &v978[152 * v884];
                        *(_QWORD *)&v1662[0].f64[0] = v978;
                        v1662[0].f64[1] = v983;
                        v1662[1].f64[0] = v983;
                        *(_QWORD *)&v1662[1].f64[1] = &v978[152 * v977];
                        _ZF = v884 == v977;
                        v744 = v1445;
                        if (_ZF)
                        {
                          if (v883 < 1)
                          {
                            if (v857 == v859)
                              v985 = 1;
                            else
                              v985 = 2 * v884;
                            if (v985 > 0x1AF286BCA1AF286)
                              sub_20E877A38();
                            v986 = (char *)operator new(152 * v985);
                            *(_QWORD *)&v983 = &v986[152 * (v985 >> 2)];
                            *(_QWORD *)&v1662[0].f64[0] = v986;
                            v1662[0].f64[1] = v983;
                            *(_QWORD *)&v1662[1].f64[1] = &v986[152 * v985];
                            if (v978)
                              operator delete(v978);
                          }
                          else
                          {
                            v984 = v884 + 2;
                            if (v884 >= -1)
                              v984 = v884 + 1;
                            *(_QWORD *)&v983 -= 152 * (v984 >> 1);
                            v1662[0].f64[1] = v983;
                          }
                        }
                        **(_QWORD **)&v983 = v781;
                        *(_OWORD *)(*(_QWORD *)&v983 + 8) = *(_OWORD *)v1556;
                        *(_OWORD *)(*(_QWORD *)&v983 + 24) = *(_OWORD *)&object[24];
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        *(_BYTE *)(*(_QWORD *)&v983 + 40) = object[40];
                        *(_OWORD *)(*(_QWORD *)&v983 + 48) = *(_OWORD *)&object[48];
                        *(_OWORD *)(*(_QWORD *)&v983 + 64) = *(_OWORD *)&object[64];
                        *(_QWORD *)(*(_QWORD *)&v983 + 80) = *(_QWORD *)&object[80];
                        v987 = *(_OWORD *)&object[88];
                        *(_QWORD *)(*(_QWORD *)&v983 + 104) = *(_QWORD *)&object[104];
                        *(_OWORD *)(*(_QWORD *)&v983 + 88) = v987;
                        v988 = *(_QWORD *)&object[112];
                        *(_BYTE *)(*(_QWORD *)&v983 + 120) = object[120];
                        *(_QWORD *)(*(_QWORD *)&v983 + 112) = v988;
                        *(_OWORD *)(*(_QWORD *)&v983 + 128) = *(_OWORD *)&object[128];
                        *(_QWORD *)&object[128] = 0;
                        *(_QWORD *)&object[136] = 0;
                        *(_BYTE *)(*(_QWORD *)&v983 + 144) = object[144];
                        v989 = *(_QWORD *)&v983 + 152;
                        *(_QWORD *)&v1662[1].f64[0] = *(_QWORD *)&v983 + 152;
                        v990 = *(_QWORD *)(v1514 + 6424);
                        if (v990 != *(_QWORD *)&v885)
                        {
                          v991 = 0;
                          do
                          {
                            v992 = *(_QWORD *)&v983 + v991;
                            v993 = *(_QWORD *)&v885 + v991;
                            *(_QWORD *)(v992 - 152) = *(_QWORD *)(*(_QWORD *)&v885 + v991 - 152);
                            *(_OWORD *)(v992 - 144) = *(_OWORD *)(*(_QWORD *)&v885 + v991 - 144);
                            *(_OWORD *)(v992 - 128) = *(_OWORD *)(*(_QWORD *)&v885 + v991 - 128);
                            v994 = *(_BYTE *)(*(_QWORD *)&v885 + v991 - 112);
                            *(_QWORD *)(v993 - 128) = 0;
                            *(_QWORD *)(v993 - 120) = 0;
                            *(_BYTE *)(v992 - 112) = v994;
                            *(_OWORD *)(v992 - 104) = *(_OWORD *)(*(_QWORD *)&v885 + v991 - 104);
                            v995 = *(_OWORD *)(*(_QWORD *)&v885 + v991 - 88);
                            *(_QWORD *)(v992 - 72) = *(_QWORD *)(*(_QWORD *)&v885 + v991 - 72);
                            *(_OWORD *)(v992 - 88) = v995;
                            v996 = *(_OWORD *)(*(_QWORD *)&v885 + v991 - 64);
                            *(_QWORD *)(v992 - 48) = *(_QWORD *)(*(_QWORD *)&v885 + v991 - 48);
                            *(_OWORD *)(v992 - 64) = v996;
                            v997 = *(_QWORD *)(*(_QWORD *)&v885 + v991 - 40);
                            *(_BYTE *)(v992 - 32) = *(_BYTE *)(*(_QWORD *)&v885 + v991 - 32);
                            *(_QWORD *)(v992 - 40) = v997;
                            *(_OWORD *)(v992 - 24) = *(_OWORD *)(*(_QWORD *)&v885 + v991 - 24);
                            *(_QWORD *)(v993 - 24) = 0;
                            *(_QWORD *)(v993 - 16) = 0;
                            *(_BYTE *)(v992 - 8) = *(_BYTE *)(*(_QWORD *)&v885 + v991 - 8);
                            v991 -= 152;
                          }
                          while (*(_QWORD *)&v885 + v991 != v990);
                          *(_QWORD *)&v983 += v991;
                        }
                        v998 = *(_QWORD *)(v1514 + 6432);
                        if (v998 == *(_QWORD *)&v885)
                        {
                          v1002 = (double *)v1514;
                        }
                        else
                        {
                          do
                          {
                            *(_QWORD *)v989 = **(_QWORD **)&v885;
                            *(_OWORD *)(v989 + 8) = *(_OWORD *)(*(_QWORD *)&v885 + 8);
                            *(_OWORD *)(v989 + 24) = *(_OWORD *)(*(_QWORD *)&v885 + 24);
                            *(_QWORD *)(*(_QWORD *)&v885 + 24) = 0;
                            *(_QWORD *)(*(_QWORD *)&v885 + 32) = 0;
                            *(_BYTE *)(v989 + 40) = *(_BYTE *)(*(_QWORD *)&v885 + 40);
                            *(_OWORD *)(v989 + 48) = *(_OWORD *)(*(_QWORD *)&v885 + 48);
                            v999 = *(_OWORD *)(*(_QWORD *)&v885 + 64);
                            *(_QWORD *)(v989 + 80) = *(_QWORD *)(*(_QWORD *)&v885 + 80);
                            *(_OWORD *)(v989 + 64) = v999;
                            v1000 = *(_OWORD *)(*(_QWORD *)&v885 + 88);
                            *(_QWORD *)(v989 + 104) = *(_QWORD *)(*(_QWORD *)&v885 + 104);
                            *(_OWORD *)(v989 + 88) = v1000;
                            v1001 = *(_QWORD *)(*(_QWORD *)&v885 + 112);
                            *(_BYTE *)(v989 + 120) = *(_BYTE *)(*(_QWORD *)&v885 + 120);
                            *(_QWORD *)(v989 + 112) = v1001;
                            *(_OWORD *)(v989 + 128) = *(_OWORD *)(*(_QWORD *)&v885 + 128);
                            *(_QWORD *)(*(_QWORD *)&v885 + 128) = 0;
                            *(_QWORD *)(*(_QWORD *)&v885 + 136) = 0;
                            *(_BYTE *)(v989 + 144) = *(_BYTE *)(*(_QWORD *)&v885 + 144);
                            v989 += 152;
                            *(_QWORD *)&v885 += 152;
                          }
                          while (*(_QWORD *)&v885 != v998);
                          v1002 = (double *)v1514;
                          v885 = *(double *)(v1514 + 6432);
                        }
                        v1003 = v1002[803];
                        v1002[803] = v983;
                        *((_QWORD *)v1002 + 804) = v989;
                        v1004 = v1002[805];
                        v1002[805] = v1662[1].f64[1];
                        v1662[1].f64[1] = v1004;
                        v1662[0].f64[1] = v1003;
                        v1662[0].f64[0] = v1003;
                        if (*(_QWORD *)&v885 != *(_QWORD *)&v1003)
                        {
                          do
                          {
                            *(_QWORD *)&v1662[1].f64[0] = *(_QWORD *)&v885 - 152;
                            v1005 = *(std::__shared_weak_count **)(*(_QWORD *)&v885 - 16);
                            if (v1005)
                            {
                              v1006 = (unint64_t *)&v1005->__shared_owners_;
                              do
                                v1007 = __ldaxr(v1006);
                              while (__stlxr(v1007 - 1, v1006));
                              if (!v1007)
                              {
                                ((void (*)(std::__shared_weak_count *))v1005->__on_zero_shared)(v1005);
                                std::__shared_weak_count::__release_weak(v1005);
                              }
                            }
                            v1008 = *(std::__shared_weak_count **)(*(_QWORD *)&v885 - 120);
                            if (v1008)
                            {
                              v1009 = (unint64_t *)&v1008->__shared_owners_;
                              do
                                v1010 = __ldaxr(v1009);
                              while (__stlxr(v1010 - 1, v1009));
                              if (!v1010)
                              {
                                ((void (*)(std::__shared_weak_count *))v1008->__on_zero_shared)(v1008);
                                std::__shared_weak_count::__release_weak(v1008);
                              }
                            }
                            v885 = v1662[1].f64[0];
                          }
                          while (*(_QWORD *)&v1662[1].f64[0] != *(_QWORD *)&v1003);
                          v885 = v1662[0].f64[0];
                        }
                        if (v885 != 0.0)
                          operator delete(*(void **)&v885);
                      }
                      else if (*(unint64_t **)&v885 == v858)
                      {
                        *v858 = v781;
                        v979 = &v857[19 * v884];
                        *(_OWORD *)(v979 + 1) = *(_OWORD *)&object[8];
                        v979[3] = (unint64_t)v850;
                        v979[4] = (unint64_t)v851;
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        *((_BYTE *)v979 + 40) = 1;
                        *((_OWORD *)v979 + 3) = *(_OWORD *)&object[48];
                        v980 = *(_OWORD *)&object[64];
                        v979[10] = *(_QWORD *)&object[80];
                        *((_OWORD *)v979 + 4) = v980;
                        v981 = *(_OWORD *)&object[88];
                        v979[13] = *(_QWORD *)&object[104];
                        *(_OWORD *)(v979 + 11) = v981;
                        v982 = *(_QWORD *)&object[112];
                        *((_BYTE *)v979 + 120) = object[120];
                        v979[14] = v982;
                        v979[16] = 0;
                        v979[17] = 0;
                        *(_QWORD *)&object[128] = 0;
                        *(_QWORD *)&object[136] = 0;
                        *((_BYTE *)v979 + 144) = 0;
                        *(_QWORD *)(v1514 + 6432) = v858 + 19;
                      }
                      else
                      {
                        v1448 = ((char *)v859 - (char *)v857) / 152;
                        v1638 = *(_OWORD *)v1556;
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        v1444 = *(_OWORD *)&object[48];
                        v1662[0] = *(float64x2_t *)&v1557[40];
                        v1662[1].f64[0] = *(float64_t *)&v1557[56];
                        v1646 = *(_OWORD *)&v1557[64];
                        *(_QWORD *)&v1647 = *(_QWORD *)&v1557[80];
                        BYTE8(v1590) = v1557[96];
                        *(_QWORD *)&v1590 = *(_QWORD *)&v1557[88];
                        v886 = (uint64_t)(v858 - 19);
                        v887 = v858;
                        v888 = v858 - 19;
                        *(_QWORD *)&object[128] = 0;
                        *(_QWORD *)&object[136] = 0;
                        if ((unint64_t)v858 >= 0x98)
                        {
                          do
                          {
                            *v887 = *v888;
                            *(_OWORD *)(v887 + 1) = *(_OWORD *)(v888 + 1);
                            *(_OWORD *)(v887 + 3) = *(_OWORD *)(v888 + 3);
                            v888[3] = 0;
                            v888[4] = 0;
                            *((_BYTE *)v887 + 40) = *((_BYTE *)v888 + 40);
                            *((_OWORD *)v887 + 3) = *((_OWORD *)v888 + 3);
                            v889 = *((_OWORD *)v888 + 4);
                            v887[10] = v888[10];
                            *((_OWORD *)v887 + 4) = v889;
                            v890 = *(_OWORD *)(v888 + 11);
                            v887[13] = v888[13];
                            *(_OWORD *)(v887 + 11) = v890;
                            v891 = v888[14];
                            *((_BYTE *)v887 + 120) = *((_BYTE *)v888 + 120);
                            v887[14] = v891;
                            *((_OWORD *)v887 + 8) = *((_OWORD *)v888 + 8);
                            v888[16] = 0;
                            v888[17] = 0;
                            *((_BYTE *)v887 + 144) = *((_BYTE *)v888 + 144);
                            v887 += 19;
                            v888 += 19;
                          }
                          while (v888 < v858);
                        }
                        *(_QWORD *)(v1514 + 6432) = v887;
                        if (v858 != (unint64_t *)(*(_QWORD *)&v885 + 152))
                        {
                          v892 = ((uint64_t)v858 - *(_QWORD *)&v885 - 152) >> 3;
                          do
                          {
                            v886 = sub_20F91ED74(v886, (uint64_t)&v857[19 * v1448 - 19 + v892]) - 152;
                            v892 -= 19;
                          }
                          while (v892 * 8);
                        }
                        **(_QWORD **)&v885 = v781;
                        v893 = ((char *)v859 - (char *)v857) / 152;
                        v894 = &v857[19 * v1448];
                        *(_OWORD *)(v894 + 1) = v1638;
                        v895 = (std::__shared_weak_count *)v894[4];
                        v894[3] = (unint64_t)v850;
                        v894[4] = (unint64_t)v851;
                        if (v895)
                        {
                          v896 = (unint64_t *)&v895->__shared_owners_;
                          do
                            v897 = __ldaxr(v896);
                          while (__stlxr(v897 - 1, v896));
                          if (!v897)
                          {
                            ((void (*)(std::__shared_weak_count *, uint64_t))v895->__on_zero_shared)(v895, v856);
                            std::__shared_weak_count::__release_weak(v895);
                            v893 = ((char *)v859 - (char *)v857) / 152;
                          }
                        }
                        v898 = &v857[19 * v893];
                        *((_BYTE *)v898 + 40) = 1;
                        *((_OWORD *)v898 + 3) = v1444;
                        *((float64x2_t *)v898 + 4) = v1662[0];
                        v898[10] = *(_QWORD *)&v1662[1].f64[0];
                        *(_OWORD *)(v898 + 11) = v1646;
                        v899 = v1590;
                        v898[13] = v1647;
                        v898[14] = v899;
                        *((_BYTE *)v898 + 120) = BYTE8(v1590);
                        v900 = (std::__shared_weak_count *)v898[17];
                        v898[16] = 0;
                        v898[17] = 0;
                        if (v900)
                        {
                          v901 = (unint64_t *)&v900->__shared_owners_;
                          do
                            v902 = __ldaxr(v901);
                          while (__stlxr(v902 - 1, v901));
                          if (!v902)
                          {
                            ((void (*)(std::__shared_weak_count *, uint64_t))v900->__on_zero_shared)(v900, v856);
                            std::__shared_weak_count::__release_weak(v900);
                            v893 = ((char *)v859 - (char *)v857) / 152;
                          }
                        }
                        LOBYTE(v857[19 * v893 + 18]) = 0;
                      }
                      v1011 = *(std::__shared_weak_count **)&object[136];
                      if (*(_QWORD *)&object[136])
                      {
                        v1012 = (unint64_t *)(*(_QWORD *)&object[136] + 8);
                        do
                          v1013 = __ldaxr(v1012);
                        while (__stlxr(v1013 - 1, v1012));
                        if (!v1013)
                        {
                          ((void (*)(std::__shared_weak_count *, uint64_t))v1011->__on_zero_shared)(v1011, v856);
                          std::__shared_weak_count::__release_weak(v1011);
                        }
                      }
                    }
                    v1014 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v1015 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v1016 = __ldaxr(v1015);
                      while (__stlxr(v1016 - 1, v1015));
                      if (!v1016)
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v1014->__on_zero_shared)(v1014, v856);
                        std::__shared_weak_count::__release_weak(v1014);
                      }
                    }
                    *(_BYTE *)(v1514 + 6762) = 0;
                    *(_BYTE *)(v1514 + 6760) = 0;
                    *v1453 = vaddq_s64(*v1453, (int64x2_t)xmmword_2103B84D0);
                    v1017 = *(std::__shared_weak_count **)&v1557[112];
                    if (*(_QWORD *)&v1557[112])
                    {
                      v1018 = (unint64_t *)(*(_QWORD *)&v1557[112] + 8);
                      do
                        v1019 = __ldaxr(v1018);
                      while (__stlxr(v1019 - 1, v1018));
                      if (!v1019)
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v1017->__on_zero_shared)(v1017, v856);
                        std::__shared_weak_count::__release_weak(v1017);
                      }
                    }
                    v866 = 0;
                    v908 = *(std::__shared_weak_count **)&v1557[8];
                    if (!*(_QWORD *)&v1557[8])
                    {
LABEL_1044:
                      v911 = (std::__shared_weak_count *)*((_QWORD *)&v1630 + 1);
                      if (!*((_QWORD *)&v1630 + 1))
                        goto LABEL_1048;
                      v912 = (unint64_t *)(*((_QWORD *)&v1630 + 1) + 8);
                      do
                        v913 = __ldaxr(v912);
                      while (__stlxr(v913 - 1, v912));
                      if (!v913)
                      {
                        ((void (*)(std::__shared_weak_count *, uint64_t))v911->__on_zero_shared)(v911, v856);
                        std::__shared_weak_count::__release_weak(v911);
                        if ((v866 & 1) != 0)
                        {
LABEL_1050:
                          v914 = (std::__shared_weak_count *)*((_QWORD *)&v1598 + 1);
                          v780 = v854;
                          if (*((_QWORD *)&v1598 + 1))
                          {
                            v915 = (unint64_t *)(*((_QWORD *)&v1598 + 1) + 8);
                            do
                              v916 = __ldaxr(v915);
                            while (__stlxr(v916 - 1, v915));
                            if (!v916)
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t))v914->__on_zero_shared)(v914, v856);
                              std::__shared_weak_count::__release_weak(v914);
                            }
                          }
                          v917 = (std::__shared_weak_count *)v1655[1];
                          if (v1655[1])
                          {
                            v918 = (unint64_t *)((char *)v1655[1] + 8);
                            do
                              v919 = __ldaxr(v918);
                            while (__stlxr(v919 - 1, v918));
                            if (!v919)
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t))v917->__on_zero_shared)(v917, v856);
                              std::__shared_weak_count::__release_weak(v917);
                            }
                          }
                          v920 = (std::__shared_weak_count *)*((_QWORD *)&v1606 + 1);
                          if (*((_QWORD *)&v1606 + 1))
                          {
                            v921 = (unint64_t *)(*((_QWORD *)&v1606 + 1) + 8);
                            do
                              v922 = __ldaxr(v921);
                            while (__stlxr(v922 - 1, v921));
                            if (!v922)
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t))v920->__on_zero_shared)(v920, v856);
                              std::__shared_weak_count::__release_weak(v920);
                            }
                          }
                          v778 = v1501[1];
                          goto LABEL_863;
                        }
                      }
                      else
                      {
LABEL_1048:
                        if ((v866 & 1) != 0)
                          goto LABEL_1050;
                      }
                      *(_BYTE *)(v1514 + 7828) = 0;
                      *v1493 = 0;
                      goto LABEL_1050;
                    }
LABEL_1040:
                    v909 = (unint64_t *)&v908->__shared_owners_;
                    do
                      v910 = __ldaxr(v909);
                    while (__stlxr(v910 - 1, v909));
                    if (!v910)
                    {
                      ((void (*)(std::__shared_weak_count *, uint64_t))v908->__on_zero_shared)(v908, v856);
                      std::__shared_weak_count::__release_weak(v908);
                    }
                    goto LABEL_1044;
                  }
                  --*(_DWORD *)(v877 + 8);
                  --*(_DWORD *)(v882 + 8);
                  *(_QWORD *)&v1557[32] = 0;
                  *(_QWORD *)&v1557[24] = 0;
                }
              }
              v866 = 1;
            }
            v908 = *(std::__shared_weak_count **)&v1557[8];
            if (!*(_QWORD *)&v1557[8])
              goto LABEL_1044;
            goto LABEL_1040;
          }
        }
        v854 = v780;
        v1655[0] = v850;
        v1655[1] = 0;
        goto LABEL_979;
      }
LABEL_863:
      if (v778 <= v779)
        goto LABEL_1388;
    }
    v782 = (int8x8_t)v744[1];
    if (!*(_QWORD *)&v782)
      goto LABEL_889;
LABEL_870:
    v783 = (uint8x8_t)vcnt_s8(v782);
    v783.i16[0] = vaddlv_u8(v783);
    if (v783.u32[0] > 1uLL)
    {
      v784 = v781;
      if (*(_QWORD *)&v782 <= v781)
        v784 = v781 % *(_QWORD *)&v782;
    }
    else
    {
      v784 = (v782.i32[0] - 1) & v781;
    }
    v785 = *(_QWORD **)(*v744 + 8 * v784);
    if (v785)
    {
      v786 = (_QWORD *)*v785;
      if (v786)
      {
        if (v783.u32[0] < 2uLL)
        {
          v787 = *(_QWORD *)&v782 - 1;
          while (1)
          {
            v789 = v786[1];
            if (v789 == v781)
            {
              if (v786[2] == v781)
                goto LABEL_890;
            }
            else if ((v789 & v787) != v784)
            {
              goto LABEL_889;
            }
            v786 = (_QWORD *)*v786;
            if (!v786)
              goto LABEL_889;
          }
        }
        while (1)
        {
          v788 = v786[1];
          if (v788 == v781)
          {
            if (v786[2] == v781)
              goto LABEL_890;
          }
          else
          {
            if (v788 >= *(_QWORD *)&v782)
              v788 %= *(_QWORD *)&v782;
            if (v788 != v784)
              goto LABEL_889;
          }
          v786 = (_QWORD *)*v786;
          if (!v786)
            goto LABEL_889;
        }
      }
    }
    goto LABEL_889;
  }
LABEL_1388:
  sub_20FC42E18(v1514);
  v1125 = *(_QWORD *)(v1513 + 8216);
  v1126 = *(unsigned __int8 *)(v1125 + 1720);
  v1127 = v1125 + 864;
  if (!*(_BYTE *)(v1125 + 1720))
    v1127 = v1125 + 24;
  if (*(_BYTE *)(v1127 + 428))
  {
    v1128 = *(uint64_t **)(v1513 + 7712);
    if (!v1128)
      goto LABEL_1468;
    while (!*((_BYTE *)v1128 + 20))
    {
      v1128 = (uint64_t *)*v1128;
      if (!v1128)
        goto LABEL_1468;
    }
  }
  if (*(_BYTE *)(v1127 + 426))
  {
    *(_OWORD *)v1557 = 0u;
    *(_OWORD *)v1556 = 0u;
    *(_DWORD *)&v1557[16] = 1065353216;
    v1129 = (__int128 **)a9[5];
    for (m = (__int128 **)a9[6]; v1129 != m; v1129 += 2)
    {
      v1131 = *v1129;
      v1132 = **v1129;
      *(_QWORD *)&object[16] = *((_QWORD *)*v1129 + 2);
      *(_OWORD *)object = v1132;
      *(_OWORD *)&object[24] = *(__int128 *)((char *)v1131 + 24);
      sub_20F61A180((uint64_t)v1556, (uint64_t *)object, (uint64_t)object);
    }
    v1133 = *(int **)(v1514 + 5752);
    for (n = *(int **)(v1514 + 5760); v1133 != n; v1133 += 4)
    {
      v1135 = *((_QWORD *)v1133 + 1);
      if (*(_BYTE *)(v1135 + 20))
      {
        v1136 = *v1133;
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 1065353216;
        v1137 = *(uint64_t **)v1557;
        if (*(_QWORD *)v1557)
        {
          do
          {
            if (*((_DWORD *)v1137 + 8) == v1136)
              sub_20F619C7C((uint64_t)object, v1137 + 2, (uint64_t)(v1137 + 2));
            v1137 = (uint64_t *)*v1137;
          }
          while (v1137);
        }
        if (*(_QWORD *)(v1135 + 88) != *(_QWORD *)(v1135 + 80)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 717, (uint64_t)"id_variable.second.variable.NumRegisteredTracks() == 0", 54, (uint64_t)"We should have zero tracks", 26, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (*(_QWORD *)(v1135 + 128))
        {
          v1138 = *(_QWORD **)(v1135 + 120);
          if (v1138)
          {
            do
            {
              v1139 = (_QWORD *)*v1138;
              operator delete(v1138);
              v1138 = v1139;
            }
            while (v1139);
          }
          *(_QWORD *)(v1135 + 120) = 0;
          v1140 = *(_QWORD *)(v1135 + 112);
          if (v1140)
          {
            for (ii = 0; ii != v1140; ++ii)
              *(_QWORD *)(*(_QWORD *)(v1135 + 104) + 8 * ii) = 0;
          }
          *(_QWORD *)(v1135 + 128) = 0;
        }
        v1142 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        v1143 = *(void **)(v1135 + 104);
        *(_QWORD *)(v1135 + 104) = v1142;
        if (v1143)
          operator delete(v1143);
        v1144 = *(_QWORD *)&object[8];
        v1145 = *(_QWORD *)&object[16];
        *(_QWORD *)(v1135 + 120) = *(_QWORD *)&object[16];
        *(_QWORD *)(v1135 + 112) = v1144;
        *(_QWORD *)&object[8] = 0;
        v1146 = *(_QWORD *)&object[24];
        *(_QWORD *)(v1135 + 128) = *(_QWORD *)&object[24];
        *(_DWORD *)(v1135 + 136) = *(_DWORD *)&object[32];
        if (v1146)
        {
          v1147 = *(_QWORD *)(v1145 + 8);
          if ((v1144 & (v1144 - 1)) != 0)
          {
            if (v1147 >= v1144)
              v1147 %= v1144;
          }
          else
          {
            v1147 &= v1144 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v1135 + 104) + 8 * v1147) = v1135 + 120;
          *(_QWORD *)&object[16] = 0;
          *(_QWORD *)&object[24] = 0;
        }
        v1148 = v1135 + 16;
        sub_20F6169C8(v1148);
        sub_20F616F2C(v1148);
        v1149 = *(_QWORD **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          do
          {
            v1150 = (_QWORD *)*v1149;
            operator delete(v1149);
            v1149 = v1150;
          }
          while (v1150);
        }
        v1151 = *(void **)object;
        *(_QWORD *)object = 0;
        if (v1151)
          operator delete(v1151);
      }
    }
    v1152 = *(_QWORD **)v1557;
    if (*(_QWORD *)v1557)
    {
      do
      {
        v1153 = (_QWORD *)*v1152;
        operator delete(v1152);
        v1152 = v1153;
      }
      while (v1153);
    }
    v1154 = v1556[0];
    v1556[0] = 0;
    if (v1154)
      operator delete(v1154);
    v1155 = *(int **)(v1514 + 5752);
    v1156 = *(int **)(v1514 + 5760);
    if (v1155 != v1156)
    {
      while (1)
      {
        v1161 = *((_QWORD *)v1155 + 1);
        if (!*(_BYTE *)(v1161 + 20))
          goto LABEL_1436;
        v1162 = *v1155;
        v1163 = *(uint64_t **)(v1514 + 24);
        v1164 = *(uint64_t **)(v1514 + 32);
        memset(object, 0, 24);
        v1165 = (char *)v1164 - (char *)v1163;
        if (v1164 != v1163)
          break;
        v1157 = 0;
        v1158 = 0;
        v1160 = (_QWORD *)(v1161 + 80);
        v1159 = *(void **)(v1161 + 80);
        if (v1159)
          goto LABEL_1434;
LABEL_1435:
        *(_QWORD *)(v1161 + 80) = v1157;
        *(_QWORD *)(v1161 + 88) = v1158;
        *(_QWORD *)(v1161 + 96) = *(_QWORD *)&object[16];
        sub_20F616F2C(v1161 + 16);
LABEL_1436:
        v1155 += 4;
        if (v1155 == v1156)
          goto LABEL_1467;
      }
      if ((unint64_t)v1165 > 0x5555555555555550)
        sub_20E867F44();
      v1166 = v1165 >> 3;
      v1167 = 24 * (v1165 >> 3);
      v1157 = (char *)operator new(v1167);
      *(_QWORD *)object = v1157;
      *(_QWORD *)&object[16] = &v1157[24 * v1166];
      v1168 = 24 * ((v1167 - 24) / 0x18) + 24;
      bzero(v1157, v1168);
      *(_QWORD *)&object[8] = &v1157[v1168];
      v1158 = v1157;
      do
      {
        v1170 = *v1163;
        if (*(_BYTE *)(*v1163 + 488) && *(_DWORD *)(v1170 + 88) == v1162)
        {
          v1171 = *(_QWORD *)(v1170 + 496);
          v1172 = *(_QWORD *)(v1170 + 504);
          v1173 = *(_QWORD *)(v1170 + 72);
          v1174 = *(_DWORD *)(v1170 + 80);
          if (v1172 != v1171)
          {
            v1175 = (v1172 - v1171) >> 6;
            while (1)
            {
              v1176 = v1175 >> 1;
              v1177 = v1171 + (v1175 >> 1 << 6);
              v1178 = *(_DWORD *)(v1177 + 16);
              _CF = v1178 >= v1162;
              if (v1178 != v1162)
                goto LABEL_1454;
              if (*(_QWORD *)v1177 >= v1173)
                break;
LABEL_1448:
              v1171 = v1177 + 64;
              v1176 = v1175 + ~v1176;
LABEL_1449:
              v1175 = v1176;
              if (!v1176)
                goto LABEL_1457;
            }
            if (*(_QWORD *)v1177 != v1173)
              goto LABEL_1449;
            _CF = *(_DWORD *)(v1177 + 8) >= v1174;
LABEL_1454:
            if (_CF)
              goto LABEL_1449;
            goto LABEL_1448;
          }
LABEL_1457:
          if (v1171 != v1172 && *(_DWORD *)(v1171 + 16) == v1162 && *(_QWORD *)v1171 == v1173)
          {
            v1180 = *(_DWORD *)(v1171 + 8);
            v1169 = v1171 + 24;
            if (v1180 != v1174)
              v1169 = 0;
          }
          else
          {
            v1169 = 0;
          }
          *(_DWORD *)v1158 = *(_QWORD *)(v1170 + 32);
          *((_QWORD *)v1158 + 1) = v1169;
          *((_QWORD *)v1158 + 2) = v1170 + 40;
          v1158 += 24;
        }
        ++v1163;
      }
      while (v1163 != v1164);
      if (v1158 != *(char **)&object[8])
        *(_QWORD *)&object[8] = v1158;
      v1160 = (_QWORD *)(v1161 + 80);
      v1159 = *(void **)(v1161 + 80);
      if (!v1159)
        goto LABEL_1435;
LABEL_1434:
      *(_QWORD *)(v1161 + 88) = v1159;
      operator delete(v1159);
      *v1160 = 0;
      v1160[1] = 0;
      v1160[2] = 0;
      goto LABEL_1435;
    }
LABEL_1467:
    v1125 = *(_QWORD *)(v1513 + 8216);
    v1126 = *(unsigned __int8 *)(v1125 + 1720);
  }
LABEL_1468:
  v1181 = v1125 + 864;
  if (!v1126)
    v1181 = v1125 + 24;
  if (*(_BYTE *)(v1181 + 432) && *(_BYTE *)(v1513 + 7686) || *(_BYTE *)(v1181 + 433))
  {
    v1182 = *(int **)(v1514 + 5848);
    v1183 = *(int **)(v1514 + 5856);
    if (v1182 != v1183)
    {
      v1184 = (char *)v1183 - (char *)v1182 - 16;
      v1185 = *(int **)(v1514 + 5848);
      if (v1184 < 0x10)
        goto LABEL_1923;
      v1186 = (v1184 >> 4) + 1;
      v1185 = &v1182[4 * (v1186 & 0x1FFFFFFFFFFFFFFELL)];
      v1187 = (uint64_t *)(v1182 + 6);
      v1188 = v1186 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v1189 = *(v1187 - 2);
        v1190 = *v1187;
        v1187 += 4;
        *(_BYTE *)(v1189 + 20) = 1;
        *(_BYTE *)(v1190 + 20) = 1;
        v1188 -= 2;
      }
      while (v1188);
      if (v1186 != (v1186 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_1923:
        do
        {
          *(_BYTE *)(*((_QWORD *)v1185 + 1) + 20) = 1;
          v1185 += 4;
        }
        while (v1185 != v1183);
      }
    }
    *(_OWORD *)v1557 = 0u;
    *(_OWORD *)v1556 = 0u;
    *(_DWORD *)&v1557[16] = 1065353216;
    v1191 = (__int128 **)a9[5];
    v1192 = (__int128 **)a9[6];
    if (v1191 != v1192)
    {
      do
      {
        v1193 = *v1191;
        v1194 = **v1191;
        *(_QWORD *)&object[16] = *((_QWORD *)*v1191 + 2);
        *(_OWORD *)object = v1194;
        *(_OWORD *)&object[24] = *(__int128 *)((char *)v1193 + 24);
        sub_20F61A180((uint64_t)v1556, (uint64_t *)object, (uint64_t)object);
        v1191 += 2;
      }
      while (v1191 != v1192);
      v1182 = *(int **)(v1514 + 5848);
      v1183 = *(int **)(v1514 + 5856);
    }
    for (; v1182 != v1183; v1182 += 4)
    {
      v1195 = *((_QWORD *)v1182 + 1);
      if (*(_BYTE *)(v1195 + 20))
      {
        v1196 = *v1182;
        v1197.n128_u32[1] = 0;
        v1197.n128_u64[1] = 0;
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 1065353216;
        v1198 = *(uint64_t **)v1557;
        if (*(_QWORD *)v1557)
        {
          do
          {
            if (*((_DWORD *)v1198 + 8) == v1196)
              sub_20F619C7C((uint64_t)object, v1198 + 2, (uint64_t)(v1198 + 2));
            v1198 = (uint64_t *)*v1198;
          }
          while (v1198);
        }
        if (*(_QWORD *)(v1195 + 264) != *(_QWORD *)(v1195 + 256)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 717, (uint64_t)"id_variable.second.variable.NumRegisteredTracks() == 0", 54, (uint64_t)"We should have zero tracks", 26, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (*(_QWORD *)(v1195 + 304))
        {
          v1199 = *(_QWORD **)(v1195 + 296);
          if (v1199)
          {
            do
            {
              v1200 = (_QWORD *)*v1199;
              operator delete(v1199);
              v1199 = v1200;
            }
            while (v1200);
          }
          *(_QWORD *)(v1195 + 296) = 0;
          v1201 = *(_QWORD *)(v1195 + 288);
          if (v1201)
          {
            for (jj = 0; jj != v1201; ++jj)
              *(_QWORD *)(*(_QWORD *)(v1195 + 280) + 8 * jj) = 0;
          }
          *(_QWORD *)(v1195 + 304) = 0;
        }
        v1203 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        v1204 = *(void **)(v1195 + 280);
        *(_QWORD *)(v1195 + 280) = v1203;
        if (v1204)
          operator delete(v1204);
        v1205 = *(_QWORD *)&object[8];
        v1206 = *(uint64_t ***)&object[16];
        *(_QWORD *)&object[8] = 0;
        v1207 = *(_QWORD *)&object[24];
        *(_QWORD *)(v1195 + 296) = *(_QWORD *)&object[16];
        *(_QWORD *)(v1195 + 304) = v1207;
        v1197.n128_u32[0] = *(_DWORD *)&object[32];
        *(_DWORD *)(v1195 + 312) = *(_DWORD *)&object[32];
        *(_QWORD *)(v1195 + 288) = v1205;
        if (v1207)
        {
          v1208 = (unint64_t)v1206[1];
          if ((v1205 & (v1205 - 1)) != 0)
          {
            if (v1208 >= v1205)
              v1208 %= v1205;
          }
          else
          {
            v1208 &= v1205 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v1195 + 280) + 8 * v1208) = v1195 + 296;
          *(_QWORD *)&object[16] = 0;
          *(_QWORD *)&object[24] = 0;
          v1206 = *(uint64_t ***)(v1195 + 296);
        }
        for (; v1206; v1206 = (uint64_t **)*v1206)
          v1197.n128_f64[0] = sub_20F6182A0((char *)v1206[5], (float64x2_t *)(v1195 + 32), v1197);
        sub_20F6178A8(v1195 + 16);
        v1209 = *(_QWORD **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          do
          {
            v1210 = (_QWORD *)*v1209;
            operator delete(v1209);
            v1209 = v1210;
          }
          while (v1210);
        }
        v1211 = *(void **)object;
        *(_QWORD *)object = 0;
        if (v1211)
          operator delete(v1211);
      }
    }
    v1212 = *(_QWORD **)v1557;
    if (*(_QWORD *)v1557)
    {
      do
      {
        v1213 = (_QWORD *)*v1212;
        operator delete(v1212);
        v1212 = v1213;
      }
      while (v1213);
    }
    v1214 = v1556[0];
    v1556[0] = 0;
    if (v1214)
      operator delete(v1214);
    v1215 = *(int **)(v1514 + 5848);
    v1216 = *(int **)(v1514 + 5856);
    if (v1215 != v1216)
    {
      while (1)
      {
        v1217 = *((_QWORD *)v1215 + 1);
        if (!*(_BYTE *)(v1217 + 20))
          goto LABEL_1520;
        v1218 = *v1215;
        v1219 = *(uint64_t **)(v1514 + 24);
        v1220 = *(uint64_t **)(v1514 + 32);
        memset(object, 0, 24);
        v1221 = (char *)v1220 - (char *)v1219;
        if (v1220 != v1219)
          break;
        v1224 = 0;
        v1226 = 0;
        v1239 = *(void **)(v1217 + 256);
        if (v1239)
          goto LABEL_1552;
LABEL_1519:
        *(_QWORD *)(v1217 + 256) = v1224;
        *(_QWORD *)(v1217 + 264) = v1226;
        *(_QWORD *)(v1217 + 272) = *(_QWORD *)&object[16];
        sub_20F6178A8(v1217 + 16);
LABEL_1520:
        v1215 += 4;
        if (v1215 == v1216)
          goto LABEL_1553;
      }
      if ((unint64_t)v1221 > 0x5555555555555550)
        sub_20E867F44();
      v1222 = v1221 >> 3;
      v1223 = 24 * (v1221 >> 3);
      v1224 = (char *)operator new(v1223);
      *(_QWORD *)object = v1224;
      *(_QWORD *)&object[16] = &v1224[24 * v1222];
      v1225 = 24 * ((v1223 - 24) / 0x18) + 24;
      bzero(v1224, v1225);
      *(_QWORD *)&object[8] = &v1224[v1225];
      v1226 = v1224;
      do
      {
        v1228 = *v1219;
        if (*(_BYTE *)(*v1219 + 488) && *(_DWORD *)(v1228 + 88) == v1218)
        {
          v1229 = *(_QWORD *)(v1228 + 496);
          v1230 = *(_QWORD *)(v1228 + 504);
          v1231 = *(_QWORD *)(v1228 + 72);
          v1232 = *(_DWORD *)(v1228 + 80);
          if (v1230 != v1229)
          {
            v1233 = (v1230 - v1229) >> 6;
            while (1)
            {
              v1234 = v1233 >> 1;
              v1235 = v1229 + (v1233 >> 1 << 6);
              v1236 = *(_DWORD *)(v1235 + 16);
              v1237 = v1236 >= v1218;
              if (v1236 != v1218)
                goto LABEL_1538;
              if (*(_QWORD *)v1235 >= v1231)
                break;
LABEL_1532:
              v1229 = v1235 + 64;
              v1234 = v1233 + ~v1234;
LABEL_1533:
              v1233 = v1234;
              if (!v1234)
                goto LABEL_1541;
            }
            if (*(_QWORD *)v1235 != v1231)
              goto LABEL_1533;
            v1237 = *(_DWORD *)(v1235 + 8) >= v1232;
LABEL_1538:
            if (v1237)
              goto LABEL_1533;
            goto LABEL_1532;
          }
LABEL_1541:
          if (v1229 != v1230 && *(_DWORD *)(v1229 + 16) == v1218 && *(_QWORD *)v1229 == v1231)
          {
            v1238 = *(_DWORD *)(v1229 + 8);
            v1227 = v1229 + 24;
            if (v1238 != v1232)
              v1227 = 0;
          }
          else
          {
            v1227 = 0;
          }
          *(_DWORD *)v1226 = *(_QWORD *)(v1228 + 32);
          *((_QWORD *)v1226 + 1) = v1227;
          *((_QWORD *)v1226 + 2) = v1228 + 40;
          v1226 += 24;
        }
        ++v1219;
      }
      while (v1219 != v1220);
      if (v1226 != *(char **)&object[8])
        *(_QWORD *)&object[8] = v1226;
      v1239 = *(void **)(v1217 + 256);
      if (!v1239)
        goto LABEL_1519;
LABEL_1552:
      *(_QWORD *)(v1217 + 264) = v1239;
      operator delete(v1239);
      *(_QWORD *)(v1217 + 256) = 0;
      *(_QWORD *)(v1217 + 264) = 0;
      *(_QWORD *)(v1217 + 272) = 0;
      goto LABEL_1519;
    }
LABEL_1553:
    v1125 = *(_QWORD *)(v1513 + 8216);
    v1126 = *(unsigned __int8 *)(v1125 + 1720);
  }
  v1240 = v1125 + 864;
  v1241 = v1125 + 24;
  if (v1126)
    v1241 = v1240;
  if (*(_BYTE *)(v1241 + 434))
  {
    v1242 = *(int **)(v1514 + 5944);
    v1243 = *(int **)(v1514 + 5952);
    if (v1242 != v1243)
    {
      v1244 = (char *)v1243 - (char *)v1242 - 16;
      v1245 = *(int **)(v1514 + 5944);
      if (v1244 < 0x10)
        goto LABEL_1924;
      v1246 = (v1244 >> 4) + 1;
      v1245 = &v1242[4 * (v1246 & 0x1FFFFFFFFFFFFFFELL)];
      v1247 = (uint64_t *)(v1242 + 6);
      v1248 = v1246 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v1249 = *(v1247 - 2);
        v1250 = *v1247;
        v1247 += 4;
        *(_BYTE *)(v1249 + 20) = 1;
        *(_BYTE *)(v1250 + 20) = 1;
        v1248 -= 2;
      }
      while (v1248);
      if (v1246 != (v1246 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_1924:
        do
        {
          *(_BYTE *)(*((_QWORD *)v1245 + 1) + 20) = 1;
          v1245 += 4;
        }
        while (v1245 != v1243);
      }
    }
    *(_OWORD *)v1557 = 0u;
    *(_OWORD *)v1556 = 0u;
    *(_DWORD *)&v1557[16] = 1065353216;
    v1251 = (__int128 **)a9[5];
    v1252 = (__int128 **)a9[6];
    if (v1251 != v1252)
    {
      do
      {
        v1253 = *v1251;
        v1254 = **v1251;
        *(_QWORD *)&object[16] = *((_QWORD *)*v1251 + 2);
        *(_OWORD *)object = v1254;
        *(_OWORD *)&object[24] = *(__int128 *)((char *)v1253 + 24);
        sub_20F61A180((uint64_t)v1556, (uint64_t *)object, (uint64_t)object);
        v1251 += 2;
      }
      while (v1251 != v1252);
      v1242 = *(int **)(v1514 + 5944);
      v1243 = *(int **)(v1514 + 5952);
    }
    for (; v1242 != v1243; v1242 += 4)
    {
      v1255 = *((_QWORD *)v1242 + 1);
      if (*(_BYTE *)(v1255 + 20))
      {
        v1256 = *v1242;
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 1065353216;
        v1257 = *(uint64_t **)v1557;
        if (*(_QWORD *)v1557)
        {
          do
          {
            if (*((_DWORD *)v1257 + 8) == v1256)
              sub_20F619C7C((uint64_t)object, v1257 + 2, (uint64_t)(v1257 + 2));
            v1257 = (uint64_t *)*v1257;
          }
          while (v1257);
        }
        if (*(_QWORD *)(v1255 + 112) != *(_QWORD *)(v1255 + 104)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 717, (uint64_t)"id_variable.second.variable.NumRegisteredTracks() == 0", 54, (uint64_t)"We should have zero tracks", 26, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        sub_20EB0F04C(v1255 + 128, (uint64_t *)object);
        sub_20F811C04(v1255 + 16);
        v1258 = *(_QWORD **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          do
          {
            v1259 = (_QWORD *)*v1258;
            operator delete(v1258);
            v1258 = v1259;
          }
          while (v1259);
        }
        v1260 = *(void **)object;
        *(_QWORD *)object = 0;
        if (v1260)
          operator delete(v1260);
      }
    }
    v1261 = *(_QWORD **)v1557;
    if (*(_QWORD *)v1557)
    {
      do
      {
        v1262 = (_QWORD *)*v1261;
        operator delete(v1261);
        v1261 = v1262;
      }
      while (v1262);
    }
    v1263 = v1556[0];
    v1556[0] = 0;
    if (v1263)
      operator delete(v1263);
    v1264 = *(int **)(v1514 + 5944);
    v1265 = *(int **)(v1514 + 5952);
    if (v1264 != v1265)
    {
      while (1)
      {
        v1266 = *((_QWORD *)v1264 + 1);
        if (!*(_BYTE *)(v1266 + 20))
          goto LABEL_1587;
        v1267 = *v1264;
        v1268 = *(uint64_t **)(v1514 + 24);
        v1269 = *(uint64_t **)(v1514 + 32);
        memset(object, 0, 24);
        v1270 = (char *)v1269 - (char *)v1268;
        if (v1269 != v1268)
          break;
        v1275 = 0;
        v1273 = 0;
        v1289 = (_QWORD *)(v1266 + 104);
        v1288 = *(void **)(v1266 + 104);
        if (v1288)
          goto LABEL_1619;
LABEL_1586:
        *(_QWORD *)(v1266 + 104) = v1273;
        *(_QWORD *)(v1266 + 112) = v1275;
        *(_QWORD *)(v1266 + 120) = *(_QWORD *)&object[16];
        sub_20F811E38(v1266 + 16);
LABEL_1587:
        v1264 += 4;
        if (v1264 == v1265)
          goto LABEL_1620;
      }
      if ((unint64_t)v1270 > 0x5555555555555550)
        sub_20E867F44();
      v1271 = v1270 >> 3;
      v1272 = 24 * (v1270 >> 3);
      v1273 = (char *)operator new(v1272);
      *(_QWORD *)object = v1273;
      *(_QWORD *)&object[16] = &v1273[24 * v1271];
      v1274 = 24 * ((v1272 - 24) / 0x18) + 24;
      bzero(v1273, v1274);
      *(_QWORD *)&object[8] = &v1273[v1274];
      v1275 = v1273;
      do
      {
        v1277 = *v1268;
        if (*(_BYTE *)(*v1268 + 488) && *(_DWORD *)(v1277 + 88) == v1267)
        {
          v1278 = *(_QWORD *)(v1277 + 496);
          v1279 = *(_QWORD *)(v1277 + 504);
          v1280 = *(_QWORD *)(v1277 + 72);
          v1281 = *(_DWORD *)(v1277 + 80);
          if (v1279 != v1278)
          {
            v1282 = (v1279 - v1278) >> 6;
            while (1)
            {
              v1283 = v1282 >> 1;
              v1284 = v1278 + (v1282 >> 1 << 6);
              v1285 = *(_DWORD *)(v1284 + 16);
              v1286 = v1285 >= v1267;
              if (v1285 != v1267)
                goto LABEL_1605;
              if (*(_QWORD *)v1284 >= v1280)
                break;
LABEL_1599:
              v1278 = v1284 + 64;
              v1283 = v1282 + ~v1283;
LABEL_1600:
              v1282 = v1283;
              if (!v1283)
                goto LABEL_1608;
            }
            if (*(_QWORD *)v1284 != v1280)
              goto LABEL_1600;
            v1286 = *(_DWORD *)(v1284 + 8) >= v1281;
LABEL_1605:
            if (v1286)
              goto LABEL_1600;
            goto LABEL_1599;
          }
LABEL_1608:
          if (v1278 != v1279 && *(_DWORD *)(v1278 + 16) == v1267 && *(_QWORD *)v1278 == v1280)
          {
            v1287 = *(_DWORD *)(v1278 + 8);
            v1276 = v1278 + 24;
            if (v1287 != v1281)
              v1276 = 0;
          }
          else
          {
            v1276 = 0;
          }
          *(_DWORD *)v1275 = *(_QWORD *)(v1277 + 32);
          *((_QWORD *)v1275 + 1) = v1276;
          *((_QWORD *)v1275 + 2) = v1277 + 40;
          v1275 += 24;
        }
        ++v1268;
      }
      while (v1268 != v1269);
      if (v1275 != *(char **)&object[8])
        *(_QWORD *)&object[8] = v1275;
      v1289 = (_QWORD *)(v1266 + 104);
      v1288 = *(void **)(v1266 + 104);
      if (!v1288)
        goto LABEL_1586;
LABEL_1619:
      *(_QWORD *)(v1266 + 112) = v1288;
      operator delete(v1288);
      *v1289 = 0;
      v1289[1] = 0;
      v1289[2] = 0;
      goto LABEL_1586;
    }
  }
LABEL_1620:
  if (*(_BYTE *)(v1457 + 1618))
  {
    if (!*(_BYTE *)(v1457 + 1619))
      goto LABEL_1768;
    goto LABEL_1696;
  }
  v1290.f64[1] = 0.0;
  *(_OWORD *)v1557 = 0u;
  *(_OWORD *)v1556 = 0u;
  *(_DWORD *)&v1557[16] = 1065353216;
  if (v1512)
  {
    v1291 = (_QWORD *)(*a9 + 56);
    v1292 = *(_QWORD **)(*a9 + 48);
    if (v1291 != v1292)
    {
      v1293 = 0;
      do
      {
        v1294 = (_QWORD *)*v1291;
        v1295 = (_QWORD *)*v1291;
        v1296 = v1291;
        if (*v1291)
        {
          do
          {
            v1297 = v1295;
            v1295 = (_QWORD *)v1295[1];
          }
          while (v1295);
        }
        else
        {
          do
          {
            v1297 = (_QWORD *)v1296[2];
            _ZF = *v1297 == (_QWORD)v1296;
            v1296 = v1297;
          }
          while (_ZF);
        }
        v1298 = v1291;
        if (v1294)
        {
          do
          {
            v1299 = v1294;
            v1294 = (_QWORD *)v1294[1];
          }
          while (v1294);
        }
        else
        {
          do
          {
            v1299 = (_QWORD *)v1298[2];
            _ZF = *v1299 == (_QWORD)v1298;
            v1298 = v1299;
          }
          while (_ZF);
        }
        v1300 = *((_DWORD *)v1297 + 10);
        v1301 = v1299[6];
        v1290.f64[0] = *(float64_t *)(v1301 + 16);
        v1302 = *(int64x2_t *)v1301;
        _Q2.i64[0] = *(_QWORD *)(v1301 + 40);
        v1303 = *(int64x2_t *)(v1301 + 24);
        _D4 = *(double *)(v1301 + 64);
        _Q5 = *(float64x2_t *)(v1301 + 48);
        v1306 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1301, v1303);
        _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1301, v1303);
        v1308 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v1309 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v1310 = *(double *)(v1301 + 88);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1306, *(double *)(v1301 + 72)), _Q3, *(float64x2_t *)(v1301 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1290, _Q2), v1310);
        _D16 = *(_QWORD *)(v1301 + 80);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v1310;
        v1313 = vnegq_f64(_Q21);
        *(_DWORD *)object = v1300;
        v1314 = (int64x2_t)vextq_s8(v1309, v1308, 8uLL);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)&object[24] = v1290.f64[0];
        *(int64x2_t *)&object[8] = vzip1q_s64(v1302, v1314);
        *(int64x2_t *)&object[32] = vzip2q_s64((int64x2_t)v1306, v1314);
        *(_QWORD *)&object[48] = _Q2.i64[0];
        *(double *)&object[72] = _D4;
        *(float64x2_t *)&object[56] = _Q5;
        _Q0 = vmulq_f64(v1290, v1313);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        *(float64x2_t *)&object[80] = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[8], v1313.f64[0]), *(float64x2_t *)&object[32], _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(_QWORD *)&object[96] = *(_OWORD *)&vnegq_f64(_Q0);
        sub_20FC37F68((float *)v1556, v1300, (uint64_t)object);
        v1316 = (_QWORD *)*v1291;
        if (*v1291)
        {
          do
          {
            v1317 = v1316;
            v1316 = (_QWORD *)v1316[1];
          }
          while (v1316);
        }
        else
        {
          do
          {
            v1317 = (_QWORD *)v1291[2];
            _ZF = *v1317 == (_QWORD)v1291;
            v1291 = v1317;
          }
          while (_ZF);
        }
        if (++v1293 >= v1512)
          break;
        v1291 = v1317;
      }
      while (v1317 != v1292);
    }
  }
  if (!*(_BYTE *)(v1514 + 2146))
  {
    v1319 = (std::__shared_weak_count *)operator new(0x58uLL);
    v1319->__shared_owners_ = 0;
    v1319->__shared_weak_owners_ = 0;
    v1319[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA01718;
    v1320 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    v1319->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA016C8;
    *(int64x2_t *)&v1319[1].__shared_weak_owners_ = v1320;
    *(int64x2_t *)&v1319[2].__shared_owners_ = v1320;
    v1319[3].std::__shared_count = (std::__shared_count)v1320;
    LOBYTE(v1319[1].__shared_owners_) = 1;
    v1654[0] = &v1319[1];
    v1654[1] = v1319;
    v1321 = *(_QWORD *)(v1514 + 8);
    v1322 = *(_QWORD **)(v1321 + 48);
    v1323 = (_QWORD *)(v1321 + 56);
    if (v1322 != (_QWORD *)(v1321 + 56))
    {
      v1324 = (int8x8_t)v1556[1];
      if (v1556[1])
      {
LABEL_1645:
        v1325 = *((unsigned int *)v1322 + 10);
        v1326 = (uint8x8_t)vcnt_s8(v1324);
        v1326.i16[0] = vaddlv_u8(v1326);
        if (v1326.u32[0] > 1uLL)
        {
          v1327 = *((unsigned int *)v1322 + 10);
          if (*(_QWORD *)&v1324 <= v1325)
            v1327 = v1325 % *(_QWORD *)&v1324;
        }
        else
        {
          v1327 = (v1324.i32[0] - 1) & v1325;
        }
        v1328 = (uint64_t **)*((_QWORD *)v1556[0] + v1327);
        if (v1328)
        {
          v1329 = *v1328;
          if (v1329)
          {
            if (v1326.u32[0] < 2uLL)
            {
              v1330 = *(_QWORD *)&v1324 - 1;
              while (1)
              {
                v1332 = v1329[1];
                if (v1332 == v1325)
                {
                  if (*((_DWORD *)v1329 + 4) == (_DWORD)v1325)
                    goto LABEL_1665;
                }
                else if ((v1332 & v1330) != v1327)
                {
                  goto LABEL_1680;
                }
                v1329 = (uint64_t *)*v1329;
                if (!v1329)
                  goto LABEL_1680;
              }
            }
            while (1)
            {
              v1331 = v1329[1];
              if (v1331 == v1325)
              {
                if (*((_DWORD *)v1329 + 4) == (_DWORD)v1325)
                {
LABEL_1665:
                  v1333 = *(_QWORD *)(v1514 + 6264);
                  if (v1333 == *(_QWORD *)(v1514 + 6256))
                    LODWORD(v1334) = 0;
                  else
                    v1334 = *(_QWORD *)(v1333 - 272) + 1;
                  v1335 = v1334;
                  *(_OWORD *)&object[16] = *(_OWORD *)(v1329 + 3);
                  v1336 = *(_OWORD *)(v1329 + 5);
                  v1337 = *(_OWORD *)(v1329 + 7);
                  v1338 = *(_OWORD *)(v1329 + 9);
                  *(_QWORD *)&object[80] = v1329[11];
                  *(_OWORD *)&object[48] = v1337;
                  *(_OWORD *)&object[64] = v1338;
                  *(_OWORD *)&object[32] = v1336;
                  v1339 = v1329[14];
                  *(_OWORD *)&object[88] = *((_OWORD *)v1329 + 6);
                  *(_QWORD *)&object[104] = v1339;
                  *(_QWORD *)object = v1335;
                  *(void **)&object[112] = v1654[0];
                  *(void **)&object[120] = v1654[1];
                  if (v1654[1])
                  {
                    v1340 = (unint64_t *)((char *)v1654[1] + 8);
                    do
                      v1341 = __ldxr(v1340);
                    while (__stxr(v1341 + 1, v1340));
                  }
                  LODWORD(v1638) = v1325;
                  v1646 = 0uLL;
                  v1662[0] = 0uLL;
                  if ((sub_20FBAFAA8(v1514 + 5168, (__int128 *)object, &v1638, 0, 0, v1318) & 1) != 0)
                  {
                    *(_BYTE *)(v1514 + 7828) = 0;
                    *(_DWORD *)(v1514 + 7824) = 0;
                    v1342 = *(std::__shared_weak_count **)&object[120];
                    if (!*(_QWORD *)&object[120])
                      goto LABEL_1680;
                  }
                  else
                  {
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1930, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    v1342 = *(std::__shared_weak_count **)&object[120];
                    if (!*(_QWORD *)&object[120])
                      goto LABEL_1680;
                  }
                  v1343 = (unint64_t *)&v1342->__shared_owners_;
                  do
                    v1344 = __ldaxr(v1343);
                  while (__stlxr(v1344 - 1, v1343));
                  if (!v1344)
                  {
                    ((void (*)(std::__shared_weak_count *))v1342->__on_zero_shared)(v1342);
                    std::__shared_weak_count::__release_weak(v1342);
                  }
                  goto LABEL_1680;
                }
              }
              else
              {
                if (v1331 >= *(_QWORD *)&v1324)
                  v1331 %= *(_QWORD *)&v1324;
                if (v1331 != v1327)
                  goto LABEL_1680;
              }
              v1329 = (uint64_t *)*v1329;
              if (!v1329)
                goto LABEL_1680;
            }
          }
        }
        while (1)
        {
LABEL_1680:
          v1345 = (_QWORD *)v1322[1];
          if (v1345)
          {
            do
            {
              v1346 = v1345;
              v1345 = (_QWORD *)*v1345;
            }
            while (v1345);
          }
          else
          {
            do
            {
              v1346 = (_QWORD *)v1322[2];
              _ZF = *v1346 == (_QWORD)v1322;
              v1322 = v1346;
            }
            while (!_ZF);
          }
          if (v1346 == v1323)
            break;
          v1324 = (int8x8_t)v1556[1];
          v1322 = v1346;
          if (v1556[1])
            goto LABEL_1645;
        }
        v1319 = (std::__shared_weak_count *)v1654[1];
        if (!v1654[1])
          goto LABEL_1691;
      }
      else
      {
        do
        {
          v1422 = (_QWORD *)v1322[1];
          if (v1422)
          {
            do
            {
              v1423 = v1422;
              v1422 = (_QWORD *)*v1422;
            }
            while (v1422);
          }
          else
          {
            do
            {
              v1423 = (_QWORD *)v1322[2];
              _ZF = *v1423 == (_QWORD)v1322;
              v1322 = v1423;
            }
            while (!_ZF);
          }
          v1322 = v1423;
        }
        while (v1423 != v1323);
      }
    }
    v1347 = (unint64_t *)&v1319->__shared_owners_;
    do
      v1348 = __ldaxr(v1347);
    while (__stlxr(v1348 - 1, v1347));
    if (!v1348)
    {
      ((void (*)(std::__shared_weak_count *))v1319->__on_zero_shared)(v1319);
      std::__shared_weak_count::__release_weak(v1319);
    }
  }
LABEL_1691:
  v1349 = *(_QWORD **)v1557;
  if (*(_QWORD *)v1557)
  {
    do
    {
      v1350 = (_QWORD *)*v1349;
      operator delete(v1349);
      v1349 = v1350;
    }
    while (v1350);
  }
  v1351 = v1556[0];
  v1556[0] = 0;
  if (v1351)
    operator delete(v1351);
  if (!*(_BYTE *)(v1457 + 1619))
    goto LABEL_1768;
LABEL_1696:
  *(_OWORD *)v1655 = 0u;
  *(_OWORD *)v1654 = 0u;
  LODWORD(v1656) = 1065353216;
  if (v1512)
  {
    v1352 = (_QWORD *)(*a9 + 56);
    v1353 = *(_QWORD **)(*a9 + 48);
    if (v1352 != v1353)
    {
      v1354 = 0;
      do
      {
        v1355 = (_QWORD *)*v1352;
        v1356 = (_QWORD *)*v1352;
        v1357 = v1352;
        if (*v1352)
        {
          do
          {
            v1358 = v1356;
            v1356 = (_QWORD *)v1356[1];
          }
          while (v1356);
        }
        else
        {
          do
          {
            v1358 = (_QWORD *)v1357[2];
            _ZF = *v1358 == (_QWORD)v1357;
            v1357 = v1358;
          }
          while (_ZF);
        }
        v1359 = v1352;
        if (v1355)
        {
          do
          {
            v1360 = v1355;
            v1355 = (_QWORD *)v1355[1];
          }
          while (v1355);
        }
        else
        {
          do
          {
            v1360 = (_QWORD *)v1359[2];
            _ZF = *v1360 == (_QWORD)v1359;
            v1359 = v1360;
          }
          while (_ZF);
        }
        v1361 = *((_DWORD *)v1358 + 10);
        v1362 = v1360[6];
        v1363 = *(double *)(v1362 + 16);
        v1364 = *(double *)(v1362 + 40);
        v1365 = *(float64x2_t *)(v1362 + 24);
        v1366 = *(_QWORD *)(v1362 + 64);
        v1367 = *(_OWORD *)(v1362 + 48);
        v1662[0] = *(float64x2_t *)v1362;
        v1662[1].f64[0] = v1363;
        *(float64x2_t *)((char *)&v1662[1] + 8) = v1365;
        v1662[2].f64[1] = v1364;
        v1663 = v1367;
        *(_QWORD *)&v1664 = v1366;
        sub_20F1B6B0C(v1662);
        *(float64x2_t *)&v1557[16] = v1662[2];
        *(_OWORD *)&v1557[32] = v1663;
        *(_QWORD *)&v1557[48] = v1664;
        *(float64x2_t *)v1557 = v1662[1];
        *(float64x2_t *)v1556 = v1662[0];
        v1558 = *(_OWORD *)(v1362 + 72);
        *(_QWORD *)&v1559 = *(_QWORD *)(v1362 + 88);
        *(_OWORD *)&v1557[80] = *(_OWORD *)(v1362 + 96);
        *(_QWORD *)&v1557[96] = *(_QWORD *)(v1362 + 112);
        *(_OWORD *)&v1557[56] = *(_OWORD *)(v1362 + 120);
        *(_QWORD *)&v1557[72] = *(_QWORD *)(v1362 + 136);
        *(_QWORD *)&v1557[120] = *(_QWORD *)(v1362 + 160);
        *(_OWORD *)&v1557[104] = *(_OWORD *)(v1362 + 144);
        *(_DWORD *)object = v1361;
        *(float64x2_t *)&object[8] = v1662[0];
        *(float64x2_t *)&object[24] = v1662[1];
        *(_OWORD *)&object[72] = *(_OWORD *)&v1557[48];
        *(_OWORD *)&object[88] = *(_OWORD *)&v1557[64];
        *(float64x2_t *)&object[40] = v1662[2];
        *(_OWORD *)&object[56] = v1663;
        *(_QWORD *)&object[168] = v1559;
        *(_OWORD *)&object[136] = *(_OWORD *)&v1557[112];
        *(_OWORD *)&object[152] = v1558;
        *(_OWORD *)&object[104] = *(_OWORD *)&v1557[80];
        *(_OWORD *)&object[120] = *(_OWORD *)&v1557[96];
        sub_20FC38434((float *)v1654, v1361, (uint64_t)object);
        v1368 = (_QWORD *)*v1352;
        if (*v1352)
        {
          do
          {
            v1369 = v1368;
            v1368 = (_QWORD *)v1368[1];
          }
          while (v1368);
        }
        else
        {
          do
          {
            v1369 = (_QWORD *)v1352[2];
            _ZF = *v1369 == (_QWORD)v1352;
            v1352 = v1369;
          }
          while (_ZF);
        }
        if (++v1354 >= v1512)
          break;
        v1352 = v1369;
      }
      while (v1369 != v1353);
    }
  }
  *(int64x2_t *)v1556 = vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  *(_OWORD *)v1557 = *(_OWORD *)v1556;
  *(_OWORD *)&v1557[16] = *(_OWORD *)v1556;
  *(_OWORD *)&v1557[32] = *(_OWORD *)v1556;
  *(_OWORD *)&v1557[48] = *(_OWORD *)v1556;
  *(_OWORD *)&v1557[64] = *(_OWORD *)v1556;
  *(_OWORD *)&v1557[80] = *(_OWORD *)v1556;
  *(_QWORD *)&v1557[96] = 0x3EB0C6F7A0B5ED8DLL;
  v1370 = (std::__shared_weak_count *)operator new(0x738uLL);
  sub_20FC372B0((uint64_t)v1370, (uint64_t *)v1556, 2);
  *(_QWORD *)&v1646 = v1370 + 1;
  *((_QWORD *)&v1646 + 1) = v1370;
  v1371 = *(_QWORD *)(v1514 + 8);
  v1372 = *(_QWORD **)(v1371 + 48);
  v1373 = (_QWORD *)(v1371 + 56);
  if (v1372 == (_QWORD *)(v1371 + 56))
  {
LABEL_1760:
    v1393 = (unint64_t *)&v1370->__shared_owners_;
    do
      v1394 = __ldaxr(v1393);
    while (__stlxr(v1394 - 1, v1393));
    if (!v1394)
    {
      ((void (*)(std::__shared_weak_count *))v1370->__on_zero_shared)(v1370);
      std::__shared_weak_count::__release_weak(v1370);
    }
    goto LABEL_1764;
  }
  v1374 = (int8x8_t)v1654[1];
  if (!v1654[1])
  {
    do
    {
      v1420 = (_QWORD *)v1372[1];
      if (v1420)
      {
        do
        {
          v1421 = v1420;
          v1420 = (_QWORD *)*v1420;
        }
        while (v1420);
      }
      else
      {
        do
        {
          v1421 = (_QWORD *)v1372[2];
          _ZF = *v1421 == (_QWORD)v1372;
          v1372 = v1421;
        }
        while (!_ZF);
      }
      v1372 = v1421;
    }
    while (v1421 != v1373);
    goto LABEL_1760;
  }
  while (2)
  {
    v1375 = *((unsigned int *)v1372 + 10);
    v1376 = (uint8x8_t)vcnt_s8(v1374);
    v1376.i16[0] = vaddlv_u8(v1376);
    if (v1376.u32[0] > 1uLL)
    {
      v1377 = *((unsigned int *)v1372 + 10);
      if (*(_QWORD *)&v1374 <= v1375)
        v1377 = v1375 % *(_QWORD *)&v1374;
    }
    else
    {
      v1377 = (v1374.i32[0] - 1) & v1375;
    }
    v1378 = (uint64_t **)*((_QWORD *)v1654[0] + v1377);
    if (!v1378 || (v1379 = *v1378) == 0)
    {
LABEL_1753:
      v1391 = (_QWORD *)v1372[1];
      if (!v1391)
        goto LABEL_1756;
      do
      {
LABEL_1754:
        v1392 = v1391;
        v1391 = (_QWORD *)*v1391;
      }
      while (v1391);
      goto LABEL_1758;
    }
    if (v1376.u32[0] < 2uLL)
    {
      v1380 = *(_QWORD *)&v1374 - 1;
      while (1)
      {
        v1382 = v1379[1];
        if (v1382 == v1375)
        {
          if (*((_DWORD *)v1379 + 4) == (_DWORD)v1375)
            goto LABEL_1737;
        }
        else if ((v1382 & v1380) != v1377)
        {
          goto LABEL_1753;
        }
        v1379 = (uint64_t *)*v1379;
        if (!v1379)
          goto LABEL_1753;
      }
    }
    while (1)
    {
      v1381 = v1379[1];
      if (v1381 == v1375)
        break;
      if (v1381 >= *(_QWORD *)&v1374)
        v1381 %= *(_QWORD *)&v1374;
      if (v1381 != v1377)
        goto LABEL_1753;
LABEL_1726:
      v1379 = (uint64_t *)*v1379;
      if (!v1379)
        goto LABEL_1753;
    }
    if (*((_DWORD *)v1379 + 4) != (_DWORD)v1375)
      goto LABEL_1726;
LABEL_1737:
    v1383 = *(_QWORD *)(v1514 + 6240);
    if (v1383 == *(_QWORD *)(v1514 + 6232))
      LODWORD(v1384) = 0;
    else
      v1384 = *(_QWORD *)(v1383 - 496) + 1;
    *(_QWORD *)object = v1384;
    memmove(&object[16], v1379 + 3, 0xA8uLL);
    *(_OWORD *)&object[184] = v1646;
    if (*((_QWORD *)&v1646 + 1))
    {
      v1386 = (unint64_t *)(*((_QWORD *)&v1646 + 1) + 8);
      do
        v1387 = __ldxr(v1386);
      while (__stxr(v1387 + 1, v1386));
    }
    *(_QWORD *)&v1630 = v1375 | (v1375 << 32);
    v1638 = 0uLL;
    v1662[0] = 0uLL;
    if ((sub_20FBAE870(v1514 + 5168, (unint64_t *)object, &v1630, 0, 0, v1385) & 1) != 0)
    {
      *(_BYTE *)(v1514 + 7828) = 0;
      *(_DWORD *)(v1514 + 7824) = 0;
      v1388 = *(std::__shared_weak_count **)&object[192];
      if (!*(_QWORD *)&object[192])
        goto LABEL_1753;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1975, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add state prior factor [Moving Platform]", 50, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v1388 = *(std::__shared_weak_count **)&object[192];
      if (!*(_QWORD *)&object[192])
        goto LABEL_1753;
    }
    v1389 = (unint64_t *)&v1388->__shared_owners_;
    do
      v1390 = __ldaxr(v1389);
    while (__stlxr(v1390 - 1, v1389));
    if (v1390)
      goto LABEL_1753;
    ((void (*)(std::__shared_weak_count *))v1388->__on_zero_shared)(v1388);
    std::__shared_weak_count::__release_weak(v1388);
    v1391 = (_QWORD *)v1372[1];
    if (v1391)
      goto LABEL_1754;
    do
    {
LABEL_1756:
      v1392 = (_QWORD *)v1372[2];
      _ZF = *v1392 == (_QWORD)v1372;
      v1372 = v1392;
    }
    while (!_ZF);
LABEL_1758:
    if (v1392 != v1373)
    {
      v1374 = (int8x8_t)v1654[1];
      v1372 = v1392;
      if (!v1654[1])
        goto LABEL_1753;
      continue;
    }
    break;
  }
  v1370 = (std::__shared_weak_count *)*((_QWORD *)&v1646 + 1);
  if (*((_QWORD *)&v1646 + 1))
    goto LABEL_1760;
LABEL_1764:
  v1395 = v1655[0];
  if (v1655[0])
  {
    do
    {
      v1396 = (_QWORD *)*v1395;
      operator delete(v1395);
      v1395 = v1396;
    }
    while (v1396);
  }
  v1397 = v1654[0];
  v1654[0] = 0;
  if (v1397)
    operator delete(v1397);
LABEL_1768:
  *(_QWORD *)v1557 = 0;
  v1556[1] = 0;
  v1556[0] = &v1556[1];
  v1398 = *(_QWORD **)(v1514 + 8);
  v1399 = v1398[8];
  v1400 = v1398[39] * v1399;
  if (*(_BYTE *)(*(_QWORD *)(v1513 + 8216) + 1720))
  {
    v1401 = (v1510[1] - *v1510) >> 2;
    if (v1400 % (unint64_t)v1401)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4929, (uint64_t)"!(active_keyframes_view.size() % state_ids.size())", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v1399 = v1398[8];
      v1401 = (v1510[1] - *v1510) >> 2;
      v1400 = v1398[39] * v1399;
    }
    while (v1400 >= v1401)
    {
      v1402 = *(unsigned int *)(v1513 + 1940);
      if ((_DWORD)v1402)
      {
        v1403 = v1400 - v1402;
        v1404 = v1400;
        do
        {
          v1405 = --v1404 / v1399;
          v1406 = v1404 % v1399;
          v1407 = (_QWORD *)v1398[6];
          if (((v1404 % v1399) & 0x8000000000000000) != 0)
          {
            do
            {
              v1417 = (_QWORD *)*v1407;
              if (*v1407)
              {
                do
                {
                  v1408 = v1417;
                  v1417 = (_QWORD *)v1417[1];
                }
                while (v1417);
              }
              else
              {
                do
                {
                  v1408 = (_QWORD *)v1407[2];
                  _ZF = *v1408 == (_QWORD)v1407;
                  v1407 = v1408;
                }
                while (_ZF);
              }
              v1407 = v1408;
              _CF = __CFADD__(v1406++, 1);
            }
            while (!_CF);
          }
          else if (v1406)
          {
            do
            {
              v1416 = (_QWORD *)v1407[1];
              if (v1416)
              {
                do
                {
                  v1408 = v1416;
                  v1416 = (_QWORD *)*v1416;
                }
                while (v1416);
              }
              else
              {
                do
                {
                  v1408 = (_QWORD *)v1407[2];
                  _ZF = *v1408 == (_QWORD)v1407;
                  v1407 = v1408;
                }
                while (!_ZF);
              }
              v1407 = v1408;
              v422 = v1406-- <= 1;
            }
            while (!v422);
          }
          else
          {
            v1408 = (_QWORD *)v1398[6];
          }
          v1409 = *((_OWORD *)v1408 + 2);
          v1410 = (_QWORD *)v1398[37];
          if (v1405 < 0)
          {
            do
            {
              v1418 = (_QWORD *)*v1410;
              if (*v1410)
              {
                do
                {
                  v1411 = v1418;
                  v1418 = (_QWORD *)v1418[1];
                }
                while (v1418);
              }
              else
              {
                do
                {
                  v1411 = (_QWORD *)v1410[2];
                  _ZF = *v1411 == (_QWORD)v1410;
                  v1410 = v1411;
                }
                while (_ZF);
              }
              v1410 = v1411;
              _CF = __CFADD__(v1405++, 1);
            }
            while (!_CF);
          }
          else if (v1399 <= v1404)
          {
            do
            {
              v1419 = (_QWORD *)v1410[1];
              if (v1419)
              {
                do
                {
                  v1411 = v1419;
                  v1419 = (_QWORD *)*v1419;
                }
                while (v1419);
              }
              else
              {
                do
                {
                  v1411 = (_QWORD *)v1410[2];
                  _ZF = *v1411 == (_QWORD)v1410;
                  v1410 = v1411;
                }
                while (!_ZF);
              }
              v1410 = v1411;
              v422 = v1405-- <= 1;
            }
            while (!v422);
          }
          else
          {
            v1411 = (_QWORD *)v1398[37];
          }
          v1412 = *((_DWORD *)v1411 + 8);
          *(_OWORD *)object = v1409;
          *(_DWORD *)&object[16] = v1412;
          v1413 = sub_20F22F698((uint64_t **)v1556, (uint64_t *)&v1556[1], (uint64_t **)v1662, (uint64_t **)v1654, (unint64_t *)object);
          if (!*v1413)
          {
            v1414 = operator new(0x38uLL);
            v1414[2] = *(_OWORD *)object;
            *((_QWORD *)v1414 + 6) = *(_QWORD *)&object[16];
            v1415 = v1662[0].f64[0];
            *(_QWORD *)v1414 = 0;
            *((_QWORD *)v1414 + 1) = 0;
            *((float64_t *)v1414 + 2) = v1415;
            *v1413 = (uint64_t)v1414;
            if (*(_QWORD *)v1556[0])
            {
              v1556[0] = *(void **)v1556[0];
              v1414 = (_OWORD *)*v1413;
            }
            sub_20E868578((uint64_t *)v1556[1], (uint64_t *)v1414);
            ++*(_QWORD *)v1557;
          }
        }
        while (v1404 != v1403);
      }
      v1400 -= v1401;
    }
  }
  else if (v1400)
  {
    for (kk = 0; kk != v1400; ++kk)
    {
      v1425 = kk / v1399;
      v1426 = kk % v1399;
      v1427 = (_QWORD *)v1398[6];
      if (((kk % v1399) & 0x8000000000000000) != 0)
      {
        do
        {
          v1437 = (_QWORD *)*v1427;
          if (*v1427)
          {
            do
            {
              v1428 = v1437;
              v1437 = (_QWORD *)v1437[1];
            }
            while (v1437);
          }
          else
          {
            do
            {
              v1428 = (_QWORD *)v1427[2];
              _ZF = *v1428 == (_QWORD)v1427;
              v1427 = v1428;
            }
            while (_ZF);
          }
          v1427 = v1428;
          _CF = __CFADD__(v1426++, 1);
        }
        while (!_CF);
      }
      else if (v1426)
      {
        do
        {
          v1436 = (_QWORD *)v1427[1];
          if (v1436)
          {
            do
            {
              v1428 = v1436;
              v1436 = (_QWORD *)*v1436;
            }
            while (v1436);
          }
          else
          {
            do
            {
              v1428 = (_QWORD *)v1427[2];
              _ZF = *v1428 == (_QWORD)v1427;
              v1427 = v1428;
            }
            while (!_ZF);
          }
          v1427 = v1428;
          v422 = v1426-- <= 1;
        }
        while (!v422);
      }
      else
      {
        v1428 = (_QWORD *)v1398[6];
      }
      v1429 = *((_OWORD *)v1428 + 2);
      v1430 = (_QWORD *)v1398[37];
      if (v1425 < 0)
      {
        do
        {
          v1438 = (_QWORD *)*v1430;
          if (*v1430)
          {
            do
            {
              v1431 = v1438;
              v1438 = (_QWORD *)v1438[1];
            }
            while (v1438);
          }
          else
          {
            do
            {
              v1431 = (_QWORD *)v1430[2];
              _ZF = *v1431 == (_QWORD)v1430;
              v1430 = v1431;
            }
            while (_ZF);
          }
          v1430 = v1431;
          _CF = __CFADD__(v1425++, 1);
        }
        while (!_CF);
      }
      else if (v1399 <= kk)
      {
        do
        {
          v1439 = (_QWORD *)v1430[1];
          if (v1439)
          {
            do
            {
              v1431 = v1439;
              v1439 = (_QWORD *)*v1439;
            }
            while (v1439);
          }
          else
          {
            do
            {
              v1431 = (_QWORD *)v1430[2];
              _ZF = *v1431 == (_QWORD)v1430;
              v1430 = v1431;
            }
            while (!_ZF);
          }
          v1430 = v1431;
          v422 = v1425-- <= 1;
        }
        while (!v422);
      }
      else
      {
        v1431 = (_QWORD *)v1398[37];
      }
      v1432 = *((_DWORD *)v1431 + 8);
      *(_OWORD *)object = v1429;
      *(_DWORD *)&object[16] = v1432;
      v1433 = sub_20F22F698((uint64_t **)v1556, (uint64_t *)&v1556[1], (uint64_t **)v1662, (uint64_t **)v1654, (unint64_t *)object);
      if (!*v1433)
      {
        v1434 = operator new(0x38uLL);
        v1434[2] = *(_OWORD *)object;
        *((_QWORD *)v1434 + 6) = *(_QWORD *)&object[16];
        v1435 = v1662[0].f64[0];
        *(_QWORD *)v1434 = 0;
        *((_QWORD *)v1434 + 1) = 0;
        *((float64_t *)v1434 + 2) = v1435;
        *v1433 = (uint64_t)v1434;
        if (*(_QWORD *)v1556[0])
        {
          v1556[0] = *(void **)v1556[0];
          v1434 = (_OWORD *)*v1433;
        }
        sub_20E868578((uint64_t *)v1556[1], (uint64_t *)v1434);
        ++*(_QWORD *)v1557;
      }
    }
  }
  sub_20F88F474(*(_QWORD *)(v1513 + 8216), v1513, v1556);
  sub_20E86872C((uint64_t)v1556, (_QWORD *)v1556[1]);
  *((_QWORD *)&v1546 + 1) = 0;
  result = *((_QWORD *)&v1545 + 1);
  if (*((uint64_t **)&v1545 + 1) != &v1515 && *((_QWORD *)&v1545 + 1))
    return MEMORY[0x212BC6368](*((_QWORD *)&v1545 + 1), 0x1000C80EED21634);
  return result;
}

void sub_20FC42068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  if (LOBYTE(STACK[0xCA8]) && SLOBYTE(STACK[0xCA7]) < 0)
    operator delete((void *)STACK[0xC90]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x480]);
  STACK[0x3E0] = 0;
  if ((char *)STACK[0x3D0] != &a71 && STACK[0x3D0] != 0)
  {
    MEMORY[0x212BC6368]();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

__int32 *sub_20FC42718(uint64_t a1, char a2, unsigned __int32 __c)
{
  __int128 *v6;
  __int128 *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  char *v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  __int128 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int32 *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int32 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unsigned __int32 *v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int32 *v40;
  _OWORD *v41;
  unsigned __int32 *v42;
  uint64_t v43;
  __int128 v44;
  unsigned __int32 v45;
  __int32 *v46;
  __int32 *v47;
  unint64_t v48;
  __int32 *result;
  __int32 *v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  const void *v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  _OWORD v63[7];
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int16 v74;
  char v75;
  _OWORD v76[15];

  v6 = *(__int128 **)(a1 + 5656);
  v7 = *(__int128 **)(a1 + 5664);
  v8 = (char *)v6;
  if (v7 != v6)
  {
    v9 = v7 - v6;
    v8 = *(char **)(a1 + 5656);
    do
    {
      v10 = v9 >> 1;
      v11 = (unsigned int *)&v8[16 * (v9 >> 1)];
      v13 = *v11;
      v12 = (char *)(v11 + 4);
      v9 += ~(v9 >> 1);
      if (v13 < __c)
        v8 = v12;
      else
        v9 = v10;
    }
    while (v9);
  }
  if (v8 != (char *)v7 && *(_DWORD *)v8 == __c)
  {
    v14 = 0;
    goto LABEL_51;
  }
  if (__c)
    v15 = 104;
  else
    v15 = 96;
  v16 = *(uint64_t **)(a1 + v15);
  if (v16)
  {
    v8 = *(char **)(a1 + 5664);
    v17 = (char *)v7 - (char *)v6;
    if (v17)
    {
LABEL_15:
      v18 = v17 >> 4;
      do
      {
        v19 = v18 >> 1;
        v20 = (unsigned int *)&v6[v18 >> 1];
        v22 = *v20;
        v21 = (__int128 *)(v20 + 4);
        v18 += ~(v18 >> 1);
        if (v22 < __c)
          v6 = v21;
        else
          v18 = v19;
      }
      while (v18);
      v23 = *v16;
      if (v8 != (char *)v6 && *(_DWORD *)v6 == __c)
        goto LABEL_50;
LABEL_27:
      v24 = sub_20F619254(a1 + 5680);
      *(_DWORD *)v24 = -1;
      *(_BYTE *)(v24 + 4) = 1;
      *(_DWORD *)(v24 + 8) = 0;
      *(_DWORD *)(v24 + 16) = __c;
      *(_BYTE *)(v24 + 20) = 1;
      *(_WORD *)(v24 + 21) = v74;
      *(_BYTE *)(v24 + 23) = v75;
      *(_QWORD *)(v24 + 24) = v16;
      *(_QWORD *)(v24 + 32) = v23;
      *(_BYTE *)(v24 + 40) = 0;
      *(_DWORD *)(v24 + 41) = v63[0];
      *(_DWORD *)(v24 + 44) = *(_DWORD *)((char *)v63 + 3);
      LODWORD(v76[0]) = __c;
      *((_QWORD *)&v76[0] + 1) = v24;
      v8 = sub_20F618FEC((char **)(a1 + 5656), v6, (uint64_t)v76);
      v25 = *(unsigned __int32 **)(a1 + 7424);
      v26 = *(_QWORD *)(a1 + 7432);
      if ((unint64_t)v25 < v26)
      {
        *v25 = __c;
        v27 = (uint64_t)(v25 + 1);
LABEL_49:
        *(_QWORD *)(a1 + 7424) = v27;
        *(_BYTE *)(a1 + 6762) = 0;
        *(_BYTE *)(a1 + 6760) = 0;
        *(_BYTE *)(a1 + 7828) = 0;
        *(_DWORD *)(a1 + 7824) = 0;
        goto LABEL_50;
      }
      v28 = *(unsigned __int32 **)(a1 + 7416);
      v29 = v25 - v28;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        sub_20E867F44();
      v31 = v26 - (_QWORD)v28;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 62)
          sub_20E877A38();
        v33 = operator new(4 * v32);
        v34 = (unsigned __int32 *)&v33[4 * v29];
        v35 = &v33[4 * v32];
        *v34 = __c;
        v27 = (uint64_t)(v34 + 1);
        v36 = (char *)v25 - (char *)v28;
        if (v25 == v28)
          goto LABEL_47;
      }
      else
      {
        v33 = 0;
        v34 = (unsigned __int32 *)(4 * v29);
        v35 = 0;
        *(_DWORD *)(4 * v29) = __c;
        v27 = 4 * v29 + 4;
        v36 = (char *)v25 - (char *)v28;
        if (v25 == v28)
        {
LABEL_47:
          *(_QWORD *)(a1 + 7416) = v34;
          *(_QWORD *)(a1 + 7424) = v27;
          *(_QWORD *)(a1 + 7432) = v35;
          if (v28)
            operator delete(v28);
          goto LABEL_49;
        }
      }
      v37 = v36 - 4;
      if (v37 < 0x2C)
        goto LABEL_72;
      if ((unint64_t)((char *)v28 - v33) < 0x20)
        goto LABEL_72;
      v38 = (v37 >> 2) + 1;
      v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      v40 = &v25[v39 / 0xFFFFFFFFFFFFFFFCLL];
      v34 = (unsigned __int32 *)((char *)v34 - v39);
      v41 = &v33[4 * v29 - 16];
      v42 = v25 - 4;
      v43 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 8;
        v43 -= 8;
      }
      while (v43);
      v25 = v40;
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_72:
        do
        {
          v45 = *--v25;
          *--v34 = v45;
        }
        while (v25 != v28);
      }
      goto LABEL_47;
    }
LABEL_25:
    v6 = (__int128 *)v8;
    v23 = *v16;
    goto LABEL_27;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3236, (uint64_t)"viobadata_time_offset", 21, (uint64_t)"Error the timeoffset variable is not set", 40, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *(uint64_t **)(a1 + v15);
  if (v16)
  {
    v6 = *(__int128 **)(a1 + 5656);
    v8 = *(char **)(a1 + 5664);
    v17 = v8 - (char *)v6;
    if (v8 != (char *)v6)
      goto LABEL_15;
    goto LABEL_25;
  }
  v8 = *(char **)(a1 + 5664);
LABEL_50:
  v14 = 1;
LABEL_51:
  *(_BYTE *)(*((_QWORD *)v8 + 1) + 20) = a2;
  v46 = *(__int32 **)(a1 + 43176);
  v47 = *(__int32 **)(a1 + 43184);
  v48 = (char *)v47 - (char *)v46;
  result = wmemchr(v46, __c, v47 - v46);
  if (result)
    v50 = result;
  else
    v50 = v47;
  if ((v14 & 1) == 0 && (a2 & 1) == 0 && v50 != *(__int32 **)(a1 + 43184))
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v64 = 0;
    memset(v63, 0, sizeof(v63));
    v51 = operator new(4uLL);
    v52 = (_DWORD *)(a1 + 27744);
    *v51 = __c;
    v66 = v51 + 1;
    v67 = v51 + 1;
    v65 = v51;
    v53 = *(_DWORD *)(a1 + 27836) + (((unint64_t)v50 - *(_QWORD *)(a1 + 43176)) >> 2);
    v54 = *(unsigned int *)(a1 + 27744);
    if ((unint64_t)(v48 >> 2) + v53 < v54)
    {
      v55 = (v54 + ~(_DWORD)v53);
      v56 = *(_QWORD *)(a1 + 27728);
      v57 = 8 * v55;
      v58 = operator new((8 * v55 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v59 = v58;
      if ((_DWORD)v55)
      {
        memmove(v58, (const void *)(v56 + 8 * (v53 + 1)), v57);
        memmove((void *)(v56 + 8 * v53), v59, v57);
      }
      MEMORY[0x212BC6368](v59, 0x1000C8000313F17);
      LODWORD(v54) = *v52;
    }
    v60 = (v54 - 1);
    *v52 = v60;
    if (*(_QWORD *)(a1 + 27736) < v60)
    {
      v61 = *(_QWORD *)(a1 + 27728);
      if (v61)
        MEMORY[0x212BC6368](v61, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 27728) = 0;
      v62 = (8 * v60 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 27736) = v62 >> 3;
      *(_QWORD *)(a1 + 27728) = operator new(v62, (std::align_val_t)0x20uLL);
    }
    memset(v76, 0, sizeof(v76));
    sub_20F8EA9E4((_DWORD *)(a1 + 27752), (uint64_t)v63, (uint64_t)v76);
    sub_20F89E908((uint64_t)v76);
    return (__int32 *)sub_20F89E908((uint64_t)v63);
  }
  return result;
}

void sub_20FC42C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC42C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC42C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20F89E908((uint64_t)&a41);
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC42C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F89E908((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FC42C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;
  __int128 *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  unint64_t v17;
  char v18;
  unsigned int v19;

  v2 = *(_QWORD *)(a1 + 8216);
  v3 = *(unsigned __int8 *)(v2 + 1720);
  v4 = v2 + 864;
  v5 = v2 + 24;
  if (v3)
    v5 = v4;
  if (*(_BYTE *)(v5 + 423))
  {
    v7 = (_BYTE *)(a1 + 12512);
    if (*(_BYTE *)(a1 + 12512))
    {
      if (*(_BYTE *)(a1 + 7688))
      {
        v8 = (__int128 *)(a1 + 12488);
        v9 = *(unsigned __int8 *)(a1 + 664);
        if (*(_BYTE *)(a1 + 664))
        {
          if (v9 == 2)
          {
            v16.n128_u64[0] = sqrt(1.0 / *(double *)(a1 + 672));
            v16.n128_u64[1] = v16.n128_u64[0];
            v17 = v16.n128_u64[0];
            v18 = 1;
            sub_20FC5C72C(a2, &v16, 5u, v8, 0xAu);
          }
          else if (v9 == 1)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4206, (uint64_t)"", 0, (uint64_t)"Should not be reached.", 22, (void (*)(void **))sub_21023DDB0);
            abort();
          }
        }
        else
        {
          *(_BYTE *)(a1 + 7688) = 0;
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 64);
          v11 = *v8;
          *(_QWORD *)(v10 + 128) = *(_QWORD *)(a1 + 12504);
          *(_OWORD *)(v10 + 112) = v11;
          v12 = *(unsigned __int8 **)(a1 + 8216);
          v13 = *v12;
          v14 = 8;
          if (!*v12)
            v14 = 16;
          if (*(_QWORD *)&v12[v14])
          {
            v16.n128_u64[1] = (unint64_t)(v12 + 8);
            v17 = (unint64_t)(v12 + 16);
            v15 = 1;
          }
          else
          {
            v13 = 0;
            v15 = 0;
          }
          v16.n128_u8[0] = v13;
          v18 = v15;
          v19 = 5;
          sub_20FB43148((uint64_t)&v16, &v19);
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 8216) + 1720) && *v7)
            *v7 = 0;
        }
      }
    }
  }
}

uint64_t sub_20FC42E18(uint64_t result)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  char v40;
  double v41;
  float64x2_t v42;
  double v43;
  char v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  char *v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  char *v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  char *v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  char *v91;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  int *v98;
  char *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  char *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  _QWORD *v127;
  __int128 *p_dst;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  int v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  char *v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  char *v145;
  unsigned int v146;
  uint64_t v147;
  _QWORD *v148;
  __int128 *v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  const char *v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  unsigned int v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  __int128 *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  unsigned int *v171;
  char *v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t v175;
  unsigned int *v176;
  char *v177;
  unsigned int v178;
  uint64_t v179;
  _QWORD *v180;
  __int128 *v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  const char *v187;
  uint64_t v188;
  _QWORD *v189;
  int v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  _QWORD *v195;
  __int128 *v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int *v202;
  char *v203;
  unsigned int v204;
  unint64_t v205;
  unint64_t v206;
  unsigned int *v207;
  char *v208;
  unsigned int v209;
  uint64_t v210;
  _QWORD *v211;
  __int128 *v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  const char *v218;
  uint64_t v219;
  _QWORD *v220;
  int v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  _QWORD *v226;
  __int128 *v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  unint64_t v231;
  unint64_t v232;
  unsigned int *v233;
  char *v234;
  unsigned int v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int *v238;
  char *v239;
  unsigned int v240;
  int v241;
  uint64_t v242;
  _QWORD *v243;
  __int128 *v244;
  uint64_t v245;
  _QWORD *v246;
  int v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  const char *v251;
  uint64_t v252;
  _QWORD *v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  unsigned int v258;
  _QWORD *v259;
  __int128 *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  unint64_t v264;
  unint64_t v265;
  unsigned int *v266;
  char *v267;
  unsigned int v268;
  unint64_t v269;
  unint64_t v270;
  unsigned int *v271;
  char *v272;
  unsigned int v273;
  int v274;
  uint64_t v275;
  _QWORD *v276;
  __int128 *v277;
  uint64_t v278;
  _QWORD *v279;
  int v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  const char *v284;
  uint64_t v285;
  _QWORD *v286;
  char *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  _QWORD *v291;
  __int128 *v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  unint64_t v296;
  unint64_t v297;
  int *v298;
  char *v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  int *v303;
  char *v304;
  int v305;
  int v306;
  uint64_t v307;
  _QWORD *v308;
  __int128 *v309;
  uint64_t v310;
  _QWORD *v311;
  int v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  const char *v316;
  uint64_t v317;
  _QWORD *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  _QWORD *v322;
  __int128 *v323;
  uint64_t v324;
  _QWORD *v325;
  _QWORD *v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  char *v331;
  _QWORD *v332;
  __int128 *v333;
  uint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  BOOL v337;
  char v338;
  size_t v339;
  __int128 *v340;
  _QWORD *v341;
  __int128 *v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  unint64_t v346;
  const void **v347;
  const void *v348;
  uint64_t v349;
  uint64_t v350;
  std::string *v351;
  __int128 v352;
  std::string *v353;
  __int128 v354;
  void **v355;
  uint64_t v356;
  _BOOL4 v357;
  char *v358;
  char *v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  __int128 v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  char *v376;
  char *v377;
  __int128 v378;
  uint64_t v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  char *v384;
  __int128 v385;
  __int128 v386;
  unint64_t v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  unint64_t v396;
  uint64_t v397;
  int64x2_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  void *v403;
  char *v404;
  char *v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  unint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  _OWORD *v423;
  __int128 v424;
  _OWORD *v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  char *v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *p_shared_owners;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  _BOOL4 v461;
  _QWORD *v462;
  _QWORD *v463;
  uint64_t v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  uint64_t v468;
  char v469;
  char v470;
  char *v471;
  std::__shared_weak_count *v472;
  _QWORD *v473;
  float64x2_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  _QWORD *v480;
  int v481;
  int v482;
  int v483;
  char *v484;
  char *v485;
  int64x2_t v486;
  int64x2_t *v487;
  uint64_t *v488;
  uint64_t *v489;
  __int128 *v490;
  double *v491;
  uint64_t v492;
  unsigned int v493;
  char *v494;
  int v495;
  unsigned int v496;
  unsigned int v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  std::string v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  uint64_t (**v507)();
  char v508;
  _BYTE v509[24];
  uint64_t (**v510)();
  char v511;
  _BYTE v512[24];
  __int128 v513;
  uint64_t v514;
  __int128 v515;
  __int128 v516;
  int v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  uint64_t v522;
  __int128 v523;
  uint64_t v524;
  unint64_t v525;
  char v526;
  uint64_t v527;
  std::__shared_weak_count *v528;
  char v529;
  int64x2_t v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  uint64_t (**v535)();
  void *v536;
  __int128 v537;
  unint64_t v538;
  uint64_t (**v539)();
  char v540[8];
  __int128 v541;
  uint64_t v542;
  __int128 v543;
  uint64_t v544;
  __int128 v545;
  __int128 v546;
  int v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  uint64_t v552;
  __int128 v553;
  uint64_t v554;
  unint64_t v555;
  char v556;
  __int128 v557;
  char v558;
  unint64_t v559;
  char v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  uint64_t v564;
  __int128 v565;
  uint64_t v566;
  void *__p[2];
  __int128 v568;
  void *v569[2];
  __int128 v570;
  __int128 __dst;
  __int128 v572;
  _QWORD *v573;
  __int128 v574;
  uint64_t v575;
  __int128 v576;
  uint64_t v577;
  uint64_t v578;

  v578 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(result + 72);
  v488 = *(uint64_t **)(result + 80);
  if (v1 != v488)
  {
    v2 = (_QWORD *)result;
    v497 = 0;
    v487 = (int64x2_t *)(result + 6744);
    v480 = (_QWORD *)(result + 5168);
    v475 = result + 7824;
    v473 = (_QWORD *)(result + 6488);
    __asm { FMOV            V0.2D, #1.0 }
    v474 = _Q0;
    v479 = MEMORY[0x24BEDB848] + 16;
    v477 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v478 = *MEMORY[0x24BEDB7F0];
    v476 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    while (1)
    {
      v8 = *v1;
      v9 = *v1 + 40;
      if (*(_BYTE *)(*v1 + 280))
      {
        v10 = *(uint64_t **)(v8 + 288);
        v11 = *(uint64_t **)(v8 + 296);
        if (v10 != v11)
          break;
        goto LABEL_554;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2314, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (!*(_BYTE *)(v8 + 280))
        v9 = 0;
      v10 = *(uint64_t **)(v8 + 288);
      v11 = *(uint64_t **)(v8 + 296);
      if (v10 != v11)
        break;
LABEL_554:
      if (!v487[1].i8[0])
      {
        v461 = sub_20F9210FC(v480);
        v462 = (_QWORD *)v2[810];
        v463 = (_QWORD *)v2[809];
        if (v461 && v463 != v462)
        {
          v464 = 0;
          do
          {
            if ((*(_BYTE *)(v463[28] + 4) & 6) == 0
              && (*(_BYTE *)(v463[29] + 4) & 6) == 0
              && (*(_BYTE *)(v463[30] + 4) & 6) == 0
              && (*(_BYTE *)(v463[31] + 4) & 6) == 0
              && (*(_BYTE *)(v463[32] + 4) & 6) == 0
              && (*(_BYTE *)(v463[33] + 4) & 6) == 0)
            {
              ++v464;
            }
            v463 += 45;
          }
          while (v463 != v462);
        }
      }
      result = kdebug_trace();
      if (++v1 == v488)
        return result;
    }
    v491 = (double *)v9;
    v492 = v8;
    v490 = (__int128 *)(v9 + 80);
    v12 = *(_QWORD *)(v9 + 160);
    v13 = *(_QWORD *)(v9 + 136);
    v14 = *(_DWORD *)(v9 + 144);
    v496 = v14 + 1;
    while (1)
    {
      v15 = *((_DWORD *)v10 + 2);
      if (v15 == v14)
        goto LABEL_14;
      v16 = v2[1];
      v19 = *(uint64_t **)(v16 + 56);
      v17 = (_QWORD *)(v16 + 56);
      v18 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = *v10;
      v21 = v17;
      v22 = v18;
      do
      {
        v23 = v22[4];
        if (v23 < v20)
        {
          ++v22;
        }
        else if (v23 == v20)
        {
          if (*((_DWORD *)v22 + 10) < v15)
            ++v22;
          else
            v21 = v22;
        }
        else
        {
          v21 = v22;
        }
        v22 = (uint64_t *)*v22;
      }
      while (v22);
      if (v21 == v17 || (v24 = v21[4], v20 < v24) || v20 == v24 && *((_DWORD *)v21 + 10) > v15)
LABEL_28:
        v21 = v17;
      if (!v18)
        goto LABEL_14;
      v25 = v10[20];
      v26 = v17;
      do
      {
        v27 = v18[4];
        if (v27 < v13)
        {
          ++v18;
        }
        else if (v27 == v13)
        {
          if (*((_DWORD *)v18 + 10) < v14)
            ++v18;
          else
            v26 = v18;
        }
        else
        {
          v26 = v18;
        }
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      if (v26 == v17)
        goto LABEL_14;
      v28 = v26[4];
      if (v13 < v28 || v13 == v28 && *((_DWORD *)v26 + 10) > v14)
        goto LABEL_14;
      if (v21 == v17)
        goto LABEL_14;
      v29 = (_QWORD *)v21[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v21[2];
          _ZF = *v30 == (_QWORD)v21;
          v21 = v30;
        }
        while (!_ZF);
      }
      v31 = (_QWORD *)v26[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v26[2];
          _ZF = *v32 == (_QWORD)v26;
          v26 = v32;
        }
        while (!_ZF);
      }
      if (v30 == v17 || v32 == v17)
        goto LABEL_14;
      v34 = *(_QWORD *)(v492 + 24);
      v33 = *(_QWORD *)(v492 + 32);
      v502 = *((_OWORD *)v10 + 3);
      v500 = *v490;
      v501 = v490[1];
      v35 = v491[21];
      v36 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
      if (v35 <= 1.0e-15 || (v37.f64[0] = v491[25], v37.f64[0] <= 1.0e-15))
      {
        v40 = 0;
        v38 = NAN;
        v39 = v36;
        v41 = *((double *)v10 + 8);
        v493 = *(_DWORD *)(v2[1] + 1648);
        if (v41 <= 1.0e-15)
          goto LABEL_69;
      }
      else if (v491[29] <= 1.0e-15)
      {
        v40 = 0;
        v39 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        v38 = NAN;
        v41 = *((double *)v10 + 8);
        v493 = *(_DWORD *)(v2[1] + 1648);
        if (v41 <= 1.0e-15)
          goto LABEL_69;
      }
      else
      {
        v38 = 1.0 / sqrt(v35);
        v37.f64[1] = v491[29];
        v39 = vdivq_f64(v474, vsqrtq_f64(v37));
        v40 = 1;
        v41 = *((double *)v10 + 8);
        v493 = *(_DWORD *)(v2[1] + 1648);
        if (v41 <= 1.0e-15)
          goto LABEL_69;
      }
      *(_QWORD *)&v42.f64[0] = v10[12];
      v36 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
      if (v42.f64[0] > 1.0e-15 && *((double *)v10 + 16) > 1.0e-15)
      {
        v43 = 1.0 / sqrt(v41);
        *(_QWORD *)&v42.f64[1] = v10[16];
        v36 = vdivq_f64(v474, vsqrtq_f64(v42));
        v44 = 1;
        goto LABEL_70;
      }
LABEL_69:
      v44 = 0;
      v43 = NAN;
LABEL_70:
      v498 = *(_OWORD *)(v10 + 17);
      v499 = v10[19];
      v45 = v15 + 1;
      v46 = (char *)v2[809];
      v47 = (char *)v2[810];
      v489 = v1;
      if (v46 == v47)
      {
        v48 = (char *)v2[809];
      }
      else
      {
        v48 = (char *)v2[810];
        if (*((_QWORD *)v47 - 45) >= (unint64_t)v497)
        {
          v49 = 0x4FA4FA4FA4FA4FA5 * ((v47 - v46) >> 3);
          v50 = (char *)v2[809];
          do
          {
            v51 = v49 >> 1;
            v52 = (unint64_t *)&v50[360 * (v49 >> 1)];
            v53 = *v52;
            v54 = (char *)(v52 + 45);
            v49 += ~(v49 >> 1);
            if (v53 < v497)
              v50 = v54;
            else
              v49 = v51;
          }
          while (v49);
          v48 = (char *)v2[810];
          if (v50 != v47)
          {
            v48 = v50;
            if (*(_QWORD *)v50 == v497)
            {
LABEL_157:
              v119 = 1;
              goto LABEL_159;
            }
          }
        }
      }
      *(_OWORD *)&v503.__r_.__value_.__r.__words[1] = *((_OWORD *)v10 + 2);
      v504 = v502;
      v505 = v500;
      v506 = v501;
      v508 = v40;
      v503.__r_.__value_.__r.__words[0] = v497;
      v507 = &off_24CA04D00;
      *(double *)v509 = v38;
      *(float64x2_t *)&v509[8] = v39;
      v511 = v44;
      v510 = &off_24CA04D00;
      *(float64x2_t *)&v512[8] = v36;
      v513 = v498;
      v514 = v499;
      *(double *)v512 = v43;
      *(_QWORD *)&v515 = v12;
      *((_QWORD *)&v515 + 1) = v25;
      LOWORD(v516) = 0;
      v55 = 1;
      BYTE2(v516) = 1;
      *((_QWORD *)&v516 + 1) = v34;
      v517 = v33;
      v518 = 0u;
      v519 = 0u;
      v520 = 0u;
      v527 = 0;
      v528 = 0;
      v525 = 0xBFF0000000000000;
      v526 = 0;
      v529 = 0;
      v56 = (char *)v2[647];
      v57 = (char *)v2[648];
      v58 = v57 - v56;
      if (v57 != v56)
      {
        v59 = v58 >> 4;
        v60 = (char *)v2[647];
        v61 = v58 >> 4;
        do
        {
          v62 = v61 >> 1;
          v63 = (unsigned int *)&v60[16 * (v61 >> 1)];
          v65 = *v63;
          v64 = (char *)(v63 + 4);
          v61 += ~(v61 >> 1);
          if (v65 < v14)
            v60 = v64;
          else
            v61 = v62;
        }
        while (v61);
        if (v60 == v57 || *(_DWORD *)v60 != v14)
          goto LABEL_155;
        v66 = *((_QWORD *)v60 + 1);
        *(_QWORD *)&v518 = v66;
        ++*(_DWORD *)(*((_QWORD *)v60 + 1) + 8);
        v67 = v56;
        v68 = v59;
        do
        {
          v69 = v68 >> 1;
          v70 = (unsigned int *)&v67[16 * (v68 >> 1)];
          v72 = *v70;
          v71 = (char *)(v70 + 4);
          v68 += ~(v68 >> 1);
          if (v72 < v496)
            v67 = v71;
          else
            v68 = v69;
        }
        while (v68);
        if (v67 == v57 || *(_DWORD *)v67 != v496)
        {
          v93 = 0;
          v85 = 0;
          v80 = 0;
          v73 = 0;
          if (!v66)
            goto LABEL_147;
          goto LABEL_146;
        }
        v73 = *((_QWORD *)v67 + 1);
        *((_QWORD *)&v518 + 1) = v73;
        ++*(_DWORD *)(*((_QWORD *)v67 + 1) + 8);
        v74 = v56;
        v75 = v59;
        do
        {
          v76 = v75 >> 1;
          v77 = (unsigned int *)&v74[16 * (v75 >> 1)];
          v79 = *v77;
          v78 = (char *)(v77 + 4);
          v75 += ~(v75 >> 1);
          if (v79 < v15)
            v74 = v78;
          else
            v75 = v76;
        }
        while (v75);
        if (v74 == v57 || *(_DWORD *)v74 != v15)
        {
          v93 = 0;
          v85 = 0;
          v80 = 0;
          if (!v66)
            goto LABEL_147;
          goto LABEL_146;
        }
        v80 = *((_QWORD *)v74 + 1);
        *(_QWORD *)&v519 = v80;
        ++*(_DWORD *)(*((_QWORD *)v74 + 1) + 8);
        do
        {
          v81 = v59 >> 1;
          v82 = (unsigned int *)&v56[16 * (v59 >> 1)];
          v84 = *v82;
          v83 = (char *)(v82 + 4);
          v59 += ~(v59 >> 1);
          if (v84 < v45)
            v56 = v83;
          else
            v59 = v81;
        }
        while (v59);
        if (v56 == v57 || *(_DWORD *)v56 != v45)
        {
          v93 = 0;
          v85 = 0;
LABEL_145:
          if (!v66)
            goto LABEL_147;
LABEL_146:
          --*(_DWORD *)(v66 + 8);
LABEL_147:
          if (v73)
            --*(_DWORD *)(v73 + 8);
          if (v80)
            --*(_DWORD *)(v80 + 8);
          if (v85)
            --*(_DWORD *)(v85 + 8);
          if (v93)
            --*(_DWORD *)(v93 + 8);
          goto LABEL_155;
        }
        v85 = *((_QWORD *)v56 + 1);
        *((_QWORD *)&v519 + 1) = v85;
        ++*(_DWORD *)(*((_QWORD *)v56 + 1) + 8);
        v86 = (char *)v2[683];
        v87 = (char *)v2[684];
        if (v87 != v86)
        {
          v88 = (v87 - v86) >> 4;
          do
          {
            v89 = v88 >> 1;
            v90 = (unsigned int *)&v86[16 * (v88 >> 1)];
            v92 = *v90;
            v91 = (char *)(v90 + 4);
            v88 += ~(v88 >> 1);
            if (v92 < v493)
              v86 = v91;
            else
              v88 = v89;
          }
          while (v88);
        }
        if (v86 == v87 || *(_DWORD *)v86 != v493)
        {
          v93 = 0;
          if (!v66)
            goto LABEL_147;
          goto LABEL_146;
        }
        v93 = *((_QWORD *)v86 + 1);
        *(_QWORD *)&v520 = v93;
        ++*(_DWORD *)(*((_QWORD *)v86 + 1) + 8);
        v94 = (char *)v2[707];
        v95 = (char *)v2[708];
        if (v95 != v94)
        {
          v96 = (v95 - v94) >> 4;
          do
          {
            v97 = v96 >> 1;
            v98 = (int *)&v94[16 * (v96 >> 1)];
            v100 = *v98;
            v99 = (char *)(v98 + 4);
            v96 += ~(v96 >> 1);
            if (v100)
              v96 = v97;
            else
              v94 = v99;
          }
          while (v96);
        }
        if (v94 == v95 || *(_DWORD *)v94 != 1)
          goto LABEL_145;
        v101 = *((_QWORD *)v94 + 1);
        *((_QWORD *)&v520 + 1) = v101;
        ++*(_DWORD *)(*((_QWORD *)v94 + 1) + 8);
        if (!*(_BYTE *)(v66 + 20)
          && !*(_BYTE *)(v73 + 20)
          && !*(_BYTE *)(v80 + 20)
          && !*(_BYTE *)(v85 + 20)
          && !*(_BYTE *)(v93 + 20)
          && !*(_BYTE *)(v101 + 20))
        {
          --*(_DWORD *)(v66 + 8);
          --*(_DWORD *)(v73 + 8);
          v518 = 0u;
          --*(_DWORD *)(v80 + 8);
          --*(_DWORD *)(v85 + 8);
          v519 = 0u;
          --*(_DWORD *)(v93 + 8);
          *(_QWORD *)&v520 = 0;
          --*(_DWORD *)(v101 + 8);
LABEL_155:
          v55 = 1;
          goto LABEL_156;
        }
        v530.i64[0] = v497;
        v530.i64[1] = v497;
        v531 = *(_OWORD *)&v503.__r_.__value_.__r.__words[1];
        v532 = v504;
        v533 = v505;
        v534 = v506;
        LOBYTE(v536) = v40;
        v535 = &off_24CA04D00;
        v537 = *(_OWORD *)v509;
        v538 = *(_QWORD *)&v509[16];
        v540[0] = v44;
        v539 = &off_24CA04D00;
        v542 = *(_QWORD *)&v512[16];
        v541 = *(_OWORD *)v512;
        v543 = v513;
        v544 = v514;
        v545 = v515;
        v546 = v516;
        v547 = v517;
        v549 = v519;
        v550 = v520;
        v548 = v518;
        v552 = v522;
        v551 = v521;
        v554 = v524;
        v553 = v523;
        v556 = v526;
        v555 = v525;
        v557 = 0uLL;
        v527 = 0;
        v528 = 0;
        v558 = 0;
        if (v47 == v48 || *(_QWORD *)v48 != v497)
        {
          v102 = v48 - v46;
          v103 = 0x4FA4FA4FA4FA4FA5 * ((v48 - v46) >> 3);
          v494 = v48;
          v471 = v46;
          if ((unint64_t)v47 >= *v473)
          {
            v374 = 0x4FA4FA4FA4FA4FA5 * ((v47 - v46) >> 3) + 1;
            if (v374 > 0xB60B60B60B60B6)
              sub_20E867F44();
            if (0x9F49F49F49F49F4ALL * ((uint64_t)(*v473 - (_QWORD)v46) >> 3) > v374)
              v374 = 0x9F49F49F49F49F4ALL * ((uint64_t)(*v473 - (_QWORD)v46) >> 3);
            if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*v473 - (_QWORD)v46) >> 3)) >= 0x5B05B05B05B05BLL)
              v375 = 0xB60B60B60B60B6;
            else
              v375 = v374;
            v573 = v473;
            if (v375)
            {
              v485 = (char *)(v48 - v46);
              if (v375 > 0xB60B60B60B60B6)
                sub_20E877A38();
              v376 = (char *)operator new(360 * v375);
              v48 = v494;
              v46 = v471;
              v102 = (uint64_t)v485;
            }
            else
            {
              v376 = 0;
            }
            v397 = (uint64_t)&v376[360 * v103];
            *(_QWORD *)&__dst = v376;
            *((_QWORD *)&__dst + 1) = v397;
            *(_QWORD *)&v572 = v397;
            *((_QWORD *)&v572 + 1) = &v376[360 * v375];
            v398 = vdupq_n_s64(v497);
            if (v103 == v375)
            {
              if (v102 < 1)
              {
                v486 = v398;
                if (v46 == v48)
                  v402 = 1;
                else
                  v402 = 2 * v103;
                if (v402 > 0xB60B60B60B60B6)
                  sub_20E877A38();
                v403 = v376;
                v404 = (char *)operator new(360 * v402);
                v397 = (uint64_t)&v404[360 * (v402 >> 2)];
                *(_QWORD *)&__dst = v404;
                *((_QWORD *)&__dst + 1) = v397;
                *((_QWORD *)&v572 + 1) = &v404[360 * v402];
                if (v403)
                {
                  v405 = &v404[360 * (v402 >> 2)];
                  operator delete(v403);
                  v397 = (uint64_t)v405;
                  v401 = (uint64_t)v405;
                }
                else
                {
                  v401 = (uint64_t)&v404[360 * (v402 >> 2)];
                }
                v48 = v494;
                v398 = v486;
              }
              else
              {
                v399 = v103 + 2;
                if (v103 >= -1)
                  v399 = v103 + 1;
                v400 = v399 >> 1;
                v401 = sub_20F91EE88(v397, v397, v397 - 360 * (v399 >> 1));
                v397 = *((_QWORD *)&__dst + 1) - 360 * v400;
                *((_QWORD *)&__dst + 1) = v397;
                v398 = v530;
                v48 = v494;
              }
            }
            else
            {
              v401 = (uint64_t)&v376[360 * v103];
            }
            *(int64x2_t *)v401 = v398;
            v406 = v532;
            *(_OWORD *)(v401 + 16) = v531;
            *(_OWORD *)(v401 + 32) = v406;
            v407 = v534;
            *(_OWORD *)(v401 + 48) = v533;
            *(_OWORD *)(v401 + 64) = v407;
            *(_BYTE *)(v401 + 88) = (_BYTE)v536;
            *(_QWORD *)(v401 + 80) = &off_24CA04D00;
            v408 = v537;
            *(_QWORD *)(v401 + 112) = v538;
            *(_OWORD *)(v401 + 96) = v408;
            *(_BYTE *)(v401 + 128) = v540[0];
            *(_QWORD *)(v401 + 120) = &off_24CA04D00;
            v409 = v541;
            *(_QWORD *)(v401 + 152) = v542;
            *(_OWORD *)(v401 + 136) = v409;
            v410 = v543;
            *(_QWORD *)(v401 + 176) = v544;
            *(_OWORD *)(v401 + 160) = v410;
            v411 = v545;
            v412 = v546;
            *(_DWORD *)(v401 + 216) = v547;
            *(_OWORD *)(v401 + 200) = v412;
            *(_OWORD *)(v401 + 184) = v411;
            v413 = v548;
            v414 = v550;
            *(_OWORD *)(v401 + 240) = v549;
            *(_OWORD *)(v401 + 256) = v414;
            *(_OWORD *)(v401 + 224) = v413;
            v415 = v551;
            *(_QWORD *)(v401 + 288) = v552;
            *(_OWORD *)(v401 + 272) = v415;
            v416 = v553;
            *(_QWORD *)(v401 + 312) = v554;
            *(_OWORD *)(v401 + 296) = v416;
            v417 = v555;
            *(_BYTE *)(v401 + 328) = v556;
            *(_QWORD *)(v401 + 320) = v417;
            *(_OWORD *)(v401 + 336) = v557;
            v557 = 0uLL;
            *(_BYTE *)(v401 + 352) = v558;
            v418 = v401 + 360;
            *(_QWORD *)&v572 = v401 + 360;
            v419 = (char *)v2[809];
            if (v419 != v48)
            {
              v420 = 0;
              do
              {
                v421 = v397 + v420;
                v422 = &v48[v420];
                *(_QWORD *)(v397 + v420 - 360) = *(_QWORD *)&v48[v420 - 360];
                *(_QWORD *)(v397 + v420 - 352) = *(_QWORD *)&v48[v420 - 352];
                v423 = (_OWORD *)(v397 + v420 - 344);
                v424 = *(_OWORD *)&v48[v420 - 328];
                *v423 = *(_OWORD *)&v48[v420 - 344];
                v423[1] = v424;
                v425 = (_OWORD *)(v397 + v420 - 312);
                v426 = *(_OWORD *)&v48[v420 - 296];
                *v425 = *(_OWORD *)&v48[v420 - 312];
                v425[1] = v426;
                *(_BYTE *)(v397 + v420 - 272) = v48[v420 - 272];
                *(_QWORD *)(v397 + v420 - 280) = &off_24CA04D00;
                v427 = *(_OWORD *)&v48[v420 - 264];
                *(_QWORD *)(v421 - 248) = *(_QWORD *)&v48[v420 - 248];
                *(_OWORD *)(v397 + v420 - 264) = v427;
                *(_BYTE *)(v421 - 232) = v48[v420 - 232];
                *(_QWORD *)(v421 - 240) = &off_24CA04D00;
                v428 = *(_OWORD *)&v48[v420 - 224];
                *(_QWORD *)(v421 - 208) = *(_QWORD *)&v48[v420 - 208];
                *(_OWORD *)(v421 - 224) = v428;
                v429 = *(_OWORD *)&v48[v420 - 200];
                *(_QWORD *)(v421 - 184) = *(_QWORD *)&v48[v420 - 184];
                *(_OWORD *)(v421 - 200) = v429;
                v430 = *(_OWORD *)&v48[v420 - 176];
                v431 = *(_OWORD *)&v48[v420 - 160];
                *(_DWORD *)(v421 - 144) = *(_DWORD *)&v48[v420 - 144];
                *(_OWORD *)(v421 - 176) = v430;
                *(_OWORD *)(v421 - 160) = v431;
                v432 = *(_OWORD *)&v48[v420 - 136];
                v433 = *(_OWORD *)&v48[v420 - 120];
                *(_OWORD *)(v421 - 104) = *(_OWORD *)&v48[v420 - 104];
                *(_OWORD *)(v421 - 120) = v433;
                *(_OWORD *)(v421 - 136) = v432;
                v434 = *(_OWORD *)&v48[v420 - 88];
                *(_QWORD *)(v421 - 72) = *(_QWORD *)&v48[v420 - 72];
                *(_OWORD *)(v421 - 88) = v434;
                v435 = *(_OWORD *)&v48[v420 - 64];
                *(_QWORD *)(v421 - 48) = *(_QWORD *)&v48[v420 - 48];
                *(_OWORD *)(v421 - 64) = v435;
                v436 = *(_QWORD *)&v48[v420 - 40];
                *(_BYTE *)(v421 - 32) = v48[v420 - 32];
                *(_QWORD *)(v421 - 40) = v436;
                *(_OWORD *)(v421 - 24) = *(_OWORD *)&v48[v420 - 24];
                *((_QWORD *)v422 - 3) = 0;
                *((_QWORD *)v422 - 2) = 0;
                *(_BYTE *)(v421 - 8) = v48[v420 - 8];
                v420 -= 360;
              }
              while (&v48[v420] != v419);
              v397 += v420;
            }
            v437 = (char *)v2[810];
            if (v437 != v48)
            {
              do
              {
                *(_QWORD *)v418 = *(_QWORD *)v48;
                *(_QWORD *)(v418 + 8) = *((_QWORD *)v48 + 1);
                v438 = *((_OWORD *)v48 + 2);
                *(_OWORD *)(v418 + 16) = *((_OWORD *)v48 + 1);
                *(_OWORD *)(v418 + 32) = v438;
                v439 = *((_OWORD *)v48 + 4);
                *(_OWORD *)(v418 + 48) = *((_OWORD *)v48 + 3);
                *(_OWORD *)(v418 + 64) = v439;
                *(_BYTE *)(v418 + 88) = v48[88];
                *(_QWORD *)(v418 + 80) = &off_24CA04D00;
                v440 = *((_OWORD *)v48 + 6);
                *(_QWORD *)(v418 + 112) = *((_QWORD *)v48 + 14);
                *(_OWORD *)(v418 + 96) = v440;
                *(_BYTE *)(v418 + 128) = v48[128];
                *(_QWORD *)(v418 + 120) = &off_24CA04D00;
                v441 = *(_OWORD *)(v48 + 136);
                *(_QWORD *)(v418 + 152) = *((_QWORD *)v48 + 19);
                *(_OWORD *)(v418 + 136) = v441;
                v442 = *((_OWORD *)v48 + 10);
                *(_QWORD *)(v418 + 176) = *((_QWORD *)v48 + 22);
                *(_OWORD *)(v418 + 160) = v442;
                v443 = *(_OWORD *)(v48 + 184);
                v444 = *(_OWORD *)(v48 + 200);
                *(_DWORD *)(v418 + 216) = *((_DWORD *)v48 + 54);
                *(_OWORD *)(v418 + 200) = v444;
                *(_OWORD *)(v418 + 184) = v443;
                v445 = *((_OWORD *)v48 + 14);
                v446 = *((_OWORD *)v48 + 16);
                *(_OWORD *)(v418 + 240) = *((_OWORD *)v48 + 15);
                *(_OWORD *)(v418 + 256) = v446;
                *(_OWORD *)(v418 + 224) = v445;
                v447 = *((_OWORD *)v48 + 17);
                *(_QWORD *)(v418 + 288) = *((_QWORD *)v48 + 36);
                *(_OWORD *)(v418 + 272) = v447;
                v448 = *(_OWORD *)(v48 + 296);
                *(_QWORD *)(v418 + 312) = *((_QWORD *)v48 + 39);
                *(_OWORD *)(v418 + 296) = v448;
                v449 = *((_QWORD *)v48 + 40);
                *(_BYTE *)(v418 + 328) = v48[328];
                *(_QWORD *)(v418 + 320) = v449;
                *(_OWORD *)(v418 + 336) = *((_OWORD *)v48 + 21);
                *((_QWORD *)v48 + 42) = 0;
                *((_QWORD *)v48 + 43) = 0;
                *(_BYTE *)(v418 + 352) = v48[352];
                v418 += 360;
                v48 += 360;
              }
              while (v48 != v437);
              v48 = (char *)v2[810];
            }
            v450 = (char *)v2[809];
            v2[809] = v397;
            v2[810] = v418;
            v451 = v2[811];
            v2[811] = *((_QWORD *)&v572 + 1);
            *((_QWORD *)&v572 + 1) = v451;
            *(_QWORD *)&__dst = v450;
            *((_QWORD *)&__dst + 1) = v450;
            if (v48 != v450)
            {
              do
              {
                *(_QWORD *)&v572 = v48 - 360;
                v452 = (std::__shared_weak_count *)*((_QWORD *)v48 - 2);
                if (v452)
                {
                  p_shared_owners = (unint64_t *)&v452->__shared_owners_;
                  do
                    v454 = __ldaxr(p_shared_owners);
                  while (__stlxr(v454 - 1, p_shared_owners));
                  if (!v454)
                  {
                    ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                    std::__shared_weak_count::__release_weak(v452);
                  }
                }
                v48 = (char *)v572;
              }
              while ((char *)v572 != v450);
              v48 = (char *)__dst;
            }
            if (v48)
              operator delete(v48);
          }
          else if (v48 == v47)
          {
            *(_QWORD *)v47 = v497;
            v384 = &v46[8 * ((v48 - v46) >> 3)];
            *((_QWORD *)v384 + 1) = v497;
            v384 += 8;
            v385 = v531;
            *(_OWORD *)(v384 + 24) = v532;
            *(_OWORD *)(v384 + 8) = v385;
            v386 = v533;
            *(_OWORD *)(v384 + 56) = v534;
            *(_OWORD *)(v384 + 40) = v386;
            v384[80] = v40;
            *((_QWORD *)v384 + 9) = &off_24CA04D00;
            v387 = v538;
            *(_OWORD *)(v384 + 88) = v537;
            v384[120] = v44;
            *((_QWORD *)v384 + 13) = v387;
            *((_QWORD *)v384 + 14) = &off_24CA04D00;
            v388 = v541;
            *((_QWORD *)v384 + 18) = v542;
            *((_OWORD *)v384 + 8) = v388;
            v389 = v543;
            *((_QWORD *)v384 + 21) = v544;
            *(_OWORD *)(v384 + 152) = v389;
            v390 = v545;
            v391 = v546;
            *((_DWORD *)v384 + 52) = v547;
            *((_OWORD *)v384 + 11) = v390;
            *((_OWORD *)v384 + 12) = v391;
            v392 = v548;
            v393 = v549;
            *(_OWORD *)(v384 + 248) = v550;
            *(_OWORD *)(v384 + 232) = v393;
            *(_OWORD *)(v384 + 216) = v392;
            v394 = v551;
            *((_QWORD *)v384 + 35) = v552;
            *(_OWORD *)(v384 + 264) = v394;
            v395 = v553;
            *((_QWORD *)v384 + 38) = v554;
            *((_OWORD *)v384 + 18) = v395;
            v396 = v555;
            v384[320] = v556;
            *((_QWORD *)v384 + 39) = v396;
            *((_QWORD *)v384 + 41) = 0;
            *((_QWORD *)v384 + 42) = 0;
            v557 = 0uLL;
            v384[344] = 0;
            v2[810] = v47 + 360;
          }
          else
          {
            v468 = 0x4FA4FA4FA4FA4FA5 * ((v48 - v46) >> 3);
            *(_OWORD *)v569 = *(_OWORD *)&v503.__r_.__value_.__r.__words[1];
            v570 = v504;
            *(_OWORD *)__p = v505;
            v568 = v506;
            v576 = *(_OWORD *)v509;
            v577 = *(_QWORD *)&v509[16];
            v575 = *(_QWORD *)&v512[16];
            v574 = *(_OWORD *)v512;
            v566 = v514;
            v565 = v513;
            LODWORD(v573) = v517;
            __dst = v515;
            v572 = v516;
            v465 = v549;
            v466 = v548;
            v467 = v550;
            v564 = v522;
            v563 = v521;
            v562 = v524;
            v561 = v523;
            v560 = v526;
            v559 = v525;
            v104 = v47 - 360;
            v105 = v47;
            v106 = v47 - 360;
            v557 = 0uLL;
            if ((unint64_t)v47 >= 0x168)
            {
              do
              {
                *(_QWORD *)v105 = *(_QWORD *)v106;
                *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
                v107 = *((_OWORD *)v106 + 2);
                *((_OWORD *)v105 + 1) = *((_OWORD *)v106 + 1);
                *((_OWORD *)v105 + 2) = v107;
                v108 = *((_OWORD *)v106 + 4);
                *((_OWORD *)v105 + 3) = *((_OWORD *)v106 + 3);
                *((_OWORD *)v105 + 4) = v108;
                v105[88] = v106[88];
                *((_QWORD *)v105 + 10) = &off_24CA04D00;
                v109 = *((_OWORD *)v106 + 6);
                *((_QWORD *)v105 + 14) = *((_QWORD *)v106 + 14);
                *((_OWORD *)v105 + 6) = v109;
                v105[128] = v106[128];
                *((_QWORD *)v105 + 15) = &off_24CA04D00;
                v110 = *(_OWORD *)(v106 + 136);
                *((_QWORD *)v105 + 19) = *((_QWORD *)v106 + 19);
                *(_OWORD *)(v105 + 136) = v110;
                v111 = *((_OWORD *)v106 + 10);
                *((_QWORD *)v105 + 22) = *((_QWORD *)v106 + 22);
                *((_OWORD *)v105 + 10) = v111;
                v112 = *(_OWORD *)(v106 + 184);
                v113 = *(_OWORD *)(v106 + 200);
                *((_DWORD *)v105 + 54) = *((_DWORD *)v106 + 54);
                *(_OWORD *)(v105 + 200) = v113;
                *(_OWORD *)(v105 + 184) = v112;
                v114 = *((_OWORD *)v106 + 14);
                v115 = *((_OWORD *)v106 + 16);
                *((_OWORD *)v105 + 15) = *((_OWORD *)v106 + 15);
                *((_OWORD *)v105 + 16) = v115;
                *((_OWORD *)v105 + 14) = v114;
                v116 = *((_OWORD *)v106 + 17);
                *((_QWORD *)v105 + 36) = *((_QWORD *)v106 + 36);
                *((_OWORD *)v105 + 17) = v116;
                v117 = *(_OWORD *)(v106 + 296);
                *((_QWORD *)v105 + 39) = *((_QWORD *)v106 + 39);
                *(_OWORD *)(v105 + 296) = v117;
                v118 = *((_QWORD *)v106 + 40);
                v105[328] = v106[328];
                *((_QWORD *)v105 + 40) = v118;
                *((_OWORD *)v105 + 21) = *((_OWORD *)v106 + 21);
                *((_QWORD *)v106 + 42) = 0;
                *((_QWORD *)v106 + 43) = 0;
                v105[352] = v106[352];
                v105 += 360;
                v106 += 360;
              }
              while (v106 < v47);
            }
            v2[810] = v105;
            if (v47 != v48 + 360)
            {
              v469 = v44;
              v470 = v40;
              do
              {
                v358 = v104 - 360;
                v359 = v47 - 360;
                *(_QWORD *)v359 = *((_QWORD *)v104 - 45);
                *((_QWORD *)v47 - 44) = *((_QWORD *)v104 - 44);
                v360 = *(_OWORD *)(v104 - 328);
                *((_OWORD *)v359 + 1) = *(_OWORD *)(v104 - 344);
                *((_OWORD *)v359 + 2) = v360;
                v361 = *(_OWORD *)(v104 - 296);
                *((_OWORD *)v359 + 3) = *(_OWORD *)(v104 - 312);
                *((_OWORD *)v359 + 4) = v361;
                v359[88] = *(v104 - 272);
                v362 = *(_OWORD *)(v104 - 264);
                *((_QWORD *)v47 - 31) = *((_QWORD *)v104 - 31);
                *((_OWORD *)v359 + 6) = v362;
                *(v47 - 232) = *(v104 - 232);
                v363 = *((_OWORD *)v104 - 14);
                *((_QWORD *)v47 - 26) = *((_QWORD *)v104 - 26);
                *((_OWORD *)v47 - 14) = v363;
                v364 = *(_OWORD *)(v104 - 200);
                *((_QWORD *)v47 - 23) = *((_QWORD *)v104 - 23);
                *(_OWORD *)(v47 - 200) = v364;
                v365 = *((_OWORD *)v104 - 11);
                v366 = *((_OWORD *)v104 - 10);
                *((_DWORD *)v47 - 36) = *((_DWORD *)v104 - 36);
                *((_OWORD *)v47 - 11) = v365;
                *((_OWORD *)v47 - 10) = v366;
                *((_QWORD *)v47 - 17) = *((_QWORD *)v104 - 17);
                *((_QWORD *)v47 - 16) = *((_QWORD *)v104 - 16);
                *((_QWORD *)v47 - 15) = *((_QWORD *)v104 - 15);
                *((_QWORD *)v47 - 14) = *((_QWORD *)v104 - 14);
                *((_QWORD *)v47 - 13) = *((_QWORD *)v104 - 13);
                *((_QWORD *)v47 - 12) = *((_QWORD *)v104 - 12);
                v367 = *(_OWORD *)(v104 - 88);
                *((_QWORD *)v47 - 9) = *((_QWORD *)v104 - 9);
                *(_OWORD *)(v47 - 88) = v367;
                v368 = *((_OWORD *)v104 - 4);
                *((_QWORD *)v47 - 6) = *((_QWORD *)v104 - 6);
                *((_OWORD *)v47 - 4) = v368;
                v369 = *((_QWORD *)v104 - 5);
                *(v47 - 32) = *(v104 - 32);
                *((_QWORD *)v47 - 5) = v369;
                v370 = *(_OWORD *)(v104 - 24);
                *((_QWORD *)v104 - 3) = 0;
                *((_QWORD *)v104 - 2) = 0;
                v371 = (std::__shared_weak_count *)*((_QWORD *)v47 - 2);
                *(_OWORD *)(v47 - 24) = v370;
                if (v371)
                {
                  v372 = (unint64_t *)&v371->__shared_owners_;
                  do
                    v373 = __ldaxr(v372);
                  while (__stlxr(v373 - 1, v372));
                  if (!v373)
                  {
                    v472 = v371;
                    v484 = v104;
                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                    std::__shared_weak_count::__release_weak(v472);
                    v359 = v47 - 360;
                    v104 = v484;
                    v44 = v469;
                    v40 = v470;
                    v46 = v471;
                    v48 = v494;
                  }
                }
                *(v47 - 8) = *(v104 - 8);
                v47 = v359;
                v104 = v358;
              }
              while (v358 != v48);
            }
            *(int64x2_t *)v48 = vdupq_n_s64(v497);
            v377 = &v46[360 * v468];
            *((_OWORD *)v377 + 1) = *(_OWORD *)v569;
            *((_OWORD *)v377 + 2) = v570;
            *((_OWORD *)v377 + 3) = *(_OWORD *)__p;
            *((_OWORD *)v377 + 4) = v568;
            v377[88] = v40;
            *((_OWORD *)v377 + 6) = v576;
            *((_QWORD *)v377 + 14) = v577;
            v377[128] = v44;
            *((_QWORD *)v377 + 19) = v575;
            *(_OWORD *)(v377 + 136) = v574;
            *((_QWORD *)v377 + 22) = v566;
            *((_OWORD *)v377 + 10) = v565;
            *((_DWORD *)v377 + 54) = (_DWORD)v573;
            *(_OWORD *)(v377 + 200) = v572;
            *(_OWORD *)(v377 + 184) = __dst;
            *((_OWORD *)v377 + 14) = v466;
            *((_OWORD *)v377 + 15) = v465;
            v378 = v563;
            *((_OWORD *)v377 + 16) = v467;
            *((_OWORD *)v377 + 17) = v378;
            *((_QWORD *)v377 + 36) = v564;
            v379 = v562;
            *(_OWORD *)(v377 + 296) = v561;
            v377[328] = v560;
            v380 = v559;
            *((_QWORD *)v377 + 39) = v379;
            *((_QWORD *)v377 + 40) = v380;
            v381 = (std::__shared_weak_count *)*((_QWORD *)v377 + 43);
            *((_QWORD *)v377 + 42) = 0;
            *((_QWORD *)v377 + 43) = 0;
            if (v381)
            {
              v382 = (unint64_t *)&v381->__shared_owners_;
              do
                v383 = __ldaxr(v382);
              while (__stlxr(v383 - 1, v382));
              if (!v383)
              {
                ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                std::__shared_weak_count::__release_weak(v381);
                v46 = v471;
              }
            }
            v46[360 * v468 + 352] = 0;
          }
          v455 = (std::__shared_weak_count *)*((_QWORD *)&v557 + 1);
          if (*((_QWORD *)&v557 + 1))
          {
            v456 = (unint64_t *)(*((_QWORD *)&v557 + 1) + 8);
            do
              v457 = __ldaxr(v456);
            while (__stlxr(v457 - 1, v456));
            if (!v457)
            {
              ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
              std::__shared_weak_count::__release_weak(v455);
            }
          }
        }
        v487[1].i8[2] = 0;
        v487[1].i8[0] = 0;
        *v487 = vaddq_s64(*v487, (int64x2_t)xmmword_2103B84D0);
        v458 = v528;
        if (v528)
        {
          v459 = (unint64_t *)&v528->__shared_owners_;
          do
            v460 = __ldaxr(v459);
          while (__stlxr(v460 - 1, v459));
          if (!v460)
          {
            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
            std::__shared_weak_count::__release_weak(v458);
          }
        }
        v55 = 0;
      }
LABEL_156:
      if ((v55 & 1) != 0)
        goto LABEL_157;
      v119 = 0;
      *(_BYTE *)(v475 + 4) = 0;
      *(_DWORD *)v475 = 0;
LABEL_159:
      if (v119)
      {
        sub_20E863438((uint64_t)&v530);
        v120 = (char *)v2[707];
        v121 = (char *)v2[708];
        if (v121 != v120)
        {
          v122 = (v121 - v120) >> 4;
          do
          {
            v123 = v122 >> 1;
            v124 = &v120[16 * (v122 >> 1)];
            v126 = *(_DWORD *)v124;
            v125 = v124 + 16;
            v122 += ~(v122 >> 1);
            if (v126)
              v122 = v123;
            else
              v120 = v125;
          }
          while (v122);
        }
        if (v120 == v121 || *(_DWORD *)v120 != 1)
        {
          v132 = 1;
          v133 = (char *)v2[647];
          v134 = (char *)v2[648];
          v135 = v133;
          v136 = v134 - v133;
          if (v134 == v133)
            goto LABEL_184;
        }
        else
        {
          v127 = sub_20E86A980(&v531, (uint64_t)"error: landmark variable ", 25);
          sub_20FC37B38((uint64_t)&__dst);
          if ((SBYTE7(v572) & 0x80u) == 0)
            p_dst = &__dst;
          else
            p_dst = (__int128 *)__dst;
          if ((SBYTE7(v572) & 0x80u) == 0)
            v129 = BYTE7(v572);
          else
            v129 = *((_QWORD *)&__dst + 1);
          v130 = sub_20E86A980(v127, (uint64_t)p_dst, v129);
          sub_20E86A980(v130, (uint64_t)" with ID ", 9);
          v131 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v131, (uint64_t)" was not found.\n", 16);
          if (SBYTE7(v572) < 0)
            operator delete((void *)__dst);
          v132 = 0;
          v133 = (char *)v2[647];
          v134 = (char *)v2[648];
          v135 = v133;
          v136 = v134 - v133;
          if (v134 == v133)
          {
LABEL_184:
            if (v135 != v134 && *(_DWORD *)v135 == v14)
            {
              if (v134 != v133)
              {
                v142 = (v134 - v133) >> 4;
                do
                {
                  v143 = v142 >> 1;
                  v144 = (unsigned int *)&v133[16 * (v142 >> 1)];
                  v146 = *v144;
                  v145 = (char *)(v144 + 4);
                  v142 += ~(v142 >> 1);
                  if (v146 < v14)
                    v133 = v145;
                  else
                    v142 = v143;
                }
                while (v142);
              }
              v481 = v132;
              if (v133 == v134 || *(_DWORD *)v133 != v14)
                v133 = v134;
              v147 = *((_QWORD *)v133 + 1);
              v148 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
              sub_20F622E88((uint64_t)&__dst);
              if ((SBYTE7(v572) & 0x80u) == 0)
                v149 = &__dst;
              else
                v149 = (__int128 *)__dst;
              if ((SBYTE7(v572) & 0x80u) == 0)
                v150 = BYTE7(v572);
              else
                v150 = *((_QWORD *)&__dst + 1);
              v151 = sub_20E86A980(v148, (uint64_t)v149, v150);
              sub_20E86A980(v151, (uint64_t)" with ID ", 9);
              v152 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v152, (uint64_t)" found (", 8);
              v153 = (_QWORD *)std::ostream::operator<<();
              v154 = sub_20E86A980(v153, (uint64_t)", ", 2);
              if (*(_BYTE *)(v147 + 20))
                v155 = "free";
              else
                v155 = "fixed";
              if (*(_BYTE *)(v147 + 20))
                v156 = 4;
              else
                v156 = 5;
              v157 = sub_20E86A980(v154, (uint64_t)v155, v156);
              sub_20E86A980(v157, (uint64_t)")\n", 2);
              v158 = v481;
              if (SBYTE7(v572) < 0)
                operator delete((void *)__dst);
              v495 = *(unsigned __int8 *)(v147 + 20);
              v159 = v14 + 1;
              v160 = (char *)v2[647];
              v161 = (char *)v2[648];
              v162 = v160;
              v163 = v161 - v160;
              if (v161 == v160)
                goto LABEL_225;
LABEL_220:
              v169 = v163 >> 4;
              v162 = v160;
              do
              {
                v170 = v169 >> 1;
                v171 = (unsigned int *)&v162[16 * (v169 >> 1)];
                v173 = *v171;
                v172 = (char *)(v171 + 4);
                v169 += ~(v169 >> 1);
                if (v173 < v159)
                  v162 = v172;
                else
                  v169 = v170;
              }
              while (v169);
              goto LABEL_225;
            }
            v164 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
            sub_20F622E88((uint64_t)&__dst);
            if ((SBYTE7(v572) & 0x80u) == 0)
              v165 = &__dst;
            else
              v165 = (__int128 *)__dst;
            if ((SBYTE7(v572) & 0x80u) == 0)
              v166 = BYTE7(v572);
            else
              v166 = *((_QWORD *)&__dst + 1);
            v167 = sub_20E86A980(v164, (uint64_t)v165, v166);
            sub_20E86A980(v167, (uint64_t)" with ID ", 9);
            v168 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v168, (uint64_t)" not found\n", 11);
            v159 = v14 + 1;
            if (SBYTE7(v572) < 0)
              operator delete((void *)__dst);
            v158 = 0;
            v495 = 0;
            v160 = (char *)v2[647];
            v161 = (char *)v2[648];
            v162 = v160;
            v163 = v161 - v160;
            if (v161 != v160)
              goto LABEL_220;
LABEL_225:
            if (v162 == v161 || *(_DWORD *)v162 != v159)
            {
              v195 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
              sub_20F622E88((uint64_t)&__dst);
              if ((SBYTE7(v572) & 0x80u) == 0)
                v196 = &__dst;
              else
                v196 = (__int128 *)__dst;
              if ((SBYTE7(v572) & 0x80u) == 0)
                v197 = BYTE7(v572);
              else
                v197 = *((_QWORD *)&__dst + 1);
              v198 = sub_20E86A980(v195, (uint64_t)v196, v197);
              sub_20E86A980(v198, (uint64_t)" with ID ", 9);
              v199 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v199, (uint64_t)" not found\n", 11);
              if (SBYTE7(v572) < 0)
              {
                operator delete((void *)__dst);
                v190 = 0;
                v191 = (char *)v2[647];
                v192 = (char *)v2[648];
                v193 = v191;
                v194 = v192 - v191;
                if (v192 == v191)
                  goto LABEL_267;
              }
              else
              {
                v190 = 0;
                v191 = (char *)v2[647];
                v192 = (char *)v2[648];
                v193 = v191;
                v194 = v192 - v191;
                if (v192 == v191)
                  goto LABEL_267;
              }
            }
            else
            {
              if (v161 != v160)
              {
                v174 = (v161 - v160) >> 4;
                do
                {
                  v175 = v174 >> 1;
                  v176 = (unsigned int *)&v160[16 * (v174 >> 1)];
                  v178 = *v176;
                  v177 = (char *)(v176 + 4);
                  v174 += ~(v174 >> 1);
                  if (v178 < v159)
                    v160 = v177;
                  else
                    v174 = v175;
                }
                while (v174);
              }
              v482 = v158;
              if (v160 == v161 || *(_DWORD *)v160 != v159)
                v160 = v161;
              v179 = *((_QWORD *)v160 + 1);
              v180 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
              sub_20F622E88((uint64_t)&__dst);
              if ((SBYTE7(v572) & 0x80u) == 0)
                v181 = &__dst;
              else
                v181 = (__int128 *)__dst;
              if ((SBYTE7(v572) & 0x80u) == 0)
                v182 = BYTE7(v572);
              else
                v182 = *((_QWORD *)&__dst + 1);
              v183 = sub_20E86A980(v180, (uint64_t)v181, v182);
              sub_20E86A980(v183, (uint64_t)" with ID ", 9);
              v184 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v184, (uint64_t)" found (", 8);
              v185 = (_QWORD *)std::ostream::operator<<();
              v186 = sub_20E86A980(v185, (uint64_t)", ", 2);
              if (*(_BYTE *)(v179 + 20))
                v187 = "free";
              else
                v187 = "fixed";
              if (*(_BYTE *)(v179 + 20))
                v188 = 4;
              else
                v188 = 5;
              v189 = sub_20E86A980(v186, (uint64_t)v187, v188);
              sub_20E86A980(v189, (uint64_t)")\n", 2);
              v190 = v482;
              if (SBYTE7(v572) < 0)
                operator delete((void *)__dst);
              v495 |= *(unsigned __int8 *)(v179 + 20);
              v191 = (char *)v2[647];
              v192 = (char *)v2[648];
              v193 = v191;
              v194 = v192 - v191;
              if (v192 == v191)
              {
LABEL_267:
                if (v193 == v192 || *(_DWORD *)v193 != v15)
                {
                  v226 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                  sub_20F622E88((uint64_t)&__dst);
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v227 = &__dst;
                  else
                    v227 = (__int128 *)__dst;
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v228 = BYTE7(v572);
                  else
                    v228 = *((_QWORD *)&__dst + 1);
                  v229 = sub_20E86A980(v226, (uint64_t)v227, v228);
                  sub_20E86A980(v229, (uint64_t)" with ID ", 9);
                  v230 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v230, (uint64_t)" not found\n", 11);
                  if (SBYTE7(v572) < 0)
                  {
                    operator delete((void *)__dst);
                    v221 = 0;
                    v222 = (char *)v2[647];
                    v223 = (char *)v2[648];
                    v224 = v222;
                    v225 = v223 - v222;
                    if (v223 == v222)
                      goto LABEL_309;
                  }
                  else
                  {
                    v221 = 0;
                    v222 = (char *)v2[647];
                    v223 = (char *)v2[648];
                    v224 = v222;
                    v225 = v223 - v222;
                    if (v223 == v222)
                      goto LABEL_309;
                  }
                }
                else
                {
                  if (v192 != v191)
                  {
                    v205 = (v192 - v191) >> 4;
                    do
                    {
                      v206 = v205 >> 1;
                      v207 = (unsigned int *)&v191[16 * (v205 >> 1)];
                      v209 = *v207;
                      v208 = (char *)(v207 + 4);
                      v205 += ~(v205 >> 1);
                      if (v209 < v15)
                        v191 = v208;
                      else
                        v205 = v206;
                    }
                    while (v205);
                  }
                  v483 = v190;
                  if (v191 == v192 || *(_DWORD *)v191 != v15)
                    v191 = v192;
                  v210 = *((_QWORD *)v191 + 1);
                  v211 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                  sub_20F622E88((uint64_t)&__dst);
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v212 = &__dst;
                  else
                    v212 = (__int128 *)__dst;
                  if ((SBYTE7(v572) & 0x80u) == 0)
                    v213 = BYTE7(v572);
                  else
                    v213 = *((_QWORD *)&__dst + 1);
                  v214 = sub_20E86A980(v211, (uint64_t)v212, v213);
                  sub_20E86A980(v214, (uint64_t)" with ID ", 9);
                  v215 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v215, (uint64_t)" found (", 8);
                  v216 = (_QWORD *)std::ostream::operator<<();
                  v217 = sub_20E86A980(v216, (uint64_t)", ", 2);
                  if (*(_BYTE *)(v210 + 20))
                    v218 = "free";
                  else
                    v218 = "fixed";
                  if (*(_BYTE *)(v210 + 20))
                    v219 = 4;
                  else
                    v219 = 5;
                  v220 = sub_20E86A980(v217, (uint64_t)v218, v219);
                  sub_20E86A980(v220, (uint64_t)")\n", 2);
                  v221 = v483;
                  if (SBYTE7(v572) < 0)
                    operator delete((void *)__dst);
                  v495 |= *(unsigned __int8 *)(v210 + 20);
                  v222 = (char *)v2[647];
                  v223 = (char *)v2[648];
                  v224 = v222;
                  v225 = v223 - v222;
                  if (v223 == v222)
                  {
LABEL_309:
                    if (v224 != v223 && *(_DWORD *)v224 == v45)
                    {
                      if (v223 != v222)
                      {
                        v236 = (v223 - v222) >> 4;
                        do
                        {
                          v237 = v236 >> 1;
                          v238 = (unsigned int *)&v222[16 * (v236 >> 1)];
                          v240 = *v238;
                          v239 = (char *)(v238 + 4);
                          v236 += ~(v236 >> 1);
                          if (v240 < v45)
                            v222 = v239;
                          else
                            v236 = v237;
                        }
                        while (v236);
                      }
                      v241 = v221;
                      if (v222 == v223 || *(_DWORD *)v222 != v45)
                        v222 = v223;
                      v242 = *((_QWORD *)v222 + 1);
                      v243 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                      sub_20F622E88((uint64_t)&__dst);
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v244 = &__dst;
                      else
                        v244 = (__int128 *)__dst;
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v245 = BYTE7(v572);
                      else
                        v245 = *((_QWORD *)&__dst + 1);
                      v246 = sub_20E86A980(v243, (uint64_t)v244, v245);
                      v247 = v241;
                      sub_20E86A980(v246, (uint64_t)" with ID ", 9);
                      v248 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v248, (uint64_t)" found (", 8);
                      v249 = (_QWORD *)std::ostream::operator<<();
                      v250 = sub_20E86A980(v249, (uint64_t)", ", 2);
                      if (*(_BYTE *)(v242 + 20))
                        v251 = "free";
                      else
                        v251 = "fixed";
                      if (*(_BYTE *)(v242 + 20))
                        v252 = 4;
                      else
                        v252 = 5;
                      v253 = sub_20E86A980(v250, (uint64_t)v251, v252);
                      sub_20E86A980(v253, (uint64_t)")\n", 2);
                      if (SBYTE7(v572) < 0)
                        operator delete((void *)__dst);
                      v495 |= *(unsigned __int8 *)(v242 + 20);
                      v254 = (char *)v2[683];
                      v255 = (char *)v2[684];
                      v256 = v254;
                      v257 = v255 - v254;
                      v258 = v493;
                      if (v255 == v254)
                        goto LABEL_350;
LABEL_345:
                      v264 = v257 >> 4;
                      v256 = v254;
                      do
                      {
                        v265 = v264 >> 1;
                        v266 = (unsigned int *)&v256[16 * (v264 >> 1)];
                        v268 = *v266;
                        v267 = (char *)(v266 + 4);
                        v264 += ~(v264 >> 1);
                        if (v268 < v258)
                          v256 = v267;
                        else
                          v264 = v265;
                      }
                      while (v264);
                      goto LABEL_350;
                    }
                    v259 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                    sub_20F622E88((uint64_t)&__dst);
                    if ((SBYTE7(v572) & 0x80u) == 0)
                      v260 = &__dst;
                    else
                      v260 = (__int128 *)__dst;
                    if ((SBYTE7(v572) & 0x80u) == 0)
                      v261 = BYTE7(v572);
                    else
                      v261 = *((_QWORD *)&__dst + 1);
                    v262 = sub_20E86A980(v259, (uint64_t)v260, v261);
                    sub_20E86A980(v262, (uint64_t)" with ID ", 9);
                    v263 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v263, (uint64_t)" not found\n", 11);
                    if (SBYTE7(v572) < 0)
                      operator delete((void *)__dst);
                    v247 = 0;
                    v254 = (char *)v2[683];
                    v255 = (char *)v2[684];
                    v256 = v254;
                    v257 = v255 - v254;
                    v258 = v493;
                    if (v255 != v254)
                      goto LABEL_345;
LABEL_350:
                    if (v256 == v255 || *(_DWORD *)v256 != v493)
                    {
                      v291 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                      sub_20FC37D50((uint64_t)&__dst);
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v292 = &__dst;
                      else
                        v292 = (__int128 *)__dst;
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v293 = BYTE7(v572);
                      else
                        v293 = *((_QWORD *)&__dst + 1);
                      v294 = sub_20E86A980(v291, (uint64_t)v292, v293);
                      sub_20E86A980(v294, (uint64_t)" with ID ", 9);
                      v295 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v295, (uint64_t)" not found\n", 11);
                      if (SBYTE7(v572) < 0)
                      {
                        operator delete((void *)__dst);
                        v280 = 0;
                        v287 = (char *)v2[707];
                        v288 = (char *)v2[708];
                        v289 = v287;
                        v290 = v288 - v287;
                        if (v288 == v287)
                          goto LABEL_392;
                      }
                      else
                      {
                        v280 = 0;
                        v287 = (char *)v2[707];
                        v288 = (char *)v2[708];
                        v289 = v287;
                        v290 = v288 - v287;
                        if (v288 == v287)
                          goto LABEL_392;
                      }
                    }
                    else
                    {
                      if (v255 != v254)
                      {
                        v269 = (v255 - v254) >> 4;
                        do
                        {
                          v270 = v269 >> 1;
                          v271 = (unsigned int *)&v254[16 * (v269 >> 1)];
                          v273 = *v271;
                          v272 = (char *)(v271 + 4);
                          v269 += ~(v269 >> 1);
                          if (v273 < v493)
                            v254 = v272;
                          else
                            v269 = v270;
                        }
                        while (v269);
                      }
                      v274 = v247;
                      if (v254 == v255 || *(_DWORD *)v254 != v493)
                        v254 = v255;
                      v275 = *((_QWORD *)v254 + 1);
                      v276 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                      sub_20FC37D50((uint64_t)&__dst);
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v277 = &__dst;
                      else
                        v277 = (__int128 *)__dst;
                      if ((SBYTE7(v572) & 0x80u) == 0)
                        v278 = BYTE7(v572);
                      else
                        v278 = *((_QWORD *)&__dst + 1);
                      v279 = sub_20E86A980(v276, (uint64_t)v277, v278);
                      v280 = v274;
                      sub_20E86A980(v279, (uint64_t)" with ID ", 9);
                      v281 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v281, (uint64_t)" found (", 8);
                      v282 = (_QWORD *)std::ostream::operator<<();
                      v283 = sub_20E86A980(v282, (uint64_t)", ", 2);
                      if (*(_BYTE *)(v275 + 20))
                        v284 = "free";
                      else
                        v284 = "fixed";
                      if (*(_BYTE *)(v275 + 20))
                        v285 = 4;
                      else
                        v285 = 5;
                      v286 = sub_20E86A980(v283, (uint64_t)v284, v285);
                      sub_20E86A980(v286, (uint64_t)")\n", 2);
                      if (SBYTE7(v572) < 0)
                        operator delete((void *)__dst);
                      v495 |= *(unsigned __int8 *)(v275 + 20);
                      v287 = (char *)v2[707];
                      v288 = (char *)v2[708];
                      v289 = v287;
                      v290 = v288 - v287;
                      if (v288 == v287)
                      {
LABEL_392:
                        if (v289 == v288 || *(_DWORD *)v289 != 1)
                        {
                          v322 = sub_20E86A980(&v531, (uint64_t)"error: variable ", 16);
                          sub_20FC37B38((uint64_t)&__dst);
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v323 = &__dst;
                          else
                            v323 = (__int128 *)__dst;
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v324 = BYTE7(v572);
                          else
                            v324 = *((_QWORD *)&__dst + 1);
                          v325 = sub_20E86A980(v322, (uint64_t)v323, v324);
                          sub_20E86A980(v325, (uint64_t)" with ID ", 9);
                          v326 = (_QWORD *)std::ostream::operator<<();
                          sub_20E86A980(v326, (uint64_t)" not found\n", 11);
                          if (SBYTE7(v572) < 0)
                          {
                            operator delete((void *)__dst);
                            v312 = 0;
                            v319 = (char *)v2[809];
                            v320 = (char *)v2[810];
                            v321 = v320 - v319;
                            if (v320 == v319)
                              goto LABEL_445;
                          }
                          else
                          {
                            v312 = 0;
                            v319 = (char *)v2[809];
                            v320 = (char *)v2[810];
                            v321 = v320 - v319;
                            if (v320 == v319)
                              goto LABEL_445;
                          }
                        }
                        else
                        {
                          if (v288 != v287)
                          {
                            v301 = (v288 - v287) >> 4;
                            do
                            {
                              v302 = v301 >> 1;
                              v303 = (int *)&v287[16 * (v301 >> 1)];
                              v305 = *v303;
                              v304 = (char *)(v303 + 4);
                              v301 += ~(v301 >> 1);
                              if (v305)
                                v301 = v302;
                              else
                                v287 = v304;
                            }
                            while (v301);
                          }
                          v306 = v280;
                          if (v287 == v288 || *(_DWORD *)v287 != 1)
                            v287 = v288;
                          v307 = *((_QWORD *)v287 + 1);
                          v308 = sub_20E86A980(&v531, (uint64_t)"debug: variable ", 16);
                          sub_20FC37B38((uint64_t)&__dst);
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v309 = &__dst;
                          else
                            v309 = (__int128 *)__dst;
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v310 = BYTE7(v572);
                          else
                            v310 = *((_QWORD *)&__dst + 1);
                          v311 = sub_20E86A980(v308, (uint64_t)v309, v310);
                          v312 = v306;
                          sub_20E86A980(v311, (uint64_t)" with ID ", 9);
                          v313 = (_QWORD *)std::ostream::operator<<();
                          sub_20E86A980(v313, (uint64_t)" found (", 8);
                          v314 = (_QWORD *)std::ostream::operator<<();
                          v315 = sub_20E86A980(v314, (uint64_t)", ", 2);
                          if (*(_BYTE *)(v307 + 20))
                            v316 = "free";
                          else
                            v316 = "fixed";
                          if (*(_BYTE *)(v307 + 20))
                            v317 = 4;
                          else
                            v317 = 5;
                          v318 = sub_20E86A980(v315, (uint64_t)v316, v317);
                          sub_20E86A980(v318, (uint64_t)")\n", 2);
                          if (SBYTE7(v572) < 0)
                            operator delete((void *)__dst);
                          v495 |= *(unsigned __int8 *)(v307 + 20);
                          v319 = (char *)v2[809];
                          v320 = (char *)v2[810];
                          v321 = v320 - v319;
                          if (v320 == v319)
                          {
LABEL_445:
                            if (v495)
                            {
                              v337 = v312 != 0;
                              v338 = (char)v539;
                              if ((v539 & 0x10) == 0)
                                goto LABEL_447;
LABEL_457:
                              v346 = v538;
                              v347 = (const void **)&v534;
                              if (v538 < *((_QWORD *)&v534 + 1))
                              {
                                v538 = *((_QWORD *)&v534 + 1);
                                v346 = *((_QWORD *)&v534 + 1);
                                v347 = (const void **)&v534;
                              }
LABEL_460:
                              v348 = *v347;
                              v339 = v346 - (_QWORD)*v347;
                              if (v339 >= 0x7FFFFFFFFFFFFFF8)
                                sub_20E860B7C();
                              if (v339 >= 0x17)
                              {
                                v349 = (v339 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v339 | 7) != 0x17)
                                  v349 = v339 | 7;
                                v350 = v349 + 1;
                                v340 = (__int128 *)operator new(v349 + 1);
                                *((_QWORD *)&__dst + 1) = v339;
                                *(_QWORD *)&v572 = v350 | 0x8000000000000000;
                                *(_QWORD *)&__dst = v340;
                              }
                              else
                              {
                                BYTE7(v572) = v346 - *(_BYTE *)v347;
                                v340 = &__dst;
                                if (!v339)
                                  goto LABEL_468;
                              }
                              memmove(v340, v348, v339);
                              goto LABEL_468;
                            }
                            v341 = sub_20E86A980(&v531, (uint64_t)"error: factor ", 14);
                            sub_20F921478((uint64_t)&__dst);
                            if ((SBYTE7(v572) & 0x80u) == 0)
                              v342 = &__dst;
                            else
                              v342 = (__int128 *)__dst;
                            if ((SBYTE7(v572) & 0x80u) == 0)
                              v343 = BYTE7(v572);
                            else
                              v343 = *((_QWORD *)&__dst + 1);
                            v344 = sub_20E86A980(v341, (uint64_t)v342, v343);
                            sub_20E86A980(v344, (uint64_t)" with ID ", 9);
                            v345 = (_QWORD *)std::ostream::operator<<();
                            sub_20E86A980(v345, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
                            if (SBYTE7(v572) < 0)
                            {
                              operator delete((void *)__dst);
                              v337 = 0;
                              v338 = (char)v539;
                              if ((v539 & 0x10) != 0)
                                goto LABEL_457;
                            }
                            else
                            {
                              v337 = 0;
                              v338 = (char)v539;
                              if ((v539 & 0x10) != 0)
                                goto LABEL_457;
                            }
LABEL_447:
                            if ((v338 & 8) != 0)
                            {
                              v346 = *((_QWORD *)&v533 + 1);
                              v347 = (const void **)&v532 + 1;
                              goto LABEL_460;
                            }
                            v339 = 0;
                            BYTE7(v572) = 0;
                            v340 = &__dst;
LABEL_468:
                            *((_BYTE *)v340 + v339) = 0;
                            *(_OWORD *)&v503.__r_.__value_.__l.__data_ = __dst;
                            v503.__r_.__value_.__r.__words[2] = v572;
                            LOBYTE(v504) = v337;
                            v530.i64[0] = v478;
                            *(uint64_t *)((char *)v530.i64 + *(_QWORD *)(v478 - 24)) = v477;
                            *(_QWORD *)&v531 = v476;
                            *((_QWORD *)&v531 + 1) = v479;
                            if (SHIBYTE(v537) < 0)
                              operator delete(v536);
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            MEMORY[0x212BC6290](v540);
                            v351 = std::string::insert(&v503, 0, "Failed to add the factor into linear system. This could be due to duplicated factor IDs ('", 0x5AuLL);
                            v352 = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
                            *(_QWORD *)&v568 = *((_QWORD *)&v351->__r_.__value_.__l + 2);
                            *(_OWORD *)__p = v352;
                            v351->__r_.__value_.__l.__size_ = 0;
                            v351->__r_.__value_.__r.__words[2] = 0;
                            v351->__r_.__value_.__r.__words[0] = 0;
                            v353 = std::string::append((std::string *)__p, "').", 3uLL);
                            v354 = *(_OWORD *)&v353->__r_.__value_.__l.__data_;
                            *(_QWORD *)&v570 = *((_QWORD *)&v353->__r_.__value_.__l + 2);
                            *(_OWORD *)v569 = v354;
                            v353->__r_.__value_.__l.__size_ = 0;
                            v353->__r_.__value_.__r.__words[2] = 0;
                            v353->__r_.__value_.__r.__words[0] = 0;
                            if ((SBYTE7(v570) & 0x80u) == 0)
                              v355 = v569;
                            else
                              v355 = (void **)v569[0];
                            if ((SBYTE7(v570) & 0x80u) == 0)
                              v356 = BYTE7(v570);
                            else
                              v356 = (uint64_t)v569[1];
                            v357 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPlaneFactorUtil.h", 76, (uint64_t)"result", 6, (uint64_t)v355, v356, (void (*)(void **))sub_21023DDB0);
                            if (SBYTE7(v570) < 0)
                            {
                              operator delete(v569[0]);
                              if ((SBYTE7(v568) & 0x80000000) == 0)
                                goto LABEL_480;
LABEL_11:
                              operator delete(__p[0]);
                              if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
                                goto LABEL_481;
                            }
                            else
                            {
                              if (SBYTE7(v568) < 0)
                                goto LABEL_11;
LABEL_480:
                              if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
                              {
LABEL_481:
                                operator delete(v503.__r_.__value_.__l.__data_);
                                if (v357)
LABEL_572:
                                  abort();
                                goto LABEL_13;
                              }
                            }
                            if (v357)
                              goto LABEL_572;
                            goto LABEL_13;
                          }
                        }
                        v327 = 0x4FA4FA4FA4FA4FA5 * (v321 >> 3);
                        do
                        {
                          v328 = v327 >> 1;
                          v329 = (unint64_t *)&v319[360 * (v327 >> 1)];
                          v330 = *v329;
                          v331 = (char *)(v329 + 45);
                          v327 += ~(v327 >> 1);
                          if (v330 < v497)
                            v319 = v331;
                          else
                            v327 = v328;
                        }
                        while (v327);
                        if (v320 != v319 && *(_QWORD *)v319 == v497)
                        {
                          v332 = sub_20E86A980(&v531, (uint64_t)"error: factor ", 14);
                          sub_20F921478((uint64_t)&__dst);
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v333 = &__dst;
                          else
                            v333 = (__int128 *)__dst;
                          if ((SBYTE7(v572) & 0x80u) == 0)
                            v334 = BYTE7(v572);
                          else
                            v334 = *((_QWORD *)&__dst + 1);
                          v335 = sub_20E86A980(v332, (uint64_t)v333, v334);
                          sub_20E86A980(v335, (uint64_t)" with the same ID ", 18);
                          v336 = (_QWORD *)std::ostream::operator<<();
                          sub_20E86A980(v336, (uint64_t)" already exists.\n", 17);
                          if (SBYTE7(v572) < 0)
                            operator delete((void *)__dst);
                          v312 = 0;
                        }
                        goto LABEL_445;
                      }
                    }
                    v296 = v290 >> 4;
                    v289 = v287;
                    do
                    {
                      v297 = v296 >> 1;
                      v298 = (int *)&v289[16 * (v296 >> 1)];
                      v300 = *v298;
                      v299 = (char *)(v298 + 4);
                      v296 += ~(v296 >> 1);
                      if (v300)
                        v296 = v297;
                      else
                        v289 = v299;
                    }
                    while (v296);
                    goto LABEL_392;
                  }
                }
                v231 = v225 >> 4;
                v224 = v222;
                do
                {
                  v232 = v231 >> 1;
                  v233 = (unsigned int *)&v224[16 * (v231 >> 1)];
                  v235 = *v233;
                  v234 = (char *)(v233 + 4);
                  v231 += ~(v231 >> 1);
                  if (v235 < v45)
                    v224 = v234;
                  else
                    v231 = v232;
                }
                while (v231);
                goto LABEL_309;
              }
            }
            v200 = v194 >> 4;
            v193 = v191;
            do
            {
              v201 = v200 >> 1;
              v202 = (unsigned int *)&v193[16 * (v200 >> 1)];
              v204 = *v202;
              v203 = (char *)(v202 + 4);
              v200 += ~(v200 >> 1);
              if (v204 < v15)
                v193 = v203;
              else
                v200 = v201;
            }
            while (v200);
            goto LABEL_267;
          }
        }
        v137 = v136 >> 4;
        v135 = v133;
        do
        {
          v138 = v137 >> 1;
          v139 = (unsigned int *)&v135[16 * (v137 >> 1)];
          v141 = *v139;
          v140 = (char *)(v139 + 4);
          v137 += ~(v137 >> 1);
          if (v141 < v14)
            v135 = v140;
          else
            v137 = v138;
        }
        while (v137);
        goto LABEL_184;
      }
LABEL_13:
      ++v497;
      v1 = v489;
LABEL_14:
      v10 += 21;
      if (v10 == v11)
        goto LABEL_554;
    }
  }
  return result;
}

void sub_20FC45838(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FC37AAC(v1 - 240);
  sub_20F8AF10C((uint64_t)&STACK[0x3E0]);
  sub_20F8AF174((uint64_t)&STACK[0x280]);
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_20FC4587C(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_20FC45984(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, int64x2_t a8, int64x2_t a9)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  __int128 *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  __int128 *v27;
  unsigned int v28;
  int64x2_t v29;
  int64x2_t v30;
  double v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float64x2_t v48;
  __int16 v49;
  int64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  unsigned int v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  unsigned int v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  char v94;
  int v95;
  __int128 *v96;
  __int128 *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  __int128 *v101;
  unsigned int v102;
  _QWORD *v103;
  _QWORD *v104;
  void *v105;
  int v106;
  uint64_t v107;
  __int128 *v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  void *v115;
  int v116;
  unint64_t v117;
  __int16 v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void *v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  int *v126;
  unint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  int *v137;
  int64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  _OWORD *v143;
  int *v144;
  uint64_t v145;
  __int128 v146;
  int v147;
  void **v148;
  uint64_t v149;
  void **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  float64x2_t v155;
  int8x16_t v156;
  float64_t v157;
  uint64_t v158;
  char v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _BYTE *v163;
  unint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  void *v173;
  int v174;
  __int16 v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  __int128 *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  void *v186;
  void *v187;
  int v188;
  __int16 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  __int128 *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  void *v201;
  void *v202;
  uint64_t v203;
  void *v204;
  unint64_t v205;
  void *v206[2];
  int v207;
  __int16 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;

  v163 = (_BYTE *)(a1 + 6760);
  v10 = *(_QWORD **)(a1 + 8);
  v11 = (_QWORD *)v10[37];
  v12 = v10 + 38;
  if (v11 != v10 + 38)
  {
    v13 = (char **)(a1 + 5368);
    v14 = a1 + 7824;
    v151 = a1 + 5392;
    v149 = a1 + 7824;
    v150 = (void **)(a1 + 7344);
    while (1)
    {
      v15 = *((unsigned int *)v11 + 8);
      v16 = *(__int128 **)(a1 + 5368);
      v17 = *(__int128 **)(a1 + 5376);
      v18 = v16;
      if (v17 != v16)
      {
        v19 = v17 - v16;
        v18 = *(__int128 **)(a1 + 5368);
        do
        {
          v20 = v19 >> 1;
          v21 = (unsigned int *)&v18[v19 >> 1];
          v23 = *v21;
          v22 = (__int128 *)(v21 + 4);
          v19 += ~(v19 >> 1);
          if (v23 < v15)
            v18 = v22;
          else
            v19 = v20;
        }
        while (v19);
      }
      if (v18 != v17 && *(_DWORD *)v18 == (_DWORD)v15)
        goto LABEL_47;
      if (v17 == v16)
      {
        v16 = *(__int128 **)(a1 + 5376);
      }
      else
      {
        v24 = v17 - v16;
        do
        {
          v25 = v24 >> 1;
          v26 = (unsigned int *)&v16[v24 >> 1];
          v28 = *v26;
          v27 = (__int128 *)(v26 + 4);
          v24 += ~(v24 >> 1);
          if (v28 < v15)
            v16 = v27;
          else
            v24 = v25;
        }
        while (v24);
      }
      v29 = *(int64x2_t *)(v11 + 5);
      a9.i64[0] = v11[7];
      v30 = *((int64x2_t *)v11 + 4);
      _D8 = *((double *)v11 + 13);
      v32 = *((double *)v11 + 16);
      v33 = *(unsigned __int8 *)(a1 + 1720);
      v164 = v164 & 0xFFFFFF0000000000 | v15 | (v33 << 32);
      if (v17 != v16 && (_DWORD)v15 == *(_DWORD *)v16)
        goto LABEL_47;
      v34 = (float64x2_t)vzip1q_s64(v29, v30);
      _Q3 = (float64x2_t)vzip2q_s64(v29, v30);
      _Q18 = *(float64x2_t *)(v11 + 11);
      a8.i64[0] = v11[10];
      v37 = (float64x2_t)vzip1q_s64(a9, a8);
      v152 = v11[7];
      v153 = v11[10];
      v38 = (float64x2_t)a9;
      v39 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v40 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *((double *)v11 + 14)), _Q3, *((float64x2_t *)v11 + 7), 1), v37, v32);
      _D2 = v11[15];
      __asm { FMLA            D3, D2, V18.D[1] }
      _D1 = _Q3.f64[0] + _D8 * v32;
      v48 = vnegq_f64(_Q17);
      v49 = *(unsigned __int8 *)(a1 + 1788) | 0x100;
      v50 = (int64x2_t)vextq_s8(v40, v39, 8uLL);
      v155 = (float64x2_t)vzip1q_s64(v29, v50);
      v51 = (float64x2_t)vzip2q_s64((int64x2_t)v34, v50);
      *(_QWORD *)&_Q18.f64[1] = vdupq_laneq_s64((int64x2_t)_Q18, 1).u64[0];
      v158 = v11[11];
      v160 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
      v161 = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
      v52 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v155, v48.f64[0]), v51, _Q17, 1), _Q18, _D1, 0);
      _Q2 = vmulq_f64(v38, v48);
      __asm
      {
        FMLS            D2, D19, V17.D[1]
        FMLS            D2, D8, V1.D[0]
      }
      v156 = (int8x16_t)vnegq_f64(v52);
      v157 = v51.f64[0];
      v154 = *(_OWORD *)&vnegq_f64(_Q2);
      v54 = sub_20F61B11C(v151);
      *(_DWORD *)v54 = -1;
      *(_BYTE *)(v54 + 4) = 1;
      *(_DWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v54 + 16) = v164;
      *(_QWORD *)(v54 + 24) = v11 + 5;
      *(_QWORD *)(v54 + 48) = v152;
      *(float64_t *)&v55 = v155.f64[0];
      *((_QWORD *)&v55 + 1) = vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
      *(_OWORD *)(v54 + 32) = v55;
      *(_QWORD *)(v54 + 72) = v153;
      *(float64_t *)&v55 = v157;
      *((_QWORD *)&v55 + 1) = v161;
      *(_OWORD *)(v54 + 56) = v55;
      *(double *)(v54 + 96) = _D8;
      *(_QWORD *)&v56 = v158;
      *((_QWORD *)&v56 + 1) = v160;
      *(_OWORD *)(v54 + 80) = v56;
      *(_QWORD *)(v54 + 120) = v154;
      *(_QWORD *)&v55 = v156.i64[0];
      *((_QWORD *)&v55 + 1) = vextq_s8(v156, v156, 8uLL).u64[0];
      *(_OWORD *)(v54 + 104) = v55;
      *(_WORD *)(v54 + 128) = v49;
      *(_QWORD *)(v54 + 136) = 0x3FF0000000000000;
      *(_QWORD *)(v54 + 144) = 0;
      *(_QWORD *)(v54 + 152) = 0;
      *(_QWORD *)(v54 + 160) = 0;
      *(_QWORD *)(v54 + 168) = 0x3FF0000000000000;
      *(_QWORD *)(v54 + 176) = 0;
      *(_QWORD *)(v54 + 184) = 0;
      *(_QWORD *)(v54 + 192) = 0;
      *(_QWORD *)(v54 + 200) = 0x3FF0000000000000;
      *(_QWORD *)(v54 + 208) = 0;
      *(_QWORD *)(v54 + 216) = 0;
      *(_QWORD *)(v54 + 224) = 0;
      v193 = v15;
      v194 = v54;
      sub_20F61AEB4(v13, v16, (uint64_t)&v193);
      if ((_DWORD)v33)
        break;
LABEL_46:
      v163[2] = 0;
      *v163 = 0;
      *(_DWORD *)v14 = 0;
      *(_BYTE *)(v14 + 4) = 0;
LABEL_47:
      v80 = (_QWORD *)v11[1];
      if (v80)
      {
        do
        {
          v81 = v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (_QWORD *)v11[2];
          _ZF = *v81 == (_QWORD)v11;
          v11 = v81;
        }
        while (!_ZF);
      }
      v11 = v81;
      if (v81 == v12)
      {
        v10 = *(_QWORD **)(a1 + 8);
        goto LABEL_54;
      }
    }
    v57 = *(char **)(a1 + 7352);
    v58 = *(_QWORD *)(a1 + 7360);
    if ((unint64_t)v57 < v58)
    {
      *(_DWORD *)v57 = v15;
      v59 = (uint64_t)(v57 + 4);
LABEL_45:
      *(_QWORD *)(a1 + 7352) = v59;
      goto LABEL_46;
    }
    v60 = v13;
    v61 = v12;
    v62 = (char *)*v150;
    v63 = v57 - (_BYTE *)*v150;
    v64 = v63 >> 2;
    v65 = (v63 >> 2) + 1;
    if (v65 >> 62)
      sub_20E867F44();
    v66 = v58 - (_QWORD)v62;
    if (v66 >> 1 > v65)
      v65 = v66 >> 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
      v65 = 0x3FFFFFFFFFFFFFFFLL;
    v162 = v65;
    if (v65)
    {
      if (v65 >> 62)
        sub_20E877A38();
      v67 = operator new(4 * v65);
      v68 = &v67[4 * v64];
      *v68 = v15;
      v59 = (uint64_t)(v68 + 1);
      v69 = v57 - v62;
      if (v57 != v62)
        goto LABEL_33;
    }
    else
    {
      v67 = 0;
      v68 = (_DWORD *)(4 * v64);
      *(_DWORD *)(4 * v64) = v15;
      v59 = 4 * v64 + 4;
      v69 = v57 - v62;
      if (v57 != v62)
      {
LABEL_33:
        v70 = v69 - 4;
        if (v70 >= 0x2C)
        {
          v71 = v57 - v67 - v63;
          v12 = v61;
          v13 = v60;
          if (v71 >= 0x20)
          {
            v72 = (v70 >> 2) + 1;
            v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
            v74 = &v57[-v73];
            v68 = (_DWORD *)((char *)v68 - v73);
            v75 = &v67[4 * v64 - 16];
            v76 = v57 - 16;
            v77 = v72 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v78 = *(_OWORD *)v76;
              *(v75 - 1) = *((_OWORD *)v76 - 1);
              *v75 = v78;
              v75 -= 2;
              v76 -= 32;
              v77 -= 8;
            }
            while (v77);
            v57 = v74;
            if (v72 == (v72 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_42;
          }
        }
        else
        {
          v12 = v61;
          v13 = v60;
        }
        do
        {
          v79 = *((_DWORD *)v57 - 1);
          v57 -= 4;
          *--v68 = v79;
        }
        while (v57 != v62);
LABEL_42:
        *(_QWORD *)(a1 + 7344) = v68;
        *(_QWORD *)(a1 + 7352) = v59;
        *(_QWORD *)(a1 + 7360) = &v67[4 * v162];
        if (v62)
          operator delete(v62);
        v14 = v149;
        goto LABEL_45;
      }
    }
    v12 = v61;
    v13 = v60;
    goto LABEL_42;
  }
LABEL_54:
  v82 = (uint64_t *)v10[42];
  if (v82)
  {
    v159 = *(_BYTE *)(a1 + 1730);
    v148 = (void **)(a1 + 7440);
    while (1)
    {
      v83 = *((_DWORD *)v82 + 4);
      v84 = *(char **)(a1 + 5752);
      v85 = *(char **)(a1 + 5760);
      if (v85 != v84)
      {
        v86 = (v85 - v84) >> 4;
        do
        {
          v87 = v86 >> 1;
          v88 = &v84[16 * (v86 >> 1)];
          v90 = *(_DWORD *)v88;
          v89 = v88 + 16;
          v86 += ~(v86 >> 1);
          if (v90 < v83)
            v84 = v89;
          else
            v86 = v87;
        }
        while (v86);
      }
      if (v84 != v85 && *(_DWORD *)v84 == v83)
        goto LABEL_56;
      LODWORD(v165) = *((_DWORD *)v82 + 4);
      BYTE4(v165) = 1;
      v166 = (__int128 *)(v82 + 3);
      v170 = 0u;
      v171 = 0u;
      v172 = 0u;
      v173 = 0;
      v174 = 1065353216;
      v175 = 1;
      v91 = *(_OWORD *)(v82 + 5);
      v167 = *(_OWORD *)(v82 + 3);
      v168 = v91;
      v92 = v82[7];
      BYTE8(v169) = *((_BYTE *)v82 + 64);
      *(_QWORD *)&v169 = v92;
      sub_20F6169C8((uint64_t)&v165);
      sub_20F616F2C((uint64_t)&v165);
      BYTE4(v165) = v159;
      v93 = v166[1];
      v167 = *v166;
      v168 = v93;
      v94 = *((_BYTE *)v166 + 40);
      *(_QWORD *)&v169 = *((_QWORD *)v166 + 4);
      BYTE8(v169) = v94;
      sub_20F6169C8((uint64_t)&v165);
      sub_20F616F2C((uint64_t)&v165);
      v95 = v165;
      v96 = *(__int128 **)(a1 + 5752);
      v97 = *(__int128 **)(a1 + 5760);
      if (v97 == v96)
      {
        v96 = *(__int128 **)(a1 + 5760);
      }
      else
      {
        v98 = v97 - v96;
        do
        {
          v99 = v98 >> 1;
          v100 = (unsigned int *)&v96[v98 >> 1];
          v102 = *v100;
          v101 = (__int128 *)(v100 + 4);
          v98 += ~(v98 >> 1);
          if (v102 < v165)
            v96 = v101;
          else
            v98 = v99;
        }
        while (v98);
        if (v97 != v96 && (_DWORD)v165 == *(_DWORD *)v96)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 184, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add calibration variable.", 35, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v103 = (_QWORD *)*((_QWORD *)&v172 + 1);
          if (!*((_QWORD *)&v172 + 1))
            goto LABEL_78;
          do
          {
LABEL_77:
            v104 = (_QWORD *)*v103;
            operator delete(v103);
            v103 = v104;
          }
          while (v104);
          goto LABEL_78;
        }
      }
      v106 = BYTE4(v165);
      LODWORD(v176) = -1;
      BYTE4(v176) = 1;
      v177 = 0;
      v107 = v165;
      v108 = v166;
      v110 = (void *)*((_QWORD *)&v170 + 1);
      v109 = (void *)v170;
      v178 = v165;
      v179 = v166;
      v180 = v167;
      v181 = v168;
      v182 = v169;
      v111 = (_QWORD *)*((_QWORD *)&v171 + 1);
      v112 = v171;
      v183 = v170;
      v170 = 0uLL;
      v114 = (_QWORD *)*((_QWORD *)&v172 + 1);
      v113 = v172;
      v184 = v171;
      v171 = 0uLL;
      *(_QWORD *)&v172 = 0;
      v115 = v173;
      v185 = v113;
      v186 = (void *)*((_QWORD *)&v172 + 1);
      v187 = v173;
      v116 = v174;
      v188 = v174;
      if (v173)
      {
        v117 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8);
        if ((v113 & (v113 - 1)) != 0)
        {
          if (v117 >= v113)
            v117 %= v113;
        }
        else
        {
          v117 &= v113 - 1;
        }
        v111[v117] = &v186;
        *((_QWORD *)&v172 + 1) = 0;
        v173 = 0;
        v107 = v178;
        v108 = v179;
        v110 = (void *)*((_QWORD *)&v183 + 1);
        v109 = (void *)v183;
        v111 = (_QWORD *)*((_QWORD *)&v184 + 1);
        v112 = v184;
        v113 = v185;
        v114 = v186;
        v115 = v187;
        v116 = v188;
      }
      v118 = v175;
      v189 = v175;
      BYTE8(v192) = 0;
      v190 = 0u;
      v191 = 0u;
      LOBYTE(v192) = 0;
      v193 = v95;
      v194 = v176;
      v195 = v177;
      v196 = v107;
      v197 = v108;
      v198 = v180;
      v199 = v181;
      v200 = v182;
      v201 = v109;
      v202 = v110;
      v183 = 0u;
      v184 = 0u;
      v203 = v112;
      v204 = v111;
      v185 = 0;
      v205 = v113;
      v206[0] = v114;
      v206[1] = v115;
      v207 = v116;
      if (v115)
      {
        v119 = v114[1];
        if ((v113 & (v113 - 1)) != 0)
        {
          if (v119 >= v113)
            v119 %= v113;
        }
        else
        {
          v119 &= v113 - 1;
        }
        v111[v119] = v206;
        v186 = 0;
        v187 = 0;
        v118 = v189;
      }
      v208 = v118;
      v209 = v190;
      v210 = v191;
      v211 = v192;
      sub_20F61B41C((char **)(a1 + 5752), v96, &v193);
      v120 = v206[0];
      if (v206[0])
      {
        do
        {
          v121 = (_QWORD *)*v120;
          operator delete(v120);
          v120 = v121;
        }
        while (v121);
      }
      v122 = v204;
      v204 = 0;
      if (v122)
        operator delete(v122);
      if (v201)
      {
        v202 = v201;
        operator delete(v201);
      }
      v123 = v186;
      if (v186)
      {
        do
        {
          v124 = (_QWORD *)*v123;
          operator delete(v123);
          v123 = v124;
        }
        while (v124);
      }
      v125 = (void *)*((_QWORD *)&v184 + 1);
      *((_QWORD *)&v184 + 1) = 0;
      if (v125)
        operator delete(v125);
      if ((_QWORD)v183)
      {
        *((_QWORD *)&v183 + 1) = v183;
        operator delete((void *)v183);
      }
      if (v106)
        break;
LABEL_129:
      v163[2] = 0;
      *v163 = 0;
      *(_DWORD *)(a1 + 7824) = 0;
      *(_BYTE *)(a1 + 7828) = 0;
      v103 = (_QWORD *)*((_QWORD *)&v172 + 1);
      if (*((_QWORD *)&v172 + 1))
        goto LABEL_77;
LABEL_78:
      v105 = (void *)*((_QWORD *)&v171 + 1);
      *((_QWORD *)&v171 + 1) = 0;
      if (v105)
        operator delete(v105);
      if ((_QWORD)v170)
      {
        *((_QWORD *)&v170 + 1) = v170;
        operator delete((void *)v170);
      }
LABEL_56:
      v82 = (uint64_t *)*v82;
      if (!v82)
        return;
    }
    v126 = *(int **)(a1 + 7448);
    v127 = *(_QWORD *)(a1 + 7456);
    if ((unint64_t)v126 < v127)
    {
      *v126 = v95;
      v128 = (uint64_t)(v126 + 1);
LABEL_128:
      *(_QWORD *)(a1 + 7448) = v128;
      goto LABEL_129;
    }
    v129 = (int *)*v148;
    v130 = (char *)v126 - (_BYTE *)*v148;
    v131 = v130 >> 2;
    v132 = (v130 >> 2) + 1;
    if (v132 >> 62)
      sub_20E867F44();
    v133 = v127 - (_QWORD)v129;
    if (v133 >> 1 > v132)
      v132 = v133 >> 1;
    if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
      v134 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v134 = v132;
    if (v134)
    {
      if (v134 >> 62)
        sub_20E877A38();
      v135 = v134;
      v136 = operator new(4 * v134);
      v134 = v135;
      v137 = (int *)&v136[4 * v131];
      *v137 = v95;
      v128 = (uint64_t)(v137 + 1);
      v138 = (char *)v126 - (char *)v129;
      if (v126 == v129)
        goto LABEL_126;
    }
    else
    {
      v136 = 0;
      v137 = (int *)(4 * v131);
      *(_DWORD *)(4 * v131) = v95;
      v128 = 4 * v131 + 4;
      v138 = (char *)v126 - (char *)v129;
      if (v126 == v129)
      {
LABEL_126:
        *(_QWORD *)(a1 + 7440) = v137;
        *(_QWORD *)(a1 + 7448) = v128;
        *(_QWORD *)(a1 + 7456) = &v136[4 * v134];
        if (v129)
          operator delete(v129);
        goto LABEL_128;
      }
    }
    v139 = v138 - 4;
    if (v139 < 0x2C)
      goto LABEL_139;
    if ((unint64_t)((char *)v126 - v136 - v130) < 0x20)
      goto LABEL_139;
    v140 = (v139 >> 2) + 1;
    v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
    v142 = &v126[v141 / 0xFFFFFFFFFFFFFFFCLL];
    v137 = (int *)((char *)v137 - v141);
    v143 = &v136[4 * v131 - 16];
    v144 = v126 - 4;
    v145 = v140 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v146 = *(_OWORD *)v144;
      *(v143 - 1) = *((_OWORD *)v144 - 1);
      *v143 = v146;
      v143 -= 2;
      v144 -= 8;
      v145 -= 8;
    }
    while (v145);
    v126 = v142;
    if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_139:
      do
      {
        v147 = *--v126;
        *--v137 = v147;
      }
      while (v126 != v129);
    }
    goto LABEL_126;
  }
}

void sub_20FC46448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,_QWORD *__p)
{
  _QWORD *v54;
  _QWORD *v55;
  void *v56;

  v54 = __p;
  if (__p)
  {
    do
    {
      v55 = (_QWORD *)*v54;
      operator delete(v54);
      v54 = v55;
    }
    while (v55);
  }
  if (a51)
  {
    operator delete(a51);
    v56 = a48;
    if (!a48)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v56 = a48;
    if (!a48)
      goto LABEL_5;
  }
  operator delete(v56);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC46568(uint64_t a1, unint64_t a2, unsigned int a3, char a4, int64x2_t _Q0, double a6, double a7, double a8, int64x2_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  __int128 *v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  int v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  const char *v92;
  size_t v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t result;
  int64x2_t v141;
  int64x2_t v142;
  int8x16_t v143;
  double v145;
  char v147;
  __int128 *v148;
  __int128 *v149;
  uint64_t v150;
  float64x2_t v151;
  unint64_t v152;
  float64x2_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v161;
  uint64_t v167;
  __int128 v168;
  char *v169;
  unint64_t v170;
  _DWORD *v171;
  char *v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  _DWORD *v179;
  char *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  _OWORD *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  __int128 *v193;
  unsigned int v194;
  uint64_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  char *v200;
  unint64_t v201;
  _DWORD *v202;
  char *v203;
  int64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _BYTE *v209;
  _DWORD *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  _OWORD *v215;
  char *v216;
  uint64_t v217;
  __int128 v218;
  int v219;
  char v220;
  _BOOL4 v221;
  char v222;
  _QWORD *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unsigned __int8 v227;
  unint64_t v228;
  _QWORD *v229;
  char v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  double v241;
  float64_t v242;
  unint64_t v243;
  float64x2_t v244;
  uint64_t v245;
  float64_t v246;
  int8x16_t v247;
  char v248;
  int8x16_t v249;
  unint64_t v250;
  int8x16_t v251;
  unint64_t v252;
  int8x16_t v253;
  unint64_t v254;
  int8x16_t v255;
  char **v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  _BYTE *v260;
  int v261;
  const char *v262;
  __int128 v263;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v265;
  const char *v266;
  int v267;
  const char *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  uint64_t v271;
  _QWORD v272[2];
  uint64_t v273;
  _BYTE v274[40];
  void **v275;
  size_t v276;
  unint64_t v277;
  char v278;
  uint64_t v279;

  v279 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 2145))
  {
    v12 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(v12 + 48);
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_DWORD *)(v13 + 40);
    _ZF = a2 == v14 && a3 == v15;
    if (_ZF)
      a4 = 1;
  }
  v20 = *(uint64_t **)(v12 + 56);
  v18 = (uint64_t *)(v12 + 56);
  v19 = v20;
  if (!v20)
    goto LABEL_34;
  v21 = v18;
  do
  {
    v22 = v19[4];
    if (v22 < a2)
    {
      ++v19;
    }
    else if (v22 == a2)
    {
      if (*((_DWORD *)v19 + 10) < a3)
        ++v19;
      else
        v21 = v19;
    }
    else
    {
      v21 = v19;
    }
    v19 = (uint64_t *)*v19;
  }
  while (v19);
  if (v21 == v18 || (v23 = v21[4], a2 < v23) || a2 == v23 && *((_DWORD *)v21 + 10) > a3 || (v24 = v21[6]) == 0)
  {
LABEL_34:
    sub_20F9B2A4C(&v271);
    if (**(int **)(v271 + 56) > 5)
      goto LABEL_122;
    v34 = *(unsigned __int8 *)(v271 + 72);
    v35 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && !v35)
      goto LABEL_122;
    v261 = v34;
    *(_QWORD *)&v263 = &v271;
    *((std::chrono::steady_clock::time_point *)&v263 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v265 = 5;
    v266 = "unknown file";
    v267 = 556;
    v269 = 0;
    v270 = 0;
    v268 = "unknown function";
    v37 = v271;
    v38 = (const char *)(v271 + 16);
    v259 = v271 + 16;
    if (*(char *)(v271 + 39) < 0)
    {
      v38 = *(const char **)(v271 + 16);
      v39 = *(_QWORD *)(v271 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v41 & 1) != 0)
        goto LABEL_41;
    }
    else
    {
      v39 = *(unsigned __int8 *)(v271 + 39);
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) != 0)
        goto LABEL_41;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v274);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v274);
      if (v274[24] && (v274[23] & 0x80000000) != 0)
        operator delete(*(void **)v274);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_41:
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v274 = os_log_create(v42, v38);
    v44 = &v274[8];
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v45 = v43 | 7;
      v46 = v45 + 1;
      v44 = operator new(v45 + 1);
      *(_QWORD *)&v274[16] = v43;
      *(_QWORD *)&v274[24] = v46 | 0x8000000000000000;
      *(_QWORD *)&v274[8] = v44;
    }
    else
    {
      v274[31] = v43;
      if (!v43)
      {
LABEL_55:
        v44[v43] = 0;
        v274[32] = 1;
        v47 = (void **)&v275;
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v39 >= 0x17)
        {
          v49 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v49 = v39 | 7;
          v50 = v49 + 1;
          v47 = (void **)operator new(v49 + 1);
          v276 = v39;
          v277 = v50 | 0x8000000000000000;
          v275 = v47;
        }
        else
        {
          HIBYTE(v277) = v39;
          if (!v39)
          {
            LOBYTE(v275) = 0;
            v278 = 1;
            v48 = *(NSObject **)v274;
            if ((SHIBYTE(v277) & 0x80000000) == 0)
              goto LABEL_59;
            goto LABEL_65;
          }
        }
        memmove(v47, v38, v39);
        *((_BYTE *)v47 + v39) = 0;
        v278 = 1;
        v48 = *(NSObject **)v274;
        if ((SHIBYTE(v277) & 0x80000000) == 0)
        {
LABEL_59:
          if (!v274[32])
            goto LABEL_68;
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v275);
        if (!v274[32])
        {
LABEL_68:
          if (*(_QWORD *)v274)
            os_release(*(void **)v274);
          if (v36 && *(_QWORD *)(v36 + 24))
          {
            v51 = _os_log_pack_size();
            v52 = (std::__shared_weak_count_vtbl *)operator new(v51, (std::align_val_t)8uLL);
            v53 = (std::__shared_weak_count *)operator new();
            v54 = v53;
            v53->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v53->__shared_owners_;
            v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v53->__shared_weak_owners_ = 0;
            v53[1].__vftable = v52;
            *(_QWORD *)v274 = v52;
            *(_QWORD *)&v274[8] = v52;
            *(_QWORD *)&v274[16] = v53;
            do
              v56 = __ldxr(p_shared_owners);
            while (__stxr(v56 + 1, p_shared_owners));
            *(_QWORD *)&v274[24] = 0;
            *(_QWORD *)&v274[32] = 0;
            v275 = 0;
            do
              v57 = __ldaxr(p_shared_owners);
            while (__stlxr(v57 - 1, p_shared_owners));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v54);
            }
            v58 = *(_QWORD *)v274;
            v59 = (_DWORD *)_os_log_pack_fill();
            *v59 = 67109120;
            v59[1] = a3;
            v60 = operator new();
            v61 = *(unsigned __int8 *)(v37 + 39);
            v62 = v259;
            if ((v61 & 0x80u) != 0)
            {
              v62 = *(_QWORD *)(v37 + 16);
              v61 = *(_QWORD *)(v37 + 24);
            }
            *(_QWORD *)v60 = v58;
            *(_OWORD *)(v60 + 8) = *(_OWORD *)&v274[8];
            *(_QWORD *)&v274[8] = 0;
            *(_QWORD *)&v274[16] = 0;
            *(_OWORD *)(v60 + 24) = *(_OWORD *)&v274[24];
            *(_QWORD *)&v274[24] = 0;
            *(_QWORD *)&v274[32] = 0;
            *(_QWORD *)(v60 + 40) = v62;
            *(_QWORD *)(v60 + 48) = v61;
            *(_BYTE *)(v60 + 56) = 16;
            v273 = 0;
            v272[0] = v60;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), v272);
            v63 = v272[0];
            v272[0] = 0;
            if (v63)
            {
              v64 = *(std::__shared_weak_count **)(v63 + 32);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v67 = *(std::__shared_weak_count **)(v63 + 16);
              if (v67)
              {
                v68 = (unint64_t *)&v67->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
              v70 = v273;
              v273 = 0;
              if (v70)
              {
                v71 = *(std::__shared_weak_count **)(v70 + 32);
                if (v71)
                {
                  v72 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                v74 = *(std::__shared_weak_count **)(v70 + 16);
                if (v74)
                {
                  v75 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                MEMORY[0x212BC6398](v70, 0x10F0C40B62ED6C6);
              }
            }
            v77 = *(std::__shared_weak_count **)&v274[32];
            v78 = v261;
            if (*(_QWORD *)&v274[32])
            {
              v79 = (unint64_t *)(*(_QWORD *)&v274[32] + 8);
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            v81 = *(std::__shared_weak_count **)&v274[16];
            if (*(_QWORD *)&v274[16])
            {
              v82 = (unint64_t *)(*(_QWORD *)&v274[16] + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
          }
          else
          {
            os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v274 = 67109120;
            *(_DWORD *)&v274[4] = a3;
            v84 = (void *)_os_log_send_and_compose_impl();
            v78 = v261;
            if (v84)
              free(v84);
          }
          if (v78)
          {
            sub_20E8C003C((uint64_t)&v263, "The requested IMU State (%d) does not exist in the StateSet", a3);
            sub_20E863570((uint64_t)&v263);
          }
          sub_20E863570((uint64_t)&v263);
          v85 = v270;
          if (v270)
          {
            v86 = (unint64_t *)&v270->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
LABEL_122:
          sub_20F9B2A4C(&v271);
          if (**(int **)(v271 + 56) > 5)
            return 0;
          v88 = *(unsigned __int8 *)(v271 + 72);
          v89 = *(_BYTE *)(v271 + 72) != 0;
          v90 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
          if (((v90 == 0) & ~v89) != 0)
            return 0;
          *(_QWORD *)&v263 = &v271;
          *((std::chrono::steady_clock::time_point *)&v263 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v265 = 5;
          v266 = "unknown file";
          v267 = 244;
          v269 = 0;
          v270 = 0;
          v268 = "unknown function";
          v91 = *(_QWORD *)v263;
          v92 = (const char *)(*(_QWORD *)v263 + 16);
          v262 = v92;
          if (*(char *)(*(_QWORD *)v263 + 39) < 0)
          {
            v92 = *(const char **)(v91 + 16);
            v93 = *(_QWORD *)(v91 + 24);
            v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v95 & 1) != 0)
              goto LABEL_128;
          }
          else
          {
            v93 = *(unsigned __int8 *)(*(_QWORD *)v263 + 39);
            v94 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v94 & 1) != 0)
              goto LABEL_128;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v274);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v274);
            if (v274[24] && (v274[23] & 0x80000000) != 0)
              operator delete(*(void **)v274);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_128:
          if (byte_254A4A4F8[23] >= 0)
            v96 = byte_254A4A4F8;
          else
            v96 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v97 = byte_254A4A4F8[23];
          else
            v97 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v274 = os_log_create(v96, v92);
          v98 = &v274[8];
          if (v97 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v97 >= 0x17)
          {
            v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v97 | 7) != 0x17)
              v99 = v97 | 7;
            v100 = v99 + 1;
            v98 = operator new(v99 + 1);
            *(_QWORD *)&v274[16] = v97;
            *(_QWORD *)&v274[24] = v100 | 0x8000000000000000;
            *(_QWORD *)&v274[8] = v98;
          }
          else
          {
            v274[31] = v97;
            if (!v97)
            {
LABEL_142:
              v98[v97] = 0;
              v274[32] = 1;
              v101 = (void **)&v275;
              if (v93 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v93 >= 0x17)
              {
                v103 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v93 | 7) != 0x17)
                  v103 = v93 | 7;
                v104 = v103 + 1;
                v101 = (void **)operator new(v103 + 1);
                v276 = v93;
                v277 = v104 | 0x8000000000000000;
                v275 = v101;
              }
              else
              {
                HIBYTE(v277) = v93;
                if (!v93)
                {
                  LOBYTE(v275) = 0;
                  v278 = 1;
                  v102 = *(NSObject **)v274;
                  if ((SHIBYTE(v277) & 0x80000000) == 0)
                    goto LABEL_146;
                  goto LABEL_152;
                }
              }
              memmove(v101, v92, v93);
              *((_BYTE *)v101 + v93) = 0;
              v278 = 1;
              v102 = *(NSObject **)v274;
              if ((SHIBYTE(v277) & 0x80000000) == 0)
              {
LABEL_146:
                if (!v274[32])
                  goto LABEL_155;
                goto LABEL_153;
              }
LABEL_152:
              operator delete(v275);
              if (!v274[32])
              {
LABEL_155:
                if (*(_QWORD *)v274)
                  os_release(*(void **)v274);
                if (v90 && *(_QWORD *)(v90 + 24))
                {
                  v105 = _os_log_pack_size();
                  v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
                  v107 = (std::__shared_weak_count *)operator new();
                  v108 = v107;
                  v107->__shared_owners_ = 0;
                  v109 = (unint64_t *)&v107->__shared_owners_;
                  v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v107->__shared_weak_owners_ = 0;
                  v107[1].__vftable = v106;
                  *(_QWORD *)v274 = v106;
                  *(_QWORD *)&v274[8] = v106;
                  *(_QWORD *)&v274[16] = v107;
                  do
                    v110 = __ldxr(v109);
                  while (__stxr(v110 + 1, v109));
                  *(_QWORD *)&v274[24] = 0;
                  *(_QWORD *)&v274[32] = 0;
                  v275 = 0;
                  do
                    v111 = __ldaxr(v109);
                  while (__stlxr(v111 - 1, v109));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                  v112 = *(_QWORD *)v274;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v113 = operator new();
                  v114 = *(unsigned __int8 *)(v91 + 39);
                  v115 = v262;
                  if ((v114 & 0x80u) != 0)
                  {
                    v115 = *(const char **)(v91 + 16);
                    v114 = *(_QWORD *)(v91 + 24);
                  }
                  *(_QWORD *)v113 = v112;
                  *(_OWORD *)(v113 + 8) = *(_OWORD *)&v274[8];
                  *(_QWORD *)&v274[8] = 0;
                  *(_QWORD *)&v274[16] = 0;
                  *(_OWORD *)(v113 + 24) = *(_OWORD *)&v274[24];
                  *(_QWORD *)&v274[24] = 0;
                  *(_QWORD *)&v274[32] = 0;
                  *(_QWORD *)(v113 + 40) = v115;
                  *(_QWORD *)(v113 + 48) = v114;
                  *(_BYTE *)(v113 + 56) = 16;
                  v273 = 0;
                  v272[0] = v113;
                  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v90 + 24) + 40))(*(_QWORD *)(v90 + 24), v272);
                  v116 = v272[0];
                  v272[0] = 0;
                  if (v116)
                  {
                    v117 = *(std::__shared_weak_count **)(v116 + 32);
                    if (v117)
                    {
                      v118 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v119 = __ldaxr(v118);
                      while (__stlxr(v119 - 1, v118));
                      if (!v119)
                      {
                        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                        std::__shared_weak_count::__release_weak(v117);
                      }
                    }
                    v120 = *(std::__shared_weak_count **)(v116 + 16);
                    if (v120)
                    {
                      v121 = (unint64_t *)&v120->__shared_owners_;
                      do
                        v122 = __ldaxr(v121);
                      while (__stlxr(v122 - 1, v121));
                      if (!v122)
                      {
                        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                        std::__shared_weak_count::__release_weak(v120);
                      }
                    }
                    MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
                    v123 = v273;
                    v273 = 0;
                    if (v123)
                    {
                      v124 = *(std::__shared_weak_count **)(v123 + 32);
                      if (v124)
                      {
                        v125 = (unint64_t *)&v124->__shared_owners_;
                        do
                          v126 = __ldaxr(v125);
                        while (__stlxr(v126 - 1, v125));
                        if (!v126)
                        {
                          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                          std::__shared_weak_count::__release_weak(v124);
                        }
                      }
                      v127 = *(std::__shared_weak_count **)(v123 + 16);
                      if (v127)
                      {
                        v128 = (unint64_t *)&v127->__shared_owners_;
                        do
                          v129 = __ldaxr(v128);
                        while (__stlxr(v129 - 1, v128));
                        if (!v129)
                        {
                          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                          std::__shared_weak_count::__release_weak(v127);
                        }
                      }
                      MEMORY[0x212BC6398](v123, 0x10F0C40B62ED6C6);
                    }
                  }
                  v130 = *(std::__shared_weak_count **)&v274[32];
                  if (*(_QWORD *)&v274[32])
                  {
                    v131 = (unint64_t *)(*(_QWORD *)&v274[32] + 8);
                    do
                      v132 = __ldaxr(v131);
                    while (__stlxr(v132 - 1, v131));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                  }
                  v133 = *(std::__shared_weak_count **)&v274[16];
                  if (*(_QWORD *)&v274[16])
                  {
                    v134 = (unint64_t *)(*(_QWORD *)&v274[16] + 8);
                    do
                      v135 = __ldaxr(v134);
                    while (__stlxr(v135 - 1, v134));
                    if (!v135)
                    {
                      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                      std::__shared_weak_count::__release_weak(v133);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v102, OS_LOG_TYPE_ERROR);
                  *(_WORD *)v274 = 0;
                  v136 = (void *)_os_log_send_and_compose_impl();
                  if (v136)
                    free(v136);
                }
                if (v88)
                {
                  sub_20E8C003C((uint64_t)&v263, "Unable to add IMU State");
                  sub_20E863570((uint64_t)&v263);
                }
                sub_20E863570((uint64_t)&v263);
                v137 = v270;
                if (v270)
                {
                  v138 = (unint64_t *)&v270->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                return 0;
              }
LABEL_153:
              if ((v274[31] & 0x80000000) != 0)
                operator delete(*(void **)&v274[8]);
              goto LABEL_155;
            }
          }
          memmove(v98, v96, v97);
          goto LABEL_142;
        }
LABEL_66:
        if ((v274[31] & 0x80000000) != 0)
          operator delete(*(void **)&v274[8]);
        goto LABEL_68;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_55;
  }
  v260 = (_BYTE *)(a1 + 6760);
  v25 = a3;
  if ((a4 & 1) != 0 || (v25 = a3 | 0x100000000, v26 = v25, !*(_BYTE *)(a1 + 2146)))
    v26 = a3;
  v27 = *(__int128 **)(a1 + 5176);
  v28 = *(__int128 **)(a1 + 5184);
  if (v28 == v27)
  {
    v27 = *(__int128 **)(a1 + 5184);
  }
  else
  {
    v29 = v28 - v27;
    do
    {
      v30 = v29 >> 1;
      v31 = (unsigned int *)&v27[v29 >> 1];
      v33 = *v31;
      v32 = (__int128 *)(v31 + 4);
      v29 += ~(v29 >> 1);
      if (v33 < v25)
        v27 = v32;
      else
        v29 = v30;
    }
    while (v29);
  }
  v141 = *(int64x2_t *)v24;
  v142 = *(int64x2_t *)(v24 + 24);
  _Q0.i64[0] = *(_QWORD *)(v24 + 40);
  v143 = *(int8x16_t *)(v24 + 48);
  _Q3 = *(float64x2_t *)(v24 + 72);
  v145 = *(double *)(v24 + 88);
  _D17 = *(double *)(v24 + 64);
  v258 = a4;
  if (v28 == v27 || *(_DWORD *)v27 != (_DWORD)v25)
  {
    v151 = (float64x2_t)vzip1q_s64(v141, v142);
    v152 = vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL).u64[0];
    _Q5 = (float64x2_t)vzip2q_s64(v141, v142);
    a9.i64[0] = *(_QWORD *)(v24 + 16);
    v154 = (float64x2_t)vzip1q_s64(a9, _Q0);
    v155 = vextq_s8((int8x16_t)_Q5, (int8x16_t)vdupq_laneq_s64((int64x2_t)v143, 1), 8uLL);
    v156 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0), v155, 8uLL);
    v157 = (float64x2_t)vzip1q_s64((int64x2_t)v151, (int64x2_t)v156);
    *(_QWORD *)&v151.f64[1] = v152;
    v246 = v154.f64[0];
    v252 = v152;
    v254 = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
    *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    v158 = vmlaq_laneq_f64(vmulq_n_f64(v151, _Q3.f64[0]), _Q5, _Q3, 1);
    _Q5.f64[0] = v154.f64[0];
    *(_QWORD *)&_Q5.f64[1] = v254;
    _D6 = vextq_s8(v143, v143, 8uLL).u64[0];
    _Q7 = vmlaq_n_f64(v158, _Q5, v145);
    v250 = vextq_s8(v156, v156, 8uLL).u64[0];
    v161 = vnegq_f64(_Q7);
    __asm { FMLA            D5, D6, V3.D[1] }
    _Q3 = vmulq_f64(v154, v161);
    _D2 = _Q5.f64[0] + _D17 * v145;
    *(_QWORD *)&_Q5.f64[0] = v152;
    *(_QWORD *)&_Q5.f64[1] = v250;
    __asm
    {
      FMLS            D3, D0, V7.D[1]
      FMLS            D3, D17, V2.D[0]
    }
    v242 = v157.f64[0];
    v243 = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
    v244 = (float64x2_t)vzip1q_s64((int64x2_t)v143, vdupq_laneq_s64((int64x2_t)v155, 1));
    v247 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v157, v161.f64[0]), _Q5, _Q7, 1), v244, _D2, 0));
    v245 = *(_OWORD *)&vnegq_f64(_Q3);
    v256 = (char **)(a1 + 5176);
    v263 = *(_OWORD *)(v24 + 792);
    rep = *(_QWORD *)(v24 + 808);
    *(_OWORD *)&v274[7] = *(_OWORD *)(v24 + 768);
    *(_QWORD *)&v274[23] = *(_QWORD *)(v24 + 784);
    v241 = _D17;
    v167 = sub_20F61BD6C(a1 + 5200);
    *(_DWORD *)v167 = -1;
    *(_BYTE *)(v167 + 4) = 1;
    *(_DWORD *)(v167 + 8) = 0;
    *(_QWORD *)(v167 + 16) = v25;
    *(_QWORD *)(v167 + 24) = v24;
    *(float64_t *)(v167 + 48) = v246;
    *(float64_t *)&v168 = v242;
    *((_QWORD *)&v168 + 1) = v243;
    *(_OWORD *)(v167 + 32) = v168;
    *(_QWORD *)(v167 + 72) = v254;
    *(_QWORD *)&v168 = v252;
    *((_QWORD *)&v168 + 1) = v250;
    *(_OWORD *)(v167 + 56) = v168;
    *(float64_t *)&v168 = v244.f64[0];
    *((_QWORD *)&v168 + 1) = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
    *(double *)(v167 + 96) = v241;
    *(_OWORD *)(v167 + 80) = v168;
    *(_QWORD *)(v167 + 120) = v245;
    *(_QWORD *)&v168 = v247.i64[0];
    *((_QWORD *)&v168 + 1) = vextq_s8(v247, v247, 8uLL).u64[0];
    *(_OWORD *)(v167 + 104) = v168;
    *(_BYTE *)(v167 + 128) = 0;
    *(_OWORD *)(v167 + 136) = *(_OWORD *)&v274[7];
    *(_QWORD *)(v167 + 152) = *(_QWORD *)&v274[23];
    *(_OWORD *)(v167 + 160) = v263;
    *(_QWORD *)(v167 + 176) = rep;
    *(_QWORD *)(v167 + 184) = 0x3FF0000000000000;
    *(_QWORD *)(v167 + 192) = 0;
    *(_QWORD *)(v167 + 200) = 0;
    *(_QWORD *)(v167 + 208) = 0;
    *(_QWORD *)(v167 + 216) = 0x3FF0000000000000;
    *(_QWORD *)(v167 + 224) = 0;
    *(_QWORD *)(v167 + 232) = 0;
    *(_QWORD *)(v167 + 240) = 0;
    *(_QWORD *)(v167 + 248) = 0x3FF0000000000000;
    *(_QWORD *)(v167 + 264) = 0;
    *(_QWORD *)(v167 + 272) = 0;
    *(_QWORD *)(v167 + 256) = 0;
    LODWORD(v272[0]) = v25;
    v272[1] = v167;
    sub_20F61BB04(v256, v27, (uint64_t)v272);
    if ((v25 & 0x100000000) != 0)
    {
      v169 = *(char **)(a1 + 7304);
      v170 = *(_QWORD *)(a1 + 7312);
      if ((unint64_t)v169 >= v170)
      {
        v172 = *(char **)(a1 + 7296);
        v173 = v169 - v172;
        v174 = (v169 - v172) >> 2;
        v175 = v174 + 1;
        if ((unint64_t)(v174 + 1) >> 62)
          sub_20E867F44();
        v176 = v170 - (_QWORD)v172;
        if (v176 >> 1 > v175)
          v175 = v176 >> 1;
        if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
          v177 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v177 = v175;
        if (v177)
        {
          if (v177 >> 62)
            sub_20E877A38();
          v178 = operator new(4 * v177);
          v174 = (v169 - v172) >> 2;
          v173 = v169 - v172;
        }
        else
        {
          v178 = 0;
        }
        v179 = &v178[4 * v174];
        v180 = &v178[4 * v177];
        *v179 = v25;
        v171 = v179 + 1;
        if (v169 != v172)
        {
          v181 = v169 - v172 - 4;
          if (v181 < 0x2C)
            goto LABEL_325;
          if ((unint64_t)(v169 - v178 - v173) < 0x20)
            goto LABEL_325;
          v182 = (v181 >> 2) + 1;
          v183 = 4 * (v182 & 0x7FFFFFFFFFFFFFF8);
          v184 = &v169[-v183];
          v179 = (_DWORD *)((char *)v179 - v183);
          v185 = &v178[4 * v174 - 16];
          v186 = v169 - 16;
          v187 = v182 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v188 = *(_OWORD *)v186;
            *(v185 - 1) = *((_OWORD *)v186 - 1);
            *v185 = v188;
            v185 -= 2;
            v186 -= 32;
            v187 -= 8;
          }
          while (v187);
          v169 = v184;
          if (v182 != (v182 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_325:
            do
            {
              v189 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *--v179 = v189;
            }
            while (v169 != v172);
          }
        }
        *(_QWORD *)(a1 + 7296) = v179;
        *(_QWORD *)(a1 + 7304) = v171;
        *(_QWORD *)(a1 + 7312) = v180;
        if (v172)
          operator delete(v172);
      }
      else
      {
        *(_DWORD *)v169 = v25;
        v171 = v169 + 4;
      }
      *(_QWORD *)(a1 + 7304) = v171;
    }
    v260[2] = 0;
    *v260 = 0;
    *(_BYTE *)(a1 + 7828) = 0;
    *(_DWORD *)(a1 + 7824) = 0;
    v147 = 1;
    v148 = *(__int128 **)(a1 + 5272);
    v149 = *(__int128 **)(a1 + 5280);
    v150 = (char *)v149 - (char *)v148;
    if (v149 == v148)
      goto LABEL_214;
  }
  else
  {
    v147 = 0;
    v148 = *(__int128 **)(a1 + 5272);
    v149 = *(__int128 **)(a1 + 5280);
    v150 = (char *)v149 - (char *)v148;
    if (v149 == v148)
    {
LABEL_214:
      v148 = v149;
      goto LABEL_244;
    }
  }
  v190 = v150 >> 4;
  do
  {
    v191 = v190 >> 1;
    v192 = (unsigned int *)&v148[v190 >> 1];
    v194 = *v192;
    v193 = (__int128 *)(v192 + 4);
    v190 += ~(v190 >> 1);
    if (v194 < v26)
      v148 = v193;
    else
      v190 = v191;
  }
  while (v190);
LABEL_244:
  if (v149 != v148 && *(_DWORD *)v148 == (_DWORD)v26)
    goto LABEL_270;
  v249 = *(int8x16_t *)(v24 + 96);
  v251 = *(int8x16_t *)(v24 + 112);
  v253 = *(int8x16_t *)(v24 + 128);
  v255 = *(int8x16_t *)(v24 + 144);
  v257 = *(_QWORD *)(v24 + 160);
  v248 = v147;
  v195 = sub_20F61C2D4(a1 + 5296);
  v197 = v253;
  v196 = v255;
  v199 = v249;
  v198 = v251;
  *(_DWORD *)v195 = -1;
  *(_BYTE *)(v195 + 4) = 1;
  *(_DWORD *)(v195 + 8) = 0;
  *(_QWORD *)(v195 + 16) = v26;
  *(_QWORD *)(v195 + 24) = v24;
  v199.i64[1] = vextq_s8(v199, v199, 8uLL).u64[0];
  v198.i64[1] = vextq_s8(v198, v198, 8uLL).u64[0];
  *(int8x16_t *)(v195 + 32) = v199;
  *(int8x16_t *)(v195 + 48) = v198;
  v197.i64[1] = vextq_s8(v197, v197, 8uLL).u64[0];
  v196.i64[1] = vextq_s8(v196, v196, 8uLL).u64[0];
  *(_QWORD *)(v195 + 96) = v257;
  *(int8x16_t *)(v195 + 64) = v197;
  *(int8x16_t *)(v195 + 80) = v196;
  *(_BYTE *)(v195 + 104) = 0;
  *(_DWORD *)v274 = v26;
  *(_QWORD *)&v274[8] = v195;
  sub_20F61C06C((char **)(a1 + 5272), v148, (uint64_t)v274);
  if ((v26 & 0x100000000) != 0)
  {
    v200 = *(char **)(a1 + 7328);
    v201 = *(_QWORD *)(a1 + 7336);
    if ((unint64_t)v200 >= v201)
    {
      v203 = *(char **)(a1 + 7320);
      v204 = v200 - v203;
      v205 = (v200 - v203) >> 2;
      v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62)
        sub_20E867F44();
      v207 = v201 - (_QWORD)v203;
      if (v207 >> 1 > v206)
        v206 = v207 >> 1;
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL)
        v208 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v208 = v206;
      if (v208)
      {
        if (v208 >> 62)
          sub_20E877A38();
        v209 = operator new(4 * v208);
        v204 = v200 - v203;
      }
      else
      {
        v209 = 0;
      }
      v210 = &v209[4 * v205];
      *v210 = v26;
      v202 = v210 + 1;
      if (v200 != v203)
      {
        v211 = v200 - v203 - 4;
        if (v211 < 0x2C)
          goto LABEL_326;
        if ((unint64_t)(v200 - v209 - v204) < 0x20)
          goto LABEL_326;
        v212 = (v211 >> 2) + 1;
        v213 = 4 * (v212 & 0x7FFFFFFFFFFFFFF8);
        v214 = &v200[-v213];
        v210 = (_DWORD *)((char *)v210 - v213);
        v215 = &v209[4 * v205 - 16];
        v216 = v200 - 16;
        v217 = v212 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v218 = *(_OWORD *)v216;
          *(v215 - 1) = *((_OWORD *)v216 - 1);
          *v215 = v218;
          v215 -= 2;
          v216 -= 32;
          v217 -= 8;
        }
        while (v217);
        v200 = v214;
        if (v212 != (v212 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_326:
          do
          {
            v219 = *((_DWORD *)v200 - 1);
            v200 -= 4;
            *--v210 = v219;
          }
          while (v200 != v203);
        }
      }
      *(_QWORD *)(a1 + 7320) = v210;
      *(_QWORD *)(a1 + 7328) = v202;
      *(_QWORD *)(a1 + 7336) = &v209[4 * v208];
      if (v203)
        operator delete(v203);
    }
    else
    {
      *(_DWORD *)v200 = v26;
      v202 = v200 + 4;
    }
    *(_QWORD *)(a1 + 7328) = v202;
  }
  v260[2] = 0;
  *v260 = 0;
  *(_BYTE *)(a1 + 7828) = 0;
  *(_DWORD *)(a1 + 7824) = 0;
  v220 = v258;
  if ((v248 & 1) == 0)
  {
LABEL_270:
    v221 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 582, (uint64_t)"ret.second && ret2.second", 25, (uint64_t)"Failed to add PoseVariable or VelAndBiasVariable.", 49, (void (*)(void **))sub_21023DDB0);
    v220 = v258;
    if (v221)
      abort();
  }
  if (*(_BYTE *)(a1 + 2146))
    v222 = v220;
  else
    v222 = 1;
  if ((v222 & 1) == 0)
  {
    v223 = *(_QWORD **)(a1 + 8);
    v224 = v223[8];
    v225 = v223[39] * v224;
    if (v225)
    {
      v226 = 0;
      v227 = 0;
      v228 = 0;
      v229 = (_QWORD *)v223[6];
      v230 = 1;
      while (1)
      {
        v231 = v228 % v224;
        if (((v228 % v224) & 0x8000000000000000) != 0)
        {
          v236 = v229;
          do
          {
            v237 = (_QWORD *)*v236;
            if (*v236)
            {
              do
              {
                v232 = v237;
                v237 = (_QWORD *)v237[1];
              }
              while (v237);
            }
            else
            {
              do
              {
                v232 = (_QWORD *)v236[2];
                _ZF = *v232 == (_QWORD)v236;
                v236 = v232;
              }
              while (_ZF);
            }
            v236 = v232;
          }
          while (!__CFADD__(v231++, 1));
        }
        else
        {
          v232 = v229;
          if (v231)
          {
            v233 = v229;
            do
            {
              v235 = (_QWORD *)v233[1];
              if (v235)
              {
                do
                {
                  v232 = v235;
                  v235 = (_QWORD *)*v235;
                }
                while (v235);
              }
              else
              {
                do
                {
                  v232 = (_QWORD *)v233[2];
                  _ZF = *v232 == (_QWORD)v233;
                  v233 = v232;
                }
                while (!_ZF);
              }
              v233 = v232;
            }
            while (v231-- > 1);
          }
        }
        v238 = v232[4];
        v239 = v232[5];
        if (v238 == a2 && a3 == (_DWORD)v239)
          break;
        v230 = 0;
        v226 = v238 & 0xFFFFFFFFFFFFFF00;
        ++v228;
        result = 1;
        v227 = v238;
        if (v228 == v225)
          return result;
      }
      if ((v230 & 1) == 0 && a2 == (v227 | v226))
        sub_20FC49B2C(a1);
    }
  }
  return 1;
}

void sub_20FC47BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  if (*(_BYTE *)(v47 - 152))
  {
    if (*(char *)(v47 - 153) < 0)
      operator delete(*(void **)(v47 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20FC47C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  sub_20E86E8C4((uint64_t *)(v47 - 200));
  sub_20E86E8C4((uint64_t *)(v47 - 184));
  sub_20E86E658(v47 - 176);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20FC47CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20FC47CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FC47D94(uint64_t a1)
{
  _QWORD *result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v33;
  _BOOL4 v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  double *v65;
  double v67;
  float64x2_t v70;
  double v72;
  double v73;
  double v75;
  uint64_t v86;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  double *v95;
  uint64_t v96;
  double *v97;
  double v99;
  float64x2_t v102;
  double v104;
  double v105;
  double v107;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t *v123;
  uint64_t v124;
  __int128 v125;
  unsigned int v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  int64x2_t *v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unsigned int v137;
  __int128 v138;
  unsigned int v139;
  __int128 v140;
  double v141;

  sub_20FC541AC((_QWORD *)a1, *(unsigned int *)(a1 + 2152), *(double *)(a1 + 2168));
  result = *(_QWORD **)(a1 + 8);
  v3 = result[8];
  v4 = result[39] * v3;
  if (v4)
  {
    v5 = a1;
    v6 = 0;
    v131 = (int64x2_t *)(a1 + 4856);
    v130 = a1 + 5168;
    v129 = a1 + 7824;
    v134 = *(_QWORD **)(a1 + 8);
    v135 = a1;
    v132 = result[39] * v3;
    v133 = result[8];
    while (1)
    {
      v7 = v6 / v3;
      v8 = v6 % v3;
      v9 = (_QWORD *)result[6];
      if (((v6 % v3) & 0x8000000000000000) != 0)
      {
        do
        {
          v21 = (_QWORD *)*v9;
          if (*v9)
          {
            do
            {
              v10 = v21;
              v21 = (_QWORD *)v21[1];
            }
            while (v21);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v9[2];
              _ZF = *v10 == (_QWORD)v9;
              v9 = v10;
            }
            while (_ZF);
          }
          v9 = v10;
          _CF = __CFADD__(v8++, 1);
        }
        while (!_CF);
      }
      else if (v8)
      {
        do
        {
          v20 = (_QWORD *)v9[1];
          if (v20)
          {
            do
            {
              v10 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v9[2];
              _ZF = *v10 == (_QWORD)v9;
              v9 = v10;
            }
            while (!_ZF);
          }
          v9 = v10;
          v19 = v8-- <= 1;
        }
        while (!v19);
      }
      else
      {
        v10 = (_QWORD *)result[6];
      }
      v11 = *((_OWORD *)v10 + 2);
      v12 = (_QWORD *)result[37];
      if (v7 < 0)
      {
        do
        {
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            do
            {
              v13 = v22;
              v22 = (_QWORD *)v22[1];
            }
            while (v22);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v12[2];
              _ZF = *v13 == (_QWORD)v12;
              v12 = v13;
            }
            while (_ZF);
          }
          v12 = v13;
          _CF = __CFADD__(v7++, 1);
        }
        while (!_CF);
      }
      else if (v3 <= v6)
      {
        do
        {
          v23 = (_QWORD *)v12[1];
          if (v23)
          {
            do
            {
              v13 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v12[2];
              _ZF = *v13 == (_QWORD)v12;
              v12 = v13;
            }
            while (!_ZF);
          }
          v12 = v13;
          v19 = v7-- <= 1;
        }
        while (!v19);
      }
      else
      {
        v13 = (_QWORD *)result[37];
      }
      v14 = *((_DWORD *)v13 + 8);
      v138 = v11;
      v139 = v14;
      v16 = *(uint64_t **)(v5 + 48);
      v15 = *(uint64_t **)(v5 + 56);
      if (v16 != v15)
        break;
LABEL_3:
      if (++v6 == v4)
        return result;
    }
    v17 = *(_QWORD *)(v5 + 6672);
    if (v17 == *(_QWORD *)(v5 + 6664))
      v18 = 0;
    else
      v18 = *(_DWORD *)(v17 - 200) + 1;
    v24 = *(unsigned int *)(v5 + 2152);
LABEL_43:
    v25 = *v16;
    v26 = *(_QWORD *)(*v16 + 984);
    v27 = *(_QWORD *)(*v16 + 976);
    v28 = 0x86BCA1AF286BCA1BLL * ((v26 - v27) >> 3);
    if (v28 < v24 || v26 == v27)
      goto LABEL_42;
    while (1)
    {
      v29 = v28 >> 1;
      v30 = v27 + 152 * (v28 >> 1);
      v31 = *(_DWORD *)(v30 + 16);
      _CF = v31 >= v139;
      if (v31 != v139)
        goto LABEL_52;
      if (*(_QWORD *)v30 >= (unint64_t)v138)
        break;
LABEL_46:
      v27 = v30 + 152;
      v29 = v28 + ~v29;
LABEL_47:
      v28 = v29;
      if (!v29)
      {
        if (v27 == v26
          || *(_DWORD *)(v27 + 16) != v139
          || *(_QWORD *)v27 != (_QWORD)v138
          || *(_DWORD *)(v27 + 8) != DWORD2(v138))
        {
          goto LABEL_42;
        }
        v137 = v18;
        v33 = *(_DWORD *)(v25 + 32);
        if (!*(_BYTE *)(v25 + 968))
        {
          v34 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1466, (uint64_t)"line_track_ptr->getStructure()", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v5 = v135;
          if (v34)
            goto LABEL_123;
        }
        v35 = *(char **)(v5 + 6136);
        v36 = *(char **)(v5 + 6144);
        v37 = v35;
        if (v36 != v35)
        {
          v38 = (v36 - v35) >> 4;
          v37 = *(char **)(v5 + 6136);
          do
          {
            v39 = v38 >> 1;
            v40 = (unsigned int *)&v37[16 * (v38 >> 1)];
            v42 = *v40;
            v41 = (char *)(v40 + 4);
            v38 += ~(v38 >> 1);
            if (v42 < v33)
              v37 = v41;
            else
              v38 = v39;
          }
          while (v38);
        }
        if (v37 == v36 || *(_DWORD *)v37 != v33)
          v37 = *(char **)(v5 + 6144);
        v43 = v33 + 1;
        if (v36 != v35)
        {
          v44 = (v36 - v35) >> 4;
          do
          {
            v45 = v44 >> 1;
            v46 = (unsigned int *)&v35[16 * (v44 >> 1)];
            v48 = *v46;
            v47 = (char *)(v46 + 4);
            v44 += ~(v44 >> 1);
            if (v48 < v43)
              v35 = v47;
            else
              v44 = v45;
          }
          while (v44);
        }
        if (v35 == v36 || *(_DWORD *)v35 != v43)
          v35 = *(char **)(v5 + 6144);
        v49 = *v16;
        v136 = v6;
        if (v37 != v36 || v35 != v36)
          goto LABEL_109;
        v50 = v49 + 40;
        v51 = *(unsigned __int8 *)(v49 + 968);
        if (*(_BYTE *)(v49 + 968))
          v52 = v49 + 40;
        else
          v52 = 0;
        LODWORD(v140) = v33;
        BYTE4(v140) = 1;
        *((_QWORD *)&v140 + 1) = v52;
        if (!v51)
          goto LABEL_95;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v49 + 40))
        {
          _Q1 = *(_OWORD *)(v49 + 104);
          _D3 = *(_QWORD *)(v49 + 112);
          __asm { FMLA            D2, D3, V1.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v49 + 120) * *(double *)(v49 + 120)) + -1.0) > 0.000001)
          {
            v58 = 82;
            v59 = "std::fabs(anchor_direction().norm2() - 1) <= 1e-6";
            v60 = 49;
            goto LABEL_89;
          }
          goto LABEL_90;
        }
        v58 = 44;
        v59 = "initializeImpl()";
        v60 = 16;
LABEL_89:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", v58, (uint64_t)v59, v60, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_123;
        }
LABEL_90:
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v49 + 40))
          goto LABEL_95;
        v61 = *(uint64_t **)(v49 + 136);
        v62 = *v61;
        v63 = (double *)v61[2];
        v64 = v61[4];
        v65 = (double *)v61[6];
        _D1 = *(double *)(v49 + 56) - v63[1];
        v67 = *(double *)(v49 + 64) - v63[2];
        _Q3.f64[0] = *(float64_t *)(v62 + 16);
        _Q7 = *(_OWORD *)(v62 + 48);
        _Q3.f64[1] = *(float64_t *)(v62 + 40);
        v70 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v62, *(int64x2_t *)(v62 + 24)), *(double *)(v49 + 48) - *v63), (float64x2_t)vzip2q_s64(*(int64x2_t *)v62, *(int64x2_t *)(v62 + 24)), _D1), _Q3, v67);
        __asm { FMLA            D2, D1, V7.D[1] }
        v72 = _D2 + *(double *)(v62 + 64) * v67;
        v73 = v70.f64[0] - *v65;
        _D2 = v70.f64[1] - v65[1];
        v75 = v72 - v65[2];
        _Q3.f64[0] = *(float64_t *)(v64 + 16);
        _Q4 = *(int64x2_t *)v64;
        _Q6 = *(int64x2_t *)(v64 + 24);
        _Q16 = *(_OWORD *)(v64 + 48);
        __asm { FMLA            D19, D2, V4.D[1] }
        _Q3.f64[1] = *(float64_t *)(v64 + 40);
        _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v64, _Q6), v73), (float64x2_t)vzip2q_s64(*(int64x2_t *)v64, _Q6), _D2), _Q3, v75);
        __asm
        {
          FMLA            D3, D2, V16.D[1]
          FMLA            D1, D2, V6.D[1]
        }
        _D1 = _D1 + v75 * _Q3.f64[1];
        __asm { FMLA            D2, D1, V17.D[1] }
        v141 = sqrt(_D2 + (_Q3.f64[0] + v75 * *(double *)(v64 + 64)) * (_Q3.f64[0] + *(double *)(v64 + 64) * v75));
        _Q1 = *(_OWORD *)(v49 + 104);
        _Q3.f64[0] = *(float64_t *)(v49 + 112);
        __asm { FMLA            D2, D3, V1.D[1] }
        if (fabs(sqrt(_D2 + *(double *)(v49 + 120) * *(double *)(v49 + 120)) + -1.0) > 0.000001
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_123;
        }
        if (sub_20FC57AC4(v130, (unsigned int *)&v140))
        {
          *(_BYTE *)(v129 + 4) = 0;
          *(_DWORD *)v129 = 0;
        }
LABEL_95:
        if (*(_BYTE *)(*v16 + 968))
          v86 = *v16 + 40;
        else
          v86 = 0;
        LODWORD(v140) = v33 + 1;
        BYTE4(v140) = 1;
        *((_QWORD *)&v140 + 1) = v86 + 448;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v86 + 448) + 24))(v86 + 448))
        {
          _Q1 = *(_OWORD *)(v86 + 512);
          _D3 = *(_QWORD *)(v86 + 520);
          __asm { FMLA            D2, D3, V1.D[1] }
          if (fabs(sqrt(_D2 + *(double *)(v86 + 528) * *(double *)(v86 + 528)) + -1.0) > 0.000001)
          {
            v90 = 82;
            v91 = "std::fabs(anchor_direction().norm2() - 1) <= 1e-6";
            v92 = 49;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        v90 = 44;
        v91 = "initializeImpl()";
        v92 = 16;
LABEL_102:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", v90, (uint64_t)v91, v92, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_123;
        }
LABEL_103:
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v86 + 448) + 24))(v86 + 448))
          goto LABEL_108;
        v93 = *(uint64_t **)(v86 + 544);
        v94 = *v93;
        v95 = (double *)v93[2];
        v96 = v93[4];
        v97 = (double *)v93[6];
        _D1 = *(double *)(v86 + 464) - v95[1];
        v99 = *(double *)(v86 + 472) - v95[2];
        _Q3.f64[0] = *(float64_t *)(v94 + 16);
        _Q7 = *(_OWORD *)(v94 + 48);
        _Q3.f64[1] = *(float64_t *)(v94 + 40);
        v102 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v94, *(int64x2_t *)(v94 + 24)), *(double *)(v86 + 456) - *v95), (float64x2_t)vzip2q_s64(*(int64x2_t *)v94, *(int64x2_t *)(v94 + 24)), _D1), _Q3, v99);
        __asm { FMLA            D2, D1, V7.D[1] }
        v104 = _D2 + *(double *)(v94 + 64) * v99;
        v105 = v102.f64[0] - *v97;
        _D2 = v102.f64[1] - v97[1];
        v107 = v104 - v97[2];
        _Q3.f64[0] = *(float64_t *)(v96 + 16);
        _Q4 = *(int64x2_t *)v96;
        _Q6 = *(int64x2_t *)(v96 + 24);
        _Q16 = *(_OWORD *)(v96 + 48);
        __asm { FMLA            D19, D2, V4.D[1] }
        _Q3.f64[1] = *(float64_t *)(v96 + 40);
        _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v96, _Q6), v105), (float64x2_t)vzip2q_s64(*(int64x2_t *)v96, _Q6), _D2), _Q3, v107);
        __asm
        {
          FMLA            D3, D2, V16.D[1]
          FMLA            D1, D2, V6.D[1]
        }
        _D1 = _D1 + v107 * _Q3.f64[1];
        __asm { FMLA            D2, D1, V17.D[1] }
        v141 = sqrt(_D2 + (_Q3.f64[0] + v107 * *(double *)(v96 + 64)) * (_Q3.f64[0] + *(double *)(v96 + 64) * v107));
        _Q1 = *(_OWORD *)(v86 + 512);
        _Q3.f64[0] = *(float64_t *)(v86 + 520);
        __asm { FMLA            D2, D3, V1.D[1] }
        if (fabs(sqrt(_D2 + *(double *)(v86 + 528) * *(double *)(v86 + 528)) + -1.0) > 0.000001
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_123:
          abort();
        }
        if (sub_20FC57AC4(v130, (unsigned int *)&v140))
        {
          *(_BYTE *)(v129 + 4) = 0;
          *(_DWORD *)v129 = 0;
        }
LABEL_108:
        v49 = *v16;
        v5 = v135;
LABEL_109:
        v118 = v49 + 40;
        if (!*(_BYTE *)(v49 + 968))
          v118 = 0;
        v119 = *(_DWORD *)(v118 + 904);
        v120 = *(_DWORD *)(v118 + 912);
        _ZF = v120 == v139 && *(_QWORD *)(v118 + 896) == (_QWORD)v138;
        if (_ZF && v119 == DWORD2(v138))
        {
          v3 = v133;
          result = v134;
          v4 = v132;
          v6 = v136;
          v18 = v137;
        }
        else
        {
          v123 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v5 + 8) + 1784), (uint64_t *)&v138);
          if (v123)
            v124 = v123[13];
          else
            v124 = 0;
          v125 = *(_OWORD *)(v27 + 32);
          v141 = *(double *)(v27 + 48);
          v140 = v125;
          v126 = v33;
          v127 = v124;
          sub_20FC57D54(v119, v120, DWORD2(v138), v139, v126, v124, (uint64_t)&v140, v137, *(double *)(v27 + 144), v131);
          v128 = *(_OWORD *)(v27 + 32);
          v141 = *(double *)(v27 + 48);
          v140 = v128;
          sub_20FC57D54(v119, v120, DWORD2(v138), v139, v43, v127, (uint64_t)&v140, v137 + 1, *(double *)(v27 + 144), v131);
          v18 = v137 + 2;
          result = v134;
          v5 = v135;
          v4 = v132;
          v3 = v133;
          v6 = v136;
        }
LABEL_42:
        if (++v16 == v15)
          goto LABEL_3;
        goto LABEL_43;
      }
    }
    if (*(_QWORD *)v30 != (_QWORD)v138)
      goto LABEL_47;
    _CF = *(_DWORD *)(v30 + 8) >= DWORD2(v138);
LABEL_52:
    if (_CF)
      goto LABEL_47;
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_20FC48730(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _BOOL4 v21;
  unsigned int v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  char *v28;
  unsigned int v29;
  int v30;
  char v31;
  int v32;
  _QWORD *v34;
  unint64_t v35;
  int64x2_t *v36;
  uint64_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  uint64_t v41;
  unsigned int v42;
  char v43;
  __int128 v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  char *v81;
  unsigned int v82;
  double *v83;
  double v84;
  uint64_t v85;
  double *v87;
  int64x2_t *v88;
  double *v89;
  double v90;
  double v91;
  float64x2_t v92;
  float64x2_t v94;
  double v99;
  double v101;
  double v103;
  unint64_t v104;
  float v105;
  float v106;
  float v107;
  double v108;
  int8x8_t v109;
  unint64_t v110;
  uint8x8_t v111;
  unint64_t v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  char *v124;
  unsigned int v125;
  char *v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int *v130;
  char *v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  double *v144;
  int64x2_t *v145;
  double *v146;
  double v147;
  double v148;
  float64x2_t v149;
  float64x2_t v151;
  double v153;
  double v155;
  double v157;
  double *v158;
  float v159;
  float v160;
  float v161;
  double v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  double *v176;
  int64x2_t *v177;
  double *v178;
  double v179;
  double v180;
  float64x2_t v181;
  float64x2_t v183;
  double v185;
  double v187;
  double v189;
  unint64_t v190;
  double *v191;
  float v192;
  float v193;
  float v194;
  double v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  unsigned int v199;
  _QWORD *v200;
  unint64_t v201;
  char *v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int *v206;
  char *v207;
  unsigned int v208;
  int8x8_t v209;
  uint8x8_t v210;
  unint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL4 v219;
  unsigned int *v220;
  unint64_t v221;
  char *v222;
  char *v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  char *v227;
  unsigned int v228;
  int8x8_t v229;
  uint8x8_t v230;
  unint64_t v231;
  uint64_t **v232;
  uint64_t *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  BOOL v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t *v246;
  int64x2_t **v247;
  uint64_t v250;
  float64x2_t v251;
  _QWORD *v252;
  uint64_t *v253;
  float64x2_t v254;
  float64x2_t v255;
  unint64_t v256;
  uint64_t v257;
  void *__p;
  unsigned int *v259;
  unsigned int *v260;
  unsigned int *v261;
  int64x2_t v262;
  __int128 v263;
  uint64_t v264;
  int v265;
  unsigned int v266;
  char v267;
  uint64_t v268;

  v3 = a1;
  v4 = a1[3];
  v5 = a1[4];
  if (v4 != v5)
  {
    v6 = a2;
    do
    {
      if (v6 > (uint64_t)(*(_QWORD *)(*(_QWORD *)v4 + 504) - *(_QWORD *)(*(_QWORD *)v4 + 496)) >> 6)
      {
        v7 = *(_DWORD *)(*(_QWORD *)v4 + 32);
        v8 = (char *)v3[767];
        v9 = (char *)v3[768];
        if (v9 != v8)
        {
          v10 = (v9 - v8) >> 4;
          do
          {
            v11 = v10 >> 1;
            v12 = (unsigned int *)&v8[16 * (v10 >> 1)];
            v14 = *v12;
            v13 = (char *)(v12 + 4);
            v10 += ~(v10 >> 1);
            if (v14 < v7)
              v8 = v13;
            else
              v10 = v11;
          }
          while (v10);
        }
        if (v8 != v9 && *(_DWORD *)v8 == v7)
        {
          if (sub_20FBCB53C((uint64_t)(v3 + 646), v7))
          {
            *((_WORD *)v3 + 3914) = 0;
            *((_DWORD *)v3 + 1956) = 0;
          }
          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2372, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_278;
          }
          *(_DWORD *)(*(_QWORD *)v4 + 520) = 0;
          v6 = a2;
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  v250 = (uint64_t)(v3 + 646);
  v15 = *((_DWORD *)v3 + 546) + sub_20F8DE898((uint64_t)(v3 + 646), 0);
  v16 = a3 < (uint64_t)(v3[4] - v3[3]) >> 3 && v15 > a3;
  if (v16)
  {
    v245 = v3;
    if (*((_BYTE *)v3 + 2104))
    {
      v34 = (_QWORD *)v3[1];
      v35 = v34[8];
      v36 = (int64x2_t *)v34[6];
      if ((v35 & 0x1FFFFFFFELL) != 0)
      {
        v37 = (v35 >> 1);
        do
        {
          v38 = (int64x2_t *)v36->i64[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (int64x2_t *)v38->i64[0];
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (int64x2_t *)v36[1].i64[0];
              _ZF = v39->i64[0] == (_QWORD)v36;
              v36 = v39;
            }
            while (!_ZF);
          }
          v36 = v39;
          v16 = v37-- <= 1;
        }
        while (!v16);
      }
      else
      {
        v39 = (int64x2_t *)v34[6];
      }
      v55 = v34[225];
      v262 = v39[2];
      v56 = (_QWORD *)v34[37];
      if (v56 == v34 + 38)
      {
        v57 = (uint64_t *)(v55 + 40);
LABEL_66:
        v247 = (int64x2_t **)v57;
      }
      else
      {
        do
        {
          LODWORD(v263) = *((_DWORD *)v56 + 8);
          v58 = sub_20E9DF85C(v34 + 223, v262.i64);
          if (v58)
          {
            v57 = v58 + 5;
            goto LABEL_66;
          }
          v59 = (_QWORD *)v56[1];
          if (v59)
          {
            do
            {
              v60 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (_QWORD *)v56[2];
              _ZF = *v60 == (_QWORD)v56;
              v56 = v60;
            }
            while (!_ZF);
          }
          v34 = (_QWORD *)v3[1];
          v56 = v60;
        }
        while (v60 != v34 + 38);
        v247 = 0;
      }
      v61 = (uint64_t)(v3[4] - v3[3]) >> 3;
      v262 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v253 = v3 + 396;
      sub_20F623C14((uint64_t)(v3 + 396), v61, &v262);
      v257 = *(_QWORD *)(v3[1] + 48);
      __p = &v262;
      v62 = v3[3];
      v63 = (uint64_t *)v3[4];
      v64 = 126 - 2 * __clz((uint64_t)((uint64_t)v63 - v62) >> 3);
      v262.i64[0] = (uint64_t)v3;
      v262.i64[1] = (uint64_t)&v257;
      if (v63 == (uint64_t *)v62)
        v65 = 0;
      else
        v65 = v64;
      sub_20FC5ACBC(v62, v63, (_QWORD ***)&__p, v65, 1);
      v252 = v3 + 402;
      bzero(v3 + 402, 0x480uLL);
      v66 = v3 + 399;
      v67 = (uint64_t)(v3[4] - v3[3]) >> 3;
      LOBYTE(__p) = 0;
      sub_20EDCA4D0((uint64_t)(v3 + 399), v67, &__p);
      v69 = v3[3];
      v68 = v3[4];
      v246 = v3 + 399;
      if (v68 == v69)
      {
        v71 = 0;
        v70 = 0;
        v243 = v3[4];
        v69 = v243;
        if (a3)
          goto LABEL_147;
LABEL_270:
        v240 = v243;
        if (v243 != v69)
        {
          v241 = 0;
          while (1)
          {
            if (((*(_QWORD *)(*v246 + ((v241 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v241) & 1) == 0)
            {
              v242 = *(_QWORD *)(v69 + 8 * v241);
              if (sub_20FBCB53C(v250, *(_DWORD *)(v242 + 32)))
              {
                *((_WORD *)v3 + 3914) = 0;
                *((_DWORD *)v3 + 1956) = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2285, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_278;
              }
              *(_DWORD *)(v242 + 520) = 0;
              v69 = v3[3];
              v240 = v3[4];
            }
            if (++v241 >= (v240 - v69) >> 3)
              goto LABEL_22;
          }
        }
        goto LABEL_22;
      }
      v70 = 0;
      v71 = 0;
      v72 = 0;
      if ((unint64_t)((v68 - v69) >> 3) <= 1)
        v73 = 1;
      else
        v73 = (v68 - v69) >> 3;
LABEL_77:
      v74 = *(_QWORD *)(v69 + 8 * v72);
      v75 = *(_QWORD *)(v74 + 32);
      if (*(_DWORD *)(v74 + 520) == 2)
      {
        v76 = (char *)v3[695];
        v77 = (char *)v3[696];
        if (v77 != v76)
        {
          v78 = (v77 - v76) >> 4;
          do
          {
            v79 = v78 >> 1;
            v80 = (unsigned int *)&v76[16 * (v78 >> 1)];
            v82 = *v80;
            v81 = (char *)(v80 + 4);
            v78 += ~(v78 >> 1);
            if (v82 < v75)
              v76 = v81;
            else
              v78 = v79;
          }
          while (v78);
        }
        if (v76 != v77 && *(_DWORD *)v76 == (_DWORD)v75)
          goto LABEL_86;
      }
      v109 = (int8x8_t)v3[389];
      if (!*(_QWORD *)&v109)
        goto LABEL_121;
      v110 = *(_QWORD *)(v74 + 32);
      v111 = (uint8x8_t)vcnt_s8(v109);
      v111.i16[0] = vaddlv_u8(v111);
      if (v111.u32[0] > 1uLL)
      {
        v112 = *(_QWORD *)(v74 + 32);
        if (*(_QWORD *)&v109 <= v110)
          v112 = v110 % *(_QWORD *)&v109;
      }
      else
      {
        v112 = (v109.i32[0] - 1) & v110;
      }
      v113 = *(uint64_t ***)(v3[388] + 8 * v112);
      if (!v113 || (v114 = *v113) == 0)
      {
LABEL_121:
        v126 = (char *)v3[767];
        v127 = (char *)v3[768];
        if (v127 != v126)
        {
          v128 = (v127 - v126) >> 4;
          do
          {
            v129 = v128 >> 1;
            v130 = (unsigned int *)&v126[16 * (v128 >> 1)];
            v132 = *v130;
            v131 = (char *)(v130 + 4);
            v128 += ~(v128 >> 1);
            if (v132 < v75)
              v126 = v131;
            else
              v128 = v129;
          }
          while (v128);
        }
        if (v126 == v127 || *(_DWORD *)v126 != (_DWORD)v75)
        {
          *(_QWORD *)(*v66 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
          ++v71;
        }
        goto LABEL_76;
      }
      if (v111.u32[0] < 2uLL)
      {
        v115 = *(_QWORD *)&v109 - 1;
        while (1)
        {
          v117 = v114[1];
          if (v117 == v110)
          {
            if (*((_DWORD *)v114 + 4) == (_DWORD)v75)
              goto LABEL_113;
          }
          else if ((v117 & v115) != v112)
          {
            goto LABEL_121;
          }
          v114 = (uint64_t *)*v114;
          if (!v114)
            goto LABEL_121;
        }
      }
      while (1)
      {
        v116 = v114[1];
        if (v116 == v110)
        {
          if (*((_DWORD *)v114 + 4) == (_DWORD)v75)
          {
LABEL_113:
            v119 = (char *)v3[767];
            v120 = (char *)v3[768];
            if (v120 != v119)
            {
              v121 = (v120 - v119) >> 4;
              do
              {
                v122 = v121 >> 1;
                v123 = (unsigned int *)&v119[16 * (v121 >> 1)];
                v125 = *v123;
                v124 = (char *)(v123 + 4);
                v121 += ~(v121 >> 1);
                if (v125 < v75)
                  v119 = v124;
                else
                  v121 = v122;
              }
              while (v121);
            }
            if (v119 == v120 || *(_DWORD *)v119 != (_DWORD)v75)
              goto LABEL_121;
LABEL_86:
            v83 = (double *)(*v253 + 16 * v72);
            v84 = *v83;
            if (*v83 <= 6.28318531)
            {
              v108 = v83[1];
            }
            else
            {
              v85 = v74 + 40;
              if (!*(_BYTE *)(v74 + 488))
                v85 = 0;
              _Q1 = *(_OWORD *)(v85 + 8);
              v87 = (double *)v247[2];
              v88 = v247[4];
              v89 = (double *)v247[6];
              v90 = *(double *)&_Q1 - *v87;
              *(double *)&_Q1 = *((double *)&_Q1 + 1) - v87[1];
              v91 = *(double *)(v85 + 24) - v87[2];
              *(_QWORD *)&v92.f64[0] = (*v247)[1].i64[0];
              _Q7 = (*v247)[3];
              *(_QWORD *)&v92.f64[1] = (*v247)[2].i64[1];
              v94 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), v90), (float64x2_t)vzip2q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), *(double *)&_Q1), v92, v91);
              __asm { FMLA            D2, D1, V7.D[1] }
              v99 = _D2 + *(double *)(*v247)[4].i64 * v91;
              _D2 = v94.f64[1] - v89[1];
              v101 = v99 - v89[2];
              *(_QWORD *)&v92.f64[0] = v88[1].i64[0];
              _Q7 = v88[3];
              *(_QWORD *)&v92.f64[1] = v88[2].i64[1];
              v254 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v88, *(int64x2_t *)((char *)v88 + 24)), v94.f64[0] - *v89), (float64x2_t)vzip2q_s64(*v88, *(int64x2_t *)((char *)v88 + 24)), _D2), v92, v101);
              __asm { FMLA            D1, D2, V7.D[1] }
              v103 = *(double *)&_Q1 + *(double *)v88[4].i64 * v101;
              *(float *)&v101 = v254.f64[0];
              *(float *)&_Q1 = v103;
              v104 = v70;
              v84 = atan2f(*(float *)&v101, *(float *)&_Q1) + 3.14159265;
              *v83 = v84;
              v105 = v254.f64[1];
              v106 = sqrt(vmulq_f64(v254, v254).f64[0] + v103 * v103);
              v107 = atan2f(v105, v106);
              v70 = v104;
              v108 = v107 + 1.57079633;
              v83[1] = v108;
            }
            v118 = (unint64_t)(v84 * 3.81971863) - ((unint64_t)(v84 * 3.81971863) == 24);
            ++*((_DWORD *)&v252[6 * v118]
              + (unint64_t)(v108 * 3.81971863)
              - ((unint64_t)(v108 * 3.81971863) == 12));
            ++v70;
            ++v71;
            *(_QWORD *)(*v66 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
LABEL_76:
            if (++v72 == v73)
            {
              v133 = 0;
              v134 = 0;
              do
              {
                if ((*(_QWORD *)(*v66 + 8 * (v134 >> 6)) & (1 << v134)) == 0)
                {
                  v135 = *(_QWORD *)(v69 + 8 * v134);
                  v136 = *(_QWORD *)(v135 + 496);
                  v137 = *(_QWORD *)(v135 + 504);
                  if (*((unsigned int *)v3 + 528) <= (unint64_t)((v137 - v136) >> 6))
                  {
                    v138 = v70;
                    if (sub_20F8830B0(v136, v137) < (unint64_t)*((unsigned int *)v3 + 527))
                    {
                      v70 = v138;
                    }
                    else
                    {
                      v70 = v138 + 1;
                      ++v71;
                      *(_QWORD *)(*v66 + 8 * (v134 >> 6)) |= 1 << v134;
                      if (v138 + 1 >= a3)
                      {
                        v69 = v3[3];
                        v243 = v3[4];
                        goto LABEL_270;
                      }
                      v139 = *v253;
                      v140 = *(double *)(*v253 + v133);
                      if (v140 <= 6.28318531)
                      {
                        v162 = *(double *)(v139 + v133 + 8);
                      }
                      else
                      {
                        v141 = *(_QWORD *)(v3[3] + 8 * v134);
                        if (*(_BYTE *)(v141 + 488))
                          v142 = v141 + 40;
                        else
                          v142 = 0;
                        _Q1 = *(_OWORD *)(v142 + 8);
                        v144 = (double *)v247[2];
                        v145 = v247[4];
                        v146 = (double *)v247[6];
                        v147 = *(double *)&_Q1 - *v144;
                        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v144[1];
                        v148 = *(double *)(v142 + 24) - v144[2];
                        *(_QWORD *)&v149.f64[0] = (*v247)[1].i64[0];
                        _Q7 = (*v247)[3];
                        *(_QWORD *)&v149.f64[1] = (*v247)[2].i64[1];
                        v151 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), v147), (float64x2_t)vzip2q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), *(double *)&_Q1), v149, v148);
                        __asm { FMLA            D2, D1, V7.D[1] }
                        v153 = _D2 + *(double *)(*v247)[4].i64 * v148;
                        _D2 = v151.f64[1] - v146[1];
                        v155 = v153 - v146[2];
                        *(_QWORD *)&v149.f64[0] = v145[1].i64[0];
                        _Q7 = v145[3];
                        *(_QWORD *)&v149.f64[1] = v145[2].i64[1];
                        v255 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v145, *(int64x2_t *)((char *)v145 + 24)), v151.f64[0] - *v146), (float64x2_t)vzip2q_s64(*v145, *(int64x2_t *)((char *)v145 + 24)), _D2), v149, v155);
                        __asm { FMLA            D1, D2, V7.D[1] }
                        v157 = *(double *)&_Q1 + *(double *)v145[4].i64 * v155;
                        *(float *)&v155 = v255.f64[0];
                        *(float *)&_Q1 = v157;
                        v140 = atan2f(*(float *)&v155, *(float *)&_Q1) + 3.14159265;
                        v158 = (double *)(v139 + v133);
                        *v158 = v140;
                        v159 = v255.f64[1];
                        v160 = sqrt(vmulq_f64(v255, v255).f64[0] + v157 * v157);
                        v161 = atan2f(v159, v160);
                        v70 = v138 + 1;
                        v162 = v161 + 1.57079633;
                        v158[1] = v162;
                      }
                      v163 = (unint64_t)(v140 * 3.81971863) - ((unint64_t)(v140 * 3.81971863) == 24);
                      v164 = 4 * ((unint64_t)(v162 * 3.81971863) - ((unint64_t)(v162 * 3.81971863) == 12));
                      ++*(_DWORD *)((char *)&v252[6 * v163] + v164);
                    }
                  }
                }
                ++v134;
                v69 = v3[3];
                v133 += 16;
              }
              while (v134 < (v3[4] - v69) >> 3);
              v243 = v3[4];
              if (v70 >= a3)
                goto LABEL_270;
LABEL_147:
              v165 = (v243 - v69) >> 3;
              if (v243 == v69)
              {
                if (v71 < v165)
                {
                  while (1)
                    ;
                }
                goto LABEL_270;
              }
              v166 = 1;
              v244 = v69;
LABEL_152:
              if (v71 >= v165)
                goto LABEL_270;
              v256 = v71;
              v167 = 0;
              v168 = 0;
              v169 = *v246;
              while (1)
              {
                v170 = *(_QWORD *)(v169 + 8 * (v168 >> 6));
                if ((v170 & (1 << v168)) == 0)
                {
                  v171 = *v253;
                  v172 = *(double *)(*v253 + v167);
                  if (v172 <= 6.28318531)
                  {
                    v195 = *(double *)(v171 + v167 + 8);
                  }
                  else
                  {
                    v173 = *(_QWORD *)(v69 + 8 * v168);
                    v174 = *(_BYTE *)(v173 + 488) ? v173 + 40 : 0;
                    _Q1 = *(_OWORD *)(v174 + 8);
                    v176 = (double *)v247[2];
                    v177 = v247[4];
                    v178 = (double *)v247[6];
                    v179 = *(double *)&_Q1 - *v176;
                    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v176[1];
                    v180 = *(double *)(v174 + 24) - v176[2];
                    *(_QWORD *)&v181.f64[0] = (*v247)[1].i64[0];
                    _Q7 = (*v247)[3];
                    *(_QWORD *)&v181.f64[1] = (*v247)[2].i64[1];
                    v183 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), v179), (float64x2_t)vzip2q_s64(**v247, *(int64x2_t *)((char *)*v247 + 24)), *(double *)&_Q1), v181, v180);
                    __asm { FMLA            D2, D1, V7.D[1] }
                    v185 = _D2 + *(double *)(*v247)[4].i64 * v180;
                    _D2 = v183.f64[1] - v178[1];
                    v187 = v185 - v178[2];
                    *(_QWORD *)&v181.f64[0] = v177[1].i64[0];
                    _Q7 = v177[3];
                    *(_QWORD *)&v181.f64[1] = v177[2].i64[1];
                    v251 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v177, *(int64x2_t *)((char *)v177 + 24)), v183.f64[0] - *v178), (float64x2_t)vzip2q_s64(*v177, *(int64x2_t *)((char *)v177 + 24)), _D2), v181, v187);
                    __asm { FMLA            D1, D2, V7.D[1] }
                    v189 = *(double *)&_Q1 + *(double *)v177[4].i64 * v187;
                    *(float *)&v187 = v251.f64[0];
                    *(float *)&_Q1 = v189;
                    v190 = v70;
                    v172 = atan2f(*(float *)&v187, *(float *)&_Q1) + 3.14159265;
                    v191 = (double *)(v171 + v167);
                    *v191 = v172;
                    v192 = v251.f64[1];
                    v193 = sqrt(vmulq_f64(v251, v251).f64[0] + v189 * v189);
                    v194 = atan2f(v192, v193);
                    v70 = v190;
                    v69 = v244;
                    v195 = v194 + 1.57079633;
                    v191[1] = v195;
                  }
                  v196 = (unint64_t)(v195 * 3.81971863) - ((unint64_t)(v195 * 3.81971863) == 12);
                  v197 = &v252[6
                             * ((unint64_t)(v172 * 3.81971863) - ((unint64_t)(v172 * 3.81971863) == 24))];
                  v198 = *((unsigned int *)v197 + v196);
                  if (v166 > v198)
                  {
                    ++v70;
                    ++v256;
                    *(_QWORD *)(v169 + 8 * (v168 >> 6)) = v170 | (1 << v168);
                    if (v70 >= a3)
                    {
LABEL_151:
                      ++v166;
                      v71 = v256;
                      if (v70 >= a3)
                        goto LABEL_270;
                      goto LABEL_152;
                    }
                    *((_DWORD *)v197 + v196) = v198 + 1;
                  }
                }
                ++v168;
                v167 += 16;
                if (v165 == v168)
                  goto LABEL_151;
              }
            }
            goto LABEL_77;
          }
        }
        else
        {
          if (v116 >= *(_QWORD *)&v109)
            v116 %= *(_QWORD *)&v109;
          if (v116 != v112)
            goto LABEL_121;
        }
        v114 = (uint64_t *)*v114;
        if (!v114)
          goto LABEL_121;
      }
    }
    v41 = v3[253];
    v42 = *((_DWORD *)v3 + 525);
    v43 = *((_BYTE *)v3 + 2116);
    v44 = *(_OWORD *)(v3 + 251);
    v262 = *(int64x2_t *)(v3 + 249);
    v263 = v44;
    v264 = v41;
    v265 = 15;
    v266 = v42;
    v267 = v43;
    v268 = 0;
    sub_20FC4F9E0((uint64_t)&__p, (uint64_t)&v262, v3, a3);
    v46 = (unsigned int *)__p;
    v45 = v259;
    v47 = ((unint64_t)((char *)v259 - (_BYTE *)__p) >> 4) - v268;
    v48 = v260;
    v49 = (unint64_t)((char *)v261 - (char *)v260) >> 4;
    v50 = v49 - HIDWORD(v268);
    v51 = v49 - HIDWORD(v268) + v47;
    v52 = a3 - (v268 + HIDWORD(v268));
    v53 = v51 - v52;
    if (v51 > v52)
    {
      if ((_DWORD)v49 == HIDWORD(v268))
      {
        v54 = 0;
      }
      else if (v50 < v266 || v53 > v51 - v266)
      {
        if (v50 >= v52)
          v54 = v50 - v52;
        else
          v54 = 0;
        v53 -= v54;
      }
      else
      {
        _CF = v47 >= v52 - v266;
        v199 = v47 - (v52 - v266);
        if (!_CF)
          v199 = 0;
        v54 = v53 - v199;
        v53 = v199;
      }
      v200 = v3 + 978;
      if (__p != v259 && v53)
      {
        do
        {
          v201 = v46[2];
          v202 = (char *)v245[767];
          v203 = (char *)v245[768];
          if (v203 != v202)
          {
            v204 = (v203 - v202) >> 4;
            do
            {
              v205 = v204 >> 1;
              v206 = (unsigned int *)&v202[16 * (v204 >> 1)];
              v208 = *v206;
              v207 = (char *)(v206 + 4);
              v204 += ~(v204 >> 1);
              if (v208 < v201)
                v202 = v207;
              else
                v204 = v205;
            }
            while (v204);
          }
          if (v202 == v203 || *(_DWORD *)v202 != (_DWORD)v201)
            v202 = (char *)v245[768];
          v209 = (int8x8_t)v245[389];
          if (v209)
          {
            v210 = (uint8x8_t)vcnt_s8(v209);
            v210.i16[0] = vaddlv_u8(v210);
            if (v210.u32[0] > 1uLL)
            {
              v211 = v46[2];
              if (*(_QWORD *)&v209 <= v201)
                v211 = v201 % *(_QWORD *)&v209;
            }
            else
            {
              v211 = (v209.i32[0] - 1) & v201;
            }
            v212 = *(uint64_t ***)(v245[388] + 8 * v211);
            if (v212)
            {
              v213 = *v212;
              if (v213)
              {
                if (v210.u32[0] < 2uLL)
                {
                  v214 = *(_QWORD *)&v209 - 1;
                  while (1)
                  {
                    v216 = v213[1];
                    if (v216 == v201)
                    {
                      if (*((_DWORD *)v213 + 4) == (_DWORD)v201)
                        goto LABEL_179;
                    }
                    else if ((v216 & v214) != v211)
                    {
                      goto LABEL_209;
                    }
                    v213 = (uint64_t *)*v213;
                    if (!v213)
                      goto LABEL_209;
                  }
                }
                do
                {
                  v215 = v213[1];
                  if (v215 == v201)
                  {
                    if (*((_DWORD *)v213 + 4) == (_DWORD)v201)
                      goto LABEL_179;
                  }
                  else
                  {
                    if (v215 >= *(_QWORD *)&v209)
                      v215 %= *(_QWORD *)&v209;
                    if (v215 != v211)
                      break;
                  }
                  v213 = (uint64_t *)*v213;
                }
                while (v213);
              }
            }
          }
LABEL_209:
          if (v202 != v203)
          {
            if (sub_20FBCB53C(v250, v201))
            {
              *((_WORD *)v200 + 2) = 0;
              *(_DWORD *)v200 = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
            {
LABEL_279:
              abort();
            }
            v217 = v245[3];
            v218 = v245[4];
            if (v217 != v218)
            {
              while (v46[2] != *(_DWORD *)(*(_QWORD *)v217 + 32))
              {
                v217 += 8;
                if (v217 == v218)
                  goto LABEL_216;
              }
            }
            if (v217 == v218)
            {
LABEL_216:
              v219 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
              v217 = v218;
              if (v219)
LABEL_262:
                abort();
            }
            *(_DWORD *)(*(_QWORD *)v217 + 520) = 0;
            if (!--v53)
              break;
          }
LABEL_179:
          v46 += 4;
        }
        while (v46 != v45);
        v48 = v260;
      }
      if (v54)
      {
        v220 = v261;
        if (v48 != v261)
        {
          do
          {
            v221 = v48[2];
            v222 = (char *)v245[767];
            v223 = (char *)v245[768];
            if (v223 != v222)
            {
              v224 = (v223 - v222) >> 4;
              do
              {
                v225 = v224 >> 1;
                v226 = (unsigned int *)&v222[16 * (v224 >> 1)];
                v228 = *v226;
                v227 = (char *)(v226 + 4);
                v224 += ~(v224 >> 1);
                if (v228 < v221)
                  v222 = v227;
                else
                  v224 = v225;
              }
              while (v224);
            }
            if (v222 == v223 || *(_DWORD *)v222 != (_DWORD)v221)
              v222 = (char *)v245[768];
            v229 = (int8x8_t)v245[389];
            if (v229)
            {
              v230 = (uint8x8_t)vcnt_s8(v229);
              v230.i16[0] = vaddlv_u8(v230);
              if (v230.u32[0] >= 2uLL)
              {
                v231 = v48[2];
                if (*(_QWORD *)&v229 <= v221)
                  v231 = v221 % *(_QWORD *)&v229;
              }
              else
              {
                v231 = (v229.i32[0] - 1) & v221;
              }
              v232 = *(uint64_t ***)(v245[388] + 8 * v231);
              if (v232)
              {
                v233 = *v232;
                if (v233)
                {
                  if (v230.u32[0] < 2uLL)
                  {
                    v234 = *(_QWORD *)&v229 - 1;
                    while (1)
                    {
                      v236 = v233[1];
                      if (v236 == v221)
                      {
                        if (*((_DWORD *)v233 + 4) == (_DWORD)v221)
                          goto LABEL_224;
                      }
                      else if ((v236 & v234) != v231)
                      {
                        goto LABEL_254;
                      }
                      v233 = (uint64_t *)*v233;
                      if (!v233)
                        goto LABEL_254;
                    }
                  }
                  do
                  {
                    v235 = v233[1];
                    if (v235 == v221)
                    {
                      if (*((_DWORD *)v233 + 4) == (_DWORD)v221)
                        goto LABEL_224;
                    }
                    else
                    {
                      if (v235 >= *(_QWORD *)&v229)
                        v235 %= *(_QWORD *)&v229;
                      if (v235 != v231)
                        break;
                    }
                    v233 = (uint64_t *)*v233;
                  }
                  while (v233);
                }
              }
            }
LABEL_254:
            if (v222 != v223)
            {
              if ((sub_20FBCB53C(v250, v221) & 1) != 0)
              {
                *((_WORD *)v200 + 2) = 0;
                *(_DWORD *)v200 = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_279;
              }
              v237 = v245[3];
              v238 = v245[4];
              if (v237 != v238)
              {
                while (v48[2] != *(_DWORD *)(*(_QWORD *)v237 + 32))
                {
                  v237 += 8;
                  if (v237 == v238)
                    goto LABEL_261;
                }
              }
              if (v237 == v238)
              {
LABEL_261:
                v239 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                v237 = v238;
                if (v239)
                  goto LABEL_262;
              }
              *(_DWORD *)(*(_QWORD *)v237 + 520) = 0;
              if (!--v54)
                break;
            }
LABEL_224:
            v48 += 4;
          }
          while (v48 != v220);
          v48 = v260;
        }
      }
      v3 = v245;
    }
    if (v48)
    {
      v261 = v48;
      operator delete(v48);
    }
    if (__p)
    {
      v259 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
LABEL_22:
  v17 = v3[6];
  v18 = v3[7];
  v19 = a2;
  if (v17 != v18)
  {
    v20 = v3 + 978;
    while (1)
    {
      if (0x86BCA1AF286BCA1BLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v17 + 984) - *(_QWORD *)(*(_QWORD *)v17 + 976)) >> 3) < v19)
      {
        v22 = *(_DWORD *)(*(_QWORD *)v17 + 32);
        v23 = (char *)v3[767];
        v24 = (char *)v3[768];
        if (v24 != v23)
        {
          v25 = (v24 - v23) >> 4;
          do
          {
            v26 = v25 >> 1;
            v27 = (unsigned int *)&v23[16 * (v25 >> 1)];
            v29 = *v27;
            v28 = (char *)(v27 + 4);
            v25 += ~(v25 >> 1);
            if (v29 < v22)
              v23 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        if (v23 != v24 && *(_DWORD *)v23 == v22)
        {
          v30 = sub_20FBCB53C(v250, v22);
          v31 = v30;
          if (v30)
          {
            *((_WORD *)v3 + 3914) = 0;
            *v20 = 0;
          }
          v32 = sub_20FBCB53C(v250, *(_DWORD *)(*(_QWORD *)v17 + 32) + 1);
          v19 = a2;
          if (!v32 || (*((_WORD *)v3 + 3914) = 0, *v20 = 0, (v31 & 1) == 0))
          {
            v21 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2413, (uint64_t)"ret", 3, (uint64_t)"Failed to remove end point variables.", 37, (void (*)(void **))sub_21023DDB0);
            v19 = a2;
            if (v21)
              break;
          }
        }
      }
      v17 += 8;
      if (v17 == v18)
        goto LABEL_40;
    }
LABEL_278:
    abort();
  }
LABEL_40:
  sub_20F8DE898(v250, 0);
  return kdebug_trace();
}

void sub_20FC49AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC49AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC49AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC49AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC49B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC49B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9AA8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC49B2C(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  char *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int *v158;
  char *v159;
  unsigned int v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  unint64_t v165;
  unint64_t v166;
  unsigned int *v167;
  char *v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int *v173;
  char *v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int *v179;
  char *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unsigned int v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int *v206;
  char *v207;
  unsigned int v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int *v215;
  char *v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unsigned int *v221;
  char *v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int *v227;
  char *v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  int64x2_t *v234;
  _BYTE *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  int v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v249;
  const char *v250;
  size_t v251;
  unsigned __int8 v252;
  const char *v253;
  size_t v254;
  _BYTE *v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  NSObject *v261;
  size_t v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  int v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  int v295;
  void *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  int64x2_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  unint64_t v312;
  char *v313;
  char *v314;
  char *v315;
  uint64_t v316;
  char *v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  char *v322;
  __int128 v323;
  __int128 v324;
  char *v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  char *v340;
  __int128 v344;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  char *v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  uint64_t v366;
  unint64_t v368;
  char *v369;
  unint64_t v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  __int128 v389;
  uint64_t v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  uint64_t v417;
  uint64_t v418;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  uint64_t v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  _QWORD *v434;
  char v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  __int128 v465;
  uint64_t v466;
  uint64_t v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  uint64_t v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  uint64_t v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  uint64_t v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  uint64_t v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  unint64_t v502;
  char *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  char *v516;
  unint64_t v517;
  char *v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  unint64_t v536;
  char *v537;
  uint64_t v538;
  char *v539;
  char *v540;
  char *v541;
  char *v542;
  char *v544;
  __int128 v545;
  __int128 v546;
  char *v547;
  __int128 v548;
  __int128 v549;
  uint64_t v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  char *v564;
  __int128 v566;
  char *v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  uint64_t v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  char *v581;
  char *v582;
  char *v583;
  char *v584;
  char *v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  unint64_t v595;
  char *v596;
  char *v597;
  char *v599;
  __int128 v600;
  __int128 v601;
  char *v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  uint64_t v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  uint64_t v615;
  char *v617;
  __int128 v621;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  uint64_t v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  char *v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  uint64_t v643;
  char *v645;
  uint64_t v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  unint64_t *v650;
  unint64_t v651;
  std::__shared_weak_count *v652;
  uint64_t v653;
  unint64_t *v654;
  __int128 v655;
  uint64_t v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  uint64_t v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  uint64_t v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  uint64_t v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  uint64_t v697;
  uint64_t v698;
  char *v699;
  uint64_t v700;
  unint64_t v701;
  char *v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  uint64_t v741;
  unint64_t *v742;
  unint64_t v743;
  unint64_t *v744;
  char *v747;
  char *v748;
  uint64_t v749;
  __int128 v750;
  uint64_t v751;
  unint64_t v752;
  char *v753;
  __int128 v754;
  uint64_t v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  uint64_t v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  uint64_t v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  uint64_t v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  uint64_t v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  uint64_t v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  uint64_t v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  uint64_t v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  uint64_t v787;
  __int128 v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  __int128 v792;
  unint64_t *v793;
  char *v795;
  __int128 v796;
  char *v797;
  __int128 v798;
  __int128 v799;
  unint64_t v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  unint64_t v810;
  unint64_t *v812;
  uint64_t v813;
  unint64_t *v814;
  char *v815;
  __int128 v818;
  unint64_t v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  unint64_t v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  unint64_t v846;
  unint64_t v847;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  unint64_t v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  unint64_t v862;
  _QWORD *v863;
  char v865;
  char *v866;
  unint64_t *v867;
  uint64_t v868;
  std::__shared_weak_count *v869;
  unint64_t *v870;
  unint64_t v871;
  unint64_t *v872;
  unint64_t v873;
  unsigned int v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  __int128 v903;
  __int128 v904;
  uint64_t v905;
  char v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  char v915;
  char v916;
  __int128 v917;
  __int128 v918;
  char v919;
  uint64_t v920;
  uint64_t v921;
  void *v922[2];
  void *v923[2];
  std::__shared_weak_count *v924;
  __int128 v925;
  __int128 v926;
  uint64_t v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  unint64_t *v933;
  uint64_t v934;
  void *v935[2];
  void *v936[2];
  uint64_t v937;
  char *v938;
  __int128 v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  char *v943;
  uint64_t v944;
  uint64_t v945;
  void *v946[2];
  char *v947;
  uint64_t v948;
  __int128 v949;
  char *v950;
  uint64_t v951;
  __int128 v952;
  uint64_t __srcc;
  uint64_t __src;
  void *__srca[2];
  char *__srcb;
  double v957;
  void *v958[2];
  uint64_t v959;
  unint64_t *v960;
  _QWORD *v961;
  double v962;
  uint64_t v963;
  _QWORD *v964;
  double v965;
  uint64_t v966;
  uint64_t v967;
  unint64_t *v968;
  unsigned int v969;
  std::__shared_weak_count *v970;
  uint64_t v971;
  char *v972;
  _QWORD *v973;
  char *v974;
  uint64_t v975;
  char *v976;
  _QWORD *v977;
  unint64_t *v978;
  _QWORD *v979;
  _BYTE *v980;
  int64x2_t *v981;
  uint64_t v982;
  char *v983;
  char *v984;
  _QWORD *v985;
  const char *v986;
  unint64_t *v987;
  _QWORD *v988;
  __int128 v989;
  std::__shared_weak_count *v990;
  uint64_t v991;
  char v992;
  __int128 v993;
  uint64_t v994;
  __int128 v995;
  uint64_t v996;
  __int128 v997;
  uint64_t v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  uint64_t v1002;
  __int128 v1003;
  uint64_t v1004;
  __int128 v1005;
  __int128 v1006;
  uint64_t v1007;
  _BYTE v1008[1856];
  _OWORD v1009[247];
  uint64_t v1010;
  char v1011;
  char v1012;
  _BYTE v1013[1800];
  uint64_t v1014;
  char v1015;
  __int16 v1016;
  __int128 v1017;
  __int128 v1018;
  uint64_t v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  uint64_t v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  uint64_t v1035;
  unint64_t v1036;
  char v1037;
  __int128 v1038;
  char v1039;
  _BYTE v1040[24];
  uint64_t v1041;
  _BYTE v1042[5696];
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  uint64_t v1050;
  char v1051;
  uint64_t (**v1052)();
  char v1053;
  _BYTE v1054[1800];
  uint64_t v1055;
  char v1056;
  __int16 v1057;
  __int128 v1058;
  __int128 v1059;
  uint64_t v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  uint64_t v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  uint64_t v1076;
  unint64_t v1077;
  char v1078;
  __int128 v1079;
  char v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  uint64_t v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  uint64_t v1096;
  _BYTE v1097[1800];
  _QWORD v1098[81];
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  uint64_t v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  uint64_t v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  uint64_t v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  uint64_t v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  uint64_t v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  uint64_t v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  uint64_t v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  uint64_t v1138;
  _OWORD v1139[113];
  _BYTE object[1888];
  _OWORD v1141[247];
  uint64_t v1142;
  char v1143;
  uint64_t (**v1144)();
  char v1145;
  _BYTE v1146[1800];
  uint64_t v1147;
  char v1148;
  __int16 v1149;
  __int128 v1150;
  __int128 v1151;
  uint64_t v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  uint64_t v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  uint64_t v1168;
  unint64_t v1169;
  char v1170;
  uint64_t v1171;
  std::__shared_weak_count *v1172;
  char v1173;
  _QWORD *v1174;
  uint64_t v1175;

  MEMORY[0x24BDAC7A8](a1);
  v6 = v5;
  v7 = v4;
  v8 = v2;
  v9 = v1;
  v11 = v10;
  v1175 = *MEMORY[0x24BDAC8D0];
  v12 = v10[1];
  v15 = *(uint64_t **)(v12 + 56);
  v13 = (uint64_t *)(v12 + 56);
  v14 = v15;
  if (v15)
  {
    v16 = v13;
    v17 = v13;
    v18 = v14;
    do
    {
      v19 = v18[4];
      if (v19 < v1)
      {
        ++v18;
      }
      else if (v19 == v1)
      {
        if (*((_DWORD *)v18 + 10) < v2)
          ++v18;
        else
          v17 = v18;
      }
      else
      {
        v17 = v18;
      }
      v18 = (uint64_t *)*v18;
    }
    while (v18);
    if (v17 == v13)
    {
      v21 = 0;
    }
    else
    {
      v20 = v17[4];
      if (v1 >= v20)
      {
        if (v1 == v20 && *((_DWORD *)v17 + 10) > v2)
          v21 = 0;
        else
          v21 = v17[6];
      }
      else
      {
        v21 = 0;
      }
    }
    do
    {
      v23 = v14[4];
      if (v23 < v3)
      {
        ++v14;
      }
      else if (v23 == v3)
      {
        if (*((_DWORD *)v14 + 10) < v4)
          ++v14;
        else
          v16 = v14;
      }
      else
      {
        v16 = v14;
      }
      v14 = (uint64_t *)*v14;
    }
    while (v14);
    if (v16 == v13 || (v24 = v16[4], v3 < v24) || v3 == v24 && *((_DWORD *)v16 + 10) > v4)
    {
      v22 = 0;
    }
    else
    {
      v22 = v16[6];
      if (v21 && v22)
        goto LABEL_32;
    }
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 594, (uint64_t)"curr_state && prev_state", 24, (uint64_t)"[VIOBABase]: Cannot find the state IDs.", 39, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_32:
  v980 = v11 + 845;
  v25 = v11 + 63;
  v982 = v8;
  v985 = v11;
  v981 = (int64x2_t *)(v11 + 63);
  if (*((_BYTE *)v11 + 2148))
  {
    v26 = (uint64_t *)v11[17];
    if (v26)
    {
      v28 = *v26;
      v27 = v26[1];
      if (v27 != v28)
      {
        v29 = 0x80BFA02FE80BFA03 * ((v27 - v28) >> 4);
        do
        {
          v30 = v29 >> 1;
          v31 = v28 + 2736 * (v29 >> 1);
          if (*(_QWORD *)v31 < v9 || *(_QWORD *)v31 == v9 && *(_DWORD *)(v31 + 8) < v8)
          {
            v28 = v31 + 2736;
            v30 = v29 + ~v30;
          }
          v29 = v30;
        }
        while (v30);
      }
      if (v28 != v27 && *(_QWORD *)v28 == v9 && *(_DWORD *)(v28 + 8) == v8)
      {
        v989 = 0uLL;
        if (*((_BYTE *)v11 + 1317))
        {
          v32 = *v25;
          if (!*v25)
          {
            __asm { FMOV            V0.2D, #1.0 }
            *(_OWORD *)&object[72] = _Q0;
            *(_OWORD *)&object[88] = _Q0;
            *(_OWORD *)&object[104] = _Q0;
            *(double *)object = *((double *)v11 + 166) * *((double *)v11 + 166);
            *(_QWORD *)&object[8] = *(_QWORD *)object;
            *(_QWORD *)&object[16] = *(_QWORD *)object;
            *(_QWORD *)&object[24] = *(_QWORD *)object;
            *(_QWORD *)&object[32] = *(_QWORD *)object;
            *(_QWORD *)&object[40] = *(_QWORD *)object;
            *(double *)&object[48] = *((double *)v11 + 165) * *((double *)v11 + 165);
            *(_QWORD *)&object[56] = *(_QWORD *)&object[48];
            *(_QWORD *)&object[64] = *(_QWORD *)&object[48];
            LODWORD(v1006) = 0;
            sub_20F61C5D4((double *)object, (unsigned int *)&v1006, v1040);
            v37 = *(_OWORD *)v1040;
            *(_OWORD *)v1040 = 0uLL;
            v38 = (std::__shared_weak_count *)v11[64];
            *(_OWORD *)v25 = v37;
            if (v38)
            {
              p_shared_owners = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(p_shared_owners);
              while (__stlxr(v40 - 1, p_shared_owners));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v41 = *(std::__shared_weak_count **)&v1040[8];
            if (*(_QWORD *)&v1040[8])
            {
              v42 = (unint64_t *)(*(_QWORD *)&v1040[8] + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v32 = *v25;
          }
          v44 = v11[64];
          if (v44)
          {
            v45 = (unint64_t *)(v44 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          *(_QWORD *)&v989 = v32;
          *((_QWORD *)&v989 + 1) = v44;
        }
        v874 = *(_DWORD *)(v28 + 40);
        v969 = *(_DWORD *)(v28 + 24);
        if (*((_QWORD *)&v989 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v989 + 1) + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        v962 = *(double *)(v28 + 2720);
        v965 = *(double *)(v28 + 2728);
        *(_QWORD *)&v1006 = v982;
        v957 = *(double *)(v28 + 1616);
        bzero(&object[8], 0x6F8uLL);
        *(_QWORD *)object = 0x3FF0000000000000;
        *(_QWORD *)&object[128] = 0x3FF0000000000000;
        *(_QWORD *)&object[256] = 0x3FF0000000000000;
        *(_QWORD *)&object[384] = 0x3FF0000000000000;
        *(_QWORD *)&object[512] = 0x3FF0000000000000;
        *(_QWORD *)&object[640] = 0x3FF0000000000000;
        *(_QWORD *)&object[768] = 0x3FF0000000000000;
        *(_QWORD *)&object[896] = 0x3FF0000000000000;
        *(_QWORD *)&object[1024] = 0x3FF0000000000000;
        v951 = *(_QWORD *)(v28 + 2112);
        v939 = *(_OWORD *)(v28 + 2096);
        v49 = *(_OWORD *)(v28 + 2064);
        v925 = *(_OWORD *)(v28 + 2080);
        v948 = *(_QWORD *)(v28 + 2184);
        *(_OWORD *)v935 = *(_OWORD *)(v28 + 2168);
        *(_OWORD *)v923 = *(_OWORD *)(v28 + 2152);
        v50 = *(_OWORD *)(v28 + 2136);
        v51 = *(_OWORD *)(v28 + 2120);
        __srcc = *(_QWORD *)(v28 + 2256);
        v52 = *(_OWORD *)(v28 + 2224);
        v931 = *(_OWORD *)(v28 + 2240);
        v54 = *(_OWORD *)(v28 + 2192);
        v53 = *(_OWORD *)(v28 + 2208);
        v945 = *(_QWORD *)(v28 + 2328);
        v55 = *(_OWORD *)(v28 + 2264);
        v56 = *(_OWORD *)(v28 + 2312);
        v57 = *(_OWORD *)(v28 + 2296);
        v58 = *(_OWORD *)(v28 + 2280);
        v944 = *(_QWORD *)(v28 + 2400);
        v59 = *(_OWORD *)(v28 + 2368);
        v929 = *(_OWORD *)(v28 + 2384);
        v60 = *(_OWORD *)(v28 + 2336);
        v61 = *(_OWORD *)(v28 + 2352);
        v63 = *(_OWORD *)(v28 + 2440);
        v62 = *(_OWORD *)(v28 + 2456);
        v65 = *(_OWORD *)(v28 + 2408);
        v64 = *(_OWORD *)(v28 + 2424);
        v66 = *(_QWORD *)(v28 + 2472);
        v67 = *(_QWORD *)(v28 + 2544);
        v68 = *(_OWORD *)(v28 + 2512);
        v69 = *(_OWORD *)(v28 + 2528);
        v70 = *(_OWORD *)(v28 + 2480);
        v71 = *(_OWORD *)(v28 + 2496);
        v72 = *(_QWORD *)(v28 + 2616);
        v73 = *(_OWORD *)(v28 + 2584);
        v74 = *(_OWORD *)(v28 + 2600);
        v75 = *(_OWORD *)(v28 + 2552);
        v76 = *(_OWORD *)(v28 + 2568);
        v942 = *(_QWORD *)(v28 + 2688);
        v77 = *(_OWORD *)(v28 + 2656);
        v928 = *(_OWORD *)(v28 + 2672);
        v78 = *(_OWORD *)(v28 + 2624);
        v79 = *(_OWORD *)(v28 + 2640);
        *(_OWORD *)object = *(_OWORD *)(v28 + 2048);
        *(_OWORD *)&object[16] = v49;
        *(_OWORD *)&object[32] = v925;
        *(_OWORD *)&object[48] = v939;
        *(_OWORD *)&object[120] = v51;
        *(_OWORD *)&object[136] = v50;
        *(_OWORD *)&object[152] = *(_OWORD *)v923;
        *(_OWORD *)&object[168] = *(_OWORD *)v935;
        *(_QWORD *)&object[64] = v951;
        *(_QWORD *)&object[184] = v948;
        *(_OWORD *)&object[240] = v54;
        *(_OWORD *)&object[256] = v53;
        *(_OWORD *)&object[272] = v52;
        *(_OWORD *)&object[288] = v931;
        *(_OWORD *)&object[360] = v55;
        *(_OWORD *)&object[376] = v58;
        *(_OWORD *)&object[392] = v57;
        *(_OWORD *)&object[408] = v56;
        *(_QWORD *)&object[424] = v945;
        *(_OWORD *)&object[480] = v60;
        *(_OWORD *)&object[496] = v61;
        *(_OWORD *)&object[512] = v59;
        *(_OWORD *)&object[528] = v929;
        *(_QWORD *)&object[544] = v944;
        *(_OWORD *)&object[600] = v65;
        *(_OWORD *)&object[616] = v64;
        *(_OWORD *)&object[632] = v63;
        *(_OWORD *)&object[648] = v62;
        *(_QWORD *)&object[664] = v66;
        *(_OWORD *)&object[720] = v70;
        *(_OWORD *)&object[736] = v71;
        *(_OWORD *)&object[752] = v68;
        *(_OWORD *)&object[768] = v69;
        *(_QWORD *)&object[784] = v67;
        *(_OWORD *)&object[840] = v75;
        *(_OWORD *)&object[856] = v76;
        *(_OWORD *)&object[872] = v73;
        *(_OWORD *)&object[888] = v74;
        *(_QWORD *)&object[904] = v72;
        *(_OWORD *)&object[960] = v78;
        *(_OWORD *)&object[976] = v79;
        *(_OWORD *)&object[992] = v77;
        *(_OWORD *)&object[1008] = v928;
        *(_QWORD *)&object[1024] = v942;
        *(_QWORD *)&object[304] = __srcc;
        *(double *)&object[1152] = v962 * v962 * v957;
        *(double *)&object[1280] = *(double *)&object[1152];
        *(double *)&object[1408] = *(double *)&object[1152];
        *(double *)&object[1536] = v965 * v965 * v957;
        *(double *)&object[1664] = *(double *)&object[1536];
        *(double *)&object[1792] = *(double *)&object[1536];
        sub_20F61DEF0((float64x2_t *)object, (uint64_t)&v1007);
        *(_QWORD *)&v65 = vdupq_laneq_s64(*(int64x2_t *)&v1008[248], 1).u64[0];
        *((_QWORD *)&v65 + 1) = *(_QWORD *)&v1008[376];
        *(_QWORD *)&v80 = vdupq_laneq_s64(*(int64x2_t *)&v1008[488], 1).u64[0];
        *((_QWORD *)&v80 + 1) = *(_QWORD *)&v1008[616];
        *(_OWORD *)v958 = v80;
        *(_QWORD *)&v80 = vdupq_laneq_s64(*(int64x2_t *)&v1008[728], 1).u64[0];
        *((_QWORD *)&v80 + 1) = *(_QWORD *)&v1008[856];
        v949 = v80;
        *(_QWORD *)&v81 = vdupq_laneq_s64(*(int64x2_t *)&v1008[968], 1).u64[0];
        *((_QWORD *)&v81 + 1) = *(_QWORD *)&v1008[1096];
        *(_OWORD *)v936 = v81;
        *(_QWORD *)&v81 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1208], 1).u64[0];
        *((_QWORD *)&v81 + 1) = *(_QWORD *)&v1008[1336];
        v930 = v81;
        *(_QWORD *)&v81 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1448], 1).u64[0];
        *((_QWORD *)&v81 + 1) = *(_QWORD *)&v1008[1576];
        v918 = v81;
        *(_QWORD *)&v81 = vdupq_laneq_s64(*(int64x2_t *)&v1008[264], 1).u64[0];
        *((_QWORD *)&v81 + 1) = *(_QWORD *)&v1008[392];
        *(_OWORD *)v946 = v81;
        *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1008[504], 1).u64[0];
        *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1008[632];
        v932 = v82;
        *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1008[744], 1).u64[0];
        *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1008[872];
        *(_OWORD *)v922 = v82;
        *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1008[984], 1).u64[0];
        *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1008[1112];
        v914 = v82;
        *(_QWORD *)&v82 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1224], 1).u64[0];
        *((_QWORD *)&v82 + 1) = *(_QWORD *)&v1008[1352];
        v912 = v82;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1464], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[1592];
        v908 = v83;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[280], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[408];
        v926 = v83;
        *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1008[520], 1).u64[0];
        *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1008[648];
        v917 = v84;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[760], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[888];
        v911 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1000], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1128];
        v909 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1240], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[1368];
        v904 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1480], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1608];
        v900 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[296], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[424];
        v913 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[536], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[664];
        v910 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[776], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[904];
        v902 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1016], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1144];
        v899 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1256], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[1384];
        v895 = v83;
        *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1496], 1).u64[0];
        *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1008[1624];
        v893 = v84;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[312], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[440];
        v907 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[552], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[680];
        v903 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[792], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[920];
        v898 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1032], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1160];
        v894 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1272], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[1400];
        v890 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1512], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1640];
        v888 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[328], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[456];
        v901 = v83;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[568], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[696];
        v897 = v83;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[808], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[936];
        v892 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1048], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1176];
        v889 = v85;
        *(_QWORD *)&v84 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1288], 1).u64[0];
        *((_QWORD *)&v84 + 1) = *(_QWORD *)&v1008[1416];
        v887 = v84;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1528], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1656];
        v885 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[344], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[472];
        v896 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[584], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[712];
        v891 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[824], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[952];
        v886 = v83;
        *(_QWORD *)&v85 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1064], 1).u64[0];
        *((_QWORD *)&v85 + 1) = *(_QWORD *)&v1008[1192];
        v884 = v85;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1304], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[1432];
        v883 = v83;
        *(_QWORD *)&v83 = vdupq_laneq_s64(*(int64x2_t *)&v1008[1544], 1).u64[0];
        *((_QWORD *)&v83 + 1) = *(_QWORD *)&v1008[1672];
        v882 = v83;
        v86 = *(_QWORD *)(v28 + 64);
        *(_QWORD *)&v52 = *(_QWORD *)(v28 + 1616);
        *(_OWORD *)&v1008[1808] = *(_OWORD *)(v28 + 48);
        *(_QWORD *)&v1008[1824] = v86;
        v87 = *(_QWORD *)(v28 + 88);
        *(_OWORD *)&v1008[1832] = *(_OWORD *)(v28 + 72);
        *(_QWORD *)&v1008[1848] = v87;
        v88 = *(_OWORD *)(v28 + 112);
        v1009[0] = *(_OWORD *)(v28 + 96);
        v1009[1] = v88;
        v1009[2] = *(_OWORD *)(v28 + 128);
        v89 = *(_QWORD *)(v28 + 192);
        v90 = *(_OWORD *)(v28 + 144);
        v91 = *(_OWORD *)(v28 + 176);
        v1009[4] = *(_OWORD *)(v28 + 160);
        v1009[5] = v91;
        v1009[3] = v90;
        *(_QWORD *)&v1009[6] = v89;
        *(_OWORD *)((char *)&v1009[6] + 8) = *(_OWORD *)(v28 + 200);
        v92 = *(_QWORD *)(v28 + 264);
        v93 = *(_OWORD *)(v28 + 216);
        v94 = *(_OWORD *)(v28 + 232);
        *(_OWORD *)((char *)&v1009[9] + 8) = *(_OWORD *)(v28 + 248);
        *(_OWORD *)((char *)&v1009[8] + 8) = v94;
        *(_OWORD *)((char *)&v1009[7] + 8) = v93;
        *((_QWORD *)&v1009[10] + 1) = v92;
        v1009[11] = *(_OWORD *)(v28 + 272);
        v95 = *(_QWORD *)(v28 + 336);
        v96 = *(_OWORD *)(v28 + 288);
        v97 = *(_OWORD *)(v28 + 320);
        v1009[13] = *(_OWORD *)(v28 + 304);
        v1009[14] = v97;
        v1009[12] = v96;
        *(_QWORD *)&v1009[15] = v95;
        *(_OWORD *)((char *)&v1009[15] + 8) = *(_OWORD *)(v28 + 344);
        v98 = *(_QWORD *)(v28 + 408);
        v99 = *(_OWORD *)(v28 + 360);
        v100 = *(_OWORD *)(v28 + 376);
        *(_OWORD *)((char *)&v1009[18] + 8) = *(_OWORD *)(v28 + 392);
        *(_OWORD *)((char *)&v1009[17] + 8) = v100;
        *(_OWORD *)((char *)&v1009[16] + 8) = v99;
        *((_QWORD *)&v1009[19] + 1) = v98;
        v1009[20] = *(_OWORD *)(v28 + 416);
        v101 = *(_QWORD *)(v28 + 480);
        v102 = *(_OWORD *)(v28 + 432);
        v103 = *(_OWORD *)(v28 + 464);
        v1009[22] = *(_OWORD *)(v28 + 448);
        v1009[23] = v103;
        v1009[21] = v102;
        *(_QWORD *)&v1009[24] = v101;
        *(_OWORD *)((char *)&v1009[24] + 8) = *(_OWORD *)(v28 + 488);
        v104 = *(_QWORD *)(v28 + 552);
        v105 = *(_OWORD *)(v28 + 504);
        v106 = *(_OWORD *)(v28 + 520);
        *(_OWORD *)((char *)&v1009[27] + 8) = *(_OWORD *)(v28 + 536);
        *(_OWORD *)((char *)&v1009[26] + 8) = v106;
        *(_OWORD *)((char *)&v1009[25] + 8) = v105;
        *((_QWORD *)&v1009[28] + 1) = v104;
        v1009[29] = *(_OWORD *)(v28 + 560);
        v107 = *(_QWORD *)(v28 + 624);
        v108 = *(_OWORD *)(v28 + 576);
        v109 = *(_OWORD *)(v28 + 608);
        v1009[31] = *(_OWORD *)(v28 + 592);
        v1009[32] = v109;
        v1009[30] = v108;
        *(_QWORD *)&v1009[33] = v107;
        *(_OWORD *)((char *)&v1009[33] + 8) = *(_OWORD *)(v28 + 632);
        v110 = *(_QWORD *)(v28 + 696);
        v111 = *(_OWORD *)(v28 + 648);
        v112 = *(_OWORD *)(v28 + 664);
        *(_OWORD *)((char *)&v1009[36] + 8) = *(_OWORD *)(v28 + 680);
        *(_OWORD *)((char *)&v1009[35] + 8) = v112;
        *(_OWORD *)((char *)&v1009[34] + 8) = v111;
        *(_QWORD *)&v111 = *(_QWORD *)&v1008[120];
        *((_QWORD *)&v111 + 1) = *(_QWORD *)&v1008[240];
        v881 = v111;
        *(_QWORD *)&v111 = *(_QWORD *)&v1008[360];
        *((_QWORD *)&v111 + 1) = *(_QWORD *)&v1008[480];
        v880 = v111;
        *(_QWORD *)&v111 = *(_QWORD *)&v1008[600];
        *((_QWORD *)&v111 + 1) = *(_QWORD *)&v1008[720];
        v879 = v111;
        *(_QWORD *)&v111 = *(_QWORD *)&v1008[840];
        *((_QWORD *)&v111 + 1) = *(_QWORD *)&v1008[960];
        v878 = v111;
        *(_QWORD *)&v111 = *(_QWORD *)&v1008[1080];
        *((_QWORD *)&v111 + 1) = *(_QWORD *)&v1008[1200];
        v877 = v111;
        *(_QWORD *)&v111 = *(_QWORD *)&v1008[1320];
        *((_QWORD *)&v111 + 1) = *(_QWORD *)&v1008[1440];
        v876 = v111;
        *(_QWORD *)&v111 = *(_QWORD *)&v1008[1560];
        *((_QWORD *)&v111 + 1) = *(_QWORD *)&v1008[1680];
        v875 = v111;
        *((_QWORD *)&v1009[37] + 1) = v110;
        memcpy(&v1009[38], (const void *)(v28 + 704), 0x288uLL);
        v113 = *(_QWORD *)(v28 + 1368);
        *(_OWORD *)((char *)&v1009[78] + 8) = *(_OWORD *)(v28 + 1352);
        *((_QWORD *)&v1009[79] + 1) = v113;
        v114 = *(_QWORD *)(v28 + 1392);
        v1009[80] = *(_OWORD *)(v28 + 1376);
        *(int64x2_t *)((char *)&v1009[86] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1208], *(int64x2_t *)&v1008[1328]);
        *(int64x2_t *)((char *)&v1009[87] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1448], *(int64x2_t *)&v1008[1568]);
        *(int64x2_t *)((char *)&v1009[84] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[728], *(int64x2_t *)&v1008[848]);
        *(int64x2_t *)((char *)&v1009[85] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[968], *(int64x2_t *)&v1008[1088]);
        *(_QWORD *)&v1009[96] = *(_QWORD *)&v1008[1696];
        *((_QWORD *)&v1009[88] + 1) = *(_QWORD *)&v1008[1688];
        *(int64x2_t *)((char *)&v1009[82] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[248], *(int64x2_t *)&v1008[368]);
        *(int64x2_t *)((char *)&v1009[83] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[488], *(int64x2_t *)&v1008[608]);
        *(int64x2_t *)((char *)&v1009[81] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[8], *(int64x2_t *)&v1008[128]);
        v1009[95] = v918;
        v1009[94] = v930;
        v1009[93] = *(_OWORD *)v936;
        v1009[92] = v949;
        v1009[91] = *(_OWORD *)v958;
        v1009[90] = v65;
        v1009[89] = vzip2q_s64(*(int64x2_t *)&v1008[8], *(int64x2_t *)&v1008[128]);
        *(int64x2_t *)((char *)&v1009[101] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1224], *(int64x2_t *)&v1008[1344]);
        *(int64x2_t *)((char *)&v1009[102] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1464], *(int64x2_t *)&v1008[1584]);
        *(int64x2_t *)((char *)&v1009[99] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[744], *(int64x2_t *)&v1008[864]);
        *(int64x2_t *)((char *)&v1009[100] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[984], *(int64x2_t *)&v1008[1104]);
        *(_QWORD *)&v1009[111] = *(_QWORD *)&v1008[1712];
        *((_QWORD *)&v1009[103] + 1) = *(_QWORD *)&v1008[1704];
        *(int64x2_t *)((char *)&v1009[97] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[264], *(int64x2_t *)&v1008[384]);
        *(int64x2_t *)((char *)&v1009[98] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[504], *(int64x2_t *)&v1008[624]);
        *(int64x2_t *)((char *)&v1009[96] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[24], *(int64x2_t *)&v1008[144]);
        v1009[109] = v912;
        v1009[110] = v908;
        v1009[107] = *(_OWORD *)v922;
        v1009[108] = v914;
        v1009[105] = *(_OWORD *)v946;
        v1009[106] = v932;
        v1009[104] = vzip2q_s64(*(int64x2_t *)&v1008[24], *(int64x2_t *)&v1008[144]);
        *(int64x2_t *)((char *)&v1009[116] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1240], *(int64x2_t *)&v1008[1360]);
        *(int64x2_t *)((char *)&v1009[117] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1480], *(int64x2_t *)&v1008[1600]);
        *(int64x2_t *)((char *)&v1009[114] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[760], *(int64x2_t *)&v1008[880]);
        *(int64x2_t *)((char *)&v1009[115] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1000], *(int64x2_t *)&v1008[1120]);
        *(int64x2_t *)((char *)&v1009[112] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[280], *(int64x2_t *)&v1008[400]);
        *(int64x2_t *)((char *)&v1009[113] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[520], *(int64x2_t *)&v1008[640]);
        *(int64x2_t *)((char *)&v1009[111] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[40], *(int64x2_t *)&v1008[160]);
        *(_QWORD *)&v1009[126] = *(_QWORD *)&v1008[1728];
        *((_QWORD *)&v1009[118] + 1) = *(_QWORD *)&v1008[1720];
        v1009[124] = v904;
        v1009[125] = v900;
        v1009[122] = v911;
        v1009[123] = v909;
        v1009[120] = v926;
        v1009[121] = v917;
        v1009[119] = vzip2q_s64(*(int64x2_t *)&v1008[40], *(int64x2_t *)&v1008[160]);
        *(int64x2_t *)((char *)&v1009[131] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1256], *(int64x2_t *)&v1008[1376]);
        *(int64x2_t *)((char *)&v1009[132] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1496], *(int64x2_t *)&v1008[1616]);
        *(int64x2_t *)((char *)&v1009[129] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[776], *(int64x2_t *)&v1008[896]);
        *(int64x2_t *)((char *)&v1009[130] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1016], *(int64x2_t *)&v1008[1136]);
        *(int64x2_t *)((char *)&v1009[127] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[296], *(int64x2_t *)&v1008[416]);
        *(int64x2_t *)((char *)&v1009[128] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[536], *(int64x2_t *)&v1008[656]);
        *(int64x2_t *)((char *)&v1009[126] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[56], *(int64x2_t *)&v1008[176]);
        *(_QWORD *)&v1009[141] = *(_QWORD *)&v1008[1744];
        *((_QWORD *)&v1009[133] + 1) = *(_QWORD *)&v1008[1736];
        v1009[139] = v895;
        v1009[140] = v893;
        v1009[137] = v902;
        v1009[138] = v899;
        v1009[135] = v913;
        v1009[136] = v910;
        v1009[134] = vzip2q_s64(*(int64x2_t *)&v1008[56], *(int64x2_t *)&v1008[176]);
        *(int64x2_t *)((char *)&v1009[147] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1512], *(int64x2_t *)&v1008[1632]);
        *(int64x2_t *)((char *)&v1009[146] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1272], *(int64x2_t *)&v1008[1392]);
        *(int64x2_t *)((char *)&v1009[144] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[792], *(int64x2_t *)&v1008[912]);
        *(int64x2_t *)((char *)&v1009[145] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1032], *(int64x2_t *)&v1008[1152]);
        *(int64x2_t *)((char *)&v1009[142] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[312], *(int64x2_t *)&v1008[432]);
        *(int64x2_t *)((char *)&v1009[143] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[552], *(int64x2_t *)&v1008[672]);
        *(int64x2_t *)((char *)&v1009[141] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[72], *(int64x2_t *)&v1008[192]);
        *(_QWORD *)&v1009[156] = *(_QWORD *)&v1008[1760];
        *((_QWORD *)&v1009[148] + 1) = *(_QWORD *)&v1008[1752];
        v1009[154] = v890;
        v1009[155] = v888;
        v1009[152] = v898;
        v1009[153] = v894;
        v1009[150] = v907;
        v1009[151] = v903;
        v1009[149] = vzip2q_s64(*(int64x2_t *)&v1008[72], *(int64x2_t *)&v1008[192]);
        *(int64x2_t *)((char *)&v1009[162] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1528], *(int64x2_t *)&v1008[1648]);
        *(int64x2_t *)((char *)&v1009[161] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1288], *(int64x2_t *)&v1008[1408]);
        *(int64x2_t *)((char *)&v1009[160] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1048], *(int64x2_t *)&v1008[1168]);
        *(int64x2_t *)((char *)&v1009[159] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[808], *(int64x2_t *)&v1008[928]);
        *(int64x2_t *)((char *)&v1009[158] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[568], *(int64x2_t *)&v1008[688]);
        *(int64x2_t *)((char *)&v1009[157] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[328], *(int64x2_t *)&v1008[448]);
        *(int64x2_t *)((char *)&v1009[156] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[88], *(int64x2_t *)&v1008[208]);
        *(_QWORD *)&v1009[171] = *(_QWORD *)&v1008[1776];
        *((_QWORD *)&v1009[163] + 1) = *(_QWORD *)&v1008[1768];
        v1009[169] = v887;
        v1009[170] = v885;
        v1009[167] = v892;
        v1009[168] = v889;
        v1009[165] = v901;
        v1009[166] = v897;
        v1009[164] = vzip2q_s64(*(int64x2_t *)&v1008[88], *(int64x2_t *)&v1008[208]);
        *(int64x2_t *)((char *)&v1009[177] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1544], *(int64x2_t *)&v1008[1664]);
        *(int64x2_t *)((char *)&v1009[176] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1304], *(int64x2_t *)&v1008[1424]);
        *(int64x2_t *)((char *)&v1009[175] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[1064], *(int64x2_t *)&v1008[1184]);
        *(int64x2_t *)((char *)&v1009[174] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[824], *(int64x2_t *)&v1008[944]);
        *(int64x2_t *)((char *)&v1009[173] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[584], *(int64x2_t *)&v1008[704]);
        *(int64x2_t *)((char *)&v1009[172] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[344], *(int64x2_t *)&v1008[464]);
        *(int64x2_t *)((char *)&v1009[171] + 8) = vzip1q_s64(*(int64x2_t *)&v1008[104], *(int64x2_t *)&v1008[224]);
        *(_QWORD *)&v1009[186] = *(_QWORD *)&v1008[1792];
        *((_QWORD *)&v1009[178] + 1) = *(_QWORD *)&v1008[1784];
        v1009[184] = v883;
        v1009[185] = v882;
        v1009[182] = v886;
        v1009[183] = v884;
        v1009[180] = v896;
        v1009[181] = v891;
        v1009[179] = vzip2q_s64(*(int64x2_t *)&v1008[104], *(int64x2_t *)&v1008[224]);
        *((_QWORD *)&v1009[193] + 1) = *(_QWORD *)&v1008[1800];
        *(_OWORD *)((char *)&v1009[192] + 8) = v875;
        *(_OWORD *)((char *)&v1009[191] + 8) = v876;
        *(_OWORD *)((char *)&v1009[190] + 8) = v877;
        *(_OWORD *)((char *)&v1009[189] + 8) = v878;
        *(_OWORD *)((char *)&v1009[188] + 8) = v879;
        *(_QWORD *)&v1009[81] = v114;
        *(_OWORD *)((char *)&v1009[187] + 8) = v880;
        *(_OWORD *)((char *)&v1009[186] + 8) = v881;
        v115 = *(_OWORD *)(v28 + 2696);
        *(_QWORD *)&v1009[195] = *(_QWORD *)(v28 + 2712);
        v1009[194] = v115;
        *((_QWORD *)&v1009[195] + 1) = v52;
        v116 = (std::__shared_weak_count *)*((_QWORD *)&v989 + 1);
        if (*((_QWORD *)&v989 + 1))
        {
          v117 = (unint64_t *)(*((_QWORD *)&v989 + 1) + 8);
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
          v990 = (std::__shared_weak_count *)*((_QWORD *)&v989 + 1);
          do
            v119 = __ldxr(v117);
          while (__stxr(v119 + 1, v117));
          v120 = v1006;
          v121 = (unint64_t *)v11[797];
          v122 = (unint64_t *)v11[798];
          if (v121 != v122)
            goto LABEL_71;
        }
        else
        {
          v990 = 0;
          v120 = v1006;
          v121 = (unint64_t *)v11[797];
          v122 = (unint64_t *)v11[798];
          if (v121 != v122)
          {
LABEL_71:
            if (*(v122 - 667) >= v120)
            {
              v123 = 0x4515E08719B71393 * (v122 - v121);
              do
              {
                v124 = v123 >> 1;
                v125 = &v121[667 * (v123 >> 1)];
                v126 = *v125;
                v127 = v125 + 667;
                v123 += ~(v123 >> 1);
                if (v126 < v120)
                  v121 = v127;
                else
                  v123 = v124;
              }
              while (v123);
              if (v121 != v122)
              {
                v122 = v121;
                if (*v121 == v120)
                {
                  v128 = 0;
                  goto LABEL_252;
                }
              }
            }
LABEL_188:
            v933 = v122;
            v940 = v120;
            if (*((_QWORD *)&v989 + 1))
            {
              v195 = (unint64_t *)(*((_QWORD *)&v989 + 1) + 8);
              do
                v196 = __ldxr(v195);
              while (__stxr(v196 + 1, v195));
            }
            *(_OWORD *)v1040 = v1006;
            LOBYTE(v1041) = v1008[0];
            *(_QWORD *)&v1040[16] = &off_24CA00398;
            memcpy(v1042, &v1008[8], 0x708uLL);
            *(_OWORD *)&v1042[1800] = *(_OWORD *)&v1008[1808];
            *(_QWORD *)&v1042[1816] = *(_QWORD *)&v1008[1824];
            *(_OWORD *)&v1042[1824] = *(_OWORD *)&v1008[1832];
            *(_QWORD *)&v1042[1840] = *(_QWORD *)&v1008[1848];
            *(_OWORD *)&v1042[1848] = v1009[0];
            *(_OWORD *)&v1042[1864] = v1009[1];
            *(_OWORD *)&v1042[1912] = v1009[4];
            *(_OWORD *)&v1042[1928] = v1009[5];
            *(_OWORD *)&v1042[1880] = v1009[2];
            *(_OWORD *)&v1042[1896] = v1009[3];
            *(_QWORD *)&v1042[1944] = *(_QWORD *)&v1009[6];
            *(_QWORD *)&v1042[2016] = *((_QWORD *)&v1009[10] + 1);
            *(_OWORD *)&v1042[2000] = *(_OWORD *)((char *)&v1009[9] + 8);
            *(_OWORD *)&v1042[1984] = *(_OWORD *)((char *)&v1009[8] + 8);
            *(_OWORD *)&v1042[1968] = *(_OWORD *)((char *)&v1009[7] + 8);
            *(_OWORD *)&v1042[1952] = *(_OWORD *)((char *)&v1009[6] + 8);
            *(_OWORD *)&v1042[2056] = v1009[13];
            *(_OWORD *)&v1042[2072] = v1009[14];
            *(_OWORD *)&v1042[2024] = v1009[11];
            *(_OWORD *)&v1042[2040] = v1009[12];
            *(_QWORD *)&v1042[2088] = *(_QWORD *)&v1009[15];
            *(_OWORD *)&v1042[2096] = *(_OWORD *)((char *)&v1009[15] + 8);
            *(_QWORD *)&v1042[2160] = *((_QWORD *)&v1009[19] + 1);
            *(_OWORD *)&v1042[2144] = *(_OWORD *)((char *)&v1009[18] + 8);
            *(_OWORD *)&v1042[2128] = *(_OWORD *)((char *)&v1009[17] + 8);
            *(_OWORD *)&v1042[2112] = *(_OWORD *)((char *)&v1009[16] + 8);
            *(_OWORD *)&v1042[2200] = v1009[22];
            *(_OWORD *)&v1042[2216] = v1009[23];
            *(_OWORD *)&v1042[2168] = v1009[20];
            *(_OWORD *)&v1042[2184] = v1009[21];
            *(_QWORD *)&v1042[2232] = *(_QWORD *)&v1009[24];
            *(_OWORD *)&v1042[2240] = *(_OWORD *)((char *)&v1009[24] + 8);
            *(_QWORD *)&v1042[2304] = *((_QWORD *)&v1009[28] + 1);
            *(_OWORD *)&v1042[2288] = *(_OWORD *)((char *)&v1009[27] + 8);
            *(_OWORD *)&v1042[2272] = *(_OWORD *)((char *)&v1009[26] + 8);
            *(_OWORD *)&v1042[2256] = *(_OWORD *)((char *)&v1009[25] + 8);
            *(_OWORD *)&v1042[2344] = v1009[31];
            *(_OWORD *)&v1042[2360] = v1009[32];
            *(_OWORD *)&v1042[2312] = v1009[29];
            *(_OWORD *)&v1042[2328] = v1009[30];
            *(_QWORD *)&v1042[2376] = *(_QWORD *)&v1009[33];
            *(_OWORD *)&v1042[2384] = *(_OWORD *)((char *)&v1009[33] + 8);
            *(_QWORD *)&v1042[2448] = *((_QWORD *)&v1009[37] + 1);
            *(_OWORD *)&v1042[2432] = *(_OWORD *)((char *)&v1009[36] + 8);
            *(_OWORD *)&v1042[2416] = *(_OWORD *)((char *)&v1009[35] + 8);
            *(_OWORD *)&v1042[2400] = *(_OWORD *)((char *)&v1009[34] + 8);
            memcpy(&v1042[2456], &v1009[38], 0x288uLL);
            *(_OWORD *)&v1042[3104] = *(_OWORD *)((char *)&v1009[78] + 8);
            *(_QWORD *)&v1042[3120] = *((_QWORD *)&v1009[79] + 1);
            *(_OWORD *)&v1042[3128] = v1009[80];
            *(_QWORD *)&v1042[3144] = *(_QWORD *)&v1009[81];
            memcpy(&v1042[3152], (char *)&v1009[81] + 8, 0x708uLL);
            *(_OWORD *)&v1042[4952] = v1009[194];
            *(_OWORD *)&v1042[4968] = v1009[195];
            memset(&v1042[4984], 0, 32);
            *(_OWORD *)&v1042[5272] = v989;
            if (*((_QWORD *)&v989 + 1))
            {
              v197 = (unint64_t *)(*((_QWORD *)&v989 + 1) + 8);
              v198 = v969;
              do
                v199 = __ldxr(v197);
              while (__stxr(v199 + 1, v197));
              *(_QWORD *)&v1042[5256] = 0xBFF0000000000000;
              v1042[5264] = 0;
              v1042[5288] = 0;
              do
                v200 = __ldaxr(v197);
              while (__stlxr(v200 - 1, v197));
              if (!v200)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v989 + 1) + 16))(*((_QWORD *)&v989 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v989 + 1));
              }
            }
            else
            {
              *(_QWORD *)&v1042[5256] = 0xBFF0000000000000;
              v1042[5264] = 0;
              v1042[5288] = 0;
              v198 = v969;
            }
            v201 = (char *)v11[647];
            v202 = (char *)v11[648];
            v203 = v201;
            if (v202 != v201)
            {
              v204 = (v202 - v201) >> 4;
              v203 = (char *)v11[647];
              do
              {
                v205 = v204 >> 1;
                v206 = (unsigned int *)&v203[16 * (v204 >> 1)];
                v208 = *v206;
                v207 = (char *)(v206 + 4);
                v204 += ~(v204 >> 1);
                if (v208 < v198)
                  v203 = v207;
                else
                  v204 = v205;
              }
              while (v204);
            }
            if (v203 == v202 || *(_DWORD *)v203 != v198)
              goto LABEL_238;
            v209 = *((_QWORD *)v203 + 1);
            *(_QWORD *)&v1042[4984] = v209;
            ++*(_DWORD *)(*((_QWORD *)v203 + 1) + 8);
            v210 = (char *)v11[659];
            v211 = (char *)v11[660];
            v212 = v210;
            if (v211 != v210)
            {
              v213 = (v211 - v210) >> 4;
              v212 = (char *)v11[659];
              do
              {
                v214 = v213 >> 1;
                v215 = (unsigned int *)&v212[16 * (v213 >> 1)];
                v217 = *v215;
                v216 = (char *)(v215 + 4);
                v213 += ~(v213 >> 1);
                if (v217 < v198)
                  v212 = v216;
                else
                  v213 = v214;
              }
              while (v213);
            }
            if (v212 == v211 || *(_DWORD *)v212 != v198)
              goto LABEL_238;
            v218 = *((_QWORD *)v212 + 1);
            *(_QWORD *)&v1042[4992] = v218;
            ++*(_DWORD *)(*((_QWORD *)v212 + 1) + 8);
            if (v202 != v201)
            {
              v219 = (v202 - v201) >> 4;
              do
              {
                v220 = v219 >> 1;
                v221 = (unsigned int *)&v201[16 * (v219 >> 1)];
                v223 = *v221;
                v222 = (char *)(v221 + 4);
                v219 += ~(v219 >> 1);
                if (v223 < v874)
                  v201 = v222;
                else
                  v219 = v220;
              }
              while (v219);
            }
            if (v201 == v202 || *(_DWORD *)v201 != v874)
              goto LABEL_238;
            v224 = *((_QWORD *)v201 + 1);
            *(_QWORD *)&v1042[5000] = v224;
            ++*(_DWORD *)(*((_QWORD *)v201 + 1) + 8);
            if (v211 != v210)
            {
              v225 = (v211 - v210) >> 4;
              do
              {
                v226 = v225 >> 1;
                v227 = (unsigned int *)&v210[16 * (v225 >> 1)];
                v229 = *v227;
                v228 = (char *)(v227 + 4);
                v225 += ~(v225 >> 1);
                if (v229 < v874)
                  v210 = v228;
                else
                  v225 = v226;
              }
              while (v225);
            }
            if (v210 == v211 || *(_DWORD *)v210 != v874)
            {
LABEL_238:
              if (*(_QWORD *)&v1042[4984])
                --*(_DWORD *)(*(_QWORD *)&v1042[4984] + 8);
              if (*(_QWORD *)&v1042[4992])
                --*(_DWORD *)(*(_QWORD *)&v1042[4992] + 8);
              if (*(_QWORD *)&v1042[5000])
                --*(_DWORD *)(*(_QWORD *)&v1042[5000] + 8);
              v128 = 0;
              if (*(_QWORD *)&v1042[5008])
                --*(_DWORD *)(*(_QWORD *)&v1042[5008] + 8);
            }
            else
            {
              v230 = *((_QWORD *)v210 + 1);
              *(_QWORD *)&v1042[5008] = v230;
              ++*(_DWORD *)(*((_QWORD *)v210 + 1) + 8);
              if (*(_BYTE *)(v209 + 20) || *(_BYTE *)(v218 + 20) || *(_BYTE *)(v224 + 20) || *(_BYTE *)(v230 + 20))
              {
                *(_OWORD *)&object[8] = *(_OWORD *)v1040;
                v919 = v1041;
                object[32] = v1041;
                *(_QWORD *)object = v940;
                *(_QWORD *)&object[24] = &off_24CA00398;
                memcpy(&object[40], v1042, 0x708uLL);
                *(_OWORD *)&object[1840] = *(_OWORD *)&v1042[1800];
                *(_OWORD *)&object[1864] = *(_OWORD *)&v1042[1824];
                v1141[0] = *(_OWORD *)&v1042[1848];
                v1141[1] = *(_OWORD *)&v1042[1864];
                v1141[2] = *(_OWORD *)&v1042[1880];
                v1141[5] = *(_OWORD *)&v1042[1928];
                v1141[4] = *(_OWORD *)&v1042[1912];
                v1141[3] = *(_OWORD *)&v1042[1896];
                *(_OWORD *)((char *)&v1141[6] + 8) = *(_OWORD *)&v1042[1952];
                *(_OWORD *)((char *)&v1141[9] + 8) = *(_OWORD *)&v1042[2000];
                *(_OWORD *)((char *)&v1141[8] + 8) = *(_OWORD *)&v1042[1984];
                *(_OWORD *)((char *)&v1141[7] + 8) = *(_OWORD *)&v1042[1968];
                v1141[13] = *(_OWORD *)&v1042[2056];
                v1141[14] = *(_OWORD *)&v1042[2072];
                v1141[11] = *(_OWORD *)&v1042[2024];
                v1141[12] = *(_OWORD *)&v1042[2040];
                *(_OWORD *)((char *)&v1141[15] + 8) = *(_OWORD *)&v1042[2096];
                *(_OWORD *)((char *)&v1141[18] + 8) = *(_OWORD *)&v1042[2144];
                *(_OWORD *)((char *)&v1141[17] + 8) = *(_OWORD *)&v1042[2128];
                *(_OWORD *)((char *)&v1141[16] + 8) = *(_OWORD *)&v1042[2112];
                v1141[22] = *(_OWORD *)&v1042[2200];
                v1141[23] = *(_OWORD *)&v1042[2216];
                v1141[20] = *(_OWORD *)&v1042[2168];
                v1141[21] = *(_OWORD *)&v1042[2184];
                *(_OWORD *)((char *)&v1141[24] + 8) = *(_OWORD *)&v1042[2240];
                *(_OWORD *)((char *)&v1141[27] + 8) = *(_OWORD *)&v1042[2288];
                *(_OWORD *)((char *)&v1141[26] + 8) = *(_OWORD *)&v1042[2272];
                *(_OWORD *)((char *)&v1141[25] + 8) = *(_OWORD *)&v1042[2256];
                v1141[31] = *(_OWORD *)&v1042[2344];
                v1141[32] = *(_OWORD *)&v1042[2360];
                v1141[29] = *(_OWORD *)&v1042[2312];
                v1141[30] = *(_OWORD *)&v1042[2328];
                *(_OWORD *)((char *)&v1141[33] + 8) = *(_OWORD *)&v1042[2384];
                *(_OWORD *)((char *)&v1141[36] + 8) = *(_OWORD *)&v1042[2432];
                *(_OWORD *)((char *)&v1141[35] + 8) = *(_OWORD *)&v1042[2416];
                *(_QWORD *)&object[1856] = *(_QWORD *)&v1042[1816];
                *(_QWORD *)&object[1880] = *(_QWORD *)&v1042[1840];
                *(_QWORD *)&v1141[6] = *(_QWORD *)&v1042[1944];
                *((_QWORD *)&v1141[10] + 1) = *(_QWORD *)&v1042[2016];
                *(_QWORD *)&v1141[15] = *(_QWORD *)&v1042[2088];
                *((_QWORD *)&v1141[19] + 1) = *(_QWORD *)&v1042[2160];
                *(_QWORD *)&v1141[24] = *(_QWORD *)&v1042[2232];
                *((_QWORD *)&v1141[28] + 1) = *(_QWORD *)&v1042[2304];
                *(_QWORD *)&v1141[33] = *(_QWORD *)&v1042[2376];
                *((_QWORD *)&v1141[37] + 1) = *(_QWORD *)&v1042[2448];
                *(_OWORD *)((char *)&v1141[34] + 8) = *(_OWORD *)&v1042[2400];
                memcpy(&v1141[38], &v1042[2456], 0x288uLL);
                *(_OWORD *)((char *)&v1141[78] + 8) = *(_OWORD *)&v1042[3104];
                *((_QWORD *)&v1141[79] + 1) = *(_QWORD *)&v1042[3120];
                v1141[80] = *(_OWORD *)&v1042[3128];
                *(_QWORD *)&v1141[81] = *(_QWORD *)&v1042[3144];
                memcpy((char *)&v1141[81] + 8, &v1042[3152], 0x708uLL);
                v1141[194] = *(_OWORD *)&v1042[4952];
                v1141[195] = *(_OWORD *)&v1042[4968];
                v1141[196] = *(_OWORD *)&v1042[4984];
                v1141[197] = *(_OWORD *)&v1042[5000];
                *(_QWORD *)&v1141[205] = *(_QWORD *)&v1042[5128];
                v1141[204] = *(_OWORD *)&v1042[5112];
                v1141[203] = *(_OWORD *)&v1042[5096];
                v1141[202] = *(_OWORD *)&v1042[5080];
                v1141[201] = *(_OWORD *)&v1042[5064];
                v1141[200] = *(_OWORD *)&v1042[5048];
                v1141[199] = *(_OWORD *)&v1042[5032];
                v1141[198] = *(_OWORD *)&v1042[5016];
                *(_OWORD *)((char *)&v1141[208] + 8) = *(_OWORD *)&v1042[5184];
                *(_OWORD *)((char *)&v1141[207] + 8) = *(_OWORD *)&v1042[5168];
                *(_OWORD *)((char *)&v1141[206] + 8) = *(_OWORD *)&v1042[5152];
                *(_OWORD *)((char *)&v1141[205] + 8) = *(_OWORD *)&v1042[5136];
                *(_OWORD *)((char *)&v1141[211] + 8) = *(_OWORD *)&v1042[5232];
                *(_OWORD *)((char *)&v1141[210] + 8) = *(_OWORD *)&v1042[5216];
                *(_OWORD *)((char *)&v1141[209] + 8) = *(_OWORD *)&v1042[5200];
                *((_QWORD *)&v1141[212] + 1) = *(_QWORD *)&v1042[5248];
                BYTE8(v1141[213]) = v1042[5264];
                *(_QWORD *)&v1141[213] = *(_QWORD *)&v1042[5256];
                v231 = *(_QWORD *)&v1042[5272];
                v1141[214] = *(_OWORD *)&v1042[5272];
                v232 = *(std::__shared_weak_count **)&v1042[5280];
                *(_OWORD *)&v1042[5272] = 0uLL;
                LOBYTE(v1141[215]) = v1042[5288];
                v233 = (unint64_t *)v11[798];
                if (v233 == v933 || *v933 != v940)
                {
                  v373 = v11[797];
                  v374 = (uint64_t)v933 - v373;
                  v927 = ((uint64_t)v933 - v373) / 5336;
                  v375 = (unint64_t *)(v373 + 5336 * v927);
                  v376 = v11[799];
                  if ((unint64_t)v233 >= v376)
                  {
                    v514 = 0x4515E08719B71393 * (((uint64_t)v233 - v373) >> 3) + 1;
                    if (v514 > 0xC4827EA81BA25)
                      sub_20E867F44();
                    v960 = (unint64_t *)v11[797];
                    if (0x8A2BC10E336E2726 * ((uint64_t)(v376 - v373) >> 3) > v514)
                      v514 = 0x8A2BC10E336E2726 * ((uint64_t)(v376 - v373) >> 3);
                    if ((unint64_t)(0x4515E08719B71393 * ((uint64_t)(v376 - v373) >> 3)) >= 0x62413F540DD12)
                      v515 = 0xC4827EA81BA25;
                    else
                      v515 = v514;
                    *(_QWORD *)&v1139[2] = v11 + 799;
                    if (v515)
                    {
                      if (v515 > 0xC4827EA81BA25)
                        sub_20E877A38();
                      v516 = (char *)operator new(5336 * v515);
                    }
                    else
                    {
                      v516 = 0;
                    }
                    v698 = v927;
                    v699 = &v516[5336 * v927];
                    *(_QWORD *)&v1139[0] = v516;
                    *((_QWORD *)&v1139[0] + 1) = v699;
                    *(_QWORD *)&v1139[1] = v699;
                    *((_QWORD *)&v1139[1] + 1) = &v516[5336 * v515];
                    if (v927 == v515)
                    {
                      if (v374 < 1)
                      {
                        if (v960 == v933)
                          v701 = 1;
                        else
                          v701 = 2 * v927;
                        if (v701 > 0xC4827EA81BA25)
                          sub_20E877A38();
                        v702 = (char *)operator new(5336 * v701);
                        v699 = &v702[5336 * (v701 >> 2)];
                        *(_QWORD *)&v1139[0] = v702;
                        *((_QWORD *)&v1139[0] + 1) = v699;
                        *((_QWORD *)&v1139[1] + 1) = &v702[5336 * v701];
                        if (v516)
                          operator delete(v516);
                        v698 = v927;
                      }
                      else
                      {
                        v700 = v927 + 2;
                        if (v927 >= -1)
                          v700 = v927 + 1;
                        v699 -= 5336 * (v700 >> 1);
                        *((_QWORD *)&v1139[0] + 1) = v699;
                      }
                    }
                    *(_QWORD *)v699 = v940;
                    *(_OWORD *)(v699 + 8) = *(_OWORD *)v1040;
                    v699[32] = object[32];
                    *((_QWORD *)v699 + 3) = &off_24CA00398;
                    memcpy(v699 + 40, &object[40], 0x708uLL);
                    *((_QWORD *)v699 + 232) = *(_QWORD *)&object[1856];
                    *((_OWORD *)v699 + 115) = *(_OWORD *)&object[1840];
                    *((_QWORD *)v699 + 235) = *(_QWORD *)&object[1880];
                    *(_OWORD *)(v699 + 1864) = *(_OWORD *)&object[1864];
                    v703 = v1141[1];
                    *((_OWORD *)v699 + 118) = v1141[0];
                    *((_OWORD *)v699 + 119) = v703;
                    v704 = v1141[3];
                    *((_OWORD *)v699 + 120) = v1141[2];
                    v705 = v1141[4];
                    v706 = v1141[5];
                    *((_QWORD *)v699 + 248) = *(_QWORD *)&v1141[6];
                    *((_OWORD *)v699 + 123) = v706;
                    *((_OWORD *)v699 + 122) = v705;
                    *((_OWORD *)v699 + 121) = v704;
                    v707 = *(_OWORD *)((char *)&v1141[7] + 8);
                    *(_OWORD *)(v699 + 1992) = *(_OWORD *)((char *)&v1141[6] + 8);
                    v708 = *(_OWORD *)((char *)&v1141[8] + 8);
                    v709 = *(_OWORD *)((char *)&v1141[9] + 8);
                    *((_QWORD *)v699 + 257) = *((_QWORD *)&v1141[10] + 1);
                    *(_OWORD *)(v699 + 2040) = v709;
                    *(_OWORD *)(v699 + 2024) = v708;
                    *(_OWORD *)(v699 + 2008) = v707;
                    v710 = v1141[12];
                    *((_OWORD *)v699 + 129) = v1141[11];
                    v711 = v1141[13];
                    v712 = v1141[14];
                    *((_QWORD *)v699 + 266) = *(_QWORD *)&v1141[15];
                    *((_OWORD *)v699 + 132) = v712;
                    *((_OWORD *)v699 + 131) = v711;
                    *((_OWORD *)v699 + 130) = v710;
                    v713 = *(_OWORD *)((char *)&v1141[16] + 8);
                    *(_OWORD *)(v699 + 2136) = *(_OWORD *)((char *)&v1141[15] + 8);
                    v714 = *(_OWORD *)((char *)&v1141[17] + 8);
                    v715 = *(_OWORD *)((char *)&v1141[18] + 8);
                    *((_QWORD *)v699 + 275) = *((_QWORD *)&v1141[19] + 1);
                    *(_OWORD *)(v699 + 2184) = v715;
                    *(_OWORD *)(v699 + 2168) = v714;
                    *(_OWORD *)(v699 + 2152) = v713;
                    v716 = v1141[21];
                    *((_OWORD *)v699 + 138) = v1141[20];
                    v717 = v1141[22];
                    v718 = v1141[23];
                    *((_QWORD *)v699 + 284) = *(_QWORD *)&v1141[24];
                    *((_OWORD *)v699 + 141) = v718;
                    *((_OWORD *)v699 + 140) = v717;
                    *((_OWORD *)v699 + 139) = v716;
                    v719 = *(_OWORD *)((char *)&v1141[25] + 8);
                    *(_OWORD *)(v699 + 2280) = *(_OWORD *)((char *)&v1141[24] + 8);
                    v720 = *(_OWORD *)((char *)&v1141[26] + 8);
                    v721 = *(_OWORD *)((char *)&v1141[27] + 8);
                    *((_QWORD *)v699 + 293) = *((_QWORD *)&v1141[28] + 1);
                    *(_OWORD *)(v699 + 2328) = v721;
                    *(_OWORD *)(v699 + 2312) = v720;
                    *(_OWORD *)(v699 + 2296) = v719;
                    v722 = v1141[30];
                    *((_OWORD *)v699 + 147) = v1141[29];
                    v723 = v1141[31];
                    v724 = v1141[32];
                    *((_QWORD *)v699 + 302) = *(_QWORD *)&v1141[33];
                    *((_OWORD *)v699 + 150) = v724;
                    *((_OWORD *)v699 + 149) = v723;
                    *((_OWORD *)v699 + 148) = v722;
                    v725 = *(_OWORD *)((char *)&v1141[34] + 8);
                    *(_OWORD *)(v699 + 2424) = *(_OWORD *)((char *)&v1141[33] + 8);
                    v726 = *(_OWORD *)((char *)&v1141[35] + 8);
                    v727 = *(_OWORD *)((char *)&v1141[36] + 8);
                    *((_QWORD *)v699 + 311) = *((_QWORD *)&v1141[37] + 1);
                    *(_OWORD *)(v699 + 2472) = v727;
                    *(_OWORD *)(v699 + 2456) = v726;
                    *(_OWORD *)(v699 + 2440) = v725;
                    memcpy(v699 + 2496, &v1141[38], 0x288uLL);
                    *(_OWORD *)(v699 + 3144) = *(_OWORD *)((char *)&v1141[78] + 8);
                    *((_QWORD *)v699 + 395) = *((_QWORD *)&v1141[79] + 1);
                    *((_OWORD *)v699 + 198) = v1141[80];
                    *((_QWORD *)v699 + 398) = *(_QWORD *)&v1141[81];
                    memcpy(v699 + 3192, (char *)&v1141[81] + 8, 0x708uLL);
                    *((_QWORD *)v699 + 626) = *(_QWORD *)&v1141[195];
                    *((_OWORD *)v699 + 312) = v1141[194];
                    *((_QWORD *)v699 + 627) = *((_QWORD *)&v1141[195] + 1);
                    v728 = v1141[197];
                    *((_OWORD *)v699 + 314) = v1141[196];
                    *((_OWORD *)v699 + 315) = v728;
                    v729 = v1141[198];
                    v730 = v1141[199];
                    v731 = v1141[200];
                    *((_OWORD *)v699 + 319) = v1141[201];
                    *((_OWORD *)v699 + 318) = v731;
                    *((_OWORD *)v699 + 317) = v730;
                    *((_OWORD *)v699 + 316) = v729;
                    v732 = v1141[202];
                    v733 = v1141[203];
                    v734 = v1141[204];
                    *((_QWORD *)v699 + 646) = *(_QWORD *)&v1141[205];
                    *((_OWORD *)v699 + 322) = v734;
                    *((_OWORD *)v699 + 321) = v733;
                    *((_OWORD *)v699 + 320) = v732;
                    v735 = *(_OWORD *)((char *)&v1141[205] + 8);
                    v736 = *(_OWORD *)((char *)&v1141[206] + 8);
                    v737 = *(_OWORD *)((char *)&v1141[207] + 8);
                    *(_OWORD *)(v699 + 5224) = *(_OWORD *)((char *)&v1141[208] + 8);
                    *(_OWORD *)(v699 + 5208) = v737;
                    *(_OWORD *)(v699 + 5192) = v736;
                    *(_OWORD *)(v699 + 5176) = v735;
                    v738 = *(_OWORD *)((char *)&v1141[209] + 8);
                    v739 = *(_OWORD *)((char *)&v1141[210] + 8);
                    v740 = *(_OWORD *)((char *)&v1141[211] + 8);
                    *((_QWORD *)v699 + 661) = *((_QWORD *)&v1141[212] + 1);
                    *(_OWORD *)(v699 + 5272) = v740;
                    *(_OWORD *)(v699 + 5256) = v739;
                    *(_OWORD *)(v699 + 5240) = v738;
                    v741 = *(_QWORD *)&v1141[213];
                    v699[5304] = BYTE8(v1141[213]);
                    *((_QWORD *)v699 + 662) = v741;
                    *((_OWORD *)v699 + 332) = v1141[214];
                    v699[5328] = v1141[215];
                    v1141[214] = 0uLL;
                    *(_QWORD *)&v1139[1] = v699 + 5336;
                    v742 = (unint64_t *)v11[797];
                    __srcb = v699 + 5336;
                    if (v742 != v375)
                    {
                      v743 = 0;
                      v744 = &v960[667 * v698];
                      v987 = v744 - 667;
                      v978 = v744 - 1334;
                      v968 = v744 - 663;
                      do
                      {
                        _X25 = &v978[v743];
                        __asm { PRFM            #0, [X25] }
                        *(_QWORD *)&v699[v743 * 8 - 5336] = v987[v743];
                        v747 = &v699[v743 * 8 - 5296];
                        *((_OWORD *)v747 - 2) = *(_OWORD *)&v978[v743 + 668];
                        v699[v743 * 8 - 5304] = v968[v743];
                        *((_QWORD *)v747 - 2) = &off_24CA00398;
                        memcpy(v747, &v978[v743 + 672], 0x708uLL);
                        v748 = &v699[v743 * 8];
                        v749 = (uint64_t)&v699[v743 * 8 - 3496];
                        v750 = *(_OWORD *)&v978[v743 + 897];
                        *(_QWORD *)(v749 + 16) = v978[v743 + 899];
                        *(_OWORD *)v749 = v750;
                        v751 = (uint64_t)&v699[v743 * 8 - 3472];
                        v752 = v978[v743 + 902];
                        *(_OWORD *)v751 = *(_OWORD *)&v978[v743 + 900];
                        *(_QWORD *)(v751 + 16) = v752;
                        v753 = &v699[v743 * 8 - 3448];
                        v754 = *(_OWORD *)&v978[v743 + 905];
                        *(_OWORD *)v753 = *(_OWORD *)&v978[v743 + 903];
                        *((_OWORD *)v753 + 1) = v754;
                        v755 = (uint64_t)&v699[v743 * 8 - 3416];
                        *(_OWORD *)v755 = *(_OWORD *)&v978[v743 + 907];
                        v757 = *(_OWORD *)&v978[v743 + 911];
                        v756 = *(_OWORD *)&v978[v743 + 913];
                        v758 = *(_OWORD *)&v978[v743 + 909];
                        *(_QWORD *)(v755 + 64) = v978[v743 + 915];
                        *(_OWORD *)(v755 + 32) = v757;
                        *(_OWORD *)(v755 + 48) = v756;
                        *(_OWORD *)(v755 + 16) = v758;
                        v759 = (uint64_t)&v699[v743 * 8 - 3344];
                        v760 = *(_OWORD *)&v978[v743 + 920];
                        v761 = *(_OWORD *)&v978[v743 + 922];
                        v762 = *(_OWORD *)&v978[v743 + 918];
                        *(_QWORD *)(v759 + 64) = v978[v743 + 924];
                        *(_OWORD *)(v759 + 32) = v760;
                        *(_OWORD *)(v759 + 48) = v761;
                        *(_OWORD *)(v759 + 16) = v762;
                        *(_OWORD *)v759 = *(_OWORD *)&v978[v743 + 916];
                        v763 = (uint64_t)&v699[v743 * 8 - 3272];
                        v764 = *(_OWORD *)&v978[v743 + 927];
                        v765 = *(_OWORD *)&v978[v743 + 929];
                        v766 = *(_OWORD *)&v978[v743 + 931];
                        *(_QWORD *)(v763 + 64) = v978[v743 + 933];
                        *(_OWORD *)(v763 + 32) = v765;
                        *(_OWORD *)(v763 + 48) = v766;
                        *(_OWORD *)(v763 + 16) = v764;
                        *(_OWORD *)v763 = *(_OWORD *)&v978[v743 + 925];
                        v767 = (uint64_t)&v699[v743 * 8 - 3200];
                        v768 = *(_OWORD *)&v978[v743 + 936];
                        v769 = *(_OWORD *)&v978[v743 + 938];
                        v770 = *(_OWORD *)&v978[v743 + 940];
                        *(_QWORD *)(v767 + 64) = v978[v743 + 942];
                        *(_OWORD *)(v767 + 32) = v769;
                        *(_OWORD *)(v767 + 48) = v770;
                        *(_OWORD *)(v767 + 16) = v768;
                        *(_OWORD *)v767 = *(_OWORD *)&v978[v743 + 934];
                        v771 = (uint64_t)&v699[v743 * 8 - 3128];
                        v772 = *(_OWORD *)&v978[v743 + 945];
                        v773 = *(_OWORD *)&v978[v743 + 947];
                        v774 = *(_OWORD *)&v978[v743 + 949];
                        *(_QWORD *)(v771 + 64) = v978[v743 + 951];
                        *(_OWORD *)(v771 + 32) = v773;
                        *(_OWORD *)(v771 + 48) = v774;
                        *(_OWORD *)(v771 + 16) = v772;
                        *(_OWORD *)v771 = *(_OWORD *)&v978[v743 + 943];
                        v775 = (uint64_t)&v699[v743 * 8 - 3056];
                        v776 = *(_OWORD *)&v978[v743 + 954];
                        v777 = *(_OWORD *)&v978[v743 + 956];
                        v778 = *(_OWORD *)&v978[v743 + 958];
                        *(_QWORD *)(v775 + 64) = v978[v743 + 960];
                        *(_OWORD *)(v775 + 32) = v777;
                        *(_OWORD *)(v775 + 48) = v778;
                        *(_OWORD *)(v775 + 16) = v776;
                        *(_OWORD *)v775 = *(_OWORD *)&v978[v743 + 952];
                        v779 = (uint64_t)&v699[v743 * 8 - 2984];
                        v780 = *(_OWORD *)&v978[v743 + 963];
                        v781 = *(_OWORD *)&v978[v743 + 965];
                        v782 = *(_OWORD *)&v978[v743 + 967];
                        *(_QWORD *)(v779 + 64) = v978[v743 + 969];
                        *(_OWORD *)(v779 + 32) = v781;
                        *(_OWORD *)(v779 + 48) = v782;
                        *(_OWORD *)(v779 + 16) = v780;
                        *(_OWORD *)v779 = *(_OWORD *)&v978[v743 + 961];
                        v783 = (uint64_t)&v699[v743 * 8 - 2912];
                        v784 = *(_OWORD *)&v978[v743 + 972];
                        v785 = *(_OWORD *)&v978[v743 + 974];
                        v786 = *(_OWORD *)&v978[v743 + 976];
                        *(_QWORD *)(v783 + 64) = v978[v743 + 978];
                        *(_OWORD *)(v783 + 32) = v785;
                        *(_OWORD *)(v783 + 48) = v786;
                        *(_OWORD *)(v783 + 16) = v784;
                        *(_OWORD *)v783 = *(_OWORD *)&v978[v743 + 970];
                        memcpy(&v699[v743 * 8 - 2840], &v978[v743 + 979], 0x288uLL);
                        v787 = (uint64_t)&v699[v743 * 8 - 2192];
                        v788 = *(_OWORD *)&v978[v743 + 1060];
                        *(_QWORD *)(v787 + 16) = v978[v743 + 1062];
                        *(_OWORD *)v787 = v788;
                        v789 = (uint64_t)&v699[v743 * 8 - 2168];
                        v790 = v978[v743 + 1065];
                        *(_OWORD *)v789 = *(_OWORD *)&v978[v743 + 1063];
                        *(_QWORD *)(v789 + 16) = v790;
                        memcpy(&v699[v743 * 8 - 2144], &v978[v743 + 1066], 0x708uLL);
                        v791 = (uint64_t)&v699[v743 * 8 - 344];
                        v792 = *(_OWORD *)&v978[v743 + 1291];
                        *(_QWORD *)(v791 + 16) = v978[v743 + 1293];
                        *(_OWORD *)v791 = v792;
                        v793 = &v375[v743];
                        __asm { PRFM            #0, [X25,#0x1398] }
                        v795 = &v699[v743 * 8 - 312];
                        *((_QWORD *)v748 - 40) = v375[v743 - 40];
                        v796 = *(_OWORD *)&v978[v743 + 1297];
                        v797 = &v699[v743 * 8 - 280];
                        *(_OWORD *)v795 = *(_OWORD *)&v978[v743 + 1295];
                        *((_OWORD *)v795 + 1) = v796;
                        v799 = *(_OWORD *)&v978[v743 + 1309];
                        v798 = *(_OWORD *)&v978[v743 + 1311];
                        v800 = v978[v743 + 1313];
                        *(_OWORD *)(v748 - 216) = *(_OWORD *)&v978[v743 + 1307];
                        *((_QWORD *)v748 - 21) = v800;
                        *(_OWORD *)(v748 - 184) = v798;
                        *(_OWORD *)(v748 - 200) = v799;
                        v801 = *(_OWORD *)&v978[v743 + 1299];
                        v802 = *(_OWORD *)&v978[v743 + 1301];
                        v803 = *(_OWORD *)&v978[v743 + 1303];
                        *(_OWORD *)(v748 - 232) = *(_OWORD *)&v978[v743 + 1305];
                        *(_OWORD *)(v748 - 248) = v803;
                        *(_OWORD *)v797 = v801;
                        *((_OWORD *)v797 + 1) = v802;
                        v804 = *(_OWORD *)&v978[v743 + 1324];
                        v805 = *(_OWORD *)&v978[v743 + 1326];
                        v806 = *(_OWORD *)&v978[v743 + 1322];
                        *((_QWORD *)v748 - 6) = v978[v743 + 1328];
                        *((_OWORD *)v748 - 5) = v804;
                        *((_OWORD *)v748 - 4) = v805;
                        *((_OWORD *)v748 - 6) = v806;
                        v807 = *(_OWORD *)&v978[v743 + 1314];
                        v808 = *(_OWORD *)&v978[v743 + 1316];
                        v809 = *(_OWORD *)&v978[v743 + 1320];
                        *((_OWORD *)v748 - 8) = *(_OWORD *)&v978[v743 + 1318];
                        *((_OWORD *)v748 - 7) = v809;
                        *((_OWORD *)v748 - 10) = v807;
                        *((_OWORD *)v748 - 9) = v808;
                        v810 = v978[v743 + 1329];
                        *(v748 - 32) = v978[v743 + 1330];
                        *((_QWORD *)v748 - 5) = v810;
                        __asm { PRFM            #0, [X25,#0x14C0] }
                        *(_OWORD *)(v748 - 24) = *(_OWORD *)&v375[v743 - 3];
                        *(v793 - 3) = 0;
                        *(v793 - 2) = 0;
                        *(v748 - 8) = v375[v743 - 1];
                        v743 -= 667;
                      }
                      while (&v375[v743] != v742);
                      v699 += v743 * 8;
                    }
                    v812 = (unint64_t *)v11[798];
                    if (v812 == v375)
                    {
                      v866 = __srcb;
                    }
                    else
                    {
                      v813 = 0;
                      v814 = &v960[667 * v927];
                      v988 = v814 + 666;
                      v979 = v814 + 664;
                      do
                      {
                        v815 = &__srcb[v813 * 8];
                        _X28 = &v375[v813];
                        __asm { PRFM            #0, [X28,#0x29B0] }
                        *(_QWORD *)v815 = v375[v813];
                        *(_OWORD *)(v815 + 8) = *(_OWORD *)&v375[v813 + 1];
                        v815[32] = v375[v813 + 4];
                        *((_QWORD *)v815 + 3) = &off_24CA00398;
                        memcpy(&__srcb[v813 * 8 + 40], &v375[v813 + 5], 0x708uLL);
                        v818 = *(_OWORD *)&v375[v813 + 230];
                        *((_QWORD *)v815 + 232) = v375[v813 + 232];
                        *((_OWORD *)v815 + 115) = v818;
                        v819 = v375[v813 + 235];
                        *(_OWORD *)(v815 + 1864) = *(_OWORD *)&v375[v813 + 233];
                        *((_QWORD *)v815 + 235) = v819;
                        v820 = *(_OWORD *)&v375[v813 + 238];
                        *((_OWORD *)v815 + 118) = *(_OWORD *)&v375[v813 + 236];
                        *((_OWORD *)v815 + 119) = v820;
                        *((_OWORD *)v815 + 120) = *(_OWORD *)&v375[v813 + 240];
                        v821 = *(_OWORD *)&v375[v813 + 244];
                        v822 = *(_OWORD *)&v375[v813 + 246];
                        v823 = v375[v813 + 248];
                        *((_OWORD *)v815 + 121) = *(_OWORD *)&v375[v813 + 242];
                        *((_QWORD *)v815 + 248) = v823;
                        *((_OWORD *)v815 + 123) = v822;
                        *((_OWORD *)v815 + 122) = v821;
                        v825 = *(_OWORD *)&v375[v813 + 253];
                        v824 = *(_OWORD *)&v375[v813 + 255];
                        v826 = *(_OWORD *)&v375[v813 + 251];
                        *((_QWORD *)v815 + 257) = v375[v813 + 257];
                        *(_OWORD *)(v815 + 2024) = v825;
                        *(_OWORD *)(v815 + 2040) = v824;
                        *(_OWORD *)(v815 + 2008) = v826;
                        *(_OWORD *)(v815 + 1992) = *(_OWORD *)&v375[v813 + 249];
                        v827 = *(_OWORD *)&v375[v813 + 260];
                        v828 = *(_OWORD *)&v375[v813 + 262];
                        v829 = *(_OWORD *)&v375[v813 + 264];
                        *((_QWORD *)v815 + 266) = v375[v813 + 266];
                        *((_OWORD *)v815 + 132) = v829;
                        *((_OWORD *)v815 + 131) = v828;
                        *((_OWORD *)v815 + 130) = v827;
                        *((_OWORD *)v815 + 129) = *(_OWORD *)&v375[v813 + 258];
                        v830 = *(_OWORD *)&v375[v813 + 269];
                        v831 = *(_OWORD *)&v375[v813 + 271];
                        v832 = *(_OWORD *)&v375[v813 + 273];
                        *((_QWORD *)v815 + 275) = v375[v813 + 275];
                        *(_OWORD *)(v815 + 2168) = v831;
                        *(_OWORD *)(v815 + 2184) = v832;
                        *(_OWORD *)(v815 + 2152) = v830;
                        *(_OWORD *)(v815 + 2136) = *(_OWORD *)&v375[v813 + 267];
                        v833 = *(_OWORD *)&v375[v813 + 278];
                        v834 = *(_OWORD *)&v375[v813 + 280];
                        v835 = *(_OWORD *)&v375[v813 + 282];
                        *((_QWORD *)v815 + 284) = v375[v813 + 284];
                        *((_OWORD *)v815 + 141) = v835;
                        *((_OWORD *)v815 + 140) = v834;
                        *((_OWORD *)v815 + 139) = v833;
                        *((_OWORD *)v815 + 138) = *(_OWORD *)&v375[v813 + 276];
                        v836 = *(_OWORD *)&v375[v813 + 287];
                        v837 = *(_OWORD *)&v375[v813 + 289];
                        v838 = *(_OWORD *)&v375[v813 + 291];
                        *((_QWORD *)v815 + 293) = v375[v813 + 293];
                        *(_OWORD *)(v815 + 2312) = v837;
                        *(_OWORD *)(v815 + 2328) = v838;
                        *(_OWORD *)(v815 + 2296) = v836;
                        *(_OWORD *)(v815 + 2280) = *(_OWORD *)&v375[v813 + 285];
                        v839 = *(_OWORD *)&v375[v813 + 296];
                        v840 = *(_OWORD *)&v375[v813 + 298];
                        v841 = *(_OWORD *)&v375[v813 + 300];
                        *((_QWORD *)v815 + 302) = v375[v813 + 302];
                        *((_OWORD *)v815 + 150) = v841;
                        *((_OWORD *)v815 + 149) = v840;
                        *((_OWORD *)v815 + 148) = v839;
                        *((_OWORD *)v815 + 147) = *(_OWORD *)&v375[v813 + 294];
                        v842 = *(_OWORD *)&v375[v813 + 305];
                        v843 = *(_OWORD *)&v375[v813 + 307];
                        v844 = *(_OWORD *)&v375[v813 + 309];
                        *((_QWORD *)v815 + 311) = v375[v813 + 311];
                        *(_OWORD *)(v815 + 2456) = v843;
                        *(_OWORD *)(v815 + 2472) = v844;
                        *(_OWORD *)(v815 + 2440) = v842;
                        *(_OWORD *)(v815 + 2424) = *(_OWORD *)&v375[v813 + 303];
                        memcpy(&__srcb[v813 * 8 + 2496], &v375[v813 + 312], 0x288uLL);
                        v845 = *(_OWORD *)&v375[v813 + 393];
                        *((_QWORD *)v815 + 395) = v375[v813 + 395];
                        *(_OWORD *)(v815 + 3144) = v845;
                        v846 = v375[v813 + 398];
                        *((_OWORD *)v815 + 198) = *(_OWORD *)&v375[v813 + 396];
                        *((_QWORD *)v815 + 398) = v846;
                        memcpy(&__srcb[v813 * 8 + 3192], &v375[v813 + 399], 0x708uLL);
                        v847 = v375[v813 + 626];
                        *((_OWORD *)v815 + 312) = *(_OWORD *)&v375[v813 + 624];
                        *((_QWORD *)v815 + 626) = v847;
                        __asm { PRFM            #0, [X28,#0x3D48] }
                        *((_QWORD *)v815 + 627) = v375[v813 + 627];
                        v849 = *(_OWORD *)&v375[v813 + 628];
                        *((_OWORD *)v815 + 315) = *(_OWORD *)&v375[v813 + 630];
                        *((_OWORD *)v815 + 314) = v849;
                        v850 = *(_OWORD *)&v375[v813 + 642];
                        v851 = *(_OWORD *)&v375[v813 + 644];
                        v852 = v375[v813 + 646];
                        *((_OWORD *)v815 + 320) = *(_OWORD *)&v375[v813 + 640];
                        *((_QWORD *)v815 + 646) = v852;
                        *((_OWORD *)v815 + 322) = v851;
                        *((_OWORD *)v815 + 321) = v850;
                        v853 = *(_OWORD *)&v375[v813 + 632];
                        v854 = *(_OWORD *)&v375[v813 + 634];
                        v855 = *(_OWORD *)&v375[v813 + 636];
                        *((_OWORD *)v815 + 319) = *(_OWORD *)&v375[v813 + 638];
                        *((_OWORD *)v815 + 318) = v855;
                        *((_OWORD *)v815 + 317) = v854;
                        *((_OWORD *)v815 + 316) = v853;
                        v857 = *(_OWORD *)&v375[v813 + 657];
                        v856 = *(_OWORD *)&v375[v813 + 659];
                        v858 = *(_OWORD *)&v375[v813 + 655];
                        *((_QWORD *)v815 + 661) = v375[v813 + 661];
                        *(_OWORD *)(v815 + 5256) = v857;
                        *(_OWORD *)(v815 + 5272) = v856;
                        *(_OWORD *)(v815 + 5240) = v858;
                        v859 = *(_OWORD *)&v375[v813 + 647];
                        v860 = *(_OWORD *)&v375[v813 + 649];
                        v861 = *(_OWORD *)&v375[v813 + 653];
                        *(_OWORD *)(v815 + 5208) = *(_OWORD *)&v375[v813 + 651];
                        *(_OWORD *)(v815 + 5224) = v861;
                        *(_OWORD *)(v815 + 5176) = v859;
                        *(_OWORD *)(v815 + 5192) = v860;
                        v862 = v375[v813 + 662];
                        v815[5304] = v375[v813 + 663];
                        v863 = &v979[v813];
                        *((_QWORD *)v815 + 662) = v862;
                        __asm { PRFM            #0, [X28,#0x3E70] }
                        *((_OWORD *)v815 + 332) = *(_OWORD *)&v979[v813];
                        v865 = v988[v813];
                        *v863 = 0;
                        v863[1] = 0;
                        v815[5328] = v865;
                        v813 += 667;
                      }
                      while (&v375[v813] != v812);
                      v375 = (unint64_t *)v11[798];
                      v866 = &__srcb[v813 * 8];
                    }
                    v867 = (unint64_t *)v11[797];
                    v11[797] = v699;
                    v11[798] = v866;
                    v868 = v11[799];
                    v11[799] = *((_QWORD *)&v1139[1] + 1);
                    *((_QWORD *)&v1139[1] + 1) = v868;
                    *((_QWORD *)&v1139[0] + 1) = v867;
                    *(_QWORD *)&v1139[0] = v867;
                    if (v375 != v867)
                    {
                      do
                      {
                        *(_QWORD *)&v1139[1] = v375 - 667;
                        v869 = (std::__shared_weak_count *)*(v375 - 2);
                        if (v869)
                        {
                          v870 = (unint64_t *)&v869->__shared_owners_;
                          do
                            v871 = __ldaxr(v870);
                          while (__stlxr(v871 - 1, v870));
                          if (!v871)
                          {
                            ((void (*)(std::__shared_weak_count *))v869->__on_zero_shared)(v869);
                            std::__shared_weak_count::__release_weak(v869);
                          }
                        }
                        v375 = *(unint64_t **)&v1139[1];
                      }
                      while (*(unint64_t **)&v1139[1] != v867);
                      v375 = *(unint64_t **)&v1139[0];
                    }
                    v234 = (int64x2_t *)(v11 + 63);
                    v235 = v11 + 845;
                    if (v375)
                      operator delete(v375);
                  }
                  else
                  {
                    v905 = v231;
                    v906 = v1042[5288];
                    v934 = *(_QWORD *)&v1042[4976];
                    if (v375 == v233)
                    {
                      *v233 = v940;
                      v653 = v373 + 5336 * v927;
                      *(_OWORD *)(v653 + 8) = *(_OWORD *)&object[8];
                      *(_BYTE *)(v653 + 32) = object[32];
                      *(_QWORD *)(v653 + 24) = &off_24CA00398;
                      v654 = v233;
                      memcpy((void *)(v653 + 40), &object[40], 0x708uLL);
                      v655 = *(_OWORD *)&object[1840];
                      *(_QWORD *)(v653 + 1856) = *(_QWORD *)&object[1856];
                      *(_OWORD *)(v653 + 1840) = v655;
                      v656 = *(_QWORD *)&object[1880];
                      *(_OWORD *)(v653 + 1864) = *(_OWORD *)&object[1864];
                      *(_QWORD *)(v653 + 1880) = v656;
                      v657 = v1141[1];
                      *(_OWORD *)(v653 + 1888) = v1141[0];
                      *(_OWORD *)(v653 + 1904) = v657;
                      *(_OWORD *)(v653 + 1920) = v1141[2];
                      v659 = v1141[4];
                      v658 = v1141[5];
                      v660 = *(_QWORD *)&v1141[6];
                      *(_OWORD *)(v653 + 1936) = v1141[3];
                      *(_QWORD *)(v653 + 1984) = v660;
                      *(_OWORD *)(v653 + 1968) = v658;
                      *(_OWORD *)(v653 + 1952) = v659;
                      v662 = *(_OWORD *)((char *)&v1141[8] + 8);
                      v661 = *(_OWORD *)((char *)&v1141[9] + 8);
                      v663 = *(_OWORD *)((char *)&v1141[7] + 8);
                      *(_QWORD *)(v653 + 2056) = *((_QWORD *)&v1141[10] + 1);
                      *(_OWORD *)(v653 + 2008) = v663;
                      *(_OWORD *)(v653 + 2040) = v661;
                      *(_OWORD *)(v653 + 2024) = v662;
                      *(_OWORD *)(v653 + 1992) = *(_OWORD *)((char *)&v1141[6] + 8);
                      v664 = v1141[12];
                      v665 = v1141[13];
                      v666 = v1141[14];
                      *(_QWORD *)(v653 + 2128) = *(_QWORD *)&v1141[15];
                      *(_OWORD *)(v653 + 2112) = v666;
                      *(_OWORD *)(v653 + 2096) = v665;
                      *(_OWORD *)(v653 + 2080) = v664;
                      *(_OWORD *)(v653 + 2064) = v1141[11];
                      v667 = *(_OWORD *)((char *)&v1141[16] + 8);
                      v668 = *(_OWORD *)((char *)&v1141[17] + 8);
                      v669 = *(_OWORD *)((char *)&v1141[18] + 8);
                      *(_QWORD *)(v653 + 2200) = *((_QWORD *)&v1141[19] + 1);
                      *(_OWORD *)(v653 + 2184) = v669;
                      *(_OWORD *)(v653 + 2168) = v668;
                      *(_OWORD *)(v653 + 2152) = v667;
                      *(_OWORD *)(v653 + 2136) = *(_OWORD *)((char *)&v1141[15] + 8);
                      v670 = v1141[21];
                      v671 = v1141[22];
                      v672 = v1141[23];
                      *(_QWORD *)(v653 + 2272) = *(_QWORD *)&v1141[24];
                      *(_OWORD *)(v653 + 2256) = v672;
                      *(_OWORD *)(v653 + 2240) = v671;
                      *(_OWORD *)(v653 + 2224) = v670;
                      *(_OWORD *)(v653 + 2208) = v1141[20];
                      v673 = *(_OWORD *)((char *)&v1141[25] + 8);
                      v674 = *(_OWORD *)((char *)&v1141[26] + 8);
                      v675 = *(_OWORD *)((char *)&v1141[27] + 8);
                      *(_QWORD *)(v653 + 2344) = *((_QWORD *)&v1141[28] + 1);
                      *(_OWORD *)(v653 + 2328) = v675;
                      *(_OWORD *)(v653 + 2312) = v674;
                      *(_OWORD *)(v653 + 2296) = v673;
                      *(_OWORD *)(v653 + 2280) = *(_OWORD *)((char *)&v1141[24] + 8);
                      v676 = v1141[30];
                      v677 = v1141[31];
                      v678 = v1141[32];
                      *(_QWORD *)(v653 + 2416) = *(_QWORD *)&v1141[33];
                      *(_OWORD *)(v653 + 2400) = v678;
                      *(_OWORD *)(v653 + 2384) = v677;
                      *(_OWORD *)(v653 + 2368) = v676;
                      *(_OWORD *)(v653 + 2352) = v1141[29];
                      v679 = *(_OWORD *)((char *)&v1141[34] + 8);
                      v680 = *(_OWORD *)((char *)&v1141[35] + 8);
                      v681 = *(_OWORD *)((char *)&v1141[36] + 8);
                      *(_QWORD *)(v653 + 2488) = *((_QWORD *)&v1141[37] + 1);
                      *(_OWORD *)(v653 + 2472) = v681;
                      *(_OWORD *)(v653 + 2456) = v680;
                      *(_OWORD *)(v653 + 2440) = v679;
                      *(_OWORD *)(v653 + 2424) = *(_OWORD *)((char *)&v1141[33] + 8);
                      memcpy((void *)(v653 + 2496), &v1141[38], 0x288uLL);
                      v682 = *(_OWORD *)((char *)&v1141[78] + 8);
                      *(_QWORD *)(v653 + 3160) = *((_QWORD *)&v1141[79] + 1);
                      *(_OWORD *)(v653 + 3144) = v682;
                      v683 = *(_QWORD *)&v1141[81];
                      *(_OWORD *)(v653 + 3168) = v1141[80];
                      *(_QWORD *)(v653 + 3184) = v683;
                      memcpy((void *)(v653 + 3192), (char *)&v1141[81] + 8, 0x708uLL);
                      v684 = v1141[194];
                      *(_QWORD *)(v653 + 5008) = *(_QWORD *)&v1141[195];
                      *(_OWORD *)(v653 + 4992) = v684;
                      *(_QWORD *)(v653 + 5016) = *((_QWORD *)&v1141[195] + 1);
                      v685 = v1141[196];
                      *(_OWORD *)(v653 + 5040) = v1141[197];
                      *(_OWORD *)(v653 + 5024) = v685;
                      v686 = v1141[200];
                      v687 = v1141[201];
                      v688 = v1141[199];
                      *(_OWORD *)(v653 + 5056) = v1141[198];
                      *(_OWORD *)(v653 + 5104) = v687;
                      *(_OWORD *)(v653 + 5088) = v686;
                      *(_OWORD *)(v653 + 5072) = v688;
                      v690 = v1141[203];
                      v689 = v1141[204];
                      v691 = *(_QWORD *)&v1141[205];
                      *(_OWORD *)(v653 + 5120) = v1141[202];
                      *(_QWORD *)(v653 + 5168) = v691;
                      *(_OWORD *)(v653 + 5152) = v689;
                      *(_OWORD *)(v653 + 5136) = v690;
                      v692 = *(_OWORD *)((char *)&v1141[207] + 8);
                      v693 = *(_OWORD *)((char *)&v1141[208] + 8);
                      v694 = *(_OWORD *)((char *)&v1141[206] + 8);
                      *(_OWORD *)(v653 + 5176) = *(_OWORD *)((char *)&v1141[205] + 8);
                      *(_OWORD *)(v653 + 5224) = v693;
                      *(_OWORD *)(v653 + 5208) = v692;
                      *(_OWORD *)(v653 + 5192) = v694;
                      v696 = *(_OWORD *)((char *)&v1141[210] + 8);
                      v695 = *(_OWORD *)((char *)&v1141[211] + 8);
                      v697 = *((_QWORD *)&v1141[212] + 1);
                      *(_OWORD *)(v653 + 5240) = *(_OWORD *)((char *)&v1141[209] + 8);
                      *(_QWORD *)(v653 + 5288) = v697;
                      *(_OWORD *)(v653 + 5272) = v695;
                      *(_OWORD *)(v653 + 5256) = v696;
                      LOBYTE(v697) = BYTE8(v1141[213]);
                      *(_QWORD *)(v653 + 5296) = *(_QWORD *)&v1141[213];
                      *(_BYTE *)(v653 + 5304) = v697;
                      *(_OWORD *)(v653 + 5312) = v1141[214];
                      v1141[214] = 0uLL;
                      *(_BYTE *)(v653 + 5328) = v1141[215];
                      v11[798] = v654 + 667;
                    }
                    else
                    {
                      v377 = v11[797];
                      v924 = v232;
                      v1005 = *(_OWORD *)v1040;
                      v378 = v11[798];
                      memcpy((char *)v1139 + 7, v1042, 0x708uLL);
                      v1003 = *(_OWORD *)&v1042[1800];
                      v1004 = *(_QWORD *)&v1042[1816];
                      v1001 = *(_OWORD *)&v1042[1824];
                      v1002 = *(_QWORD *)&v1042[1840];
                      v999 = *(_OWORD *)&v1042[1848];
                      v1000 = *(_OWORD *)&v1042[1864];
                      v1138 = *(_QWORD *)&v1042[1944];
                      v1137 = *(_OWORD *)&v1042[1928];
                      v1136 = *(_OWORD *)&v1042[1912];
                      v1135 = *(_OWORD *)&v1042[1896];
                      v1134 = *(_OWORD *)&v1042[1880];
                      v1133 = *(_QWORD *)&v1042[2016];
                      v1132 = *(_OWORD *)&v1042[2000];
                      v1131 = *(_OWORD *)&v1042[1984];
                      v1129 = *(_OWORD *)&v1042[1952];
                      v1130 = *(_OWORD *)&v1042[1968];
                      v1128 = *(_QWORD *)&v1042[2088];
                      v1127 = *(_OWORD *)&v1042[2072];
                      v1126 = *(_OWORD *)&v1042[2056];
                      v1124 = *(_OWORD *)&v1042[2024];
                      v1125 = *(_OWORD *)&v1042[2040];
                      v1123 = *(_QWORD *)&v1042[2160];
                      v1122 = *(_OWORD *)&v1042[2144];
                      v1121 = *(_OWORD *)&v1042[2128];
                      v1119 = *(_OWORD *)&v1042[2096];
                      v1120 = *(_OWORD *)&v1042[2112];
                      v1118 = *(_QWORD *)&v1042[2232];
                      v1117 = *(_OWORD *)&v1042[2216];
                      v1116 = *(_OWORD *)&v1042[2200];
                      v1114 = *(_OWORD *)&v1042[2168];
                      v1115 = *(_OWORD *)&v1042[2184];
                      v1113 = *(_QWORD *)&v1042[2304];
                      v1112 = *(_OWORD *)&v1042[2288];
                      v1111 = *(_OWORD *)&v1042[2272];
                      v1109 = *(_OWORD *)&v1042[2240];
                      v1110 = *(_OWORD *)&v1042[2256];
                      v1108 = *(_QWORD *)&v1042[2376];
                      v1107 = *(_OWORD *)&v1042[2360];
                      v1106 = *(_OWORD *)&v1042[2344];
                      v1104 = *(_OWORD *)&v1042[2312];
                      v1105 = *(_OWORD *)&v1042[2328];
                      v1103 = *(_QWORD *)&v1042[2448];
                      v1102 = *(_OWORD *)&v1042[2432];
                      v1101 = *(_OWORD *)&v1042[2416];
                      v1099 = *(_OWORD *)&v1042[2384];
                      v1100 = *(_OWORD *)&v1042[2400];
                      memcpy(v1098, &v1042[2456], sizeof(v1098));
                      v997 = *(_OWORD *)&v1042[3104];
                      v998 = *(_QWORD *)&v1042[3120];
                      v995 = *(_OWORD *)&v1042[3128];
                      v996 = *(_QWORD *)&v1042[3144];
                      memcpy(v1097, &v1042[3152], sizeof(v1097));
                      v993 = *(_OWORD *)&v1042[4952];
                      v994 = *(_QWORD *)&v1042[4968];
                      *(_OWORD *)__srca = v1141[196];
                      v952 = v1141[197];
                      v1093 = *(_OWORD *)&v1042[5080];
                      v1094 = *(_OWORD *)&v1042[5096];
                      v1095 = *(_OWORD *)&v1042[5112];
                      v1096 = *(_QWORD *)&v1042[5128];
                      v1089 = *(_OWORD *)&v1042[5016];
                      v1090 = *(_OWORD *)&v1042[5032];
                      v1091 = *(_OWORD *)&v1042[5048];
                      v1092 = *(_OWORD *)&v1042[5064];
                      v1084 = *(_OWORD *)&v1042[5184];
                      v1083 = *(_OWORD *)&v1042[5168];
                      v1082 = *(_OWORD *)&v1042[5152];
                      v1081 = *(_OWORD *)&v1042[5136];
                      v1088 = *(_QWORD *)&v1042[5248];
                      v1087 = *(_OWORD *)&v1042[5232];
                      v1086 = *(_OWORD *)&v1042[5216];
                      v1085 = *(_OWORD *)&v1042[5200];
                      v379 = v375 + 667;
                      v992 = v1042[5264];
                      v991 = *(_QWORD *)&v1042[5256];
                      v380 = 0x4515E08719B71393 * ((uint64_t)(v378 - (_QWORD)(v375 + 667)) >> 3);
                      v381 = v378 - 5336;
                      v382 = v378;
                      v1141[214] = 0uLL;
                      if (v378 >= 0x14D8)
                      {
                        v383 = 0;
                        v963 = 0x4515E08719B71393 * ((uint64_t)(v378 - (_QWORD)(v375 + 667)) >> 3);
                        v384 = 5336 * v927 + 8 * ((uint64_t)(v378 - (_QWORD)(v375 + 667)) >> 3) + v377;
                        v975 = v384 + 5328;
                        v967 = v384 + 5312;
                        v385 = v378;
                        do
                        {
                          v386 = v385 + v383;
                          _X23 = v381 + v383;
                          __asm { PRFM            #0, [X23,#0x29B0] }
                          *(_QWORD *)v386 = *(_QWORD *)(v381 + v383);
                          *(_OWORD *)(v386 + 8) = *(_OWORD *)(v381 + v383 + 8);
                          *(_BYTE *)(v386 + 32) = *(_BYTE *)(v381 + v383 + 32);
                          *(_QWORD *)(v386 + 24) = &off_24CA00398;
                          memcpy((void *)(v385 + v383 + 40), (const void *)(v381 + v383 + 40), 0x708uLL);
                          v389 = *(_OWORD *)(v381 + v383 + 1840);
                          *(_QWORD *)(v386 + 1856) = *(_QWORD *)(v381 + v383 + 1856);
                          *(_OWORD *)(v386 + 1840) = v389;
                          v390 = *(_QWORD *)(v381 + v383 + 1880);
                          *(_OWORD *)(v386 + 1864) = *(_OWORD *)(v381 + v383 + 1864);
                          *(_QWORD *)(v386 + 1880) = v390;
                          v391 = *(_OWORD *)(v381 + v383 + 1904);
                          *(_OWORD *)(v386 + 1888) = *(_OWORD *)(v381 + v383 + 1888);
                          *(_OWORD *)(v386 + 1904) = v391;
                          *(_OWORD *)(v386 + 1920) = *(_OWORD *)(v381 + v383 + 1920);
                          v392 = *(_OWORD *)(v381 + v383 + 1952);
                          v393 = *(_OWORD *)(v381 + v383 + 1968);
                          v394 = *(_QWORD *)(v381 + v383 + 1984);
                          *(_OWORD *)(v386 + 1936) = *(_OWORD *)(v381 + v383 + 1936);
                          *(_QWORD *)(v386 + 1984) = v394;
                          *(_OWORD *)(v386 + 1968) = v393;
                          *(_OWORD *)(v386 + 1952) = v392;
                          v396 = *(_OWORD *)(v381 + v383 + 2024);
                          v395 = *(_OWORD *)(v381 + v383 + 2040);
                          v397 = *(_OWORD *)(v381 + v383 + 2008);
                          *(_QWORD *)(v386 + 2056) = *(_QWORD *)(v381 + v383 + 2056);
                          *(_OWORD *)(v386 + 2024) = v396;
                          *(_OWORD *)(v386 + 2040) = v395;
                          *(_OWORD *)(v386 + 2008) = v397;
                          *(_OWORD *)(v386 + 1992) = *(_OWORD *)(v381 + v383 + 1992);
                          v398 = *(_OWORD *)(v381 + v383 + 2080);
                          v399 = *(_OWORD *)(v381 + v383 + 2096);
                          v400 = *(_OWORD *)(v381 + v383 + 2112);
                          *(_QWORD *)(v386 + 2128) = *(_QWORD *)(v381 + v383 + 2128);
                          *(_OWORD *)(v386 + 2112) = v400;
                          *(_OWORD *)(v386 + 2096) = v399;
                          *(_OWORD *)(v386 + 2080) = v398;
                          *(_OWORD *)(v386 + 2064) = *(_OWORD *)(v381 + v383 + 2064);
                          v401 = *(_OWORD *)(v381 + v383 + 2152);
                          v402 = *(_OWORD *)(v381 + v383 + 2168);
                          v403 = *(_OWORD *)(v381 + v383 + 2184);
                          *(_QWORD *)(v386 + 2200) = *(_QWORD *)(v381 + v383 + 2200);
                          *(_OWORD *)(v386 + 2168) = v402;
                          *(_OWORD *)(v386 + 2184) = v403;
                          *(_OWORD *)(v386 + 2152) = v401;
                          *(_OWORD *)(v386 + 2136) = *(_OWORD *)(v381 + v383 + 2136);
                          v404 = *(_OWORD *)(v381 + v383 + 2224);
                          v405 = *(_OWORD *)(v381 + v383 + 2240);
                          v406 = *(_OWORD *)(v381 + v383 + 2256);
                          *(_QWORD *)(v386 + 2272) = *(_QWORD *)(v381 + v383 + 2272);
                          *(_OWORD *)(v386 + 2256) = v406;
                          *(_OWORD *)(v386 + 2240) = v405;
                          *(_OWORD *)(v386 + 2224) = v404;
                          *(_OWORD *)(v386 + 2208) = *(_OWORD *)(v381 + v383 + 2208);
                          v407 = *(_OWORD *)(v381 + v383 + 2296);
                          v408 = *(_OWORD *)(v381 + v383 + 2312);
                          v409 = *(_OWORD *)(v381 + v383 + 2328);
                          *(_QWORD *)(v386 + 2344) = *(_QWORD *)(v381 + v383 + 2344);
                          *(_OWORD *)(v386 + 2312) = v408;
                          *(_OWORD *)(v386 + 2328) = v409;
                          *(_OWORD *)(v386 + 2296) = v407;
                          *(_OWORD *)(v386 + 2280) = *(_OWORD *)(v381 + v383 + 2280);
                          v410 = *(_OWORD *)(v381 + v383 + 2368);
                          v411 = *(_OWORD *)(v381 + v383 + 2384);
                          v412 = *(_OWORD *)(v381 + v383 + 2400);
                          *(_QWORD *)(v386 + 2416) = *(_QWORD *)(v381 + v383 + 2416);
                          *(_OWORD *)(v386 + 2400) = v412;
                          *(_OWORD *)(v386 + 2384) = v411;
                          *(_OWORD *)(v386 + 2368) = v410;
                          *(_OWORD *)(v386 + 2352) = *(_OWORD *)(v381 + v383 + 2352);
                          v413 = *(_OWORD *)(v381 + v383 + 2440);
                          v414 = *(_OWORD *)(v381 + v383 + 2456);
                          v415 = *(_OWORD *)(v381 + v383 + 2472);
                          *(_QWORD *)(v386 + 2488) = *(_QWORD *)(v381 + v383 + 2488);
                          *(_OWORD *)(v386 + 2456) = v414;
                          *(_OWORD *)(v386 + 2472) = v415;
                          *(_OWORD *)(v386 + 2440) = v413;
                          *(_OWORD *)(v386 + 2424) = *(_OWORD *)(v381 + v383 + 2424);
                          memcpy((void *)(v385 + v383 + 2496), (const void *)(v381 + v383 + 2496), 0x288uLL);
                          v416 = *(_OWORD *)(v381 + v383 + 3144);
                          *(_QWORD *)(v386 + 3160) = *(_QWORD *)(v381 + v383 + 3160);
                          *(_OWORD *)(v386 + 3144) = v416;
                          v417 = *(_QWORD *)(v381 + v383 + 3184);
                          *(_OWORD *)(v386 + 3168) = *(_OWORD *)(v381 + v383 + 3168);
                          *(_QWORD *)(v386 + 3184) = v417;
                          memcpy((void *)(v385 + v383 + 3192), (const void *)(v381 + v383 + 3192), 0x708uLL);
                          v418 = *(_QWORD *)(v381 + v383 + 5008);
                          *(_OWORD *)(v386 + 4992) = *(_OWORD *)(v381 + v383 + 4992);
                          *(_QWORD *)(v386 + 5008) = v418;
                          __asm { PRFM            #0, [X23,#0x3D48] }
                          *(_QWORD *)(v386 + 5016) = *(_QWORD *)(v381 + v383 + 5016);
                          v420 = *(_OWORD *)(v381 + v383 + 5024);
                          *(_OWORD *)(v386 + 5040) = *(_OWORD *)(v381 + v383 + 5040);
                          *(_OWORD *)(v386 + 5024) = v420;
                          v421 = *(_OWORD *)(v381 + v383 + 5136);
                          v422 = *(_OWORD *)(v381 + v383 + 5152);
                          v423 = *(_QWORD *)(v381 + v383 + 5168);
                          *(_OWORD *)(v386 + 5120) = *(_OWORD *)(v381 + v383 + 5120);
                          *(_QWORD *)(v386 + 5168) = v423;
                          *(_OWORD *)(v386 + 5152) = v422;
                          *(_OWORD *)(v386 + 5136) = v421;
                          v424 = *(_OWORD *)(v381 + v383 + 5056);
                          v425 = *(_OWORD *)(v381 + v383 + 5072);
                          v426 = *(_OWORD *)(v381 + v383 + 5088);
                          *(_OWORD *)(v386 + 5104) = *(_OWORD *)(v381 + v383 + 5104);
                          *(_OWORD *)(v386 + 5088) = v426;
                          *(_OWORD *)(v386 + 5072) = v425;
                          *(_OWORD *)(v386 + 5056) = v424;
                          v428 = *(_OWORD *)(v381 + v383 + 5256);
                          v427 = *(_OWORD *)(v381 + v383 + 5272);
                          v429 = *(_OWORD *)(v381 + v383 + 5240);
                          *(_QWORD *)(v386 + 5288) = *(_QWORD *)(v381 + v383 + 5288);
                          *(_OWORD *)(v386 + 5256) = v428;
                          *(_OWORD *)(v386 + 5272) = v427;
                          *(_OWORD *)(v386 + 5240) = v429;
                          v430 = *(_OWORD *)(v381 + v383 + 5176);
                          v431 = *(_OWORD *)(v381 + v383 + 5192);
                          v432 = *(_OWORD *)(v381 + v383 + 5224);
                          *(_OWORD *)(v386 + 5208) = *(_OWORD *)(v381 + v383 + 5208);
                          *(_OWORD *)(v386 + 5224) = v432;
                          *(_OWORD *)(v386 + 5176) = v430;
                          *(_OWORD *)(v386 + 5192) = v431;
                          v433 = *(_QWORD *)(v381 + v383 + 5296);
                          *(_BYTE *)(v386 + 5304) = *(_BYTE *)(v381 + v383 + 5304);
                          v434 = (_QWORD *)(v967 + v383);
                          *(_QWORD *)(v386 + 5296) = v433;
                          __asm { PRFM            #0, [X23,#0x3E70] }
                          *(_OWORD *)(v386 + 5312) = *(_OWORD *)(v967 + v383);
                          v436 = *(_BYTE *)(v975 + v383);
                          *v434 = 0;
                          v434[1] = 0;
                          *(_BYTE *)(v386 + 5328) = v436;
                          v383 += 5336;
                        }
                        while (v381 + v383 < v385);
                        v382 = v385 + v383;
                        v378 = v385;
                        v11 = v985;
                        v380 = v963;
                        v379 = v375 + 667;
                      }
                      v11[798] = v382;
                      if ((_QWORD *)v378 != v379)
                      {
                        v437 = v378 - 5336;
                        v438 = 5336 * v380;
                        do
                        {
                          v437 = sub_20F5B6B10(v437, 5336 * v927 + v377 - 5336 + v438) - 5336;
                          v438 -= 5336;
                        }
                        while (v438);
                      }
                      *v375 = v940;
                      v439 = v377 + 5336 * v927;
                      *(_OWORD *)(v439 + 8) = v1005;
                      *(_BYTE *)(v439 + 32) = v919;
                      memcpy((void *)(v439 + 40), (char *)v1139 + 7, 0x708uLL);
                      *(_OWORD *)(v439 + 1840) = v1003;
                      *(_OWORD *)(v439 + 1864) = v1001;
                      *(_OWORD *)(v439 + 1888) = v999;
                      *(_OWORD *)(v439 + 1904) = v1000;
                      v440 = v1135;
                      *(_OWORD *)(v439 + 1920) = v1134;
                      v441 = v1136;
                      *(_OWORD *)(v439 + 1968) = v1137;
                      *(_OWORD *)(v439 + 1952) = v441;
                      *(_OWORD *)(v439 + 1936) = v440;
                      v442 = v1130;
                      *(_OWORD *)(v439 + 1992) = v1129;
                      v443 = v1131;
                      *(_OWORD *)(v439 + 2040) = v1132;
                      *(_OWORD *)(v439 + 2024) = v443;
                      *(_OWORD *)(v439 + 2008) = v442;
                      v444 = v1127;
                      *(_OWORD *)(v439 + 2096) = v1126;
                      *(_OWORD *)(v439 + 2112) = v444;
                      v445 = v1125;
                      *(_OWORD *)(v439 + 2064) = v1124;
                      *(_OWORD *)(v439 + 2080) = v445;
                      v446 = v1120;
                      *(_OWORD *)(v439 + 2136) = v1119;
                      v447 = v1121;
                      *(_OWORD *)(v439 + 2184) = v1122;
                      *(_OWORD *)(v439 + 2168) = v447;
                      *(_OWORD *)(v439 + 2152) = v446;
                      v448 = v1117;
                      *(_OWORD *)(v439 + 2240) = v1116;
                      *(_OWORD *)(v439 + 2256) = v448;
                      v449 = v1115;
                      *(_OWORD *)(v439 + 2208) = v1114;
                      *(_OWORD *)(v439 + 2224) = v449;
                      v450 = v1110;
                      *(_OWORD *)(v439 + 2280) = v1109;
                      v451 = v1111;
                      *(_OWORD *)(v439 + 2328) = v1112;
                      *(_OWORD *)(v439 + 2312) = v451;
                      *(_OWORD *)(v439 + 2296) = v450;
                      v452 = v1107;
                      *(_OWORD *)(v439 + 2384) = v1106;
                      *(_OWORD *)(v439 + 2400) = v452;
                      v453 = v1105;
                      *(_OWORD *)(v439 + 2352) = v1104;
                      *(_OWORD *)(v439 + 2368) = v453;
                      v454 = v1100;
                      *(_OWORD *)(v439 + 2424) = v1099;
                      v455 = v1101;
                      *(_OWORD *)(v439 + 2472) = v1102;
                      *(_OWORD *)(v439 + 2456) = v455;
                      *(_QWORD *)(v439 + 1856) = v1004;
                      *(_QWORD *)(v439 + 1880) = v1002;
                      *(_QWORD *)(v439 + 1984) = v1138;
                      *(_QWORD *)(v439 + 2056) = v1133;
                      *(_QWORD *)(v439 + 2128) = v1128;
                      *(_QWORD *)(v439 + 2200) = v1123;
                      *(_QWORD *)(v439 + 2272) = v1118;
                      *(_QWORD *)(v439 + 2344) = v1113;
                      *(_QWORD *)(v439 + 2416) = v1108;
                      *(_QWORD *)(v439 + 2488) = v1103;
                      *(_OWORD *)(v439 + 2440) = v454;
                      memcpy((void *)(v439 + 2496), v1098, 0x288uLL);
                      *(_OWORD *)(v439 + 3144) = v997;
                      *(_QWORD *)(v439 + 3160) = v998;
                      *(_OWORD *)(v439 + 3168) = v995;
                      *(_QWORD *)(v439 + 3184) = v996;
                      memcpy((void *)(v439 + 3192), v1097, 0x708uLL);
                      *(_OWORD *)(v439 + 4992) = v993;
                      *(_QWORD *)(v439 + 5008) = v994;
                      *(_QWORD *)(v439 + 5016) = v934;
                      *(_OWORD *)(v439 + 5024) = *(_OWORD *)__srca;
                      *(_OWORD *)(v439 + 5040) = v952;
                      *(_OWORD *)(v439 + 5120) = v1093;
                      *(_OWORD *)(v439 + 5136) = v1094;
                      *(_OWORD *)(v439 + 5152) = v1095;
                      *(_QWORD *)(v439 + 5168) = v1096;
                      *(_OWORD *)(v439 + 5056) = v1089;
                      *(_OWORD *)(v439 + 5072) = v1090;
                      *(_OWORD *)(v439 + 5088) = v1091;
                      *(_OWORD *)(v439 + 5104) = v1092;
                      *(_QWORD *)(v439 + 5288) = v1088;
                      *(_OWORD *)(v439 + 5272) = v1087;
                      v456 = v1085;
                      *(_OWORD *)(v439 + 5256) = v1086;
                      *(_OWORD *)(v439 + 5240) = v456;
                      v457 = v1083;
                      *(_OWORD *)(v439 + 5224) = v1084;
                      *(_OWORD *)(v439 + 5208) = v457;
                      v458 = v1081;
                      *(_OWORD *)(v439 + 5192) = v1082;
                      *(_OWORD *)(v439 + 5176) = v458;
                      *(_BYTE *)(v439 + 5304) = v992;
                      *(_QWORD *)(v439 + 5296) = v991;
                      *(_QWORD *)(v439 + 5312) = v905;
                      v459 = *(std::__shared_weak_count **)(v439 + 5320);
                      *(_QWORD *)(v439 + 5320) = v924;
                      if (v459)
                      {
                        v460 = (unint64_t *)&v459->__shared_owners_;
                        do
                          v461 = __ldaxr(v460);
                        while (__stlxr(v461 - 1, v460));
                        if (!v461)
                        {
                          ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                          std::__shared_weak_count::__release_weak(v459);
                        }
                      }
                      *(_BYTE *)(v377 + 5336 * v927 + 5328) = v906;
                      v11 = v985;
                    }
                    v234 = v981;
                    v235 = v980;
                  }
                  v232 = (std::__shared_weak_count *)*((_QWORD *)&v1141[214] + 1);
                }
                else
                {
                  v234 = (int64x2_t *)(v11 + 63);
                  v235 = v11 + 845;
                }
                if (v232)
                {
                  v872 = (unint64_t *)&v232->__shared_owners_;
                  do
                    v873 = __ldaxr(v872);
                  while (__stlxr(v873 - 1, v872));
                  if (!v873)
                  {
                    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                    std::__shared_weak_count::__release_weak(v232);
                  }
                }
                v235[2] = 0;
                *v235 = 0;
                v234[390] = vaddq_s64(v234[390], (int64x2_t)xmmword_2103B4900);
                v128 = 1;
              }
              else
              {
                v128 = 0;
                --*(_DWORD *)(v209 + 8);
                --*(_DWORD *)(v218 + 8);
                *(_OWORD *)&v1042[4984] = 0u;
                --*(_DWORD *)(v224 + 8);
                --*(_DWORD *)(v230 + 8);
                *(_OWORD *)&v1042[5000] = 0u;
              }
            }
            v236 = *(std::__shared_weak_count **)&v1042[5280];
            if (*(_QWORD *)&v1042[5280])
            {
              v237 = (unint64_t *)(*(_QWORD *)&v1042[5280] + 8);
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 - 1, v237));
              if (!v238)
              {
                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                std::__shared_weak_count::__release_weak(v236);
              }
            }
            v116 = v990;
LABEL_252:
            if (v116)
            {
              v239 = (unint64_t *)&v116->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                v241 = v116;
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v241);
              }
            }
            if (v128)
            {
              *((_BYTE *)v11 + 7828) = 0;
              *((_DWORD *)v11 + 1956) = 0;
            }
            if (*((_QWORD *)&v989 + 1))
            {
              v242 = (unint64_t *)(*((_QWORD *)&v989 + 1) + 8);
              do
                v243 = __ldaxr(v242);
              while (__stlxr(v243 - 1, v242));
              if (!v243)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v989 + 1) + 16))(*((_QWORD *)&v989 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v989 + 1));
              }
            }
            if (v128
              || (sub_20F9B2A4C(v1097), v244 = v982, **(int **)(*(_QWORD *)v1097 + 56) > 4)
              || ((v245 = *(unsigned __int8 *)(*(_QWORD *)v1097 + 72),
                   v246 = sub_20E8C31DC(*(uint64_t *)v1097, "OSLogSurrogateAppender", 1, 0),
                   v247 = v246,
                   !v245)
                ? (_ZF = v246 == 0)
                : (_ZF = 0),
                  _ZF))
            {
LABEL_356:
              if (*((_QWORD *)&v989 + 1))
              {
                v300 = (unint64_t *)(*((_QWORD *)&v989 + 1) + 8);
                do
                  v301 = __ldaxr(v300);
                while (__stlxr(v301 - 1, v300));
                if (!v301)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v989 + 1) + 16))(*((_QWORD *)&v989 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v989 + 1));
                }
              }
              v192 = (std::__shared_weak_count *)*((_QWORD *)&v989 + 1);
              if (*((_QWORD *)&v989 + 1))
              {
                v302 = (unint64_t *)(*((_QWORD *)&v989 + 1) + 8);
                do
                  v194 = __ldaxr(v302);
                while (__stlxr(v194 - 1, v302));
LABEL_178:
                if (!v194)
                {
                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                  std::__shared_weak_count::__release_weak(v192);
                }
                return;
              }
              return;
            }
            *(_QWORD *)v1040 = v1097;
            *(std::chrono::steady_clock::time_point *)&v1040[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v1040[16] = std::chrono::system_clock::now();
            LODWORD(v1041) = 4;
            *(_QWORD *)v1042 = "unknown file";
            *(_DWORD *)&v1042[8] = 184;
            *(_QWORD *)&v1042[32] = 0;
            *(_QWORD *)&v1042[16] = "unknown function";
            *(_QWORD *)&v1042[24] = 0;
            v249 = **(_QWORD **)v1040;
            v250 = (const char *)(**(_QWORD **)v1040 + 16);
            v986 = v250;
            if (*(char *)(**(_QWORD **)v1040 + 39) < 0)
            {
              v250 = *(const char **)(v249 + 16);
              v251 = *(_QWORD *)(v249 + 24);
            }
            else
            {
              v251 = *(unsigned __int8 *)(**(_QWORD **)v1040 + 39);
            }
            v252 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v252 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if (object[24] && (object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
              v244 = v982;
            }
            if (byte_254A4A4F8[23] >= 0)
              v253 = byte_254A4A4F8;
            else
              v253 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v254 = byte_254A4A4F8[23];
            else
              v254 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v253, v250);
            v255 = &object[8];
            if (v254 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v254 >= 0x17)
            {
              v256 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v254 | 7) != 0x17)
                v256 = v254 | 7;
              v257 = v256 + 1;
              v255 = operator new(v256 + 1);
              *(_QWORD *)&object[24] = v257 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v255;
              *(_QWORD *)&object[16] = v254;
              v244 = v982;
            }
            else
            {
              object[31] = v254;
              if (!v254)
              {
LABEL_288:
                v255[v254] = 0;
                object[32] = 1;
                v258 = &object[40];
                if (v251 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v251 >= 0x17)
                {
                  v259 = (v251 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v251 | 7) != 0x17)
                    v259 = v251 | 7;
                  v260 = v259 + 1;
                  v258 = operator new(v259 + 1);
                  *(_QWORD *)&object[56] = v260 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v258;
                  *(_QWORD *)&object[48] = v251;
                }
                else
                {
                  object[63] = v251;
                  if (!v251)
                    goto LABEL_296;
                }
                memmove(v258, v250, v251);
LABEL_296:
                v258[v251] = 0;
                object[64] = 1;
                v261 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  operator delete(*(void **)&object[40]);
                if (object[32] && (object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v247 && *(_QWORD *)(v247 + 24))
                {
                  v262 = _os_log_pack_size();
                  v263 = (std::__shared_weak_count_vtbl *)operator new(v262, (std::align_val_t)8uLL);
                  v264 = (std::__shared_weak_count *)operator new();
                  v265 = v264;
                  v264->__shared_owners_ = 0;
                  v266 = (unint64_t *)&v264->__shared_owners_;
                  v264->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v264->__shared_weak_owners_ = 0;
                  v264[1].__vftable = v263;
                  *(_QWORD *)object = v263;
                  *(_QWORD *)&object[8] = v263;
                  *(_QWORD *)&object[16] = v264;
                  do
                    v267 = __ldxr(v266);
                  while (__stxr(v267 + 1, v266));
                  memset(&object[24], 0, 24);
                  do
                    v268 = __ldaxr(v266);
                  while (__stlxr(v268 - 1, v266));
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                    std::__shared_weak_count::__release_weak(v265);
                  }
                  v269 = *(_QWORD *)object;
                  v270 = _os_log_pack_fill();
                  *(_DWORD *)v270 = 134218496;
                  *(_QWORD *)(v270 + 4) = v244;
                  *(_WORD *)(v270 + 12) = 1024;
                  *(_DWORD *)(v270 + 14) = v969;
                  *(_WORD *)(v270 + 18) = 1024;
                  *(_DWORD *)(v270 + 20) = v874;
                  v271 = operator new();
                  v272 = *(unsigned __int8 *)(v249 + 39);
                  v273 = v986;
                  if ((v272 & 0x80u) != 0)
                  {
                    v273 = *(const char **)(v249 + 16);
                    v272 = *(_QWORD *)(v249 + 24);
                  }
                  *(_QWORD *)v271 = v269;
                  *(_OWORD *)(v271 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v271 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *(_QWORD *)(v271 + 40) = v273;
                  *(_QWORD *)(v271 + 48) = v272;
                  *(_BYTE *)(v271 + 56) = 16;
                  *(_QWORD *)&v1139[0] = 0;
                  *(_QWORD *)&v1006 = v271;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v247 + 24) + 40))(*(_QWORD *)(v247 + 24), &v1006);
                  v274 = v1006;
                  *(_QWORD *)&v1006 = 0;
                  v275 = v969;
                  if (v274)
                  {
                    v276 = *(std::__shared_weak_count **)(v274 + 32);
                    if (v276)
                    {
                      v277 = (unint64_t *)&v276->__shared_owners_;
                      do
                        v278 = __ldaxr(v277);
                      while (__stlxr(v278 - 1, v277));
                      if (!v278)
                      {
                        ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                        std::__shared_weak_count::__release_weak(v276);
                      }
                    }
                    v279 = *(std::__shared_weak_count **)(v274 + 16);
                    if (v279)
                    {
                      v280 = (unint64_t *)&v279->__shared_owners_;
                      do
                        v281 = __ldaxr(v280);
                      while (__stlxr(v281 - 1, v280));
                      if (!v281)
                      {
                        ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                        std::__shared_weak_count::__release_weak(v279);
                      }
                    }
                    MEMORY[0x212BC6398](v274, 0x10F0C40B62ED6C6);
                    v282 = *(_QWORD *)&v1139[0];
                    *(_QWORD *)&v1139[0] = 0;
                    if (v282)
                    {
                      v283 = *(std::__shared_weak_count **)(v282 + 32);
                      if (v283)
                      {
                        v284 = (unint64_t *)&v283->__shared_owners_;
                        do
                          v285 = __ldaxr(v284);
                        while (__stlxr(v285 - 1, v284));
                        if (!v285)
                        {
                          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                          std::__shared_weak_count::__release_weak(v283);
                        }
                      }
                      v286 = *(std::__shared_weak_count **)(v282 + 16);
                      if (v286)
                      {
                        v287 = (unint64_t *)&v286->__shared_owners_;
                        do
                          v288 = __ldaxr(v287);
                        while (__stlxr(v288 - 1, v287));
                        if (!v288)
                        {
                          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                          std::__shared_weak_count::__release_weak(v286);
                        }
                      }
                      MEMORY[0x212BC6398](v282, 0x10F0C40B62ED6C6);
                    }
                  }
                  v289 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v290 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v291 = __ldaxr(v290);
                    while (__stlxr(v291 - 1, v290));
                    if (!v291)
                    {
                      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                      std::__shared_weak_count::__release_weak(v289);
                    }
                  }
                  v292 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v293 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v294 = __ldaxr(v293);
                    while (__stlxr(v294 - 1, v293));
                    if (!v294)
                    {
                      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                      std::__shared_weak_count::__release_weak(v292);
                    }
                  }
                  v295 = v874;
                }
                else
                {
                  os_log_type_enabled(v261, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)object = 134218496;
                  *(_QWORD *)&object[4] = v244;
                  *(_WORD *)&object[12] = 1024;
                  v275 = v969;
                  *(_DWORD *)&object[14] = v969;
                  *(_WORD *)&object[18] = 1024;
                  v295 = v874;
                  *(_DWORD *)&object[20] = v874;
                  v296 = (void *)_os_log_send_and_compose_impl();
                  if (v296)
                    free(v296);
                }
                if (v245)
                {
                  sub_20E8C003C((uint64_t)v1040, "Failed to add the pre-integrated factor: %zu, state: %d -> %d.\n", v244, v275, v295);
                  sub_20E863570((uint64_t)v1040);
                }
                sub_20E863570((uint64_t)v1040);
                v297 = *(std::__shared_weak_count **)&v1042[32];
                if (*(_QWORD *)&v1042[32])
                {
                  v298 = (unint64_t *)(*(_QWORD *)&v1042[32] + 8);
                  do
                    v299 = __ldaxr(v298);
                  while (__stlxr(v299 - 1, v298));
                  if (!v299)
                  {
                    ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                    std::__shared_weak_count::__release_weak(v297);
                  }
                }
                goto LABEL_356;
              }
            }
            memmove(v255, v253, v254);
            goto LABEL_288;
          }
        }
        v122 = v121;
        goto LABEL_188;
      }
    }
  }
  v129 = *(_QWORD *)(v21 + 824);
  v130 = *(_QWORD *)(v22 + 824);
  v11[839] = v11[15];
  v11[840] = v11 + 22;
  sub_20F61F108((uint64_t)(v11 + 60), v1098);
  v131 = v1098[0];
  v132 = v6[32];
  if (v6[32])
  {
    v133 = *v6;
    v1139[0] = *(_OWORD *)(v6 + 1);
    *(_OWORD *)((char *)v1139 + 15) = *((_OWORD *)v6 + 1);
    v134 = v1098[0];
    v135 = v8;
    if (v1098[0])
      goto LABEL_86;
  }
  else
  {
    v133 = 0;
    v134 = v1098[0];
    v135 = v8;
    if (v1098[0])
      goto LABEL_86;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 179, (uint64_t)"sqrt_I_ != nullptr", 18, (uint64_t)"Covariance cannot be nullptr", 28, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v134 = v1098[0];
LABEL_86:
  v136 = (std::__shared_weak_count *)v1098[1];
  *(_QWORD *)&v1089 = v134;
  *((_QWORD *)&v1089 + 1) = v1098[1];
  v1098[1] = 0;
  v1098[0] = 0;
  *(_OWORD *)v1097 = __PAIR128__(*((unint64_t *)&v1089 + 1), v134);
  if (*((_QWORD *)&v1089 + 1))
  {
    v137 = (unint64_t *)&v136->__shared_owners_;
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
  }
  v139 = (char *)v985[794];
  v140 = (char *)v985[795];
  if (v139 == v140)
  {
    v140 = (char *)v985[794];
  }
  else if (*((_QWORD *)v140 - 1002) >= v135)
  {
    v141 = 0x2F028E0D4911E25DLL * ((v140 - v139) >> 4);
    do
    {
      v142 = v141 >> 1;
      v143 = &v139[8016 * (v141 >> 1)];
      v144 = *(_QWORD *)v143;
      v145 = v143 + 8016;
      v141 += ~(v141 >> 1);
      if (v144 < v135)
        v139 = v145;
      else
        v141 = v142;
    }
    while (v141);
    if (v139 != v140)
    {
      v140 = v139;
      if (*(_QWORD *)v139 == v135)
      {
        v146 = 0;
        v147 = v985;
        if (!v136)
          goto LABEL_168;
        goto LABEL_164;
      }
    }
  }
  if (v136)
  {
    v148 = (unint64_t *)&v136->__shared_owners_;
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
  *(_QWORD *)&v1006 = v8;
  v1007 = v131;
  v1008[0] = 0;
  v1008[32] = 0;
  if (v132)
  {
    v1008[0] = v133;
    *(_OWORD *)&v1008[1] = v1139[0];
    *(_OWORD *)&v1008[16] = *(_OWORD *)((char *)v1139 + 15);
    v1008[32] = 1;
  }
  *(_QWORD *)&v1008[40] = v130;
  *(_QWORD *)&v1008[48] = v129;
  BYTE8(v1009[127]) = 0;
  v1015 = 0;
  v1016 = 257;
  v1017 = 0u;
  v1018 = 0u;
  v1019 = 0;
  *(_QWORD *)&v1038 = v134;
  *((_QWORD *)&v1038 + 1) = v136;
  v147 = v985;
  if (v136)
  {
    v150 = (unint64_t *)&v136->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    v1036 = 0xBFF0000000000000;
    v1037 = 0;
    v1039 = 0;
    do
      v152 = __ldaxr(v150);
    while (__stlxr(v152 - 1, v150));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  else
  {
    v1036 = 0xBFF0000000000000;
    v1037 = 0;
    v1039 = 0;
  }
  v153 = (char *)v985[647];
  v154 = (char *)v985[648];
  v155 = v153;
  if (v154 != v153)
  {
    v156 = (v154 - v153) >> 4;
    v155 = (char *)v985[647];
    do
    {
      v157 = v156 >> 1;
      v158 = (unsigned int *)&v155[16 * (v156 >> 1)];
      v160 = *v158;
      v159 = (char *)(v158 + 4);
      v156 += ~(v156 >> 1);
      if (v160 < v7)
        v155 = v159;
      else
        v156 = v157;
    }
    while (v156);
  }
  if (v155 == v154 || *(_DWORD *)v155 != v7)
    goto LABEL_148;
  v161 = *((_QWORD *)v155 + 1);
  *(_QWORD *)&v1017 = v161;
  ++*(_DWORD *)(*((_QWORD *)v155 + 1) + 8);
  v162 = (char *)v985[659];
  v163 = (char *)v985[660];
  v164 = v162;
  if (v163 != v162)
  {
    v165 = (v163 - v162) >> 4;
    v164 = (char *)v985[659];
    do
    {
      v166 = v165 >> 1;
      v167 = (unsigned int *)&v164[16 * (v165 >> 1)];
      v169 = *v167;
      v168 = (char *)(v167 + 4);
      v165 += ~(v165 >> 1);
      if (v169 < v7)
        v164 = v168;
      else
        v165 = v166;
    }
    while (v165);
  }
  if (v164 == v163 || *(_DWORD *)v164 != v7)
    goto LABEL_148;
  v170 = *((_QWORD *)v164 + 1);
  *((_QWORD *)&v1017 + 1) = v170;
  ++*(_DWORD *)(*((_QWORD *)v164 + 1) + 8);
  if (v154 != v153)
  {
    v171 = (v154 - v153) >> 4;
    do
    {
      v172 = v171 >> 1;
      v173 = (unsigned int *)&v153[16 * (v171 >> 1)];
      v175 = *v173;
      v174 = (char *)(v173 + 4);
      v171 += ~(v171 >> 1);
      if (v175 < v8)
        v153 = v174;
      else
        v171 = v172;
    }
    while (v171);
  }
  if (v153 == v154 || *(_DWORD *)v153 != v8)
    goto LABEL_148;
  v176 = *((_QWORD *)v153 + 1);
  *(_QWORD *)&v1018 = v176;
  ++*(_DWORD *)(*((_QWORD *)v153 + 1) + 8);
  if (v163 != v162)
  {
    v177 = (v163 - v162) >> 4;
    do
    {
      v178 = v177 >> 1;
      v179 = (unsigned int *)&v162[16 * (v177 >> 1)];
      v181 = *v179;
      v180 = (char *)(v179 + 4);
      v177 += ~(v177 >> 1);
      if (v181 < v8)
        v162 = v180;
      else
        v177 = v178;
    }
    while (v177);
  }
  if (v162 == v163
    || *(_DWORD *)v162 != v8
    || (v182 = *((_QWORD *)v162 + 1),
        *((_QWORD *)&v1018 + 1) = v182,
        ++*(_DWORD *)(*((_QWORD *)v162 + 1) + 8),
        v183 = v985[707],
        v985[708] == v183)
    || *(_DWORD *)v183)
  {
LABEL_148:
    if ((_QWORD)v1017)
      --*(_DWORD *)(v1017 + 8);
    if (*((_QWORD *)&v1017 + 1))
      --*(_DWORD *)(*((_QWORD *)&v1017 + 1) + 8);
    if ((_QWORD)v1018)
      --*(_DWORD *)(v1018 + 8);
    if (*((_QWORD *)&v1018 + 1))
      --*(_DWORD *)(*((_QWORD *)&v1018 + 1) + 8);
    v146 = 0;
    if (v1019)
      --*(_DWORD *)(v1019 + 8);
  }
  else
  {
    v303 = *(_QWORD *)(v183 + 8);
    v1019 = v303;
    ++*(_DWORD *)(*(_QWORD *)(v183 + 8) + 8);
    if (*(_BYTE *)(v161 + 20)
      || *(_BYTE *)(v170 + 20)
      || *(_BYTE *)(v176 + 20)
      || *(_BYTE *)(v182 + 20)
      || *(_BYTE *)(v303 + 20))
    {
      *(_OWORD *)&v1040[8] = v1006;
      *(_QWORD *)v1040 = v8;
      v1041 = v1007;
      v1042[0] = 0;
      v1042[32] = 0;
      if (v1008[32])
      {
        *(_OWORD *)v1042 = *(_OWORD *)v1008;
        *(_OWORD *)&v1042[16] = *(_OWORD *)&v1008[16];
        v1042[32] = 1;
      }
      *(_OWORD *)&v1042[40] = *(_OWORD *)&v1008[40];
      memcpy(&v1042[56], &v1008[56], 0x708uLL);
      memcpy(&v1042[1856], v1009, 0x708uLL);
      *(_OWORD *)&v1042[3720] = *(_OWORD *)((char *)&v1009[116] + 8);
      *(_OWORD *)&v1042[3736] = *(_OWORD *)((char *)&v1009[117] + 8);
      *(_OWORD *)&v1042[3752] = *(_OWORD *)((char *)&v1009[118] + 8);
      *(_OWORD *)&v1042[3656] = *(_OWORD *)((char *)&v1009[112] + 8);
      *(_OWORD *)&v1042[3672] = *(_OWORD *)((char *)&v1009[113] + 8);
      *(_OWORD *)&v1042[3688] = *(_OWORD *)((char *)&v1009[114] + 8);
      *(_OWORD *)&v1042[3704] = *(_OWORD *)((char *)&v1009[115] + 8);
      *(_OWORD *)&v1042[3840] = v1009[124];
      *(_OWORD *)&v1042[3856] = v1009[125];
      *(_OWORD *)&v1042[3872] = v1009[126];
      *(_OWORD *)&v1042[3776] = v1009[120];
      *(_OWORD *)&v1042[3792] = v1009[121];
      *(_OWORD *)&v1042[3808] = v1009[122];
      *(_QWORD *)&v1042[3768] = *((_QWORD *)&v1009[119] + 1);
      *(_QWORD *)&v1042[3888] = *(_QWORD *)&v1009[127];
      *(_OWORD *)&v1042[3824] = v1009[123];
      v1042[3896] = 0;
      v1056 = 0;
      if (v1015)
      {
        memcpy(&v1042[3896], (char *)&v1009[127] + 8, 0x708uLL);
        v1047 = v1009[244];
        v1048 = v1009[245];
        v1049 = v1009[246];
        v1043 = v1009[240];
        v1044 = v1009[241];
        v1045 = v1009[242];
        v1050 = v1010;
        v1046 = v1009[243];
        v916 = v1011;
        v1051 = v1011;
        v915 = v1012;
        v1053 = v1012;
        v1052 = &off_24CA00398;
        memcpy(v1054, v1013, sizeof(v1054));
        v304 = v1014;
        v1055 = v1014;
        v1056 = 1;
      }
      v1058 = v1017;
      v1059 = v1018;
      v1065 = v1024;
      v1066 = v1025;
      v1067 = v1026;
      v1061 = v1020;
      v1062 = v1021;
      v1063 = v1022;
      v1064 = v1023;
      v1075 = v1034;
      v1074 = v1033;
      v1073 = v1032;
      v1072 = v1031;
      v1071 = v1030;
      v1070 = v1029;
      v1057 = v1016;
      v1060 = v1019;
      v1068 = v1027;
      v1069 = v1028;
      v1076 = v1035;
      v1078 = v1037;
      v1077 = v1036;
      v305 = v1038;
      v1079 = v1038;
      v306 = (std::__shared_weak_count *)*((_QWORD *)&v1038 + 1);
      v1038 = 0uLL;
      v1080 = v1039;
      v974 = (char *)v985[795];
      if (v974 == v140 || *(_QWORD *)v140 != v8)
      {
        v308 = v985[794];
        v309 = (uint64_t)&v140[-v308];
        v310 = (uint64_t)&v140[-v308] / 8016;
        v311 = (char *)(v308 + 8016 * v310);
        v312 = v985[796];
        v941 = v310;
        if ((unint64_t)v974 >= v312)
        {
          v368 = 0x2F028E0D4911E25DLL * ((uint64_t)&v974[-v308] >> 4) + 1;
          if (v368 > 0x82CF750393AC3)
            sub_20E867F44();
          v369 = (char *)v985[794];
          if (0x5E051C1A9223C4BALL * ((uint64_t)(v312 - v308) >> 4) > v368)
            v368 = 0x5E051C1A9223C4BALL * ((uint64_t)(v312 - v308) >> 4);
          if ((unint64_t)(0x2F028E0D4911E25DLL * ((uint64_t)(v312 - v308) >> 4)) >= 0x4167BA81C9D61)
            v370 = 0x82CF750393AC3;
          else
            v370 = v368;
          *(_QWORD *)&object[32] = v985 + 796;
          v371 = v982;
          if (v370)
          {
            if (v370 > 0x82CF750393AC3)
              sub_20E877A38();
            v372 = (char *)operator new(8016 * v370);
            v310 = v941;
          }
          else
          {
            v372 = 0;
          }
          v503 = &v372[8016 * v310];
          *(_QWORD *)object = v372;
          *(_QWORD *)&object[8] = v503;
          *(_QWORD *)&object[16] = v503;
          *(_QWORD *)&object[24] = &v372[8016 * v370];
          if (v310 == v370)
          {
            if (v309 < 1)
            {
              if (v369 == v140)
                v517 = 1;
              else
                v517 = 2 * v310;
              if (v517 > 0x82CF750393AC3)
                sub_20E877A38();
              v518 = (char *)operator new(8016 * v517);
              v503 = &v518[8016 * (v517 >> 2)];
              *(_QWORD *)object = v518;
              *(_QWORD *)&object[8] = v503;
              *(_QWORD *)&object[16] = v503;
              *(_QWORD *)&object[24] = &v518[8016 * v517];
              if (v372)
                operator delete(v372);
              v147 = v985;
              v371 = v982;
            }
            else
            {
              v504 = v310 + 2;
              if (v310 >= -1)
                v504 = v310 + 1;
              v503 -= 8016 * (v504 >> 1);
              *(_QWORD *)&object[16] = v503;
              *(_QWORD *)&object[8] = v503;
            }
          }
          *(_QWORD *)v503 = v371;
          *(_OWORD *)(v503 + 8) = v1006;
          *((_QWORD *)v503 + 3) = v1041;
          v503[32] = 0;
          v503[64] = 0;
          if (v1042[32])
          {
            v519 = *(_OWORD *)&v1042[16];
            *((_OWORD *)v503 + 2) = *(_OWORD *)v1042;
            *((_OWORD *)v503 + 3) = v519;
            v503[64] = 1;
          }
          *(_OWORD *)(v503 + 72) = *(_OWORD *)&v1042[40];
          memcpy(v503 + 88, &v1042[56], 0x708uLL);
          memcpy(v503 + 1888, &v1042[1856], 0x708uLL);
          v520 = *(_OWORD *)&v1042[3688];
          *(_OWORD *)(v503 + 3736) = *(_OWORD *)&v1042[3704];
          *(_OWORD *)(v503 + 3720) = v520;
          v521 = *(_OWORD *)&v1042[3656];
          *(_OWORD *)(v503 + 3704) = *(_OWORD *)&v1042[3672];
          *(_OWORD *)(v503 + 3688) = v521;
          *((_QWORD *)v503 + 475) = *(_QWORD *)&v1042[3768];
          *(_OWORD *)(v503 + 3784) = *(_OWORD *)&v1042[3752];
          v522 = *(_OWORD *)&v1042[3720];
          *(_OWORD *)(v503 + 3768) = *(_OWORD *)&v1042[3736];
          *(_OWORD *)(v503 + 3752) = v522;
          v523 = *(_OWORD *)&v1042[3792];
          *((_OWORD *)v503 + 238) = *(_OWORD *)&v1042[3776];
          *((_OWORD *)v503 + 239) = v523;
          v524 = *(_OWORD *)&v1042[3824];
          *((_OWORD *)v503 + 240) = *(_OWORD *)&v1042[3808];
          *((_OWORD *)v503 + 241) = v524;
          *((_OWORD *)v503 + 244) = *(_OWORD *)&v1042[3872];
          v525 = *(_OWORD *)&v1042[3840];
          *((_OWORD *)v503 + 243) = *(_OWORD *)&v1042[3856];
          *((_QWORD *)v503 + 490) = *(_QWORD *)&v1042[3888];
          *((_OWORD *)v503 + 242) = v525;
          v503[3928] = 0;
          v503[7680] = 0;
          v307 = v981;
          if (v1056)
          {
            memcpy(v503 + 3928, &v1042[3896], 0x708uLL);
            *((_OWORD *)v503 + 362) = v1047;
            *((_OWORD *)v503 + 363) = v1048;
            *((_OWORD *)v503 + 364) = v1049;
            *((_QWORD *)v503 + 730) = v1050;
            *((_OWORD *)v503 + 358) = v1043;
            *((_OWORD *)v503 + 359) = v1044;
            *((_OWORD *)v503 + 360) = v1045;
            *((_OWORD *)v503 + 361) = v1046;
            v503[5848] = v1051;
            v503[5864] = v1053;
            *((_QWORD *)v503 + 732) = &off_24CA00398;
            memcpy(v503 + 5872, v1054, 0x708uLL);
            *((_QWORD *)v503 + 959) = v1055;
            v503[7680] = 1;
          }
          *((_WORD *)v503 + 3844) = v1057;
          v526 = v1059;
          *((_OWORD *)v503 + 481) = v1058;
          *((_OWORD *)v503 + 482) = v526;
          *((_QWORD *)v503 + 966) = v1060;
          v527 = v1062;
          *(_OWORD *)(v503 + 7736) = v1061;
          *(_OWORD *)(v503 + 7752) = v527;
          v528 = v1064;
          *(_OWORD *)(v503 + 7768) = v1063;
          *(_OWORD *)(v503 + 7784) = v528;
          *((_QWORD *)v503 + 981) = v1068;
          *(_OWORD *)(v503 + 7832) = v1067;
          v529 = v1065;
          *(_OWORD *)(v503 + 7816) = v1066;
          *(_OWORD *)(v503 + 7800) = v529;
          v530 = v1069;
          v531 = v1070;
          v532 = v1071;
          *((_OWORD *)v503 + 494) = v1072;
          *((_OWORD *)v503 + 493) = v532;
          *((_OWORD *)v503 + 492) = v531;
          *((_OWORD *)v503 + 491) = v530;
          v533 = v1073;
          v534 = v1074;
          v535 = v1075;
          *((_QWORD *)v503 + 996) = v1076;
          *((_OWORD *)v503 + 497) = v535;
          *((_OWORD *)v503 + 496) = v534;
          *((_OWORD *)v503 + 495) = v533;
          v536 = v1077;
          v503[7984] = v1078;
          *((_QWORD *)v503 + 997) = v536;
          *(_OWORD *)(v503 + 7992) = v1079;
          v1079 = 0uLL;
          v503[8008] = v1080;
          v537 = v503 + 8016;
          *(_QWORD *)&object[16] = v503 + 8016;
          v976 = (char *)v147[794];
          if (v976 != v311)
          {
            v538 = 0;
            v938 = v369;
            v539 = &v369[8016 * v941];
            v540 = v539 - 8016;
            v972 = v539 - 7952;
            v541 = v539 - 24048;
            v983 = v503 - 8016;
            v542 = v503 - 7952;
            v947 = v503 - 7984;
            v943 = v311;
            do
            {
              _X19 = &v541[v538];
              __asm { PRFM            #0, [X19] }
              *(_QWORD *)&v983[v538] = *(_QWORD *)&v540[v538];
              *(_OWORD *)&v503[v538 - 8008] = *(_OWORD *)&v541[v538 + 16040];
              *(_QWORD *)&v503[v538 - 7992] = *(_QWORD *)&v541[v538 + 16056];
              v564 = &v947[v538];
              v947[v538] = 0;
              v542[v538] = 0;
              __asm { PRFM            #0, [X19,#0x40] }
              if (v972[v538])
              {
                v566 = *((_OWORD *)_X19 + 1005);
                *(_OWORD *)v564 = *((_OWORD *)_X19 + 1004);
                *((_OWORD *)v564 + 1) = v566;
                v542[v538] = 1;
              }
              _X21 = _X19 + 7680;
              *(_OWORD *)&v503[v538 - 7944] = *(_OWORD *)(_X19 + 16104);
              memcpy(&v503[v538 - 7928], _X19 + 16120, 0x708uLL);
              memcpy(&v503[v538 - 6128], _X19 + 17920, 0x708uLL);
              v568 = &v503[v538 - 4208];
              v569 = *(_OWORD *)(_X19 + 19720);
              v570 = *(_OWORD *)(_X19 + 19736);
              v571 = *(_OWORD *)(_X19 + 19752);
              *(_OWORD *)(v568 - 72) = *(_OWORD *)(_X19 + 19768);
              *(_OWORD *)(v568 - 88) = v571;
              *(_OWORD *)(v568 - 104) = v570;
              *(_OWORD *)(v568 - 120) = v569;
              v572 = *(_OWORD *)(_X19 + 19784);
              v573 = *(_OWORD *)(_X19 + 19800);
              v574 = *(_OWORD *)(_X19 + 19816);
              *((_QWORD *)v568 - 1) = *((_QWORD *)_X19 + 2479);
              *(_OWORD *)(v568 - 24) = v574;
              *(_OWORD *)(v568 - 40) = v573;
              *(_OWORD *)(v568 - 56) = v572;
              v575 = *((_QWORD *)_X19 + 2494);
              v576 = *((_OWORD *)_X19 + 1244);
              v577 = *((_OWORD *)_X19 + 1246);
              *((_OWORD *)v568 + 5) = *((_OWORD *)_X19 + 1245);
              *((_OWORD *)v568 + 6) = v577;
              *((_OWORD *)v568 + 4) = v576;
              *((_QWORD *)v568 + 14) = v575;
              v578 = *((_OWORD *)_X19 + 1240);
              v579 = *((_OWORD *)_X19 + 1241);
              v580 = *((_OWORD *)_X19 + 1243);
              *((_OWORD *)v568 + 2) = *((_OWORD *)_X19 + 1242);
              *((_OWORD *)v568 + 3) = v580;
              *(_OWORD *)v568 = v578;
              *((_OWORD *)v568 + 1) = v579;
              v581 = &v503[v538];
              v582 = &v503[v538 - 4088];
              *v582 = 0;
              v583 = &v503[v538 - 336];
              *v583 = 0;
              v584 = &v311[v538];
              __asm { PRFM            #0, [X21] }
              if (v311[v538 - 336])
              {
                _X21 = _X19 + 5848;
                memcpy(v582, &v541[v538 + 19960], 0x708uLL);
                v587 = v581 - 2288;
                v588 = *(_OWORD *)&v541[v538 + 21776];
                v589 = *(_OWORD *)&v541[v538 + 21808];
                v590 = *(_OWORD *)&v541[v538 + 21760];
                *((_OWORD *)v587 + 2) = *(_OWORD *)&v541[v538 + 21792];
                *((_OWORD *)v587 + 3) = v589;
                *(_OWORD *)v587 = v590;
                *((_OWORD *)v587 + 1) = v588;
                v591 = *(_OWORD *)&v541[v538 + 21840];
                v592 = *(_OWORD *)&v541[v538 + 21856];
                v593 = *(_OWORD *)&v541[v538 + 21824];
                *((_QWORD *)v587 + 14) = *(_QWORD *)&v541[v538 + 21872];
                *((_OWORD *)v587 + 5) = v591;
                *((_OWORD *)v587 + 6) = v592;
                *((_OWORD *)v587 + 4) = v593;
                __asm { PRFM            #0, [X21] }
                *(v581 - 2168) = *(v584 - 2168);
                *(v581 - 2152) = *(v584 - 2152);
                *((_QWORD *)v581 - 270) = &off_24CA00398;
                v311 = v943;
                memcpy(v581 - 2144, &v541[v538 + 21904], 0x708uLL);
                *(_QWORD *)&v983[v538 + 7672] = *(_QWORD *)&v540[v538 + 7672];
                *v583 = 1;
              }
              _X8 = _X19 + 7992;
              *((_WORD *)v581 - 164) = *((_WORD *)v584 - 164);
              v544 = v581 - 320;
              v545 = *(_OWORD *)&v541[v538 + 23728];
              v546 = *(_OWORD *)&v541[v538 + 23744];
              *((_QWORD *)v544 + 4) = *(_QWORD *)&v541[v538 + 23760];
              *(_OWORD *)v544 = v545;
              *((_OWORD *)v544 + 1) = v546;
              v547 = v581 - 280;
              v549 = *(_OWORD *)&v541[v538 + 23848];
              v548 = *(_OWORD *)&v541[v538 + 23864];
              v550 = *(_QWORD *)&v541[v538 + 23880];
              *(_OWORD *)(v581 - 216) = *(_OWORD *)&v541[v538 + 23832];
              *((_QWORD *)v581 - 21) = v550;
              *(_OWORD *)(v581 - 184) = v548;
              *(_OWORD *)(v581 - 200) = v549;
              v551 = *(_OWORD *)&v541[v538 + 23768];
              v552 = *(_OWORD *)&v541[v538 + 23784];
              v553 = *(_OWORD *)&v541[v538 + 23800];
              *(_OWORD *)(v581 - 232) = *(_OWORD *)&v541[v538 + 23816];
              *(_OWORD *)(v581 - 248) = v553;
              *(_OWORD *)v547 = v551;
              *((_OWORD *)v547 + 1) = v552;
              v554 = *(_OWORD *)&v541[v538 + 23968];
              v555 = *(_OWORD *)&v541[v538 + 23984];
              v556 = *(_OWORD *)&v541[v538 + 23952];
              *((_QWORD *)v581 - 6) = *(_QWORD *)&v541[v538 + 24000];
              *((_OWORD *)v581 - 5) = v554;
              *((_OWORD *)v581 - 4) = v555;
              *((_OWORD *)v581 - 6) = v556;
              v557 = *(_OWORD *)&v541[v538 + 23888];
              v558 = *(_OWORD *)&v541[v538 + 23904];
              v559 = *(_OWORD *)&v541[v538 + 23936];
              *((_OWORD *)v581 - 8) = *(_OWORD *)&v541[v538 + 23920];
              *((_OWORD *)v581 - 7) = v559;
              *((_OWORD *)v581 - 10) = v557;
              *((_OWORD *)v581 - 9) = v558;
              v560 = *(_QWORD *)&v541[v538 + 24008];
              *(v581 - 32) = v541[v538 + 24016];
              *((_QWORD *)v581 - 5) = v560;
              __asm { PRFM            #0, [X8] }
              *(_OWORD *)(v581 - 24) = *(_OWORD *)(v584 - 24);
              *((_QWORD *)v584 - 3) = 0;
              *((_QWORD *)v584 - 2) = 0;
              *(v581 - 8) = *(v584 - 8);
              v538 -= 8016;
              v542 = v503 - 7952;
            }
            while (&v311[v538] != v976);
            v537 = *(char **)&object[16];
            v503 += v538;
            v147 = v985;
            v307 = v981;
            v369 = v938;
          }
          v984 = (char *)v147[795];
          if (v984 != v311)
          {
            v950 = v503;
            v595 = 0;
            v596 = &v369[8016 * v941];
            v977 = v596 + 8008;
            v964 = v596 + 5864;
            v961 = v596 + 5848;
            v973 = v596 + 7680;
            v597 = v537 + 7680;
            do
            {
              v617 = &v537[v595];
              _X19 = &v311[v595];
              __asm { PRFM            #0, [X19,#0x3EA0] }
              *(_QWORD *)v617 = *(_QWORD *)&v311[v595];
              *(_OWORD *)(v617 + 8) = *(_OWORD *)&v311[v595 + 8];
              *((_QWORD *)v617 + 3) = *(_QWORD *)&v311[v595 + 24];
              v537[v595 + 32] = 0;
              v617[64] = 0;
              __asm { PRFM            #0, [X19,#0x3EE0] }
              if (v311[v595 + 64])
              {
                v621 = *((_OWORD *)_X19 + 3);
                *(_OWORD *)&v537[v595 + 32] = *((_OWORD *)_X19 + 2);
                *(_OWORD *)&v537[v595 + 48] = v621;
                v617[64] = 1;
              }
              _X21 = _X19 + 23712;
              *(_OWORD *)(v617 + 72) = *(_OWORD *)(_X19 + 72);
              memcpy(v617 + 88, _X19 + 88, 0x708uLL);
              memcpy(v617 + 1888, _X19 + 1888, 0x708uLL);
              v623 = *(_OWORD *)(_X19 + 3688);
              v624 = *(_OWORD *)(_X19 + 3704);
              v625 = *(_OWORD *)(_X19 + 3736);
              *(_OWORD *)(v617 + 3720) = *(_OWORD *)(_X19 + 3720);
              *(_OWORD *)(v617 + 3736) = v625;
              *(_OWORD *)(v617 + 3688) = v623;
              *(_OWORD *)(v617 + 3704) = v624;
              v626 = *(_OWORD *)(_X19 + 3752);
              v627 = *(_OWORD *)(_X19 + 3768);
              v628 = *(_OWORD *)(_X19 + 3784);
              *((_QWORD *)v617 + 475) = *((_QWORD *)_X19 + 475);
              *(_OWORD *)(v617 + 3768) = v627;
              *(_OWORD *)(v617 + 3784) = v628;
              *(_OWORD *)(v617 + 3752) = v626;
              v629 = *((_QWORD *)_X19 + 490);
              v630 = *((_OWORD *)_X19 + 242);
              v631 = *((_OWORD *)_X19 + 243);
              *((_OWORD *)v617 + 244) = *((_OWORD *)_X19 + 244);
              *((_OWORD *)v617 + 243) = v631;
              *((_OWORD *)v617 + 242) = v630;
              *((_QWORD *)v617 + 490) = v629;
              v632 = *((_OWORD *)_X19 + 238);
              v633 = *((_OWORD *)_X19 + 239);
              v634 = *((_OWORD *)_X19 + 240);
              *((_OWORD *)v617 + 241) = *((_OWORD *)_X19 + 241);
              *((_OWORD *)v617 + 240) = v634;
              *((_OWORD *)v617 + 239) = v633;
              *((_OWORD *)v617 + 238) = v632;
              v617[3928] = 0;
              v597[v595] = 0;
              __asm { PRFM            #0, [X21] }
              if (LOBYTE(v973[v595 / 8]))
              {
                _X21 = _X19 + 21880;
                memcpy(v617 + 3928, &v311[v595 + 3928], 0x708uLL);
                v637 = &v537[v595];
                v638 = *(_OWORD *)&v311[v595 + 5744];
                v639 = *(_OWORD *)&v311[v595 + 5760];
                v640 = *(_OWORD *)&v311[v595 + 5776];
                *((_OWORD *)v637 + 358) = *(_OWORD *)&v311[v595 + 5728];
                *((_OWORD *)v637 + 361) = v640;
                *((_OWORD *)v637 + 360) = v639;
                *((_OWORD *)v637 + 359) = v638;
                v641 = *(_OWORD *)&v311[v595 + 5808];
                v642 = *(_OWORD *)&v311[v595 + 5824];
                v643 = *(_QWORD *)&v311[v595 + 5840];
                *((_OWORD *)v637 + 362) = *(_OWORD *)&v311[v595 + 5792];
                *((_QWORD *)v637 + 730) = v643;
                *((_OWORD *)v637 + 364) = v642;
                *((_OWORD *)v637 + 363) = v641;
                __asm { PRFM            #0, [X21] }
                v537[v595 + 5848] = v961[v595 / 8];
                v537[v595 + 5864] = v964[v595 / 8];
                *((_QWORD *)v637 + 732) = &off_24CA00398;
                memcpy(&v537[v595 + 5872], &v311[v595 + 5872], 0x708uLL);
                *((_QWORD *)v637 + 959) = *(_QWORD *)&v311[v595 + 7672];
                v307 = v981;
                v597[v595] = 1;
              }
              _X8 = _X19 + 24024;
              v599 = &v537[v595];
              *((_WORD *)v599 + 3844) = *(_WORD *)&v311[v595 + 7688];
              v600 = *(_OWORD *)&v311[v595 + 7696];
              v601 = *(_OWORD *)&v311[v595 + 7712];
              *((_QWORD *)v599 + 966) = *(_QWORD *)&v311[v595 + 7728];
              *((_OWORD *)v599 + 482) = v601;
              *((_OWORD *)v599 + 481) = v600;
              v602 = &v537[v595 + 7736];
              v604 = *(_OWORD *)&v311[v595 + 7816];
              v603 = *(_OWORD *)&v311[v595 + 7832];
              v605 = *(_OWORD *)&v311[v595 + 7800];
              *((_QWORD *)v599 + 981) = *(_QWORD *)&v311[v595 + 7848];
              *((_OWORD *)v602 + 5) = v604;
              *((_OWORD *)v602 + 6) = v603;
              *((_OWORD *)v602 + 4) = v605;
              v606 = *(_OWORD *)&v311[v595 + 7736];
              v607 = *(_OWORD *)&v311[v595 + 7752];
              v608 = *(_OWORD *)&v311[v595 + 7784];
              *((_OWORD *)v602 + 2) = *(_OWORD *)&v311[v595 + 7768];
              *((_OWORD *)v602 + 3) = v608;
              *(_OWORD *)v602 = v606;
              *((_OWORD *)v602 + 1) = v607;
              v609 = *(_OWORD *)&v311[v595 + 7936];
              v610 = *(_OWORD *)&v311[v595 + 7952];
              v611 = *(_QWORD *)&v311[v595 + 7968];
              *((_OWORD *)v599 + 495) = *(_OWORD *)&v311[v595 + 7920];
              *((_QWORD *)v599 + 996) = v611;
              *((_OWORD *)v599 + 497) = v610;
              *((_OWORD *)v599 + 496) = v609;
              v612 = *(_OWORD *)&v311[v595 + 7856];
              v613 = *(_OWORD *)&v311[v595 + 7872];
              v614 = *(_OWORD *)&v311[v595 + 7888];
              *((_OWORD *)v599 + 494) = *(_OWORD *)&v311[v595 + 7904];
              *((_OWORD *)v599 + 493) = v614;
              *((_OWORD *)v599 + 492) = v613;
              *((_OWORD *)v599 + 491) = v612;
              v615 = *(_QWORD *)&v311[v595 + 7976];
              v537[v595 + 7984] = v311[v595 + 7984];
              *((_QWORD *)v599 + 997) = v615;
              __asm { PRFM            #0, [X8] }
              *((_QWORD *)v599 + 999) = *(_QWORD *)&v311[v595 + 7992];
              *((_QWORD *)v599 + 1000) = *(_QWORD *)&v311[v595 + 8000];
              *(_OWORD *)&v311[v595 + 7992] = 0u;
              v537[v595 + 8008] = v977[v595 / 8];
              v595 += 8016;
            }
            while (&v311[v595] != v984);
            v147 = v985;
            v311 = (char *)v985[795];
            v537 += v595;
            v503 = v950;
          }
          v645 = (char *)v147[794];
          v147[794] = v503;
          v147[795] = v537;
          v646 = v147[796];
          v147[796] = *(_QWORD *)&object[24];
          *(_QWORD *)&object[24] = v646;
          *(_QWORD *)&object[8] = v645;
          *(_QWORD *)object = v645;
          if (v311 != v645)
          {
            do
            {
              *(_QWORD *)&object[16] = v311 - 8016;
              v647 = (std::__shared_weak_count *)*((_QWORD *)v311 - 2);
              if (v647)
              {
                v648 = (unint64_t *)&v647->__shared_owners_;
                do
                  v649 = __ldaxr(v648);
                while (__stlxr(v649 - 1, v648));
                if (!v649)
                {
                  ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
                  std::__shared_weak_count::__release_weak(v647);
                }
              }
              v311 = *(char **)&object[16];
            }
            while (*(char **)&object[16] != v645);
            v311 = *(char **)object;
          }
          if (v311)
            operator delete(v311);
        }
        else
        {
          v937 = v985[794];
          v313 = (char *)v985[795];
          if (v311 == v974)
          {
            *(_QWORD *)v974 = v982;
            v462 = v308 + 8016 * v310;
            *(_OWORD *)(v462 + 8) = *(_OWORD *)&v1040[8];
            v463 = v1041;
            *(_BYTE *)(v462 + 32) = 0;
            v464 = v462 + 32;
            *(_QWORD *)(v464 - 8) = v463;
            *(_BYTE *)(v464 + 32) = 0;
            if (v1042[32])
            {
              v465 = *(_OWORD *)&v1042[16];
              *(_OWORD *)v464 = *(_OWORD *)v1042;
              *(_OWORD *)(v464 + 16) = v465;
              *(_BYTE *)(v464 + 32) = 1;
            }
            v466 = v308 + 8016 * v310;
            *(_OWORD *)(v466 + 72) = *(_OWORD *)&v1042[40];
            v467 = v310;
            memcpy((void *)(v466 + 88), &v1042[56], 0x708uLL);
            memcpy((void *)(v466 + 1888), &v1042[1856], 0x708uLL);
            v468 = *(_OWORD *)&v1042[3656];
            v469 = *(_OWORD *)&v1042[3672];
            v470 = *(_OWORD *)&v1042[3688];
            *(_OWORD *)(v466 + 3736) = *(_OWORD *)&v1042[3704];
            *(_OWORD *)(v466 + 3720) = v470;
            *(_OWORD *)(v466 + 3704) = v469;
            *(_OWORD *)(v466 + 3688) = v468;
            v471 = *(_OWORD *)&v1042[3720];
            v472 = *(_OWORD *)&v1042[3736];
            v473 = *(_OWORD *)&v1042[3752];
            *(_QWORD *)(v466 + 3800) = *(_QWORD *)&v1042[3768];
            *(_OWORD *)(v466 + 3784) = v473;
            *(_OWORD *)(v466 + 3768) = v472;
            *(_OWORD *)(v466 + 3752) = v471;
            v474 = *(_QWORD *)&v1042[3888];
            v475 = *(_OWORD *)&v1042[3840];
            v476 = *(_OWORD *)&v1042[3856];
            *(_OWORD *)(v466 + 3904) = *(_OWORD *)&v1042[3872];
            *(_OWORD *)(v466 + 3888) = v476;
            *(_OWORD *)(v466 + 3872) = v475;
            *(_QWORD *)(v466 + 3920) = v474;
            v477 = *(_OWORD *)&v1042[3776];
            v478 = *(_OWORD *)&v1042[3792];
            v479 = *(_OWORD *)&v1042[3808];
            *(_OWORD *)(v466 + 3856) = *(_OWORD *)&v1042[3824];
            *(_OWORD *)(v466 + 3840) = v479;
            *(_OWORD *)(v466 + 3824) = v478;
            *(_OWORD *)(v466 + 3808) = v477;
            *(_BYTE *)(v466 + 3928) = 0;
            *(_BYTE *)(v466 + 7680) = 0;
            v307 = v981;
            if (v1056)
            {
              memcpy((void *)(v466 + 3928), &v1042[3896], 0x708uLL);
              v480 = v937 + 8016 * v467;
              v481 = v1043;
              v482 = v1044;
              v483 = v1045;
              *(_OWORD *)(v480 + 5776) = v1046;
              *(_OWORD *)(v480 + 5760) = v483;
              *(_OWORD *)(v480 + 5744) = v482;
              *(_OWORD *)(v480 + 5728) = v481;
              v484 = v1047;
              v485 = v1048;
              v486 = v1049;
              *(_QWORD *)(v480 + 5840) = v1050;
              *(_OWORD *)(v480 + 5824) = v486;
              *(_OWORD *)(v480 + 5808) = v485;
              *(_OWORD *)(v480 + 5792) = v484;
              *(_BYTE *)(v480 + 5848) = v1051;
              *(_BYTE *)(v480 + 5864) = v1053;
              *(_QWORD *)(v480 + 5856) = &off_24CA00398;
              memcpy((void *)(v480 + 5872), v1054, 0x708uLL);
              *(_QWORD *)(v480 + 7672) = v1055;
              *(_BYTE *)(v466 + 7680) = 1;
            }
            v487 = v937 + 8016 * v467;
            *(_WORD *)(v487 + 7688) = v1057;
            v488 = v1058;
            v489 = v1059;
            *(_QWORD *)(v487 + 7728) = v1060;
            *(_OWORD *)(v487 + 7712) = v489;
            *(_OWORD *)(v487 + 7696) = v488;
            v491 = v1066;
            v490 = v1067;
            v492 = v1068;
            *(_OWORD *)(v487 + 7800) = v1065;
            *(_QWORD *)(v487 + 7848) = v492;
            *(_OWORD *)(v487 + 7832) = v490;
            *(_OWORD *)(v487 + 7816) = v491;
            v493 = v1061;
            v494 = v1062;
            v495 = v1063;
            *(_OWORD *)(v487 + 7784) = v1064;
            *(_OWORD *)(v487 + 7768) = v495;
            *(_OWORD *)(v487 + 7752) = v494;
            *(_OWORD *)(v487 + 7736) = v493;
            v497 = v1074;
            v496 = v1075;
            v498 = v1076;
            *(_OWORD *)(v487 + 7920) = v1073;
            *(_QWORD *)(v487 + 7968) = v498;
            *(_OWORD *)(v487 + 7952) = v496;
            *(_OWORD *)(v487 + 7936) = v497;
            v499 = v1069;
            v500 = v1070;
            v501 = v1071;
            *(_OWORD *)(v487 + 7904) = v1072;
            *(_OWORD *)(v487 + 7888) = v501;
            *(_OWORD *)(v487 + 7872) = v500;
            *(_OWORD *)(v487 + 7856) = v499;
            v502 = v1077;
            *(_BYTE *)(v487 + 7984) = v1078;
            *(_QWORD *)(v487 + 7976) = v502;
            *(_OWORD *)(v487 + 7992) = v1079;
            v1079 = 0uLL;
            *(_BYTE *)(v487 + 8008) = v1080;
            v985[795] = v974 + 8016;
          }
          else
          {
            v921 = v305;
            v920 = v304;
            v970 = v306;
            v1174 = v985 + 796;
            *(_OWORD *)&object[8] = v1006;
            *(_QWORD *)object = v982;
            *(_QWORD *)&object[24] = v1007;
            object[32] = 0;
            object[64] = 0;
            if (v1008[32])
            {
              *(_OWORD *)&object[32] = *(_OWORD *)v1042;
              *(_OWORD *)&object[48] = *(_OWORD *)&v1042[16];
              object[64] = 1;
            }
            *(_OWORD *)&object[72] = *(_OWORD *)&v1008[40];
            memcpy(&object[88], &v1008[56], 0x708uLL);
            memcpy(v1141, v1009, 0x708uLL);
            *(_OWORD *)((char *)&v1141[116] + 8) = *(_OWORD *)((char *)&v1009[116] + 8);
            *(_OWORD *)((char *)&v1141[117] + 8) = *(_OWORD *)((char *)&v1009[117] + 8);
            *(_OWORD *)((char *)&v1141[118] + 8) = *(_OWORD *)((char *)&v1009[118] + 8);
            *(_OWORD *)((char *)&v1141[112] + 8) = *(_OWORD *)((char *)&v1009[112] + 8);
            *(_OWORD *)((char *)&v1141[113] + 8) = *(_OWORD *)((char *)&v1009[113] + 8);
            *(_OWORD *)((char *)&v1141[114] + 8) = *(_OWORD *)((char *)&v1009[114] + 8);
            *(_OWORD *)((char *)&v1141[115] + 8) = *(_OWORD *)((char *)&v1009[115] + 8);
            v1141[124] = v1009[124];
            v1141[125] = v1009[125];
            v1141[126] = v1009[126];
            v1141[120] = v1009[120];
            v1141[121] = v1009[121];
            v1141[122] = v1009[122];
            *((_QWORD *)&v1141[119] + 1) = *((_QWORD *)&v1009[119] + 1);
            *(_QWORD *)&v1141[127] = *(_QWORD *)&v1009[127];
            v1141[123] = v1009[123];
            BYTE8(v1141[127]) = 0;
            v1148 = 0;
            if (v1015)
            {
              memcpy((char *)&v1141[127] + 8, &v1042[3896], 0x708uLL);
              v1141[244] = v1047;
              v1141[245] = v1048;
              v1141[246] = v1049;
              v1142 = v1050;
              v1141[240] = v1043;
              v1141[241] = v1044;
              v1141[242] = v1045;
              v1143 = v916;
              v1145 = v915;
              v1141[243] = v1046;
              v1144 = &off_24CA00398;
              memcpy(v1146, v1054, sizeof(v1146));
              v1147 = v920;
              v1148 = 1;
            }
            v1157 = v1024;
            v1158 = v1025;
            v1159 = v1026;
            v1153 = v1020;
            v1154 = v1021;
            v1155 = v1022;
            v1156 = v1023;
            v1150 = v1017;
            v1151 = v1018;
            v1164 = v1031;
            v1163 = v1030;
            v1162 = v1029;
            v1161 = v1028;
            v1167 = v1034;
            v1166 = v1033;
            v1149 = v1016;
            v1152 = v1019;
            v1160 = v1027;
            v1165 = v1032;
            v1168 = v1035;
            v1170 = v1037;
            v1169 = v1036;
            v1171 = v921;
            v314 = v311 + 8016;
            v1172 = v970;
            v315 = v974;
            v316 = 0x2F028E0D4911E25DLL * ((v974 - (v311 + 8016)) >> 4);
            v1079 = 0uLL;
            v317 = v974 - 8016;
            v1173 = v1039;
            if ((unint64_t)v974 >= 0x1F50)
            {
              v318 = 0;
              v319 = 8016 * v941 + 16 * ((v974 - (v311 + 8016)) >> 4) + v937;
              v971 = v319 + 8008;
              v959 = v319 + 5864;
              __src = v319 + 5848;
              v966 = v319 + 7680;
              v320 = v974 + 7680;
              do
              {
                v340 = &v315[v318];
                _X19 = &v317[v318];
                __asm { PRFM            #0, [X19,#0x3EA0] }
                *(_QWORD *)v340 = *(_QWORD *)&v317[v318];
                *(_OWORD *)(v340 + 8) = *(_OWORD *)&v317[v318 + 8];
                *((_QWORD *)v340 + 3) = *(_QWORD *)&v317[v318 + 24];
                v315[v318 + 32] = 0;
                v340[64] = 0;
                __asm { PRFM            #0, [X19,#0x3EE0] }
                if (v317[v318 + 64])
                {
                  v344 = *((_OWORD *)_X19 + 3);
                  *(_OWORD *)&v315[v318 + 32] = *((_OWORD *)_X19 + 2);
                  *(_OWORD *)&v315[v318 + 48] = v344;
                  v340[64] = 1;
                }
                _X22 = _X19 + 23712;
                *(_OWORD *)(v340 + 72) = *(_OWORD *)(_X19 + 72);
                memcpy(v340 + 88, _X19 + 88, 0x708uLL);
                memcpy(v340 + 1888, _X19 + 1888, 0x708uLL);
                v346 = *(_OWORD *)(_X19 + 3688);
                v347 = *(_OWORD *)(_X19 + 3704);
                v348 = *(_OWORD *)(_X19 + 3736);
                *(_OWORD *)(v340 + 3720) = *(_OWORD *)(_X19 + 3720);
                *(_OWORD *)(v340 + 3736) = v348;
                *(_OWORD *)(v340 + 3688) = v346;
                *(_OWORD *)(v340 + 3704) = v347;
                v349 = *(_OWORD *)(_X19 + 3752);
                v350 = *(_OWORD *)(_X19 + 3768);
                v351 = *(_OWORD *)(_X19 + 3784);
                *((_QWORD *)v340 + 475) = *((_QWORD *)_X19 + 475);
                *(_OWORD *)(v340 + 3768) = v350;
                *(_OWORD *)(v340 + 3784) = v351;
                *(_OWORD *)(v340 + 3752) = v349;
                v352 = *((_QWORD *)_X19 + 490);
                v353 = *((_OWORD *)_X19 + 242);
                v354 = *((_OWORD *)_X19 + 243);
                *((_OWORD *)v340 + 244) = *((_OWORD *)_X19 + 244);
                *((_OWORD *)v340 + 243) = v354;
                *((_OWORD *)v340 + 242) = v353;
                *((_QWORD *)v340 + 490) = v352;
                v355 = *((_OWORD *)_X19 + 238);
                v356 = *((_OWORD *)_X19 + 239);
                v357 = *((_OWORD *)_X19 + 240);
                *((_OWORD *)v340 + 241) = *((_OWORD *)_X19 + 241);
                *((_OWORD *)v340 + 240) = v357;
                *((_OWORD *)v340 + 239) = v356;
                *((_OWORD *)v340 + 238) = v355;
                v340[3928] = 0;
                LOBYTE(v320[v318 / 8]) = 0;
                __asm { PRFM            #0, [X22] }
                if (*(_BYTE *)(v966 + v318))
                {
                  _X22 = _X19 + 21880;
                  memcpy(v340 + 3928, &v317[v318 + 3928], 0x708uLL);
                  v360 = &v974[v318];
                  v361 = *(_OWORD *)&v317[v318 + 5744];
                  v362 = *(_OWORD *)&v317[v318 + 5760];
                  v363 = *(_OWORD *)&v317[v318 + 5776];
                  *((_OWORD *)v360 + 358) = *(_OWORD *)&v317[v318 + 5728];
                  *((_OWORD *)v360 + 361) = v363;
                  *((_OWORD *)v360 + 360) = v362;
                  *((_OWORD *)v360 + 359) = v361;
                  v364 = *(_OWORD *)&v317[v318 + 5808];
                  v365 = *(_OWORD *)&v317[v318 + 5824];
                  v366 = *(_QWORD *)&v317[v318 + 5840];
                  *((_OWORD *)v360 + 362) = *(_OWORD *)&v317[v318 + 5792];
                  *((_QWORD *)v360 + 730) = v366;
                  *((_OWORD *)v360 + 364) = v365;
                  *((_OWORD *)v360 + 363) = v364;
                  __asm { PRFM            #0, [X22] }
                  v974[v318 + 5848] = *(_BYTE *)(__src + v318);
                  v974[v318 + 5864] = *(_BYTE *)(v959 + v318);
                  *((_QWORD *)v360 + 732) = &off_24CA00398;
                  memcpy(&v974[v318 + 5872], &v317[v318 + 5872], 0x708uLL);
                  *((_QWORD *)v360 + 959) = *(_QWORD *)&v317[v318 + 7672];
                  v315 = v974;
                  LOBYTE(v320[v318 / 8]) = 1;
                }
                _X8 = _X19 + 24024;
                v322 = &v315[v318];
                *((_WORD *)v322 + 3844) = *(_WORD *)&v317[v318 + 7688];
                v323 = *(_OWORD *)&v317[v318 + 7696];
                v324 = *(_OWORD *)&v317[v318 + 7712];
                *((_QWORD *)v322 + 966) = *(_QWORD *)&v317[v318 + 7728];
                *((_OWORD *)v322 + 482) = v324;
                *((_OWORD *)v322 + 481) = v323;
                v325 = &v315[v318 + 7736];
                v327 = *(_OWORD *)&v317[v318 + 7816];
                v326 = *(_OWORD *)&v317[v318 + 7832];
                v328 = *(_OWORD *)&v317[v318 + 7800];
                *((_QWORD *)v322 + 981) = *(_QWORD *)&v317[v318 + 7848];
                *((_OWORD *)v325 + 5) = v327;
                *((_OWORD *)v325 + 6) = v326;
                *((_OWORD *)v325 + 4) = v328;
                v329 = *(_OWORD *)&v317[v318 + 7736];
                v330 = *(_OWORD *)&v317[v318 + 7752];
                v331 = *(_OWORD *)&v317[v318 + 7784];
                *((_OWORD *)v325 + 2) = *(_OWORD *)&v317[v318 + 7768];
                *((_OWORD *)v325 + 3) = v331;
                *(_OWORD *)v325 = v329;
                *((_OWORD *)v325 + 1) = v330;
                v332 = *(_OWORD *)&v317[v318 + 7936];
                v333 = *(_OWORD *)&v317[v318 + 7952];
                v334 = *(_QWORD *)&v317[v318 + 7968];
                *((_OWORD *)v322 + 495) = *(_OWORD *)&v317[v318 + 7920];
                *((_QWORD *)v322 + 996) = v334;
                *((_OWORD *)v322 + 497) = v333;
                *((_OWORD *)v322 + 496) = v332;
                v335 = *(_OWORD *)&v317[v318 + 7856];
                v336 = *(_OWORD *)&v317[v318 + 7872];
                v337 = *(_OWORD *)&v317[v318 + 7888];
                *((_OWORD *)v322 + 494) = *(_OWORD *)&v317[v318 + 7904];
                *((_OWORD *)v322 + 493) = v337;
                *((_OWORD *)v322 + 492) = v336;
                *((_OWORD *)v322 + 491) = v335;
                v338 = *(_QWORD *)&v317[v318 + 7976];
                v315[v318 + 7984] = v317[v318 + 7984];
                *((_QWORD *)v322 + 997) = v338;
                __asm { PRFM            #0, [X8] }
                *((_QWORD *)v322 + 999) = *(_QWORD *)&v317[v318 + 7992];
                *((_QWORD *)v322 + 1000) = *(_QWORD *)&v317[v318 + 8000];
                *(_OWORD *)&v317[v318 + 7992] = 0u;
                v974[v318 + 8008] = *(_BYTE *)(v971 + v318);
                v318 += 8016;
              }
              while (&v317[v318] < v315);
              v313 = &v315[v318];
              v147 = v985;
              v316 = 0x2F028E0D4911E25DLL * ((v974 - (v311 + 8016)) >> 4);
              v314 = v311 + 8016;
            }
            v147[795] = v313;
            if (v315 != v314)
            {
              v505 = 0;
              v506 = 8016 * v316 + 8016 * v941 + v937;
              v507 = v506 - 8008;
              v508 = -8016 * v316;
              v509 = v506 - 8016;
              do
              {
                *(_QWORD *)&v315[v505 - 8016] = *(_QWORD *)(v509 + v505);
                sub_20F5B67C0((uint64_t)&v315[v505 - 8008], v507 + v505);
                v315[v505 - 8] = v317[v505 - 8];
                v505 -= 8016;
              }
              while (v508 != v505);
            }
            *(_QWORD *)v311 = v982;
            v510 = v937 + 8016 * v941;
            sub_20F5B67C0(v510 + 8, (uint64_t)&object[8]);
            *(_BYTE *)(v510 + 8008) = v1173;
            v511 = v1172;
            v307 = v981;
            if (v1172)
            {
              v512 = (unint64_t *)&v1172->__shared_owners_;
              do
                v513 = __ldaxr(v512);
              while (__stlxr(v513 - 1, v512));
              if (!v513)
              {
                ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
                std::__shared_weak_count::__release_weak(v511);
              }
            }
            v147 = v985;
          }
        }
        v306 = (std::__shared_weak_count *)*((_QWORD *)&v1079 + 1);
      }
      else
      {
        v307 = v981;
      }
      if (v306)
      {
        v650 = (unint64_t *)&v306->__shared_owners_;
        do
          v651 = __ldaxr(v650);
        while (__stlxr(v651 - 1, v650));
        if (!v651)
        {
          v652 = v306;
          ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
          std::__shared_weak_count::__release_weak(v652);
        }
      }
      v980[2] = 0;
      *v980 = 0;
      v307[390] = vaddq_s64(v307[390], (int64x2_t)xmmword_2103B4900);
      v146 = 1;
    }
    else
    {
      v146 = 0;
      --*(_DWORD *)(v161 + 8);
      --*(_DWORD *)(v170 + 8);
      v1017 = 0u;
      --*(_DWORD *)(v176 + 8);
      --*(_DWORD *)(v182 + 8);
      v1018 = 0u;
      --*(_DWORD *)(v303 + 8);
      v1019 = 0;
    }
  }
  v184 = (std::__shared_weak_count *)*((_QWORD *)&v1038 + 1);
  if (*((_QWORD *)&v1038 + 1))
  {
    v185 = (unint64_t *)(*((_QWORD *)&v1038 + 1) + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v136 = *(std::__shared_weak_count **)&v1097[8];
  if (*(_QWORD *)&v1097[8])
  {
LABEL_164:
    v187 = (unint64_t *)&v136->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
LABEL_168:
  if (v146)
  {
    *((_BYTE *)v147 + 7828) = 0;
    *((_DWORD *)v147 + 1956) = 0;
  }
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v1089 + 1);
  if (*((_QWORD *)&v1089 + 1))
  {
    v190 = (unint64_t *)(*((_QWORD *)&v1089 + 1) + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = (std::__shared_weak_count *)v1098[1];
  if (v1098[1])
  {
    v193 = (unint64_t *)(v1098[1] + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    goto LABEL_178;
  }
}

