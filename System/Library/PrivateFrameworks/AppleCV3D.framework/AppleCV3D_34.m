void sub_20F61BD54(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F61BD6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 280 * v5;
    }
    v7 = 280 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 2240;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F61BEAC(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F61BEAC(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

char *sub_20F61C06C(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F61C2BC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F61C2D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 184 * v5;
    }
    v7 = 184 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 1472;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F61C414(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F61C414(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

void sub_20F61C5D4(double *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  unsigned int v9;

  v6 = operator new(0xA0uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24CA015A8;
  v6[3] = &off_24CA015F8;
  v8 = (char *)(v6 + 3);
  v9 = *a2;
  *((_BYTE *)v6 + 32) = 1;
  if (v9 < 2)
  {
    sub_20F61DA0C((uint64_t)(v6 + 3), a1);
  }
  else if (v9 == 2)
  {
    sub_20F61DBCC((uint64_t)(v6 + 3), a1);
  }
  else if (v9 == 3)
  {
    sub_20F61DD30((uint64_t)(v6 + 3), a1);
  }
  *a3 = v8;
  a3[1] = v7;
}

void sub_20F61C684(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20F61C69C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA015A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F61C6AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA015A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F61C6DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20F61C6F0()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F61C704()
{
  return 1;
}

float64x2_t sub_20F61C70C(float64x2_t *a1, float64x2_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t result;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;

  a10.f64[0] = a2[7].f64[0];
  v10.f64[0] = a1[8].f64[0];
  result = vmulq_f64(*a2, a1[1]);
  v12 = vmulq_f64(a2[6], a1[7]);
  v13 = vmulq_f64(a2[5], a1[6]);
  v14 = vmulq_f64(a2[4], a1[5]);
  v15 = vmulq_f64(a2[3], a1[4]);
  v16 = vmulq_f64(a2[1], a1[2]);
  a2[2] = vmulq_f64(a2[2], a1[3]);
  a2[3] = v15;
  a2[4] = v14;
  a2[5] = v13;
  a2[6] = v12;
  *a2 = result;
  a2[1] = v16;
  *(_QWORD *)&a2[7].f64[0] = *(_OWORD *)&vmulq_f64(a10, v10);
  return result;
}

float64x2_t sub_20F61C774(float64x2_t *a1, float64x2_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float64x2_t a11)
{
  float64x2_t v11;
  float64x2_t result;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;

  a11.f64[0] = a2[7].f64[0];
  v11.f64[0] = a1[8].f64[0];
  result = vmulq_f64(*a2, a1[1]);
  v13 = vmulq_f64(a2[6], a1[7]);
  v14 = vmulq_f64(a2[5], a1[6]);
  v15 = vmulq_f64(a2[4], a1[5]);
  v16 = vmulq_f64(a2[3], a1[4]);
  v17 = vmulq_f64(a2[1], a1[2]);
  *(float64x2_t *)(a3 + 32) = vmulq_f64(a2[2], a1[3]);
  *(float64x2_t *)(a3 + 48) = v16;
  *(float64x2_t *)(a3 + 64) = v15;
  *(float64x2_t *)(a3 + 80) = v14;
  *(float64x2_t *)(a3 + 96) = v13;
  *(_QWORD *)(a3 + 112) = *(_OWORD *)&vmulq_f64(a11, v11);
  *(float64x2_t *)a3 = result;
  *(float64x2_t *)(a3 + 16) = v17;
  return result;
}

float64x2_t sub_20F61C7DC(float64x2_t *a1, float64x2_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t result;

  v10 = a2[6];
  v11 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  __asm { FMOV            V25.2D, #1.0 }
  v17 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[1]), (int8x16_t)vcgtq_f64(v11, vabsq_f64(a1[1])));
  v18 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[2]), (int8x16_t)vcgtq_f64(v11, vabsq_f64(a1[2])));
  v19 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[3]), (int8x16_t)vcgtq_f64(v11, vabsq_f64(a1[3])));
  v20 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[4]), (int8x16_t)vcgtq_f64(v11, vabsq_f64(a1[4])));
  v21 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[5]), (int8x16_t)vcgtq_f64(v11, vabsq_f64(a1[5])));
  v22 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[6]), (int8x16_t)vcgtq_f64(v11, vabsq_f64(a1[6])));
  v23 = a1[7];
  v26 = (float64x2_t)vcgtq_f64(v11, vabsq_f64(v23));
  v24 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, v23), (int8x16_t)v26);
  v26.f64[0] = a1[8].f64[0];
  v25 = fabs(v26.f64[0]);
  v26.f64[0] = 1.0 / v26.f64[0];
  if (v25 < 0.000001)
    v26.f64[0] = 0.0;
  a10.f64[0] = a2[7].f64[0];
  v27 = vmulq_f64(a2[5], v22);
  v28 = vmulq_f64(a2[4], v21);
  v29 = vmulq_f64(a2[3], v20);
  v30 = vmulq_f64(a2[2], v19);
  v31 = vmulq_f64(a2[1], v18);
  *a2 = vmulq_f64(*a2, v17);
  a2[1] = v31;
  a2[2] = v30;
  a2[3] = v29;
  a2[4] = v28;
  a2[5] = v27;
  result = vmulq_f64(v10, v24);
  a2[6] = result;
  *(_QWORD *)&a2[7].f64[0] = *(_OWORD *)&vmulq_f64(a10, v26);
  return result;
}

float64x2_t sub_20F61C8EC(float64x2_t *a1, float64x2_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float64x2_t a11)
{
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t result;

  v12 = a2[1];
  v13 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  __asm { FMOV            V25.2D, #1.0 }
  v19 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[2]), (int8x16_t)vcgtq_f64(v13, vabsq_f64(a1[2])));
  v20 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[3]), (int8x16_t)vcgtq_f64(v13, vabsq_f64(a1[3])));
  v21 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[4]), (int8x16_t)vcgtq_f64(v13, vabsq_f64(a1[4])));
  v22 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[1]), (int8x16_t)vcgtq_f64(v13, vabsq_f64(a1[1])));
  v23 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[5]), (int8x16_t)vcgtq_f64(v13, vabsq_f64(a1[5])));
  v24 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, a1[6]), (int8x16_t)vcgtq_f64(v13, vabsq_f64(a1[6])));
  v25 = a1[7];
  v28 = (float64x2_t)vcgtq_f64(v13, vabsq_f64(v25));
  v26 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q25, v25), (int8x16_t)v28);
  v28.f64[0] = a1[8].f64[0];
  v27 = fabs(v28.f64[0]);
  v28.f64[0] = 1.0 / v28.f64[0];
  if (v27 < 0.000001)
    v28.f64[0] = 0.0;
  a11.f64[0] = a2[7].f64[0];
  v11 = *a2;
  v29 = vmulq_f64(a2[6], v26);
  v30 = vmulq_f64(a2[5], v24);
  v31 = vmulq_f64(a2[4], v23);
  v32 = vmulq_f64(a2[3], v21);
  *(float64x2_t *)(a3 + 32) = vmulq_f64(a2[2], v20);
  *(float64x2_t *)(a3 + 48) = v32;
  *(float64x2_t *)(a3 + 64) = v31;
  *(float64x2_t *)(a3 + 80) = v30;
  *(float64x2_t *)(a3 + 96) = v29;
  result = vmulq_f64(v12, v19);
  *(float64x2_t *)a3 = vmulq_f64(v11, v22);
  *(float64x2_t *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 112) = *(_OWORD *)&vmulq_f64(a11, v28);
  return result;
}

double sub_20F61C9FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 128) = v2;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 256) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 384) = v3;
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 512) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 640) = v4;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 768) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 896) = v5;
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 1024) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 1152) = v6;
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 1280) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 1408) = v7;
  v8 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 1536) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_QWORD *)(a2 + 504) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 440) = 0u;
  *(_OWORD *)(a2 + 456) = 0u;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_OWORD *)(a2 + 424) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_QWORD *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_QWORD *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_QWORD *)(a2 + 888) = 0;
  *(_OWORD *)(a2 + 856) = 0u;
  *(_OWORD *)(a2 + 872) = 0u;
  *(_OWORD *)(a2 + 824) = 0u;
  *(_OWORD *)(a2 + 840) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_OWORD *)(a2 + 808) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_QWORD *)(a2 + 1016) = 0;
  *(_OWORD *)(a2 + 984) = 0u;
  *(_OWORD *)(a2 + 1000) = 0u;
  *(_OWORD *)(a2 + 952) = 0u;
  *(_OWORD *)(a2 + 968) = 0u;
  *(_OWORD *)(a2 + 920) = 0u;
  *(_OWORD *)(a2 + 936) = 0u;
  *(_OWORD *)(a2 + 904) = 0u;
  *(_QWORD *)(a2 + 1144) = 0;
  *(_OWORD *)(a2 + 1112) = 0u;
  *(_OWORD *)(a2 + 1128) = 0u;
  *(_OWORD *)(a2 + 1080) = 0u;
  *(_OWORD *)(a2 + 1096) = 0u;
  *(_OWORD *)(a2 + 1048) = 0u;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(_OWORD *)(a2 + 1032) = 0u;
  *(_QWORD *)(a2 + 1272) = 0;
  *(_OWORD *)(a2 + 1240) = 0u;
  *(_OWORD *)(a2 + 1256) = 0u;
  *(_OWORD *)(a2 + 1208) = 0u;
  *(_OWORD *)(a2 + 1224) = 0u;
  *(_OWORD *)(a2 + 1176) = 0u;
  *(_OWORD *)(a2 + 1192) = 0u;
  *(_OWORD *)(a2 + 1160) = 0u;
  *(_QWORD *)(a2 + 1400) = 0;
  *(_OWORD *)(a2 + 1368) = 0u;
  *(_OWORD *)(a2 + 1384) = 0u;
  *(_OWORD *)(a2 + 1336) = 0u;
  *(_OWORD *)(a2 + 1352) = 0u;
  *(_OWORD *)(a2 + 1304) = 0u;
  *(_OWORD *)(a2 + 1320) = 0u;
  *(_OWORD *)(a2 + 1288) = 0u;
  *(_QWORD *)(a2 + 1528) = 0;
  *(_OWORD *)(a2 + 1496) = 0u;
  *(_OWORD *)(a2 + 1512) = 0u;
  *(_OWORD *)(a2 + 1464) = 0u;
  *(_OWORD *)(a2 + 1480) = 0u;
  *(_OWORD *)(a2 + 1432) = 0u;
  *(_OWORD *)(a2 + 1448) = 0u;
  *(_OWORD *)(a2 + 1416) = 0u;
  *(_QWORD *)(a2 + 1656) = 0;
  *(_OWORD *)(a2 + 1624) = 0u;
  *(_OWORD *)(a2 + 1640) = 0u;
  *(_OWORD *)(a2 + 1592) = 0u;
  *(_OWORD *)(a2 + 1608) = 0u;
  *(_OWORD *)(a2 + 1560) = 0u;
  *(_OWORD *)(a2 + 1576) = 0u;
  *(_OWORD *)(a2 + 1544) = 0u;
  *(_QWORD *)(a2 + 1664) = v8;
  *(_QWORD *)(a2 + 1784) = 0;
  *(_OWORD *)(a2 + 1752) = 0u;
  *(_OWORD *)(a2 + 1768) = 0u;
  *(_OWORD *)(a2 + 1720) = 0u;
  *(_OWORD *)(a2 + 1736) = 0u;
  *(_OWORD *)(a2 + 1688) = 0u;
  *(_OWORD *)(a2 + 1704) = 0u;
  *(_OWORD *)(a2 + 1672) = 0u;
  result = *(double *)(a1 + 128);
  *(double *)(a2 + 1792) = result;
  return result;
}

double sub_20F61CBC0@<D0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q1>)
{
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double result;

  a4.f64[0] = a1[8].f64[0];
  v4 = *(_OWORD *)&vmulq_f64(a3, a4);
  v5 = vmulq_n_f64(a1[7], a3.f64[0]);
  v6 = vmulq_n_f64(a1[6], a3.f64[0]);
  v7 = vmulq_n_f64(a1[5], a3.f64[0]);
  v8 = vmulq_n_f64(a1[4], a3.f64[0]);
  v9 = vmulq_n_f64(a1[3], a3.f64[0]);
  v10 = vmulq_n_f64(a1[2], a3.f64[0]);
  v11 = vmulq_n_f64(a1[1], a3.f64[0]);
  *(float64_t *)a2 = v11.f64[0];
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0;
  *(float64_t *)(a2 + 128) = v11.f64[1];
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_QWORD *)(a2 + 248) = 0;
  *(float64_t *)(a2 + 256) = v10.f64[0];
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_QWORD *)(a2 + 376) = 0;
  *(float64_t *)(a2 + 384) = v10.f64[1];
  *(_OWORD *)(a2 + 392) = 0u;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_OWORD *)(a2 + 424) = 0u;
  *(_OWORD *)(a2 + 440) = 0u;
  *(_OWORD *)(a2 + 456) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_QWORD *)(a2 + 504) = 0;
  *(float64_t *)(a2 + 512) = v9.f64[0];
  *(_QWORD *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(float64_t *)(a2 + 640) = v9.f64[1];
  *(_QWORD *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(float64_t *)(a2 + 768) = v8.f64[0];
  *(_QWORD *)(a2 + 888) = 0;
  *(_OWORD *)(a2 + 856) = 0u;
  *(_OWORD *)(a2 + 872) = 0u;
  *(_OWORD *)(a2 + 824) = 0u;
  *(_OWORD *)(a2 + 840) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_OWORD *)(a2 + 808) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(float64_t *)(a2 + 896) = v8.f64[1];
  *(_QWORD *)(a2 + 1016) = 0;
  *(_OWORD *)(a2 + 984) = 0u;
  *(_OWORD *)(a2 + 1000) = 0u;
  *(_OWORD *)(a2 + 952) = 0u;
  *(_OWORD *)(a2 + 968) = 0u;
  *(_OWORD *)(a2 + 920) = 0u;
  *(_OWORD *)(a2 + 936) = 0u;
  *(_OWORD *)(a2 + 904) = 0u;
  *(float64_t *)(a2 + 1024) = v7.f64[0];
  *(_QWORD *)(a2 + 1144) = 0;
  *(_OWORD *)(a2 + 1112) = 0u;
  *(_OWORD *)(a2 + 1128) = 0u;
  *(_OWORD *)(a2 + 1080) = 0u;
  *(_OWORD *)(a2 + 1096) = 0u;
  *(_OWORD *)(a2 + 1048) = 0u;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(_OWORD *)(a2 + 1032) = 0u;
  *(float64_t *)(a2 + 1152) = v7.f64[1];
  *(_QWORD *)(a2 + 1272) = 0;
  *(_OWORD *)(a2 + 1240) = 0u;
  *(_OWORD *)(a2 + 1256) = 0u;
  *(_OWORD *)(a2 + 1208) = 0u;
  *(_OWORD *)(a2 + 1224) = 0u;
  *(_OWORD *)(a2 + 1176) = 0u;
  *(_OWORD *)(a2 + 1192) = 0u;
  *(_OWORD *)(a2 + 1160) = 0u;
  *(float64_t *)(a2 + 1280) = v6.f64[0];
  *(_QWORD *)(a2 + 1400) = 0;
  *(_OWORD *)(a2 + 1368) = 0u;
  *(_OWORD *)(a2 + 1384) = 0u;
  *(_OWORD *)(a2 + 1336) = 0u;
  *(_OWORD *)(a2 + 1352) = 0u;
  *(_OWORD *)(a2 + 1304) = 0u;
  *(_OWORD *)(a2 + 1320) = 0u;
  *(_OWORD *)(a2 + 1288) = 0u;
  *(float64_t *)(a2 + 1408) = v6.f64[1];
  *(_QWORD *)(a2 + 1528) = 0;
  *(_OWORD *)(a2 + 1496) = 0u;
  *(_OWORD *)(a2 + 1512) = 0u;
  *(_OWORD *)(a2 + 1464) = 0u;
  *(_OWORD *)(a2 + 1480) = 0u;
  *(_OWORD *)(a2 + 1432) = 0u;
  *(_OWORD *)(a2 + 1448) = 0u;
  *(_OWORD *)(a2 + 1416) = 0u;
  *(float64_t *)(a2 + 1536) = v5.f64[0];
  *(_QWORD *)(a2 + 1656) = 0;
  *(_OWORD *)(a2 + 1624) = 0u;
  *(_OWORD *)(a2 + 1640) = 0u;
  *(_OWORD *)(a2 + 1592) = 0u;
  *(_OWORD *)(a2 + 1608) = 0u;
  *(_OWORD *)(a2 + 1560) = 0u;
  *(_OWORD *)(a2 + 1576) = 0u;
  *(_OWORD *)(a2 + 1544) = 0u;
  *(float64_t *)(a2 + 1664) = v5.f64[1];
  *(_QWORD *)(a2 + 1784) = 0;
  *(_OWORD *)(a2 + 1752) = 0u;
  *(_OWORD *)(a2 + 1768) = 0u;
  *(_OWORD *)(a2 + 1720) = 0u;
  *(_OWORD *)(a2 + 1736) = 0u;
  *(_OWORD *)(a2 + 1688) = 0u;
  *(_OWORD *)(a2 + 1704) = 0u;
  *(_OWORD *)(a2 + 1672) = 0u;
  *(_QWORD *)(a2 + 1792) = v4;
  return result;
}

float64_t sub_20F61CDB4@<D0>(float64x2_t *a1@<X0>, float64_t *a2@<X8>)
{
  float64x2_t v4;
  float64_t result;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;

  bzero(a2 + 1, 0x6F8uLL);
  v4.f64[0] = a1[8].f64[0];
  *(_QWORD *)&result = *(_OWORD *)&vmulq_f64(v4, v4);
  v6 = vmulq_f64(a1[7], a1[7]);
  v7 = vmulq_f64(a1[6], a1[6]);
  v8 = vmulq_f64(a1[5], a1[5]);
  v9 = vmulq_f64(a1[4], a1[4]);
  v10 = vmulq_f64(a1[3], a1[3]);
  v11 = vmulq_f64(a1[2], a1[2]);
  v12 = vmulq_f64(a1[1], a1[1]);
  *a2 = v12.f64[0];
  a2[16] = v12.f64[1];
  a2[32] = v11.f64[0];
  a2[48] = v11.f64[1];
  a2[80] = v10.f64[1];
  a2[64] = v10.f64[0];
  a2[96] = v9.f64[0];
  a2[112] = v9.f64[1];
  a2[128] = v8.f64[0];
  a2[144] = v8.f64[1];
  a2[176] = v7.f64[1];
  a2[160] = v7.f64[0];
  a2[192] = v6.f64[0];
  a2[208] = v6.f64[1];
  a2[224] = result;
  return result;
}

double sub_20F61CE6C@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  float64x2_t v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  unint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double result;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  float64x2_t v113;
  double v114;
  double v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  double v129;
  float64x2_t v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  float64x2_t v140;
  double v141;
  float64x2_t v142;
  double v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  double v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  double v153;

  v2 = a1[2];
  v3 = a1[3];
  v4 = 1.0 / v2;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = 1.0 / v8;
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v15 = a1[12];
  v14 = a1[13];
  v16 = a1[14];
  v17 = a1[15];
  v18 = a1[16];
  v149 = 1.0 / v18;
  if (fabs(v2) < 1.0e-15)
    v4 = 0.0;
  if (fabs(v3) >= 1.0e-15)
    v19 = 1.0 / v3;
  else
    v19 = 0.0;
  if (fabs(v5) >= 1.0e-15)
    v20 = 1.0 / v5;
  else
    v20 = 0.0;
  if (fabs(v6) >= 1.0e-15)
    v21 = 1.0 / v6;
  else
    v21 = 0.0;
  if (fabs(v7) >= 1.0e-15)
    v22 = 1.0 / v7;
  else
    v22 = 0.0;
  if (fabs(v8) < 1.0e-15)
    v9 = 0.0;
  if (fabs(v10) >= 1.0e-15)
    v23 = 1.0 / v10;
  else
    v23 = 0.0;
  if (fabs(v11) >= 1.0e-15)
    v24 = 1.0 / v11;
  else
    v24 = 0.0;
  if (fabs(v12) >= 1.0e-15)
    v25 = 1.0 / v12;
  else
    v25 = 0.0;
  if (fabs(v13) >= 1.0e-15)
    v26 = 1.0 / v13;
  else
    v26 = 0.0;
  if (fabs(v15) >= 1.0e-15)
    v27 = 1.0 / v15;
  else
    v27 = 0.0;
  if (fabs(v14) >= 1.0e-15)
    v28 = 1.0 / v14;
  else
    v28 = 0.0;
  if (fabs(v16) >= 1.0e-15)
    v29 = 1.0 / v16;
  else
    v29 = 0.0;
  v152 = v29;
  if (fabs(v17) >= 1.0e-15)
    v30 = 1.0 / v17;
  else
    v30 = 0.0;
  v153 = v30;
  v31 = fabs(v18) < 1.0e-15;
  v32.f64[0] = 0.0;
  v32.f64[1] = v19;
  v33 = v20;
  v34 = v20;
  v35.f64[0] = 0.0;
  v35.f64[1] = v21;
  v151 = vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v4, v4), (float64x2_t)0, v32);
  v36 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v4);
  v150 = vmlaq_f64(vmlaq_f64(v36, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v33), (float64x2_t)0, v35);
  v141 = v4 * 0.0;
  *(double *)&v37 = v4 * 0.0;
  v147 = v19;
  v148 = vmlaq_n_f64((float64x2_t)v37, v32, v19);
  v38 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v19);
  v39 = vaddq_f64(v38, (float64x2_t)0);
  v146 = vmlaq_f64(vmlaq_f64(v38, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v33), (float64x2_t)0, v35);
  v143 = v34;
  v144 = vmlaq_f64((float64x2_t)v37, (float64x2_t)0, v32);
  v145 = vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v33, v34), (float64x2_t)0, v35);
  v40 = vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v34), (float64x2_t)0);
  v41 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v33);
  v142 = vmlaq_n_f64(v41, v35, v21);
  v139 = v21;
  v140 = vmlaq_f64(v41, (float64x2_t)0, v35);
  v42 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v21);
  v43 = vaddq_f64(v42, (float64x2_t)0);
  v44 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22);
  v45.f64[0] = 0.0;
  v45.f64[1] = v9;
  v129 = v22;
  v130 = vmlaq_f64(vmlaq_f64(v36, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v45);
  v133 = vmlaq_f64(vmlaq_f64(v39, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v45);
  v134 = vmlaq_f64(vmlaq_f64(v40, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v45);
  v136 = vmlaq_f64(vmlaq_f64(v42, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v45);
  v137 = vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v22, v22), (float64x2_t)0, v45);
  v138 = vmlaq_n_f64(v44, v45, v9);
  v132 = v9;
  v135 = vmlaq_f64(v44, (float64x2_t)0, v45);
  v46 = vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v22), (float64x2_t)0);
  v47 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v9);
  v48 = vaddq_f64(v47, (float64x2_t)0);
  v49 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v23);
  v45.f64[0] = 0.0;
  v45.f64[1] = v24;
  v118 = vmlaq_f64(vmlaq_f64(v36, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v23), (float64x2_t)0, v45);
  v119 = vmlaq_f64(vmlaq_f64(v39, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v23), (float64x2_t)0, v45);
  v121 = vmlaq_f64(vmlaq_f64(v40, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v23), (float64x2_t)0, v45);
  v122 = v23;
  v125 = vmlaq_f64(vmlaq_f64(v43, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v23), (float64x2_t)0, v45);
  v126 = vmlaq_f64(vmlaq_f64(v46, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v23), (float64x2_t)0, v45);
  v50 = vmlaq_f64(vmlaq_f64(v47, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v23), (float64x2_t)0, v45);
  v128 = vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v23, v23), (float64x2_t)0, v45);
  v131 = vmlaq_n_f64(v49, v45, v24);
  v41.f64[0] = v24;
  v124 = v24;
  v127 = vmlaq_f64(v49, (float64x2_t)0, v45);
  v51 = vmlaq_f64(v36, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v52 = v39;
  v107 = v39;
  v108 = v40;
  v53 = vmlaq_f64(v39, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v54 = v40;
  v55 = vmlaq_f64(v40, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v109 = v43;
  v56 = vmlaq_f64(v43, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v57 = vmlaq_f64(v46, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v58 = vmlaq_f64(v48, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v59 = vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v23), (float64x2_t)0);
  v60 = vmlaq_f64(v59, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v61 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v41.f64[0]);
  v62 = vaddq_f64(v61, (float64x2_t)0);
  v63 = vmlaq_f64(v61, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v64 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v25, v25);
  v40.f64[0] = v25;
  v111 = v25;
  v65 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v25);
  v45.f64[0] = 0.0;
  v45.f64[1] = v26;
  v66 = vmlaq_f64(v51, (float64x2_t)0, v45);
  v67 = vmlaq_f64(v53, (float64x2_t)0, v45);
  v68 = vmlaq_f64(v55, (float64x2_t)0, v45);
  v69 = vmlaq_f64(v56, (float64x2_t)0, v45);
  v110 = vmlaq_f64(v57, (float64x2_t)0, v45);
  v113 = vmlaq_f64(v58, (float64x2_t)0, v45);
  v114 = v26;
  v116 = vmlaq_f64(v60, (float64x2_t)0, v45);
  v70 = vmlaq_f64(v63, (float64x2_t)0, v45);
  v120 = vmlaq_f64(v64, (float64x2_t)0, v45);
  v123 = vmlaq_n_f64(v65, v45, v26);
  v71 = vmlaq_f64(v65, (float64x2_t)0, v45);
  v45.f64[0] = 0.0;
  v72 = v28;
  v115 = v28;
  v45.f64[1] = v28;
  v73 = vmlaq_f64(v52, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27);
  v74 = vmlaq_f64(v54, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27);
  v75 = vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v40.f64[0]), (float64x2_t)0);
  v76 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v26);
  v77 = vaddq_f64(v76, (float64x2_t)0);
  v78 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27);
  v79 = vmlaq_f64(vmlaq_f64(v36, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v80 = vmlaq_f64(v73, (float64x2_t)0, v45);
  v81 = vmlaq_f64(v74, (float64x2_t)0, v45);
  v82 = vmlaq_f64(vmlaq_f64(v43, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v83 = vmlaq_f64(vmlaq_f64(v46, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v84 = vmlaq_f64(vmlaq_f64(v48, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v85 = vmlaq_f64(vmlaq_f64(v59, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v86 = vmlaq_f64(vmlaq_f64(v62, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v87 = vmlaq_f64(vmlaq_f64(v75, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v88 = vmlaq_f64(vmlaq_f64(v76, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v27), (float64x2_t)0, v45);
  v112 = vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v27, v27), (float64x2_t)0, v45);
  v117 = vmlaq_n_f64(v78, v45, v72);
  v89 = vmlaq_f64(v78, (float64x2_t)0, v45);
  v90 = v149;
  if (v31)
    v90 = 0.0;
  v91.f64[0] = 0.0;
  v91.f64[1] = v153;
  *(double *)(a2 + 112) = v141 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 96) = vaddq_f64(vmlaq_f64(vmlaq_f64(v36, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 64) = vaddq_f64(v66, (float64x2_t)0);
  *(float64x2_t *)(a2 + 80) = vaddq_f64(v79, (float64x2_t)0);
  *(float64x2_t *)(a2 + 32) = vaddq_f64(v130, (float64x2_t)0);
  *(float64x2_t *)(a2 + 48) = vaddq_f64(v118, (float64x2_t)0);
  *(float64x2_t *)a2 = vaddq_f64(v151, (float64x2_t)0);
  *(float64x2_t *)(a2 + 16) = vaddq_f64(v150, (float64x2_t)0);
  *(double *)(a2 + 232) = v147 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 136) = vaddq_f64(v146, (float64x2_t)0);
  *(float64x2_t *)(a2 + 120) = vaddq_f64(v148, (float64x2_t)0);
  *(float64x2_t *)(a2 + 216) = vaddq_f64(vmlaq_f64(vmlaq_f64(v107, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 200) = vaddq_f64(v80, (float64x2_t)0);
  *(float64x2_t *)(a2 + 184) = vaddq_f64(v67, (float64x2_t)0);
  *(float64x2_t *)(a2 + 168) = vaddq_f64(v119, (float64x2_t)0);
  *(float64x2_t *)(a2 + 152) = vaddq_f64(v133, (float64x2_t)0);
  *(double *)(a2 + 352) = v143 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 320) = vaddq_f64(v81, (float64x2_t)0);
  *(float64x2_t *)(a2 + 336) = vaddq_f64(vmlaq_f64(vmlaq_f64(v108, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 304) = vaddq_f64(v68, (float64x2_t)0);
  *(float64x2_t *)(a2 + 272) = vaddq_f64(v134, (float64x2_t)0);
  *(float64x2_t *)(a2 + 288) = vaddq_f64(v121, (float64x2_t)0);
  *(float64x2_t *)(a2 + 240) = vaddq_f64(vmlaq_n_f64(v144, (float64x2_t)0, v143), (float64x2_t)0);
  *(float64x2_t *)(a2 + 256) = vaddq_f64(v145, (float64x2_t)0);
  v92 = vaddq_f64(v144, (float64x2_t)0);
  *(double *)(a2 + 472) = v139 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 456) = vaddq_f64(vmlaq_f64(vmlaq_f64(v109, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 424) = vaddq_f64(v69, (float64x2_t)0);
  *(float64x2_t *)(a2 + 440) = vaddq_f64(v82, (float64x2_t)0);
  *(float64x2_t *)(a2 + 392) = vaddq_f64(v136, (float64x2_t)0);
  *(float64x2_t *)(a2 + 408) = vaddq_f64(v125, (float64x2_t)0);
  *(float64x2_t *)(a2 + 360) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v139), (float64x2_t)0);
  *(float64x2_t *)(a2 + 376) = vaddq_f64(v142, (float64x2_t)0);
  *(double *)(a2 + 592) = v129 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 560) = vaddq_f64(v83, (float64x2_t)0);
  *(float64x2_t *)(a2 + 576) = vaddq_f64(vmlaq_f64(vmlaq_f64(v46, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 544) = vaddq_f64(v110, (float64x2_t)0);
  *(float64x2_t *)(a2 + 512) = vaddq_f64(v137, (float64x2_t)0);
  *(float64x2_t *)(a2 + 528) = vaddq_f64(v126, (float64x2_t)0);
  *(float64x2_t *)(a2 + 480) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v129), (float64x2_t)0);
  *(float64x2_t *)(a2 + 496) = vaddq_f64(vmlaq_n_f64(v140, (float64x2_t)0, v129), (float64x2_t)0);
  v93 = vaddq_f64(v140, (float64x2_t)0);
  *(double *)(a2 + 712) = v132 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 632) = vaddq_f64(v138, (float64x2_t)0);
  *(float64x2_t *)(a2 + 648) = vaddq_f64(v50, (float64x2_t)0);
  *(float64x2_t *)(a2 + 680) = vaddq_f64(v84, (float64x2_t)0);
  *(float64x2_t *)(a2 + 696) = vaddq_f64(vmlaq_f64(vmlaq_f64(v48, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 664) = vaddq_f64(v113, (float64x2_t)0);
  *(float64x2_t *)(a2 + 600) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v132), (float64x2_t)0);
  *(float64x2_t *)(a2 + 616) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v132), (float64x2_t)0);
  *(double *)(a2 + 832) = v122 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 800) = vaddq_f64(v85, (float64x2_t)0);
  *(float64x2_t *)(a2 + 816) = vaddq_f64(vmlaq_f64(vmlaq_f64(v59, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 768) = vaddq_f64(v128, (float64x2_t)0);
  *(float64x2_t *)(a2 + 784) = vaddq_f64(v116, (float64x2_t)0);
  *(float64x2_t *)(a2 + 752) = vaddq_f64(vmlaq_n_f64(v135, (float64x2_t)0, v122), (float64x2_t)0);
  v94 = vaddq_f64(v135, (float64x2_t)0);
  *(float64x2_t *)(a2 + 720) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v122), (float64x2_t)0);
  *(float64x2_t *)(a2 + 736) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v122), (float64x2_t)0);
  *(double *)(a2 + 952) = v124 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 920) = vaddq_f64(v86, (float64x2_t)0);
  *(float64x2_t *)(a2 + 936) = vaddq_f64(vmlaq_f64(vmlaq_f64(v62, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 888) = vaddq_f64(v131, (float64x2_t)0);
  *(float64x2_t *)(a2 + 904) = vaddq_f64(v70, (float64x2_t)0);
  *(float64x2_t *)(a2 + 856) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v124), (float64x2_t)0);
  *(float64x2_t *)(a2 + 872) = vaddq_f64(vmlaq_n_f64(v94, (float64x2_t)0, v124), (float64x2_t)0);
  *(float64x2_t *)(a2 + 840) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v124), (float64x2_t)0);
  *(double *)(a2 + 1072) = v111 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 1024) = vaddq_f64(v120, (float64x2_t)0);
  *(float64x2_t *)(a2 + 1056) = vaddq_f64(vmlaq_f64(vmlaq_f64(v75, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1040) = vaddq_f64(v87, (float64x2_t)0);
  v95 = vaddq_f64(v127, (float64x2_t)0);
  *(float64x2_t *)(a2 + 992) = vaddq_f64(vmlaq_n_f64(v94, (float64x2_t)0, v111), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1008) = vaddq_f64(vmlaq_n_f64(v127, (float64x2_t)0, v111), (float64x2_t)0);
  *(float64x2_t *)(a2 + 960) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v111), (float64x2_t)0);
  *(float64x2_t *)(a2 + 976) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v111), (float64x2_t)0);
  *(double *)(a2 + 1192) = v114 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 1144) = vaddq_f64(v123, (float64x2_t)0);
  *(float64x2_t *)(a2 + 1160) = vaddq_f64(v88, (float64x2_t)0);
  *(float64x2_t *)(a2 + 1176) = vaddq_f64(vmlaq_f64(vmlaq_f64(v77, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1112) = vaddq_f64(vmlaq_n_f64(v94, (float64x2_t)0, v114), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1128) = vaddq_f64(vmlaq_n_f64(v95, (float64x2_t)0, v114), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1080) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v114), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1096) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v114), (float64x2_t)0);
  *(double *)(a2 + 1312) = v27 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 1280) = vaddq_f64(v112, (float64x2_t)0);
  v96 = vaddq_f64(v71, (float64x2_t)0);
  *(float64x2_t *)(a2 + 1296) = vaddq_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v27), (float64x2_t)0), (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1264) = vaddq_f64(vmlaq_n_f64(v71, (float64x2_t)0, v27), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1248) = vaddq_f64(vmlaq_n_f64(v95, (float64x2_t)0, v27), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1232) = vaddq_f64(vmlaq_n_f64(v94, (float64x2_t)0, v27), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1216) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v27), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1200) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v27), (float64x2_t)0);
  *(double *)(a2 + 1432) = v115 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 1400) = vaddq_f64(v117, (float64x2_t)0);
  *(float64x2_t *)(a2 + 1416) = vaddq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v115), (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152), (float64x2_t)0, v91), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1368) = vaddq_f64(vmlaq_n_f64(v95, (float64x2_t)0, v115), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1384) = vaddq_f64(vmlaq_n_f64(v96, (float64x2_t)0, v115), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1336) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v115), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1352) = vaddq_f64(vmlaq_n_f64(v94, (float64x2_t)0, v115), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1320) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v115), (float64x2_t)0);
  *(double *)(a2 + 1552) = v152 * 0.0 + 0.0 + 0.0 + v90 * 0.0;
  *(float64x2_t *)(a2 + 1536) = vaddq_f64(vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v152, v152), (float64x2_t)0, v91), (float64x2_t)0);
  v97 = vaddq_f64(v89, (float64x2_t)0);
  *(float64x2_t *)(a2 + 1520) = vaddq_f64(vmlaq_n_f64(v89, (float64x2_t)0, v152), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1504) = vaddq_f64(vmlaq_n_f64(v96, (float64x2_t)0, v152), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1488) = vaddq_f64(vmlaq_n_f64(v95, (float64x2_t)0, v152), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1472) = vaddq_f64(vmlaq_n_f64(v94, (float64x2_t)0, v152), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1456) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v152), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1440) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v152), (float64x2_t)0);
  *(double *)(a2 + 1672) = v153 * 0.0 + 0.0 + v90 * 0.0;
  v98 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v152);
  *(float64x2_t *)(a2 + 1656) = vaddq_f64(vmlaq_n_f64(v98, v91, v153), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1624) = vaddq_f64(vmlaq_n_f64(v96, (float64x2_t)0, v153), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1640) = vaddq_f64(vmlaq_n_f64(v97, (float64x2_t)0, v153), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1592) = vaddq_f64(vmlaq_n_f64(v94, (float64x2_t)0, v153), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1608) = vaddq_f64(vmlaq_n_f64(v95, (float64x2_t)0, v153), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1560) = vaddq_f64(vmlaq_n_f64(v92, (float64x2_t)0, v153), (float64x2_t)0);
  *(float64x2_t *)(a2 + 1576) = vaddq_f64(vmlaq_n_f64(v93, (float64x2_t)0, v153), (float64x2_t)0);
  v99 = vmlaq_n_f64(v92, (float64x2_t)0, v90);
  v100 = vmlaq_n_f64(v93, (float64x2_t)0, v90);
  v101 = vmlaq_n_f64(v94, (float64x2_t)0, v90);
  v102 = vmlaq_n_f64(v95, (float64x2_t)0, v90);
  v103 = vmlaq_n_f64(v96, (float64x2_t)0, v90);
  v104 = vmlaq_n_f64(v97, (float64x2_t)0, v90);
  v105 = vmlaq_n_f64(vmlaq_f64(v98, (float64x2_t)0, v91), (float64x2_t)0, v90);
  result = v90 * v90 + 0.0;
  *(double *)(a2 + 1792) = result;
  *(float64x2_t *)(a2 + 1776) = v105;
  *(float64x2_t *)(a2 + 1760) = v104;
  *(float64x2_t *)(a2 + 1744) = v103;
  *(float64x2_t *)(a2 + 1728) = v102;
  *(float64x2_t *)(a2 + 1712) = v101;
  *(float64x2_t *)(a2 + 1696) = v100;
  *(float64x2_t *)(a2 + 1680) = v99;
  return result;
}

int64x2_t sub_20F61DA0C(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int64x2_t result;

  if (*a2 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 16) = 1.0 / sqrt(*a2);
  v2 = a2[1];
  if (v2 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 24) = 1.0 / sqrt(v2);
  v3 = a2[2];
  if (v3 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 32) = 1.0 / sqrt(v3);
  v4 = a2[3];
  if (v4 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 40) = 1.0 / sqrt(v4);
  v5 = a2[4];
  if (v5 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 48) = 1.0 / sqrt(v5);
  v6 = a2[5];
  if (v6 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 56) = 1.0 / sqrt(v6);
  v7 = a2[6];
  if (v7 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 64) = 1.0 / sqrt(v7);
  v8 = a2[7];
  if (v8 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 72) = 1.0 / sqrt(v8);
  v9 = a2[8];
  if (v9 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 80) = 1.0 / sqrt(v9);
  v10 = a2[9];
  if (v10 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 88) = 1.0 / sqrt(v10);
  v11 = a2[10];
  if (v11 <= 1.0e-15)
    goto LABEL_17;
  *(double *)(a1 + 96) = 1.0 / sqrt(v11);
  v12 = a2[11];
  if (v12 <= 1.0e-15
    || (*(double *)(a1 + 104) = 1.0 / sqrt(v12), v13 = a2[12], v13 <= 1.0e-15)
    || (*(double *)(a1 + 112) = 1.0 / sqrt(v13), v14 = a2[13], v14 <= 1.0e-15)
    || (*(double *)(a1 + 120) = 1.0 / sqrt(v14), v15 = a2[14], v15 <= 1.0e-15))
  {
LABEL_17:
    *(_BYTE *)(a1 + 8) = 0;
    result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 16) = result;
    *(int64x2_t *)(a1 + 32) = result;
    *(int64x2_t *)(a1 + 48) = result;
    *(int64x2_t *)(a1 + 64) = result;
    *(int64x2_t *)(a1 + 80) = result;
    *(int64x2_t *)(a1 + 96) = result;
    *(int64x2_t *)(a1 + 112) = result;
    *(_QWORD *)(a1 + 128) = 0x7FF8000000000000;
  }
  else
  {
    *(double *)result.i64 = 1.0 / sqrt(v15);
    *(_QWORD *)(a1 + 128) = result.i64[0];
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

double sub_20F61DBCC(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int64x2_t v16;

  if (*a2 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 16) = sqrt(*a2);
  v2 = a2[1];
  if (v2 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 24) = sqrt(v2);
  v3 = a2[2];
  if (v3 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 32) = sqrt(v3);
  v4 = a2[3];
  if (v4 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 40) = sqrt(v4);
  v5 = a2[4];
  if (v5 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 48) = sqrt(v5);
  v6 = a2[5];
  if (v6 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 56) = sqrt(v6);
  v7 = a2[6];
  if (v7 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 64) = sqrt(v7);
  v8 = a2[7];
  if (v8 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 72) = sqrt(v8);
  v9 = a2[8];
  if (v9 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 80) = sqrt(v9);
  v10 = a2[9];
  if (v10 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 88) = sqrt(v10);
  v11 = a2[10];
  if (v11 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 96) = sqrt(v11);
  v12 = a2[11];
  if (v12 < 1.0e-15)
    goto LABEL_16;
  *(double *)(a1 + 104) = sqrt(v12);
  v13 = a2[12];
  if (v13 >= 1.0e-15
    && (*(double *)(a1 + 112) = sqrt(v13), v14 = a2[13], v14 >= 1.0e-15)
    && (*(double *)(a1 + 120) = sqrt(v14), v15 = a2[14], v15 >= 1.0e-15))
  {
    *(double *)v16.i64 = sqrt(v15);
    *(_QWORD *)(a1 + 128) = v16.i64[0];
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
LABEL_16:
    *(_BYTE *)(a1 + 8) = 0;
    v16 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 16) = v16;
    *(int64x2_t *)(a1 + 32) = v16;
    *(int64x2_t *)(a1 + 48) = v16;
    *(int64x2_t *)(a1 + 64) = v16;
    *(int64x2_t *)(a1 + 80) = v16;
    *(int64x2_t *)(a1 + 96) = v16;
    *(int64x2_t *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 128) = 0x7FF8000000000000;
  }
  return *(double *)v16.i64;
}

uint64_t sub_20F61DD30(uint64_t result, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int64x2_t v16;

  if (*a2 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 16) = *a2;
  v2 = a2[1];
  if (v2 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 24) = v2;
  v3 = a2[2];
  if (v3 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 32) = v3;
  v4 = a2[3];
  if (v4 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 40) = v4;
  v5 = a2[4];
  if (v5 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 48) = v5;
  v6 = a2[5];
  if (v6 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 56) = v6;
  v7 = a2[6];
  if (v7 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 64) = v7;
  v8 = a2[7];
  if (v8 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 72) = v8;
  v9 = a2[8];
  if (v9 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 80) = v9;
  v10 = a2[9];
  if (v10 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 88) = v10;
  v11 = a2[10];
  if (v11 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 96) = v11;
  v12 = a2[11];
  if (v12 < 1.0e-15)
    goto LABEL_16;
  *(double *)(result + 104) = v12;
  v13 = a2[12];
  if (v13 >= 1.0e-15
    && (*(double *)(result + 112) = v13, v14 = a2[13], v14 >= 1.0e-15)
    && (*(double *)(result + 120) = v14, v15 = a2[14], v15 >= 1.0e-15))
  {
    *(double *)(result + 128) = v15;
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
LABEL_16:
    *(_BYTE *)(result + 8) = 0;
    v16 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(result + 16) = v16;
    *(int64x2_t *)(result + 32) = v16;
    *(int64x2_t *)(result + 48) = v16;
    *(int64x2_t *)(result + 64) = v16;
    *(int64x2_t *)(result + 80) = v16;
    *(int64x2_t *)(result + 96) = v16;
    *(int64x2_t *)(result + 112) = v16;
    *(_QWORD *)(result + 128) = 0x7FF8000000000000;
  }
  return result;
}

uint64_t sub_20F61DE58(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 5336;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F61DEF0(float64x2_t *__src@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  double v10;
  float64x2_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  int v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  void **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int64x2_t v68;
  int64x2_t v69;
  __int128 v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  __int128 v116;
  int64x2_t v117;
  int64x2_t v118;
  __int128 v119;
  int64x2_t v120;
  int64x2_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  int64x2_t v125;
  int64x2_t v126;
  __int128 v127;
  __int128 v128;
  int64x2_t v129;
  __int128 v130;
  __int128 v131;
  int64x2_t v132;
  uint64_t *v133;
  int v134[4];
  const char *__srca;
  void *__srcb[2];
  _QWORD v137[3];
  int v138;
  const char *v139;
  int v140;
  const char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  _BYTE __dst[1800];
  uint64_t v146;
  uint64_t v147;
  char v148;
  os_log_t v149;
  void **v150;
  size_t v151;
  unint64_t v152;
  char v153;
  void *v154[2];
  unint64_t v155;
  char v156;

  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)a2 = &off_24CA00398;
  memcpy(__dst, __src, sizeof(__dst));
  bzero((void *)(a2 + 24), 0x6F8uLL);
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 272) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 400) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 656) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 784) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 912) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 1040) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 1168) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 1296) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 1424) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 1552) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 1680) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 1808) = 0x3FF0000000000000;
  v12 = sub_20F4C04B8((float64x2_t *)(a2 + 16), (float64x2_t *)__dst, 1, 0, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_BYTE *)(a2 + 8) = v12;
  if ((v12 & 1) == 0)
  {
    v13 = 0;
    do
    {
      v14 = (*(_QWORD *)&__src->f64[v13] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)&__src->f64[v13] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
    }
    while (v13++ != 224);
    if (!v14)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPreintegrateIMUFactor.hpp", 45, (uint64_t)"", 0, (uint64_t)"IMU covariance contains NaNs. Time to die.", 42, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    __dst[8] = 1;
    *(_QWORD *)__dst = &off_24CA00428;
    bzero(&__dst[24], 0x6F8uLL);
    *(_QWORD *)&__dst[16] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[144] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[272] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[400] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[528] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[656] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[784] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[912] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1040] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1168] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1296] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1424] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1552] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1680] = 0x3FF0000000000000;
    v147 = 0x3FF0000000000000;
    v148 = 1;
    sub_20F4CEBA4((uint64_t)__dst, __src);
    if (!__dst[8])
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPreintegrateIMUFactor.hpp", 50, (uint64_t)"", 0, (uint64_t)"LP Noise model failed. Fallback noise failed also. Time to die.", 63, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_20F4AD5FC(&v144);
    if (**(int **)(v144 + 56) > 5)
      goto LABEL_54;
    v16 = *(unsigned __int8 *)(v144 + 72);
    v17 = sub_20E8C31DC(v144, "OSLogSurrogateAppender", 1, 0);
    v18 = v17 ? v17 + 16 : 0;
    if (!v16 && !v17)
      goto LABEL_54;
    v137[0] = &v144;
    v137[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v137[2] = std::chrono::system_clock::now().__d_.__rep_;
    v138 = 5;
    v139 = "unknown file";
    v140 = 52;
    v143 = 0;
    v141 = "unknown function";
    v142 = 0;
    if (*(char *)(v144 + 39) < 0)
    {
      v20 = *(const char **)(v144 + 16);
      v19 = *(_QWORD *)(v144 + 24);
      v133 = (uint64_t *)(*(_QWORD *)v137[0] + 16);
      v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v22 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v19 = *(unsigned __int8 *)(v144 + 39);
      v20 = (const char *)(*(_QWORD *)v137[0] + 16);
      v133 = (uint64_t *)v20;
      v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v21 & 1) != 0)
        goto LABEL_18;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v149);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v149);
      if ((_BYTE)v152 && SHIBYTE(v151) < 0)
        operator delete(v149);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_18:
    if (byte_254A4A4F8[23] >= 0)
      v23 = byte_254A4A4F8;
    else
      v23 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v24 = byte_254A4A4F8[23];
    else
      v24 = *(_QWORD *)&byte_254A4A4F8[8];
    __srca = v20;
    v149 = os_log_create(v23, v20);
    v25 = (void **)&v150;
    if (v24 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v24 >= 0x17)
    {
      v26 = v16;
      v27 = v18;
      v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v28 = v24 | 7;
      v29 = v28 + 1;
      v25 = (void **)operator new(v28 + 1);
      v151 = v24;
      v152 = v29 | 0x8000000000000000;
      v150 = v25;
      v18 = v27;
      v16 = v26;
    }
    else
    {
      HIBYTE(v152) = v24;
      if (!v24)
      {
LABEL_32:
        *((_BYTE *)v25 + v24) = 0;
        v153 = 1;
        v30 = v154;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v19 >= 0x17)
        {
          v31 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v31 = v19 | 7;
          v32 = v31 + 1;
          v30 = (void **)operator new(v31 + 1);
          v154[1] = (void *)v19;
          v155 = v32 | 0x8000000000000000;
          v154[0] = v30;
        }
        else
        {
          HIBYTE(v155) = v19;
          if (!v19)
            goto LABEL_40;
        }
        memmove(v30, __srca, v19);
LABEL_40:
        *((_BYTE *)v30 + v19) = 0;
        v156 = 1;
        v33 = v149;
        if (SHIBYTE(v155) < 0)
          operator delete(v154[0]);
        if (v153 && SHIBYTE(v152) < 0)
          operator delete(v150);
        if (v149)
          os_release(v149);
        sub_20F61ED18((int)&v149, v18, v133, v33, OS_LOG_TYPE_ERROR);
        if (v16)
        {
          sub_20E8C003C((uint64_t)v137, "LP Noise model failed. Fallback succeeded.");
          sub_20E863570((uint64_t)v137);
        }
        sub_20E863570((uint64_t)v137);
        v34 = v143;
        if (v143)
        {
          p_shared_owners = (unint64_t *)&v143->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
LABEL_54:
        v132 = vzip1q_s64(*(int64x2_t *)&__dst[256], *(int64x2_t *)&__dst[376]);
        *(_QWORD *)&v37 = vdupq_laneq_s64(*(int64x2_t *)&__dst[256], 1).u64[0];
        *((_QWORD *)&v37 + 1) = *(_QWORD *)&__dst[384];
        *(_OWORD *)__srcb = v37;
        *(_QWORD *)&v37 = vdupq_laneq_s64(*(int64x2_t *)&__dst[496], 1).u64[0];
        *((_QWORD *)&v37 + 1) = *(_QWORD *)&__dst[624];
        *(_OWORD *)v134 = v37;
        v125 = vzip1q_s64(*(int64x2_t *)&__dst[736], *(int64x2_t *)&__dst[856]);
        *(_QWORD *)&v37 = vdupq_laneq_s64(*(int64x2_t *)&__dst[736], 1).u64[0];
        *((_QWORD *)&v37 + 1) = *(_QWORD *)&__dst[864];
        v129 = vzip1q_s64(*(int64x2_t *)&__dst[496], *(int64x2_t *)&__dst[616]);
        v130 = v37;
        *(_QWORD *)&v37 = vdupq_laneq_s64(*(int64x2_t *)&__dst[976], 1).u64[0];
        *((_QWORD *)&v37 + 1) = *(_QWORD *)&__dst[1104];
        v127 = v37;
        v118 = vzip1q_s64(*(int64x2_t *)&__dst[976], *(int64x2_t *)&__dst[1096]);
        *(_QWORD *)&v37 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1216], 1).u64[0];
        *((_QWORD *)&v37 + 1) = *(_QWORD *)&__dst[1344];
        v123 = v37;
        v111 = vzip1q_s64(*(int64x2_t *)&__dst[1456], *(int64x2_t *)&__dst[1576]);
        *(_QWORD *)&v37 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1456], 1).u64[0];
        *((_QWORD *)&v37 + 1) = *(_QWORD *)&__dst[1584];
        v70 = v37;
        v114 = vzip2q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
        v115 = vzip1q_s64(*(int64x2_t *)&__dst[1216], *(int64x2_t *)&__dst[1336]);
        v126 = vzip1q_s64(*(int64x2_t *)&__dst[272], *(int64x2_t *)&__dst[392]);
        *(_QWORD *)&v38 = vdupq_laneq_s64(*(int64x2_t *)&__dst[272], 1).u64[0];
        *((_QWORD *)&v38 + 1) = *(_QWORD *)&__dst[400];
        v131 = v38;
        *(_QWORD *)&v38 = vdupq_laneq_s64(*(int64x2_t *)&__dst[512], 1).u64[0];
        *((_QWORD *)&v38 + 1) = *(_QWORD *)&__dst[640];
        v128 = v38;
        v120 = vzip2q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
        v121 = vzip1q_s64(*(int64x2_t *)&__dst[512], *(int64x2_t *)&__dst[632]);
        v113 = vzip1q_s64(*(int64x2_t *)&__dst[752], *(int64x2_t *)&__dst[872]);
        *(_QWORD *)&v39 = vdupq_laneq_s64(*(int64x2_t *)&__dst[752], 1).u64[0];
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[880];
        v122 = v39;
        *(_QWORD *)&v39 = vdupq_laneq_s64(*(int64x2_t *)&__dst[992], 1).u64[0];
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1120];
        v116 = v39;
        v107 = vzip1q_s64(*(int64x2_t *)&__dst[1232], *(int64x2_t *)&__dst[1352]);
        v108 = vzip1q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
        *(_QWORD *)&v40 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1232], 1).u64[0];
        *((_QWORD *)&v40 + 1) = *(_QWORD *)&__dst[1360];
        *(_QWORD *)&v41 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1472], 1).u64[0];
        v102 = vzip1q_s64(*(int64x2_t *)&__dst[1472], *(int64x2_t *)&__dst[1592]);
        *((_QWORD *)&v41 + 1) = *(_QWORD *)&__dst[1600];
        v117 = vzip1q_s64(*(int64x2_t *)&__dst[288], *(int64x2_t *)&__dst[408]);
        *(_QWORD *)&v42 = vdupq_laneq_s64(*(int64x2_t *)&__dst[288], 1).u64[0];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[416];
        v124 = v42;
        v109 = vzip1q_s64(*(int64x2_t *)&__dst[528], *(int64x2_t *)&__dst[648]);
        v110 = vzip1q_s64(*(int64x2_t *)&__dst[992], *(int64x2_t *)&__dst[1112]);
        *(_QWORD *)&v39 = vdupq_laneq_s64(*(int64x2_t *)&__dst[528], 1).u64[0];
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[656];
        v119 = v39;
        *(_QWORD *)&v43 = vdupq_laneq_s64(*(int64x2_t *)&__dst[768], 1).u64[0];
        v105 = vzip1q_s64(*(int64x2_t *)&__dst[768], *(int64x2_t *)&__dst[888]);
        *((_QWORD *)&v43 + 1) = *(_QWORD *)&__dst[896];
        v112 = vzip2q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
        v101 = vzip1q_s64(*(int64x2_t *)&__dst[1008], *(int64x2_t *)&__dst[1128]);
        *(_QWORD *)&v44 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1008], 1).u64[0];
        *((_QWORD *)&v44 + 1) = *(_QWORD *)&__dst[1136];
        *(_QWORD *)&v45 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1248], 1).u64[0];
        v97 = vzip1q_s64(*(int64x2_t *)&__dst[1248], *(int64x2_t *)&__dst[1368]);
        v98 = vzip1q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
        *((_QWORD *)&v45 + 1) = *(_QWORD *)&__dst[1376];
        v93 = vzip1q_s64(*(int64x2_t *)&__dst[1488], *(int64x2_t *)&__dst[1608]);
        *(_QWORD *)&v46 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1488], 1).u64[0];
        *((_QWORD *)&v46 + 1) = *(_QWORD *)&__dst[1616];
        v106 = vzip1q_s64(*(int64x2_t *)&__dst[304], *(int64x2_t *)&__dst[424]);
        *(_QWORD *)&v47 = vdupq_laneq_s64(*(int64x2_t *)&__dst[304], 1).u64[0];
        *((_QWORD *)&v47 + 1) = *(_QWORD *)&__dst[432];
        v103 = vzip1q_s64(*(int64x2_t *)&__dst[544], *(int64x2_t *)&__dst[664]);
        *(_QWORD *)&v48 = vdupq_laneq_s64(*(int64x2_t *)&__dst[544], 1).u64[0];
        *((_QWORD *)&v48 + 1) = *(_QWORD *)&__dst[672];
        *(_QWORD *)&v49 = vdupq_laneq_s64(*(int64x2_t *)&__dst[784], 1).u64[0];
        *((_QWORD *)&v49 + 1) = *(_QWORD *)&__dst[912];
        v96 = vzip1q_s64(*(int64x2_t *)&__dst[1024], *(int64x2_t *)&__dst[1144]);
        *(_QWORD *)&v50 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1024], 1).u64[0];
        *((_QWORD *)&v50 + 1) = *(_QWORD *)&__dst[1152];
        *(_QWORD *)&v51 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1264], 1).u64[0];
        v91 = vzip1q_s64(*(int64x2_t *)&__dst[1264], *(int64x2_t *)&__dst[1384]);
        *((_QWORD *)&v51 + 1) = *(_QWORD *)&__dst[1392];
        v82 = vzip1q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
        v99 = vzip1q_s64(*(int64x2_t *)&__dst[784], *(int64x2_t *)&__dst[904]);
        v100 = vzip2q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
        v84 = vzip1q_s64(*(int64x2_t *)&__dst[1504], *(int64x2_t *)&__dst[1624]);
        *(_QWORD *)&v52 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1504], 1).u64[0];
        *((_QWORD *)&v52 + 1) = *(_QWORD *)&__dst[1632];
        *(_QWORD *)&v53 = vdupq_laneq_s64(*(int64x2_t *)&__dst[320], 1).u64[0];
        *((_QWORD *)&v53 + 1) = *(_QWORD *)&__dst[448];
        v104 = vzip2q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
        v94 = vzip1q_s64(*(int64x2_t *)&__dst[560], *(int64x2_t *)&__dst[680]);
        v95 = vzip1q_s64(*(int64x2_t *)&__dst[320], *(int64x2_t *)&__dst[440]);
        *(_QWORD *)&v54 = vdupq_laneq_s64(*(int64x2_t *)&__dst[560], 1).u64[0];
        *((_QWORD *)&v54 + 1) = *(_QWORD *)&__dst[688];
        *(_QWORD *)&v55 = vdupq_laneq_s64(*(int64x2_t *)&__dst[800], 1).u64[0];
        v90 = vzip1q_s64(*(int64x2_t *)&__dst[800], *(int64x2_t *)&__dst[920]);
        *((_QWORD *)&v55 + 1) = *(_QWORD *)&__dst[928];
        v87 = vzip1q_s64(*(int64x2_t *)&__dst[1040], *(int64x2_t *)&__dst[1160]);
        v88 = vzip1q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
        *(_QWORD *)&v37 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1040], 1).u64[0];
        *((_QWORD *)&v37 + 1) = *(_QWORD *)&__dst[1168];
        v81 = vzip1q_s64(*(int64x2_t *)&__dst[1280], *(int64x2_t *)&__dst[1400]);
        *(_QWORD *)&v56 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1280], 1).u64[0];
        *((_QWORD *)&v56 + 1) = *(_QWORD *)&__dst[1408];
        v77 = vzip1q_s64(*(int64x2_t *)&__dst[1520], *(int64x2_t *)&__dst[1640]);
        *(_QWORD *)&v57 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1520], 1).u64[0];
        *((_QWORD *)&v57 + 1) = *(_QWORD *)&__dst[1648];
        *(_QWORD *)&v58 = vdupq_laneq_s64(*(int64x2_t *)&__dst[336], 1).u64[0];
        *((_QWORD *)&v58 + 1) = *(_QWORD *)&__dst[464];
        v85 = vzip1q_s64(*(int64x2_t *)&__dst[336], *(int64x2_t *)&__dst[456]);
        v89 = vzip1q_s64(*(int64x2_t *)&__dst[576], *(int64x2_t *)&__dst[696]);
        *(_QWORD *)&v59 = vdupq_laneq_s64(*(int64x2_t *)&__dst[576], 1).u64[0];
        *((_QWORD *)&v59 + 1) = *(_QWORD *)&__dst[704];
        *(_QWORD *)&v60 = vdupq_laneq_s64(*(int64x2_t *)&__dst[816], 1).u64[0];
        v83 = vzip1q_s64(*(int64x2_t *)&__dst[816], *(int64x2_t *)&__dst[936]);
        *((_QWORD *)&v60 + 1) = *(_QWORD *)&__dst[944];
        v92 = vzip2q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
        v79 = vzip1q_s64(*(int64x2_t *)&__dst[1056], *(int64x2_t *)&__dst[1176]);
        *(_QWORD *)&v61 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1056], 1).u64[0];
        *((_QWORD *)&v61 + 1) = *(_QWORD *)&__dst[1184];
        *(_QWORD *)&v38 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1296], 1).u64[0];
        v74 = vzip1q_s64(*(int64x2_t *)&__dst[1296], *(int64x2_t *)&__dst[1416]);
        v75 = vzip1q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
        *((_QWORD *)&v38 + 1) = *(_QWORD *)&__dst[1424];
        v72 = vzip1q_s64(*(int64x2_t *)&__dst[1536], *(int64x2_t *)&__dst[1656]);
        *(_QWORD *)&v62 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1536], 1).u64[0];
        *((_QWORD *)&v62 + 1) = *(_QWORD *)&__dst[1664];
        v86 = vzip1q_s64(*(int64x2_t *)&__dst[352], *(int64x2_t *)&__dst[472]);
        *(_QWORD *)&v63 = vdupq_laneq_s64(*(int64x2_t *)&__dst[352], 1).u64[0];
        *((_QWORD *)&v63 + 1) = *(_QWORD *)&__dst[480];
        v80 = vzip1q_s64(*(int64x2_t *)&__dst[592], *(int64x2_t *)&__dst[712]);
        *(_QWORD *)&v64 = vdupq_laneq_s64(*(int64x2_t *)&__dst[592], 1).u64[0];
        *((_QWORD *)&v64 + 1) = *(_QWORD *)&__dst[720];
        *(_QWORD *)&v65 = vdupq_laneq_s64(*(int64x2_t *)&__dst[832], 1).u64[0];
        *((_QWORD *)&v65 + 1) = *(_QWORD *)&__dst[960];
        v76 = vzip1q_s64(*(int64x2_t *)&__dst[832], *(int64x2_t *)&__dst[952]);
        v73 = vzip1q_s64(*(int64x2_t *)&__dst[1072], *(int64x2_t *)&__dst[1192]);
        *(_QWORD *)&v66 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1072], 1).u64[0];
        *((_QWORD *)&v66 + 1) = *(_QWORD *)&__dst[1200];
        *(_QWORD *)&v67 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1312], 1).u64[0];
        v71 = vzip1q_s64(*(int64x2_t *)&__dst[1312], *(int64x2_t *)&__dst[1432]);
        *((_QWORD *)&v67 + 1) = *(_QWORD *)&__dst[1440];
        v69 = vzip1q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
        v78 = vzip2q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
        v68 = vzip1q_s64(*(int64x2_t *)&__dst[1552], *(int64x2_t *)&__dst[1672]);
        *(_QWORD *)&v42 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1552], 1).u64[0];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[1680];
        *(int64x2_t *)(a2 + 16) = vzip1q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
        *(int64x2_t *)(a2 + 32) = v132;
        *(int64x2_t *)(a2 + 112) = v111;
        *(int64x2_t *)(a2 + 96) = v115;
        *(int64x2_t *)(a2 + 80) = v118;
        *(int64x2_t *)(a2 + 64) = v125;
        *(int64x2_t *)(a2 + 48) = v129;
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1704];
        *(_QWORD *)(a2 + 128) = *(_QWORD *)&__dst[1696];
        *(_QWORD *)(a2 + 248) = *((_QWORD *)&v39 + 1);
        *(int64x2_t *)(a2 + 136) = v114;
        *(_OWORD *)(a2 + 232) = v70;
        *(_OWORD *)(a2 + 216) = v123;
        *(_OWORD *)(a2 + 200) = v127;
        *(_OWORD *)(a2 + 184) = v130;
        *(_OWORD *)(a2 + 168) = *(_OWORD *)v134;
        *(_OWORD *)(a2 + 152) = *(_OWORD *)__srcb;
        *(int64x2_t *)(a2 + 256) = v108;
        *(int64x2_t *)(a2 + 272) = v126;
        *(int64x2_t *)(a2 + 352) = v102;
        *(int64x2_t *)(a2 + 336) = v107;
        *(int64x2_t *)(a2 + 320) = v110;
        *(int64x2_t *)(a2 + 304) = v113;
        *(int64x2_t *)(a2 + 288) = v121;
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1720];
        *(_QWORD *)(a2 + 368) = *(_QWORD *)&__dst[1712];
        *(_QWORD *)(a2 + 488) = *((_QWORD *)&v39 + 1);
        *(int64x2_t *)(a2 + 376) = v120;
        *(_OWORD *)(a2 + 472) = v41;
        *(_OWORD *)(a2 + 456) = v40;
        *(_OWORD *)(a2 + 440) = v116;
        *(_OWORD *)(a2 + 424) = v122;
        *(_OWORD *)(a2 + 408) = v128;
        *(_OWORD *)(a2 + 392) = v131;
        *(int64x2_t *)(a2 + 496) = v98;
        *(int64x2_t *)(a2 + 512) = v117;
        *(int64x2_t *)(a2 + 592) = v93;
        *(int64x2_t *)(a2 + 576) = v97;
        *(int64x2_t *)(a2 + 560) = v101;
        *(int64x2_t *)(a2 + 544) = v105;
        *(int64x2_t *)(a2 + 528) = v109;
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1736];
        *(_QWORD *)(a2 + 608) = *(_QWORD *)&__dst[1728];
        *(_QWORD *)(a2 + 728) = *((_QWORD *)&v39 + 1);
        *(_OWORD *)(a2 + 696) = v45;
        *(_OWORD *)(a2 + 712) = v46;
        *(_OWORD *)(a2 + 664) = v43;
        *(_OWORD *)(a2 + 680) = v44;
        *(_OWORD *)(a2 + 648) = v119;
        *(int64x2_t *)(a2 + 616) = v112;
        *(_OWORD *)(a2 + 632) = v124;
        *(int64x2_t *)(a2 + 736) = v82;
        *(int64x2_t *)(a2 + 752) = v106;
        *(int64x2_t *)(a2 + 832) = v84;
        *(int64x2_t *)(a2 + 816) = v91;
        *(int64x2_t *)(a2 + 800) = v96;
        *(int64x2_t *)(a2 + 784) = v99;
        *(int64x2_t *)(a2 + 768) = v103;
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1752];
        *(_QWORD *)(a2 + 848) = *(_QWORD *)&__dst[1744];
        *(_QWORD *)(a2 + 968) = *((_QWORD *)&v39 + 1);
        *(_OWORD *)(a2 + 936) = v51;
        *(_OWORD *)(a2 + 952) = v52;
        *(_OWORD *)(a2 + 904) = v49;
        *(_OWORD *)(a2 + 920) = v50;
        *(_OWORD *)(a2 + 872) = v47;
        *(_OWORD *)(a2 + 888) = v48;
        *(int64x2_t *)(a2 + 856) = v100;
        *(int64x2_t *)(a2 + 976) = v88;
        *(int64x2_t *)(a2 + 992) = v95;
        *(int64x2_t *)(a2 + 1072) = v77;
        *(int64x2_t *)(a2 + 1056) = v81;
        *(int64x2_t *)(a2 + 1040) = v87;
        *(int64x2_t *)(a2 + 1024) = v90;
        *(int64x2_t *)(a2 + 1008) = v94;
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1768];
        *(_QWORD *)(a2 + 1088) = *(_QWORD *)&__dst[1760];
        *(_QWORD *)(a2 + 1208) = *((_QWORD *)&v39 + 1);
        *(_OWORD *)(a2 + 1176) = v56;
        *(_OWORD *)(a2 + 1192) = v57;
        *(_OWORD *)(a2 + 1144) = v55;
        *(_OWORD *)(a2 + 1160) = v37;
        *(_OWORD *)(a2 + 1112) = v53;
        *(_OWORD *)(a2 + 1128) = v54;
        *(int64x2_t *)(a2 + 1096) = v104;
        *(int64x2_t *)(a2 + 1216) = v75;
        *(int64x2_t *)(a2 + 1232) = v85;
        *(int64x2_t *)(a2 + 1312) = v72;
        *(int64x2_t *)(a2 + 1296) = v74;
        *(int64x2_t *)(a2 + 1280) = v79;
        *(int64x2_t *)(a2 + 1264) = v83;
        *(int64x2_t *)(a2 + 1248) = v89;
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1784];
        *(_QWORD *)(a2 + 1328) = *(_QWORD *)&__dst[1776];
        *(_QWORD *)(a2 + 1448) = *((_QWORD *)&v39 + 1);
        *(_OWORD *)(a2 + 1416) = v38;
        *(_OWORD *)(a2 + 1432) = v62;
        *(_OWORD *)(a2 + 1384) = v60;
        *(_OWORD *)(a2 + 1400) = v61;
        *(_OWORD *)(a2 + 1352) = v58;
        *(_OWORD *)(a2 + 1368) = v59;
        *(int64x2_t *)(a2 + 1336) = v92;
        *(int64x2_t *)(a2 + 1456) = v69;
        *(int64x2_t *)(a2 + 1472) = v86;
        *(int64x2_t *)(a2 + 1552) = v68;
        *(int64x2_t *)(a2 + 1536) = v71;
        *(int64x2_t *)(a2 + 1520) = v73;
        *(int64x2_t *)(a2 + 1504) = v76;
        *(int64x2_t *)(a2 + 1488) = v80;
        *((_QWORD *)&v39 + 1) = v146;
        *(_QWORD *)(a2 + 1568) = *(_QWORD *)&__dst[1792];
        *(_QWORD *)(a2 + 1688) = *((_QWORD *)&v39 + 1);
        *(_OWORD *)(a2 + 1656) = v67;
        *(_OWORD *)(a2 + 1672) = v42;
        *(_OWORD *)(a2 + 1624) = v65;
        *(_OWORD *)(a2 + 1640) = v66;
        *(_OWORD *)(a2 + 1592) = v63;
        *(_OWORD *)(a2 + 1608) = v64;
        *(int64x2_t *)(a2 + 1576) = v78;
        *(_QWORD *)&v42 = *(_QWORD *)&__dst[128];
        *(_QWORD *)(a2 + 1808) = v147;
        *(_QWORD *)&v39 = *(_QWORD *)&__dst[1328];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[248];
        *(_OWORD *)(a2 + 1696) = v42;
        *(_QWORD *)&v42 = *(_QWORD *)&__dst[1568];
        *((_QWORD *)&v39 + 1) = *(_QWORD *)&__dst[1448];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[1688];
        *(_OWORD *)(a2 + 1792) = v42;
        *(_OWORD *)(a2 + 1776) = v39;
        *(_QWORD *)&v42 = *(_QWORD *)&__dst[1088];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[1208];
        *(_OWORD *)(a2 + 1760) = v42;
        *(_QWORD *)&v42 = *(_QWORD *)&__dst[848];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[968];
        *(_OWORD *)(a2 + 1744) = v42;
        *(_QWORD *)&v42 = *(_QWORD *)&__dst[608];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[728];
        *(_OWORD *)(a2 + 1728) = v42;
        *(_QWORD *)&v42 = *(_QWORD *)&__dst[368];
        *((_QWORD *)&v42 + 1) = *(_QWORD *)&__dst[488];
        *(_OWORD *)(a2 + 1712) = v42;
        *(_BYTE *)(a2 + 8) = 1;
        return;
      }
    }
    memmove(v25, v23, v24);
    goto LABEL_32;
  }
}

void sub_20F61EC74(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 200))
  {
    if (*(char *)(v1 - 201) < 0)
      operator delete(*(void **)(v1 - 224));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F61ECBC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F61ECD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 - 192) && *(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  v3 = *(void **)(v1 - 224);
  if (v3)
    os_release(v3);
  sub_20E863714((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F61ED18(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F61F0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F61F0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F61F0E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F61F108(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 != v5)
  {
    while (1)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (v6)
      {
        if (!*(_QWORD *)(v6 + 8))
          break;
      }
      v4 += 16;
      if (v4 == v5)
        goto LABEL_9;
    }
  }
  if (v4 != v5)
  {
    *a2 = *(_QWORD *)v4;
    v7 = *((_QWORD *)v4 + 1);
    a2[1] = v7;
    if (!v7)
      return;
    goto LABEL_17;
  }
LABEL_9:
  v8 = operator new(0x730uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24CA01678;
  v8[3] = &off_24CA00398;
  *((_BYTE *)v8 + 32) = 1;
  bzero(v8 + 6, 0x6F8uLL);
  v8[5] = 0x3FF0000000000000;
  v8[21] = 0x3FF0000000000000;
  v8[37] = 0x3FF0000000000000;
  v8[53] = 0x3FF0000000000000;
  v8[69] = 0x3FF0000000000000;
  v8[85] = 0x3FF0000000000000;
  v8[101] = 0x3FF0000000000000;
  v8[117] = 0x3FF0000000000000;
  v8[133] = 0x3FF0000000000000;
  v8[149] = 0x3FF0000000000000;
  v8[165] = 0x3FF0000000000000;
  v8[181] = 0x3FF0000000000000;
  v8[197] = 0x3FF0000000000000;
  v8[213] = 0x3FF0000000000000;
  v8[229] = 0x3FF0000000000000;
  v17 = (char *)(v8 + 3);
  v18 = (std::__shared_weak_count *)v8;
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
  {
    v9 = sub_20EAFDCA4((char **)a1, (uint64_t)&v17);
    v10 = v18;
    *(_QWORD *)(a1 + 8) = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    *(_QWORD *)v5 = v8 + 3;
    *((_QWORD *)v5 + 1) = v8;
    *(_QWORD *)(a1 + 8) = v5 + 16;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(v13 - 16);
  v7 = *(_QWORD *)(v13 - 8);
  *a2 = v14;
  a2[1] = v7;
  if (v7)
  {
LABEL_17:
    v15 = (unint64_t *)(v7 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
}

void sub_20F61F298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F61F2AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA01678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F61F2BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA01678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F61F2EC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20F61F2FC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8016;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F61F394(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *i;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  __int128 v33;
  void (***v34)(_QWORD);
  void (***v35)(_QWORD);
  void (**v36)(_QWORD);
  BOOL v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;

  v3 = sub_20E9DF85C((_QWORD *)(a1 + 24), (uint64_t *)a2);
  if (v3)
  {
    for (i = (_QWORD *)v3[7]; i; i = (_QWORD *)*i)
    {
      v6 = i[3];
      v5 = (std::__shared_weak_count *)i[4];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if (!*(_BYTE *)(v6 + 528))
        goto LABEL_45;
      v40 = v6 + 40;
      v9 = *(_QWORD *)(v6 + 536);
      v10 = *(_QWORD *)(v6 + 544);
      v11 = *(_QWORD *)a2;
      v12 = *(_DWORD *)(a2 + 8);
      v13 = *(_DWORD *)(a2 + 16);
      if (v10 != v9)
      {
        v14 = (v10 - v9) >> 5;
        while (1)
        {
          v15 = v14 >> 1;
          v16 = v9 + 32 * (v14 >> 1);
          v17 = *(_DWORD *)(v16 + 16);
          v18 = v17 >= v13;
          if (v17 != v13)
            goto LABEL_17;
          if (*(_QWORD *)v16 >= v11)
            break;
LABEL_11:
          v9 = v16 + 32;
          v15 = v14 + ~v15;
LABEL_12:
          v14 = v15;
          if (!v15)
            goto LABEL_20;
        }
        if (*(_QWORD *)v16 != v11)
          goto LABEL_12;
        v18 = *(_DWORD *)(v16 + 8) >= v12;
LABEL_17:
        if (v18)
          goto LABEL_12;
        goto LABEL_11;
      }
LABEL_20:
      if (v9 != v10
        && *(_DWORD *)(v9 + 16) == v13
        && *(_QWORD *)v9 == v11
        && *(_DWORD *)(v9 + 8) == v12
        && (v19 = *(_QWORD *)(v9 + 24)) != 0)
      {
        v21 = *(_QWORD *)(v6 + 24);
        v20 = *(_QWORD *)(v6 + 32);
        v23 = *(_QWORD **)(a2 + 32);
        v22 = *(_QWORD *)(a2 + 40);
        if ((unint64_t)v23 < v22)
          goto LABEL_26;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 376, (uint64_t)"ftr_ptr != nullptr", 18, (uint64_t)"Cannot find the feature in the track", 36, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v19 = 0;
        v21 = *(_QWORD *)(v6 + 24);
        v20 = *(_QWORD *)(v6 + 32);
        v23 = *(_QWORD **)(a2 + 32);
        v22 = *(_QWORD *)(a2 + 40);
        if ((unint64_t)v23 < v22)
        {
LABEL_26:
          *v23 = &off_24C9FD220;
          v23[1] = v21;
          v23[2] = v20;
          v23[3] = v19;
          v24 = v23 + 5;
          v23[4] = v40;
          goto LABEL_44;
        }
      }
      v25 = *(_QWORD **)(a2 + 24);
      v26 = 0xCCCCCCCCCCCCCCCDLL * (v23 - v25) + 1;
      if (v26 > 0x666666666666666)
        sub_20E867F44();
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v25) >> 3);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x333333333333333)
        v28 = 0x666666666666666;
      else
        v28 = v26;
      if (v28 > 0x666666666666666)
        sub_20E877A38();
      v29 = (char *)operator new(40 * v28);
      v30 = &v29[8 * (v23 - v25)];
      *(_QWORD *)v30 = &off_24C9FD220;
      *((_QWORD *)v30 + 1) = v21;
      v31 = &v29[40 * v28];
      *((_QWORD *)v30 + 2) = v20;
      *((_QWORD *)v30 + 3) = v19;
      *((_QWORD *)v30 + 4) = v40;
      v24 = v30 + 40;
      if (v23 == v25)
      {
        *(_QWORD *)(a2 + 24) = v30;
        *(_QWORD *)(a2 + 32) = v24;
        *(_QWORD *)(a2 + 40) = v31;
        if (!v23)
          goto LABEL_44;
      }
      else
      {
        v32 = v23;
        do
        {
          v33 = *((_OWORD *)v32 - 2);
          *((_QWORD *)v30 - 5) = &off_24C9FD220;
          v30 -= 40;
          *(_OWORD *)(v30 + 8) = v33;
          *(_OWORD *)(v30 + 24) = *((_OWORD *)v32 - 1);
          v32 -= 5;
        }
        while (v32 != v25);
        *(_QWORD *)(a2 + 24) = v30;
        *(_QWORD *)(a2 + 32) = v24;
        *(_QWORD *)(a2 + 40) = v31;
        v34 = (void (***)(_QWORD))(v23 - 5);
        v35 = v34;
        do
        {
          v36 = *v35;
          v35 -= 5;
          (*v36)(v34);
          v37 = v34 == v25;
          v34 = v35;
        }
        while (!v37);
        v23 = v25;
        if (!v25)
          goto LABEL_44;
      }
      operator delete(v23);
LABEL_44:
      *(_QWORD *)(a2 + 32) = v24;
LABEL_45:
      if (v5)
      {
        v38 = (unint64_t *)&v5->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_20F61F6C4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20F61F708(unsigned int a1, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8, __n128 a9, double a10, uint64_t a11)
{
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  char *v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_count *v76;
  std::__shared_weak_count *v77;
  unsigned int v78;
  uint64_t shared_owners;
  std::__shared_weak_count *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_count *v83;
  std::__shared_weak_count *v84;
  unsigned int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_count *v90;
  std::__shared_weak_count *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t v96;
  std::__shared_count *v97;
  std::__shared_weak_count *v98;
  unsigned int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  char *v102;
  unint64_t v103;
  unsigned int *v104;
  char *v105;
  unsigned int v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  __int128 v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  char v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unsigned int v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unsigned int v148;
  _QWORD *v149;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v152;
  _QWORD *v153;
  int v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned int *v161;
  char *v162;
  unsigned int v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v166;
  char *v167;
  unsigned int v168;
  uint64_t v169;
  _QWORD *v170;
  std::string *v171;
  std::string::size_type v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  const char *v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  _QWORD *v185;
  std::string *v186;
  std::string::size_type v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  char *v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int *v197;
  char *v198;
  unsigned int v199;
  uint64_t v200;
  _QWORD *v201;
  std::string *v202;
  std::string::size_type v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  const char *v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  _QWORD *v215;
  std::string *v216;
  std::string::size_type v217;
  _QWORD *v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int *v222;
  char *v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int *v227;
  char *v228;
  unsigned int v229;
  uint64_t v230;
  _QWORD *v231;
  std::string *v232;
  std::string::size_type v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  const char *v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  char *v242;
  char *v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  _QWORD *v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int *v253;
  char *v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int *v258;
  char *v259;
  unsigned int v260;
  uint64_t v261;
  _QWORD *v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  const char *v269;
  uint64_t v270;
  _QWORD *v271;
  int v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  _QWORD *v277;
  std::string *v278;
  std::string::size_type v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int *v284;
  char *v285;
  unsigned int v286;
  unint64_t v287;
  unint64_t v288;
  unsigned int *v289;
  char *v290;
  unsigned int v291;
  uint64_t v292;
  _QWORD *v293;
  std::string *v294;
  std::string::size_type v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  const char *v300;
  uint64_t v301;
  _QWORD *v302;
  char *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  std::string *v308;
  std::string::size_type v309;
  _QWORD *v310;
  _QWORD *v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int *v314;
  char *v315;
  unsigned int v316;
  unint64_t v317;
  unint64_t v318;
  unsigned int *v319;
  char *v320;
  unsigned int v321;
  uint64_t v322;
  _QWORD *v323;
  std::string *v324;
  std::string::size_type v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  const char *v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  char *v334;
  char *v335;
  uint64_t v336;
  _QWORD *v337;
  std::string *v338;
  std::string::size_type v339;
  _QWORD *v340;
  _QWORD *v341;
  unint64_t v342;
  unint64_t v343;
  unsigned int *v344;
  char *v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  unsigned int *v349;
  char *v350;
  unsigned int v351;
  uint64_t v352;
  _QWORD *v353;
  std::string *v354;
  std::string::size_type v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  const char *v360;
  uint64_t v361;
  _QWORD *v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  _QWORD *v367;
  std::string *v368;
  std::string::size_type v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  unsigned int *v374;
  char *v375;
  unsigned int v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  char *v380;
  unsigned int v381;
  uint64_t v382;
  _QWORD *v383;
  std::string *v384;
  std::string::size_type v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  const char *v390;
  uint64_t v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  _QWORD *v397;
  std::string *v398;
  std::string::size_type v399;
  _QWORD *v400;
  _QWORD *v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int *v404;
  char *v405;
  unsigned int v406;
  unint64_t v407;
  unint64_t v408;
  unsigned int *v409;
  char *v410;
  unsigned int v411;
  uint64_t v412;
  _QWORD *v413;
  std::string *v414;
  std::string::size_type v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  _QWORD *v419;
  const char *v420;
  uint64_t v421;
  _QWORD *v422;
  int v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  _QWORD *v428;
  std::string *v429;
  std::string::size_type v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int *v435;
  char *v436;
  unsigned int v437;
  unint64_t v438;
  unint64_t v439;
  unsigned int *v440;
  char *v441;
  unsigned int v442;
  uint64_t v443;
  _QWORD *v444;
  std::string *v445;
  std::string::size_type v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  const char *v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  _QWORD *v458;
  std::string *v459;
  std::string::size_type v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  unint64_t v464;
  unsigned int *v465;
  char *v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  unsigned int *v470;
  char *v471;
  unsigned int v472;
  int v473;
  uint64_t v474;
  _QWORD *v475;
  std::string *v476;
  std::string::size_type v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  const char *v482;
  uint64_t v483;
  _QWORD *v484;
  char *v485;
  char *v486;
  uint64_t v487;
  _QWORD *v488;
  std::string *v489;
  std::string::size_type v490;
  _QWORD *v491;
  _QWORD *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t *v495;
  char *v496;
  unint64_t v497;
  _QWORD *v498;
  std::string *v499;
  std::string::size_type v500;
  _QWORD *v501;
  _QWORD *v502;
  BOOL v503;
  char v504;
  std::string::size_type v505;
  std::string *v506;
  _QWORD *v507;
  std::string *v508;
  std::string::size_type v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  const void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  std::string *v517;
  __int128 v518;
  std::string *v519;
  __int128 v520;
  void **v521;
  uint64_t v522;
  _BOOL4 v523;
  unint64_t v524;
  __int128 v525;
  unint64_t v526;
  __int128 v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  unint64_t *p_shared_owners;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  char *v535;
  unint64_t *v536;
  __int128 v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t *v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  unint64_t v546;
  __int128 v547;
  unint64_t v548;
  std::string::size_type v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  char *v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t *v560;
  uint64_t v561;
  std::string::size_type v562;
  char *v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  unint64_t v569;
  unint64_t *v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  unint64_t v574;
  __int128 v575;
  unint64_t v576;
  std::string::size_type v577;
  char *v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  int64x2_t v588;
  unint64_t v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  char *v595;
  int64_t v596;
  unint64_t v597;
  int v598;
  std::__shared_weak_count *v599;
  std::__shared_weak_count *v600;
  int v601;
  std::__shared_weak_count *v602;
  std::__shared_weak_count *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  std::string v606;
  void *v607[2];
  int64_t v608;
  uint64_t v609;
  std::__shared_weak_count *v610;
  uint64_t v611;
  std::__shared_weak_count *v612;
  std::string v613;
  std::string v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  unint64_t v620;
  __int128 v621;
  __int128 v622;
  unint64_t v623;
  char v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  char v627;
  std::string __p;
  char *v629;
  uint64_t v630;
  unint64_t v631;
  char v632;
  __int128 v633;
  int64x2_t v634;
  __int128 v635;
  std::string v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  unint64_t v642;
  __int128 v643;
  __int128 v644;
  unint64_t v645;
  char v646;
  __int128 v647;
  char v648;

  v14 = a2;
  v16 = a11;
  v17 = a8;
  v609 = 0;
  v610 = 0;
  v611 = 0;
  v612 = 0;
  v18 = *(unint64_t **)(a11 + 992);
  v19 = *(unint64_t **)(a11 + 1000);
  if (v18 == v19)
  {
    v20 = *(unint64_t **)(a11 + 992);
  }
  else
  {
    v20 = *(unint64_t **)(a11 + 1000);
    if (*(v19 - 27) >= a8)
    {
      v21 = 0x84BDA12F684BDA13 * (v19 - v18);
      v22 = *(unint64_t **)(a11 + 992);
      do
      {
        v23 = v21 >> 1;
        v24 = &v22[27 * (v21 >> 1)];
        v26 = *v24;
        v25 = v24 + 27;
        v21 += ~(v21 >> 1);
        if (v26 < a8)
          v22 = v25;
        else
          v21 = v23;
      }
      while (v21);
      v20 = *(unint64_t **)(a11 + 1000);
      if (v22 != v19)
      {
        v20 = v22;
        if (*v22 == a8)
        {
LABEL_159:
          v124 = 1;
          v125 = v610;
          if (!v610)
            goto LABEL_165;
          goto LABEL_162;
        }
      }
    }
  }
  v613.__r_.__value_.__r.__words[0] = a8;
  *(__n128 *)&v613.__r_.__value_.__r.__words[1] = a9;
  v614.__r_.__value_.__r.__words[0] = a7;
  v614.__r_.__value_.__l.__size_ = a6;
  *(double *)&v614.__r_.__value_.__r.__words[2] = a10;
  v615 = 0u;
  v616 = 0u;
  v617 = 0u;
  v618 = 0u;
  v619 = 0u;
  v625 = 0;
  v626 = 0;
  v620 = 0;
  v623 = 0xBFF0000000000000;
  v624 = 0;
  v627 = 0;
  v28 = *(char **)(a11 + 416);
  v27 = *(char **)(a11 + 424);
  v29 = v27 - v28;
  if (v27 == v28)
    goto LABEL_153;
  a2 = &v615;
  v30 = v29 >> 4;
  v31 = *(char **)(a11 + 416);
  v32 = v29 >> 4;
  do
  {
    v33 = v32 >> 1;
    v34 = (unsigned int *)&v31[16 * (v32 >> 1)];
    v36 = *v34;
    v35 = (char *)(v34 + 4);
    v32 += ~(v32 >> 1);
    if (v36 < v14)
      v31 = v35;
    else
      v32 = v33;
  }
  while (v32);
  if (v31 == v27 || *(_DWORD *)v31 != v14)
  {
LABEL_153:
    v120 = 1;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v37 = *((_QWORD *)v31 + 1);
  *(_QWORD *)&v615 = v37;
  ++*(_DWORD *)(*((_QWORD *)v31 + 1) + 8);
  do
  {
    v38 = v30 >> 1;
    v39 = (unsigned int *)&v28[16 * (v30 >> 1)];
    v41 = *v39;
    v40 = (char *)(v39 + 4);
    v30 += ~(v30 >> 1);
    if (v41 < a4)
      v28 = v40;
    else
      v30 = v38;
  }
  while (v30);
  if (v28 == v27 || *(_DWORD *)v28 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    v42 = 0;
LABEL_133:
    if (v37)
      --*(_DWORD *)(v37 + 8);
    if (v42)
      --*(_DWORD *)(v42 + 8);
    if (v51)
      --*(_DWORD *)(v51 + 8);
    if (v57)
      --*(_DWORD *)(v57 + 8);
    if (v66)
      --*(_DWORD *)(v66 + 8);
    if (v72)
      --*(_DWORD *)(v72 + 8);
    if (shared_owners)
      --*(_DWORD *)(shared_owners + 8);
    if (v86)
      --*(_DWORD *)(v86 + 8);
    if (v93)
      --*(_DWORD *)(v93 + 8);
    if (v100)
      --*(_DWORD *)(v100 + 8);
    goto LABEL_153;
  }
  v42 = *((_QWORD *)v28 + 1);
  *((_QWORD *)&v615 + 1) = v42;
  ++*(_DWORD *)(*((_QWORD *)v28 + 1) + 8);
  v44 = *(char **)(a11 + 128);
  v43 = *(char **)(a11 + 136);
  v45 = v44;
  if (v43 != v44)
  {
    v46 = (v43 - v44) >> 4;
    v45 = *(char **)(a11 + 128);
    do
    {
      v47 = v46 >> 1;
      v48 = (unsigned int *)&v45[16 * (v46 >> 1)];
      v50 = *v48;
      v49 = (char *)(v48 + 4);
      v46 += ~(v46 >> 1);
      if (v50 < a1)
        v45 = v49;
      else
        v46 = v47;
    }
    while (v46);
  }
  if (v45 == v43 || *(_DWORD *)v45 != a1)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    goto LABEL_133;
  }
  v51 = *((_QWORD *)v45 + 1);
  *(_QWORD *)&v616 = v51;
  ++*(_DWORD *)(*((_QWORD *)v45 + 1) + 8);
  if (v43 != v44)
  {
    v52 = (v43 - v44) >> 4;
    do
    {
      v53 = v52 >> 1;
      v54 = (unsigned int *)&v44[16 * (v52 >> 1)];
      v56 = *v54;
      v55 = (char *)(v54 + 4);
      v52 += ~(v52 >> 1);
      if (v56 < a3)
        v44 = v55;
      else
        v52 = v53;
    }
    while (v52);
  }
  if (v44 == v43 || *(_DWORD *)v44 != a3)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    goto LABEL_133;
  }
  v57 = *((_QWORD *)v44 + 1);
  *((_QWORD *)&v616 + 1) = v57;
  ++*(_DWORD *)(*((_QWORD *)v44 + 1) + 8);
  v58 = *(char **)(a11 + 512);
  v59 = *(char **)(a11 + 520);
  v60 = v58;
  if (v59 != v58)
  {
    v61 = (v59 - v58) >> 4;
    v60 = *(char **)(a11 + 512);
    do
    {
      v62 = v61 >> 1;
      v63 = (unsigned int *)&v60[16 * (v61 >> 1)];
      v65 = *v63;
      v64 = (char *)(v63 + 4);
      v61 += ~(v61 >> 1);
      if (v65 < v14)
        v60 = v64;
      else
        v61 = v62;
    }
    while (v61);
  }
  if (v60 == v59 || *(_DWORD *)v60 != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    goto LABEL_133;
  }
  v66 = *((_QWORD *)v60 + 1);
  *(_QWORD *)&v617 = v66;
  ++*(_DWORD *)(*((_QWORD *)v60 + 1) + 8);
  if (v59 != v58)
  {
    v67 = (v59 - v58) >> 4;
    do
    {
      v68 = v67 >> 1;
      v69 = (unsigned int *)&v58[16 * (v67 >> 1)];
      v71 = *v69;
      v70 = (char *)(v69 + 4);
      v67 += ~(v67 >> 1);
      if (v71 < a4)
        v58 = v70;
      else
        v67 = v68;
    }
    while (v67);
  }
  if (v58 == v59 || *(_DWORD *)v58 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    goto LABEL_133;
  }
  v72 = *((_QWORD *)v58 + 1);
  *((_QWORD *)&v617 + 1) = v72;
  ++*(_DWORD *)(*((_QWORD *)v58 + 1) + 8);
  v73 = *(std::__shared_weak_count **)(a11 + 608);
  v599 = *(std::__shared_weak_count **)(a11 + 616);
  v603 = v73;
  if (v599 != v73)
  {
    v74 = ((char *)v599 - (char *)v73) >> 4;
    do
    {
      v75 = v74 >> 1;
      v76 = (std::__shared_weak_count *)((char *)v73 + 16 * (v74 >> 1));
      v78 = v76->__vftable;
      v77 = (std::__shared_weak_count *)&v76[1];
      v74 += ~(v74 >> 1);
      if (v78 < v14)
        v73 = v77;
      else
        v74 = v75;
    }
    while (v74);
  }
  if (v73 == v599 || LODWORD(v73->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    goto LABEL_133;
  }
  shared_owners = v73->__shared_owners_;
  *(_QWORD *)&v618 = shared_owners;
  ++*(_DWORD *)(v73->__shared_owners_ + 8);
  v80 = v603;
  if (v599 != v603)
  {
    v81 = ((char *)v599 - (char *)v603) >> 4;
    do
    {
      v82 = v81 >> 1;
      v83 = (std::__shared_weak_count *)((char *)v80 + 16 * (v81 >> 1));
      v85 = v83->__vftable;
      v84 = (std::__shared_weak_count *)&v83[1];
      v81 += ~(v81 >> 1);
      if (v85 < a4)
        v80 = v84;
      else
        v81 = v82;
    }
    while (v81);
  }
  if (v80 == v599 || LODWORD(v80->__vftable) != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    goto LABEL_133;
  }
  v597 = v17;
  v86 = v80->__shared_owners_;
  *((_QWORD *)&v618 + 1) = v86;
  ++*(_DWORD *)(v80->__shared_owners_ + 8);
  v87 = *(std::__shared_weak_count **)(a11 + 704);
  v600 = *(std::__shared_weak_count **)(a11 + 712);
  v604 = v87;
  if (v600 != v87)
  {
    v88 = ((char *)v600 - (char *)v87) >> 4;
    do
    {
      v89 = v88 >> 1;
      v90 = (std::__shared_weak_count *)((char *)v87 + 16 * (v88 >> 1));
      v92 = v90->__vftable;
      v91 = (std::__shared_weak_count *)&v90[1];
      v88 += ~(v88 >> 1);
      if (v92 < v14)
        v87 = v91;
      else
        v88 = v89;
    }
    while (v88);
  }
  if (v87 == v600 || LODWORD(v87->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
LABEL_132:
    v17 = v597;
    v16 = a11;
    goto LABEL_133;
  }
  v93 = v87->__shared_owners_;
  *(_QWORD *)&v619 = v93;
  ++*(_DWORD *)(v87->__shared_owners_ + 8);
  if (v600 == v604)
  {
    v95 = v604;
  }
  else
  {
    v94 = ((char *)v600 - (char *)v604) >> 4;
    v95 = v604;
    do
    {
      v96 = v94 >> 1;
      v97 = (std::__shared_weak_count *)((char *)v95 + 16 * (v94 >> 1));
      v99 = v97->__vftable;
      v98 = (std::__shared_weak_count *)&v97[1];
      v94 += ~(v94 >> 1);
      if (v99 < a4)
        v95 = v98;
      else
        v94 = v96;
    }
    while (v94);
  }
  if (v95 == v600 || (v101 = v95, LODWORD(v95->__vftable) != a4))
  {
    v100 = 0;
    goto LABEL_132;
  }
  v100 = v95->__shared_owners_;
  *((_QWORD *)&v619 + 1) = v101->__shared_owners_;
  ++*(_DWORD *)(v101->__shared_owners_ + 8);
  v102 = *(char **)(a11 + 800);
  v595 = *(char **)(a11 + 808);
  if (v595 != v102)
  {
    v103 = (v595 - v102) >> 4;
    do
    {
      v104 = (unsigned int *)&v102[16 * (v103 >> 1)];
      v106 = *v104;
      v105 = (char *)(v104 + 4);
      v107 = v106 >= a5;
      if (v106 >= a5)
        v103 >>= 1;
      else
        v103 += ~(v103 >> 1);
      if (!v107)
        v102 = v105;
    }
    while (v103);
  }
  if (v102 == v595 || *(_DWORD *)v102 != a5)
    goto LABEL_132;
  v108 = *((_QWORD *)v102 + 1);
  v620 = v108;
  ++*(_DWORD *)(*((_QWORD *)v102 + 1) + 8);
  if (!*(_BYTE *)(v37 + 20)
    && !*(_BYTE *)(v42 + 20)
    && !*(_BYTE *)(v51 + 20)
    && !*(_BYTE *)(v57 + 20)
    && !*(_BYTE *)(v66 + 20)
    && !*(_BYTE *)(v72 + 20)
    && !*(_BYTE *)(shared_owners + 20)
    && !*(_BYTE *)(v86 + 20)
    && !*(_BYTE *)(v93 + 20)
    && !*(_BYTE *)(v100 + 20)
    && !*(_BYTE *)(v108 + 20))
  {
    --*(_DWORD *)(v37 + 8);
    --*(_DWORD *)(v42 + 8);
    v615 = 0u;
    --*(_DWORD *)(v51 + 8);
    --*(_DWORD *)(v57 + 8);
    v616 = 0u;
    --*(_DWORD *)(v66 + 8);
    --*(_DWORD *)(v72 + 8);
    v617 = 0u;
    --*(_DWORD *)(shared_owners + 8);
    --*(_DWORD *)(v86 + 8);
    v618 = 0u;
    --*(_DWORD *)(v93 + 8);
    --*(_DWORD *)(v100 + 8);
    v619 = 0u;
    --*(_DWORD *)(v108 + 8);
    v120 = 1;
    v17 = v597;
    v16 = a11;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v634.i64[0] = v597;
  v634.i64[1] = v597;
  v635 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
  v636 = v614;
  v639 = v617;
  v640 = v618;
  v641 = v619;
  v642 = v620;
  v637 = v615;
  v638 = v616;
  v643 = v621;
  v644 = v622;
  v645 = v623;
  v646 = v624;
  v647 = 0uLL;
  v625 = 0;
  v626 = 0;
  v648 = 0;
  if (v19 == v20 || *v20 != v597)
  {
    v596 = 0x84BDA12F684BDA13 * (v20 - v18);
    v109 = *(_QWORD *)(a11 + 1008);
    if ((unint64_t)v19 < v109)
    {
      if (v20 == v19)
      {
        *v19 = v597;
        v542 = &v18[v20 - v18];
        v542[1] = v597;
        *((_OWORD *)v542 + 1) = v635;
        v543 = *(_OWORD *)&v636.__r_.__value_.__l.__data_;
        v542[6] = v636.__r_.__value_.__r.__words[2];
        *((_OWORD *)v542 + 2) = v543;
        v545 = v640;
        v544 = v641;
        v546 = v642;
        *(_OWORD *)(v542 + 11) = v639;
        v542[17] = v546;
        *(_OWORD *)(v542 + 15) = v544;
        *(_OWORD *)(v542 + 13) = v545;
        v547 = v637;
        *(_OWORD *)(v542 + 9) = v638;
        *(_OWORD *)(v542 + 7) = v547;
        *((_OWORD *)v542 + 9) = v643;
        *((_OWORD *)v542 + 10) = v644;
        v548 = v645;
        *((_BYTE *)v542 + 184) = v646;
        v542[22] = v548;
        v542[24] = 0;
        v542[25] = 0;
        v647 = 0uLL;
        *((_BYTE *)v542 + 208) = 0;
        *(_QWORD *)(a11 + 1000) = v19 + 27;
      }
      else
      {
        *(_OWORD *)v607 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
        __p = v614;
        v593 = v638;
        v594 = v637;
        v591 = v640;
        v592 = v639;
        v590 = v641;
        v589 = v642;
        *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v621;
        v633 = v622;
        v632 = v624;
        v631 = v623;
        v110 = v19;
        v647 = 0uLL;
        v605 = v19 - 27;
        if ((unint64_t)v19 >= 0xD8)
        {
          v111 = v19 - 27;
          v110 = v19;
          do
          {
            *v110 = *v111;
            v110[1] = v111[1];
            *((_OWORD *)v110 + 1) = *((_OWORD *)v111 + 1);
            v112 = *((_OWORD *)v111 + 2);
            v110[6] = v111[6];
            *((_OWORD *)v110 + 2) = v112;
            v113 = *(_OWORD *)(v111 + 13);
            v114 = *(_OWORD *)(v111 + 15);
            v115 = v111[17];
            *(_OWORD *)(v110 + 11) = *(_OWORD *)(v111 + 11);
            v110[17] = v115;
            *(_OWORD *)(v110 + 15) = v114;
            *(_OWORD *)(v110 + 13) = v113;
            v116 = *(_OWORD *)(v111 + 7);
            *(_OWORD *)(v110 + 9) = *(_OWORD *)(v111 + 9);
            *(_OWORD *)(v110 + 7) = v116;
            *((_OWORD *)v110 + 9) = *((_OWORD *)v111 + 9);
            *((_OWORD *)v110 + 10) = *((_OWORD *)v111 + 10);
            v117 = v111[22];
            *((_BYTE *)v110 + 184) = *((_BYTE *)v111 + 184);
            v110[22] = v117;
            *((_OWORD *)v110 + 12) = *((_OWORD *)v111 + 12);
            v111[24] = 0;
            v111[25] = 0;
            *((_BYTE *)v110 + 208) = *((_BYTE *)v111 + 208);
            v110 += 27;
            v111 += 27;
          }
          while (v111 < v19);
        }
        *(_QWORD *)(a11 + 1000) = v110;
        if (v19 != v20 + 27)
        {
          v118 = v19 - 27;
          v119 = v19;
          do
          {
            v524 = *(v118 - 27);
            v118 -= 27;
            *(v119 - 27) = v524;
            v119 -= 27;
            v119[1] = v118[1];
            *((_OWORD *)v119 + 1) = *((_OWORD *)v118 + 1);
            v525 = *((_OWORD *)v118 + 2);
            v119[6] = v118[6];
            *((_OWORD *)v119 + 2) = v525;
            v119[7] = v118[7];
            v119[8] = v118[8];
            v119[9] = v118[9];
            v119[10] = v118[10];
            v119[11] = v118[11];
            v119[12] = v118[12];
            v119[13] = v118[13];
            v119[14] = v118[14];
            v119[15] = v118[15];
            v119[16] = v118[16];
            v119[17] = v118[17];
            *((_OWORD *)v119 + 9) = *((_OWORD *)v118 + 9);
            *((_OWORD *)v119 + 10) = *((_OWORD *)v118 + 10);
            v526 = v118[22];
            *((_BYTE *)v119 + 184) = *((_BYTE *)v118 + 184);
            v119[22] = v526;
            v527 = *((_OWORD *)v118 + 12);
            v118[24] = 0;
            v118[25] = 0;
            v528 = (std::__shared_weak_count *)v119[25];
            *((_OWORD *)v119 + 12) = v527;
            if (v528)
            {
              v529 = v528;
              p_shared_owners = (unint64_t *)&v528->__shared_owners_;
              do
                v531 = __ldaxr(p_shared_owners);
              while (__stlxr(v531 - 1, p_shared_owners));
              if (!v531)
              {
                v602 = v529;
                ((void (*)(std::__shared_weak_count *, __int128 *))v529->__on_zero_shared)(v529, a2);
                std::__shared_weak_count::__release_weak(v602);
              }
            }
            *((_BYTE *)v19 - 8) = *((_BYTE *)v605 - 8);
            v19 = v119;
            v605 = v118;
          }
          while (v118 != v20);
        }
        *(int64x2_t *)v20 = vdupq_n_s64(v597);
        v536 = &v18[v20 - v18];
        *((_OWORD *)v536 + 1) = *(_OWORD *)v607;
        *(std::string *)(v536 + 4) = __p;
        *(_OWORD *)(v536 + 7) = v594;
        *(_OWORD *)(v536 + 9) = v593;
        *(_OWORD *)(v536 + 11) = v592;
        *(_OWORD *)(v536 + 13) = v591;
        *(_OWORD *)(v536 + 15) = v590;
        v536[17] = v589;
        v537 = v633;
        *((_OWORD *)v536 + 9) = *(_OWORD *)&v606.__r_.__value_.__l.__data_;
        *((_OWORD *)v536 + 10) = v537;
        v538 = v631;
        *((_BYTE *)v536 + 184) = v632;
        v536[22] = v538;
        v539 = (std::__shared_weak_count *)v536[25];
        v536[24] = 0;
        v536[25] = 0;
        if (v539)
        {
          v540 = (unint64_t *)&v539->__shared_owners_;
          do
            v541 = __ldaxr(v540);
          while (__stlxr(v541 - 1, v540));
          if (!v541)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *))v539->__on_zero_shared)(v539, a2);
            std::__shared_weak_count::__release_weak(v539);
          }
        }
        LOBYTE(v18[v20 - v18 + 26]) = 0;
      }
LABEL_768:
      v582 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (*((_QWORD *)&v647 + 1))
      {
        v583 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
        do
          v584 = __ldaxr(v583);
        while (__stlxr(v584 - 1, v583));
        if (!v584)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v582->__on_zero_shared)(v582, a2);
          std::__shared_weak_count::__release_weak(v582);
        }
      }
      goto LABEL_773;
    }
    v532 = 0x84BDA12F684BDA13 * (v19 - v18) + 1;
    if (v532 > 0x12F684BDA12F684)
      sub_20E867F44();
    v533 = 0x84BDA12F684BDA13 * ((uint64_t)(v109 - (_QWORD)v18) >> 3);
    if (2 * v533 > v532)
      v532 = 2 * v533;
    if (v533 >= 0x97B425ED097B42)
      v534 = 0x12F684BDA12F684;
    else
      v534 = v532;
    v630 = a11 + 1008;
    if (v534)
    {
      if (v534 > 0x12F684BDA12F684)
        sub_20E877A38();
      v535 = (char *)operator new(216 * v534);
    }
    else
    {
      v535 = 0;
    }
    v549 = (std::string::size_type)&v535[8 * (v20 - v18)];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v535;
    __p.__r_.__value_.__l.__size_ = v549;
    __p.__r_.__value_.__r.__words[2] = v549;
    v629 = &v535[216 * v534];
    v588 = vdupq_n_s64(v597);
    if (v596 == v534)
    {
      if ((char *)v20 - (char *)v18 >= 1)
      {
        v550 = v596 + 2;
        if (v596 >= -1)
          v550 = v596 + 1;
        v551 = v550 >> 1;
        v552 = sub_20F5B6E44((uint64_t)&v535[216 * v596], (uint64_t)&v535[216 * v596], v549 - 216 * (v550 >> 1));
        v549 = __p.__r_.__value_.__l.__size_ - 216 * v551;
        __p.__r_.__value_.__l.__size_ = v549;
        v588 = v634;
        goto LABEL_750;
      }
      if (v18 == v20)
        v553 = 1;
      else
        v553 = 0x97B425ED097B426 * (v20 - v18);
      if (v553 > 0x12F684BDA12F684)
        sub_20E877A38();
      v554 = (char *)operator new(216 * v553);
      v549 = (std::string::size_type)&v554[216 * (v553 >> 2)];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v554;
      __p.__r_.__value_.__l.__size_ = v549;
      v629 = &v554[216 * v553];
      if (v535)
        operator delete(v535);
    }
    v552 = v549;
LABEL_750:
    v555 = v635;
    *(int64x2_t *)v552 = v588;
    *(_OWORD *)(v552 + 16) = v555;
    *(std::string *)(v552 + 32) = v636;
    v556 = v640;
    *(_OWORD *)(v552 + 88) = v639;
    *(_OWORD *)(v552 + 104) = v556;
    *(_OWORD *)(v552 + 120) = v641;
    v557 = v638;
    *(_OWORD *)(v552 + 56) = v637;
    *(_QWORD *)(v552 + 136) = v642;
    *(_OWORD *)(v552 + 72) = v557;
    *(_OWORD *)(v552 + 144) = v643;
    *(_OWORD *)(v552 + 160) = v644;
    v558 = v645;
    *(_BYTE *)(v552 + 184) = v646;
    *(_QWORD *)(v552 + 176) = v558;
    *(_OWORD *)(v552 + 192) = v647;
    v647 = 0uLL;
    *(_BYTE *)(v552 + 208) = v648;
    v559 = v552 + 216;
    __p.__r_.__value_.__r.__words[2] = v552 + 216;
    v560 = *(unint64_t **)(a11 + 992);
    if (v560 != v20)
    {
      v561 = 0;
      do
      {
        v562 = v549 + v561 * 8;
        v563 = (char *)&v20[v561];
        *(_QWORD *)(v562 - 216) = v20[v561 - 27];
        *(_QWORD *)(v562 - 208) = v20[v561 - 26];
        *(_OWORD *)(v562 - 200) = *(_OWORD *)&v20[v561 - 25];
        v564 = *(_OWORD *)&v20[v561 - 23];
        *(_QWORD *)(v562 - 168) = v20[v561 - 21];
        *(_OWORD *)(v562 - 184) = v564;
        v566 = *(_OWORD *)&v20[v561 - 14];
        v565 = *(_OWORD *)&v20[v561 - 12];
        v567 = *(_OWORD *)&v20[v561 - 16];
        *(_QWORD *)(v562 - 80) = v20[v561 - 10];
        *(_OWORD *)(v562 - 112) = v566;
        *(_OWORD *)(v562 - 96) = v565;
        *(_OWORD *)(v562 - 128) = v567;
        v568 = *(_OWORD *)&v20[v561 - 18];
        *(_OWORD *)(v562 - 160) = *(_OWORD *)&v20[v561 - 20];
        *(_OWORD *)(v562 - 144) = v568;
        *(_OWORD *)(v562 - 72) = *(_OWORD *)&v20[v561 - 9];
        *(_OWORD *)(v562 - 56) = *(_OWORD *)&v20[v561 - 7];
        v569 = v20[v561 - 5];
        *(_BYTE *)(v562 - 32) = v20[v561 - 4];
        *(_QWORD *)(v562 - 40) = v569;
        *(_OWORD *)(v562 - 24) = *(_OWORD *)&v20[v561 - 3];
        *((_QWORD *)v563 - 3) = 0;
        *((_QWORD *)v563 - 2) = 0;
        *(_BYTE *)(v562 - 8) = v20[v561 - 1];
        v561 -= 27;
      }
      while (&v20[v561] != v560);
      v549 += v561 * 8;
    }
    v570 = *(unint64_t **)(a11 + 1000);
    if (v570 != v20)
    {
      do
      {
        *(_QWORD *)v559 = *v20;
        *(_QWORD *)(v559 + 8) = v20[1];
        *(_OWORD *)(v559 + 16) = *((_OWORD *)v20 + 1);
        v571 = *((_OWORD *)v20 + 2);
        *(_QWORD *)(v559 + 48) = v20[6];
        *(_OWORD *)(v559 + 32) = v571;
        v572 = *(_OWORD *)(v20 + 13);
        v573 = *(_OWORD *)(v20 + 15);
        v574 = v20[17];
        *(_OWORD *)(v559 + 88) = *(_OWORD *)(v20 + 11);
        *(_QWORD *)(v559 + 136) = v574;
        *(_OWORD *)(v559 + 120) = v573;
        *(_OWORD *)(v559 + 104) = v572;
        v575 = *(_OWORD *)(v20 + 7);
        *(_OWORD *)(v559 + 72) = *(_OWORD *)(v20 + 9);
        *(_OWORD *)(v559 + 56) = v575;
        *(_OWORD *)(v559 + 144) = *((_OWORD *)v20 + 9);
        *(_OWORD *)(v559 + 160) = *((_OWORD *)v20 + 10);
        v576 = v20[22];
        *(_BYTE *)(v559 + 184) = *((_BYTE *)v20 + 184);
        *(_QWORD *)(v559 + 176) = v576;
        *(_OWORD *)(v559 + 192) = *((_OWORD *)v20 + 12);
        v20[24] = 0;
        v20[25] = 0;
        *(_BYTE *)(v559 + 208) = *((_BYTE *)v20 + 208);
        v559 += 216;
        v20 += 27;
      }
      while (v20 != v570);
      v20 = *(unint64_t **)(a11 + 1000);
    }
    v577 = *(_QWORD *)(a11 + 992);
    *(_QWORD *)(a11 + 992) = v549;
    *(_QWORD *)(a11 + 1000) = v559;
    v578 = *(char **)(a11 + 1008);
    *(_QWORD *)(a11 + 1008) = v629;
    v629 = v578;
    __p.__r_.__value_.__r.__words[0] = v577;
    __p.__r_.__value_.__l.__size_ = v577;
    if (v20 != (unint64_t *)v577)
    {
      do
      {
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 - 27);
        v579 = (std::__shared_weak_count *)*(v20 - 2);
        if (v579)
        {
          v580 = (unint64_t *)&v579->__shared_owners_;
          do
            v581 = __ldaxr(v580);
          while (__stlxr(v581 - 1, v580));
          if (!v581)
          {
            ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
            std::__shared_weak_count::__release_weak(v579);
          }
        }
        v20 = (unint64_t *)__p.__r_.__value_.__r.__words[2];
      }
      while (__p.__r_.__value_.__r.__words[2] != v577);
      v20 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
    }
    if (v20)
      operator delete(v20);
    goto LABEL_768;
  }
LABEL_773:
  *(_BYTE *)(a11 + 1098) = 0;
  *(_BYTE *)(a11 + 1096) = 0;
  *(int64x2_t *)(a11 + 1080) = vaddq_s64(*(int64x2_t *)(a11 + 1080), (int64x2_t)xmmword_210378060);
  v585 = v626;
  if (v626)
  {
    v586 = (unint64_t *)&v626->__shared_owners_;
    do
      v587 = __ldaxr(v586);
    while (__stlxr(v587 - 1, v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v585->__on_zero_shared)(v585, a2);
      std::__shared_weak_count::__release_weak(v585);
    }
  }
  v120 = 0;
  v17 = v597;
  v16 = a11;
  v121 = v612;
  if (v612)
  {
LABEL_154:
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v121->__on_zero_shared)(v121, a2);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
LABEL_158:
  if ((v120 & 1) != 0)
    goto LABEL_159;
  v124 = 0;
  *(_BYTE *)(v16 + 1876) = 0;
  *(_DWORD *)(v16 + 1872) = 0;
  v125 = v610;
  if (!v610)
    goto LABEL_165;
LABEL_162:
  v126 = (unint64_t *)&v125->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    if (!v124)
      return;
    goto LABEL_166;
  }
LABEL_165:
  if (!v124)
    return;
LABEL_166:
  v128 = *(char **)(v16 + 800);
  v129 = *(char **)(v16 + 808);
  if (v129 != v128)
  {
    v130 = (v129 - v128) >> 4;
    do
    {
      v131 = v130 >> 1;
      v132 = &v128[16 * (v130 >> 1)];
      v134 = *(_DWORD *)v132;
      v133 = v132 + 16;
      v130 += ~(v130 >> 1);
      if (v134 < a5)
        v128 = v133;
      else
        v130 = v131;
    }
    while (v130);
  }
  if ((v128 == v129 || *(_DWORD *)v128 != a5)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 268, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_712;
  }
  v135 = *(_QWORD **)(v16 + 992);
  v136 = *(_QWORD **)(v16 + 1000);
  if (v136 != v135)
  {
    v137 = 0x84BDA12F684BDA13 * (v136 - v135);
    do
    {
      v138 = v137 >> 1;
      v139 = &v135[27 * (v137 >> 1)];
      v141 = *v139;
      v140 = v139 + 27;
      v137 += ~(v137 >> 1);
      if (v141 < v17)
        v135 = v140;
      else
        v137 = v138;
    }
    while (v137);
    if (v136 != v135
      && *v135 == v17
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 273, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_712;
    }
  }
  sub_20E863438((uint64_t)&v634);
  v142 = *(char **)(v16 + 800);
  v143 = *(char **)(v16 + 808);
  if (v143 != v142)
  {
    v144 = (v143 - v142) >> 4;
    do
    {
      v145 = v144 >> 1;
      v146 = &v142[16 * (v144 >> 1)];
      v148 = *(_DWORD *)v146;
      v147 = v146 + 16;
      v144 += ~(v144 >> 1);
      if (v148 < a5)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
  if (v142 == v143 || *(_DWORD *)v142 != a5)
  {
    v154 = 1;
    v155 = *(char **)(v16 + 416);
    v156 = *(char **)(v16 + 424);
    v157 = v155;
    v158 = v156 - v155;
    if (v156 == v155)
      goto LABEL_208;
    goto LABEL_203;
  }
  v149 = sub_20E86A980(&v635, (uint64_t)"error: landmark variable ", 25);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v152 = sub_20E86A980(v149, (uint64_t)p_p, size);
  sub_20E86A980(v152, (uint64_t)" with ID ", 9);
  v153 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v153, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v154 = 0;
  v155 = *(char **)(v16 + 416);
  v156 = *(char **)(v16 + 424);
  v157 = v155;
  v158 = v156 - v155;
  if (v156 != v155)
  {
LABEL_203:
    v159 = v158 >> 4;
    v157 = v155;
    do
    {
      v160 = v159 >> 1;
      v161 = (unsigned int *)&v157[16 * (v159 >> 1)];
      v163 = *v161;
      v162 = (char *)(v161 + 4);
      v159 += ~(v159 >> 1);
      if (v163 < v14)
        v157 = v162;
      else
        v159 = v160;
    }
    while (v159);
  }
LABEL_208:
  if (v157 != v156 && *(_DWORD *)v157 == v14)
  {
    if (v156 != v155)
    {
      v164 = (v156 - v155) >> 4;
      do
      {
        v165 = v164 >> 1;
        v166 = (unsigned int *)&v155[16 * (v164 >> 1)];
        v168 = *v166;
        v167 = (char *)(v166 + 4);
        v164 += ~(v164 >> 1);
        if (v168 < v14)
          v155 = v167;
        else
          v164 = v165;
      }
      while (v164);
    }
    v598 = v154;
    if (v155 == v156 || *(_DWORD *)v155 != v14)
      v155 = v156;
    v169 = *((_QWORD *)v155 + 1);
    v170 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &__p;
    else
      v171 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v172 = __p.__r_.__value_.__l.__size_;
    v173 = sub_20E86A980(v170, (uint64_t)v171, v172);
    sub_20E86A980(v173, (uint64_t)" with ID ", 9);
    v174 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v174, (uint64_t)" found (", 8);
    v175 = (_QWORD *)std::ostream::operator<<();
    v176 = sub_20E86A980(v175, (uint64_t)", ", 2);
    if (*(_BYTE *)(v169 + 20))
      v177 = "free";
    else
      v177 = "fixed";
    if (*(_BYTE *)(v169 + 20))
      v178 = 4;
    else
      v178 = 5;
    v179 = sub_20E86A980(v176, (uint64_t)v177, v178);
    sub_20E86A980(v179, (uint64_t)")\n", 2);
    v180 = v598;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 = *(unsigned __int8 *)(v169 + 20);
    v181 = *(char **)(v16 + 416);
    v182 = *(char **)(v16 + 424);
    v183 = v181;
    v184 = v182 - v181;
    if (v182 == v181)
      goto LABEL_249;
LABEL_244:
    v190 = v184 >> 4;
    v183 = v181;
    do
    {
      v191 = v190 >> 1;
      v192 = (unsigned int *)&v183[16 * (v190 >> 1)];
      v194 = *v192;
      v193 = (char *)(v192 + 4);
      v190 += ~(v190 >> 1);
      if (v194 < a4)
        v183 = v193;
      else
        v190 = v191;
    }
    while (v190);
    goto LABEL_249;
  }
  v185 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v186 = &__p;
  else
    v186 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v187 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v187 = __p.__r_.__value_.__l.__size_;
  v188 = sub_20E86A980(v185, (uint64_t)v186, v187);
  sub_20E86A980(v188, (uint64_t)" with ID ", 9);
  v189 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v189, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v601 = 0;
  v181 = *(char **)(v16 + 416);
  v182 = *(char **)(v16 + 424);
  v183 = v181;
  v184 = v182 - v181;
  if (v182 != v181)
    goto LABEL_244;
LABEL_249:
  if (v183 != v182 && *(_DWORD *)v183 == a4)
  {
    if (v182 != v181)
    {
      v195 = (v182 - v181) >> 4;
      do
      {
        v196 = v195 >> 1;
        v197 = (unsigned int *)&v181[16 * (v195 >> 1)];
        v199 = *v197;
        v198 = (char *)(v197 + 4);
        v195 += ~(v195 >> 1);
        if (v199 < a4)
          v181 = v198;
        else
          v195 = v196;
      }
      while (v195);
    }
    if (v181 == v182 || *(_DWORD *)v181 != a4)
      v181 = v182;
    v200 = *((_QWORD *)v181 + 1);
    v201 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v202 = &__p;
    else
      v202 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v203 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v203 = __p.__r_.__value_.__l.__size_;
    v204 = sub_20E86A980(v201, (uint64_t)v202, v203);
    sub_20E86A980(v204, (uint64_t)" with ID ", 9);
    v205 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v205, (uint64_t)" found (", 8);
    v206 = (_QWORD *)std::ostream::operator<<();
    v207 = sub_20E86A980(v206, (uint64_t)", ", 2);
    if (*(_BYTE *)(v200 + 20))
      v208 = "free";
    else
      v208 = "fixed";
    if (*(_BYTE *)(v200 + 20))
      v209 = 4;
    else
      v209 = 5;
    v210 = sub_20E86A980(v207, (uint64_t)v208, v209);
    sub_20E86A980(v210, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v200 + 20);
    v211 = *(char **)(v16 + 128);
    v212 = *(char **)(v16 + 136);
    v213 = v211;
    v214 = v212 - v211;
    if (v212 == v211)
      goto LABEL_290;
LABEL_285:
    v220 = v214 >> 4;
    v213 = v211;
    do
    {
      v221 = v220 >> 1;
      v222 = (unsigned int *)&v213[16 * (v220 >> 1)];
      v224 = *v222;
      v223 = (char *)(v222 + 4);
      v220 += ~(v220 >> 1);
      if (v224 < a1)
        v213 = v223;
      else
        v220 = v221;
    }
    while (v220);
    goto LABEL_290;
  }
  v215 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v216 = &__p;
  else
    v216 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v217 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v217 = __p.__r_.__value_.__l.__size_;
  v218 = sub_20E86A980(v215, (uint64_t)v216, v217);
  sub_20E86A980(v218, (uint64_t)" with ID ", 9);
  v219 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v219, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v211 = *(char **)(v16 + 128);
  v212 = *(char **)(v16 + 136);
  v213 = v211;
  v214 = v212 - v211;
  if (v212 != v211)
    goto LABEL_285;
LABEL_290:
  if (v213 != v212 && *(_DWORD *)v213 == a1)
  {
    if (v212 != v211)
    {
      v225 = (v212 - v211) >> 4;
      do
      {
        v226 = v225 >> 1;
        v227 = (unsigned int *)&v211[16 * (v225 >> 1)];
        v229 = *v227;
        v228 = (char *)(v227 + 4);
        v225 += ~(v225 >> 1);
        if (v229 < a1)
          v211 = v228;
        else
          v225 = v226;
      }
      while (v225);
    }
    if (v211 == v212 || *(_DWORD *)v211 != a1)
      v211 = v212;
    v230 = *((_QWORD *)v211 + 1);
    v231 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v232 = &__p;
    else
      v232 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v233 = __p.__r_.__value_.__l.__size_;
    v234 = sub_20E86A980(v231, (uint64_t)v232, v233);
    sub_20E86A980(v234, (uint64_t)" with ID ", 9);
    v235 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v235, (uint64_t)" found (", 8);
    v236 = (_QWORD *)std::ostream::operator<<();
    v237 = sub_20E86A980(v236, (uint64_t)", ", 2);
    if (*(_BYTE *)(v230 + 20))
      v238 = "free";
    else
      v238 = "fixed";
    if (*(_BYTE *)(v230 + 20))
      v239 = 4;
    else
      v239 = 5;
    v240 = sub_20E86A980(v237, (uint64_t)v238, v239);
    sub_20E86A980(v240, (uint64_t)")\n", 2);
    v241 = v180;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v230 + 20);
    v242 = *(char **)(v16 + 128);
    v243 = *(char **)(v16 + 136);
    v244 = v242;
    v245 = v243 - v242;
    if (v243 == v242)
      goto LABEL_331;
LABEL_326:
    v251 = v245 >> 4;
    v244 = v242;
    do
    {
      v252 = v251 >> 1;
      v253 = (unsigned int *)&v244[16 * (v251 >> 1)];
      v255 = *v253;
      v254 = (char *)(v253 + 4);
      v251 += ~(v251 >> 1);
      if (v255 < a3)
        v244 = v254;
      else
        v251 = v252;
    }
    while (v251);
    goto LABEL_331;
  }
  v246 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v247 = &__p;
  else
    v247 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v248 = __p.__r_.__value_.__l.__size_;
  v249 = sub_20E86A980(v246, (uint64_t)v247, v248);
  sub_20E86A980(v249, (uint64_t)" with ID ", 9);
  v250 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v250, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v241 = 0;
  v242 = *(char **)(v16 + 128);
  v243 = *(char **)(v16 + 136);
  v244 = v242;
  v245 = v243 - v242;
  if (v243 != v242)
    goto LABEL_326;
LABEL_331:
  if (v244 != v243 && *(_DWORD *)v244 == a3)
  {
    if (v243 != v242)
    {
      v256 = (v243 - v242) >> 4;
      do
      {
        v257 = v256 >> 1;
        v258 = (unsigned int *)&v242[16 * (v256 >> 1)];
        v260 = *v258;
        v259 = (char *)(v258 + 4);
        v256 += ~(v256 >> 1);
        if (v260 < a3)
          v242 = v259;
        else
          v256 = v257;
      }
      while (v256);
    }
    if (v242 == v243 || *(_DWORD *)v242 != a3)
      v242 = v243;
    v261 = *((_QWORD *)v242 + 1);
    v262 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v263 = &__p;
    else
      v263 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v264 = __p.__r_.__value_.__l.__size_;
    v265 = sub_20E86A980(v262, (uint64_t)v263, v264);
    sub_20E86A980(v265, (uint64_t)" with ID ", 9);
    v266 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v266, (uint64_t)" found (", 8);
    v267 = (_QWORD *)std::ostream::operator<<();
    v268 = sub_20E86A980(v267, (uint64_t)", ", 2);
    if (*(_BYTE *)(v261 + 20))
      v269 = "free";
    else
      v269 = "fixed";
    if (*(_BYTE *)(v261 + 20))
      v270 = 4;
    else
      v270 = 5;
    v271 = sub_20E86A980(v268, (uint64_t)v269, v270);
    sub_20E86A980(v271, (uint64_t)")\n", 2);
    v272 = v241;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v261 + 20);
    v273 = *(char **)(v16 + 512);
    v274 = *(char **)(v16 + 520);
    v275 = v273;
    v276 = v274 - v273;
    if (v274 == v273)
      goto LABEL_372;
LABEL_367:
    v282 = v276 >> 4;
    v275 = v273;
    do
    {
      v283 = v282 >> 1;
      v284 = (unsigned int *)&v275[16 * (v282 >> 1)];
      v286 = *v284;
      v285 = (char *)(v284 + 4);
      v282 += ~(v282 >> 1);
      if (v286 < v14)
        v275 = v285;
      else
        v282 = v283;
    }
    while (v282);
    goto LABEL_372;
  }
  v277 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v278 = &__p;
  else
    v278 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v279 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v279 = __p.__r_.__value_.__l.__size_;
  v280 = sub_20E86A980(v277, (uint64_t)v278, v279);
  sub_20E86A980(v280, (uint64_t)" with ID ", 9);
  v281 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v281, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v273 = *(char **)(v16 + 512);
  v274 = *(char **)(v16 + 520);
  v275 = v273;
  v276 = v274 - v273;
  if (v274 != v273)
    goto LABEL_367;
LABEL_372:
  if (v275 != v274 && *(_DWORD *)v275 == v14)
  {
    if (v274 != v273)
    {
      v287 = (v274 - v273) >> 4;
      do
      {
        v288 = v287 >> 1;
        v289 = (unsigned int *)&v273[16 * (v287 >> 1)];
        v291 = *v289;
        v290 = (char *)(v289 + 4);
        v287 += ~(v287 >> 1);
        if (v291 < v14)
          v273 = v290;
        else
          v287 = v288;
      }
      while (v287);
    }
    if (v273 == v274 || *(_DWORD *)v273 != v14)
      v273 = v274;
    v292 = *((_QWORD *)v273 + 1);
    v293 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v294 = &__p;
    else
      v294 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v295 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v295 = __p.__r_.__value_.__l.__size_;
    v296 = sub_20E86A980(v293, (uint64_t)v294, v295);
    sub_20E86A980(v296, (uint64_t)" with ID ", 9);
    v297 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v297, (uint64_t)" found (", 8);
    v298 = (_QWORD *)std::ostream::operator<<();
    v299 = sub_20E86A980(v298, (uint64_t)", ", 2);
    if (*(_BYTE *)(v292 + 20))
      v300 = "free";
    else
      v300 = "fixed";
    if (*(_BYTE *)(v292 + 20))
      v301 = 4;
    else
      v301 = 5;
    v302 = sub_20E86A980(v299, (uint64_t)v300, v301);
    sub_20E86A980(v302, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v292 + 20);
    v303 = *(char **)(v16 + 512);
    v304 = *(char **)(v16 + 520);
    v305 = v303;
    v306 = v304 - v303;
    if (v304 == v303)
      goto LABEL_413;
LABEL_408:
    v312 = v306 >> 4;
    v305 = v303;
    do
    {
      v313 = v312 >> 1;
      v314 = (unsigned int *)&v305[16 * (v312 >> 1)];
      v316 = *v314;
      v315 = (char *)(v314 + 4);
      v312 += ~(v312 >> 1);
      if (v316 < a4)
        v305 = v315;
      else
        v312 = v313;
    }
    while (v312);
    goto LABEL_413;
  }
  v307 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v308 = &__p;
  else
    v308 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v309 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v309 = __p.__r_.__value_.__l.__size_;
  v310 = sub_20E86A980(v307, (uint64_t)v308, v309);
  sub_20E86A980(v310, (uint64_t)" with ID ", 9);
  v311 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v311, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v303 = *(char **)(v16 + 512);
  v304 = *(char **)(v16 + 520);
  v305 = v303;
  v306 = v304 - v303;
  if (v304 != v303)
    goto LABEL_408;
LABEL_413:
  if (v305 != v304 && *(_DWORD *)v305 == a4)
  {
    if (v304 != v303)
    {
      v317 = (v304 - v303) >> 4;
      do
      {
        v318 = v317 >> 1;
        v319 = (unsigned int *)&v303[16 * (v317 >> 1)];
        v321 = *v319;
        v320 = (char *)(v319 + 4);
        v317 += ~(v317 >> 1);
        if (v321 < a4)
          v303 = v320;
        else
          v317 = v318;
      }
      while (v317);
    }
    if (v303 == v304 || *(_DWORD *)v303 != a4)
      v303 = v304;
    v322 = *((_QWORD *)v303 + 1);
    v323 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v324 = &__p;
    else
      v324 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v325 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v325 = __p.__r_.__value_.__l.__size_;
    v326 = sub_20E86A980(v323, (uint64_t)v324, v325);
    sub_20E86A980(v326, (uint64_t)" with ID ", 9);
    v327 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v327, (uint64_t)" found (", 8);
    v328 = (_QWORD *)std::ostream::operator<<();
    v329 = sub_20E86A980(v328, (uint64_t)", ", 2);
    if (*(_BYTE *)(v322 + 20))
      v330 = "free";
    else
      v330 = "fixed";
    if (*(_BYTE *)(v322 + 20))
      v331 = 4;
    else
      v331 = 5;
    v332 = sub_20E86A980(v329, (uint64_t)v330, v331);
    sub_20E86A980(v332, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v322 + 20);
    v333 = *(char **)(v16 + 608);
    v334 = *(char **)(v16 + 616);
    v335 = v333;
    v336 = v334 - v333;
    if (v334 == v333)
      goto LABEL_454;
LABEL_449:
    v342 = v336 >> 4;
    v335 = v333;
    do
    {
      v343 = v342 >> 1;
      v344 = (unsigned int *)&v335[16 * (v342 >> 1)];
      v346 = *v344;
      v345 = (char *)(v344 + 4);
      v342 += ~(v342 >> 1);
      if (v346 < v14)
        v335 = v345;
      else
        v342 = v343;
    }
    while (v342);
    goto LABEL_454;
  }
  v337 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v338 = &__p;
  else
    v338 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v339 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v339 = __p.__r_.__value_.__l.__size_;
  v340 = sub_20E86A980(v337, (uint64_t)v338, v339);
  sub_20E86A980(v340, (uint64_t)" with ID ", 9);
  v341 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v341, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v333 = *(char **)(v16 + 608);
  v334 = *(char **)(v16 + 616);
  v335 = v333;
  v336 = v334 - v333;
  if (v334 != v333)
    goto LABEL_449;
LABEL_454:
  if (v335 != v334 && *(_DWORD *)v335 == v14)
  {
    if (v334 != v333)
    {
      v347 = (v334 - v333) >> 4;
      do
      {
        v348 = v347 >> 1;
        v349 = (unsigned int *)&v333[16 * (v347 >> 1)];
        v351 = *v349;
        v350 = (char *)(v349 + 4);
        v347 += ~(v347 >> 1);
        if (v351 < v14)
          v333 = v350;
        else
          v347 = v348;
      }
      while (v347);
    }
    if (v333 == v334 || *(_DWORD *)v333 != v14)
      v333 = v334;
    v352 = *((_QWORD *)v333 + 1);
    v353 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v354 = &__p;
    else
      v354 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v355 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v355 = __p.__r_.__value_.__l.__size_;
    v356 = sub_20E86A980(v353, (uint64_t)v354, v355);
    sub_20E86A980(v356, (uint64_t)" with ID ", 9);
    v357 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v357, (uint64_t)" found (", 8);
    v358 = (_QWORD *)std::ostream::operator<<();
    v359 = sub_20E86A980(v358, (uint64_t)", ", 2);
    if (*(_BYTE *)(v352 + 20))
      v360 = "free";
    else
      v360 = "fixed";
    if (*(_BYTE *)(v352 + 20))
      v361 = 4;
    else
      v361 = 5;
    v362 = sub_20E86A980(v359, (uint64_t)v360, v361);
    sub_20E86A980(v362, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v352 + 20);
    v363 = *(char **)(v16 + 608);
    v364 = *(char **)(v16 + 616);
    v365 = v363;
    v366 = v364 - v363;
    if (v364 == v363)
      goto LABEL_495;
LABEL_490:
    v372 = v366 >> 4;
    v365 = v363;
    do
    {
      v373 = v372 >> 1;
      v374 = (unsigned int *)&v365[16 * (v372 >> 1)];
      v376 = *v374;
      v375 = (char *)(v374 + 4);
      v372 += ~(v372 >> 1);
      if (v376 < a4)
        v365 = v375;
      else
        v372 = v373;
    }
    while (v372);
    goto LABEL_495;
  }
  v367 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v368 = &__p;
  else
    v368 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v369 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v369 = __p.__r_.__value_.__l.__size_;
  v370 = sub_20E86A980(v367, (uint64_t)v368, v369);
  sub_20E86A980(v370, (uint64_t)" with ID ", 9);
  v371 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v371, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v363 = *(char **)(v16 + 608);
  v364 = *(char **)(v16 + 616);
  v365 = v363;
  v366 = v364 - v363;
  if (v364 != v363)
    goto LABEL_490;
LABEL_495:
  if (v365 != v364 && *(_DWORD *)v365 == a4)
  {
    if (v364 != v363)
    {
      v377 = (v364 - v363) >> 4;
      do
      {
        v378 = v377 >> 1;
        v379 = (unsigned int *)&v363[16 * (v377 >> 1)];
        v381 = *v379;
        v380 = (char *)(v379 + 4);
        v377 += ~(v377 >> 1);
        if (v381 < a4)
          v363 = v380;
        else
          v377 = v378;
      }
      while (v377);
    }
    if (v363 == v364 || *(_DWORD *)v363 != a4)
      v363 = v364;
    v382 = *((_QWORD *)v363 + 1);
    v383 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v384 = &__p;
    else
      v384 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v385 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v385 = __p.__r_.__value_.__l.__size_;
    v386 = sub_20E86A980(v383, (uint64_t)v384, v385);
    sub_20E86A980(v386, (uint64_t)" with ID ", 9);
    v387 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v387, (uint64_t)" found (", 8);
    v388 = (_QWORD *)std::ostream::operator<<();
    v389 = sub_20E86A980(v388, (uint64_t)", ", 2);
    if (*(_BYTE *)(v382 + 20))
      v390 = "free";
    else
      v390 = "fixed";
    if (*(_BYTE *)(v382 + 20))
      v391 = 4;
    else
      v391 = 5;
    v392 = sub_20E86A980(v389, (uint64_t)v390, v391);
    sub_20E86A980(v392, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v382 + 20);
    v393 = *(char **)(v16 + 704);
    v394 = *(char **)(v16 + 712);
    v395 = v393;
    v396 = v394 - v393;
    if (v394 == v393)
      goto LABEL_536;
LABEL_531:
    v402 = v396 >> 4;
    v395 = v393;
    do
    {
      v403 = v402 >> 1;
      v404 = (unsigned int *)&v395[16 * (v402 >> 1)];
      v406 = *v404;
      v405 = (char *)(v404 + 4);
      v402 += ~(v402 >> 1);
      if (v406 < v14)
        v395 = v405;
      else
        v402 = v403;
    }
    while (v402);
    goto LABEL_536;
  }
  v397 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v398 = &__p;
  else
    v398 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v399 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v399 = __p.__r_.__value_.__l.__size_;
  v400 = sub_20E86A980(v397, (uint64_t)v398, v399);
  sub_20E86A980(v400, (uint64_t)" with ID ", 9);
  v401 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v401, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v393 = *(char **)(v16 + 704);
  v394 = *(char **)(v16 + 712);
  v395 = v393;
  v396 = v394 - v393;
  if (v394 != v393)
    goto LABEL_531;
LABEL_536:
  if (v395 != v394 && *(_DWORD *)v395 == v14)
  {
    if (v394 != v393)
    {
      v407 = (v394 - v393) >> 4;
      do
      {
        v408 = v407 >> 1;
        v409 = (unsigned int *)&v393[16 * (v407 >> 1)];
        v411 = *v409;
        v410 = (char *)(v409 + 4);
        v407 += ~(v407 >> 1);
        if (v411 < v14)
          v393 = v410;
        else
          v407 = v408;
      }
      while (v407);
    }
    if (v393 == v394 || *(_DWORD *)v393 != v14)
      v393 = v394;
    v412 = *((_QWORD *)v393 + 1);
    v413 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v414 = &__p;
    else
      v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v415 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v415 = __p.__r_.__value_.__l.__size_;
    v416 = sub_20E86A980(v413, (uint64_t)v414, v415);
    sub_20E86A980(v416, (uint64_t)" with ID ", 9);
    v417 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v417, (uint64_t)" found (", 8);
    v418 = (_QWORD *)std::ostream::operator<<();
    v419 = sub_20E86A980(v418, (uint64_t)", ", 2);
    if (*(_BYTE *)(v412 + 20))
      v420 = "free";
    else
      v420 = "fixed";
    if (*(_BYTE *)(v412 + 20))
      v421 = 4;
    else
      v421 = 5;
    v422 = sub_20E86A980(v419, (uint64_t)v420, v421);
    sub_20E86A980(v422, (uint64_t)")\n", 2);
    v423 = v272;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v412 + 20);
    v424 = *(char **)(v16 + 704);
    v425 = *(char **)(v16 + 712);
    v426 = v424;
    v427 = v425 - v424;
    if (v425 == v424)
      goto LABEL_577;
LABEL_572:
    v433 = v427 >> 4;
    v426 = v424;
    do
    {
      v434 = v433 >> 1;
      v435 = (unsigned int *)&v426[16 * (v433 >> 1)];
      v437 = *v435;
      v436 = (char *)(v435 + 4);
      v433 += ~(v433 >> 1);
      if (v437 < a4)
        v426 = v436;
      else
        v433 = v434;
    }
    while (v433);
    goto LABEL_577;
  }
  v428 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v429 = &__p;
  else
    v429 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v430 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v430 = __p.__r_.__value_.__l.__size_;
  v431 = sub_20E86A980(v428, (uint64_t)v429, v430);
  sub_20E86A980(v431, (uint64_t)" with ID ", 9);
  v432 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v432, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v424 = *(char **)(v16 + 704);
  v425 = *(char **)(v16 + 712);
  v426 = v424;
  v427 = v425 - v424;
  if (v425 != v424)
    goto LABEL_572;
LABEL_577:
  if (v426 != v425 && *(_DWORD *)v426 == a4)
  {
    if (v425 != v424)
    {
      v438 = (v425 - v424) >> 4;
      do
      {
        v439 = v438 >> 1;
        v440 = (unsigned int *)&v424[16 * (v438 >> 1)];
        v442 = *v440;
        v441 = (char *)(v440 + 4);
        v438 += ~(v438 >> 1);
        if (v442 < a4)
          v424 = v441;
        else
          v438 = v439;
      }
      while (v438);
    }
    if (v424 == v425 || *(_DWORD *)v424 != a4)
      v424 = v425;
    v443 = *((_QWORD *)v424 + 1);
    v444 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v445 = &__p;
    else
      v445 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v446 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v446 = __p.__r_.__value_.__l.__size_;
    v447 = sub_20E86A980(v444, (uint64_t)v445, v446);
    sub_20E86A980(v447, (uint64_t)" with ID ", 9);
    v448 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v448, (uint64_t)" found (", 8);
    v449 = (_QWORD *)std::ostream::operator<<();
    v450 = sub_20E86A980(v449, (uint64_t)", ", 2);
    if (*(_BYTE *)(v443 + 20))
      v451 = "free";
    else
      v451 = "fixed";
    if (*(_BYTE *)(v443 + 20))
      v452 = 4;
    else
      v452 = 5;
    v453 = sub_20E86A980(v450, (uint64_t)v451, v452);
    sub_20E86A980(v453, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v443 + 20);
    v454 = *(char **)(v16 + 800);
    v455 = *(char **)(v16 + 808);
    v456 = v454;
    v457 = v455 - v454;
    if (v455 == v454)
      goto LABEL_618;
LABEL_613:
    v463 = v457 >> 4;
    v456 = v454;
    do
    {
      v464 = v463 >> 1;
      v465 = (unsigned int *)&v456[16 * (v463 >> 1)];
      v467 = *v465;
      v466 = (char *)(v465 + 4);
      v463 += ~(v463 >> 1);
      if (v467 < a5)
        v456 = v466;
      else
        v463 = v464;
    }
    while (v463);
    goto LABEL_618;
  }
  v458 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v459 = &__p;
  else
    v459 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v460 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v460 = __p.__r_.__value_.__l.__size_;
  v461 = sub_20E86A980(v458, (uint64_t)v459, v460);
  sub_20E86A980(v461, (uint64_t)" with ID ", 9);
  v462 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v462, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v454 = *(char **)(v16 + 800);
  v455 = *(char **)(v16 + 808);
  v456 = v454;
  v457 = v455 - v454;
  if (v455 != v454)
    goto LABEL_613;
LABEL_618:
  if (v456 == v455 || *(_DWORD *)v456 != a5)
  {
    v488 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
    sub_20F622838((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v489 = &__p;
    else
      v489 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v490 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v490 = __p.__r_.__value_.__l.__size_;
    v491 = sub_20E86A980(v488, (uint64_t)v489, v490);
    sub_20E86A980(v491, (uint64_t)" with ID ", 9);
    v492 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v492, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    else
    {
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    goto LABEL_657;
  }
  if (v455 != v454)
  {
    v468 = (v455 - v454) >> 4;
    do
    {
      v469 = v468 >> 1;
      v470 = (unsigned int *)&v454[16 * (v468 >> 1)];
      v472 = *v470;
      v471 = (char *)(v470 + 4);
      v468 += ~(v468 >> 1);
      if (v472 < a5)
        v454 = v471;
      else
        v468 = v469;
    }
    while (v468);
  }
  v473 = v423;
  if (v454 == v455 || *(_DWORD *)v454 != a5)
    v454 = v455;
  v474 = *((_QWORD *)v454 + 1);
  v475 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v476 = &__p;
  else
    v476 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v477 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v477 = __p.__r_.__value_.__l.__size_;
  v478 = sub_20E86A980(v475, (uint64_t)v476, v477);
  sub_20E86A980(v478, (uint64_t)" with ID ", 9);
  v479 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v479, (uint64_t)" found (", 8);
  v480 = (_QWORD *)std::ostream::operator<<();
  v481 = sub_20E86A980(v480, (uint64_t)", ", 2);
  if (*(_BYTE *)(v474 + 20))
    v482 = "free";
  else
    v482 = "fixed";
  if (*(_BYTE *)(v474 + 20))
    v483 = 4;
  else
    v483 = 5;
  v484 = sub_20E86A980(v481, (uint64_t)v482, v483);
  sub_20E86A980(v484, (uint64_t)")\n", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v601 |= *(unsigned __int8 *)(v474 + 20);
  v485 = *(char **)(v16 + 992);
  v486 = *(char **)(v16 + 1000);
  v487 = v486 - v485;
  if (v486 != v485)
  {
LABEL_657:
    v493 = 0x84BDA12F684BDA13 * (v487 >> 3);
    do
    {
      v494 = v493 >> 1;
      v495 = (unint64_t *)&v485[216 * (v493 >> 1)];
      v497 = *v495;
      v496 = (char *)(v495 + 27);
      v493 += ~(v493 >> 1);
      if (v497 < v17)
        v485 = v496;
      else
        v493 = v494;
    }
    while (v493);
    if (v486 != v485 && *(_QWORD *)v485 == v17)
    {
      v498 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
      sub_20F622A50((uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v499 = &__p;
      else
        v499 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v500 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v500 = __p.__r_.__value_.__l.__size_;
      v501 = sub_20E86A980(v498, (uint64_t)v499, v500);
      sub_20E86A980(v501, (uint64_t)" with the same ID ", 18);
      v502 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v502, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
    }
  }
LABEL_673:
  if (v601)
  {
    v503 = v473 != 0;
    v504 = v641;
    if ((v641 & 0x10) == 0)
      goto LABEL_675;
LABEL_686:
    v512 = *((_QWORD *)&v640 + 1);
    if (*((_QWORD *)&v640 + 1) < (unint64_t)v638)
    {
      *((_QWORD *)&v640 + 1) = v638;
      v512 = v638;
    }
    v513 = (const void *)*((_QWORD *)&v637 + 1);
    v505 = v512 - *((_QWORD *)&v637 + 1);
    if ((unint64_t)(v512 - *((_QWORD *)&v637 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_714;
    goto LABEL_689;
  }
  v507 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
  sub_20F622A50((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v508 = &__p;
  else
    v508 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v509 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v509 = __p.__r_.__value_.__l.__size_;
  v510 = sub_20E86A980(v507, (uint64_t)v508, v509);
  sub_20E86A980(v510, (uint64_t)" with ID ", 9);
  v511 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v511, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v503 = 0;
  v504 = v641;
  if ((v641 & 0x10) != 0)
    goto LABEL_686;
LABEL_675:
  if ((v504 & 8) == 0)
  {
    v505 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v506 = &__p;
    goto LABEL_696;
  }
  v513 = (const void *)v636.__r_.__value_.__l.__size_;
  v505 = v637 - v636.__r_.__value_.__l.__size_;
  if ((unint64_t)v637 - v636.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
LABEL_714:
    sub_20E860B7C();
LABEL_689:
  if (v505 >= 0x17)
  {
    v514 = (v505 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v505 | 7) != 0x17)
      v514 = v505 | 7;
    v515 = v514 + 1;
    v506 = (std::string *)operator new(v514 + 1);
    __p.__r_.__value_.__l.__size_ = v505;
    __p.__r_.__value_.__r.__words[2] = v515 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
    goto LABEL_695;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v505;
  v506 = &__p;
  if (v505)
LABEL_695:
    memmove(v506, v513, v505);
LABEL_696:
  v506->__r_.__value_.__s.__data_[v505] = 0;
  v613 = __p;
  v614.__r_.__value_.__s.__data_[0] = v503;
  v634.i64[0] = *MEMORY[0x24BEDB7F0];
  v516 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v634.i64 + *(_QWORD *)(v634.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v635 = v516;
  *((_QWORD *)&v635 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v640) < 0)
    operator delete((void *)v639);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290]((char *)&v641 + 8);
  v517 = std::string::insert(&v613, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
  v518 = *(_OWORD *)&v517->__r_.__value_.__l.__data_;
  v606.__r_.__value_.__r.__words[2] = v517->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v518;
  v517->__r_.__value_.__l.__size_ = 0;
  v517->__r_.__value_.__r.__words[2] = 0;
  v517->__r_.__value_.__r.__words[0] = 0;
  v519 = std::string::append(&v606, "').", 3uLL);
  v520 = *(_OWORD *)&v519->__r_.__value_.__l.__data_;
  v608 = v519->__r_.__value_.__r.__words[2];
  *(_OWORD *)v607 = v520;
  v519->__r_.__value_.__l.__size_ = 0;
  v519->__r_.__value_.__r.__words[2] = 0;
  v519->__r_.__value_.__r.__words[0] = 0;
  if (v608 >= 0)
    v521 = v607;
  else
    v521 = (void **)v607[0];
  if (v608 >= 0)
    v522 = HIBYTE(v608);
  else
    v522 = (uint64_t)v607[1];
  v523 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 282, (uint64_t)"ret.second", 10, (uint64_t)v521, v522, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v608) < 0)
  {
    operator delete(v607[0]);
    if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_706:
      if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_707;
      goto LABEL_711;
    }
  }
  else if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_706;
  }
  operator delete(v606.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_707:
    if (!v523)
      return;
LABEL_712:
    abort();
  }
LABEL_711:
  operator delete(v613.__r_.__value_.__l.__data_);
  if (v523)
    goto LABEL_712;
}

void sub_20F622660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20F6227AC((uint64_t)&a67);
  sub_20F4EE450((uint64_t)&STACK[0x220]);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20E86665C((uint64_t)&a39);
  sub_20E86665C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F62269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&STACK[0x220]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F6227AC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20F622838@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DC900;
  strcpy(v2, "cv3d::vio::VIOLandmarkDepthVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 43, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F622A30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F622A50@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DB430;
  strcpy(v2, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 73, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    if (result)
    {
      v10 = result - (_BYTE *)v9;
      if (result - (_BYTE *)v9 != -1)
      {
        if ((char)v4 < 0)
        {
          if (v6 >= v10)
          {
            *(_QWORD *)(a1 + 8) = v10;
            goto LABEL_15;
          }
        }
        else if (v10 <= v4)
        {
          *(_BYTE *)(a1 + 23) = v10 & 0x7F;
          v7 = (_QWORD *)a1;
LABEL_15:
          *((_BYTE *)v7 + v10) = 0;
          result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
          v4 = *(unsigned __int8 *)(a1 + 23);
          v7 = *(_QWORD **)a1;
          v6 = *(_QWORD *)(a1 + 8);
          v5 = *(_BYTE *)(a1 + 23);
          goto LABEL_16;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_16:
  if (v5 < 0)
  {
    v11 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v11 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v12 = &v11[v6];
    v13 = v6;
    result = v11;
    do
    {
      result = (char *)memchr(result, 99, v13 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v12 && result == v11)
        {
          v15 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
        }
        break;
      }
      ++result;
      v13 = v12 - result;
    }
    while (v12 - result >= 5);
    if (v6 >= 7)
    {
      result = v11;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v12 && result == v11)
          {
            v15 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
          }
          return result;
        }
        ++result;
        v6 = v12 - result;
      }
      while (v12 - result >= 7);
    }
  }
  return result;
}

void sub_20F622C50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F622C70@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DCA00;
  strcpy(v2, "cv3d::vio::VIOExtrinsicsVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 40, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F622E68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F622E88@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DCA10;
  strcpy(v2, "cv3d::vio::VIOPoseVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 34, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F623084(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F6230A4@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DC8E0;
  strcpy(v2, "cv3d::vio::IntrinsicsCalibVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 42, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F62329C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F6232BC@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DC7C0;
  strcpy(v2, "cv3d::vio::RadialDistortionCalibVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 48, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F6234B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F6234D8@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102E3F60;
  strcpy(v2, "cv3d::vio::ExternalLensCalibVariable<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 44, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F6236D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F6236F0(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;

  v2 = *a1;
  v1 = a1[1];
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = *v1;
LABEL_2:
  v7 = *(_QWORD **)(v4 + 48);
  v8 = *(_QWORD **)(v4 + 296);
  v9 = *(_DWORD *)(v6 + 16);
  while (1)
  {
    v10 = v5 / v3;
    v11 = v5 % v3;
    v12 = v5 % v3;
    v13 = v7;
    if (((v5 % v3) & 0x8000000000000000) != 0)
    {
      do
      {
        v21 = (_QWORD *)*v13;
        if (*v13)
        {
          do
          {
            v14 = v21;
            v21 = (_QWORD *)v21[1];
          }
          while (v21);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v13[2];
            v19 = *v14 == (_QWORD)v13;
            v13 = v14;
          }
          while (v19);
        }
        v13 = v14;
        v20 = __CFADD__(v12++, 1);
      }
      while (!v20);
    }
    else
    {
      v14 = v7;
      if (v11)
      {
        v15 = v5 % v3;
        v16 = v7;
        do
        {
          v18 = (_QWORD *)v16[1];
          if (v18)
          {
            do
            {
              v14 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v16[2];
              v19 = *v14 == (_QWORD)v16;
              v16 = v14;
            }
            while (!v19);
          }
          v16 = v14;
          v17 = v15-- <= 1;
        }
        while (!v17);
      }
    }
    v23 = v14[4];
    v22 = v14[5];
    v24 = v5 / v3;
    v25 = v8;
    if (v10 < 0)
    {
      do
      {
        v30 = (_QWORD *)*v25;
        if (*v25)
        {
          do
          {
            v26 = v30;
            v30 = (_QWORD *)v30[1];
          }
          while (v30);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v25[2];
            v19 = *v26 == (_QWORD)v25;
            v25 = v26;
          }
          while (v19);
        }
        v25 = v26;
        v20 = __CFADD__(v24++, 1);
      }
      while (!v20);
    }
    else
    {
      v26 = v8;
      if (v3 <= v5)
      {
        v39 = v5 / v3;
        v40 = v8;
        do
        {
          v41 = (_QWORD *)v40[1];
          if (v41)
          {
            do
            {
              v26 = v41;
              v41 = (_QWORD *)*v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              v26 = (_QWORD *)v40[2];
              v19 = *v26 == (_QWORD)v40;
              v40 = v26;
            }
            while (!v19);
          }
          v40 = v26;
          v17 = v39-- <= 1;
        }
        while (!v17);
      }
    }
    if (v9 == *((_DWORD *)v26 + 8) && *(_QWORD *)v6 == v23 && *(_DWORD *)(v6 + 8) == (_DWORD)v22)
      return v6 + 24;
    if (v11 < 0)
    {
      v31 = v7;
      do
      {
        v32 = (_QWORD *)*v31;
        if (*v31)
        {
          do
          {
            v27 = v32;
            v32 = (_QWORD *)v32[1];
          }
          while (v32);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v31[2];
            v19 = *v27 == (_QWORD)v31;
            v31 = v27;
          }
          while (v19);
        }
        v31 = v27;
        v20 = __CFADD__(v11++, 1);
      }
      while (!v20);
    }
    else
    {
      v27 = v7;
      if (v11)
      {
        v28 = v7;
        do
        {
          v29 = (_QWORD *)v28[1];
          if (v29)
          {
            do
            {
              v27 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v28[2];
              v19 = *v27 == (_QWORD)v28;
              v28 = v27;
            }
            while (!v19);
          }
          v28 = v27;
          v17 = v11-- <= 1;
        }
        while (!v17);
      }
    }
    v34 = v27[4];
    v33 = v27[5];
    if (v10 < 0)
    {
      v37 = v8;
      do
      {
        v38 = (_QWORD *)*v37;
        if (*v37)
        {
          do
          {
            v35 = v38;
            v38 = (_QWORD *)v38[1];
          }
          while (v38);
        }
        else
        {
          do
          {
            v35 = (_QWORD *)v37[2];
            v19 = *v35 == (_QWORD)v37;
            v37 = v35;
          }
          while (v19);
        }
        v37 = v35;
        v20 = __CFADD__(v10++, 1);
      }
      while (!v20);
    }
    else
    {
      v35 = v8;
      if (v3 <= v5)
      {
        v42 = v8;
        do
        {
          v43 = (_QWORD *)v42[1];
          if (v43)
          {
            do
            {
              v35 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v42[2];
              v19 = *v35 == (_QWORD)v42;
              v42 = v35;
            }
            while (!v19);
          }
          v42 = v35;
          v17 = v10-- <= 1;
        }
        while (!v17);
      }
    }
    v36 = *((_DWORD *)v35 + 8);
    if (v9 == v36)
    {
      if (*(_QWORD *)v6 < v34 || *(_QWORD *)v6 == v34 && *(_DWORD *)(v6 + 8) < v33)
      {
LABEL_79:
        v6 += 64;
        *v1 = v6;
        if ((uint64_t *)v6 != a1[5])
          goto LABEL_2;
        return 0;
      }
    }
    else if (v9 < v36)
    {
      goto LABEL_79;
    }
    v2[2] = ++v5;
    if ((uint64_t *)v5 == a1[4])
      return 0;
  }
}

uint64_t sub_20F623A0C(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 680);
  v5 = *(char **)(a1 + 688);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 6) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 2u;
  v13 = *(char **)(a1 + 1352);
  v14 = *(_QWORD *)(a1 + 1360);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1344);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1344) = v22;
        *(_QWORD *)(a1 + 1352) = v15;
        *(_QWORD *)(a1 + 1360) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1352) = v15;
  *(_BYTE *)(a1 + 978) = 0;
  *(_WORD *)(a1 + 976) = 256;
  return 1;
}

_OWORD *sub_20F623C14(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_OWORD **)a1;
  if (a2 > (v6 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 60)
      goto LABEL_24;
    v8 = v6 >> 3;
    if (v6 >> 3 <= a2)
      v8 = a2;
    v9 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0;
    v10 = 0xFFFFFFFFFFFFFFFLL;
    if (!v9)
      v10 = v8;
    if (v10 >> 60)
LABEL_24:
      sub_20E867F44();
    v11 = v10;
    result = operator new(16 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 16 * a2;
    v13 = (uint64_t)&result[a2];
    do
    {
      *result++ = *a3;
      v12 -= 16;
    }
    while (v12);
    goto LABEL_23;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 4;
  if (v14 >= a2)
    v15 = a2;
  else
    v15 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 4;
  for (; v15; --v15)
    *result++ = *a3;
  if (a2 <= v14)
  {
    v13 = *(_QWORD *)a1 + 16 * a2;
LABEL_23:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v16 = *(_OWORD **)(a1 + 8);
  v17 = &v16[a2 - v14];
  v18 = 16 * a2 - 16 * v14;
  do
  {
    *v16++ = *a3;
    v18 -= 16;
  }
  while (v18);
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

uint64_t sub_20F623D44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = &v14;
  if (a1 == a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)(v3 + 8);
      v7 = &v14;
      v8 = &v14;
      if (v4)
      {
        v9 = v4;
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v9;
            v10 = *((_DWORD *)v9 + 7);
            if (v6 >= v10)
              break;
            v9 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_12;
          }
          if (v10 >= v6)
            break;
          v9 = v8[1];
          if (!v9)
          {
            v7 = v8 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v11 = operator new(0x20uLL);
        v11[7] = v6;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v8;
        *v7 = (uint64_t *)v11;
        if (*v13)
        {
          v13 = (uint64_t **)*v13;
          v11 = *v7;
        }
        sub_20E868578(v14, (uint64_t *)v11);
        v5 = ++v15;
      }
      v3 += 64;
      v4 = v14;
    }
    while (v3 != a2);
  }
  sub_20E86872C((uint64_t)&v13, v4);
  return v5;
}

void sub_20F623E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20E86872C((uint64_t)va, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_20F623E78(unint64_t result, uint64_t *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  _QWORD ***v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  BOOL v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  BOOL v177;
  char v178;
  _QWORD **v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  uint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  int64_t v213;
  int64_t v214;
  _QWORD ***v215;
  int64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD **v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD **v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  _BOOL4 v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  unint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  _QWORD **v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  int64_t v314;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v319;

  v7 = (uint64_t *)result;
LABEL_2:
  v311 = a2 - 2;
  v313 = a2 - 1;
  v310 = a2 - 3;
  v8 = a3;
  v317 = a2;
  while (2)
  {
    v9 = v7;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v167 = *(a2 - 1);
        v168 = *v7;
        result = sub_20F625764(*a3, *(uint64_t **)(v167 + 536), *(_QWORD *)(v167 + 544), *(uint64_t **)(*v7 + 536), *(_QWORD *)(*v7 + 544));
        if ((_DWORD)result)
        {
          *v7 = v167;
          *(a2 - 1) = v168;
        }
        return result;
      case 3:
        return sub_20F625954(v7, v7 + 1, v313, a3);
      case 4:
        v169 = v7 + 1;
        v170 = v7 + 2;
        sub_20F625954(v7, v7 + 1, v7 + 2, a3);
        v171 = *(a2 - 1);
        v172 = v7[2];
        result = sub_20F625764(*a3, *(uint64_t **)(v171 + 536), *(_QWORD *)(v171 + 544), *(uint64_t **)(v172 + 536), *(_QWORD *)(v172 + 544));
        if ((_DWORD)result)
        {
          *v170 = v171;
          *(a2 - 1) = v172;
          v173 = *v170;
          v174 = *v169;
          result = sub_20F625764(*a3, *(uint64_t **)(*v170 + 536), *(_QWORD *)(*v170 + 544), *(uint64_t **)(*v169 + 536), *(_QWORD *)(*v169 + 544));
          if ((_DWORD)result)
          {
            v7[1] = v173;
            v7[2] = v174;
            v175 = *v7;
            result = sub_20F625764(*a3, *(uint64_t **)(v173 + 536), *(_QWORD *)(v173 + 544), *(uint64_t **)(*v7 + 536), *(_QWORD *)(*v7 + 544));
            if ((_DWORD)result)
            {
              *v7 = v173;
              v7[1] = v175;
            }
          }
        }
        return result;
      case 5:
        return sub_20F625CD0(v7, v7 + 1, v7 + 2, v7 + 3, v313, a3);
      default:
        if (v10 > 191)
        {
          v319 = v7;
          if (!a4)
          {
            if (v7 != a2)
            {
              v312 = (char *)a2 - (char *)v7;
              v213 = (unint64_t)(v11 - 2) >> 1;
              v214 = v213;
              v215 = a3;
              do
              {
                v216 = v214;
                if (v213 >= v214)
                {
                  v314 = v214;
                  v217 = (2 * v214) | 1;
                  v218 = v319;
                  v219 = &v319[v217];
                  v220 = 2 * v214 + 2;
                  v221 = *v215;
                  if (v220 >= v11)
                  {
                    v222 = *v219;
                  }
                  else
                  {
                    v222 = *v219;
                    v223 = v219[1];
                    v224 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 536), *(_QWORD *)(*v219 + 544), *(uint64_t **)(v223 + 536), *(_QWORD *)(v223 + 544));
                    if (v224)
                    {
                      v222 = v223;
                      ++v219;
                    }
                    v218 = v319;
                    if (v224)
                      v217 = v220;
                  }
                  v216 = v314;
                  v225 = &v218[v314];
                  v226 = *v225;
                  result = sub_20F625764(v221, *(uint64_t **)(v222 + 536), *(_QWORD *)(v222 + 544), *(uint64_t **)(*v225 + 536), *(_QWORD *)(*v225 + 544));
                  if ((result & 1) == 0)
                  {
                    v316 = v226;
                    do
                    {
                      v231 = v219;
                      *v225 = v222;
                      if (v213 < v217)
                        break;
                      v232 = (2 * v217) | 1;
                      v219 = &v319[v232];
                      v217 = 2 * v217 + 2;
                      v233 = *v215;
                      if (v217 < v11)
                      {
                        v222 = *v219;
                        v227 = v11;
                        v228 = v213;
                        v229 = v219[1];
                        v230 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 536), *(_QWORD *)(*v219 + 544), *(uint64_t **)(v229 + 536), *(_QWORD *)(v229 + 544));
                        if (v230)
                          v222 = v229;
                        v213 = v228;
                        v11 = v227;
                        v226 = v316;
                        if (v230)
                          ++v219;
                        v215 = a3;
                        if (!v230)
                          v217 = v232;
                      }
                      else
                      {
                        v222 = *v219;
                        v217 = v232;
                      }
                      result = sub_20F625764(v233, *(uint64_t **)(v222 + 536), *(_QWORD *)(v222 + 544), *(uint64_t **)(v226 + 536), *(_QWORD *)(v226 + 544));
                      v225 = v231;
                    }
                    while (!(_DWORD)result);
                    *v231 = v226;
                    v216 = v314;
                  }
                }
                v214 = v216 - 1;
              }
              while (v216);
              v234 = v312 >> 3;
              v235 = v317;
              do
              {
                v237 = 0;
                v238 = *v319;
                v239 = v319;
                do
                {
                  v241 = &v239[v237 + 1];
                  v242 = (2 * v237) | 1;
                  v243 = 2 * v237 + 2;
                  if (v243 < v234)
                  {
                    v244 = v241[1];
                    v245 = *(uint64_t **)(*v241 + 536);
                    v246 = (uint64_t)(*(_QWORD *)(*v241 + 544) - (_QWORD)v245) >> 6;
                    result = *(_QWORD *)(v244 + 536);
                    v247 = (uint64_t)(*(_QWORD *)(v244 + 544) - result) >> 6;
                    if (v246 == v247)
                    {
                      v248 = (**a3)[1];
                      v251 = *(_QWORD *)(v248 + 56);
                      v249 = v248 + 56;
                      v250 = v251;
                      if (!v251)
                        goto LABEL_454;
                      v252 = *v245;
                      v253 = *((_DWORD *)v245 + 2);
                      v254 = v249;
                      v255 = v250;
                      do
                      {
                        v256 = *(_QWORD *)(v255 + 32);
                        if (v256 < v252)
                        {
                          v255 += 8;
                        }
                        else if (v256 == v252)
                        {
                          if (*(_DWORD *)(v255 + 40) < v253)
                            v255 += 8;
                          else
                            v254 = v255;
                        }
                        else
                        {
                          v254 = v255;
                        }
                        v255 = *(_QWORD *)v255;
                      }
                      while (v255);
                      if (v254 == v249
                        || (v257 = *(_QWORD *)(v254 + 32), v252 < v257)
                        || v252 == v257 && *(_DWORD *)(v254 + 40) > v253)
                      {
LABEL_454:
                        v254 = v249;
                      }
                      v258 = (_QWORD *)*(*a3)[1];
                      if (v258 == (_QWORD *)v254)
                      {
                        v259 = 0;
                      }
                      else
                      {
                        v259 = 0;
                        v260 = (_QWORD *)*(*a3)[1];
                        do
                        {
                          v261 = (_QWORD *)v260[1];
                          if (v261)
                          {
                            do
                            {
                              v262 = v261;
                              v261 = (_QWORD *)*v261;
                            }
                            while (v261);
                          }
                          else
                          {
                            do
                            {
                              v262 = (_QWORD *)v260[2];
                              v177 = *v262 == (_QWORD)v260;
                              v260 = v262;
                            }
                            while (!v177);
                          }
                          ++v259;
                          v260 = v262;
                        }
                        while (v262 != (_QWORD *)v254);
                      }
                      if (!v250)
                        goto LABEL_479;
                      v263 = *(_QWORD *)result;
                      v264 = *(_DWORD *)(result + 8);
                      result = v249;
                      do
                      {
                        v265 = *(_QWORD *)(v250 + 32);
                        if (v265 < v263)
                        {
                          v250 += 8;
                        }
                        else if (v265 == v263)
                        {
                          if (*(_DWORD *)(v250 + 40) < v264)
                            v250 += 8;
                          else
                            result = v250;
                        }
                        else
                        {
                          result = v250;
                        }
                        v250 = *(_QWORD *)v250;
                      }
                      while (v250);
                      if (result == v249
                        || (v266 = *(_QWORD *)(result + 32), v263 < v266)
                        || v263 == v266 && *(_DWORD *)(result + 40) > v264)
                      {
LABEL_479:
                        result = v249;
                      }
                      if (v258 == (_QWORD *)result)
                      {
                        v267 = 0;
                      }
                      else
                      {
                        v267 = 0;
                        do
                        {
                          v268 = (_QWORD *)v258[1];
                          if (v268)
                          {
                            do
                            {
                              v269 = v268;
                              v268 = (_QWORD *)*v268;
                            }
                            while (v268);
                          }
                          else
                          {
                            do
                            {
                              v269 = (_QWORD *)v258[2];
                              v177 = *v269 == (_QWORD)v258;
                              v258 = v269;
                            }
                            while (!v177);
                          }
                          ++v267;
                          v258 = v269;
                        }
                        while (v269 != (_QWORD *)result);
                      }
                      v240 = v259 > v267;
                    }
                    else
                    {
                      v240 = v246 > v247;
                    }
                    if (v240)
                    {
                      ++v241;
                      v242 = v243;
                    }
                  }
                  *v239 = *v241;
                  v239 = v241;
                  v237 = v242;
                }
                while (v242 <= (uint64_t)((unint64_t)(v234 - 2) >> 1));
                if (v241 == --v235)
                {
                  *v241 = v238;
                }
                else
                {
                  *v241 = *v235;
                  *v235 = v238;
                  v270 = (char *)v241 - (char *)v319 + 8;
                  if (v270 >= 9)
                  {
                    v271 = (((unint64_t)v270 >> 3) - 2) >> 1;
                    v272 = &v319[v271];
                    v273 = *v272;
                    v274 = *v241;
                    result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 536), *(_QWORD *)(*v272 + 544), *(uint64_t **)(*v241 + 536), *(_QWORD *)(*v241 + 544));
                    if ((_DWORD)result)
                    {
                      v275 = v235;
                      do
                      {
                        v276 = v272;
                        *v241 = v273;
                        if (!v271)
                          break;
                        v271 = (v271 - 1) >> 1;
                        v272 = &v319[v271];
                        v273 = *v272;
                        result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 536), *(_QWORD *)(*v272 + 544), *(uint64_t **)(v274 + 536), *(_QWORD *)(v274 + 544));
                        v241 = v276;
                      }
                      while ((result & 1) != 0);
                      *v276 = v274;
                      v235 = v275;
                    }
                  }
                }
              }
              while (v234-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            sub_20F625954(v13, v7, v313, v8);
            --a4;
            v16 = *v7;
            v17 = *v8;
            if ((a5 & 1) != 0)
            {
LABEL_11:
              v20 = a4;
              v18 = *(_QWORD *)(v16 + 536);
              v19 = *(_QWORD *)(v16 + 544);
              goto LABEL_12;
            }
          }
          else
          {
            sub_20F625954(v7, v13, v313, v8);
            v14 = v12;
            sub_20F625954(v7 + 1, &v7[v14 - 1], v311, a3);
            sub_20F625954(v7 + 2, &v7[v14 + 1], v310, a3);
            sub_20F625954(&v7[v14 - 1], v13, &v7[v14 + 1], a3);
            v15 = *v7;
            *v7 = v7[v14];
            v7[v14] = v15;
            v8 = a3;
            --a4;
            v16 = *v7;
            v17 = *a3;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v18 = *(_QWORD *)(v16 + 536);
          v19 = *(_QWORD *)(v16 + 544);
          if (!sub_20F625764(v17, *(uint64_t **)(*(v7 - 1) + 536), *(_QWORD *)(*(v7 - 1) + 544), (uint64_t *)v18, v19))
          {
            result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(*v313 + 536), *(_QWORD *)(*v313 + 544));
            if ((result & 1) != 0)
            {
              do
              {
                v112 = v7[1];
                ++v7;
                result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(v112 + 536), *(_QWORD *)(v112 + 544));
              }
              while ((result & 1) == 0);
            }
            else
            {
              v113 = v7 + 1;
              do
              {
                v7 = v113;
                if (v113 >= v317)
                  break;
                ++v113;
                result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(*v7 + 536), *(_QWORD *)(*v7 + 544));
              }
              while (!(_DWORD)result);
            }
            v114 = v317;
            if (v7 < v317)
            {
              v114 = v317;
              do
              {
                v115 = *--v114;
                result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(v115 + 536), *(_QWORD *)(v115 + 544));
              }
              while ((result & 1) != 0);
            }
            if (v7 >= v114)
            {
              a2 = v317;
            }
            else
            {
              v116 = *v7;
              v117 = *v114;
              a2 = v317;
              do
              {
                *v7 = v117;
                *v114 = v116;
                v118 = *(_QWORD *)(v16 + 536);
                v119 = (*(_QWORD *)(v16 + 544) - v118) >> 6;
                v120 = *v8;
                do
                {
                  while (1)
                  {
                    v121 = v7[1];
                    ++v7;
                    v116 = v121;
                    v122 = *(_QWORD *)(v121 + 536);
                    v123 = (*(_QWORD *)(v121 + 544) - v122) >> 6;
                    if (v119 == v123)
                      break;
                    if (v119 > v123)
                      goto LABEL_265;
                  }
                  v124 = (*v120)[1];
                  v127 = *(_QWORD *)(v124 + 56);
                  v125 = v124 + 56;
                  v126 = v127;
                  if (!v127)
                    goto LABEL_226;
                  v128 = *(_QWORD *)v118;
                  v129 = *(_DWORD *)(v118 + 8);
                  v130 = v125;
                  result = v126;
                  do
                  {
                    v131 = *(_QWORD *)(result + 32);
                    if (v131 < v128)
                    {
                      result += 8;
                    }
                    else if (v131 == v128)
                    {
                      if (*(_DWORD *)(result + 40) < v129)
                        result += 8;
                      else
                        v130 = result;
                    }
                    else
                    {
                      v130 = result;
                    }
                    result = *(_QWORD *)result;
                  }
                  while (result);
                  if (v130 == v125
                    || (result = *(_QWORD *)(v130 + 32), v128 < result)
                    || v128 == result && *(_DWORD *)(v130 + 40) > v129)
                  {
LABEL_226:
                    v130 = v125;
                  }
                  v132 = (_QWORD *)*v120[1];
                  if (v132 == (_QWORD *)v130)
                  {
                    v133 = 0;
                  }
                  else
                  {
                    v133 = 0;
                    result = *v120[1];
                    do
                    {
                      v134 = *(_QWORD **)(result + 8);
                      if (v134)
                      {
                        do
                        {
                          v135 = v134;
                          v134 = (_QWORD *)*v134;
                        }
                        while (v134);
                      }
                      else
                      {
                        do
                        {
                          v135 = *(_QWORD **)(result + 16);
                          v177 = *v135 == result;
                          result = (unint64_t)v135;
                        }
                        while (!v177);
                      }
                      ++v133;
                      result = (unint64_t)v135;
                    }
                    while (v135 != (_QWORD *)v130);
                  }
                  if (!v126)
                    goto LABEL_251;
                  result = *(_QWORD *)v122;
                  v136 = *(_DWORD *)(v122 + 8);
                  v137 = v125;
                  do
                  {
                    v138 = *(_QWORD *)(v126 + 32);
                    if (v138 < result)
                    {
                      v126 += 8;
                    }
                    else if (v138 == result)
                    {
                      if (*(_DWORD *)(v126 + 40) < v136)
                        v126 += 8;
                      else
                        v137 = v126;
                    }
                    else
                    {
                      v137 = v126;
                    }
                    v126 = *(_QWORD *)v126;
                  }
                  while (v126);
                  if (v137 == v125
                    || (v139 = *(_QWORD *)(v137 + 32), result < v139)
                    || result == v139 && *(_DWORD *)(v137 + 40) > v136)
                  {
LABEL_251:
                    v137 = v125;
                  }
                  if (v132 == (_QWORD *)v137)
                  {
                    v140 = 0;
                  }
                  else
                  {
                    v140 = 0;
                    do
                    {
                      v141 = (_QWORD *)v132[1];
                      if (v141)
                      {
                        do
                        {
                          v142 = v141;
                          v141 = (_QWORD *)*v141;
                        }
                        while (v141);
                      }
                      else
                      {
                        do
                        {
                          v142 = (_QWORD *)v132[2];
                          v177 = *v142 == (_QWORD)v132;
                          v132 = v142;
                        }
                        while (!v177);
                      }
                      ++v140;
                      v132 = v142;
                    }
                    while (v142 != (_QWORD *)v137);
                  }
                }
                while (v133 <= v140);
                do
                {
LABEL_265:
                  while (1)
                  {
                    v143 = *--v114;
                    v117 = v143;
                    v144 = *(unint64_t **)(v143 + 536);
                    v145 = (uint64_t)(*(_QWORD *)(v143 + 544) - (_QWORD)v144) >> 6;
                    if (v119 == v145)
                      break;
                    if (v119 <= v145)
                      goto LABEL_208;
                  }
                  v146 = (*v120)[1];
                  v149 = *(_QWORD *)(v146 + 56);
                  v147 = v146 + 56;
                  v148 = v149;
                  if (!v149)
                    goto LABEL_280;
                  v150 = *(_QWORD *)v118;
                  v151 = *(_DWORD *)(v118 + 8);
                  result = v147;
                  v152 = v148;
                  do
                  {
                    v153 = *(_QWORD *)(v152 + 32);
                    if (v153 < v150)
                    {
                      v152 += 8;
                    }
                    else if (v153 == v150)
                    {
                      if (*(_DWORD *)(v152 + 40) < v151)
                        v152 += 8;
                      else
                        result = v152;
                    }
                    else
                    {
                      result = v152;
                    }
                    v152 = *(_QWORD *)v152;
                  }
                  while (v152);
                  if (result == v147
                    || (v154 = *(_QWORD *)(result + 32), v150 < v154)
                    || v150 == v154 && *(_DWORD *)(result + 40) > v151)
                  {
LABEL_280:
                    result = v147;
                  }
                  v155 = (unint64_t *)*v120[1];
                  if (v155 == (unint64_t *)result)
                  {
                    v156 = 0;
                  }
                  else
                  {
                    v156 = 0;
                    v157 = (_QWORD *)*v120[1];
                    do
                    {
                      v158 = (_QWORD *)v157[1];
                      if (v158)
                      {
                        do
                        {
                          v159 = v158;
                          v158 = (_QWORD *)*v158;
                        }
                        while (v158);
                      }
                      else
                      {
                        do
                        {
                          v159 = (_QWORD *)v157[2];
                          v177 = *v159 == (_QWORD)v157;
                          v157 = v159;
                        }
                        while (!v177);
                      }
                      ++v156;
                      v157 = v159;
                    }
                    while (v159 != (_QWORD *)result);
                  }
                  if (!v148)
                    goto LABEL_305;
                  v160 = *v144;
                  result = *((unsigned int *)v144 + 2);
                  v161 = v147;
                  do
                  {
                    v162 = *(_QWORD *)(v148 + 32);
                    if (v162 < v160)
                    {
                      v148 += 8;
                    }
                    else if (v162 == v160)
                    {
                      if (*(_DWORD *)(v148 + 40) < result)
                        v148 += 8;
                      else
                        v161 = v148;
                    }
                    else
                    {
                      v161 = v148;
                    }
                    v148 = *(_QWORD *)v148;
                  }
                  while (v148);
                  if (v161 == v147
                    || (v163 = *(_QWORD *)(v161 + 32), v160 < v163)
                    || v160 == v163 && *(_DWORD *)(v161 + 40) > result)
                  {
LABEL_305:
                    v161 = v147;
                  }
                  if (v155 == (unint64_t *)v161)
                  {
                    v164 = 0;
                  }
                  else
                  {
                    v164 = 0;
                    do
                    {
                      result = v155[1];
                      if (result)
                      {
                        do
                        {
                          v165 = (unint64_t *)result;
                          result = *(_QWORD *)result;
                        }
                        while (result);
                      }
                      else
                      {
                        do
                        {
                          v165 = (unint64_t *)v155[2];
                          result = *v165;
                          v177 = *v165 == (_QWORD)v155;
                          v155 = v165;
                        }
                        while (!v177);
                      }
                      ++v164;
                      v155 = v165;
                    }
                    while (v165 != (unint64_t *)v161);
                  }
                }
                while (v156 > v164);
LABEL_208:
                ;
              }
              while (v7 < v114);
            }
            v166 = v7 - 1;
            if (v7 - 1 != v9)
              *v9 = *v166;
            a5 = 0;
            *v166 = v16;
            continue;
          }
          v20 = a4;
LABEL_12:
          v21 = (v19 - v18) >> 6;
          do
          {
            while (1)
            {
              v22 = v7;
              v24 = v7[1];
              ++v7;
              v23 = v24;
              v25 = *(uint64_t **)(v24 + 536);
              v26 = (uint64_t)(*(_QWORD *)(v24 + 544) - (_QWORD)v25) >> 6;
              if (v26 == v21)
                break;
              if (v26 <= v21)
                goto LABEL_69;
            }
            v27 = (*v17)[1];
            v30 = *(uint64_t **)(v27 + 56);
            v28 = (uint64_t *)(v27 + 56);
            v29 = v30;
            if (!v30)
              goto LABEL_27;
            v31 = *v25;
            v32 = *((_DWORD *)v25 + 2);
            v33 = v28;
            v34 = v29;
            do
            {
              v35 = v34[4];
              if (v35 < v31)
              {
                ++v34;
              }
              else if (v35 == v31)
              {
                if (*((_DWORD *)v34 + 10) < v32)
                  ++v34;
                else
                  v33 = v34;
              }
              else
              {
                v33 = v34;
              }
              v34 = (uint64_t *)*v34;
            }
            while (v34);
            if (v33 == v28 || (v36 = v33[4], v31 < v36) || v31 == v36 && *((_DWORD *)v33 + 10) > v32)
LABEL_27:
              v33 = v28;
            v37 = (uint64_t *)*v17[1];
            if (v37 == v33)
            {
              v38 = 0;
            }
            else
            {
              v38 = 0;
              v39 = (uint64_t *)*v17[1];
              do
              {
                v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    v41 = v40;
                    v40 = (uint64_t *)*v40;
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    v41 = (uint64_t *)v39[2];
                    v177 = *v41 == (_QWORD)v39;
                    v39 = v41;
                  }
                  while (!v177);
                }
                ++v38;
                v39 = v41;
              }
              while (v41 != v33);
            }
            if (!v29)
              goto LABEL_50;
            v42 = *(_QWORD *)v18;
            v43 = *(_DWORD *)(v18 + 8);
            v44 = v28;
            do
            {
              v45 = v29[4];
              if (v45 < v42)
              {
                ++v29;
              }
              else if (v45 == v42)
              {
                if (*((_DWORD *)v29 + 10) < v43)
                  ++v29;
                else
                  v44 = v29;
              }
              else
              {
                v44 = v29;
              }
              v29 = (uint64_t *)*v29;
            }
            while (v29);
            if (v44 == v28 || (v46 = v44[4], v42 < v46) || v42 == v46 && *((_DWORD *)v44 + 10) > v43)
LABEL_50:
              v44 = v28;
            if (v37 == v44)
            {
              v47 = 0;
            }
            else
            {
              v47 = 0;
              do
              {
                v48 = (uint64_t *)v37[1];
                if (v48)
                {
                  do
                  {
                    v49 = v48;
                    v48 = (uint64_t *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    v49 = (uint64_t *)v37[2];
                    v177 = *v49 == (_QWORD)v37;
                    v37 = v49;
                  }
                  while (!v177);
                }
                ++v47;
                v37 = v49;
              }
              while (v49 != v44);
            }
          }
          while (v38 > v47);
LABEL_69:
          v50 = v317;
          if (v22 == v319)
          {
            v50 = v317;
            do
            {
              if (v7 >= v50)
                break;
              v52 = *--v50;
            }
            while (!sub_20F625764(v17, *(uint64_t **)(v52 + 536), *(_QWORD *)(v52 + 544), (uint64_t *)v18, v19));
          }
          else
          {
            do
              v51 = *--v50;
            while (!sub_20F625764(v17, *(uint64_t **)(v51 + 536), *(_QWORD *)(v51 + 544), (uint64_t *)v18, v19));
          }
          a2 = v317;
          if (v7 < v50)
          {
            v53 = *v50;
            v54 = v7;
            v55 = v50;
            do
            {
              *v54 = v53;
              *v55 = v23;
              v56 = *(uint64_t **)(v16 + 536);
              v57 = (uint64_t)(*(_QWORD *)(v16 + 544) - (_QWORD)v56) >> 6;
              v58 = *v8;
              do
              {
                while (1)
                {
                  v22 = v54;
                  v59 = v54[1];
                  ++v54;
                  v23 = v59;
                  v60 = *(uint64_t **)(v59 + 536);
                  v61 = (uint64_t)(*(_QWORD *)(v59 + 544) - (_QWORD)v60) >> 6;
                  if (v61 == v57)
                    break;
                  if (v61 <= v57)
                    goto LABEL_136;
                }
                v62 = (*v58)[1];
                v65 = *(uint64_t **)(v62 + 56);
                v63 = (uint64_t *)(v62 + 56);
                v64 = v65;
                if (!v65)
                  goto LABEL_93;
                v66 = *v60;
                v67 = *((_DWORD *)v60 + 2);
                v68 = v63;
                v69 = v64;
                do
                {
                  v70 = v69[4];
                  if (v70 < v66)
                  {
                    ++v69;
                  }
                  else if (v70 == v66)
                  {
                    if (*((_DWORD *)v69 + 10) < v67)
                      ++v69;
                    else
                      v68 = v69;
                  }
                  else
                  {
                    v68 = v69;
                  }
                  v69 = (uint64_t *)*v69;
                }
                while (v69);
                if (v68 == v63 || (v71 = v68[4], v66 < v71) || v66 == v71 && *((_DWORD *)v68 + 10) > v67)
LABEL_93:
                  v68 = v63;
                v72 = (uint64_t *)*v58[1];
                if (v72 == v68)
                {
                  v73 = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = (uint64_t *)*v58[1];
                  do
                  {
                    v75 = (uint64_t *)v74[1];
                    if (v75)
                    {
                      do
                      {
                        v76 = v75;
                        v75 = (uint64_t *)*v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      do
                      {
                        v76 = (uint64_t *)v74[2];
                        v177 = *v76 == (_QWORD)v74;
                        v74 = v76;
                      }
                      while (!v177);
                    }
                    ++v73;
                    v74 = v76;
                  }
                  while (v76 != v68);
                }
                if (!v64)
                  goto LABEL_116;
                v77 = *v56;
                v78 = *((_DWORD *)v56 + 2);
                v79 = v63;
                do
                {
                  v80 = v64[4];
                  if (v80 < v77)
                  {
                    ++v64;
                  }
                  else if (v80 == v77)
                  {
                    if (*((_DWORD *)v64 + 10) < v78)
                      ++v64;
                    else
                      v79 = v64;
                  }
                  else
                  {
                    v79 = v64;
                  }
                  v64 = (uint64_t *)*v64;
                }
                while (v64);
                if (v79 == v63 || (v81 = v79[4], v77 < v81) || v77 == v81 && *((_DWORD *)v79 + 10) > v78)
LABEL_116:
                  v79 = v63;
                if (v72 == v79)
                {
                  v82 = 0;
                }
                else
                {
                  v82 = 0;
                  do
                  {
                    v83 = (uint64_t *)v72[1];
                    if (v83)
                    {
                      do
                      {
                        v84 = v83;
                        v83 = (uint64_t *)*v83;
                      }
                      while (v83);
                    }
                    else
                    {
                      do
                      {
                        v84 = (uint64_t *)v72[2];
                        v177 = *v84 == (_QWORD)v72;
                        v72 = v84;
                      }
                      while (!v177);
                    }
                    ++v82;
                    v72 = v84;
                  }
                  while (v84 != v79);
                }
              }
              while (v73 > v82);
              do
              {
LABEL_136:
                while (1)
                {
                  v85 = *--v55;
                  v53 = v85;
                  v86 = *(uint64_t **)(v85 + 536);
                  v87 = (uint64_t)(*(_QWORD *)(v85 + 544) - (_QWORD)v86) >> 6;
                  if (v87 == v57)
                    break;
                  if (v87 > v57)
                    goto LABEL_77;
                }
                v88 = (*v58)[1];
                v91 = *(uint64_t **)(v88 + 56);
                v89 = (uint64_t *)(v88 + 56);
                v90 = v91;
                if (!v91)
                  goto LABEL_149;
                v92 = *v86;
                v93 = *((_DWORD *)v86 + 2);
                v94 = v89;
                v95 = v90;
                do
                {
                  v96 = v95[4];
                  if (v96 < v92)
                  {
                    ++v95;
                  }
                  else if (v96 == v92)
                  {
                    if (*((_DWORD *)v95 + 10) < v93)
                      ++v95;
                    else
                      v94 = v95;
                  }
                  else
                  {
                    v94 = v95;
                  }
                  v95 = (uint64_t *)*v95;
                }
                while (v95);
                if (v94 == v89 || (v97 = v94[4], v92 < v97) || v92 == v97 && *((_DWORD *)v94 + 10) > v93)
LABEL_149:
                  v94 = v89;
                v98 = (uint64_t *)*v58[1];
                if (v98 == v94)
                {
                  v99 = 0;
                }
                else
                {
                  v99 = 0;
                  v100 = (uint64_t *)*v58[1];
                  do
                  {
                    v101 = (uint64_t *)v100[1];
                    if (v101)
                    {
                      do
                      {
                        v102 = v101;
                        v101 = (uint64_t *)*v101;
                      }
                      while (v101);
                    }
                    else
                    {
                      do
                      {
                        v102 = (uint64_t *)v100[2];
                        v177 = *v102 == (_QWORD)v100;
                        v100 = v102;
                      }
                      while (!v177);
                    }
                    ++v99;
                    v100 = v102;
                  }
                  while (v102 != v94);
                }
                if (!v90)
                  goto LABEL_172;
                v103 = *v56;
                v104 = *((_DWORD *)v56 + 2);
                v105 = v89;
                do
                {
                  v106 = v90[4];
                  if (v106 < v103)
                  {
                    ++v90;
                  }
                  else if (v106 == v103)
                  {
                    if (*((_DWORD *)v90 + 10) < v104)
                      ++v90;
                    else
                      v105 = v90;
                  }
                  else
                  {
                    v105 = v90;
                  }
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                if (v105 == v89 || (v107 = v105[4], v103 < v107) || v103 == v107 && *((_DWORD *)v105 + 10) > v104)
LABEL_172:
                  v105 = v89;
                if (v98 == v105)
                {
                  v108 = 0;
                }
                else
                {
                  v108 = 0;
                  do
                  {
                    v109 = (uint64_t *)v98[1];
                    if (v109)
                    {
                      do
                      {
                        v110 = v109;
                        v109 = (uint64_t *)*v109;
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        v110 = (uint64_t *)v98[2];
                        v177 = *v110 == (_QWORD)v98;
                        v98 = v110;
                      }
                      while (!v177);
                    }
                    ++v108;
                    v98 = v110;
                  }
                  while (v110 != v105);
                }
              }
              while (v99 <= v108);
LABEL_77:
              ;
            }
            while (v54 < v55);
          }
          if (v22 != v319)
            *v319 = *v22;
          *v22 = v16;
          a4 = v20;
          if (v7 < v50)
            goto LABEL_196;
          v111 = sub_20F625A7C(v319, v22, v8);
          v7 = v22 + 1;
          result = sub_20F625A7C(v22 + 1, v317, v8);
          if (!(_DWORD)result)
          {
            if (v111)
              continue;
LABEL_196:
            result = sub_20F623E78(v319, v22, v8, v20, a5 & 1);
            a5 = 0;
            v7 = v22 + 1;
            continue;
          }
          a2 = v22;
          v7 = v319;
          if (v111)
            return result;
          goto LABEL_2;
        }
        v176 = v7 + 1;
        v177 = v7 == a2 || v176 == a2;
        v178 = v177;
        if ((a5 & 1) != 0)
        {
          if ((v178 & 1) == 0)
          {
            v179 = *a3;
            v180 = v7;
            do
            {
              v182 = v176;
              v183 = *v180;
              v184 = v180[1];
              result = sub_20F625764(v179, *(uint64_t **)(v184 + 536), *(_QWORD *)(v184 + 544), *(uint64_t **)(*v180 + 536), *(_QWORD *)(*v180 + 544));
              if ((_DWORD)result)
              {
                v180[1] = v183;
                v181 = v7;
                if (v180 != v7)
                {
                  v185 = v180;
                  do
                  {
                    v187 = *--v185;
                    v186 = v187;
                    v188 = *(_QWORD *)(v184 + 536);
                    v189 = (*(_QWORD *)(v184 + 544) - v188) >> 6;
                    v190 = *(uint64_t **)(v187 + 536);
                    v191 = (uint64_t)(*(_QWORD *)(v187 + 544) - (_QWORD)v190) >> 6;
                    if (v189 == v191)
                    {
                      v192 = (**a3)[1];
                      v195 = *(uint64_t **)(v192 + 56);
                      v193 = (unint64_t *)(v192 + 56);
                      v194 = v195;
                      if (!v195)
                        goto LABEL_363;
                      v196 = *(_QWORD *)v188;
                      v197 = *(_DWORD *)(v188 + 8);
                      v198 = v193;
                      v199 = v194;
                      do
                      {
                        result = v199[4];
                        if (result < v196)
                        {
                          ++v199;
                        }
                        else if (result == v196)
                        {
                          result = *((_DWORD *)v199 + 10) < v197;
                          if (*((_DWORD *)v199 + 10) < v197)
                            ++v199;
                          else
                            v198 = (unint64_t *)v199;
                        }
                        else
                        {
                          v198 = (unint64_t *)v199;
                        }
                        v199 = (uint64_t *)*v199;
                      }
                      while (v199);
                      if (v198 == v193
                        || (v200 = v198[4], v196 < v200)
                        || v196 == v200 && *((_DWORD *)v198 + 10) > v197)
                      {
LABEL_363:
                        v198 = v193;
                      }
                      v201 = (unint64_t *)*(*a3)[1];
                      if (v201 == v198)
                      {
                        v202 = 0;
                      }
                      else
                      {
                        v202 = 0;
                        v203 = (unint64_t *)*(*a3)[1];
                        do
                        {
                          result = v203[1];
                          if (result)
                          {
                            do
                            {
                              v204 = (unint64_t *)result;
                              result = *(_QWORD *)result;
                            }
                            while (result);
                          }
                          else
                          {
                            do
                            {
                              v204 = (unint64_t *)v203[2];
                              result = *v204;
                              v177 = *v204 == (_QWORD)v203;
                              v203 = v204;
                            }
                            while (!v177);
                          }
                          ++v202;
                          v203 = v204;
                        }
                        while (v204 != v198);
                      }
                      if (!v194)
                        goto LABEL_386;
                      v205 = *v190;
                      v206 = *((_DWORD *)v190 + 2);
                      v207 = v193;
                      do
                      {
                        v208 = v194[4];
                        if (v208 < v205)
                        {
                          ++v194;
                        }
                        else if (v208 == v205)
                        {
                          result = (unint64_t)(v194 + 1);
                          if (*((_DWORD *)v194 + 10) < v206)
                            ++v194;
                          else
                            v207 = (unint64_t *)v194;
                        }
                        else
                        {
                          v207 = (unint64_t *)v194;
                        }
                        v194 = (uint64_t *)*v194;
                      }
                      while (v194);
                      if (v207 == v193
                        || (v209 = v207[4], v205 < v209)
                        || v205 == v209 && *((_DWORD *)v207 + 10) > v206)
                      {
LABEL_386:
                        v207 = v193;
                      }
                      if (v201 == v207)
                      {
                        v210 = 0;
                      }
                      else
                      {
                        v210 = 0;
                        do
                        {
                          v211 = (unint64_t *)v201[1];
                          if (v211)
                          {
                            do
                            {
                              v212 = v211;
                              v211 = (unint64_t *)*v211;
                            }
                            while (v211);
                          }
                          else
                          {
                            do
                            {
                              v212 = (unint64_t *)v201[2];
                              v177 = *v212 == (_QWORD)v201;
                              v201 = v212;
                            }
                            while (!v177);
                          }
                          ++v210;
                          v201 = v212;
                        }
                        while (v212 != v207);
                      }
                      if (v202 <= v210)
                      {
LABEL_342:
                        v181 = v180;
                        goto LABEL_343;
                      }
                    }
                    else if (v189 <= v191)
                    {
                      goto LABEL_342;
                    }
                    *v180 = v186;
                    v180 = v185;
                  }
                  while (v185 != v7);
                  v181 = v7;
                }
LABEL_343:
                *v181 = v184;
                v179 = *a3;
              }
              v176 = v182 + 1;
              v180 = v182;
            }
            while (v182 + 1 != a2);
          }
        }
        else if ((v178 & 1) == 0)
        {
          v277 = *a3;
          do
          {
            v278 = v176;
            v280 = *v9;
            v279 = v9[1];
            result = sub_20F625764(v277, *(uint64_t **)(v279 + 536), *(_QWORD *)(v279 + 544), *(uint64_t **)(*v9 + 536), *(_QWORD *)(*v9 + 544));
            if ((_DWORD)result)
            {
              v281 = v278;
              do
              {
                while (1)
                {
                  *v281 = v280;
                  v281 = v9;
                  v282 = *--v9;
                  v280 = v282;
                  v283 = *(uint64_t **)(v279 + 536);
                  v284 = (uint64_t)(*(_QWORD *)(v279 + 544) - (_QWORD)v283) >> 6;
                  v285 = *(uint64_t **)(v282 + 536);
                  v286 = (uint64_t)(*(_QWORD *)(v282 + 544) - (_QWORD)v285) >> 6;
                  if (v284 == v286)
                    break;
                  if (v284 <= v286)
                    goto LABEL_501;
                }
                v287 = (**a3)[1];
                v290 = *(uint64_t **)(v287 + 56);
                v288 = (uint64_t *)(v287 + 56);
                v289 = v290;
                if (!v290)
                  goto LABEL_521;
                v291 = *v283;
                v292 = *((_DWORD *)v283 + 2);
                v293 = v288;
                v294 = v289;
                do
                {
                  v295 = v294[4];
                  if (v295 < v291)
                  {
                    ++v294;
                  }
                  else if (v295 == v291)
                  {
                    result = (unint64_t)(v294 + 1);
                    if (*((_DWORD *)v294 + 10) < v292)
                      ++v294;
                    else
                      v293 = v294;
                  }
                  else
                  {
                    v293 = v294;
                  }
                  v294 = (uint64_t *)*v294;
                }
                while (v294);
                if (v293 == v288 || (v296 = v293[4], v291 < v296) || v291 == v296 && *((_DWORD *)v293 + 10) > v292)
LABEL_521:
                  v293 = v288;
                v297 = (uint64_t *)*(*a3)[1];
                if (v297 == v293)
                {
                  v298 = 0;
                }
                else
                {
                  v298 = 0;
                  v299 = (uint64_t *)*(*a3)[1];
                  do
                  {
                    v300 = (uint64_t *)v299[1];
                    if (v300)
                    {
                      do
                      {
                        v301 = v300;
                        v300 = (uint64_t *)*v300;
                      }
                      while (v300);
                    }
                    else
                    {
                      do
                      {
                        v301 = (uint64_t *)v299[2];
                        v177 = *v301 == (_QWORD)v299;
                        v299 = v301;
                      }
                      while (!v177);
                    }
                    ++v298;
                    v299 = v301;
                  }
                  while (v301 != v293);
                }
                if (!v289)
                  goto LABEL_546;
                v302 = *v285;
                v303 = *((_DWORD *)v285 + 2);
                v304 = v288;
                do
                {
                  v305 = v289[4];
                  if (v305 < v302)
                  {
                    ++v289;
                  }
                  else if (v305 == v302)
                  {
                    if (*((_DWORD *)v289 + 10) < v303)
                      ++v289;
                    else
                      v304 = v289;
                  }
                  else
                  {
                    v304 = v289;
                  }
                  v289 = (uint64_t *)*v289;
                }
                while (v289);
                if (v304 == v288 || (v306 = v304[4], v302 < v306) || v302 == v306 && *((_DWORD *)v304 + 10) > v303)
LABEL_546:
                  v304 = v288;
                if (v297 == v304)
                {
                  v307 = 0;
                }
                else
                {
                  v307 = 0;
                  do
                  {
                    v308 = (uint64_t *)v297[1];
                    if (v308)
                    {
                      do
                      {
                        v309 = v308;
                        v308 = (uint64_t *)*v308;
                      }
                      while (v308);
                    }
                    else
                    {
                      do
                      {
                        v309 = (uint64_t *)v297[2];
                        v177 = *v309 == (_QWORD)v297;
                        v297 = v309;
                      }
                      while (!v177);
                    }
                    ++v307;
                    v297 = v309;
                  }
                  while (v309 != v304);
                }
              }
              while (v298 > v307);
LABEL_501:
              *v281 = v279;
              v277 = *a3;
            }
            v176 = v278 + 1;
            v9 = v278;
          }
          while (v278 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F625764(_QWORD **a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;

  v5 = (a3 - (uint64_t)a2) >> 6;
  v6 = (a5 - (uint64_t)a4) >> 6;
  if (v5 != v6)
    return v5 > v6;
  v7 = (*a1)[1];
  v10 = *(uint64_t **)(v7 + 56);
  v8 = (uint64_t *)(v7 + 56);
  v9 = v10;
  if (!v10)
    goto LABEL_17;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = v8;
  v14 = v9;
  do
  {
    v15 = v14[4];
    if (v15 < v11)
    {
      ++v14;
    }
    else if (v15 == v11)
    {
      if (*((_DWORD *)v14 + 10) < v12)
        ++v14;
      else
        v13 = v14;
    }
    else
    {
      v13 = v14;
    }
    v14 = (uint64_t *)*v14;
  }
  while (v14);
  if (v13 == v8 || (v17 = v13[4], v11 < v17) || v11 == v17 && *((_DWORD *)v13 + 10) > v12)
LABEL_17:
    v13 = v8;
  v18 = (uint64_t *)*a1[1];
  if (v18 == v13)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    v20 = (uint64_t *)*a1[1];
    do
    {
      v21 = (uint64_t *)v20[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v20[2];
          v23 = *v22 == (_QWORD)v20;
          v20 = v22;
        }
        while (!v23);
      }
      ++v19;
      v20 = v22;
    }
    while (v22 != v13);
  }
  if (!v9)
    goto LABEL_42;
  v24 = *a4;
  v25 = *((_DWORD *)a4 + 2);
  v26 = v8;
  do
  {
    v27 = v9[4];
    if (v27 < v24)
    {
      ++v9;
    }
    else if (v27 == v24)
    {
      if (*((_DWORD *)v9 + 10) < v25)
        ++v9;
      else
        v26 = v9;
    }
    else
    {
      v26 = v9;
    }
    v9 = (uint64_t *)*v9;
  }
  while (v9);
  if (v26 == v8 || (v28 = v26[4], v24 < v28) || v24 == v28 && *((_DWORD *)v26 + 10) > v25)
LABEL_42:
    v26 = v8;
  if (v18 == v26)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    do
    {
      v30 = (uint64_t *)v18[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (uint64_t *)v18[2];
          v23 = *v31 == (_QWORD)v18;
          v18 = v31;
        }
        while (!v23);
      }
      ++v29;
      v18 = v31;
    }
    while (v31 != v26);
  }
  return v19 > v29;
}

BOOL sub_20F625954(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD ***a4)
{
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *a4;
  v8 = *a2;
  v9 = *a1;
  v10 = *(uint64_t **)(*a2 + 536);
  v11 = *(_QWORD *)(*a2 + 544);
  v12 = sub_20F625764(*a4, v10, v11, *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544));
  v13 = *a3;
  result = sub_20F625764(v7, *(uint64_t **)(*a3 + 536), *(_QWORD *)(*a3 + 544), v10, v11);
  if (v12)
  {
    if (result)
    {
      *a1 = v13;
    }
    else
    {
      *a1 = v8;
      *a2 = v9;
      v17 = *a3;
      result = sub_20F625764(*a4, *(uint64_t **)(*a3 + 536), *(_QWORD *)(*a3 + 544), *(uint64_t **)(v9 + 536), *(_QWORD *)(v9 + 544));
      if (!result)
        return result;
      *a2 = v17;
    }
    *a3 = v9;
  }
  else if (result)
  {
    *a2 = v13;
    *a3 = v8;
    v15 = *a2;
    v16 = *a1;
    result = sub_20F625764(*a4, *(uint64_t **)(*a2 + 536), *(_QWORD *)(*a2 + 544), *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544));
    if (result)
    {
      *a1 = v15;
      *a2 = v16;
    }
  }
  return result;
}

BOOL sub_20F625A7C(uint64_t *a1, uint64_t *a2, _QWORD ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_20F625764(*a3, *(uint64_t **)(v8 + 536), *(_QWORD *)(v8 + 544), *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20F625954(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v19 = a1 + 2;
      sub_20F625954(a1, a1 + 1, a1 + 2, a3);
      v20 = *(a2 - 1);
      v21 = a1[2];
      if (sub_20F625764(*a3, *(uint64_t **)(v20 + 536), *(_QWORD *)(v20 + 544), *(uint64_t **)(v21 + 536), *(_QWORD *)(v21 + 544)))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = a1[1];
        if (sub_20F625764(*a3, *(uint64_t **)(*v19 + 536), *(_QWORD *)(*v19 + 544), *(uint64_t **)(v23 + 536), *(_QWORD *)(v23 + 544)))
        {
          a1[1] = v22;
          a1[2] = v23;
          v24 = *a3;
          v25 = *a1;
          if (sub_20F625764(v24, *(uint64_t **)(v22 + 536), *(_QWORD *)(v22 + 544), *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544)))
          {
            *a1 = v22;
            a1[1] = v25;
          }
        }
      }
      return 1;
    case 5:
      sub_20F625CD0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20F625954(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (sub_20F625764(*a3, *(uint64_t **)(*v11 + 536), *(_QWORD *)(*v11 + 544), *(uint64_t **)(v15 + 536), *(_QWORD *)(v15 + 544)))
    {
      break;
    }
LABEL_13:
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
  v16 = v13;
  do
  {
    *(uint64_t *)((char *)a1 + v16) = v15;
    v17 = v16 - 8;
    if (v16 == 8)
    {
      *a1 = v14;
      if (++v12 != 8)
        goto LABEL_13;
      return v11 + 1 == a2;
    }
    v15 = *(uint64_t *)((char *)a1 + v16 - 16);
    v18 = sub_20F625764(*a3, *(uint64_t **)(v14 + 536), *(_QWORD *)(v14 + 544), *(uint64_t **)(v15 + 536), *(_QWORD *)(v15 + 544));
    v16 = v17;
  }
  while (v18);
  *(uint64_t *)((char *)a1 + v17) = v14;
  if (++v12 != 8)
    goto LABEL_13;
  return v11 + 1 == a2;
}

BOOL sub_20F625CD0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD ***a6)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;

  sub_20F625954(a1, a2, a3, a6);
  v12 = *a6;
  v13 = *a4;
  v14 = *a3;
  if (sub_20F625764(*a6, *(uint64_t **)(*a4 + 536), *(_QWORD *)(*a4 + 544), *(uint64_t **)(*a3 + 536), *(_QWORD *)(*a3 + 544)))
  {
    *a3 = v13;
    *a4 = v14;
    v12 = *a6;
    v15 = *a3;
    v16 = *a2;
    if (sub_20F625764(*a6, *(uint64_t **)(*a3 + 536), *(_QWORD *)(*a3 + 544), *(uint64_t **)(*a2 + 536), *(_QWORD *)(*a2 + 544)))
    {
      *a2 = v15;
      *a3 = v16;
      v12 = *a6;
      v17 = *a2;
      v18 = *a1;
      if (sub_20F625764(*a6, *(uint64_t **)(*a2 + 536), *(_QWORD *)(*a2 + 544), *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544)))
      {
        *a1 = v17;
        *a2 = v18;
        v12 = *a6;
      }
    }
  }
  v19 = *a5;
  v20 = *a4;
  result = sub_20F625764(v12, *(uint64_t **)(*a5 + 536), *(_QWORD *)(*a5 + 544), *(uint64_t **)(*a4 + 536), *(_QWORD *)(*a4 + 544));
  if (result)
  {
    *a4 = v19;
    *a5 = v20;
    v22 = *a4;
    v23 = *a3;
    result = sub_20F625764(*a6, *(uint64_t **)(*a4 + 536), *(_QWORD *)(*a4 + 544), *(uint64_t **)(*a3 + 536), *(_QWORD *)(*a3 + 544));
    if (result)
    {
      *a3 = v22;
      *a4 = v23;
      v24 = *a3;
      v25 = *a2;
      result = sub_20F625764(*a6, *(uint64_t **)(*a3 + 536), *(_QWORD *)(*a3 + 544), *(uint64_t **)(*a2 + 536), *(_QWORD *)(*a2 + 544));
      if (result)
      {
        *a2 = v24;
        *a3 = v25;
        v26 = *a6;
        v27 = *a2;
        v28 = *a1;
        result = sub_20F625764(v26, *(uint64_t **)(*a2 + 536), *(_QWORD *)(*a2 + 544), *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544));
        if (result)
        {
          *a1 = v27;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

double sub_20F625E6C(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, double result)
{
  uint64_t v7;
  double v8;
  int v9;
  double *v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  __n128 v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result = *(a2 - 2);
      v8 = *(double *)a1;
      if (result < *(double *)a1)
      {
        *(double *)a1 = result;
        *(a2 - 2) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v17 = (double *)(a1 + 16);
        if ((double *)(a1 + 16) != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v21 = v17;
            result = *v17;
            v22 = *(double *)v19;
            if (*v17 < *(double *)v19)
            {
              v23 = *(_DWORD *)(v19 + 24);
              v24 = v18;
              do
              {
                v25 = a1 + v24;
                *(double *)(v25 + 16) = v22;
                *(_DWORD *)(v25 + 24) = *(_DWORD *)(a1 + v24 + 8);
                if (!v24)
                {
                  v20 = a1;
                  goto LABEL_13;
                }
                v22 = *(double *)(v25 - 16);
                v24 -= 16;
              }
              while (result < v22);
              v20 = a1 + v24 + 16;
LABEL_13:
              *(double *)v20 = result;
              *(_DWORD *)(v20 + 8) = v23;
            }
            v17 = v21 + 2;
            v18 += 16;
            v19 = (uint64_t)v21;
          }
          while (v21 + 2 != a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = (double *)(a1 + 16 * (a3 >> 1));
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20F6260E4((double *)a1, v14, v15, a4);
        v26 = &v12[2 * v13];
        sub_20F6260E4((double *)(v7 + 16 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26);
        v27 = &v12[2 * a3];
        v28 = v26;
        while (v28 != v27)
        {
          result = *v28;
          v31 = *v12;
          if (*v28 >= *v12)
          {
            v29 = v12;
            v12 += 2;
            result = v31;
          }
          else
          {
            v29 = v28;
            v28 += 2;
          }
          v30 = *((_DWORD *)v29 + 2);
          *(double *)v7 = result;
          *(_DWORD *)(v7 + 8) = v30;
          v7 += 16;
          if (v12 == v26)
          {
            if (v28 != v27)
            {
              v35 = 0;
              do
              {
                v36 = &v28[v35];
                v37 = v7 + v35 * 8;
                result = v28[v35];
                *(double *)v37 = result;
                *(_DWORD *)(v37 + 8) = LODWORD(v28[v35 + 1]);
                v35 += 2;
              }
              while (v36 + 2 != v27);
            }
            return result;
          }
        }
        if (v12 != v26)
        {
          v32 = 0;
          do
          {
            v33 = &v12[v32];
            v34 = v7 + v32 * 8;
            result = v12[v32];
            *(double *)v34 = result;
            *(_DWORD *)(v34 + 8) = LODWORD(v12[v32 + 1]);
            v32 += 2;
          }
          while (v33 + 2 != v26);
        }
      }
      else
      {
        sub_20F625E6C(a1, v14, v15, a4, a5);
        sub_20F625E6C(v7 + 16 * (a3 >> 1), a2, a3 - (a3 >> 1), v12, a5);
        return sub_20F626330((double *)v7, (double *)(v7 + 16 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v12, a5, v16);
      }
    }
  }
  return result;
}

double *sub_20F6260E4(double *result, double *a2, unint64_t a3, double *a4)
{
  double *v4;
  double *v7;
  double *v8;
  __int128 v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      if (*(a2 - 2) >= *result)
      {
        *(_OWORD *)a4 = *(_OWORD *)result;
        v9 = *(_OWORD *)v8;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        v9 = *(_OWORD *)result;
      }
      *((_OWORD *)a4 + 1) = v9;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = a3 >> 1;
      v20 = 2 * (a3 >> 1);
      v21 = &result[v20];
      sub_20F625E6C(result, &result[v20], a3 >> 1, a4, a3 >> 1);
      result = (double *)sub_20F625E6C(&v7[v20], a2, a3 - v19, &v4[v20], a3 - v19);
      v22 = &v7[v20];
      while (v22 != a2)
      {
        if (*v22 >= *v7)
        {
          v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v4 = v23;
          v4 += 2;
          if (v7 == v21)
            goto LABEL_28;
        }
        else
        {
          v24 = *(_OWORD *)v22;
          v22 += 2;
          *(_OWORD *)v4 = v24;
          v4 += 2;
          if (v7 == v21)
          {
LABEL_28:
            if (v22 != a2)
            {
              v25 = 0;
              do
              {
                *(_OWORD *)&v4[v25] = *(_OWORD *)&v22[v25];
                v25 += 2;
              }
              while (&v22[v25] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v21)
      {
        v26 = 0;
        do
        {
          *(_OWORD *)&v4[v26] = *(_OWORD *)&v7[v26];
          v26 += 2;
        }
        while (&v7[v26] != v21);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v10 = result + 2;
      if (result + 2 != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          while (1)
          {
            v14 = v10;
            v15 = *v13;
            v13 += 2;
            if (*v10 < v15)
              break;
            *(_OWORD *)v13 = *(_OWORD *)v10;
            v10 += 2;
            v11 += 16;
            v12 = v13;
            v7 = v14;
            if (v14 + 2 == a2)
              return result;
          }
          *(_OWORD *)v13 = *(_OWORD *)v12;
          v16 = a4;
          if (v12 != a4)
          {
            v17 = v11;
            while (1)
            {
              v16 = (double *)((char *)a4 + v17);
              v18 = *(double *)((char *)a4 + v17 - 16);
              if (*v14 >= v18)
                break;
              *v16 = v18;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v16 - 2);
              v17 -= 16;
              if (!v17)
              {
                v16 = a4;
                break;
              }
            }
          }
          *v16 = *v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v7 + 6);
          v10 = v14 + 2;
          v11 += 16;
          v12 = v13;
          v7 = v14;
        }
        while (v14 + 2 != a2);
      }
    }
  }
  return result;
}

double sub_20F626330(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, __n128 a8)
{
  double *v12;
  uint64_t v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double *v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double *v24;
  double v25;
  uint64_t v26;
  double v27;
  int v28;
  double *v29;
  double *i;
  uint64_t v31;
  int v32;
  double *v33;
  double *v34;
  double v35;
  int v36;
  _BOOL4 v37;
  double v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  double *v43;
  double v44;
  uint64_t v45;
  double *v46;
  double *v47;
  uint64_t v48;
  double *v49;
  double *v50;
  double *v51;
  double *v52;
  double v53;
  double *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  double *v58;
  int v59;
  double v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  double *v66;
  double *v67;

  if (!a5)
    return a8.n128_f64[0];
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return a8.n128_f64[0];
    v12 = 0;
    a8.n128_f64[0] = *a2;
    v13 = -a4;
    while (1)
    {
      v14 = *(double *)((char *)v12 + (_QWORD)a1);
      if (a8.n128_f64[0] < v14)
        break;
      v12 += 2;
      if (__CFADD__(v13++, 1))
        return a8.n128_f64[0];
    }
    v16 = -v13;
    if (-v13 >= a5)
    {
      if (v13 == -1)
      {
        v61 = (uint64_t)v12 + (_QWORD)a1;
        *(_QWORD *)v61 = a8.n128_u64[0];
        *a2 = v14;
        v62 = *(_DWORD *)(v61 + 8);
        *(_DWORD *)(v61 + 8) = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = v62;
        return a8.n128_f64[0];
      }
      if (v13 > 0)
        v16 = 1 - v13;
      v26 = v16 >> 1;
      v20 = (double *)((char *)&a1[2 * (v16 >> 1)] + (_QWORD)v12);
      v19 = a2;
      if (a2 != a3)
      {
        v40 = ((char *)a3 - (char *)a2) >> 4;
        v19 = a2;
        do
        {
          v41 = v40 >> 1;
          v42 = &v19[2 * (v40 >> 1)];
          v44 = *v42;
          v43 = v42 + 2;
          v40 += ~(v40 >> 1);
          if (v44 < *v20)
            v19 = v43;
          else
            v40 = v41;
        }
        while (v40);
      }
      v18 = ((char *)v19 - (char *)a2) >> 4;
      if (v20 != a2)
      {
LABEL_21:
        if (v19 == a2)
        {
          v29 = v20;
        }
        else
        {
          v27 = *v20;
          *v20 = a8.n128_f64[0];
          *a2 = v27;
          v28 = *((_DWORD *)v20 + 2);
          *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
          *((_DWORD *)a2 + 2) = v28;
          v29 = v20 + 2;
          for (i = a2 + 2; i != v19; i += 2)
          {
            if (v29 == a2)
              a2 = i;
            v31 = *(_QWORD *)v29;
            *v29 = *i;
            *(_QWORD *)i = v31;
            v32 = *((_DWORD *)v29 + 2);
            *((_DWORD *)v29 + 2) = *((_DWORD *)i + 2);
            *((_DWORD *)i + 2) = v32;
            v29 += 2;
          }
          if (v29 != a2)
          {
            v33 = v29;
            v34 = a2;
            while (1)
            {
              v35 = *v33;
              *v33 = *v34;
              *v34 = v35;
              v36 = *((_DWORD *)v33 + 2);
              *((_DWORD *)v33 + 2) = *((_DWORD *)v34 + 2);
              *((_DWORD *)v34 + 2) = v36;
              v33 += 2;
              v34 += 2;
              v37 = v33 == a2;
              if (v34 == v19)
              {
                if (v33 == a2)
                  goto LABEL_48;
                v34 = a2 + 2;
                while (1)
                {
                  v38 = *v33;
                  *v33 = *a2;
                  *a2 = v38;
                  v39 = *((_DWORD *)v33 + 2);
                  *((_DWORD *)v33 + 2) = *((_DWORD *)a2 + 2);
                  *((_DWORD *)a2 + 2) = v39;
                  v33 += 2;
                  v37 = v33 == a2;
                  if (v34 != v19)
                    break;
                  if (v33 == a2)
                    goto LABEL_48;
                }
              }
              if (v37)
                a2 = v34;
            }
          }
        }
        goto LABEL_48;
      }
    }
    else
    {
      if (a5 >= 0)
        v17 = a5;
      else
        v17 = a5 + 1;
      v18 = v17 >> 1;
      v19 = &a2[2 * (v17 >> 1)];
      v20 = a2;
      if ((double *)((char *)a2 - (char *)a1) != v12)
      {
        v21 = ((char *)a2 - (char *)a1 - (uint64_t)v12) >> 4;
        v20 = (double *)((char *)v12 + (_QWORD)a1);
        do
        {
          v22 = v21 >> 1;
          v23 = &v20[2 * (v21 >> 1)];
          v25 = *v23;
          v24 = v23 + 2;
          v21 += ~(v21 >> 1);
          if (*v19 < v25)
            v21 = v22;
          else
            v20 = v24;
        }
        while (v21);
      }
      v26 = ((char *)v20 - (char *)a1 - (uint64_t)v12) >> 4;
      if (v20 != a2)
        goto LABEL_21;
    }
    v29 = v19;
LABEL_48:
    a4 = -(v26 + v13);
    v45 = a5 - v18;
    if (v26 + v18 >= a5 - (v26 + v18) - v13)
    {
      v46 = a3;
      v47 = (double *)((char *)v12 + (_QWORD)a1);
      sub_20F626330(v29, v19, v46, a4, a5 - v18, a6, a7);
      a1 = v47;
      a2 = v20;
      a4 = v26;
      a3 = v29;
      a5 = v18;
      if (!v18)
        return a8.n128_f64[0];
    }
    else
    {
      sub_20F626330((char *)v12 + (_QWORD)a1, v20, v29, v26, v18, a6, a7);
      a1 = v29;
      a2 = v19;
      a5 = v45;
      if (!v45)
        return a8.n128_f64[0];
    }
  }
  if (a4 <= a5)
  {
    if (a1 != a2)
    {
      v55 = 0;
      do
      {
        a8 = *(__n128 *)&a1[v55];
        *(__n128 *)&a6[v55] = a8;
        v55 += 2;
      }
      while (&a1[v55] != a2);
      if (v55 * 8)
      {
        v56 = &a6[v55];
        v57 = (uint64_t)&a6[v55 - 2];
        while (a2 != a3)
        {
          a8.n128_f64[0] = *a2;
          v60 = *a6;
          if (*a2 >= *a6)
          {
            v58 = a6;
            a6 += 2;
            a8.n128_f64[0] = v60;
          }
          else
          {
            v58 = a2;
            a2 += 2;
          }
          v59 = *((_DWORD *)v58 + 2);
          *a1 = a8.n128_f64[0];
          *((_DWORD *)a1 + 2) = v59;
          a1 += 2;
          if (v56 == a6)
            return a8.n128_f64[0];
        }
        v65 = 0;
        do
        {
          v66 = &a1[v65];
          v67 = &a6[v65];
          a8.n128_f64[0] = a6[v65];
          *v66 = a8.n128_f64[0];
          *((_DWORD *)v66 + 2) = LODWORD(a6[v65 + 1]);
          v65 += 2;
        }
        while ((double *)v57 != v67);
      }
    }
  }
  else if (a3 != a2)
  {
    v48 = 0;
    do
    {
      a8 = *(__n128 *)&a2[v48];
      *(__n128 *)&a6[v48] = a8;
      v48 += 2;
    }
    while (&a2[v48] != a3);
    if (v48 * 8)
    {
      v49 = &a6[v48];
      v50 = a3 - 1;
      while (a2 != a1)
      {
        a8.n128_f64[0] = *(a2 - 2);
        v52 = v49 - 2;
        v53 = *(v49 - 2);
        if (v53 >= a8.n128_f64[0])
        {
          a8.n128_f64[0] = *(v49 - 2);
          v51 = v49;
          v49 -= 2;
          LODWORD(v51) = *((_DWORD *)v51 - 2);
          *(v50 - 1) = v53;
          *(_DWORD *)v50 = (_DWORD)v51;
          v50 -= 2;
          if (v52 == a6)
            return a8.n128_f64[0];
        }
        else
        {
          v54 = a2;
          a2 -= 2;
          LODWORD(v54) = *((_DWORD *)v54 - 2);
          *(v50 - 1) = a8.n128_f64[0];
          *(_DWORD *)v50 = (_DWORD)v54;
          v50 -= 2;
          if (v49 == a6)
            return a8.n128_f64[0];
        }
      }
      v63 = 0;
      do
      {
        v64 = &v50[v63];
        a8.n128_f64[0] = v49[v63 - 2];
        *(v64 - 1) = a8.n128_f64[0];
        *(_DWORD *)v64 = LODWORD(v49[v63 - 1]);
        v63 -= 2;
      }
      while (&v49[v63] != a6);
    }
  }
  return a8.n128_f64[0];
}

void sub_20F6267D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA016C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F6267E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA016C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F626818(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20F62682C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F626840()
{
  return 1;
}

float64x2_t sub_20F626848(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3)
{
  float64x2_t result;
  float64x2_t v4;

  result = vmulq_f64(*a2, a1[1]);
  v4 = vmulq_f64(a2[2], a1[3]);
  a3[1] = vmulq_f64(a2[1], a1[2]);
  a3[2] = v4;
  *a3 = result;
  return result;
}

float64x2_t sub_20F626878(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t result;

  v2 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  __asm { FMOV            V16.2D, #1.0 }
  v8 = vmulq_f64(a2[2], (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q16, a1[3]), (int8x16_t)vcgtq_f64(v2, vabsq_f64(a1[3]))));
  v9 = vmulq_f64(a2[1], (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q16, a1[2]), (int8x16_t)vcgtq_f64(v2, vabsq_f64(a1[2]))));
  result = vmulq_f64(*a2, (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q16, a1[1]), (int8x16_t)vcgtq_f64(v2, vabsq_f64(a1[1]))));
  *a2 = result;
  a2[1] = v9;
  a2[2] = v8;
  return result;
}

float64x2_t sub_20F6268F0(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3)
{
  float64x2_t v3;
  float64x2_t result;
  float64x2_t v10;

  v3 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  __asm { FMOV            V16.2D, #1.0 }
  result = vmulq_f64(*a2, (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q16, a1[1]), (int8x16_t)vcgtq_f64(v3, vabsq_f64(a1[1]))));
  v10 = vmulq_f64(a2[2], (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q16, a1[3]), (int8x16_t)vcgtq_f64(v3, vabsq_f64(a1[3]))));
  a3[1] = vmulq_f64(a2[1], (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q16, a1[2]), (int8x16_t)vcgtq_f64(v3, vabsq_f64(a1[2]))));
  a3[2] = v10;
  *a3 = result;
  return result;
}

float64x2_t sub_20F626968@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  uint64_t v6;

  v3 = vmulq_n_f64(a1[3], a3);
  v4 = vmulq_n_f64(a1[2], a3);
  result = vmulq_n_f64(a1[1], a3);
  *(float64_t *)a2 = result.f64[0];
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(float64_t *)(a2 + 56) = result.f64[1];
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(float64_t *)(a2 + 112) = v4.f64[0];
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(float64_t *)(a2 + 168) = v4.f64[1];
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(float64_t *)(a2 + 224) = v3.f64[0];
  *(_OWORD *)(a2 + 232) = 0u;
  v6 = a2 + 232;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(float64_t *)(v6 + 48) = v3.f64[1];
  return result;
}

float64x2_t sub_20F6269D8@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  v2 = vmulq_f64(a1[3], a1[3]);
  v3 = vmulq_f64(a1[2], a1[2]);
  result = vmulq_f64(a1[1], a1[1]);
  *(float64_t *)a2 = result.f64[0];
  *(float64_t *)(a2 + 56) = result.f64[1];
  *(float64_t *)(a2 + 112) = v3.f64[0];
  *(float64_t *)(a2 + 168) = v3.f64[1];
  *(float64_t *)(a2 + 224) = v2.f64[0];
  *(float64_t *)(a2 + 280) = v2.f64[1];
  return result;
}

double *sub_20F626A60@<X0>(double *result@<X0>, float64x2_t *a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;

  v2 = result[2];
  v3 = result[3];
  v4 = fabs(v2);
  v5 = 1.0 / v2;
  if (v4 >= 1.0e-15)
    v6 = v5;
  else
    v6 = 0.0;
  v7 = fabs(v3);
  v8 = 1.0 / v3;
  if (v7 >= 1.0e-15)
    v9 = v8;
  else
    v9 = 0.0;
  v10 = result[4];
  v11 = result[5];
  v12 = fabs(v10);
  v13 = 1.0 / v10;
  if (v12 >= 1.0e-15)
    v14 = v13;
  else
    v14 = 0.0;
  v15 = fabs(v11);
  v16 = 1.0 / v11;
  if (v15 >= 1.0e-15)
    v17 = v16;
  else
    v17 = 0.0;
  v18 = result[6];
  v19 = result[7];
  v20 = fabs(v18);
  v21 = 1.0 / v18;
  if (v20 >= 1.0e-15)
    v22 = v21;
  else
    v22 = 0.0;
  v23 = fabs(v19);
  v24 = 1.0 / v19;
  if (v23 >= 1.0e-15)
    v25 = v24;
  else
    v25 = 0.0;
  v26.f64[0] = 0.0;
  v26.f64[1] = v9;
  v27.f64[0] = 0.0;
  v27.f64[1] = v17;
  v28.f64[0] = 0.0;
  v28.f64[1] = v25;
  v29 = vaddq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v6, v6), (float64x2_t)0, v26), (float64x2_t)0);
  v30 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v6);
  *(double *)&v31 = v6 * 0.0;
  v32 = vaddq_f64(vmlaq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(v6 * 0.0), v26, v9), (float64x2_t)0);
  v33 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v9);
  v34 = vaddq_f64(vmlaq_f64(vmlaq_f64(v33, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v14), (float64x2_t)0, v27), (float64x2_t)0);
  v35 = vmlaq_f64(vmlaq_f64(vaddq_f64(v33, (float64x2_t)0), (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v28);
  v36 = vmlaq_f64((float64x2_t)v31, (float64x2_t)0, v26);
  v37 = vaddq_f64(v36, (float64x2_t)0);
  v38 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v14);
  v39 = vaddq_f64(vmlaq_n_f64(v38, v27, v17), (float64x2_t)0);
  v40 = vmlaq_f64(v38, (float64x2_t)0, v27);
  *a2 = v29;
  a2[1] = vaddq_f64(vmlaq_f64(vmlaq_f64(v30, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v14), (float64x2_t)0, v27), (float64x2_t)0);
  a2[4] = v34;
  a2[5] = v35;
  a2[2] = vmlaq_f64(vmlaq_f64(v30, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v28);
  a2[3] = v32;
  a2[6] = vaddq_f64(vmlaq_n_f64(v36, (float64x2_t)0, v14), (float64x2_t)0);
  a2[7] = vaddq_f64(vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v14, v14), (float64x2_t)0, v27), (float64x2_t)0);
  a2[10] = v39;
  a2[11] = vmlaq_f64(vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v17), (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v28);
  a2[8] = vmlaq_f64(vmlaq_f64(vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v14), (float64x2_t)0), (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), (float64x2_t)0, v28);
  a2[9] = vaddq_f64(vmlaq_n_f64(v37, (float64x2_t)0, v17), (float64x2_t)0);
  a2[12] = vaddq_f64(vmlaq_n_f64(v37, (float64x2_t)0, v22), (float64x2_t)0);
  a2[13] = vaddq_f64(vmlaq_n_f64(v40, (float64x2_t)0, v22), (float64x2_t)0);
  a2[16] = vmlaq_n_f64(vaddq_f64(v40, (float64x2_t)0), (float64x2_t)0, v25);
  a2[17] = vmlaq_n_f64(vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v22), v28, v25);
  a2[14] = vmlaq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)*(unint64_t *)&v22, v22), (float64x2_t)0, v28);
  a2[15] = vmlaq_n_f64(v37, (float64x2_t)0, v25);
  return result;
}

uint64_t sub_20F626C38(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(std::__shared_weak_count **)(i - 152);
      if (!v7)
        continue;
    }
    else
    {
LABEL_8:
      v7 = *(std::__shared_weak_count **)(i - 152);
      if (!v7)
        continue;
    }
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F626D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 504;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(std::__shared_weak_count **)(i - 304);
      if (!v7)
        continue;
    }
    else
    {
LABEL_8:
      v7 = *(std::__shared_weak_count **)(i - 304);
      if (!v7)
        continue;
    }
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20F626DE0(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DBA80;
  strcpy(v2, "cv3d::vio::VIOPoseFactor<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 32, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F626FD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F626FF4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  if ((__int128 *)a1 == a2)
    goto LABEL_21;
  v7 = (__int128 *)*((_QWORD *)a2 + 71);
  v8 = *((_QWORD *)a2 + 73);
  *(_QWORD *)(a1 + 584) = 0;
  v9 = v8 & 0x1FFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 576);
  if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) <= v10)
  {
    if (!v8)
      goto LABEL_21;
    v13 = *(_OWORD **)(a1 + 568);
  }
  else
  {
    v11 = a1 + 56;
    v12 = 2 * v10;
    if (v12 > v9)
      v9 = v12;
    *(_QWORD *)(a1 + 576) = v9;
    v13 = (_OWORD *)operator new[]();
    v14 = *(_QWORD *)(a1 + 568);
    if (v14 != v11 && v14)
      MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 568) = v13;
    v15 = *(_QWORD *)(a1 + 584);
    if (v15)
    {
      *(_QWORD *)(a1 + 584) = v15 + v8;
      memmove((char *)v13 + 8 * v8, v13, 8 * v15);
      memcpy(v13, v7, 8 * v8);
      goto LABEL_21;
    }
  }
  v16 = 0;
  v17 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v17 < 3)
  {
    v18 = (uint64_t *)v7;
  }
  else
  {
    v18 = (uint64_t *)v7;
    if ((unint64_t)((char *)v13 - (char *)v7) >= 0x20)
    {
      v19 = v17 + 1;
      v16 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      v18 = (uint64_t *)v7 + (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v20 = v13 + 1;
      v21 = v7 + 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      if (v19 == v16)
        goto LABEL_20;
    }
  }
  do
  {
    v24 = *v18++;
    *((_QWORD *)v13 + v16++) = v24;
  }
  while (v18 != (uint64_t *)((char *)v7 + 8 * v8));
LABEL_20:
  *(_QWORD *)(a1 + 584) = v16;
LABEL_21:
  *(_WORD *)(a1 + 592) = *((_WORD *)a2 + 296);
  v25 = (__int128 *)*((_QWORD *)a2 + 78);
  if (v25)
  {
    if (v25 == (__int128 *)((char *)a2 + 600))
    {
      v39 = v38;
      (*(void (**)(uint64_t, _QWORD *))(*((_QWORD *)a2 + 75) + 24))((uint64_t)a2 + 600, v38);
    }
    else
    {
      v39 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 16))(*((_QWORD *)a2 + 78));
    }
  }
  else
  {
    v39 = 0;
  }
  sub_20EDB40D8(v38, (_QWORD *)(a1 + 600));
  v26 = v39;
  if (v39 == v38)
  {
    v27 = 4;
    v26 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_31;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_31:
  v28 = (__int128 *)*((_QWORD *)a2 + 82);
  if (v28)
  {
    if (v28 == (__int128 *)((char *)a2 + 632))
    {
      v39 = v38;
      (*(void (**)(uint64_t, _QWORD *))(*((_QWORD *)a2 + 79) + 24))((uint64_t)a2 + 632, v38);
    }
    else
    {
      v39 = (_QWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v28 + 16))(v28);
    }
  }
  else
  {
    v39 = 0;
  }
  sub_20EDB40D8(v38, (_QWORD *)(a1 + 632));
  v29 = v39;
  if (v39 == v38)
  {
    v30 = 4;
    v29 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_41;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_41:
  v31 = (__int128 *)*((_QWORD *)a2 + 86);
  if (v31)
  {
    if (v31 == (__int128 *)((char *)a2 + 664))
    {
      v39 = v38;
      (*(void (**)(uint64_t, _QWORD *))(*((_QWORD *)a2 + 83) + 24))((uint64_t)a2 + 664, v38);
    }
    else
    {
      v39 = (_QWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v31 + 16))(v31);
    }
  }
  else
  {
    v39 = 0;
  }
  sub_20EDB40D8(v38, (_QWORD *)(a1 + 664));
  v32 = v39;
  if (v39 == v38)
  {
    v33 = 4;
    v32 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_51;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_51:
  v34 = (__int128 *)*((_QWORD *)a2 + 90);
  if (v34)
  {
    if (v34 == (__int128 *)((char *)a2 + 696))
    {
      v39 = v38;
      (*(void (**)(uint64_t, _QWORD *))(*((_QWORD *)a2 + 87) + 24))((uint64_t)a2 + 696, v38);
    }
    else
    {
      v39 = (_QWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
    }
  }
  else
  {
    v39 = 0;
  }
  sub_20F6273F0(v38, (_QWORD *)(a1 + 696));
  v35 = v39;
  if (v39 == v38)
  {
    v36 = 4;
    v35 = v38;
    goto LABEL_60;
  }
  if (v39)
  {
    v36 = 5;
LABEL_60:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  return a1;
}

_QWORD *sub_20F6273F0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F627584(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

double *sub_20F627590(uint64_t a1, double *a2, char a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  uint64_t v39;
  double v40;
  __n128 v41;
  __n128 v42;
  double v43;
  double v44;
  float64x2_t v45;
  double v46;
  double v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double *result;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  _QWORD v76[64];
  double *v77;
  __int128 v78;
  uint64_t v79;

  v77 = (double *)v76;
  v78 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v78 = v6;
    v7 = (double *)operator new[]();
    if (v77 != (double *)v76 && v77)
      MEMORY[0x212BC6368]();
    v77 = v7;
  }
  v8 = *a2;
  *((_QWORD *)&v78 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v79 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v79, v76);
  }
  else
  {
    v79 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v79, v76);
  }
  v16 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v17 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v18 = v77;
    v19 = v77[v17];
    if ((v16 & 1) == 0)
    {
      v20 = v17 - 1;
      if (v20 != v16)
      {
        sub_20E8FB210(v77, &v77[v20], &v77[v16]);
        v18 = v77;
      }
      v10 = 0.5;
      v19 = (v19 + v18[v20]) * 0.5;
    }
    v9.n128_f64[0] = sqrt(v19);
    v21 = v8 * v9.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v21 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v79 = a1 + 120;
      sub_20F62CB00((uint64_t)&v79, v76);
      goto LABEL_30;
    }
  }
  v79 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v79, v76, v9, v10, v11, v12, v13, v14, v15);
LABEL_30:
  v22 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v23 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v24 = v77;
    v25 = v77[v23];
    if ((v22 & 1) == 0)
    {
      v26 = v23 - 1;
      if (v26 != v22)
      {
        sub_20E8FB210(v77, &v77[v26], &v77[v22]);
        v24 = v77;
      }
      v25 = (v25 + v24[v26]) * 0.5;
    }
    v27 = v8 * sqrt(v25);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v27 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v79 = a1 + 120;
      sub_20F62D074((uint64_t)&v79, v76);
      goto LABEL_39;
    }
  }
  v79 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v79, v76);
LABEL_39:
  v35 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v36 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v37 = v77;
    v38 = v77[v36];
    if ((v35 & 1) == 0)
    {
      v39 = v36 - 1;
      if (v39 != v35)
      {
        sub_20E8FB210(v77, &v77[v39], &v77[v35]);
        v37 = v77;
      }
      v29 = 0.5;
      v38 = (v38 + v37[v39]) * 0.5;
    }
    v28 = sqrt(v38);
    v40 = v8 * v28;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v40 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v79 = a1 + 120;
      sub_20F62D57C((uint64_t)&v79, v76);
      goto LABEL_48;
    }
  }
  v79 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v79, v76, v28, v29, v30, v31, v32, v33, v34);
LABEL_48:
  v49 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v50 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v51 = v77;
    v52 = v77[v50];
    if ((v49 & 1) == 0)
    {
      v53 = v50 - 1;
      if (v53 != v49)
      {
        sub_20E8FB210(v77, &v77[v53], &v77[v49]);
        v51 = v77;
      }
      v42.n128_u64[0] = 0.5;
      v52 = (v52 + v51[v53]) * 0.5;
    }
    v41.n128_f64[0] = sqrt(v52);
    v54 = v8 * v41.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v54 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v79 = a1 + 120;
      sub_20F62DC70((uint64_t)&v79, v76);
      goto LABEL_57;
    }
  }
  v79 = a1 + 120;
  sub_20F62DE48((uint64_t)&v79, v76, v41, v42, v43, v44, v45, v46, v47, v48);
LABEL_57:
  v55 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v56 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v57 = v77;
    v58 = v77[v56];
    if ((v55 & 1) == 0)
    {
      v59 = v56 - 1;
      if (v59 != v55)
      {
        sub_20E8FB210(v77, &v77[v59], &v77[v55]);
        v57 = v77;
      }
      v58 = (v58 + v57[v59]) * 0.5;
    }
    v60 = v8 * sqrt(v58);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v60 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v79 = a1 + 120;
      sub_20F62E070((uint64_t)&v79, v76);
      goto LABEL_66;
    }
  }
  v79 = a1 + 120;
  sub_20F62E274((uint64_t)&v79, v76);
LABEL_66:
  v61 = *((_QWORD *)&v78 + 1);
  result = v77;
  if (!*((_QWORD *)&v78 + 1))
  {
    v66 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (v77 == (double *)v76)
      goto LABEL_76;
    goto LABEL_74;
  }
  v63 = *((_QWORD *)&v78 + 1) >> 1;
  sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
  result = v77;
  v64 = v77[v63];
  if ((v61 & 1) == 0)
  {
    v65 = v63 - 1;
    if (v65 != v61)
    {
      sub_20E8FB210(v77, &v77[v65], &v77[v61]);
      result = v77;
    }
    v64 = (v64 + result[v65]) * 0.5;
  }
  v66 = v8 * sqrt(v64);
  *((_QWORD *)&v78 + 1) = 0;
  if (result != (double *)v76)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v72 = 0x3DDB7CDFD9D7BDBBLL;
    v73 = 1.0e20;
    if (v21 > 0.0)
    {
      v72 = *(_QWORD *)&v21;
      v73 = 1.0 / (v21 * v21);
    }
    *(_QWORD *)(a1 + 8) = v72;
    *(double *)(a1 + 16) = v73;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v27 > 0.0)
    {
      *(double *)(a1 + 24) = v27;
      *(double *)(a1 + 32) = 1.0 / (v27 * v27);
      if (v40 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v54 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v40 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v40;
    *(double *)(a1 + 48) = 1.0 / (v40 * v40);
    if (v54 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v60 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v54;
    *(double *)(a1 + 64) = 1.0 / (v54 * v54);
    if (v60 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v60 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v74 = 1.0;
    v75 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v60;
  *(double *)(a1 + 80) = 1.0 / (v60 * v60);
  v74 = 1.0;
  v75 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v66 <= 0.0)
  {
    v75 = 1.0e20;
    v74 = 1.0e-10;
  }
  else
  {
    v74 = v66;
    v75 = 1.0 / (v66 * v66);
  }
LABEL_94:
  *(double *)(a1 + 104) = v74;
  *(double *)(a1 + 112) = v75;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F627CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double *sub_20F627D2C(uint64_t a1, double **a2, char a3)
{
  unint64_t v6;
  double *v7;
  __n128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  uint64_t v38;
  double v39;
  __n128 v40;
  __n128 v41;
  double v42;
  double v43;
  float64x2_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double *result;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  _QWORD v75[64];
  double *v76;
  __int128 v77;
  uint64_t v78;

  v76 = (double *)v75;
  v77 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v77 = v6;
    v7 = (double *)operator new[]();
    if (v76 != (double *)v75 && v76)
      MEMORY[0x212BC6368]();
    v76 = v7;
  }
  *((_QWORD *)&v77 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v78 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v78, v75);
  }
  else
  {
    v78 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v78, v75);
  }
  v15 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v16 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v17 = v76;
    v18 = v76[v16];
    if ((v15 & 1) == 0)
    {
      v19 = v16 - 1;
      if (v19 != v15)
      {
        sub_20E8FB210(v76, &v76[v19], &v76[v15]);
        v17 = v76;
      }
      v18 = (v18 + v17[v19]) * 0.5;
    }
    v8.n128_f64[0] = sqrt(v18);
    v9 = **a2;
    v20 = v8.n128_f64[0] * v9;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v20 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v78 = a1 + 120;
      sub_20F62CB00((uint64_t)&v78, v75);
      goto LABEL_30;
    }
  }
  v78 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v78, v75, v8, v9, v10, v11, v12, v13, v14);
LABEL_30:
  v21 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v22 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v23 = v76;
    v24 = v76[v22];
    if ((v21 & 1) == 0)
    {
      v25 = v22 - 1;
      if (v25 != v21)
      {
        sub_20E8FB210(v76, &v76[v25], &v76[v21]);
        v23 = v76;
      }
      v24 = (v24 + v23[v25]) * 0.5;
    }
    v26 = sqrt(v24) * (*a2)[1];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v26 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v78 = a1 + 120;
      sub_20F62D074((uint64_t)&v78, v75);
      goto LABEL_39;
    }
  }
  v78 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v78, v75);
LABEL_39:
  v34 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v35 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v36 = v76;
    v37 = v76[v35];
    if ((v34 & 1) == 0)
    {
      v38 = v35 - 1;
      if (v38 != v34)
      {
        sub_20E8FB210(v76, &v76[v38], &v76[v34]);
        v36 = v76;
      }
      v37 = (v37 + v36[v38]) * 0.5;
    }
    v27 = sqrt(v37);
    v28 = (*a2)[2];
    v39 = v27 * v28;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v39 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v78 = a1 + 120;
      sub_20F62D57C((uint64_t)&v78, v75);
      goto LABEL_48;
    }
  }
  v78 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v78, v75, v27, v28, v29, v30, v31, v32, v33);
LABEL_48:
  v48 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v49 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v50 = v76;
    v51 = v76[v49];
    if ((v48 & 1) == 0)
    {
      v52 = v49 - 1;
      if (v52 != v48)
      {
        sub_20E8FB210(v76, &v76[v52], &v76[v48]);
        v50 = v76;
      }
      v51 = (v51 + v50[v52]) * 0.5;
    }
    v40.n128_f64[0] = sqrt(v51);
    v41.n128_f64[0] = (*a2)[3];
    v53 = v40.n128_f64[0] * v41.n128_f64[0];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v53 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v78 = a1 + 120;
      sub_20F62DC70((uint64_t)&v78, v75);
      goto LABEL_57;
    }
  }
  v78 = a1 + 120;
  sub_20F62DE48((uint64_t)&v78, v75, v40, v41, v42, v43, v44, v45, v46, v47);
LABEL_57:
  v54 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v55 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v56 = v76;
    v57 = v76[v55];
    if ((v54 & 1) == 0)
    {
      v58 = v55 - 1;
      if (v58 != v54)
      {
        sub_20E8FB210(v76, &v76[v58], &v76[v54]);
        v56 = v76;
      }
      v57 = (v57 + v56[v58]) * 0.5;
    }
    v59 = sqrt(v57) * (*a2)[4];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v59 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v78 = a1 + 120;
      sub_20F62E070((uint64_t)&v78, v75);
      goto LABEL_66;
    }
  }
  v78 = a1 + 120;
  sub_20F62E274((uint64_t)&v78, v75);
LABEL_66:
  v60 = *((_QWORD *)&v77 + 1);
  result = v76;
  if (!*((_QWORD *)&v77 + 1))
  {
    v65 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (v76 == (double *)v75)
      goto LABEL_76;
    goto LABEL_74;
  }
  v62 = *((_QWORD *)&v77 + 1) >> 1;
  sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
  result = v76;
  v63 = v76[v62];
  if ((v60 & 1) == 0)
  {
    v64 = v62 - 1;
    if (v64 != v60)
    {
      sub_20E8FB210(v76, &v76[v64], &v76[v60]);
      result = v76;
    }
    v63 = (v63 + result[v64]) * 0.5;
  }
  v65 = sqrt(v63) * (*a2)[5];
  *((_QWORD *)&v77 + 1) = 0;
  if (result != (double *)v75)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v71 = 0x3DDB7CDFD9D7BDBBLL;
    v72 = 1.0e20;
    if (v20 > 0.0)
    {
      v71 = *(_QWORD *)&v20;
      v72 = 1.0 / (v20 * v20);
    }
    *(_QWORD *)(a1 + 8) = v71;
    *(double *)(a1 + 16) = v72;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v26 > 0.0)
    {
      *(double *)(a1 + 24) = v26;
      *(double *)(a1 + 32) = 1.0 / (v26 * v26);
      if (v39 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v53 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v39 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v39;
    *(double *)(a1 + 48) = 1.0 / (v39 * v39);
    if (v53 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v59 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v53;
    *(double *)(a1 + 64) = 1.0 / (v53 * v53);
    if (v59 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v59 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v73 = 1.0;
    v74 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v59;
  *(double *)(a1 + 80) = 1.0 / (v59 * v59);
  v73 = 1.0;
  v74 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v65 <= 0.0)
  {
    v74 = 1.0e20;
    v73 = 1.0e-10;
  }
  else
  {
    v73 = v65;
    v74 = 1.0 / (v65 * v65);
  }
LABEL_94:
  *(double *)(a1 + 104) = v73;
  *(double *)(a1 + 112) = v74;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F6284B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F6284F4(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _OWORD *v126;
  __int128 *v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  int64x2_t *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int64x2_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _OWORD *v163;
  __int128 *v164;
  unint64_t v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  __int128 *v197;
  unint64_t v198;
  __int128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _OWORD *v229;
  __int128 *v230;
  unint64_t v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  _OWORD *v262;
  __int128 *v263;
  unint64_t v264;
  __int128 v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _OWORD *v295;
  __int128 *v296;
  unint64_t v297;
  __int128 v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  _QWORD *v302;
  uint64_t v303;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _OWORD *v328;
  __int128 *v329;
  unint64_t v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _OWORD *v361;
  __int128 *v362;
  unint64_t v363;
  __int128 v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  _OWORD *v393;
  __int128 *v394;
  unint64_t v395;
  __int128 v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  _QWORD *v400;
  uint64_t v401;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;

  v1 = (_QWORD *)result;
  v412 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)result;
  v2 = *(_QWORD **)(result + 8);
  v4 = *(unsigned __int8 *)(*(_QWORD *)result + 1096);
  if (*(_BYTE *)(*(_QWORD *)result + 1096) || (result = sub_20F5BB998((_QWORD *)(v3 + 120)), !(_DWORD)result))
  {
    v7 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(v3 + 904) - *(_QWORD *)(v3 + 896)) >> 3);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 896);
    v6 = *(_QWORD *)(v3 + 904);
    if (v5 == v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v5 + 208) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) == 0)
          v7 = ++v8;
        v5 += 504;
      }
      while (v5 != v6);
    }
  }
  v9 = v2 + 145;
  v2[144] += v7;
  v10 = v2[211];
  v11 = v10 + 1;
  v12 = v2[210];
  if (v10 + 1 <= v12)
  {
    v16 = v2[209];
    *(_QWORD *)(v16 + 8 * v10) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
    {
LABEL_37:
      v32 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v3 + 928) - *(_QWORD *)(v3 + 920)) >> 3);
      goto LABEL_38;
    }
  }
  else
  {
    v13 = 2 * v12;
    if (v13 > v11)
      v11 = v13;
    v2[210] = v11;
    v14 = v2[209];
    v15 = operator new[]();
    v16 = v15;
    if (v10)
    {
      v17 = 0;
      if (v10 < 4)
        goto LABEL_20;
      if ((unint64_t)(v15 - v14) < 0x20)
        goto LABEL_20;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (_OWORD *)(v15 + 16);
      v19 = (__int128 *)(v14 + 16);
      v20 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v10 != v17)
      {
LABEL_20:
        v22 = v10 - v17;
        v23 = 8 * v17;
        v24 = (uint64_t *)(v14 + 8 * v17);
        v25 = (_QWORD *)(v15 + v23);
        do
        {
          v26 = *v24++;
          *v25++ = v26;
          --v22;
        }
        while (v22);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v16;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v16 + 8 * v2[211]) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
      goto LABEL_37;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_37;
  v30 = *(_QWORD *)(v3 + 920);
  v31 = *(_QWORD *)(v3 + 928);
  if (v30 == v31)
  {
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v30 + 136) + 4) & 6) == 0)
        v32 = ++v33;
      v30 += 280;
    }
    while (v30 != v31);
  }
LABEL_38:
  v2[144] += v32;
  v34 = v28 + 2;
  v35 = v2[210];
  if (v28 + 2 <= v35)
  {
    v38 = v16;
    *(_QWORD *)(v16 + 8 * v29) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
    {
LABEL_68:
      v54 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(v3 + 952) - *(_QWORD *)(v3 + 944)) >> 4);
      goto LABEL_69;
    }
  }
  else
  {
    v36 = 2 * v35;
    if (v36 > v34)
      v34 = v36;
    v2[210] = v34;
    v37 = operator new[]();
    v38 = v37;
    if (v29)
    {
      v39 = 0;
      if (v29 < 4)
        goto LABEL_47;
      if ((unint64_t)(v37 - v16) < 0x20)
        goto LABEL_47;
      v39 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      v40 = (_OWORD *)(v37 + 16);
      v41 = (__int128 *)(v16 + 16);
      v42 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (v29 != v39)
      {
LABEL_47:
        v44 = v28 - v39 + 1;
        v45 = 8 * v39;
        v46 = (uint64_t *)(v16 + 8 * v39);
        v47 = (_QWORD *)(v37 + v45);
        do
        {
          v48 = *v46++;
          *v47++ = v48;
          --v44;
        }
        while (v44);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v38;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v38 + 8 * v2[211]) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
      goto LABEL_68;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_68;
  v52 = *(_QWORD **)(v3 + 944);
  v53 = *(_QWORD **)(v3 + 952);
  if (v52 == v53)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    do
    {
      if ((*(_BYTE *)(v52[962] + 4) & 6) == 0
        && (*(_BYTE *)(v52[963] + 4) & 6) == 0
        && (*(_BYTE *)(v52[964] + 4) & 6) == 0
        && (*(_BYTE *)(v52[965] + 4) & 6) == 0
        && (*(_BYTE *)(v52[966] + 4) & 6) == 0)
      {
        v54 = ++v55;
      }
      v52 += 1002;
    }
    while (v52 != v53);
  }
LABEL_69:
  v2[144] += v54;
  v56 = v50 + 2;
  v57 = v2[210];
  if (v50 + 2 <= v57)
  {
    v60 = v38;
    *(_QWORD *)(v38 + 8 * v51) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
    {
LABEL_98:
      v76 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(v3 + 976) - *(_QWORD *)(v3 + 968)) >> 3);
      goto LABEL_99;
    }
  }
  else
  {
    v58 = 2 * v57;
    if (v58 > v56)
      v56 = v58;
    v2[210] = v56;
    v59 = operator new[]();
    v60 = v59;
    if (v51)
    {
      v61 = 0;
      if (v51 < 4)
        goto LABEL_78;
      if ((unint64_t)(v59 - v38) < 0x20)
        goto LABEL_78;
      v61 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      v62 = (_OWORD *)(v59 + 16);
      v63 = (__int128 *)(v38 + 16);
      v64 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v65 = *v63;
        *(v62 - 1) = *(v63 - 1);
        *v62 = v65;
        v62 += 2;
        v63 += 2;
        v64 -= 4;
      }
      while (v64);
      if (v51 != v61)
      {
LABEL_78:
        v66 = v50 - v61 + 1;
        v67 = 8 * v61;
        v68 = (uint64_t *)(v38 + 8 * v61);
        v69 = (_QWORD *)(v59 + v67);
        do
        {
          v70 = *v68++;
          *v69++ = v70;
          --v66;
        }
        while (v66);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v60;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v60 + 8 * v2[211]) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
      goto LABEL_98;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_98;
  v74 = *(_QWORD **)(v3 + 968);
  v75 = *(_QWORD **)(v3 + 976);
  if (v74 == v75)
  {
    v76 = 0;
  }
  else
  {
    v76 = 0;
    v77 = 0;
    do
    {
      if ((*(_BYTE *)(v74[628] + 4) & 6) == 0
        && (*(_BYTE *)(v74[629] + 4) & 6) == 0
        && (*(_BYTE *)(v74[630] + 4) & 6) == 0
        && (*(_BYTE *)(v74[631] + 4) & 6) == 0)
      {
        v76 = ++v77;
      }
      v74 += 667;
    }
    while (v74 != v75);
  }
LABEL_99:
  v2[144] += v76;
  v78 = v72 + 2;
  v79 = v2[210];
  if (v72 + 2 <= v79)
  {
    v82 = v60;
    *(_QWORD *)(v60 + 8 * v73) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  else
  {
    v80 = 2 * v79;
    if (v80 > v78)
      v78 = v80;
    v2[210] = v78;
    v81 = operator new[]();
    v82 = v81;
    if (v73)
    {
      v83 = 0;
      if (v73 < 4)
        goto LABEL_108;
      if ((unint64_t)(v81 - v60) < 0x20)
        goto LABEL_108;
      v83 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      v84 = (_OWORD *)(v81 + 16);
      v85 = (__int128 *)(v60 + 16);
      v86 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v87 = *v85;
        *(v84 - 1) = *(v85 - 1);
        *v84 = v87;
        v84 += 2;
        v85 += 2;
        v86 -= 4;
      }
      while (v86);
      if (v73 != v83)
      {
LABEL_108:
        v88 = v72 - v83 + 1;
        v89 = 8 * v83;
        v90 = (uint64_t *)(v60 + 8 * v83);
        v91 = (_QWORD *)(v81 + v89);
        do
        {
          v92 = *v90++;
          *v91++ = v92;
          --v88;
        }
        while (v88);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v82;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v82 + 8 * v2[211]) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if ((_DWORD)result)
  {
    result = (uint64_t)sub_20F5BBAFC(*(_QWORD **)(v3 + 992), *(_QWORD **)(v3 + 1000), (uint64_t)&v403);
    v96 = v411;
    goto LABEL_121;
  }
LABEL_120:
  v96 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v3 + 1000) - *(_QWORD *)(v3 + 992)) >> 3);
LABEL_121:
  v2[144] += v96;
  v97 = v94 + 2;
  v98 = v2[210];
  if (v94 + 2 <= v98)
  {
    v101 = v82;
    *(_QWORD *)(v82 + 8 * v95) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v4)
    {
LABEL_148:
      v118 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(v3 + 1024) - *(_QWORD *)(v3 + 1016)) >> 3);
      goto LABEL_149;
    }
  }
  else
  {
    v99 = 2 * v98;
    if (v99 > v97)
      v97 = v99;
    v2[210] = v97;
    v100 = operator new[]();
    v101 = v100;
    if (v95)
    {
      v102 = 0;
      if (v95 < 4)
        goto LABEL_130;
      if ((unint64_t)(v100 - v82) < 0x20)
        goto LABEL_130;
      v102 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      v103 = (_OWORD *)(v100 + 16);
      v104 = (__int128 *)(v82 + 16);
      v105 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v106 = *v104;
        *(v103 - 1) = *(v104 - 1);
        *v103 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v95 != v102)
      {
LABEL_130:
        v107 = v94 - v102 + 1;
        v108 = 8 * v102;
        v109 = (uint64_t *)(v82 + 8 * v102);
        v110 = (_QWORD *)(v100 + v108);
        do
        {
          v111 = *v109++;
          *v110++ = v111;
          --v107;
        }
        while (v107);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v101;
    v113 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v101 + 8 * v2[211]) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v113)
      goto LABEL_148;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_148;
  v116 = *(_QWORD *)(v3 + 1016);
  v117 = *(_QWORD *)(v3 + 1024);
  if (v116 == v117)
  {
    v118 = 0;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v116 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v116 + 744) + 4) & 6) == 0)
        v118 = ++v119;
      v116 += 888;
    }
    while (v116 != v117);
  }
LABEL_149:
  v2[144] += v118;
  v120 = v114 + 2;
  v121 = v2[210];
  if (v114 + 2 <= v121)
  {
    v124 = v101;
  }
  else
  {
    v122 = 2 * v121;
    if (v122 > v120)
      v120 = v122;
    v2[210] = v120;
    v123 = operator new[]();
    v124 = v123;
    if (v115)
    {
      v125 = 0;
      if (v115 < 4)
        goto LABEL_158;
      if ((unint64_t)(v123 - v101) < 0x20)
        goto LABEL_158;
      v125 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      v126 = (_OWORD *)(v123 + 16);
      v127 = (__int128 *)(v101 + 16);
      v128 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v129 = *v127;
        *(v126 - 1) = *(v127 - 1);
        *v126 = v129;
        v126 += 2;
        v127 += 2;
        v128 -= 4;
      }
      while (v128);
      if (v115 != v125)
      {
LABEL_158:
        v130 = v114 - v125 + 1;
        v131 = 8 * v125;
        v132 = (uint64_t *)(v101 + 8 * v125);
        v133 = (_QWORD *)(v123 + v131);
        do
        {
          v134 = *v132++;
          *v133++ = v134;
          --v130;
        }
        while (v130);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v124;
    v115 = v2[211];
  }
  *(_QWORD *)(v124 + 8 * v115) = v118;
  ++v2[211];
  v137 = *v1;
  v136 = (int64x2_t *)v1[1];
  v138 = (_QWORD *)(*v1 + 120);
  if (*(_BYTE *)(v137 + 1096))
  {
    v139 = *(_QWORD *)(v137 + 128);
    v140 = *(_QWORD *)(v137 + 136);
    if (v139 == v140)
    {
      v141 = 0;
    }
    else
    {
      v141 = 0;
      do
      {
        v142 = *(_QWORD *)(v139 + 8);
        if ((*(_BYTE *)(v142 + 4) & 6) == 0)
          v141 += *(unsigned __int8 *)(v142 + 20);
        v139 += 16;
      }
      while (v139 != v140);
    }
  }
  else
  {
    result = sub_20F62E4C0(v138, &v403);
    if ((_DWORD)result)
    {
      *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
      *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
      *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
      *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
      *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
      *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
      *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
      *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
      v143 = *(_QWORD *)(v137 + 896);
      v144 = *(_QWORD *)(v137 + 904);
      while (v143 != v144)
      {
        v145 = *(_QWORD *)(v143 + 208);
        if (*(_BYTE *)(v143 + 496)
          || (*(_BYTE *)(v145 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v143 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v145);
          sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v143 + 216));
        }
        v143 += 504;
      }
      v146 = *(_QWORD *)(v137 + 920);
      v147 = *(_QWORD *)(v137 + 928);
      while (v146 != v147)
      {
        v148 = *(_QWORD *)(v146 + 136);
        if (*(_BYTE *)(v146 + 272) || (*(_BYTE *)(v148 + 4) & 6) != 0)
          sub_20F394A20(v137 + 1680, v148);
        v146 += 280;
      }
      sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
      sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
      sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
      v149 = *(_QWORD *)(v137 + 1016);
      v150 = *(_QWORD *)(v137 + 1024);
      while (v149 != v150)
      {
        v151 = *(_QWORD *)(v149 + 736);
        if (*(_BYTE *)(v149 + 880)
          || (*(_BYTE *)(v151 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v149 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v151);
          sub_20F394A20(v137 + 1680, *(_QWORD *)(v149 + 744));
        }
        v149 += 888;
      }
      v152 = (uint64_t)(*(_QWORD *)(v137 + 1688) - *(_QWORD *)(v137 + 1680)) >> 2;
      if (v152 <= v403)
        v141 = v403 - v152;
      else
        v141 = 0;
      result = sub_20F59A618(v138);
    }
    else
    {
      v141 = v403;
    }
  }
  v153 = v136 + 107;
  v154 = v141;
  v136[106].i64[0] += v141;
  v136[106].i64[1] += 6 * v141;
  v155 = v136[140].u64[0];
  v156 = v155 + 1;
  v157 = v136[139].u64[1];
  if (v155 + 1 <= v157)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v155) = v141;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_218:
      v174 = *(_QWORD *)(v137 + 224);
      v175 = *(_QWORD *)(v137 + 232);
      if (v174 == v175)
      {
        v176 = 0;
      }
      else
      {
        v176 = 0;
        do
        {
          v177 = *(_QWORD *)(v174 + 8);
          if ((*(_BYTE *)(v177 + 4) & 6) == 0)
            v176 += *(unsigned __int8 *)(v177 + 20);
          v174 += 16;
        }
        while (v174 != v175);
      }
      goto LABEL_252;
    }
  }
  else
  {
    v158 = 2 * v157;
    if (v158 > v156)
      v156 = v158;
    v136[139].i64[1] = v156;
    v159 = v136[139].i64[0];
    v160 = operator new[]();
    v161 = v160;
    if (v155)
    {
      v162 = 0;
      if (v155 < 4)
        goto LABEL_210;
      if ((unint64_t)(v160 - v159) < 0x20)
        goto LABEL_210;
      v162 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      v163 = (_OWORD *)(v160 + 16);
      v164 = (__int128 *)(v159 + 16);
      v165 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v166 = *v164;
        *(v163 - 1) = *(v164 - 1);
        *v163 = v166;
        v163 += 2;
        v164 += 2;
        v165 -= 4;
      }
      while (v165);
      if (v155 != v162)
      {
LABEL_210:
        v167 = v155 - v162;
        v168 = 8 * v162;
        v169 = (uint64_t *)(v159 + 8 * v162);
        v170 = (_QWORD *)(v160 + v168);
        do
        {
          v171 = *v169++;
          *v170++ = v171;
          --v167;
        }
        while (v167);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v161;
    *(_QWORD *)(v161 + 8 * v136[140].i64[0]) = v154;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_218;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v178 = *(_QWORD *)(v137 + 896);
    v179 = *(_QWORD *)(v137 + 904);
    while (v178 != v179)
    {
      v180 = *(_QWORD *)(v178 + 208);
      if (*(_BYTE *)(v178 + 496)
        || (*(_BYTE *)(v180 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v178 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v180);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v178 + 216));
      }
      v178 += 504;
    }
    v181 = *(_QWORD *)(v137 + 920);
    v182 = *(_QWORD *)(v137 + 928);
    while (v181 != v182)
    {
      v183 = *(_QWORD *)(v181 + 136);
      if (*(_BYTE *)(v181 + 272) || (*(_BYTE *)(v183 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v183);
      v181 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v184 = *(_QWORD *)(v137 + 1016);
    v185 = *(_QWORD *)(v137 + 1024);
    while (v184 != v185)
    {
      v186 = *(_QWORD *)(v184 + 736);
      if (*(_BYTE *)(v184 + 880)
        || (*(_BYTE *)(v186 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v184 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v186);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v184 + 744));
      }
      v184 += 888;
    }
    v187 = (uint64_t)(*(_QWORD *)(v137 + 1712) - *(_QWORD *)(v137 + 1704)) >> 2;
    if (v187 <= v404)
      v176 = v404 - v187;
    else
      v176 = 0;
    result = sub_20F59A618(v138);
    v173 = v136[140].u64[0];
  }
  else
  {
    v176 = v404;
  }
LABEL_252:
  v188 = v176;
  v136[106].i64[0] += v176;
  v136[106].i64[1] += 9 * v176;
  v189 = v173 + 1;
  v190 = v136[139].u64[1];
  if (v173 + 1 <= v190)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v173) = v176;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_269:
      v207 = *(_QWORD *)(v137 + 320);
      v208 = *(_QWORD *)(v137 + 328);
      if (v207 == v208)
      {
        v209 = 0;
      }
      else
      {
        v209 = 0;
        do
        {
          v210 = *(_QWORD *)(v207 + 8);
          if ((*(_BYTE *)(v210 + 4) & 6) == 0)
            v209 += *(unsigned __int8 *)(v210 + 20);
          v207 += 16;
        }
        while (v207 != v208);
      }
      goto LABEL_303;
    }
  }
  else
  {
    v191 = 2 * v190;
    if (v191 > v189)
      v189 = v191;
    v136[139].i64[1] = v189;
    v192 = v136[139].i64[0];
    v193 = operator new[]();
    v194 = v193;
    if (v173)
    {
      v195 = 0;
      if (v173 < 4)
        goto LABEL_261;
      if ((unint64_t)(v193 - v192) < 0x20)
        goto LABEL_261;
      v195 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      v196 = (_OWORD *)(v193 + 16);
      v197 = (__int128 *)(v192 + 16);
      v198 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v199 = *v197;
        *(v196 - 1) = *(v197 - 1);
        *v196 = v199;
        v196 += 2;
        v197 += 2;
        v198 -= 4;
      }
      while (v198);
      if (v173 != v195)
      {
LABEL_261:
        v200 = v173 - v195;
        v201 = 8 * v195;
        v202 = (uint64_t *)(v192 + 8 * v195);
        v203 = (_QWORD *)(v193 + v201);
        do
        {
          v204 = *v202++;
          *v203++ = v204;
          --v200;
        }
        while (v200);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v194;
    *(_QWORD *)(v194 + 8 * v136[140].i64[0]) = v188;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_269;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v211 = *(_QWORD *)(v137 + 896);
    v212 = *(_QWORD *)(v137 + 904);
    while (v211 != v212)
    {
      v213 = *(_QWORD *)(v211 + 208);
      if (*(_BYTE *)(v211 + 496)
        || (*(_BYTE *)(v213 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v211 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v213);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v211 + 216));
      }
      v211 += 504;
    }
    v214 = *(_QWORD *)(v137 + 920);
    v215 = *(_QWORD *)(v137 + 928);
    while (v214 != v215)
    {
      v216 = *(_QWORD *)(v214 + 136);
      if (*(_BYTE *)(v214 + 272) || (*(_BYTE *)(v216 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v216);
      v214 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v217 = *(_QWORD *)(v137 + 1016);
    v218 = *(_QWORD *)(v137 + 1024);
    while (v217 != v218)
    {
      v219 = *(_QWORD *)(v217 + 736);
      if (*(_BYTE *)(v217 + 880)
        || (*(_BYTE *)(v219 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v217 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v219);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v217 + 744));
      }
      v217 += 888;
    }
    v220 = (uint64_t)(*(_QWORD *)(v137 + 1736) - *(_QWORD *)(v137 + 1728)) >> 2;
    if (v220 <= v405)
      v209 = v405 - v220;
    else
      v209 = 0;
    result = sub_20F59A618(v138);
    v206 = v136[140].u64[0];
  }
  else
  {
    v209 = v405;
  }
LABEL_303:
  v221 = v209;
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v209));
  v222 = v206 + 1;
  v223 = v136[139].u64[1];
  if (v206 + 1 <= v223)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v206) = v209;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_320:
      v240 = *(_QWORD *)(v137 + 416);
      v241 = *(_QWORD *)(v137 + 424);
      if (v240 == v241)
      {
        v242 = 0;
      }
      else
      {
        v242 = 0;
        do
        {
          v243 = *(_QWORD *)(v240 + 8);
          if ((*(_BYTE *)(v243 + 4) & 6) == 0)
            v242 += *(unsigned __int8 *)(v243 + 20);
          v240 += 16;
        }
        while (v240 != v241);
      }
      goto LABEL_354;
    }
  }
  else
  {
    v224 = 2 * v223;
    if (v224 > v222)
      v222 = v224;
    v136[139].i64[1] = v222;
    v225 = v136[139].i64[0];
    v226 = operator new[]();
    v227 = v226;
    if (v206)
    {
      v228 = 0;
      if (v206 < 4)
        goto LABEL_312;
      if ((unint64_t)(v226 - v225) < 0x20)
        goto LABEL_312;
      v228 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      v229 = (_OWORD *)(v226 + 16);
      v230 = (__int128 *)(v225 + 16);
      v231 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v232 = *v230;
        *(v229 - 1) = *(v230 - 1);
        *v229 = v232;
        v229 += 2;
        v230 += 2;
        v231 -= 4;
      }
      while (v231);
      if (v206 != v228)
      {
LABEL_312:
        v233 = v206 - v228;
        v234 = 8 * v228;
        v235 = (uint64_t *)(v225 + 8 * v228);
        v236 = (_QWORD *)(v226 + v234);
        do
        {
          v237 = *v235++;
          *v236++ = v237;
          --v233;
        }
        while (v233);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v227;
    *(_QWORD *)(v227 + 8 * v136[140].i64[0]) = v221;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_320;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v244 = *(_QWORD *)(v137 + 896);
    v245 = *(_QWORD *)(v137 + 904);
    while (v244 != v245)
    {
      v246 = *(_QWORD *)(v244 + 208);
      if (*(_BYTE *)(v244 + 496)
        || (*(_BYTE *)(v246 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v244 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v246);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v244 + 216));
      }
      v244 += 504;
    }
    v247 = *(_QWORD *)(v137 + 920);
    v248 = *(_QWORD *)(v137 + 928);
    while (v247 != v248)
    {
      v249 = *(_QWORD *)(v247 + 136);
      if (*(_BYTE *)(v247 + 272) || (*(_BYTE *)(v249 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v249);
      v247 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v250 = *(_QWORD *)(v137 + 1016);
    v251 = *(_QWORD *)(v137 + 1024);
    while (v250 != v251)
    {
      v252 = *(_QWORD *)(v250 + 736);
      if (*(_BYTE *)(v250 + 880)
        || (*(_BYTE *)(v252 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v250 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v252);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v250 + 744));
      }
      v250 += 888;
    }
    v253 = (uint64_t)(*(_QWORD *)(v137 + 1760) - *(_QWORD *)(v137 + 1752)) >> 2;
    if (v253 <= v406)
      v242 = v406 - v253;
    else
      v242 = 0;
    result = sub_20F59A618(v138);
    v239 = v136[140].u64[0];
  }
  else
  {
    v242 = v406;
  }
LABEL_354:
  v254 = v242;
  v136[106].i64[0] += v242;
  v136[106].i64[1] += 6 * v242;
  v255 = v239 + 1;
  v256 = v136[139].u64[1];
  if (v239 + 1 <= v256)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v239) = v242;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_371:
      v273 = *(_QWORD *)(v137 + 512);
      v274 = *(_QWORD *)(v137 + 520);
      if (v273 == v274)
      {
        v275 = 0;
      }
      else
      {
        v275 = 0;
        do
        {
          v276 = *(_QWORD *)(v273 + 8);
          if ((*(_BYTE *)(v276 + 4) & 6) == 0)
            v275 += *(unsigned __int8 *)(v276 + 20);
          v273 += 16;
        }
        while (v273 != v274);
      }
      goto LABEL_405;
    }
  }
  else
  {
    v257 = 2 * v256;
    if (v257 > v255)
      v255 = v257;
    v136[139].i64[1] = v255;
    v258 = v136[139].i64[0];
    v259 = operator new[]();
    v260 = v259;
    if (v239)
    {
      v261 = 0;
      if (v239 < 4)
        goto LABEL_363;
      if ((unint64_t)(v259 - v258) < 0x20)
        goto LABEL_363;
      v261 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      v262 = (_OWORD *)(v259 + 16);
      v263 = (__int128 *)(v258 + 16);
      v264 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v265 = *v263;
        *(v262 - 1) = *(v263 - 1);
        *v262 = v265;
        v262 += 2;
        v263 += 2;
        v264 -= 4;
      }
      while (v264);
      if (v239 != v261)
      {
LABEL_363:
        v266 = v239 - v261;
        v267 = 8 * v261;
        v268 = (uint64_t *)(v258 + 8 * v261);
        v269 = (_QWORD *)(v259 + v267);
        do
        {
          v270 = *v268++;
          *v269++ = v270;
          --v266;
        }
        while (v266);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v260;
    *(_QWORD *)(v260 + 8 * v136[140].i64[0]) = v254;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_371;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v277 = *(_QWORD *)(v137 + 896);
    v278 = *(_QWORD *)(v137 + 904);
    while (v277 != v278)
    {
      v279 = *(_QWORD *)(v277 + 208);
      if (*(_BYTE *)(v277 + 496)
        || (*(_BYTE *)(v279 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v277 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v279);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v277 + 216));
      }
      v277 += 504;
    }
    v280 = *(_QWORD *)(v137 + 920);
    v281 = *(_QWORD *)(v137 + 928);
    while (v280 != v281)
    {
      v282 = *(_QWORD *)(v280 + 136);
      if (*(_BYTE *)(v280 + 272) || (*(_BYTE *)(v282 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v282);
      v280 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v283 = *(_QWORD *)(v137 + 1016);
    v284 = *(_QWORD *)(v137 + 1024);
    while (v283 != v284)
    {
      v285 = *(_QWORD *)(v283 + 736);
      if (*(_BYTE *)(v283 + 880)
        || (*(_BYTE *)(v285 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v283 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v285);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v283 + 744));
      }
      v283 += 888;
    }
    v286 = (uint64_t)(*(_QWORD *)(v137 + 1784) - *(_QWORD *)(v137 + 1776)) >> 2;
    if (v286 <= v407)
      v275 = v407 - v286;
    else
      v275 = 0;
    result = sub_20F59A618(v138);
    v272 = v136[140].u64[0];
  }
  else
  {
    v275 = v407;
  }
LABEL_405:
  v287 = v275;
  v136[106].i64[0] += v275;
  v136[106].i64[1] += 4 * v275;
  v288 = v272 + 1;
  v289 = v136[139].u64[1];
  if (v272 + 1 <= v289)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v272) = v275;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_422:
      v306 = *(_QWORD *)(v137 + 608);
      v307 = *(_QWORD *)(v137 + 616);
      if (v306 == v307)
      {
        v308 = 0;
      }
      else
      {
        v308 = 0;
        do
        {
          v309 = *(_QWORD *)(v306 + 8);
          if ((*(_BYTE *)(v309 + 4) & 6) == 0)
            v308 += *(unsigned __int8 *)(v309 + 20);
          v306 += 16;
        }
        while (v306 != v307);
      }
      goto LABEL_456;
    }
  }
  else
  {
    v290 = 2 * v289;
    if (v290 > v288)
      v288 = v290;
    v136[139].i64[1] = v288;
    v291 = v136[139].i64[0];
    v292 = operator new[]();
    v293 = v292;
    if (v272)
    {
      v294 = 0;
      if (v272 < 4)
        goto LABEL_414;
      if ((unint64_t)(v292 - v291) < 0x20)
        goto LABEL_414;
      v294 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      v295 = (_OWORD *)(v292 + 16);
      v296 = (__int128 *)(v291 + 16);
      v297 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v298 = *v296;
        *(v295 - 1) = *(v296 - 1);
        *v295 = v298;
        v295 += 2;
        v296 += 2;
        v297 -= 4;
      }
      while (v297);
      if (v272 != v294)
      {
LABEL_414:
        v299 = v272 - v294;
        v300 = 8 * v294;
        v301 = (uint64_t *)(v291 + 8 * v294);
        v302 = (_QWORD *)(v292 + v300);
        do
        {
          v303 = *v301++;
          *v302++ = v303;
          --v299;
        }
        while (v299);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v293;
    *(_QWORD *)(v293 + 8 * v136[140].i64[0]) = v287;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_422;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v310 = *(_QWORD *)(v137 + 896);
    v311 = *(_QWORD *)(v137 + 904);
    while (v310 != v311)
    {
      v312 = *(_QWORD *)(v310 + 208);
      if (*(_BYTE *)(v310 + 496)
        || (*(_BYTE *)(v312 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v310 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v312);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v310 + 216));
      }
      v310 += 504;
    }
    v313 = *(_QWORD *)(v137 + 920);
    v314 = *(_QWORD *)(v137 + 928);
    while (v313 != v314)
    {
      v315 = *(_QWORD *)(v313 + 136);
      if (*(_BYTE *)(v313 + 272) || (*(_BYTE *)(v315 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v315);
      v313 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v316 = *(_QWORD *)(v137 + 1016);
    v317 = *(_QWORD *)(v137 + 1024);
    while (v316 != v317)
    {
      v318 = *(_QWORD *)(v316 + 736);
      if (*(_BYTE *)(v316 + 880)
        || (*(_BYTE *)(v318 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v316 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v318);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v316 + 744));
      }
      v316 += 888;
    }
    v319 = (uint64_t)(*(_QWORD *)(v137 + 1808) - *(_QWORD *)(v137 + 1800)) >> 2;
    if (v319 <= v408)
      v308 = v408 - v319;
    else
      v308 = 0;
    result = sub_20F59A618(v138);
    v305 = v136[140].u64[0];
  }
  else
  {
    v308 = v408;
  }
LABEL_456:
  v320 = v308;
  v136[106].i64[0] += v308;
  v136[106].i64[1] += 4 * v308;
  v321 = v305 + 1;
  v322 = v136[139].u64[1];
  if (v305 + 1 <= v322)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v305) = v308;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_473:
      v339 = *(_QWORD *)(v137 + 704);
      v340 = *(_QWORD *)(v137 + 712);
      if (v339 == v340)
      {
        v341 = 0;
      }
      else
      {
        v341 = 0;
        do
        {
          v342 = *(_QWORD *)(v339 + 8);
          if ((*(_BYTE *)(v342 + 4) & 6) == 0)
            v341 += *(unsigned __int8 *)(v342 + 20);
          v339 += 16;
        }
        while (v339 != v340);
      }
      goto LABEL_507;
    }
  }
  else
  {
    v323 = 2 * v322;
    if (v323 > v321)
      v321 = v323;
    v136[139].i64[1] = v321;
    v324 = v136[139].i64[0];
    v325 = operator new[]();
    v326 = v325;
    if (v305)
    {
      v327 = 0;
      if (v305 < 4)
        goto LABEL_465;
      if ((unint64_t)(v325 - v324) < 0x20)
        goto LABEL_465;
      v327 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      v328 = (_OWORD *)(v325 + 16);
      v329 = (__int128 *)(v324 + 16);
      v330 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v331 = *v329;
        *(v328 - 1) = *(v329 - 1);
        *v328 = v331;
        v328 += 2;
        v329 += 2;
        v330 -= 4;
      }
      while (v330);
      if (v305 != v327)
      {
LABEL_465:
        v332 = v305 - v327;
        v333 = 8 * v327;
        v334 = (uint64_t *)(v324 + 8 * v327);
        v335 = (_QWORD *)(v325 + v333);
        do
        {
          v336 = *v334++;
          *v335++ = v336;
          --v332;
        }
        while (v332);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v326;
    *(_QWORD *)(v326 + 8 * v136[140].i64[0]) = v320;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_473;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v343 = *(_QWORD *)(v137 + 896);
    v344 = *(_QWORD *)(v137 + 904);
    while (v343 != v344)
    {
      v345 = *(_QWORD *)(v343 + 208);
      if (*(_BYTE *)(v343 + 496)
        || (*(_BYTE *)(v345 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v343 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v345);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v343 + 216));
      }
      v343 += 504;
    }
    v346 = *(_QWORD *)(v137 + 920);
    v347 = *(_QWORD *)(v137 + 928);
    while (v346 != v347)
    {
      v348 = *(_QWORD *)(v346 + 136);
      if (*(_BYTE *)(v346 + 272) || (*(_BYTE *)(v348 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v348);
      v346 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v349 = *(_QWORD *)(v137 + 1016);
    v350 = *(_QWORD *)(v137 + 1024);
    while (v349 != v350)
    {
      v351 = *(_QWORD *)(v349 + 736);
      if (*(_BYTE *)(v349 + 880)
        || (*(_BYTE *)(v351 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v349 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v351);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v349 + 744));
      }
      v349 += 888;
    }
    v352 = (uint64_t)(*(_QWORD *)(v137 + 1832) - *(_QWORD *)(v137 + 1824)) >> 2;
    if (v352 <= v409)
      v341 = v409 - v352;
    else
      v341 = 0;
    result = sub_20F59A618(v138);
    v338 = v136[140].u64[0];
  }
  else
  {
    v341 = v409;
  }
LABEL_507:
  v353 = v341;
  v136[106].i64[0] += v341;
  v136[106].i64[1] += 3 * v341;
  v354 = v338 + 1;
  v355 = v136[139].u64[1];
  if (v338 + 1 <= v355)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v338) = v341;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_524:
      v372 = *(_QWORD *)(v137 + 800);
      v373 = *(_QWORD *)(v137 + 808);
      if (v372 == v373)
      {
        v374 = 0;
      }
      else
      {
        v374 = 0;
        do
        {
          v375 = *(_QWORD *)(v372 + 8);
          if ((*(_BYTE *)(v375 + 4) & 6) == 0)
            v374 += *(unsigned __int8 *)(v375 + 20);
          v372 += 16;
        }
        while (v372 != v373);
      }
      goto LABEL_558;
    }
  }
  else
  {
    v356 = 2 * v355;
    if (v356 > v354)
      v354 = v356;
    v136[139].i64[1] = v354;
    v357 = v136[139].i64[0];
    v358 = operator new[]();
    v359 = v358;
    if (v338)
    {
      v360 = 0;
      if (v338 < 4)
        goto LABEL_516;
      if ((unint64_t)(v358 - v357) < 0x20)
        goto LABEL_516;
      v360 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      v361 = (_OWORD *)(v358 + 16);
      v362 = (__int128 *)(v357 + 16);
      v363 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v364 = *v362;
        *(v361 - 1) = *(v362 - 1);
        *v361 = v364;
        v361 += 2;
        v362 += 2;
        v363 -= 4;
      }
      while (v363);
      if (v338 != v360)
      {
LABEL_516:
        v365 = v338 - v360;
        v366 = 8 * v360;
        v367 = (uint64_t *)(v357 + 8 * v360);
        v368 = (_QWORD *)(v358 + v366);
        do
        {
          v369 = *v367++;
          *v368++ = v369;
          --v365;
        }
        while (v365);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v359;
    *(_QWORD *)(v359 + 8 * v136[140].i64[0]) = v353;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_524;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v376 = *(_QWORD *)(v137 + 896);
    v377 = *(_QWORD *)(v137 + 904);
    while (v376 != v377)
    {
      v378 = *(_QWORD *)(v376 + 208);
      if (*(_BYTE *)(v376 + 496)
        || (*(_BYTE *)(v378 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v376 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v378);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v376 + 216));
      }
      v376 += 504;
    }
    v379 = *(_QWORD *)(v137 + 920);
    v380 = *(_QWORD *)(v137 + 928);
    while (v379 != v380)
    {
      v381 = *(_QWORD *)(v379 + 136);
      if (*(_BYTE *)(v379 + 272) || (*(_BYTE *)(v381 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v381);
      v379 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v382 = *(_QWORD *)(v137 + 1016);
    v383 = *(_QWORD *)(v137 + 1024);
    while (v382 != v383)
    {
      v384 = *(_QWORD *)(v382 + 736);
      if (*(_BYTE *)(v382 + 880)
        || (*(_BYTE *)(v384 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v382 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v384);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v382 + 744));
      }
      v382 += 888;
    }
    v385 = (uint64_t)(*(_QWORD *)(v137 + 1856) - *(_QWORD *)(v137 + 1848)) >> 2;
    if (v385 <= v410)
      v374 = v410 - v385;
    else
      v374 = 0;
    result = sub_20F59A618(v138);
    v371 = v136[140].u64[0];
  }
  else
  {
    v374 = v410;
  }
LABEL_558:
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v374));
  v386 = v371 + 1;
  v387 = v136[139].u64[1];
  if (v371 + 1 <= v387)
  {
    v391 = v136[139].i64[0];
  }
  else
  {
    v388 = 2 * v387;
    if (v388 > v386)
      v386 = v388;
    v136[139].i64[1] = v386;
    v389 = v136[139].i64[0];
    v390 = operator new[]();
    v391 = v390;
    if (v371)
    {
      v392 = 0;
      if (v371 < 4)
        goto LABEL_567;
      if ((unint64_t)(v390 - v389) < 0x20)
        goto LABEL_567;
      v392 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      v393 = (_OWORD *)(v390 + 16);
      v394 = (__int128 *)(v389 + 16);
      v395 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v396 = *v394;
        *(v393 - 1) = *(v394 - 1);
        *v393 = v396;
        v393 += 2;
        v394 += 2;
        v395 -= 4;
      }
      while (v395);
      if (v371 != v392)
      {
LABEL_567:
        v397 = v371 - v392;
        v398 = 8 * v392;
        v399 = (uint64_t *)(v389 + 8 * v392);
        v400 = (_QWORD *)(v390 + v398);
        do
        {
          v401 = *v399++;
          *v400++ = v401;
          --v397;
        }
        while (v397);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v391;
    v371 = v136[140].u64[0];
  }
  *(_QWORD *)(v391 + 8 * v371) = v374;
  ++v136[140].i64[0];
  return result;
}

void sub_20F62A850(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A864(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A878(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A88C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A8A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A8B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A8C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A8DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A8F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A904(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A918(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A92C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A940(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A954(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A968(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A97C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A990(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A9A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A9B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A9CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A9E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62A9F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AA94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AAA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F62AABC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

double sub_20F62AAD0(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  double v5;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  double v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  __int128 *v30;
  _BOOL4 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v36;
  double *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  uint64_t *v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v62;
  double v64;
  double v66;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  int8x16_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t *v77;
  int8x16_t v78;
  float64_t v79;
  double v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  _OWORD *v85;
  int v86;
  uint64_t v89;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v104;
  __int128 *v105;
  __int128 *v106;
  __int128 v107;
  __int128 v110;
  double v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t v126;
  double v127;
  double v128;
  float64x2_t v129;
  double v130;
  double v131;
  float64x2_t v132;
  double v133;
  double *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double *v140;
  int v141;
  uint64_t v142;
  double v145;
  long double v146;
  long double v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  _OWORD *v151;
  _BOOL4 v152;
  uint64_t v153;
  __int128 v154;
  double v161;
  double v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  unint64_t v175;
  uint64_t v176;
  uint64_t v178;
  double v179;
  double v180;
  uint64_t v181;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  double v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  double v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  unint64_t v232;
  double v233;
  unint64_t v234;
  double *v235;
  uint64_t v236;
  double v239;
  long double v240;
  long double v241;
  long double v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  __int128 v247;
  unint64_t v253;
  uint64_t v254;
  double v255;
  double *v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v264;
  float64x2_t v265;
  _QWORD *v266;
  double *v267;
  float64x2_t v268;
  double v269;
  float64x2_t v270;
  float64_t v271;
  float64x2_t v272;
  double v273;
  float64x2_t v274;
  uint64_t v275;
  double v276;
  char v277;

  kdebug_trace();
  v11 = a2[66];
  if (v11 > 5)
    goto LABEL_15;
  v12 = a2[65];
  if (v12 >= 6)
  {
    v16 = (_QWORD *)a2[64];
  }
  else
  {
    v13 = 2 * v12;
    if (v13 <= 6)
      v13 = 6;
    a2[65] = v13;
    v14 = (_QWORD *)a2[64];
    v15 = (_QWORD *)operator new[]();
    v16 = v15;
    if (v11)
    {
      *v15 = *v14;
      if (v11 != 1)
      {
        v15[1] = v14[1];
        if (v11 != 2)
        {
          v15[2] = v14[2];
          if (v11 != 3)
          {
            v15[3] = v14[3];
            if (v11 != 4)
              v15[4] = v14[4];
          }
        }
      }
    }
    v17 = (_QWORD *)a2[64];
    if (v17 != a2 && v17)
      MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
    a2[64] = v16;
    v11 = a2[66];
    if (v11 > 5)
    {
LABEL_15:
      a2[66] = 6;
      if (*(_BYTE *)(a1 + 1876))
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  bzero(&v16[v11], 48 - 8 * v11);
  a2[66] = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
LABEL_16:
    v18 = *(_QWORD *)(a1 + 896);
    v19 = *(__int128 **)(a1 + 904);
    v20 = 0.0;
    v21 = 0.0;
    if ((__int128 *)v18 == v19)
      goto LABEL_72;
    if (*(_BYTE *)(a1 + 1875))
    {
      v22 = (unint64_t)v19 - v18 - 504;
      if (v22 < 0x1F8)
      {
        v23 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_71:
          v21 = v21 + *(double *)(v23 + 464);
          v23 += 504;
        }
        while ((__int128 *)v23 != v19);
        goto LABEL_72;
      }
      v163 = v22 / 0x1F8 + 1;
      v23 = v18 + 504 * (v163 & 0x1FFFFFFFFFFFFFELL);
      v164 = v163 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v21 = v21 + *(double *)(v18 + 464) + *(double *)(v18 + 968);
        v18 += 1008;
        v164 -= 2;
      }
      while (v164);
      if (v163 != (v163 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_71;
    }
    else
    {
      v105 = (__int128 *)(v18 + 344);
      do
      {
        if (*((_BYTE *)v105 + 128))
        {
          *((_QWORD *)v105 + 14) = *((_QWORD *)v105 - 1);
          v107 = *(__int128 *)((char *)v105 - 24);
          _Q5 = *(__int128 *)((char *)v105 - 56);
          v105[5] = *(__int128 *)((char *)v105 - 40);
          v105[6] = v107;
          _Q4 = *(__int128 *)((char *)v105 - 88);
          v105[3] = *(__int128 *)((char *)v105 - 72);
          v105[4] = _Q5;
          v110 = *(__int128 *)((char *)v105 - 120);
          v105[1] = *(__int128 *)((char *)v105 - 104);
          v105[2] = _Q4;
          *v105 = v110;
          _Q17 = *v105;
          _D19 = *((_QWORD *)v105 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v105 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v105 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v105 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v105 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v105 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v105 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v123 = *(double *)(a1 + 16) * (_D18 + *((double *)v105 + 14) * *((double *)v105 + 14));
          *((double *)v105 + 15) = v123;
          v21 = v21 + v123;
        }
        v106 = v105 + 10;
        v105 = (__int128 *)((char *)v105 + 504);
      }
      while (v106 != v19);
    }
LABEL_72:
    v134 = (double *)a2[64];
    *v134 = v21 * 0.5;
    v165 = *(_QWORD *)(a1 + 920);
    v166 = *(_QWORD *)(a1 + 928);
    if (v165 == v166)
      goto LABEL_85;
    if (*(_BYTE *)(a1 + 1875))
    {
      v167 = v166 - v165 - 280;
      v20 = 0.0;
      if (v167 < 0x118)
      {
        v168 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_84:
          v20 = v20 + *(double *)(v168 + 240);
          v168 += 280;
        }
        while (v168 != v166);
        goto LABEL_85;
      }
      v175 = v167 / 0x118 + 1;
      v168 = v165 + 280 * (v175 & 0x1FFFFFFFFFFFFFELL);
      v176 = v175 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v20 = v20 + *(double *)(v165 + 240) + *(double *)(v165 + 520);
        v165 += 560;
        v176 -= 2;
      }
      while (v176);
      if (v175 != (v175 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_84;
    }
    else
    {
      v20 = 0.0;
      do
      {
        if (*(_BYTE *)(v165 + 248))
        {
          v169 = *(_OWORD *)(v165 + 160);
          *(_OWORD *)(v165 + 192) = *(_OWORD *)(v165 + 144);
          *(_OWORD *)(v165 + 208) = v169;
          _Q3 = *(_OWORD *)(v165 + 192);
          *(_OWORD *)(v165 + 224) = *(_OWORD *)(v165 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v169 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v165 + 240) = v169;
          v20 = v20 + *(double *)&v169;
        }
        v165 += 280;
      }
      while (v165 != v166);
      v134 = (double *)a2[64];
    }
LABEL_85:
    v134[1] = v20 * 0.5;
    _X10 = *(_QWORD *)(a1 + 944);
    v178 = *(_QWORD *)(a1 + 952);
    v179 = 0.0;
    if (_X10 == v178)
    {
      v180 = 0.0;
      goto LABEL_99;
    }
    if (*(_BYTE *)(a1 + 1875))
    {
      v180 = 0.0;
      if ((unint64_t)(v178 - _X10 - 8016) >> 4 < 0x1F5)
      {
        v181 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_98:
          v180 = v180 + *(double *)(v181 + 7976);
          v181 += 8016;
        }
        while (v181 != v178);
        goto LABEL_99;
      }
      v203 = (v178 - _X10 - 8016) / 0x1F50uLL + 1;
      v181 = _X10 + 8016 * (v203 & 0x1FFFFFFFFFFFFELL);
      v204 = v203 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v180 = v180 + *(double *)(_X10 + 7976) + *(double *)(_X10 + 15992);
        _X10 += 16032;
        v204 -= 2;
      }
      while (v204);
      if (v203 != (v203 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_98;
    }
    else
    {
      v180 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x7D20] }
        if (*(_BYTE *)(_X10 + 7984))
        {
          _X14 = _X10 + 31904;
          *(_QWORD *)(_X10 + 7968) = *(_QWORD *)(_X10 + 7848);
          v184 = *(_OWORD *)(_X10 + 7816);
          *(_OWORD *)(_X10 + 7920) = *(_OWORD *)(_X10 + 7800);
          *(_OWORD *)(_X10 + 7936) = v184;
          *(_OWORD *)(_X10 + 7952) = *(_OWORD *)(_X10 + 7832);
          v185 = *(_OWORD *)(_X10 + 7752);
          *(_OWORD *)(_X10 + 7856) = *(_OWORD *)(_X10 + 7736);
          *(_OWORD *)(_X10 + 7872) = v185;
          v186 = *(_OWORD *)(_X10 + 7784);
          *(_OWORD *)(_X10 + 7888) = *(_OWORD *)(_X10 + 7768);
          *(_OWORD *)(_X10 + 7904) = v186;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X10 + 7856);
          _D19 = *(_QWORD *)(_X10 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X10 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X10 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v202 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X10 + 7968) * *(double *)(_X10 + 7968));
          *(double *)(_X10 + 7976) = v202;
          v180 = v180 + v202;
        }
        _X10 += 8016;
      }
      while (_X10 != v178);
      v134 = (double *)a2[64];
    }
LABEL_99:
    v134[2] = v180 * 0.5;
    _X10 = *(_QWORD *)(a1 + 968);
    v206 = *(_QWORD *)(a1 + 976);
    if (_X10 == v206)
      goto LABEL_112;
    if (*(_BYTE *)(a1 + 1875))
    {
      v207 = v206 - _X10 - 5336;
      v179 = 0.0;
      if (v207 >> 3 < 0x29B)
      {
        v208 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_111:
          v179 = v179 + *(double *)(v208 + 5296);
          v208 += 5336;
        }
        while (v208 != v206);
        goto LABEL_112;
      }
      v227 = v207 / 0x14D8 + 1;
      v208 = _X10 + 5336 * (v227 & 0x1FFFFFFFFFFFFELL);
      v228 = v227 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v179 = v179 + *(double *)(_X10 + 5296) + *(double *)(_X10 + 10632);
        _X10 += 10672;
        v228 -= 2;
      }
      while (v228);
      if (v227 != (v227 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_111;
    }
    else
    {
      v179 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x5340] }
        if (*(_BYTE *)(_X10 + 5304))
        {
          _X14 = _X10 + 21184;
          *(_QWORD *)(_X10 + 5288) = *(_QWORD *)(_X10 + 5168);
          *(_OWORD *)(_X10 + 5240) = *(_OWORD *)(_X10 + 5120);
          *(_OWORD *)(_X10 + 5256) = *(_OWORD *)(_X10 + 5136);
          *(_OWORD *)(_X10 + 5272) = *(_OWORD *)(_X10 + 5152);
          *(_OWORD *)(_X10 + 5176) = *(_OWORD *)(_X10 + 5056);
          *(_OWORD *)(_X10 + 5192) = *(_OWORD *)(_X10 + 5072);
          *(_OWORD *)(_X10 + 5208) = *(_OWORD *)(_X10 + 5088);
          *(_OWORD *)(_X10 + 5224) = *(_OWORD *)(_X10 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X10 + 5176);
          _D19 = *(_QWORD *)(_X10 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X10 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X10 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v226 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X10 + 5288) * *(double *)(_X10 + 5288));
          *(double *)(_X10 + 5296) = v226;
          v179 = v179 + v226;
        }
        _X10 += 5336;
      }
      while (_X10 != v206);
      v134 = (double *)a2[64];
    }
LABEL_112:
    v134[3] = v179 * 0.5;
    v229 = *(_QWORD *)(a1 + 992);
    v230 = *(_QWORD *)(a1 + 1000);
    v231 = 0.0;
    if (v229 == v230)
    {
      v233 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 1875))
    {
      v232 = v230 - v229 - 216;
      v233 = 0.0;
      if (v232 < 0xD8)
        goto LABEL_143;
      v234 = v232 / 0xD8 + 1;
      v235 = (double *)(v229 + 392);
      v236 = v234 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v233 = v233 + *(v235 - 27) + *v235;
        v235 += 54;
        v236 -= 2;
      }
      while (v236);
      v229 += 216 * (v234 & 0x3FFFFFFFFFFFFFELL);
      if (v234 != (v234 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_143:
        do
        {
          v233 = v233 + *(double *)(v229 + 176);
          v229 += 216;
        }
        while (v229 != v230);
      }
    }
    else
    {
      v233 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 184))
        {
          *(_OWORD *)(v229 + 160) = *(_OWORD *)(v229 + 144);
          v265 = *(float64x2_t *)(v229 + 160);
          _D1 = v265.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v239 = *(double *)(a1 + 88);
          v240 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
          v241 = v240 + 1.0;
          v242 = v239 * log1p(v240);
          *(long double *)(v229 + 176) = v242;
          *(float64x2_t *)(v229 + 160) = vmulq_n_f64(v265, sqrt(1.0 / v241));
          v233 = v233 + v242;
        }
        v229 += 216;
      }
      while (v229 != v230);
      v134 = (double *)a2[64];
    }
    v134[4] = v233 * 0.5;
    v243 = *(_QWORD *)(a1 + 1016);
    v244 = *(_QWORD *)(a1 + 1024);
    if (v243 == v244)
      goto LABEL_139;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v231 = 0.0;
      do
      {
        if (*(_BYTE *)(v243 + 856))
        {
          v247 = *(_OWORD *)(v243 + 768);
          *(_OWORD *)(v243 + 800) = *(_OWORD *)(v243 + 752);
          *(_OWORD *)(v243 + 816) = v247;
          _Q2 = *(_OWORD *)(v243 + 800);
          *(_OWORD *)(v243 + 832) = *(_OWORD *)(v243 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v247 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v243 + 848) = v247;
          v231 = v231 + *(double *)&v247;
        }
        v243 += 888;
      }
      while (v243 != v244);
      v134 = (double *)a2[64];
      goto LABEL_139;
    }
    v245 = v244 - v243 - 888;
    v231 = 0.0;
    if (v245 >= 0x378)
    {
      v253 = v245 / 0x378 + 1;
      v246 = v243 + 888 * (v253 & 0xFFFFFFFFFFFFFELL);
      v254 = v253 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v231 = v231 + *(double *)(v243 + 848) + *(double *)(v243 + 1736);
        v243 += 1776;
        v254 -= 2;
      }
      while (v254);
      if (v253 == (v253 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_139;
    }
    else
    {
      v246 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v231 = v231 + *(double *)(v246 + 848);
      v246 += 888;
    }
    while (v246 != v244);
LABEL_139:
    v162 = v231 * 0.5;
    goto LABEL_140;
  }
LABEL_22:
  v24 = (double *)(a1 + 8);
  v25 = (_QWORD *)(a1 + 120);
  v266 = (_QWORD *)(a1 + 120);
  v267 = (double *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 896);
  v27 = *(_QWORD *)(a1 + 904);
  v28 = 0.0;
  v29 = 0.0;
  if (v26 != v27)
  {
    do
    {
      while (1)
      {
        v30 = (__int128 *)(v26 + 344);
        v31 = sub_20F4AFF88((char *)(v26 + 8), (float64x2_t **)(v26 + 208), v26 + 344);
        *(_BYTE *)(v26 + 472) = v31;
        if (v31)
          break;
        *(_QWORD *)(v26 + 464) = 0;
        v26 += 504;
        if (v26 == v27)
          goto LABEL_29;
      }
      v32 = *(_QWORD *)(v26 + 480);
      if (v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v26 + 344);
      _Q1 = *(_OWORD *)(v26 + 408);
      v33 = *(_OWORD *)(v26 + 424);
      _Q3 = *(_OWORD *)(v26 + 392);
      *(_OWORD *)(v26 + 288) = _Q1;
      *(_OWORD *)(v26 + 304) = v33;
      _Q2 = *(float64x2_t *)(v26 + 424);
      *(_OWORD *)(v26 + 320) = *(_OWORD *)(v26 + 440);
      *(_QWORD *)(v26 + 336) = *(_QWORD *)(v26 + 456);
      v36 = *(_OWORD *)(v26 + 360);
      _Q5 = *v30;
      _V7.D[1] = *((_QWORD *)&v36 + 1);
      *(_OWORD *)(v26 + 224) = *v30;
      *(_OWORD *)(v26 + 240) = v36;
      _Q4 = *(_OWORD *)(v26 + 376);
      v4 = *(float64x2_t *)(v26 + 392);
      *(_OWORD *)(v26 + 256) = _Q4;
      *(float64x2_t *)(v26 + 272) = v4;
      _Q6 = *(float64x2_t *)(v26 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v26 + 456) * *(double *)(v26 + 456));
      *(float64_t *)(v26 + 464) = v4.f64[0];
      v29 = v29 + v4.f64[0];
      v26 += 504;
    }
    while (v26 != v27);
LABEL_29:
    v25 = v266;
    v24 = v267;
  }
  v52 = (double *)a2[64];
  *v52 = v29 * 0.5;
  v53 = (int8x16_t *)v25[100];
  v54 = (int8x16_t *)v25[101];
  if (v53 != v54)
  {
    v55 = v53 + 16;
    v28 = 0.0;
    do
    {
      while (!v55[-9].i64[1])
      {
        v55[-1].i8[8] = 0;
        v55[-1].i64[0] = 0;
        v56 = &v55[1].i64[1];
        v55 = (int8x16_t *)((char *)v55 + 280);
        if (v56 == (uint64_t *)v54)
          goto LABEL_37;
      }
      v57 = v55[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v57 + 48);
      v58 = *(float64x2_t *)(v57 + 32);
      _D2 = *(double *)(v57 + 72);
      v60 = *(float64x2_t *)(v57 + 56);
      _D4 = *(double *)(v57 + 96);
      v62 = *(float64x2_t *)(v57 + 80);
      *(_QWORD *)&_Q6.f64[0] = v55[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v55[-15] + 8);
      v64 = *(double *)v55[-12].i64;
      _Q17 = (float64x2_t)v55[-13];
      v66 = *(double *)&v55[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v55[-12] + 8);
      v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q7.f64[0]), v60, _Q17.f64[0]), v62, _Q19.f64[0]);
      v69 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v70 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v58, _Q7, 1), v60, _Q17, 1), v62, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v269 = v69;
      v268 = v68;
      v271 = _Q7.f64[0];
      v270 = v70;
      v272 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q6.f64[0]), v60, v64), v62, v66);
      v273 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v64 + _D4 * v66;
      v275 = 0;
      v274 = 0uLL;
      sub_20E9733B8(&v268, v274.f64);
      v71 = v55 - 4;
      v72 = v274;
      v55[-3].i64[0] = v275;
      v55[-4] = (int8x16_t)v72;
      v72.f64[0] = *(float64_t *)(v57 + 120);
      *(_QWORD *)&v73.f64[0] = v55[-9].i64[0];
      *(float64x2_t *)((char *)&v55[-3] + 8) = vsubq_f64(*(float64x2_t *)(v57 + 104), (float64x2_t)v55[-10]);
      v55[-2].i64[1] = *(_OWORD *)&vsubq_f64(v72, v73);
      v74 = (float64x2_t *)v55[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v55[-2], v74[3]);
      v75 = (int8x16_t)vmulq_f64((float64x2_t)v55[-3], v74[2]);
      v76 = (int8x16_t)vmulq_f64((float64x2_t)v55[-4], v74[1]);
      v55[-4] = v76;
      v55[-3] = v75;
      v55[-2] = (int8x16_t)v4;
      v55[-1].i8[8] = 1;
      if (v55->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v55->i64[0] + 24))(v55->i64[0], v55 - 4);
        v75 = v55[-3];
        v4 = (float64x2_t)v55[-2];
        v76 = *v71;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v75, v75, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v76, v76, 8uLL).i64;
      v77 = v55 - 7;
      v78 = v55[-3];
      *v77 = *v71;
      v77[1] = v78;
      _Q6 = (float64x2_t)v55[-2];
      v77[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v79 = _Q2.f64[0] + *(double *)v75.i64 * *(double *)v75.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v24[3];
      v80 = v5 * v79;
      *(double *)v55[-1].i64 = v80;
      v28 = v28 + v80;
      v81 = &v55[1].i64[1];
      v55 = (int8x16_t *)((char *)v55 + 280);
    }
    while (v81 != (uint64_t *)v54);
LABEL_37:
    v52 = (double *)a2[64];
    v25 = v266;
    v24 = v267;
  }
  v52[1] = v28 * 0.5;
  v82 = v25[103];
  v83 = v25[104];
  if (v82 == v83)
  {
    v84 = 0.0;
  }
  else
  {
    v84 = 0.0;
    do
    {
      while (1)
      {
        v85 = (_OWORD *)(v82 + 7856);
        v86 = sub_20F4B0BC8();
        *(_BYTE *)(v82 + 7984) = v86;
        if (v86)
          break;
        *(_QWORD *)(v82 + 7976) = 0;
        v82 += 8016;
        if (v82 == v83)
          goto LABEL_45;
      }
      _X8 = v82 + 24024;
      __asm { PRFM            #0, [X8] }
      v89 = *(_QWORD *)(v82 + 7992);
      if (v89)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, v82 + 7856);
      _X8 = v82 + 23888;
      v91 = *(_OWORD *)(v82 + 7936);
      *(_OWORD *)(v82 + 7800) = *(_OWORD *)(v82 + 7920);
      *(_OWORD *)(v82 + 7816) = v91;
      _Q2 = *(float64x2_t *)(v82 + 7936);
      *(_OWORD *)(v82 + 7832) = *(_OWORD *)(v82 + 7952);
      *(_QWORD *)(v82 + 7848) = *(_QWORD *)(v82 + 7968);
      v92 = *(_OWORD *)(v82 + 7872);
      *(_OWORD *)(v82 + 7736) = *v85;
      *(_OWORD *)(v82 + 7752) = v92;
      v93 = *(_OWORD *)(v82 + 7904);
      *(_OWORD *)(v82 + 7768) = *(_OWORD *)(v82 + 7888);
      *(_OWORD *)(v82 + 7784) = v93;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v82 + 7872);
      _Q7 = *v85;
      _D17 = *(_QWORD *)(v82 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v82 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v82 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v82 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v82 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v24[5];
      v104 = v5 * (_D16 + *(double *)(v82 + 7968) * *(double *)(v82 + 7968));
      *(double *)(v82 + 7976) = v104;
      v84 = v84 + v104;
      v82 += 8016;
    }
    while (v82 != v83);
LABEL_45:
    v52 = (double *)a2[64];
    v24 = v267;
  }
  v52[2] = v84 * 0.5;
  v277 = *(_BYTE *)(a1 + 1875);
  v276 = 0.0;
  v124 = v266[106];
  v125 = v266[107];
  *(_QWORD *)&v268.f64[0] = &v277;
  *(_QWORD *)&v268.f64[1] = v24 + 6;
  v269 = COERCE_DOUBLE(&v266);
  *(_QWORD *)&v270.f64[0] = &v276;
  sub_20F4D78F4(&v274, v124, v125, (uint64_t)&v268, v84 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v133 = v276 * 0.5;
  v134 = (double *)a2[64];
  v134[3] = v276 * 0.5;
  v135 = v266;
  v136 = v266[109];
  v137 = v266[110];
  v138 = 0.0;
  v139 = 0.0;
  if (v136 != v137)
  {
    v140 = v267;
    do
    {
      while (1)
      {
        v141 = sub_20FC7133C(v136 + 8, (uint64_t *)(v136 + 56), v136 + 160, v133, v126.f64[0], v127, v128, v129, v130, v131, v132);
        *(_BYTE *)(v136 + 184) = v141;
        if (v141)
          break;
        *(_QWORD *)(v136 + 176) = 0;
        v136 += 216;
        if (v136 == v137)
          goto LABEL_58;
      }
      v142 = *(_QWORD *)(v136 + 192);
      if (v142)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 24))(v142, v136 + 160);
      *(_OWORD *)(v136 + 144) = *(_OWORD *)(v136 + 160);
      v264 = *(float64x2_t *)(v136 + 160);
      _D1 = v264.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v145 = v140[10];
      v146 = v140[11] * (v140[9] * _D0);
      v147 = v146 + 1.0;
      v133 = v145 * log1p(v146);
      *(double *)(v136 + 176) = v133;
      v127 = v264.f64[0];
      v126 = vmulq_n_f64(v264, sqrt(1.0 / v147));
      *(float64x2_t *)(v136 + 160) = v126;
      v139 = v139 + v133;
      v136 += 216;
    }
    while (v136 != v137);
LABEL_58:
    v134 = (double *)a2[64];
    v135 = v266;
  }
  v134[4] = v139 * 0.5;
  v148 = v135[112];
  v149 = v135[113];
  if (v148 != v149)
  {
    v138 = 0.0;
    v150 = v267;
    do
    {
      while (1)
      {
        v151 = (_OWORD *)(v148 + 800);
        v152 = sub_20F3E115C(v148 + 8, (_QWORD *)(v148 + 736), (float64x2_t *)(v148 + 800));
        *(_BYTE *)(v148 + 856) = v152;
        if (v152)
          break;
        *(_QWORD *)(v148 + 848) = 0;
        v148 += 888;
        if (v148 == v149)
          goto LABEL_66;
      }
      v153 = *(_QWORD *)(v148 + 864);
      if (v153)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 24))(v153, v148 + 800);
      v154 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 752) = *v151;
      *(_OWORD *)(v148 + 768) = v154;
      _Q2 = *v151;
      _Q1 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 784) = *(_OWORD *)(v148 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v148 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v161 = v150[13] * _D3;
      *(double *)(v148 + 848) = v161;
      v138 = v138 + v161;
      v148 += 888;
    }
    while (v148 != v149);
LABEL_66:
    v134 = (double *)a2[64];
  }
  v162 = v138 * 0.5;
LABEL_140:
  v134[5] = v162;
  *(_WORD *)(a1 + 1875) = 257;
  v255 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v256 = (double *)a2[64];
  v257 = *v256;
  v258 = v256[1];
  v259 = v256[2];
  v260 = v256[3];
  v261 = v256[4];
  v262 = v256[5];
  kdebug_trace();
  return v255 + v257 + v258 + v259 + v260 + v261 + v262;
}

void sub_20F62BB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F62BB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F62BBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F62BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F62BBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F62BBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F62BC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F62BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double *sub_20F62BC2C(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  __n128 v23;
  __n128 v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  double *result;
  uint64_t v33;
  double v34;
  uint64_t v35;
  _QWORD v36[64];
  double *v37;
  __int128 v38;
  uint64_t v39;

  v37 = (double *)v36;
  v38 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3)
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3)
     + 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4)
     + 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3)
     - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3)
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v38 = v6;
    v7 = (double *)operator new[]();
    if (v37 != (double *)v36 && v37)
      MEMORY[0x212BC6368]();
    v37 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v38 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62CB00((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62CCF4((uint64_t)&v39, v36, v9, v10, v11, v12, v13, v14, v15);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D074((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D2BC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D57C((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D7C4((uint64_t)&v39, v36, v16, v17, v18, v19, v20, v21, v22);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62DC70((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62DE48((uint64_t)&v39, v36, v23, v24, v25, v26, v27, v28, v29, v30);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62E070((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62E274((uint64_t)&v39, v36);
  }
  v31 = *((_QWORD *)&v38 + 1);
  result = v37;
  if (!*((_QWORD *)&v38 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v38 + 1) = 0;
    if (result == (double *)v36)
      return result;
    goto LABEL_34;
  }
  v33 = *((_QWORD *)&v38 + 1) >> 1;
  sub_20E8FB210(v37, &v37[*((_QWORD *)&v38 + 1) >> 1], &v37[*((_QWORD *)&v38 + 1)]);
  result = v37;
  v34 = v37[v33];
  if ((v31 & 1) == 0)
  {
    v35 = v33 - 1;
    if (v35 != v31)
    {
      sub_20E8FB210(v37, &v37[v35], &v37[v31]);
      result = v37;
    }
    v34 = (v34 + result[v35]) * 0.5;
  }
  *a2 = v8 * sqrt(v34);
  *((_QWORD *)&v38 + 1) = 0;
  if (result != (double *)v36)
  {
LABEL_34:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F62BF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F62BFC8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v46;

  v4 = a2[66];
  v5 = v4
     - 0x1041041041041041 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 784) - *(_QWORD *)(*(_QWORD *)a1 + 776)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xEFBEFBEFBEFBEFBFLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 784) - *(_QWORD *)(*(_QWORD *)a1 + 776)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x1041041041041041
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 784) - *(_QWORD *)(*(_QWORD *)a1 + 776)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 776);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 784);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 472))
    {
      _Q7 = *(_OWORD *)(v27 + 224);
      _D17 = *(_QWORD *)(v27 + 232);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(_QWORD *)&_Q7 = *(_QWORD *)(v27 + 248);
      __asm { FMLA            D16, D7, V6.D[1] }
      _D6 = *(_QWORD *)(v27 + 264);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(_QWORD *)(v27 + 280);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v27 + 296);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *(_QWORD *)(v27 + 312);
      __asm { FMLA            D16, D3, V2.D[1] }
      _D2 = *(_QWORD *)(v27 + 328);
      __asm { FMLA            D16, D2, V1.D[1] }
      *v26++ = _D16 + *(double *)(v27 + 336) * *(double *)(v27 + 336);
    }
    v27 += 504;
  }
  v46 = (double *)(v25 + 8 * v5);
  if (v26 != v46)
    a2[66] = v5 + ~((unint64_t)((char *)v46 - (char *)v26 - 8) >> 3);
}

void sub_20F62C1FC(uint64_t a1, _QWORD *a2)
{
  int64x2_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t *v30;
  double v48;
  float64x2_t *v49;
  float64_t v50;
  float64_t v51;
  float64_t v52;
  const double *v53;
  double v54;
  double v55;
  double v56;
  float64_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  unint64_t v62;
  float64x2_t v63;
  unint64_t v64;
  double v65;
  float64x2_t v67;
  double v70;
  float64x2_t v71;
  float64x2_t v74;
  double v77;
  float64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v88;
  float64x2_t v89;
  uint64_t v90;
  float64x2_t v91;
  float64x2_t v92;
  int64x2_t v93;
  int8x16_t v94;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t *v107;
  float64x2_t v109;
  double v120;
  double *v136;
  float64x2_t v137;
  _BYTE v138[80];
  float64x2_t v139;
  double v140;
  char v141;
  float64x2x3_t v142;

  v5 = a2[66];
  v6 = v5
     - 0x1041041041041041 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 784) - *(_QWORD *)(*(_QWORD *)a1 + 776)) >> 3);
  if (v5 >= v6)
    goto LABEL_22;
  v7 = a2[65];
  if (v7 < v6)
  {
    v8 = 2 * v7;
    if (v8 <= v6)
      v8 = v5
         - 0x1041041041041041
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 784) - *(_QWORD *)(*(_QWORD *)a1 + 776)) >> 3);
    a2[65] = v8;
    v9 = a2[64];
    v10 = operator new[]();
    v11 = v10;
    if (v5)
    {
      v12 = 0;
      if (v5 < 4)
        goto LABEL_11;
      if ((unint64_t)(v10 - v9) < 0x20)
        goto LABEL_11;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (_OWORD *)(v10 + 16);
      v14 = (__int128 *)(v9 + 16);
      v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 != v12)
      {
LABEL_11:
        v17 = v5 - v12;
        v18 = 8 * v12;
        v19 = (uint64_t *)(v9 + 8 * v12);
        v20 = (_QWORD *)(v10 + v18);
        do
        {
          v21 = *v19++;
          *v20++ = v21;
          --v17;
        }
        while (v17);
      }
    }
    v22 = (_QWORD *)a2[64];
    if (v22 != a2 && v22 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v11;
    v24 = a2[66];
    v25 = v6 - v24;
    if (v6 <= v24)
      goto LABEL_22;
    goto LABEL_21;
  }
  v24 = a2[66];
  v25 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 784) - *(_QWORD *)(*(_QWORD *)a1 + 776)) >> 3);
  if (v6 > v5)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v24), 8 * v25);
LABEL_22:
  a2[66] = v6;
  v26 = a2[64];
  v27 = (double *)(v26 + 8 * v5);
  v28 = *(float64x2_t **)(*(_QWORD *)a1 + 776);
  v29 = *(float64x2_t **)(*(_QWORD *)a1 + 784);
  if (v28 == v29)
    goto LABEL_39;
  v30 = v28 + 30;
  do
  {
    v50 = v30[-18].f64[0];
    if (v50 != 0.0)
    {
      v51 = v30[-17].f64[1];
      v52 = v30[-17].f64[0];
      v53 = &v30[-29].f64[1];
      v54 = *(double *)(*(_QWORD *)&v52 + 48);
      v55 = *(double *)(*(_QWORD *)&v52 + 72);
      v56 = *(double *)(*(_QWORD *)&v52 + 96);
      _Q22 = *(float64x2_t *)(*(_QWORD *)&v52 + 80);
      v57 = *(double *)(*(_QWORD *)&v52 + 120);
      v58 = *(int8x16_t *)(*(_QWORD *)&v52 + 104);
      v59 = *(float64x2_t *)(*(_QWORD *)&v51 + 56);
      v60 = *(float64x2_t *)(*(_QWORD *)&v51 + 80);
      v142 = vld3q_f64(v53);
      *(_QWORD *)&v61.f64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
      v62 = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
      *(_QWORD *)&v63.f64[0] = vextq_s8(*(int8x16_t *)(*(_QWORD *)&v51 + 32), *(int8x16_t *)(*(_QWORD *)&v51 + 32), 8uLL).u64[0];
      v64 = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
      v65 = v30[-25].f64[1];
      _Q10 = *(__int128 *)((char *)&v30[-26] + 8);
      v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142.val[0], *(double *)(*(_QWORD *)&v52 + 32)), v142.val[1], *(float64x2_t *)(*(_QWORD *)&v52 + 32), 1), v142.val[2], v54);
      _D24 = *(_QWORD *)(*(_QWORD *)&v52 + 40);
      __asm { FMLA            D25, D24, V10.D[1] }
      v70 = _D25 + v65 * v54;
      v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142.val[0], *(double *)(*(_QWORD *)&v52 + 56)), v142.val[1], *(float64x2_t *)(*(_QWORD *)&v52 + 56), 1), v142.val[2], v55);
      _D27 = *(_QWORD *)(*(_QWORD *)&v52 + 64);
      __asm { FMLA            D24, D27, V10.D[1] }
      *(double *)v2.i64 = _D24 + v65 * v55;
      v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142.val[0], _Q22.f64[0]), v142.val[1], _Q22, 1), v142.val[2], v56);
      _Q22.f64[0] = *(float64_t *)(*(_QWORD *)&v52 + 88);
      __asm { FMLA            D27, D22, V10.D[1] }
      v77 = _D27 + v65 * v56;
      if (v77 >= 0.0)
      {
        if (v67.f64[0] >= -v71.f64[1])
        {
          *(_QWORD *)&v83.f64[0] = vdupq_laneq_s64((int64x2_t)v74, 1).u64[0];
          v83.f64[1] = v70;
          v80 = vsubq_f64((float64x2_t)vzip1q_s64(v2, (int64x2_t)v74), v83);
          _Q22 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1), v71);
          v67.f64[0] = v77 + 1.0 + v67.f64[0] + v71.f64[1];
        }
        else
        {
          v80.f64[0] = v74.f64[0] + v70;
          _Q22.f64[0] = v77 + 1.0 - (v67.f64[0] + v71.f64[1]);
          v80.f64[1] = *(double *)v2.i64 + v74.f64[1];
          v67.f64[0] = _Q22.f64[0];
        }
      }
      else if (v67.f64[0] <= v71.f64[1])
      {
        v81 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1), v71);
        *(_QWORD *)&v82.f64[1] = v2.i64[0];
        v82.f64[0] = 1.0 - v77;
        v74.f64[0] = v71.f64[1] - v67.f64[0];
        v67 = vaddq_f64(v82, v74);
        v80 = (float64x2_t)vzip1q_s64(v81, (int64x2_t)v67);
        _Q22 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1);
      }
      else
      {
        v78 = v67.f64[0] - v71.f64[1];
        v67.f64[0] = 1.0 - v77;
        v79 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71.f64[0], 0);
        v79.f64[0] = v78;
        v80 = vaddq_f64(v67, v79);
        _Q22.f64[0] = v74.f64[0] + v70;
        v67.f64[0] = v80.f64[0];
      }
      v84 = 0.5 / sqrt(v67.f64[0]);
      v85 = vmulq_n_f64(v80, v84);
      v86 = vmulq_n_f64(_Q22, v84);
      *(_QWORD *)&v60.f64[1] = v62;
      _Q0 = vsubq_f64(v60, v30[-21]);
      *(_QWORD *)&v59.f64[1] = v64;
      v88 = vsubq_f64(v59, v30[-24]);
      v63.f64[1] = *(float64_t *)(*(_QWORD *)&v51 + 48);
      v89 = vsubq_f64(v63, v30[-22]);
      v90 = *(_QWORD *)&v50 + 256;
      v91.f64[1] = *(float64_t *)(*(_QWORD *)&v51 + 32);
      *(_QWORD *)&v92.f64[1] = v58.i64[0];
      v91.f64[0] = *(float64_t *)(*(_QWORD *)&v51 + 72);
      v93 = (int64x2_t)vsubq_f64(v91, v30[-23]);
      v92.f64[0] = *(float64_t *)(*(_QWORD *)&v51 + 96);
      v94 = (int8x16_t)vsubq_f64(v92, v30[-20]);
      v61.f64[1] = v57;
      _Q3 = (int8x16_t)vsubq_f64(v61, v30[-19]);
      v137 = vaddq_f64(v85, v85);
      *(_QWORD *)v138 = *(_OWORD *)&vaddq_f64(v86, v86);
      *(int8x16_t *)&v138[8] = vextq_s8(v94, _Q3, 8uLL);
      *(int64x2_t *)&v138[24] = vzip2q_s64((int64x2_t)_Q3, v93);
      *(float64x2_t *)&v138[40] = v89;
      *(float64x2_t *)&v138[56] = v88;
      v139 = _Q0;
      *(_QWORD *)&v138[72] = v93.i64[0];
      v140 = *(double *)v94.i64;
      _D19 = *(_QWORD *)(*(_QWORD *)&v50 + 248);
      __asm { FMLA            D3, D19, V2.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[8];
      v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 16), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 136), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 256), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 376), *(float64x2_t *)v138, 1);
      v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 32), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 152), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 272), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 392), *(float64x2_t *)v138, 1);
      v100 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 48), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 168), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 288), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 408), *(float64x2_t *)v138, 1);
      v101 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 64), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 184), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 304), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 424), *(float64x2_t *)v138, 1);
      v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 80), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 200), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 320), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 440), *(float64x2_t *)v138, 1);
      v103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 96), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 216), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 336), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 456), *(float64x2_t *)v138, 1);
      v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 112), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 232), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 352), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 472), *(float64x2_t *)v138, 1);
      _D2 = *(_QWORD *)(*(_QWORD *)&v50 + 488);
      __asm { FMLA            D3, D2, V19.D[1] }
      _Q2 = *(float64x2_t *)(*(_QWORD *)&v50 + 496);
      v107 = (float64x2_t *)(*(_QWORD *)&v50 + 616);
      _V19.D[1] = *(_QWORD *)&v138[24];
      v109 = vmlaq_laneq_f64(vmlaq_n_f64(v98, _Q2, *(double *)&v138[16]), *v107, *(float64x2_t *)&v138[16], 1);
      _Q2.f64[0] = *(float64_t *)(v90 + 472);
      __asm { FMLA            D3, D2, V19.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[40];
      _Q2.f64[0] = *(float64_t *)(v90 + 712);
      __asm { FMLA            D3, D2, V19.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[56];
      _Q2.f64[0] = *(float64_t *)(v90 + 952);
      __asm { FMLA            D3, D2, V19.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[72];
      _Q2.f64[0] = *(float64_t *)(v90 + 1192);
      __asm { FMLA            D3, D2, V19.D[1] }
      _Q2.f64[0] = *(float64_t *)(v90 + 1432);
      __asm { FMLA            D3, D2, V0.D[1] }
      _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v109, *(float64x2_t *)(v90 + 480), *(double *)&v138[32]), *(float64x2_t *)(v90 + 600), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 720), *(double *)&v138[48]), *(float64x2_t *)(v90 + 840), *(float64x2_t *)&v138[48], 1), *(float64x2_t *)(v90 + 960), *(double *)&v138[64]), *(float64x2_t *)(v90 + 1080),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1200),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1320),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1440),
              *(double *)v94.i64);
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v99, *(float64x2_t *)(v90 + 256), *(double *)&v138[16]), v107[1], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 496), *(double *)&v138[32]), *(float64x2_t *)(v90 + 616), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 736),
                          *(double *)&v138[48]),
                        *(float64x2_t *)(v90 + 856),
                        *(float64x2_t *)&v138[48],
                        1),
                      *(float64x2_t *)(v90 + 976),
                      *(double *)&v138[64]),
                    *(float64x2_t *)(v90 + 1096),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1216),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1336),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1456),
              *(double *)v94.i64);
      _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v100, *(float64x2_t *)(v90 + 272), *(double *)&v138[16]), v107[2], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 512), *(double *)&v138[32]), *(float64x2_t *)(v90 + 632), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 752),
                          *(double *)&v138[48]),
                        *(float64x2_t *)(v90 + 872),
                        *(float64x2_t *)&v138[48],
                        1),
                      *(float64x2_t *)(v90 + 992),
                      *(double *)&v138[64]),
                    *(float64x2_t *)(v90 + 1112),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1232),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1352),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1472),
              *(double *)v94.i64);
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v101, *(float64x2_t *)(v90 + 288), *(double *)&v138[16]), v107[3], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 528), *(double *)&v138[32]), *(float64x2_t *)(v90 + 648), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 768),
                           *(double *)&v138[48]),
                         *(float64x2_t *)(v90 + 888),
                         *(float64x2_t *)&v138[48],
                         1),
                       *(float64x2_t *)(v90 + 1008),
                       *(double *)&v138[64]),
                     *(float64x2_t *)(v90 + 1128),
                     *(float64x2_t *)&v138[64],
                     1),
                   *(float64x2_t *)(v90 + 1248),
                   _Q0.f64[0]),
                 *(float64x2_t *)(v90 + 1368),
                 _Q0,
                 1),
               *(float64x2_t *)(v90 + 1488),
               *(double *)v94.i64);
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v102, *(float64x2_t *)(v90 + 304), *(double *)&v138[16]), v107[4], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 544), *(double *)&v138[32]), *(float64x2_t *)(v90 + 664), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 784),
                           *(double *)&v138[48]),
                         *(float64x2_t *)(v90 + 904),
                         *(float64x2_t *)&v138[48],
                         1),
                       *(float64x2_t *)(v90 + 1024),
                       *(double *)&v138[64]),
                     *(float64x2_t *)(v90 + 1144),
                     *(float64x2_t *)&v138[64],
                     1),
                   *(float64x2_t *)(v90 + 1264),
                   _Q0.f64[0]),
                 *(float64x2_t *)(v90 + 1384),
                 _Q0,
                 1),
               *(float64x2_t *)(v90 + 1504),
               *(double *)v94.i64);
      _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v103, *(float64x2_t *)(v90 + 320), *(double *)&v138[16]), v107[5], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 560), *(double *)&v138[32]), *(float64x2_t *)(v90 + 680), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 800),
                           *(double *)&v138[48]),
                         *(float64x2_t *)(v90 + 920),
                         *(float64x2_t *)&v138[48],
                         1),
                       *(float64x2_t *)(v90 + 1040),
                       *(double *)&v138[64]),
                     *(float64x2_t *)(v90 + 1160),
                     *(float64x2_t *)&v138[64],
                     1),
                   *(float64x2_t *)(v90 + 1280),
                   _Q0.f64[0]),
                 *(float64x2_t *)(v90 + 1400),
                 _Q0,
                 1),
               *(float64x2_t *)(v90 + 1520),
               *(double *)v94.i64);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v104, *(float64x2_t *)(v90 + 336), *(double *)&v138[16]), v107[6], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 576), *(double *)&v138[32]), *(float64x2_t *)(v90 + 696), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 816),
                          *(double *)&v138[48]),
                        *(float64x2_t *)(v90 + 936),
                        *(float64x2_t *)&v138[48],
                        1),
                      *(float64x2_t *)(v90 + 1056),
                      *(double *)&v138[64]),
                    *(float64x2_t *)(v90 + 1176),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1296),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1416),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1536),
              *(double *)v94.i64);
      v120 = vmlad_n_f64(*(double *)_Q3.i64, *(double *)(v90 + 1552), *(double *)v94.i64);
      v140 = v120;
      v139 = _Q6;
      *(float64x2_t *)&v138[64] = _Q16;
      *(float64x2_t *)&v138[48] = _Q18;
      *(float64x2_t *)&v138[32] = _Q17;
      *(float64x2_t *)&v138[16] = _Q7;
      *(float64x2_t *)v138 = _Q5;
      v137 = _Q4;
      v141 = 1;
      if (!*(_QWORD *)&v30->f64[0])
      {
        _D1 = _Q4.f64[1];
        __asm { FMLA            D0, D1, V4.D[1] }
        _D1 = _Q5.f64[1];
        __asm { FMLA            D0, D1, V5.D[1] }
        _D1 = _Q7.f64[1];
        __asm { FMLA            D0, D1, V7.D[1] }
        _D1 = _Q17.f64[1];
        __asm { FMLA            D0, D1, V17.D[1] }
        _D1 = _Q18.f64[1];
        __asm { FMLA            D0, D1, V18.D[1] }
        _D1 = _Q16.f64[1];
        __asm { FMLA            D0, D1, V16.D[1] }
        _D1 = _Q6.f64[1];
        __asm { FMLA            D0, D1, V6.D[1] }
        v48 = _D0 + v120 * v120;
LABEL_25:
        *v27++ = v48;
        goto LABEL_26;
      }
      (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)&v30->f64[0] + 24))(*(_QWORD *)&v30->f64[0], &v137);
      if (v141)
      {
        _V7.D[1] = v137.f64[1];
        _D17 = v137.f64[1];
        __asm { FMLA            D16, D17, V7.D[1] }
        _D7 = *(_QWORD *)&v138[8];
        __asm { FMLA            D16, D7, V6.D[1] }
        _D6 = *(_QWORD *)&v138[24];
        __asm { FMLA            D16, D6, V5.D[1] }
        _D5 = *(_QWORD *)&v138[40];
        __asm { FMLA            D16, D5, V4.D[1] }
        _D4 = *(_QWORD *)&v138[56];
        __asm { FMLA            D16, D4, V3.D[1] }
        _D3 = *(_QWORD *)&v138[72];
        __asm { FMLA            D16, D3, V2.D[1] }
        _D2 = v139.f64[1];
        __asm { FMLA            D16, D2, V1.D[1] }
        v48 = _D16 + v140 * v140;
        goto LABEL_25;
      }
    }
LABEL_26:
    v49 = (float64x2_t *)((char *)v30 + 24);
    v30 = (float64x2_t *)((char *)v30 + 504);
  }
  while (v49 != v29);
  v26 = a2[64];
  v6 = a2[66];
LABEL_39:
  v136 = (double *)(v26 + 8 * v6);
  if (v27 != v136)
    a2[66] = v6 + ~((unint64_t)((char *)v136 - (char *)v27 - 8) >> 3);
}

void sub_20F62CB00(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v38;

  v4 = a2[66];
  v5 = v4
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) - *(_QWORD *)(*(_QWORD *)a1 + 800)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) - *(_QWORD *)(*(_QWORD *)a1 + 800)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x5075075075075075
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) - *(_QWORD *)(*(_QWORD *)a1 + 800)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 800);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 808);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 248))
    {
      _Q2 = *(_OWORD *)(v27 + 144);
      _D4 = *(_QWORD *)(v27 + 152);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *(_QWORD *)(v27 + 168);
      __asm { FMLA            D3, D2, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 184);
      __asm { FMLA            D3, D1, V0.D[1] }
      *(_QWORD *)v26 = _D3;
      v26 += 8;
    }
    v27 += 280;
  }
  v38 = (char *)(v25 + 8 * v5);
  if (v26 != v38)
    a2[66] = v5 + ~((unint64_t)(v38 - v26 - 8) >> 3);
}

void sub_20F62CCF4(uint64_t a1, _QWORD *a2, __n128 _Q0, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 *v19;
  __n128 *v20;
  unint64_t v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v43;
  double v45;
  double v47;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  int8x16_t v58;
  float64x2_t v59;
  uint64_t v60;
  char *v64;
  float64x2_t v65;
  _BYTE v66[32];
  char v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  float64_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  uint64_t v75;

  v11 = a2[66];
  v12 = v11
      - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) - *(_QWORD *)(*(_QWORD *)a1 + 800)) >> 3);
  if (v11 >= v12)
    goto LABEL_22;
  v13 = a2[65];
  if (v13 >= v12)
  {
    v30 = a2[66];
    v31 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) - *(_QWORD *)(*(_QWORD *)a1 + 800)) >> 3);
    if (v12 <= v11)
      goto LABEL_22;
    goto LABEL_21;
  }
  v14 = 2 * v13;
  if (v14 <= v12)
    v14 = v11
        - 0x5075075075075075
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) - *(_QWORD *)(*(_QWORD *)a1 + 800)) >> 3);
  a2[65] = v14;
  v15 = (__n128 *)a2[64];
  v16 = operator new[]();
  v17 = v16;
  if (v11)
  {
    v18 = 0;
    if (v11 < 4)
      goto LABEL_11;
    if ((unint64_t)(v16 - (_QWORD)v15) < 0x20)
      goto LABEL_11;
    v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = (__n128 *)(v16 + 16);
    v20 = v15 + 1;
    v21 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v20[-1];
      v22 = *v20;
      v19[-1] = _Q0;
      *v19 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    if (v11 != v18)
    {
LABEL_11:
      v23 = v11 - v18;
      v24 = 8 * v18;
      v25 = &v15->n128_u64[v18];
      v26 = (_QWORD *)(v16 + v24);
      do
      {
        v27 = *v25++;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v17;
  v30 = a2[66];
  v31 = v12 - v30;
  if (v12 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v12;
  v32 = a2[64];
  v33 = (char *)(v32 + 8 * v11);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 800);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 808);
  if (v34 == v35)
    goto LABEL_32;
  do
  {
    if (*(_QWORD *)(v34 + 120))
    {
      v38 = *(_QWORD *)(v34 + 136);
      _Q0.n128_u64[0] = *(_QWORD *)(v38 + 48);
      v39 = *(float64x2_t *)(v38 + 32);
      _D2 = *(double *)(v38 + 72);
      v41 = *(float64x2_t *)(v38 + 56);
      _D4 = *(double *)(v38 + 96);
      v43 = *(float64x2_t *)(v38 + 80);
      a9.f64[0] = *(float64_t *)(v34 + 40);
      _Q7 = *(float64x2_t *)(v34 + 24);
      v45 = *(double *)(v34 + 64);
      _Q17 = *(float64x2_t *)(v34 + 48);
      v47 = *(double *)(v34 + 88);
      _Q19 = *(float64x2_t *)(v34 + 72);
      v49 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, _Q7.f64[0]), v41, _Q17.f64[0]), v43, _Q19.f64[0]);
      v50 = vmlad_n_f64(vmlad_n_f64(_Q0.n128_f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v51 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v39, _Q7, 1), v41, _Q17, 1), v43, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v68 = v49;
      v69 = v50;
      v71 = _Q7.f64[0];
      v70 = v51;
      v72 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, a9.f64[0]), v41, v45), v43, v47);
      v73 = vmulq_f64((float64x2_t)_Q0, a9).f64[0] + _D2 * v45 + _D4 * v47;
      v75 = 0;
      v74 = 0uLL;
      sub_20E9733B8(&v68, v74.f64);
      v55.f64[1] = v74.f64[1];
      *(_QWORD *)v66 = v75;
      v65 = v74;
      v55.f64[0] = *(float64_t *)(v38 + 120);
      v56.f64[0] = *(float64_t *)(v34 + 112);
      *(float64x2_t *)&v66[8] = vsubq_f64(*(float64x2_t *)(v38 + 104), *(float64x2_t *)(v34 + 96));
      *(_QWORD *)&v66[24] = *(_OWORD *)&vsubq_f64(v55, v56);
      v57 = *(float64x2_t **)(v34 + 120);
      _Q0 = (__n128)vmulq_f64(*(float64x2_t *)&v66[16], v57[3]);
      v58 = (int8x16_t)vmulq_f64(*(float64x2_t *)v66, v57[2]);
      v59 = vmulq_f64(v74, v57[1]);
      *(int8x16_t *)v66 = v58;
      *(__n128 *)&v66[16] = _Q0;
      v65 = v59;
      v67 = 1;
      v60 = *(_QWORD *)(v34 + 256);
      if (!v60)
      {
        v36 = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
        v37 = *(double *)vextq_s8(v58, v58, 8uLL).i64;
        v59.f64[1] = *(double *)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).i64;
        _Q0.n128_f64[0] = vmulq_f64(v59, v59).f64[0]
                        + v59.f64[1] * v59.f64[1]
                        + *(double *)v58.i64 * *(double *)v58.i64
                        + v37 * v37
                        + _Q0.n128_f64[0] * _Q0.n128_f64[0]
                        + v36 * v36;
LABEL_25:
        *(_QWORD *)v33 = _Q0.n128_u64[0];
        v33 += 8;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v60 + 24))(v60, &v65);
      if (v67)
      {
        _Q3 = v65;
        _Q0 = (__n128)vmulq_f64(_Q3, _Q3);
        _D4 = v65.f64[1];
        __asm { FMLA            D0, D4, V3.D[1] }
        _Q3.f64[0] = *(float64_t *)&v66[8];
        __asm { FMLA            D0, D3, V2.D[1] }
        _D2 = *(_QWORD *)&v66[24];
        __asm { FMLA            D0, D2, V1.D[1] }
        goto LABEL_25;
      }
    }
LABEL_26:
    v34 += 280;
  }
  while (v34 != v35);
  v32 = a2[64];
  v12 = a2[66];
LABEL_32:
  v64 = (char *)(v32 + 8 * v12);
  if (v33 != v64)
    a2[66] = v12 + ~((unint64_t)(v64 - v33 - 8) >> 3);
}

void sub_20F62D074(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t i;
  double *v46;

  v4 = a2[66];
  v5 = v4
     + 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 832) - *(_QWORD *)(*(_QWORD *)a1 + 824)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x2F028E0D4911E25DLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 832) - *(_QWORD *)(*(_QWORD *)a1 + 824)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x2F028E0D4911E25DLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 832) - *(_QWORD *)(*(_QWORD *)a1 + 824)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 824);
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 832); v27 != i; v27 += 8016)
  {
    if (*(_BYTE *)(v27 + 7984))
    {
      _Q7 = *(_OWORD *)(v27 + 7736);
      _D17 = *(_QWORD *)(v27 + 7744);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(_QWORD *)&_Q7 = *(_QWORD *)(v27 + 7760);
      __asm { FMLA            D16, D7, V6.D[1] }
      _D6 = *(_QWORD *)(v27 + 7776);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(_QWORD *)(v27 + 7792);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v27 + 7808);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *(_QWORD *)(v27 + 7824);
      __asm { FMLA            D16, D3, V2.D[1] }
      _D2 = *(_QWORD *)(v27 + 7840);
      __asm { FMLA            D16, D2, V1.D[1] }
      *v26++ = _D16 + *(double *)(v27 + 7848) * *(double *)(v27 + 7848);
    }
  }
  v46 = (double *)(v25 + 8 * v5);
  if (v26 != v46)
    a2[66] = v5 + ~((unint64_t)((char *)v46 - (char *)v26 - 8) >> 3);
}

void sub_20F62D2BC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  int v47;
  uint64_t v50;
  double *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  char v60;

  v4 = a2[66];
  v5 = v4
     + 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 832) - *(_QWORD *)(*(_QWORD *)a1 + 824)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x2F028E0D4911E25DLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 832) - *(_QWORD *)(*(_QWORD *)a1 + 824)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x2F028E0D4911E25DLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 832) - *(_QWORD *)(*(_QWORD *)a1 + 824)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 824);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 832);
  if (v27 != v28)
  {
    do
    {
      v47 = sub_20F4B0BC8();
      v60 = v47;
      if (v47)
      {
        _X8 = v27 + 16008;
        __asm { PRFM            #0, [X8] }
        v50 = *(_QWORD *)(v27 + 7992);
        if (!v50 || ((*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v50 + 24))(v50, &v52), v60))
        {
          _V7.D[1] = *((_QWORD *)&v52 + 1);
          _D17 = *((_QWORD *)&v52 + 1);
          __asm { FMLA            D16, D17, V7.D[1] }
          _D7 = v53;
          __asm { FMLA            D16, D7, V6.D[1] }
          _D6 = v54;
          __asm { FMLA            D16, D6, V5.D[1] }
          _D5 = v55;
          __asm { FMLA            D16, D5, V4.D[1] }
          _D4 = v56;
          __asm { FMLA            D16, D4, V3.D[1] }
          _D3 = v57;
          __asm { FMLA            D16, D3, V2.D[1] }
          _D2 = v58;
          __asm { FMLA            D16, D2, V1.D[1] }
          *v26++ = _D16 + v59 * v59;
        }
      }
      v27 += 8016;
    }
    while (v27 != v28);
    v25 = a2[64];
    v5 = a2[66];
  }
  v51 = (double *)(v25 + 8 * v5);
  if (v26 != v51)
    a2[66] = v5 + ~((unint64_t)((char *)v51 - (char *)v26 - 8) >> 3);
}

void sub_20F62D57C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t i;
  double *v46;

  v4 = a2[66];
  v5 = v4
     + 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 856) - *(_QWORD *)(*(_QWORD *)a1 + 848)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4515E08719B71393
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 856) - *(_QWORD *)(*(_QWORD *)a1 + 848)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4515E08719B71393
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 856) - *(_QWORD *)(*(_QWORD *)a1 + 848)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 848);
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 856); v27 != i; v27 += 5336)
  {
    if (*(_BYTE *)(v27 + 5304))
    {
      _Q7 = *(_OWORD *)(v27 + 5056);
      _D17 = *(_QWORD *)(v27 + 5064);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(_QWORD *)&_Q7 = *(_QWORD *)(v27 + 5080);
      __asm { FMLA            D16, D7, V6.D[1] }
      _D6 = *(_QWORD *)(v27 + 5096);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(_QWORD *)(v27 + 5112);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v27 + 5128);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *(_QWORD *)(v27 + 5144);
      __asm { FMLA            D16, D3, V2.D[1] }
      _D2 = *(_QWORD *)(v27 + 5160);
      __asm { FMLA            D16, D2, V1.D[1] }
      *v26++ = _D16 + *(double *)(v27 + 5168) * *(double *)(v27 + 5168);
    }
  }
  v46 = (double *)(v25 + 8 * v5);
  if (v26 != v46)
    a2[66] = v5 + ~((unint64_t)((char *)v46 - (char *)v26 - 8) >> 3);
}

void sub_20F62D7C4(uint64_t a1, _QWORD *a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t _Q6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  _QWORD *v35;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  double v61;
  float64x2_t v63;
  float64x2_t v64;
  int8x16_t v65;
  float64x2_t v66;
  int64x2_t v70;
  int64x2_t v71;
  double v72;
  float64x2_t v74;
  float64x2_t v75;
  int8x16_t v76;
  double v77;
  float64x2_t v79;
  float64x2_t v80;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  char v91;
  float64x2_t v92[7];
  float64_t v93;
  uint64_t v94;
  float64x2_t v95[7];
  uint64_t v96;
  uint64_t v97;
  float64x2_t *v98;
  int v99;
  float64x2_t *v100;
  int v101;
  float64x2_t *v102;
  int v103;
  float64x2_t *v104;
  int v105;
  float64x2_t *v106;
  int v107;
  float64x2_t *v108;
  int v109;

  v11 = a2[66];
  v12 = v11
      + 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 856) - *(_QWORD *)(*(_QWORD *)a1 + 848)) >> 3);
  if (v11 >= v12)
    goto LABEL_22;
  v13 = a2[65];
  if (v13 >= v12)
  {
    v30 = a2[66];
    v31 = 0x4515E08719B71393
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 856) - *(_QWORD *)(*(_QWORD *)a1 + 848)) >> 3);
    if (v12 <= v11)
      goto LABEL_22;
    goto LABEL_21;
  }
  v14 = 2 * v13;
  if (v14 <= v12)
    v14 = v11
        + 0x4515E08719B71393
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 856) - *(_QWORD *)(*(_QWORD *)a1 + 848)) >> 3);
  a2[65] = v14;
  v15 = a2[64];
  v16 = operator new[]();
  v17 = v16;
  if (v11)
  {
    v18 = 0;
    if (v11 < 4)
      goto LABEL_11;
    if ((unint64_t)(v16 - v15) < 0x20)
      goto LABEL_11;
    v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = (_OWORD *)(v16 + 16);
    v20 = (__int128 *)(v15 + 16);
    v21 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *v20;
      *(v19 - 1) = *(v20 - 1);
      *v19 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    if (v11 != v18)
    {
LABEL_11:
      v23 = v11 - v18;
      v24 = 8 * v18;
      v25 = (uint64_t *)(v15 + 8 * v18);
      v26 = (_QWORD *)(v16 + v24);
      do
      {
        v27 = *v25++;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v17;
  v30 = a2[66];
  v31 = v12 - v30;
  if (v12 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v12;
  v32 = a2[64];
  v33 = (double *)(v32 + 8 * v11);
  _X22 = *(_QWORD **)(*(_QWORD *)a1 + 848);
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 856);
  if (_X22 != v35)
  {
    do
    {
      __asm { PRFM            #0, [X22,#0x2878] }
      v54 = _X22[628];
      v55 = _X22[629];
      v56 = _X22[630];
      v57 = _X22[631];
      v108 = (float64x2_t *)(v55 + 56);
      v109 = 3;
      v106 = (float64x2_t *)(v55 + 80);
      v107 = 6;
      v104 = (float64x2_t *)(v57 + 56);
      v105 = 3;
      v102 = (float64x2_t *)(v57 + 80);
      v103 = 6;
      v100 = (float64x2_t *)(v55 + 32);
      v101 = 0;
      v98 = (float64x2_t *)(v57 + 32);
      v99 = 0;
      v58.f64[0] = *(float64_t *)(v54 + 48);
      v59 = *(int64x2_t *)(v54 + 32);
      v60 = *(int64x2_t *)(v54 + 56);
      v61 = *(double *)(v54 + 96);
      _Q4 = *(int64x2_t *)(v54 + 80);
      v63 = (float64x2_t)vzip1q_s64(v59, v60);
      v64 = (float64x2_t)vzip2q_s64(v59, v60);
      v58.f64[1] = *(float64_t *)(v54 + 72);
      v65 = vextq_s8((int8x16_t)v64, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      _Q6.f64[0] = *(float64_t *)(v54 + 120);
      v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v54 + 104)), v64, *(float64x2_t *)(v54 + 104), 1), v58, _Q6.f64[0]);
      _D7 = *(_QWORD *)(v54 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q6.f64[0] = _D17 + v61 * _Q6.f64[0];
      _Q7 = vnegq_f64(v66);
      v66.f64[0] = *(float64_t *)(v54 + 80);
      *(_QWORD *)&v64.f64[1] = v65.i64[0];
      v95[4] = v58;
      v95[5] = (float64x2_t)*(unint64_t *)&v61;
      v95[0] = v63;
      v95[1] = (float64x2_t)*(unint64_t *)&v66.f64[0];
      v95[2] = v64;
      v95[3] = (float64x2_t)v65.u64[1];
      v95[6] = _Q7;
      v96 = *(_OWORD *)&vnegq_f64(_Q6);
      v97 = 0x3FF0000000000000;
      v58.f64[0] = *(float64_t *)(v56 + 48);
      v70 = *(int64x2_t *)(v56 + 32);
      v71 = *(int64x2_t *)(v56 + 56);
      v72 = *(double *)(v56 + 96);
      _Q4 = *(int64x2_t *)(v56 + 80);
      v74 = (float64x2_t)vzip1q_s64(v70, v71);
      v75 = (float64x2_t)vzip2q_s64(v70, v71);
      v58.f64[1] = *(float64_t *)(v56 + 72);
      v76 = vextq_s8((int8x16_t)v75, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v77 = *(double *)(v56 + 120);
      _Q7.f64[0] = *(float64_t *)(v56 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q7.f64[0] = *(float64_t *)(v56 + 80);
      v79 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, *(double *)(v56 + 104)), v75, *(float64x2_t *)(v56 + 104), 1), v58, v77));
      *(_QWORD *)&v66.f64[0] = v76.i64[1];
      *(_QWORD *)&v75.f64[1] = v76.i64[0];
      v80 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v72 * v77));
      v92[4] = v58;
      v92[5] = (float64x2_t)*(unint64_t *)&v72;
      v92[0] = v74;
      v92[1] = (float64x2_t)*(unint64_t *)&_Q7.f64[0];
      v92[2] = v75;
      v92[3] = (float64x2_t)*(unint64_t *)&v66.f64[0];
      v92[6] = v79;
      v93 = v80.f64[0];
      v94 = 0x3FF0000000000000;
      sub_20F4D7C54((uint64_t)(_X22 + 230), (uint64_t)v95, (uint64_t)v92, &v100, &v98, &v108, &v104, &v106, (uint64_t)&v83, (float64x2_t)0, v80, (__n128)*(unint64_t *)&_Q7.f64[0], &v102, 0, 0, 0, 0);
      v91 = 1;
      __asm { PRFM            #0, [X22,#0x2998] }
      v82 = _X22[664];
      if (!v82 || ((*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v82 + 24))(v82, &v83), v91))
      {
        *(_QWORD *)&_Q6.f64[1] = v84;
        _V7.D[1] = *((_QWORD *)&v83 + 1);
        _D17 = *((_QWORD *)&v83 + 1);
        __asm { FMLA            D16, D17, V7.D[1] }
        _D7 = v84;
        __asm { FMLA            D16, D7, V6.D[1] }
        *(_QWORD *)&_Q6.f64[0] = v85;
        __asm { FMLA            D16, D6, V5.D[1] }
        _D5 = v86;
        __asm { FMLA            D16, D5, V4.D[1] }
        _D4 = v87;
        __asm { FMLA            D16, D4, V3.D[1] }
        _D3 = v88;
        __asm { FMLA            D16, D3, V2.D[1] }
        _D2 = v89;
        __asm { FMLA            D16, D2, V1.D[1] }
        *v33++ = _D16 + v90 * v90;
      }
      _X22 += 667;
    }
    while (_X22 != v35);
    v32 = a2[64];
    v12 = a2[66];
  }
  if (v33 != (double *)(v32 + 8 * v12))
    a2[66] = v12 + (~(v12 + ((unint64_t)(v32 - (_QWORD)v33 - 8) >> 3)) | 0xE000000000000000);
}

void sub_20F62DC70(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v35;

  v4 = a2[66];
  v5 = v4
     - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x84BDA12F684BDA13
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x7B425ED097B425EDLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 872);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 880);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 184))
    {
      _Q0 = *(_OWORD *)(v27 + 144);
      _D2 = *(_QWORD *)(v27 + 152);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(_QWORD *)v26 = _D1;
      v26 += 8;
    }
    v27 += 216;
  }
  v35 = (char *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)(v35 - v26 - 8) >> 3);
}

void sub_20F62DE48(uint64_t a1, _QWORD *a2, __n128 _Q0, __n128 _Q1, double _D2, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  char v43;

  v12 = a2[66];
  v13 = v12
      - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
  if (v12 >= v13)
    goto LABEL_22;
  v14 = a2[65];
  if (v14 >= v13)
  {
    v30 = a2[66];
    v31 = 0x84BDA12F684BDA13
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
    if (v13 <= v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v15 = 2 * v14;
  if (v15 <= v13)
    v15 = v12
        - 0x7B425ED097B425EDLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
  a2[65] = v15;
  v16 = (__n128 *)a2[64];
  v17 = operator new[]();
  v18 = v17;
  if (v12)
  {
    v19 = 0;
    if (v12 < 4)
      goto LABEL_11;
    if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
      goto LABEL_11;
    v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = (__n128 *)(v17 + 16);
    v21 = v16 + 1;
    v22 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v21[-1];
      _Q1 = *v21;
      v20[-1] = _Q0;
      *v20 = _Q1;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v12 != v19)
    {
LABEL_11:
      v23 = v12 - v19;
      v24 = 8 * v19;
      v25 = &v16->n128_u64[v19];
      v26 = (unint64_t *)(v17 + v24);
      do
      {
        v27 = *v25++;
        _Q0.n128_u64[0] = v27;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v18;
  v30 = a2[66];
  v31 = v13 - v30;
  if (v13 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v13;
  v32 = a2[64];
  v33 = (char *)(v32 + 8 * v12);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 872);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 880);
  if (v34 != v35)
  {
    do
    {
      v39 = sub_20FC7133C(v34 + 8, (uint64_t *)(v34 + 56), (uint64_t)&v42, _Q0.n128_f64[0], _Q1.n128_f64[0], _D2, a6, a7, a8, a9, a10);
      v43 = v39;
      if (v39)
      {
        v40 = *(_QWORD *)(v34 + 192);
        if (!v40 || ((*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v40 + 24))(v40, &v42), v43))
        {
          _Q1 = v42;
          _D2 = v42.n128_f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v33 = _Q0.n128_u64[0];
          v33 += 8;
        }
      }
      v34 += 216;
    }
    while (v34 != v35);
    v32 = a2[64];
    v13 = a2[66];
  }
  v41 = (char *)(v32 + 8 * v13);
  if (v33 != v41)
    a2[66] = v13 + ~((unint64_t)(v41 - v33 - 8) >> 3);
}

void sub_20F62E070(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  char *v40;

  v4 = a2[66];
  v5 = v4
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 904) - *(_QWORD *)(*(_QWORD *)a1 + 896)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xB195E8EFDB195E8FLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 904) - *(_QWORD *)(*(_QWORD *)a1 + 896)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x4E6A171024E6A171
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 904) - *(_QWORD *)(*(_QWORD *)a1 + 896)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 896);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 904);
  if (v27 != v28)
  {
    v29 = (__int128 *)(v27 + 752);
    do
    {
      if (*((_BYTE *)v29 + 104))
      {
        _Q2 = *v29;
        _D4 = *((_QWORD *)v29 + 1);
        __asm { FMLA            D3, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = *((_QWORD *)v29 + 3);
        __asm { FMLA            D3, D2, V1.D[1] }
        _D1 = *((_QWORD *)v29 + 5);
        __asm { FMLA            D3, D1, V0.D[1] }
        *(_QWORD *)v26 = _D3;
        v26 += 8;
      }
      v30 = (uint64_t)v29 + 136;
      v29 = (__int128 *)((char *)v29 + 888);
    }
    while (v30 != v28);
  }
  v40 = (char *)(v25 + 8 * v5);
  if (v26 != v40)
    a2[66] = v5 + ~((unint64_t)(v40 - v26 - 8) >> 3);
}

void sub_20F62E274(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v40;
  _BOOL4 v41;
  uint64_t v42;
  char *v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  BOOL v47;

  v4 = a2[66];
  v5 = v4
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 904) - *(_QWORD *)(*(_QWORD *)a1 + 896)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xB195E8EFDB195E8FLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 904) - *(_QWORD *)(*(_QWORD *)a1 + 896)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x4E6A171024E6A171
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 904) - *(_QWORD *)(*(_QWORD *)a1 + 896)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 896);
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 904);
  if (v27 != v28)
  {
    v29 = v27 + 92;
    do
    {
      v41 = sub_20F3E115C((uint64_t)(v29 - 91), v29, &v44);
      v47 = v41;
      if (v41)
      {
        v42 = v29[16];
        if (!v42 || ((*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v42 + 24))(v42, &v44), v47))
        {
          _V3.D[1] = v44.f64[1];
          _D4 = v44.f64[1];
          __asm { FMLA            D0, D4, V3.D[1] }
          _D3 = *((_QWORD *)&v45 + 1);
          __asm { FMLA            D0, D3, V2.D[1] }
          _D2 = *((_QWORD *)&v46 + 1);
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v26 = _D0;
          v26 += 8;
        }
      }
      v40 = v29 + 19;
      v29 += 111;
    }
    while (v40 != v28);
    v25 = a2[64];
    v5 = a2[66];
  }
  v43 = (char *)(v25 + 8 * v5);
  if (v26 != v43)
    a2[66] = v5 + ~((unint64_t)(v43 - v26 - 8) >> 3);
}

BOOL sub_20F62E4C0(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v2 = a1[1];
  v3 = a1[2];
  if (v2 == v3)
  {
    v4 = 0;
    *a2 = 0;
    v7 = a1[13];
    v8 = a1[14];
    if (v7 != v8)
      goto LABEL_7;
LABEL_43:
    a2[1] = 0;
    v11 = a1[25];
    v12 = a1[26];
    if (v11 != v12)
      goto LABEL_12;
LABEL_44:
    a2[2] = 0;
    v15 = a1[37];
    v16 = a1[38];
    if (v15 != v16)
      goto LABEL_17;
LABEL_45:
    a2[3] = 0;
    v19 = a1[49];
    v20 = a1[50];
    if (v19 != v20)
      goto LABEL_22;
LABEL_46:
    a2[4] = 0;
    v23 = a1[61];
    v24 = a1[62];
    if (v23 != v24)
      goto LABEL_27;
LABEL_47:
    a2[5] = 0;
    v27 = a1[73];
    v28 = a1[74];
    if (v27 != v28)
      goto LABEL_32;
    goto LABEL_48;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v6 + 4) & 6) != 0)
      v4 = 1;
    v5 += *(unsigned __int8 *)(v6 + 20);
    v2 += 16;
  }
  while (v2 != v3);
  *a2 = v5;
  v7 = a1[13];
  v8 = a1[14];
  if (v7 == v8)
    goto LABEL_43;
LABEL_7:
  v9 = 0;
  do
  {
    v10 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v10 + 4) & 6) != 0)
      v4 = 1;
    v9 += *(unsigned __int8 *)(v10 + 20);
    v7 += 16;
  }
  while (v7 != v8);
  a2[1] = v9;
  v11 = a1[25];
  v12 = a1[26];
  if (v11 == v12)
    goto LABEL_44;
LABEL_12:
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v14 + 4) & 6) != 0)
      v4 = 1;
    v13 += *(unsigned __int8 *)(v14 + 20);
    v11 += 16;
  }
  while (v11 != v12);
  a2[2] = v13;
  v15 = a1[37];
  v16 = a1[38];
  if (v15 == v16)
    goto LABEL_45;
LABEL_17:
  v17 = 0;
  do
  {
    v18 = *(_QWORD *)(v15 + 8);
    if ((*(_BYTE *)(v18 + 4) & 6) != 0)
      v4 = 1;
    v17 += *(unsigned __int8 *)(v18 + 20);
    v15 += 16;
  }
  while (v15 != v16);
  a2[3] = v17;
  v19 = a1[49];
  v20 = a1[50];
  if (v19 == v20)
    goto LABEL_46;
LABEL_22:
  v21 = 0;
  do
  {
    v22 = *(_QWORD *)(v19 + 8);
    if ((*(_BYTE *)(v22 + 4) & 6) != 0)
      v4 = 1;
    v21 += *(unsigned __int8 *)(v22 + 20);
    v19 += 16;
  }
  while (v19 != v20);
  a2[4] = v21;
  v23 = a1[61];
  v24 = a1[62];
  if (v23 == v24)
    goto LABEL_47;
LABEL_27:
  v25 = 0;
  do
  {
    v26 = *(_QWORD *)(v23 + 8);
    if ((*(_BYTE *)(v26 + 4) & 6) != 0)
      v4 = 1;
    v25 += *(unsigned __int8 *)(v26 + 20);
    v23 += 16;
  }
  while (v23 != v24);
  a2[5] = v25;
  v27 = a1[73];
  v28 = a1[74];
  if (v27 != v28)
  {
LABEL_32:
    v29 = 0;
    do
    {
      v30 = *(_QWORD *)(v27 + 8);
      if ((*(_BYTE *)(v30 + 4) & 6) != 0)
        v4 = 1;
      v29 += *(unsigned __int8 *)(v30 + 20);
      v27 += 16;
    }
    while (v27 != v28);
    a2[6] = v29;
    v31 = a1[85];
    v32 = a1[86];
    if (v31 != v32)
      goto LABEL_37;
LABEL_49:
    a2[7] = 0;
    return v4 != 0;
  }
LABEL_48:
  a2[6] = 0;
  v31 = a1[85];
  v32 = a1[86];
  if (v31 == v32)
    goto LABEL_49;
LABEL_37:
  v33 = 0;
  do
  {
    v34 = *(_QWORD *)(v31 + 8);
    if ((*(_BYTE *)(v34 + 4) & 6) != 0)
      v4 = 1;
    v33 += *(unsigned __int8 *)(v34 + 20);
    v31 += 16;
  }
  while (v31 != v32);
  a2[7] = v33;
  return v4 != 0;
}

void sub_20F62E744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v10;
  float32x2_t *v11;
  _OWORD *v12;
  double *v13;
  int v14;
  float64x2_t v15;
  float64x2_t v16;
  float32x2_t v17;
  unsigned int v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  int8x16_t v25;
  int64x2_t v26;
  float64x2_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int64x2_t v30;
  uint64_t v31;
  _QWORD *v32;
  float64x2_t *v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  _QWORD *f64;
  float64x2_t *v38;
  uint64_t v39;
  float64x2_t v40;
  double v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t v45;
  float64x2_t *v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  int64x2_t *v53;
  float64x2_t *v54;
  double *v55;
  double *v56;
  _QWORD *v57;
  float64x2_t *v58;
  uint64_t v59;
  double *v60;
  _QWORD *v61;
  uint64_t v62;
  double v63;
  char v64;
  int8x16_t v65;
  double v66;
  float64x2_t v67;
  __int128 v68;
  __int128 v72;
  float64x2_t v73;
  int64x2_t v74;
  _QWORD *v75;
  float64x2_t *v76;
  uint64_t v77;
  double v78;
  double v79;
  float64x2_t v80;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  double v100;
  int64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  __int128 v121;
  _QWORD *v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  _BYTE v130[24];
  float64x2_t v131;
  double v132;
  double v133;
  double v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  double __dst[9];
  float64x2_t *v141;
  float64x2_t *v142;
  float64x2_t *v143;
  float64x2_t *v144;
  uint64_t v145;
  int64x2_t v146;
  float64_t v147;
  int64x2_t v148;
  float64_t v149;
  float64x2_t v150;
  uint64_t v151;
  float64x2_t v152;
  int8x16_t v153;
  int64x2_t v154;
  int64x2_t v155;
  float64x2_t v156;
  uint64_t v157;
  int8x16_t v158;
  float64_t v159;
  __int128 v160;
  unint64_t v161;
  __int128 v162;
  uint64_t v163;

  if (*(_BYTE *)(a1 + 4))
  {
    v1 = a1;
    if (*(_BYTE *)(a1 + 128))
    {
      if (*(_BYTE *)(a1 + 129))
      {
        *(_BYTE *)(a1 + 129) = 0;
        v2 = *(_QWORD *)(a1 + 64);
        v3 = *(_QWORD *)(a1 + 72);
        if (v2 != v3)
        {
          v4 = a1 + 16;
          v122 = (_QWORD *)(a1 + 88);
          __asm { FMOV            V0.2D, #-1.0 }
          v121 = _Q0;
          do
          {
            v11 = *(float32x2_t **)(v2 + 8);
            v10 = *(_QWORD *)(v2 + 16);
            v12 = (_OWORD *)(v10 + 112);
            if (*(_BYTE *)(v10 + 58) && !*(_BYTE *)(v10 + 57))
            {
              *(_OWORD *)(v10 + 176) = 0u;
              *(_OWORD *)(v10 + 192) = 0u;
              *(_OWORD *)(v10 + 144) = 0u;
              *(_OWORD *)(v10 + 160) = 0u;
              *v12 = 0u;
              *(_OWORD *)(v10 + 128) = 0u;
              goto LABEL_7;
            }
            v13 = (double *)sub_20E9DF85C(v122, (uint64_t *)(v10 + 32))[6];
            v14 = *((_DWORD *)v13 + 248);
            if (v14 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_131;
              }
              v14 = *((_DWORD *)v13 + 248);
            }
            if (!v14)
            {
LABEL_130:
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_131:
              abort();
            }
            memmove(__dst, v13, 0x48uLL);
            v139 = 0;
            v137 = 0u;
            v138 = 0u;
            v135 = 0u;
            v136 = 0u;
            sub_20F13B958(v4, __dst, (uint64_t)&v135);
            v17 = v11[1];
            v18 = *((_DWORD *)v13 + 248);
            if (v18 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_131;
              }
              v18 = *((_DWORD *)v13 + 248);
              v19 = vcvtq_f64_f32(v17);
              if (v18 <= 7)
              {
LABEL_16:
                if (!v18)
                  goto LABEL_130;
LABEL_21:
                *(_QWORD *)&v20.f64[0] = v135;
                v16.f64[0] = *(double *)&v135 * *(double *)&v137;
                v21 = *(double *)&v137 * *(double *)&v136 - *((double *)&v135 + 1) * *((double *)&v137 + 1);
                v133 = 1.0 / *(double *)&v135 * v19.f64[0]
                     - vmuld_lane_f64(*((double *)&v135 + 1) / (*(double *)&v135 * *(double *)&v137), v19, 1)
                     - v21 / (*(double *)&v135 * *(double *)&v137);
                v134 = vmuld_lane_f64(1.0 / *(double *)&v137, v19, 1) - *((double *)&v137 + 1) / *(double *)&v137;
                v22 = vmuld_lane_f64(*((double *)&v135 + 1), v19, 1);
                v27.f64[0] = v22 / (v20.f64[0] * v20.f64[0] * *(double *)&v137)
                           - v19.f64[0] / (v20.f64[0] * v20.f64[0])
                           + v21 / (v20.f64[0] * v20.f64[0] * *(double *)&v137);
                v19.f64[0] = v22 / (*(double *)&v137 * (*(double *)&v135 * *(double *)&v137))
                           - *((double *)&v135 + 1)
                           * *((double *)&v137 + 1)
                           / (*(double *)&v137
                            * (*(double *)&v135
                             * *(double *)&v137));
                v24.f64[0] = *(double *)&v137 * *(double *)&v137;
                v23.f64[1] = *((float64_t *)&v121 + 1);
                v23.f64[0] = -(v19.f64[1] - *((double *)&v137 + 1));
                *(_QWORD *)&v15.f64[0] = v121;
                v15.f64[1] = *((float64_t *)&v135 + 1);
                *(_QWORD *)&v24.f64[1] = v137;
                v20.f64[1] = *(double *)&v135 * *(double *)&v137;
                v25 = (int8x16_t)vdivq_f64(v15, v20);
                v26 = (int64x2_t)vdivq_f64(v23, v24);
                v27.f64[1] = v19.f64[0];
                v28.i64[0] = 0;
                v28.i64[1] = v26.i64[1];
                v29 = 0uLL;
                v30 = vzip1q_s64((int64x2_t)0, v26);
LABEL_22:
                v141 = &v131;
                v142 = (float64x2_t *)&v133;
                v143 = (float64x2_t *)v130;
                v144 = &v127;
                v145 = 0;
                v125 = (float64x2_t)v25;
                v126 = v27;
                v123 = (float64x2_t)v30;
                v124 = (float64x2_t)v28;
                if (v18 <= 7)
                  goto LABEL_23;
                goto LABEL_70;
              }
            }
            else
            {
              v19 = vcvtq_f64_f32(v17);
              if (v18 <= 7)
                goto LABEL_16;
            }
            if (v18 <= 0xD)
              goto LABEL_21;
            *(_QWORD *)&v40.f64[0] = v135;
            v16.f64[0] = *(double *)&v135 * *(double *)&v137;
            v41 = *(double *)&v137 * *(double *)&v136 - *((double *)&v135 + 1) * *((double *)&v137 + 1);
            v133 = 1.0 / *(double *)&v135 * v19.f64[0]
                 - vmuld_lane_f64(*((double *)&v135 + 1) / (*(double *)&v135 * *(double *)&v137), v19, 1)
                 - v41 / (*(double *)&v135 * *(double *)&v137);
            v134 = vmuld_lane_f64(1.0 / *(double *)&v137, v19, 1) - *((double *)&v137 + 1) / *(double *)&v137;
            v42 = vmuld_lane_f64(*((double *)&v135 + 1), v19, 1);
            v27.f64[0] = v42 / (v40.f64[0] * v40.f64[0] * *(double *)&v137)
                       - v19.f64[0] / (v40.f64[0] * v40.f64[0])
                       + v41 / (v40.f64[0] * v40.f64[0] * *(double *)&v137);
            v19.f64[0] = *(double *)&v137 * (*(double *)&v135 * *(double *)&v137);
            v15.f64[0] = v42 / v19.f64[0];
            v43.f64[0] = *(double *)&v137 * *(double *)&v137;
            v44.f64[1] = *((float64_t *)&v121 + 1);
            v44.f64[0] = -(v19.f64[1] - *((double *)&v137 + 1));
            *(_QWORD *)&v24.f64[0] = v121;
            v24.f64[1] = *((float64_t *)&v135 + 1);
            *(_QWORD *)&v43.f64[1] = v137;
            v40.f64[1] = *(double *)&v135 * *(double *)&v137;
            v25 = (int8x16_t)vdivq_f64(v24, v40);
            v27.f64[1] = v15.f64[0] - *((double *)&v135 + 1) * *((double *)&v137 + 1) / v19.f64[0];
            v29 = (int8x16_t)vdivq_f64(v44, v43);
            v28.i64[0] = 0;
            v28.i64[1] = v29.i64[1];
            v30 = vzip1q_s64((int64x2_t)0, (int64x2_t)v29);
            if (v18 == 14)
              goto LABEL_22;
            v141 = &v131;
            v142 = (float64x2_t *)&v133;
            v143 = (float64x2_t *)v130;
            v144 = &v127;
            v145 = 0;
            v125 = (float64x2_t)v25;
            v126 = v27;
            v123 = (float64x2_t)v30;
            v124 = (float64x2_t)v28;
            if (v18 != -1)
            {
              v45 = 0;
              v47 = (uint64_t)v141;
              v46 = v142;
              v48 = v143;
              v49 = v144;
LABEL_98:
              v64 = sub_20EB3CED8((uint64_t)v13, v47, v46, v48, v49, v45);
LABEL_99:
              if ((v64 & 1) != 0)
                goto LABEL_126;
              goto LABEL_6;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_131;
            }
            v18 = *((_DWORD *)v13 + 248);
            v25 = (int8x16_t)v125;
            v30.i64[0] = *(_QWORD *)&v123.f64[0];
            v28 = (int32x4_t)v124;
            if (v18 <= 7)
            {
LABEL_23:
              if (v18 > 3)
              {
                v36 = (uint64_t)v141;
                v35 = (double *)v142;
                f64 = (_QWORD *)v143->f64;
                v38 = v144;
                v39 = v145;
                if (v18 > 5)
                {
                  if (v18 == 6)
                  {
                    if (sub_20EB41C58(v13, (uint64_t)v141, v142->f64, v143, (uint64_t)v144, v145))
                      goto LABEL_126;
                  }
                  else if (sub_20EB306CC((uint64_t)v13, (uint64_t)v141, v142, v143, (unint64_t)v144, v145, *(double *)v29.i64, *(double *)v30.i64, v25, (int8x16_t)v28, v15.f64[0], v16.f64[0], v24))
                  {
                    goto LABEL_126;
                  }
                }
                else if (v18 == 5)
                {
                  if (v143)
                  {
                    v143->f64[0] = 0.0;
                    f64[1] = 0;
                    f64[2] = 0;
                  }
                  if (v39)
                  {
                    *(_QWORD *)(v39 + 64) = 0;
                    *(_OWORD *)(v39 + 32) = 0u;
                    *(_OWORD *)(v39 + 48) = 0u;
                    *(_OWORD *)v39 = 0u;
                    *(_OWORD *)(v39 + 16) = 0u;
                  }
                  if (v38)
                  {
                    if ((sub_20EB28F10(v36, (uint64_t)v38, v35, (uint64_t)(v13 + 21), 5) & 1) != 0)
                      goto LABEL_126;
                  }
                  else if ((sub_20EB2886C(v36, v35, (uint64_t)(v13 + 21), 5) & 1) != 0)
                  {
                    goto LABEL_126;
                  }
                }
                else
                {
                  if (v143)
                  {
                    v143->f64[0] = 0.0;
                    f64[1] = 0;
                    f64[2] = 0;
                  }
                  if (v39)
                  {
                    *(_QWORD *)(v39 + 64) = 0;
                    v29 = 0uLL;
                    *(_OWORD *)(v39 + 32) = 0u;
                    *(_OWORD *)(v39 + 48) = 0u;
                    *(_OWORD *)v39 = 0u;
                    *(_OWORD *)(v39 + 16) = 0u;
                  }
                  if (v38)
                  {
                    if (!*((_BYTE *)v13 + 468))
                    {
                      v29.i64[0] = sub_20EB27C0C((uint64_t)v13 + 204, v13 + 21, 0x32uLL, v29, *(double *)v30.i64, v25, (int8x16_t)v28).u64[0];
                      *((_BYTE *)v13 + 468) = 1;
                    }
                    v50 = (float *)v13 + 51;
                    v51 = v36;
                    v52 = (uint64_t)v35;
                    v53 = (int64x2_t *)(v13 + 21);
                    v54 = v38;
                  }
                  else
                  {
                    if (!*((_BYTE *)v13 + 468))
                    {
                      v29.i64[0] = sub_20EB27C0C((uint64_t)v13 + 204, v13 + 21, 0x32uLL, v29, *(double *)v30.i64, v25, (int8x16_t)v28).u64[0];
                      *((_BYTE *)v13 + 468) = 1;
                    }
                    v50 = (float *)v13 + 51;
                    v51 = v36;
                    v52 = (uint64_t)v35;
                    v53 = (int64x2_t *)(v13 + 21);
                    v54 = 0;
                  }
                  v1 = a1;
                  if ((sub_20EA8D684(v51, v52, v53, v50, v54, 5, *(double *)v29.i64, *(double *)v30.i64, *(double *)v25.i64, *(double *)v28.i64, v15.f64[0], v16.f64[0], v24) & 1) != 0)goto LABEL_126;
                }
              }
              else
              {
                if (v18 <= 1)
                {
                  if (!v18)
                    goto LABEL_130;
                  v31 = (uint64_t)v141;
                  v32 = (_QWORD *)v143->f64;
                  v33 = v144;
                  v34 = v145;
                  *v141 = *v142;
                  *(_QWORD *)(v31 + 16) = 0x3FF0000000000000;
                  if (v32)
                  {
                    *v32 = 0;
                    v32[1] = 0;
                    v32[2] = 0;
                  }
                  if (v33)
                  {
                    *v33 = (float64x2_t)xmmword_210312EC0;
                    v33[1] = (float64x2_t)unk_210312ED0;
                    v33[2] = (float64x2_t)xmmword_210312EE0;
                  }
                  if (v34)
                  {
                    *(_QWORD *)(v34 + 64) = 0;
                    *(_OWORD *)(v34 + 32) = 0u;
                    *(_OWORD *)(v34 + 48) = 0u;
                    *(_OWORD *)v34 = 0u;
                    *(_OWORD *)(v34 + 16) = 0u;
                  }
                  goto LABEL_126;
                }
                if (v18 == 2)
                {
                  if ((sub_20EA8D22C((uint64_t)&v141, (uint64_t)v13) & 1) != 0)
                    goto LABEL_126;
                }
                else
                {
                  v55 = (double *)v141;
                  v56 = (double *)v142;
                  v57 = (_QWORD *)v143->f64;
                  v58 = v144;
                  v59 = v145;
                  if (v143)
                  {
                    v143->f64[0] = 0.0;
                    v57[1] = 0;
                    v57[2] = 0;
                  }
                  if (v59)
                  {
                    *(_QWORD *)(v59 + 64) = 0;
                    v29.i64[0] = 0;
                    *(_OWORD *)(v59 + 32) = 0u;
                    *(_OWORD *)(v59 + 48) = 0u;
                    *(_OWORD *)v59 = 0u;
                    *(_OWORD *)(v59 + 16) = 0u;
                  }
                  if (v58)
                  {
                    if ((sub_20EB27398(v55, (uint64_t)v58, v56, (int64x2_t *)(v13 + 21), 20, *(double *)v29.i64, *(double *)v30.i64, *(double *)v25.i64, *(double *)v28.i64, (int64x2_t)v15) & 1) != 0)goto LABEL_126;
                  }
                  else if ((sub_20EB23DF0((uint64_t)v55, v56, (int64x2_t *)(v13 + 21), 20, *(double *)v29.i64, *(double *)v30.i64, *(double *)v25.i64, *(double *)v28.i64, (int64x2_t)v15, v16) & 1) != 0)
                  {
                    goto LABEL_126;
                  }
                }
              }
              goto LABEL_6;
            }
LABEL_70:
            v47 = (uint64_t)v141;
            if (v18 > 0xB)
            {
              if (v18 > 0xD)
              {
                v46 = v142;
                v48 = v143;
                v49 = v144;
                v45 = v145;
                if (v18 != 14)
                  goto LABEL_98;
                if (v143)
                {
                  v143->f64[0] = 0.0;
                  v48->f64[1] = 0.0;
                  v48[1].f64[0] = 0.0;
                }
                if (v45)
                {
                  *(_QWORD *)(v45 + 64) = 0;
                  *(_OWORD *)(v45 + 32) = 0u;
                  *(_OWORD *)(v45 + 48) = 0u;
                  *(_OWORD *)v45 = 0u;
                  *(_OWORD *)(v45 + 16) = 0u;
                }
                v66 = (*v13 + v13[4]) * 0.5;
                v64 = sub_20EB253A0(v47, (uint64_t)v46, v13 + 21, v13 + 49, 0x14u, v66);
                if (!v49)
                  goto LABEL_99;
                if ((v64 & 1) != 0 && sub_20EB2498C(&v152, (uint64_t)&v153, &v150, v47, v13 + 21, v66))
                {
LABEL_96:
                  v65.i64[0] = *(_QWORD *)(v47 + 16);
                  v67 = *(float64x2_t *)v47;
                  *(_QWORD *)&v68 = v154.i64[0];
                  _Q3 = v153;
                  v156 = v67;
                  v157 = v65.i64[0];
                  v151 = 0;
                  *(_QWORD *)&_Q5.f64[0] = v65.i64[0];
                  _Q5.f64[1] = v67.f64[0];
                  _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v155, _Q5), (float64x2_t)vzip2q_s64(v155, v154), (float64x2_t)vextq_s8(*(int8x16_t *)&v67, v65, 8uLL)).f64[1];
                  __asm { FMLA            D6, D5, V3.D[1] }
                  if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v154, v67), 1), (float64x2_t)v155, v67).f64[0], *(double *)v154.i64)) >= 0.00000001)
                  {
                    *(_QWORD *)&v72 = vextq_s8(v153, v153, 8uLL).u64[0];
                    _Q3.i64[1] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
                    *((_QWORD *)&v72 + 1) = v155.i64[0];
                    *((_QWORD *)&v68 + 1) = vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
                    v158 = _Q3;
                    v159 = v67.f64[0];
                    v161 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
                    v160 = v72;
                    v163 = v65.i64[0];
                    v162 = v68;
                    sub_20E8BE424((uint64_t)&v146);
                    v73.f64[0] = v147;
                    v74 = vzip2q_s64(v146, v148);
                    v73.f64[1] = v149;
                    *(int64x2_t *)v49 = vzip1q_s64(v146, v148);
                    v49[1] = (float64x2_t)v74;
                    v49[2] = v73;
LABEL_126:
                    v79 = v132;
                    v80 = v131;
                    _D2 = v131.f64[1];
                    __asm { FMLA            D3, D2, V1.D[1] }
                    v83 = _D3 + v79 * v79;
                    v84 = sqrt(v83);
                    v85 = v83 * v84;
                    v86 = 1.0 / v84 - vmuld_n_f64(v80.f64[0], v80.f64[0]) / (v83 * v84);
                    v87 = -v131.f64[1] * v131.f64[0] / (v83 * v84);
                    v88 = -v132 * v131.f64[0] / (v83 * v84);
                    v89 = vmuld_lane_f64(-v80.f64[0], v80, 1) / (v83 * v84);
                    v90 = 1.0 / v84 - vmuld_lane_f64(v131.f64[1], v131, 1) / (v83 * v84);
                    v91 = vmuld_lane_f64(-v132, v131, 1) / (v83 * v84);
                    v92 = -(v131.f64[0] * v132) / (v83 * v84);
                    v93 = 1.0 / v84 - v79 * v79 / (v83 * v84);
                    v95 = (int64x2_t)xmmword_2103B5F00;
                    v94 = *(int64x2_t *)algn_2103B5F10;
                    _Q2 = (int64x2_t)xmmword_2103B5F20;
                    v97 = (int64x2_t)unk_2103B5F30;
                    v99 = (int64x2_t)xmmword_2103B5F40;
                    v98 = (int64x2_t)unk_2103B5F50;
                    v100 = -(v131.f64[1] * v132) / v85;
                    v102 = (int64x2_t)xmmword_2103B5F60;
                    v101 = (int64x2_t)unk_2103B5F70;
                    if (*(_BYTE *)(v1 + 56))
                    {
                      __asm { FMOV            V2.2D, #1.0 }
                      _Q2.i64[0] = *(_QWORD *)(v1 + 48);
                      v101 = (int64x2_t)xmmword_2102DD520;
                      v98 = (int64x2_t)xmmword_21030D320;
                      v95 = 0uLL;
                      v94 = 0uLL;
                      v97 = 0uLL;
                      v99 = 0uLL;
                      v102 = 0uLL;
                    }
                    v103 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v127, v86), v128, v87), v129, v88);
                    v104 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v127, v89), v128, v90), v129, v91);
                    v105 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v127, v92), v128, v100), v129, v93);
                    v106 = vmlaq_laneq_f64(vmulq_n_f64(v126, v103.f64[0]), v123, v103, 1);
                    v107 = vmlaq_laneq_f64(vmulq_n_f64(v125, v103.f64[0]), v124, v103, 1);
                    v108 = vmlaq_laneq_f64(vmulq_n_f64(v126, v104.f64[0]), v123, v104, 1);
                    v109 = vmlaq_laneq_f64(vmulq_n_f64(v125, v104.f64[0]), v124, v104, 1);
                    v110 = vmlaq_laneq_f64(vmulq_n_f64(v126, v105.f64[0]), v123, v105, 1);
                    v111 = vmlaq_laneq_f64(vmulq_n_f64(v125, v105.f64[0]), v124, v105, 1);
                    v112 = (float64x2_t)vzip1q_s64(v95, _Q2);
                    v113 = (float64x2_t)vzip2q_s64(v95, _Q2);
                    v114 = (float64x2_t)vzip1q_s64(v94, v97);
                    v115 = (float64x2_t)vzip2q_s64(v94, v97);
                    v116 = (float64x2_t)vzip1q_s64(v99, v102);
                    v117 = (float64x2_t)vzip2q_s64(v99, v102);
                    v118 = (float64x2_t)vzip1q_s64(v98, v101);
                    v119 = (float64x2_t)vzip2q_s64(v98, v101);
                    *(float64x2_t *)(v10 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v112, v106.f64[0]), v113, v106, 1), v114, v107.f64[0]), v115, v107, 1);
                    *(float64x2_t *)(v10 + 128) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v106.f64[0]), v117, v106, 1), v118, v107.f64[0]), v119, v107, 1);
                    *(float64x2_t *)(v10 + 144) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v112, v108.f64[0]), v113, v108, 1), v114, v109.f64[0]), v115, v109, 1);
                    *(float64x2_t *)(v10 + 160) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v108.f64[0]), v117, v108, 1), v118, v109.f64[0]), v119, v109, 1);
                    *(float64x2_t *)(v10 + 176) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v112, v110.f64[0]), v113, v110, 1), v114, v111.f64[0]), v115, v111, 1);
                    *(float64x2_t *)(v10 + 192) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v110.f64[0]), v117, v110, 1), v118, v111.f64[0]), v119, v111, 1);
                    goto LABEL_7;
                  }
                }
              }
              else if (v18 == 13)
              {
                if ((sub_20EB43734(v13, (uint64_t)v141, (uint64_t)v142, v143, (uint64_t)v144, v145) & 1) != 0)
                  goto LABEL_126;
              }
              else
              {
                v75 = (_QWORD *)v143->f64;
                v76 = v144;
                v77 = v145;
                if (v143)
                {
                  v143->f64[0] = 0.0;
                  v75[1] = 0;
                  v75[2] = 0;
                }
                if (v77)
                {
                  *(_QWORD *)(v77 + 64) = 0;
                  *(_OWORD *)(v77 + 32) = 0u;
                  *(_OWORD *)(v77 + 48) = 0u;
                  *(_OWORD *)v77 = 0u;
                  *(_OWORD *)(v77 + 16) = 0u;
                }
                *(_QWORD *)v47 = 0;
                *(_QWORD *)(v47 + 8) = 0;
                *(_QWORD *)(v47 + 16) = 0;
                if (v76)
                {
                  v76[1] = 0u;
                  v76[2] = 0u;
                  *v76 = 0u;
                }
              }
            }
            else
            {
              v60 = (double *)v142;
              v61 = (_QWORD *)v143->f64;
              v49 = v144;
              v62 = v145;
              if (v18 <= 9)
              {
                if (v18 == 9)
                {
                  if (sub_20EB35004((uint64_t)v13, (uint64_t)v141, v142, v143, (unint64_t)v144, v145, *(double *)v29.i64, *(double *)v30.i64, *(double *)v25.i64, v28, (int32x4_t)v15))
                  {
                    goto LABEL_126;
                  }
                }
                else
                {
                  if (v143)
                  {
                    v143->f64[0] = 0.0;
                    v61[1] = 0;
                    v61[2] = 0;
                  }
                  if (v62)
                  {
                    *(_QWORD *)(v62 + 64) = 0;
                    v29.i64[0] = 0;
                    *(_OWORD *)(v62 + 32) = 0u;
                    *(_OWORD *)(v62 + 48) = 0u;
                    *(_OWORD *)v62 = 0u;
                    *(_OWORD *)(v62 + 16) = 0u;
                  }
                  if (v49)
                  {
                    if ((sub_20EB277C4(v47, (uint64_t)v49, v60, (uint64_t)(v13 + 21), 20, *(double *)v29.i64, *(double *)v30.i64, *(double *)v25.i64, v28, (int32x4_t)v15) & 1) != 0)goto LABEL_126;
                  }
                  else
                  {
                    v78 = sqrt(*v60 * *v60 + v60[1] * v60[1]);
                    if ((sub_20EB24018(v47, v60, v13 + 21, 20, v78, v78, *(double *)v25.i64, v28, (int32x4_t)v15) & 1) != 0)
                      goto LABEL_126;
                  }
                }
                goto LABEL_6;
              }
              if (v18 != 10)
              {
                if (sub_20EB38E20((uint64_t)v13, (uint64_t)v141, v142, v143, v144, v145))
                  goto LABEL_126;
                goto LABEL_6;
              }
              if (v143)
              {
                v143->f64[0] = 0.0;
                v61[1] = 0;
                v61[2] = 0;
              }
              if (v62)
              {
                *(_QWORD *)(v62 + 64) = 0;
                *(_OWORD *)(v62 + 32) = 0u;
                *(_OWORD *)(v62 + 48) = 0u;
                *(_OWORD *)v62 = 0u;
                *(_OWORD *)(v62 + 16) = 0u;
              }
              v63 = (*v13 + v13[4]) * 0.5;
              v64 = sub_20EB24F38(v47, (uint64_t)v60, (uint64_t)(v13 + 21), v13 + 35, 0x14u, v63);
              if (!v49)
                goto LABEL_99;
              if ((v64 & 1) != 0 && sub_20EB2450C(&v152, (uint64_t)&v153, &v150, v47, v13 + 21, v63))
                goto LABEL_96;
            }
LABEL_6:
            *(_WORD *)(v10 + 57) = 256;
            *v12 = 0u;
            *(_OWORD *)(v10 + 128) = 0u;
            *(_OWORD *)(v10 + 144) = 0u;
            *(_OWORD *)(v10 + 160) = 0u;
            *(_OWORD *)(v10 + 176) = 0u;
            *(_OWORD *)(v10 + 192) = 0u;
LABEL_7:
            v2 += 24;
          }
          while (v2 != v3);
        }
      }
    }
  }
}

void sub_20F62F34C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float64x2_t *v3;
  float32x2_t *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  int8x16_t v10;
  int32x4_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float32x2_t v16;
  char *v17;
  unsigned int v18;
  float64x2_t v19;
  double v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  float64x2_t *v29;
  uint64_t v30;
  float64x2_t *v31;
  char v32;
  double *v33;
  uint64_t v34;
  float64x2_t *v35;
  float64x2_t *v36;
  uint64_t v37;
  double *v38;
  double v39;
  double v40;
  int8x16_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double *v50;
  float64x2_t *v51;
  uint64_t v52;
  double *v53;
  double v54;
  double v55;
  __int128 v58;
  float64x2_t v59;
  int64x2_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  uint64_t v63;
  double *v64;
  double *v65;
  float64x2_t *v66;
  float64x2_t *v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  int v81;
  int v82;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  int v91;
  int v92;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  BOOL v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  int v104;
  double v105;
  double v108;
  double v109;
  double v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v125;
  float64x2_t v128;
  double v129;
  float64x2_t v130;
  float64x2_t v131;
  int v132;
  double v133;
  double v135;
  double v137;
  float64x2_t v138;
  float64x2_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  float64x2_t v145;
  float64x2_t v146;
  int v147;
  double v148;
  _QWORD *v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  float64x2_t v155;
  double v156;
  _QWORD v157[2];
  char *v158;
  float64x2_t *v159;
  float64x2_t *v160;
  float64x2_t *v161;
  float64x2_t *v162;
  uint64_t v163;
  int64x2_t v164;
  float64_t v165;
  int64x2_t v166;
  float64_t v167;
  float64x2_t v168;
  uint64_t v169;
  float64x2_t v170;
  int8x16_t v171;
  int64x2_t v172;
  int64x2_t v173;
  float64x2_t v174;
  uint64_t v175;
  float64x2_t v176;
  _BYTE v177[32];
  float64x2_t v178;
  uint64_t v179;

  if (*(_QWORD *)(a1 + 288))
  {
    if (*(_BYTE *)(a1 + 4))
    {
      if (*(_BYTE *)(a1 + 304))
      {
        *(_BYTE *)(a1 + 304) = 0;
        v1 = *(_QWORD *)(a1 + 240);
        v2 = *(_QWORD *)(a1 + 248);
        if (v1 != v2)
        {
          v151 = (_QWORD *)(a1 + 264);
          v3 = (float64x2_t *)(a1 + 16);
          do
          {
            v4 = *(float32x2_t **)(v1 + 8);
            v5 = *(_QWORD *)(v1 + 16);
            v6 = (_OWORD *)(v5 + 208);
            if (*(_BYTE *)(v5 + 58) && !*(_BYTE *)(v5 + 57))
            {
              *(_OWORD *)(v5 + 272) = 0u;
              *(_OWORD *)(v5 + 288) = 0u;
              *(_OWORD *)(v5 + 240) = 0u;
              *(_OWORD *)(v5 + 256) = 0u;
              *v6 = 0u;
              *(_OWORD *)(v5 + 224) = 0u;
              goto LABEL_7;
            }
            v7 = sub_20E9DF85C(v151, (uint64_t *)(v5 + 32))[5];
            v8 = (char *)operator new();
            sub_20E972DB4((uint64_t)v8, v7);
            memcpy(v8 + 1000, (const void *)(v7 + 1000), 0x1B8uLL);
            v158 = v8;
            sub_20F6182A0(v8, v3, v9);
            v16 = v4[1];
            v17 = v158;
            v18 = *((_DWORD *)v158 + 248);
            if (v18 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_227;
              }
              v18 = *((_DWORD *)v17 + 248);
              v19 = vcvtq_f64_f32(v16);
              if (v18 > 7)
                goto LABEL_16;
            }
            else
            {
              v19 = vcvtq_f64_f32(v16);
              if (v18 > 7)
                goto LABEL_16;
            }
            if (!v18)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_227:
              abort();
            }
LABEL_16:
            v20 = v19.f64[1];
            *(double *)v11.i64 = *((double *)v17 + 11)
                               + *((double *)v17 + 9) * v19.f64[0]
                               + vmuld_lane_f64(*((double *)v17 + 10), v19, 1);
            v10.i64[0] = *((_QWORD *)v17 + 14);
            v19.f64[0] = v19.f64[1] * *((double *)v17 + 13) + *(double *)v10.i64;
            v157[0] = v11.i64[0];
            v157[1] = *(_QWORD *)&v19.f64[0];
            v21 = (uint64_t)v158;
            v159 = &v155;
            v160 = (float64x2_t *)v157;
            v161 = 0;
            v162 = (float64x2_t *)&v152;
            v163 = 0;
            v22 = *((_DWORD *)v158 + 248);
            if (v22 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_225;
              }
              v22 = *(_DWORD *)(v21 + 992);
              if (v22 > 7)
              {
LABEL_29:
                v27 = (uint64_t)v159;
                if (v22 > 0xB)
                {
                  if (v22 > 0xD)
                  {
                    v50 = (double *)v160;
                    v51 = v161;
                    v31 = v162;
                    v52 = v163;
                    if (v22 == 14)
                    {
                      if (v161)
                      {
                        v161->f64[0] = 0.0;
                        v51->f64[1] = 0.0;
                        v51[1].f64[0] = 0.0;
                      }
                      if (v52)
                      {
                        *(_QWORD *)(v52 + 64) = 0;
                        *(_OWORD *)(v52 + 32) = 0u;
                        *(_OWORD *)(v52 + 48) = 0u;
                        *(_OWORD *)v52 = 0u;
                        *(_OWORD *)(v52 + 16) = 0u;
                      }
                      v53 = (double *)(v21 + 392);
                      v54 = *(double *)v21 + *(double *)(v21 + 32);
                      v55 = v54 * 0.5;
                      if (v31)
                      {
                        if (!sub_20EB253A0(v27, (uint64_t)v50, (double *)(v21 + 168), v53, 0x14u, v54 * 0.5))goto LABEL_112;
                        if (!sub_20EB2498C(&v170, (uint64_t)&v171, &v168, v27, (double *)(v21 + 168), v55))
                          goto LABEL_112;
                        v41.i64[0] = *(_QWORD *)(v27 + 16);
                        v42 = *(float64x2_t *)v27;
                        *(_QWORD *)&v43.f64[0] = v172.i64[0];
                        _Q3 = (float64x2_t)v171;
                        v174 = v42;
                        v175 = v41.i64[0];
                        v169 = 0;
                        *(_QWORD *)&_Q5.f64[0] = v41.i64[0];
                        _Q5.f64[1] = v42.f64[0];
                        _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v173, _Q5), (float64x2_t)vzip2q_s64(v173, v172), (float64x2_t)vextq_s8(*(int8x16_t *)&v42, v41, 8uLL)).f64[1];
                        __asm { FMLA            D6, D5, V3.D[1] }
                        if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v172, v42), 1), (float64x2_t)v173, v42).f64[0], *(double *)v172.i64)) < 0.00000001)goto LABEL_112;
                        goto LABEL_67;
                      }
                      v32 = sub_20EB253A0(v27, (uint64_t)v50, (double *)(v21 + 168), v53, 0x14u, v54 * 0.5);
                    }
                    else
                    {
                      v32 = sub_20EB3CED8(v21, (uint64_t)v159, v160, v161, v162, v163);
                    }
                  }
                  else
                  {
                    if (v22 != 13)
                    {
                      v62 = v161;
                      v61 = v162;
                      v63 = v163;
                      if (v161)
                      {
                        v161->f64[0] = 0.0;
                        v62->f64[1] = 0.0;
                        v62[1].f64[0] = 0.0;
                      }
                      if (v63)
                      {
                        *(_QWORD *)(v63 + 64) = 0;
                        *(_OWORD *)(v63 + 32) = 0u;
                        *(_OWORD *)(v63 + 48) = 0u;
                        *(_OWORD *)v63 = 0u;
                        *(_OWORD *)(v63 + 16) = 0u;
                      }
                      *(_QWORD *)v27 = 0;
                      *(_QWORD *)(v27 + 8) = 0;
                      *(_QWORD *)(v27 + 16) = 0;
                      if (v61)
                      {
                        v61[1] = 0u;
                        v61[2] = 0u;
                        *v61 = 0u;
                      }
LABEL_112:
                      *(_OWORD *)(v5 + 272) = 0u;
                      *(_OWORD *)(v5 + 288) = 0u;
                      *(_OWORD *)(v5 + 240) = 0u;
                      *(_OWORD *)(v5 + 256) = 0u;
                      *v6 = 0u;
                      *(_OWORD *)(v5 + 224) = 0u;
                      v72 = (uint64_t)v158;
                      v158 = 0;
                      if (!v72)
                        goto LABEL_7;
LABEL_164:
                      sub_20E8E931C((uint64_t)&v158, v72);
                      goto LABEL_7;
                    }
                    v32 = sub_20EB43734((double *)v21, (uint64_t)v159, (uint64_t)v160, v161, (uint64_t)v162, v163);
                  }
                }
                else
                {
                  v28 = (double *)v160;
                  v29 = v161;
                  v31 = v162;
                  v30 = v163;
                  if (v22 > 9)
                  {
                    if (v22 == 10)
                    {
                      if (v161)
                      {
                        v161->f64[0] = 0.0;
                        v29->f64[1] = 0.0;
                        v29[1].f64[0] = 0.0;
                      }
                      if (v30)
                      {
                        *(_QWORD *)(v30 + 64) = 0;
                        *(_OWORD *)(v30 + 32) = 0u;
                        *(_OWORD *)(v30 + 48) = 0u;
                        *(_OWORD *)v30 = 0u;
                        *(_OWORD *)(v30 + 16) = 0u;
                      }
                      v38 = (double *)(v21 + 280);
                      v39 = *(double *)v21 + *(double *)(v21 + 32);
                      v40 = v39 * 0.5;
                      if (v31)
                      {
                        if (!sub_20EB24F38(v27, (uint64_t)v28, v21 + 168, v38, 0x14u, v39 * 0.5))
                          goto LABEL_112;
                        if (!sub_20EB2450C(&v170, (uint64_t)&v171, &v168, v27, (double *)(v21 + 168), v40))
                          goto LABEL_112;
                        v41.i64[0] = *(_QWORD *)(v27 + 16);
                        v42 = *(float64x2_t *)v27;
                        *(_QWORD *)&v43.f64[0] = v172.i64[0];
                        _Q3 = (float64x2_t)v171;
                        v174 = v42;
                        v175 = v41.i64[0];
                        v169 = 0;
                        *(_QWORD *)&_Q5.f64[0] = v41.i64[0];
                        _Q5.f64[1] = v42.f64[0];
                        _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v173, _Q5), (float64x2_t)vzip2q_s64(v173, v172), (float64x2_t)vextq_s8(*(int8x16_t *)&v42, v41, 8uLL)).f64[1];
                        __asm { FMLA            D6, D5, V3.D[1] }
                        if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v172, v42), 1), (float64x2_t)v173, v42).f64[0], *(double *)v172.i64)) < 0.00000001)goto LABEL_112;
LABEL_67:
                        *(_QWORD *)&v58 = vextq_s8(v171, v171, 8uLL).u64[0];
                        *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u64[0];
                        *((_QWORD *)&v58 + 1) = v173.i64[0];
                        *(_QWORD *)&v43.f64[1] = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u64[0];
                        v176 = _Q3;
                        *(float64_t *)v177 = v42.f64[0];
                        *(_QWORD *)&v177[24] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
                        *(_OWORD *)&v177[8] = v58;
                        v179 = v41.i64[0];
                        v178 = v43;
                        sub_20E8BE424((uint64_t)&v164);
                        v59.f64[0] = v165;
                        v60 = vzip2q_s64(v164, v166);
                        v59.f64[1] = v167;
                        *(int64x2_t *)v31 = vzip1q_s64(v164, v166);
                        v31[1] = (float64x2_t)v60;
                        v31[2] = v59;
                        goto LABEL_106;
                      }
                      v32 = sub_20EB24F38(v27, (uint64_t)v28, v21 + 168, v38, 0x14u, v39 * 0.5);
                    }
                    else
                    {
                      v32 = sub_20EB38E20(v21, (uint64_t)v159, v160, v161, v162, v163);
                    }
                  }
                  else if (v22 == 9)
                  {
                    v32 = sub_20EB35004(v21, (uint64_t)v159, v160, v161, (unint64_t)v162, v163, v19.f64[0], v20, *(double *)v10.i64, v11, (int32x4_t)v12);
                  }
                  else
                  {
                    if (v161)
                    {
                      v161->f64[0] = 0.0;
                      v29->f64[1] = 0.0;
                      v29[1].f64[0] = 0.0;
                    }
                    if (v30)
                    {
                      *(_QWORD *)(v30 + 64) = 0;
                      v19.f64[0] = 0.0;
                      *(_OWORD *)(v30 + 32) = 0u;
                      *(_OWORD *)(v30 + 48) = 0u;
                      *(_OWORD *)v30 = 0u;
                      *(_OWORD *)(v30 + 16) = 0u;
                    }
                    if (v31)
                    {
                      v32 = sub_20EB277C4(v27, (uint64_t)v31, v28, v21 + 168, 20, v19.f64[0], v20, *(double *)v10.i64, v11, (int32x4_t)v12);
                    }
                    else
                    {
                      v69 = sqrt(*v28 * *v28 + v28[1] * v28[1]);
                      v32 = sub_20EB24018(v27, v28, (double *)(v21 + 168), 20, v69, v69, *(double *)v10.i64, v11, (int32x4_t)v12);
                    }
                  }
                }
                goto LABEL_105;
              }
            }
            else if (v22 > 7)
            {
              goto LABEL_29;
            }
            if (v22 > 3)
            {
              v34 = (uint64_t)v159;
              v33 = (double *)v160;
              v35 = v161;
              v36 = v162;
              v37 = v163;
              if (v22 > 5)
              {
                if (v22 == 6)
                  v32 = sub_20EB41C58((double *)v21, (uint64_t)v159, v160->f64, v161, (uint64_t)v162, v163);
                else
                  v32 = sub_20EB306CC(v21, (uint64_t)v159, v160, v161, (unint64_t)v162, v163, v19.f64[0], v20, v10, (int8x16_t)v11, v12.f64[0], v13.f64[0], v14);
              }
              else if (v22 == 5)
              {
                if (v161)
                {
                  v161->f64[0] = 0.0;
                  v35->f64[1] = 0.0;
                  v35[1].f64[0] = 0.0;
                }
                if (v37)
                {
                  *(_QWORD *)(v37 + 64) = 0;
                  *(_OWORD *)(v37 + 32) = 0u;
                  *(_OWORD *)(v37 + 48) = 0u;
                  *(_OWORD *)v37 = 0u;
                  *(_OWORD *)(v37 + 16) = 0u;
                }
                if (v36)
                  v32 = sub_20EB28F10(v34, (uint64_t)v36, v33, v21 + 168, 5);
                else
                  v32 = sub_20EB2886C(v34, v33, v21 + 168, 5);
              }
              else
              {
                if (v161)
                {
                  v161->f64[0] = 0.0;
                  v35->f64[1] = 0.0;
                  v35[1].f64[0] = 0.0;
                }
                if (v37)
                {
                  *(_QWORD *)(v37 + 64) = 0;
                  v19 = 0uLL;
                  *(_OWORD *)(v37 + 32) = 0u;
                  *(_OWORD *)(v37 + 48) = 0u;
                  *(_OWORD *)v37 = 0u;
                  *(_OWORD *)(v37 + 16) = 0u;
                }
                if (v36)
                {
                  if (!*(_BYTE *)(v21 + 468))
                  {
                    *(_QWORD *)&v19.f64[0] = sub_20EB27C0C(v21 + 204, (double *)(v21 + 168), 0x32uLL, (int8x16_t)v19, v20, v10, (int8x16_t)v11).u64[0];
                    *(_BYTE *)(v21 + 468) = 1;
                  }
                  v32 = sub_20EA8D684(v34, (uint64_t)v33, (int64x2_t *)(v21 + 168), (float *)(v21 + 204), v36, 5, v19.f64[0], v20, *(double *)v10.i64, *(double *)v11.i64, v12.f64[0], v13.f64[0], v14);
                }
                else
                {
                  if (!*(_BYTE *)(v21 + 468))
                  {
                    *(_QWORD *)&v19.f64[0] = sub_20EB27C0C(v21 + 204, (double *)(v21 + 168), 0x32uLL, (int8x16_t)v19, v20, v10, (int8x16_t)v11).u64[0];
                    *(_BYTE *)(v21 + 468) = 1;
                  }
                  v32 = sub_20EA8D684(v34, (uint64_t)v33, (int64x2_t *)(v21 + 168), (float *)(v21 + 204), 0, 5, v19.f64[0], v20, *(double *)v10.i64, *(double *)v11.i64, v12.f64[0], v13.f64[0], v14);
                }
              }
            }
            else
            {
              if (v22 <= 1)
              {
                if (!v22)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_225:
                  abort();
                }
                v23 = (uint64_t)v159;
                v25 = v161;
                v24 = v162;
                v26 = v163;
                *v159 = *v160;
                *(_QWORD *)(v23 + 16) = 0x3FF0000000000000;
                if (v25)
                {
                  v25->f64[0] = 0.0;
                  v25->f64[1] = 0.0;
                  v25[1].f64[0] = 0.0;
                }
                if (v24)
                {
                  *v24 = (float64x2_t)xmmword_210312EC0;
                  v24[1] = (float64x2_t)unk_210312ED0;
                  v24[2] = (float64x2_t)xmmword_210312EE0;
                }
                if (v26)
                {
                  *(_QWORD *)(v26 + 64) = 0;
                  *(_OWORD *)(v26 + 32) = 0u;
                  *(_OWORD *)(v26 + 48) = 0u;
                  *(_OWORD *)v26 = 0u;
                  *(_OWORD *)(v26 + 16) = 0u;
                }
                goto LABEL_106;
              }
              if (v22 == 2)
              {
                v32 = sub_20EA8D22C((uint64_t)&v159, v21);
              }
              else
              {
                v64 = (double *)v159;
                v65 = (double *)v160;
                v67 = v161;
                v66 = v162;
                v68 = v163;
                if (v161)
                {
                  v161->f64[0] = 0.0;
                  v67->f64[1] = 0.0;
                  v67[1].f64[0] = 0.0;
                }
                if (v68)
                {
                  *(_QWORD *)(v68 + 64) = 0;
                  v19.f64[0] = 0.0;
                  *(_OWORD *)(v68 + 32) = 0u;
                  *(_OWORD *)(v68 + 48) = 0u;
                  *(_OWORD *)v68 = 0u;
                  *(_OWORD *)(v68 + 16) = 0u;
                }
                if (v66)
                  v32 = sub_20EB27398(v64, (uint64_t)v66, v65, (int64x2_t *)(v21 + 168), 20, v19.f64[0], v20, *(double *)v10.i64, *(double *)v11.i64, (int64x2_t)v12);
                else
                  v32 = sub_20EB23DF0((uint64_t)v64, v65, (int64x2_t *)(v21 + 168), 20, v19.f64[0], v20, *(double *)v10.i64, *(double *)v11.i64, (int64x2_t)v12, v13);
              }
            }
LABEL_105:
            if ((v32 & 1) == 0)
              goto LABEL_112;
LABEL_106:
            v70 = (uint64_t)v158;
            v71 = *((_DWORD *)v158 + 248);
            if (v71 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_229;
              }
              v71 = *(_DWORD *)(v70 + 992);
              if (v71 > 7)
              {
LABEL_116:
                if (v71 <= 0xB)
                {
                  if (v71 > 9)
                  {
                    if (v71 != 10)
                    {
LABEL_220:
                      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
                      abort();
                    }
                  }
                  else if (v71 == 9)
                  {
                    goto LABEL_220;
                  }
LABEL_218:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 808, (uint64_t)"", 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
LABEL_229:
                  abort();
                }
                if (v71 > 0xD)
                {
                  if (v71 != 14)
                    goto LABEL_220;
                  goto LABEL_218;
                }
                if (v71 == 13)
                  sub_20EB43BB4();
                _Q0 = v155;
                _D2 = v155.f64[1];
                __asm { FMLA            D1, D2, V0.D[1] }
                if (_D1 >= 0.00000001)
                {
                  v76 = sqrt(_D1);
                  v77 = fabs(v156);
                  v78 = fabs(v76);
                  v79 = v77 / v78;
                  if (v77 >= v78)
                    v79 = v78 / v77;
                  if (v79 <= 0.414213562)
                  {
                    v81 = 1;
                    v82 = 2;
                    v80 = v79;
                  }
                  else
                  {
                    v80 = (v78 - v77) / (v77 + v78);
                    if (v77 >= v78)
                      v80 = -v80;
                    v81 = -1;
                    v82 = 1;
                  }
                  v100 = v79 <= 0.414213562;
                  v101 = v80 * v80 * (v80 * v80);
                  v15 = vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v80 * v80), (float64x2_t)xmmword_210315380), v101);
                  v102 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v80 * v80), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v80 * v80), (float64x2_t)xmmword_210315370), v101)), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v80 * v80), (float64x2_t)xmmword_210315340), v15), v101 * v101));
                  v103 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v102, 1);
                  v104 = !v100;
                  v105 = v80 + v80 * vdivq_f64(v102, v103).f64[0];
                  if (v76 == INFINITY && v77 == INFINITY)
                    v105 = 0.785398163;
                  if (v77 >= v78)
                    v82 = v104;
                  else
                    v81 = -v81;
                  if (v156 < 0.0)
                  {
                    v81 = -v81;
                    v82 = 4 - v82;
                  }
                  if (v76 < 0.0)
                  {
                    v81 = -v81;
                    v82 = -v82;
                  }
                  if (v76 == 0.0 && v156 == 0.0)
                    v108 = 0.0;
                  else
                    v108 = v105;
                  goto LABEL_160;
                }
                goto LABEL_162;
              }
            }
            else if (v71 > 7)
            {
              goto LABEL_116;
            }
            if (v71 <= 3)
            {
              if (v71 > 1)
              {
                _Q0 = v155;
                _D1 = v155.f64[1];
                __asm { FMLA            D3, D1, V0.D[1] }
                if (v71 == 2)
                {
                  v12.f64[0] = _Q3.f64[0] * (_Q3.f64[0] * _Q3.f64[0]);
                  _Q3.f64[1] = _Q3.f64[0] * _Q3.f64[0];
                  v12.f64[1] = 0.0;
                  v95 = vdivq_f64(v155, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v156, 0));
                  v96 = vmulq_n_f64(_Q3, v95.f64[0]);
                  v97 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v12.f64[0], v95.f64[0]);
                  v98 = vmulq_laneq_f64(_Q3, v95, 1);
                  v99 = vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v12.f64[0], v95, 1);
                  goto LABEL_163;
                }
                if (_Q3.f64[0] >= 0.00000001)
                {
                  v76 = sqrt(_Q3.f64[0]);
                  v140 = fabs(v156);
                  v141 = fabs(v76);
                  v142 = v140 / v141;
                  if (v140 >= v141)
                    v142 = v141 / v140;
                  if (v142 <= 0.414213562)
                  {
                    v81 = 1;
                    v82 = 2;
                    v143 = v142;
                  }
                  else
                  {
                    v143 = (v141 - v140) / (v141 + v140);
                    if (v140 >= v141)
                      v143 = -v143;
                    v81 = -1;
                    v82 = 1;
                  }
                  v100 = v142 <= 0.414213562;
                  v144 = v143 * v143 * (v143 * v143);
                  v15 = vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v143 * v143), (float64x2_t)xmmword_210315380), v144);
                  v145 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v143 * v143), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v143 * v143), (float64x2_t)xmmword_210315370), v144)), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v143 * v143), (float64x2_t)xmmword_210315340), v15), v144 * v144));
                  v146 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v145, 1);
                  v147 = !v100;
                  v148 = v143 + v143 * vdivq_f64(v145, v146).f64[0];
                  if (v140 == INFINITY && v76 == INFINITY)
                    v148 = 0.785398163;
                  if (v140 >= v141)
                    v82 = v147;
                  else
                    v81 = -v81;
                  if (v156 < 0.0)
                  {
                    v81 = -v81;
                    v82 = 4 - v82;
                  }
                  if (v76 < 0.0)
                  {
                    v81 = -v81;
                    v82 = -v82;
                  }
                  v108 = 0.0;
                  if (v156 != 0.0 || v76 != 0.0)
                    v108 = v148;
LABEL_160:
                  v109 = (double)v82 * 3.061617e-17 + (double)v82 * 0.785398163 + v108 * (double)v81;
                  v110 = v109 * v109;
                  v111.f64[0] = v109 * (v109 * v109);
                  v111.f64[1] = v110 * v111.f64[0];
                  v112 = vmulq_n_f64(v111, v110 * v110);
                  v12 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v76, 0));
                  v96 = vmulq_n_f64(v111, v12.f64[0]);
                  v97 = vmulq_n_f64(v112, v12.f64[0]);
                  v98 = vmulq_laneq_f64(v111, v12, 1);
                  v99 = vmulq_laneq_f64(v112, v12, 1);
                  goto LABEL_163;
                }
              }
              else if (!v71)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                goto LABEL_229;
              }
LABEL_162:
              v96 = 0uLL;
              v97 = 0uLL;
              v98 = 0uLL;
              v99 = 0uLL;
              goto LABEL_163;
            }
            if (v71 > 5)
            {
              if (v71 == 6)
                sub_20EB42068();
              sub_20EB34694(v70, &v176, &v155);
              v99 = v178;
              v98 = *(float64x2_t *)&v177[16];
              v97 = *(float64x2_t *)v177;
              v96 = v176;
            }
            else
            {
              _V0.D[1] = v155.f64[1];
              _D1 = v155.f64[1];
              __asm { FMLA            D2, D1, V0.D[1] }
              if (_D2 < 0.00000001)
                goto LABEL_162;
              *(double *)&v86 = sqrt(_D2);
              v87 = fabs(v156);
              v88 = fabs(*(double *)&v86);
              v89 = v87 / v88;
              if (v87 >= v88)
                v89 = v88 / v87;
              if (v89 <= 0.414213562)
              {
                v91 = 1;
                v92 = 2;
                v90 = v89;
              }
              else
              {
                v90 = (v88 - v87) / (v88 + v87);
                if (v87 >= v88)
                  v90 = -v90;
                v91 = -1;
                v92 = 1;
              }
              v100 = v89 <= 0.414213562;
              v129 = v90 * v90 * (v90 * v90);
              v15 = vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v90 * v90), (float64x2_t)xmmword_210315380), v129);
              v130 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v90 * v90), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v90 * v90), (float64x2_t)xmmword_210315370), v129)), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v90 * v90), (float64x2_t)xmmword_210315340), v15), v129 * v129));
              v131 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v130, 1);
              v132 = !v100;
              v133 = v90 + v90 * vdivq_f64(v130, v131).f64[0];
              if (v87 == INFINITY && *(double *)&v86 == INFINITY)
                v133 = 0.785398163;
              if (v87 >= v88)
                v92 = v132;
              else
                v91 = -v91;
              if (v156 < 0.0)
              {
                v91 = -v91;
                v92 = 4 - v92;
              }
              if (v86 < 0)
              {
                v91 = -v91;
                v92 = -v92;
              }
              v135 = 0.0;
              if (v156 != 0.0 || *(double *)&v86 != 0.0)
                v135 = v133;
              v137 = (double)v92 * 3.061617e-17 + (double)v92 * 0.785398163 + v135 * (double)v91;
              v138.f64[0] = v137 * (v137 * v137);
              v138.f64[1] = v137 * v137 * v138.f64[0];
              v139 = vmulq_n_f64(v138, v137 * v137 * (v137 * v137));
              v12 = vdivq_f64(v155, (float64x2_t)vdupq_lane_s64(v86, 0));
              v96 = vmulq_n_f64(v138, v12.f64[0]);
              v97 = vmulq_n_f64(v139, v12.f64[0]);
              v98 = vmulq_laneq_f64(v138, v12, 1);
              v99 = vmulq_laneq_f64(v139, v12, 1);
            }
LABEL_163:
            v12.f64[0] = v156;
            _Q5 = v155;
            _Q6 = vmulq_f64(_Q5, _Q5);
            _D7 = v155.f64[1];
            __asm { FMLA            D6, D7, V5.D[1] }
            _Q6.f64[0] = 1.0 / sqrt(_Q6.f64[0] + v12.f64[0] * v12.f64[0]);
            _Q7 = vmulq_n_f64(v155, _Q6.f64[0]);
            _Q16 = vmulq_f64(_Q6, vmulq_f64(v12, _Q6));
            _Q17 = vmulq_n_f64(_Q7, _Q6.f64[0]);
            _Q5.f64[0] = vmuld_lane_f64(_Q6.f64[0], v155, 1);
            v15.f64[0] = _Q5.f64[0] * _Q16.f64[0];
            _Q16.f64[0] = v156 * _Q6.f64[0] * _Q16.f64[0];
            v119.f64[0] = 0.0;
            v119.f64[1] = _Q6.f64[0];
            v120 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], _Q17, _Q7.f64[0], 0);
            *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v15);
            v121 = vmlsq_lane_f64(v119, _Q17, _Q5.f64[0], 0);
            *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vsubq_f64(_Q6, _Q16);
            _Q6 = vmlsq_lane_f64((float64x2_t)0, _Q17, v156 * _Q6.f64[0], 0);
            *(_QWORD *)&_Q17.f64[0] = v154.i64[0];
            _Q19 = (float64x2_t)vzip1q_s64(v152, v153);
            _Q4 = (float64x2_t)vzip2q_s64(v152, v153);
            *(_QWORD *)&_Q16.f64[0] = vdupq_laneq_s64(v154, 1).u64[0];
            v125 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v120, vnegq_f64(_Q19).f64[0]), v121, _Q19, 1), _Q6, *(double *)v154.i64, 0);
            __asm
            {
              FMLS            D22, D7, V19.D[1]
              FMLS            D22, D5, V17.D[0]
            }
            v128 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v120, vnegq_f64(_Q4).f64[0]), v121, _Q4, 1), _Q6, _Q16.f64[0], 0);
            __asm
            {
              FMLS            D6, D7, V4.D[1]
              FMLS            D6, D5, V16.D[0]
            }
            *(float64x2_t *)(v5 + 208) = vmlaq_n_f64(vmulq_n_f64(v96, v125.f64[0]), v98, v128.f64[0]);
            *(float64x2_t *)(v5 + 224) = vmlaq_n_f64(vmulq_n_f64(v97, v125.f64[0]), v99, v128.f64[0]);
            *(float64x2_t *)(v5 + 240) = vmlaq_laneq_f64(vmulq_laneq_f64(v96, v125, 1), v98, v128, 1);
            *(float64x2_t *)(v5 + 256) = vmlaq_laneq_f64(vmulq_laneq_f64(v97, v125, 1), v99, v128, 1);
            *(float64x2_t *)(v5 + 272) = vmlaq_n_f64(vmulq_n_f64(v96, _D22), v98, _Q6.f64[0]);
            *(float64x2_t *)(v5 + 288) = vmlaq_n_f64(vmulq_n_f64(v97, _D22), v99, _Q6.f64[0]);
            v72 = (uint64_t)v158;
            v158 = 0;
            if (v72)
              goto LABEL_164;
LABEL_7:
            v1 += 24;
          }
          while (v1 != v2);
        }
      }
    }
  }
}

void sub_20F63043C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v30;

  v30 = a29;
  a29 = 0;
  if (!v30)
    _Unwind_Resume(exception_object);
  sub_20E8E931C((uint64_t)&a29, v30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F6304A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(char *)(a1 + 1391) < 0)
  {
    operator delete(*(void **)(a1 + 1368));
    if ((*(char *)(a1 + 1367) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_9:
      operator delete(*(void **)(a1 + 1320));
      v2 = (_QWORD *)(a1 + 696);
      v3 = *(_QWORD **)(a1 + 720);
      if (v3 != (_QWORD *)(a1 + 696))
        goto LABEL_5;
LABEL_10:
      v4 = 4;
      v3 = v2;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 1367) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 1344));
  if (*(char *)(a1 + 1343) < 0)
    goto LABEL_9;
LABEL_4:
  v2 = (_QWORD *)(a1 + 696);
  v3 = *(_QWORD **)(a1 + 720);
  if (v3 == (_QWORD *)(a1 + 696))
    goto LABEL_10;
LABEL_5:
  if (!v3)
    goto LABEL_12;
  v4 = 5;
LABEL_11:
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_12:
  v5 = *(_QWORD **)(a1 + 688);
  if (v5 == (_QWORD *)(a1 + 664))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 664);
  }
  else
  {
    if (!v5)
      goto LABEL_17;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_17:
  v7 = *(_QWORD **)(a1 + 656);
  if (v7 == (_QWORD *)(a1 + 632))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 632);
  }
  else
  {
    if (!v7)
      goto LABEL_22;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_22:
  v9 = *(_QWORD **)(a1 + 624);
  if (v9 == (_QWORD *)(a1 + 600))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 600);
    goto LABEL_26;
  }
  if (v9)
  {
    v10 = 5;
LABEL_26:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)(a1 + 584) = 0;
  v11 = *(_QWORD *)(a1 + 568);
  if (v11 != a1 + 56 && v11)
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  return a1;
}

_QWORD **sub_20F630600(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F63F644(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C408963B0DFLL);
  }
  return a1;
}

uint64_t sub_20F630644(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  float64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  __int128 *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t v27;
  __int16 v28;
  BOOL v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v35;
  int8x16_t v36;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int8x16_t v46;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  float64x2_t *v64;
  float64x2_t *v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  float64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  int v88;
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  unsigned int v95;
  int v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  __int16 v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _DWORD *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  int v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t *v139;
  __int128 *v140;
  unsigned __int8 v141;
  uint64_t v143;
  uint64_t i;
  unsigned __int8 v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t j;
  uint64_t v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  char *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  void *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  void *v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v186;
  int v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  __int128 v198;
  char *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  double v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _QWORD *v229;
  float64x2_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v242;
  char v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 *v256;
  __int128 *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int *v261;
  __int128 *v262;
  unsigned int v263;
  int v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  const char *v268;
  size_t v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  const char *v272;
  size_t v273;
  _BYTE *v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  NSObject *v278;
  uint64_t v279;
  uint64_t v280;
  size_t v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  _DWORD *v289;
  char *v290;
  uint64_t v291;
  const char *v292;
  void *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  int v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  void *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  int v318;
  int v319;
  unint64_t v320;
  uint64_t v321;
  const char *v322;
  size_t v323;
  unsigned __int8 v324;
  unsigned __int8 v325;
  const char *v326;
  size_t v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t v330;
  _BYTE *v331;
  NSObject *v332;
  uint64_t v333;
  uint64_t v334;
  size_t v335;
  std::__shared_weak_count_vtbl *v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  const char *v345;
  void *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  void *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  _QWORD *v370;
  _QWORD *v371;
  char v372;
  char *v373;
  float64x2_t v375;
  __int128 v376;
  float64x2_t v379;
  int8x16_t v380;
  int8x16_t v381;
  float64x2_t v382;
  float64x2_t v384;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  int8x16_t v394;
  char *v395;
  unint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  _BYTE *v405;
  _DWORD *v406;
  int64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  _OWORD *v412;
  char *v413;
  uint64_t v414;
  __int128 v415;
  int v416;
  __int128 *v417;
  __int128 *v418;
  unint64_t v419;
  unint64_t v420;
  unsigned int *v421;
  __int128 *v422;
  unsigned int v423;
  uint64_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  char *v429;
  unint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  _BYTE *v439;
  _DWORD *v440;
  int64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  _OWORD *v446;
  char *v447;
  uint64_t v448;
  __int128 v449;
  int v450;
  char v451;
  _QWORD *v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 v456;
  unsigned int v457;
  unint64_t v458;
  char v459;
  unsigned int v460;
  uint64_t v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  unsigned int v470;
  _QWORD *v471;
  uint64_t *v472;
  uint64_t *v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  _BOOL4 v483;
  int8x16_t v484;
  int8x16_t v485;
  _QWORD *v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  __int128 v495;
  std::__shared_weak_count *v496;
  unint64_t *p_shared_owners;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unsigned int v505;
  unint64_t *v506;
  unint64_t v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  uint64_t v524;
  uint64_t v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  uint64_t v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  int8x16_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  uint64_t v548;
  __int128 v549;
  __int128 v550;
  uint64_t v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  __int128 v556;
  uint64_t v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  __int128 v561;
  __int128 v562;
  uint64_t v563;
  __int128 v564;
  __int128 v565;
  uint64_t v566;
  __int128 v567;
  __int128 v568;
  uint64_t v569;
  __int128 v570;
  __int128 v571;
  uint64_t v572;
  uint64_t v573;
  __int128 v574;
  unint64_t *v575;
  unsigned int v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  void *v581;
  __int8 v582;
  int v583;
  uint64_t v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  char *v589;
  char *v590;
  unint64_t v591;
  unint64_t v592;
  unint64_t *v593;
  unint64_t v594;
  char *v595;
  uint64_t v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  int v600;
  __int16 v601;
  __int128 v602;
  unint64_t *v603;
  unint64_t v604;
  unint64_t v605;
  char *v606;
  char *v607;
  char *v608;
  unint64_t v609;
  unint64_t v610;
  unsigned int *v611;
  char *v612;
  unsigned int v613;
  uint64_t v614;
  char *v615;
  char *v616;
  char *v617;
  unint64_t v618;
  unint64_t v619;
  unsigned int *v620;
  char *v621;
  unsigned int v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unsigned int *v626;
  char *v627;
  unsigned int v628;
  uint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unsigned int *v632;
  char *v633;
  unsigned int v634;
  uint64_t v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  void *v648;
  void **v649;
  void **v650;
  unint64_t v651;
  unint64_t v652;
  void **v653;
  void *v654;
  void **v655;
  uint64_t v656;
  unint64_t *v657;
  unint64_t v658;
  unint64_t *v659;
  unint64_t v660;
  unint64_t v661;
  char *v662;
  char *v663;
  char *v664;
  unint64_t v665;
  unint64_t v666;
  unsigned int *v667;
  char *v668;
  unsigned int v669;
  uint64_t v670;
  char *v671;
  char *v672;
  char *v673;
  unint64_t v674;
  unint64_t v675;
  unsigned int *v676;
  char *v677;
  unsigned int v678;
  uint64_t v679;
  unint64_t v680;
  unint64_t v681;
  unsigned int *v682;
  char *v683;
  unsigned int v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unsigned int *v688;
  char *v689;
  unsigned int v690;
  uint64_t v691;
  void *v692;
  void **v693;
  char *v694;
  uint64_t v695;
  void **v696;
  unint64_t v697;
  void **v698;
  void **v699;
  uint64_t v700;
  void **v701;
  void **v702;
  __int128 v705;
  void *v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  void *v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  void *v733;
  void *v734;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  void *v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  void *v749;
  _QWORD *v750;
  char v752;
  uint64_t v753;
  uint64_t v754;
  void **v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  unint64_t *v778;
  unint64_t v779;
  unint64_t *v780;
  unint64_t v781;
  int v782;
  unint64_t v783;
  unint64_t v784;
  uint64_t v786;
  size_t v787;
  unsigned __int8 v788;
  const char *v789;
  size_t v790;
  _BYTE *v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  _BYTE *v795;
  uint64_t v796;
  uint64_t v797;
  NSObject *v798;
  size_t v799;
  std::__shared_weak_count_vtbl *v800;
  std::__shared_weak_count *v801;
  int v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  char *v809;
  uint64_t v810;
  uint64_t v811;
  void *v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  std::__shared_weak_count *v816;
  unint64_t *v817;
  unint64_t v818;
  uint64_t v819;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  unint64_t v822;
  std::__shared_weak_count *v823;
  unint64_t *v824;
  unint64_t v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  void *v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  unint64_t *v836;
  unint64_t v837;
  unint64_t *v838;
  uint64_t v839;
  uint64_t v840;
  std::__shared_weak_count *v841;
  char *v842;
  char *v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  unint64_t v847;
  unint64_t v848;
  char *v849;
  _QWORD *v850;
  unint64_t v851;
  char *v853;
  __int128 v854;
  __int128 v855;
  char *v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  uint64_t v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  uint64_t v869;
  char *v871;
  __int128 v875;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  uint64_t v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  char *v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  uint64_t v897;
  unint64_t v899;
  unint64_t v900;
  unint64_t v901;
  char *v902;
  char *v903;
  uint64_t v904;
  _QWORD *v905;
  __int128 v906;
  char *v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  uint64_t v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  char *v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  char *v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  uint64_t v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  uint64_t v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t v944;
  char *v945;
  char *v946;
  char *v947;
  char *v948;
  std::__shared_weak_count *v949;
  unint64_t *v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  char *v955;
  unint64_t v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  unint64_t v977;
  uint64_t v978;
  unint64_t v979;
  char *v980;
  char *v981;
  char *v982;
  uint64_t v983;
  char *v984;
  unint64_t v986;
  __int128 v987;
  __int128 v988;
  _OWORD *v989;
  __int128 v990;
  __int128 v991;
  uint64_t v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  uint64_t v1002;
  _OWORD *v1006;
  __int128 v1008;
  unint64_t v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  uint64_t v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  unint64_t v1023;
  char *v1024;
  unint64_t v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  unint64_t v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t v1039;
  __int128 v1040;
  __int128 v1041;
  _OWORD *v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  uint64_t v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  uint64_t v1055;
  uint64_t v1057;
  __int128 v1061;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  uint64_t v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  uint64_t v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  uint64_t v1083;
  char *v1085;
  uint64_t v1086;
  char *v1087;
  std::__shared_weak_count *v1088;
  unint64_t *v1089;
  unint64_t v1090;
  unint64_t *v1091;
  unint64_t v1092;
  char *v1093;
  __int128 v1094;
  uint64_t v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  uint64_t v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  uint64_t v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  uint64_t v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  uint64_t v1136;
  char *v1137;
  uint64_t v1138;
  unint64_t v1139;
  char *v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  uint64_t v1179;
  void **v1180;
  unint64_t v1181;
  void **v1182;
  char *v1185;
  char *v1186;
  uint64_t v1187;
  __int128 v1188;
  uint64_t v1189;
  uint64_t v1190;
  char *v1191;
  __int128 v1192;
  uint64_t v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  uint64_t v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  uint64_t v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  uint64_t v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  uint64_t v1209;
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  uint64_t v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  uint64_t v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  uint64_t v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  uint64_t v1225;
  __int128 v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  __int128 v1230;
  void **v1231;
  char *v1233;
  __int128 v1234;
  char *v1235;
  __int128 v1236;
  __int128 v1237;
  uint64_t v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  uint64_t v1248;
  void **v1250;
  uint64_t v1251;
  void **v1252;
  _QWORD *v1253;
  char *v1254;
  __int128 v1257;
  void *v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  void *v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  void *v1285;
  void *v1286;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  void *v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  void *v1301;
  _QWORD *v1302;
  char v1304;
  void **v1305;
  uint64_t v1306;
  std::__shared_weak_count *v1307;
  unint64_t *v1308;
  unint64_t v1309;
  unint64_t *v1310;
  unint64_t v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t *v1326;
  uint64_t *v1327;
  uint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  unsigned int v1331;
  _QWORD *v1332;
  unint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  _QWORD *v1337;
  _QWORD *v1338;
  __int128 v1339;
  _QWORD *v1340;
  _QWORD *v1341;
  int v1342;
  uint64_t v1343;
  unint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  _QWORD *v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  _QWORD *v1351;
  uint64_t v1352;
  uint64_t *v1353;
  uint64_t *v1354;
  uint64_t *v1355;
  unsigned int v1356;
  unint64_t v1357;
  uint64_t *v1358;
  unint64_t v1359;
  unint64_t v1360;
  uint64_t v1361;
  std::__shared_weak_count *v1362;
  unint64_t *v1363;
  unint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  char *v1367;
  char *v1368;
  unint64_t v1369;
  unint64_t v1370;
  unsigned int *v1371;
  char *v1372;
  unsigned int v1373;
  uint64_t v1374;
  int v1375;
  uint64_t v1376;
  uint64_t *v1380;
  uint64_t v1381;
  double *v1382;
  uint64_t v1383;
  double *v1384;
  double v1386;
  float64x2_t v1389;
  double v1391;
  double v1392;
  double v1394;
  uint64_t v1405;
  unsigned int v1406;
  __int128 *v1407;
  uint64_t *v1410;
  std::string::size_type v1411;
  unint64_t *v1412;
  unint64_t v1413;
  void *v1414;
  uint64_t v1415;
  void (***v1416)(uint64_t);
  void (**v1417)(uint64_t);
  uint64_t v1418;
  double v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unsigned int v1423;
  uint64_t v1424;
  uint64_t v1425;
  float32x2_t *v1426;
  char *v1427;
  char *v1428;
  unint64_t v1429;
  unint64_t v1430;
  unsigned int *v1431;
  char *v1432;
  unsigned int v1433;
  int v1434;
  uint64_t v1435;
  void *v1436;
  int v1437;
  void *v1438;
  double *v1439;
  uint64_t *v1443;
  uint64_t v1444;
  double *v1445;
  uint64_t v1446;
  double *v1447;
  double v1449;
  float64x2_t v1452;
  double v1454;
  double v1455;
  double v1457;
  uint64_t v1468;
  void *v1469;
  unsigned int v1470;
  __int128 *v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  _QWORD *v1475;
  _QWORD *v1476;
  void *v1477;
  void *v1478;
  _QWORD *v1479;
  _QWORD *v1480;
  int v1481;
  uint64_t *v1484;
  std::string::size_type v1485;
  _QWORD *v1486;
  _QWORD *v1487;
  _QWORD *v1488;
  _QWORD *v1489;
  uint64_t v1490;
  uint64_t k;
  unsigned int v1492;
  char *v1493;
  char *v1494;
  unint64_t v1495;
  unint64_t v1496;
  unsigned int *v1497;
  char *v1498;
  unsigned int v1499;
  int v1500;
  uint64_t *v1501;
  uint64_t v1502;
  uint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  BOOL v1506;
  uint64_t v1507;
  uint64_t v1508;
  _DWORD *v1509;
  unsigned int v1510;
  char *v1511;
  char *v1512;
  unint64_t v1513;
  unint64_t v1514;
  unsigned int *v1515;
  char *v1516;
  unsigned int v1517;
  int v1518;
  char v1519;
  _QWORD *v1520;
  _QWORD *v1521;
  _QWORD *v1522;
  _QWORD *v1523;
  uint64_t v1524;
  std::__shared_weak_count *v1525;
  unint64_t *v1526;
  unint64_t v1527;
  unsigned int v1528;
  char *v1529;
  char *v1530;
  unint64_t v1531;
  unint64_t v1532;
  unsigned int *v1533;
  char *v1534;
  unsigned int v1535;
  unint64_t *v1536;
  unint64_t v1537;
  _QWORD *v1538;
  _QWORD *v1539;
  _QWORD *v1541;
  unint64_t v1542;
  _QWORD *v1543;
  uint64_t v1544;
  _QWORD *v1545;
  _QWORD *v1546;
  double v1547;
  double v1548;
  double v1549;
  double v1550;
  double v1551;
  unsigned int v1552;
  _QWORD *v1553;
  unint64_t v1554;
  _DWORD *v1555;
  _QWORD *v1556;
  _DWORD *v1557;
  _BYTE *v1558;
  int v1559;
  _QWORD *v1560;
  uint64_t v1561;
  unint64_t v1562;
  unint64_t v1563;
  _BYTE *v1564;
  _DWORD *v1565;
  int64_t v1566;
  unint64_t v1567;
  _DWORD *v1568;
  int v1569;
  _QWORD *v1570;
  unint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  _OWORD *v1574;
  __int128 *v1575;
  uint64_t v1576;
  __int128 v1577;
  uint64_t v1578;
  _QWORD *v1579;
  uint64_t *v1580;
  _QWORD *v1581;
  _QWORD *v1582;
  double *v1583;
  double *v1584;
  uint64_t v1585;
  uint64_t *v1586;
  uint64_t *v1587;
  unint64_t v1588;
  unint64_t v1589;
  uint64_t *v1590;
  unint64_t v1591;
  uint64_t v1592;
  unint64_t v1593;
  uint64_t v1594;
  unint64_t v1595;
  unint64_t v1596;
  unint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  char *v1602;
  char *v1603;
  unint64_t v1604;
  unint64_t v1605;
  unsigned int *v1606;
  char *v1607;
  unsigned int v1608;
  double *v1609;
  double v1610;
  uint64_t v1611;
  double *v1613;
  int64x2_t *v1614;
  double *v1615;
  double v1616;
  double v1617;
  float64x2_t v1618;
  float64x2_t v1620;
  double v1622;
  double v1624;
  double v1626;
  uint64_t v1627;
  float v1628;
  float v1629;
  float v1630;
  double v1631;
  int8x8_t v1632;
  unint64_t v1633;
  uint8x8_t v1634;
  unint64_t v1635;
  uint64_t **v1636;
  uint64_t *v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unint64_t v1641;
  char *v1642;
  char *v1643;
  unint64_t v1644;
  unint64_t v1645;
  unsigned int *v1646;
  char *v1647;
  unsigned int v1648;
  char *v1649;
  char *v1650;
  unint64_t v1651;
  unint64_t v1652;
  unsigned int *v1653;
  char *v1654;
  unsigned int v1655;
  uint64_t v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  double *v1661;
  int64x2_t *v1662;
  double *v1663;
  double v1664;
  double v1665;
  float64x2_t v1666;
  float64x2_t v1668;
  double v1670;
  double v1672;
  double v1674;
  double v1675;
  double *v1676;
  float v1677;
  float v1678;
  double v1679;
  unint64_t v1680;
  unint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  unint64_t v1686;
  unint64_t v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  double v1693;
  uint64_t v1694;
  uint64_t v1695;
  double *v1697;
  int64x2_t *v1698;
  double *v1699;
  double v1700;
  double v1701;
  float64x2_t v1702;
  float64x2_t v1704;
  double v1706;
  double v1708;
  double v1710;
  uint64_t v1711;
  double *v1712;
  float v1713;
  float v1714;
  float v1715;
  double v1716;
  unint64_t v1717;
  unint64_t v1718;
  unint64_t v1719;
  size_t v1720;
  __int128 v1721;
  double v1722;
  float32x2_t v1724;
  uint64_t *v1725;
  int v1726;
  double *v1727;
  double *v1728;
  uint64_t v1729;
  uint64_t v1730;
  __int32 v1731;
  unint64_t v1732;
  uint64_t v1733;
  uint64_t *v1734;
  uint64_t *v1735;
  uint64_t v1736;
  uint64_t *v1737;
  uint64_t *v1738;
  uint64_t *v1739;
  unsigned int v1740;
  _DWORD *v1741;
  unint64_t v1742;
  unint64_t v1743;
  unsigned int *v1744;
  _DWORD *v1745;
  unsigned int v1746;
  unint64_t v1747;
  unsigned int v1748;
  uint64_t *v1749;
  unint64_t v1750;
  unint64_t v1751;
  double *v1752;
  uint64_t v1753;
  uint64_t *v1754;
  uint64_t *v1755;
  uint64_t *v1756;
  double v1757;
  int v1758;
  double v1759;
  unsigned int v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  unsigned int v1764;
  BOOL v1765;
  uint64_t *v1766;
  uint64_t v1767;
  unsigned int v1768;
  float32x2_t *v1769;
  float32x2_t *v1770;
  char v1771;
  float32x2_t v1772;
  float v1773;
  float64x2_t v1774;
  float32x2_t v1775;
  float32x2_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  int v1780;
  __int32 *v1783;
  __int32 *v1784;
  __int32 *v1785;
  uint64_t v1786;
  unint64_t v1787;
  unint64_t v1788;
  char *v1789;
  uint64_t v1790;
  uint64_t v1791;
  double *v1792;
  uint64_t v1793;
  unint64_t v1794;
  unint64_t v1795;
  char *v1796;
  uint64_t v1797;
  uint64_t v1798;
  double *v1799;
  uint64_t v1800;
  int v1801;
  uint64_t v1802;
  unint64_t v1803;
  const std::nothrow_t *v1804;
  unint64_t v1805;
  double *v1806;
  double v1807;
  unint64_t v1808;
  unsigned int v1809;
  double *v1810;
  const std::nothrow_t *v1811;
  unint64_t v1812;
  double *v1813;
  void *v1814;
  int v1815;
  uint64_t v1816;
  uint64_t v1817;
  unsigned int v1818;
  unsigned int *v1819;
  uint64_t v1820;
  unsigned int v1821;
  unsigned int v1822;
  unsigned int v1823;
  unsigned int v1824;
  unsigned int v1825;
  double *v1826;
  unsigned int v1827;
  _DWORD *v1828;
  unint64_t v1829;
  char *v1830;
  char *v1831;
  unint64_t v1832;
  unint64_t v1833;
  unsigned int *v1834;
  char *v1835;
  unsigned int v1836;
  int8x8_t v1837;
  uint8x8_t v1838;
  unint64_t v1839;
  uint64_t **v1840;
  uint64_t *v1841;
  uint64_t v1842;
  unint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  _BOOL4 v1847;
  unsigned int *v1848;
  unint64_t v1849;
  char *v1850;
  char *v1851;
  unint64_t v1852;
  unint64_t v1853;
  unsigned int *v1854;
  char *v1855;
  unsigned int v1856;
  int8x8_t v1857;
  uint8x8_t v1858;
  unint64_t v1859;
  uint64_t **v1860;
  uint64_t *v1861;
  uint64_t v1862;
  unint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  BOOL v1867;
  uint64_t v1868;
  unint64_t v1869;
  uint64_t v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  __int128 v1876;
  __int128 v1877;
  __int128 v1878;
  __int128 v1879;
  __int128 v1880;
  __int128 v1881;
  __int128 v1882;
  __int128 v1883;
  __int128 v1884;
  __int128 v1885;
  __int128 v1886;
  __int128 v1887;
  __int128 v1888;
  __int128 v1889;
  __int128 v1890;
  __int128 v1891;
  __int128 v1892;
  __int128 v1893;
  __int128 v1894;
  __int128 v1895;
  __int128 v1896;
  __int128 v1897;
  __int128 v1898;
  __int128 v1899;
  __int128 v1900;
  __int128 v1901;
  __int128 v1902;
  __int128 v1903;
  __int128 v1904;
  __int128 v1905;
  __int128 v1906;
  __int128 v1907;
  __int128 v1908;
  __int128 v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  __int128 v1914;
  __int128 v1915;
  __int128 v1916;
  uint64_t v1917;
  uint64_t v1918;
  __int128 v1919;
  __int128 v1920;
  char *v1921;
  __int128 v1922;
  __int128 v1923;
  __int128 v1924;
  __int128 v1925;
  __int128 v1926;
  uint64_t v1927;
  __int128 v1928;
  __int128 v1929;
  __int8 v1930;
  __int8 v1931;
  __int8 v1932;
  __int8 v1933;
  __int8 v1934;
  __int8 v1935;
  __int8 v1936;
  __int8 v1937;
  __int8 v1938;
  __int8 v1939;
  __int8 v1940;
  __int8 v1941;
  __int8 v1942;
  __int8 v1943;
  __int8 v1944;
  __int8 v1945;
  __int8 v1946;
  __int8 v1947;
  __int8 v1948;
  __int8 v1949;
  __int8 v1950;
  __int8 v1951;
  __int8 v1952;
  __int8 v1953;
  __int8 v1954;
  __int8 v1955;
  __int8 v1956;
  __int8 v1957;
  __int8 v1958;
  __int8 v1959;
  int v1960;
  int8x16_t v1961;
  int8x16_t v1962;
  uint64_t *v1963;
  void **v1964;
  void **v1965;
  void **v1966;
  int64x2_t v1967;
  uint64_t v1968;
  __int128 v1969;
  void *v1970;
  char *v1971;
  int64x2_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  char *v1975;
  uint64_t v1976;
  int64x2_t v1977;
  char v1978;
  uint64_t v1979;
  void **v1980;
  float64x2_t v1981;
  int8x16_t v1982;
  uint64_t v1983;
  char v1984;
  _QWORD *v1985;
  int8x16_t v1986;
  uint64_t v1987;
  int8x16_t v1988;
  double v1989;
  int8x16_t v1990;
  double v1991;
  char *categoryf[2];
  uint64_t category;
  uint64_t categoryg;
  double categoryh;
  std::__shared_weak_count *categorya;
  const char *categoryb;
  char *categoryc;
  void **categoryd;
  _QWORD *categorye;
  _DWORD *v2001;
  uint64_t v2002;
  unsigned int v2003;
  void **v2004;
  _QWORD *v2005;
  _BYTE *v2006;
  char *v2007;
  char **v2008;
  char v2009;
  const char *v2010;
  int v2011;
  unsigned int v2012;
  _QWORD *v2013;
  uint64_t v2014;
  float64_t v2015;
  uint64_t *v2016;
  uint64_t v2017;
  int v2018;
  _BYTE *v2019;
  int64x2_t **v2020;
  uint64_t *v2021;
  uint64_t v2022;
  unint64_t v2023;
  void *__dsta[2];
  float64x2_t __dstb;
  uint64_t *__dst;
  float64x2_t v2027;
  int v2028;
  unint64_t v2029;
  double v2030;
  float64x2_t *v2031;
  _QWORD *v2032;
  unint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  __int32 v2036;
  int64x2_t v2037;
  unint64_t v2038;
  uint64_t *v2039;
  uint64_t v2040;
  uint64_t *v2041;
  int v2042;
  int64x2_t __szj;
  size_t __sz[2];
  int __sza;
  const char *__szb;
  void *__szc;
  uint64_t __szd;
  char *__sze;
  uint64_t __szf;
  unint64_t __szg;
  float64x2_t __szk;
  float64x2_t __szl;
  unint64_t __szh;
  double __szi;
  int64x2_t v2056;
  char *v2057;
  _QWORD *v2058;
  uint64_t v2059;
  unsigned int v2060;
  uint64_t v2061;
  double *v2062;
  uint64_t *v2063;
  float64x2_t v2064;
  float64x2_t v2065;
  uint64_t v2066;
  unint64_t v2067;
  uint64_t v2068;
  std::__shared_weak_count *v2069;
  uint64_t v2070;
  std::__shared_weak_count *v2071;
  std::__shared_weak_count *v2072;
  std::__shared_weak_count *v2073;
  void *v2074;
  char v2075;
  __int128 v2076;
  void *v2077;
  __int128 v2078;
  void *v2079;
  __int128 v2080;
  void *v2081;
  __int128 v2082;
  __int128 v2083;
  __int128 v2084;
  void *v2085;
  __int128 v2086;
  void *v2087;
  __int128 v2088;
  __int128 v2089;
  __int128 v2090;
  __int128 v2091;
  __int128 v2092;
  __int128 v2093;
  __int128 v2094;
  __int128 v2095;
  void *v2096;
  __int128 v2097;
  __int128 v2098;
  uint64_t v2099;
  __int128 v2100;
  __int128 v2101;
  __int128 v2102;
  __int128 v2103;
  __int128 v2104;
  __int128 v2105;
  void *v2106;
  _OWORD v2107[113];
  _OWORD v2108[41];
  __int128 v2109;
  __int128 v2110;
  __int128 v2111;
  __int128 v2112;
  void *v2113;
  __int128 v2114;
  __int128 v2115;
  __int128 v2116;
  __int128 v2117;
  void *v2118;
  __int128 v2119;
  __int128 v2120;
  __int128 v2121;
  __int128 v2122;
  void *v2123;
  __int128 v2124;
  __int128 v2125;
  __int128 v2126;
  __int128 v2127;
  void *v2128;
  __int128 v2129;
  __int128 v2130;
  __int128 v2131;
  __int128 v2132;
  void *v2133;
  __int128 v2134;
  __int128 v2135;
  __int128 v2136;
  __int128 v2137;
  void *v2138;
  __int128 v2139;
  __int128 v2140;
  __int128 v2141;
  __int128 v2142;
  void *v2143;
  __int128 v2144;
  __int128 v2145;
  __int128 v2146;
  __int128 v2147;
  void *v2148;
  _OWORD v2149[113];
  void *v2150[2];
  _BYTE v2151[1864];
  _OWORD v2152[247];
  uint64_t v2153;
  char v2154;
  __int8 v2155;
  _BYTE v2156[1800];
  uint64_t v2157;
  char v2158;
  __int16 v2159;
  __int128 v2160;
  __int128 v2161;
  uint64_t v2162;
  __int128 v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int128 v2167;
  __int128 v2168;
  __int128 v2169;
  uint64_t v2170;
  __int128 v2171;
  __int128 v2172;
  __int128 v2173;
  __int128 v2174;
  __int128 v2175;
  __int128 v2176;
  __int128 v2177;
  uint64_t v2178;
  unint64_t v2179;
  char v2180;
  __int128 v2181;
  char v2182;
  _BYTE v2183[5728];
  __int128 v2184;
  __int128 v2185;
  __int128 v2186;
  __int128 v2187;
  __int128 v2188;
  __int128 v2189;
  __int128 v2190;
  uint64_t v2191;
  char v2192;
  uint64_t (**v2193)();
  __int8 v2194;
  _BYTE v2195[1800];
  uint64_t v2196;
  char v2197;
  __int16 v2198;
  __int128 v2199;
  __int128 v2200;
  uint64_t v2201;
  __int128 v2202;
  __int128 v2203;
  __int128 v2204;
  __int128 v2205;
  __int128 v2206;
  __int128 v2207;
  __int128 v2208;
  uint64_t v2209;
  __int128 v2210;
  __int128 v2211;
  __int128 v2212;
  __int128 v2213;
  __int128 v2214;
  __int128 v2215;
  __int128 v2216;
  uint64_t v2217;
  unint64_t v2218;
  char v2219;
  __int128 v2220;
  char v2221;
  _BYTE object[1888];
  _OWORD v2223[247];
  uint64_t v2224;
  char v2225;
  uint64_t (**v2226)();
  __int8 v2227;
  _BYTE v2228[1800];
  uint64_t v2229;
  char v2230;
  __int16 v2231;
  __int128 v2232;
  __int128 v2233;
  uint64_t v2234;
  __int128 v2235;
  __int128 v2236;
  __int128 v2237;
  __int128 v2238;
  __int128 v2239;
  __int128 v2240;
  __int128 v2241;
  uint64_t v2242;
  __int128 v2243;
  __int128 v2244;
  __int128 v2245;
  __int128 v2246;
  __int128 v2247;
  __int128 v2248;
  __int128 v2249;
  uint64_t v2250;
  unint64_t v2251;
  char v2252;
  uint64_t v2253;
  std::__shared_weak_count *v2254;
  char v2255;
  uint64_t v2256;
  uint64_t v2257;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v2016 = v6;
  v2257 = *MEMORY[0x24BDAC8D0];
  v2019 = (_BYTE *)(v2 + 5808);
  if (*(_BYTE *)(v2 + 2146))
  {
    v7 = *(_QWORD *)(v2 + 120);
    v8 = v2 + 176;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *(_QWORD *)(v2 + 5776) = v7;
  *(_QWORD *)(v2 + 5784) = v8;
  v9 = *(_QWORD *)(v2 + 8);
  v10 = *(_QWORD **)(v9 + 296);
  v11 = (_QWORD *)(v9 + 304);
  v2068 = v2;
  if (v10 != (_QWORD *)(v9 + 304))
  {
    v2008 = (char **)(v2 + 5128);
    v2006 = (_BYTE *)(v2 + 6584);
    v2022 = v2 + 5152;
    v2004 = (void **)(v2 + 6272);
    while (1)
    {
      v12 = *((unsigned int *)v10 + 8);
      v13 = *(__int128 **)(v2068 + 5128);
      v14 = *(__int128 **)(v2068 + 5136);
      v15 = v13;
      if (v14 != v13)
      {
        v16 = v14 - v13;
        v15 = *(__int128 **)(v2068 + 5128);
        do
        {
          v17 = v16 >> 1;
          v18 = (unsigned int *)&v15[v16 >> 1];
          v20 = *v18;
          v19 = (__int128 *)(v18 + 4);
          v16 += ~(v16 >> 1);
          if (v20 < v12)
            v15 = v19;
          else
            v16 = v17;
        }
        while (v16);
      }
      if (v15 != v14 && *(_DWORD *)v15 == (_DWORD)v12)
        goto LABEL_49;
      if (v14 == v13)
      {
        v13 = *(__int128 **)(v2068 + 5136);
      }
      else
      {
        v21 = v14 - v13;
        do
        {
          v22 = v21 >> 1;
          v23 = (unsigned int *)&v13[v21 >> 1];
          v25 = *v23;
          v24 = (__int128 *)(v23 + 4);
          v21 += ~(v21 >> 1);
          if (v25 < v12)
            v13 = v24;
          else
            v21 = v22;
        }
        while (v21);
      }
      _D8 = *((double *)v10 + 13);
      v5 = *((int64x2_t *)v10 + 7);
      v27 = *(unsigned __int8 *)(v2068 + 1720);
      v1 = v1 & 0xFFFFFF0000000000 | v12 | (v27 << 32);
      v28 = *(unsigned __int8 *)(v2068 + 1788);
      if (v14 != v13 && (_DWORD)v12 == *(_DWORD *)v13)
        goto LABEL_49;
      *(_OWORD *)__dsta = *((_OWORD *)v10 + 4);
      v2027 = *((float64x2_t *)v10 + 7);
      v2030 = *((double *)v10 + 16);
      v2037 = *(int64x2_t *)(v10 + 5);
      __szj = *(int64x2_t *)(v10 + 11);
      v4.i64[0] = v10[10];
      v2056 = v4;
      v3.f64[0] = (float64_t)v10[7];
      v2064 = v3;
      v29 = (_DWORD)v27 == 0;
      v30 = sub_20F61B11C(v2022);
      v31 = (float64x2_t)vzip1q_s64(v2037, *(int64x2_t *)__dsta);
      _Q1 = (float64x2_t)vzip2q_s64(v2037, *(int64x2_t *)__dsta);
      _Q19 = (float64x2_t)__szj;
      _D18 = v2056.i64[0];
      v35 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q1, 1);
      v36 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v2027.f64[0]), _Q1, v2027, 1), (float64x2_t)vzip1q_s64((int64x2_t)v2064, v2056), v2030);
      _D2 = v2027.f64[1];
      __asm { FMLA            D1, D2, V19.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + _D8 * v2030;
      v41 = vnegq_f64(_Q0);
      v42 = (int64x2_t)vextq_s8(v36, v35, 8uLL);
      v43 = (float64x2_t)vzip1q_s64(v2037, v42);
      v44 = (float64x2_t)vzip2q_s64((int64x2_t)v31, v42);
      *(_QWORD *)&_Q19.f64[1] = vdupq_laneq_s64(__szj, 1).u64[0];
      v45 = vmlsq_laneq_f64(vmulq_n_f64(v43, v41.f64[0]), v44, _Q0, 1);
      *(_DWORD *)v30 = -1;
      *(_BYTE *)(v30 + 4) = 1;
      *(_DWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = v1;
      *(_QWORD *)(v30 + 24) = v10 + 5;
      *(float64_t *)(v30 + 48) = v2064.f64[0];
      *(_QWORD *)&v43.f64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
      *(float64x2_t *)(v30 + 32) = v43;
      v46 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(v45, _Q19, _Q1.f64[0], 0));
      *(_QWORD *)&v44.f64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
      *(_QWORD *)(v30 + 72) = v2056.i64[0];
      *(float64x2_t *)(v30 + 56) = v44;
      *(double *)(v30 + 96) = _D8;
      *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
      *(float64x2_t *)(v30 + 80) = _Q19;
      v46.i64[1] = vextq_s8(v46, v46, 8uLL).u64[0];
      _Q2 = vmulq_f64(v2064, v41);
      __asm
      {
        FMLS            D2, D18, V0.D[1]
        FMLS            D2, D8, V1.D[0]
      }
      *(_QWORD *)(v30 + 120) = *(_OWORD *)&vnegq_f64(_Q2);
      *(int8x16_t *)(v30 + 104) = v46;
      *(_WORD *)(v30 + 128) = v28 | 0x100;
      *(_QWORD *)(v30 + 136) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 144) = 0;
      *(_QWORD *)(v30 + 152) = 0;
      *(_QWORD *)(v30 + 160) = 0;
      *(_QWORD *)(v30 + 168) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 176) = 0;
      *(_QWORD *)(v30 + 184) = 0;
      *(_QWORD *)(v30 + 192) = 0;
      *(_QWORD *)(v30 + 200) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 208) = 0;
      *(_QWORD *)(v30 + 216) = 0;
      *(_QWORD *)(v30 + 224) = 0;
      *(_DWORD *)object = v12;
      *(_QWORD *)&object[8] = v30;
      sub_20F61AEB4(v2008, v13, (uint64_t)object);
      if (!v29)
        break;
LABEL_48:
      v2019[2] = 0;
      *v2019 = 0;
      *(_DWORD *)v2006 = 0;
      v2006[4] = 0;
LABEL_49:
      v68 = (_QWORD *)v10[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v10[2];
          _ZF = *v69 == (_QWORD)v10;
          v10 = v69;
        }
        while (!_ZF);
      }
      v10 = v69;
      if (v69 == v11)
      {
        v70 = v2068;
        v9 = *(_QWORD *)(v2068 + 8);
        goto LABEL_57;
      }
    }
    v48 = *(char **)(v2068 + 6280);
    v49 = *(_QWORD *)(v2068 + 6288);
    if ((unint64_t)v48 < v49)
    {
      *(_DWORD *)v48 = v12;
      v50 = (uint64_t)(v48 + 4);
LABEL_47:
      *(_QWORD *)(v2068 + 6280) = v50;
      goto LABEL_48;
    }
    v51 = (char *)*v2004;
    v52 = v48 - (_BYTE *)*v2004;
    v53 = v52 >> 2;
    v54 = (v52 >> 2) + 1;
    if (v54 >> 62)
      sub_20E867F44();
    v55 = v49 - (_QWORD)v51;
    if (v55 >> 1 > v54)
      v54 = v55 >> 1;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
      v56 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 >> 62)
        sub_20E877A38();
      v57 = operator new(4 * v56);
      v58 = &v57[4 * v53];
      *v58 = v12;
      v50 = (uint64_t)(v58 + 1);
      v59 = v48 - v51;
      if (v48 == v51)
        goto LABEL_45;
    }
    else
    {
      v57 = 0;
      v58 = (_DWORD *)(4 * v53);
      *(_DWORD *)(4 * v53) = v12;
      v50 = 4 * v53 + 4;
      v59 = v48 - v51;
      if (v48 == v51)
      {
LABEL_45:
        *(_QWORD *)(v2068 + 6272) = v58;
        *(_QWORD *)(v2068 + 6280) = v50;
        *(_QWORD *)(v2068 + 6288) = &v57[4 * v56];
        if (v51)
          operator delete(v51);
        goto LABEL_47;
      }
    }
    v60 = v59 - 4;
    if (v60 < 0x2C)
      goto LABEL_1905;
    if ((unint64_t)(v48 - v57 - v52) < 0x20)
      goto LABEL_1905;
    v61 = (v60 >> 2) + 1;
    v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
    v63 = &v48[-v62];
    v58 = (_DWORD *)((char *)v58 - v62);
    v64 = (float64x2_t *)&v57[4 * v53 - 16];
    v65 = (float64x2_t *)(v48 - 16);
    v66 = v61 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v4 = (int64x2_t)v65[-1];
      v3 = *v65;
      v64[-1] = (float64x2_t)v4;
      *v64 = v3;
      v64 -= 2;
      v65 -= 2;
      v66 -= 8;
    }
    while (v66);
    v48 = v63;
    if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1905:
      do
      {
        v67 = *((_DWORD *)v48 - 1);
        v48 -= 4;
        *--v58 = v67;
      }
      while (v48 != v51);
    }
    goto LABEL_45;
  }
  v70 = v2;
LABEL_57:
  v2009 = *(_BYTE *)(v70 + 1730);
  v2005 = (_QWORD *)(v70 + 4832);
  if (*v2019)
  {
    if (!((*(_QWORD *)(v70 + 5232) - *(_QWORD *)(v70 + 5224)) >> 4))
      goto LABEL_91;
    goto LABEL_90;
  }
  memset(object, 0, 32);
  if (!sub_20F5B8114((_QWORD *)(v70 + 4832), (int *)object, v2183, 1))
  {
    if (!*(_DWORD *)&v2183[16])
      goto LABEL_91;
    goto LABEL_90;
  }
  *(_QWORD *)(v70 + 6400) = *(_QWORD *)(v70 + 6392);
  *(_QWORD *)(v70 + 6424) = *(_QWORD *)(v70 + 6416);
  *(_QWORD *)(v70 + 6448) = *(_QWORD *)(v70 + 6440);
  *(_QWORD *)(v70 + 6472) = *(_QWORD *)(v70 + 6464);
  *(_QWORD *)(v70 + 6496) = *(_QWORD *)(v70 + 6488);
  *(_QWORD *)(v70 + 6520) = *(_QWORD *)(v70 + 6512);
  *(_QWORD *)(v70 + 6544) = *(_QWORD *)(v70 + 6536);
  *(_QWORD *)(v70 + 6568) = *(_QWORD *)(v70 + 6560);
  v71 = *(_QWORD *)(v70 + 5608);
  v72 = *(_QWORD *)(v70 + 5616);
  while (v71 != v72)
  {
    v73 = *(_QWORD *)(v71 + 208);
    if (*(_BYTE *)(v71 + 496) || (*(_BYTE *)(v73 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v71 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(v70 + 6392, v73);
      sub_20F3D35E0((_QWORD *)(v70 + 6392), *(_QWORD *)(v71 + 216));
    }
    v71 += 504;
  }
  v74 = *(_QWORD *)(v70 + 5632);
  v75 = *(_QWORD *)(v70 + 5640);
  while (v74 != v75)
  {
    v76 = *(_QWORD *)(v74 + 136);
    if (*(_BYTE *)(v74 + 272) || (*(_BYTE *)(v76 + 4) & 6) != 0)
      sub_20F394A20(v70 + 6392, v76);
    v74 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(v70 + 5656), *(_QWORD *)(v70 + 5664), (_QWORD *)(v70 + 6392));
  sub_20F5B85BC(*(_QWORD *)(v70 + 5680), *(_QWORD *)(v70 + 5688), (_QWORD *)(v70 + 6392));
  sub_20F5B8444(*(_QWORD *)(v70 + 5704), *(_QWORD *)(v70 + 5712), (_QWORD *)(v70 + 6392));
  v77 = *(_QWORD *)(v70 + 5728);
  v78 = *(_QWORD *)(v70 + 5736);
  while (v77 != v78)
  {
    v79 = *(_QWORD *)(v77 + 736);
    if (*(_BYTE *)(v77 + 880) || (*(_BYTE *)(v79 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v77 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(v70 + 6392, v79);
      sub_20F394A20(v70 + 6392, *(_QWORD *)(v77 + 744));
    }
    v77 += 888;
  }
  v80 = (*(_QWORD *)(v70 + 6496) - *(_QWORD *)(v70 + 6488)) >> 2;
  if (*(_DWORD *)&object[16] > v80)
    LODWORD(v80) = *(_DWORD *)&object[16];
  _CF = *(_DWORD *)&v2183[16] >= v80;
  v81 = *(_DWORD *)&v2183[16] - v80;
  if (_CF)
    v82 = v81;
  else
    v82 = 0;
  sub_20F59A618(v2005);
  if (v82)
  {
LABEL_90:
    v70 = v2068;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_91:
  v83 = *(double *)(v9 + 336);
  if (v83 != 0.0)
  {
    v2002 = v70 + 5224;
    *(_QWORD *)&v2027.f64[0] = &v2183[32];
    v1990.i64[0] = (uint64_t)&object[72];
    v1988.i64[0] = (uint64_t)&object[160];
    v1986.i64[0] = (uint64_t)&object[192];
    v1966 = (void **)(v70 + 6296);
    v1976 = v70 + 6584;
    while (1)
    {
      LODWORD(v2150[0]) = *(_DWORD *)(*(_QWORD *)&v83 + 16);
      BYTE4(v2150[0]) = 1;
      v2150[1] = (void *)(*(_QWORD *)&v83 + 24);
      memset(&v2151[48], 0, 56);
      *(_DWORD *)&v2151[104] = 1065353216;
      *(_WORD *)&v2151[112] = 1;
      v84 = *(_OWORD *)(*(_QWORD *)&v83 + 40);
      *(_OWORD *)v2151 = *(_OWORD *)(*(_QWORD *)&v83 + 24);
      *(_OWORD *)&v2151[16] = v84;
      v85 = *(_QWORD *)(*(_QWORD *)&v83 + 56);
      v2064.f64[0] = v83;
      v2151[40] = *(_BYTE *)(*(_QWORD *)&v83 + 64);
      *(_QWORD *)&v2151[32] = v85;
      sub_20F6169C8((uint64_t)v2150);
      BYTE4(v2150[0]) = v2009;
      v86 = *((_OWORD *)v2150[1] + 1);
      *(_OWORD *)v2151 = *(_OWORD *)v2150[1];
      *(_OWORD *)&v2151[16] = v86;
      v87 = *((_BYTE *)v2150[1] + 40);
      *(_QWORD *)&v2151[32] = *((_QWORD *)v2150[1] + 4);
      v2151[40] = v87;
      sub_20F6169C8((uint64_t)v2150);
      v88 = (int)v2150[0];
      v89 = *(char **)(v70 + 5224);
      v90 = *(char **)(v70 + 5232);
      if (v90 == v89)
      {
        v89 = *(char **)(v70 + 5232);
      }
      else
      {
        v91 = (v90 - v89) >> 4;
        do
        {
          v92 = v91 >> 1;
          v93 = &v89[16 * (v91 >> 1)];
          v95 = *(_DWORD *)v93;
          v94 = v93 + 16;
          v91 += ~(v91 >> 1);
          if (v95 < LODWORD(v2150[0]))
            v89 = v94;
          else
            v91 = v92;
        }
        while (v91);
        if (v90 != v89 && LODWORD(v2150[0]) == *(_DWORD *)v89)
        {
          v2057 = *(char **)(v70 + 5232);
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_155;
        }
      }
      v96 = BYTE4(v2150[0]);
      v2183[4] = 1;
      *(_DWORD *)v2183 = -1;
      *(_DWORD *)&v2183[8] = 0;
      v97 = v2150[0];
      v98 = v2150[1];
      *(_OWORD *)&v2183[16] = *(_OWORD *)v2150;
      *(_OWORD *)&v2183[32] = *(_OWORD *)v2151;
      *(_OWORD *)&v2183[48] = *(_OWORD *)&v2151[16];
      *(_OWORD *)&v2183[64] = *(_OWORD *)&v2151[32];
      v99 = *(_QWORD *)&v2151[48];
      v100 = *(_QWORD *)&v2151[56];
      *(_QWORD *)&v2183[80] = *(_QWORD *)&v2151[48];
      *(_QWORD *)&v2183[88] = *(_QWORD *)&v2151[56];
      memset(&v2151[48], 0, 40);
      v101 = *(_QWORD *)&v2151[64];
      v102 = *(_QWORD *)&v2151[72];
      *(_QWORD *)&v2183[96] = *(_QWORD *)&v2151[64];
      *(_QWORD *)&v2183[104] = *(_QWORD *)&v2151[72];
      v103 = *(_QWORD *)&v2151[80];
      v104 = *(_QWORD *)&v2151[88];
      *(_QWORD *)&v2183[112] = *(_QWORD *)&v2151[80];
      *(_QWORD *)&v2183[120] = *(_QWORD *)&v2151[88];
      v105 = *(_QWORD *)&v2151[96];
      *(_QWORD *)&v2183[128] = *(_QWORD *)&v2151[96];
      v106 = *(_DWORD *)&v2151[104];
      *(_DWORD *)&v2183[136] = *(_DWORD *)&v2151[104];
      if (*(_QWORD *)&v2151[96])
      {
        v107 = *(_QWORD *)(*(_QWORD *)&v2151[88] + 8);
        if ((*(_QWORD *)&v2151[80] & (*(_QWORD *)&v2151[80] - 1)) != 0)
        {
          if (v107 >= *(_QWORD *)&v2151[80])
            v107 %= *(_QWORD *)&v2151[80];
        }
        else
        {
          v107 &= *(_QWORD *)&v2151[80] - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v2151[72] + 8 * v107) = &v2183[120];
        *(_QWORD *)&v2151[88] = 0;
        *(_QWORD *)&v2151[96] = 0;
        v98 = *(void **)&v2183[24];
        v97 = *(void **)&v2183[16];
        v99 = *(_QWORD *)&v2183[80];
        v100 = *(_QWORD *)&v2183[88];
        v101 = *(_QWORD *)&v2183[96];
        v102 = *(_QWORD *)&v2183[104];
        v103 = *(_QWORD *)&v2183[112];
        v104 = *(_QWORD *)&v2183[120];
        v105 = *(_QWORD *)&v2183[128];
        v106 = *(_DWORD *)&v2183[136];
      }
      v108 = *(_WORD *)&v2151[112];
      *(_WORD *)&v2183[144] = *(_WORD *)&v2151[112];
      v2183[192] = 0;
      memset(&v2183[152], 0, 33);
      *(_DWORD *)object = v88;
      *(_QWORD *)&object[8] = *(_QWORD *)v2183;
      *(_DWORD *)&object[16] = *(_DWORD *)&v2183[8];
      *(_QWORD *)&object[24] = v97;
      *(_QWORD *)&object[32] = v98;
      *(_OWORD *)&object[40] = *(_OWORD *)&v2183[32];
      *(_OWORD *)&object[56] = *(_OWORD *)&v2183[48];
      *(_OWORD *)&object[72] = *(_OWORD *)&v2183[64];
      *(_QWORD *)&object[88] = v99;
      *(_QWORD *)&object[96] = v100;
      memset(&v2183[80], 0, 40);
      *(_QWORD *)&object[104] = v101;
      *(_QWORD *)&object[112] = v102;
      *(_QWORD *)&object[120] = v103;
      *(_QWORD *)&object[128] = v104;
      *(_QWORD *)&object[136] = v105;
      *(_DWORD *)&object[144] = v106;
      if (v105)
      {
        v109 = *(_QWORD *)(v104 + 8);
        if ((v103 & (v103 - 1)) != 0)
        {
          if (v109 >= v103)
            v109 %= v103;
        }
        else
        {
          v109 &= v103 - 1;
        }
        *(_QWORD *)(v102 + 8 * v109) = &object[128];
        *(_QWORD *)&v2183[120] = 0;
        *(_QWORD *)&v2183[128] = 0;
        v108 = *(_WORD *)&v2183[144];
      }
      *(_WORD *)&object[152] = v108;
      *(_OWORD *)&object[160] = *(_OWORD *)&v2183[152];
      *(_OWORD *)&object[176] = *(_OWORD *)&v2183[168];
      *(_OWORD *)&object[192] = *(_OWORD *)&v2183[184];
      v2057 = sub_20F7166C8(v2002, v89, (int *)object);
      v110 = *(_QWORD **)&object[128];
      if (*(_QWORD *)&object[128])
      {
        do
        {
          v111 = (_QWORD *)*v110;
          operator delete(v110);
          v110 = v111;
        }
        while (v111);
      }
      v112 = *(void **)&object[112];
      *(_QWORD *)&object[112] = 0;
      if (v112)
        operator delete(v112);
      if (*(_QWORD *)&object[88])
      {
        *(_QWORD *)&object[96] = *(_QWORD *)&object[88];
        operator delete(*(void **)&object[88]);
      }
      v113 = *(_QWORD **)&v2183[120];
      if (*(_QWORD *)&v2183[120])
      {
        do
        {
          v114 = (_QWORD *)*v113;
          operator delete(v113);
          v113 = v114;
        }
        while (v114);
      }
      v115 = *(void **)&v2183[104];
      *(_QWORD *)&v2183[104] = 0;
      if (v115)
        operator delete(v115);
      if (*(_QWORD *)&v2183[80])
      {
        *(_QWORD *)&v2183[88] = *(_QWORD *)&v2183[80];
        operator delete(*(void **)&v2183[80]);
      }
      if (v96)
        break;
LABEL_154:
      v2019[2] = 0;
      *v2019 = 0;
      *(_DWORD *)v1976 = 0;
      *(_BYTE *)(v1976 + 4) = 0;
LABEL_155:
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 1065353216;
      v137 = *(uint64_t ***)(v70 + 128);
      v138 = *v137;
      v139 = v137[1];
      while (v138 != v139)
      {
        v140 = (__int128 *)*v138;
        if (*(_QWORD *)(*v138 + 24))
        {
          if (*((_DWORD *)v140 + 4) != *(_DWORD *)(*(_QWORD *)&v83 + 16))
            goto LABEL_156;
LABEL_171:
          v146 = *v140;
          *(_QWORD *)&v2183[16] = *((_QWORD *)v140 + 2);
          *(_OWORD *)v2183 = v146;
          *(_OWORD *)&v2183[24] = *(__int128 *)((char *)v140 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)v2183, (uint64_t)v2183);
          goto LABEL_156;
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v141 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          _ZF = byte_254A6DE70 == 0;
        else
          _ZF = 0;
        if (!_ZF)
        {
          v143 = qword_254A6DE40;
          for (i = qword_254A6DE48; v143 != i; v143 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v143)(*(_QWORD *)(v143 + 8), "frame->lens_model_", 18, "", 0);
        }
        v145 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v140 = (__int128 *)*v138;
        if (*(_DWORD *)(*v138 + 16) == *(_DWORD *)(*(_QWORD *)&v83 + 16))
          goto LABEL_171;
LABEL_156:
        v138 += 2;
      }
      v147 = *((_QWORD *)v2057 + 1);
      if (*(_QWORD *)(v147 + 128))
      {
        v148 = *(_QWORD **)(v147 + 120);
        if (v148)
        {
          do
          {
            v149 = (_QWORD *)*v148;
            operator delete(v148);
            v148 = v149;
          }
          while (v149);
        }
        *(_QWORD *)(v147 + 120) = 0;
        v150 = *(_QWORD *)(v147 + 112);
        if (v150)
        {
          for (j = 0; j != v150; ++j)
            *(_QWORD *)(*(_QWORD *)(v147 + 104) + 8 * j) = 0;
        }
        *(_QWORD *)(v147 + 128) = 0;
      }
      v152 = *(_QWORD *)object;
      *(_QWORD *)object = 0;
      v153 = *(void **)(v147 + 104);
      *(_QWORD *)(v147 + 104) = v152;
      if (v153)
        operator delete(v153);
      v154 = *(_QWORD *)&object[8];
      v155 = *(_QWORD *)&object[16];
      *(_QWORD *)(v147 + 120) = *(_QWORD *)&object[16];
      *(_QWORD *)(v147 + 112) = v154;
      *(_QWORD *)&object[8] = 0;
      v156 = *(_QWORD *)&object[24];
      *(_QWORD *)(v147 + 128) = *(_QWORD *)&object[24];
      *(_DWORD *)(v147 + 136) = *(_DWORD *)&object[32];
      if (v156)
      {
        v157 = *(_QWORD *)(v155 + 8);
        if ((v154 & (v154 - 1)) != 0)
        {
          if (v157 >= v154)
            v157 %= v154;
        }
        else
        {
          v157 &= v154 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v147 + 104) + 8 * v157) = v147 + 120;
        *(_QWORD *)&object[16] = 0;
        *(_QWORD *)&object[24] = 0;
      }
      sub_20F6169C8(v147 + 16);
      memset(v2183, 0, 24);
      v158 = *(_QWORD **)(v70 + 16);
      v159 = v158[2];
      if (v159)
      {
        if (v159 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v160 = (char *)operator new(24 * v159);
        *(_QWORD *)v2183 = v160;
        *(_QWORD *)&v2183[8] = v160;
        *(_QWORD *)&v2183[16] = &v160[24 * v159];
        v163 = (_QWORD *)*v158;
        v161 = v158 + 1;
        v162 = v163;
        if (v163 == v161)
          goto LABEL_196;
LABEL_209:
        while (2)
        {
          v174 = v162[6];
          if (*(_BYTE *)(v174 + 192))
            v175 = v174 + 40;
          else
            v175 = 0;
          if (*(_BYTE *)(v174 + 192))
          {
            v176 = *(_DWORD *)(v174 + 88);
            if (v176 == *(_DWORD *)(*(_QWORD *)&v83 + 16))
            {
              v177 = *(_QWORD *)(v174 + 200);
              v178 = *(_QWORD *)(v174 + 208);
              v179 = *(_QWORD *)(v174 + 72);
              v180 = *(_DWORD *)(v174 + 80);
              if (v178 != v177)
              {
                v181 = (v178 - v177) >> 5;
                while (1)
                {
                  v182 = v181 >> 1;
                  v183 = v177 + 32 * (v181 >> 1);
                  v184 = *(_DWORD *)(v183 + 16);
                  _CF = v184 >= v176;
                  if (v184 != v176)
                    goto LABEL_222;
                  if (*(_QWORD *)v183 >= v179)
                    break;
LABEL_216:
                  v177 = v183 + 32;
                  v182 = v181 + ~v182;
LABEL_217:
                  v181 = v182;
                  if (!v182)
                    goto LABEL_225;
                }
                if (*(_QWORD *)v183 != v179)
                  goto LABEL_217;
                _CF = *(_DWORD *)(v183 + 8) >= v180;
LABEL_222:
                if (_CF)
                  goto LABEL_217;
                goto LABEL_216;
              }
LABEL_225:
              if (v177 != v178
                && *(_DWORD *)(v177 + 16) == v176
                && *(_QWORD *)v177 == v179
                && *(_DWORD *)(v177 + 8) == v180)
              {
                v186 = *(_QWORD *)(v177 + 24);
                v187 = *(_DWORD *)(v174 + 32);
                v188 = *(_QWORD *)&v2183[16];
                if ((unint64_t)v160 >= *(_QWORD *)&v2183[16])
                  goto LABEL_230;
LABEL_240:
                *(_DWORD *)v160 = v187;
                v195 = v160 + 24;
                *((_QWORD *)v160 + 1) = v186;
                *((_QWORD *)v160 + 2) = v175;
                v83 = v2064.f64[0];
              }
              else
              {
                v186 = 0;
                v187 = *(_DWORD *)(v174 + 32);
                v188 = *(_QWORD *)&v2183[16];
                if ((unint64_t)v160 < *(_QWORD *)&v2183[16])
                  goto LABEL_240;
LABEL_230:
                v189 = *(char **)v2183;
                v190 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v160[-*(_QWORD *)v2183] >> 3);
                v191 = v190 + 1;
                if (v190 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v192 = 0xAAAAAAAAAAAAAAABLL * ((v188 - *(_QWORD *)v2183) >> 3);
                if (2 * v192 > v191)
                  v191 = 2 * v192;
                if (v192 >= 0x555555555555555)
                  v193 = 0xAAAAAAAAAAAAAAALL;
                else
                  v193 = v191;
                if (v193)
                {
                  if (v193 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v194 = (char *)operator new(24 * v193);
                }
                else
                {
                  v194 = 0;
                }
                v196 = &v194[24 * v190];
                *(_DWORD *)v196 = v187;
                *((_QWORD *)v196 + 1) = v186;
                *((_QWORD *)v196 + 2) = v175;
                v197 = v196;
                if (v160 == v189)
                {
                  v70 = v2068;
                  v83 = v2064.f64[0];
                }
                else
                {
                  v70 = v2068;
                  v83 = v2064.f64[0];
                  do
                  {
                    v198 = *(_OWORD *)(v160 - 24);
                    *((_QWORD *)v197 - 1) = *((_QWORD *)v160 - 1);
                    *(_OWORD *)(v197 - 24) = v198;
                    v197 -= 24;
                    v160 -= 24;
                  }
                  while (v160 != v189);
                  v160 = *(char **)v2183;
                }
                v199 = &v194[24 * v193];
                v195 = v196 + 24;
                *(_QWORD *)v2183 = v197;
                *(_QWORD *)&v2183[8] = v196 + 24;
                *(_QWORD *)&v2183[16] = v199;
                if (v160)
                  operator delete(v160);
              }
              *(_QWORD *)&v2183[8] = v195;
              v160 = v195;
            }
          }
          v200 = (_QWORD *)v162[1];
          if (v200)
          {
            do
            {
              v201 = v200;
              v200 = (_QWORD *)*v200;
            }
            while (v200);
          }
          else
          {
            do
            {
              v201 = (_QWORD *)v162[2];
              _ZF = *v201 == (_QWORD)v162;
              v162 = v201;
            }
            while (!_ZF);
          }
          v162 = v201;
          if (v201 == v161)
            goto LABEL_196;
          continue;
        }
      }
      v160 = 0;
      v164 = (_QWORD *)*v158;
      v161 = v158 + 1;
      v162 = v164;
      if (v164 != v161)
        goto LABEL_209;
LABEL_196:
      v165 = (_QWORD *)*((_QWORD *)v2057 + 1);
      v166 = (void *)v165[10];
      if (v166)
      {
        v165[11] = v166;
        operator delete(v166);
        v165[10] = 0;
        v165[11] = 0;
        v165[12] = 0;
        v160 = *(char **)&v2183[8];
      }
      v167 = *(_QWORD *)&v2183[16];
      v165[10] = *(_QWORD *)v2183;
      v165[11] = v160;
      v165[12] = v167;
      v168 = *(_QWORD **)&object[16];
      if (*(_QWORD *)&object[16])
      {
        do
        {
          v169 = (_QWORD *)*v168;
          operator delete(v168);
          v168 = v169;
        }
        while (v169);
      }
      v170 = *(void **)object;
      *(_QWORD *)object = 0;
      if (v170)
        operator delete(v170);
      v171 = *(_QWORD **)&v2151[88];
      if (*(_QWORD *)&v2151[88])
      {
        do
        {
          v172 = (_QWORD *)*v171;
          operator delete(v171);
          v171 = v172;
        }
        while (v172);
      }
      v173 = *(void **)&v2151[72];
      *(_QWORD *)&v2151[72] = 0;
      if (v173)
        operator delete(v173);
      if (*(_QWORD *)&v2151[48])
      {
        *(_QWORD *)&v2151[56] = *(_QWORD *)&v2151[48];
        operator delete(*(void **)&v2151[48]);
      }
      v83 = **(double **)&v83;
      if (v83 == 0.0)
        goto LABEL_256;
    }
    v116 = *(char **)(v70 + 6304);
    v117 = *(_QWORD *)(v70 + 6312);
    if ((unint64_t)v116 < v117)
    {
      *(_DWORD *)v116 = v88;
      v118 = (uint64_t)(v116 + 4);
LABEL_153:
      *(_QWORD *)(v70 + 6304) = v118;
      goto LABEL_154;
    }
    v119 = (char *)*v1966;
    v120 = v116 - (_BYTE *)*v1966;
    v121 = v120 >> 2;
    v122 = (v120 >> 2) + 1;
    if (v122 >> 62)
      sub_20E867F44();
    v123 = v117 - (_QWORD)v119;
    if (v123 >> 1 > v122)
      v122 = v123 >> 1;
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
      v124 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v124 = v122;
    if (v124)
    {
      if (v124 >> 62)
        sub_20E877A38();
      v125 = operator new(4 * v124);
      v126 = &v125[4 * v121];
      *v126 = v88;
      v118 = (uint64_t)(v126 + 1);
      v127 = v116 - v119;
      if (v116 == v119)
        goto LABEL_150;
    }
    else
    {
      v125 = 0;
      v126 = (_DWORD *)(4 * v121);
      *(_DWORD *)(4 * v121) = v88;
      v118 = 4 * v121 + 4;
      v127 = v116 - v119;
      if (v116 == v119)
      {
LABEL_150:
        *(_QWORD *)(v70 + 6296) = v126;
        *(_QWORD *)(v70 + 6304) = v118;
        *(_QWORD *)(v70 + 6312) = &v125[4 * v124];
        if (v119)
          operator delete(v119);
        v83 = v2064.f64[0];
        goto LABEL_153;
      }
    }
    v128 = v127 - 4;
    if (v128 < 0x2C)
      goto LABEL_1906;
    if ((unint64_t)(v116 - v125 - v120) < 0x20)
      goto LABEL_1906;
    v129 = (v128 >> 2) + 1;
    v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
    v131 = &v116[-v130];
    v126 = (_DWORD *)((char *)v126 - v130);
    v132 = &v125[4 * v121 - 16];
    v133 = v116 - 16;
    v134 = v129 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v135 = *(_OWORD *)v133;
      *(v132 - 1) = *((_OWORD *)v133 - 1);
      *v132 = v135;
      v132 -= 2;
      v133 -= 32;
      v134 -= 8;
    }
    while (v134);
    v116 = v131;
    if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1906:
      do
      {
        v136 = *((_DWORD *)v116 - 1);
        v116 -= 4;
        *--v126 = v136;
      }
      while (v116 != v119);
    }
    goto LABEL_150;
  }
LABEL_256:
  v202 = *(_QWORD *)v70;
  if (!*(_QWORD *)v70)
  {
LABEL_259:
    v228 = *(_QWORD *)(v70 + 8);
    v229 = *(_QWORD **)(v228 + 48);
    v2058 = (_QWORD *)(v228 + 56);
    if (v229 != (_QWORD *)(v228 + 56))
    {
LABEL_260:
      v1965 = (void **)(v2068 + 6200);
      v2001 = (_DWORD *)(v2068 + 6584);
      v1964 = (void **)(v2068 + 6224);
      v2031 = (float64x2_t *)(v2068 + 176);
      v1963 = (uint64_t *)(v2068 + 504);
      while (1)
      {
        v230 = v2064;
        LOBYTE(v230.f64[0]) = 0;
        v2064 = v230;
        v231 = *v2016;
        v232 = v2016[1];
        if (*v2016 != v232)
        {
          while (*(_DWORD *)v231 != *((_DWORD *)v229 + 10))
          {
            v231 += 48;
            if (v231 == v232)
              goto LABEL_276;
          }
        }
        if (v231 == v232)
        {
LABEL_276:
          v233 = 1;
          v234 = v229[4];
          v235 = *((unsigned int *)v229 + 10);
          v236 = v2068;
          if (*(_BYTE *)(v2068 + 2145))
            goto LABEL_277;
        }
        else
        {
          *(_OWORD *)__sz = *(_OWORD *)(v231 + 32);
          v2065 = *(float64x2_t *)(v231 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v2065), (int32x4_t)vcgtzq_f64(*(float64x2_t *)__sz))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v233 = 0;
          v2027 = vmulq_f64(*(float64x2_t *)__sz, *(float64x2_t *)(v2068 + 192));
          v230 = vmulq_f64(v2065, *v2031);
          v2064 = v230;
          v234 = v229[4];
          v235 = *((unsigned int *)v229 + 10);
          v236 = v2068;
          if (*(_BYTE *)(v2068 + 2145))
          {
LABEL_277:
            v247 = *(_QWORD *)(v236 + 8);
            v242 = v235;
            v243 = 0;
            v248 = *(uint64_t **)(v247 + 56);
            v244 = (uint64_t *)(v247 + 56);
            v245 = v248;
            if (!v248)
              goto LABEL_303;
            goto LABEL_280;
          }
        }
        v237 = *(_QWORD *)(v236 + 8);
        v238 = *(_QWORD *)(v237 + 48);
        v239 = *(_QWORD *)(v238 + 32);
        v240 = *(_DWORD *)(v238 + 40);
        if (v234 == v239 && (_DWORD)v235 == v240)
        {
          v243 = 1;
          v242 = v235;
          v249 = *(uint64_t **)(v237 + 56);
          v244 = (uint64_t *)(v237 + 56);
          v245 = v249;
          if (!v249)
            goto LABEL_303;
        }
        else
        {
          v242 = v235;
          v243 = 0;
          v246 = *(uint64_t **)(v237 + 56);
          v244 = (uint64_t *)(v237 + 56);
          v245 = v246;
          if (!v246)
            goto LABEL_303;
        }
LABEL_280:
        v250 = v244;
        do
        {
          v251 = v245[4];
          if (v251 < v234)
          {
            ++v245;
          }
          else if (v251 == v234)
          {
            if (*((_DWORD *)v245 + 10) < v242)
              ++v245;
            else
              v250 = v245;
          }
          else
          {
            v250 = v245;
          }
          v245 = (uint64_t *)*v245;
        }
        while (v245);
        if (v250 != v244)
        {
          v252 = v250[4];
          if (v234 >= v252 && (v234 != v252 || *((_DWORD *)v250 + 10) <= v242))
          {
            v253 = v250[6];
            if (v253)
            {
              v254 = v235;
              if ((v243 & 1) != 0
                || (v254 = v235 | 0x100000000, v255 = v235 | 0x100000000, !*(_BYTE *)(v2068 + 2146)))
              {
                v255 = v235;
                v256 = *(__int128 **)(v2068 + 4840);
                v257 = *(__int128 **)(v2068 + 4848);
                v258 = (char *)v257 - (char *)v256;
                if (v257 != v256)
                  goto LABEL_297;
              }
              else
              {
                v256 = *(__int128 **)(v2068 + 4840);
                v257 = *(__int128 **)(v2068 + 4848);
                v258 = (char *)v257 - (char *)v256;
                if (v257 != v256)
                {
LABEL_297:
                  v259 = v258 >> 4;
                  do
                  {
                    v260 = v259 >> 1;
                    v261 = (unsigned int *)&v256[v259 >> 1];
                    v263 = *v261;
                    v262 = (__int128 *)(v261 + 4);
                    v259 += ~(v259 >> 1);
                    if (v263 < v254)
                      v256 = v262;
                    else
                      v259 = v260;
                  }
                  while (v259);
LABEL_486:
                  __szc = (void *)v235;
                  v2011 = v233;
                  if (v257 != v256 && *(_DWORD *)v256 == (_DWORD)v254)
                  {
                    v372 = 0;
                    goto LABEL_513;
                  }
                  v1967 = *(int64x2_t *)(v253 + 24);
                  v1972 = *(int64x2_t *)v253;
                  v5.i64[0] = *(_QWORD *)(v253 + 16);
                  v1977 = v5;
                  v1981 = *(float64x2_t *)(v253 + 72);
                  v1986.i64[0] = *(_QWORD *)(v253 + 88);
                  v1988 = *(int8x16_t *)(v253 + 48);
                  v1990.i64[0] = *(_QWORD *)(v253 + 64);
                  v230.f64[0] = *(float64_t *)(v253 + 40);
                  *(float64x2_t *)categoryf = v230;
                  *(_OWORD *)v2183 = *(_OWORD *)(v253 + 792);
                  *(_QWORD *)&v2183[16] = *(_QWORD *)(v253 + 808);
                  *(_OWORD *)&object[7] = *(_OWORD *)(v253 + 768);
                  *(_QWORD *)&object[23] = *(_QWORD *)(v253 + 784);
                  v373 = (char *)sub_20F61BD6C(v2068 + 4864);
                  _D3 = vextq_s8(v1988, v1988, 8uLL).u64[0];
                  v375 = (float64x2_t)vzip1q_s64(v1972, v1967);
                  *(_QWORD *)&v376 = vextq_s8((int8x16_t)v375, (int8x16_t)v375, 8uLL).u64[0];
                  _Q5 = (float64x2_t)vzip2q_s64(v1972, v1967);
                  _D21 = categoryf[0];
                  v379 = (float64x2_t)vzip1q_s64(v1977, *(int64x2_t *)categoryf);
                  v380 = vextq_s8((int8x16_t)_Q5, (int8x16_t)vdupq_laneq_s64((int64x2_t)v1988, 1), 8uLL);
                  v381 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0), v380, 8uLL);
                  v382 = (float64x2_t)vzip1q_s64((int64x2_t)v375, (int64x2_t)v381);
                  *(_QWORD *)&v375.f64[1] = v376;
                  _V20.D[1] = v1981.f64[1];
                  *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
                  v384.f64[0] = v379.f64[0];
                  *(_QWORD *)&v384.f64[1] = vextq_s8((int8x16_t)v379, (int8x16_t)v379, 8uLL).u64[0];
                  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v1981.f64[0]), _Q5, v1981, 1), v384, *(double *)v1986.i64);
                  __asm { FMLA            D5, D3, V20.D[1] }
                  _D22 = v1990.i64[0];
                  _D3 = _Q5.f64[0] + *(double *)v1990.i64 * *(double *)v1986.i64;
                  v388 = vnegq_f64(_Q4);
                  *(_QWORD *)&v389.f64[0] = v376;
                  *(_QWORD *)&v389.f64[1] = vextq_s8(v381, v381, 8uLL).u64[0];
                  v390 = (float64x2_t)vzip1q_s64((int64x2_t)v1988, vdupq_laneq_s64((int64x2_t)v380, 1));
                  v391 = vmlsq_laneq_f64(vmulq_n_f64(v382, v388.f64[0]), v389, _Q4, 1);
                  *(_DWORD *)v373 = -1;
                  v373[4] = 1;
                  *((_DWORD *)v373 + 2) = 0;
                  *((_QWORD *)v373 + 2) = v254;
                  *((_QWORD *)v373 + 3) = v253;
                  *((_QWORD *)v373 + 6) = *(_QWORD *)&v379.f64[0];
                  *(_QWORD *)&v382.f64[1] = vextq_s8((int8x16_t)v382, (int8x16_t)v382, 8uLL).u64[0];
                  *((float64x2_t *)v373 + 2) = v382;
                  *((_QWORD *)v373 + 9) = *(_QWORD *)&v384.f64[1];
                  *((_QWORD *)&v376 + 1) = *(_QWORD *)&v389.f64[1];
                  *(_OWORD *)(v373 + 56) = v376;
                  *((_QWORD *)v373 + 12) = v1990.i64[0];
                  v392 = vmlsq_lane_f64(v391, v390, _D3, 0);
                  *(_QWORD *)&v390.f64[1] = vextq_s8((int8x16_t)v390, (int8x16_t)v390, 8uLL).u64[0];
                  *((float64x2_t *)v373 + 5) = v390;
                  _Q0 = vmulq_f64(v379, v388);
                  __asm
                  {
                    FMLS            D0, D21, V4.D[1]
                    FMLS            D0, D22, V3.D[0]
                  }
                  *((_QWORD *)v373 + 15) = *(_OWORD *)&vnegq_f64(_Q0);
                  v394 = (int8x16_t)vnegq_f64(v392);
                  v394.i64[1] = vextq_s8(v394, v394, 8uLL).u64[0];
                  *(int8x16_t *)(v373 + 104) = v394;
                  v373[128] = 0;
                  *(_OWORD *)(v373 + 136) = *(_OWORD *)&object[7];
                  *((_QWORD *)v373 + 19) = *(_QWORD *)&object[23];
                  *((_OWORD *)v373 + 10) = *(_OWORD *)v2183;
                  *((_QWORD *)v373 + 22) = *(_QWORD *)&v2183[16];
                  *((_QWORD *)v373 + 23) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 24) = 0;
                  *((_QWORD *)v373 + 25) = 0;
                  *((_QWORD *)v373 + 26) = 0;
                  *((_QWORD *)v373 + 27) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 28) = 0;
                  *((_QWORD *)v373 + 29) = 0;
                  *((_QWORD *)v373 + 30) = 0;
                  *((_QWORD *)v373 + 31) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 33) = 0;
                  *((_QWORD *)v373 + 34) = 0;
                  *((_QWORD *)v373 + 32) = 0;
                  LODWORD(v2150[0]) = v254;
                  v2150[1] = v373;
                  sub_20F61BB04((char **)(v2068 + 4840), v256, (uint64_t)v2150);
                  if ((v254 & 0x100000000) != 0)
                  {
                    v395 = *(char **)(v2068 + 6208);
                    v396 = *(_QWORD *)(v2068 + 6216);
                    if ((unint64_t)v395 < v396)
                    {
                      *(_DWORD *)v395 = v254;
                      v397 = (uint64_t)(v395 + 4);
                      goto LABEL_511;
                    }
                    v398 = (char *)*v1965;
                    v399 = v395 - (_BYTE *)*v1965;
                    v400 = v399 >> 2;
                    v401 = (v399 >> 2) + 1;
                    if (v401 >> 62)
                      sub_20E867F44();
                    v402 = v396 - (_QWORD)v398;
                    if (v402 >> 1 > v401)
                      v401 = v402 >> 1;
                    if ((unint64_t)v402 >= 0x7FFFFFFFFFFFFFFCLL)
                      v403 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v403 = v401;
                    if (v403)
                    {
                      v1990.i64[0] = v395 - (_BYTE *)*v1965;
                      category = v399 >> 2;
                      if (v403 >> 62)
                        sub_20E877A38();
                      v404 = v403;
                      v405 = operator new(4 * v403);
                      v403 = v404;
                      v400 = category;
                      v399 = v1990.i64[0];
                      v406 = &v405[4 * category];
                      *v406 = v254;
                      v397 = (uint64_t)(v406 + 1);
                      v407 = v395 - v398;
                      if (v395 == v398)
                        goto LABEL_509;
LABEL_503:
                      v408 = v407 - 4;
                      if (v408 < 0x2C)
                        goto LABEL_1907;
                      if ((unint64_t)(v395 - v405 - v399) < 0x20)
                        goto LABEL_1907;
                      v409 = (v408 >> 2) + 1;
                      v410 = 4 * (v409 & 0x7FFFFFFFFFFFFFF8);
                      v411 = &v395[-v410];
                      v406 = (_DWORD *)((char *)v406 - v410);
                      v412 = &v405[4 * v400 - 16];
                      v413 = v395 - 16;
                      v414 = v409 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v415 = *(_OWORD *)v413;
                        *(v412 - 1) = *((_OWORD *)v413 - 1);
                        *v412 = v415;
                        v412 -= 2;
                        v413 -= 32;
                        v414 -= 8;
                      }
                      while (v414);
                      v395 = v411;
                      if (v409 != (v409 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1907:
                        do
                        {
                          v416 = *((_DWORD *)v395 - 1);
                          v395 -= 4;
                          *--v406 = v416;
                        }
                        while (v395 != v398);
                      }
                    }
                    else
                    {
                      v405 = 0;
                      v406 = (_DWORD *)(4 * v400);
                      *(_DWORD *)(4 * v400) = v254;
                      v397 = 4 * v400 + 4;
                      v407 = v395 - v398;
                      if (v395 != v398)
                        goto LABEL_503;
                    }
LABEL_509:
                    *(_QWORD *)(v2068 + 6200) = v406;
                    *(_QWORD *)(v2068 + 6208) = v397;
                    *(_QWORD *)(v2068 + 6216) = &v405[4 * v403];
                    if (v398)
                      operator delete(v398);
LABEL_511:
                    *(_QWORD *)(v2068 + 6208) = v397;
                  }
                  v2019[2] = 0;
                  *v2019 = 0;
                  *v2001 = 0;
                  v372 = 1;
                  *(_BYTE *)(v2068 + 6588) = 0;
LABEL_513:
                  v417 = *(__int128 **)(v2068 + 4936);
                  v418 = *(__int128 **)(v2068 + 4944);
                  if (v418 == v417)
                  {
                    v417 = *(__int128 **)(v2068 + 4944);
                    goto LABEL_523;
                  }
                  v419 = v418 - v417;
                  do
                  {
                    v420 = v419 >> 1;
                    v421 = (unsigned int *)&v417[v419 >> 1];
                    v423 = *v421;
                    v422 = (__int128 *)(v421 + 4);
                    v419 += ~(v419 >> 1);
                    if (v423 < v255)
                      v417 = v422;
                    else
                      v419 = v420;
                  }
                  while (v419);
                  if (v418 != v417 && *(_DWORD *)v417 == (_DWORD)v255)
                    goto LABEL_547;
LABEL_523:
                  v1982 = *(int8x16_t *)(v253 + 96);
                  v1986 = *(int8x16_t *)(v253 + 112);
                  v1988 = *(int8x16_t *)(v253 + 128);
                  v1990 = *(int8x16_t *)(v253 + 144);
                  categoryg = *(_QWORD *)(v253 + 160);
                  v1978 = v372;
                  v424 = sub_20F61C2D4(v2068 + 4960);
                  v425 = v1990;
                  v426 = v1988;
                  v427 = v1986;
                  *(_DWORD *)v424 = -1;
                  v428 = v1982;
                  *(_BYTE *)(v424 + 4) = 1;
                  *(_DWORD *)(v424 + 8) = 0;
                  *(_QWORD *)(v424 + 16) = v255;
                  *(_QWORD *)(v424 + 24) = v253;
                  v428.i64[1] = vextq_s8(v428, v428, 8uLL).u64[0];
                  v427.i64[1] = vextq_s8(v427, v427, 8uLL).u64[0];
                  *(int8x16_t *)(v424 + 32) = v428;
                  *(int8x16_t *)(v424 + 48) = v427;
                  v426.i64[1] = vextq_s8(v426, v426, 8uLL).u64[0];
                  v425.i64[1] = vextq_s8(v425, v425, 8uLL).u64[0];
                  *(_QWORD *)(v424 + 96) = categoryg;
                  *(int8x16_t *)(v424 + 64) = v426;
                  *(int8x16_t *)(v424 + 80) = v425;
                  *(_BYTE *)(v424 + 104) = 0;
                  *(_DWORD *)object = v255;
                  *(_QWORD *)&object[8] = v424;
                  sub_20F61C06C((char **)(v2068 + 4936), v417, (uint64_t)object);
                  if ((v255 & 0x100000000) != 0)
                  {
                    v429 = *(char **)(v2068 + 6232);
                    v430 = *(_QWORD *)(v2068 + 6240);
                    if ((unint64_t)v429 < v430)
                    {
                      *(_DWORD *)v429 = v255;
                      v431 = (uint64_t)(v429 + 4);
                      goto LABEL_545;
                    }
                    v432 = (char *)*v1964;
                    v433 = v429 - (_BYTE *)*v1964;
                    v434 = v433 >> 2;
                    v435 = (v433 >> 2) + 1;
                    if (v435 >> 62)
                      sub_20E867F44();
                    v436 = v430 - (_QWORD)v432;
                    if (v436 >> 1 > v435)
                      v435 = v436 >> 1;
                    if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL)
                      v437 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v437 = v435;
                    if (v437)
                    {
                      if (v437 >> 62)
                        sub_20E877A38();
                      v438 = v437;
                      v439 = operator new(4 * v437);
                      v437 = v438;
                      v440 = &v439[4 * v434];
                      *v440 = v255;
                      v431 = (uint64_t)(v440 + 1);
                      v441 = v429 - v432;
                      if (v429 == v432)
                        goto LABEL_543;
LABEL_537:
                      v442 = v441 - 4;
                      if (v442 < 0x2C)
                        goto LABEL_1908;
                      if ((unint64_t)(v429 - v439 - v433) < 0x20)
                        goto LABEL_1908;
                      v443 = (v442 >> 2) + 1;
                      v444 = 4 * (v443 & 0x7FFFFFFFFFFFFFF8);
                      v445 = &v429[-v444];
                      v440 = (_DWORD *)((char *)v440 - v444);
                      v446 = &v439[4 * v434 - 16];
                      v447 = v429 - 16;
                      v448 = v443 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v449 = *(_OWORD *)v447;
                        *(v446 - 1) = *((_OWORD *)v447 - 1);
                        *v446 = v449;
                        v446 -= 2;
                        v447 -= 32;
                        v448 -= 8;
                      }
                      while (v448);
                      v429 = v445;
                      if (v443 != (v443 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1908:
                        do
                        {
                          v450 = *((_DWORD *)v429 - 1);
                          v429 -= 4;
                          *--v440 = v450;
                        }
                        while (v429 != v432);
                      }
                    }
                    else
                    {
                      v439 = 0;
                      v440 = (_DWORD *)(4 * v434);
                      *(_DWORD *)(4 * v434) = v255;
                      v431 = 4 * v434 + 4;
                      v441 = v429 - v432;
                      if (v429 != v432)
                        goto LABEL_537;
                    }
LABEL_543:
                    *(_QWORD *)(v2068 + 6224) = v440;
                    *(_QWORD *)(v2068 + 6232) = v431;
                    *(_QWORD *)(v2068 + 6240) = &v439[4 * v437];
                    if (v432)
                      operator delete(v432);
LABEL_545:
                    *(_QWORD *)(v2068 + 6232) = v431;
                  }
                  v2019[2] = 0;
                  *v2019 = 0;
                  *v2001 = 0;
                  *(_BYTE *)(v2068 + 6588) = 0;
                  if ((v1978 & 1) == 0)
                  {
LABEL_547:
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 582, (uint64_t)"ret.second && ret2.second", 25, (uint64_t)"Failed to add PoseVariable or VelAndBiasVariable.", 49, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                  }
                  if (*(_BYTE *)(v2068 + 2146))
                    v451 = v243;
                  else
                    v451 = 1;
                  if ((v451 & 1) != 0)
                    goto LABEL_478;
                  v452 = *(_QWORD **)(v2068 + 8);
                  v453 = v452[8];
                  v454 = v452[39] * v453;
                  if (!v454)
                    goto LABEL_478;
                  v455 = 0;
                  v456 = 0;
                  v457 = 0;
                  v458 = 0;
                  v459 = 1;
                  v460 = __szc;
                  while (1)
                  {
                    v461 = v458 % v453;
                    if (((v458 % v453) & 0x8000000000000000) != 0)
                    {
                      v465 = (_QWORD *)v452[6];
                      do
                      {
                        v466 = (_QWORD *)*v465;
                        if (*v465)
                        {
                          do
                          {
                            v462 = v466;
                            v466 = (_QWORD *)v466[1];
                          }
                          while (v466);
                        }
                        else
                        {
                          do
                          {
                            v462 = (_QWORD *)v465[2];
                            _ZF = *v462 == (_QWORD)v465;
                            v465 = v462;
                          }
                          while (_ZF);
                        }
                        v465 = v462;
                        _CF = __CFADD__(v461++, 1);
                      }
                      while (!_CF);
                    }
                    else
                    {
                      v462 = (_QWORD *)v452[6];
                      if (v461)
                      {
                        v463 = (_QWORD *)v452[6];
                        do
                        {
                          v464 = (_QWORD *)v463[1];
                          if (v464)
                          {
                            do
                            {
                              v462 = v464;
                              v464 = (_QWORD *)*v464;
                            }
                            while (v464);
                          }
                          else
                          {
                            do
                            {
                              v462 = (_QWORD *)v463[2];
                              _ZF = *v462 == (_QWORD)v463;
                              v463 = v462;
                            }
                            while (!_ZF);
                          }
                          v463 = v462;
                          v1506 = v461-- <= 1;
                        }
                        while (!v1506);
                      }
                    }
                    v467 = v462[4];
                    v468 = v462[5];
                    if (v467 == v234 && v242 == (_DWORD)v468)
                      break;
                    v459 = 0;
                    v457 = v468;
                    v455 = v467 & 0xFFFFFFFFFFFFFF00;
                    ++v458;
                    v456 = v467;
                    if (v458 == v454)
                      goto LABEL_478;
                  }
                  if ((v459 & 1) != 0 || v234 != (v456 | v455))
                    goto LABEL_478;
                  if (v2011)
                    v470 = -1;
                  else
                    v470 = 0;
                  v473 = (uint64_t *)v452[7];
                  v471 = v452 + 7;
                  v472 = v473;
                  if (v473)
                  {
                    v474 = v471;
                    v475 = v471;
                    v476 = v472;
                    do
                    {
                      v477 = v476[4];
                      if (v477 < v234)
                      {
                        ++v476;
                      }
                      else if (v477 == v234)
                      {
                        if (*((_DWORD *)v476 + 10) < __szc)
                          ++v476;
                        else
                          v475 = v476;
                      }
                      else
                      {
                        v475 = v476;
                      }
                      v476 = (uint64_t *)*v476;
                    }
                    while (v476);
                    if (v475 == v471)
                    {
                      v479 = 0;
                    }
                    else
                    {
                      v478 = v475[4];
                      if (v234 >= v478)
                      {
                        if (v234 == v478 && *((_DWORD *)v475 + 10) > __szc)
                          v479 = 0;
                        else
                          v479 = v475[6];
                      }
                      else
                      {
                        v479 = 0;
                      }
                    }
                    do
                    {
                      v481 = v472[4];
                      if (v481 < v234)
                      {
                        ++v472;
                      }
                      else if (v481 == v234)
                      {
                        if (*((_DWORD *)v472 + 10) < v457)
                          ++v472;
                        else
                          v474 = v472;
                      }
                      else
                      {
                        v474 = v472;
                      }
                      v472 = (uint64_t *)*v472;
                    }
                    while (v472);
                    if (v474 != v471)
                    {
                      v482 = v474[4];
                      if (v234 >= v482 && (v234 != v482 || *((_DWORD *)v474 + 10) <= v457))
                      {
                        v480 = v474[6];
                        if (!v479 || !v480)
                          goto LABEL_612;
LABEL_613:
                        v484 = v1962;
                        v484.i8[0] = 0;
                        v485 = vdupq_n_s8(v470);
                        v1961 = vbslq_s8(v485, v1961, (int8x16_t)v2027);
                        v1962 = vbslq_s8(v485, v484, (int8x16_t)v2064);
                        v486 = (_QWORD *)v2068;
                        if (*(_BYTE *)(v2068 + 2148))
                        {
                          v487 = *(uint64_t **)(v2068 + 136);
                          if (v487)
                          {
                            v489 = *v487;
                            v488 = v487[1];
                            if (v488 != v489)
                            {
                              v490 = 0x80BFA02FE80BFA03 * ((v488 - v489) >> 4);
                              do
                              {
                                v491 = v490 >> 1;
                                v492 = v489 + 2736 * (v490 >> 1);
                                if (*(_QWORD *)v492 < v234 || *(_QWORD *)v492 == v234 && *(_DWORD *)(v492 + 8) < v460)
                                {
                                  v489 = v492 + 2736;
                                  v491 = v490 + ~v491;
                                }
                                v490 = v491;
                              }
                              while (v491);
                            }
                            v486 = (_QWORD *)v2068;
                            if (v489 != v488 && *(_QWORD *)v489 == v234 && *(_DWORD *)(v489 + 8) == v460)
                            {
                              v2071 = 0;
                              v2070 = 0;
                              if (*(_BYTE *)(v2068 + 1317))
                              {
                                v493 = *v1963;
                                if (!*v1963)
                                {
                                  __asm { FMOV            V0.2D, #1.0 }
                                  *(_OWORD *)&object[72] = _Q0;
                                  *(_OWORD *)&object[88] = _Q0;
                                  *(_OWORD *)&object[104] = _Q0;
                                  *(double *)object = *(double *)(v2068 + 1328) * *(double *)(v2068 + 1328);
                                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                                  *(_QWORD *)&object[16] = *(_QWORD *)object;
                                  *(_QWORD *)&object[24] = *(_QWORD *)object;
                                  *(_QWORD *)&object[32] = *(_QWORD *)object;
                                  *(_QWORD *)&object[40] = *(_QWORD *)object;
                                  *(double *)&object[48] = *(double *)(v2068 + 1320) * *(double *)(v2068 + 1320);
                                  *(_QWORD *)&object[56] = *(_QWORD *)&object[48];
                                  *(_QWORD *)&object[64] = *(_QWORD *)&object[48];
                                  LODWORD(v2150[0]) = 0;
                                  sub_20F61C5D4((double *)object, (unsigned int *)v2150, v2183);
                                  v495 = *(_OWORD *)v2183;
                                  *(_QWORD *)v2183 = 0;
                                  *(_QWORD *)&v2183[8] = 0;
                                  v496 = *(std::__shared_weak_count **)(v2068 + 512);
                                  *(_OWORD *)v1963 = v495;
                                  if (v496)
                                  {
                                    p_shared_owners = (unint64_t *)&v496->__shared_owners_;
                                    do
                                      v498 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v498 - 1, p_shared_owners));
                                    if (!v498)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
                                      std::__shared_weak_count::__release_weak(v496);
                                    }
                                  }
                                  v499 = *(std::__shared_weak_count **)&v2183[8];
                                  if (*(_QWORD *)&v2183[8])
                                  {
                                    v500 = (unint64_t *)(*(_QWORD *)&v2183[8] + 8);
                                    do
                                      v501 = __ldaxr(v500);
                                    while (__stlxr(v501 - 1, v500));
                                    if (!v501)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                                      std::__shared_weak_count::__release_weak(v499);
                                    }
                                  }
                                  v493 = *v1963;
                                }
                                v502 = *(std::__shared_weak_count **)(v2068 + 512);
                                if (v502)
                                {
                                  v503 = (unint64_t *)&v502->__shared_owners_;
                                  do
                                    v504 = __ldxr(v503);
                                  while (__stxr(v504 + 1, v503));
                                }
                                v2070 = v493;
                                v2071 = v502;
                              }
                              else
                              {
                                v502 = 0;
                              }
                              v2012 = *(_DWORD *)(v489 + 40);
                              v505 = *(_DWORD *)(v489 + 24);
                              v2069 = v502;
                              if (v502)
                              {
                                v506 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v507 = __ldxr(v506);
                                while (__stxr(v507 + 1, v506));
                              }
                              v1991 = *(double *)(v489 + 2720);
                              categoryh = *(double *)(v489 + 2728);
                              v2150[0] = __szc;
                              v1989 = *(double *)(v489 + 1616);
                              bzero(&object[8], 0x6F8uLL);
                              *(_QWORD *)object = 0x3FF0000000000000;
                              *(_QWORD *)&object[128] = 0x3FF0000000000000;
                              *(_QWORD *)&object[256] = 0x3FF0000000000000;
                              *(_QWORD *)&object[384] = 0x3FF0000000000000;
                              *(_QWORD *)&object[512] = 0x3FF0000000000000;
                              *(_QWORD *)&object[640] = 0x3FF0000000000000;
                              *(_QWORD *)&object[768] = 0x3FF0000000000000;
                              *(_QWORD *)&object[896] = 0x3FF0000000000000;
                              *(_QWORD *)&object[1024] = 0x3FF0000000000000;
                              v1983 = *(_QWORD *)(v489 + 2112);
                              v508 = *(_OWORD *)(v489 + 2080);
                              v1928 = *(_OWORD *)(v489 + 2096);
                              v509 = *(_OWORD *)(v489 + 2064);
                              v1979 = *(_QWORD *)(v489 + 2184);
                              v1924 = *(_OWORD *)(v489 + 2168);
                              v1916 = *(_OWORD *)(v489 + 2152);
                              v510 = *(_OWORD *)(v489 + 2136);
                              v511 = *(_OWORD *)(v489 + 2120);
                              v1987 = *(_QWORD *)(v489 + 2256);
                              v1922 = *(_OWORD *)(v489 + 2240);
                              v512 = *(_OWORD *)(v489 + 2208);
                              v1914 = *(_OWORD *)(v489 + 2224);
                              v513 = *(_OWORD *)(v489 + 2192);
                              v1973 = *(_QWORD *)(v489 + 2328);
                              v514 = *(_OWORD *)(v489 + 2264);
                              v1913 = *(_OWORD *)(v489 + 2312);
                              v515 = *(_OWORD *)(v489 + 2296);
                              v516 = *(_OWORD *)(v489 + 2280);
                              v1968 = *(_QWORD *)(v489 + 2400);
                              v517 = *(_OWORD *)(v489 + 2368);
                              v1919 = *(_OWORD *)(v489 + 2384);
                              v518 = *(_OWORD *)(v489 + 2336);
                              v519 = *(_OWORD *)(v489 + 2352);
                              v521 = *(_OWORD *)(v489 + 2440);
                              v520 = *(_OWORD *)(v489 + 2456);
                              v523 = *(_OWORD *)(v489 + 2408);
                              v522 = *(_OWORD *)(v489 + 2424);
                              v524 = *(_QWORD *)(v489 + 2472);
                              v525 = *(_QWORD *)(v489 + 2544);
                              v526 = *(_OWORD *)(v489 + 2512);
                              v527 = *(_OWORD *)(v489 + 2528);
                              v528 = *(_OWORD *)(v489 + 2480);
                              v529 = *(_OWORD *)(v489 + 2496);
                              v530 = *(_QWORD *)(v489 + 2616);
                              v531 = *(_OWORD *)(v489 + 2584);
                              v532 = *(_OWORD *)(v489 + 2600);
                              v533 = *(_OWORD *)(v489 + 2552);
                              v534 = *(_OWORD *)(v489 + 2568);
                              v1917 = *(_QWORD *)(v489 + 2688);
                              v536 = *(_OWORD *)(v489 + 2656);
                              v535 = *(_OWORD *)(v489 + 2672);
                              v537 = *(_OWORD *)(v489 + 2624);
                              v538 = *(_OWORD *)(v489 + 2640);
                              *(_OWORD *)object = *(_OWORD *)(v489 + 2048);
                              *(_OWORD *)&object[16] = v509;
                              *(_OWORD *)&object[32] = v508;
                              *(_OWORD *)&object[48] = v1928;
                              *(_OWORD *)&object[120] = v511;
                              *(_OWORD *)&object[136] = v510;
                              *(_OWORD *)&object[152] = v1916;
                              *(_OWORD *)&object[168] = v1924;
                              *(_QWORD *)&object[64] = v1983;
                              *(_QWORD *)&object[184] = v1979;
                              *(_OWORD *)&object[240] = v513;
                              *(_OWORD *)&object[256] = v512;
                              *(_OWORD *)&object[272] = v1914;
                              *(_OWORD *)&object[288] = v1922;
                              *(_OWORD *)&object[360] = v514;
                              *(_OWORD *)&object[376] = v516;
                              *(_OWORD *)&object[392] = v515;
                              *(_OWORD *)&object[408] = v1913;
                              *(_QWORD *)&object[424] = v1973;
                              *(_OWORD *)&object[480] = v518;
                              *(_OWORD *)&object[496] = v519;
                              *(_OWORD *)&object[512] = v517;
                              *(_OWORD *)&object[528] = v1919;
                              *(_QWORD *)&object[544] = v1968;
                              *(_OWORD *)&object[600] = v523;
                              *(_OWORD *)&object[616] = v522;
                              *(_OWORD *)&object[632] = v521;
                              *(_OWORD *)&object[648] = v520;
                              *(_QWORD *)&object[664] = v524;
                              *(_OWORD *)&object[720] = v528;
                              *(_OWORD *)&object[736] = v529;
                              *(_OWORD *)&object[752] = v526;
                              *(_OWORD *)&object[768] = v527;
                              *(_QWORD *)&object[784] = v525;
                              *(_OWORD *)&object[840] = v533;
                              *(_OWORD *)&object[856] = v534;
                              *(_OWORD *)&object[872] = v531;
                              *(_OWORD *)&object[888] = v532;
                              *(_QWORD *)&object[904] = v530;
                              *(_OWORD *)&object[960] = v537;
                              *(_OWORD *)&object[976] = v538;
                              *(_OWORD *)&object[992] = v536;
                              *(_OWORD *)&object[1008] = v535;
                              *(_QWORD *)&object[1024] = v1917;
                              *(_QWORD *)&object[304] = v1987;
                              *(double *)&object[1152] = v1991 * v1991 * v1989;
                              *(double *)&object[1280] = *(double *)&object[1152];
                              *(double *)&object[1408] = *(double *)&object[1152];
                              *(double *)&object[1536] = categoryh * categoryh * v1989;
                              *(double *)&object[1664] = *(double *)&object[1536];
                              *(double *)&object[1792] = *(double *)&object[1536];
                              sub_20F61DEF0((float64x2_t *)object, (uint64_t)v2151);
                              v539.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2151[256], 1).u64[0];
                              v539.i64[1] = *(_QWORD *)&v2151[384];
                              v1990 = v539;
                              v539.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2151[496], 1).u64[0];
                              v539.i64[1] = *(_QWORD *)&v2151[624];
                              v1986 = v539;
                              v1988 = (int8x16_t)vzip2q_s64(*(int64x2_t *)&v2151[16], *(int64x2_t *)&v2151[136]);
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[736], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[864];
                              v1969 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[976], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1104];
                              v1925 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1216], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1344];
                              v1915 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1456], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1584];
                              v1910 = v540;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[272], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[400];
                              v1929 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[512], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[640];
                              v1920 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[752], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[880];
                              v1912 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[992], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[1120];
                              v1909 = v541;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1232], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[1360];
                              v1907 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1472], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[1600];
                              v1905 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[288], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[416];
                              v1911 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[528], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[656];
                              v1908 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[768], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[896];
                              v1904 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1008], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1136];
                              v1902 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1248], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1376];
                              v1899 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1488], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1616];
                              v1897 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[304], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[432];
                              v1906 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[544], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[672];
                              v1903 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[784], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[912];
                              v1900 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1024], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1152];
                              v1896 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1264], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1392];
                              v1893 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1504], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1632];
                              v1891 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[320], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[448];
                              v1901 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[560], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[688];
                              v1898 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[800], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[928];
                              v1894 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1040], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1168];
                              v1892 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1280], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1408];
                              v1888 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1520], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1648];
                              v1885 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[336], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[464];
                              v1895 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[576], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[704];
                              v1889 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[816], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[944];
                              v1887 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1056], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1184];
                              v1884 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1296], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1424];
                              v1882 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1536], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1664];
                              v1881 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[352], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[480];
                              v1890 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[592], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[720];
                              v1886 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[832], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[960];
                              v1883 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1072], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1200];
                              v1880 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1312], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1440];
                              v1879 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1552], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1680];
                              v1878 = v543;
                              v545 = *(_QWORD *)(v489 + 64);
                              *(_QWORD *)&v535 = *(_QWORD *)(v489 + 1616);
                              *(_OWORD *)&v2151[1816] = *(_OWORD *)(v489 + 48);
                              *(_QWORD *)&v2151[1832] = v545;
                              v546 = *(_QWORD *)(v489 + 88);
                              *(_OWORD *)&v2151[1840] = *(_OWORD *)(v489 + 72);
                              *(_QWORD *)&v2151[1856] = v546;
                              v547 = *(_OWORD *)(v489 + 112);
                              v2152[0] = *(_OWORD *)(v489 + 96);
                              v2152[1] = v547;
                              v2152[2] = *(_OWORD *)(v489 + 128);
                              v548 = *(_QWORD *)(v489 + 192);
                              v549 = *(_OWORD *)(v489 + 144);
                              v550 = *(_OWORD *)(v489 + 176);
                              v2152[4] = *(_OWORD *)(v489 + 160);
                              v2152[5] = v550;
                              v2152[3] = v549;
                              *(_QWORD *)&v2152[6] = v548;
                              *(_OWORD *)((char *)&v2152[6] + 8) = *(_OWORD *)(v489 + 200);
                              v551 = *(_QWORD *)(v489 + 264);
                              v552 = *(_OWORD *)(v489 + 216);
                              v553 = *(_OWORD *)(v489 + 248);
                              *(_OWORD *)((char *)&v2152[8] + 8) = *(_OWORD *)(v489 + 232);
                              *(_OWORD *)((char *)&v2152[9] + 8) = v553;
                              *(_OWORD *)((char *)&v2152[7] + 8) = v552;
                              *((_QWORD *)&v2152[10] + 1) = v551;
                              v2152[11] = *(_OWORD *)(v489 + 272);
                              v554 = *(_QWORD *)(v489 + 336);
                              v555 = *(_OWORD *)(v489 + 288);
                              v556 = *(_OWORD *)(v489 + 320);
                              v2152[13] = *(_OWORD *)(v489 + 304);
                              v2152[14] = v556;
                              v2152[12] = v555;
                              *(_QWORD *)&v2152[15] = v554;
                              *(_OWORD *)((char *)&v2152[15] + 8) = *(_OWORD *)(v489 + 344);
                              v557 = *(_QWORD *)(v489 + 408);
                              v558 = *(_OWORD *)(v489 + 360);
                              v559 = *(_OWORD *)(v489 + 392);
                              *(_OWORD *)((char *)&v2152[17] + 8) = *(_OWORD *)(v489 + 376);
                              *(_OWORD *)((char *)&v2152[18] + 8) = v559;
                              *(_OWORD *)((char *)&v2152[16] + 8) = v558;
                              *((_QWORD *)&v2152[19] + 1) = v557;
                              v2152[20] = *(_OWORD *)(v489 + 416);
                              v560 = *(_QWORD *)(v489 + 480);
                              v561 = *(_OWORD *)(v489 + 432);
                              v562 = *(_OWORD *)(v489 + 464);
                              v2152[22] = *(_OWORD *)(v489 + 448);
                              v2152[23] = v562;
                              v2152[21] = v561;
                              *(_QWORD *)&v2152[24] = v560;
                              *(_OWORD *)((char *)&v2152[24] + 8) = *(_OWORD *)(v489 + 488);
                              v563 = *(_QWORD *)(v489 + 552);
                              v564 = *(_OWORD *)(v489 + 504);
                              v565 = *(_OWORD *)(v489 + 536);
                              *(_OWORD *)((char *)&v2152[26] + 8) = *(_OWORD *)(v489 + 520);
                              *(_OWORD *)((char *)&v2152[27] + 8) = v565;
                              *(_OWORD *)((char *)&v2152[25] + 8) = v564;
                              *((_QWORD *)&v2152[28] + 1) = v563;
                              v2152[29] = *(_OWORD *)(v489 + 560);
                              v566 = *(_QWORD *)(v489 + 624);
                              v567 = *(_OWORD *)(v489 + 576);
                              v568 = *(_OWORD *)(v489 + 608);
                              v2152[31] = *(_OWORD *)(v489 + 592);
                              v2152[32] = v568;
                              v2152[30] = v567;
                              *(_QWORD *)&v2152[33] = v566;
                              *(_OWORD *)((char *)&v2152[33] + 8) = *(_OWORD *)(v489 + 632);
                              v569 = *(_QWORD *)(v489 + 696);
                              v570 = *(_OWORD *)(v489 + 648);
                              v571 = *(_OWORD *)(v489 + 680);
                              *(_OWORD *)((char *)&v2152[35] + 8) = *(_OWORD *)(v489 + 664);
                              *(_OWORD *)((char *)&v2152[36] + 8) = v571;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[128];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[248];
                              v1877 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[368];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[488];
                              v1876 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[608];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[728];
                              v1875 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[848];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[968];
                              v1874 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1088];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1208];
                              v1873 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1328];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1448];
                              v1872 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1568];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1688];
                              *(_OWORD *)((char *)&v2152[34] + 8) = v570;
                              *((_QWORD *)&v2152[37] + 1) = v569;
                              v1871 = v547;
                              memcpy(&v2152[38], (const void *)(v489 + 704), 0x288uLL);
                              v572 = *(_QWORD *)(v489 + 1368);
                              *(_OWORD *)((char *)&v2152[78] + 8) = *(_OWORD *)(v489 + 1352);
                              *((_QWORD *)&v2152[79] + 1) = v572;
                              v573 = *(_QWORD *)(v489 + 1392);
                              v2152[80] = *(_OWORD *)(v489 + 1376);
                              *(int64x2_t *)((char *)&v2152[86] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1216], *(int64x2_t *)&v2151[1336]);
                              *(int64x2_t *)((char *)&v2152[87] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1456], *(int64x2_t *)&v2151[1576]);
                              *(int64x2_t *)((char *)&v2152[84] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[736], *(int64x2_t *)&v2151[856]);
                              *(int64x2_t *)((char *)&v2152[85] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[976], *(int64x2_t *)&v2151[1096]);
                              *(_QWORD *)&v2152[96] = *(_QWORD *)&v2151[1704];
                              *((_QWORD *)&v2152[88] + 1) = *(_QWORD *)&v2151[1696];
                              *(int64x2_t *)((char *)&v2152[82] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[256], *(int64x2_t *)&v2151[376]);
                              *(int64x2_t *)((char *)&v2152[83] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[496], *(int64x2_t *)&v2151[616]);
                              *(int64x2_t *)((char *)&v2152[81] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[16], *(int64x2_t *)&v2151[136]);
                              v2152[95] = v1910;
                              v2152[94] = v1915;
                              v2152[93] = v1925;
                              v2152[92] = v1969;
                              v2152[91] = v1986;
                              v2152[90] = v1990;
                              v2152[89] = v1988;
                              *(int64x2_t *)((char *)&v2152[101] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1232], *(int64x2_t *)&v2151[1352]);
                              *(int64x2_t *)((char *)&v2152[102] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1472], *(int64x2_t *)&v2151[1592]);
                              *(int64x2_t *)((char *)&v2152[99] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[752], *(int64x2_t *)&v2151[872]);
                              *(int64x2_t *)((char *)&v2152[100] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[992], *(int64x2_t *)&v2151[1112]);
                              *(_QWORD *)&v2152[111] = *(_QWORD *)&v2151[1720];
                              *((_QWORD *)&v2152[103] + 1) = *(_QWORD *)&v2151[1712];
                              *(int64x2_t *)((char *)&v2152[97] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[272], *(int64x2_t *)&v2151[392]);
                              *(int64x2_t *)((char *)&v2152[98] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[512], *(int64x2_t *)&v2151[632]);
                              *(int64x2_t *)((char *)&v2152[96] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[32], *(int64x2_t *)&v2151[152]);
                              v2152[109] = v1907;
                              v2152[110] = v1905;
                              v2152[107] = v1912;
                              v2152[108] = v1909;
                              v2152[105] = v1929;
                              v2152[106] = v1920;
                              v2152[104] = vzip2q_s64(*(int64x2_t *)&v2151[32], *(int64x2_t *)&v2151[152]);
                              *(int64x2_t *)((char *)&v2152[116] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1248], *(int64x2_t *)&v2151[1368]);
                              *(int64x2_t *)((char *)&v2152[117] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1488], *(int64x2_t *)&v2151[1608]);
                              *(int64x2_t *)((char *)&v2152[114] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[768], *(int64x2_t *)&v2151[888]);
                              *(int64x2_t *)((char *)&v2152[115] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1008], *(int64x2_t *)&v2151[1128]);
                              *(_QWORD *)&v2152[126] = *(_QWORD *)&v2151[1736];
                              *((_QWORD *)&v2152[118] + 1) = *(_QWORD *)&v2151[1728];
                              *(int64x2_t *)((char *)&v2152[112] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[288], *(int64x2_t *)&v2151[408]);
                              *(int64x2_t *)((char *)&v2152[113] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[528], *(int64x2_t *)&v2151[648]);
                              *(int64x2_t *)((char *)&v2152[111] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[48], *(int64x2_t *)&v2151[168]);
                              v2152[124] = v1899;
                              v2152[125] = v1897;
                              v2152[122] = v1904;
                              v2152[123] = v1902;
                              v2152[120] = v1911;
                              v2152[121] = v1908;
                              v2152[119] = vzip2q_s64(*(int64x2_t *)&v2151[48], *(int64x2_t *)&v2151[168]);
                              *(int64x2_t *)((char *)&v2152[131] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1264], *(int64x2_t *)&v2151[1384]);
                              *(int64x2_t *)((char *)&v2152[132] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1504], *(int64x2_t *)&v2151[1624]);
                              *(int64x2_t *)((char *)&v2152[129] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[784], *(int64x2_t *)&v2151[904]);
                              *(int64x2_t *)((char *)&v2152[130] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1024], *(int64x2_t *)&v2151[1144]);
                              *(_QWORD *)&v2152[141] = *(_QWORD *)&v2151[1752];
                              *((_QWORD *)&v2152[133] + 1) = *(_QWORD *)&v2151[1744];
                              *(int64x2_t *)((char *)&v2152[127] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[304], *(int64x2_t *)&v2151[424]);
                              *(int64x2_t *)((char *)&v2152[128] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[544], *(int64x2_t *)&v2151[664]);
                              *(int64x2_t *)((char *)&v2152[126] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[64], *(int64x2_t *)&v2151[184]);
                              v2152[139] = v1893;
                              v2152[140] = v1891;
                              v2152[137] = v1900;
                              v2152[138] = v1896;
                              v2152[135] = v1906;
                              v2152[136] = v1903;
                              v2152[134] = vzip2q_s64(*(int64x2_t *)&v2151[64], *(int64x2_t *)&v2151[184]);
                              *(int64x2_t *)((char *)&v2152[146] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1280], *(int64x2_t *)&v2151[1400]);
                              *(int64x2_t *)((char *)&v2152[147] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1520], *(int64x2_t *)&v2151[1640]);
                              *(int64x2_t *)((char *)&v2152[144] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[800], *(int64x2_t *)&v2151[920]);
                              *(int64x2_t *)((char *)&v2152[145] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1040], *(int64x2_t *)&v2151[1160]);
                              *(_QWORD *)&v2152[156] = *(_QWORD *)&v2151[1768];
                              *((_QWORD *)&v2152[148] + 1) = *(_QWORD *)&v2151[1760];
                              *(int64x2_t *)((char *)&v2152[142] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[320], *(int64x2_t *)&v2151[440]);
                              *(int64x2_t *)((char *)&v2152[143] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[560], *(int64x2_t *)&v2151[680]);
                              *(int64x2_t *)((char *)&v2152[141] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[80], *(int64x2_t *)&v2151[200]);
                              v2152[154] = v1888;
                              v2152[155] = v1885;
                              v2152[152] = v1894;
                              v2152[153] = v1892;
                              v2152[150] = v1901;
                              v2152[151] = v1898;
                              v2152[149] = vzip2q_s64(*(int64x2_t *)&v2151[80], *(int64x2_t *)&v2151[200]);
                              *(int64x2_t *)((char *)&v2152[161] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1296], *(int64x2_t *)&v2151[1416]);
                              *(int64x2_t *)((char *)&v2152[162] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1536], *(int64x2_t *)&v2151[1656]);
                              *(int64x2_t *)((char *)&v2152[159] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[816], *(int64x2_t *)&v2151[936]);
                              *(int64x2_t *)((char *)&v2152[160] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1056], *(int64x2_t *)&v2151[1176]);
                              *(_QWORD *)&v2152[171] = *(_QWORD *)&v2151[1784];
                              *((_QWORD *)&v2152[163] + 1) = *(_QWORD *)&v2151[1776];
                              *(int64x2_t *)((char *)&v2152[157] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[336], *(int64x2_t *)&v2151[456]);
                              *(int64x2_t *)((char *)&v2152[158] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[576], *(int64x2_t *)&v2151[696]);
                              *(int64x2_t *)((char *)&v2152[156] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[96], *(int64x2_t *)&v2151[216]);
                              v2152[169] = v1882;
                              v2152[170] = v1881;
                              v2152[167] = v1887;
                              v2152[168] = v1884;
                              v2152[165] = v1895;
                              v2152[166] = v1889;
                              v2152[164] = vzip2q_s64(*(int64x2_t *)&v2151[96], *(int64x2_t *)&v2151[216]);
                              *(int64x2_t *)((char *)&v2152[176] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1312], *(int64x2_t *)&v2151[1432]);
                              *(int64x2_t *)((char *)&v2152[177] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1552], *(int64x2_t *)&v2151[1672]);
                              *(int64x2_t *)((char *)&v2152[174] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[832], *(int64x2_t *)&v2151[952]);
                              *(int64x2_t *)((char *)&v2152[175] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1072], *(int64x2_t *)&v2151[1192]);
                              *(_QWORD *)&v2152[186] = *(_QWORD *)&v2151[1800];
                              *((_QWORD *)&v2152[178] + 1) = *(_QWORD *)&v2151[1792];
                              *(int64x2_t *)((char *)&v2152[172] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[352], *(int64x2_t *)&v2151[472]);
                              *(int64x2_t *)((char *)&v2152[173] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[592], *(int64x2_t *)&v2151[712]);
                              *(int64x2_t *)((char *)&v2152[171] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[112], *(int64x2_t *)&v2151[232]);
                              v2152[184] = v1879;
                              v2152[185] = v1878;
                              v2152[182] = v1883;
                              v2152[183] = v1880;
                              v2152[180] = v1890;
                              v2152[181] = v1886;
                              v2152[179] = vzip2q_s64(*(int64x2_t *)&v2151[112], *(int64x2_t *)&v2151[232]);
                              *((_QWORD *)&v2152[193] + 1) = *(_QWORD *)&v2151[1808];
                              *(_OWORD *)((char *)&v2152[191] + 8) = v1872;
                              *(_OWORD *)((char *)&v2152[192] + 8) = v1871;
                              *(_OWORD *)((char *)&v2152[189] + 8) = v1874;
                              *(_OWORD *)((char *)&v2152[190] + 8) = v1873;
                              *(_QWORD *)&v2152[81] = v573;
                              *(_OWORD *)((char *)&v2152[187] + 8) = v1876;
                              *(_OWORD *)((char *)&v2152[188] + 8) = v1875;
                              *(_OWORD *)((char *)&v2152[186] + 8) = v1877;
                              v574 = *(_OWORD *)(v489 + 2696);
                              *(_QWORD *)&v2152[195] = *(_QWORD *)(v489 + 2712);
                              v2152[194] = v574;
                              *((_QWORD *)&v2152[195] + 1) = v535;
                              v2072 = v502;
                              if (v502)
                              {
                                v575 = (unint64_t *)&v502->__shared_owners_;
                                v576 = v2012;
                                do
                                  v577 = __ldxr(v575);
                                while (__stxr(v577 + 1, v575));
                                v2073 = v502;
                                do
                                  v578 = __ldxr(v575);
                                while (__stxr(v578 + 1, v575));
                              }
                              else
                              {
                                v2073 = 0;
                                v576 = v2012;
                              }
                              v648 = v2150[0];
                              v649 = *(void ***)(v2068 + 5680);
                              v650 = *(void ***)(v2068 + 5688);
                              if (v649 == v650)
                              {
                                v650 = *(void ***)(v2068 + 5680);
                              }
                              else if (*(v650 - 667) >= v2150[0])
                              {
                                v651 = 0x4515E08719B71393 * (v650 - v649);
                                do
                                {
                                  v652 = v651 >> 1;
                                  v653 = &v649[667 * (v651 >> 1)];
                                  v654 = *v653;
                                  v655 = v653 + 667;
                                  v651 += ~(v651 >> 1);
                                  if (v654 < v2150[0])
                                    v649 = v655;
                                  else
                                    v651 = v652;
                                }
                                while (v651);
                                if (v649 != v650)
                                {
                                  v650 = v649;
                                  if (*v649 == v2150[0])
                                  {
                                    v656 = 0;
                                    goto LABEL_848;
                                  }
                                }
                              }
                              if (v502)
                              {
                                v657 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v658 = __ldxr(v657);
                                while (__stxr(v658 + 1, v657));
                              }
                              *(_OWORD *)v2183 = *(_OWORD *)v2150;
                              v2183[24] = v2151[8];
                              *(_QWORD *)&v2183[16] = &off_24CA00398;
                              memcpy(&v2183[32], &v2151[16], 0x708uLL);
                              *(_OWORD *)&v2183[1832] = *(_OWORD *)&v2151[1816];
                              *(_QWORD *)&v2183[1848] = *(_QWORD *)&v2151[1832];
                              *(_OWORD *)&v2183[1856] = *(_OWORD *)&v2151[1840];
                              *(_QWORD *)&v2183[1872] = *(_QWORD *)&v2151[1856];
                              *(_OWORD *)&v2183[1880] = v2152[0];
                              *(_OWORD *)&v2183[1896] = v2152[1];
                              *(_QWORD *)&v2183[1976] = *(_QWORD *)&v2152[6];
                              *(_OWORD *)&v2183[1944] = v2152[4];
                              *(_OWORD *)&v2183[1960] = v2152[5];
                              *(_OWORD *)&v2183[1912] = v2152[2];
                              *(_OWORD *)&v2183[1928] = v2152[3];
                              *(_QWORD *)&v2183[2048] = *((_QWORD *)&v2152[10] + 1);
                              *(_OWORD *)&v2183[2016] = *(_OWORD *)((char *)&v2152[8] + 8);
                              *(_OWORD *)&v2183[2032] = *(_OWORD *)((char *)&v2152[9] + 8);
                              *(_OWORD *)&v2183[1984] = *(_OWORD *)((char *)&v2152[6] + 8);
                              *(_OWORD *)&v2183[2000] = *(_OWORD *)((char *)&v2152[7] + 8);
                              *(_QWORD *)&v2183[2120] = *(_QWORD *)&v2152[15];
                              *(_OWORD *)&v2183[2088] = v2152[13];
                              *(_OWORD *)&v2183[2104] = v2152[14];
                              *(_OWORD *)&v2183[2056] = v2152[11];
                              *(_OWORD *)&v2183[2072] = v2152[12];
                              *(_QWORD *)&v2183[2192] = *((_QWORD *)&v2152[19] + 1);
                              *(_OWORD *)&v2183[2160] = *(_OWORD *)((char *)&v2152[17] + 8);
                              *(_OWORD *)&v2183[2176] = *(_OWORD *)((char *)&v2152[18] + 8);
                              *(_OWORD *)&v2183[2128] = *(_OWORD *)((char *)&v2152[15] + 8);
                              *(_OWORD *)&v2183[2144] = *(_OWORD *)((char *)&v2152[16] + 8);
                              *(_QWORD *)&v2183[2264] = *(_QWORD *)&v2152[24];
                              *(_OWORD *)&v2183[2232] = v2152[22];
                              *(_OWORD *)&v2183[2248] = v2152[23];
                              *(_OWORD *)&v2183[2200] = v2152[20];
                              *(_OWORD *)&v2183[2216] = v2152[21];
                              *(_QWORD *)&v2183[2336] = *((_QWORD *)&v2152[28] + 1);
                              *(_OWORD *)&v2183[2304] = *(_OWORD *)((char *)&v2152[26] + 8);
                              *(_OWORD *)&v2183[2320] = *(_OWORD *)((char *)&v2152[27] + 8);
                              *(_OWORD *)&v2183[2272] = *(_OWORD *)((char *)&v2152[24] + 8);
                              *(_OWORD *)&v2183[2288] = *(_OWORD *)((char *)&v2152[25] + 8);
                              *(_QWORD *)&v2183[2408] = *(_QWORD *)&v2152[33];
                              *(_OWORD *)&v2183[2376] = v2152[31];
                              *(_OWORD *)&v2183[2392] = v2152[32];
                              *(_OWORD *)&v2183[2344] = v2152[29];
                              *(_OWORD *)&v2183[2360] = v2152[30];
                              *(_QWORD *)&v2183[2480] = *((_QWORD *)&v2152[37] + 1);
                              *(_OWORD *)&v2183[2448] = *(_OWORD *)((char *)&v2152[35] + 8);
                              *(_OWORD *)&v2183[2464] = *(_OWORD *)((char *)&v2152[36] + 8);
                              *(_OWORD *)&v2183[2416] = *(_OWORD *)((char *)&v2152[33] + 8);
                              *(_OWORD *)&v2183[2432] = *(_OWORD *)((char *)&v2152[34] + 8);
                              memcpy(&v2183[2488], &v2152[38], 0x288uLL);
                              *(_OWORD *)&v2183[3136] = *(_OWORD *)((char *)&v2152[78] + 8);
                              *(_QWORD *)&v2183[3152] = *((_QWORD *)&v2152[79] + 1);
                              *(_OWORD *)&v2183[3160] = v2152[80];
                              *(_QWORD *)&v2183[3176] = *(_QWORD *)&v2152[81];
                              memcpy(&v2183[3184], (char *)&v2152[81] + 8, 0x708uLL);
                              *(_OWORD *)&v2183[4984] = v2152[194];
                              *(_OWORD *)&v2183[5000] = v2152[195];
                              memset(&v2183[5016], 0, 32);
                              *(_QWORD *)&v2183[5304] = v2070;
                              *(_QWORD *)&v2183[5312] = v502;
                              if (v502)
                              {
                                v659 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v660 = __ldxr(v659);
                                while (__stxr(v660 + 1, v659));
                                *(_QWORD *)&v2183[5288] = 0xBFF0000000000000;
                                v2183[5296] = 0;
                                v2183[5320] = 0;
                                do
                                  v661 = __ldaxr(v659);
                                while (__stlxr(v661 - 1, v659));
                                if (!v661)
                                {
                                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                                  std::__shared_weak_count::__release_weak(v502);
                                }
                              }
                              else
                              {
                                *(_QWORD *)&v2183[5288] = 0xBFF0000000000000;
                                v2183[5296] = 0;
                                v2183[5320] = 0;
                              }
                              v662 = *(char **)(v2068 + 4840);
                              v663 = *(char **)(v2068 + 4848);
                              v664 = v662;
                              if (v663 != v662)
                              {
                                v665 = (v663 - v662) >> 4;
                                v664 = *(char **)(v2068 + 4840);
                                do
                                {
                                  v666 = v665 >> 1;
                                  v667 = (unsigned int *)&v664[16 * (v665 >> 1)];
                                  v669 = *v667;
                                  v668 = (char *)(v667 + 4);
                                  v665 += ~(v665 >> 1);
                                  if (v669 < v505)
                                    v664 = v668;
                                  else
                                    v665 = v666;
                                }
                                while (v665);
                              }
                              if (v664 == v663 || *(_DWORD *)v664 != v505)
                                goto LABEL_834;
                              v670 = *((_QWORD *)v664 + 1);
                              *(_QWORD *)&v2183[5016] = v670;
                              ++*(_DWORD *)(*((_QWORD *)v664 + 1) + 8);
                              v671 = *(char **)(v2068 + 4936);
                              v672 = *(char **)(v2068 + 4944);
                              v673 = v671;
                              if (v672 != v671)
                              {
                                v674 = (v672 - v671) >> 4;
                                v673 = *(char **)(v2068 + 4936);
                                do
                                {
                                  v675 = v674 >> 1;
                                  v676 = (unsigned int *)&v673[16 * (v674 >> 1)];
                                  v678 = *v676;
                                  v677 = (char *)(v676 + 4);
                                  v674 += ~(v674 >> 1);
                                  if (v678 < v505)
                                    v673 = v677;
                                  else
                                    v674 = v675;
                                }
                                while (v674);
                              }
                              if (v673 == v672 || *(_DWORD *)v673 != v505)
                                goto LABEL_834;
                              v679 = *((_QWORD *)v673 + 1);
                              *(_QWORD *)&v2183[5024] = v679;
                              ++*(_DWORD *)(*((_QWORD *)v673 + 1) + 8);
                              if (v663 != v662)
                              {
                                v680 = (v663 - v662) >> 4;
                                do
                                {
                                  v681 = v680 >> 1;
                                  v682 = (unsigned int *)&v662[16 * (v680 >> 1)];
                                  v684 = *v682;
                                  v683 = (char *)(v682 + 4);
                                  v680 += ~(v680 >> 1);
                                  if (v684 < v576)
                                    v662 = v683;
                                  else
                                    v680 = v681;
                                }
                                while (v680);
                              }
                              if (v662 == v663 || *(_DWORD *)v662 != v576)
                                goto LABEL_834;
                              v685 = *((_QWORD *)v662 + 1);
                              *(_QWORD *)&v2183[5032] = v685;
                              ++*(_DWORD *)(*((_QWORD *)v662 + 1) + 8);
                              if (v672 != v671)
                              {
                                v686 = (v672 - v671) >> 4;
                                do
                                {
                                  v687 = v686 >> 1;
                                  v688 = (unsigned int *)&v671[16 * (v686 >> 1)];
                                  v690 = *v688;
                                  v689 = (char *)(v688 + 4);
                                  v686 += ~(v686 >> 1);
                                  if (v690 < v576)
                                    v671 = v689;
                                  else
                                    v686 = v687;
                                }
                                while (v686);
                              }
                              if (v671 == v672 || *(_DWORD *)v671 != v576)
                              {
LABEL_834:
                                if (*(_QWORD *)&v2183[5016])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5016] + 8);
                                if (*(_QWORD *)&v2183[5024])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5024] + 8);
                                if (*(_QWORD *)&v2183[5032])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5032] + 8);
                                v656 = 0;
                                if (*(_QWORD *)&v2183[5040])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5040] + 8);
                              }
                              else
                              {
                                v691 = *((_QWORD *)v671 + 1);
                                *(_QWORD *)&v2183[5040] = v691;
                                ++*(_DWORD *)(*((_QWORD *)v671 + 1) + 8);
                                if (*(_BYTE *)(v670 + 20)
                                  || *(_BYTE *)(v679 + 20)
                                  || *(_BYTE *)(v685 + 20)
                                  || *(_BYTE *)(v691 + 20))
                                {
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2183;
                                  v1984 = v2183[24];
                                  object[32] = v2183[24];
                                  *(_QWORD *)object = v648;
                                  *(_QWORD *)&object[24] = &off_24CA00398;
                                  memcpy(&object[40], &v2183[32], 0x708uLL);
                                  *(_OWORD *)&object[1840] = *(_OWORD *)&v2183[1832];
                                  *(_QWORD *)&object[1856] = *(_QWORD *)&v2183[1848];
                                  *(_OWORD *)&object[1864] = *(_OWORD *)&v2183[1856];
                                  *(_QWORD *)&object[1880] = *(_QWORD *)&v2183[1872];
                                  v2223[0] = *(_OWORD *)&v2183[1880];
                                  v2223[1] = *(_OWORD *)&v2183[1896];
                                  *(_QWORD *)&v2223[6] = *(_QWORD *)&v2183[1976];
                                  v2223[4] = *(_OWORD *)&v2183[1944];
                                  v2223[5] = *(_OWORD *)&v2183[1960];
                                  v2223[2] = *(_OWORD *)&v2183[1912];
                                  v2223[3] = *(_OWORD *)&v2183[1928];
                                  *((_QWORD *)&v2223[10] + 1) = *(_QWORD *)&v2183[2048];
                                  *(_OWORD *)((char *)&v2223[8] + 8) = *(_OWORD *)&v2183[2016];
                                  *(_OWORD *)((char *)&v2223[9] + 8) = *(_OWORD *)&v2183[2032];
                                  *(_OWORD *)((char *)&v2223[6] + 8) = *(_OWORD *)&v2183[1984];
                                  *(_OWORD *)((char *)&v2223[7] + 8) = *(_OWORD *)&v2183[2000];
                                  *(_QWORD *)&v2223[15] = *(_QWORD *)&v2183[2120];
                                  v2223[13] = *(_OWORD *)&v2183[2088];
                                  v2223[14] = *(_OWORD *)&v2183[2104];
                                  v2223[11] = *(_OWORD *)&v2183[2056];
                                  v2223[12] = *(_OWORD *)&v2183[2072];
                                  *((_QWORD *)&v2223[19] + 1) = *(_QWORD *)&v2183[2192];
                                  *(_OWORD *)((char *)&v2223[17] + 8) = *(_OWORD *)&v2183[2160];
                                  *(_OWORD *)((char *)&v2223[18] + 8) = *(_OWORD *)&v2183[2176];
                                  *(_OWORD *)((char *)&v2223[15] + 8) = *(_OWORD *)&v2183[2128];
                                  *(_OWORD *)((char *)&v2223[16] + 8) = *(_OWORD *)&v2183[2144];
                                  *(_QWORD *)&v2223[24] = *(_QWORD *)&v2183[2264];
                                  v2223[22] = *(_OWORD *)&v2183[2232];
                                  v2223[23] = *(_OWORD *)&v2183[2248];
                                  v2223[20] = *(_OWORD *)&v2183[2200];
                                  v2223[21] = *(_OWORD *)&v2183[2216];
                                  *((_QWORD *)&v2223[28] + 1) = *(_QWORD *)&v2183[2336];
                                  *(_OWORD *)((char *)&v2223[26] + 8) = *(_OWORD *)&v2183[2304];
                                  *(_OWORD *)((char *)&v2223[27] + 8) = *(_OWORD *)&v2183[2320];
                                  *(_OWORD *)((char *)&v2223[24] + 8) = *(_OWORD *)&v2183[2272];
                                  *(_OWORD *)((char *)&v2223[25] + 8) = *(_OWORD *)&v2183[2288];
                                  *(_QWORD *)&v2223[33] = *(_QWORD *)&v2183[2408];
                                  v2223[31] = *(_OWORD *)&v2183[2376];
                                  v2223[32] = *(_OWORD *)&v2183[2392];
                                  v2223[29] = *(_OWORD *)&v2183[2344];
                                  v2223[30] = *(_OWORD *)&v2183[2360];
                                  *((_QWORD *)&v2223[37] + 1) = *(_QWORD *)&v2183[2480];
                                  *(_OWORD *)((char *)&v2223[35] + 8) = *(_OWORD *)&v2183[2448];
                                  *(_OWORD *)((char *)&v2223[36] + 8) = *(_OWORD *)&v2183[2464];
                                  *(_OWORD *)((char *)&v2223[33] + 8) = *(_OWORD *)&v2183[2416];
                                  *(_OWORD *)((char *)&v2223[34] + 8) = *(_OWORD *)&v2183[2432];
                                  memcpy(&v2223[38], &v2183[2488], 0x288uLL);
                                  *(_OWORD *)((char *)&v2223[78] + 8) = *(_OWORD *)&v2183[3136];
                                  *((_QWORD *)&v2223[79] + 1) = *(_QWORD *)&v2183[3152];
                                  v2223[80] = *(_OWORD *)&v2183[3160];
                                  *(_QWORD *)&v2223[81] = *(_QWORD *)&v2183[3176];
                                  memcpy((char *)&v2223[81] + 8, &v2183[3184], 0x708uLL);
                                  v2223[194] = *(_OWORD *)&v2183[4984];
                                  v2223[195] = *(_OWORD *)&v2183[5000];
                                  v692 = *(void **)&v2183[5008];
                                  v2223[196] = *(_OWORD *)&v2183[5016];
                                  v2223[197] = *(_OWORD *)&v2183[5032];
                                  *(_QWORD *)&v2223[205] = *(_QWORD *)&v2183[5160];
                                  v5.i64[1] = *(_QWORD *)&v2183[5120];
                                  v2223[203] = *(_OWORD *)&v2183[5128];
                                  v2223[204] = *(_OWORD *)&v2183[5144];
                                  v2223[201] = *(_OWORD *)&v2183[5096];
                                  v2223[202] = *(_OWORD *)&v2183[5112];
                                  v2223[199] = *(_OWORD *)&v2183[5064];
                                  v2223[200] = *(_OWORD *)&v2183[5080];
                                  v2223[198] = *(_OWORD *)&v2183[5048];
                                  *(_OWORD *)((char *)&v2223[207] + 8) = *(_OWORD *)&v2183[5200];
                                  *(_OWORD *)((char *)&v2223[208] + 8) = *(_OWORD *)&v2183[5216];
                                  *(_OWORD *)((char *)&v2223[205] + 8) = *(_OWORD *)&v2183[5168];
                                  *(_OWORD *)((char *)&v2223[206] + 8) = *(_OWORD *)&v2183[5184];
                                  *((_QWORD *)&v2223[212] + 1) = *(_QWORD *)&v2183[5280];
                                  *(_OWORD *)((char *)&v2223[210] + 8) = *(_OWORD *)&v2183[5248];
                                  *(_OWORD *)((char *)&v2223[211] + 8) = *(_OWORD *)&v2183[5264];
                                  *(_OWORD *)((char *)&v2223[209] + 8) = *(_OWORD *)&v2183[5232];
                                  BYTE8(v2223[213]) = v2183[5296];
                                  *(_QWORD *)&v2223[213] = *(_QWORD *)&v2183[5288];
                                  v1970 = *(void **)&v2183[5304];
                                  v2223[214] = *(_OWORD *)&v2183[5304];
                                  categorya = *(std::__shared_weak_count **)&v2183[5312];
                                  *(_OWORD *)&v2183[5304] = 0uLL;
                                  v1986.i32[0] = v2183[5320];
                                  LOBYTE(v2223[215]) = v2183[5320];
                                  v693 = *(void ***)(v2068 + 5688);
                                  if (v693 == v650 || *v650 != v648)
                                  {
                                    v694 = *(char **)(v2068 + 5680);
                                    v695 = (char *)v650 - v694;
                                    v1980 = (void **)v694;
                                    v1974 = ((char *)v650 - v694) / 5336;
                                    v696 = (void **)&v694[5336 * v1974];
                                    v697 = *(_QWORD *)(v2068 + 5696);
                                    if ((unint64_t)v693 >= v697)
                                    {
                                      v952 = 0x4515E08719B71393 * (((char *)v693 - v694) >> 3) + 1;
                                      if (v952 > 0xC4827EA81BA25)
                                        sub_20E867F44();
                                      v953 = 0x4515E08719B71393 * ((uint64_t)(v697 - (_QWORD)v694) >> 3);
                                      if (2 * v953 > v952)
                                        v952 = 2 * v953;
                                      if (v953 >= 0x62413F540DD12)
                                        v954 = 0xC4827EA81BA25;
                                      else
                                        v954 = v952;
                                      *(_QWORD *)&v2149[2] = v2068 + 5696;
                                      if (v954)
                                      {
                                        if (v954 > 0xC4827EA81BA25)
                                          sub_20E877A38();
                                        v955 = (char *)operator new(5336 * v954);
                                      }
                                      else
                                      {
                                        v955 = 0;
                                      }
                                      v1137 = &v955[5336 * v1974];
                                      *(_QWORD *)&v2149[0] = v955;
                                      *((_QWORD *)&v2149[0] + 1) = v1137;
                                      *(_QWORD *)&v2149[1] = v1137;
                                      *((_QWORD *)&v2149[1] + 1) = &v955[5336 * v954];
                                      if (v1974 == v954)
                                      {
                                        if (v695 < 1)
                                        {
                                          if (v1980 == v650)
                                            v1139 = 1;
                                          else
                                            v1139 = 2 * v1974;
                                          if (v1139 > 0xC4827EA81BA25)
                                            sub_20E877A38();
                                          v1140 = (char *)operator new(5336 * v1139);
                                          v1137 = &v1140[5336 * (v1139 >> 2)];
                                          *(_QWORD *)&v2149[0] = v1140;
                                          *((_QWORD *)&v2149[0] + 1) = v1137;
                                          *((_QWORD *)&v2149[1] + 1) = &v1140[5336 * v1139];
                                          if (v955)
                                            operator delete(v955);
                                        }
                                        else
                                        {
                                          v1138 = v1974 + 2;
                                          if (v1974 >= -1)
                                            v1138 = v1974 + 1;
                                          v1137 -= 5336 * (v1138 >> 1);
                                          *((_QWORD *)&v2149[0] + 1) = v1137;
                                        }
                                      }
                                      *(_QWORD *)v1137 = v648;
                                      *(_OWORD *)(v1137 + 8) = *(_OWORD *)v2183;
                                      v1137[32] = object[32];
                                      *((_QWORD *)v1137 + 3) = &off_24CA00398;
                                      memcpy(v1137 + 40, &object[40], 0x708uLL);
                                      *((_QWORD *)v1137 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1137 + 115) = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1137 + 235) = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1137 + 1864) = *(_OWORD *)&object[1864];
                                      v1141 = v2223[1];
                                      *((_OWORD *)v1137 + 118) = v2223[0];
                                      *((_OWORD *)v1137 + 119) = v1141;
                                      v1142 = v2223[3];
                                      *((_OWORD *)v1137 + 120) = v2223[2];
                                      v1143 = v2223[4];
                                      v1144 = v2223[5];
                                      *((_QWORD *)v1137 + 248) = *(_QWORD *)&v2223[6];
                                      *((_OWORD *)v1137 + 123) = v1144;
                                      *((_OWORD *)v1137 + 122) = v1143;
                                      *((_OWORD *)v1137 + 121) = v1142;
                                      v1145 = *(_OWORD *)((char *)&v2223[7] + 8);
                                      *(_OWORD *)(v1137 + 1992) = *(_OWORD *)((char *)&v2223[6] + 8);
                                      v1146 = *(_OWORD *)((char *)&v2223[8] + 8);
                                      v1147 = *(_OWORD *)((char *)&v2223[9] + 8);
                                      *((_QWORD *)v1137 + 257) = *((_QWORD *)&v2223[10] + 1);
                                      *(_OWORD *)(v1137 + 2040) = v1147;
                                      *(_OWORD *)(v1137 + 2024) = v1146;
                                      *(_OWORD *)(v1137 + 2008) = v1145;
                                      v1148 = v2223[12];
                                      *((_OWORD *)v1137 + 129) = v2223[11];
                                      v1149 = v2223[13];
                                      v1150 = v2223[14];
                                      *((_QWORD *)v1137 + 266) = *(_QWORD *)&v2223[15];
                                      *((_OWORD *)v1137 + 132) = v1150;
                                      *((_OWORD *)v1137 + 131) = v1149;
                                      *((_OWORD *)v1137 + 130) = v1148;
                                      v1151 = *(_OWORD *)((char *)&v2223[16] + 8);
                                      *(_OWORD *)(v1137 + 2136) = *(_OWORD *)((char *)&v2223[15] + 8);
                                      v1152 = *(_OWORD *)((char *)&v2223[17] + 8);
                                      v1153 = *(_OWORD *)((char *)&v2223[18] + 8);
                                      *((_QWORD *)v1137 + 275) = *((_QWORD *)&v2223[19] + 1);
                                      *(_OWORD *)(v1137 + 2184) = v1153;
                                      *(_OWORD *)(v1137 + 2168) = v1152;
                                      *(_OWORD *)(v1137 + 2152) = v1151;
                                      v1154 = v2223[21];
                                      *((_OWORD *)v1137 + 138) = v2223[20];
                                      v1155 = v2223[22];
                                      v1156 = v2223[23];
                                      *((_QWORD *)v1137 + 284) = *(_QWORD *)&v2223[24];
                                      *((_OWORD *)v1137 + 141) = v1156;
                                      *((_OWORD *)v1137 + 140) = v1155;
                                      *((_OWORD *)v1137 + 139) = v1154;
                                      v1157 = *(_OWORD *)((char *)&v2223[25] + 8);
                                      *(_OWORD *)(v1137 + 2280) = *(_OWORD *)((char *)&v2223[24] + 8);
                                      v1158 = *(_OWORD *)((char *)&v2223[26] + 8);
                                      v1159 = *(_OWORD *)((char *)&v2223[27] + 8);
                                      *((_QWORD *)v1137 + 293) = *((_QWORD *)&v2223[28] + 1);
                                      *(_OWORD *)(v1137 + 2328) = v1159;
                                      *(_OWORD *)(v1137 + 2312) = v1158;
                                      *(_OWORD *)(v1137 + 2296) = v1157;
                                      v1160 = v2223[30];
                                      *((_OWORD *)v1137 + 147) = v2223[29];
                                      v1161 = v2223[31];
                                      v1162 = v2223[32];
                                      *((_QWORD *)v1137 + 302) = *(_QWORD *)&v2223[33];
                                      *((_OWORD *)v1137 + 150) = v1162;
                                      *((_OWORD *)v1137 + 149) = v1161;
                                      *((_OWORD *)v1137 + 148) = v1160;
                                      v1163 = *(_OWORD *)((char *)&v2223[34] + 8);
                                      *(_OWORD *)(v1137 + 2424) = *(_OWORD *)((char *)&v2223[33] + 8);
                                      v1164 = *(_OWORD *)((char *)&v2223[35] + 8);
                                      v1165 = *(_OWORD *)((char *)&v2223[36] + 8);
                                      *((_QWORD *)v1137 + 311) = *((_QWORD *)&v2223[37] + 1);
                                      *(_OWORD *)(v1137 + 2472) = v1165;
                                      *(_OWORD *)(v1137 + 2456) = v1164;
                                      *(_OWORD *)(v1137 + 2440) = v1163;
                                      memcpy(v1137 + 2496, &v2223[38], 0x288uLL);
                                      *(_OWORD *)(v1137 + 3144) = *(_OWORD *)((char *)&v2223[78] + 8);
                                      *((_QWORD *)v1137 + 395) = *((_QWORD *)&v2223[79] + 1);
                                      *((_OWORD *)v1137 + 198) = v2223[80];
                                      *((_QWORD *)v1137 + 398) = *(_QWORD *)&v2223[81];
                                      memcpy(v1137 + 3192, (char *)&v2223[81] + 8, 0x708uLL);
                                      *((_QWORD *)v1137 + 626) = *(_QWORD *)&v2223[195];
                                      *((_OWORD *)v1137 + 312) = v2223[194];
                                      *((_QWORD *)v1137 + 627) = *((_QWORD *)&v2223[195] + 1);
                                      v1166 = v2223[197];
                                      *((_OWORD *)v1137 + 314) = v2223[196];
                                      *((_OWORD *)v1137 + 315) = v1166;
                                      v1167 = v2223[198];
                                      v1168 = v2223[199];
                                      v1169 = v2223[200];
                                      *((_OWORD *)v1137 + 319) = v2223[201];
                                      *((_OWORD *)v1137 + 318) = v1169;
                                      *((_OWORD *)v1137 + 317) = v1168;
                                      *((_OWORD *)v1137 + 316) = v1167;
                                      v1170 = v2223[202];
                                      v1171 = v2223[203];
                                      v1172 = v2223[204];
                                      *((_QWORD *)v1137 + 646) = *(_QWORD *)&v2223[205];
                                      *((_OWORD *)v1137 + 322) = v1172;
                                      *((_OWORD *)v1137 + 321) = v1171;
                                      *((_OWORD *)v1137 + 320) = v1170;
                                      v1173 = *(_OWORD *)((char *)&v2223[205] + 8);
                                      v1174 = *(_OWORD *)((char *)&v2223[206] + 8);
                                      v1175 = *(_OWORD *)((char *)&v2223[207] + 8);
                                      *(_OWORD *)(v1137 + 5224) = *(_OWORD *)((char *)&v2223[208] + 8);
                                      *(_OWORD *)(v1137 + 5208) = v1175;
                                      *(_OWORD *)(v1137 + 5192) = v1174;
                                      *(_OWORD *)(v1137 + 5176) = v1173;
                                      v1176 = *(_OWORD *)((char *)&v2223[209] + 8);
                                      v1177 = *(_OWORD *)((char *)&v2223[210] + 8);
                                      v1178 = *(_OWORD *)((char *)&v2223[211] + 8);
                                      *((_QWORD *)v1137 + 661) = *((_QWORD *)&v2223[212] + 1);
                                      *(_OWORD *)(v1137 + 5272) = v1178;
                                      *(_OWORD *)(v1137 + 5256) = v1177;
                                      *(_OWORD *)(v1137 + 5240) = v1176;
                                      v1179 = *(_QWORD *)&v2223[213];
                                      v1137[5304] = BYTE8(v2223[213]);
                                      *((_QWORD *)v1137 + 662) = v1179;
                                      *((_OWORD *)v1137 + 332) = v2223[214];
                                      v2223[214] = 0uLL;
                                      v1137[5328] = v2223[215];
                                      v1971 = v1137 + 5336;
                                      *(_QWORD *)&v2149[1] = v1137 + 5336;
                                      v1180 = *(void ***)(v2068 + 5680);
                                      if (v1180 != v696)
                                      {
                                        v1181 = 0;
                                        v1182 = &v1980[667 * v1974];
                                        categoryd = v1182 - 667;
                                        v1990.i64[0] = (uint64_t)(v1182 - 1334);
                                        v1988.i64[0] = (uint64_t)(v1182 - 663);
                                        v1986.i64[0] = (uint64_t)(v1137 - 5336);
                                        do
                                        {
                                          _X26 = v1990.i64[0] + v1181;
                                          __asm { PRFM            #0, [X26] }
                                          *(_QWORD *)(v1986.i64[0] + v1181) = categoryd[v1181 / 8];
                                          v1185 = &v1137[v1181 - 5296];
                                          *((_OWORD *)v1185 - 2) = *(_OWORD *)(v1990.i64[0] + v1181 + 5344);
                                          v1137[v1181 - 5304] = *(_BYTE *)(v1988.i64[0] + v1181);
                                          *((_QWORD *)v1185 - 2) = &off_24CA00398;
                                          memcpy(v1185, (const void *)(v1990.i64[0] + v1181 + 5376), 0x708uLL);
                                          v1186 = &v1137[v1181];
                                          v1187 = (uint64_t)&v1137[v1181 - 3496];
                                          v1188 = *(_OWORD *)(v1990.i64[0] + v1181 + 7176);
                                          *(_QWORD *)(v1187 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 7192);
                                          *(_OWORD *)v1187 = v1188;
                                          v1189 = (uint64_t)&v1137[v1181 - 3472];
                                          v1190 = *(_QWORD *)(v1990.i64[0] + v1181 + 7216);
                                          *(_OWORD *)v1189 = *(_OWORD *)(v1990.i64[0] + v1181 + 7200);
                                          *(_QWORD *)(v1189 + 16) = v1190;
                                          v1191 = &v1137[v1181 - 3448];
                                          v1192 = *(_OWORD *)(v1990.i64[0] + v1181 + 7240);
                                          *(_OWORD *)v1191 = *(_OWORD *)(v1990.i64[0] + v1181 + 7224);
                                          *((_OWORD *)v1191 + 1) = v1192;
                                          v1193 = (uint64_t)&v1137[v1181 - 3416];
                                          *(_OWORD *)v1193 = *(_OWORD *)(v1990.i64[0] + v1181 + 7256);
                                          v1195 = *(_OWORD *)(v1990.i64[0] + v1181 + 7288);
                                          v1194 = *(_OWORD *)(v1990.i64[0] + v1181 + 7304);
                                          v1196 = *(_OWORD *)(v1990.i64[0] + v1181 + 7272);
                                          *(_QWORD *)(v1193 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7320);
                                          *(_OWORD *)(v1193 + 32) = v1195;
                                          *(_OWORD *)(v1193 + 48) = v1194;
                                          *(_OWORD *)(v1193 + 16) = v1196;
                                          v1197 = (uint64_t)&v1137[v1181 - 3344];
                                          v1198 = *(_OWORD *)(v1990.i64[0] + v1181 + 7360);
                                          v1199 = *(_OWORD *)(v1990.i64[0] + v1181 + 7376);
                                          v1200 = *(_OWORD *)(v1990.i64[0] + v1181 + 7344);
                                          *(_QWORD *)(v1197 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7392);
                                          *(_OWORD *)(v1197 + 32) = v1198;
                                          *(_OWORD *)(v1197 + 48) = v1199;
                                          *(_OWORD *)(v1197 + 16) = v1200;
                                          *(_OWORD *)v1197 = *(_OWORD *)(v1990.i64[0] + v1181 + 7328);
                                          v1201 = (uint64_t)&v1137[v1181 - 3272];
                                          v1202 = *(_OWORD *)(v1990.i64[0] + v1181 + 7416);
                                          v1203 = *(_OWORD *)(v1990.i64[0] + v1181 + 7432);
                                          v1204 = *(_OWORD *)(v1990.i64[0] + v1181 + 7448);
                                          *(_QWORD *)(v1201 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7464);
                                          *(_OWORD *)(v1201 + 32) = v1203;
                                          *(_OWORD *)(v1201 + 48) = v1204;
                                          *(_OWORD *)(v1201 + 16) = v1202;
                                          *(_OWORD *)v1201 = *(_OWORD *)(v1990.i64[0] + v1181 + 7400);
                                          v1205 = (uint64_t)&v1137[v1181 - 3200];
                                          v1206 = *(_OWORD *)(v1990.i64[0] + v1181 + 7488);
                                          v1207 = *(_OWORD *)(v1990.i64[0] + v1181 + 7504);
                                          v1208 = *(_OWORD *)(v1990.i64[0] + v1181 + 7520);
                                          *(_QWORD *)(v1205 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7536);
                                          *(_OWORD *)(v1205 + 32) = v1207;
                                          *(_OWORD *)(v1205 + 48) = v1208;
                                          *(_OWORD *)(v1205 + 16) = v1206;
                                          *(_OWORD *)v1205 = *(_OWORD *)(v1990.i64[0] + v1181 + 7472);
                                          v1209 = (uint64_t)&v1137[v1181 - 3128];
                                          v1210 = *(_OWORD *)(v1990.i64[0] + v1181 + 7560);
                                          v1211 = *(_OWORD *)(v1990.i64[0] + v1181 + 7576);
                                          v1212 = *(_OWORD *)(v1990.i64[0] + v1181 + 7592);
                                          *(_QWORD *)(v1209 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7608);
                                          *(_OWORD *)(v1209 + 32) = v1211;
                                          *(_OWORD *)(v1209 + 48) = v1212;
                                          *(_OWORD *)(v1209 + 16) = v1210;
                                          *(_OWORD *)v1209 = *(_OWORD *)(v1990.i64[0] + v1181 + 7544);
                                          v1213 = (uint64_t)&v1137[v1181 - 3056];
                                          v1214 = *(_OWORD *)(v1990.i64[0] + v1181 + 7632);
                                          v1215 = *(_OWORD *)(v1990.i64[0] + v1181 + 7648);
                                          v1216 = *(_OWORD *)(v1990.i64[0] + v1181 + 7664);
                                          *(_QWORD *)(v1213 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7680);
                                          *(_OWORD *)(v1213 + 32) = v1215;
                                          *(_OWORD *)(v1213 + 48) = v1216;
                                          *(_OWORD *)(v1213 + 16) = v1214;
                                          *(_OWORD *)v1213 = *(_OWORD *)(v1990.i64[0] + v1181 + 7616);
                                          v1217 = (uint64_t)&v1137[v1181 - 2984];
                                          v1218 = *(_OWORD *)(v1990.i64[0] + v1181 + 7704);
                                          v1219 = *(_OWORD *)(v1990.i64[0] + v1181 + 7720);
                                          v1220 = *(_OWORD *)(v1990.i64[0] + v1181 + 7736);
                                          *(_QWORD *)(v1217 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7752);
                                          *(_OWORD *)(v1217 + 32) = v1219;
                                          *(_OWORD *)(v1217 + 48) = v1220;
                                          *(_OWORD *)(v1217 + 16) = v1218;
                                          *(_OWORD *)v1217 = *(_OWORD *)(v1990.i64[0] + v1181 + 7688);
                                          v1221 = (uint64_t)&v1137[v1181 - 2912];
                                          v1222 = *(_OWORD *)(v1990.i64[0] + v1181 + 7776);
                                          v1223 = *(_OWORD *)(v1990.i64[0] + v1181 + 7792);
                                          v1224 = *(_OWORD *)(v1990.i64[0] + v1181 + 7808);
                                          *(_QWORD *)(v1221 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7824);
                                          *(_OWORD *)(v1221 + 32) = v1223;
                                          *(_OWORD *)(v1221 + 48) = v1224;
                                          *(_OWORD *)(v1221 + 16) = v1222;
                                          *(_OWORD *)v1221 = *(_OWORD *)(v1990.i64[0] + v1181 + 7760);
                                          memcpy(&v1137[v1181 - 2840], (const void *)(v1990.i64[0] + v1181 + 7832), 0x288uLL);
                                          v1225 = (uint64_t)&v1137[v1181 - 2192];
                                          v1226 = *(_OWORD *)(v1990.i64[0] + v1181 + 8480);
                                          *(_QWORD *)(v1225 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 8496);
                                          *(_OWORD *)v1225 = v1226;
                                          v1227 = (uint64_t)&v1137[v1181 - 2168];
                                          v1228 = *(_QWORD *)(v1990.i64[0] + v1181 + 8520);
                                          *(_OWORD *)v1227 = *(_OWORD *)(v1990.i64[0] + v1181 + 8504);
                                          *(_QWORD *)(v1227 + 16) = v1228;
                                          memcpy(&v1137[v1181 - 2144], (const void *)(v1990.i64[0] + v1181 + 8528), 0x708uLL);
                                          v1229 = (uint64_t)&v1137[v1181 - 344];
                                          v1230 = *(_OWORD *)(v1990.i64[0] + v1181 + 10328);
                                          *(_QWORD *)(v1229 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 10344);
                                          *(_OWORD *)v1229 = v1230;
                                          v1231 = &v696[v1181 / 8];
                                          __asm { PRFM            #0, [X26,#0x1398] }
                                          v1233 = &v1137[v1181 - 312];
                                          *((_QWORD *)v1186 - 40) = v696[v1181 / 8 - 40];
                                          v1234 = *(_OWORD *)(v1990.i64[0] + v1181 + 10376);
                                          v1235 = &v1137[v1181 - 280];
                                          *(_OWORD *)v1233 = *(_OWORD *)(v1990.i64[0] + v1181 + 10360);
                                          *((_OWORD *)v1233 + 1) = v1234;
                                          v1237 = *(_OWORD *)(v1990.i64[0] + v1181 + 10472);
                                          v1236 = *(_OWORD *)(v1990.i64[0] + v1181 + 10488);
                                          v1238 = *(_QWORD *)(v1990.i64[0] + v1181 + 10504);
                                          *(_OWORD *)(v1186 - 216) = *(_OWORD *)(v1990.i64[0] + v1181 + 10456);
                                          *((_QWORD *)v1186 - 21) = v1238;
                                          *(_OWORD *)(v1186 - 184) = v1236;
                                          *(_OWORD *)(v1186 - 200) = v1237;
                                          v1239 = *(_OWORD *)(v1990.i64[0] + v1181 + 10392);
                                          v1240 = *(_OWORD *)(v1990.i64[0] + v1181 + 10408);
                                          v1241 = *(_OWORD *)(v1990.i64[0] + v1181 + 10424);
                                          *(_OWORD *)(v1186 - 232) = *(_OWORD *)(v1990.i64[0] + v1181 + 10440);
                                          *(_OWORD *)(v1186 - 248) = v1241;
                                          *(_OWORD *)v1235 = v1239;
                                          *((_OWORD *)v1235 + 1) = v1240;
                                          v1242 = *(_OWORD *)(v1990.i64[0] + v1181 + 10592);
                                          v1243 = *(_OWORD *)(v1990.i64[0] + v1181 + 10608);
                                          v1244 = *(_OWORD *)(v1990.i64[0] + v1181 + 10576);
                                          *((_QWORD *)v1186 - 6) = *(_QWORD *)(v1990.i64[0] + v1181 + 10624);
                                          *((_OWORD *)v1186 - 5) = v1242;
                                          *((_OWORD *)v1186 - 4) = v1243;
                                          *((_OWORD *)v1186 - 6) = v1244;
                                          v1245 = *(_OWORD *)(v1990.i64[0] + v1181 + 10512);
                                          v1246 = *(_OWORD *)(v1990.i64[0] + v1181 + 10528);
                                          v1247 = *(_OWORD *)(v1990.i64[0] + v1181 + 10560);
                                          *((_OWORD *)v1186 - 8) = *(_OWORD *)(v1990.i64[0] + v1181 + 10544);
                                          *((_OWORD *)v1186 - 7) = v1247;
                                          *((_OWORD *)v1186 - 10) = v1245;
                                          *((_OWORD *)v1186 - 9) = v1246;
                                          v1248 = *(_QWORD *)(v1990.i64[0] + v1181 + 10632);
                                          *(v1186 - 32) = *(_BYTE *)(v1990.i64[0] + v1181 + 10640);
                                          *((_QWORD *)v1186 - 5) = v1248;
                                          __asm { PRFM            #0, [X26,#0x14C0] }
                                          *(_OWORD *)(v1186 - 24) = *(_OWORD *)&v696[v1181 / 8 - 3];
                                          *(v1231 - 3) = 0;
                                          *(v1231 - 2) = 0;
                                          *(v1186 - 8) = (char)v696[v1181 / 8 - 1];
                                          v1181 -= 5336;
                                        }
                                        while (&v696[v1181 / 8] != v1180);
                                        v1137 += v1181;
                                      }
                                      v1250 = *(void ***)(v2068 + 5688);
                                      if (v1250 != v696)
                                      {
                                        v1251 = 0;
                                        v1252 = &v1980[667 * v1974];
                                        categorye = v1252 + 666;
                                        v1253 = v1252 + 664;
                                        do
                                        {
                                          v1254 = &v1971[v1251 * 8];
                                          _X24 = &v696[v1251];
                                          __asm { PRFM            #0, [X24,#0x29B0] }
                                          *(_QWORD *)v1254 = v696[v1251];
                                          *(_OWORD *)(v1254 + 8) = *(_OWORD *)&v696[v1251 + 1];
                                          v1254[32] = (char)v696[v1251 + 4];
                                          *((_QWORD *)v1254 + 3) = &off_24CA00398;
                                          memcpy(&v1971[v1251 * 8 + 40], &v696[v1251 + 5], 0x708uLL);
                                          v1257 = *(_OWORD *)&v696[v1251 + 230];
                                          *((_QWORD *)v1254 + 232) = v696[v1251 + 232];
                                          *((_OWORD *)v1254 + 115) = v1257;
                                          v1258 = v696[v1251 + 235];
                                          *(_OWORD *)(v1254 + 1864) = *(_OWORD *)&v696[v1251 + 233];
                                          *((_QWORD *)v1254 + 235) = v1258;
                                          v1259 = *(_OWORD *)&v696[v1251 + 238];
                                          *((_OWORD *)v1254 + 118) = *(_OWORD *)&v696[v1251 + 236];
                                          *((_OWORD *)v1254 + 119) = v1259;
                                          *((_OWORD *)v1254 + 120) = *(_OWORD *)&v696[v1251 + 240];
                                          v1260 = *(_OWORD *)&v696[v1251 + 244];
                                          v1261 = *(_OWORD *)&v696[v1251 + 246];
                                          v1262 = v696[v1251 + 248];
                                          *((_OWORD *)v1254 + 121) = *(_OWORD *)&v696[v1251 + 242];
                                          *((_QWORD *)v1254 + 248) = v1262;
                                          *((_OWORD *)v1254 + 123) = v1261;
                                          *((_OWORD *)v1254 + 122) = v1260;
                                          v1264 = *(_OWORD *)&v696[v1251 + 253];
                                          v1263 = *(_OWORD *)&v696[v1251 + 255];
                                          v1265 = *(_OWORD *)&v696[v1251 + 251];
                                          *((_QWORD *)v1254 + 257) = v696[v1251 + 257];
                                          *(_OWORD *)(v1254 + 2024) = v1264;
                                          *(_OWORD *)(v1254 + 2040) = v1263;
                                          *(_OWORD *)(v1254 + 2008) = v1265;
                                          *(_OWORD *)(v1254 + 1992) = *(_OWORD *)&v696[v1251 + 249];
                                          v1266 = *(_OWORD *)&v696[v1251 + 260];
                                          v1267 = *(_OWORD *)&v696[v1251 + 262];
                                          v1268 = *(_OWORD *)&v696[v1251 + 264];
                                          *((_QWORD *)v1254 + 266) = v696[v1251 + 266];
                                          *((_OWORD *)v1254 + 132) = v1268;
                                          *((_OWORD *)v1254 + 131) = v1267;
                                          *((_OWORD *)v1254 + 130) = v1266;
                                          *((_OWORD *)v1254 + 129) = *(_OWORD *)&v696[v1251 + 258];
                                          v1269 = *(_OWORD *)&v696[v1251 + 269];
                                          v1270 = *(_OWORD *)&v696[v1251 + 271];
                                          v1271 = *(_OWORD *)&v696[v1251 + 273];
                                          *((_QWORD *)v1254 + 275) = v696[v1251 + 275];
                                          *(_OWORD *)(v1254 + 2168) = v1270;
                                          *(_OWORD *)(v1254 + 2184) = v1271;
                                          *(_OWORD *)(v1254 + 2152) = v1269;
                                          *(_OWORD *)(v1254 + 2136) = *(_OWORD *)&v696[v1251 + 267];
                                          v1272 = *(_OWORD *)&v696[v1251 + 278];
                                          v1273 = *(_OWORD *)&v696[v1251 + 280];
                                          v1274 = *(_OWORD *)&v696[v1251 + 282];
                                          *((_QWORD *)v1254 + 284) = v696[v1251 + 284];
                                          *((_OWORD *)v1254 + 141) = v1274;
                                          *((_OWORD *)v1254 + 140) = v1273;
                                          *((_OWORD *)v1254 + 139) = v1272;
                                          *((_OWORD *)v1254 + 138) = *(_OWORD *)&v696[v1251 + 276];
                                          v1275 = *(_OWORD *)&v696[v1251 + 287];
                                          v1276 = *(_OWORD *)&v696[v1251 + 289];
                                          v1277 = *(_OWORD *)&v696[v1251 + 291];
                                          *((_QWORD *)v1254 + 293) = v696[v1251 + 293];
                                          *(_OWORD *)(v1254 + 2312) = v1276;
                                          *(_OWORD *)(v1254 + 2328) = v1277;
                                          *(_OWORD *)(v1254 + 2296) = v1275;
                                          *(_OWORD *)(v1254 + 2280) = *(_OWORD *)&v696[v1251 + 285];
                                          v1278 = *(_OWORD *)&v696[v1251 + 296];
                                          v1279 = *(_OWORD *)&v696[v1251 + 298];
                                          v1280 = *(_OWORD *)&v696[v1251 + 300];
                                          *((_QWORD *)v1254 + 302) = v696[v1251 + 302];
                                          *((_OWORD *)v1254 + 150) = v1280;
                                          *((_OWORD *)v1254 + 149) = v1279;
                                          *((_OWORD *)v1254 + 148) = v1278;
                                          *((_OWORD *)v1254 + 147) = *(_OWORD *)&v696[v1251 + 294];
                                          v1281 = *(_OWORD *)&v696[v1251 + 305];
                                          v1282 = *(_OWORD *)&v696[v1251 + 307];
                                          v1283 = *(_OWORD *)&v696[v1251 + 309];
                                          *((_QWORD *)v1254 + 311) = v696[v1251 + 311];
                                          *(_OWORD *)(v1254 + 2456) = v1282;
                                          *(_OWORD *)(v1254 + 2472) = v1283;
                                          *(_OWORD *)(v1254 + 2440) = v1281;
                                          *(_OWORD *)(v1254 + 2424) = *(_OWORD *)&v696[v1251 + 303];
                                          memcpy(&v1971[v1251 * 8 + 2496], &v696[v1251 + 312], 0x288uLL);
                                          v1284 = *(_OWORD *)&v696[v1251 + 393];
                                          *((_QWORD *)v1254 + 395) = v696[v1251 + 395];
                                          *(_OWORD *)(v1254 + 3144) = v1284;
                                          v1285 = v696[v1251 + 398];
                                          *((_OWORD *)v1254 + 198) = *(_OWORD *)&v696[v1251 + 396];
                                          *((_QWORD *)v1254 + 398) = v1285;
                                          memcpy(&v1971[v1251 * 8 + 3192], &v696[v1251 + 399], 0x708uLL);
                                          v1286 = v696[v1251 + 626];
                                          *((_OWORD *)v1254 + 312) = *(_OWORD *)&v696[v1251 + 624];
                                          *((_QWORD *)v1254 + 626) = v1286;
                                          __asm { PRFM            #0, [X24,#0x3D48] }
                                          *((_QWORD *)v1254 + 627) = v696[v1251 + 627];
                                          v1288 = *(_OWORD *)&v696[v1251 + 628];
                                          *((_OWORD *)v1254 + 315) = *(_OWORD *)&v696[v1251 + 630];
                                          *((_OWORD *)v1254 + 314) = v1288;
                                          v1289 = *(_OWORD *)&v696[v1251 + 642];
                                          v1290 = *(_OWORD *)&v696[v1251 + 644];
                                          v1291 = v696[v1251 + 646];
                                          *((_OWORD *)v1254 + 320) = *(_OWORD *)&v696[v1251 + 640];
                                          *((_QWORD *)v1254 + 646) = v1291;
                                          *((_OWORD *)v1254 + 322) = v1290;
                                          *((_OWORD *)v1254 + 321) = v1289;
                                          v1292 = *(_OWORD *)&v696[v1251 + 632];
                                          v1293 = *(_OWORD *)&v696[v1251 + 634];
                                          v1294 = *(_OWORD *)&v696[v1251 + 636];
                                          *((_OWORD *)v1254 + 319) = *(_OWORD *)&v696[v1251 + 638];
                                          *((_OWORD *)v1254 + 318) = v1294;
                                          *((_OWORD *)v1254 + 317) = v1293;
                                          *((_OWORD *)v1254 + 316) = v1292;
                                          v1296 = *(_OWORD *)&v696[v1251 + 657];
                                          v1295 = *(_OWORD *)&v696[v1251 + 659];
                                          v1297 = *(_OWORD *)&v696[v1251 + 655];
                                          *((_QWORD *)v1254 + 661) = v696[v1251 + 661];
                                          *(_OWORD *)(v1254 + 5256) = v1296;
                                          *(_OWORD *)(v1254 + 5272) = v1295;
                                          *(_OWORD *)(v1254 + 5240) = v1297;
                                          v1298 = *(_OWORD *)&v696[v1251 + 647];
                                          v1299 = *(_OWORD *)&v696[v1251 + 649];
                                          v1300 = *(_OWORD *)&v696[v1251 + 653];
                                          *(_OWORD *)(v1254 + 5208) = *(_OWORD *)&v696[v1251 + 651];
                                          *(_OWORD *)(v1254 + 5224) = v1300;
                                          *(_OWORD *)(v1254 + 5176) = v1298;
                                          *(_OWORD *)(v1254 + 5192) = v1299;
                                          v1301 = v696[v1251 + 662];
                                          v1254[5304] = (char)v696[v1251 + 663];
                                          v1302 = &v1253[v1251];
                                          *((_QWORD *)v1254 + 662) = v1301;
                                          __asm { PRFM            #0, [X24,#0x3E70] }
                                          *((_OWORD *)v1254 + 332) = *(_OWORD *)&v1253[v1251];
                                          v1304 = categorye[v1251];
                                          *v1302 = 0;
                                          v1302[1] = 0;
                                          v1254[5328] = v1304;
                                          v1251 += 667;
                                        }
                                        while (&v696[v1251] != v1250);
                                        v696 = *(void ***)(v2068 + 5688);
                                        v1971 += v1251 * 8;
                                      }
                                      v1305 = *(void ***)(v2068 + 5680);
                                      *(_QWORD *)(v2068 + 5680) = v1137;
                                      *(_QWORD *)(v2068 + 5688) = v1971;
                                      v1306 = *(_QWORD *)(v2068 + 5696);
                                      *(_QWORD *)(v2068 + 5696) = *((_QWORD *)&v2149[1] + 1);
                                      *((_QWORD *)&v2149[1] + 1) = v1306;
                                      *((_QWORD *)&v2149[0] + 1) = v1305;
                                      *(_QWORD *)&v2149[0] = v1305;
                                      if (v696 != v1305)
                                      {
                                        do
                                        {
                                          *(_QWORD *)&v2149[1] = v696 - 667;
                                          v1307 = (std::__shared_weak_count *)*(v696 - 2);
                                          if (v1307)
                                          {
                                            v1308 = (unint64_t *)&v1307->__shared_owners_;
                                            do
                                              v1309 = __ldaxr(v1308);
                                            while (__stlxr(v1309 - 1, v1308));
                                            if (!v1309)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v1307->__on_zero_shared)(v1307);
                                              std::__shared_weak_count::__release_weak(v1307);
                                            }
                                          }
                                          v696 = *(void ***)&v2149[1];
                                        }
                                        while (*(void ***)&v2149[1] != v1305);
                                        v696 = *(void ***)&v2149[0];
                                      }
                                      if (v696)
                                        operator delete(v696);
                                    }
                                    else if (v696 == v693)
                                    {
                                      *v693 = v648;
                                      v1093 = &v694[5336 * v1974];
                                      *(_OWORD *)(v1093 + 8) = *(_OWORD *)&object[8];
                                      v1093[32] = object[32];
                                      *((_QWORD *)v1093 + 3) = &off_24CA00398;
                                      memcpy(v1093 + 40, &object[40], 0x708uLL);
                                      v1094 = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1093 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1093 + 115) = v1094;
                                      v1095 = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1093 + 1864) = *(_OWORD *)&object[1864];
                                      *((_QWORD *)v1093 + 235) = v1095;
                                      v1096 = v2223[1];
                                      *((_OWORD *)v1093 + 118) = v2223[0];
                                      *((_OWORD *)v1093 + 119) = v1096;
                                      *((_OWORD *)v1093 + 120) = v2223[2];
                                      v1098 = v2223[4];
                                      v1097 = v2223[5];
                                      v1099 = *(_QWORD *)&v2223[6];
                                      *((_OWORD *)v1093 + 121) = v2223[3];
                                      *((_QWORD *)v1093 + 248) = v1099;
                                      *((_OWORD *)v1093 + 123) = v1097;
                                      *((_OWORD *)v1093 + 122) = v1098;
                                      v1101 = *(_OWORD *)((char *)&v2223[8] + 8);
                                      v1100 = *(_OWORD *)((char *)&v2223[9] + 8);
                                      v1102 = *(_OWORD *)((char *)&v2223[7] + 8);
                                      *((_QWORD *)v1093 + 257) = *((_QWORD *)&v2223[10] + 1);
                                      *(_OWORD *)(v1093 + 2008) = v1102;
                                      *(_OWORD *)(v1093 + 2040) = v1100;
                                      *(_OWORD *)(v1093 + 2024) = v1101;
                                      *(_OWORD *)(v1093 + 1992) = *(_OWORD *)((char *)&v2223[6] + 8);
                                      v1103 = v2223[12];
                                      v1104 = v2223[13];
                                      v1105 = v2223[14];
                                      *((_QWORD *)v1093 + 266) = *(_QWORD *)&v2223[15];
                                      *((_OWORD *)v1093 + 132) = v1105;
                                      *((_OWORD *)v1093 + 131) = v1104;
                                      *((_OWORD *)v1093 + 130) = v1103;
                                      *((_OWORD *)v1093 + 129) = v2223[11];
                                      v1106 = *(_OWORD *)((char *)&v2223[16] + 8);
                                      v1107 = *(_OWORD *)((char *)&v2223[17] + 8);
                                      v1108 = *(_OWORD *)((char *)&v2223[18] + 8);
                                      *((_QWORD *)v1093 + 275) = *((_QWORD *)&v2223[19] + 1);
                                      *(_OWORD *)(v1093 + 2184) = v1108;
                                      *(_OWORD *)(v1093 + 2168) = v1107;
                                      *(_OWORD *)(v1093 + 2152) = v1106;
                                      *(_OWORD *)(v1093 + 2136) = *(_OWORD *)((char *)&v2223[15] + 8);
                                      v1109 = v2223[21];
                                      v1110 = v2223[22];
                                      v1111 = v2223[23];
                                      *((_QWORD *)v1093 + 284) = *(_QWORD *)&v2223[24];
                                      *((_OWORD *)v1093 + 141) = v1111;
                                      *((_OWORD *)v1093 + 140) = v1110;
                                      *((_OWORD *)v1093 + 139) = v1109;
                                      *((_OWORD *)v1093 + 138) = v2223[20];
                                      v1112 = *(_OWORD *)((char *)&v2223[25] + 8);
                                      v1113 = *(_OWORD *)((char *)&v2223[26] + 8);
                                      v1114 = *(_OWORD *)((char *)&v2223[27] + 8);
                                      *((_QWORD *)v1093 + 293) = *((_QWORD *)&v2223[28] + 1);
                                      *(_OWORD *)(v1093 + 2328) = v1114;
                                      *(_OWORD *)(v1093 + 2312) = v1113;
                                      *(_OWORD *)(v1093 + 2296) = v1112;
                                      *(_OWORD *)(v1093 + 2280) = *(_OWORD *)((char *)&v2223[24] + 8);
                                      v1115 = v2223[30];
                                      v1116 = v2223[31];
                                      v1117 = v2223[32];
                                      *((_QWORD *)v1093 + 302) = *(_QWORD *)&v2223[33];
                                      *((_OWORD *)v1093 + 150) = v1117;
                                      *((_OWORD *)v1093 + 149) = v1116;
                                      *((_OWORD *)v1093 + 148) = v1115;
                                      *((_OWORD *)v1093 + 147) = v2223[29];
                                      v1118 = *(_OWORD *)((char *)&v2223[34] + 8);
                                      v1119 = *(_OWORD *)((char *)&v2223[35] + 8);
                                      v1120 = *(_OWORD *)((char *)&v2223[36] + 8);
                                      *((_QWORD *)v1093 + 311) = *((_QWORD *)&v2223[37] + 1);
                                      *(_OWORD *)(v1093 + 2472) = v1120;
                                      *(_OWORD *)(v1093 + 2456) = v1119;
                                      *(_OWORD *)(v1093 + 2440) = v1118;
                                      *(_OWORD *)(v1093 + 2424) = *(_OWORD *)((char *)&v2223[33] + 8);
                                      memcpy(v1093 + 2496, &v2223[38], 0x288uLL);
                                      v1121 = *(_OWORD *)((char *)&v2223[78] + 8);
                                      *((_QWORD *)v1093 + 395) = *((_QWORD *)&v2223[79] + 1);
                                      *(_OWORD *)(v1093 + 3144) = v1121;
                                      v1122 = *(_QWORD *)&v2223[81];
                                      *((_OWORD *)v1093 + 198) = v2223[80];
                                      *((_QWORD *)v1093 + 398) = v1122;
                                      memcpy(v1093 + 3192, (char *)&v2223[81] + 8, 0x708uLL);
                                      v1123 = v2223[194];
                                      *((_QWORD *)v1093 + 626) = *(_QWORD *)&v2223[195];
                                      *((_OWORD *)v1093 + 312) = v1123;
                                      *((_QWORD *)v1093 + 627) = *((_QWORD *)&v2223[195] + 1);
                                      v1124 = v2223[196];
                                      *((_OWORD *)v1093 + 315) = v2223[197];
                                      *((_OWORD *)v1093 + 314) = v1124;
                                      v1125 = v2223[200];
                                      v1126 = v2223[201];
                                      v1127 = v2223[199];
                                      *((_OWORD *)v1093 + 316) = v2223[198];
                                      *((_OWORD *)v1093 + 319) = v1126;
                                      *((_OWORD *)v1093 + 318) = v1125;
                                      *((_OWORD *)v1093 + 317) = v1127;
                                      v1129 = v2223[203];
                                      v1128 = v2223[204];
                                      v1130 = *(_QWORD *)&v2223[205];
                                      *((_OWORD *)v1093 + 320) = v2223[202];
                                      *((_QWORD *)v1093 + 646) = v1130;
                                      *((_OWORD *)v1093 + 322) = v1128;
                                      *((_OWORD *)v1093 + 321) = v1129;
                                      v1131 = *(_OWORD *)((char *)&v2223[207] + 8);
                                      v1132 = *(_OWORD *)((char *)&v2223[208] + 8);
                                      v1133 = *(_OWORD *)((char *)&v2223[206] + 8);
                                      *(_OWORD *)(v1093 + 5176) = *(_OWORD *)((char *)&v2223[205] + 8);
                                      *(_OWORD *)(v1093 + 5224) = v1132;
                                      *(_OWORD *)(v1093 + 5208) = v1131;
                                      *(_OWORD *)(v1093 + 5192) = v1133;
                                      v1135 = *(_OWORD *)((char *)&v2223[210] + 8);
                                      v1134 = *(_OWORD *)((char *)&v2223[211] + 8);
                                      v1136 = *((_QWORD *)&v2223[212] + 1);
                                      *(_OWORD *)(v1093 + 5240) = *(_OWORD *)((char *)&v2223[209] + 8);
                                      *((_QWORD *)v1093 + 661) = v1136;
                                      *(_OWORD *)(v1093 + 5272) = v1134;
                                      *(_OWORD *)(v1093 + 5256) = v1135;
                                      LOBYTE(v1136) = BYTE8(v2223[213]);
                                      *((_QWORD *)v1093 + 662) = *(_QWORD *)&v2223[213];
                                      v1093[5304] = v1136;
                                      *((_OWORD *)v1093 + 332) = v2223[214];
                                      v2223[214] = 0uLL;
                                      v1093[5328] = v2223[215];
                                      *(_QWORD *)(v2068 + 5688) = v693 + 667;
                                    }
                                    else
                                    {
                                      v2088 = *(_OWORD *)v2183;
                                      memcpy((char *)v2149 + 7, &v2183[32], 0x708uLL);
                                      v2086 = *(_OWORD *)&v2183[1832];
                                      v2087 = *(void **)&v2183[1848];
                                      v2084 = *(_OWORD *)&v2183[1856];
                                      v2085 = *(void **)&v2183[1872];
                                      v2082 = *(_OWORD *)&v2183[1880];
                                      v2083 = *(_OWORD *)&v2183[1896];
                                      v2148 = *(void **)&v2183[1976];
                                      v2147 = *(_OWORD *)&v2183[1960];
                                      v2146 = *(_OWORD *)&v2183[1944];
                                      v2145 = *(_OWORD *)&v2183[1928];
                                      v2144 = *(_OWORD *)&v2183[1912];
                                      v2143 = *(void **)&v2183[2048];
                                      v2142 = *(_OWORD *)&v2183[2032];
                                      v2141 = *(_OWORD *)&v2183[2016];
                                      v2139 = *(_OWORD *)&v2183[1984];
                                      v2140 = *(_OWORD *)&v2183[2000];
                                      v2138 = *(void **)&v2183[2120];
                                      v2137 = *(_OWORD *)&v2183[2104];
                                      v2136 = *(_OWORD *)&v2183[2088];
                                      v2134 = *(_OWORD *)&v2183[2056];
                                      v2135 = *(_OWORD *)&v2183[2072];
                                      v2133 = *(void **)&v2183[2192];
                                      v2132 = *(_OWORD *)&v2183[2176];
                                      v2131 = *(_OWORD *)&v2183[2160];
                                      v2129 = *(_OWORD *)&v2183[2128];
                                      v2130 = *(_OWORD *)&v2183[2144];
                                      v2128 = *(void **)&v2183[2264];
                                      v2127 = *(_OWORD *)&v2183[2248];
                                      v2126 = *(_OWORD *)&v2183[2232];
                                      v2124 = *(_OWORD *)&v2183[2200];
                                      v2125 = *(_OWORD *)&v2183[2216];
                                      v2123 = *(void **)&v2183[2336];
                                      v2122 = *(_OWORD *)&v2183[2320];
                                      v2121 = *(_OWORD *)&v2183[2304];
                                      v2119 = *(_OWORD *)&v2183[2272];
                                      v2120 = *(_OWORD *)&v2183[2288];
                                      v2118 = *(void **)&v2183[2408];
                                      v2117 = *(_OWORD *)&v2183[2392];
                                      v2116 = *(_OWORD *)&v2183[2376];
                                      v2114 = *(_OWORD *)&v2183[2344];
                                      v2115 = *(_OWORD *)&v2183[2360];
                                      v2113 = *(void **)&v2183[2480];
                                      v2112 = *(_OWORD *)&v2183[2464];
                                      v2111 = *(_OWORD *)&v2183[2448];
                                      v2109 = *(_OWORD *)&v2183[2416];
                                      v2110 = *(_OWORD *)&v2183[2432];
                                      memcpy(v2108, &v2183[2488], 0x288uLL);
                                      v2080 = *(_OWORD *)&v2183[3136];
                                      v2081 = *(void **)&v2183[3152];
                                      v2078 = *(_OWORD *)&v2183[3160];
                                      v2079 = *(void **)&v2183[3176];
                                      memcpy(v2107, &v2183[3184], 0x708uLL);
                                      v2076 = *(_OWORD *)&v2183[4984];
                                      v2077 = *(void **)&v2183[5000];
                                      v1926 = v2223[196];
                                      v1923 = v2223[197];
                                      v2103 = *(_OWORD *)&v2183[5112];
                                      v2104 = *(_OWORD *)&v2183[5128];
                                      v2105 = *(_OWORD *)&v2183[5144];
                                      v2106 = *(void **)&v2183[5160];
                                      v2098 = *(_OWORD *)&v2183[5048];
                                      v2100 = *(_OWORD *)&v2183[5064];
                                      v2101 = *(_OWORD *)&v2183[5080];
                                      v2102 = *(_OWORD *)&v2183[5096];
                                      v2092 = *(_OWORD *)&v2183[5216];
                                      v2091 = *(_OWORD *)&v2183[5200];
                                      v2090 = *(_OWORD *)&v2183[5184];
                                      v2089 = *(_OWORD *)&v2183[5168];
                                      v2096 = *(void **)&v2183[5280];
                                      v2095 = *(_OWORD *)&v2183[5264];
                                      v2094 = *(_OWORD *)&v2183[5248];
                                      v2093 = *(_OWORD *)&v2183[5232];
                                      v2075 = v2183[5296];
                                      v2074 = *(void **)&v2183[5288];
                                      v698 = v693 - 667;
                                      v699 = v693;
                                      v2223[214] = 0uLL;
                                      if ((unint64_t)v693 >= 0x14D8)
                                      {
                                        v700 = 0;
                                        v701 = &v1980[667 * v1974] + v693 - (v696 + 667);
                                        v1990.i64[0] = (uint64_t)(v701 + 666);
                                        v1988.i64[0] = (uint64_t)(v701 + 664);
                                        do
                                        {
                                          v702 = &v693[v700];
                                          _X23 = &v698[v700];
                                          __asm { PRFM            #0, [X23,#0x29B0] }
                                          *v702 = v698[v700];
                                          *(_OWORD *)(v702 + 1) = *(_OWORD *)&v698[v700 + 1];
                                          *((_BYTE *)v702 + 32) = v698[v700 + 4];
                                          v702[3] = &off_24CA00398;
                                          memcpy(&v693[v700 + 5], &v698[v700 + 5], 0x708uLL);
                                          v705 = *(_OWORD *)&v698[v700 + 230];
                                          v702[232] = v698[v700 + 232];
                                          *((_OWORD *)v702 + 115) = v705;
                                          v706 = v698[v700 + 235];
                                          *(_OWORD *)(v702 + 233) = *(_OWORD *)&v698[v700 + 233];
                                          v702[235] = v706;
                                          v707 = *(_OWORD *)&v698[v700 + 238];
                                          *((_OWORD *)v702 + 118) = *(_OWORD *)&v698[v700 + 236];
                                          *((_OWORD *)v702 + 119) = v707;
                                          *((_OWORD *)v702 + 120) = *(_OWORD *)&v698[v700 + 240];
                                          v708 = *(_OWORD *)&v698[v700 + 244];
                                          v709 = *(_OWORD *)&v698[v700 + 246];
                                          v710 = v698[v700 + 248];
                                          *((_OWORD *)v702 + 121) = *(_OWORD *)&v698[v700 + 242];
                                          v702[248] = v710;
                                          *((_OWORD *)v702 + 123) = v709;
                                          *((_OWORD *)v702 + 122) = v708;
                                          v712 = *(_OWORD *)&v698[v700 + 253];
                                          v711 = *(_OWORD *)&v698[v700 + 255];
                                          v713 = *(_OWORD *)&v698[v700 + 251];
                                          v702[257] = v698[v700 + 257];
                                          *(_OWORD *)(v702 + 253) = v712;
                                          *(_OWORD *)(v702 + 255) = v711;
                                          *(_OWORD *)(v702 + 251) = v713;
                                          *(_OWORD *)(v702 + 249) = *(_OWORD *)&v698[v700 + 249];
                                          v714 = *(_OWORD *)&v698[v700 + 260];
                                          v715 = *(_OWORD *)&v698[v700 + 262];
                                          v716 = *(_OWORD *)&v698[v700 + 264];
                                          v702[266] = v698[v700 + 266];
                                          *((_OWORD *)v702 + 132) = v716;
                                          *((_OWORD *)v702 + 131) = v715;
                                          *((_OWORD *)v702 + 130) = v714;
                                          *((_OWORD *)v702 + 129) = *(_OWORD *)&v698[v700 + 258];
                                          v717 = *(_OWORD *)&v698[v700 + 269];
                                          v718 = *(_OWORD *)&v698[v700 + 271];
                                          v719 = *(_OWORD *)&v698[v700 + 273];
                                          v702[275] = v698[v700 + 275];
                                          *(_OWORD *)(v702 + 271) = v718;
                                          *(_OWORD *)(v702 + 273) = v719;
                                          *(_OWORD *)(v702 + 269) = v717;
                                          *(_OWORD *)(v702 + 267) = *(_OWORD *)&v698[v700 + 267];
                                          v720 = *(_OWORD *)&v698[v700 + 278];
                                          v721 = *(_OWORD *)&v698[v700 + 280];
                                          v722 = *(_OWORD *)&v698[v700 + 282];
                                          v702[284] = v698[v700 + 284];
                                          *((_OWORD *)v702 + 141) = v722;
                                          *((_OWORD *)v702 + 140) = v721;
                                          *((_OWORD *)v702 + 139) = v720;
                                          *((_OWORD *)v702 + 138) = *(_OWORD *)&v698[v700 + 276];
                                          v723 = *(_OWORD *)&v698[v700 + 287];
                                          v724 = *(_OWORD *)&v698[v700 + 289];
                                          v725 = *(_OWORD *)&v698[v700 + 291];
                                          v702[293] = v698[v700 + 293];
                                          *(_OWORD *)(v702 + 289) = v724;
                                          *(_OWORD *)(v702 + 291) = v725;
                                          *(_OWORD *)(v702 + 287) = v723;
                                          *(_OWORD *)(v702 + 285) = *(_OWORD *)&v698[v700 + 285];
                                          v726 = *(_OWORD *)&v698[v700 + 296];
                                          v727 = *(_OWORD *)&v698[v700 + 298];
                                          v728 = *(_OWORD *)&v698[v700 + 300];
                                          v702[302] = v698[v700 + 302];
                                          *((_OWORD *)v702 + 150) = v728;
                                          *((_OWORD *)v702 + 149) = v727;
                                          *((_OWORD *)v702 + 148) = v726;
                                          *((_OWORD *)v702 + 147) = *(_OWORD *)&v698[v700 + 294];
                                          v729 = *(_OWORD *)&v698[v700 + 305];
                                          v730 = *(_OWORD *)&v698[v700 + 307];
                                          v731 = *(_OWORD *)&v698[v700 + 309];
                                          v702[311] = v698[v700 + 311];
                                          *(_OWORD *)(v702 + 307) = v730;
                                          *(_OWORD *)(v702 + 309) = v731;
                                          *(_OWORD *)(v702 + 305) = v729;
                                          *(_OWORD *)(v702 + 303) = *(_OWORD *)&v698[v700 + 303];
                                          memcpy(&v693[v700 + 312], &v698[v700 + 312], 0x288uLL);
                                          v732 = *(_OWORD *)&v698[v700 + 393];
                                          v702[395] = v698[v700 + 395];
                                          *(_OWORD *)(v702 + 393) = v732;
                                          v733 = v698[v700 + 398];
                                          *((_OWORD *)v702 + 198) = *(_OWORD *)&v698[v700 + 396];
                                          v702[398] = v733;
                                          memcpy(&v693[v700 + 399], &v698[v700 + 399], 0x708uLL);
                                          v734 = v698[v700 + 626];
                                          *((_OWORD *)v702 + 312) = *(_OWORD *)&v698[v700 + 624];
                                          v702[626] = v734;
                                          __asm { PRFM            #0, [X23,#0x3D48] }
                                          v702[627] = v698[v700 + 627];
                                          v736 = *(_OWORD *)&v698[v700 + 628];
                                          *((_OWORD *)v702 + 315) = *(_OWORD *)&v698[v700 + 630];
                                          *((_OWORD *)v702 + 314) = v736;
                                          v737 = *(_OWORD *)&v698[v700 + 642];
                                          v738 = *(_OWORD *)&v698[v700 + 644];
                                          v739 = v698[v700 + 646];
                                          *((_OWORD *)v702 + 320) = *(_OWORD *)&v698[v700 + 640];
                                          v702[646] = v739;
                                          *((_OWORD *)v702 + 322) = v738;
                                          *((_OWORD *)v702 + 321) = v737;
                                          v740 = *(_OWORD *)&v698[v700 + 632];
                                          v741 = *(_OWORD *)&v698[v700 + 634];
                                          v742 = *(_OWORD *)&v698[v700 + 636];
                                          *((_OWORD *)v702 + 319) = *(_OWORD *)&v698[v700 + 638];
                                          *((_OWORD *)v702 + 318) = v742;
                                          *((_OWORD *)v702 + 317) = v741;
                                          *((_OWORD *)v702 + 316) = v740;
                                          v744 = *(_OWORD *)&v698[v700 + 657];
                                          v743 = *(_OWORD *)&v698[v700 + 659];
                                          v745 = *(_OWORD *)&v698[v700 + 655];
                                          v702[661] = v698[v700 + 661];
                                          *(_OWORD *)(v702 + 657) = v744;
                                          *(_OWORD *)(v702 + 659) = v743;
                                          *(_OWORD *)(v702 + 655) = v745;
                                          v746 = *(_OWORD *)&v698[v700 + 647];
                                          v747 = *(_OWORD *)&v698[v700 + 649];
                                          v748 = *(_OWORD *)&v698[v700 + 653];
                                          *(_OWORD *)(v702 + 651) = *(_OWORD *)&v698[v700 + 651];
                                          *(_OWORD *)(v702 + 653) = v748;
                                          *(_OWORD *)(v702 + 647) = v746;
                                          *(_OWORD *)(v702 + 649) = v747;
                                          v749 = v698[v700 + 662];
                                          *((_BYTE *)v702 + 5304) = v698[v700 + 663];
                                          v750 = (_QWORD *)(v1988.i64[0] + v700 * 8);
                                          v702[662] = v749;
                                          __asm { PRFM            #0, [X23,#0x3E70] }
                                          *((_OWORD *)v702 + 332) = *(_OWORD *)(v1988.i64[0] + v700 * 8);
                                          v752 = *(_BYTE *)(v1990.i64[0] + v700 * 8);
                                          *v750 = 0;
                                          v750[1] = 0;
                                          *((_BYTE *)v702 + 5328) = v752;
                                          v700 += 667;
                                        }
                                        while (&v698[v700] < v693);
                                        v699 = &v693[v700];
                                      }
                                      *(_QWORD *)(v2068 + 5688) = v699;
                                      if (v693 != v696 + 667)
                                      {
                                        v753 = (uint64_t)(v693 - 667);
                                        v754 = 8 * (v693 - (v696 + 667));
                                        do
                                        {
                                          v753 = sub_20F5B6B10(v753, (uint64_t)&v1980[667 * v1974 - 667] + v754) - 5336;
                                          v754 -= 5336;
                                        }
                                        while (v754);
                                      }
                                      *v696 = v648;
                                      v755 = &v1980[667 * v1974];
                                      *(_OWORD *)(v755 + 1) = v2088;
                                      *((_BYTE *)v755 + 32) = v1984;
                                      memcpy(v755 + 5, (char *)v2149 + 7, 0x708uLL);
                                      *((_OWORD *)v755 + 115) = v2086;
                                      *(_OWORD *)(v755 + 233) = v2084;
                                      *((_OWORD *)v755 + 118) = v2082;
                                      *((_OWORD *)v755 + 119) = v2083;
                                      v756 = v2145;
                                      *((_OWORD *)v755 + 120) = v2144;
                                      v757 = v2146;
                                      *((_OWORD *)v755 + 123) = v2147;
                                      *((_OWORD *)v755 + 122) = v757;
                                      *((_OWORD *)v755 + 121) = v756;
                                      v758 = v2140;
                                      *(_OWORD *)(v755 + 249) = v2139;
                                      v759 = v2141;
                                      *(_OWORD *)(v755 + 255) = v2142;
                                      *(_OWORD *)(v755 + 253) = v759;
                                      *(_OWORD *)(v755 + 251) = v758;
                                      v760 = v2137;
                                      *((_OWORD *)v755 + 131) = v2136;
                                      *((_OWORD *)v755 + 132) = v760;
                                      v761 = v2135;
                                      *((_OWORD *)v755 + 129) = v2134;
                                      *((_OWORD *)v755 + 130) = v761;
                                      v762 = v2130;
                                      *(_OWORD *)(v755 + 267) = v2129;
                                      v763 = v2131;
                                      *(_OWORD *)(v755 + 273) = v2132;
                                      *(_OWORD *)(v755 + 271) = v763;
                                      *(_OWORD *)(v755 + 269) = v762;
                                      v764 = v2127;
                                      *((_OWORD *)v755 + 140) = v2126;
                                      *((_OWORD *)v755 + 141) = v764;
                                      v765 = v2125;
                                      *((_OWORD *)v755 + 138) = v2124;
                                      *((_OWORD *)v755 + 139) = v765;
                                      v766 = v2120;
                                      *(_OWORD *)(v755 + 285) = v2119;
                                      v767 = v2121;
                                      *(_OWORD *)(v755 + 291) = v2122;
                                      *(_OWORD *)(v755 + 289) = v767;
                                      *(_OWORD *)(v755 + 287) = v766;
                                      v768 = v2117;
                                      *((_OWORD *)v755 + 149) = v2116;
                                      *((_OWORD *)v755 + 150) = v768;
                                      v769 = v2115;
                                      *((_OWORD *)v755 + 147) = v2114;
                                      *((_OWORD *)v755 + 148) = v769;
                                      v770 = v2110;
                                      *(_OWORD *)(v755 + 303) = v2109;
                                      v771 = v2111;
                                      *(_OWORD *)(v755 + 309) = v2112;
                                      *(_OWORD *)(v755 + 307) = v771;
                                      v755[232] = v2087;
                                      v755[235] = v2085;
                                      v755[248] = v2148;
                                      v755[257] = v2143;
                                      v755[266] = v2138;
                                      v755[275] = v2133;
                                      v755[284] = v2128;
                                      v755[293] = v2123;
                                      v755[302] = v2118;
                                      v755[311] = v2113;
                                      *(_OWORD *)(v755 + 305) = v770;
                                      memcpy(v755 + 312, v2108, 0x288uLL);
                                      *(_OWORD *)(v755 + 393) = v2080;
                                      v755[395] = v2081;
                                      *((_OWORD *)v755 + 198) = v2078;
                                      v755[398] = v2079;
                                      memcpy(v755 + 399, v2107, 0x708uLL);
                                      *((_OWORD *)v755 + 312) = v2076;
                                      v755[626] = v2077;
                                      v755[627] = v692;
                                      *((_OWORD *)v755 + 314) = v1926;
                                      *((_OWORD *)v755 + 315) = v1923;
                                      *((_OWORD *)v755 + 320) = v2103;
                                      *((_OWORD *)v755 + 321) = v2104;
                                      *((_OWORD *)v755 + 322) = v2105;
                                      v755[646] = v2106;
                                      *((_OWORD *)v755 + 316) = v2098;
                                      *((_OWORD *)v755 + 317) = v2100;
                                      *((_OWORD *)v755 + 318) = v2101;
                                      *((_OWORD *)v755 + 319) = v2102;
                                      v755[661] = v2096;
                                      *(_OWORD *)(v755 + 659) = v2095;
                                      *(_OWORD *)(v755 + 657) = v2094;
                                      *(_OWORD *)(v755 + 655) = v2093;
                                      *(_OWORD *)(v755 + 653) = v2092;
                                      *(_OWORD *)(v755 + 651) = v2091;
                                      *(_OWORD *)(v755 + 649) = v2090;
                                      *(_OWORD *)(v755 + 647) = v2089;
                                      *((_BYTE *)v755 + 5304) = v2075;
                                      v755[662] = v2074;
                                      v755[664] = v1970;
                                      v772 = (std::__shared_weak_count *)v755[665];
                                      v755[665] = categorya;
                                      if (v772)
                                      {
                                        v773 = (unint64_t *)&v772->__shared_owners_;
                                        do
                                          v774 = __ldaxr(v773);
                                        while (__stlxr(v774 - 1, v773));
                                        if (!v774)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
                                          std::__shared_weak_count::__release_weak(v772);
                                        }
                                      }
                                      LOBYTE(v1980[667 * v1974 + 666]) = v1986.i8[0];
                                    }
                                    categorya = (std::__shared_weak_count *)*((_QWORD *)&v2223[214] + 1);
                                  }
                                  if (categorya)
                                  {
                                    v1310 = (unint64_t *)&categorya->__shared_owners_;
                                    do
                                      v1311 = __ldaxr(v1310);
                                    while (__stlxr(v1311 - 1, v1310));
                                    if (!v1311)
                                    {
                                      ((void (*)(std::__shared_weak_count *))categorya->__on_zero_shared)(categorya);
                                      std::__shared_weak_count::__release_weak(categorya);
                                    }
                                  }
                                  v2019[2] = 0;
                                  *v2019 = 0;
                                  *(int64x2_t *)(v2068 + 5792) = vaddq_s64(*(int64x2_t *)(v2068 + 5792), (int64x2_t)xmmword_2103B4900);
                                  v656 = 1;
                                }
                                else
                                {
                                  v656 = 0;
                                  --*(_DWORD *)(v670 + 8);
                                  --*(_DWORD *)(v679 + 8);
                                  *(_OWORD *)&v2183[5016] = 0u;
                                  --*(_DWORD *)(v685 + 8);
                                  --*(_DWORD *)(v691 + 8);
                                  *(_OWORD *)&v2183[5032] = 0u;
                                }
                              }
                              v775 = *(std::__shared_weak_count **)&v2183[5312];
                              if (*(_QWORD *)&v2183[5312])
                              {
                                v776 = (unint64_t *)(*(_QWORD *)&v2183[5312] + 8);
                                do
                                  v777 = __ldaxr(v776);
                                while (__stlxr(v777 - 1, v776));
                                if (!v777)
                                {
                                  ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
                                  std::__shared_weak_count::__release_weak(v775);
                                }
                              }
                              v502 = v2073;
LABEL_848:
                              if (v502)
                              {
                                v778 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v779 = __ldaxr(v778);
                                while (__stlxr(v779 - 1, v778));
                                if (!v779)
                                {
                                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                                  std::__shared_weak_count::__release_weak(v502);
                                }
                              }
                              if (v656)
                              {
                                *(_BYTE *)(v2068 + 6588) = 0;
                                *v2001 = 0;
                              }
                              if (v2072)
                              {
                                v780 = (unint64_t *)&v2072->__shared_owners_;
                                do
                                  v781 = __ldaxr(v780);
                                while (__stlxr(v781 - 1, v780));
                                if (!v781)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2072->__on_zero_shared)(v2072);
                                  std::__shared_weak_count::__release_weak(v2072);
                                }
                              }
                              if (!v656)
                              {
                                sub_20F4AD5FC(v2107);
                                if (**(int **)(*(_QWORD *)&v2107[0] + 56) <= 4)
                                {
                                  v782 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
                                  v783 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
                                  v784 = v783;
                                  if (v782 || v783 != 0)
                                  {
                                    *(_QWORD *)v2183 = v2107;
                                    *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
                                    *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
                                    *(_DWORD *)&v2183[24] = 4;
                                    *(_QWORD *)&v2183[32] = "unknown file";
                                    *(_DWORD *)&v2183[40] = 184;
                                    *(_QWORD *)&v2183[48] = "unknown function";
                                    *(_QWORD *)&v2183[56] = 0;
                                    *(_QWORD *)&v2183[64] = 0;
                                    v786 = **(_QWORD **)v2183;
                                    if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
                                    {
                                      v787 = *(_QWORD *)(v786 + 24);
                                      categoryb = *(const char **)(v786 + 16);
                                    }
                                    else
                                    {
                                      v787 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
                                      categoryb = (const char *)(**(_QWORD **)v2183 + 16);
                                    }
                                    v1990.i64[0] = **(_QWORD **)v2183 + 16;
                                    v788 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                    if ((v788 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                                    {
                                      sub_20E9E46F8((uint64_t)v2150);
                                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
                                      if (v2151[8] && (v2151[7] & 0x80000000) != 0)
                                        operator delete(v2150[0]);
                                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                      __cxa_guard_release(&qword_254A4A510);
                                    }
                                    if (byte_254A4A4F8[23] >= 0)
                                      v789 = byte_254A4A4F8;
                                    else
                                      v789 = *(const char **)byte_254A4A4F8;
                                    if (byte_254A4A4F8[23] >= 0)
                                      v790 = byte_254A4A4F8[23];
                                    else
                                      v790 = *(_QWORD *)&byte_254A4A4F8[8];
                                    *(_QWORD *)object = os_log_create(v789, categoryb);
                                    if (v790 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    if (v790 >= 0x17)
                                    {
                                      v792 = v784;
                                      v793 = (v790 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v790 | 7) != 0x17)
                                        v793 = v790 | 7;
                                      v794 = v793 + 1;
                                      v791 = operator new(v793 + 1);
                                      *(_QWORD *)&object[24] = v794 | 0x8000000000000000;
                                      *(_QWORD *)&object[8] = v791;
                                      *(_QWORD *)&object[16] = v790;
                                      v784 = v792;
                                    }
                                    else
                                    {
                                      object[31] = v790;
                                      v791 = &object[8];
                                      if (!v790)
                                      {
LABEL_884:
                                        v791[v790] = 0;
                                        object[32] = 1;
                                        if (v787 > 0x7FFFFFFFFFFFFFF7)
                                          sub_20E860B7C();
                                        if (v787 >= 0x17)
                                        {
                                          v796 = (v787 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v787 | 7) != 0x17)
                                            v796 = v787 | 7;
                                          v797 = v796 + 1;
                                          v795 = operator new(v796 + 1);
                                          *(_QWORD *)&object[56] = v797 | 0x8000000000000000;
                                          *(_QWORD *)&object[40] = v795;
                                          *(_QWORD *)&object[48] = v787;
                                        }
                                        else
                                        {
                                          object[63] = v787;
                                          v795 = &object[40];
                                          if (!v787)
                                          {
LABEL_892:
                                            v795[v787] = 0;
                                            object[64] = 1;
                                            v798 = *(NSObject **)object;
                                            if ((object[63] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[40]);
                                            if (object[32] && (object[31] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[8]);
                                            if (*(_QWORD *)object)
                                              os_release(*(void **)object);
                                            if (v784 && *(_QWORD *)(v784 + 24))
                                            {
                                              v799 = _os_log_pack_size();
                                              v800 = (std::__shared_weak_count_vtbl *)operator new(v799, (std::align_val_t)8uLL);
                                              v801 = (std::__shared_weak_count *)operator new();
                                              v802 = v2012;
                                              v803 = v801;
                                              v801->__shared_owners_ = 0;
                                              v804 = (unint64_t *)&v801->__shared_owners_;
                                              v801->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                              v801->__shared_weak_owners_ = 0;
                                              v801[1].__vftable = v800;
                                              *(_QWORD *)object = v800;
                                              *(_QWORD *)&object[8] = v800;
                                              *(_QWORD *)&object[16] = v801;
                                              do
                                                v805 = __ldxr(v804);
                                              while (__stxr(v805 + 1, v804));
                                              memset(&object[24], 0, 24);
                                              do
                                                v806 = __ldaxr(v804);
                                              while (__stlxr(v806 - 1, v804));
                                              if (!v806)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
                                                std::__shared_weak_count::__release_weak(v803);
                                              }
                                              v807 = *(_QWORD *)object;
                                              v808 = _os_log_pack_fill();
                                              *(_DWORD *)v808 = 134218496;
                                              *(_QWORD *)(v808 + 4) = __szc;
                                              *(_WORD *)(v808 + 12) = 1024;
                                              *(_DWORD *)(v808 + 14) = v505;
                                              *(_WORD *)(v808 + 18) = 1024;
                                              *(_DWORD *)(v808 + 20) = v2012;
                                              v809 = (char *)operator new();
                                              v810 = *(unsigned __int8 *)(v786 + 39);
                                              v811 = v1990.i64[0];
                                              if ((v810 & 0x80u) != 0)
                                              {
                                                v811 = *(_QWORD *)(v786 + 16);
                                                v810 = *(_QWORD *)(v786 + 24);
                                              }
                                              *(_QWORD *)v809 = v807;
                                              *(_OWORD *)(v809 + 8) = *(_OWORD *)&object[8];
                                              *(_QWORD *)&object[8] = 0;
                                              *(_QWORD *)&object[16] = 0;
                                              *(_OWORD *)(v809 + 24) = *(_OWORD *)&object[24];
                                              *(_QWORD *)&object[24] = 0;
                                              *(_QWORD *)&object[32] = 0;
                                              *((_QWORD *)v809 + 5) = v811;
                                              *((_QWORD *)v809 + 6) = v810;
                                              v809[56] = 16;
                                              *(_QWORD *)&v2149[0] = 0;
                                              v2150[0] = v809;
                                              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v784 + 24) + 40))(*(_QWORD *)(v784 + 24), v2150);
                                              v812 = v2150[0];
                                              v2150[0] = 0;
                                              if (v812)
                                              {
                                                v813 = (std::__shared_weak_count *)*((_QWORD *)v812 + 4);
                                                if (v813)
                                                {
                                                  v814 = (unint64_t *)&v813->__shared_owners_;
                                                  do
                                                    v815 = __ldaxr(v814);
                                                  while (__stlxr(v815 - 1, v814));
                                                  if (!v815)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v813->__on_zero_shared)(v813);
                                                    std::__shared_weak_count::__release_weak(v813);
                                                  }
                                                }
                                                v816 = (std::__shared_weak_count *)*((_QWORD *)v812 + 2);
                                                if (v816)
                                                {
                                                  v817 = (unint64_t *)&v816->__shared_owners_;
                                                  do
                                                    v818 = __ldaxr(v817);
                                                  while (__stlxr(v818 - 1, v817));
                                                  if (!v818)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v816->__on_zero_shared)(v816);
                                                    std::__shared_weak_count::__release_weak(v816);
                                                  }
                                                }
                                                MEMORY[0x212BC6398](v812, 0x10F0C40B62ED6C6);
                                                v819 = *(_QWORD *)&v2149[0];
                                                *(_QWORD *)&v2149[0] = 0;
                                                v802 = v2012;
                                                if (v819)
                                                {
                                                  v820 = *(std::__shared_weak_count **)(v819 + 32);
                                                  if (v820)
                                                  {
                                                    v821 = (unint64_t *)&v820->__shared_owners_;
                                                    do
                                                      v822 = __ldaxr(v821);
                                                    while (__stlxr(v822 - 1, v821));
                                                    if (!v822)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
                                                      std::__shared_weak_count::__release_weak(v820);
                                                    }
                                                  }
                                                  v823 = *(std::__shared_weak_count **)(v819 + 16);
                                                  if (v823)
                                                  {
                                                    v824 = (unint64_t *)&v823->__shared_owners_;
                                                    do
                                                      v825 = __ldaxr(v824);
                                                    while (__stlxr(v825 - 1, v824));
                                                    if (!v825)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v823->__on_zero_shared)(v823);
                                                      std::__shared_weak_count::__release_weak(v823);
                                                    }
                                                  }
                                                  MEMORY[0x212BC6398](v819, 0x10F0C40B62ED6C6);
                                                  v802 = v2012;
                                                }
                                              }
                                              v826 = *(std::__shared_weak_count **)&object[32];
                                              if (*(_QWORD *)&object[32])
                                              {
                                                v827 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                                do
                                                  v828 = __ldaxr(v827);
                                                while (__stlxr(v828 - 1, v827));
                                                if (!v828)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
                                                  std::__shared_weak_count::__release_weak(v826);
                                                }
                                              }
                                              v829 = *(std::__shared_weak_count **)&object[16];
                                              if (*(_QWORD *)&object[16])
                                              {
                                                v830 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                                do
                                                  v831 = __ldaxr(v830);
                                                while (__stlxr(v831 - 1, v830));
                                                if (!v831)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v829->__on_zero_shared)(v829);
                                                  std::__shared_weak_count::__release_weak(v829);
                                                }
                                              }
                                            }
                                            else
                                            {
                                              os_log_type_enabled(v798, OS_LOG_TYPE_ERROR);
                                              *(_DWORD *)object = 134218496;
                                              *(_QWORD *)&object[4] = __szc;
                                              *(_WORD *)&object[12] = 1024;
                                              *(_DWORD *)&object[14] = v505;
                                              *(_WORD *)&object[18] = 1024;
                                              v802 = v2012;
                                              *(_DWORD *)&object[20] = v2012;
                                              v832 = (void *)_os_log_send_and_compose_impl();
                                              if (v832)
                                                free(v832);
                                            }
                                            if (v782)
                                            {
                                              sub_20E8C003C((uint64_t)v2183, "Failed to add the pre-integrated factor: %zu, state: %d -> %d.\n", (size_t)__szc, v505, v802);
                                              sub_20E863570((uint64_t)v2183);
                                            }
                                            sub_20E863570((uint64_t)v2183);
                                            v833 = *(std::__shared_weak_count **)&v2183[64];
                                            if (*(_QWORD *)&v2183[64])
                                            {
                                              v834 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
                                              do
                                                v835 = __ldaxr(v834);
                                              while (__stlxr(v835 - 1, v834));
                                              if (!v835)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
                                                std::__shared_weak_count::__release_weak(v833);
                                              }
                                            }
                                            goto LABEL_951;
                                          }
                                        }
                                        memmove(v795, categoryb, v787);
                                        goto LABEL_892;
                                      }
                                    }
                                    memmove(v791, v789, v790);
                                    goto LABEL_884;
                                  }
                                }
                              }
LABEL_951:
                              if (v2069)
                              {
                                v836 = (unint64_t *)&v2069->__shared_owners_;
                                do
                                  v837 = __ldaxr(v836);
                                while (__stlxr(v837 - 1, v836));
                                if (!v837)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2069->__on_zero_shared)(v2069);
                                  std::__shared_weak_count::__release_weak(v2069);
                                }
                              }
                              v645 = v2071;
                              if (!v2071)
                                goto LABEL_478;
                              v838 = (unint64_t *)&v2071->__shared_owners_;
                              do
                                v647 = __ldaxr(v838);
                              while (__stlxr(v647 - 1, v838));
LABEL_751:
                              if (!v647)
                              {
                                ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                                std::__shared_weak_count::__release_weak(v645);
                              }
                              goto LABEL_478;
                            }
                          }
                        }
                        v579 = *(_QWORD *)(v479 + 824);
                        v580 = *(_QWORD *)(v480 + 824);
                        v486[722] = v486[15];
                        v486[723] = v2031;
                        sub_20F61F108(v2068 + 480, v2107);
                        if ((v2011 & 1) != 0)
                        {
                          v582 = 0;
                          v583 = v1960;
                          v584 = *(_QWORD *)&v2107[0];
                          v585 = *(_QWORD *)&v2107[0];
                          if (!*(_QWORD *)&v2107[0])
                          {
LABEL_657:
                            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 179, (uint64_t)"sqrt_I_ != nullptr", 18, (uint64_t)"Covariance cannot be nullptr", 28, (void (*)(void **))sub_21023DDB0))
                            {
                              abort();
                            }
                            v585 = *(_QWORD *)&v2107[0];
                          }
                        }
                        else
                        {
                          v582 = v1962.i8[0];
                          v583 = v1962.u8[15];
                          v1959 = v1962.i8[14];
                          v1958 = v1962.i8[13];
                          v1957 = v1962.i8[12];
                          v1956 = v1962.i8[11];
                          v1955 = v1962.i8[10];
                          v1954 = v1962.i8[9];
                          v1953 = v1962.i8[8];
                          v1952 = v1962.i8[7];
                          v1951 = v1962.i8[6];
                          v1950 = v1962.i8[5];
                          v1949 = v1962.i8[4];
                          v1948 = v1962.i8[3];
                          v1947 = v1962.i8[2];
                          v1946 = v1962.i8[1];
                          v1945 = v1961.i8[15];
                          v1944 = v1961.i8[14];
                          v1943 = v1961.i8[13];
                          v1942 = v1961.i8[12];
                          v1941 = v1961.i8[11];
                          v1940 = v1961.i8[10];
                          v1939 = v1961.i8[9];
                          v1938 = v1961.i8[8];
                          v1937 = v1961.i8[7];
                          v1936 = v1961.i8[6];
                          v1935 = v1961.i8[5];
                          v1934 = v1961.i8[4];
                          v1933 = v1961.i8[3];
                          v1932 = v1961.i8[2];
                          v1931 = v1961.i8[1];
                          v1930 = v1961.i8[0];
                          v584 = *(_QWORD *)&v2107[0];
                          v585 = *(_QWORD *)&v2107[0];
                          if (!*(_QWORD *)&v2107[0])
                            goto LABEL_657;
                        }
                        v586 = (std::__shared_weak_count *)*((_QWORD *)&v2107[0] + 1);
                        *(_QWORD *)&v2108[0] = v585;
                        *((_QWORD *)&v2108[0] + 1) = *((_QWORD *)&v2107[0] + 1);
                        v2107[0] = 0uLL;
                        v2149[0] = __PAIR128__(*((unint64_t *)&v2108[0] + 1), v585);
                        if (*((_QWORD *)&v2108[0] + 1))
                        {
                          v587 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v588 = __ldxr(v587);
                          while (__stxr(v588 + 1, v587));
                        }
                        v589 = *(char **)(v2068 + 5656);
                        v590 = *(char **)(v2068 + 5664);
                        v1960 = v583;
                        if (v589 == v590)
                        {
                          v590 = *(char **)(v2068 + 5656);
                        }
                        else if (*((_QWORD *)v590 - 1002) >= (unint64_t)__szc)
                        {
                          v591 = 0x2F028E0D4911E25DLL * ((v590 - v589) >> 4);
                          do
                          {
                            v592 = v591 >> 1;
                            v593 = (unint64_t *)&v589[8016 * (v591 >> 1)];
                            v594 = *v593;
                            v595 = (char *)(v593 + 1002);
                            v591 += ~(v591 >> 1);
                            if (v594 < (unint64_t)__szc)
                              v589 = v595;
                            else
                              v591 = v592;
                          }
                          while (v591);
                          if (v589 != v590)
                          {
                            v590 = v589;
                            if (*(void **)v589 == __szc)
                            {
                              v596 = 0;
LABEL_736:
                              if (v586)
                              {
                                v640 = (unint64_t *)&v586->__shared_owners_;
                                do
                                  v641 = __ldaxr(v640);
                                while (__stlxr(v641 - 1, v640));
                                if (!v641)
                                {
                                  ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                                  std::__shared_weak_count::__release_weak(v586);
                                }
                              }
                              if (v596)
                              {
                                *(_BYTE *)(v2068 + 6588) = 0;
                                *v2001 = 0;
                              }
                              v642 = (std::__shared_weak_count *)*((_QWORD *)&v2108[0] + 1);
                              if (*((_QWORD *)&v2108[0] + 1))
                              {
                                v643 = (unint64_t *)(*((_QWORD *)&v2108[0] + 1) + 8);
                                do
                                  v644 = __ldaxr(v643);
                                while (__stlxr(v644 - 1, v643));
                                if (!v644)
                                {
                                  ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                                  std::__shared_weak_count::__release_weak(v642);
                                }
                              }
                              v645 = (std::__shared_weak_count *)*((_QWORD *)&v2107[0] + 1);
                              if (!*((_QWORD *)&v2107[0] + 1))
                                goto LABEL_478;
                              v646 = (unint64_t *)(*((_QWORD *)&v2107[0] + 1) + 8);
                              do
                                v647 = __ldaxr(v646);
                              while (__stlxr(v647 - 1, v646));
                              goto LABEL_751;
                            }
                          }
                        }
                        if (v586)
                        {
                          v597 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v598 = __ldxr(v597);
                          while (__stxr(v598 + 1, v597));
                        }
                        v2150[0] = __szc;
                        *(_QWORD *)v2151 = v584;
                        v2151[8] = 0;
                        v2151[40] = 0;
                        if ((v2011 & 1) == 0)
                        {
                          LOBYTE(v599) = v1931;
                          BYTE1(v599) = v1932;
                          BYTE2(v599) = v1933;
                          BYTE3(v599) = v1934;
                          BYTE4(v599) = v1935;
                          BYTE5(v599) = v1936;
                          BYTE6(v599) = v1937;
                          HIBYTE(v599) = v1938;
                          LOBYTE(v600) = v1939;
                          BYTE1(v600) = v1940;
                          BYTE2(v600) = v1941;
                          HIBYTE(v600) = v1942;
                          LOBYTE(v601) = v1943;
                          HIBYTE(v601) = v1944;
                          *(_WORD *)&v2151[37] = v601;
                          *(_DWORD *)&v2151[33] = v600;
                          v2151[8] = v582;
                          LOBYTE(v602) = v1946;
                          BYTE1(v602) = v1947;
                          BYTE2(v602) = v1948;
                          BYTE3(v602) = v1949;
                          BYTE4(v602) = v1950;
                          BYTE5(v602) = v1951;
                          BYTE6(v602) = v1952;
                          BYTE7(v602) = v1953;
                          BYTE8(v602) = v1954;
                          BYTE9(v602) = v1955;
                          BYTE10(v602) = v1956;
                          BYTE11(v602) = v1957;
                          BYTE12(v602) = v1958;
                          BYTE13(v602) = v1959;
                          BYTE14(v602) = v583;
                          HIBYTE(v602) = v1930;
                          *(_OWORD *)&v2151[9] = v602;
                          v2151[39] = v1945;
                          *(_QWORD *)&v2151[25] = v599;
                          v2151[40] = 1;
                        }
                        *(_QWORD *)&v2151[48] = v580;
                        *(_QWORD *)&v2151[56] = v579;
                        BYTE8(v2152[127]) = 0;
                        v2158 = 0;
                        v2159 = 257;
                        v2160 = 0u;
                        v2161 = 0u;
                        v2162 = 0;
                        *(_QWORD *)&v2181 = v585;
                        *((_QWORD *)&v2181 + 1) = v586;
                        if (v586)
                        {
                          v603 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v604 = __ldxr(v603);
                          while (__stxr(v604 + 1, v603));
                          v2179 = 0xBFF0000000000000;
                          v2180 = 0;
                          v2182 = 0;
                          do
                            v605 = __ldaxr(v603);
                          while (__stlxr(v605 - 1, v603));
                          if (!v605)
                          {
                            ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                            std::__shared_weak_count::__release_weak(v586);
                          }
                        }
                        else
                        {
                          v2179 = 0xBFF0000000000000;
                          v2180 = 0;
                          v2182 = 0;
                        }
                        v606 = *(char **)(v2068 + 4840);
                        v607 = *(char **)(v2068 + 4848);
                        v608 = v606;
                        if (v607 != v606)
                        {
                          v609 = (v607 - v606) >> 4;
                          v608 = *(char **)(v2068 + 4840);
                          do
                          {
                            v610 = v609 >> 1;
                            v611 = (unsigned int *)&v608[16 * (v609 >> 1)];
                            v613 = *v611;
                            v612 = (char *)(v611 + 4);
                            v609 += ~(v609 >> 1);
                            if (v613 < v457)
                              v608 = v612;
                            else
                              v609 = v610;
                          }
                          while (v609);
                        }
                        if (v608 == v607 || *(_DWORD *)v608 != v457)
                          goto LABEL_720;
                        v614 = *((_QWORD *)v608 + 1);
                        *(_QWORD *)&v2160 = v614;
                        ++*(_DWORD *)(*((_QWORD *)v608 + 1) + 8);
                        v615 = *(char **)(v2068 + 4936);
                        v616 = *(char **)(v2068 + 4944);
                        v617 = v615;
                        if (v616 != v615)
                        {
                          v618 = (v616 - v615) >> 4;
                          v617 = *(char **)(v2068 + 4936);
                          do
                          {
                            v619 = v618 >> 1;
                            v620 = (unsigned int *)&v617[16 * (v618 >> 1)];
                            v622 = *v620;
                            v621 = (char *)(v620 + 4);
                            v618 += ~(v618 >> 1);
                            if (v622 < v457)
                              v617 = v621;
                            else
                              v618 = v619;
                          }
                          while (v618);
                        }
                        if (v617 == v616 || *(_DWORD *)v617 != v457)
                          goto LABEL_720;
                        v623 = *((_QWORD *)v617 + 1);
                        *((_QWORD *)&v2160 + 1) = v623;
                        ++*(_DWORD *)(*((_QWORD *)v617 + 1) + 8);
                        if (v607 != v606)
                        {
                          v624 = (v607 - v606) >> 4;
                          v581 = __szc;
                          do
                          {
                            v625 = v624 >> 1;
                            v626 = (unsigned int *)&v606[16 * (v624 >> 1)];
                            v628 = *v626;
                            v627 = (char *)(v626 + 4);
                            v624 += ~(v624 >> 1);
                            if (v628 < __szc)
                              v606 = v627;
                            else
                              v624 = v625;
                          }
                          while (v624);
                        }
                        if (v606 == v607 || *(_DWORD *)v606 != (_DWORD)__szc)
                          goto LABEL_720;
                        v629 = *((_QWORD *)v606 + 1);
                        *(_QWORD *)&v2161 = v629;
                        ++*(_DWORD *)(*((_QWORD *)v606 + 1) + 8);
                        if (v616 != v615)
                        {
                          v630 = (v616 - v615) >> 4;
                          do
                          {
                            v631 = v630 >> 1;
                            v632 = (unsigned int *)&v615[16 * (v630 >> 1)];
                            v634 = *v632;
                            v633 = (char *)(v632 + 4);
                            v630 += ~(v630 >> 1);
                            if (v634 < __szc)
                              v615 = v633;
                            else
                              v630 = v631;
                          }
                          while (v630);
                        }
                        if (v615 == v616
                          || *(_DWORD *)v615 != (_DWORD)__szc
                          || (v635 = *((_QWORD *)v615 + 1),
                              *((_QWORD *)&v2161 + 1) = v635,
                              ++*(_DWORD *)(*((_QWORD *)v615 + 1) + 8),
                              v636 = *(_QWORD *)(v2068 + 5032),
                              *(_QWORD *)(v2068 + 5040) == v636)
                          || *(_DWORD *)v636)
                        {
LABEL_720:
                          if ((_QWORD)v2160)
                            --*(_DWORD *)(v2160 + 8);
                          if (*((_QWORD *)&v2160 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2160 + 1) + 8);
                          if ((_QWORD)v2161)
                            --*(_DWORD *)(v2161 + 8);
                          if (*((_QWORD *)&v2161 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2161 + 1) + 8);
                          v596 = 0;
                          if (v2162)
                            --*(_DWORD *)(v2162 + 8);
                        }
                        else
                        {
                          v839 = *(_QWORD *)(v636 + 8);
                          v2162 = v839;
                          ++*(_DWORD *)(*(_QWORD *)(v636 + 8) + 8);
                          if (*(_BYTE *)(v614 + 20)
                            || *(_BYTE *)(v623 + 20)
                            || *(_BYTE *)(v629 + 20)
                            || *(_BYTE *)(v635 + 20)
                            || *(_BYTE *)(v839 + 20))
                          {
                            *(_OWORD *)&v2183[8] = *(_OWORD *)v2150;
                            *(_QWORD *)v2183 = __szc;
                            *(_QWORD *)&v2183[24] = *(_QWORD *)v2151;
                            v2183[32] = 0;
                            v2183[64] = 0;
                            if (v2151[40])
                            {
                              *(_OWORD *)&v2183[32] = *(_OWORD *)&v2151[8];
                              *(_OWORD *)&v2183[48] = *(_OWORD *)&v2151[24];
                              v2183[64] = 1;
                            }
                            *(_OWORD *)&v2183[72] = *(_OWORD *)&v2151[48];
                            memcpy(&v2183[88], &v2151[64], 0x708uLL);
                            memcpy(&v2183[1888], v2152, 0x708uLL);
                            *(_OWORD *)&v2183[3752] = *(_OWORD *)((char *)&v2152[116] + 8);
                            *(_OWORD *)&v2183[3768] = *(_OWORD *)((char *)&v2152[117] + 8);
                            *(_OWORD *)&v2183[3784] = *(_OWORD *)((char *)&v2152[118] + 8);
                            *(_QWORD *)&v2183[3800] = *((_QWORD *)&v2152[119] + 1);
                            *(_OWORD *)&v2183[3688] = *(_OWORD *)((char *)&v2152[112] + 8);
                            *(_OWORD *)&v2183[3704] = *(_OWORD *)((char *)&v2152[113] + 8);
                            *(_OWORD *)&v2183[3720] = *(_OWORD *)((char *)&v2152[114] + 8);
                            *(_OWORD *)&v2183[3736] = *(_OWORD *)((char *)&v2152[115] + 8);
                            *(_OWORD *)&v2183[3872] = v2152[124];
                            *(_OWORD *)&v2183[3888] = v2152[125];
                            *(_OWORD *)&v2183[3904] = v2152[126];
                            *(_QWORD *)&v2183[3920] = *(_QWORD *)&v2152[127];
                            *(_OWORD *)&v2183[3808] = v2152[120];
                            *(_OWORD *)&v2183[3824] = v2152[121];
                            *(_OWORD *)&v2183[3840] = v2152[122];
                            *(_OWORD *)&v2183[3856] = v2152[123];
                            v2183[3928] = 0;
                            v2197 = 0;
                            if (v2158)
                            {
                              memcpy(&v2183[3928], (char *)&v2152[127] + 8, 0x708uLL);
                              v2188 = v2152[244];
                              v2189 = v2152[245];
                              v2190 = v2152[246];
                              v2191 = v2153;
                              v2184 = v2152[240];
                              v2185 = v2152[241];
                              v2186 = v2152[242];
                              v2187 = v2152[243];
                              v1990.i8[0] = v2154;
                              v2192 = v2154;
                              v1988.i8[0] = v2155;
                              v2194 = v2155;
                              v2193 = &off_24CA00398;
                              memcpy(v2195, v2156, sizeof(v2195));
                              v1986.i64[0] = v2157;
                              v2196 = v2157;
                              v2197 = 1;
                            }
                            v2198 = v2159;
                            v2199 = v2160;
                            v2200 = v2161;
                            v2201 = v2162;
                            v2206 = v2167;
                            v2207 = v2168;
                            v2208 = v2169;
                            v2209 = v2170;
                            v2202 = v2163;
                            v2203 = v2164;
                            v2204 = v2165;
                            v2205 = v2166;
                            v2217 = v2178;
                            v2215 = v2176;
                            v2216 = v2177;
                            v2213 = v2174;
                            v2214 = v2175;
                            v2211 = v2172;
                            v2212 = v2173;
                            v2210 = v2171;
                            v2219 = v2180;
                            v2218 = v2179;
                            v840 = v2181;
                            v2220 = v2181;
                            v841 = (std::__shared_weak_count *)*((_QWORD *)&v2181 + 1);
                            v2181 = 0uLL;
                            v2221 = v2182;
                            v842 = *(char **)(v2068 + 5664);
                            if (v842 == v590 || *(void **)v590 != __szc)
                            {
                              v843 = *(char **)(v2068 + 5656);
                              v844 = v590 - v843;
                              v1921 = v843;
                              v1918 = (v590 - v843) / 8016;
                              v845 = *(_QWORD *)(v2068 + 5672);
                              categoryc = &v843[8016 * v1918];
                              if ((unint64_t)v842 >= v845)
                              {
                                v899 = 0x2F028E0D4911E25DLL * ((v842 - v843) >> 4) + 1;
                                if (v899 > 0x82CF750393AC3)
                                  sub_20E867F44();
                                v900 = 0x2F028E0D4911E25DLL * ((uint64_t)(v845 - (_QWORD)v843) >> 4);
                                if (2 * v900 > v899)
                                  v899 = 2 * v900;
                                if (v900 >= 0x4167BA81C9D61)
                                  v901 = 0x82CF750393AC3;
                                else
                                  v901 = v899;
                                *(_QWORD *)&object[32] = v2068 + 5672;
                                if (v901)
                                {
                                  if (v901 > 0x82CF750393AC3)
                                    sub_20E877A38();
                                  v902 = (char *)operator new(8016 * v901);
                                }
                                else
                                {
                                  v902 = 0;
                                }
                                *(_QWORD *)object = v902;
                                *(_QWORD *)&object[8] = &v902[8016 * v1918];
                                v2014 = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[24] = &v902[8016 * v901];
                                if (v1918 == v901)
                                {
                                  if (v844 < 1)
                                  {
                                    if (v1921 == v590)
                                      v956 = 1;
                                    else
                                      v956 = 2 * v1918;
                                    if (v956 > 0x82CF750393AC3)
                                      sub_20E877A38();
                                    *(_QWORD *)object = operator new(8016 * v956);
                                    *(_QWORD *)&object[8] = *(_QWORD *)object + 8016 * (v956 >> 2);
                                    v2014 = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[24] = *(_QWORD *)object + 8016 * v956;
                                    if (v902)
                                      operator delete(v902);
                                  }
                                  else
                                  {
                                    v943 = v1918 + 2;
                                    if (v1918 >= -1)
                                      v943 = v1918 + 1;
                                    v2014 = *(_QWORD *)&object[8] - 8016 * (v943 >> 1);
                                    *(_QWORD *)&object[16] = v2014;
                                    *(_QWORD *)&object[8] = v2014;
                                  }
                                }
                                *(_QWORD *)v2014 = __szc;
                                *(_OWORD *)(v2014 + 8) = *(_OWORD *)v2150;
                                *(_QWORD *)(v2014 + 24) = *(_QWORD *)&v2183[24];
                                *(_BYTE *)(v2014 + 32) = 0;
                                *(_BYTE *)(v2014 + 64) = 0;
                                if (v2183[64])
                                {
                                  v957 = *(_OWORD *)&v2183[48];
                                  *(_OWORD *)(v2014 + 32) = *(_OWORD *)&v2183[32];
                                  *(_OWORD *)(v2014 + 48) = v957;
                                  *(_BYTE *)(v2014 + 64) = 1;
                                }
                                *(_OWORD *)(v2014 + 72) = *(_OWORD *)&v2183[72];
                                memcpy((void *)(v2014 + 88), &v2183[88], 0x708uLL);
                                memcpy((void *)(v2014 + 1888), &v2183[1888], 0x708uLL);
                                v958 = *(_OWORD *)&v2183[3720];
                                *(_OWORD *)(v2014 + 3736) = *(_OWORD *)&v2183[3736];
                                *(_OWORD *)(v2014 + 3720) = v958;
                                v959 = *(_OWORD *)&v2183[3688];
                                *(_OWORD *)(v2014 + 3704) = *(_OWORD *)&v2183[3704];
                                *(_OWORD *)(v2014 + 3688) = v959;
                                *(_QWORD *)(v2014 + 3800) = *(_QWORD *)&v2183[3800];
                                *(_OWORD *)(v2014 + 3784) = *(_OWORD *)&v2183[3784];
                                v960 = *(_OWORD *)&v2183[3752];
                                *(_OWORD *)(v2014 + 3768) = *(_OWORD *)&v2183[3768];
                                *(_OWORD *)(v2014 + 3752) = v960;
                                v961 = *(_OWORD *)&v2183[3824];
                                *(_OWORD *)(v2014 + 3808) = *(_OWORD *)&v2183[3808];
                                *(_OWORD *)(v2014 + 3824) = v961;
                                v962 = *(_OWORD *)&v2183[3856];
                                *(_OWORD *)(v2014 + 3840) = *(_OWORD *)&v2183[3840];
                                *(_OWORD *)(v2014 + 3856) = v962;
                                *(_OWORD *)(v2014 + 3904) = *(_OWORD *)&v2183[3904];
                                v963 = *(_OWORD *)&v2183[3872];
                                *(_OWORD *)(v2014 + 3888) = *(_OWORD *)&v2183[3888];
                                *(_QWORD *)(v2014 + 3920) = *(_QWORD *)&v2183[3920];
                                *(_OWORD *)(v2014 + 3872) = v963;
                                *(_BYTE *)(v2014 + 3928) = 0;
                                *(_BYTE *)(v2014 + 7680) = 0;
                                if (v2197)
                                {
                                  memcpy((void *)(v2014 + 3928), &v2183[3928], 0x708uLL);
                                  v964 = v2189;
                                  *(_OWORD *)(v2014 + 5792) = v2188;
                                  *(_OWORD *)(v2014 + 5808) = v964;
                                  *(_OWORD *)(v2014 + 5824) = v2190;
                                  v965 = v2185;
                                  *(_OWORD *)(v2014 + 5728) = v2184;
                                  *(_OWORD *)(v2014 + 5744) = v965;
                                  v966 = v2187;
                                  *(_OWORD *)(v2014 + 5760) = v2186;
                                  *(_QWORD *)(v2014 + 5840) = v2191;
                                  *(_OWORD *)(v2014 + 5776) = v966;
                                  *(_BYTE *)(v2014 + 5848) = v2192;
                                  *(_BYTE *)(v2014 + 5864) = v2194;
                                  *(_QWORD *)(v2014 + 5856) = &off_24CA00398;
                                  memcpy((void *)(v2014 + 5872), v2195, 0x708uLL);
                                  *(_QWORD *)(v2014 + 7672) = v2196;
                                  *(_BYTE *)(v2014 + 7680) = 1;
                                }
                                *(_WORD *)(v2014 + 7688) = v2198;
                                v967 = v2200;
                                *(_OWORD *)(v2014 + 7696) = v2199;
                                *(_OWORD *)(v2014 + 7712) = v967;
                                *(_QWORD *)(v2014 + 7728) = v2201;
                                v968 = v2203;
                                *(_OWORD *)(v2014 + 7736) = v2202;
                                *(_OWORD *)(v2014 + 7752) = v968;
                                v969 = v2205;
                                *(_OWORD *)(v2014 + 7768) = v2204;
                                *(_OWORD *)(v2014 + 7784) = v969;
                                *(_QWORD *)(v2014 + 7848) = v2209;
                                *(_OWORD *)(v2014 + 7832) = v2208;
                                v970 = v2206;
                                *(_OWORD *)(v2014 + 7816) = v2207;
                                *(_OWORD *)(v2014 + 7800) = v970;
                                v971 = v2210;
                                v972 = v2211;
                                v973 = v2212;
                                *(_OWORD *)(v2014 + 7904) = v2213;
                                *(_OWORD *)(v2014 + 7888) = v973;
                                *(_OWORD *)(v2014 + 7872) = v972;
                                *(_OWORD *)(v2014 + 7856) = v971;
                                v974 = v2214;
                                v975 = v2215;
                                v976 = v2216;
                                *(_QWORD *)(v2014 + 7968) = v2217;
                                *(_OWORD *)(v2014 + 7952) = v976;
                                *(_OWORD *)(v2014 + 7936) = v975;
                                *(_OWORD *)(v2014 + 7920) = v974;
                                v977 = v2218;
                                *(_BYTE *)(v2014 + 7984) = v2219;
                                *(_QWORD *)(v2014 + 7976) = v977;
                                *(_OWORD *)(v2014 + 7992) = v2220;
                                v2220 = 0uLL;
                                *(_BYTE *)(v2014 + 8008) = v2221;
                                v978 = v2014 + 8016;
                                *(_QWORD *)&object[16] = v2014 + 8016;
                                v1990.i64[0] = *(_QWORD *)(v2068 + 5656);
                                if ((char *)v1990.i64[0] != categoryc)
                                {
                                  v979 = 0;
                                  v980 = &v1921[8016 * v1918];
                                  v981 = v980 - 8016;
                                  v1988.i64[0] = (uint64_t)(v980 - 7952);
                                  v982 = v980 - 24048;
                                  __szd = v2014 - 8016;
                                  v1986.i64[0] = v2014 - 4208;
                                  v983 = v2014 - 7952;
                                  v1927 = v2014 - 7984;
                                  v984 = categoryc;
                                  do
                                  {
                                    _X22 = &v982[v979];
                                    __asm { PRFM            #0, [X22] }
                                    *(_QWORD *)(__szd + v979) = *(_QWORD *)&v981[v979];
                                    *(_OWORD *)(v2014 - 8008 + v979) = *(_OWORD *)&v982[v979 + 16040];
                                    *(_QWORD *)(v2014 - 7992 + v979) = *(_QWORD *)&v982[v979 + 16056];
                                    v1006 = (_OWORD *)(v1927 + v979);
                                    *(_BYTE *)(v1927 + v979) = 0;
                                    *(_BYTE *)(v983 + v979) = 0;
                                    __asm { PRFM            #0, [X22,#0x40] }
                                    if (*(_BYTE *)(v1988.i64[0] + v979))
                                    {
                                      v1008 = *((_OWORD *)_X22 + 1005);
                                      *v1006 = *((_OWORD *)_X22 + 1004);
                                      v1006[1] = v1008;
                                      *(_BYTE *)(v983 + v979) = 1;
                                    }
                                    _X21 = _X22 + 7680;
                                    *(_OWORD *)(v2014 - 7944 + v979) = *(_OWORD *)(_X22 + 16104);
                                    memcpy((void *)(v2014 - 7928 + v979), _X22 + 16120, 0x708uLL);
                                    memcpy((void *)(v2014 - 6128 + v979), _X22 + 17920, 0x708uLL);
                                    v1010 = v1986.i64[0] + v979;
                                    v1011 = *(_OWORD *)(_X22 + 19720);
                                    v1012 = *(_OWORD *)(_X22 + 19736);
                                    v1013 = *(_OWORD *)(_X22 + 19752);
                                    *(_OWORD *)(v1010 - 72) = *(_OWORD *)(_X22 + 19768);
                                    *(_OWORD *)(v1010 - 88) = v1013;
                                    *(_OWORD *)(v1010 - 104) = v1012;
                                    *(_OWORD *)(v1010 - 120) = v1011;
                                    v1014 = *(_OWORD *)(_X22 + 19784);
                                    v1015 = *(_OWORD *)(_X22 + 19800);
                                    v1016 = *(_OWORD *)(_X22 + 19816);
                                    *(_QWORD *)(v1010 - 8) = *((_QWORD *)_X22 + 2479);
                                    *(_OWORD *)(v1010 - 24) = v1016;
                                    *(_OWORD *)(v1010 - 40) = v1015;
                                    *(_OWORD *)(v1010 - 56) = v1014;
                                    v1017 = *((_QWORD *)_X22 + 2494);
                                    v1018 = *((_OWORD *)_X22 + 1244);
                                    v1019 = *((_OWORD *)_X22 + 1246);
                                    *(_OWORD *)(v1010 + 80) = *((_OWORD *)_X22 + 1245);
                                    *(_OWORD *)(v1010 + 96) = v1019;
                                    *(_OWORD *)(v1010 + 64) = v1018;
                                    *(_QWORD *)(v1010 + 112) = v1017;
                                    v1020 = *((_OWORD *)_X22 + 1240);
                                    v1021 = *((_OWORD *)_X22 + 1241);
                                    v1022 = *((_OWORD *)_X22 + 1243);
                                    *(_OWORD *)(v1010 + 32) = *((_OWORD *)_X22 + 1242);
                                    *(_OWORD *)(v1010 + 48) = v1022;
                                    *(_OWORD *)v1010 = v1020;
                                    *(_OWORD *)(v1010 + 16) = v1021;
                                    v1023 = v2014 + v979;
                                    *(_BYTE *)(v1023 - 4088) = 0;
                                    *(_BYTE *)(v1023 - 336) = 0;
                                    v1024 = &v984[v979];
                                    __asm { PRFM            #0, [X21] }
                                    if (v984[v979 - 336])
                                    {
                                      _X21 = _X22 + 5848;
                                      memcpy((void *)(v1023 - 4088), &v982[v979 + 19960], 0x708uLL);
                                      v1027 = v1023 - 2288;
                                      v1028 = *(_OWORD *)&v982[v979 + 21776];
                                      v1029 = *(_OWORD *)&v982[v979 + 21808];
                                      v1030 = *(_OWORD *)&v982[v979 + 21760];
                                      *(_OWORD *)(v1027 + 32) = *(_OWORD *)&v982[v979 + 21792];
                                      *(_OWORD *)(v1027 + 48) = v1029;
                                      *(_OWORD *)v1027 = v1030;
                                      *(_OWORD *)(v1027 + 16) = v1028;
                                      v1031 = *(_OWORD *)&v982[v979 + 21840];
                                      v1032 = *(_OWORD *)&v982[v979 + 21856];
                                      v1033 = *(_OWORD *)&v982[v979 + 21824];
                                      *(_QWORD *)(v1027 + 112) = *(_QWORD *)&v982[v979 + 21872];
                                      *(_OWORD *)(v1027 + 80) = v1031;
                                      *(_OWORD *)(v1027 + 96) = v1032;
                                      *(_OWORD *)(v1027 + 64) = v1033;
                                      __asm { PRFM            #0, [X21] }
                                      *(_BYTE *)(v1023 - 2168) = *(v1024 - 2168);
                                      *(_BYTE *)(v1023 - 2152) = *(v1024 - 2152);
                                      *(_QWORD *)(v1023 - 2160) = &off_24CA00398;
                                      v984 = categoryc;
                                      memcpy((void *)(v1023 - 2144), &v982[v979 + 21904], 0x708uLL);
                                      *(_QWORD *)(__szd + v979 + 7672) = *(_QWORD *)&v981[v979 + 7672];
                                      *(_BYTE *)(v1023 - 336) = 1;
                                    }
                                    _X8 = _X22 + 7992;
                                    *(_WORD *)(v1023 - 328) = *((_WORD *)v1024 - 164);
                                    v986 = v1023 - 320;
                                    v987 = *(_OWORD *)&v982[v979 + 23728];
                                    v988 = *(_OWORD *)&v982[v979 + 23744];
                                    *(_QWORD *)(v986 + 32) = *(_QWORD *)&v982[v979 + 23760];
                                    *(_OWORD *)v986 = v987;
                                    *(_OWORD *)(v986 + 16) = v988;
                                    v989 = (_OWORD *)(v1023 - 280);
                                    v991 = *(_OWORD *)&v982[v979 + 23848];
                                    v990 = *(_OWORD *)&v982[v979 + 23864];
                                    v992 = *(_QWORD *)&v982[v979 + 23880];
                                    *(_OWORD *)(v1023 - 216) = *(_OWORD *)&v982[v979 + 23832];
                                    *(_QWORD *)(v1023 - 168) = v992;
                                    *(_OWORD *)(v1023 - 184) = v990;
                                    *(_OWORD *)(v1023 - 200) = v991;
                                    v993 = *(_OWORD *)&v982[v979 + 23768];
                                    v994 = *(_OWORD *)&v982[v979 + 23784];
                                    v995 = *(_OWORD *)&v982[v979 + 23800];
                                    *(_OWORD *)(v1023 - 232) = *(_OWORD *)&v982[v979 + 23816];
                                    *(_OWORD *)(v1023 - 248) = v995;
                                    *v989 = v993;
                                    v989[1] = v994;
                                    v996 = *(_OWORD *)&v982[v979 + 23968];
                                    v997 = *(_OWORD *)&v982[v979 + 23984];
                                    v998 = *(_OWORD *)&v982[v979 + 23952];
                                    *(_QWORD *)(v1023 - 48) = *(_QWORD *)&v982[v979 + 24000];
                                    *(_OWORD *)(v1023 - 80) = v996;
                                    *(_OWORD *)(v1023 - 64) = v997;
                                    *(_OWORD *)(v1023 - 96) = v998;
                                    v999 = *(_OWORD *)&v982[v979 + 23888];
                                    v1000 = *(_OWORD *)&v982[v979 + 23904];
                                    v1001 = *(_OWORD *)&v982[v979 + 23936];
                                    *(_OWORD *)(v1023 - 128) = *(_OWORD *)&v982[v979 + 23920];
                                    *(_OWORD *)(v1023 - 112) = v1001;
                                    *(_OWORD *)(v1023 - 160) = v999;
                                    *(_OWORD *)(v1023 - 144) = v1000;
                                    v1002 = *(_QWORD *)&v982[v979 + 24008];
                                    *(_BYTE *)(v1023 - 32) = v982[v979 + 24016];
                                    *(_QWORD *)(v1023 - 40) = v1002;
                                    __asm { PRFM            #0, [X8] }
                                    *(_OWORD *)(v1023 - 24) = *(_OWORD *)(v1024 - 24);
                                    *((_QWORD *)v1024 - 3) = 0;
                                    *((_QWORD *)v1024 - 2) = 0;
                                    *(_BYTE *)(v1023 - 8) = *(v1024 - 8);
                                    v979 -= 8016;
                                    v983 = v2014 - 7952;
                                  }
                                  while (&v984[v979] != (char *)v1990.i64[0]);
                                  v978 = *(_QWORD *)&object[16];
                                  v2014 += v979;
                                }
                                __sze = *(char **)(v2068 + 5664);
                                if (__sze != categoryc)
                                {
                                  v1035 = 0;
                                  v1036 = &v1921[8016 * v1918];
                                  v1990.i64[0] = (uint64_t)(v1036 + 8008);
                                  v1986.i64[0] = (uint64_t)(v1036 + 5864);
                                  v1985 = v1036 + 5848;
                                  v1988.i64[0] = (uint64_t)(v1036 + 7680);
                                  v1037 = v978 + 7680;
                                  do
                                  {
                                    v1057 = v978 + v1035;
                                    _X19 = &categoryc[v1035];
                                    __asm { PRFM            #0, [X19,#0x3EA0] }
                                    *(_QWORD *)v1057 = *(_QWORD *)&categoryc[v1035];
                                    *(_OWORD *)(v1057 + 8) = *(_OWORD *)&categoryc[v1035 + 8];
                                    *(_QWORD *)(v1057 + 24) = *(_QWORD *)&categoryc[v1035 + 24];
                                    *(_BYTE *)(v978 + v1035 + 32) = 0;
                                    *(_BYTE *)(v1057 + 64) = 0;
                                    __asm { PRFM            #0, [X19,#0x3EE0] }
                                    if (categoryc[v1035 + 64])
                                    {
                                      v1061 = *((_OWORD *)_X19 + 3);
                                      *(_OWORD *)(v978 + v1035 + 32) = *((_OWORD *)_X19 + 2);
                                      *(_OWORD *)(v978 + v1035 + 48) = v1061;
                                      *(_BYTE *)(v1057 + 64) = 1;
                                    }
                                    _X22 = _X19 + 23712;
                                    *(_OWORD *)(v1057 + 72) = *(_OWORD *)(_X19 + 72);
                                    memcpy((void *)(v1057 + 88), _X19 + 88, 0x708uLL);
                                    memcpy((void *)(v1057 + 1888), _X19 + 1888, 0x708uLL);
                                    v1063 = *(_OWORD *)(_X19 + 3688);
                                    v1064 = *(_OWORD *)(_X19 + 3704);
                                    v1065 = *(_OWORD *)(_X19 + 3736);
                                    *(_OWORD *)(v1057 + 3720) = *(_OWORD *)(_X19 + 3720);
                                    *(_OWORD *)(v1057 + 3736) = v1065;
                                    *(_OWORD *)(v1057 + 3688) = v1063;
                                    *(_OWORD *)(v1057 + 3704) = v1064;
                                    v1066 = *(_OWORD *)(_X19 + 3752);
                                    v1067 = *(_OWORD *)(_X19 + 3768);
                                    v1068 = *(_OWORD *)(_X19 + 3784);
                                    *(_QWORD *)(v1057 + 3800) = *((_QWORD *)_X19 + 475);
                                    *(_OWORD *)(v1057 + 3768) = v1067;
                                    *(_OWORD *)(v1057 + 3784) = v1068;
                                    *(_OWORD *)(v1057 + 3752) = v1066;
                                    v1069 = *((_QWORD *)_X19 + 490);
                                    v1070 = *((_OWORD *)_X19 + 242);
                                    v1071 = *((_OWORD *)_X19 + 243);
                                    *(_OWORD *)(v1057 + 3904) = *((_OWORD *)_X19 + 244);
                                    *(_OWORD *)(v1057 + 3888) = v1071;
                                    *(_OWORD *)(v1057 + 3872) = v1070;
                                    *(_QWORD *)(v1057 + 3920) = v1069;
                                    v1072 = *((_OWORD *)_X19 + 238);
                                    v1073 = *((_OWORD *)_X19 + 239);
                                    v1074 = *((_OWORD *)_X19 + 240);
                                    *(_OWORD *)(v1057 + 3856) = *((_OWORD *)_X19 + 241);
                                    *(_OWORD *)(v1057 + 3840) = v1074;
                                    *(_OWORD *)(v1057 + 3824) = v1073;
                                    *(_OWORD *)(v1057 + 3808) = v1072;
                                    *(_BYTE *)(v1057 + 3928) = 0;
                                    *(_BYTE *)(v1037 + v1035) = 0;
                                    __asm { PRFM            #0, [X22] }
                                    if (*(_BYTE *)(v1988.i64[0] + v1035))
                                    {
                                      _X22 = _X19 + 21880;
                                      memcpy((void *)(v1057 + 3928), &categoryc[v1035 + 3928], 0x708uLL);
                                      v1077 = v978 + v1035;
                                      v1078 = *(_OWORD *)&categoryc[v1035 + 5744];
                                      v1079 = *(_OWORD *)&categoryc[v1035 + 5760];
                                      v1080 = *(_OWORD *)&categoryc[v1035 + 5776];
                                      *(_OWORD *)(v1077 + 5728) = *(_OWORD *)&categoryc[v1035 + 5728];
                                      *(_OWORD *)(v1077 + 5776) = v1080;
                                      *(_OWORD *)(v1077 + 5760) = v1079;
                                      *(_OWORD *)(v1077 + 5744) = v1078;
                                      v1081 = *(_OWORD *)&categoryc[v1035 + 5808];
                                      v1082 = *(_OWORD *)&categoryc[v1035 + 5824];
                                      v1083 = *(_QWORD *)&categoryc[v1035 + 5840];
                                      *(_OWORD *)(v1077 + 5792) = *(_OWORD *)&categoryc[v1035 + 5792];
                                      *(_QWORD *)(v1077 + 5840) = v1083;
                                      *(_OWORD *)(v1077 + 5824) = v1082;
                                      *(_OWORD *)(v1077 + 5808) = v1081;
                                      __asm { PRFM            #0, [X22] }
                                      *(_BYTE *)(v978 + 5848 + v1035) = v1985[v1035 / 8];
                                      *(_BYTE *)(v978 + 5864 + v1035) = *(_BYTE *)(v1986.i64[0] + v1035);
                                      *(_QWORD *)(v1077 + 5856) = &off_24CA00398;
                                      memcpy((void *)(v978 + v1035 + 5872), &categoryc[v1035 + 5872], 0x708uLL);
                                      *(_QWORD *)(v1077 + 7672) = *(_QWORD *)&categoryc[v1035 + 7672];
                                      *(_BYTE *)(v1037 + v1035) = 1;
                                    }
                                    _X8 = _X19 + 24024;
                                    v1039 = v978 + v1035;
                                    *(_WORD *)(v1039 + 7688) = *(_WORD *)&categoryc[v1035 + 7688];
                                    v1040 = *(_OWORD *)&categoryc[v1035 + 7696];
                                    v1041 = *(_OWORD *)&categoryc[v1035 + 7712];
                                    *(_QWORD *)(v1039 + 7728) = *(_QWORD *)&categoryc[v1035 + 7728];
                                    *(_OWORD *)(v1039 + 7712) = v1041;
                                    *(_OWORD *)(v1039 + 7696) = v1040;
                                    v1042 = (_OWORD *)(v978 + v1035 + 7736);
                                    v1044 = *(_OWORD *)&categoryc[v1035 + 7816];
                                    v1043 = *(_OWORD *)&categoryc[v1035 + 7832];
                                    v1045 = *(_OWORD *)&categoryc[v1035 + 7800];
                                    *(_QWORD *)(v1039 + 7848) = *(_QWORD *)&categoryc[v1035 + 7848];
                                    v1042[5] = v1044;
                                    v1042[6] = v1043;
                                    v1042[4] = v1045;
                                    v1046 = *(_OWORD *)&categoryc[v1035 + 7736];
                                    v1047 = *(_OWORD *)&categoryc[v1035 + 7752];
                                    v1048 = *(_OWORD *)&categoryc[v1035 + 7784];
                                    v1042[2] = *(_OWORD *)&categoryc[v1035 + 7768];
                                    v1042[3] = v1048;
                                    *v1042 = v1046;
                                    v1042[1] = v1047;
                                    v1049 = *(_OWORD *)&categoryc[v1035 + 7936];
                                    v1050 = *(_OWORD *)&categoryc[v1035 + 7952];
                                    v1051 = *(_QWORD *)&categoryc[v1035 + 7968];
                                    *(_OWORD *)(v1039 + 7920) = *(_OWORD *)&categoryc[v1035 + 7920];
                                    *(_QWORD *)(v1039 + 7968) = v1051;
                                    *(_OWORD *)(v1039 + 7952) = v1050;
                                    *(_OWORD *)(v1039 + 7936) = v1049;
                                    v1052 = *(_OWORD *)&categoryc[v1035 + 7856];
                                    v1053 = *(_OWORD *)&categoryc[v1035 + 7872];
                                    v1054 = *(_OWORD *)&categoryc[v1035 + 7888];
                                    *(_OWORD *)(v1039 + 7904) = *(_OWORD *)&categoryc[v1035 + 7904];
                                    *(_OWORD *)(v1039 + 7888) = v1054;
                                    *(_OWORD *)(v1039 + 7872) = v1053;
                                    *(_OWORD *)(v1039 + 7856) = v1052;
                                    v1055 = *(_QWORD *)&categoryc[v1035 + 7976];
                                    *(_BYTE *)(v978 + v1035 + 7984) = categoryc[v1035 + 7984];
                                    *(_QWORD *)(v1039 + 7976) = v1055;
                                    __asm { PRFM            #0, [X8] }
                                    *(_QWORD *)(v1039 + 7992) = *(_QWORD *)&categoryc[v1035 + 7992];
                                    *(_QWORD *)(v1039 + 8000) = *(_QWORD *)&categoryc[v1035 + 8000];
                                    *(_OWORD *)&categoryc[v1035 + 7992] = 0u;
                                    *(_BYTE *)(v978 + 8008 + v1035) = *(_BYTE *)(v1990.i64[0] + v1035);
                                    v1035 += 8016;
                                  }
                                  while (&categoryc[v1035] != __sze);
                                  categoryc = *(char **)(v2068 + 5664);
                                  v978 += v1035;
                                }
                                v1085 = *(char **)(v2068 + 5656);
                                *(_QWORD *)(v2068 + 5656) = v2014;
                                *(_QWORD *)(v2068 + 5664) = v978;
                                v1086 = *(_QWORD *)(v2068 + 5672);
                                *(_QWORD *)(v2068 + 5672) = *(_QWORD *)&object[24];
                                *(_QWORD *)&object[24] = v1086;
                                *(_QWORD *)&object[8] = v1085;
                                *(_QWORD *)object = v1085;
                                if (categoryc != v1085)
                                {
                                  v1087 = categoryc;
                                  do
                                  {
                                    *(_QWORD *)&object[16] = v1087 - 8016;
                                    v1088 = (std::__shared_weak_count *)*((_QWORD *)v1087 - 2);
                                    if (v1088)
                                    {
                                      v1089 = (unint64_t *)&v1088->__shared_owners_;
                                      do
                                        v1090 = __ldaxr(v1089);
                                      while (__stlxr(v1090 - 1, v1089));
                                      if (!v1090)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v1088->__on_zero_shared)(v1088);
                                        std::__shared_weak_count::__release_weak(v1088);
                                      }
                                    }
                                    v1087 = *(char **)&object[16];
                                  }
                                  while (*(char **)&object[16] != v1085);
                                  categoryc = *(char **)object;
                                }
                                if (categoryc)
                                  operator delete(categoryc);
                              }
                              else
                              {
                                v846 = *(_QWORD *)(v2068 + 5664);
                                v1975 = (char *)v846;
                                if (&v843[8016 * v1918] == v842)
                                {
                                  *(_QWORD *)v842 = __szc;
                                  v903 = &v843[8016 * v1918];
                                  *(_OWORD *)(v903 + 8) = *(_OWORD *)&v2183[8];
                                  v904 = *(_QWORD *)&v2183[24];
                                  v903[32] = 0;
                                  v905 = v903 + 32;
                                  *(v905 - 1) = v904;
                                  *((_BYTE *)v905 + 32) = 0;
                                  if (v2183[64])
                                  {
                                    v906 = *(_OWORD *)&v2183[48];
                                    *(_OWORD *)v905 = *(_OWORD *)&v2183[32];
                                    *((_OWORD *)v905 + 1) = v906;
                                    *((_BYTE *)v905 + 32) = 1;
                                  }
                                  v907 = &v843[8016 * v1918];
                                  *(_OWORD *)(v907 + 72) = *(_OWORD *)&v2183[72];
                                  memcpy(v907 + 88, &v2183[88], 0x708uLL);
                                  memcpy(v907 + 1888, &v2183[1888], 0x708uLL);
                                  v908 = *(_OWORD *)&v2183[3688];
                                  v909 = *(_OWORD *)&v2183[3704];
                                  v910 = *(_OWORD *)&v2183[3720];
                                  *(_OWORD *)(v907 + 3736) = *(_OWORD *)&v2183[3736];
                                  *(_OWORD *)(v907 + 3720) = v910;
                                  *(_OWORD *)(v907 + 3704) = v909;
                                  *(_OWORD *)(v907 + 3688) = v908;
                                  v911 = *(_OWORD *)&v2183[3752];
                                  v912 = *(_OWORD *)&v2183[3768];
                                  v913 = *(_OWORD *)&v2183[3784];
                                  *((_QWORD *)v907 + 475) = *(_QWORD *)&v2183[3800];
                                  *(_OWORD *)(v907 + 3784) = v913;
                                  *(_OWORD *)(v907 + 3768) = v912;
                                  *(_OWORD *)(v907 + 3752) = v911;
                                  v914 = *(_QWORD *)&v2183[3920];
                                  v915 = *(_OWORD *)&v2183[3872];
                                  v916 = *(_OWORD *)&v2183[3888];
                                  *((_OWORD *)v907 + 244) = *(_OWORD *)&v2183[3904];
                                  *((_OWORD *)v907 + 243) = v916;
                                  *((_OWORD *)v907 + 242) = v915;
                                  *((_QWORD *)v907 + 490) = v914;
                                  v917 = *(_OWORD *)&v2183[3808];
                                  v918 = *(_OWORD *)&v2183[3824];
                                  v919 = *(_OWORD *)&v2183[3840];
                                  *((_OWORD *)v907 + 241) = *(_OWORD *)&v2183[3856];
                                  *((_OWORD *)v907 + 240) = v919;
                                  *((_OWORD *)v907 + 239) = v918;
                                  *((_OWORD *)v907 + 238) = v917;
                                  v907[3928] = 0;
                                  v907[7680] = 0;
                                  if (v2197)
                                  {
                                    memcpy(v907 + 3928, &v2183[3928], 0x708uLL);
                                    v920 = &v1921[8016 * v1918];
                                    v921 = v2184;
                                    v922 = v2185;
                                    v923 = v2186;
                                    *((_OWORD *)v920 + 361) = v2187;
                                    *((_OWORD *)v920 + 360) = v923;
                                    *((_OWORD *)v920 + 359) = v922;
                                    *((_OWORD *)v920 + 358) = v921;
                                    v924 = v2188;
                                    v925 = v2189;
                                    v926 = v2190;
                                    *((_QWORD *)v920 + 730) = v2191;
                                    *((_OWORD *)v920 + 364) = v926;
                                    *((_OWORD *)v920 + 363) = v925;
                                    *((_OWORD *)v920 + 362) = v924;
                                    v920[5848] = v2192;
                                    v920[5864] = v2194;
                                    *((_QWORD *)v920 + 732) = &off_24CA00398;
                                    memcpy(v920 + 5872, v2195, 0x708uLL);
                                    *((_QWORD *)v920 + 959) = v2196;
                                    v907[7680] = 1;
                                  }
                                  v927 = &v1921[8016 * v1918];
                                  *((_WORD *)v927 + 3844) = v2198;
                                  v928 = v2199;
                                  v929 = v2200;
                                  *((_QWORD *)v927 + 966) = v2201;
                                  *((_OWORD *)v927 + 482) = v929;
                                  *((_OWORD *)v927 + 481) = v928;
                                  v931 = v2207;
                                  v930 = v2208;
                                  v932 = v2209;
                                  *(_OWORD *)(v927 + 7800) = v2206;
                                  *((_QWORD *)v927 + 981) = v932;
                                  *(_OWORD *)(v927 + 7832) = v930;
                                  *(_OWORD *)(v927 + 7816) = v931;
                                  v933 = v2202;
                                  v934 = v2203;
                                  v935 = v2204;
                                  *(_OWORD *)(v927 + 7784) = v2205;
                                  *(_OWORD *)(v927 + 7768) = v935;
                                  *(_OWORD *)(v927 + 7752) = v934;
                                  *(_OWORD *)(v927 + 7736) = v933;
                                  v937 = v2215;
                                  v936 = v2216;
                                  v938 = v2217;
                                  *((_OWORD *)v927 + 495) = v2214;
                                  *((_QWORD *)v927 + 996) = v938;
                                  *((_OWORD *)v927 + 497) = v936;
                                  *((_OWORD *)v927 + 496) = v937;
                                  v939 = v2210;
                                  v940 = v2211;
                                  v941 = v2212;
                                  *((_OWORD *)v927 + 494) = v2213;
                                  *((_OWORD *)v927 + 493) = v941;
                                  *((_OWORD *)v927 + 492) = v940;
                                  *((_OWORD *)v927 + 491) = v939;
                                  v942 = v2218;
                                  v927[7984] = v2219;
                                  *((_QWORD *)v927 + 997) = v942;
                                  *(_OWORD *)(v927 + 7992) = v2220;
                                  v2220 = 0uLL;
                                  v927[8008] = v2221;
                                  *(_QWORD *)(v2068 + 5664) = v846 + 8016;
                                }
                                else
                                {
                                  v2256 = v2068 + 5672;
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2150;
                                  *(_QWORD *)object = __szc;
                                  *(_QWORD *)&object[24] = *(_QWORD *)v2151;
                                  object[32] = 0;
                                  object[64] = 0;
                                  if (v2151[40])
                                  {
                                    *(_OWORD *)&object[32] = *(_OWORD *)&v2183[32];
                                    *(_OWORD *)&object[48] = *(_OWORD *)&v2183[48];
                                    object[64] = 1;
                                  }
                                  *(_OWORD *)&object[72] = *(_OWORD *)&v2151[48];
                                  memcpy(&object[88], &v2151[64], 0x708uLL);
                                  memcpy(v2223, v2152, 0x708uLL);
                                  *(_OWORD *)((char *)&v2223[116] + 8) = *(_OWORD *)((char *)&v2152[116] + 8);
                                  *(_OWORD *)((char *)&v2223[117] + 8) = *(_OWORD *)((char *)&v2152[117] + 8);
                                  *(_OWORD *)((char *)&v2223[118] + 8) = *(_OWORD *)((char *)&v2152[118] + 8);
                                  *((_QWORD *)&v2223[119] + 1) = *((_QWORD *)&v2152[119] + 1);
                                  *(_OWORD *)((char *)&v2223[112] + 8) = *(_OWORD *)((char *)&v2152[112] + 8);
                                  *(_OWORD *)((char *)&v2223[113] + 8) = *(_OWORD *)((char *)&v2152[113] + 8);
                                  *(_OWORD *)((char *)&v2223[114] + 8) = *(_OWORD *)((char *)&v2152[114] + 8);
                                  *(_OWORD *)((char *)&v2223[115] + 8) = *(_OWORD *)((char *)&v2152[115] + 8);
                                  v2223[124] = v2152[124];
                                  v2223[125] = v2152[125];
                                  v2223[126] = v2152[126];
                                  *(_QWORD *)&v2223[127] = *(_QWORD *)&v2152[127];
                                  v2223[120] = v2152[120];
                                  v2223[121] = v2152[121];
                                  v2223[122] = v2152[122];
                                  v2223[123] = v2152[123];
                                  BYTE8(v2223[127]) = 0;
                                  v2230 = 0;
                                  if (v2158)
                                  {
                                    memcpy((char *)&v2223[127] + 8, &v2183[3928], 0x708uLL);
                                    v2223[244] = v2188;
                                    v2223[245] = v2189;
                                    v2223[246] = v2190;
                                    v2224 = v2191;
                                    v2223[240] = v2184;
                                    v2223[241] = v2185;
                                    v2223[242] = v2186;
                                    v2223[243] = v2187;
                                    v2225 = v1990.i8[0];
                                    v2227 = v1988.i8[0];
                                    v2226 = &off_24CA00398;
                                    memcpy(v2228, v2195, sizeof(v2228));
                                    v2229 = v1986.i64[0];
                                    v2230 = 1;
                                  }
                                  v2231 = v2159;
                                  v2232 = v2160;
                                  v2233 = v2161;
                                  v2234 = v2162;
                                  v2239 = v2167;
                                  v2240 = v2168;
                                  v2241 = v2169;
                                  v2242 = v2170;
                                  v2235 = v2163;
                                  v2236 = v2164;
                                  v2237 = v2165;
                                  v2238 = v2166;
                                  v2245 = v2173;
                                  v2246 = v2174;
                                  v2243 = v2171;
                                  v2244 = v2172;
                                  v2250 = v2178;
                                  v2248 = v2176;
                                  v2249 = v2177;
                                  v2247 = v2175;
                                  v2252 = v2180;
                                  v2251 = v2179;
                                  v2253 = v840;
                                  v2254 = v841;
                                  v2220 = 0uLL;
                                  v847 = v846 - 8016;
                                  v2255 = v2182;
                                  if (v846 >= 0x1F50)
                                  {
                                    v848 = 0;
                                    v849 = &v1921[8016 * v1918
                                                + 16 * ((uint64_t)(v846 - (_QWORD)(categoryc + 8016)) >> 4)];
                                    v850 = v849 + 8008;
                                    v1988.i64[0] = (uint64_t)(v849 + 5864);
                                    v1986.i64[0] = (uint64_t)(v849 + 5848);
                                    v2013 = v849 + 7680;
                                    v1990.i64[0] = v846 + 8008;
                                    v851 = v846 + 7680;
                                    do
                                    {
                                      v871 = &v1975[v848];
                                      _X22 = v847 + v848;
                                      __asm { PRFM            #0, [X22,#0x3EA0] }
                                      *(_QWORD *)v871 = *(_QWORD *)(v847 + v848);
                                      *(_OWORD *)(v871 + 8) = *(_OWORD *)(v847 + v848 + 8);
                                      *((_QWORD *)v871 + 3) = *(_QWORD *)(v847 + v848 + 24);
                                      v1975[v848 + 32] = 0;
                                      v871[64] = 0;
                                      __asm { PRFM            #0, [X22,#0x3EE0] }
                                      if (*(_BYTE *)(v847 + v848 + 64))
                                      {
                                        v875 = *(_OWORD *)(_X22 + 48);
                                        *(_OWORD *)&v1975[v848 + 32] = *(_OWORD *)(_X22 + 32);
                                        *(_OWORD *)&v1975[v848 + 48] = v875;
                                        v871[64] = 1;
                                      }
                                      _X27 = _X22 + 23712;
                                      *(_OWORD *)(v871 + 72) = *(_OWORD *)(_X22 + 72);
                                      memcpy(v871 + 88, (const void *)(_X22 + 88), 0x708uLL);
                                      memcpy(v871 + 1888, (const void *)(_X22 + 1888), 0x708uLL);
                                      v877 = *(_OWORD *)(_X22 + 3688);
                                      v878 = *(_OWORD *)(_X22 + 3704);
                                      v879 = *(_OWORD *)(_X22 + 3736);
                                      *(_OWORD *)(v871 + 3720) = *(_OWORD *)(_X22 + 3720);
                                      *(_OWORD *)(v871 + 3736) = v879;
                                      *(_OWORD *)(v871 + 3688) = v877;
                                      *(_OWORD *)(v871 + 3704) = v878;
                                      v880 = *(_OWORD *)(_X22 + 3752);
                                      v881 = *(_OWORD *)(_X22 + 3768);
                                      v882 = *(_OWORD *)(_X22 + 3784);
                                      *((_QWORD *)v871 + 475) = *(_QWORD *)(_X22 + 3800);
                                      *(_OWORD *)(v871 + 3768) = v881;
                                      *(_OWORD *)(v871 + 3784) = v882;
                                      *(_OWORD *)(v871 + 3752) = v880;
                                      v883 = *(_QWORD *)(_X22 + 3920);
                                      v884 = *(_OWORD *)(_X22 + 3872);
                                      v885 = *(_OWORD *)(_X22 + 3888);
                                      *((_OWORD *)v871 + 244) = *(_OWORD *)(_X22 + 3904);
                                      *((_OWORD *)v871 + 243) = v885;
                                      *((_OWORD *)v871 + 242) = v884;
                                      *((_QWORD *)v871 + 490) = v883;
                                      v886 = *(_OWORD *)(_X22 + 3808);
                                      v887 = *(_OWORD *)(_X22 + 3824);
                                      v888 = *(_OWORD *)(_X22 + 3840);
                                      *((_OWORD *)v871 + 241) = *(_OWORD *)(_X22 + 3856);
                                      *((_OWORD *)v871 + 240) = v888;
                                      *((_OWORD *)v871 + 239) = v887;
                                      *((_OWORD *)v871 + 238) = v886;
                                      v871[3928] = 0;
                                      *(_BYTE *)(v851 + v848) = 0;
                                      __asm { PRFM            #0, [X27] }
                                      if (LOBYTE(v2013[v848 / 8]))
                                      {
                                        _X27 = _X22 + 21880;
                                        memcpy(v871 + 3928, (const void *)(v847 + v848 + 3928), 0x708uLL);
                                        v891 = &v1975[v848];
                                        v892 = *(_OWORD *)(v847 + v848 + 5744);
                                        v893 = *(_OWORD *)(v847 + v848 + 5760);
                                        v894 = *(_OWORD *)(v847 + v848 + 5776);
                                        *((_OWORD *)v891 + 358) = *(_OWORD *)(v847 + v848 + 5728);
                                        *((_OWORD *)v891 + 361) = v894;
                                        *((_OWORD *)v891 + 360) = v893;
                                        *((_OWORD *)v891 + 359) = v892;
                                        v895 = *(_OWORD *)(v847 + v848 + 5808);
                                        v896 = *(_OWORD *)(v847 + v848 + 5824);
                                        v897 = *(_QWORD *)(v847 + v848 + 5840);
                                        *((_OWORD *)v891 + 362) = *(_OWORD *)(v847 + v848 + 5792);
                                        *((_QWORD *)v891 + 730) = v897;
                                        *((_OWORD *)v891 + 364) = v896;
                                        *((_OWORD *)v891 + 363) = v895;
                                        __asm { PRFM            #0, [X27] }
                                        v1975[v848 + 5848] = *(_BYTE *)(v1986.i64[0] + v848);
                                        v1975[v848 + 5864] = *(_BYTE *)(v1988.i64[0] + v848);
                                        *((_QWORD *)v891 + 732) = &off_24CA00398;
                                        memcpy(&v1975[v848 + 5872], (const void *)(v847 + v848 + 5872), 0x708uLL);
                                        *((_QWORD *)v891 + 959) = *(_QWORD *)(v847 + v848 + 7672);
                                        *(_BYTE *)(v851 + v848) = 1;
                                      }
                                      _X8 = _X22 + 24024;
                                      v853 = &v1975[v848];
                                      *((_WORD *)v853 + 3844) = *(_WORD *)(v847 + v848 + 7688);
                                      v854 = *(_OWORD *)(v847 + v848 + 7696);
                                      v855 = *(_OWORD *)(v847 + v848 + 7712);
                                      *((_QWORD *)v853 + 966) = *(_QWORD *)(v847 + v848 + 7728);
                                      *((_OWORD *)v853 + 482) = v855;
                                      *((_OWORD *)v853 + 481) = v854;
                                      v856 = &v1975[v848 + 7736];
                                      v858 = *(_OWORD *)(v847 + v848 + 7816);
                                      v857 = *(_OWORD *)(v847 + v848 + 7832);
                                      v859 = *(_OWORD *)(v847 + v848 + 7800);
                                      *((_QWORD *)v853 + 981) = *(_QWORD *)(v847 + v848 + 7848);
                                      *((_OWORD *)v856 + 5) = v858;
                                      *((_OWORD *)v856 + 6) = v857;
                                      *((_OWORD *)v856 + 4) = v859;
                                      v860 = *(_OWORD *)(v847 + v848 + 7736);
                                      v861 = *(_OWORD *)(v847 + v848 + 7752);
                                      v862 = *(_OWORD *)(v847 + v848 + 7784);
                                      *((_OWORD *)v856 + 2) = *(_OWORD *)(v847 + v848 + 7768);
                                      *((_OWORD *)v856 + 3) = v862;
                                      *(_OWORD *)v856 = v860;
                                      *((_OWORD *)v856 + 1) = v861;
                                      v863 = *(_OWORD *)(v847 + v848 + 7936);
                                      v864 = *(_OWORD *)(v847 + v848 + 7952);
                                      v865 = *(_QWORD *)(v847 + v848 + 7968);
                                      *((_OWORD *)v853 + 495) = *(_OWORD *)(v847 + v848 + 7920);
                                      *((_QWORD *)v853 + 996) = v865;
                                      *((_OWORD *)v853 + 497) = v864;
                                      *((_OWORD *)v853 + 496) = v863;
                                      v866 = *(_OWORD *)(v847 + v848 + 7856);
                                      v867 = *(_OWORD *)(v847 + v848 + 7872);
                                      v868 = *(_OWORD *)(v847 + v848 + 7888);
                                      *((_OWORD *)v853 + 494) = *(_OWORD *)(v847 + v848 + 7904);
                                      *((_OWORD *)v853 + 493) = v868;
                                      *((_OWORD *)v853 + 492) = v867;
                                      *((_OWORD *)v853 + 491) = v866;
                                      v869 = *(_QWORD *)(v847 + v848 + 7976);
                                      v1975[v848 + 7984] = *(_BYTE *)(v847 + v848 + 7984);
                                      *((_QWORD *)v853 + 997) = v869;
                                      __asm { PRFM            #0, [X8] }
                                      *((_QWORD *)v853 + 999) = *(_QWORD *)(v847 + v848 + 7992);
                                      *((_QWORD *)v853 + 1000) = *(_QWORD *)(v847 + v848 + 8000);
                                      *(_OWORD *)(v847 + v848 + 7992) = 0u;
                                      *(_BYTE *)(v1990.i64[0] + v848) = v850[v848 / 8];
                                      v848 += 8016;
                                    }
                                    while (v847 + v848 < (unint64_t)v1975);
                                    v846 = (unint64_t)&v1975[v848];
                                  }
                                  *(_QWORD *)(v2068 + 5664) = v846;
                                  if (v1975 != categoryc + 8016)
                                  {
                                    v944 = 0;
                                    v945 = &v1921[8016 * v1918 + 16 * ((v1975 - (categoryc + 8016)) >> 4)];
                                    v946 = v945 - 8008;
                                    v947 = v945 - 8016;
                                    do
                                    {
                                      *(_QWORD *)&v1975[v944 - 8016] = *(_QWORD *)&v947[v944];
                                      sub_20F5B67C0((uint64_t)&v1975[v944 - 8008], (uint64_t)&v946[v944]);
                                      v1975[v944 - 8] = *(_BYTE *)(v847 + v944 - 8);
                                      v944 -= 8016;
                                    }
                                    while (-16 * ((v1975 - (categoryc + 8016)) >> 4) != v944);
                                  }
                                  *(_QWORD *)categoryc = __szc;
                                  v948 = &v1921[8016 * v1918];
                                  sub_20F5B67C0((uint64_t)(v948 + 8), (uint64_t)&object[8]);
                                  v948[8008] = v2255;
                                  v949 = v2254;
                                  if (v2254)
                                  {
                                    v950 = (unint64_t *)&v2254->__shared_owners_;
                                    do
                                      v951 = __ldaxr(v950);
                                    while (__stlxr(v951 - 1, v950));
                                    if (!v951)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
                                      std::__shared_weak_count::__release_weak(v949);
                                    }
                                  }
                                }
                              }
                              v841 = (std::__shared_weak_count *)*((_QWORD *)&v2220 + 1);
                            }
                            if (v841)
                            {
                              v1091 = (unint64_t *)&v841->__shared_owners_;
                              do
                                v1092 = __ldaxr(v1091);
                              while (__stlxr(v1092 - 1, v1091));
                              if (!v1092)
                              {
                                ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
                                std::__shared_weak_count::__release_weak(v841);
                              }
                            }
                            v2019[2] = 0;
                            *v2019 = 0;
                            *(int64x2_t *)(v2068 + 5792) = vaddq_s64(*(int64x2_t *)(v2068 + 5792), (int64x2_t)xmmword_2103B4900);
                            v596 = 1;
                          }
                          else
                          {
                            v596 = 0;
                            --*(_DWORD *)(v614 + 8);
                            --*(_DWORD *)(v623 + 8);
                            v2160 = 0u;
                            --*(_DWORD *)(v629 + 8);
                            --*(_DWORD *)(v635 + 8);
                            v2161 = 0u;
                            --*(_DWORD *)(v839 + 8);
                            v2162 = 0;
                          }
                        }
                        v637 = (std::__shared_weak_count *)*((_QWORD *)&v2181 + 1);
                        if (*((_QWORD *)&v2181 + 1))
                        {
                          v638 = (unint64_t *)(*((_QWORD *)&v2181 + 1) + 8);
                          do
                            v639 = __ldaxr(v638);
                          while (__stlxr(v639 - 1, v638));
                          if (!v639)
                          {
                            ((void (*)(std::__shared_weak_count *, void *))v637->__on_zero_shared)(v637, v581);
                            std::__shared_weak_count::__release_weak(v637);
                          }
                        }
                        v586 = (std::__shared_weak_count *)*((_QWORD *)&v2149[0] + 1);
                        goto LABEL_736;
                      }
                    }
                    v480 = 0;
                  }
                  else
                  {
                    v480 = 0;
                    v479 = 0;
                  }
LABEL_612:
                  v483 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 594, (uint64_t)"curr_state && prev_state", 24, (uint64_t)"[VIOBABase]: Cannot find the state IDs.", 39, (void (*)(void **))sub_21023DDB0);
                  v460 = __szc;
                  if (v483)
                    abort();
                  goto LABEL_613;
                }
              }
              v256 = v257;
              goto LABEL_486;
            }
          }
        }
LABEL_303:
        sub_20F4AD5FC(v2107);
        if (**(int **)(*(_QWORD *)&v2107[0] + 56) > 5)
          goto LABEL_390;
        v264 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
        v265 = *(_BYTE *)(*(_QWORD *)&v2107[0] + 72) != 0;
        v266 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
        if (((v266 == 0) & ~v265) != 0)
          goto LABEL_390;
        __sza = v264;
        *(_QWORD *)v2183 = v2107;
        *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v2183[24] = 5;
        *(_QWORD *)&v2183[32] = "unknown file";
        *(_DWORD *)&v2183[40] = 556;
        *(_QWORD *)&v2183[48] = "unknown function";
        *(_QWORD *)&v2183[56] = 0;
        *(_QWORD *)&v2183[64] = 0;
        v267 = **(_QWORD **)v2183;
        v268 = (const char *)(**(_QWORD **)v2183 + 16);
        v2010 = v268;
        if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
        {
          v268 = *(const char **)(v267 + 16);
          v269 = *(_QWORD *)(v267 + 24);
          v271 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v271 & 1) != 0)
            goto LABEL_309;
        }
        else
        {
          v269 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
          v270 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v270 & 1) != 0)
            goto LABEL_309;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2150);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
          if (v2151[8] && (v2151[7] & 0x80000000) != 0)
            operator delete(v2150[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_309:
        if (byte_254A4A4F8[23] >= 0)
          v272 = byte_254A4A4F8;
        else
          v272 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v273 = byte_254A4A4F8[23];
        else
          v273 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v272, v268);
        if (v273 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v273 >= 0x17)
        {
          v275 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v273 | 7) != 0x17)
            v275 = v273 | 7;
          v276 = v275 + 1;
          v274 = operator new(v275 + 1);
          *(_QWORD *)&object[24] = v276 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v274;
          *(_QWORD *)&object[16] = v273;
LABEL_322:
          memmove(v274, v272, v273);
          goto LABEL_323;
        }
        object[31] = v273;
        v274 = &object[8];
        if (v273)
          goto LABEL_322;
LABEL_323:
        v274[v273] = 0;
        object[32] = 1;
        if (v269 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v269 >= 0x17)
        {
          v279 = (v269 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v269 | 7) != 0x17)
            v279 = v269 | 7;
          v280 = v279 + 1;
          v277 = operator new(v279 + 1);
          *(_QWORD *)&object[56] = v280 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v277;
          *(_QWORD *)&object[48] = v269;
        }
        else
        {
          object[63] = v269;
          v277 = &object[40];
          if (!v269)
          {
            object[40] = 0;
            object[64] = 1;
            v278 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_327;
            goto LABEL_333;
          }
        }
        memmove(v277, v268, v269);
        v277[v269] = 0;
        object[64] = 1;
        v278 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_327:
          if (object[32])
            goto LABEL_334;
          goto LABEL_336;
        }
LABEL_333:
        operator delete(*(void **)&object[40]);
        if (object[32])
        {
LABEL_334:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
        }
LABEL_336:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v266 && *(_QWORD *)(v266 + 24))
        {
          v281 = _os_log_pack_size();
          v282 = (std::__shared_weak_count_vtbl *)operator new(v281, (std::align_val_t)8uLL);
          v283 = (std::__shared_weak_count *)operator new();
          v284 = v283;
          v283->__shared_owners_ = 0;
          v285 = (unint64_t *)&v283->__shared_owners_;
          v283->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v283->__shared_weak_owners_ = 0;
          v283[1].__vftable = v282;
          *(_QWORD *)object = v282;
          *(_QWORD *)&object[8] = v282;
          *(_QWORD *)&object[16] = v283;
          do
            v286 = __ldxr(v285);
          while (__stxr(v286 + 1, v285));
          memset(&object[24], 0, 24);
          do
            v287 = __ldaxr(v285);
          while (__stlxr(v287 - 1, v285));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v284);
          }
          v288 = *(_QWORD *)object;
          v289 = (_DWORD *)_os_log_pack_fill();
          *v289 = 67109120;
          v289[1] = v242;
          v290 = (char *)operator new();
          v291 = *(unsigned __int8 *)(v267 + 39);
          v292 = v2010;
          if ((v291 & 0x80u) != 0)
          {
            v292 = *(const char **)(v267 + 16);
            v291 = *(_QWORD *)(v267 + 24);
          }
          *(_QWORD *)v290 = v288;
          *(_OWORD *)(v290 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v290 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v290 + 5) = v292;
          *((_QWORD *)v290 + 6) = v291;
          v290[56] = 16;
          *(_QWORD *)&v2149[0] = 0;
          v2150[0] = v290;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v266 + 24) + 40))(*(_QWORD *)(v266 + 24), v2150);
          v293 = v2150[0];
          v2150[0] = 0;
          if (v293)
          {
            v294 = (std::__shared_weak_count *)*((_QWORD *)v293 + 4);
            if (v294)
            {
              v295 = (unint64_t *)&v294->__shared_owners_;
              do
                v296 = __ldaxr(v295);
              while (__stlxr(v296 - 1, v295));
              if (!v296)
              {
                ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                std::__shared_weak_count::__release_weak(v294);
              }
            }
            v297 = (std::__shared_weak_count *)*((_QWORD *)v293 + 2);
            if (v297)
            {
              v298 = (unint64_t *)&v297->__shared_owners_;
              do
                v299 = __ldaxr(v298);
              while (__stlxr(v299 - 1, v298));
              if (!v299)
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                std::__shared_weak_count::__release_weak(v297);
              }
            }
            MEMORY[0x212BC6398](v293, 0x10F0C40B62ED6C6);
            v300 = *(_QWORD *)&v2149[0];
            *(_QWORD *)&v2149[0] = 0;
            if (v300)
            {
              v301 = *(std::__shared_weak_count **)(v300 + 32);
              if (v301)
              {
                v302 = (unint64_t *)&v301->__shared_owners_;
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                  std::__shared_weak_count::__release_weak(v301);
                }
              }
              v304 = *(std::__shared_weak_count **)(v300 + 16);
              if (v304)
              {
                v305 = (unint64_t *)&v304->__shared_owners_;
                do
                  v306 = __ldaxr(v305);
                while (__stlxr(v306 - 1, v305));
                if (!v306)
                {
                  ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                  std::__shared_weak_count::__release_weak(v304);
                }
              }
              MEMORY[0x212BC6398](v300, 0x10F0C40B62ED6C6);
            }
          }
          v307 = *(std::__shared_weak_count **)&object[32];
          v308 = __sza;
          if (*(_QWORD *)&object[32])
          {
            v309 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          v311 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v312 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
        }
        else
        {
          os_log_type_enabled(v278, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 67109120;
          *(_DWORD *)&object[4] = v242;
          v314 = (void *)_os_log_send_and_compose_impl();
          v308 = __sza;
          if (v314)
            free(v314);
        }
        if (v308)
        {
          sub_20E8C003C((uint64_t)v2183, "The requested IMU State (%d) does not exist in the StateSet", v242);
          sub_20E863570((uint64_t)v2183);
        }
        sub_20E863570((uint64_t)v2183);
        v315 = *(std::__shared_weak_count **)&v2183[64];
        if (*(_QWORD *)&v2183[64])
        {
          v316 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
LABEL_390:
        sub_20F4AD5FC(v2107);
        if (**(int **)(*(_QWORD *)&v2107[0] + 56) <= 5)
        {
          v318 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
          v319 = *(_BYTE *)(*(_QWORD *)&v2107[0] + 72) != 0;
          v320 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
          if (((v320 == 0) & ~v319) == 0)
          {
            *(_QWORD *)v2183 = v2107;
            *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v2183[24] = 5;
            *(_QWORD *)&v2183[32] = "unknown file";
            *(_DWORD *)&v2183[40] = 244;
            *(_QWORD *)&v2183[48] = "unknown function";
            *(_QWORD *)&v2183[56] = 0;
            *(_QWORD *)&v2183[64] = 0;
            v321 = **(_QWORD **)v2183;
            v322 = (const char *)(**(_QWORD **)v2183 + 16);
            __szb = v322;
            if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
            {
              v322 = *(const char **)(v321 + 16);
              v323 = *(_QWORD *)(v321 + 24);
              v325 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v325 & 1) == 0)
              {
LABEL_1078:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v2150);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
                  if (v2151[8] && (v2151[7] & 0x80000000) != 0)
                    operator delete(v2150[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v323 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
              v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v324 & 1) == 0)
                goto LABEL_1078;
            }
            if (byte_254A4A4F8[23] >= 0)
              v326 = byte_254A4A4F8;
            else
              v326 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v327 = byte_254A4A4F8[23];
            else
              v327 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v326, v322);
            if (v327 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v327 >= 0x17)
            {
              v329 = (v327 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v327 | 7) != 0x17)
                v329 = v327 | 7;
              v330 = v329 + 1;
              v328 = operator new(v329 + 1);
              *(_QWORD *)&object[24] = v330 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v328;
              *(_QWORD *)&object[16] = v327;
            }
            else
            {
              object[31] = v327;
              v328 = &object[8];
              if (!v327)
              {
LABEL_410:
                v328[v327] = 0;
                object[32] = 1;
                if (v323 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v323 >= 0x17)
                {
                  v333 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v323 | 7) != 0x17)
                    v333 = v323 | 7;
                  v334 = v333 + 1;
                  v331 = operator new(v333 + 1);
                  *(_QWORD *)&object[56] = v334 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v331;
                  *(_QWORD *)&object[48] = v323;
                }
                else
                {
                  object[63] = v323;
                  v331 = &object[40];
                  if (!v323)
                  {
                    object[40] = 0;
                    object[64] = 1;
                    v332 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_414;
LABEL_420:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_421;
                    goto LABEL_423;
                  }
                }
                memmove(v331, v322, v323);
                v331[v323] = 0;
                object[64] = 1;
                v332 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_420;
LABEL_414:
                if (object[32])
                {
LABEL_421:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_423:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v320 && *(_QWORD *)(v320 + 24))
                {
                  v335 = _os_log_pack_size();
                  v336 = (std::__shared_weak_count_vtbl *)operator new(v335, (std::align_val_t)8uLL);
                  v337 = (std::__shared_weak_count *)operator new();
                  v338 = v337;
                  v337->__shared_owners_ = 0;
                  v339 = (unint64_t *)&v337->__shared_owners_;
                  v337->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v337->__shared_weak_owners_ = 0;
                  v337[1].__vftable = v336;
                  *(_QWORD *)object = v336;
                  *(_QWORD *)&object[8] = v336;
                  *(_QWORD *)&object[16] = v337;
                  do
                    v340 = __ldxr(v339);
                  while (__stxr(v340 + 1, v339));
                  memset(&object[24], 0, 24);
                  do
                    v341 = __ldaxr(v339);
                  while (__stlxr(v341 - 1, v339));
                  if (!v341)
                  {
                    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                    std::__shared_weak_count::__release_weak(v338);
                  }
                  v342 = *(_QWORD *)object;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v343 = (char *)operator new();
                  v344 = *(unsigned __int8 *)(v321 + 39);
                  v345 = __szb;
                  if ((v344 & 0x80u) != 0)
                  {
                    v345 = *(const char **)(v321 + 16);
                    v344 = *(_QWORD *)(v321 + 24);
                  }
                  *(_QWORD *)v343 = v342;
                  *(_OWORD *)(v343 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v343 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v343 + 5) = v345;
                  *((_QWORD *)v343 + 6) = v344;
                  v343[56] = 16;
                  *(_QWORD *)&v2149[0] = 0;
                  v2150[0] = v343;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v320 + 24) + 40))(*(_QWORD *)(v320 + 24), v2150);
                  v346 = v2150[0];
                  v2150[0] = 0;
                  if (v346)
                  {
                    v347 = (std::__shared_weak_count *)*((_QWORD *)v346 + 4);
                    if (v347)
                    {
                      v348 = (unint64_t *)&v347->__shared_owners_;
                      do
                        v349 = __ldaxr(v348);
                      while (__stlxr(v349 - 1, v348));
                      if (!v349)
                      {
                        ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                        std::__shared_weak_count::__release_weak(v347);
                      }
                    }
                    v350 = (std::__shared_weak_count *)*((_QWORD *)v346 + 2);
                    if (v350)
                    {
                      v351 = (unint64_t *)&v350->__shared_owners_;
                      do
                        v352 = __ldaxr(v351);
                      while (__stlxr(v352 - 1, v351));
                      if (!v352)
                      {
                        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                        std::__shared_weak_count::__release_weak(v350);
                      }
                    }
                    MEMORY[0x212BC6398](v346, 0x10F0C40B62ED6C6);
                    v353 = *(_QWORD *)&v2149[0];
                    *(_QWORD *)&v2149[0] = 0;
                    if (v353)
                    {
                      v354 = *(std::__shared_weak_count **)(v353 + 32);
                      if (v354)
                      {
                        v355 = (unint64_t *)&v354->__shared_owners_;
                        do
                          v356 = __ldaxr(v355);
                        while (__stlxr(v356 - 1, v355));
                        if (!v356)
                        {
                          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                          std::__shared_weak_count::__release_weak(v354);
                        }
                      }
                      v357 = *(std::__shared_weak_count **)(v353 + 16);
                      if (v357)
                      {
                        v358 = (unint64_t *)&v357->__shared_owners_;
                        do
                          v359 = __ldaxr(v358);
                        while (__stlxr(v359 - 1, v358));
                        if (!v359)
                        {
                          ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                          std::__shared_weak_count::__release_weak(v357);
                        }
                      }
                      MEMORY[0x212BC6398](v353, 0x10F0C40B62ED6C6);
                    }
                  }
                  v360 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v361 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v362 = __ldaxr(v361);
                    while (__stlxr(v362 - 1, v361));
                    if (!v362)
                    {
                      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                      std::__shared_weak_count::__release_weak(v360);
                    }
                  }
                  v363 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v364 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v365 = __ldaxr(v364);
                    while (__stlxr(v365 - 1, v364));
                    if (!v365)
                    {
                      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                      std::__shared_weak_count::__release_weak(v363);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v332, OS_LOG_TYPE_ERROR);
                  *(_WORD *)object = 0;
                  v366 = (void *)_os_log_send_and_compose_impl();
                  if (v366)
                    free(v366);
                }
                if (v318)
                {
                  sub_20E8C003C((uint64_t)v2183, "Unable to add IMU State");
                  sub_20E863570((uint64_t)v2183);
                }
                sub_20E863570((uint64_t)v2183);
                v367 = *(std::__shared_weak_count **)&v2183[64];
                if (*(_QWORD *)&v2183[64])
                {
                  v368 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
                  do
                    v369 = __ldaxr(v368);
                  while (__stlxr(v369 - 1, v368));
                  if (!v369)
                  {
                    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                    std::__shared_weak_count::__release_weak(v367);
                  }
                }
                goto LABEL_477;
              }
            }
            memmove(v328, v326, v327);
            goto LABEL_410;
          }
        }
LABEL_477:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 188, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
LABEL_478:
        v370 = (_QWORD *)v229[1];
        if (v370)
        {
          do
          {
            v371 = v370;
            v370 = (_QWORD *)*v370;
          }
          while (v370);
        }
        else
        {
          do
          {
            v371 = (_QWORD *)v229[2];
            _ZF = *v371 == (_QWORD)v229;
            v229 = v371;
          }
          while (!_ZF);
        }
        v229 = v371;
        if (v371 == v2058)
          goto LABEL_1123;
      }
    }
    goto LABEL_1123;
  }
  if (*(_BYTE *)(v70 + 1317))
  {
    v203 = *(double *)v202;
    v204 = *(_QWORD *)(v202 + 8);
    v205 = *(double *)(v202 + 16);
    v206 = *(_QWORD *)(v202 + 24);
    *(_OWORD *)v2150 = *(_OWORD *)(v202 + 32);
    *(_QWORD *)v2151 = *(_QWORD *)(v202 + 48);
    v207 = *(_QWORD *)(v202 + 56);
    v2149[0] = *(_OWORD *)(v202 + 64);
    *(_QWORD *)&v2149[1] = *(_QWORD *)(v202 + 80);
    v208 = *(_OWORD *)(v202 + 88);
    *(_QWORD *)&v2107[1] = *(_QWORD *)(v202 + 104);
    v2107[0] = v208;
    v209 = *(_OWORD *)(v202 + 112);
    *(_QWORD *)&v2108[1] = *(_QWORD *)(v202 + 128);
    v2108[0] = v209;
    v2099 = *(_QWORD *)(v202 + 152);
    v2097 = *(_OWORD *)(v202 + 136);
    v210 = *(_OWORD *)(v202 + 160);
    v211 = *(_OWORD *)(v202 + 176);
    v212 = *(_OWORD *)(v202 + 192);
    v213 = *(_OWORD *)(v202 + 208);
    *(_QWORD *)&object[64] = *(_QWORD *)(v202 + 224);
    *(_OWORD *)&object[48] = v213;
    *(_OWORD *)&object[32] = v212;
    *(_OWORD *)object = v210;
    *(_OWORD *)&object[16] = v211;
    v214 = *(_OWORD *)(v202 + 232);
    v5 = *(int64x2_t *)(v202 + 248);
    v215 = *(_OWORD *)(v202 + 264);
    v216 = *(_OWORD *)(v202 + 280);
    *(_QWORD *)&v2183[64] = *(_QWORD *)(v202 + 296);
    *(_OWORD *)&v2183[48] = v216;
    *(_OWORD *)&v2183[32] = v215;
    *(double *)(v70 + 176) = v203 * *(double *)(v70 + 1320);
    *(_OWORD *)v2183 = v214;
    *(int64x2_t *)&v2183[16] = v5;
    v217 = v205 * *(double *)(v70 + 1328);
    *(_QWORD *)(v70 + 184) = v204;
    *(double *)(v70 + 192) = v217;
    *(_QWORD *)(v70 + 200) = v206;
    *(_OWORD *)(v70 + 208) = *(_OWORD *)v2150;
    *(_QWORD *)(v70 + 224) = *(_QWORD *)v2151;
    *(_QWORD *)(v70 + 232) = v207;
    v218 = v2149[0];
    *(_QWORD *)(v70 + 256) = *(_QWORD *)&v2149[1];
    *(_OWORD *)(v70 + 240) = v218;
    v219 = v2107[0];
    *(_QWORD *)(v70 + 280) = *(_QWORD *)&v2107[1];
    *(_OWORD *)(v70 + 264) = v219;
    v220 = v2108[0];
    *(_QWORD *)(v70 + 304) = *(_QWORD *)&v2108[1];
    *(_OWORD *)(v70 + 288) = v220;
    *(_QWORD *)(v70 + 328) = v2099;
    *(_OWORD *)(v70 + 312) = v2097;
    v221 = *(_OWORD *)object;
    v222 = *(_OWORD *)&object[16];
    v223 = *(_OWORD *)&object[32];
    v224 = *(_OWORD *)&object[48];
    *(_QWORD *)(v70 + 400) = *(_QWORD *)&object[64];
    *(_OWORD *)(v70 + 368) = v223;
    *(_OWORD *)(v70 + 384) = v224;
    *(_OWORD *)(v70 + 336) = v221;
    *(_OWORD *)(v70 + 352) = v222;
    v225 = *(_OWORD *)&v2183[16];
    *(_OWORD *)(v70 + 408) = *(_OWORD *)v2183;
    v226 = *(_OWORD *)&v2183[32];
    v227 = *(_OWORD *)&v2183[48];
    *(_QWORD *)(v70 + 472) = *(_QWORD *)&v2183[64];
    *(_OWORD *)(v70 + 440) = v226;
    *(_OWORD *)(v70 + 456) = v227;
    *(_OWORD *)(v70 + 424) = v225;
    goto LABEL_259;
  }
  v1312 = *(_OWORD *)(v202 + 16);
  *(_OWORD *)(v70 + 176) = *(_OWORD *)v202;
  *(_OWORD *)(v70 + 192) = v1312;
  v1313 = *(_OWORD *)(v202 + 32);
  *(_QWORD *)(v70 + 224) = *(_QWORD *)(v202 + 48);
  *(_OWORD *)(v70 + 208) = v1313;
  *(_QWORD *)(v70 + 232) = *(_QWORD *)(v202 + 56);
  v1314 = *(_OWORD *)(v202 + 64);
  *(_QWORD *)(v70 + 256) = *(_QWORD *)(v202 + 80);
  *(_OWORD *)(v70 + 240) = v1314;
  v1315 = *(_OWORD *)(v202 + 88);
  *(_QWORD *)(v70 + 280) = *(_QWORD *)(v202 + 104);
  *(_OWORD *)(v70 + 264) = v1315;
  v1316 = *(_OWORD *)(v202 + 112);
  *(_QWORD *)(v70 + 304) = *(_QWORD *)(v202 + 128);
  *(_OWORD *)(v70 + 288) = v1316;
  v1317 = *(_OWORD *)(v202 + 136);
  *(_QWORD *)(v70 + 328) = *(_QWORD *)(v202 + 152);
  *(_OWORD *)(v70 + 312) = v1317;
  v1319 = *(_OWORD *)(v202 + 192);
  v1318 = *(_OWORD *)(v202 + 208);
  v1320 = *(_OWORD *)(v202 + 176);
  *(_QWORD *)(v70 + 400) = *(_QWORD *)(v202 + 224);
  *(_OWORD *)(v70 + 368) = v1319;
  *(_OWORD *)(v70 + 384) = v1318;
  *(_OWORD *)(v70 + 352) = v1320;
  *(_OWORD *)(v70 + 336) = *(_OWORD *)(v202 + 160);
  v1321 = *(_OWORD *)(v202 + 264);
  v1322 = *(_OWORD *)(v202 + 280);
  v1323 = *(_QWORD *)(v202 + 296);
  *(_OWORD *)(v70 + 424) = *(_OWORD *)(v202 + 248);
  *(_QWORD *)(v70 + 472) = v1323;
  *(_OWORD *)(v70 + 440) = v1321;
  *(_OWORD *)(v70 + 456) = v1322;
  *(_OWORD *)(v70 + 408) = *(_OWORD *)(v202 + 232);
  v1324 = *(_QWORD *)(v70 + 8);
  v229 = *(_QWORD **)(v1324 + 48);
  v2058 = (_QWORD *)(v1324 + 56);
  if (v229 != (_QWORD *)(v1324 + 56))
    goto LABEL_260;
LABEL_1123:
  if (*(_BYTE *)(v2068 + 2144))
  {
    v1325 = v2068;
    if (!*(_BYTE *)(v2068 + 2149))
    {
      v1332 = *(_QWORD **)(v2068 + 8);
      v1333 = v1332[8];
      v2066 = v1332[39] * v1333;
      if (v2066)
      {
        v1334 = 0;
        v2038 = v1332[8];
        v2032 = *(_QWORD **)(v2068 + 8);
        while (1)
        {
          v1335 = v1334 / v1333;
          v1336 = v1334 % v1333;
          v1337 = (_QWORD *)v1332[6];
          if (((v1334 % v1333) & 0x8000000000000000) != 0)
          {
            do
            {
              v1349 = (_QWORD *)*v1337;
              if (*v1337)
              {
                do
                {
                  v1338 = v1349;
                  v1349 = (_QWORD *)v1349[1];
                }
                while (v1349);
              }
              else
              {
                do
                {
                  v1338 = (_QWORD *)v1337[2];
                  _ZF = *v1338 == (_QWORD)v1337;
                  v1337 = v1338;
                }
                while (_ZF);
              }
              v1337 = v1338;
              _CF = __CFADD__(v1336++, 1);
            }
            while (!_CF);
          }
          else if (v1336)
          {
            do
            {
              v1348 = (_QWORD *)v1337[1];
              if (v1348)
              {
                do
                {
                  v1338 = v1348;
                  v1348 = (_QWORD *)*v1348;
                }
                while (v1348);
              }
              else
              {
                do
                {
                  v1338 = (_QWORD *)v1337[2];
                  _ZF = *v1338 == (_QWORD)v1337;
                  v1337 = v1338;
                }
                while (!_ZF);
              }
              v1337 = v1338;
              v1506 = v1336-- <= 1;
            }
            while (!v1506);
          }
          else
          {
            v1338 = (_QWORD *)v1332[6];
          }
          v1339 = *((_OWORD *)v1338 + 2);
          v1340 = (_QWORD *)v1332[37];
          if (v1335 < 0)
          {
            do
            {
              v1350 = (_QWORD *)*v1340;
              if (*v1340)
              {
                do
                {
                  v1341 = v1350;
                  v1350 = (_QWORD *)v1350[1];
                }
                while (v1350);
              }
              else
              {
                do
                {
                  v1341 = (_QWORD *)v1340[2];
                  _ZF = *v1341 == (_QWORD)v1340;
                  v1340 = v1341;
                }
                while (_ZF);
              }
              v1340 = v1341;
              _CF = __CFADD__(v1335++, 1);
            }
            while (!_CF);
          }
          else if (v1333 <= v1334)
          {
            do
            {
              v1351 = (_QWORD *)v1340[1];
              if (v1351)
              {
                do
                {
                  v1341 = v1351;
                  v1351 = (_QWORD *)*v1351;
                }
                while (v1351);
              }
              else
              {
                do
                {
                  v1341 = (_QWORD *)v1340[2];
                  _ZF = *v1341 == (_QWORD)v1340;
                  v1340 = v1341;
                }
                while (!_ZF);
              }
              v1340 = v1341;
              v1506 = v1335-- <= 1;
            }
            while (!v1506);
          }
          else
          {
            v1341 = (_QWORD *)v1332[37];
          }
          v1342 = *((_DWORD *)v1341 + 8);
          *(_OWORD *)v2150 = v1339;
          *(_DWORD *)v2151 = v1342;
          v1343 = *(_QWORD *)(v1325 + 16);
          if (v1343)
            break;
LABEL_1134:
          if (++v1334 == v2066)
            goto LABEL_1125;
        }
        v1344 = *(unsigned int *)(v1325 + 2156);
        *(_OWORD *)object = *(_OWORD *)v2150;
        *(_QWORD *)&object[16] = *(_QWORD *)v2151;
        memset(&object[24], 0, 24);
        sub_20F716CC8(v1343, (uint64_t)object);
        v1345 = *(_QWORD *)(v1325 + 5712);
        if (v1345 == *(_QWORD *)(v1325 + 5704))
        {
          v2060 = 0;
          v1346 = *(_QWORD *)&object[24];
          v1347 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
            goto LABEL_1246;
        }
        else
        {
          v2060 = *(_DWORD *)(v1345 - 208) + 1;
          v1346 = *(_QWORD *)&object[24];
          v1347 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
          {
LABEL_1246:
            if (v1346)
            {
              v1414 = (void *)v1346;
              if (*(_QWORD *)&object[32] != v1346)
              {
                v1415 = *(_QWORD *)&object[32] - 40;
                v1416 = (void (***)(uint64_t))(*(_QWORD *)&object[32] - 40);
                do
                {
                  v1417 = *v1416;
                  v1416 -= 5;
                  (*v1417)(v1415);
                  _ZF = v1415 == v1346;
                  v1415 = (uint64_t)v1416;
                }
                while (!_ZF);
                v1414 = *(void **)&object[24];
              }
              *(_QWORD *)&object[32] = v1346;
              operator delete(v1414);
            }
            v1333 = v2038;
            goto LABEL_1134;
          }
        }
        if (!*(_QWORD *)(*(_QWORD *)(v1325 + 16) + 8))
          goto LABEL_1246;
        while (1)
        {
          v1352 = *(_QWORD *)(v1325 + 16);
          v1355 = *(uint64_t **)(v1352 + 8);
          v1353 = (uint64_t *)(v1352 + 8);
          v1354 = v1355;
          if (v1355)
          {
            v1356 = *(_DWORD *)(v1346 + 16);
            v1357 = *(_QWORD *)(v1346 + 8);
            v1358 = v1353;
            do
            {
              v1359 = v1354[4];
              if (v1359 < v1357)
              {
                ++v1354;
              }
              else if (v1359 == v1357)
              {
                if (*((_DWORD *)v1354 + 10) < v1356)
                  ++v1354;
                else
                  v1358 = v1354;
              }
              else
              {
                v1358 = v1354;
              }
              v1354 = (uint64_t *)*v1354;
            }
            while (v1354);
            if (v1358 != v1353)
            {
              v1360 = v1358[4];
              if (v1357 >= v1360 && (v1357 != v1360 || v1356 >= *((_DWORD *)v1358 + 10)))
                break;
            }
          }
LABEL_1174:
          v1346 += 40;
          if (v1346 == v1347)
          {
            v1346 = *(_QWORD *)&object[24];
            goto LABEL_1246;
          }
        }
        v1361 = v1358[6];
        v1362 = (std::__shared_weak_count *)v1358[7];
        if (!v1362)
          goto LABEL_1195;
        v1363 = (unint64_t *)&v1362->__shared_owners_;
        do
          v1364 = __ldxr(v1363);
        while (__stxr(v1364 + 1, v1363));
        do
          v1365 = __ldxr(v1363);
        while (__stxr(v1365 + 1, v1363));
        do
          v1366 = __ldaxr(v1363);
        while (__stlxr(v1366 - 1, v1363));
        if (!v1366)
        {
          ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
          std::__shared_weak_count::__release_weak(v1362);
          if (!v1361)
            goto LABEL_1240;
        }
        else
        {
LABEL_1195:
          if (!v1361)
            goto LABEL_1240;
        }
        if (v1344 <= (uint64_t)(*(_QWORD *)(v1361 + 208) - *(_QWORD *)(v1361 + 200)) >> 5)
        {
          if (!*(_BYTE *)(v1361 + 192)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 132, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1367 = *(char **)(v1325 + 5512);
          v1368 = *(char **)(v1325 + 5520);
          if (v1368 != v1367)
          {
            v1369 = (v1368 - v1367) >> 4;
            do
            {
              v1370 = v1369 >> 1;
              v1371 = (unsigned int *)&v1367[16 * (v1369 >> 1)];
              v1373 = *v1371;
              v1372 = (char *)(v1371 + 4);
              v1369 += ~(v1369 >> 1);
              if (v1373 < v1356)
                v1367 = v1372;
              else
                v1369 = v1370;
            }
            while (v1369);
          }
          if (v1367 == v1368 || *(_DWORD *)v1367 != v1356)
          {
            v1374 = v1361 + 40;
            v1375 = *(unsigned __int8 *)(v1361 + 192);
            v1376 = *(_BYTE *)(v1361 + 192) ? v1361 + 40 : 0;
            *(_DWORD *)v2183 = v1356;
            v2183[4] = 1;
            *(_QWORD *)&v2183[8] = v1376;
            if (v1375)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1374 + 24))(v1361 + 40))
              {
                _Q1 = *(_OWORD *)(v1361 + 104);
                _D3 = *(_QWORD *)(v1361 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1361 + 120) * *(double *)(v1361 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
LABEL_1874:
                  abort();
                }
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1874;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1374 + 24))(v1361 + 40))
              {
                v1380 = *(uint64_t **)(v1361 + 136);
                v1381 = *v1380;
                v1382 = (double *)v1380[2];
                v1383 = v1380[4];
                v1384 = (double *)v1380[6];
                _D1 = *(double *)(v1361 + 56) - v1382[1];
                v1386 = *(double *)(v1361 + 64) - v1382[2];
                _Q3.f64[0] = *(float64_t *)(v1381 + 16);
                _Q7 = *(_OWORD *)(v1381 + 48);
                _Q3.f64[1] = *(float64_t *)(v1381 + 40);
                v1389 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1381, *(int64x2_t *)(v1381 + 24)), *(double *)(v1361 + 48) - *v1382), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1381, *(int64x2_t *)(v1381 + 24)), _D1), _Q3, v1386);
                __asm { FMLA            D2, D1, V7.D[1] }
                v1391 = _D2 + *(double *)(v1381 + 64) * v1386;
                v1392 = v1389.f64[0] - *v1384;
                _D2 = v1389.f64[1] - v1384[1];
                v1394 = v1391 - v1384[2];
                _Q3.f64[0] = *(float64_t *)(v1383 + 16);
                _Q4 = *(int64x2_t *)v1383;
                _Q6 = *(int64x2_t *)(v1383 + 24);
                _Q16 = *(_OWORD *)(v1383 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v1383 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1383, _Q6), v1392), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1383, _Q6), _D2), _Q3, v1394);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v1394 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                *(_QWORD *)&v2183[16] = sqrt(_D2+ (_Q3.f64[0] + v1394 * *(double *)(v1383 + 64))* (_Q3.f64[0] + *(double *)(v1383 + 64) * v1394));
                _Q1 = *(_OWORD *)(v1361 + 104);
                _Q3.f64[0] = *(float64_t *)(v1361 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1361 + 120) * *(double *)(v1361 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1874;
                }
                if (sub_20F716438((uint64_t)v2005, (unsigned int *)v2183))
                {
                  *(_BYTE *)(v2068 + 6588) = 0;
                  *(_DWORD *)(v2068 + 6584) = 0;
                }
              }
            }
          }
          v1405 = v1361 + 40;
          if (!*(_BYTE *)(v1361 + 192))
            v1405 = 0;
          v1406 = *(_DWORD *)(v1405 + 40);
          v1407 = (__int128 *)*(unsigned int *)(v1405 + 48);
          if ((_DWORD)v1407 == *(_DWORD *)v2151 && *(void **)(v1405 + 32) == v2150[0] && v1406 == LODWORD(v2150[1]))
            goto LABEL_1239;
          v1410 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2068 + 8) + 1784), (uint64_t *)v2150);
          if (v1410)
          {
            v1411 = v1410[13];
            if (v1356 == *(_DWORD *)(v1361 + 32))
              goto LABEL_1238;
          }
          else
          {
            v1411 = 0;
            if (v1356 == *(_DWORD *)(v1361 + 32))
            {
LABEL_1238:
              sub_20F717038(v1406, v1407, v2150[1], *(unsigned int *)v2151, v1356, v1411, v2068 + 3144, v2060++, (__n128)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v1346 + 24) + 8)), *(float *)(*(_QWORD *)(v1346 + 24) + 32), v2068 + 4712);
LABEL_1239:
              v1325 = v2068;
              v1332 = v2032;
              goto LABEL_1240;
            }
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 144, (uint64_t)"landmarkID == track->ID().key()", 31, (uint64_t)"Landmark ID and track ID is different", 37, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1356 = *(_DWORD *)(v1361 + 32);
          goto LABEL_1238;
        }
LABEL_1240:
        if (v1362)
        {
          v1412 = (unint64_t *)&v1362->__shared_owners_;
          do
            v1413 = __ldaxr(v1412);
          while (__stlxr(v1413 - 1, v1412));
          if (!v1413)
          {
            ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
            std::__shared_weak_count::__release_weak(v1362);
          }
        }
        goto LABEL_1174;
      }
    }
LABEL_1125:
    v1327 = *(uint64_t **)(v1325 + 24);
    v1326 = *(uint64_t **)(v1325 + 32);
    if (v1327 != v1326)
    {
      v2059 = *(_QWORD *)(v2068 + 8);
      __szf = *(_QWORD *)(v2059 + 64);
      if (__szf)
      {
        v1328 = *(_QWORD *)(v2059 + 312);
        if (v1328)
        {
          v1329 = *(unsigned int *)(v2068 + 2152);
          v1330 = *(_QWORD *)(v2068 + 5712);
          if (v1330 == *(_QWORD *)(v2068 + 5704))
            v1331 = 0;
          else
            v1331 = *(_DWORD *)(v1330 - 208) + 1;
          v1418 = v1328 * __szf;
          v1419 = *(double *)(v2068 + 2168);
          v2039 = *(uint64_t **)(v1325 + 32);
          v2033 = *(unsigned int *)(v2068 + 2152);
          while (1)
          {
            v1420 = *v1327;
            v1421 = *(_QWORD *)(*v1327 + 200);
            v1422 = *(_QWORD *)(*v1327 + 208);
            if (v1329 <= (v1422 - v1421) >> 6 && *(_DWORD *)(v1420 + 224) != 2)
              break;
LABEL_1255:
            if (++v1327 == v1326)
              goto LABEL_1338;
          }
          v1423 = *(_DWORD *)(v1420 + 32);
          v1424 = *(_QWORD *)(*(_QWORD *)(v2068 + 8) + 64);
          *(_QWORD *)v2183 = *(_QWORD *)(v2068 + 8);
          *(_QWORD *)&v2183[8] = v1424;
          *(_QWORD *)&v2183[16] = 0;
          *(_QWORD *)&v2149[0] = v1421;
          *(_QWORD *)object = v2183;
          *(_QWORD *)&object[8] = v2149;
          *(_QWORD *)&object[16] = v2059;
          *(_QWORD *)&object[24] = __szf;
          *(_QWORD *)&object[32] = v1418;
          *(_QWORD *)&object[40] = v1422;
          *(_QWORD *)&object[48] = v1420;
          v1425 = sub_20F6236F0((uint64_t **)object);
          if (!v1425)
            goto LABEL_1338;
          v1426 = (float32x2_t *)v1425;
          if (!*(_BYTE *)(*v1327 + 192)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1321, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1427 = *(char **)(v2068 + 5512);
          v1428 = *(char **)(v2068 + 5520);
          if (v1428 != v1427)
          {
            v1429 = (v1428 - v1427) >> 4;
            do
            {
              v1430 = v1429 >> 1;
              v1431 = (unsigned int *)&v1427[16 * (v1429 >> 1)];
              v1433 = *v1431;
              v1432 = (char *)(v1431 + 4);
              v1429 += ~(v1429 >> 1);
              if (v1433 < v1423)
                v1427 = v1432;
              else
                v1429 = v1430;
            }
            while (v1429);
          }
          if (v1427 == v1428)
          {
            v1435 = *v1327;
          }
          else
          {
            v1434 = *(_DWORD *)v1427;
            v1435 = *v1327;
            if (v1434 == v1423)
            {
LABEL_1287:
              if (*(_BYTE *)(v1435 + 192))
                v1468 = v1435 + 40;
              else
                v1468 = 0;
              v1469 = *(void **)(v1468 + 32);
              v1470 = *(_DWORD *)(v1468 + 40);
              v1471 = (__int128 *)*(unsigned int *)(v1468 + 48);
              do
              {
                v1472 = *(_QWORD *)&v2183[16];
                v1473 = *(_QWORD *)&v2183[16] / *(_QWORD *)&v2183[8];
                v1474 = *(_QWORD *)&v2183[16] % *(_QWORD *)&v2183[8];
                v1475 = *(_QWORD **)(*(_QWORD *)v2183 + 48);
                if (((*(_QWORD *)&v2183[16] % *(_QWORD *)&v2183[8]) & 0x8000000000000000) != 0)
                {
                  do
                  {
                    v1487 = (_QWORD *)*v1475;
                    if (*v1475)
                    {
                      do
                      {
                        v1476 = v1487;
                        v1487 = (_QWORD *)v1487[1];
                      }
                      while (v1487);
                    }
                    else
                    {
                      do
                      {
                        v1476 = (_QWORD *)v1475[2];
                        _ZF = *v1476 == (_QWORD)v1475;
                        v1475 = v1476;
                      }
                      while (_ZF);
                    }
                    v1475 = v1476;
                    _CF = __CFADD__(v1474++, 1);
                  }
                  while (!_CF);
                }
                else if (v1474)
                {
                  do
                  {
                    v1486 = (_QWORD *)v1475[1];
                    if (v1486)
                    {
                      do
                      {
                        v1476 = v1486;
                        v1486 = (_QWORD *)*v1486;
                      }
                      while (v1486);
                    }
                    else
                    {
                      do
                      {
                        v1476 = (_QWORD *)v1475[2];
                        _ZF = *v1476 == (_QWORD)v1475;
                        v1475 = v1476;
                      }
                      while (!_ZF);
                    }
                    v1475 = v1476;
                    v1506 = v1474-- <= 1;
                  }
                  while (!v1506);
                }
                else
                {
                  v1476 = *(_QWORD **)(*(_QWORD *)v2183 + 48);
                }
                v1477 = (void *)v1476[4];
                v1478 = (void *)v1476[5];
                v1479 = *(_QWORD **)(*(_QWORD *)v2183 + 296);
                if (v1473 < 0)
                {
                  do
                  {
                    v1488 = (_QWORD *)*v1479;
                    if (*v1479)
                    {
                      do
                      {
                        v1480 = v1488;
                        v1488 = (_QWORD *)v1488[1];
                      }
                      while (v1488);
                    }
                    else
                    {
                      do
                      {
                        v1480 = (_QWORD *)v1479[2];
                        _ZF = *v1480 == (_QWORD)v1479;
                        v1479 = v1480;
                      }
                      while (_ZF);
                    }
                    v1479 = v1480;
                    _CF = __CFADD__(v1473++, 1);
                  }
                  while (!_CF);
                }
                else if (*(_QWORD *)&v2183[8] <= *(_QWORD *)&v2183[16])
                {
                  do
                  {
                    v1489 = (_QWORD *)v1479[1];
                    if (v1489)
                    {
                      do
                      {
                        v1480 = v1489;
                        v1489 = (_QWORD *)*v1489;
                      }
                      while (v1489);
                    }
                    else
                    {
                      do
                      {
                        v1480 = (_QWORD *)v1479[2];
                        _ZF = *v1480 == (_QWORD)v1479;
                        v1479 = v1480;
                      }
                      while (!_ZF);
                    }
                    v1479 = v1480;
                    v1506 = v1473-- <= 1;
                  }
                  while (!v1506);
                }
                else
                {
                  v1480 = *(_QWORD **)(*(_QWORD *)v2183 + 296);
                }
                v1481 = *((_DWORD *)v1480 + 8);
                v2150[0] = v1477;
                v2150[1] = v1478;
                *(_DWORD *)v2151 = v1481;
                if ((_DWORD)v1471 != v1481 || v1469 != v1477 || v1470 != (_DWORD)v1478)
                {
                  v1484 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2068 + 8) + 1784), (uint64_t *)v2150);
                  if (v1484)
                    v1485 = v1484[13];
                  else
                    v1485 = 0;
                  sub_20F717038(v1470, v1471, v2150[1], *(unsigned int *)v2151, v1423, v1485, v2068 + 3144, v1331++, (__n128)vcvtq_f64_f32(v1426[1]), v1419 * v1426[4].f32[0], v2068 + 4712);
                  v1472 = *(_QWORD *)&v2183[16];
                }
                *(_QWORD *)&v2183[16] = v1472 + 1;
                if (v1472 + 1 == v1418)
                  break;
                *(_QWORD *)&v2149[0] += 64;
                if (*(_QWORD *)&v2149[0] == v1422)
                  break;
                v1426 = (float32x2_t *)sub_20F6236F0((uint64_t **)object);
              }
              while (v1426);
              v1326 = v2039;
              v1329 = v2033;
              goto LABEL_1255;
            }
          }
          v1436 = (void *)(v1435 + 40);
          v1437 = *(unsigned __int8 *)(v1435 + 192);
          if (v1437)
            v1438 = v1436;
          else
            v1438 = 0;
          LODWORD(v2150[0]) = v1423;
          BYTE4(v2150[0]) = 1;
          v2150[1] = v1438;
          if (v1437)
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v1436 + 24))(v1436))
            {
              v1439 = (double *)v2150[1];
              _Q1 = *((_OWORD *)v2150[1] + 4);
              _D3 = *((_QWORD *)v2150[1] + 9);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *((double *)v2150[1] + 10) * *((double *)v2150[1] + 10)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            else
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v1439 = (double *)v2150[1];
              if (!v2150[1])
                goto LABEL_1286;
            }
            if ((*(unsigned int (**)(double *))(*(_QWORD *)v1439 + 24))(v1439))
            {
              v1443 = (uint64_t *)*((_QWORD *)v1439 + 12);
              v1444 = *v1443;
              v1445 = (double *)v1443[2];
              v1446 = v1443[4];
              v1447 = (double *)v1443[6];
              _D1 = v1439[2] - v1445[1];
              v1449 = v1439[3] - v1445[2];
              _Q3.f64[0] = *(float64_t *)(v1444 + 16);
              _Q7 = *(_OWORD *)(v1444 + 48);
              _Q3.f64[1] = *(float64_t *)(v1444 + 40);
              v1452 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1444, *(int64x2_t *)(v1444 + 24)), v1439[1] - *v1445), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1444, *(int64x2_t *)(v1444 + 24)), _D1), _Q3, v1449);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1454 = _D2 + *(double *)(v1444 + 64) * v1449;
              v1455 = v1452.f64[0] - *v1447;
              _D2 = v1452.f64[1] - v1447[1];
              v1457 = v1454 - v1447[2];
              _Q3.f64[0] = *(float64_t *)(v1446 + 16);
              _Q4 = *(int64x2_t *)v1446;
              _Q6 = *(int64x2_t *)(v1446 + 24);
              _Q16 = *(_OWORD *)(v1446 + 48);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q3.f64[1] = *(float64_t *)(v1446 + 40);
              _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1446, _Q6), v1455), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1446, _Q6), _D2), _Q3, v1457);
              __asm
              {
                FMLA            D3, D2, V16.D[1]
                FMLA            D1, D2, V6.D[1]
              }
              _D1 = _D1 + v1457 * _Q3.f64[1];
              __asm { FMLA            D2, D1, V17.D[1] }
              *(_QWORD *)v2151 = sqrt(_D2+ (_Q3.f64[0] + v1457 * *(double *)(v1446 + 64))* (_Q3.f64[0] + *(double *)(v1446 + 64) * v1457));
              _Q1 = *((_OWORD *)v1439 + 4);
              _Q3.f64[0] = v1439[9];
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + v1439[10] * v1439[10]) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if (sub_20F716438((uint64_t)v2005, (unsigned int *)v2150))
              {
                *(_BYTE *)(v2068 + 6588) = 0;
                *(_DWORD *)(v2068 + 6584) = 0;
              }
            }
          }
LABEL_1286:
          v1435 = *v1327;
          *(_DWORD *)(*v1327 + 224) = 1;
          goto LABEL_1287;
        }
      }
    }
  }
LABEL_1338:
  v2067 = *(unsigned int *)(v2068 + 2152);
  v2023 = *(unsigned int *)(v2068 + 1920);
  v1490 = *(_QWORD *)(v2068 + 24);
  for (k = *(_QWORD *)(v2068 + 32); v1490 != k; v1490 += 8)
  {
    if (v2067 > (uint64_t)(*(_QWORD *)(*(_QWORD *)v1490 + 208) - *(_QWORD *)(*(_QWORD *)v1490 + 200)) >> 6)
    {
      v1492 = *(_DWORD *)(*(_QWORD *)v1490 + 32);
      v1493 = *(char **)(v2068 + 5512);
      v1494 = *(char **)(v2068 + 5520);
      if (v1494 != v1493)
      {
        v1495 = (v1494 - v1493) >> 4;
        do
        {
          v1496 = v1495 >> 1;
          v1497 = (unsigned int *)&v1493[16 * (v1495 >> 1)];
          v1499 = *v1497;
          v1498 = (char *)(v1497 + 4);
          v1495 += ~(v1495 >> 1);
          if (v1499 < v1492)
            v1493 = v1498;
          else
            v1495 = v1496;
        }
        while (v1495);
      }
      if (v1493 != v1494 && *(_DWORD *)v1493 == v1492)
      {
        if (sub_20F623A0C((uint64_t)v2005, v1492))
        {
          *(_WORD *)(v2068 + 6588) = 0;
          *(_DWORD *)(v2068 + 6584) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2372, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        *(_DWORD *)(*(_QWORD *)v1490 + 224) = 0;
      }
    }
  }
  v1500 = sub_20F6BBE5C((uint64_t)v2005);
  v1501 = (uint64_t *)v2068;
  v1503 = *(_QWORD *)(v2068 + 24);
  v1502 = *(_QWORD *)(v2068 + 32);
  v1504 = v1502 - v1503;
  v1505 = (v1502 - v1503) >> 3;
  v1506 = v1505 > v2023 && *(_DWORD *)(v2068 + 2184) + v1500 > v2023;
  if (v1506)
  {
    if (*(_BYTE *)(v2068 + 2104))
    {
      v1541 = *(_QWORD **)(v2068 + 8);
      v1542 = v1541[8];
      v1543 = (_QWORD *)v1541[6];
      if ((v1542 & 0x1FFFFFFFELL) != 0)
      {
        v1544 = (v1542 >> 1);
        do
        {
          v1545 = (_QWORD *)v1543[1];
          if (v1545)
          {
            do
            {
              v1546 = v1545;
              v1545 = (_QWORD *)*v1545;
            }
            while (v1545);
          }
          else
          {
            do
            {
              v1546 = (_QWORD *)v1543[2];
              _ZF = *v1546 == (_QWORD)v1543;
              v1543 = v1546;
            }
            while (!_ZF);
          }
          v1543 = v1546;
          v1506 = v1544-- <= 1;
        }
        while (!v1506);
      }
      else
      {
        v1546 = (_QWORD *)v1541[6];
      }
      v1578 = v1541[225];
      *(_OWORD *)object = *((_OWORD *)v1546 + 2);
      v1579 = (_QWORD *)v1541[37];
      if (v1579 == v1541 + 38)
      {
        v2020 = (int64x2_t **)(v1578 + 40);
      }
      else
      {
        v1501 = (uint64_t *)v2068;
        do
        {
          *(_DWORD *)&object[16] = *((_DWORD *)v1579 + 8);
          v1580 = sub_20E9DF85C(v1541 + 223, (uint64_t *)object);
          if (v1580)
          {
            v2020 = (int64x2_t **)(v1580 + 5);
            v1501 = (uint64_t *)v2068;
            goto LABEL_1477;
          }
          v1581 = (_QWORD *)v1579[1];
          if (v1581)
          {
            do
            {
              v1582 = v1581;
              v1581 = (_QWORD *)*v1581;
            }
            while (v1581);
          }
          else
          {
            do
            {
              v1582 = (_QWORD *)v1579[2];
              _ZF = *v1582 == (_QWORD)v1579;
              v1579 = v1582;
            }
            while (!_ZF);
          }
          v1541 = *(_QWORD **)(v2068 + 8);
          v1579 = v1582;
        }
        while (v1582 != v1541 + 38);
        v2020 = 0;
      }
LABEL_1477:
      v1586 = v1501 + 4;
      v1587 = v1501 + 3;
      v1588 = (v1501[4] - v1501[3]) >> 3;
      *(int64x2_t *)object = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v2041 = v1501 + 396;
      sub_20F623C14((uint64_t)(v1501 + 396), v1588, object);
      v2150[0] = *(void **)(*(_QWORD *)(v2068 + 8) + 48);
      v1589 = v1501[3];
      v1590 = (uint64_t *)v1501[4];
      v1591 = 126 - 2 * __clz((uint64_t)((uint64_t)v1590 - v1589) >> 3);
      *(_QWORD *)object = v2068;
      *(_QWORD *)&object[8] = v2150;
      *(_QWORD *)v2183 = object;
      if (v1590 == (uint64_t *)v1589)
        v1592 = 0;
      else
        v1592 = v1591;
      sub_20F71ACB8(v1589, v1590, (_QWORD ***)v2183, v1592, 1);
      v2035 = v2068 + 3216;
      bzero((void *)(v2068 + 3216), 0x480uLL);
      v1593 = (*v1586 - *v1587) >> 3;
      v2183[0] = 0;
      v2063 = (uint64_t *)(v2068 + 3192);
      sub_20EDCA4D0(v2068 + 3192, v1593, v2183);
      v1594 = *v1587;
      if (*v1586 == *v1587)
      {
        v1596 = 0;
        v2017 = *v1586;
        v1594 = *v1586;
        v2029 = 0;
        if (v2023)
          goto LABEL_1556;
LABEL_1847:
        v1868 = v2017;
        v1501 = (uint64_t *)v2068;
        if (v2017 != v1594)
        {
          v1869 = 0;
          do
          {
            if (((*(_QWORD *)(*v2063 + ((v1869 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1869) & 1) == 0)
            {
              v1870 = *(_QWORD *)(v1594 + 8 * v1869);
              if (sub_20F623A0C((uint64_t)v2005, *(_DWORD *)(v1870 + 32)))
              {
                *(_WORD *)(v2068 + 6588) = 0;
                *(_DWORD *)(v2068 + 6584) = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2285, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              *(_DWORD *)(v1870 + 224) = 0;
              v1501 = (uint64_t *)v2068;
              v1594 = *(_QWORD *)(v2068 + 24);
              v1868 = *(_QWORD *)(v2068 + 32);
            }
            ++v1869;
          }
          while (v1869 < (v1868 - v1594) >> 3);
        }
        goto LABEL_1359;
      }
      v1595 = 0;
      v1596 = 0;
      v1597 = 0;
      if ((unint64_t)((*v1586 - *v1587) >> 3) <= 1)
        v1598 = 1;
      else
        v1598 = (*v1586 - *v1587) >> 3;
      v1599 = v2068;
LABEL_1487:
      v1600 = *(_QWORD *)(v1594 + 8 * v1597);
      v1601 = *(_QWORD *)(v1600 + 32);
      if (*(_DWORD *)(v1600 + 224) == 2)
      {
        v1602 = *(char **)(v2068 + 5512);
        v1603 = *(char **)(v2068 + 5520);
        if (v1603 != v1602)
        {
          v1604 = (v1603 - v1602) >> 4;
          do
          {
            v1605 = v1604 >> 1;
            v1606 = (unsigned int *)&v1602[16 * (v1604 >> 1)];
            v1608 = *v1606;
            v1607 = (char *)(v1606 + 4);
            v1604 += ~(v1604 >> 1);
            if (v1608 < v1601)
              v1602 = v1607;
            else
              v1604 = v1605;
          }
          while (v1604);
        }
        if (v1602 != v1603 && *(_DWORD *)v1602 == (_DWORD)v1601)
          goto LABEL_1496;
      }
      v1632 = *(int8x8_t *)(v2068 + 3112);
      if (!*(_QWORD *)&v1632)
        goto LABEL_1531;
      v1633 = *(_QWORD *)(v1600 + 32);
      v1634 = (uint8x8_t)vcnt_s8(v1632);
      v1634.i16[0] = vaddlv_u8(v1634);
      if (v1634.u32[0] > 1uLL)
      {
        v1635 = *(_QWORD *)(v1600 + 32);
        if (*(_QWORD *)&v1632 <= v1633)
          v1635 = v1633 % *(_QWORD *)&v1632;
      }
      else
      {
        v1635 = (v1632.i32[0] - 1) & v1633;
      }
      v1636 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1635);
      if (!v1636 || (v1637 = *v1636) == 0)
      {
LABEL_1531:
        v1649 = *(char **)(v2068 + 5512);
        v1650 = *(char **)(v2068 + 5520);
        if (v1650 != v1649)
        {
          v1651 = (v1650 - v1649) >> 4;
          do
          {
            v1652 = v1651 >> 1;
            v1653 = (unsigned int *)&v1649[16 * (v1651 >> 1)];
            v1655 = *v1653;
            v1654 = (char *)(v1653 + 4);
            v1651 += ~(v1651 >> 1);
            if (v1655 < v1601)
              v1649 = v1654;
            else
              v1651 = v1652;
          }
          while (v1651);
        }
        if (v1649 == v1650 || *(_DWORD *)v1649 != (_DWORD)v1601)
        {
          *(_QWORD *)(*v2063 + ((v1597 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1597;
          ++v1596;
        }
        goto LABEL_1486;
      }
      if (v1634.u32[0] < 2uLL)
      {
        v1638 = *(_QWORD *)&v1632 - 1;
        while (1)
        {
          v1640 = v1637[1];
          if (v1640 == v1633)
          {
            if (*((_DWORD *)v1637 + 4) == (_DWORD)v1601)
              goto LABEL_1523;
          }
          else if ((v1640 & v1638) != v1635)
          {
            goto LABEL_1531;
          }
          v1637 = (uint64_t *)*v1637;
          if (!v1637)
            goto LABEL_1531;
        }
      }
      while (1)
      {
        v1639 = v1637[1];
        if (v1639 == v1633)
        {
          if (*((_DWORD *)v1637 + 4) == (_DWORD)v1601)
          {
LABEL_1523:
            v1642 = *(char **)(v2068 + 5512);
            v1643 = *(char **)(v2068 + 5520);
            if (v1643 != v1642)
            {
              v1644 = (v1643 - v1642) >> 4;
              do
              {
                v1645 = v1644 >> 1;
                v1646 = (unsigned int *)&v1642[16 * (v1644 >> 1)];
                v1648 = *v1646;
                v1647 = (char *)(v1646 + 4);
                v1644 += ~(v1644 >> 1);
                if (v1648 < v1601)
                  v1642 = v1647;
                else
                  v1644 = v1645;
              }
              while (v1644);
            }
            if (v1642 == v1643 || *(_DWORD *)v1642 != (_DWORD)v1601)
              goto LABEL_1531;
LABEL_1496:
            v1609 = (double *)(*v2041 + 16 * v1597);
            v1610 = *v1609;
            if (*v1609 <= 6.28318531)
            {
              v1631 = v1609[1];
            }
            else
            {
              v1611 = v1600 + 40;
              if (!*(_BYTE *)(v1600 + 192))
                v1611 = 0;
              _Q1 = *(_OWORD *)(v1611 + 8);
              v1613 = (double *)v2020[2];
              v1614 = v2020[4];
              v1615 = (double *)v2020[6];
              v1616 = *(double *)&_Q1 - *v1613;
              *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1613[1];
              v1617 = *(double *)(v1611 + 24) - v1613[2];
              *(_QWORD *)&v1618.f64[0] = (*v2020)[1].i64[0];
              _Q7 = (*v2020)[3];
              *(_QWORD *)&v1618.f64[1] = (*v2020)[2].i64[1];
              v1620 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1616), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1618, v1617);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1622 = _D2 + *(double *)(*v2020)[4].i64 * v1617;
              _D2 = v1620.f64[1] - v1615[1];
              v1624 = v1622 - v1615[2];
              *(_QWORD *)&v1618.f64[0] = v1614[1].i64[0];
              _Q7 = v1614[3];
              *(_QWORD *)&v1618.f64[1] = v1614[2].i64[1];
              __szk = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1614, *(int64x2_t *)((char *)v1614 + 24)), v1620.f64[0] - *v1615), (float64x2_t)vzip2q_s64(*v1614, *(int64x2_t *)((char *)v1614 + 24)), _D2), v1618, v1624);
              __asm { FMLA            D1, D2, V7.D[1] }
              v1626 = *(double *)&_Q1 + *(double *)v1614[4].i64 * v1624;
              *(float *)&v1624 = __szk.f64[0];
              *(float *)&_Q1 = v1626;
              v1627 = v1594;
              v1610 = atan2f(*(float *)&v1624, *(float *)&_Q1) + 3.14159265;
              *v1609 = v1610;
              v1628 = __szk.f64[1];
              v1629 = sqrt(vmulq_f64(__szk, __szk).f64[0] + v1626 * v1626);
              v1630 = atan2f(v1628, v1629);
              v1594 = v1627;
              v1631 = v1630 + 1.57079633;
              v1609[1] = v1631;
            }
            v1641 = (unint64_t)(v1610 * 3.81971863) - ((unint64_t)(v1610 * 3.81971863) == 24);
            ++*(_DWORD *)(v2035
                        + 48 * v1641
                        + 4 * ((unint64_t)(v1631 * 3.81971863) - ((unint64_t)(v1631 * 3.81971863) == 12)));
            ++v1595;
            ++v1596;
            *(_QWORD *)(*v2063 + ((v1597 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1597;
LABEL_1486:
            if (++v1597 == v1598)
            {
              v1656 = 0;
              v1657 = 0;
              do
              {
                if ((*(_QWORD *)(*v2063 + 8 * (v1657 >> 6)) & (1 << v1657)) == 0)
                {
                  v1682 = *(_QWORD *)(v1594 + 8 * v1657);
                  v1683 = *(_QWORD *)(v1682 + 200);
                  v1684 = *(_QWORD *)(v1682 + 208);
                  if (*(unsigned int *)(v1599 + 2112) <= (unint64_t)((v1684 - v1683) >> 6))
                  {
                    v1599 = v2068;
                    if (sub_20F71AB84(v1683, v1684) >= (unint64_t)*(unsigned int *)(v2068 + 2108))
                    {
                      ++v1595;
                      ++v1596;
                      *(_QWORD *)(*v2063 + 8 * (v1657 >> 6)) |= 1 << v1657;
                      if (v1595 >= v2023)
                      {
                        v1594 = *(_QWORD *)(v2068 + 24);
                        v2017 = *(_QWORD *)(v2068 + 32);
                        goto LABEL_1847;
                      }
                      v1685 = *v2041;
                      v1675 = *(double *)(*v2041 + v1656);
                      if (v1675 > 6.28318531)
                      {
                        v1658 = *(_QWORD *)(*(_QWORD *)(v2068 + 24) + 8 * v1657);
                        if (*(_BYTE *)(v1658 + 192))
                          v1659 = v1658 + 40;
                        else
                          v1659 = 0;
                        _Q1 = *(_OWORD *)(v1659 + 8);
                        v1661 = (double *)v2020[2];
                        v1662 = v2020[4];
                        v1663 = (double *)v2020[6];
                        v1664 = *(double *)&_Q1 - *v1661;
                        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1661[1];
                        v1665 = *(double *)(v1659 + 24) - v1661[2];
                        *(_QWORD *)&v1666.f64[0] = (*v2020)[1].i64[0];
                        _Q7 = (*v2020)[3];
                        *(_QWORD *)&v1666.f64[1] = (*v2020)[2].i64[1];
                        v1668 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1664), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1666, v1665);
                        __asm { FMLA            D2, D1, V7.D[1] }
                        v1670 = _D2 + *(double *)(*v2020)[4].i64 * v1665;
                        _D2 = v1668.f64[1] - v1663[1];
                        v1672 = v1670 - v1663[2];
                        *(_QWORD *)&v1666.f64[0] = v1662[1].i64[0];
                        _Q7 = v1662[3];
                        *(_QWORD *)&v1666.f64[1] = v1662[2].i64[1];
                        __szl = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1662, *(int64x2_t *)((char *)v1662 + 24)), v1668.f64[0] - *v1663), (float64x2_t)vzip2q_s64(*v1662, *(int64x2_t *)((char *)v1662 + 24)), _D2), v1666, v1672);
                        __asm { FMLA            D1, D2, V7.D[1] }
                        v1674 = *(double *)&_Q1 + *(double *)v1662[4].i64 * v1672;
                        *(float *)&v1672 = __szl.f64[0];
                        *(float *)&_Q1 = v1674;
                        v1675 = atan2f(*(float *)&v1672, *(float *)&_Q1) + 3.14159265;
                        v1676 = (double *)(v1685 + v1656);
                        *v1676 = v1675;
                        v1677 = __szl.f64[1];
                        v1678 = sqrt(vmulq_f64(__szl, __szl).f64[0] + v1674 * v1674);
                        v1679 = atan2f(v1677, v1678) + 1.57079633;
                        v1676[1] = v1679;
                      }
                      else
                      {
                        v1679 = *(double *)(v1685 + v1656 + 8);
                      }
                      v1680 = (unint64_t)(v1675 * 3.81971863) - ((unint64_t)(v1675 * 3.81971863) == 24);
                      v1681 = 4
                            * ((unint64_t)(v1679 * 3.81971863) - ((unint64_t)(v1679 * 3.81971863) == 12));
                      ++*(_DWORD *)(v2035 + 48 * v1680 + v1681);
                    }
                  }
                }
                ++v1657;
                v1594 = *(_QWORD *)(v1599 + 24);
                v1656 += 16;
              }
              while (v1657 < (*(_QWORD *)(v1599 + 32) - v1594) >> 3);
              v2017 = *(_QWORD *)(v1599 + 32);
              v2029 = v1595;
              if (v1595 >= v2023)
                goto LABEL_1847;
LABEL_1556:
              v1686 = (v2017 - v1594) >> 3;
              if (v2017 == v1594)
              {
                if (v1596 < v1686)
                {
                  while (1)
                    ;
                }
                goto LABEL_1847;
              }
              v1687 = 1;
LABEL_1561:
              if (v1596 >= v1686)
                goto LABEL_1847;
              __szh = v1596;
              v1688 = 0;
              v1689 = 0;
              v1690 = *v2063;
              while (1)
              {
                v1691 = *(_QWORD *)(v1690 + 8 * (v1689 >> 6));
                if ((v1691 & (1 << v1689)) == 0)
                {
                  v1692 = *v2041;
                  v1693 = *(double *)(*v2041 + v1688);
                  if (v1693 <= 6.28318531)
                  {
                    v1716 = *(double *)(v1692 + v1688 + 8);
                  }
                  else
                  {
                    v1694 = *(_QWORD *)(v1594 + 8 * v1689);
                    v1695 = *(_BYTE *)(v1694 + 192) ? v1694 + 40 : 0;
                    _Q1 = *(_OWORD *)(v1695 + 8);
                    v1697 = (double *)v2020[2];
                    v1698 = v2020[4];
                    v1699 = (double *)v2020[6];
                    v1700 = *(double *)&_Q1 - *v1697;
                    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1697[1];
                    v1701 = *(double *)(v1695 + 24) - v1697[2];
                    *(_QWORD *)&v1702.f64[0] = (*v2020)[1].i64[0];
                    _Q7 = (*v2020)[3];
                    *(_QWORD *)&v1702.f64[1] = (*v2020)[2].i64[1];
                    v1704 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1700), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1702, v1701);
                    __asm { FMLA            D2, D1, V7.D[1] }
                    v1706 = _D2 + *(double *)(*v2020)[4].i64 * v1701;
                    _D2 = v1704.f64[1] - v1699[1];
                    v1708 = v1706 - v1699[2];
                    *(_QWORD *)&v1702.f64[0] = v1698[1].i64[0];
                    _Q7 = v1698[3];
                    *(_QWORD *)&v1702.f64[1] = v1698[2].i64[1];
                    __dstb = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1698, *(int64x2_t *)((char *)v1698 + 24)), v1704.f64[0] - *v1699), (float64x2_t)vzip2q_s64(*v1698, *(int64x2_t *)((char *)v1698 + 24)), _D2), v1702, v1708);
                    __asm { FMLA            D1, D2, V7.D[1] }
                    v1710 = *(double *)&_Q1 + *(double *)v1698[4].i64 * v1708;
                    *(float *)&v1708 = __dstb.f64[0];
                    *(float *)&_Q1 = v1710;
                    v1711 = v1594;
                    v1693 = atan2f(*(float *)&v1708, *(float *)&_Q1) + 3.14159265;
                    v1712 = (double *)(v1692 + v1688);
                    *v1712 = v1693;
                    v1713 = __dstb.f64[1];
                    v1714 = sqrt(vmulq_f64(__dstb, __dstb).f64[0] + v1710 * v1710);
                    v1715 = atan2f(v1713, v1714);
                    v1594 = v1711;
                    v1716 = v1715 + 1.57079633;
                    v1712[1] = v1716;
                  }
                  v1717 = (unint64_t)(v1716 * 3.81971863) - ((unint64_t)(v1716 * 3.81971863) == 12);
                  v1718 = v2035
                        + 48 * ((unint64_t)(v1693 * 3.81971863) - ((unint64_t)(v1693 * 3.81971863) == 24));
                  v1719 = *(unsigned int *)(v1718 + 4 * v1717);
                  if (v1687 > v1719)
                  {
                    ++__szh;
                    *(_QWORD *)(v1690 + 8 * (v1689 >> 6)) = v1691 | (1 << v1689);
                    if (++v2029 >= v2023)
                    {
LABEL_1560:
                      ++v1687;
                      v1596 = __szh;
                      if (v2029 >= v2023)
                        goto LABEL_1847;
                      goto LABEL_1561;
                    }
                    *(_DWORD *)(v1718 + 4 * v1717) = v1719 + 1;
                  }
                }
                ++v1689;
                v1688 += 16;
                if (v1686 == v1689)
                  goto LABEL_1560;
              }
            }
            goto LABEL_1487;
          }
        }
        else
        {
          if (v1639 >= *(_QWORD *)&v1632)
            v1639 %= *(_QWORD *)&v1632;
          if (v1639 != v1635)
            goto LABEL_1531;
        }
        v1637 = (uint64_t *)*v1637;
        if (!v1637)
          goto LABEL_1531;
      }
    }
    v1547 = *(double *)(v2068 + 1992);
    v1548 = *(double *)(v2068 + 2000);
    v1549 = *(double *)(v2068 + 2008);
    v1550 = *(double *)(v2068 + 2016);
    v1551 = *(double *)(v2068 + 2024);
    v1552 = *(_DWORD *)(v2068 + 2100);
    v2028 = *(unsigned __int8 *)(v2068 + 2116);
    memset(v2183, 0, 24);
    v1553 = *(_QWORD **)(v2068 + 8);
    v1554 = v1553[39];
    v2003 = v1552;
    if (v1554)
    {
      if (v1554 >> 62)
        sub_20E867F44();
      v1555 = operator new(4 * v1554);
      v1554 = (unint64_t)&v1555[v1554];
      *(_QWORD *)v2183 = v1555;
      *(_QWORD *)&v2183[8] = v1555;
      *(_QWORD *)&v2183[16] = v1554;
      v1556 = (_QWORD *)v1553[37];
      if (v1556 != v1553 + 38)
        goto LABEL_1422;
    }
    else
    {
      v1555 = 0;
      v1556 = (_QWORD *)v1553[37];
      if (v1556 != v1553 + 38)
      {
LABEL_1422:
        v2034 = v1503;
        v2040 = v1502;
        __szg = v1502 - v1503;
        v2061 = (v1502 - v1503) >> 3;
        v1557 = v1555;
        v1558 = v1555;
        while (1)
        {
          if (!(unsigned __int16)*((_DWORD *)v1556 + 8))
            goto LABEL_1427;
          v1559 = HIWORD(*((_DWORD *)v1556 + 8));
          if ((unint64_t)v1557 < v1554)
          {
            *v1557++ = v1559;
            v1555 = v1557;
LABEL_1427:
            v1560 = (_QWORD *)v1556[1];
            if (v1560)
              goto LABEL_1446;
            goto LABEL_1448;
          }
          v1561 = ((char *)v1557 - v1558) >> 2;
          v1562 = v1561 + 1;
          if ((unint64_t)(v1561 + 1) >> 62)
          {
            *(_QWORD *)&v2183[8] = v1555;
            sub_20E867F44();
          }
          if ((uint64_t)(v1554 - (_QWORD)v1558) >> 1 > v1562)
            v1562 = (uint64_t)(v1554 - (_QWORD)v1558) >> 1;
          if (v1554 - (unint64_t)v1558 >= 0x7FFFFFFFFFFFFFFCLL)
            v1563 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v1563 = v1562;
          if (v1563)
          {
            if (v1563 >> 62)
            {
              *(_QWORD *)&v2183[8] = v1555;
              sub_20E877A38();
            }
            v1564 = operator new(4 * v1563);
            v1565 = &v1564[4 * v1561];
            *v1565 = v1559;
            v1555 = v1565 + 1;
            v1566 = (char *)v1557 - v1558;
            if (v1557 == (_DWORD *)v1558)
              goto LABEL_1443;
          }
          else
          {
            v1564 = 0;
            v1565 = (_DWORD *)(4 * v1561);
            *(_DWORD *)(4 * v1561) = v1559;
            v1555 = (_DWORD *)(4 * v1561 + 4);
            v1566 = (char *)v1557 - v1558;
            if (v1557 == (_DWORD *)v1558)
              goto LABEL_1443;
          }
          v1567 = v1566 - 4;
          if (v1567 < 0xBC)
          {
            v1568 = v1557;
            goto LABEL_1442;
          }
          v1571 = ((char *)(v1557 - 1) - v1558) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v1564[(char *)v1557 - v1558 - 4 - v1571] > &v1564[(char *)v1557 - v1558 - 4])
          {
            v1568 = v1557;
            do
            {
LABEL_1442:
              v1569 = *--v1568;
              *--v1565 = v1569;
            }
            while (v1568 != (_DWORD *)v1558);
            goto LABEL_1443;
          }
          if ((_DWORD *)((char *)v1557 - v1571 - 4) > v1557 - 1)
          {
            v1568 = v1557;
            goto LABEL_1442;
          }
          if ((unint64_t)(v1558 - v1564) < 0x20)
          {
            v1568 = v1557;
            goto LABEL_1442;
          }
          v1572 = (v1567 >> 2) + 1;
          v1573 = 4 * (v1572 & 0x7FFFFFFFFFFFFFF8);
          v1568 = &v1557[v1573 / 0xFFFFFFFFFFFFFFFCLL];
          v1565 = (_DWORD *)((char *)v1565 - v1573);
          v1574 = &v1564[4 * v1561 - 16];
          v1575 = (__int128 *)(v1557 - 4);
          v1576 = v1572 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v1577 = *v1575;
            *(v1574 - 1) = *(v1575 - 1);
            *v1574 = v1577;
            v1574 -= 2;
            v1575 -= 2;
            v1576 -= 8;
          }
          while (v1576);
          if (v1572 != (v1572 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_1442;
LABEL_1443:
          v1554 = (unint64_t)&v1564[4 * v1563];
          *(_QWORD *)v2183 = v1565;
          *(_QWORD *)&v2183[16] = v1554;
          if (v1558)
            operator delete(v1558);
          v1557 = v1555;
          v1558 = v1565;
          v1560 = (_QWORD *)v1556[1];
          if (v1560)
          {
            do
            {
LABEL_1446:
              v1570 = v1560;
              v1560 = (_QWORD *)*v1560;
            }
            while (v1560);
            goto LABEL_1423;
          }
          do
          {
LABEL_1448:
            v1570 = (_QWORD *)v1556[2];
            _ZF = *v1570 == (_QWORD)v1556;
            v1556 = v1570;
          }
          while (!_ZF);
LABEL_1423:
          v1553 = *(_QWORD **)(v2068 + 8);
          v1556 = v1570;
          if (v1570 == v1553 + 38)
          {
            *(_QWORD *)&v2183[8] = v1555;
            v1505 = v2061;
            v1504 = __szg;
            memset(object, 0, 48);
            if (v2040 == v2034)
              goto LABEL_1474;
LABEL_1576:
            v1585 = v2068;
            if (v1504 >= 0x7FFFFFFFFFFFFFF9)
              sub_20E867F44();
            v1720 = 2 * v1504;
            v1584 = (double *)operator new(v1720);
            *(_QWORD *)object = v1584;
            *(_QWORD *)&object[8] = v1584;
            v2062 = &v1584[2 * v1505];
            *(_QWORD *)&object[16] = v2062;
            v1583 = (double *)operator new(v1720);
            *(_QWORD *)&object[24] = v1583;
            *(_QWORD *)&object[32] = v1583;
            v2007 = (char *)&v1583[2 * v1505];
            *(_QWORD *)&object[40] = v2007;
            goto LABEL_1578;
          }
        }
      }
    }
    memset(object, 0, 48);
    if (v1502 != v1503)
      goto LABEL_1576;
LABEL_1474:
    v2007 = 0;
    v2062 = 0;
    v1583 = 0;
    v1584 = 0;
    v1585 = v2068;
LABEL_1578:
    v2150[0] = operator new(0x10uLL);
    v2150[1] = v2150[0];
    *(_QWORD *)v2151 = (char *)v2150[0] + 16;
    v1725 = *(uint64_t **)(v1585 + 24);
    __dst = *(uint64_t **)(v1585 + 32);
    if (v1725 == __dst)
    {
      v1726 = 0;
      v2018 = 0;
      v1802 = (uint64_t)v1583;
      v1728 = v1583;
      v1727 = v1584;
      v1803 = 0;
      goto LABEL_1728;
    }
    v1726 = 0;
    v2018 = 0;
    v2021 = (uint64_t *)v1553[6];
    v1727 = v1584;
    v1728 = v1583;
    while (1)
    {
      v1730 = *(_QWORD *)(*v1725 + 200);
      v1731 = *(unsigned __int16 *)(v1730 + 18);
      v1732 = (unint64_t)(*(_QWORD *)(*v1725 + 208) - v1730) >> 6;
      if (!(_DWORD)v1732)
      {
        v1757 = -1000.0;
        v1758 = *(_DWORD *)(*v1725 + 32);
        if (!v2028)
          goto LABEL_1676;
        goto LABEL_1672;
      }
      v2042 = v1726;
      v2150[1] = v2150[0];
      v1733 = *v1725;
      v1735 = *(uint64_t **)(*v1725 + 200);
      v1734 = *(uint64_t **)(*v1725 + 208);
      if (v1735 != v1734)
        break;
      v1736 = *(_QWORD *)(v2068 + 8);
      v1737 = (uint64_t *)(v1736 + 56);
      v1738 = *(uint64_t **)(v1736 + 56);
      v1739 = v2021;
      if (!v1738)
        goto LABEL_1613;
LABEL_1602:
      v1747 = *v1735;
      v1748 = *((_DWORD *)v1735 + 2);
      v1749 = v1737;
      do
      {
        v1750 = v1738[4];
        if (v1750 < v1747)
        {
          ++v1738;
        }
        else if (v1750 == v1747)
        {
          if (*((_DWORD *)v1738 + 10) < v1748)
            ++v1738;
          else
            v1749 = v1738;
        }
        else
        {
          v1749 = v1738;
        }
        v1738 = (uint64_t *)*v1738;
      }
      while (v1738);
      if (v1749 == v1737 || (v1751 = v1749[4], v1747 < v1751) || v1747 == v1751 && *((_DWORD *)v1749 + 10) > v1748)
LABEL_1613:
        v1749 = v1737;
      v2036 = v1731;
      v1752 = v1583;
      if (v1739 == v1749)
      {
        v1753 = 0;
      }
      else
      {
        v1753 = 0;
        v1754 = v1739;
        do
        {
          v1755 = (uint64_t *)v1754[1];
          if (v1755)
          {
            do
            {
              v1756 = v1755;
              v1755 = (uint64_t *)*v1755;
            }
            while (v1755);
          }
          else
          {
            do
            {
              v1756 = (uint64_t *)v1754[2];
              _ZF = *v1756 == (_QWORD)v1754;
              v1754 = v1756;
            }
            while (!_ZF);
          }
          ++v1753;
          v1754 = v1756;
        }
        while (v1756 != v1749);
      }
      __szi = 0.0;
      if (v1550 == 0.0)
      {
        v1759 = 0.0;
LABEL_1644:
        v1726 = v2042;
        if (v1551 == 0.0)
          goto LABEL_1671;
LABEL_1666:
        v1777 = *(_QWORD *)(v1733 + 200);
        v1778 = *(_QWORD *)(v1733 + 208);
        while (v1778 != v1777)
        {
          v1779 = v1778 - 64;
          v1780 = *(_DWORD *)(v1778 - 48);
          v1778 -= 64;
          if (v1780 == *(_DWORD *)(v1777 + 16))
          {
            v1777 = v1779 + 64;
            break;
          }
        }
        _Q1 = *(_OWORD *)(v1777 - 24);
        _D2 = *(_QWORD *)(v1777 - 16);
        __asm { FMLA            D3, D2, V1.D[1] }
        __szi = *(double *)&_D3;
        goto LABEL_1671;
      }
      v1759 = 15.0;
      if (*(_QWORD *)(v1733 + 208) - (_QWORD)v1735 < 0x80uLL)
        goto LABEL_1644;
      v1760 = *((_DWORD *)v1735 + 4);
      v1761 = *(_QWORD *)(v1736 + 1768);
      if (!v1761)
        goto LABEL_1639;
      v1762 = v1736 + 1768;
      v1763 = v1736 + 1768;
      do
      {
        v1764 = *(_DWORD *)(v1761 + 32);
        v1765 = v1764 >= v1760;
        if (v1764 >= v1760)
          v1766 = (uint64_t *)v1761;
        else
          v1766 = (uint64_t *)(v1761 + 8);
        if (v1765)
          v1763 = v1761;
        v1761 = *v1766;
      }
      while (*v1766);
      if (v1763 != v1762 && *(_DWORD *)(v1763 + 32) <= v1760)
      {
        v1767 = *(_QWORD *)(v1763 + 40);
        v1768 = *(_DWORD *)(v1767 + 992);
        if (v1768 != -1)
        {
LABEL_1640:
          if (v1768 <= 7)
            goto LABEL_1641;
          goto LABEL_1652;
        }
      }
      else
      {
LABEL_1639:
        v1767 = 0;
        v1768 = MEMORY[0x3E0];
        if (MEMORY[0x3E0] != -1)
          goto LABEL_1640;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1885;
      }
      v1768 = *(_DWORD *)(v1767 + 992);
      if (v1768 <= 7)
      {
LABEL_1641:
        if (!v1768)
        {
LABEL_1880:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          goto LABEL_1886;
        }
LABEL_1653:
        v2015 = *(double *)(v1767 + 16);
        goto LABEL_1654;
      }
LABEL_1652:
      if (v1768 < 0xF)
        goto LABEL_1653;
      v2015 = *(double *)(v1767 + 16);
      if (v1768 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_1885:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
LABEL_1886:
          abort();
        }
        if (!*(_DWORD *)(v1767 + 992))
          goto LABEL_1880;
      }
LABEL_1654:
      v1769 = *(float32x2_t **)(v1733 + 200);
      v1770 = *(float32x2_t **)(v1733 + 208);
      if (v1769 == v1770)
      {
        LODWORD(v1722) = 0;
        v1772 = 0;
      }
      else
      {
        v1771 = 0;
        v1772 = 0;
        v1773 = 1.0;
        LODWORD(v1722) = 0;
        do
        {
          while (v1769[2].i32[0] != v1760)
          {
            _D3 = v1724;
            v1769 += 8;
            if (v1769 == v1770)
              goto LABEL_1663;
          }
          _D3 = v1769[4];
          if ((v1771 & 1) != 0)
          {
            v1772 = vadd_f32(v1772, vmul_n_f32(vsub_f32(_D3, v1724), v1773));
            *(float *)&v1722 = *(float *)&v1722 + v1773;
            v1773 = v1773 * 1.2;
          }
          v1771 = 1;
          v1769 += 8;
          v1724 = _D3;
        }
        while (v1769 != v1770);
      }
LABEL_1663:
      v1774.f64[0] = v2015;
      v1774.f64[1] = *(float64_t *)(v1767 + 40);
      *(float32x2_t *)&v1774.f64[0] = vcvt_f32_f64(v1774);
      v1775 = vdiv_f32(v1772, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v1722, 0));
      v1776 = vdiv_f32(vsub_f32((float32x2_t)vand_s8((int8x8_t)vadd_f32(*(float32x2_t *)&v1774.f64[0], *(float32x2_t *)&v1774.f64[0]), (int8x8_t)vcgtz_f32(v1775)), _D3), v1775);
      if (v1776.f32[1] < v1776.f32[0])
        v1776.f32[0] = v1776.f32[1];
      v1759 = fminf(fmaxf(v1776.f32[0], 0.0), 15.0);
      v1733 = *v1725;
      v1726 = v2042;
      if (v1551 != 0.0)
        goto LABEL_1666;
LABEL_1671:
      *(double *)&v1721 = v1550 * v1759
                        + v1549 * (double)v1753
                        + v1548 * (double)v1732
                        + v1547 * (double)(unint64_t)((((char *)v2150[1] - (char *)v2150[0]) >> 2) - 1);
      v1722 = v1551 * __szi;
      v1757 = v1551 * __szi + *(double *)&v1721;
      v1583 = v1752;
      v1731 = v2036;
      v1758 = *(_DWORD *)(v1733 + 32);
      if (!v2028)
        goto LABEL_1676;
LABEL_1672:
      v1783 = *(__int32 **)&v2183[8];
      v1784 = wmemchr(*(__int32 **)v2183, v1731, (uint64_t)(*(_QWORD *)&v2183[8] - *(_QWORD *)v2183) >> 2);
      if (v1784)
        v1785 = v1784;
      else
        v1785 = v1783;
      if (v1785 != v1783 || *(_QWORD *)v2183 == *(_QWORD *)&v2183[8])
      {
LABEL_1676:
        if (v1584 >= v2062)
        {
          v1786 = ((char *)v1584 - (char *)v1727) >> 4;
          v1787 = v1786 + 1;
          if ((unint64_t)(v1786 + 1) >> 60)
            goto LABEL_1870;
          if (v2062 - v1727 > v1787)
            v1787 = v2062 - v1727;
          if ((unint64_t)((char *)v2062 - (char *)v1727) >= 0x7FFFFFFFFFFFFFF0)
            v1788 = 0xFFFFFFFFFFFFFFFLL;
          else
            v1788 = v1787;
          if (v1788)
          {
            if (v1788 >> 60)
              goto LABEL_1872;
            v1789 = (char *)operator new(16 * v1788);
            v1790 = (uint64_t)&v1789[16 * v1786];
            *(double *)v1790 = v1757;
            *(_DWORD *)(v1790 + 8) = v1758;
            if (v1584 != v1727)
            {
LABEL_1686:
              v1791 = v1790;
              do
              {
                v1792 = (double *)(v1791 - 16);
                v1721 = *((_OWORD *)v1584 - 1);
                *(_OWORD *)(v1791 - 16) = v1721;
                v1584 -= 2;
                v1791 -= 16;
              }
              while (v1584 != v1727);
              v2062 = (double *)&v1789[16 * v1788];
              v1584 = (double *)(v1790 + 16);
              if (!v1727)
                goto LABEL_1690;
LABEL_1689:
              operator delete(v1727);
LABEL_1690:
              v1727 = v1792;
              goto LABEL_1581;
            }
          }
          else
          {
            v1789 = 0;
            v1790 = 16 * v1786;
            *(double *)v1790 = v1757;
            *(_DWORD *)(v1790 + 8) = v1758;
            if (v1584 != v1727)
              goto LABEL_1686;
          }
          v1792 = (double *)v1790;
          v2062 = (double *)&v1789[16 * v1788];
          v1584 = (double *)(v1790 + 16);
          if (!v1727)
            goto LABEL_1690;
          goto LABEL_1689;
        }
        *v1584 = v1757;
        *((_DWORD *)v1584 + 2) = v1758;
        v1584 += 2;
LABEL_1581:
        v1729 = *v1725++;
        if (*(_DWORD *)(v1729 + 224) == 2)
          ++v1726;
        if (v1725 == __dst)
        {
LABEL_1722:
          v1802 = (uint64_t)v1583;
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          v1803 = ((char *)v1584 - (char *)v1727) >> 4;
          if ((char *)v1584 - (char *)v1727 >= 1)
          {
            v1804 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1805 = ((char *)v1584 - (char *)v1727) >> 4;
            while (1)
            {
              v1806 = (double *)operator new(16 * v1805, v1804);
              if (v1806)
                break;
              v1506 = v1805 > 1;
              v1805 >>= 1;
              if (!v1506)
                goto LABEL_1728;
            }
            v1810 = v1806;
            sub_20F71C998((uint64_t)v1727, v1584, ((char *)v1584 - (char *)v1727) >> 4, v1806, v1805, *(double *)&v1721);
            operator delete(v1810);
            v1808 = ((uint64_t)v1728 - v1802) >> 4;
            v1809 = v2003;
            if ((uint64_t)v1728 - v1802 < 1)
            {
LABEL_1734:
              sub_20F71C998(v1802, v1728, v1808, 0, 0, v1807);
              v1814 = v2150[0];
              v1815 = v2018;
              if (!v2150[0])
              {
LABEL_1736:
                if (*(_QWORD *)v2183)
                {
                  *(_QWORD *)&v2183[8] = *(_QWORD *)v2183;
                  operator delete(*(void **)v2183);
                }
                v1816 = *(_QWORD *)&object[8];
                v1817 = *(_QWORD *)object;
                v1818 = ((*(_QWORD *)&object[8] - *(_QWORD *)object) >> 4) - v1726;
                v1819 = *(unsigned int **)&object[24];
                v1820 = (*(_QWORD *)&object[32] - *(_QWORD *)&object[24]) >> 4;
                v1821 = v1820 - v1815;
                v1822 = v1820 - v1815 + v1818;
                v1823 = v2023 - (v1726 + v1815);
                v1824 = v1822 - v1823;
                if (v1822 > v1823)
                {
                  if ((_DWORD)v1820 == v1815)
                  {
                    v1825 = 0;
                  }
                  else if (v1821 < v1809 || v1824 > v1822 - v1809)
                  {
                    if (v1821 >= v1823)
                      v1825 = v1821 - v1823;
                    else
                      v1825 = 0;
                    v1824 -= v1825;
                  }
                  else
                  {
                    _CF = v1818 >= v1823 - v1809;
                    v1827 = v1818 - (v1823 - v1809);
                    if (!_CF)
                      v1827 = 0;
                    v1825 = v1824 - v1827;
                    v1824 = v1827;
                  }
                  v1828 = (_DWORD *)(v2068 + 6584);
                  if (*(_QWORD *)object != *(_QWORD *)&object[8] && v1824)
                  {
                    do
                    {
                      v1829 = *(unsigned int *)(v1817 + 8);
                      v1830 = *(char **)(v2068 + 5512);
                      v1831 = *(char **)(v2068 + 5520);
                      if (v1831 != v1830)
                      {
                        v1832 = (v1831 - v1830) >> 4;
                        do
                        {
                          v1833 = v1832 >> 1;
                          v1834 = (unsigned int *)&v1830[16 * (v1832 >> 1)];
                          v1836 = *v1834;
                          v1835 = (char *)(v1834 + 4);
                          v1832 += ~(v1832 >> 1);
                          if (v1836 < v1829)
                            v1830 = v1835;
                          else
                            v1832 = v1833;
                        }
                        while (v1832);
                      }
                      if (v1830 == v1831 || *(_DWORD *)v1830 != (_DWORD)v1829)
                        v1830 = *(char **)(v2068 + 5520);
                      v1837 = *(int8x8_t *)(v2068 + 3112);
                      if (v1837)
                      {
                        v1838 = (uint8x8_t)vcnt_s8(v1837);
                        v1838.i16[0] = vaddlv_u8(v1838);
                        if (v1838.u32[0] > 1uLL)
                        {
                          v1839 = *(unsigned int *)(v1817 + 8);
                          if (*(_QWORD *)&v1837 <= v1829)
                            v1839 = v1829 % *(_QWORD *)&v1837;
                        }
                        else
                        {
                          v1839 = (v1837.i32[0] - 1) & v1829;
                        }
                        v1840 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1839);
                        if (v1840)
                        {
                          v1841 = *v1840;
                          if (v1841)
                          {
                            if (v1838.u32[0] < 2uLL)
                            {
                              v1842 = *(_QWORD *)&v1837 - 1;
                              while (1)
                              {
                                v1844 = v1841[1];
                                if (v1844 == v1829)
                                {
                                  if (*((_DWORD *)v1841 + 4) == (_DWORD)v1829)
                                    goto LABEL_1757;
                                }
                                else if ((v1844 & v1842) != v1839)
                                {
                                  goto LABEL_1787;
                                }
                                v1841 = (uint64_t *)*v1841;
                                if (!v1841)
                                  goto LABEL_1787;
                              }
                            }
                            do
                            {
                              v1843 = v1841[1];
                              if (v1843 == v1829)
                              {
                                if (*((_DWORD *)v1841 + 4) == (_DWORD)v1829)
                                  goto LABEL_1757;
                              }
                              else
                              {
                                if (v1843 >= *(_QWORD *)&v1837)
                                  v1843 %= *(_QWORD *)&v1837;
                                if (v1843 != v1839)
                                  break;
                              }
                              v1841 = (uint64_t *)*v1841;
                            }
                            while (v1841);
                          }
                        }
                      }
LABEL_1787:
                      if (v1830 != v1831)
                      {
                        if (sub_20F623A0C((uint64_t)v2005, v1829))
                        {
                          *(_WORD *)(v2068 + 6588) = 0;
                          *v1828 = 0;
                        }
                        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                        {
LABEL_1878:
                          abort();
                        }
                        v1845 = *(_QWORD *)(v2068 + 24);
                        v1846 = *(_QWORD *)(v2068 + 32);
                        if (v1845 != v1846)
                        {
                          while (*(_DWORD *)(v1817 + 8) != *(_DWORD *)(*(_QWORD *)v1845 + 32))
                          {
                            v1845 += 8;
                            if (v1845 == v1846)
                              goto LABEL_1794;
                          }
                        }
                        if (v1845 == v1846)
                        {
LABEL_1794:
                          v1847 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                          v1845 = v1846;
                          if (v1847)
LABEL_1840:
                            abort();
                        }
                        *(_DWORD *)(*(_QWORD *)v1845 + 224) = 0;
                        if (!--v1824)
                          break;
                      }
LABEL_1757:
                      v1817 += 16;
                    }
                    while (v1817 != v1816);
                    v1819 = *(unsigned int **)&object[24];
                  }
                  if (v1825)
                  {
                    v1848 = *(unsigned int **)&object[32];
                    if (v1819 != *(unsigned int **)&object[32])
                    {
                      do
                      {
                        v1849 = v1819[2];
                        v1850 = *(char **)(v2068 + 5512);
                        v1851 = *(char **)(v2068 + 5520);
                        if (v1851 != v1850)
                        {
                          v1852 = (v1851 - v1850) >> 4;
                          do
                          {
                            v1853 = v1852 >> 1;
                            v1854 = (unsigned int *)&v1850[16 * (v1852 >> 1)];
                            v1856 = *v1854;
                            v1855 = (char *)(v1854 + 4);
                            v1852 += ~(v1852 >> 1);
                            if (v1856 < v1849)
                              v1850 = v1855;
                            else
                              v1852 = v1853;
                          }
                          while (v1852);
                        }
                        if (v1850 == v1851 || *(_DWORD *)v1850 != (_DWORD)v1849)
                          v1850 = *(char **)(v2068 + 5520);
                        v1857 = *(int8x8_t *)(v2068 + 3112);
                        if (v1857)
                        {
                          v1858 = (uint8x8_t)vcnt_s8(v1857);
                          v1858.i16[0] = vaddlv_u8(v1858);
                          if (v1858.u32[0] >= 2uLL)
                          {
                            v1859 = v1819[2];
                            if (*(_QWORD *)&v1857 <= v1849)
                              v1859 = v1849 % *(_QWORD *)&v1857;
                          }
                          else
                          {
                            v1859 = (v1857.i32[0] - 1) & v1849;
                          }
                          v1860 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1859);
                          if (v1860)
                          {
                            v1861 = *v1860;
                            if (v1861)
                            {
                              if (v1858.u32[0] < 2uLL)
                              {
                                v1862 = *(_QWORD *)&v1857 - 1;
                                while (1)
                                {
                                  v1864 = v1861[1];
                                  if (v1864 == v1849)
                                  {
                                    if (*((_DWORD *)v1861 + 4) == (_DWORD)v1849)
                                      goto LABEL_1802;
                                  }
                                  else if ((v1864 & v1862) != v1859)
                                  {
                                    goto LABEL_1832;
                                  }
                                  v1861 = (uint64_t *)*v1861;
                                  if (!v1861)
                                    goto LABEL_1832;
                                }
                              }
                              do
                              {
                                v1863 = v1861[1];
                                if (v1863 == v1849)
                                {
                                  if (*((_DWORD *)v1861 + 4) == (_DWORD)v1849)
                                    goto LABEL_1802;
                                }
                                else
                                {
                                  if (v1863 >= *(_QWORD *)&v1857)
                                    v1863 %= *(_QWORD *)&v1857;
                                  if (v1863 != v1859)
                                    break;
                                }
                                v1861 = (uint64_t *)*v1861;
                              }
                              while (v1861);
                            }
                          }
                        }
LABEL_1832:
                        if (v1850 != v1851)
                        {
                          if ((sub_20F623A0C((uint64_t)v2005, v1849) & 1) != 0)
                          {
                            *(_WORD *)(v2068 + 6588) = 0;
                            *v1828 = 0;
                          }
                          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                          {
                            goto LABEL_1878;
                          }
                          v1865 = *(_QWORD *)(v2068 + 24);
                          v1866 = *(_QWORD *)(v2068 + 32);
                          if (v1865 != v1866)
                          {
                            while (v1819[2] != *(_DWORD *)(*(_QWORD *)v1865 + 32))
                            {
                              v1865 += 8;
                              if (v1865 == v1866)
                                goto LABEL_1839;
                            }
                          }
                          if (v1865 == v1866)
                          {
LABEL_1839:
                            v1867 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                            v1865 = v1866;
                            if (v1867)
                              goto LABEL_1840;
                          }
                          *(_DWORD *)(*(_QWORD *)v1865 + 224) = 0;
                          if (!--v1825)
                            break;
                        }
LABEL_1802:
                        v1819 += 4;
                      }
                      while (v1819 != v1848);
                      v1819 = *(unsigned int **)&object[24];
                    }
                  }
                }
                v1501 = (uint64_t *)v2068;
                if (v1819)
                {
                  *(_QWORD *)&object[32] = v1819;
                  operator delete(v1819);
                }
                if (*(_QWORD *)object)
                {
                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                  operator delete(*(void **)object);
                }
                goto LABEL_1359;
              }
LABEL_1735:
              v2150[1] = v1814;
              operator delete(v1814);
              goto LABEL_1736;
            }
LABEL_1731:
            v1811 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1812 = v1808;
            while (1)
            {
              v1813 = (double *)operator new(16 * v1812, v1811);
              if (v1813)
                break;
              v1506 = v1812 > 1;
              v1812 >>= 1;
              if (!v1506)
                goto LABEL_1734;
            }
            v1826 = v1813;
            sub_20F71C998(v1802, v1728, v1808, v1813, v1812, v1807);
            operator delete(v1826);
            v1814 = v2150[0];
            v1815 = v2018;
            if (!v2150[0])
              goto LABEL_1736;
            goto LABEL_1735;
          }
LABEL_1728:
          v1807 = sub_20F71C998((uint64_t)v1727, v1584, v1803, 0, 0, *(double *)&v1721);
          v1808 = ((uint64_t)v1728 - v1802) >> 4;
          v1809 = v2003;
          if ((uint64_t)v1728 - v1802 < 1)
            goto LABEL_1734;
          goto LABEL_1731;
        }
      }
      else
      {
        if (v1728 >= (double *)v2007)
        {
          v1793 = ((char *)v1728 - (char *)v1583) >> 4;
          v1794 = v1793 + 1;
          if (!((unint64_t)(v1793 + 1) >> 60))
          {
            if ((v2007 - (char *)v1583) >> 3 > v1794)
              v1794 = (v2007 - (char *)v1583) >> 3;
            if ((unint64_t)(v2007 - (char *)v1583) >= 0x7FFFFFFFFFFFFFF0)
              v1795 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1795 = v1794;
            if (!v1795)
            {
              v1796 = 0;
              v1797 = 16 * v1793;
              *(double *)v1797 = v1757;
              *(_DWORD *)(v1797 + 8) = v1758;
              if (v1728 != v1583)
                goto LABEL_1706;
              goto LABEL_1720;
            }
            if (!(v1795 >> 60))
            {
              v1796 = (char *)operator new(16 * v1795);
              v1797 = (uint64_t)&v1796[16 * v1793];
              *(double *)v1797 = v1757;
              *(_DWORD *)(v1797 + 8) = v1758;
              if (v1728 != v1583)
              {
LABEL_1706:
                v1798 = v1797;
                do
                {
                  v1799 = (double *)(v1798 - 16);
                  v1721 = *((_OWORD *)v1728 - 1);
                  *(_OWORD *)(v1798 - 16) = v1721;
                  v1728 -= 2;
                  v1798 -= 16;
                }
                while (v1728 != v1583);
                v1728 = (double *)(v1797 + 16);
                *(_QWORD *)&object[24] = v1799;
                v2007 = &v1796[16 * v1795];
                *(_QWORD *)&object[40] = v2007;
                if (!v1583)
                  goto LABEL_1710;
LABEL_1709:
                operator delete(v1583);
LABEL_1710:
                v1583 = v1799;
                goto LABEL_1711;
              }
LABEL_1720:
              v1799 = (double *)v1797;
              v1728 = (double *)(v1797 + 16);
              *(_QWORD *)&object[24] = v1797;
              v2007 = &v1796[16 * v1795];
              *(_QWORD *)&object[40] = v2007;
              if (!v1583)
                goto LABEL_1710;
              goto LABEL_1709;
            }
LABEL_1872:
            *(_QWORD *)&object[32] = v1728;
            *(_QWORD *)&object[16] = v2062;
            *(_QWORD *)&object[8] = v1584;
            *(_QWORD *)object = v1727;
            sub_20E877A38();
          }
LABEL_1870:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          sub_20E867F44();
        }
        *v1728 = v1757;
        *((_DWORD *)v1728 + 2) = v1758;
        v1728 += 2;
LABEL_1711:
        v1800 = *v1725++;
        v1801 = v2018;
        if (*(_DWORD *)(v1800 + 224) == 2)
          v1801 = v2018 + 1;
        v2018 = v1801;
        if (v1725 == __dst)
          goto LABEL_1722;
      }
    }
    while (1)
    {
      v1740 = *((_DWORD *)v1735 + 4);
      v1741 = v2150[0];
      if (v2150[1] == v2150[0])
      {
        v1741 = v2150[1];
      }
      else
      {
        v1742 = ((char *)v2150[1] - (char *)v2150[0]) >> 2;
        do
        {
          v1743 = v1742 >> 1;
          v1744 = &v1741[v1742 >> 1];
          v1746 = *v1744;
          v1745 = v1744 + 1;
          v1742 += ~(v1742 >> 1);
          if (v1746 < v1740)
            v1741 = v1745;
          else
            v1742 = v1743;
        }
        while (v1742);
        if (v2150[1] != v1741 && *v1741 == v1740)
          goto LABEL_1589;
      }
      sub_20EDB3C7C(v2150, v1741, (char *)v1735 + 16);
LABEL_1589:
      v1735 += 8;
      if (v1735 == v1734)
      {
        v1733 = *v1725;
        v1735 = *(uint64_t **)(*v1725 + 200);
        v1736 = *(_QWORD *)(v2068 + 8);
        v1737 = (uint64_t *)(v1736 + 56);
        v1738 = *(uint64_t **)(v1736 + 56);
        v1739 = v2021;
        if (v1738)
          goto LABEL_1602;
        goto LABEL_1613;
      }
    }
  }
LABEL_1359:
  v1507 = v1501[6];
  v1508 = v1501[7];
  if (v1507 != v1508)
  {
    v1509 = (_DWORD *)(v2068 + 6584);
    do
    {
      if (0x86BCA1AF286BCA1BLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1507 + 984) - *(_QWORD *)(*(_QWORD *)v1507 + 976)) >> 3) < v2067)
      {
        v1510 = *(_DWORD *)(*(_QWORD *)v1507 + 32);
        v1511 = *(char **)(v2068 + 5512);
        v1512 = *(char **)(v2068 + 5520);
        if (v1512 != v1511)
        {
          v1513 = (v1512 - v1511) >> 4;
          do
          {
            v1514 = v1513 >> 1;
            v1515 = (unsigned int *)&v1511[16 * (v1513 >> 1)];
            v1517 = *v1515;
            v1516 = (char *)(v1515 + 4);
            v1513 += ~(v1513 >> 1);
            if (v1517 < v1510)
              v1511 = v1516;
            else
              v1513 = v1514;
          }
          while (v1513);
        }
        if (v1511 != v1512 && *(_DWORD *)v1511 == v1510)
        {
          v1518 = sub_20F623A0C((uint64_t)v2005, v1510);
          v1519 = v1518;
          if (v1518)
          {
            *(_WORD *)(v2068 + 6588) = 0;
            *v1509 = 0;
          }
          if (!sub_20F623A0C((uint64_t)v2005, *(_DWORD *)(*(_QWORD *)v1507 + 32) + 1)
            || (*(_WORD *)(v2068 + 6588) = 0, *v1509 = 0, (v1519 & 1) == 0))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2413, (uint64_t)"ret", 3, (uint64_t)"Failed to remove end point variables.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
      }
      v1507 += 8;
    }
    while (v1507 != v1508);
  }
  v1520 = *(_QWORD **)(v2068 + 16);
  if (v1520)
  {
    v1523 = (_QWORD *)*v1520;
    v1521 = v1520 + 1;
    v1522 = v1523;
    if (v1523 != v1521)
    {
      do
      {
        v1524 = v1522[6];
        v1525 = (std::__shared_weak_count *)v1522[7];
        *(_QWORD *)object = v1524;
        *(_QWORD *)&object[8] = v1525;
        if (v1525)
        {
          v1526 = (unint64_t *)&v1525->__shared_owners_;
          do
            v1527 = __ldxr(v1526);
          while (__stxr(v1527 + 1, v1526));
        }
        if (v2067 > (uint64_t)(*(_QWORD *)(v1524 + 208) - *(_QWORD *)(v1524 + 200)) >> 5)
        {
          v1528 = *(_DWORD *)(v1524 + 32);
          v1529 = *(char **)(v2068 + 5512);
          v1530 = *(char **)(v2068 + 5520);
          if (v1530 != v1529)
          {
            v1531 = (v1530 - v1529) >> 4;
            do
            {
              v1532 = v1531 >> 1;
              v1533 = (unsigned int *)&v1529[16 * (v1531 >> 1)];
              v1535 = *v1533;
              v1534 = (char *)(v1533 + 4);
              v1531 += ~(v1531 >> 1);
              if (v1535 < v1528)
                v1529 = v1534;
              else
                v1531 = v1532;
            }
            while (v1531);
          }
          if (v1529 != v1530 && *(_DWORD *)v1529 == v1528 && (*(_BYTE *)(*((_QWORD *)v1529 + 1) + 4) & 2) == 0)
          {
            if (sub_20F623A0C((uint64_t)v2005, v1528))
            {
              *(_WORD *)(v2068 + 6588) = 0;
              *(_DWORD *)(v2068 + 6584) = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 179, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a landmark variable.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
        if (!v1525)
          goto LABEL_1401;
        v1536 = (unint64_t *)&v1525->__shared_owners_;
        do
          v1537 = __ldaxr(v1536);
        while (__stlxr(v1537 - 1, v1536));
        if (!v1537)
        {
          ((void (*)(std::__shared_weak_count *))v1525->__on_zero_shared)(v1525);
          std::__shared_weak_count::__release_weak(v1525);
          v1538 = (_QWORD *)v1522[1];
          if (!v1538)
          {
            do
            {
LABEL_1405:
              v1539 = (_QWORD *)v1522[2];
              _ZF = *v1539 == (_QWORD)v1522;
              v1522 = v1539;
            }
            while (!_ZF);
            goto LABEL_1380;
          }
        }
        else
        {
LABEL_1401:
          v1538 = (_QWORD *)v1522[1];
          if (!v1538)
            goto LABEL_1405;
        }
        do
        {
          v1539 = v1538;
          v1538 = (_QWORD *)*v1538;
        }
        while (v1538);
LABEL_1380:
        v1522 = v1539;
      }
      while (v1539 != v1521);
    }
  }
  sub_20F6BBE5C((uint64_t)v2005);
  return kdebug_trace();
}

void sub_20F63C59C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2278]))
  {
    if (SLOBYTE(STACK[0x2277]) < 0)
      operator delete((void *)STACK[0x2260]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x41B0]);
  _Unwind_Resume(a1);
}

void sub_20F63C680()
{
  JUMPOUT(0x20F63C720);
}

void sub_20F63C688()
{
  sub_20E86E8C4((uint64_t *)&STACK[0x2260]);
  sub_20E86E8C4((uint64_t *)&STACK[0x1B50]);
  sub_20E86E658((uint64_t)&STACK[0x6100]);
  JUMPOUT(0x20F63C720);
}

void sub_20F63C6BC()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  JUMPOUT(0x20F63C720);
}

void sub_20F63C6DC()
{
  JUMPOUT(0x20F63C720);
}

void sub_20F63C6E8()
{
  JUMPOUT(0x20F63C6F8);
}

void sub_20F63C7D4(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F63C7E8(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD10]);
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F63C804(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F63C818(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F63C82C()
{
  JUMPOUT(0x20F63CCF8);
}

void sub_20F63C834()
{
  JUMPOUT(0x20F63CD04);
}

void sub_20F63C83C(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F63C854(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F63C870()
{
  JUMPOUT(0x20F63CCF8);
}

void sub_20F63C878(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v5 = STACK[0x6118];
  if (STACK[0x6118])
  {
    v6 = STACK[0x6120];
    v7 = (void *)STACK[0x6118];
    if (STACK[0x6120] != v5)
    {
      v8 = (void (***)(_QWORD))(v6 - 40);
      v9 = (void (***)(_QWORD))(v6 - 40);
      do
      {
        v10 = *v9;
        v9 -= 5;
        (*v10)(v8);
        v11 = v8 == (void (***)(_QWORD))v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)STACK[0x6118];
    }
    STACK[0x6120] = v5;
    operator delete(v7);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F63CD40);
}

void sub_20F63CAF0(_Unwind_Exception *a1)
{
  sub_20F59A618((_QWORD *)STACK[0xC50]);
  _Unwind_Resume(a1);
}

void sub_20F63CB08()
{
  JUMPOUT(0x20F63CB34);
}

void sub_20F63CB10()
{
  JUMPOUT(0x20F63CB20);
}

void sub_20F63CB48()
{
  JUMPOUT(0x20F63CB74);
}

void sub_20F63CB50()
{
  JUMPOUT(0x20F63CB60);
}

void sub_20F63CB88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F63CD50(_Unwind_Exception *a1)
{
  sub_20E8C25A8((uint64_t)&STACK[0x6100]);
  sub_20F4F17C8(&STACK[0x2260]);
  _Unwind_Resume(a1);
}

void sub_20F63CD78()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F63CD8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA017A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F63CDC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA017A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F63CDE4(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  std::chrono::steady_clock::time_point v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *p_p;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  std::chrono::steady_clock::time_point v50;
  double v51;
  uint64_t v52;
  double v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  _QWORD v58[3];
  int v59;
  const char *v60;
  int v61;
  const char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _BYTE object[24];
  unint64_t v67;
  char v68;
  void *__p;
  size_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  sub_20F49BBF8(&v65);
  if (**(int **)(v65 + 56) > 3)
    return;
  v2 = *(unsigned __int8 *)(v65 + 72);
  v3 = sub_20E8C31DC(v65, "OSLogSurrogateAppender", 1, 0);
  if (!v2 && v3 == 0)
    return;
  v5 = v3;
  v58[0] = &v65;
  v58[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v58[2] = std::chrono::system_clock::now().__d_.__rep_;
  v59 = 3;
  v60 = "unknown file";
  v61 = 123;
  v63 = 0;
  v64 = 0;
  v62 = "unknown function";
  v6 = *(_QWORD *)(a1 + 8);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (double)(v7.__d_.__rep_ - *(_QWORD *)v6) / 1000000000.0;
  *(std::chrono::steady_clock::time_point *)v6 = v7;
  *(double *)(v6 + 8) = *(double *)(v6 + 8) + v8;
  v9 = **(_QWORD **)(a1 + 16) + 4712;
  LODWORD(v70) = 0;
  v10 = sub_20F63D6E4(v9, (uint64_t)object);
  v11 = *(_QWORD *)v58[0];
  v12 = (const char *)(*(_QWORD *)v58[0] + 16);
  v57 = v12;
  if (*(char *)(*(_QWORD *)v58[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v15 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v58[0] + 39);
    v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v67)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v19 = v5;
    v20 = v12;
    v21 = v11;
    v22 = a1;
    v23 = v2;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v67 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v2 = v23;
    a1 = v22;
    v11 = v21;
    v12 = v20;
    v5 = v19;
    goto LABEL_23;
  }
  HIBYTE(v67) = v17;
  if (v17)
LABEL_23:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  v68 = 1;
  p_p = &__p;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    p_p = operator new(v28 + 1);
    v70 = v13;
    v71 = v29 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v71) = v13;
    if (!v13)
    {
      LOBYTE(__p) = 0;
      v72 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(p_p, v12, v13);
  *((_BYTE *)p_p + v13) = 0;
  v72 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v68)
      goto LABEL_37;
LABEL_35:
    if (SHIBYTE(v67) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p);
  if (v68)
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v33 = v32;
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v33);
    }
    v37 = _os_log_pack_fill();
    *(_DWORD *)v37 = 134218240;
    *(double *)(v37 + 4) = v8;
    *(_WORD *)(v37 + 12) = 2048;
    *(double *)(v37 + 14) = v10;
    v38 = operator new();
    v39 = *(unsigned __int8 *)(v11 + 39);
    v40 = v57;
    if ((v39 & 0x80u) != 0)
    {
      v40 = *(const char **)(v11 + 16);
      v39 = *(_QWORD *)(v11 + 24);
    }
    *(_QWORD *)v38 = v31;
    *(_QWORD *)(v38 + 8) = v31;
    *(_QWORD *)(v38 + 16) = v33;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 40) = v40;
    *(_QWORD *)(v38 + 48) = v39;
    *(_BYTE *)(v38 + 56) = 1;
    *(_QWORD *)object = v38;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), object);
    v41 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    if (v41)
    {
      v42 = *(std::__shared_weak_count **)(v41 + 32);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(std::__shared_weak_count **)(v41 + 16);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218240;
    *(double *)&object[4] = v8;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v10;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
  }
  if (v2)
  {
    v49 = *(_QWORD *)(a1 + 8);
    v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v51 = (double)(v50.__d_.__rep_ - *(_QWORD *)v49) / 1000000000.0;
    *(std::chrono::steady_clock::time_point *)v49 = v50;
    *(double *)(v49 + 8) = *(double *)(v49 + 8) + v51;
    v52 = **(_QWORD **)(a1 + 16) + 4712;
    LODWORD(v70) = 0;
    v53 = sub_20F63D6E4(v52, (uint64_t)object);
    sub_20E8C003C((uint64_t)v58, "BA pulse (%f seconds / iteration, cost %f).", v51, v53);
    sub_20E863570((uint64_t)v58);
  }
  sub_20E863570((uint64_t)v58);
  v54 = v64;
  if (v64)
  {
    v55 = (unint64_t *)&v64->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_20F63D4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v31 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F63D66C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb0EEEvRKNS1_28OfflineMapOptimizationConfigERKN"
                     "S0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11Opt"
                     "ionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb0EEEvRKNS1_28OfflineMapOptimizatio"
                                "nConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODat"
                                "abaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb0EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb0EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F63D6D8()
{
  return &unk_24CA01808;
}

double sub_20F63D6E4(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  double v5;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  __int128 *v24;
  _BOOL4 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v30;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  uint64_t *v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v55;
  double v57;
  double v59;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  int8x16_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t *v70;
  int8x16_t v71;
  float64_t v72;
  double v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  _OWORD *v78;
  int v79;
  uint64_t v82;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  double v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v103;
  double v116;
  uint64_t v117;
  uint64_t v118;
  float64x2_t v119;
  double v120;
  double v121;
  float64x2_t v122;
  double v123;
  double v124;
  float64x2_t v125;
  double v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double *v132;
  int v133;
  uint64_t v134;
  double v137;
  long double v138;
  long double v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  _OWORD *v143;
  _BOOL4 v144;
  uint64_t v145;
  __int128 v146;
  double v153;
  double v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  __int128 v161;
  unint64_t v167;
  uint64_t v168;
  uint64_t v170;
  double v171;
  double v172;
  uint64_t v173;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  double v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  double v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  double v224;
  unint64_t v225;
  unint64_t v226;
  double *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  double v235;
  long double v236;
  long double v237;
  long double v238;
  __int128 v239;
  unint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  float64x2_t v255;
  float64x2_t v256;
  _QWORD *v257;
  double *v258;
  float64x2_t v259;
  double v260;
  float64x2_t v261;
  float64_t v262;
  float64x2_t v263;
  double v264;
  float64x2_t v265;
  uint64_t v266;
  double v267;
  char v268;

  kdebug_trace();
  v11 = *(unsigned int *)(a2 + 48);
  if (v11 <= 5)
    bzero((void *)(a2 + 8 * v11), 48 - 8 * v11);
  *(_DWORD *)(a2 + 48) = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
    v12 = *(_QWORD *)(a1 + 896);
    v13 = *(__int128 **)(a1 + 904);
    v14 = 0.0;
    v15 = 0.0;
    if ((__int128 *)v12 == v13)
      goto LABEL_57;
    if (*(_BYTE *)(a1 + 1875))
    {
      v16 = (unint64_t)v13 - v12 - 504;
      if (v16 < 0x1F8)
      {
        v17 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_56:
          v15 = v15 + *(double *)(v17 + 464);
          v17 += 504;
        }
        while ((__int128 *)v17 != v13);
        goto LABEL_57;
      }
      v155 = v16 / 0x1F8 + 1;
      v17 = v12 + 504 * (v155 & 0x1FFFFFFFFFFFFFELL);
      v156 = v155 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v15 = v15 + *(double *)(v12 + 464) + *(double *)(v12 + 968);
        v12 += 1008;
        v156 -= 2;
      }
      while (v156);
      if (v155 != (v155 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_56;
    }
    else
    {
      v98 = (__int128 *)(v12 + 344);
      do
      {
        if (*((_BYTE *)v98 + 128))
        {
          *((_QWORD *)v98 + 14) = *((_QWORD *)v98 - 1);
          v100 = *(__int128 *)((char *)v98 - 24);
          _Q5 = *(__int128 *)((char *)v98 - 56);
          v98[5] = *(__int128 *)((char *)v98 - 40);
          v98[6] = v100;
          _Q4 = *(__int128 *)((char *)v98 - 88);
          v98[3] = *(__int128 *)((char *)v98 - 72);
          v98[4] = _Q5;
          v103 = *(__int128 *)((char *)v98 - 120);
          v98[1] = *(__int128 *)((char *)v98 - 104);
          v98[2] = _Q4;
          *v98 = v103;
          _Q17 = *v98;
          _D19 = *((_QWORD *)v98 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v98 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v98 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v98 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v98 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v98 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v98 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v116 = *(double *)(a1 + 16) * (_D18 + *((double *)v98 + 14) * *((double *)v98 + 14));
          *((double *)v98 + 15) = v116;
          v15 = v15 + v116;
        }
        v99 = v98 + 10;
        v98 = (__int128 *)((char *)v98 + 504);
      }
      while (v99 != v13);
    }
LABEL_57:
    *(double *)a2 = v15 * 0.5;
    v157 = *(_QWORD *)(a1 + 920);
    v158 = *(_QWORD *)(a1 + 928);
    if (v157 == v158)
      goto LABEL_69;
    if (*(_BYTE *)(a1 + 1875))
    {
      v159 = v158 - v157 - 280;
      v14 = 0.0;
      if (v159 < 0x118)
      {
        v160 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_68:
          v14 = v14 + *(double *)(v160 + 240);
          v160 += 280;
        }
        while (v160 != v158);
        goto LABEL_69;
      }
      v167 = v159 / 0x118 + 1;
      v160 = v157 + 280 * (v167 & 0x1FFFFFFFFFFFFFELL);
      v168 = v167 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v14 = v14 + *(double *)(v157 + 240) + *(double *)(v157 + 520);
        v157 += 560;
        v168 -= 2;
      }
      while (v168);
      if (v167 != (v167 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_68;
    }
    else
    {
      v14 = 0.0;
      do
      {
        if (*(_BYTE *)(v157 + 248))
        {
          v161 = *(_OWORD *)(v157 + 160);
          *(_OWORD *)(v157 + 192) = *(_OWORD *)(v157 + 144);
          *(_OWORD *)(v157 + 208) = v161;
          _Q3 = *(_OWORD *)(v157 + 192);
          *(_OWORD *)(v157 + 224) = *(_OWORD *)(v157 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v161 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v157 + 240) = v161;
          v14 = v14 + *(double *)&v161;
        }
        v157 += 280;
      }
      while (v157 != v158);
    }
LABEL_69:
    *(double *)(a2 + 8) = v14 * 0.5;
    _X9 = *(_QWORD *)(a1 + 944);
    v170 = *(_QWORD *)(a1 + 952);
    v171 = 0.0;
    v172 = 0.0;
    if (_X9 == v170)
      goto LABEL_81;
    if (*(_BYTE *)(a1 + 1875))
    {
      if ((unint64_t)(v170 - _X9 - 8016) >> 4 < 0x1F5)
      {
        v173 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_80:
          v172 = v172 + *(double *)(v173 + 7976);
          v173 += 8016;
        }
        while (v173 != v170);
        goto LABEL_81;
      }
      v195 = (v170 - _X9 - 8016) / 0x1F50uLL + 1;
      v173 = _X9 + 8016 * (v195 & 0x1FFFFFFFFFFFFELL);
      v196 = v195 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v172 = v172 + *(double *)(_X9 + 7976) + *(double *)(_X9 + 15992);
        _X9 += 16032;
        v196 -= 2;
      }
      while (v196);
      if (v195 != (v195 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_80;
    }
    else
    {
      do
      {
        __asm { PRFM            #0, [X9,#0x7D20] }
        if (*(_BYTE *)(_X9 + 7984))
        {
          _X14 = _X9 + 31904;
          *(_QWORD *)(_X9 + 7968) = *(_QWORD *)(_X9 + 7848);
          v176 = *(_OWORD *)(_X9 + 7816);
          *(_OWORD *)(_X9 + 7920) = *(_OWORD *)(_X9 + 7800);
          *(_OWORD *)(_X9 + 7936) = v176;
          *(_OWORD *)(_X9 + 7952) = *(_OWORD *)(_X9 + 7832);
          v177 = *(_OWORD *)(_X9 + 7752);
          *(_OWORD *)(_X9 + 7856) = *(_OWORD *)(_X9 + 7736);
          *(_OWORD *)(_X9 + 7872) = v177;
          v178 = *(_OWORD *)(_X9 + 7784);
          *(_OWORD *)(_X9 + 7888) = *(_OWORD *)(_X9 + 7768);
          *(_OWORD *)(_X9 + 7904) = v178;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X9 + 7856);
          _D19 = *(_QWORD *)(_X9 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X9 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X9 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v194 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X9 + 7968) * *(double *)(_X9 + 7968));
          *(double *)(_X9 + 7976) = v194;
          v172 = v172 + v194;
        }
        _X9 += 8016;
      }
      while (_X9 != v170);
    }
LABEL_81:
    *(double *)(a2 + 16) = v172 * 0.5;
    _X9 = *(_QWORD *)(a1 + 968);
    v198 = *(_QWORD *)(a1 + 976);
    if (_X9 == v198)
      goto LABEL_93;
    if (*(_BYTE *)(a1 + 1875))
    {
      v199 = v198 - _X9 - 5336;
      v171 = 0.0;
      if (v199 >> 3 < 0x29B)
      {
        v200 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_92:
          v171 = v171 + *(double *)(v200 + 5296);
          v200 += 5336;
        }
        while (v200 != v198);
        goto LABEL_93;
      }
      v219 = v199 / 0x14D8 + 1;
      v200 = _X9 + 5336 * (v219 & 0x1FFFFFFFFFFFFELL);
      v220 = v219 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v171 = v171 + *(double *)(_X9 + 5296) + *(double *)(_X9 + 10632);
        _X9 += 10672;
        v220 -= 2;
      }
      while (v220);
      if (v219 != (v219 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_92;
    }
    else
    {
      v171 = 0.0;
      do
      {
        __asm { PRFM            #0, [X9,#0x5340] }
        if (*(_BYTE *)(_X9 + 5304))
        {
          _X14 = _X9 + 21184;
          *(_QWORD *)(_X9 + 5288) = *(_QWORD *)(_X9 + 5168);
          *(_OWORD *)(_X9 + 5240) = *(_OWORD *)(_X9 + 5120);
          *(_OWORD *)(_X9 + 5256) = *(_OWORD *)(_X9 + 5136);
          *(_OWORD *)(_X9 + 5272) = *(_OWORD *)(_X9 + 5152);
          *(_OWORD *)(_X9 + 5176) = *(_OWORD *)(_X9 + 5056);
          *(_OWORD *)(_X9 + 5192) = *(_OWORD *)(_X9 + 5072);
          *(_OWORD *)(_X9 + 5208) = *(_OWORD *)(_X9 + 5088);
          *(_OWORD *)(_X9 + 5224) = *(_OWORD *)(_X9 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X9 + 5176);
          _D19 = *(_QWORD *)(_X9 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X9 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X9 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v218 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X9 + 5288) * *(double *)(_X9 + 5288));
          *(double *)(_X9 + 5296) = v218;
          v171 = v171 + v218;
        }
        _X9 += 5336;
      }
      while (_X9 != v198);
    }
LABEL_93:
    *(double *)(a2 + 24) = v171 * 0.5;
    v221 = *(_QWORD *)(a1 + 992);
    v222 = *(_QWORD *)(a1 + 1000);
    v223 = 0.0;
    v224 = 0.0;
    if (v221 != v222)
    {
      if (*(_BYTE *)(a1 + 1875))
      {
        v225 = v222 - v221 - 216;
        if (v225 < 0xD8)
          goto LABEL_120;
        v226 = v225 / 0xD8 + 1;
        v227 = (double *)(v221 + 392);
        v228 = v226 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v224 = v224 + *(v227 - 27) + *v227;
          v227 += 54;
          v228 -= 2;
        }
        while (v228);
        v221 += 216 * (v226 & 0x3FFFFFFFFFFFFFELL);
        if (v226 != (v226 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_120:
          do
          {
            v224 = v224 + *(double *)(v221 + 176);
            v221 += 216;
          }
          while (v221 != v222);
        }
      }
      else
      {
        do
        {
          if (*(_BYTE *)(v221 + 184))
          {
            *(_OWORD *)(v221 + 160) = *(_OWORD *)(v221 + 144);
            v256 = *(float64x2_t *)(v221 + 160);
            _D1 = v256.f64[1];
            __asm { FMLA            D0, D1, V2.D[1] }
            v235 = *(double *)(a1 + 88);
            v236 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
            v237 = v236 + 1.0;
            v238 = v235 * log1p(v236);
            *(long double *)(v221 + 176) = v238;
            *(float64x2_t *)(v221 + 160) = vmulq_n_f64(v256, sqrt(1.0 / v237));
            v224 = v224 + v238;
          }
          v221 += 216;
        }
        while (v221 != v222);
      }
    }
    *(double *)(a2 + 32) = v224 * 0.5;
    v229 = *(_QWORD *)(a1 + 1016);
    v230 = *(_QWORD *)(a1 + 1024);
    if (v229 == v230)
      goto LABEL_116;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v223 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 856))
        {
          v239 = *(_OWORD *)(v229 + 768);
          *(_OWORD *)(v229 + 800) = *(_OWORD *)(v229 + 752);
          *(_OWORD *)(v229 + 816) = v239;
          _Q2 = *(_OWORD *)(v229 + 800);
          *(_OWORD *)(v229 + 832) = *(_OWORD *)(v229 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v239 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v229 + 848) = v239;
          v223 = v223 + *(double *)&v239;
        }
        v229 += 888;
      }
      while (v229 != v230);
      goto LABEL_116;
    }
    v231 = v230 - v229 - 888;
    v223 = 0.0;
    if (v231 >= 0x378)
    {
      v245 = v231 / 0x378 + 1;
      v232 = v229 + 888 * (v245 & 0xFFFFFFFFFFFFFELL);
      v246 = v245 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v223 = v223 + *(double *)(v229 + 848) + *(double *)(v229 + 1736);
        v229 += 1776;
        v246 -= 2;
      }
      while (v246);
      if (v245 == (v245 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_116;
    }
    else
    {
      v232 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v223 = v223 + *(double *)(v232 + 848);
      v232 += 888;
    }
    while (v232 != v230);
LABEL_116:
    v154 = v223 * 0.5;
    goto LABEL_117;
  }
  v18 = (double *)(a1 + 8);
  v19 = (_QWORD *)(a1 + 120);
  v257 = (_QWORD *)(a1 + 120);
  v258 = (double *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 896);
  v21 = *(_QWORD *)(a1 + 904);
  v22 = 0.0;
  v23 = 0.0;
  if (v20 != v21)
  {
    do
    {
      while (1)
      {
        v24 = (__int128 *)(v20 + 344);
        v25 = sub_20F4AFF88((char *)(v20 + 8), (float64x2_t **)(v20 + 208), v20 + 344);
        *(_BYTE *)(v20 + 472) = v25;
        if (v25)
          break;
        *(_QWORD *)(v20 + 464) = 0;
        v20 += 504;
        if (v20 == v21)
          goto LABEL_15;
      }
      v26 = *(_QWORD *)(v20 + 480);
      if (v26)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 24))(v26, v20 + 344);
      _Q1 = *(_OWORD *)(v20 + 408);
      v27 = *(_OWORD *)(v20 + 424);
      _Q3 = *(_OWORD *)(v20 + 392);
      *(_OWORD *)(v20 + 288) = _Q1;
      *(_OWORD *)(v20 + 304) = v27;
      _Q2 = *(float64x2_t *)(v20 + 424);
      *(_OWORD *)(v20 + 320) = *(_OWORD *)(v20 + 440);
      *(_QWORD *)(v20 + 336) = *(_QWORD *)(v20 + 456);
      v30 = *(_OWORD *)(v20 + 360);
      _Q5 = *v24;
      _V7.D[1] = *((_QWORD *)&v30 + 1);
      *(_OWORD *)(v20 + 224) = *v24;
      *(_OWORD *)(v20 + 240) = v30;
      _Q4 = *(_OWORD *)(v20 + 376);
      v4 = *(float64x2_t *)(v20 + 392);
      *(_OWORD *)(v20 + 256) = _Q4;
      *(float64x2_t *)(v20 + 272) = v4;
      _Q6 = *(float64x2_t *)(v20 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v20 + 456) * *(double *)(v20 + 456));
      *(float64_t *)(v20 + 464) = v4.f64[0];
      v23 = v23 + v4.f64[0];
      v20 += 504;
    }
    while (v20 != v21);
LABEL_15:
    v19 = v257;
    v18 = v258;
  }
  *(double *)a2 = v23 * 0.5;
  v46 = (int8x16_t *)v19[100];
  v47 = (int8x16_t *)v19[101];
  if (v46 != v47)
  {
    v48 = v46 + 16;
    v22 = 0.0;
    do
    {
      while (!v48[-9].i64[1])
      {
        v48[-1].i8[8] = 0;
        v48[-1].i64[0] = 0;
        v49 = &v48[1].i64[1];
        v48 = (int8x16_t *)((char *)v48 + 280);
        if (v49 == (uint64_t *)v47)
          goto LABEL_23;
      }
      v50 = v48[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v50 + 48);
      v51 = *(float64x2_t *)(v50 + 32);
      _D2 = *(double *)(v50 + 72);
      v53 = *(float64x2_t *)(v50 + 56);
      _D4 = *(double *)(v50 + 96);
      v55 = *(float64x2_t *)(v50 + 80);
      *(_QWORD *)&_Q6.f64[0] = v48[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v48[-15] + 8);
      v57 = *(double *)v48[-12].i64;
      _Q17 = (float64x2_t)v48[-13];
      v59 = *(double *)&v48[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v48[-12] + 8);
      v61 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q7.f64[0]), v53, _Q17.f64[0]), v55, _Q19.f64[0]);
      v62 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v63 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v51, _Q7, 1), v53, _Q17, 1), v55, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v260 = v62;
      v259 = v61;
      v262 = _Q7.f64[0];
      v261 = v63;
      v263 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q6.f64[0]), v53, v57), v55, v59);
      v264 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v57 + _D4 * v59;
      v266 = 0;
      v265 = 0uLL;
      sub_20E9733B8(&v259, v265.f64);
      v64 = v48 - 4;
      v65 = v265;
      v48[-3].i64[0] = v266;
      v48[-4] = (int8x16_t)v65;
      v65.f64[0] = *(float64_t *)(v50 + 120);
      *(_QWORD *)&v66.f64[0] = v48[-9].i64[0];
      *(float64x2_t *)((char *)&v48[-3] + 8) = vsubq_f64(*(float64x2_t *)(v50 + 104), (float64x2_t)v48[-10]);
      v48[-2].i64[1] = *(_OWORD *)&vsubq_f64(v65, v66);
      v67 = (float64x2_t *)v48[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v48[-2], v67[3]);
      v68 = (int8x16_t)vmulq_f64((float64x2_t)v48[-3], v67[2]);
      v69 = (int8x16_t)vmulq_f64((float64x2_t)v48[-4], v67[1]);
      v48[-4] = v69;
      v48[-3] = v68;
      v48[-2] = (int8x16_t)v4;
      v48[-1].i8[8] = 1;
      if (v48->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v48->i64[0] + 24))(v48->i64[0], v48 - 4);
        v68 = v48[-3];
        v4 = (float64x2_t)v48[-2];
        v69 = *v64;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v68, v68, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v69, v69, 8uLL).i64;
      v70 = v48 - 7;
      v71 = v48[-3];
      *v70 = *v64;
      v70[1] = v71;
      _Q6 = (float64x2_t)v48[-2];
      v70[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v72 = _Q2.f64[0] + *(double *)v68.i64 * *(double *)v68.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v18[3];
      v73 = v5 * v72;
      *(double *)v48[-1].i64 = v73;
      v22 = v22 + v73;
      v74 = &v48[1].i64[1];
      v48 = (int8x16_t *)((char *)v48 + 280);
    }
    while (v74 != (uint64_t *)v47);
LABEL_23:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 8) = v22 * 0.5;
  v75 = v19[103];
  v76 = v19[104];
  if (v75 == v76)
  {
    v77 = 0.0;
  }
  else
  {
    v77 = 0.0;
    do
    {
      while (1)
      {
        v78 = (_OWORD *)(v75 + 7856);
        v79 = sub_20F4B0BC8();
        *(_BYTE *)(v75 + 7984) = v79;
        if (v79)
          break;
        *(_QWORD *)(v75 + 7976) = 0;
        v75 += 8016;
        if (v75 == v76)
          goto LABEL_31;
      }
      _X8 = v75 + 24024;
      __asm { PRFM            #0, [X8] }
      v82 = *(_QWORD *)(v75 + 7992);
      if (v82)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 24))(v82, v75 + 7856);
      _X8 = v75 + 23888;
      v84 = *(_OWORD *)(v75 + 7936);
      *(_OWORD *)(v75 + 7800) = *(_OWORD *)(v75 + 7920);
      *(_OWORD *)(v75 + 7816) = v84;
      _Q2 = *(float64x2_t *)(v75 + 7936);
      *(_OWORD *)(v75 + 7832) = *(_OWORD *)(v75 + 7952);
      *(_QWORD *)(v75 + 7848) = *(_QWORD *)(v75 + 7968);
      v85 = *(_OWORD *)(v75 + 7872);
      *(_OWORD *)(v75 + 7736) = *v78;
      *(_OWORD *)(v75 + 7752) = v85;
      v86 = *(_OWORD *)(v75 + 7904);
      *(_OWORD *)(v75 + 7768) = *(_OWORD *)(v75 + 7888);
      *(_OWORD *)(v75 + 7784) = v86;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v75 + 7872);
      _Q7 = *v78;
      _D17 = *(_QWORD *)(v75 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v75 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v75 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v75 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v75 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v18[5];
      v97 = v5 * (_D16 + *(double *)(v75 + 7968) * *(double *)(v75 + 7968));
      *(double *)(v75 + 7976) = v97;
      v77 = v77 + v97;
      v75 += 8016;
    }
    while (v75 != v76);
LABEL_31:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 16) = v77 * 0.5;
  v268 = *(_BYTE *)(a1 + 1875);
  v267 = 0.0;
  v117 = v19[106];
  v118 = v19[107];
  *(_QWORD *)&v259.f64[0] = &v268;
  *(_QWORD *)&v259.f64[1] = v18 + 6;
  v260 = COERCE_DOUBLE(&v257);
  *(_QWORD *)&v261.f64[0] = &v267;
  sub_20F4D78F4(&v265, v117, v118, (uint64_t)&v259, v77 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v126 = v267 * 0.5;
  *(double *)(a2 + 24) = v267 * 0.5;
  v127 = v257;
  v128 = v257[109];
  v129 = v257[110];
  v130 = 0.0;
  v131 = 0.0;
  if (v128 != v129)
  {
    v132 = v258;
    do
    {
      while (1)
      {
        v133 = sub_20FC79C54(v128 + 8, (uint64_t *)(v128 + 56), v128 + 160, v126, v119.f64[0], v120, v121, v122, v123, v124, v125);
        *(_BYTE *)(v128 + 184) = v133;
        if (v133)
          break;
        *(_QWORD *)(v128 + 176) = 0;
        v128 += 216;
        if (v128 == v129)
          goto LABEL_44;
      }
      v134 = *(_QWORD *)(v128 + 192);
      if (v134)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 24))(v134, v128 + 160);
      *(_OWORD *)(v128 + 144) = *(_OWORD *)(v128 + 160);
      v255 = *(float64x2_t *)(v128 + 160);
      _D1 = v255.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v137 = v132[10];
      v138 = v132[11] * (v132[9] * _D0);
      v139 = v138 + 1.0;
      v126 = v137 * log1p(v138);
      *(double *)(v128 + 176) = v126;
      v120 = v255.f64[0];
      v119 = vmulq_n_f64(v255, sqrt(1.0 / v139));
      *(float64x2_t *)(v128 + 160) = v119;
      v131 = v131 + v126;
      v128 += 216;
    }
    while (v128 != v129);
LABEL_44:
    v127 = v257;
  }
  *(double *)(a2 + 32) = v131 * 0.5;
  v140 = v127[112];
  v141 = v127[113];
  if (v140 != v141)
  {
    v130 = 0.0;
    v142 = v258;
    do
    {
      while (1)
      {
        v143 = (_OWORD *)(v140 + 800);
        v144 = sub_20F3E115C(v140 + 8, (_QWORD *)(v140 + 736), (float64x2_t *)(v140 + 800));
        *(_BYTE *)(v140 + 856) = v144;
        if (v144)
          break;
        *(_QWORD *)(v140 + 848) = 0;
        v140 += 888;
        if (v140 == v141)
          goto LABEL_52;
      }
      v145 = *(_QWORD *)(v140 + 864);
      if (v145)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 24))(v145, v140 + 800);
      v146 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 752) = *v143;
      *(_OWORD *)(v140 + 768) = v146;
      _Q2 = *v143;
      _Q1 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 784) = *(_OWORD *)(v140 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v140 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v153 = v142[13] * _D3;
      *(double *)(v140 + 848) = v153;
      v130 = v130 + v153;
      v140 += 888;
    }
    while (v140 != v141);
  }
LABEL_52:
  v154 = v130 * 0.5;
LABEL_117:
  *(double *)(a2 + 40) = v154;
  *(_WORD *)(a1 + 1875) = 257;
  v247 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v248 = *(double *)a2;
  v249 = *(double *)(a2 + 8);
  v250 = *(double *)(a2 + 16);
  v251 = *(double *)(a2 + 24);
  v252 = *(double *)(a2 + 32);
  v253 = *(double *)(a2 + 40);
  kdebug_trace();
  return v247 + v248 + v249 + v250 + v251 + v252 + v253;
}

void sub_20F63E664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F63E67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F63E690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F63E6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F63E6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F63E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F63E6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F63E6F4(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t i;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;

  v6 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = 0;
  *(_OWORD *)a1 = v6;
  a1[4] = 0;
  a1[5] = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v7 - v8);
    a1[3] = (uint64_t)v10;
    a1[4] = (uint64_t)v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[5] = (uint64_t)v11;
    memcpy(v10, v8, v9);
    a1[4] = (uint64_t)v11;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = (char *)operator new(v12 - v13);
    a1[6] = (uint64_t)v15;
    a1[7] = (uint64_t)v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[8] = (uint64_t)v16;
    memcpy(v15, v13, v14);
    a1[7] = (uint64_t)v16;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 9);
  v17 = (_BYTE *)*((_QWORD *)a2 + 10);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - v18);
    a1[9] = (uint64_t)v20;
    a1[10] = (uint64_t)v20;
    v21 = &v20[8 * (v19 >> 3)];
    a1[11] = (uint64_t)v21;
    memcpy(v20, v18, v19);
    a1[10] = (uint64_t)v21;
  }
  v22 = a2[6];
  v23 = a2[7];
  v24 = a2[8];
  __asm { FMOV            V4.2D, #1.0 }
  *((_OWORD *)a1 + 15) = _Q4;
  v30 = a1 + 30;
  v31 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)a1 + 11) = v31;
  *((_OWORD *)a1 + 6) = v22;
  *((_OWORD *)a1 + 7) = v23;
  *((_OWORD *)a1 + 8) = v24;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((int64x2_t *)a1 + 12) = v31;
  *((int64x2_t *)a1 + 13) = v31;
  v57 = a1 + 26;
  *((_OWORD *)a1 + 14) = xmmword_2102DB700;
  a1[32] = 0x3FF0000000000000;
  a1[33] = 0;
  v58 = a1 + 33;
  *((_OWORD *)a1 + 18) = _Q4;
  v59 = a1 + 36;
  a1[34] = 0;
  a1[35] = 0;
  a1[38] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 39) = 0u;
  v60 = a1 + 39;
  a1[49] = 0;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  a1[42] = 0x3FF0000000000000;
  v61 = a1 + 42;
  a1[46] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = _Q4;
  *((_OWORD *)a1 + 26) = 0u;
  v62 = _Q4;
  a1[55] = 0x3FF0000000000000;
  a1[58] = 0;
  a1[59] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  a1[64] = 0;
  sub_20F4E052C((uint64_t)(a1 + 66), a3);
  *((_DWORD *)a1 + 546) = 0;
  bzero(a1 + 274, 0x314uLL);
  *((_DWORD *)a1 + 750) = 0;
  *(_OWORD *)(a1 + 373) = 0u;
  *((_OWORD *)a1 + 188) = 0u;
  *((_DWORD *)a1 + 756) = 0;
  *(_OWORD *)(a1 + 379) = 0u;
  *((_DWORD *)a1 + 762) = 0;
  *((_OWORD *)a1 + 191) = 0u;
  *((_DWORD *)a1 + 768) = 0;
  *(_OWORD *)(a1 + 385) = 0u;
  *((_DWORD *)a1 + 774) = 0;
  *((_OWORD *)a1 + 194) = 0u;
  *((_OWORD *)a1 + 195) = 0u;
  *((_DWORD *)a1 + 784) = 1065353216;
  *((_BYTE *)a1 + 4704) = 0;
  *((_OWORD *)a1 + 293) = 0u;
  *((_OWORD *)a1 + 292) = 0u;
  *((_OWORD *)a1 + 291) = 0u;
  *((_OWORD *)a1 + 290) = 0u;
  *((_OWORD *)a1 + 289) = 0u;
  *((_OWORD *)a1 + 288) = 0u;
  *((_OWORD *)a1 + 287) = 0u;
  *((_OWORD *)a1 + 286) = 0u;
  *((_OWORD *)a1 + 285) = 0u;
  *((_OWORD *)a1 + 284) = 0u;
  *((_OWORD *)a1 + 283) = 0u;
  *((_OWORD *)a1 + 282) = 0u;
  *((_OWORD *)a1 + 281) = 0u;
  *((_OWORD *)a1 + 280) = 0u;
  *((_OWORD *)a1 + 279) = 0u;
  *((_OWORD *)a1 + 278) = 0u;
  *((_OWORD *)a1 + 277) = 0u;
  *((_OWORD *)a1 + 276) = 0u;
  *((_OWORD *)a1 + 275) = 0u;
  *((_OWORD *)a1 + 274) = 0u;
  *((_OWORD *)a1 + 273) = 0u;
  bzero(a1 + 726, 0x4A58uLL);
  *((_OWORD *)a1 + 200) = 0u;
  *((_OWORD *)a1 + 199) = 0u;
  *((_OWORD *)a1 + 198) = 0u;
  *((_OWORD *)a1 + 197) = 0u;
  a1[589] = (uint64_t)&unk_24CA01BA0;
  *((_OWORD *)a1 + 295) = v62;
  *((_OWORD *)a1 + 296) = v62;
  *((_OWORD *)a1 + 297) = v62;
  *((_OWORD *)a1 + 298) = v62;
  *((_OWORD *)a1 + 299) = v62;
  *((_OWORD *)a1 + 300) = v62;
  a1[604] = (uint64_t)&off_24CA01C10;
  *((_OWORD *)a1 + 301) = v62;
  bzero(a1 + 605, 0x3C8uLL);
  *((_BYTE *)a1 + 5808) = 1;
  *((_WORD *)a1 + 2905) = 257;
  sub_20F64CD14((char *)a1 + 5816);
  *(_OWORD *)(a1 + 821) = 0u;
  *(_OWORD *)(a1 + 819) = 0u;
  *(_OWORD *)(a1 + 817) = 0u;
  *(_OWORD *)(a1 + 815) = 0u;
  *(_OWORD *)(a1 + 813) = 0u;
  *(_OWORD *)(a1 + 811) = 0u;
  *(_OWORD *)(a1 + 809) = 0u;
  *(_OWORD *)(a1 + 807) = 0u;
  *(_OWORD *)(a1 + 805) = 0u;
  *(_OWORD *)(a1 + 803) = 0u;
  *(_OWORD *)(a1 + 801) = 0u;
  *(_OWORD *)(a1 + 799) = 0u;
  *(uint64_t *)((char *)a1 + 6582) = 0;
  a1[837] = 0;
  *(_OWORD *)(a1 + 831) = 0u;
  *(_OWORD *)(a1 + 833) = 0u;
  *(_OWORD *)(a1 + 835) = 0u;
  *((_DWORD *)a1 + 1660) = 0;
  *((_OWORD *)a1 + 414) = 0u;
  *((_OWORD *)a1 + 413) = 0u;
  *((_BYTE *)a1 + 6600) = 0;
  a1[824] = 0;
  sub_20F4F48F8((uint64_t)(a1 + 838));
  a1[1762] = (uint64_t)(a1 + 946);
  a1[1763] = (uint64_t)(a1 + 1072);
  a1[1764] = (uint64_t)(a1 + 1198);
  a1[1765] = (uint64_t)(a1 + 1324);
  a1[1766] = (uint64_t)(a1 + 1450);
  a1[1767] = (uint64_t)(a1 + 1576);
  a1[1768] = (uint64_t)(a1 + 1702);
  a1[1755] = (uint64_t)(a1 + 928);
  a1[1756] = (uint64_t)(a1 + 1054);
  a1[1757] = (uint64_t)(a1 + 1180);
  a1[1758] = (uint64_t)(a1 + 1306);
  a1[1759] = (uint64_t)(a1 + 1432);
  a1[1760] = (uint64_t)(a1 + 1558);
  a1[1761] = (uint64_t)(a1 + 1684);
  a1[1748] = (uint64_t)(a1 + 910);
  a1[1749] = (uint64_t)(a1 + 1036);
  a1[1750] = (uint64_t)(a1 + 1162);
  a1[1751] = (uint64_t)(a1 + 1288);
  a1[1752] = (uint64_t)(a1 + 1414);
  a1[1753] = (uint64_t)(a1 + 1540);
  a1[1754] = (uint64_t)(a1 + 1666);
  a1[1741] = (uint64_t)(a1 + 892);
  a1[1742] = (uint64_t)(a1 + 1018);
  a1[1743] = (uint64_t)(a1 + 1144);
  a1[1744] = (uint64_t)(a1 + 1270);
  a1[1745] = (uint64_t)(a1 + 1396);
  a1[1746] = (uint64_t)(a1 + 1522);
  a1[1747] = (uint64_t)(a1 + 1648);
  a1[1734] = (uint64_t)(a1 + 874);
  a1[1735] = (uint64_t)(a1 + 1000);
  a1[1736] = (uint64_t)(a1 + 1126);
  a1[1737] = (uint64_t)(a1 + 1252);
  a1[1738] = (uint64_t)(a1 + 1378);
  a1[1739] = (uint64_t)(a1 + 1504);
  a1[1740] = (uint64_t)(a1 + 1630);
  a1[1727] = (uint64_t)(a1 + 856);
  a1[1728] = (uint64_t)(a1 + 982);
  a1[1729] = (uint64_t)(a1 + 1108);
  a1[1730] = (uint64_t)(a1 + 1234);
  a1[1731] = (uint64_t)(a1 + 1360);
  a1[1732] = (uint64_t)(a1 + 1486);
  a1[1733] = (uint64_t)(a1 + 1612);
  a1[1720] = v32;
  a1[1721] = (uint64_t)(a1 + 964);
  a1[1722] = (uint64_t)(a1 + 1090);
  a1[1723] = (uint64_t)(a1 + 1216);
  a1[1724] = (uint64_t)(a1 + 1342);
  a1[1725] = (uint64_t)(a1 + 1468);
  a1[1726] = (uint64_t)(a1 + 1594);
  *(_OWORD *)(a1 + 1769) = 0u;
  *(_OWORD *)(a1 + 1771) = 0u;
  *(_OWORD *)(a1 + 1773) = 0u;
  *(_OWORD *)(a1 + 1775) = 0u;
  *(_OWORD *)(a1 + 1777) = 0u;
  *(_OWORD *)(a1 + 1779) = 0u;
  *(_OWORD *)(a1 + 1781) = 0u;
  *(_OWORD *)(a1 + 1783) = 0u;
  *(_OWORD *)(a1 + 1785) = 0u;
  *(_OWORD *)(a1 + 1787) = 0u;
  a1[1789] = 0;
  a1[1790] = 0x3EE4F8B588E368F1;
  a1[1791] = (uint64_t)(a1 + 604);
  a1[1792] = (uint64_t)(a1 + 828);
  a1[1793] = (uint64_t)(a1 + 3084);
  bzero(a1 + 1794, 0x290uLL);
  a1[1945] = 0;
  *(_OWORD *)(a1 + 1943) = 0u;
  *(_OWORD *)(a1 + 1941) = 0u;
  *(_OWORD *)(a1 + 1939) = 0u;
  *(_OWORD *)(a1 + 1937) = 0u;
  *(_OWORD *)(a1 + 1935) = 0u;
  *(_OWORD *)(a1 + 1933) = 0u;
  *(_OWORD *)(a1 + 1931) = 0u;
  *(_OWORD *)(a1 + 1929) = 0u;
  *(_OWORD *)(a1 + 1927) = 0u;
  *(_OWORD *)(a1 + 1925) = 0u;
  *(_OWORD *)(a1 + 1923) = 0u;
  *(_OWORD *)(a1 + 1921) = 0u;
  *(_OWORD *)(a1 + 1919) = 0u;
  *(_OWORD *)(a1 + 1917) = 0u;
  *(_OWORD *)(a1 + 1915) = 0u;
  *(_OWORD *)(a1 + 1913) = 0u;
  *(_OWORD *)(a1 + 1911) = 0u;
  *(_OWORD *)(a1 + 1909) = 0u;
  *(_OWORD *)(a1 + 1907) = 0u;
  *(_OWORD *)(a1 + 1905) = 0u;
  *(_OWORD *)(a1 + 1903) = 0u;
  *(_OWORD *)(a1 + 1901) = 0u;
  *(_OWORD *)(a1 + 1899) = 0u;
  *(_OWORD *)(a1 + 1897) = 0u;
  *(_OWORD *)(a1 + 1895) = 0u;
  *(_OWORD *)(a1 + 1893) = 0u;
  *(_OWORD *)(a1 + 1891) = 0u;
  *(_OWORD *)(a1 + 1889) = 0u;
  *(_OWORD *)(a1 + 1887) = 0u;
  *(_OWORD *)(a1 + 1885) = 0u;
  *(_OWORD *)(a1 + 1883) = 0u;
  *((_DWORD *)a1 + 3898) = 0;
  *(_OWORD *)(a1 + 1947) = 0u;
  *((_OWORD *)a1 + 975) = 0u;
  *((_DWORD *)a1 + 3904) = 0;
  *(_OWORD *)(a1 + 1953) = 0u;
  *(_OWORD *)(a1 + 1955) = 0u;
  *(_OWORD *)(a1 + 1957) = 0u;
  a1[1959] = 0;
  sub_20F4F48F8((uint64_t)(a1 + 1960));
  a1[2884] = (uint64_t)(a1 + 2068);
  a1[2885] = (uint64_t)(a1 + 2194);
  a1[2886] = (uint64_t)(a1 + 2320);
  a1[2887] = (uint64_t)(a1 + 2446);
  a1[2888] = (uint64_t)(a1 + 2572);
  a1[2889] = (uint64_t)(a1 + 2698);
  a1[2890] = (uint64_t)(a1 + 2824);
  a1[2877] = (uint64_t)(a1 + 2050);
  a1[2878] = (uint64_t)(a1 + 2176);
  a1[2879] = (uint64_t)(a1 + 2302);
  a1[2880] = (uint64_t)(a1 + 2428);
  a1[2881] = (uint64_t)(a1 + 2554);
  a1[2882] = (uint64_t)(a1 + 2680);
  a1[2883] = (uint64_t)(a1 + 2806);
  a1[2870] = (uint64_t)(a1 + 2032);
  a1[2871] = (uint64_t)(a1 + 2158);
  a1[2872] = (uint64_t)(a1 + 2284);
  a1[2873] = (uint64_t)(a1 + 2410);
  a1[2874] = (uint64_t)(a1 + 2536);
  a1[2875] = (uint64_t)(a1 + 2662);
  a1[2876] = (uint64_t)(a1 + 2788);
  a1[2863] = (uint64_t)(a1 + 2014);
  a1[2864] = (uint64_t)(a1 + 2140);
  a1[2865] = (uint64_t)(a1 + 2266);
  a1[2866] = (uint64_t)(a1 + 2392);
  a1[2867] = (uint64_t)(a1 + 2518);
  a1[2868] = (uint64_t)(a1 + 2644);
  a1[2869] = (uint64_t)(a1 + 2770);
  a1[2856] = (uint64_t)(a1 + 1996);
  a1[2857] = (uint64_t)(a1 + 2122);
  a1[2858] = (uint64_t)(a1 + 2248);
  a1[2859] = (uint64_t)(a1 + 2374);
  a1[2860] = (uint64_t)(a1 + 2500);
  a1[2861] = (uint64_t)(a1 + 2626);
  a1[2862] = (uint64_t)(a1 + 2752);
  a1[2849] = (uint64_t)(a1 + 1978);
  a1[2850] = (uint64_t)(a1 + 2104);
  a1[2851] = (uint64_t)(a1 + 2230);
  a1[2852] = (uint64_t)(a1 + 2356);
  a1[2853] = (uint64_t)(a1 + 2482);
  a1[2854] = (uint64_t)(a1 + 2608);
  a1[2855] = (uint64_t)(a1 + 2734);
  a1[2842] = v33;
  a1[2843] = (uint64_t)(a1 + 2086);
  a1[2844] = (uint64_t)(a1 + 2212);
  a1[2845] = (uint64_t)(a1 + 2338);
  a1[2846] = (uint64_t)(a1 + 2464);
  a1[2847] = (uint64_t)(a1 + 2590);
  a1[2848] = (uint64_t)(a1 + 2716);
  *(_OWORD *)(a1 + 3061) = 0u;
  *(_OWORD *)(a1 + 3063) = 0u;
  *(_OWORD *)(a1 + 3065) = 0u;
  *(_OWORD *)(a1 + 3067) = 0u;
  *(_OWORD *)(a1 + 3069) = 0u;
  *(_OWORD *)(a1 + 3071) = 0u;
  *(_OWORD *)(a1 + 3073) = 0u;
  *(_OWORD *)(a1 + 3075) = 0u;
  *(_OWORD *)(a1 + 3077) = 0u;
  *(_OWORD *)(a1 + 3079) = 0u;
  a1[3081] = 0;
  *((_DWORD *)a1 + 6120) = 0;
  *((_OWORD *)a1 + 1529) = 0u;
  *((_OWORD *)a1 + 1528) = 0u;
  *((_OWORD *)a1 + 1527) = 0u;
  *((_OWORD *)a1 + 1526) = 0u;
  *((_OWORD *)a1 + 1525) = 0u;
  *((_OWORD *)a1 + 1524) = 0u;
  *((_OWORD *)a1 + 1523) = 0u;
  bzero(a1 + 2916, 0x40CuLL);
  *(_OWORD *)((char *)a1 + 23282) = 0u;
  *(_OWORD *)(a1 + 2909) = 0u;
  *(_OWORD *)(a1 + 2907) = 0u;
  *(_OWORD *)(a1 + 2905) = 0u;
  *(_OWORD *)(a1 + 2903) = 0u;
  *(_OWORD *)(a1 + 2901) = 0u;
  *(_OWORD *)(a1 + 2899) = 0u;
  *(_OWORD *)(a1 + 2897) = 0u;
  *(_OWORD *)(a1 + 2895) = 0u;
  *(_OWORD *)(a1 + 2893) = 0u;
  *(_OWORD *)(a1 + 2891) = 0u;
  a1[1946] = (uint64_t)&off_24CA01C40;
  a1[3082] = (uint64_t)(a1 + 1791);
  a1[3083] = 0x3EE4F8B588E368F1;
  *((_OWORD *)a1 + 1542) = 0u;
  *((_DWORD *)a1 + 6172) = 0;
  *((_OWORD *)a1 + 1550) = 0u;
  *((_OWORD *)a1 + 1551) = 0u;
  a1[3104] = 0;
  *((_DWORD *)a1 + 6198) = 0;
  *(_OWORD *)(a1 + 3097) = 0u;
  *(_OWORD *)(a1 + 3095) = 0u;
  *(_OWORD *)(a1 + 3093) = 0u;
  *(_OWORD *)(a1 + 3091) = 0u;
  *(_OWORD *)(a1 + 3089) = 0u;
  *(_OWORD *)(a1 + 3087) = 0u;
  a1[589] = (uint64_t)off_24CA01828;
  a1[3105] = 2;
  a1[3108] = 0;
  *((_OWORD *)a1 + 1553) = 0u;
  a1[3110] = 0xA00000001;
  *((_BYTE *)a1 + 24888) = 0;
  *((_OWORD *)a1 + 1556) = xmmword_21039D460;
  a1[3114] = 0x3EB0C6F7A0B5ED8DLL;
  *((_BYTE *)a1 + 24920) = 0;
  a1[3116] = 0x3FF7B8BAC710CB29;
  a1[3181] = (uint64_t)(a1 + 3117);
  *((_OWORD *)a1 + 1591) = xmmword_210378040;
  *((_WORD *)a1 + 12736) = 0;
  a1[3188] = 0;
  a1[3192] = 0;
  a1[3196] = 0;
  a1[3200] = 0;
  a1[3201] = 0xBFF0000000000000;
  *((_DWORD *)a1 + 6408) = 0;
  *((_OWORD *)a1 + 1601) = 0u;
  a1[3109] = (uint64_t)&off_24C9FCEF0;
  a1[3205] = 0x3EB0C6F7A0B5ED8DLL;
  a1[3206] = 0x3F50624DD2F1A9FCLL;
  *((_BYTE *)a1 + 25656) = 1;
  *((_OWORD *)a1 + 1604) = xmmword_2102DBD20;
  *((_OWORD *)a1 + 1605) = xmmword_2103B4940;
  a1[3212] = 0x4000000000000000;
  v34 = *a1;
  if (!*a1)
  {
LABEL_13:
    if (!a1[391])
      return a1;
    goto LABEL_14;
  }
  v35 = a1 + 51;
  if (*((_BYTE *)a1 + 1317))
  {
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_QWORD *)(v34 + 24);
    v81 = *(_OWORD *)(v34 + 32);
    v82 = *(_QWORD *)(v34 + 48);
    v38 = *(_QWORD *)(v34 + 56);
    v69 = *(_OWORD *)(v34 + 64);
    v70 = *(_QWORD *)(v34 + 80);
    v68 = *(_QWORD *)(v34 + 104);
    v67 = *(_OWORD *)(v34 + 88);
    v66 = *(_QWORD *)(v34 + 128);
    v65 = *(_OWORD *)(v34 + 112);
    v64 = *(_QWORD *)(v34 + 152);
    v63 = *(_OWORD *)(v34 + 136);
    v80 = *(_QWORD *)(v34 + 224);
    v78 = *(_OWORD *)(v34 + 192);
    v79 = *(_OWORD *)(v34 + 208);
    v76 = *(_OWORD *)(v34 + 160);
    v77 = *(_OWORD *)(v34 + 176);
    v75 = *(_QWORD *)(v34 + 296);
    v73 = *(_OWORD *)(v34 + 264);
    v74 = *(_OWORD *)(v34 + 280);
    v71 = *(_OWORD *)(v34 + 232);
    v72 = *(_OWORD *)(v34 + 248);
    v39 = *(double *)(v34 + 16) * *((double *)a1 + 166);
    *((double *)a1 + 22) = *(double *)v34 * *((double *)a1 + 165);
    a1[23] = v36;
    *((double *)a1 + 24) = v39;
    a1[25] = v37;
    *v57 = v81;
    a1[28] = v82;
    a1[29] = v38;
    a1[32] = v70;
    *v30 = v69;
    a1[35] = v68;
    *v58 = v67;
    a1[38] = v66;
    *v59 = v65;
    a1[41] = v64;
    *v60 = v63;
    a1[50] = v80;
    *((_OWORD *)a1 + 23) = v78;
    *((_OWORD *)a1 + 24) = v79;
    *v61 = v76;
    *((_OWORD *)a1 + 22) = v77;
    a1[59] = v75;
    *(_OWORD *)(a1 + 55) = v73;
    *(_OWORD *)(a1 + 57) = v74;
    *v35 = v71;
    *(_OWORD *)(a1 + 53) = v72;
    goto LABEL_13;
  }
  v45 = *(_OWORD *)(v34 + 16);
  *((_OWORD *)a1 + 11) = *(_OWORD *)v34;
  *((_OWORD *)a1 + 12) = v45;
  v46 = *(_OWORD *)(v34 + 32);
  a1[28] = *(_QWORD *)(v34 + 48);
  *v57 = v46;
  a1[29] = *(_QWORD *)(v34 + 56);
  v47 = *(_OWORD *)(v34 + 64);
  a1[32] = *(_QWORD *)(v34 + 80);
  *v30 = v47;
  v48 = *(_OWORD *)(v34 + 88);
  a1[35] = *(_QWORD *)(v34 + 104);
  *v58 = v48;
  v49 = *(_OWORD *)(v34 + 112);
  a1[38] = *(_QWORD *)(v34 + 128);
  *v59 = v49;
  v50 = *(_OWORD *)(v34 + 136);
  a1[41] = *(_QWORD *)(v34 + 152);
  *v60 = v50;
  v52 = *(_OWORD *)(v34 + 192);
  v51 = *(_OWORD *)(v34 + 208);
  v53 = *(_OWORD *)(v34 + 176);
  a1[50] = *(_QWORD *)(v34 + 224);
  *((_OWORD *)a1 + 23) = v52;
  *((_OWORD *)a1 + 24) = v51;
  *((_OWORD *)a1 + 22) = v53;
  *v61 = *(_OWORD *)(v34 + 160);
  v54 = *(_OWORD *)(v34 + 264);
  v55 = *(_OWORD *)(v34 + 280);
  v56 = *(_OWORD *)(v34 + 248);
  a1[59] = *(_QWORD *)(v34 + 296);
  *(_OWORD *)(a1 + 55) = v54;
  *(_OWORD *)(a1 + 57) = v55;
  *(_OWORD *)(a1 + 53) = v56;
  *v35 = *(_OWORD *)(v34 + 232);
  if (!a1[391])
    return a1;
LABEL_14:
  v40 = (_QWORD *)a1[390];
  if (v40)
  {
    do
    {
      v41 = (_QWORD *)*v40;
      operator delete(v40);
      v40 = v41;
    }
    while (v41);
  }
  a1[390] = 0;
  v42 = a1[389];
  if (v42)
  {
    for (i = 0; i != v42; ++i)
      *(_QWORD *)(a1[388] + 8 * i) = 0;
  }
  a1[391] = 0;
  return a1;
}

void sub_20F63F52C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v10 = *(void **)(v1 + 5752);
  if (v10)
  {
    *(_QWORD *)(v1 + 5760) = v10;
    operator delete(v10);
  }
  sub_20F4EE0E8((void **)(v1 + 5608));
  sub_20F64D05C(v7);
  sub_20F4FD380(v1 + 4536);
  sub_20F4FD380(v6);
  v11 = *(void **)(v1 + 3192);
  if (v11)
    operator delete(v11);
  v12 = *(void **)(v1 + 3168);
  if (v12)
  {
    *(_QWORD *)(v1 + 3176) = v12;
    operator delete(v12);
  }
  sub_20E8C25A8(v2);
  sub_20F0287BC(v5);
  sub_20F6304A4(v4);
  sub_20E86665C(v8 + 264);
  sub_20E8C3144(v3);
  v13 = *(void **)(v1 + 152);
  if (v13)
  {
    *(_QWORD *)(v1 + 160) = v13;
    operator delete(v13);
  }
  sub_20E8E270C((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_20F63F5D4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[10] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[7] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[4] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_20F63F634()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20F63F5F8);
  JUMPOUT(0x20F63F5F0);
}

_QWORD *sub_20F63F644(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  sub_20F2C539C(a1 + 3109);
  a1[589] = off_24CA01828;
  v2 = a1[3106];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  a1[589] = off_24CA01970;
  v3 = a1[3100];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[3097];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[3094];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  sub_20F64C590((uint64_t)(a1 + 589));
  sub_20F4FD380((uint64_t)(a1 + 567));
  sub_20F4FD380((uint64_t)(a1 + 546));
  v6 = (void *)a1[399];
  if (v6)
    operator delete(v6);
  v7 = (void *)a1[396];
  if (v7)
  {
    a1[397] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[390];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[388];
  a1[388] = 0;
  if (v10)
    operator delete(v10);
  sub_20F0287BC(a1 + 274);
  sub_20F6304A4((uint64_t)(a1 + 66));
  v11 = (std::__shared_weak_count *)a1[64];
  if (!v11)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (char *)a1[60];
    if (!v14)
      goto LABEL_32;
  }
  else
  {
LABEL_21:
    v14 = (char *)a1[60];
    if (!v14)
      goto LABEL_32;
  }
  v15 = (char *)a1[61];
  v16 = v14;
  if (v15 != v14)
  {
    do
    {
      v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v15 -= 16;
    }
    while (v15 != v14);
    v16 = (char *)a1[60];
  }
  a1[61] = v14;
  operator delete(v16);
LABEL_32:
  v20 = (void *)a1[19];
  if (v20)
  {
    a1[20] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[9];
  if (v21)
  {
    a1[10] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[6];
  if (v22)
  {
    a1[7] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[3];
  if (v23)
  {
    a1[4] = v23;
    operator delete(v23);
  }
  return a1;
}

uint64_t sub_20F63F874(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA01828;
  v2 = a1[2517];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *a1 = off_24CA01970;
  v3 = a1[2511];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[2508];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[2505];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  return sub_20F64C590((uint64_t)a1);
}

void sub_20F63F91C(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v5, "DenseSchur");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_20F63F9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F63FA20(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __n128 v104;
  void **v105;
  unint64_t v106;
  size_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  float64x2_t v111;
  unsigned int *v112;
  int v113;
  int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  float64x2_t *v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  unsigned int *v124;
  unsigned int *v125;
  int v126;
  int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  __int128 v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  unsigned int *v142;
  int v143;
  int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  int v152;
  int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  float64x2_t *v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  unsigned int *v163;
  unsigned int *v164;
  int v165;
  int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  float64x2_t *v171;
  float64x2_t v172;
  float64x2_t v173;
  unsigned int *v174;
  unsigned int *v175;
  int v176;
  int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t v183;
  float64x2_t v184;
  unsigned int *v185;
  unsigned int *v186;
  int v187;
  int v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64_t v197;
  char v198;
  unsigned int *v200;
  unsigned int *v201;
  unsigned int *v202;
  int v203;
  char v204;
  int32x2_t v205;
  uint64_t v206;
  unsigned int v207;
  float64x2_t *v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  __int128 v217;
  uint64_t v218;
  float64x2_t v219;
  float64x2_t v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_20F6AC0F4(a1))
  {
    v2 = 1;
  }
  else if (*(_BYTE *)(a1 + 1873))
  {
    v2 = 0;
  }
  else
  {
    v3 = *(void **)(a1 + 2872);
    v4 = *(_QWORD *)(a1 + 2880) - (_QWORD)v3;
    if (v4 >= 1)
      bzero(v3, 8 * (((unint64_t)v4 >> 3) - ((unint64_t)v4 > 7)) + 8);
    v5 = *(void **)(a1 + 3880);
    v6 = *(_QWORD *)(a1 + 3888) - (_QWORD)v5;
    if (v6 >= 1)
      bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
    v7 = *(void **)(a1 + 4888);
    v8 = *(_QWORD *)(a1 + 4896) - (_QWORD)v7;
    if (v8 >= 1)
      bzero(v7, 8 * (((unint64_t)v8 >> 3) - ((unint64_t)v8 > 7)) + 8);
    v9 = *(void **)(a1 + 5896);
    v10 = *(_QWORD *)(a1 + 5904) - (_QWORD)v9;
    if (v10 >= 1)
      bzero(v9, 8 * (((unint64_t)v10 >> 3) - ((unint64_t)v10 > 7)) + 8);
    v11 = *(void **)(a1 + 6904);
    v12 = *(_QWORD *)(a1 + 6912) - (_QWORD)v11;
    if (v12 >= 1)
      bzero(v11, 8 * (((unint64_t)v12 >> 3) - ((unint64_t)v12 > 7)) + 8);
    v13 = *(void **)(a1 + 7912);
    v14 = *(_QWORD *)(a1 + 7920) - (_QWORD)v13;
    if (v14 >= 1)
      bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
    v15 = *(void **)(a1 + 8920);
    v16 = *(_QWORD *)(a1 + 8928) - (_QWORD)v15;
    if (v16 >= 1)
      bzero(v15, 8 * (((unint64_t)v16 >> 3) - ((unint64_t)v16 > 7)) + 8);
    v17 = *(void **)(a1 + 2728);
    v18 = *(_QWORD *)(a1 + 2736) - (_QWORD)v17;
    if (v18 >= 1)
      bzero(v17, 8 * (((unint64_t)v18 >> 3) - ((unint64_t)v18 > 7)) + 8);
    v19 = *(void **)(a1 + 3736);
    v20 = *(_QWORD *)(a1 + 3744) - (_QWORD)v19;
    if (v20 >= 1)
      bzero(v19, 8 * (((unint64_t)v20 >> 3) - ((unint64_t)v20 > 7)) + 8);
    v21 = *(void **)(a1 + 4744);
    v22 = *(_QWORD *)(a1 + 4752) - (_QWORD)v21;
    if (v22 >= 1)
      bzero(v21, 8 * (((unint64_t)v22 >> 3) - ((unint64_t)v22 > 7)) + 8);
    v23 = *(void **)(a1 + 5752);
    v24 = *(_QWORD *)(a1 + 5760) - (_QWORD)v23;
    if (v24 >= 1)
      bzero(v23, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
    v25 = *(void **)(a1 + 6760);
    v26 = *(_QWORD *)(a1 + 6768) - (_QWORD)v25;
    if (v26 >= 1)
      bzero(v25, 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    v27 = *(void **)(a1 + 7768);
    v28 = *(_QWORD *)(a1 + 7776) - (_QWORD)v27;
    if (v28 >= 1)
      bzero(v27, 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    v29 = *(void **)(a1 + 8776);
    v30 = *(_QWORD *)(a1 + 8784) - (_QWORD)v29;
    if (v30 >= 1)
      bzero(v29, 8 * (((unint64_t)v30 >> 3) - ((unint64_t)v30 > 7)) + 8);
    v31 = *(void **)(a1 + 2584);
    v32 = *(_QWORD *)(a1 + 2592) - (_QWORD)v31;
    if (v32 >= 1)
      bzero(v31, 8 * (((unint64_t)v32 >> 3) - ((unint64_t)v32 > 7)) + 8);
    v33 = *(void **)(a1 + 3592);
    v34 = *(_QWORD *)(a1 + 3600) - (_QWORD)v33;
    if (v34 >= 1)
      bzero(v33, 8 * (((unint64_t)v34 >> 3) - ((unint64_t)v34 > 7)) + 8);
    v35 = *(void **)(a1 + 4600);
    v36 = *(_QWORD *)(a1 + 4608) - (_QWORD)v35;
    if (v36 >= 1)
      bzero(v35, 8 * (((unint64_t)v36 >> 3) - ((unint64_t)v36 > 7)) + 8);
    v37 = *(void **)(a1 + 5608);
    v38 = *(_QWORD *)(a1 + 5616) - (_QWORD)v37;
    if (v38 >= 1)
      bzero(v37, 8 * (((unint64_t)v38 >> 3) - ((unint64_t)v38 > 7)) + 8);
    v39 = *(void **)(a1 + 6616);
    v40 = *(_QWORD *)(a1 + 6624) - (_QWORD)v39;
    if (v40 >= 1)
      bzero(v39, 8 * (((unint64_t)v40 >> 3) - ((unint64_t)v40 > 7)) + 8);
    v41 = *(void **)(a1 + 7624);
    v42 = *(_QWORD *)(a1 + 7632) - (_QWORD)v41;
    if (v42 >= 1)
      bzero(v41, 8 * (((unint64_t)v42 >> 3) - ((unint64_t)v42 > 7)) + 8);
    v43 = *(void **)(a1 + 8632);
    v44 = *(_QWORD *)(a1 + 8640) - (_QWORD)v43;
    if (v44 >= 1)
      bzero(v43, 8 * (((unint64_t)v44 >> 3) - ((unint64_t)v44 > 7)) + 8);
    v45 = *(void **)(a1 + 2440);
    v46 = *(_QWORD *)(a1 + 2448) - (_QWORD)v45;
    if (v46 >= 1)
      bzero(v45, 8 * (((unint64_t)v46 >> 3) - ((unint64_t)v46 > 7)) + 8);
    v47 = *(void **)(a1 + 3448);
    v48 = *(_QWORD *)(a1 + 3456) - (_QWORD)v47;
    if (v48 >= 1)
      bzero(v47, 8 * (((unint64_t)v48 >> 3) - ((unint64_t)v48 > 7)) + 8);
    v49 = *(void **)(a1 + 4456);
    v50 = *(_QWORD *)(a1 + 4464) - (_QWORD)v49;
    if (v50 >= 1)
      bzero(v49, 8 * (((unint64_t)v50 >> 3) - ((unint64_t)v50 > 7)) + 8);
    v51 = *(void **)(a1 + 5464);
    v52 = *(_QWORD *)(a1 + 5472) - (_QWORD)v51;
    if (v52 >= 1)
      bzero(v51, 8 * (((unint64_t)v52 >> 3) - ((unint64_t)v52 > 7)) + 8);
    v53 = *(void **)(a1 + 6472);
    v54 = *(_QWORD *)(a1 + 6480) - (_QWORD)v53;
    if (v54 >= 1)
      bzero(v53, 8 * (((unint64_t)v54 >> 3) - ((unint64_t)v54 > 7)) + 8);
    v55 = *(void **)(a1 + 7480);
    v56 = *(_QWORD *)(a1 + 7488) - (_QWORD)v55;
    if (v56 >= 1)
      bzero(v55, 8 * (((unint64_t)v56 >> 3) - ((unint64_t)v56 > 7)) + 8);
    v57 = *(void **)(a1 + 8488);
    v58 = *(_QWORD *)(a1 + 8496) - (_QWORD)v57;
    if (v58 >= 1)
      bzero(v57, 8 * (((unint64_t)v58 >> 3) - ((unint64_t)v58 > 7)) + 8);
    v59 = *(void **)(a1 + 2296);
    v60 = *(_QWORD *)(a1 + 2304) - (_QWORD)v59;
    if (v60 >= 1)
      bzero(v59, 8 * (((unint64_t)v60 >> 3) - ((unint64_t)v60 > 7)) + 8);
    v61 = *(void **)(a1 + 3304);
    v62 = *(_QWORD *)(a1 + 3312) - (_QWORD)v61;
    if (v62 >= 1)
      bzero(v61, 8 * (((unint64_t)v62 >> 3) - ((unint64_t)v62 > 7)) + 8);
    v63 = *(void **)(a1 + 4312);
    v64 = *(_QWORD *)(a1 + 4320) - (_QWORD)v63;
    if (v64 >= 1)
      bzero(v63, 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
    v65 = *(void **)(a1 + 5320);
    v66 = *(_QWORD *)(a1 + 5328) - (_QWORD)v65;
    if (v66 >= 1)
      bzero(v65, 8 * (((unint64_t)v66 >> 3) - ((unint64_t)v66 > 7)) + 8);
    v67 = *(void **)(a1 + 6328);
    v68 = *(_QWORD *)(a1 + 6336) - (_QWORD)v67;
    if (v68 >= 1)
      bzero(v67, 8 * (((unint64_t)v68 >> 3) - ((unint64_t)v68 > 7)) + 8);
    v69 = *(void **)(a1 + 7336);
    v70 = *(_QWORD *)(a1 + 7344) - (_QWORD)v69;
    if (v70 >= 1)
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
    v71 = *(void **)(a1 + 8344);
    v72 = *(_QWORD *)(a1 + 8352) - (_QWORD)v71;
    if (v72 >= 1)
      bzero(v71, 8 * (((unint64_t)v72 >> 3) - ((unint64_t)v72 > 7)) + 8);
    v73 = *(void **)(a1 + 2152);
    v74 = *(_QWORD *)(a1 + 2160) - (_QWORD)v73;
    if (v74 >= 1)
      bzero(v73, 8 * (((unint64_t)v74 >> 3) - ((unint64_t)v74 > 7)) + 8);
    v75 = *(void **)(a1 + 3160);
    v76 = *(_QWORD *)(a1 + 3168) - (_QWORD)v75;
    if (v76 >= 1)
      bzero(v75, 8 * (((unint64_t)v76 >> 3) - ((unint64_t)v76 > 7)) + 8);
    v77 = *(void **)(a1 + 4168);
    v78 = *(_QWORD *)(a1 + 4176) - (_QWORD)v77;
    if (v78 >= 1)
      bzero(v77, 8 * (((unint64_t)v78 >> 3) - ((unint64_t)v78 > 7)) + 8);
    v79 = *(void **)(a1 + 5176);
    v80 = *(_QWORD *)(a1 + 5184) - (_QWORD)v79;
    if (v80 >= 1)
      bzero(v79, 8 * (((unint64_t)v80 >> 3) - ((unint64_t)v80 > 7)) + 8);
    v81 = *(void **)(a1 + 6184);
    v82 = *(_QWORD *)(a1 + 6192) - (_QWORD)v81;
    if (v82 >= 1)
      bzero(v81, 8 * (((unint64_t)v82 >> 3) - ((unint64_t)v82 > 7)) + 8);
    v83 = *(void **)(a1 + 7192);
    v84 = *(_QWORD *)(a1 + 7200) - (_QWORD)v83;
    if (v84 >= 1)
      bzero(v83, 8 * (((unint64_t)v84 >> 3) - ((unint64_t)v84 > 7)) + 8);
    v85 = *(void **)(a1 + 8200);
    v86 = *(_QWORD *)(a1 + 8208) - (_QWORD)v85;
    if (v86 >= 1)
      bzero(v85, 8 * (((unint64_t)v86 >> 3) - ((unint64_t)v86 > 7)) + 8);
    v87 = *(void **)(a1 + 2008);
    v88 = *(_QWORD *)(a1 + 2016) - (_QWORD)v87;
    if (v88 >= 1)
      bzero(v87, 8 * (((unint64_t)v88 >> 3) - ((unint64_t)v88 > 7)) + 8);
    v89 = *(void **)(a1 + 3016);
    v90 = *(_QWORD *)(a1 + 3024) - (_QWORD)v89;
    if (v90 >= 1)
      bzero(v89, 8 * (((unint64_t)v90 >> 3) - ((unint64_t)v90 > 7)) + 8);
    v91 = *(void **)(a1 + 4024);
    v92 = *(_QWORD *)(a1 + 4032) - (_QWORD)v91;
    if (v92 >= 1)
      bzero(v91, 8 * (((unint64_t)v92 >> 3) - ((unint64_t)v92 > 7)) + 8);
    v93 = *(void **)(a1 + 5032);
    v94 = *(_QWORD *)(a1 + 5040) - (_QWORD)v93;
    if (v94 >= 1)
      bzero(v93, 8 * (((unint64_t)v94 >> 3) - ((unint64_t)v94 > 7)) + 8);
    v95 = *(void **)(a1 + 6040);
    v96 = *(_QWORD *)(a1 + 6048) - (_QWORD)v95;
    if (v96 >= 1)
      bzero(v95, 8 * (((unint64_t)v96 >> 3) - ((unint64_t)v96 > 7)) + 8);
    v97 = *(void **)(a1 + 7048);
    v98 = *(_QWORD *)(a1 + 7056) - (_QWORD)v97;
    if (v98 >= 1)
      bzero(v97, 8 * (((unint64_t)v98 >> 3) - ((unint64_t)v98 > 7)) + 8);
    v99 = *(void **)(a1 + 8056);
    v100 = *(_QWORD *)(a1 + 8064) - (_QWORD)v99;
    if (v100 >= 1)
      bzero(v99, 8 * (((unint64_t)v100 >> 3) - ((unint64_t)v100 > 7)) + 8);
    v101 = *(unsigned int *)(a1 + 1928);
    if ((_DWORD)v101)
      bzero(*(void **)(a1 + 1912), 8 * v101);
    v102 = *(_DWORD *)(a1 + 1904);
    if (v102 == 1)
    {
      v103 = *(unsigned int *)(a1 + 19976);
      if ((_DWORD)v103)
        bzero(*(void **)(a1 + 19960), 8 * v103);
    }
    if (((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
       + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2)
       + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
       + ((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
       + ((*(_QWORD *)(a1 + 18520) - *(_QWORD *)(a1 + 18512)) >> 2)
       + ((*(_QWORD *)(a1 + 18544) - *(_QWORD *)(a1 + 18536)) >> 2)
       + ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2))
    {
      kdebug_trace();
      v104 = sub_20F597B84(a1 + 1912, a1 + 10888, (char **)(a1 + 19128), a1 + 19296);
      v105 = (void **)(a1 + 19632);
      v106 = 9 * ((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
           + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
           + ((*(_DWORD *)(a1 + 18520) - *(_DWORD *)(a1 + 18512)) & 0xFFFFFFFC)
           + 6
           * (((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
            + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2))
           + ((*(_DWORD *)(a1 + 18544) - *(_DWORD *)(a1 + 18536)) & 0xFFFFFFFC)
           + 3 * ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2);
      *(_DWORD *)(a1 + 19648) = v106;
      if (*(_QWORD *)(a1 + 19640) < v106)
      {
        if (*v105)
          MEMORY[0x212BC6368](*v105, 0x1000C8000313F17, v104);
        *(_QWORD *)(a1 + 19632) = 0;
        v107 = (8 * v106 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(a1 + 19640) = v107 >> 3;
        *v105 = operator new(v107, (std::align_val_t)0x20uLL);
      }
      v108 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 10856) + 24))(a1 + 10856);
      sub_20F596E30(v108, a1 + 18416, (_QWORD *)(a1 + 19632));
      if (((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
         + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2)
         + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
         + ((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
         + ((*(_QWORD *)(a1 + 18520) - *(_QWORD *)(a1 + 18512)) >> 2)
         + ((*(_QWORD *)(a1 + 18544) - *(_QWORD *)(a1 + 18536)) >> 2)
         + ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2))
      {
        sub_20F5BBBDC((_QWORD *)(a1 + 10968), (void **)(a1 + 19656));
        sub_20F20B6B0(a1 + 19656);
        v109 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 10856) + 32))(a1 + 10856);
        v110 = a1 + 19752;
        sub_20F5BC34C(v109, a1 + 19752, a1 + 18416, a1 + 10864, v111);
        v112 = *(unsigned int **)(a1 + 18416);
        v200 = *(unsigned int **)(a1 + 18424);
        if (v112 != v200)
        {
          v113 = 0;
          v114 = 0;
          v115 = *(unsigned int **)(a1 + 9440);
          do
          {
            if (*v115 < *v112)
            {
              do
              {
                v116 = v115[1];
                ++v115;
                ++v113;
              }
              while (v116 < *v112);
            }
            v117 = *(_DWORD *)(a1 + 10940) + 6 * v114;
            v118 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v118 + 8 * v117;
            v207 = v117;
            v119 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1964) + 6 * v113));
            v120 = *v119;
            v121 = v119[2];
            v215 = v119[1];
            v216 = v121;
            v214 = v120;
            v208 = &v214;
            *(_QWORD *)&v219.f64[1] = &v205;
            *(_QWORD *)&v220.f64[0] = a1 + 19752;
            v220.f64[1] = 1.0;
            sub_20F3DA5F4(&v209, (uint64_t)&v219);
            v122 = vsubq_f64(*v208, v209);
            v123 = vsubq_f64(v208[2], v211);
            v119[1] = vsubq_f64(v208[1], v210);
            v119[2] = v123;
            *v119 = v122;
            ++v112;
            ++v114;
          }
          while (v112 != v200);
        }
        v124 = *(unsigned int **)(a1 + 18440);
        v125 = *(unsigned int **)(a1 + 18448);
        if (v124 != v125)
        {
          v126 = 0;
          v127 = 0;
          v128 = *(unsigned int **)(a1 + 9464);
          do
          {
            if (*v128 < *v124)
            {
              do
              {
                v129 = v128[1];
                ++v128;
                ++v126;
              }
              while (v129 < *v124);
            }
            v130 = *(_DWORD *)(a1 + 10944) + 9 * v127;
            v131 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v131 + 8 * v130;
            v207 = v130;
            v132 = *(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1968) + 9 * v126);
            v133 = *(float64x2_t *)v132;
            v134 = *(float64x2_t *)(v132 + 16);
            v135 = *(float64x2_t *)(v132 + 32);
            v136 = *(_OWORD *)(v132 + 48);
            v218 = *(_QWORD *)(v132 + 64);
            v216 = v135;
            v217 = v136;
            v215 = v134;
            v214 = v133;
            v208 = &v214;
            *(_QWORD *)&v219.f64[1] = &v205;
            *(_QWORD *)&v220.f64[0] = a1 + 19752;
            v220.f64[1] = 1.0;
            sub_20F5BCC94((uint64_t)&v209, (uint64_t)&v219);
            v137.f64[0] = v208[4].f64[0];
            v138.f64[0] = v213;
            v139 = vsubq_f64(*v208, v209);
            v140 = vsubq_f64(v208[3], v212);
            v141 = vsubq_f64(v208[1], v210);
            *(float64x2_t *)(v132 + 32) = vsubq_f64(v208[2], v211);
            *(float64x2_t *)(v132 + 48) = v140;
            *(float64x2_t *)v132 = v139;
            *(float64x2_t *)(v132 + 16) = v141;
            *(_QWORD *)(v132 + 64) = *(_OWORD *)&vsubq_f64(v137, v138);
            ++v124;
            ++v127;
          }
          while (v124 != v125);
        }
        v142 = *(unsigned int **)(a1 + 18464);
        v201 = *(unsigned int **)(a1 + 18472);
        if (v142 != v201)
        {
          v143 = 0;
          v144 = 0;
          v145 = *(unsigned int **)(a1 + 9488);
          do
          {
            if (*v145 < *v142)
            {
              do
              {
                v146 = v145[1];
                ++v145;
                ++v143;
              }
              while (v146 < *v142);
            }
            v147 = *(_DWORD *)(a1 + 10948) + v144;
            v148 = *(_QWORD *)(a1 + 19656);
            *(int32x2_t *)&v219.f64[0] = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            *(_QWORD *)&v219.f64[1] = v148 + 8 * v147;
            LODWORD(v220.f64[0]) = v147;
            v149 = (*(_DWORD *)(a1 + 1972) + v143);
            v150 = *(_QWORD *)(a1 + 1912);
            v205 = *(int32x2_t *)(v150 + 8 * v149);
            *(_QWORD *)&v214.f64[0] = &v205;
            *(_QWORD *)&v209.f64[0] = &v219;
            *(_QWORD *)&v209.f64[1] = a1 + 19752;
            v210.f64[0] = 1.0;
            sub_20F2BF1EC(&v214.f64[1], (uint64_t)&v208);
            *(double *)(v150 + 8 * v149) = **(double **)&v214.f64[0] - v214.f64[1];
            ++v142;
            ++v144;
            v110 = a1 + 19752;
          }
          while (v142 != v201);
        }
        v151 = *(unsigned int **)(a1 + 18488);
        v202 = *(unsigned int **)(a1 + 18496);
        if (v151 != v202)
        {
          v152 = 0;
          v153 = 0;
          v154 = *(unsigned int **)(a1 + 9512);
          do
          {
            if (*v154 < *v151)
            {
              do
              {
                v155 = v154[1];
                ++v154;
                ++v152;
              }
              while (v155 < *v151);
            }
            v156 = *(_DWORD *)(a1 + 10952) + 6 * v153;
            v157 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v157 + 8 * v156;
            v207 = v156;
            v158 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1976) + 6 * v152));
            v159 = *v158;
            v160 = v158[2];
            v215 = v158[1];
            v216 = v160;
            v214 = v159;
            v208 = &v214;
            *(_QWORD *)&v219.f64[1] = &v205;
            *(_QWORD *)&v220.f64[0] = v110;
            v220.f64[1] = 1.0;
            sub_20F3DA5F4(&v209, (uint64_t)&v219);
            v161 = vsubq_f64(*v208, v209);
            v162 = vsubq_f64(v208[2], v211);
            v158[1] = vsubq_f64(v208[1], v210);
            v158[2] = v162;
            *v158 = v161;
            ++v151;
            ++v153;
          }
          while (v151 != v202);
        }
        v163 = *(unsigned int **)(a1 + 18512);
        v164 = *(unsigned int **)(a1 + 18520);
        if (v163 != v164)
        {
          v165 = 0;
          v166 = 0;
          v167 = *(unsigned int **)(a1 + 9536);
          do
          {
            if (*v167 < *v163)
            {
              do
              {
                v168 = v167[1];
                ++v167;
                ++v165;
              }
              while (v168 < *v163);
            }
            v169 = *(_DWORD *)(a1 + 10956) + 4 * v166;
            v170 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v170 + 8 * v169;
            v207 = v169;
            v171 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1980) + 4 * v165));
            v172 = *v171;
            v220 = v171[1];
            v219 = v172;
            v208 = &v219;
            *(_QWORD *)&v214.f64[1] = &v205;
            *(_QWORD *)&v215.f64[0] = v110;
            v215.f64[1] = 1.0;
            sub_20F3DA534(&v209, (uint64_t)&v214);
            v173 = vsubq_f64(v208[1], v210);
            *v171 = vsubq_f64(*v208, v209);
            v171[1] = v173;
            ++v163;
            ++v166;
          }
          while (v163 != v164);
        }
        v174 = *(unsigned int **)(a1 + 18536);
        v175 = *(unsigned int **)(a1 + 18544);
        if (v174 != v175)
        {
          v176 = 0;
          v177 = 0;
          v178 = *(unsigned int **)(a1 + 9560);
          do
          {
            if (*v178 < *v174)
            {
              do
              {
                v179 = v178[1];
                ++v178;
                ++v176;
              }
              while (v179 < *v174);
            }
            v180 = *(_DWORD *)(a1 + 10960) + 4 * v177;
            v181 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v181 + 8 * v180;
            v207 = v180;
            v182 = (float64x2_t *)(*(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1984) + 4 * v176));
            v183 = *v182;
            v220 = v182[1];
            v219 = v183;
            v208 = &v219;
            *(_QWORD *)&v214.f64[1] = &v205;
            *(_QWORD *)&v215.f64[0] = v110;
            v215.f64[1] = 1.0;
            sub_20F3DA534(&v209, (uint64_t)&v214);
            v184 = vsubq_f64(v208[1], v210);
            *v182 = vsubq_f64(*v208, v209);
            v182[1] = v184;
            ++v174;
            ++v177;
          }
          while (v174 != v175);
        }
        v185 = *(unsigned int **)(a1 + 18560);
        v186 = *(unsigned int **)(a1 + 18568);
        if (v185 != v186)
        {
          v187 = 0;
          v188 = 0;
          v189 = *(unsigned int **)(a1 + 9584);
          do
          {
            if (*v189 < *v185)
            {
              do
              {
                v190 = v189[1];
                ++v189;
                ++v187;
              }
              while (v190 < *v185);
            }
            v191 = *(_DWORD *)(a1 + 10964) + 3 * v188;
            v192 = *(_QWORD *)(a1 + 19656);
            v205 = vrev64_s32(*(int32x2_t *)(a1 + 19672));
            v206 = v192 + 8 * v191;
            v207 = v191;
            v193 = *(_QWORD *)(a1 + 1912) + 8 * (*(_DWORD *)(a1 + 1988) + 3 * v187);
            v194 = *(float64x2_t *)v193;
            v220.f64[0] = *(float64_t *)(v193 + 16);
            v219 = v194;
            v208 = &v219;
            *(_QWORD *)&v214.f64[1] = &v205;
            *(_QWORD *)&v215.f64[0] = v110;
            v215.f64[1] = 1.0;
            sub_20F3A2AA0(&v209, (uint64_t)&v214);
            v195.f64[0] = v208[1].f64[0];
            v196.f64[0] = v210.f64[0];
            *(float64x2_t *)v193 = vsubq_f64(*v208, v209);
            *(_QWORD *)(v193 + 16) = *(_OWORD *)&vsubq_f64(v195, v196);
            ++v185;
            ++v188;
          }
          while (v185 != v186);
        }
      }
      kdebug_trace();
      v102 = *(_DWORD *)(a1 + 1904);
    }
    v197 = *(double *)(a1 + 9608);
    v198 = *(_BYTE *)(a1 + 1888);
    v214.f64[0] = *(float64_t *)(a1 + 1896);
    v219.f64[0] = v197;
    v204 = v198;
    v205.i32[0] = 2;
    v203 = v102;
    v208 = (float64x2_t *)(a1 + 9616);
    *(_QWORD *)&v209.f64[0] = &v203;
    *(_QWORD *)&v209.f64[1] = a1 + 8;
    *(_QWORD *)&v210.f64[0] = &v205;
    *(_QWORD *)&v210.f64[1] = &v204;
    *(_QWORD *)&v211.f64[0] = &v214;
    *(_QWORD *)&v211.f64[1] = &v219;
    sub_20F6BC0D8(&v208);
    v2 = 0;
    *(_WORD *)(a1 + 1873) = 1;
  }
  kdebug_trace();
  return v2;
}

void sub_20F640E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F640E70(uint64_t a1, void **a2)
{
  uint64_t v4;
  char v5;
  unsigned int *v6;
  void **v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  __int128 v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int8 *v52;
  int64x2_t *v53;
  __int8 *v54;
  int64x2_t *v55;
  __int8 *v56;
  unint64_t v57;
  unsigned int v58;
  size_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  int64x2_t v69;
  int64x2_t *v70;
  __int128 v71;
  uint64_t v72;
  int64x2_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  int64x2_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int8 *v81;
  int64x2_t *v82;
  __int8 *v83;
  int64x2_t *v84;
  __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64x2_t *v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t *v102;
  int64x2_t *v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  int64x2_t v112;
  int64x2_t *v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  uint64_t v124;
  __int128 v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t *v128;
  int64x2_t *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64x2_t v135;
  int64x2_t *v136;
  __int128 v137;
  uint64_t v138;
  int64x2_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  int64x2_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  int64x2_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  int64x2_t v151;
  uint64_t v152;
  __int8 *v153;
  int64x2_t *v154;
  __int8 *v155;
  int64x2_t *v156;
  __int8 *v157;
  int64x2_t *v158;
  __int8 *v159;
  int64x2_t *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int *v168;
  int64x2_t v169;
  int64x2_t *v170;
  __int128 v171;
  uint64_t v172;
  int64x2_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  int64x2_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  int64x2_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  int64x2_t v185;
  uint64_t v186;
  __int8 *v187;
  int64x2_t *v188;
  __int8 *v189;
  int64x2_t *v190;
  __int8 *v191;
  int64x2_t *v192;
  __int8 *v193;
  int64x2_t *v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int64x2_t v200;
  int64x2_t *v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  uint64_t v212;
  __int128 v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t *v216;
  int64x2_t *v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int *v225;
  int64x2_t *v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t *v237;
  int64x2_t *v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64x2_t v244;
  int64x2_t *v245;
  __int128 v246;
  uint64_t v247;
  int64x2_t v248;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  int64x2_t v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  __int8 *v256;
  int64x2_t *v257;
  __int8 *v258;
  int64x2_t *v259;
  __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int *v268;
  int8x16_t *v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int8x16_t v275;
  uint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int *v286;
  int64x2_t *v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t *v295;
  int64x2_t *v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int64x2_t v302;
  int64x2_t *v303;
  __int128 v304;
  uint64_t v305;
  int64x2_t v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  __int8 *v310;
  int64x2_t *v311;
  __int8 *v312;
  unint64_t v313;
  unint64_t v314;
  unsigned int *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int *v319;
  unsigned int *v320;
  int64x2_t v321;
  int64x2_t *v322;
  __int128 v323;
  uint64_t v324;
  int64x2_t v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  int64x2_t v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  __int8 *v333;
  int64x2_t *v334;
  __int8 *v335;
  int64x2_t *v336;
  __int8 *v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int64x2_t *v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t *v354;
  int64x2_t *v355;
  unint64_t v356;
  unint64_t v357;
  unsigned int *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int *v362;
  unsigned int *v363;
  int64x2_t *v364;
  int64x2_t v365;
  int64x2_t v366;
  int64x2_t v367;
  int64x2_t v368;
  int64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t *v372;
  int64x2_t *v373;
  unsigned int v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int64x2_t v379;
  int64x2_t *v380;
  __int128 v381;
  uint64_t v382;
  int64x2_t v383;
  uint64_t v384;
  __int128 v385;
  uint64_t v386;
  __int8 *v387;
  int64x2_t *v388;
  __int8 *v389;
  unint64_t v390;
  unint64_t v391;
  unsigned int *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int *v396;
  unsigned int *v397;
  int64x2_t v398;
  int64x2_t *v399;
  __int128 v400;
  uint64_t v401;
  int64x2_t v402;
  uint64_t v403;
  __int128 v404;
  uint64_t v405;
  __int8 *v406;
  int64x2_t *v407;
  __int8 *v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int64x2_t *v414;
  int64x2_t v415;
  int64x2_t v416;
  int64x2_t v417;
  int64x2_t v418;
  int64x2_t v419;
  int64x2_t v420;
  int64x2_t v421;
  int64x2_t *v422;
  int64x2_t *v423;
  unint64_t v424;
  unint64_t v425;
  unsigned int *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int *v430;
  unsigned int *v431;
  uint64_t v432;
  int64x2_t *v433;
  int8x16_t v434;
  unint64_t v435;
  int64x2_t v436;
  uint64_t v437;
  __int128 v438;
  int64x2_t v439;
  int64x2_t v440;
  int64x2_t *v441;
  uint64_t v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int64x2_t *v448;
  int64x2_t v449;
  __int128 v450;
  uint64_t v451;
  __int8 *v452;
  unint64_t v453;
  unint64_t v454;
  unsigned int *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int *v459;
  unsigned int *v460;
  int64x2_t v461;
  int64x2_t *v462;
  __int128 v463;
  uint64_t v464;
  int64x2_t v465;
  uint64_t v466;
  __int128 v467;
  uint64_t v468;
  __int8 *v469;
  int64x2_t *v470;
  __int8 *v471;
  unsigned int v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int64x2_t *v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t v483;
  int64x2_t v484;
  int64x2_t *v485;
  int64x2_t *v486;
  unint64_t v487;
  unint64_t v488;
  unsigned int *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unsigned int *v493;
  unsigned int *v494;
  int64x2_t *v495;
  int64x2_t v496;
  int64x2_t v497;
  int64x2_t v498;
  int64x2_t v499;
  int64x2_t v500;
  int64x2_t v501;
  int64x2_t v502;
  int64x2_t v503;
  int64x2_t v504;
  int64x2_t v505;
  int64x2_t v506;
  int64x2_t v507;
  int64x2_t v508;
  int64x2_t v509;
  int64x2_t v510;
  int64x2_t *v511;
  int64x2_t *v512;
  int64x2_t *v513;
  unsigned int v514;
  unsigned int v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  __int128 v519;
  _OWORD *v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  _OWORD *v531;
  _OWORD *v532;
  _OWORD *v533;
  _OWORD *v534;
  _OWORD *v535;
  unint64_t v536;
  unint64_t v537;
  unsigned int *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unsigned int *v542;
  unsigned int *v543;
  uint64_t v544;
  int64x2_t *v545;
  int64x2_t v546;
  __int128 v547;
  uint64_t v548;
  uint64_t v549;
  int8x16_t v550;
  unint64_t v551;
  __int8 *v552;
  uint64_t v553;
  unsigned int v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int64x2_t *v559;
  int64x2_t v560;
  __int128 v561;
  int64x2_t v562;
  int64x2_t v563;
  int64x2_t *v564;
  unint64_t v565;
  unint64_t v566;
  unsigned int *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unsigned int *v571;
  unsigned int *v572;
  int64x2_t v573;
  int64x2_t *v574;
  int64x2_t v575;
  int64x2_t v576;
  int64x2_t v577;
  int64x2_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int64x2_t v581;
  int64x2_t v582;
  __int128 v583;
  __int128 v584;
  int64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  int64x2_t v588;
  int64x2_t v589;
  int64x2_t v590;
  int64x2_t v591;
  int64x2_t v592;
  int64x2_t v593;
  int64x2_t *v594;
  int64x2_t *v595;
  int64x2_t *v596;
  unsigned int v597;
  unsigned int v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  __int128 v602;
  _OWORD *v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  _OWORD *v620;
  _OWORD *v621;
  _OWORD *v622;
  _OWORD *v623;
  _OWORD *v624;
  _OWORD *v625;
  _OWORD *v626;
  _OWORD *v627;
  unint64_t v628;
  unint64_t v629;
  unsigned int *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unsigned int *v634;
  unsigned int *v635;
  __int128 v636;
  _OWORD *v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  _OWORD *v648;
  _OWORD *v649;
  _OWORD *v650;
  _OWORD *v651;
  _OWORD *v652;
  unsigned int v653;
  unsigned int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int64x2_t *v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  int64x2_t v668;
  int64x2_t v669;
  int64x2_t v670;
  int64x2_t v671;
  int64x2_t v672;
  int64x2_t v673;
  int64x2_t *v674;
  int64x2_t *v675;
  int64x2_t *v676;
  unint64_t v677;
  unint64_t v678;
  unsigned int *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unsigned int *v683;
  unsigned int *v684;
  _QWORD *v685;
  unsigned int v686;
  unsigned int v687;
  int8x16_t *v688;
  uint64_t v689;
  uint64_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t *v693;
  unint64_t v694;
  unint64_t v695;
  unsigned int *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unsigned int *v700;
  unsigned int *v701;
  __int128 v702;
  _OWORD *v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  _OWORD *v720;
  _OWORD *v721;
  _OWORD *v722;
  _OWORD *v723;
  _OWORD *v724;
  _OWORD *v725;
  _OWORD *v726;
  _OWORD *v727;
  unsigned int v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int64x2_t v733;
  int64x2_t *v734;
  int64x2_t v735;
  int64x2_t v736;
  int64x2_t v737;
  int64x2_t v738;
  int64x2_t v739;
  int64x2_t v740;
  int64x2_t v741;
  int64x2_t v742;
  __int128 v743;
  __int128 v744;
  int64x2_t v745;
  int64x2_t v746;
  int64x2_t v747;
  int64x2_t v748;
  int64x2_t v749;
  int64x2_t v750;
  int64x2_t v751;
  int64x2_t v752;
  int64x2_t v753;
  int64x2_t *v754;
  int64x2_t *v755;
  int64x2_t *v756;
  unint64_t v757;
  unint64_t v758;
  unsigned int *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unsigned int *v763;
  unsigned int *v764;
  int64x2_t *v765;
  int64x2_t v766;
  int64x2_t v767;
  int64x2_t v768;
  int64x2_t v769;
  int64x2_t v770;
  int64x2_t v771;
  int64x2_t v772;
  int64x2_t v773;
  int64x2_t v774;
  int64x2_t v775;
  int64x2_t v776;
  int64x2_t v777;
  int64x2_t v778;
  int64x2_t v779;
  int64x2_t v780;
  int64x2_t *v781;
  int64x2_t *v782;
  int64x2_t *v783;
  unsigned int v784;
  unsigned int v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  __int128 v789;
  _OWORD *v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  _OWORD *v801;
  _OWORD *v802;
  _OWORD *v803;
  _OWORD *v804;
  _OWORD *v805;
  unint64_t v806;
  unint64_t v807;
  unsigned int *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unsigned int *v812;
  unsigned int *v813;
  int8x16_t *v814;
  unsigned int v815;
  unsigned int v816;
  int8x16_t *v817;
  uint64_t v818;
  uint64_t v819;
  int8x16_t v820;
  int8x16_t v821;
  _QWORD *v822;
  unint64_t v823;
  unint64_t v824;
  unsigned int *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  unsigned int *v829;
  unsigned int *v830;
  int64x2_t *v831;
  int64x2_t v832;
  int64x2_t v833;
  int64x2_t v834;
  int64x2_t v835;
  int64x2_t v836;
  int64x2_t v837;
  int64x2_t v838;
  int64x2_t v839;
  int64x2_t v840;
  int64x2_t v841;
  int64x2_t v842;
  int64x2_t v843;
  int64x2_t *v844;
  int64x2_t *v845;
  int64x2_t *v846;
  unsigned int v847;
  unsigned int v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int64x2_t v852;
  __int128 v853;
  __int128 v854;
  __int8 *v855;
  unint64_t v856;
  unint64_t v857;
  unsigned int *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unsigned int *v862;
  unsigned int *v863;
  __int128 v864;
  _OWORD *v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  _OWORD *v876;
  _OWORD *v877;
  _OWORD *v878;
  _OWORD *v879;
  _OWORD *v880;
  unsigned int v881;
  unsigned int v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  int64x2_t *v886;
  int64x2_t v887;
  int64x2_t v888;
  int64x2_t v889;
  int64x2_t v890;
  int64x2_t v891;
  int64x2_t v892;
  int64x2_t v893;
  int64x2_t v894;
  int64x2_t v895;
  int64x2_t v896;
  int64x2_t v897;
  int64x2_t v898;
  int64x2_t v899;
  int64x2_t v900;
  int64x2_t v901;
  int64x2_t *v902;
  int64x2_t *v903;
  int64x2_t *v904;
  unint64_t v905;
  unint64_t v906;
  unsigned int *v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  unsigned int *v911;
  unsigned int *v912;
  int64x2_t *v913;
  int64x2_t v914;
  int64x2_t v915;
  int64x2_t v916;
  int64x2_t v917;
  int64x2_t v918;
  int64x2_t v919;
  int64x2_t v920;
  int64x2_t v921;
  int64x2_t v922;
  int64x2_t v923;
  int64x2_t v924;
  int64x2_t v925;
  int64x2_t *v926;
  int64x2_t *v927;
  int64x2_t *v928;
  unsigned int v929;
  unsigned int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  int64x2_t v934;
  __int128 v935;
  __int128 v936;
  __int8 *v937;
  unint64_t v938;
  unint64_t v939;
  unsigned int *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unsigned int *v944;
  unsigned int *v945;
  int64x2_t v946;
  int64x2_t *v947;
  __int128 v948;
  __int128 v949;
  int64x2_t v950;
  int64x2_t v951;
  int64x2_t v952;
  int64x2_t v953;
  __int8 *v954;
  int64x2_t *v955;
  int64x2_t *v956;
  unsigned int v957;
  unsigned int v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  int64x2_t v962;
  int64x2_t v963;
  int64x2_t v964;
  int64x2_t v965;
  int64x2_t v966;
  int64x2_t v967;
  int64x2_t v968;
  int64x2_t v969;
  int64x2_t *v970;
  unint64_t v971;
  unint64_t v972;
  unsigned int *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unsigned int *v977;
  unsigned int *v978;
  int64x2_t *v979;
  int64x2_t v980;
  int64x2_t v981;
  int64x2_t v982;
  __int128 v983;
  __int128 v984;
  int64x2_t v985;
  int64x2_t v986;
  int64x2_t *v987;
  int64x2_t *v988;
  int64x2_t *v989;
  unsigned int v990;
  unsigned int v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  __int128 v995;
  _OWORD *v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  _OWORD *v1001;
  _OWORD *v1002;
  unint64_t v1003;
  unint64_t v1004;
  unsigned int *v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  unsigned int *v1009;
  unsigned int *v1010;
  int64x2_t v1011;
  int64x2_t *v1012;
  __int128 v1013;
  __int128 v1014;
  int64x2_t v1015;
  int64x2_t v1016;
  int64x2_t v1017;
  int64x2_t v1018;
  __int8 *v1019;
  int64x2_t *v1020;
  int64x2_t *v1021;
  unsigned int v1022;
  unsigned int v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  int64x2_t v1027;
  int64x2_t v1028;
  int64x2_t v1029;
  int64x2_t v1030;
  int64x2_t v1031;
  int64x2_t v1032;
  int64x2_t v1033;
  int64x2_t v1034;
  int64x2_t *v1035;
  unint64_t v1036;
  unint64_t v1037;
  unsigned int *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unsigned int *v1042;
  unsigned int *v1043;
  int64x2_t *v1044;
  int64x2_t v1045;
  int64x2_t v1046;
  int64x2_t v1047;
  int64x2_t v1048;
  int64x2_t v1049;
  int64x2_t v1050;
  int64x2_t v1051;
  int64x2_t v1052;
  int64x2_t v1053;
  int64x2_t v1054;
  int64x2_t v1055;
  int64x2_t v1056;
  int64x2_t v1057;
  int64x2_t v1058;
  int64x2_t v1059;
  int64x2_t *v1060;
  int64x2_t *v1061;
  int64x2_t *v1062;
  unsigned int v1063;
  unsigned int v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  __int128 v1068;
  _OWORD *v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  _OWORD *v1080;
  _OWORD *v1081;
  _OWORD *v1082;
  _OWORD *v1083;
  _OWORD *v1084;
  unint64_t v1085;
  unint64_t v1086;
  unsigned int *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unsigned int *v1091;
  unsigned int *v1092;
  __int128 v1093;
  _OWORD *v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  _OWORD *v1099;
  _OWORD *v1100;
  unsigned int v1101;
  unsigned int v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int64x2_t *v1106;
  int64x2_t v1107;
  int64x2_t v1108;
  int64x2_t v1109;
  __int128 v1110;
  __int128 v1111;
  int64x2_t v1112;
  int64x2_t v1113;
  int64x2_t *v1114;
  int64x2_t *v1115;
  int64x2_t *v1116;
  unint64_t v1117;
  unint64_t v1118;
  unsigned int *v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  unsigned int *v1123;
  unsigned int *v1124;
  int64x2_t v1125;
  int64x2_t *v1126;
  int64x2_t v1127;
  int64x2_t v1128;
  int64x2_t v1129;
  int64x2_t v1130;
  int64x2_t v1131;
  int64x2_t v1132;
  int64x2_t v1133;
  int64x2_t v1134;
  __int128 v1135;
  __int128 v1136;
  int64x2_t v1137;
  int64x2_t v1138;
  int64x2_t v1139;
  int64x2_t v1140;
  int64x2_t v1141;
  int64x2_t v1142;
  int64x2_t v1143;
  int64x2_t v1144;
  int64x2_t v1145;
  int64x2_t *v1146;
  int64x2_t *v1147;
  int64x2_t *v1148;
  unsigned int v1149;
  unsigned int v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  __int128 v1154;
  _OWORD *v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  _OWORD *v1172;
  _OWORD *v1173;
  _OWORD *v1174;
  _OWORD *v1175;
  _OWORD *v1176;
  _OWORD *v1177;
  _OWORD *v1178;
  _OWORD *v1179;
  unint64_t v1180;
  unint64_t v1181;
  unsigned int *v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unsigned int *v1186;
  unsigned int *v1187;
  __int128 v1188;
  _OWORD *v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  _OWORD *v1200;
  _OWORD *v1201;
  _OWORD *v1202;
  _OWORD *v1203;
  _OWORD *v1204;
  unsigned int v1205;
  unsigned int v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int64x2_t *v1210;
  int64x2_t v1211;
  int64x2_t v1212;
  int64x2_t v1213;
  int64x2_t v1214;
  int64x2_t v1215;
  int64x2_t v1216;
  int64x2_t v1217;
  int64x2_t v1218;
  int64x2_t v1219;
  int64x2_t v1220;
  int64x2_t v1221;
  int64x2_t v1222;
  int64x2_t v1223;
  int64x2_t v1224;
  int64x2_t v1225;
  int64x2_t *v1226;
  int64x2_t *v1227;
  int64x2_t *v1228;
  unint64_t v1229;
  unint64_t v1230;
  unsigned int *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  unsigned int *v1235;
  unsigned int *v1236;
  _QWORD *v1237;
  unsigned int v1238;
  unsigned int v1239;
  int8x16_t *v1240;
  uint64_t v1241;
  uint64_t v1242;
  int8x16_t v1243;
  int8x16_t v1244;
  int8x16_t *v1245;
  unint64_t v1246;
  unint64_t v1247;
  unsigned int *v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  unsigned int *v1252;
  unsigned int *v1253;
  __int128 v1254;
  _OWORD *v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  _OWORD *v1272;
  _OWORD *v1273;
  _OWORD *v1274;
  _OWORD *v1275;
  _OWORD *v1276;
  _OWORD *v1277;
  _OWORD *v1278;
  _OWORD *v1279;
  unsigned int v1280;
  unsigned int v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  int64x2_t v1285;
  int64x2_t *v1286;
  int64x2_t v1287;
  int64x2_t v1288;
  int64x2_t v1289;
  int64x2_t v1290;
  int64x2_t v1291;
  int64x2_t v1292;
  int64x2_t v1293;
  int64x2_t v1294;
  __int128 v1295;
  __int128 v1296;
  int64x2_t v1297;
  int64x2_t v1298;
  int64x2_t v1299;
  int64x2_t v1300;
  int64x2_t v1301;
  int64x2_t v1302;
  int64x2_t v1303;
  int64x2_t v1304;
  int64x2_t v1305;
  int64x2_t *v1306;
  int64x2_t *v1307;
  int64x2_t *v1308;
  unint64_t v1309;
  unint64_t v1310;
  unsigned int *v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  unsigned int *v1315;
  unsigned int *v1316;
  int64x2_t *v1317;
  int64x2_t v1318;
  int64x2_t v1319;
  int64x2_t v1320;
  int64x2_t v1321;
  int64x2_t v1322;
  int64x2_t v1323;
  int64x2_t v1324;
  int64x2_t v1325;
  int64x2_t v1326;
  int64x2_t v1327;
  int64x2_t v1328;
  int64x2_t v1329;
  int64x2_t v1330;
  int64x2_t v1331;
  int64x2_t v1332;
  int64x2_t *v1333;
  int64x2_t *v1334;
  int64x2_t *v1335;
  unsigned int v1336;
  unsigned int v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  __int128 v1341;
  _OWORD *v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  _OWORD *v1353;
  _OWORD *v1354;
  _OWORD *v1355;
  _OWORD *v1356;
  _OWORD *v1357;
  unint64_t v1358;
  unint64_t v1359;
  unsigned int *v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  unsigned int *v1364;
  unsigned int *v1365;
  int8x16_t *v1366;
  unsigned int v1367;
  unsigned int v1368;
  int8x16_t *v1369;
  uint64_t v1370;
  uint64_t v1371;
  int8x16_t v1372;
  int8x16_t v1373;
  _QWORD *v1374;
  unint64_t v1375;
  unint64_t v1376;
  unsigned int *v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  unsigned int *v1381;
  unsigned int *v1382;
  int64x2_t *v1383;
  int64x2_t v1384;
  int64x2_t v1385;
  int64x2_t v1386;
  int64x2_t v1387;
  int64x2_t v1388;
  int64x2_t v1389;
  int64x2_t v1390;
  int64x2_t v1391;
  int64x2_t v1392;
  int64x2_t v1393;
  int64x2_t v1394;
  int64x2_t v1395;
  int64x2_t *v1396;
  int64x2_t *v1397;
  int64x2_t *v1398;
  unsigned int v1399;
  unsigned int v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  int64x2_t v1404;
  __int128 v1405;
  __int128 v1406;
  __int8 *v1407;
  unint64_t v1408;
  unint64_t v1409;
  unsigned int *v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  unsigned int *v1414;
  unsigned int *v1415;
  __int128 v1416;
  _OWORD *v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  __int128 v1426;
  __int128 v1427;
  _OWORD *v1428;
  _OWORD *v1429;
  _OWORD *v1430;
  _OWORD *v1431;
  _OWORD *v1432;
  unsigned int v1433;
  unsigned int v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  int64x2_t *v1438;
  int64x2_t v1439;
  int64x2_t v1440;
  int64x2_t v1441;
  int64x2_t v1442;
  int64x2_t v1443;
  int64x2_t v1444;
  int64x2_t v1445;
  int64x2_t v1446;
  int64x2_t v1447;
  int64x2_t v1448;
  int64x2_t v1449;
  int64x2_t v1450;
  int64x2_t v1451;
  int64x2_t v1452;
  int64x2_t v1453;
  int64x2_t *v1454;
  int64x2_t *v1455;
  int64x2_t *v1456;
  unint64_t v1457;
  unint64_t v1458;
  unsigned int *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  unsigned int *v1463;
  unsigned int *v1464;
  int64x2_t *v1465;
  int64x2_t v1466;
  int64x2_t v1467;
  int64x2_t v1468;
  int64x2_t v1469;
  int64x2_t v1470;
  int64x2_t v1471;
  int64x2_t v1472;
  int64x2_t v1473;
  int64x2_t v1474;
  int64x2_t v1475;
  int64x2_t v1476;
  int64x2_t v1477;
  int64x2_t *v1478;
  int64x2_t *v1479;
  int64x2_t *v1480;
  unsigned int v1481;
  unsigned int v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  int64x2_t v1486;
  __int128 v1487;
  __int128 v1488;
  __int8 *v1489;
  unint64_t v1490;
  unint64_t v1491;
  unsigned int *v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  unsigned int *v1496;
  unsigned int *v1497;
  int64x2_t v1498;
  int64x2_t *v1499;
  __int128 v1500;
  __int128 v1501;
  int64x2_t v1502;
  int64x2_t v1503;
  int64x2_t v1504;
  int64x2_t v1505;
  __int8 *v1506;
  int64x2_t *v1507;
  int64x2_t *v1508;
  unsigned int v1509;
  unsigned int v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  int64x2_t v1514;
  int64x2_t v1515;
  int64x2_t v1516;
  int64x2_t v1517;
  int64x2_t v1518;
  int64x2_t v1519;
  int64x2_t v1520;
  int64x2_t v1521;
  int64x2_t *v1522;
  unint64_t v1523;
  unint64_t v1524;
  unsigned int *v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  unsigned int *v1529;
  unsigned int *v1530;
  int64x2_t *v1531;
  int64x2_t v1532;
  int64x2_t v1533;
  int64x2_t v1534;
  __int128 v1535;
  __int128 v1536;
  int64x2_t v1537;
  int64x2_t v1538;
  int64x2_t *v1539;
  int64x2_t *v1540;
  int64x2_t *v1541;
  unsigned int v1542;
  unsigned int v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  __int128 v1547;
  _OWORD *v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  _OWORD *v1553;
  _OWORD *v1554;
  unint64_t v1555;
  unint64_t v1556;
  unsigned int *v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  unsigned int *v1561;
  unsigned int *v1562;
  int64x2_t v1563;
  int64x2_t *v1564;
  __int128 v1565;
  __int128 v1566;
  int64x2_t v1567;
  int64x2_t v1568;
  int64x2_t v1569;
  int64x2_t v1570;
  __int8 *v1571;
  int64x2_t *v1572;
  int64x2_t *v1573;
  unsigned int v1574;
  unsigned int v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  int64x2_t v1579;
  int64x2_t v1580;
  int64x2_t v1581;
  int64x2_t v1582;
  int64x2_t v1583;
  int64x2_t v1584;
  int64x2_t v1585;
  int64x2_t v1586;
  int64x2_t *v1587;
  unint64_t v1588;
  unint64_t v1589;
  unsigned int *v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  unsigned int *v1594;
  unsigned int *v1595;
  int64x2_t *v1596;
  int64x2_t v1597;
  int64x2_t v1598;
  int64x2_t v1599;
  int64x2_t v1600;
  int64x2_t v1601;
  int64x2_t v1602;
  int64x2_t v1603;
  int64x2_t v1604;
  int64x2_t v1605;
  int64x2_t v1606;
  int64x2_t v1607;
  int64x2_t v1608;
  int64x2_t v1609;
  int64x2_t v1610;
  int64x2_t v1611;
  int64x2_t v1612;
  int64x2_t v1613;
  int8x16_t v1614;
  int8x16_t v1615;
  int8x16_t v1616;
  unint64_t v1617;
  unint64_t v1618;
  unint64_t v1619;
  int8x16_t v1620;
  int8x16_t v1621;
  int8x16_t v1622;
  unint64_t v1623;
  unint64_t v1624;
  unint64_t v1625;
  int8x16_t v1626;
  int8x16_t v1627;
  int8x16_t v1628;
  unint64_t v1629;
  unint64_t v1630;
  unint64_t v1631;
  int8x16_t v1632;
  int8x16_t v1633;
  int8x16_t v1634;
  unint64_t v1635;
  unint64_t v1636;
  unint64_t v1637;
  int64x2_t *v1638;
  int8x16_t *v1639;
  int8x16_t *v1640;
  int8x16_t *v1641;
  int8x16_t *v1642;
  unsigned int v1643;
  unsigned int v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  int64x2_t v1648;
  int64x2_t v1649;
  int64x2_t v1650;
  unint64_t v1651;
  unint64_t v1652;
  unsigned int *v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  unsigned int *v1657;
  unsigned int *v1658;
  __int128 v1659;
  _OWORD *v1660;
  __int128 v1661;
  __int128 v1662;
  __int128 v1663;
  __int128 v1664;
  _OWORD *v1665;
  _OWORD *v1666;
  unsigned int v1667;
  unsigned int v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  int64x2_t *v1672;
  int64x2_t v1673;
  int64x2_t v1674;
  int64x2_t v1675;
  __int128 v1676;
  __int128 v1677;
  int64x2_t v1678;
  int64x2_t v1679;
  int64x2_t *v1680;
  int64x2_t *v1681;
  int64x2_t *v1682;
  unint64_t v1683;
  unint64_t v1684;
  unsigned int *v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  unsigned int *v1689;
  unsigned int *v1690;
  int64x2_t v1691;
  int64x2_t *v1692;
  int64x2_t v1693;
  int64x2_t v1694;
  int64x2_t v1695;
  int64x2_t v1696;
  int64x2_t v1697;
  int64x2_t v1698;
  int64x2_t v1699;
  int64x2_t v1700;
  int64x2_t v1701;
  int64x2_t v1702;
  int64x2_t v1703;
  int64x2_t v1704;
  int64x2_t v1705;
  int64x2_t v1706;
  int64x2_t v1707;
  int64x2_t v1708;
  int64x2_t v1709;
  int64x2_t v1710;
  int64x2_t v1711;
  int64x2_t v1712;
  int64x2_t v1713;
  int64x2_t v1714;
  __int128 v1715;
  __int128 v1716;
  __int128 v1717;
  int64x2_t v1718;
  int64x2_t v1719;
  int64x2_t *v1720;
  int64x2_t *v1721;
  int64x2_t *v1722;
  int64x2_t *v1723;
  int64x2_t *v1724;
  unsigned int v1725;
  unsigned int v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  int64x2_t v1730;
  int64x2_t *v1731;
  int64x2_t v1732;
  __int128 v1733;
  __int128 v1734;
  __int128 v1735;
  int64x2_t v1736;
  int64x2_t v1737;
  int64x2_t v1738;
  __int128 v1739;
  __int128 v1740;
  __int128 v1741;
  int64x2_t v1742;
  int64x2_t v1743;
  int64x2_t v1744;
  __int128 v1745;
  __int128 v1746;
  __int128 v1747;
  int64x2_t v1748;
  int64x2_t v1749;
  int64x2_t v1750;
  __int128 v1751;
  __int128 v1752;
  __int128 v1753;
  int64x2_t v1754;
  int64x2_t v1755;
  int64x2_t v1756;
  __int8 *v1757;
  int64x2_t *v1758;
  __int8 *v1759;
  int64x2_t *v1760;
  __int8 *v1761;
  int64x2_t *v1762;
  __int8 *v1763;
  int64x2_t *v1764;
  unint64_t v1765;
  unint64_t v1766;
  unsigned int *v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  unsigned int *v1771;
  unsigned int *v1772;
  int64x2_t v1773;
  int64x2_t *v1774;
  int64x2_t v1775;
  int64x2_t v1776;
  int64x2_t v1777;
  int64x2_t v1778;
  int8x16_t v1779;
  int8x16_t v1780;
  int8x16_t v1781;
  int8x16_t v1782;
  unint64_t v1783;
  unint64_t v1784;
  unint64_t v1785;
  int8x16_t v1786;
  int8x16_t v1787;
  unint64_t v1788;
  unint64_t v1789;
  unint64_t v1790;
  int8x16_t v1791;
  int8x16_t v1792;
  int8x16_t v1793;
  int8x16_t v1794;
  unint64_t v1795;
  unint64_t v1796;
  unint64_t v1797;
  int8x16_t v1798;
  int8x16_t v1799;
  unint64_t v1800;
  unint64_t v1801;
  unint64_t v1802;
  int64x2_t *v1803;
  int8x16_t *v1804;
  int8x16_t *v1805;
  int8x16_t *v1806;
  int8x16_t *v1807;
  unsigned int v1808;
  unsigned int v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  int64x2_t v1813;
  int64x2_t v1814;
  int64x2_t v1815;
  int64x2_t v1816;
  int64x2_t v1817;
  int64x2_t v1818;
  int64x2_t v1819;
  int64x2_t v1820;
  int64x2_t v1821;
  int64x2_t v1822;
  int64x2_t v1823;
  int64x2_t v1824;
  int64x2_t v1825;
  int64x2_t v1826;
  int64x2_t v1827;
  unint64_t v1828;
  unint64_t v1829;
  unsigned int *v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  unsigned int *v1834;
  unsigned int *v1835;
  _QWORD *v1836;
  unsigned int v1837;
  unsigned int v1838;
  int8x16_t *v1839;
  uint64_t v1840;
  uint64_t v1841;
  int8x16_t v1842;
  int8x16_t v1843;
  int8x16_t v1844;
  unint64_t v1845;
  unint64_t v1846;
  unint64_t v1847;
  int8x16_t *v1848;
  unint64_t v1849;
  unint64_t v1850;
  unsigned int *v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  unsigned int *v1855;
  unsigned int *v1856;
  int64x2_t v1857;
  int64x2_t *v1858;
  int64x2_t v1859;
  __int128 v1860;
  __int128 v1861;
  __int128 v1862;
  int64x2_t v1863;
  int64x2_t v1864;
  int64x2_t v1865;
  __int128 v1866;
  __int128 v1867;
  __int128 v1868;
  int64x2_t v1869;
  int64x2_t v1870;
  int64x2_t v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  int64x2_t v1875;
  int64x2_t v1876;
  int64x2_t v1877;
  __int128 v1878;
  __int128 v1879;
  __int128 v1880;
  int64x2_t v1881;
  int64x2_t v1882;
  int64x2_t v1883;
  __int8 *v1884;
  int64x2_t *v1885;
  __int8 *v1886;
  int64x2_t *v1887;
  __int8 *v1888;
  int64x2_t *v1889;
  __int8 *v1890;
  int64x2_t *v1891;
  unsigned int v1892;
  unsigned int v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  int64x2_t v1897;
  int64x2_t *v1898;
  int64x2_t v1899;
  int64x2_t v1900;
  int64x2_t v1901;
  int64x2_t v1902;
  int64x2_t v1903;
  int64x2_t v1904;
  int64x2_t v1905;
  int64x2_t v1906;
  int64x2_t v1907;
  int64x2_t v1908;
  int64x2_t v1909;
  int64x2_t v1910;
  int64x2_t v1911;
  int64x2_t v1912;
  int64x2_t v1913;
  int64x2_t v1914;
  int64x2_t v1915;
  int64x2_t v1916;
  int64x2_t v1917;
  int64x2_t v1918;
  int64x2_t v1919;
  int64x2_t v1920;
  __int128 v1921;
  __int128 v1922;
  __int128 v1923;
  int64x2_t v1924;
  int64x2_t v1925;
  int64x2_t *v1926;
  int64x2_t *v1927;
  int64x2_t *v1928;
  int64x2_t *v1929;
  int64x2_t *v1930;
  unint64_t v1931;
  unint64_t v1932;
  unsigned int *v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  unsigned int *v1937;
  unsigned int *v1938;
  int64x2_t *v1939;
  int64x2_t v1940;
  int64x2_t v1941;
  int64x2_t v1942;
  int64x2_t v1943;
  int64x2_t v1944;
  int64x2_t v1945;
  int64x2_t v1946;
  int64x2_t v1947;
  int64x2_t v1948;
  int64x2_t v1949;
  int64x2_t v1950;
  int64x2_t v1951;
  int64x2_t v1952;
  int64x2_t v1953;
  int64x2_t v1954;
  int64x2_t v1955;
  int64x2_t v1956;
  int8x16_t v1957;
  int8x16_t v1958;
  int8x16_t v1959;
  unint64_t v1960;
  unint64_t v1961;
  unint64_t v1962;
  int8x16_t v1963;
  int8x16_t v1964;
  int8x16_t v1965;
  unint64_t v1966;
  unint64_t v1967;
  unint64_t v1968;
  int8x16_t v1969;
  int8x16_t v1970;
  int8x16_t v1971;
  unint64_t v1972;
  unint64_t v1973;
  unint64_t v1974;
  int8x16_t v1975;
  int8x16_t v1976;
  int8x16_t v1977;
  unint64_t v1978;
  unint64_t v1979;
  unint64_t v1980;
  int64x2_t *v1981;
  int8x16_t *v1982;
  int8x16_t *v1983;
  int8x16_t *v1984;
  int8x16_t *v1985;
  unsigned int v1986;
  unsigned int v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  int64x2_t v1991;
  int64x2_t v1992;
  int64x2_t v1993;
  unint64_t v1994;
  unint64_t v1995;
  unsigned int *v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  unsigned int *v2000;
  unsigned int *v2001;
  int8x16_t *v2002;
  unsigned int v2003;
  unsigned int v2004;
  int8x16_t *v2005;
  uint64_t v2006;
  uint64_t v2007;
  int8x16_t v2008;
  int8x16_t v2009;
  int8x16_t v2010;
  unint64_t v2011;
  unint64_t v2012;
  unint64_t v2013;
  _QWORD *v2014;
  unint64_t v2015;
  unint64_t v2016;
  unsigned int *v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  unsigned int *v2021;
  unsigned int *v2022;
  int64x2_t v2023;
  int64x2_t *v2024;
  int64x2_t v2025;
  int64x2_t v2026;
  int64x2_t v2027;
  int64x2_t v2028;
  int64x2_t v2029;
  int64x2_t v2030;
  int64x2_t v2031;
  int64x2_t v2032;
  int64x2_t v2033;
  int64x2_t v2034;
  int64x2_t v2035;
  int64x2_t *v2036;
  int64x2_t *v2037;
  int64x2_t *v2038;
  int64x2_t *v2039;
  int64x2_t *v2040;
  unsigned int v2041;
  unsigned int v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  int64x2_t v2046;
  int64x2_t *v2047;
  int64x2_t v2048;
  __int128 v2049;
  __int128 v2050;
  __int128 v2051;
  int64x2_t v2052;
  int64x2_t v2053;
  int64x2_t v2054;
  __int128 v2055;
  __int128 v2056;
  __int128 v2057;
  __int8 *v2058;
  int64x2_t *v2059;
  __int8 *v2060;
  unint64_t v2061;
  unint64_t v2062;
  unsigned int *v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  unsigned int *v2067;
  unsigned int *v2068;
  int64x2_t v2069;
  int64x2_t *v2070;
  int64x2_t v2071;
  int64x2_t v2072;
  int64x2_t v2073;
  int64x2_t v2074;
  int8x16_t v2075;
  int8x16_t v2076;
  int8x16_t v2077;
  int8x16_t v2078;
  unint64_t v2079;
  unint64_t v2080;
  unint64_t v2081;
  int8x16_t v2082;
  int8x16_t v2083;
  unint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  int8x16_t v2087;
  int8x16_t v2088;
  int8x16_t v2089;
  int8x16_t v2090;
  unint64_t v2091;
  unint64_t v2092;
  unint64_t v2093;
  int8x16_t v2094;
  int8x16_t v2095;
  unint64_t v2096;
  unint64_t v2097;
  unint64_t v2098;
  int64x2_t *v2099;
  int8x16_t *v2100;
  int8x16_t *v2101;
  int8x16_t *v2102;
  int8x16_t *v2103;
  unsigned int v2104;
  unsigned int v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  int64x2_t v2109;
  int64x2_t v2110;
  int64x2_t v2111;
  int64x2_t v2112;
  int64x2_t v2113;
  int64x2_t v2114;
  int64x2_t v2115;
  int64x2_t v2116;
  int64x2_t v2117;
  int64x2_t v2118;
  int64x2_t v2119;
  int64x2_t v2120;
  int64x2_t v2121;
  int64x2_t v2122;
  int64x2_t v2123;
  unint64_t v2124;
  unint64_t v2125;
  unsigned int *v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  unsigned int *v2130;
  unsigned int *v2131;
  int64x2_t v2132;
  int64x2_t *v2133;
  int64x2_t v2134;
  int64x2_t v2135;
  int64x2_t v2136;
  int64x2_t v2137;
  int64x2_t v2138;
  int64x2_t v2139;
  int64x2_t v2140;
  int64x2_t v2141;
  int64x2_t v2142;
  int64x2_t v2143;
  int64x2_t v2144;
  int64x2_t *v2145;
  int64x2_t *v2146;
  int64x2_t *v2147;
  int64x2_t *v2148;
  int64x2_t *v2149;
  unsigned int v2150;
  unsigned int v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  int64x2_t v2155;
  int64x2_t *v2156;
  int64x2_t v2157;
  __int128 v2158;
  __int128 v2159;
  __int128 v2160;
  int64x2_t v2161;
  int64x2_t v2162;
  int64x2_t v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int8 *v2167;
  int64x2_t *v2168;
  __int8 *v2169;
  unint64_t v2170;
  unint64_t v2171;
  unsigned int *v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  unsigned int *v2176;
  unsigned int *v2177;
  int64x2_t v2178;
  int64x2_t *v2179;
  int64x2_t v2180;
  __int128 v2181;
  __int128 v2182;
  __int128 v2183;
  int64x2_t v2184;
  int64x2_t v2185;
  int64x2_t v2186;
  __int128 v2187;
  __int128 v2188;
  __int128 v2189;
  __int8 *v2190;
  int64x2_t *v2191;
  __int8 *v2192;
  unsigned int v2193;
  unsigned int v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  int64x2_t v2198;
  int64x2_t *v2199;
  int64x2_t v2200;
  int64x2_t v2201;
  int64x2_t v2202;
  int64x2_t v2203;
  int64x2_t v2204;
  int64x2_t v2205;
  int64x2_t v2206;
  int64x2_t v2207;
  int64x2_t v2208;
  int64x2_t v2209;
  int64x2_t v2210;
  int64x2_t *v2211;
  int64x2_t *v2212;
  int64x2_t *v2213;
  int64x2_t *v2214;
  int64x2_t *v2215;
  unint64_t v2216;
  unint64_t v2217;
  unsigned int *v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  unsigned int *v2222;
  unsigned int *v2223;
  int64x2_t v2224;
  int64x2_t *v2225;
  int64x2_t v2226;
  int64x2_t v2227;
  int64x2_t v2228;
  int64x2_t v2229;
  __int128 v2230;
  __int128 v2231;
  __int128 v2232;
  int64x2_t v2233;
  int64x2_t v2234;
  int64x2_t *v2235;
  int64x2_t *v2236;
  int64x2_t *v2237;
  int64x2_t *v2238;
  int64x2_t *v2239;
  unsigned int v2240;
  unsigned int v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  int64x2_t v2245;
  int64x2_t *v2246;
  int64x2_t v2247;
  __int128 v2248;
  __int128 v2249;
  __int128 v2250;
  int64x2_t v2251;
  int64x2_t v2252;
  int64x2_t v2253;
  __int8 *v2254;
  int64x2_t *v2255;
  unint64_t v2256;
  unint64_t v2257;
  unsigned int *v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  unsigned int *v2262;
  unsigned int *v2263;
  int64x2_t v2264;
  int64x2_t *v2265;
  int64x2_t v2266;
  __int128 v2267;
  __int128 v2268;
  __int128 v2269;
  int64x2_t v2270;
  int64x2_t v2271;
  int64x2_t v2272;
  __int128 v2273;
  __int128 v2274;
  __int128 v2275;
  __int8 *v2276;
  int64x2_t *v2277;
  __int8 *v2278;
  unsigned int v2279;
  unsigned int v2280;
  uint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  int64x2_t v2284;
  int64x2_t *v2285;
  int64x2_t v2286;
  int64x2_t v2287;
  int64x2_t v2288;
  int64x2_t v2289;
  int64x2_t v2290;
  int64x2_t v2291;
  int64x2_t v2292;
  int64x2_t v2293;
  int64x2_t v2294;
  int64x2_t v2295;
  int64x2_t v2296;
  int64x2_t *v2297;
  int64x2_t *v2298;
  int64x2_t *v2299;
  int64x2_t *v2300;
  int64x2_t *v2301;
  unint64_t v2302;
  unint64_t v2303;
  unsigned int *v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  unsigned int *v2308;
  unsigned int *v2309;
  _OWORD *v2310;
  __int128 v2311;
  __int128 v2312;
  unsigned int v2313;
  unsigned int v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  _QWORD *v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  unint64_t v2324;
  unint64_t v2325;
  unsigned int *v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  unsigned int *v2330;
  unsigned int *v2331;
  int64x2_t v2332;
  int64x2_t *v2333;
  int64x2_t v2334;
  __int128 v2335;
  __int128 v2336;
  __int128 v2337;
  int64x2_t v2338;
  int64x2_t v2339;
  int64x2_t v2340;
  __int8 *v2341;
  int64x2_t *v2342;
  unsigned int v2343;
  unsigned int v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  int64x2_t v2348;
  int64x2_t *v2349;
  int64x2_t v2350;
  int64x2_t v2351;
  int64x2_t v2352;
  int64x2_t v2353;
  __int128 v2354;
  __int128 v2355;
  __int128 v2356;
  int64x2_t v2357;
  int64x2_t v2358;
  int64x2_t *v2359;
  int64x2_t *v2360;
  int64x2_t *v2361;
  int64x2_t *v2362;
  int64x2_t *v2363;
  unint64_t v2364;
  unint64_t v2365;
  unsigned int *v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  unsigned int *v2370;
  unsigned int *v2371;
  uint64_t v2372;
  __int128 v2373;
  __int128 v2374;
  __int128 v2375;
  __int128 v2376;
  unsigned int v2377;
  unsigned int v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  _QWORD *v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  unint64_t v2391;
  unint64_t v2392;
  unsigned int *v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  unsigned int *v2397;
  unsigned int *v2398;
  _QWORD *v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  unsigned int v2404;
  unsigned int v2405;
  _QWORD *v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  _OWORD *v2410;
  __int128 v2411;
  __int128 v2412;
  unint64_t v2413;
  unint64_t v2414;
  unsigned int *v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  unsigned int *v2419;
  unsigned int *v2420;
  _OWORD *v2421;
  __int128 v2422;
  __int128 v2423;
  unsigned int v2424;
  unsigned int v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  _QWORD *v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  unint64_t v2435;
  unint64_t v2436;
  unsigned int *v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  unsigned int *v2441;
  unsigned int *v2442;
  uint64_t v2443;
  _QWORD *v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  unsigned int v2451;
  unsigned int v2452;
  _QWORD *v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  __int128 v2458;
  __int128 v2459;
  __int128 v2460;
  __int128 v2461;
  unint64_t v2462;
  unint64_t v2463;
  unsigned int *v2464;
  uint64_t v2465;
  uint64_t v2466;
  uint64_t v2467;
  unsigned int *v2468;
  unsigned int *v2469;
  int64x2_t v2470;
  int64x2_t *v2471;
  int64x2_t v2472;
  int64x2_t v2473;
  int64x2_t v2474;
  int64x2_t v2475;
  int64x2_t v2476;
  int64x2_t v2477;
  int64x2_t v2478;
  int64x2_t v2479;
  int64x2_t v2480;
  int64x2_t v2481;
  int64x2_t v2482;
  int64x2_t v2483;
  int64x2_t v2484;
  int64x2_t v2485;
  int64x2_t v2486;
  int64x2_t v2487;
  int64x2_t v2488;
  int64x2_t v2489;
  int64x2_t v2490;
  int64x2_t v2491;
  int64x2_t v2492;
  int64x2_t v2493;
  int64x2_t v2494;
  int64x2_t v2495;
  int64x2_t v2496;
  int64x2_t v2497;
  int64x2_t v2498;
  int64x2_t v2499;
  int64x2_t v2500;
  int64x2_t v2501;
  int64x2_t *v2502;
  int64x2_t *v2503;
  int64x2_t *v2504;
  int64x2_t *v2505;
  int64x2_t *v2506;
  int64x2_t *v2507;
  int64x2_t *v2508;
  int64x2_t *v2509;
  unsigned int v2510;
  unsigned int v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  __int128 v2517;
  int64x2_t v2518;
  __int128 v2519;
  __int128 v2520;
  __int128 v2521;
  __int128 v2522;
  __int128 v2523;
  uint64_t v2524;
  __int128 v2525;
  __int128 v2526;
  __int128 v2527;
  __int128 v2528;
  uint64_t v2529;
  __int128 v2530;
  __int128 v2531;
  __int128 v2532;
  __int128 v2533;
  uint64_t v2534;
  __int128 v2535;
  __int128 v2536;
  __int128 v2537;
  __int128 v2538;
  uint64_t v2539;
  __int128 v2540;
  __int128 v2541;
  __int128 v2542;
  __int128 v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  unint64_t v2550;
  unint64_t v2551;
  unsigned int *v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t v2555;
  unsigned int *v2556;
  unsigned int *v2557;
  unsigned int v2558;
  unsigned int v2559;
  unsigned int v2560;
  unint64_t v2561;
  unint64_t v2562;
  unsigned int *v2563;
  uint64_t v2564;
  uint64_t v2565;
  uint64_t v2566;
  unsigned int *v2567;
  unsigned int *v2568;
  int64x2_t v2569;
  int64x2_t v2570;
  int64x2_t v2571;
  int64x2_t v2572;
  int64x2_t v2573;
  int64x2_t v2574;
  int64x2_t v2575;
  int8x16_t v2576;
  int64x2_t v2577;
  int64x2_t v2578;
  int8x16_t v2579;
  int64x2_t v2580;
  int64x2_t v2581;
  int64x2_t v2582;
  unint64_t v2583;
  int8x16_t v2584;
  int8x16_t v2585;
  int8x16_t v2586;
  unint64_t v2587;
  int8x16_t v2588;
  int8x16_t v2589;
  int8x16_t v2590;
  int8x16_t v2591;
  int8x16_t v2592;
  int8x16_t v2593;
  int8x16_t v2594;
  int8x16_t v2595;
  int8x16_t v2596;
  int8x16_t v2597;
  int8x16_t v2598;
  int8x16_t v2599;
  int8x16_t v2600;
  int64x2_t v2601;
  int8x16_t v2602;
  int8x16_t v2603;
  int64x2_t *v2604;
  int8x16_t v2605;
  __int128 v2606;
  int8x16_t v2607;
  int8x16_t *v2608;
  int8x16_t v2609;
  int8x16_t v2610;
  unint64_t v2611;
  int8x16_t v2612;
  unint64_t v2613;
  int8x16_t v2614;
  uint64_t v2615;
  int8x16_t v2616;
  int8x16_t v2617;
  uint64_t v2618;
  uint64_t v2619;
  uint64_t v2620;
  unint64_t v2621;
  int8x16_t v2622;
  uint64_t v2623;
  unint64_t v2624;
  unint64_t v2625;
  int8x16_t v2626;
  unint64_t v2627;
  unint64_t v2628;
  unint64_t v2629;
  int8x16_t v2630;
  unint64_t v2631;
  int64x2_t v2632;
  int64x2_t v2633;
  int64x2_t v2634;
  int8x16_t v2635;
  int8x16_t v2636;
  int8x16_t v2637;
  int64x2_t v2638;
  int64x2_t v2639;
  int8x16_t v2640;
  int8x16_t v2641;
  int8x16_t v2642;
  int64x2_t v2643;
  int64x2_t v2644;
  int64x2_t v2645;
  int8x16_t v2646;
  int64x2_t v2647;
  int64x2_t v2648;
  int64x2_t v2649;
  int64x2_t *v2650;
  int8x16_t *v2651;
  int64x2_t *v2652;
  int8x16_t *v2653;
  int64x2_t *v2654;
  int8x16_t *v2655;
  int64x2_t *v2656;
  unsigned int v2657;
  unsigned int v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t v2661;
  int64x2_t v2662;
  __int128 v2663;
  uint64_t v2664;
  int8x16_t v2665;
  int8x16_t v2666;
  int8x16_t v2667;
  int8x16_t v2668;
  int8x16_t v2669;
  int8x16_t v2670;
  int8x16_t v2671;
  int8x16_t v2672;
  int8x16_t v2673;
  int8x16_t v2674;
  int8x16_t v2675;
  int8x16_t v2676;
  int8x16_t v2677;
  int8x16_t v2678;
  int8x16_t v2679;
  int8x16_t v2680;
  int8x16_t v2681;
  int8x16_t v2682;
  int8x16_t v2683;
  __int8 *v2684;
  unint64_t v2685;
  unint64_t v2686;
  unsigned int *v2687;
  uint64_t v2688;
  uint64_t v2689;
  uint64_t v2690;
  unsigned int *v2691;
  unsigned int *v2692;
  _QWORD *v2693;
  uint64_t v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  unsigned int v2698;
  unsigned int v2699;
  _QWORD *v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  _OWORD *v2704;
  __int128 v2705;
  __int128 v2706;
  unint64_t v2707;
  unint64_t v2708;
  unsigned int *v2709;
  uint64_t v2710;
  uint64_t v2711;
  uint64_t v2712;
  unsigned int *v2713;
  unsigned int *v2714;
  _QWORD *v2715;
  unsigned int v2716;
  unsigned int v2717;
  uint64_t v2718;
  uint64_t v2719;
  uint64_t v2720;
  int8x16_t v2721;
  int8x16_t v2722;
  int8x16_t v2723;
  int8x16_t v2724;
  uint64_t v2725;
  unint64_t v2726;
  unint64_t v2727;
  unint64_t v2728;
  unint64_t v2729;
  int8x16_t *v2730;
  unint64_t v2731;
  unint64_t v2732;
  unsigned int *v2733;
  uint64_t v2734;
  uint64_t v2735;
  uint64_t v2736;
  unsigned int *v2737;
  unsigned int *v2738;
  _QWORD *v2739;
  uint64_t v2740;
  uint64_t v2741;
  unsigned int v2742;
  unsigned int v2743;
  _QWORD *v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  _OWORD *v2748;
  __int128 v2749;
  unint64_t v2750;
  unint64_t v2751;
  unsigned int *v2752;
  uint64_t v2753;
  uint64_t v2754;
  uint64_t v2755;
  unsigned int *v2756;
  unsigned int *v2757;
  int64x2_t v2758;
  int64x2_t *v2759;
  int64x2_t v2760;
  int64x2_t v2761;
  int64x2_t v2762;
  int64x2_t v2763;
  int64x2_t v2764;
  int64x2_t v2765;
  int64x2_t v2766;
  int64x2_t v2767;
  int64x2_t v2768;
  int64x2_t v2769;
  int64x2_t v2770;
  int64x2_t v2771;
  int64x2_t v2772;
  int64x2_t v2773;
  int64x2_t v2774;
  int64x2_t v2775;
  int64x2_t v2776;
  int64x2_t v2777;
  int64x2_t v2778;
  int64x2_t v2779;
  int64x2_t v2780;
  int64x2_t v2781;
  int64x2_t v2782;
  int64x2_t v2783;
  int64x2_t v2784;
  int64x2_t v2785;
  int64x2_t v2786;
  int64x2_t v2787;
  int64x2_t v2788;
  int64x2_t v2789;
  int64x2_t *v2790;
  int64x2_t *v2791;
  int64x2_t *v2792;
  int64x2_t *v2793;
  int64x2_t *v2794;
  int64x2_t *v2795;
  int64x2_t *v2796;
  int64x2_t *v2797;
  unsigned int v2798;
  unsigned int v2799;
  uint64_t v2800;
  uint64_t v2801;
  uint64_t v2802;
  uint64_t v2803;
  uint64_t v2804;
  __int128 v2805;
  int64x2_t v2806;
  __int128 v2807;
  __int128 v2808;
  __int128 v2809;
  __int128 v2810;
  __int128 v2811;
  uint64_t v2812;
  __int128 v2813;
  __int128 v2814;
  __int128 v2815;
  __int128 v2816;
  uint64_t v2817;
  __int128 v2818;
  __int128 v2819;
  __int128 v2820;
  __int128 v2821;
  uint64_t v2822;
  __int128 v2823;
  __int128 v2824;
  __int128 v2825;
  __int128 v2826;
  uint64_t v2827;
  __int128 v2828;
  __int128 v2829;
  __int128 v2830;
  __int128 v2831;
  uint64_t v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  unint64_t v2838;
  unint64_t v2839;
  unsigned int *v2840;
  uint64_t v2841;
  uint64_t v2842;
  uint64_t v2843;
  unsigned int *v2844;
  unsigned int *v2845;
  _QWORD *v2846;
  uint64_t v2847;
  uint64_t v2848;
  unsigned int v2849;
  unsigned int v2850;
  _QWORD *v2851;
  uint64_t v2852;
  uint64_t v2853;
  uint64_t v2854;
  _OWORD *v2855;
  __int128 v2856;
  unint64_t v2857;
  unint64_t v2858;
  unsigned int *v2859;
  uint64_t v2860;
  uint64_t v2861;
  uint64_t v2862;
  unsigned int *v2863;
  unsigned int *v2864;
  int64x2_t v2865;
  int64x2_t *v2866;
  int64x2_t v2867;
  int64x2_t v2868;
  int64x2_t v2869;
  int64x2_t v2870;
  int64x2_t v2871;
  int64x2_t v2872;
  int64x2_t v2873;
  int64x2_t v2874;
  int64x2_t v2875;
  int64x2_t v2876;
  int64x2_t v2877;
  int64x2_t v2878;
  int64x2_t v2879;
  int64x2_t v2880;
  int64x2_t v2881;
  int64x2_t v2882;
  int64x2_t v2883;
  int64x2_t *v2884;
  int64x2_t *v2885;
  int64x2_t *v2886;
  int64x2_t *v2887;
  int64x2_t *v2888;
  int64x2_t *v2889;
  int64x2_t *v2890;
  int64x2_t *v2891;
  unsigned int v2892;
  unsigned int v2893;
  uint64_t v2894;
  uint64_t v2895;
  uint64_t v2896;
  uint64_t v2897;
  uint64_t v2898;
  __int128 v2899;
  int64x2_t v2900;
  __int128 v2901;
  __int128 v2902;
  __int128 v2903;
  __int128 v2904;
  __int128 v2905;
  uint64_t v2906;
  __int128 v2907;
  __int128 v2908;
  __int128 v2909;
  __int128 v2910;
  uint64_t v2911;
  __int128 v2912;
  __int128 v2913;
  __int128 v2914;
  __int128 v2915;
  uint64_t v2916;
  uint64_t v2917;
  uint64_t v2918;
  uint64_t v2919;
  unint64_t v2920;
  unint64_t v2921;
  unsigned int *v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t v2925;
  unsigned int *v2926;
  unsigned int *v2927;
  _QWORD *v2928;
  uint64_t v2929;
  uint64_t v2930;
  unsigned int v2931;
  unsigned int v2932;
  _QWORD *v2933;
  uint64_t v2934;
  uint64_t v2935;
  uint64_t v2936;
  __int128 v2937;
  unint64_t v2938;
  unint64_t v2939;
  unsigned int *v2940;
  uint64_t v2941;
  uint64_t v2942;
  uint64_t v2943;
  unsigned int *v2944;
  unsigned int *v2945;
  int64x2_t v2946;
  int64x2_t *v2947;
  int64x2_t v2948;
  int64x2_t v2949;
  int64x2_t v2950;
  int64x2_t v2951;
  int64x2_t v2952;
  int64x2_t v2953;
  int64x2_t v2954;
  int64x2_t v2955;
  int64x2_t v2956;
  int64x2_t v2957;
  int64x2_t v2958;
  int64x2_t v2959;
  int64x2_t v2960;
  int64x2_t v2961;
  int64x2_t v2962;
  int64x2_t v2963;
  int64x2_t v2964;
  int64x2_t *v2965;
  int64x2_t *v2966;
  int64x2_t *v2967;
  int64x2_t *v2968;
  int64x2_t *v2969;
  int64x2_t *v2970;
  int64x2_t *v2971;
  int64x2_t *v2972;
  unsigned int v2973;
  unsigned int v2974;
  uint64_t v2975;
  uint64_t v2976;
  uint64_t v2977;
  uint64_t v2978;
  uint64_t v2979;
  __int128 v2980;
  int64x2_t v2981;
  __int128 v2982;
  __int128 v2983;
  __int128 v2984;
  __int128 v2985;
  __int128 v2986;
  uint64_t v2987;
  __int128 v2988;
  __int128 v2989;
  __int128 v2990;
  __int128 v2991;
  uint64_t v2992;
  __int128 v2993;
  __int128 v2994;
  __int128 v2995;
  __int128 v2996;
  uint64_t v2997;
  uint64_t v2998;
  uint64_t v2999;
  uint64_t v3000;
  unint64_t v3001;
  unint64_t v3002;
  unsigned int *v3003;
  uint64_t v3004;
  uint64_t v3005;
  uint64_t v3006;
  unsigned int *v3007;
  unsigned int *v3008;
  uint64_t v3009;
  uint64_t v3010;
  __int128 v3011;
  int64x2_t v3012;
  __int128 v3013;
  __int128 v3014;
  __int128 v3015;
  __int128 v3016;
  __int128 v3017;
  uint64_t v3018;
  __int128 v3019;
  __int128 v3020;
  __int128 v3021;
  __int128 v3022;
  uint64_t v3023;
  __int128 v3024;
  __int128 v3025;
  __int128 v3026;
  __int128 v3027;
  uint64_t v3028;
  __int128 v3029;
  __int128 v3030;
  __int128 v3031;
  __int128 v3032;
  uint64_t v3033;
  __int128 v3034;
  __int128 v3035;
  __int128 v3036;
  __int128 v3037;
  uint64_t v3038;
  uint64_t v3039;
  uint64_t v3040;
  uint64_t v3041;
  uint64_t v3042;
  uint64_t v3043;
  unsigned int v3044;
  unsigned int v3045;
  uint64_t v3046;
  uint64_t v3047;
  uint64_t v3048;
  int64x2_t v3049;
  int64x2_t *v3050;
  int64x2_t v3051;
  int64x2_t v3052;
  int64x2_t v3053;
  int64x2_t v3054;
  int64x2_t v3055;
  int64x2_t v3056;
  int64x2_t v3057;
  int64x2_t v3058;
  int64x2_t v3059;
  int64x2_t v3060;
  int64x2_t v3061;
  int64x2_t v3062;
  int64x2_t v3063;
  int64x2_t v3064;
  int64x2_t v3065;
  int64x2_t v3066;
  int64x2_t v3067;
  int64x2_t v3068;
  int64x2_t v3069;
  int64x2_t v3070;
  int64x2_t v3071;
  int64x2_t v3072;
  int64x2_t v3073;
  int64x2_t v3074;
  int64x2_t v3075;
  int64x2_t v3076;
  int64x2_t v3077;
  int64x2_t v3078;
  int64x2_t v3079;
  int64x2_t v3080;
  int64x2_t *v3081;
  int64x2_t *v3082;
  int64x2_t *v3083;
  int64x2_t *v3084;
  int64x2_t *v3085;
  int64x2_t *v3086;
  int64x2_t *v3087;
  int64x2_t *v3088;
  unint64_t v3089;
  unint64_t v3090;
  unsigned int *v3091;
  uint64_t v3092;
  uint64_t v3093;
  uint64_t v3094;
  unsigned int *v3095;
  unsigned int *v3096;
  int64x2_t v3097;
  int64x2_t *v3098;
  int64x2_t v3099;
  int64x2_t v3100;
  int64x2_t v3101;
  int64x2_t v3102;
  int64x2_t v3103;
  int64x2_t v3104;
  int64x2_t v3105;
  uint64_t v3106;
  __int128 v3107;
  __int128 v3108;
  __int128 v3109;
  __int128 v3110;
  int64x2_t v3111;
  int64x2_t v3112;
  int64x2_t *v3113;
  int64x2_t *v3114;
  int64x2_t *v3115;
  int64x2_t *v3116;
  int64x2_t *v3117;
  int64x2_t *v3118;
  int64x2_t *v3119;
  int64x2_t *v3120;
  unsigned int v3121;
  unsigned int v3122;
  uint64_t v3123;
  uint64_t v3124;
  uint64_t v3125;
  uint64_t v3126;
  uint64_t v3127;
  __int128 v3128;
  int64x2_t v3129;
  __int128 v3130;
  __int128 v3131;
  __int128 v3132;
  __int128 v3133;
  __int128 v3134;
  uint64_t v3135;
  __int128 v3136;
  __int128 v3137;
  __int128 v3138;
  __int128 v3139;
  uint64_t v3140;
  uint64_t v3141;
  uint64_t v3142;
  unint64_t v3143;
  unint64_t v3144;
  unsigned int *v3145;
  uint64_t v3146;
  uint64_t v3147;
  uint64_t v3148;
  unsigned int *v3149;
  unsigned int *v3150;
  uint64_t v3151;
  __int128 v3152;
  uint64_t v3153;
  int8x16_t v3154;
  int8x16_t v3155;
  int8x16_t v3156;
  int8x16_t v3157;
  int8x16_t v3158;
  int8x16_t v3159;
  int8x16_t v3160;
  int8x16_t v3161;
  int8x16_t v3162;
  int8x16_t v3163;
  int8x16_t v3164;
  int8x16_t v3165;
  int8x16_t v3166;
  int8x16_t v3167;
  int8x16_t v3168;
  int8x16_t v3169;
  int8x16_t v3170;
  int8x16_t v3171;
  int8x16_t v3172;
  int8x16_t v3173;
  int8x16_t v3174;
  uint64_t v3175;
  unint64_t v3176;
  int8x16_t v3177;
  unint64_t v3178;
  uint64_t v3179;
  int8x16_t v3180;
  uint64_t v3181;
  int8x16_t v3182;
  int8x16_t v3183;
  uint64_t v3184;
  uint64_t v3185;
  int8x16_t v3186;
  uint64_t v3187;
  unint64_t v3188;
  int8x16_t v3189;
  unint64_t v3190;
  unint64_t v3191;
  int8x16_t v3192;
  unint64_t v3193;
  int8x16_t v3194;
  unint64_t v3195;
  __int128 v3196;
  __int128 v3197;
  __int128 v3198;
  __int128 v3199;
  __int128 v3200;
  __int128 v3201;
  __int128 v3202;
  __int128 v3203;
  __int128 v3204;
  __int128 v3205;
  __int128 v3206;
  __int128 v3207;
  __int128 v3208;
  __int128 v3209;
  __int128 v3210;
  __int128 v3211;
  __int128 v3212;
  __int128 v3213;
  uint64_t v3214;
  uint64_t v3215;
  uint64_t v3216;
  uint64_t v3217;
  uint64_t v3218;
  int8x16_t *v3219;
  uint64_t v3220;
  unsigned int v3221;
  unsigned int v3222;
  uint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  int64x2_t v3226;
  int64x2_t v3227;
  int64x2_t v3228;
  int64x2_t v3229;
  int64x2_t v3230;
  int64x2_t v3231;
  int8x16_t v3232;
  int8x16_t v3233;
  int64x2_t v3234;
  int64x2_t v3235;
  int64x2_t v3236;
  int64x2_t v3237;
  int64x2_t v3238;
  int64x2_t v3239;
  __int128 v3240;
  int8x16_t v3241;
  __int128 v3242;
  int8x16_t v3243;
  int8x16_t v3244;
  int8x16_t v3245;
  int8x16_t v3246;
  int8x16_t v3247;
  int8x16_t v3248;
  int8x16_t v3249;
  int8x16_t v3250;
  int8x16_t v3251;
  int8x16_t v3252;
  int8x16_t v3253;
  int8x16_t v3254;
  int8x16_t v3255;
  int8x16_t v3256;
  int64x2_t v3257;
  int8x16_t v3258;
  int8x16_t v3259;
  int8x16_t v3260;
  uint64_t v3261;
  unint64_t v3262;
  unint64_t v3263;
  unsigned int *v3264;
  uint64_t v3265;
  uint64_t v3266;
  uint64_t v3267;
  unsigned int *v3268;
  unsigned int *v3269;
  int64x2_t *v3270;
  int64x2_t v3271;
  int64x2_t v3272;
  int64x2_t v3273;
  int64x2_t v3274;
  int64x2_t v3275;
  int64x2_t v3276;
  int64x2_t v3277;
  int64x2_t v3278;
  int64x2_t v3279;
  int64x2_t v3280;
  int64x2_t v3281;
  int64x2_t v3282;
  int64x2_t v3283;
  int64x2_t v3284;
  int64x2_t v3285;
  int64x2_t v3286;
  int64x2_t v3287;
  int8x16_t v3288;
  int8x16_t v3289;
  int8x16_t v3290;
  unint64_t v3291;
  unint64_t v3292;
  unint64_t v3293;
  int8x16_t v3294;
  int8x16_t v3295;
  int8x16_t v3296;
  unint64_t v3297;
  unint64_t v3298;
  unint64_t v3299;
  int8x16_t v3300;
  int8x16_t v3301;
  int8x16_t v3302;
  unint64_t v3303;
  unint64_t v3304;
  unint64_t v3305;
  int8x16_t v3306;
  int8x16_t v3307;
  int8x16_t v3308;
  unint64_t v3309;
  unint64_t v3310;
  unint64_t v3311;
  int64x2_t *v3312;
  int8x16_t *v3313;
  int8x16_t *v3314;
  int8x16_t *v3315;
  int8x16_t *v3316;
  unsigned int v3317;
  unsigned int v3318;
  uint64_t v3319;
  uint64_t v3320;
  uint64_t v3321;
  int64x2_t v3322;
  int64x2_t v3323;
  int64x2_t v3324;
  unint64_t v3325;
  unint64_t v3326;
  unsigned int *v3327;
  uint64_t v3328;
  uint64_t v3329;
  uint64_t v3330;
  unsigned int *v3331;
  unsigned int *v3332;
  int8x16_t *v3333;
  unsigned int v3334;
  unsigned int v3335;
  uint64_t v3336;
  uint64_t v3337;
  uint64_t v3338;
  int8x16_t v3339;
  int8x16_t v3340;
  int8x16_t v3341;
  int8x16_t v3342;
  uint64_t v3343;
  unint64_t v3344;
  unint64_t v3345;
  unint64_t v3346;
  unint64_t v3347;
  _QWORD *v3348;
  unint64_t v3349;
  unint64_t v3350;
  unsigned int *v3351;
  uint64_t v3352;
  uint64_t v3353;
  uint64_t v3354;
  unsigned int *v3355;
  unsigned int *v3356;
  int64x2_t v3357;
  int64x2_t *v3358;
  int64x2_t v3359;
  int64x2_t v3360;
  int64x2_t v3361;
  int64x2_t v3362;
  int64x2_t v3363;
  int64x2_t v3364;
  int64x2_t v3365;
  int64x2_t v3366;
  int64x2_t v3367;
  int64x2_t v3368;
  int64x2_t v3369;
  int64x2_t v3370;
  int64x2_t v3371;
  int64x2_t v3372;
  int64x2_t v3373;
  int64x2_t v3374;
  int64x2_t v3375;
  int64x2_t v3376;
  int64x2_t v3377;
  int64x2_t v3378;
  int64x2_t v3379;
  int64x2_t v3380;
  __int128 v3381;
  __int128 v3382;
  __int128 v3383;
  int64x2_t v3384;
  int64x2_t v3385;
  int64x2_t *v3386;
  int64x2_t *v3387;
  int64x2_t *v3388;
  int64x2_t *v3389;
  int64x2_t *v3390;
  unsigned int v3391;
  unsigned int v3392;
  uint64_t v3393;
  uint64_t v3394;
  uint64_t v3395;
  int64x2_t v3396;
  int64x2_t *v3397;
  int64x2_t v3398;
  __int128 v3399;
  __int128 v3400;
  __int128 v3401;
  int64x2_t v3402;
  int64x2_t v3403;
  int64x2_t v3404;
  __int128 v3405;
  __int128 v3406;
  __int128 v3407;
  int64x2_t v3408;
  int64x2_t v3409;
  int64x2_t v3410;
  __int128 v3411;
  __int128 v3412;
  __int128 v3413;
  int64x2_t v3414;
  int64x2_t v3415;
  int64x2_t v3416;
  __int128 v3417;
  __int128 v3418;
  __int128 v3419;
  int64x2_t v3420;
  int64x2_t v3421;
  int64x2_t v3422;
  __int8 *v3423;
  int64x2_t *v3424;
  __int8 *v3425;
  int64x2_t *v3426;
  __int8 *v3427;
  int64x2_t *v3428;
  __int8 *v3429;
  int64x2_t *v3430;
  unint64_t v3431;
  unint64_t v3432;
  unsigned int *v3433;
  uint64_t v3434;
  uint64_t v3435;
  uint64_t v3436;
  unsigned int *v3437;
  unsigned int *v3438;
  uint64_t v3439;
  uint64_t v3440;
  __int128 v3441;
  int64x2_t v3442;
  __int128 v3443;
  __int128 v3444;
  __int128 v3445;
  __int128 v3446;
  __int128 v3447;
  uint64_t v3448;
  __int128 v3449;
  __int128 v3450;
  __int128 v3451;
  __int128 v3452;
  uint64_t v3453;
  __int128 v3454;
  __int128 v3455;
  __int128 v3456;
  __int128 v3457;
  uint64_t v3458;
  __int128 v3459;
  __int128 v3460;
  __int128 v3461;
  __int128 v3462;
  uint64_t v3463;
  __int128 v3464;
  __int128 v3465;
  __int128 v3466;
  __int128 v3467;
  uint64_t v3468;
  uint64_t v3469;
  uint64_t v3470;
  uint64_t v3471;
  uint64_t v3472;
  uint64_t v3473;
  unsigned int v3474;
  unsigned int v3475;
  uint64_t v3476;
  uint64_t v3477;
  uint64_t v3478;
  int64x2_t v3479;
  int64x2_t *v3480;
  int64x2_t v3481;
  int64x2_t v3482;
  int64x2_t v3483;
  int64x2_t v3484;
  int64x2_t v3485;
  int64x2_t v3486;
  int64x2_t v3487;
  int64x2_t v3488;
  int64x2_t v3489;
  int64x2_t v3490;
  int64x2_t v3491;
  int64x2_t v3492;
  int64x2_t v3493;
  int64x2_t v3494;
  int64x2_t v3495;
  int64x2_t v3496;
  int64x2_t v3497;
  int64x2_t v3498;
  int64x2_t v3499;
  int64x2_t v3500;
  int64x2_t v3501;
  int64x2_t v3502;
  int64x2_t v3503;
  int64x2_t v3504;
  int64x2_t v3505;
  int64x2_t v3506;
  int64x2_t v3507;
  int64x2_t v3508;
  int64x2_t v3509;
  int64x2_t v3510;
  int64x2_t *v3511;
  int64x2_t *v3512;
  int64x2_t *v3513;
  int64x2_t *v3514;
  int64x2_t *v3515;
  int64x2_t *v3516;
  int64x2_t *v3517;
  int64x2_t *v3518;
  unint64_t v3519;
  unint64_t v3520;
  unsigned int *v3521;
  uint64_t v3522;
  uint64_t v3523;
  uint64_t v3524;
  unsigned int *v3525;
  unsigned int *v3526;
  _QWORD *v3527;
  unsigned int v3528;
  unsigned int v3529;
  int8x16_t *v3530;
  uint64_t v3531;
  uint64_t v3532;
  int8x16_t v3533;
  int8x16_t v3534;
  int8x16_t v3535;
  unint64_t v3536;
  unint64_t v3537;
  unint64_t v3538;
  int8x16_t *v3539;
  unint64_t v3540;
  unint64_t v3541;
  unsigned int *v3542;
  uint64_t v3543;
  uint64_t v3544;
  uint64_t v3545;
  unsigned int *v3546;
  unsigned int *v3547;
  uint64_t v3548;
  uint64_t v3549;
  __int128 v3550;
  int64x2_t v3551;
  __int128 v3552;
  __int128 v3553;
  __int128 v3554;
  __int128 v3555;
  __int128 v3556;
  uint64_t v3557;
  __int128 v3558;
  __int128 v3559;
  __int128 v3560;
  __int128 v3561;
  uint64_t v3562;
  __int128 v3563;
  __int128 v3564;
  __int128 v3565;
  __int128 v3566;
  uint64_t v3567;
  uint64_t v3568;
  uint64_t v3569;
  uint64_t v3570;
  unsigned int v3571;
  unsigned int v3572;
  uint64_t v3573;
  uint64_t v3574;
  uint64_t v3575;
  int64x2_t v3576;
  int64x2_t *v3577;
  int64x2_t v3578;
  int64x2_t v3579;
  int64x2_t v3580;
  int64x2_t v3581;
  int64x2_t v3582;
  int64x2_t v3583;
  int64x2_t v3584;
  int64x2_t v3585;
  int64x2_t v3586;
  int64x2_t v3587;
  int64x2_t v3588;
  int64x2_t v3589;
  int64x2_t v3590;
  int64x2_t v3591;
  int64x2_t v3592;
  int64x2_t v3593;
  int64x2_t v3594;
  int64x2_t *v3595;
  int64x2_t *v3596;
  int64x2_t *v3597;
  int64x2_t *v3598;
  int64x2_t *v3599;
  int64x2_t *v3600;
  int64x2_t *v3601;
  int64x2_t *v3602;
  unint64_t v3603;
  unint64_t v3604;
  unsigned int *v3605;
  uint64_t v3606;
  uint64_t v3607;
  uint64_t v3608;
  unsigned int *v3609;
  unsigned int *v3610;
  int64x2_t *v3611;
  int64x2_t v3612;
  int64x2_t v3613;
  int64x2_t v3614;
  int64x2_t v3615;
  int64x2_t v3616;
  int64x2_t v3617;
  int64x2_t v3618;
  int64x2_t v3619;
  int64x2_t v3620;
  int64x2_t v3621;
  int64x2_t v3622;
  int64x2_t v3623;
  int64x2_t v3624;
  int64x2_t v3625;
  int64x2_t v3626;
  int64x2_t v3627;
  int64x2_t v3628;
  int8x16_t v3629;
  int8x16_t v3630;
  int8x16_t v3631;
  unint64_t v3632;
  unint64_t v3633;
  unint64_t v3634;
  int8x16_t v3635;
  int8x16_t v3636;
  int8x16_t v3637;
  unint64_t v3638;
  unint64_t v3639;
  unint64_t v3640;
  int8x16_t v3641;
  int8x16_t v3642;
  int8x16_t v3643;
  unint64_t v3644;
  unint64_t v3645;
  unint64_t v3646;
  int8x16_t v3647;
  int8x16_t v3648;
  int8x16_t v3649;
  unint64_t v3650;
  unint64_t v3651;
  unint64_t v3652;
  int64x2_t *v3653;
  int8x16_t *v3654;
  int8x16_t *v3655;
  int8x16_t *v3656;
  int8x16_t *v3657;
  unsigned int v3658;
  unsigned int v3659;
  uint64_t v3660;
  uint64_t v3661;
  uint64_t v3662;
  int64x2_t v3663;
  int64x2_t v3664;
  int64x2_t v3665;
  unint64_t v3666;
  unint64_t v3667;
  unsigned int *v3668;
  uint64_t v3669;
  uint64_t v3670;
  uint64_t v3671;
  unsigned int *v3672;
  unsigned int *v3673;
  uint64_t v3674;
  uint64_t v3675;
  __int128 v3676;
  int64x2_t v3677;
  __int128 v3678;
  __int128 v3679;
  __int128 v3680;
  __int128 v3681;
  __int128 v3682;
  uint64_t v3683;
  __int128 v3684;
  __int128 v3685;
  __int128 v3686;
  __int128 v3687;
  uint64_t v3688;
  __int128 v3689;
  __int128 v3690;
  __int128 v3691;
  __int128 v3692;
  uint64_t v3693;
  uint64_t v3694;
  uint64_t v3695;
  uint64_t v3696;
  unsigned int v3697;
  unsigned int v3698;
  uint64_t v3699;
  uint64_t v3700;
  uint64_t v3701;
  int64x2_t v3702;
  int64x2_t *v3703;
  int64x2_t v3704;
  int64x2_t v3705;
  int64x2_t v3706;
  int64x2_t v3707;
  int64x2_t v3708;
  int64x2_t v3709;
  int64x2_t v3710;
  int64x2_t v3711;
  int64x2_t v3712;
  int64x2_t v3713;
  int64x2_t v3714;
  int64x2_t v3715;
  int64x2_t v3716;
  int64x2_t v3717;
  int64x2_t v3718;
  int64x2_t v3719;
  int64x2_t v3720;
  int64x2_t *v3721;
  int64x2_t *v3722;
  int64x2_t *v3723;
  int64x2_t *v3724;
  int64x2_t *v3725;
  int64x2_t *v3726;
  int64x2_t *v3727;
  int64x2_t *v3728;
  unint64_t v3729;
  unint64_t v3730;
  unsigned int *v3731;
  uint64_t v3732;
  uint64_t v3733;
  uint64_t v3734;
  unsigned int *v3735;
  unsigned int *v3736;
  int64x2_t v3737;
  int64x2_t *v3738;
  int64x2_t v3739;
  int64x2_t v3740;
  int64x2_t v3741;
  int64x2_t v3742;
  int64x2_t v3743;
  int64x2_t v3744;
  int64x2_t v3745;
  int64x2_t v3746;
  int64x2_t v3747;
  int64x2_t v3748;
  int64x2_t v3749;
  int64x2_t *v3750;
  int64x2_t *v3751;
  int64x2_t *v3752;
  int64x2_t *v3753;
  int64x2_t *v3754;
  unsigned int v3755;
  unsigned int v3756;
  uint64_t v3757;
  uint64_t v3758;
  uint64_t v3759;
  int64x2_t v3760;
  int64x2_t *v3761;
  int64x2_t v3762;
  __int128 v3763;
  __int128 v3764;
  __int128 v3765;
  int64x2_t v3766;
  int64x2_t v3767;
  int64x2_t v3768;
  __int128 v3769;
  __int128 v3770;
  __int128 v3771;
  __int8 *v3772;
  int64x2_t *v3773;
  __int8 *v3774;
  unint64_t v3775;
  unint64_t v3776;
  unsigned int *v3777;
  uint64_t v3778;
  uint64_t v3779;
  uint64_t v3780;
  unsigned int *v3781;
  unsigned int *v3782;
  uint64_t v3783;
  uint64_t v3784;
  __int128 v3785;
  int64x2_t v3786;
  __int128 v3787;
  __int128 v3788;
  __int128 v3789;
  __int128 v3790;
  __int128 v3791;
  uint64_t v3792;
  __int128 v3793;
  __int128 v3794;
  __int128 v3795;
  __int128 v3796;
  uint64_t v3797;
  uint64_t v3798;
  uint64_t v3799;
  unsigned int v3800;
  unsigned int v3801;
  uint64_t v3802;
  uint64_t v3803;
  uint64_t v3804;
  int64x2_t v3805;
  int64x2_t *v3806;
  int64x2_t v3807;
  int64x2_t v3808;
  int64x2_t v3809;
  int64x2_t v3810;
  int64x2_t v3811;
  int64x2_t v3812;
  int64x2_t v3813;
  uint64_t v3814;
  __int128 v3815;
  __int128 v3816;
  __int128 v3817;
  __int128 v3818;
  int64x2_t v3819;
  int64x2_t v3820;
  int64x2_t *v3821;
  int64x2_t *v3822;
  int64x2_t *v3823;
  int64x2_t *v3824;
  int64x2_t *v3825;
  int64x2_t *v3826;
  int64x2_t *v3827;
  int64x2_t *v3828;
  unint64_t v3829;
  unint64_t v3830;
  unsigned int *v3831;
  uint64_t v3832;
  uint64_t v3833;
  uint64_t v3834;
  unsigned int *v3835;
  unsigned int *v3836;
  int64x2_t v3837;
  int64x2_t *v3838;
  int64x2_t v3839;
  int64x2_t v3840;
  int64x2_t v3841;
  int64x2_t v3842;
  int64x2_t v3843;
  int64x2_t v3844;
  int64x2_t v3845;
  int64x2_t v3846;
  int64x2_t v3847;
  int64x2_t v3848;
  int64x2_t v3849;
  int64x2_t *v3850;
  int64x2_t *v3851;
  int64x2_t *v3852;
  int64x2_t *v3853;
  int64x2_t *v3854;
  unsigned int v3855;
  unsigned int v3856;
  uint64_t v3857;
  uint64_t v3858;
  uint64_t v3859;
  int64x2_t v3860;
  int64x2_t *v3861;
  int64x2_t v3862;
  __int128 v3863;
  __int128 v3864;
  __int128 v3865;
  int64x2_t v3866;
  int64x2_t v3867;
  int64x2_t v3868;
  __int128 v3869;
  __int128 v3870;
  __int128 v3871;
  __int8 *v3872;
  int64x2_t *v3873;
  __int8 *v3874;
  unint64_t v3875;
  unint64_t v3876;
  unsigned int *v3877;
  uint64_t v3878;
  uint64_t v3879;
  uint64_t v3880;
  unsigned int *v3881;
  unsigned int *v3882;
  int64x2_t v3883;
  int64x2_t *v3884;
  int64x2_t v3885;
  int64x2_t v3886;
  int64x2_t v3887;
  int64x2_t v3888;
  int8x16_t v3889;
  int8x16_t v3890;
  int8x16_t v3891;
  int8x16_t v3892;
  unint64_t v3893;
  unint64_t v3894;
  unint64_t v3895;
  int8x16_t v3896;
  int8x16_t v3897;
  unint64_t v3898;
  unint64_t v3899;
  unint64_t v3900;
  int8x16_t v3901;
  int8x16_t v3902;
  int8x16_t v3903;
  int8x16_t v3904;
  unint64_t v3905;
  unint64_t v3906;
  unint64_t v3907;
  int8x16_t v3908;
  int8x16_t v3909;
  unint64_t v3910;
  unint64_t v3911;
  unint64_t v3912;
  int64x2_t *v3913;
  int8x16_t *v3914;
  int8x16_t *v3915;
  int8x16_t *v3916;
  int8x16_t *v3917;
  unsigned int v3918;
  unsigned int v3919;
  uint64_t v3920;
  uint64_t v3921;
  uint64_t v3922;
  int64x2_t v3923;
  int64x2_t v3924;
  int64x2_t v3925;
  int64x2_t v3926;
  int64x2_t v3927;
  int64x2_t v3928;
  int64x2_t v3929;
  int64x2_t v3930;
  int64x2_t v3931;
  int64x2_t v3932;
  int64x2_t v3933;
  int64x2_t v3934;
  int64x2_t v3935;
  int64x2_t v3936;
  int64x2_t v3937;
  unint64_t v3938;
  unint64_t v3939;
  unsigned int *v3940;
  uint64_t v3941;
  uint64_t v3942;
  uint64_t v3943;
  unsigned int *v3944;
  unsigned int *v3945;
  int64x2_t v3946;
  int64x2_t *v3947;
  int64x2_t v3948;
  int64x2_t v3949;
  int64x2_t v3950;
  int64x2_t v3951;
  __int128 v3952;
  __int128 v3953;
  __int128 v3954;
  int64x2_t v3955;
  int64x2_t v3956;
  int64x2_t *v3957;
  int64x2_t *v3958;
  int64x2_t *v3959;
  int64x2_t *v3960;
  int64x2_t *v3961;
  unsigned int v3962;
  unsigned int v3963;
  uint64_t v3964;
  uint64_t v3965;
  uint64_t v3966;
  int64x2_t v3967;
  int64x2_t *v3968;
  int64x2_t v3969;
  __int128 v3970;
  __int128 v3971;
  __int128 v3972;
  int64x2_t v3973;
  int64x2_t v3974;
  int64x2_t v3975;
  __int8 *v3976;
  int64x2_t *v3977;
  unint64_t v3978;
  unint64_t v3979;
  unsigned int *v3980;
  uint64_t v3981;
  uint64_t v3982;
  uint64_t v3983;
  unsigned int *v3984;
  unsigned int *v3985;
  int64x2_t v3986;
  int64x2_t *v3987;
  int64x2_t v3988;
  __int128 v3989;
  __int128 v3990;
  __int128 v3991;
  int64x2_t v3992;
  int64x2_t v3993;
  int64x2_t v3994;
  __int128 v3995;
  __int128 v3996;
  __int128 v3997;
  int64x2_t v3998;
  int64x2_t v3999;
  int64x2_t v4000;
  __int128 v4001;
  __int128 v4002;
  __int128 v4003;
  int64x2_t v4004;
  int64x2_t v4005;
  int64x2_t v4006;
  __int128 v4007;
  __int128 v4008;
  __int128 v4009;
  int64x2_t v4010;
  int64x2_t v4011;
  int64x2_t v4012;
  __int8 *v4013;
  int64x2_t *v4014;
  __int8 *v4015;
  int64x2_t *v4016;
  __int8 *v4017;
  int64x2_t *v4018;
  __int8 *v4019;
  int64x2_t *v4020;
  unsigned int v4021;
  unsigned int v4022;
  uint64_t v4023;
  uint64_t v4024;
  uint64_t v4025;
  int64x2_t v4026;
  int64x2_t *v4027;
  int64x2_t v4028;
  int64x2_t v4029;
  int64x2_t v4030;
  int64x2_t v4031;
  int64x2_t v4032;
  int64x2_t v4033;
  int64x2_t v4034;
  int64x2_t v4035;
  int64x2_t v4036;
  int64x2_t v4037;
  int64x2_t v4038;
  int64x2_t v4039;
  int64x2_t v4040;
  int64x2_t v4041;
  int64x2_t v4042;
  int64x2_t v4043;
  int64x2_t v4044;
  int64x2_t v4045;
  int64x2_t v4046;
  int64x2_t v4047;
  int64x2_t v4048;
  int64x2_t v4049;
  __int128 v4050;
  __int128 v4051;
  __int128 v4052;
  int64x2_t v4053;
  int64x2_t v4054;
  int64x2_t *v4055;
  int64x2_t *v4056;
  int64x2_t *v4057;
  int64x2_t *v4058;
  int64x2_t *v4059;
  unint64_t v4060;
  unint64_t v4061;
  unsigned int *v4062;
  uint64_t v4063;
  uint64_t v4064;
  uint64_t v4065;
  unsigned int *v4066;
  unsigned int *v4067;
  int8x16_t *v4068;
  unsigned int v4069;
  unsigned int v4070;
  int8x16_t *v4071;
  uint64_t v4072;
  uint64_t v4073;
  int8x16_t v4074;
  int8x16_t v4075;
  int8x16_t v4076;
  unint64_t v4077;
  unint64_t v4078;
  unint64_t v4079;
  _QWORD *v4080;
  unint64_t v4081;
  unint64_t v4082;
  unsigned int *v4083;
  uint64_t v4084;
  uint64_t v4085;
  uint64_t v4086;
  unsigned int *v4087;
  unsigned int *v4088;
  int64x2_t v4089;
  int64x2_t *v4090;
  int64x2_t v4091;
  int64x2_t v4092;
  int64x2_t v4093;
  int64x2_t v4094;
  int8x16_t v4095;
  int8x16_t v4096;
  int8x16_t v4097;
  int8x16_t v4098;
  unint64_t v4099;
  unint64_t v4100;
  unint64_t v4101;
  int8x16_t v4102;
  int8x16_t v4103;
  unint64_t v4104;
  unint64_t v4105;
  unint64_t v4106;
  int8x16_t v4107;
  int8x16_t v4108;
  int8x16_t v4109;
  int8x16_t v4110;
  unint64_t v4111;
  unint64_t v4112;
  unint64_t v4113;
  int8x16_t v4114;
  int8x16_t v4115;
  unint64_t v4116;
  unint64_t v4117;
  unint64_t v4118;
  int64x2_t *v4119;
  int8x16_t *v4120;
  int8x16_t *v4121;
  int8x16_t *v4122;
  int8x16_t *v4123;
  unsigned int v4124;
  unsigned int v4125;
  uint64_t v4126;
  uint64_t v4127;
  uint64_t v4128;
  int64x2_t v4129;
  int64x2_t v4130;
  int64x2_t v4131;
  int64x2_t v4132;
  int64x2_t v4133;
  int64x2_t v4134;
  int64x2_t v4135;
  int64x2_t v4136;
  int64x2_t v4137;
  int64x2_t v4138;
  int64x2_t v4139;
  int64x2_t v4140;
  int64x2_t v4141;
  int64x2_t v4142;
  int64x2_t v4143;
  unint64_t v4144;
  unint64_t v4145;
  unsigned int *v4146;
  uint64_t v4147;
  uint64_t v4148;
  uint64_t v4149;
  unsigned int *v4150;
  unsigned int *v4151;
  int64x2_t v4152;
  int64x2_t *v4153;
  int64x2_t v4154;
  __int128 v4155;
  __int128 v4156;
  __int128 v4157;
  int64x2_t v4158;
  int64x2_t v4159;
  int64x2_t v4160;
  __int128 v4161;
  __int128 v4162;
  __int128 v4163;
  __int8 *v4164;
  int64x2_t *v4165;
  __int8 *v4166;
  unsigned int v4167;
  unsigned int v4168;
  uint64_t v4169;
  uint64_t v4170;
  uint64_t v4171;
  int64x2_t v4172;
  int64x2_t *v4173;
  int64x2_t v4174;
  int64x2_t v4175;
  int64x2_t v4176;
  int64x2_t v4177;
  int64x2_t v4178;
  int64x2_t v4179;
  int64x2_t v4180;
  int64x2_t v4181;
  int64x2_t v4182;
  int64x2_t v4183;
  int64x2_t v4184;
  int64x2_t *v4185;
  int64x2_t *v4186;
  int64x2_t *v4187;
  int64x2_t *v4188;
  int64x2_t *v4189;
  unint64_t v4190;
  unint64_t v4191;
  unsigned int *v4192;
  uint64_t v4193;
  uint64_t v4194;
  uint64_t v4195;
  unsigned int *v4196;
  unsigned int *v4197;
  int64x2_t v4198;
  int64x2_t *v4199;
  int64x2_t v4200;
  __int128 v4201;
  __int128 v4202;
  __int128 v4203;
  int64x2_t v4204;
  int64x2_t v4205;
  int64x2_t v4206;
  __int128 v4207;
  __int128 v4208;
  __int128 v4209;
  __int8 *v4210;
  int64x2_t *v4211;
  __int8 *v4212;
  unsigned int v4213;
  unsigned int v4214;
  uint64_t v4215;
  uint64_t v4216;
  uint64_t v4217;
  int64x2_t v4218;
  int64x2_t *v4219;
  int64x2_t v4220;
  int64x2_t v4221;
  int64x2_t v4222;
  int64x2_t v4223;
  int64x2_t v4224;
  int64x2_t v4225;
  int64x2_t v4226;
  int64x2_t v4227;
  int64x2_t v4228;
  int64x2_t v4229;
  int64x2_t v4230;
  int64x2_t *v4231;
  int64x2_t *v4232;
  int64x2_t *v4233;
  int64x2_t *v4234;
  int64x2_t *v4235;
  unint64_t v4236;
  unint64_t v4237;
  unsigned int *v4238;
  uint64_t v4239;
  uint64_t v4240;
  uint64_t v4241;
  unsigned int *v4242;
  unsigned int *v4243;
  int64x2_t v4244;
  int64x2_t *v4245;
  int64x2_t v4246;
  __int128 v4247;
  __int128 v4248;
  __int128 v4249;
  int64x2_t v4250;
  int64x2_t v4251;
  int64x2_t v4252;
  __int8 *v4253;
  int64x2_t *v4254;
  unsigned int v4255;
  unsigned int v4256;
  uint64_t v4257;
  uint64_t v4258;
  uint64_t v4259;
  int64x2_t v4260;
  int64x2_t *v4261;
  int64x2_t v4262;
  int64x2_t v4263;
  int64x2_t v4264;
  int64x2_t v4265;
  __int128 v4266;
  __int128 v4267;
  __int128 v4268;
  int64x2_t v4269;
  int64x2_t v4270;
  int64x2_t *v4271;
  int64x2_t *v4272;
  int64x2_t *v4273;
  int64x2_t *v4274;
  int64x2_t *v4275;
  int v4276;
  uint64_t v4277;
  unsigned int v4278;
  int v4279;
  double v4280;
  unsigned int v4281;
  double *v4282;
  uint64_t v4283;
  unsigned int v4284;
  int v4285;
  double v4286;
  double *v4287;
  unsigned int v4288;
  double *v4289;
  double v4290;
  unint64_t v4291;
  size_t v4292;
  unint64_t v4294;
  unint64_t v4295;
  int64x2_t v4296;
  unint64_t v4297;
  unint64_t v4298;
  unint64_t v4299;
  unint64_t v4300;
  unint64_t v4301;
  unint64_t v4302;
  unint64_t v4303;
  unint64_t v4304;
  unint64_t v4305;
  unint64_t v4306;
  unint64_t v4307;
  unint64_t v4308;
  unint64_t v4309;
  unint64_t v4310;
  unint64_t v4311;
  unint64_t v4312;
  unint64_t v4313;
  unint64_t v4314;
  unint64_t v4315;
  unint64_t v4316;
  unint64_t v4317;
  unint64_t v4318;
  unint64_t v4319;
  unint64_t v4320;
  unint64_t v4321;
  unint64_t v4322;
  unint64_t v4323;
  unint64_t v4324;
  unint64_t v4325;
  unint64_t v4326;
  unint64_t v4327;
  uint64_t v4328;
  unint64_t v4329;
  unint64_t v4330;
  unint64_t v4331;
  unint64_t v4332;
  unint64_t v4333;
  unint64_t v4334;
  unint64_t v4335;
  unint64_t v4336;
  unint64_t v4337;
  unint64_t v4338;
  uint64_t v4339;
  unint64_t v4340;
  uint64_t v4341;
  unint64_t v4342;
  uint64_t v4343;
  uint64_t v4344;
  uint64_t v4345;
  int64x2_t v4346;
  uint64_t v4347;
  uint64_t v4348;
  int64x2_t v4349;
  int64x2_t v4350;
  uint64_t v4351;
  uint64_t v4352;
  int64x2_t v4353;
  uint64_t v4354;
  uint64_t v4355;
  uint64_t v4356;
  uint64_t v4357;
  int64x2_t v4358;
  uint64_t v4359;
  uint64_t v4360;
  int64x2_t v4361;
  uint64_t v4362;
  uint64_t v4363;
  int64x2_t v4364;
  uint64_t v4365;
  uint64_t v4366;
  int64x2_t v4367;
  uint64_t v4368;
  uint64_t v4369;
  int64x2_t v4370;
  uint64_t v4371;
  int64x2_t v4372;
  __int128 v4373;
  uint64_t v4374;
  uint64_t v4375;
  int64x2_t v4376;
  int64x2_t v4377;
  uint64_t v4378;
  int64x2_t v4379;
  int64x2_t v4380;
  unint64_t v4381;
  __int128 v4382;
  __int128 v4383;
  uint64_t v4384;
  uint64_t v4385;
  uint64_t v4386;
  uint64_t v4387;
  uint64_t v4388;
  __int128 v4389;
  uint64_t v4390;
  __int128 v4391;
  __int128 v4392;
  uint64_t v4393;
  int8x16_t v4394;
  int8x16_t v4395;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = (unsigned int *)(a1 + 20056);
  v7 = (void **)(a1 + 20040);
  v8 = *(_QWORD *)(a1 + 9048);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 9160) + 8)
     + 9 * *(_DWORD *)(*(_QWORD *)(a1 + 9104) + 8)
     + 6 * (*(_DWORD *)(*(_QWORD *)(a1 + 9216) + 8) + *(_DWORD *)(v8 + 8))
     + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 9328) + 8) + *(_DWORD *)(*(_QWORD *)(a1 + 9272) + 8))
     + 3 * *(_DWORD *)(*(_QWORD *)(a1 + 9384) + 8);
  if ((v5 & 1) != 0)
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 9064) + 12)
        + 9 * *(_DWORD *)(*(_QWORD *)(a1 + 9056) + 12)
        + 6 * (*(_DWORD *)(*(_QWORD *)(a1 + 9072) + 12) + *(_DWORD *)(v8 + 12))
        + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 9088) + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 9080) + 12))
        + 3 * *(_DWORD *)(*(_QWORD *)(a1 + 9096) + 12);
    *v6 = v9;
    *(_DWORD *)(a1 + 20060) = v10;
    v11 = v10 * (unint64_t)v9;
    if (*(_QWORD *)(a1 + 20048) < v11)
    {
      if (*v7)
        MEMORY[0x212BC6368](*v7, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 20040) = 0;
      v12 = (8 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 20048) = v12 >> 3;
      *v7 = operator new(v12, (std::align_val_t)0x20uLL);
      v9 = *v6;
      v10 = *(_DWORD *)(a1 + 20060);
    }
    v13 = v9 * v10;
    if (v13)
      bzero(*v7, 8 * v13);
    v14 = *(unsigned int *)(a1 + 2868);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = *(unsigned int **)(a1 + 10520);
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 2976) + 8 * v15);
        if (v17)
        {
          v18 = *(_QWORD *)(a1 + 2944);
          v19 = (*(_DWORD *)(a1 + 2968) * v15);
          v20 = (unsigned int *)(v18 + 16 * (v17 + v19));
          v21 = (unsigned int *)(v18 + 16 * v19);
          do
          {
            while (1)
            {
              v35 = *v16;
              v36 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v21);
              v37 = *(_QWORD *)(a1 + 2872) + 8 * *((_QWORD *)v21 + 1);
              v38 = *v6;
              v39 = *(_QWORD *)(a1 + 20040);
              if (*v16 >= v36)
                break;
              v22 = (int64x2_t *)(v39 + 8 * (v35 + (_DWORD)v38 * v36));
              v23.i64[0] = *(_QWORD *)(v37 + 16);
              v24 = *(int64x2_t *)(v37 + 24);
              v25.i64[0] = *(_QWORD *)(v37 + 64);
              v26 = *(int64x2_t *)(v37 + 48);
              v27 = *(int64x2_t *)(v37 + 72);
              v28.i64[0] = *(_QWORD *)(v37 + 112);
              v29 = *(int64x2_t *)(v37 + 96);
              v30 = *(int64x2_t *)(v37 + 120);
              v31 = vzip1q_s64(*(int64x2_t *)v37, v24);
              v32 = vzip2q_s64(*(int64x2_t *)v37, v24);
              v23.i64[1] = *(_QWORD *)(v37 + 40);
              v25.i64[1] = *(_QWORD *)(v37 + 88);
              v28.i64[1] = *(_QWORD *)(v37 + 136);
              v22[1] = vzip1q_s64(v26, v27);
              v22[2] = vzip1q_s64(v29, v30);
              *v22 = v31;
              v33 = (int64x2_t *)((char *)v22 + 8 * v38);
              v33[1] = vzip1q_s64(vdupq_laneq_s64(v26, 1), vdupq_laneq_s64(v27, 1));
              v33[2] = vzip2q_s64(v29, v30);
              *v33 = v32;
              v34 = &v22[v38];
              v34[1] = v25;
              v34[2] = v28;
              *v34 = v23;
              v21 += 4;
              if (v21 == v20)
                goto LABEL_12;
            }
            v40 = *(int64x2_t *)v37;
            v41 = (int64x2_t *)(v39 + 8 * (v36 + (_DWORD)v38 * v35));
            v42 = *(_OWORD *)(v37 + 24);
            v43 = *(_QWORD *)(v37 + 40);
            v44 = *(int64x2_t *)(v37 + 48);
            v45 = *(_QWORD *)(v37 + 64);
            v46 = *(_OWORD *)(v37 + 72);
            v47 = *(_QWORD *)(v37 + 88);
            v48 = *(int64x2_t *)(v37 + 96);
            v49 = *(_QWORD *)(v37 + 112);
            v50 = *(_OWORD *)(v37 + 120);
            v51 = *(_QWORD *)(v37 + 136);
            v41[1].i64[0] = *(_QWORD *)(v37 + 16);
            *v41 = v40;
            v52 = &v41->i8[8 * v38];
            *((_QWORD *)v52 + 2) = v43;
            *(_OWORD *)v52 = v42;
            v53 = &v41[v38];
            v53[1].i64[0] = v45;
            *v53 = v44;
            v54 = &v41->i8[24 * v38];
            *((_QWORD *)v54 + 2) = v47;
            *(_OWORD *)v54 = v46;
            v55 = &v41[2 * v38];
            v55[1].i64[0] = v49;
            *v55 = v48;
            v56 = &v41->i8[40 * v38];
            *((_QWORD *)v56 + 2) = v51;
            *(_OWORD *)v56 = v50;
            v21 += 4;
          }
          while (v21 != v20);
LABEL_12:
          v14 = *(unsigned int *)(a1 + 2868);
        }
        ++v15;
        ++v16;
      }
      while (v15 < v14);
    }
    v104 = *(unsigned int *)(a1 + 3876);
    if ((_DWORD)v104)
    {
      v105 = 0;
      v106 = *(unsigned int **)(a1 + 10544);
      do
      {
        v107 = *(_QWORD *)(*(_QWORD *)(a1 + 3984) + 8 * v105);
        if (v107)
        {
          v108 = *(_QWORD *)(a1 + 3952);
          v109 = (*(_DWORD *)(a1 + 3976) * v105);
          v110 = (unsigned int *)(v108 + 16 * (v107 + v109));
          v111 = (unsigned int *)(v108 + 16 * v109);
          do
          {
            while (1)
            {
              v130 = *v106;
              v131 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v111);
              v132 = *(_QWORD *)(a1 + 3880) + 8 * *((_QWORD *)v111 + 1);
              v133 = *v6;
              v134 = *(_QWORD *)(a1 + 20040);
              if (*v106 >= v131)
                break;
              v112.i64[0] = *(_QWORD *)(v132 + 16);
              v113 = (int64x2_t *)(v134 + 8 * (v130 + (_DWORD)v133 * v131));
              v114 = *(int64x2_t *)(v132 + 24);
              v115.i64[0] = *(_QWORD *)(v132 + 64);
              v116 = *(int64x2_t *)(v132 + 48);
              v117 = *(int64x2_t *)(v132 + 72);
              v118.i64[0] = *(_QWORD *)(v132 + 112);
              v119 = *(int64x2_t *)(v132 + 96);
              v120 = *(int64x2_t *)(v132 + 120);
              v121.i64[0] = *(_QWORD *)(v132 + 160);
              v122 = *(int64x2_t *)(v132 + 144);
              v123 = *(int64x2_t *)(v132 + 168);
              v124 = *(_QWORD *)(v132 + 208);
              v125 = *(_OWORD *)(v132 + 192);
              v126 = vzip1q_s64(*(int64x2_t *)v132, v114);
              v127 = vzip2q_s64(*(int64x2_t *)v132, v114);
              v112.i64[1] = *(_QWORD *)(v132 + 40);
              v115.i64[1] = *(_QWORD *)(v132 + 88);
              v118.i64[1] = *(_QWORD *)(v132 + 136);
              v121.i64[1] = *(_QWORD *)(v132 + 184);
              v113[2] = vzip1q_s64(v119, v120);
              v113[3] = vzip1q_s64(v122, v123);
              v113[4].i64[0] = v125;
              *v113 = v126;
              v113[1] = vzip1q_s64(v116, v117);
              v128 = (int64x2_t *)((char *)v113 + 8 * v133);
              v128[2] = vzip2q_s64(v119, v120);
              v128[3] = vzip2q_s64(v122, v123);
              *v128 = v127;
              v128[1] = vzip2q_s64(v116, v117);
              v128[4].i64[0] = *((_QWORD *)&v125 + 1);
              v129 = &v113[v133];
              v129[4].i64[0] = v124;
              v129[2] = v118;
              v129[3] = v121;
              *v129 = v112;
              v129[1] = v115;
              v111 += 4;
              if (v111 == v110)
                goto LABEL_38;
            }
            v135 = *(int64x2_t *)v132;
            v136 = (int64x2_t *)(v134 + 8 * (v131 + (_DWORD)v133 * v130));
            v137 = *(_OWORD *)(v132 + 24);
            v138 = *(_QWORD *)(v132 + 40);
            v139 = *(int64x2_t *)(v132 + 48);
            v140 = *(_QWORD *)(v132 + 64);
            v141 = *(_OWORD *)(v132 + 72);
            v142 = *(_QWORD *)(v132 + 88);
            v143 = *(int64x2_t *)(v132 + 96);
            v144 = *(_QWORD *)(v132 + 112);
            v145 = *(_OWORD *)(v132 + 120);
            v146 = *(_QWORD *)(v132 + 136);
            v147 = *(int64x2_t *)(v132 + 144);
            v148 = *(_QWORD *)(v132 + 160);
            v149 = *(_OWORD *)(v132 + 168);
            v150 = *(_QWORD *)(v132 + 184);
            v151 = *(int64x2_t *)(v132 + 192);
            v152 = *(_QWORD *)(v132 + 208);
            v136[1].i64[0] = *(_QWORD *)(v132 + 16);
            *v136 = v135;
            v153 = &v136->i8[8 * v133];
            *((_QWORD *)v153 + 2) = v138;
            *(_OWORD *)v153 = v137;
            v154 = &v136[v133];
            v154[1].i64[0] = v140;
            *v154 = v139;
            v155 = &v136->i8[24 * v133];
            *((_QWORD *)v155 + 2) = v142;
            *(_OWORD *)v155 = v141;
            v156 = &v136[2 * v133];
            v156[1].i64[0] = v144;
            *v156 = v143;
            v157 = &v136->i8[40 * v133];
            *((_QWORD *)v157 + 2) = v146;
            *(_OWORD *)v157 = v145;
            v158 = &v136[3 * v133];
            v158[1].i64[0] = v148;
            *v158 = v147;
            v159 = &v136->i8[56 * v133];
            *((_QWORD *)v159 + 2) = v150;
            *(_OWORD *)v159 = v149;
            v160 = &v136[4 * v133];
            v160[1].i64[0] = v152;
            *v160 = v151;
            v111 += 4;
          }
          while (v111 != v110);
LABEL_38:
          v104 = *(unsigned int *)(a1 + 3876);
        }
        ++v105;
        ++v106;
      }
      while (v105 < v104);
    }
    sub_20F61644C(a1 + 4872, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10664), *(unsigned int **)(a1 + 10568), 1);
    v218 = *(unsigned int *)(a1 + 5892);
    if ((_DWORD)v218)
    {
      v219 = 0;
      v220 = *(unsigned int **)(a1 + 10592);
      do
      {
        v221 = *(_QWORD *)(*(_QWORD *)(a1 + 6000) + 8 * v219);
        if (v221)
        {
          v222 = *(_QWORD *)(a1 + 5968);
          v223 = (*(_DWORD *)(a1 + 5992) * v219);
          v224 = (unsigned int *)(v222 + 16 * (v221 + v223));
          v225 = (unsigned int *)(v222 + 16 * v223);
          do
          {
            while (1)
            {
              v239 = *v220;
              v240 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v225);
              v241 = *(_QWORD *)(a1 + 5896) + 8 * *((_QWORD *)v225 + 1);
              v242 = *v6;
              v243 = *(_QWORD *)(a1 + 20040);
              if (*v220 >= v240)
                break;
              v226 = (int64x2_t *)(v243 + 8 * (v239 + (_DWORD)v242 * v240));
              v227.i64[0] = *(_QWORD *)(v241 + 16);
              v228 = *(int64x2_t *)(v241 + 24);
              v229.i64[0] = *(_QWORD *)(v241 + 64);
              v230 = *(int64x2_t *)(v241 + 48);
              v231 = *(int64x2_t *)(v241 + 72);
              v232.i64[0] = *(_QWORD *)(v241 + 112);
              v233 = *(int64x2_t *)(v241 + 96);
              v234 = *(int64x2_t *)(v241 + 120);
              v235 = vzip1q_s64(*(int64x2_t *)v241, v228);
              v236 = vzip2q_s64(*(int64x2_t *)v241, v228);
              v227.i64[1] = *(_QWORD *)(v241 + 40);
              v229.i64[1] = *(_QWORD *)(v241 + 88);
              v232.i64[1] = *(_QWORD *)(v241 + 136);
              v226[1] = vzip1q_s64(v230, v231);
              v226[2] = vzip1q_s64(v233, v234);
              *v226 = v235;
              v237 = (int64x2_t *)((char *)v226 + 8 * v242);
              v237[1] = vzip1q_s64(vdupq_laneq_s64(v230, 1), vdupq_laneq_s64(v231, 1));
              v237[2] = vzip2q_s64(v233, v234);
              *v237 = v236;
              v238 = &v226[v242];
              v238[1] = v229;
              v238[2] = v232;
              *v238 = v227;
              v225 += 4;
              if (v225 == v224)
                goto LABEL_58;
            }
            v244 = *(int64x2_t *)v241;
            v245 = (int64x2_t *)(v243 + 8 * (v240 + (_DWORD)v242 * v239));
            v246 = *(_OWORD *)(v241 + 24);
            v247 = *(_QWORD *)(v241 + 40);
            v248 = *(int64x2_t *)(v241 + 48);
            v249 = *(_QWORD *)(v241 + 64);
            v250 = *(_OWORD *)(v241 + 72);
            v251 = *(_QWORD *)(v241 + 88);
            v252 = *(int64x2_t *)(v241 + 96);
            v253 = *(_QWORD *)(v241 + 112);
            v254 = *(_OWORD *)(v241 + 120);
            v255 = *(_QWORD *)(v241 + 136);
            v245[1].i64[0] = *(_QWORD *)(v241 + 16);
            *v245 = v244;
            v256 = &v245->i8[8 * v242];
            *((_QWORD *)v256 + 2) = v247;
            *(_OWORD *)v256 = v246;
            v257 = &v245[v242];
            v257[1].i64[0] = v249;
            *v257 = v248;
            v258 = &v245->i8[24 * v242];
            *((_QWORD *)v258 + 2) = v251;
            *(_OWORD *)v258 = v250;
            v259 = &v245[2 * v242];
            v259[1].i64[0] = v253;
            *v259 = v252;
            v260 = &v245->i8[40 * v242];
            *((_QWORD *)v260 + 2) = v255;
            *(_OWORD *)v260 = v254;
            v225 += 4;
          }
          while (v225 != v224);
LABEL_58:
          v218 = *(unsigned int *)(a1 + 5892);
        }
        ++v219;
        ++v220;
      }
      while (v219 < v218);
    }
    v279 = *(unsigned int *)(a1 + 6900);
    if ((_DWORD)v279)
    {
      v280 = 0;
      v281 = *(unsigned int **)(a1 + 10616);
      do
      {
        v282 = *(_QWORD *)(*(_QWORD *)(a1 + 7008) + 8 * v280);
        if (v282)
        {
          v283 = *(_QWORD *)(a1 + 6976);
          v284 = (*(_DWORD *)(a1 + 7000) * v280);
          v285 = (unsigned int *)(v283 + 16 * (v282 + v284));
          v286 = (unsigned int *)(v283 + 16 * v284);
          do
          {
            while (1)
            {
              v297 = *v281;
              v298 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v286);
              v299 = *(_QWORD *)(a1 + 6904) + 8 * *((_QWORD *)v286 + 1);
              v300 = *v6;
              v301 = *(_QWORD *)(a1 + 20040);
              if (*v281 >= v298)
                break;
              v287 = (int64x2_t *)(v301 + 8 * (v297 + (_DWORD)v300 * v298));
              v288.i64[0] = *(_QWORD *)(v299 + 16);
              v289 = *(int64x2_t *)(v299 + 24);
              v290.i64[0] = *(_QWORD *)(v299 + 64);
              v291 = *(int64x2_t *)(v299 + 48);
              v292 = vzip1q_s64(*(int64x2_t *)v299, v289);
              v293 = vzip1q_s64(v291, *(int64x2_t *)(v299 + 72));
              v294 = vzip2q_s64(*(int64x2_t *)v299, v289);
              v289.i64[0] = vdupq_laneq_s64(v291, 1).u64[0];
              v289.i64[1] = *(_QWORD *)(v299 + 80);
              v288.i64[1] = *(_QWORD *)(v299 + 40);
              v290.i64[1] = *(_QWORD *)(v299 + 88);
              *v287 = v292;
              v287[1] = v293;
              v295 = (int64x2_t *)((char *)v287 + 8 * v300);
              *v295 = v294;
              v295[1] = v289;
              v296 = &v287[v300];
              *v296 = v288;
              v296[1] = v290;
              v286 += 4;
              if (v286 == v285)
                goto LABEL_78;
            }
            v302 = *(int64x2_t *)v299;
            v303 = (int64x2_t *)(v301 + 8 * (v298 + (_DWORD)v300 * v297));
            v304 = *(_OWORD *)(v299 + 24);
            v305 = *(_QWORD *)(v299 + 40);
            v306 = *(int64x2_t *)(v299 + 48);
            v307 = *(_QWORD *)(v299 + 64);
            v308 = *(_OWORD *)(v299 + 72);
            v309 = *(_QWORD *)(v299 + 88);
            v303[1].i64[0] = *(_QWORD *)(v299 + 16);
            *v303 = v302;
            v310 = &v303->i8[8 * v300];
            *((_QWORD *)v310 + 2) = v305;
            *(_OWORD *)v310 = v304;
            v311 = &v303[v300];
            v311[1].i64[0] = v307;
            *v311 = v306;
            v312 = &v303->i8[24 * v300];
            *((_QWORD *)v312 + 2) = v309;
            *(_OWORD *)v312 = v308;
            v286 += 4;
          }
          while (v286 != v285);
LABEL_78:
          v279 = *(unsigned int *)(a1 + 6900);
        }
        ++v280;
        ++v281;
      }
      while (v280 < v279);
    }
    v356 = *(unsigned int *)(a1 + 7908);
    if ((_DWORD)v356)
    {
      v357 = 0;
      v358 = *(unsigned int **)(a1 + 10640);
      do
      {
        v359 = *(_QWORD *)(*(_QWORD *)(a1 + 8016) + 8 * v357);
        if (v359)
        {
          v360 = *(_QWORD *)(a1 + 7984);
          v361 = (*(_DWORD *)(a1 + 8008) * v357);
          v362 = (unsigned int *)(v360 + 16 * (v359 + v361));
          v363 = (unsigned int *)(v360 + 16 * v361);
          do
          {
            while (1)
            {
              v374 = *v358;
              v375 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v363);
              v376 = *(_QWORD *)(a1 + 7912) + 8 * *((_QWORD *)v363 + 1);
              v377 = *v6;
              v378 = *(_QWORD *)(a1 + 20040);
              if (*v358 >= v375)
                break;
              v364 = (int64x2_t *)(v378 + 8 * (v374 + (_DWORD)v377 * v375));
              v365.i64[0] = *(_QWORD *)(v376 + 16);
              v366 = *(int64x2_t *)(v376 + 24);
              v367.i64[0] = *(_QWORD *)(v376 + 64);
              v368 = *(int64x2_t *)(v376 + 48);
              v369 = vzip1q_s64(*(int64x2_t *)v376, v366);
              v370 = vzip1q_s64(v368, *(int64x2_t *)(v376 + 72));
              v371 = vzip2q_s64(*(int64x2_t *)v376, v366);
              v366.i64[0] = vdupq_laneq_s64(v368, 1).u64[0];
              v366.i64[1] = *(_QWORD *)(v376 + 80);
              v365.i64[1] = *(_QWORD *)(v376 + 40);
              v367.i64[1] = *(_QWORD *)(v376 + 88);
              *v364 = v369;
              v364[1] = v370;
              v372 = (int64x2_t *)((char *)v364 + 8 * v377);
              *v372 = v371;
              v372[1] = v366;
              v373 = &v364[v377];
              *v373 = v365;
              v373[1] = v367;
              v363 += 4;
              if (v363 == v362)
                goto LABEL_98;
            }
            v379 = *(int64x2_t *)v376;
            v380 = (int64x2_t *)(v378 + 8 * (v375 + (_DWORD)v377 * v374));
            v381 = *(_OWORD *)(v376 + 24);
            v382 = *(_QWORD *)(v376 + 40);
            v383 = *(int64x2_t *)(v376 + 48);
            v384 = *(_QWORD *)(v376 + 64);
            v385 = *(_OWORD *)(v376 + 72);
            v386 = *(_QWORD *)(v376 + 88);
            v380[1].i64[0] = *(_QWORD *)(v376 + 16);
            *v380 = v379;
            v387 = &v380->i8[8 * v377];
            *((_QWORD *)v387 + 2) = v382;
            *(_OWORD *)v387 = v381;
            v388 = &v380[v377];
            v388[1].i64[0] = v384;
            *v388 = v383;
            v389 = &v380->i8[24 * v377];
            *((_QWORD *)v389 + 2) = v386;
            *(_OWORD *)v389 = v385;
            v363 += 4;
          }
          while (v363 != v362);
LABEL_98:
          v356 = *(unsigned int *)(a1 + 7908);
        }
        ++v357;
        ++v358;
      }
      while (v357 < v356);
    }
    v424 = *(unsigned int *)(a1 + 8916);
    if ((_DWORD)v424)
    {
      v425 = 0;
      v426 = *(unsigned int **)(a1 + 10664);
      do
      {
        v427 = *(_QWORD *)(*(_QWORD *)(a1 + 9024) + 8 * v425);
        if (v427)
        {
          v428 = *(_QWORD *)(a1 + 8992);
          v429 = (*(_DWORD *)(a1 + 9016) * v425);
          v430 = (unsigned int *)(v428 + 16 * (v427 + v429));
          v431 = (unsigned int *)(v428 + 16 * v429);
          do
          {
            v443 = *v426;
            v444 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v431);
            v445 = *(_QWORD *)(a1 + 8920) + 8 * *((_QWORD *)v431 + 1);
            v446 = *v6;
            v447 = *(_QWORD *)(a1 + 20040);
            if (*v426 < v444)
            {
              v432 = v443 + (_DWORD)v446 * v444;
              v433 = (int64x2_t *)(v447 + 8 * v432);
              v434.i64[0] = *(_QWORD *)(v445 + 16);
              v435 = *(_QWORD *)(v445 + 40);
              v436 = *(int64x2_t *)(v445 + 24);
              v437 = *(_QWORD *)(v445 + 64);
              v438 = *(_OWORD *)(v445 + 48);
              v439 = vzip1q_s64(*(int64x2_t *)v445, v436);
              v440 = vzip2q_s64(*(int64x2_t *)v445, v436);
              v433[1].i64[0] = v438;
              *v433 = v439;
              v441 = (int64x2_t *)((char *)v433 + 8 * v446);
              *v441 = v440;
              v441[1].i64[0] = *((_QWORD *)&v438 + 1);
            }
            else
            {
              v432 = v444 + (_DWORD)v446 * v443;
              v448 = (int64x2_t *)(v447 + 8 * v432);
              v449 = *(int64x2_t *)v445;
              v450 = *(_OWORD *)(v445 + 24);
              v451 = *(_QWORD *)(v445 + 40);
              v437 = *(_QWORD *)(v445 + 64);
              v434 = *(int8x16_t *)(v445 + 48);
              v435 = vextq_s8(v434, v434, 8uLL).u64[0];
              v448[1].i64[0] = *(_QWORD *)(v445 + 16);
              *v448 = v449;
              v452 = &v448->i8[8 * v446];
              *((_QWORD *)v452 + 2) = v451;
              *(_OWORD *)v452 = v450;
            }
            v442 = v447 + 8 * v432 + 16 * v446;
            *(_QWORD *)(v442 + 16) = v437;
            v434.i64[1] = v435;
            *(int8x16_t *)v442 = v434;
            v431 += 4;
          }
          while (v431 != v430);
          v424 = *(unsigned int *)(a1 + 8916);
        }
        ++v425;
        ++v426;
      }
      while (v425 < v424);
    }
    v487 = *(unsigned int *)(a1 + 2724);
    if ((_DWORD)v487)
    {
      v488 = 0;
      v489 = *(unsigned int **)(a1 + 10520);
      do
      {
        v490 = *(_QWORD *)(*(_QWORD *)(a1 + 2832) + 8 * v488);
        if (v490)
        {
          v491 = *(_QWORD *)(a1 + 2800);
          v492 = (*(_DWORD *)(a1 + 2824) * v488);
          v493 = (unsigned int *)(v491 + 16 * (v490 + v492));
          v494 = (unsigned int *)(v491 + 16 * v492);
          do
          {
            while (1)
            {
              v514 = *v489;
              v515 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v494);
              v516 = *(_QWORD *)(a1 + 2728) + 8 * *((_QWORD *)v494 + 1);
              v517 = *v6;
              v518 = *(_QWORD *)(a1 + 20040);
              if (*v489 >= v515)
                break;
              v495 = (int64x2_t *)(v518 + 8 * (v514 + (_DWORD)v517 * v515));
              v496 = *(int64x2_t *)(v516 + 16);
              v498 = *(int64x2_t *)(v516 + 32);
              v497 = *(int64x2_t *)(v516 + 48);
              v500 = *(int64x2_t *)(v516 + 64);
              v499 = *(int64x2_t *)(v516 + 80);
              v502 = *(int64x2_t *)(v516 + 128);
              v501 = *(int64x2_t *)(v516 + 144);
              v503 = vzip1q_s64(*(int64x2_t *)v516, v498);
              v504 = vzip1q_s64(v500, *(int64x2_t *)(v516 + 96));
              v505 = vzip1q_s64(v502, *(int64x2_t *)(v516 + 160));
              v500.i64[0] = vdupq_laneq_s64(v500, 1).u64[0];
              v500.i64[1] = *(_QWORD *)(v516 + 104);
              v506.i64[0] = vdupq_laneq_s64(v502, 1).u64[0];
              v507 = vzip2q_s64(*(int64x2_t *)v516, v498);
              v506.i64[1] = *(_QWORD *)(v516 + 168);
              v508 = vzip1q_s64(v499, *(int64x2_t *)(v516 + 112));
              v509 = vzip1q_s64(v501, *(int64x2_t *)(v516 + 176));
              v499.i64[0] = vdupq_laneq_s64(v499, 1).u64[0];
              v499.i64[1] = *(_QWORD *)(v516 + 120);
              v510.i64[0] = vdupq_laneq_s64(v501, 1).u64[0];
              v510.i64[1] = *(_QWORD *)(v516 + 184);
              v495[1] = v504;
              v495[2] = v505;
              *v495 = v503;
              v511 = (int64x2_t *)((char *)v495 + 8 * v517);
              v511[1] = v500;
              v511[2] = v506;
              *v511 = v507;
              v512 = &v495[v517];
              v512[1] = v508;
              v512[2] = v509;
              *v512 = vzip1q_s64(v496, v497);
              v513 = (int64x2_t *)((char *)v495 + 24 * v517);
              v513[1] = v499;
              v513[2] = v510;
              *v513 = vzip2q_s64(v496, v497);
              v494 += 4;
              if (v494 == v493)
                goto LABEL_138;
            }
            v519 = *(_OWORD *)(v516 + 16);
            v520 = (_OWORD *)(v518 + 8 * (v515 + (_DWORD)v517 * v514));
            v521 = *(_OWORD *)(v516 + 32);
            v522 = *(_OWORD *)(v516 + 48);
            v523 = *(_OWORD *)(v516 + 64);
            v524 = *(_OWORD *)(v516 + 80);
            v525 = *(_OWORD *)(v516 + 96);
            v526 = *(_OWORD *)(v516 + 112);
            v527 = *(_OWORD *)(v516 + 128);
            v528 = *(_OWORD *)(v516 + 144);
            v529 = *(_OWORD *)(v516 + 160);
            v530 = *(_OWORD *)(v516 + 176);
            *v520 = *(_OWORD *)v516;
            v520[1] = v519;
            v531 = (_OWORD *)((char *)v520 + 8 * v517);
            *v531 = v521;
            v531[1] = v522;
            v532 = &v520[v517];
            *v532 = v523;
            v532[1] = v524;
            v533 = (_OWORD *)((char *)v520 + 24 * v517);
            *v533 = v525;
            v533[1] = v526;
            v534 = &v520[2 * v517];
            *v534 = v527;
            v534[1] = v528;
            v535 = (_OWORD *)((char *)v520 + 40 * v517);
            *v535 = v529;
            v535[1] = v530;
            v494 += 4;
          }
          while (v494 != v493);
LABEL_138:
          v487 = *(unsigned int *)(a1 + 2724);
        }
        ++v488;
        ++v489;
      }
      while (v488 < v487);
    }
    v565 = *(unsigned int *)(a1 + 3732);
    if ((_DWORD)v565)
    {
      v566 = 0;
      v567 = *(unsigned int **)(a1 + 10544);
      do
      {
        v568 = *(_QWORD *)(*(_QWORD *)(a1 + 3840) + 8 * v566);
        if (v568)
        {
          v569 = *(_QWORD *)(a1 + 3808);
          v570 = (*(_DWORD *)(a1 + 3832) * v566);
          v571 = (unsigned int *)(v569 + 16 * (v568 + v570));
          v572 = (unsigned int *)(v569 + 16 * v570);
          do
          {
            while (1)
            {
              v597 = *v567;
              v598 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v572);
              v599 = *(_QWORD *)(a1 + 3736) + 8 * *((_QWORD *)v572 + 1);
              v600 = *v6;
              v601 = *(_QWORD *)(a1 + 20040);
              if (*v567 >= v598)
                break;
              v573 = *(int64x2_t *)(v599 + 16);
              v574 = (int64x2_t *)(v601 + 8 * (v597 + (_DWORD)v600 * v598));
              v576 = *(int64x2_t *)(v599 + 32);
              v575 = *(int64x2_t *)(v599 + 48);
              v578 = *(int64x2_t *)(v599 + 64);
              v577 = *(int64x2_t *)(v599 + 80);
              v580 = *(int64x2_t *)(v599 + 128);
              v579 = *(int64x2_t *)(v599 + 144);
              v582 = *(int64x2_t *)(v599 + 192);
              v581 = *(int64x2_t *)(v599 + 208);
              v584 = *(_OWORD *)(v599 + 256);
              v583 = *(_OWORD *)(v599 + 272);
              v585 = vzip1q_s64(*(int64x2_t *)v599, v576);
              v586 = vzip1q_s64(v578, *(int64x2_t *)(v599 + 96));
              v587 = vzip1q_s64(v582, *(int64x2_t *)(v599 + 224));
              v588 = vzip2q_s64(*(int64x2_t *)v599, v576);
              v576.i64[0] = vdupq_laneq_s64(v578, 1).u64[0];
              v576.i64[1] = *(_QWORD *)(v599 + 104);
              v578.i64[0] = vdupq_laneq_s64(v580, 1).u64[0];
              v578.i64[1] = *(_QWORD *)(v599 + 168);
              v589.i64[0] = vdupq_laneq_s64(v582, 1).u64[0];
              v589.i64[1] = *(_QWORD *)(v599 + 232);
              v590 = vzip1q_s64(v577, *(int64x2_t *)(v599 + 112));
              v591 = vzip1q_s64(v579, *(int64x2_t *)(v599 + 176));
              v592 = vzip1q_s64(v581, *(int64x2_t *)(v599 + 240));
              v577.i64[0] = vdupq_laneq_s64(v577, 1).u64[0];
              v577.i64[1] = *(_QWORD *)(v599 + 120);
              v593.i64[0] = vdupq_laneq_s64(v579, 1).u64[0];
              v593.i64[1] = *(_QWORD *)(v599 + 184);
              v579.i64[0] = vdupq_laneq_s64(v581, 1).u64[0];
              v579.i64[1] = *(_QWORD *)(v599 + 248);
              v574[2] = vzip1q_s64(v580, *(int64x2_t *)(v599 + 160));
              v574[3] = v587;
              v574[4].i64[0] = v584;
              *v574 = v585;
              v574[1] = v586;
              v594 = (int64x2_t *)((char *)v574 + 8 * v600);
              v594[2] = v578;
              v594[3] = v589;
              *v594 = v588;
              v594[1] = v576;
              v594[4].i64[0] = *((_QWORD *)&v584 + 1);
              v595 = &v574[v600];
              v595[4].i64[0] = v583;
              v595[2] = v591;
              v595[3] = v592;
              *v595 = vzip1q_s64(v573, v575);
              v595[1] = v590;
              v596 = (int64x2_t *)((char *)v574 + 24 * v600);
              v596[4].i64[0] = *((_QWORD *)&v583 + 1);
              v596[2] = v593;
              v596[3] = v579;
              *v596 = vzip2q_s64(v573, v575);
              v596[1] = v577;
              v572 += 4;
              if (v572 == v571)
                goto LABEL_158;
            }
            v602 = *(_OWORD *)(v599 + 16);
            v603 = (_OWORD *)(v601 + 8 * (v598 + (_DWORD)v600 * v597));
            v604 = *(_OWORD *)(v599 + 32);
            v605 = *(_OWORD *)(v599 + 48);
            v606 = *(_OWORD *)(v599 + 64);
            v607 = *(_OWORD *)(v599 + 80);
            v608 = *(_OWORD *)(v599 + 96);
            v609 = *(_OWORD *)(v599 + 112);
            v610 = *(_OWORD *)(v599 + 128);
            v611 = *(_OWORD *)(v599 + 144);
            v612 = *(_OWORD *)(v599 + 160);
            v613 = *(_OWORD *)(v599 + 176);
            v614 = *(_OWORD *)(v599 + 192);
            v615 = *(_OWORD *)(v599 + 208);
            v616 = *(_OWORD *)(v599 + 224);
            v617 = *(_OWORD *)(v599 + 240);
            v618 = *(_OWORD *)(v599 + 256);
            v619 = *(_OWORD *)(v599 + 272);
            *v603 = *(_OWORD *)v599;
            v603[1] = v602;
            v620 = (_OWORD *)((char *)v603 + 8 * v600);
            *v620 = v604;
            v620[1] = v605;
            v621 = &v603[v600];
            *v621 = v606;
            v621[1] = v607;
            v622 = (_OWORD *)((char *)v603 + 24 * v600);
            *v622 = v608;
            v622[1] = v609;
            v623 = &v603[2 * v600];
            *v623 = v610;
            v623[1] = v611;
            v624 = (_OWORD *)((char *)v603 + 40 * v600);
            *v624 = v612;
            v624[1] = v613;
            v625 = &v603[3 * v600];
            *v625 = v614;
            v625[1] = v615;
            v626 = (_OWORD *)((char *)v603 + 56 * v600);
            *v626 = v616;
            v626[1] = v617;
            v627 = &v603[4 * v600];
            *v627 = v618;
            v627[1] = v619;
            v572 += 4;
          }
          while (v572 != v571);
LABEL_158:
          v565 = *(unsigned int *)(a1 + 3732);
        }
        ++v566;
        ++v567;
      }
      while (v566 < v565);
    }
    v677 = *(unsigned int *)(a1 + 4740);
    if ((_DWORD)v677)
    {
      v678 = 0;
      v679 = *(unsigned int **)(a1 + 10568);
      do
      {
        v680 = *(_QWORD *)(*(_QWORD *)(a1 + 4848) + 8 * v678);
        if (v680)
        {
          v681 = *(_QWORD *)(a1 + 4816);
          v682 = (*(_DWORD *)(a1 + 4840) * v678);
          v683 = (unsigned int *)(v681 + 16 * (v680 + v682));
          v684 = (unsigned int *)(v681 + 16 * v682);
          do
          {
            while (1)
            {
              v686 = *v679;
              v687 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v684);
              v688 = (int8x16_t *)(*(_QWORD *)(a1 + 4744) + 8 * *((_QWORD *)v684 + 1));
              v689 = *v6;
              v690 = *(_QWORD *)(a1 + 20040);
              v692 = *v688;
              v691 = v688[1];
              if (*v679 >= v687)
                break;
              v685 = (_QWORD *)(v690 + 8 * (v686 + (_DWORD)v689 * v687));
              *v685 = v692.i64[0];
              v685[v689] = vextq_s8(v692, v692, 8uLL).u64[0];
              v685[2 * v689] = v691.i64[0];
              v685[3 * v689] = vextq_s8(v691, v691, 8uLL).u64[0];
              v684 += 4;
              if (v684 == v683)
                goto LABEL_178;
            }
            v693 = (int8x16_t *)(v690 + 8 * (v687 + (_DWORD)v689 * v686));
            *v693 = v692;
            v693[1] = v691;
            v684 += 4;
          }
          while (v684 != v683);
LABEL_178:
          v677 = *(unsigned int *)(a1 + 4740);
        }
        ++v678;
        ++v679;
      }
      while (v678 < v677);
    }
    v757 = *(unsigned int *)(a1 + 5748);
    if ((_DWORD)v757)
    {
      v758 = 0;
      v759 = *(unsigned int **)(a1 + 10592);
      do
      {
        v760 = *(_QWORD *)(*(_QWORD *)(a1 + 5856) + 8 * v758);
        if (v760)
        {
          v761 = *(_QWORD *)(a1 + 5824);
          v762 = (*(_DWORD *)(a1 + 5848) * v758);
          v763 = (unsigned int *)(v761 + 16 * (v760 + v762));
          v764 = (unsigned int *)(v761 + 16 * v762);
          do
          {
            while (1)
            {
              v784 = *v759;
              v785 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v764);
              v786 = *(_QWORD *)(a1 + 5752) + 8 * *((_QWORD *)v764 + 1);
              v787 = *v6;
              v788 = *(_QWORD *)(a1 + 20040);
              if (*v759 >= v785)
                break;
              v765 = (int64x2_t *)(v788 + 8 * (v784 + (_DWORD)v787 * v785));
              v766 = *(int64x2_t *)(v786 + 16);
              v768 = *(int64x2_t *)(v786 + 32);
              v767 = *(int64x2_t *)(v786 + 48);
              v770 = *(int64x2_t *)(v786 + 64);
              v769 = *(int64x2_t *)(v786 + 80);
              v772 = *(int64x2_t *)(v786 + 128);
              v771 = *(int64x2_t *)(v786 + 144);
              v773 = vzip1q_s64(*(int64x2_t *)v786, v768);
              v774 = vzip1q_s64(v770, *(int64x2_t *)(v786 + 96));
              v775 = vzip1q_s64(v772, *(int64x2_t *)(v786 + 160));
              v770.i64[0] = vdupq_laneq_s64(v770, 1).u64[0];
              v770.i64[1] = *(_QWORD *)(v786 + 104);
              v776.i64[0] = vdupq_laneq_s64(v772, 1).u64[0];
              v777 = vzip2q_s64(*(int64x2_t *)v786, v768);
              v776.i64[1] = *(_QWORD *)(v786 + 168);
              v778 = vzip1q_s64(v769, *(int64x2_t *)(v786 + 112));
              v779 = vzip1q_s64(v771, *(int64x2_t *)(v786 + 176));
              v769.i64[0] = vdupq_laneq_s64(v769, 1).u64[0];
              v769.i64[1] = *(_QWORD *)(v786 + 120);
              v780.i64[0] = vdupq_laneq_s64(v771, 1).u64[0];
              v780.i64[1] = *(_QWORD *)(v786 + 184);
              v765[1] = v774;
              v765[2] = v775;
              *v765 = v773;
              v781 = (int64x2_t *)((char *)v765 + 8 * v787);
              v781[1] = v770;
              v781[2] = v776;
              *v781 = v777;
              v782 = &v765[v787];
              v782[1] = v778;
              v782[2] = v779;
              *v782 = vzip1q_s64(v766, v767);
              v783 = (int64x2_t *)((char *)v765 + 24 * v787);
              v783[1] = v769;
              v783[2] = v780;
              *v783 = vzip2q_s64(v766, v767);
              v764 += 4;
              if (v764 == v763)
                goto LABEL_198;
            }
            v789 = *(_OWORD *)(v786 + 16);
            v790 = (_OWORD *)(v788 + 8 * (v785 + (_DWORD)v787 * v784));
            v791 = *(_OWORD *)(v786 + 32);
            v792 = *(_OWORD *)(v786 + 48);
            v793 = *(_OWORD *)(v786 + 64);
            v794 = *(_OWORD *)(v786 + 80);
            v795 = *(_OWORD *)(v786 + 96);
            v796 = *(_OWORD *)(v786 + 112);
            v797 = *(_OWORD *)(v786 + 128);
            v798 = *(_OWORD *)(v786 + 144);
            v799 = *(_OWORD *)(v786 + 160);
            v800 = *(_OWORD *)(v786 + 176);
            *v790 = *(_OWORD *)v786;
            v790[1] = v789;
            v801 = (_OWORD *)((char *)v790 + 8 * v787);
            *v801 = v791;
            v801[1] = v792;
            v802 = &v790[v787];
            *v802 = v793;
            v802[1] = v794;
            v803 = (_OWORD *)((char *)v790 + 24 * v787);
            *v803 = v795;
            v803[1] = v796;
            v804 = &v790[2 * v787];
            *v804 = v797;
            v804[1] = v798;
            v805 = (_OWORD *)((char *)v790 + 40 * v787);
            *v805 = v799;
            v805[1] = v800;
            v764 += 4;
          }
          while (v764 != v763);
LABEL_198:
          v757 = *(unsigned int *)(a1 + 5748);
        }
        ++v758;
        ++v759;
      }
      while (v758 < v757);
    }
    v823 = *(unsigned int *)(a1 + 6756);
    if ((_DWORD)v823)
    {
      v824 = 0;
      v825 = *(unsigned int **)(a1 + 10616);
      do
      {
        v826 = *(_QWORD *)(*(_QWORD *)(a1 + 6864) + 8 * v824);
        if (v826)
        {
          v827 = *(_QWORD *)(a1 + 6832);
          v828 = (*(_DWORD *)(a1 + 6856) * v824);
          v829 = (unsigned int *)(v827 + 16 * (v826 + v828));
          v830 = (unsigned int *)(v827 + 16 * v828);
          do
          {
            v847 = *v825;
            v848 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v830);
            v849 = *(_QWORD *)(a1 + 6760) + 8 * *((_QWORD *)v830 + 1);
            v850 = *v6;
            v851 = *(_QWORD *)(a1 + 20040);
            if (*v825 < v848)
            {
              v831 = (int64x2_t *)(v851 + 8 * (v847 + (_DWORD)v850 * v848));
              v832 = *(int64x2_t *)(v849 + 16);
              v833 = *(int64x2_t *)(v849 + 32);
              v834 = *(int64x2_t *)(v849 + 48);
              v836 = *(int64x2_t *)(v849 + 64);
              v835 = *(int64x2_t *)(v849 + 80);
              v837 = vzip1q_s64(*(int64x2_t *)v849, v833);
              v838 = vzip1q_s64(v836, *(int64x2_t *)(v849 + 96));
              v839 = vzip2q_s64(*(int64x2_t *)v849, v833);
              v836.i64[0] = vdupq_laneq_s64(v836, 1).u64[0];
              v836.i64[1] = *(_QWORD *)(v849 + 104);
              v840 = vzip1q_s64(v832, v834);
              v841 = vzip1q_s64(v835, *(int64x2_t *)(v849 + 112));
              v842.i64[0] = vdupq_laneq_s64(v835, 1).u64[0];
              v842.i64[1] = *(_QWORD *)(v849 + 120);
              v843 = vzip2q_s64(v832, v834);
              *v831 = v837;
              v831[1] = v838;
              v844 = (int64x2_t *)((char *)v831 + 8 * v850);
              *v844 = v839;
              v844[1] = v836;
            }
            else
            {
              v852 = *(int64x2_t *)(v849 + 16);
              v831 = (int64x2_t *)(v851 + 8 * (v848 + (_DWORD)v850 * v847));
              v853 = *(_OWORD *)(v849 + 32);
              v854 = *(_OWORD *)(v849 + 48);
              v840 = *(int64x2_t *)(v849 + 64);
              v841 = *(int64x2_t *)(v849 + 80);
              v843 = *(int64x2_t *)(v849 + 96);
              v842 = *(int64x2_t *)(v849 + 112);
              *v831 = *(int64x2_t *)v849;
              v831[1] = v852;
              v855 = &v831->i8[8 * v850];
              *(_OWORD *)v855 = v853;
              *((_OWORD *)v855 + 1) = v854;
            }
            v845 = &v831[v850];
            *v845 = v840;
            v845[1] = v841;
            v846 = (int64x2_t *)((char *)v831 + 24 * v850);
            *v846 = v843;
            v846[1] = v842;
            v830 += 4;
          }
          while (v830 != v829);
          v823 = *(unsigned int *)(a1 + 6756);
        }
        ++v824;
        ++v825;
      }
      while (v824 < v823);
    }
    v905 = *(unsigned int *)(a1 + 7764);
    if ((_DWORD)v905)
    {
      v906 = 0;
      v907 = *(unsigned int **)(a1 + 10640);
      do
      {
        v908 = *(_QWORD *)(*(_QWORD *)(a1 + 7872) + 8 * v906);
        if (v908)
        {
          v909 = *(_QWORD *)(a1 + 7840);
          v910 = (*(_DWORD *)(a1 + 7864) * v906);
          v911 = (unsigned int *)(v909 + 16 * (v908 + v910));
          v912 = (unsigned int *)(v909 + 16 * v910);
          do
          {
            v929 = *v907;
            v930 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v912);
            v931 = *(_QWORD *)(a1 + 7768) + 8 * *((_QWORD *)v912 + 1);
            v932 = *v6;
            v933 = *(_QWORD *)(a1 + 20040);
            if (*v907 < v930)
            {
              v913 = (int64x2_t *)(v933 + 8 * (v929 + (_DWORD)v932 * v930));
              v914 = *(int64x2_t *)(v931 + 16);
              v915 = *(int64x2_t *)(v931 + 32);
              v916 = *(int64x2_t *)(v931 + 48);
              v918 = *(int64x2_t *)(v931 + 64);
              v917 = *(int64x2_t *)(v931 + 80);
              v919 = vzip1q_s64(*(int64x2_t *)v931, v915);
              v920 = vzip1q_s64(v918, *(int64x2_t *)(v931 + 96));
              v921 = vzip2q_s64(*(int64x2_t *)v931, v915);
              v918.i64[0] = vdupq_laneq_s64(v918, 1).u64[0];
              v918.i64[1] = *(_QWORD *)(v931 + 104);
              v922 = vzip1q_s64(v914, v916);
              v923 = vzip1q_s64(v917, *(int64x2_t *)(v931 + 112));
              v924.i64[0] = vdupq_laneq_s64(v917, 1).u64[0];
              v924.i64[1] = *(_QWORD *)(v931 + 120);
              v925 = vzip2q_s64(v914, v916);
              *v913 = v919;
              v913[1] = v920;
              v926 = (int64x2_t *)((char *)v913 + 8 * v932);
              *v926 = v921;
              v926[1] = v918;
            }
            else
            {
              v934 = *(int64x2_t *)(v931 + 16);
              v913 = (int64x2_t *)(v933 + 8 * (v930 + (_DWORD)v932 * v929));
              v935 = *(_OWORD *)(v931 + 32);
              v936 = *(_OWORD *)(v931 + 48);
              v922 = *(int64x2_t *)(v931 + 64);
              v923 = *(int64x2_t *)(v931 + 80);
              v925 = *(int64x2_t *)(v931 + 96);
              v924 = *(int64x2_t *)(v931 + 112);
              *v913 = *(int64x2_t *)v931;
              v913[1] = v934;
              v937 = &v913->i8[8 * v932];
              *(_OWORD *)v937 = v935;
              *((_OWORD *)v937 + 1) = v936;
            }
            v927 = &v913[v932];
            *v927 = v922;
            v927[1] = v923;
            v928 = (int64x2_t *)((char *)v913 + 24 * v932);
            *v928 = v925;
            v928[1] = v924;
            v912 += 4;
          }
          while (v912 != v911);
          v905 = *(unsigned int *)(a1 + 7764);
        }
        ++v906;
        ++v907;
      }
      while (v906 < v905);
    }
    v971 = *(unsigned int *)(a1 + 8772);
    if ((_DWORD)v971)
    {
      v972 = 0;
      v973 = *(unsigned int **)(a1 + 10664);
      do
      {
        v974 = *(_QWORD *)(*(_QWORD *)(a1 + 8880) + 8 * v972);
        if (v974)
        {
          v975 = *(_QWORD *)(a1 + 8848);
          v976 = (*(_DWORD *)(a1 + 8872) * v972);
          v977 = (unsigned int *)(v975 + 16 * (v974 + v976));
          v978 = (unsigned int *)(v975 + 16 * v976);
          do
          {
            while (1)
            {
              v990 = *v973;
              v991 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v978);
              v992 = *(_QWORD *)(a1 + 8776) + 8 * *((_QWORD *)v978 + 1);
              v993 = *v6;
              v994 = *(_QWORD *)(a1 + 20040);
              if (*v973 >= v991)
                break;
              v979 = (int64x2_t *)(v994 + 8 * (v990 + (_DWORD)v993 * v991));
              v980 = *(int64x2_t *)(v992 + 16);
              v982 = *(int64x2_t *)(v992 + 32);
              v981 = *(int64x2_t *)(v992 + 48);
              v984 = *(_OWORD *)(v992 + 64);
              v983 = *(_OWORD *)(v992 + 80);
              v985 = vzip1q_s64(*(int64x2_t *)v992, v982);
              v986 = vzip2q_s64(*(int64x2_t *)v992, v982);
              v979[1].i64[0] = v984;
              *v979 = v985;
              v987 = (int64x2_t *)((char *)v979 + 8 * v993);
              *v987 = v986;
              v987[1].i64[0] = *((_QWORD *)&v984 + 1);
              v988 = &v979[v993];
              v988[1].i64[0] = v983;
              *v988 = vzip1q_s64(v980, v981);
              v989 = (int64x2_t *)((char *)v979 + 24 * v993);
              v989[1].i64[0] = *((_QWORD *)&v983 + 1);
              *v989 = vzip2q_s64(v980, v981);
              v978 += 4;
              if (v978 == v977)
                goto LABEL_258;
            }
            v995 = *(_OWORD *)(v992 + 16);
            v996 = (_OWORD *)(v994 + 8 * (v991 + (_DWORD)v993 * v990));
            v997 = *(_OWORD *)(v992 + 32);
            v998 = *(_OWORD *)(v992 + 48);
            v999 = *(_OWORD *)(v992 + 64);
            v1000 = *(_OWORD *)(v992 + 80);
            *v996 = *(_OWORD *)v992;
            v996[1] = v995;
            v1001 = (_OWORD *)((char *)v996 + 8 * v993);
            *v1001 = v997;
            v1001[1] = v998;
            v1002 = &v996[v993];
            *v1002 = v999;
            v1002[1] = v1000;
            v978 += 4;
          }
          while (v978 != v977);
LABEL_258:
          v971 = *(unsigned int *)(a1 + 8772);
        }
        ++v972;
        ++v973;
      }
      while (v972 < v971);
    }
    v1036 = *(unsigned int *)(a1 + 2580);
    if ((_DWORD)v1036)
    {
      v1037 = 0;
      v1038 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1039 = *(_QWORD *)(*(_QWORD *)(a1 + 2688) + 8 * v1037);
        if (v1039)
        {
          v1040 = *(_QWORD *)(a1 + 2656);
          v1041 = (*(_DWORD *)(a1 + 2680) * v1037);
          v1042 = (unsigned int *)(v1040 + 16 * (v1039 + v1041));
          v1043 = (unsigned int *)(v1040 + 16 * v1041);
          do
          {
            while (1)
            {
              v1063 = *v1038;
              v1064 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1043);
              v1065 = *(_QWORD *)(a1 + 2584) + 8 * *((_QWORD *)v1043 + 1);
              v1066 = *v6;
              v1067 = *(_QWORD *)(a1 + 20040);
              if (*v1038 >= v1064)
                break;
              v1044 = (int64x2_t *)(v1067 + 8 * (v1063 + (_DWORD)v1066 * v1064));
              v1045 = *(int64x2_t *)(v1065 + 16);
              v1047 = *(int64x2_t *)(v1065 + 32);
              v1046 = *(int64x2_t *)(v1065 + 48);
              v1049 = *(int64x2_t *)(v1065 + 64);
              v1048 = *(int64x2_t *)(v1065 + 80);
              v1051 = *(int64x2_t *)(v1065 + 128);
              v1050 = *(int64x2_t *)(v1065 + 144);
              v1052 = vzip1q_s64(*(int64x2_t *)v1065, v1047);
              v1053 = vzip1q_s64(v1049, *(int64x2_t *)(v1065 + 96));
              v1054 = vzip1q_s64(v1051, *(int64x2_t *)(v1065 + 160));
              v1049.i64[0] = vdupq_laneq_s64(v1049, 1).u64[0];
              v1049.i64[1] = *(_QWORD *)(v1065 + 104);
              v1055.i64[0] = vdupq_laneq_s64(v1051, 1).u64[0];
              v1056 = vzip2q_s64(*(int64x2_t *)v1065, v1047);
              v1055.i64[1] = *(_QWORD *)(v1065 + 168);
              v1057 = vzip1q_s64(v1048, *(int64x2_t *)(v1065 + 112));
              v1058 = vzip1q_s64(v1050, *(int64x2_t *)(v1065 + 176));
              v1048.i64[0] = vdupq_laneq_s64(v1048, 1).u64[0];
              v1048.i64[1] = *(_QWORD *)(v1065 + 120);
              v1059.i64[0] = vdupq_laneq_s64(v1050, 1).u64[0];
              v1059.i64[1] = *(_QWORD *)(v1065 + 184);
              v1044[1] = v1053;
              v1044[2] = v1054;
              *v1044 = v1052;
              v1060 = (int64x2_t *)((char *)v1044 + 8 * v1066);
              v1060[1] = v1049;
              v1060[2] = v1055;
              *v1060 = v1056;
              v1061 = &v1044[v1066];
              v1061[1] = v1057;
              v1061[2] = v1058;
              *v1061 = vzip1q_s64(v1045, v1046);
              v1062 = (int64x2_t *)((char *)v1044 + 24 * v1066);
              v1062[1] = v1048;
              v1062[2] = v1059;
              *v1062 = vzip2q_s64(v1045, v1046);
              v1043 += 4;
              if (v1043 == v1042)
                goto LABEL_278;
            }
            v1068 = *(_OWORD *)(v1065 + 16);
            v1069 = (_OWORD *)(v1067 + 8 * (v1064 + (_DWORD)v1066 * v1063));
            v1070 = *(_OWORD *)(v1065 + 32);
            v1071 = *(_OWORD *)(v1065 + 48);
            v1072 = *(_OWORD *)(v1065 + 64);
            v1073 = *(_OWORD *)(v1065 + 80);
            v1074 = *(_OWORD *)(v1065 + 96);
            v1075 = *(_OWORD *)(v1065 + 112);
            v1076 = *(_OWORD *)(v1065 + 128);
            v1077 = *(_OWORD *)(v1065 + 144);
            v1078 = *(_OWORD *)(v1065 + 160);
            v1079 = *(_OWORD *)(v1065 + 176);
            *v1069 = *(_OWORD *)v1065;
            v1069[1] = v1068;
            v1080 = (_OWORD *)((char *)v1069 + 8 * v1066);
            *v1080 = v1070;
            v1080[1] = v1071;
            v1081 = &v1069[v1066];
            *v1081 = v1072;
            v1081[1] = v1073;
            v1082 = (_OWORD *)((char *)v1069 + 24 * v1066);
            *v1082 = v1074;
            v1082[1] = v1075;
            v1083 = &v1069[2 * v1066];
            *v1083 = v1076;
            v1083[1] = v1077;
            v1084 = (_OWORD *)((char *)v1069 + 40 * v1066);
            *v1084 = v1078;
            v1084[1] = v1079;
            v1043 += 4;
          }
          while (v1043 != v1042);
LABEL_278:
          v1036 = *(unsigned int *)(a1 + 2580);
        }
        ++v1037;
        ++v1038;
      }
      while (v1037 < v1036);
    }
    v1117 = *(unsigned int *)(a1 + 3588);
    if ((_DWORD)v1117)
    {
      v1118 = 0;
      v1119 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1120 = *(_QWORD *)(*(_QWORD *)(a1 + 3696) + 8 * v1118);
        if (v1120)
        {
          v1121 = *(_QWORD *)(a1 + 3664);
          v1122 = (*(_DWORD *)(a1 + 3688) * v1118);
          v1123 = (unsigned int *)(v1121 + 16 * (v1120 + v1122));
          v1124 = (unsigned int *)(v1121 + 16 * v1122);
          do
          {
            while (1)
            {
              v1149 = *v1119;
              v1150 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1124);
              v1151 = *(_QWORD *)(a1 + 3592) + 8 * *((_QWORD *)v1124 + 1);
              v1152 = *v6;
              v1153 = *(_QWORD *)(a1 + 20040);
              if (*v1119 >= v1150)
                break;
              v1125 = *(int64x2_t *)(v1151 + 16);
              v1126 = (int64x2_t *)(v1153 + 8 * (v1149 + (_DWORD)v1152 * v1150));
              v1128 = *(int64x2_t *)(v1151 + 32);
              v1127 = *(int64x2_t *)(v1151 + 48);
              v1130 = *(int64x2_t *)(v1151 + 64);
              v1129 = *(int64x2_t *)(v1151 + 80);
              v1132 = *(int64x2_t *)(v1151 + 128);
              v1131 = *(int64x2_t *)(v1151 + 144);
              v1134 = *(int64x2_t *)(v1151 + 192);
              v1133 = *(int64x2_t *)(v1151 + 208);
              v1136 = *(_OWORD *)(v1151 + 256);
              v1135 = *(_OWORD *)(v1151 + 272);
              v1137 = vzip1q_s64(*(int64x2_t *)v1151, v1128);
              v1138 = vzip1q_s64(v1130, *(int64x2_t *)(v1151 + 96));
              v1139 = vzip1q_s64(v1134, *(int64x2_t *)(v1151 + 224));
              v1140 = vzip2q_s64(*(int64x2_t *)v1151, v1128);
              v1128.i64[0] = vdupq_laneq_s64(v1130, 1).u64[0];
              v1128.i64[1] = *(_QWORD *)(v1151 + 104);
              v1130.i64[0] = vdupq_laneq_s64(v1132, 1).u64[0];
              v1130.i64[1] = *(_QWORD *)(v1151 + 168);
              v1141.i64[0] = vdupq_laneq_s64(v1134, 1).u64[0];
              v1141.i64[1] = *(_QWORD *)(v1151 + 232);
              v1142 = vzip1q_s64(v1129, *(int64x2_t *)(v1151 + 112));
              v1143 = vzip1q_s64(v1131, *(int64x2_t *)(v1151 + 176));
              v1144 = vzip1q_s64(v1133, *(int64x2_t *)(v1151 + 240));
              v1129.i64[0] = vdupq_laneq_s64(v1129, 1).u64[0];
              v1129.i64[1] = *(_QWORD *)(v1151 + 120);
              v1145.i64[0] = vdupq_laneq_s64(v1131, 1).u64[0];
              v1145.i64[1] = *(_QWORD *)(v1151 + 184);
              v1131.i64[0] = vdupq_laneq_s64(v1133, 1).u64[0];
              v1131.i64[1] = *(_QWORD *)(v1151 + 248);
              v1126[2] = vzip1q_s64(v1132, *(int64x2_t *)(v1151 + 160));
              v1126[3] = v1139;
              v1126[4].i64[0] = v1136;
              *v1126 = v1137;
              v1126[1] = v1138;
              v1146 = (int64x2_t *)((char *)v1126 + 8 * v1152);
              v1146[2] = v1130;
              v1146[3] = v1141;
              *v1146 = v1140;
              v1146[1] = v1128;
              v1146[4].i64[0] = *((_QWORD *)&v1136 + 1);
              v1147 = &v1126[v1152];
              v1147[4].i64[0] = v1135;
              v1147[2] = v1143;
              v1147[3] = v1144;
              *v1147 = vzip1q_s64(v1125, v1127);
              v1147[1] = v1142;
              v1148 = (int64x2_t *)((char *)v1126 + 24 * v1152);
              v1148[4].i64[0] = *((_QWORD *)&v1135 + 1);
              v1148[2] = v1145;
              v1148[3] = v1131;
              *v1148 = vzip2q_s64(v1125, v1127);
              v1148[1] = v1129;
              v1124 += 4;
              if (v1124 == v1123)
                goto LABEL_298;
            }
            v1154 = *(_OWORD *)(v1151 + 16);
            v1155 = (_OWORD *)(v1153 + 8 * (v1150 + (_DWORD)v1152 * v1149));
            v1156 = *(_OWORD *)(v1151 + 32);
            v1157 = *(_OWORD *)(v1151 + 48);
            v1158 = *(_OWORD *)(v1151 + 64);
            v1159 = *(_OWORD *)(v1151 + 80);
            v1160 = *(_OWORD *)(v1151 + 96);
            v1161 = *(_OWORD *)(v1151 + 112);
            v1162 = *(_OWORD *)(v1151 + 128);
            v1163 = *(_OWORD *)(v1151 + 144);
            v1164 = *(_OWORD *)(v1151 + 160);
            v1165 = *(_OWORD *)(v1151 + 176);
            v1166 = *(_OWORD *)(v1151 + 192);
            v1167 = *(_OWORD *)(v1151 + 208);
            v1168 = *(_OWORD *)(v1151 + 224);
            v1169 = *(_OWORD *)(v1151 + 240);
            v1170 = *(_OWORD *)(v1151 + 256);
            v1171 = *(_OWORD *)(v1151 + 272);
            *v1155 = *(_OWORD *)v1151;
            v1155[1] = v1154;
            v1172 = (_OWORD *)((char *)v1155 + 8 * v1152);
            *v1172 = v1156;
            v1172[1] = v1157;
            v1173 = &v1155[v1152];
            *v1173 = v1158;
            v1173[1] = v1159;
            v1174 = (_OWORD *)((char *)v1155 + 24 * v1152);
            *v1174 = v1160;
            v1174[1] = v1161;
            v1175 = &v1155[2 * v1152];
            *v1175 = v1162;
            v1175[1] = v1163;
            v1176 = (_OWORD *)((char *)v1155 + 40 * v1152);
            *v1176 = v1164;
            v1176[1] = v1165;
            v1177 = &v1155[3 * v1152];
            *v1177 = v1166;
            v1177[1] = v1167;
            v1178 = (_OWORD *)((char *)v1155 + 56 * v1152);
            *v1178 = v1168;
            v1178[1] = v1169;
            v1179 = &v1155[4 * v1152];
            *v1179 = v1170;
            v1179[1] = v1171;
            v1124 += 4;
          }
          while (v1124 != v1123);
LABEL_298:
          v1117 = *(unsigned int *)(a1 + 3588);
        }
        ++v1118;
        ++v1119;
      }
      while (v1118 < v1117);
    }
    v1229 = *(unsigned int *)(a1 + 4596);
    if ((_DWORD)v1229)
    {
      v1230 = 0;
      v1231 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1232 = *(_QWORD *)(*(_QWORD *)(a1 + 4704) + 8 * v1230);
        if (v1232)
        {
          v1233 = *(_QWORD *)(a1 + 4672);
          v1234 = (*(_DWORD *)(a1 + 4696) * v1230);
          v1235 = (unsigned int *)(v1233 + 16 * (v1232 + v1234));
          v1236 = (unsigned int *)(v1233 + 16 * v1234);
          do
          {
            while (1)
            {
              v1238 = *v1231;
              v1239 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1236);
              v1240 = (int8x16_t *)(*(_QWORD *)(a1 + 4600) + 8 * *((_QWORD *)v1236 + 1));
              v1241 = *v6;
              v1242 = *(_QWORD *)(a1 + 20040);
              v1244 = *v1240;
              v1243 = v1240[1];
              if (*v1231 >= v1239)
                break;
              v1237 = (_QWORD *)(v1242 + 8 * (v1238 + (_DWORD)v1241 * v1239));
              *v1237 = v1244.i64[0];
              v1237[v1241] = vextq_s8(v1244, v1244, 8uLL).u64[0];
              v1237[2 * v1241] = v1243.i64[0];
              v1237[3 * v1241] = vextq_s8(v1243, v1243, 8uLL).u64[0];
              v1236 += 4;
              if (v1236 == v1235)
                goto LABEL_318;
            }
            v1245 = (int8x16_t *)(v1242 + 8 * (v1239 + (_DWORD)v1241 * v1238));
            *v1245 = v1244;
            v1245[1] = v1243;
            v1236 += 4;
          }
          while (v1236 != v1235);
LABEL_318:
          v1229 = *(unsigned int *)(a1 + 4596);
        }
        ++v1230;
        ++v1231;
      }
      while (v1230 < v1229);
    }
    v1309 = *(unsigned int *)(a1 + 5604);
    if ((_DWORD)v1309)
    {
      v1310 = 0;
      v1311 = *(unsigned int **)(a1 + 10592);
      do
      {
        v1312 = *(_QWORD *)(*(_QWORD *)(a1 + 5712) + 8 * v1310);
        if (v1312)
        {
          v1313 = *(_QWORD *)(a1 + 5680);
          v1314 = (*(_DWORD *)(a1 + 5704) * v1310);
          v1315 = (unsigned int *)(v1313 + 16 * (v1312 + v1314));
          v1316 = (unsigned int *)(v1313 + 16 * v1314);
          do
          {
            while (1)
            {
              v1336 = *v1311;
              v1337 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1316);
              v1338 = *(_QWORD *)(a1 + 5608) + 8 * *((_QWORD *)v1316 + 1);
              v1339 = *v6;
              v1340 = *(_QWORD *)(a1 + 20040);
              if (*v1311 >= v1337)
                break;
              v1317 = (int64x2_t *)(v1340 + 8 * (v1336 + (_DWORD)v1339 * v1337));
              v1318 = *(int64x2_t *)(v1338 + 16);
              v1320 = *(int64x2_t *)(v1338 + 32);
              v1319 = *(int64x2_t *)(v1338 + 48);
              v1322 = *(int64x2_t *)(v1338 + 64);
              v1321 = *(int64x2_t *)(v1338 + 80);
              v1324 = *(int64x2_t *)(v1338 + 128);
              v1323 = *(int64x2_t *)(v1338 + 144);
              v1325 = vzip1q_s64(*(int64x2_t *)v1338, v1320);
              v1326 = vzip1q_s64(v1322, *(int64x2_t *)(v1338 + 96));
              v1327 = vzip1q_s64(v1324, *(int64x2_t *)(v1338 + 160));
              v1322.i64[0] = vdupq_laneq_s64(v1322, 1).u64[0];
              v1322.i64[1] = *(_QWORD *)(v1338 + 104);
              v1328.i64[0] = vdupq_laneq_s64(v1324, 1).u64[0];
              v1329 = vzip2q_s64(*(int64x2_t *)v1338, v1320);
              v1328.i64[1] = *(_QWORD *)(v1338 + 168);
              v1330 = vzip1q_s64(v1321, *(int64x2_t *)(v1338 + 112));
              v1331 = vzip1q_s64(v1323, *(int64x2_t *)(v1338 + 176));
              v1321.i64[0] = vdupq_laneq_s64(v1321, 1).u64[0];
              v1321.i64[1] = *(_QWORD *)(v1338 + 120);
              v1332.i64[0] = vdupq_laneq_s64(v1323, 1).u64[0];
              v1332.i64[1] = *(_QWORD *)(v1338 + 184);
              v1317[1] = v1326;
              v1317[2] = v1327;
              *v1317 = v1325;
              v1333 = (int64x2_t *)((char *)v1317 + 8 * v1339);
              v1333[1] = v1322;
              v1333[2] = v1328;
              *v1333 = v1329;
              v1334 = &v1317[v1339];
              v1334[1] = v1330;
              v1334[2] = v1331;
              *v1334 = vzip1q_s64(v1318, v1319);
              v1335 = (int64x2_t *)((char *)v1317 + 24 * v1339);
              v1335[1] = v1321;
              v1335[2] = v1332;
              *v1335 = vzip2q_s64(v1318, v1319);
              v1316 += 4;
              if (v1316 == v1315)
                goto LABEL_338;
            }
            v1341 = *(_OWORD *)(v1338 + 16);
            v1342 = (_OWORD *)(v1340 + 8 * (v1337 + (_DWORD)v1339 * v1336));
            v1343 = *(_OWORD *)(v1338 + 32);
            v1344 = *(_OWORD *)(v1338 + 48);
            v1345 = *(_OWORD *)(v1338 + 64);
            v1346 = *(_OWORD *)(v1338 + 80);
            v1347 = *(_OWORD *)(v1338 + 96);
            v1348 = *(_OWORD *)(v1338 + 112);
            v1349 = *(_OWORD *)(v1338 + 128);
            v1350 = *(_OWORD *)(v1338 + 144);
            v1351 = *(_OWORD *)(v1338 + 160);
            v1352 = *(_OWORD *)(v1338 + 176);
            *v1342 = *(_OWORD *)v1338;
            v1342[1] = v1341;
            v1353 = (_OWORD *)((char *)v1342 + 8 * v1339);
            *v1353 = v1343;
            v1353[1] = v1344;
            v1354 = &v1342[v1339];
            *v1354 = v1345;
            v1354[1] = v1346;
            v1355 = (_OWORD *)((char *)v1342 + 24 * v1339);
            *v1355 = v1347;
            v1355[1] = v1348;
            v1356 = &v1342[2 * v1339];
            *v1356 = v1349;
            v1356[1] = v1350;
            v1357 = (_OWORD *)((char *)v1342 + 40 * v1339);
            *v1357 = v1351;
            v1357[1] = v1352;
            v1316 += 4;
          }
          while (v1316 != v1315);
LABEL_338:
          v1309 = *(unsigned int *)(a1 + 5604);
        }
        ++v1310;
        ++v1311;
      }
      while (v1310 < v1309);
    }
    v1375 = *(unsigned int *)(a1 + 6612);
    if ((_DWORD)v1375)
    {
      v1376 = 0;
      v1377 = *(unsigned int **)(a1 + 10616);
      do
      {
        v1378 = *(_QWORD *)(*(_QWORD *)(a1 + 6720) + 8 * v1376);
        if (v1378)
        {
          v1379 = *(_QWORD *)(a1 + 6688);
          v1380 = (*(_DWORD *)(a1 + 6712) * v1376);
          v1381 = (unsigned int *)(v1379 + 16 * (v1378 + v1380));
          v1382 = (unsigned int *)(v1379 + 16 * v1380);
          do
          {
            v1399 = *v1377;
            v1400 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1382);
            v1401 = *(_QWORD *)(a1 + 6616) + 8 * *((_QWORD *)v1382 + 1);
            v1402 = *v6;
            v1403 = *(_QWORD *)(a1 + 20040);
            if (*v1377 < v1400)
            {
              v1383 = (int64x2_t *)(v1403 + 8 * (v1399 + (_DWORD)v1402 * v1400));
              v1384 = *(int64x2_t *)(v1401 + 16);
              v1385 = *(int64x2_t *)(v1401 + 32);
              v1386 = *(int64x2_t *)(v1401 + 48);
              v1388 = *(int64x2_t *)(v1401 + 64);
              v1387 = *(int64x2_t *)(v1401 + 80);
              v1389 = vzip1q_s64(*(int64x2_t *)v1401, v1385);
              v1390 = vzip1q_s64(v1388, *(int64x2_t *)(v1401 + 96));
              v1391 = vzip2q_s64(*(int64x2_t *)v1401, v1385);
              v1388.i64[0] = vdupq_laneq_s64(v1388, 1).u64[0];
              v1388.i64[1] = *(_QWORD *)(v1401 + 104);
              v1392 = vzip1q_s64(v1384, v1386);
              v1393 = vzip1q_s64(v1387, *(int64x2_t *)(v1401 + 112));
              v1394.i64[0] = vdupq_laneq_s64(v1387, 1).u64[0];
              v1394.i64[1] = *(_QWORD *)(v1401 + 120);
              v1395 = vzip2q_s64(v1384, v1386);
              *v1383 = v1389;
              v1383[1] = v1390;
              v1396 = (int64x2_t *)((char *)v1383 + 8 * v1402);
              *v1396 = v1391;
              v1396[1] = v1388;
            }
            else
            {
              v1404 = *(int64x2_t *)(v1401 + 16);
              v1383 = (int64x2_t *)(v1403 + 8 * (v1400 + (_DWORD)v1402 * v1399));
              v1405 = *(_OWORD *)(v1401 + 32);
              v1406 = *(_OWORD *)(v1401 + 48);
              v1392 = *(int64x2_t *)(v1401 + 64);
              v1393 = *(int64x2_t *)(v1401 + 80);
              v1395 = *(int64x2_t *)(v1401 + 96);
              v1394 = *(int64x2_t *)(v1401 + 112);
              *v1383 = *(int64x2_t *)v1401;
              v1383[1] = v1404;
              v1407 = &v1383->i8[8 * v1402];
              *(_OWORD *)v1407 = v1405;
              *((_OWORD *)v1407 + 1) = v1406;
            }
            v1397 = &v1383[v1402];
            *v1397 = v1392;
            v1397[1] = v1393;
            v1398 = (int64x2_t *)((char *)v1383 + 24 * v1402);
            *v1398 = v1395;
            v1398[1] = v1394;
            v1382 += 4;
          }
          while (v1382 != v1381);
          v1375 = *(unsigned int *)(a1 + 6612);
        }
        ++v1376;
        ++v1377;
      }
      while (v1376 < v1375);
    }
    v1457 = *(unsigned int *)(a1 + 7620);
    if ((_DWORD)v1457)
    {
      v1458 = 0;
      v1459 = *(unsigned int **)(a1 + 10640);
      do
      {
        v1460 = *(_QWORD *)(*(_QWORD *)(a1 + 7728) + 8 * v1458);
        if (v1460)
        {
          v1461 = *(_QWORD *)(a1 + 7696);
          v1462 = (*(_DWORD *)(a1 + 7720) * v1458);
          v1463 = (unsigned int *)(v1461 + 16 * (v1460 + v1462));
          v1464 = (unsigned int *)(v1461 + 16 * v1462);
          do
          {
            v1481 = *v1459;
            v1482 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1464);
            v1483 = *(_QWORD *)(a1 + 7624) + 8 * *((_QWORD *)v1464 + 1);
            v1484 = *v6;
            v1485 = *(_QWORD *)(a1 + 20040);
            if (*v1459 < v1482)
            {
              v1465 = (int64x2_t *)(v1485 + 8 * (v1481 + (_DWORD)v1484 * v1482));
              v1466 = *(int64x2_t *)(v1483 + 16);
              v1467 = *(int64x2_t *)(v1483 + 32);
              v1468 = *(int64x2_t *)(v1483 + 48);
              v1470 = *(int64x2_t *)(v1483 + 64);
              v1469 = *(int64x2_t *)(v1483 + 80);
              v1471 = vzip1q_s64(*(int64x2_t *)v1483, v1467);
              v1472 = vzip1q_s64(v1470, *(int64x2_t *)(v1483 + 96));
              v1473 = vzip2q_s64(*(int64x2_t *)v1483, v1467);
              v1470.i64[0] = vdupq_laneq_s64(v1470, 1).u64[0];
              v1470.i64[1] = *(_QWORD *)(v1483 + 104);
              v1474 = vzip1q_s64(v1466, v1468);
              v1475 = vzip1q_s64(v1469, *(int64x2_t *)(v1483 + 112));
              v1476.i64[0] = vdupq_laneq_s64(v1469, 1).u64[0];
              v1476.i64[1] = *(_QWORD *)(v1483 + 120);
              v1477 = vzip2q_s64(v1466, v1468);
              *v1465 = v1471;
              v1465[1] = v1472;
              v1478 = (int64x2_t *)((char *)v1465 + 8 * v1484);
              *v1478 = v1473;
              v1478[1] = v1470;
            }
            else
            {
              v1486 = *(int64x2_t *)(v1483 + 16);
              v1465 = (int64x2_t *)(v1485 + 8 * (v1482 + (_DWORD)v1484 * v1481));
              v1487 = *(_OWORD *)(v1483 + 32);
              v1488 = *(_OWORD *)(v1483 + 48);
              v1474 = *(int64x2_t *)(v1483 + 64);
              v1475 = *(int64x2_t *)(v1483 + 80);
              v1477 = *(int64x2_t *)(v1483 + 96);
              v1476 = *(int64x2_t *)(v1483 + 112);
              *v1465 = *(int64x2_t *)v1483;
              v1465[1] = v1486;
              v1489 = &v1465->i8[8 * v1484];
              *(_OWORD *)v1489 = v1487;
              *((_OWORD *)v1489 + 1) = v1488;
            }
            v1479 = &v1465[v1484];
            *v1479 = v1474;
            v1479[1] = v1475;
            v1480 = (int64x2_t *)((char *)v1465 + 24 * v1484);
            *v1480 = v1477;
            v1480[1] = v1476;
            v1464 += 4;
          }
          while (v1464 != v1463);
          v1457 = *(unsigned int *)(a1 + 7620);
        }
        ++v1458;
        ++v1459;
      }
      while (v1458 < v1457);
    }
    v1523 = *(unsigned int *)(a1 + 8628);
    if ((_DWORD)v1523)
    {
      v1524 = 0;
      v1525 = *(unsigned int **)(a1 + 10664);
      do
      {
        v1526 = *(_QWORD *)(*(_QWORD *)(a1 + 8736) + 8 * v1524);
        if (v1526)
        {
          v1527 = *(_QWORD *)(a1 + 8704);
          v1528 = (*(_DWORD *)(a1 + 8728) * v1524);
          v1529 = (unsigned int *)(v1527 + 16 * (v1526 + v1528));
          v1530 = (unsigned int *)(v1527 + 16 * v1528);
          do
          {
            while (1)
            {
              v1542 = *v1525;
              v1543 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1530);
              v1544 = *(_QWORD *)(a1 + 8632) + 8 * *((_QWORD *)v1530 + 1);
              v1545 = *v6;
              v1546 = *(_QWORD *)(a1 + 20040);
              if (*v1525 >= v1543)
                break;
              v1531 = (int64x2_t *)(v1546 + 8 * (v1542 + (_DWORD)v1545 * v1543));
              v1532 = *(int64x2_t *)(v1544 + 16);
              v1534 = *(int64x2_t *)(v1544 + 32);
              v1533 = *(int64x2_t *)(v1544 + 48);
              v1536 = *(_OWORD *)(v1544 + 64);
              v1535 = *(_OWORD *)(v1544 + 80);
              v1537 = vzip1q_s64(*(int64x2_t *)v1544, v1534);
              v1538 = vzip2q_s64(*(int64x2_t *)v1544, v1534);
              v1531[1].i64[0] = v1536;
              *v1531 = v1537;
              v1539 = (int64x2_t *)((char *)v1531 + 8 * v1545);
              *v1539 = v1538;
              v1539[1].i64[0] = *((_QWORD *)&v1536 + 1);
              v1540 = &v1531[v1545];
              v1540[1].i64[0] = v1535;
              *v1540 = vzip1q_s64(v1532, v1533);
              v1541 = (int64x2_t *)((char *)v1531 + 24 * v1545);
              v1541[1].i64[0] = *((_QWORD *)&v1535 + 1);
              *v1541 = vzip2q_s64(v1532, v1533);
              v1530 += 4;
              if (v1530 == v1529)
                goto LABEL_398;
            }
            v1547 = *(_OWORD *)(v1544 + 16);
            v1548 = (_OWORD *)(v1546 + 8 * (v1543 + (_DWORD)v1545 * v1542));
            v1549 = *(_OWORD *)(v1544 + 32);
            v1550 = *(_OWORD *)(v1544 + 48);
            v1551 = *(_OWORD *)(v1544 + 64);
            v1552 = *(_OWORD *)(v1544 + 80);
            *v1548 = *(_OWORD *)v1544;
            v1548[1] = v1547;
            v1553 = (_OWORD *)((char *)v1548 + 8 * v1545);
            *v1553 = v1549;
            v1553[1] = v1550;
            v1554 = &v1548[v1545];
            *v1554 = v1551;
            v1554[1] = v1552;
            v1530 += 4;
          }
          while (v1530 != v1529);
LABEL_398:
          v1523 = *(unsigned int *)(a1 + 8628);
        }
        ++v1524;
        ++v1525;
      }
      while (v1524 < v1523);
    }
    v1588 = *(unsigned int *)(a1 + 2436);
    if ((_DWORD)v1588)
    {
      v1589 = 0;
      v1590 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1591 = *(_QWORD *)(*(_QWORD *)(a1 + 2544) + 8 * v1589);
        if (v1591)
        {
          v1592 = *(_QWORD *)(a1 + 2512);
          v1593 = (*(_DWORD *)(a1 + 2536) * v1589);
          v1594 = (unsigned int *)(v1592 + 16 * (v1591 + v1593));
          v1595 = (unsigned int *)(v1592 + 16 * v1593);
          do
          {
            v1643 = *v1590;
            v1644 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1595);
            v1645 = *(_QWORD *)(a1 + 2440) + 8 * *((_QWORD *)v1595 + 1);
            v1646 = *v6;
            v1647 = *(_QWORD *)(a1 + 20040);
            if (*v1590 < v1644)
            {
              v1596 = (int64x2_t *)(v1647 + 8 * (v1643 + (_DWORD)v1646 * v1644));
              v1597 = *(int64x2_t *)(v1645 + 16);
              v1598 = *(int64x2_t *)(v1645 + 64);
              v1599 = *(int64x2_t *)(v1645 + 80);
              v1601 = *(int64x2_t *)(v1645 + 32);
              v1600 = *(int64x2_t *)(v1645 + 48);
              v1602 = *(int64x2_t *)(v1645 + 96);
              v1603 = *(int64x2_t *)(v1645 + 112);
              v1604 = *(int64x2_t *)(v1645 + 128);
              v1606 = *(int64x2_t *)(v1645 + 192);
              v1605 = *(int64x2_t *)(v1645 + 208);
              v1607 = *(int64x2_t *)(v1645 + 224);
              v1608 = vzip1q_s64(*(int64x2_t *)v1645, v1600);
              v1609 = vzip1q_s64(v1602, *(int64x2_t *)(v1645 + 144));
              v1610 = vzip1q_s64(v1606, *(int64x2_t *)(v1645 + 240));
              v1611.i64[0] = vdupq_laneq_s64(v1602, 1).u64[0];
              v1611.i64[1] = *(_QWORD *)(v1645 + 152);
              v1612 = vzip2q_s64(*(int64x2_t *)v1645, v1600);
              v1613.i64[0] = vdupq_laneq_s64(v1606, 1).u64[0];
              v1613.i64[1] = *(_QWORD *)(v1645 + 248);
              v1614 = (int8x16_t)vzip1q_s64(v1597, v1598);
              v1615 = (int8x16_t)vzip1q_s64(v1603, *(int64x2_t *)(v1645 + 160));
              v1616 = (int8x16_t)vzip1q_s64(v1605, *(int64x2_t *)(v1645 + 256));
              v1617 = vextq_s8(v1616, v1616, 8uLL).u64[0];
              v1618 = vextq_s8(v1615, v1615, 8uLL).u64[0];
              v1619 = vextq_s8(v1614, v1614, 8uLL).u64[0];
              v1620 = (int8x16_t)vzip2q_s64(v1597, v1598);
              v1621.i64[0] = vdupq_laneq_s64(v1603, 1).u64[0];
              v1621.i64[1] = *(_QWORD *)(v1645 + 168);
              v1622.i64[0] = vdupq_laneq_s64(v1605, 1).u64[0];
              v1622.i64[1] = *(_QWORD *)(v1645 + 264);
              v1623 = vextq_s8(v1620, v1620, 8uLL).u64[0];
              v1624 = vextq_s8(v1622, v1622, 8uLL).u64[0];
              v1625 = vextq_s8(v1621, v1621, 8uLL).u64[0];
              v1626 = (int8x16_t)vzip1q_s64(v1601, v1599);
              v1627 = (int8x16_t)vzip1q_s64(v1604, *(int64x2_t *)(v1645 + 176));
              v1628 = (int8x16_t)vzip1q_s64(v1607, *(int64x2_t *)(v1645 + 272));
              v1629 = vextq_s8(v1628, v1628, 8uLL).u64[0];
              v1630 = vextq_s8(v1627, v1627, 8uLL).u64[0];
              v1631 = vextq_s8(v1626, v1626, 8uLL).u64[0];
              v1632 = (int8x16_t)vzip2q_s64(v1601, v1599);
              v1633.i64[0] = vdupq_laneq_s64(v1604, 1).u64[0];
              v1633.i64[1] = *(_QWORD *)(v1645 + 184);
              v1634.i64[0] = vdupq_laneq_s64(v1607, 1).u64[0];
              v1634.i64[1] = *(_QWORD *)(v1645 + 280);
              v1635 = vextq_s8(v1632, v1632, 8uLL).u64[0];
              v1636 = vextq_s8(v1634, v1634, 8uLL).u64[0];
              v1637 = vextq_s8(v1633, v1633, 8uLL).u64[0];
              v1596[1] = v1609;
              v1596[2] = v1610;
              *v1596 = v1608;
              v1638 = (int64x2_t *)((char *)v1596 + 8 * v1646);
              v1638[1] = v1611;
            }
            else
            {
              v1648 = *(int64x2_t *)v1645;
              v1596 = (int64x2_t *)(v1647 + 8 * (v1644 + (_DWORD)v1646 * v1643));
              v1649 = *(int64x2_t *)(v1645 + 32);
              v1612 = *(int64x2_t *)(v1645 + 48);
              v1650 = *(int64x2_t *)(v1645 + 64);
              v1613 = *(int64x2_t *)(v1645 + 80);
              v1614 = *(int8x16_t *)(v1645 + 96);
              v1615 = *(int8x16_t *)(v1645 + 112);
              v1616 = *(int8x16_t *)(v1645 + 128);
              v1620 = *(int8x16_t *)(v1645 + 144);
              v1617 = vextq_s8(v1616, v1616, 8uLL).u64[0];
              v1618 = vextq_s8(v1615, v1615, 8uLL).u64[0];
              v1619 = vextq_s8(v1614, v1614, 8uLL).u64[0];
              v1621 = *(int8x16_t *)(v1645 + 160);
              v1622 = *(int8x16_t *)(v1645 + 176);
              v1624 = vextq_s8(v1622, v1622, 8uLL).u64[0];
              v1625 = vextq_s8(v1621, v1621, 8uLL).u64[0];
              v1623 = vextq_s8(v1620, v1620, 8uLL).u64[0];
              v1626 = *(int8x16_t *)(v1645 + 192);
              v1627 = *(int8x16_t *)(v1645 + 208);
              v1628 = *(int8x16_t *)(v1645 + 224);
              v1632 = *(int8x16_t *)(v1645 + 240);
              v1629 = vextq_s8(v1628, v1628, 8uLL).u64[0];
              v1630 = vextq_s8(v1627, v1627, 8uLL).u64[0];
              v1631 = vextq_s8(v1626, v1626, 8uLL).u64[0];
              v1633 = *(int8x16_t *)(v1645 + 256);
              v1634 = *(int8x16_t *)(v1645 + 272);
              v1636 = vextq_s8(v1634, v1634, 8uLL).u64[0];
              v1637 = vextq_s8(v1633, v1633, 8uLL).u64[0];
              v1635 = vextq_s8(v1632, v1632, 8uLL).u64[0];
              v1596[1] = *(int64x2_t *)(v1645 + 16);
              v1596[2] = v1649;
              *v1596 = v1648;
              v1638 = (int64x2_t *)((char *)v1596 + 8 * v1646);
              v1638[1] = v1650;
            }
            v1638[2] = v1613;
            *v1638 = v1612;
            v1614.i64[1] = v1619;
            v1615.i64[1] = v1618;
            v1639 = (int8x16_t *)&v1596[v1646];
            *v1639 = v1614;
            v1639[1] = v1615;
            v1616.i64[1] = v1617;
            v1639[2] = v1616;
            v1622.i64[1] = v1624;
            v1640 = (int8x16_t *)((char *)v1596 + 24 * v1646);
            v1621.i64[1] = v1625;
            v1620.i64[1] = v1623;
            v1640[1] = v1621;
            v1640[2] = v1622;
            *v1640 = v1620;
            v1641 = (int8x16_t *)&v1596[2 * v1646];
            v1628.i64[1] = v1629;
            v1627.i64[1] = v1630;
            v1626.i64[1] = v1631;
            v1641[1] = v1627;
            v1641[2] = v1628;
            *v1641 = v1626;
            v1642 = (int8x16_t *)((char *)v1596 + 40 * v1646);
            v1634.i64[1] = v1636;
            v1633.i64[1] = v1637;
            v1632.i64[1] = v1635;
            v1595 += 4;
            v1642[1] = v1633;
            v1642[2] = v1634;
            *v1642 = v1632;
          }
          while (v1595 != v1594);
          v1588 = *(unsigned int *)(a1 + 2436);
        }
        ++v1589;
        ++v1590;
      }
      while (v1589 < v1588);
    }
    v1683 = *(unsigned int *)(a1 + 3444);
    if ((_DWORD)v1683)
    {
      v1684 = 0;
      v1685 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1686 = *(_QWORD *)(*(_QWORD *)(a1 + 3552) + 8 * v1684);
        if (v1686)
        {
          v1687 = *(_QWORD *)(a1 + 3520);
          v1688 = (*(_DWORD *)(a1 + 3544) * v1684);
          v1689 = (unsigned int *)(v1687 + 16 * (v1686 + v1688));
          v1690 = (unsigned int *)(v1687 + 16 * v1688);
          do
          {
            while (1)
            {
              v1725 = *v1685;
              v1726 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1690);
              v1727 = *(_QWORD *)(a1 + 3448) + 8 * *((_QWORD *)v1690 + 1);
              v1728 = *v6;
              v1729 = *(_QWORD *)(a1 + 20040);
              if (*v1685 >= v1726)
                break;
              v1691 = *(int64x2_t *)(v1727 + 16);
              v1692 = (int64x2_t *)(v1729 + 8 * (v1725 + (_DWORD)v1728 * v1726));
              v1694 = *(int64x2_t *)(v1727 + 64);
              v1693 = *(int64x2_t *)(v1727 + 80);
              v1695 = *(int64x2_t *)(v1727 + 32);
              v1696 = *(int64x2_t *)(v1727 + 48);
              v1698 = *(int64x2_t *)(v1727 + 96);
              v1697 = *(int64x2_t *)(v1727 + 112);
              v1700 = *(int64x2_t *)(v1727 + 160);
              v1699 = *(int64x2_t *)(v1727 + 176);
              v1701 = *(int64x2_t *)(v1727 + 128);
              v1702 = *(int64x2_t *)(v1727 + 144);
              v1704 = *(int64x2_t *)(v1727 + 192);
              v1703 = *(int64x2_t *)(v1727 + 208);
              v1706 = *(int64x2_t *)(v1727 + 256);
              v1705 = *(int64x2_t *)(v1727 + 272);
              v1707 = *(int64x2_t *)(v1727 + 224);
              v1708 = *(int64x2_t *)(v1727 + 240);
              v1710 = *(int64x2_t *)(v1727 + 288);
              v1709 = *(int64x2_t *)(v1727 + 304);
              v1712 = *(int64x2_t *)(v1727 + 352);
              v1711 = *(int64x2_t *)(v1727 + 368);
              v1713 = *(int64x2_t *)(v1727 + 320);
              v1714 = *(int64x2_t *)(v1727 + 336);
              v1716 = *(_OWORD *)(v1727 + 400);
              v1715 = *(_OWORD *)(v1727 + 416);
              v1717 = *(_OWORD *)(v1727 + 384);
              v1718 = vzip1q_s64(*(int64x2_t *)v1727, v1696);
              v1719 = vzip2q_s64(*(int64x2_t *)v1727, v1696);
              v1692[2] = vzip1q_s64(v1704, v1708);
              v1692[3] = vzip1q_s64(v1710, v1714);
              v1692[4].i64[0] = v1717;
              *v1692 = v1718;
              v1692[1] = vzip1q_s64(v1698, v1702);
              v1720 = (int64x2_t *)((char *)v1692 + 8 * v1728);
              v1720[2] = vzip2q_s64(v1704, v1708);
              v1720[3] = vzip2q_s64(v1710, v1714);
              *v1720 = v1719;
              v1720[1] = vzip2q_s64(v1698, v1702);
              v1720[4].i64[0] = *((_QWORD *)&v1717 + 1);
              v1721 = &v1692[v1728];
              v1721[4].i64[0] = v1716;
              v1721[2] = vzip1q_s64(v1703, v1706);
              v1721[3] = vzip1q_s64(v1709, v1712);
              *v1721 = vzip1q_s64(v1691, v1694);
              v1721[1] = vzip1q_s64(v1697, v1700);
              v1722 = (int64x2_t *)((char *)v1692 + 24 * v1728);
              v1722[4].i64[0] = *((_QWORD *)&v1716 + 1);
              v1722[2] = vzip2q_s64(v1703, v1706);
              v1722[3] = vzip2q_s64(v1709, v1712);
              *v1722 = vzip2q_s64(v1691, v1694);
              v1722[1] = vzip2q_s64(v1697, v1700);
              v1723 = &v1692[2 * v1728];
              v1723[4].i64[0] = v1715;
              v1723[2] = vzip1q_s64(v1707, v1705);
              v1723[3] = vzip1q_s64(v1713, v1711);
              *v1723 = vzip1q_s64(v1695, v1693);
              v1723[1] = vzip1q_s64(v1701, v1699);
              v1724 = (int64x2_t *)((char *)v1692 + 40 * v1728);
              v1724[4].i64[0] = *((_QWORD *)&v1715 + 1);
              v1724[2] = vzip2q_s64(v1707, v1705);
              v1724[3] = vzip2q_s64(v1713, v1711);
              *v1724 = vzip2q_s64(v1695, v1693);
              v1724[1] = vzip2q_s64(v1701, v1699);
              v1690 += 4;
              if (v1690 == v1689)
                goto LABEL_438;
            }
            v1730 = *(int64x2_t *)v1727;
            v1731 = (int64x2_t *)(v1729 + 8 * (v1726 + (_DWORD)v1728 * v1725));
            v1732 = *(int64x2_t *)(v1727 + 32);
            v1733 = *(_OWORD *)(v1727 + 48);
            v1734 = *(_OWORD *)(v1727 + 64);
            v1735 = *(_OWORD *)(v1727 + 80);
            v1736 = *(int64x2_t *)(v1727 + 96);
            v1737 = *(int64x2_t *)(v1727 + 112);
            v1738 = *(int64x2_t *)(v1727 + 128);
            v1739 = *(_OWORD *)(v1727 + 144);
            v1740 = *(_OWORD *)(v1727 + 160);
            v1741 = *(_OWORD *)(v1727 + 176);
            v1742 = *(int64x2_t *)(v1727 + 192);
            v1743 = *(int64x2_t *)(v1727 + 208);
            v1744 = *(int64x2_t *)(v1727 + 224);
            v1745 = *(_OWORD *)(v1727 + 240);
            v1746 = *(_OWORD *)(v1727 + 256);
            v1747 = *(_OWORD *)(v1727 + 272);
            v1748 = *(int64x2_t *)(v1727 + 288);
            v1749 = *(int64x2_t *)(v1727 + 304);
            v1750 = *(int64x2_t *)(v1727 + 320);
            v1751 = *(_OWORD *)(v1727 + 336);
            v1752 = *(_OWORD *)(v1727 + 352);
            v1753 = *(_OWORD *)(v1727 + 368);
            v1754 = *(int64x2_t *)(v1727 + 384);
            v1755 = *(int64x2_t *)(v1727 + 400);
            v1756 = *(int64x2_t *)(v1727 + 416);
            v1731[1] = *(int64x2_t *)(v1727 + 16);
            v1731[2] = v1732;
            *v1731 = v1730;
            v1757 = &v1731->i8[8 * v1728];
            *((_OWORD *)v1757 + 1) = v1734;
            *((_OWORD *)v1757 + 2) = v1735;
            *(_OWORD *)v1757 = v1733;
            v1758 = &v1731[v1728];
            v1758[1] = v1737;
            v1758[2] = v1738;
            *v1758 = v1736;
            v1759 = &v1731->i8[24 * v1728];
            *((_OWORD *)v1759 + 1) = v1740;
            *((_OWORD *)v1759 + 2) = v1741;
            *(_OWORD *)v1759 = v1739;
            v1760 = &v1731[2 * v1728];
            v1760[1] = v1743;
            v1760[2] = v1744;
            *v1760 = v1742;
            v1761 = &v1731->i8[40 * v1728];
            *((_OWORD *)v1761 + 1) = v1746;
            *((_OWORD *)v1761 + 2) = v1747;
            *(_OWORD *)v1761 = v1745;
            v1762 = &v1731[3 * v1728];
            v1762[1] = v1749;
            v1762[2] = v1750;
            *v1762 = v1748;
            v1763 = &v1731->i8[56 * v1728];
            *((_OWORD *)v1763 + 1) = v1752;
            *((_OWORD *)v1763 + 2) = v1753;
            *(_OWORD *)v1763 = v1751;
            v1764 = &v1731[4 * v1728];
            v1764[1] = v1755;
            v1764[2] = v1756;
            *v1764 = v1754;
            v1690 += 4;
          }
          while (v1690 != v1689);
LABEL_438:
          v1683 = *(unsigned int *)(a1 + 3444);
        }
        ++v1684;
        ++v1685;
      }
      while (v1684 < v1683);
    }
    v1828 = *(unsigned int *)(a1 + 4452);
    if ((_DWORD)v1828)
    {
      v1829 = 0;
      v1830 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1831 = *(_QWORD *)(*(_QWORD *)(a1 + 4560) + 8 * v1829);
        if (v1831)
        {
          v1832 = *(_QWORD *)(a1 + 4528);
          v1833 = (*(_DWORD *)(a1 + 4552) * v1829);
          v1834 = (unsigned int *)(v1832 + 16 * (v1831 + v1833));
          v1835 = (unsigned int *)(v1832 + 16 * v1833);
          do
          {
            while (1)
            {
              v1837 = *v1830;
              v1838 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1835);
              v1839 = (int8x16_t *)(*(_QWORD *)(a1 + 4456) + 8 * *((_QWORD *)v1835 + 1));
              v1840 = *v6;
              v1841 = *(_QWORD *)(a1 + 20040);
              v1843 = v1839[1];
              v1842 = v1839[2];
              v1844 = *v1839;
              v1845 = vextq_s8(v1842, v1842, 8uLL).u64[0];
              v1846 = vextq_s8(v1843, v1843, 8uLL).u64[0];
              v1847 = vextq_s8(v1844, v1844, 8uLL).u64[0];
              if (*v1830 >= v1838)
                break;
              v1836 = (_QWORD *)(v1841 + 8 * (v1837 + (_DWORD)v1840 * v1838));
              *v1836 = v1844.i64[0];
              v1836[v1840] = v1847;
              v1836[2 * v1840] = v1843.i64[0];
              v1836[3 * v1840] = v1846;
              v1836[4 * v1840] = v1842.i64[0];
              v1836[5 * v1840] = v1845;
              v1835 += 4;
              if (v1835 == v1834)
                goto LABEL_458;
            }
            v1844.i64[1] = v1847;
            v1843.i64[1] = v1846;
            v1848 = (int8x16_t *)(v1841 + 8 * (v1838 + (_DWORD)v1840 * v1837));
            *v1848 = v1844;
            v1848[1] = v1843;
            v1842.i64[1] = v1845;
            v1848[2] = v1842;
            v1835 += 4;
          }
          while (v1835 != v1834);
LABEL_458:
          v1828 = *(unsigned int *)(a1 + 4452);
        }
        ++v1829;
        ++v1830;
      }
      while (v1829 < v1828);
    }
    v1931 = *(unsigned int *)(a1 + 5460);
    if ((_DWORD)v1931)
    {
      v1932 = 0;
      v1933 = *(unsigned int **)(a1 + 10592);
      do
      {
        v1934 = *(_QWORD *)(*(_QWORD *)(a1 + 5568) + 8 * v1932);
        if (v1934)
        {
          v1935 = *(_QWORD *)(a1 + 5536);
          v1936 = (*(_DWORD *)(a1 + 5560) * v1932);
          v1937 = (unsigned int *)(v1935 + 16 * (v1934 + v1936));
          v1938 = (unsigned int *)(v1935 + 16 * v1936);
          do
          {
            v1986 = *v1933;
            v1987 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1938);
            v1988 = *(_QWORD *)(a1 + 5464) + 8 * *((_QWORD *)v1938 + 1);
            v1989 = *v6;
            v1990 = *(_QWORD *)(a1 + 20040);
            if (*v1933 < v1987)
            {
              v1939 = (int64x2_t *)(v1990 + 8 * (v1986 + (_DWORD)v1989 * v1987));
              v1940 = *(int64x2_t *)(v1988 + 16);
              v1941 = *(int64x2_t *)(v1988 + 64);
              v1942 = *(int64x2_t *)(v1988 + 80);
              v1944 = *(int64x2_t *)(v1988 + 32);
              v1943 = *(int64x2_t *)(v1988 + 48);
              v1945 = *(int64x2_t *)(v1988 + 96);
              v1946 = *(int64x2_t *)(v1988 + 112);
              v1947 = *(int64x2_t *)(v1988 + 128);
              v1949 = *(int64x2_t *)(v1988 + 192);
              v1948 = *(int64x2_t *)(v1988 + 208);
              v1950 = *(int64x2_t *)(v1988 + 224);
              v1951 = vzip1q_s64(*(int64x2_t *)v1988, v1943);
              v1952 = vzip1q_s64(v1945, *(int64x2_t *)(v1988 + 144));
              v1953 = vzip1q_s64(v1949, *(int64x2_t *)(v1988 + 240));
              v1954.i64[0] = vdupq_laneq_s64(v1945, 1).u64[0];
              v1954.i64[1] = *(_QWORD *)(v1988 + 152);
              v1955 = vzip2q_s64(*(int64x2_t *)v1988, v1943);
              v1956.i64[0] = vdupq_laneq_s64(v1949, 1).u64[0];
              v1956.i64[1] = *(_QWORD *)(v1988 + 248);
              v1957 = (int8x16_t)vzip1q_s64(v1940, v1941);
              v1958 = (int8x16_t)vzip1q_s64(v1946, *(int64x2_t *)(v1988 + 160));
              v1959 = (int8x16_t)vzip1q_s64(v1948, *(int64x2_t *)(v1988 + 256));
              v1960 = vextq_s8(v1959, v1959, 8uLL).u64[0];
              v1961 = vextq_s8(v1958, v1958, 8uLL).u64[0];
              v1962 = vextq_s8(v1957, v1957, 8uLL).u64[0];
              v1963 = (int8x16_t)vzip2q_s64(v1940, v1941);
              v1964.i64[0] = vdupq_laneq_s64(v1946, 1).u64[0];
              v1964.i64[1] = *(_QWORD *)(v1988 + 168);
              v1965.i64[0] = vdupq_laneq_s64(v1948, 1).u64[0];
              v1965.i64[1] = *(_QWORD *)(v1988 + 264);
              v1966 = vextq_s8(v1963, v1963, 8uLL).u64[0];
              v1967 = vextq_s8(v1965, v1965, 8uLL).u64[0];
              v1968 = vextq_s8(v1964, v1964, 8uLL).u64[0];
              v1969 = (int8x16_t)vzip1q_s64(v1944, v1942);
              v1970 = (int8x16_t)vzip1q_s64(v1947, *(int64x2_t *)(v1988 + 176));
              v1971 = (int8x16_t)vzip1q_s64(v1950, *(int64x2_t *)(v1988 + 272));
              v1972 = vextq_s8(v1971, v1971, 8uLL).u64[0];
              v1973 = vextq_s8(v1970, v1970, 8uLL).u64[0];
              v1974 = vextq_s8(v1969, v1969, 8uLL).u64[0];
              v1975 = (int8x16_t)vzip2q_s64(v1944, v1942);
              v1976.i64[0] = vdupq_laneq_s64(v1947, 1).u64[0];
              v1976.i64[1] = *(_QWORD *)(v1988 + 184);
              v1977.i64[0] = vdupq_laneq_s64(v1950, 1).u64[0];
              v1977.i64[1] = *(_QWORD *)(v1988 + 280);
              v1978 = vextq_s8(v1975, v1975, 8uLL).u64[0];
              v1979 = vextq_s8(v1977, v1977, 8uLL).u64[0];
              v1980 = vextq_s8(v1976, v1976, 8uLL).u64[0];
              v1939[1] = v1952;
              v1939[2] = v1953;
              *v1939 = v1951;
              v1981 = (int64x2_t *)((char *)v1939 + 8 * v1989);
              v1981[1] = v1954;
            }
            else
            {
              v1991 = *(int64x2_t *)v1988;
              v1939 = (int64x2_t *)(v1990 + 8 * (v1987 + (_DWORD)v1989 * v1986));
              v1992 = *(int64x2_t *)(v1988 + 32);
              v1955 = *(int64x2_t *)(v1988 + 48);
              v1993 = *(int64x2_t *)(v1988 + 64);
              v1956 = *(int64x2_t *)(v1988 + 80);
              v1957 = *(int8x16_t *)(v1988 + 96);
              v1958 = *(int8x16_t *)(v1988 + 112);
              v1959 = *(int8x16_t *)(v1988 + 128);
              v1963 = *(int8x16_t *)(v1988 + 144);
              v1960 = vextq_s8(v1959, v1959, 8uLL).u64[0];
              v1961 = vextq_s8(v1958, v1958, 8uLL).u64[0];
              v1962 = vextq_s8(v1957, v1957, 8uLL).u64[0];
              v1964 = *(int8x16_t *)(v1988 + 160);
              v1965 = *(int8x16_t *)(v1988 + 176);
              v1967 = vextq_s8(v1965, v1965, 8uLL).u64[0];
              v1968 = vextq_s8(v1964, v1964, 8uLL).u64[0];
              v1966 = vextq_s8(v1963, v1963, 8uLL).u64[0];
              v1969 = *(int8x16_t *)(v1988 + 192);
              v1970 = *(int8x16_t *)(v1988 + 208);
              v1971 = *(int8x16_t *)(v1988 + 224);
              v1975 = *(int8x16_t *)(v1988 + 240);
              v1972 = vextq_s8(v1971, v1971, 8uLL).u64[0];
              v1973 = vextq_s8(v1970, v1970, 8uLL).u64[0];
              v1974 = vextq_s8(v1969, v1969, 8uLL).u64[0];
              v1976 = *(int8x16_t *)(v1988 + 256);
              v1977 = *(int8x16_t *)(v1988 + 272);
              v1979 = vextq_s8(v1977, v1977, 8uLL).u64[0];
              v1980 = vextq_s8(v1976, v1976, 8uLL).u64[0];
              v1978 = vextq_s8(v1975, v1975, 8uLL).u64[0];
              v1939[1] = *(int64x2_t *)(v1988 + 16);
              v1939[2] = v1992;
              *v1939 = v1991;
              v1981 = (int64x2_t *)((char *)v1939 + 8 * v1989);
              v1981[1] = v1993;
            }
            v1981[2] = v1956;
            *v1981 = v1955;
            v1957.i64[1] = v1962;
            v1958.i64[1] = v1961;
            v1982 = (int8x16_t *)&v1939[v1989];
            *v1982 = v1957;
            v1982[1] = v1958;
            v1959.i64[1] = v1960;
            v1982[2] = v1959;
            v1965.i64[1] = v1967;
            v1983 = (int8x16_t *)((char *)v1939 + 24 * v1989);
            v1964.i64[1] = v1968;
            v1963.i64[1] = v1966;
            v1983[1] = v1964;
            v1983[2] = v1965;
            *v1983 = v1963;
            v1984 = (int8x16_t *)&v1939[2 * v1989];
            v1971.i64[1] = v1972;
            v1970.i64[1] = v1973;
            v1969.i64[1] = v1974;
            v1984[1] = v1970;
            v1984[2] = v1971;
            *v1984 = v1969;
            v1985 = (int8x16_t *)((char *)v1939 + 40 * v1989);
            v1977.i64[1] = v1979;
            v1976.i64[1] = v1980;
            v1975.i64[1] = v1978;
            v1938 += 4;
            v1985[1] = v1976;
            v1985[2] = v1977;
            *v1985 = v1975;
          }
          while (v1938 != v1937);
          v1931 = *(unsigned int *)(a1 + 5460);
        }
        ++v1932;
        ++v1933;
      }
      while (v1932 < v1931);
    }
    v2015 = *(unsigned int *)(a1 + 6468);
    if ((_DWORD)v2015)
    {
      v2016 = 0;
      v2017 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2018 = *(_QWORD *)(*(_QWORD *)(a1 + 6576) + 8 * v2016);
        if (v2018)
        {
          v2019 = *(_QWORD *)(a1 + 6544);
          v2020 = (*(_DWORD *)(a1 + 6568) * v2016);
          v2021 = (unsigned int *)(v2019 + 16 * (v2018 + v2020));
          v2022 = (unsigned int *)(v2019 + 16 * v2020);
          do
          {
            while (1)
            {
              v2041 = *v2017;
              v2042 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2022);
              v2043 = *(_QWORD *)(a1 + 6472) + 8 * *((_QWORD *)v2022 + 1);
              v2044 = *v6;
              v2045 = *(_QWORD *)(a1 + 20040);
              if (*v2017 >= v2042)
                break;
              v2023 = *(int64x2_t *)(v2043 + 16);
              v2024 = (int64x2_t *)(v2045 + 8 * (v2041 + (_DWORD)v2044 * v2042));
              v2026 = *(int64x2_t *)(v2043 + 64);
              v2025 = *(int64x2_t *)(v2043 + 80);
              v2027 = *(int64x2_t *)(v2043 + 32);
              v2028 = *(int64x2_t *)(v2043 + 48);
              v2030 = *(int64x2_t *)(v2043 + 96);
              v2029 = *(int64x2_t *)(v2043 + 112);
              v2032 = *(int64x2_t *)(v2043 + 160);
              v2031 = *(int64x2_t *)(v2043 + 176);
              v2033 = *(int64x2_t *)(v2043 + 128);
              v2034 = *(int64x2_t *)(v2043 + 144);
              v2035 = vzip2q_s64(*(int64x2_t *)v2043, v2028);
              *v2024 = vzip1q_s64(*(int64x2_t *)v2043, v2028);
              v2024[1] = vzip1q_s64(v2030, v2034);
              v2036 = (int64x2_t *)((char *)v2024 + 8 * v2044);
              *v2036 = v2035;
              v2036[1] = vzip2q_s64(v2030, v2034);
              v2037 = &v2024[v2044];
              *v2037 = vzip1q_s64(v2023, v2026);
              v2037[1] = vzip1q_s64(v2029, v2032);
              v2038 = (int64x2_t *)((char *)v2024 + 24 * v2044);
              *v2038 = vzip2q_s64(v2023, v2026);
              v2038[1] = vzip2q_s64(v2029, v2032);
              v2039 = &v2024[2 * v2044];
              *v2039 = vzip1q_s64(v2027, v2025);
              v2039[1] = vzip1q_s64(v2033, v2031);
              v2040 = (int64x2_t *)((char *)v2024 + 40 * v2044);
              *v2040 = vzip2q_s64(v2027, v2025);
              v2040[1] = vzip2q_s64(v2033, v2031);
              v2022 += 4;
              if (v2022 == v2021)
                goto LABEL_498;
            }
            v2046 = *(int64x2_t *)v2043;
            v2047 = (int64x2_t *)(v2045 + 8 * (v2042 + (_DWORD)v2044 * v2041));
            v2048 = *(int64x2_t *)(v2043 + 32);
            v2049 = *(_OWORD *)(v2043 + 48);
            v2050 = *(_OWORD *)(v2043 + 64);
            v2051 = *(_OWORD *)(v2043 + 80);
            v2052 = *(int64x2_t *)(v2043 + 96);
            v2053 = *(int64x2_t *)(v2043 + 112);
            v2054 = *(int64x2_t *)(v2043 + 128);
            v2055 = *(_OWORD *)(v2043 + 144);
            v2056 = *(_OWORD *)(v2043 + 160);
            v2057 = *(_OWORD *)(v2043 + 176);
            v2047[1] = *(int64x2_t *)(v2043 + 16);
            v2047[2] = v2048;
            *v2047 = v2046;
            v2058 = &v2047->i8[8 * v2044];
            *((_OWORD *)v2058 + 1) = v2050;
            *((_OWORD *)v2058 + 2) = v2051;
            *(_OWORD *)v2058 = v2049;
            v2059 = &v2047[v2044];
            v2059[1] = v2053;
            v2059[2] = v2054;
            *v2059 = v2052;
            v2060 = &v2047->i8[24 * v2044];
            *((_OWORD *)v2060 + 1) = v2056;
            *((_OWORD *)v2060 + 2) = v2057;
            *(_OWORD *)v2060 = v2055;
            v2022 += 4;
          }
          while (v2022 != v2021);
LABEL_498:
          v2015 = *(unsigned int *)(a1 + 6468);
        }
        ++v2016;
        ++v2017;
      }
      while (v2016 < v2015);
    }
    v2124 = *(unsigned int *)(a1 + 7476);
    if ((_DWORD)v2124)
    {
      v2125 = 0;
      v2126 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2127 = *(_QWORD *)(*(_QWORD *)(a1 + 7584) + 8 * v2125);
        if (v2127)
        {
          v2128 = *(_QWORD *)(a1 + 7552);
          v2129 = (*(_DWORD *)(a1 + 7576) * v2125);
          v2130 = (unsigned int *)(v2128 + 16 * (v2127 + v2129));
          v2131 = (unsigned int *)(v2128 + 16 * v2129);
          do
          {
            while (1)
            {
              v2150 = *v2126;
              v2151 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2131);
              v2152 = *(_QWORD *)(a1 + 7480) + 8 * *((_QWORD *)v2131 + 1);
              v2153 = *v6;
              v2154 = *(_QWORD *)(a1 + 20040);
              if (*v2126 >= v2151)
                break;
              v2132 = *(int64x2_t *)(v2152 + 16);
              v2133 = (int64x2_t *)(v2154 + 8 * (v2150 + (_DWORD)v2153 * v2151));
              v2135 = *(int64x2_t *)(v2152 + 64);
              v2134 = *(int64x2_t *)(v2152 + 80);
              v2136 = *(int64x2_t *)(v2152 + 32);
              v2137 = *(int64x2_t *)(v2152 + 48);
              v2139 = *(int64x2_t *)(v2152 + 96);
              v2138 = *(int64x2_t *)(v2152 + 112);
              v2141 = *(int64x2_t *)(v2152 + 160);
              v2140 = *(int64x2_t *)(v2152 + 176);
              v2142 = *(int64x2_t *)(v2152 + 128);
              v2143 = *(int64x2_t *)(v2152 + 144);
              v2144 = vzip2q_s64(*(int64x2_t *)v2152, v2137);
              *v2133 = vzip1q_s64(*(int64x2_t *)v2152, v2137);
              v2133[1] = vzip1q_s64(v2139, v2143);
              v2145 = (int64x2_t *)((char *)v2133 + 8 * v2153);
              *v2145 = v2144;
              v2145[1] = vzip2q_s64(v2139, v2143);
              v2146 = &v2133[v2153];
              *v2146 = vzip1q_s64(v2132, v2135);
              v2146[1] = vzip1q_s64(v2138, v2141);
              v2147 = (int64x2_t *)((char *)v2133 + 24 * v2153);
              *v2147 = vzip2q_s64(v2132, v2135);
              v2147[1] = vzip2q_s64(v2138, v2141);
              v2148 = &v2133[2 * v2153];
              *v2148 = vzip1q_s64(v2136, v2134);
              v2148[1] = vzip1q_s64(v2142, v2140);
              v2149 = (int64x2_t *)((char *)v2133 + 40 * v2153);
              *v2149 = vzip2q_s64(v2136, v2134);
              v2149[1] = vzip2q_s64(v2142, v2140);
              v2131 += 4;
              if (v2131 == v2130)
                goto LABEL_518;
            }
            v2155 = *(int64x2_t *)v2152;
            v2156 = (int64x2_t *)(v2154 + 8 * (v2151 + (_DWORD)v2153 * v2150));
            v2157 = *(int64x2_t *)(v2152 + 32);
            v2158 = *(_OWORD *)(v2152 + 48);
            v2159 = *(_OWORD *)(v2152 + 64);
            v2160 = *(_OWORD *)(v2152 + 80);
            v2161 = *(int64x2_t *)(v2152 + 96);
            v2162 = *(int64x2_t *)(v2152 + 112);
            v2163 = *(int64x2_t *)(v2152 + 128);
            v2164 = *(_OWORD *)(v2152 + 144);
            v2165 = *(_OWORD *)(v2152 + 160);
            v2166 = *(_OWORD *)(v2152 + 176);
            v2156[1] = *(int64x2_t *)(v2152 + 16);
            v2156[2] = v2157;
            *v2156 = v2155;
            v2167 = &v2156->i8[8 * v2153];
            *((_OWORD *)v2167 + 1) = v2159;
            *((_OWORD *)v2167 + 2) = v2160;
            *(_OWORD *)v2167 = v2158;
            v2168 = &v2156[v2153];
            v2168[1] = v2162;
            v2168[2] = v2163;
            *v2168 = v2161;
            v2169 = &v2156->i8[24 * v2153];
            *((_OWORD *)v2169 + 1) = v2165;
            *((_OWORD *)v2169 + 2) = v2166;
            *(_OWORD *)v2169 = v2164;
            v2131 += 4;
          }
          while (v2131 != v2130);
LABEL_518:
          v2124 = *(unsigned int *)(a1 + 7476);
        }
        ++v2125;
        ++v2126;
      }
      while (v2125 < v2124);
    }
    v2216 = *(unsigned int *)(a1 + 8484);
    if ((_DWORD)v2216)
    {
      v2217 = 0;
      v2218 = *(unsigned int **)(a1 + 10664);
      do
      {
        v2219 = *(_QWORD *)(*(_QWORD *)(a1 + 8592) + 8 * v2217);
        if (v2219)
        {
          v2220 = *(_QWORD *)(a1 + 8560);
          v2221 = (*(_DWORD *)(a1 + 8584) * v2217);
          v2222 = (unsigned int *)(v2220 + 16 * (v2219 + v2221));
          v2223 = (unsigned int *)(v2220 + 16 * v2221);
          do
          {
            while (1)
            {
              v2240 = *v2218;
              v2241 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2223);
              v2242 = *(_QWORD *)(a1 + 8488) + 8 * *((_QWORD *)v2223 + 1);
              v2243 = *v6;
              v2244 = *(_QWORD *)(a1 + 20040);
              if (*v2218 >= v2241)
                break;
              v2224 = *(int64x2_t *)(v2242 + 16);
              v2225 = (int64x2_t *)(v2244 + 8 * (v2240 + (_DWORD)v2243 * v2241));
              v2227 = *(int64x2_t *)(v2242 + 64);
              v2226 = *(int64x2_t *)(v2242 + 80);
              v2228 = *(int64x2_t *)(v2242 + 32);
              v2229 = *(int64x2_t *)(v2242 + 48);
              v2231 = *(_OWORD *)(v2242 + 112);
              v2230 = *(_OWORD *)(v2242 + 128);
              v2232 = *(_OWORD *)(v2242 + 96);
              v2233 = vzip1q_s64(*(int64x2_t *)v2242, v2229);
              v2234 = vzip2q_s64(*(int64x2_t *)v2242, v2229);
              v2225[1].i64[0] = v2232;
              *v2225 = v2233;
              v2235 = (int64x2_t *)((char *)v2225 + 8 * v2243);
              *v2235 = v2234;
              v2235[1].i64[0] = *((_QWORD *)&v2232 + 1);
              v2236 = &v2225[v2243];
              v2236[1].i64[0] = v2231;
              *v2236 = vzip1q_s64(v2224, v2227);
              v2237 = (int64x2_t *)((char *)v2225 + 24 * v2243);
              v2237[1].i64[0] = *((_QWORD *)&v2231 + 1);
              *v2237 = vzip2q_s64(v2224, v2227);
              v2238 = &v2225[2 * v2243];
              v2238[1].i64[0] = v2230;
              *v2238 = vzip1q_s64(v2228, v2226);
              v2239 = (int64x2_t *)((char *)v2225 + 40 * v2243);
              v2239[1].i64[0] = *((_QWORD *)&v2230 + 1);
              *v2239 = vzip2q_s64(v2228, v2226);
              v2223 += 4;
              if (v2223 == v2222)
                goto LABEL_538;
            }
            v2245 = *(int64x2_t *)v2242;
            v2246 = (int64x2_t *)(v2244 + 8 * (v2241 + (_DWORD)v2243 * v2240));
            v2247 = *(int64x2_t *)(v2242 + 32);
            v2248 = *(_OWORD *)(v2242 + 48);
            v2249 = *(_OWORD *)(v2242 + 64);
            v2250 = *(_OWORD *)(v2242 + 80);
            v2251 = *(int64x2_t *)(v2242 + 96);
            v2252 = *(int64x2_t *)(v2242 + 112);
            v2253 = *(int64x2_t *)(v2242 + 128);
            v2246[1] = *(int64x2_t *)(v2242 + 16);
            v2246[2] = v2247;
            *v2246 = v2245;
            v2254 = &v2246->i8[8 * v2243];
            *((_OWORD *)v2254 + 1) = v2249;
            *((_OWORD *)v2254 + 2) = v2250;
            *(_OWORD *)v2254 = v2248;
            v2255 = &v2246[v2243];
            v2255[1] = v2252;
            v2255[2] = v2253;
            *v2255 = v2251;
            v2223 += 4;
          }
          while (v2223 != v2222);
LABEL_538:
          v2216 = *(unsigned int *)(a1 + 8484);
        }
        ++v2217;
        ++v2218;
      }
      while (v2217 < v2216);
    }
    v2302 = *(unsigned int *)(a1 + 2292);
    if ((_DWORD)v2302)
    {
      v2303 = 0;
      v2304 = *(unsigned int **)(a1 + 10520);
      do
      {
        v2305 = *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 8 * v2303);
        if (v2305)
        {
          v2306 = *(_QWORD *)(a1 + 2368);
          v2307 = (*(_DWORD *)(a1 + 2392) * v2303);
          v2308 = (unsigned int *)(v2306 + 16 * (v2305 + v2307));
          v2309 = (unsigned int *)(v2306 + 16 * v2307);
          do
          {
            while (1)
            {
              v2313 = *v2304;
              v2314 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2309);
              v2315 = *(_QWORD *)(a1 + 2296) + 8 * *((_QWORD *)v2309 + 1);
              v2316 = *v6;
              v2317 = *(_QWORD *)(a1 + 20040);
              v2318 = *(_QWORD *)(v2315 + 24);
              if (*v2304 >= v2314)
                break;
              v2310 = (_OWORD *)(v2317 + 8 * (v2313 + (_DWORD)v2316 * v2314));
              v2311 = *(_OWORD *)v2315;
              v2312 = *(_OWORD *)(v2315 + 32);
              v2310[1] = *(_OWORD *)(v2315 + 16);
              v2310[2] = v2312;
              *v2310 = v2311;
              v2309 += 4;
              if (v2309 == v2308)
                goto LABEL_558;
            }
            v2319 = (_QWORD *)(v2317 + 8 * (v2314 + (_DWORD)v2316 * v2313));
            v2320 = *(_QWORD *)(v2315 + 8);
            v2321 = *(_QWORD *)(v2315 + 16);
            v2322 = *(_QWORD *)(v2315 + 32);
            v2323 = *(_QWORD *)(v2315 + 40);
            *v2319 = *(_QWORD *)v2315;
            v2319[v2316] = v2320;
            v2319[2 * v2316] = v2321;
            v2319[3 * v2316] = v2318;
            v2319[4 * v2316] = v2322;
            v2319[5 * v2316] = v2323;
            v2309 += 4;
          }
          while (v2309 != v2308);
LABEL_558:
          v2302 = *(unsigned int *)(a1 + 2292);
        }
        ++v2303;
        ++v2304;
      }
      while (v2303 < v2302);
    }
    v2364 = *(unsigned int *)(a1 + 3300);
    if ((_DWORD)v2364)
    {
      v2365 = 0;
      v2366 = *(unsigned int **)(a1 + 10544);
      do
      {
        v2367 = *(_QWORD *)(*(_QWORD *)(a1 + 3408) + 8 * v2365);
        if (v2367)
        {
          v2368 = *(_QWORD *)(a1 + 3376);
          v2369 = (*(_DWORD *)(a1 + 3400) * v2365);
          v2370 = (unsigned int *)(v2368 + 16 * (v2367 + v2369));
          v2371 = (unsigned int *)(v2368 + 16 * v2369);
          do
          {
            while (1)
            {
              v2377 = *v2366;
              v2378 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2371);
              v2379 = *(_QWORD *)(a1 + 3304) + 8 * *((_QWORD *)v2371 + 1);
              v2380 = *v6;
              v2381 = *(_QWORD *)(a1 + 20040);
              v2382 = *(_QWORD *)(v2379 + 24);
              if (*v2366 >= v2378)
                break;
              v2372 = v2381 + 8 * (v2377 + (_DWORD)v2380 * v2378);
              v2373 = *(_OWORD *)v2379;
              v2374 = *(_OWORD *)(v2379 + 16);
              v2375 = *(_OWORD *)(v2379 + 32);
              v2376 = *(_OWORD *)(v2379 + 48);
              *(_QWORD *)(v2372 + 64) = *(_QWORD *)(v2379 + 64);
              *(_OWORD *)(v2372 + 32) = v2375;
              *(_OWORD *)(v2372 + 48) = v2376;
              *(_OWORD *)v2372 = v2373;
              *(_OWORD *)(v2372 + 16) = v2374;
              v2371 += 4;
              if (v2371 == v2370)
                goto LABEL_578;
            }
            v2383 = *(_QWORD *)(v2379 + 8);
            v2384 = (_QWORD *)(v2381 + 8 * (v2378 + (_DWORD)v2380 * v2377));
            v2385 = *(_QWORD *)(v2379 + 16);
            v2386 = *(_QWORD *)(v2379 + 32);
            v2387 = *(_QWORD *)(v2379 + 40);
            v2388 = *(_QWORD *)(v2379 + 48);
            v2389 = *(_QWORD *)(v2379 + 56);
            v2390 = *(_QWORD *)(v2379 + 64);
            *v2384 = *(_QWORD *)v2379;
            v2384[v2380] = v2383;
            v2384[2 * v2380] = v2385;
            v2384[3 * v2380] = v2382;
            v2384[4 * v2380] = v2386;
            v2384[5 * v2380] = v2387;
            v2384[6 * v2380] = v2388;
            v2384[7 * v2380] = v2389;
            v2384[8 * v2380] = v2390;
            v2371 += 4;
          }
          while (v2371 != v2370);
LABEL_578:
          v2364 = *(unsigned int *)(a1 + 3300);
        }
        ++v2365;
        ++v2366;
      }
      while (v2365 < v2364);
    }
    sub_20F6165A4(a1 + 4296, a1 + 20040, (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10568), 1);
    v2413 = *(unsigned int *)(a1 + 5316);
    if ((_DWORD)v2413)
    {
      v2414 = 0;
      v2415 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2416 = *(_QWORD *)(*(_QWORD *)(a1 + 5424) + 8 * v2414);
        if (v2416)
        {
          v2417 = *(_QWORD *)(a1 + 5392);
          v2418 = (*(_DWORD *)(a1 + 5416) * v2414);
          v2419 = (unsigned int *)(v2417 + 16 * (v2416 + v2418));
          v2420 = (unsigned int *)(v2417 + 16 * v2418);
          do
          {
            while (1)
            {
              v2424 = *v2415;
              v2425 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2420);
              v2426 = *(_QWORD *)(a1 + 5320) + 8 * *((_QWORD *)v2420 + 1);
              v2427 = *v6;
              v2428 = *(_QWORD *)(a1 + 20040);
              v2429 = *(_QWORD *)(v2426 + 24);
              if (*v2415 >= v2425)
                break;
              v2421 = (_OWORD *)(v2428 + 8 * (v2424 + (_DWORD)v2427 * v2425));
              v2422 = *(_OWORD *)v2426;
              v2423 = *(_OWORD *)(v2426 + 32);
              v2421[1] = *(_OWORD *)(v2426 + 16);
              v2421[2] = v2423;
              *v2421 = v2422;
              v2420 += 4;
              if (v2420 == v2419)
                goto LABEL_598;
            }
            v2430 = (_QWORD *)(v2428 + 8 * (v2425 + (_DWORD)v2427 * v2424));
            v2431 = *(_QWORD *)(v2426 + 8);
            v2432 = *(_QWORD *)(v2426 + 16);
            v2433 = *(_QWORD *)(v2426 + 32);
            v2434 = *(_QWORD *)(v2426 + 40);
            *v2430 = *(_QWORD *)v2426;
            v2430[v2427] = v2431;
            v2430[2 * v2427] = v2432;
            v2430[3 * v2427] = v2429;
            v2430[4 * v2427] = v2433;
            v2430[5 * v2427] = v2434;
            v2420 += 4;
          }
          while (v2420 != v2419);
LABEL_598:
          v2413 = *(unsigned int *)(a1 + 5316);
        }
        ++v2414;
        ++v2415;
      }
      while (v2414 < v2413);
    }
    sub_20F6166B0(a1 + 6312, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10616), 1);
    sub_20F6166B0(a1 + 7320, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10640), 1);
    sub_20F61684C(a1 + 8328, (uint64_t *)(a1 + 20040), (_QWORD *)(a1 + 10568), *(unsigned int **)(a1 + 10664), 1);
    v2462 = *(unsigned int *)(a1 + 2148);
    if ((_DWORD)v2462)
    {
      v2463 = 0;
      v2464 = *(unsigned int **)(a1 + 10520);
      do
      {
        v2465 = *(_QWORD *)(*(_QWORD *)(a1 + 2256) + 8 * v2463);
        if (v2465)
        {
          v2466 = *(_QWORD *)(a1 + 2224);
          v2467 = (*(_DWORD *)(a1 + 2248) * v2463);
          v2468 = (unsigned int *)(v2466 + 16 * (v2465 + v2467));
          v2469 = (unsigned int *)(v2466 + 16 * v2467);
          do
          {
            while (1)
            {
              v2510 = *v2464;
              v2511 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2469);
              v2512 = *(_QWORD *)(a1 + 2152) + 8 * *((_QWORD *)v2469 + 1);
              v2513 = *v6;
              v2514 = *(_QWORD *)(a1 + 20040);
              if (*v2464 >= v2511)
                break;
              v2470.i64[0] = *(_QWORD *)(v2512 + 64);
              v2471 = (int64x2_t *)(v2514 + 8 * (v2510 + (_DWORD)v2513 * v2511));
              v2473 = *(int64x2_t *)(v2512 + 32);
              v2472 = *(int64x2_t *)(v2512 + 48);
              v2474 = *(int64x2_t *)(v2512 + 16);
              v2475 = *(int64x2_t *)(v2512 + 120);
              v2476 = *(int64x2_t *)(v2512 + 104);
              v2477 = *(int64x2_t *)(v2512 + 88);
              v2478 = *(int64x2_t *)(v2512 + 72);
              v2479.i64[0] = *(_QWORD *)(v2512 + 208);
              v2481 = *(int64x2_t *)(v2512 + 176);
              v2480 = *(int64x2_t *)(v2512 + 192);
              v2483 = *(int64x2_t *)(v2512 + 144);
              v2482 = *(int64x2_t *)(v2512 + 160);
              v2484 = *(int64x2_t *)(v2512 + 216);
              v2485 = *(int64x2_t *)(v2512 + 264);
              v2486 = *(int64x2_t *)(v2512 + 248);
              v2487 = *(int64x2_t *)(v2512 + 232);
              v2488.i64[0] = *(_QWORD *)(v2512 + 352);
              v2490 = *(int64x2_t *)(v2512 + 320);
              v2489 = *(int64x2_t *)(v2512 + 336);
              v2492 = *(int64x2_t *)(v2512 + 288);
              v2491 = *(int64x2_t *)(v2512 + 304);
              v2493 = *(int64x2_t *)(v2512 + 392);
              v2494 = *(int64x2_t *)(v2512 + 408);
              v2495 = *(int64x2_t *)(v2512 + 376);
              v2496 = vzip1q_s64(*(int64x2_t *)v2512, v2478);
              v2497 = vzip1q_s64(v2492, *(int64x2_t *)(v2512 + 360));
              v2498 = vzip1q_s64(v2483, v2484);
              v2499 = vzip2q_s64(*(int64x2_t *)v2512, v2478);
              v2500 = vzip2q_s64(v2483, v2484);
              v2501 = vzip2q_s64(v2492, *(int64x2_t *)(v2512 + 360));
              v2470.i64[1] = *(_QWORD *)(v2512 + 136);
              v2479.i64[1] = *(_QWORD *)(v2512 + 280);
              v2488.i64[1] = *(_QWORD *)(v2512 + 424);
              v2471[1] = v2498;
              v2471[2] = v2497;
              *v2471 = v2496;
              v2502 = (int64x2_t *)((char *)v2471 + 8 * v2513);
              v2502[1] = v2500;
              v2502[2] = v2501;
              *v2502 = v2499;
              v2503 = &v2471[v2513];
              v2503[1] = vzip1q_s64(v2482, v2487);
              v2503[2] = vzip1q_s64(v2491, v2495);
              *v2503 = vzip1q_s64(v2474, v2477);
              v2504 = (int64x2_t *)((char *)v2471 + 24 * v2513);
              v2504[1] = vzip2q_s64(v2482, v2487);
              v2504[2] = vzip2q_s64(v2491, v2495);
              *v2504 = vzip2q_s64(v2474, v2477);
              v2505 = &v2471[2 * v2513];
              v2505[1] = vzip1q_s64(v2481, v2486);
              v2505[2] = vzip1q_s64(v2490, v2493);
              *v2505 = vzip1q_s64(v2473, v2476);
              v2506 = (int64x2_t *)((char *)v2471 + 40 * v2513);
              v2506[1] = vzip2q_s64(v2481, v2486);
              v2506[2] = vzip2q_s64(v2490, v2493);
              *v2506 = vzip2q_s64(v2473, v2476);
              v2507 = &v2471[3 * v2513];
              v2507[1] = vzip1q_s64(v2480, v2485);
              v2507[2] = vzip1q_s64(v2489, v2494);
              *v2507 = vzip1q_s64(v2472, v2475);
              v2508 = (int64x2_t *)((char *)v2471 + 56 * v2513);
              v2508[1] = vzip2q_s64(v2480, v2485);
              v2508[2] = vzip2q_s64(v2489, v2494);
              *v2508 = vzip2q_s64(v2472, v2475);
              v2509 = &v2471[4 * v2513];
              v2509[1] = v2479;
              v2509[2] = v2488;
              *v2509 = v2470;
              v2469 += 4;
              if (v2469 == v2468)
                goto LABEL_618;
            }
            v2515 = *(_QWORD *)(v2512 + 64);
            v2516 = v2514 + 8 * (v2511 + (_DWORD)v2513 * v2510);
            v2517 = *(_OWORD *)(v2512 + 48);
            v2518 = *(int64x2_t *)v2512;
            v2519 = *(_OWORD *)(v2512 + 16);
            v2520 = *(_OWORD *)(v2512 + 72);
            v2521 = *(_OWORD *)(v2512 + 88);
            v2522 = *(_OWORD *)(v2512 + 104);
            v2523 = *(_OWORD *)(v2512 + 120);
            v2524 = *(_QWORD *)(v2512 + 136);
            v2525 = *(_OWORD *)(v2512 + 144);
            v2526 = *(_OWORD *)(v2512 + 160);
            v2527 = *(_OWORD *)(v2512 + 176);
            v2528 = *(_OWORD *)(v2512 + 192);
            v2529 = *(_QWORD *)(v2512 + 208);
            v2530 = *(_OWORD *)(v2512 + 232);
            v2531 = *(_OWORD *)(v2512 + 248);
            v2532 = *(_OWORD *)(v2512 + 216);
            v2533 = *(_OWORD *)(v2512 + 264);
            v2534 = *(_QWORD *)(v2512 + 280);
            v2535 = *(_OWORD *)(v2512 + 288);
            v2536 = *(_OWORD *)(v2512 + 304);
            v2537 = *(_OWORD *)(v2512 + 320);
            v2538 = *(_OWORD *)(v2512 + 336);
            v2539 = *(_QWORD *)(v2512 + 352);
            v2540 = *(_OWORD *)(v2512 + 360);
            v2541 = *(_OWORD *)(v2512 + 376);
            v2542 = *(_OWORD *)(v2512 + 392);
            v2543 = *(_OWORD *)(v2512 + 408);
            v2544 = *(_QWORD *)(v2512 + 424);
            *(_OWORD *)(v2516 + 32) = *(_OWORD *)(v2512 + 32);
            *(_OWORD *)(v2516 + 48) = v2517;
            *(_QWORD *)(v2516 + 64) = v2515;
            *(int64x2_t *)v2516 = v2518;
            *(_OWORD *)(v2516 + 16) = v2519;
            v2545 = v2516 + 8 * v2513;
            *(_QWORD *)(v2545 + 64) = v2524;
            *(_OWORD *)(v2545 + 32) = v2522;
            *(_OWORD *)(v2545 + 48) = v2523;
            *(_OWORD *)v2545 = v2520;
            *(_OWORD *)(v2545 + 16) = v2521;
            v2546 = v2516 + 16 * v2513;
            *(_QWORD *)(v2546 + 64) = v2529;
            *(_OWORD *)(v2546 + 32) = v2527;
            *(_OWORD *)(v2546 + 48) = v2528;
            *(_OWORD *)v2546 = v2525;
            *(_OWORD *)(v2546 + 16) = v2526;
            v2547 = v2516 + 24 * v2513;
            *(_QWORD *)(v2547 + 64) = v2534;
            *(_OWORD *)(v2547 + 32) = v2531;
            *(_OWORD *)(v2547 + 48) = v2533;
            *(_OWORD *)v2547 = v2532;
            *(_OWORD *)(v2547 + 16) = v2530;
            v2548 = v2516 + 32 * v2513;
            *(_QWORD *)(v2548 + 64) = v2539;
            *(_OWORD *)(v2548 + 32) = v2537;
            *(_OWORD *)(v2548 + 48) = v2538;
            *(_OWORD *)v2548 = v2535;
            *(_OWORD *)(v2548 + 16) = v2536;
            v2549 = v2516 + 40 * v2513;
            *(_QWORD *)(v2549 + 64) = v2544;
            *(_OWORD *)(v2549 + 32) = v2542;
            *(_OWORD *)(v2549 + 48) = v2543;
            *(_OWORD *)v2549 = v2540;
            *(_OWORD *)(v2549 + 16) = v2541;
            v2469 += 4;
          }
          while (v2469 != v2468);
LABEL_618:
          v2462 = *(unsigned int *)(a1 + 2148);
        }
        ++v2463;
        ++v2464;
      }
      while (v2463 < v2462);
    }
    v2561 = *(unsigned int *)(a1 + 3156);
    if ((_DWORD)v2561)
    {
      v2562 = 0;
      v2563 = *(unsigned int **)(a1 + 10544);
      do
      {
        v2564 = *(_QWORD *)(*(_QWORD *)(a1 + 3264) + 8 * v2562);
        if (v2564)
        {
          v2565 = *(_QWORD *)(a1 + 3232);
          v2566 = (*(_DWORD *)(a1 + 3256) * v2562);
          v2567 = (unsigned int *)(v2565 + 16 * (v2564 + v2566));
          v2568 = (unsigned int *)(v2565 + 16 * v2566);
          do
          {
            v2657 = *v2563;
            v2658 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2568);
            v2659 = *(_QWORD *)(a1 + 3160) + 8 * *((_QWORD *)v2568 + 1);
            v2660 = *v6;
            v2661 = *(_QWORD *)(a1 + 20040);
            if (*v2563 < v2658)
            {
              v4364 = *(int64x2_t *)(v2659 + 48);
              v2570 = *(int64x2_t *)(v2659 + 16);
              v2569 = *(int64x2_t *)(v2659 + 32);
              v2571 = *(int64x2_t *)(v2659 + 120);
              v2572 = *(int64x2_t *)(v2659 + 104);
              v2573 = *(int64x2_t *)(v2659 + 88);
              v2574 = *(int64x2_t *)(v2659 + 72);
              v2575 = *(int64x2_t *)(v2659 + 176);
              v2612 = *(int8x16_t *)(v2659 + 192);
              v2576 = *(int8x16_t *)(v2659 + 144);
              v2577 = *(int64x2_t *)(v2659 + 160);
              v2579 = *(int8x16_t *)(v2659 + 320);
              v2578 = *(int64x2_t *)(v2659 + 336);
              v2581 = *(int64x2_t *)(v2659 + 288);
              v2580 = *(int64x2_t *)(v2659 + 304);
              v2582 = *(int64x2_t *)(v2659 + 448);
              v2616 = *(int8x16_t *)(v2659 + 464);
              v2583 = vdupq_laneq_s64((int64x2_t)v2576, 1).u64[0];
              v2609.i64[1] = *(_QWORD *)(v2659 + 224);
              v2584 = *(int8x16_t *)(v2659 + 432);
              v4370 = vzip1q_s64((int64x2_t)v2576, *(int64x2_t *)(v2659 + 216));
              v4358 = vzip1q_s64(v2581, *(int64x2_t *)(v2659 + 360));
              v2585.i64[0] = vdupq_laneq_s64(v2581, 1).u64[0];
              v2585.i64[1] = *(_QWORD *)(v2659 + 368);
              v4350 = vzip1q_s64((int64x2_t)v2584, *(int64x2_t *)(v2659 + 504));
              v2586.i64[0] = vdupq_laneq_s64((int64x2_t)v2584, 1).u64[0];
              v2586.i64[1] = *(_QWORD *)(v2659 + 512);
              v4367 = vzip1q_s64(*(int64x2_t *)v2659, v2574);
              v4380 = vzip2q_s64(*(int64x2_t *)v2659, v2574);
              v4394 = (int8x16_t)vzip1q_s64(v2577, *(int64x2_t *)(v2659 + 232));
              v2577.i64[0] = vdupq_laneq_s64(v2577, 1).u64[0];
              v2622.i64[1] = *(_QWORD *)(v2659 + 240);
              v4296 = vzip1q_s64(v2580, *(int64x2_t *)(v2659 + 376));
              v2587 = vdupq_laneq_s64(v2580, 1).u64[0];
              v2614.i64[1] = *(_QWORD *)(v2659 + 384);
              v2588 = (int8x16_t)vzip1q_s64(v2570, v2573);
              v2589 = (int8x16_t)vzip2q_s64(v2570, v2573);
              v2590 = (int8x16_t)vzip1q_s64(v2582, *(int64x2_t *)(v2659 + 520));
              v2584.i64[0] = vdupq_laneq_s64(v2582, 1).u64[0];
              v2584.i64[1] = *(_QWORD *)(v2659 + 528);
              v2591 = (int8x16_t)vzip1q_s64(v2575, *(int64x2_t *)(v2659 + 248));
              v2576.i64[0] = vdupq_laneq_s64(v2575, 1).u64[0];
              v2576.i64[1] = *(_QWORD *)(v2659 + 256);
              v2592 = (int8x16_t)vzip1q_s64(v2569, v2572);
              v2617 = (int8x16_t)vzip2q_s64(v2569, v2572);
              v2593 = (int8x16_t)vzip1q_s64((int64x2_t)v2579, *(int64x2_t *)(v2659 + 392));
              v2579.i64[0] = vdupq_laneq_s64((int64x2_t)v2579, 1).u64[0];
              v2579.i64[1] = *(_QWORD *)(v2659 + 400);
              v2594 = (int8x16_t)vzip1q_s64((int64x2_t)v2616, *(int64x2_t *)(v2659 + 536));
              v2595.i64[0] = vdupq_laneq_s64((int64x2_t)v2616, 1).u64[0];
              v2595.i64[1] = *(_QWORD *)(v2659 + 544);
              v2596 = (int8x16_t)vzip1q_s64(v4364, v2571);
              v2597 = (int8x16_t)vzip2q_s64(v4364, v2571);
              v2626 = (int8x16_t)vzip1q_s64((int64x2_t)v2612, *(int64x2_t *)(v2659 + 264));
              v2598.i64[0] = vdupq_laneq_s64((int64x2_t)v2612, 1).u64[0];
              v2598.i64[1] = *(_QWORD *)(v2659 + 272);
              v2599 = (int8x16_t)vzip1q_s64(v2578, *(int64x2_t *)(v2659 + 408));
              v2600.i64[0] = vdupq_laneq_s64(v2578, 1).u64[0];
              v2600.i64[1] = *(_QWORD *)(v2659 + 416);
              v2601 = *(int64x2_t *)(v2659 + 480);
              v2602 = (int8x16_t)vzip1q_s64(v2601, *(int64x2_t *)(v2659 + 552));
              v2603.i64[0] = vdupq_laneq_s64(v2601, 1).u64[0];
              v2603.i64[1] = *(_QWORD *)(v2659 + 560);
              v2604 = (int64x2_t *)(v2661 + 8 * (v2657 + (_DWORD)v2660 * v2658));
              v4365 = *(_QWORD *)(v2659 + 64);
              v4336 = *(_QWORD *)(v2659 + 136);
              v2575.i64[0] = *(_QWORD *)(v2659 + 208);
              v4334 = *(_QWORD *)(v2659 + 280);
              v4362 = *(_QWORD *)(v2659 + 352);
              v4332 = *(_QWORD *)(v2659 + 424);
              v4356 = *(_QWORD *)(v2659 + 496);
              v4330 = *(_QWORD *)(v2659 + 568);
              v4354 = *(_QWORD *)(v2659 + 640);
              v2605 = *(int8x16_t *)(v2659 + 608);
              v2630 = *(int8x16_t *)(v2659 + 624);
              v2606 = *(_OWORD *)(v2659 + 576);
              v2607 = *(int8x16_t *)(v2659 + 592);
              v2604[2] = v4358;
              v2604[3] = v4350;
              *v2604 = v4367;
              v2604[1] = v4370;
              v2608 = (int8x16_t *)((char *)v2604 + 8 * v2660);
              v2604[4].i64[0] = v2606;
              v2608[4].i64[0] = *((_QWORD *)&v2606 + 1);
              v2608[2] = v2585;
              v2608[3] = v2586;
              *v2608 = (int8x16_t)v4380;
              v2608[1] = v2609;
              v2609.i64[0] = v2588.i64[0];
              v4326 = vextq_s8(v2588, v2588, 8uLL).u64[0];
              v4390 = v2590.i64[0];
              v2610 = (int8x16_t)v4296;
              v2611 = vextq_s8(v2610, v2610, 8uLL).u64[0];
              v4385 = v2589.i64[0];
              v4322 = vextq_s8(v2589, v2589, 8uLL).u64[0];
              v2612.i64[0] = v2584.i64[0];
              v2613 = vextq_s8(v2584, v2584, 8uLL).u64[0];
              v4381 = v2587;
              v4324 = vextq_s8(v2614, v2614, 8uLL).u64[0];
              v4368 = v2577.i64[0];
              v4320 = vextq_s8(v2622, v2622, 8uLL).u64[0];
              v4351 = v2607.i64[0];
              v4342 = vextq_s8(v2607, v2607, 8uLL).u64[0];
              v4375 = v2591.i64[0];
              v4318 = vextq_s8(v2591, v2591, 8uLL).u64[0];
              v2614.i64[0] = v2592.i64[0];
              v4316 = vextq_s8(v2592, v2592, 8uLL).u64[0];
              v2615 = v2594.i64[0];
              v4314 = vextq_s8(v2594, v2594, 8uLL).u64[0];
              v2616.i64[0] = v2593.i64[0];
              v4312 = vextq_s8(v2593, v2593, 8uLL).u64[0];
              v4371 = v2617.i64[0];
              v2593.i64[0] = vextq_s8(v2617, v2617, 8uLL).u64[0];
              v4359 = v2595.i64[0];
              v4310 = vextq_s8(v2595, v2595, 8uLL).u64[0];
              v2617.i64[0] = v2579.i64[0];
              v4308 = vextq_s8(v2579, v2579, 8uLL).u64[0];
              v2618 = v2576.i64[0];
              v4306 = vextq_s8(v2576, v2576, 8uLL).u64[0];
              v4344 = v2605.i64[0];
              v4340 = vextq_s8(v2605, v2605, 8uLL).u64[0];
              v4328 = v2596.i64[0];
              v2619 = v2602.i64[0];
              v4302 = vextq_s8(v2602, v2602, 8uLL).u64[0];
              v4304 = vextq_s8(v2596, v2596, 8uLL).u64[0];
              v2620 = v2599.i64[0];
              *(_QWORD *)&v2606 = vextq_s8(v2599, v2599, 8uLL).u64[0];
              v2621 = v2593.i64[0];
              v2622.i64[0] = v2626.i64[0];
              v4298 = vextq_s8(v2626, v2626, 8uLL).u64[0];
              v4300 = v2606;
              v2623 = v2597.i64[0];
              v2624 = vextq_s8(v2597, v2597, 8uLL).u64[0];
              v2625 = vextq_s8(v2590, v2590, 8uLL).u64[0];
              v2626.i64[0] = v2575.i64[0];
              v2627 = vextq_s8(v2603, v2603, 8uLL).u64[0];
              v2628 = vextq_s8(v2600, v2600, 8uLL).u64[0];
              v2629 = vextq_s8(v2598, v2598, 8uLL).u64[0];
              v4347 = v2630.i64[0];
              v4338 = vextq_s8(v2630, v2630, 8uLL).u64[0];
              v2630.i64[0] = v2598.i64[0];
              v2631 = vextq_s8(v4394, v4394, 8uLL).u64[0];
            }
            else
            {
              v4386 = *(_QWORD *)(v2659 + 64);
              v2604 = (int64x2_t *)(v2661 + 8 * (v2658 + (_DWORD)v2660 * v2657));
              v2662 = *(int64x2_t *)(v2659 + 32);
              v4372 = *(int64x2_t *)(v2659 + 48);
              v4376 = *(int64x2_t *)v2659;
              v4391 = *(_OWORD *)(v2659 + 88);
              v4394 = *(int8x16_t *)(v2659 + 72);
              v4382 = *(_OWORD *)(v2659 + 104);
              v2663 = *(_OWORD *)(v2659 + 120);
              v2664 = *(_QWORD *)(v2659 + 136);
              v4351 = *(_QWORD *)(v2659 + 208);
              v2666 = *(int8x16_t *)(v2659 + 176);
              v2665 = *(int8x16_t *)(v2659 + 192);
              v2612 = *(int8x16_t *)(v2659 + 144);
              v2609 = *(int8x16_t *)(v2659 + 160);
              v4342 = *(_QWORD *)(v2659 + 280);
              v2626 = *(int8x16_t *)(v2659 + 248);
              v2667 = *(int8x16_t *)(v2659 + 232);
              v2668 = *(int8x16_t *)(v2659 + 216);
              v2669 = *(int8x16_t *)(v2659 + 264);
              v4344 = *(_QWORD *)(v2659 + 352);
              v2614 = *(int8x16_t *)(v2659 + 320);
              v2616 = *(int8x16_t *)(v2659 + 336);
              v2617 = *(int8x16_t *)(v2659 + 288);
              v2670 = *(int8x16_t *)(v2659 + 304);
              v4340 = *(_QWORD *)(v2659 + 424);
              v2671 = *(int8x16_t *)(v2659 + 392);
              v2672 = *(int8x16_t *)(v2659 + 408);
              v2674 = *(int8x16_t *)(v2659 + 360);
              v2673 = *(int8x16_t *)(v2659 + 376);
              v4347 = *(_QWORD *)(v2659 + 496);
              v2675 = *(int8x16_t *)(v2659 + 464);
              v2676 = *(int8x16_t *)(v2659 + 480);
              v2678 = *(int8x16_t *)(v2659 + 432);
              v2677 = *(int8x16_t *)(v2659 + 448);
              v4338 = *(_QWORD *)(v2659 + 568);
              v2600 = *(int8x16_t *)(v2659 + 536);
              v2603 = *(int8x16_t *)(v2659 + 552);
              v2679 = *(int8x16_t *)(v2659 + 504);
              v2630 = *(int8x16_t *)(v2659 + 520);
              v4354 = *(_QWORD *)(v2659 + 640);
              v2680 = *(int8x16_t *)(v2659 + 608);
              v2681 = *(int8x16_t *)(v2659 + 624);
              v2683 = *(int8x16_t *)(v2659 + 576);
              v2682 = *(int8x16_t *)(v2659 + 592);
              v2604[1] = *(int64x2_t *)(v2659 + 16);
              v2604[2] = v2662;
              v2604[3] = v4372;
              v2604[4].i64[0] = v4386;
              *v2604 = v4376;
              v2684 = &v2604->i8[8 * v2660];
              *((_QWORD *)v2684 + 8) = v2664;
              *((_OWORD *)v2684 + 2) = v4382;
              *((_OWORD *)v2684 + 3) = v2663;
              *((_OWORD *)v2684 + 1) = v4391;
              *(int8x16_t *)v2684 = v4394;
              v4390 = v2665.i64[0];
              v4394.i64[0] = v2609.i64[0];
              v2625 = vextq_s8(v2665, v2665, 8uLL).u64[0];
              v2610.i64[0] = v2666.i64[0];
              v2611 = vextq_s8(v2666, v2666, 8uLL).u64[0];
              v2631 = vextq_s8(v2609, v2609, 8uLL).u64[0];
              v2609.i64[0] = v2612.i64[0];
              v4326 = vextq_s8(v2612, v2612, 8uLL).u64[0];
              v4381 = v2626.i64[0];
              v4324 = vextq_s8(v2626, v2626, 8uLL).u64[0];
              v4368 = v2667.i64[0];
              v4320 = vextq_s8(v2667, v2667, 8uLL).u64[0];
              v4385 = v2668.i64[0];
              v4322 = vextq_s8(v2668, v2668, 8uLL).u64[0];
              v2612.i64[0] = v2669.i64[0];
              v2613 = vextq_s8(v2669, v2669, 8uLL).u64[0];
              v2615 = v2616.i64[0];
              v4314 = vextq_s8(v2616, v2616, 8uLL).u64[0];
              v2616.i64[0] = v2614.i64[0];
              v4312 = vextq_s8(v2614, v2614, 8uLL).u64[0];
              v4375 = v2670.i64[0];
              v4318 = vextq_s8(v2670, v2670, 8uLL).u64[0];
              v2614.i64[0] = v2617.i64[0];
              v4316 = vextq_s8(v2617, v2617, 8uLL).u64[0];
              v4359 = v2672.i64[0];
              v4310 = vextq_s8(v2672, v2672, 8uLL).u64[0];
              v2617.i64[0] = v2671.i64[0];
              v4308 = vextq_s8(v2671, v2671, 8uLL).u64[0];
              v2618 = v2673.i64[0];
              v4306 = vextq_s8(v2673, v2673, 8uLL).u64[0];
              v4371 = v2674.i64[0];
              v2621 = vextq_s8(v2674, v2674, 8uLL).u64[0];
              v2619 = v2676.i64[0];
              v4302 = vextq_s8(v2676, v2676, 8uLL).u64[0];
              v2620 = v2675.i64[0];
              v4300 = vextq_s8(v2675, v2675, 8uLL).u64[0];
              v2622.i64[0] = v2677.i64[0];
              v4298 = vextq_s8(v2677, v2677, 8uLL).u64[0];
              v4304 = vextq_s8(v2678, v2678, 8uLL).u64[0];
              v2627 = vextq_s8(v2603, v2603, 8uLL).u64[0];
              v2628 = vextq_s8(v2600, v2600, 8uLL).u64[0];
              v2629 = vextq_s8(v2630, v2630, 8uLL).u64[0];
              v2623 = v2679.i64[0];
              v2624 = vextq_s8(v2679, v2679, 8uLL).u64[0];
              v4356 = v2681.i64[0];
              v4328 = v2678.i64[0];
              v4330 = vextq_s8(v2681, v2681, 8uLL).u64[0];
              v4362 = v2680.i64[0];
              v4365 = v2683.i64[0];
              v2626.i64[0] = v2682.i64[0];
              v4332 = vextq_s8(v2680, v2680, 8uLL).u64[0];
              v4334 = vextq_s8(v2682, v2682, 8uLL).u64[0];
              v4336 = vextq_s8(v2683, v2683, 8uLL).u64[0];
            }
            v2609.i64[1] = v4326;
            v2632.i64[0] = v4394.i64[0];
            v2632.i64[1] = v2631;
            v2633.i64[0] = v2610.i64[0];
            v2633.i64[1] = v2611;
            v2634.i64[0] = v4390;
            v2634.i64[1] = v2625;
            v2612.i64[1] = v2613;
            v2635.i64[0] = v4381;
            v2635.i64[1] = v4324;
            v2636.i64[0] = v4368;
            v2636.i64[1] = v4320;
            v2637.i64[0] = v4385;
            v2637.i64[1] = v4322;
            v2638.i64[0] = v2615;
            v2638.i64[1] = v4314;
            v2616.i64[1] = v4312;
            v2639.i64[0] = v4375;
            v2639.i64[1] = v4318;
            v2614.i64[1] = v4316;
            v2640.i64[0] = v4359;
            v2640.i64[1] = v4310;
            v2617.i64[1] = v4308;
            v2641.i64[0] = v2618;
            v2641.i64[1] = v4306;
            v2642.i64[0] = v4371;
            v2642.i64[1] = v2621;
            v2643.i64[0] = v2619;
            v2643.i64[1] = v4302;
            v2644.i64[0] = v2620;
            v2644.i64[1] = v4300;
            v2622.i64[1] = v4298;
            v2645.i64[0] = v4328;
            v2645.i64[1] = v4304;
            v2603.i64[1] = v2627;
            v2600.i64[1] = v2628;
            v2630.i64[1] = v2629;
            v2646.i64[0] = v2623;
            v2646.i64[1] = v2624;
            v2647.i64[0] = v4356;
            v2647.i64[1] = v4330;
            v2648.i64[0] = v4362;
            v2648.i64[1] = v4332;
            v2626.i64[1] = v4334;
            v2649.i64[0] = v4365;
            v2649.i64[1] = v4336;
            v2650 = &v2604[v2660];
            *v2650 = (int64x2_t)v2609;
            v2650[1] = v2632;
            v2650[2] = v2633;
            v2650[3] = v2634;
            v2650[4].i64[0] = v4351;
            v2651 = (int8x16_t *)((char *)v2604 + 24 * v2660);
            v2651[4].i64[0] = v4342;
            v2651[2] = v2635;
            v2651[3] = v2612;
            *v2651 = v2637;
            v2651[1] = v2636;
            v2652 = &v2604[2 * v2660];
            v2652[4].i64[0] = v4344;
            v2652[2] = (int64x2_t)v2616;
            v2652[3] = v2638;
            *v2652 = (int64x2_t)v2614;
            v2652[1] = v2639;
            v2653 = (int8x16_t *)((char *)v2604 + 40 * v2660);
            v2653[4].i64[0] = v4340;
            v2653[2] = v2617;
            v2653[3] = v2640;
            *v2653 = v2642;
            v2653[1] = v2641;
            v2654 = &v2604[3 * v2660];
            v2654[4].i64[0] = v4347;
            v2654[2] = v2644;
            v2654[3] = v2643;
            *v2654 = v2645;
            v2654[1] = (int64x2_t)v2622;
            v2655 = (int8x16_t *)((char *)v2604 + 56 * v2660);
            v2655[4].i64[0] = v4338;
            v2655[2] = v2600;
            v2655[3] = v2603;
            *v2655 = v2646;
            v2655[1] = v2630;
            v2656 = &v2604[4 * v2660];
            v2656[4].i64[0] = v4354;
            v2656[2] = v2648;
            v2656[3] = v2647;
            v2568 += 4;
            *v2656 = v2649;
            v2656[1] = (int64x2_t)v2626;
          }
          while (v2568 != v2567);
          v2561 = *(unsigned int *)(a1 + 3156);
        }
        ++v2562;
        ++v2563;
      }
      while (v2562 < v2561);
    }
    v2707 = *(unsigned int *)(a1 + 4164);
    if ((_DWORD)v2707)
    {
      v2708 = 0;
      v2709 = *(unsigned int **)(a1 + 10568);
      do
      {
        v2710 = *(_QWORD *)(*(_QWORD *)(a1 + 4272) + 8 * v2708);
        if (v2710)
        {
          v2711 = *(_QWORD *)(a1 + 4240);
          v2712 = (*(_DWORD *)(a1 + 4264) * v2708);
          v2713 = (unsigned int *)(v2711 + 16 * (v2710 + v2712));
          v2714 = (unsigned int *)(v2711 + 16 * v2712);
          do
          {
            while (1)
            {
              v2716 = *v2709;
              v2717 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2714);
              v2718 = *(_QWORD *)(a1 + 4168) + 8 * *((_QWORD *)v2714 + 1);
              v2719 = *v6;
              v2720 = *(_QWORD *)(a1 + 20040);
              v2722 = *(int8x16_t *)(v2718 + 32);
              v2721 = *(int8x16_t *)(v2718 + 48);
              v2724 = *(int8x16_t *)v2718;
              v2723 = *(int8x16_t *)(v2718 + 16);
              v2725 = *(_QWORD *)(v2718 + 64);
              v2726 = vextq_s8(v2721, v2721, 8uLL).u64[0];
              v2727 = vextq_s8(v2722, v2722, 8uLL).u64[0];
              v2728 = vextq_s8(v2723, v2723, 8uLL).u64[0];
              v2729 = vextq_s8(v2724, v2724, 8uLL).u64[0];
              if (*v2709 >= v2717)
                break;
              v2715 = (_QWORD *)(v2720 + 8 * (v2716 + (_DWORD)v2719 * v2717));
              *v2715 = v2724.i64[0];
              v2715[v2719] = v2729;
              v2715[2 * v2719] = v2723.i64[0];
              v2715[3 * v2719] = v2728;
              v2715[4 * v2719] = v2722.i64[0];
              v2715[5 * v2719] = v2727;
              v2715[6 * v2719] = v2721.i64[0];
              v2715[7 * v2719] = v2726;
              v2715[8 * v2719] = v2725;
              v2714 += 4;
              if (v2714 == v2713)
                goto LABEL_660;
            }
            v2724.i64[1] = v2729;
            v2730 = (int8x16_t *)(v2720 + 8 * (v2717 + (_DWORD)v2719 * v2716));
            v2723.i64[1] = v2728;
            v2722.i64[1] = v2727;
            *v2730 = v2724;
            v2730[1] = v2723;
            v2730[4].i64[0] = v2725;
            v2721.i64[1] = v2726;
            v2730[2] = v2722;
            v2730[3] = v2721;
            v2714 += 4;
          }
          while (v2714 != v2713);
LABEL_660:
          v2707 = *(unsigned int *)(a1 + 4164);
        }
        ++v2708;
        ++v2709;
      }
      while (v2708 < v2707);
    }
    v2750 = *(unsigned int *)(a1 + 5172);
    if ((_DWORD)v2750)
    {
      v2751 = 0;
      v2752 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2753 = *(_QWORD *)(*(_QWORD *)(a1 + 5280) + 8 * v2751);
        if (v2753)
        {
          v2754 = *(_QWORD *)(a1 + 5248);
          v2755 = (*(_DWORD *)(a1 + 5272) * v2751);
          v2756 = (unsigned int *)(v2754 + 16 * (v2753 + v2755));
          v2757 = (unsigned int *)(v2754 + 16 * v2755);
          do
          {
            while (1)
            {
              v2798 = *v2752;
              v2799 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2757);
              v2800 = *(_QWORD *)(a1 + 5176) + 8 * *((_QWORD *)v2757 + 1);
              v2801 = *v6;
              v2802 = *(_QWORD *)(a1 + 20040);
              if (*v2752 >= v2799)
                break;
              v2758.i64[0] = *(_QWORD *)(v2800 + 64);
              v2759 = (int64x2_t *)(v2802 + 8 * (v2798 + (_DWORD)v2801 * v2799));
              v2761 = *(int64x2_t *)(v2800 + 32);
              v2760 = *(int64x2_t *)(v2800 + 48);
              v2762 = *(int64x2_t *)(v2800 + 16);
              v2763 = *(int64x2_t *)(v2800 + 120);
              v2764 = *(int64x2_t *)(v2800 + 104);
              v2765 = *(int64x2_t *)(v2800 + 88);
              v2766 = *(int64x2_t *)(v2800 + 72);
              v2767.i64[0] = *(_QWORD *)(v2800 + 208);
              v2769 = *(int64x2_t *)(v2800 + 176);
              v2768 = *(int64x2_t *)(v2800 + 192);
              v2771 = *(int64x2_t *)(v2800 + 144);
              v2770 = *(int64x2_t *)(v2800 + 160);
              v2772 = *(int64x2_t *)(v2800 + 216);
              v2773 = *(int64x2_t *)(v2800 + 264);
              v2774 = *(int64x2_t *)(v2800 + 248);
              v2775 = *(int64x2_t *)(v2800 + 232);
              v2776.i64[0] = *(_QWORD *)(v2800 + 352);
              v2778 = *(int64x2_t *)(v2800 + 320);
              v2777 = *(int64x2_t *)(v2800 + 336);
              v2780 = *(int64x2_t *)(v2800 + 288);
              v2779 = *(int64x2_t *)(v2800 + 304);
              v2781 = *(int64x2_t *)(v2800 + 392);
              v2782 = *(int64x2_t *)(v2800 + 408);
              v2783 = *(int64x2_t *)(v2800 + 376);
              v2784 = vzip1q_s64(*(int64x2_t *)v2800, v2766);
              v2785 = vzip1q_s64(v2780, *(int64x2_t *)(v2800 + 360));
              v2786 = vzip1q_s64(v2771, v2772);
              v2787 = vzip2q_s64(*(int64x2_t *)v2800, v2766);
              v2788 = vzip2q_s64(v2771, v2772);
              v2789 = vzip2q_s64(v2780, *(int64x2_t *)(v2800 + 360));
              v2758.i64[1] = *(_QWORD *)(v2800 + 136);
              v2767.i64[1] = *(_QWORD *)(v2800 + 280);
              v2776.i64[1] = *(_QWORD *)(v2800 + 424);
              v2759[1] = v2786;
              v2759[2] = v2785;
              *v2759 = v2784;
              v2790 = (int64x2_t *)((char *)v2759 + 8 * v2801);
              v2790[1] = v2788;
              v2790[2] = v2789;
              *v2790 = v2787;
              v2791 = &v2759[v2801];
              v2791[1] = vzip1q_s64(v2770, v2775);
              v2791[2] = vzip1q_s64(v2779, v2783);
              *v2791 = vzip1q_s64(v2762, v2765);
              v2792 = (int64x2_t *)((char *)v2759 + 24 * v2801);
              v2792[1] = vzip2q_s64(v2770, v2775);
              v2792[2] = vzip2q_s64(v2779, v2783);
              *v2792 = vzip2q_s64(v2762, v2765);
              v2793 = &v2759[2 * v2801];
              v2793[1] = vzip1q_s64(v2769, v2774);
              v2793[2] = vzip1q_s64(v2778, v2781);
              *v2793 = vzip1q_s64(v2761, v2764);
              v2794 = (int64x2_t *)((char *)v2759 + 40 * v2801);
              v2794[1] = vzip2q_s64(v2769, v2774);
              v2794[2] = vzip2q_s64(v2778, v2781);
              *v2794 = vzip2q_s64(v2761, v2764);
              v2795 = &v2759[3 * v2801];
              v2795[1] = vzip1q_s64(v2768, v2773);
              v2795[2] = vzip1q_s64(v2777, v2782);
              *v2795 = vzip1q_s64(v2760, v2763);
              v2796 = (int64x2_t *)((char *)v2759 + 56 * v2801);
              v2796[1] = vzip2q_s64(v2768, v2773);
              v2796[2] = vzip2q_s64(v2777, v2782);
              *v2796 = vzip2q_s64(v2760, v2763);
              v2797 = &v2759[4 * v2801];
              v2797[1] = v2767;
              v2797[2] = v2776;
              *v2797 = v2758;
              v2757 += 4;
              if (v2757 == v2756)
                goto LABEL_680;
            }
            v2803 = *(_QWORD *)(v2800 + 64);
            v2804 = v2802 + 8 * (v2799 + (_DWORD)v2801 * v2798);
            v2805 = *(_OWORD *)(v2800 + 48);
            v2806 = *(int64x2_t *)v2800;
            v2807 = *(_OWORD *)(v2800 + 16);
            v2808 = *(_OWORD *)(v2800 + 72);
            v2809 = *(_OWORD *)(v2800 + 88);
            v2810 = *(_OWORD *)(v2800 + 104);
            v2811 = *(_OWORD *)(v2800 + 120);
            v2812 = *(_QWORD *)(v2800 + 136);
            v2813 = *(_OWORD *)(v2800 + 144);
            v2814 = *(_OWORD *)(v2800 + 160);
            v2815 = *(_OWORD *)(v2800 + 176);
            v2816 = *(_OWORD *)(v2800 + 192);
            v2817 = *(_QWORD *)(v2800 + 208);
            v2818 = *(_OWORD *)(v2800 + 232);
            v2819 = *(_OWORD *)(v2800 + 248);
            v2820 = *(_OWORD *)(v2800 + 216);
            v2821 = *(_OWORD *)(v2800 + 264);
            v2822 = *(_QWORD *)(v2800 + 280);
            v2823 = *(_OWORD *)(v2800 + 288);
            v2824 = *(_OWORD *)(v2800 + 304);
            v2825 = *(_OWORD *)(v2800 + 320);
            v2826 = *(_OWORD *)(v2800 + 336);
            v2827 = *(_QWORD *)(v2800 + 352);
            v2828 = *(_OWORD *)(v2800 + 360);
            v2829 = *(_OWORD *)(v2800 + 376);
            v2830 = *(_OWORD *)(v2800 + 392);
            v2831 = *(_OWORD *)(v2800 + 408);
            v2832 = *(_QWORD *)(v2800 + 424);
            *(_OWORD *)(v2804 + 32) = *(_OWORD *)(v2800 + 32);
            *(_OWORD *)(v2804 + 48) = v2805;
            *(_QWORD *)(v2804 + 64) = v2803;
            *(int64x2_t *)v2804 = v2806;
            *(_OWORD *)(v2804 + 16) = v2807;
            v2833 = v2804 + 8 * v2801;
            *(_QWORD *)(v2833 + 64) = v2812;
            *(_OWORD *)(v2833 + 32) = v2810;
            *(_OWORD *)(v2833 + 48) = v2811;
            *(_OWORD *)v2833 = v2808;
            *(_OWORD *)(v2833 + 16) = v2809;
            v2834 = v2804 + 16 * v2801;
            *(_QWORD *)(v2834 + 64) = v2817;
            *(_OWORD *)(v2834 + 32) = v2815;
            *(_OWORD *)(v2834 + 48) = v2816;
            *(_OWORD *)v2834 = v2813;
            *(_OWORD *)(v2834 + 16) = v2814;
            v2835 = v2804 + 24 * v2801;
            *(_QWORD *)(v2835 + 64) = v2822;
            *(_OWORD *)(v2835 + 32) = v2819;
            *(_OWORD *)(v2835 + 48) = v2821;
            *(_OWORD *)v2835 = v2820;
            *(_OWORD *)(v2835 + 16) = v2818;
            v2836 = v2804 + 32 * v2801;
            *(_QWORD *)(v2836 + 64) = v2827;
            *(_OWORD *)(v2836 + 32) = v2825;
            *(_OWORD *)(v2836 + 48) = v2826;
            *(_OWORD *)v2836 = v2823;
            *(_OWORD *)(v2836 + 16) = v2824;
            v2837 = v2804 + 40 * v2801;
            *(_QWORD *)(v2837 + 64) = v2832;
            *(_OWORD *)(v2837 + 32) = v2830;
            *(_OWORD *)(v2837 + 48) = v2831;
            *(_OWORD *)v2837 = v2828;
            *(_OWORD *)(v2837 + 16) = v2829;
            v2757 += 4;
          }
          while (v2757 != v2756);
LABEL_680:
          v2750 = *(unsigned int *)(a1 + 5172);
        }
        ++v2751;
        ++v2752;
      }
      while (v2751 < v2750);
    }
    v2857 = *(unsigned int *)(a1 + 6180);
    if ((_DWORD)v2857)
    {
      v2858 = 0;
      v2859 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2860 = *(_QWORD *)(*(_QWORD *)(a1 + 6288) + 8 * v2858);
        if (v2860)
        {
          v2861 = *(_QWORD *)(a1 + 6256);
          v2862 = (*(_DWORD *)(a1 + 6280) * v2858);
          v2863 = (unsigned int *)(v2861 + 16 * (v2860 + v2862));
          v2864 = (unsigned int *)(v2861 + 16 * v2862);
          do
          {
            while (1)
            {
              v2892 = *v2859;
              v2893 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2864);
              v2894 = *(_QWORD *)(a1 + 6184) + 8 * *((_QWORD *)v2864 + 1);
              v2895 = *v6;
              v2896 = *(_QWORD *)(a1 + 20040);
              if (*v2859 >= v2893)
                break;
              v2865.i64[0] = *(_QWORD *)(v2894 + 64);
              v2866 = (int64x2_t *)(v2896 + 8 * (v2892 + (_DWORD)v2895 * v2893));
              v2868 = *(int64x2_t *)(v2894 + 32);
              v2867 = *(int64x2_t *)(v2894 + 48);
              v2869 = *(int64x2_t *)(v2894 + 16);
              v2870 = *(int64x2_t *)(v2894 + 120);
              v2871 = *(int64x2_t *)(v2894 + 104);
              v2872 = *(int64x2_t *)(v2894 + 88);
              v2873 = *(int64x2_t *)(v2894 + 72);
              v2874.i64[0] = *(_QWORD *)(v2894 + 208);
              v2876 = *(int64x2_t *)(v2894 + 176);
              v2875 = *(int64x2_t *)(v2894 + 192);
              v2878 = *(int64x2_t *)(v2894 + 144);
              v2877 = *(int64x2_t *)(v2894 + 160);
              v2879 = *(int64x2_t *)(v2894 + 216);
              v2880 = *(int64x2_t *)(v2894 + 264);
              v2881 = *(int64x2_t *)(v2894 + 248);
              v2882 = *(int64x2_t *)(v2894 + 232);
              v2883 = vzip2q_s64(*(int64x2_t *)v2894, v2873);
              v2865.i64[1] = *(_QWORD *)(v2894 + 136);
              v2874.i64[1] = *(_QWORD *)(v2894 + 280);
              *v2866 = vzip1q_s64(*(int64x2_t *)v2894, v2873);
              v2866[1] = vzip1q_s64(v2878, v2879);
              v2884 = (int64x2_t *)((char *)v2866 + 8 * v2895);
              *v2884 = v2883;
              v2884[1] = vzip2q_s64(v2878, v2879);
              v2885 = &v2866[v2895];
              *v2885 = vzip1q_s64(v2869, v2872);
              v2885[1] = vzip1q_s64(v2877, v2882);
              v2886 = (int64x2_t *)((char *)v2866 + 24 * v2895);
              *v2886 = vzip2q_s64(v2869, v2872);
              v2886[1] = vzip2q_s64(v2877, v2882);
              v2887 = &v2866[2 * v2895];
              *v2887 = vzip1q_s64(v2868, v2871);
              v2887[1] = vzip1q_s64(v2876, v2881);
              v2888 = (int64x2_t *)((char *)v2866 + 40 * v2895);
              *v2888 = vzip2q_s64(v2868, v2871);
              v2888[1] = vzip2q_s64(v2876, v2881);
              v2889 = &v2866[3 * v2895];
              *v2889 = vzip1q_s64(v2867, v2870);
              v2889[1] = vzip1q_s64(v2875, v2880);
              v2890 = (int64x2_t *)((char *)v2866 + 56 * v2895);
              *v2890 = vzip2q_s64(v2867, v2870);
              v2890[1] = vzip2q_s64(v2875, v2880);
              v2891 = &v2866[4 * v2895];
              *v2891 = v2865;
              v2891[1] = v2874;
              v2864 += 4;
              if (v2864 == v2863)
                goto LABEL_700;
            }
            v2897 = *(_QWORD *)(v2894 + 64);
            v2898 = v2896 + 8 * (v2893 + (_DWORD)v2895 * v2892);
            v2899 = *(_OWORD *)(v2894 + 48);
            v2900 = *(int64x2_t *)v2894;
            v2901 = *(_OWORD *)(v2894 + 16);
            v2902 = *(_OWORD *)(v2894 + 72);
            v2903 = *(_OWORD *)(v2894 + 88);
            v2904 = *(_OWORD *)(v2894 + 104);
            v2905 = *(_OWORD *)(v2894 + 120);
            v2906 = *(_QWORD *)(v2894 + 136);
            v2907 = *(_OWORD *)(v2894 + 144);
            v2908 = *(_OWORD *)(v2894 + 160);
            v2909 = *(_OWORD *)(v2894 + 176);
            v2910 = *(_OWORD *)(v2894 + 192);
            v2911 = *(_QWORD *)(v2894 + 208);
            v2912 = *(_OWORD *)(v2894 + 232);
            v2913 = *(_OWORD *)(v2894 + 248);
            v2914 = *(_OWORD *)(v2894 + 216);
            v2915 = *(_OWORD *)(v2894 + 264);
            v2916 = *(_QWORD *)(v2894 + 280);
            *(_OWORD *)(v2898 + 32) = *(_OWORD *)(v2894 + 32);
            *(_OWORD *)(v2898 + 48) = v2899;
            *(_QWORD *)(v2898 + 64) = v2897;
            *(int64x2_t *)v2898 = v2900;
            *(_OWORD *)(v2898 + 16) = v2901;
            v2917 = v2898 + 8 * v2895;
            *(_QWORD *)(v2917 + 64) = v2906;
            *(_OWORD *)(v2917 + 32) = v2904;
            *(_OWORD *)(v2917 + 48) = v2905;
            *(_OWORD *)v2917 = v2902;
            *(_OWORD *)(v2917 + 16) = v2903;
            v2918 = v2898 + 16 * v2895;
            *(_QWORD *)(v2918 + 64) = v2911;
            *(_OWORD *)(v2918 + 32) = v2909;
            *(_OWORD *)(v2918 + 48) = v2910;
            *(_OWORD *)v2918 = v2907;
            *(_OWORD *)(v2918 + 16) = v2908;
            v2919 = v2898 + 24 * v2895;
            *(_QWORD *)(v2919 + 64) = v2916;
            *(_OWORD *)(v2919 + 32) = v2913;
            *(_OWORD *)(v2919 + 48) = v2915;
            *(_OWORD *)v2919 = v2914;
            *(_OWORD *)(v2919 + 16) = v2912;
            v2864 += 4;
          }
          while (v2864 != v2863);
LABEL_700:
          v2857 = *(unsigned int *)(a1 + 6180);
        }
        ++v2858;
        ++v2859;
      }
      while (v2858 < v2857);
    }
    v2938 = *(unsigned int *)(a1 + 7188);
    if ((_DWORD)v2938)
    {
      v2939 = 0;
      v2940 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2941 = *(_QWORD *)(*(_QWORD *)(a1 + 7296) + 8 * v2939);
        if (v2941)
        {
          v2942 = *(_QWORD *)(a1 + 7264);
          v2943 = (*(_DWORD *)(a1 + 7288) * v2939);
          v2944 = (unsigned int *)(v2942 + 16 * (v2941 + v2943));
          v2945 = (unsigned int *)(v2942 + 16 * v2943);
          do
          {
            while (1)
            {
              v2973 = *v2940;
              v2974 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v2945);
              v2975 = *(_QWORD *)(a1 + 7192) + 8 * *((_QWORD *)v2945 + 1);
              v2976 = *v6;
              v2977 = *(_QWORD *)(a1 + 20040);
              if (*v2940 >= v2974)
                break;
              v2946.i64[0] = *(_QWORD *)(v2975 + 64);
              v2947 = (int64x2_t *)(v2977 + 8 * (v2973 + (_DWORD)v2976 * v2974));
              v2949 = *(int64x2_t *)(v2975 + 32);
              v2948 = *(int64x2_t *)(v2975 + 48);
              v2950 = *(int64x2_t *)(v2975 + 16);
              v2951 = *(int64x2_t *)(v2975 + 120);
              v2952 = *(int64x2_t *)(v2975 + 104);
              v2953 = *(int64x2_t *)(v2975 + 88);
              v2954 = *(int64x2_t *)(v2975 + 72);
              v2955.i64[0] = *(_QWORD *)(v2975 + 208);
              v2957 = *(int64x2_t *)(v2975 + 176);
              v2956 = *(int64x2_t *)(v2975 + 192);
              v2959 = *(int64x2_t *)(v2975 + 144);
              v2958 = *(int64x2_t *)(v2975 + 160);
              v2960 = *(int64x2_t *)(v2975 + 216);
              v2961 = *(int64x2_t *)(v2975 + 264);
              v2962 = *(int64x2_t *)(v2975 + 248);
              v2963 = *(int64x2_t *)(v2975 + 232);
              v2964 = vzip2q_s64(*(int64x2_t *)v2975, v2954);
              v2946.i64[1] = *(_QWORD *)(v2975 + 136);
              v2955.i64[1] = *(_QWORD *)(v2975 + 280);
              *v2947 = vzip1q_s64(*(int64x2_t *)v2975, v2954);
              v2947[1] = vzip1q_s64(v2959, v2960);
              v2965 = (int64x2_t *)((char *)v2947 + 8 * v2976);
              *v2965 = v2964;
              v2965[1] = vzip2q_s64(v2959, v2960);
              v2966 = &v2947[v2976];
              *v2966 = vzip1q_s64(v2950, v2953);
              v2966[1] = vzip1q_s64(v2958, v2963);
              v2967 = (int64x2_t *)((char *)v2947 + 24 * v2976);
              *v2967 = vzip2q_s64(v2950, v2953);
              v2967[1] = vzip2q_s64(v2958, v2963);
              v2968 = &v2947[2 * v2976];
              *v2968 = vzip1q_s64(v2949, v2952);
              v2968[1] = vzip1q_s64(v2957, v2962);
              v2969 = (int64x2_t *)((char *)v2947 + 40 * v2976);
              *v2969 = vzip2q_s64(v2949, v2952);
              v2969[1] = vzip2q_s64(v2957, v2962);
              v2970 = &v2947[3 * v2976];
              *v2970 = vzip1q_s64(v2948, v2951);
              v2970[1] = vzip1q_s64(v2956, v2961);
              v2971 = (int64x2_t *)((char *)v2947 + 56 * v2976);
              *v2971 = vzip2q_s64(v2948, v2951);
              v2971[1] = vzip2q_s64(v2956, v2961);
              v2972 = &v2947[4 * v2976];
              *v2972 = v2946;
              v2972[1] = v2955;
              v2945 += 4;
              if (v2945 == v2944)
                goto LABEL_720;
            }
            v2978 = *(_QWORD *)(v2975 + 64);
            v2979 = v2977 + 8 * (v2974 + (_DWORD)v2976 * v2973);
            v2980 = *(_OWORD *)(v2975 + 48);
            v2981 = *(int64x2_t *)v2975;
            v2982 = *(_OWORD *)(v2975 + 16);
            v2983 = *(_OWORD *)(v2975 + 72);
            v2984 = *(_OWORD *)(v2975 + 88);
            v2985 = *(_OWORD *)(v2975 + 104);
            v2986 = *(_OWORD *)(v2975 + 120);
            v2987 = *(_QWORD *)(v2975 + 136);
            v2988 = *(_OWORD *)(v2975 + 144);
            v2989 = *(_OWORD *)(v2975 + 160);
            v2990 = *(_OWORD *)(v2975 + 176);
            v2991 = *(_OWORD *)(v2975 + 192);
            v2992 = *(_QWORD *)(v2975 + 208);
            v2993 = *(_OWORD *)(v2975 + 232);
            v2994 = *(_OWORD *)(v2975 + 248);
            v2995 = *(_OWORD *)(v2975 + 216);
            v2996 = *(_OWORD *)(v2975 + 264);
            v2997 = *(_QWORD *)(v2975 + 280);
            *(_OWORD *)(v2979 + 32) = *(_OWORD *)(v2975 + 32);
            *(_OWORD *)(v2979 + 48) = v2980;
            *(_QWORD *)(v2979 + 64) = v2978;
            *(int64x2_t *)v2979 = v2981;
            *(_OWORD *)(v2979 + 16) = v2982;
            v2998 = v2979 + 8 * v2976;
            *(_QWORD *)(v2998 + 64) = v2987;
            *(_OWORD *)(v2998 + 32) = v2985;
            *(_OWORD *)(v2998 + 48) = v2986;
            *(_OWORD *)v2998 = v2983;
            *(_OWORD *)(v2998 + 16) = v2984;
            v2999 = v2979 + 16 * v2976;
            *(_QWORD *)(v2999 + 64) = v2992;
            *(_OWORD *)(v2999 + 32) = v2990;
            *(_OWORD *)(v2999 + 48) = v2991;
            *(_OWORD *)v2999 = v2988;
            *(_OWORD *)(v2999 + 16) = v2989;
            v3000 = v2979 + 24 * v2976;
            *(_QWORD *)(v3000 + 64) = v2997;
            *(_OWORD *)(v3000 + 32) = v2994;
            *(_OWORD *)(v3000 + 48) = v2996;
            *(_OWORD *)v3000 = v2995;
            *(_OWORD *)(v3000 + 16) = v2993;
            v2945 += 4;
          }
          while (v2945 != v2944);
LABEL_720:
          v2938 = *(unsigned int *)(a1 + 7188);
        }
        ++v2939;
        ++v2940;
      }
      while (v2939 < v2938);
    }
    v3089 = *(unsigned int *)(a1 + 8196);
    if ((_DWORD)v3089)
    {
      v3090 = 0;
      v3091 = *(unsigned int **)(a1 + 10664);
      do
      {
        v3092 = *(_QWORD *)(*(_QWORD *)(a1 + 8304) + 8 * v3090);
        if (v3092)
        {
          v3093 = *(_QWORD *)(a1 + 8272);
          v3094 = (*(_DWORD *)(a1 + 8296) * v3090);
          v3095 = (unsigned int *)(v3093 + 16 * (v3092 + v3094));
          v3096 = (unsigned int *)(v3093 + 16 * v3094);
          do
          {
            while (1)
            {
              v3121 = *v3091;
              v3122 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3096);
              v3123 = *(_QWORD *)(a1 + 8200) + 8 * *((_QWORD *)v3096 + 1);
              v3124 = *v6;
              v3125 = *(_QWORD *)(a1 + 20040);
              if (*v3091 >= v3122)
                break;
              v3097.i64[0] = *(_QWORD *)(v3123 + 64);
              v3098 = (int64x2_t *)(v3125 + 8 * (v3121 + (_DWORD)v3124 * v3122));
              v3100 = *(int64x2_t *)(v3123 + 32);
              v3099 = *(int64x2_t *)(v3123 + 48);
              v3101 = *(int64x2_t *)(v3123 + 16);
              v3102 = *(int64x2_t *)(v3123 + 120);
              v3103 = *(int64x2_t *)(v3123 + 104);
              v3104 = *(int64x2_t *)(v3123 + 88);
              v3105 = *(int64x2_t *)(v3123 + 72);
              v3106 = *(_QWORD *)(v3123 + 208);
              v3108 = *(_OWORD *)(v3123 + 176);
              v3107 = *(_OWORD *)(v3123 + 192);
              v3110 = *(_OWORD *)(v3123 + 144);
              v3109 = *(_OWORD *)(v3123 + 160);
              v3111 = vzip1q_s64(*(int64x2_t *)v3123, v3105);
              v3112 = vzip2q_s64(*(int64x2_t *)v3123, v3105);
              v3097.i64[1] = *(_QWORD *)(v3123 + 136);
              v3098[1].i64[0] = v3110;
              *v3098 = v3111;
              v3113 = (int64x2_t *)((char *)v3098 + 8 * v3124);
              *v3113 = v3112;
              v3113[1].i64[0] = *((_QWORD *)&v3110 + 1);
              v3114 = &v3098[v3124];
              v3114[1].i64[0] = v3109;
              *v3114 = vzip1q_s64(v3101, v3104);
              v3115 = (int64x2_t *)((char *)v3098 + 24 * v3124);
              v3115[1].i64[0] = *((_QWORD *)&v3109 + 1);
              *v3115 = vzip2q_s64(v3101, v3104);
              v3116 = &v3098[2 * v3124];
              v3116[1].i64[0] = v3108;
              *v3116 = vzip1q_s64(v3100, v3103);
              v3117 = (int64x2_t *)((char *)v3098 + 40 * v3124);
              v3117[1].i64[0] = *((_QWORD *)&v3108 + 1);
              *v3117 = vzip2q_s64(v3100, v3103);
              v3118 = &v3098[3 * v3124];
              v3118[1].i64[0] = v3107;
              *v3118 = vzip1q_s64(v3099, v3102);
              v3119 = (int64x2_t *)((char *)v3098 + 56 * v3124);
              v3119[1].i64[0] = *((_QWORD *)&v3107 + 1);
              *v3119 = vzip2q_s64(v3099, v3102);
              v3120 = &v3098[4 * v3124];
              v3120[1].i64[0] = v3106;
              *v3120 = v3097;
              v3096 += 4;
              if (v3096 == v3095)
                goto LABEL_740;
            }
            v3126 = *(_QWORD *)(v3123 + 64);
            v3127 = v3125 + 8 * (v3122 + (_DWORD)v3124 * v3121);
            v3128 = *(_OWORD *)(v3123 + 48);
            v3129 = *(int64x2_t *)v3123;
            v3130 = *(_OWORD *)(v3123 + 16);
            v3131 = *(_OWORD *)(v3123 + 72);
            v3132 = *(_OWORD *)(v3123 + 88);
            v3133 = *(_OWORD *)(v3123 + 104);
            v3134 = *(_OWORD *)(v3123 + 120);
            v3135 = *(_QWORD *)(v3123 + 136);
            v3136 = *(_OWORD *)(v3123 + 144);
            v3137 = *(_OWORD *)(v3123 + 160);
            v3138 = *(_OWORD *)(v3123 + 176);
            v3139 = *(_OWORD *)(v3123 + 192);
            v3140 = *(_QWORD *)(v3123 + 208);
            *(_OWORD *)(v3127 + 32) = *(_OWORD *)(v3123 + 32);
            *(_OWORD *)(v3127 + 48) = v3128;
            *(_QWORD *)(v3127 + 64) = v3126;
            *(int64x2_t *)v3127 = v3129;
            *(_OWORD *)(v3127 + 16) = v3130;
            v3141 = v3127 + 8 * v3124;
            *(_QWORD *)(v3141 + 64) = v3135;
            *(_OWORD *)(v3141 + 32) = v3133;
            *(_OWORD *)(v3141 + 48) = v3134;
            *(_OWORD *)v3141 = v3131;
            *(_OWORD *)(v3141 + 16) = v3132;
            v3142 = v3127 + 16 * v3124;
            *(_QWORD *)(v3142 + 64) = v3140;
            *(_OWORD *)(v3142 + 32) = v3138;
            *(_OWORD *)(v3142 + 48) = v3139;
            *(_OWORD *)v3142 = v3136;
            *(_OWORD *)(v3142 + 16) = v3137;
            v3096 += 4;
          }
          while (v3096 != v3095);
LABEL_740:
          v3089 = *(unsigned int *)(a1 + 8196);
        }
        ++v3090;
        ++v3091;
      }
      while (v3090 < v3089);
    }
    v3262 = *(unsigned int *)(a1 + 2004);
    if ((_DWORD)v3262)
    {
      v3263 = 0;
      v3264 = *(unsigned int **)(a1 + 10520);
      do
      {
        v3265 = *(_QWORD *)(*(_QWORD *)(a1 + 2112) + 8 * v3263);
        if (v3265)
        {
          v3266 = *(_QWORD *)(a1 + 2080);
          v3267 = (*(_DWORD *)(a1 + 2104) * v3263);
          v3268 = (unsigned int *)(v3266 + 16 * (v3265 + v3267));
          v3269 = (unsigned int *)(v3266 + 16 * v3267);
          do
          {
            v3317 = *v3264;
            v3318 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3269);
            v3319 = *(_QWORD *)(a1 + 2008) + 8 * *((_QWORD *)v3269 + 1);
            v3320 = *v6;
            v3321 = *(_QWORD *)(a1 + 20040);
            if (*v3264 < v3318)
            {
              v3270 = (int64x2_t *)(v3321 + 8 * (v3317 + (_DWORD)v3320 * v3318));
              v3271 = *(int64x2_t *)(v3319 + 16);
              v3272 = *(int64x2_t *)(v3319 + 64);
              v3273 = *(int64x2_t *)(v3319 + 80);
              v3275 = *(int64x2_t *)(v3319 + 32);
              v3274 = *(int64x2_t *)(v3319 + 48);
              v3276 = *(int64x2_t *)(v3319 + 96);
              v3277 = *(int64x2_t *)(v3319 + 112);
              v3278 = *(int64x2_t *)(v3319 + 128);
              v3280 = *(int64x2_t *)(v3319 + 192);
              v3279 = *(int64x2_t *)(v3319 + 208);
              v3281 = *(int64x2_t *)(v3319 + 224);
              v3282 = vzip1q_s64(*(int64x2_t *)v3319, v3274);
              v3283 = vzip1q_s64(v3276, *(int64x2_t *)(v3319 + 144));
              v3284 = vzip1q_s64(v3280, *(int64x2_t *)(v3319 + 240));
              v3285.i64[0] = vdupq_laneq_s64(v3276, 1).u64[0];
              v3285.i64[1] = *(_QWORD *)(v3319 + 152);
              v3286 = vzip2q_s64(*(int64x2_t *)v3319, v3274);
              v3287.i64[0] = vdupq_laneq_s64(v3280, 1).u64[0];
              v3287.i64[1] = *(_QWORD *)(v3319 + 248);
              v3288 = (int8x16_t)vzip1q_s64(v3271, v3272);
              v3289 = (int8x16_t)vzip1q_s64(v3277, *(int64x2_t *)(v3319 + 160));
              v3290 = (int8x16_t)vzip1q_s64(v3279, *(int64x2_t *)(v3319 + 256));
              v3291 = vextq_s8(v3290, v3290, 8uLL).u64[0];
              v3292 = vextq_s8(v3289, v3289, 8uLL).u64[0];
              v3293 = vextq_s8(v3288, v3288, 8uLL).u64[0];
              v3294 = (int8x16_t)vzip2q_s64(v3271, v3272);
              v3295.i64[0] = vdupq_laneq_s64(v3277, 1).u64[0];
              v3295.i64[1] = *(_QWORD *)(v3319 + 168);
              v3296.i64[0] = vdupq_laneq_s64(v3279, 1).u64[0];
              v3296.i64[1] = *(_QWORD *)(v3319 + 264);
              v3297 = vextq_s8(v3294, v3294, 8uLL).u64[0];
              v3298 = vextq_s8(v3296, v3296, 8uLL).u64[0];
              v3299 = vextq_s8(v3295, v3295, 8uLL).u64[0];
              v3300 = (int8x16_t)vzip1q_s64(v3275, v3273);
              v3301 = (int8x16_t)vzip1q_s64(v3278, *(int64x2_t *)(v3319 + 176));
              v3302 = (int8x16_t)vzip1q_s64(v3281, *(int64x2_t *)(v3319 + 272));
              v3303 = vextq_s8(v3302, v3302, 8uLL).u64[0];
              v3304 = vextq_s8(v3301, v3301, 8uLL).u64[0];
              v3305 = vextq_s8(v3300, v3300, 8uLL).u64[0];
              v3306 = (int8x16_t)vzip2q_s64(v3275, v3273);
              v3307.i64[0] = vdupq_laneq_s64(v3278, 1).u64[0];
              v3307.i64[1] = *(_QWORD *)(v3319 + 184);
              v3308.i64[0] = vdupq_laneq_s64(v3281, 1).u64[0];
              v3308.i64[1] = *(_QWORD *)(v3319 + 280);
              v3309 = vextq_s8(v3306, v3306, 8uLL).u64[0];
              v3310 = vextq_s8(v3308, v3308, 8uLL).u64[0];
              v3311 = vextq_s8(v3307, v3307, 8uLL).u64[0];
              v3270[1] = v3283;
              v3270[2] = v3284;
              *v3270 = v3282;
              v3312 = (int64x2_t *)((char *)v3270 + 8 * v3320);
              v3312[1] = v3285;
            }
            else
            {
              v3322 = *(int64x2_t *)v3319;
              v3270 = (int64x2_t *)(v3321 + 8 * (v3318 + (_DWORD)v3320 * v3317));
              v3323 = *(int64x2_t *)(v3319 + 32);
              v3286 = *(int64x2_t *)(v3319 + 48);
              v3324 = *(int64x2_t *)(v3319 + 64);
              v3287 = *(int64x2_t *)(v3319 + 80);
              v3288 = *(int8x16_t *)(v3319 + 96);
              v3289 = *(int8x16_t *)(v3319 + 112);
              v3290 = *(int8x16_t *)(v3319 + 128);
              v3294 = *(int8x16_t *)(v3319 + 144);
              v3291 = vextq_s8(v3290, v3290, 8uLL).u64[0];
              v3292 = vextq_s8(v3289, v3289, 8uLL).u64[0];
              v3293 = vextq_s8(v3288, v3288, 8uLL).u64[0];
              v3295 = *(int8x16_t *)(v3319 + 160);
              v3296 = *(int8x16_t *)(v3319 + 176);
              v3298 = vextq_s8(v3296, v3296, 8uLL).u64[0];
              v3299 = vextq_s8(v3295, v3295, 8uLL).u64[0];
              v3297 = vextq_s8(v3294, v3294, 8uLL).u64[0];
              v3300 = *(int8x16_t *)(v3319 + 192);
              v3301 = *(int8x16_t *)(v3319 + 208);
              v3302 = *(int8x16_t *)(v3319 + 224);
              v3306 = *(int8x16_t *)(v3319 + 240);
              v3303 = vextq_s8(v3302, v3302, 8uLL).u64[0];
              v3304 = vextq_s8(v3301, v3301, 8uLL).u64[0];
              v3305 = vextq_s8(v3300, v3300, 8uLL).u64[0];
              v3307 = *(int8x16_t *)(v3319 + 256);
              v3308 = *(int8x16_t *)(v3319 + 272);
              v3310 = vextq_s8(v3308, v3308, 8uLL).u64[0];
              v3311 = vextq_s8(v3307, v3307, 8uLL).u64[0];
              v3309 = vextq_s8(v3306, v3306, 8uLL).u64[0];
              v3270[1] = *(int64x2_t *)(v3319 + 16);
              v3270[2] = v3323;
              *v3270 = v3322;
              v3312 = (int64x2_t *)((char *)v3270 + 8 * v3320);
              v3312[1] = v3324;
            }
            v3312[2] = v3287;
            *v3312 = v3286;
            v3288.i64[1] = v3293;
            v3289.i64[1] = v3292;
            v3313 = (int8x16_t *)&v3270[v3320];
            *v3313 = v3288;
            v3313[1] = v3289;
            v3290.i64[1] = v3291;
            v3313[2] = v3290;
            v3296.i64[1] = v3298;
            v3314 = (int8x16_t *)((char *)v3270 + 24 * v3320);
            v3295.i64[1] = v3299;
            v3294.i64[1] = v3297;
            v3314[1] = v3295;
            v3314[2] = v3296;
            *v3314 = v3294;
            v3315 = (int8x16_t *)&v3270[2 * v3320];
            v3302.i64[1] = v3303;
            v3301.i64[1] = v3304;
            v3300.i64[1] = v3305;
            v3315[1] = v3301;
            v3315[2] = v3302;
            *v3315 = v3300;
            v3316 = (int8x16_t *)((char *)v3270 + 40 * v3320);
            v3308.i64[1] = v3310;
            v3307.i64[1] = v3311;
            v3306.i64[1] = v3309;
            v3269 += 4;
            v3316[1] = v3307;
            v3316[2] = v3308;
            *v3316 = v3306;
          }
          while (v3269 != v3268);
          v3262 = *(unsigned int *)(a1 + 2004);
        }
        ++v3263;
        ++v3264;
      }
      while (v3263 < v3262);
    }
    v3349 = *(unsigned int *)(a1 + 3012);
    if ((_DWORD)v3349)
    {
      v3350 = 0;
      v3351 = *(unsigned int **)(a1 + 10544);
      do
      {
        v3352 = *(_QWORD *)(*(_QWORD *)(a1 + 3120) + 8 * v3350);
        if (v3352)
        {
          v3353 = *(_QWORD *)(a1 + 3088);
          v3354 = (*(_DWORD *)(a1 + 3112) * v3350);
          v3355 = (unsigned int *)(v3353 + 16 * (v3352 + v3354));
          v3356 = (unsigned int *)(v3353 + 16 * v3354);
          do
          {
            while (1)
            {
              v3391 = *v3351;
              v3392 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3356);
              v3393 = *(_QWORD *)(a1 + 3016) + 8 * *((_QWORD *)v3356 + 1);
              v3394 = *v6;
              v3395 = *(_QWORD *)(a1 + 20040);
              if (*v3351 >= v3392)
                break;
              v3357 = *(int64x2_t *)(v3393 + 16);
              v3358 = (int64x2_t *)(v3395 + 8 * (v3391 + (_DWORD)v3394 * v3392));
              v3360 = *(int64x2_t *)(v3393 + 64);
              v3359 = *(int64x2_t *)(v3393 + 80);
              v3361 = *(int64x2_t *)(v3393 + 32);
              v3362 = *(int64x2_t *)(v3393 + 48);
              v3364 = *(int64x2_t *)(v3393 + 96);
              v3363 = *(int64x2_t *)(v3393 + 112);
              v3366 = *(int64x2_t *)(v3393 + 160);
              v3365 = *(int64x2_t *)(v3393 + 176);
              v3367 = *(int64x2_t *)(v3393 + 128);
              v3368 = *(int64x2_t *)(v3393 + 144);
              v3370 = *(int64x2_t *)(v3393 + 192);
              v3369 = *(int64x2_t *)(v3393 + 208);
              v3372 = *(int64x2_t *)(v3393 + 256);
              v3371 = *(int64x2_t *)(v3393 + 272);
              v3373 = *(int64x2_t *)(v3393 + 224);
              v3374 = *(int64x2_t *)(v3393 + 240);
              v3376 = *(int64x2_t *)(v3393 + 288);
              v3375 = *(int64x2_t *)(v3393 + 304);
              v3378 = *(int64x2_t *)(v3393 + 352);
              v3377 = *(int64x2_t *)(v3393 + 368);
              v3379 = *(int64x2_t *)(v3393 + 320);
              v3380 = *(int64x2_t *)(v3393 + 336);
              v3382 = *(_OWORD *)(v3393 + 400);
              v3381 = *(_OWORD *)(v3393 + 416);
              v3383 = *(_OWORD *)(v3393 + 384);
              v3384 = vzip1q_s64(*(int64x2_t *)v3393, v3362);
              v3385 = vzip2q_s64(*(int64x2_t *)v3393, v3362);
              v3358[2] = vzip1q_s64(v3370, v3374);
              v3358[3] = vzip1q_s64(v3376, v3380);
              v3358[4].i64[0] = v3383;
              *v3358 = v3384;
              v3358[1] = vzip1q_s64(v3364, v3368);
              v3386 = (int64x2_t *)((char *)v3358 + 8 * v3394);
              v3386[2] = vzip2q_s64(v3370, v3374);
              v3386[3] = vzip2q_s64(v3376, v3380);
              *v3386 = v3385;
              v3386[1] = vzip2q_s64(v3364, v3368);
              v3386[4].i64[0] = *((_QWORD *)&v3383 + 1);
              v3387 = &v3358[v3394];
              v3387[4].i64[0] = v3382;
              v3387[2] = vzip1q_s64(v3369, v3372);
              v3387[3] = vzip1q_s64(v3375, v3378);
              *v3387 = vzip1q_s64(v3357, v3360);
              v3387[1] = vzip1q_s64(v3363, v3366);
              v3388 = (int64x2_t *)((char *)v3358 + 24 * v3394);
              v3388[4].i64[0] = *((_QWORD *)&v3382 + 1);
              v3388[2] = vzip2q_s64(v3369, v3372);
              v3388[3] = vzip2q_s64(v3375, v3378);
              *v3388 = vzip2q_s64(v3357, v3360);
              v3388[1] = vzip2q_s64(v3363, v3366);
              v3389 = &v3358[2 * v3394];
              v3389[4].i64[0] = v3381;
              v3389[2] = vzip1q_s64(v3373, v3371);
              v3389[3] = vzip1q_s64(v3379, v3377);
              *v3389 = vzip1q_s64(v3361, v3359);
              v3389[1] = vzip1q_s64(v3367, v3365);
              v3390 = (int64x2_t *)((char *)v3358 + 40 * v3394);
              v3390[4].i64[0] = *((_QWORD *)&v3381 + 1);
              v3390[2] = vzip2q_s64(v3373, v3371);
              v3390[3] = vzip2q_s64(v3379, v3377);
              *v3390 = vzip2q_s64(v3361, v3359);
              v3390[1] = vzip2q_s64(v3367, v3365);
              v3356 += 4;
              if (v3356 == v3355)
                goto LABEL_780;
            }
            v3396 = *(int64x2_t *)v3393;
            v3397 = (int64x2_t *)(v3395 + 8 * (v3392 + (_DWORD)v3394 * v3391));
            v3398 = *(int64x2_t *)(v3393 + 32);
            v3399 = *(_OWORD *)(v3393 + 48);
            v3400 = *(_OWORD *)(v3393 + 64);
            v3401 = *(_OWORD *)(v3393 + 80);
            v3402 = *(int64x2_t *)(v3393 + 96);
            v3403 = *(int64x2_t *)(v3393 + 112);
            v3404 = *(int64x2_t *)(v3393 + 128);
            v3405 = *(_OWORD *)(v3393 + 144);
            v3406 = *(_OWORD *)(v3393 + 160);
            v3407 = *(_OWORD *)(v3393 + 176);
            v3408 = *(int64x2_t *)(v3393 + 192);
            v3409 = *(int64x2_t *)(v3393 + 208);
            v3410 = *(int64x2_t *)(v3393 + 224);
            v3411 = *(_OWORD *)(v3393 + 240);
            v3412 = *(_OWORD *)(v3393 + 256);
            v3413 = *(_OWORD *)(v3393 + 272);
            v3414 = *(int64x2_t *)(v3393 + 288);
            v3415 = *(int64x2_t *)(v3393 + 304);
            v3416 = *(int64x2_t *)(v3393 + 320);
            v3417 = *(_OWORD *)(v3393 + 336);
            v3418 = *(_OWORD *)(v3393 + 352);
            v3419 = *(_OWORD *)(v3393 + 368);
            v3420 = *(int64x2_t *)(v3393 + 384);
            v3421 = *(int64x2_t *)(v3393 + 400);
            v3422 = *(int64x2_t *)(v3393 + 416);
            v3397[1] = *(int64x2_t *)(v3393 + 16);
            v3397[2] = v3398;
            *v3397 = v3396;
            v3423 = &v3397->i8[8 * v3394];
            *((_OWORD *)v3423 + 1) = v3400;
            *((_OWORD *)v3423 + 2) = v3401;
            *(_OWORD *)v3423 = v3399;
            v3424 = &v3397[v3394];
            v3424[1] = v3403;
            v3424[2] = v3404;
            *v3424 = v3402;
            v3425 = &v3397->i8[24 * v3394];
            *((_OWORD *)v3425 + 1) = v3406;
            *((_OWORD *)v3425 + 2) = v3407;
            *(_OWORD *)v3425 = v3405;
            v3426 = &v3397[2 * v3394];
            v3426[1] = v3409;
            v3426[2] = v3410;
            *v3426 = v3408;
            v3427 = &v3397->i8[40 * v3394];
            *((_OWORD *)v3427 + 1) = v3412;
            *((_OWORD *)v3427 + 2) = v3413;
            *(_OWORD *)v3427 = v3411;
            v3428 = &v3397[3 * v3394];
            v3428[1] = v3415;
            v3428[2] = v3416;
            *v3428 = v3414;
            v3429 = &v3397->i8[56 * v3394];
            *((_OWORD *)v3429 + 1) = v3418;
            *((_OWORD *)v3429 + 2) = v3419;
            *(_OWORD *)v3429 = v3417;
            v3430 = &v3397[4 * v3394];
            v3430[1] = v3421;
            v3430[2] = v3422;
            *v3430 = v3420;
            v3356 += 4;
          }
          while (v3356 != v3355);
LABEL_780:
          v3349 = *(unsigned int *)(a1 + 3012);
        }
        ++v3350;
        ++v3351;
      }
      while (v3350 < v3349);
    }
    v3519 = *(unsigned int *)(a1 + 4020);
    if ((_DWORD)v3519)
    {
      v3520 = 0;
      v3521 = *(unsigned int **)(a1 + 10568);
      do
      {
        v3522 = *(_QWORD *)(*(_QWORD *)(a1 + 4128) + 8 * v3520);
        if (v3522)
        {
          v3523 = *(_QWORD *)(a1 + 4096);
          v3524 = (*(_DWORD *)(a1 + 4120) * v3520);
          v3525 = (unsigned int *)(v3523 + 16 * (v3522 + v3524));
          v3526 = (unsigned int *)(v3523 + 16 * v3524);
          do
          {
            while (1)
            {
              v3528 = *v3521;
              v3529 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3526);
              v3530 = (int8x16_t *)(*(_QWORD *)(a1 + 4024) + 8 * *((_QWORD *)v3526 + 1));
              v3531 = *v6;
              v3532 = *(_QWORD *)(a1 + 20040);
              v3534 = v3530[1];
              v3533 = v3530[2];
              v3535 = *v3530;
              v3536 = vextq_s8(v3533, v3533, 8uLL).u64[0];
              v3537 = vextq_s8(v3534, v3534, 8uLL).u64[0];
              v3538 = vextq_s8(v3535, v3535, 8uLL).u64[0];
              if (*v3521 >= v3529)
                break;
              v3527 = (_QWORD *)(v3532 + 8 * (v3528 + (_DWORD)v3531 * v3529));
              *v3527 = v3535.i64[0];
              v3527[v3531] = v3538;
              v3527[2 * v3531] = v3534.i64[0];
              v3527[3 * v3531] = v3537;
              v3527[4 * v3531] = v3533.i64[0];
              v3527[5 * v3531] = v3536;
              v3526 += 4;
              if (v3526 == v3525)
                goto LABEL_800;
            }
            v3535.i64[1] = v3538;
            v3534.i64[1] = v3537;
            v3539 = (int8x16_t *)(v3532 + 8 * (v3529 + (_DWORD)v3531 * v3528));
            *v3539 = v3535;
            v3539[1] = v3534;
            v3533.i64[1] = v3536;
            v3539[2] = v3533;
            v3526 += 4;
          }
          while (v3526 != v3525);
LABEL_800:
          v3519 = *(unsigned int *)(a1 + 4020);
        }
        ++v3520;
        ++v3521;
      }
      while (v3520 < v3519);
    }
    v3603 = *(unsigned int *)(a1 + 5028);
    if ((_DWORD)v3603)
    {
      v3604 = 0;
      v3605 = *(unsigned int **)(a1 + 10592);
      do
      {
        v3606 = *(_QWORD *)(*(_QWORD *)(a1 + 5136) + 8 * v3604);
        if (v3606)
        {
          v3607 = *(_QWORD *)(a1 + 5104);
          v3608 = (*(_DWORD *)(a1 + 5128) * v3604);
          v3609 = (unsigned int *)(v3607 + 16 * (v3606 + v3608));
          v3610 = (unsigned int *)(v3607 + 16 * v3608);
          do
          {
            v3658 = *v3605;
            v3659 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3610);
            v3660 = *(_QWORD *)(a1 + 5032) + 8 * *((_QWORD *)v3610 + 1);
            v3661 = *v6;
            v3662 = *(_QWORD *)(a1 + 20040);
            if (*v3605 < v3659)
            {
              v3611 = (int64x2_t *)(v3662 + 8 * (v3658 + (_DWORD)v3661 * v3659));
              v3612 = *(int64x2_t *)(v3660 + 16);
              v3613 = *(int64x2_t *)(v3660 + 64);
              v3614 = *(int64x2_t *)(v3660 + 80);
              v3616 = *(int64x2_t *)(v3660 + 32);
              v3615 = *(int64x2_t *)(v3660 + 48);
              v3617 = *(int64x2_t *)(v3660 + 96);
              v3618 = *(int64x2_t *)(v3660 + 112);
              v3619 = *(int64x2_t *)(v3660 + 128);
              v3621 = *(int64x2_t *)(v3660 + 192);
              v3620 = *(int64x2_t *)(v3660 + 208);
              v3622 = *(int64x2_t *)(v3660 + 224);
              v3623 = vzip1q_s64(*(int64x2_t *)v3660, v3615);
              v3624 = vzip1q_s64(v3617, *(int64x2_t *)(v3660 + 144));
              v3625 = vzip1q_s64(v3621, *(int64x2_t *)(v3660 + 240));
              v3626.i64[0] = vdupq_laneq_s64(v3617, 1).u64[0];
              v3626.i64[1] = *(_QWORD *)(v3660 + 152);
              v3627 = vzip2q_s64(*(int64x2_t *)v3660, v3615);
              v3628.i64[0] = vdupq_laneq_s64(v3621, 1).u64[0];
              v3628.i64[1] = *(_QWORD *)(v3660 + 248);
              v3629 = (int8x16_t)vzip1q_s64(v3612, v3613);
              v3630 = (int8x16_t)vzip1q_s64(v3618, *(int64x2_t *)(v3660 + 160));
              v3631 = (int8x16_t)vzip1q_s64(v3620, *(int64x2_t *)(v3660 + 256));
              v3632 = vextq_s8(v3631, v3631, 8uLL).u64[0];
              v3633 = vextq_s8(v3630, v3630, 8uLL).u64[0];
              v3634 = vextq_s8(v3629, v3629, 8uLL).u64[0];
              v3635 = (int8x16_t)vzip2q_s64(v3612, v3613);
              v3636.i64[0] = vdupq_laneq_s64(v3618, 1).u64[0];
              v3636.i64[1] = *(_QWORD *)(v3660 + 168);
              v3637.i64[0] = vdupq_laneq_s64(v3620, 1).u64[0];
              v3637.i64[1] = *(_QWORD *)(v3660 + 264);
              v3638 = vextq_s8(v3635, v3635, 8uLL).u64[0];
              v3639 = vextq_s8(v3637, v3637, 8uLL).u64[0];
              v3640 = vextq_s8(v3636, v3636, 8uLL).u64[0];
              v3641 = (int8x16_t)vzip1q_s64(v3616, v3614);
              v3642 = (int8x16_t)vzip1q_s64(v3619, *(int64x2_t *)(v3660 + 176));
              v3643 = (int8x16_t)vzip1q_s64(v3622, *(int64x2_t *)(v3660 + 272));
              v3644 = vextq_s8(v3643, v3643, 8uLL).u64[0];
              v3645 = vextq_s8(v3642, v3642, 8uLL).u64[0];
              v3646 = vextq_s8(v3641, v3641, 8uLL).u64[0];
              v3647 = (int8x16_t)vzip2q_s64(v3616, v3614);
              v3648.i64[0] = vdupq_laneq_s64(v3619, 1).u64[0];
              v3648.i64[1] = *(_QWORD *)(v3660 + 184);
              v3649.i64[0] = vdupq_laneq_s64(v3622, 1).u64[0];
              v3649.i64[1] = *(_QWORD *)(v3660 + 280);
              v3650 = vextq_s8(v3647, v3647, 8uLL).u64[0];
              v3651 = vextq_s8(v3649, v3649, 8uLL).u64[0];
              v3652 = vextq_s8(v3648, v3648, 8uLL).u64[0];
              v3611[1] = v3624;
              v3611[2] = v3625;
              *v3611 = v3623;
              v3653 = (int64x2_t *)((char *)v3611 + 8 * v3661);
              v3653[1] = v3626;
            }
            else
            {
              v3663 = *(int64x2_t *)v3660;
              v3611 = (int64x2_t *)(v3662 + 8 * (v3659 + (_DWORD)v3661 * v3658));
              v3664 = *(int64x2_t *)(v3660 + 32);
              v3627 = *(int64x2_t *)(v3660 + 48);
              v3665 = *(int64x2_t *)(v3660 + 64);
              v3628 = *(int64x2_t *)(v3660 + 80);
              v3629 = *(int8x16_t *)(v3660 + 96);
              v3630 = *(int8x16_t *)(v3660 + 112);
              v3631 = *(int8x16_t *)(v3660 + 128);
              v3635 = *(int8x16_t *)(v3660 + 144);
              v3632 = vextq_s8(v3631, v3631, 8uLL).u64[0];
              v3633 = vextq_s8(v3630, v3630, 8uLL).u64[0];
              v3634 = vextq_s8(v3629, v3629, 8uLL).u64[0];
              v3636 = *(int8x16_t *)(v3660 + 160);
              v3637 = *(int8x16_t *)(v3660 + 176);
              v3639 = vextq_s8(v3637, v3637, 8uLL).u64[0];
              v3640 = vextq_s8(v3636, v3636, 8uLL).u64[0];
              v3638 = vextq_s8(v3635, v3635, 8uLL).u64[0];
              v3641 = *(int8x16_t *)(v3660 + 192);
              v3642 = *(int8x16_t *)(v3660 + 208);
              v3643 = *(int8x16_t *)(v3660 + 224);
              v3647 = *(int8x16_t *)(v3660 + 240);
              v3644 = vextq_s8(v3643, v3643, 8uLL).u64[0];
              v3645 = vextq_s8(v3642, v3642, 8uLL).u64[0];
              v3646 = vextq_s8(v3641, v3641, 8uLL).u64[0];
              v3648 = *(int8x16_t *)(v3660 + 256);
              v3649 = *(int8x16_t *)(v3660 + 272);
              v3651 = vextq_s8(v3649, v3649, 8uLL).u64[0];
              v3652 = vextq_s8(v3648, v3648, 8uLL).u64[0];
              v3650 = vextq_s8(v3647, v3647, 8uLL).u64[0];
              v3611[1] = *(int64x2_t *)(v3660 + 16);
              v3611[2] = v3664;
              *v3611 = v3663;
              v3653 = (int64x2_t *)((char *)v3611 + 8 * v3661);
              v3653[1] = v3665;
            }
            v3653[2] = v3628;
            *v3653 = v3627;
            v3629.i64[1] = v3634;
            v3630.i64[1] = v3633;
            v3654 = (int8x16_t *)&v3611[v3661];
            *v3654 = v3629;
            v3654[1] = v3630;
            v3631.i64[1] = v3632;
            v3654[2] = v3631;
            v3637.i64[1] = v3639;
            v3655 = (int8x16_t *)((char *)v3611 + 24 * v3661);
            v3636.i64[1] = v3640;
            v3635.i64[1] = v3638;
            v3655[1] = v3636;
            v3655[2] = v3637;
            *v3655 = v3635;
            v3656 = (int8x16_t *)&v3611[2 * v3661];
            v3643.i64[1] = v3644;
            v3642.i64[1] = v3645;
            v3641.i64[1] = v3646;
            v3656[1] = v3642;
            v3656[2] = v3643;
            *v3656 = v3641;
            v3657 = (int8x16_t *)((char *)v3611 + 40 * v3661);
            v3649.i64[1] = v3651;
            v3648.i64[1] = v3652;
            v3647.i64[1] = v3650;
            v3610 += 4;
            v3657[1] = v3648;
            v3657[2] = v3649;
            *v3657 = v3647;
          }
          while (v3610 != v3609);
          v3603 = *(unsigned int *)(a1 + 5028);
        }
        ++v3604;
        ++v3605;
      }
      while (v3604 < v3603);
    }
    v3729 = *(unsigned int *)(a1 + 6036);
    if ((_DWORD)v3729)
    {
      v3730 = 0;
      v3731 = *(unsigned int **)(a1 + 10616);
      do
      {
        v3732 = *(_QWORD *)(*(_QWORD *)(a1 + 6144) + 8 * v3730);
        if (v3732)
        {
          v3733 = *(_QWORD *)(a1 + 6112);
          v3734 = (*(_DWORD *)(a1 + 6136) * v3730);
          v3735 = (unsigned int *)(v3733 + 16 * (v3732 + v3734));
          v3736 = (unsigned int *)(v3733 + 16 * v3734);
          do
          {
            while (1)
            {
              v3755 = *v3731;
              v3756 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3736);
              v3757 = *(_QWORD *)(a1 + 6040) + 8 * *((_QWORD *)v3736 + 1);
              v3758 = *v6;
              v3759 = *(_QWORD *)(a1 + 20040);
              if (*v3731 >= v3756)
                break;
              v3737 = *(int64x2_t *)(v3757 + 16);
              v3738 = (int64x2_t *)(v3759 + 8 * (v3755 + (_DWORD)v3758 * v3756));
              v3740 = *(int64x2_t *)(v3757 + 64);
              v3739 = *(int64x2_t *)(v3757 + 80);
              v3741 = *(int64x2_t *)(v3757 + 32);
              v3742 = *(int64x2_t *)(v3757 + 48);
              v3744 = *(int64x2_t *)(v3757 + 96);
              v3743 = *(int64x2_t *)(v3757 + 112);
              v3746 = *(int64x2_t *)(v3757 + 160);
              v3745 = *(int64x2_t *)(v3757 + 176);
              v3747 = *(int64x2_t *)(v3757 + 128);
              v3748 = *(int64x2_t *)(v3757 + 144);
              v3749 = vzip2q_s64(*(int64x2_t *)v3757, v3742);
              *v3738 = vzip1q_s64(*(int64x2_t *)v3757, v3742);
              v3738[1] = vzip1q_s64(v3744, v3748);
              v3750 = (int64x2_t *)((char *)v3738 + 8 * v3758);
              *v3750 = v3749;
              v3750[1] = vzip2q_s64(v3744, v3748);
              v3751 = &v3738[v3758];
              *v3751 = vzip1q_s64(v3737, v3740);
              v3751[1] = vzip1q_s64(v3743, v3746);
              v3752 = (int64x2_t *)((char *)v3738 + 24 * v3758);
              *v3752 = vzip2q_s64(v3737, v3740);
              v3752[1] = vzip2q_s64(v3743, v3746);
              v3753 = &v3738[2 * v3758];
              *v3753 = vzip1q_s64(v3741, v3739);
              v3753[1] = vzip1q_s64(v3747, v3745);
              v3754 = (int64x2_t *)((char *)v3738 + 40 * v3758);
              *v3754 = vzip2q_s64(v3741, v3739);
              v3754[1] = vzip2q_s64(v3747, v3745);
              v3736 += 4;
              if (v3736 == v3735)
                goto LABEL_840;
            }
            v3760 = *(int64x2_t *)v3757;
            v3761 = (int64x2_t *)(v3759 + 8 * (v3756 + (_DWORD)v3758 * v3755));
            v3762 = *(int64x2_t *)(v3757 + 32);
            v3763 = *(_OWORD *)(v3757 + 48);
            v3764 = *(_OWORD *)(v3757 + 64);
            v3765 = *(_OWORD *)(v3757 + 80);
            v3766 = *(int64x2_t *)(v3757 + 96);
            v3767 = *(int64x2_t *)(v3757 + 112);
            v3768 = *(int64x2_t *)(v3757 + 128);
            v3769 = *(_OWORD *)(v3757 + 144);
            v3770 = *(_OWORD *)(v3757 + 160);
            v3771 = *(_OWORD *)(v3757 + 176);
            v3761[1] = *(int64x2_t *)(v3757 + 16);
            v3761[2] = v3762;
            *v3761 = v3760;
            v3772 = &v3761->i8[8 * v3758];
            *((_OWORD *)v3772 + 1) = v3764;
            *((_OWORD *)v3772 + 2) = v3765;
            *(_OWORD *)v3772 = v3763;
            v3773 = &v3761[v3758];
            v3773[1] = v3767;
            v3773[2] = v3768;
            *v3773 = v3766;
            v3774 = &v3761->i8[24 * v3758];
            *((_OWORD *)v3774 + 1) = v3770;
            *((_OWORD *)v3774 + 2) = v3771;
            *(_OWORD *)v3774 = v3769;
            v3736 += 4;
          }
          while (v3736 != v3735);
LABEL_840:
          v3729 = *(unsigned int *)(a1 + 6036);
        }
        ++v3730;
        ++v3731;
      }
      while (v3730 < v3729);
    }
    v3829 = *(unsigned int *)(a1 + 7044);
    if ((_DWORD)v3829)
    {
      v3830 = 0;
      v3831 = *(unsigned int **)(a1 + 10640);
      do
      {
        v3832 = *(_QWORD *)(*(_QWORD *)(a1 + 7152) + 8 * v3830);
        if (v3832)
        {
          v3833 = *(_QWORD *)(a1 + 7120);
          v3834 = (*(_DWORD *)(a1 + 7144) * v3830);
          v3835 = (unsigned int *)(v3833 + 16 * (v3832 + v3834));
          v3836 = (unsigned int *)(v3833 + 16 * v3834);
          do
          {
            while (1)
            {
              v3855 = *v3831;
              v3856 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3836);
              v3857 = *(_QWORD *)(a1 + 7048) + 8 * *((_QWORD *)v3836 + 1);
              v3858 = *v6;
              v3859 = *(_QWORD *)(a1 + 20040);
              if (*v3831 >= v3856)
                break;
              v3837 = *(int64x2_t *)(v3857 + 16);
              v3838 = (int64x2_t *)(v3859 + 8 * (v3855 + (_DWORD)v3858 * v3856));
              v3840 = *(int64x2_t *)(v3857 + 64);
              v3839 = *(int64x2_t *)(v3857 + 80);
              v3841 = *(int64x2_t *)(v3857 + 32);
              v3842 = *(int64x2_t *)(v3857 + 48);
              v3844 = *(int64x2_t *)(v3857 + 96);
              v3843 = *(int64x2_t *)(v3857 + 112);
              v3846 = *(int64x2_t *)(v3857 + 160);
              v3845 = *(int64x2_t *)(v3857 + 176);
              v3847 = *(int64x2_t *)(v3857 + 128);
              v3848 = *(int64x2_t *)(v3857 + 144);
              v3849 = vzip2q_s64(*(int64x2_t *)v3857, v3842);
              *v3838 = vzip1q_s64(*(int64x2_t *)v3857, v3842);
              v3838[1] = vzip1q_s64(v3844, v3848);
              v3850 = (int64x2_t *)((char *)v3838 + 8 * v3858);
              *v3850 = v3849;
              v3850[1] = vzip2q_s64(v3844, v3848);
              v3851 = &v3838[v3858];
              *v3851 = vzip1q_s64(v3837, v3840);
              v3851[1] = vzip1q_s64(v3843, v3846);
              v3852 = (int64x2_t *)((char *)v3838 + 24 * v3858);
              *v3852 = vzip2q_s64(v3837, v3840);
              v3852[1] = vzip2q_s64(v3843, v3846);
              v3853 = &v3838[2 * v3858];
              *v3853 = vzip1q_s64(v3841, v3839);
              v3853[1] = vzip1q_s64(v3847, v3845);
              v3854 = (int64x2_t *)((char *)v3838 + 40 * v3858);
              *v3854 = vzip2q_s64(v3841, v3839);
              v3854[1] = vzip2q_s64(v3847, v3845);
              v3836 += 4;
              if (v3836 == v3835)
                goto LABEL_860;
            }
            v3860 = *(int64x2_t *)v3857;
            v3861 = (int64x2_t *)(v3859 + 8 * (v3856 + (_DWORD)v3858 * v3855));
            v3862 = *(int64x2_t *)(v3857 + 32);
            v3863 = *(_OWORD *)(v3857 + 48);
            v3864 = *(_OWORD *)(v3857 + 64);
            v3865 = *(_OWORD *)(v3857 + 80);
            v3866 = *(int64x2_t *)(v3857 + 96);
            v3867 = *(int64x2_t *)(v3857 + 112);
            v3868 = *(int64x2_t *)(v3857 + 128);
            v3869 = *(_OWORD *)(v3857 + 144);
            v3870 = *(_OWORD *)(v3857 + 160);
            v3871 = *(_OWORD *)(v3857 + 176);
            v3861[1] = *(int64x2_t *)(v3857 + 16);
            v3861[2] = v3862;
            *v3861 = v3860;
            v3872 = &v3861->i8[8 * v3858];
            *((_OWORD *)v3872 + 1) = v3864;
            *((_OWORD *)v3872 + 2) = v3865;
            *(_OWORD *)v3872 = v3863;
            v3873 = &v3861[v3858];
            v3873[1] = v3867;
            v3873[2] = v3868;
            *v3873 = v3866;
            v3874 = &v3861->i8[24 * v3858];
            *((_OWORD *)v3874 + 1) = v3870;
            *((_OWORD *)v3874 + 2) = v3871;
            *(_OWORD *)v3874 = v3869;
            v3836 += 4;
          }
          while (v3836 != v3835);
LABEL_860:
          v3829 = *(unsigned int *)(a1 + 7044);
        }
        ++v3830;
        ++v3831;
      }
      while (v3830 < v3829);
    }
    v3938 = *(unsigned int *)(a1 + 8052);
    if ((_DWORD)v3938)
    {
      v3939 = 0;
      v3940 = *(unsigned int **)(a1 + 10664);
      do
      {
        v3941 = *(_QWORD *)(*(_QWORD *)(a1 + 8160) + 8 * v3939);
        if (v3941)
        {
          v3942 = *(_QWORD *)(a1 + 8128);
          v3943 = (*(_DWORD *)(a1 + 8152) * v3939);
          v3944 = (unsigned int *)(v3942 + 16 * (v3941 + v3943));
          v3945 = (unsigned int *)(v3942 + 16 * v3943);
          do
          {
            while (1)
            {
              v3962 = *v3940;
              v3963 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3945);
              v3964 = *(_QWORD *)(a1 + 8056) + 8 * *((_QWORD *)v3945 + 1);
              v3965 = *v6;
              v3966 = *(_QWORD *)(a1 + 20040);
              if (*v3940 >= v3963)
                break;
              v3946 = *(int64x2_t *)(v3964 + 16);
              v3947 = (int64x2_t *)(v3966 + 8 * (v3962 + (_DWORD)v3965 * v3963));
              v3949 = *(int64x2_t *)(v3964 + 64);
              v3948 = *(int64x2_t *)(v3964 + 80);
              v3950 = *(int64x2_t *)(v3964 + 32);
              v3951 = *(int64x2_t *)(v3964 + 48);
              v3953 = *(_OWORD *)(v3964 + 112);
              v3952 = *(_OWORD *)(v3964 + 128);
              v3954 = *(_OWORD *)(v3964 + 96);
              v3955 = vzip1q_s64(*(int64x2_t *)v3964, v3951);
              v3956 = vzip2q_s64(*(int64x2_t *)v3964, v3951);
              v3947[1].i64[0] = v3954;
              *v3947 = v3955;
              v3957 = (int64x2_t *)((char *)v3947 + 8 * v3965);
              *v3957 = v3956;
              v3957[1].i64[0] = *((_QWORD *)&v3954 + 1);
              v3958 = &v3947[v3965];
              v3958[1].i64[0] = v3953;
              *v3958 = vzip1q_s64(v3946, v3949);
              v3959 = (int64x2_t *)((char *)v3947 + 24 * v3965);
              v3959[1].i64[0] = *((_QWORD *)&v3953 + 1);
              *v3959 = vzip2q_s64(v3946, v3949);
              v3960 = &v3947[2 * v3965];
              v3960[1].i64[0] = v3952;
              *v3960 = vzip1q_s64(v3950, v3948);
              v3961 = (int64x2_t *)((char *)v3947 + 40 * v3965);
              v3961[1].i64[0] = *((_QWORD *)&v3952 + 1);
              *v3961 = vzip2q_s64(v3950, v3948);
              v3945 += 4;
              if (v3945 == v3944)
                goto LABEL_880;
            }
            v3967 = *(int64x2_t *)v3964;
            v3968 = (int64x2_t *)(v3966 + 8 * (v3963 + (_DWORD)v3965 * v3962));
            v3969 = *(int64x2_t *)(v3964 + 32);
            v3970 = *(_OWORD *)(v3964 + 48);
            v3971 = *(_OWORD *)(v3964 + 64);
            v3972 = *(_OWORD *)(v3964 + 80);
            v3973 = *(int64x2_t *)(v3964 + 96);
            v3974 = *(int64x2_t *)(v3964 + 112);
            v3975 = *(int64x2_t *)(v3964 + 128);
            v3968[1] = *(int64x2_t *)(v3964 + 16);
            v3968[2] = v3969;
            *v3968 = v3967;
            v3976 = &v3968->i8[8 * v3965];
            *((_OWORD *)v3976 + 1) = v3971;
            *((_OWORD *)v3976 + 2) = v3972;
            *(_OWORD *)v3976 = v3970;
            v3977 = &v3968[v3965];
            v3977[1] = v3974;
            v3977[2] = v3975;
            *v3977 = v3973;
            v3945 += 4;
          }
          while (v3945 != v3944);
LABEL_880:
          v3938 = *(unsigned int *)(a1 + 8052);
        }
        ++v3939;
        ++v3940;
      }
      while (v3939 < v3938);
    }
  }
  else
  {
    *v6 = v9;
    *(_DWORD *)(a1 + 20060) = v9;
    v57 = v9 * (unint64_t)v9;
    v58 = v9;
    if (*(_QWORD *)(a1 + 20048) < v57)
    {
      if (*v7)
        MEMORY[0x212BC6368](*v7, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 20040) = 0;
      v59 = (8 * v57 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 20048) = v59 >> 3;
      *v7 = operator new(v59, (std::align_val_t)0x20uLL);
      v58 = *v6;
      v9 = *(_DWORD *)(a1 + 20060);
    }
    v60 = v58 * v9;
    if (v60)
      bzero(*v7, 8 * v60);
    v61 = *(unsigned int *)(a1 + 2868);
    if ((_DWORD)v61)
    {
      v62 = 0;
      v63 = *(unsigned int **)(a1 + 10520);
      do
      {
        v64 = *(_QWORD *)(*(_QWORD *)(a1 + 2976) + 8 * v62);
        if (v64)
        {
          v65 = *(_QWORD *)(a1 + 2944);
          v66 = (*(_DWORD *)(a1 + 2968) * v62);
          v67 = (unsigned int *)(v65 + 16 * (v64 + v66));
          v68 = (unsigned int *)(v65 + 16 * v66);
          do
          {
            while (1)
            {
              v86 = *v63;
              v87 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v68);
              v88 = *(_QWORD *)(a1 + 2872) + 8 * *((_QWORD *)v68 + 1);
              v89 = *v6;
              v90 = *(_QWORD *)(a1 + 20040);
              if (*v63 >= v87)
                break;
              v69 = *(int64x2_t *)v88;
              v70 = (int64x2_t *)(v90 + 8 * (v87 + (_DWORD)v89 * v86));
              v71 = *(_OWORD *)(v88 + 24);
              v72 = *(_QWORD *)(v88 + 40);
              v73 = *(int64x2_t *)(v88 + 48);
              v74 = *(_QWORD *)(v88 + 64);
              v75 = *(_OWORD *)(v88 + 72);
              v76 = *(_QWORD *)(v88 + 88);
              v77 = *(int64x2_t *)(v88 + 96);
              v78 = *(_QWORD *)(v88 + 112);
              v79 = *(_OWORD *)(v88 + 120);
              v80 = *(_QWORD *)(v88 + 136);
              v70[1].i64[0] = *(_QWORD *)(v88 + 16);
              *v70 = v69;
              v81 = &v70->i8[8 * v89];
              *((_QWORD *)v81 + 2) = v72;
              *(_OWORD *)v81 = v71;
              v82 = &v70[v89];
              v82[1].i64[0] = v74;
              *v82 = v73;
              v83 = &v70->i8[24 * v89];
              *((_QWORD *)v83 + 2) = v76;
              *(_OWORD *)v83 = v75;
              v84 = &v70[2 * v89];
              v84[1].i64[0] = v78;
              *v84 = v77;
              v85 = &v70->i8[40 * v89];
              *((_QWORD *)v85 + 2) = v80;
              *(_OWORD *)v85 = v79;
              v68 += 4;
              if (v68 == v67)
                goto LABEL_28;
            }
            v91 = (int64x2_t *)(v90 + 8 * (v86 + (_DWORD)v89 * v87));
            v92.i64[0] = *(_QWORD *)(v88 + 16);
            v93 = *(int64x2_t *)(v88 + 24);
            v94.i64[0] = *(_QWORD *)(v88 + 64);
            v95 = *(int64x2_t *)(v88 + 48);
            v96 = *(int64x2_t *)(v88 + 72);
            v97.i64[0] = *(_QWORD *)(v88 + 112);
            v98 = *(int64x2_t *)(v88 + 96);
            v99 = *(int64x2_t *)(v88 + 120);
            v100 = vzip1q_s64(*(int64x2_t *)v88, v93);
            v101 = vzip2q_s64(*(int64x2_t *)v88, v93);
            v92.i64[1] = *(_QWORD *)(v88 + 40);
            v94.i64[1] = *(_QWORD *)(v88 + 88);
            v97.i64[1] = *(_QWORD *)(v88 + 136);
            v91[1] = vzip1q_s64(v95, v96);
            v91[2] = vzip1q_s64(v98, v99);
            *v91 = v100;
            v102 = (int64x2_t *)((char *)v91 + 8 * v89);
            v102[1] = vzip1q_s64(vdupq_laneq_s64(v95, 1), vdupq_laneq_s64(v96, 1));
            v102[2] = vzip2q_s64(v98, v99);
            *v102 = v101;
            v103 = &v91[v89];
            v103[1] = v94;
            v103[2] = v97;
            *v103 = v92;
            v68 += 4;
          }
          while (v68 != v67);
LABEL_28:
          v61 = *(unsigned int *)(a1 + 2868);
        }
        ++v62;
        ++v63;
      }
      while (v62 < v61);
    }
    v161 = *(unsigned int *)(a1 + 3876);
    if ((_DWORD)v161)
    {
      v162 = 0;
      v163 = *(unsigned int **)(a1 + 10544);
      do
      {
        v164 = *(_QWORD *)(*(_QWORD *)(a1 + 3984) + 8 * v162);
        if (v164)
        {
          v165 = *(_QWORD *)(a1 + 3952);
          v166 = (*(_DWORD *)(a1 + 3976) * v162);
          v167 = (unsigned int *)(v165 + 16 * (v164 + v166));
          v168 = (unsigned int *)(v165 + 16 * v166);
          do
          {
            while (1)
            {
              v195 = *v163;
              v196 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v168);
              v197 = *(_QWORD *)(a1 + 3880) + 8 * *((_QWORD *)v168 + 1);
              v198 = *v6;
              v199 = *(_QWORD *)(a1 + 20040);
              if (*v163 >= v196)
                break;
              v169 = *(int64x2_t *)v197;
              v170 = (int64x2_t *)(v199 + 8 * (v196 + (_DWORD)v198 * v195));
              v171 = *(_OWORD *)(v197 + 24);
              v172 = *(_QWORD *)(v197 + 40);
              v173 = *(int64x2_t *)(v197 + 48);
              v174 = *(_QWORD *)(v197 + 64);
              v175 = *(_OWORD *)(v197 + 72);
              v176 = *(_QWORD *)(v197 + 88);
              v177 = *(int64x2_t *)(v197 + 96);
              v178 = *(_QWORD *)(v197 + 112);
              v179 = *(_OWORD *)(v197 + 120);
              v180 = *(_QWORD *)(v197 + 136);
              v181 = *(int64x2_t *)(v197 + 144);
              v182 = *(_QWORD *)(v197 + 160);
              v183 = *(_OWORD *)(v197 + 168);
              v184 = *(_QWORD *)(v197 + 184);
              v185 = *(int64x2_t *)(v197 + 192);
              v186 = *(_QWORD *)(v197 + 208);
              v170[1].i64[0] = *(_QWORD *)(v197 + 16);
              *v170 = v169;
              v187 = &v170->i8[8 * v198];
              *((_QWORD *)v187 + 2) = v172;
              *(_OWORD *)v187 = v171;
              v188 = &v170[v198];
              v188[1].i64[0] = v174;
              *v188 = v173;
              v189 = &v170->i8[24 * v198];
              *((_QWORD *)v189 + 2) = v176;
              *(_OWORD *)v189 = v175;
              v190 = &v170[2 * v198];
              v190[1].i64[0] = v178;
              *v190 = v177;
              v191 = &v170->i8[40 * v198];
              *((_QWORD *)v191 + 2) = v180;
              *(_OWORD *)v191 = v179;
              v192 = &v170[3 * v198];
              v192[1].i64[0] = v182;
              *v192 = v181;
              v193 = &v170->i8[56 * v198];
              *((_QWORD *)v193 + 2) = v184;
              *(_OWORD *)v193 = v183;
              v194 = &v170[4 * v198];
              v194[1].i64[0] = v186;
              *v194 = v185;
              v168 += 4;
              if (v168 == v167)
                goto LABEL_48;
            }
            v200.i64[0] = *(_QWORD *)(v197 + 16);
            v201 = (int64x2_t *)(v199 + 8 * (v195 + (_DWORD)v198 * v196));
            v202 = *(int64x2_t *)(v197 + 24);
            v203.i64[0] = *(_QWORD *)(v197 + 64);
            v204 = *(int64x2_t *)(v197 + 48);
            v205 = *(int64x2_t *)(v197 + 72);
            v206.i64[0] = *(_QWORD *)(v197 + 112);
            v207 = *(int64x2_t *)(v197 + 96);
            v208 = *(int64x2_t *)(v197 + 120);
            v209.i64[0] = *(_QWORD *)(v197 + 160);
            v210 = *(int64x2_t *)(v197 + 144);
            v211 = *(int64x2_t *)(v197 + 168);
            v212 = *(_QWORD *)(v197 + 208);
            v213 = *(_OWORD *)(v197 + 192);
            v214 = vzip1q_s64(*(int64x2_t *)v197, v202);
            v215 = vzip2q_s64(*(int64x2_t *)v197, v202);
            v200.i64[1] = *(_QWORD *)(v197 + 40);
            v203.i64[1] = *(_QWORD *)(v197 + 88);
            v206.i64[1] = *(_QWORD *)(v197 + 136);
            v209.i64[1] = *(_QWORD *)(v197 + 184);
            v201[2] = vzip1q_s64(v207, v208);
            v201[3] = vzip1q_s64(v210, v211);
            v201[4].i64[0] = v213;
            *v201 = v214;
            v201[1] = vzip1q_s64(v204, v205);
            v216 = (int64x2_t *)((char *)v201 + 8 * v198);
            v216[2] = vzip2q_s64(v207, v208);
            v216[3] = vzip2q_s64(v210, v211);
            *v216 = v215;
            v216[1] = vzip2q_s64(v204, v205);
            v216[4].i64[0] = *((_QWORD *)&v213 + 1);
            v217 = &v201[v198];
            v217[4].i64[0] = v212;
            v217[2] = v206;
            v217[3] = v209;
            *v217 = v200;
            v217[1] = v203;
            v168 += 4;
          }
          while (v168 != v167);
LABEL_48:
          v161 = *(unsigned int *)(a1 + 3876);
        }
        ++v162;
        ++v163;
      }
      while (v162 < v161);
    }
    v261 = *(unsigned int *)(a1 + 4884);
    if ((_DWORD)v261)
    {
      v262 = 0;
      v263 = *(unsigned int **)(a1 + 10568);
      do
      {
        v264 = *(_QWORD *)(*(_QWORD *)(a1 + 4992) + 8 * v262);
        if (v264)
        {
          v265 = *(_QWORD *)(a1 + 4960);
          v266 = (*(_DWORD *)(a1 + 4984) * v262);
          v267 = (unsigned int *)(v265 + 16 * (v264 + v266));
          v268 = (unsigned int *)(v265 + 16 * v266);
          do
          {
            while (1)
            {
              v270 = *v263;
              v271 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v268);
              v272 = *(_QWORD *)(a1 + 4888) + 8 * *((_QWORD *)v268 + 1);
              v273 = *v6;
              v274 = *(_QWORD *)(a1 + 20040);
              v275 = *(int8x16_t *)v272;
              v276 = *(_QWORD *)(v272 + 16);
              v277 = vextq_s8(v275, v275, 8uLL).u64[0];
              if (*v263 >= v271)
                break;
              v269 = (int8x16_t *)(v274 + 8 * (v271 + (_DWORD)v273 * v270));
              v269[1].i64[0] = v276;
              v275.i64[1] = v277;
              *v269 = v275;
              v268 += 4;
              if (v268 == v267)
                goto LABEL_68;
            }
            v278 = (_QWORD *)(v274 + 8 * (v270 + (_DWORD)v273 * v271));
            *v278 = v275.i64[0];
            v278[v273] = v277;
            v278[2 * v273] = v276;
            v268 += 4;
          }
          while (v268 != v267);
LABEL_68:
          v261 = *(unsigned int *)(a1 + 4884);
        }
        ++v262;
        ++v263;
      }
      while (v262 < v261);
    }
    v313 = *(unsigned int *)(a1 + 5892);
    if ((_DWORD)v313)
    {
      v314 = 0;
      v315 = *(unsigned int **)(a1 + 10592);
      do
      {
        v316 = *(_QWORD *)(*(_QWORD *)(a1 + 6000) + 8 * v314);
        if (v316)
        {
          v317 = *(_QWORD *)(a1 + 5968);
          v318 = (*(_DWORD *)(a1 + 5992) * v314);
          v319 = (unsigned int *)(v317 + 16 * (v316 + v318));
          v320 = (unsigned int *)(v317 + 16 * v318);
          do
          {
            while (1)
            {
              v338 = *v315;
              v339 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v320);
              v340 = *(_QWORD *)(a1 + 5896) + 8 * *((_QWORD *)v320 + 1);
              v341 = *v6;
              v342 = *(_QWORD *)(a1 + 20040);
              if (*v315 >= v339)
                break;
              v321 = *(int64x2_t *)v340;
              v322 = (int64x2_t *)(v342 + 8 * (v339 + (_DWORD)v341 * v338));
              v323 = *(_OWORD *)(v340 + 24);
              v324 = *(_QWORD *)(v340 + 40);
              v325 = *(int64x2_t *)(v340 + 48);
              v326 = *(_QWORD *)(v340 + 64);
              v327 = *(_OWORD *)(v340 + 72);
              v328 = *(_QWORD *)(v340 + 88);
              v329 = *(int64x2_t *)(v340 + 96);
              v330 = *(_QWORD *)(v340 + 112);
              v331 = *(_OWORD *)(v340 + 120);
              v332 = *(_QWORD *)(v340 + 136);
              v322[1].i64[0] = *(_QWORD *)(v340 + 16);
              *v322 = v321;
              v333 = &v322->i8[8 * v341];
              *((_QWORD *)v333 + 2) = v324;
              *(_OWORD *)v333 = v323;
              v334 = &v322[v341];
              v334[1].i64[0] = v326;
              *v334 = v325;
              v335 = &v322->i8[24 * v341];
              *((_QWORD *)v335 + 2) = v328;
              *(_OWORD *)v335 = v327;
              v336 = &v322[2 * v341];
              v336[1].i64[0] = v330;
              *v336 = v329;
              v337 = &v322->i8[40 * v341];
              *((_QWORD *)v337 + 2) = v332;
              *(_OWORD *)v337 = v331;
              v320 += 4;
              if (v320 == v319)
                goto LABEL_88;
            }
            v343 = (int64x2_t *)(v342 + 8 * (v338 + (_DWORD)v341 * v339));
            v344.i64[0] = *(_QWORD *)(v340 + 16);
            v345 = *(int64x2_t *)(v340 + 24);
            v346.i64[0] = *(_QWORD *)(v340 + 64);
            v347 = *(int64x2_t *)(v340 + 48);
            v348 = *(int64x2_t *)(v340 + 72);
            v349.i64[0] = *(_QWORD *)(v340 + 112);
            v350 = *(int64x2_t *)(v340 + 96);
            v351 = *(int64x2_t *)(v340 + 120);
            v352 = vzip1q_s64(*(int64x2_t *)v340, v345);
            v353 = vzip2q_s64(*(int64x2_t *)v340, v345);
            v344.i64[1] = *(_QWORD *)(v340 + 40);
            v346.i64[1] = *(_QWORD *)(v340 + 88);
            v349.i64[1] = *(_QWORD *)(v340 + 136);
            v343[1] = vzip1q_s64(v347, v348);
            v343[2] = vzip1q_s64(v350, v351);
            *v343 = v352;
            v354 = (int64x2_t *)((char *)v343 + 8 * v341);
            v354[1] = vzip1q_s64(vdupq_laneq_s64(v347, 1), vdupq_laneq_s64(v348, 1));
            v354[2] = vzip2q_s64(v350, v351);
            *v354 = v353;
            v355 = &v343[v341];
            v355[1] = v346;
            v355[2] = v349;
            *v355 = v344;
            v320 += 4;
          }
          while (v320 != v319);
LABEL_88:
          v313 = *(unsigned int *)(a1 + 5892);
        }
        ++v314;
        ++v315;
      }
      while (v314 < v313);
    }
    v390 = *(unsigned int *)(a1 + 6900);
    if ((_DWORD)v390)
    {
      v391 = 0;
      v392 = *(unsigned int **)(a1 + 10616);
      do
      {
        v393 = *(_QWORD *)(*(_QWORD *)(a1 + 7008) + 8 * v391);
        if (v393)
        {
          v394 = *(_QWORD *)(a1 + 6976);
          v395 = (*(_DWORD *)(a1 + 7000) * v391);
          v396 = (unsigned int *)(v394 + 16 * (v393 + v395));
          v397 = (unsigned int *)(v394 + 16 * v395);
          do
          {
            while (1)
            {
              v409 = *v392;
              v410 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v397);
              v411 = *(_QWORD *)(a1 + 6904) + 8 * *((_QWORD *)v397 + 1);
              v412 = *v6;
              v413 = *(_QWORD *)(a1 + 20040);
              if (*v392 >= v410)
                break;
              v398 = *(int64x2_t *)v411;
              v399 = (int64x2_t *)(v413 + 8 * (v410 + (_DWORD)v412 * v409));
              v400 = *(_OWORD *)(v411 + 24);
              v401 = *(_QWORD *)(v411 + 40);
              v402 = *(int64x2_t *)(v411 + 48);
              v403 = *(_QWORD *)(v411 + 64);
              v404 = *(_OWORD *)(v411 + 72);
              v405 = *(_QWORD *)(v411 + 88);
              v399[1].i64[0] = *(_QWORD *)(v411 + 16);
              *v399 = v398;
              v406 = &v399->i8[8 * v412];
              *((_QWORD *)v406 + 2) = v401;
              *(_OWORD *)v406 = v400;
              v407 = &v399[v412];
              v407[1].i64[0] = v403;
              *v407 = v402;
              v408 = &v399->i8[24 * v412];
              *((_QWORD *)v408 + 2) = v405;
              *(_OWORD *)v408 = v404;
              v397 += 4;
              if (v397 == v396)
                goto LABEL_108;
            }
            v414 = (int64x2_t *)(v413 + 8 * (v409 + (_DWORD)v412 * v410));
            v415.i64[0] = *(_QWORD *)(v411 + 16);
            v416 = *(int64x2_t *)(v411 + 24);
            v417.i64[0] = *(_QWORD *)(v411 + 64);
            v418 = *(int64x2_t *)(v411 + 48);
            v419 = vzip1q_s64(*(int64x2_t *)v411, v416);
            v420 = vzip1q_s64(v418, *(int64x2_t *)(v411 + 72));
            v421 = vzip2q_s64(*(int64x2_t *)v411, v416);
            v416.i64[0] = vdupq_laneq_s64(v418, 1).u64[0];
            v416.i64[1] = *(_QWORD *)(v411 + 80);
            v415.i64[1] = *(_QWORD *)(v411 + 40);
            v417.i64[1] = *(_QWORD *)(v411 + 88);
            *v414 = v419;
            v414[1] = v420;
            v422 = (int64x2_t *)((char *)v414 + 8 * v412);
            *v422 = v421;
            v422[1] = v416;
            v423 = &v414[v412];
            *v423 = v415;
            v423[1] = v417;
            v397 += 4;
          }
          while (v397 != v396);
LABEL_108:
          v390 = *(unsigned int *)(a1 + 6900);
        }
        ++v391;
        ++v392;
      }
      while (v391 < v390);
    }
    v453 = *(unsigned int *)(a1 + 7908);
    if ((_DWORD)v453)
    {
      v454 = 0;
      v455 = *(unsigned int **)(a1 + 10640);
      do
      {
        v456 = *(_QWORD *)(*(_QWORD *)(a1 + 8016) + 8 * v454);
        if (v456)
        {
          v457 = *(_QWORD *)(a1 + 7984);
          v458 = (*(_DWORD *)(a1 + 8008) * v454);
          v459 = (unsigned int *)(v457 + 16 * (v456 + v458));
          v460 = (unsigned int *)(v457 + 16 * v458);
          do
          {
            while (1)
            {
              v472 = *v455;
              v473 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v460);
              v474 = *(_QWORD *)(a1 + 7912) + 8 * *((_QWORD *)v460 + 1);
              v475 = *v6;
              v476 = *(_QWORD *)(a1 + 20040);
              if (*v455 >= v473)
                break;
              v461 = *(int64x2_t *)v474;
              v462 = (int64x2_t *)(v476 + 8 * (v473 + (_DWORD)v475 * v472));
              v463 = *(_OWORD *)(v474 + 24);
              v464 = *(_QWORD *)(v474 + 40);
              v465 = *(int64x2_t *)(v474 + 48);
              v466 = *(_QWORD *)(v474 + 64);
              v467 = *(_OWORD *)(v474 + 72);
              v468 = *(_QWORD *)(v474 + 88);
              v462[1].i64[0] = *(_QWORD *)(v474 + 16);
              *v462 = v461;
              v469 = &v462->i8[8 * v475];
              *((_QWORD *)v469 + 2) = v464;
              *(_OWORD *)v469 = v463;
              v470 = &v462[v475];
              v470[1].i64[0] = v466;
              *v470 = v465;
              v471 = &v462->i8[24 * v475];
              *((_QWORD *)v471 + 2) = v468;
              *(_OWORD *)v471 = v467;
              v460 += 4;
              if (v460 == v459)
                goto LABEL_128;
            }
            v477 = (int64x2_t *)(v476 + 8 * (v472 + (_DWORD)v475 * v473));
            v478.i64[0] = *(_QWORD *)(v474 + 16);
            v479 = *(int64x2_t *)(v474 + 24);
            v480.i64[0] = *(_QWORD *)(v474 + 64);
            v481 = *(int64x2_t *)(v474 + 48);
            v482 = vzip1q_s64(*(int64x2_t *)v474, v479);
            v483 = vzip1q_s64(v481, *(int64x2_t *)(v474 + 72));
            v484 = vzip2q_s64(*(int64x2_t *)v474, v479);
            v479.i64[0] = vdupq_laneq_s64(v481, 1).u64[0];
            v479.i64[1] = *(_QWORD *)(v474 + 80);
            v478.i64[1] = *(_QWORD *)(v474 + 40);
            v480.i64[1] = *(_QWORD *)(v474 + 88);
            *v477 = v482;
            v477[1] = v483;
            v485 = (int64x2_t *)((char *)v477 + 8 * v475);
            *v485 = v484;
            v485[1] = v479;
            v486 = &v477[v475];
            *v486 = v478;
            v486[1] = v480;
            v460 += 4;
          }
          while (v460 != v459);
LABEL_128:
          v453 = *(unsigned int *)(a1 + 7908);
        }
        ++v454;
        ++v455;
      }
      while (v454 < v453);
    }
    v536 = *(unsigned int *)(a1 + 8916);
    if ((_DWORD)v536)
    {
      v537 = 0;
      v538 = *(unsigned int **)(a1 + 10664);
      do
      {
        v539 = *(_QWORD *)(*(_QWORD *)(a1 + 9024) + 8 * v537);
        if (v539)
        {
          v540 = *(_QWORD *)(a1 + 8992);
          v541 = (*(_DWORD *)(a1 + 9016) * v537);
          v542 = (unsigned int *)(v540 + 16 * (v539 + v541));
          v543 = (unsigned int *)(v540 + 16 * v541);
          do
          {
            v554 = *v538;
            v555 = *(_DWORD *)(*(_QWORD *)(a1 + 10664) + 4 * *v543);
            v556 = *(_QWORD *)(a1 + 8920) + 8 * *((_QWORD *)v543 + 1);
            v557 = *v6;
            v558 = *(_QWORD *)(a1 + 20040);
            if (*v538 < v555)
            {
              v544 = v555 + (_DWORD)v557 * v554;
              v545 = (int64x2_t *)(v558 + 8 * v544);
              v546 = *(int64x2_t *)v556;
              v547 = *(_OWORD *)(v556 + 24);
              v548 = *(_QWORD *)(v556 + 40);
              v549 = *(_QWORD *)(v556 + 64);
              v550 = *(int8x16_t *)(v556 + 48);
              v551 = vextq_s8(v550, v550, 8uLL).u64[0];
              v545[1].i64[0] = *(_QWORD *)(v556 + 16);
              *v545 = v546;
              v552 = &v545->i8[8 * v557];
              *((_QWORD *)v552 + 2) = v548;
              *(_OWORD *)v552 = v547;
            }
            else
            {
              v544 = v554 + (_DWORD)v557 * v555;
              v559 = (int64x2_t *)(v558 + 8 * v544);
              v550.i64[0] = *(_QWORD *)(v556 + 16);
              v551 = *(_QWORD *)(v556 + 40);
              v560 = *(int64x2_t *)(v556 + 24);
              v549 = *(_QWORD *)(v556 + 64);
              v561 = *(_OWORD *)(v556 + 48);
              v562 = vzip1q_s64(*(int64x2_t *)v556, v560);
              v563 = vzip2q_s64(*(int64x2_t *)v556, v560);
              v559[1].i64[0] = v561;
              *v559 = v562;
              v564 = (int64x2_t *)((char *)v559 + 8 * v557);
              *v564 = v563;
              v564[1].i64[0] = *((_QWORD *)&v561 + 1);
            }
            v553 = v558 + 8 * v544 + 16 * v557;
            *(_QWORD *)(v553 + 16) = v549;
            v550.i64[1] = v551;
            *(int8x16_t *)v553 = v550;
            v543 += 4;
          }
          while (v543 != v542);
          v536 = *(unsigned int *)(a1 + 8916);
        }
        ++v537;
        ++v538;
      }
      while (v537 < v536);
    }
    v628 = *(unsigned int *)(a1 + 2724);
    if ((_DWORD)v628)
    {
      v629 = 0;
      v630 = *(unsigned int **)(a1 + 10520);
      do
      {
        v631 = *(_QWORD *)(*(_QWORD *)(a1 + 2832) + 8 * v629);
        if (v631)
        {
          v632 = *(_QWORD *)(a1 + 2800);
          v633 = (*(_DWORD *)(a1 + 2824) * v629);
          v634 = (unsigned int *)(v632 + 16 * (v631 + v633));
          v635 = (unsigned int *)(v632 + 16 * v633);
          do
          {
            while (1)
            {
              v653 = *v630;
              v654 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v635);
              v655 = *(_QWORD *)(a1 + 2728) + 8 * *((_QWORD *)v635 + 1);
              v656 = *v6;
              v657 = *(_QWORD *)(a1 + 20040);
              if (*v630 >= v654)
                break;
              v636 = *(_OWORD *)(v655 + 16);
              v637 = (_OWORD *)(v657 + 8 * (v654 + (_DWORD)v656 * v653));
              v638 = *(_OWORD *)(v655 + 32);
              v639 = *(_OWORD *)(v655 + 48);
              v640 = *(_OWORD *)(v655 + 64);
              v641 = *(_OWORD *)(v655 + 80);
              v642 = *(_OWORD *)(v655 + 96);
              v643 = *(_OWORD *)(v655 + 112);
              v644 = *(_OWORD *)(v655 + 128);
              v645 = *(_OWORD *)(v655 + 144);
              v646 = *(_OWORD *)(v655 + 160);
              v647 = *(_OWORD *)(v655 + 176);
              *v637 = *(_OWORD *)v655;
              v637[1] = v636;
              v648 = (_OWORD *)((char *)v637 + 8 * v656);
              *v648 = v638;
              v648[1] = v639;
              v649 = &v637[v656];
              *v649 = v640;
              v649[1] = v641;
              v650 = (_OWORD *)((char *)v637 + 24 * v656);
              *v650 = v642;
              v650[1] = v643;
              v651 = &v637[2 * v656];
              *v651 = v644;
              v651[1] = v645;
              v652 = (_OWORD *)((char *)v637 + 40 * v656);
              *v652 = v646;
              v652[1] = v647;
              v635 += 4;
              if (v635 == v634)
                goto LABEL_168;
            }
            v658 = (int64x2_t *)(v657 + 8 * (v653 + (_DWORD)v656 * v654));
            v659 = *(int64x2_t *)(v655 + 16);
            v661 = *(int64x2_t *)(v655 + 32);
            v660 = *(int64x2_t *)(v655 + 48);
            v663 = *(int64x2_t *)(v655 + 64);
            v662 = *(int64x2_t *)(v655 + 80);
            v665 = *(int64x2_t *)(v655 + 128);
            v664 = *(int64x2_t *)(v655 + 144);
            v666 = vzip1q_s64(*(int64x2_t *)v655, v661);
            v667 = vzip1q_s64(v663, *(int64x2_t *)(v655 + 96));
            v668 = vzip1q_s64(v665, *(int64x2_t *)(v655 + 160));
            v663.i64[0] = vdupq_laneq_s64(v663, 1).u64[0];
            v663.i64[1] = *(_QWORD *)(v655 + 104);
            v669.i64[0] = vdupq_laneq_s64(v665, 1).u64[0];
            v670 = vzip2q_s64(*(int64x2_t *)v655, v661);
            v669.i64[1] = *(_QWORD *)(v655 + 168);
            v671 = vzip1q_s64(v662, *(int64x2_t *)(v655 + 112));
            v672 = vzip1q_s64(v664, *(int64x2_t *)(v655 + 176));
            v662.i64[0] = vdupq_laneq_s64(v662, 1).u64[0];
            v662.i64[1] = *(_QWORD *)(v655 + 120);
            v673.i64[0] = vdupq_laneq_s64(v664, 1).u64[0];
            v673.i64[1] = *(_QWORD *)(v655 + 184);
            v658[1] = v667;
            v658[2] = v668;
            *v658 = v666;
            v674 = (int64x2_t *)((char *)v658 + 8 * v656);
            v674[1] = v663;
            v674[2] = v669;
            *v674 = v670;
            v675 = &v658[v656];
            v675[1] = v671;
            v675[2] = v672;
            *v675 = vzip1q_s64(v659, v660);
            v676 = (int64x2_t *)((char *)v658 + 24 * v656);
            v676[1] = v662;
            v676[2] = v673;
            *v676 = vzip2q_s64(v659, v660);
            v635 += 4;
          }
          while (v635 != v634);
LABEL_168:
          v628 = *(unsigned int *)(a1 + 2724);
        }
        ++v629;
        ++v630;
      }
      while (v629 < v628);
    }
    v694 = *(unsigned int *)(a1 + 3732);
    if ((_DWORD)v694)
    {
      v695 = 0;
      v696 = *(unsigned int **)(a1 + 10544);
      do
      {
        v697 = *(_QWORD *)(*(_QWORD *)(a1 + 3840) + 8 * v695);
        if (v697)
        {
          v698 = *(_QWORD *)(a1 + 3808);
          v699 = (*(_DWORD *)(a1 + 3832) * v695);
          v700 = (unsigned int *)(v698 + 16 * (v697 + v699));
          v701 = (unsigned int *)(v698 + 16 * v699);
          do
          {
            while (1)
            {
              v728 = *v696;
              v729 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v701);
              v730 = *(_QWORD *)(a1 + 3736) + 8 * *((_QWORD *)v701 + 1);
              v731 = *v6;
              v732 = *(_QWORD *)(a1 + 20040);
              if (*v696 >= v729)
                break;
              v702 = *(_OWORD *)(v730 + 16);
              v703 = (_OWORD *)(v732 + 8 * (v729 + (_DWORD)v731 * v728));
              v704 = *(_OWORD *)(v730 + 32);
              v705 = *(_OWORD *)(v730 + 48);
              v706 = *(_OWORD *)(v730 + 64);
              v707 = *(_OWORD *)(v730 + 80);
              v708 = *(_OWORD *)(v730 + 96);
              v709 = *(_OWORD *)(v730 + 112);
              v710 = *(_OWORD *)(v730 + 128);
              v711 = *(_OWORD *)(v730 + 144);
              v712 = *(_OWORD *)(v730 + 160);
              v713 = *(_OWORD *)(v730 + 176);
              v714 = *(_OWORD *)(v730 + 192);
              v715 = *(_OWORD *)(v730 + 208);
              v716 = *(_OWORD *)(v730 + 224);
              v717 = *(_OWORD *)(v730 + 240);
              v718 = *(_OWORD *)(v730 + 256);
              v719 = *(_OWORD *)(v730 + 272);
              *v703 = *(_OWORD *)v730;
              v703[1] = v702;
              v720 = (_OWORD *)((char *)v703 + 8 * v731);
              *v720 = v704;
              v720[1] = v705;
              v721 = &v703[v731];
              *v721 = v706;
              v721[1] = v707;
              v722 = (_OWORD *)((char *)v703 + 24 * v731);
              *v722 = v708;
              v722[1] = v709;
              v723 = &v703[2 * v731];
              *v723 = v710;
              v723[1] = v711;
              v724 = (_OWORD *)((char *)v703 + 40 * v731);
              *v724 = v712;
              v724[1] = v713;
              v725 = &v703[3 * v731];
              *v725 = v714;
              v725[1] = v715;
              v726 = (_OWORD *)((char *)v703 + 56 * v731);
              *v726 = v716;
              v726[1] = v717;
              v727 = &v703[4 * v731];
              *v727 = v718;
              v727[1] = v719;
              v701 += 4;
              if (v701 == v700)
                goto LABEL_188;
            }
            v733 = *(int64x2_t *)(v730 + 16);
            v734 = (int64x2_t *)(v732 + 8 * (v728 + (_DWORD)v731 * v729));
            v736 = *(int64x2_t *)(v730 + 32);
            v735 = *(int64x2_t *)(v730 + 48);
            v738 = *(int64x2_t *)(v730 + 64);
            v737 = *(int64x2_t *)(v730 + 80);
            v740 = *(int64x2_t *)(v730 + 128);
            v739 = *(int64x2_t *)(v730 + 144);
            v742 = *(int64x2_t *)(v730 + 192);
            v741 = *(int64x2_t *)(v730 + 208);
            v744 = *(_OWORD *)(v730 + 256);
            v743 = *(_OWORD *)(v730 + 272);
            v745 = vzip1q_s64(*(int64x2_t *)v730, v736);
            v746 = vzip1q_s64(v738, *(int64x2_t *)(v730 + 96));
            v747 = vzip1q_s64(v742, *(int64x2_t *)(v730 + 224));
            v748 = vzip2q_s64(*(int64x2_t *)v730, v736);
            v736.i64[0] = vdupq_laneq_s64(v738, 1).u64[0];
            v736.i64[1] = *(_QWORD *)(v730 + 104);
            v738.i64[0] = vdupq_laneq_s64(v740, 1).u64[0];
            v738.i64[1] = *(_QWORD *)(v730 + 168);
            v749.i64[0] = vdupq_laneq_s64(v742, 1).u64[0];
            v749.i64[1] = *(_QWORD *)(v730 + 232);
            v750 = vzip1q_s64(v737, *(int64x2_t *)(v730 + 112));
            v751 = vzip1q_s64(v739, *(int64x2_t *)(v730 + 176));
            v752 = vzip1q_s64(v741, *(int64x2_t *)(v730 + 240));
            v737.i64[0] = vdupq_laneq_s64(v737, 1).u64[0];
            v737.i64[1] = *(_QWORD *)(v730 + 120);
            v753.i64[0] = vdupq_laneq_s64(v739, 1).u64[0];
            v753.i64[1] = *(_QWORD *)(v730 + 184);
            v739.i64[0] = vdupq_laneq_s64(v741, 1).u64[0];
            v739.i64[1] = *(_QWORD *)(v730 + 248);
            v734[2] = vzip1q_s64(v740, *(int64x2_t *)(v730 + 160));
            v734[3] = v747;
            v734[4].i64[0] = v744;
            *v734 = v745;
            v734[1] = v746;
            v754 = (int64x2_t *)((char *)v734 + 8 * v731);
            v754[2] = v738;
            v754[3] = v749;
            *v754 = v748;
            v754[1] = v736;
            v754[4].i64[0] = *((_QWORD *)&v744 + 1);
            v755 = &v734[v731];
            v755[4].i64[0] = v743;
            v755[2] = v751;
            v755[3] = v752;
            *v755 = vzip1q_s64(v733, v735);
            v755[1] = v750;
            v756 = (int64x2_t *)((char *)v734 + 24 * v731);
            v756[4].i64[0] = *((_QWORD *)&v743 + 1);
            v756[2] = v753;
            v756[3] = v739;
            *v756 = vzip2q_s64(v733, v735);
            v756[1] = v737;
            v701 += 4;
          }
          while (v701 != v700);
LABEL_188:
          v694 = *(unsigned int *)(a1 + 3732);
        }
        ++v695;
        ++v696;
      }
      while (v695 < v694);
    }
    v806 = *(unsigned int *)(a1 + 4740);
    if ((_DWORD)v806)
    {
      v807 = 0;
      v808 = *(unsigned int **)(a1 + 10568);
      do
      {
        v809 = *(_QWORD *)(*(_QWORD *)(a1 + 4848) + 8 * v807);
        if (v809)
        {
          v810 = *(_QWORD *)(a1 + 4816);
          v811 = (*(_DWORD *)(a1 + 4840) * v807);
          v812 = (unsigned int *)(v810 + 16 * (v809 + v811));
          v813 = (unsigned int *)(v810 + 16 * v811);
          do
          {
            while (1)
            {
              v815 = *v808;
              v816 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v813);
              v817 = (int8x16_t *)(*(_QWORD *)(a1 + 4744) + 8 * *((_QWORD *)v813 + 1));
              v818 = *v6;
              v819 = *(_QWORD *)(a1 + 20040);
              v821 = *v817;
              v820 = v817[1];
              if (*v808 >= v816)
                break;
              v814 = (int8x16_t *)(v819 + 8 * (v816 + (_DWORD)v818 * v815));
              *v814 = v821;
              v814[1] = v820;
              v813 += 4;
              if (v813 == v812)
                goto LABEL_208;
            }
            v822 = (_QWORD *)(v819 + 8 * (v815 + (_DWORD)v818 * v816));
            *v822 = v821.i64[0];
            v822[v818] = vextq_s8(v821, v821, 8uLL).u64[0];
            v822[2 * v818] = v820.i64[0];
            v822[3 * v818] = vextq_s8(v820, v820, 8uLL).u64[0];
            v813 += 4;
          }
          while (v813 != v812);
LABEL_208:
          v806 = *(unsigned int *)(a1 + 4740);
        }
        ++v807;
        ++v808;
      }
      while (v807 < v806);
    }
    v856 = *(unsigned int *)(a1 + 5748);
    if ((_DWORD)v856)
    {
      v857 = 0;
      v858 = *(unsigned int **)(a1 + 10592);
      do
      {
        v859 = *(_QWORD *)(*(_QWORD *)(a1 + 5856) + 8 * v857);
        if (v859)
        {
          v860 = *(_QWORD *)(a1 + 5824);
          v861 = (*(_DWORD *)(a1 + 5848) * v857);
          v862 = (unsigned int *)(v860 + 16 * (v859 + v861));
          v863 = (unsigned int *)(v860 + 16 * v861);
          do
          {
            while (1)
            {
              v881 = *v858;
              v882 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v863);
              v883 = *(_QWORD *)(a1 + 5752) + 8 * *((_QWORD *)v863 + 1);
              v884 = *v6;
              v885 = *(_QWORD *)(a1 + 20040);
              if (*v858 >= v882)
                break;
              v864 = *(_OWORD *)(v883 + 16);
              v865 = (_OWORD *)(v885 + 8 * (v882 + (_DWORD)v884 * v881));
              v866 = *(_OWORD *)(v883 + 32);
              v867 = *(_OWORD *)(v883 + 48);
              v868 = *(_OWORD *)(v883 + 64);
              v869 = *(_OWORD *)(v883 + 80);
              v870 = *(_OWORD *)(v883 + 96);
              v871 = *(_OWORD *)(v883 + 112);
              v872 = *(_OWORD *)(v883 + 128);
              v873 = *(_OWORD *)(v883 + 144);
              v874 = *(_OWORD *)(v883 + 160);
              v875 = *(_OWORD *)(v883 + 176);
              *v865 = *(_OWORD *)v883;
              v865[1] = v864;
              v876 = (_OWORD *)((char *)v865 + 8 * v884);
              *v876 = v866;
              v876[1] = v867;
              v877 = &v865[v884];
              *v877 = v868;
              v877[1] = v869;
              v878 = (_OWORD *)((char *)v865 + 24 * v884);
              *v878 = v870;
              v878[1] = v871;
              v879 = &v865[2 * v884];
              *v879 = v872;
              v879[1] = v873;
              v880 = (_OWORD *)((char *)v865 + 40 * v884);
              *v880 = v874;
              v880[1] = v875;
              v863 += 4;
              if (v863 == v862)
                goto LABEL_228;
            }
            v886 = (int64x2_t *)(v885 + 8 * (v881 + (_DWORD)v884 * v882));
            v887 = *(int64x2_t *)(v883 + 16);
            v889 = *(int64x2_t *)(v883 + 32);
            v888 = *(int64x2_t *)(v883 + 48);
            v891 = *(int64x2_t *)(v883 + 64);
            v890 = *(int64x2_t *)(v883 + 80);
            v893 = *(int64x2_t *)(v883 + 128);
            v892 = *(int64x2_t *)(v883 + 144);
            v894 = vzip1q_s64(*(int64x2_t *)v883, v889);
            v895 = vzip1q_s64(v891, *(int64x2_t *)(v883 + 96));
            v896 = vzip1q_s64(v893, *(int64x2_t *)(v883 + 160));
            v891.i64[0] = vdupq_laneq_s64(v891, 1).u64[0];
            v891.i64[1] = *(_QWORD *)(v883 + 104);
            v897.i64[0] = vdupq_laneq_s64(v893, 1).u64[0];
            v898 = vzip2q_s64(*(int64x2_t *)v883, v889);
            v897.i64[1] = *(_QWORD *)(v883 + 168);
            v899 = vzip1q_s64(v890, *(int64x2_t *)(v883 + 112));
            v900 = vzip1q_s64(v892, *(int64x2_t *)(v883 + 176));
            v890.i64[0] = vdupq_laneq_s64(v890, 1).u64[0];
            v890.i64[1] = *(_QWORD *)(v883 + 120);
            v901.i64[0] = vdupq_laneq_s64(v892, 1).u64[0];
            v901.i64[1] = *(_QWORD *)(v883 + 184);
            v886[1] = v895;
            v886[2] = v896;
            *v886 = v894;
            v902 = (int64x2_t *)((char *)v886 + 8 * v884);
            v902[1] = v891;
            v902[2] = v897;
            *v902 = v898;
            v903 = &v886[v884];
            v903[1] = v899;
            v903[2] = v900;
            *v903 = vzip1q_s64(v887, v888);
            v904 = (int64x2_t *)((char *)v886 + 24 * v884);
            v904[1] = v890;
            v904[2] = v901;
            *v904 = vzip2q_s64(v887, v888);
            v863 += 4;
          }
          while (v863 != v862);
LABEL_228:
          v856 = *(unsigned int *)(a1 + 5748);
        }
        ++v857;
        ++v858;
      }
      while (v857 < v856);
    }
    v938 = *(unsigned int *)(a1 + 6756);
    if ((_DWORD)v938)
    {
      v939 = 0;
      v940 = *(unsigned int **)(a1 + 10616);
      do
      {
        v941 = *(_QWORD *)(*(_QWORD *)(a1 + 6864) + 8 * v939);
        if (v941)
        {
          v942 = *(_QWORD *)(a1 + 6832);
          v943 = (*(_DWORD *)(a1 + 6856) * v939);
          v944 = (unsigned int *)(v942 + 16 * (v941 + v943));
          v945 = (unsigned int *)(v942 + 16 * v943);
          do
          {
            v957 = *v940;
            v958 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v945);
            v959 = *(_QWORD *)(a1 + 6760) + 8 * *((_QWORD *)v945 + 1);
            v960 = *v6;
            v961 = *(_QWORD *)(a1 + 20040);
            if (*v940 < v958)
            {
              v946 = *(int64x2_t *)(v959 + 16);
              v947 = (int64x2_t *)(v961 + 8 * (v958 + (_DWORD)v960 * v957));
              v948 = *(_OWORD *)(v959 + 32);
              v949 = *(_OWORD *)(v959 + 48);
              v950 = *(int64x2_t *)(v959 + 64);
              v951 = *(int64x2_t *)(v959 + 80);
              v953 = *(int64x2_t *)(v959 + 96);
              v952 = *(int64x2_t *)(v959 + 112);
              *v947 = *(int64x2_t *)v959;
              v947[1] = v946;
              v954 = &v947->i8[8 * v960];
              *(_OWORD *)v954 = v948;
              *((_OWORD *)v954 + 1) = v949;
            }
            else
            {
              v947 = (int64x2_t *)(v961 + 8 * (v957 + (_DWORD)v960 * v958));
              v962 = *(int64x2_t *)(v959 + 16);
              v963 = *(int64x2_t *)(v959 + 32);
              v964 = *(int64x2_t *)(v959 + 48);
              v966 = *(int64x2_t *)(v959 + 64);
              v965 = *(int64x2_t *)(v959 + 80);
              v967 = vzip1q_s64(*(int64x2_t *)v959, v963);
              v968 = vzip1q_s64(v966, *(int64x2_t *)(v959 + 96));
              v969 = vzip2q_s64(*(int64x2_t *)v959, v963);
              v966.i64[0] = vdupq_laneq_s64(v966, 1).u64[0];
              v966.i64[1] = *(_QWORD *)(v959 + 104);
              v950 = vzip1q_s64(v962, v964);
              v951 = vzip1q_s64(v965, *(int64x2_t *)(v959 + 112));
              v952.i64[0] = vdupq_laneq_s64(v965, 1).u64[0];
              v952.i64[1] = *(_QWORD *)(v959 + 120);
              v953 = vzip2q_s64(v962, v964);
              *v947 = v967;
              v947[1] = v968;
              v970 = (int64x2_t *)((char *)v947 + 8 * v960);
              *v970 = v969;
              v970[1] = v966;
            }
            v955 = &v947[v960];
            *v955 = v950;
            v955[1] = v951;
            v956 = (int64x2_t *)((char *)v947 + 24 * v960);
            *v956 = v953;
            v956[1] = v952;
            v945 += 4;
          }
          while (v945 != v944);
          v938 = *(unsigned int *)(a1 + 6756);
        }
        ++v939;
        ++v940;
      }
      while (v939 < v938);
    }
    v1003 = *(unsigned int *)(a1 + 7764);
    if ((_DWORD)v1003)
    {
      v1004 = 0;
      v1005 = *(unsigned int **)(a1 + 10640);
      do
      {
        v1006 = *(_QWORD *)(*(_QWORD *)(a1 + 7872) + 8 * v1004);
        if (v1006)
        {
          v1007 = *(_QWORD *)(a1 + 7840);
          v1008 = (*(_DWORD *)(a1 + 7864) * v1004);
          v1009 = (unsigned int *)(v1007 + 16 * (v1006 + v1008));
          v1010 = (unsigned int *)(v1007 + 16 * v1008);
          do
          {
            v1022 = *v1005;
            v1023 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v1010);
            v1024 = *(_QWORD *)(a1 + 7768) + 8 * *((_QWORD *)v1010 + 1);
            v1025 = *v6;
            v1026 = *(_QWORD *)(a1 + 20040);
            if (*v1005 < v1023)
            {
              v1011 = *(int64x2_t *)(v1024 + 16);
              v1012 = (int64x2_t *)(v1026 + 8 * (v1023 + (_DWORD)v1025 * v1022));
              v1013 = *(_OWORD *)(v1024 + 32);
              v1014 = *(_OWORD *)(v1024 + 48);
              v1015 = *(int64x2_t *)(v1024 + 64);
              v1016 = *(int64x2_t *)(v1024 + 80);
              v1018 = *(int64x2_t *)(v1024 + 96);
              v1017 = *(int64x2_t *)(v1024 + 112);
              *v1012 = *(int64x2_t *)v1024;
              v1012[1] = v1011;
              v1019 = &v1012->i8[8 * v1025];
              *(_OWORD *)v1019 = v1013;
              *((_OWORD *)v1019 + 1) = v1014;
            }
            else
            {
              v1012 = (int64x2_t *)(v1026 + 8 * (v1022 + (_DWORD)v1025 * v1023));
              v1027 = *(int64x2_t *)(v1024 + 16);
              v1028 = *(int64x2_t *)(v1024 + 32);
              v1029 = *(int64x2_t *)(v1024 + 48);
              v1031 = *(int64x2_t *)(v1024 + 64);
              v1030 = *(int64x2_t *)(v1024 + 80);
              v1032 = vzip1q_s64(*(int64x2_t *)v1024, v1028);
              v1033 = vzip1q_s64(v1031, *(int64x2_t *)(v1024 + 96));
              v1034 = vzip2q_s64(*(int64x2_t *)v1024, v1028);
              v1031.i64[0] = vdupq_laneq_s64(v1031, 1).u64[0];
              v1031.i64[1] = *(_QWORD *)(v1024 + 104);
              v1015 = vzip1q_s64(v1027, v1029);
              v1016 = vzip1q_s64(v1030, *(int64x2_t *)(v1024 + 112));
              v1017.i64[0] = vdupq_laneq_s64(v1030, 1).u64[0];
              v1017.i64[1] = *(_QWORD *)(v1024 + 120);
              v1018 = vzip2q_s64(v1027, v1029);
              *v1012 = v1032;
              v1012[1] = v1033;
              v1035 = (int64x2_t *)((char *)v1012 + 8 * v1025);
              *v1035 = v1034;
              v1035[1] = v1031;
            }
            v1020 = &v1012[v1025];
            *v1020 = v1015;
            v1020[1] = v1016;
            v1021 = (int64x2_t *)((char *)v1012 + 24 * v1025);
            *v1021 = v1018;
            v1021[1] = v1017;
            v1010 += 4;
          }
          while (v1010 != v1009);
          v1003 = *(unsigned int *)(a1 + 7764);
        }
        ++v1004;
        ++v1005;
      }
      while (v1004 < v1003);
    }
    v1085 = *(unsigned int *)(a1 + 8772);
    if ((_DWORD)v1085)
    {
      v1086 = 0;
      v1087 = *(unsigned int **)(a1 + 10664);
      do
      {
        v1088 = *(_QWORD *)(*(_QWORD *)(a1 + 8880) + 8 * v1086);
        if (v1088)
        {
          v1089 = *(_QWORD *)(a1 + 8848);
          v1090 = (*(_DWORD *)(a1 + 8872) * v1086);
          v1091 = (unsigned int *)(v1089 + 16 * (v1088 + v1090));
          v1092 = (unsigned int *)(v1089 + 16 * v1090);
          do
          {
            while (1)
            {
              v1101 = *v1087;
              v1102 = *(_DWORD *)(*(_QWORD *)(a1 + 10640) + 4 * *v1092);
              v1103 = *(_QWORD *)(a1 + 8776) + 8 * *((_QWORD *)v1092 + 1);
              v1104 = *v6;
              v1105 = *(_QWORD *)(a1 + 20040);
              if (*v1087 >= v1102)
                break;
              v1093 = *(_OWORD *)(v1103 + 16);
              v1094 = (_OWORD *)(v1105 + 8 * (v1102 + (_DWORD)v1104 * v1101));
              v1095 = *(_OWORD *)(v1103 + 32);
              v1096 = *(_OWORD *)(v1103 + 48);
              v1097 = *(_OWORD *)(v1103 + 64);
              v1098 = *(_OWORD *)(v1103 + 80);
              *v1094 = *(_OWORD *)v1103;
              v1094[1] = v1093;
              v1099 = (_OWORD *)((char *)v1094 + 8 * v1104);
              *v1099 = v1095;
              v1099[1] = v1096;
              v1100 = &v1094[v1104];
              *v1100 = v1097;
              v1100[1] = v1098;
              v1092 += 4;
              if (v1092 == v1091)
                goto LABEL_288;
            }
            v1106 = (int64x2_t *)(v1105 + 8 * (v1101 + (_DWORD)v1104 * v1102));
            v1107 = *(int64x2_t *)(v1103 + 16);
            v1109 = *(int64x2_t *)(v1103 + 32);
            v1108 = *(int64x2_t *)(v1103 + 48);
            v1111 = *(_OWORD *)(v1103 + 64);
            v1110 = *(_OWORD *)(v1103 + 80);
            v1112 = vzip1q_s64(*(int64x2_t *)v1103, v1109);
            v1113 = vzip2q_s64(*(int64x2_t *)v1103, v1109);
            v1106[1].i64[0] = v1111;
            *v1106 = v1112;
            v1114 = (int64x2_t *)((char *)v1106 + 8 * v1104);
            *v1114 = v1113;
            v1114[1].i64[0] = *((_QWORD *)&v1111 + 1);
            v1115 = &v1106[v1104];
            v1115[1].i64[0] = v1110;
            *v1115 = vzip1q_s64(v1107, v1108);
            v1116 = (int64x2_t *)((char *)v1106 + 24 * v1104);
            v1116[1].i64[0] = *((_QWORD *)&v1110 + 1);
            *v1116 = vzip2q_s64(v1107, v1108);
            v1092 += 4;
          }
          while (v1092 != v1091);
LABEL_288:
          v1085 = *(unsigned int *)(a1 + 8772);
        }
        ++v1086;
        ++v1087;
      }
      while (v1086 < v1085);
    }
    v1180 = *(unsigned int *)(a1 + 2580);
    if ((_DWORD)v1180)
    {
      v1181 = 0;
      v1182 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1183 = *(_QWORD *)(*(_QWORD *)(a1 + 2688) + 8 * v1181);
        if (v1183)
        {
          v1184 = *(_QWORD *)(a1 + 2656);
          v1185 = (*(_DWORD *)(a1 + 2680) * v1181);
          v1186 = (unsigned int *)(v1184 + 16 * (v1183 + v1185));
          v1187 = (unsigned int *)(v1184 + 16 * v1185);
          do
          {
            while (1)
            {
              v1205 = *v1182;
              v1206 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1187);
              v1207 = *(_QWORD *)(a1 + 2584) + 8 * *((_QWORD *)v1187 + 1);
              v1208 = *v6;
              v1209 = *(_QWORD *)(a1 + 20040);
              if (*v1182 >= v1206)
                break;
              v1188 = *(_OWORD *)(v1207 + 16);
              v1189 = (_OWORD *)(v1209 + 8 * (v1206 + (_DWORD)v1208 * v1205));
              v1190 = *(_OWORD *)(v1207 + 32);
              v1191 = *(_OWORD *)(v1207 + 48);
              v1192 = *(_OWORD *)(v1207 + 64);
              v1193 = *(_OWORD *)(v1207 + 80);
              v1194 = *(_OWORD *)(v1207 + 96);
              v1195 = *(_OWORD *)(v1207 + 112);
              v1196 = *(_OWORD *)(v1207 + 128);
              v1197 = *(_OWORD *)(v1207 + 144);
              v1198 = *(_OWORD *)(v1207 + 160);
              v1199 = *(_OWORD *)(v1207 + 176);
              *v1189 = *(_OWORD *)v1207;
              v1189[1] = v1188;
              v1200 = (_OWORD *)((char *)v1189 + 8 * v1208);
              *v1200 = v1190;
              v1200[1] = v1191;
              v1201 = &v1189[v1208];
              *v1201 = v1192;
              v1201[1] = v1193;
              v1202 = (_OWORD *)((char *)v1189 + 24 * v1208);
              *v1202 = v1194;
              v1202[1] = v1195;
              v1203 = &v1189[2 * v1208];
              *v1203 = v1196;
              v1203[1] = v1197;
              v1204 = (_OWORD *)((char *)v1189 + 40 * v1208);
              *v1204 = v1198;
              v1204[1] = v1199;
              v1187 += 4;
              if (v1187 == v1186)
                goto LABEL_308;
            }
            v1210 = (int64x2_t *)(v1209 + 8 * (v1205 + (_DWORD)v1208 * v1206));
            v1211 = *(int64x2_t *)(v1207 + 16);
            v1213 = *(int64x2_t *)(v1207 + 32);
            v1212 = *(int64x2_t *)(v1207 + 48);
            v1215 = *(int64x2_t *)(v1207 + 64);
            v1214 = *(int64x2_t *)(v1207 + 80);
            v1217 = *(int64x2_t *)(v1207 + 128);
            v1216 = *(int64x2_t *)(v1207 + 144);
            v1218 = vzip1q_s64(*(int64x2_t *)v1207, v1213);
            v1219 = vzip1q_s64(v1215, *(int64x2_t *)(v1207 + 96));
            v1220 = vzip1q_s64(v1217, *(int64x2_t *)(v1207 + 160));
            v1215.i64[0] = vdupq_laneq_s64(v1215, 1).u64[0];
            v1215.i64[1] = *(_QWORD *)(v1207 + 104);
            v1221.i64[0] = vdupq_laneq_s64(v1217, 1).u64[0];
            v1222 = vzip2q_s64(*(int64x2_t *)v1207, v1213);
            v1221.i64[1] = *(_QWORD *)(v1207 + 168);
            v1223 = vzip1q_s64(v1214, *(int64x2_t *)(v1207 + 112));
            v1224 = vzip1q_s64(v1216, *(int64x2_t *)(v1207 + 176));
            v1214.i64[0] = vdupq_laneq_s64(v1214, 1).u64[0];
            v1214.i64[1] = *(_QWORD *)(v1207 + 120);
            v1225.i64[0] = vdupq_laneq_s64(v1216, 1).u64[0];
            v1225.i64[1] = *(_QWORD *)(v1207 + 184);
            v1210[1] = v1219;
            v1210[2] = v1220;
            *v1210 = v1218;
            v1226 = (int64x2_t *)((char *)v1210 + 8 * v1208);
            v1226[1] = v1215;
            v1226[2] = v1221;
            *v1226 = v1222;
            v1227 = &v1210[v1208];
            v1227[1] = v1223;
            v1227[2] = v1224;
            *v1227 = vzip1q_s64(v1211, v1212);
            v1228 = (int64x2_t *)((char *)v1210 + 24 * v1208);
            v1228[1] = v1214;
            v1228[2] = v1225;
            *v1228 = vzip2q_s64(v1211, v1212);
            v1187 += 4;
          }
          while (v1187 != v1186);
LABEL_308:
          v1180 = *(unsigned int *)(a1 + 2580);
        }
        ++v1181;
        ++v1182;
      }
      while (v1181 < v1180);
    }
    v1246 = *(unsigned int *)(a1 + 3588);
    if ((_DWORD)v1246)
    {
      v1247 = 0;
      v1248 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1249 = *(_QWORD *)(*(_QWORD *)(a1 + 3696) + 8 * v1247);
        if (v1249)
        {
          v1250 = *(_QWORD *)(a1 + 3664);
          v1251 = (*(_DWORD *)(a1 + 3688) * v1247);
          v1252 = (unsigned int *)(v1250 + 16 * (v1249 + v1251));
          v1253 = (unsigned int *)(v1250 + 16 * v1251);
          do
          {
            while (1)
            {
              v1280 = *v1248;
              v1281 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1253);
              v1282 = *(_QWORD *)(a1 + 3592) + 8 * *((_QWORD *)v1253 + 1);
              v1283 = *v6;
              v1284 = *(_QWORD *)(a1 + 20040);
              if (*v1248 >= v1281)
                break;
              v1254 = *(_OWORD *)(v1282 + 16);
              v1255 = (_OWORD *)(v1284 + 8 * (v1281 + (_DWORD)v1283 * v1280));
              v1256 = *(_OWORD *)(v1282 + 32);
              v1257 = *(_OWORD *)(v1282 + 48);
              v1258 = *(_OWORD *)(v1282 + 64);
              v1259 = *(_OWORD *)(v1282 + 80);
              v1260 = *(_OWORD *)(v1282 + 96);
              v1261 = *(_OWORD *)(v1282 + 112);
              v1262 = *(_OWORD *)(v1282 + 128);
              v1263 = *(_OWORD *)(v1282 + 144);
              v1264 = *(_OWORD *)(v1282 + 160);
              v1265 = *(_OWORD *)(v1282 + 176);
              v1266 = *(_OWORD *)(v1282 + 192);
              v1267 = *(_OWORD *)(v1282 + 208);
              v1268 = *(_OWORD *)(v1282 + 224);
              v1269 = *(_OWORD *)(v1282 + 240);
              v1270 = *(_OWORD *)(v1282 + 256);
              v1271 = *(_OWORD *)(v1282 + 272);
              *v1255 = *(_OWORD *)v1282;
              v1255[1] = v1254;
              v1272 = (_OWORD *)((char *)v1255 + 8 * v1283);
              *v1272 = v1256;
              v1272[1] = v1257;
              v1273 = &v1255[v1283];
              *v1273 = v1258;
              v1273[1] = v1259;
              v1274 = (_OWORD *)((char *)v1255 + 24 * v1283);
              *v1274 = v1260;
              v1274[1] = v1261;
              v1275 = &v1255[2 * v1283];
              *v1275 = v1262;
              v1275[1] = v1263;
              v1276 = (_OWORD *)((char *)v1255 + 40 * v1283);
              *v1276 = v1264;
              v1276[1] = v1265;
              v1277 = &v1255[3 * v1283];
              *v1277 = v1266;
              v1277[1] = v1267;
              v1278 = (_OWORD *)((char *)v1255 + 56 * v1283);
              *v1278 = v1268;
              v1278[1] = v1269;
              v1279 = &v1255[4 * v1283];
              *v1279 = v1270;
              v1279[1] = v1271;
              v1253 += 4;
              if (v1253 == v1252)
                goto LABEL_328;
            }
            v1285 = *(int64x2_t *)(v1282 + 16);
            v1286 = (int64x2_t *)(v1284 + 8 * (v1280 + (_DWORD)v1283 * v1281));
            v1288 = *(int64x2_t *)(v1282 + 32);
            v1287 = *(int64x2_t *)(v1282 + 48);
            v1290 = *(int64x2_t *)(v1282 + 64);
            v1289 = *(int64x2_t *)(v1282 + 80);
            v1292 = *(int64x2_t *)(v1282 + 128);
            v1291 = *(int64x2_t *)(v1282 + 144);
            v1294 = *(int64x2_t *)(v1282 + 192);
            v1293 = *(int64x2_t *)(v1282 + 208);
            v1296 = *(_OWORD *)(v1282 + 256);
            v1295 = *(_OWORD *)(v1282 + 272);
            v1297 = vzip1q_s64(*(int64x2_t *)v1282, v1288);
            v1298 = vzip1q_s64(v1290, *(int64x2_t *)(v1282 + 96));
            v1299 = vzip1q_s64(v1294, *(int64x2_t *)(v1282 + 224));
            v1300 = vzip2q_s64(*(int64x2_t *)v1282, v1288);
            v1288.i64[0] = vdupq_laneq_s64(v1290, 1).u64[0];
            v1288.i64[1] = *(_QWORD *)(v1282 + 104);
            v1290.i64[0] = vdupq_laneq_s64(v1292, 1).u64[0];
            v1290.i64[1] = *(_QWORD *)(v1282 + 168);
            v1301.i64[0] = vdupq_laneq_s64(v1294, 1).u64[0];
            v1301.i64[1] = *(_QWORD *)(v1282 + 232);
            v1302 = vzip1q_s64(v1289, *(int64x2_t *)(v1282 + 112));
            v1303 = vzip1q_s64(v1291, *(int64x2_t *)(v1282 + 176));
            v1304 = vzip1q_s64(v1293, *(int64x2_t *)(v1282 + 240));
            v1289.i64[0] = vdupq_laneq_s64(v1289, 1).u64[0];
            v1289.i64[1] = *(_QWORD *)(v1282 + 120);
            v1305.i64[0] = vdupq_laneq_s64(v1291, 1).u64[0];
            v1305.i64[1] = *(_QWORD *)(v1282 + 184);
            v1291.i64[0] = vdupq_laneq_s64(v1293, 1).u64[0];
            v1291.i64[1] = *(_QWORD *)(v1282 + 248);
            v1286[2] = vzip1q_s64(v1292, *(int64x2_t *)(v1282 + 160));
            v1286[3] = v1299;
            v1286[4].i64[0] = v1296;
            *v1286 = v1297;
            v1286[1] = v1298;
            v1306 = (int64x2_t *)((char *)v1286 + 8 * v1283);
            v1306[2] = v1290;
            v1306[3] = v1301;
            *v1306 = v1300;
            v1306[1] = v1288;
            v1306[4].i64[0] = *((_QWORD *)&v1296 + 1);
            v1307 = &v1286[v1283];
            v1307[4].i64[0] = v1295;
            v1307[2] = v1303;
            v1307[3] = v1304;
            *v1307 = vzip1q_s64(v1285, v1287);
            v1307[1] = v1302;
            v1308 = (int64x2_t *)((char *)v1286 + 24 * v1283);
            v1308[4].i64[0] = *((_QWORD *)&v1295 + 1);
            v1308[2] = v1305;
            v1308[3] = v1291;
            *v1308 = vzip2q_s64(v1285, v1287);
            v1308[1] = v1289;
            v1253 += 4;
          }
          while (v1253 != v1252);
LABEL_328:
          v1246 = *(unsigned int *)(a1 + 3588);
        }
        ++v1247;
        ++v1248;
      }
      while (v1247 < v1246);
    }
    v1358 = *(unsigned int *)(a1 + 4596);
    if ((_DWORD)v1358)
    {
      v1359 = 0;
      v1360 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1361 = *(_QWORD *)(*(_QWORD *)(a1 + 4704) + 8 * v1359);
        if (v1361)
        {
          v1362 = *(_QWORD *)(a1 + 4672);
          v1363 = (*(_DWORD *)(a1 + 4696) * v1359);
          v1364 = (unsigned int *)(v1362 + 16 * (v1361 + v1363));
          v1365 = (unsigned int *)(v1362 + 16 * v1363);
          do
          {
            while (1)
            {
              v1367 = *v1360;
              v1368 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1365);
              v1369 = (int8x16_t *)(*(_QWORD *)(a1 + 4600) + 8 * *((_QWORD *)v1365 + 1));
              v1370 = *v6;
              v1371 = *(_QWORD *)(a1 + 20040);
              v1373 = *v1369;
              v1372 = v1369[1];
              if (*v1360 >= v1368)
                break;
              v1366 = (int8x16_t *)(v1371 + 8 * (v1368 + (_DWORD)v1370 * v1367));
              *v1366 = v1373;
              v1366[1] = v1372;
              v1365 += 4;
              if (v1365 == v1364)
                goto LABEL_348;
            }
            v1374 = (_QWORD *)(v1371 + 8 * (v1367 + (_DWORD)v1370 * v1368));
            *v1374 = v1373.i64[0];
            v1374[v1370] = vextq_s8(v1373, v1373, 8uLL).u64[0];
            v1374[2 * v1370] = v1372.i64[0];
            v1374[3 * v1370] = vextq_s8(v1372, v1372, 8uLL).u64[0];
            v1365 += 4;
          }
          while (v1365 != v1364);
LABEL_348:
          v1358 = *(unsigned int *)(a1 + 4596);
        }
        ++v1359;
        ++v1360;
      }
      while (v1359 < v1358);
    }
    v1408 = *(unsigned int *)(a1 + 5604);
    if ((_DWORD)v1408)
    {
      v1409 = 0;
      v1410 = *(unsigned int **)(a1 + 10592);
      do
      {
        v1411 = *(_QWORD *)(*(_QWORD *)(a1 + 5712) + 8 * v1409);
        if (v1411)
        {
          v1412 = *(_QWORD *)(a1 + 5680);
          v1413 = (*(_DWORD *)(a1 + 5704) * v1409);
          v1414 = (unsigned int *)(v1412 + 16 * (v1411 + v1413));
          v1415 = (unsigned int *)(v1412 + 16 * v1413);
          do
          {
            while (1)
            {
              v1433 = *v1410;
              v1434 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1415);
              v1435 = *(_QWORD *)(a1 + 5608) + 8 * *((_QWORD *)v1415 + 1);
              v1436 = *v6;
              v1437 = *(_QWORD *)(a1 + 20040);
              if (*v1410 >= v1434)
                break;
              v1416 = *(_OWORD *)(v1435 + 16);
              v1417 = (_OWORD *)(v1437 + 8 * (v1434 + (_DWORD)v1436 * v1433));
              v1418 = *(_OWORD *)(v1435 + 32);
              v1419 = *(_OWORD *)(v1435 + 48);
              v1420 = *(_OWORD *)(v1435 + 64);
              v1421 = *(_OWORD *)(v1435 + 80);
              v1422 = *(_OWORD *)(v1435 + 96);
              v1423 = *(_OWORD *)(v1435 + 112);
              v1424 = *(_OWORD *)(v1435 + 128);
              v1425 = *(_OWORD *)(v1435 + 144);
              v1426 = *(_OWORD *)(v1435 + 160);
              v1427 = *(_OWORD *)(v1435 + 176);
              *v1417 = *(_OWORD *)v1435;
              v1417[1] = v1416;
              v1428 = (_OWORD *)((char *)v1417 + 8 * v1436);
              *v1428 = v1418;
              v1428[1] = v1419;
              v1429 = &v1417[v1436];
              *v1429 = v1420;
              v1429[1] = v1421;
              v1430 = (_OWORD *)((char *)v1417 + 24 * v1436);
              *v1430 = v1422;
              v1430[1] = v1423;
              v1431 = &v1417[2 * v1436];
              *v1431 = v1424;
              v1431[1] = v1425;
              v1432 = (_OWORD *)((char *)v1417 + 40 * v1436);
              *v1432 = v1426;
              v1432[1] = v1427;
              v1415 += 4;
              if (v1415 == v1414)
                goto LABEL_368;
            }
            v1438 = (int64x2_t *)(v1437 + 8 * (v1433 + (_DWORD)v1436 * v1434));
            v1439 = *(int64x2_t *)(v1435 + 16);
            v1441 = *(int64x2_t *)(v1435 + 32);
            v1440 = *(int64x2_t *)(v1435 + 48);
            v1443 = *(int64x2_t *)(v1435 + 64);
            v1442 = *(int64x2_t *)(v1435 + 80);
            v1445 = *(int64x2_t *)(v1435 + 128);
            v1444 = *(int64x2_t *)(v1435 + 144);
            v1446 = vzip1q_s64(*(int64x2_t *)v1435, v1441);
            v1447 = vzip1q_s64(v1443, *(int64x2_t *)(v1435 + 96));
            v1448 = vzip1q_s64(v1445, *(int64x2_t *)(v1435 + 160));
            v1443.i64[0] = vdupq_laneq_s64(v1443, 1).u64[0];
            v1443.i64[1] = *(_QWORD *)(v1435 + 104);
            v1449.i64[0] = vdupq_laneq_s64(v1445, 1).u64[0];
            v1450 = vzip2q_s64(*(int64x2_t *)v1435, v1441);
            v1449.i64[1] = *(_QWORD *)(v1435 + 168);
            v1451 = vzip1q_s64(v1442, *(int64x2_t *)(v1435 + 112));
            v1452 = vzip1q_s64(v1444, *(int64x2_t *)(v1435 + 176));
            v1442.i64[0] = vdupq_laneq_s64(v1442, 1).u64[0];
            v1442.i64[1] = *(_QWORD *)(v1435 + 120);
            v1453.i64[0] = vdupq_laneq_s64(v1444, 1).u64[0];
            v1453.i64[1] = *(_QWORD *)(v1435 + 184);
            v1438[1] = v1447;
            v1438[2] = v1448;
            *v1438 = v1446;
            v1454 = (int64x2_t *)((char *)v1438 + 8 * v1436);
            v1454[1] = v1443;
            v1454[2] = v1449;
            *v1454 = v1450;
            v1455 = &v1438[v1436];
            v1455[1] = v1451;
            v1455[2] = v1452;
            *v1455 = vzip1q_s64(v1439, v1440);
            v1456 = (int64x2_t *)((char *)v1438 + 24 * v1436);
            v1456[1] = v1442;
            v1456[2] = v1453;
            *v1456 = vzip2q_s64(v1439, v1440);
            v1415 += 4;
          }
          while (v1415 != v1414);
LABEL_368:
          v1408 = *(unsigned int *)(a1 + 5604);
        }
        ++v1409;
        ++v1410;
      }
      while (v1409 < v1408);
    }
    v1490 = *(unsigned int *)(a1 + 6612);
    if ((_DWORD)v1490)
    {
      v1491 = 0;
      v1492 = *(unsigned int **)(a1 + 10616);
      do
      {
        v1493 = *(_QWORD *)(*(_QWORD *)(a1 + 6720) + 8 * v1491);
        if (v1493)
        {
          v1494 = *(_QWORD *)(a1 + 6688);
          v1495 = (*(_DWORD *)(a1 + 6712) * v1491);
          v1496 = (unsigned int *)(v1494 + 16 * (v1493 + v1495));
          v1497 = (unsigned int *)(v1494 + 16 * v1495);
          do
          {
            v1509 = *v1492;
            v1510 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1497);
            v1511 = *(_QWORD *)(a1 + 6616) + 8 * *((_QWORD *)v1497 + 1);
            v1512 = *v6;
            v1513 = *(_QWORD *)(a1 + 20040);
            if (*v1492 < v1510)
            {
              v1498 = *(int64x2_t *)(v1511 + 16);
              v1499 = (int64x2_t *)(v1513 + 8 * (v1510 + (_DWORD)v1512 * v1509));
              v1500 = *(_OWORD *)(v1511 + 32);
              v1501 = *(_OWORD *)(v1511 + 48);
              v1502 = *(int64x2_t *)(v1511 + 64);
              v1503 = *(int64x2_t *)(v1511 + 80);
              v1505 = *(int64x2_t *)(v1511 + 96);
              v1504 = *(int64x2_t *)(v1511 + 112);
              *v1499 = *(int64x2_t *)v1511;
              v1499[1] = v1498;
              v1506 = &v1499->i8[8 * v1512];
              *(_OWORD *)v1506 = v1500;
              *((_OWORD *)v1506 + 1) = v1501;
            }
            else
            {
              v1499 = (int64x2_t *)(v1513 + 8 * (v1509 + (_DWORD)v1512 * v1510));
              v1514 = *(int64x2_t *)(v1511 + 16);
              v1515 = *(int64x2_t *)(v1511 + 32);
              v1516 = *(int64x2_t *)(v1511 + 48);
              v1518 = *(int64x2_t *)(v1511 + 64);
              v1517 = *(int64x2_t *)(v1511 + 80);
              v1519 = vzip1q_s64(*(int64x2_t *)v1511, v1515);
              v1520 = vzip1q_s64(v1518, *(int64x2_t *)(v1511 + 96));
              v1521 = vzip2q_s64(*(int64x2_t *)v1511, v1515);
              v1518.i64[0] = vdupq_laneq_s64(v1518, 1).u64[0];
              v1518.i64[1] = *(_QWORD *)(v1511 + 104);
              v1502 = vzip1q_s64(v1514, v1516);
              v1503 = vzip1q_s64(v1517, *(int64x2_t *)(v1511 + 112));
              v1504.i64[0] = vdupq_laneq_s64(v1517, 1).u64[0];
              v1504.i64[1] = *(_QWORD *)(v1511 + 120);
              v1505 = vzip2q_s64(v1514, v1516);
              *v1499 = v1519;
              v1499[1] = v1520;
              v1522 = (int64x2_t *)((char *)v1499 + 8 * v1512);
              *v1522 = v1521;
              v1522[1] = v1518;
            }
            v1507 = &v1499[v1512];
            *v1507 = v1502;
            v1507[1] = v1503;
            v1508 = (int64x2_t *)((char *)v1499 + 24 * v1512);
            *v1508 = v1505;
            v1508[1] = v1504;
            v1497 += 4;
          }
          while (v1497 != v1496);
          v1490 = *(unsigned int *)(a1 + 6612);
        }
        ++v1491;
        ++v1492;
      }
      while (v1491 < v1490);
    }
    v1555 = *(unsigned int *)(a1 + 7620);
    if ((_DWORD)v1555)
    {
      v1556 = 0;
      v1557 = *(unsigned int **)(a1 + 10640);
      do
      {
        v1558 = *(_QWORD *)(*(_QWORD *)(a1 + 7728) + 8 * v1556);
        if (v1558)
        {
          v1559 = *(_QWORD *)(a1 + 7696);
          v1560 = (*(_DWORD *)(a1 + 7720) * v1556);
          v1561 = (unsigned int *)(v1559 + 16 * (v1558 + v1560));
          v1562 = (unsigned int *)(v1559 + 16 * v1560);
          do
          {
            v1574 = *v1557;
            v1575 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1562);
            v1576 = *(_QWORD *)(a1 + 7624) + 8 * *((_QWORD *)v1562 + 1);
            v1577 = *v6;
            v1578 = *(_QWORD *)(a1 + 20040);
            if (*v1557 < v1575)
            {
              v1563 = *(int64x2_t *)(v1576 + 16);
              v1564 = (int64x2_t *)(v1578 + 8 * (v1575 + (_DWORD)v1577 * v1574));
              v1565 = *(_OWORD *)(v1576 + 32);
              v1566 = *(_OWORD *)(v1576 + 48);
              v1567 = *(int64x2_t *)(v1576 + 64);
              v1568 = *(int64x2_t *)(v1576 + 80);
              v1570 = *(int64x2_t *)(v1576 + 96);
              v1569 = *(int64x2_t *)(v1576 + 112);
              *v1564 = *(int64x2_t *)v1576;
              v1564[1] = v1563;
              v1571 = &v1564->i8[8 * v1577];
              *(_OWORD *)v1571 = v1565;
              *((_OWORD *)v1571 + 1) = v1566;
            }
            else
            {
              v1564 = (int64x2_t *)(v1578 + 8 * (v1574 + (_DWORD)v1577 * v1575));
              v1579 = *(int64x2_t *)(v1576 + 16);
              v1580 = *(int64x2_t *)(v1576 + 32);
              v1581 = *(int64x2_t *)(v1576 + 48);
              v1583 = *(int64x2_t *)(v1576 + 64);
              v1582 = *(int64x2_t *)(v1576 + 80);
              v1584 = vzip1q_s64(*(int64x2_t *)v1576, v1580);
              v1585 = vzip1q_s64(v1583, *(int64x2_t *)(v1576 + 96));
              v1586 = vzip2q_s64(*(int64x2_t *)v1576, v1580);
              v1583.i64[0] = vdupq_laneq_s64(v1583, 1).u64[0];
              v1583.i64[1] = *(_QWORD *)(v1576 + 104);
              v1567 = vzip1q_s64(v1579, v1581);
              v1568 = vzip1q_s64(v1582, *(int64x2_t *)(v1576 + 112));
              v1569.i64[0] = vdupq_laneq_s64(v1582, 1).u64[0];
              v1569.i64[1] = *(_QWORD *)(v1576 + 120);
              v1570 = vzip2q_s64(v1579, v1581);
              *v1564 = v1584;
              v1564[1] = v1585;
              v1587 = (int64x2_t *)((char *)v1564 + 8 * v1577);
              *v1587 = v1586;
              v1587[1] = v1583;
            }
            v1572 = &v1564[v1577];
            *v1572 = v1567;
            v1572[1] = v1568;
            v1573 = (int64x2_t *)((char *)v1564 + 24 * v1577);
            *v1573 = v1570;
            v1573[1] = v1569;
            v1562 += 4;
          }
          while (v1562 != v1561);
          v1555 = *(unsigned int *)(a1 + 7620);
        }
        ++v1556;
        ++v1557;
      }
      while (v1556 < v1555);
    }
    v1651 = *(unsigned int *)(a1 + 8628);
    if ((_DWORD)v1651)
    {
      v1652 = 0;
      v1653 = *(unsigned int **)(a1 + 10664);
      do
      {
        v1654 = *(_QWORD *)(*(_QWORD *)(a1 + 8736) + 8 * v1652);
        if (v1654)
        {
          v1655 = *(_QWORD *)(a1 + 8704);
          v1656 = (*(_DWORD *)(a1 + 8728) * v1652);
          v1657 = (unsigned int *)(v1655 + 16 * (v1654 + v1656));
          v1658 = (unsigned int *)(v1655 + 16 * v1656);
          do
          {
            while (1)
            {
              v1667 = *v1653;
              v1668 = *(_DWORD *)(*(_QWORD *)(a1 + 10616) + 4 * *v1658);
              v1669 = *(_QWORD *)(a1 + 8632) + 8 * *((_QWORD *)v1658 + 1);
              v1670 = *v6;
              v1671 = *(_QWORD *)(a1 + 20040);
              if (*v1653 >= v1668)
                break;
              v1659 = *(_OWORD *)(v1669 + 16);
              v1660 = (_OWORD *)(v1671 + 8 * (v1668 + (_DWORD)v1670 * v1667));
              v1661 = *(_OWORD *)(v1669 + 32);
              v1662 = *(_OWORD *)(v1669 + 48);
              v1663 = *(_OWORD *)(v1669 + 64);
              v1664 = *(_OWORD *)(v1669 + 80);
              *v1660 = *(_OWORD *)v1669;
              v1660[1] = v1659;
              v1665 = (_OWORD *)((char *)v1660 + 8 * v1670);
              *v1665 = v1661;
              v1665[1] = v1662;
              v1666 = &v1660[v1670];
              *v1666 = v1663;
              v1666[1] = v1664;
              v1658 += 4;
              if (v1658 == v1657)
                goto LABEL_428;
            }
            v1672 = (int64x2_t *)(v1671 + 8 * (v1667 + (_DWORD)v1670 * v1668));
            v1673 = *(int64x2_t *)(v1669 + 16);
            v1675 = *(int64x2_t *)(v1669 + 32);
            v1674 = *(int64x2_t *)(v1669 + 48);
            v1677 = *(_OWORD *)(v1669 + 64);
            v1676 = *(_OWORD *)(v1669 + 80);
            v1678 = vzip1q_s64(*(int64x2_t *)v1669, v1675);
            v1679 = vzip2q_s64(*(int64x2_t *)v1669, v1675);
            v1672[1].i64[0] = v1677;
            *v1672 = v1678;
            v1680 = (int64x2_t *)((char *)v1672 + 8 * v1670);
            *v1680 = v1679;
            v1680[1].i64[0] = *((_QWORD *)&v1677 + 1);
            v1681 = &v1672[v1670];
            v1681[1].i64[0] = v1676;
            *v1681 = vzip1q_s64(v1673, v1674);
            v1682 = (int64x2_t *)((char *)v1672 + 24 * v1670);
            v1682[1].i64[0] = *((_QWORD *)&v1676 + 1);
            *v1682 = vzip2q_s64(v1673, v1674);
            v1658 += 4;
          }
          while (v1658 != v1657);
LABEL_428:
          v1651 = *(unsigned int *)(a1 + 8628);
        }
        ++v1652;
        ++v1653;
      }
      while (v1652 < v1651);
    }
    v1765 = *(unsigned int *)(a1 + 2436);
    if ((_DWORD)v1765)
    {
      v1766 = 0;
      v1767 = *(unsigned int **)(a1 + 10520);
      do
      {
        v1768 = *(_QWORD *)(*(_QWORD *)(a1 + 2544) + 8 * v1766);
        if (v1768)
        {
          v1769 = *(_QWORD *)(a1 + 2512);
          v1770 = (*(_DWORD *)(a1 + 2536) * v1766);
          v1771 = (unsigned int *)(v1769 + 16 * (v1768 + v1770));
          v1772 = (unsigned int *)(v1769 + 16 * v1770);
          do
          {
            v1808 = *v1767;
            v1809 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1772);
            v1810 = *(_QWORD *)(a1 + 2440) + 8 * *((_QWORD *)v1772 + 1);
            v1811 = *v6;
            v1812 = *(_QWORD *)(a1 + 20040);
            if (*v1767 < v1809)
            {
              v1773 = *(int64x2_t *)v1810;
              v1774 = (int64x2_t *)(v1812 + 8 * (v1809 + (_DWORD)v1811 * v1808));
              v1775 = *(int64x2_t *)(v1810 + 32);
              v1776 = *(int64x2_t *)(v1810 + 48);
              v1777 = *(int64x2_t *)(v1810 + 64);
              v1778 = *(int64x2_t *)(v1810 + 80);
              v1780 = *(int8x16_t *)(v1810 + 96);
              v1779 = *(int8x16_t *)(v1810 + 112);
              v1781 = *(int8x16_t *)(v1810 + 128);
              v1782 = *(int8x16_t *)(v1810 + 144);
              v1783 = vextq_s8(v1781, v1781, 8uLL).u64[0];
              v1784 = vextq_s8(v1779, v1779, 8uLL).u64[0];
              v1785 = vextq_s8(v1780, v1780, 8uLL).u64[0];
              v1786 = *(int8x16_t *)(v1810 + 160);
              v1787 = *(int8x16_t *)(v1810 + 176);
              v1788 = vextq_s8(v1787, v1787, 8uLL).u64[0];
              v1789 = vextq_s8(v1786, v1786, 8uLL).u64[0];
              v1790 = vextq_s8(v1782, v1782, 8uLL).u64[0];
              v1792 = *(int8x16_t *)(v1810 + 192);
              v1791 = *(int8x16_t *)(v1810 + 208);
              v1794 = *(int8x16_t *)(v1810 + 224);
              v1793 = *(int8x16_t *)(v1810 + 240);
              v1795 = vextq_s8(v1794, v1794, 8uLL).u64[0];
              v1796 = vextq_s8(v1791, v1791, 8uLL).u64[0];
              v1797 = vextq_s8(v1792, v1792, 8uLL).u64[0];
              v1798 = *(int8x16_t *)(v1810 + 256);
              v1799 = *(int8x16_t *)(v1810 + 272);
              v1800 = vextq_s8(v1799, v1799, 8uLL).u64[0];
              v1801 = vextq_s8(v1798, v1798, 8uLL).u64[0];
              v1802 = vextq_s8(v1793, v1793, 8uLL).u64[0];
              v1774[1] = *(int64x2_t *)(v1810 + 16);
              v1774[2] = v1775;
              *v1774 = v1773;
              v1803 = (int64x2_t *)((char *)v1774 + 8 * v1811);
              v1803[1] = v1777;
            }
            else
            {
              v1774 = (int64x2_t *)(v1812 + 8 * (v1808 + (_DWORD)v1811 * v1809));
              v1813 = *(int64x2_t *)(v1810 + 16);
              v1814 = *(int64x2_t *)(v1810 + 64);
              v1815 = *(int64x2_t *)(v1810 + 80);
              v1817 = *(int64x2_t *)(v1810 + 32);
              v1816 = *(int64x2_t *)(v1810 + 48);
              v1818 = *(int64x2_t *)(v1810 + 96);
              v1819 = *(int64x2_t *)(v1810 + 112);
              v1820 = *(int64x2_t *)(v1810 + 128);
              v1822 = *(int64x2_t *)(v1810 + 192);
              v1821 = *(int64x2_t *)(v1810 + 208);
              v1823 = *(int64x2_t *)(v1810 + 224);
              v1824 = vzip1q_s64(*(int64x2_t *)v1810, v1816);
              v1825 = vzip1q_s64(v1818, *(int64x2_t *)(v1810 + 144));
              v1826 = vzip1q_s64(v1822, *(int64x2_t *)(v1810 + 240));
              v1827.i64[0] = vdupq_laneq_s64(v1818, 1).u64[0];
              v1827.i64[1] = *(_QWORD *)(v1810 + 152);
              v1776 = vzip2q_s64(*(int64x2_t *)v1810, v1816);
              v1778.i64[0] = vdupq_laneq_s64(v1822, 1).u64[0];
              v1778.i64[1] = *(_QWORD *)(v1810 + 248);
              v1780 = (int8x16_t)vzip1q_s64(v1813, v1814);
              v1779 = (int8x16_t)vzip1q_s64(v1819, *(int64x2_t *)(v1810 + 160));
              v1781 = (int8x16_t)vzip1q_s64(v1821, *(int64x2_t *)(v1810 + 256));
              v1783 = vextq_s8(v1781, v1781, 8uLL).u64[0];
              v1784 = vextq_s8(v1779, v1779, 8uLL).u64[0];
              v1785 = vextq_s8(v1780, v1780, 8uLL).u64[0];
              v1782 = (int8x16_t)vzip2q_s64(v1813, v1814);
              v1786.i64[0] = vdupq_laneq_s64(v1819, 1).u64[0];
              v1786.i64[1] = *(_QWORD *)(v1810 + 168);
              v1787.i64[0] = vdupq_laneq_s64(v1821, 1).u64[0];
              v1787.i64[1] = *(_QWORD *)(v1810 + 264);
              v1790 = vextq_s8(v1782, v1782, 8uLL).u64[0];
              v1788 = vextq_s8(v1787, v1787, 8uLL).u64[0];
              v1789 = vextq_s8(v1786, v1786, 8uLL).u64[0];
              v1792 = (int8x16_t)vzip1q_s64(v1817, v1815);
              v1791 = (int8x16_t)vzip1q_s64(v1820, *(int64x2_t *)(v1810 + 176));
              v1794 = (int8x16_t)vzip1q_s64(v1823, *(int64x2_t *)(v1810 + 272));
              v1795 = vextq_s8(v1794, v1794, 8uLL).u64[0];
              v1796 = vextq_s8(v1791, v1791, 8uLL).u64[0];
              v1797 = vextq_s8(v1792, v1792, 8uLL).u64[0];
              v1793 = (int8x16_t)vzip2q_s64(v1817, v1815);
              v1798.i64[0] = vdupq_laneq_s64(v1820, 1).u64[0];
              v1798.i64[1] = *(_QWORD *)(v1810 + 184);
              v1799.i64[0] = vdupq_laneq_s64(v1823, 1).u64[0];
              v1799.i64[1] = *(_QWORD *)(v1810 + 280);
              v1802 = vextq_s8(v1793, v1793, 8uLL).u64[0];
              v1800 = vextq_s8(v1799, v1799, 8uLL).u64[0];
              v1801 = vextq_s8(v1798, v1798, 8uLL).u64[0];
              v1774[1] = v1825;
              v1774[2] = v1826;
              *v1774 = v1824;
              v1803 = (int64x2_t *)((char *)v1774 + 8 * v1811);
              v1803[1] = v1827;
            }
            v1803[2] = v1778;
            *v1803 = v1776;
            v1780.i64[1] = v1785;
            v1779.i64[1] = v1784;
            v1804 = (int8x16_t *)&v1774[v1811];
            *v1804 = v1780;
            v1804[1] = v1779;
            v1781.i64[1] = v1783;
            v1804[2] = v1781;
            v1787.i64[1] = v1788;
            v1805 = (int8x16_t *)((char *)v1774 + 24 * v1811);
            v1786.i64[1] = v1789;
            v1782.i64[1] = v1790;
            v1805[1] = v1786;
            v1805[2] = v1787;
            *v1805 = v1782;
            v1806 = (int8x16_t *)&v1774[2 * v1811];
            v1794.i64[1] = v1795;
            v1791.i64[1] = v1796;
            v1792.i64[1] = v1797;
            v1806[1] = v1791;
            v1806[2] = v1794;
            *v1806 = v1792;
            v1807 = (int8x16_t *)((char *)v1774 + 40 * v1811);
            v1799.i64[1] = v1800;
            v1798.i64[1] = v1801;
            v1793.i64[1] = v1802;
            v1772 += 4;
            v1807[1] = v1798;
            v1807[2] = v1799;
            *v1807 = v1793;
          }
          while (v1772 != v1771);
          v1765 = *(unsigned int *)(a1 + 2436);
        }
        ++v1766;
        ++v1767;
      }
      while (v1766 < v1765);
    }
    v1849 = *(unsigned int *)(a1 + 3444);
    if ((_DWORD)v1849)
    {
      v1850 = 0;
      v1851 = *(unsigned int **)(a1 + 10544);
      do
      {
        v1852 = *(_QWORD *)(*(_QWORD *)(a1 + 3552) + 8 * v1850);
        if (v1852)
        {
          v1853 = *(_QWORD *)(a1 + 3520);
          v1854 = (*(_DWORD *)(a1 + 3544) * v1850);
          v1855 = (unsigned int *)(v1853 + 16 * (v1852 + v1854));
          v1856 = (unsigned int *)(v1853 + 16 * v1854);
          do
          {
            while (1)
            {
              v1892 = *v1851;
              v1893 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v1856);
              v1894 = *(_QWORD *)(a1 + 3448) + 8 * *((_QWORD *)v1856 + 1);
              v1895 = *v6;
              v1896 = *(_QWORD *)(a1 + 20040);
              if (*v1851 >= v1893)
                break;
              v1857 = *(int64x2_t *)v1894;
              v1858 = (int64x2_t *)(v1896 + 8 * (v1893 + (_DWORD)v1895 * v1892));
              v1859 = *(int64x2_t *)(v1894 + 32);
              v1860 = *(_OWORD *)(v1894 + 48);
              v1861 = *(_OWORD *)(v1894 + 64);
              v1862 = *(_OWORD *)(v1894 + 80);
              v1863 = *(int64x2_t *)(v1894 + 96);
              v1864 = *(int64x2_t *)(v1894 + 112);
              v1865 = *(int64x2_t *)(v1894 + 128);
              v1866 = *(_OWORD *)(v1894 + 144);
              v1867 = *(_OWORD *)(v1894 + 160);
              v1868 = *(_OWORD *)(v1894 + 176);
              v1869 = *(int64x2_t *)(v1894 + 192);
              v1870 = *(int64x2_t *)(v1894 + 208);
              v1871 = *(int64x2_t *)(v1894 + 224);
              v1872 = *(_OWORD *)(v1894 + 240);
              v1873 = *(_OWORD *)(v1894 + 256);
              v1874 = *(_OWORD *)(v1894 + 272);
              v1875 = *(int64x2_t *)(v1894 + 288);
              v1876 = *(int64x2_t *)(v1894 + 304);
              v1877 = *(int64x2_t *)(v1894 + 320);
              v1878 = *(_OWORD *)(v1894 + 336);
              v1879 = *(_OWORD *)(v1894 + 352);
              v1880 = *(_OWORD *)(v1894 + 368);
              v1881 = *(int64x2_t *)(v1894 + 384);
              v1882 = *(int64x2_t *)(v1894 + 400);
              v1883 = *(int64x2_t *)(v1894 + 416);
              v1858[1] = *(int64x2_t *)(v1894 + 16);
              v1858[2] = v1859;
              *v1858 = v1857;
              v1884 = &v1858->i8[8 * v1895];
              *((_OWORD *)v1884 + 1) = v1861;
              *((_OWORD *)v1884 + 2) = v1862;
              *(_OWORD *)v1884 = v1860;
              v1885 = &v1858[v1895];
              v1885[1] = v1864;
              v1885[2] = v1865;
              *v1885 = v1863;
              v1886 = &v1858->i8[24 * v1895];
              *((_OWORD *)v1886 + 1) = v1867;
              *((_OWORD *)v1886 + 2) = v1868;
              *(_OWORD *)v1886 = v1866;
              v1887 = &v1858[2 * v1895];
              v1887[1] = v1870;
              v1887[2] = v1871;
              *v1887 = v1869;
              v1888 = &v1858->i8[40 * v1895];
              *((_OWORD *)v1888 + 1) = v1873;
              *((_OWORD *)v1888 + 2) = v1874;
              *(_OWORD *)v1888 = v1872;
              v1889 = &v1858[3 * v1895];
              v1889[1] = v1876;
              v1889[2] = v1877;
              *v1889 = v1875;
              v1890 = &v1858->i8[56 * v1895];
              *((_OWORD *)v1890 + 1) = v1879;
              *((_OWORD *)v1890 + 2) = v1880;
              *(_OWORD *)v1890 = v1878;
              v1891 = &v1858[4 * v1895];
              v1891[1] = v1882;
              v1891[2] = v1883;
              *v1891 = v1881;
              v1856 += 4;
              if (v1856 == v1855)
                goto LABEL_468;
            }
            v1897 = *(int64x2_t *)(v1894 + 16);
            v1898 = (int64x2_t *)(v1896 + 8 * (v1892 + (_DWORD)v1895 * v1893));
            v1900 = *(int64x2_t *)(v1894 + 64);
            v1899 = *(int64x2_t *)(v1894 + 80);
            v1901 = *(int64x2_t *)(v1894 + 32);
            v1902 = *(int64x2_t *)(v1894 + 48);
            v1904 = *(int64x2_t *)(v1894 + 96);
            v1903 = *(int64x2_t *)(v1894 + 112);
            v1906 = *(int64x2_t *)(v1894 + 160);
            v1905 = *(int64x2_t *)(v1894 + 176);
            v1907 = *(int64x2_t *)(v1894 + 128);
            v1908 = *(int64x2_t *)(v1894 + 144);
            v1910 = *(int64x2_t *)(v1894 + 192);
            v1909 = *(int64x2_t *)(v1894 + 208);
            v1912 = *(int64x2_t *)(v1894 + 256);
            v1911 = *(int64x2_t *)(v1894 + 272);
            v1913 = *(int64x2_t *)(v1894 + 224);
            v1914 = *(int64x2_t *)(v1894 + 240);
            v1916 = *(int64x2_t *)(v1894 + 288);
            v1915 = *(int64x2_t *)(v1894 + 304);
            v1918 = *(int64x2_t *)(v1894 + 352);
            v1917 = *(int64x2_t *)(v1894 + 368);
            v1920 = *(int64x2_t *)(v1894 + 320);
            v1919 = *(int64x2_t *)(v1894 + 336);
            v1922 = *(_OWORD *)(v1894 + 400);
            v1921 = *(_OWORD *)(v1894 + 416);
            v1923 = *(_OWORD *)(v1894 + 384);
            v1924 = vzip1q_s64(*(int64x2_t *)v1894, v1902);
            v1925 = vzip2q_s64(*(int64x2_t *)v1894, v1902);
            v1898[2] = vzip1q_s64(v1910, v1914);
            v1898[3] = vzip1q_s64(v1916, v1919);
            v1898[4].i64[0] = v1923;
            *v1898 = v1924;
            v1898[1] = vzip1q_s64(v1904, v1908);
            v1926 = (int64x2_t *)((char *)v1898 + 8 * v1895);
            v1926[2] = vzip2q_s64(v1910, v1914);
            v1926[3] = vzip2q_s64(v1916, v1919);
            *v1926 = v1925;
            v1926[1] = vzip2q_s64(v1904, v1908);
            v1926[4].i64[0] = *((_QWORD *)&v1923 + 1);
            v1927 = &v1898[v1895];
            v1927[4].i64[0] = v1922;
            v1927[2] = vzip1q_s64(v1909, v1912);
            v1927[3] = vzip1q_s64(v1915, v1918);
            *v1927 = vzip1q_s64(v1897, v1900);
            v1927[1] = vzip1q_s64(v1903, v1906);
            v1928 = (int64x2_t *)((char *)v1898 + 24 * v1895);
            v1928[4].i64[0] = *((_QWORD *)&v1922 + 1);
            v1928[2] = vzip2q_s64(v1909, v1912);
            v1928[3] = vzip2q_s64(v1915, v1918);
            *v1928 = vzip2q_s64(v1897, v1900);
            v1928[1] = vzip2q_s64(v1903, v1906);
            v1929 = &v1898[2 * v1895];
            v1929[4].i64[0] = v1921;
            v1929[2] = vzip1q_s64(v1913, v1911);
            v1929[3] = vzip1q_s64(v1920, v1917);
            *v1929 = vzip1q_s64(v1901, v1899);
            v1929[1] = vzip1q_s64(v1907, v1905);
            v1930 = (int64x2_t *)((char *)v1898 + 40 * v1895);
            v1930[4].i64[0] = *((_QWORD *)&v1921 + 1);
            v1930[2] = vzip2q_s64(v1913, v1911);
            v1930[3] = vzip2q_s64(v1920, v1917);
            *v1930 = vzip2q_s64(v1901, v1899);
            v1930[1] = vzip2q_s64(v1907, v1905);
            v1856 += 4;
          }
          while (v1856 != v1855);
LABEL_468:
          v1849 = *(unsigned int *)(a1 + 3444);
        }
        ++v1850;
        ++v1851;
      }
      while (v1850 < v1849);
    }
    v1994 = *(unsigned int *)(a1 + 4452);
    if ((_DWORD)v1994)
    {
      v1995 = 0;
      v1996 = *(unsigned int **)(a1 + 10568);
      do
      {
        v1997 = *(_QWORD *)(*(_QWORD *)(a1 + 4560) + 8 * v1995);
        if (v1997)
        {
          v1998 = *(_QWORD *)(a1 + 4528);
          v1999 = (*(_DWORD *)(a1 + 4552) * v1995);
          v2000 = (unsigned int *)(v1998 + 16 * (v1997 + v1999));
          v2001 = (unsigned int *)(v1998 + 16 * v1999);
          do
          {
            while (1)
            {
              v2003 = *v1996;
              v2004 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2001);
              v2005 = (int8x16_t *)(*(_QWORD *)(a1 + 4456) + 8 * *((_QWORD *)v2001 + 1));
              v2006 = *v6;
              v2007 = *(_QWORD *)(a1 + 20040);
              v2009 = v2005[1];
              v2008 = v2005[2];
              v2010 = *v2005;
              v2011 = vextq_s8(v2008, v2008, 8uLL).u64[0];
              v2012 = vextq_s8(v2009, v2009, 8uLL).u64[0];
              v2013 = vextq_s8(v2010, v2010, 8uLL).u64[0];
              if (*v1996 >= v2004)
                break;
              v2010.i64[1] = v2013;
              v2009.i64[1] = v2012;
              v2002 = (int8x16_t *)(v2007 + 8 * (v2004 + (_DWORD)v2006 * v2003));
              *v2002 = v2010;
              v2002[1] = v2009;
              v2008.i64[1] = v2011;
              v2002[2] = v2008;
              v2001 += 4;
              if (v2001 == v2000)
                goto LABEL_488;
            }
            v2014 = (_QWORD *)(v2007 + 8 * (v2003 + (_DWORD)v2006 * v2004));
            *v2014 = v2010.i64[0];
            v2014[v2006] = v2013;
            v2014[2 * v2006] = v2009.i64[0];
            v2014[3 * v2006] = v2012;
            v2014[4 * v2006] = v2008.i64[0];
            v2014[5 * v2006] = v2011;
            v2001 += 4;
          }
          while (v2001 != v2000);
LABEL_488:
          v1994 = *(unsigned int *)(a1 + 4452);
        }
        ++v1995;
        ++v1996;
      }
      while (v1995 < v1994);
    }
    v2061 = *(unsigned int *)(a1 + 5460);
    if ((_DWORD)v2061)
    {
      v2062 = 0;
      v2063 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2064 = *(_QWORD *)(*(_QWORD *)(a1 + 5568) + 8 * v2062);
        if (v2064)
        {
          v2065 = *(_QWORD *)(a1 + 5536);
          v2066 = (*(_DWORD *)(a1 + 5560) * v2062);
          v2067 = (unsigned int *)(v2065 + 16 * (v2064 + v2066));
          v2068 = (unsigned int *)(v2065 + 16 * v2066);
          do
          {
            v2104 = *v2063;
            v2105 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2068);
            v2106 = *(_QWORD *)(a1 + 5464) + 8 * *((_QWORD *)v2068 + 1);
            v2107 = *v6;
            v2108 = *(_QWORD *)(a1 + 20040);
            if (*v2063 < v2105)
            {
              v2069 = *(int64x2_t *)v2106;
              v2070 = (int64x2_t *)(v2108 + 8 * (v2105 + (_DWORD)v2107 * v2104));
              v2071 = *(int64x2_t *)(v2106 + 32);
              v2072 = *(int64x2_t *)(v2106 + 48);
              v2073 = *(int64x2_t *)(v2106 + 64);
              v2074 = *(int64x2_t *)(v2106 + 80);
              v2076 = *(int8x16_t *)(v2106 + 96);
              v2075 = *(int8x16_t *)(v2106 + 112);
              v2077 = *(int8x16_t *)(v2106 + 128);
              v2078 = *(int8x16_t *)(v2106 + 144);
              v2079 = vextq_s8(v2077, v2077, 8uLL).u64[0];
              v2080 = vextq_s8(v2075, v2075, 8uLL).u64[0];
              v2081 = vextq_s8(v2076, v2076, 8uLL).u64[0];
              v2082 = *(int8x16_t *)(v2106 + 160);
              v2083 = *(int8x16_t *)(v2106 + 176);
              v2084 = vextq_s8(v2083, v2083, 8uLL).u64[0];
              v2085 = vextq_s8(v2082, v2082, 8uLL).u64[0];
              v2086 = vextq_s8(v2078, v2078, 8uLL).u64[0];
              v2088 = *(int8x16_t *)(v2106 + 192);
              v2087 = *(int8x16_t *)(v2106 + 208);
              v2090 = *(int8x16_t *)(v2106 + 224);
              v2089 = *(int8x16_t *)(v2106 + 240);
              v2091 = vextq_s8(v2090, v2090, 8uLL).u64[0];
              v2092 = vextq_s8(v2087, v2087, 8uLL).u64[0];
              v2093 = vextq_s8(v2088, v2088, 8uLL).u64[0];
              v2094 = *(int8x16_t *)(v2106 + 256);
              v2095 = *(int8x16_t *)(v2106 + 272);
              v2096 = vextq_s8(v2095, v2095, 8uLL).u64[0];
              v2097 = vextq_s8(v2094, v2094, 8uLL).u64[0];
              v2098 = vextq_s8(v2089, v2089, 8uLL).u64[0];
              v2070[1] = *(int64x2_t *)(v2106 + 16);
              v2070[2] = v2071;
              *v2070 = v2069;
              v2099 = (int64x2_t *)((char *)v2070 + 8 * v2107);
              v2099[1] = v2073;
            }
            else
            {
              v2070 = (int64x2_t *)(v2108 + 8 * (v2104 + (_DWORD)v2107 * v2105));
              v2109 = *(int64x2_t *)(v2106 + 16);
              v2110 = *(int64x2_t *)(v2106 + 64);
              v2111 = *(int64x2_t *)(v2106 + 80);
              v2113 = *(int64x2_t *)(v2106 + 32);
              v2112 = *(int64x2_t *)(v2106 + 48);
              v2114 = *(int64x2_t *)(v2106 + 96);
              v2115 = *(int64x2_t *)(v2106 + 112);
              v2116 = *(int64x2_t *)(v2106 + 128);
              v2118 = *(int64x2_t *)(v2106 + 192);
              v2117 = *(int64x2_t *)(v2106 + 208);
              v2119 = *(int64x2_t *)(v2106 + 224);
              v2120 = vzip1q_s64(*(int64x2_t *)v2106, v2112);
              v2121 = vzip1q_s64(v2114, *(int64x2_t *)(v2106 + 144));
              v2122 = vzip1q_s64(v2118, *(int64x2_t *)(v2106 + 240));
              v2123.i64[0] = vdupq_laneq_s64(v2114, 1).u64[0];
              v2123.i64[1] = *(_QWORD *)(v2106 + 152);
              v2072 = vzip2q_s64(*(int64x2_t *)v2106, v2112);
              v2074.i64[0] = vdupq_laneq_s64(v2118, 1).u64[0];
              v2074.i64[1] = *(_QWORD *)(v2106 + 248);
              v2076 = (int8x16_t)vzip1q_s64(v2109, v2110);
              v2075 = (int8x16_t)vzip1q_s64(v2115, *(int64x2_t *)(v2106 + 160));
              v2077 = (int8x16_t)vzip1q_s64(v2117, *(int64x2_t *)(v2106 + 256));
              v2079 = vextq_s8(v2077, v2077, 8uLL).u64[0];
              v2080 = vextq_s8(v2075, v2075, 8uLL).u64[0];
              v2081 = vextq_s8(v2076, v2076, 8uLL).u64[0];
              v2078 = (int8x16_t)vzip2q_s64(v2109, v2110);
              v2082.i64[0] = vdupq_laneq_s64(v2115, 1).u64[0];
              v2082.i64[1] = *(_QWORD *)(v2106 + 168);
              v2083.i64[0] = vdupq_laneq_s64(v2117, 1).u64[0];
              v2083.i64[1] = *(_QWORD *)(v2106 + 264);
              v2086 = vextq_s8(v2078, v2078, 8uLL).u64[0];
              v2084 = vextq_s8(v2083, v2083, 8uLL).u64[0];
              v2085 = vextq_s8(v2082, v2082, 8uLL).u64[0];
              v2088 = (int8x16_t)vzip1q_s64(v2113, v2111);
              v2087 = (int8x16_t)vzip1q_s64(v2116, *(int64x2_t *)(v2106 + 176));
              v2090 = (int8x16_t)vzip1q_s64(v2119, *(int64x2_t *)(v2106 + 272));
              v2091 = vextq_s8(v2090, v2090, 8uLL).u64[0];
              v2092 = vextq_s8(v2087, v2087, 8uLL).u64[0];
              v2093 = vextq_s8(v2088, v2088, 8uLL).u64[0];
              v2089 = (int8x16_t)vzip2q_s64(v2113, v2111);
              v2094.i64[0] = vdupq_laneq_s64(v2116, 1).u64[0];
              v2094.i64[1] = *(_QWORD *)(v2106 + 184);
              v2095.i64[0] = vdupq_laneq_s64(v2119, 1).u64[0];
              v2095.i64[1] = *(_QWORD *)(v2106 + 280);
              v2098 = vextq_s8(v2089, v2089, 8uLL).u64[0];
              v2096 = vextq_s8(v2095, v2095, 8uLL).u64[0];
              v2097 = vextq_s8(v2094, v2094, 8uLL).u64[0];
              v2070[1] = v2121;
              v2070[2] = v2122;
              *v2070 = v2120;
              v2099 = (int64x2_t *)((char *)v2070 + 8 * v2107);
              v2099[1] = v2123;
            }
            v2099[2] = v2074;
            *v2099 = v2072;
            v2076.i64[1] = v2081;
            v2075.i64[1] = v2080;
            v2100 = (int8x16_t *)&v2070[v2107];
            *v2100 = v2076;
            v2100[1] = v2075;
            v2077.i64[1] = v2079;
            v2100[2] = v2077;
            v2083.i64[1] = v2084;
            v2101 = (int8x16_t *)((char *)v2070 + 24 * v2107);
            v2082.i64[1] = v2085;
            v2078.i64[1] = v2086;
            v2101[1] = v2082;
            v2101[2] = v2083;
            *v2101 = v2078;
            v2102 = (int8x16_t *)&v2070[2 * v2107];
            v2090.i64[1] = v2091;
            v2087.i64[1] = v2092;
            v2088.i64[1] = v2093;
            v2102[1] = v2087;
            v2102[2] = v2090;
            *v2102 = v2088;
            v2103 = (int8x16_t *)((char *)v2070 + 40 * v2107);
            v2095.i64[1] = v2096;
            v2094.i64[1] = v2097;
            v2089.i64[1] = v2098;
            v2068 += 4;
            v2103[1] = v2094;
            v2103[2] = v2095;
            *v2103 = v2089;
          }
          while (v2068 != v2067);
          v2061 = *(unsigned int *)(a1 + 5460);
        }
        ++v2062;
        ++v2063;
      }
      while (v2062 < v2061);
    }
    v2170 = *(unsigned int *)(a1 + 6468);
    if ((_DWORD)v2170)
    {
      v2171 = 0;
      v2172 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2173 = *(_QWORD *)(*(_QWORD *)(a1 + 6576) + 8 * v2171);
        if (v2173)
        {
          v2174 = *(_QWORD *)(a1 + 6544);
          v2175 = (*(_DWORD *)(a1 + 6568) * v2171);
          v2176 = (unsigned int *)(v2174 + 16 * (v2173 + v2175));
          v2177 = (unsigned int *)(v2174 + 16 * v2175);
          do
          {
            while (1)
            {
              v2193 = *v2172;
              v2194 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2177);
              v2195 = *(_QWORD *)(a1 + 6472) + 8 * *((_QWORD *)v2177 + 1);
              v2196 = *v6;
              v2197 = *(_QWORD *)(a1 + 20040);
              if (*v2172 >= v2194)
                break;
              v2178 = *(int64x2_t *)v2195;
              v2179 = (int64x2_t *)(v2197 + 8 * (v2194 + (_DWORD)v2196 * v2193));
              v2180 = *(int64x2_t *)(v2195 + 32);
              v2181 = *(_OWORD *)(v2195 + 48);
              v2182 = *(_OWORD *)(v2195 + 64);
              v2183 = *(_OWORD *)(v2195 + 80);
              v2184 = *(int64x2_t *)(v2195 + 96);
              v2185 = *(int64x2_t *)(v2195 + 112);
              v2186 = *(int64x2_t *)(v2195 + 128);
              v2187 = *(_OWORD *)(v2195 + 144);
              v2188 = *(_OWORD *)(v2195 + 160);
              v2189 = *(_OWORD *)(v2195 + 176);
              v2179[1] = *(int64x2_t *)(v2195 + 16);
              v2179[2] = v2180;
              *v2179 = v2178;
              v2190 = &v2179->i8[8 * v2196];
              *((_OWORD *)v2190 + 1) = v2182;
              *((_OWORD *)v2190 + 2) = v2183;
              *(_OWORD *)v2190 = v2181;
              v2191 = &v2179[v2196];
              v2191[1] = v2185;
              v2191[2] = v2186;
              *v2191 = v2184;
              v2192 = &v2179->i8[24 * v2196];
              *((_OWORD *)v2192 + 1) = v2188;
              *((_OWORD *)v2192 + 2) = v2189;
              *(_OWORD *)v2192 = v2187;
              v2177 += 4;
              if (v2177 == v2176)
                goto LABEL_528;
            }
            v2198 = *(int64x2_t *)(v2195 + 16);
            v2199 = (int64x2_t *)(v2197 + 8 * (v2193 + (_DWORD)v2196 * v2194));
            v2201 = *(int64x2_t *)(v2195 + 64);
            v2200 = *(int64x2_t *)(v2195 + 80);
            v2202 = *(int64x2_t *)(v2195 + 32);
            v2203 = *(int64x2_t *)(v2195 + 48);
            v2205 = *(int64x2_t *)(v2195 + 96);
            v2204 = *(int64x2_t *)(v2195 + 112);
            v2207 = *(int64x2_t *)(v2195 + 160);
            v2206 = *(int64x2_t *)(v2195 + 176);
            v2208 = *(int64x2_t *)(v2195 + 128);
            v2209 = *(int64x2_t *)(v2195 + 144);
            v2210 = vzip2q_s64(*(int64x2_t *)v2195, v2203);
            *v2199 = vzip1q_s64(*(int64x2_t *)v2195, v2203);
            v2199[1] = vzip1q_s64(v2205, v2209);
            v2211 = (int64x2_t *)((char *)v2199 + 8 * v2196);
            *v2211 = v2210;
            v2211[1] = vzip2q_s64(v2205, v2209);
            v2212 = &v2199[v2196];
            *v2212 = vzip1q_s64(v2198, v2201);
            v2212[1] = vzip1q_s64(v2204, v2207);
            v2213 = (int64x2_t *)((char *)v2199 + 24 * v2196);
            *v2213 = vzip2q_s64(v2198, v2201);
            v2213[1] = vzip2q_s64(v2204, v2207);
            v2214 = &v2199[2 * v2196];
            *v2214 = vzip1q_s64(v2202, v2200);
            v2214[1] = vzip1q_s64(v2208, v2206);
            v2215 = (int64x2_t *)((char *)v2199 + 40 * v2196);
            *v2215 = vzip2q_s64(v2202, v2200);
            v2215[1] = vzip2q_s64(v2208, v2206);
            v2177 += 4;
          }
          while (v2177 != v2176);
LABEL_528:
          v2170 = *(unsigned int *)(a1 + 6468);
        }
        ++v2171;
        ++v2172;
      }
      while (v2171 < v2170);
    }
    v2256 = *(unsigned int *)(a1 + 7476);
    if ((_DWORD)v2256)
    {
      v2257 = 0;
      v2258 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2259 = *(_QWORD *)(*(_QWORD *)(a1 + 7584) + 8 * v2257);
        if (v2259)
        {
          v2260 = *(_QWORD *)(a1 + 7552);
          v2261 = (*(_DWORD *)(a1 + 7576) * v2257);
          v2262 = (unsigned int *)(v2260 + 16 * (v2259 + v2261));
          v2263 = (unsigned int *)(v2260 + 16 * v2261);
          do
          {
            while (1)
            {
              v2279 = *v2258;
              v2280 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2263);
              v2281 = *(_QWORD *)(a1 + 7480) + 8 * *((_QWORD *)v2263 + 1);
              v2282 = *v6;
              v2283 = *(_QWORD *)(a1 + 20040);
              if (*v2258 >= v2280)
                break;
              v2264 = *(int64x2_t *)v2281;
              v2265 = (int64x2_t *)(v2283 + 8 * (v2280 + (_DWORD)v2282 * v2279));
              v2266 = *(int64x2_t *)(v2281 + 32);
              v2267 = *(_OWORD *)(v2281 + 48);
              v2268 = *(_OWORD *)(v2281 + 64);
              v2269 = *(_OWORD *)(v2281 + 80);
              v2270 = *(int64x2_t *)(v2281 + 96);
              v2271 = *(int64x2_t *)(v2281 + 112);
              v2272 = *(int64x2_t *)(v2281 + 128);
              v2273 = *(_OWORD *)(v2281 + 144);
              v2274 = *(_OWORD *)(v2281 + 160);
              v2275 = *(_OWORD *)(v2281 + 176);
              v2265[1] = *(int64x2_t *)(v2281 + 16);
              v2265[2] = v2266;
              *v2265 = v2264;
              v2276 = &v2265->i8[8 * v2282];
              *((_OWORD *)v2276 + 1) = v2268;
              *((_OWORD *)v2276 + 2) = v2269;
              *(_OWORD *)v2276 = v2267;
              v2277 = &v2265[v2282];
              v2277[1] = v2271;
              v2277[2] = v2272;
              *v2277 = v2270;
              v2278 = &v2265->i8[24 * v2282];
              *((_OWORD *)v2278 + 1) = v2274;
              *((_OWORD *)v2278 + 2) = v2275;
              *(_OWORD *)v2278 = v2273;
              v2263 += 4;
              if (v2263 == v2262)
                goto LABEL_548;
            }
            v2284 = *(int64x2_t *)(v2281 + 16);
            v2285 = (int64x2_t *)(v2283 + 8 * (v2279 + (_DWORD)v2282 * v2280));
            v2287 = *(int64x2_t *)(v2281 + 64);
            v2286 = *(int64x2_t *)(v2281 + 80);
            v2288 = *(int64x2_t *)(v2281 + 32);
            v2289 = *(int64x2_t *)(v2281 + 48);
            v2291 = *(int64x2_t *)(v2281 + 96);
            v2290 = *(int64x2_t *)(v2281 + 112);
            v2293 = *(int64x2_t *)(v2281 + 160);
            v2292 = *(int64x2_t *)(v2281 + 176);
            v2294 = *(int64x2_t *)(v2281 + 128);
            v2295 = *(int64x2_t *)(v2281 + 144);
            v2296 = vzip2q_s64(*(int64x2_t *)v2281, v2289);
            *v2285 = vzip1q_s64(*(int64x2_t *)v2281, v2289);
            v2285[1] = vzip1q_s64(v2291, v2295);
            v2297 = (int64x2_t *)((char *)v2285 + 8 * v2282);
            *v2297 = v2296;
            v2297[1] = vzip2q_s64(v2291, v2295);
            v2298 = &v2285[v2282];
            *v2298 = vzip1q_s64(v2284, v2287);
            v2298[1] = vzip1q_s64(v2290, v2293);
            v2299 = (int64x2_t *)((char *)v2285 + 24 * v2282);
            *v2299 = vzip2q_s64(v2284, v2287);
            v2299[1] = vzip2q_s64(v2290, v2293);
            v2300 = &v2285[2 * v2282];
            *v2300 = vzip1q_s64(v2288, v2286);
            v2300[1] = vzip1q_s64(v2294, v2292);
            v2301 = (int64x2_t *)((char *)v2285 + 40 * v2282);
            *v2301 = vzip2q_s64(v2288, v2286);
            v2301[1] = vzip2q_s64(v2294, v2292);
            v2263 += 4;
          }
          while (v2263 != v2262);
LABEL_548:
          v2256 = *(unsigned int *)(a1 + 7476);
        }
        ++v2257;
        ++v2258;
      }
      while (v2257 < v2256);
    }
    v2324 = *(unsigned int *)(a1 + 8484);
    if ((_DWORD)v2324)
    {
      v2325 = 0;
      v2326 = *(unsigned int **)(a1 + 10664);
      do
      {
        v2327 = *(_QWORD *)(*(_QWORD *)(a1 + 8592) + 8 * v2325);
        if (v2327)
        {
          v2328 = *(_QWORD *)(a1 + 8560);
          v2329 = (*(_DWORD *)(a1 + 8584) * v2325);
          v2330 = (unsigned int *)(v2328 + 16 * (v2327 + v2329));
          v2331 = (unsigned int *)(v2328 + 16 * v2329);
          do
          {
            while (1)
            {
              v2343 = *v2326;
              v2344 = *(_DWORD *)(*(_QWORD *)(a1 + 10592) + 4 * *v2331);
              v2345 = *(_QWORD *)(a1 + 8488) + 8 * *((_QWORD *)v2331 + 1);
              v2346 = *v6;
              v2347 = *(_QWORD *)(a1 + 20040);
              if (*v2326 >= v2344)
                break;
              v2332 = *(int64x2_t *)v2345;
              v2333 = (int64x2_t *)(v2347 + 8 * (v2344 + (_DWORD)v2346 * v2343));
              v2334 = *(int64x2_t *)(v2345 + 32);
              v2335 = *(_OWORD *)(v2345 + 48);
              v2336 = *(_OWORD *)(v2345 + 64);
              v2337 = *(_OWORD *)(v2345 + 80);
              v2338 = *(int64x2_t *)(v2345 + 96);
              v2339 = *(int64x2_t *)(v2345 + 112);
              v2340 = *(int64x2_t *)(v2345 + 128);
              v2333[1] = *(int64x2_t *)(v2345 + 16);
              v2333[2] = v2334;
              *v2333 = v2332;
              v2341 = &v2333->i8[8 * v2346];
              *((_OWORD *)v2341 + 1) = v2336;
              *((_OWORD *)v2341 + 2) = v2337;
              *(_OWORD *)v2341 = v2335;
              v2342 = &v2333[v2346];
              v2342[1] = v2339;
              v2342[2] = v2340;
              *v2342 = v2338;
              v2331 += 4;
              if (v2331 == v2330)
                goto LABEL_568;
            }
            v2348 = *(int64x2_t *)(v2345 + 16);
            v2349 = (int64x2_t *)(v2347 + 8 * (v2343 + (_DWORD)v2346 * v2344));
            v2351 = *(int64x2_t *)(v2345 + 64);
            v2350 = *(int64x2_t *)(v2345 + 80);
            v2352 = *(int64x2_t *)(v2345 + 32);
            v2353 = *(int64x2_t *)(v2345 + 48);
            v2355 = *(_OWORD *)(v2345 + 112);
            v2354 = *(_OWORD *)(v2345 + 128);
            v2356 = *(_OWORD *)(v2345 + 96);
            v2357 = vzip1q_s64(*(int64x2_t *)v2345, v2353);
            v2358 = vzip2q_s64(*(int64x2_t *)v2345, v2353);
            v2349[1].i64[0] = v2356;
            *v2349 = v2357;
            v2359 = (int64x2_t *)((char *)v2349 + 8 * v2346);
            *v2359 = v2358;
            v2359[1].i64[0] = *((_QWORD *)&v2356 + 1);
            v2360 = &v2349[v2346];
            v2360[1].i64[0] = v2355;
            *v2360 = vzip1q_s64(v2348, v2351);
            v2361 = (int64x2_t *)((char *)v2349 + 24 * v2346);
            v2361[1].i64[0] = *((_QWORD *)&v2355 + 1);
            *v2361 = vzip2q_s64(v2348, v2351);
            v2362 = &v2349[2 * v2346];
            v2362[1].i64[0] = v2354;
            *v2362 = vzip1q_s64(v2352, v2350);
            v2363 = (int64x2_t *)((char *)v2349 + 40 * v2346);
            v2363[1].i64[0] = *((_QWORD *)&v2354 + 1);
            *v2363 = vzip2q_s64(v2352, v2350);
            v2331 += 4;
          }
          while (v2331 != v2330);
LABEL_568:
          v2324 = *(unsigned int *)(a1 + 8484);
        }
        ++v2325;
        ++v2326;
      }
      while (v2325 < v2324);
    }
    v2391 = *(unsigned int *)(a1 + 2292);
    if ((_DWORD)v2391)
    {
      v2392 = 0;
      v2393 = *(unsigned int **)(a1 + 10520);
      do
      {
        v2394 = *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 8 * v2392);
        if (v2394)
        {
          v2395 = *(_QWORD *)(a1 + 2368);
          v2396 = (*(_DWORD *)(a1 + 2392) * v2392);
          v2397 = (unsigned int *)(v2395 + 16 * (v2394 + v2396));
          v2398 = (unsigned int *)(v2395 + 16 * v2396);
          do
          {
            while (1)
            {
              v2404 = *v2393;
              v2405 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2398);
              v2406 = (_QWORD *)(*(_QWORD *)(a1 + 2296) + 8 * *((_QWORD *)v2398 + 1));
              v2407 = *v6;
              v2408 = *(_QWORD *)(a1 + 20040);
              v2409 = v2406[3];
              if (*v2393 >= v2405)
                break;
              v2399 = (_QWORD *)(v2408 + 8 * (v2405 + (_DWORD)v2407 * v2404));
              v2400 = v2406[1];
              v2401 = v2406[2];
              v2402 = v2406[4];
              v2403 = v2406[5];
              *v2399 = *v2406;
              v2399[v2407] = v2400;
              v2399[2 * v2407] = v2401;
              v2399[3 * v2407] = v2409;
              v2399[4 * v2407] = v2402;
              v2399[5 * v2407] = v2403;
              v2398 += 4;
              if (v2398 == v2397)
                goto LABEL_588;
            }
            v2410 = (_OWORD *)(v2408 + 8 * (v2404 + (_DWORD)v2407 * v2405));
            v2411 = *(_OWORD *)v2406;
            v2412 = *((_OWORD *)v2406 + 2);
            v2410[1] = *((_OWORD *)v2406 + 1);
            v2410[2] = v2412;
            *v2410 = v2411;
            v2398 += 4;
          }
          while (v2398 != v2397);
LABEL_588:
          v2391 = *(unsigned int *)(a1 + 2292);
        }
        ++v2392;
        ++v2393;
      }
      while (v2392 < v2391);
    }
    v2435 = *(unsigned int *)(a1 + 3300);
    if ((_DWORD)v2435)
    {
      v2436 = 0;
      v2437 = *(unsigned int **)(a1 + 10544);
      do
      {
        v2438 = *(_QWORD *)(*(_QWORD *)(a1 + 3408) + 8 * v2436);
        if (v2438)
        {
          v2439 = *(_QWORD *)(a1 + 3376);
          v2440 = (*(_DWORD *)(a1 + 3400) * v2436);
          v2441 = (unsigned int *)(v2439 + 16 * (v2438 + v2440));
          v2442 = (unsigned int *)(v2439 + 16 * v2440);
          do
          {
            while (1)
            {
              v2451 = *v2437;
              v2452 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2442);
              v2453 = (_QWORD *)(*(_QWORD *)(a1 + 3304) + 8 * *((_QWORD *)v2442 + 1));
              v2454 = *v6;
              v2455 = *(_QWORD *)(a1 + 20040);
              v2456 = v2453[3];
              if (*v2437 >= v2452)
                break;
              v2443 = v2453[1];
              v2444 = (_QWORD *)(v2455 + 8 * (v2452 + (_DWORD)v2454 * v2451));
              v2445 = v2453[2];
              v2446 = v2453[4];
              v2447 = v2453[5];
              v2448 = v2453[6];
              v2449 = v2453[7];
              v2450 = v2453[8];
              *v2444 = *v2453;
              v2444[v2454] = v2443;
              v2444[2 * v2454] = v2445;
              v2444[3 * v2454] = v2456;
              v2444[4 * v2454] = v2446;
              v2444[5 * v2454] = v2447;
              v2444[6 * v2454] = v2448;
              v2444[7 * v2454] = v2449;
              v2444[8 * v2454] = v2450;
              v2442 += 4;
              if (v2442 == v2441)
                goto LABEL_608;
            }
            v2457 = v2455 + 8 * (v2451 + (_DWORD)v2454 * v2452);
            v2458 = *(_OWORD *)v2453;
            v2459 = *((_OWORD *)v2453 + 1);
            v2460 = *((_OWORD *)v2453 + 2);
            v2461 = *((_OWORD *)v2453 + 3);
            *(_QWORD *)(v2457 + 64) = v2453[8];
            *(_OWORD *)(v2457 + 32) = v2460;
            *(_OWORD *)(v2457 + 48) = v2461;
            *(_OWORD *)v2457 = v2458;
            *(_OWORD *)(v2457 + 16) = v2459;
            v2442 += 4;
          }
          while (v2442 != v2441);
LABEL_608:
          v2435 = *(unsigned int *)(a1 + 3300);
        }
        ++v2436;
        ++v2437;
      }
      while (v2436 < v2435);
    }
    v2550 = *(unsigned int *)(a1 + 4308);
    if ((_DWORD)v2550)
    {
      v2551 = 0;
      v2552 = *(unsigned int **)(a1 + 10568);
      do
      {
        v2553 = *(_QWORD *)(*(_QWORD *)(a1 + 4416) + 8 * v2551);
        if (v2553)
        {
          v2554 = *(_QWORD *)(a1 + 4384);
          v2555 = (*(_DWORD *)(a1 + 4408) * v2551);
          v2556 = (unsigned int *)(v2554 + 16 * (v2553 + v2555));
          v2557 = (unsigned int *)(v2554 + 16 * v2555);
          do
          {
            v2558 = *v2552;
            v2559 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2557);
            if (*v2552 >= v2559)
              v2560 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2557);
            else
              v2560 = *v2552;
            if (v2558 <= v2559)
              v2558 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2557);
            *(_QWORD *)(*(_QWORD *)(a1 + 20040) + 8 * (v2558 + *v6 * v2560)) = *(_QWORD *)(*(_QWORD *)(a1 + 4312)
                                                                                           + 8
                                                                                           * *((_QWORD *)v2557 + 1));
            v2557 += 4;
          }
          while (v2557 != v2556);
          v2550 = *(unsigned int *)(a1 + 4308);
        }
        ++v2551;
        ++v2552;
      }
      while (v2551 < v2550);
    }
    v2685 = *(unsigned int *)(a1 + 5316);
    if ((_DWORD)v2685)
    {
      v2686 = 0;
      v2687 = *(unsigned int **)(a1 + 10592);
      do
      {
        v2688 = *(_QWORD *)(*(_QWORD *)(a1 + 5424) + 8 * v2686);
        if (v2688)
        {
          v2689 = *(_QWORD *)(a1 + 5392);
          v2690 = (*(_DWORD *)(a1 + 5416) * v2686);
          v2691 = (unsigned int *)(v2689 + 16 * (v2688 + v2690));
          v2692 = (unsigned int *)(v2689 + 16 * v2690);
          do
          {
            while (1)
            {
              v2698 = *v2687;
              v2699 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2692);
              v2700 = (_QWORD *)(*(_QWORD *)(a1 + 5320) + 8 * *((_QWORD *)v2692 + 1));
              v2701 = *v6;
              v2702 = *(_QWORD *)(a1 + 20040);
              v2703 = v2700[3];
              if (*v2687 >= v2699)
                break;
              v2693 = (_QWORD *)(v2702 + 8 * (v2699 + (_DWORD)v2701 * v2698));
              v2694 = v2700[1];
              v2695 = v2700[2];
              v2696 = v2700[4];
              v2697 = v2700[5];
              *v2693 = *v2700;
              v2693[v2701] = v2694;
              v2693[2 * v2701] = v2695;
              v2693[3 * v2701] = v2703;
              v2693[4 * v2701] = v2696;
              v2693[5 * v2701] = v2697;
              v2692 += 4;
              if (v2692 == v2691)
                goto LABEL_650;
            }
            v2704 = (_OWORD *)(v2702 + 8 * (v2698 + (_DWORD)v2701 * v2699));
            v2705 = *(_OWORD *)v2700;
            v2706 = *((_OWORD *)v2700 + 2);
            v2704[1] = *((_OWORD *)v2700 + 1);
            v2704[2] = v2706;
            *v2704 = v2705;
            v2692 += 4;
          }
          while (v2692 != v2691);
LABEL_650:
          v2685 = *(unsigned int *)(a1 + 5316);
        }
        ++v2686;
        ++v2687;
      }
      while (v2686 < v2685);
    }
    v2731 = *(unsigned int *)(a1 + 6324);
    if ((_DWORD)v2731)
    {
      v2732 = 0;
      v2733 = *(unsigned int **)(a1 + 10616);
      do
      {
        v2734 = *(_QWORD *)(*(_QWORD *)(a1 + 6432) + 8 * v2732);
        if (v2734)
        {
          v2735 = *(_QWORD *)(a1 + 6400);
          v2736 = (*(_DWORD *)(a1 + 6424) * v2732);
          v2737 = (unsigned int *)(v2735 + 16 * (v2734 + v2736));
          v2738 = (unsigned int *)(v2735 + 16 * v2736);
          do
          {
            while (1)
            {
              v2742 = *v2733;
              v2743 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2738);
              v2744 = (_QWORD *)(*(_QWORD *)(a1 + 6328) + 8 * *((_QWORD *)v2738 + 1));
              v2745 = *v6;
              v2746 = *(_QWORD *)(a1 + 20040);
              v2747 = v2744[3];
              if (*v2733 >= v2743)
                break;
              v2739 = (_QWORD *)(v2746 + 8 * (v2743 + (_DWORD)v2745 * v2742));
              v2740 = v2744[1];
              v2741 = v2744[2];
              *v2739 = *v2744;
              v2739[v2745] = v2740;
              v2739[2 * v2745] = v2741;
              v2739[3 * v2745] = v2747;
              v2738 += 4;
              if (v2738 == v2737)
                goto LABEL_670;
            }
            v2748 = (_OWORD *)(v2746 + 8 * (v2742 + (_DWORD)v2745 * v2743));
            v2749 = *((_OWORD *)v2744 + 1);
            *v2748 = *(_OWORD *)v2744;
            v2748[1] = v2749;
            v2738 += 4;
          }
          while (v2738 != v2737);
LABEL_670:
          v2731 = *(unsigned int *)(a1 + 6324);
        }
        ++v2732;
        ++v2733;
      }
      while (v2732 < v2731);
    }
    v2838 = *(unsigned int *)(a1 + 7332);
    if ((_DWORD)v2838)
    {
      v2839 = 0;
      v2840 = *(unsigned int **)(a1 + 10640);
      do
      {
        v2841 = *(_QWORD *)(*(_QWORD *)(a1 + 7440) + 8 * v2839);
        if (v2841)
        {
          v2842 = *(_QWORD *)(a1 + 7408);
          v2843 = (*(_DWORD *)(a1 + 7432) * v2839);
          v2844 = (unsigned int *)(v2842 + 16 * (v2841 + v2843));
          v2845 = (unsigned int *)(v2842 + 16 * v2843);
          do
          {
            while (1)
            {
              v2849 = *v2840;
              v2850 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2845);
              v2851 = (_QWORD *)(*(_QWORD *)(a1 + 7336) + 8 * *((_QWORD *)v2845 + 1));
              v2852 = *v6;
              v2853 = *(_QWORD *)(a1 + 20040);
              v2854 = v2851[3];
              if (*v2840 >= v2850)
                break;
              v2846 = (_QWORD *)(v2853 + 8 * (v2850 + (_DWORD)v2852 * v2849));
              v2847 = v2851[1];
              v2848 = v2851[2];
              *v2846 = *v2851;
              v2846[v2852] = v2847;
              v2846[2 * v2852] = v2848;
              v2846[3 * v2852] = v2854;
              v2845 += 4;
              if (v2845 == v2844)
                goto LABEL_690;
            }
            v2855 = (_OWORD *)(v2853 + 8 * (v2849 + (_DWORD)v2852 * v2850));
            v2856 = *((_OWORD *)v2851 + 1);
            *v2855 = *(_OWORD *)v2851;
            v2855[1] = v2856;
            v2845 += 4;
          }
          while (v2845 != v2844);
LABEL_690:
          v2838 = *(unsigned int *)(a1 + 7332);
        }
        ++v2839;
        ++v2840;
      }
      while (v2839 < v2838);
    }
    v2920 = *(unsigned int *)(a1 + 8340);
    if ((_DWORD)v2920)
    {
      v2921 = 0;
      v2922 = *(unsigned int **)(a1 + 10664);
      do
      {
        v2923 = *(_QWORD *)(*(_QWORD *)(a1 + 8448) + 8 * v2921);
        if (v2923)
        {
          v2924 = *(_QWORD *)(a1 + 8416);
          v2925 = (*(_DWORD *)(a1 + 8440) * v2921);
          v2926 = (unsigned int *)(v2924 + 16 * (v2923 + v2925));
          v2927 = (unsigned int *)(v2924 + 16 * v2925);
          do
          {
            while (1)
            {
              v2931 = *v2922;
              v2932 = *(_DWORD *)(*(_QWORD *)(a1 + 10568) + 4 * *v2927);
              v2933 = (_QWORD *)(*(_QWORD *)(a1 + 8344) + 8 * *((_QWORD *)v2927 + 1));
              v2934 = *v6;
              v2935 = *(_QWORD *)(a1 + 20040);
              if (*v2922 >= v2932)
                break;
              v2928 = (_QWORD *)(v2935 + 8 * (v2932 + (_DWORD)v2934 * v2931));
              v2929 = v2933[1];
              v2930 = v2933[2];
              *v2928 = *v2933;
              v2928[v2934] = v2929;
              v2928[2 * v2934] = v2930;
              v2927 += 4;
              if (v2927 == v2926)
                goto LABEL_710;
            }
            v2936 = v2935 + 8 * (v2931 + (_DWORD)v2934 * v2932);
            v2937 = *(_OWORD *)v2933;
            *(_QWORD *)(v2936 + 16) = v2933[2];
            *(_OWORD *)v2936 = v2937;
            v2927 += 4;
          }
          while (v2927 != v2926);
LABEL_710:
          v2920 = *(unsigned int *)(a1 + 8340);
        }
        ++v2921;
        ++v2922;
      }
      while (v2921 < v2920);
    }
    v3001 = *(unsigned int *)(a1 + 2148);
    if ((_DWORD)v3001)
    {
      v3002 = 0;
      v3003 = *(unsigned int **)(a1 + 10520);
      do
      {
        v3004 = *(_QWORD *)(*(_QWORD *)(a1 + 2256) + 8 * v3002);
        if (v3004)
        {
          v3005 = *(_QWORD *)(a1 + 2224);
          v3006 = (*(_DWORD *)(a1 + 2248) * v3002);
          v3007 = (unsigned int *)(v3005 + 16 * (v3004 + v3006));
          v3008 = (unsigned int *)(v3005 + 16 * v3006);
          do
          {
            while (1)
            {
              v3044 = *v3003;
              v3045 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3008);
              v3046 = *(_QWORD *)(a1 + 2152) + 8 * *((_QWORD *)v3008 + 1);
              v3047 = *v6;
              v3048 = *(_QWORD *)(a1 + 20040);
              if (*v3003 >= v3045)
                break;
              v3009 = *(_QWORD *)(v3046 + 64);
              v3010 = v3048 + 8 * (v3045 + (_DWORD)v3047 * v3044);
              v3011 = *(_OWORD *)(v3046 + 48);
              v3012 = *(int64x2_t *)v3046;
              v3013 = *(_OWORD *)(v3046 + 16);
              v3014 = *(_OWORD *)(v3046 + 72);
              v3015 = *(_OWORD *)(v3046 + 88);
              v3016 = *(_OWORD *)(v3046 + 104);
              v3017 = *(_OWORD *)(v3046 + 120);
              v3018 = *(_QWORD *)(v3046 + 136);
              v3019 = *(_OWORD *)(v3046 + 144);
              v3020 = *(_OWORD *)(v3046 + 160);
              v3021 = *(_OWORD *)(v3046 + 176);
              v3022 = *(_OWORD *)(v3046 + 192);
              v3023 = *(_QWORD *)(v3046 + 208);
              v3024 = *(_OWORD *)(v3046 + 232);
              v3025 = *(_OWORD *)(v3046 + 248);
              v3026 = *(_OWORD *)(v3046 + 216);
              v3027 = *(_OWORD *)(v3046 + 264);
              v3028 = *(_QWORD *)(v3046 + 280);
              v3029 = *(_OWORD *)(v3046 + 288);
              v3030 = *(_OWORD *)(v3046 + 304);
              v3031 = *(_OWORD *)(v3046 + 320);
              v3032 = *(_OWORD *)(v3046 + 336);
              v3033 = *(_QWORD *)(v3046 + 352);
              v3034 = *(_OWORD *)(v3046 + 360);
              v3035 = *(_OWORD *)(v3046 + 376);
              v3036 = *(_OWORD *)(v3046 + 392);
              v3037 = *(_OWORD *)(v3046 + 408);
              v3038 = *(_QWORD *)(v3046 + 424);
              *(_OWORD *)(v3010 + 32) = *(_OWORD *)(v3046 + 32);
              *(_OWORD *)(v3010 + 48) = v3011;
              *(_QWORD *)(v3010 + 64) = v3009;
              *(int64x2_t *)v3010 = v3012;
              *(_OWORD *)(v3010 + 16) = v3013;
              v3039 = v3010 + 8 * v3047;
              *(_QWORD *)(v3039 + 64) = v3018;
              *(_OWORD *)(v3039 + 32) = v3016;
              *(_OWORD *)(v3039 + 48) = v3017;
              *(_OWORD *)v3039 = v3014;
              *(_OWORD *)(v3039 + 16) = v3015;
              v3040 = v3010 + 16 * v3047;
              *(_QWORD *)(v3040 + 64) = v3023;
              *(_OWORD *)(v3040 + 32) = v3021;
              *(_OWORD *)(v3040 + 48) = v3022;
              *(_OWORD *)v3040 = v3019;
              *(_OWORD *)(v3040 + 16) = v3020;
              v3041 = v3010 + 24 * v3047;
              *(_QWORD *)(v3041 + 64) = v3028;
              *(_OWORD *)(v3041 + 32) = v3025;
              *(_OWORD *)(v3041 + 48) = v3027;
              *(_OWORD *)v3041 = v3026;
              *(_OWORD *)(v3041 + 16) = v3024;
              v3042 = v3010 + 32 * v3047;
              *(_QWORD *)(v3042 + 64) = v3033;
              *(_OWORD *)(v3042 + 32) = v3031;
              *(_OWORD *)(v3042 + 48) = v3032;
              *(_OWORD *)v3042 = v3029;
              *(_OWORD *)(v3042 + 16) = v3030;
              v3043 = v3010 + 40 * v3047;
              *(_QWORD *)(v3043 + 64) = v3038;
              *(_OWORD *)(v3043 + 32) = v3036;
              *(_OWORD *)(v3043 + 48) = v3037;
              *(_OWORD *)v3043 = v3034;
              *(_OWORD *)(v3043 + 16) = v3035;
              v3008 += 4;
              if (v3008 == v3007)
                goto LABEL_730;
            }
            v3049.i64[0] = *(_QWORD *)(v3046 + 64);
            v3050 = (int64x2_t *)(v3048 + 8 * (v3044 + (_DWORD)v3047 * v3045));
            v3052 = *(int64x2_t *)(v3046 + 32);
            v3051 = *(int64x2_t *)(v3046 + 48);
            v3053 = *(int64x2_t *)(v3046 + 16);
            v3054 = *(int64x2_t *)(v3046 + 120);
            v3055 = *(int64x2_t *)(v3046 + 104);
            v3056 = *(int64x2_t *)(v3046 + 88);
            v3057 = *(int64x2_t *)(v3046 + 72);
            v3058.i64[0] = *(_QWORD *)(v3046 + 208);
            v3060 = *(int64x2_t *)(v3046 + 176);
            v3059 = *(int64x2_t *)(v3046 + 192);
            v3062 = *(int64x2_t *)(v3046 + 144);
            v3061 = *(int64x2_t *)(v3046 + 160);
            v3063 = *(int64x2_t *)(v3046 + 216);
            v3064 = *(int64x2_t *)(v3046 + 264);
            v3065 = *(int64x2_t *)(v3046 + 248);
            v3066 = *(int64x2_t *)(v3046 + 232);
            v3067.i64[0] = *(_QWORD *)(v3046 + 352);
            v3069 = *(int64x2_t *)(v3046 + 320);
            v3068 = *(int64x2_t *)(v3046 + 336);
            v3071 = *(int64x2_t *)(v3046 + 288);
            v3070 = *(int64x2_t *)(v3046 + 304);
            v3072 = *(int64x2_t *)(v3046 + 392);
            v3073 = *(int64x2_t *)(v3046 + 408);
            v3074 = *(int64x2_t *)(v3046 + 376);
            v3075 = vzip1q_s64(*(int64x2_t *)v3046, v3057);
            v3076 = vzip1q_s64(v3071, *(int64x2_t *)(v3046 + 360));
            v3077 = vzip1q_s64(v3062, v3063);
            v3078 = vzip2q_s64(*(int64x2_t *)v3046, v3057);
            v3079 = vzip2q_s64(v3062, v3063);
            v3080 = vzip2q_s64(v3071, *(int64x2_t *)(v3046 + 360));
            v3049.i64[1] = *(_QWORD *)(v3046 + 136);
            v3058.i64[1] = *(_QWORD *)(v3046 + 280);
            v3067.i64[1] = *(_QWORD *)(v3046 + 424);
            v3050[1] = v3077;
            v3050[2] = v3076;
            *v3050 = v3075;
            v3081 = (int64x2_t *)((char *)v3050 + 8 * v3047);
            v3081[1] = v3079;
            v3081[2] = v3080;
            *v3081 = v3078;
            v3082 = &v3050[v3047];
            v3082[1] = vzip1q_s64(v3061, v3066);
            v3082[2] = vzip1q_s64(v3070, v3074);
            *v3082 = vzip1q_s64(v3053, v3056);
            v3083 = (int64x2_t *)((char *)v3050 + 24 * v3047);
            v3083[1] = vzip2q_s64(v3061, v3066);
            v3083[2] = vzip2q_s64(v3070, v3074);
            *v3083 = vzip2q_s64(v3053, v3056);
            v3084 = &v3050[2 * v3047];
            v3084[1] = vzip1q_s64(v3060, v3065);
            v3084[2] = vzip1q_s64(v3069, v3072);
            *v3084 = vzip1q_s64(v3052, v3055);
            v3085 = (int64x2_t *)((char *)v3050 + 40 * v3047);
            v3085[1] = vzip2q_s64(v3060, v3065);
            v3085[2] = vzip2q_s64(v3069, v3072);
            *v3085 = vzip2q_s64(v3052, v3055);
            v3086 = &v3050[3 * v3047];
            v3086[1] = vzip1q_s64(v3059, v3064);
            v3086[2] = vzip1q_s64(v3068, v3073);
            *v3086 = vzip1q_s64(v3051, v3054);
            v3087 = (int64x2_t *)((char *)v3050 + 56 * v3047);
            v3087[1] = vzip2q_s64(v3059, v3064);
            v3087[2] = vzip2q_s64(v3068, v3073);
            *v3087 = vzip2q_s64(v3051, v3054);
            v3088 = &v3050[4 * v3047];
            v3088[1] = v3058;
            v3088[2] = v3067;
            *v3088 = v3049;
            v3008 += 4;
          }
          while (v3008 != v3007);
LABEL_730:
          v3001 = *(unsigned int *)(a1 + 2148);
        }
        ++v3002;
        ++v3003;
      }
      while (v3002 < v3001);
    }
    v3143 = *(unsigned int *)(a1 + 3156);
    if ((_DWORD)v3143)
    {
      v3144 = 0;
      v3145 = *(unsigned int **)(a1 + 10544);
      do
      {
        v3146 = *(_QWORD *)(*(_QWORD *)(a1 + 3264) + 8 * v3144);
        if (v3146)
        {
          v3147 = *(_QWORD *)(a1 + 3232);
          v3148 = (*(_DWORD *)(a1 + 3256) * v3144);
          v3149 = (unsigned int *)(v3147 + 16 * (v3146 + v3148));
          v3150 = (unsigned int *)(v3147 + 16 * v3148);
          do
          {
            v3221 = *v3145;
            v3222 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3150);
            v3223 = *(_QWORD *)(a1 + 3160) + 8 * *((_QWORD *)v3150 + 1);
            v3224 = *v6;
            v3225 = *(_QWORD *)(a1 + 20040);
            if (*v3145 < v3222)
            {
              v4387 = *(_QWORD *)(v3223 + 64);
              v3151 = v3225 + 8 * (v3222 + (_DWORD)v3224 * v3221);
              v3152 = *(_OWORD *)(v3223 + 32);
              v4373 = *(_OWORD *)(v3223 + 48);
              v4377 = *(int64x2_t *)v3223;
              v4392 = *(_OWORD *)(v3223 + 88);
              v4395 = *(int8x16_t *)(v3223 + 72);
              v4383 = *(_OWORD *)(v3223 + 104);
              v3186 = *(int8x16_t *)(v3223 + 120);
              v3153 = *(_QWORD *)(v3223 + 136);
              v4352 = *(_QWORD *)(v3223 + 208);
              v3177 = *(int8x16_t *)(v3223 + 176);
              v3154 = *(int8x16_t *)(v3223 + 192);
              v3156 = *(int8x16_t *)(v3223 + 144);
              v3155 = *(int8x16_t *)(v3223 + 160);
              v4337 = *(_QWORD *)(v3223 + 280);
              v3183 = *(int8x16_t *)(v3223 + 248);
              v3157 = *(int8x16_t *)(v3223 + 232);
              v3158 = *(int8x16_t *)(v3223 + 216);
              v3159 = *(int8x16_t *)(v3223 + 264);
              v4341 = *(_QWORD *)(v3223 + 352);
              v3182 = *(int8x16_t *)(v3223 + 320);
              v3180 = *(int8x16_t *)(v3223 + 336);
              v3189 = *(int8x16_t *)(v3223 + 288);
              v3160 = *(int8x16_t *)(v3223 + 304);
              v4335 = *(_QWORD *)(v3223 + 424);
              v3161 = *(int8x16_t *)(v3223 + 392);
              v3192 = *(int8x16_t *)(v3223 + 408);
              v3163 = *(int8x16_t *)(v3223 + 360);
              v3162 = *(int8x16_t *)(v3223 + 376);
              v4345 = *(_QWORD *)(v3223 + 496);
              v3164 = *(int8x16_t *)(v3223 + 464);
              v3165 = *(int8x16_t *)(v3223 + 480);
              v3167 = *(int8x16_t *)(v3223 + 432);
              v3166 = *(int8x16_t *)(v3223 + 448);
              v4333 = *(_QWORD *)(v3223 + 568);
              v3168 = *(int8x16_t *)(v3223 + 536);
              v3169 = *(int8x16_t *)(v3223 + 552);
              v3170 = *(int8x16_t *)(v3223 + 504);
              v3194 = *(int8x16_t *)(v3223 + 520);
              v4355 = *(_QWORD *)(v3223 + 640);
              v3172 = *(int8x16_t *)(v3223 + 608);
              v3171 = *(int8x16_t *)(v3223 + 624);
              v3174 = *(int8x16_t *)(v3223 + 576);
              v3173 = *(int8x16_t *)(v3223 + 592);
              *(_OWORD *)(v3151 + 16) = *(_OWORD *)(v3223 + 16);
              *(_OWORD *)(v3151 + 32) = v3152;
              *(_OWORD *)(v3151 + 48) = v4373;
              *(_QWORD *)(v3151 + 64) = v4387;
              *(int64x2_t *)v3151 = v4377;
              v3175 = v3151 + 8 * v3224;
              *(_QWORD *)(v3175 + 64) = v3153;
              *(_OWORD *)(v3175 + 32) = v4383;
              *(int8x16_t *)(v3175 + 48) = v3186;
              *(_OWORD *)(v3175 + 16) = v4392;
              *(int8x16_t *)v3175 = v4395;
              v4393 = v3154.i64[0];
              v3176 = vextq_s8(v3154, v3154, 8uLL).u64[0];
              v4343 = v3177.i64[0];
              v4321 = vextq_s8(v3177, v3177, 8uLL).u64[0];
              v4395.i64[0] = v3155.i64[0];
              v4323 = vextq_s8(v3155, v3155, 8uLL).u64[0];
              v3177.i64[0] = v3156.i64[0];
              v3178 = vextq_s8(v3156, v3156, 8uLL).u64[0];
              v4384 = v3183.i64[0];
              v4319 = vextq_s8(v3183, v3183, 8uLL).u64[0];
              v4374 = v3157.i64[0];
              v4315 = vextq_s8(v3157, v3157, 8uLL).u64[0];
              v4388 = v3158.i64[0];
              v4317 = vextq_s8(v3158, v3158, 8uLL).u64[0];
              v4339 = v3159.i64[0];
              v4313 = vextq_s8(v3159, v3159, 8uLL).u64[0];
              v3179 = v3180.i64[0];
              v4309 = vextq_s8(v3180, v3180, 8uLL).u64[0];
              v3180.i64[0] = v3182.i64[0];
              v4307 = vextq_s8(v3182, v3182, 8uLL).u64[0];
              v4378 = v3160.i64[0];
              v3181 = vextq_s8(v3160, v3160, 8uLL).u64[0];
              v3182.i64[0] = v3189.i64[0];
              v4311 = vextq_s8(v3189, v3189, 8uLL).u64[0];
              v4348 = v3192.i64[0];
              v4303 = vextq_s8(v3192, v3192, 8uLL).u64[0];
              v3183.i64[0] = v3161.i64[0];
              v4301 = vextq_s8(v3161, v3161, 8uLL).u64[0];
              v3184 = v3162.i64[0];
              v4299 = vextq_s8(v3162, v3162, 8uLL).u64[0];
              v4357 = v3171.i64[0];
              v4360 = v3163.i64[0];
              v4305 = vextq_s8(v3163, v3163, 8uLL).u64[0];
              v3185 = v3165.i64[0];
              v4295 = vextq_s8(v3165, v3165, 8uLL).u64[0];
              v3186.i64[0] = v3164.i64[0];
              v4294 = vextq_s8(v3164, v3164, 8uLL).u64[0];
              v3187 = v3166.i64[0];
              v3188 = vextq_s8(v3166, v3166, 8uLL).u64[0];
              v3189.i64[0] = v3167.i64[0];
              v4297 = vextq_s8(v3167, v3167, 8uLL).u64[0];
              v3190 = vextq_s8(v3169, v3169, 8uLL).u64[0];
              v3191 = vextq_s8(v3168, v3168, 8uLL).u64[0];
              v3192.i64[0] = v3194.i64[0];
              v3193 = vextq_s8(v3194, v3194, 8uLL).u64[0];
              v3194.i64[0] = v3170.i64[0];
              v3195 = vextq_s8(v3170, v3170, 8uLL).u64[0];
              v4325 = vextq_s8(v3171, v3171, 8uLL).u64[0];
              v4363 = v3172.i64[0];
              v4327 = vextq_s8(v3172, v3172, 8uLL).u64[0];
              v4369 = v3173.i64[0];
              v4366 = v3174.i64[0];
              v4329 = vextq_s8(v3173, v3173, 8uLL).u64[0];
              v4331 = vextq_s8(v3174, v3174, 8uLL).u64[0];
            }
            else
            {
              v3182 = *(int8x16_t *)(v3223 + 32);
              v3226 = *(int64x2_t *)(v3223 + 48);
              v3227 = *(int64x2_t *)(v3223 + 16);
              v3228 = *(int64x2_t *)(v3223 + 120);
              v3229 = *(int64x2_t *)(v3223 + 104);
              v3230 = *(int64x2_t *)(v3223 + 88);
              v3231 = *(int64x2_t *)(v3223 + 72);
              v3177 = *(int8x16_t *)(v3223 + 176);
              v3232 = *(int8x16_t *)(v3223 + 192);
              v3233 = *(int8x16_t *)(v3223 + 144);
              v3234 = *(int64x2_t *)(v3223 + 160);
              v3236 = *(int64x2_t *)(v3223 + 320);
              v3235 = *(int64x2_t *)(v3223 + 336);
              v3238 = *(int64x2_t *)(v3223 + 288);
              v3237 = *(int64x2_t *)(v3223 + 304);
              v3239 = *(int64x2_t *)(v3223 + 448);
              v3180 = *(int8x16_t *)(v3223 + 464);
              *(_QWORD *)&v3240 = vdupq_laneq_s64((int64x2_t)v3233, 1).u64[0];
              *((_QWORD *)&v3240 + 1) = *(_QWORD *)(v3223 + 224);
              v4389 = v3240;
              v3241 = *(int8x16_t *)(v3223 + 432);
              v4361 = vzip1q_s64((int64x2_t)v3233, *(int64x2_t *)(v3223 + 216));
              *(_QWORD *)&v3240 = vdupq_laneq_s64(v3238, 1).u64[0];
              *((_QWORD *)&v3240 + 1) = *(_QWORD *)(v3223 + 368);
              v4346 = vzip1q_s64((int64x2_t)v3241, *(int64x2_t *)(v3223 + 504));
              v4349 = vzip1q_s64(v3238, *(int64x2_t *)(v3223 + 360));
              *(_QWORD *)&v3242 = vdupq_laneq_s64((int64x2_t)v3241, 1).u64[0];
              *((_QWORD *)&v3242 + 1) = *(_QWORD *)(v3223 + 512);
              v4353 = vzip1q_s64(*(int64x2_t *)v3223, v3231);
              v4379 = vzip2q_s64(*(int64x2_t *)v3223, v3231);
              v4395 = (int8x16_t)vzip1q_s64(v3234, *(int64x2_t *)(v3223 + 232));
              v3241.i64[0] = vdupq_laneq_s64(v3234, 1).u64[0];
              v3241.i64[1] = *(_QWORD *)(v3223 + 240);
              v3186 = (int8x16_t)vzip1q_s64(v3237, *(int64x2_t *)(v3223 + 376));
              v3243.i64[0] = vdupq_laneq_s64(v3237, 1).u64[0];
              v3243.i64[1] = *(_QWORD *)(v3223 + 384);
              v3244 = (int8x16_t)vzip1q_s64(v3227, v3230);
              v3245 = (int8x16_t)vzip2q_s64(v3227, v3230);
              v3246 = (int8x16_t)vzip1q_s64(v3239, *(int64x2_t *)(v3223 + 520));
              v3247.i64[0] = vdupq_laneq_s64(v3239, 1).u64[0];
              v3247.i64[1] = *(_QWORD *)(v3223 + 528);
              v3248 = (int8x16_t)vzip1q_s64((int64x2_t)v3177, *(int64x2_t *)(v3223 + 248));
              v3233.i64[0] = vdupq_laneq_s64((int64x2_t)v3177, 1).u64[0];
              v3233.i64[1] = *(_QWORD *)(v3223 + 256);
              v3249 = (int8x16_t)vzip1q_s64((int64x2_t)v3182, v3229);
              v3183 = (int8x16_t)vzip2q_s64((int64x2_t)v3182, v3229);
              v3250 = (int8x16_t)vzip1q_s64(v3236, *(int64x2_t *)(v3223 + 392));
              v3236.i64[0] = vdupq_laneq_s64(v3236, 1).u64[0];
              v3189.i64[1] = *(_QWORD *)(v3223 + 400);
              v3251 = (int8x16_t)vzip1q_s64((int64x2_t)v3180, *(int64x2_t *)(v3223 + 536));
              v3252.i64[0] = vdupq_laneq_s64((int64x2_t)v3180, 1).u64[0];
              v3252.i64[1] = *(_QWORD *)(v3223 + 544);
              v3253 = (int8x16_t)vzip1q_s64(v3226, v3228);
              v3254 = (int8x16_t)vzip2q_s64(v3226, v3228);
              v3255 = (int8x16_t)vzip1q_s64((int64x2_t)v3232, *(int64x2_t *)(v3223 + 264));
              v3232.i64[0] = vdupq_laneq_s64((int64x2_t)v3232, 1).u64[0];
              v3232.i64[1] = *(_QWORD *)(v3223 + 272);
              v3256 = (int8x16_t)vzip1q_s64(v3235, *(int64x2_t *)(v3223 + 408));
              v3168.i64[0] = vdupq_laneq_s64(v3235, 1).u64[0];
              v3168.i64[1] = *(_QWORD *)(v3223 + 416);
              v3257 = *(int64x2_t *)(v3223 + 480);
              v3258 = (int8x16_t)vzip1q_s64(v3257, *(int64x2_t *)(v3223 + 552));
              v3169.i64[0] = vdupq_laneq_s64(v3257, 1).u64[0];
              v3169.i64[1] = *(_QWORD *)(v3223 + 560);
              v3151 = v3225 + 8 * (v3221 + (_DWORD)v3224 * v3222);
              v4366 = *(_QWORD *)(v3223 + 64);
              v4331 = *(_QWORD *)(v3223 + 136);
              v4369 = *(_QWORD *)(v3223 + 208);
              v4329 = *(_QWORD *)(v3223 + 280);
              v4363 = *(_QWORD *)(v3223 + 352);
              v4327 = *(_QWORD *)(v3223 + 424);
              v4357 = *(_QWORD *)(v3223 + 496);
              v4325 = *(_QWORD *)(v3223 + 568);
              v4355 = *(_QWORD *)(v3223 + 640);
              v3192 = *(int8x16_t *)(v3223 + 608);
              v3259 = *(int8x16_t *)(v3223 + 624);
              v3194 = *(int8x16_t *)(v3223 + 576);
              v3260 = *(int8x16_t *)(v3223 + 592);
              *(int64x2_t *)(v3151 + 32) = v4349;
              *(int64x2_t *)(v3151 + 48) = v4346;
              *(int64x2_t *)v3151 = v4353;
              *(int64x2_t *)(v3151 + 16) = v4361;
              v3261 = v3151 + 8 * v3224;
              *(_QWORD *)(v3151 + 64) = v3194.i64[0];
              *(_QWORD *)(v3261 + 64) = v3194.i64[1];
              *(_OWORD *)(v3261 + 32) = v3240;
              *(_OWORD *)(v3261 + 48) = v3242;
              *(_OWORD *)(v3261 + 16) = v4389;
              *(int64x2_t *)v3261 = v4379;
              v4323 = vextq_s8(v4395, v4395, 8uLL).u64[0];
              v3177.i64[0] = v3244.i64[0];
              v3178 = vextq_s8(v3244, v3244, 8uLL).u64[0];
              v4393 = v3246.i64[0];
              v4343 = v3186.i64[0];
              v4321 = vextq_s8(v3186, v3186, 8uLL).u64[0];
              v4388 = v3245.i64[0];
              v4317 = vextq_s8(v3245, v3245, 8uLL).u64[0];
              v4339 = v3247.i64[0];
              v4313 = vextq_s8(v3247, v3247, 8uLL).u64[0];
              v4384 = v3243.i64[0];
              v4319 = vextq_s8(v3243, v3243, 8uLL).u64[0];
              v4374 = v3241.i64[0];
              v4315 = vextq_s8(v3241, v3241, 8uLL).u64[0];
              v4352 = v3260.i64[0];
              v4337 = vextq_s8(v3260, v3260, 8uLL).u64[0];
              v4378 = v3248.i64[0];
              v3247.i64[0] = vextq_s8(v3248, v3248, 8uLL).u64[0];
              v3182.i64[0] = v3249.i64[0];
              v4311 = vextq_s8(v3249, v3249, 8uLL).u64[0];
              v3179 = v3251.i64[0];
              v4309 = vextq_s8(v3251, v3251, 8uLL).u64[0];
              v3180.i64[0] = v3250.i64[0];
              v4307 = vextq_s8(v3250, v3250, 8uLL).u64[0];
              v4360 = v3183.i64[0];
              v4305 = vextq_s8(v3183, v3183, 8uLL).u64[0];
              v4348 = v3252.i64[0];
              v4303 = vextq_s8(v3252, v3252, 8uLL).u64[0];
              v3183.i64[0] = v3236.i64[0];
              v4301 = vextq_s8(v3189, v3189, 8uLL).u64[0];
              v3184 = v3233.i64[0];
              v4299 = vextq_s8(v3233, v3233, 8uLL).u64[0];
              v4341 = v3192.i64[0];
              v4335 = vextq_s8(v3192, v3192, 8uLL).u64[0];
              v3189.i64[0] = v3253.i64[0];
              v4297 = vextq_s8(v3253, v3253, 8uLL).u64[0];
              v3185 = v3258.i64[0];
              v4295 = vextq_s8(v3258, v3258, 8uLL).u64[0];
              v3186.i64[0] = v3256.i64[0];
              v4294 = vextq_s8(v3256, v3256, 8uLL).u64[0];
              v3176 = vextq_s8(v3246, v3246, 8uLL).u64[0];
              v3187 = v3255.i64[0];
              v3188 = vextq_s8(v3255, v3255, 8uLL).u64[0];
              v3181 = v3247.i64[0];
              v3194.i64[0] = v3254.i64[0];
              v3195 = vextq_s8(v3254, v3254, 8uLL).u64[0];
              v3190 = vextq_s8(v3169, v3169, 8uLL).u64[0];
              v3191 = vextq_s8(v3168, v3168, 8uLL).u64[0];
              v3193 = vextq_s8(v3232, v3232, 8uLL).u64[0];
              v4345 = v3259.i64[0];
              v4333 = vextq_s8(v3259, v3259, 8uLL).u64[0];
              v3192.i64[0] = v3232.i64[0];
            }
            v3177.i64[1] = v3178;
            *(_QWORD *)&v3196 = v4393;
            *(_QWORD *)&v3197 = v4395.i64[0];
            *((_QWORD *)&v3197 + 1) = v4323;
            *(_QWORD *)&v3198 = v4343;
            *((_QWORD *)&v3198 + 1) = v4321;
            *((_QWORD *)&v3196 + 1) = v3176;
            *(_QWORD *)&v3199 = v4339;
            *((_QWORD *)&v3199 + 1) = v4313;
            *(_QWORD *)&v3200 = v4384;
            *((_QWORD *)&v3200 + 1) = v4319;
            *(_QWORD *)&v3201 = v4374;
            *((_QWORD *)&v3201 + 1) = v4315;
            *(_QWORD *)&v3202 = v4388;
            *((_QWORD *)&v3202 + 1) = v4317;
            *(_QWORD *)&v3203 = v3179;
            *((_QWORD *)&v3203 + 1) = v4309;
            v3180.i64[1] = v4307;
            *(_QWORD *)&v3204 = v4378;
            *((_QWORD *)&v3204 + 1) = v3181;
            v3182.i64[1] = v4311;
            *(_QWORD *)&v3205 = v4348;
            *((_QWORD *)&v3205 + 1) = v4303;
            v3183.i64[1] = v4301;
            *(_QWORD *)&v3206 = v3184;
            *((_QWORD *)&v3206 + 1) = v4299;
            *(_QWORD *)&v3207 = v4360;
            *((_QWORD *)&v3207 + 1) = v4305;
            *(_QWORD *)&v3208 = v3185;
            *((_QWORD *)&v3208 + 1) = v4295;
            v3186.i64[1] = v4294;
            *(_QWORD *)&v3209 = v3187;
            *((_QWORD *)&v3209 + 1) = v3188;
            v3189.i64[1] = v4297;
            v3169.i64[1] = v3190;
            v3168.i64[1] = v3191;
            v3192.i64[1] = v3193;
            v3194.i64[1] = v3195;
            *(_QWORD *)&v3210 = v4357;
            *((_QWORD *)&v3210 + 1) = v4325;
            *(_QWORD *)&v3211 = v4363;
            *((_QWORD *)&v3211 + 1) = v4327;
            *(_QWORD *)&v3212 = v4369;
            *((_QWORD *)&v3212 + 1) = v4329;
            *(_QWORD *)&v3213 = v4366;
            *((_QWORD *)&v3213 + 1) = v4331;
            v3214 = v3151 + 16 * v3224;
            *(int8x16_t *)v3214 = v3177;
            *(_OWORD *)(v3214 + 16) = v3197;
            *(_OWORD *)(v3214 + 32) = v3198;
            *(_OWORD *)(v3214 + 48) = v3196;
            *(_QWORD *)(v3214 + 64) = v4352;
            v3215 = v3151 + 24 * v3224;
            *(_QWORD *)(v3215 + 64) = v4337;
            *(_OWORD *)(v3215 + 32) = v3200;
            *(_OWORD *)(v3215 + 48) = v3199;
            *(_OWORD *)v3215 = v3202;
            *(_OWORD *)(v3215 + 16) = v3201;
            v3216 = v3151 + 32 * v3224;
            *(_QWORD *)(v3216 + 64) = v4341;
            *(int8x16_t *)(v3216 + 32) = v3180;
            *(_OWORD *)(v3216 + 48) = v3203;
            *(int8x16_t *)v3216 = v3182;
            *(_OWORD *)(v3216 + 16) = v3204;
            v3217 = v3151 + 40 * v3224;
            *(_QWORD *)(v3217 + 64) = v4335;
            *(int8x16_t *)(v3217 + 32) = v3183;
            *(_OWORD *)(v3217 + 48) = v3205;
            *(_OWORD *)v3217 = v3207;
            *(_OWORD *)(v3217 + 16) = v3206;
            v3218 = v3151 + 48 * v3224;
            *(_QWORD *)(v3218 + 64) = v4345;
            *(int8x16_t *)(v3218 + 32) = v3186;
            *(_OWORD *)(v3218 + 48) = v3208;
            *(int8x16_t *)v3218 = v3189;
            *(_OWORD *)(v3218 + 16) = v3209;
            v3219 = (int8x16_t *)(v3151 + 56 * v3224);
            v3219[4].i64[0] = v4333;
            v3219[2] = v3168;
            v3219[3] = v3169;
            *v3219 = v3194;
            v3219[1] = v3192;
            v3220 = v3151 + (v3224 << 6);
            *(_QWORD *)(v3220 + 64) = v4355;
            *(_OWORD *)(v3220 + 32) = v3211;
            *(_OWORD *)(v3220 + 48) = v3210;
            v3150 += 4;
            *(_OWORD *)v3220 = v3213;
            *(_OWORD *)(v3220 + 16) = v3212;
          }
          while (v3150 != v3149);
          v3143 = *(unsigned int *)(a1 + 3156);
        }
        ++v3144;
        ++v3145;
      }
      while (v3144 < v3143);
    }
    v3325 = *(unsigned int *)(a1 + 4164);
    if ((_DWORD)v3325)
    {
      v3326 = 0;
      v3327 = *(unsigned int **)(a1 + 10568);
      do
      {
        v3328 = *(_QWORD *)(*(_QWORD *)(a1 + 4272) + 8 * v3326);
        if (v3328)
        {
          v3329 = *(_QWORD *)(a1 + 4240);
          v3330 = (*(_DWORD *)(a1 + 4264) * v3326);
          v3331 = (unsigned int *)(v3329 + 16 * (v3328 + v3330));
          v3332 = (unsigned int *)(v3329 + 16 * v3330);
          do
          {
            while (1)
            {
              v3334 = *v3327;
              v3335 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3332);
              v3336 = *(_QWORD *)(a1 + 4168) + 8 * *((_QWORD *)v3332 + 1);
              v3337 = *v6;
              v3338 = *(_QWORD *)(a1 + 20040);
              v3340 = *(int8x16_t *)(v3336 + 32);
              v3339 = *(int8x16_t *)(v3336 + 48);
              v3342 = *(int8x16_t *)v3336;
              v3341 = *(int8x16_t *)(v3336 + 16);
              v3343 = *(_QWORD *)(v3336 + 64);
              v3344 = vextq_s8(v3339, v3339, 8uLL).u64[0];
              v3345 = vextq_s8(v3340, v3340, 8uLL).u64[0];
              v3346 = vextq_s8(v3341, v3341, 8uLL).u64[0];
              v3347 = vextq_s8(v3342, v3342, 8uLL).u64[0];
              if (*v3327 >= v3335)
                break;
              v3342.i64[1] = v3347;
              v3333 = (int8x16_t *)(v3338 + 8 * (v3335 + (_DWORD)v3337 * v3334));
              v3341.i64[1] = v3346;
              v3340.i64[1] = v3345;
              *v3333 = v3342;
              v3333[1] = v3341;
              v3333[4].i64[0] = v3343;
              v3339.i64[1] = v3344;
              v3333[2] = v3340;
              v3333[3] = v3339;
              v3332 += 4;
              if (v3332 == v3331)
                goto LABEL_770;
            }
            v3348 = (_QWORD *)(v3338 + 8 * (v3334 + (_DWORD)v3337 * v3335));
            *v3348 = v3342.i64[0];
            v3348[v3337] = v3347;
            v3348[2 * v3337] = v3341.i64[0];
            v3348[3 * v3337] = v3346;
            v3348[4 * v3337] = v3340.i64[0];
            v3348[5 * v3337] = v3345;
            v3348[6 * v3337] = v3339.i64[0];
            v3348[7 * v3337] = v3344;
            v3348[8 * v3337] = v3343;
            v3332 += 4;
          }
          while (v3332 != v3331);
LABEL_770:
          v3325 = *(unsigned int *)(a1 + 4164);
        }
        ++v3326;
        ++v3327;
      }
      while (v3326 < v3325);
    }
    v3431 = *(unsigned int *)(a1 + 5172);
    if ((_DWORD)v3431)
    {
      v3432 = 0;
      v3433 = *(unsigned int **)(a1 + 10592);
      do
      {
        v3434 = *(_QWORD *)(*(_QWORD *)(a1 + 5280) + 8 * v3432);
        if (v3434)
        {
          v3435 = *(_QWORD *)(a1 + 5248);
          v3436 = (*(_DWORD *)(a1 + 5272) * v3432);
          v3437 = (unsigned int *)(v3435 + 16 * (v3434 + v3436));
          v3438 = (unsigned int *)(v3435 + 16 * v3436);
          do
          {
            while (1)
            {
              v3474 = *v3433;
              v3475 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3438);
              v3476 = *(_QWORD *)(a1 + 5176) + 8 * *((_QWORD *)v3438 + 1);
              v3477 = *v6;
              v3478 = *(_QWORD *)(a1 + 20040);
              if (*v3433 >= v3475)
                break;
              v3439 = *(_QWORD *)(v3476 + 64);
              v3440 = v3478 + 8 * (v3475 + (_DWORD)v3477 * v3474);
              v3441 = *(_OWORD *)(v3476 + 48);
              v3442 = *(int64x2_t *)v3476;
              v3443 = *(_OWORD *)(v3476 + 16);
              v3444 = *(_OWORD *)(v3476 + 72);
              v3445 = *(_OWORD *)(v3476 + 88);
              v3446 = *(_OWORD *)(v3476 + 104);
              v3447 = *(_OWORD *)(v3476 + 120);
              v3448 = *(_QWORD *)(v3476 + 136);
              v3449 = *(_OWORD *)(v3476 + 144);
              v3450 = *(_OWORD *)(v3476 + 160);
              v3451 = *(_OWORD *)(v3476 + 176);
              v3452 = *(_OWORD *)(v3476 + 192);
              v3453 = *(_QWORD *)(v3476 + 208);
              v3454 = *(_OWORD *)(v3476 + 232);
              v3455 = *(_OWORD *)(v3476 + 248);
              v3456 = *(_OWORD *)(v3476 + 216);
              v3457 = *(_OWORD *)(v3476 + 264);
              v3458 = *(_QWORD *)(v3476 + 280);
              v3459 = *(_OWORD *)(v3476 + 288);
              v3460 = *(_OWORD *)(v3476 + 304);
              v3461 = *(_OWORD *)(v3476 + 320);
              v3462 = *(_OWORD *)(v3476 + 336);
              v3463 = *(_QWORD *)(v3476 + 352);
              v3464 = *(_OWORD *)(v3476 + 360);
              v3465 = *(_OWORD *)(v3476 + 376);
              v3466 = *(_OWORD *)(v3476 + 392);
              v3467 = *(_OWORD *)(v3476 + 408);
              v3468 = *(_QWORD *)(v3476 + 424);
              *(_OWORD *)(v3440 + 32) = *(_OWORD *)(v3476 + 32);
              *(_OWORD *)(v3440 + 48) = v3441;
              *(_QWORD *)(v3440 + 64) = v3439;
              *(int64x2_t *)v3440 = v3442;
              *(_OWORD *)(v3440 + 16) = v3443;
              v3469 = v3440 + 8 * v3477;
              *(_QWORD *)(v3469 + 64) = v3448;
              *(_OWORD *)(v3469 + 32) = v3446;
              *(_OWORD *)(v3469 + 48) = v3447;
              *(_OWORD *)v3469 = v3444;
              *(_OWORD *)(v3469 + 16) = v3445;
              v3470 = v3440 + 16 * v3477;
              *(_QWORD *)(v3470 + 64) = v3453;
              *(_OWORD *)(v3470 + 32) = v3451;
              *(_OWORD *)(v3470 + 48) = v3452;
              *(_OWORD *)v3470 = v3449;
              *(_OWORD *)(v3470 + 16) = v3450;
              v3471 = v3440 + 24 * v3477;
              *(_QWORD *)(v3471 + 64) = v3458;
              *(_OWORD *)(v3471 + 32) = v3455;
              *(_OWORD *)(v3471 + 48) = v3457;
              *(_OWORD *)v3471 = v3456;
              *(_OWORD *)(v3471 + 16) = v3454;
              v3472 = v3440 + 32 * v3477;
              *(_QWORD *)(v3472 + 64) = v3463;
              *(_OWORD *)(v3472 + 32) = v3461;
              *(_OWORD *)(v3472 + 48) = v3462;
              *(_OWORD *)v3472 = v3459;
              *(_OWORD *)(v3472 + 16) = v3460;
              v3473 = v3440 + 40 * v3477;
              *(_QWORD *)(v3473 + 64) = v3468;
              *(_OWORD *)(v3473 + 32) = v3466;
              *(_OWORD *)(v3473 + 48) = v3467;
              *(_OWORD *)v3473 = v3464;
              *(_OWORD *)(v3473 + 16) = v3465;
              v3438 += 4;
              if (v3438 == v3437)
                goto LABEL_790;
            }
            v3479.i64[0] = *(_QWORD *)(v3476 + 64);
            v3480 = (int64x2_t *)(v3478 + 8 * (v3474 + (_DWORD)v3477 * v3475));
            v3482 = *(int64x2_t *)(v3476 + 32);
            v3481 = *(int64x2_t *)(v3476 + 48);
            v3483 = *(int64x2_t *)(v3476 + 16);
            v3484 = *(int64x2_t *)(v3476 + 120);
            v3485 = *(int64x2_t *)(v3476 + 104);
            v3486 = *(int64x2_t *)(v3476 + 88);
            v3487 = *(int64x2_t *)(v3476 + 72);
            v3488.i64[0] = *(_QWORD *)(v3476 + 208);
            v3490 = *(int64x2_t *)(v3476 + 176);
            v3489 = *(int64x2_t *)(v3476 + 192);
            v3492 = *(int64x2_t *)(v3476 + 144);
            v3491 = *(int64x2_t *)(v3476 + 160);
            v3493 = *(int64x2_t *)(v3476 + 216);
            v3494 = *(int64x2_t *)(v3476 + 264);
            v3495 = *(int64x2_t *)(v3476 + 248);
            v3496 = *(int64x2_t *)(v3476 + 232);
            v3497.i64[0] = *(_QWORD *)(v3476 + 352);
            v3499 = *(int64x2_t *)(v3476 + 320);
            v3498 = *(int64x2_t *)(v3476 + 336);
            v3501 = *(int64x2_t *)(v3476 + 288);
            v3500 = *(int64x2_t *)(v3476 + 304);
            v3502 = *(int64x2_t *)(v3476 + 392);
            v3503 = *(int64x2_t *)(v3476 + 408);
            v3504 = *(int64x2_t *)(v3476 + 376);
            v3505 = vzip1q_s64(*(int64x2_t *)v3476, v3487);
            v3506 = vzip1q_s64(v3501, *(int64x2_t *)(v3476 + 360));
            v3507 = vzip1q_s64(v3492, v3493);
            v3508 = vzip2q_s64(*(int64x2_t *)v3476, v3487);
            v3509 = vzip2q_s64(v3492, v3493);
            v3510 = vzip2q_s64(v3501, *(int64x2_t *)(v3476 + 360));
            v3479.i64[1] = *(_QWORD *)(v3476 + 136);
            v3488.i64[1] = *(_QWORD *)(v3476 + 280);
            v3497.i64[1] = *(_QWORD *)(v3476 + 424);
            v3480[1] = v3507;
            v3480[2] = v3506;
            *v3480 = v3505;
            v3511 = (int64x2_t *)((char *)v3480 + 8 * v3477);
            v3511[1] = v3509;
            v3511[2] = v3510;
            *v3511 = v3508;
            v3512 = &v3480[v3477];
            v3512[1] = vzip1q_s64(v3491, v3496);
            v3512[2] = vzip1q_s64(v3500, v3504);
            *v3512 = vzip1q_s64(v3483, v3486);
            v3513 = (int64x2_t *)((char *)v3480 + 24 * v3477);
            v3513[1] = vzip2q_s64(v3491, v3496);
            v3513[2] = vzip2q_s64(v3500, v3504);
            *v3513 = vzip2q_s64(v3483, v3486);
            v3514 = &v3480[2 * v3477];
            v3514[1] = vzip1q_s64(v3490, v3495);
            v3514[2] = vzip1q_s64(v3499, v3502);
            *v3514 = vzip1q_s64(v3482, v3485);
            v3515 = (int64x2_t *)((char *)v3480 + 40 * v3477);
            v3515[1] = vzip2q_s64(v3490, v3495);
            v3515[2] = vzip2q_s64(v3499, v3502);
            *v3515 = vzip2q_s64(v3482, v3485);
            v3516 = &v3480[3 * v3477];
            v3516[1] = vzip1q_s64(v3489, v3494);
            v3516[2] = vzip1q_s64(v3498, v3503);
            *v3516 = vzip1q_s64(v3481, v3484);
            v3517 = (int64x2_t *)((char *)v3480 + 56 * v3477);
            v3517[1] = vzip2q_s64(v3489, v3494);
            v3517[2] = vzip2q_s64(v3498, v3503);
            *v3517 = vzip2q_s64(v3481, v3484);
            v3518 = &v3480[4 * v3477];
            v3518[1] = v3488;
            v3518[2] = v3497;
            *v3518 = v3479;
            v3438 += 4;
          }
          while (v3438 != v3437);
LABEL_790:
          v3431 = *(unsigned int *)(a1 + 5172);
        }
        ++v3432;
        ++v3433;
      }
      while (v3432 < v3431);
    }
    v3540 = *(unsigned int *)(a1 + 6180);
    if ((_DWORD)v3540)
    {
      v3541 = 0;
      v3542 = *(unsigned int **)(a1 + 10616);
      do
      {
        v3543 = *(_QWORD *)(*(_QWORD *)(a1 + 6288) + 8 * v3541);
        if (v3543)
        {
          v3544 = *(_QWORD *)(a1 + 6256);
          v3545 = (*(_DWORD *)(a1 + 6280) * v3541);
          v3546 = (unsigned int *)(v3544 + 16 * (v3543 + v3545));
          v3547 = (unsigned int *)(v3544 + 16 * v3545);
          do
          {
            while (1)
            {
              v3571 = *v3542;
              v3572 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3547);
              v3573 = *(_QWORD *)(a1 + 6184) + 8 * *((_QWORD *)v3547 + 1);
              v3574 = *v6;
              v3575 = *(_QWORD *)(a1 + 20040);
              if (*v3542 >= v3572)
                break;
              v3548 = *(_QWORD *)(v3573 + 64);
              v3549 = v3575 + 8 * (v3572 + (_DWORD)v3574 * v3571);
              v3550 = *(_OWORD *)(v3573 + 48);
              v3551 = *(int64x2_t *)v3573;
              v3552 = *(_OWORD *)(v3573 + 16);
              v3553 = *(_OWORD *)(v3573 + 72);
              v3554 = *(_OWORD *)(v3573 + 88);
              v3555 = *(_OWORD *)(v3573 + 104);
              v3556 = *(_OWORD *)(v3573 + 120);
              v3557 = *(_QWORD *)(v3573 + 136);
              v3558 = *(_OWORD *)(v3573 + 144);
              v3559 = *(_OWORD *)(v3573 + 160);
              v3560 = *(_OWORD *)(v3573 + 176);
              v3561 = *(_OWORD *)(v3573 + 192);
              v3562 = *(_QWORD *)(v3573 + 208);
              v3563 = *(_OWORD *)(v3573 + 232);
              v3564 = *(_OWORD *)(v3573 + 248);
              v3565 = *(_OWORD *)(v3573 + 216);
              v3566 = *(_OWORD *)(v3573 + 264);
              v3567 = *(_QWORD *)(v3573 + 280);
              *(_OWORD *)(v3549 + 32) = *(_OWORD *)(v3573 + 32);
              *(_OWORD *)(v3549 + 48) = v3550;
              *(_QWORD *)(v3549 + 64) = v3548;
              *(int64x2_t *)v3549 = v3551;
              *(_OWORD *)(v3549 + 16) = v3552;
              v3568 = v3549 + 8 * v3574;
              *(_QWORD *)(v3568 + 64) = v3557;
              *(_OWORD *)(v3568 + 32) = v3555;
              *(_OWORD *)(v3568 + 48) = v3556;
              *(_OWORD *)v3568 = v3553;
              *(_OWORD *)(v3568 + 16) = v3554;
              v3569 = v3549 + 16 * v3574;
              *(_QWORD *)(v3569 + 64) = v3562;
              *(_OWORD *)(v3569 + 32) = v3560;
              *(_OWORD *)(v3569 + 48) = v3561;
              *(_OWORD *)v3569 = v3558;
              *(_OWORD *)(v3569 + 16) = v3559;
              v3570 = v3549 + 24 * v3574;
              *(_QWORD *)(v3570 + 64) = v3567;
              *(_OWORD *)(v3570 + 32) = v3564;
              *(_OWORD *)(v3570 + 48) = v3566;
              *(_OWORD *)v3570 = v3565;
              *(_OWORD *)(v3570 + 16) = v3563;
              v3547 += 4;
              if (v3547 == v3546)
                goto LABEL_810;
            }
            v3576.i64[0] = *(_QWORD *)(v3573 + 64);
            v3577 = (int64x2_t *)(v3575 + 8 * (v3571 + (_DWORD)v3574 * v3572));
            v3579 = *(int64x2_t *)(v3573 + 32);
            v3578 = *(int64x2_t *)(v3573 + 48);
            v3580 = *(int64x2_t *)(v3573 + 16);
            v3581 = *(int64x2_t *)(v3573 + 120);
            v3582 = *(int64x2_t *)(v3573 + 104);
            v3583 = *(int64x2_t *)(v3573 + 88);
            v3584 = *(int64x2_t *)(v3573 + 72);
            v3585.i64[0] = *(_QWORD *)(v3573 + 208);
            v3587 = *(int64x2_t *)(v3573 + 176);
            v3586 = *(int64x2_t *)(v3573 + 192);
            v3589 = *(int64x2_t *)(v3573 + 144);
            v3588 = *(int64x2_t *)(v3573 + 160);
            v3590 = *(int64x2_t *)(v3573 + 216);
            v3591 = *(int64x2_t *)(v3573 + 264);
            v3592 = *(int64x2_t *)(v3573 + 248);
            v3593 = *(int64x2_t *)(v3573 + 232);
            v3594 = vzip2q_s64(*(int64x2_t *)v3573, v3584);
            v3576.i64[1] = *(_QWORD *)(v3573 + 136);
            v3585.i64[1] = *(_QWORD *)(v3573 + 280);
            *v3577 = vzip1q_s64(*(int64x2_t *)v3573, v3584);
            v3577[1] = vzip1q_s64(v3589, v3590);
            v3595 = (int64x2_t *)((char *)v3577 + 8 * v3574);
            *v3595 = v3594;
            v3595[1] = vzip2q_s64(v3589, v3590);
            v3596 = &v3577[v3574];
            *v3596 = vzip1q_s64(v3580, v3583);
            v3596[1] = vzip1q_s64(v3588, v3593);
            v3597 = (int64x2_t *)((char *)v3577 + 24 * v3574);
            *v3597 = vzip2q_s64(v3580, v3583);
            v3597[1] = vzip2q_s64(v3588, v3593);
            v3598 = &v3577[2 * v3574];
            *v3598 = vzip1q_s64(v3579, v3582);
            v3598[1] = vzip1q_s64(v3587, v3592);
            v3599 = (int64x2_t *)((char *)v3577 + 40 * v3574);
            *v3599 = vzip2q_s64(v3579, v3582);
            v3599[1] = vzip2q_s64(v3587, v3592);
            v3600 = &v3577[3 * v3574];
            *v3600 = vzip1q_s64(v3578, v3581);
            v3600[1] = vzip1q_s64(v3586, v3591);
            v3601 = (int64x2_t *)((char *)v3577 + 56 * v3574);
            *v3601 = vzip2q_s64(v3578, v3581);
            v3601[1] = vzip2q_s64(v3586, v3591);
            v3602 = &v3577[4 * v3574];
            *v3602 = v3576;
            v3602[1] = v3585;
            v3547 += 4;
          }
          while (v3547 != v3546);
LABEL_810:
          v3540 = *(unsigned int *)(a1 + 6180);
        }
        ++v3541;
        ++v3542;
      }
      while (v3541 < v3540);
    }
    v3666 = *(unsigned int *)(a1 + 7188);
    if ((_DWORD)v3666)
    {
      v3667 = 0;
      v3668 = *(unsigned int **)(a1 + 10640);
      do
      {
        v3669 = *(_QWORD *)(*(_QWORD *)(a1 + 7296) + 8 * v3667);
        if (v3669)
        {
          v3670 = *(_QWORD *)(a1 + 7264);
          v3671 = (*(_DWORD *)(a1 + 7288) * v3667);
          v3672 = (unsigned int *)(v3670 + 16 * (v3669 + v3671));
          v3673 = (unsigned int *)(v3670 + 16 * v3671);
          do
          {
            while (1)
            {
              v3697 = *v3668;
              v3698 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3673);
              v3699 = *(_QWORD *)(a1 + 7192) + 8 * *((_QWORD *)v3673 + 1);
              v3700 = *v6;
              v3701 = *(_QWORD *)(a1 + 20040);
              if (*v3668 >= v3698)
                break;
              v3674 = *(_QWORD *)(v3699 + 64);
              v3675 = v3701 + 8 * (v3698 + (_DWORD)v3700 * v3697);
              v3676 = *(_OWORD *)(v3699 + 48);
              v3677 = *(int64x2_t *)v3699;
              v3678 = *(_OWORD *)(v3699 + 16);
              v3679 = *(_OWORD *)(v3699 + 72);
              v3680 = *(_OWORD *)(v3699 + 88);
              v3681 = *(_OWORD *)(v3699 + 104);
              v3682 = *(_OWORD *)(v3699 + 120);
              v3683 = *(_QWORD *)(v3699 + 136);
              v3684 = *(_OWORD *)(v3699 + 144);
              v3685 = *(_OWORD *)(v3699 + 160);
              v3686 = *(_OWORD *)(v3699 + 176);
              v3687 = *(_OWORD *)(v3699 + 192);
              v3688 = *(_QWORD *)(v3699 + 208);
              v3689 = *(_OWORD *)(v3699 + 232);
              v3690 = *(_OWORD *)(v3699 + 248);
              v3691 = *(_OWORD *)(v3699 + 216);
              v3692 = *(_OWORD *)(v3699 + 264);
              v3693 = *(_QWORD *)(v3699 + 280);
              *(_OWORD *)(v3675 + 32) = *(_OWORD *)(v3699 + 32);
              *(_OWORD *)(v3675 + 48) = v3676;
              *(_QWORD *)(v3675 + 64) = v3674;
              *(int64x2_t *)v3675 = v3677;
              *(_OWORD *)(v3675 + 16) = v3678;
              v3694 = v3675 + 8 * v3700;
              *(_QWORD *)(v3694 + 64) = v3683;
              *(_OWORD *)(v3694 + 32) = v3681;
              *(_OWORD *)(v3694 + 48) = v3682;
              *(_OWORD *)v3694 = v3679;
              *(_OWORD *)(v3694 + 16) = v3680;
              v3695 = v3675 + 16 * v3700;
              *(_QWORD *)(v3695 + 64) = v3688;
              *(_OWORD *)(v3695 + 32) = v3686;
              *(_OWORD *)(v3695 + 48) = v3687;
              *(_OWORD *)v3695 = v3684;
              *(_OWORD *)(v3695 + 16) = v3685;
              v3696 = v3675 + 24 * v3700;
              *(_QWORD *)(v3696 + 64) = v3693;
              *(_OWORD *)(v3696 + 32) = v3690;
              *(_OWORD *)(v3696 + 48) = v3692;
              *(_OWORD *)v3696 = v3691;
              *(_OWORD *)(v3696 + 16) = v3689;
              v3673 += 4;
              if (v3673 == v3672)
                goto LABEL_830;
            }
            v3702.i64[0] = *(_QWORD *)(v3699 + 64);
            v3703 = (int64x2_t *)(v3701 + 8 * (v3697 + (_DWORD)v3700 * v3698));
            v3705 = *(int64x2_t *)(v3699 + 32);
            v3704 = *(int64x2_t *)(v3699 + 48);
            v3706 = *(int64x2_t *)(v3699 + 16);
            v3707 = *(int64x2_t *)(v3699 + 120);
            v3708 = *(int64x2_t *)(v3699 + 104);
            v3709 = *(int64x2_t *)(v3699 + 88);
            v3710 = *(int64x2_t *)(v3699 + 72);
            v3711.i64[0] = *(_QWORD *)(v3699 + 208);
            v3713 = *(int64x2_t *)(v3699 + 176);
            v3712 = *(int64x2_t *)(v3699 + 192);
            v3715 = *(int64x2_t *)(v3699 + 144);
            v3714 = *(int64x2_t *)(v3699 + 160);
            v3716 = *(int64x2_t *)(v3699 + 216);
            v3717 = *(int64x2_t *)(v3699 + 264);
            v3718 = *(int64x2_t *)(v3699 + 248);
            v3719 = *(int64x2_t *)(v3699 + 232);
            v3720 = vzip2q_s64(*(int64x2_t *)v3699, v3710);
            v3702.i64[1] = *(_QWORD *)(v3699 + 136);
            v3711.i64[1] = *(_QWORD *)(v3699 + 280);
            *v3703 = vzip1q_s64(*(int64x2_t *)v3699, v3710);
            v3703[1] = vzip1q_s64(v3715, v3716);
            v3721 = (int64x2_t *)((char *)v3703 + 8 * v3700);
            *v3721 = v3720;
            v3721[1] = vzip2q_s64(v3715, v3716);
            v3722 = &v3703[v3700];
            *v3722 = vzip1q_s64(v3706, v3709);
            v3722[1] = vzip1q_s64(v3714, v3719);
            v3723 = (int64x2_t *)((char *)v3703 + 24 * v3700);
            *v3723 = vzip2q_s64(v3706, v3709);
            v3723[1] = vzip2q_s64(v3714, v3719);
            v3724 = &v3703[2 * v3700];
            *v3724 = vzip1q_s64(v3705, v3708);
            v3724[1] = vzip1q_s64(v3713, v3718);
            v3725 = (int64x2_t *)((char *)v3703 + 40 * v3700);
            *v3725 = vzip2q_s64(v3705, v3708);
            v3725[1] = vzip2q_s64(v3713, v3718);
            v3726 = &v3703[3 * v3700];
            *v3726 = vzip1q_s64(v3704, v3707);
            v3726[1] = vzip1q_s64(v3712, v3717);
            v3727 = (int64x2_t *)((char *)v3703 + 56 * v3700);
            *v3727 = vzip2q_s64(v3704, v3707);
            v3727[1] = vzip2q_s64(v3712, v3717);
            v3728 = &v3703[4 * v3700];
            *v3728 = v3702;
            v3728[1] = v3711;
            v3673 += 4;
          }
          while (v3673 != v3672);
LABEL_830:
          v3666 = *(unsigned int *)(a1 + 7188);
        }
        ++v3667;
        ++v3668;
      }
      while (v3667 < v3666);
    }
    v3775 = *(unsigned int *)(a1 + 8196);
    if ((_DWORD)v3775)
    {
      v3776 = 0;
      v3777 = *(unsigned int **)(a1 + 10664);
      do
      {
        v3778 = *(_QWORD *)(*(_QWORD *)(a1 + 8304) + 8 * v3776);
        if (v3778)
        {
          v3779 = *(_QWORD *)(a1 + 8272);
          v3780 = (*(_DWORD *)(a1 + 8296) * v3776);
          v3781 = (unsigned int *)(v3779 + 16 * (v3778 + v3780));
          v3782 = (unsigned int *)(v3779 + 16 * v3780);
          do
          {
            while (1)
            {
              v3800 = *v3777;
              v3801 = *(_DWORD *)(*(_QWORD *)(a1 + 10544) + 4 * *v3782);
              v3802 = *(_QWORD *)(a1 + 8200) + 8 * *((_QWORD *)v3782 + 1);
              v3803 = *v6;
              v3804 = *(_QWORD *)(a1 + 20040);
              if (*v3777 >= v3801)
                break;
              v3783 = *(_QWORD *)(v3802 + 64);
              v3784 = v3804 + 8 * (v3801 + (_DWORD)v3803 * v3800);
              v3785 = *(_OWORD *)(v3802 + 48);
              v3786 = *(int64x2_t *)v3802;
              v3787 = *(_OWORD *)(v3802 + 16);
              v3788 = *(_OWORD *)(v3802 + 72);
              v3789 = *(_OWORD *)(v3802 + 88);
              v3790 = *(_OWORD *)(v3802 + 104);
              v3791 = *(_OWORD *)(v3802 + 120);
              v3792 = *(_QWORD *)(v3802 + 136);
              v3793 = *(_OWORD *)(v3802 + 144);
              v3794 = *(_OWORD *)(v3802 + 160);
              v3795 = *(_OWORD *)(v3802 + 176);
              v3796 = *(_OWORD *)(v3802 + 192);
              v3797 = *(_QWORD *)(v3802 + 208);
              *(_OWORD *)(v3784 + 32) = *(_OWORD *)(v3802 + 32);
              *(_OWORD *)(v3784 + 48) = v3785;
              *(_QWORD *)(v3784 + 64) = v3783;
              *(int64x2_t *)v3784 = v3786;
              *(_OWORD *)(v3784 + 16) = v3787;
              v3798 = v3784 + 8 * v3803;
              *(_QWORD *)(v3798 + 64) = v3792;
              *(_OWORD *)(v3798 + 32) = v3790;
              *(_OWORD *)(v3798 + 48) = v3791;
              *(_OWORD *)v3798 = v3788;
              *(_OWORD *)(v3798 + 16) = v3789;
              v3799 = v3784 + 16 * v3803;
              *(_QWORD *)(v3799 + 64) = v3797;
              *(_OWORD *)(v3799 + 32) = v3795;
              *(_OWORD *)(v3799 + 48) = v3796;
              *(_OWORD *)v3799 = v3793;
              *(_OWORD *)(v3799 + 16) = v3794;
              v3782 += 4;
              if (v3782 == v3781)
                goto LABEL_850;
            }
            v3805.i64[0] = *(_QWORD *)(v3802 + 64);
            v3806 = (int64x2_t *)(v3804 + 8 * (v3800 + (_DWORD)v3803 * v3801));
            v3808 = *(int64x2_t *)(v3802 + 32);
            v3807 = *(int64x2_t *)(v3802 + 48);
            v3809 = *(int64x2_t *)(v3802 + 16);
            v3810 = *(int64x2_t *)(v3802 + 120);
            v3811 = *(int64x2_t *)(v3802 + 104);
            v3812 = *(int64x2_t *)(v3802 + 88);
            v3813 = *(int64x2_t *)(v3802 + 72);
            v3814 = *(_QWORD *)(v3802 + 208);
            v3816 = *(_OWORD *)(v3802 + 176);
            v3815 = *(_OWORD *)(v3802 + 192);
            v3818 = *(_OWORD *)(v3802 + 144);
            v3817 = *(_OWORD *)(v3802 + 160);
            v3819 = vzip1q_s64(*(int64x2_t *)v3802, v3813);
            v3820 = vzip2q_s64(*(int64x2_t *)v3802, v3813);
            v3805.i64[1] = *(_QWORD *)(v3802 + 136);
            v3806[1].i64[0] = v3818;
            *v3806 = v3819;
            v3821 = (int64x2_t *)((char *)v3806 + 8 * v3803);
            *v3821 = v3820;
            v3821[1].i64[0] = *((_QWORD *)&v3818 + 1);
            v3822 = &v3806[v3803];
            v3822[1].i64[0] = v3817;
            *v3822 = vzip1q_s64(v3809, v3812);
            v3823 = (int64x2_t *)((char *)v3806 + 24 * v3803);
            v3823[1].i64[0] = *((_QWORD *)&v3817 + 1);
            *v3823 = vzip2q_s64(v3809, v3812);
            v3824 = &v3806[2 * v3803];
            v3824[1].i64[0] = v3816;
            *v3824 = vzip1q_s64(v3808, v3811);
            v3825 = (int64x2_t *)((char *)v3806 + 40 * v3803);
            v3825[1].i64[0] = *((_QWORD *)&v3816 + 1);
            *v3825 = vzip2q_s64(v3808, v3811);
            v3826 = &v3806[3 * v3803];
            v3826[1].i64[0] = v3815;
            *v3826 = vzip1q_s64(v3807, v3810);
            v3827 = (int64x2_t *)((char *)v3806 + 56 * v3803);
            v3827[1].i64[0] = *((_QWORD *)&v3815 + 1);
            *v3827 = vzip2q_s64(v3807, v3810);
            v3828 = &v3806[4 * v3803];
            v3828[1].i64[0] = v3814;
            *v3828 = v3805;
            v3782 += 4;
          }
          while (v3782 != v3781);
LABEL_850:
          v3775 = *(unsigned int *)(a1 + 8196);
        }
        ++v3776;
        ++v3777;
      }
      while (v3776 < v3775);
    }
    v3875 = *(unsigned int *)(a1 + 2004);
    if ((_DWORD)v3875)
    {
      v3876 = 0;
      v3877 = *(unsigned int **)(a1 + 10520);
      do
      {
        v3878 = *(_QWORD *)(*(_QWORD *)(a1 + 2112) + 8 * v3876);
        if (v3878)
        {
          v3879 = *(_QWORD *)(a1 + 2080);
          v3880 = (*(_DWORD *)(a1 + 2104) * v3876);
          v3881 = (unsigned int *)(v3879 + 16 * (v3878 + v3880));
          v3882 = (unsigned int *)(v3879 + 16 * v3880);
          do
          {
            v3918 = *v3877;
            v3919 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3882);
            v3920 = *(_QWORD *)(a1 + 2008) + 8 * *((_QWORD *)v3882 + 1);
            v3921 = *v6;
            v3922 = *(_QWORD *)(a1 + 20040);
            if (*v3877 < v3919)
            {
              v3883 = *(int64x2_t *)v3920;
              v3884 = (int64x2_t *)(v3922 + 8 * (v3919 + (_DWORD)v3921 * v3918));
              v3885 = *(int64x2_t *)(v3920 + 32);
              v3886 = *(int64x2_t *)(v3920 + 48);
              v3887 = *(int64x2_t *)(v3920 + 64);
              v3888 = *(int64x2_t *)(v3920 + 80);
              v3890 = *(int8x16_t *)(v3920 + 96);
              v3889 = *(int8x16_t *)(v3920 + 112);
              v3891 = *(int8x16_t *)(v3920 + 128);
              v3892 = *(int8x16_t *)(v3920 + 144);
              v3893 = vextq_s8(v3891, v3891, 8uLL).u64[0];
              v3894 = vextq_s8(v3889, v3889, 8uLL).u64[0];
              v3895 = vextq_s8(v3890, v3890, 8uLL).u64[0];
              v3896 = *(int8x16_t *)(v3920 + 160);
              v3897 = *(int8x16_t *)(v3920 + 176);
              v3898 = vextq_s8(v3897, v3897, 8uLL).u64[0];
              v3899 = vextq_s8(v3896, v3896, 8uLL).u64[0];
              v3900 = vextq_s8(v3892, v3892, 8uLL).u64[0];
              v3902 = *(int8x16_t *)(v3920 + 192);
              v3901 = *(int8x16_t *)(v3920 + 208);
              v3904 = *(int8x16_t *)(v3920 + 224);
              v3903 = *(int8x16_t *)(v3920 + 240);
              v3905 = vextq_s8(v3904, v3904, 8uLL).u64[0];
              v3906 = vextq_s8(v3901, v3901, 8uLL).u64[0];
              v3907 = vextq_s8(v3902, v3902, 8uLL).u64[0];
              v3908 = *(int8x16_t *)(v3920 + 256);
              v3909 = *(int8x16_t *)(v3920 + 272);
              v3910 = vextq_s8(v3909, v3909, 8uLL).u64[0];
              v3911 = vextq_s8(v3908, v3908, 8uLL).u64[0];
              v3912 = vextq_s8(v3903, v3903, 8uLL).u64[0];
              v3884[1] = *(int64x2_t *)(v3920 + 16);
              v3884[2] = v3885;
              *v3884 = v3883;
              v3913 = (int64x2_t *)((char *)v3884 + 8 * v3921);
              v3913[1] = v3887;
            }
            else
            {
              v3884 = (int64x2_t *)(v3922 + 8 * (v3918 + (_DWORD)v3921 * v3919));
              v3923 = *(int64x2_t *)(v3920 + 16);
              v3924 = *(int64x2_t *)(v3920 + 64);
              v3925 = *(int64x2_t *)(v3920 + 80);
              v3927 = *(int64x2_t *)(v3920 + 32);
              v3926 = *(int64x2_t *)(v3920 + 48);
              v3928 = *(int64x2_t *)(v3920 + 96);
              v3929 = *(int64x2_t *)(v3920 + 112);
              v3930 = *(int64x2_t *)(v3920 + 128);
              v3932 = *(int64x2_t *)(v3920 + 192);
              v3931 = *(int64x2_t *)(v3920 + 208);
              v3933 = *(int64x2_t *)(v3920 + 224);
              v3934 = vzip1q_s64(*(int64x2_t *)v3920, v3926);
              v3935 = vzip1q_s64(v3928, *(int64x2_t *)(v3920 + 144));
              v3936 = vzip1q_s64(v3932, *(int64x2_t *)(v3920 + 240));
              v3937.i64[0] = vdupq_laneq_s64(v3928, 1).u64[0];
              v3937.i64[1] = *(_QWORD *)(v3920 + 152);
              v3886 = vzip2q_s64(*(int64x2_t *)v3920, v3926);
              v3888.i64[0] = vdupq_laneq_s64(v3932, 1).u64[0];
              v3888.i64[1] = *(_QWORD *)(v3920 + 248);
              v3890 = (int8x16_t)vzip1q_s64(v3923, v3924);
              v3889 = (int8x16_t)vzip1q_s64(v3929, *(int64x2_t *)(v3920 + 160));
              v3891 = (int8x16_t)vzip1q_s64(v3931, *(int64x2_t *)(v3920 + 256));
              v3893 = vextq_s8(v3891, v3891, 8uLL).u64[0];
              v3894 = vextq_s8(v3889, v3889, 8uLL).u64[0];
              v3895 = vextq_s8(v3890, v3890, 8uLL).u64[0];
              v3892 = (int8x16_t)vzip2q_s64(v3923, v3924);
              v3896.i64[0] = vdupq_laneq_s64(v3929, 1).u64[0];
              v3896.i64[1] = *(_QWORD *)(v3920 + 168);
              v3897.i64[0] = vdupq_laneq_s64(v3931, 1).u64[0];
              v3897.i64[1] = *(_QWORD *)(v3920 + 264);
              v3900 = vextq_s8(v3892, v3892, 8uLL).u64[0];
              v3898 = vextq_s8(v3897, v3897, 8uLL).u64[0];
              v3899 = vextq_s8(v3896, v3896, 8uLL).u64[0];
              v3902 = (int8x16_t)vzip1q_s64(v3927, v3925);
              v3901 = (int8x16_t)vzip1q_s64(v3930, *(int64x2_t *)(v3920 + 176));
              v3904 = (int8x16_t)vzip1q_s64(v3933, *(int64x2_t *)(v3920 + 272));
              v3905 = vextq_s8(v3904, v3904, 8uLL).u64[0];
              v3906 = vextq_s8(v3901, v3901, 8uLL).u64[0];
              v3907 = vextq_s8(v3902, v3902, 8uLL).u64[0];
              v3903 = (int8x16_t)vzip2q_s64(v3927, v3925);
              v3908.i64[0] = vdupq_laneq_s64(v3930, 1).u64[0];
              v3908.i64[1] = *(_QWORD *)(v3920 + 184);
              v3909.i64[0] = vdupq_laneq_s64(v3933, 1).u64[0];
              v3909.i64[1] = *(_QWORD *)(v3920 + 280);
              v3912 = vextq_s8(v3903, v3903, 8uLL).u64[0];
              v3910 = vextq_s8(v3909, v3909, 8uLL).u64[0];
              v3911 = vextq_s8(v3908, v3908, 8uLL).u64[0];
              v3884[1] = v3935;
              v3884[2] = v3936;
              *v3884 = v3934;
              v3913 = (int64x2_t *)((char *)v3884 + 8 * v3921);
              v3913[1] = v3937;
            }
            v3913[2] = v3888;
            *v3913 = v3886;
            v3890.i64[1] = v3895;
            v3889.i64[1] = v3894;
            v3914 = (int8x16_t *)&v3884[v3921];
            *v3914 = v3890;
            v3914[1] = v3889;
            v3891.i64[1] = v3893;
            v3914[2] = v3891;
            v3897.i64[1] = v3898;
            v3915 = (int8x16_t *)((char *)v3884 + 24 * v3921);
            v3896.i64[1] = v3899;
            v3892.i64[1] = v3900;
            v3915[1] = v3896;
            v3915[2] = v3897;
            *v3915 = v3892;
            v3916 = (int8x16_t *)&v3884[2 * v3921];
            v3904.i64[1] = v3905;
            v3901.i64[1] = v3906;
            v3902.i64[1] = v3907;
            v3916[1] = v3901;
            v3916[2] = v3904;
            *v3916 = v3902;
            v3917 = (int8x16_t *)((char *)v3884 + 40 * v3921);
            v3909.i64[1] = v3910;
            v3908.i64[1] = v3911;
            v3903.i64[1] = v3912;
            v3882 += 4;
            v3917[1] = v3908;
            v3917[2] = v3909;
            *v3917 = v3903;
          }
          while (v3882 != v3881);
          v3875 = *(unsigned int *)(a1 + 2004);
        }
        ++v3876;
        ++v3877;
      }
      while (v3876 < v3875);
    }
    v3978 = *(unsigned int *)(a1 + 3012);
    if ((_DWORD)v3978)
    {
      v3979 = 0;
      v3980 = *(unsigned int **)(a1 + 10544);
      do
      {
        v3981 = *(_QWORD *)(*(_QWORD *)(a1 + 3120) + 8 * v3979);
        if (v3981)
        {
          v3982 = *(_QWORD *)(a1 + 3088);
          v3983 = (*(_DWORD *)(a1 + 3112) * v3979);
          v3984 = (unsigned int *)(v3982 + 16 * (v3981 + v3983));
          v3985 = (unsigned int *)(v3982 + 16 * v3983);
          do
          {
            while (1)
            {
              v4021 = *v3980;
              v4022 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v3985);
              v4023 = *(_QWORD *)(a1 + 3016) + 8 * *((_QWORD *)v3985 + 1);
              v4024 = *v6;
              v4025 = *(_QWORD *)(a1 + 20040);
              if (*v3980 >= v4022)
                break;
              v3986 = *(int64x2_t *)v4023;
              v3987 = (int64x2_t *)(v4025 + 8 * (v4022 + (_DWORD)v4024 * v4021));
              v3988 = *(int64x2_t *)(v4023 + 32);
              v3989 = *(_OWORD *)(v4023 + 48);
              v3990 = *(_OWORD *)(v4023 + 64);
              v3991 = *(_OWORD *)(v4023 + 80);
              v3992 = *(int64x2_t *)(v4023 + 96);
              v3993 = *(int64x2_t *)(v4023 + 112);
              v3994 = *(int64x2_t *)(v4023 + 128);
              v3995 = *(_OWORD *)(v4023 + 144);
              v3996 = *(_OWORD *)(v4023 + 160);
              v3997 = *(_OWORD *)(v4023 + 176);
              v3998 = *(int64x2_t *)(v4023 + 192);
              v3999 = *(int64x2_t *)(v4023 + 208);
              v4000 = *(int64x2_t *)(v4023 + 224);
              v4001 = *(_OWORD *)(v4023 + 240);
              v4002 = *(_OWORD *)(v4023 + 256);
              v4003 = *(_OWORD *)(v4023 + 272);
              v4004 = *(int64x2_t *)(v4023 + 288);
              v4005 = *(int64x2_t *)(v4023 + 304);
              v4006 = *(int64x2_t *)(v4023 + 320);
              v4007 = *(_OWORD *)(v4023 + 336);
              v4008 = *(_OWORD *)(v4023 + 352);
              v4009 = *(_OWORD *)(v4023 + 368);
              v4010 = *(int64x2_t *)(v4023 + 384);
              v4011 = *(int64x2_t *)(v4023 + 400);
              v4012 = *(int64x2_t *)(v4023 + 416);
              v3987[1] = *(int64x2_t *)(v4023 + 16);
              v3987[2] = v3988;
              *v3987 = v3986;
              v4013 = &v3987->i8[8 * v4024];
              *((_OWORD *)v4013 + 1) = v3990;
              *((_OWORD *)v4013 + 2) = v3991;
              *(_OWORD *)v4013 = v3989;
              v4014 = &v3987[v4024];
              v4014[1] = v3993;
              v4014[2] = v3994;
              *v4014 = v3992;
              v4015 = &v3987->i8[24 * v4024];
              *((_OWORD *)v4015 + 1) = v3996;
              *((_OWORD *)v4015 + 2) = v3997;
              *(_OWORD *)v4015 = v3995;
              v4016 = &v3987[2 * v4024];
              v4016[1] = v3999;
              v4016[2] = v4000;
              *v4016 = v3998;
              v4017 = &v3987->i8[40 * v4024];
              *((_OWORD *)v4017 + 1) = v4002;
              *((_OWORD *)v4017 + 2) = v4003;
              *(_OWORD *)v4017 = v4001;
              v4018 = &v3987[3 * v4024];
              v4018[1] = v4005;
              v4018[2] = v4006;
              *v4018 = v4004;
              v4019 = &v3987->i8[56 * v4024];
              *((_OWORD *)v4019 + 1) = v4008;
              *((_OWORD *)v4019 + 2) = v4009;
              *(_OWORD *)v4019 = v4007;
              v4020 = &v3987[4 * v4024];
              v4020[1] = v4011;
              v4020[2] = v4012;
              *v4020 = v4010;
              v3985 += 4;
              if (v3985 == v3984)
                goto LABEL_890;
            }
            v4026 = *(int64x2_t *)(v4023 + 16);
            v4027 = (int64x2_t *)(v4025 + 8 * (v4021 + (_DWORD)v4024 * v4022));
            v4029 = *(int64x2_t *)(v4023 + 64);
            v4028 = *(int64x2_t *)(v4023 + 80);
            v4030 = *(int64x2_t *)(v4023 + 32);
            v4031 = *(int64x2_t *)(v4023 + 48);
            v4033 = *(int64x2_t *)(v4023 + 96);
            v4032 = *(int64x2_t *)(v4023 + 112);
            v4035 = *(int64x2_t *)(v4023 + 160);
            v4034 = *(int64x2_t *)(v4023 + 176);
            v4036 = *(int64x2_t *)(v4023 + 128);
            v4037 = *(int64x2_t *)(v4023 + 144);
            v4039 = *(int64x2_t *)(v4023 + 192);
            v4038 = *(int64x2_t *)(v4023 + 208);
            v4041 = *(int64x2_t *)(v4023 + 256);
            v4040 = *(int64x2_t *)(v4023 + 272);
            v4042 = *(int64x2_t *)(v4023 + 224);
            v4043 = *(int64x2_t *)(v4023 + 240);
            v4045 = *(int64x2_t *)(v4023 + 288);
            v4044 = *(int64x2_t *)(v4023 + 304);
            v4047 = *(int64x2_t *)(v4023 + 352);
            v4046 = *(int64x2_t *)(v4023 + 368);
            v4049 = *(int64x2_t *)(v4023 + 320);
            v4048 = *(int64x2_t *)(v4023 + 336);
            v4051 = *(_OWORD *)(v4023 + 400);
            v4050 = *(_OWORD *)(v4023 + 416);
            v4052 = *(_OWORD *)(v4023 + 384);
            v4053 = vzip1q_s64(*(int64x2_t *)v4023, v4031);
            v4054 = vzip2q_s64(*(int64x2_t *)v4023, v4031);
            v4027[2] = vzip1q_s64(v4039, v4043);
            v4027[3] = vzip1q_s64(v4045, v4048);
            v4027[4].i64[0] = v4052;
            *v4027 = v4053;
            v4027[1] = vzip1q_s64(v4033, v4037);
            v4055 = (int64x2_t *)((char *)v4027 + 8 * v4024);
            v4055[2] = vzip2q_s64(v4039, v4043);
            v4055[3] = vzip2q_s64(v4045, v4048);
            *v4055 = v4054;
            v4055[1] = vzip2q_s64(v4033, v4037);
            v4055[4].i64[0] = *((_QWORD *)&v4052 + 1);
            v4056 = &v4027[v4024];
            v4056[4].i64[0] = v4051;
            v4056[2] = vzip1q_s64(v4038, v4041);
            v4056[3] = vzip1q_s64(v4044, v4047);
            *v4056 = vzip1q_s64(v4026, v4029);
            v4056[1] = vzip1q_s64(v4032, v4035);
            v4057 = (int64x2_t *)((char *)v4027 + 24 * v4024);
            v4057[4].i64[0] = *((_QWORD *)&v4051 + 1);
            v4057[2] = vzip2q_s64(v4038, v4041);
            v4057[3] = vzip2q_s64(v4044, v4047);
            *v4057 = vzip2q_s64(v4026, v4029);
            v4057[1] = vzip2q_s64(v4032, v4035);
            v4058 = &v4027[2 * v4024];
            v4058[4].i64[0] = v4050;
            v4058[2] = vzip1q_s64(v4042, v4040);
            v4058[3] = vzip1q_s64(v4049, v4046);
            *v4058 = vzip1q_s64(v4030, v4028);
            v4058[1] = vzip1q_s64(v4036, v4034);
            v4059 = (int64x2_t *)((char *)v4027 + 40 * v4024);
            v4059[4].i64[0] = *((_QWORD *)&v4050 + 1);
            v4059[2] = vzip2q_s64(v4042, v4040);
            v4059[3] = vzip2q_s64(v4049, v4046);
            *v4059 = vzip2q_s64(v4030, v4028);
            v4059[1] = vzip2q_s64(v4036, v4034);
            v3985 += 4;
          }
          while (v3985 != v3984);
LABEL_890:
          v3978 = *(unsigned int *)(a1 + 3012);
        }
        ++v3979;
        ++v3980;
      }
      while (v3979 < v3978);
    }
    v4060 = *(unsigned int *)(a1 + 4020);
    if ((_DWORD)v4060)
    {
      v4061 = 0;
      v4062 = *(unsigned int **)(a1 + 10568);
      do
      {
        v4063 = *(_QWORD *)(*(_QWORD *)(a1 + 4128) + 8 * v4061);
        if (v4063)
        {
          v4064 = *(_QWORD *)(a1 + 4096);
          v4065 = (*(_DWORD *)(a1 + 4120) * v4061);
          v4066 = (unsigned int *)(v4064 + 16 * (v4063 + v4065));
          v4067 = (unsigned int *)(v4064 + 16 * v4065);
          do
          {
            while (1)
            {
              v4069 = *v4062;
              v4070 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4067);
              v4071 = (int8x16_t *)(*(_QWORD *)(a1 + 4024) + 8 * *((_QWORD *)v4067 + 1));
              v4072 = *v6;
              v4073 = *(_QWORD *)(a1 + 20040);
              v4075 = v4071[1];
              v4074 = v4071[2];
              v4076 = *v4071;
              v4077 = vextq_s8(v4074, v4074, 8uLL).u64[0];
              v4078 = vextq_s8(v4075, v4075, 8uLL).u64[0];
              v4079 = vextq_s8(v4076, v4076, 8uLL).u64[0];
              if (*v4062 >= v4070)
                break;
              v4076.i64[1] = v4079;
              v4075.i64[1] = v4078;
              v4068 = (int8x16_t *)(v4073 + 8 * (v4070 + (_DWORD)v4072 * v4069));
              *v4068 = v4076;
              v4068[1] = v4075;
              v4074.i64[1] = v4077;
              v4068[2] = v4074;
              v4067 += 4;
              if (v4067 == v4066)
                goto LABEL_900;
            }
            v4080 = (_QWORD *)(v4073 + 8 * (v4069 + (_DWORD)v4072 * v4070));
            *v4080 = v4076.i64[0];
            v4080[v4072] = v4079;
            v4080[2 * v4072] = v4075.i64[0];
            v4080[3 * v4072] = v4078;
            v4080[4 * v4072] = v4074.i64[0];
            v4080[5 * v4072] = v4077;
            v4067 += 4;
          }
          while (v4067 != v4066);
LABEL_900:
          v4060 = *(unsigned int *)(a1 + 4020);
        }
        ++v4061;
        ++v4062;
      }
      while (v4061 < v4060);
    }
    v4081 = *(unsigned int *)(a1 + 5028);
    if ((_DWORD)v4081)
    {
      v4082 = 0;
      v4083 = *(unsigned int **)(a1 + 10592);
      do
      {
        v4084 = *(_QWORD *)(*(_QWORD *)(a1 + 5136) + 8 * v4082);
        if (v4084)
        {
          v4085 = *(_QWORD *)(a1 + 5104);
          v4086 = (*(_DWORD *)(a1 + 5128) * v4082);
          v4087 = (unsigned int *)(v4085 + 16 * (v4084 + v4086));
          v4088 = (unsigned int *)(v4085 + 16 * v4086);
          do
          {
            v4124 = *v4083;
            v4125 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4088);
            v4126 = *(_QWORD *)(a1 + 5032) + 8 * *((_QWORD *)v4088 + 1);
            v4127 = *v6;
            v4128 = *(_QWORD *)(a1 + 20040);
            if (*v4083 < v4125)
            {
              v4089 = *(int64x2_t *)v4126;
              v4090 = (int64x2_t *)(v4128 + 8 * (v4125 + (_DWORD)v4127 * v4124));
              v4091 = *(int64x2_t *)(v4126 + 32);
              v4092 = *(int64x2_t *)(v4126 + 48);
              v4093 = *(int64x2_t *)(v4126 + 64);
              v4094 = *(int64x2_t *)(v4126 + 80);
              v4096 = *(int8x16_t *)(v4126 + 96);
              v4095 = *(int8x16_t *)(v4126 + 112);
              v4097 = *(int8x16_t *)(v4126 + 128);
              v4098 = *(int8x16_t *)(v4126 + 144);
              v4099 = vextq_s8(v4097, v4097, 8uLL).u64[0];
              v4100 = vextq_s8(v4095, v4095, 8uLL).u64[0];
              v4101 = vextq_s8(v4096, v4096, 8uLL).u64[0];
              v4102 = *(int8x16_t *)(v4126 + 160);
              v4103 = *(int8x16_t *)(v4126 + 176);
              v4104 = vextq_s8(v4103, v4103, 8uLL).u64[0];
              v4105 = vextq_s8(v4102, v4102, 8uLL).u64[0];
              v4106 = vextq_s8(v4098, v4098, 8uLL).u64[0];
              v4108 = *(int8x16_t *)(v4126 + 192);
              v4107 = *(int8x16_t *)(v4126 + 208);
              v4110 = *(int8x16_t *)(v4126 + 224);
              v4109 = *(int8x16_t *)(v4126 + 240);
              v4111 = vextq_s8(v4110, v4110, 8uLL).u64[0];
              v4112 = vextq_s8(v4107, v4107, 8uLL).u64[0];
              v4113 = vextq_s8(v4108, v4108, 8uLL).u64[0];
              v4114 = *(int8x16_t *)(v4126 + 256);
              v4115 = *(int8x16_t *)(v4126 + 272);
              v4116 = vextq_s8(v4115, v4115, 8uLL).u64[0];
              v4117 = vextq_s8(v4114, v4114, 8uLL).u64[0];
              v4118 = vextq_s8(v4109, v4109, 8uLL).u64[0];
              v4090[1] = *(int64x2_t *)(v4126 + 16);
              v4090[2] = v4091;
              *v4090 = v4089;
              v4119 = (int64x2_t *)((char *)v4090 + 8 * v4127);
              v4119[1] = v4093;
            }
            else
            {
              v4090 = (int64x2_t *)(v4128 + 8 * (v4124 + (_DWORD)v4127 * v4125));
              v4129 = *(int64x2_t *)(v4126 + 16);
              v4130 = *(int64x2_t *)(v4126 + 64);
              v4131 = *(int64x2_t *)(v4126 + 80);
              v4133 = *(int64x2_t *)(v4126 + 32);
              v4132 = *(int64x2_t *)(v4126 + 48);
              v4134 = *(int64x2_t *)(v4126 + 96);
              v4135 = *(int64x2_t *)(v4126 + 112);
              v4136 = *(int64x2_t *)(v4126 + 128);
              v4138 = *(int64x2_t *)(v4126 + 192);
              v4137 = *(int64x2_t *)(v4126 + 208);
              v4139 = *(int64x2_t *)(v4126 + 224);
              v4140 = vzip1q_s64(*(int64x2_t *)v4126, v4132);
              v4141 = vzip1q_s64(v4134, *(int64x2_t *)(v4126 + 144));
              v4142 = vzip1q_s64(v4138, *(int64x2_t *)(v4126 + 240));
              v4143.i64[0] = vdupq_laneq_s64(v4134, 1).u64[0];
              v4143.i64[1] = *(_QWORD *)(v4126 + 152);
              v4092 = vzip2q_s64(*(int64x2_t *)v4126, v4132);
              v4094.i64[0] = vdupq_laneq_s64(v4138, 1).u64[0];
              v4094.i64[1] = *(_QWORD *)(v4126 + 248);
              v4096 = (int8x16_t)vzip1q_s64(v4129, v4130);
              v4095 = (int8x16_t)vzip1q_s64(v4135, *(int64x2_t *)(v4126 + 160));
              v4097 = (int8x16_t)vzip1q_s64(v4137, *(int64x2_t *)(v4126 + 256));
              v4099 = vextq_s8(v4097, v4097, 8uLL).u64[0];
              v4100 = vextq_s8(v4095, v4095, 8uLL).u64[0];
              v4101 = vextq_s8(v4096, v4096, 8uLL).u64[0];
              v4098 = (int8x16_t)vzip2q_s64(v4129, v4130);
              v4102.i64[0] = vdupq_laneq_s64(v4135, 1).u64[0];
              v4102.i64[1] = *(_QWORD *)(v4126 + 168);
              v4103.i64[0] = vdupq_laneq_s64(v4137, 1).u64[0];
              v4103.i64[1] = *(_QWORD *)(v4126 + 264);
              v4106 = vextq_s8(v4098, v4098, 8uLL).u64[0];
              v4104 = vextq_s8(v4103, v4103, 8uLL).u64[0];
              v4105 = vextq_s8(v4102, v4102, 8uLL).u64[0];
              v4108 = (int8x16_t)vzip1q_s64(v4133, v4131);
              v4107 = (int8x16_t)vzip1q_s64(v4136, *(int64x2_t *)(v4126 + 176));
              v4110 = (int8x16_t)vzip1q_s64(v4139, *(int64x2_t *)(v4126 + 272));
              v4111 = vextq_s8(v4110, v4110, 8uLL).u64[0];
              v4112 = vextq_s8(v4107, v4107, 8uLL).u64[0];
              v4113 = vextq_s8(v4108, v4108, 8uLL).u64[0];
              v4109 = (int8x16_t)vzip2q_s64(v4133, v4131);
              v4114.i64[0] = vdupq_laneq_s64(v4136, 1).u64[0];
              v4114.i64[1] = *(_QWORD *)(v4126 + 184);
              v4115.i64[0] = vdupq_laneq_s64(v4139, 1).u64[0];
              v4115.i64[1] = *(_QWORD *)(v4126 + 280);
              v4118 = vextq_s8(v4109, v4109, 8uLL).u64[0];
              v4116 = vextq_s8(v4115, v4115, 8uLL).u64[0];
              v4117 = vextq_s8(v4114, v4114, 8uLL).u64[0];
              v4090[1] = v4141;
              v4090[2] = v4142;
              *v4090 = v4140;
              v4119 = (int64x2_t *)((char *)v4090 + 8 * v4127);
              v4119[1] = v4143;
            }
            v4119[2] = v4094;
            *v4119 = v4092;
            v4096.i64[1] = v4101;
            v4095.i64[1] = v4100;
            v4120 = (int8x16_t *)&v4090[v4127];
            *v4120 = v4096;
            v4120[1] = v4095;
            v4097.i64[1] = v4099;
            v4120[2] = v4097;
            v4103.i64[1] = v4104;
            v4121 = (int8x16_t *)((char *)v4090 + 24 * v4127);
            v4102.i64[1] = v4105;
            v4098.i64[1] = v4106;
            v4121[1] = v4102;
            v4121[2] = v4103;
            *v4121 = v4098;
            v4122 = (int8x16_t *)&v4090[2 * v4127];
            v4110.i64[1] = v4111;
            v4107.i64[1] = v4112;
            v4108.i64[1] = v4113;
            v4122[1] = v4107;
            v4122[2] = v4110;
            *v4122 = v4108;
            v4123 = (int8x16_t *)((char *)v4090 + 40 * v4127);
            v4115.i64[1] = v4116;
            v4114.i64[1] = v4117;
            v4109.i64[1] = v4118;
            v4088 += 4;
            v4123[1] = v4114;
            v4123[2] = v4115;
            *v4123 = v4109;
          }
          while (v4088 != v4087);
          v4081 = *(unsigned int *)(a1 + 5028);
        }
        ++v4082;
        ++v4083;
      }
      while (v4082 < v4081);
    }
    v4144 = *(unsigned int *)(a1 + 6036);
    if ((_DWORD)v4144)
    {
      v4145 = 0;
      v4146 = *(unsigned int **)(a1 + 10616);
      do
      {
        v4147 = *(_QWORD *)(*(_QWORD *)(a1 + 6144) + 8 * v4145);
        if (v4147)
        {
          v4148 = *(_QWORD *)(a1 + 6112);
          v4149 = (*(_DWORD *)(a1 + 6136) * v4145);
          v4150 = (unsigned int *)(v4148 + 16 * (v4147 + v4149));
          v4151 = (unsigned int *)(v4148 + 16 * v4149);
          do
          {
            while (1)
            {
              v4167 = *v4146;
              v4168 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4151);
              v4169 = *(_QWORD *)(a1 + 6040) + 8 * *((_QWORD *)v4151 + 1);
              v4170 = *v6;
              v4171 = *(_QWORD *)(a1 + 20040);
              if (*v4146 >= v4168)
                break;
              v4152 = *(int64x2_t *)v4169;
              v4153 = (int64x2_t *)(v4171 + 8 * (v4168 + (_DWORD)v4170 * v4167));
              v4154 = *(int64x2_t *)(v4169 + 32);
              v4155 = *(_OWORD *)(v4169 + 48);
              v4156 = *(_OWORD *)(v4169 + 64);
              v4157 = *(_OWORD *)(v4169 + 80);
              v4158 = *(int64x2_t *)(v4169 + 96);
              v4159 = *(int64x2_t *)(v4169 + 112);
              v4160 = *(int64x2_t *)(v4169 + 128);
              v4161 = *(_OWORD *)(v4169 + 144);
              v4162 = *(_OWORD *)(v4169 + 160);
              v4163 = *(_OWORD *)(v4169 + 176);
              v4153[1] = *(int64x2_t *)(v4169 + 16);
              v4153[2] = v4154;
              *v4153 = v4152;
              v4164 = &v4153->i8[8 * v4170];
              *((_OWORD *)v4164 + 1) = v4156;
              *((_OWORD *)v4164 + 2) = v4157;
              *(_OWORD *)v4164 = v4155;
              v4165 = &v4153[v4170];
              v4165[1] = v4159;
              v4165[2] = v4160;
              *v4165 = v4158;
              v4166 = &v4153->i8[24 * v4170];
              *((_OWORD *)v4166 + 1) = v4162;
              *((_OWORD *)v4166 + 2) = v4163;
              *(_OWORD *)v4166 = v4161;
              v4151 += 4;
              if (v4151 == v4150)
                goto LABEL_920;
            }
            v4172 = *(int64x2_t *)(v4169 + 16);
            v4173 = (int64x2_t *)(v4171 + 8 * (v4167 + (_DWORD)v4170 * v4168));
            v4175 = *(int64x2_t *)(v4169 + 64);
            v4174 = *(int64x2_t *)(v4169 + 80);
            v4176 = *(int64x2_t *)(v4169 + 32);
            v4177 = *(int64x2_t *)(v4169 + 48);
            v4179 = *(int64x2_t *)(v4169 + 96);
            v4178 = *(int64x2_t *)(v4169 + 112);
            v4181 = *(int64x2_t *)(v4169 + 160);
            v4180 = *(int64x2_t *)(v4169 + 176);
            v4182 = *(int64x2_t *)(v4169 + 128);
            v4183 = *(int64x2_t *)(v4169 + 144);
            v4184 = vzip2q_s64(*(int64x2_t *)v4169, v4177);
            *v4173 = vzip1q_s64(*(int64x2_t *)v4169, v4177);
            v4173[1] = vzip1q_s64(v4179, v4183);
            v4185 = (int64x2_t *)((char *)v4173 + 8 * v4170);
            *v4185 = v4184;
            v4185[1] = vzip2q_s64(v4179, v4183);
            v4186 = &v4173[v4170];
            *v4186 = vzip1q_s64(v4172, v4175);
            v4186[1] = vzip1q_s64(v4178, v4181);
            v4187 = (int64x2_t *)((char *)v4173 + 24 * v4170);
            *v4187 = vzip2q_s64(v4172, v4175);
            v4187[1] = vzip2q_s64(v4178, v4181);
            v4188 = &v4173[2 * v4170];
            *v4188 = vzip1q_s64(v4176, v4174);
            v4188[1] = vzip1q_s64(v4182, v4180);
            v4189 = (int64x2_t *)((char *)v4173 + 40 * v4170);
            *v4189 = vzip2q_s64(v4176, v4174);
            v4189[1] = vzip2q_s64(v4182, v4180);
            v4151 += 4;
          }
          while (v4151 != v4150);
LABEL_920:
          v4144 = *(unsigned int *)(a1 + 6036);
        }
        ++v4145;
        ++v4146;
      }
      while (v4145 < v4144);
    }
    v4190 = *(unsigned int *)(a1 + 7044);
    if ((_DWORD)v4190)
    {
      v4191 = 0;
      v4192 = *(unsigned int **)(a1 + 10640);
      do
      {
        v4193 = *(_QWORD *)(*(_QWORD *)(a1 + 7152) + 8 * v4191);
        if (v4193)
        {
          v4194 = *(_QWORD *)(a1 + 7120);
          v4195 = (*(_DWORD *)(a1 + 7144) * v4191);
          v4196 = (unsigned int *)(v4194 + 16 * (v4193 + v4195));
          v4197 = (unsigned int *)(v4194 + 16 * v4195);
          do
          {
            while (1)
            {
              v4213 = *v4192;
              v4214 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4197);
              v4215 = *(_QWORD *)(a1 + 7048) + 8 * *((_QWORD *)v4197 + 1);
              v4216 = *v6;
              v4217 = *(_QWORD *)(a1 + 20040);
              if (*v4192 >= v4214)
                break;
              v4198 = *(int64x2_t *)v4215;
              v4199 = (int64x2_t *)(v4217 + 8 * (v4214 + (_DWORD)v4216 * v4213));
              v4200 = *(int64x2_t *)(v4215 + 32);
              v4201 = *(_OWORD *)(v4215 + 48);
              v4202 = *(_OWORD *)(v4215 + 64);
              v4203 = *(_OWORD *)(v4215 + 80);
              v4204 = *(int64x2_t *)(v4215 + 96);
              v4205 = *(int64x2_t *)(v4215 + 112);
              v4206 = *(int64x2_t *)(v4215 + 128);
              v4207 = *(_OWORD *)(v4215 + 144);
              v4208 = *(_OWORD *)(v4215 + 160);
              v4209 = *(_OWORD *)(v4215 + 176);
              v4199[1] = *(int64x2_t *)(v4215 + 16);
              v4199[2] = v4200;
              *v4199 = v4198;
              v4210 = &v4199->i8[8 * v4216];
              *((_OWORD *)v4210 + 1) = v4202;
              *((_OWORD *)v4210 + 2) = v4203;
              *(_OWORD *)v4210 = v4201;
              v4211 = &v4199[v4216];
              v4211[1] = v4205;
              v4211[2] = v4206;
              *v4211 = v4204;
              v4212 = &v4199->i8[24 * v4216];
              *((_OWORD *)v4212 + 1) = v4208;
              *((_OWORD *)v4212 + 2) = v4209;
              *(_OWORD *)v4212 = v4207;
              v4197 += 4;
              if (v4197 == v4196)
                goto LABEL_930;
            }
            v4218 = *(int64x2_t *)(v4215 + 16);
            v4219 = (int64x2_t *)(v4217 + 8 * (v4213 + (_DWORD)v4216 * v4214));
            v4221 = *(int64x2_t *)(v4215 + 64);
            v4220 = *(int64x2_t *)(v4215 + 80);
            v4222 = *(int64x2_t *)(v4215 + 32);
            v4223 = *(int64x2_t *)(v4215 + 48);
            v4225 = *(int64x2_t *)(v4215 + 96);
            v4224 = *(int64x2_t *)(v4215 + 112);
            v4227 = *(int64x2_t *)(v4215 + 160);
            v4226 = *(int64x2_t *)(v4215 + 176);
            v4228 = *(int64x2_t *)(v4215 + 128);
            v4229 = *(int64x2_t *)(v4215 + 144);
            v4230 = vzip2q_s64(*(int64x2_t *)v4215, v4223);
            *v4219 = vzip1q_s64(*(int64x2_t *)v4215, v4223);
            v4219[1] = vzip1q_s64(v4225, v4229);
            v4231 = (int64x2_t *)((char *)v4219 + 8 * v4216);
            *v4231 = v4230;
            v4231[1] = vzip2q_s64(v4225, v4229);
            v4232 = &v4219[v4216];
            *v4232 = vzip1q_s64(v4218, v4221);
            v4232[1] = vzip1q_s64(v4224, v4227);
            v4233 = (int64x2_t *)((char *)v4219 + 24 * v4216);
            *v4233 = vzip2q_s64(v4218, v4221);
            v4233[1] = vzip2q_s64(v4224, v4227);
            v4234 = &v4219[2 * v4216];
            *v4234 = vzip1q_s64(v4222, v4220);
            v4234[1] = vzip1q_s64(v4228, v4226);
            v4235 = (int64x2_t *)((char *)v4219 + 40 * v4216);
            *v4235 = vzip2q_s64(v4222, v4220);
            v4235[1] = vzip2q_s64(v4228, v4226);
            v4197 += 4;
          }
          while (v4197 != v4196);
LABEL_930:
          v4190 = *(unsigned int *)(a1 + 7044);
        }
        ++v4191;
        ++v4192;
      }
      while (v4191 < v4190);
    }
    v4236 = *(unsigned int *)(a1 + 8052);
    if ((_DWORD)v4236)
    {
      v4237 = 0;
      v4238 = *(unsigned int **)(a1 + 10664);
      do
      {
        v4239 = *(_QWORD *)(*(_QWORD *)(a1 + 8160) + 8 * v4237);
        if (v4239)
        {
          v4240 = *(_QWORD *)(a1 + 8128);
          v4241 = (*(_DWORD *)(a1 + 8152) * v4237);
          v4242 = (unsigned int *)(v4240 + 16 * (v4239 + v4241));
          v4243 = (unsigned int *)(v4240 + 16 * v4241);
          do
          {
            while (1)
            {
              v4255 = *v4238;
              v4256 = *(_DWORD *)(*(_QWORD *)(a1 + 10520) + 4 * *v4243);
              v4257 = *(_QWORD *)(a1 + 8056) + 8 * *((_QWORD *)v4243 + 1);
              v4258 = *v6;
              v4259 = *(_QWORD *)(a1 + 20040);
              if (*v4238 >= v4256)
                break;
              v4244 = *(int64x2_t *)v4257;
              v4245 = (int64x2_t *)(v4259 + 8 * (v4256 + (_DWORD)v4258 * v4255));
              v4246 = *(int64x2_t *)(v4257 + 32);
              v4247 = *(_OWORD *)(v4257 + 48);
              v4248 = *(_OWORD *)(v4257 + 64);
              v4249 = *(_OWORD *)(v4257 + 80);
              v4250 = *(int64x2_t *)(v4257 + 96);
              v4251 = *(int64x2_t *)(v4257 + 112);
              v4252 = *(int64x2_t *)(v4257 + 128);
              v4245[1] = *(int64x2_t *)(v4257 + 16);
              v4245[2] = v4246;
              *v4245 = v4244;
              v4253 = &v4245->i8[8 * v4258];
              *((_OWORD *)v4253 + 1) = v4248;
              *((_OWORD *)v4253 + 2) = v4249;
              *(_OWORD *)v4253 = v4247;
              v4254 = &v4245[v4258];
              v4254[1] = v4251;
              v4254[2] = v4252;
              *v4254 = v4250;
              v4243 += 4;
              if (v4243 == v4242)
                goto LABEL_940;
            }
            v4260 = *(int64x2_t *)(v4257 + 16);
            v4261 = (int64x2_t *)(v4259 + 8 * (v4255 + (_DWORD)v4258 * v4256));
            v4263 = *(int64x2_t *)(v4257 + 64);
            v4262 = *(int64x2_t *)(v4257 + 80);
            v4264 = *(int64x2_t *)(v4257 + 32);
            v4265 = *(int64x2_t *)(v4257 + 48);
            v4267 = *(_OWORD *)(v4257 + 112);
            v4266 = *(_OWORD *)(v4257 + 128);
            v4268 = *(_OWORD *)(v4257 + 96);
            v4269 = vzip1q_s64(*(int64x2_t *)v4257, v4265);
            v4270 = vzip2q_s64(*(int64x2_t *)v4257, v4265);
            v4261[1].i64[0] = v4268;
            *v4261 = v4269;
            v4271 = (int64x2_t *)((char *)v4261 + 8 * v4258);
            *v4271 = v4270;
            v4271[1].i64[0] = *((_QWORD *)&v4268 + 1);
            v4272 = &v4261[v4258];
            v4272[1].i64[0] = v4267;
            *v4272 = vzip1q_s64(v4260, v4263);
            v4273 = (int64x2_t *)((char *)v4261 + 24 * v4258);
            v4273[1].i64[0] = *((_QWORD *)&v4267 + 1);
            *v4273 = vzip2q_s64(v4260, v4263);
            v4274 = &v4261[2 * v4258];
            v4274[1].i64[0] = v4266;
            *v4274 = vzip1q_s64(v4264, v4262);
            v4275 = (int64x2_t *)((char *)v4261 + 40 * v4258);
            v4275[1].i64[0] = *((_QWORD *)&v4266 + 1);
            *v4275 = vzip2q_s64(v4264, v4262);
            v4243 += 4;
          }
          while (v4243 != v4242);
LABEL_940:
          v4236 = *(unsigned int *)(a1 + 8052);
        }
        ++v4237;
        ++v4238;
      }
      while (v4237 < v4236);
    }
  }
  if (*(_BYTE *)(a1 + 1888))
  {
    v4276 = *(_DWORD *)(a1 + 1904);
    if (v4276 == 1)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 160))(a1, a2);
      v4284 = *v6;
      LODWORD(v4283) = *(_DWORD *)(a1 + 20060);
      if (v4283 >= *v6)
        v4283 = v4284;
      else
        v4283 = v4283;
      if ((_DWORD)v4283)
      {
        v4285 = 0;
        v4286 = *(double *)(a1 + 1896);
        v4287 = (double *)*a2;
        v4288 = v4284 + 1;
        v4289 = (double *)*v7;
        do
        {
          v4290 = *v4287++;
          v4289[v4285] = v4286 * v4290 + v4289[v4285];
          v4285 += v4288;
          --v4283;
        }
        while (v4283);
      }
    }
    else if (!v4276)
    {
      v4278 = *v6;
      LODWORD(v4277) = *(_DWORD *)(a1 + 20060);
      v4277 = v4277 >= *v6 ? v4278 : v4277;
      if ((_DWORD)v4277)
      {
        v4279 = 0;
        v4280 = *(double *)(a1 + 1896);
        v4281 = v4278 + 1;
        v4282 = (double *)*v7;
        do
        {
          v4282[v4279] = v4280 + v4282[v4279];
          v4279 += v4281;
          --v4277;
        }
        while (v4277);
      }
    }
  }
  v4291 = *v6;
  *((_DWORD *)a2 + 4) = v4291;
  if ((unint64_t)a2[1] < v4291)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v4292 = (8 * v4291 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v4292 >> 3);
    *a2 = operator new(v4292, (std::align_val_t)0x20uLL);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2);
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 1877) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_20F64A974(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EDB4044(v1 - 130);
  _Unwind_Resume(a1);
}

void sub_20F64A98C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EDB4004(v1 - 129);
  _Unwind_Resume(a1);
}

uint64_t sub_20F64A9A0(uint64_t a1)
{
  return a1 + 20064;
}

double sub_20F64A9AC(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  _QWORD *v4;
  float64x2_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double *v11;
  unint64_t v12;
  double *v13;
  double result;
  unint64_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t *v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  float64x2_t *v27;
  uint64_t i;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  float64x2_t *v48;
  float64x2_t *v49;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  uint64_t v63;
  double *v64;
  double v65;

  if (!(((*(_QWORD *)(a1 + 18448) - *(_QWORD *)(a1 + 18440)) >> 2)
       + ((*(_QWORD *)(a1 + 18424) - *(_QWORD *)(a1 + 18416)) >> 2)
       + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
       + ((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
       + ((*(_QWORD *)(a1 + 18520) - *(_QWORD *)(a1 + 18512)) >> 2)
       + ((*(_QWORD *)(a1 + 18544) - *(_QWORD *)(a1 + 18536)) >> 2)
       + ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2)))
    return 0.0;
  v2 = (unsigned int *)(a1 + 19672);
  v3 = a1 + 18416;
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 10856) + 32))(a1 + 10856);
  sub_20F5BC34C(v4, a1 + 19752, v3, a1 + 10864, v5);
  sub_20F5BBBDC((_QWORD *)(a1 + 10968), (void **)(a1 + 19656));
  sub_20F20B6B0(a1 + 19656);
  v6 = v2[24];
  if (!(_DWORD)v6)
    return -0.0;
  v7 = *(double **)(a1 + 19752);
  v8 = *(double **)(a1 + 10888);
  v9 = *v7;
  v10 = *v7 * *v8;
  if ((_DWORD)v6 != 1)
  {
    v11 = v7 + 1;
    v12 = (v6 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 < 3)
    {
      v13 = *(double **)(a1 + 10888);
LABEL_12:
      v22 = v13 + 1;
      do
      {
        v23 = *v11++;
        v24 = v23;
        v25 = *v22++;
        v10 = v10 + v24 * v25;
      }
      while (v11 != &v7[v6]);
      goto LABEL_14;
    }
    v15 = v12 + 1;
    v16 = (v12 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v11 += v16;
    v13 = &v8[v16];
    v17 = (float64x2_t *)(v8 + 3);
    v18 = (float64x2_t *)(v7 + 3);
    v19 = v16;
    do
    {
      v20 = vmulq_f64(v18[-1], v17[-1]);
      v21 = vmulq_f64(*v18, *v17);
      v10 = v10 + v20.f64[0] + v20.f64[1] + v21.f64[0] + v21.f64[1];
      v17 += 2;
      v18 += 2;
      v19 -= 4;
    }
    while (v19);
    if (v15 != v16)
      goto LABEL_12;
  }
LABEL_14:
  result = -v10;
  v26 = *v2;
  if (!(_DWORD)v26)
  {
    if (v6 >= 4)
    {
      v29 = v6 & 0xFFFFFFFC;
      v58 = (float64x2_t *)(v7 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v60 = v29;
      do
      {
        v61 = vmulq_f64(vmulq_f64(v58[-1], _Q1), (float64x2_t)0);
        v62 = vmulq_f64(vmulq_f64(*v58, _Q1), (float64x2_t)0);
        result = result + v61.f64[0] + v61.f64[1] + v62.f64[0] + v62.f64[1];
        v58 += 2;
        v60 -= 4;
      }
      while (v60);
      if (v29 == v6)
        return result;
    }
    else
    {
      v29 = 0;
    }
    v63 = v6 - v29;
    v64 = &v7[v29];
    do
    {
      v65 = *v64++;
      result = result + v65 * 0.5 * 0.0;
      --v63;
    }
    while (v63);
    return result;
  }
  v27 = *(float64x2_t **)(a1 + 19656);
  if ((_DWORD)v26 != 1)
  {
    v30 = 0;
    v31 = 0;
    v32 = (v26 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v33 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v34 = &v27->f64[(v26 * v31)];
      v36 = *v34;
      v35 = v34 + 1;
      v37 = v9 * v36;
      if (v32 >= 3)
      {
        v35 += v33;
        v39 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v40 = (float64x2_t *)(v7 + 3);
        v41 = (float64x2_t *)((char *)v27 + 8 * v30 + 24);
        do
        {
          v42 = vmulq_f64(v41[-1], v40[-1]);
          v43 = vmulq_f64(*v41, *v40);
          v37 = v37 + v42.f64[0] + v42.f64[1] + v43.f64[0] + v43.f64[1];
          v40 += 2;
          v41 += 2;
          v39 -= 4;
        }
        while (v39);
        v38 = &v7[v33];
        if (v32 + 1 == v33)
          goto LABEL_21;
      }
      else
      {
        v38 = *(double **)(a1 + 19752);
      }
      v44 = v38 + 1;
      do
      {
        v45 = *v35++;
        v46 = v45;
        v47 = *v44++;
        v37 = v37 + v46 * v47;
      }
      while (v35 != &v27->f64[(v26 * v31) + v26]);
LABEL_21:
      result = result + v7[v31++] * 0.5 * v37;
      v30 += v26;
      if (v31 == v6)
        return result;
    }
  }
  if (v6 < 4)
  {
    for (i = 0; i != v6; ++i)
LABEL_33:
      result = result + v7[i] * 0.5 * (v9 * v27->f64[i]);
    return result;
  }
  i = v6 & 0xFFFFFFFC;
  v48 = (float64x2_t *)(v7 + 2);
  v49 = v27 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v55 = i;
  do
  {
    v56 = vmulq_f64(vmulq_f64(v48[-1], _Q2), vmulq_n_f64(v49[-1], v9));
    v57 = vmulq_f64(vmulq_f64(*v48, _Q2), vmulq_n_f64(*v49, v9));
    result = result + v56.f64[0] + v56.f64[1] + v57.f64[0] + v57.f64[1];
    v48 += 2;
    v49 += 2;
    v55 -= 4;
  }
  while (v55);
  if (i != v6)
    goto LABEL_33;
  return result;
}

double sub_20F64ADD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t k;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  uint64_t v29;
  uint64_t n;
  uint64_t v36;
  uint64_t ii;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  double v58;

  v2 = a1[16];
  v3 = a1[17];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v54 = 3;
      v55 = v5 + 32;
      v56 = 0;
      v58 = 0.0;
      v57 = 0uLL;
      sub_20F053450(&v54, (double *)&v57);
      _V1.D[1] = *((_QWORD *)&v57 + 1);
      _D5 = *((_QWORD *)&v57 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[28]; j != a1[29]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  for (k = a1[40]; k != a1[41]; k += 16)
  {
    v26 = *(_QWORD *)(k + 8);
    if ((*(_BYTE *)(v26 + 4) & 2) == 0 && *(_BYTE *)(v26 + 20))
      i = i + *(double *)(v26 + 32) * *(double *)(v26 + 32);
  }
  v27 = a1[52];
  for (m = a1[53]; v27 != m; v27 += 16)
  {
    v29 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v29 + 4) & 2) == 0 && *(_BYTE *)(v29 + 20))
    {
      v54 = 3;
      v55 = v29 + 32;
      v56 = 0;
      v58 = 0.0;
      v57 = 0uLL;
      sub_20F053450(&v54, (double *)&v57);
      _V1.D[1] = *((_QWORD *)&v57 + 1);
      _D5 = *((_QWORD *)&v57 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v29 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v29 + 120) * *(double *)(v29 + 120);
    }
  }
  for (n = a1[64]; n != a1[65]; n += 16)
  {
    v36 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v36 + 4) & 2) == 0 && *(_BYTE *)(v36 + 20))
    {
      _Q1 = *(_OWORD *)(v36 + 32);
      _D3 = *(_QWORD *)(v36 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v36 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (ii = a1[76]; ii != a1[77]; ii += 16)
  {
    v42 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v42 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v47 = a1[88];
  v48 = a1[89];
  while (v47 != v48)
  {
    v49 = *(_QWORD *)(v47 + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      v57 = 0uLL;
      v58 = 0.0;
      sub_20E9733B8((float64x2_t *)(v49 + 32), (double *)&v57);
      _V1.D[1] = *((_QWORD *)&v57 + 1);
      _D3 = *((_QWORD *)&v57 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v58 * v58;
    }
    v47 += 16;
  }
  return i;
}

uint64_t sub_20F64B0E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double *v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  __int128 *v16;
  _QWORD *v17;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  __int128 *v52;
  _QWORD *v53;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  float64x2_t v93;
  float64x2_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t i;
  unsigned int *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  float64x2_t v102;
  double v106;
  __double2 v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  float64x2_t v120;
  double v121;
  float64x2_t v122;
  double v123;
  float64x2_t v124;
  float64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  float64x2_t *v128;
  uint64_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  uint64_t v136;
  float64x2_t v137;
  float64x2_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t j;
  unsigned int *v148;
  uint64_t v149;
  float64x2_t v150;
  __int128 v151;
  uint64_t v152;
  double v156;
  __double2 v157;
  float64x2_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  double v172;
  float64x2_t v173;
  double v174;
  float64x2_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t *v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  float64x2_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  float64x2_t v201;
  float64x2_t *v202;
  __n128 v203;
  uint64_t **v204;
  float64x2_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  uint64_t result;
  float64x2_t v212;
  float64x2_t v213;
  double v214;
  double v215;

  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 10224);
  v5 = *(_QWORD *)(a1 + 10232);
  if (v4 != v5)
  {
    v6 = *a2;
    do
    {
      v8 = *(double **)v4;
      if (**(_DWORD **)v4 != -1)
      {
        v9 = *(double *)(v4 + 16);
        v10 = *(_QWORD **)(v4 + 96);
        v11 = *(_QWORD *)(v4 + 24);
        v12 = *(_QWORD *)(v4 + 40);
        if (v12)
        {
          v13 = v10[31];
          v14 = (unsigned int *)(v13 + 16 * (v12 + v11));
          v15 = (unsigned int *)(v13 + 16 * v11);
          do
          {
            v16 = (__int128 *)(v10[3] + 8 * *((_QWORD *)v15 + 1));
            v17 = (_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10520) + 4 * *v15));
            _Q2 = v16[1];
            _Q1 = v16[2];
            _Q3 = *v16;
            _D5 = v17[1];
            __asm { FMLA            D7, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = v17[3];
            __asm { FMLA            D7, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = v17[5];
            __asm { FMLA            D7, D2, V1.D[1] }
            v9 = v9 - _D7;
            v15 += 4;
          }
          while (v15 != v14);
        }
        v29 = *(_QWORD *)(v4 + 48);
        if (v29)
        {
          v30 = v10[34];
          v31 = (unsigned int *)(v30 + 16 * (v29 + v11));
          v32 = (unsigned int *)(v30 + 16 * v11);
          do
          {
            v33 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10544) + 4 * *v32);
            v34 = v10[6] + 8 * *((_QWORD *)v32 + 1);
            _Q3 = *(_OWORD *)v34;
            _Q2 = *(_OWORD *)(v34 + 16);
            _Q16 = *(_OWORD *)(v34 + 32);
            _Q7 = *(_OWORD *)(v34 + 48);
            _D5 = *(_QWORD *)(v33 + 8);
            __asm { FMLA            D6, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v33 + 24);
            __asm { FMLA            D6, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v33 + 40);
            __asm { FMLA            D6, D2, V16.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v33 + 56);
            __asm { FMLA            D6, D3, V7.D[1] }
            v9 = v9 - (_D6 + *(double *)(v34 + 64) * *(double *)(v33 + 64));
            v32 += 4;
          }
          while (v32 != v31);
        }
        v44 = *(_QWORD *)(v4 + 56);
        if (v44)
        {
          v45 = v10[37];
          v46 = (unsigned int *)(v45 + 16 * (v44 + v11));
          v47 = (unsigned int *)(v45 + 16 * v11);
          do
          {
            v9 = v9
               - *(double *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10568) + 4 * *v47))
               * *(double *)(v10[9] + 8 * *((_QWORD *)v47 + 1));
            v47 += 4;
          }
          while (v47 != v46);
        }
        v48 = *(_QWORD *)(v4 + 64);
        if (v48)
        {
          v49 = v10[40];
          v50 = (unsigned int *)(v49 + 16 * (v48 + v11));
          v51 = (unsigned int *)(v49 + 16 * v11);
          do
          {
            v52 = (__int128 *)(v10[12] + 8 * *((_QWORD *)v51 + 1));
            v53 = (_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10592) + 4 * *v51));
            _Q2 = v52[1];
            _Q1 = v52[2];
            _Q3 = *v52;
            _D5 = v53[1];
            __asm { FMLA            D7, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = v53[3];
            __asm { FMLA            D7, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = v53[5];
            __asm { FMLA            D7, D2, V1.D[1] }
            v9 = v9 - _D7;
            v51 += 4;
          }
          while (v51 != v50);
        }
        v61 = *(_QWORD *)(v4 + 72);
        if (v61)
        {
          v62 = v10[43];
          v63 = (unsigned int *)(v62 + 16 * (v61 + v11));
          v64 = (unsigned int *)(v62 + 16 * v11);
          do
          {
            v65 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10616) + 4 * *v64);
            v66 = (__int128 *)(v10[15] + 8 * *((_QWORD *)v64 + 1));
            _Q2 = *v66;
            _Q1 = v66[1];
            _D4 = *(_QWORD *)(v65 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v65 + 24);
            __asm { FMLA            D5, D2, V1.D[1] }
            v9 = v9 - _D5;
            v64 += 4;
          }
          while (v64 != v63);
        }
        v72 = *(_QWORD *)(v4 + 80);
        if (v72)
        {
          v73 = v10[46];
          v74 = (unsigned int *)(v73 + 16 * (v72 + v11));
          v75 = (unsigned int *)(v73 + 16 * v11);
          do
          {
            v76 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10640) + 4 * *v75);
            v77 = (__int128 *)(v10[18] + 8 * *((_QWORD *)v75 + 1));
            _Q2 = *v77;
            _Q1 = v77[1];
            _D4 = *(_QWORD *)(v76 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v76 + 24);
            __asm { FMLA            D5, D2, V1.D[1] }
            v9 = v9 - _D5;
            v75 += 4;
          }
          while (v75 != v74);
        }
        v83 = *(_QWORD *)(v4 + 88);
        if (v83)
        {
          v84 = v10[49];
          v85 = (unsigned int *)(v84 + 16 * (v83 + v11));
          v86 = (unsigned int *)(v84 + 16 * v11);
          v87 = v10[21];
          do
          {
            v88 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10664) + 4 * *v86);
            v89 = (double *)(v87 + 8 * *((_QWORD *)v86 + 1));
            _Q2 = *(_OWORD *)v89;
            _D4 = *(_QWORD *)(v88 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            v9 = v9 - (_D5 + v89[2] * *(double *)(v88 + 16));
            v86 += 4;
          }
          while (v86 != v85);
        }
        v7 = v8[4];
        v8[4] = v7 + v9 * *(double *)(v4 + 8);
        v8[5] = v7;
      }
      v4 += 104;
    }
    while (v4 != v5);
  }
  kdebug_trace();
  kdebug_trace();
  v95 = *(_QWORD **)(a1 + 9616);
  v96 = v95[1];
  for (i = v95[2]; v96 != i; v96 += 16)
  {
    v98 = *(unsigned int **)(v96 + 8);
    v99 = *v98;
    if ((_DWORD)v99 != -1)
    {
      v102 = *((float64x2_t *)v98 + 2);
      *(_OWORD *)(v98 + 50) = *((_OWORD *)v98 + 3);
      v100 = *((_OWORD *)v98 + 5);
      *(_OWORD *)(v98 + 54) = *((_OWORD *)v98 + 4);
      *(_OWORD *)(v98 + 58) = v100;
      *((_QWORD *)v98 + 31) = *((_QWORD *)v98 + 12);
      *(float64x2_t *)(v98 + 46) = v102;
      *((_OWORD *)v98 + 16) = *(_OWORD *)(v98 + 26);
      *((_QWORD *)v98 + 34) = *((_QWORD *)v98 + 15);
      v101 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10520) + 4 * v99);
      v102.f64[0] = *(float64_t *)(v101 + 16);
      _Q2 = *(float64x2_t *)v101;
      _D3 = *(_QWORD *)(v101 + 8);
      __asm { FMLA            D0, D3, V2.D[1] }
      v106 = sqrt(_D0 + v102.f64[0] * v102.f64[0]);
      v93.f64[0] = 1.0 / v106;
      if (v106 == 0.0)
        v93.f64[0] = 1.0;
      v212 = vmulq_n_f64(_Q2, v93.f64[0]);
      v214 = vmulq_f64(v102, v93).f64[0];
      v107 = __sincos_stret(v106);
      v94 = v212;
      v93.f64[0] = v107.__cosval + (1.0 - v107.__cosval) * vmuld_n_f64(v94.f64[0], v94.f64[0]);
      v108 = (1.0 - v107.__cosval) * vmuld_lane_f64(v94.f64[0], v94, 1);
      v109 = v108 - v107.__sinval * v214;
      v110 = (1.0 - v107.__cosval) * vmuld_n_f64(v212.f64[0], v214);
      v111 = vmuld_lane_f64(v107.__sinval, v212, 1);
      v112 = v111 + v110;
      v113 = v107.__sinval * v214 + v108;
      v114 = v107.__cosval + (1.0 - v107.__cosval) * vmuld_lane_f64(v212.f64[1], v212, 1);
      v115 = (1.0 - v107.__cosval) * vmuld_lane_f64(v214, v212, 1);
      v94.f64[0] = v115 - v107.__sinval * v212.f64[0];
      v116 = v110 - v111;
      v117 = v107.__sinval * v212.f64[0] + v115;
      v118 = v107.__cosval + (1.0 - v107.__cosval) * vmuld_n_f64(v214, v214);
      v119 = *((double *)v98 + 6);
      v120 = *((float64x2_t *)v98 + 2);
      v121 = *((double *)v98 + 9);
      v122 = *(float64x2_t *)(v98 + 14);
      v123 = *((double *)v98 + 12);
      v124 = *((float64x2_t *)v98 + 5);
      *((float64x2_t *)v98 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v93.f64[0]), v122, v113), v124, v116);
      *((double *)v98 + 6) = v119 * v93.f64[0] + v121 * v113 + v123 * v116;
      *(float64x2_t *)(v98 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v109), v122, v114), v124, v117);
      *((double *)v98 + 9) = v119 * v109 + v121 * v114 + v123 * v117;
      *((float64x2_t *)v98 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v112), v122, v94.f64[0]), v124, v118);
      *((double *)v98 + 12) = v119 * v112 + v121 * v94.f64[0] + v123 * v118;
      v125.f64[0] = *((float64_t *)v98 + 15);
      v93.f64[0] = *(float64_t *)(v101 + 40);
      *(float64x2_t *)(v98 + 26) = vaddq_f64(*(float64x2_t *)(v98 + 26), *(float64x2_t *)(v101 + 24));
      *((_QWORD *)v98 + 15) = *(_OWORD *)&vaddq_f64(v125, v93);
      *((_BYTE *)v98 + 128) = 0;
    }
  }
  v126 = v95[13];
  v127 = v95[14];
  while (v126 != v127)
  {
    v128 = *(float64x2_t **)(v126 + 8);
    v129 = LODWORD(v128->f64[0]);
    if ((_DWORD)v129 != -1)
    {
      v130 = v128[3];
      v132 = v128[4];
      v131 = v128[5];
      v128[9] = v132;
      v128[10] = v131;
      v128[11].f64[0] = v128[6].f64[0];
      v133 = v128[2];
      v134 = v128[3];
      v135 = v133;
      v128[7] = v133;
      v128[8] = v134;
      v136 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10544) + 4 * v129);
      v133.f64[0] = v128[6].f64[0];
      v94.f64[0] = *(float64_t *)(v136 + 64);
      v137 = vaddq_f64(v128[5], *(float64x2_t *)(v136 + 48));
      v93 = vaddq_f64(v132, *(float64x2_t *)(v136 + 32));
      v138 = vaddq_f64(v130, *(float64x2_t *)(v136 + 16));
      v128[2] = vaddq_f64(v135, *(float64x2_t *)v136);
      v128[3] = v138;
      v128[4] = v93;
      v128[5] = v137;
      *(_QWORD *)&v128[6].f64[0] = *(_OWORD *)&vaddq_f64(v133, v94);
      LOBYTE(v128[6].f64[1]) = 0;
    }
    v126 += 16;
  }
  v139 = v95[25];
  v140 = v95[26];
  if (v139 != v140)
  {
    v141 = *a2;
    do
    {
      v142 = *(double **)(v139 + 8);
      v143 = *(unsigned int *)v142;
      if ((_DWORD)v143 != -1)
      {
        v144 = v142[4];
        v145 = *(unsigned int *)(*(_QWORD *)(a1 + 10568) + 4 * v143);
        v142[6] = v144;
        v142[4] = v144 + *(double *)(v141 + 8 * v145);
        *((_BYTE *)v142 + 40) = 0;
      }
      v139 += 16;
    }
    while (v139 != v140);
  }
  v146 = v95[37];
  for (j = v95[38]; v146 != j; v146 += 16)
  {
    v148 = *(unsigned int **)(v146 + 8);
    v149 = *v148;
    if ((_DWORD)v149 != -1)
    {
      v150 = *((float64x2_t *)v148 + 3);
      *(_OWORD *)(v148 + 34) = *((_OWORD *)v148 + 2);
      v151 = *((_OWORD *)v148 + 4);
      *(_OWORD *)(v148 + 46) = *((_OWORD *)v148 + 5);
      *(_OWORD *)(v148 + 42) = v151;
      *((_QWORD *)v148 + 25) = *((_QWORD *)v148 + 12);
      *(float64x2_t *)(v148 + 38) = v150;
      *((_OWORD *)v148 + 13) = *(_OWORD *)(v148 + 26);
      *((_QWORD *)v148 + 28) = *((_QWORD *)v148 + 15);
      if (*((_BYTE *)v148 + 20))
      {
        if (*((_BYTE *)v148 + 129))
        {
          v152 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10592) + 4 * v149);
          v150.f64[0] = *(float64_t *)(v152 + 16);
          _Q2 = *(float64x2_t *)v152;
          _D3 = *(_QWORD *)(v152 + 8);
          __asm { FMLA            D0, D3, V2.D[1] }
          v156 = sqrt(_D0 + v150.f64[0] * v150.f64[0]);
          v93.f64[0] = 1.0 / v156;
          if (v156 == 0.0)
            v93.f64[0] = 1.0;
          v213 = vmulq_n_f64(_Q2, v93.f64[0]);
          v215 = vmulq_f64(v150, v93).f64[0];
          v157 = __sincos_stret(v156);
          v158 = v213;
          v93.f64[0] = v157.__cosval + (1.0 - v157.__cosval) * vmuld_n_f64(v158.f64[0], v158.f64[0]);
          v159 = (1.0 - v157.__cosval) * vmuld_lane_f64(v158.f64[0], v158, 1);
          v160 = v159 - v157.__sinval * v215;
          v161 = (1.0 - v157.__cosval) * vmuld_n_f64(v213.f64[0], v215);
          v162 = vmuld_lane_f64(v157.__sinval, v213, 1);
          v163 = v162 + v161;
          v164 = v157.__sinval * v215 + v159;
          v165 = v157.__cosval + (1.0 - v157.__cosval) * vmuld_lane_f64(v213.f64[1], v213, 1);
          v166 = (1.0 - v157.__cosval) * vmuld_lane_f64(v215, v213, 1);
          v158.f64[0] = v166 - v157.__sinval * v213.f64[0];
          v167 = v161 - v162;
          v168.f64[0] = v157.__sinval * v213.f64[0] + v166;
          v169 = v157.__cosval + (1.0 - v157.__cosval) * vmuld_n_f64(v215, v215);
          v170.f64[0] = *((float64_t *)v148 + 6);
          v171 = *((float64x2_t *)v148 + 2);
          v172 = *((double *)v148 + 9);
          v173 = *(float64x2_t *)(v148 + 14);
          v174 = *((double *)v148 + 12);
          v175 = *((float64x2_t *)v148 + 5);
          *((float64x2_t *)v148 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v93.f64[0]), v173, v164), v175, v167);
          *((double *)v148 + 6) = v170.f64[0] * v93.f64[0] + v172 * v164 + v174 * v167;
          *(float64x2_t *)(v148 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v160), v173, v165), v175, v168.f64[0]);
          *((double *)v148 + 9) = v170.f64[0] * v160 + v172 * v165 + v174 * v168.f64[0];
          *((float64x2_t *)v148 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v163), v173, v158.f64[0]), v175, v169);
          *((double *)v148 + 12) = v170.f64[0] * v163 + v172 * v158.f64[0] + v174 * v169;
          if (*((_BYTE *)v148 + 128))
          {
            v168.f64[0] = *((float64_t *)v148 + 15);
            v170.f64[0] = *(float64_t *)(v152 + 40);
            v93 = *(float64x2_t *)(v152 + 24);
            *(float64x2_t *)(v148 + 26) = vaddq_f64(*(float64x2_t *)(v148 + 26), v93);
            *((_QWORD *)v148 + 15) = *(_OWORD *)&vaddq_f64(v168, v170);
          }
        }
      }
    }
  }
  v176 = v95[49];
  v177 = v95[50];
  while (v176 != v177)
  {
    v178 = *(unsigned int **)(v176 + 8);
    v179 = *v178;
    if ((_DWORD)v179 != -1)
    {
      v180 = *((_OWORD *)v178 + 2);
      *(_OWORD *)(v178 + 42) = *((_OWORD *)v178 + 3);
      *(_OWORD *)(v178 + 38) = v180;
      *((_QWORD *)v178 + 23) = *((_QWORD *)v178 + 8);
      *((_BYTE *)v178 + 192) = *((_BYTE *)v178 + 72);
      if (*((_BYTE *)v178 + 20))
      {
        if (*((_BYTE *)v178 + 144))
        {
          v181 = (uint64_t)(v178 + 4);
          v182 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10616) + 4 * v179));
          v184 = *((float64x2_t *)v178 + 2);
          v185 = *((float64x2_t *)v178 + 3);
          v183 = (float64x2_t *)(v178 + 8);
          v186 = vaddq_f64(v185, v182[1]);
          *v183 = vaddq_f64(v184, *v182);
          v183[1] = v186;
          sub_20F6169C8(v181);
        }
      }
    }
    v176 += 16;
  }
  v187 = v95[61];
  v188 = v95[62];
  while (v187 != v188)
  {
    v189 = *(unsigned int **)(v187 + 8);
    v190 = *v189;
    if ((_DWORD)v190 != -1)
    {
      v191 = *((_OWORD *)v189 + 5);
      v192 = *((_OWORD *)v189 + 7);
      v193 = *((_OWORD *)v189 + 8);
      *(_OWORD *)(v189 + 98) = *((_OWORD *)v189 + 6);
      *(_OWORD *)(v189 + 102) = v192;
      v194 = *((float64x2_t *)v189 + 3);
      *(_OWORD *)(v189 + 90) = *((_OWORD *)v189 + 4);
      *(_OWORD *)(v189 + 94) = v191;
      v195 = *((_OWORD *)v189 + 9);
      v196 = *((_OWORD *)v189 + 11);
      v197 = *((_OWORD *)v189 + 12);
      *(_OWORD *)(v189 + 114) = *((_OWORD *)v189 + 10);
      *(_OWORD *)(v189 + 118) = v196;
      *(_OWORD *)(v189 + 106) = v193;
      *(_OWORD *)(v189 + 110) = v195;
      v198 = *((_OWORD *)v189 + 15);
      v199 = *((_OWORD *)v189 + 13);
      *(_OWORD *)(v189 + 130) = *((_OWORD *)v189 + 14);
      *(_OWORD *)(v189 + 134) = v198;
      *(_OWORD *)(v189 + 122) = v197;
      *(_OWORD *)(v189 + 126) = v199;
      v200 = *((_OWORD *)v189 + 3);
      v201 = *((float64x2_t *)v189 + 2);
      *(float64x2_t *)(v189 + 82) = v201;
      *(_OWORD *)(v189 + 86) = v200;
      v202 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 10640) + 4 * v190));
      v203 = (__n128)vaddq_f64(v194, v202[1]);
      *((float64x2_t *)v189 + 2) = vaddq_f64(v201, *v202);
      *((__n128 *)v189 + 3) = v203;
      v204 = (uint64_t **)*((_QWORD *)v189 + 37);
      if (v204)
      {
        v205 = (float64x2_t *)(v189 + 8);
        do
        {
          v203.n128_f64[0] = sub_20F6182A0((char *)v204[5], v205, v203);
          v204 = (uint64_t **)*v204;
        }
        while (v204);
      }
    }
    v187 += 16;
  }
  v206 = v95[73];
  v207 = v95[74];
  while (v206 != v207)
  {
    v208 = *(_QWORD *)(v206 + 8);
    if (*(_DWORD *)v208 != -1)
    {
      v209 = *(_OWORD *)(v208 + 80);
      *(_OWORD *)(v208 + 208) = *(_OWORD *)(v208 + 64);
      *(_OWORD *)(v208 + 224) = v209;
      *(_QWORD *)(v208 + 240) = *(_QWORD *)(v208 + 96);
      v210 = *(_OWORD *)(v208 + 48);
      *(_OWORD *)(v208 + 176) = *(_OWORD *)(v208 + 32);
      *(_OWORD *)(v208 + 192) = v210;
    }
    v206 += 16;
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 1874) = *(_BYTE *)(a1 + 1873);
  *(_BYTE *)(a1 + 1877) = 0;
  *(_WORD *)(a1 + 1872) = 0;
  *(_WORD *)(a1 + 1875) = 0;
  return result;
}

void sub_20F64BAE8(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

BOOL sub_20F64BB18(uint64_t a1, void **a2)
{
  int *v4;
  int v5;
  uint64_t v7;

  v4 = (int *)(a1 + 20128);
  v7 = a1 + 20040;
  sub_20F2C01AC(a1 + 20128, &v7);
  v5 = *v4;
  *(_BYTE *)(a1 + 1872) = *v4 == 0;
  if (v5)
    return 1;
  sub_20F2BFF60((uint64_t)v4, (uint64_t)a2, a2);
  return *(_BYTE *)(a1 + 1872) == 0;
}

uint64_t sub_20F64BBB0()
{
  return 1;
}

uint64_t sub_20F64BBB8()
{
  return 0;
}

void sub_20F64BBC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA01828;
  v2 = a1[2517];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *a1 = off_24CA01970;
  v3 = a1[2511];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[2508];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[2505];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  sub_20F64C590((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F64BC7C(uint64_t result, double a2, double a3, float64x2_t a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float64_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  uint64_t v33;
  unint64_t j;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t k;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  float64_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  uint64_t v53;
  unint64_t m;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float64_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  uint64_t v64;
  unint64_t n;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  float64_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  uint64_t v75;
  unint64_t ii;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  float64_t *v82;
  float64x2_t v83;
  double v84;

  v7 = *(unsigned int *)(result + 2000);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0.0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(result + 2112) + 8 * v8);
      if (v10)
      {
        v11 = (_QWORD *)(*(_QWORD *)(result + 2080) + 16 * (*(_DWORD *)(result + 2104) * v8) + 8);
        v12 = 16 * v10;
        while (1)
        {
          v13 = *((unsigned int *)v11 - 2);
          if (v8 <= v13)
            break;
          v11 += 2;
          v12 -= 16;
          if (!v12)
            goto LABEL_3;
        }
        if (v12)
        {
          if (v8 == v13)
          {
            v14 = *(_QWORD *)(result + 2008);
            if (v14)
            {
              v15 = (float64_t *)(v14 + 8 * *v11);
              v16.f64[0] = *v15;
              v17.f64[0] = v15[14];
              v18.f64[0] = v15[28];
              v16.f64[1] = v15[7];
              v18.f64[1] = v15[35];
              v17.f64[1] = v15[21];
              a4 = vabsq_f64(v17);
              v19 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v16), vabsq_f64(v18)), a4));
              if (v9 < v19)
                v9 = v19;
            }
          }
        }
      }
LABEL_3:
      ++v8;
    }
    while (v8 != v7);
  }
  else
  {
    v9 = 0.0;
  }
  v20 = *(unsigned int *)(result + 3152);
  if ((_DWORD)v20)
  {
    for (i = 0; i != v20; ++i)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(result + 3264) + 8 * i);
      if (v22)
      {
        v23 = (_QWORD *)(*(_QWORD *)(result + 3232) + 16 * (*(_DWORD *)(result + 3256) * i) + 8);
        v24 = 16 * v22;
        while (1)
        {
          v25 = *((unsigned int *)v23 - 2);
          if (i <= v25)
            break;
          v23 += 2;
          v24 -= 16;
          if (!v24)
            goto LABEL_18;
        }
        if (v24)
        {
          if (i == v25)
          {
            v26 = *(_QWORD *)(result + 3160);
            if (v26)
            {
              v27 = (float64_t *)(v26 + 8 * *v23);
              v28.f64[0] = *v27;
              v29.f64[0] = v27[20];
              v30.f64[0] = v27[40];
              v31.f64[0] = v27[60];
              v29.f64[1] = v27[30];
              v31.f64[1] = v27[70];
              v28.f64[1] = v27[10];
              a7.f64[0] = v27[80];
              v30.f64[1] = v27[50];
              *(_QWORD *)&a7.f64[0] = *(_OWORD *)&vabsq_f64(a7);
              a4 = vmaxnmq_f64(vabsq_f64(v29), vabsq_f64(v31));
              a7.f64[1] = NAN;
              v32 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v28), a7), vabsq_f64(v30)), a4));
              if (v9 < v32)
                v9 = v32;
            }
          }
        }
      }
LABEL_18:
      ;
    }
  }
  v33 = *(unsigned int *)(result + 4304);
  if ((_DWORD)v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(result + 4416) + 8 * j);
      if (v35)
      {
        v36 = (_QWORD *)(*(_QWORD *)(result + 4384) + 16 * (*(_DWORD *)(result + 4408) * j) + 8);
        v37 = 16 * v35;
        while (1)
        {
          v38 = *((unsigned int *)v36 - 2);
          if (j <= v38)
            break;
          v36 += 2;
          v37 -= 16;
          if (!v37)
            goto LABEL_32;
        }
        if (v37)
        {
          if (j == v38)
          {
            v39 = *(_QWORD *)(result + 4312);
            if (v39)
            {
              v40 = fabs(*(double *)(v39 + 8 * *v36));
              if (v9 < v40)
                v9 = v40;
            }
          }
        }
      }
LABEL_32:
      ;
    }
  }
  v41 = *(unsigned int *)(result + 5456);
  if ((_DWORD)v41)
  {
    for (k = 0; k != v41; ++k)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(result + 5568) + 8 * k);
      if (v43)
      {
        v44 = (_QWORD *)(*(_QWORD *)(result + 5536) + 16 * (*(_DWORD *)(result + 5560) * k) + 8);
        v45 = 16 * v43;
        while (1)
        {
          v46 = *((unsigned int *)v44 - 2);
          if (k <= v46)
            break;
          v44 += 2;
          v45 -= 16;
          if (!v45)
            goto LABEL_46;
        }
        if (v45)
        {
          if (k == v46)
          {
            v47 = *(_QWORD *)(result + 5464);
            if (v47)
            {
              v48 = (float64_t *)(v47 + 8 * *v44);
              v49.f64[0] = *v48;
              v50.f64[0] = v48[14];
              v51.f64[0] = v48[28];
              v49.f64[1] = v48[7];
              v51.f64[1] = v48[35];
              v50.f64[1] = v48[21];
              a4 = vabsq_f64(v50);
              v52 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v49), vabsq_f64(v51)), a4));
              if (v9 < v52)
                v9 = v52;
            }
          }
        }
      }
LABEL_46:
      ;
    }
  }
  v53 = *(unsigned int *)(result + 6608);
  if ((_DWORD)v53)
  {
    for (m = 0; m != v53; ++m)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(result + 6720) + 8 * m);
      if (v55)
      {
        v56 = (_QWORD *)(*(_QWORD *)(result + 6688) + 16 * (*(_DWORD *)(result + 6712) * m) + 8);
        v57 = 16 * v55;
        while (1)
        {
          v58 = *((unsigned int *)v56 - 2);
          if (m <= v58)
            break;
          v56 += 2;
          v57 -= 16;
          if (!v57)
            goto LABEL_60;
        }
        if (v57)
        {
          if (m == v58)
          {
            v59 = *(_QWORD *)(result + 6616);
            if (v59)
            {
              v60 = (float64_t *)(v59 + 8 * *v56);
              v61.f64[0] = *v60;
              v62.f64[0] = v60[10];
              v61.f64[1] = v60[5];
              v62.f64[1] = v60[15];
              a4 = vabsq_f64(v62);
              v63 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v61), a4));
              if (v9 < v63)
                v9 = v63;
            }
          }
        }
      }
LABEL_60:
      ;
    }
  }
  v64 = *(unsigned int *)(result + 7760);
  if ((_DWORD)v64)
  {
    for (n = 0; n != v64; ++n)
    {
      v66 = *(_QWORD *)(*(_QWORD *)(result + 7872) + 8 * n);
      if (v66)
      {
        v67 = (_QWORD *)(*(_QWORD *)(result + 7840) + 16 * (*(_DWORD *)(result + 7864) * n) + 8);
        v68 = 16 * v66;
        while (1)
        {
          v69 = *((unsigned int *)v67 - 2);
          if (n <= v69)
            break;
          v67 += 2;
          v68 -= 16;
          if (!v68)
            goto LABEL_74;
        }
        if (v68)
        {
          if (n == v69)
          {
            v70 = *(_QWORD *)(result + 7768);
            if (v70)
            {
              v71 = (float64_t *)(v70 + 8 * *v67);
              v72.f64[0] = *v71;
              v73.f64[0] = v71[10];
              v72.f64[1] = v71[5];
              v73.f64[1] = v71[15];
              a4 = vabsq_f64(v73);
              v74 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v72), a4));
              if (v9 < v74)
                v9 = v74;
            }
          }
        }
      }
LABEL_74:
      ;
    }
  }
  v75 = *(unsigned int *)(result + 8912);
  if ((_DWORD)v75)
  {
    for (ii = 0; ii != v75; ++ii)
    {
      v77 = *(_QWORD *)(*(_QWORD *)(result + 9024) + 8 * ii);
      if (v77)
      {
        v78 = (_QWORD *)(*(_QWORD *)(result + 8992) + 16 * (*(_DWORD *)(result + 9016) * ii) + 8);
        v79 = 16 * v77;
        while (1)
        {
          v80 = *((unsigned int *)v78 - 2);
          if (ii <= v80)
            break;
          v78 += 2;
          v79 -= 16;
          if (!v79)
            goto LABEL_88;
        }
        if (v79)
        {
          if (ii == v80)
          {
            v81 = *(_QWORD *)(result + 8920);
            if (v81)
            {
              v82 = (float64_t *)(v81 + 8 * *v78);
              v83.f64[0] = *v82;
              a4.f64[0] = v82[8];
              v83.f64[1] = v82[4];
              *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
              a4.f64[1] = NAN;
              v84 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v83), a4));
              if (v9 < v84)
                v9 = v84;
            }
          }
        }
      }
LABEL_88:
      ;
    }
  }
  return result;
}

uint64_t sub_20F64C184(uint64_t result, double a2)
{
  if (*(double *)(result + 1896) != a2)
    *(_BYTE *)(result + 1873) = 0;
  *(double *)(result + 1896) = a2;
  return result;
}

uint64_t sub_20F64C1A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 18584) = a2;
  return result;
}

uint64_t sub_20F64C1B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18584);
}

BOOL sub_20F64C1BC(_QWORD *a1)
{
  return ((a1[2306] - a1[2305]) >> 2)
       + ((a1[2303] - a1[2302]) >> 2)
       + ((a1[2309] - a1[2308]) >> 2)
       + ((a1[2312] - a1[2311]) >> 2)
       + ((a1[2315] - a1[2314]) >> 2)
       + ((a1[2318] - a1[2317]) >> 2)
       + ((a1[2321] - a1[2320]) >> 2) != 0;
}

uint64_t sub_20F64C24C(uint64_t a1)
{
  return a1 + 10888;
}

uint64_t sub_20F64C258(uint64_t a1)
{
  return a1 + 10888;
}

double sub_20F64C264(uint64_t a1, void **a2)
{
  unint64_t v4;
  size_t v5;
  double result;

  v4 = *(unsigned int *)(a1 + 1928);
  if (*((_DWORD *)a2 + 4) != (_DWORD)v4)
  {
    *((_DWORD *)a2 + 4) = v4;
    if ((unint64_t)a2[1] < v4)
    {
      if (*a2)
        MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *a2 = 0;
      a2[1] = (void *)(v5 >> 3);
      *a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  *(_QWORD *)&result = sub_20F618DF0((_QWORD *)(a1 + 10520), a1 + 1912, a2).n128_u64[0];
  return result;
}

double sub_20F64C2F8(uint64_t a1, void **a2)
{
  unint64_t v4;
  size_t v5;
  double result;

  v4 = *(unsigned int *)(a1 + 19976);
  if (*((_DWORD *)a2 + 4) != (_DWORD)v4)
  {
    *((_DWORD *)a2 + 4) = v4;
    if ((unint64_t)a2[1] < v4)
    {
      if (*a2)
        MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *a2 = 0;
      a2[1] = (void *)(v5 >> 3);
      *a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  *(_QWORD *)&result = sub_20F618DF0((_QWORD *)(a1 + 10520), a1 + 19960, a2).n128_u64[0];
  return result;
}

BOOL sub_20F64C394(int32x2_t *a1)
{
  int32x2_t *v2;
  __int32 v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int32x2_t v17;

  v2 = a1 + 2516;
  a1[2514] = (int32x2_t)(*(_QWORD *)&a1[1203] + 7528);
  a1[2515] = (int32x2_t)&a1[1294];
  v3 = a1[2516].i32[0];
  if (v3)
  {
    a1[2514] = 0;
    a1[2515] = 0;
    return v3 == 0;
  }
  v4 = a1[2519].u32[0];
  v5 = operator new((8 * (v4 * v4) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v6 = v5;
  if ((_DWORD)v4 * (_DWORD)v4)
    bzero(v5, 8 * (v4 * v4));
  if ((_DWORD)v4)
  {
    v7 = v4 + 1;
    if ((_DWORD)v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      if (v7 < 0)
        v9 = ~(_DWORD)v4;
      else
        v9 = v4 + 1;
      v10 = (v4 - 1) * (unint64_t)v9;
      v11 = (_DWORD)v4 != -1 && (unint64_t)(v4 - 1) >> 32 != 0;
      if ((_DWORD)v10)
        v12 = v7 < 0;
      else
        v12 = 0;
      if (!v12 && (v10 & 0xFFFFFFFF00000000) == 0 && !v11)
      {
        v13 = 0;
        v8 = v4 & 0xFFFFFFFE;
        v14 = v8;
        do
        {
          v6[v13] = 0x3FF0000000000000;
          v6[v7 + v13] = 0x3FF0000000000000;
          v13 += 2 * v4 + 2;
          v14 -= 2;
        }
        while (v14);
        if (v8 == v4)
          goto LABEL_25;
      }
    }
    v15 = v4 - v8;
    v16 = v7 * v8;
    do
    {
      v6[v16] = 0x3FF0000000000000;
      v16 += v7;
      --v15;
    }
    while (v15);
  }
LABEL_25:
  if (v2[3].i32[1])
    sub_20E8BE8E4();
  v17 = a1[2511];
  a1[2511] = (int32x2_t)v6;
  a1[2512] = (int32x2_t)(((8 * (v4 * v4) + 31) & 0xFFFFFFFE0uLL) >> 3);
  a1[2513] = vdup_n_s32(v4);
  if (v17)
    MEMORY[0x212BC6368](*(_QWORD *)&v17, 0x1000C8000313F17);
  return v3 == 0;
}

void sub_20F64C544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F64C568(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "DenseSchur");
}

uint64_t sub_20F64C590(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;

  *(_QWORD *)a1 = &unk_24CA01A30;
  v2 = *(_QWORD *)(a1 + 19960);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 10856) = off_24CA01CA8;
  sub_20F58A570((_QWORD *)(a1 + 18624));
  v3 = *(_QWORD **)(a1 + 18616);
  if (v3 == (_QWORD *)(a1 + 18592))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 18592);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  sub_20F4FD380(a1 + 18416);
  sub_20F4FC554((_QWORD *)(a1 + 10968));
  v5 = *(_QWORD *)(a1 + 10888);
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = *(_QWORD *)(a1 + 10864);
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  sub_20F4FD380(a1 + 10688);
  sub_20F4FD380(a1 + 10520);
  sub_20F4FD380(a1 + 10352);
  v7 = *(void **)(a1 + 10272);
  if (v7)
  {
    *(_QWORD *)(a1 + 10280) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 10248);
  if (v8)
  {
    *(_QWORD *)(a1 + 10256) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 10224);
  if (v9)
  {
    *(_QWORD *)(a1 + 10232) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 10200);
  if (v10)
  {
    *(_QWORD *)(a1 + 10208) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 10176);
  if (v11)
  {
    *(_QWORD *)(a1 + 10184) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 10152);
  if (v12)
  {
    *(_QWORD *)(a1 + 10160) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 10128);
  if (v13)
  {
    *(_QWORD *)(a1 + 10136) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 10104);
  if (v14)
  {
    *(_QWORD *)(a1 + 10112) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 10080);
  if (v15)
  {
    *(_QWORD *)(a1 + 10088) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 10056);
  if (v16)
  {
    *(_QWORD *)(a1 + 10064) = v16;
    operator delete(v16);
  }
  sub_20F4FD380(a1 + 9832);
  v17 = *(void **)(a1 + 9808);
  if (v17)
  {
    *(_QWORD *)(a1 + 9816) = v17;
    operator delete(v17);
  }
  sub_20F4FD380(a1 + 9640);
  *(_QWORD *)a1 = &unk_24CA01AE8;
  sub_20F4FD380(a1 + 9440);
  sub_20F4FC554((_QWORD *)(a1 + 1992));
  v18 = *(_QWORD *)(a1 + 1912);
  if (v18)
    MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  *(_QWORD *)a1 = &unk_24CA01BA0;
  *(_QWORD *)(a1 + 120) = &off_24CA01C10;
  sub_20F4EE048(a1 + 1680);
  sub_20F4EE048(a1 + 1488);
  sub_20F4EE048(a1 + 1296);
  sub_20F4EE048(a1 + 1104);
  v19 = *(void **)(a1 + 1040);
  if (v19)
  {
    *(_QWORD *)(a1 + 1048) = v19;
    operator delete(v19);
  }
  sub_20F4EE0E8((void **)(a1 + 896));
  sub_20F64D05C(a1 + 128);
  return a1;
}

_QWORD *sub_20F64C804(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA01CA8;
  sub_20F58A570(a1 + 971);
  v2 = (_QWORD *)a1[970];
  if (v2 == a1 + 967)
  {
    v3 = 4;
    v2 = a1 + 967;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_20F4FD380((uint64_t)(a1 + 945));
  sub_20F4FC554(a1 + 14);
  v4 = a1[4];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  return a1;
}

double sub_20F64C8C4()
{
  return 0.0;
}

double sub_20F64C8CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t k;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  uint64_t v29;
  uint64_t n;
  uint64_t v36;
  uint64_t ii;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t jj;
  uint64_t v54;
  unsigned int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  double v60;

  v2 = a1[16];
  v3 = a1[17];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v56 = 3;
      v57 = v5 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[28]; j != a1[29]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  for (k = a1[40]; k != a1[41]; k += 16)
  {
    v26 = *(_QWORD *)(k + 8);
    if ((*(_BYTE *)(v26 + 4) & 2) == 0 && *(_BYTE *)(v26 + 20))
      i = i + *(double *)(v26 + 32) * *(double *)(v26 + 32);
  }
  v27 = a1[52];
  for (m = a1[53]; v27 != m; v27 += 16)
  {
    v29 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v29 + 4) & 2) == 0 && *(_BYTE *)(v29 + 20))
    {
      v56 = 3;
      v57 = v29 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v29 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v29 + 120) * *(double *)(v29 + 120);
    }
  }
  for (n = a1[64]; n != a1[65]; n += 16)
  {
    v36 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v36 + 4) & 2) == 0 && *(_BYTE *)(v36 + 20))
    {
      _Q1 = *(_OWORD *)(v36 + 32);
      _D3 = *(_QWORD *)(v36 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v36 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (ii = a1[76]; ii != a1[77]; ii += 16)
  {
    v42 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v42 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v47 = a1[88];
  v48 = a1[89];
  while (v47 != v48)
  {
    v49 = *(_QWORD *)(v47 + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      v59 = 0uLL;
      v60 = 0.0;
      sub_20E9733B8((float64x2_t *)(v49 + 32), (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D3 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v60 * v60;
    }
    v47 += 16;
  }
  for (jj = a1[100]; jj != a1[101]; jj += 16)
  {
    v54 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v54 + 4) & 2) == 0 && *(_BYTE *)(v54 + 20))
      i = i + *(double *)(v54 + 32) * *(double *)(v54 + 32);
  }
  return i;
}

uint64_t sub_20F64CC24(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA01C10;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F64D05C(a1 + 8);
  return a1;
}

void sub_20F64CC94(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA01C10;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F64D05C(a1 + 8);
  JUMPOUT(0x212BC6398);
}

char *sub_20F64CD14(char *a1)
{
  char *v2;
  char *v3;
  uint64_t i;
  char *v5;
  _BYTE *v6;
  char *v7;
  char **v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  char *v24;
  _BYTE *v25;
  char *v26;
  char **v27;
  _BYTE *v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char *v43;
  _BYTE *v44;
  char *v45;
  char **v46;
  _BYTE *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  int v61;

  v2 = a1 + 192;
  v3 = a1 + 384;
  bzero(a1, 0x240uLL);
  for (i = 0; i != 8; ++i)
  {
    v5 = &a1[24 * i];
    v6 = *(_BYTE **)v5;
    if (*((_QWORD *)v5 + 2) - *(_QWORD *)v5 > 0xFFuLL)
      goto LABEL_14;
    v7 = &a1[24 * i];
    v10 = (_BYTE *)*((_QWORD *)v7 + 1);
    v8 = (char **)(v7 + 8);
    v9 = v10;
    v11 = (char *)operator new(0x100uLL);
    v12 = v10 - v6;
    v13 = &v11[(v10 - v6) & 0xFFFFFFFFFFFFFFFCLL];
    v14 = v13;
    if (v10 != v6)
    {
      if ((unint64_t)(v12 - 4) < 0x2C)
      {
        v14 = &v11[(v9 - v6) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_11:
          v23 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v14 - 1) = v23;
          v14 -= 4;
        }
        while (v9 != v6);
        goto LABEL_12;
      }
      v14 = &v11[(v9 - v6) & 0xFFFFFFFFFFFFFFFCLL];
      if (v9 - v11 - (v12 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_11;
      v15 = v12 >> 2;
      v16 = ((unint64_t)(v12 - 4) >> 2) + 1;
      v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
      v18 = &v9[-v17];
      v14 = &v13[-v17];
      v19 = &v11[4 * v15 - 16];
      v20 = (__int128 *)(v9 - 16);
      v21 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *v20;
        *((_OWORD *)v19 - 1) = *(v20 - 1);
        *(_OWORD *)v19 = v22;
        v19 -= 32;
        v20 -= 2;
        v21 -= 8;
      }
      while (v21);
      v9 = v18;
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_11;
    }
LABEL_12:
    *(_QWORD *)v5 = v14;
    *v8 = v13;
    *((_QWORD *)v5 + 2) = v11 + 256;
    if (v6)
      operator delete(v6);
LABEL_14:
    v24 = &v2[24 * i];
    v25 = *(_BYTE **)v24;
    if (*((_QWORD *)v24 + 2) - *(_QWORD *)v24 > 0xFFuLL)
      goto LABEL_25;
    v26 = &v2[24 * i];
    v29 = (_BYTE *)*((_QWORD *)v26 + 1);
    v27 = (char **)(v26 + 8);
    v28 = v29;
    v30 = (char *)operator new(0x100uLL);
    v31 = v29 - v25;
    v32 = &v30[(v29 - v25) & 0xFFFFFFFFFFFFFFFCLL];
    v33 = v32;
    if (v29 != v25)
    {
      if ((unint64_t)(v31 - 4) < 0x2C)
      {
        v33 = &v30[(v28 - v25) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_22:
          v42 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *((_DWORD *)v33 - 1) = v42;
          v33 -= 4;
        }
        while (v28 != v25);
        goto LABEL_23;
      }
      v33 = &v30[(v28 - v25) & 0xFFFFFFFFFFFFFFFCLL];
      if (v28 - v30 - (v31 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_22;
      v34 = v31 >> 2;
      v35 = ((unint64_t)(v31 - 4) >> 2) + 1;
      v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
      v37 = &v28[-v36];
      v33 = &v32[-v36];
      v38 = &v30[4 * v34 - 16];
      v39 = (__int128 *)(v28 - 16);
      v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v41 = *v39;
        *((_OWORD *)v38 - 1) = *(v39 - 1);
        *(_OWORD *)v38 = v41;
        v38 -= 32;
        v39 -= 2;
        v40 -= 8;
      }
      while (v40);
      v28 = v37;
      if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_22;
    }
LABEL_23:
    *(_QWORD *)v24 = v33;
    *v27 = v32;
    *((_QWORD *)v24 + 2) = v30 + 256;
    if (v25)
      operator delete(v25);
LABEL_25:
    v43 = &v3[24 * i];
    v44 = *(_BYTE **)v43;
    if (*((_QWORD *)v43 + 2) - *(_QWORD *)v43 > 0xFFuLL)
      continue;
    v45 = &v3[24 * i];
    v48 = (_BYTE *)*((_QWORD *)v45 + 1);
    v46 = (char **)(v45 + 8);
    v47 = v48;
    v49 = (char *)operator new(0x100uLL);
    v50 = v48 - v44;
    v51 = &v49[(v48 - v44) & 0xFFFFFFFFFFFFFFFCLL];
    v52 = v51;
    if (v48 != v44)
    {
      if ((unint64_t)(v50 - 4) < 0x2C)
      {
        v52 = &v49[(v47 - v44) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_33:
          v61 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *((_DWORD *)v52 - 1) = v61;
          v52 -= 4;
        }
        while (v47 != v44);
        goto LABEL_34;
      }
      v52 = &v49[(v47 - v44) & 0xFFFFFFFFFFFFFFFCLL];
      if (v47 - v49 - (v50 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_33;
      v53 = v50 >> 2;
      v54 = ((unint64_t)(v50 - 4) >> 2) + 1;
      v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
      v56 = &v47[-v55];
      v52 = &v51[-v55];
      v57 = &v49[4 * v53 - 16];
      v58 = (__int128 *)(v47 - 16);
      v59 = v54 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v60 = *v58;
        *((_OWORD *)v57 - 1) = *(v58 - 1);
        *(_OWORD *)v57 = v60;
        v57 -= 32;
        v58 -= 2;
        v59 -= 8;
      }
      while (v59);
      v47 = v56;
      if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_33;
    }
LABEL_34:
    *(_QWORD *)v43 = v52;
    *v46 = v51;
    *((_QWORD *)v43 + 2) = v49 + 256;
    if (v44)
      operator delete(v44);
  }
  return a1;
}

void sub_20F64D038(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_20F4EE048(v3);
  sub_20F4EE048(v2);
  sub_20F4EE048(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F64D05C(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  sub_20F2B23DC(a1 + 696);
  v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(_QWORD *)(a1 + 680) = v2;
    operator delete(v2);
  }
  sub_20F64D288(a1 + 600);
  *(_DWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  v3 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 656) = v3;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 608);
  if (v4)
  {
    v5 = *(_QWORD **)(a1 + 616);
    v6 = *(void **)(a1 + 608);
    if (v5 != v4)
    {
      v7 = *(_QWORD **)(a1 + 616);
      do
      {
        v8 = *(v7 - 2);
        v7 -= 2;
        *v7 = 0;
        if (v8)
          ((void (*)(void))*(v5 - 1))();
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *(void **)(a1 + 608);
    }
    *(_QWORD *)(a1 + 616) = v4;
    operator delete(v6);
  }
  v9 = *(void **)(a1 + 576);
  if (v9)
  {
    *(_QWORD *)(a1 + 584) = v9;
    operator delete(v9);
  }
  sub_20F64E378(a1 + 504);
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  v10 = *(void **)(a1 + 552);
  *(_QWORD *)(a1 + 560) = v10;
  if (v10)
    operator delete(v10);
  v11 = *(_QWORD **)(a1 + 512);
  if (v11)
  {
    v12 = *(_QWORD **)(a1 + 520);
    v13 = *(void **)(a1 + 512);
    if (v12 != v11)
    {
      v14 = *(_QWORD **)(a1 + 520);
      do
      {
        v15 = *(v14 - 2);
        v14 -= 2;
        *v14 = 0;
        if (v15)
          ((void (*)(void))*(v12 - 1))();
        v12 = v14;
      }
      while (v14 != v11);
      v13 = *(void **)(a1 + 512);
    }
    *(_QWORD *)(a1 + 520) = v11;
    operator delete(v13);
  }
  v16 = *(void **)(a1 + 480);
  if (v16)
  {
    *(_QWORD *)(a1 + 488) = v16;
    operator delete(v16);
  }
  sub_20F64F468(a1 + 408);
  *(_DWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  v17 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 464) = v17;
  if (v17)
    operator delete(v17);
  v18 = *(_QWORD **)(a1 + 416);
  if (v18)
  {
    v19 = *(_QWORD **)(a1 + 424);
    v20 = *(void **)(a1 + 416);
    if (v19 != v18)
    {
      v21 = *(_QWORD **)(a1 + 424);
      do
      {
        v22 = *(v21 - 2);
        v21 -= 2;
        *v21 = 0;
        if (v22)
          ((void (*)(void))*(v19 - 1))();
        v19 = v21;
      }
      while (v21 != v18);
      v20 = *(void **)(a1 + 416);
    }
    *(_QWORD *)(a1 + 424) = v18;
    operator delete(v20);
  }
  v23 = *(void **)(a1 + 384);
  if (v23)
  {
    *(_QWORD *)(a1 + 392) = v23;
    operator delete(v23);
  }
  sub_20F4F22CC(a1 + 312);
  v24 = *(void **)(a1 + 288);
  if (v24)
  {
    *(_QWORD *)(a1 + 296) = v24;
    operator delete(v24);
  }
  sub_20F4F2E90(a1 + 216);
  v25 = *(void **)(a1 + 192);
  if (v25)
  {
    *(_QWORD *)(a1 + 200) = v25;
    operator delete(v25);
  }
  sub_20F4F3BC4(a1 + 120);
  v26 = *(void **)(a1 + 96);
  if (v26)
  {
    *(_QWORD *)(a1 + 104) = v26;
    operator delete(v26);
  }
  sub_20F3C8180(a1 + 24);
  v27 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v27;
    operator delete(v27);
  }
  return a1;
}

void sub_20F64D288(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t i;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t k;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unint64_t j;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  void *v69;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unint64_t **)(a1 + 56);
  if ((unint64_t *)v2 == v3)
  {
    v14 = *(_DWORD *)(a1 + 32);
    if (v14)
    {
      if (v14 != 1)
      {
        v38 = 8;
        for (i = 1; i < v14; ++i)
        {
          if (v38)
          {
            v40 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * i - 16);
            v41 = &v40[31 * v38];
            do
            {
              v42 = (_QWORD *)v40[18];
              if (v42)
              {
                do
                {
                  v43 = (_QWORD *)*v42;
                  operator delete(v42);
                  v42 = v43;
                }
                while (v43);
              }
              v44 = (void *)v40[16];
              v40[16] = 0;
              if (v44)
                operator delete(v44);
              v45 = (void *)v40[13];
              if (v45)
              {
                v40[14] = v45;
                operator delete(v45);
              }
              v40 += 31;
            }
            while (v40 != v41);
            v14 = *(_DWORD *)(a1 + 32);
          }
          v38 *= 2;
        }
      }
      v15 = *(_QWORD *)(a1 + 40);
      if (v15)
      {
        v16 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v14 - 1));
        v17 = &v16[31 * v15];
        do
        {
          v18 = (_QWORD *)v16[18];
          if (v18)
          {
            do
            {
              v19 = (_QWORD *)*v18;
              operator delete(v18);
              v18 = v19;
            }
            while (v19);
          }
          v20 = (void *)v16[16];
          v16[16] = 0;
          if (v20)
            operator delete(v20);
          v21 = (void *)v16[13];
          if (v21)
          {
            v16[14] = v21;
            operator delete(v21);
          }
          v16 += 31;
        }
        while (v16 != v17);
      }
    }
  }
  else if ((unint64_t)v3 - v2 > 0xEF)
  {
    sub_20F64D70C(v2, v3, 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3), 1);
    v22 = *(_DWORD *)(a1 + 32);
    if (v22)
    {
      v23 = *(_QWORD **)(a1 + 48);
      v24 = *(_QWORD **)(a1 + 56);
      if (v22 != 1)
      {
        v56 = 8;
        for (j = 1; j < v22; ++j)
        {
          if (v56)
          {
            v58 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * j - 16);
            v59 = &v58[31 * v56];
            do
            {
              v60 = v23;
              if (v24 != v23)
              {
                v60 = v23;
                v61 = v24 - v23;
                do
                {
                  v62 = v61 >> 1;
                  v63 = &v60[v61 >> 1];
                  v65 = *v63;
                  v64 = v63 + 1;
                  v61 += ~(v61 >> 1);
                  if (v65 < (unint64_t)v58)
                    v60 = v64;
                  else
                    v61 = v62;
                }
                while (v61);
              }
              if (v60 == v24 || (_QWORD *)*v60 != v58)
              {
                v66 = (_QWORD *)v58[18];
                if (v66)
                {
                  do
                  {
                    v67 = (_QWORD *)*v66;
                    operator delete(v66);
                    v66 = v67;
                  }
                  while (v67);
                }
                v68 = (void *)v58[16];
                v58[16] = 0;
                if (v68)
                  operator delete(v68);
                v69 = (void *)v58[13];
                if (v69)
                {
                  v58[14] = v69;
                  operator delete(v69);
                }
              }
              v58 += 31;
            }
            while (v58 != v59);
            v22 = *(_DWORD *)(a1 + 32);
          }
          v56 *= 2;
        }
      }
      v25 = *(_QWORD *)(a1 + 40);
      if (v25)
      {
        v26 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v22 - 1));
        v27 = &v26[31 * v25];
        do
        {
          v28 = v23;
          if (v24 != v23)
          {
            v28 = v23;
            v29 = v24 - v23;
            do
            {
              v30 = v29 >> 1;
              v31 = &v28[v29 >> 1];
              v33 = *v31;
              v32 = v31 + 1;
              v29 += ~(v29 >> 1);
              if (v33 < (unint64_t)v26)
                v28 = v32;
              else
                v29 = v30;
            }
            while (v29);
          }
          if (v28 == v24 || (_QWORD *)*v28 != v26)
          {
            v34 = (_QWORD *)v26[18];
            if (v34)
            {
              do
              {
                v35 = (_QWORD *)*v34;
                operator delete(v34);
                v34 = v35;
              }
              while (v35);
            }
            v36 = (void *)v26[16];
            v26[16] = 0;
            if (v36)
              operator delete(v36);
            v37 = (void *)v26[13];
            if (v37)
            {
              v26[14] = v37;
              operator delete(v37);
            }
          }
          v26 += 31;
        }
        while (v26 != v27);
      }
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    if (v4)
    {
      if (v4 != 1)
      {
        v46 = 8;
        for (k = 1; k < v4; ++k)
        {
          if (v46)
          {
            v48 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * k - 16);
            v49 = &v48[31 * v46];
            do
            {
              v51 = *(_QWORD **)(a1 + 48);
              v50 = *(_QWORD **)(a1 + 56);
              if (v51 != v50)
              {
                while ((_QWORD *)*v51 != v48)
                {
                  if (++v51 == v50)
                  {
                    v51 = *(_QWORD **)(a1 + 56);
                    break;
                  }
                }
              }
              if (v51 == v50)
              {
                v52 = (_QWORD *)v48[18];
                if (v52)
                {
                  do
                  {
                    v53 = (_QWORD *)*v52;
                    operator delete(v52);
                    v52 = v53;
                  }
                  while (v53);
                }
                v54 = (void *)v48[16];
                v48[16] = 0;
                if (v54)
                  operator delete(v54);
                v55 = (void *)v48[13];
                if (v55)
                {
                  v48[14] = v55;
                  operator delete(v55);
                }
              }
              v48 += 31;
            }
            while (v48 != v49);
            v4 = *(_DWORD *)(a1 + 32);
          }
          v46 *= 2;
        }
      }
      v5 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
        v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
        v7 = &v6[31 * v5];
        do
        {
          v9 = *(_QWORD **)(a1 + 48);
          v8 = *(_QWORD **)(a1 + 56);
          if (v9 != v8)
          {
            while ((_QWORD *)*v9 != v6)
            {
              if (++v9 == v8)
              {
                v9 = *(_QWORD **)(a1 + 56);
                break;
              }
            }
          }
          if (v9 == v8)
          {
            v10 = (_QWORD *)v6[18];
            if (v10)
            {
              do
              {
                v11 = (_QWORD *)*v10;
                operator delete(v10);
                v10 = v11;
              }
              while (v11);
            }
            v12 = (void *)v6[16];
            v6[16] = 0;
            if (v12)
              operator delete(v12);
            v13 = (void *)v6[13];
            if (v13)
            {
              v6[14] = v13;
              operator delete(v13);
            }
          }
          v6 += 31;
        }
        while (v6 != v7);
      }
    }
  }
}

uint64_t sub_20F64D70C(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t **v78;
  unint64_t *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *(a2 - 1);
        v68 = *v8;
        if (v67 < *v8)
        {
          *v8 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3:
        v69 = *v8;
        v70 = v8[1];
        v71 = *(a2 - 1);
        if (v70 >= *v8)
        {
          if (v71 < v70)
          {
            v8[1] = v71;
            *(a2 - 1) = v70;
            v113 = *v8;
            v112 = v8[1];
            if (v112 < *v8)
            {
              *v8 = v112;
              v8[1] = v113;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            *v8 = v70;
            v8[1] = v69;
            v120 = *(a2 - 1);
            if (v120 >= v69)
              return result;
            v8[1] = v120;
          }
          else
          {
            *v8 = v71;
          }
          *(a2 - 1) = v69;
        }
        return result;
      case 4:
        v72 = v8 + 1;
        v73 = (unint64_t *)v8[1];
        v74 = v8 + 2;
        v75 = v8[2];
        v76 = (unint64_t *)*v8;
        if ((unint64_t)v73 >= *v8)
        {
          if (v75 >= (unint64_t)v73)
          {
LABEL_181:
            v73 = (unint64_t *)v75;
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
LABEL_182:
            *v74 = v114;
            *(a2 - 1) = (unint64_t)v73;
            v117 = *v74;
            v118 = *v72;
            if (v117 < v118)
            {
              v8[1] = v117;
              v8[2] = v118;
              v119 = *v8;
              if (v117 < *v8)
              {
                *v8 = v117;
                v8[1] = v119;
              }
            }
            return result;
          }
          *v72 = v75;
          *v74 = (unint64_t)v73;
          v77 = v8;
          v78 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v73;
          if (v75 >= (unint64_t)v76)
          {
LABEL_173:
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
            goto LABEL_182;
          }
        }
        else
        {
          v77 = v8;
          v78 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v75 >= (unint64_t)v73)
          {
            *v8 = (unint64_t)v73;
            v8[1] = (unint64_t)v76;
            v77 = v8 + 1;
            v78 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v76;
            if (v75 >= (unint64_t)v76)
              goto LABEL_181;
          }
        }
        *v77 = v75;
        *v78 = v76;
        v73 = (unint64_t *)result;
        goto LABEL_173;
      case 5:
        return (uint64_t)sub_20F2B3110(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v89 = (unint64_t)(v10 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = &v8[v92];
                  if (2 * v90 + 2 >= v10)
                  {
                    v94 = *v93;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (*v93 >= *v96)
                      goto LABEL_147;
                  }
                  else
                  {
                    v94 = v93[1];
                    v95 = *v93 >= v94;
                    if (*v93 < v94)
                      ++v93;
                    else
                      v94 = *v93;
                    if (!v95)
                      v92 = 2 * v90 + 2;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (v94 >= *v96)
                    {
LABEL_147:
                      while (1)
                      {
                        *v96 = v94;
                        v96 = v93;
                        if (v89 < v92)
                          break;
                        v98 = (2 * v92) | 1;
                        v93 = &v8[v98];
                        v92 = 2 * v92 + 2;
                        if (v92 < v10)
                        {
                          v94 = *v93;
                          result = (uint64_t)(v93 + 1);
                          if (*v93 >= v93[1])
                          {
                            v92 = v98;
                          }
                          else
                          {
                            v94 = v93[1];
                            ++v93;
                          }
                          if (v94 < v97)
                            break;
                        }
                        else
                        {
                          v94 = *v93;
                          v92 = v98;
                          if (*v93 < v97)
                            break;
                        }
                      }
                      *v96 = v97;
                    }
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v9 >> 3;
              do
              {
                v100 = 0;
                v101 = *v8;
                v102 = (unint64_t)(v99 - 2) >> 1;
                v103 = v8;
                do
                {
                  while (1)
                  {
                    v105 = &v103[v100 + 1];
                    v106 = (2 * v100) | 1;
                    v100 = 2 * v100 + 2;
                    if (v100 < v99)
                      break;
                    v100 = v106;
                    *v103 = *v105;
                    v103 = v105;
                    if (v106 > v102)
                      goto LABEL_161;
                  }
                  v104 = *v105;
                  if (*v105 >= v105[1])
                  {
                    v100 = v106;
                  }
                  else
                  {
                    v104 = v105[1];
                    ++v105;
                  }
                  *v103 = v104;
                  v103 = v105;
                }
                while (v100 <= v102);
LABEL_161:
                if (v105 == --a2)
                {
                  *v105 = v101;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v101;
                  v107 = (char *)v105 - (char *)v8 + 8;
                  if (v107 >= 9)
                  {
                    v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                    v109 = &v8[v108];
                    v110 = *v109;
                    v111 = *v105;
                    if (*v109 < *v105)
                    {
                      do
                      {
                        *v105 = v110;
                        v105 = v109;
                        if (!v108)
                          break;
                        v108 = (v108 - 1) >> 1;
                        v109 = &v8[v108];
                        v110 = *v109;
                      }
                      while (*v109 < v111);
                      *v105 = v111;
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = *v8;
                *v8 = v40;
                *v12 = v42;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v43 = *v8;
            *v8 = v39;
            *v12 = v43;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v59 = v8 + 1;
              do
              {
                v8 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v58 = v8[1];
                ++v8;
              }
              while (v20 >= v58);
            }
            v60 = a2;
            if (v8 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v20 < v61);
            }
            if (v8 < v60)
            {
              v62 = *v8;
              v63 = *v60;
              do
              {
                *v8 = v63;
                *v60 = v62;
                do
                {
                  v64 = v8[1];
                  ++v8;
                  v62 = v64;
                }
                while (v20 >= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v20 < v65);
              }
              while (v8 < v60);
            }
            v66 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v66;
            a4 = 0;
            *v66 = v20;
            continue;
          }
          v57 = *v8;
          *v8 = v41;
          *v12 = v57;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v44 = 0;
          do
            v45 = v8[++v44];
          while (v45 < v20);
          v46 = &v8[v44];
          v47 = a2;
          if (v44 == 1)
          {
            v47 = a2;
            do
            {
              if (v46 >= v47)
                break;
              v49 = *--v47;
            }
            while (v49 >= v20);
          }
          else
          {
            do
              v48 = *--v47;
            while (v48 >= v20);
          }
          if (v46 >= v47)
          {
            v55 = v46 - 1;
            if (v46 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v50 = *v47;
            v51 = &v8[v44];
            v52 = v47;
            do
            {
              *v51 = v50;
              *v52 = v45;
              do
              {
                v53 = v51[1];
                ++v51;
                v45 = v53;
              }
              while (v53 < v20);
              do
              {
                v54 = *--v52;
                v50 = v54;
              }
              while (v54 >= v20);
            }
            while (v51 < v52);
            v55 = v51 - 1;
            if (v51 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v55;
          }
LABEL_74:
          *v55 = v20;
          if (v46 < v47)
            goto LABEL_77;
          v56 = sub_20F64E074(v8, v55);
          v8 = v55 + 1;
          result = sub_20F64E074(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_77:
            result = sub_20F64D70C(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v79 = v8 + 1;
        v81 = v8 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 8;
            v83 = v8;
            do
            {
              v86 = *v83;
              v85 = v83[1];
              v83 = v79;
              if (v85 < v86)
              {
                v87 = v82;
                do
                {
                  *(unint64_t *)((char *)v8 + v87) = v86;
                  v88 = v87 - 8;
                  if (v87 == 8)
                  {
                    v84 = v8;
                    goto LABEL_121;
                  }
                  v86 = *(unint64_t *)((char *)v8 + v87 - 16);
                  v87 -= 8;
                }
                while (v85 < v86);
                v84 = (unint64_t *)((char *)v8 + v88);
LABEL_121:
                *v84 = v85;
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v116 = *v7;
            v115 = v7[1];
            v7 = v79;
            if (v115 < v116)
            {
              do
              {
                *v79 = v116;
                v116 = *(v79 - 2);
                --v79;
              }
              while (v115 < v116);
              *v79 = v115;
            }
            v79 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F64E074(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

void sub_20F64E378(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t i;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t k;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unint64_t j;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  void *v69;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unint64_t **)(a1 + 56);
  if ((unint64_t *)v2 == v3)
  {
    v14 = *(_DWORD *)(a1 + 32);
    if (v14)
    {
      if (v14 != 1)
      {
        v38 = 8;
        for (i = 1; i < v14; ++i)
        {
          if (v38)
          {
            v40 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * i - 16);
            v41 = &v40[69 * v38];
            do
            {
              v42 = (_QWORD *)v40[37];
              if (v42)
              {
                do
                {
                  v43 = (_QWORD *)*v42;
                  operator delete(v42);
                  v42 = v43;
                }
                while (v43);
              }
              v44 = (void *)v40[35];
              v40[35] = 0;
              if (v44)
                operator delete(v44);
              v45 = (void *)v40[32];
              if (v45)
              {
                v40[33] = v45;
                operator delete(v45);
              }
              v40 += 69;
            }
            while (v40 != v41);
            v14 = *(_DWORD *)(a1 + 32);
          }
          v38 *= 2;
        }
      }
      v15 = *(_QWORD *)(a1 + 40);
      if (v15)
      {
        v16 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v14 - 1));
        v17 = &v16[69 * v15];
        do
        {
          v18 = (_QWORD *)v16[37];
          if (v18)
          {
            do
            {
              v19 = (_QWORD *)*v18;
              operator delete(v18);
              v18 = v19;
            }
            while (v19);
          }
          v20 = (void *)v16[35];
          v16[35] = 0;
          if (v20)
            operator delete(v20);
          v21 = (void *)v16[32];
          if (v21)
          {
            v16[33] = v21;
            operator delete(v21);
          }
          v16 += 69;
        }
        while (v16 != v17);
      }
    }
  }
  else if ((unint64_t)v3 - v2 > 0xEF)
  {
    sub_20F64E7FC(v2, v3, 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3), 1);
    v22 = *(_DWORD *)(a1 + 32);
    if (v22)
    {
      v23 = *(_QWORD **)(a1 + 48);
      v24 = *(_QWORD **)(a1 + 56);
      if (v22 != 1)
      {
        v56 = 8;
        for (j = 1; j < v22; ++j)
        {
          if (v56)
          {
            v58 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * j - 16);
            v59 = &v58[69 * v56];
            do
            {
              v60 = v23;
              if (v24 != v23)
              {
                v60 = v23;
                v61 = v24 - v23;
                do
                {
                  v62 = v61 >> 1;
                  v63 = &v60[v61 >> 1];
                  v65 = *v63;
                  v64 = v63 + 1;
                  v61 += ~(v61 >> 1);
                  if (v65 < (unint64_t)v58)
                    v60 = v64;
                  else
                    v61 = v62;
                }
                while (v61);
              }
              if (v60 == v24 || (_QWORD *)*v60 != v58)
              {
                v66 = (_QWORD *)v58[37];
                if (v66)
                {
                  do
                  {
                    v67 = (_QWORD *)*v66;
                    operator delete(v66);
                    v66 = v67;
                  }
                  while (v67);
                }
                v68 = (void *)v58[35];
                v58[35] = 0;
                if (v68)
                  operator delete(v68);
                v69 = (void *)v58[32];
                if (v69)
                {
                  v58[33] = v69;
                  operator delete(v69);
                }
              }
              v58 += 69;
            }
            while (v58 != v59);
            v22 = *(_DWORD *)(a1 + 32);
          }
          v56 *= 2;
        }
      }
      v25 = *(_QWORD *)(a1 + 40);
      if (v25)
      {
        v26 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v22 - 1));
        v27 = &v26[69 * v25];
        do
        {
          v28 = v23;
          if (v24 != v23)
          {
            v28 = v23;
            v29 = v24 - v23;
            do
            {
              v30 = v29 >> 1;
              v31 = &v28[v29 >> 1];
              v33 = *v31;
              v32 = v31 + 1;
              v29 += ~(v29 >> 1);
              if (v33 < (unint64_t)v26)
                v28 = v32;
              else
                v29 = v30;
            }
            while (v29);
          }
          if (v28 == v24 || (_QWORD *)*v28 != v26)
          {
            v34 = (_QWORD *)v26[37];
            if (v34)
            {
              do
              {
                v35 = (_QWORD *)*v34;
                operator delete(v34);
                v34 = v35;
              }
              while (v35);
            }
            v36 = (void *)v26[35];
            v26[35] = 0;
            if (v36)
              operator delete(v36);
            v37 = (void *)v26[32];
            if (v37)
            {
              v26[33] = v37;
              operator delete(v37);
            }
          }
          v26 += 69;
        }
        while (v26 != v27);
      }
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    if (v4)
    {
      if (v4 != 1)
      {
        v46 = 8;
        for (k = 1; k < v4; ++k)
        {
          if (v46)
          {
            v48 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * k - 16);
            v49 = &v48[69 * v46];
            do
            {
              v51 = *(_QWORD **)(a1 + 48);
              v50 = *(_QWORD **)(a1 + 56);
              if (v51 != v50)
              {
                while ((_QWORD *)*v51 != v48)
                {
                  if (++v51 == v50)
                  {
                    v51 = *(_QWORD **)(a1 + 56);
                    break;
                  }
                }
              }
              if (v51 == v50)
              {
                v52 = (_QWORD *)v48[37];
                if (v52)
                {
                  do
                  {
                    v53 = (_QWORD *)*v52;
                    operator delete(v52);
                    v52 = v53;
                  }
                  while (v53);
                }
                v54 = (void *)v48[35];
                v48[35] = 0;
                if (v54)
                  operator delete(v54);
                v55 = (void *)v48[32];
                if (v55)
                {
                  v48[33] = v55;
                  operator delete(v55);
                }
              }
              v48 += 69;
            }
            while (v48 != v49);
            v4 = *(_DWORD *)(a1 + 32);
          }
          v46 *= 2;
        }
      }
      v5 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
        v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
        v7 = &v6[69 * v5];
        do
        {
          v9 = *(_QWORD **)(a1 + 48);
          v8 = *(_QWORD **)(a1 + 56);
          if (v9 != v8)
          {
            while ((_QWORD *)*v9 != v6)
            {
              if (++v9 == v8)
              {
                v9 = *(_QWORD **)(a1 + 56);
                break;
              }
            }
          }
          if (v9 == v8)
          {
            v10 = (_QWORD *)v6[37];
            if (v10)
            {
              do
              {
                v11 = (_QWORD *)*v10;
                operator delete(v10);
                v10 = v11;
              }
              while (v11);
            }
            v12 = (void *)v6[35];
            v6[35] = 0;
            if (v12)
              operator delete(v12);
            v13 = (void *)v6[32];
            if (v13)
            {
              v6[33] = v13;
              operator delete(v13);
            }
          }
          v6 += 69;
        }
        while (v6 != v7);
      }
    }
  }
}

uint64_t sub_20F64E7FC(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t **v78;
  unint64_t *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *(a2 - 1);
        v68 = *v8;
        if (v67 < *v8)
        {
          *v8 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3:
        v69 = *v8;
        v70 = v8[1];
        v71 = *(a2 - 1);
        if (v70 >= *v8)
        {
          if (v71 < v70)
          {
            v8[1] = v71;
            *(a2 - 1) = v70;
            v113 = *v8;
            v112 = v8[1];
            if (v112 < *v8)
            {
              *v8 = v112;
              v8[1] = v113;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            *v8 = v70;
            v8[1] = v69;
            v120 = *(a2 - 1);
            if (v120 >= v69)
              return result;
            v8[1] = v120;
          }
          else
          {
            *v8 = v71;
          }
          *(a2 - 1) = v69;
        }
        return result;
      case 4:
        v72 = v8 + 1;
        v73 = (unint64_t *)v8[1];
        v74 = v8 + 2;
        v75 = v8[2];
        v76 = (unint64_t *)*v8;
        if ((unint64_t)v73 >= *v8)
        {
          if (v75 >= (unint64_t)v73)
          {
LABEL_181:
            v73 = (unint64_t *)v75;
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
LABEL_182:
            *v74 = v114;
            *(a2 - 1) = (unint64_t)v73;
            v117 = *v74;
            v118 = *v72;
            if (v117 < v118)
            {
              v8[1] = v117;
              v8[2] = v118;
              v119 = *v8;
              if (v117 < *v8)
              {
                *v8 = v117;
                v8[1] = v119;
              }
            }
            return result;
          }
          *v72 = v75;
          *v74 = (unint64_t)v73;
          v77 = v8;
          v78 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v73;
          if (v75 >= (unint64_t)v76)
          {
LABEL_173:
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
            goto LABEL_182;
          }
        }
        else
        {
          v77 = v8;
          v78 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v75 >= (unint64_t)v73)
          {
            *v8 = (unint64_t)v73;
            v8[1] = (unint64_t)v76;
            v77 = v8 + 1;
            v78 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v76;
            if (v75 >= (unint64_t)v76)
              goto LABEL_181;
          }
        }
        *v77 = v75;
        *v78 = v76;
        v73 = (unint64_t *)result;
        goto LABEL_173;
      case 5:
        return (uint64_t)sub_20F2B3110(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v89 = (unint64_t)(v10 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = &v8[v92];
                  if (2 * v90 + 2 >= v10)
                  {
                    v94 = *v93;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (*v93 >= *v96)
                      goto LABEL_147;
                  }
                  else
                  {
                    v94 = v93[1];
                    v95 = *v93 >= v94;
                    if (*v93 < v94)
                      ++v93;
                    else
                      v94 = *v93;
                    if (!v95)
                      v92 = 2 * v90 + 2;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (v94 >= *v96)
                    {
LABEL_147:
                      while (1)
                      {
                        *v96 = v94;
                        v96 = v93;
                        if (v89 < v92)
                          break;
                        v98 = (2 * v92) | 1;
                        v93 = &v8[v98];
                        v92 = 2 * v92 + 2;
                        if (v92 < v10)
                        {
                          v94 = *v93;
                          result = (uint64_t)(v93 + 1);
                          if (*v93 >= v93[1])
                          {
                            v92 = v98;
                          }
                          else
                          {
                            v94 = v93[1];
                            ++v93;
                          }
                          if (v94 < v97)
                            break;
                        }
                        else
                        {
                          v94 = *v93;
                          v92 = v98;
                          if (*v93 < v97)
                            break;
                        }
                      }
                      *v96 = v97;
                    }
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v9 >> 3;
              do
              {
                v100 = 0;
                v101 = *v8;
                v102 = (unint64_t)(v99 - 2) >> 1;
                v103 = v8;
                do
                {
                  while (1)
                  {
                    v105 = &v103[v100 + 1];
                    v106 = (2 * v100) | 1;
                    v100 = 2 * v100 + 2;
                    if (v100 < v99)
                      break;
                    v100 = v106;
                    *v103 = *v105;
                    v103 = v105;
                    if (v106 > v102)
                      goto LABEL_161;
                  }
                  v104 = *v105;
                  if (*v105 >= v105[1])
                  {
                    v100 = v106;
                  }
                  else
                  {
                    v104 = v105[1];
                    ++v105;
                  }
                  *v103 = v104;
                  v103 = v105;
                }
                while (v100 <= v102);
LABEL_161:
                if (v105 == --a2)
                {
                  *v105 = v101;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v101;
                  v107 = (char *)v105 - (char *)v8 + 8;
                  if (v107 >= 9)
                  {
                    v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                    v109 = &v8[v108];
                    v110 = *v109;
                    v111 = *v105;
                    if (*v109 < *v105)
                    {
                      do
                      {
                        *v105 = v110;
                        v105 = v109;
                        if (!v108)
                          break;
                        v108 = (v108 - 1) >> 1;
                        v109 = &v8[v108];
                        v110 = *v109;
                      }
                      while (*v109 < v111);
                      *v105 = v111;
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = *v8;
                *v8 = v40;
                *v12 = v42;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v43 = *v8;
            *v8 = v39;
            *v12 = v43;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v59 = v8 + 1;
              do
              {
                v8 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v58 = v8[1];
                ++v8;
              }
              while (v20 >= v58);
            }
            v60 = a2;
            if (v8 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v20 < v61);
            }
            if (v8 < v60)
            {
              v62 = *v8;
              v63 = *v60;
              do
              {
                *v8 = v63;
                *v60 = v62;
                do
                {
                  v64 = v8[1];
                  ++v8;
                  v62 = v64;
                }
                while (v20 >= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v20 < v65);
              }
              while (v8 < v60);
            }
            v66 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v66;
            a4 = 0;
            *v66 = v20;
            continue;
          }
          v57 = *v8;
          *v8 = v41;
          *v12 = v57;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v44 = 0;
          do
            v45 = v8[++v44];
          while (v45 < v20);
          v46 = &v8[v44];
          v47 = a2;
          if (v44 == 1)
          {
            v47 = a2;
            do
            {
              if (v46 >= v47)
                break;
              v49 = *--v47;
            }
            while (v49 >= v20);
          }
          else
          {
            do
              v48 = *--v47;
            while (v48 >= v20);
          }
          if (v46 >= v47)
          {
            v55 = v46 - 1;
            if (v46 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v50 = *v47;
            v51 = &v8[v44];
            v52 = v47;
            do
            {
              *v51 = v50;
              *v52 = v45;
              do
              {
                v53 = v51[1];
                ++v51;
                v45 = v53;
              }
              while (v53 < v20);
              do
              {
                v54 = *--v52;
                v50 = v54;
              }
              while (v54 >= v20);
            }
            while (v51 < v52);
            v55 = v51 - 1;
            if (v51 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v55;
          }
LABEL_74:
          *v55 = v20;
          if (v46 < v47)
            goto LABEL_77;
          v56 = sub_20F64F164(v8, v55);
          v8 = v55 + 1;
          result = sub_20F64F164(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_77:
            result = sub_20F64E7FC(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v79 = v8 + 1;
        v81 = v8 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 8;
            v83 = v8;
            do
            {
              v86 = *v83;
              v85 = v83[1];
              v83 = v79;
              if (v85 < v86)
              {
                v87 = v82;
                do
                {
                  *(unint64_t *)((char *)v8 + v87) = v86;
                  v88 = v87 - 8;
                  if (v87 == 8)
                  {
                    v84 = v8;
                    goto LABEL_121;
                  }
                  v86 = *(unint64_t *)((char *)v8 + v87 - 16);
                  v87 -= 8;
                }
                while (v85 < v86);
                v84 = (unint64_t *)((char *)v8 + v88);
LABEL_121:
                *v84 = v85;
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v116 = *v7;
            v115 = v7[1];
            v7 = v79;
            if (v115 < v116)
            {
              do
              {
                *v79 = v116;
                v116 = *(v79 - 2);
                --v79;
              }
              while (v115 < v116);
              *v79 = v115;
            }
            v79 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F64F164(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

void sub_20F64F468(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t i;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t k;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unint64_t j;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  void *v69;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unint64_t **)(a1 + 56);
  if ((unint64_t *)v2 == v3)
  {
    v14 = *(_DWORD *)(a1 + 32);
    if (v14)
    {
      if (v14 != 1)
      {
        v38 = 8;
        for (i = 1; i < v14; ++i)
        {
          if (v38)
          {
            v40 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * i - 16);
            v41 = &v40[25 * v38];
            do
            {
              v42 = (_QWORD *)v40[15];
              if (v42)
              {
                do
                {
                  v43 = (_QWORD *)*v42;
                  operator delete(v42);
                  v42 = v43;
                }
                while (v43);
              }
              v44 = (void *)v40[13];
              v40[13] = 0;
              if (v44)
                operator delete(v44);
              v45 = (void *)v40[10];
              if (v45)
              {
                v40[11] = v45;
                operator delete(v45);
              }
              v40 += 25;
            }
            while (v40 != v41);
            v14 = *(_DWORD *)(a1 + 32);
          }
          v38 *= 2;
        }
      }
      v15 = *(_QWORD *)(a1 + 40);
      if (v15)
      {
        v16 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v14 - 1));
        v17 = &v16[25 * v15];
        do
        {
          v18 = (_QWORD *)v16[15];
          if (v18)
          {
            do
            {
              v19 = (_QWORD *)*v18;
              operator delete(v18);
              v18 = v19;
            }
            while (v19);
          }
          v20 = (void *)v16[13];
          v16[13] = 0;
          if (v20)
            operator delete(v20);
          v21 = (void *)v16[10];
          if (v21)
          {
            v16[11] = v21;
            operator delete(v21);
          }
          v16 += 25;
        }
        while (v16 != v17);
      }
    }
  }
  else if ((unint64_t)v3 - v2 > 0xEF)
  {
    sub_20F64F8EC(v2, v3, 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3), 1);
    v22 = *(_DWORD *)(a1 + 32);
    if (v22)
    {
      v23 = *(_QWORD **)(a1 + 48);
      v24 = *(_QWORD **)(a1 + 56);
      if (v22 != 1)
      {
        v56 = 8;
        for (j = 1; j < v22; ++j)
        {
          if (v56)
          {
            v58 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * j - 16);
            v59 = &v58[25 * v56];
            do
            {
              v60 = v23;
              if (v24 != v23)
              {
                v60 = v23;
                v61 = v24 - v23;
                do
                {
                  v62 = v61 >> 1;
                  v63 = &v60[v61 >> 1];
                  v65 = *v63;
                  v64 = v63 + 1;
                  v61 += ~(v61 >> 1);
                  if (v65 < (unint64_t)v58)
                    v60 = v64;
                  else
                    v61 = v62;
                }
                while (v61);
              }
              if (v60 == v24 || (_QWORD *)*v60 != v58)
              {
                v66 = (_QWORD *)v58[15];
                if (v66)
                {
                  do
                  {
                    v67 = (_QWORD *)*v66;
                    operator delete(v66);
                    v66 = v67;
                  }
                  while (v67);
                }
                v68 = (void *)v58[13];
                v58[13] = 0;
                if (v68)
                  operator delete(v68);
                v69 = (void *)v58[10];
                if (v69)
                {
                  v58[11] = v69;
                  operator delete(v69);
                }
              }
              v58 += 25;
            }
            while (v58 != v59);
            v22 = *(_DWORD *)(a1 + 32);
          }
          v56 *= 2;
        }
      }
      v25 = *(_QWORD *)(a1 + 40);
      if (v25)
      {
        v26 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v22 - 1));
        v27 = &v26[25 * v25];
        do
        {
          v28 = v23;
          if (v24 != v23)
          {
            v28 = v23;
            v29 = v24 - v23;
            do
            {
              v30 = v29 >> 1;
              v31 = &v28[v29 >> 1];
              v33 = *v31;
              v32 = v31 + 1;
              v29 += ~(v29 >> 1);
              if (v33 < (unint64_t)v26)
                v28 = v32;
              else
                v29 = v30;
            }
            while (v29);
          }
          if (v28 == v24 || (_QWORD *)*v28 != v26)
          {
            v34 = (_QWORD *)v26[15];
            if (v34)
            {
              do
              {
                v35 = (_QWORD *)*v34;
                operator delete(v34);
                v34 = v35;
              }
              while (v35);
            }
            v36 = (void *)v26[13];
            v26[13] = 0;
            if (v36)
              operator delete(v36);
            v37 = (void *)v26[10];
            if (v37)
            {
              v26[11] = v37;
              operator delete(v37);
            }
          }
          v26 += 25;
        }
        while (v26 != v27);
      }
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    if (v4)
    {
      if (v4 != 1)
      {
        v46 = 8;
        for (k = 1; k < v4; ++k)
        {
          if (v46)
          {
            v48 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * k - 16);
            v49 = &v48[25 * v46];
            do
            {
              v51 = *(_QWORD **)(a1 + 48);
              v50 = *(_QWORD **)(a1 + 56);
              if (v51 != v50)
              {
                while ((_QWORD *)*v51 != v48)
                {
                  if (++v51 == v50)
                  {
                    v51 = *(_QWORD **)(a1 + 56);
                    break;
                  }
                }
              }
              if (v51 == v50)
              {
                v52 = (_QWORD *)v48[15];
                if (v52)
                {
                  do
                  {
                    v53 = (_QWORD *)*v52;
                    operator delete(v52);
                    v52 = v53;
                  }
                  while (v53);
                }
                v54 = (void *)v48[13];
                v48[13] = 0;
                if (v54)
                  operator delete(v54);
                v55 = (void *)v48[10];
                if (v55)
                {
                  v48[11] = v55;
                  operator delete(v55);
                }
              }
              v48 += 25;
            }
            while (v48 != v49);
            v4 = *(_DWORD *)(a1 + 32);
          }
          v46 *= 2;
        }
      }
      v5 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
        v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
        v7 = &v6[25 * v5];
        do
        {
          v9 = *(_QWORD **)(a1 + 48);
          v8 = *(_QWORD **)(a1 + 56);
          if (v9 != v8)
          {
            while ((_QWORD *)*v9 != v6)
            {
              if (++v9 == v8)
              {
                v9 = *(_QWORD **)(a1 + 56);
                break;
              }
            }
          }
          if (v9 == v8)
          {
            v10 = (_QWORD *)v6[15];
            if (v10)
            {
              do
              {
                v11 = (_QWORD *)*v10;
                operator delete(v10);
                v10 = v11;
              }
              while (v11);
            }
            v12 = (void *)v6[13];
            v6[13] = 0;
            if (v12)
              operator delete(v12);
            v13 = (void *)v6[10];
            if (v13)
            {
              v6[11] = v13;
              operator delete(v13);
            }
          }
          v6 += 25;
        }
        while (v6 != v7);
      }
    }
  }
}

uint64_t sub_20F64F8EC(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t **v78;
  unint64_t *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *(a2 - 1);
        v68 = *v8;
        if (v67 < *v8)
        {
          *v8 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3:
        v69 = *v8;
        v70 = v8[1];
        v71 = *(a2 - 1);
        if (v70 >= *v8)
        {
          if (v71 < v70)
          {
            v8[1] = v71;
            *(a2 - 1) = v70;
            v113 = *v8;
            v112 = v8[1];
            if (v112 < *v8)
            {
              *v8 = v112;
              v8[1] = v113;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            *v8 = v70;
            v8[1] = v69;
            v120 = *(a2 - 1);
            if (v120 >= v69)
              return result;
            v8[1] = v120;
          }
          else
          {
            *v8 = v71;
          }
          *(a2 - 1) = v69;
        }
        return result;
      case 4:
        v72 = v8 + 1;
        v73 = (unint64_t *)v8[1];
        v74 = v8 + 2;
        v75 = v8[2];
        v76 = (unint64_t *)*v8;
        if ((unint64_t)v73 >= *v8)
        {
          if (v75 >= (unint64_t)v73)
          {
LABEL_181:
            v73 = (unint64_t *)v75;
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
LABEL_182:
            *v74 = v114;
            *(a2 - 1) = (unint64_t)v73;
            v117 = *v74;
            v118 = *v72;
            if (v117 < v118)
            {
              v8[1] = v117;
              v8[2] = v118;
              v119 = *v8;
              if (v117 < *v8)
              {
                *v8 = v117;
                v8[1] = v119;
              }
            }
            return result;
          }
          *v72 = v75;
          *v74 = (unint64_t)v73;
          v77 = v8;
          v78 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v73;
          if (v75 >= (unint64_t)v76)
          {
LABEL_173:
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
            goto LABEL_182;
          }
        }
        else
        {
          v77 = v8;
          v78 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v75 >= (unint64_t)v73)
          {
            *v8 = (unint64_t)v73;
            v8[1] = (unint64_t)v76;
            v77 = v8 + 1;
            v78 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v76;
            if (v75 >= (unint64_t)v76)
              goto LABEL_181;
          }
        }
        *v77 = v75;
        *v78 = v76;
        v73 = (unint64_t *)result;
        goto LABEL_173;
      case 5:
        return (uint64_t)sub_20F2B3110(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v89 = (unint64_t)(v10 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = &v8[v92];
                  if (2 * v90 + 2 >= v10)
                  {
                    v94 = *v93;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (*v93 >= *v96)
                      goto LABEL_147;
                  }
                  else
                  {
                    v94 = v93[1];
                    v95 = *v93 >= v94;
                    if (*v93 < v94)
                      ++v93;
                    else
                      v94 = *v93;
                    if (!v95)
                      v92 = 2 * v90 + 2;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (v94 >= *v96)
                    {
LABEL_147:
                      while (1)
                      {
                        *v96 = v94;
                        v96 = v93;
                        if (v89 < v92)
                          break;
                        v98 = (2 * v92) | 1;
                        v93 = &v8[v98];
                        v92 = 2 * v92 + 2;
                        if (v92 < v10)
                        {
                          v94 = *v93;
                          result = (uint64_t)(v93 + 1);
                          if (*v93 >= v93[1])
                          {
                            v92 = v98;
                          }
                          else
                          {
                            v94 = v93[1];
                            ++v93;
                          }
                          if (v94 < v97)
                            break;
                        }
                        else
                        {
                          v94 = *v93;
                          v92 = v98;
                          if (*v93 < v97)
                            break;
                        }
                      }
                      *v96 = v97;
                    }
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v9 >> 3;
              do
              {
                v100 = 0;
                v101 = *v8;
                v102 = (unint64_t)(v99 - 2) >> 1;
                v103 = v8;
                do
                {
                  while (1)
                  {
                    v105 = &v103[v100 + 1];
                    v106 = (2 * v100) | 1;
                    v100 = 2 * v100 + 2;
                    if (v100 < v99)
                      break;
                    v100 = v106;
                    *v103 = *v105;
                    v103 = v105;
                    if (v106 > v102)
                      goto LABEL_161;
                  }
                  v104 = *v105;
                  if (*v105 >= v105[1])
                  {
                    v100 = v106;
                  }
                  else
                  {
                    v104 = v105[1];
                    ++v105;
                  }
                  *v103 = v104;
                  v103 = v105;
                }
                while (v100 <= v102);
LABEL_161:
                if (v105 == --a2)
                {
                  *v105 = v101;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v101;
                  v107 = (char *)v105 - (char *)v8 + 8;
                  if (v107 >= 9)
                  {
                    v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                    v109 = &v8[v108];
                    v110 = *v109;
                    v111 = *v105;
                    if (*v109 < *v105)
                    {
                      do
                      {
                        *v105 = v110;
                        v105 = v109;
                        if (!v108)
                          break;
                        v108 = (v108 - 1) >> 1;
                        v109 = &v8[v108];
                        v110 = *v109;
                      }
                      while (*v109 < v111);
                      *v105 = v111;
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = *v8;
                *v8 = v40;
                *v12 = v42;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v43 = *v8;
            *v8 = v39;
            *v12 = v43;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v59 = v8 + 1;
              do
              {
                v8 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v58 = v8[1];
                ++v8;
              }
              while (v20 >= v58);
            }
            v60 = a2;
            if (v8 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v20 < v61);
            }
            if (v8 < v60)
            {
              v62 = *v8;
              v63 = *v60;
              do
              {
                *v8 = v63;
                *v60 = v62;
                do
                {
                  v64 = v8[1];
                  ++v8;
                  v62 = v64;
                }
                while (v20 >= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v20 < v65);
              }
              while (v8 < v60);
            }
            v66 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v66;
            a4 = 0;
            *v66 = v20;
            continue;
          }
          v57 = *v8;
          *v8 = v41;
          *v12 = v57;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v44 = 0;
          do
            v45 = v8[++v44];
          while (v45 < v20);
          v46 = &v8[v44];
          v47 = a2;
          if (v44 == 1)
          {
            v47 = a2;
            do
            {
              if (v46 >= v47)
                break;
              v49 = *--v47;
            }
            while (v49 >= v20);
          }
          else
          {
            do
              v48 = *--v47;
            while (v48 >= v20);
          }
          if (v46 >= v47)
          {
            v55 = v46 - 1;
            if (v46 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v50 = *v47;
            v51 = &v8[v44];
            v52 = v47;
            do
            {
              *v51 = v50;
              *v52 = v45;
              do
              {
                v53 = v51[1];
                ++v51;
                v45 = v53;
              }
              while (v53 < v20);
              do
              {
                v54 = *--v52;
                v50 = v54;
              }
              while (v54 >= v20);
            }
            while (v51 < v52);
            v55 = v51 - 1;
            if (v51 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v55;
          }
LABEL_74:
          *v55 = v20;
          if (v46 < v47)
            goto LABEL_77;
          v56 = sub_20F650254(v8, v55);
          v8 = v55 + 1;
          result = sub_20F650254(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_77:
            result = sub_20F64F8EC(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v79 = v8 + 1;
        v81 = v8 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 8;
            v83 = v8;
            do
            {
              v86 = *v83;
              v85 = v83[1];
              v83 = v79;
              if (v85 < v86)
              {
                v87 = v82;
                do
                {
                  *(unint64_t *)((char *)v8 + v87) = v86;
                  v88 = v87 - 8;
                  if (v87 == 8)
                  {
                    v84 = v8;
                    goto LABEL_121;
                  }
                  v86 = *(unint64_t *)((char *)v8 + v87 - 16);
                  v87 -= 8;
                }
                while (v85 < v86);
                v84 = (unint64_t *)((char *)v8 + v88);
LABEL_121:
                *v84 = v85;
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v116 = *v7;
            v115 = v7[1];
            v7 = v79;
            if (v115 < v116)
            {
              do
              {
                *v79 = v116;
                v116 = *(v79 - 2);
                --v79;
              }
              while (v115 < v116);
              *v79 = v115;
            }
            v79 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F650254(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

void sub_20F650558(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA01CA8;
  sub_20F58A570(a1 + 971);
  v2 = (_QWORD *)a1[970];
  if (v2 == a1 + 967)
  {
    v3 = 4;
    v2 = a1 + 967;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_20F4FD380((uint64_t)(a1 + 945));
  sub_20F4FC554(a1 + 14);
  v4 = a1[4];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F650620(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v10[6];
  _QWORD v11[7];
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 9088);
  v3 = *(_QWORD *)(a1 + 9096);
  __asm { FMOV            V1.2D, #1.0 }
  v10[0] = _Q1;
  v10[1] = _Q1;
  v10[2] = _Q1;
  v10[3] = _Q1;
  v10[4] = _Q1;
  v10[5] = _Q1;
  v16 = 0;
  v15 = v3;
  v14 = 0;
  v12 = 0;
  v13 = a2;
  v11[0] = v2;
  v11[1] = &v12;
  v11[2] = v10;
  v11[3] = &v13;
  v11[4] = &v14;
  v11[5] = &v16;
  v11[6] = &v15;
  return sub_20F6506BC(v11);
}

uint64_t sub_20F650690(uint64_t a1)
{
  return **(_QWORD **)(a1 + 9088);
}

uint64_t sub_20F65069C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 9088);
}

uint64_t sub_20F6506A8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 9088) + 8);
}

#error "20F6506BC: too big function (funcsize=0)"

void sub_20F6A8B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F6A8B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F6A8B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F6A8BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F6A8BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F6A8BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F6A8BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F6A8BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F6A8C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F6A8C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

BOOL sub_20F6A8C34(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  _OWORD *v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t *v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t *v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v216;
  float64x2_t v217;

  v6 = (_OWORD *)(a1 + 152);
  v7 = sub_20FC7ACA4(a1, (_QWORD *)(a1 + 48), a1 + 152, (uint64_t)a3);
  *(_BYTE *)(a1 + 176) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 184);
    if (v9)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v10 = *(float64x2_t **)(a1 + 184);
      v11 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v10->f64[0] + 16))(v10);
      switch(v11)
      {
        case 0:
          v12 = v10[1];
          v13 = v10[2];
          goto LABEL_8;
        case 1:
          v14 = a3[1];
          v15 = vmulq_f64(*a3, v10[1]);
          v17 = a3[4];
          v16 = a3[5];
          v19 = a3[2];
          v18 = a3[3];
          *a3 = v15;
          v20 = vmulq_f64(v14, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          v21 = vmulq_f64(v19, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          v22 = vmulq_f64(v18, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          v23 = vmulq_f64(v17, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          a3[4] = v23;
          v24 = vmulq_f64(v16, v10[1]);
          a3[2] = v21;
          a3[3] = v22;
          *a3 = v15;
          a3[1] = v20;
          a3[4] = v23;
          a3[5] = v24;
          break;
        case 2:
          v25 = v10[1].f64[0];
          v26 = vmulq_n_f64(a3[5], v25);
          v27 = vmulq_n_f64(a3[4], v25);
          v28 = vmulq_n_f64(a3[3], v25);
          v29 = vmulq_n_f64(a3[2], v25);
          v30 = vmulq_n_f64(a3[1], v25);
          *a3 = vmulq_n_f64(*a3, v25);
          a3[1] = v30;
          a3[2] = v29;
          a3[3] = v28;
          a3[4] = v27;
          a3[5] = v26;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v12 = v216;
          v13 = v217;
LABEL_8:
          v31 = a3[5];
          v32 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[1].f64[0]), v13, a3[1], 1);
          v33 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[2].f64[0]), v13, a3[2], 1);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[3].f64[0]), v13, a3[3], 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[4].f64[0]), v13, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3->f64[0]), v13, *a3, 1);
          a3[1] = v32;
          a3[2] = v33;
          a3[3] = v34;
          a3[4] = v35;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v12, v31.f64[0]), v13, v31, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v36 = v10[1];
          v37 = v10[2];
          goto LABEL_14;
        case 1:
          v38 = a3[7];
          v39 = vmulq_f64(a3[6], v10[1]);
          v41 = a3[10];
          v40 = a3[11];
          v43 = a3[8];
          v42 = a3[9];
          a3[6] = v39;
          v44 = vmulq_f64(v38, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          v45 = vmulq_f64(v43, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          v46 = vmulq_f64(v42, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          v47 = vmulq_f64(v41, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          a3[10] = v47;
          v48 = vmulq_f64(v40, v10[1]);
          a3[8] = v45;
          a3[9] = v46;
          a3[6] = v39;
          a3[7] = v44;
          a3[10] = v47;
          a3[11] = v48;
          break;
        case 2:
          v49 = v10[1].f64[0];
          v50 = vmulq_n_f64(a3[11], v49);
          v51 = vmulq_n_f64(a3[10], v49);
          v52 = vmulq_n_f64(a3[9], v49);
          v53 = vmulq_n_f64(a3[8], v49);
          v54 = vmulq_n_f64(a3[7], v49);
          a3[6] = vmulq_n_f64(a3[6], v49);
          a3[7] = v54;
          a3[8] = v53;
          a3[9] = v52;
          a3[10] = v51;
          a3[11] = v50;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v36 = v216;
          v37 = v217;
LABEL_14:
          v55 = a3[11];
          v56 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[7].f64[0]), v37, a3[7], 1);
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[8].f64[0]), v37, a3[8], 1);
          v58 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[9].f64[0]), v37, a3[9], 1);
          v59 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[10].f64[0]), v37, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[6].f64[0]), v37, a3[6], 1);
          a3[7] = v56;
          a3[8] = v57;
          a3[9] = v58;
          a3[10] = v59;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v36, v55.f64[0]), v37, v55, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v60 = v10[1];
          v61 = v10[2];
          goto LABEL_20;
        case 1:
          v62 = a3[13];
          v63 = vmulq_f64(a3[12], v10[1]);
          v65 = a3[16];
          v64 = a3[17];
          v67 = a3[14];
          v66 = a3[15];
          a3[12] = v63;
          v68 = vmulq_f64(v62, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          v69 = vmulq_f64(v67, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          v70 = vmulq_f64(v66, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          v71 = vmulq_f64(v65, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          a3[16] = v71;
          v72 = vmulq_f64(v64, v10[1]);
          a3[14] = v69;
          a3[15] = v70;
          a3[12] = v63;
          a3[13] = v68;
          a3[16] = v71;
          a3[17] = v72;
          break;
        case 2:
          v73 = v10[1].f64[0];
          v74 = vmulq_n_f64(a3[17], v73);
          v75 = vmulq_n_f64(a3[16], v73);
          v76 = vmulq_n_f64(a3[15], v73);
          v77 = vmulq_n_f64(a3[14], v73);
          v78 = vmulq_n_f64(a3[13], v73);
          a3[12] = vmulq_n_f64(a3[12], v73);
          a3[13] = v78;
          a3[14] = v77;
          a3[15] = v76;
          a3[16] = v75;
          a3[17] = v74;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v60 = v216;
          v61 = v217;
LABEL_20:
          v79 = a3[17];
          v80 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[13].f64[0]), v61, a3[13], 1);
          v81 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[14].f64[0]), v61, a3[14], 1);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[15].f64[0]), v61, a3[15], 1);
          v83 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[16].f64[0]), v61, a3[16], 1);
          a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[12].f64[0]), v61, a3[12], 1);
          a3[13] = v80;
          a3[14] = v81;
          a3[15] = v82;
          a3[16] = v83;
          a3[17] = vmlaq_laneq_f64(vmulq_n_f64(v60, v79.f64[0]), v61, v79, 1);
          break;
        default:
          break;
      }
      v84 = a3 + 18;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        switch(v11)
        {
          case 0:
            v85 = v10[1];
            v86 = v10[2];
            goto LABEL_27;
          case 1:
            v87 = a3[19];
            v88 = vmulq_f64(*v84, v10[1]);
            v90 = a3[22];
            v89 = a3[23];
            v92 = a3[20];
            v91 = a3[21];
            *v84 = v88;
            v93 = vmulq_f64(v87, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            v94 = vmulq_f64(v92, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            v95 = vmulq_f64(v91, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            v96 = vmulq_f64(v90, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            a3[22] = v96;
            v97 = vmulq_f64(v89, v10[1]);
            a3[20] = v94;
            a3[21] = v95;
            *v84 = v88;
            a3[19] = v93;
            a3[22] = v96;
            a3[23] = v97;
            break;
          case 2:
            v98 = v10[1].f64[0];
            v99 = vmulq_n_f64(a3[23], v98);
            v100 = vmulq_n_f64(a3[22], v98);
            v101 = vmulq_n_f64(a3[21], v98);
            v102 = vmulq_n_f64(a3[20], v98);
            v103 = vmulq_n_f64(a3[19], v98);
            *v84 = vmulq_n_f64(*v84, v98);
            a3[19] = v103;
            a3[20] = v102;
            a3[21] = v101;
            a3[22] = v100;
            a3[23] = v99;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v85 = v216;
            v86 = v217;
LABEL_27:
            v104 = a3[23];
            v105 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[19].f64[0]), v86, a3[19], 1);
            v106 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[20].f64[0]), v86, a3[20], 1);
            v107 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[21].f64[0]), v86, a3[21], 1);
            v108 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[22].f64[0]), v86, a3[22], 1);
            a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[18].f64[0]), v86, a3[18], 1);
            a3[19] = v105;
            a3[20] = v106;
            a3[21] = v107;
            a3[22] = v108;
            a3[23] = vmlaq_laneq_f64(vmulq_n_f64(v85, v104.f64[0]), v86, v104, 1);
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v11)
        {
          case 0:
            v109 = v10[1];
            v110 = v10[2];
            goto LABEL_34;
          case 1:
            v111 = a3[25];
            v112 = vmulq_f64(a3[24], v10[1]);
            v114 = a3[26];
            v113 = a3[27];
            a3[24] = v112;
            v115 = vmulq_f64(v111, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            v116 = vmulq_f64(v114, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            v117 = vmulq_f64(v113, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            a3[27] = v117;
            break;
          case 2:
            v118 = v10[1].f64[0];
            v119 = vmulq_n_f64(a3[25], v118);
            v120 = vmulq_n_f64(a3[24], v118);
            v121 = vmulq_n_f64(a3[27], v118);
            a3[26] = vmulq_n_f64(a3[26], v118);
            a3[27] = v121;
            a3[24] = v120;
            a3[25] = v119;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v109 = v216;
            v110 = v217;
LABEL_34:
            v122 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[24].f64[0]), v110, a3[24], 1);
            v123 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[25].f64[0]), v110, a3[25], 1);
            v124 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[26].f64[0]), v110, a3[26], 1);
            v125 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[27].f64[0]), v110, a3[27], 1);
            a3[24] = v122;
            a3[25] = v123;
            a3[26] = v124;
            a3[27] = v125;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v11)
        {
          case 0:
            v126 = v10[1];
            v127 = v10[2];
            goto LABEL_41;
          case 1:
            v128 = a3[29];
            v129 = vmulq_f64(a3[28], v10[1]);
            v131 = a3[30];
            v130 = a3[31];
            a3[28] = v129;
            v132 = vmulq_f64(v128, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            v133 = vmulq_f64(v131, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            v134 = vmulq_f64(v130, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            a3[31] = v134;
            break;
          case 2:
            v135 = v10[1].f64[0];
            v136 = vmulq_n_f64(a3[29], v135);
            v137 = vmulq_n_f64(a3[28], v135);
            v138 = vmulq_n_f64(a3[31], v135);
            a3[30] = vmulq_n_f64(a3[30], v135);
            a3[31] = v138;
            a3[28] = v137;
            a3[29] = v136;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v126 = v216;
            v127 = v217;
LABEL_41:
            v139 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[28].f64[0]), v127, a3[28], 1);
            v140 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[29].f64[0]), v127, a3[29], 1);
            v141 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[30].f64[0]), v127, a3[30], 1);
            v142 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[31].f64[0]), v127, a3[31], 1);
            a3[28] = v139;
            a3[29] = v140;
            a3[30] = v141;
            a3[31] = v142;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v11)
        {
          case 0:
            v143 = v10[1];
            v144 = v10[2];
            goto LABEL_48;
          case 1:
            v145 = a3[33];
            v146 = vmulq_f64(a3[32], v10[1]);
            v148 = a3[34];
            v147 = a3[35];
            a3[32] = v146;
            v149 = vmulq_f64(v145, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            v150 = vmulq_f64(v148, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            v151 = vmulq_f64(v147, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            a3[35] = v151;
            break;
          case 2:
            v152 = v10[1].f64[0];
            v153 = vmulq_n_f64(a3[33], v152);
            v154 = vmulq_n_f64(a3[32], v152);
            v155 = vmulq_n_f64(a3[35], v152);
            a3[34] = vmulq_n_f64(a3[34], v152);
            a3[35] = v155;
            a3[32] = v154;
            a3[33] = v153;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v143 = v216;
            v144 = v217;
LABEL_48:
            v156 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[32].f64[0]), v144, a3[32], 1);
            v157 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[33].f64[0]), v144, a3[33], 1);
            v158 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[34].f64[0]), v144, a3[34], 1);
            v159 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[35].f64[0]), v144, a3[35], 1);
            a3[32] = v156;
            a3[33] = v157;
            a3[34] = v158;
            a3[35] = v159;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        switch(v11)
        {
          case 0:
            v160 = v10[1];
            v161 = v10[2];
            goto LABEL_55;
          case 1:
            v162 = a3[37];
            v163 = vmulq_f64(a3[36], v10[1]);
            v165 = a3[38];
            v164 = a3[39];
            a3[36] = v163;
            v166 = vmulq_f64(v162, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            v167 = vmulq_f64(v165, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            v168 = vmulq_f64(v164, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            a3[39] = v168;
            break;
          case 2:
            v169 = v10[1].f64[0];
            v170 = vmulq_n_f64(a3[37], v169);
            v171 = vmulq_n_f64(a3[36], v169);
            v172 = vmulq_n_f64(a3[39], v169);
            a3[38] = vmulq_n_f64(a3[38], v169);
            a3[39] = v172;
            a3[36] = v171;
            a3[37] = v170;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v160 = v216;
            v161 = v217;
LABEL_55:
            v173 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[36].f64[0]), v161, a3[36], 1);
            v174 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[37].f64[0]), v161, a3[37], 1);
            v175 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[38].f64[0]), v161, a3[38], 1);
            v176 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[39].f64[0]), v161, a3[39], 1);
            a3[36] = v173;
            a3[37] = v174;
            a3[38] = v175;
            a3[39] = v176;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        v177 = a3 + 40;
        switch(v11)
        {
          case 0:
            v178 = v10[1];
            v179 = v10[2];
            goto LABEL_62;
          case 1:
            v180 = a3[41];
            v181 = vmulq_f64(*v177, v10[1]);
            v182 = a3[42];
            *v177 = v181;
            v183 = vmulq_f64(v180, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            v184 = vmulq_f64(v182, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            a3[42] = v184;
            break;
          case 2:
            v185 = v10[1].f64[0];
            v186 = vmulq_n_f64(a3[42], v185);
            v187 = vmulq_n_f64(a3[41], v185);
            *v177 = vmulq_n_f64(*v177, v185);
            a3[41] = v187;
            a3[42] = v186;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v178 = v216;
            v179 = v217;
LABEL_62:
            v188 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[40].f64[0]), v179, a3[40], 1);
            v189 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[41].f64[0]), v179, a3[41], 1);
            v190 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[42].f64[0]), v179, a3[42], 1);
            a3[40] = v188;
            a3[41] = v189;
            a3[42] = v190;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        v191 = a3 + 43;
        switch(v11)
        {
          case 0:
            v192 = v10[1];
            v193 = v10[2];
            goto LABEL_69;
          case 1:
            v194 = a3[44];
            v195 = vmulq_f64(*v191, v10[1]);
            v196 = a3[45];
            *v191 = v195;
            v197 = vmulq_f64(v194, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            v198 = vmulq_f64(v196, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            a3[45] = v198;
            break;
          case 2:
            v199 = v10[1].f64[0];
            v200 = vmulq_n_f64(a3[45], v199);
            v201 = vmulq_n_f64(a3[44], v199);
            *v191 = vmulq_n_f64(*v191, v199);
            a3[44] = v201;
            a3[45] = v200;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v192 = v216;
            v193 = v217;
LABEL_69:
            v202 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[43].f64[0]), v193, a3[43], 1);
            v203 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[44].f64[0]), v193, a3[44], 1);
            v204 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[45].f64[0]), v193, a3[45], 1);
            a3[43] = v202;
            a3[44] = v203;
            a3[45] = v204;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch(v11)
        {
          case 0:
            v205 = v10[1];
            v206 = v10[2];
            goto LABEL_76;
          case 1:
            v207 = vmulq_f64(a3[46], v10[1]);
            goto LABEL_77;
          case 2:
            v207 = vmulq_n_f64(a3[46], v10[1].f64[0]);
            goto LABEL_77;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v205 = v216;
            v206 = v217;
LABEL_76:
            v207 = vmlaq_laneq_f64(vmulq_n_f64(v205, a3[46].f64[0]), v206, a3[46], 1);
LABEL_77:
            a3[46] = v207;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 136) = *v6;
    _Q0 = *(_OWORD *)(a1 + 152);
    _D2 = *(_QWORD *)(a1 + 160);
    __asm { FMLA            D1, D2, V0.D[1] }
    v8 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 168) = v8;
  return v7;
}

uint64_t sub_20F6A97B0(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  float64x2_t *v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  void *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t *v48;
  const void *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v56;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  _QWORD *v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  uint64_t v123;
  uint64_t v124;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v138;
  float64x2_t v155[113];
  char v156;
  float64x2_t v157[112];
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7848;
  v7 = a1 + 7688;
  v8 = sub_20F565D3C(a1);
  *(_BYTE *)(v6 + 128) = v8;
  v9 = 0.0;
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)(a1 + 7984);
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v10 + 24))(v10, v6, 0.0);
      v11 = *(float64x2_t **)(a1 + 7984);
      v12 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v11->f64[0] + 16))(v11);
      sub_20F576E60((float64x2_t *)&v156, v7, a3, v13, v14, v15, v16, v17, v18, v19, v11, v12);
      sub_20F572AE8(&v156, v20, v21, v22, v23, v24, v25, v26, v7, a3, v11, v12);
      sub_20F56FE10((float64_t *)&v156, v27, v28, v29, v30, v31, v32, v33, v34, v7, (uint64_t)a3, v11, v12);
      v43 = sub_20F56BAB4(&v156, v35, v36, v37, v38, v39, v40, v41, v42, v7, (uint64_t)a3, v11, v12);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7720) + 20))
      {
        v48 = a3 + 225;
        switch(v12)
        {
          case 0:
            if ((float64x2_t *)&a3[232].f64[1] > &v11[1] && (float64x2_t *)&v11[113].f64[1] > v48)
            {
              MEMORY[0x24BDAC7A8](v43);
              v43 = memcpy(v155, v49, 0x708uLL);
            }
            MEMORY[0x24BDAC7A8](v43);
            v50 = a3[226];
            v155[-8] = *v48;
            v155[-7] = v50;
            v51 = a3[228];
            v155[-6] = a3[227];
            v155[-5] = v51;
            v52 = a3[230];
            v155[-4] = a3[229];
            v155[-3] = v52;
            v155[-1].f64[0] = a3[232].f64[0];
            v155[-2] = a3[231];
            _Q7 = v155[-8];
            _Q17 = _Q7;
            v56 = v155[-7];
            _Q1 = v56;
            v59 = v155[-6];
            _Q2 = v59;
            v61 = v155[-5];
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 16), _Q7.f64[0]), *(float64x2_t *)(v53 + 136), _Q7, 1), *(float64x2_t *)(v53 + 256), v56.f64[0]), *(float64x2_t *)(v54 + 104), v56, 1), *(float64x2_t *)(v53 + 496), v59.f64[0]), *(float64x2_t *)(v53 + 616), v59,
                        1),
                      *(float64x2_t *)(v53 + 736),
                      v61.f64[0]),
                    *(float64x2_t *)(v53 + 856),
                    v61,
                    1);
            _Q3 = v61;
            v64 = v155[-4];
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v53, _Q7.f64[0]), *(float64x2_t *)(v53 + 120), _Q7, 1), *(float64x2_t *)(v53 + 240), v56.f64[0]), *(float64x2_t *)(v54 + 88), v56, 1), *(float64x2_t *)(v53 + 480), v59.f64[0]),
                            *(float64x2_t *)(v53 + 600),
                            v59,
                            1),
                          *(float64x2_t *)(v53 + 720),
                          v61.f64[0]),
                        *(float64x2_t *)(v53 + 840),
                        v61,
                        1),
                      *(float64x2_t *)(v53 + 960),
                      v64.f64[0]),
                    *(float64x2_t *)(v53 + 1080),
                    v64,
                    1);
            _Q4 = v64;
            v67 = v155[-3];
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, *(float64x2_t *)(v53 + 976), v64.f64[0]), *(float64x2_t *)(v53 + 1096), v64, 1), *(float64x2_t *)(v53 + 1216), v67.f64[0]), *(float64x2_t *)(v53 + 1336), v67, 1);
            _Q5 = v67;
            v70 = v155[-2];
            v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, *(float64x2_t *)(v53 + 1200), v67.f64[0]), *(float64x2_t *)(v53 + 1320), v67, 1), *(float64x2_t *)(v53 + 1440), v70.f64[0]);
            v67.f64[0] = v155[-1].f64[0];
            v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, *(float64x2_t *)(v53 + 1456), v70.f64[0]), *(float64x2_t *)(v53 + 1576), v70, 1), *(float64x2_t *)(v53 + 1696), v67.f64[0]);
            *v48 = vmlaq_n_f64(vmlaq_laneq_f64(v71, *(float64x2_t *)(v53 + 1560), v70, 1), *(float64x2_t *)(v53 + 1680), v67.f64[0]);
            a3[226] = v72;
            v73 = v155[-8];
            v74 = v155[-7];
            v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 32), v73.f64[0]), *(float64x2_t *)(v53 + 152), v73, 1), *(float64x2_t *)(v53 + 272), v74.f64[0]), *(float64x2_t *)(v54 + 120), v74, 1);
            v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 48), v73.f64[0]), *(float64x2_t *)(v53 + 168), v73, 1), *(float64x2_t *)(v53 + 288), v74.f64[0]), *(float64x2_t *)(v54 + 136), v74, 1);
            v77 = v155[-6];
            v78 = v155[-5];
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v76, *(float64x2_t *)(v53 + 528), v77.f64[0]), *(float64x2_t *)(v53 + 648), v77, 1), *(float64x2_t *)(v53 + 768), v78.f64[0]), *(float64x2_t *)(v53 + 888), v78, 1);
            v80 = v155[-4];
            v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v75, *(float64x2_t *)(v53 + 512), v77.f64[0]), *(float64x2_t *)(v53 + 632), v77, 1), *(float64x2_t *)(v53 + 752), v78.f64[0]), *(float64x2_t *)(v53 + 872), v78, 1), *(float64x2_t *)(v53 + 992), v80.f64[0]);
            v82 = v155[-3];
            v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v81, *(float64x2_t *)(v53 + 1112), v80, 1), *(float64x2_t *)(v53 + 1232), v82.f64[0]), *(float64x2_t *)(v53 + 1352), v82, 1);
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v79, *(float64x2_t *)(v53 + 1008), v80.f64[0]), *(float64x2_t *)(v53 + 1128), v80, 1), *(float64x2_t *)(v53 + 1248), v82.f64[0]), *(float64x2_t *)(v53 + 1368), v82, 1);
            v85 = v155[-2];
            v86 = v155[-1].f64[0];
            v87 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v84, *(float64x2_t *)(v53 + 1488), v85.f64[0]), *(float64x2_t *)(v53 + 1608), v85, 1), *(float64x2_t *)(v53 + 1728), v86);
            a3[227] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v83, *(float64x2_t *)(v53 + 1472), v85.f64[0]), *(float64x2_t *)(v53 + 1592), v85, 1), *(float64x2_t *)(v53 + 1712), v86);
            a3[228] = v87;
            v88 = v155[-8];
            _Q16 = v155[-7];
            v90 = v155[-6];
            v91 = v155[-5];
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 64), v88.f64[0]), *(float64x2_t *)(v53 + 184), v88, 1), *(float64x2_t *)(v53 + 304), _Q16.f64[0]), *(float64x2_t *)(v54 + 152), _Q16, 1), *(float64x2_t *)(v53 + 544), v90.f64[0]), *(float64x2_t *)(v53 + 664), v90,
                        1),
                      *(float64x2_t *)(v53 + 784),
                      v91.f64[0]),
                    *(float64x2_t *)(v53 + 904),
                    v91,
                    1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 80), v88.f64[0]), *(float64x2_t *)(v53 + 200), v88, 1), *(float64x2_t *)(v53 + 320), _Q16.f64[0]), *(float64x2_t *)(v54 + 168), _Q16, 1), *(float64x2_t *)(v53 + 560), v90.f64[0]), *(float64x2_t *)(v53 + 680), v90,
                        1),
                      *(float64x2_t *)(v53 + 800),
                      v91.f64[0]),
                    *(float64x2_t *)(v53 + 920),
                    v91,
                    1);
            v94 = v155[-4];
            _Q18 = v155[-3];
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v92, *(float64x2_t *)(v53 + 1024), v94.f64[0]), *(float64x2_t *)(v53 + 1144), v94, 1), *(float64x2_t *)(v53 + 1264), _Q18.f64[0]), *(float64x2_t *)(v53 + 1384), _Q18, 1);
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, *(float64x2_t *)(v53 + 1040), v94.f64[0]), *(float64x2_t *)(v53 + 1160), v94, 1), *(float64x2_t *)(v53 + 1280), _Q18.f64[0]), *(float64x2_t *)(v53 + 1400), _Q18, 1);
            v98 = v155[-2];
            _Q18.f64[0] = v155[-1].f64[0];
            _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v97, *(float64x2_t *)(v53 + 1520), v98.f64[0]), *(float64x2_t *)(v53 + 1640), v98, 1), *(float64x2_t *)(v53 + 1760), _Q18.f64[0]);
            a3[229] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, *(float64x2_t *)(v53 + 1504), v98.f64[0]), *(float64x2_t *)(v53 + 1624), v98, 1), *(float64x2_t *)(v53 + 1744), _Q18.f64[0]);
            a3[230] = _Q0;
            _Q7.f64[0] = *(float64_t *)(v53 + 232);
            _Q16.f64[0] = *(float64_t *)(v53 + 472);
            __asm
            {
              FMLA            D0, D7, V17.D[1]
              FMLA            D0, D16, V1.D[1]
            }
            _Q16.f64[0] = *(float64_t *)(v53 + 712);
            _Q7.f64[0] = *(float64_t *)(v53 + 952);
            v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v53 + 96), _Q17.f64[0]), *(float64x2_t *)(v53 + 216), _Q17, 1), *(float64x2_t *)(v53 + 336), _Q1.f64[0]), *(float64x2_t *)(v54 + 184), _Q1, 1), *(float64x2_t *)(v53 + 576), _Q2.f64[0]), *(float64x2_t *)(v53 + 696), _Q2,
                         1),
                       *(float64x2_t *)(v53 + 816),
                       _Q3.f64[0]),
                     *(float64x2_t *)(v53 + 936),
                     _Q3,
                     1);
            __asm
            {
              FMLA            D0, D16, V2.D[1]
              FMLA            D0, D7, V3.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v53 + 1192);
            _Q18.f64[0] = *(float64_t *)(v53 + 1432);
            __asm
            {
              FMLA            D0, D3, V4.D[1]
              FMLA            D0, D18, V5.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v53 + 1672);
            _Q16.f64[0] = v155[-1].f64[0];
            _Q17 = v155[-2];
            v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v104, *(float64x2_t *)(v53 + 1056), _Q4.f64[0]), *(float64x2_t *)(v53 + 1176), _Q4, 1), *(float64x2_t *)(v53 + 1296), _Q5.f64[0]), *(float64x2_t *)(v53 + 1416), _Q5, 1), *(float64x2_t *)(v53 + 1536), _Q17.f64[0]), *(float64x2_t *)(v53 + 1656), _Q17, 1),
                     *(float64x2_t *)(v53 + 1776),
                     _Q16.f64[0]);
            __asm { FMLA            D0, D3, V17.D[1] }
            a3[232].f64[0] = _Q0.f64[0] + *(double *)(v53 + 1792) * _Q16.f64[0];
            a3[231] = v106;
            break;
          case 1:
            v46.f64[0] = a3[232].f64[0];
            v47.f64[0] = v11[8].f64[0];
            v107 = vmulq_f64(a3[225], v11[1]);
            v108 = vmulq_f64(a3[231], v11[7]);
            v109 = vmulq_f64(a3[230], v11[6]);
            v110 = vmulq_f64(a3[229], v11[5]);
            v111 = vmulq_f64(a3[228], v11[4]);
            v112 = vmulq_f64(a3[226], v11[2]);
            a3[227] = vmulq_f64(a3[227], v11[3]);
            a3[228] = v111;
            a3[229] = v110;
            a3[230] = v109;
            a3[231] = v108;
            *v48 = v107;
            a3[226] = v112;
            *(_QWORD *)&a3[232].f64[0] = *(_OWORD *)&vmulq_f64(v46, v47);
            break;
          case 2:
            v44.f64[0] = v11[1].f64[0];
            v45.f64[0] = a3[232].f64[0];
            v113 = vmulq_n_f64(a3[231], v44.f64[0]);
            v114 = vmulq_n_f64(a3[230], v44.f64[0]);
            v115 = vmulq_n_f64(a3[229], v44.f64[0]);
            v116 = vmulq_n_f64(a3[228], v44.f64[0]);
            v117 = vmulq_n_f64(a3[227], v44.f64[0]);
            v118 = vmulq_n_f64(a3[226], v44.f64[0]);
            *v48 = vmulq_n_f64(*v48, v44.f64[0]);
            a3[226] = v118;
            a3[227] = v117;
            a3[228] = v116;
            a3[229] = v115;
            a3[230] = v114;
            a3[231] = v113;
            *(_QWORD *)&a3[232].f64[0] = *(_OWORD *)&vmulq_f64(v45, v44);
            break;
          case 4:
            v119 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(v157, v11);
            MEMORY[0x24BDAC7A8](v119);
            v120 = a3[226];
            v155[105] = *v48;
            v155[106] = v120;
            v121 = a3[228];
            v155[107] = a3[227];
            v155[108] = v121;
            v122 = a3[230];
            v155[109] = a3[229];
            v155[110] = v122;
            v155[112].f64[0] = a3[232].f64[0];
            v155[111] = a3[231];
            _Q17 = v155[105];
            _Q1 = v155[106];
            _Q2 = v155[107];
            _Q3 = v155[108];
            _Q4 = v155[109];
            _Q5 = v122;
            v131 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[1], v155[105].f64[0]), *(float64x2_t *)(v123 + 136), v155[105], 1), *(float64x2_t *)(v123 + 256), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 104),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 496),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 344),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 464),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 584),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 976),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 824),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 944),
                             v155[110].f64[0]),
                           *(float64x2_t *)(v124 + 1064),
                           v155[110],
                           1),
                         *(float64x2_t *)(v123 + 1456),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1304),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1424),
                     v155[112].f64[0]);
            *v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[0], v155[105].f64[0]), *(float64x2_t *)((char *)&v157[7] + 8), v155[105], 1), *(float64x2_t *)(v123 + 240), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 88),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 480),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 328),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 448),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 568),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 960),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 808),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 928),
                             v122.f64[0]),
                           *(float64x2_t *)(v124 + 1048),
                           v122,
                           1),
                         *(float64x2_t *)(v123 + 1440),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1288),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1408),
                     v155[112].f64[0]);
            a3[226] = v131;
            v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[3], v155[105].f64[0]), *(float64x2_t *)(v123 + 168), v155[105], 1), *(float64x2_t *)(v124 + 16), v155[106].f64[0]),
                                           *(float64x2_t *)(v124 + 136),
                                           v155[106],
                                           1),
                                         *(float64x2_t *)(v123 + 528),
                                         v155[107].f64[0]),
                                       *(float64x2_t *)(v124 + 376),
                                       v155[107],
                                       1),
                                     *(float64x2_t *)(v124 + 496),
                                     v155[108].f64[0]),
                                   *(float64x2_t *)(v124 + 616),
                                   v155[108],
                                   1),
                                 *(float64x2_t *)(v123 + 1008),
                                 v155[109].f64[0]),
                               *(float64x2_t *)(v124 + 856),
                               v155[109],
                               1),
                             *(float64x2_t *)(v124 + 976),
                             v155[110].f64[0]),
                           *(float64x2_t *)(v124 + 1096),
                           v155[110],
                           1),
                         *(float64x2_t *)(v123 + 1488),
                         v155[111].f64[0]),
                       *(float64x2_t *)(v124 + 1336),
                       v155[111],
                       1),
                     *(float64x2_t *)(v124 + 1456),
                     v155[112].f64[0]);
            a3[227] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[2], v155[105].f64[0]), *(float64x2_t *)(v123 + 152), v155[105], 1), *(float64x2_t *)v124, v155[106].f64[0]),
                                              *(float64x2_t *)(v124 + 120),
                                              v155[106],
                                              1),
                                            *(float64x2_t *)(v123 + 512),
                                            v155[107].f64[0]),
                                          *(float64x2_t *)(v124 + 360),
                                          v155[107],
                                          1),
                                        *(float64x2_t *)(v124 + 480),
                                        v155[108].f64[0]),
                                      *(float64x2_t *)(v124 + 600),
                                      v155[108],
                                      1),
                                    *(float64x2_t *)(v123 + 992),
                                    v155[109].f64[0]),
                                  *(float64x2_t *)(v124 + 840),
                                  v155[109],
                                  1),
                                *(float64x2_t *)(v124 + 960),
                                v155[110].f64[0]),
                              *(float64x2_t *)(v124 + 1080),
                              v155[110],
                              1),
                            *(float64x2_t *)(v123 + 1472),
                            v155[111].f64[0]),
                          *(float64x2_t *)(v124 + 1320),
                          v155[111],
                          1),
                        *(float64x2_t *)(v124 + 1440),
                        v155[112].f64[0]);
            a3[228] = v132;
            _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[5], v155[105].f64[0]), *(float64x2_t *)(v123 + 200), v155[105], 1), *(float64x2_t *)(v124 + 48), v155[106].f64[0]),
                                          *(float64x2_t *)(v124 + 168),
                                          v155[106],
                                          1),
                                        *(float64x2_t *)(v123 + 560),
                                        v155[107].f64[0]),
                                      *(float64x2_t *)(v124 + 408),
                                      v155[107],
                                      1),
                                    *(float64x2_t *)(v124 + 528),
                                    v155[108].f64[0]),
                                  *(float64x2_t *)(v124 + 648),
                                  v155[108],
                                  1),
                                *(float64x2_t *)(v123 + 1040),
                                v155[109].f64[0]),
                              *(float64x2_t *)(v124 + 888),
                              v155[109],
                              1),
                            *(float64x2_t *)(v124 + 1008),
                            v155[110].f64[0]),
                          *(float64x2_t *)(v124 + 1128),
                          v155[110],
                          1),
                        *(float64x2_t *)(v123 + 1520),
                        v155[111].f64[0]),
                      *(float64x2_t *)(v124 + 1368),
                      v155[111],
                      1),
                    *(float64x2_t *)(v124 + 1488),
                    v155[112].f64[0]);
            a3[229] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[4], v155[105].f64[0]), *(float64x2_t *)(v123 + 184), v155[105], 1), *(float64x2_t *)(v124 + 32), v155[106].f64[0]),
                                              *(float64x2_t *)(v124 + 152),
                                              v155[106],
                                              1),
                                            *(float64x2_t *)(v123 + 544),
                                            v155[107].f64[0]),
                                          *(float64x2_t *)(v124 + 392),
                                          v155[107],
                                          1),
                                        *(float64x2_t *)(v124 + 512),
                                        v155[108].f64[0]),
                                      *(float64x2_t *)(v124 + 632),
                                      v155[108],
                                      1),
                                    *(float64x2_t *)(v123 + 1024),
                                    v155[109].f64[0]),
                                  *(float64x2_t *)(v124 + 872),
                                  v155[109],
                                  1),
                                *(float64x2_t *)(v124 + 992),
                                v155[110].f64[0]),
                              *(float64x2_t *)(v124 + 1112),
                              v155[110],
                              1),
                            *(float64x2_t *)(v123 + 1504),
                            v155[111].f64[0]),
                          *(float64x2_t *)(v124 + 1352),
                          v155[111],
                          1),
                        *(float64x2_t *)(v124 + 1472),
                        v155[112].f64[0]);
            a3[230] = _Q0;
            _D7 = *(_QWORD *)(v123 + 232);
            _D16 = *(_QWORD *)(v124 + 200);
            __asm
            {
              FMLA            D0, D7, V17.D[1]
              FMLA            D0, D16, V1.D[1]
            }
            _D16 = *(_QWORD *)(v124 + 440);
            _D7 = *(_QWORD *)(v124 + 680);
            v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157[6], _Q17.f64[0]), *(float64x2_t *)(v123 + 216), _Q17, 1), *(float64x2_t *)(v124 + 64), _Q1.f64[0]), *(float64x2_t *)(v124 + 184), _Q1, 1), *(float64x2_t *)(v124 + 304), _Q2.f64[0]), *(float64x2_t *)(v124 + 424), _Q2, 1), *(float64x2_t *)(v124 + 544), _Q3.f64[0]), *(float64x2_t *)(v124 + 664),
                     _Q3,
                     1);
            __asm
            {
              FMLA            D0, D16, V2.D[1]
              FMLA            D0, D7, V3.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v124 + 920);
            _D18 = *(_QWORD *)(v124 + 1160);
            __asm
            {
              FMLA            D0, D3, V4.D[1]
              FMLA            D0, D18, V5.D[1]
            }
            _Q3.f64[0] = *(float64_t *)(v124 + 1400);
            _Q17.f64[1] = v155[111].f64[1];
            __asm { FMLA            D0, D3, V17.D[1] }
            _Q0.f64[0] = _Q0.f64[0] + *(double *)(v124 + 1520) * v155[112].f64[0];
            a3[231] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v138, *(float64x2_t *)(v124 + 784), _Q4.f64[0]), *(float64x2_t *)(v124 + 904), _Q4, 1), *(float64x2_t *)(v124 + 1024), _Q5.f64[0]), *(float64x2_t *)(v124 + 1144), _Q5, 1), *(float64x2_t *)(v124 + 1264), v155[111].f64[0]), *(float64x2_t *)(v124 + 1384), v155[111], 1),
                        *(float64x2_t *)(v124 + 1504),
                        v155[112].f64[0]);
            a3[232].f64[0] = _Q0.f64[0];
            break;
          default:
            break;
        }
      }
    }
    _Q2 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 7728) = *(_OWORD *)v6;
    _Q1 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 7744) = *(_OWORD *)(v6 + 16);
    _Q6 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 7760) = *(_OWORD *)(v6 + 32);
    _Q3 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 7776) = *(_OWORD *)(v6 + 48);
    *(_QWORD *)(a1 + 7840) = *(_QWORD *)(v6 + 112);
    _Q4 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 7824) = *(_OWORD *)(v6 + 96);
    _Q5 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 7808) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 7792) = *(_OWORD *)(v6 + 64);
    _D17 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D16, D17, V1.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D16, D1, V2.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q3 + 1);
    __asm { FMLA            D16, D1, V3.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q6 + 1);
    __asm { FMLA            D16, D1, V6.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q5 + 1);
    __asm { FMLA            D16, D1, V5.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q4 + 1);
    __asm { FMLA            D16, D1, V4.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(v6 + 104);
    __asm { FMLA            D16, D1, V7.D[1] }
    v9 = *(double *)(a2 + 8) * (_D16 + *(double *)(v6 + 112) * *(double *)(v6 + 112));
  }
  *(double *)(a1 + 7968) = v9;
  return v8;
}

BOOL sub_20F6AA3A8(uint64_t a1)
{
  double v1;
  float64x2_t *v2;
  float64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int64x2_t v15;
  _BOOL8 v16;
  double v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  uint64_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int8x16_t v133;
  int8x16_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int8x16_t v138;
  int8x16_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int8x16_t v143;
  unint64_t v144;
  float64x2_t *v145;
  int8x16_t v146;
  unint64_t v147;
  unint64_t v148;
  int8x16_t v149;
  int8x16_t v150;
  unint64_t v151;
  unint64_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64_t v157;
  float64_t v158;
  double v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  _QWORD *v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t *v220;
  float64x2_t *v221;
  float64x2_t *v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  uint64_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  int8x16_t v336;
  int8x16_t v337;
  unint64_t v338;
  int8x16_t v339;
  int8x16_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  int8x16_t v344;
  int8x16_t v345;
  unint64_t v346;
  unint64_t v347;
  float64x2_t *v348;
  int8x16_t v349;
  int8x16_t v350;
  unint64_t v351;
  unint64_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64_t v357;
  float64_t v358;
  double v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  _QWORD *v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  __int128 v449;
  float64x2_t v461[18];
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int8x16_t v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  int8x16_t v545;
  int8x16_t v546;
  int8x16_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  int8x16_t v584;
  int8x16_t v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int8x16_t v612;
  int8x16_t v613;
  int8x16_t v614;
  int8x16_t v615;
  int8x16_t v616;
  int8x16_t v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  int8x16_t v632;
  int8x16_t v633;
  int8x16_t v634;
  int8x16_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  int8x16_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  int8x16_t v645;
  int8x16_t v646;
  int8x16_t v647;
  int8x16_t v648;
  int8x16_t v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  int8x16_t v676;
  int8x16_t v677;
  int8x16_t v678;
  int8x16_t v679;
  int8x16_t v680;
  int8x16_t v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int8x16_t v699;
  int8x16_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int8x16_t v709;
  int8x16_t v710;
  int8x16_t v711;
  int8x16_t v712;
  int8x16_t v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  int8x16_t v728;
  int8x16_t v729;
  int8x16_t v730;
  int8x16_t v731;
  int8x16_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int8x16_t v741;
  int8x16_t v742;
  int8x16_t v743;
  int8x16_t v744;
  int8x16_t v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  int8x16_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int8x16_t v765;
  int8x16_t v766;
  int8x16_t v767;
  int8x16_t v768;
  int8x16_t v769;
  int8x16_t v770;
  int8x16_t v771;
  int8x16_t v772;
  int8x16_t v773;
  int8x16_t v774;
  int8x16_t v775;
  int8x16_t v776;
  int8x16_t v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  int8x16_t v797;
  int8x16_t v798;
  int8x16_t v799;
  int8x16_t v800;
  int8x16_t v801;
  int8x16_t v802;
  int8x16_t v803;
  int8x16_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  int8x16_t v824;
  int8x16_t v825;
  int8x16_t v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int8x16_t v838;
  int8x16_t v839;
  int8x16_t v840;
  int8x16_t v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  uint64_t v874;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v874 = *MEMORY[0x24BDAC8D0];
  v8 = v6 + 792;
  v16 = sub_20F3DB79C(v6, (_QWORD *)(v6 + 728), (float64x2_t *)(v6 + 792), v2, v1, v9, v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(v7 + 848) = v16;
  v17 = 0.0;
  if (v16)
  {
    v18 = *(_QWORD *)(v7 + 856);
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v18 + 24))(v18, v8, 0.0);
      v19 = *(float64x2_t **)(v7 + 856);
      v20 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v19->f64[0] + 16))(v19);
      switch((int)v20)
      {
        case 0:
          v21 = v19 + 1;
          v462 = v5;
          v463 = v20;
          v464 = v20;
          if (&v3[18] > &v19[1] && &v19[19] > v3)
          {
            MEMORY[0x24BDAC7A8](v20);
            v20 = (uint64_t)memcpy(v461, &v19[1], sizeof(v461));
            v21 = v461;
          }
          MEMORY[0x24BDAC7A8](v20);
          v22 = &v461[-18];
          memcpy(&v461[-18], v3, 0x120uLL);
          v23 = v21[1];
          v25 = v21[3];
          v24 = v21[4];
          v27 = v21[6];
          v26 = v21[7];
          v29 = v21[9];
          v28 = v21[10];
          v30 = v461[-17];
          v31 = v461[-18];
          v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v22->f64[0]), v25, *v22, 1), v27, v30.f64[0]), v29, v30, 1);
          v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v22->f64[0]), v24, *v22, 1), v26, v30.f64[0]), v28, v30, 1);
          v35 = v461[-16];
          v34 = v461[-15];
          v37 = v34;
          v36 = v461[-14];
          v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v34.f64[0]), v25, v34, 1), v27, v36.f64[0]), v29, v36, 1);
          v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v34.f64[0]), v24, v34, 1), v26, v36.f64[0]), v28, v36, 1);
          v41 = v461[-13];
          v40 = v461[-12];
          v43 = v40;
          v42 = v461[-11];
          v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v40.f64[0]), v25, v40, 1), v27, v42.f64[0]), v29, v42, 1);
          v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v40.f64[0]), v24, v40, 1), v26, v42.f64[0]), v28, v42, 1);
          v47 = v461[-10];
          v46 = v461[-9];
          v48 = vmlaq_laneq_f64(vmulq_n_f64(*v21, v46.f64[0]), v25, v46, 1);
          v50 = v46;
          v49 = v461[-8];
          v51 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v27, v49.f64[0]), v29, v49, 1);
          v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v46.f64[0]), v24, v46, 1), v26, v49.f64[0]), v28, v49, 1);
          v54 = v21[12];
          v53 = v21[13];
          v56 = v21[15];
          v55 = v21[16];
          v57 = v35;
          v58 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v54, v57.f64[0]), v56, v57, 1);
          v59 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v53, v57.f64[0]), v55, v57, 1);
          v61 = v461[-14];
          v60 = v41;
          v62 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v54, v60.f64[0]), v56, v60, 1);
          v63 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v53, v60.f64[0]), v55, v60, 1);
          v65 = v461[-11];
          v64 = v47;
          v66 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v54, v64.f64[0]), v56, v64, 1);
          v67 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v53, v64.f64[0]), v55, v64, 1);
          v69 = v461[-8];
          v68 = v461[-7];
          *v3 = v58;
          v3[1] = v59;
          v3[3] = v62;
          v3[4] = v63;
          v3[6] = v66;
          v3[7] = v67;
          v3[9] = vmlaq_laneq_f64(vmlaq_n_f64(v51, v54, v68.f64[0]), v56, v68, 1);
          v3[10] = vmlaq_laneq_f64(vmlaq_n_f64(v52, v53, v68.f64[0]), v55, v68, 1);
          v70 = v21[2];
          v71 = v21[5];
          v72 = v21[8];
          v73 = v21[11];
          v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v31.f64[0]), v71, v31, 1), v72, v461[-17].f64[0]), v73, v461[-17], 1);
          v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v37.f64[0]), v71, v37, 1), v72, v61.f64[0]), v73, v61, 1);
          v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v43.f64[0]), v71, v43, 1), v72, v65.f64[0]), v73, v65, 1);
          v77 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v50.f64[0]), v71, v50, 1), v72, v69.f64[0]), v73, v69, 1);
          v78 = v21[14];
          v79 = v21[17];
          v80 = v461[-6];
          v81 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v78, v461[-7].f64[0]), v79, v461[-7], 1);
          v3[2] = vmlaq_laneq_f64(vmlaq_n_f64(v74, v78, v35.f64[0]), v79, v35, 1);
          v3[5] = vmlaq_laneq_f64(vmlaq_n_f64(v75, v78, v41.f64[0]), v79, v41, 1);
          v3[8] = vmlaq_laneq_f64(vmlaq_n_f64(v76, v78, v47.f64[0]), v79, v47, 1);
          v3[11] = v81;
          v82 = v21[1];
          v84 = v21[3];
          v83 = v21[4];
          v86 = v21[6];
          v85 = v21[7];
          v88 = v21[9];
          v87 = v21[10];
          v90 = v461[-6];
          v89 = v461[-5];
          v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v80.f64[0]), v84, v80, 1), v86, v89.f64[0]), v88, v89, 1);
          v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v80.f64[0]), v83, v80, 1), v85, v89.f64[0]), v87, v89, 1);
          v94 = v461[-4];
          v93 = v461[-3];
          v95 = vmlaq_laneq_f64(vmulq_n_f64(*v21, v93.f64[0]), v84, v93, 1);
          v97 = v93;
          v96 = v461[-2];
          v98 = vmlaq_laneq_f64(vmlaq_n_f64(v95, v86, v96.f64[0]), v88, v96, 1);
          v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v93.f64[0]), v83, v93, 1), v85, v96.f64[0]), v87, v96, 1);
          v101 = v21[12];
          v100 = v21[13];
          v103 = v21[15];
          v102 = v21[16];
          v105 = v461[-5];
          v104 = v94;
          v106 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v101, v104.f64[0]), v103, v104, 1);
          v107 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v100, v104.f64[0]), v102, v104, 1);
          v109 = v461[-2];
          v108 = v461[-1];
          v3[12] = v106;
          v3[13] = v107;
          v3[15] = vmlaq_laneq_f64(vmlaq_n_f64(v98, v101, v108.f64[0]), v103, v108, 1);
          v3[16] = vmlaq_laneq_f64(vmlaq_n_f64(v99, v100, v108.f64[0]), v102, v108, 1);
          v110 = v21[2];
          v111 = v21[5];
          v112 = v21[8];
          v113 = v21[11];
          v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v90.f64[0]), v111, v90, 1), v112, v105.f64[0]), v113, v105, 1);
          v115 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v97.f64[0]), v111, v97, 1), v112, v109.f64[0]), v113, v109, 1);
          v116 = v21[14];
          v117 = v21[17];
          v118 = vmlaq_laneq_f64(vmlaq_n_f64(v115, v116, v461[-1].f64[0]), v117, v461[-1], 1);
          v3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v114, v116, v94.f64[0]), v117, v94, 1);
          v3[17] = v118;
          v5 = v462;
          goto LABEL_13;
        case 1:
          v119 = 0;
          v121 = (int8x16_t)v3[16];
          v120 = (int8x16_t)v3[17];
          v123 = (int8x16_t)v3[14];
          v122 = (int8x16_t)v3[15];
          v125 = (int8x16_t)v3[12];
          v124 = (int8x16_t)v3[13];
          v127 = (int8x16_t)v3[10];
          v126 = (int8x16_t)v3[11];
          v129 = (int8x16_t)v3[8];
          v128 = (int8x16_t)v3[9];
          v470 = (float64x2_t)vextq_s8(v121, v121, 8uLL);
          v471 = (float64x2_t)vextq_s8(v120, v120, 8uLL);
          v468 = (float64x2_t)vextq_s8(v123, v123, 8uLL);
          v469 = (float64x2_t)vextq_s8(v122, v122, 8uLL);
          v130 = vextq_s8(v124, v124, 8uLL).u64[0];
          v131 = vextq_s8(v125, v125, 8uLL).u64[0];
          v132 = vextq_s8(v126, v126, 8uLL).u64[0];
          v134 = (int8x16_t)v3[6];
          v133 = (int8x16_t)v3[7];
          v135 = vextq_s8(v127, v127, 8uLL).u64[0];
          v136 = vextq_s8(v128, v128, 8uLL).u64[0];
          v137 = vextq_s8(v129, v129, 8uLL).u64[0];
          v139 = (int8x16_t)v3[4];
          v138 = (int8x16_t)v3[5];
          v140 = vextq_s8(v133, v133, 8uLL).u64[0];
          v141 = vextq_s8(v134, v134, 8uLL).u64[0];
          v142 = vextq_s8(v138, v138, 8uLL).u64[0];
          v143 = (int8x16_t)v3[3];
          v144 = vextq_s8(v139, v139, 8uLL).u64[0];
          v145 = v3 + 2;
          v146 = (int8x16_t)v3[2];
          v147 = vextq_s8(v143, v143, 8uLL).u64[0];
          v148 = vextq_s8(v146, v146, 8uLL).u64[0];
          v150 = *(int8x16_t *)v3;
          v149 = (int8x16_t)v3[1];
          v151 = vextq_s8(v149, v149, 8uLL).u64[0];
          v152 = vextq_s8(v150, v150, 8uLL).u64[0];
          do
          {
            v150.i64[1] = v152;
            v149.i64[1] = v151;
            v146.i64[1] = v148;
            v143.i64[1] = v147;
            v153 = v145[-1];
            v154 = v19[2];
            v155 = vmulq_f64(v145[-2], v19[1]);
            v467 = *v145;
            v156 = v19[3];
            v465 = v155;
            v466 = v156;
            v824 = v150;
            v825 = v149;
            v826 = v146;
            v827 = v143;
            v139.i64[1] = v144;
            v138.i64[1] = v142;
            v134.i64[1] = v141;
            v828 = v139;
            v829 = v138;
            v133.i64[1] = v140;
            v129.i64[1] = v137;
            v830 = v134;
            v831 = v133;
            v128.i64[1] = v136;
            v127.i64[1] = v135;
            v832 = v129;
            v833 = v128;
            v126.i64[1] = v132;
            v125.i64[1] = v131;
            v834 = v127;
            v835 = v126;
            v124.i64[1] = v130;
            v123.i64[1] = *(_QWORD *)&v468.f64[0];
            v836 = v125;
            v837 = v124;
            v122.i64[1] = *(_QWORD *)&v469.f64[0];
            v121.i64[1] = *(_QWORD *)&v470.f64[0];
            v838 = v123;
            v839 = v122;
            v120.i64[1] = *(_QWORD *)&v471.f64[0];
            v840 = v121;
            v841 = v120;
            v824.i64[v119 & 0x3F] = *(_QWORD *)&v155.f64[0];
            v471 = vmulq_f64(v153, v154);
            v823 = v855;
            v822 = v854;
            v821 = v853;
            v820 = v852;
            v819 = v851;
            v818 = v850;
            v817 = v849;
            v816 = v848;
            v815 = v847;
            v814 = v846;
            v813 = v845;
            v812 = v844;
            v811 = v843;
            v810 = v842;
            v809 = v841;
            v808 = v840;
            v807 = v839;
            v806 = v838;
            v805 = v837;
            v804 = v836;
            v803 = v835;
            v802 = v834;
            v801 = v833;
            v800 = v832;
            v799 = v831;
            v798 = v830;
            v797 = v829;
            v796 = v828;
            v795 = v827;
            v794 = v826;
            v793 = v825;
            v792 = v824;
            v792.i64[((_BYTE)v119 + 1) & 0x3F] = *(_QWORD *)&v465.f64[1];
            v791 = v823;
            v790 = v822;
            v789 = v821;
            v788 = v820;
            v787 = v819;
            v786 = v818;
            v785 = v817;
            v784 = v816;
            v783 = v815;
            v782 = v814;
            v781 = v813;
            v780 = v812;
            v779 = v811;
            v778 = v810;
            v777 = v809;
            v776 = v808;
            v775 = v807;
            v774 = v806;
            v773 = v805;
            v772 = v804;
            v771 = v803;
            v770 = v802;
            v769 = v801;
            v768 = v800;
            v767 = v799;
            v766 = v798;
            v765 = v797;
            v764 = v796;
            v763 = v795;
            v762 = v794;
            v761 = v793;
            v760 = v792;
            v157 = v471.f64[1];
            v760.i64[((_BYTE)v119 + 2) & 0x3F] = *(_QWORD *)&v471.f64[0];
            v470 = vmulq_f64(v467, v466);
            v759 = v791;
            v758 = v790;
            v757 = v789;
            v756 = v788;
            v755 = v787;
            v754 = v786;
            v753 = v785;
            v752 = v784;
            v751 = v783;
            v750 = v782;
            v749 = v781;
            v748 = v780;
            v747 = v779;
            v746 = v778;
            v745 = v777;
            v744 = v776;
            v743 = v775;
            v742 = v774;
            v741 = v773;
            v740 = v772;
            v739 = v771;
            v738 = v770;
            v737 = v769;
            v736 = v768;
            v735 = v767;
            v734 = v766;
            v733 = v765;
            v732 = v764;
            v731 = v763;
            v730 = v762;
            v729 = v761;
            v728 = v760;
            *(float64_t *)&v728.i64[((_BYTE)v119 + 3) & 0x3F] = v157;
            v727 = v759;
            v726 = v758;
            v725 = v757;
            v724 = v756;
            v723 = v755;
            v722 = v754;
            v721 = v753;
            v720 = v752;
            v719 = v751;
            v718 = v750;
            v717 = v749;
            v716 = v748;
            v715 = v747;
            v714 = v746;
            v713 = v745;
            v712 = v744;
            v711 = v743;
            v710 = v742;
            v709 = v741;
            v708 = v740;
            v707 = v739;
            v706 = v738;
            v705 = v737;
            v704 = v736;
            v703 = v735;
            v702 = v734;
            v701 = v733;
            v700 = v732;
            v699 = v731;
            v698 = v730;
            v697 = v729;
            v696 = v728;
            v158 = v470.f64[1];
            v696.i64[((_BYTE)v119 + 4) & 0x3F] = *(_QWORD *)&v470.f64[0];
            v695 = v727;
            v694 = v726;
            v693 = v725;
            v692 = v724;
            v691 = v723;
            v690 = v722;
            v689 = v721;
            v688 = v720;
            v687 = v719;
            v686 = v718;
            v685 = v717;
            v684 = v716;
            v683 = v715;
            v682 = v714;
            v681 = v713;
            v680 = v712;
            v679 = v711;
            v678 = v710;
            v677 = v709;
            v676 = v708;
            v675 = v707;
            v674 = v706;
            v673 = v705;
            v672 = v704;
            v671 = v703;
            v670 = v702;
            v669 = v701;
            v668 = v700;
            v667 = v699;
            v666 = v698;
            v665 = v697;
            v664 = v696;
            *(float64_t *)&v664.i64[((_BYTE)v119 + 5) & 0x3F] = v158;
            v120 = v681;
            v121 = v680;
            v122 = v679;
            v123 = v678;
            v124 = v677;
            v125 = v676;
            v126 = v675;
            v127 = v674;
            v128 = v673;
            v129 = v672;
            v133 = v671;
            v134 = v670;
            v138 = v669;
            v139 = v668;
            v143 = v667;
            v146 = v666;
            v149 = v665;
            v150 = v664;
            v470 = (float64x2_t)vextq_s8(v121, v121, 8uLL);
            v471 = (float64x2_t)vextq_s8(v120, v120, 8uLL);
            v468 = (float64x2_t)vextq_s8(v123, v123, 8uLL);
            v469 = (float64x2_t)vextq_s8(v122, v122, 8uLL);
            v130 = vextq_s8(v124, v124, 8uLL).u64[0];
            v131 = vextq_s8(v125, v125, 8uLL).u64[0];
            v132 = vextq_s8(v126, v126, 8uLL).u64[0];
            v135 = vextq_s8(v127, v127, 8uLL).u64[0];
            v136 = vextq_s8(v128, v128, 8uLL).u64[0];
            v137 = vextq_s8(v129, v129, 8uLL).u64[0];
            v140 = vextq_s8(v133, v133, 8uLL).u64[0];
            v141 = vextq_s8(v134, v134, 8uLL).u64[0];
            v142 = vextq_s8(v138, v138, 8uLL).u64[0];
            v144 = vextq_s8(v139, v139, 8uLL).u64[0];
            v3[2] = (float64x2_t)v666;
            v3[3] = (float64x2_t)v143;
            v3[4] = (float64x2_t)v139;
            v3[5] = (float64x2_t)v138;
            v3[6] = (float64x2_t)v134;
            v3[7] = (float64x2_t)v133;
            v3[8] = (float64x2_t)v129;
            v3[9] = (float64x2_t)v128;
            v3[10] = (float64x2_t)v127;
            v3[11] = (float64x2_t)v126;
            v3[12] = (float64x2_t)v125;
            v3[13] = (float64x2_t)v124;
            v3[14] = (float64x2_t)v123;
            v3[15] = (float64x2_t)v122;
            v119 += 6;
            v145 += 3;
            v3[16] = (float64x2_t)v121;
            v3[17] = (float64x2_t)v120;
            *v3 = (float64x2_t)v150;
            v3[1] = (float64x2_t)v149;
            v147 = vextq_s8(v143, v143, 8uLL).u64[0];
            v148 = vextq_s8(v146, v146, 8uLL).u64[0];
            v151 = vextq_s8(v149, v149, 8uLL).u64[0];
            v152 = vextq_s8(v150, v150, 8uLL).u64[0];
          }
          while (v119 != 36);
          break;
        case 2:
          v159 = v19[1].f64[0];
          v160 = vmulq_n_f64(*v3, v159);
          v161 = vmulq_n_f64(v3[1], v159);
          v162 = vmulq_n_f64(v3[2], v159);
          v163 = vmulq_n_f64(v3[3], v159);
          v164 = vmulq_n_f64(v3[4], v159);
          v165 = vmulq_n_f64(v3[5], v159);
          v166 = vmulq_n_f64(v3[6], v159);
          v167 = vmulq_n_f64(v3[7], v159);
          v168 = vmulq_n_f64(v3[8], v159);
          v169 = vmulq_n_f64(v3[9], v159);
          v170 = vmulq_n_f64(v3[10], v159);
          v171 = vmulq_n_f64(v3[11], v159);
          v172 = vmulq_n_f64(v3[12], v159);
          v173 = vmulq_n_f64(v3[13], v159);
          v174 = vmulq_n_f64(v3[14], v159);
          v175 = vmulq_n_f64(v3[15], v159);
          v176 = vmulq_n_f64(v3[16], v159);
          v177 = vmulq_n_f64(v3[17], v159);
          v3[16] = v176;
          v3[17] = v177;
          v3[14] = v174;
          v3[15] = v175;
          v3[12] = v172;
          v3[13] = v173;
          v3[10] = v170;
          v3[11] = v171;
          v3[8] = v168;
          v3[9] = v169;
          v3[6] = v166;
          v3[7] = v167;
          v3[4] = v164;
          v3[5] = v165;
          v3[2] = v162;
          v3[3] = v163;
          *v3 = v160;
          v3[1] = v161;
          break;
        case 4:
          v463 = v20;
          v464 = v20;
          v178 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v19->f64[0] + 56))(&v856, v19);
          MEMORY[0x24BDAC7A8](v178);
          memcpy(v461, v3, sizeof(v461));
          v470 = v861;
          v471 = v858;
          v179 = v856;
          v180 = v859;
          v468 = v862;
          v469 = v864;
          v181 = v865;
          v182 = v867;
          v183 = v870;
          v184 = v868;
          v185 = v871;
          v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[0].f64[0]), v860, v461[0], 1), v863, v461[1].f64[0]), v866, v461[1], 1), v869, v461[2].f64[0]), v872, v461[2], 1);
          v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[3].f64[0]), v859, v461[3], 1), v862, v461[4].f64[0]), v865, v461[4], 1), v868, v461[5].f64[0]), v871, v461[5], 1);
          v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[3].f64[0]), v860, v461[3], 1), v863, v461[4].f64[0]), v866, v461[4], 1), v869, v461[5].f64[0]), v872, v461[5], 1);
          v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[6].f64[0]), v859, v461[6], 1), v862, v461[7].f64[0]), v865, v461[7], 1), v868, v461[8].f64[0]), v871, v461[8], 1);
          v190 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[6].f64[0]), v860, v461[6], 1), v863, v461[7].f64[0]), v866, v461[7], 1), v869, v461[8].f64[0]), v872, v461[8], 1);
          v191 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[9].f64[0]), v859, v461[9], 1), v862, v461[10].f64[0]), v865, v461[10], 1), v868, v461[11].f64[0]), v871, v461[11], 1);
          v192 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[9].f64[0]), v860, v461[9], 1), v863, v461[10].f64[0]), v866, v461[10], 1), v869, v461[11].f64[0]), v872, v461[11], 1);
          v193 = v857;
          v194 = v860;
          v195 = v863;
          v196 = v866;
          v197 = v869;
          v198 = v872;
          v199 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[0].f64[0]), v861, v461[0], 1), v864, v461[1].f64[0]), v867, v461[1], 1), v870, v461[2].f64[0]), v873, v461[2], 1);
          v200 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[3].f64[0]), v861, v461[3], 1), v864, v461[4].f64[0]), v867, v461[4], 1), v870, v461[5].f64[0]), v873, v461[5], 1);
          v201 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[6].f64[0]), v861, v461[6], 1), v864, v461[7].f64[0]), v867, v461[7], 1), v870, v461[8].f64[0]), v873, v461[8], 1);
          v202 = v461[12];
          v203 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[9].f64[0]), v861, v461[9], 1), v864, v461[10].f64[0]), v867, v461[10], 1), v870, v461[11].f64[0]), v873, v461[11], 1);
          *v3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[0].f64[0]), v859, v461[0], 1), v862, v461[1].f64[0]), v865, v461[1], 1), v868, v461[2].f64[0]), v871, v461[2], 1);
          v3[1] = v186;
          v3[6] = v189;
          v3[7] = v190;
          v3[2] = v199;
          v3[3] = v187;
          v3[4] = v188;
          v3[5] = v200;
          v3[8] = v201;
          v3[9] = v191;
          v3[10] = v192;
          v3[11] = v203;
          v204 = v461[12];
          v205 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v202.f64[0]), v180, v202, 1), v468, v461[13].f64[0]), v181, v461[13], 1);
          v206 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v193, v202.f64[0]), v194, v202, 1), v195, v461[13].f64[0]), v196, v461[13], 1);
          v207 = v461[14];
          v208 = v461[15];
          v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v461[15].f64[0]), v180, v461[15], 1), v468, v461[16].f64[0]), v181, v461[16], 1);
          v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v193, v461[15].f64[0]), v194, v461[15], 1), v195, v461[16].f64[0]), v196, v461[16], 1);
          v211 = v461[13];
          v212 = vmlaq_laneq_f64(vmlaq_n_f64(v206, v197, v461[14].f64[0]), v198, v461[14], 1);
          v213 = v461[16];
          v214 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v184, v461[17].f64[0]), v185, v461[17], 1);
          v215 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v197, v461[17].f64[0]), v198, v461[17], 1);
          v3[12] = vmlaq_laneq_f64(vmlaq_n_f64(v205, v184, v461[14].f64[0]), v185, v461[14], 1);
          v3[13] = v212;
          v216 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v204.f64[0]), v470, v204, 1), v469, v211.f64[0]), v182, v211, 1);
          v217 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v208.f64[0]), v470, v208, 1), v469, v213.f64[0]);
          v218 = v873;
          v219 = v461[17];
          v3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v216, v183, v207.f64[0]), v873, v207, 1);
          v3[15] = v214;
          v3[16] = v215;
          v3[17] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v217, v182, v213, 1), v183, v219.f64[0]), v218, v219, 1);
LABEL_13:
          v20 = v464;
          break;
        default:
          break;
      }
      while (2)
      {
        if (*(_BYTE *)(*(_QWORD *)(v7 + 736) + 20) && v20 <= 4)
        {
          v220 = v3 + 18;
          switch((int)v20)
          {
            case 0:
              v221 = v19 + 1;
              if (&v3[36] > &v19[1] && &v19[19] > v220)
              {
                MEMORY[0x24BDAC7A8](v20);
                v20 = (uint64_t)memcpy(&v461[-18], &v19[1], 0x120uLL);
                v221 = &v461[-18];
              }
              MEMORY[0x24BDAC7A8](v20);
              v222 = &v461[-18];
              memcpy(&v461[-18], &v3[18], 0x120uLL);
              v223 = v221[1];
              v225 = v221[3];
              v224 = v221[4];
              v227 = v221[6];
              v226 = v221[7];
              v229 = v221[9];
              v228 = v221[10];
              v230 = v461[-17];
              v231 = v461[-18];
              v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v222->f64[0]), v225, *v222, 1), v227, v230.f64[0]), v229, v230, 1);
              v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v222->f64[0]), v224, *v222, 1), v226, v230.f64[0]), v228, v230, 1);
              v235 = v461[-16];
              v234 = v461[-15];
              v237 = v234;
              v236 = v461[-14];
              v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v234.f64[0]), v225, v234, 1), v227, v236.f64[0]), v229, v236, 1);
              v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v234.f64[0]), v224, v234, 1), v226, v236.f64[0]), v228, v236, 1);
              v241 = v461[-13];
              v240 = v461[-12];
              v243 = v240;
              v242 = v461[-11];
              v244 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v240.f64[0]), v225, v240, 1), v227, v242.f64[0]), v229, v242, 1);
              v245 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v240.f64[0]), v224, v240, 1), v226, v242.f64[0]), v228, v242, 1);
              v247 = v461[-10];
              v246 = v461[-9];
              v248 = vmlaq_laneq_f64(vmulq_n_f64(*v221, v246.f64[0]), v225, v246, 1);
              v250 = v246;
              v249 = v461[-8];
              v251 = vmlaq_laneq_f64(vmlaq_n_f64(v248, v227, v249.f64[0]), v229, v249, 1);
              v252 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v246.f64[0]), v224, v246, 1), v226, v249.f64[0]), v228, v249, 1);
              v254 = v221[12];
              v253 = v221[13];
              v256 = v221[15];
              v255 = v221[16];
              v257 = v235;
              v258 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v254, v257.f64[0]), v256, v257, 1);
              v259 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v253, v257.f64[0]), v255, v257, 1);
              v261 = v461[-14];
              v260 = v241;
              v262 = vmlaq_laneq_f64(vmlaq_n_f64(v238, v254, v260.f64[0]), v256, v260, 1);
              v263 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v253, v260.f64[0]), v255, v260, 1);
              v265 = v461[-11];
              v264 = v247;
              v266 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v254, v264.f64[0]), v256, v264, 1);
              v267 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v253, v264.f64[0]), v255, v264, 1);
              v269 = v461[-8];
              v268 = v461[-7];
              v3[18] = v258;
              v3[19] = v259;
              v3[21] = v262;
              v3[22] = v263;
              v3[24] = v266;
              v3[25] = v267;
              v3[27] = vmlaq_laneq_f64(vmlaq_n_f64(v251, v254, v268.f64[0]), v256, v268, 1);
              v3[28] = vmlaq_laneq_f64(vmlaq_n_f64(v252, v253, v268.f64[0]), v255, v268, 1);
              v270 = v221[2];
              v271 = v221[5];
              v272 = v221[8];
              v273 = v221[11];
              v274 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v231.f64[0]), v271, v231, 1), v272, v461[-17].f64[0]), v273, v461[-17], 1);
              v275 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v237.f64[0]), v271, v237, 1), v272, v261.f64[0]), v273, v261, 1);
              v276 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v243.f64[0]), v271, v243, 1), v272, v265.f64[0]), v273, v265, 1);
              v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v250.f64[0]), v271, v250, 1), v272, v269.f64[0]), v273, v269, 1);
              v278 = v221[14];
              v279 = v221[17];
              v280 = v461[-6];
              v281 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v278, v461[-7].f64[0]), v279, v461[-7], 1);
              v3[20] = vmlaq_laneq_f64(vmlaq_n_f64(v274, v278, v235.f64[0]), v279, v235, 1);
              v3[23] = vmlaq_laneq_f64(vmlaq_n_f64(v275, v278, v241.f64[0]), v279, v241, 1);
              v3[26] = vmlaq_laneq_f64(vmlaq_n_f64(v276, v278, v247.f64[0]), v279, v247, 1);
              v3[29] = v281;
              v282 = v221[1];
              v284 = v221[3];
              v283 = v221[4];
              v286 = v221[6];
              v285 = v221[7];
              v288 = v221[9];
              v287 = v221[10];
              v290 = v461[-6];
              v289 = v461[-5];
              v291 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v280.f64[0]), v284, v280, 1), v286, v289.f64[0]), v288, v289, 1);
              v292 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v282, v280.f64[0]), v283, v280, 1), v285, v289.f64[0]), v287, v289, 1);
              v294 = v461[-4];
              v293 = v461[-3];
              v295 = vmlaq_laneq_f64(vmulq_n_f64(*v221, v293.f64[0]), v284, v293, 1);
              v297 = v293;
              v296 = v461[-2];
              v298 = vmlaq_laneq_f64(vmlaq_n_f64(v295, v286, v296.f64[0]), v288, v296, 1);
              v299 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v282, v293.f64[0]), v283, v293, 1), v285, v296.f64[0]), v287, v296, 1);
              v301 = v221[12];
              v300 = v221[13];
              v303 = v221[15];
              v302 = v221[16];
              v305 = v461[-5];
              v304 = v294;
              v306 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v301, v304.f64[0]), v303, v304, 1);
              v307 = vmlaq_laneq_f64(vmlaq_n_f64(v292, v300, v304.f64[0]), v302, v304, 1);
              v309 = v461[-2];
              v308 = v461[-1];
              v3[30] = v306;
              v3[31] = v307;
              v3[33] = vmlaq_laneq_f64(vmlaq_n_f64(v298, v301, v308.f64[0]), v303, v308, 1);
              v3[34] = vmlaq_laneq_f64(vmlaq_n_f64(v299, v300, v308.f64[0]), v302, v308, 1);
              v310 = v221[2];
              v311 = v221[5];
              v312 = v221[8];
              v313 = v221[11];
              v314 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v310, v290.f64[0]), v311, v290, 1), v312, v305.f64[0]), v313, v305, 1);
              v315 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v310, v297.f64[0]), v311, v297, 1), v312, v309.f64[0]), v313, v309, 1);
              v316 = v221[14];
              v317 = v221[17];
              v318 = vmlaq_laneq_f64(vmlaq_n_f64(v315, v316, v461[-1].f64[0]), v317, v461[-1], 1);
              v3[32] = vmlaq_laneq_f64(vmlaq_n_f64(v314, v316, v294.f64[0]), v317, v294, 1);
              v3[35] = v318;
              break;
            case 1:
              v319 = 0;
              v321 = (int8x16_t)v3[34];
              v320 = (int8x16_t)v3[35];
              v323 = (int8x16_t)v3[32];
              v322 = (int8x16_t)v3[33];
              v325 = (int8x16_t)v3[30];
              v324 = (int8x16_t)v3[31];
              v327 = (int8x16_t)v3[28];
              v326 = (int8x16_t)v3[29];
              v329 = (int8x16_t)v3[26];
              v328 = (int8x16_t)v3[27];
              v470 = (float64x2_t)vextq_s8(v321, v321, 8uLL);
              v471 = (float64x2_t)vextq_s8(v320, v320, 8uLL);
              v468 = (float64x2_t)vextq_s8(v323, v323, 8uLL);
              v469 = (float64x2_t)vextq_s8(v322, v322, 8uLL);
              v330 = vextq_s8(v324, v324, 8uLL).u64[0];
              v331 = vextq_s8(v325, v325, 8uLL).u64[0];
              v332 = vextq_s8(v326, v326, 8uLL).u64[0];
              v333 = vextq_s8(v327, v327, 8uLL).u64[0];
              v334 = vextq_s8(v328, v328, 8uLL).u64[0];
              v335 = vextq_s8(v329, v329, 8uLL).u64[0];
              v337 = (int8x16_t)v3[24];
              v336 = (int8x16_t)v3[25];
              v338 = vextq_s8(v336, v336, 8uLL).u64[0];
              v340 = (int8x16_t)v3[22];
              v339 = (int8x16_t)v3[23];
              v341 = vextq_s8(v337, v337, 8uLL).u64[0];
              v342 = vextq_s8(v339, v339, 8uLL).u64[0];
              v343 = vextq_s8(v340, v340, 8uLL).u64[0];
              v345 = (int8x16_t)v3[20];
              v344 = (int8x16_t)v3[21];
              v346 = vextq_s8(v344, v344, 8uLL).u64[0];
              v347 = vextq_s8(v345, v345, 8uLL).u64[0];
              v348 = v3 + 20;
              v349 = *(int8x16_t *)v220;
              v350 = (int8x16_t)v3[19];
              v351 = vextq_s8(v350, v350, 8uLL).u64[0];
              v352 = vextq_s8(v349, v349, 8uLL).u64[0];
              do
              {
                v349.i64[1] = v352;
                v350.i64[1] = v351;
                v345.i64[1] = v347;
                v344.i64[1] = v346;
                v353 = v348[-1];
                v354 = v19[2];
                v355 = vmulq_f64(v348[-2], v19[1]);
                v467 = *v348;
                v356 = v19[3];
                v465 = v355;
                v466 = v356;
                v632 = v349;
                v633 = v350;
                v634 = v345;
                v635 = v344;
                v340.i64[1] = v343;
                v339.i64[1] = v342;
                v337.i64[1] = v341;
                v636 = v340;
                v637 = v339;
                v336.i64[1] = v338;
                v329.i64[1] = v335;
                v638 = v337;
                v639 = v336;
                v328.i64[1] = v334;
                v327.i64[1] = v333;
                v640 = v329;
                v641 = v328;
                v326.i64[1] = v332;
                v325.i64[1] = v331;
                v642 = v327;
                v643 = v326;
                v324.i64[1] = v330;
                v323.i64[1] = *(_QWORD *)&v468.f64[0];
                v644 = v325;
                v645 = v324;
                v322.i64[1] = *(_QWORD *)&v469.f64[0];
                v321.i64[1] = *(_QWORD *)&v470.f64[0];
                v646 = v323;
                v647 = v322;
                v320.i64[1] = *(_QWORD *)&v471.f64[0];
                v648 = v321;
                v649 = v320;
                v632.i64[v319 & 0x3F] = *(_QWORD *)&v355.f64[0];
                v471 = vmulq_f64(v353, v354);
                v631 = v663;
                v630 = v662;
                v629 = v661;
                v628 = v660;
                v627 = v659;
                v626 = v658;
                v625 = v657;
                v624 = v656;
                v623 = v655;
                v622 = v654;
                v621 = v653;
                v620 = v652;
                v619 = v651;
                v618 = v650;
                v617 = v649;
                v616 = v648;
                v615 = v647;
                v614 = v646;
                v613 = v645;
                v612 = v644;
                v611 = v643;
                v610 = v642;
                v609 = v641;
                v608 = v640;
                v607 = v639;
                v606 = v638;
                v605 = v637;
                v604 = v636;
                v603 = v635;
                v602 = v634;
                v601 = v633;
                v600 = v632;
                v600.i64[((_BYTE)v319 + 1) & 0x3F] = *(_QWORD *)&v465.f64[1];
                v599 = v631;
                v598 = v630;
                v597 = v629;
                v596 = v628;
                v595 = v627;
                v594 = v626;
                v593 = v625;
                v592 = v624;
                v591 = v623;
                v590 = v622;
                v589 = v621;
                v588 = v620;
                v587 = v619;
                v586 = v618;
                v585 = v617;
                v584 = v616;
                v583 = v615;
                v582 = v614;
                v581 = v613;
                v580 = v612;
                v579 = v611;
                v578 = v610;
                v577 = v609;
                v576 = v608;
                v575 = v607;
                v574 = v606;
                v573 = v605;
                v572 = v604;
                v571 = v603;
                v570 = v602;
                v569 = v601;
                v568 = v600;
                v357 = v471.f64[1];
                v568.i64[((_BYTE)v319 + 2) & 0x3F] = *(_QWORD *)&v471.f64[0];
                v470 = vmulq_f64(v467, v466);
                v567 = v599;
                v566 = v598;
                v565 = v597;
                v564 = v596;
                v563 = v595;
                v562 = v594;
                v561 = v593;
                v560 = v592;
                v559 = v591;
                v558 = v590;
                v557 = v589;
                v556 = v588;
                v555 = v587;
                v554 = v586;
                v553 = v585;
                v552 = v584;
                v551 = v583;
                v550 = v582;
                v549 = v581;
                v548 = v580;
                v547 = v579;
                v546 = v578;
                v545 = v577;
                v544 = v576;
                v543 = v575;
                v542 = v574;
                v541 = v573;
                v540 = v572;
                v539 = v571;
                v538 = v570;
                v537 = v569;
                v536 = v568;
                *(float64_t *)&v536.i64[((_BYTE)v319 + 3) & 0x3F] = v357;
                v535 = v567;
                v534 = v566;
                v533 = v565;
                v532 = v564;
                v531 = v563;
                v530 = v562;
                v529 = v561;
                v528 = v560;
                v526 = v558;
                v527 = v559;
                v524 = v556;
                v525 = v557;
                v522 = v554;
                v523 = v555;
                v520 = v552;
                v521 = v553;
                v518 = v550;
                v519 = v551;
                v516 = v548;
                v517 = v549;
                v514 = v546;
                v515 = v547;
                v512 = v544;
                v513 = v545;
                v510 = v542;
                v511 = v543;
                v508 = v540;
                v509 = v541;
                v506 = v538;
                v507 = v539;
                v504 = v536;
                v505 = v537;
                v358 = v470.f64[1];
                v504.i64[((_BYTE)v319 + 4) & 0x3F] = *(_QWORD *)&v470.f64[0];
                v502 = v534;
                v503 = v535;
                v500 = v532;
                v501 = v533;
                v498 = v530;
                v499 = v531;
                v496 = v528;
                v497 = v529;
                v494 = v526;
                v495 = v527;
                v492 = v524;
                v493 = v525;
                v490 = v522;
                v491 = v523;
                v488 = v520;
                v489 = v521;
                v486 = v518;
                v487 = v519;
                v484 = v516;
                v485 = v517;
                v482 = v514;
                v483 = v515;
                v480 = v512;
                v481 = v513;
                v478 = v510;
                v479 = v511;
                v476 = v508;
                v477 = v509;
                v474 = v506;
                v475 = v507;
                v473 = v505;
                v472 = v504;
                *(float64_t *)&v472.i64[((_BYTE)v319 + 5) & 0x3F] = v358;
                v321 = v488;
                v320 = v489;
                v323 = v486;
                v322 = v487;
                v325 = v484;
                v324 = v485;
                v327 = v482;
                v326 = v483;
                v329 = v480;
                v328 = v481;
                v337 = v478;
                v336 = v479;
                v340 = v476;
                v339 = v477;
                v345 = v474;
                v344 = v475;
                v349 = v472;
                v350 = v473;
                v471 = (float64x2_t)vextq_s8(v320, v320, 8uLL);
                v470 = (float64x2_t)vextq_s8(v321, v321, 8uLL);
                v469 = (float64x2_t)vextq_s8(v322, v322, 8uLL);
                v468 = (float64x2_t)vextq_s8(v323, v323, 8uLL);
                v330 = vextq_s8(v324, v324, 8uLL).u64[0];
                v331 = vextq_s8(v325, v325, 8uLL).u64[0];
                v332 = vextq_s8(v326, v326, 8uLL).u64[0];
                v333 = vextq_s8(v327, v327, 8uLL).u64[0];
                v334 = vextq_s8(v328, v328, 8uLL).u64[0];
                v335 = vextq_s8(v329, v329, 8uLL).u64[0];
                v338 = vextq_s8(v336, v336, 8uLL).u64[0];
                v341 = vextq_s8(v337, v337, 8uLL).u64[0];
                v342 = vextq_s8(v339, v339, 8uLL).u64[0];
                v343 = vextq_s8(v340, v340, 8uLL).u64[0];
                v3[20] = (float64x2_t)v474;
                v3[21] = (float64x2_t)v344;
                v3[22] = (float64x2_t)v340;
                v3[23] = (float64x2_t)v339;
                v3[24] = (float64x2_t)v337;
                v3[25] = (float64x2_t)v336;
                v3[26] = (float64x2_t)v329;
                v3[27] = (float64x2_t)v328;
                v3[28] = (float64x2_t)v327;
                v3[29] = (float64x2_t)v326;
                v3[30] = (float64x2_t)v325;
                v3[31] = (float64x2_t)v324;
                v3[32] = (float64x2_t)v323;
                v3[33] = (float64x2_t)v322;
                v319 += 6;
                v348 += 3;
                v3[34] = (float64x2_t)v321;
                v3[35] = (float64x2_t)v320;
                *v220 = (float64x2_t)v349;
                v3[19] = (float64x2_t)v350;
                v346 = vextq_s8(v344, v344, 8uLL).u64[0];
                v347 = vextq_s8(v345, v345, 8uLL).u64[0];
                v351 = vextq_s8(v350, v350, 8uLL).u64[0];
                v352 = vextq_s8(v349, v349, 8uLL).u64[0];
              }
              while (v319 != 36);
              break;
            case 2:
              v359 = v19[1].f64[0];
              v360 = vmulq_n_f64(*v220, v359);
              v361 = vmulq_n_f64(v3[19], v359);
              v362 = vmulq_n_f64(v3[20], v359);
              v363 = vmulq_n_f64(v3[21], v359);
              v364 = vmulq_n_f64(v3[22], v359);
              v365 = vmulq_n_f64(v3[23], v359);
              v366 = vmulq_n_f64(v3[24], v359);
              v367 = vmulq_n_f64(v3[25], v359);
              v368 = vmulq_n_f64(v3[26], v359);
              v369 = vmulq_n_f64(v3[27], v359);
              v370 = vmulq_n_f64(v3[28], v359);
              v371 = vmulq_n_f64(v3[29], v359);
              v372 = vmulq_n_f64(v3[30], v359);
              v373 = vmulq_n_f64(v3[31], v359);
              v374 = vmulq_n_f64(v3[32], v359);
              v375 = vmulq_n_f64(v3[33], v359);
              v376 = vmulq_n_f64(v3[34], v359);
              v377 = vmulq_n_f64(v3[35], v359);
              v3[34] = v376;
              v3[35] = v377;
              v3[32] = v374;
              v3[33] = v375;
              v3[30] = v372;
              v3[31] = v373;
              v3[28] = v370;
              v3[29] = v371;
              v3[26] = v368;
              v3[27] = v369;
              v3[24] = v366;
              v3[25] = v367;
              v3[22] = v364;
              v3[23] = v365;
              v3[20] = v362;
              v3[21] = v363;
              *v220 = v360;
              v3[19] = v361;
              break;
            case 3:
              break;
            case 4:
              v378 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v19->f64[0] + 56))(&v856, v19);
              MEMORY[0x24BDAC7A8](v378);
              memcpy(&v461[-18], &v3[18], 0x120uLL);
              v379 = v461[-18];
              v380 = v461[-17];
              v381 = vmlaq_laneq_f64(vmulq_n_f64(v856, v461[-18].f64[0]), v859, v379, 1);
              v470 = v861;
              v471 = v858;
              v382 = vmlaq_laneq_f64(vmlaq_n_f64(v381, v862, v380.f64[0]), v865, v380, 1);
              v383 = v856;
              v384 = v859;
              v468 = v862;
              v469 = v864;
              v385 = v865;
              v386 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v379.f64[0]), v860, v379, 1), v863, v380.f64[0]), v866, v380, 1);
              v387 = v461[-15];
              v388 = v461[-14];
              v389 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v387.f64[0]), v859, v387, 1), v862, v388.f64[0]), v865, v388, 1);
              v390 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v387.f64[0]), v860, v387, 1), v863, v388.f64[0]), v866, v388, 1);
              v391 = v461[-12];
              v392 = v461[-11];
              v393 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v391.f64[0]), v859, v391, 1), v862, v392.f64[0]), v865, v392, 1);
              v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v391.f64[0]), v860, v391, 1), v863, v392.f64[0]), v866, v392, 1);
              v395 = v461[-9];
              v396 = vmlaq_laneq_f64(vmulq_n_f64(v856, v395.f64[0]), v859, v395, 1);
              v397 = v461[-8];
              v398 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v395.f64[0]), v860, v395, 1), v863, v397.f64[0]), v866, v397, 1);
              v399 = v461[-16];
              v400 = v867;
              v401 = v870;
              v402 = vmlaq_laneq_f64(vmlaq_n_f64(v382, v868, v399.f64[0]), v871, v399, 1);
              v403 = v868;
              v404 = v871;
              v405 = vmlaq_laneq_f64(vmlaq_n_f64(v386, v869, v399.f64[0]), v872, v399, 1);
              v406 = v461[-13];
              v407 = vmlaq_laneq_f64(vmlaq_n_f64(v389, v868, v406.f64[0]), v871, v406, 1);
              v408 = vmlaq_laneq_f64(vmlaq_n_f64(v390, v869, v406.f64[0]), v872, v406, 1);
              v409 = v461[-10];
              v410 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v868, v409.f64[0]), v871, v409, 1);
              v411 = vmlaq_laneq_f64(vmlaq_n_f64(v394, v869, v409.f64[0]), v872, v409, 1);
              v412 = v461[-7];
              v413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v396, v862, v397.f64[0]), v865, v397, 1), v868, v412.f64[0]), v871, v412, 1);
              v414 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v869, v412.f64[0]), v872, v412, 1);
              v415 = v857;
              v416 = v860;
              v417 = v863;
              v418 = v866;
              v419 = v869;
              v420 = v872;
              v421 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v379.f64[0]), v861, v379, 1), v864, v461[-17].f64[0]), v867, v461[-17], 1), v870, v461[-16].f64[0]), v873, v461[-16], 1);
              v422 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[-15].f64[0]), v861, v461[-15], 1), v864, v461[-14].f64[0]), v867, v388, 1), v870, v461[-13].f64[0]), v873, v461[-13], 1);
              v423 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[-12].f64[0]), v861, v461[-12], 1), v864, v461[-11].f64[0]), v867, v392, 1), v870, v461[-10].f64[0]), v873, v461[-10], 1);
              v424 = v461[-6];
              v425 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[-9].f64[0]), v861, v461[-9], 1), v864, v461[-8].f64[0]), v867, v461[-8], 1), v870, v461[-7].f64[0]), v873, v412, 1);
              v3[18] = v402;
              v3[19] = v405;
              v3[21] = v407;
              v3[22] = v408;
              v3[27] = v413;
              v3[28] = v414;
              v3[20] = v421;
              v3[23] = v422;
              v3[24] = v410;
              v3[25] = v411;
              v3[26] = v423;
              v427 = v461[-6];
              v426 = v461[-5];
              v428 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v383, v424.f64[0]), v384, v424, 1), v468, v426.f64[0]), v385, v426, 1);
              v429 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v415, v424.f64[0]), v416, v424, 1), v417, v426.f64[0]), v418, v426, 1);
              v431 = v461[-4];
              v430 = v461[-3];
              v432 = vmlaq_laneq_f64(vmulq_n_f64(v383, v430.f64[0]), v384, v430, 1);
              v433 = vmlaq_laneq_f64(vmulq_n_f64(v415, v430.f64[0]), v416, v430, 1);
              v435 = v430;
              v434 = v461[-2];
              v436 = vmlaq_laneq_f64(vmlaq_n_f64(v432, v468, v434.f64[0]), v385, v434, 1);
              v437 = vmlaq_laneq_f64(vmlaq_n_f64(v433, v417, v434.f64[0]), v418, v434, 1);
              v439 = v461[-5];
              v438 = v431;
              v440 = vmlaq_laneq_f64(vmlaq_n_f64(v428, v403, v438.f64[0]), v404, v438, 1);
              v441 = vmlaq_laneq_f64(vmlaq_n_f64(v429, v419, v438.f64[0]), v420, v438, 1);
              v443 = v461[-2];
              v442 = v461[-1];
              v3[29] = v425;
              v3[30] = v440;
              v3[33] = vmlaq_laneq_f64(vmlaq_n_f64(v436, v403, v442.f64[0]), v404, v442, 1);
              v3[34] = vmlaq_laneq_f64(vmlaq_n_f64(v437, v419, v442.f64[0]), v420, v442, 1);
              v444 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v427.f64[0]), v470, v427, 1), v469, v439.f64[0]), v400, v439, 1);
              v445 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v435.f64[0]), v470, v435, 1), v469, v443.f64[0]), v400, v443, 1);
              v446 = v873;
              v447 = v461[-1];
              v448 = vmlaq_laneq_f64(vmlaq_n_f64(v444, v401, v431.f64[0]), v873, v431, 1);
              v3[31] = v441;
              v3[32] = v448;
              v3[35] = vmlaq_laneq_f64(vmlaq_n_f64(v445, v401, v447.f64[0]), v446, v447, 1);
              break;
            default:
              continue;
          }
        }
        break;
      }
    }
    v449 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 744) = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 760) = v449;
    _Q2 = *(_OWORD *)v8;
    _Q1 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 776) = *(_OWORD *)(v8 + 32);
    _D4 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D3, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(v8 + 40);
    __asm { FMLA            D3, D1, V0.D[1] }
    v17 = *(double *)(v5 + 8) * _D3;
  }
  *(double *)(v7 + 840) = v17;
  return v16;
}

BOOL sub_20F6AC0F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  int64x2_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t mm;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  BOOL v68;
  int64x2_t v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t nn;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  int64x2_t v119;
  _QWORD *v120;
  __int128 v121;
  _QWORD *v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t i1;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  void *v313;
  unint64_t v314;
  char *v315;
  int *v316;
  int *v317;
  uint64_t v318;
  int v319;
  char *v320;
  unint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _BYTE *v328;
  _DWORD *v329;
  int64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  _OWORD *v335;
  char *v336;
  uint64_t v337;
  __int128 v338;
  int v339;
  void *v340;
  unint64_t v341;
  char *v342;
  int *v343;
  int *v344;
  uint64_t v345;
  int v346;
  char *v347;
  unint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  _DWORD *v356;
  int64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  int v366;
  void *v367;
  unint64_t v368;
  char *v369;
  int *v370;
  int *v371;
  uint64_t v372;
  int v373;
  char *v374;
  unint64_t v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  _BYTE *v382;
  _DWORD *v383;
  int64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  _OWORD *v389;
  char *v390;
  uint64_t v391;
  __int128 v392;
  int v393;
  void *v394;
  unint64_t v395;
  char *v396;
  int *v397;
  int *v398;
  uint64_t v399;
  int v400;
  char *v401;
  unint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _BYTE *v409;
  _DWORD *v410;
  int64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  _OWORD *v416;
  char *v417;
  uint64_t v418;
  __int128 v419;
  int v420;
  void *v421;
  unint64_t v422;
  char *v423;
  int *v424;
  int *v425;
  uint64_t v426;
  int v427;
  char *v428;
  unint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  _BYTE *v436;
  _DWORD *v437;
  int64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  _OWORD *v443;
  char *v444;
  uint64_t v445;
  __int128 v446;
  int v447;
  void *v448;
  unint64_t v449;
  char *v450;
  int *v451;
  int *v452;
  uint64_t v453;
  int v454;
  char *v455;
  unint64_t v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  _BYTE *v463;
  _DWORD *v464;
  int64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  _OWORD *v470;
  char *v471;
  uint64_t v472;
  __int128 v473;
  int v474;
  void *v475;
  unint64_t v476;
  char *v477;
  int *v478;
  int *v479;
  _DWORD *v480;
  int v481;
  char *v482;
  unint64_t v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  _BYTE *v490;
  _DWORD *v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  char *v495;
  _OWORD *v496;
  char *v497;
  uint64_t v498;
  __int128 v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  unsigned int *v509;
  int *v510;
  int *v511;
  unsigned int *v512;
  int v513;
  unint64_t v514;
  _DWORD *v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  char *v519;
  char *v520;
  char *v521;
  uint64_t v522;
  unsigned int v523;
  int *v524;
  int *v525;
  unsigned int *v526;
  int v527;
  unint64_t v528;
  _DWORD *v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  char *v533;
  char *v534;
  char *v535;
  uint64_t v536;
  unsigned int v537;
  int *v538;
  int *v539;
  unsigned int *v540;
  int v541;
  unint64_t v542;
  _DWORD *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  char *v547;
  char *v548;
  char *v549;
  uint64_t v550;
  unsigned int v551;
  int *v552;
  int *v553;
  unsigned int *v554;
  int v555;
  unint64_t v556;
  _DWORD *v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  char *v561;
  char *v562;
  char *v563;
  uint64_t v564;
  unsigned int v565;
  int *v566;
  int *v567;
  unsigned int *v568;
  unsigned int v569;
  unint64_t v570;
  _DWORD *v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  char *v576;
  char *v577;
  uint64_t v578;
  unsigned int v579;
  unsigned int *v580;
  unsigned int *v581;
  unsigned int *v582;
  unsigned int v583;
  unint64_t v584;
  _DWORD *v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  char *v589;
  char *v590;
  char *v591;
  uint64_t v592;
  unsigned int v593;
  unsigned int *v594;
  unsigned int *v595;
  unsigned int *v596;
  unsigned int v597;
  unint64_t v598;
  _DWORD *v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  char *v603;
  char *v604;
  char *v605;
  uint64_t v606;
  unsigned int v607;
  int v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  uint64_t v612;
  unsigned int *v613;
  unsigned int *v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unsigned int v618;
  unsigned int v619;
  unsigned int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int32x4_t **v624;
  unint64_t v625;
  int32x4_t *v626;
  int32x4_t **v627;
  int32x4_t *v628;
  unint64_t v629;
  unint64_t v630;
  uint64_t v631;
  int32x4_t *v632;
  uint64_t v633;
  int32x4_t *v634;
  uint64_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  unint64_t v639;
  uint64_t v640;
  _QWORD *v641;
  uint64_t v642;
  _DWORD *v643;
  unint64_t v644;
  _DWORD *v645;
  _DWORD *v646;
  _QWORD *v647;
  void *v648;
  unint64_t v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  __int128 v653;
  char *v654;
  uint64_t v655;
  int64x2_t *v656;
  uint64_t v657;
  _QWORD *v658;
  unint64_t v659;
  _QWORD *v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  char *v664;
  char *v665;
  uint64_t v666;
  char *v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  unint64_t v671;
  _BYTE *v672;
  _BYTE *v673;
  char *v674;
  char *v675;
  char *v676;
  uint64_t v677;
  char *v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  uint64_t v682;
  uint64_t v683;
  __int128 v684;
  char *v685;
  uint64_t v686;
  _QWORD *v687;
  unint64_t v688;
  _QWORD *v689;
  unint64_t v690;
  unint64_t v691;
  unint64_t v692;
  char *v693;
  char *v694;
  uint64_t v695;
  char *v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  BOOL v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int *v720;
  unsigned int v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t *v724;
  uint64_t v725;
  _QWORD *v726;
  unsigned int v727;
  uint64_t v728;
  uint64_t v729;
  _QWORD *v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  size_t v736;
  unsigned int v737;
  uint64_t v738;
  unsigned int v739;
  uint64_t v740;
  uint64_t v741;
  _QWORD *v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  size_t v748;
  unsigned int v749;
  uint64_t v750;
  uint64_t *v751;
  unsigned int v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  size_t v758;
  unsigned int v759;
  uint64_t v760;
  unsigned int v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  size_t v767;
  unsigned int v768;
  uint64_t v769;
  unsigned int v770;
  uint64_t v771;
  uint64_t v772;
  _QWORD *v773;
  uint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  size_t v779;
  unsigned int v780;
  uint64_t v781;
  unsigned int v782;
  uint64_t v783;
  uint64_t v784;
  _QWORD *v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  size_t v791;
  unsigned int v792;
  uint64_t v793;
  unsigned int v794;
  uint64_t v795;
  uint64_t v796;
  _QWORD *v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  size_t v803;
  unsigned int v804;
  uint64_t v805;
  unsigned int v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  size_t v815;
  unsigned int v816;
  uint64_t v817;
  unsigned int v818;
  uint64_t v819;
  uint64_t v820;
  _QWORD *v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  size_t v827;
  unsigned int v828;
  uint64_t v829;
  unsigned int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  size_t v839;
  unsigned int v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t i;
  uint64_t v896;
  uint64_t v898;
  uint64_t v899;
  unsigned int v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t j;
  uint64_t v906;
  uint64_t k;
  uint64_t v908;
  uint64_t m;
  uint64_t v910;
  uint64_t n;
  uint64_t v912;
  uint64_t ii;
  uint64_t v914;
  uint64_t jj;
  uint64_t v916;
  uint64_t kk;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  int v930;
  uint64_t v931;
  int v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  int v936;
  uint64_t v937;
  int v938;
  uint64_t v939;
  int v940;
  uint64_t v941;
  int v942;
  uint64_t v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  _QWORD *v955;
  _QWORD *v956;
  uint64_t v957;
  _QWORD *v958;
  _QWORD *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  void **v965;
  void **v966;
  void **v967;
  void **v968;
  void **v969;
  void **v970;
  int v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  _QWORD *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  int v987;
  _QWORD *v988;
  char **v989;
  uint64_t v990;
  uint64_t v991;
  unint64_t v992;
  unsigned int v993;
  unsigned int v994;
  unsigned int v995;
  unsigned int v996;
  unsigned int v997;
  unsigned int v998;
  int64x2_t v999;
  int64x2_t v1000;
  uint64_t v1001;
  uint64_t v1002;

  v1002 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 18424);
  v3 = *(_QWORD *)(a1 + 18416);
  v4 = *(_QWORD *)(a1 + 18448);
  v5 = *(_QWORD *)(a1 + 18440);
  v6 = *(_QWORD *)(a1 + 18472);
  v7 = *(_QWORD *)(a1 + 18464);
  v8 = *(_QWORD *)(a1 + 18496);
  v9 = *(_QWORD *)(a1 + 18488);
  v10 = *(_QWORD *)(a1 + 18520);
  v11 = *(_QWORD *)(a1 + 18512);
  v12 = *(_QWORD *)(a1 + 18544);
  v13 = *(_QWORD *)(a1 + 18536);
  v14 = *(_QWORD *)(a1 + 18568);
  v15 = *(_QWORD *)(a1 + 18560);
  v16 = (_QWORD *)(a1 + 120);
  if (*(_BYTE *)(a1 + 1096))
    goto LABEL_1022;
  v979 = *(_QWORD *)(a1 + 18440);
  v980 = *(_QWORD *)(a1 + 18416);
  v981 = *(_QWORD *)(a1 + 18448);
  v982 = *(_QWORD *)(a1 + 18424);
  v983 = *(_QWORD *)(a1 + 18464);
  v984 = *(_QWORD *)(a1 + 18488);
  v985 = *(_QWORD *)(a1 + 18560);
  v986 = *(_QWORD *)(a1 + 18568);
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 1097)
    || (*(_DWORD *)(a1 + 1908) != 1 ? (v17 = 1) : (v17 = 3), !sub_20F6B1530(a1 + 10856, v17)))
  {
    v978 = v16;
    sub_20F6B6124((uint64_t)v16);
    v976 = v10;
    v977 = v12;
    v974 = v11;
    v975 = v13;
    v972 = v6;
    v973 = v8;
    if (!*(_BYTE *)(a1 + 1097))
    {
LABEL_189:
      v160 = *(_QWORD *)(a1 + 128);
      v161 = *(_QWORD *)(a1 + 136);
      if (v161 != v160)
      {
        v162 = -16 - v161;
        do
        {
          while (1)
          {
            while (1)
            {
              v163 = *(_QWORD *)(v161 - 8);
              v161 -= 16;
              if ((*(_BYTE *)(v163 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v163 + 4) = 0;
              v162 += 16;
              if (v161 == v160)
                goto LABEL_202;
            }
            sub_20F3D7028(a1 + 152, v163);
            v164 = v161 + 16;
            v160 = *(_QWORD *)(a1 + 128);
            v165 = *(_QWORD *)(a1 + 136);
            if (v161 + 16 != v165)
              break;
            *(_QWORD *)(a1 + 136) = v161;
            v162 += 16;
            if (v161 == v160)
              goto LABEL_202;
          }
          v166 = v165 - v161 - 32;
          v167 = v161;
          if (v166 < 0x10)
            goto LABEL_1196;
          v168 = (v166 >> 4) + 1;
          v169 = 16 * (v168 & 0x1FFFFFFFFFFFFFFELL);
          v167 = v161 + v169;
          v164 += v169;
          v170 = (((unint64_t)(v165 + v162) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v171 = v160 + 16 * ((v161 - v160) >> 4) + 24;
          do
          {
            v172 = *(_DWORD *)(v171 + 8);
            *(_DWORD *)(v171 - 24) = *(_DWORD *)(v171 - 8);
            *(_DWORD *)(v171 - 8) = v172;
            v173 = *(_QWORD *)(v171 + 16);
            *(_QWORD *)(v171 - 16) = *(_QWORD *)v171;
            *(_QWORD *)v171 = v173;
            v171 += 32;
            v170 -= 2;
          }
          while (v170);
          if (v168 != (v168 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1196:
            do
            {
              *(_DWORD *)v167 = *(_DWORD *)v164;
              *(_QWORD *)(v167 + 8) = *(_QWORD *)(v164 + 8);
              v167 += 16;
              v164 += 16;
            }
            while (v164 != v165);
          }
          *(_QWORD *)(a1 + 136) = v167;
          v162 += 16;
        }
        while (v161 != v160);
      }
LABEL_202:
      v174 = *(_QWORD *)(a1 + 224);
      v175 = *(_QWORD *)(a1 + 232);
      if (v175 != v174)
      {
        v176 = -16 - v175;
        do
        {
          while (1)
          {
            while (1)
            {
              v177 = *(_QWORD *)(v175 - 8);
              v175 -= 16;
              if ((*(_BYTE *)(v177 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v177 + 4) = 0;
              v176 += 16;
              if (v175 == v174)
                goto LABEL_215;
            }
            sub_20F5B6F80(a1 + 248, v177);
            v178 = v175 + 16;
            v174 = *(_QWORD *)(a1 + 224);
            v179 = *(_QWORD *)(a1 + 232);
            if (v175 + 16 != v179)
              break;
            *(_QWORD *)(a1 + 232) = v175;
            v176 += 16;
            if (v175 == v174)
              goto LABEL_215;
          }
          v180 = v179 - v175 - 32;
          v181 = v175;
          if (v180 < 0x10)
            goto LABEL_1197;
          v182 = (v180 >> 4) + 1;
          v183 = 16 * (v182 & 0x1FFFFFFFFFFFFFFELL);
          v181 = v175 + v183;
          v178 += v183;
          v184 = (((unint64_t)(v179 + v176) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v185 = v174 + 16 * ((v175 - v174) >> 4) + 24;
          do
          {
            v186 = *(_DWORD *)(v185 + 8);
            *(_DWORD *)(v185 - 24) = *(_DWORD *)(v185 - 8);
            *(_DWORD *)(v185 - 8) = v186;
            v187 = *(_QWORD *)(v185 + 16);
            *(_QWORD *)(v185 - 16) = *(_QWORD *)v185;
            *(_QWORD *)v185 = v187;
            v185 += 32;
            v184 -= 2;
          }
          while (v184);
          if (v182 != (v182 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1197:
            do
            {
              *(_DWORD *)v181 = *(_DWORD *)v178;
              *(_QWORD *)(v181 + 8) = *(_QWORD *)(v178 + 8);
              v181 += 16;
              v178 += 16;
            }
            while (v178 != v179);
          }
          *(_QWORD *)(a1 + 232) = v181;
          v176 += 16;
        }
        while (v175 != v174);
      }
LABEL_215:
      v188 = *(_QWORD *)(a1 + 320);
      v189 = *(_QWORD *)(a1 + 328);
      if (v189 != v188)
      {
        v190 = -16 - v189;
        do
        {
          while (1)
          {
            while (1)
            {
              v191 = *(_QWORD *)(v189 - 8);
              v189 -= 16;
              if ((*(_BYTE *)(v191 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v191 + 4) = 0;
              v190 += 16;
              if (v189 == v188)
                goto LABEL_228;
            }
            sub_20F5B7280(a1 + 344, v191);
            v192 = v189 + 16;
            v188 = *(_QWORD *)(a1 + 320);
            v193 = *(_QWORD *)(a1 + 328);
            if (v189 + 16 != v193)
              break;
            *(_QWORD *)(a1 + 328) = v189;
            v190 += 16;
            if (v189 == v188)
              goto LABEL_228;
          }
          v194 = v193 - v189 - 32;
          v195 = v189;
          if (v194 < 0x10)
            goto LABEL_1198;
          v196 = (v194 >> 4) + 1;
          v197 = 16 * (v196 & 0x1FFFFFFFFFFFFFFELL);
          v195 = v189 + v197;
          v192 += v197;
          v198 = (((unint64_t)(v193 + v190) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v199 = v188 + 16 * ((v189 - v188) >> 4) + 24;
          do
          {
            v200 = *(_DWORD *)(v199 + 8);
            *(_DWORD *)(v199 - 24) = *(_DWORD *)(v199 - 8);
            *(_DWORD *)(v199 - 8) = v200;
            v201 = *(_QWORD *)(v199 + 16);
            *(_QWORD *)(v199 - 16) = *(_QWORD *)v199;
            *(_QWORD *)v199 = v201;
            v199 += 32;
            v198 -= 2;
          }
          while (v198);
          if (v196 != (v196 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1198:
            do
            {
              *(_DWORD *)v195 = *(_DWORD *)v192;
              *(_QWORD *)(v195 + 8) = *(_QWORD *)(v192 + 8);
              v195 += 16;
              v192 += 16;
            }
            while (v192 != v193);
          }
          *(_QWORD *)(a1 + 328) = v195;
          v190 += 16;
        }
        while (v189 != v188);
      }
LABEL_228:
      v202 = *(_QWORD *)(a1 + 416);
      v203 = *(_QWORD *)(a1 + 424);
      if (v203 != v202)
      {
        v204 = -16 - v203;
        do
        {
          while (1)
          {
            while (1)
            {
              v205 = *(_QWORD *)(v203 - 8);
              v203 -= 16;
              if ((*(_BYTE *)(v205 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v205 + 4) = 0;
              v204 += 16;
              if (v203 == v202)
                goto LABEL_241;
            }
            sub_20F5B7580(a1 + 440, v205);
            v206 = v203 + 16;
            v202 = *(_QWORD *)(a1 + 416);
            v207 = *(_QWORD *)(a1 + 424);
            if (v203 + 16 != v207)
              break;
            *(_QWORD *)(a1 + 424) = v203;
            v204 += 16;
            if (v203 == v202)
              goto LABEL_241;
          }
          v208 = v207 - v203 - 32;
          v209 = v203;
          if (v208 < 0x10)
            goto LABEL_1199;
          v210 = (v208 >> 4) + 1;
          v211 = 16 * (v210 & 0x1FFFFFFFFFFFFFFELL);
          v209 = v203 + v211;
          v206 += v211;
          v212 = (((unint64_t)(v207 + v204) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v213 = v202 + 16 * ((v203 - v202) >> 4) + 24;
          do
          {
            v214 = *(_DWORD *)(v213 + 8);
            *(_DWORD *)(v213 - 24) = *(_DWORD *)(v213 - 8);
            *(_DWORD *)(v213 - 8) = v214;
            v215 = *(_QWORD *)(v213 + 16);
            *(_QWORD *)(v213 - 16) = *(_QWORD *)v213;
            *(_QWORD *)v213 = v215;
            v213 += 32;
            v212 -= 2;
          }
          while (v212);
          if (v210 != (v210 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1199:
            do
            {
              *(_DWORD *)v209 = *(_DWORD *)v206;
              *(_QWORD *)(v209 + 8) = *(_QWORD *)(v206 + 8);
              v209 += 16;
              v206 += 16;
            }
            while (v206 != v207);
          }
          *(_QWORD *)(a1 + 424) = v209;
          v204 += 16;
        }
        while (v203 != v202);
      }
LABEL_241:
      v216 = *(_QWORD *)(a1 + 520);
      v217 = *(_QWORD *)(a1 + 512);
      if (v216 != v217)
      {
        v218 = -16 - v216;
        do
        {
          while (1)
          {
            while (1)
            {
              v219 = *(_QWORD *)(v216 - 8);
              v216 -= 16;
              if ((*(_BYTE *)(v219 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v219 + 4) = 0;
              v218 += 16;
              if (v216 == v217)
                goto LABEL_254;
            }
            sub_20F6B87CC(a1 + 536, (_QWORD *)v219);
            v217 = *(_QWORD *)(a1 + 512);
            v220 = v216 + 16;
            v221 = *(_QWORD *)(a1 + 520);
            if (v216 + 16 != v221)
              break;
            *(_QWORD *)(a1 + 520) = v216;
            v218 += 16;
            if (v216 == v217)
              goto LABEL_254;
          }
          v222 = v221 - v216 - 32;
          v223 = v216;
          if (v222 < 0x10)
            goto LABEL_1200;
          v224 = (v222 >> 4) + 1;
          v225 = 16 * (v224 & 0x1FFFFFFFFFFFFFFELL);
          v223 = v216 + v225;
          v220 += v225;
          v226 = (((unint64_t)(v221 + v218) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v227 = v217 + 16 * ((v216 - v217) >> 4) + 24;
          do
          {
            v228 = *(_DWORD *)(v227 + 8);
            *(_DWORD *)(v227 - 24) = *(_DWORD *)(v227 - 8);
            *(_DWORD *)(v227 - 8) = v228;
            v229 = *(_QWORD *)(v227 + 16);
            *(_QWORD *)(v227 - 16) = *(_QWORD *)v227;
            *(_QWORD *)v227 = v229;
            v227 += 32;
            v226 -= 2;
          }
          while (v226);
          if (v224 != (v224 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1200:
            do
            {
              *(_DWORD *)v223 = *(_DWORD *)v220;
              *(_QWORD *)(v223 + 8) = *(_QWORD *)(v220 + 8);
              v223 += 16;
              v220 += 16;
            }
            while (v220 != v221);
          }
          *(_QWORD *)(a1 + 520) = v223;
          v218 += 16;
        }
        while (v216 != v217);
      }
LABEL_254:
      v230 = *(_QWORD *)(a1 + 616);
      v231 = *(_QWORD *)(a1 + 608);
      if (v230 != v231)
      {
        v232 = -16 - v230;
        do
        {
          while (1)
          {
            while (1)
            {
              v233 = *(_QWORD *)(v230 - 8);
              v230 -= 16;
              if ((*(_BYTE *)(v233 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v233 + 4) = 0;
              v232 += 16;
              if (v230 == v231)
                goto LABEL_267;
            }
            sub_20F6B8ACC(a1 + 632, (_QWORD *)v233);
            v231 = *(_QWORD *)(a1 + 608);
            v234 = v230 + 16;
            v235 = *(_QWORD *)(a1 + 616);
            if (v230 + 16 != v235)
              break;
            *(_QWORD *)(a1 + 616) = v230;
            v232 += 16;
            if (v230 == v231)
              goto LABEL_267;
          }
          v236 = v235 - v230 - 32;
          v237 = v230;
          if (v236 < 0x10)
            goto LABEL_1201;
          v238 = (v236 >> 4) + 1;
          v239 = 16 * (v238 & 0x1FFFFFFFFFFFFFFELL);
          v237 = v230 + v239;
          v234 += v239;
          v240 = (((unint64_t)(v235 + v232) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v241 = v231 + 16 * ((v230 - v231) >> 4) + 24;
          do
          {
            v242 = *(_DWORD *)(v241 + 8);
            *(_DWORD *)(v241 - 24) = *(_DWORD *)(v241 - 8);
            *(_DWORD *)(v241 - 8) = v242;
            v243 = *(_QWORD *)(v241 + 16);
            *(_QWORD *)(v241 - 16) = *(_QWORD *)v241;
            *(_QWORD *)v241 = v243;
            v241 += 32;
            v240 -= 2;
          }
          while (v240);
          if (v238 != (v238 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1201:
            do
            {
              *(_DWORD *)v237 = *(_DWORD *)v234;
              *(_QWORD *)(v237 + 8) = *(_QWORD *)(v234 + 8);
              v237 += 16;
              v234 += 16;
            }
            while (v234 != v235);
          }
          *(_QWORD *)(a1 + 616) = v237;
          v232 += 16;
        }
        while (v230 != v231);
      }
LABEL_267:
      v244 = *(_QWORD *)(a1 + 712);
      v245 = *(_QWORD *)(a1 + 704);
      if (v244 != v245)
      {
        v246 = -16 - v244;
        do
        {
          while (1)
          {
            while (1)
            {
              v247 = *(_QWORD *)(v244 - 8);
              v244 -= 16;
              if ((*(_BYTE *)(v247 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v247 + 4) = 0;
              v246 += 16;
              if (v244 == v245)
                goto LABEL_280;
            }
            sub_20F6B8DCC(a1 + 728, (_QWORD *)v247);
            v245 = *(_QWORD *)(a1 + 704);
            v248 = v244 + 16;
            v249 = *(_QWORD *)(a1 + 712);
            if (v244 + 16 != v249)
              break;
            *(_QWORD *)(a1 + 712) = v244;
            v246 += 16;
            if (v244 == v245)
              goto LABEL_280;
          }
          v250 = v249 - v244 - 32;
          v251 = v244;
          if (v250 < 0x10)
            goto LABEL_1202;
          v252 = (v250 >> 4) + 1;
          v253 = 16 * (v252 & 0x1FFFFFFFFFFFFFFELL);
          v251 = v244 + v253;
          v248 += v253;
          v254 = (((unint64_t)(v249 + v246) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v255 = v245 + 16 * ((v244 - v245) >> 4) + 24;
          do
          {
            v256 = *(_DWORD *)(v255 + 8);
            *(_DWORD *)(v255 - 24) = *(_DWORD *)(v255 - 8);
            *(_DWORD *)(v255 - 8) = v256;
            v257 = *(_QWORD *)(v255 + 16);
            *(_QWORD *)(v255 - 16) = *(_QWORD *)v255;
            *(_QWORD *)v255 = v257;
            v255 += 32;
            v254 -= 2;
          }
          while (v254);
          if (v252 != (v252 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1202:
            do
            {
              *(_DWORD *)v251 = *(_DWORD *)v248;
              *(_QWORD *)(v251 + 8) = *(_QWORD *)(v248 + 8);
              v251 += 16;
              v248 += 16;
            }
            while (v248 != v249);
          }
          *(_QWORD *)(a1 + 712) = v251;
          v246 += 16;
        }
        while (v244 != v245);
      }
LABEL_280:
      v258 = *(_QWORD *)(a1 + 808);
      v259 = *(_QWORD *)(a1 + 800);
      if (v258 != v259)
      {
        v260 = -16 - v258;
        do
        {
          while (1)
          {
            while (1)
            {
              v261 = *(_QWORD *)(v258 - 8);
              v258 -= 16;
              if ((*(_BYTE *)(v261 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v261 + 4) = 0;
              v260 += 16;
              if (v258 == v259)
                goto LABEL_293;
            }
            sub_20F2BAEA4(a1 + 824, v261);
            v259 = *(_QWORD *)(a1 + 800);
            v262 = v258 + 16;
            v263 = *(_QWORD *)(a1 + 808);
            if (v258 + 16 != v263)
              break;
            *(_QWORD *)(a1 + 808) = v258;
            v260 += 16;
            if (v258 == v259)
              goto LABEL_293;
          }
          v264 = v263 - v258 - 32;
          v265 = v258;
          if (v264 < 0x10)
            goto LABEL_1203;
          v266 = (v264 >> 4) + 1;
          v267 = 16 * (v266 & 0x1FFFFFFFFFFFFFFELL);
          v265 = v258 + v267;
          v262 += v267;
          v268 = (((unint64_t)(v263 + v260) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v269 = v259 + 16 * ((v258 - v259) >> 4) + 24;
          do
          {
            v270 = *(_DWORD *)(v269 + 8);
            *(_DWORD *)(v269 - 24) = *(_DWORD *)(v269 - 8);
            *(_DWORD *)(v269 - 8) = v270;
            v271 = *(_QWORD *)(v269 + 16);
            *(_QWORD *)(v269 - 16) = *(_QWORD *)v269;
            *(_QWORD *)v269 = v271;
            v269 += 32;
            v268 -= 2;
          }
          while (v268);
          if (v266 != (v266 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1203:
            do
            {
              *(_DWORD *)v265 = *(_DWORD *)v262;
              *(_QWORD *)(v265 + 8) = *(_QWORD *)(v262 + 8);
              v265 += 16;
              v262 += 16;
            }
            while (v262 != v263);
          }
          *(_QWORD *)(a1 + 808) = v265;
          v260 += 16;
        }
        while (v258 != v259);
      }
LABEL_293:
      *(_WORD *)(a1 + 1096) = 1;
      *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a1 + 1104);
      *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a1 + 1296);
      *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a1 + 1488);
      *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a1 + 1128);
      *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a1 + 1320);
      *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a1 + 1512);
      *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a1 + 1152);
      *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a1 + 1344);
      *(_QWORD *)(a1 + 1544) = *(_QWORD *)(a1 + 1536);
      *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a1 + 1176);
      *(_QWORD *)(a1 + 1376) = *(_QWORD *)(a1 + 1368);
      *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a1 + 1560);
      *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a1 + 1200);
      *(_QWORD *)(a1 + 1400) = *(_QWORD *)(a1 + 1392);
      *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a1 + 1584);
      *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1224);
      *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a1 + 1416);
      *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a1 + 1608);
      *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a1 + 1248);
      *(_QWORD *)(a1 + 1448) = *(_QWORD *)(a1 + 1440);
      *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a1 + 1632);
      *(_QWORD *)(a1 + 1280) = *(_QWORD *)(a1 + 1272);
      *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a1 + 1464);
      *(_QWORD *)(a1 + 1664) = *(_QWORD *)(a1 + 1656);
      v272 = *(_QWORD *)(a1 + 128);
      v273 = *(_QWORD *)(a1 + 136);
      if (v272 != v273)
      {
        v274 = 0;
        do
        {
          v275 = *(_QWORD *)(v272 + 8);
          if (*(_BYTE *)(v275 + 20))
            v276 = v274;
          else
            v276 = -1;
          v274 += *(unsigned __int8 *)(v275 + 20);
          *(_DWORD *)v275 = v276;
          v272 += 16;
        }
        while (v272 != v273);
      }
      v277 = *(_QWORD *)(a1 + 224);
      v278 = *(_QWORD *)(a1 + 232);
      if (v277 != v278)
      {
        v279 = 0;
        do
        {
          v280 = *(_QWORD *)(v277 + 8);
          if (*(_BYTE *)(v280 + 20))
            v281 = v279;
          else
            v281 = -1;
          v279 += *(unsigned __int8 *)(v280 + 20);
          *(_DWORD *)v280 = v281;
          v277 += 16;
        }
        while (v277 != v278);
      }
      v282 = *(_QWORD *)(a1 + 320);
      v283 = *(_QWORD *)(a1 + 328);
      if (v282 != v283)
      {
        v284 = 0;
        do
        {
          v285 = *(_QWORD *)(v282 + 8);
          if (*(_BYTE *)(v285 + 20))
            v286 = v284;
          else
            v286 = -1;
          v284 += *(unsigned __int8 *)(v285 + 20);
          *(_DWORD *)v285 = v286;
          v282 += 16;
        }
        while (v282 != v283);
      }
      v287 = *(_QWORD *)(a1 + 416);
      v288 = *(_QWORD *)(a1 + 424);
      if (v287 != v288)
      {
        v289 = 0;
        do
        {
          v290 = *(_QWORD *)(v287 + 8);
          if (*(_BYTE *)(v290 + 20))
            v291 = v289;
          else
            v291 = -1;
          v289 += *(unsigned __int8 *)(v290 + 20);
          *(_DWORD *)v290 = v291;
          v287 += 16;
        }
        while (v287 != v288);
      }
      v292 = *(_QWORD *)(a1 + 512);
      v293 = *(_QWORD *)(a1 + 520);
      if (v292 != v293)
      {
        v294 = 0;
        do
        {
          v295 = *(_QWORD *)(v292 + 8);
          if (*(_BYTE *)(v295 + 20))
            v296 = v294;
          else
            v296 = -1;
          v294 += *(unsigned __int8 *)(v295 + 20);
          *(_DWORD *)v295 = v296;
          v292 += 16;
        }
        while (v292 != v293);
      }
      v297 = *(_QWORD *)(a1 + 608);
      v298 = *(_QWORD *)(a1 + 616);
      if (v297 != v298)
      {
        v299 = 0;
        do
        {
          v300 = *(_QWORD *)(v297 + 8);
          if (*(_BYTE *)(v300 + 20))
            v301 = v299;
          else
            v301 = -1;
          v299 += *(unsigned __int8 *)(v300 + 20);
          *(_DWORD *)v300 = v301;
          v297 += 16;
        }
        while (v297 != v298);
      }
      v302 = *(_QWORD *)(a1 + 704);
      v303 = *(_QWORD *)(a1 + 712);
      if (v302 != v303)
      {
        v304 = 0;
        do
        {
          v305 = *(_QWORD *)(v302 + 8);
          if (*(_BYTE *)(v305 + 20))
            v306 = v304;
          else
            v306 = -1;
          v304 += *(unsigned __int8 *)(v305 + 20);
          *(_DWORD *)v305 = v306;
          v302 += 16;
        }
        while (v302 != v303);
      }
      v307 = *(_QWORD *)(a1 + 800);
      v308 = *(_QWORD *)(a1 + 808);
      if (v307 != v308)
      {
        v309 = 0;
        do
        {
          v310 = *(_QWORD *)(v307 + 8);
          if (*(_BYTE *)(v310 + 20))
            v311 = v309;
          else
            v311 = -1;
          v309 += *(unsigned __int8 *)(v310 + 20);
          *(_DWORD *)v310 = v311;
          v307 += 16;
        }
        while (v307 != v308);
      }
      v971 = *(_DWORD *)(a1 + 1884);
      v987 = *(_DWORD *)(a1 + 1904);
      v989 = (char **)(a1 + 10688);
      v312 = *(_QWORD *)(a1 + 9616);
      if (*(_BYTE *)(v312 + 976))
      {
        *(_QWORD *)(a1 + 10696) = *(_QWORD *)(a1 + 10688);
        *(_QWORD *)(a1 + 10720) = *(_QWORD *)(a1 + 10712);
        *(_QWORD *)(a1 + 10744) = *(_QWORD *)(a1 + 10736);
        *(_QWORD *)(a1 + 10768) = *(_QWORD *)(a1 + 10760);
        *(_QWORD *)(a1 + 10792) = *(_QWORD *)(a1 + 10784);
        *(_QWORD *)(a1 + 10816) = *(_QWORD *)(a1 + 10808);
        *(_QWORD *)(a1 + 10840) = *(_QWORD *)(a1 + 10832);
        sub_20F59AAD4((uint64_t)v989);
        if (*(_BYTE *)(v312 + 976))
        {
          v313 = *(void **)(a1 + 10688);
          *(_QWORD *)(a1 + 10696) = v313;
          v314 = ((*(_QWORD *)(v312 + 16) - *(_QWORD *)(v312 + 8)) >> 4);
          if (v314 > (uint64_t)(*(_QWORD *)(a1 + 10704) - (_QWORD)v313) >> 2)
          {
            v315 = (char *)operator new(4 * v314);
            *(_QWORD *)(a1 + 10688) = v315;
            *(_QWORD *)(a1 + 10696) = v315;
            *(_QWORD *)(a1 + 10704) = &v315[4 * v314];
            if (v313)
              operator delete(v313);
          }
          v316 = *(int **)(v312 + 8);
          v317 = *(int **)(v312 + 16);
          v964 = v312;
          while (v316 != v317)
          {
            if (*(_BYTE *)(*((_QWORD *)v316 + 1) + 20))
            {
              v319 = *v316;
              v320 = *(char **)(a1 + 10696);
              v321 = *(_QWORD *)(a1 + 10704);
              if ((unint64_t)v320 >= v321)
              {
                v322 = *v989;
                v323 = v320 - *v989;
                v324 = v323 >> 2;
                v325 = (v323 >> 2) + 1;
                if (v325 >> 62)
LABEL_1190:
                  sub_20E867F44();
                v326 = v321 - (_QWORD)v322;
                if (v326 >> 1 > v325)
                  v325 = v326 >> 1;
                if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFFCLL)
                  v327 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v327 = v325;
                if (v327)
                {
                  if (v327 >> 62)
LABEL_1188:
                    sub_20E877A38();
                  v328 = operator new(4 * v327);
                  v329 = &v328[4 * v324];
                  *v329 = v319;
                  v318 = (uint64_t)(v329 + 1);
                  v330 = v320 - v322;
                  if (v320 == v322)
                  {
LABEL_370:
                    *(_QWORD *)(a1 + 10688) = v329;
                    *(_QWORD *)(a1 + 10696) = v318;
                    *(_QWORD *)(a1 + 10704) = &v328[4 * v327];
                    if (v322)
                      operator delete(v322);
                    goto LABEL_348;
                  }
                }
                else
                {
                  v328 = 0;
                  v329 = (_DWORD *)(4 * v324);
                  *(_DWORD *)(4 * v324) = v319;
                  v318 = 4 * v324 + 4;
                  v330 = v320 - v322;
                  if (v320 == v322)
                    goto LABEL_370;
                }
                v331 = v330 - 4;
                if (v331 < 0x2C)
                  goto LABEL_1209;
                if ((unint64_t)(v320 - v328 - v323) < 0x20)
                  goto LABEL_1209;
                v332 = (v331 >> 2) + 1;
                v333 = 4 * (v332 & 0x7FFFFFFFFFFFFFF8);
                v334 = &v320[-v333];
                v329 = (_DWORD *)((char *)v329 - v333);
                v335 = &v328[4 * v324 - 16];
                v336 = v320 - 16;
                v337 = v332 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v338 = *(_OWORD *)v336;
                  *(v335 - 1) = *((_OWORD *)v336 - 1);
                  *v335 = v338;
                  v335 -= 2;
                  v336 -= 32;
                  v337 -= 8;
                }
                while (v337);
                v320 = v334;
                if (v332 != (v332 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1209:
                  do
                  {
                    v339 = *((_DWORD *)v320 - 1);
                    v320 -= 4;
                    *--v329 = v339;
                  }
                  while (v320 != v322);
                }
                goto LABEL_370;
              }
              *(_DWORD *)v320 = v319;
              v318 = (uint64_t)(v320 + 4);
LABEL_348:
              *(_QWORD *)(a1 + 10696) = v318;
            }
            v316 += 4;
          }
          if (*(_BYTE *)(v964 + 976))
          {
            v340 = *(void **)(a1 + 10712);
            *(_QWORD *)(a1 + 10720) = v340;
            v341 = ((*(_QWORD *)(v964 + 112) - *(_QWORD *)(v964 + 104)) >> 4);
            if (v341 > (uint64_t)(*(_QWORD *)(a1 + 10728) - (_QWORD)v340) >> 2)
            {
              v342 = (char *)operator new(4 * v341);
              *(_QWORD *)(a1 + 10712) = v342;
              *(_QWORD *)(a1 + 10720) = v342;
              *(_QWORD *)(a1 + 10728) = &v342[4 * v341];
              if (v340)
                operator delete(v340);
            }
            v343 = *(int **)(v964 + 104);
            v344 = *(int **)(v964 + 112);
            if (v343 != v344)
            {
              v965 = (void **)(a1 + 10712);
              while (1)
              {
                if (!*(_BYTE *)(*((_QWORD *)v343 + 1) + 20))
                  goto LABEL_380;
                v346 = *v343;
                v347 = *(char **)(a1 + 10720);
                v348 = *(_QWORD *)(a1 + 10728);
                if ((unint64_t)v347 >= v348)
                  break;
                *(_DWORD *)v347 = v346;
                v345 = (uint64_t)(v347 + 4);
LABEL_379:
                *(_QWORD *)(a1 + 10720) = v345;
LABEL_380:
                v343 += 4;
                if (v343 == v344)
                  goto LABEL_402;
              }
              v349 = (char *)*v965;
              v350 = v347 - (_BYTE *)*v965;
              v351 = v350 >> 2;
              v352 = (v350 >> 2) + 1;
              if (v352 >> 62)
                goto LABEL_1190;
              v353 = v348 - (_QWORD)v349;
              if (v353 >> 1 > v352)
                v352 = v353 >> 1;
              if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL)
                v354 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v354 = v352;
              if (v354)
              {
                if (v354 >> 62)
                  goto LABEL_1188;
                v355 = operator new(4 * v354);
                v356 = &v355[4 * v351];
                *v356 = v346;
                v345 = (uint64_t)(v356 + 1);
                v357 = v347 - v349;
                if (v347 == v349)
                  goto LABEL_400;
              }
              else
              {
                v355 = 0;
                v356 = (_DWORD *)(4 * v351);
                *(_DWORD *)(4 * v351) = v346;
                v345 = 4 * v351 + 4;
                v357 = v347 - v349;
                if (v347 == v349)
                {
LABEL_400:
                  *(_QWORD *)(a1 + 10712) = v356;
                  *(_QWORD *)(a1 + 10720) = v345;
                  *(_QWORD *)(a1 + 10728) = &v355[4 * v354];
                  if (v349)
                    operator delete(v349);
                  goto LABEL_379;
                }
              }
              v358 = v357 - 4;
              if (v358 < 0x2C)
                goto LABEL_1210;
              if ((unint64_t)(v347 - v355 - v350) < 0x20)
                goto LABEL_1210;
              v359 = (v358 >> 2) + 1;
              v360 = 4 * (v359 & 0x7FFFFFFFFFFFFFF8);
              v361 = &v347[-v360];
              v356 = (_DWORD *)((char *)v356 - v360);
              v362 = &v355[4 * v351 - 16];
              v363 = v347 - 16;
              v364 = v359 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v365 = *(_OWORD *)v363;
                *(v362 - 1) = *((_OWORD *)v363 - 1);
                *v362 = v365;
                v362 -= 2;
                v363 -= 32;
                v364 -= 8;
              }
              while (v364);
              v347 = v361;
              if (v359 != (v359 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1210:
                do
                {
                  v366 = *((_DWORD *)v347 - 1);
                  v347 -= 4;
                  *--v356 = v366;
                }
                while (v347 != v349);
              }
              goto LABEL_400;
            }
LABEL_402:
            if (*(_BYTE *)(v964 + 976))
            {
              v367 = *(void **)(a1 + 10736);
              *(_QWORD *)(a1 + 10744) = v367;
              v368 = ((*(_QWORD *)(v964 + 208) - *(_QWORD *)(v964 + 200)) >> 4);
              if (v368 > (uint64_t)(*(_QWORD *)(a1 + 10752) - (_QWORD)v367) >> 2)
              {
                v369 = (char *)operator new(4 * v368);
                *(_QWORD *)(a1 + 10736) = v369;
                *(_QWORD *)(a1 + 10744) = v369;
                *(_QWORD *)(a1 + 10752) = &v369[4 * v368];
                if (v367)
                  operator delete(v367);
              }
              v370 = *(int **)(v964 + 200);
              v371 = *(int **)(v964 + 208);
              if (v370 != v371)
              {
                v966 = (void **)(a1 + 10736);
                while (1)
                {
                  if (!*(_BYTE *)(*((_QWORD *)v370 + 1) + 20))
                    goto LABEL_410;
                  v373 = *v370;
                  v374 = *(char **)(a1 + 10744);
                  v375 = *(_QWORD *)(a1 + 10752);
                  if ((unint64_t)v374 >= v375)
                    break;
                  *(_DWORD *)v374 = v373;
                  v372 = (uint64_t)(v374 + 4);
LABEL_409:
                  *(_QWORD *)(a1 + 10744) = v372;
LABEL_410:
                  v370 += 4;
                  if (v370 == v371)
                    goto LABEL_432;
                }
                v376 = (char *)*v966;
                v377 = v374 - (_BYTE *)*v966;
                v378 = v377 >> 2;
                v379 = (v377 >> 2) + 1;
                if (v379 >> 62)
                  goto LABEL_1190;
                v380 = v375 - (_QWORD)v376;
                if (v380 >> 1 > v379)
                  v379 = v380 >> 1;
                if ((unint64_t)v380 >= 0x7FFFFFFFFFFFFFFCLL)
                  v381 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v381 = v379;
                if (v381)
                {
                  if (v381 >> 62)
                    goto LABEL_1188;
                  v382 = operator new(4 * v381);
                  v383 = &v382[4 * v378];
                  *v383 = v373;
                  v372 = (uint64_t)(v383 + 1);
                  v384 = v374 - v376;
                  if (v374 == v376)
                    goto LABEL_430;
                }
                else
                {
                  v382 = 0;
                  v383 = (_DWORD *)(4 * v378);
                  *(_DWORD *)(4 * v378) = v373;
                  v372 = 4 * v378 + 4;
                  v384 = v374 - v376;
                  if (v374 == v376)
                  {
LABEL_430:
                    *(_QWORD *)(a1 + 10736) = v383;
                    *(_QWORD *)(a1 + 10744) = v372;
                    *(_QWORD *)(a1 + 10752) = &v382[4 * v381];
                    if (v376)
                      operator delete(v376);
                    goto LABEL_409;
                  }
                }
                v385 = v384 - 4;
                if (v385 < 0x2C)
                  goto LABEL_1208;
                if ((unint64_t)(v374 - v382 - v377) < 0x20)
                  goto LABEL_1208;
                v386 = (v385 >> 2) + 1;
                v387 = 4 * (v386 & 0x7FFFFFFFFFFFFFF8);
                v388 = &v374[-v387];
                v383 = (_DWORD *)((char *)v383 - v387);
                v389 = &v382[4 * v378 - 16];
                v390 = v374 - 16;
                v391 = v386 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v392 = *(_OWORD *)v390;
                  *(v389 - 1) = *((_OWORD *)v390 - 1);
                  *v389 = v392;
                  v389 -= 2;
                  v390 -= 32;
                  v391 -= 8;
                }
                while (v391);
                v374 = v388;
                if (v386 != (v386 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1208:
                  do
                  {
                    v393 = *((_DWORD *)v374 - 1);
                    v374 -= 4;
                    *--v383 = v393;
                  }
                  while (v374 != v376);
                }
                goto LABEL_430;
              }
LABEL_432:
              if (*(_BYTE *)(v964 + 976))
              {
                v394 = *(void **)(a1 + 10760);
                *(_QWORD *)(a1 + 10768) = v394;
                v395 = ((*(_QWORD *)(v964 + 304) - *(_QWORD *)(v964 + 296)) >> 4);
                if (v395 > (uint64_t)(*(_QWORD *)(a1 + 10776) - (_QWORD)v394) >> 2)
                {
                  v396 = (char *)operator new(4 * v395);
                  *(_QWORD *)(a1 + 10760) = v396;
                  *(_QWORD *)(a1 + 10768) = v396;
                  *(_QWORD *)(a1 + 10776) = &v396[4 * v395];
                  if (v394)
                    operator delete(v394);
                }
                v397 = *(int **)(v964 + 296);
                v398 = *(int **)(v964 + 304);
                if (v397 != v398)
                {
                  v967 = (void **)(a1 + 10760);
                  while (1)
                  {
                    if (!*(_BYTE *)(*((_QWORD *)v397 + 1) + 20))
                      goto LABEL_440;
                    v400 = *v397;
                    v401 = *(char **)(a1 + 10768);
                    v402 = *(_QWORD *)(a1 + 10776);
                    if ((unint64_t)v401 >= v402)
                      break;
                    *(_DWORD *)v401 = v400;
                    v399 = (uint64_t)(v401 + 4);
LABEL_439:
                    *(_QWORD *)(a1 + 10768) = v399;
LABEL_440:
                    v397 += 4;
                    if (v397 == v398)
                      goto LABEL_462;
                  }
                  v403 = (char *)*v967;
                  v404 = v401 - (_BYTE *)*v967;
                  v405 = v404 >> 2;
                  v406 = (v404 >> 2) + 1;
                  if (v406 >> 62)
                    goto LABEL_1190;
                  v407 = v402 - (_QWORD)v403;
                  if (v407 >> 1 > v406)
                    v406 = v407 >> 1;
                  if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFFCLL)
                    v408 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v408 = v406;
                  if (v408)
                  {
                    if (v408 >> 62)
                      goto LABEL_1188;
                    v409 = operator new(4 * v408);
                    v410 = &v409[4 * v405];
                    *v410 = v400;
                    v399 = (uint64_t)(v410 + 1);
                    v411 = v401 - v403;
                    if (v401 == v403)
                      goto LABEL_460;
                  }
                  else
                  {
                    v409 = 0;
                    v410 = (_DWORD *)(4 * v405);
                    *(_DWORD *)(4 * v405) = v400;
                    v399 = 4 * v405 + 4;
                    v411 = v401 - v403;
                    if (v401 == v403)
                    {
LABEL_460:
                      *(_QWORD *)(a1 + 10760) = v410;
                      *(_QWORD *)(a1 + 10768) = v399;
                      *(_QWORD *)(a1 + 10776) = &v409[4 * v408];
                      if (v403)
                        operator delete(v403);
                      goto LABEL_439;
                    }
                  }
                  v412 = v411 - 4;
                  if (v412 < 0x2C)
                    goto LABEL_1206;
                  if ((unint64_t)(v401 - v409 - v404) < 0x20)
                    goto LABEL_1206;
                  v413 = (v412 >> 2) + 1;
                  v414 = 4 * (v413 & 0x7FFFFFFFFFFFFFF8);
                  v415 = &v401[-v414];
                  v410 = (_DWORD *)((char *)v410 - v414);
                  v416 = &v409[4 * v405 - 16];
                  v417 = v401 - 16;
                  v418 = v413 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v419 = *(_OWORD *)v417;
                    *(v416 - 1) = *((_OWORD *)v417 - 1);
                    *v416 = v419;
                    v416 -= 2;
                    v417 -= 32;
                    v418 -= 8;
                  }
                  while (v418);
                  v401 = v415;
                  if (v413 != (v413 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1206:
                    do
                    {
                      v420 = *((_DWORD *)v401 - 1);
                      v401 -= 4;
                      *--v410 = v420;
                    }
                    while (v401 != v403);
                  }
                  goto LABEL_460;
                }
LABEL_462:
                if (*(_BYTE *)(v964 + 976))
                {
                  v421 = *(void **)(a1 + 10784);
                  *(_QWORD *)(a1 + 10792) = v421;
                  v422 = ((*(_QWORD *)(v964 + 400) - *(_QWORD *)(v964 + 392)) >> 4);
                  if (v422 > (uint64_t)(*(_QWORD *)(a1 + 10800) - (_QWORD)v421) >> 2)
                  {
                    v423 = (char *)operator new(4 * v422);
                    *(_QWORD *)(a1 + 10784) = v423;
                    *(_QWORD *)(a1 + 10792) = v423;
                    *(_QWORD *)(a1 + 10800) = &v423[4 * v422];
                    if (v421)
                      operator delete(v421);
                  }
                  v424 = *(int **)(v964 + 392);
                  v425 = *(int **)(v964 + 400);
                  if (v424 != v425)
                  {
                    v968 = (void **)(a1 + 10784);
                    while (1)
                    {
                      if (!*(_BYTE *)(*((_QWORD *)v424 + 1) + 20))
                        goto LABEL_470;
                      v427 = *v424;
                      v428 = *(char **)(a1 + 10792);
                      v429 = *(_QWORD *)(a1 + 10800);
                      if ((unint64_t)v428 >= v429)
                        break;
                      *(_DWORD *)v428 = v427;
                      v426 = (uint64_t)(v428 + 4);
LABEL_469:
                      *(_QWORD *)(a1 + 10792) = v426;
LABEL_470:
                      v424 += 4;
                      if (v424 == v425)
                        goto LABEL_492;
                    }
                    v430 = (char *)*v968;
                    v431 = v428 - (_BYTE *)*v968;
                    v432 = v431 >> 2;
                    v433 = (v431 >> 2) + 1;
                    if (v433 >> 62)
                      goto LABEL_1190;
                    v434 = v429 - (_QWORD)v430;
                    if (v434 >> 1 > v433)
                      v433 = v434 >> 1;
                    if ((unint64_t)v434 >= 0x7FFFFFFFFFFFFFFCLL)
                      v435 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v435 = v433;
                    if (v435)
                    {
                      if (v435 >> 62)
                        goto LABEL_1188;
                      v436 = operator new(4 * v435);
                      v437 = &v436[4 * v432];
                      *v437 = v427;
                      v426 = (uint64_t)(v437 + 1);
                      v438 = v428 - v430;
                      if (v428 == v430)
                        goto LABEL_490;
                    }
                    else
                    {
                      v436 = 0;
                      v437 = (_DWORD *)(4 * v432);
                      *(_DWORD *)(4 * v432) = v427;
                      v426 = 4 * v432 + 4;
                      v438 = v428 - v430;
                      if (v428 == v430)
                      {
LABEL_490:
                        *(_QWORD *)(a1 + 10784) = v437;
                        *(_QWORD *)(a1 + 10792) = v426;
                        *(_QWORD *)(a1 + 10800) = &v436[4 * v435];
                        if (v430)
                          operator delete(v430);
                        goto LABEL_469;
                      }
                    }
                    v439 = v438 - 4;
                    if (v439 < 0x2C)
                      goto LABEL_1204;
                    if ((unint64_t)(v428 - v436 - v431) < 0x20)
                      goto LABEL_1204;
                    v440 = (v439 >> 2) + 1;
                    v441 = 4 * (v440 & 0x7FFFFFFFFFFFFFF8);
                    v442 = &v428[-v441];
                    v437 = (_DWORD *)((char *)v437 - v441);
                    v443 = &v436[4 * v432 - 16];
                    v444 = v428 - 16;
                    v445 = v440 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v446 = *(_OWORD *)v444;
                      *(v443 - 1) = *((_OWORD *)v444 - 1);
                      *v443 = v446;
                      v443 -= 2;
                      v444 -= 32;
                      v445 -= 8;
                    }
                    while (v445);
                    v428 = v442;
                    if (v440 != (v440 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_1204:
                      do
                      {
                        v447 = *((_DWORD *)v428 - 1);
                        v428 -= 4;
                        *--v437 = v447;
                      }
                      while (v428 != v430);
                    }
                    goto LABEL_490;
                  }
LABEL_492:
                  if (*(_BYTE *)(v964 + 976))
                  {
                    v448 = *(void **)(a1 + 10808);
                    *(_QWORD *)(a1 + 10816) = v448;
                    v449 = ((*(_QWORD *)(v964 + 496) - *(_QWORD *)(v964 + 488)) >> 4);
                    if (v449 > (uint64_t)(*(_QWORD *)(a1 + 10824) - (_QWORD)v448) >> 2)
                    {
                      v450 = (char *)operator new(4 * v449);
                      *(_QWORD *)(a1 + 10808) = v450;
                      *(_QWORD *)(a1 + 10816) = v450;
                      *(_QWORD *)(a1 + 10824) = &v450[4 * v449];
                      if (v448)
                        operator delete(v448);
                    }
                    v451 = *(int **)(v964 + 488);
                    v452 = *(int **)(v964 + 496);
                    if (v451 != v452)
                    {
                      v969 = (void **)(a1 + 10808);
                      while (1)
                      {
                        if (!*(_BYTE *)(*((_QWORD *)v451 + 1) + 20))
                          goto LABEL_500;
                        v454 = *v451;
                        v455 = *(char **)(a1 + 10816);
                        v456 = *(_QWORD *)(a1 + 10824);
                        if ((unint64_t)v455 >= v456)
                          break;
                        *(_DWORD *)v455 = v454;
                        v453 = (uint64_t)(v455 + 4);
LABEL_499:
                        *(_QWORD *)(a1 + 10816) = v453;
LABEL_500:
                        v451 += 4;
                        if (v451 == v452)
                          goto LABEL_522;
                      }
                      v457 = (char *)*v969;
                      v458 = v455 - (_BYTE *)*v969;
                      v459 = v458 >> 2;
                      v460 = (v458 >> 2) + 1;
                      if (v460 >> 62)
                        goto LABEL_1190;
                      v461 = v456 - (_QWORD)v457;
                      if (v461 >> 1 > v460)
                        v460 = v461 >> 1;
                      if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFFCLL)
                        v462 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v462 = v460;
                      if (v462)
                      {
                        if (v462 >> 62)
                          goto LABEL_1188;
                        v463 = operator new(4 * v462);
                        v464 = &v463[4 * v459];
                        *v464 = v454;
                        v453 = (uint64_t)(v464 + 1);
                        v465 = v455 - v457;
                        if (v455 == v457)
                          goto LABEL_520;
                      }
                      else
                      {
                        v463 = 0;
                        v464 = (_DWORD *)(4 * v459);
                        *(_DWORD *)(4 * v459) = v454;
                        v453 = 4 * v459 + 4;
                        v465 = v455 - v457;
                        if (v455 == v457)
                        {
LABEL_520:
                          *(_QWORD *)(a1 + 10808) = v464;
                          *(_QWORD *)(a1 + 10816) = v453;
                          *(_QWORD *)(a1 + 10824) = &v463[4 * v462];
                          if (v457)
                            operator delete(v457);
                          goto LABEL_499;
                        }
                      }
                      v466 = v465 - 4;
                      if (v466 < 0x2C)
                        goto LABEL_1205;
                      if ((unint64_t)(v455 - v463 - v458) < 0x20)
                        goto LABEL_1205;
                      v467 = (v466 >> 2) + 1;
                      v468 = 4 * (v467 & 0x7FFFFFFFFFFFFFF8);
                      v469 = &v455[-v468];
                      v464 = (_DWORD *)((char *)v464 - v468);
                      v470 = &v463[4 * v459 - 16];
                      v471 = v455 - 16;
                      v472 = v467 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v473 = *(_OWORD *)v471;
                        *(v470 - 1) = *((_OWORD *)v471 - 1);
                        *v470 = v473;
                        v470 -= 2;
                        v471 -= 32;
                        v472 -= 8;
                      }
                      while (v472);
                      v455 = v469;
                      if (v467 != (v467 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1205:
                        do
                        {
                          v474 = *((_DWORD *)v455 - 1);
                          v455 -= 4;
                          *--v464 = v474;
                        }
                        while (v455 != v457);
                      }
                      goto LABEL_520;
                    }
LABEL_522:
                    if (*(_BYTE *)(v964 + 976))
                    {
                      v475 = *(void **)(a1 + 10832);
                      *(_QWORD *)(a1 + 10840) = v475;
                      v476 = ((*(_QWORD *)(v964 + 592) - *(_QWORD *)(v964 + 584)) >> 4);
                      if (v476 > (uint64_t)(*(_QWORD *)(a1 + 10848) - (_QWORD)v475) >> 2)
                      {
                        v477 = (char *)operator new(4 * v476);
                        *(_QWORD *)(a1 + 10832) = v477;
                        *(_QWORD *)(a1 + 10840) = v477;
                        *(_QWORD *)(a1 + 10848) = &v477[4 * v476];
                        if (v475)
                          operator delete(v475);
                      }
                      v478 = *(int **)(v964 + 584);
                      v479 = *(int **)(v964 + 592);
                      if (v478 != v479)
                      {
                        v970 = (void **)(a1 + 10832);
                        do
                        {
                          if (*(_BYTE *)(*((_QWORD *)v478 + 1) + 20))
                          {
                            v481 = *v478;
                            v482 = *(char **)(a1 + 10840);
                            v483 = *(_QWORD *)(a1 + 10848);
                            if ((unint64_t)v482 < v483)
                            {
                              *(_DWORD *)v482 = v481;
                              v480 = v482 + 4;
                            }
                            else
                            {
                              v484 = (char *)*v970;
                              v485 = v482 - (_BYTE *)*v970;
                              v486 = v485 >> 2;
                              v487 = (v485 >> 2) + 1;
                              if (v487 >> 62)
                                goto LABEL_1190;
                              v488 = v483 - (_QWORD)v484;
                              if (v488 >> 1 > v487)
                                v487 = v488 >> 1;
                              if ((unint64_t)v488 >= 0x7FFFFFFFFFFFFFFCLL)
                                v489 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v489 = v487;
                              if (v489)
                              {
                                if (v489 >> 62)
                                  goto LABEL_1188;
                                v490 = operator new(4 * v489);
                              }
                              else
                              {
                                v490 = 0;
                              }
                              v491 = &v490[4 * v486];
                              *v491 = v481;
                              v480 = v491 + 1;
                              if (v482 != v484)
                              {
                                v492 = v482 - v484 - 4;
                                if (v492 < 0x2C)
                                  goto LABEL_1207;
                                if ((unint64_t)(v482 - v490 - v485) < 0x20)
                                  goto LABEL_1207;
                                v493 = (v492 >> 2) + 1;
                                v494 = 4 * (v493 & 0x7FFFFFFFFFFFFFF8);
                                v495 = &v482[-v494];
                                v491 = (_DWORD *)((char *)v491 - v494);
                                v496 = &v490[4 * v486 - 16];
                                v497 = v482 - 16;
                                v498 = v493 & 0x7FFFFFFFFFFFFFF8;
                                do
                                {
                                  v499 = *(_OWORD *)v497;
                                  *(v496 - 1) = *((_OWORD *)v497 - 1);
                                  *v496 = v499;
                                  v496 -= 2;
                                  v497 -= 32;
                                  v498 -= 8;
                                }
                                while (v498);
                                v482 = v495;
                                if (v493 != (v493 & 0x7FFFFFFFFFFFFFF8))
                                {
LABEL_1207:
                                  do
                                  {
                                    v500 = *((_DWORD *)v482 - 1);
                                    v482 -= 4;
                                    *--v491 = v500;
                                  }
                                  while (v482 != v484);
                                }
                              }
                              *(_QWORD *)(a1 + 10832) = v491;
                              *(_QWORD *)(a1 + 10840) = v480;
                              *(_QWORD *)(a1 + 10848) = &v490[4 * v489];
                              if (v484)
                                operator delete(v484);
                            }
                            *(_QWORD *)(a1 + 10840) = v480;
                          }
                          v478 += 4;
                        }
                        while (v478 != v479);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      sub_20F597134(*(_QWORD **)(a1 + 9624), v989);
      if (v987 == 1)
      {
        v501 = *(_QWORD *)(a1 + 9632);
        v502 = *(_QWORD *)(a1 + 9624);
        v503 = *(_OWORD *)(v502 + 36);
        *(_OWORD *)(v501 + 24) = *(_OWORD *)(v502 + 24);
        *(_OWORD *)(v501 + 36) = v503;
        v504 = *(_DWORD *)(v501 + 28);
        LODWORD(v502) = 6 * *(_DWORD *)(v501 + 24);
        *(_DWORD *)(v501 + 52) = 0;
        *(_DWORD *)(v501 + 56) = v502;
        LODWORD(v502) = 9 * v504 + v502;
        v505 = *(_DWORD *)(v501 + 36);
        v506 = *(_DWORD *)(v501 + 32) + v502;
        *(_DWORD *)(v501 + 60) = v502;
        *(_DWORD *)(v501 + 64) = v506;
        LODWORD(v502) = v506 + 6 * v505;
        v507 = *(_DWORD *)(v501 + 40);
        v508 = *(_DWORD *)(v501 + 44);
        *(_DWORD *)(v501 + 68) = v502;
        *(_DWORD *)(v501 + 72) = v502 + 4 * v507;
        LODWORD(v502) = v502 + 4 * (v508 + v507);
        *(_DWORD *)(v501 + 76) = v502;
        sub_20F20CEEC((_DWORD *)v501, 3 * *(_DWORD *)(v501 + 48) + v502, 1u);
      }
      v509 = *(unsigned int **)(a1 + 10272);
      *(_QWORD *)(a1 + 10280) = v509;
      *(_OWORD *)(a1 + 10312) = 0u;
      *(_OWORD *)(a1 + 10328) = 0u;
      *(_OWORD *)(a1 + 10296) = 0u;
      *(_QWORD *)(a1 + 10344) = 0;
      v510 = *(int **)(a1 + 10688);
      v511 = *(int **)(a1 + 10696);
      if (v510 == v511)
      {
        v512 = v509;
        v524 = *(int **)(a1 + 10712);
        v525 = *(int **)(a1 + 10720);
        if (v524 != v525)
        {
          do
          {
LABEL_577:
            while (1)
            {
              v527 = *v524;
              v528 = *(_QWORD *)(a1 + 10288);
              if ((unint64_t)v512 >= v528)
                break;
              *v512 = 1;
              v512[1] = v527;
              v526 = v512 + 3;
              v512[2] = 9;
              *(_QWORD *)(a1 + 10280) = v512 + 3;
              ++v524;
              v512 += 3;
              if (v524 == v525)
                goto LABEL_594;
            }
            v529 = *(_DWORD **)(a1 + 10272);
            v530 = 0xAAAAAAAAAAAAAAABLL * (v512 - v529) + 1;
            if (v530 > 0x1555555555555555)
LABEL_1187:
              sub_20E867F44();
            v531 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v528 - (_QWORD)v529) >> 2);
            if (2 * v531 > v530)
              v530 = 2 * v531;
            if (v531 >= 0xAAAAAAAAAAAAAAALL)
              v532 = 0x1555555555555555;
            else
              v532 = v530;
            if (v532)
            {
              if (v532 > 0x1555555555555555)
                goto LABEL_1188;
              v533 = (char *)operator new(12 * v532);
            }
            else
            {
              v533 = 0;
            }
            v534 = &v533[4 * (v512 - v529)];
            *(_DWORD *)v534 = 1;
            *((_DWORD *)v534 + 1) = v527;
            *((_DWORD *)v534 + 2) = 9;
            v535 = v534;
            if (v512 != v529)
            {
              do
              {
                v536 = *(_QWORD *)(v512 - 3);
                v512 -= 3;
                v537 = v512[2];
                *(_QWORD *)(v535 - 12) = v536;
                v535 -= 12;
                *((_DWORD *)v535 + 2) = v537;
              }
              while (v512 != v529);
              v512 = *(unsigned int **)(a1 + 10272);
            }
            *(_QWORD *)(a1 + 10272) = v535;
            v526 = (unsigned int *)(v534 + 12);
            *(_QWORD *)(a1 + 10280) = v534 + 12;
            *(_QWORD *)(a1 + 10288) = &v533[12 * v532];
            if (v512)
              operator delete(v512);
            *(_QWORD *)(a1 + 10280) = v526;
            ++v524;
            v512 = v526;
          }
          while (v524 != v525);
LABEL_594:
          v538 = *(int **)(a1 + 10736);
          v539 = *(int **)(a1 + 10744);
          if (v538 != v539)
            goto LABEL_597;
          goto LABEL_704;
        }
      }
      else
      {
        do
        {
          while (1)
          {
            v513 = *v510;
            v514 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v509 >= v514)
              break;
            *v509 = 0;
            v509[1] = v513;
            v512 = v509 + 3;
            v509[2] = 6;
            *(_QWORD *)(a1 + 10280) = v509 + 3;
            ++v510;
            v509 += 3;
            if (v510 == v511)
              goto LABEL_574;
          }
          v515 = *(_DWORD **)(a1 + 10272);
          v516 = 0xAAAAAAAAAAAAAAABLL * (v509 - v515) + 1;
          if (v516 > 0x1555555555555555)
            goto LABEL_1187;
          v517 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v514 - (_QWORD)v515) >> 2);
          if (2 * v517 > v516)
            v516 = 2 * v517;
          if (v517 >= 0xAAAAAAAAAAAAAAALL)
            v518 = 0x1555555555555555;
          else
            v518 = v516;
          if (v518)
          {
            if (v518 > 0x1555555555555555)
              goto LABEL_1188;
            v519 = (char *)operator new(12 * v518);
          }
          else
          {
            v519 = 0;
          }
          v520 = &v519[4 * (v509 - v515)];
          *(_DWORD *)v520 = 0;
          *((_DWORD *)v520 + 1) = v513;
          *((_DWORD *)v520 + 2) = 6;
          v521 = v520;
          if (v509 != v515)
          {
            do
            {
              v522 = *(_QWORD *)(v509 - 3);
              v509 -= 3;
              v523 = v509[2];
              *(_QWORD *)(v521 - 12) = v522;
              v521 -= 12;
              *((_DWORD *)v521 + 2) = v523;
            }
            while (v509 != v515);
            v509 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v521;
          v512 = (unsigned int *)(v520 + 12);
          *(_QWORD *)(a1 + 10280) = v520 + 12;
          *(_QWORD *)(a1 + 10288) = &v519[12 * v518];
          if (v509)
            operator delete(v509);
          *(_QWORD *)(a1 + 10280) = v512;
          ++v510;
          v509 = v512;
        }
        while (v510 != v511);
LABEL_574:
        v524 = *(int **)(a1 + 10712);
        v525 = *(int **)(a1 + 10720);
        if (v524 != v525)
          goto LABEL_577;
      }
      v526 = v512;
      v538 = *(int **)(a1 + 10736);
      v539 = *(int **)(a1 + 10744);
      if (v538 != v539)
      {
        do
        {
LABEL_597:
          while (1)
          {
            v541 = *v538;
            v542 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v526 >= v542)
              break;
            *v526 = 2;
            v526[1] = v541;
            v540 = v526 + 3;
            v526[2] = 1;
            *(_QWORD *)(a1 + 10280) = v526 + 3;
            ++v538;
            v526 += 3;
            if (v538 == v539)
              goto LABEL_614;
          }
          v543 = *(_DWORD **)(a1 + 10272);
          v544 = 0xAAAAAAAAAAAAAAABLL * (v526 - v543) + 1;
          if (v544 > 0x1555555555555555)
            goto LABEL_1187;
          v545 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v542 - (_QWORD)v543) >> 2);
          if (2 * v545 > v544)
            v544 = 2 * v545;
          if (v545 >= 0xAAAAAAAAAAAAAAALL)
            v546 = 0x1555555555555555;
          else
            v546 = v544;
          if (v546)
          {
            if (v546 > 0x1555555555555555)
              goto LABEL_1188;
            v547 = (char *)operator new(12 * v546);
          }
          else
          {
            v547 = 0;
          }
          v548 = &v547[4 * (v526 - v543)];
          *(_DWORD *)v548 = 2;
          *((_DWORD *)v548 + 1) = v541;
          *((_DWORD *)v548 + 2) = 1;
          v549 = v548;
          if (v526 != v543)
          {
            do
            {
              v550 = *(_QWORD *)(v526 - 3);
              v526 -= 3;
              v551 = v526[2];
              *(_QWORD *)(v549 - 12) = v550;
              v549 -= 12;
              *((_DWORD *)v549 + 2) = v551;
            }
            while (v526 != v543);
            v526 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v549;
          v540 = (unsigned int *)(v548 + 12);
          *(_QWORD *)(a1 + 10280) = v548 + 12;
          *(_QWORD *)(a1 + 10288) = &v547[12 * v546];
          if (v526)
            operator delete(v526);
          *(_QWORD *)(a1 + 10280) = v540;
          ++v538;
          v526 = v540;
        }
        while (v538 != v539);
LABEL_614:
        v552 = *(int **)(a1 + 10760);
        v553 = *(int **)(a1 + 10768);
        if (v552 != v553)
          goto LABEL_617;
        goto LABEL_705;
      }
LABEL_704:
      v540 = v526;
      v552 = *(int **)(a1 + 10760);
      v553 = *(int **)(a1 + 10768);
      if (v552 != v553)
      {
        do
        {
LABEL_617:
          while (1)
          {
            v555 = *v552;
            v556 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v540 >= v556)
              break;
            *v540 = 3;
            v540[1] = v555;
            v554 = v540 + 3;
            v540[2] = 6;
            *(_QWORD *)(a1 + 10280) = v540 + 3;
            ++v552;
            v540 += 3;
            if (v552 == v553)
              goto LABEL_634;
          }
          v557 = *(_DWORD **)(a1 + 10272);
          v558 = 0xAAAAAAAAAAAAAAABLL * (v540 - v557) + 1;
          if (v558 > 0x1555555555555555)
            goto LABEL_1187;
          v559 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v556 - (_QWORD)v557) >> 2);
          if (2 * v559 > v558)
            v558 = 2 * v559;
          if (v559 >= 0xAAAAAAAAAAAAAAALL)
            v560 = 0x1555555555555555;
          else
            v560 = v558;
          if (v560)
          {
            if (v560 > 0x1555555555555555)
              goto LABEL_1188;
            v561 = (char *)operator new(12 * v560);
          }
          else
          {
            v561 = 0;
          }
          v562 = &v561[4 * (v540 - v557)];
          *(_DWORD *)v562 = 3;
          *((_DWORD *)v562 + 1) = v555;
          *((_DWORD *)v562 + 2) = 6;
          v563 = v562;
          if (v540 != v557)
          {
            do
            {
              v564 = *(_QWORD *)(v540 - 3);
              v540 -= 3;
              v565 = v540[2];
              *(_QWORD *)(v563 - 12) = v564;
              v563 -= 12;
              *((_DWORD *)v563 + 2) = v565;
            }
            while (v540 != v557);
            v540 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v563;
          v554 = (unsigned int *)(v562 + 12);
          *(_QWORD *)(a1 + 10280) = v562 + 12;
          *(_QWORD *)(a1 + 10288) = &v561[12 * v560];
          if (v540)
            operator delete(v540);
          *(_QWORD *)(a1 + 10280) = v554;
          ++v552;
          v540 = v554;
        }
        while (v552 != v553);
LABEL_634:
        v566 = *(int **)(a1 + 10784);
        v567 = *(int **)(a1 + 10792);
        if (v566 != v567)
          goto LABEL_637;
        goto LABEL_706;
      }
LABEL_705:
      v554 = v540;
      v566 = *(int **)(a1 + 10784);
      v567 = *(int **)(a1 + 10792);
      if (v566 != v567)
      {
        do
        {
LABEL_637:
          while (1)
          {
            v569 = *v566;
            v570 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v554 >= v570)
              break;
            *v554 = 4;
            v554[1] = v569;
            v568 = v554 + 3;
            v554[2] = 4;
            *(_QWORD *)(a1 + 10280) = v554 + 3;
            ++v566;
            v554 += 3;
            if (v566 == v567)
              goto LABEL_654;
          }
          v571 = *(_DWORD **)(a1 + 10272);
          v572 = 0xAAAAAAAAAAAAAAABLL * (v554 - v571) + 1;
          if (v572 > 0x1555555555555555)
            goto LABEL_1187;
          v573 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v570 - (_QWORD)v571) >> 2);
          if (2 * v573 > v572)
            v572 = 2 * v573;
          if (v573 >= 0xAAAAAAAAAAAAAAALL)
            v574 = 0x1555555555555555;
          else
            v574 = v572;
          if (v574)
          {
            if (v574 > 0x1555555555555555)
              goto LABEL_1188;
            v575 = (char *)operator new(12 * v574);
          }
          else
          {
            v575 = 0;
          }
          v576 = &v575[4 * (v554 - v571)];
          *(_DWORD *)v576 = 4;
          *((_DWORD *)v576 + 1) = v569;
          *((_DWORD *)v576 + 2) = 4;
          v577 = v576;
          if (v554 != v571)
          {
            do
            {
              v578 = *(_QWORD *)(v554 - 3);
              v554 -= 3;
              v579 = v554[2];
              *(_QWORD *)(v577 - 12) = v578;
              v577 -= 12;
              *((_DWORD *)v577 + 2) = v579;
            }
            while (v554 != v571);
            v554 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v577;
          v568 = (unsigned int *)(v576 + 12);
          *(_QWORD *)(a1 + 10280) = v576 + 12;
          *(_QWORD *)(a1 + 10288) = &v575[12 * v574];
          if (v554)
            operator delete(v554);
          *(_QWORD *)(a1 + 10280) = v568;
          ++v566;
          v554 = v568;
        }
        while (v566 != v567);
LABEL_654:
        v580 = *(unsigned int **)(a1 + 10808);
        v581 = *(unsigned int **)(a1 + 10816);
        if (v580 != v581)
          goto LABEL_657;
        goto LABEL_707;
      }
LABEL_706:
      v568 = v554;
      v580 = *(unsigned int **)(a1 + 10808);
      v581 = *(unsigned int **)(a1 + 10816);
      if (v580 != v581)
      {
        do
        {
LABEL_657:
          while (1)
          {
            v583 = *v580;
            v584 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v568 >= v584)
              break;
            *v568 = 5;
            v568[1] = v583;
            v582 = v568 + 3;
            v568[2] = 4;
            *(_QWORD *)(a1 + 10280) = v568 + 3;
            ++v580;
            v568 += 3;
            if (v580 == v581)
              goto LABEL_674;
          }
          v585 = *(_DWORD **)(a1 + 10272);
          v586 = 0xAAAAAAAAAAAAAAABLL * (v568 - v585) + 1;
          if (v586 > 0x1555555555555555)
            goto LABEL_1187;
          v587 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v584 - (_QWORD)v585) >> 2);
          if (2 * v587 > v586)
            v586 = 2 * v587;
          if (v587 >= 0xAAAAAAAAAAAAAAALL)
            v588 = 0x1555555555555555;
          else
            v588 = v586;
          if (v588)
          {
            if (v588 > 0x1555555555555555)
              goto LABEL_1188;
            v589 = (char *)operator new(12 * v588);
          }
          else
          {
            v589 = 0;
          }
          v590 = &v589[4 * (v568 - v585)];
          *(_DWORD *)v590 = 5;
          *((_DWORD *)v590 + 1) = v583;
          *((_DWORD *)v590 + 2) = 4;
          v591 = v590;
          if (v568 != v585)
          {
            do
            {
              v592 = *(_QWORD *)(v568 - 3);
              v568 -= 3;
              v593 = v568[2];
              *(_QWORD *)(v591 - 12) = v592;
              v591 -= 12;
              *((_DWORD *)v591 + 2) = v593;
            }
            while (v568 != v585);
            v568 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v591;
          v582 = (unsigned int *)(v590 + 12);
          *(_QWORD *)(a1 + 10280) = v590 + 12;
          *(_QWORD *)(a1 + 10288) = &v589[12 * v588];
          if (v568)
            operator delete(v568);
          *(_QWORD *)(a1 + 10280) = v582;
          ++v580;
          v568 = v582;
        }
        while (v580 != v581);
LABEL_674:
        v594 = *(unsigned int **)(a1 + 10832);
        v595 = *(unsigned int **)(a1 + 10840);
        if (v594 != v595)
          goto LABEL_677;
        goto LABEL_708;
      }
LABEL_707:
      v582 = v568;
      v594 = *(unsigned int **)(a1 + 10832);
      v595 = *(unsigned int **)(a1 + 10840);
      if (v594 != v595)
      {
        do
        {
LABEL_677:
          while (1)
          {
            v597 = *v594;
            v598 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v582 >= v598)
              break;
            *v582 = 6;
            v582[1] = v597;
            v596 = v582 + 3;
            v582[2] = 3;
            *(_QWORD *)(a1 + 10280) = v582 + 3;
            ++v594;
            v582 += 3;
            if (v594 == v595)
              goto LABEL_694;
          }
          v599 = *(_DWORD **)(a1 + 10272);
          v600 = 0xAAAAAAAAAAAAAAABLL * (v582 - v599) + 1;
          if (v600 > 0x1555555555555555)
            goto LABEL_1187;
          v601 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v598 - (_QWORD)v599) >> 2);
          if (2 * v601 > v600)
            v600 = 2 * v601;
          if (v601 >= 0xAAAAAAAAAAAAAAALL)
            v602 = 0x1555555555555555;
          else
            v602 = v600;
          if (v602)
          {
            if (v602 > 0x1555555555555555)
              goto LABEL_1188;
            v603 = (char *)operator new(12 * v602);
          }
          else
          {
            v603 = 0;
          }
          v604 = &v603[4 * (v582 - v599)];
          *(_DWORD *)v604 = 6;
          *((_DWORD *)v604 + 1) = v597;
          *((_DWORD *)v604 + 2) = 3;
          v605 = v604;
          if (v582 != v599)
          {
            do
            {
              v606 = *(_QWORD *)(v582 - 3);
              v582 -= 3;
              v607 = v582[2];
              *(_QWORD *)(v605 - 12) = v606;
              v605 -= 12;
              *((_DWORD *)v605 + 2) = v607;
            }
            while (v582 != v599);
            v582 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v605;
          v596 = (unsigned int *)(v604 + 12);
          *(_QWORD *)(a1 + 10280) = v604 + 12;
          *(_QWORD *)(a1 + 10288) = &v603[12 * v602];
          if (v582)
            operator delete(v582);
          *(_QWORD *)(a1 + 10280) = v596;
          ++v594;
          v582 = v596;
        }
        while (v594 != v595);
LABEL_694:
        v608 = v971;
        if (v971 == 1)
        {
LABEL_709:
          v615 = *(_QWORD *)(a1 + 10272);
          v616 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v596 - v615) >> 2));
          if (v596 == (unsigned int *)v615)
            v617 = 0;
          else
            v617 = v616;
          sub_20F6BA794(v615, v596, v617, 1);
          v609 = a1 + 10296;
          v613 = *(unsigned int **)(a1 + 10272);
          v614 = *(unsigned int **)(a1 + 10280);
          if (v613 == v614)
            goto LABEL_715;
          goto LABEL_713;
        }
LABEL_695:
        v609 = a1 + 10296;
        if (!v608)
        {
          v610 = *(_QWORD *)(a1 + 10272);
          v611 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v596 - v610) >> 2));
          if (v596 == (unsigned int *)v610)
            v612 = 0;
          else
            v612 = v611;
          sub_20F6B90CC(v610, v596, v612, 1);
        }
        v613 = *(unsigned int **)(a1 + 10272);
        v614 = *(unsigned int **)(a1 + 10280);
        if (v613 == v614)
          goto LABEL_715;
LABEL_713:
        v618 = 0;
        do
        {
          v619 = v613[2];
          v613[2] = v618;
          v620 = *v613;
          v613 += 3;
          v618 += v619;
          ++*(_QWORD *)(v609 + 8 * v620);
        }
        while (v613 != v614);
LABEL_715:
        v621 = 0;
        v622 = a1 + 10352;
        *(_QWORD *)(a1 + 10360) = *(_QWORD *)(a1 + 10352);
        v623 = a1 + 10520;
        *(_QWORD *)(a1 + 10528) = *(_QWORD *)(a1 + 10520);
        *(_QWORD *)(a1 + 10384) = *(_QWORD *)(a1 + 10376);
        *(_QWORD *)(a1 + 10552) = *(_QWORD *)(a1 + 10544);
        *(_QWORD *)(a1 + 10408) = *(_QWORD *)(a1 + 10400);
        *(_QWORD *)(a1 + 10576) = *(_QWORD *)(a1 + 10568);
        *(_QWORD *)(a1 + 10432) = *(_QWORD *)(a1 + 10424);
        *(_QWORD *)(a1 + 10600) = *(_QWORD *)(a1 + 10592);
        *(_QWORD *)(a1 + 10456) = *(_QWORD *)(a1 + 10448);
        *(_QWORD *)(a1 + 10624) = *(_QWORD *)(a1 + 10616);
        *(_QWORD *)(a1 + 10480) = *(_QWORD *)(a1 + 10472);
        *(_QWORD *)(a1 + 10648) = *(_QWORD *)(a1 + 10640);
        *(_QWORD *)(a1 + 10504) = *(_QWORD *)(a1 + 10496);
        *(_QWORD *)(a1 + 10672) = *(_QWORD *)(a1 + 10664);
        while (1)
        {
          v624 = (int32x4_t **)(v622 + 24 * v621);
          v625 = *(_QWORD *)(v609 + 8 * v621);
          v627 = v624 + 1;
          v626 = v624[1];
          v628 = *v624;
          v629 = ((char *)v626 - (char *)*v624) >> 2;
          if (v625 <= v629)
          {
            if (v625 < v629)
            {
              v626 = (int32x4_t *)((char *)v628 + 4 * v625);
              *v627 = v626;
            }
          }
          else
          {
            sub_20E93DC84(v622 + 24 * v621, v625 - v629);
            v628 = *v624;
            v626 = *v627;
          }
          if (v628 == v626)
            goto LABEL_728;
          v630 = (char *)v626 - (char *)v628 - 4;
          if (v630 >= 0x1C)
          {
            v633 = (v630 >> 2) + 1;
            v631 = v633 & 0x7FFFFFFFFFFFFFF8;
            v632 = (int32x4_t *)((char *)v628 + 4 * (v633 & 0x7FFFFFFFFFFFFFF8));
            v634 = v628 + 1;
            v635 = v633 & 0x7FFFFFFFFFFFFFF8;
            v636 = (int32x4_t)xmmword_210365350;
            v637.i64[0] = 0x400000004;
            v637.i64[1] = 0x400000004;
            v638.i64[0] = 0x800000008;
            v638.i64[1] = 0x800000008;
            do
            {
              v634[-1] = v636;
              *v634 = vaddq_s32(v636, v637);
              v636 = vaddq_s32(v636, v638);
              v634 += 2;
              v635 -= 8;
            }
            while (v635);
            if (v633 == v631)
              goto LABEL_728;
          }
          else
          {
            LODWORD(v631) = 0;
            v632 = v628;
          }
          do
          {
            v632->i32[0] = v631;
            v632 = (int32x4_t *)((char *)v632 + 4);
            LODWORD(v631) = v631 + 1;
          }
          while (v632 != v626);
LABEL_728:
          v639 = *(_QWORD *)(v609 + 8 * v621);
          v640 = v623 + 24 * v621;
          v642 = *(_QWORD *)(v640 + 8);
          v641 = (_QWORD *)(v640 + 8);
          v643 = *(_DWORD **)(v623 + 24 * v621);
          v644 = (v642 - (uint64_t)v643) >> 2;
          if (v639 <= v644)
          {
            if (v639 < v644)
              *v641 = &v643[v639];
          }
          else
          {
            sub_20E93DC84(v623 + 24 * v621, v639 - v644);
            v643 = *(_DWORD **)(v623 + 24 * v621);
          }
          v645 = *(_DWORD **)(a1 + 10272);
          v646 = *(_DWORD **)(a1 + 10280);
          while (v645 != v646)
          {
            if (v621 == *v645)
              *v643++ = v645[2];
            v645 += 3;
          }
          if (++v621 == 7)
          {
            v647 = *(_QWORD **)(a1 + 9616);
            v999.i64[0] = 0;
            v648 = *(void **)(a1 + 10224);
            *(_QWORD *)(a1 + 10232) = v648;
            *(_QWORD *)(a1 + 10256) = *(_QWORD *)(a1 + 10248);
            v988 = v647;
            v649 = ((v647[86] - v647[85]) >> 4);
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 10240) - (_QWORD)v648) >> 3) < v649)
            {
              v650 = (char *)operator new(104 * v649);
              *(_QWORD *)(a1 + 10224) = v650;
              *(_QWORD *)(a1 + 10232) = v650;
              *(_QWORD *)(a1 + 10240) = &v650[104 * v649];
              if (v648)
                operator delete(v648);
            }
            v990 = a1 + 9808;
            v992 = 0;
            v651 = v988[85];
            v652 = v988[86];
            if (v651 == v652)
              goto LABEL_803;
            v653 = 0uLL;
            while (2)
            {
              v657 = *(_QWORD *)(v651 + 8);
              if (*(_DWORD *)v657 == -1)
              {
                if ((*(_BYTE *)(v657 + 4) & 2) == 0)
                {
                  v656 = (int64x2_t *)&v992;
                  v655 = 1;
                  goto LABEL_744;
                }
              }
              else
              {
                v658 = *(_QWORD **)(a1 + 10232);
                v659 = *(_QWORD *)(a1 + 10240);
                if ((unint64_t)v658 < v659)
                {
                  *v658 = v657;
                  v658[3] = -1;
                  v658[12] = v990;
                  *((_OWORD *)v658 + 2) = v653;
                  *((_OWORD *)v658 + 3) = v653;
                  v654 = (char *)(v658 + 13);
                  *((_OWORD *)v658 + 4) = v653;
                  *((_OWORD *)v658 + 5) = v653;
                }
                else
                {
                  v660 = *(_QWORD **)(a1 + 10224);
                  v661 = 0x4EC4EC4EC4EC4EC5 * (v658 - v660) + 1;
                  if (v661 > 0x276276276276276)
                    sub_20E867F44();
                  v662 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v659 - (_QWORD)v660) >> 3);
                  if (2 * v662 > v661)
                    v661 = 2 * v662;
                  if (v662 >= 0x13B13B13B13B13BLL)
                    v663 = 0x276276276276276;
                  else
                    v663 = v661;
                  if (v663)
                  {
                    if (v663 > 0x276276276276276)
                      goto LABEL_1188;
                    v664 = (char *)operator new(104 * v663);
                    v653 = 0uLL;
                  }
                  else
                  {
                    v664 = 0;
                  }
                  v665 = &v664[8 * (v658 - v660)];
                  *(_QWORD *)v665 = v657;
                  *((_QWORD *)v665 + 3) = -1;
                  *((_QWORD *)v665 + 12) = v990;
                  *((_OWORD *)v665 + 2) = v653;
                  *((_OWORD *)v665 + 3) = v653;
                  *((_OWORD *)v665 + 4) = v653;
                  *((_OWORD *)v665 + 5) = v653;
                  if (v658 == v660)
                  {
                    *(_QWORD *)(a1 + 10224) = v665;
                    v654 = v665 + 104;
                    *(_QWORD *)(a1 + 10232) = v665 + 104;
                    *(_QWORD *)(a1 + 10240) = &v664[104 * v663];
                    if (v658)
                      goto LABEL_764;
                  }
                  else
                  {
                    v666 = 0;
                    do
                    {
                      v667 = &v665[v666 * 8];
                      *((_QWORD *)v667 - 13) = v658[v666 - 13];
                      *((_QWORD *)v667 - 12) = v658[v666 - 12];
                      *((_QWORD *)v667 - 11) = v658[v666 - 11];
                      *((_OWORD *)v667 - 5) = *(_OWORD *)&v658[v666 - 10];
                      v668 = *(_OWORD *)&v658[v666 - 8];
                      v669 = *(_OWORD *)&v658[v666 - 6];
                      v670 = *(_OWORD *)&v658[v666 - 2];
                      *((_OWORD *)v667 - 2) = *(_OWORD *)&v658[v666 - 4];
                      *((_OWORD *)v667 - 1) = v670;
                      *((_OWORD *)v667 - 4) = v668;
                      *((_OWORD *)v667 - 3) = v669;
                      v666 -= 13;
                    }
                    while (&v658[v666] != v660);
                    v658 = *(_QWORD **)(a1 + 10224);
                    *(_QWORD *)(a1 + 10224) = &v665[v666 * 8];
                    v654 = v665 + 104;
                    *(_QWORD *)(a1 + 10232) = v665 + 104;
                    *(_QWORD *)(a1 + 10240) = &v664[104 * v663];
                    if (v658)
                    {
LABEL_764:
                      operator delete(v658);
                      v653 = 0uLL;
                    }
                  }
                }
                *(_QWORD *)(a1 + 10232) = v654;
                *((_QWORD *)v654 - 10) = v999.i64[0];
                *(_OWORD *)(v654 - 72) = v653;
                *(_OWORD *)(v654 - 56) = v653;
                *(_OWORD *)(v654 - 40) = v653;
                *(_OWORD *)(v654 - 24) = v653;
                v655 = (11 * *(_DWORD *)(v657 + 8));
                v656 = &v999;
LABEL_744:
                v656->i64[0] += v655;
              }
              v651 += 16;
              if (v651 != v652)
                continue;
              break;
            }
            v671 = v992;
            if (v992)
            {
              v672 = *(_BYTE **)(a1 + 10248);
              if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 10264) - (_QWORD)v672) >> 3) < v992)
              {
                if (v992 > 0x276276276276276)
                  sub_20E867F44();
                v673 = *(_BYTE **)(a1 + 10256);
                v674 = (char *)operator new(104 * v992);
                v675 = &v674[v673 - v672];
                v676 = v675;
                if (v673 != v672)
                {
                  v677 = 0;
                  do
                  {
                    v678 = &v675[v677];
                    *((_QWORD *)v678 - 13) = *(_QWORD *)&v673[v677 - 104];
                    *((_QWORD *)v678 - 12) = *(_QWORD *)&v673[v677 - 96];
                    *((_QWORD *)v678 - 11) = *(_QWORD *)&v673[v677 - 88];
                    *((_OWORD *)v678 - 5) = *(_OWORD *)&v673[v677 - 80];
                    v679 = *(_OWORD *)&v673[v677 - 64];
                    v680 = *(_OWORD *)&v673[v677 - 48];
                    v681 = *(_OWORD *)&v673[v677 - 16];
                    *((_OWORD *)v678 - 2) = *(_OWORD *)&v673[v677 - 32];
                    *((_OWORD *)v678 - 1) = v681;
                    *((_OWORD *)v678 - 4) = v679;
                    *((_OWORD *)v678 - 3) = v680;
                    v677 -= 104;
                  }
                  while (&v673[v677] != v672);
                  v676 = &v675[v677];
                }
                *(_QWORD *)(a1 + 10248) = v676;
                *(_QWORD *)(a1 + 10256) = v675;
                *(_QWORD *)(a1 + 10264) = &v674[104 * v671];
                if (v672)
                  operator delete(v672);
              }
              v682 = v988[85];
              v683 = v988[86];
              if (v682 != v683)
              {
                v684 = 0uLL;
                while (2)
                {
                  v686 = *(_QWORD *)(v682 + 8);
                  if (*(_DWORD *)v686 != -1 || (*(_BYTE *)(v686 + 4) & 2) != 0)
                    goto LABEL_781;
                  v687 = *(_QWORD **)(a1 + 10256);
                  v688 = *(_QWORD *)(a1 + 10264);
                  if ((unint64_t)v687 < v688)
                  {
                    *v687 = v686;
                    v687[3] = -1;
                    v687[12] = v990;
                    *((_OWORD *)v687 + 2) = v684;
                    *((_OWORD *)v687 + 3) = v684;
                    v685 = (char *)(v687 + 13);
                    *((_OWORD *)v687 + 4) = v684;
                    *((_OWORD *)v687 + 5) = v684;
                  }
                  else
                  {
                    v689 = *(_QWORD **)(a1 + 10248);
                    v690 = 0x4EC4EC4EC4EC4EC5 * (v687 - v689) + 1;
                    if (v690 > 0x276276276276276)
                      sub_20E867F44();
                    v691 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v688 - (_QWORD)v689) >> 3);
                    if (2 * v691 > v690)
                      v690 = 2 * v691;
                    if (v691 >= 0x13B13B13B13B13BLL)
                      v692 = 0x276276276276276;
                    else
                      v692 = v690;
                    if (v692)
                    {
                      if (v692 > 0x276276276276276)
                        sub_20E877A38();
                      v693 = (char *)operator new(104 * v692);
                      v684 = 0uLL;
                    }
                    else
                    {
                      v693 = 0;
                    }
                    v694 = &v693[8 * (v687 - v689)];
                    *(_QWORD *)v694 = v686;
                    *((_QWORD *)v694 + 3) = -1;
                    *((_QWORD *)v694 + 12) = v990;
                    *((_OWORD *)v694 + 2) = v684;
                    *((_OWORD *)v694 + 3) = v684;
                    *((_OWORD *)v694 + 4) = v684;
                    *((_OWORD *)v694 + 5) = v684;
                    if (v687 == v689)
                    {
                      *(_QWORD *)(a1 + 10248) = v694;
                      v685 = v694 + 104;
                      *(_QWORD *)(a1 + 10256) = v694 + 104;
                      *(_QWORD *)(a1 + 10264) = &v693[104 * v692];
                      if (v687)
                        goto LABEL_799;
                    }
                    else
                    {
                      v695 = 0;
                      do
                      {
                        v696 = &v694[v695 * 8];
                        *((_QWORD *)v696 - 13) = v687[v695 - 13];
                        *((_QWORD *)v696 - 12) = v687[v695 - 12];
                        *((_QWORD *)v696 - 11) = v687[v695 - 11];
                        *((_OWORD *)v696 - 5) = *(_OWORD *)&v687[v695 - 10];
                        v697 = *(_OWORD *)&v687[v695 - 8];
                        v698 = *(_OWORD *)&v687[v695 - 6];
                        v699 = *(_OWORD *)&v687[v695 - 2];
                        *((_OWORD *)v696 - 2) = *(_OWORD *)&v687[v695 - 4];
                        *((_OWORD *)v696 - 1) = v699;
                        *((_OWORD *)v696 - 4) = v697;
                        *((_OWORD *)v696 - 3) = v698;
                        v695 -= 13;
                      }
                      while (&v687[v695] != v689);
                      v687 = *(_QWORD **)(a1 + 10248);
                      *(_QWORD *)(a1 + 10248) = &v694[v695 * 8];
                      v685 = v694 + 104;
                      *(_QWORD *)(a1 + 10256) = v694 + 104;
                      *(_QWORD *)(a1 + 10264) = &v693[104 * v692];
                      if (v687)
                      {
LABEL_799:
                        operator delete(v687);
                        v684 = 0uLL;
                      }
                    }
                  }
                  *(_QWORD *)(a1 + 10256) = v685;
                  *((_QWORD *)v685 - 10) = v999.i64[0];
                  *(_OWORD *)(v685 - 72) = v684;
                  *(_OWORD *)(v685 - 56) = v684;
                  *(_OWORD *)(v685 - 40) = v684;
                  *(_OWORD *)(v685 - 24) = v684;
                  v999.i64[0] += (11 * *(_DWORD *)(v686 + 8));
                  *(_DWORD *)v686 = -1 - 991146299 * ((*(_QWORD *)(a1 + 10256) - *(_QWORD *)(a1 + 10248)) >> 3);
LABEL_781:
                  v682 += 16;
                  if (v682 == v683)
                    break;
                  continue;
                }
              }
            }
LABEL_803:
            *(_QWORD *)(a1 + 9816) = *(_QWORD *)(a1 + 9808);
            *(_QWORD *)(a1 + 9840) = *(_QWORD *)(a1 + 9832);
            *(_QWORD *)(a1 + 9864) = *(_QWORD *)(a1 + 9856);
            *(_QWORD *)(a1 + 9888) = *(_QWORD *)(a1 + 9880);
            *(_QWORD *)(a1 + 9912) = *(_QWORD *)(a1 + 9904);
            *(_QWORD *)(a1 + 9936) = *(_QWORD *)(a1 + 9928);
            *(_QWORD *)(a1 + 9960) = *(_QWORD *)(a1 + 9952);
            *(_QWORD *)(a1 + 9984) = *(_QWORD *)(a1 + 9976);
            *(_OWORD *)(a1 + 10000) = 0u;
            *(_OWORD *)(a1 + 10016) = 0u;
            *(_OWORD *)(a1 + 10032) = 0u;
            *(_QWORD *)(a1 + 10048) = 0;
            v700 = *(_QWORD *)(a1 + 10056);
            *(_QWORD *)(a1 + 10064) = v700;
            *(_QWORD *)(a1 + 10088) = *(_QWORD *)(a1 + 10080);
            *(_QWORD *)(a1 + 10112) = *(_QWORD *)(a1 + 10104);
            *(_QWORD *)(a1 + 10136) = *(_QWORD *)(a1 + 10128);
            *(_QWORD *)(a1 + 10160) = *(_QWORD *)(a1 + 10152);
            *(_QWORD *)(a1 + 10184) = *(_QWORD *)(a1 + 10176);
            *(_QWORD *)(a1 + 10208) = *(_QWORD *)(a1 + 10200);
            v701 = v999.i64[0];
            if (v999.i64[0])
            {
              sub_20EAC9ECC(v990, v999.u64[0]);
              v700 = *(_QWORD *)(a1 + 10056);
              v702 = (*(_QWORD *)(a1 + 10064) - v700) >> 4;
              v703 = v701 >= v702;
              if (v701 > v702)
              {
                sub_20F5BB76C((uint64_t *)(a1 + 10056), v701 - v702);
                goto LABEL_809;
              }
            }
            else
            {
              v703 = 1;
            }
            if (!v703)
              *(_QWORD *)(a1 + 10064) = v700 + 16 * v701;
LABEL_809:
            v704 = *(_QWORD *)(a1 + 10080);
            v705 = (*(_QWORD *)(a1 + 10088) - v704) >> 4;
            if (v701 <= v705)
            {
              if (v701 < v705)
                *(_QWORD *)(a1 + 10088) = v704 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10080), v701 - v705);
            }
            v706 = *(_QWORD *)(a1 + 10104);
            v707 = (*(_QWORD *)(a1 + 10112) - v706) >> 4;
            if (v701 <= v707)
            {
              if (v701 < v707)
                *(_QWORD *)(a1 + 10112) = v706 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10104), v701 - v707);
            }
            v708 = *(_QWORD *)(a1 + 10128);
            v709 = (*(_QWORD *)(a1 + 10136) - v708) >> 4;
            if (v701 <= v709)
            {
              if (v701 < v709)
                *(_QWORD *)(a1 + 10136) = v708 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10128), v701 - v709);
            }
            v710 = *(_QWORD *)(a1 + 10152);
            v711 = (*(_QWORD *)(a1 + 10160) - v710) >> 4;
            if (v701 <= v711)
            {
              if (v701 < v711)
                *(_QWORD *)(a1 + 10160) = v710 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10152), v701 - v711);
            }
            v712 = *(_QWORD *)(a1 + 10176);
            v713 = (*(_QWORD *)(a1 + 10184) - v712) >> 4;
            if (v701 <= v713)
            {
              if (v701 < v713)
                *(_QWORD *)(a1 + 10184) = v712 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10176), v701 - v713);
            }
            v714 = *(_QWORD *)(a1 + 10200);
            v715 = (*(_QWORD *)(a1 + 10208) - v714) >> 4;
            if (v701 <= v715)
            {
              if (v701 < v715)
                *(_QWORD *)(a1 + 10208) = v714 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10200), v701 - v715);
            }
            v716 = v988[109];
            v717 = v988[110];
            if (v716 != v717)
            {
              v718 = 0;
              v991 = v988[110];
              while (2)
              {
                if (!sub_20F556208((_QWORD *)(v716 + 56)))
                  goto LABEL_838;
                v720 = *(unsigned int **)(v716 + 136);
                v721 = *v720;
                if (*((_BYTE *)v720 + 20))
                {
                  v722 = *(_QWORD *)(a1 + 10224);
                  v723 = v722 + 104 * v721;
                  v725 = *(_QWORD *)(v723 + 24);
                  v724 = (unint64_t *)(v723 + 24);
                  v726 = (_QWORD *)v724[9];
                  *(_QWORD *)(*v726 + 8 * (v724[1] + v725)) = v718;
                  ++v724[1];
                  v727 = **(_DWORD **)(v716 + 56);
                  if (v727 != -1)
                  {
                    v728 = v722 + 104 * v721;
                    v731 = *(_QWORD *)(v728 + 64);
                    v730 = (_QWORD *)(v728 + 64);
                    v729 = v731;
                    v732 = v731 + *v724;
                    v733 = v726[40];
                    if (v732 <= *v724)
                    {
LABEL_846:
                      v738 = v733 + 16 * v732;
                      goto LABEL_847;
                    }
                    v734 = 16 * *v724;
                    v735 = v729 + 1;
                    v736 = 16 * v729 + 16;
                    while (1)
                    {
                      v737 = *(_DWORD *)(v733 + v734);
                      if (v737 >= v727)
                        break;
                      v734 += 16;
                      --v735;
                      v736 -= 16;
                      if (v735 == 1)
                        goto LABEL_846;
                    }
                    if (v737 > v727)
                    {
                      if (v735)
                      {
                        v843 = v722;
                        memmove((void *)(v733 + 16 * v732 - v736 + 32), (const void *)(v733 + v734), v736);
                        v722 = v843;
                        v733 = v726[40];
                      }
                      v738 = v733 + v734;
LABEL_847:
                      *(_DWORD *)v738 = v727;
                      *(_QWORD *)(v738 + 8) = -1;
                      ++v726[27];
                      ++*v730;
                    }
                  }
                  v739 = **(_DWORD **)(v716 + 64);
                  if (v739 != -1)
                  {
                    v740 = v722 + 104 * v721;
                    v743 = *(_QWORD *)(v740 + 64);
                    v742 = (_QWORD *)(v740 + 64);
                    v741 = v743;
                    v744 = v743 + *v724;
                    v745 = v726[40];
                    if (v744 <= *v724)
                    {
LABEL_853:
                      v750 = v745 + 16 * v744;
                      goto LABEL_854;
                    }
                    v746 = 16 * *v724;
                    v747 = v741 + 1;
                    v748 = 16 * v741 + 16;
                    while (1)
                    {
                      v749 = *(_DWORD *)(v745 + v746);
                      if (v749 >= v739)
                        break;
                      v746 += 16;
                      --v747;
                      v748 -= 16;
                      if (v747 == 1)
                        goto LABEL_853;
                    }
                    if (v749 > v739)
                    {
                      if (v747)
                      {
                        v844 = v722;
                        memmove((void *)(v745 + 16 * v744 - v748 + 32), (const void *)(v745 + v746), v748);
                        v722 = v844;
                        v745 = v726[40];
                      }
                      v750 = v745 + v746;
LABEL_854:
                      *(_DWORD *)v750 = v739;
                      *(_QWORD *)(v750 + 8) = -1;
                      ++v726[27];
                      ++*v742;
                    }
                  }
                  v751 = (uint64_t *)(v724 + 2);
                  v752 = **(_DWORD **)(v716 + 72);
                  if (v752 != -1)
                  {
                    v753 = *v751;
                    v754 = *v751 + *v724;
                    v755 = v726[31];
                    if (v754 <= *v724)
                    {
LABEL_860:
                      v760 = v755 + 16 * v754;
                      goto LABEL_861;
                    }
                    v756 = 16 * *v724;
                    v757 = v753 + 1;
                    v758 = 16 * v753 + 16;
                    while (1)
                    {
                      v759 = *(_DWORD *)(v755 + v756);
                      if (v759 >= v752)
                        break;
                      v756 += 16;
                      --v757;
                      v758 -= 16;
                      if (v757 == 1)
                        goto LABEL_860;
                    }
                    if (v759 > v752)
                    {
                      if (v757)
                      {
                        v845 = v722;
                        memmove((void *)(v755 + 16 * v754 - v758 + 32), (const void *)(v755 + v756), v758);
                        v722 = v845;
                        v755 = v726[31];
                      }
                      v760 = v755 + v756;
LABEL_861:
                      *(_DWORD *)v760 = v752;
                      *(_QWORD *)(v760 + 8) = -1;
                      ++v726[24];
                      ++*v751;
                    }
                  }
                  v761 = **(_DWORD **)(v716 + 80);
                  if (v761 != -1)
                  {
                    v762 = *v751;
                    v763 = *v751 + *v724;
                    v764 = v726[31];
                    if (v763 <= *v724)
                    {
LABEL_867:
                      v769 = v764 + 16 * v763;
                      goto LABEL_868;
                    }
                    v765 = 16 * *v724;
                    v766 = v762 + 1;
                    v767 = 16 * v762 + 16;
                    while (1)
                    {
                      v768 = *(_DWORD *)(v764 + v765);
                      if (v768 >= v761)
                        break;
                      v765 += 16;
                      --v766;
                      v767 -= 16;
                      if (v766 == 1)
                        goto LABEL_867;
                    }
                    if (v768 > v761)
                    {
                      if (v766)
                      {
                        v846 = v722;
                        memmove((void *)(v764 + 16 * v763 - v767 + 32), (const void *)(v764 + v765), v767);
                        v722 = v846;
                        v764 = v726[31];
                      }
                      v769 = v764 + v765;
LABEL_868:
                      *(_DWORD *)v769 = v761;
                      *(_QWORD *)(v769 + 8) = -1;
                      ++v726[24];
                      ++*v751;
                    }
                  }
                  v770 = **(_DWORD **)(v716 + 88);
                  if (v770 != -1)
                  {
                    v771 = v722 + 104 * v721;
                    v774 = *(_QWORD *)(v771 + 72);
                    v773 = (_QWORD *)(v771 + 72);
                    v772 = v774;
                    v775 = v774 + *v724;
                    v776 = v726[43];
                    if (v775 <= *v724)
                    {
LABEL_874:
                      v781 = v776 + 16 * v775;
                      goto LABEL_875;
                    }
                    v777 = 16 * *v724;
                    v778 = v772 + 1;
                    v779 = 16 * v772 + 16;
                    while (1)
                    {
                      v780 = *(_DWORD *)(v776 + v777);
                      if (v780 >= v770)
                        break;
                      v777 += 16;
                      --v778;
                      v779 -= 16;
                      if (v778 == 1)
                        goto LABEL_874;
                    }
                    if (v780 > v770)
                    {
                      if (v778)
                      {
                        v847 = v722;
                        memmove((void *)(v776 + 16 * v775 - v779 + 32), (const void *)(v776 + v777), v779);
                        v722 = v847;
                        v776 = v726[43];
                      }
                      v781 = v776 + v777;
LABEL_875:
                      *(_DWORD *)v781 = v770;
                      *(_QWORD *)(v781 + 8) = -1;
                      ++v726[28];
                      ++*v773;
                    }
                  }
                  v782 = **(_DWORD **)(v716 + 96);
                  if (v782 != -1)
                  {
                    v783 = v722 + 104 * v721;
                    v786 = *(_QWORD *)(v783 + 72);
                    v785 = (_QWORD *)(v783 + 72);
                    v784 = v786;
                    v787 = v786 + *v724;
                    v788 = v726[43];
                    if (v787 <= *v724)
                    {
LABEL_881:
                      v793 = v788 + 16 * v787;
                      goto LABEL_882;
                    }
                    v789 = 16 * *v724;
                    v790 = v784 + 1;
                    v791 = 16 * v784 + 16;
                    while (1)
                    {
                      v792 = *(_DWORD *)(v788 + v789);
                      if (v792 >= v782)
                        break;
                      v789 += 16;
                      --v790;
                      v791 -= 16;
                      if (v790 == 1)
                        goto LABEL_881;
                    }
                    if (v792 > v782)
                    {
                      if (v790)
                      {
                        v848 = v722;
                        memmove((void *)(v788 + 16 * v787 - v791 + 32), (const void *)(v788 + v789), v791);
                        v722 = v848;
                        v788 = v726[43];
                      }
                      v793 = v788 + v789;
LABEL_882:
                      *(_DWORD *)v793 = v782;
                      *(_QWORD *)(v793 + 8) = -1;
                      ++v726[28];
                      ++*v785;
                    }
                  }
                  v794 = **(_DWORD **)(v716 + 104);
                  if (v794 != -1)
                  {
                    v795 = v722 + 104 * v721;
                    v798 = *(_QWORD *)(v795 + 80);
                    v797 = (_QWORD *)(v795 + 80);
                    v796 = v798;
                    v799 = v798 + *v724;
                    v800 = v726[46];
                    if (v799 <= *v724)
                    {
LABEL_888:
                      v805 = v800 + 16 * v799;
                      goto LABEL_889;
                    }
                    v801 = 16 * *v724;
                    v802 = v796 + 1;
                    v803 = 16 * v796 + 16;
                    while (1)
                    {
                      v804 = *(_DWORD *)(v800 + v801);
                      if (v804 >= v794)
                        break;
                      v801 += 16;
                      --v802;
                      v803 -= 16;
                      if (v802 == 1)
                        goto LABEL_888;
                    }
                    if (v804 > v794)
                    {
                      if (v802)
                      {
                        v849 = v722;
                        memmove((void *)(v800 + 16 * v799 - v803 + 32), (const void *)(v800 + v801), v803);
                        v722 = v849;
                        v800 = v726[46];
                      }
                      v805 = v800 + v801;
LABEL_889:
                      *(_DWORD *)v805 = v794;
                      *(_QWORD *)(v805 + 8) = -1;
                      ++v726[29];
                      ++*v797;
                    }
                  }
                  v806 = **(_DWORD **)(v716 + 112);
                  if (v806 != -1)
                  {
                    v807 = v722 + 104 * v721;
                    v810 = *(_QWORD *)(v807 + 80);
                    v809 = (_QWORD *)(v807 + 80);
                    v808 = v810;
                    v811 = v810 + *v724;
                    v812 = v726[46];
                    if (v811 <= *v724)
                    {
LABEL_895:
                      v817 = v812 + 16 * v811;
                      goto LABEL_896;
                    }
                    v813 = 16 * *v724;
                    v814 = v808 + 1;
                    v815 = 16 * v808 + 16;
                    while (1)
                    {
                      v816 = *(_DWORD *)(v812 + v813);
                      if (v816 >= v806)
                        break;
                      v813 += 16;
                      --v814;
                      v815 -= 16;
                      if (v814 == 1)
                        goto LABEL_895;
                    }
                    if (v816 > v806)
                    {
                      if (v814)
                      {
                        v850 = v722;
                        memmove((void *)(v812 + 16 * v811 - v815 + 32), (const void *)(v812 + v813), v815);
                        v722 = v850;
                        v812 = v726[46];
                      }
                      v817 = v812 + v813;
LABEL_896:
                      *(_DWORD *)v817 = v806;
                      *(_QWORD *)(v817 + 8) = -1;
                      ++v726[29];
                      ++*v809;
                    }
                  }
                  v818 = **(_DWORD **)(v716 + 120);
                  if (v818 != -1)
                  {
                    v819 = v722 + 104 * v721;
                    v822 = *(_QWORD *)(v819 + 88);
                    v821 = (_QWORD *)(v819 + 88);
                    v820 = v822;
                    v823 = v822 + *v724;
                    v824 = v726[49];
                    if (v823 <= *v724)
                    {
LABEL_902:
                      v829 = v824 + 16 * v823;
                      goto LABEL_903;
                    }
                    v825 = 16 * *v724;
                    v826 = v820 + 1;
                    v827 = 16 * v820 + 16;
                    while (1)
                    {
                      v828 = *(_DWORD *)(v824 + v825);
                      if (v828 >= v818)
                        break;
                      v825 += 16;
                      --v826;
                      v827 -= 16;
                      if (v826 == 1)
                        goto LABEL_902;
                    }
                    if (v828 > v818)
                    {
                      if (v826)
                      {
                        v851 = v722;
                        memmove((void *)(v824 + 16 * v823 - v827 + 32), (const void *)(v824 + v825), v827);
                        v722 = v851;
                        v824 = v726[49];
                      }
                      v829 = v824 + v825;
LABEL_903:
                      *(_DWORD *)v829 = v818;
                      *(_QWORD *)(v829 + 8) = -1;
                      ++v726[30];
                      ++*v821;
                    }
                  }
                  v830 = **(_DWORD **)(v716 + 128);
                  v717 = v991;
                  if (v830 == -1)
                    goto LABEL_838;
                  v831 = v722 + 104 * v721;
                  v834 = *(_QWORD *)(v831 + 88);
                  v833 = v831 + 88;
                  v832 = v834;
                  v835 = v834 + *v724;
                  v836 = v726[49];
                  if (v835 <= *v724)
                  {
LABEL_835:
                    v719 = v836 + 16 * v835;
                  }
                  else
                  {
                    v837 = 16 * *v724;
                    v838 = v832 + 1;
                    v839 = 16 * v832 + 16;
                    while (1)
                    {
                      v840 = *(_DWORD *)(v836 + v837);
                      if (v840 >= v830)
                        break;
                      v837 += 16;
                      --v838;
                      v839 -= 16;
                      if (v838 == 1)
                        goto LABEL_835;
                    }
                    if (v840 <= v830)
                      goto LABEL_838;
                    if (v838)
                    {
                      memmove((void *)(v836 + 16 * v835 - v839 + 32), (const void *)(v836 + v837), v839);
                      v836 = v726[49];
                    }
                    v719 = v836 + v837;
                  }
                  *(_DWORD *)v719 = v830;
                  *(_QWORD *)(v719 + 8) = -1;
                  ++v726[30];
                }
                else
                {
                  if ((v720[1] & 2) != 0)
                    goto LABEL_838;
                  v841 = *(_QWORD *)(a1 + 10248) + 104 * v721;
                  v842 = *(_QWORD *)(v841 + 32);
                  v833 = v841 + 32;
                  *(_QWORD *)(**(_QWORD **)(v833 + 64) + 8 * (v842 + *(_QWORD *)(v833 - 8))) = v718;
                }
                ++*(_QWORD *)v833;
LABEL_838:
                v716 += 216;
                ++v718;
                if (v716 == v717)
                  break;
                continue;
              }
            }
            v852 = 6 * *(_QWORD *)(a1 + 10000);
            v853 = *(_QWORD *)(a1 + 9832);
            v854 = (*(_QWORD *)(a1 + 9840) - v853) >> 3;
            if (v852 <= v854)
            {
              v12 = v977;
              v16 = v978;
              v15 = v985;
              v14 = v986;
              v13 = v975;
              v10 = v976;
              v8 = v973;
              v11 = v974;
              v6 = v972;
              if (v852 < v854)
                *(_QWORD *)(a1 + 9840) = v853 + 48 * *(_QWORD *)(a1 + 10000);
            }
            else
            {
              sub_20E93D8FC(a1 + 9832, v852 - v854);
              v12 = v977;
              v16 = v978;
              v15 = v985;
              v14 = v986;
              v13 = v975;
              v10 = v976;
              v8 = v973;
              v11 = v974;
              v6 = v972;
            }
            v855 = *(_QWORD *)(a1 + 10056);
            v856 = *(_QWORD *)(a1 + 10064);
            if (v855 != v856)
            {
              v857 = 0;
              do
              {
                if (*(_DWORD *)v855 != -1)
                {
                  *(_QWORD *)(v855 + 8) = v857;
                  v857 += 6;
                }
                v855 += 16;
              }
              while (v855 != v856);
            }
            v858 = 9 * *(_QWORD *)(a1 + 10008);
            v859 = *(_QWORD *)(a1 + 9856);
            v860 = (*(_QWORD *)(a1 + 9864) - v859) >> 3;
            if (v858 <= v860)
            {
              if (v858 < v860)
                *(_QWORD *)(a1 + 9864) = v859 + 72 * *(_QWORD *)(a1 + 10008);
            }
            else
            {
              sub_20E93D8FC(a1 + 9856, v858 - v860);
            }
            v861 = *(_QWORD *)(a1 + 10080);
            v862 = *(_QWORD *)(a1 + 10088);
            if (v861 != v862)
            {
              v863 = 0;
              do
              {
                if (*(_DWORD *)v861 != -1)
                {
                  *(_QWORD *)(v861 + 8) = v863;
                  v863 += 9;
                }
                v861 += 16;
              }
              while (v861 != v862);
            }
            v864 = *(_QWORD *)(a1 + 10016);
            v865 = *(_QWORD *)(a1 + 9880);
            v866 = (*(_QWORD *)(a1 + 9888) - v865) >> 3;
            if (v864 <= v866)
            {
              if (v864 < v866)
                *(_QWORD *)(a1 + 9888) = v865 + 8 * v864;
            }
            else
            {
              sub_20E93D8FC(a1 + 9880, v864 - v866);
            }
            v867 = *(_QWORD *)(a1 + 10104);
            v868 = *(_QWORD *)(a1 + 10112);
            if (v867 != v868)
            {
              v869 = 0;
              do
              {
                if (*(_DWORD *)v867 != -1)
                  *(_QWORD *)(v867 + 8) = v869++;
                v867 += 16;
              }
              while (v867 != v868);
            }
            v870 = 6 * *(_QWORD *)(a1 + 10024);
            v871 = *(_QWORD *)(a1 + 9904);
            v872 = (*(_QWORD *)(a1 + 9912) - v871) >> 3;
            if (v870 <= v872)
            {
              if (v870 < v872)
                *(_QWORD *)(a1 + 9912) = v871 + 48 * *(_QWORD *)(a1 + 10024);
            }
            else
            {
              sub_20E93D8FC(a1 + 9904, v870 - v872);
            }
            v873 = *(_QWORD *)(a1 + 10128);
            v874 = *(_QWORD *)(a1 + 10136);
            if (v873 != v874)
            {
              v875 = 0;
              do
              {
                if (*(_DWORD *)v873 != -1)
                {
                  *(_QWORD *)(v873 + 8) = v875;
                  v875 += 6;
                }
                v873 += 16;
              }
              while (v873 != v874);
            }
            v876 = 4 * *(_QWORD *)(a1 + 10032);
            v877 = *(_QWORD *)(a1 + 9928);
            v878 = (*(_QWORD *)(a1 + 9936) - v877) >> 3;
            if (v876 <= v878)
            {
              if (v876 < v878)
                *(_QWORD *)(a1 + 9936) = v877 + 32 * *(_QWORD *)(a1 + 10032);
            }
            else
            {
              sub_20E93D8FC(a1 + 9928, v876 - v878);
            }
            v879 = *(_QWORD *)(a1 + 10152);
            v880 = *(_QWORD *)(a1 + 10160);
            if (v879 != v880)
            {
              v881 = 0;
              do
              {
                if (*(_DWORD *)v879 != -1)
                {
                  *(_QWORD *)(v879 + 8) = v881;
                  v881 += 4;
                }
                v879 += 16;
              }
              while (v879 != v880);
            }
            v882 = 4 * *(_QWORD *)(a1 + 10040);
            v883 = *(_QWORD *)(a1 + 9952);
            v884 = (*(_QWORD *)(a1 + 9960) - v883) >> 3;
            if (v882 <= v884)
            {
              if (v882 < v884)
                *(_QWORD *)(a1 + 9960) = v883 + 32 * *(_QWORD *)(a1 + 10040);
            }
            else
            {
              sub_20E93D8FC(a1 + 9952, v882 - v884);
            }
            v885 = *(_QWORD *)(a1 + 10176);
            v886 = *(_QWORD *)(a1 + 10184);
            if (v885 != v886)
            {
              v887 = 0;
              do
              {
                if (*(_DWORD *)v885 != -1)
                {
                  *(_QWORD *)(v885 + 8) = v887;
                  v887 += 4;
                }
                v885 += 16;
              }
              while (v885 != v886);
            }
            v888 = 3 * *(_QWORD *)(a1 + 10048);
            v889 = *(_QWORD *)(a1 + 9976);
            v890 = (*(_QWORD *)(a1 + 9984) - v889) >> 3;
            if (v888 <= v890)
            {
              if (v888 < v890)
                *(_QWORD *)(a1 + 9984) = v889 + 24 * *(_QWORD *)(a1 + 10048);
            }
            else
            {
              sub_20E93D8FC(a1 + 9976, v888 - v890);
            }
            v891 = *(_QWORD *)(a1 + 10200);
            v892 = *(_QWORD *)(a1 + 10208);
            if (v891 != v892)
            {
              v893 = 0;
              do
              {
                if (*(_DWORD *)v891 != -1)
                {
                  *(_QWORD *)(v891 + 8) = v893;
                  v893 += 3;
                }
                v891 += 16;
              }
              while (v891 != v892);
            }
            if (v992)
            {
              v894 = v988[85];
              for (i = v988[86]; v894 != i; v894 += 16)
              {
                v896 = *(_QWORD *)(v894 + 8);
                if (!*(_BYTE *)(v896 + 20))
                  *(_DWORD *)v896 = -1;
              }
            }
            kdebug_trace();
            v7 = v983;
            v9 = v984;
            v4 = v981;
            v2 = v982;
            v5 = v979;
            v3 = v980;
LABEL_1022:
            if (((unint64_t)(v4 - v5) >> 2)
               + ((unint64_t)(v2 - v3) >> 2)
               + ((unint64_t)(v6 - v7) >> 2)
               + ((unint64_t)(v8 - v9) >> 2)
               + ((unint64_t)(v10 - v11) >> 2)
               + ((unint64_t)(v12 - v13) >> 2)
               + ((unint64_t)(v14 - v15) >> 2))
            {
              return 0;
            }
            if (*(_BYTE *)(a1 + 1096))
            {
              v898 = *(_QWORD *)(a1 + 128);
              v899 = *(_QWORD *)(a1 + 136);
              if (v898 == v899)
              {
                v900 = 0;
              }
              else
              {
                v900 = 0;
                do
                {
                  v901 = *(_QWORD *)(v898 + 8);
                  if ((*(_BYTE *)(v901 + 4) & 6) == 0 && *(_BYTE *)(v901 + 20))
                    v900 += 6;
                  v898 += 16;
                }
                while (v898 != v899);
              }
              for (j = *(_QWORD *)(a1 + 224); j != *(_QWORD *)(a1 + 232); j += 16)
              {
                v906 = *(_QWORD *)(j + 8);
                if ((*(_BYTE *)(v906 + 4) & 6) == 0 && *(_BYTE *)(v906 + 20))
                  v900 += 9;
              }
              for (k = *(_QWORD *)(a1 + 320); k != *(_QWORD *)(a1 + 328); k += 16)
              {
                v908 = *(_QWORD *)(k + 8);
                if ((*(_BYTE *)(v908 + 4) & 6) == 0)
                  v900 += *(unsigned __int8 *)(v908 + 20);
              }
              for (m = *(_QWORD *)(a1 + 416); m != *(_QWORD *)(a1 + 424); m += 16)
              {
                v910 = *(_QWORD *)(m + 8);
                if ((*(_BYTE *)(v910 + 4) & 6) == 0 && *(_BYTE *)(v910 + 20))
                  v900 += 6;
              }
              for (n = *(_QWORD *)(a1 + 512); n != *(_QWORD *)(a1 + 520); n += 16)
              {
                v912 = *(_QWORD *)(n + 8);
                if ((*(_BYTE *)(v912 + 4) & 6) == 0 && *(_BYTE *)(v912 + 20))
                  v900 += 4;
              }
              for (ii = *(_QWORD *)(a1 + 608); ii != *(_QWORD *)(a1 + 616); ii += 16)
              {
                v914 = *(_QWORD *)(ii + 8);
                if ((*(_BYTE *)(v914 + 4) & 6) == 0 && *(_BYTE *)(v914 + 20))
                  v900 += 4;
              }
              for (jj = *(_QWORD *)(a1 + 704); jj != *(_QWORD *)(a1 + 712); jj += 16)
              {
                v916 = *(_QWORD *)(jj + 8);
                if ((*(_BYTE *)(v916 + 4) & 6) == 0 && *(_BYTE *)(v916 + 20))
                  v900 += 3;
              }
              for (kk = *(_QWORD *)(a1 + 800); kk != *(_QWORD *)(a1 + 808); kk += 16)
              {
                v918 = *(_QWORD *)(kk + 8);
                if ((*(_BYTE *)(v918 + 4) & 6) == 0)
                  v900 += *(unsigned __int8 *)(v918 + 20);
              }
              goto LABEL_1081;
            }
            v999 = 0u;
            v1000 = 0u;
            if (sub_20F5B8114(v16, v999.i32, &v992, 0))
            {
              *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 1680);
              *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a1 + 1704);
              *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 1728);
              *(_QWORD *)(a1 + 1760) = *(_QWORD *)(a1 + 1752);
              *(_QWORD *)(a1 + 1784) = *(_QWORD *)(a1 + 1776);
              *(_QWORD *)(a1 + 1808) = *(_QWORD *)(a1 + 1800);
              *(_QWORD *)(a1 + 1832) = *(_QWORD *)(a1 + 1824);
              *(_QWORD *)(a1 + 1856) = *(_QWORD *)(a1 + 1848);
              v902 = *(_QWORD *)(a1 + 896);
              v903 = *(_QWORD *)(a1 + 904);
              while (v902 != v903)
              {
                v904 = *(_QWORD *)(v902 + 208);
                if (*(_BYTE *)(v902 + 496)
                  || (*(_BYTE *)(v904 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v902 + 216) + 4) & 6) != 0)
                {
                  sub_20F394A20(a1 + 1680, v904);
                  sub_20F3D35E0((_QWORD *)(a1 + 1680), *(_QWORD *)(v902 + 216));
                }
                v902 += 504;
              }
              v923 = *(_QWORD *)(a1 + 920);
              v924 = *(_QWORD *)(a1 + 928);
              while (v923 != v924)
              {
                v925 = *(_QWORD *)(v923 + 136);
                if (*(_BYTE *)(v923 + 272) || (*(_BYTE *)(v925 + 4) & 6) != 0)
                  sub_20F394A20(a1 + 1680, v925);
                v923 += 280;
              }
              sub_20F5B8680(*(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (_QWORD *)(a1 + 1680));
              sub_20F5B85BC(*(_QWORD *)(a1 + 968), *(_QWORD *)(a1 + 976), (_QWORD *)(a1 + 1680));
              sub_20F5B8444(*(_QWORD *)(a1 + 992), *(_QWORD *)(a1 + 1000), (_QWORD *)(a1 + 1680));
              v926 = *(_QWORD *)(a1 + 1016);
              v927 = *(_QWORD *)(a1 + 1024);
              while (v926 != v927)
              {
                v928 = *(_QWORD *)(v926 + 736);
                if (*(_BYTE *)(v926 + 880)
                  || (*(_BYTE *)(v928 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v926 + 744) + 4) & 6) != 0)
                {
                  sub_20F394A20(a1 + 1680, v928);
                  sub_20F394A20(a1 + 1680, *(_QWORD *)(v926 + 744));
                }
                v926 += 888;
              }
              v929 = (*(_QWORD *)(a1 + 1688) - *(_QWORD *)(a1 + 1680)) >> 2;
              if (v999.i32[0] > v929)
                LODWORD(v929) = v999.i32[0];
              v703 = v992 >= v929;
              v930 = v992 - v929;
              if (!v703)
                v930 = 0;
              v931 = (*(_QWORD *)(a1 + 1712) - *(_QWORD *)(a1 + 1704)) >> 2;
              if (v999.i32[1] > v931)
                LODWORD(v931) = v999.i32[1];
              v703 = HIDWORD(v992) >= v931;
              v932 = HIDWORD(v992) - v931;
              if (!v703)
                v932 = 0;
              v933 = (*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 2;
              if (v999.i32[2] > v933)
                LODWORD(v933) = v999.i32[2];
              v703 = v993 >= v933;
              v934 = v993 - v933;
              if (!v703)
                v934 = 0;
              v935 = (*(_QWORD *)(a1 + 1760) - *(_QWORD *)(a1 + 1752)) >> 2;
              if (v999.i32[3] > v935)
                LODWORD(v935) = v999.i32[3];
              v703 = v994 >= v935;
              v936 = v994 - v935;
              if (!v703)
                v936 = 0;
              v937 = (*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 2;
              if (v1000.i32[0] > v937)
                LODWORD(v937) = v1000.i32[0];
              v703 = v995 >= v937;
              v938 = v995 - v937;
              if (!v703)
                v938 = 0;
              v939 = (*(_QWORD *)(a1 + 1808) - *(_QWORD *)(a1 + 1800)) >> 2;
              if (v1000.i32[1] > v939)
                LODWORD(v939) = v1000.i32[1];
              v703 = v996 >= v939;
              v940 = v996 - v939;
              if (!v703)
                v940 = 0;
              v941 = (*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2;
              if (v1000.i32[2] > v941)
                LODWORD(v941) = v1000.i32[2];
              v703 = v997 >= v941;
              v942 = v997 - v941;
              if (!v703)
                v942 = 0;
              v943 = (*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2;
              if (v1000.i32[3] > v943)
                LODWORD(v943) = v1000.i32[3];
              v703 = v998 >= v943;
              v944 = v998 - v943;
              if (!v703)
                v944 = 0;
              v900 = v934 + 9 * v932 + 6 * (v936 + v930) + 4 * (v940 + v938) + 3 * v942 + v944;
              sub_20F59A618(v16);
              if (!v900)
                return 1;
            }
            else
            {
              v900 = v993 + 9 * HIDWORD(v992) + 6 * (v994 + v992) + 3 * v997 + v998 + 4 * (v996 + v995);
LABEL_1081:
              if (!v900)
                return 1;
            }
            if (*(_BYTE *)(a1 + 1096) || !sub_20F5BB998(v16))
            {
              v922 = *(_QWORD *)(a1 + 1088);
            }
            else
            {
              v919 = *(_QWORD *)(a1 + 896);
              v920 = *(_QWORD *)(a1 + 904);
              if (v919 == v920)
              {
                v921 = 0;
              }
              else
              {
                v921 = 0;
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v919 + 208) + 4) & 6) == 0
                    && (*(_BYTE *)(*(_QWORD *)(v919 + 216) + 4) & 6) == 0)
                  {
                    ++v921;
                  }
                  v919 += 504;
                }
                while (v919 != v920);
              }
              v999.i64[0] = 15 * v921;
              v945 = *(_QWORD *)(a1 + 920);
              v946 = *(_QWORD *)(a1 + 928);
              if (v945 == v946)
              {
                v950 = 0;
              }
              else
              {
                v947 = v946 - v945 - 280;
                if (v947 < 0x118)
                {
                  v948 = 0;
                  v949 = *(_QWORD *)(a1 + 920);
                  goto LABEL_1153;
                }
                v951 = 0;
                v952 = 0;
                v953 = v947 / 0x118 + 1;
                v949 = v945 + 280 * (v953 & 0x1FFFFFFFFFFFFFELL);
                v954 = v953 & 0x1FFFFFFFFFFFFFELL;
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v945 + 136) + 4) & 6) == 0)
                    ++v951;
                  if ((*(_BYTE *)(*(_QWORD *)(v945 + 416) + 4) & 6) == 0)
                    ++v952;
                  v945 += 560;
                  v954 -= 2;
                }
                while (v954);
                v948 = v952 + v951;
                if (v953 != (v953 & 0x1FFFFFFFFFFFFFELL))
                {
                  do
                  {
LABEL_1153:
                    if ((*(_BYTE *)(*(_QWORD *)(v949 + 136) + 4) & 6) == 0)
                      ++v948;
                    v949 += 280;
                  }
                  while (v949 != v946);
                }
                v950 = 6 * v948;
              }
              v999.i64[1] = v950;
              v955 = *(_QWORD **)(a1 + 944);
              v956 = *(_QWORD **)(a1 + 952);
              if (v955 == v956)
              {
                v957 = 0;
              }
              else
              {
                v957 = 0;
                do
                {
                  if ((*(_BYTE *)(v955[962] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[963] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[964] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[965] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[966] + 4) & 6) == 0)
                  {
                    ++v957;
                  }
                  v955 += 1002;
                }
                while (v955 != v956);
              }
              v1000.i64[0] = 15 * v957;
              v958 = *(_QWORD **)(a1 + 968);
              v959 = *(_QWORD **)(a1 + 976);
              if (v958 == v959)
              {
                v960 = 0;
              }
              else
              {
                v960 = 0;
                do
                {
                  if ((*(_BYTE *)(v958[628] + 4) & 6) == 0
                    && (*(_BYTE *)(v958[629] + 4) & 6) == 0
                    && (*(_BYTE *)(v958[630] + 4) & 6) == 0
                    && (*(_BYTE *)(v958[631] + 4) & 6) == 0)
                  {
                    ++v960;
                  }
                  v958 += 667;
                }
                while (v958 != v959);
              }
              v1000.i64[1] = 15 * v960;
              sub_20F5BBAFC(*(_QWORD **)(a1 + 992), *(_QWORD **)(a1 + 1000), (uint64_t)&v999);
              v961 = *(_QWORD *)(a1 + 1016);
              v962 = *(_QWORD *)(a1 + 1024);
              if (v961 == v962)
              {
                v963 = 0;
              }
              else
              {
                v963 = 0;
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v961 + 736) + 4) & 6) == 0
                    && (*(_BYTE *)(*(_QWORD *)(v961 + 744) + 4) & 6) == 0)
                  {
                    ++v963;
                  }
                  v961 += 888;
                }
                while (v961 != v962);
              }
              v922 = vaddvq_s64(vaddq_s64(v999, v1000)) + 6 * v963 + 2 * v1001;
            }
            return v922 < v900;
          }
        }
      }
LABEL_708:
      v596 = v582;
      v608 = v971;
      if (v971 == 1)
        goto LABEL_709;
      goto LABEL_695;
    }
    v18 = (int64x2_t *)(a1 + 1080);
    v19 = *(_QWORD *)(a1 + 896);
    v20 = *(_QWORD **)(a1 + 904);
    if ((_QWORD *)v19 == v20)
      goto LABEL_31;
    v21 = *(_QWORD *)(a1 + 904);
    while (!*(_BYTE *)(v19 + 496))
    {
      v19 += 504;
      if ((_QWORD *)v19 == v20)
        goto LABEL_32;
    }
    --*(_DWORD *)(*(_QWORD *)(v19 + 208) + 8);
    --*(_DWORD *)(*(_QWORD *)(v19 + 216) + 8);
    *(_QWORD *)(v19 + 208) = 0;
    *(_QWORD *)(v19 + 216) = 0;
    v22 = (int64x2_t)xmmword_2103B4950;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
    if ((_QWORD *)v19 == v20)
      goto LABEL_32;
    v23 = (_QWORD *)(v19 + 504);
    if ((_QWORD *)(v19 + 504) == v20)
    {
LABEL_31:
      v21 = v19;
    }
    else
    {
      v21 = v19;
      do
      {
        while (1)
        {
          v24 = v23;
          v25 = (__int128 *)(v19 + 696);
          if (!*(_BYTE *)(v19 + 1000))
            break;
          --*(_DWORD *)(*(_QWORD *)(v19 + 712) + 8);
          --*(_DWORD *)(*(_QWORD *)(v19 + 720) + 8);
          *(_QWORD *)(v19 + 712) = 0;
          *(_QWORD *)(v19 + 720) = 0;
          *v18 = vaddq_s64(*v18, v22);
          v23 += 63;
          v19 = (uint64_t)v24;
          if (v24 + 63 == v20)
            goto LABEL_32;
        }
        *(_QWORD *)v21 = *v23;
        *(_OWORD *)(v21 + 8) = *(_OWORD *)(v19 + 512);
        v26 = *(_OWORD *)(v19 + 608);
        v27 = *(_OWORD *)(v19 + 624);
        v28 = *(_OWORD *)(v19 + 592);
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(v19 + 576);
        *(_OWORD *)(v21 + 120) = v27;
        *(_OWORD *)(v21 + 104) = v26;
        *(_OWORD *)(v21 + 88) = v28;
        v30 = *(_OWORD *)(v19 + 656);
        v29 = *(_OWORD *)(v19 + 672);
        v31 = *(_QWORD *)(v19 + 688);
        *(_OWORD *)(v21 + 136) = *(_OWORD *)(v19 + 640);
        *(_QWORD *)(v21 + 184) = v31;
        *(_OWORD *)(v21 + 168) = v29;
        *(_OWORD *)(v21 + 152) = v30;
        v32 = *(_OWORD *)(v19 + 528);
        v33 = *(_OWORD *)(v19 + 544);
        *(_OWORD *)(v21 + 56) = *(_OWORD *)(v19 + 560);
        *(_OWORD *)(v21 + 40) = v33;
        *(_OWORD *)(v21 + 24) = v32;
        v34 = *v25;
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v19 + 704) = 0;
        v35 = *(std::__shared_weak_count **)(v21 + 200);
        *(_OWORD *)(v21 + 192) = v34;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            v22 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_QWORD *)(v21 + 208) = *(_QWORD *)(v19 + 712);
        *(_QWORD *)(v21 + 216) = *(_QWORD *)(v19 + 720);
        v38 = *(_OWORD *)(v19 + 728);
        v39 = *(_OWORD *)(v19 + 744);
        v40 = *(_OWORD *)(v19 + 776);
        *(_OWORD *)(v21 + 256) = *(_OWORD *)(v19 + 760);
        *(_OWORD *)(v21 + 272) = v40;
        *(_OWORD *)(v21 + 224) = v38;
        *(_OWORD *)(v21 + 240) = v39;
        v41 = *(_OWORD *)(v19 + 792);
        v42 = *(_OWORD *)(v19 + 808);
        v43 = *(_OWORD *)(v19 + 824);
        *(_QWORD *)(v21 + 336) = *(_QWORD *)(v19 + 840);
        *(_OWORD *)(v21 + 304) = v42;
        *(_OWORD *)(v21 + 320) = v43;
        *(_OWORD *)(v21 + 288) = v41;
        v45 = *(_OWORD *)(v19 + 928);
        v44 = *(_OWORD *)(v19 + 944);
        v46 = *(_OWORD *)(v19 + 912);
        *(_QWORD *)(v21 + 456) = *(_QWORD *)(v19 + 960);
        *(_OWORD *)(v21 + 424) = v45;
        *(_OWORD *)(v21 + 440) = v44;
        *(_OWORD *)(v21 + 408) = v46;
        v47 = *(_OWORD *)(v19 + 848);
        v48 = *(_OWORD *)(v19 + 864);
        v49 = *(_OWORD *)(v19 + 896);
        *(_OWORD *)(v21 + 376) = *(_OWORD *)(v19 + 880);
        *(_OWORD *)(v21 + 392) = v49;
        *(_OWORD *)(v21 + 344) = v47;
        *(_OWORD *)(v21 + 360) = v48;
        v50 = *(_QWORD *)(v19 + 968);
        *(_BYTE *)(v21 + 472) = *(_BYTE *)(v19 + 976);
        *(_QWORD *)(v21 + 464) = v50;
        v51 = *(_OWORD *)(v19 + 984);
        *(_QWORD *)(v19 + 984) = 0;
        *(_QWORD *)(v19 + 992) = 0;
        v52 = *(std::__shared_weak_count **)(v21 + 488);
        *(_OWORD *)(v21 + 480) = v51;
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
            v22 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_BYTE *)(v21 + 496) = *(_BYTE *)(v19 + 1000);
        v21 += 504;
        v23 = v24 + 63;
        v19 = (uint64_t)v24;
      }
      while (v24 + 63 != v20);
    }
LABEL_32:
    v55 = *(_QWORD *)(a1 + 904);
    if (v21 != v55)
    {
      v56 = sub_20F5B64A0(v55, *(_QWORD *)(a1 + 904), v21);
      for (mm = *(_QWORD *)(a1 + 904); mm != v56; mm -= 504)
      {
        v58 = *(std::__shared_weak_count **)(mm - 16);
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)(mm - 304);
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      *(_QWORD *)(a1 + 904) = v56;
    }
    v64 = *(_QWORD **)(a1 + 920);
    v65 = *(_QWORD **)(a1 + 928);
    if (v64 == v65)
    {
      v66 = *(_QWORD *)(a1 + 920);
    }
    else
    {
      v66 = *(_QWORD *)(a1 + 928);
      v67 = v64 + 35;
      while (!*((_BYTE *)v67 - 8))
      {
        v68 = v67 == v65;
        v67 += 35;
        if (v68)
          goto LABEL_72;
      }
      --*(_DWORD *)(*(v67 - 18) + 8);
      *(v67 - 18) = 0;
      v69 = (int64x2_t)xmmword_2103B2310;
      *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B2310);
      v70 = v67 - 35;
      if (v67 - 35 != v65)
      {
        if (v67 == v65)
        {
          v66 = (uint64_t)(v67 - 35);
        }
        else
        {
          v66 = (uint64_t)(v67 - 35);
          do
          {
            while (1)
            {
              v71 = v67;
              if (!*((_BYTE *)v70 + 552))
                break;
              --*(_DWORD *)(v70[52] + 8);
              v70[52] = 0;
              *v18 = vaddq_s64(*v18, v69);
              v67 += 35;
              v70 = v71;
              if (v71 + 35 == v65)
                goto LABEL_72;
            }
            *(_QWORD *)v66 = *v67;
            *(_OWORD *)(v66 + 8) = *((_OWORD *)v70 + 18);
            v73 = *((_OWORD *)v70 + 21);
            v72 = *((_OWORD *)v70 + 22);
            v74 = v70[46];
            *(_OWORD *)(v66 + 40) = *((_OWORD *)v70 + 20);
            *(_QWORD *)(v66 + 88) = v74;
            *(_OWORD *)(v66 + 72) = v72;
            *(_OWORD *)(v66 + 56) = v73;
            *(_OWORD *)(v66 + 24) = *((_OWORD *)v70 + 19);
            v75 = *(_OWORD *)(v70 + 47);
            *(_QWORD *)(v66 + 112) = v70[49];
            *(_OWORD *)(v66 + 96) = v75;
            v76 = *((_OWORD *)v70 + 25);
            v70[50] = 0;
            v70[51] = 0;
            v77 = *(std::__shared_weak_count **)(v66 + 128);
            *(_OWORD *)(v66 + 120) = v76;
            if (v77)
            {
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
                v69 = (int64x2_t)xmmword_2103B2310;
              }
            }
            *(_QWORD *)(v66 + 136) = v70[52];
            v80 = *(_OWORD *)(v70 + 53);
            v81 = *(_OWORD *)(v70 + 57);
            *(_OWORD *)(v66 + 160) = *(_OWORD *)(v70 + 55);
            *(_OWORD *)(v66 + 176) = v81;
            *(_OWORD *)(v66 + 144) = v80;
            v82 = *(_OWORD *)(v70 + 59);
            v83 = *(_OWORD *)(v70 + 63);
            *(_OWORD *)(v66 + 208) = *(_OWORD *)(v70 + 61);
            *(_OWORD *)(v66 + 224) = v83;
            *(_OWORD *)(v66 + 192) = v82;
            v84 = v70[65];
            *(_BYTE *)(v66 + 248) = *((_BYTE *)v70 + 528);
            *(_QWORD *)(v66 + 240) = v84;
            v85 = *(_OWORD *)(v70 + 67);
            v70[68] = 0;
            v70[67] = 0;
            v86 = *(std::__shared_weak_count **)(v66 + 264);
            *(_OWORD *)(v66 + 256) = v85;
            if (v86)
            {
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
                v69 = (int64x2_t)xmmword_2103B2310;
              }
            }
            *(_BYTE *)(v66 + 272) = *((_BYTE *)v70 + 552);
            v66 += 280;
            v67 = v71 + 35;
            v70 = v71;
          }
          while (v71 + 35 != v65);
        }
      }
    }
LABEL_72:
    v89 = *(_QWORD *)(a1 + 928);
    if (v66 != v89)
    {
      v90 = sub_20F5B6660(v89, *(_QWORD *)(a1 + 928), v66);
      for (nn = *(_QWORD *)(a1 + 928); nn != v90; nn -= 280)
      {
        v92 = *(std::__shared_weak_count **)(nn - 16);
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v95 = *(std::__shared_weak_count **)(nn - 152);
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
      *(_QWORD *)(a1 + 928) = v90;
    }
    v98 = *(_QWORD *)(a1 + 944);
    v99 = *(_QWORD *)(a1 + 952);
    if (v98 == v99)
      goto LABEL_99;
    v100 = *(_QWORD *)(a1 + 952);
    while (!*(_BYTE *)(v98 + 8008))
    {
      v98 += 8016;
      if (v98 == v99)
        goto LABEL_100;
    }
    --*(_DWORD *)(*(_QWORD *)(v98 + 7696) + 8);
    --*(_DWORD *)(*(_QWORD *)(v98 + 7704) + 8);
    *(_OWORD *)(v98 + 7696) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v98 + 7712) + 8);
    --*(_DWORD *)(*(_QWORD *)(v98 + 7720) + 8);
    *(_OWORD *)(v98 + 7712) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v98 + 7728) + 8);
    *(_QWORD *)(v98 + 7728) = 0;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
    if (v98 == v99)
      goto LABEL_100;
    if (v98 + 8016 == v99)
    {
LABEL_99:
      v100 = v98;
    }
    else
    {
      v100 = v98;
      do
      {
        while (!*(_BYTE *)(v98 + 16024))
        {
          *(_QWORD *)v100 = *(_QWORD *)(v98 + 8016);
          sub_20F5B67C0(v100 + 8, v98 + 8024);
          *(_BYTE *)(v100 + 8008) = *(_BYTE *)(v98 + 16024);
          v100 += 8016;
          v101 = v98 + 16032;
          v98 += 8016;
          if (v101 == v99)
            goto LABEL_100;
        }
        --*(_DWORD *)(*(_QWORD *)(v98 + 15712) + 8);
        --*(_DWORD *)(*(_QWORD *)(v98 + 15720) + 8);
        *(_OWORD *)(v98 + 15712) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v98 + 15728) + 8);
        --*(_DWORD *)(*(_QWORD *)(v98 + 15736) + 8);
        *(_OWORD *)(v98 + 15728) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v98 + 15744) + 8);
        *(_QWORD *)(v98 + 15744) = 0;
        *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
        v102 = v98 + 16032;
        v98 += 8016;
      }
      while (v102 != v99);
    }
LABEL_100:
    v103 = *(_QWORD *)(a1 + 952);
    if (v103 != v100)
    {
      do
      {
        v104 = *(std::__shared_weak_count **)(v103 - 16);
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v103 -= 8016;
      }
      while (v103 != v100);
      *(_QWORD *)(a1 + 952) = v100;
    }
    v107 = *(_QWORD *)(a1 + 968);
    v108 = *(_QWORD *)(a1 + 976);
    if (v107 == v108)
      goto LABEL_121;
    v109 = *(_QWORD *)(a1 + 976);
    while (!*(_BYTE *)(v107 + 5328))
    {
      v107 += 5336;
      if (v107 == v108)
        goto LABEL_122;
    }
    --*(_DWORD *)(*(_QWORD *)(v107 + 5024) + 8);
    --*(_DWORD *)(*(_QWORD *)(v107 + 5032) + 8);
    *(_OWORD *)(v107 + 5024) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v107 + 5040) + 8);
    --*(_DWORD *)(*(_QWORD *)(v107 + 5048) + 8);
    *(_OWORD *)(v107 + 5040) = 0u;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
    if (v107 == v108)
      goto LABEL_122;
    v110 = v107 + 5336;
    if (v107 + 5336 == v108)
    {
LABEL_121:
      v109 = v107;
    }
    else
    {
      v111 = (_BYTE *)(v107 + 10664);
      v109 = v107;
      do
      {
        while (!*v111)
        {
          sub_20F5B6B10(v109, v110);
          v109 += 5336;
          v110 += 5336;
          v111 += 5336;
          if (v110 == v108)
            goto LABEL_122;
        }
        --*(_DWORD *)(*((_QWORD *)v111 - 38) + 8);
        --*(_DWORD *)(*(_QWORD *)(v110 + 5032) + 8);
        *((_OWORD *)v111 - 19) = 0u;
        --*(_DWORD *)(*((_QWORD *)v111 - 36) + 8);
        --*(_DWORD *)(*((_QWORD *)v111 - 35) + 8);
        *((_OWORD *)v111 - 18) = 0u;
        *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
        v110 += 5336;
        v111 += 5336;
      }
      while (v110 != v108);
    }
LABEL_122:
    v112 = *(_QWORD *)(a1 + 976);
    if (v112 != v109)
    {
      do
      {
        v113 = *(std::__shared_weak_count **)(v112 - 16);
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v112 -= 5336;
      }
      while (v112 != v109);
      *(_QWORD *)(a1 + 976) = v109;
    }
    v116 = *(_QWORD *)(a1 + 992);
    v117 = *(_QWORD **)(a1 + 1000);
    if ((_QWORD *)v116 == v117)
      goto LABEL_148;
    v118 = *(_QWORD *)(a1 + 1000);
    while (!*(_BYTE *)(v116 + 208))
    {
      v116 += 216;
      if ((_QWORD *)v116 == v117)
        goto LABEL_149;
    }
    --*(_DWORD *)(*(_QWORD *)(v116 + 56) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 64) + 8);
    *(_OWORD *)(v116 + 56) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 72) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 80) + 8);
    *(_OWORD *)(v116 + 72) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 88) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 96) + 8);
    *(_OWORD *)(v116 + 88) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 104) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 112) + 8);
    *(_OWORD *)(v116 + 104) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 120) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 128) + 8);
    *(_OWORD *)(v116 + 120) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 136) + 8);
    *(_QWORD *)(v116 + 136) = 0;
    v119 = (int64x2_t)xmmword_210378050;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_210378050);
    if ((_QWORD *)v116 == v117)
      goto LABEL_149;
    v120 = (_QWORD *)(v116 + 216);
    if ((_QWORD *)(v116 + 216) == v117)
    {
LABEL_148:
      v118 = v116;
    }
    else
    {
      v121 = 0uLL;
      v118 = v116;
      do
      {
        while (1)
        {
          v122 = v120;
          if (!*(_BYTE *)(v116 + 424))
            break;
          --*(_DWORD *)(*(_QWORD *)(v116 + 272) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 280) + 8);
          *(_OWORD *)(v116 + 272) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 288) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 296) + 8);
          *(_OWORD *)(v116 + 288) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 304) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 312) + 8);
          *(_OWORD *)(v116 + 304) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 320) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 328) + 8);
          *(_OWORD *)(v116 + 320) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 336) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 344) + 8);
          *(_OWORD *)(v116 + 336) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 352) + 8);
          *(_QWORD *)(v116 + 352) = 0;
          *v18 = vaddq_s64(*v18, v119);
          v120 += 27;
          v116 = (uint64_t)v122;
          if (v122 + 27 == v117)
            goto LABEL_149;
        }
        *(_QWORD *)v118 = *v120;
        *(_QWORD *)(v118 + 8) = *(_QWORD *)(v116 + 224);
        *(_OWORD *)(v118 + 16) = *(_OWORD *)(v116 + 232);
        v123 = *(_OWORD *)(v116 + 248);
        *(_QWORD *)(v118 + 48) = *(_QWORD *)(v116 + 264);
        *(_OWORD *)(v118 + 32) = v123;
        *(_QWORD *)(v118 + 56) = *(_QWORD *)(v116 + 272);
        *(_QWORD *)(v118 + 64) = *(_QWORD *)(v116 + 280);
        *(_QWORD *)(v118 + 72) = *(_QWORD *)(v116 + 288);
        *(_QWORD *)(v118 + 80) = *(_QWORD *)(v116 + 296);
        *(_QWORD *)(v118 + 88) = *(_QWORD *)(v116 + 304);
        *(_QWORD *)(v118 + 96) = *(_QWORD *)(v116 + 312);
        *(_QWORD *)(v118 + 104) = *(_QWORD *)(v116 + 320);
        *(_QWORD *)(v118 + 112) = *(_QWORD *)(v116 + 328);
        *(_QWORD *)(v118 + 120) = *(_QWORD *)(v116 + 336);
        *(_QWORD *)(v118 + 128) = *(_QWORD *)(v116 + 344);
        *(_QWORD *)(v118 + 136) = *(_QWORD *)(v116 + 352);
        *(_OWORD *)(v118 + 144) = *(_OWORD *)(v116 + 360);
        *(_OWORD *)(v118 + 160) = *(_OWORD *)(v116 + 376);
        v124 = *(_QWORD *)(v116 + 392);
        *(_BYTE *)(v118 + 184) = *(_BYTE *)(v116 + 400);
        *(_QWORD *)(v118 + 176) = v124;
        v125 = *(_OWORD *)(v116 + 408);
        *(_QWORD *)(v116 + 416) = 0;
        *(_QWORD *)(v116 + 408) = 0;
        v126 = *(std::__shared_weak_count **)(v118 + 200);
        *(_OWORD *)(v118 + 192) = v125;
        if (v126)
        {
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
            v121 = 0uLL;
            v119 = (int64x2_t)xmmword_210378050;
          }
        }
        *(_BYTE *)(v118 + 208) = *(_BYTE *)(v116 + 424);
        v118 += 216;
        v120 = v122 + 27;
        v116 = (uint64_t)v122;
      }
      while (v122 + 27 != v117);
    }
LABEL_149:
    v129 = *(_QWORD *)(a1 + 1000);
    if (v129 != v118)
    {
      v130 = sub_20F5B6E44(v129, *(_QWORD *)(a1 + 1000), v118);
      for (i1 = *(_QWORD *)(a1 + 1000); i1 != v130; i1 -= 216)
      {
        v132 = *(std::__shared_weak_count **)(i1 - 16);
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
      }
      *(_QWORD *)(a1 + 1000) = v130;
    }
    v135 = *(_QWORD **)(a1 + 1016);
    v136 = *(_QWORD **)(a1 + 1024);
    if (v135 == v136)
    {
      v137 = *(_QWORD **)(a1 + 1016);
    }
    else
    {
      v137 = *(_QWORD **)(a1 + 1024);
      v138 = v135 + 111;
      while (!*((_BYTE *)v138 - 8))
      {
        v68 = v138 == v136;
        v138 += 111;
        if (v68)
          goto LABEL_179;
      }
      --*(_DWORD *)(*(v138 - 19) + 8);
      --*(_DWORD *)(*(v138 - 18) + 8);
      *(v138 - 19) = 0;
      *(v138 - 18) = 0;
      *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B2310);
      v139 = v138 - 111;
      if (v138 - 111 != v136)
      {
        if (v138 == v136)
        {
          v137 = v138 - 111;
        }
        else
        {
          v137 = v138 - 111;
          do
          {
            while (1)
            {
              v140 = v138;
              if (!*((_BYTE *)v139 + 1768))
                break;
              --*(_DWORD *)(v139[203] + 8);
              --*(_DWORD *)(v139[204] + 8);
              v139[203] = 0;
              v139[204] = 0;
              *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B2310);
              v138 += 111;
              v139 = v140;
              if (v140 + 111 == v136)
                goto LABEL_179;
            }
            *v137 = *v138;
            *(_OWORD *)(v137 + 1) = *((_OWORD *)v139 + 56);
            memcpy(v137 + 3, v139 + 114, 0x120uLL);
            memcpy(v137 + 39, v139 + 150, 0x120uLL);
            v141 = *((_OWORD *)v139 + 99);
            v142 = *((_OWORD *)v139 + 100);
            v143 = *((_OWORD *)v139 + 98);
            *(_OWORD *)(v137 + 83) = *((_OWORD *)v139 + 97);
            *(_OWORD *)(v137 + 85) = v143;
            v144 = *((_OWORD *)v139 + 93);
            v145 = *((_OWORD *)v139 + 94);
            v146 = *((_OWORD *)v139 + 96);
            *(_OWORD *)(v137 + 79) = *((_OWORD *)v139 + 95);
            *(_OWORD *)(v137 + 81) = v146;
            *(_OWORD *)(v137 + 75) = v144;
            *(_OWORD *)(v137 + 77) = v145;
            *(_OWORD *)(v137 + 87) = v141;
            *(_OWORD *)(v137 + 89) = v142;
            *((_BYTE *)v137 + 728) = *((_BYTE *)v139 + 1616);
            v137[92] = v139[203];
            v137[93] = v139[204];
            v148 = *(_OWORD *)(v139 + 207);
            v147 = *(_OWORD *)(v139 + 209);
            *((_OWORD *)v137 + 47) = *(_OWORD *)(v139 + 205);
            *((_OWORD *)v137 + 48) = v148;
            *((_OWORD *)v137 + 49) = v147;
            v149 = *(_OWORD *)(v139 + 211);
            v150 = *(_OWORD *)(v139 + 215);
            *((_OWORD *)v137 + 51) = *(_OWORD *)(v139 + 213);
            *((_OWORD *)v137 + 52) = v150;
            *((_OWORD *)v137 + 50) = v149;
            v151 = v139[217];
            *((_BYTE *)v137 + 856) = *((_BYTE *)v139 + 1744);
            v137[106] = v151;
            v152 = *(_OWORD *)(v139 + 219);
            v139[219] = 0;
            v139[220] = 0;
            v153 = (std::__shared_weak_count *)v137[109];
            *((_OWORD *)v137 + 54) = v152;
            if (v153)
            {
              v154 = (unint64_t *)&v153->__shared_owners_;
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            *((_BYTE *)v137 + 880) = *((_BYTE *)v139 + 1768);
            v137 += 111;
            v138 = v140 + 111;
            v139 = v140;
          }
          while (v140 + 111 != v136);
        }
      }
    }
LABEL_179:
    v156 = *(_QWORD **)(a1 + 1024);
    if (v137 != v156)
    {
      while (v156 != v137)
      {
        v157 = (std::__shared_weak_count *)*(v156 - 2);
        if (v157)
        {
          v158 = (unint64_t *)&v157->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        v156 -= 111;
      }
      *(_QWORD *)(a1 + 1024) = v137;
    }
    goto LABEL_189;
  }
  kdebug_trace();
  return 1;
}

void sub_20F6B1404(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EDB3070(v1 - 177);
  _Unwind_Resume(a1);
}

uint64_t sub_20F6B1530(uint64_t a1, unsigned int a2)
{
  uint64_t v5;
  char **v6;
  char **v7;
  char *v8;
  char *v9;
  char **v10;
  uint64_t v11;
  uint64_t i;
  unsigned int v13;
  char **v14;
  char *v15;
  char *v16;
  char **v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned int v22;
  int64_t v23;
  uint64_t j;
  unsigned int v25;
  char **v26;
  char *v27;
  char *v28;
  char **v29;
  char **v30;
  char *v31;
  char *v32;
  char **v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  _BOOL4 v47;
  size_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  size_t v54;
  char **v55;
  uint64_t k;
  uint64_t v57;
  char *v58;
  char *v59;
  char **v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  unsigned int v65;
  int64_t v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char *v70;
  char **v71;
  char **v72;
  char *v73;
  char *v74;
  char **v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  _BOOL4 v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  size_t v95;
  unint64_t v96;
  _QWORD *v97;
  size_t v98;
  _QWORD *v99;
  int64x2_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  char **v113;
  char *v114;
  char *v115;
  unint64_t v116;
  char **v117;
  char *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int64_t v129;
  unsigned int v130;
  char *v131;
  char *v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD **v137;
  uint64_t v138;
  _DWORD *v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  unint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD *v159;
  unint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  _DWORD **v167;
  uint64_t v168;
  _DWORD *v169;
  _DWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD *v174;
  unint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD *v189;
  unint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  _DWORD **v197;
  uint64_t v198;
  _DWORD *v199;
  _DWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _DWORD *v203;
  _DWORD *v204;
  unint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  _DWORD **v212;
  uint64_t v213;
  _DWORD *v214;
  _DWORD *v215;
  uint64_t v216;
  uint64_t v217;
  _DWORD *v218;
  _DWORD *v219;
  unint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  _DWORD **v227;
  uint64_t v228;
  _DWORD *v229;
  _DWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  __n128 v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  __n128 v239;
  void **v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unsigned int v245;
  unsigned int v246;
  size_t v247;
  unsigned int v248;
  uint64_t v249;
  void *v250;
  size_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  int v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  int v274;
  unint64_t v275;
  int v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  int v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  _DWORD *v526;
  unsigned int **v527;
  uint64_t v528;
  int v529;
  unsigned int *v530;
  _QWORD *v531;
  char *v532;
  uint64_t v533;
  char **v534;
  size_t v535;
  unint64_t v536;
  unsigned int **v537;
  _QWORD *v538;
  unsigned int *v539;
  unsigned int *v540;
  uint64_t v541;
  _BYTE *v542;
  char *v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  char **v547;
  uint64_t v548;
  char *v549;
  char *v550;
  char *v551;
  unint64_t v552;
  char **v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  char *v557;
  __int128 *v558;
  uint64_t v559;
  __int128 v560;
  int v561;
  char *v562;
  char *v563;
  uint64_t *v564;
  uint64_t *v565;
  unsigned int v566;
  uint64_t v567;
  char *v568;
  uint64_t v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  _BYTE *v576;
  unsigned int *v577;
  int64_t v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  _OWORD *v584;
  char *v585;
  uint64_t v586;
  __int128 v587;
  unsigned int v588;
  char *v589;
  char *v590;
  uint64_t v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  char *v595;
  uint64_t v596;
  char *v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  char *v602;
  char *v603;
  char *v604;
  uint64_t v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  char *v609;
  char *v610;
  uint64_t v611;
  __int128 v612;
  _DWORD *v613;
  uint64_t v614;
  _DWORD *v615;
  int v616;
  int v617;
  uint64_t v618;
  char *v619;
  char *v620;
  unint64_t v621;
  unint64_t v622;
  char *v623;
  char *v624;
  char *v625;
  char *v626;
  uint64_t v627;
  char *v628;
  char *v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  char *v633;
  char *v634;
  char *v635;
  uint64_t v636;
  __int128 v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  char *v641;
  uint64_t v642;
  char *v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  char *v648;
  char *v649;
  char *v650;
  uint64_t v651;
  unint64_t v652;
  unint64_t v653;
  uint64_t v654;
  char *v655;
  char *v656;
  uint64_t v657;
  __int128 v658;
  uint64_t v659;
  int v660;
  _DWORD *v661;
  int v662;
  uint64_t v663;
  unsigned int *v664;
  unsigned int *v665;
  unint64_t v666;
  unint64_t v667;
  char *v668;
  char *v669;
  char *v670;
  char *v671;
  uint64_t v672;
  char *v673;
  char *v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  char *v678;
  char *v679;
  char *v680;
  uint64_t v681;
  __int128 v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  char *v686;
  uint64_t v687;
  char *v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  unint64_t v692;
  char *v693;
  char *v694;
  char *v695;
  uint64_t v696;
  unint64_t v697;
  unint64_t v698;
  uint64_t v699;
  char *v700;
  char *v701;
  uint64_t v702;
  __int128 v703;
  uint64_t v704;
  int v705;
  _DWORD *v706;
  int v707;
  uint64_t v708;
  char *v709;
  char *v710;
  unint64_t v711;
  unint64_t v712;
  char *v713;
  char *v714;
  char *v715;
  char *v716;
  uint64_t v717;
  char *v718;
  char *v719;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  char *v723;
  char *v724;
  char *v725;
  uint64_t v726;
  __int128 v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  char *v731;
  uint64_t v732;
  char *v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  unint64_t v737;
  char *v738;
  char *v739;
  char *v740;
  uint64_t v741;
  unint64_t v742;
  unint64_t v743;
  uint64_t v744;
  char *v745;
  char *v746;
  uint64_t v747;
  __int128 v748;
  uint64_t v749;
  int v750;
  _DWORD *v751;
  int v752;
  uint64_t v753;
  char *v754;
  char *v755;
  unint64_t v756;
  unint64_t v757;
  char *v758;
  char *v759;
  char *v760;
  char *v761;
  uint64_t v762;
  char *v763;
  char *v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  char *v768;
  char *v769;
  char *v770;
  uint64_t v771;
  __int128 v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  char *v776;
  uint64_t v777;
  char *v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  unint64_t v782;
  char *v783;
  char *v784;
  char *v785;
  uint64_t v786;
  unint64_t v787;
  unint64_t v788;
  uint64_t v789;
  char *v790;
  char *v791;
  uint64_t v792;
  __int128 v793;
  uint64_t v794;
  int v795;
  _DWORD *v796;
  int v797;
  uint64_t v798;
  char *v799;
  char *v800;
  unint64_t v801;
  unint64_t v802;
  char *v803;
  char *v804;
  char *v805;
  char *v806;
  uint64_t v807;
  char *v808;
  char *v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  char *v813;
  char *v814;
  char *v815;
  uint64_t v816;
  __int128 v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char *v821;
  uint64_t v822;
  char *v823;
  uint64_t v824;
  unint64_t v825;
  uint64_t v826;
  unint64_t v827;
  char *v828;
  char *v829;
  char *v830;
  uint64_t v831;
  unint64_t v832;
  unint64_t v833;
  uint64_t v834;
  char *v835;
  char *v836;
  uint64_t v837;
  __int128 v838;
  uint64_t v839;
  int v840;
  _DWORD *v841;
  int v842;
  uint64_t v843;
  char *v844;
  char *v845;
  unint64_t v846;
  unint64_t v847;
  char *v848;
  char *v849;
  char *v850;
  char *v851;
  uint64_t v852;
  char *v853;
  char *v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  char *v858;
  char *v859;
  char *v860;
  uint64_t v861;
  __int128 v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  char *v866;
  uint64_t v867;
  char *v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  char *v873;
  char *v874;
  char *v875;
  uint64_t v876;
  unint64_t v877;
  unint64_t v878;
  uint64_t v879;
  char *v880;
  char *v881;
  uint64_t v882;
  __int128 v883;
  uint64_t v884;
  int v885;
  _DWORD *v886;
  int v887;
  uint64_t v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  unint64_t v895;
  int v896;
  int v897;
  int v898;
  int v899;
  void *v900;
  void *v901;
  void **v902;
  size_t v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  uint64_t v918;
  _QWORD *v919;
  char **v920;
  int v921[2];
  int v922[2];
  int v923[2];
  int v924[2];
  int v925;
  int v926[2];
  char **v927;
  char **v928;
  uint64_t v929;
  int v930;
  int v931[2];
  int v932[2];
  unsigned int v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  char **v937;
  unsigned __int8 *v938;
  int v939;
  unint64_t v940;
  unsigned int **v941;
  uint64_t v942;
  _DWORD *v943;
  char *v944;
  int v945;
  void *v946[2];
  void *v947[2];
  __int128 v948;
  void *v949[2];
  void *v950[2];
  __int128 v951;
  void *v952[2];
  void *v953[2];
  __int128 v954;
  void *__p[2];
  uint64_t v956;
  void *__dst;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  char *v968;

  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 976))
    return 1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = (char **)sub_20F6B6124(v5);
  sub_20F596D48((char **)(a1 + 7768), v6);
  v7 = v6 + 24;
  v8 = *(char **)(a1 + 7768);
  v9 = *(char **)(a1 + 7776);
  if (v8 == v9
    && *(_QWORD *)(a1 + 7792) == *(_QWORD *)(a1 + 7800)
    && *(_QWORD *)(a1 + 7816) == *(_QWORD *)(a1 + 7824)
    && *(_QWORD *)(a1 + 7840) == *(_QWORD *)(a1 + 7848)
    && *(_QWORD *)(a1 + 7864) == *(_QWORD *)(a1 + 7872)
    && *(_QWORD *)(a1 + 7888) == *(_QWORD *)(a1 + 7896)
    && *(_QWORD *)(a1 + 7912) == *(_QWORD *)(a1 + 7920))
  {
    v10 = (char **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 7528);
    v11 = a1 + 7936;
    if ((char **)(a1 + 7936) != v10)
      sub_20F59AA18((char **)(a1 + 7936), v10);
    for (i = 0; i != 7; ++i)
    {
      v13 = dword_2103B6750[i];
      if ((v13 & 0x80000000) == 0)
      {
        v14 = (char **)(v11 + 24 * i);
        v15 = *v14;
        v18 = v14[1];
        v17 = v14 + 1;
        v16 = v18;
        if (v15 != v18)
        {
          v19 = v7[3 * v13 + 1];
          v20 = v7[3 * v13];
          v21 = v15;
          while (v20 != v19)
          {
            v22 = *(_DWORD *)v21;
            if (*(_DWORD *)v21 >= *(_DWORD *)v20)
            {
              v21 += 4 * (*(_DWORD *)v20 >= v22);
              v20 += 4;
              if (v21 == v16)
                goto LABEL_21;
            }
            else
            {
              *(_DWORD *)v15 = v22;
              v15 += 4;
              v21 += 4;
              if (v21 == v16)
              {
LABEL_21:
                if (v15 == v16)
                  goto LABEL_13;
LABEL_25:
                *v17 = v15;
                goto LABEL_13;
              }
            }
          }
          if (v21 != v15)
          {
            v23 = v16 - v21;
            memmove(v15, v21, v16 - v21);
            v15 += v23;
            if (v15 != *v17)
              goto LABEL_25;
          }
        }
      }
LABEL_13:
      ;
    }
    v110 = 0;
    v956 = 0;
    v943 = (_DWORD *)(a1 + 32);
    v111 = a1 + 7560;
    v954 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v952 = 0u;
    *(_OWORD *)v953 = 0u;
    *(_OWORD *)v950 = 0u;
    v951 = 0u;
    v948 = 0u;
    *(_OWORD *)v949 = 0u;
    *(_OWORD *)v946 = 0u;
    *(_OWORD *)v947 = 0u;
    while (1)
    {
      v112 = &v946[3 * v110];
      v113 = (char **)(v111 + 24 * v110);
      v114 = v113[1];
      v115 = *v113;
      v116 = (v114 - *v113) >> 2;
      v117 = (char **)(v112 + 1);
      v118 = (char *)*v112;
      v119 = ((_BYTE *)v112[1] - (_BYTE *)*v112) >> 2;
      v120 = v116 >= v119;
      v121 = v116 - v119;
      if (v121 != 0 && v120)
      {
        sub_20E93DC84((uint64_t)&v946[3 * v110], v121);
        v115 = *v113;
        v114 = v113[1];
        v118 = (char *)*v112;
        v122 = (uint64_t *)(v11 + 24 * v110);
        v124 = *v122;
        v123 = v122[1];
        *(_QWORD *)&v958 = v124;
        __dst = v118;
        if (v115 != v114)
          goto LABEL_132;
      }
      else if (v120)
      {
        v127 = (uint64_t *)(v11 + 24 * v110);
        v128 = *v127;
        v123 = v127[1];
        *(_QWORD *)&v958 = v128;
        __dst = v118;
        if (v115 != v114)
        {
LABEL_132:
          while ((_QWORD)v958 != v123)
          {
            v130 = *(_DWORD *)v115;
            if (*(_DWORD *)v115 >= *(_DWORD *)v958)
            {
              v115 += 4 * (*(_DWORD *)v958 >= v130);
              *(_QWORD *)&v958 = v958 + 4;
              if (v115 == v114)
                goto LABEL_135;
            }
            else
            {
              v131 = (char *)__dst;
              *(_DWORD *)__dst = v130;
              v115 += 4;
              __dst = v131 + 4;
              if (v115 == v114)
              {
LABEL_135:
                v129 = 0;
                v118 = (char *)__dst;
                goto LABEL_138;
              }
            }
          }
          v118 = (char *)__dst;
          v129 = v114 - v115;
          if (v115 != v114)
            memmove(__dst, v115, v114 - v115);
          goto LABEL_138;
        }
      }
      else
      {
        *v117 = &v118[4 * v116];
        v125 = (uint64_t *)(v11 + 24 * v110);
        v126 = *v125;
        v123 = v125[1];
        *(_QWORD *)&v958 = v126;
        __dst = v118;
        if (v115 != v114)
          goto LABEL_132;
      }
      v129 = 0;
LABEL_138:
      v132 = &v118[v129];
      if (v132 != *v117)
        *v117 = v132;
      if (++v110 == 7)
      {
        v968 = 0;
        v966 = 0u;
        v967 = 0u;
        v964 = 0u;
        v965 = 0u;
        v962 = 0u;
        v963 = 0u;
        v960 = 0u;
        v961 = 0u;
        v958 = 0u;
        v959 = 0u;
        sub_20F59867C(v943, (uint64_t)v946, (uint64_t)&v958);
        if ((_QWORD)v967)
        {
          *((_QWORD *)&v967 + 1) = v967;
          operator delete((void *)v967);
        }
        if (*((_QWORD *)&v965 + 1))
        {
          *(_QWORD *)&v966 = *((_QWORD *)&v965 + 1);
          operator delete(*((void **)&v965 + 1));
        }
        if ((_QWORD)v964)
        {
          *((_QWORD *)&v964 + 1) = v964;
          operator delete((void *)v964);
        }
        if (*((_QWORD *)&v962 + 1))
        {
          *(_QWORD *)&v963 = *((_QWORD *)&v962 + 1);
          operator delete(*((void **)&v962 + 1));
        }
        if ((_QWORD)v961)
        {
          *((_QWORD *)&v961 + 1) = v961;
          operator delete((void *)v961);
        }
        if (*((_QWORD *)&v959 + 1))
        {
          *(_QWORD *)&v960 = *((_QWORD *)&v959 + 1);
          operator delete(*((void **)&v959 + 1));
        }
        if ((_QWORD)v958)
        {
          *((_QWORD *)&v958 + 1) = v958;
          operator delete((void *)v958);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v953[1])
        {
          *(void **)&v954 = v953[1];
          operator delete(v953[1]);
        }
        if (v952[0])
        {
          v952[1] = v952[0];
          operator delete(v952[0]);
        }
        if (v950[1])
        {
          *(void **)&v951 = v950[1];
          operator delete(v950[1]);
        }
        if (v949[0])
        {
          v949[1] = v949[0];
          operator delete(v949[0]);
        }
        if (v947[1])
        {
          *(void **)&v948 = v947[1];
          operator delete(v947[1]);
        }
        v133 = v946[0];
        if (v946[0])
        {
          v946[1] = v946[0];
          goto LABEL_168;
        }
        return 0;
      }
    }
  }
  v933 = a2;
  v920 = v6;
  v938 = (unsigned __int8 *)(a1 + 7728);
  v942 = a1 + 7768;
  v937 = (char **)(a1 + 8104);
  sub_20E867E00((_QWORD *)(a1 + 8104), v8, v9, (v9 - v8) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8128), *(char **)(a1 + 7792), *(char **)(a1 + 7800), (uint64_t)(*(_QWORD *)(a1 + 7800) - *(_QWORD *)(a1 + 7792)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8152), *(char **)(a1 + 7816), *(char **)(a1 + 7824), (uint64_t)(*(_QWORD *)(a1 + 7824) - *(_QWORD *)(a1 + 7816)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8176), *(char **)(a1 + 7840), *(char **)(a1 + 7848), (uint64_t)(*(_QWORD *)(a1 + 7848) - *(_QWORD *)(a1 + 7840)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8200), *(char **)(a1 + 7864), *(char **)(a1 + 7872), (uint64_t)(*(_QWORD *)(a1 + 7872) - *(_QWORD *)(a1 + 7864)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8224), *(char **)(a1 + 7888), *(char **)(a1 + 7896), (uint64_t)(*(_QWORD *)(a1 + 7896) - *(_QWORD *)(a1 + 7888)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8248), *(char **)(a1 + 7912), *(char **)(a1 + 7920), (uint64_t)(*(_QWORD *)(a1 + 7920) - *(_QWORD *)(a1 + 7912)) >> 2);
  for (j = 0; j != 7; ++j)
  {
    v25 = dword_2103B6750[j];
    if ((v25 & 0x80000000) != 0)
      continue;
    v26 = &v937[3 * j];
    v27 = *v26;
    v29 = v26 + 1;
    v28 = v26[1];
    v30 = &v7[3 * v25];
    v31 = *v30;
    v34 = v30[1];
    v33 = v30 + 1;
    v32 = v34;
    if (*v26 == v28)
    {
      v35 = v26[1];
      v37 = v31;
    }
    else
    {
      v35 = *v26;
      v36 = *v26;
      v37 = v31;
      while (v37 != v32)
      {
        if (*(_DWORD *)v37 < *(_DWORD *)v36)
          goto LABEL_38;
        v37 += 4 * (*(_DWORD *)v36 >= *(_DWORD *)v37);
        v36 += 4;
        v35 += 4;
        if (v36 == v28)
        {
          v35 = v26[1];
          goto LABEL_38;
        }
      }
      v35 = v26[1];
      v37 = v32;
    }
LABEL_38:
    v38 = (v35 - v27) >> 2;
    v39 = v28 - v27;
    v40 = v39 >> 2;
    v41 = ((v32 - v31) >> 2) + (v39 >> 1) - v38;
    if (v41 <= v40)
    {
      if (v41 < v40)
        *v29 = &v27[4 * v41];
    }
    else
    {
      sub_20E93DC84((uint64_t)&v937[3 * j], v41 - v40);
      v27 = *v26;
    }
    v42 = &v27[4 * v40];
    v43 = *v33;
    if (v38 != v40)
    {
      v45 = &v27[4 * v38];
      v44 = &v27[4 * v40];
      while (v37 != v43)
      {
        v46 = *(_DWORD *)v37;
        v47 = *(_DWORD *)v37 >= *(_DWORD *)v45;
        if (*(_DWORD *)v37 >= *(_DWORD *)v45)
          v46 = *(_DWORD *)v45;
        v37 += 4 * (*(_DWORD *)v45 >= *(_DWORD *)v37);
        v45 += 4 * v47;
        *(_DWORD *)v44 = v46;
        v44 += 4;
        if (v45 == v42)
          goto LABEL_49;
      }
      v48 = v42 - v45;
      v49 = v44;
      goto LABEL_52;
    }
    v44 = &v27[4 * v40];
LABEL_49:
    v48 = v43 - v37;
    if (v43 != v37)
    {
      v49 = v44;
      v45 = v37;
LABEL_52:
      memmove(v49, v45, v48);
    }
    v50 = &v44[v48];
    v51 = *v26;
    if (&v44[v48] == *v29)
    {
      if (v38 == v40)
        continue;
    }
    else
    {
      *v29 = v50;
      if (v38 == v40)
        continue;
    }
    v52 = &v51[4 * v38];
    v53 = &v51[4 * v40];
    v54 = v50 - v53;
    if (v54)
      memmove(&v51[4 * v38], v53, v54);
    *v29 = &v52[v54];
  }
  v55 = (char **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 7528);
  if ((char **)(a1 + 7936) != v55)
    sub_20F59AA18((char **)(a1 + 7936), v55);
  for (k = 0; k != 7; ++k)
  {
    v57 = a1 + 7936 + 24 * k;
    v58 = *(char **)v57;
    v61 = *(char **)(v57 + 8);
    v60 = (char **)(v57 + 8);
    v59 = v61;
    if (v58 != v61)
    {
      v62 = v937[3 * k + 1];
      v63 = v937[3 * k];
      v64 = v58;
      while (v63 != v62)
      {
        v65 = *(_DWORD *)v64;
        if (*(_DWORD *)v64 >= *(_DWORD *)v63)
        {
          v64 += 4 * (*(_DWORD *)v63 >= v65);
          v63 += 4;
          if (v64 == v59)
            goto LABEL_69;
        }
        else
        {
          *(_DWORD *)v58 = v65;
          v58 += 4;
          v64 += 4;
          if (v64 == v59)
          {
LABEL_69:
            if (v58 == v59)
              goto LABEL_62;
            goto LABEL_73;
          }
        }
      }
      if (v64 != v58)
      {
        v66 = v59 - v64;
        memmove(v58, v64, v59 - v64);
        v58 += v66;
        if (v58 != *v60)
        {
LABEL_73:
          *v60 = v58;
          continue;
        }
      }
    }
LABEL_62:
    ;
  }
  sub_20E867E00(v937, *(char **)(a1 + 7936), *(char **)(a1 + 7944), (uint64_t)(*(_QWORD *)(a1 + 7944) - *(_QWORD *)(a1 + 7936)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8128), *(char **)(a1 + 7960), *(char **)(a1 + 7968), (uint64_t)(*(_QWORD *)(a1 + 7968) - *(_QWORD *)(a1 + 7960)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8152), *(char **)(a1 + 7984), *(char **)(a1 + 7992), (uint64_t)(*(_QWORD *)(a1 + 7992) - *(_QWORD *)(a1 + 7984)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8176), *(char **)(a1 + 8008), *(char **)(a1 + 8016), (uint64_t)(*(_QWORD *)(a1 + 8016) - *(_QWORD *)(a1 + 8008)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8200), *(char **)(a1 + 8032), *(char **)(a1 + 8040), (uint64_t)(*(_QWORD *)(a1 + 8040) - *(_QWORD *)(a1 + 8032)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8224), *(char **)(a1 + 8056), *(char **)(a1 + 8064), (uint64_t)(*(_QWORD *)(a1 + 8064) - *(_QWORD *)(a1 + 8056)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8248), *(char **)(a1 + 8080), *(char **)(a1 + 8088), (uint64_t)(*(_QWORD *)(a1 + 8088) - *(_QWORD *)(a1 + 8080)) >> 2);
  v67 = 0;
  while (2)
  {
    v68 = &v937[3 * v67];
    v69 = *v68;
    v71 = v68 + 1;
    v70 = v68[1];
    v72 = (char **)(v942 + 24 * v67);
    v73 = *v72;
    v76 = v72[1];
    v75 = v72 + 1;
    v74 = v76;
    if (*v68 == v70)
    {
      v77 = v68[1];
      v79 = v73;
    }
    else
    {
      v77 = *v68;
      v78 = *v68;
      v79 = v73;
      while (v79 != v74)
      {
        if (*(_DWORD *)v79 < *(_DWORD *)v78)
          goto LABEL_85;
        v79 += 4 * (*(_DWORD *)v78 >= *(_DWORD *)v79);
        v78 += 4;
        v77 += 4;
        if (v78 == v70)
        {
          v77 = v68[1];
          goto LABEL_85;
        }
      }
      v77 = v68[1];
      v79 = v74;
    }
LABEL_85:
    v80 = (v77 - v69) >> 2;
    v81 = v70 - v69;
    v82 = v81 >> 2;
    v83 = ((v74 - v73) >> 2) + (v81 >> 1) - v80;
    if (v83 <= v81 >> 2)
    {
      if (v83 < v81 >> 2)
        *v71 = &v69[4 * v83];
    }
    else
    {
      sub_20E93DC84((uint64_t)&v937[3 * v67], v83 - (v81 >> 2));
      v69 = *v68;
      v74 = *v75;
    }
    v84 = &v69[4 * v82];
    if (v80 == v82)
    {
      v85 = &v69[4 * v82];
LABEL_96:
      v89 = v74 - v79;
      if (v79 != v74)
      {
        v90 = v85;
        v86 = v79;
        goto LABEL_99;
      }
    }
    else
    {
      v86 = &v69[4 * v80];
      v85 = &v69[4 * v82];
      while (v79 != v74)
      {
        v87 = *(_DWORD *)v79;
        v88 = *(_DWORD *)v79 >= *(_DWORD *)v86;
        if (*(_DWORD *)v79 >= *(_DWORD *)v86)
          v87 = *(_DWORD *)v86;
        v79 += 4 * (*(_DWORD *)v86 >= *(_DWORD *)v79);
        v86 += 4 * v88;
        *(_DWORD *)v85 = v87;
        v85 += 4;
        if (v86 == v84)
          goto LABEL_96;
      }
      v89 = v84 - v86;
      v90 = v85;
LABEL_99:
      memmove(v90, v86, v89);
    }
    v91 = &v85[v89];
    v92 = *v68;
    if (&v85[v89] != *v71)
      *v71 = v91;
    if (v80 != v82)
    {
      v93 = &v92[4 * v80];
      v94 = &v92[4 * v82];
      v95 = v91 - v94;
      if (v95)
        memmove(&v92[4 * v80], v94, v95);
      *v71 = &v93[v95];
    }
    if (++v67 != 7)
      continue;
    break;
  }
  v96 = 9 * ((*(_QWORD *)(a1 + 7968) - *(_QWORD *)(a1 + 7960)) >> 2)
      + ((*(_QWORD *)(a1 + 7992) - *(_QWORD *)(a1 + 7984)) >> 2)
      + ((*(_DWORD *)(a1 + 8040) - *(_DWORD *)(a1 + 8032)) & 0xFFFFFFFC)
      + 6
      * (((*(_QWORD *)(a1 + 8016) - *(_QWORD *)(a1 + 8008)) >> 2)
       + ((*(_QWORD *)(a1 + 7944) - *(_QWORD *)(a1 + 7936)) >> 2))
      + ((*(_DWORD *)(a1 + 8064) - *(_DWORD *)(a1 + 8056)) & 0xFFFFFFFC)
      + 3 * ((*(_QWORD *)(a1 + 8088) - *(_QWORD *)(a1 + 8080)) >> 2);
  v97 = (_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v96;
  if (*(_QWORD *)(a1 + 16) < v96)
  {
    if (*v97)
      MEMORY[0x212BC6368](*v97, 0x1000C8000313F17);
    v98 = (8 * v96 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v98 >> 3;
    *(_QWORD *)(a1 + 8) = operator new(v98, (std::align_val_t)0x20uLL);
  }
  v99 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v100 = sub_20F596E30(v99, a1 + 7936, (_QWORD *)(a1 + 8));
  v101 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64x2_t))(*(_QWORD *)a1 + 24))(a1, v100);
  v103 = v101[1];
  v102 = v101[2];
  if (v103 == v102)
  {
    v106 = (unsigned __int8 *)(a1 + 7728);
  }
  else
  {
    v104 = *(_DWORD **)(a1 + 8104);
    v105 = *(_DWORD **)(a1 + 8112);
    v106 = (unsigned __int8 *)(a1 + 7728);
    if (v104 != v105)
    {
      v107 = 0;
      do
      {
        v108 = *(_QWORD *)(v103 + 8);
        if (*v104 == *(_DWORD *)v103)
        {
          if (*(_BYTE *)(v108 + 20))
            v109 = v107;
          else
            v109 = -1;
          v107 += *(unsigned __int8 *)(v108 + 20);
          ++v104;
          *(_DWORD *)v108 = v109;
          v103 += 16;
          if (v103 == v102)
            break;
        }
        else
        {
          *(_DWORD *)v108 = -1;
          v103 += 16;
          if (v103 == v102)
            break;
        }
      }
      while (v104 != v105);
    }
  }
  if (v103 != v102)
  {
    v134 = v102 - v103 - 16;
    if (v134 < 0x10)
    {
      v135 = v103;
      goto LABEL_176;
    }
    v136 = (v134 >> 4) + 1;
    v135 = v103 + 16 * (v136 & 0x1FFFFFFFFFFFFFFELL);
    v137 = (_DWORD **)(v103 + 24);
    v138 = v136 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v139 = *(v137 - 2);
      v140 = *v137;
      v137 += 4;
      *v139 = -1;
      *v140 = -1;
      v138 -= 2;
    }
    while (v138);
    if (v136 != (v136 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_176:
        **(_DWORD **)(v135 + 8) = -1;
        v135 += 16;
      }
      while (v135 != v102);
    }
  }
  v142 = v101[13];
  v141 = v101[14];
  v143 = *(_DWORD **)(a1 + 8128);
  v144 = *(_DWORD **)(a1 + 8136);
  if (v142 != v141 && v143 != v144)
  {
    v148 = 0;
    do
    {
      v149 = *(_QWORD *)(v142 + 8);
      if (*v143 == *(_DWORD *)v142)
      {
        if (*(_BYTE *)(v149 + 20))
          v150 = v148;
        else
          v150 = -1;
        v148 += *(unsigned __int8 *)(v149 + 20);
        ++v143;
        *(_DWORD *)v149 = v150;
        v142 += 16;
        if (v142 == v141)
          break;
      }
      else
      {
        *(_DWORD *)v149 = -1;
        v142 += 16;
        if (v142 == v141)
          break;
      }
    }
    while (v143 != v144);
  }
  if (v142 != v141)
  {
    v146 = v141 - v142 - 16;
    if (v146 < 0x10)
    {
      v147 = v142;
      goto LABEL_196;
    }
    v151 = (v146 >> 4) + 1;
    v147 = v142 + 16 * (v151 & 0x1FFFFFFFFFFFFFFELL);
    v152 = (_DWORD **)(v142 + 24);
    v153 = v151 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v154 = *(v152 - 2);
      v155 = *v152;
      v152 += 4;
      *v154 = -1;
      *v155 = -1;
      v153 -= 2;
    }
    while (v153);
    if (v151 != (v151 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_196:
        **(_DWORD **)(v147 + 8) = -1;
        v147 += 16;
      }
      while (v147 != v141);
    }
  }
  v157 = v101[25];
  v156 = v101[26];
  v158 = *(_DWORD **)(a1 + 8152);
  v159 = *(_DWORD **)(a1 + 8160);
  if (v157 != v156 && v158 != v159)
  {
    v163 = 0;
    do
    {
      v164 = *(_QWORD *)(v157 + 8);
      if (*v158 == *(_DWORD *)v157)
      {
        if (*(_BYTE *)(v164 + 20))
          v165 = v163;
        else
          v165 = -1;
        v163 += *(unsigned __int8 *)(v164 + 20);
        ++v158;
        *(_DWORD *)v164 = v165;
        v157 += 16;
        if (v157 == v156)
          break;
      }
      else
      {
        *(_DWORD *)v164 = -1;
        v157 += 16;
        if (v157 == v156)
          break;
      }
    }
    while (v158 != v159);
  }
  if (v157 != v156)
  {
    v161 = v156 - v157 - 16;
    if (v161 < 0x10)
    {
      v162 = v157;
      goto LABEL_216;
    }
    v166 = (v161 >> 4) + 1;
    v162 = v157 + 16 * (v166 & 0x1FFFFFFFFFFFFFFELL);
    v167 = (_DWORD **)(v157 + 24);
    v168 = v166 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v169 = *(v167 - 2);
      v170 = *v167;
      v167 += 4;
      *v169 = -1;
      *v170 = -1;
      v168 -= 2;
    }
    while (v168);
    if (v166 != (v166 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_216:
        **(_DWORD **)(v162 + 8) = -1;
        v162 += 16;
      }
      while (v162 != v156);
    }
  }
  v172 = v101[37];
  v171 = v101[38];
  v173 = *(_DWORD **)(a1 + 8176);
  v174 = *(_DWORD **)(a1 + 8184);
  if (v172 != v171 && v173 != v174)
  {
    v178 = 0;
    do
    {
      v179 = *(_QWORD *)(v172 + 8);
      if (*v173 == *(_DWORD *)v172)
      {
        if (*(_BYTE *)(v179 + 20))
          v180 = v178;
        else
          v180 = -1;
        v178 += *(unsigned __int8 *)(v179 + 20);
        ++v173;
        *(_DWORD *)v179 = v180;
        v172 += 16;
        if (v172 == v171)
          break;
      }
      else
      {
        *(_DWORD *)v179 = -1;
        v172 += 16;
        if (v172 == v171)
          break;
      }
    }
    while (v173 != v174);
  }
  if (v172 != v171)
  {
    v176 = v171 - v172 - 16;
    if (v176 < 0x10)
    {
      v177 = v172;
      goto LABEL_236;
    }
    v181 = (v176 >> 4) + 1;
    v177 = v172 + 16 * (v181 & 0x1FFFFFFFFFFFFFFELL);
    v182 = (_DWORD **)(v172 + 24);
    v183 = v181 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v184 = *(v182 - 2);
      v185 = *v182;
      v182 += 4;
      *v184 = -1;
      *v185 = -1;
      v183 -= 2;
    }
    while (v183);
    if (v181 != (v181 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_236:
        **(_DWORD **)(v177 + 8) = -1;
        v177 += 16;
      }
      while (v177 != v171);
    }
  }
  v187 = v101[49];
  v186 = v101[50];
  v188 = *(_DWORD **)(a1 + 8200);
  v189 = *(_DWORD **)(a1 + 8208);
  if (v187 != v186 && v188 != v189)
  {
    v193 = 0;
    do
    {
      v194 = *(_QWORD *)(v187 + 8);
      if (*v188 == *(_DWORD *)v187)
      {
        if (*(_BYTE *)(v194 + 20))
          v195 = v193;
        else
          v195 = -1;
        v193 += *(unsigned __int8 *)(v194 + 20);
        ++v188;
        *(_DWORD *)v194 = v195;
        v187 += 16;
        if (v187 == v186)
          break;
      }
      else
      {
        *(_DWORD *)v194 = -1;
        v187 += 16;
        if (v187 == v186)
          break;
      }
    }
    while (v188 != v189);
  }
  if (v187 != v186)
  {
    v191 = v186 - v187 - 16;
    if (v191 < 0x10)
    {
      v192 = v187;
      goto LABEL_256;
    }
    v196 = (v191 >> 4) + 1;
    v192 = v187 + 16 * (v196 & 0x1FFFFFFFFFFFFFFELL);
    v197 = (_DWORD **)(v187 + 24);
    v198 = v196 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v199 = *(v197 - 2);
      v200 = *v197;
      v197 += 4;
      *v199 = -1;
      *v200 = -1;
      v198 -= 2;
    }
    while (v198);
    if (v196 != (v196 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_256:
        **(_DWORD **)(v192 + 8) = -1;
        v192 += 16;
      }
      while (v192 != v186);
    }
  }
  v202 = v101[61];
  v201 = v101[62];
  v203 = *(_DWORD **)(a1 + 8224);
  v204 = *(_DWORD **)(a1 + 8232);
  if (v202 != v201 && v203 != v204)
  {
    v208 = 0;
    do
    {
      v209 = *(_QWORD *)(v202 + 8);
      if (*v203 == *(_DWORD *)v202)
      {
        if (*(_BYTE *)(v209 + 20))
          v210 = v208;
        else
          v210 = -1;
        v208 += *(unsigned __int8 *)(v209 + 20);
        ++v203;
        *(_DWORD *)v209 = v210;
        v202 += 16;
        if (v202 == v201)
          break;
      }
      else
      {
        *(_DWORD *)v209 = -1;
        v202 += 16;
        if (v202 == v201)
          break;
      }
    }
    while (v203 != v204);
  }
  if (v202 != v201)
  {
    v206 = v201 - v202 - 16;
    if (v206 < 0x10)
    {
      v207 = v202;
      goto LABEL_276;
    }
    v211 = (v206 >> 4) + 1;
    v207 = v202 + 16 * (v211 & 0x1FFFFFFFFFFFFFFELL);
    v212 = (_DWORD **)(v202 + 24);
    v213 = v211 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v214 = *(v212 - 2);
      v215 = *v212;
      v212 += 4;
      *v214 = -1;
      *v215 = -1;
      v213 -= 2;
    }
    while (v213);
    if (v211 != (v211 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_276:
        **(_DWORD **)(v207 + 8) = -1;
        v207 += 16;
      }
      while (v207 != v201);
    }
  }
  v216 = v101[73];
  v217 = v101[74];
  v218 = *(_DWORD **)(a1 + 8248);
  v219 = *(_DWORD **)(a1 + 8256);
  if (v216 != v217 && v218 != v219)
  {
    v223 = 0;
    do
    {
      v224 = *(_QWORD *)(v216 + 8);
      if (*v218 == *(_DWORD *)v216)
      {
        if (*(_BYTE *)(v224 + 20))
          v225 = v223;
        else
          v225 = -1;
        v223 += *(unsigned __int8 *)(v224 + 20);
        ++v218;
        *(_DWORD *)v224 = v225;
        v216 += 16;
        if (v216 == v217)
          break;
      }
      else
      {
        *(_DWORD *)v224 = -1;
        v216 += 16;
        if (v216 == v217)
          break;
      }
    }
    while (v218 != v219);
  }
  if (v216 != v217)
  {
    v221 = v217 - v216 - 16;
    if (v221 < 0x10)
    {
      v222 = v216;
      goto LABEL_296;
    }
    v226 = (v221 >> 4) + 1;
    v222 = v216 + 16 * (v226 & 0x1FFFFFFFFFFFFFFELL);
    v227 = (_DWORD **)(v216 + 24);
    v228 = v226 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v229 = *(v227 - 2);
      v230 = *v227;
      v227 += 4;
      *v229 = -1;
      *v230 = -1;
      v228 -= 2;
    }
    while (v228);
    if (v226 != (v226 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_296:
        **(_DWORD **)(v222 + 8) = -1;
        v222 += 16;
      }
      while (v222 != v217);
    }
  }
  v231 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F597134(v231, v937);
  v232 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F59B0EC(v232 + 80);
  v233 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v235 = *(unsigned int *)(v233 + 16);
  if ((_DWORD)v235)
    bzero(*(void **)v233, 8 * v235);
  if (((*(_QWORD *)(a1 + 7592) - *(_QWORD *)(a1 + 7584)) >> 2)
     + ((*(_QWORD *)(a1 + 7568) - *(_QWORD *)(a1 + 7560)) >> 2)
     + ((*(_QWORD *)(a1 + 7616) - *(_QWORD *)(a1 + 7608)) >> 2)
     + ((*(_QWORD *)(a1 + 7640) - *(_QWORD *)(a1 + 7632)) >> 2)
     + ((*(_QWORD *)(a1 + 7664) - *(_QWORD *)(a1 + 7656)) >> 2)
     + ((*(_QWORD *)(a1 + 7688) - *(_QWORD *)(a1 + 7680)) >> 2)
     + ((*(_QWORD *)(a1 + 7712) - *(_QWORD *)(a1 + 7704)) >> 2))
  {
    v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v234 = sub_20F597B84(v236, a1 + 32, (char **)(a1 + 8272), a1 + 8440);
  }
  (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 16))(a1, v933, v234);
  v237 = *v106;
  v238 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F59FDA8(v942, v238 + 7528, (uint64_t)&unk_2103B676C, a1 + 8440);
  v929 = a1 + 8800;
  sub_20F5A00B8(v238 + 80, (void **)(a1 + 8800), a1 + 8440, (unsigned int **)(a1 + 8440));
  if (!v237)
    v239 = sub_20F5A0788(v238, a1 + 8776, (int **)(a1 + 8440));
  v934 = a1 + 8776;
  v240 = (void **)(a1 + 8824);
  v241 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v239);
  sub_20F59FDA8(v942, v241 + 7528, (uint64_t)&unk_2103B676C, a1 + 8440);
  sub_20F59FDA8(a1 + 7936, v241 + 7528, (uint64_t)&unk_2103B676C, a1 + 8608);
  v242 = 9 * ((*(_QWORD *)(a1 + 8640) - *(_QWORD *)(a1 + 8632)) >> 3)
       + ((*(_QWORD *)(a1 + 8664) - *(_QWORD *)(a1 + 8656)) >> 3)
       + 6
       * (((*(_QWORD *)(a1 + 8688) - *(_QWORD *)(a1 + 8680)) >> 3)
        + ((*(_QWORD *)(a1 + 8616) - *(_QWORD *)(a1 + 8608)) >> 3))
       + (((*(_QWORD *)(a1 + 8712) - *(_QWORD *)(a1 + 8704)) >> 1) & 0xFFFFFFFC)
       + (((*(_QWORD *)(a1 + 8736) - *(_QWORD *)(a1 + 8728)) >> 1) & 0xFFFFFFFC)
       + 3 * ((*(_QWORD *)(a1 + 8760) - *(_QWORD *)(a1 + 8752)) >> 3);
  v243 = 9 * ((*(_QWORD *)(a1 + 8472) - *(_QWORD *)(a1 + 8464)) >> 3)
       + ((*(_QWORD *)(a1 + 8496) - *(_QWORD *)(a1 + 8488)) >> 3)
       + 6
       * (((*(_QWORD *)(a1 + 8520) - *(_QWORD *)(a1 + 8512)) >> 3)
        + ((*(_QWORD *)(a1 + 8448) - *(_QWORD *)(a1 + 8440)) >> 3))
       + (((*(_QWORD *)(a1 + 8544) - *(_QWORD *)(a1 + 8536)) >> 1) & 0xFFFFFFFC)
       + (((*(_QWORD *)(a1 + 8568) - *(_QWORD *)(a1 + 8560)) >> 1) & 0xFFFFFFFC)
       + 3 * ((*(_QWORD *)(a1 + 8592) - *(_QWORD *)(a1 + 8584)) >> 3);
  *(_DWORD *)(a1 + 8840) = v243;
  *(_DWORD *)(a1 + 8844) = v242;
  v244 = v242 * (unint64_t)v243;
  v245 = v242;
  v246 = v243;
  if (*(_QWORD *)(a1 + 8832) < v244)
  {
    if (*v240)
      MEMORY[0x212BC6368](*v240, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 8824) = 0;
    v247 = (8 * v244 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 8832) = v247 >> 3;
    *(_QWORD *)(a1 + 8824) = operator new(v247, (std::align_val_t)0x20uLL);
    v246 = *(_DWORD *)(a1 + 8840);
    v245 = *(_DWORD *)(a1 + 8844);
  }
  v248 = v246 * v245;
  if (v248)
    bzero(*v240, 8 * v248);
  v249 = v241 + 80;
  if (v242 == *(_DWORD *)(a1 + 8864) && v243 == *(_DWORD *)(a1 + 8868))
  {
    v250 = *(void **)(a1 + 8848);
  }
  else
  {
    *(_DWORD *)(a1 + 8864) = v242;
    *(_DWORD *)(a1 + 8868) = v243;
    v250 = *(void **)(a1 + 8848);
    if (*(_QWORD *)(a1 + 8856) < v244)
    {
      if (v250)
        MEMORY[0x212BC6368](v250, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 8848) = 0;
      v251 = (8 * v244 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 8856) = v251 >> 3;
      v250 = operator new(v251, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 8848) = v250;
      v242 = *(_DWORD *)(a1 + 8864);
      v243 = *(_DWORD *)(a1 + 8868);
    }
  }
  if (v242 * v243)
    bzero(v250, 8 * v242 * v243);
  sub_20F5A6384(v249, a1 + 8848, (unsigned int **)(a1 + 8608), (unsigned int **)(a1 + 8440));
  sub_20F5A6384(v249, a1 + 8824, (unsigned int **)(a1 + 8440), (unsigned int **)(a1 + 8608));
  *(_QWORD *)&v958 = a1 + 8848;
  sub_20F2B809C(a1 + 8824, (uint64_t **)&v958);
  sub_20F597134((_QWORD *)(a1 + 32), (char **)(a1 + 7936));
  sub_20F59B0EC(a1 + 112);
  v252 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v252)
    bzero(*(void **)(a1 + 32), 8 * v252);
  v253 = *v938;
  v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F59FDA8(a1 + 7936, v254 + 7528, (uint64_t)&unk_2103B676C, a1 + 8440);
  sub_20F5A00B8(v254 + 80, (void **)(a1 + 8872), a1 + 8440, (unsigned int **)(a1 + 8440));
  if (v253)
  {
    v255 = *v938;
    if (*(_BYTE *)(a1 + 7729))
      goto LABEL_322;
LABEL_326:
    if (sub_20F2B67A0(v929, v934, a1 + 8824, v255 != 0, a1 + 8872, (unint64_t *)(a1 + 32)))
      goto LABEL_327;
    return 1;
  }
  sub_20F5A0788(v254, a1 + 32, (int **)(a1 + 8440));
  v255 = *v938;
  if (!*(_BYTE *)(a1 + 7729))
    goto LABEL_326;
LABEL_322:
  LOBYTE(v958) = v255;
  v256 = *(_QWORD *)(a1 + 7760);
  if (!v256)
    sub_20E86D37C();
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v256 + 48))(v256, v929, v934, a1 + 8824, &v958, a1 + 8872, a1 + 32) & 1) == 0)return 1;
LABEL_327:
  v257 = *(_QWORD *)(a1 + 7168);
  v258 = 3 * *(_DWORD *)(v257 + 8);
  v259 = *(_DWORD *)(*(_QWORD *)(a1 + 7224) + 8);
  v930 = *(_DWORD *)(*(_QWORD *)(a1 + 7280) + 8);
  v939 = *(_DWORD *)(*(_QWORD *)(a1 + 7336) + 8);
  v935 = *(_DWORD *)(*(_QWORD *)(a1 + 7448) + 8);
  v260 = 3 * *(_DWORD *)(v257 + 12);
  v261 = *(_DWORD *)(*(_QWORD *)(a1 + 7176) + 12);
  v915 = *(_DWORD *)(*(_QWORD *)(a1 + 7192) + 12);
  v916 = *(_DWORD *)(*(_QWORD *)(a1 + 7200) + 12);
  v917 = *(_DWORD *)(*(_QWORD *)(a1 + 7392) + 8);
  v913 = *(_DWORD *)(*(_QWORD *)(a1 + 7184) + 12);
  v914 = *(_DWORD *)(*(_QWORD *)(a1 + 7208) + 12);
  v262 = *(unsigned int *)(a1 + 988);
  if ((_DWORD)v262)
  {
    v263 = 0;
    v264 = *(_QWORD *)(a1 + 1096);
    do
    {
      v265 = *(_QWORD *)(v264 + 8 * v263);
      if (v265)
      {
        v266 = *(_QWORD *)(a1 + 1032);
        v267 = *(_QWORD *)(a1 + 1024);
        v268 = *(_QWORD *)(a1 + 1056);
        v269 = 16 * v265;
        v270 = (uint64_t *)(*(_QWORD *)(a1 + 1064) + 16 * (*(_DWORD *)(a1 + 1088) * v263) + 8);
        do
        {
          v272 = ((v266 - v267) << 6) - 1;
          if (v266 == v267)
            v272 = 0;
          v273 = *(_QWORD *)(a1 + 1048) + v268;
          if (v272 == v273)
          {
            sub_20EDB36DC(a1 + 1016);
            v267 = *(_QWORD *)(a1 + 1024);
            v266 = *(_QWORD *)(a1 + 1032);
            v273 = *(_QWORD *)(a1 + 1056) + *(_QWORD *)(a1 + 1048);
          }
          v271 = *v270;
          v270 += 2;
          *(_QWORD *)(*(_QWORD *)(v267 + ((v273 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v273 & 0x1FF)) = v271;
          v268 = *(_QWORD *)(a1 + 1056) + 1;
          *(_QWORD *)(a1 + 1056) = v268;
          v269 -= 16;
        }
        while (v269);
        v264 = *(_QWORD *)(a1 + 1096);
        v262 = *(unsigned int *)(a1 + 988);
      }
      *(_QWORD *)(v264 + 8 * v263++) = 0;
    }
    while (v263 < v262);
  }
  *(_QWORD *)v926 = (2 * v258);
  v274 = 9 * v259;
  *(_QWORD *)v924 = (2 * v260);
  v275 = *(unsigned int *)(a1 + 1996);
  v276 = 9 * v261;
  if ((_DWORD)v275)
  {
    v277 = 0;
    v278 = *(_QWORD *)(a1 + 2104);
    do
    {
      v279 = *(_QWORD *)(v278 + 8 * v277);
      if (v279)
      {
        v280 = *(_QWORD *)(a1 + 2040);
        v281 = *(_QWORD *)(a1 + 2032);
        v282 = *(_QWORD *)(a1 + 2064);
        v283 = 16 * v279;
        v284 = (uint64_t *)(*(_QWORD *)(a1 + 2072) + 16 * (*(_DWORD *)(a1 + 2096) * v277) + 8);
        do
        {
          v286 = ((v280 - v281) << 6) - 1;
          if (v280 == v281)
            v286 = 0;
          v287 = *(_QWORD *)(a1 + 2056) + v282;
          if (v286 == v287)
          {
            sub_20EDB36DC(a1 + 2024);
            v281 = *(_QWORD *)(a1 + 2032);
            v280 = *(_QWORD *)(a1 + 2040);
            v287 = *(_QWORD *)(a1 + 2064) + *(_QWORD *)(a1 + 2056);
          }
          v285 = *v284;
          v284 += 2;
          *(_QWORD *)(*(_QWORD *)(v281 + ((v287 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v287 & 0x1FF)) = v285;
          v282 = *(_QWORD *)(a1 + 2064) + 1;
          *(_QWORD *)(a1 + 2064) = v282;
          v283 -= 16;
        }
        while (v283);
        v278 = *(_QWORD *)(a1 + 2104);
        v275 = *(unsigned int *)(a1 + 1996);
      }
      *(_QWORD *)(v278 + 8 * v277++) = 0;
    }
    while (v277 < v275);
  }
  *(_QWORD *)v922 = (v274 + v926[0]);
  *(_QWORD *)v921 = (v276 + v924[0]);
  v288 = *(unsigned int *)(a1 + 3004);
  if ((_DWORD)v288)
  {
    v289 = 0;
    v290 = *(_QWORD *)(a1 + 3112);
    do
    {
      v291 = *(_QWORD *)(v290 + 8 * v289);
      if (v291)
      {
        v292 = *(_QWORD *)(a1 + 3048);
        v293 = *(_QWORD *)(a1 + 3040);
        v294 = *(_QWORD *)(a1 + 3072);
        v295 = 16 * v291;
        v296 = (uint64_t *)(*(_QWORD *)(a1 + 3080) + 16 * (*(_DWORD *)(a1 + 3104) * v289) + 8);
        do
        {
          v298 = ((v292 - v293) << 6) - 1;
          if (v292 == v293)
            v298 = 0;
          v299 = *(_QWORD *)(a1 + 3064) + v294;
          if (v298 == v299)
          {
            sub_20EDB36DC(a1 + 3032);
            v293 = *(_QWORD *)(a1 + 3040);
            v292 = *(_QWORD *)(a1 + 3048);
            v299 = *(_QWORD *)(a1 + 3072) + *(_QWORD *)(a1 + 3064);
          }
          v297 = *v296;
          v296 += 2;
          *(_QWORD *)(*(_QWORD *)(v293 + ((v299 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v299 & 0x1FF)) = v297;
          v294 = *(_QWORD *)(a1 + 3072) + 1;
          *(_QWORD *)(a1 + 3072) = v294;
          v295 -= 16;
        }
        while (v295);
        v290 = *(_QWORD *)(a1 + 3112);
        v288 = *(unsigned int *)(a1 + 3004);
      }
      *(_QWORD *)(v290 + 8 * v289++) = 0;
    }
    while (v289 < v288);
  }
  v918 = (v930 + v922[0]);
  *(_QWORD *)v931 = (v913 + v921[0]);
  v300 = *(unsigned int *)(a1 + 4012);
  if ((_DWORD)v300)
  {
    v301 = 0;
    v302 = *(_QWORD *)(a1 + 4120);
    do
    {
      v303 = *(_QWORD *)(v302 + 8 * v301);
      if (v303)
      {
        v304 = *(_QWORD *)(a1 + 4056);
        v305 = *(_QWORD *)(a1 + 4048);
        v306 = *(_QWORD *)(a1 + 4080);
        v307 = 16 * v303;
        v308 = (uint64_t *)(*(_QWORD *)(a1 + 4088) + 16 * (*(_DWORD *)(a1 + 4112) * v301) + 8);
        do
        {
          v310 = ((v304 - v305) << 6) - 1;
          if (v304 == v305)
            v310 = 0;
          v311 = *(_QWORD *)(a1 + 4072) + v306;
          if (v310 == v311)
          {
            sub_20EDB36DC(a1 + 4040);
            v305 = *(_QWORD *)(a1 + 4048);
            v304 = *(_QWORD *)(a1 + 4056);
            v311 = *(_QWORD *)(a1 + 4080) + *(_QWORD *)(a1 + 4072);
          }
          v309 = *v308;
          v308 += 2;
          *(_QWORD *)(*(_QWORD *)(v305 + ((v311 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v311 & 0x1FF)) = v309;
          v306 = *(_QWORD *)(a1 + 4080) + 1;
          *(_QWORD *)(a1 + 4080) = v306;
          v307 -= 16;
        }
        while (v307);
        v302 = *(_QWORD *)(a1 + 4120);
        v300 = *(unsigned int *)(a1 + 4012);
      }
      *(_QWORD *)(v302 + 8 * v301++) = 0;
    }
    while (v301 < v300);
  }
  v312 = (v918 + 6 * v939);
  v313 = v935 + v917;
  v314 = *(unsigned int *)(a1 + 5020);
  v936 = (v931[0] + 6 * v915);
  if ((_DWORD)v314)
  {
    v315 = 0;
    v316 = *(_QWORD *)(a1 + 5128);
    do
    {
      v317 = *(_QWORD *)(v316 + 8 * v315);
      if (v317)
      {
        v318 = *(_QWORD *)(a1 + 5064);
        v319 = *(_QWORD *)(a1 + 5056);
        v320 = *(_QWORD *)(a1 + 5088);
        v321 = 16 * v317;
        v322 = (uint64_t *)(*(_QWORD *)(a1 + 5096) + 16 * (*(_DWORD *)(a1 + 5120) * v315) + 8);
        do
        {
          v324 = ((v318 - v319) << 6) - 1;
          if (v318 == v319)
            v324 = 0;
          v325 = *(_QWORD *)(a1 + 5080) + v320;
          if (v324 == v325)
          {
            sub_20EDB36DC(a1 + 5048);
            v319 = *(_QWORD *)(a1 + 5056);
            v318 = *(_QWORD *)(a1 + 5064);
            v325 = *(_QWORD *)(a1 + 5088) + *(_QWORD *)(a1 + 5080);
          }
          v323 = *v322;
          v322 += 2;
          *(_QWORD *)(*(_QWORD *)(v319 + ((v325 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v325 & 0x1FF)) = v323;
          v320 = *(_QWORD *)(a1 + 5088) + 1;
          *(_QWORD *)(a1 + 5088) = v320;
          v321 -= 16;
        }
        while (v321);
        v316 = *(_QWORD *)(a1 + 5128);
        v314 = *(unsigned int *)(a1 + 5020);
      }
      *(_QWORD *)(v316 + 8 * v315++) = 0;
    }
    while (v315 < v314);
  }
  v326 = v312 + 4 * v313;
  v327 = *(unsigned int *)(a1 + 6028);
  v328 = (v936 + 4 * (v914 + v916));
  if ((_DWORD)v327)
  {
    v329 = 0;
    v330 = *(_QWORD *)(a1 + 6136);
    do
    {
      v331 = *(_QWORD *)(v330 + 8 * v329);
      if (v331)
      {
        v332 = *(_QWORD *)(a1 + 6072);
        v333 = *(_QWORD *)(a1 + 6064);
        v334 = *(_QWORD *)(a1 + 6096);
        v335 = 16 * v331;
        v336 = (uint64_t *)(*(_QWORD *)(a1 + 6104) + 16 * (*(_DWORD *)(a1 + 6128) * v329) + 8);
        do
        {
          v338 = ((v332 - v333) << 6) - 1;
          if (v332 == v333)
            v338 = 0;
          v339 = *(_QWORD *)(a1 + 6088) + v334;
          if (v338 == v339)
          {
            sub_20EDB36DC(a1 + 6056);
            v333 = *(_QWORD *)(a1 + 6064);
            v332 = *(_QWORD *)(a1 + 6072);
            v339 = *(_QWORD *)(a1 + 6096) + *(_QWORD *)(a1 + 6088);
          }
          v337 = *v336;
          v336 += 2;
          *(_QWORD *)(*(_QWORD *)(v333 + ((v339 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v339 & 0x1FF)) = v337;
          v334 = *(_QWORD *)(a1 + 6096) + 1;
          *(_QWORD *)(a1 + 6096) = v334;
          v335 -= 16;
        }
        while (v335);
        v330 = *(_QWORD *)(a1 + 6136);
        v327 = *(unsigned int *)(a1 + 6028);
      }
      *(_QWORD *)(v330 + 8 * v329++) = 0;
    }
    while (v329 < v327);
  }
  sub_20F5A947C(a1 + 7024, (uint64_t *)(a1 + 8872), v326 | ((unint64_t)v328 << 32));
  v340 = *(unsigned int *)(a1 + 844);
  if ((_DWORD)v340)
  {
    v341 = 0;
    v342 = *(_QWORD *)(a1 + 952);
    do
    {
      v343 = *(_QWORD *)(v342 + 8 * v341);
      if (v343)
      {
        v344 = *(_QWORD *)(a1 + 888);
        v345 = *(_QWORD *)(a1 + 880);
        v346 = *(_QWORD *)(a1 + 912);
        v347 = 16 * v343;
        v348 = (uint64_t *)(*(_QWORD *)(a1 + 920) + 16 * (*(_DWORD *)(a1 + 944) * v341) + 8);
        do
        {
          v350 = ((v344 - v345) << 6) - 1;
          if (v344 == v345)
            v350 = 0;
          v351 = *(_QWORD *)(a1 + 904) + v346;
          if (v350 == v351)
          {
            sub_20EDB36DC(a1 + 872);
            v345 = *(_QWORD *)(a1 + 880);
            v344 = *(_QWORD *)(a1 + 888);
            v351 = *(_QWORD *)(a1 + 912) + *(_QWORD *)(a1 + 904);
          }
          v349 = *v348;
          v348 += 2;
          *(_QWORD *)(*(_QWORD *)(v345 + ((v351 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v351 & 0x1FF)) = v349;
          v346 = *(_QWORD *)(a1 + 912) + 1;
          *(_QWORD *)(a1 + 912) = v346;
          v347 -= 16;
        }
        while (v347);
        v342 = *(_QWORD *)(a1 + 952);
        v340 = *(unsigned int *)(a1 + 844);
      }
      *(_QWORD *)(v342 + 8 * v341++) = 0;
    }
    while (v341 < v340);
  }
  v352 = *(unsigned int *)(a1 + 1852);
  if ((_DWORD)v352)
  {
    v353 = 0;
    v354 = *(_QWORD *)(a1 + 1960);
    do
    {
      v355 = *(_QWORD *)(v354 + 8 * v353);
      if (v355)
      {
        v356 = *(_QWORD *)(a1 + 1896);
        v357 = *(_QWORD *)(a1 + 1888);
        v358 = *(_QWORD *)(a1 + 1920);
        v359 = 16 * v355;
        v360 = (uint64_t *)(*(_QWORD *)(a1 + 1928) + 16 * (*(_DWORD *)(a1 + 1952) * v353) + 8);
        do
        {
          v362 = ((v356 - v357) << 6) - 1;
          if (v356 == v357)
            v362 = 0;
          v363 = *(_QWORD *)(a1 + 1912) + v358;
          if (v362 == v363)
          {
            sub_20EDB36DC(a1 + 1880);
            v357 = *(_QWORD *)(a1 + 1888);
            v356 = *(_QWORD *)(a1 + 1896);
            v363 = *(_QWORD *)(a1 + 1920) + *(_QWORD *)(a1 + 1912);
          }
          v361 = *v360;
          v360 += 2;
          *(_QWORD *)(*(_QWORD *)(v357 + ((v363 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v363 & 0x1FF)) = v361;
          v358 = *(_QWORD *)(a1 + 1920) + 1;
          *(_QWORD *)(a1 + 1920) = v358;
          v359 -= 16;
        }
        while (v359);
        v354 = *(_QWORD *)(a1 + 1960);
        v352 = *(unsigned int *)(a1 + 1852);
      }
      *(_QWORD *)(v354 + 8 * v353++) = 0;
    }
    while (v353 < v352);
  }
  v364 = *(unsigned int *)(a1 + 2860);
  if ((_DWORD)v364)
  {
    v365 = 0;
    v366 = *(_QWORD *)(a1 + 2968);
    do
    {
      v367 = *(_QWORD *)(v366 + 8 * v365);
      if (v367)
      {
        v368 = *(_QWORD *)(a1 + 2904);
        v369 = *(_QWORD *)(a1 + 2896);
        v370 = *(_QWORD *)(a1 + 2928);
        v371 = 16 * v367;
        v372 = (uint64_t *)(*(_QWORD *)(a1 + 2936) + 16 * (*(_DWORD *)(a1 + 2960) * v365) + 8);
        do
        {
          v374 = ((v368 - v369) << 6) - 1;
          if (v368 == v369)
            v374 = 0;
          v375 = *(_QWORD *)(a1 + 2920) + v370;
          if (v374 == v375)
          {
            sub_20EDB36DC(a1 + 2888);
            v369 = *(_QWORD *)(a1 + 2896);
            v368 = *(_QWORD *)(a1 + 2904);
            v375 = *(_QWORD *)(a1 + 2928) + *(_QWORD *)(a1 + 2920);
          }
          v373 = *v372;
          v372 += 2;
          *(_QWORD *)(*(_QWORD *)(v369 + ((v375 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v375 & 0x1FF)) = v373;
          v370 = *(_QWORD *)(a1 + 2928) + 1;
          *(_QWORD *)(a1 + 2928) = v370;
          v371 -= 16;
        }
        while (v371);
        v366 = *(_QWORD *)(a1 + 2968);
        v364 = *(unsigned int *)(a1 + 2860);
      }
      *(_QWORD *)(v366 + 8 * v365++) = 0;
    }
    while (v365 < v364);
  }
  v376 = *(unsigned int *)(a1 + 3868);
  if ((_DWORD)v376)
  {
    v377 = 0;
    v378 = *(_QWORD *)(a1 + 3976);
    do
    {
      v379 = *(_QWORD *)(v378 + 8 * v377);
      if (v379)
      {
        v380 = *(_QWORD *)(a1 + 3912);
        v381 = *(_QWORD *)(a1 + 3904);
        v382 = *(_QWORD *)(a1 + 3936);
        v383 = 16 * v379;
        v384 = (uint64_t *)(*(_QWORD *)(a1 + 3944) + 16 * (*(_DWORD *)(a1 + 3968) * v377) + 8);
        do
        {
          v386 = ((v380 - v381) << 6) - 1;
          if (v380 == v381)
            v386 = 0;
          v387 = *(_QWORD *)(a1 + 3928) + v382;
          if (v386 == v387)
          {
            sub_20EDB36DC(a1 + 3896);
            v381 = *(_QWORD *)(a1 + 3904);
            v380 = *(_QWORD *)(a1 + 3912);
            v387 = *(_QWORD *)(a1 + 3936) + *(_QWORD *)(a1 + 3928);
          }
          v385 = *v384;
          v384 += 2;
          *(_QWORD *)(*(_QWORD *)(v381 + ((v387 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v387 & 0x1FF)) = v385;
          v382 = *(_QWORD *)(a1 + 3936) + 1;
          *(_QWORD *)(a1 + 3936) = v382;
          v383 -= 16;
        }
        while (v383);
        v378 = *(_QWORD *)(a1 + 3976);
        v376 = *(unsigned int *)(a1 + 3868);
      }
      *(_QWORD *)(v378 + 8 * v377++) = 0;
    }
    while (v377 < v376);
  }
  v940 = v328 << 32;
  v388 = (v312 + 4 * v917);
  v389 = *(unsigned int *)(a1 + 4876);
  v390 = (v936 + 4 * v916);
  if ((_DWORD)v389)
  {
    v391 = 0;
    v392 = *(_QWORD *)(a1 + 4984);
    do
    {
      v393 = *(_QWORD *)(v392 + 8 * v391);
      if (v393)
      {
        v394 = *(_QWORD *)(a1 + 4920);
        v395 = *(_QWORD *)(a1 + 4912);
        v396 = *(_QWORD *)(a1 + 4944);
        v397 = 16 * v393;
        v398 = (uint64_t *)(*(_QWORD *)(a1 + 4952) + 16 * (*(_DWORD *)(a1 + 4976) * v391) + 8);
        do
        {
          v400 = ((v394 - v395) << 6) - 1;
          if (v394 == v395)
            v400 = 0;
          v401 = *(_QWORD *)(a1 + 4936) + v396;
          if (v400 == v401)
          {
            sub_20EDB36DC(a1 + 4904);
            v395 = *(_QWORD *)(a1 + 4912);
            v394 = *(_QWORD *)(a1 + 4920);
            v401 = *(_QWORD *)(a1 + 4944) + *(_QWORD *)(a1 + 4936);
          }
          v399 = *v398;
          v398 += 2;
          *(_QWORD *)(*(_QWORD *)(v395 + ((v401 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v401 & 0x1FF)) = v399;
          v396 = *(_QWORD *)(a1 + 4944) + 1;
          *(_QWORD *)(a1 + 4944) = v396;
          v397 -= 16;
        }
        while (v397);
        v392 = *(_QWORD *)(a1 + 4984);
        v389 = *(unsigned int *)(a1 + 4876);
      }
      *(_QWORD *)(v392 + 8 * v391++) = 0;
    }
    while (v391 < v389);
  }
  sub_20F5A9BBC(a1 + 5872, (uint64_t *)(a1 + 8872), v388 | ((unint64_t)v390 << 32));
  sub_20F5AA30C(a1 + 6880, (uint64_t *)(a1 + 8872), v940 | v388);
  v402 = *(unsigned int *)(a1 + 700);
  if ((_DWORD)v402)
  {
    v403 = 0;
    v404 = *(_QWORD *)(a1 + 808);
    do
    {
      v405 = *(_QWORD *)(v404 + 8 * v403);
      if (v405)
      {
        v406 = *(_QWORD *)(a1 + 744);
        v407 = *(_QWORD *)(a1 + 736);
        v408 = *(_QWORD *)(a1 + 768);
        v409 = 16 * v405;
        v410 = (uint64_t *)(*(_QWORD *)(a1 + 776) + 16 * (*(_DWORD *)(a1 + 800) * v403) + 8);
        do
        {
          v412 = ((v406 - v407) << 6) - 1;
          if (v406 == v407)
            v412 = 0;
          v413 = *(_QWORD *)(a1 + 760) + v408;
          if (v412 == v413)
          {
            sub_20EDB36DC(a1 + 728);
            v407 = *(_QWORD *)(a1 + 736);
            v406 = *(_QWORD *)(a1 + 744);
            v413 = *(_QWORD *)(a1 + 768) + *(_QWORD *)(a1 + 760);
          }
          v411 = *v410;
          v410 += 2;
          *(_QWORD *)(*(_QWORD *)(v407 + ((v413 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v413 & 0x1FF)) = v411;
          v408 = *(_QWORD *)(a1 + 768) + 1;
          *(_QWORD *)(a1 + 768) = v408;
          v409 -= 16;
        }
        while (v409);
        v404 = *(_QWORD *)(a1 + 808);
        v402 = *(unsigned int *)(a1 + 700);
      }
      *(_QWORD *)(v404 + 8 * v403++) = 0;
    }
    while (v403 < v402);
  }
  v414 = *(unsigned int *)(a1 + 1708);
  if ((_DWORD)v414)
  {
    v415 = 0;
    v416 = *(_QWORD *)(a1 + 1816);
    do
    {
      v417 = *(_QWORD *)(v416 + 8 * v415);
      if (v417)
      {
        v418 = *(_QWORD *)(a1 + 1752);
        v419 = *(_QWORD *)(a1 + 1744);
        v420 = *(_QWORD *)(a1 + 1776);
        v421 = 16 * v417;
        v422 = (uint64_t *)(*(_QWORD *)(a1 + 1784) + 16 * (*(_DWORD *)(a1 + 1808) * v415) + 8);
        do
        {
          v424 = ((v418 - v419) << 6) - 1;
          if (v418 == v419)
            v424 = 0;
          v425 = *(_QWORD *)(a1 + 1768) + v420;
          if (v424 == v425)
          {
            sub_20EDB36DC(a1 + 1736);
            v419 = *(_QWORD *)(a1 + 1744);
            v418 = *(_QWORD *)(a1 + 1752);
            v425 = *(_QWORD *)(a1 + 1776) + *(_QWORD *)(a1 + 1768);
          }
          v423 = *v422;
          v422 += 2;
          *(_QWORD *)(*(_QWORD *)(v419 + ((v425 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v425 & 0x1FF)) = v423;
          v420 = *(_QWORD *)(a1 + 1776) + 1;
          *(_QWORD *)(a1 + 1776) = v420;
          v421 -= 16;
        }
        while (v421);
        v416 = *(_QWORD *)(a1 + 1816);
        v414 = *(unsigned int *)(a1 + 1708);
      }
      *(_QWORD *)(v416 + 8 * v415++) = 0;
    }
    while (v415 < v414);
  }
  v426 = *(unsigned int *)(a1 + 2716);
  if ((_DWORD)v426)
  {
    v427 = 0;
    v428 = *(_QWORD *)(a1 + 2824);
    do
    {
      v429 = *(_QWORD *)(v428 + 8 * v427);
      if (v429)
      {
        v430 = *(_QWORD *)(a1 + 2760);
        v431 = *(_QWORD *)(a1 + 2752);
        v432 = *(_QWORD *)(a1 + 2784);
        v433 = 16 * v429;
        v434 = (uint64_t *)(*(_QWORD *)(a1 + 2792) + 16 * (*(_DWORD *)(a1 + 2816) * v427) + 8);
        do
        {
          v436 = ((v430 - v431) << 6) - 1;
          if (v430 == v431)
            v436 = 0;
          v437 = *(_QWORD *)(a1 + 2776) + v432;
          if (v436 == v437)
          {
            sub_20EDB36DC(a1 + 2744);
            v431 = *(_QWORD *)(a1 + 2752);
            v430 = *(_QWORD *)(a1 + 2760);
            v437 = *(_QWORD *)(a1 + 2784) + *(_QWORD *)(a1 + 2776);
          }
          v435 = *v434;
          v434 += 2;
          *(_QWORD *)(*(_QWORD *)(v431 + ((v437 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v437 & 0x1FF)) = v435;
          v432 = *(_QWORD *)(a1 + 2784) + 1;
          *(_QWORD *)(a1 + 2784) = v432;
          v433 -= 16;
        }
        while (v433);
        v428 = *(_QWORD *)(a1 + 2824);
        v426 = *(unsigned int *)(a1 + 2716);
      }
      *(_QWORD *)(v428 + 8 * v427++) = 0;
    }
    while (v427 < v426);
  }
  v438 = v390 << 32;
  v439 = *(unsigned int *)(a1 + 3724);
  if ((_DWORD)v439)
  {
    v440 = 0;
    v441 = *(_QWORD *)(a1 + 3832);
    do
    {
      v442 = *(_QWORD *)(v441 + 8 * v440);
      if (v442)
      {
        v443 = *(_QWORD *)(a1 + 3768);
        v444 = *(_QWORD *)(a1 + 3760);
        v445 = *(_QWORD *)(a1 + 3792);
        v446 = 16 * v442;
        v447 = (uint64_t *)(*(_QWORD *)(a1 + 3800) + 16 * (*(_DWORD *)(a1 + 3824) * v440) + 8);
        do
        {
          v449 = ((v443 - v444) << 6) - 1;
          if (v443 == v444)
            v449 = 0;
          v450 = *(_QWORD *)(a1 + 3784) + v445;
          if (v449 == v450)
          {
            sub_20EDB36DC(a1 + 3752);
            v444 = *(_QWORD *)(a1 + 3760);
            v443 = *(_QWORD *)(a1 + 3768);
            v450 = *(_QWORD *)(a1 + 3792) + *(_QWORD *)(a1 + 3784);
          }
          v448 = *v447;
          v447 += 2;
          *(_QWORD *)(*(_QWORD *)(v444 + ((v450 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v450 & 0x1FF)) = v448;
          v445 = *(_QWORD *)(a1 + 3792) + 1;
          *(_QWORD *)(a1 + 3792) = v445;
          v446 -= 16;
        }
        while (v446);
        v441 = *(_QWORD *)(a1 + 3832);
        v439 = *(unsigned int *)(a1 + 3724);
      }
      *(_QWORD *)(v441 + 8 * v440++) = 0;
    }
    while (v440 < v439);
  }
  sub_20F5A9BBC(a1 + 4720, (uint64_t *)(a1 + 8872), v312 | ((unint64_t)v936 << 32));
  sub_20F5AA938(a1 + 5728, (uint64_t *)(a1 + 8872), v438 | v312);
  sub_20F5AA30C(a1 + 6736, (uint64_t *)(a1 + 8872), v940 | v312);
  v451 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v451)
  {
    v452 = 0;
    v453 = *(_QWORD *)(a1 + 664);
    do
    {
      v454 = *(_QWORD *)(v453 + 8 * v452);
      if (v454)
      {
        v455 = *(_QWORD *)(a1 + 600);
        v456 = *(_QWORD *)(a1 + 592);
        v457 = *(_QWORD *)(a1 + 624);
        v458 = 16 * v454;
        v459 = (uint64_t *)(*(_QWORD *)(a1 + 632) + 16 * (*(_DWORD *)(a1 + 656) * v452) + 8);
        do
        {
          v461 = ((v455 - v456) << 6) - 1;
          if (v455 == v456)
            v461 = 0;
          v462 = *(_QWORD *)(a1 + 616) + v457;
          if (v461 == v462)
          {
            sub_20EDB36DC(a1 + 584);
            v456 = *(_QWORD *)(a1 + 592);
            v455 = *(_QWORD *)(a1 + 600);
            v462 = *(_QWORD *)(a1 + 624) + *(_QWORD *)(a1 + 616);
          }
          v460 = *v459;
          v459 += 2;
          *(_QWORD *)(*(_QWORD *)(v456 + ((v462 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v462 & 0x1FF)) = v460;
          v457 = *(_QWORD *)(a1 + 624) + 1;
          *(_QWORD *)(a1 + 624) = v457;
          v458 -= 16;
        }
        while (v458);
        v453 = *(_QWORD *)(a1 + 664);
        v451 = *(unsigned int *)(a1 + 556);
      }
      *(_QWORD *)(v453 + 8 * v452++) = 0;
    }
    while (v452 < v451);
  }
  v463 = *(unsigned int *)(a1 + 1564);
  if ((_DWORD)v463)
  {
    v464 = 0;
    v465 = *(_QWORD *)(a1 + 1672);
    do
    {
      v466 = *(_QWORD *)(v465 + 8 * v464);
      if (v466)
      {
        v467 = *(_QWORD *)(a1 + 1608);
        v468 = *(_QWORD *)(a1 + 1600);
        v469 = *(_QWORD *)(a1 + 1632);
        v470 = 16 * v466;
        v471 = (uint64_t *)(*(_QWORD *)(a1 + 1640) + 16 * (*(_DWORD *)(a1 + 1664) * v464) + 8);
        do
        {
          v473 = ((v467 - v468) << 6) - 1;
          if (v467 == v468)
            v473 = 0;
          v474 = *(_QWORD *)(a1 + 1624) + v469;
          if (v473 == v474)
          {
            sub_20EDB36DC(a1 + 1592);
            v468 = *(_QWORD *)(a1 + 1600);
            v467 = *(_QWORD *)(a1 + 1608);
            v474 = *(_QWORD *)(a1 + 1632) + *(_QWORD *)(a1 + 1624);
          }
          v472 = *v471;
          v471 += 2;
          *(_QWORD *)(*(_QWORD *)(v468 + ((v474 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v474 & 0x1FF)) = v472;
          v469 = *(_QWORD *)(a1 + 1632) + 1;
          *(_QWORD *)(a1 + 1632) = v469;
          v470 -= 16;
        }
        while (v470);
        v465 = *(_QWORD *)(a1 + 1672);
        v463 = *(unsigned int *)(a1 + 1564);
      }
      *(_QWORD *)(v465 + 8 * v464++) = 0;
    }
    while (v464 < v463);
  }
  v475 = v936 << 32;
  v476 = *(unsigned int *)(a1 + 2572);
  if ((_DWORD)v476)
  {
    v477 = 0;
    v478 = *(_QWORD *)(a1 + 2680);
    do
    {
      v479 = *(_QWORD *)(v478 + 8 * v477);
      if (v479)
      {
        v480 = *(_QWORD *)(a1 + 2616);
        v481 = *(_QWORD *)(a1 + 2608);
        v482 = *(_QWORD *)(a1 + 2640);
        v483 = 16 * v479;
        v484 = (uint64_t *)(*(_QWORD *)(a1 + 2648) + 16 * (*(_DWORD *)(a1 + 2672) * v477) + 8);
        do
        {
          v486 = ((v480 - v481) << 6) - 1;
          if (v480 == v481)
            v486 = 0;
          v487 = *(_QWORD *)(a1 + 2632) + v482;
          if (v486 == v487)
          {
            sub_20EDB36DC(a1 + 2600);
            v481 = *(_QWORD *)(a1 + 2608);
            v480 = *(_QWORD *)(a1 + 2616);
            v487 = *(_QWORD *)(a1 + 2640) + *(_QWORD *)(a1 + 2632);
          }
          v485 = *v484;
          v484 += 2;
          *(_QWORD *)(*(_QWORD *)(v481 + ((v487 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v487 & 0x1FF)) = v485;
          v482 = *(_QWORD *)(a1 + 2640) + 1;
          *(_QWORD *)(a1 + 2640) = v482;
          v483 -= 16;
        }
        while (v483);
        v478 = *(_QWORD *)(a1 + 2680);
        v476 = *(unsigned int *)(a1 + 2572);
      }
      *(_QWORD *)(v478 + 8 * v477++) = 0;
    }
    while (v477 < v476);
  }
  sub_20F5AAFC4(a1 + 3568, (uint64_t *)(a1 + 8872), v918 | ((unint64_t)v931[0] << 32));
  sub_20F5AB76C(a1 + 4576, (uint64_t *)(a1 + 8872), v475 | v918);
  sub_20F5AB76C(a1 + 5584, (uint64_t *)(a1 + 8872), v438 | v918);
  sub_20F5ABE20(a1 + 6592, (uint64_t *)(a1 + 8872), v940 | v918);
  v488 = *(unsigned int *)(a1 + 412);
  if ((_DWORD)v488)
  {
    v489 = 0;
    v490 = *(_QWORD *)(a1 + 520);
    do
    {
      v491 = *(_QWORD *)(v490 + 8 * v489);
      if (v491)
      {
        v492 = *(_QWORD *)(a1 + 448);
        v493 = *(_QWORD *)(a1 + 456);
        v494 = *(_QWORD *)(a1 + 480);
        v495 = 16 * v491;
        v496 = (uint64_t *)(*(_QWORD *)(a1 + 488) + 16 * (*(_DWORD *)(a1 + 512) * v489) + 8);
        do
        {
          v498 = ((v493 - v492) << 6) - 1;
          if (v493 == v492)
            v498 = 0;
          v499 = *(_QWORD *)(a1 + 472) + v494;
          if (v498 == v499)
          {
            sub_20EDB36DC(a1 + 440);
            v492 = *(_QWORD *)(a1 + 448);
            v493 = *(_QWORD *)(a1 + 456);
            v499 = *(_QWORD *)(a1 + 480) + *(_QWORD *)(a1 + 472);
          }
          v497 = *v496;
          v496 += 2;
          *(_QWORD *)(*(_QWORD *)(v492 + ((v499 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v499 & 0x1FF)) = v497;
          v494 = *(_QWORD *)(a1 + 480) + 1;
          *(_QWORD *)(a1 + 480) = v494;
          v495 -= 16;
        }
        while (v495);
        v490 = *(_QWORD *)(a1 + 520);
        v488 = *(unsigned int *)(a1 + 412);
      }
      *(_QWORD *)(v490 + 8 * v489++) = 0;
    }
    while (v489 < v488);
  }
  v500 = *(_QWORD *)v931 << 32;
  v501 = *(unsigned int *)(a1 + 1420);
  if ((_DWORD)v501)
  {
    v502 = 0;
    v503 = *(_QWORD *)(a1 + 1528);
    do
    {
      v504 = *(_QWORD *)(v503 + 8 * v502);
      if (v504)
      {
        v505 = *(_QWORD *)(a1 + 1464);
        v506 = *(_QWORD *)(a1 + 1456);
        v507 = *(_QWORD *)(a1 + 1488);
        v508 = 16 * v504;
        v509 = (uint64_t *)(*(_QWORD *)(a1 + 1496) + 16 * (*(_DWORD *)(a1 + 1520) * v502) + 8);
        do
        {
          v511 = ((v505 - v506) << 6) - 1;
          if (v505 == v506)
            v511 = 0;
          v512 = *(_QWORD *)(a1 + 1480) + v507;
          if (v511 == v512)
          {
            sub_20EDB36DC(a1 + 1448);
            v506 = *(_QWORD *)(a1 + 1456);
            v505 = *(_QWORD *)(a1 + 1464);
            v512 = *(_QWORD *)(a1 + 1488) + *(_QWORD *)(a1 + 1480);
          }
          v510 = *v509;
          v509 += 2;
          *(_QWORD *)(*(_QWORD *)(v506 + ((v512 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v512 & 0x1FF)) = v510;
          v507 = *(_QWORD *)(a1 + 1488) + 1;
          *(_QWORD *)(a1 + 1488) = v507;
          v508 -= 16;
        }
        while (v508);
        v503 = *(_QWORD *)(a1 + 1528);
        v501 = *(unsigned int *)(a1 + 1420);
      }
      *(_QWORD *)(v503 + 8 * v502++) = 0;
    }
    while (v502 < v501);
  }
  v513 = *(_QWORD *)v921 << 32;
  sub_20F5AC4C0(a1 + 2416, (uint64_t *)(a1 + 8872), v922[0] | ((unint64_t)v921[0] << 32));
  sub_20F5ACA98(a1 + 3424, (uint64_t *)(a1 + 8872), v500 | *(_QWORD *)v922);
  sub_20F5AD134(a1 + 4432, (uint64_t *)(a1 + 8872), v475 | *(_QWORD *)v922);
  sub_20F5AD134(a1 + 5440, (uint64_t *)(a1 + 8872), v438 | *(_QWORD *)v922);
  sub_20F5AD788(a1 + 6448, (uint64_t *)(a1 + 8872), v940 | *(_QWORD *)v922);
  v514 = *(unsigned int *)(a1 + 268);
  if ((_DWORD)v514)
  {
    v515 = 0;
    v516 = *(_QWORD *)(a1 + 376);
    do
    {
      v517 = *(_QWORD *)(v516 + 8 * v515);
      if (v517)
      {
        v518 = *(_QWORD *)(a1 + 304);
        v519 = *(_QWORD *)(a1 + 312);
        v520 = *(_QWORD *)(a1 + 336);
        v521 = 16 * v517;
        v522 = (uint64_t *)(*(_QWORD *)(a1 + 344) + 16 * (*(_DWORD *)(a1 + 368) * v515) + 8);
        do
        {
          v524 = ((v519 - v518) << 6) - 1;
          if (v519 == v518)
            v524 = 0;
          v525 = *(_QWORD *)(a1 + 328) + v520;
          if (v524 == v525)
          {
            sub_20EDB36DC(a1 + 296);
            v518 = *(_QWORD *)(a1 + 304);
            v519 = *(_QWORD *)(a1 + 312);
            v525 = *(_QWORD *)(a1 + 336) + *(_QWORD *)(a1 + 328);
          }
          v523 = *v522;
          v522 += 2;
          *(_QWORD *)(*(_QWORD *)(v518 + ((v525 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v525 & 0x1FF)) = v523;
          v520 = *(_QWORD *)(a1 + 336) + 1;
          *(_QWORD *)(a1 + 336) = v520;
          v521 -= 16;
        }
        while (v521);
        v516 = *(_QWORD *)(a1 + 376);
        v514 = *(unsigned int *)(a1 + 268);
      }
      *(_QWORD *)(v516 + 8 * v515++) = 0;
    }
    while (v515 < v514);
  }
  sub_20F5ADDB8(a1 + 1264, (uint64_t *)(a1 + 8872), v926[0] | ((unint64_t)v924[0] << 32));
  sub_20F5AE684(a1 + 2272, (uint64_t *)(a1 + 8872), v513 | *(_QWORD *)v926);
  sub_20F5AECB8(a1 + 3280, (uint64_t *)(a1 + 8872), v500 | *(_QWORD *)v926);
  sub_20F5AF400(a1 + 4288, (uint64_t *)(a1 + 8872), v475 | *(_QWORD *)v926);
  sub_20F5AF400(a1 + 5296, (uint64_t *)(a1 + 8872), v438 | *(_QWORD *)v926);
  sub_20F5AFB00(a1 + 6304, (uint64_t *)(a1 + 8872), v940 | *(_QWORD *)v926);
  sub_20F5AAFC4(a1 + 112, (uint64_t *)(a1 + 8872), 0);
  sub_20F5B019C(a1 + 1120, (uint64_t *)(a1 + 8872), *(_QWORD *)v924 << 32);
  sub_20F5B08EC(a1 + 2128, (uint64_t *)(a1 + 8872), v513);
  sub_20F5B0F2C(a1 + 3136, (uint64_t *)(a1 + 8872), v500);
  sub_20F5AB76C(a1 + 4144, (uint64_t *)(a1 + 8872), v475);
  sub_20F5AB76C(a1 + 5152, (uint64_t *)(a1 + 8872), v438);
  sub_20F5ABE20(a1 + 6160, (uint64_t *)(a1 + 8872), v940);
  v526 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v527 = (unsigned int **)(a1 + 8920);
  sub_20F59867C(v526, v942, a1 + 8920);
  sub_20F596D48(v937, v920 + 48);
  v528 = 0;
  v529 = 0;
  v919 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  while (2)
  {
    v530 = v527[3 * v528];
    v941 = &v527[3 * v528];
    v941[1] = v530;
    v531 = &v937[3 * v528];
    v532 = (char *)*v531;
    v534 = (char **)(v531 + 1);
    v533 = v531[1];
    if (*v531 != v533)
    {
      v535 = v533 - (_QWORD)v532;
      v536 = (v533 - (uint64_t)v532) >> 2;
      v537 = &v527[3 * v528];
      v539 = v537[2];
      v538 = v537 + 2;
      *(_QWORD *)v932 = v538;
      if (v536 > v539 - v530)
      {
        if ((v535 & 0x8000000000000000) != 0)
LABEL_1007:
          sub_20E867F44();
        v540 = (unsigned int *)operator new(v535);
        *v941 = v540;
        v941[1] = v540;
        *v538 = &v540[v536];
        if (v530)
        {
          operator delete(v530);
          v536 = (uint64_t)&(*v534)[-*v531] >> 2;
        }
      }
      *(_QWORD *)v923 = v528;
      v541 = (uint64_t)&v919[3 * v528 + 941];
      v542 = *(_BYTE **)(v541 + 8);
      v927 = (char **)v541;
      v928 = (char **)(v541 + 8);
      v543 = *(char **)v541;
      v544 = (uint64_t)&v542[-*(_QWORD *)v541];
      v545 = v544 >> 2;
      v546 = v536 + (v544 >> 2);
      v547 = (char **)(v541 + 16);
      v925 = v529;
      if (v546 <= (uint64_t)(*(_QWORD *)(v541 + 16) - *(_QWORD *)v541) >> 2)
      {
        v550 = *(char **)(v541 + 8);
        v551 = *(char **)v541;
        v553 = (char **)(v541 + 8);
      }
      else
      {
        if (v546 >> 62)
          sub_20E867F44();
        v548 = 4 * v546;
        v549 = (char *)operator new(4 * v546);
        v550 = &v549[4 * v545];
        v551 = v550;
        if (v542 != v543)
        {
          v552 = v542 - v543 - 4;
          if (v552 < 0x2C)
          {
            v551 = &v549[4 * v545];
            goto LABEL_576;
          }
          v551 = &v549[4 * v545];
          if ((unint64_t)(&v542[-v544] - v549) < 0x20)
            goto LABEL_1015;
          v554 = (v552 >> 2) + 1;
          v555 = 4 * (v554 & 0x7FFFFFFFFFFFFFF8);
          v556 = &v542[-v555];
          v551 = &v550[-v555];
          v557 = &v549[4 * v545 - 16];
          v558 = (__int128 *)(v542 - 16);
          v559 = v554 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v560 = *v558;
            *((_OWORD *)v557 - 1) = *(v558 - 1);
            *(_OWORD *)v557 = v560;
            v557 -= 32;
            v558 -= 2;
            v559 -= 8;
          }
          while (v559);
          v542 = v556;
          if (v554 != (v554 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1015:
            do
            {
LABEL_576:
              v561 = *((_DWORD *)v542 - 1);
              v542 -= 4;
              *((_DWORD *)v551 - 1) = v561;
              v551 -= 4;
            }
            while (v542 != v543);
          }
        }
        v562 = &v549[v548];
        v541 = (uint64_t)v927;
        v553 = v928;
        *v927 = v551;
        *v928 = v550;
        *v547 = v562;
        if (v543)
        {
          operator delete(v543);
          v551 = *v927;
          v550 = *v928;
        }
      }
      v563 = (char *)*v531;
      v944 = *v534;
      v565 = *(uint64_t **)v932;
      v564 = (uint64_t *)(v941 + 1);
      v566 = 0;
      if (v551 == v550)
        goto LABEL_587;
      do
      {
        if (*(_DWORD *)v551 > *(_DWORD *)v563)
        {
          v550 = v551;
          break;
        }
        v551 += 4;
        ++v566;
      }
      while (v551 != v550);
LABEL_587:
      while (2)
      {
        if (v563 == v944)
        {
          v529 = v925 | (*v941 != (unsigned int *)*v564);
          v527 = (unsigned int **)(a1 + 8920);
          v528 = *(_QWORD *)v923;
          goto LABEL_560;
        }
        if (v550 != *v553 && *(_DWORD *)v563 == *(_DWORD *)v550)
          goto LABEL_586;
        v568 = (char *)*v564;
        v569 = *v565;
        if (*v564 < (unint64_t)*v565)
        {
          *(_DWORD *)v568 = v566;
          v567 = (uint64_t)(v568 + 4);
          goto LABEL_585;
        }
        v570 = (char *)*v941;
        v571 = v568 - (char *)*v941;
        v572 = v571 >> 2;
        v573 = (v571 >> 2) + 1;
        if (v573 >> 62)
          goto LABEL_1007;
        v574 = v569 - (_QWORD)v570;
        if (v574 >> 1 > v573)
          v573 = v574 >> 1;
        if ((unint64_t)v574 >= 0x7FFFFFFFFFFFFFFCLL)
          v575 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v575 = v573;
        if (v575)
        {
          if (v575 >> 62)
            sub_20E877A38();
          v576 = operator new(4 * v575);
          v577 = (unsigned int *)&v576[4 * v572];
          *v577 = v566;
          v567 = (uint64_t)(v577 + 1);
          v578 = v568 - v570;
          if (v568 != v570)
          {
LABEL_600:
            v579 = v578 - 4;
            if (v579 < 0x2C)
            {
              v565 = *(uint64_t **)v932;
              goto LABEL_608;
            }
            v580 = v568 - &v576[v571];
            v565 = *(uint64_t **)v932;
            if (v580 < 0x20)
              goto LABEL_1016;
            v581 = (v579 >> 2) + 1;
            v582 = 4 * (v581 & 0x7FFFFFFFFFFFFFF8);
            v583 = &v568[-v582];
            v577 = (unsigned int *)((char *)v577 - v582);
            v584 = &v576[4 * v572 - 16];
            v585 = v568 - 16;
            v586 = v581 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v587 = *(_OWORD *)v585;
              *(v584 - 1) = *((_OWORD *)v585 - 1);
              *v584 = v587;
              v584 -= 2;
              v585 -= 32;
              v586 -= 8;
            }
            while (v586);
            v568 = v583;
            if (v581 != (v581 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_1016:
              do
              {
LABEL_608:
                v588 = *((_DWORD *)v568 - 1);
                v568 -= 4;
                *--v577 = v588;
              }
              while (v568 != v570);
            }
LABEL_609:
            *v941 = v577;
            v564 = (uint64_t *)(v941 + 1);
            v941[1] = (unsigned int *)v567;
            *v565 = (uint64_t)&v576[4 * v575];
            if (v570)
              operator delete(v570);
            v541 = (uint64_t)v927;
            v553 = v928;
LABEL_585:
            *v564 = v567;
            v550 = sub_20EDB3C7C((void **)v541, v550, v563);
            v563 += 4;
LABEL_586:
            v550 += 4;
            ++v566;
            continue;
          }
        }
        else
        {
          v576 = 0;
          v577 = (unsigned int *)(4 * v572);
          *(_DWORD *)(4 * v572) = v566;
          v567 = 4 * v572 + 4;
          v578 = v568 - v570;
          if (v568 != v570)
            goto LABEL_600;
        }
        break;
      }
      v565 = *(uint64_t **)v932;
      goto LABEL_609;
    }
LABEL_560:
    if (++v528 != 7)
      continue;
    break;
  }
  if ((v529 & 1) == 0)
    return 0;
  sub_20F5B194C((uint64_t)(v919 + 10), v527, (uint64_t)v527);
  v968 = 0;
  v966 = 0u;
  v967 = 0u;
  v964 = 0u;
  v965 = 0u;
  v962 = 0u;
  v963 = 0u;
  v960 = 0u;
  v961 = 0u;
  v958 = 0u;
  v959 = 0u;
  v589 = *(char **)(a1 + 8928);
  v590 = *(char **)(a1 + 8920);
  v591 = v589 - v590;
  if (v589 != v590)
  {
    if ((unint64_t)v591 < 0x7FFFFFFFFFFFFFFDLL)
    {
      v592 = (char *)operator new(2 * v591);
      *(_QWORD *)&v958 = v592;
      *((_QWORD *)&v958 + 1) = v592;
      *(_QWORD *)&v959 = &v592[8 * (v591 >> 2)];
      while (1)
      {
        while (1)
        {
          v594 = (6 * *(_DWORD *)v590);
          v595 = (char *)v958;
          if ((char *)v958 == v592 || *((_DWORD *)v592 - 1) != (_DWORD)v594)
            break;
          *((_DWORD *)v592 - 1) = v594 + 6;
          v590 += 4;
          if (v590 == v589)
            goto LABEL_651;
        }
        v596 = (v594 + 6);
        if ((unint64_t)v592 < (unint64_t)v959)
        {
          *(_QWORD *)v592 = v594 | (v596 << 32);
          v593 = (uint64_t)(v592 + 8);
          goto LABEL_617;
        }
        v597 = &v592[-v958];
        v598 = (uint64_t)&v592[-v958] >> 3;
        v599 = v598 + 1;
        if ((unint64_t)(v598 + 1) >> 61)
          goto LABEL_1011;
        v600 = v959 - v958;
        if ((uint64_t)(v959 - v958) >> 2 > v599)
          v599 = v600 >> 2;
        v601 = (unint64_t)v600 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v599;
        if (!v601)
          break;
        if (v601 >> 61)
LABEL_1009:
          sub_20E877A38();
        v602 = (char *)operator new(8 * v601);
        v603 = &v602[8 * v598];
        *(_QWORD *)v603 = v594 | (v596 << 32);
        v593 = (uint64_t)(v603 + 8);
        if (v595 == v592)
        {
LABEL_638:
          *(_QWORD *)&v958 = v603;
          *(_QWORD *)&v959 = &v602[8 * v601];
          if (v592)
            goto LABEL_639;
LABEL_617:
          *((_QWORD *)&v958 + 1) = v593;
          v592 = (char *)v593;
          v590 += 4;
          if (v590 == v589)
            goto LABEL_651;
        }
        else
        {
LABEL_632:
          if ((unint64_t)(v597 - 8) < 0x168)
          {
            v604 = v592;
            goto LABEL_634;
          }
          v606 = (v592 - 8 - v595) & 0xFFFFFFFFFFFFFFF8;
          if (&v597[(_QWORD)v602 - 8 - v606] > &v597[(_QWORD)v602 - 8])
          {
            v604 = v592;
            do
            {
LABEL_634:
              v605 = *((_QWORD *)v604 - 1);
              v604 -= 8;
              *((_QWORD *)v603 - 1) = v605;
              v603 -= 8;
            }
            while (v604 != v595);
            goto LABEL_635;
          }
          if (&v592[-v606 - 8] > v592 - 8)
          {
            v604 = v592;
            goto LABEL_634;
          }
          if ((unint64_t)(v595 - v602) < 0x20)
          {
            v604 = v592;
            goto LABEL_634;
          }
          v607 = ((unint64_t)(v597 - 8) >> 3) + 1;
          v608 = 8 * (v607 & 0x3FFFFFFFFFFFFFFCLL);
          v604 = &v592[-v608];
          v603 -= v608;
          v609 = &v602[8 * v598 - 16];
          v610 = v592 - 16;
          v611 = v607 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v612 = *(_OWORD *)v610;
            *((_OWORD *)v609 - 1) = *((_OWORD *)v610 - 1);
            *(_OWORD *)v609 = v612;
            v609 -= 32;
            v610 -= 32;
            v611 -= 4;
          }
          while (v611);
          if (v607 != (v607 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_634;
LABEL_635:
          v592 = (char *)v958;
          *(_QWORD *)&v958 = v603;
          *(_QWORD *)&v959 = &v602[8 * v601];
          if (!v592)
            goto LABEL_617;
LABEL_639:
          operator delete(v592);
          *((_QWORD *)&v958 + 1) = v593;
          v592 = (char *)v593;
          v590 += 4;
          if (v590 == v589)
          {
LABEL_651:
            v613 = (_DWORD *)v958;
            goto LABEL_653;
          }
        }
      }
      v602 = 0;
      v603 = (char *)(8 * v598);
      *(_QWORD *)(8 * v598) = v594 | (v596 << 32);
      v593 = 8 * v598 + 8;
      if (v595 != v592)
        goto LABEL_632;
      goto LABEL_638;
    }
LABEL_1011:
    sub_20E92CED8();
  }
  v613 = 0;
  v592 = 0;
LABEL_653:
  if (((v592 - (char *)v613) & 0x7FFFFFFF0) != 0)
  {
    v614 = ((unint64_t)(v592 - (char *)v613) >> 3);
    v617 = *v613;
    v615 = v613 + 2;
    v616 = v617;
    v618 = v614 - 1;
    do
    {
      v616 += *v615 - *(v615 - 1);
      *v615 = v616;
      v615 += 2;
      --v618;
    }
    while (v618);
  }
  LODWORD(v946[0]) = 6 * (*((_DWORD *)v919 + 6) + ((*(_QWORD *)(a1 + 8928) - *(_QWORD *)(a1 + 8920)) >> 2));
  v619 = *(char **)(a1 + 8952);
  v620 = *(char **)(a1 + 8944);
  v621 = v619 - v620;
  v622 = (v619 - v620) >> 2;
  v623 = (char *)*((_QWORD *)&v959 + 1);
  if (v622 <= (uint64_t)(*((_QWORD *)&v960 + 1) - *((_QWORD *)&v959 + 1)) >> 3)
  {
    v628 = (char *)v960;
  }
  else
  {
    if (v621 > 0x7FFFFFFFFFFFFFFCLL)
      goto LABEL_1011;
    v624 = (char *)v960;
    v625 = (char *)operator new(2 * v621);
    v626 = &v625[8 * v622];
    v627 = v624 - v623;
    v628 = &v625[(v624 - v623) & 0xFFFFFFFFFFFFFFF8];
    v629 = v628;
    if (v624 != v623)
    {
      if ((unint64_t)(v627 - 8) < 0x58)
      {
        v629 = &v625[(v624 - v623) & 0xFFFFFFFFFFFFFFF8];
        goto LABEL_666;
      }
      v629 = &v625[(v624 - v623) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v624 - &v625[v627 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_1017;
      v630 = v627 >> 3;
      v631 = ((unint64_t)(v627 - 8) >> 3) + 1;
      v632 = 8 * (v631 & 0x3FFFFFFFFFFFFFFCLL);
      v633 = &v624[-v632];
      v629 = &v628[-v632];
      v634 = &v625[8 * v630 - 16];
      v635 = v624 - 16;
      v636 = v631 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v637 = *(_OWORD *)v635;
        *((_OWORD *)v634 - 1) = *((_OWORD *)v635 - 1);
        *(_OWORD *)v634 = v637;
        v634 -= 32;
        v635 -= 32;
        v636 -= 4;
      }
      while (v636);
      v624 = v633;
      if (v631 != (v631 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1017:
        do
        {
LABEL_666:
          v638 = *((_QWORD *)v624 - 1);
          v624 -= 8;
          *((_QWORD *)v629 - 1) = v638;
          v629 -= 8;
        }
        while (v624 != v623);
      }
    }
    *((_QWORD *)&v959 + 1) = v629;
    *(_QWORD *)&v960 = v628;
    *((_QWORD *)&v960 + 1) = v626;
    if (v623)
    {
      operator delete(v623);
      v620 = *(char **)(a1 + 8944);
      v619 = *(char **)(a1 + 8952);
    }
    v623 = v629;
  }
  if (v620 == v619)
    goto LABEL_708;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v640 = (9 * *(_DWORD *)v620);
        v641 = (char *)*((_QWORD *)&v959 + 1);
        if (*((char **)&v959 + 1) == v628 || *((_DWORD *)v628 - 1) != (_DWORD)v640)
          break;
        *((_DWORD *)v628 - 1) = v640 + 9;
        v620 += 4;
        if (v620 == v619)
          goto LABEL_707;
      }
      v642 = (v640 + 9);
      if ((unint64_t)v628 < *((_QWORD *)&v960 + 1))
      {
        *(_QWORD *)v628 = v640 | (v642 << 32);
        v639 = (uint64_t)(v628 + 8);
        goto LABEL_673;
      }
      v643 = &v628[-*((_QWORD *)&v959 + 1)];
      v644 = (uint64_t)&v628[-*((_QWORD *)&v959 + 1)] >> 3;
      v645 = v644 + 1;
      if ((unint64_t)(v644 + 1) >> 61)
        goto LABEL_1011;
      v646 = *((_QWORD *)&v960 + 1) - *((_QWORD *)&v959 + 1);
      if ((uint64_t)(*((_QWORD *)&v960 + 1) - *((_QWORD *)&v959 + 1)) >> 2 > v645)
        v645 = v646 >> 2;
      if ((unint64_t)v646 >= 0x7FFFFFFFFFFFFFF8)
        v647 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v647 = v645;
      if (v647)
      {
        if (v647 >> 61)
          goto LABEL_1009;
        v648 = (char *)operator new(8 * v647);
        v649 = &v648[8 * v644];
        *(_QWORD *)v649 = v640 | (v642 << 32);
        v639 = (uint64_t)(v649 + 8);
        if (v641 != v628)
        {
LABEL_688:
          if ((unint64_t)(v643 - 8) < 0x168)
          {
            v650 = v628;
            goto LABEL_690;
          }
          v652 = (v628 - 8 - v641) & 0xFFFFFFFFFFFFFFF8;
          if (&v643[(_QWORD)v648 - 8 - v652] > &v643[(_QWORD)v648 - 8])
          {
            v650 = v628;
            goto LABEL_690;
          }
          if (&v628[-v652 - 8] > v628 - 8)
          {
            v650 = v628;
            goto LABEL_690;
          }
          if ((unint64_t)(v641 - v648) < 0x20)
          {
            v650 = v628;
            goto LABEL_690;
          }
          v653 = ((unint64_t)(v643 - 8) >> 3) + 1;
          v654 = 8 * (v653 & 0x3FFFFFFFFFFFFFFCLL);
          v650 = &v628[-v654];
          v649 -= v654;
          v655 = &v648[8 * v644 - 16];
          v656 = v628 - 16;
          v657 = v653 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v658 = *(_OWORD *)v656;
            *((_OWORD *)v655 - 1) = *((_OWORD *)v656 - 1);
            *(_OWORD *)v655 = v658;
            v655 -= 32;
            v656 -= 32;
            v657 -= 4;
          }
          while (v657);
          if (v653 != (v653 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_690:
              v651 = *((_QWORD *)v650 - 1);
              v650 -= 8;
              *((_QWORD *)v649 - 1) = v651;
              v649 -= 8;
            }
            while (v650 != v641);
          }
          v628 = (char *)*((_QWORD *)&v959 + 1);
          *((_QWORD *)&v959 + 1) = v649;
          *((_QWORD *)&v960 + 1) = &v648[8 * v647];
          if (v628)
            goto LABEL_695;
LABEL_673:
          *(_QWORD *)&v960 = v639;
          v628 = (char *)v639;
          v620 += 4;
          if (v620 == v619)
            goto LABEL_707;
          continue;
        }
      }
      else
      {
        v648 = 0;
        v649 = (char *)(8 * v644);
        *(_QWORD *)(8 * v644) = v640 | (v642 << 32);
        v639 = 8 * v644 + 8;
        if (v641 != v628)
          goto LABEL_688;
      }
      break;
    }
    *((_QWORD *)&v959 + 1) = v649;
    *((_QWORD *)&v960 + 1) = &v648[8 * v647];
    if (!v628)
      goto LABEL_673;
LABEL_695:
    operator delete(v628);
    *(_QWORD *)&v960 = v639;
    v628 = (char *)v639;
    v620 += 4;
    if (v620 != v619)
      continue;
    break;
  }
LABEL_707:
  v623 = (char *)*((_QWORD *)&v959 + 1);
LABEL_708:
  if (((v628 - v623) & 0x7FFFFFFF0) != 0)
  {
    v659 = ((unint64_t)(v628 - v623) >> 3);
    v662 = *(_DWORD *)v623;
    v661 = v623 + 8;
    v660 = v662;
    v663 = v659 - 1;
    do
    {
      v660 += *v661 - *(v661 - 1);
      *v661 = v660;
      v661 += 2;
      --v663;
    }
    while (v663);
  }
  HIDWORD(v946[0]) = 9 * (*((_DWORD *)v919 + 7) + ((*(_QWORD *)(a1 + 8952) - *(_QWORD *)(a1 + 8944)) >> 2));
  v664 = *(unsigned int **)(a1 + 8976);
  v665 = *(unsigned int **)(a1 + 8968);
  v666 = (char *)v664 - (char *)v665;
  v667 = v664 - v665;
  v668 = (char *)v961;
  if (v667 <= (uint64_t)(v962 - v961) >> 3)
  {
    v673 = (char *)*((_QWORD *)&v961 + 1);
    goto LABEL_725;
  }
  if (v666 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v669 = (char *)*((_QWORD *)&v961 + 1);
  v670 = (char *)operator new(2 * v666);
  v671 = &v670[8 * v667];
  v672 = v669 - v668;
  v673 = &v670[(v669 - v668) & 0xFFFFFFFFFFFFFFF8];
  v674 = v673;
  if (v669 != v668)
  {
    if ((unint64_t)(v672 - 8) < 0x58)
    {
      v674 = &v670[(v669 - v668) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_721;
    }
    v674 = &v670[(v669 - v668) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v669[-(v672 & 0xFFFFFFFFFFFFFFF8)] - v670) < 0x20)
      goto LABEL_1018;
    v675 = v672 >> 3;
    v676 = ((unint64_t)(v672 - 8) >> 3) + 1;
    v677 = 8 * (v676 & 0x3FFFFFFFFFFFFFFCLL);
    v678 = &v669[-v677];
    v674 = &v673[-v677];
    v679 = &v670[8 * v675 - 16];
    v680 = v669 - 16;
    v681 = v676 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v682 = *(_OWORD *)v680;
      *((_OWORD *)v679 - 1) = *((_OWORD *)v680 - 1);
      *(_OWORD *)v679 = v682;
      v679 -= 32;
      v680 -= 32;
      v681 -= 4;
    }
    while (v681);
    v669 = v678;
    if (v676 != (v676 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1018:
      do
      {
LABEL_721:
        v683 = *((_QWORD *)v669 - 1);
        v669 -= 8;
        *((_QWORD *)v674 - 1) = v683;
        v674 -= 8;
      }
      while (v669 != v668);
    }
  }
  *(_QWORD *)&v961 = v674;
  *((_QWORD *)&v961 + 1) = v673;
  *(_QWORD *)&v962 = v671;
  if (v668)
  {
    operator delete(v668);
    v665 = *(unsigned int **)(a1 + 8968);
    v664 = *(unsigned int **)(a1 + 8976);
  }
  v668 = v674;
LABEL_725:
  if (v665 == v664)
    goto LABEL_763;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v685 = *v665;
        v686 = (char *)v961;
        if ((char *)v961 == v673 || *((_DWORD *)v673 - 1) != (_DWORD)v685)
          break;
        *((_DWORD *)v673 - 1) = v685 + 1;
        if (++v665 == v664)
          goto LABEL_762;
      }
      v687 = (v685 + 1);
      if ((unint64_t)v673 < (unint64_t)v962)
      {
        *(_QWORD *)v673 = v685 | (v687 << 32);
        v684 = (uint64_t)(v673 + 8);
        goto LABEL_728;
      }
      v688 = &v673[-v961];
      v689 = (uint64_t)&v673[-v961] >> 3;
      v690 = v689 + 1;
      if ((unint64_t)(v689 + 1) >> 61)
        goto LABEL_1011;
      v691 = v962 - v961;
      if ((uint64_t)(v962 - v961) >> 2 > v690)
        v690 = v691 >> 2;
      v692 = (unint64_t)v691 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v690;
      if (v692)
      {
        if (v692 >> 61)
          goto LABEL_1009;
        v693 = (char *)operator new(8 * v692);
        v694 = &v693[8 * v689];
        *(_QWORD *)v694 = v685 | (v687 << 32);
        v684 = (uint64_t)(v694 + 8);
        if (v686 != v673)
        {
LABEL_743:
          if ((unint64_t)(v688 - 8) < 0x168)
          {
            v695 = v673;
            goto LABEL_745;
          }
          v697 = (v673 - 8 - v686) & 0xFFFFFFFFFFFFFFF8;
          if (&v688[(_QWORD)v693 - 8 - v697] > &v688[(_QWORD)v693 - 8])
          {
            v695 = v673;
            goto LABEL_745;
          }
          if (&v673[-v697 - 8] > v673 - 8)
          {
            v695 = v673;
            goto LABEL_745;
          }
          if ((unint64_t)(v686 - v693) < 0x20)
          {
            v695 = v673;
            goto LABEL_745;
          }
          v698 = ((unint64_t)(v688 - 8) >> 3) + 1;
          v699 = 8 * (v698 & 0x3FFFFFFFFFFFFFFCLL);
          v695 = &v673[-v699];
          v694 -= v699;
          v700 = &v693[8 * v689 - 16];
          v701 = v673 - 16;
          v702 = v698 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v703 = *(_OWORD *)v701;
            *((_OWORD *)v700 - 1) = *((_OWORD *)v701 - 1);
            *(_OWORD *)v700 = v703;
            v700 -= 32;
            v701 -= 32;
            v702 -= 4;
          }
          while (v702);
          if (v698 != (v698 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_745:
              v696 = *((_QWORD *)v695 - 1);
              v695 -= 8;
              *((_QWORD *)v694 - 1) = v696;
              v694 -= 8;
            }
            while (v695 != v686);
          }
          v673 = (char *)v961;
          *(_QWORD *)&v961 = v694;
          *(_QWORD *)&v962 = &v693[8 * v692];
          if (v673)
            goto LABEL_750;
LABEL_728:
          *((_QWORD *)&v961 + 1) = v684;
          v673 = (char *)v684;
          if (++v665 == v664)
            goto LABEL_762;
          continue;
        }
      }
      else
      {
        v693 = 0;
        v694 = (char *)(8 * v689);
        *(_QWORD *)(8 * v689) = v685 | (v687 << 32);
        v684 = 8 * v689 + 8;
        if (v686 != v673)
          goto LABEL_743;
      }
      break;
    }
    *(_QWORD *)&v961 = v694;
    *(_QWORD *)&v962 = &v693[8 * v692];
    if (!v673)
      goto LABEL_728;
LABEL_750:
    operator delete(v673);
    *((_QWORD *)&v961 + 1) = v684;
    v673 = (char *)v684;
    if (++v665 != v664)
      continue;
    break;
  }
LABEL_762:
  v668 = (char *)v961;
LABEL_763:
  if (((v673 - v668) & 0x7FFFFFFF0) != 0)
  {
    v704 = ((unint64_t)(v673 - v668) >> 3);
    v707 = *(_DWORD *)v668;
    v706 = v668 + 8;
    v705 = v707;
    v708 = v704 - 1;
    do
    {
      v705 += *v706 - *(v706 - 1);
      *v706 = v705;
      v706 += 2;
      --v708;
    }
    while (v708);
  }
  LODWORD(v946[1]) = *((_DWORD *)v919 + 8) + ((*(_QWORD *)(a1 + 8976) - *(_QWORD *)(a1 + 8968)) >> 2);
  v709 = *(char **)(a1 + 9000);
  v710 = *(char **)(a1 + 8992);
  v711 = v709 - v710;
  v712 = (v709 - v710) >> 2;
  v713 = (char *)*((_QWORD *)&v962 + 1);
  if (v712 <= (uint64_t)(*((_QWORD *)&v963 + 1) - *((_QWORD *)&v962 + 1)) >> 3)
  {
    v718 = (char *)v963;
    goto LABEL_780;
  }
  if (v711 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v714 = (char *)v963;
  v715 = (char *)operator new(2 * v711);
  v716 = &v715[8 * v712];
  v717 = v714 - v713;
  v718 = &v715[(v714 - v713) & 0xFFFFFFFFFFFFFFF8];
  v719 = v718;
  if (v714 != v713)
  {
    if ((unint64_t)(v717 - 8) < 0x58)
    {
      v719 = &v715[(v714 - v713) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_776;
    }
    v719 = &v715[(v714 - v713) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v714[-(v717 & 0xFFFFFFFFFFFFFFF8)] - v715) < 0x20)
      goto LABEL_1019;
    v720 = v717 >> 3;
    v721 = ((unint64_t)(v717 - 8) >> 3) + 1;
    v722 = 8 * (v721 & 0x3FFFFFFFFFFFFFFCLL);
    v723 = &v714[-v722];
    v719 = &v718[-v722];
    v724 = &v715[8 * v720 - 16];
    v725 = v714 - 16;
    v726 = v721 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v727 = *(_OWORD *)v725;
      *((_OWORD *)v724 - 1) = *((_OWORD *)v725 - 1);
      *(_OWORD *)v724 = v727;
      v724 -= 32;
      v725 -= 32;
      v726 -= 4;
    }
    while (v726);
    v714 = v723;
    if (v721 != (v721 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1019:
      do
      {
LABEL_776:
        v728 = *((_QWORD *)v714 - 1);
        v714 -= 8;
        *((_QWORD *)v719 - 1) = v728;
        v719 -= 8;
      }
      while (v714 != v713);
    }
  }
  *((_QWORD *)&v962 + 1) = v719;
  *(_QWORD *)&v963 = v718;
  *((_QWORD *)&v963 + 1) = v716;
  if (v713)
  {
    operator delete(v713);
    v710 = *(char **)(a1 + 8992);
    v709 = *(char **)(a1 + 9000);
  }
  v713 = v719;
LABEL_780:
  if (v710 == v709)
    goto LABEL_818;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v730 = (6 * *(_DWORD *)v710);
        v731 = (char *)*((_QWORD *)&v962 + 1);
        if (*((char **)&v962 + 1) == v718 || *((_DWORD *)v718 - 1) != (_DWORD)v730)
          break;
        *((_DWORD *)v718 - 1) = v730 + 6;
        v710 += 4;
        if (v710 == v709)
          goto LABEL_817;
      }
      v732 = (v730 + 6);
      if ((unint64_t)v718 < *((_QWORD *)&v963 + 1))
      {
        *(_QWORD *)v718 = v730 | (v732 << 32);
        v729 = (uint64_t)(v718 + 8);
        goto LABEL_783;
      }
      v733 = &v718[-*((_QWORD *)&v962 + 1)];
      v734 = (uint64_t)&v718[-*((_QWORD *)&v962 + 1)] >> 3;
      v735 = v734 + 1;
      if ((unint64_t)(v734 + 1) >> 61)
        goto LABEL_1011;
      v736 = *((_QWORD *)&v963 + 1) - *((_QWORD *)&v962 + 1);
      if ((uint64_t)(*((_QWORD *)&v963 + 1) - *((_QWORD *)&v962 + 1)) >> 2 > v735)
        v735 = v736 >> 2;
      v737 = (unint64_t)v736 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v735;
      if (v737)
      {
        if (v737 >> 61)
          goto LABEL_1009;
        v738 = (char *)operator new(8 * v737);
        v739 = &v738[8 * v734];
        *(_QWORD *)v739 = v730 | (v732 << 32);
        v729 = (uint64_t)(v739 + 8);
        if (v731 != v718)
        {
LABEL_798:
          if ((unint64_t)(v733 - 8) < 0x168)
          {
            v740 = v718;
            goto LABEL_800;
          }
          v742 = (v718 - 8 - v731) & 0xFFFFFFFFFFFFFFF8;
          if (&v733[(_QWORD)v738 - 8 - v742] > &v733[(_QWORD)v738 - 8])
          {
            v740 = v718;
            goto LABEL_800;
          }
          if (&v718[-v742 - 8] > v718 - 8)
          {
            v740 = v718;
            goto LABEL_800;
          }
          if ((unint64_t)(v731 - v738) < 0x20)
          {
            v740 = v718;
            goto LABEL_800;
          }
          v743 = ((unint64_t)(v733 - 8) >> 3) + 1;
          v744 = 8 * (v743 & 0x3FFFFFFFFFFFFFFCLL);
          v740 = &v718[-v744];
          v739 -= v744;
          v745 = &v738[8 * v734 - 16];
          v746 = v718 - 16;
          v747 = v743 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v748 = *(_OWORD *)v746;
            *((_OWORD *)v745 - 1) = *((_OWORD *)v746 - 1);
            *(_OWORD *)v745 = v748;
            v745 -= 32;
            v746 -= 32;
            v747 -= 4;
          }
          while (v747);
          if (v743 != (v743 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_800:
              v741 = *((_QWORD *)v740 - 1);
              v740 -= 8;
              *((_QWORD *)v739 - 1) = v741;
              v739 -= 8;
            }
            while (v740 != v731);
          }
          v718 = (char *)*((_QWORD *)&v962 + 1);
          *((_QWORD *)&v962 + 1) = v739;
          *((_QWORD *)&v963 + 1) = &v738[8 * v737];
          if (v718)
            goto LABEL_805;
LABEL_783:
          *(_QWORD *)&v963 = v729;
          v718 = (char *)v729;
          v710 += 4;
          if (v710 == v709)
            goto LABEL_817;
          continue;
        }
      }
      else
      {
        v738 = 0;
        v739 = (char *)(8 * v734);
        *(_QWORD *)(8 * v734) = v730 | (v732 << 32);
        v729 = 8 * v734 + 8;
        if (v731 != v718)
          goto LABEL_798;
      }
      break;
    }
    *((_QWORD *)&v962 + 1) = v739;
    *((_QWORD *)&v963 + 1) = &v738[8 * v737];
    if (!v718)
      goto LABEL_783;
LABEL_805:
    operator delete(v718);
    *(_QWORD *)&v963 = v729;
    v718 = (char *)v729;
    v710 += 4;
    if (v710 != v709)
      continue;
    break;
  }
LABEL_817:
  v713 = (char *)*((_QWORD *)&v962 + 1);
LABEL_818:
  if (((v718 - v713) & 0x7FFFFFFF0) != 0)
  {
    v749 = ((unint64_t)(v718 - v713) >> 3);
    v752 = *(_DWORD *)v713;
    v751 = v713 + 8;
    v750 = v752;
    v753 = v749 - 1;
    do
    {
      v750 += *v751 - *(v751 - 1);
      *v751 = v750;
      v751 += 2;
      --v753;
    }
    while (v753);
  }
  HIDWORD(v946[1]) = 6 * (*((_DWORD *)v919 + 9) + ((*(_QWORD *)(a1 + 9000) - *(_QWORD *)(a1 + 8992)) >> 2));
  v754 = *(char **)(a1 + 9024);
  v755 = *(char **)(a1 + 9016);
  v756 = v754 - v755;
  v757 = (v754 - v755) >> 2;
  v758 = (char *)v964;
  if (v757 <= (uint64_t)(v965 - v964) >> 3)
  {
    v763 = (char *)*((_QWORD *)&v964 + 1);
    goto LABEL_835;
  }
  if (v756 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v759 = (char *)*((_QWORD *)&v964 + 1);
  v760 = (char *)operator new(2 * v756);
  v761 = &v760[8 * v757];
  v762 = v759 - v758;
  v763 = &v760[(v759 - v758) & 0xFFFFFFFFFFFFFFF8];
  v764 = v763;
  if (v759 != v758)
  {
    if ((unint64_t)(v762 - 8) < 0x58)
    {
      v764 = &v760[(v759 - v758) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_831;
    }
    v764 = &v760[(v759 - v758) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v759 - &v760[v762 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_1020;
    v765 = v762 >> 3;
    v766 = ((unint64_t)(v762 - 8) >> 3) + 1;
    v767 = 8 * (v766 & 0x3FFFFFFFFFFFFFFCLL);
    v768 = &v759[-v767];
    v764 = &v763[-v767];
    v769 = &v760[8 * v765 - 16];
    v770 = v759 - 16;
    v771 = v766 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v772 = *(_OWORD *)v770;
      *((_OWORD *)v769 - 1) = *((_OWORD *)v770 - 1);
      *(_OWORD *)v769 = v772;
      v769 -= 32;
      v770 -= 32;
      v771 -= 4;
    }
    while (v771);
    v759 = v768;
    if (v766 != (v766 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1020:
      do
      {
LABEL_831:
        v773 = *((_QWORD *)v759 - 1);
        v759 -= 8;
        *((_QWORD *)v764 - 1) = v773;
        v764 -= 8;
      }
      while (v759 != v758);
    }
  }
  *(_QWORD *)&v964 = v764;
  *((_QWORD *)&v964 + 1) = v763;
  *(_QWORD *)&v965 = v761;
  if (v758)
  {
    operator delete(v758);
    v755 = *(char **)(a1 + 9016);
    v754 = *(char **)(a1 + 9024);
  }
  v758 = v764;
LABEL_835:
  if (v755 == v754)
    goto LABEL_873;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v775 = (4 * *(_DWORD *)v755);
        v776 = (char *)v964;
        if ((char *)v964 == v763 || *((_DWORD *)v763 - 1) != (_DWORD)v775)
          break;
        *((_DWORD *)v763 - 1) = v775 + 4;
        v755 += 4;
        if (v755 == v754)
          goto LABEL_872;
      }
      v777 = (v775 + 4);
      if ((unint64_t)v763 < (unint64_t)v965)
      {
        *(_QWORD *)v763 = v775 | (v777 << 32);
        v774 = (uint64_t)(v763 + 8);
        goto LABEL_838;
      }
      v778 = &v763[-v964];
      v779 = (uint64_t)&v763[-v964] >> 3;
      v780 = v779 + 1;
      if ((unint64_t)(v779 + 1) >> 61)
        goto LABEL_1011;
      v781 = v965 - v964;
      if ((uint64_t)(v965 - v964) >> 2 > v780)
        v780 = v781 >> 2;
      v782 = (unint64_t)v781 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v780;
      if (v782)
      {
        if (v782 >> 61)
          goto LABEL_1009;
        v783 = (char *)operator new(8 * v782);
        v784 = &v783[8 * v779];
        *(_QWORD *)v784 = v775 | (v777 << 32);
        v774 = (uint64_t)(v784 + 8);
        if (v776 != v763)
        {
LABEL_853:
          if ((unint64_t)(v778 - 8) < 0x168)
          {
            v785 = v763;
            goto LABEL_855;
          }
          v787 = (v763 - 8 - v776) & 0xFFFFFFFFFFFFFFF8;
          if (&v778[(_QWORD)v783 - 8 - v787] > &v778[(_QWORD)v783 - 8])
          {
            v785 = v763;
            goto LABEL_855;
          }
          if (&v763[-v787 - 8] > v763 - 8)
          {
            v785 = v763;
            goto LABEL_855;
          }
          if ((unint64_t)(v776 - v783) < 0x20)
          {
            v785 = v763;
            goto LABEL_855;
          }
          v788 = ((unint64_t)(v778 - 8) >> 3) + 1;
          v789 = 8 * (v788 & 0x3FFFFFFFFFFFFFFCLL);
          v785 = &v763[-v789];
          v784 -= v789;
          v790 = &v783[8 * v779 - 16];
          v791 = v763 - 16;
          v792 = v788 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v793 = *(_OWORD *)v791;
            *((_OWORD *)v790 - 1) = *((_OWORD *)v791 - 1);
            *(_OWORD *)v790 = v793;
            v790 -= 32;
            v791 -= 32;
            v792 -= 4;
          }
          while (v792);
          if (v788 != (v788 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_855:
              v786 = *((_QWORD *)v785 - 1);
              v785 -= 8;
              *((_QWORD *)v784 - 1) = v786;
              v784 -= 8;
            }
            while (v785 != v776);
          }
          v763 = (char *)v964;
          *(_QWORD *)&v964 = v784;
          *(_QWORD *)&v965 = &v783[8 * v782];
          if (v763)
            goto LABEL_860;
LABEL_838:
          *((_QWORD *)&v964 + 1) = v774;
          v763 = (char *)v774;
          v755 += 4;
          if (v755 == v754)
            goto LABEL_872;
          continue;
        }
      }
      else
      {
        v783 = 0;
        v784 = (char *)(8 * v779);
        *(_QWORD *)(8 * v779) = v775 | (v777 << 32);
        v774 = 8 * v779 + 8;
        if (v776 != v763)
          goto LABEL_853;
      }
      break;
    }
    *(_QWORD *)&v964 = v784;
    *(_QWORD *)&v965 = &v783[8 * v782];
    if (!v763)
      goto LABEL_838;
LABEL_860:
    operator delete(v763);
    *((_QWORD *)&v964 + 1) = v774;
    v763 = (char *)v774;
    v755 += 4;
    if (v755 != v754)
      continue;
    break;
  }
LABEL_872:
  v758 = (char *)v964;
LABEL_873:
  if (((v763 - v758) & 0x7FFFFFFF0) != 0)
  {
    v794 = ((unint64_t)(v763 - v758) >> 3);
    v797 = *(_DWORD *)v758;
    v796 = v758 + 8;
    v795 = v797;
    v798 = v794 - 1;
    do
    {
      v795 += *v796 - *(v796 - 1);
      *v796 = v795;
      v796 += 2;
      --v798;
    }
    while (v798);
  }
  LODWORD(v947[0]) = (*(_DWORD *)(a1 + 9024) - *(_DWORD *)(a1 + 9016) + 4 * *((_DWORD *)v919 + 10)) & 0xFFFFFFFC;
  v799 = *(char **)(a1 + 9048);
  v800 = *(char **)(a1 + 9040);
  v801 = v799 - v800;
  v802 = (v799 - v800) >> 2;
  v803 = (char *)*((_QWORD *)&v965 + 1);
  if (v802 <= (uint64_t)(*((_QWORD *)&v966 + 1) - *((_QWORD *)&v965 + 1)) >> 3)
  {
    v808 = (char *)v966;
    goto LABEL_890;
  }
  if (v801 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v804 = (char *)v966;
  v805 = (char *)operator new(2 * v801);
  v806 = &v805[8 * v802];
  v807 = v804 - v803;
  v808 = &v805[(v804 - v803) & 0xFFFFFFFFFFFFFFF8];
  v809 = v808;
  if (v804 != v803)
  {
    if ((unint64_t)(v807 - 8) < 0x58)
    {
      v809 = &v805[(v804 - v803) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_886;
    }
    v809 = &v805[(v804 - v803) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v804[-(v807 & 0xFFFFFFFFFFFFFFF8)] - v805) < 0x20)
      goto LABEL_1021;
    v810 = v807 >> 3;
    v811 = ((unint64_t)(v807 - 8) >> 3) + 1;
    v812 = 8 * (v811 & 0x3FFFFFFFFFFFFFFCLL);
    v813 = &v804[-v812];
    v809 = &v808[-v812];
    v814 = &v805[8 * v810 - 16];
    v815 = v804 - 16;
    v816 = v811 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v817 = *(_OWORD *)v815;
      *((_OWORD *)v814 - 1) = *((_OWORD *)v815 - 1);
      *(_OWORD *)v814 = v817;
      v814 -= 32;
      v815 -= 32;
      v816 -= 4;
    }
    while (v816);
    v804 = v813;
    if (v811 != (v811 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1021:
      do
      {
LABEL_886:
        v818 = *((_QWORD *)v804 - 1);
        v804 -= 8;
        *((_QWORD *)v809 - 1) = v818;
        v809 -= 8;
      }
      while (v804 != v803);
    }
  }
  *((_QWORD *)&v965 + 1) = v809;
  *(_QWORD *)&v966 = v808;
  *((_QWORD *)&v966 + 1) = v806;
  if (v803)
  {
    operator delete(v803);
    v800 = *(char **)(a1 + 9040);
    v799 = *(char **)(a1 + 9048);
  }
  v803 = v809;
LABEL_890:
  if (v800 == v799)
    goto LABEL_928;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v820 = (4 * *(_DWORD *)v800);
        v821 = (char *)*((_QWORD *)&v965 + 1);
        if (*((char **)&v965 + 1) == v808 || *((_DWORD *)v808 - 1) != (_DWORD)v820)
          break;
        *((_DWORD *)v808 - 1) = v820 + 4;
        v800 += 4;
        if (v800 == v799)
          goto LABEL_927;
      }
      v822 = (v820 + 4);
      if ((unint64_t)v808 < *((_QWORD *)&v966 + 1))
      {
        *(_QWORD *)v808 = v820 | (v822 << 32);
        v819 = (uint64_t)(v808 + 8);
        goto LABEL_893;
      }
      v823 = &v808[-*((_QWORD *)&v965 + 1)];
      v824 = (uint64_t)&v808[-*((_QWORD *)&v965 + 1)] >> 3;
      v825 = v824 + 1;
      if ((unint64_t)(v824 + 1) >> 61)
        goto LABEL_1011;
      v826 = *((_QWORD *)&v966 + 1) - *((_QWORD *)&v965 + 1);
      if ((uint64_t)(*((_QWORD *)&v966 + 1) - *((_QWORD *)&v965 + 1)) >> 2 > v825)
        v825 = v826 >> 2;
      v827 = (unint64_t)v826 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v825;
      if (v827)
      {
        if (v827 >> 61)
          goto LABEL_1009;
        v828 = (char *)operator new(8 * v827);
        v829 = &v828[8 * v824];
        *(_QWORD *)v829 = v820 | (v822 << 32);
        v819 = (uint64_t)(v829 + 8);
        if (v821 != v808)
        {
LABEL_908:
          if ((unint64_t)(v823 - 8) < 0x168)
          {
            v830 = v808;
            goto LABEL_910;
          }
          v832 = (v808 - 8 - v821) & 0xFFFFFFFFFFFFFFF8;
          if (&v823[(_QWORD)v828 - 8 - v832] > &v823[(_QWORD)v828 - 8])
          {
            v830 = v808;
            goto LABEL_910;
          }
          if (&v808[-v832 - 8] > v808 - 8)
          {
            v830 = v808;
            goto LABEL_910;
          }
          if ((unint64_t)(v821 - v828) < 0x20)
          {
            v830 = v808;
            goto LABEL_910;
          }
          v833 = ((unint64_t)(v823 - 8) >> 3) + 1;
          v834 = 8 * (v833 & 0x3FFFFFFFFFFFFFFCLL);
          v830 = &v808[-v834];
          v829 -= v834;
          v835 = &v828[8 * v824 - 16];
          v836 = v808 - 16;
          v837 = v833 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v838 = *(_OWORD *)v836;
            *((_OWORD *)v835 - 1) = *((_OWORD *)v836 - 1);
            *(_OWORD *)v835 = v838;
            v835 -= 32;
            v836 -= 32;
            v837 -= 4;
          }
          while (v837);
          if (v833 != (v833 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_910:
              v831 = *((_QWORD *)v830 - 1);
              v830 -= 8;
              *((_QWORD *)v829 - 1) = v831;
              v829 -= 8;
            }
            while (v830 != v821);
          }
          v808 = (char *)*((_QWORD *)&v965 + 1);
          *((_QWORD *)&v965 + 1) = v829;
          *((_QWORD *)&v966 + 1) = &v828[8 * v827];
          if (v808)
            goto LABEL_915;
LABEL_893:
          *(_QWORD *)&v966 = v819;
          v808 = (char *)v819;
          v800 += 4;
          if (v800 == v799)
            goto LABEL_927;
          continue;
        }
      }
      else
      {
        v828 = 0;
        v829 = (char *)(8 * v824);
        *(_QWORD *)(8 * v824) = v820 | (v822 << 32);
        v819 = 8 * v824 + 8;
        if (v821 != v808)
          goto LABEL_908;
      }
      break;
    }
    *((_QWORD *)&v965 + 1) = v829;
    *((_QWORD *)&v966 + 1) = &v828[8 * v827];
    if (!v808)
      goto LABEL_893;
LABEL_915:
    operator delete(v808);
    *(_QWORD *)&v966 = v819;
    v808 = (char *)v819;
    v800 += 4;
    if (v800 != v799)
      continue;
    break;
  }
LABEL_927:
  v803 = (char *)*((_QWORD *)&v965 + 1);
LABEL_928:
  if (((v808 - v803) & 0x7FFFFFFF0) != 0)
  {
    v839 = ((unint64_t)(v808 - v803) >> 3);
    v842 = *(_DWORD *)v803;
    v841 = v803 + 8;
    v840 = v842;
    v843 = v839 - 1;
    do
    {
      v840 += *v841 - *(v841 - 1);
      *v841 = v840;
      v841 += 2;
      --v843;
    }
    while (v843);
  }
  HIDWORD(v947[0]) = (*(_DWORD *)(a1 + 9048) - *(_DWORD *)(a1 + 9040) + 4 * *((_DWORD *)v919 + 11)) & 0xFFFFFFFC;
  v844 = *(char **)(a1 + 9072);
  v845 = *(char **)(a1 + 9064);
  v846 = v844 - v845;
  v847 = (v844 - v845) >> 2;
  v848 = (char *)v967;
  if (v847 <= (uint64_t)&v968[-v967] >> 3)
  {
    v853 = (char *)*((_QWORD *)&v967 + 1);
    goto LABEL_945;
  }
  if (v846 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v849 = (char *)*((_QWORD *)&v967 + 1);
  v850 = (char *)operator new(2 * v846);
  v851 = &v850[8 * v847];
  v852 = v849 - v848;
  v853 = &v850[(v849 - v848) & 0xFFFFFFFFFFFFFFF8];
  v854 = v853;
  if (v849 != v848)
  {
    if ((unint64_t)(v852 - 8) < 0x58)
    {
      v854 = &v850[(v849 - v848) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_941;
    }
    v854 = &v850[(v849 - v848) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v849[-(v852 & 0xFFFFFFFFFFFFFFF8)] - v850) < 0x20)
      goto LABEL_1022;
    v855 = v852 >> 3;
    v856 = ((unint64_t)(v852 - 8) >> 3) + 1;
    v857 = 8 * (v856 & 0x3FFFFFFFFFFFFFFCLL);
    v858 = &v849[-v857];
    v854 = &v853[-v857];
    v859 = &v850[8 * v855 - 16];
    v860 = v849 - 16;
    v861 = v856 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v862 = *(_OWORD *)v860;
      *((_OWORD *)v859 - 1) = *((_OWORD *)v860 - 1);
      *(_OWORD *)v859 = v862;
      v859 -= 32;
      v860 -= 32;
      v861 -= 4;
    }
    while (v861);
    v849 = v858;
    if (v856 != (v856 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1022:
      do
      {
LABEL_941:
        v863 = *((_QWORD *)v849 - 1);
        v849 -= 8;
        *((_QWORD *)v854 - 1) = v863;
        v854 -= 8;
      }
      while (v849 != v848);
    }
  }
  *(_QWORD *)&v967 = v854;
  *((_QWORD *)&v967 + 1) = v853;
  v968 = v851;
  if (v848)
  {
    operator delete(v848);
    v845 = *(char **)(a1 + 9064);
    v844 = *(char **)(a1 + 9072);
  }
  v848 = v854;
LABEL_945:
  if (v845 == v844)
    goto LABEL_983;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v865 = (3 * *(_DWORD *)v845);
        v866 = (char *)v967;
        if ((char *)v967 == v853 || *((_DWORD *)v853 - 1) != (_DWORD)v865)
          break;
        *((_DWORD *)v853 - 1) = v865 + 3;
        v845 += 4;
        if (v845 == v844)
          goto LABEL_982;
      }
      v867 = (v865 + 3);
      if (v853 < v968)
      {
        *(_QWORD *)v853 = v865 | (v867 << 32);
        v864 = (uint64_t)(v853 + 8);
        goto LABEL_948;
      }
      v868 = &v853[-v967];
      v869 = (uint64_t)&v853[-v967] >> 3;
      v870 = v869 + 1;
      if ((unint64_t)(v869 + 1) >> 61)
        goto LABEL_1011;
      v871 = (uint64_t)&v968[-v967];
      if ((uint64_t)&v968[-v967] >> 2 > v870)
        v870 = v871 >> 2;
      if ((unint64_t)v871 >= 0x7FFFFFFFFFFFFFF8)
        v872 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v872 = v870;
      if (v872)
      {
        if (v872 >> 61)
          goto LABEL_1009;
        v873 = (char *)operator new(8 * v872);
        v874 = &v873[8 * v869];
        *(_QWORD *)v874 = v865 | (v867 << 32);
        v864 = (uint64_t)(v874 + 8);
        if (v866 != v853)
        {
LABEL_963:
          if ((unint64_t)(v868 - 8) < 0x168)
          {
            v875 = v853;
            goto LABEL_965;
          }
          v877 = (v853 - 8 - v866) & 0xFFFFFFFFFFFFFFF8;
          if (&v868[(_QWORD)v873 - 8 - v877] > &v868[(_QWORD)v873 - 8])
          {
            v875 = v853;
            goto LABEL_965;
          }
          if (&v853[-v877 - 8] > v853 - 8)
          {
            v875 = v853;
            goto LABEL_965;
          }
          if ((unint64_t)(v866 - v873) < 0x20)
          {
            v875 = v853;
            goto LABEL_965;
          }
          v878 = ((unint64_t)(v868 - 8) >> 3) + 1;
          v879 = 8 * (v878 & 0x3FFFFFFFFFFFFFFCLL);
          v875 = &v853[-v879];
          v874 -= v879;
          v880 = &v873[8 * v869 - 16];
          v881 = v853 - 16;
          v882 = v878 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v883 = *(_OWORD *)v881;
            *((_OWORD *)v880 - 1) = *((_OWORD *)v881 - 1);
            *(_OWORD *)v880 = v883;
            v880 -= 32;
            v881 -= 32;
            v882 -= 4;
          }
          while (v882);
          if (v878 != (v878 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_965:
              v876 = *((_QWORD *)v875 - 1);
              v875 -= 8;
              *((_QWORD *)v874 - 1) = v876;
              v874 -= 8;
            }
            while (v875 != v866);
          }
          v853 = (char *)v967;
          *(_QWORD *)&v967 = v874;
          v968 = &v873[8 * v872];
          if (v853)
            goto LABEL_970;
LABEL_948:
          *((_QWORD *)&v967 + 1) = v864;
          v853 = (char *)v864;
          v845 += 4;
          if (v845 == v844)
            goto LABEL_982;
          continue;
        }
      }
      else
      {
        v873 = 0;
        v874 = (char *)(8 * v869);
        *(_QWORD *)(8 * v869) = v865 | (v867 << 32);
        v864 = 8 * v869 + 8;
        if (v866 != v853)
          goto LABEL_963;
      }
      break;
    }
    *(_QWORD *)&v967 = v874;
    v968 = &v873[8 * v872];
    if (!v853)
      goto LABEL_948;
LABEL_970:
    operator delete(v853);
    *((_QWORD *)&v967 + 1) = v864;
    v853 = (char *)v864;
    v845 += 4;
    if (v845 != v844)
      continue;
    break;
  }
LABEL_982:
  v848 = (char *)v967;
LABEL_983:
  if (((v853 - v848) & 0x7FFFFFFF0) != 0)
  {
    v884 = ((unint64_t)(v853 - v848) >> 3);
    v887 = *(_DWORD *)v848;
    v886 = v848 + 8;
    v885 = v887;
    v888 = v884 - 1;
    do
    {
      v885 += *v886 - *(v886 - 1);
      *v886 = v885;
      v886 += 2;
      --v888;
    }
    while (v888);
  }
  LODWORD(v947[1]) = 3 * (*((_DWORD *)v919 + 12) + ((*(_QWORD *)(a1 + 9072) - *(_QWORD *)(a1 + 9064)) >> 2));
  v889 = (int)v946[0];
  v890 = HIDWORD(v946[0]);
  v892 = (int)v946[1];
  v891 = HIDWORD(v946[1]);
  v894 = (int)v947[0];
  v893 = HIDWORD(v947[0]);
  v895 = (HIDWORD(v946[0])
                      + LODWORD(v946[0])
                      + LODWORD(v946[1])
                      + HIDWORD(v946[1])
                      + LODWORD(v947[0])
                      + HIDWORD(v947[0])
                      + LODWORD(v947[1]));
  if (v895 <= *((_DWORD *)v919 + 2))
  {
    __dst = (void *)*v919;
    sub_20F5B6074(&v958, (uint64_t)v919, &__dst, (unsigned int *)v946);
    v902 = (void **)v919;
    *((_DWORD *)v919 + 4) = v895;
    if (v919[1] < v895)
    {
      if (*v919)
      {
        MEMORY[0x212BC6368](*v919, 0x1000C8000313F17);
        v902 = (void **)v919;
      }
      v903 = (8 * v895 + 31) & 0xFFFFFFFE0;
      *v902 = 0;
      v902[1] = (void *)(v903 >> 3);
      *v902 = operator new(v903, (std::align_val_t)0x20uLL);
    }
  }
  else
  {
    v945 = (int)v946[0];
    v896 = (int)v946[1];
    v897 = HIDWORD(v946[1]);
    v898 = (int)v947[0];
    v899 = HIDWORD(v947[0]);
    v900 = operator new((8* (HIDWORD(v946[0])+ LODWORD(v946[0])+ LODWORD(v946[1])+ HIDWORD(v946[1])+ LODWORD(v947[0])+ HIDWORD(v947[0])+ LODWORD(v947[1]))+ 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    __dst = v900;
    sub_20F5B6074(&v958, (uint64_t)v919, &__dst, (unsigned int *)v946);
    v901 = (void *)*v919;
    *v919 = v900;
    v919[1] = ((8 * v895 + 31) & 0xFFFFFFFE0uLL) >> 3;
    *((_DWORD *)v919 + 4) = v895;
    v893 = v899;
    v894 = v898;
    v891 = v897;
    v892 = v896;
    v889 = v945;
    if (v901)
      MEMORY[0x212BC6368](v901, 0x1000C8000313F17);
  }
  v904 = *((_DWORD *)v919 + 7);
  *((_DWORD *)v919 + 6) += (*(_QWORD *)(a1 + 8928) - *(_QWORD *)(a1 + 8920)) >> 2;
  *((_DWORD *)v919 + 7) = v904 + ((*(_QWORD *)(a1 + 8952) - *(_QWORD *)(a1 + 8944)) >> 2);
  v905 = *((_DWORD *)v919 + 12);
  v906 = *((_DWORD *)v919 + 13) + v889;
  *((_DWORD *)v919 + 14) = v906;
  v907 = *((_DWORD *)v919 + 9);
  *((_DWORD *)v919 + 8) += (*(_QWORD *)(a1 + 8976) - *(_QWORD *)(a1 + 8968)) >> 2;
  v908 = v906 + v890;
  *((_DWORD *)v919 + 15) = v908;
  *((_DWORD *)v919 + 9) = v907 + ((*(_QWORD *)(a1 + 9000) - *(_QWORD *)(a1 + 8992)) >> 2);
  v909 = v908 + v892;
  *((_DWORD *)v919 + 16) = v909;
  v910 = *((_DWORD *)v919 + 11);
  *((_DWORD *)v919 + 10) += (*(_QWORD *)(a1 + 9024) - *(_QWORD *)(a1 + 9016)) >> 2;
  v911 = v909 + v891;
  *((_DWORD *)v919 + 17) = v911;
  *((_DWORD *)v919 + 11) = v910 + ((*(_QWORD *)(a1 + 9048) - *(_QWORD *)(a1 + 9040)) >> 2);
  v912 = v911 + v894;
  *((_DWORD *)v919 + 18) = v912;
  *((_DWORD *)v919 + 12) = v905 + ((*(_QWORD *)(a1 + 9072) - *(_QWORD *)(a1 + 9064)) >> 2);
  *((_DWORD *)v919 + 19) = v912 + v893;
  if ((_QWORD)v967)
    operator delete((void *)v967);
  if (*((_QWORD *)&v965 + 1))
    operator delete(*((void **)&v965 + 1));
  if ((_QWORD)v964)
    operator delete((void *)v964);
  if (*((_QWORD *)&v962 + 1))
    operator delete(*((void **)&v962 + 1));
  if ((_QWORD)v961)
    operator delete((void *)v961);
  if (*((_QWORD *)&v959 + 1))
    operator delete(*((void **)&v959 + 1));
  v133 = (void *)v958;
  if ((_QWORD)v958)
LABEL_168:
    operator delete(v133);
  return 0;
}

void sub_20F6B602C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B6040(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B6054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20F4FD380(v17 - 256);
  sub_20F4FD380((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F6B6070(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B6084(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B6098(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B60AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B60C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B60D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B60E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F6B60FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20F4FD380((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F6B6110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

uint64_t sub_20F6B6124(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  uint64_t v59;
  uint64_t v60;
  uint64_t n;
  uint64_t v62;
  uint64_t v63;
  uint64_t ii;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int *v72;
  _BYTE *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  char *v94;
  unsigned int v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  unsigned int *v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  unsigned int v115;
  __n128 *v116;
  char *v117;
  __n128 *v118;
  uint64_t v119;
  const std::nothrow_t *v120;
  char *v121;
  BOOL v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unint64_t v128;
  _BYTE *v129;
  unsigned int *v130;
  _BYTE *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  char *v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  char *v152;
  unsigned int v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  unsigned int *v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  unsigned int v173;
  __n128 *v174;
  char *v175;
  __n128 *v176;
  uint64_t v177;
  const std::nothrow_t *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  unint64_t v185;
  _BYTE *v186;
  unsigned int *v187;
  _BYTE *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  unsigned int v203;
  char *v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int *v208;
  char *v209;
  unsigned int v210;
  char *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  unsigned int *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  unsigned int v230;
  __n128 *v231;
  char *v232;
  __n128 *v233;
  uint64_t v234;
  const std::nothrow_t *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int *v241;
  unint64_t v242;
  _BYTE *v243;
  unsigned int *v244;
  _BYTE *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  __int128 *v255;
  uint64_t v256;
  __int128 v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  char *v261;
  char *v262;
  unint64_t v263;
  unint64_t v264;
  unsigned int *v265;
  char *v266;
  unsigned int v267;
  char *v268;
  unint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _BYTE *v276;
  unsigned int *v277;
  int64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _OWORD *v283;
  char *v284;
  uint64_t v285;
  __int128 v286;
  unsigned int v287;
  __n128 *v288;
  char *v289;
  __n128 *v290;
  uint64_t v291;
  const std::nothrow_t *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int *v298;
  unint64_t v299;
  _BYTE *v300;
  unsigned int *v301;
  _BYTE *v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  __int128 *v312;
  uint64_t v313;
  __int128 v314;
  int v315;
  uint64_t v316;
  unsigned int v317;
  char *v318;
  char *v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int *v322;
  char *v323;
  unsigned int v324;
  char *v325;
  unint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  unsigned int *v334;
  int64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  _OWORD *v340;
  char *v341;
  uint64_t v342;
  __int128 v343;
  unsigned int v344;
  __n128 *v345;
  char *v346;
  __n128 *v347;
  uint64_t v348;
  const std::nothrow_t *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int *v355;
  unint64_t v356;
  _BYTE *v357;
  unsigned int *v358;
  _BYTE *v359;
  char *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  __int128 *v369;
  uint64_t v370;
  __int128 v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  char *v375;
  char *v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  char *v380;
  unsigned int v381;
  char *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  unsigned int *v391;
  int64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  _OWORD *v397;
  char *v398;
  uint64_t v399;
  __int128 v400;
  unsigned int v401;
  __n128 *v402;
  char *v403;
  __n128 *v404;
  uint64_t v405;
  const std::nothrow_t *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int *v412;
  unint64_t v413;
  _BYTE *v414;
  unsigned int *v415;
  _BYTE *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  __int128 *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  uint64_t v430;
  unsigned int v431;
  char *v432;
  char *v433;
  unint64_t v434;
  unint64_t v435;
  unsigned int *v436;
  char *v437;
  unsigned int v438;
  char *v439;
  unint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  _BYTE *v447;
  unsigned int *v448;
  int64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  _OWORD *v454;
  char *v455;
  uint64_t v456;
  __int128 v457;
  unsigned int v458;
  __n128 *v459;
  char *v460;
  __n128 *v461;
  uint64_t v462;
  const std::nothrow_t *v463;
  char *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int *v469;
  unint64_t v470;
  _BYTE *v471;
  unsigned int *v472;
  _BYTE *v473;
  char *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  char *v481;
  char *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  int v486;
  uint64_t v487;
  unsigned int v488;
  char *v489;
  char *v490;
  unint64_t v491;
  unint64_t v492;
  unsigned int *v493;
  char *v494;
  unsigned int v495;
  char *v496;
  unint64_t v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  _BYTE *v504;
  unsigned int *v505;
  int64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  _OWORD *v511;
  char *v512;
  uint64_t v513;
  __int128 v514;
  unsigned int v515;
  __n128 *v516;
  char *v517;
  __n128 *v518;
  uint64_t v519;
  const std::nothrow_t *v520;
  char *v521;
  char *v522;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int *v548;
  unsigned int *v549;
  unsigned int *v550;
  unsigned int *v551;
  unsigned int *v552;
  unsigned int *v553;
  unsigned int *v554;
  unsigned int *v555;
  void **v556;
  void **v557;
  void **v558;
  void **v559;
  void **v560;
  void **v561;
  void **v562;
  void **v563;
  char v564;

  if (!*(_BYTE *)(a1 + 978))
  {
    if (!*(_BYTE *)(a1 + 977))
    {
      v2 = *(_QWORD *)(a1 + 1176);
      v3 = *(_QWORD *)(a1 + 1184);
      *(_BYTE *)(a1 + 977) = v2 != v3;
      if (v2 == v3)
      {
        v4 = *(_QWORD *)(a1 + 1200);
        v5 = *(_QWORD *)(a1 + 1208);
        *(_BYTE *)(a1 + 977) = v4 != v5;
        if (v4 == v5)
        {
          v6 = *(_QWORD *)(a1 + 1224);
          v7 = *(_QWORD *)(a1 + 1232);
          *(_BYTE *)(a1 + 977) = v6 != v7;
          if (v6 == v7)
          {
            v8 = *(_QWORD *)(a1 + 1248);
            v9 = *(_QWORD *)(a1 + 1256);
            *(_BYTE *)(a1 + 977) = v8 != v9;
            if (v8 == v9)
            {
              v10 = *(_QWORD *)(a1 + 1272);
              v11 = *(_QWORD *)(a1 + 1280);
              *(_BYTE *)(a1 + 977) = v10 != v11;
              if (v10 == v11)
              {
                v12 = *(_QWORD *)(a1 + 1296);
                v13 = *(_QWORD *)(a1 + 1304);
                *(_BYTE *)(a1 + 977) = v12 != v13;
                if (v12 == v13)
                {
                  v14 = *(_QWORD *)(a1 + 1320);
                  v15 = *(_QWORD *)(a1 + 1328);
                  *(_BYTE *)(a1 + 977) = v14 != v15;
                  if (v14 == v15)
                    *(_BYTE *)(a1 + 977) = *(_QWORD *)(a1 + 1344) != *(_QWORD *)(a1 + 1352);
                }
              }
            }
          }
        }
      }
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 977))
    {
LABEL_576:
      *(_BYTE *)(a1 + 978) = 1;
      return a1 + 984;
    }
    v16 = *(void **)(a1 + 1560);
    *(_QWORD *)(a1 + 1568) = v16;
    v17 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v18 = v17 >> 4;
    if (v17 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1576) - (_QWORD)v16) >> 2))
    {
      if (v17 < 0)
        sub_20E867F44();
      v19 = (char *)operator new((unint64_t)v17 >> 2);
      *(_QWORD *)(a1 + 1560) = v19;
      *(_QWORD *)(a1 + 1568) = v19;
      *(_QWORD *)(a1 + 1576) = &v19[4 * v18];
      if (v16)
        operator delete(v16);
    }
    v20 = *(void **)(a1 + 1584);
    *(_QWORD *)(a1 + 1592) = v20;
    v21 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    v22 = v21 >> 4;
    if (v21 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1600) - (_QWORD)v20) >> 2))
    {
      if (v21 < 0)
        sub_20E867F44();
      v23 = (char *)operator new((unint64_t)v21 >> 2);
      *(_QWORD *)(a1 + 1584) = v23;
      *(_QWORD *)(a1 + 1592) = v23;
      *(_QWORD *)(a1 + 1600) = &v23[4 * v22];
      if (v20)
        operator delete(v20);
    }
    v24 = *(void **)(a1 + 1608);
    *(_QWORD *)(a1 + 1616) = v24;
    v25 = *(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200);
    v26 = v25 >> 4;
    if (v25 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1624) - (_QWORD)v24) >> 2))
    {
      if (v25 < 0)
        sub_20E867F44();
      v27 = (char *)operator new((unint64_t)v25 >> 2);
      *(_QWORD *)(a1 + 1608) = v27;
      *(_QWORD *)(a1 + 1616) = v27;
      *(_QWORD *)(a1 + 1624) = &v27[4 * v26];
      if (v24)
        operator delete(v24);
    }
    v28 = *(void **)(a1 + 1632);
    *(_QWORD *)(a1 + 1640) = v28;
    v29 = *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296);
    v30 = v29 >> 4;
    if (v29 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1648) - (_QWORD)v28) >> 2))
    {
      if (v29 < 0)
        sub_20E867F44();
      v31 = (char *)operator new((unint64_t)v29 >> 2);
      *(_QWORD *)(a1 + 1632) = v31;
      *(_QWORD *)(a1 + 1640) = v31;
      *(_QWORD *)(a1 + 1648) = &v31[4 * v30];
      if (v28)
        operator delete(v28);
    }
    v32 = *(void **)(a1 + 1656);
    *(_QWORD *)(a1 + 1664) = v32;
    v33 = *(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392);
    v34 = v33 >> 4;
    if (v33 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1672) - (_QWORD)v32) >> 2))
    {
      if (v33 < 0)
        sub_20E867F44();
      v35 = (char *)operator new((unint64_t)v33 >> 2);
      *(_QWORD *)(a1 + 1656) = v35;
      *(_QWORD *)(a1 + 1664) = v35;
      *(_QWORD *)(a1 + 1672) = &v35[4 * v34];
      if (v32)
        operator delete(v32);
    }
    v36 = *(void **)(a1 + 1680);
    *(_QWORD *)(a1 + 1688) = v36;
    v37 = *(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488);
    v38 = v37 >> 4;
    if (v37 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1696) - (_QWORD)v36) >> 2))
    {
      if (v37 < 0)
        sub_20E867F44();
      v39 = (char *)operator new((unint64_t)v37 >> 2);
      *(_QWORD *)(a1 + 1680) = v39;
      *(_QWORD *)(a1 + 1688) = v39;
      *(_QWORD *)(a1 + 1696) = &v39[4 * v38];
      if (v36)
        operator delete(v36);
    }
    v40 = *(void **)(a1 + 1704);
    *(_QWORD *)(a1 + 1712) = v40;
    v41 = *(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584);
    v42 = v41 >> 4;
    if (v41 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1720) - (_QWORD)v40) >> 2))
    {
      if (v41 < 0)
        sub_20E867F44();
      v43 = (char *)operator new((unint64_t)v41 >> 2);
      *(_QWORD *)(a1 + 1704) = v43;
      *(_QWORD *)(a1 + 1712) = v43;
      *(_QWORD *)(a1 + 1720) = &v43[4 * v42];
      if (v40)
        operator delete(v40);
    }
    v44 = *(void **)(a1 + 1728);
    *(_QWORD *)(a1 + 1736) = v44;
    v45 = *(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680);
    v46 = v45 >> 4;
    if (v45 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1744) - (_QWORD)v44) >> 2))
    {
      if (v45 < 0)
        sub_20E867F44();
      v47 = (char *)operator new((unint64_t)v45 >> 2);
      *(_QWORD *)(a1 + 1728) = v47;
      *(_QWORD *)(a1 + 1736) = v47;
      *(_QWORD *)(a1 + 1744) = &v47[4 * v46];
      if (v44)
        operator delete(v44);
    }
    v48 = *(_QWORD *)(a1 + 776);
    for (i = *(_QWORD *)(a1 + 784); v48 != i; v48 += 504)
    {
      v50 = *(_QWORD *)(v48 + 208);
      if (*(_BYTE *)(v48 + 496)
        || (*(_BYTE *)(v50 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v48 + 216) + 4) & 6) != 0)
      {
        *(_BYTE *)(v48 + 496) = 1;
        sub_20F394A20(a1 + 1560, v50);
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v48 + 216));
      }
    }
    v51 = *(_QWORD *)(a1 + 800);
    for (j = *(_QWORD *)(a1 + 808); v51 != j; v51 += 280)
    {
      v53 = *(_QWORD *)(v51 + 136);
      if (*(_BYTE *)(v51 + 272) || (*(_BYTE *)(v53 + 4) & 6) != 0)
      {
        *(_BYTE *)(v51 + 272) = 1;
        sub_20F394A20(a1 + 1560, v53);
      }
    }
    v54 = *(_QWORD *)(a1 + 824);
    for (k = *(_QWORD *)(a1 + 832); v54 != k; v54 += 8016)
    {
      v56 = *(_QWORD *)(v54 + 7696);
      if (*(_BYTE *)(v54 + 8008)
        || (*(_BYTE *)(v56 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7704) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7712) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7720) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7728) + 4) & 6) != 0)
      {
        *(_BYTE *)(v54 + 8008) = 1;
        sub_20F394A20(a1 + 1560, v56);
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v54 + 7704));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v54 + 7712));
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v54 + 7720));
        sub_20F599C88((_QWORD *)(a1 + 1560), *(_QWORD *)(v54 + 7728));
      }
    }
    v57 = *(_QWORD *)(a1 + 848);
    for (m = *(_QWORD *)(a1 + 856); v57 != m; v57 += 5336)
    {
      v59 = *(_QWORD *)(v57 + 5024);
      if (*(_BYTE *)(v57 + 5328)
        || (*(_BYTE *)(v59 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5032) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5040) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5048) + 4) & 6) != 0)
      {
        *(_BYTE *)(v57 + 5328) = 1;
        sub_20F394A20(a1 + 1560, v59);
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v57 + 5032));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v57 + 5040));
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v57 + 5048));
      }
    }
    v60 = *(_QWORD *)(a1 + 872);
    for (n = *(_QWORD *)(a1 + 880); v60 != n; v60 += 216)
    {
      v62 = *(_QWORD *)(v60 + 56);
      if (*(_BYTE *)(v60 + 208)
        || (*(_BYTE *)(v62 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 136) + 4) & 6) != 0)
      {
        *(_BYTE *)(v60 + 208) = 1;
        sub_20F59A480((_QWORD *)(a1 + 1560), v62);
        sub_20F59A480((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 64));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v60 + 72));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v60 + 80));
        sub_20F59A2E8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 88));
        sub_20F59A2E8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 96));
        sub_20F59A150((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 104));
        sub_20F59A150((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 112));
        sub_20F599FB8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 120));
        sub_20F599FB8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 128));
        sub_20F599E20((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 136));
      }
    }
    v63 = *(_QWORD *)(a1 + 896);
    for (ii = *(_QWORD *)(a1 + 904); v63 != ii; v63 += 888)
    {
      v65 = *(_QWORD *)(v63 + 736);
      if (*(_BYTE *)(v63 + 880)
        || (*(_BYTE *)(v65 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v63 + 744) + 4) & 6) != 0)
      {
        *(_BYTE *)(v63 + 880) = 1;
        sub_20F394A20(a1 + 1560, v65);
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v63 + 744));
      }
    }
    v66 = *(_QWORD *)(a1 + 1184);
    v67 = *(_QWORD *)(a1 + 1176);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v556 = (void **)(a1 + 1176);
    v68 = *(unsigned int **)(a1 + 1568);
    v69 = *(unsigned int **)(a1 + 1560);
    v70 = ((v66 - v67) >> 2) + v68 - v69;
    v71 = *(_BYTE **)(a1 + 1176);
    v524 = (v66 - v67) >> 2;
    v532 = v67;
    v540 = v66;
    if (v70 <= (uint64_t)(*(_QWORD *)(a1 + 1192) - (_QWORD)v71) >> 2)
    {
LABEL_107:
      if (v69 != v68)
      {
        v548 = v68;
        while (1)
        {
          v88 = *v69;
          v90 = *(char **)(a1 + 8);
          v89 = *(char **)(a1 + 16);
          if (v89 != v90)
          {
            v91 = (v89 - v90) >> 4;
            do
            {
              v92 = v91 >> 1;
              v93 = (unsigned int *)&v90[16 * (v91 >> 1)];
              v95 = *v93;
              v94 = (char *)(v93 + 4);
              v91 += ~(v91 >> 1);
              if (v95 < v88)
                v90 = v94;
              else
                v91 = v92;
            }
            while (v91);
          }
          if (v90 == v89 || *(_DWORD *)v90 != v88)
          {
            v88 = *(_DWORD *)v89;
            v90 = *(char **)(a1 + 16);
          }
          if ((*(_BYTE *)(*((_QWORD *)v90 + 1) + 4) & 6) != 0)
            goto LABEL_111;
          v96 = *(char **)(a1 + 1184);
          v97 = *(_QWORD *)(a1 + 1192);
          if ((unint64_t)v96 >= v97)
            break;
          *(_DWORD *)v96 = v88;
          v87 = (uint64_t)(v96 + 4);
LABEL_110:
          *(_QWORD *)(a1 + 1184) = v87;
          *(_BYTE *)(*((_QWORD *)v90 + 1) + 4) ^= 2u;
LABEL_111:
          if (++v69 == v68)
            goto LABEL_143;
        }
        v98 = (char *)*v556;
        v99 = v96 - (_BYTE *)*v556;
        v100 = v99 >> 2;
        v101 = (v99 >> 2) + 1;
        if (v101 >> 62)
          goto LABEL_578;
        v102 = v97 - (_QWORD)v98;
        if (v102 >> 1 > v101)
          v101 = v102 >> 1;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
          v103 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103)
        {
          if (v103 >> 62)
LABEL_579:
            sub_20E877A38();
          v104 = operator new(4 * v103);
          v105 = (unsigned int *)&v104[4 * v100];
          *v105 = v88;
          v87 = (uint64_t)(v105 + 1);
          v106 = v96 - v98;
          if (v96 == v98)
            goto LABEL_140;
        }
        else
        {
          v104 = 0;
          v105 = (unsigned int *)(4 * v100);
          *(_DWORD *)(4 * v100) = v88;
          v87 = 4 * v100 + 4;
          v106 = v96 - v98;
          if (v96 == v98)
          {
LABEL_140:
            *(_QWORD *)(a1 + 1176) = v105;
            *(_QWORD *)(a1 + 1184) = v87;
            *(_QWORD *)(a1 + 1192) = &v104[4 * v103];
            if (v98)
              operator delete(v98);
            v68 = v548;
            goto LABEL_110;
          }
        }
        v107 = v106 - 4;
        if (v107 < 0x2C)
          goto LABEL_590;
        if ((unint64_t)(v96 - v104 - v99) < 0x20)
          goto LABEL_590;
        v108 = (v107 >> 2) + 1;
        v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
        v110 = &v96[-v109];
        v105 = (unsigned int *)((char *)v105 - v109);
        v111 = &v104[4 * v100 - 16];
        v112 = v96 - 16;
        v113 = v108 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 8;
        }
        while (v113);
        v96 = v110;
        if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_590:
          do
          {
            v115 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *--v105 = v115;
          }
          while (v96 != v98);
        }
        goto LABEL_140;
      }
LABEL_143:
      if (v540 != v532)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v116 = *(__n128 **)(a1 + 1176);
        v117 = (char *)v116 + 4 * v524;
        v118 = *(__n128 **)(a1 + 1184);
        if (((char *)v118 - v117) >> 2 >= v524)
          v119 = v524;
        else
          v119 = ((char *)v118 - v117) >> 2;
        if (v119 < 1)
        {
LABEL_151:
          v123 = 0;
          v119 = 0;
        }
        else
        {
          v120 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v121 = (char *)operator new(4 * v119, v120);
            if (v121)
              break;
            v122 = (unint64_t)v119 > 1;
            v119 = (unint64_t)v119 >> 1;
            if (!v122)
              goto LABEL_151;
          }
          v123 = v121;
        }
        sub_20EDB30B0(v116, (__n128 *)((char *)v116 + 4 * v524), v118, (uint64_t)&v564, v524, ((char *)v118 - v117) >> 2, v123, v119);
        if (v123)
          operator delete(v123);
      }
      v124 = *(_QWORD *)(a1 + 1208);
      v125 = *(_QWORD *)(a1 + 1200);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v557 = (void **)(a1 + 1200);
      v126 = *(unsigned int **)(a1 + 1592);
      v127 = *(unsigned int **)(a1 + 1584);
      v128 = ((v124 - v125) >> 2) + v126 - v127;
      v129 = *(_BYTE **)(a1 + 1200);
      v525 = (v124 - v125) >> 2;
      v533 = v125;
      v541 = v124;
      if (v128 <= (uint64_t)(*(_QWORD *)(a1 + 1216) - (_QWORD)v129) >> 2)
      {
LABEL_167:
        if (v127 != v126)
        {
          v549 = v126;
          while (1)
          {
            v146 = *v127;
            v148 = *(char **)(a1 + 104);
            v147 = *(char **)(a1 + 112);
            if (v147 != v148)
            {
              v149 = (v147 - v148) >> 4;
              do
              {
                v150 = v149 >> 1;
                v151 = (unsigned int *)&v148[16 * (v149 >> 1)];
                v153 = *v151;
                v152 = (char *)(v151 + 4);
                v149 += ~(v149 >> 1);
                if (v153 < v146)
                  v148 = v152;
                else
                  v149 = v150;
              }
              while (v149);
            }
            if (v148 == v147 || *(_DWORD *)v148 != v146)
            {
              v146 = *(_DWORD *)v147;
              v148 = *(char **)(a1 + 112);
            }
            if ((*(_BYTE *)(*((_QWORD *)v148 + 1) + 4) & 6) != 0)
              goto LABEL_171;
            v154 = *(char **)(a1 + 1208);
            v155 = *(_QWORD *)(a1 + 1216);
            if ((unint64_t)v154 >= v155)
              break;
            *(_DWORD *)v154 = v146;
            v145 = (uint64_t)(v154 + 4);
LABEL_170:
            *(_QWORD *)(a1 + 1208) = v145;
            *(_BYTE *)(*((_QWORD *)v148 + 1) + 4) ^= 2u;
LABEL_171:
            if (++v127 == v126)
              goto LABEL_203;
          }
          v156 = (char *)*v557;
          v157 = v154 - (_BYTE *)*v557;
          v158 = v157 >> 2;
          v159 = (v157 >> 2) + 1;
          if (v159 >> 62)
            goto LABEL_578;
          v160 = v155 - (_QWORD)v156;
          if (v160 >> 1 > v159)
            v159 = v160 >> 1;
          if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
            v161 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v161 = v159;
          if (v161)
          {
            if (v161 >> 62)
              goto LABEL_579;
            v162 = operator new(4 * v161);
            v163 = (unsigned int *)&v162[4 * v158];
            *v163 = v146;
            v145 = (uint64_t)(v163 + 1);
            v164 = v154 - v156;
            if (v154 == v156)
              goto LABEL_200;
          }
          else
          {
            v162 = 0;
            v163 = (unsigned int *)(4 * v158);
            *(_DWORD *)(4 * v158) = v146;
            v145 = 4 * v158 + 4;
            v164 = v154 - v156;
            if (v154 == v156)
            {
LABEL_200:
              *(_QWORD *)(a1 + 1200) = v163;
              *(_QWORD *)(a1 + 1208) = v145;
              *(_QWORD *)(a1 + 1216) = &v162[4 * v161];
              if (v156)
                operator delete(v156);
              v126 = v549;
              goto LABEL_170;
            }
          }
          v165 = v164 - 4;
          if (v165 < 0x2C)
            goto LABEL_591;
          if ((unint64_t)(v154 - v162 - v157) < 0x20)
            goto LABEL_591;
          v166 = (v165 >> 2) + 1;
          v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
          v168 = &v154[-v167];
          v163 = (unsigned int *)((char *)v163 - v167);
          v169 = &v162[4 * v158 - 16];
          v170 = v154 - 16;
          v171 = v166 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v172 = *(_OWORD *)v170;
            *(v169 - 1) = *((_OWORD *)v170 - 1);
            *v169 = v172;
            v169 -= 2;
            v170 -= 32;
            v171 -= 8;
          }
          while (v171);
          v154 = v168;
          if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_591:
            do
            {
              v173 = *((_DWORD *)v154 - 1);
              v154 -= 4;
              *--v163 = v173;
            }
            while (v154 != v156);
          }
          goto LABEL_200;
        }
LABEL_203:
        if (v541 != v533)
        {
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v174 = *(__n128 **)(a1 + 1200);
          v175 = (char *)v174 + 4 * v525;
          v176 = *(__n128 **)(a1 + 1208);
          if (((char *)v176 - v175) >> 2 >= v525)
            v177 = v525;
          else
            v177 = ((char *)v176 - v175) >> 2;
          if (v177 < 1)
          {
LABEL_211:
            v180 = 0;
            v177 = 0;
          }
          else
          {
            v178 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            while (1)
            {
              v179 = (char *)operator new(4 * v177, v178);
              if (v179)
                break;
              v122 = (unint64_t)v177 > 1;
              v177 = (unint64_t)v177 >> 1;
              if (!v122)
                goto LABEL_211;
            }
            v180 = v179;
          }
          sub_20EDB30B0(v174, (__n128 *)((char *)v174 + 4 * v525), v176, (uint64_t)&v564, v525, ((char *)v176 - v175) >> 2, v180, v177);
          if (v180)
            operator delete(v180);
        }
        v181 = *(_QWORD *)(a1 + 1232);
        v182 = *(_QWORD *)(a1 + 1224);
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v558 = (void **)(a1 + 1224);
        v183 = *(unsigned int **)(a1 + 1616);
        v184 = *(unsigned int **)(a1 + 1608);
        v185 = ((v181 - v182) >> 2) + v183 - v184;
        v186 = *(_BYTE **)(a1 + 1224);
        v526 = (v181 - v182) >> 2;
        v534 = v182;
        v542 = v181;
        if (v185 <= (uint64_t)(*(_QWORD *)(a1 + 1240) - (_QWORD)v186) >> 2)
        {
LABEL_227:
          if (v184 != v183)
          {
            v550 = v183;
            while (1)
            {
              v203 = *v184;
              v205 = *(char **)(a1 + 200);
              v204 = *(char **)(a1 + 208);
              if (v204 != v205)
              {
                v206 = (v204 - v205) >> 4;
                do
                {
                  v207 = v206 >> 1;
                  v208 = (unsigned int *)&v205[16 * (v206 >> 1)];
                  v210 = *v208;
                  v209 = (char *)(v208 + 4);
                  v206 += ~(v206 >> 1);
                  if (v210 < v203)
                    v205 = v209;
                  else
                    v206 = v207;
                }
                while (v206);
              }
              if (v205 == v204 || *(_DWORD *)v205 != v203)
              {
                v203 = *(_DWORD *)v204;
                v205 = *(char **)(a1 + 208);
              }
              if ((*(_BYTE *)(*((_QWORD *)v205 + 1) + 4) & 6) != 0)
                goto LABEL_231;
              v211 = *(char **)(a1 + 1232);
              v212 = *(_QWORD *)(a1 + 1240);
              if ((unint64_t)v211 >= v212)
                break;
              *(_DWORD *)v211 = v203;
              v202 = (uint64_t)(v211 + 4);
LABEL_230:
              *(_QWORD *)(a1 + 1232) = v202;
              *(_BYTE *)(*((_QWORD *)v205 + 1) + 4) ^= 2u;
LABEL_231:
              if (++v184 == v183)
                goto LABEL_263;
            }
            v213 = (char *)*v558;
            v214 = v211 - (_BYTE *)*v558;
            v215 = v214 >> 2;
            v216 = (v214 >> 2) + 1;
            if (v216 >> 62)
              goto LABEL_578;
            v217 = v212 - (_QWORD)v213;
            if (v217 >> 1 > v216)
              v216 = v217 >> 1;
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
              v218 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v218 = v216;
            if (v218)
            {
              if (v218 >> 62)
                goto LABEL_579;
              v219 = operator new(4 * v218);
              v220 = (unsigned int *)&v219[4 * v215];
              *v220 = v203;
              v202 = (uint64_t)(v220 + 1);
              v221 = v211 - v213;
              if (v211 == v213)
                goto LABEL_260;
            }
            else
            {
              v219 = 0;
              v220 = (unsigned int *)(4 * v215);
              *(_DWORD *)(4 * v215) = v203;
              v202 = 4 * v215 + 4;
              v221 = v211 - v213;
              if (v211 == v213)
              {
LABEL_260:
                *(_QWORD *)(a1 + 1224) = v220;
                *(_QWORD *)(a1 + 1232) = v202;
                *(_QWORD *)(a1 + 1240) = &v219[4 * v218];
                if (v213)
                  operator delete(v213);
                v183 = v550;
                goto LABEL_230;
              }
            }
            v222 = v221 - 4;
            if (v222 < 0x2C)
              goto LABEL_592;
            if ((unint64_t)(v211 - v219 - v214) < 0x20)
              goto LABEL_592;
            v223 = (v222 >> 2) + 1;
            v224 = 4 * (v223 & 0x7FFFFFFFFFFFFFF8);
            v225 = &v211[-v224];
            v220 = (unsigned int *)((char *)v220 - v224);
            v226 = &v219[4 * v215 - 16];
            v227 = v211 - 16;
            v228 = v223 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v229 = *(_OWORD *)v227;
              *(v226 - 1) = *((_OWORD *)v227 - 1);
              *v226 = v229;
              v226 -= 2;
              v227 -= 32;
              v228 -= 8;
            }
            while (v228);
            v211 = v225;
            if (v223 != (v223 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_592:
              do
              {
                v230 = *((_DWORD *)v211 - 1);
                v211 -= 4;
                *--v220 = v230;
              }
              while (v211 != v213);
            }
            goto LABEL_260;
          }
LABEL_263:
          if (v542 != v534)
          {
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v231 = *(__n128 **)(a1 + 1224);
            v232 = (char *)v231 + 4 * v526;
            v233 = *(__n128 **)(a1 + 1232);
            if (((char *)v233 - v232) >> 2 >= v526)
              v234 = v526;
            else
              v234 = ((char *)v233 - v232) >> 2;
            if (v234 < 1)
            {
LABEL_271:
              v237 = 0;
              v234 = 0;
            }
            else
            {
              v235 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
              while (1)
              {
                v236 = (char *)operator new(4 * v234, v235);
                if (v236)
                  break;
                v122 = (unint64_t)v234 > 1;
                v234 = (unint64_t)v234 >> 1;
                if (!v122)
                  goto LABEL_271;
              }
              v237 = v236;
            }
            sub_20EDB30B0(v231, (__n128 *)((char *)v231 + 4 * v526), v233, (uint64_t)&v564, v526, ((char *)v233 - v232) >> 2, v237, v234);
            if (v237)
              operator delete(v237);
          }
          v238 = *(_QWORD *)(a1 + 1256);
          v239 = *(_QWORD *)(a1 + 1248);
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v559 = (void **)(a1 + 1248);
          v240 = *(unsigned int **)(a1 + 1640);
          v241 = *(unsigned int **)(a1 + 1632);
          v242 = ((v238 - v239) >> 2) + v240 - v241;
          v243 = *(_BYTE **)(a1 + 1248);
          v527 = (v238 - v239) >> 2;
          v535 = v239;
          v543 = v238;
          if (v242 <= (uint64_t)(*(_QWORD *)(a1 + 1264) - (_QWORD)v243) >> 2)
          {
LABEL_287:
            if (v241 != v240)
            {
              v551 = v240;
              while (1)
              {
                v260 = *v241;
                v262 = *(char **)(a1 + 296);
                v261 = *(char **)(a1 + 304);
                if (v261 != v262)
                {
                  v263 = (v261 - v262) >> 4;
                  do
                  {
                    v264 = v263 >> 1;
                    v265 = (unsigned int *)&v262[16 * (v263 >> 1)];
                    v267 = *v265;
                    v266 = (char *)(v265 + 4);
                    v263 += ~(v263 >> 1);
                    if (v267 < v260)
                      v262 = v266;
                    else
                      v263 = v264;
                  }
                  while (v263);
                }
                if (v262 == v261 || *(_DWORD *)v262 != v260)
                {
                  v260 = *(_DWORD *)v261;
                  v262 = *(char **)(a1 + 304);
                }
                if ((*(_BYTE *)(*((_QWORD *)v262 + 1) + 4) & 6) != 0)
                  goto LABEL_291;
                v268 = *(char **)(a1 + 1256);
                v269 = *(_QWORD *)(a1 + 1264);
                if ((unint64_t)v268 >= v269)
                  break;
                *(_DWORD *)v268 = v260;
                v259 = (uint64_t)(v268 + 4);
LABEL_290:
                *(_QWORD *)(a1 + 1256) = v259;
                *(_BYTE *)(*((_QWORD *)v262 + 1) + 4) ^= 2u;
LABEL_291:
                if (++v241 == v240)
                  goto LABEL_323;
              }
              v270 = (char *)*v559;
              v271 = v268 - (_BYTE *)*v559;
              v272 = v271 >> 2;
              v273 = (v271 >> 2) + 1;
              if (v273 >> 62)
                goto LABEL_578;
              v274 = v269 - (_QWORD)v270;
              if (v274 >> 1 > v273)
                v273 = v274 >> 1;
              if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
                v275 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v275 = v273;
              if (v275)
              {
                if (v275 >> 62)
                  goto LABEL_579;
                v276 = operator new(4 * v275);
                v277 = (unsigned int *)&v276[4 * v272];
                *v277 = v260;
                v259 = (uint64_t)(v277 + 1);
                v278 = v268 - v270;
                if (v268 == v270)
                  goto LABEL_320;
              }
              else
              {
                v276 = 0;
                v277 = (unsigned int *)(4 * v272);
                *(_DWORD *)(4 * v272) = v260;
                v259 = 4 * v272 + 4;
                v278 = v268 - v270;
                if (v268 == v270)
                {
LABEL_320:
                  *(_QWORD *)(a1 + 1248) = v277;
                  *(_QWORD *)(a1 + 1256) = v259;
                  *(_QWORD *)(a1 + 1264) = &v276[4 * v275];
                  if (v270)
                    operator delete(v270);
                  v240 = v551;
                  goto LABEL_290;
                }
              }
              v279 = v278 - 4;
              if (v279 < 0x2C)
                goto LABEL_593;
              if ((unint64_t)(v268 - v276 - v271) < 0x20)
                goto LABEL_593;
              v280 = (v279 >> 2) + 1;
              v281 = 4 * (v280 & 0x7FFFFFFFFFFFFFF8);
              v282 = &v268[-v281];
              v277 = (unsigned int *)((char *)v277 - v281);
              v283 = &v276[4 * v272 - 16];
              v284 = v268 - 16;
              v285 = v280 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v286 = *(_OWORD *)v284;
                *(v283 - 1) = *((_OWORD *)v284 - 1);
                *v283 = v286;
                v283 -= 2;
                v284 -= 32;
                v285 -= 8;
              }
              while (v285);
              v268 = v282;
              if (v280 != (v280 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_593:
                do
                {
                  v287 = *((_DWORD *)v268 - 1);
                  v268 -= 4;
                  *--v277 = v287;
                }
                while (v268 != v270);
              }
              goto LABEL_320;
            }
LABEL_323:
            if (v543 != v535)
            {
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v288 = *(__n128 **)(a1 + 1248);
              v289 = (char *)v288 + 4 * v527;
              v290 = *(__n128 **)(a1 + 1256);
              if (((char *)v290 - v289) >> 2 >= v527)
                v291 = v527;
              else
                v291 = ((char *)v290 - v289) >> 2;
              if (v291 < 1)
              {
LABEL_331:
                v294 = 0;
                v291 = 0;
              }
              else
              {
                v292 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                while (1)
                {
                  v293 = (char *)operator new(4 * v291, v292);
                  if (v293)
                    break;
                  v122 = (unint64_t)v291 > 1;
                  v291 = (unint64_t)v291 >> 1;
                  if (!v122)
                    goto LABEL_331;
                }
                v294 = v293;
              }
              sub_20EDB30B0(v288, (__n128 *)((char *)v288 + 4 * v527), v290, (uint64_t)&v564, v527, ((char *)v290 - v289) >> 2, v294, v291);
              if (v294)
                operator delete(v294);
            }
            v295 = *(_QWORD *)(a1 + 1280);
            v296 = *(_QWORD *)(a1 + 1272);
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v560 = (void **)(a1 + 1272);
            v297 = *(unsigned int **)(a1 + 1664);
            v298 = *(unsigned int **)(a1 + 1656);
            v299 = ((v295 - v296) >> 2) + v297 - v298;
            v300 = *(_BYTE **)(a1 + 1272);
            v528 = (v295 - v296) >> 2;
            v536 = v296;
            v544 = v295;
            if (v299 <= (uint64_t)(*(_QWORD *)(a1 + 1288) - (_QWORD)v300) >> 2)
            {
LABEL_347:
              if (v298 != v297)
              {
                v552 = v297;
                while (1)
                {
                  v317 = *v298;
                  v319 = *(char **)(a1 + 392);
                  v318 = *(char **)(a1 + 400);
                  if (v318 != v319)
                  {
                    v320 = (v318 - v319) >> 4;
                    do
                    {
                      v321 = v320 >> 1;
                      v322 = (unsigned int *)&v319[16 * (v320 >> 1)];
                      v324 = *v322;
                      v323 = (char *)(v322 + 4);
                      v320 += ~(v320 >> 1);
                      if (v324 < v317)
                        v319 = v323;
                      else
                        v320 = v321;
                    }
                    while (v320);
                  }
                  if (v319 == v318 || *(_DWORD *)v319 != v317)
                  {
                    v317 = *(_DWORD *)v318;
                    v319 = *(char **)(a1 + 400);
                  }
                  if ((*(_BYTE *)(*((_QWORD *)v319 + 1) + 4) & 6) != 0)
                    goto LABEL_351;
                  v325 = *(char **)(a1 + 1280);
                  v326 = *(_QWORD *)(a1 + 1288);
                  if ((unint64_t)v325 >= v326)
                    break;
                  *(_DWORD *)v325 = v317;
                  v316 = (uint64_t)(v325 + 4);
LABEL_350:
                  *(_QWORD *)(a1 + 1280) = v316;
                  *(_BYTE *)(*((_QWORD *)v319 + 1) + 4) ^= 2u;
LABEL_351:
                  if (++v298 == v297)
                    goto LABEL_383;
                }
                v327 = (char *)*v560;
                v328 = v325 - (_BYTE *)*v560;
                v329 = v328 >> 2;
                v330 = (v328 >> 2) + 1;
                if (v330 >> 62)
                  goto LABEL_578;
                v331 = v326 - (_QWORD)v327;
                if (v331 >> 1 > v330)
                  v330 = v331 >> 1;
                if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL)
                  v332 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v332 = v330;
                if (v332)
                {
                  if (v332 >> 62)
                    goto LABEL_579;
                  v333 = operator new(4 * v332);
                  v334 = (unsigned int *)&v333[4 * v329];
                  *v334 = v317;
                  v316 = (uint64_t)(v334 + 1);
                  v335 = v325 - v327;
                  if (v325 == v327)
                    goto LABEL_380;
                }
                else
                {
                  v333 = 0;
                  v334 = (unsigned int *)(4 * v329);
                  *(_DWORD *)(4 * v329) = v317;
                  v316 = 4 * v329 + 4;
                  v335 = v325 - v327;
                  if (v325 == v327)
                  {
LABEL_380:
                    *(_QWORD *)(a1 + 1272) = v334;
                    *(_QWORD *)(a1 + 1280) = v316;
                    *(_QWORD *)(a1 + 1288) = &v333[4 * v332];
                    if (v327)
                      operator delete(v327);
                    v297 = v552;
                    goto LABEL_350;
                  }
                }
                v336 = v335 - 4;
                if (v336 < 0x2C)
                  goto LABEL_594;
                if ((unint64_t)(v325 - v333 - v328) < 0x20)
                  goto LABEL_594;
                v337 = (v336 >> 2) + 1;
                v338 = 4 * (v337 & 0x7FFFFFFFFFFFFFF8);
                v339 = &v325[-v338];
                v334 = (unsigned int *)((char *)v334 - v338);
                v340 = &v333[4 * v329 - 16];
                v341 = v325 - 16;
                v342 = v337 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v343 = *(_OWORD *)v341;
                  *(v340 - 1) = *((_OWORD *)v341 - 1);
                  *v340 = v343;
                  v340 -= 2;
                  v341 -= 32;
                  v342 -= 8;
                }
                while (v342);
                v325 = v339;
                if (v337 != (v337 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_594:
                  do
                  {
                    v344 = *((_DWORD *)v325 - 1);
                    v325 -= 4;
                    *--v334 = v344;
                  }
                  while (v325 != v327);
                }
                goto LABEL_380;
              }
LABEL_383:
              if (v544 != v536)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v345 = *(__n128 **)(a1 + 1272);
                v346 = (char *)v345 + 4 * v528;
                v347 = *(__n128 **)(a1 + 1280);
                if (((char *)v347 - v346) >> 2 >= v528)
                  v348 = v528;
                else
                  v348 = ((char *)v347 - v346) >> 2;
                if (v348 < 1)
                {
LABEL_391:
                  v351 = 0;
                  v348 = 0;
                }
                else
                {
                  v349 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v350 = (char *)operator new(4 * v348, v349);
                    if (v350)
                      break;
                    v122 = (unint64_t)v348 > 1;
                    v348 = (unint64_t)v348 >> 1;
                    if (!v122)
                      goto LABEL_391;
                  }
                  v351 = v350;
                }
                sub_20EDB30B0(v345, (__n128 *)((char *)v345 + 4 * v528), v347, (uint64_t)&v564, v528, ((char *)v347 - v346) >> 2, v351, v348);
                if (v351)
                  operator delete(v351);
              }
              v352 = *(_QWORD *)(a1 + 1304);
              v353 = *(_QWORD *)(a1 + 1296);
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v561 = (void **)(a1 + 1296);
              v354 = *(unsigned int **)(a1 + 1688);
              v355 = *(unsigned int **)(a1 + 1680);
              v356 = ((v352 - v353) >> 2) + v354 - v355;
              v357 = *(_BYTE **)(a1 + 1296);
              v529 = (v352 - v353) >> 2;
              v537 = v353;
              v545 = v352;
              if (v356 <= (uint64_t)(*(_QWORD *)(a1 + 1312) - (_QWORD)v357) >> 2)
              {
LABEL_407:
                if (v355 != v354)
                {
                  v553 = v354;
                  while (1)
                  {
                    v374 = *v355;
                    v376 = *(char **)(a1 + 488);
                    v375 = *(char **)(a1 + 496);
                    if (v375 != v376)
                    {
                      v377 = (v375 - v376) >> 4;
                      do
                      {
                        v378 = v377 >> 1;
                        v379 = (unsigned int *)&v376[16 * (v377 >> 1)];
                        v381 = *v379;
                        v380 = (char *)(v379 + 4);
                        v377 += ~(v377 >> 1);
                        if (v381 < v374)
                          v376 = v380;
                        else
                          v377 = v378;
                      }
                      while (v377);
                    }
                    if (v376 == v375 || *(_DWORD *)v376 != v374)
                    {
                      v374 = *(_DWORD *)v375;
                      v376 = *(char **)(a1 + 496);
                    }
                    if ((*(_BYTE *)(*((_QWORD *)v376 + 1) + 4) & 6) != 0)
                      goto LABEL_411;
                    v382 = *(char **)(a1 + 1304);
                    v383 = *(_QWORD *)(a1 + 1312);
                    if ((unint64_t)v382 >= v383)
                      break;
                    *(_DWORD *)v382 = v374;
                    v373 = (uint64_t)(v382 + 4);
LABEL_410:
                    *(_QWORD *)(a1 + 1304) = v373;
                    *(_BYTE *)(*((_QWORD *)v376 + 1) + 4) ^= 2u;
LABEL_411:
                    if (++v355 == v354)
                      goto LABEL_443;
                  }
                  v384 = (char *)*v561;
                  v385 = v382 - (_BYTE *)*v561;
                  v386 = v385 >> 2;
                  v387 = (v385 >> 2) + 1;
                  if (v387 >> 62)
                    goto LABEL_578;
                  v388 = v383 - (_QWORD)v384;
                  if (v388 >> 1 > v387)
                    v387 = v388 >> 1;
                  if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL)
                    v389 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v389 = v387;
                  if (v389)
                  {
                    if (v389 >> 62)
                      goto LABEL_579;
                    v390 = operator new(4 * v389);
                    v391 = (unsigned int *)&v390[4 * v386];
                    *v391 = v374;
                    v373 = (uint64_t)(v391 + 1);
                    v392 = v382 - v384;
                    if (v382 == v384)
                      goto LABEL_440;
                  }
                  else
                  {
                    v390 = 0;
                    v391 = (unsigned int *)(4 * v386);
                    *(_DWORD *)(4 * v386) = v374;
                    v373 = 4 * v386 + 4;
                    v392 = v382 - v384;
                    if (v382 == v384)
                    {
LABEL_440:
                      *(_QWORD *)(a1 + 1296) = v391;
                      *(_QWORD *)(a1 + 1304) = v373;
                      *(_QWORD *)(a1 + 1312) = &v390[4 * v389];
                      if (v384)
                        operator delete(v384);
                      v354 = v553;
                      goto LABEL_410;
                    }
                  }
                  v393 = v392 - 4;
                  if (v393 < 0x2C)
                    goto LABEL_595;
                  if ((unint64_t)(v382 - v390 - v385) < 0x20)
                    goto LABEL_595;
                  v394 = (v393 >> 2) + 1;
                  v395 = 4 * (v394 & 0x7FFFFFFFFFFFFFF8);
                  v396 = &v382[-v395];
                  v391 = (unsigned int *)((char *)v391 - v395);
                  v397 = &v390[4 * v386 - 16];
                  v398 = v382 - 16;
                  v399 = v394 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v400 = *(_OWORD *)v398;
                    *(v397 - 1) = *((_OWORD *)v398 - 1);
                    *v397 = v400;
                    v397 -= 2;
                    v398 -= 32;
                    v399 -= 8;
                  }
                  while (v399);
                  v382 = v396;
                  if (v394 != (v394 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_595:
                    do
                    {
                      v401 = *((_DWORD *)v382 - 1);
                      v382 -= 4;
                      *--v391 = v401;
                    }
                    while (v382 != v384);
                  }
                  goto LABEL_440;
                }
LABEL_443:
                if (v545 != v537)
                {
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v402 = *(__n128 **)(a1 + 1296);
                  v403 = (char *)v402 + 4 * v529;
                  v404 = *(__n128 **)(a1 + 1304);
                  if (((char *)v404 - v403) >> 2 >= v529)
                    v405 = v529;
                  else
                    v405 = ((char *)v404 - v403) >> 2;
                  if (v405 < 1)
                  {
LABEL_451:
                    v408 = 0;
                    v405 = 0;
                  }
                  else
                  {
                    v406 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                    while (1)
                    {
                      v407 = (char *)operator new(4 * v405, v406);
                      if (v407)
                        break;
                      v122 = (unint64_t)v405 > 1;
                      v405 = (unint64_t)v405 >> 1;
                      if (!v122)
                        goto LABEL_451;
                    }
                    v408 = v407;
                  }
                  sub_20EDB30B0(v402, (__n128 *)((char *)v402 + 4 * v529), v404, (uint64_t)&v564, v529, ((char *)v404 - v403) >> 2, v408, v405);
                  if (v408)
                    operator delete(v408);
                }
                v409 = *(_QWORD *)(a1 + 1328);
                v410 = *(_QWORD *)(a1 + 1320);
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v562 = (void **)(a1 + 1320);
                v411 = *(unsigned int **)(a1 + 1712);
                v412 = *(unsigned int **)(a1 + 1704);
                v413 = ((v409 - v410) >> 2) + v411 - v412;
                v414 = *(_BYTE **)(a1 + 1320);
                v530 = (v409 - v410) >> 2;
                v538 = v410;
                v546 = v409;
                if (v413 <= (uint64_t)(*(_QWORD *)(a1 + 1336) - (_QWORD)v414) >> 2)
                {
LABEL_467:
                  if (v412 != v411)
                  {
                    v554 = v411;
                    while (1)
                    {
                      v431 = *v412;
                      v432 = *(char **)(a1 + 584);
                      v433 = *(char **)(a1 + 592);
                      if (v433 != v432)
                      {
                        v434 = (v433 - v432) >> 4;
                        do
                        {
                          v435 = v434 >> 1;
                          v436 = (unsigned int *)&v432[16 * (v434 >> 1)];
                          v438 = *v436;
                          v437 = (char *)(v436 + 4);
                          v434 += ~(v434 >> 1);
                          if (v438 < v431)
                            v432 = v437;
                          else
                            v434 = v435;
                        }
                        while (v434);
                      }
                      if (v432 == v433 || *(_DWORD *)v432 != v431)
                      {
                        v431 = *(_DWORD *)v433;
                        v432 = *(char **)(a1 + 592);
                      }
                      if ((*(_BYTE *)(*((_QWORD *)v432 + 1) + 4) & 6) != 0)
                        goto LABEL_471;
                      v439 = *(char **)(a1 + 1328);
                      v440 = *(_QWORD *)(a1 + 1336);
                      if ((unint64_t)v439 >= v440)
                        break;
                      *(_DWORD *)v439 = v431;
                      v430 = (uint64_t)(v439 + 4);
LABEL_470:
                      *(_QWORD *)(a1 + 1328) = v430;
                      *(_BYTE *)(*((_QWORD *)v432 + 1) + 4) ^= 2u;
LABEL_471:
                      if (++v412 == v411)
                        goto LABEL_503;
                    }
                    v441 = (char *)*v562;
                    v442 = v439 - (_BYTE *)*v562;
                    v443 = v442 >> 2;
                    v444 = (v442 >> 2) + 1;
                    if (v444 >> 62)
                      goto LABEL_578;
                    v445 = v440 - (_QWORD)v441;
                    if (v445 >> 1 > v444)
                      v444 = v445 >> 1;
                    if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL)
                      v446 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v446 = v444;
                    if (v446)
                    {
                      if (v446 >> 62)
                        goto LABEL_579;
                      v447 = operator new(4 * v446);
                      v448 = (unsigned int *)&v447[4 * v443];
                      *v448 = v431;
                      v430 = (uint64_t)(v448 + 1);
                      v449 = v439 - v441;
                      if (v439 == v441)
                        goto LABEL_500;
                    }
                    else
                    {
                      v447 = 0;
                      v448 = (unsigned int *)(4 * v443);
                      *(_DWORD *)(4 * v443) = v431;
                      v430 = 4 * v443 + 4;
                      v449 = v439 - v441;
                      if (v439 == v441)
                      {
LABEL_500:
                        *(_QWORD *)(a1 + 1320) = v448;
                        *(_QWORD *)(a1 + 1328) = v430;
                        *(_QWORD *)(a1 + 1336) = &v447[4 * v446];
                        if (v441)
                          operator delete(v441);
                        v411 = v554;
                        goto LABEL_470;
                      }
                    }
                    v450 = v449 - 4;
                    if (v450 < 0x2C)
                      goto LABEL_596;
                    if ((unint64_t)(v439 - v447 - v442) < 0x20)
                      goto LABEL_596;
                    v451 = (v450 >> 2) + 1;
                    v452 = 4 * (v451 & 0x7FFFFFFFFFFFFFF8);
                    v453 = &v439[-v452];
                    v448 = (unsigned int *)((char *)v448 - v452);
                    v454 = &v447[4 * v443 - 16];
                    v455 = v439 - 16;
                    v456 = v451 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v457 = *(_OWORD *)v455;
                      *(v454 - 1) = *((_OWORD *)v455 - 1);
                      *v454 = v457;
                      v454 -= 2;
                      v455 -= 32;
                      v456 -= 8;
                    }
                    while (v456);
                    v439 = v453;
                    if (v451 != (v451 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_596:
                      do
                      {
                        v458 = *((_DWORD *)v439 - 1);
                        v439 -= 4;
                        *--v448 = v458;
                      }
                      while (v439 != v441);
                    }
                    goto LABEL_500;
                  }
LABEL_503:
                  if (v546 != v538)
                  {
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v459 = *(__n128 **)(a1 + 1320);
                    v460 = (char *)v459 + 4 * v530;
                    v461 = *(__n128 **)(a1 + 1328);
                    if (((char *)v461 - v460) >> 2 >= v530)
                      v462 = v530;
                    else
                      v462 = ((char *)v461 - v460) >> 2;
                    if (v462 < 1)
                    {
LABEL_511:
                      v465 = 0;
                      v462 = 0;
                    }
                    else
                    {
                      v463 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                      while (1)
                      {
                        v464 = (char *)operator new(4 * v462, v463);
                        if (v464)
                          break;
                        v122 = (unint64_t)v462 > 1;
                        v462 = (unint64_t)v462 >> 1;
                        if (!v122)
                          goto LABEL_511;
                      }
                      v465 = v464;
                    }
                    sub_20EDB30B0(v459, (__n128 *)((char *)v459 + 4 * v530), v461, (uint64_t)&v564, v530, ((char *)v461 - v460) >> 2, v465, v462);
                    if (v465)
                      operator delete(v465);
                  }
                  v466 = *(_QWORD *)(a1 + 1352);
                  v467 = *(_QWORD *)(a1 + 1344);
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v563 = (void **)(a1 + 1344);
                  v468 = *(unsigned int **)(a1 + 1736);
                  v469 = *(unsigned int **)(a1 + 1728);
                  v470 = ((v466 - v467) >> 2) + v468 - v469;
                  v471 = *(_BYTE **)(a1 + 1344);
                  v531 = (v466 - v467) >> 2;
                  v539 = v467;
                  v547 = v466;
                  if (v470 <= (uint64_t)(*(_QWORD *)(a1 + 1360) - (_QWORD)v471) >> 2)
                    goto LABEL_527;
                  if (!(v470 >> 62))
                  {
                    v472 = *(unsigned int **)(a1 + 1736);
                    v473 = *(_BYTE **)(a1 + 1352);
                    v474 = (char *)operator new(4 * v470);
                    v475 = v473 - v471;
                    v476 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    v477 = v476;
                    if (v473 == v471)
                      goto LABEL_525;
                    if ((unint64_t)(v475 - 4) >= 0x2C)
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v473[-(v475 & 0xFFFFFFFFFFFFFFFCLL)] - v474) >= 0x20)
                      {
                        v478 = v475 >> 2;
                        v479 = ((unint64_t)(v475 - 4) >> 2) + 1;
                        v480 = 4 * (v479 & 0x7FFFFFFFFFFFFFF8);
                        v481 = &v473[-v480];
                        v477 = &v476[-v480];
                        v482 = &v474[4 * v478 - 16];
                        v483 = (__int128 *)(v473 - 16);
                        v484 = v479 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v485 = *v483;
                          *((_OWORD *)v482 - 1) = *(v483 - 1);
                          *(_OWORD *)v482 = v485;
                          v482 -= 32;
                          v483 -= 2;
                          v484 -= 8;
                        }
                        while (v484);
                        v473 = v481;
                        if (v479 == (v479 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_525:
                          *(_QWORD *)(a1 + 1344) = v477;
                          *(_QWORD *)(a1 + 1352) = v476;
                          *(_QWORD *)(a1 + 1360) = &v474[4 * v470];
                          v468 = v472;
                          if (v471)
                          {
                            operator delete(v471);
                            v469 = *(unsigned int **)(a1 + 1728);
                            v468 = *(unsigned int **)(a1 + 1736);
                          }
LABEL_527:
                          if (v469 != v468)
                          {
                            v555 = v468;
                            while (1)
                            {
                              v488 = *v469;
                              v489 = *(char **)(a1 + 680);
                              v490 = *(char **)(a1 + 688);
                              if (v490 != v489)
                              {
                                v491 = (v490 - v489) >> 4;
                                do
                                {
                                  v492 = v491 >> 1;
                                  v493 = (unsigned int *)&v489[16 * (v491 >> 1)];
                                  v495 = *v493;
                                  v494 = (char *)(v493 + 4);
                                  v491 += ~(v491 >> 1);
                                  if (v495 < v488)
                                    v489 = v494;
                                  else
                                    v491 = v492;
                                }
                                while (v491);
                              }
                              if (v489 == v490 || *(_DWORD *)v489 != v488)
                              {
                                v488 = *(_DWORD *)v490;
                                v489 = *(char **)(a1 + 688);
                              }
                              if ((*(_BYTE *)(*((_QWORD *)v489 + 1) + 4) & 6) != 0)
                                goto LABEL_531;
                              v496 = *(char **)(a1 + 1352);
                              v497 = *(_QWORD *)(a1 + 1360);
                              if ((unint64_t)v496 >= v497)
                                break;
                              *(_DWORD *)v496 = v488;
                              v487 = (uint64_t)(v496 + 4);
LABEL_530:
                              *(_QWORD *)(a1 + 1352) = v487;
                              *(_BYTE *)(*((_QWORD *)v489 + 1) + 4) ^= 2u;
LABEL_531:
                              if (++v469 == v468)
                                goto LABEL_563;
                            }
                            v498 = (char *)*v563;
                            v499 = v496 - (_BYTE *)*v563;
                            v500 = v499 >> 2;
                            v501 = (v499 >> 2) + 1;
                            if (v501 >> 62)
                              goto LABEL_578;
                            v502 = v497 - (_QWORD)v498;
                            if (v502 >> 1 > v501)
                              v501 = v502 >> 1;
                            if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL)
                              v503 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v503 = v501;
                            if (v503)
                            {
                              if (v503 >> 62)
                                goto LABEL_579;
                              v504 = operator new(4 * v503);
                              v505 = (unsigned int *)&v504[4 * v500];
                              *v505 = v488;
                              v487 = (uint64_t)(v505 + 1);
                              v506 = v496 - v498;
                              if (v496 == v498)
                                goto LABEL_560;
                            }
                            else
                            {
                              v504 = 0;
                              v505 = (unsigned int *)(4 * v500);
                              *(_DWORD *)(4 * v500) = v488;
                              v487 = 4 * v500 + 4;
                              v506 = v496 - v498;
                              if (v496 == v498)
                              {
LABEL_560:
                                *(_QWORD *)(a1 + 1344) = v505;
                                *(_QWORD *)(a1 + 1352) = v487;
                                *(_QWORD *)(a1 + 1360) = &v504[4 * v503];
                                if (v498)
                                  operator delete(v498);
                                v468 = v555;
                                goto LABEL_530;
                              }
                            }
                            v507 = v506 - 4;
                            if (v507 < 0x2C)
                              goto LABEL_597;
                            if ((unint64_t)(v496 - v504 - v499) < 0x20)
                              goto LABEL_597;
                            v508 = (v507 >> 2) + 1;
                            v509 = 4 * (v508 & 0x7FFFFFFFFFFFFFF8);
                            v510 = &v496[-v509];
                            v505 = (unsigned int *)((char *)v505 - v509);
                            v511 = &v504[4 * v500 - 16];
                            v512 = v496 - 16;
                            v513 = v508 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              v514 = *(_OWORD *)v512;
                              *(v511 - 1) = *((_OWORD *)v512 - 1);
                              *v511 = v514;
                              v511 -= 2;
                              v512 -= 32;
                              v513 -= 8;
                            }
                            while (v513);
                            v496 = v510;
                            if (v508 != (v508 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_597:
                              do
                              {
                                v515 = *((_DWORD *)v496 - 1);
                                v496 -= 4;
                                *--v505 = v515;
                              }
                              while (v496 != v498);
                            }
                            goto LABEL_560;
                          }
LABEL_563:
                          if (v547 != v539)
                          {
                            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                            v516 = *(__n128 **)(a1 + 1344);
                            v517 = (char *)v516 + 4 * v531;
                            v518 = *(__n128 **)(a1 + 1352);
                            if (((char *)v518 - v517) >> 2 >= v531)
                              v519 = v531;
                            else
                              v519 = ((char *)v518 - v517) >> 2;
                            if (v519 < 1)
                            {
LABEL_571:
                              v522 = 0;
                              v519 = 0;
                            }
                            else
                            {
                              v520 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                              while (1)
                              {
                                v521 = (char *)operator new(4 * v519, v520);
                                if (v521)
                                  break;
                                v122 = (unint64_t)v519 > 1;
                                v519 = (unint64_t)v519 >> 1;
                                if (!v122)
                                  goto LABEL_571;
                              }
                              v522 = v521;
                            }
                            sub_20EDB30B0(v516, (__n128 *)((char *)v516 + 4 * v531), v518, (uint64_t)&v564, v531, ((char *)v518 - v517) >> 2, v522, v519);
                            if (v522)
                              operator delete(v522);
                          }
                          sub_20F59A618((_QWORD *)a1);
                          goto LABEL_576;
                        }
                      }
                    }
                    else
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    }
                    do
                    {
                      v486 = *((_DWORD *)v473 - 1);
                      v473 -= 4;
                      *((_DWORD *)v477 - 1) = v486;
                      v477 -= 4;
                    }
                    while (v473 != v471);
                    goto LABEL_525;
                  }
LABEL_578:
                  sub_20E867F44();
                }
                if (v413 >> 62)
                  goto LABEL_578;
                v415 = *(unsigned int **)(a1 + 1712);
                v416 = *(_BYTE **)(a1 + 1328);
                v417 = (char *)operator new(4 * v413);
                v418 = v416 - v414;
                v419 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                v420 = v419;
                if (v416 != v414)
                {
                  if ((unint64_t)(v418 - 4) < 0x2C)
                  {
                    v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                    do
                    {
LABEL_464:
                      v429 = *((_DWORD *)v416 - 1);
                      v416 -= 4;
                      *((_DWORD *)v420 - 1) = v429;
                      v420 -= 4;
                    }
                    while (v416 != v414);
                    goto LABEL_465;
                  }
                  v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((unint64_t)(&v416[-(v418 & 0xFFFFFFFFFFFFFFFCLL)] - v417) < 0x20)
                    goto LABEL_464;
                  v421 = v418 >> 2;
                  v422 = ((unint64_t)(v418 - 4) >> 2) + 1;
                  v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
                  v424 = &v416[-v423];
                  v420 = &v419[-v423];
                  v425 = &v417[4 * v421 - 16];
                  v426 = (__int128 *)(v416 - 16);
                  v427 = v422 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v428 = *v426;
                    *((_OWORD *)v425 - 1) = *(v426 - 1);
                    *(_OWORD *)v425 = v428;
                    v425 -= 32;
                    v426 -= 2;
                    v427 -= 8;
                  }
                  while (v427);
                  v416 = v424;
                  if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_464;
                }
LABEL_465:
                *(_QWORD *)(a1 + 1320) = v420;
                *(_QWORD *)(a1 + 1328) = v419;
                *(_QWORD *)(a1 + 1336) = &v417[4 * v413];
                v411 = v415;
                if (v414)
                {
                  operator delete(v414);
                  v412 = *(unsigned int **)(a1 + 1704);
                  v411 = *(unsigned int **)(a1 + 1712);
                }
                goto LABEL_467;
              }
              if (v356 >> 62)
                goto LABEL_578;
              v358 = *(unsigned int **)(a1 + 1688);
              v359 = *(_BYTE **)(a1 + 1304);
              v360 = (char *)operator new(4 * v356);
              v361 = v359 - v357;
              v362 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
              v363 = v362;
              if (v359 != v357)
              {
                if ((unint64_t)(v361 - 4) < 0x2C)
                {
                  v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                  do
                  {
LABEL_404:
                    v372 = *((_DWORD *)v359 - 1);
                    v359 -= 4;
                    *((_DWORD *)v363 - 1) = v372;
                    v363 -= 4;
                  }
                  while (v359 != v357);
                  goto LABEL_405;
                }
                v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(&v359[-(v361 & 0xFFFFFFFFFFFFFFFCLL)] - v360) < 0x20)
                  goto LABEL_404;
                v364 = v361 >> 2;
                v365 = ((unint64_t)(v361 - 4) >> 2) + 1;
                v366 = 4 * (v365 & 0x7FFFFFFFFFFFFFF8);
                v367 = &v359[-v366];
                v363 = &v362[-v366];
                v368 = &v360[4 * v364 - 16];
                v369 = (__int128 *)(v359 - 16);
                v370 = v365 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v371 = *v369;
                  *((_OWORD *)v368 - 1) = *(v369 - 1);
                  *(_OWORD *)v368 = v371;
                  v368 -= 32;
                  v369 -= 2;
                  v370 -= 8;
                }
                while (v370);
                v359 = v367;
                if (v365 != (v365 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_404;
              }
LABEL_405:
              *(_QWORD *)(a1 + 1296) = v363;
              *(_QWORD *)(a1 + 1304) = v362;
              *(_QWORD *)(a1 + 1312) = &v360[4 * v356];
              v354 = v358;
              if (v357)
              {
                operator delete(v357);
                v355 = *(unsigned int **)(a1 + 1680);
                v354 = *(unsigned int **)(a1 + 1688);
              }
              goto LABEL_407;
            }
            if (v299 >> 62)
              goto LABEL_578;
            v301 = *(unsigned int **)(a1 + 1664);
            v302 = *(_BYTE **)(a1 + 1280);
            v303 = (char *)operator new(4 * v299);
            v304 = v302 - v300;
            v305 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
            v306 = v305;
            if (v302 != v300)
            {
              if ((unint64_t)(v304 - 4) < 0x2C)
              {
                v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
                do
                {
LABEL_344:
                  v315 = *((_DWORD *)v302 - 1);
                  v302 -= 4;
                  *((_DWORD *)v306 - 1) = v315;
                  v306 -= 4;
                }
                while (v302 != v300);
                goto LABEL_345;
              }
              v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(&v302[-(v304 & 0xFFFFFFFFFFFFFFFCLL)] - v303) < 0x20)
                goto LABEL_344;
              v307 = v304 >> 2;
              v308 = ((unint64_t)(v304 - 4) >> 2) + 1;
              v309 = 4 * (v308 & 0x7FFFFFFFFFFFFFF8);
              v310 = &v302[-v309];
              v306 = &v305[-v309];
              v311 = &v303[4 * v307 - 16];
              v312 = (__int128 *)(v302 - 16);
              v313 = v308 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v314 = *v312;
                *((_OWORD *)v311 - 1) = *(v312 - 1);
                *(_OWORD *)v311 = v314;
                v311 -= 32;
                v312 -= 2;
                v313 -= 8;
              }
              while (v313);
              v302 = v310;
              if (v308 != (v308 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_344;
            }
LABEL_345:
            *(_QWORD *)(a1 + 1272) = v306;
            *(_QWORD *)(a1 + 1280) = v305;
            *(_QWORD *)(a1 + 1288) = &v303[4 * v299];
            v297 = v301;
            if (v300)
            {
              operator delete(v300);
              v298 = *(unsigned int **)(a1 + 1656);
              v297 = *(unsigned int **)(a1 + 1664);
            }
            goto LABEL_347;
          }
          if (v242 >> 62)
            goto LABEL_578;
          v244 = *(unsigned int **)(a1 + 1640);
          v245 = *(_BYTE **)(a1 + 1256);
          v246 = (char *)operator new(4 * v242);
          v247 = v245 - v243;
          v248 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
          v249 = v248;
          if (v245 != v243)
          {
            if ((unint64_t)(v247 - 4) < 0x2C)
            {
              v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
              do
              {
LABEL_284:
                v258 = *((_DWORD *)v245 - 1);
                v245 -= 4;
                *((_DWORD *)v249 - 1) = v258;
                v249 -= 4;
              }
              while (v245 != v243);
              goto LABEL_285;
            }
            v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
            if ((unint64_t)(&v245[-(v247 & 0xFFFFFFFFFFFFFFFCLL)] - v246) < 0x20)
              goto LABEL_284;
            v250 = v247 >> 2;
            v251 = ((unint64_t)(v247 - 4) >> 2) + 1;
            v252 = 4 * (v251 & 0x7FFFFFFFFFFFFFF8);
            v253 = &v245[-v252];
            v249 = &v248[-v252];
            v254 = &v246[4 * v250 - 16];
            v255 = (__int128 *)(v245 - 16);
            v256 = v251 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v257 = *v255;
              *((_OWORD *)v254 - 1) = *(v255 - 1);
              *(_OWORD *)v254 = v257;
              v254 -= 32;
              v255 -= 2;
              v256 -= 8;
            }
            while (v256);
            v245 = v253;
            if (v251 != (v251 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_284;
          }
LABEL_285:
          *(_QWORD *)(a1 + 1248) = v249;
          *(_QWORD *)(a1 + 1256) = v248;
          *(_QWORD *)(a1 + 1264) = &v246[4 * v242];
          v240 = v244;
          if (v243)
          {
            operator delete(v243);
            v241 = *(unsigned int **)(a1 + 1632);
            v240 = *(unsigned int **)(a1 + 1640);
          }
          goto LABEL_287;
        }
        if (v185 >> 62)
          goto LABEL_578;
        v187 = *(unsigned int **)(a1 + 1616);
        v188 = *(_BYTE **)(a1 + 1232);
        v189 = (char *)operator new(4 * v185);
        v190 = v188 - v186;
        v191 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
        v192 = v191;
        if (v188 != v186)
        {
          if ((unint64_t)(v190 - 4) < 0x2C)
          {
            v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_224:
              v201 = *((_DWORD *)v188 - 1);
              v188 -= 4;
              *((_DWORD *)v192 - 1) = v201;
              v192 -= 4;
            }
            while (v188 != v186);
            goto LABEL_225;
          }
          v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v188[-(v190 & 0xFFFFFFFFFFFFFFFCLL)] - v189) < 0x20)
            goto LABEL_224;
          v193 = v190 >> 2;
          v194 = ((unint64_t)(v190 - 4) >> 2) + 1;
          v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
          v196 = &v188[-v195];
          v192 = &v191[-v195];
          v197 = &v189[4 * v193 - 16];
          v198 = (__int128 *)(v188 - 16);
          v199 = v194 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v200 = *v198;
            *((_OWORD *)v197 - 1) = *(v198 - 1);
            *(_OWORD *)v197 = v200;
            v197 -= 32;
            v198 -= 2;
            v199 -= 8;
          }
          while (v199);
          v188 = v196;
          if (v194 != (v194 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_224;
        }
LABEL_225:
        *(_QWORD *)(a1 + 1224) = v192;
        *(_QWORD *)(a1 + 1232) = v191;
        *(_QWORD *)(a1 + 1240) = &v189[4 * v185];
        v183 = v187;
        if (v186)
        {
          operator delete(v186);
          v184 = *(unsigned int **)(a1 + 1608);
          v183 = *(unsigned int **)(a1 + 1616);
        }
        goto LABEL_227;
      }
      if (v128 >> 62)
        goto LABEL_578;
      v130 = *(unsigned int **)(a1 + 1592);
      v131 = *(_BYTE **)(a1 + 1208);
      v132 = (char *)operator new(4 * v128);
      v133 = v131 - v129;
      v134 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
      v135 = v134;
      if (v131 != v129)
      {
        if ((unint64_t)(v133 - 4) < 0x2C)
        {
          v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_164:
            v144 = *((_DWORD *)v131 - 1);
            v131 -= 4;
            *((_DWORD *)v135 - 1) = v144;
            v135 -= 4;
          }
          while (v131 != v129);
          goto LABEL_165;
        }
        v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v131[-(v133 & 0xFFFFFFFFFFFFFFFCLL)] - v132) < 0x20)
          goto LABEL_164;
        v136 = v133 >> 2;
        v137 = ((unint64_t)(v133 - 4) >> 2) + 1;
        v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
        v139 = &v131[-v138];
        v135 = &v134[-v138];
        v140 = &v132[4 * v136 - 16];
        v141 = (__int128 *)(v131 - 16);
        v142 = v137 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v143 = *v141;
          *((_OWORD *)v140 - 1) = *(v141 - 1);
          *(_OWORD *)v140 = v143;
          v140 -= 32;
          v141 -= 2;
          v142 -= 8;
        }
        while (v142);
        v131 = v139;
        if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_164;
      }
LABEL_165:
      *(_QWORD *)(a1 + 1200) = v135;
      *(_QWORD *)(a1 + 1208) = v134;
      *(_QWORD *)(a1 + 1216) = &v132[4 * v128];
      v126 = v130;
      if (v129)
      {
        operator delete(v129);
        v127 = *(unsigned int **)(a1 + 1584);
        v126 = *(unsigned int **)(a1 + 1592);
      }
      goto LABEL_167;
    }
    if (v70 >> 62)
      goto LABEL_578;
    v72 = *(unsigned int **)(a1 + 1568);
    v73 = *(_BYTE **)(a1 + 1184);
    v74 = (char *)operator new(4 * v70);
    v75 = v73 - v71;
    v76 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
    v77 = v76;
    if (v73 != v71)
    {
      if ((unint64_t)(v75 - 4) < 0x2C)
      {
        v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_104:
          v86 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v77 - 1) = v86;
          v77 -= 4;
        }
        while (v73 != v71);
        goto LABEL_105;
      }
      v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v73 - &v74[v75 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
        goto LABEL_104;
      v78 = v75 >> 2;
      v79 = ((unint64_t)(v75 - 4) >> 2) + 1;
      v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
      v81 = &v73[-v80];
      v77 = &v76[-v80];
      v82 = &v74[4 * v78 - 16];
      v83 = (__int128 *)(v73 - 16);
      v84 = v79 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v85 = *v83;
        *((_OWORD *)v82 - 1) = *(v83 - 1);
        *(_OWORD *)v82 = v85;
        v82 -= 32;
        v83 -= 2;
        v84 -= 8;
      }
      while (v84);
      v73 = v81;
      if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_104;
    }
LABEL_105:
    *(_QWORD *)(a1 + 1176) = v77;
    *(_QWORD *)(a1 + 1184) = v76;
    *(_QWORD *)(a1 + 1192) = &v74[4 * v70];
    v68 = v72;
    if (v71)
    {
      operator delete(v71);
      v69 = *(unsigned int **)(a1 + 1560);
      v68 = *(unsigned int **)(a1 + 1568);
    }
    goto LABEL_107;
  }
  return a1 + 984;
}

void sub_20F6B8744(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20F59A618(v1);
    _Unwind_Resume(a1);
  }
  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F6B87CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v4 = (_QWORD *)a2[15];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a2[13];
  a2[13] = 0;
  if (v6)
    operator delete(v6);
  v7 = (void *)a2[10];
  if (v7)
  {
    a2[11] = v7;
    operator delete(v7);
  }
  v8 = *(_DWORD *)(a1 + 32);
  if (!v8)
  {
    v14 = *(char **)(a1 + 48);
    v13 = *(char **)(a1 + 56);
    v15 = v13 - v14;
    v16 = (v13 - v14) >> 3;
    if (-v16 == 1)
    {
LABEL_20:
      *(_QWORD *)(a1 + 56) = v14;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
LABEL_12:
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v13 < v17)
    {
      *(_QWORD *)v13 = a2;
      v18 = (uint64_t)(v13 + 8);
LABEL_48:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v22 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v23 = v17 - (_QWORD)v14;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        sub_20E877A38();
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v16];
      v27 = &v25[8 * v24];
      *v26 = a2;
      v18 = (uint64_t)(v26 + 1);
      v28 = (char *)(v13 - v14);
      if (v13 == v14)
        goto LABEL_46;
    }
    else
    {
      v25 = 0;
      v26 = (_QWORD *)(8 * v16);
      v27 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v28 = (char *)(v13 - v14);
      if (v13 == v14)
      {
LABEL_46:
        *(_QWORD *)(a1 + 48) = v26;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v27;
        if (v13)
          operator delete(v13);
        goto LABEL_48;
      }
    }
    v31 = (unint64_t)(v28 - 8);
    if (v31 < 0x58)
      goto LABEL_55;
    if ((unint64_t)(v13 - &v25[v15]) < 0x20)
      goto LABEL_55;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v13[-v33];
    v26 = (_QWORD *)((char *)v26 - v33);
    v35 = &v25[8 * v16 - 16];
    v36 = v13 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v13 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        v39 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v26 = v39;
      }
      while (v13 != v14);
    }
    v13 = *(char **)(a1 + 48);
    goto LABEL_46;
  }
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v10 - 1;
  if ((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v8 - 1)) + 200 * (v10 - 1)) != a2)
  {
    if (v8 == 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v21 = 8;
      do
      {
        v12 += v21;
        v21 *= 2;
        --v9;
      }
      while (v9);
    }
    v14 = *(char **)(a1 + 48);
    v13 = *(char **)(a1 + 56);
    v15 = v13 - v14;
    v16 = (v13 - v14) >> 3;
    if (v12 + v10 - v16 == 1)
      goto LABEL_20;
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 40) = v11;
  if (v10 != 1)
  {
    v19 = 0;
    v20 = v8 - 1;
    if (v8 == 1)
      goto LABEL_36;
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v8 == 1)
  {
    if (!((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
      goto LABEL_37;
    return;
  }
  v11 = 8 << (v8 - 2);
  *(_QWORD *)(a1 + 40) = v11;
  v29 = v8 - 1;
  v19 = 0;
  v20 = v29 - 1;
  if (v29 != 1)
  {
LABEL_34:
    v30 = 8;
    do
    {
      v19 += v30;
      v30 *= 2;
      --v20;
    }
    while (v20);
  }
LABEL_36:
  if (v19 + v11 == (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
  {
LABEL_37:
    sub_20F64F468(a1);
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  }
}

void sub_20F6B8ACC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v4 = (_QWORD *)a2[37];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a2[35];
  a2[35] = 0;
  if (v6)
    operator delete(v6);
  v7 = (void *)a2[32];
  if (v7)
  {
    a2[33] = v7;
    operator delete(v7);
  }
  v8 = *(_DWORD *)(a1 + 32);
  if (!v8)
  {
    v14 = *(char **)(a1 + 48);
    v13 = *(char **)(a1 + 56);
    v15 = v13 - v14;
    v16 = (v13 - v14) >> 3;
    if (-v16 == 1)
    {
LABEL_20:
      *(_QWORD *)(a1 + 56) = v14;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
LABEL_12:
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v13 < v17)
    {
      *(_QWORD *)v13 = a2;
      v18 = (uint64_t)(v13 + 8);
LABEL_48:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v22 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v23 = v17 - (_QWORD)v14;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        sub_20E877A38();
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v16];
      v27 = &v25[8 * v24];
      *v26 = a2;
      v18 = (uint64_t)(v26 + 1);
      v28 = (char *)(v13 - v14);
      if (v13 == v14)
        goto LABEL_46;
    }
    else
    {
      v25 = 0;
      v26 = (_QWORD *)(8 * v16);
      v27 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v28 = (char *)(v13 - v14);
      if (v13 == v14)
      {
LABEL_46:
        *(_QWORD *)(a1 + 48) = v26;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v27;
        if (v13)
          operator delete(v13);
        goto LABEL_48;
      }
    }
    v31 = (unint64_t)(v28 - 8);
    if (v31 < 0x58)
      goto LABEL_55;
    if ((unint64_t)(v13 - &v25[v15]) < 0x20)
      goto LABEL_55;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v13[-v33];
    v26 = (_QWORD *)((char *)v26 - v33);
    v35 = &v25[8 * v16 - 16];
    v36 = v13 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v13 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        v39 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v26 = v39;
      }
      while (v13 != v14);
    }
    v13 = *(char **)(a1 + 48);
    goto LABEL_46;
  }
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v10 - 1;
  if ((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v8 - 1)) + 552 * (v10 - 1)) != a2)
  {
    if (v8 == 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v21 = 8;
      do
      {
        v12 += v21;
        v21 *= 2;
        --v9;
      }
      while (v9);
    }
    v14 = *(char **)(a1 + 48);
    v13 = *(char **)(a1 + 56);
    v15 = v13 - v14;
    v16 = (v13 - v14) >> 3;
    if (v12 + v10 - v16 == 1)
      goto LABEL_20;
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 40) = v11;
  if (v10 != 1)
  {
    v19 = 0;
    v20 = v8 - 1;
    if (v8 == 1)
      goto LABEL_36;
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v8 == 1)
  {
    if (!((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
      goto LABEL_37;
    return;
  }
  v11 = 8 << (v8 - 2);
  *(_QWORD *)(a1 + 40) = v11;
  v29 = v8 - 1;
  v19 = 0;
  v20 = v29 - 1;
  if (v29 != 1)
  {
LABEL_34:
    v30 = 8;
    do
    {
      v19 += v30;
      v30 *= 2;
      --v20;
    }
    while (v20);
  }
LABEL_36:
  if (v19 + v11 == (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
  {
LABEL_37:
    sub_20F64E378(a1);
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  }
}

void sub_20F6B8DCC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v4 = (_QWORD *)a2[18];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a2[16];
  a2[16] = 0;
  if (v6)
    operator delete(v6);
  v7 = (void *)a2[13];
  if (v7)
  {
    a2[14] = v7;
    operator delete(v7);
  }
  v8 = *(_DWORD *)(a1 + 32);
  if (!v8)
  {
    v14 = *(char **)(a1 + 48);
    v13 = *(char **)(a1 + 56);
    v15 = v13 - v14;
    v16 = (v13 - v14) >> 3;
    if (-v16 == 1)
    {
LABEL_20:
      *(_QWORD *)(a1 + 56) = v14;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
LABEL_12:
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v13 < v17)
    {
      *(_QWORD *)v13 = a2;
      v18 = (uint64_t)(v13 + 8);
LABEL_48:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v22 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v23 = v17 - (_QWORD)v14;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        sub_20E877A38();
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v16];
      v27 = &v25[8 * v24];
      *v26 = a2;
      v18 = (uint64_t)(v26 + 1);
      v28 = (char *)(v13 - v14);
      if (v13 == v14)
        goto LABEL_46;
    }
    else
    {
      v25 = 0;
      v26 = (_QWORD *)(8 * v16);
      v27 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v28 = (char *)(v13 - v14);
      if (v13 == v14)
      {
LABEL_46:
        *(_QWORD *)(a1 + 48) = v26;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v27;
        if (v13)
          operator delete(v13);
        goto LABEL_48;
      }
    }
    v31 = (unint64_t)(v28 - 8);
    if (v31 < 0x58)
      goto LABEL_55;
    if ((unint64_t)(v13 - &v25[v15]) < 0x20)
      goto LABEL_55;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v13[-v33];
    v26 = (_QWORD *)((char *)v26 - v33);
    v35 = &v25[8 * v16 - 16];
    v36 = v13 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v13 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        v39 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v26 = v39;
      }
      while (v13 != v14);
    }
    v13 = *(char **)(a1 + 48);
    goto LABEL_46;
  }
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v10 - 1;
  if ((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v8 - 1)) + 248 * (v10 - 1)) != a2)
  {
    if (v8 == 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v21 = 8;
      do
      {
        v12 += v21;
        v21 *= 2;
        --v9;
      }
      while (v9);
    }
    v14 = *(char **)(a1 + 48);
    v13 = *(char **)(a1 + 56);
    v15 = v13 - v14;
    v16 = (v13 - v14) >> 3;
    if (v12 + v10 - v16 == 1)
      goto LABEL_20;
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 40) = v11;
  if (v10 != 1)
  {
    v19 = 0;
    v20 = v8 - 1;
    if (v8 == 1)
      goto LABEL_36;
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v8 == 1)
  {
    if (!((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
      goto LABEL_37;
    return;
  }
  v11 = 8 << (v8 - 2);
  *(_QWORD *)(a1 + 40) = v11;
  v29 = v8 - 1;
  v19 = 0;
  v20 = v29 - 1;
  if (v29 != 1)
  {
LABEL_34:
    v30 = 8;
    do
    {
      v19 += v30;
      v30 *= 2;
      --v20;
    }
    while (v20);
  }
LABEL_36:
  if (v19 + v11 == (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
  {
LABEL_37:
    sub_20F64D288(a1);
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  }
}

unint64_t sub_20F6B90CC(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20F396580(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_20F6BA300(v7, v10 - 3);
          result = sub_20F6BA300(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_20F6B90CC(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F6BA300(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F396580(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

uint64_t sub_20F6BA794(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_20F397DA0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_20F6BB9C8(v7, v10 - 3);
          result = sub_20F6BB9C8(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_20F6BA794(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F6BB9C8(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F397DA0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

uint64_t sub_20F6BBE5C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD v16[7];
  unsigned int v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 976))
    return (*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680)) >> 4;
  v18 = 0u;
  v19 = 0u;
  if (!sub_20F5B8114((_QWORD *)a1, (int *)&v18, v16, 1))
    return v17;
  *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1664) = *(_QWORD *)(a1 + 1656);
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 1728);
  v3 = *(_QWORD *)(a1 + 776);
  v4 = *(_QWORD *)(a1 + 784);
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 208);
    if (*(_BYTE *)(v3 + 496) || (*(_BYTE *)(v5 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v3 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v5);
      sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v3 + 216));
    }
    v3 += 504;
  }
  v6 = *(_QWORD *)(a1 + 800);
  v7 = *(_QWORD *)(a1 + 808);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 136);
    if (*(_BYTE *)(v6 + 272) || (*(_BYTE *)(v8 + 4) & 6) != 0)
      sub_20F394A20(a1 + 1560, v8);
    v6 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 832), (_QWORD *)(a1 + 1560));
  sub_20F5B85BC(*(_QWORD *)(a1 + 848), *(_QWORD *)(a1 + 856), (_QWORD *)(a1 + 1560));
  sub_20F5B8444(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), (_QWORD *)(a1 + 1560));
  v9 = *(_QWORD *)(a1 + 896);
  v10 = *(_QWORD *)(a1 + 904);
  while (v9 != v10)
  {
    v11 = *(_QWORD *)(v9 + 736);
    if (*(_BYTE *)(v9 + 880) || (*(_BYTE *)(v11 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v9 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v11);
      sub_20F394A20(a1 + 1560, *(_QWORD *)(v9 + 744));
    }
    v9 += 888;
  }
  v12 = (*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 2;
  if (HIDWORD(v19) > v12)
    LODWORD(v12) = HIDWORD(v19);
  v13 = v17 >= v12;
  v14 = v17 - v12;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  sub_20F59A618((_QWORD *)a1);
  return v15;
}

void sub_20F6BC088(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F6BC09C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F6BC0B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F6BC0C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

#error "20F6BC0D8: too big function (funcsize=0)"

void sub_20F714584(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F714598(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F7145AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F7145C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F7145D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F7145E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F7145FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F714610(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F714624(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F714638(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

BOOL sub_20F714650(uint64_t a1, double *a2, float64x2_t *a3)
{
  _QWORD *v6;
  _OWORD *v7;
  _BOOL8 v8;
  uint64_t v9;
  float64x2_t *v10;
  double v17;
  long double v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v58;

  v6 = (_QWORD *)(a1 + 48);
  v7 = (_OWORD *)(a1 + 152);
  v8 = sub_20FC7ACA4(a1, (_QWORD *)(a1 + 48), a1 + 152, (uint64_t)a3);
  *(_BYTE *)(a1 + 176) = v8;
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 184);
    if (v9)
    {
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 24))(v9, v7);
      v10 = *(float64x2_t **)(a1 + 184);
    }
    else
    {
      v10 = 0;
    }
    *(_OWORD *)(a1 + 136) = *v7;
    v58 = *(float64x2_t *)(a1 + 152);
    _D1 = v58.f64[1];
    __asm { FMLA            D0, D1, V2.D[1] }
    v17 = a2[2];
    v18 = a2[3] * (a2[1] * _D0);
    v19 = v18 + 1.0;
    *(long double *)(a1 + 168) = v17 * log1p(v18);
    v20 = sqrt(1.0 / v19);
    *(float64x2_t *)(a1 + 152) = vmulq_n_f64(v58, v20);
    if (v10)
    {
      sub_20F714970(v6, v10, a3, 1.0 / v19);
    }
    else
    {
      if (*(_BYTE *)(*v6 + 20))
      {
        v21 = vmulq_n_f64(a3[5], v20);
        v22 = vmulq_n_f64(a3[4], v20);
        v23 = vmulq_n_f64(a3[3], v20);
        v24 = vmulq_n_f64(a3[2], v20);
        v25 = vmulq_n_f64(a3[1], v20);
        *a3 = vmulq_n_f64(*a3, v20);
        a3[1] = v25;
        a3[2] = v24;
        a3[3] = v23;
        a3[4] = v22;
        a3[5] = v21;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 20))
      {
        v26 = vmulq_n_f64(a3[11], v20);
        v27 = vmulq_n_f64(a3[10], v20);
        v28 = vmulq_n_f64(a3[9], v20);
        v29 = vmulq_n_f64(a3[8], v20);
        v30 = vmulq_n_f64(a3[7], v20);
        a3[6] = vmulq_n_f64(a3[6], v20);
        a3[7] = v30;
        a3[8] = v29;
        a3[9] = v28;
        a3[10] = v27;
        a3[11] = v26;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 20))
      {
        v31 = vmulq_n_f64(a3[17], v20);
        v32 = vmulq_n_f64(a3[16], v20);
        v33 = vmulq_n_f64(a3[15], v20);
        v34 = vmulq_n_f64(a3[14], v20);
        v35 = vmulq_n_f64(a3[13], v20);
        a3[12] = vmulq_n_f64(a3[12], v20);
        a3[13] = v35;
        a3[14] = v34;
        a3[15] = v33;
        a3[16] = v32;
        a3[17] = v31;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        v36 = vmulq_n_f64(a3[23], v20);
        v37 = vmulq_n_f64(a3[22], v20);
        v38 = vmulq_n_f64(a3[21], v20);
        v39 = vmulq_n_f64(a3[20], v20);
        v40 = vmulq_n_f64(a3[19], v20);
        a3[18] = vmulq_n_f64(a3[18], v20);
        a3[19] = v40;
        a3[20] = v39;
        a3[21] = v38;
        a3[22] = v37;
        a3[23] = v36;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        v41 = vmulq_n_f64(a3[25], v20);
        v42 = vmulq_n_f64(a3[24], v20);
        v43 = vmulq_n_f64(a3[27], v20);
        a3[26] = vmulq_n_f64(a3[26], v20);
        a3[27] = v43;
        a3[24] = v42;
        a3[25] = v41;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        v44 = vmulq_n_f64(a3[29], v20);
        v45 = vmulq_n_f64(a3[28], v20);
        v46 = vmulq_n_f64(a3[31], v20);
        a3[30] = vmulq_n_f64(a3[30], v20);
        a3[31] = v46;
        a3[28] = v45;
        a3[29] = v44;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        v47 = vmulq_n_f64(a3[33], v20);
        v48 = vmulq_n_f64(a3[32], v20);
        v49 = vmulq_n_f64(a3[35], v20);
        a3[34] = vmulq_n_f64(a3[34], v20);
        a3[35] = v49;
        a3[32] = v48;
        a3[33] = v47;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        v50 = vmulq_n_f64(a3[37], v20);
        v51 = vmulq_n_f64(a3[36], v20);
        v52 = vmulq_n_f64(a3[39], v20);
        a3[38] = vmulq_n_f64(a3[38], v20);
        a3[39] = v52;
        a3[36] = v51;
        a3[37] = v50;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        v53 = vmulq_n_f64(a3[42], v20);
        v54 = vmulq_n_f64(a3[41], v20);
        a3[40] = vmulq_n_f64(a3[40], v20);
        a3[41] = v54;
        a3[42] = v53;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        v55 = vmulq_n_f64(a3[45], v20);
        v56 = vmulq_n_f64(a3[44], v20);
        a3[43] = vmulq_n_f64(a3[43], v20);
        a3[44] = v56;
        a3[45] = v55;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
        a3[46] = vmulq_n_f64(a3[46], v20);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 168) = 0;
  }
  return v8;
}

_QWORD *sub_20F714970(_QWORD *a1, float64x2_t *a2, float64x2_t *a3, double a4)
{
  _QWORD *result;
  double v8;
  int v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t *v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  double v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t *v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  double v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  double v245;
  float64x2_t v246;
  float64x2_t v247;

  v245 = sqrt(a4);
  result = (_QWORD *)(*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&a2->f64[0] + 16))(a2);
  v8 = v245;
  v9 = (int)result;
  if (*(_BYTE *)(*a1 + 20))
  {
    switch((int)result)
    {
      case 0:
        v10 = vmulq_n_f64(a2[1], v245);
        v11 = vmulq_n_f64(a2[2], v245);
        v12 = a3[5];
        v13 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[1].f64[0]), v11, a3[1], 1);
        v14 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[2].f64[0]), v11, a3[2], 1);
        v15 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[3].f64[0]), v11, a3[3], 1);
        v16 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[4].f64[0]), v11, a3[4], 1);
        *a3 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3->f64[0]), v11, *a3, 1);
        a3[1] = v13;
        a3[2] = v14;
        a3[3] = v15;
        v17 = vmlaq_laneq_f64(vmulq_n_f64(v10, v12.f64[0]), v11, v12, 1);
        goto LABEL_8;
      case 1:
        v18 = vmulq_n_f64(a2[1], v245);
        v19 = vmulq_f64(v18, *a3);
        v20 = vmulq_f64(v18, a3[1]);
        v21 = vmulq_f64(v18, a3[2]);
        v22 = vmulq_f64(v18, a3[3]);
        v23 = vmulq_f64(v18, a3[4]);
        v17 = vmulq_f64(v18, a3[5]);
        *a3 = v19;
        a3[1] = v20;
        a3[2] = v21;
        a3[3] = v22;
        a3[4] = v23;
        goto LABEL_9;
      case 2:
        v24 = v245 * a2[1].f64[0];
        v25 = vmulq_n_f64(a3[5], v24);
        v26 = vmulq_n_f64(a3[4], v24);
        v27 = vmulq_n_f64(a3[3], v24);
        v28 = vmulq_n_f64(a3[2], v24);
        v29 = vmulq_n_f64(a3[1], v24);
        *a3 = vmulq_n_f64(*a3, v24);
        a3[1] = v29;
        a3[2] = v28;
        a3[3] = v27;
        a3[4] = v26;
        a3[5] = v25;
        break;
      case 3:
        v30 = vmulq_n_f64(a3[5], v245);
        v31 = vmulq_n_f64(a3[4], v245);
        v32 = vmulq_n_f64(a3[3], v245);
        v33 = vmulq_n_f64(a3[2], v245);
        v34 = vmulq_n_f64(a3[1], v245);
        *a3 = vmulq_n_f64(*a3, v245);
        a3[1] = v34;
        a3[2] = v33;
        a3[3] = v32;
        a3[4] = v31;
        a3[5] = v30;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v245);
        v8 = v245;
        v35 = v247;
        v36 = a3[5];
        v37 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[1].f64[0]), v247, a3[1], 1);
        v38 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[2].f64[0]), v247, a3[2], 1);
        v39 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[3].f64[0]), v247, a3[3], 1);
        v16 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[4].f64[0]), v247, a3[4], 1);
        v40 = vmulq_n_f64(v246, v36.f64[0]);
        *a3 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3->f64[0]), v247, *a3, 1);
        a3[1] = v37;
        v17 = vmlaq_laneq_f64(v40, v35, v36, 1);
        a3[2] = v38;
        a3[3] = v39;
LABEL_8:
        a3[4] = v16;
LABEL_9:
        a3[5] = v17;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[1] + 20))
  {
    switch(v9)
    {
      case 0:
        v41 = vmulq_n_f64(a2[1], v8);
        v42 = vmulq_n_f64(a2[2], v8);
        v43 = a3[11];
        v44 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[7].f64[0]), v42, a3[7], 1);
        v45 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[8].f64[0]), v42, a3[8], 1);
        v46 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[9].f64[0]), v42, a3[9], 1);
        v47 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[10].f64[0]), v42, a3[10], 1);
        a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[6].f64[0]), v42, a3[6], 1);
        a3[7] = v44;
        a3[8] = v45;
        a3[9] = v46;
        v48 = vmlaq_laneq_f64(vmulq_n_f64(v41, v43.f64[0]), v42, v43, 1);
        goto LABEL_17;
      case 1:
        v49 = vmulq_n_f64(a2[1], v8);
        v50 = vmulq_f64(v49, a3[6]);
        v51 = vmulq_f64(v49, a3[7]);
        v52 = vmulq_f64(v49, a3[8]);
        v53 = vmulq_f64(v49, a3[9]);
        v54 = vmulq_f64(v49, a3[10]);
        v48 = vmulq_f64(v49, a3[11]);
        a3[6] = v50;
        a3[7] = v51;
        a3[8] = v52;
        a3[9] = v53;
        a3[10] = v54;
        goto LABEL_18;
      case 2:
        v55 = v8 * a2[1].f64[0];
        v56 = vmulq_n_f64(a3[11], v55);
        v57 = vmulq_n_f64(a3[10], v55);
        v58 = vmulq_n_f64(a3[9], v55);
        v59 = vmulq_n_f64(a3[8], v55);
        v60 = vmulq_n_f64(a3[7], v55);
        a3[6] = vmulq_n_f64(a3[6], v55);
        a3[7] = v60;
        a3[8] = v59;
        a3[9] = v58;
        a3[10] = v57;
        a3[11] = v56;
        break;
      case 3:
        v61 = vmulq_n_f64(a3[11], v8);
        v62 = vmulq_n_f64(a3[10], v8);
        v63 = vmulq_n_f64(a3[9], v8);
        v64 = vmulq_n_f64(a3[8], v8);
        v65 = vmulq_n_f64(a3[7], v8);
        a3[6] = vmulq_n_f64(a3[6], v8);
        a3[7] = v65;
        a3[8] = v64;
        a3[9] = v63;
        a3[10] = v62;
        a3[11] = v61;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v66 = v247;
        v67 = a3[11];
        v68 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[7].f64[0]), v247, a3[7], 1);
        v69 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[8].f64[0]), v247, a3[8], 1);
        v70 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[9].f64[0]), v247, a3[9], 1);
        v47 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[10].f64[0]), v247, a3[10], 1);
        v71 = vmulq_n_f64(v246, v67.f64[0]);
        a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[6].f64[0]), v247, a3[6], 1);
        a3[7] = v68;
        v48 = vmlaq_laneq_f64(v71, v66, v67, 1);
        a3[8] = v69;
        a3[9] = v70;
LABEL_17:
        a3[10] = v47;
LABEL_18:
        a3[11] = v48;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[2] + 20))
  {
    switch(v9)
    {
      case 0:
        v72 = vmulq_n_f64(a2[1], v8);
        v73 = vmulq_n_f64(a2[2], v8);
        v74 = a3[17];
        v75 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[13].f64[0]), v73, a3[13], 1);
        v76 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[14].f64[0]), v73, a3[14], 1);
        v77 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[15].f64[0]), v73, a3[15], 1);
        v78 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[16].f64[0]), v73, a3[16], 1);
        a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[12].f64[0]), v73, a3[12], 1);
        a3[13] = v75;
        a3[14] = v76;
        a3[15] = v77;
        v79 = vmlaq_laneq_f64(vmulq_n_f64(v72, v74.f64[0]), v73, v74, 1);
        goto LABEL_26;
      case 1:
        v80 = vmulq_n_f64(a2[1], v8);
        v81 = vmulq_f64(v80, a3[12]);
        v82 = vmulq_f64(v80, a3[13]);
        v83 = vmulq_f64(v80, a3[14]);
        v84 = vmulq_f64(v80, a3[15]);
        v85 = vmulq_f64(v80, a3[16]);
        v79 = vmulq_f64(v80, a3[17]);
        a3[12] = v81;
        a3[13] = v82;
        a3[14] = v83;
        a3[15] = v84;
        a3[16] = v85;
        goto LABEL_27;
      case 2:
        v86 = v8 * a2[1].f64[0];
        v87 = vmulq_n_f64(a3[17], v86);
        v88 = vmulq_n_f64(a3[16], v86);
        v89 = vmulq_n_f64(a3[15], v86);
        v90 = vmulq_n_f64(a3[14], v86);
        v91 = vmulq_n_f64(a3[13], v86);
        a3[12] = vmulq_n_f64(a3[12], v86);
        a3[13] = v91;
        a3[14] = v90;
        a3[15] = v89;
        a3[16] = v88;
        a3[17] = v87;
        break;
      case 3:
        v92 = vmulq_n_f64(a3[17], v8);
        v93 = vmulq_n_f64(a3[16], v8);
        v94 = vmulq_n_f64(a3[15], v8);
        v95 = vmulq_n_f64(a3[14], v8);
        v96 = vmulq_n_f64(a3[13], v8);
        a3[12] = vmulq_n_f64(a3[12], v8);
        a3[13] = v96;
        a3[14] = v95;
        a3[15] = v94;
        a3[16] = v93;
        a3[17] = v92;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v97 = v247;
        v98 = a3[17];
        v99 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[13].f64[0]), v247, a3[13], 1);
        v100 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[14].f64[0]), v247, a3[14], 1);
        v101 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[15].f64[0]), v247, a3[15], 1);
        v78 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[16].f64[0]), v247, a3[16], 1);
        v102 = vmulq_n_f64(v246, v98.f64[0]);
        a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[12].f64[0]), v247, a3[12], 1);
        a3[13] = v99;
        v79 = vmlaq_laneq_f64(v102, v97, v98, 1);
        a3[14] = v100;
        a3[15] = v101;
LABEL_26:
        a3[16] = v78;
LABEL_27:
        a3[17] = v79;
        break;
      default:
        break;
    }
  }
  v103 = a3 + 18;
  if (*(_BYTE *)(a1[3] + 20))
  {
    switch(v9)
    {
      case 0:
        v104 = vmulq_n_f64(a2[1], v8);
        v105 = vmulq_n_f64(a2[2], v8);
        v106 = a3[23];
        v107 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[19].f64[0]), v105, a3[19], 1);
        v108 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[20].f64[0]), v105, a3[20], 1);
        v109 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[21].f64[0]), v105, a3[21], 1);
        v110 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[22].f64[0]), v105, a3[22], 1);
        a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[18].f64[0]), v105, a3[18], 1);
        a3[19] = v107;
        a3[20] = v108;
        a3[21] = v109;
        v111 = vmlaq_laneq_f64(vmulq_n_f64(v104, v106.f64[0]), v105, v106, 1);
        goto LABEL_35;
      case 1:
        v112 = vmulq_n_f64(a2[1], v8);
        v113 = vmulq_f64(v112, *v103);
        v114 = vmulq_f64(v112, a3[19]);
        v115 = vmulq_f64(v112, a3[20]);
        v116 = vmulq_f64(v112, a3[21]);
        v117 = vmulq_f64(v112, a3[22]);
        v118 = vmulq_f64(v112, a3[23]);
        *v103 = v113;
        a3[19] = v114;
        a3[20] = v115;
        a3[21] = v116;
        a3[22] = v117;
        a3[23] = v118;
        break;
      case 2:
        v119 = v8 * a2[1].f64[0];
        v120 = vmulq_n_f64(a3[23], v119);
        v121 = vmulq_n_f64(a3[22], v119);
        v122 = vmulq_n_f64(a3[21], v119);
        v123 = vmulq_n_f64(a3[20], v119);
        v124 = vmulq_n_f64(a3[19], v119);
        *v103 = vmulq_n_f64(*v103, v119);
        a3[19] = v124;
        a3[20] = v123;
        a3[21] = v122;
        a3[22] = v121;
        a3[23] = v120;
        break;
      case 3:
        v125 = vmulq_n_f64(a3[23], v8);
        v126 = vmulq_n_f64(a3[22], v8);
        v127 = vmulq_n_f64(a3[21], v8);
        v128 = vmulq_n_f64(a3[20], v8);
        v129 = vmulq_n_f64(a3[19], v8);
        *v103 = vmulq_n_f64(*v103, v8);
        a3[19] = v129;
        a3[20] = v128;
        a3[21] = v127;
        a3[22] = v126;
        a3[23] = v125;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v130 = v247;
        v131 = a3[23];
        v132 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[19].f64[0]), v247, a3[19], 1);
        v133 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[20].f64[0]), v247, a3[20], 1);
        v134 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[21].f64[0]), v247, a3[21], 1);
        v110 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[22].f64[0]), v247, a3[22], 1);
        v135 = vmulq_n_f64(v246, v131.f64[0]);
        a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[18].f64[0]), v247, a3[18], 1);
        a3[19] = v132;
        v111 = vmlaq_laneq_f64(v135, v130, v131, 1);
        a3[20] = v133;
        a3[21] = v134;
LABEL_35:
        a3[22] = v110;
        a3[23] = v111;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[4] + 20))
  {
    switch(v9)
    {
      case 0:
        v136 = vmulq_n_f64(a2[1], v8);
        v137 = vmulq_n_f64(a2[2], v8);
        v138 = a3[27];
        v139 = vmlaq_laneq_f64(vmulq_n_f64(v136, a3[25].f64[0]), v137, a3[25], 1);
        v140 = vmlaq_laneq_f64(vmulq_n_f64(v136, a3[26].f64[0]), v137, a3[26], 1);
        a3[24] = vmlaq_laneq_f64(vmulq_n_f64(v136, a3[24].f64[0]), v137, a3[24], 1);
        a3[25] = v139;
        v141 = vmlaq_laneq_f64(vmulq_n_f64(v136, v138.f64[0]), v137, v138, 1);
        goto LABEL_43;
      case 1:
        v142 = vmulq_n_f64(a2[1], v8);
        v143 = vmulq_f64(v142, a3[24]);
        v144 = vmulq_f64(v142, a3[25]);
        v145 = vmulq_f64(v142, a3[26]);
        v146 = vmulq_f64(v142, a3[27]);
        a3[26] = v145;
        a3[27] = v146;
        a3[24] = v143;
        a3[25] = v144;
        break;
      case 2:
        v147 = v8 * a2[1].f64[0];
        v148 = vmulq_n_f64(a3[25], v147);
        v149 = vmulq_n_f64(a3[24], v147);
        v150 = vmulq_n_f64(a3[27], v147);
        a3[26] = vmulq_n_f64(a3[26], v147);
        a3[27] = v150;
        a3[24] = v149;
        a3[25] = v148;
        break;
      case 3:
        v151 = vmulq_n_f64(a3[25], v8);
        v152 = vmulq_n_f64(a3[24], v8);
        v153 = vmulq_n_f64(a3[27], v8);
        a3[26] = vmulq_n_f64(a3[26], v8);
        a3[27] = v153;
        a3[24] = v152;
        a3[25] = v151;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v154 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[25].f64[0]), v247, a3[25], 1);
        v140 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[26].f64[0]), v247, a3[26], 1);
        v141 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[27].f64[0]), v247, a3[27], 1);
        a3[24] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[24].f64[0]), v247, a3[24], 1);
        a3[25] = v154;
LABEL_43:
        a3[26] = v140;
        a3[27] = v141;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[5] + 20))
  {
    switch(v9)
    {
      case 0:
        v155 = vmulq_n_f64(a2[1], v8);
        v156 = vmulq_n_f64(a2[2], v8);
        v157 = a3[31];
        v158 = vmlaq_laneq_f64(vmulq_n_f64(v155, a3[29].f64[0]), v156, a3[29], 1);
        v159 = vmlaq_laneq_f64(vmulq_n_f64(v155, a3[30].f64[0]), v156, a3[30], 1);
        a3[28] = vmlaq_laneq_f64(vmulq_n_f64(v155, a3[28].f64[0]), v156, a3[28], 1);
        a3[29] = v158;
        v160 = vmlaq_laneq_f64(vmulq_n_f64(v155, v157.f64[0]), v156, v157, 1);
        goto LABEL_51;
      case 1:
        v161 = vmulq_n_f64(a2[1], v8);
        v162 = vmulq_f64(v161, a3[28]);
        v163 = vmulq_f64(v161, a3[29]);
        v164 = vmulq_f64(v161, a3[30]);
        v165 = vmulq_f64(v161, a3[31]);
        a3[30] = v164;
        a3[31] = v165;
        a3[28] = v162;
        a3[29] = v163;
        break;
      case 2:
        v166 = v8 * a2[1].f64[0];
        v167 = vmulq_n_f64(a3[29], v166);
        v168 = vmulq_n_f64(a3[28], v166);
        v169 = vmulq_n_f64(a3[31], v166);
        a3[30] = vmulq_n_f64(a3[30], v166);
        a3[31] = v169;
        a3[28] = v168;
        a3[29] = v167;
        break;
      case 3:
        v170 = vmulq_n_f64(a3[29], v8);
        v171 = vmulq_n_f64(a3[28], v8);
        v172 = vmulq_n_f64(a3[31], v8);
        a3[30] = vmulq_n_f64(a3[30], v8);
        a3[31] = v172;
        a3[28] = v171;
        a3[29] = v170;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v173 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[29].f64[0]), v247, a3[29], 1);
        v159 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[30].f64[0]), v247, a3[30], 1);
        v160 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[31].f64[0]), v247, a3[31], 1);
        a3[28] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[28].f64[0]), v247, a3[28], 1);
        a3[29] = v173;
LABEL_51:
        a3[30] = v159;
        a3[31] = v160;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[6] + 20))
  {
    switch(v9)
    {
      case 0:
        v174 = vmulq_n_f64(a2[1], v8);
        v175 = vmulq_n_f64(a2[2], v8);
        v176 = a3[35];
        v177 = vmlaq_laneq_f64(vmulq_n_f64(v174, a3[33].f64[0]), v175, a3[33], 1);
        v178 = vmlaq_laneq_f64(vmulq_n_f64(v174, a3[34].f64[0]), v175, a3[34], 1);
        a3[32] = vmlaq_laneq_f64(vmulq_n_f64(v174, a3[32].f64[0]), v175, a3[32], 1);
        a3[33] = v177;
        v179 = vmlaq_laneq_f64(vmulq_n_f64(v174, v176.f64[0]), v175, v176, 1);
        goto LABEL_59;
      case 1:
        v180 = vmulq_n_f64(a2[1], v8);
        v181 = vmulq_f64(v180, a3[32]);
        v182 = vmulq_f64(v180, a3[33]);
        v183 = vmulq_f64(v180, a3[34]);
        v184 = vmulq_f64(v180, a3[35]);
        a3[34] = v183;
        a3[35] = v184;
        a3[32] = v181;
        a3[33] = v182;
        break;
      case 2:
        v185 = v8 * a2[1].f64[0];
        v186 = vmulq_n_f64(a3[33], v185);
        v187 = vmulq_n_f64(a3[32], v185);
        v188 = vmulq_n_f64(a3[35], v185);
        a3[34] = vmulq_n_f64(a3[34], v185);
        a3[35] = v188;
        a3[32] = v187;
        a3[33] = v186;
        break;
      case 3:
        v189 = vmulq_n_f64(a3[33], v8);
        v190 = vmulq_n_f64(a3[32], v8);
        v191 = vmulq_n_f64(a3[35], v8);
        a3[34] = vmulq_n_f64(a3[34], v8);
        a3[35] = v191;
        a3[32] = v190;
        a3[33] = v189;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v192 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[33].f64[0]), v247, a3[33], 1);
        v178 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[34].f64[0]), v247, a3[34], 1);
        v179 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[35].f64[0]), v247, a3[35], 1);
        a3[32] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[32].f64[0]), v247, a3[32], 1);
        a3[33] = v192;
LABEL_59:
        a3[34] = v178;
        a3[35] = v179;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[7] + 20))
  {
    switch(v9)
    {
      case 0:
        v193 = vmulq_n_f64(a2[1], v8);
        v194 = vmulq_n_f64(a2[2], v8);
        v195 = a3[39];
        v196 = vmlaq_laneq_f64(vmulq_n_f64(v193, a3[37].f64[0]), v194, a3[37], 1);
        v197 = vmlaq_laneq_f64(vmulq_n_f64(v193, a3[38].f64[0]), v194, a3[38], 1);
        a3[36] = vmlaq_laneq_f64(vmulq_n_f64(v193, a3[36].f64[0]), v194, a3[36], 1);
        a3[37] = v196;
        v198 = vmlaq_laneq_f64(vmulq_n_f64(v193, v195.f64[0]), v194, v195, 1);
        goto LABEL_67;
      case 1:
        v199 = vmulq_n_f64(a2[1], v8);
        v200 = vmulq_f64(v199, a3[36]);
        v201 = vmulq_f64(v199, a3[37]);
        v202 = vmulq_f64(v199, a3[38]);
        v203 = vmulq_f64(v199, a3[39]);
        a3[38] = v202;
        a3[39] = v203;
        a3[36] = v200;
        a3[37] = v201;
        break;
      case 2:
        v204 = v8 * a2[1].f64[0];
        v205 = vmulq_n_f64(a3[37], v204);
        v206 = vmulq_n_f64(a3[36], v204);
        v207 = vmulq_n_f64(a3[39], v204);
        a3[38] = vmulq_n_f64(a3[38], v204);
        a3[39] = v207;
        a3[36] = v206;
        a3[37] = v205;
        break;
      case 3:
        v208 = vmulq_n_f64(a3[37], v8);
        v209 = vmulq_n_f64(a3[36], v8);
        v210 = vmulq_n_f64(a3[39], v8);
        a3[38] = vmulq_n_f64(a3[38], v8);
        a3[39] = v210;
        a3[36] = v209;
        a3[37] = v208;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v211 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[37].f64[0]), v247, a3[37], 1);
        v197 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[38].f64[0]), v247, a3[38], 1);
        v198 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[39].f64[0]), v247, a3[39], 1);
        a3[36] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[36].f64[0]), v247, a3[36], 1);
        a3[37] = v211;
LABEL_67:
        a3[38] = v197;
        a3[39] = v198;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[8] + 20))
  {
    v212 = a3 + 40;
    switch(v9)
    {
      case 0:
        v213 = vmulq_n_f64(a2[1], v8);
        v214 = vmulq_n_f64(a2[2], v8);
        goto LABEL_75;
      case 1:
        v215 = vmulq_n_f64(a2[1], v8);
        v216 = vmulq_f64(v215, *v212);
        v217 = vmulq_f64(v215, a3[41]);
        v218 = vmulq_f64(v215, a3[42]);
        *v212 = v216;
        a3[41] = v217;
        a3[42] = v218;
        break;
      case 2:
        v219 = v8 * a2[1].f64[0];
        v220 = vmulq_n_f64(a3[42], v219);
        v221 = vmulq_n_f64(a3[41], v219);
        *v212 = vmulq_n_f64(*v212, v219);
        a3[41] = v221;
        a3[42] = v220;
        break;
      case 3:
        v222 = vmulq_n_f64(a3[42], v8);
        v223 = vmulq_n_f64(a3[41], v8);
        *v212 = vmulq_n_f64(*v212, v8);
        a3[41] = v223;
        a3[42] = v222;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v213 = v246;
        v214 = v247;
LABEL_75:
        v224 = vmlaq_laneq_f64(vmulq_n_f64(v213, a3[40].f64[0]), v214, a3[40], 1);
        v225 = vmlaq_laneq_f64(vmulq_n_f64(v213, a3[41].f64[0]), v214, a3[41], 1);
        v226 = vmlaq_laneq_f64(vmulq_n_f64(v213, a3[42].f64[0]), v214, a3[42], 1);
        a3[40] = v224;
        a3[41] = v225;
        a3[42] = v226;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[9] + 20))
  {
    v227 = a3 + 43;
    switch(v9)
    {
      case 0:
        v228 = vmulq_n_f64(a2[1], v8);
        v229 = vmulq_n_f64(a2[2], v8);
        goto LABEL_83;
      case 1:
        v230 = vmulq_n_f64(a2[1], v8);
        v231 = vmulq_f64(v230, *v227);
        v232 = vmulq_f64(v230, a3[44]);
        v233 = vmulq_f64(v230, a3[45]);
        *v227 = v231;
        a3[44] = v232;
        a3[45] = v233;
        break;
      case 2:
        v234 = v8 * a2[1].f64[0];
        v235 = vmulq_n_f64(a3[45], v234);
        v236 = vmulq_n_f64(a3[44], v234);
        *v227 = vmulq_n_f64(*v227, v234);
        a3[44] = v236;
        a3[45] = v235;
        break;
      case 3:
        v237 = vmulq_n_f64(a3[45], v8);
        v238 = vmulq_n_f64(a3[44], v8);
        *v227 = vmulq_n_f64(*v227, v8);
        a3[44] = v238;
        a3[45] = v237;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v228 = v246;
        v229 = v247;
LABEL_83:
        v239 = vmlaq_laneq_f64(vmulq_n_f64(v228, a3[43].f64[0]), v229, a3[43], 1);
        v240 = vmlaq_laneq_f64(vmulq_n_f64(v228, a3[44].f64[0]), v229, a3[44], 1);
        v241 = vmlaq_laneq_f64(vmulq_n_f64(v228, a3[45].f64[0]), v229, a3[45], 1);
        a3[43] = v239;
        a3[44] = v240;
        a3[45] = v241;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[10] + 20))
  {
    switch(v9)
    {
      case 0:
        v242 = vmulq_n_f64(a2[1], v8);
        v243 = vmulq_n_f64(a2[2], v8);
        goto LABEL_91;
      case 1:
        v244 = vmulq_f64(vmulq_n_f64(a2[1], v8), a3[46]);
        goto LABEL_92;
      case 2:
        v244 = vmulq_n_f64(a3[46], v8 * a2[1].f64[0]);
        goto LABEL_92;
      case 3:
        v244 = vmulq_n_f64(a3[46], v8);
        goto LABEL_92;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v242 = v246;
        v243 = v247;
LABEL_91:
        v244 = vmlaq_laneq_f64(vmulq_n_f64(v242, a3[46].f64[0]), v243, a3[46], 1);
LABEL_92:
        a3[46] = v244;
        break;
      default:
        return result;
    }
  }
  return result;
}

char *sub_20F7157B4(uint64_t a1, _DWORD *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  double *v34;
  const double *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE *v52;
  _BYTE *v53;
  int64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  unint64_t v68;
  _QWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __int128 *v75;
  _OWORD *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  char *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  _OWORD *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t i;
  __int128 v94;
  _QWORD *v95;
  unint64_t v97;
  int v98;
  float64x2x2_t v99;

  v6 = *(_QWORD *)(a1 + 8);
  if ((_DWORD *)v6 != a2 && *a3 == *a2)
    return (char *)v6;
  v7 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 72) != v7)
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 80) = v7 - 8;
    goto LABEL_42;
  }
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 64);
    if (v10 < 8 << (v9 - 1))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * (v9 - 1));
      *(_QWORD *)(a1 + 64) = v10 + 1;
      v8 = v11 + 552 * v10;
      goto LABEL_42;
    }
    v12 = 552 * (16 << (v9 - 1));
    v13 = *(_QWORD *)(a1 + 32);
    if (v9 == (*(_QWORD *)(a1 + 40) - v13) >> 4)
      goto LABEL_11;
  }
  else
  {
    v12 = 4416;
    v13 = *(_QWORD *)(a1 + 32);
    if (v9 == (*(_QWORD *)(a1 + 40) - v13) >> 4)
    {
LABEL_11:
      v14 = malloc_type_aligned_alloc(8uLL, v12, 0x8BB35E2BuLL);
      v15 = v14;
      v17 = *(char **)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v17 >= v16)
      {
        v20 = *(char **)(a1 + 32);
        v21 = (v17 - v20) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          sub_20E867F44();
        v23 = v16 - (_QWORD)v20;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 60)
            goto LABEL_88;
          v25 = (char *)operator new(16 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = MEMORY[0x24BDAE450];
        v27 = &v25[16 * v21];
        v28 = &v25[16 * v24];
        *(_QWORD *)v27 = v15;
        *((_QWORD *)v27 + 1) = v26;
        v19 = v27 + 16;
        if (v17 == v20)
        {
          *(_QWORD *)(a1 + 32) = v27;
          *(_QWORD *)(a1 + 40) = v19;
          *(_QWORD *)(a1 + 48) = v28;
        }
        else
        {
          v29 = v17 - v20 - 16;
          if (v29 < 0x90
            || &v17[-(v29 & 0xFFFFFFFFFFFFFFF0) - 16] < v27
            && &v25[v17 - v20 - (v29 & 0xFFFFFFFFFFFFFFF0) - 16] < v17)
          {
            goto LABEL_30;
          }
          v30 = (v29 >> 4) + 1;
          v31 = 16 * (v30 & 0x1FFFFFFFFFFFFFFELL);
          v32 = &v27[-v31];
          v33 = &v17[-v31];
          v34 = (double *)(v27 - 32);
          v35 = (const double *)(v17 - 32);
          v36 = v30 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v99 = vld2q_f64(v35);
            v35[2] = 0.0;
            *v35 = 0.0;
            v35 -= 4;
            vst2q_f64(v34, v99);
            v34 -= 4;
            v36 -= 2;
          }
          while (v36);
          v27 = v32;
          v17 = v33;
          if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_30:
            v32 = v27;
            do
            {
              v37 = *((_QWORD *)v17 - 2);
              v17 -= 16;
              *(_QWORD *)v17 = 0;
              *((_QWORD *)v32 - 2) = v37;
              v32 -= 16;
              *((_QWORD *)v32 + 1) = *((_QWORD *)v17 + 1);
            }
            while (v17 != v20);
          }
          v17 = *(char **)(a1 + 32);
          v38 = *(char **)(a1 + 40);
          *(_QWORD *)(a1 + 32) = v32;
          *(_QWORD *)(a1 + 40) = v19;
          *(_QWORD *)(a1 + 48) = v28;
          if (v38 != v17)
          {
            v39 = v38;
            do
            {
              v40 = *((_QWORD *)v39 - 2);
              v39 -= 16;
              *(_QWORD *)v39 = 0;
              if (v40)
                (*((void (**)(void))v38 - 1))();
              v38 = v39;
            }
            while (v39 != v17);
          }
        }
        if (v17)
          operator delete(v17);
      }
      else
      {
        v18 = MEMORY[0x24BDAE450];
        *(_QWORD *)v17 = v14;
        *((_QWORD *)v17 + 1) = v18;
        v19 = v17 + 16;
      }
      *(_QWORD *)(a1 + 40) = v19;
      v9 = *(unsigned int *)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 32);
    }
  }
  *(_DWORD *)(a1 + 56) = v9 + 1;
  *(_QWORD *)(a1 + 64) = 1;
  v8 = *(_QWORD *)(v13 + 16 * v9);
LABEL_42:
  v41 = *((_QWORD *)a3 + 1);
  *(_DWORD *)(v8 + 8) = a3[4];
  *(_QWORD *)v8 = v41;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 3);
  *(_QWORD *)(v8 + 24) = *((_QWORD *)a3 + 4);
  v42 = *(_OWORD *)(a3 + 14);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a3 + 10);
  *(_OWORD *)(v8 + 48) = v42;
  v43 = *(_OWORD *)(a3 + 18);
  v44 = *(_OWORD *)(a3 + 22);
  v45 = *(_OWORD *)(a3 + 30);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(a3 + 26);
  *(_OWORD *)(v8 + 112) = v45;
  *(_OWORD *)(v8 + 64) = v43;
  *(_OWORD *)(v8 + 80) = v44;
  v46 = *(_OWORD *)(a3 + 34);
  v47 = *(_OWORD *)(a3 + 38);
  v48 = *(_OWORD *)(a3 + 46);
  *(_OWORD *)(v8 + 160) = *(_OWORD *)(a3 + 42);
  *(_OWORD *)(v8 + 176) = v48;
  *(_OWORD *)(v8 + 128) = v46;
  *(_OWORD *)(v8 + 144) = v47;
  v49 = *(_OWORD *)(a3 + 50);
  v50 = *(_OWORD *)(a3 + 54);
  v51 = *(_OWORD *)(a3 + 62);
  *(_OWORD *)(v8 + 224) = *(_OWORD *)(a3 + 58);
  *(_OWORD *)(v8 + 240) = v51;
  *(_OWORD *)(v8 + 192) = v49;
  *(_OWORD *)(v8 + 208) = v50;
  *(_QWORD *)(v8 + 264) = 0;
  *(_QWORD *)(v8 + 272) = 0;
  *(_QWORD *)(v8 + 256) = 0;
  v53 = (_BYTE *)*((_QWORD *)a3 + 33);
  v52 = (_BYTE *)*((_QWORD *)a3 + 34);
  v54 = v52 - v53;
  if (v52 != v53)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v54 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v55 = (char *)operator new(v54);
    *(_QWORD *)(v8 + 256) = v55;
    *(_QWORD *)(v8 + 264) = v55;
    v56 = &v55[8 * (v54 >> 3)];
    *(_QWORD *)(v8 + 272) = v56;
    memcpy(v55, v53, v54);
    *(_QWORD *)(v8 + 264) = v56;
  }
  sub_20F619B3C(v8 + 280, (uint64_t)(a3 + 72));
  *(_BYTE *)(v8 + 320) = *((_BYTE *)a3 + 328);
  v57 = *((_OWORD *)a3 + 22);
  *(_OWORD *)(v8 + 328) = *((_OWORD *)a3 + 21);
  *(_OWORD *)(v8 + 344) = v57;
  v58 = *((_OWORD *)a3 + 23);
  v59 = *((_OWORD *)a3 + 24);
  v60 = *((_OWORD *)a3 + 26);
  *(_OWORD *)(v8 + 392) = *((_OWORD *)a3 + 25);
  *(_OWORD *)(v8 + 408) = v60;
  *(_OWORD *)(v8 + 360) = v58;
  *(_OWORD *)(v8 + 376) = v59;
  v61 = *((_OWORD *)a3 + 27);
  v62 = *((_OWORD *)a3 + 28);
  v63 = *((_OWORD *)a3 + 30);
  *(_OWORD *)(v8 + 456) = *((_OWORD *)a3 + 29);
  *(_OWORD *)(v8 + 472) = v63;
  *(_OWORD *)(v8 + 424) = v61;
  *(_OWORD *)(v8 + 440) = v62;
  v64 = *((_OWORD *)a3 + 31);
  v65 = *((_OWORD *)a3 + 32);
  v66 = *((_OWORD *)a3 + 34);
  *(_OWORD *)(v8 + 520) = *((_OWORD *)a3 + 33);
  *(_OWORD *)(v8 + 536) = v66;
  *(_OWORD *)(v8 + 488) = v64;
  *(_OWORD *)(v8 + 504) = v65;
  v67 = *a3;
  v69 = *(_QWORD **)a1;
  v68 = *(_QWORD *)(a1 + 8);
  v70 = a2;
  v71 = (uint64_t)a2 - *(_QWORD *)a1;
  v72 = v71 >> 4;
  v6 = *(_QWORD *)a1 + (v71 & 0xFFFFFFFFFFFFFFF0);
  v73 = *(_QWORD *)(a1 + 16);
  if (v68 < v73)
  {
    if (v6 == v68)
    {
      *(_DWORD *)v6 = v67;
      *(_QWORD *)(v6 + 8) = v8;
      *(_QWORD *)(a1 + 8) = v6 + 16;
    }
    else
    {
      v74 = v6 + 16;
      v75 = (__int128 *)(v68 - 16);
      v76 = *(_OWORD **)(a1 + 8);
      if (v68 >= 0x10)
      {
        do
        {
          v77 = *v75++;
          *v76++ = v77;
        }
        while ((unint64_t)v75 < v68);
      }
      *(_QWORD *)(a1 + 8) = v76;
      if (v68 != v74)
      {
        v78 = (uint64_t)(v68 - v74) >> 4;
        v79 = (_QWORD *)(v68 - 8);
        v80 = 16 * v78;
        do
        {
          *((_DWORD *)v79 - 2) = *(_DWORD *)(v6 + v80 - 16);
          *v79 = *(_QWORD *)(v6 + v80 - 8);
          v79 -= 2;
          v80 -= 16;
        }
        while (v80);
      }
      *(_DWORD *)v6 = v67;
      v69[2 * v72 + 1] = v8;
    }
    return (char *)v6;
  }
  v81 = ((uint64_t)(v68 - (_QWORD)v69) >> 4) + 1;
  if (v81 >> 60)
    sub_20E867F44();
  v82 = v73 - (_QWORD)v69;
  if (v82 >> 3 > v81)
    v81 = v82 >> 3;
  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
    v83 = 0xFFFFFFFFFFFFFFFLL;
  else
    v83 = v81;
  if (v83)
  {
    if (!(v83 >> 60))
    {
      v84 = *a3;
      v85 = (char *)operator new(16 * v83);
      v67 = v84;
      v86 = &v85[16 * v72];
      v87 = &v85[16 * v83];
      if (v72 != v83)
        goto LABEL_69;
      goto LABEL_65;
    }
LABEL_88:
    sub_20E877A38();
  }
  v85 = 0;
  v86 = (char *)(16 * v72);
  v87 = 0;
  if (v72)
    goto LABEL_69;
LABEL_65:
  if (v71 < 1)
  {
    if (v69 == (_QWORD *)v70)
      v97 = 1;
    else
      v97 = v71 >> 3;
    if (v97 >> 60)
      sub_20E877A38();
    v98 = v67;
    v86 = (char *)operator new(16 * v97);
    v87 = &v86[16 * v97];
    if (v85)
    {
      operator delete(v85);
      v87 = &v86[16 * v97];
      v69 = *(_QWORD **)a1;
    }
    *(_DWORD *)v86 = v98;
    *((_QWORD *)v86 + 1) = v8;
    v89 = v86 + 16;
    v90 = v86;
    if (v69 == (_QWORD *)v6)
      goto LABEL_72;
    goto LABEL_70;
  }
  v88 = v72 + 2;
  if (v72 >= -1)
    v88 = v72 + 1;
  v86 -= 16 * (v88 >> 1);
LABEL_69:
  *(_DWORD *)v86 = v67;
  *((_QWORD *)v86 + 1) = v8;
  v89 = v86 + 16;
  v90 = v86;
  if (v69 != (_QWORD *)v6)
  {
LABEL_70:
    v91 = v6;
    v92 = v86;
    do
    {
      v90 = v92 - 16;
      *((_OWORD *)v92 - 1) = *(_OWORD *)(v91 - 16);
      v91 -= 16;
      v92 -= 16;
    }
    while ((_QWORD *)v91 != v69);
  }
LABEL_72:
  for (i = *(_QWORD *)(a1 + 8); v6 != i; ++v89)
  {
    v94 = *(_OWORD *)v6;
    v6 += 16;
    *v89 = v94;
  }
  v95 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v90;
  *(_QWORD *)(a1 + 8) = v89;
  *(_QWORD *)(a1 + 16) = v87;
  if (v95)
    operator delete(v95);
  return v86;
}

void sub_20F715DEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F715E20(uint64_t a1, _DWORD *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  double *v34;
  const double *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  unint64_t v56;
  _QWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 *v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  _OWORD *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t i;
  __int128 v82;
  _QWORD *v83;
  unint64_t v85;
  int v86;
  float64x2x2_t v87;

  v6 = *(_QWORD *)(a1 + 8);
  if ((_DWORD *)v6 != a2 && *a3 == *a2)
    return (char *)v6;
  v7 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 72) != v7)
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 80) = v7 - 8;
    goto LABEL_42;
  }
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 64);
    if (v10 < 8 << (v9 - 1))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * (v9 - 1));
      *(_QWORD *)(a1 + 64) = v10 + 1;
      v8 = v11 + 248 * v10;
      goto LABEL_42;
    }
    v12 = 248 * (16 << (v9 - 1));
    v13 = *(_QWORD *)(a1 + 32);
    if (v9 == (*(_QWORD *)(a1 + 40) - v13) >> 4)
      goto LABEL_11;
  }
  else
  {
    v12 = 1984;
    v13 = *(_QWORD *)(a1 + 32);
    if (v9 == (*(_QWORD *)(a1 + 40) - v13) >> 4)
    {
LABEL_11:
      v14 = malloc_type_aligned_alloc(8uLL, v12, 0x8BB35E2BuLL);
      v15 = v14;
      v17 = *(char **)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v17 >= v16)
      {
        v20 = *(char **)(a1 + 32);
        v21 = (v17 - v20) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          sub_20E867F44();
        v23 = v16 - (_QWORD)v20;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 60)
            goto LABEL_88;
          v25 = (char *)operator new(16 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = MEMORY[0x24BDAE450];
        v27 = &v25[16 * v21];
        v28 = &v25[16 * v24];
        *(_QWORD *)v27 = v15;
        *((_QWORD *)v27 + 1) = v26;
        v19 = v27 + 16;
        if (v17 == v20)
        {
          *(_QWORD *)(a1 + 32) = v27;
          *(_QWORD *)(a1 + 40) = v19;
          *(_QWORD *)(a1 + 48) = v28;
        }
        else
        {
          v29 = v17 - v20 - 16;
          if (v29 < 0x90
            || &v17[-(v29 & 0xFFFFFFFFFFFFFFF0) - 16] < v27
            && &v25[v17 - v20 - (v29 & 0xFFFFFFFFFFFFFFF0) - 16] < v17)
          {
            goto LABEL_30;
          }
          v30 = (v29 >> 4) + 1;
          v31 = 16 * (v30 & 0x1FFFFFFFFFFFFFFELL);
          v32 = &v27[-v31];
          v33 = &v17[-v31];
          v34 = (double *)(v27 - 32);
          v35 = (const double *)(v17 - 32);
          v36 = v30 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v87 = vld2q_f64(v35);
            v35[2] = 0.0;
            *v35 = 0.0;
            v35 -= 4;
            vst2q_f64(v34, v87);
            v34 -= 4;
            v36 -= 2;
          }
          while (v36);
          v27 = v32;
          v17 = v33;
          if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_30:
            v32 = v27;
            do
            {
              v37 = *((_QWORD *)v17 - 2);
              v17 -= 16;
              *(_QWORD *)v17 = 0;
              *((_QWORD *)v32 - 2) = v37;
              v32 -= 16;
              *((_QWORD *)v32 + 1) = *((_QWORD *)v17 + 1);
            }
            while (v17 != v20);
          }
          v17 = *(char **)(a1 + 32);
          v38 = *(char **)(a1 + 40);
          *(_QWORD *)(a1 + 32) = v32;
          *(_QWORD *)(a1 + 40) = v19;
          *(_QWORD *)(a1 + 48) = v28;
          if (v38 != v17)
          {
            v39 = v38;
            do
            {
              v40 = *((_QWORD *)v39 - 2);
              v39 -= 16;
              *(_QWORD *)v39 = 0;
              if (v40)
                (*((void (**)(void))v38 - 1))();
              v38 = v39;
            }
            while (v39 != v17);
          }
        }
        if (v17)
          operator delete(v17);
      }
      else
      {
        v18 = MEMORY[0x24BDAE450];
        *(_QWORD *)v17 = v14;
        *((_QWORD *)v17 + 1) = v18;
        v19 = v17 + 16;
      }
      *(_QWORD *)(a1 + 40) = v19;
      v9 = *(unsigned int *)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 32);
    }
  }
  *(_DWORD *)(a1 + 56) = v9 + 1;
  *(_QWORD *)(a1 + 64) = 1;
  v8 = *(_QWORD *)(v13 + 16 * v9);
LABEL_42:
  v41 = *((_QWORD *)a3 + 1);
  *(_DWORD *)(v8 + 8) = a3[4];
  *(_QWORD *)v8 = v41;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 3);
  *(_QWORD *)(v8 + 24) = *((_QWORD *)a3 + 4);
  v42 = *(_OWORD *)(a3 + 14);
  v43 = *(_OWORD *)(a3 + 18);
  v44 = *(_OWORD *)(a3 + 22);
  v45 = *((_QWORD *)a3 + 13);
  v46 = *(_OWORD *)(a3 + 10);
  *(_QWORD *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 32) = v46;
  *(_QWORD *)(v8 + 96) = v45;
  *(_OWORD *)(v8 + 80) = v44;
  *(_OWORD *)(v8 + 64) = v43;
  *(_OWORD *)(v8 + 48) = v42;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  v48 = (_BYTE *)*((_QWORD *)a3 + 14);
  v47 = (_BYTE *)*((_QWORD *)a3 + 15);
  v49 = v47 - v48;
  if (v47 != v48)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v49 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v50 = (char *)operator new(v49);
    *(_QWORD *)(v8 + 104) = v50;
    *(_QWORD *)(v8 + 112) = v50;
    v51 = &v50[8 * (v49 >> 3)];
    *(_QWORD *)(v8 + 120) = v51;
    memcpy(v50, v48, v49);
    *(_QWORD *)(v8 + 112) = v51;
  }
  sub_20F619B3C(v8 + 128, (uint64_t)(a3 + 34));
  *(_BYTE *)(v8 + 168) = *((_BYTE *)a3 + 176);
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(a3 + 46);
  v52 = *(_OWORD *)(a3 + 50);
  v53 = *(_OWORD *)(a3 + 54);
  v54 = *(_OWORD *)(a3 + 58);
  *(_QWORD *)(v8 + 240) = *((_QWORD *)a3 + 31);
  *(_OWORD *)(v8 + 208) = v53;
  *(_OWORD *)(v8 + 224) = v54;
  *(_OWORD *)(v8 + 192) = v52;
  v55 = *a3;
  v57 = *(_QWORD **)a1;
  v56 = *(_QWORD *)(a1 + 8);
  v58 = a2;
  v59 = (uint64_t)a2 - *(_QWORD *)a1;
  v60 = v59 >> 4;
  v6 = *(_QWORD *)a1 + (v59 & 0xFFFFFFFFFFFFFFF0);
  v61 = *(_QWORD *)(a1 + 16);
  if (v56 < v61)
  {
    if (v6 == v56)
    {
      *(_DWORD *)v6 = v55;
      *(_QWORD *)(v6 + 8) = v8;
      *(_QWORD *)(a1 + 8) = v6 + 16;
    }
    else
    {
      v62 = v6 + 16;
      v63 = (__int128 *)(v56 - 16);
      v64 = *(_OWORD **)(a1 + 8);
      if (v56 >= 0x10)
      {
        do
        {
          v65 = *v63++;
          *v64++ = v65;
        }
        while ((unint64_t)v63 < v56);
      }
      *(_QWORD *)(a1 + 8) = v64;
      if (v56 != v62)
      {
        v66 = (uint64_t)(v56 - v62) >> 4;
        v67 = (_QWORD *)(v56 - 8);
        v68 = 16 * v66;
        do
        {
          *((_DWORD *)v67 - 2) = *(_DWORD *)(v6 + v68 - 16);
          *v67 = *(_QWORD *)(v6 + v68 - 8);
          v67 -= 2;
          v68 -= 16;
        }
        while (v68);
      }
      *(_DWORD *)v6 = v55;
      v57[2 * v60 + 1] = v8;
    }
    return (char *)v6;
  }
  v69 = ((uint64_t)(v56 - (_QWORD)v57) >> 4) + 1;
  if (v69 >> 60)
    sub_20E867F44();
  v70 = v61 - (_QWORD)v57;
  if (v70 >> 3 > v69)
    v69 = v70 >> 3;
  if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
    v71 = 0xFFFFFFFFFFFFFFFLL;
  else
    v71 = v69;
  if (v71)
  {
    if (!(v71 >> 60))
    {
      v72 = *a3;
      v73 = (char *)operator new(16 * v71);
      v55 = v72;
      v74 = &v73[16 * v60];
      v75 = &v73[16 * v71];
      if (v60 != v71)
        goto LABEL_69;
      goto LABEL_65;
    }
LABEL_88:
    sub_20E877A38();
  }
  v73 = 0;
  v74 = (char *)(16 * v60);
  v75 = 0;
  if (v60)
    goto LABEL_69;
LABEL_65:
  if (v59 < 1)
  {
    if (v57 == (_QWORD *)v58)
      v85 = 1;
    else
      v85 = v59 >> 3;
    if (v85 >> 60)
      sub_20E877A38();
    v86 = v55;
    v74 = (char *)operator new(16 * v85);
    v75 = &v74[16 * v85];
    if (v73)
    {
      operator delete(v73);
      v75 = &v74[16 * v85];
      v57 = *(_QWORD **)a1;
    }
    *(_DWORD *)v74 = v86;
    *((_QWORD *)v74 + 1) = v8;
    v77 = v74 + 16;
    v78 = v74;
    if (v57 == (_QWORD *)v6)
      goto LABEL_72;
    goto LABEL_70;
  }
  v76 = v60 + 2;
  if (v60 >= -1)
    v76 = v60 + 1;
  v74 -= 16 * (v76 >> 1);
LABEL_69:
  *(_DWORD *)v74 = v55;
  *((_QWORD *)v74 + 1) = v8;
  v77 = v74 + 16;
  v78 = v74;
  if (v57 != (_QWORD *)v6)
  {
LABEL_70:
    v79 = v6;
    v80 = v74;
    do
    {
      v78 = v80 - 16;
      *((_OWORD *)v80 - 1) = *(_OWORD *)(v79 - 16);
      v79 -= 16;
      v80 -= 16;
    }
    while ((_QWORD *)v79 != v57);
  }
LABEL_72:
  for (i = *(_QWORD *)(a1 + 8); v6 != i; ++v77)
  {
    v82 = *(_OWORD *)v6;
    v6 += 16;
    *v77 = v82;
  }
  v83 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v78;
  *(_QWORD *)(a1 + 8) = v77;
  *(_QWORD *)(a1 + 16) = v75;
  if (v83)
    operator delete(v83);
  return v74;
}

void sub_20F716404(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F716438(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(__int128 **)(a1 + 680);
  v5 = *(__int128 **)(a1 + 688);
  if (v5 == v4)
  {
    v4 = *(__int128 **)(a1 + 688);
  }
  else
  {
    v6 = v5 - v4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v5 != v4 && v3 == *(_DWORD *)v4)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  *(_OWORD *)&v38[4] = *(_OWORD *)a2;
  *(_QWORD *)&v38[20] = *((_QWORD *)a2 + 2);
  v13 = v12 == 0;
  v14 = sub_20F2C0AB0(a1 + 704);
  *(_DWORD *)v14 = -1;
  *(_BYTE *)(v14 + 4) = 1;
  *(_DWORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 12) = *(_OWORD *)v38;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)&v38[12];
  v36 = v3;
  v37 = v14;
  sub_20F2C0848((char **)(a1 + 680), v4, (uint64_t)&v36);
  if (!v13)
  {
    v15 = *(char **)(a1 + 1544);
    v16 = *(_QWORD *)(a1 + 1552);
    if ((unint64_t)v15 < v16)
    {
      *(_DWORD *)v15 = v3;
      v17 = (uint64_t)(v15 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 1544) = v17;
      goto LABEL_35;
    }
    v18 = *(char **)(a1 + 1536);
    v19 = (v15 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = (unsigned int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v3;
      v17 = (uint64_t)(v24 + 1);
      v26 = v15 - v18;
      if (v15 == v18)
        goto LABEL_32;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      v17 = 4 * v19 + 4;
      v26 = v15 - v18;
      if (v15 == v18)
      {
LABEL_32:
        *(_QWORD *)(a1 + 1536) = v24;
        *(_QWORD *)(a1 + 1544) = v17;
        *(_QWORD *)(a1 + 1552) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_34;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_41;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v15[-v29];
    v24 = (unsigned int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v15 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v15 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v35 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v24 = v35;
      }
      while (v15 != v18);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 978) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  return 1;
}

char *sub_20F7166C8(uint64_t a1, _DWORD *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  double *v34;
  const double *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  int v50;
  unint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  _OWORD *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t i;
  __int128 v76;
  _DWORD *v77;
  unint64_t v79;
  int v80;
  float64x2x2_t v81;

  v6 = *(_QWORD *)(a1 + 8);
  if ((_DWORD *)v6 != a2 && *a3 == *a2)
    return (char *)v6;
  v7 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 72) != v7)
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 80) = v7 - 8;
    goto LABEL_42;
  }
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 64);
    if (v10 < 8 << (v9 - 1))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * (v9 - 1));
      *(_QWORD *)(a1 + 64) = v10 + 1;
      v8 = v11 + 200 * v10;
      goto LABEL_42;
    }
    v12 = 200 * (16 << (v9 - 1));
    v13 = *(_QWORD *)(a1 + 32);
    if (v9 == (*(_QWORD *)(a1 + 40) - v13) >> 4)
      goto LABEL_11;
  }
  else
  {
    v12 = 1600;
    v13 = *(_QWORD *)(a1 + 32);
    if (v9 == (*(_QWORD *)(a1 + 40) - v13) >> 4)
    {
LABEL_11:
      v14 = malloc_type_aligned_alloc(8uLL, v12, 0x8BB35E2BuLL);
      v15 = v14;
      v17 = *(char **)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v17 >= v16)
      {
        v20 = *(char **)(a1 + 32);
        v21 = (v17 - v20) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          sub_20E867F44();
        v23 = v16 - (_QWORD)v20;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 60)
            goto LABEL_88;
          v25 = (char *)operator new(16 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = MEMORY[0x24BDAE450];
        v27 = &v25[16 * v21];
        v28 = &v25[16 * v24];
        *(_QWORD *)v27 = v15;
        *((_QWORD *)v27 + 1) = v26;
        v19 = v27 + 16;
        if (v17 == v20)
        {
          *(_QWORD *)(a1 + 32) = v27;
          *(_QWORD *)(a1 + 40) = v19;
          *(_QWORD *)(a1 + 48) = v28;
        }
        else
        {
          v29 = v17 - v20 - 16;
          if (v29 < 0x90
            || &v17[-(v29 & 0xFFFFFFFFFFFFFFF0) - 16] < v27
            && &v25[v17 - v20 - (v29 & 0xFFFFFFFFFFFFFFF0) - 16] < v17)
          {
            goto LABEL_30;
          }
          v30 = (v29 >> 4) + 1;
          v31 = 16 * (v30 & 0x1FFFFFFFFFFFFFFELL);
          v32 = &v27[-v31];
          v33 = &v17[-v31];
          v34 = (double *)(v27 - 32);
          v35 = (const double *)(v17 - 32);
          v36 = v30 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v81 = vld2q_f64(v35);
            v35[2] = 0.0;
            *v35 = 0.0;
            v35 -= 4;
            vst2q_f64(v34, v81);
            v34 -= 4;
            v36 -= 2;
          }
          while (v36);
          v27 = v32;
          v17 = v33;
          if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_30:
            v32 = v27;
            do
            {
              v37 = *((_QWORD *)v17 - 2);
              v17 -= 16;
              *(_QWORD *)v17 = 0;
              *((_QWORD *)v32 - 2) = v37;
              v32 -= 16;
              *((_QWORD *)v32 + 1) = *((_QWORD *)v17 + 1);
            }
            while (v17 != v20);
          }
          v17 = *(char **)(a1 + 32);
          v38 = *(char **)(a1 + 40);
          *(_QWORD *)(a1 + 32) = v32;
          *(_QWORD *)(a1 + 40) = v19;
          *(_QWORD *)(a1 + 48) = v28;
          if (v38 != v17)
          {
            v39 = v38;
            do
            {
              v40 = *((_QWORD *)v39 - 2);
              v39 -= 16;
              *(_QWORD *)v39 = 0;
              if (v40)
                (*((void (**)(void))v38 - 1))();
              v38 = v39;
            }
            while (v39 != v17);
          }
        }
        if (v17)
          operator delete(v17);
      }
      else
      {
        v18 = MEMORY[0x24BDAE450];
        *(_QWORD *)v17 = v14;
        *((_QWORD *)v17 + 1) = v18;
        v19 = v17 + 16;
      }
      *(_QWORD *)(a1 + 40) = v19;
      v9 = *(unsigned int *)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 32);
    }
  }
  *(_DWORD *)(a1 + 56) = v9 + 1;
  *(_QWORD *)(a1 + 64) = 1;
  v8 = *(_QWORD *)(v13 + 16 * v9);
LABEL_42:
  v41 = *((_QWORD *)a3 + 1);
  *(_DWORD *)(v8 + 8) = a3[4];
  *(_QWORD *)v8 = v41;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 3);
  *(_QWORD *)(v8 + 24) = *((_QWORD *)a3 + 4);
  v42 = *(_OWORD *)(a3 + 14);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a3 + 10);
  *(_OWORD *)(v8 + 48) = v42;
  v43 = *(_OWORD *)(a3 + 18);
  *(_QWORD *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 64) = v43;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  v45 = (_BYTE *)*((_QWORD *)a3 + 11);
  v44 = (_BYTE *)*((_QWORD *)a3 + 12);
  v46 = v44 - v45;
  if (v44 != v45)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v46 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v47 = (char *)operator new(v46);
    *(_QWORD *)(v8 + 80) = v47;
    *(_QWORD *)(v8 + 88) = v47;
    v48 = &v47[8 * (v46 >> 3)];
    *(_QWORD *)(v8 + 96) = v48;
    memcpy(v47, v45, v46);
    *(_QWORD *)(v8 + 88) = v48;
  }
  sub_20F619B3C(v8 + 104, (uint64_t)(a3 + 28));
  *(_WORD *)(v8 + 144) = *((_WORD *)a3 + 76);
  v49 = *((_OWORD *)a3 + 10);
  *(_OWORD *)(v8 + 168) = *((_OWORD *)a3 + 11);
  *(_OWORD *)(v8 + 152) = v49;
  *(_OWORD *)(v8 + 184) = *((_OWORD *)a3 + 12);
  v50 = *a3;
  v52 = *(_DWORD **)a1;
  v51 = *(_QWORD *)(a1 + 8);
  v53 = (uint64_t)a2 - *(_QWORD *)a1;
  v54 = v53 >> 4;
  v6 = *(_QWORD *)a1 + (v53 & 0xFFFFFFFFFFFFFFF0);
  v55 = *(_QWORD *)(a1 + 16);
  if (v51 < v55)
  {
    if (v6 == v51)
    {
      *(_DWORD *)v6 = v50;
      *(_QWORD *)(v6 + 8) = v8;
      *(_QWORD *)(a1 + 8) = v6 + 16;
    }
    else
    {
      v56 = v6 + 16;
      v57 = (__int128 *)(v51 - 16);
      v58 = *(_OWORD **)(a1 + 8);
      if (v51 >= 0x10)
      {
        do
        {
          v59 = *v57++;
          *v58++ = v59;
        }
        while ((unint64_t)v57 < v51);
      }
      *(_QWORD *)(a1 + 8) = v58;
      if (v51 != v56)
      {
        v60 = (uint64_t)(v51 - v56) >> 4;
        v61 = (_QWORD *)(v51 - 8);
        v62 = 16 * v60;
        do
        {
          *((_DWORD *)v61 - 2) = *(_DWORD *)(v6 + v62 - 16);
          *v61 = *(_QWORD *)(v6 + v62 - 8);
          v61 -= 2;
          v62 -= 16;
        }
        while (v62);
      }
      *(_DWORD *)v6 = v50;
      *(_QWORD *)&v52[4 * v54 + 2] = v8;
    }
    return (char *)v6;
  }
  v63 = ((uint64_t)(v51 - (_QWORD)v52) >> 4) + 1;
  if (v63 >> 60)
    sub_20E867F44();
  v64 = v55 - (_QWORD)v52;
  if (v64 >> 3 > v63)
    v63 = v64 >> 3;
  if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
    v65 = 0xFFFFFFFFFFFFFFFLL;
  else
    v65 = v63;
  if (v65)
  {
    if (!(v65 >> 60))
    {
      v66 = *a3;
      v67 = (char *)operator new(16 * v65);
      v50 = v66;
      v68 = &v67[16 * v54];
      v69 = &v67[16 * v65];
      if (v54 != v65)
        goto LABEL_69;
      goto LABEL_65;
    }
LABEL_88:
    sub_20E877A38();
  }
  v67 = 0;
  v68 = (char *)(16 * v54);
  v69 = 0;
  if (v54)
    goto LABEL_69;
LABEL_65:
  if (v53 < 1)
  {
    if (v52 == a2)
      v79 = 1;
    else
      v79 = v53 >> 3;
    if (v79 >> 60)
      sub_20E877A38();
    v80 = v50;
    v68 = (char *)operator new(16 * v79);
    v69 = &v68[16 * v79];
    if (v67)
    {
      operator delete(v67);
      v69 = &v68[16 * v79];
      v52 = *(_DWORD **)a1;
    }
    *(_DWORD *)v68 = v80;
    *((_QWORD *)v68 + 1) = v8;
    v71 = v68 + 16;
    v72 = v68;
    if (v52 == (_DWORD *)v6)
      goto LABEL_72;
    goto LABEL_70;
  }
  v70 = v54 + 2;
  if (v54 >= -1)
    v70 = v54 + 1;
  v68 -= 16 * (v70 >> 1);
LABEL_69:
  *(_DWORD *)v68 = v50;
  *((_QWORD *)v68 + 1) = v8;
  v71 = v68 + 16;
  v72 = v68;
  if (v52 != (_DWORD *)v6)
  {
LABEL_70:
    v73 = v6;
    v74 = v68;
    do
    {
      v72 = v74 - 16;
      *((_OWORD *)v74 - 1) = *(_OWORD *)(v73 - 16);
      v73 -= 16;
      v74 -= 16;
    }
    while ((_DWORD *)v73 != v52);
  }
LABEL_72:
  for (i = *(_QWORD *)(a1 + 8); v6 != i; ++v71)
  {
    v76 = *(_OWORD *)v6;
    v6 += 16;
    *v71 = v76;
  }
  v77 = *(_DWORD **)a1;
  *(_QWORD *)a1 = v72;
  *(_QWORD *)(a1 + 8) = v71;
  *(_QWORD *)(a1 + 16) = v69;
  if (v77)
    operator delete(v77);
  return v68;
}

void sub_20F716C94(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F716CC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *i;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  __int128 v33;
  void (***v34)(_QWORD);
  void (***v35)(_QWORD);
  void (**v36)(_QWORD);
  BOOL v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;

  v3 = sub_20E9DF85C((_QWORD *)(a1 + 24), (uint64_t *)a2);
  if (v3)
  {
    for (i = (_QWORD *)v3[7]; i; i = (_QWORD *)*i)
    {
      v6 = i[3];
      v5 = (std::__shared_weak_count *)i[4];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if (!*(_BYTE *)(v6 + 192))
        goto LABEL_45;
      v40 = v6 + 40;
      v9 = *(_QWORD *)(v6 + 200);
      v10 = *(_QWORD *)(v6 + 208);
      v11 = *(_QWORD *)a2;
      v12 = *(_DWORD *)(a2 + 8);
      v13 = *(_DWORD *)(a2 + 16);
      if (v10 != v9)
      {
        v14 = (v10 - v9) >> 5;
        while (1)
        {
          v15 = v14 >> 1;
          v16 = v9 + 32 * (v14 >> 1);
          v17 = *(_DWORD *)(v16 + 16);
          v18 = v17 >= v13;
          if (v17 != v13)
            goto LABEL_17;
          if (*(_QWORD *)v16 >= v11)
            break;
LABEL_11:
          v9 = v16 + 32;
          v15 = v14 + ~v15;
LABEL_12:
          v14 = v15;
          if (!v15)
            goto LABEL_20;
        }
        if (*(_QWORD *)v16 != v11)
          goto LABEL_12;
        v18 = *(_DWORD *)(v16 + 8) >= v12;
LABEL_17:
        if (v18)
          goto LABEL_12;
        goto LABEL_11;
      }
LABEL_20:
      if (v9 != v10
        && *(_DWORD *)(v9 + 16) == v13
        && *(_QWORD *)v9 == v11
        && *(_DWORD *)(v9 + 8) == v12
        && (v19 = *(_QWORD *)(v9 + 24)) != 0)
      {
        v21 = *(_QWORD *)(v6 + 24);
        v20 = *(_QWORD *)(v6 + 32);
        v23 = *(_QWORD **)(a2 + 32);
        v22 = *(_QWORD *)(a2 + 40);
        if ((unint64_t)v23 < v22)
          goto LABEL_26;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 376, (uint64_t)"ftr_ptr != nullptr", 18, (uint64_t)"Cannot find the feature in the track", 36, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v19 = 0;
        v21 = *(_QWORD *)(v6 + 24);
        v20 = *(_QWORD *)(v6 + 32);
        v23 = *(_QWORD **)(a2 + 32);
        v22 = *(_QWORD *)(a2 + 40);
        if ((unint64_t)v23 < v22)
        {
LABEL_26:
          *v23 = &off_24C9FC700;
          v23[1] = v21;
          v23[2] = v20;
          v23[3] = v19;
          v24 = v23 + 5;
          v23[4] = v40;
          goto LABEL_44;
        }
      }
      v25 = *(_QWORD **)(a2 + 24);
      v26 = 0xCCCCCCCCCCCCCCCDLL * (v23 - v25) + 1;
      if (v26 > 0x666666666666666)
        sub_20E867F44();
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v25) >> 3);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x333333333333333)
        v28 = 0x666666666666666;
      else
        v28 = v26;
      if (v28 > 0x666666666666666)
        sub_20E877A38();
      v29 = (char *)operator new(40 * v28);
      v30 = &v29[8 * (v23 - v25)];
      *(_QWORD *)v30 = &off_24C9FC700;
      *((_QWORD *)v30 + 1) = v21;
      v31 = &v29[40 * v28];
      *((_QWORD *)v30 + 2) = v20;
      *((_QWORD *)v30 + 3) = v19;
      *((_QWORD *)v30 + 4) = v40;
      v24 = v30 + 40;
      if (v23 == v25)
      {
        *(_QWORD *)(a2 + 24) = v30;
        *(_QWORD *)(a2 + 32) = v24;
        *(_QWORD *)(a2 + 40) = v31;
        if (!v23)
          goto LABEL_44;
      }
      else
      {
        v32 = v23;
        do
        {
          v33 = *((_OWORD *)v32 - 2);
          *((_QWORD *)v30 - 5) = &off_24C9FC700;
          v30 -= 40;
          *(_OWORD *)(v30 + 8) = v33;
          *(_OWORD *)(v30 + 24) = *((_OWORD *)v32 - 1);
          v32 -= 5;
        }
        while (v32 != v25);
        *(_QWORD *)(a2 + 24) = v30;
        *(_QWORD *)(a2 + 32) = v24;
        *(_QWORD *)(a2 + 40) = v31;
        v34 = (void (***)(_QWORD))(v23 - 5);
        v35 = v34;
        do
        {
          v36 = *v35;
          v35 -= 5;
          (*v36)(v34);
          v37 = v34 == v25;
          v34 = v35;
        }
        while (!v37);
        v23 = v25;
        if (!v25)
          goto LABEL_44;
      }
      operator delete(v23);
LABEL_44:
      *(_QWORD *)(a2 + 32) = v24;
LABEL_45:
      if (v5)
      {
        v38 = (unint64_t *)&v5->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_20F716FF4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20F717038(unsigned int a1, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8, __n128 a9, double a10, uint64_t a11)
{
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  char *v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_count *v76;
  std::__shared_weak_count *v77;
  unsigned int v78;
  uint64_t shared_owners;
  std::__shared_weak_count *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_count *v83;
  std::__shared_weak_count *v84;
  unsigned int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_count *v90;
  std::__shared_weak_count *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t v96;
  std::__shared_count *v97;
  std::__shared_weak_count *v98;
  unsigned int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  char *v102;
  unint64_t v103;
  unsigned int *v104;
  char *v105;
  unsigned int v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  __int128 v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  char v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unsigned int v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unsigned int v148;
  _QWORD *v149;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v152;
  _QWORD *v153;
  int v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned int *v161;
  char *v162;
  unsigned int v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v166;
  char *v167;
  unsigned int v168;
  uint64_t v169;
  _QWORD *v170;
  std::string *v171;
  std::string::size_type v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  const char *v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  _QWORD *v185;
  std::string *v186;
  std::string::size_type v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  char *v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int *v197;
  char *v198;
  unsigned int v199;
  uint64_t v200;
  _QWORD *v201;
  std::string *v202;
  std::string::size_type v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  const char *v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  _QWORD *v215;
  std::string *v216;
  std::string::size_type v217;
  _QWORD *v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int *v222;
  char *v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int *v227;
  char *v228;
  unsigned int v229;
  uint64_t v230;
  _QWORD *v231;
  std::string *v232;
  std::string::size_type v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  const char *v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  char *v242;
  char *v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  _QWORD *v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int *v253;
  char *v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int *v258;
  char *v259;
  unsigned int v260;
  uint64_t v261;
  _QWORD *v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  const char *v269;
  uint64_t v270;
  _QWORD *v271;
  int v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  _QWORD *v277;
  std::string *v278;
  std::string::size_type v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int *v284;
  char *v285;
  unsigned int v286;
  unint64_t v287;
  unint64_t v288;
  unsigned int *v289;
  char *v290;
  unsigned int v291;
  uint64_t v292;
  _QWORD *v293;
  std::string *v294;
  std::string::size_type v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  const char *v300;
  uint64_t v301;
  _QWORD *v302;
  char *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  std::string *v308;
  std::string::size_type v309;
  _QWORD *v310;
  _QWORD *v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int *v314;
  char *v315;
  unsigned int v316;
  unint64_t v317;
  unint64_t v318;
  unsigned int *v319;
  char *v320;
  unsigned int v321;
  uint64_t v322;
  _QWORD *v323;
  std::string *v324;
  std::string::size_type v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  const char *v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  char *v334;
  char *v335;
  uint64_t v336;
  _QWORD *v337;
  std::string *v338;
  std::string::size_type v339;
  _QWORD *v340;
  _QWORD *v341;
  unint64_t v342;
  unint64_t v343;
  unsigned int *v344;
  char *v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  unsigned int *v349;
  char *v350;
  unsigned int v351;
  uint64_t v352;
  _QWORD *v353;
  std::string *v354;
  std::string::size_type v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  const char *v360;
  uint64_t v361;
  _QWORD *v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  _QWORD *v367;
  std::string *v368;
  std::string::size_type v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  unsigned int *v374;
  char *v375;
  unsigned int v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  char *v380;
  unsigned int v381;
  uint64_t v382;
  _QWORD *v383;
  std::string *v384;
  std::string::size_type v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  const char *v390;
  uint64_t v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  _QWORD *v397;
  std::string *v398;
  std::string::size_type v399;
  _QWORD *v400;
  _QWORD *v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int *v404;
  char *v405;
  unsigned int v406;
  unint64_t v407;
  unint64_t v408;
  unsigned int *v409;
  char *v410;
  unsigned int v411;
  uint64_t v412;
  _QWORD *v413;
  std::string *v414;
  std::string::size_type v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  _QWORD *v419;
  const char *v420;
  uint64_t v421;
  _QWORD *v422;
  int v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  _QWORD *v428;
  std::string *v429;
  std::string::size_type v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int *v435;
  char *v436;
  unsigned int v437;
  unint64_t v438;
  unint64_t v439;
  unsigned int *v440;
  char *v441;
  unsigned int v442;
  uint64_t v443;
  _QWORD *v444;
  std::string *v445;
  std::string::size_type v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  const char *v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  _QWORD *v458;
  std::string *v459;
  std::string::size_type v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  unint64_t v464;
  unsigned int *v465;
  char *v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  unsigned int *v470;
  char *v471;
  unsigned int v472;
  int v473;
  uint64_t v474;
  _QWORD *v475;
  std::string *v476;
  std::string::size_type v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  const char *v482;
  uint64_t v483;
  _QWORD *v484;
  char *v485;
  char *v486;
  uint64_t v487;
  _QWORD *v488;
  std::string *v489;
  std::string::size_type v490;
  _QWORD *v491;
  _QWORD *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t *v495;
  char *v496;
  unint64_t v497;
  _QWORD *v498;
  std::string *v499;
  std::string::size_type v500;
  _QWORD *v501;
  _QWORD *v502;
  BOOL v503;
  char v504;
  std::string::size_type v505;
  std::string *v506;
  _QWORD *v507;
  std::string *v508;
  std::string::size_type v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  const void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  std::string *v517;
  __int128 v518;
  std::string *v519;
  __int128 v520;
  void **v521;
  uint64_t v522;
  _BOOL4 v523;
  unint64_t v524;
  __int128 v525;
  unint64_t v526;
  __int128 v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  unint64_t *p_shared_owners;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  char *v535;
  unint64_t *v536;
  __int128 v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t *v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  unint64_t v546;
  __int128 v547;
  unint64_t v548;
  std::string::size_type v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  char *v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t *v560;
  uint64_t v561;
  std::string::size_type v562;
  char *v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  unint64_t v569;
  unint64_t *v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  unint64_t v574;
  __int128 v575;
  unint64_t v576;
  std::string::size_type v577;
  char *v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  int64x2_t v588;
  unint64_t v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  char *v595;
  int64_t v596;
  unint64_t v597;
  int v598;
  std::__shared_weak_count *v599;
  std::__shared_weak_count *v600;
  int v601;
  std::__shared_weak_count *v602;
  std::__shared_weak_count *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  std::string v606;
  void *v607[2];
  int64_t v608;
  uint64_t v609;
  std::__shared_weak_count *v610;
  uint64_t v611;
  std::__shared_weak_count *v612;
  std::string v613;
  std::string v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  unint64_t v620;
  __int128 v621;
  __int128 v622;
  unint64_t v623;
  char v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  char v627;
  std::string __p;
  char *v629;
  uint64_t v630;
  unint64_t v631;
  char v632;
  __int128 v633;
  int64x2_t v634;
  __int128 v635;
  std::string v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  unint64_t v642;
  __int128 v643;
  __int128 v644;
  unint64_t v645;
  char v646;
  __int128 v647;
  char v648;

  v14 = a2;
  v16 = a11;
  v17 = a8;
  v609 = 0;
  v610 = 0;
  v611 = 0;
  v612 = 0;
  v18 = *(unint64_t **)(a11 + 992);
  v19 = *(unint64_t **)(a11 + 1000);
  if (v18 == v19)
  {
    v20 = *(unint64_t **)(a11 + 992);
  }
  else
  {
    v20 = *(unint64_t **)(a11 + 1000);
    if (*(v19 - 27) >= a8)
    {
      v21 = 0x84BDA12F684BDA13 * (v19 - v18);
      v22 = *(unint64_t **)(a11 + 992);
      do
      {
        v23 = v21 >> 1;
        v24 = &v22[27 * (v21 >> 1)];
        v26 = *v24;
        v25 = v24 + 27;
        v21 += ~(v21 >> 1);
        if (v26 < a8)
          v22 = v25;
        else
          v21 = v23;
      }
      while (v21);
      v20 = *(unint64_t **)(a11 + 1000);
      if (v22 != v19)
      {
        v20 = v22;
        if (*v22 == a8)
        {
LABEL_159:
          v124 = 1;
          v125 = v610;
          if (!v610)
            goto LABEL_165;
          goto LABEL_162;
        }
      }
    }
  }
  v613.__r_.__value_.__r.__words[0] = a8;
  *(__n128 *)&v613.__r_.__value_.__r.__words[1] = a9;
  v614.__r_.__value_.__r.__words[0] = a7;
  v614.__r_.__value_.__l.__size_ = a6;
  *(double *)&v614.__r_.__value_.__r.__words[2] = a10;
  v615 = 0u;
  v616 = 0u;
  v617 = 0u;
  v618 = 0u;
  v619 = 0u;
  v625 = 0;
  v626 = 0;
  v620 = 0;
  v623 = 0xBFF0000000000000;
  v624 = 0;
  v627 = 0;
  v28 = *(char **)(a11 + 416);
  v27 = *(char **)(a11 + 424);
  v29 = v27 - v28;
  if (v27 == v28)
    goto LABEL_153;
  a2 = &v615;
  v30 = v29 >> 4;
  v31 = *(char **)(a11 + 416);
  v32 = v29 >> 4;
  do
  {
    v33 = v32 >> 1;
    v34 = (unsigned int *)&v31[16 * (v32 >> 1)];
    v36 = *v34;
    v35 = (char *)(v34 + 4);
    v32 += ~(v32 >> 1);
    if (v36 < v14)
      v31 = v35;
    else
      v32 = v33;
  }
  while (v32);
  if (v31 == v27 || *(_DWORD *)v31 != v14)
  {
LABEL_153:
    v120 = 1;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v37 = *((_QWORD *)v31 + 1);
  *(_QWORD *)&v615 = v37;
  ++*(_DWORD *)(*((_QWORD *)v31 + 1) + 8);
  do
  {
    v38 = v30 >> 1;
    v39 = (unsigned int *)&v28[16 * (v30 >> 1)];
    v41 = *v39;
    v40 = (char *)(v39 + 4);
    v30 += ~(v30 >> 1);
    if (v41 < a4)
      v28 = v40;
    else
      v30 = v38;
  }
  while (v30);
  if (v28 == v27 || *(_DWORD *)v28 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    v42 = 0;
LABEL_133:
    if (v37)
      --*(_DWORD *)(v37 + 8);
    if (v42)
      --*(_DWORD *)(v42 + 8);
    if (v51)
      --*(_DWORD *)(v51 + 8);
    if (v57)
      --*(_DWORD *)(v57 + 8);
    if (v66)
      --*(_DWORD *)(v66 + 8);
    if (v72)
      --*(_DWORD *)(v72 + 8);
    if (shared_owners)
      --*(_DWORD *)(shared_owners + 8);
    if (v86)
      --*(_DWORD *)(v86 + 8);
    if (v93)
      --*(_DWORD *)(v93 + 8);
    if (v100)
      --*(_DWORD *)(v100 + 8);
    goto LABEL_153;
  }
  v42 = *((_QWORD *)v28 + 1);
  *((_QWORD *)&v615 + 1) = v42;
  ++*(_DWORD *)(*((_QWORD *)v28 + 1) + 8);
  v44 = *(char **)(a11 + 128);
  v43 = *(char **)(a11 + 136);
  v45 = v44;
  if (v43 != v44)
  {
    v46 = (v43 - v44) >> 4;
    v45 = *(char **)(a11 + 128);
    do
    {
      v47 = v46 >> 1;
      v48 = (unsigned int *)&v45[16 * (v46 >> 1)];
      v50 = *v48;
      v49 = (char *)(v48 + 4);
      v46 += ~(v46 >> 1);
      if (v50 < a1)
        v45 = v49;
      else
        v46 = v47;
    }
    while (v46);
  }
  if (v45 == v43 || *(_DWORD *)v45 != a1)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    goto LABEL_133;
  }
  v51 = *((_QWORD *)v45 + 1);
  *(_QWORD *)&v616 = v51;
  ++*(_DWORD *)(*((_QWORD *)v45 + 1) + 8);
  if (v43 != v44)
  {
    v52 = (v43 - v44) >> 4;
    do
    {
      v53 = v52 >> 1;
      v54 = (unsigned int *)&v44[16 * (v52 >> 1)];
      v56 = *v54;
      v55 = (char *)(v54 + 4);
      v52 += ~(v52 >> 1);
      if (v56 < a3)
        v44 = v55;
      else
        v52 = v53;
    }
    while (v52);
  }
  if (v44 == v43 || *(_DWORD *)v44 != a3)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    goto LABEL_133;
  }
  v57 = *((_QWORD *)v44 + 1);
  *((_QWORD *)&v616 + 1) = v57;
  ++*(_DWORD *)(*((_QWORD *)v44 + 1) + 8);
  v58 = *(char **)(a11 + 512);
  v59 = *(char **)(a11 + 520);
  v60 = v58;
  if (v59 != v58)
  {
    v61 = (v59 - v58) >> 4;
    v60 = *(char **)(a11 + 512);
    do
    {
      v62 = v61 >> 1;
      v63 = (unsigned int *)&v60[16 * (v61 >> 1)];
      v65 = *v63;
      v64 = (char *)(v63 + 4);
      v61 += ~(v61 >> 1);
      if (v65 < v14)
        v60 = v64;
      else
        v61 = v62;
    }
    while (v61);
  }
  if (v60 == v59 || *(_DWORD *)v60 != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    goto LABEL_133;
  }
  v66 = *((_QWORD *)v60 + 1);
  *(_QWORD *)&v617 = v66;
  ++*(_DWORD *)(*((_QWORD *)v60 + 1) + 8);
  if (v59 != v58)
  {
    v67 = (v59 - v58) >> 4;
    do
    {
      v68 = v67 >> 1;
      v69 = (unsigned int *)&v58[16 * (v67 >> 1)];
      v71 = *v69;
      v70 = (char *)(v69 + 4);
      v67 += ~(v67 >> 1);
      if (v71 < a4)
        v58 = v70;
      else
        v67 = v68;
    }
    while (v67);
  }
  if (v58 == v59 || *(_DWORD *)v58 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    goto LABEL_133;
  }
  v72 = *((_QWORD *)v58 + 1);
  *((_QWORD *)&v617 + 1) = v72;
  ++*(_DWORD *)(*((_QWORD *)v58 + 1) + 8);
  v73 = *(std::__shared_weak_count **)(a11 + 608);
  v599 = *(std::__shared_weak_count **)(a11 + 616);
  v603 = v73;
  if (v599 != v73)
  {
    v74 = ((char *)v599 - (char *)v73) >> 4;
    do
    {
      v75 = v74 >> 1;
      v76 = (std::__shared_weak_count *)((char *)v73 + 16 * (v74 >> 1));
      v78 = v76->__vftable;
      v77 = (std::__shared_weak_count *)&v76[1];
      v74 += ~(v74 >> 1);
      if (v78 < v14)
        v73 = v77;
      else
        v74 = v75;
    }
    while (v74);
  }
  if (v73 == v599 || LODWORD(v73->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    goto LABEL_133;
  }
  shared_owners = v73->__shared_owners_;
  *(_QWORD *)&v618 = shared_owners;
  ++*(_DWORD *)(v73->__shared_owners_ + 8);
  v80 = v603;
  if (v599 != v603)
  {
    v81 = ((char *)v599 - (char *)v603) >> 4;
    do
    {
      v82 = v81 >> 1;
      v83 = (std::__shared_weak_count *)((char *)v80 + 16 * (v81 >> 1));
      v85 = v83->__vftable;
      v84 = (std::__shared_weak_count *)&v83[1];
      v81 += ~(v81 >> 1);
      if (v85 < a4)
        v80 = v84;
      else
        v81 = v82;
    }
    while (v81);
  }
  if (v80 == v599 || LODWORD(v80->__vftable) != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    goto LABEL_133;
  }
  v597 = v17;
  v86 = v80->__shared_owners_;
  *((_QWORD *)&v618 + 1) = v86;
  ++*(_DWORD *)(v80->__shared_owners_ + 8);
  v87 = *(std::__shared_weak_count **)(a11 + 704);
  v600 = *(std::__shared_weak_count **)(a11 + 712);
  v604 = v87;
  if (v600 != v87)
  {
    v88 = ((char *)v600 - (char *)v87) >> 4;
    do
    {
      v89 = v88 >> 1;
      v90 = (std::__shared_weak_count *)((char *)v87 + 16 * (v88 >> 1));
      v92 = v90->__vftable;
      v91 = (std::__shared_weak_count *)&v90[1];
      v88 += ~(v88 >> 1);
      if (v92 < v14)
        v87 = v91;
      else
        v88 = v89;
    }
    while (v88);
  }
  if (v87 == v600 || LODWORD(v87->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
LABEL_132:
    v17 = v597;
    v16 = a11;
    goto LABEL_133;
  }
  v93 = v87->__shared_owners_;
  *(_QWORD *)&v619 = v93;
  ++*(_DWORD *)(v87->__shared_owners_ + 8);
  if (v600 == v604)
  {
    v95 = v604;
  }
  else
  {
    v94 = ((char *)v600 - (char *)v604) >> 4;
    v95 = v604;
    do
    {
      v96 = v94 >> 1;
      v97 = (std::__shared_weak_count *)((char *)v95 + 16 * (v94 >> 1));
      v99 = v97->__vftable;
      v98 = (std::__shared_weak_count *)&v97[1];
      v94 += ~(v94 >> 1);
      if (v99 < a4)
        v95 = v98;
      else
        v94 = v96;
    }
    while (v94);
  }
  if (v95 == v600 || (v101 = v95, LODWORD(v95->__vftable) != a4))
  {
    v100 = 0;
    goto LABEL_132;
  }
  v100 = v95->__shared_owners_;
  *((_QWORD *)&v619 + 1) = v101->__shared_owners_;
  ++*(_DWORD *)(v101->__shared_owners_ + 8);
  v102 = *(char **)(a11 + 800);
  v595 = *(char **)(a11 + 808);
  if (v595 != v102)
  {
    v103 = (v595 - v102) >> 4;
    do
    {
      v104 = (unsigned int *)&v102[16 * (v103 >> 1)];
      v106 = *v104;
      v105 = (char *)(v104 + 4);
      v107 = v106 >= a5;
      if (v106 >= a5)
        v103 >>= 1;
      else
        v103 += ~(v103 >> 1);
      if (!v107)
        v102 = v105;
    }
    while (v103);
  }
  if (v102 == v595 || *(_DWORD *)v102 != a5)
    goto LABEL_132;
  v108 = *((_QWORD *)v102 + 1);
  v620 = v108;
  ++*(_DWORD *)(*((_QWORD *)v102 + 1) + 8);
  if (!*(_BYTE *)(v37 + 20)
    && !*(_BYTE *)(v42 + 20)
    && !*(_BYTE *)(v51 + 20)
    && !*(_BYTE *)(v57 + 20)
    && !*(_BYTE *)(v66 + 20)
    && !*(_BYTE *)(v72 + 20)
    && !*(_BYTE *)(shared_owners + 20)
    && !*(_BYTE *)(v86 + 20)
    && !*(_BYTE *)(v93 + 20)
    && !*(_BYTE *)(v100 + 20)
    && !*(_BYTE *)(v108 + 20))
  {
    --*(_DWORD *)(v37 + 8);
    --*(_DWORD *)(v42 + 8);
    v615 = 0u;
    --*(_DWORD *)(v51 + 8);
    --*(_DWORD *)(v57 + 8);
    v616 = 0u;
    --*(_DWORD *)(v66 + 8);
    --*(_DWORD *)(v72 + 8);
    v617 = 0u;
    --*(_DWORD *)(shared_owners + 8);
    --*(_DWORD *)(v86 + 8);
    v618 = 0u;
    --*(_DWORD *)(v93 + 8);
    --*(_DWORD *)(v100 + 8);
    v619 = 0u;
    --*(_DWORD *)(v108 + 8);
    v120 = 1;
    v17 = v597;
    v16 = a11;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v634.i64[0] = v597;
  v634.i64[1] = v597;
  v635 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
  v636 = v614;
  v639 = v617;
  v640 = v618;
  v641 = v619;
  v642 = v620;
  v637 = v615;
  v638 = v616;
  v643 = v621;
  v644 = v622;
  v645 = v623;
  v646 = v624;
  v647 = 0uLL;
  v625 = 0;
  v626 = 0;
  v648 = 0;
  if (v19 == v20 || *v20 != v597)
  {
    v596 = 0x84BDA12F684BDA13 * (v20 - v18);
    v109 = *(_QWORD *)(a11 + 1008);
    if ((unint64_t)v19 < v109)
    {
      if (v20 == v19)
      {
        *v19 = v597;
        v542 = &v18[v20 - v18];
        v542[1] = v597;
        *((_OWORD *)v542 + 1) = v635;
        v543 = *(_OWORD *)&v636.__r_.__value_.__l.__data_;
        v542[6] = v636.__r_.__value_.__r.__words[2];
        *((_OWORD *)v542 + 2) = v543;
        v545 = v640;
        v544 = v641;
        v546 = v642;
        *(_OWORD *)(v542 + 11) = v639;
        v542[17] = v546;
        *(_OWORD *)(v542 + 15) = v544;
        *(_OWORD *)(v542 + 13) = v545;
        v547 = v637;
        *(_OWORD *)(v542 + 9) = v638;
        *(_OWORD *)(v542 + 7) = v547;
        *((_OWORD *)v542 + 9) = v643;
        *((_OWORD *)v542 + 10) = v644;
        v548 = v645;
        *((_BYTE *)v542 + 184) = v646;
        v542[22] = v548;
        v542[24] = 0;
        v542[25] = 0;
        v647 = 0uLL;
        *((_BYTE *)v542 + 208) = 0;
        *(_QWORD *)(a11 + 1000) = v19 + 27;
      }
      else
      {
        *(_OWORD *)v607 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
        __p = v614;
        v593 = v638;
        v594 = v637;
        v591 = v640;
        v592 = v639;
        v590 = v641;
        v589 = v642;
        *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v621;
        v633 = v622;
        v632 = v624;
        v631 = v623;
        v110 = v19;
        v647 = 0uLL;
        v605 = v19 - 27;
        if ((unint64_t)v19 >= 0xD8)
        {
          v111 = v19 - 27;
          v110 = v19;
          do
          {
            *v110 = *v111;
            v110[1] = v111[1];
            *((_OWORD *)v110 + 1) = *((_OWORD *)v111 + 1);
            v112 = *((_OWORD *)v111 + 2);
            v110[6] = v111[6];
            *((_OWORD *)v110 + 2) = v112;
            v113 = *(_OWORD *)(v111 + 13);
            v114 = *(_OWORD *)(v111 + 15);
            v115 = v111[17];
            *(_OWORD *)(v110 + 11) = *(_OWORD *)(v111 + 11);
            v110[17] = v115;
            *(_OWORD *)(v110 + 15) = v114;
            *(_OWORD *)(v110 + 13) = v113;
            v116 = *(_OWORD *)(v111 + 7);
            *(_OWORD *)(v110 + 9) = *(_OWORD *)(v111 + 9);
            *(_OWORD *)(v110 + 7) = v116;
            *((_OWORD *)v110 + 9) = *((_OWORD *)v111 + 9);
            *((_OWORD *)v110 + 10) = *((_OWORD *)v111 + 10);
            v117 = v111[22];
            *((_BYTE *)v110 + 184) = *((_BYTE *)v111 + 184);
            v110[22] = v117;
            *((_OWORD *)v110 + 12) = *((_OWORD *)v111 + 12);
            v111[24] = 0;
            v111[25] = 0;
            *((_BYTE *)v110 + 208) = *((_BYTE *)v111 + 208);
            v110 += 27;
            v111 += 27;
          }
          while (v111 < v19);
        }
        *(_QWORD *)(a11 + 1000) = v110;
        if (v19 != v20 + 27)
        {
          v118 = v19 - 27;
          v119 = v19;
          do
          {
            v524 = *(v118 - 27);
            v118 -= 27;
            *(v119 - 27) = v524;
            v119 -= 27;
            v119[1] = v118[1];
            *((_OWORD *)v119 + 1) = *((_OWORD *)v118 + 1);
            v525 = *((_OWORD *)v118 + 2);
            v119[6] = v118[6];
            *((_OWORD *)v119 + 2) = v525;
            v119[7] = v118[7];
            v119[8] = v118[8];
            v119[9] = v118[9];
            v119[10] = v118[10];
            v119[11] = v118[11];
            v119[12] = v118[12];
            v119[13] = v118[13];
            v119[14] = v118[14];
            v119[15] = v118[15];
            v119[16] = v118[16];
            v119[17] = v118[17];
            *((_OWORD *)v119 + 9) = *((_OWORD *)v118 + 9);
            *((_OWORD *)v119 + 10) = *((_OWORD *)v118 + 10);
            v526 = v118[22];
            *((_BYTE *)v119 + 184) = *((_BYTE *)v118 + 184);
            v119[22] = v526;
            v527 = *((_OWORD *)v118 + 12);
            v118[24] = 0;
            v118[25] = 0;
            v528 = (std::__shared_weak_count *)v119[25];
            *((_OWORD *)v119 + 12) = v527;
            if (v528)
            {
              v529 = v528;
              p_shared_owners = (unint64_t *)&v528->__shared_owners_;
              do
                v531 = __ldaxr(p_shared_owners);
              while (__stlxr(v531 - 1, p_shared_owners));
              if (!v531)
              {
                v602 = v529;
                ((void (*)(std::__shared_weak_count *, __int128 *))v529->__on_zero_shared)(v529, a2);
                std::__shared_weak_count::__release_weak(v602);
              }
            }
            *((_BYTE *)v19 - 8) = *((_BYTE *)v605 - 8);
            v19 = v119;
            v605 = v118;
          }
          while (v118 != v20);
        }
        *(int64x2_t *)v20 = vdupq_n_s64(v597);
        v536 = &v18[v20 - v18];
        *((_OWORD *)v536 + 1) = *(_OWORD *)v607;
        *(std::string *)(v536 + 4) = __p;
        *(_OWORD *)(v536 + 7) = v594;
        *(_OWORD *)(v536 + 9) = v593;
        *(_OWORD *)(v536 + 11) = v592;
        *(_OWORD *)(v536 + 13) = v591;
        *(_OWORD *)(v536 + 15) = v590;
        v536[17] = v589;
        v537 = v633;
        *((_OWORD *)v536 + 9) = *(_OWORD *)&v606.__r_.__value_.__l.__data_;
        *((_OWORD *)v536 + 10) = v537;
        v538 = v631;
        *((_BYTE *)v536 + 184) = v632;
        v536[22] = v538;
        v539 = (std::__shared_weak_count *)v536[25];
        v536[24] = 0;
        v536[25] = 0;
        if (v539)
        {
          v540 = (unint64_t *)&v539->__shared_owners_;
          do
            v541 = __ldaxr(v540);
          while (__stlxr(v541 - 1, v540));
          if (!v541)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *))v539->__on_zero_shared)(v539, a2);
            std::__shared_weak_count::__release_weak(v539);
          }
        }
        LOBYTE(v18[v20 - v18 + 26]) = 0;
      }
LABEL_768:
      v582 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (*((_QWORD *)&v647 + 1))
      {
        v583 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
        do
          v584 = __ldaxr(v583);
        while (__stlxr(v584 - 1, v583));
        if (!v584)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v582->__on_zero_shared)(v582, a2);
          std::__shared_weak_count::__release_weak(v582);
        }
      }
      goto LABEL_773;
    }
    v532 = 0x84BDA12F684BDA13 * (v19 - v18) + 1;
    if (v532 > 0x12F684BDA12F684)
      sub_20E867F44();
    v533 = 0x84BDA12F684BDA13 * ((uint64_t)(v109 - (_QWORD)v18) >> 3);
    if (2 * v533 > v532)
      v532 = 2 * v533;
    if (v533 >= 0x97B425ED097B42)
      v534 = 0x12F684BDA12F684;
    else
      v534 = v532;
    v630 = a11 + 1008;
    if (v534)
    {
      if (v534 > 0x12F684BDA12F684)
        sub_20E877A38();
      v535 = (char *)operator new(216 * v534);
    }
    else
    {
      v535 = 0;
    }
    v549 = (std::string::size_type)&v535[8 * (v20 - v18)];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v535;
    __p.__r_.__value_.__l.__size_ = v549;
    __p.__r_.__value_.__r.__words[2] = v549;
    v629 = &v535[216 * v534];
    v588 = vdupq_n_s64(v597);
    if (v596 == v534)
    {
      if ((char *)v20 - (char *)v18 >= 1)
      {
        v550 = v596 + 2;
        if (v596 >= -1)
          v550 = v596 + 1;
        v551 = v550 >> 1;
        v552 = sub_20F5B6E44((uint64_t)&v535[216 * v596], (uint64_t)&v535[216 * v596], v549 - 216 * (v550 >> 1));
        v549 = __p.__r_.__value_.__l.__size_ - 216 * v551;
        __p.__r_.__value_.__l.__size_ = v549;
        v588 = v634;
        goto LABEL_750;
      }
      if (v18 == v20)
        v553 = 1;
      else
        v553 = 0x97B425ED097B426 * (v20 - v18);
      if (v553 > 0x12F684BDA12F684)
        sub_20E877A38();
      v554 = (char *)operator new(216 * v553);
      v549 = (std::string::size_type)&v554[216 * (v553 >> 2)];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v554;
      __p.__r_.__value_.__l.__size_ = v549;
      v629 = &v554[216 * v553];
      if (v535)
        operator delete(v535);
    }
    v552 = v549;
LABEL_750:
    v555 = v635;
    *(int64x2_t *)v552 = v588;
    *(_OWORD *)(v552 + 16) = v555;
    *(std::string *)(v552 + 32) = v636;
    v556 = v640;
    *(_OWORD *)(v552 + 88) = v639;
    *(_OWORD *)(v552 + 104) = v556;
    *(_OWORD *)(v552 + 120) = v641;
    v557 = v638;
    *(_OWORD *)(v552 + 56) = v637;
    *(_QWORD *)(v552 + 136) = v642;
    *(_OWORD *)(v552 + 72) = v557;
    *(_OWORD *)(v552 + 144) = v643;
    *(_OWORD *)(v552 + 160) = v644;
    v558 = v645;
    *(_BYTE *)(v552 + 184) = v646;
    *(_QWORD *)(v552 + 176) = v558;
    *(_OWORD *)(v552 + 192) = v647;
    v647 = 0uLL;
    *(_BYTE *)(v552 + 208) = v648;
    v559 = v552 + 216;
    __p.__r_.__value_.__r.__words[2] = v552 + 216;
    v560 = *(unint64_t **)(a11 + 992);
    if (v560 != v20)
    {
      v561 = 0;
      do
      {
        v562 = v549 + v561 * 8;
        v563 = (char *)&v20[v561];
        *(_QWORD *)(v562 - 216) = v20[v561 - 27];
        *(_QWORD *)(v562 - 208) = v20[v561 - 26];
        *(_OWORD *)(v562 - 200) = *(_OWORD *)&v20[v561 - 25];
        v564 = *(_OWORD *)&v20[v561 - 23];
        *(_QWORD *)(v562 - 168) = v20[v561 - 21];
        *(_OWORD *)(v562 - 184) = v564;
        v566 = *(_OWORD *)&v20[v561 - 14];
        v565 = *(_OWORD *)&v20[v561 - 12];
        v567 = *(_OWORD *)&v20[v561 - 16];
        *(_QWORD *)(v562 - 80) = v20[v561 - 10];
        *(_OWORD *)(v562 - 112) = v566;
        *(_OWORD *)(v562 - 96) = v565;
        *(_OWORD *)(v562 - 128) = v567;
        v568 = *(_OWORD *)&v20[v561 - 18];
        *(_OWORD *)(v562 - 160) = *(_OWORD *)&v20[v561 - 20];
        *(_OWORD *)(v562 - 144) = v568;
        *(_OWORD *)(v562 - 72) = *(_OWORD *)&v20[v561 - 9];
        *(_OWORD *)(v562 - 56) = *(_OWORD *)&v20[v561 - 7];
        v569 = v20[v561 - 5];
        *(_BYTE *)(v562 - 32) = v20[v561 - 4];
        *(_QWORD *)(v562 - 40) = v569;
        *(_OWORD *)(v562 - 24) = *(_OWORD *)&v20[v561 - 3];
        *((_QWORD *)v563 - 3) = 0;
        *((_QWORD *)v563 - 2) = 0;
        *(_BYTE *)(v562 - 8) = v20[v561 - 1];
        v561 -= 27;
      }
      while (&v20[v561] != v560);
      v549 += v561 * 8;
    }
    v570 = *(unint64_t **)(a11 + 1000);
    if (v570 != v20)
    {
      do
      {
        *(_QWORD *)v559 = *v20;
        *(_QWORD *)(v559 + 8) = v20[1];
        *(_OWORD *)(v559 + 16) = *((_OWORD *)v20 + 1);
        v571 = *((_OWORD *)v20 + 2);
        *(_QWORD *)(v559 + 48) = v20[6];
        *(_OWORD *)(v559 + 32) = v571;
        v572 = *(_OWORD *)(v20 + 13);
        v573 = *(_OWORD *)(v20 + 15);
        v574 = v20[17];
        *(_OWORD *)(v559 + 88) = *(_OWORD *)(v20 + 11);
        *(_QWORD *)(v559 + 136) = v574;
        *(_OWORD *)(v559 + 120) = v573;
        *(_OWORD *)(v559 + 104) = v572;
        v575 = *(_OWORD *)(v20 + 7);
        *(_OWORD *)(v559 + 72) = *(_OWORD *)(v20 + 9);
        *(_OWORD *)(v559 + 56) = v575;
        *(_OWORD *)(v559 + 144) = *((_OWORD *)v20 + 9);
        *(_OWORD *)(v559 + 160) = *((_OWORD *)v20 + 10);
        v576 = v20[22];
        *(_BYTE *)(v559 + 184) = *((_BYTE *)v20 + 184);
        *(_QWORD *)(v559 + 176) = v576;
        *(_OWORD *)(v559 + 192) = *((_OWORD *)v20 + 12);
        v20[24] = 0;
        v20[25] = 0;
        *(_BYTE *)(v559 + 208) = *((_BYTE *)v20 + 208);
        v559 += 216;
        v20 += 27;
      }
      while (v20 != v570);
      v20 = *(unint64_t **)(a11 + 1000);
    }
    v577 = *(_QWORD *)(a11 + 992);
    *(_QWORD *)(a11 + 992) = v549;
    *(_QWORD *)(a11 + 1000) = v559;
    v578 = *(char **)(a11 + 1008);
    *(_QWORD *)(a11 + 1008) = v629;
    v629 = v578;
    __p.__r_.__value_.__r.__words[0] = v577;
    __p.__r_.__value_.__l.__size_ = v577;
    if (v20 != (unint64_t *)v577)
    {
      do
      {
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 - 27);
        v579 = (std::__shared_weak_count *)*(v20 - 2);
        if (v579)
        {
          v580 = (unint64_t *)&v579->__shared_owners_;
          do
            v581 = __ldaxr(v580);
          while (__stlxr(v581 - 1, v580));
          if (!v581)
          {
            ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
            std::__shared_weak_count::__release_weak(v579);
          }
        }
        v20 = (unint64_t *)__p.__r_.__value_.__r.__words[2];
      }
      while (__p.__r_.__value_.__r.__words[2] != v577);
      v20 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
    }
    if (v20)
      operator delete(v20);
    goto LABEL_768;
  }
LABEL_773:
  *(_BYTE *)(a11 + 1098) = 0;
  *(_BYTE *)(a11 + 1096) = 0;
  *(int64x2_t *)(a11 + 1080) = vaddq_s64(*(int64x2_t *)(a11 + 1080), (int64x2_t)xmmword_210378060);
  v585 = v626;
  if (v626)
  {
    v586 = (unint64_t *)&v626->__shared_owners_;
    do
      v587 = __ldaxr(v586);
    while (__stlxr(v587 - 1, v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v585->__on_zero_shared)(v585, a2);
      std::__shared_weak_count::__release_weak(v585);
    }
  }
  v120 = 0;
  v17 = v597;
  v16 = a11;
  v121 = v612;
  if (v612)
  {
LABEL_154:
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v121->__on_zero_shared)(v121, a2);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
LABEL_158:
  if ((v120 & 1) != 0)
    goto LABEL_159;
  v124 = 0;
  *(_BYTE *)(v16 + 1876) = 0;
  *(_DWORD *)(v16 + 1872) = 0;
  v125 = v610;
  if (!v610)
    goto LABEL_165;
LABEL_162:
  v126 = (unint64_t *)&v125->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    if (!v124)
      return;
    goto LABEL_166;
  }
LABEL_165:
  if (!v124)
    return;
LABEL_166:
  v128 = *(char **)(v16 + 800);
  v129 = *(char **)(v16 + 808);
  if (v129 != v128)
  {
    v130 = (v129 - v128) >> 4;
    do
    {
      v131 = v130 >> 1;
      v132 = &v128[16 * (v130 >> 1)];
      v134 = *(_DWORD *)v132;
      v133 = v132 + 16;
      v130 += ~(v130 >> 1);
      if (v134 < a5)
        v128 = v133;
      else
        v130 = v131;
    }
    while (v130);
  }
  if ((v128 == v129 || *(_DWORD *)v128 != a5)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 268, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_712;
  }
  v135 = *(_QWORD **)(v16 + 992);
  v136 = *(_QWORD **)(v16 + 1000);
  if (v136 != v135)
  {
    v137 = 0x84BDA12F684BDA13 * (v136 - v135);
    do
    {
      v138 = v137 >> 1;
      v139 = &v135[27 * (v137 >> 1)];
      v141 = *v139;
      v140 = v139 + 27;
      v137 += ~(v137 >> 1);
      if (v141 < v17)
        v135 = v140;
      else
        v137 = v138;
    }
    while (v137);
    if (v136 != v135
      && *v135 == v17
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 273, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_712;
    }
  }
  sub_20E863438((uint64_t)&v634);
  v142 = *(char **)(v16 + 800);
  v143 = *(char **)(v16 + 808);
  if (v143 != v142)
  {
    v144 = (v143 - v142) >> 4;
    do
    {
      v145 = v144 >> 1;
      v146 = &v142[16 * (v144 >> 1)];
      v148 = *(_DWORD *)v146;
      v147 = v146 + 16;
      v144 += ~(v144 >> 1);
      if (v148 < a5)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
  if (v142 == v143 || *(_DWORD *)v142 != a5)
  {
    v154 = 1;
    v155 = *(char **)(v16 + 416);
    v156 = *(char **)(v16 + 424);
    v157 = v155;
    v158 = v156 - v155;
    if (v156 == v155)
      goto LABEL_208;
    goto LABEL_203;
  }
  v149 = sub_20E86A980(&v635, (uint64_t)"error: landmark variable ", 25);
  sub_20F71A0DC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v152 = sub_20E86A980(v149, (uint64_t)p_p, size);
  sub_20E86A980(v152, (uint64_t)" with ID ", 9);
  v153 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v153, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v154 = 0;
  v155 = *(char **)(v16 + 416);
  v156 = *(char **)(v16 + 424);
  v157 = v155;
  v158 = v156 - v155;
  if (v156 != v155)
  {
LABEL_203:
    v159 = v158 >> 4;
    v157 = v155;
    do
    {
      v160 = v159 >> 1;
      v161 = (unsigned int *)&v157[16 * (v159 >> 1)];
      v163 = *v161;
      v162 = (char *)(v161 + 4);
      v159 += ~(v159 >> 1);
      if (v163 < v14)
        v157 = v162;
      else
        v159 = v160;
    }
    while (v159);
  }
LABEL_208:
  if (v157 != v156 && *(_DWORD *)v157 == v14)
  {
    if (v156 != v155)
    {
      v164 = (v156 - v155) >> 4;
      do
      {
        v165 = v164 >> 1;
        v166 = (unsigned int *)&v155[16 * (v164 >> 1)];
        v168 = *v166;
        v167 = (char *)(v166 + 4);
        v164 += ~(v164 >> 1);
        if (v168 < v14)
          v155 = v167;
        else
          v164 = v165;
      }
      while (v164);
    }
    v598 = v154;
    if (v155 == v156 || *(_DWORD *)v155 != v14)
      v155 = v156;
    v169 = *((_QWORD *)v155 + 1);
    v170 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &__p;
    else
      v171 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v172 = __p.__r_.__value_.__l.__size_;
    v173 = sub_20E86A980(v170, (uint64_t)v171, v172);
    sub_20E86A980(v173, (uint64_t)" with ID ", 9);
    v174 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v174, (uint64_t)" found (", 8);
    v175 = (_QWORD *)std::ostream::operator<<();
    v176 = sub_20E86A980(v175, (uint64_t)", ", 2);
    if (*(_BYTE *)(v169 + 20))
      v177 = "free";
    else
      v177 = "fixed";
    if (*(_BYTE *)(v169 + 20))
      v178 = 4;
    else
      v178 = 5;
    v179 = sub_20E86A980(v176, (uint64_t)v177, v178);
    sub_20E86A980(v179, (uint64_t)")\n", 2);
    v180 = v598;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 = *(unsigned __int8 *)(v169 + 20);
    v181 = *(char **)(v16 + 416);
    v182 = *(char **)(v16 + 424);
    v183 = v181;
    v184 = v182 - v181;
    if (v182 == v181)
      goto LABEL_249;
LABEL_244:
    v190 = v184 >> 4;
    v183 = v181;
    do
    {
      v191 = v190 >> 1;
      v192 = (unsigned int *)&v183[16 * (v190 >> 1)];
      v194 = *v192;
      v193 = (char *)(v192 + 4);
      v190 += ~(v190 >> 1);
      if (v194 < a4)
        v183 = v193;
      else
        v190 = v191;
    }
    while (v190);
    goto LABEL_249;
  }
  v185 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v186 = &__p;
  else
    v186 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v187 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v187 = __p.__r_.__value_.__l.__size_;
  v188 = sub_20E86A980(v185, (uint64_t)v186, v187);
  sub_20E86A980(v188, (uint64_t)" with ID ", 9);
  v189 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v189, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v601 = 0;
  v181 = *(char **)(v16 + 416);
  v182 = *(char **)(v16 + 424);
  v183 = v181;
  v184 = v182 - v181;
  if (v182 != v181)
    goto LABEL_244;
LABEL_249:
  if (v183 != v182 && *(_DWORD *)v183 == a4)
  {
    if (v182 != v181)
    {
      v195 = (v182 - v181) >> 4;
      do
      {
        v196 = v195 >> 1;
        v197 = (unsigned int *)&v181[16 * (v195 >> 1)];
        v199 = *v197;
        v198 = (char *)(v197 + 4);
        v195 += ~(v195 >> 1);
        if (v199 < a4)
          v181 = v198;
        else
          v195 = v196;
      }
      while (v195);
    }
    if (v181 == v182 || *(_DWORD *)v181 != a4)
      v181 = v182;
    v200 = *((_QWORD *)v181 + 1);
    v201 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v202 = &__p;
    else
      v202 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v203 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v203 = __p.__r_.__value_.__l.__size_;
    v204 = sub_20E86A980(v201, (uint64_t)v202, v203);
    sub_20E86A980(v204, (uint64_t)" with ID ", 9);
    v205 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v205, (uint64_t)" found (", 8);
    v206 = (_QWORD *)std::ostream::operator<<();
    v207 = sub_20E86A980(v206, (uint64_t)", ", 2);
    if (*(_BYTE *)(v200 + 20))
      v208 = "free";
    else
      v208 = "fixed";
    if (*(_BYTE *)(v200 + 20))
      v209 = 4;
    else
      v209 = 5;
    v210 = sub_20E86A980(v207, (uint64_t)v208, v209);
    sub_20E86A980(v210, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v200 + 20);
    v211 = *(char **)(v16 + 128);
    v212 = *(char **)(v16 + 136);
    v213 = v211;
    v214 = v212 - v211;
    if (v212 == v211)
      goto LABEL_290;
LABEL_285:
    v220 = v214 >> 4;
    v213 = v211;
    do
    {
      v221 = v220 >> 1;
      v222 = (unsigned int *)&v213[16 * (v220 >> 1)];
      v224 = *v222;
      v223 = (char *)(v222 + 4);
      v220 += ~(v220 >> 1);
      if (v224 < a1)
        v213 = v223;
      else
        v220 = v221;
    }
    while (v220);
    goto LABEL_290;
  }
  v215 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v216 = &__p;
  else
    v216 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v217 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v217 = __p.__r_.__value_.__l.__size_;
  v218 = sub_20E86A980(v215, (uint64_t)v216, v217);
  sub_20E86A980(v218, (uint64_t)" with ID ", 9);
  v219 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v219, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v211 = *(char **)(v16 + 128);
  v212 = *(char **)(v16 + 136);
  v213 = v211;
  v214 = v212 - v211;
  if (v212 != v211)
    goto LABEL_285;
LABEL_290:
  if (v213 != v212 && *(_DWORD *)v213 == a1)
  {
    if (v212 != v211)
    {
      v225 = (v212 - v211) >> 4;
      do
      {
        v226 = v225 >> 1;
        v227 = (unsigned int *)&v211[16 * (v225 >> 1)];
        v229 = *v227;
        v228 = (char *)(v227 + 4);
        v225 += ~(v225 >> 1);
        if (v229 < a1)
          v211 = v228;
        else
          v225 = v226;
      }
      while (v225);
    }
    if (v211 == v212 || *(_DWORD *)v211 != a1)
      v211 = v212;
    v230 = *((_QWORD *)v211 + 1);
    v231 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v232 = &__p;
    else
      v232 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v233 = __p.__r_.__value_.__l.__size_;
    v234 = sub_20E86A980(v231, (uint64_t)v232, v233);
    sub_20E86A980(v234, (uint64_t)" with ID ", 9);
    v235 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v235, (uint64_t)" found (", 8);
    v236 = (_QWORD *)std::ostream::operator<<();
    v237 = sub_20E86A980(v236, (uint64_t)", ", 2);
    if (*(_BYTE *)(v230 + 20))
      v238 = "free";
    else
      v238 = "fixed";
    if (*(_BYTE *)(v230 + 20))
      v239 = 4;
    else
      v239 = 5;
    v240 = sub_20E86A980(v237, (uint64_t)v238, v239);
    sub_20E86A980(v240, (uint64_t)")\n", 2);
    v241 = v180;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v230 + 20);
    v242 = *(char **)(v16 + 128);
    v243 = *(char **)(v16 + 136);
    v244 = v242;
    v245 = v243 - v242;
    if (v243 == v242)
      goto LABEL_331;
LABEL_326:
    v251 = v245 >> 4;
    v244 = v242;
    do
    {
      v252 = v251 >> 1;
      v253 = (unsigned int *)&v244[16 * (v251 >> 1)];
      v255 = *v253;
      v254 = (char *)(v253 + 4);
      v251 += ~(v251 >> 1);
      if (v255 < a3)
        v244 = v254;
      else
        v251 = v252;
    }
    while (v251);
    goto LABEL_331;
  }
  v246 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v247 = &__p;
  else
    v247 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v248 = __p.__r_.__value_.__l.__size_;
  v249 = sub_20E86A980(v246, (uint64_t)v247, v248);
  sub_20E86A980(v249, (uint64_t)" with ID ", 9);
  v250 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v250, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v241 = 0;
  v242 = *(char **)(v16 + 128);
  v243 = *(char **)(v16 + 136);
  v244 = v242;
  v245 = v243 - v242;
  if (v243 != v242)
    goto LABEL_326;
LABEL_331:
  if (v244 != v243 && *(_DWORD *)v244 == a3)
  {
    if (v243 != v242)
    {
      v256 = (v243 - v242) >> 4;
      do
      {
        v257 = v256 >> 1;
        v258 = (unsigned int *)&v242[16 * (v256 >> 1)];
        v260 = *v258;
        v259 = (char *)(v258 + 4);
        v256 += ~(v256 >> 1);
        if (v260 < a3)
          v242 = v259;
        else
          v256 = v257;
      }
      while (v256);
    }
    if (v242 == v243 || *(_DWORD *)v242 != a3)
      v242 = v243;
    v261 = *((_QWORD *)v242 + 1);
    v262 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v263 = &__p;
    else
      v263 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v264 = __p.__r_.__value_.__l.__size_;
    v265 = sub_20E86A980(v262, (uint64_t)v263, v264);
    sub_20E86A980(v265, (uint64_t)" with ID ", 9);
    v266 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v266, (uint64_t)" found (", 8);
    v267 = (_QWORD *)std::ostream::operator<<();
    v268 = sub_20E86A980(v267, (uint64_t)", ", 2);
    if (*(_BYTE *)(v261 + 20))
      v269 = "free";
    else
      v269 = "fixed";
    if (*(_BYTE *)(v261 + 20))
      v270 = 4;
    else
      v270 = 5;
    v271 = sub_20E86A980(v268, (uint64_t)v269, v270);
    sub_20E86A980(v271, (uint64_t)")\n", 2);
    v272 = v241;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v261 + 20);
    v273 = *(char **)(v16 + 512);
    v274 = *(char **)(v16 + 520);
    v275 = v273;
    v276 = v274 - v273;
    if (v274 == v273)
      goto LABEL_372;
LABEL_367:
    v282 = v276 >> 4;
    v275 = v273;
    do
    {
      v283 = v282 >> 1;
      v284 = (unsigned int *)&v275[16 * (v282 >> 1)];
      v286 = *v284;
      v285 = (char *)(v284 + 4);
      v282 += ~(v282 >> 1);
      if (v286 < v14)
        v275 = v285;
      else
        v282 = v283;
    }
    while (v282);
    goto LABEL_372;
  }
  v277 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v278 = &__p;
  else
    v278 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v279 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v279 = __p.__r_.__value_.__l.__size_;
  v280 = sub_20E86A980(v277, (uint64_t)v278, v279);
  sub_20E86A980(v280, (uint64_t)" with ID ", 9);
  v281 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v281, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v273 = *(char **)(v16 + 512);
  v274 = *(char **)(v16 + 520);
  v275 = v273;
  v276 = v274 - v273;
  if (v274 != v273)
    goto LABEL_367;
LABEL_372:
  if (v275 != v274 && *(_DWORD *)v275 == v14)
  {
    if (v274 != v273)
    {
      v287 = (v274 - v273) >> 4;
      do
      {
        v288 = v287 >> 1;
        v289 = (unsigned int *)&v273[16 * (v287 >> 1)];
        v291 = *v289;
        v290 = (char *)(v289 + 4);
        v287 += ~(v287 >> 1);
        if (v291 < v14)
          v273 = v290;
        else
          v287 = v288;
      }
      while (v287);
    }
    if (v273 == v274 || *(_DWORD *)v273 != v14)
      v273 = v274;
    v292 = *((_QWORD *)v273 + 1);
    v293 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A520((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v294 = &__p;
    else
      v294 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v295 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v295 = __p.__r_.__value_.__l.__size_;
    v296 = sub_20E86A980(v293, (uint64_t)v294, v295);
    sub_20E86A980(v296, (uint64_t)" with ID ", 9);
    v297 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v297, (uint64_t)" found (", 8);
    v298 = (_QWORD *)std::ostream::operator<<();
    v299 = sub_20E86A980(v298, (uint64_t)", ", 2);
    if (*(_BYTE *)(v292 + 20))
      v300 = "free";
    else
      v300 = "fixed";
    if (*(_BYTE *)(v292 + 20))
      v301 = 4;
    else
      v301 = 5;
    v302 = sub_20E86A980(v299, (uint64_t)v300, v301);
    sub_20E86A980(v302, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v292 + 20);
    v303 = *(char **)(v16 + 512);
    v304 = *(char **)(v16 + 520);
    v305 = v303;
    v306 = v304 - v303;
    if (v304 == v303)
      goto LABEL_413;
LABEL_408:
    v312 = v306 >> 4;
    v305 = v303;
    do
    {
      v313 = v312 >> 1;
      v314 = (unsigned int *)&v305[16 * (v312 >> 1)];
      v316 = *v314;
      v315 = (char *)(v314 + 4);
      v312 += ~(v312 >> 1);
      if (v316 < a4)
        v305 = v315;
      else
        v312 = v313;
    }
    while (v312);
    goto LABEL_413;
  }
  v307 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A520((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v308 = &__p;
  else
    v308 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v309 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v309 = __p.__r_.__value_.__l.__size_;
  v310 = sub_20E86A980(v307, (uint64_t)v308, v309);
  sub_20E86A980(v310, (uint64_t)" with ID ", 9);
  v311 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v311, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v303 = *(char **)(v16 + 512);
  v304 = *(char **)(v16 + 520);
  v305 = v303;
  v306 = v304 - v303;
  if (v304 != v303)
    goto LABEL_408;
LABEL_413:
  if (v305 != v304 && *(_DWORD *)v305 == a4)
  {
    if (v304 != v303)
    {
      v317 = (v304 - v303) >> 4;
      do
      {
        v318 = v317 >> 1;
        v319 = (unsigned int *)&v303[16 * (v317 >> 1)];
        v321 = *v319;
        v320 = (char *)(v319 + 4);
        v317 += ~(v317 >> 1);
        if (v321 < a4)
          v303 = v320;
        else
          v317 = v318;
      }
      while (v317);
    }
    if (v303 == v304 || *(_DWORD *)v303 != a4)
      v303 = v304;
    v322 = *((_QWORD *)v303 + 1);
    v323 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A520((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v324 = &__p;
    else
      v324 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v325 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v325 = __p.__r_.__value_.__l.__size_;
    v326 = sub_20E86A980(v323, (uint64_t)v324, v325);
    sub_20E86A980(v326, (uint64_t)" with ID ", 9);
    v327 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v327, (uint64_t)" found (", 8);
    v328 = (_QWORD *)std::ostream::operator<<();
    v329 = sub_20E86A980(v328, (uint64_t)", ", 2);
    if (*(_BYTE *)(v322 + 20))
      v330 = "free";
    else
      v330 = "fixed";
    if (*(_BYTE *)(v322 + 20))
      v331 = 4;
    else
      v331 = 5;
    v332 = sub_20E86A980(v329, (uint64_t)v330, v331);
    sub_20E86A980(v332, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v322 + 20);
    v333 = *(char **)(v16 + 608);
    v334 = *(char **)(v16 + 616);
    v335 = v333;
    v336 = v334 - v333;
    if (v334 == v333)
      goto LABEL_454;
LABEL_449:
    v342 = v336 >> 4;
    v335 = v333;
    do
    {
      v343 = v342 >> 1;
      v344 = (unsigned int *)&v335[16 * (v342 >> 1)];
      v346 = *v344;
      v345 = (char *)(v344 + 4);
      v342 += ~(v342 >> 1);
      if (v346 < v14)
        v335 = v345;
      else
        v342 = v343;
    }
    while (v342);
    goto LABEL_454;
  }
  v337 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A520((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v338 = &__p;
  else
    v338 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v339 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v339 = __p.__r_.__value_.__l.__size_;
  v340 = sub_20E86A980(v337, (uint64_t)v338, v339);
  sub_20E86A980(v340, (uint64_t)" with ID ", 9);
  v341 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v341, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v333 = *(char **)(v16 + 608);
  v334 = *(char **)(v16 + 616);
  v335 = v333;
  v336 = v334 - v333;
  if (v334 != v333)
    goto LABEL_449;
LABEL_454:
  if (v335 != v334 && *(_DWORD *)v335 == v14)
  {
    if (v334 != v333)
    {
      v347 = (v334 - v333) >> 4;
      do
      {
        v348 = v347 >> 1;
        v349 = (unsigned int *)&v333[16 * (v347 >> 1)];
        v351 = *v349;
        v350 = (char *)(v349 + 4);
        v347 += ~(v347 >> 1);
        if (v351 < v14)
          v333 = v350;
        else
          v347 = v348;
      }
      while (v347);
    }
    if (v333 == v334 || *(_DWORD *)v333 != v14)
      v333 = v334;
    v352 = *((_QWORD *)v333 + 1);
    v353 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A740((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v354 = &__p;
    else
      v354 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v355 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v355 = __p.__r_.__value_.__l.__size_;
    v356 = sub_20E86A980(v353, (uint64_t)v354, v355);
    sub_20E86A980(v356, (uint64_t)" with ID ", 9);
    v357 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v357, (uint64_t)" found (", 8);
    v358 = (_QWORD *)std::ostream::operator<<();
    v359 = sub_20E86A980(v358, (uint64_t)", ", 2);
    if (*(_BYTE *)(v352 + 20))
      v360 = "free";
    else
      v360 = "fixed";
    if (*(_BYTE *)(v352 + 20))
      v361 = 4;
    else
      v361 = 5;
    v362 = sub_20E86A980(v359, (uint64_t)v360, v361);
    sub_20E86A980(v362, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v352 + 20);
    v363 = *(char **)(v16 + 608);
    v364 = *(char **)(v16 + 616);
    v365 = v363;
    v366 = v364 - v363;
    if (v364 == v363)
      goto LABEL_495;
LABEL_490:
    v372 = v366 >> 4;
    v365 = v363;
    do
    {
      v373 = v372 >> 1;
      v374 = (unsigned int *)&v365[16 * (v372 >> 1)];
      v376 = *v374;
      v375 = (char *)(v374 + 4);
      v372 += ~(v372 >> 1);
      if (v376 < a4)
        v365 = v375;
      else
        v372 = v373;
    }
    while (v372);
    goto LABEL_495;
  }
  v367 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A740((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v368 = &__p;
  else
    v368 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v369 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v369 = __p.__r_.__value_.__l.__size_;
  v370 = sub_20E86A980(v367, (uint64_t)v368, v369);
  sub_20E86A980(v370, (uint64_t)" with ID ", 9);
  v371 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v371, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v363 = *(char **)(v16 + 608);
  v364 = *(char **)(v16 + 616);
  v365 = v363;
  v366 = v364 - v363;
  if (v364 != v363)
    goto LABEL_490;
LABEL_495:
  if (v365 != v364 && *(_DWORD *)v365 == a4)
  {
    if (v364 != v363)
    {
      v377 = (v364 - v363) >> 4;
      do
      {
        v378 = v377 >> 1;
        v379 = (unsigned int *)&v363[16 * (v377 >> 1)];
        v381 = *v379;
        v380 = (char *)(v379 + 4);
        v377 += ~(v377 >> 1);
        if (v381 < a4)
          v363 = v380;
        else
          v377 = v378;
      }
      while (v377);
    }
    if (v363 == v364 || *(_DWORD *)v363 != a4)
      v363 = v364;
    v382 = *((_QWORD *)v363 + 1);
    v383 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A740((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v384 = &__p;
    else
      v384 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v385 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v385 = __p.__r_.__value_.__l.__size_;
    v386 = sub_20E86A980(v383, (uint64_t)v384, v385);
    sub_20E86A980(v386, (uint64_t)" with ID ", 9);
    v387 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v387, (uint64_t)" found (", 8);
    v388 = (_QWORD *)std::ostream::operator<<();
    v389 = sub_20E86A980(v388, (uint64_t)", ", 2);
    if (*(_BYTE *)(v382 + 20))
      v390 = "free";
    else
      v390 = "fixed";
    if (*(_BYTE *)(v382 + 20))
      v391 = 4;
    else
      v391 = 5;
    v392 = sub_20E86A980(v389, (uint64_t)v390, v391);
    sub_20E86A980(v392, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v382 + 20);
    v393 = *(char **)(v16 + 704);
    v394 = *(char **)(v16 + 712);
    v395 = v393;
    v396 = v394 - v393;
    if (v394 == v393)
      goto LABEL_536;
LABEL_531:
    v402 = v396 >> 4;
    v395 = v393;
    do
    {
      v403 = v402 >> 1;
      v404 = (unsigned int *)&v395[16 * (v402 >> 1)];
      v406 = *v404;
      v405 = (char *)(v404 + 4);
      v402 += ~(v402 >> 1);
      if (v406 < v14)
        v395 = v405;
      else
        v402 = v403;
    }
    while (v402);
    goto LABEL_536;
  }
  v397 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A740((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v398 = &__p;
  else
    v398 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v399 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v399 = __p.__r_.__value_.__l.__size_;
  v400 = sub_20E86A980(v397, (uint64_t)v398, v399);
  sub_20E86A980(v400, (uint64_t)" with ID ", 9);
  v401 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v401, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v393 = *(char **)(v16 + 704);
  v394 = *(char **)(v16 + 712);
  v395 = v393;
  v396 = v394 - v393;
  if (v394 != v393)
    goto LABEL_531;
LABEL_536:
  if (v395 != v394 && *(_DWORD *)v395 == v14)
  {
    if (v394 != v393)
    {
      v407 = (v394 - v393) >> 4;
      do
      {
        v408 = v407 >> 1;
        v409 = (unsigned int *)&v393[16 * (v407 >> 1)];
        v411 = *v409;
        v410 = (char *)(v409 + 4);
        v407 += ~(v407 >> 1);
        if (v411 < v14)
          v393 = v410;
        else
          v407 = v408;
      }
      while (v407);
    }
    if (v393 == v394 || *(_DWORD *)v393 != v14)
      v393 = v394;
    v412 = *((_QWORD *)v393 + 1);
    v413 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A960((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v414 = &__p;
    else
      v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v415 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v415 = __p.__r_.__value_.__l.__size_;
    v416 = sub_20E86A980(v413, (uint64_t)v414, v415);
    sub_20E86A980(v416, (uint64_t)" with ID ", 9);
    v417 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v417, (uint64_t)" found (", 8);
    v418 = (_QWORD *)std::ostream::operator<<();
    v419 = sub_20E86A980(v418, (uint64_t)", ", 2);
    if (*(_BYTE *)(v412 + 20))
      v420 = "free";
    else
      v420 = "fixed";
    if (*(_BYTE *)(v412 + 20))
      v421 = 4;
    else
      v421 = 5;
    v422 = sub_20E86A980(v419, (uint64_t)v420, v421);
    sub_20E86A980(v422, (uint64_t)")\n", 2);
    v423 = v272;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v412 + 20);
    v424 = *(char **)(v16 + 704);
    v425 = *(char **)(v16 + 712);
    v426 = v424;
    v427 = v425 - v424;
    if (v425 == v424)
      goto LABEL_577;
LABEL_572:
    v433 = v427 >> 4;
    v426 = v424;
    do
    {
      v434 = v433 >> 1;
      v435 = (unsigned int *)&v426[16 * (v433 >> 1)];
      v437 = *v435;
      v436 = (char *)(v435 + 4);
      v433 += ~(v433 >> 1);
      if (v437 < a4)
        v426 = v436;
      else
        v433 = v434;
    }
    while (v433);
    goto LABEL_577;
  }
  v428 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A960((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v429 = &__p;
  else
    v429 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v430 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v430 = __p.__r_.__value_.__l.__size_;
  v431 = sub_20E86A980(v428, (uint64_t)v429, v430);
  sub_20E86A980(v431, (uint64_t)" with ID ", 9);
  v432 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v432, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v424 = *(char **)(v16 + 704);
  v425 = *(char **)(v16 + 712);
  v426 = v424;
  v427 = v425 - v424;
  if (v425 != v424)
    goto LABEL_572;
LABEL_577:
  if (v426 != v425 && *(_DWORD *)v426 == a4)
  {
    if (v425 != v424)
    {
      v438 = (v425 - v424) >> 4;
      do
      {
        v439 = v438 >> 1;
        v440 = (unsigned int *)&v424[16 * (v438 >> 1)];
        v442 = *v440;
        v441 = (char *)(v440 + 4);
        v438 += ~(v438 >> 1);
        if (v442 < a4)
          v424 = v441;
        else
          v438 = v439;
      }
      while (v438);
    }
    if (v424 == v425 || *(_DWORD *)v424 != a4)
      v424 = v425;
    v443 = *((_QWORD *)v424 + 1);
    v444 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A960((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v445 = &__p;
    else
      v445 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v446 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v446 = __p.__r_.__value_.__l.__size_;
    v447 = sub_20E86A980(v444, (uint64_t)v445, v446);
    sub_20E86A980(v447, (uint64_t)" with ID ", 9);
    v448 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v448, (uint64_t)" found (", 8);
    v449 = (_QWORD *)std::ostream::operator<<();
    v450 = sub_20E86A980(v449, (uint64_t)", ", 2);
    if (*(_BYTE *)(v443 + 20))
      v451 = "free";
    else
      v451 = "fixed";
    if (*(_BYTE *)(v443 + 20))
      v452 = 4;
    else
      v452 = 5;
    v453 = sub_20E86A980(v450, (uint64_t)v451, v452);
    sub_20E86A980(v453, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v443 + 20);
    v454 = *(char **)(v16 + 800);
    v455 = *(char **)(v16 + 808);
    v456 = v454;
    v457 = v455 - v454;
    if (v455 == v454)
      goto LABEL_618;
LABEL_613:
    v463 = v457 >> 4;
    v456 = v454;
    do
    {
      v464 = v463 >> 1;
      v465 = (unsigned int *)&v456[16 * (v463 >> 1)];
      v467 = *v465;
      v466 = (char *)(v465 + 4);
      v463 += ~(v463 >> 1);
      if (v467 < a5)
        v456 = v466;
      else
        v463 = v464;
    }
    while (v463);
    goto LABEL_618;
  }
  v458 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A960((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v459 = &__p;
  else
    v459 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v460 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v460 = __p.__r_.__value_.__l.__size_;
  v461 = sub_20E86A980(v458, (uint64_t)v459, v460);
  sub_20E86A980(v461, (uint64_t)" with ID ", 9);
  v462 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v462, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v454 = *(char **)(v16 + 800);
  v455 = *(char **)(v16 + 808);
  v456 = v454;
  v457 = v455 - v454;
  if (v455 != v454)
    goto LABEL_613;
LABEL_618:
  if (v456 == v455 || *(_DWORD *)v456 != a5)
  {
    v488 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
    sub_20F71A0DC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v489 = &__p;
    else
      v489 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v490 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v490 = __p.__r_.__value_.__l.__size_;
    v491 = sub_20E86A980(v488, (uint64_t)v489, v490);
    sub_20E86A980(v491, (uint64_t)" with ID ", 9);
    v492 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v492, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    else
    {
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    goto LABEL_657;
  }
  if (v455 != v454)
  {
    v468 = (v455 - v454) >> 4;
    do
    {
      v469 = v468 >> 1;
      v470 = (unsigned int *)&v454[16 * (v468 >> 1)];
      v472 = *v470;
      v471 = (char *)(v470 + 4);
      v468 += ~(v468 >> 1);
      if (v472 < a5)
        v454 = v471;
      else
        v468 = v469;
    }
    while (v468);
  }
  v473 = v423;
  if (v454 == v455 || *(_DWORD *)v454 != a5)
    v454 = v455;
  v474 = *((_QWORD *)v454 + 1);
  v475 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
  sub_20F71A0DC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v476 = &__p;
  else
    v476 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v477 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v477 = __p.__r_.__value_.__l.__size_;
  v478 = sub_20E86A980(v475, (uint64_t)v476, v477);
  sub_20E86A980(v478, (uint64_t)" with ID ", 9);
  v479 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v479, (uint64_t)" found (", 8);
  v480 = (_QWORD *)std::ostream::operator<<();
  v481 = sub_20E86A980(v480, (uint64_t)", ", 2);
  if (*(_BYTE *)(v474 + 20))
    v482 = "free";
  else
    v482 = "fixed";
  if (*(_BYTE *)(v474 + 20))
    v483 = 4;
  else
    v483 = 5;
  v484 = sub_20E86A980(v481, (uint64_t)v482, v483);
  sub_20E86A980(v484, (uint64_t)")\n", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v601 |= *(unsigned __int8 *)(v474 + 20);
  v485 = *(char **)(v16 + 992);
  v486 = *(char **)(v16 + 1000);
  v487 = v486 - v485;
  if (v486 != v485)
  {
LABEL_657:
    v493 = 0x84BDA12F684BDA13 * (v487 >> 3);
    do
    {
      v494 = v493 >> 1;
      v495 = (unint64_t *)&v485[216 * (v493 >> 1)];
      v497 = *v495;
      v496 = (char *)(v495 + 27);
      v493 += ~(v493 >> 1);
      if (v497 < v17)
        v485 = v496;
      else
        v493 = v494;
    }
    while (v493);
    if (v486 != v485 && *(_QWORD *)v485 == v17)
    {
      v498 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
      sub_20F71A300((uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v499 = &__p;
      else
        v499 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v500 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v500 = __p.__r_.__value_.__l.__size_;
      v501 = sub_20E86A980(v498, (uint64_t)v499, v500);
      sub_20E86A980(v501, (uint64_t)" with the same ID ", 18);
      v502 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v502, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
    }
  }
LABEL_673:
  if (v601)
  {
    v503 = v473 != 0;
    v504 = v641;
    if ((v641 & 0x10) == 0)
      goto LABEL_675;
LABEL_686:
    v512 = *((_QWORD *)&v640 + 1);
    if (*((_QWORD *)&v640 + 1) < (unint64_t)v638)
    {
      *((_QWORD *)&v640 + 1) = v638;
      v512 = v638;
    }
    v513 = (const void *)*((_QWORD *)&v637 + 1);
    v505 = v512 - *((_QWORD *)&v637 + 1);
    if ((unint64_t)(v512 - *((_QWORD *)&v637 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_714;
    goto LABEL_689;
  }
  v507 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
  sub_20F71A300((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v508 = &__p;
  else
    v508 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v509 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v509 = __p.__r_.__value_.__l.__size_;
  v510 = sub_20E86A980(v507, (uint64_t)v508, v509);
  sub_20E86A980(v510, (uint64_t)" with ID ", 9);
  v511 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v511, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v503 = 0;
  v504 = v641;
  if ((v641 & 0x10) != 0)
    goto LABEL_686;
LABEL_675:
  if ((v504 & 8) == 0)
  {
    v505 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v506 = &__p;
    goto LABEL_696;
  }
  v513 = (const void *)v636.__r_.__value_.__l.__size_;
  v505 = v637 - v636.__r_.__value_.__l.__size_;
  if ((unint64_t)v637 - v636.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
LABEL_714:
    sub_20E860B7C();
LABEL_689:
  if (v505 >= 0x17)
  {
    v514 = (v505 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v505 | 7) != 0x17)
      v514 = v505 | 7;
    v515 = v514 + 1;
    v506 = (std::string *)operator new(v514 + 1);
    __p.__r_.__value_.__l.__size_ = v505;
    __p.__r_.__value_.__r.__words[2] = v515 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
    goto LABEL_695;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v505;
  v506 = &__p;
  if (v505)
LABEL_695:
    memmove(v506, v513, v505);
LABEL_696:
  v506->__r_.__value_.__s.__data_[v505] = 0;
  v613 = __p;
  v614.__r_.__value_.__s.__data_[0] = v503;
  v634.i64[0] = *MEMORY[0x24BEDB7F0];
  v516 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v634.i64 + *(_QWORD *)(v634.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v635 = v516;
  *((_QWORD *)&v635 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v640) < 0)
    operator delete((void *)v639);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290]((char *)&v641 + 8);
  v517 = std::string::insert(&v613, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
  v518 = *(_OWORD *)&v517->__r_.__value_.__l.__data_;
  v606.__r_.__value_.__r.__words[2] = v517->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v518;
  v517->__r_.__value_.__l.__size_ = 0;
  v517->__r_.__value_.__r.__words[2] = 0;
  v517->__r_.__value_.__r.__words[0] = 0;
  v519 = std::string::append(&v606, "').", 3uLL);
  v520 = *(_OWORD *)&v519->__r_.__value_.__l.__data_;
  v608 = v519->__r_.__value_.__r.__words[2];
  *(_OWORD *)v607 = v520;
  v519->__r_.__value_.__l.__size_ = 0;
  v519->__r_.__value_.__r.__words[2] = 0;
  v519->__r_.__value_.__r.__words[0] = 0;
  if (v608 >= 0)
    v521 = v607;
  else
    v521 = (void **)v607[0];
  if (v608 >= 0)
    v522 = HIBYTE(v608);
  else
    v522 = (uint64_t)v607[1];
  v523 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 282, (uint64_t)"ret.second", 10, (uint64_t)v521, v522, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v608) < 0)
  {
    operator delete(v607[0]);
    if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_706:
      if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_707;
      goto LABEL_711;
    }
  }
  else if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_706;
  }
  operator delete(v606.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_707:
    if (!v523)
      return;
LABEL_712:
    abort();
  }
LABEL_711:
  operator delete(v613.__r_.__value_.__l.__data_);
  if (v523)
    goto LABEL_712;
}

void sub_20F719F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20F6227AC((uint64_t)&a67);
  sub_20F4EE450((uint64_t)&STACK[0x220]);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20E86665C((uint64_t)&a39);
  sub_20E86665C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F719FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&STACK[0x220]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

char *sub_20F71A0DC(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DB420;
  strcpy(v2, "cv3d::vio::VIOLandmarkDepthVariable<double, false>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 50, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F71A2E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F71A300(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_210388250;
  strcpy(v2, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, false, Depth::Regular>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 74, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    if (result)
    {
      v10 = result - (_BYTE *)v9;
      if (result - (_BYTE *)v9 != -1)
      {
        if ((char)v4 < 0)
        {
          if (v6 >= v10)
          {
            *(_QWORD *)(a1 + 8) = v10;
            goto LABEL_15;
          }
        }
        else if (v10 <= v4)
        {
          *(_BYTE *)(a1 + 23) = v10 & 0x7F;
          v7 = (_QWORD *)a1;
LABEL_15:
          *((_BYTE *)v7 + v10) = 0;
          result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
          v4 = *(unsigned __int8 *)(a1 + 23);
          v7 = *(_QWORD **)a1;
          v6 = *(_QWORD *)(a1 + 8);
          v5 = *(_BYTE *)(a1 + 23);
          goto LABEL_16;
        }
        sub_20E89FD0C();
      }
    }
  }
LABEL_16:
  if (v5 < 0)
  {
    v11 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v11 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v12 = &v11[v6];
    v13 = v6;
    result = v11;
    do
    {
      result = (char *)memchr(result, 99, v13 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v12 && result == v11)
        {
          v15 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
        }
        break;
      }
      ++result;
      v13 = v12 - result;
    }
    while (v12 - result >= 5);
    if (v6 >= 7)
    {
      result = v11;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v12 && result == v11)
          {
            v15 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v15);
          }
          return result;
        }
        ++result;
        v6 = v12 - result;
      }
      while (v12 - result >= 7);
    }
  }
  return result;
}

void sub_20F71A500(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F71A520(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DCA60;
  strcpy(v2, "cv3d::vio::IntrinsicsCalibVariable<double, false>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 49, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F71A720(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F71A740(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DBBD0;
  strcpy(v2, "cv3d::vio::RadialDistortionCalibVariable<double, false>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 55, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F71A940(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F71A960(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DBF10;
  strcpy(v2, "cv3d::vio::ExternalLensCalibVariable<double, false>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 51, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20F71AB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F71AB84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = &v14;
  if (a1 == a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)(v3 + 8);
      v7 = &v14;
      v8 = &v14;
      if (v4)
      {
        v9 = v4;
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v9;
            v10 = *((_DWORD *)v9 + 7);
            if (v6 >= v10)
              break;
            v9 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_12;
          }
          if (v10 >= v6)
            break;
          v9 = v8[1];
          if (!v9)
          {
            v7 = v8 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v11 = operator new(0x20uLL);
        v11[7] = v6;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v8;
        *v7 = (uint64_t *)v11;
        if (*v13)
        {
          v13 = (uint64_t **)*v13;
          v11 = *v7;
        }
        sub_20E868578(v14, (uint64_t *)v11);
        v5 = ++v15;
      }
      v3 += 64;
      v4 = v14;
    }
    while (v3 != a2);
  }
  sub_20E86872C((uint64_t)&v13, v4);
  return v5;
}

void sub_20F71ACA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20E86872C((uint64_t)va, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_20F71ACB8(unint64_t result, uint64_t *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  _QWORD ***v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  BOOL v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  BOOL v177;
  char v178;
  _QWORD **v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  uint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  int64_t v213;
  int64_t v214;
  _QWORD ***v215;
  int64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD **v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD **v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  _BOOL4 v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  unint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  _QWORD **v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  int64_t v314;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v319;

  v7 = (uint64_t *)result;
LABEL_2:
  v311 = a2 - 2;
  v313 = a2 - 1;
  v310 = a2 - 3;
  v8 = a3;
  v317 = a2;
  while (2)
  {
    v9 = v7;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v167 = *(a2 - 1);
        v168 = *v7;
        result = sub_20F625764(*a3, *(uint64_t **)(v167 + 200), *(_QWORD *)(v167 + 208), *(uint64_t **)(*v7 + 200), *(_QWORD *)(*v7 + 208));
        if ((_DWORD)result)
        {
          *v7 = v167;
          *(a2 - 1) = v168;
        }
        return result;
      case 3:
        return sub_20F71C504(v7, v7 + 1, v313, a3);
      case 4:
        v169 = v7 + 1;
        v170 = v7 + 2;
        sub_20F71C504(v7, v7 + 1, v7 + 2, a3);
        v171 = *(a2 - 1);
        v172 = v7[2];
        result = sub_20F625764(*a3, *(uint64_t **)(v171 + 200), *(_QWORD *)(v171 + 208), *(uint64_t **)(v172 + 200), *(_QWORD *)(v172 + 208));
        if ((_DWORD)result)
        {
          *v170 = v171;
          *(a2 - 1) = v172;
          v173 = *v170;
          v174 = *v169;
          result = sub_20F625764(*a3, *(uint64_t **)(*v170 + 200), *(_QWORD *)(*v170 + 208), *(uint64_t **)(*v169 + 200), *(_QWORD *)(*v169 + 208));
          if ((_DWORD)result)
          {
            v7[1] = v173;
            v7[2] = v174;
            v175 = *v7;
            result = sub_20F625764(*a3, *(uint64_t **)(v173 + 200), *(_QWORD *)(v173 + 208), *(uint64_t **)(*v7 + 200), *(_QWORD *)(*v7 + 208));
            if ((_DWORD)result)
            {
              *v7 = v173;
              v7[1] = v175;
            }
          }
        }
        return result;
      case 5:
        return sub_20F71C834(v7, v7 + 1, v7 + 2, v7 + 3, v313, a3);
      default:
        if (v10 > 191)
        {
          v319 = v7;
          if (!a4)
          {
            if (v7 != a2)
            {
              v312 = (char *)a2 - (char *)v7;
              v213 = (unint64_t)(v11 - 2) >> 1;
              v214 = v213;
              v215 = a3;
              do
              {
                v216 = v214;
                if (v213 >= v214)
                {
                  v314 = v214;
                  v217 = (2 * v214) | 1;
                  v218 = v319;
                  v219 = &v319[v217];
                  v220 = 2 * v214 + 2;
                  v221 = *v215;
                  if (v220 >= v11)
                  {
                    v222 = *v219;
                  }
                  else
                  {
                    v222 = *v219;
                    v223 = v219[1];
                    v224 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 200), *(_QWORD *)(*v219 + 208), *(uint64_t **)(v223 + 200), *(_QWORD *)(v223 + 208));
                    if (v224)
                    {
                      v222 = v223;
                      ++v219;
                    }
                    v218 = v319;
                    if (v224)
                      v217 = v220;
                  }
                  v216 = v314;
                  v225 = &v218[v314];
                  v226 = *v225;
                  result = sub_20F625764(v221, *(uint64_t **)(v222 + 200), *(_QWORD *)(v222 + 208), *(uint64_t **)(*v225 + 200), *(_QWORD *)(*v225 + 208));
                  if ((result & 1) == 0)
                  {
                    v316 = v226;
                    while (1)
                    {
                      v231 = v219;
                      *v225 = v222;
                      if (v213 < v217)
                        break;
                      v232 = (2 * v217) | 1;
                      v219 = &v319[v232];
                      v217 = 2 * v217 + 2;
                      v233 = *v215;
                      if (v217 < v11)
                      {
                        v222 = *v219;
                        v227 = v11;
                        v228 = v213;
                        v229 = v219[1];
                        v230 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 200), *(_QWORD *)(*v219 + 208), *(uint64_t **)(v229 + 200), *(_QWORD *)(v229 + 208));
                        if (v230)
                          v222 = v229;
                        v213 = v228;
                        v11 = v227;
                        v226 = v316;
                        if (v230)
                          ++v219;
                        v215 = a3;
                        if (!v230)
                          v217 = v232;
                        result = sub_20F625764(v233, *(uint64_t **)(v222 + 200), *(_QWORD *)(v222 + 208), *(uint64_t **)(v316 + 200), *(_QWORD *)(v316 + 208));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                      else
                      {
                        v222 = *v219;
                        v217 = v232;
                        result = sub_20F625764(*v215, *(uint64_t **)(*v219 + 200), *(_QWORD *)(*v219 + 208), *(uint64_t **)(v226 + 200), *(_QWORD *)(v226 + 208));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                    }
                    *v231 = v226;
                    v216 = v314;
                  }
                }
                v214 = v216 - 1;
              }
              while (v216);
              v234 = v312 >> 3;
              v235 = v317;
              do
              {
                v237 = 0;
                v238 = *v319;
                v239 = v319;
                do
                {
                  v241 = &v239[v237 + 1];
                  v242 = (2 * v237) | 1;
                  v243 = 2 * v237 + 2;
                  if (v243 < v234)
                  {
                    v244 = v241[1];
                    v245 = *(uint64_t **)(*v241 + 200);
                    v246 = (uint64_t)(*(_QWORD *)(*v241 + 208) - (_QWORD)v245) >> 6;
                    result = *(_QWORD *)(v244 + 200);
                    v247 = (uint64_t)(*(_QWORD *)(v244 + 208) - result) >> 6;
                    if (v246 == v247)
                    {
                      v248 = (**a3)[1];
                      v251 = *(_QWORD *)(v248 + 56);
                      v249 = v248 + 56;
                      v250 = v251;
                      if (!v251)
                        goto LABEL_455;
                      v252 = *v245;
                      v253 = *((_DWORD *)v245 + 2);
                      v254 = v249;
                      v255 = v250;
                      do
                      {
                        v256 = *(_QWORD *)(v255 + 32);
                        if (v256 < v252)
                        {
                          v255 += 8;
                        }
                        else if (v256 == v252)
                        {
                          if (*(_DWORD *)(v255 + 40) < v253)
                            v255 += 8;
                          else
                            v254 = v255;
                        }
                        else
                        {
                          v254 = v255;
                        }
                        v255 = *(_QWORD *)v255;
                      }
                      while (v255);
                      if (v254 == v249
                        || (v257 = *(_QWORD *)(v254 + 32), v252 < v257)
                        || v252 == v257 && *(_DWORD *)(v254 + 40) > v253)
                      {
LABEL_455:
                        v254 = v249;
                      }
                      v258 = (_QWORD *)*(*a3)[1];
                      if (v258 == (_QWORD *)v254)
                      {
                        v259 = 0;
                      }
                      else
                      {
                        v259 = 0;
                        v260 = (_QWORD *)*(*a3)[1];
                        do
                        {
                          v261 = (_QWORD *)v260[1];
                          if (v261)
                          {
                            do
                            {
                              v262 = v261;
                              v261 = (_QWORD *)*v261;
                            }
                            while (v261);
                          }
                          else
                          {
                            do
                            {
                              v262 = (_QWORD *)v260[2];
                              v177 = *v262 == (_QWORD)v260;
                              v260 = v262;
                            }
                            while (!v177);
                          }
                          ++v259;
                          v260 = v262;
                        }
                        while (v262 != (_QWORD *)v254);
                      }
                      if (!v250)
                        goto LABEL_480;
                      v263 = *(_QWORD *)result;
                      v264 = *(_DWORD *)(result + 8);
                      result = v249;
                      do
                      {
                        v265 = *(_QWORD *)(v250 + 32);
                        if (v265 < v263)
                        {
                          v250 += 8;
                        }
                        else if (v265 == v263)
                        {
                          if (*(_DWORD *)(v250 + 40) < v264)
                            v250 += 8;
                          else
                            result = v250;
                        }
                        else
                        {
                          result = v250;
                        }
                        v250 = *(_QWORD *)v250;
                      }
                      while (v250);
                      if (result == v249
                        || (v266 = *(_QWORD *)(result + 32), v263 < v266)
                        || v263 == v266 && *(_DWORD *)(result + 40) > v264)
                      {
LABEL_480:
                        result = v249;
                      }
                      if (v258 == (_QWORD *)result)
                      {
                        v267 = 0;
                      }
                      else
                      {
                        v267 = 0;
                        do
                        {
                          v268 = (_QWORD *)v258[1];
                          if (v268)
                          {
                            do
                            {
                              v269 = v268;
                              v268 = (_QWORD *)*v268;
                            }
                            while (v268);
                          }
                          else
                          {
                            do
                            {
                              v269 = (_QWORD *)v258[2];
                              v177 = *v269 == (_QWORD)v258;
                              v258 = v269;
                            }
                            while (!v177);
                          }
                          ++v267;
                          v258 = v269;
                        }
                        while (v269 != (_QWORD *)result);
                      }
                      v240 = v259 > v267;
                    }
                    else
                    {
                      v240 = v246 > v247;
                    }
                    if (v240)
                    {
                      ++v241;
                      v242 = v243;
                    }
                  }
                  *v239 = *v241;
                  v239 = v241;
                  v237 = v242;
                }
                while (v242 <= (uint64_t)((unint64_t)(v234 - 2) >> 1));
                if (v241 == --v235)
                {
                  *v241 = v238;
                }
                else
                {
                  *v241 = *v235;
                  *v235 = v238;
                  v270 = (char *)v241 - (char *)v319 + 8;
                  if (v270 >= 9)
                  {
                    v271 = (((unint64_t)v270 >> 3) - 2) >> 1;
                    v272 = &v319[v271];
                    v273 = *v272;
                    v274 = *v241;
                    result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 200), *(_QWORD *)(*v272 + 208), *(uint64_t **)(*v241 + 200), *(_QWORD *)(*v241 + 208));
                    if ((_DWORD)result)
                    {
                      v275 = v235;
                      do
                      {
                        v276 = v272;
                        *v241 = v273;
                        if (!v271)
                          break;
                        v271 = (v271 - 1) >> 1;
                        v272 = &v319[v271];
                        v273 = *v272;
                        result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 200), *(_QWORD *)(*v272 + 208), *(uint64_t **)(v274 + 200), *(_QWORD *)(v274 + 208));
                        v241 = v276;
                      }
                      while ((result & 1) != 0);
                      *v276 = v274;
                      v235 = v275;
                    }
                  }
                }
              }
              while (v234-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            sub_20F71C504(v13, v7, v313, v8);
            --a4;
            v16 = *v7;
            v17 = *v8;
            if ((a5 & 1) != 0)
            {
LABEL_11:
              v20 = a4;
              v19 = *(_QWORD *)(v16 + 200);
              v18 = *(_QWORD *)(v16 + 208);
              goto LABEL_12;
            }
          }
          else
          {
            sub_20F71C504(v7, v13, v313, v8);
            v14 = v12;
            sub_20F71C504(v7 + 1, &v7[v14 - 1], v311, a3);
            sub_20F71C504(v7 + 2, &v7[v14 + 1], v310, a3);
            sub_20F71C504(&v7[v14 - 1], v13, &v7[v14 + 1], a3);
            v15 = *v7;
            *v7 = v7[v14];
            v7[v14] = v15;
            v8 = a3;
            --a4;
            v16 = *v7;
            v17 = *a3;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v19 = *(_QWORD *)(v16 + 200);
          v18 = *(_QWORD *)(v16 + 208);
          if (!sub_20F625764(v17, *(uint64_t **)(*(v7 - 1) + 200), *(_QWORD *)(*(v7 - 1) + 208), (uint64_t *)v19, v18))
          {
            result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v313 + 200), *(_QWORD *)(*v313 + 208));
            if ((result & 1) != 0)
            {
              do
              {
                v112 = v7[1];
                ++v7;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v112 + 200), *(_QWORD *)(v112 + 208));
              }
              while ((result & 1) == 0);
            }
            else
            {
              v113 = v7 + 1;
              do
              {
                v7 = v113;
                if (v113 >= v317)
                  break;
                ++v113;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v7 + 200), *(_QWORD *)(*v7 + 208));
              }
              while (!(_DWORD)result);
            }
            v114 = v317;
            if (v7 < v317)
            {
              v114 = v317;
              do
              {
                v115 = *--v114;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v115 + 200), *(_QWORD *)(v115 + 208));
              }
              while ((result & 1) != 0);
            }
            if (v7 >= v114)
            {
              a2 = v317;
            }
            else
            {
              v116 = *v7;
              v117 = *v114;
              a2 = v317;
              do
              {
                *v7 = v117;
                *v114 = v116;
                v118 = *(_QWORD *)(v16 + 200);
                v119 = (*(_QWORD *)(v16 + 208) - v118) >> 6;
                v120 = *v8;
                do
                {
                  while (1)
                  {
                    v121 = v7[1];
                    ++v7;
                    v116 = v121;
                    v122 = *(_QWORD *)(v121 + 200);
                    v123 = (*(_QWORD *)(v121 + 208) - v122) >> 6;
                    if (v119 == v123)
                      break;
                    if (v119 > v123)
                      goto LABEL_265;
                  }
                  v124 = (*v120)[1];
                  v127 = *(_QWORD *)(v124 + 56);
                  v125 = v124 + 56;
                  v126 = v127;
                  if (!v127)
                    goto LABEL_226;
                  v128 = *(_QWORD *)v118;
                  v129 = *(_DWORD *)(v118 + 8);
                  v130 = v125;
                  result = v126;
                  do
                  {
                    v131 = *(_QWORD *)(result + 32);
                    if (v131 < v128)
                    {
                      result += 8;
                    }
                    else if (v131 == v128)
                    {
                      if (*(_DWORD *)(result + 40) < v129)
                        result += 8;
                      else
                        v130 = result;
                    }
                    else
                    {
                      v130 = result;
                    }
                    result = *(_QWORD *)result;
                  }
                  while (result);
                  if (v130 == v125
                    || (result = *(_QWORD *)(v130 + 32), v128 < result)
                    || v128 == result && *(_DWORD *)(v130 + 40) > v129)
                  {
LABEL_226:
                    v130 = v125;
                  }
                  v132 = (_QWORD *)*v120[1];
                  if (v132 == (_QWORD *)v130)
                  {
                    v133 = 0;
                  }
                  else
                  {
                    v133 = 0;
                    result = *v120[1];
                    do
                    {
                      v134 = *(_QWORD **)(result + 8);
                      if (v134)
                      {
                        do
                        {
                          v135 = v134;
                          v134 = (_QWORD *)*v134;
                        }
                        while (v134);
                      }
                      else
                      {
                        do
                        {
                          v135 = *(_QWORD **)(result + 16);
                          v177 = *v135 == result;
                          result = (unint64_t)v135;
                        }
                        while (!v177);
                      }
                      ++v133;
                      result = (unint64_t)v135;
                    }
                    while (v135 != (_QWORD *)v130);
                  }
                  if (!v126)
                    goto LABEL_251;
                  result = *(_QWORD *)v122;
                  v136 = *(_DWORD *)(v122 + 8);
                  v137 = v125;
                  do
                  {
                    v138 = *(_QWORD *)(v126 + 32);
                    if (v138 < result)
                    {
                      v126 += 8;
                    }
                    else if (v138 == result)
                    {
                      if (*(_DWORD *)(v126 + 40) < v136)
                        v126 += 8;
                      else
                        v137 = v126;
                    }
                    else
                    {
                      v137 = v126;
                    }
                    v126 = *(_QWORD *)v126;
                  }
                  while (v126);
                  if (v137 == v125
                    || (v139 = *(_QWORD *)(v137 + 32), result < v139)
                    || result == v139 && *(_DWORD *)(v137 + 40) > v136)
                  {
LABEL_251:
                    v137 = v125;
                  }
                  if (v132 == (_QWORD *)v137)
                  {
                    v140 = 0;
                  }
                  else
                  {
                    v140 = 0;
                    do
                    {
                      v141 = (_QWORD *)v132[1];
                      if (v141)
                      {
                        do
                        {
                          v142 = v141;
                          v141 = (_QWORD *)*v141;
                        }
                        while (v141);
                      }
                      else
                      {
                        do
                        {
                          v142 = (_QWORD *)v132[2];
                          v177 = *v142 == (_QWORD)v132;
                          v132 = v142;
                        }
                        while (!v177);
                      }
                      ++v140;
                      v132 = v142;
                    }
                    while (v142 != (_QWORD *)v137);
                  }
                }
                while (v133 <= v140);
                do
                {
LABEL_265:
                  while (1)
                  {
                    v143 = *--v114;
                    v117 = v143;
                    v144 = *(unint64_t **)(v143 + 200);
                    v145 = (uint64_t)(*(_QWORD *)(v143 + 208) - (_QWORD)v144) >> 6;
                    if (v119 == v145)
                      break;
                    if (v119 <= v145)
                      goto LABEL_208;
                  }
                  v146 = (*v120)[1];
                  v149 = *(_QWORD *)(v146 + 56);
                  v147 = v146 + 56;
                  v148 = v149;
                  if (!v149)
                    goto LABEL_280;
                  v150 = *(_QWORD *)v118;
                  v151 = *(_DWORD *)(v118 + 8);
                  result = v147;
                  v152 = v148;
                  do
                  {
                    v153 = *(_QWORD *)(v152 + 32);
                    if (v153 < v150)
                    {
                      v152 += 8;
                    }
                    else if (v153 == v150)
                    {
                      if (*(_DWORD *)(v152 + 40) < v151)
                        v152 += 8;
                      else
                        result = v152;
                    }
                    else
                    {
                      result = v152;
                    }
                    v152 = *(_QWORD *)v152;
                  }
                  while (v152);
                  if (result == v147
                    || (v154 = *(_QWORD *)(result + 32), v150 < v154)
                    || v150 == v154 && *(_DWORD *)(result + 40) > v151)
                  {
LABEL_280:
                    result = v147;
                  }
                  v155 = (unint64_t *)*v120[1];
                  if (v155 == (unint64_t *)result)
                  {
                    v156 = 0;
                  }
                  else
                  {
                    v156 = 0;
                    v157 = (_QWORD *)*v120[1];
                    do
                    {
                      v158 = (_QWORD *)v157[1];
                      if (v158)
                      {
                        do
                        {
                          v159 = v158;
                          v158 = (_QWORD *)*v158;
                        }
                        while (v158);
                      }
                      else
                      {
                        do
                        {
                          v159 = (_QWORD *)v157[2];
                          v177 = *v159 == (_QWORD)v157;
                          v157 = v159;
                        }
                        while (!v177);
                      }
                      ++v156;
                      v157 = v159;
                    }
                    while (v159 != (_QWORD *)result);
                  }
                  if (!v148)
                    goto LABEL_305;
                  v160 = *v144;
                  result = *((unsigned int *)v144 + 2);
                  v161 = v147;
                  do
                  {
                    v162 = *(_QWORD *)(v148 + 32);
                    if (v162 < v160)
                    {
                      v148 += 8;
                    }
                    else if (v162 == v160)
                    {
                      if (*(_DWORD *)(v148 + 40) < result)
                        v148 += 8;
                      else
                        v161 = v148;
                    }
                    else
                    {
                      v161 = v148;
                    }
                    v148 = *(_QWORD *)v148;
                  }
                  while (v148);
                  if (v161 == v147
                    || (v163 = *(_QWORD *)(v161 + 32), v160 < v163)
                    || v160 == v163 && *(_DWORD *)(v161 + 40) > result)
                  {
LABEL_305:
                    v161 = v147;
                  }
                  if (v155 == (unint64_t *)v161)
                  {
                    v164 = 0;
                  }
                  else
                  {
                    v164 = 0;
                    do
                    {
                      result = v155[1];
                      if (result)
                      {
                        do
                        {
                          v165 = (unint64_t *)result;
                          result = *(_QWORD *)result;
                        }
                        while (result);
                      }
                      else
                      {
                        do
                        {
                          v165 = (unint64_t *)v155[2];
                          result = *v165;
                          v177 = *v165 == (_QWORD)v155;
                          v155 = v165;
                        }
                        while (!v177);
                      }
                      ++v164;
                      v155 = v165;
                    }
                    while (v165 != (unint64_t *)v161);
                  }
                }
                while (v156 > v164);
LABEL_208:
                ;
              }
              while (v7 < v114);
            }
            v166 = v7 - 1;
            if (v7 - 1 != v9)
              *v9 = *v166;
            a5 = 0;
            *v166 = v16;
            continue;
          }
          v20 = a4;
LABEL_12:
          v21 = (v18 - v19) >> 6;
          do
          {
            while (1)
            {
              v22 = v7;
              v24 = v7[1];
              ++v7;
              v23 = v24;
              v25 = *(uint64_t **)(v24 + 200);
              v26 = (uint64_t)(*(_QWORD *)(v24 + 208) - (_QWORD)v25) >> 6;
              if (v26 == v21)
                break;
              if (v26 <= v21)
                goto LABEL_69;
            }
            v27 = (*v17)[1];
            v30 = *(uint64_t **)(v27 + 56);
            v28 = (uint64_t *)(v27 + 56);
            v29 = v30;
            if (!v30)
              goto LABEL_27;
            v31 = *v25;
            v32 = *((_DWORD *)v25 + 2);
            v33 = v28;
            v34 = v29;
            do
            {
              v35 = v34[4];
              if (v35 < v31)
              {
                ++v34;
              }
              else if (v35 == v31)
              {
                if (*((_DWORD *)v34 + 10) < v32)
                  ++v34;
                else
                  v33 = v34;
              }
              else
              {
                v33 = v34;
              }
              v34 = (uint64_t *)*v34;
            }
            while (v34);
            if (v33 == v28 || (v36 = v33[4], v31 < v36) || v31 == v36 && *((_DWORD *)v33 + 10) > v32)
LABEL_27:
              v33 = v28;
            v37 = (uint64_t *)*v17[1];
            if (v37 == v33)
            {
              v38 = 0;
            }
            else
            {
              v38 = 0;
              v39 = (uint64_t *)*v17[1];
              do
              {
                v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    v41 = v40;
                    v40 = (uint64_t *)*v40;
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    v41 = (uint64_t *)v39[2];
                    v177 = *v41 == (_QWORD)v39;
                    v39 = v41;
                  }
                  while (!v177);
                }
                ++v38;
                v39 = v41;
              }
              while (v41 != v33);
            }
            if (!v29)
              goto LABEL_50;
            v42 = *(_QWORD *)v19;
            v43 = *(_DWORD *)(v19 + 8);
            v44 = v28;
            do
            {
              v45 = v29[4];
              if (v45 < v42)
              {
                ++v29;
              }
              else if (v45 == v42)
              {
                if (*((_DWORD *)v29 + 10) < v43)
                  ++v29;
                else
                  v44 = v29;
              }
              else
              {
                v44 = v29;
              }
              v29 = (uint64_t *)*v29;
            }
            while (v29);
            if (v44 == v28 || (v46 = v44[4], v42 < v46) || v42 == v46 && *((_DWORD *)v44 + 10) > v43)
LABEL_50:
              v44 = v28;
            if (v37 == v44)
            {
              v47 = 0;
            }
            else
            {
              v47 = 0;
              do
              {
                v48 = (uint64_t *)v37[1];
                if (v48)
                {
                  do
                  {
                    v49 = v48;
                    v48 = (uint64_t *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    v49 = (uint64_t *)v37[2];
                    v177 = *v49 == (_QWORD)v37;
                    v37 = v49;
                  }
                  while (!v177);
                }
                ++v47;
                v37 = v49;
              }
              while (v49 != v44);
            }
          }
          while (v38 > v47);
LABEL_69:
          v50 = v317;
          if (v22 == v319)
          {
            v50 = v317;
            do
            {
              if (v7 >= v50)
                break;
              v52 = *--v50;
            }
            while (!sub_20F625764(v17, *(uint64_t **)(v52 + 200), *(_QWORD *)(v52 + 208), (uint64_t *)v19, v18));
          }
          else
          {
            do
              v51 = *--v50;
            while (!sub_20F625764(v17, *(uint64_t **)(v51 + 200), *(_QWORD *)(v51 + 208), (uint64_t *)v19, v18));
          }
          a2 = v317;
          if (v7 < v50)
          {
            v53 = *v50;
            v54 = v7;
            v55 = v50;
            do
            {
              *v54 = v53;
              *v55 = v23;
              v56 = *(uint64_t **)(v16 + 200);
              v57 = (uint64_t)(*(_QWORD *)(v16 + 208) - (_QWORD)v56) >> 6;
              v58 = *v8;
              do
              {
                while (1)
                {
                  v22 = v54;
                  v59 = v54[1];
                  ++v54;
                  v23 = v59;
                  v60 = *(uint64_t **)(v59 + 200);
                  v61 = (uint64_t)(*(_QWORD *)(v59 + 208) - (_QWORD)v60) >> 6;
                  if (v61 == v57)
                    break;
                  if (v61 <= v57)
                    goto LABEL_136;
                }
                v62 = (*v58)[1];
                v65 = *(uint64_t **)(v62 + 56);
                v63 = (uint64_t *)(v62 + 56);
                v64 = v65;
                if (!v65)
                  goto LABEL_93;
                v66 = *v60;
                v67 = *((_DWORD *)v60 + 2);
                v68 = v63;
                v69 = v64;
                do
                {
                  v70 = v69[4];
                  if (v70 < v66)
                  {
                    ++v69;
                  }
                  else if (v70 == v66)
                  {
                    if (*((_DWORD *)v69 + 10) < v67)
                      ++v69;
                    else
                      v68 = v69;
                  }
                  else
                  {
                    v68 = v69;
                  }
                  v69 = (uint64_t *)*v69;
                }
                while (v69);
                if (v68 == v63 || (v71 = v68[4], v66 < v71) || v66 == v71 && *((_DWORD *)v68 + 10) > v67)
LABEL_93:
                  v68 = v63;
                v72 = (uint64_t *)*v58[1];
                if (v72 == v68)
                {
                  v73 = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = (uint64_t *)*v58[1];
                  do
                  {
                    v75 = (uint64_t *)v74[1];
                    if (v75)
                    {
                      do
                      {
                        v76 = v75;
                        v75 = (uint64_t *)*v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      do
                      {
                        v76 = (uint64_t *)v74[2];
                        v177 = *v76 == (_QWORD)v74;
                        v74 = v76;
                      }
                      while (!v177);
                    }
                    ++v73;
                    v74 = v76;
                  }
                  while (v76 != v68);
                }
                if (!v64)
                  goto LABEL_116;
                v77 = *v56;
                v78 = *((_DWORD *)v56 + 2);
                v79 = v63;
                do
                {
                  v80 = v64[4];
                  if (v80 < v77)
                  {
                    ++v64;
                  }
                  else if (v80 == v77)
                  {
                    if (*((_DWORD *)v64 + 10) < v78)
                      ++v64;
                    else
                      v79 = v64;
                  }
                  else
                  {
                    v79 = v64;
                  }
                  v64 = (uint64_t *)*v64;
                }
                while (v64);
                if (v79 == v63 || (v81 = v79[4], v77 < v81) || v77 == v81 && *((_DWORD *)v79 + 10) > v78)
LABEL_116:
                  v79 = v63;
                if (v72 == v79)
                {
                  v82 = 0;
                }
                else
                {
                  v82 = 0;
                  do
                  {
                    v83 = (uint64_t *)v72[1];
                    if (v83)
                    {
                      do
                      {
                        v84 = v83;
                        v83 = (uint64_t *)*v83;
                      }
                      while (v83);
                    }
                    else
                    {
                      do
                      {
                        v84 = (uint64_t *)v72[2];
                        v177 = *v84 == (_QWORD)v72;
                        v72 = v84;
                      }
                      while (!v177);
                    }
                    ++v82;
                    v72 = v84;
                  }
                  while (v84 != v79);
                }
              }
              while (v73 > v82);
              do
              {
LABEL_136:
                while (1)
                {
                  v85 = *--v55;
                  v53 = v85;
                  v86 = *(uint64_t **)(v85 + 200);
                  v87 = (uint64_t)(*(_QWORD *)(v85 + 208) - (_QWORD)v86) >> 6;
                  if (v87 == v57)
                    break;
                  if (v87 > v57)
                    goto LABEL_77;
                }
                v88 = (*v58)[1];
                v91 = *(uint64_t **)(v88 + 56);
                v89 = (uint64_t *)(v88 + 56);
                v90 = v91;
                if (!v91)
                  goto LABEL_149;
                v92 = *v86;
                v93 = *((_DWORD *)v86 + 2);
                v94 = v89;
                v95 = v90;
                do
                {
                  v96 = v95[4];
                  if (v96 < v92)
                  {
                    ++v95;
                  }
                  else if (v96 == v92)
                  {
                    if (*((_DWORD *)v95 + 10) < v93)
                      ++v95;
                    else
                      v94 = v95;
                  }
                  else
                  {
                    v94 = v95;
                  }
                  v95 = (uint64_t *)*v95;
                }
                while (v95);
                if (v94 == v89 || (v97 = v94[4], v92 < v97) || v92 == v97 && *((_DWORD *)v94 + 10) > v93)
LABEL_149:
                  v94 = v89;
                v98 = (uint64_t *)*v58[1];
                if (v98 == v94)
                {
                  v99 = 0;
                }
                else
                {
                  v99 = 0;
                  v100 = (uint64_t *)*v58[1];
                  do
                  {
                    v101 = (uint64_t *)v100[1];
                    if (v101)
                    {
                      do
                      {
                        v102 = v101;
                        v101 = (uint64_t *)*v101;
                      }
                      while (v101);
                    }
                    else
                    {
                      do
                      {
                        v102 = (uint64_t *)v100[2];
                        v177 = *v102 == (_QWORD)v100;
                        v100 = v102;
                      }
                      while (!v177);
                    }
                    ++v99;
                    v100 = v102;
                  }
                  while (v102 != v94);
                }
                if (!v90)
                  goto LABEL_172;
                v103 = *v56;
                v104 = *((_DWORD *)v56 + 2);
                v105 = v89;
                do
                {
                  v106 = v90[4];
                  if (v106 < v103)
                  {
                    ++v90;
                  }
                  else if (v106 == v103)
                  {
                    if (*((_DWORD *)v90 + 10) < v104)
                      ++v90;
                    else
                      v105 = v90;
                  }
                  else
                  {
                    v105 = v90;
                  }
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                if (v105 == v89 || (v107 = v105[4], v103 < v107) || v103 == v107 && *((_DWORD *)v105 + 10) > v104)
LABEL_172:
                  v105 = v89;
                if (v98 == v105)
                {
                  v108 = 0;
                }
                else
                {
                  v108 = 0;
                  do
                  {
                    v109 = (uint64_t *)v98[1];
                    if (v109)
                    {
                      do
                      {
                        v110 = v109;
                        v109 = (uint64_t *)*v109;
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        v110 = (uint64_t *)v98[2];
                        v177 = *v110 == (_QWORD)v98;
                        v98 = v110;
                      }
                      while (!v177);
                    }
                    ++v108;
                    v98 = v110;
                  }
                  while (v110 != v105);
                }
              }
              while (v99 <= v108);
LABEL_77:
              ;
            }
            while (v54 < v55);
          }
          if (v22 != v319)
            *v319 = *v22;
          *v22 = v16;
          a4 = v20;
          if (v7 < v50)
            goto LABEL_196;
          v111 = sub_20F71C610(v319, v22, v8);
          v7 = v22 + 1;
          result = sub_20F71C610(v22 + 1, v317, v8);
          if (!(_DWORD)result)
          {
            if (v111)
              continue;
LABEL_196:
            result = sub_20F71ACB8(v319, v22, v8, v20, a5 & 1);
            a5 = 0;
            v7 = v22 + 1;
            continue;
          }
          a2 = v22;
          v7 = v319;
          if (v111)
            return result;
          goto LABEL_2;
        }
        v176 = v7 + 1;
        v177 = v7 == a2 || v176 == a2;
        v178 = v177;
        if ((a5 & 1) != 0)
        {
          if ((v178 & 1) == 0)
          {
            v179 = *a3;
            v180 = v7;
            do
            {
              v182 = v176;
              v183 = *v180;
              v184 = v180[1];
              result = sub_20F625764(v179, *(uint64_t **)(v184 + 200), *(_QWORD *)(v184 + 208), *(uint64_t **)(*v180 + 200), *(_QWORD *)(*v180 + 208));
              if ((_DWORD)result)
              {
                v180[1] = v183;
                v181 = v7;
                if (v180 != v7)
                {
                  v185 = v180;
                  do
                  {
                    v187 = *--v185;
                    v186 = v187;
                    v188 = *(_QWORD *)(v184 + 200);
                    v189 = (*(_QWORD *)(v184 + 208) - v188) >> 6;
                    v190 = *(uint64_t **)(v187 + 200);
                    v191 = (uint64_t)(*(_QWORD *)(v187 + 208) - (_QWORD)v190) >> 6;
                    if (v189 == v191)
                    {
                      v192 = (**a3)[1];
                      v195 = *(uint64_t **)(v192 + 56);
                      v193 = (unint64_t *)(v192 + 56);
                      v194 = v195;
                      if (!v195)
                        goto LABEL_363;
                      v196 = *(_QWORD *)v188;
                      v197 = *(_DWORD *)(v188 + 8);
                      v198 = v193;
                      v199 = v194;
                      do
                      {
                        result = v199[4];
                        if (result < v196)
                        {
                          ++v199;
                        }
                        else if (result == v196)
                        {
                          result = *((_DWORD *)v199 + 10) < v197;
                          if (*((_DWORD *)v199 + 10) < v197)
                            ++v199;
                          else
                            v198 = (unint64_t *)v199;
                        }
                        else
                        {
                          v198 = (unint64_t *)v199;
                        }
                        v199 = (uint64_t *)*v199;
                      }
                      while (v199);
                      if (v198 == v193
                        || (v200 = v198[4], v196 < v200)
                        || v196 == v200 && *((_DWORD *)v198 + 10) > v197)
                      {
LABEL_363:
                        v198 = v193;
                      }
                      v201 = (unint64_t *)*(*a3)[1];
                      if (v201 == v198)
                      {
                        v202 = 0;
                      }
                      else
                      {
                        v202 = 0;
                        v203 = (unint64_t *)*(*a3)[1];
                        do
                        {
                          result = v203[1];
                          if (result)
                          {
                            do
                            {
                              v204 = (unint64_t *)result;
                              result = *(_QWORD *)result;
                            }
                            while (result);
                          }
                          else
                          {
                            do
                            {
                              v204 = (unint64_t *)v203[2];
                              result = *v204;
                              v177 = *v204 == (_QWORD)v203;
                              v203 = v204;
                            }
                            while (!v177);
                          }
                          ++v202;
                          v203 = v204;
                        }
                        while (v204 != v198);
                      }
                      if (!v194)
                        goto LABEL_386;
                      v205 = *v190;
                      v206 = *((_DWORD *)v190 + 2);
                      v207 = v193;
                      do
                      {
                        v208 = v194[4];
                        if (v208 < v205)
                        {
                          ++v194;
                        }
                        else if (v208 == v205)
                        {
                          result = (unint64_t)(v194 + 1);
                          if (*((_DWORD *)v194 + 10) < v206)
                            ++v194;
                          else
                            v207 = (unint64_t *)v194;
                        }
                        else
                        {
                          v207 = (unint64_t *)v194;
                        }
                        v194 = (uint64_t *)*v194;
                      }
                      while (v194);
                      if (v207 == v193
                        || (v209 = v207[4], v205 < v209)
                        || v205 == v209 && *((_DWORD *)v207 + 10) > v206)
                      {
LABEL_386:
                        v207 = v193;
                      }
                      if (v201 == v207)
                      {
                        v210 = 0;
                      }
                      else
                      {
                        v210 = 0;
                        do
                        {
                          v211 = (unint64_t *)v201[1];
                          if (v211)
                          {
                            do
                            {
                              v212 = v211;
                              v211 = (unint64_t *)*v211;
                            }
                            while (v211);
                          }
                          else
                          {
                            do
                            {
                              v212 = (unint64_t *)v201[2];
                              v177 = *v212 == (_QWORD)v201;
                              v201 = v212;
                            }
                            while (!v177);
                          }
                          ++v210;
                          v201 = v212;
                        }
                        while (v212 != v207);
                      }
                      if (v202 <= v210)
                      {
LABEL_342:
                        v181 = v180;
                        goto LABEL_343;
                      }
                    }
                    else if (v189 <= v191)
                    {
                      goto LABEL_342;
                    }
                    *v180 = v186;
                    v180 = v185;
                  }
                  while (v185 != v7);
                  v181 = v7;
                }
LABEL_343:
                *v181 = v184;
                v179 = *a3;
              }
              v176 = v182 + 1;
              v180 = v182;
            }
            while (v182 + 1 != a2);
          }
        }
        else if ((v178 & 1) == 0)
        {
          v277 = *a3;
          do
          {
            v278 = v176;
            v280 = *v9;
            v279 = v9[1];
            result = sub_20F625764(v277, *(uint64_t **)(v279 + 200), *(_QWORD *)(v279 + 208), *(uint64_t **)(*v9 + 200), *(_QWORD *)(*v9 + 208));
            if ((_DWORD)result)
            {
              v281 = v278;
              do
              {
                while (1)
                {
                  *v281 = v280;
                  v281 = v9;
                  v282 = *--v9;
                  v280 = v282;
                  v283 = *(uint64_t **)(v279 + 200);
                  v284 = (uint64_t)(*(_QWORD *)(v279 + 208) - (_QWORD)v283) >> 6;
                  v285 = *(uint64_t **)(v282 + 200);
                  v286 = (uint64_t)(*(_QWORD *)(v282 + 208) - (_QWORD)v285) >> 6;
                  if (v284 == v286)
                    break;
                  if (v284 <= v286)
                    goto LABEL_502;
                }
                v287 = (**a3)[1];
                v290 = *(uint64_t **)(v287 + 56);
                v288 = (uint64_t *)(v287 + 56);
                v289 = v290;
                if (!v290)
                  goto LABEL_522;
                v291 = *v283;
                v292 = *((_DWORD *)v283 + 2);
                v293 = v288;
                v294 = v289;
                do
                {
                  v295 = v294[4];
                  if (v295 < v291)
                  {
                    ++v294;
                  }
                  else if (v295 == v291)
                  {
                    result = (unint64_t)(v294 + 1);
                    if (*((_DWORD *)v294 + 10) < v292)
                      ++v294;
                    else
                      v293 = v294;
                  }
                  else
                  {
                    v293 = v294;
                  }
                  v294 = (uint64_t *)*v294;
                }
                while (v294);
                if (v293 == v288 || (v296 = v293[4], v291 < v296) || v291 == v296 && *((_DWORD *)v293 + 10) > v292)
LABEL_522:
                  v293 = v288;
                v297 = (uint64_t *)*(*a3)[1];
                if (v297 == v293)
                {
                  v298 = 0;
                }
                else
                {
                  v298 = 0;
                  v299 = (uint64_t *)*(*a3)[1];
                  do
                  {
                    v300 = (uint64_t *)v299[1];
                    if (v300)
                    {
                      do
                      {
                        v301 = v300;
                        v300 = (uint64_t *)*v300;
                      }
                      while (v300);
                    }
                    else
                    {
                      do
                      {
                        v301 = (uint64_t *)v299[2];
                        v177 = *v301 == (_QWORD)v299;
                        v299 = v301;
                      }
                      while (!v177);
                    }
                    ++v298;
                    v299 = v301;
                  }
                  while (v301 != v293);
                }
                if (!v289)
                  goto LABEL_547;
                v302 = *v285;
                v303 = *((_DWORD *)v285 + 2);
                v304 = v288;
                do
                {
                  v305 = v289[4];
                  if (v305 < v302)
                  {
                    ++v289;
                  }
                  else if (v305 == v302)
                  {
                    if (*((_DWORD *)v289 + 10) < v303)
                      ++v289;
                    else
                      v304 = v289;
                  }
                  else
                  {
                    v304 = v289;
                  }
                  v289 = (uint64_t *)*v289;
                }
                while (v289);
                if (v304 == v288 || (v306 = v304[4], v302 < v306) || v302 == v306 && *((_DWORD *)v304 + 10) > v303)
LABEL_547:
                  v304 = v288;
                if (v297 == v304)
                {
                  v307 = 0;
                }
                else
                {
                  v307 = 0;
                  do
                  {
                    v308 = (uint64_t *)v297[1];
                    if (v308)
                    {
                      do
                      {
                        v309 = v308;
                        v308 = (uint64_t *)*v308;
                      }
                      while (v308);
                    }
                    else
                    {
                      do
                      {
                        v309 = (uint64_t *)v297[2];
                        v177 = *v309 == (_QWORD)v297;
                        v297 = v309;
                      }
                      while (!v177);
                    }
                    ++v307;
                    v297 = v309;
                  }
                  while (v309 != v304);
                }
              }
              while (v298 > v307);
LABEL_502:
              *v281 = v279;
              v277 = *a3;
            }
            v176 = v278 + 1;
            v9 = v278;
          }
          while (v278 + 1 != a2);
        }
        return result;
    }
  }
}

